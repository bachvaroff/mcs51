                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stack
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _stack_init
                                     12 	.globl _stack_push
                                     13 	.globl _stack_pop
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_peek2
                                     16 	.globl _stack_iter_peek
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; internal ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DSEG    (DATA)
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable items in internal ram 
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XSEG    (XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XABS    (ABS,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; external initialized ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XISEG   (XDATA)
                                     68 	.area HOME    (CODE)
                                     69 	.area GSINIT0 (CODE)
                                     70 	.area GSINIT1 (CODE)
                                     71 	.area GSINIT2 (CODE)
                                     72 	.area GSINIT3 (CODE)
                                     73 	.area GSINIT4 (CODE)
                                     74 	.area GSINIT5 (CODE)
                                     75 	.area GSINIT  (CODE)
                                     76 	.area GSFINAL (CODE)
                                     77 	.area CSEG    (CODE)
                                     78 ;--------------------------------------------------------
                                     79 ; global & static initialisations
                                     80 ;--------------------------------------------------------
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area HOME    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; code
                                     92 ;--------------------------------------------------------
                                     93 	.area CSEG    (CODE)
                                     94 ;------------------------------------------------------------
                                     95 ;Allocation info for local variables in function 'stack_init'
                                     96 ;------------------------------------------------------------
                                     97 ;s                         Allocated to registers r5 r6 r7 
                                     98 ;------------------------------------------------------------
                                     99 ;	stack.c:4: void stack_init(stack_t *s) __reentrant {
                                    100 ;	-----------------------------------------
                                    101 ;	 function stack_init
                                    102 ;	-----------------------------------------
      000000                        103 _stack_init:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
                                    112 ;	stack.c:5: s->spin = 0;
      000000 AD 82            [24]  113 	mov	r5,dpl
      000002 AE 83            [24]  114 	mov	r6,dph
      000004 AF F0            [24]  115 	mov	r7,b
      000006 E4               [12]  116 	clr	a
      000007 12r00r00         [24]  117 	lcall	__gptrput
                                    118 ;	stack.c:6: s->N = SIZE;
      00000A 04               [12]  119 	inc	a
      00000B 2D               [12]  120 	add	a,r5
      00000C FA               [12]  121 	mov	r2,a
      00000D 74 20            [12]  122 	mov	a,#0x20
      00000F 3E               [12]  123 	addc	a,r6
      000010 FB               [12]  124 	mov	r3,a
      000011 8F 04            [24]  125 	mov	ar4,r7
      000013 8A 82            [24]  126 	mov	dpl,r2
      000015 8B 83            [24]  127 	mov	dph,r3
      000017 8C F0            [24]  128 	mov	b,r4
      000019 E4               [12]  129 	clr	a
      00001A 12r00r00         [24]  130 	lcall	__gptrput
      00001D A3               [24]  131 	inc	dptr
      00001E 74 08            [12]  132 	mov	a,#0x08
      000020 12r00r00         [24]  133 	lcall	__gptrput
                                    134 ;	stack.c:7: s->p = -1;
      000023 74 03            [12]  135 	mov	a,#0x03
      000025 2D               [12]  136 	add	a,r5
      000026 FD               [12]  137 	mov	r5,a
      000027 74 20            [12]  138 	mov	a,#0x20
      000029 3E               [12]  139 	addc	a,r6
      00002A FE               [12]  140 	mov	r6,a
      00002B 8D 82            [24]  141 	mov	dpl,r5
      00002D 8E 83            [24]  142 	mov	dph,r6
      00002F 8F F0            [24]  143 	mov	b,r7
      000031 74 FF            [12]  144 	mov	a,#0xff
      000033 12r00r00         [24]  145 	lcall	__gptrput
      000036 A3               [24]  146 	inc	dptr
                                    147 ;	stack.c:9: return;
                                    148 ;	stack.c:10: }
      000037 02r00r00         [24]  149 	ljmp	__gptrput
                                    150 ;------------------------------------------------------------
                                    151 ;Allocation info for local variables in function 'stack_push'
                                    152 ;------------------------------------------------------------
                                    153 ;val                       Allocated to stack - _bp -6
                                    154 ;s                         Allocated to stack - _bp +1
                                    155 ;sloc0                     Allocated to stack - _bp +4
                                    156 ;------------------------------------------------------------
                                    157 ;	stack.c:12: int stack_push(stack_t *s, long val) __reentrant {
                                    158 ;	-----------------------------------------
                                    159 ;	 function stack_push
                                    160 ;	-----------------------------------------
      00003A                        161 _stack_push:
      00003A C0*00            [24]  162 	push	_bp
      00003C 85 81*00         [24]  163 	mov	_bp,sp
      00003F C0 82            [24]  164 	push	dpl
      000041 C0 83            [24]  165 	push	dph
      000043 C0 F0            [24]  166 	push	b
      000045 05 81            [12]  167 	inc	sp
      000047 05 81            [12]  168 	inc	sp
                                    169 ;	stack.c:13: if (s->p == (s->N - 1)) return 0;
      000049 A8*00            [24]  170 	mov	r0,_bp
      00004B 08               [12]  171 	inc	r0
      00004C 74 03            [12]  172 	mov	a,#0x03
      00004E 26               [12]  173 	add	a,@r0
      00004F FA               [12]  174 	mov	r2,a
      000050 74 20            [12]  175 	mov	a,#0x20
      000052 08               [12]  176 	inc	r0
      000053 36               [12]  177 	addc	a,@r0
      000054 FB               [12]  178 	mov	r3,a
      000055 08               [12]  179 	inc	r0
      000056 86 04            [24]  180 	mov	ar4,@r0
      000058 8A 82            [24]  181 	mov	dpl,r2
      00005A 8B 83            [24]  182 	mov	dph,r3
      00005C 8C F0            [24]  183 	mov	b,r4
      00005E E5*00            [12]  184 	mov	a,_bp
      000060 24 04            [12]  185 	add	a,#0x04
      000062 F8               [12]  186 	mov	r0,a
      000063 12r00r00         [24]  187 	lcall	__gptrget
      000066 F6               [12]  188 	mov	@r0,a
      000067 A3               [24]  189 	inc	dptr
      000068 12r00r00         [24]  190 	lcall	__gptrget
      00006B 08               [12]  191 	inc	r0
      00006C F6               [12]  192 	mov	@r0,a
      00006D A8*00            [24]  193 	mov	r0,_bp
      00006F 08               [12]  194 	inc	r0
      000070 74 01            [12]  195 	mov	a,#0x01
      000072 26               [12]  196 	add	a,@r0
      000073 FD               [12]  197 	mov	r5,a
      000074 74 20            [12]  198 	mov	a,#0x20
      000076 08               [12]  199 	inc	r0
      000077 36               [12]  200 	addc	a,@r0
      000078 FE               [12]  201 	mov	r6,a
      000079 08               [12]  202 	inc	r0
      00007A 86 07            [24]  203 	mov	ar7,@r0
      00007C 8D 82            [24]  204 	mov	dpl,r5
      00007E 8E 83            [24]  205 	mov	dph,r6
      000080 8F F0            [24]  206 	mov	b,r7
      000082 12r00r00         [24]  207 	lcall	__gptrget
      000085 FD               [12]  208 	mov	r5,a
      000086 A3               [24]  209 	inc	dptr
      000087 12r00r00         [24]  210 	lcall	__gptrget
      00008A FE               [12]  211 	mov	r6,a
      00008B 1D               [12]  212 	dec	r5
      00008C BD FF 01         [24]  213 	cjne	r5,#0xff,00109$
      00008F 1E               [12]  214 	dec	r6
      000090                        215 00109$:
      000090 E5*00            [12]  216 	mov	a,_bp
      000092 24 04            [12]  217 	add	a,#0x04
      000094 F8               [12]  218 	mov	r0,a
      000095 E6               [12]  219 	mov	a,@r0
      000096 B5 05 07         [24]  220 	cjne	a,ar5,00110$
      000099 08               [12]  221 	inc	r0
      00009A E6               [12]  222 	mov	a,@r0
      00009B B5 06 02         [24]  223 	cjne	a,ar6,00110$
      00009E 80 02            [24]  224 	sjmp	00111$
      0000A0                        225 00110$:
      0000A0 80 06            [24]  226 	sjmp	00102$
      0000A2                        227 00111$:
      0000A2 90 00 00         [24]  228 	mov	dptr,#0x0000
      0000A5 02r01r2E         [24]  229 	ljmp	00103$
      0000A8                        230 00102$:
                                    231 ;	stack.c:14: s->spin = 1;
      0000A8 A8*00            [24]  232 	mov	r0,_bp
      0000AA 08               [12]  233 	inc	r0
      0000AB 86 82            [24]  234 	mov	dpl,@r0
      0000AD 08               [12]  235 	inc	r0
      0000AE 86 83            [24]  236 	mov	dph,@r0
      0000B0 08               [12]  237 	inc	r0
      0000B1 86 F0            [24]  238 	mov	b,@r0
      0000B3 74 01            [12]  239 	mov	a,#0x01
      0000B5 12r00r00         [24]  240 	lcall	__gptrput
                                    241 ;	stack.c:15: s->p++;
      0000B8 8A 82            [24]  242 	mov	dpl,r2
      0000BA 8B 83            [24]  243 	mov	dph,r3
      0000BC 8C F0            [24]  244 	mov	b,r4
      0000BE 12r00r00         [24]  245 	lcall	__gptrget
      0000C1 FE               [12]  246 	mov	r6,a
      0000C2 A3               [24]  247 	inc	dptr
      0000C3 12r00r00         [24]  248 	lcall	__gptrget
      0000C6 FF               [12]  249 	mov	r7,a
      0000C7 0E               [12]  250 	inc	r6
      0000C8 BE 00 01         [24]  251 	cjne	r6,#0x00,00112$
      0000CB 0F               [12]  252 	inc	r7
      0000CC                        253 00112$:
      0000CC 8A 82            [24]  254 	mov	dpl,r2
      0000CE 8B 83            [24]  255 	mov	dph,r3
      0000D0 8C F0            [24]  256 	mov	b,r4
      0000D2 EE               [12]  257 	mov	a,r6
      0000D3 12r00r00         [24]  258 	lcall	__gptrput
      0000D6 A3               [24]  259 	inc	dptr
      0000D7 EF               [12]  260 	mov	a,r7
      0000D8 12r00r00         [24]  261 	lcall	__gptrput
                                    262 ;	stack.c:16: s->data[s->p] = val;
      0000DB A8*00            [24]  263 	mov	r0,_bp
      0000DD 08               [12]  264 	inc	r0
      0000DE 74 01            [12]  265 	mov	a,#0x01
      0000E0 26               [12]  266 	add	a,@r0
      0000E1 FB               [12]  267 	mov	r3,a
      0000E2 E4               [12]  268 	clr	a
      0000E3 08               [12]  269 	inc	r0
      0000E4 36               [12]  270 	addc	a,@r0
      0000E5 FC               [12]  271 	mov	r4,a
      0000E6 08               [12]  272 	inc	r0
      0000E7 86 05            [24]  273 	mov	ar5,@r0
      0000E9 EE               [12]  274 	mov	a,r6
      0000EA 2E               [12]  275 	add	a,r6
      0000EB FE               [12]  276 	mov	r6,a
      0000EC EF               [12]  277 	mov	a,r7
      0000ED 33               [12]  278 	rlc	a
      0000EE FF               [12]  279 	mov	r7,a
      0000EF EE               [12]  280 	mov	a,r6
      0000F0 2E               [12]  281 	add	a,r6
      0000F1 FE               [12]  282 	mov	r6,a
      0000F2 EF               [12]  283 	mov	a,r7
      0000F3 33               [12]  284 	rlc	a
      0000F4 FF               [12]  285 	mov	r7,a
      0000F5 EE               [12]  286 	mov	a,r6
      0000F6 2B               [12]  287 	add	a,r3
      0000F7 FB               [12]  288 	mov	r3,a
      0000F8 EF               [12]  289 	mov	a,r7
      0000F9 3C               [12]  290 	addc	a,r4
      0000FA FC               [12]  291 	mov	r4,a
      0000FB 8B 82            [24]  292 	mov	dpl,r3
      0000FD 8C 83            [24]  293 	mov	dph,r4
      0000FF 8D F0            [24]  294 	mov	b,r5
      000101 E5*00            [12]  295 	mov	a,_bp
      000103 24 FA            [12]  296 	add	a,#0xfa
      000105 F8               [12]  297 	mov	r0,a
      000106 E6               [12]  298 	mov	a,@r0
      000107 12r00r00         [24]  299 	lcall	__gptrput
      00010A A3               [24]  300 	inc	dptr
      00010B 08               [12]  301 	inc	r0
      00010C E6               [12]  302 	mov	a,@r0
      00010D 12r00r00         [24]  303 	lcall	__gptrput
      000110 A3               [24]  304 	inc	dptr
      000111 08               [12]  305 	inc	r0
      000112 E6               [12]  306 	mov	a,@r0
      000113 12r00r00         [24]  307 	lcall	__gptrput
      000116 A3               [24]  308 	inc	dptr
      000117 08               [12]  309 	inc	r0
      000118 E6               [12]  310 	mov	a,@r0
      000119 12r00r00         [24]  311 	lcall	__gptrput
                                    312 ;	stack.c:17: s->spin = 0;
      00011C A8*00            [24]  313 	mov	r0,_bp
      00011E 08               [12]  314 	inc	r0
      00011F 86 82            [24]  315 	mov	dpl,@r0
      000121 08               [12]  316 	inc	r0
      000122 86 83            [24]  317 	mov	dph,@r0
      000124 08               [12]  318 	inc	r0
      000125 86 F0            [24]  319 	mov	b,@r0
      000127 E4               [12]  320 	clr	a
      000128 12r00r00         [24]  321 	lcall	__gptrput
                                    322 ;	stack.c:18: return 1;
      00012B 90 00 01         [24]  323 	mov	dptr,#0x0001
      00012E                        324 00103$:
                                    325 ;	stack.c:19: }
      00012E 85*00 81         [24]  326 	mov	sp,_bp
      000131 D0*00            [24]  327 	pop	_bp
      000133 22               [24]  328 	ret
                                    329 ;------------------------------------------------------------
                                    330 ;Allocation info for local variables in function 'stack_pop'
                                    331 ;------------------------------------------------------------
                                    332 ;val                       Allocated to stack - _bp -5
                                    333 ;s                         Allocated to stack - _bp +1
                                    334 ;sloc0                     Allocated to stack - _bp +4
                                    335 ;sloc1                     Allocated to stack - _bp +7
                                    336 ;sloc2                     Allocated to stack - _bp +7
                                    337 ;------------------------------------------------------------
                                    338 ;	stack.c:21: int stack_pop(stack_t *s, long *val) __reentrant {
                                    339 ;	-----------------------------------------
                                    340 ;	 function stack_pop
                                    341 ;	-----------------------------------------
      000134                        342 _stack_pop:
      000134 C0*00            [24]  343 	push	_bp
      000136 85 81*00         [24]  344 	mov	_bp,sp
      000139 C0 82            [24]  345 	push	dpl
      00013B C0 83            [24]  346 	push	dph
      00013D C0 F0            [24]  347 	push	b
      00013F E5 81            [12]  348 	mov	a,sp
      000141 24 06            [12]  349 	add	a,#0x06
      000143 F5 81            [12]  350 	mov	sp,a
                                    351 ;	stack.c:22: if (s->p < 0) return 0;
      000145 A8*00            [24]  352 	mov	r0,_bp
      000147 08               [12]  353 	inc	r0
      000148 E5*00            [12]  354 	mov	a,_bp
      00014A 24 07            [12]  355 	add	a,#0x07
      00014C F9               [12]  356 	mov	r1,a
      00014D 74 03            [12]  357 	mov	a,#0x03
      00014F 26               [12]  358 	add	a,@r0
      000150 F7               [12]  359 	mov	@r1,a
      000151 74 20            [12]  360 	mov	a,#0x20
      000153 08               [12]  361 	inc	r0
      000154 36               [12]  362 	addc	a,@r0
      000155 09               [12]  363 	inc	r1
      000156 F7               [12]  364 	mov	@r1,a
      000157 08               [12]  365 	inc	r0
      000158 09               [12]  366 	inc	r1
      000159 E6               [12]  367 	mov	a,@r0
      00015A F7               [12]  368 	mov	@r1,a
      00015B E5*00            [12]  369 	mov	a,_bp
      00015D 24 07            [12]  370 	add	a,#0x07
      00015F F8               [12]  371 	mov	r0,a
      000160 86 82            [24]  372 	mov	dpl,@r0
      000162 08               [12]  373 	inc	r0
      000163 86 83            [24]  374 	mov	dph,@r0
      000165 08               [12]  375 	inc	r0
      000166 86 F0            [24]  376 	mov	b,@r0
      000168 12r00r00         [24]  377 	lcall	__gptrget
      00016B FE               [12]  378 	mov	r6,a
      00016C A3               [24]  379 	inc	dptr
      00016D 12r00r00         [24]  380 	lcall	__gptrget
      000170 FF               [12]  381 	mov	r7,a
      000171 30 E7 06         [24]  382 	jnb	acc.7,00102$
      000174 90 00 00         [24]  383 	mov	dptr,#0x0000
      000177 02r02r52         [24]  384 	ljmp	00103$
      00017A                        385 00102$:
                                    386 ;	stack.c:23: s->spin = 1;
      00017A A8*00            [24]  387 	mov	r0,_bp
      00017C 08               [12]  388 	inc	r0
      00017D 86 82            [24]  389 	mov	dpl,@r0
      00017F 08               [12]  390 	inc	r0
      000180 86 83            [24]  391 	mov	dph,@r0
      000182 08               [12]  392 	inc	r0
      000183 86 F0            [24]  393 	mov	b,@r0
      000185 74 01            [12]  394 	mov	a,#0x01
      000187 12r00r00         [24]  395 	lcall	__gptrput
                                    396 ;	stack.c:24: *val = s->data[s->p];
      00018A E5*00            [12]  397 	mov	a,_bp
      00018C 24 FB            [12]  398 	add	a,#0xfb
      00018E F8               [12]  399 	mov	r0,a
      00018F E5*00            [12]  400 	mov	a,_bp
      000191 24 04            [12]  401 	add	a,#0x04
      000193 F9               [12]  402 	mov	r1,a
      000194 E6               [12]  403 	mov	a,@r0
      000195 F7               [12]  404 	mov	@r1,a
      000196 08               [12]  405 	inc	r0
      000197 09               [12]  406 	inc	r1
      000198 E6               [12]  407 	mov	a,@r0
      000199 F7               [12]  408 	mov	@r1,a
      00019A 08               [12]  409 	inc	r0
      00019B 09               [12]  410 	inc	r1
      00019C E6               [12]  411 	mov	a,@r0
      00019D F7               [12]  412 	mov	@r1,a
      00019E A8*00            [24]  413 	mov	r0,_bp
      0001A0 08               [12]  414 	inc	r0
      0001A1 74 01            [12]  415 	mov	a,#0x01
      0001A3 26               [12]  416 	add	a,@r0
      0001A4 FD               [12]  417 	mov	r5,a
      0001A5 E4               [12]  418 	clr	a
      0001A6 08               [12]  419 	inc	r0
      0001A7 36               [12]  420 	addc	a,@r0
      0001A8 FC               [12]  421 	mov	r4,a
      0001A9 08               [12]  422 	inc	r0
      0001AA 86 03            [24]  423 	mov	ar3,@r0
      0001AC E5*00            [12]  424 	mov	a,_bp
      0001AE 24 07            [12]  425 	add	a,#0x07
      0001B0 F8               [12]  426 	mov	r0,a
      0001B1 86 82            [24]  427 	mov	dpl,@r0
      0001B3 08               [12]  428 	inc	r0
      0001B4 86 83            [24]  429 	mov	dph,@r0
      0001B6 08               [12]  430 	inc	r0
      0001B7 86 F0            [24]  431 	mov	b,@r0
      0001B9 12r00r00         [24]  432 	lcall	__gptrget
      0001BC FF               [12]  433 	mov	r7,a
      0001BD A3               [24]  434 	inc	dptr
      0001BE 12r00r00         [24]  435 	lcall	__gptrget
      0001C1 FE               [12]  436 	mov	r6,a
      0001C2 EF               [12]  437 	mov	a,r7
      0001C3 2F               [12]  438 	add	a,r7
      0001C4 FF               [12]  439 	mov	r7,a
      0001C5 EE               [12]  440 	mov	a,r6
      0001C6 33               [12]  441 	rlc	a
      0001C7 FE               [12]  442 	mov	r6,a
      0001C8 EF               [12]  443 	mov	a,r7
      0001C9 2F               [12]  444 	add	a,r7
      0001CA FF               [12]  445 	mov	r7,a
      0001CB EE               [12]  446 	mov	a,r6
      0001CC 33               [12]  447 	rlc	a
      0001CD FE               [12]  448 	mov	r6,a
      0001CE EF               [12]  449 	mov	a,r7
      0001CF 2D               [12]  450 	add	a,r5
      0001D0 FD               [12]  451 	mov	r5,a
      0001D1 EE               [12]  452 	mov	a,r6
      0001D2 3C               [12]  453 	addc	a,r4
      0001D3 FE               [12]  454 	mov	r6,a
      0001D4 8B 07            [24]  455 	mov	ar7,r3
      0001D6 8D 82            [24]  456 	mov	dpl,r5
      0001D8 8E 83            [24]  457 	mov	dph,r6
      0001DA 8F F0            [24]  458 	mov	b,r7
      0001DC 12r00r00         [24]  459 	lcall	__gptrget
      0001DF FD               [12]  460 	mov	r5,a
      0001E0 A3               [24]  461 	inc	dptr
      0001E1 12r00r00         [24]  462 	lcall	__gptrget
      0001E4 FE               [12]  463 	mov	r6,a
      0001E5 A3               [24]  464 	inc	dptr
      0001E6 12r00r00         [24]  465 	lcall	__gptrget
      0001E9 FC               [12]  466 	mov	r4,a
      0001EA A3               [24]  467 	inc	dptr
      0001EB 12r00r00         [24]  468 	lcall	__gptrget
      0001EE FF               [12]  469 	mov	r7,a
      0001EF E5*00            [12]  470 	mov	a,_bp
      0001F1 24 04            [12]  471 	add	a,#0x04
      0001F3 F8               [12]  472 	mov	r0,a
      0001F4 86 82            [24]  473 	mov	dpl,@r0
      0001F6 08               [12]  474 	inc	r0
      0001F7 86 83            [24]  475 	mov	dph,@r0
      0001F9 08               [12]  476 	inc	r0
      0001FA 86 F0            [24]  477 	mov	b,@r0
      0001FC ED               [12]  478 	mov	a,r5
      0001FD 12r00r00         [24]  479 	lcall	__gptrput
      000200 A3               [24]  480 	inc	dptr
      000201 EE               [12]  481 	mov	a,r6
      000202 12r00r00         [24]  482 	lcall	__gptrput
      000205 A3               [24]  483 	inc	dptr
      000206 EC               [12]  484 	mov	a,r4
      000207 12r00r00         [24]  485 	lcall	__gptrput
      00020A A3               [24]  486 	inc	dptr
      00020B EF               [12]  487 	mov	a,r7
      00020C 12r00r00         [24]  488 	lcall	__gptrput
                                    489 ;	stack.c:25: s->p--;
      00020F E5*00            [12]  490 	mov	a,_bp
      000211 24 07            [12]  491 	add	a,#0x07
      000213 F8               [12]  492 	mov	r0,a
      000214 86 82            [24]  493 	mov	dpl,@r0
      000216 08               [12]  494 	inc	r0
      000217 86 83            [24]  495 	mov	dph,@r0
      000219 08               [12]  496 	inc	r0
      00021A 86 F0            [24]  497 	mov	b,@r0
      00021C 12r00r00         [24]  498 	lcall	__gptrget
      00021F FE               [12]  499 	mov	r6,a
      000220 A3               [24]  500 	inc	dptr
      000221 12r00r00         [24]  501 	lcall	__gptrget
      000224 FF               [12]  502 	mov	r7,a
      000225 1E               [12]  503 	dec	r6
      000226 BE FF 01         [24]  504 	cjne	r6,#0xff,00110$
      000229 1F               [12]  505 	dec	r7
      00022A                        506 00110$:
      00022A E5*00            [12]  507 	mov	a,_bp
      00022C 24 07            [12]  508 	add	a,#0x07
      00022E F8               [12]  509 	mov	r0,a
      00022F 86 82            [24]  510 	mov	dpl,@r0
      000231 08               [12]  511 	inc	r0
      000232 86 83            [24]  512 	mov	dph,@r0
      000234 08               [12]  513 	inc	r0
      000235 86 F0            [24]  514 	mov	b,@r0
      000237 EE               [12]  515 	mov	a,r6
      000238 12r00r00         [24]  516 	lcall	__gptrput
      00023B A3               [24]  517 	inc	dptr
      00023C EF               [12]  518 	mov	a,r7
      00023D 12r00r00         [24]  519 	lcall	__gptrput
                                    520 ;	stack.c:26: s->spin = 0;
      000240 A8*00            [24]  521 	mov	r0,_bp
      000242 08               [12]  522 	inc	r0
      000243 86 82            [24]  523 	mov	dpl,@r0
      000245 08               [12]  524 	inc	r0
      000246 86 83            [24]  525 	mov	dph,@r0
      000248 08               [12]  526 	inc	r0
      000249 86 F0            [24]  527 	mov	b,@r0
      00024B E4               [12]  528 	clr	a
      00024C 12r00r00         [24]  529 	lcall	__gptrput
                                    530 ;	stack.c:27: return 1;
      00024F 90 00 01         [24]  531 	mov	dptr,#0x0001
      000252                        532 00103$:
                                    533 ;	stack.c:28: }
      000252 85*00 81         [24]  534 	mov	sp,_bp
      000255 D0*00            [24]  535 	pop	_bp
      000257 22               [24]  536 	ret
                                    537 ;------------------------------------------------------------
                                    538 ;Allocation info for local variables in function 'stack_peek'
                                    539 ;------------------------------------------------------------
                                    540 ;val                       Allocated to stack - _bp -5
                                    541 ;s                         Allocated to registers r5 r6 r7 
                                    542 ;sloc0                     Allocated to stack - _bp +1
                                    543 ;------------------------------------------------------------
                                    544 ;	stack.c:30: int stack_peek(stack_t *s, long *val) __reentrant {
                                    545 ;	-----------------------------------------
                                    546 ;	 function stack_peek
                                    547 ;	-----------------------------------------
      000258                        548 _stack_peek:
      000258 C0*00            [24]  549 	push	_bp
      00025A 85 81*00         [24]  550 	mov	_bp,sp
      00025D 05 81            [12]  551 	inc	sp
      00025F 05 81            [12]  552 	inc	sp
      000261 05 81            [12]  553 	inc	sp
      000263 AD 82            [24]  554 	mov	r5,dpl
      000265 AE 83            [24]  555 	mov	r6,dph
      000267 AF F0            [24]  556 	mov	r7,b
                                    557 ;	stack.c:31: if (s->p < 0) return 0;
      000269 74 03            [12]  558 	mov	a,#0x03
      00026B 2D               [12]  559 	add	a,r5
      00026C FB               [12]  560 	mov	r3,a
      00026D 74 20            [12]  561 	mov	a,#0x20
      00026F 3E               [12]  562 	addc	a,r6
      000270 FA               [12]  563 	mov	r2,a
      000271 8F 04            [24]  564 	mov	ar4,r7
      000273 8B 82            [24]  565 	mov	dpl,r3
      000275 8A 83            [24]  566 	mov	dph,r2
      000277 8C F0            [24]  567 	mov	b,r4
      000279 12r00r00         [24]  568 	lcall	__gptrget
      00027C FB               [12]  569 	mov	r3,a
      00027D A3               [24]  570 	inc	dptr
      00027E 12r00r00         [24]  571 	lcall	__gptrget
      000281 FC               [12]  572 	mov	r4,a
      000282 30 E7 05         [24]  573 	jnb	acc.7,00102$
      000285 90 00 00         [24]  574 	mov	dptr,#0x0000
      000288 80 63            [24]  575 	sjmp	00103$
      00028A                        576 00102$:
                                    577 ;	stack.c:32: *val = s->data[s->p];
      00028A E5*00            [12]  578 	mov	a,_bp
      00028C 24 FB            [12]  579 	add	a,#0xfb
      00028E F8               [12]  580 	mov	r0,a
      00028F A9*00            [24]  581 	mov	r1,_bp
      000291 09               [12]  582 	inc	r1
      000292 E6               [12]  583 	mov	a,@r0
      000293 F7               [12]  584 	mov	@r1,a
      000294 08               [12]  585 	inc	r0
      000295 09               [12]  586 	inc	r1
      000296 E6               [12]  587 	mov	a,@r0
      000297 F7               [12]  588 	mov	@r1,a
      000298 08               [12]  589 	inc	r0
      000299 09               [12]  590 	inc	r1
      00029A E6               [12]  591 	mov	a,@r0
      00029B F7               [12]  592 	mov	@r1,a
      00029C 0D               [12]  593 	inc	r5
      00029D BD 00 01         [24]  594 	cjne	r5,#0x00,00110$
      0002A0 0E               [12]  595 	inc	r6
      0002A1                        596 00110$:
      0002A1 EB               [12]  597 	mov	a,r3
      0002A2 2B               [12]  598 	add	a,r3
      0002A3 FB               [12]  599 	mov	r3,a
      0002A4 EC               [12]  600 	mov	a,r4
      0002A5 33               [12]  601 	rlc	a
      0002A6 FC               [12]  602 	mov	r4,a
      0002A7 EB               [12]  603 	mov	a,r3
      0002A8 2B               [12]  604 	add	a,r3
      0002A9 FB               [12]  605 	mov	r3,a
      0002AA EC               [12]  606 	mov	a,r4
      0002AB 33               [12]  607 	rlc	a
      0002AC FC               [12]  608 	mov	r4,a
      0002AD EB               [12]  609 	mov	a,r3
      0002AE 2D               [12]  610 	add	a,r5
      0002AF FD               [12]  611 	mov	r5,a
      0002B0 EC               [12]  612 	mov	a,r4
      0002B1 3E               [12]  613 	addc	a,r6
      0002B2 FE               [12]  614 	mov	r6,a
      0002B3 8D 82            [24]  615 	mov	dpl,r5
      0002B5 8E 83            [24]  616 	mov	dph,r6
      0002B7 8F F0            [24]  617 	mov	b,r7
      0002B9 12r00r00         [24]  618 	lcall	__gptrget
      0002BC FD               [12]  619 	mov	r5,a
      0002BD A3               [24]  620 	inc	dptr
      0002BE 12r00r00         [24]  621 	lcall	__gptrget
      0002C1 FE               [12]  622 	mov	r6,a
      0002C2 A3               [24]  623 	inc	dptr
      0002C3 12r00r00         [24]  624 	lcall	__gptrget
      0002C6 FF               [12]  625 	mov	r7,a
      0002C7 A3               [24]  626 	inc	dptr
      0002C8 12r00r00         [24]  627 	lcall	__gptrget
      0002CB FC               [12]  628 	mov	r4,a
      0002CC A8*00            [24]  629 	mov	r0,_bp
      0002CE 08               [12]  630 	inc	r0
      0002CF 86 82            [24]  631 	mov	dpl,@r0
      0002D1 08               [12]  632 	inc	r0
      0002D2 86 83            [24]  633 	mov	dph,@r0
      0002D4 08               [12]  634 	inc	r0
      0002D5 86 F0            [24]  635 	mov	b,@r0
      0002D7 ED               [12]  636 	mov	a,r5
      0002D8 12r00r00         [24]  637 	lcall	__gptrput
      0002DB A3               [24]  638 	inc	dptr
      0002DC EE               [12]  639 	mov	a,r6
      0002DD 12r00r00         [24]  640 	lcall	__gptrput
      0002E0 A3               [24]  641 	inc	dptr
      0002E1 EF               [12]  642 	mov	a,r7
      0002E2 12r00r00         [24]  643 	lcall	__gptrput
      0002E5 A3               [24]  644 	inc	dptr
      0002E6 EC               [12]  645 	mov	a,r4
      0002E7 12r00r00         [24]  646 	lcall	__gptrput
                                    647 ;	stack.c:33: return 1;
      0002EA 90 00 01         [24]  648 	mov	dptr,#0x0001
      0002ED                        649 00103$:
                                    650 ;	stack.c:34: }
      0002ED 85*00 81         [24]  651 	mov	sp,_bp
      0002F0 D0*00            [24]  652 	pop	_bp
      0002F2 22               [24]  653 	ret
                                    654 ;------------------------------------------------------------
                                    655 ;Allocation info for local variables in function 'stack_peek2'
                                    656 ;------------------------------------------------------------
                                    657 ;vals                      Allocated to stack - _bp -5
                                    658 ;s                         Allocated to stack - _bp +1
                                    659 ;nvals                     Allocated to registers r5 r4 
                                    660 ;sloc0                     Allocated to stack - _bp +4
                                    661 ;sloc1                     Allocated to stack - _bp +7
                                    662 ;sloc2                     Allocated to stack - _bp +12
                                    663 ;sloc3                     Allocated to stack - _bp +10
                                    664 ;------------------------------------------------------------
                                    665 ;	stack.c:36: int stack_peek2(stack_t *s, long *vals) __reentrant {
                                    666 ;	-----------------------------------------
                                    667 ;	 function stack_peek2
                                    668 ;	-----------------------------------------
      0002F3                        669 _stack_peek2:
      0002F3 C0*00            [24]  670 	push	_bp
      0002F5 85 81*00         [24]  671 	mov	_bp,sp
      0002F8 C0 82            [24]  672 	push	dpl
      0002FA C0 83            [24]  673 	push	dph
      0002FC C0 F0            [24]  674 	push	b
      0002FE E5 81            [12]  675 	mov	a,sp
      000300 24 09            [12]  676 	add	a,#0x09
      000302 F5 81            [12]  677 	mov	sp,a
                                    678 ;	stack.c:39: nvals = 0;
                                    679 ;	stack.c:40: vals[0] = vals[1] = 0l;
      000304 E4               [12]  680 	clr	a
      000305 FD               [12]  681 	mov	r5,a
      000306 FC               [12]  682 	mov	r4,a
      000307 E5*00            [12]  683 	mov	a,_bp
      000309 24 FB            [12]  684 	add	a,#0xfb
      00030B F8               [12]  685 	mov	r0,a
      00030C E5*00            [12]  686 	mov	a,_bp
      00030E 24 0A            [12]  687 	add	a,#0x0a
      000310 F9               [12]  688 	mov	r1,a
      000311 E6               [12]  689 	mov	a,@r0
      000312 F7               [12]  690 	mov	@r1,a
      000313 08               [12]  691 	inc	r0
      000314 09               [12]  692 	inc	r1
      000315 E6               [12]  693 	mov	a,@r0
      000316 F7               [12]  694 	mov	@r1,a
      000317 08               [12]  695 	inc	r0
      000318 09               [12]  696 	inc	r1
      000319 E6               [12]  697 	mov	a,@r0
      00031A F7               [12]  698 	mov	@r1,a
      00031B E5*00            [12]  699 	mov	a,_bp
      00031D 24 0A            [12]  700 	add	a,#0x0a
      00031F F8               [12]  701 	mov	r0,a
      000320 E5*00            [12]  702 	mov	a,_bp
      000322 24 04            [12]  703 	add	a,#0x04
      000324 F9               [12]  704 	mov	r1,a
      000325 74 04            [12]  705 	mov	a,#0x04
      000327 26               [12]  706 	add	a,@r0
      000328 F7               [12]  707 	mov	@r1,a
      000329 E4               [12]  708 	clr	a
      00032A 08               [12]  709 	inc	r0
      00032B 36               [12]  710 	addc	a,@r0
      00032C 09               [12]  711 	inc	r1
      00032D F7               [12]  712 	mov	@r1,a
      00032E 08               [12]  713 	inc	r0
      00032F 09               [12]  714 	inc	r1
      000330 E6               [12]  715 	mov	a,@r0
      000331 F7               [12]  716 	mov	@r1,a
      000332 E5*00            [12]  717 	mov	a,_bp
      000334 24 04            [12]  718 	add	a,#0x04
      000336 F8               [12]  719 	mov	r0,a
      000337 86 82            [24]  720 	mov	dpl,@r0
      000339 08               [12]  721 	inc	r0
      00033A 86 83            [24]  722 	mov	dph,@r0
      00033C 08               [12]  723 	inc	r0
      00033D 86 F0            [24]  724 	mov	b,@r0
      00033F E4               [12]  725 	clr	a
      000340 12r00r00         [24]  726 	lcall	__gptrput
      000343 A3               [24]  727 	inc	dptr
      000344 12r00r00         [24]  728 	lcall	__gptrput
      000347 A3               [24]  729 	inc	dptr
      000348 12r00r00         [24]  730 	lcall	__gptrput
      00034B A3               [24]  731 	inc	dptr
      00034C 12r00r00         [24]  732 	lcall	__gptrput
      00034F E5*00            [12]  733 	mov	a,_bp
      000351 24 0A            [12]  734 	add	a,#0x0a
      000353 F8               [12]  735 	mov	r0,a
      000354 86 82            [24]  736 	mov	dpl,@r0
      000356 08               [12]  737 	inc	r0
      000357 86 83            [24]  738 	mov	dph,@r0
      000359 08               [12]  739 	inc	r0
      00035A 86 F0            [24]  740 	mov	b,@r0
      00035C E4               [12]  741 	clr	a
      00035D 12r00r00         [24]  742 	lcall	__gptrput
      000360 A3               [24]  743 	inc	dptr
      000361 12r00r00         [24]  744 	lcall	__gptrput
      000364 A3               [24]  745 	inc	dptr
      000365 12r00r00         [24]  746 	lcall	__gptrput
      000368 A3               [24]  747 	inc	dptr
      000369 12r00r00         [24]  748 	lcall	__gptrput
                                    749 ;	stack.c:42: if (s->spin) goto out; /* if called from ISR */
      00036C A8*00            [24]  750 	mov	r0,_bp
      00036E 08               [12]  751 	inc	r0
      00036F 86 82            [24]  752 	mov	dpl,@r0
      000371 08               [12]  753 	inc	r0
      000372 86 83            [24]  754 	mov	dph,@r0
      000374 08               [12]  755 	inc	r0
      000375 86 F0            [24]  756 	mov	b,@r0
      000377 12r00r00         [24]  757 	lcall	__gptrget
      00037A 60 03            [24]  758 	jz	00122$
      00037C 02r04rA4         [24]  759 	ljmp	00107$
      00037F                        760 00122$:
                                    761 ;	stack.c:44: if (s->p < 0) goto out;
      00037F A8*00            [24]  762 	mov	r0,_bp
      000381 08               [12]  763 	inc	r0
      000382 E5*00            [12]  764 	mov	a,_bp
      000384 24 07            [12]  765 	add	a,#0x07
      000386 F9               [12]  766 	mov	r1,a
      000387 74 03            [12]  767 	mov	a,#0x03
      000389 26               [12]  768 	add	a,@r0
      00038A F7               [12]  769 	mov	@r1,a
      00038B 74 20            [12]  770 	mov	a,#0x20
      00038D 08               [12]  771 	inc	r0
      00038E 36               [12]  772 	addc	a,@r0
      00038F 09               [12]  773 	inc	r1
      000390 F7               [12]  774 	mov	@r1,a
      000391 08               [12]  775 	inc	r0
      000392 09               [12]  776 	inc	r1
      000393 E6               [12]  777 	mov	a,@r0
      000394 F7               [12]  778 	mov	@r1,a
      000395 E5*00            [12]  779 	mov	a,_bp
      000397 24 07            [12]  780 	add	a,#0x07
      000399 F8               [12]  781 	mov	r0,a
      00039A 86 82            [24]  782 	mov	dpl,@r0
      00039C 08               [12]  783 	inc	r0
      00039D 86 83            [24]  784 	mov	dph,@r0
      00039F 08               [12]  785 	inc	r0
      0003A0 86 F0            [24]  786 	mov	b,@r0
      0003A2 12r00r00         [24]  787 	lcall	__gptrget
      0003A5 FE               [12]  788 	mov	r6,a
      0003A6 A3               [24]  789 	inc	dptr
      0003A7 12r00r00         [24]  790 	lcall	__gptrget
      0003AA FF               [12]  791 	mov	r7,a
      0003AB 30 E7 03         [24]  792 	jnb	acc.7,00123$
      0003AE 02r04rA4         [24]  793 	ljmp	00107$
      0003B1                        794 00123$:
                                    795 ;	stack.c:45: vals[1] = s->data[s->p];
      0003B1 A8*00            [24]  796 	mov	r0,_bp
      0003B3 08               [12]  797 	inc	r0
      0003B4 74 01            [12]  798 	mov	a,#0x01
      0003B6 26               [12]  799 	add	a,@r0
      0003B7 FA               [12]  800 	mov	r2,a
      0003B8 E4               [12]  801 	clr	a
      0003B9 08               [12]  802 	inc	r0
      0003BA 36               [12]  803 	addc	a,@r0
      0003BB FB               [12]  804 	mov	r3,a
      0003BC 08               [12]  805 	inc	r0
      0003BD 86 04            [24]  806 	mov	ar4,@r0
      0003BF EE               [12]  807 	mov	a,r6
      0003C0 2E               [12]  808 	add	a,r6
      0003C1 FE               [12]  809 	mov	r6,a
      0003C2 EF               [12]  810 	mov	a,r7
      0003C3 33               [12]  811 	rlc	a
      0003C4 FF               [12]  812 	mov	r7,a
      0003C5 EE               [12]  813 	mov	a,r6
      0003C6 2E               [12]  814 	add	a,r6
      0003C7 FE               [12]  815 	mov	r6,a
      0003C8 EF               [12]  816 	mov	a,r7
      0003C9 33               [12]  817 	rlc	a
      0003CA FF               [12]  818 	mov	r7,a
      0003CB EE               [12]  819 	mov	a,r6
      0003CC 2A               [12]  820 	add	a,r2
      0003CD FA               [12]  821 	mov	r2,a
      0003CE EF               [12]  822 	mov	a,r7
      0003CF 3B               [12]  823 	addc	a,r3
      0003D0 FB               [12]  824 	mov	r3,a
      0003D1 8A 82            [24]  825 	mov	dpl,r2
      0003D3 8B 83            [24]  826 	mov	dph,r3
      0003D5 8C F0            [24]  827 	mov	b,r4
      0003D7 12r00r00         [24]  828 	lcall	__gptrget
      0003DA FA               [12]  829 	mov	r2,a
      0003DB A3               [24]  830 	inc	dptr
      0003DC 12r00r00         [24]  831 	lcall	__gptrget
      0003DF FB               [12]  832 	mov	r3,a
      0003E0 A3               [24]  833 	inc	dptr
      0003E1 12r00r00         [24]  834 	lcall	__gptrget
      0003E4 FC               [12]  835 	mov	r4,a
      0003E5 A3               [24]  836 	inc	dptr
      0003E6 12r00r00         [24]  837 	lcall	__gptrget
      0003E9 FF               [12]  838 	mov	r7,a
      0003EA E5*00            [12]  839 	mov	a,_bp
      0003EC 24 04            [12]  840 	add	a,#0x04
      0003EE F8               [12]  841 	mov	r0,a
      0003EF 86 82            [24]  842 	mov	dpl,@r0
      0003F1 08               [12]  843 	inc	r0
      0003F2 86 83            [24]  844 	mov	dph,@r0
      0003F4 08               [12]  845 	inc	r0
      0003F5 86 F0            [24]  846 	mov	b,@r0
      0003F7 EA               [12]  847 	mov	a,r2
      0003F8 12r00r00         [24]  848 	lcall	__gptrput
      0003FB A3               [24]  849 	inc	dptr
      0003FC EB               [12]  850 	mov	a,r3
      0003FD 12r00r00         [24]  851 	lcall	__gptrput
      000400 A3               [24]  852 	inc	dptr
      000401 EC               [12]  853 	mov	a,r4
      000402 12r00r00         [24]  854 	lcall	__gptrput
      000405 A3               [24]  855 	inc	dptr
      000406 EF               [12]  856 	mov	a,r7
      000407 12r00r00         [24]  857 	lcall	__gptrput
                                    858 ;	stack.c:46: nvals++;
      00040A 7D 01            [12]  859 	mov	r5,#0x01
      00040C 7C 00            [12]  860 	mov	r4,#0x00
                                    861 ;	stack.c:48: if ((s->p - 1) < 0) goto out;
      00040E E5*00            [12]  862 	mov	a,_bp
      000410 24 07            [12]  863 	add	a,#0x07
      000412 F8               [12]  864 	mov	r0,a
      000413 86 82            [24]  865 	mov	dpl,@r0
      000415 08               [12]  866 	inc	r0
      000416 86 83            [24]  867 	mov	dph,@r0
      000418 08               [12]  868 	inc	r0
      000419 86 F0            [24]  869 	mov	b,@r0
      00041B 12r00r00         [24]  870 	lcall	__gptrget
      00041E FB               [12]  871 	mov	r3,a
      00041F A3               [24]  872 	inc	dptr
      000420 12r00r00         [24]  873 	lcall	__gptrget
      000423 FA               [12]  874 	mov	r2,a
      000424 EB               [12]  875 	mov	a,r3
      000425 24 FF            [12]  876 	add	a,#0xff
      000427 FE               [12]  877 	mov	r6,a
      000428 EA               [12]  878 	mov	a,r2
      000429 34 FF            [12]  879 	addc	a,#0xff
      00042B FF               [12]  880 	mov	r7,a
      00042C 20 E7 75         [24]  881 	jb	acc.7,00107$
                                    882 ;	stack.c:49: vals[0] = s->data[s->p - 1];
      00042F A8*00            [24]  883 	mov	r0,_bp
      000431 08               [12]  884 	inc	r0
      000432 E5*00            [12]  885 	mov	a,_bp
      000434 24 07            [12]  886 	add	a,#0x07
      000436 F9               [12]  887 	mov	r1,a
      000437 74 01            [12]  888 	mov	a,#0x01
      000439 26               [12]  889 	add	a,@r0
      00043A F7               [12]  890 	mov	@r1,a
      00043B E4               [12]  891 	clr	a
      00043C 08               [12]  892 	inc	r0
      00043D 36               [12]  893 	addc	a,@r0
      00043E 09               [12]  894 	inc	r1
      00043F F7               [12]  895 	mov	@r1,a
      000440 08               [12]  896 	inc	r0
      000441 09               [12]  897 	inc	r1
      000442 E6               [12]  898 	mov	a,@r0
      000443 F7               [12]  899 	mov	@r1,a
      000444 EB               [12]  900 	mov	a,r3
      000445 24 FF            [12]  901 	add	a,#0xff
      000447 FE               [12]  902 	mov	r6,a
      000448 EA               [12]  903 	mov	a,r2
      000449 34 FF            [12]  904 	addc	a,#0xff
      00044B FF               [12]  905 	mov	r7,a
      00044C EE               [12]  906 	mov	a,r6
      00044D 2E               [12]  907 	add	a,r6
      00044E FE               [12]  908 	mov	r6,a
      00044F EF               [12]  909 	mov	a,r7
      000450 33               [12]  910 	rlc	a
      000451 FF               [12]  911 	mov	r7,a
      000452 EE               [12]  912 	mov	a,r6
      000453 2E               [12]  913 	add	a,r6
      000454 FE               [12]  914 	mov	r6,a
      000455 EF               [12]  915 	mov	a,r7
      000456 33               [12]  916 	rlc	a
      000457 FF               [12]  917 	mov	r7,a
      000458 E5*00            [12]  918 	mov	a,_bp
      00045A 24 07            [12]  919 	add	a,#0x07
      00045C F8               [12]  920 	mov	r0,a
      00045D EE               [12]  921 	mov	a,r6
      00045E 26               [12]  922 	add	a,@r0
      00045F FE               [12]  923 	mov	r6,a
      000460 EF               [12]  924 	mov	a,r7
      000461 08               [12]  925 	inc	r0
      000462 36               [12]  926 	addc	a,@r0
      000463 FD               [12]  927 	mov	r5,a
      000464 08               [12]  928 	inc	r0
      000465 86 07            [24]  929 	mov	ar7,@r0
      000467 8E 82            [24]  930 	mov	dpl,r6
      000469 8D 83            [24]  931 	mov	dph,r5
      00046B 8F F0            [24]  932 	mov	b,r7
      00046D 12r00r00         [24]  933 	lcall	__gptrget
      000470 FE               [12]  934 	mov	r6,a
      000471 A3               [24]  935 	inc	dptr
      000472 12r00r00         [24]  936 	lcall	__gptrget
      000475 FD               [12]  937 	mov	r5,a
      000476 A3               [24]  938 	inc	dptr
      000477 12r00r00         [24]  939 	lcall	__gptrget
      00047A FC               [12]  940 	mov	r4,a
      00047B A3               [24]  941 	inc	dptr
      00047C 12r00r00         [24]  942 	lcall	__gptrget
      00047F FF               [12]  943 	mov	r7,a
      000480 E5*00            [12]  944 	mov	a,_bp
      000482 24 0A            [12]  945 	add	a,#0x0a
      000484 F8               [12]  946 	mov	r0,a
      000485 86 82            [24]  947 	mov	dpl,@r0
      000487 08               [12]  948 	inc	r0
      000488 86 83            [24]  949 	mov	dph,@r0
      00048A 08               [12]  950 	inc	r0
      00048B 86 F0            [24]  951 	mov	b,@r0
      00048D EE               [12]  952 	mov	a,r6
      00048E 12r00r00         [24]  953 	lcall	__gptrput
      000491 A3               [24]  954 	inc	dptr
      000492 ED               [12]  955 	mov	a,r5
      000493 12r00r00         [24]  956 	lcall	__gptrput
      000496 A3               [24]  957 	inc	dptr
      000497 EC               [12]  958 	mov	a,r4
      000498 12r00r00         [24]  959 	lcall	__gptrput
      00049B A3               [24]  960 	inc	dptr
      00049C EF               [12]  961 	mov	a,r7
      00049D 12r00r00         [24]  962 	lcall	__gptrput
                                    963 ;	stack.c:50: nvals++;
      0004A0 7D 02            [12]  964 	mov	r5,#0x02
      0004A2 7C 00            [12]  965 	mov	r4,#0x00
                                    966 ;	stack.c:52: out:
      0004A4                        967 00107$:
                                    968 ;	stack.c:53: return nvals;
      0004A4 8D 82            [24]  969 	mov	dpl,r5
      0004A6 8C 83            [24]  970 	mov	dph,r4
                                    971 ;	stack.c:54: }
      0004A8 85*00 81         [24]  972 	mov	sp,_bp
      0004AB D0*00            [24]  973 	pop	_bp
      0004AD 22               [24]  974 	ret
                                    975 ;------------------------------------------------------------
                                    976 ;Allocation info for local variables in function 'stack_iter_peek'
                                    977 ;------------------------------------------------------------
                                    978 ;iter                      Allocated to stack - _bp -4
                                    979 ;_ctx                      Allocated to stack - _bp -7
                                    980 ;s                         Allocated to stack - _bp +1
                                    981 ;j                         Allocated to registers 
                                    982 ;r                         Allocated to registers r2 r7 
                                    983 ;sloc0                     Allocated to stack - _bp +4
                                    984 ;------------------------------------------------------------
                                    985 ;	stack.c:56: int stack_iter_peek(stack_t *s, stack_iter_t iter, void *_ctx) __reentrant {
                                    986 ;	-----------------------------------------
                                    987 ;	 function stack_iter_peek
                                    988 ;	-----------------------------------------
      0004AE                        989 _stack_iter_peek:
      0004AE C0*00            [24]  990 	push	_bp
      0004B0 85 81*00         [24]  991 	mov	_bp,sp
      0004B3 C0 82            [24]  992 	push	dpl
      0004B5 C0 83            [24]  993 	push	dph
      0004B7 C0 F0            [24]  994 	push	b
      0004B9 05 81            [12]  995 	inc	sp
      0004BB 05 81            [12]  996 	inc	sp
      0004BD 05 81            [12]  997 	inc	sp
                                    998 ;	stack.c:59: if (s->p < 0) return 0;
      0004BF A8*00            [24]  999 	mov	r0,_bp
      0004C1 08               [12] 1000 	inc	r0
      0004C2 74 03            [12] 1001 	mov	a,#0x03
      0004C4 26               [12] 1002 	add	a,@r0
      0004C5 FB               [12] 1003 	mov	r3,a
      0004C6 74 20            [12] 1004 	mov	a,#0x20
      0004C8 08               [12] 1005 	inc	r0
      0004C9 36               [12] 1006 	addc	a,@r0
      0004CA FA               [12] 1007 	mov	r2,a
      0004CB 08               [12] 1008 	inc	r0
      0004CC 86 04            [24] 1009 	mov	ar4,@r0
      0004CE 8B 82            [24] 1010 	mov	dpl,r3
      0004D0 8A 83            [24] 1011 	mov	dph,r2
      0004D2 8C F0            [24] 1012 	mov	b,r4
      0004D4 12r00r00         [24] 1013 	lcall	__gptrget
      0004D7 FB               [12] 1014 	mov	r3,a
      0004D8 A3               [24] 1015 	inc	dptr
      0004D9 12r00r00         [24] 1016 	lcall	__gptrget
      0004DC FC               [12] 1017 	mov	r4,a
      0004DD 30 E7 06         [24] 1018 	jnb	acc.7,00102$
      0004E0 90 00 00         [24] 1019 	mov	dptr,#0x0000
      0004E3 02r05r99         [24] 1020 	ljmp	00109$
      0004E6                       1021 00102$:
                                   1022 ;	stack.c:61: for (j = s->p, r = 0; j >= 0; j--) {
      0004E6 7A 00            [12] 1023 	mov	r2,#0x00
      0004E8 7F 00            [12] 1024 	mov	r7,#0x00
      0004EA A8*00            [24] 1025 	mov	r0,_bp
      0004EC 08               [12] 1026 	inc	r0
      0004ED E5*00            [12] 1027 	mov	a,_bp
      0004EF 24 04            [12] 1028 	add	a,#0x04
      0004F1 F9               [12] 1029 	mov	r1,a
      0004F2 74 01            [12] 1030 	mov	a,#0x01
      0004F4 26               [12] 1031 	add	a,@r0
      0004F5 F7               [12] 1032 	mov	@r1,a
      0004F6 E4               [12] 1033 	clr	a
      0004F7 08               [12] 1034 	inc	r0
      0004F8 36               [12] 1035 	addc	a,@r0
      0004F9 09               [12] 1036 	inc	r1
      0004FA F7               [12] 1037 	mov	@r1,a
      0004FB 08               [12] 1038 	inc	r0
      0004FC 09               [12] 1039 	inc	r1
      0004FD E6               [12] 1040 	mov	a,@r0
      0004FE F7               [12] 1041 	mov	@r1,a
      0004FF                       1042 00107$:
      0004FF EC               [12] 1043 	mov	a,r4
      000500 30 E7 03         [24] 1044 	jnb	acc.7,00129$
      000503 02r05r95         [24] 1045 	ljmp	00105$
      000506                       1046 00129$:
                                   1047 ;	stack.c:62: r = iter(_ctx, s->data[j]);
      000506 EB               [12] 1048 	mov	a,r3
      000507 2B               [12] 1049 	add	a,r3
      000508 FD               [12] 1050 	mov	r5,a
      000509 EC               [12] 1051 	mov	a,r4
      00050A 33               [12] 1052 	rlc	a
      00050B FE               [12] 1053 	mov	r6,a
      00050C ED               [12] 1054 	mov	a,r5
      00050D 2D               [12] 1055 	add	a,r5
      00050E FD               [12] 1056 	mov	r5,a
      00050F EE               [12] 1057 	mov	a,r6
      000510 33               [12] 1058 	rlc	a
      000511 FE               [12] 1059 	mov	r6,a
      000512 C0 03            [24] 1060 	push	ar3
      000514 C0 04            [24] 1061 	push	ar4
      000516 E5*00            [12] 1062 	mov	a,_bp
      000518 24 04            [12] 1063 	add	a,#0x04
      00051A F8               [12] 1064 	mov	r0,a
      00051B ED               [12] 1065 	mov	a,r5
      00051C 26               [12] 1066 	add	a,@r0
      00051D FD               [12] 1067 	mov	r5,a
      00051E EE               [12] 1068 	mov	a,r6
      00051F 08               [12] 1069 	inc	r0
      000520 36               [12] 1070 	addc	a,@r0
      000521 FC               [12] 1071 	mov	r4,a
      000522 08               [12] 1072 	inc	r0
      000523 86 06            [24] 1073 	mov	ar6,@r0
      000525 8D 82            [24] 1074 	mov	dpl,r5
      000527 8C 83            [24] 1075 	mov	dph,r4
      000529 8E F0            [24] 1076 	mov	b,r6
      00052B 12r00r00         [24] 1077 	lcall	__gptrget
      00052E FD               [12] 1078 	mov	r5,a
      00052F A3               [24] 1079 	inc	dptr
      000530 12r00r00         [24] 1080 	lcall	__gptrget
      000533 FC               [12] 1081 	mov	r4,a
      000534 A3               [24] 1082 	inc	dptr
      000535 12r00r00         [24] 1083 	lcall	__gptrget
      000538 FE               [12] 1084 	mov	r6,a
      000539 A3               [24] 1085 	inc	dptr
      00053A 12r00r00         [24] 1086 	lcall	__gptrget
      00053D FB               [12] 1087 	mov	r3,a
      00053E C0 04            [24] 1088 	push	ar4
      000540 C0 03            [24] 1089 	push	ar3
      000542 C0 05            [24] 1090 	push	ar5
      000544 C0 04            [24] 1091 	push	ar4
      000546 C0 06            [24] 1092 	push	ar6
      000548 C0 03            [24] 1093 	push	ar3
      00054A 12r05r4F         [24] 1094 	lcall	00130$
      00054D 80 1A            [24] 1095 	sjmp	00131$
      00054F                       1096 00130$:
      00054F E5*00            [12] 1097 	mov	a,_bp
      000551 24 FC            [12] 1098 	add	a,#0xfc
      000553 F8               [12] 1099 	mov	r0,a
      000554 E6               [12] 1100 	mov	a,@r0
      000555 C0 E0            [24] 1101 	push	acc
      000557 08               [12] 1102 	inc	r0
      000558 E6               [12] 1103 	mov	a,@r0
      000559 C0 E0            [24] 1104 	push	acc
      00055B E5*00            [12] 1105 	mov	a,_bp
      00055D 24 F9            [12] 1106 	add	a,#0xf9
      00055F F8               [12] 1107 	mov	r0,a
      000560 86 82            [24] 1108 	mov	dpl,@r0
      000562 08               [12] 1109 	inc	r0
      000563 86 83            [24] 1110 	mov	dph,@r0
      000565 08               [12] 1111 	inc	r0
      000566 86 F0            [24] 1112 	mov	b,@r0
      000568 22               [24] 1113 	ret
      000569                       1114 00131$:
      000569 AD 82            [24] 1115 	mov	r5,dpl
      00056B AE 83            [24] 1116 	mov	r6,dph
      00056D E5 81            [12] 1117 	mov	a,sp
      00056F 24 FC            [12] 1118 	add	a,#0xfc
      000571 F5 81            [12] 1119 	mov	sp,a
      000573 D0 03            [24] 1120 	pop	ar3
      000575 D0 04            [24] 1121 	pop	ar4
      000577 8D 02            [24] 1122 	mov	ar2,r5
      000579 8E 07            [24] 1123 	mov	ar7,r6
                                   1124 ;	stack.c:63: if (r <= 0) break;
      00057B C3               [12] 1125 	clr	c
      00057C E4               [12] 1126 	clr	a
      00057D 9A               [12] 1127 	subb	a,r2
      00057E 74 80            [12] 1128 	mov	a,#(0x00 ^ 0x80)
      000580 8F F0            [24] 1129 	mov	b,r7
      000582 63 F0 80         [24] 1130 	xrl	b,#0x80
      000585 95 F0            [12] 1131 	subb	a,b
      000587 D0 04            [24] 1132 	pop	ar4
      000589 D0 03            [24] 1133 	pop	ar3
      00058B 50 08            [24] 1134 	jnc	00105$
                                   1135 ;	stack.c:61: for (j = s->p, r = 0; j >= 0; j--) {
      00058D 1B               [12] 1136 	dec	r3
      00058E BB FF 01         [24] 1137 	cjne	r3,#0xff,00133$
      000591 1C               [12] 1138 	dec	r4
      000592                       1139 00133$:
      000592 02r04rFF         [24] 1140 	ljmp	00107$
      000595                       1141 00105$:
                                   1142 ;	stack.c:66: return r;
      000595 8A 82            [24] 1143 	mov	dpl,r2
      000597 8F 83            [24] 1144 	mov	dph,r7
      000599                       1145 00109$:
                                   1146 ;	stack.c:67: }
      000599 85*00 81         [24] 1147 	mov	sp,_bp
      00059C D0*00            [24] 1148 	pop	_bp
      00059E 22               [24] 1149 	ret
                                   1150 	.area CSEG    (CODE)
                                   1151 	.area CONST   (CODE)
                                   1152 	.area XINIT   (CODE)
                                   1153 	.area CABS    (ABS,CODE)
