                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stack
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _stack_init
                                     12 	.globl _stack_push
                                     13 	.globl _stack_pop
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_peek2
                                     16 	.globl _stack_iter_peek
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; internal ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DSEG    (DATA)
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable items in internal ram 
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XSEG    (XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XABS    (ABS,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; external initialized ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XISEG   (XDATA)
                                     68 	.area HOME    (CODE)
                                     69 	.area GSINIT0 (CODE)
                                     70 	.area GSINIT1 (CODE)
                                     71 	.area GSINIT2 (CODE)
                                     72 	.area GSINIT3 (CODE)
                                     73 	.area GSINIT4 (CODE)
                                     74 	.area GSINIT5 (CODE)
                                     75 	.area GSINIT  (CODE)
                                     76 	.area GSFINAL (CODE)
                                     77 	.area CSEG    (CODE)
                                     78 ;--------------------------------------------------------
                                     79 ; global & static initialisations
                                     80 ;--------------------------------------------------------
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area HOME    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; code
                                     92 ;--------------------------------------------------------
                                     93 	.area CSEG    (CODE)
                                     94 ;------------------------------------------------------------
                                     95 ;Allocation info for local variables in function 'stack_init'
                                     96 ;------------------------------------------------------------
                                     97 ;s                         Allocated to registers r5 r6 r7 
                                     98 ;------------------------------------------------------------
                                     99 ;	stack.c:4: void stack_init(stack_t *s) __reentrant {
                                    100 ;	-----------------------------------------
                                    101 ;	 function stack_init
                                    102 ;	-----------------------------------------
      000000                        103 _stack_init:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
                                    112 ;	stack.c:5: s->spin = 0;
      000000 AD 82            [24]  113 	mov	r5,dpl
      000002 AE 83            [24]  114 	mov	r6,dph
      000004 AF F0            [24]  115 	mov	r7,b
      000006 E4               [12]  116 	clr	a
      000007 12r00r00         [24]  117 	lcall	__gptrput
                                    118 ;	stack.c:6: s->N = SIZE;
      00000A 04               [12]  119 	inc	a
      00000B 2D               [12]  120 	add	a,r5
      00000C FA               [12]  121 	mov	r2,a
      00000D 74 20            [12]  122 	mov	a,#0x20
      00000F 3E               [12]  123 	addc	a,r6
      000010 FB               [12]  124 	mov	r3,a
      000011 8F 04            [24]  125 	mov	ar4,r7
      000013 8A 82            [24]  126 	mov	dpl,r2
      000015 8B 83            [24]  127 	mov	dph,r3
      000017 8C F0            [24]  128 	mov	b,r4
      000019 E4               [12]  129 	clr	a
      00001A 12r00r00         [24]  130 	lcall	__gptrput
      00001D A3               [24]  131 	inc	dptr
      00001E 74 08            [12]  132 	mov	a,#0x08
      000020 12r00r00         [24]  133 	lcall	__gptrput
                                    134 ;	stack.c:7: s->p = -1;
      000023 74 03            [12]  135 	mov	a,#0x03
      000025 2D               [12]  136 	add	a,r5
      000026 FD               [12]  137 	mov	r5,a
      000027 74 20            [12]  138 	mov	a,#0x20
      000029 3E               [12]  139 	addc	a,r6
      00002A FE               [12]  140 	mov	r6,a
      00002B 8D 82            [24]  141 	mov	dpl,r5
      00002D 8E 83            [24]  142 	mov	dph,r6
      00002F 8F F0            [24]  143 	mov	b,r7
      000031 74 FF            [12]  144 	mov	a,#0xff
      000033 12r00r00         [24]  145 	lcall	__gptrput
      000036 A3               [24]  146 	inc	dptr
                                    147 ;	stack.c:9: return;
                                    148 ;	stack.c:10: }
      000037 02r00r00         [24]  149 	ljmp	__gptrput
                                    150 ;------------------------------------------------------------
                                    151 ;Allocation info for local variables in function 'stack_push'
                                    152 ;------------------------------------------------------------
                                    153 ;val                       Allocated to stack - _bp -6
                                    154 ;s                         Allocated to stack - _bp +1
                                    155 ;sloc0                     Allocated to stack - _bp +4
                                    156 ;------------------------------------------------------------
                                    157 ;	stack.c:12: int stack_push(stack_t *s, long val) __reentrant {
                                    158 ;	-----------------------------------------
                                    159 ;	 function stack_push
                                    160 ;	-----------------------------------------
      00003A                        161 _stack_push:
      00003A C0*00            [24]  162 	push	_bp
      00003C 85 81*00         [24]  163 	mov	_bp,sp
      00003F C0 82            [24]  164 	push	dpl
      000041 C0 83            [24]  165 	push	dph
      000043 C0 F0            [24]  166 	push	b
      000045 05 81            [12]  167 	inc	sp
      000047 05 81            [12]  168 	inc	sp
                                    169 ;	stack.c:13: if (s->p == (s->N - 1)) return 0;
      000049 A8*00            [24]  170 	mov	r0,_bp
      00004B 08               [12]  171 	inc	r0
      00004C 74 03            [12]  172 	mov	a,#0x03
      00004E 26               [12]  173 	add	a,@r0
      00004F FA               [12]  174 	mov	r2,a
      000050 74 20            [12]  175 	mov	a,#0x20
      000052 08               [12]  176 	inc	r0
      000053 36               [12]  177 	addc	a,@r0
      000054 FB               [12]  178 	mov	r3,a
      000055 08               [12]  179 	inc	r0
      000056 86 04            [24]  180 	mov	ar4,@r0
      000058 8A 82            [24]  181 	mov	dpl,r2
      00005A 8B 83            [24]  182 	mov	dph,r3
      00005C 8C F0            [24]  183 	mov	b,r4
      00005E E5*00            [12]  184 	mov	a,_bp
      000060 24 04            [12]  185 	add	a,#0x04
      000062 F8               [12]  186 	mov	r0,a
      000063 12r00r00         [24]  187 	lcall	__gptrget
      000066 F6               [12]  188 	mov	@r0,a
      000067 A3               [24]  189 	inc	dptr
      000068 12r00r00         [24]  190 	lcall	__gptrget
      00006B 08               [12]  191 	inc	r0
      00006C F6               [12]  192 	mov	@r0,a
      00006D A8*00            [24]  193 	mov	r0,_bp
      00006F 08               [12]  194 	inc	r0
      000070 74 01            [12]  195 	mov	a,#0x01
      000072 26               [12]  196 	add	a,@r0
      000073 FD               [12]  197 	mov	r5,a
      000074 74 20            [12]  198 	mov	a,#0x20
      000076 08               [12]  199 	inc	r0
      000077 36               [12]  200 	addc	a,@r0
      000078 FE               [12]  201 	mov	r6,a
      000079 08               [12]  202 	inc	r0
      00007A 86 07            [24]  203 	mov	ar7,@r0
      00007C 8D 82            [24]  204 	mov	dpl,r5
      00007E 8E 83            [24]  205 	mov	dph,r6
      000080 8F F0            [24]  206 	mov	b,r7
      000082 12r00r00         [24]  207 	lcall	__gptrget
      000085 FD               [12]  208 	mov	r5,a
      000086 A3               [24]  209 	inc	dptr
      000087 12r00r00         [24]  210 	lcall	__gptrget
      00008A FE               [12]  211 	mov	r6,a
      00008B 1D               [12]  212 	dec	r5
      00008C BD FF 01         [24]  213 	cjne	r5,#0xff,00109$
      00008F 1E               [12]  214 	dec	r6
      000090                        215 00109$:
      000090 E5*00            [12]  216 	mov	a,_bp
      000092 24 04            [12]  217 	add	a,#0x04
      000094 F8               [12]  218 	mov	r0,a
      000095 E6               [12]  219 	mov	a,@r0
      000096 B5 05 07         [24]  220 	cjne	a,ar5,00110$
      000099 08               [12]  221 	inc	r0
      00009A E6               [12]  222 	mov	a,@r0
      00009B B5 06 02         [24]  223 	cjne	a,ar6,00110$
      00009E 80 02            [24]  224 	sjmp	00111$
      0000A0                        225 00110$:
      0000A0 80 06            [24]  226 	sjmp	00102$
      0000A2                        227 00111$:
      0000A2 90 00 00         [24]  228 	mov	dptr,#0x0000
      0000A5 02r01r2E         [24]  229 	ljmp	00103$
      0000A8                        230 00102$:
                                    231 ;	stack.c:14: s->spin = 1;
      0000A8 A8*00            [24]  232 	mov	r0,_bp
      0000AA 08               [12]  233 	inc	r0
      0000AB 86 82            [24]  234 	mov	dpl,@r0
      0000AD 08               [12]  235 	inc	r0
      0000AE 86 83            [24]  236 	mov	dph,@r0
      0000B0 08               [12]  237 	inc	r0
      0000B1 86 F0            [24]  238 	mov	b,@r0
      0000B3 74 01            [12]  239 	mov	a,#0x01
      0000B5 12r00r00         [24]  240 	lcall	__gptrput
                                    241 ;	stack.c:15: s->p++;
      0000B8 8A 82            [24]  242 	mov	dpl,r2
      0000BA 8B 83            [24]  243 	mov	dph,r3
      0000BC 8C F0            [24]  244 	mov	b,r4
      0000BE 12r00r00         [24]  245 	lcall	__gptrget
      0000C1 FE               [12]  246 	mov	r6,a
      0000C2 A3               [24]  247 	inc	dptr
      0000C3 12r00r00         [24]  248 	lcall	__gptrget
      0000C6 FF               [12]  249 	mov	r7,a
      0000C7 0E               [12]  250 	inc	r6
      0000C8 BE 00 01         [24]  251 	cjne	r6,#0x00,00112$
      0000CB 0F               [12]  252 	inc	r7
      0000CC                        253 00112$:
      0000CC 8A 82            [24]  254 	mov	dpl,r2
      0000CE 8B 83            [24]  255 	mov	dph,r3
      0000D0 8C F0            [24]  256 	mov	b,r4
      0000D2 EE               [12]  257 	mov	a,r6
      0000D3 12r00r00         [24]  258 	lcall	__gptrput
      0000D6 A3               [24]  259 	inc	dptr
      0000D7 EF               [12]  260 	mov	a,r7
      0000D8 12r00r00         [24]  261 	lcall	__gptrput
                                    262 ;	stack.c:16: s->data[s->p] = val;
      0000DB A8*00            [24]  263 	mov	r0,_bp
      0000DD 08               [12]  264 	inc	r0
      0000DE 74 01            [12]  265 	mov	a,#0x01
      0000E0 26               [12]  266 	add	a,@r0
      0000E1 FB               [12]  267 	mov	r3,a
      0000E2 E4               [12]  268 	clr	a
      0000E3 08               [12]  269 	inc	r0
      0000E4 36               [12]  270 	addc	a,@r0
      0000E5 FC               [12]  271 	mov	r4,a
      0000E6 08               [12]  272 	inc	r0
      0000E7 86 05            [24]  273 	mov	ar5,@r0
      0000E9 EE               [12]  274 	mov	a,r6
      0000EA 2E               [12]  275 	add	a,r6
      0000EB FE               [12]  276 	mov	r6,a
      0000EC EF               [12]  277 	mov	a,r7
      0000ED 33               [12]  278 	rlc	a
      0000EE FF               [12]  279 	mov	r7,a
      0000EF EE               [12]  280 	mov	a,r6
      0000F0 2E               [12]  281 	add	a,r6
      0000F1 FE               [12]  282 	mov	r6,a
      0000F2 EF               [12]  283 	mov	a,r7
      0000F3 33               [12]  284 	rlc	a
      0000F4 FF               [12]  285 	mov	r7,a
      0000F5 EE               [12]  286 	mov	a,r6
      0000F6 2B               [12]  287 	add	a,r3
      0000F7 FB               [12]  288 	mov	r3,a
      0000F8 EF               [12]  289 	mov	a,r7
      0000F9 3C               [12]  290 	addc	a,r4
      0000FA FC               [12]  291 	mov	r4,a
      0000FB 8B 82            [24]  292 	mov	dpl,r3
      0000FD 8C 83            [24]  293 	mov	dph,r4
      0000FF 8D F0            [24]  294 	mov	b,r5
      000101 E5*00            [12]  295 	mov	a,_bp
      000103 24 FA            [12]  296 	add	a,#0xfa
      000105 F8               [12]  297 	mov	r0,a
      000106 E6               [12]  298 	mov	a,@r0
      000107 12r00r00         [24]  299 	lcall	__gptrput
      00010A A3               [24]  300 	inc	dptr
      00010B 08               [12]  301 	inc	r0
      00010C E6               [12]  302 	mov	a,@r0
      00010D 12r00r00         [24]  303 	lcall	__gptrput
      000110 A3               [24]  304 	inc	dptr
      000111 08               [12]  305 	inc	r0
      000112 E6               [12]  306 	mov	a,@r0
      000113 12r00r00         [24]  307 	lcall	__gptrput
      000116 A3               [24]  308 	inc	dptr
      000117 08               [12]  309 	inc	r0
      000118 E6               [12]  310 	mov	a,@r0
      000119 12r00r00         [24]  311 	lcall	__gptrput
                                    312 ;	stack.c:17: s->spin = 0;
      00011C A8*00            [24]  313 	mov	r0,_bp
      00011E 08               [12]  314 	inc	r0
      00011F 86 82            [24]  315 	mov	dpl,@r0
      000121 08               [12]  316 	inc	r0
      000122 86 83            [24]  317 	mov	dph,@r0
      000124 08               [12]  318 	inc	r0
      000125 86 F0            [24]  319 	mov	b,@r0
      000127 E4               [12]  320 	clr	a
      000128 12r00r00         [24]  321 	lcall	__gptrput
                                    322 ;	stack.c:18: return 1;
      00012B 90 00 01         [24]  323 	mov	dptr,#0x0001
      00012E                        324 00103$:
                                    325 ;	stack.c:19: }
      00012E 85*00 81         [24]  326 	mov	sp,_bp
      000131 D0*00            [24]  327 	pop	_bp
      000133 22               [24]  328 	ret
                                    329 ;------------------------------------------------------------
                                    330 ;Allocation info for local variables in function 'stack_pop'
                                    331 ;------------------------------------------------------------
                                    332 ;val                       Allocated to stack - _bp -5
                                    333 ;s                         Allocated to stack - _bp +1
                                    334 ;sloc0                     Allocated to stack - _bp +4
                                    335 ;sloc1                     Allocated to stack - _bp +7
                                    336 ;sloc2                     Allocated to stack - _bp +7
                                    337 ;------------------------------------------------------------
                                    338 ;	stack.c:21: int stack_pop(stack_t *s, long *val) __reentrant {
                                    339 ;	-----------------------------------------
                                    340 ;	 function stack_pop
                                    341 ;	-----------------------------------------
      000134                        342 _stack_pop:
      000134 C0*00            [24]  343 	push	_bp
      000136 85 81*00         [24]  344 	mov	_bp,sp
      000139 C0 82            [24]  345 	push	dpl
      00013B C0 83            [24]  346 	push	dph
      00013D C0 F0            [24]  347 	push	b
      00013F E5 81            [12]  348 	mov	a,sp
      000141 24 06            [12]  349 	add	a,#0x06
      000143 F5 81            [12]  350 	mov	sp,a
                                    351 ;	stack.c:22: if (s->p < 0) return 0;
      000145 A8*00            [24]  352 	mov	r0,_bp
      000147 08               [12]  353 	inc	r0
      000148 E5*00            [12]  354 	mov	a,_bp
      00014A 24 07            [12]  355 	add	a,#0x07
      00014C F9               [12]  356 	mov	r1,a
      00014D 74 03            [12]  357 	mov	a,#0x03
      00014F 26               [12]  358 	add	a,@r0
      000150 F7               [12]  359 	mov	@r1,a
      000151 74 20            [12]  360 	mov	a,#0x20
      000153 08               [12]  361 	inc	r0
      000154 36               [12]  362 	addc	a,@r0
      000155 09               [12]  363 	inc	r1
      000156 F7               [12]  364 	mov	@r1,a
      000157 08               [12]  365 	inc	r0
      000158 09               [12]  366 	inc	r1
      000159 E6               [12]  367 	mov	a,@r0
      00015A F7               [12]  368 	mov	@r1,a
      00015B E5*00            [12]  369 	mov	a,_bp
      00015D 24 07            [12]  370 	add	a,#0x07
      00015F F8               [12]  371 	mov	r0,a
      000160 86 82            [24]  372 	mov	dpl,@r0
      000162 08               [12]  373 	inc	r0
      000163 86 83            [24]  374 	mov	dph,@r0
      000165 08               [12]  375 	inc	r0
      000166 86 F0            [24]  376 	mov	b,@r0
      000168 12r00r00         [24]  377 	lcall	__gptrget
      00016B FE               [12]  378 	mov	r6,a
      00016C A3               [24]  379 	inc	dptr
      00016D 12r00r00         [24]  380 	lcall	__gptrget
      000170 FF               [12]  381 	mov	r7,a
      000171 30 E7 06         [24]  382 	jnb	acc.7,00102$
      000174 90 00 00         [24]  383 	mov	dptr,#0x0000
      000177 02r02r52         [24]  384 	ljmp	00103$
      00017A                        385 00102$:
                                    386 ;	stack.c:23: s->spin = 1;
      00017A A8*00            [24]  387 	mov	r0,_bp
      00017C 08               [12]  388 	inc	r0
      00017D 86 82            [24]  389 	mov	dpl,@r0
      00017F 08               [12]  390 	inc	r0
      000180 86 83            [24]  391 	mov	dph,@r0
      000182 08               [12]  392 	inc	r0
      000183 86 F0            [24]  393 	mov	b,@r0
      000185 74 01            [12]  394 	mov	a,#0x01
      000187 12r00r00         [24]  395 	lcall	__gptrput
                                    396 ;	stack.c:24: *val = s->data[s->p];
      00018A E5*00            [12]  397 	mov	a,_bp
      00018C 24 FB            [12]  398 	add	a,#0xfb
      00018E F8               [12]  399 	mov	r0,a
      00018F E5*00            [12]  400 	mov	a,_bp
      000191 24 04            [12]  401 	add	a,#0x04
      000193 F9               [12]  402 	mov	r1,a
      000194 E6               [12]  403 	mov	a,@r0
      000195 F7               [12]  404 	mov	@r1,a
      000196 08               [12]  405 	inc	r0
      000197 09               [12]  406 	inc	r1
      000198 E6               [12]  407 	mov	a,@r0
      000199 F7               [12]  408 	mov	@r1,a
      00019A 08               [12]  409 	inc	r0
      00019B 09               [12]  410 	inc	r1
      00019C E6               [12]  411 	mov	a,@r0
      00019D F7               [12]  412 	mov	@r1,a
      00019E A8*00            [24]  413 	mov	r0,_bp
      0001A0 08               [12]  414 	inc	r0
      0001A1 74 01            [12]  415 	mov	a,#0x01
      0001A3 26               [12]  416 	add	a,@r0
      0001A4 FD               [12]  417 	mov	r5,a
      0001A5 E4               [12]  418 	clr	a
      0001A6 08               [12]  419 	inc	r0
      0001A7 36               [12]  420 	addc	a,@r0
      0001A8 FC               [12]  421 	mov	r4,a
      0001A9 08               [12]  422 	inc	r0
      0001AA 86 03            [24]  423 	mov	ar3,@r0
      0001AC E5*00            [12]  424 	mov	a,_bp
      0001AE 24 07            [12]  425 	add	a,#0x07
      0001B0 F8               [12]  426 	mov	r0,a
      0001B1 86 82            [24]  427 	mov	dpl,@r0
      0001B3 08               [12]  428 	inc	r0
      0001B4 86 83            [24]  429 	mov	dph,@r0
      0001B6 08               [12]  430 	inc	r0
      0001B7 86 F0            [24]  431 	mov	b,@r0
      0001B9 12r00r00         [24]  432 	lcall	__gptrget
      0001BC FF               [12]  433 	mov	r7,a
      0001BD A3               [24]  434 	inc	dptr
      0001BE 12r00r00         [24]  435 	lcall	__gptrget
      0001C1 FE               [12]  436 	mov	r6,a
      0001C2 EF               [12]  437 	mov	a,r7
      0001C3 2F               [12]  438 	add	a,r7
      0001C4 FF               [12]  439 	mov	r7,a
      0001C5 EE               [12]  440 	mov	a,r6
      0001C6 33               [12]  441 	rlc	a
      0001C7 FE               [12]  442 	mov	r6,a
      0001C8 EF               [12]  443 	mov	a,r7
      0001C9 2F               [12]  444 	add	a,r7
      0001CA FF               [12]  445 	mov	r7,a
      0001CB EE               [12]  446 	mov	a,r6
      0001CC 33               [12]  447 	rlc	a
      0001CD FE               [12]  448 	mov	r6,a
      0001CE EF               [12]  449 	mov	a,r7
      0001CF 2D               [12]  450 	add	a,r5
      0001D0 FD               [12]  451 	mov	r5,a
      0001D1 EE               [12]  452 	mov	a,r6
      0001D2 3C               [12]  453 	addc	a,r4
      0001D3 FE               [12]  454 	mov	r6,a
      0001D4 8B 07            [24]  455 	mov	ar7,r3
      0001D6 8D 82            [24]  456 	mov	dpl,r5
      0001D8 8E 83            [24]  457 	mov	dph,r6
      0001DA 8F F0            [24]  458 	mov	b,r7
      0001DC 12r00r00         [24]  459 	lcall	__gptrget
      0001DF FD               [12]  460 	mov	r5,a
      0001E0 A3               [24]  461 	inc	dptr
      0001E1 12r00r00         [24]  462 	lcall	__gptrget
      0001E4 FE               [12]  463 	mov	r6,a
      0001E5 A3               [24]  464 	inc	dptr
      0001E6 12r00r00         [24]  465 	lcall	__gptrget
      0001E9 FC               [12]  466 	mov	r4,a
      0001EA A3               [24]  467 	inc	dptr
      0001EB 12r00r00         [24]  468 	lcall	__gptrget
      0001EE FF               [12]  469 	mov	r7,a
      0001EF E5*00            [12]  470 	mov	a,_bp
      0001F1 24 04            [12]  471 	add	a,#0x04
      0001F3 F8               [12]  472 	mov	r0,a
      0001F4 86 82            [24]  473 	mov	dpl,@r0
      0001F6 08               [12]  474 	inc	r0
      0001F7 86 83            [24]  475 	mov	dph,@r0
      0001F9 08               [12]  476 	inc	r0
      0001FA 86 F0            [24]  477 	mov	b,@r0
      0001FC ED               [12]  478 	mov	a,r5
      0001FD 12r00r00         [24]  479 	lcall	__gptrput
      000200 A3               [24]  480 	inc	dptr
      000201 EE               [12]  481 	mov	a,r6
      000202 12r00r00         [24]  482 	lcall	__gptrput
      000205 A3               [24]  483 	inc	dptr
      000206 EC               [12]  484 	mov	a,r4
      000207 12r00r00         [24]  485 	lcall	__gptrput
      00020A A3               [24]  486 	inc	dptr
      00020B EF               [12]  487 	mov	a,r7
      00020C 12r00r00         [24]  488 	lcall	__gptrput
                                    489 ;	stack.c:25: s->p--;
      00020F E5*00            [12]  490 	mov	a,_bp
      000211 24 07            [12]  491 	add	a,#0x07
      000213 F8               [12]  492 	mov	r0,a
      000214 86 82            [24]  493 	mov	dpl,@r0
      000216 08               [12]  494 	inc	r0
      000217 86 83            [24]  495 	mov	dph,@r0
      000219 08               [12]  496 	inc	r0
      00021A 86 F0            [24]  497 	mov	b,@r0
      00021C 12r00r00         [24]  498 	lcall	__gptrget
      00021F FE               [12]  499 	mov	r6,a
      000220 A3               [24]  500 	inc	dptr
      000221 12r00r00         [24]  501 	lcall	__gptrget
      000224 FF               [12]  502 	mov	r7,a
      000225 1E               [12]  503 	dec	r6
      000226 BE FF 01         [24]  504 	cjne	r6,#0xff,00110$
      000229 1F               [12]  505 	dec	r7
      00022A                        506 00110$:
      00022A E5*00            [12]  507 	mov	a,_bp
      00022C 24 07            [12]  508 	add	a,#0x07
      00022E F8               [12]  509 	mov	r0,a
      00022F 86 82            [24]  510 	mov	dpl,@r0
      000231 08               [12]  511 	inc	r0
      000232 86 83            [24]  512 	mov	dph,@r0
      000234 08               [12]  513 	inc	r0
      000235 86 F0            [24]  514 	mov	b,@r0
      000237 EE               [12]  515 	mov	a,r6
      000238 12r00r00         [24]  516 	lcall	__gptrput
      00023B A3               [24]  517 	inc	dptr
      00023C EF               [12]  518 	mov	a,r7
      00023D 12r00r00         [24]  519 	lcall	__gptrput
                                    520 ;	stack.c:26: s->spin = 0;
      000240 A8*00            [24]  521 	mov	r0,_bp
      000242 08               [12]  522 	inc	r0
      000243 86 82            [24]  523 	mov	dpl,@r0
      000245 08               [12]  524 	inc	r0
      000246 86 83            [24]  525 	mov	dph,@r0
      000248 08               [12]  526 	inc	r0
      000249 86 F0            [24]  527 	mov	b,@r0
      00024B E4               [12]  528 	clr	a
      00024C 12r00r00         [24]  529 	lcall	__gptrput
                                    530 ;	stack.c:27: return 1;
      00024F 90 00 01         [24]  531 	mov	dptr,#0x0001
      000252                        532 00103$:
                                    533 ;	stack.c:28: }
      000252 85*00 81         [24]  534 	mov	sp,_bp
      000255 D0*00            [24]  535 	pop	_bp
      000257 22               [24]  536 	ret
                                    537 ;------------------------------------------------------------
                                    538 ;Allocation info for local variables in function 'stack_peek'
                                    539 ;------------------------------------------------------------
                                    540 ;val                       Allocated to stack - _bp -5
                                    541 ;s                         Allocated to registers r5 r6 r7 
                                    542 ;sloc0                     Allocated to stack - _bp +1
                                    543 ;------------------------------------------------------------
                                    544 ;	stack.c:30: int stack_peek(stack_t *s, long *val) __reentrant {
                                    545 ;	-----------------------------------------
                                    546 ;	 function stack_peek
                                    547 ;	-----------------------------------------
      000258                        548 _stack_peek:
      000258 C0*00            [24]  549 	push	_bp
      00025A 85 81*00         [24]  550 	mov	_bp,sp
      00025D 05 81            [12]  551 	inc	sp
      00025F 05 81            [12]  552 	inc	sp
      000261 05 81            [12]  553 	inc	sp
      000263 AD 82            [24]  554 	mov	r5,dpl
      000265 AE 83            [24]  555 	mov	r6,dph
      000267 AF F0            [24]  556 	mov	r7,b
                                    557 ;	stack.c:31: if (s->p < 0) return 0;
      000269 74 03            [12]  558 	mov	a,#0x03
      00026B 2D               [12]  559 	add	a,r5
      00026C FB               [12]  560 	mov	r3,a
      00026D 74 20            [12]  561 	mov	a,#0x20
      00026F 3E               [12]  562 	addc	a,r6
      000270 FA               [12]  563 	mov	r2,a
      000271 8F 04            [24]  564 	mov	ar4,r7
      000273 8B 82            [24]  565 	mov	dpl,r3
      000275 8A 83            [24]  566 	mov	dph,r2
      000277 8C F0            [24]  567 	mov	b,r4
      000279 12r00r00         [24]  568 	lcall	__gptrget
      00027C FB               [12]  569 	mov	r3,a
      00027D A3               [24]  570 	inc	dptr
      00027E 12r00r00         [24]  571 	lcall	__gptrget
      000281 FC               [12]  572 	mov	r4,a
      000282 30 E7 05         [24]  573 	jnb	acc.7,00102$
      000285 90 00 00         [24]  574 	mov	dptr,#0x0000
      000288 80 63            [24]  575 	sjmp	00103$
      00028A                        576 00102$:
                                    577 ;	stack.c:32: *val = s->data[s->p];
      00028A E5*00            [12]  578 	mov	a,_bp
      00028C 24 FB            [12]  579 	add	a,#0xfb
      00028E F8               [12]  580 	mov	r0,a
      00028F A9*00            [24]  581 	mov	r1,_bp
      000291 09               [12]  582 	inc	r1
      000292 E6               [12]  583 	mov	a,@r0
      000293 F7               [12]  584 	mov	@r1,a
      000294 08               [12]  585 	inc	r0
      000295 09               [12]  586 	inc	r1
      000296 E6               [12]  587 	mov	a,@r0
      000297 F7               [12]  588 	mov	@r1,a
      000298 08               [12]  589 	inc	r0
      000299 09               [12]  590 	inc	r1
      00029A E6               [12]  591 	mov	a,@r0
      00029B F7               [12]  592 	mov	@r1,a
      00029C 0D               [12]  593 	inc	r5
      00029D BD 00 01         [24]  594 	cjne	r5,#0x00,00110$
      0002A0 0E               [12]  595 	inc	r6
      0002A1                        596 00110$:
      0002A1 EB               [12]  597 	mov	a,r3
      0002A2 2B               [12]  598 	add	a,r3
      0002A3 FB               [12]  599 	mov	r3,a
      0002A4 EC               [12]  600 	mov	a,r4
      0002A5 33               [12]  601 	rlc	a
      0002A6 FC               [12]  602 	mov	r4,a
      0002A7 EB               [12]  603 	mov	a,r3
      0002A8 2B               [12]  604 	add	a,r3
      0002A9 FB               [12]  605 	mov	r3,a
      0002AA EC               [12]  606 	mov	a,r4
      0002AB 33               [12]  607 	rlc	a
      0002AC FC               [12]  608 	mov	r4,a
      0002AD EB               [12]  609 	mov	a,r3
      0002AE 2D               [12]  610 	add	a,r5
      0002AF FD               [12]  611 	mov	r5,a
      0002B0 EC               [12]  612 	mov	a,r4
      0002B1 3E               [12]  613 	addc	a,r6
      0002B2 FE               [12]  614 	mov	r6,a
      0002B3 8D 82            [24]  615 	mov	dpl,r5
      0002B5 8E 83            [24]  616 	mov	dph,r6
      0002B7 8F F0            [24]  617 	mov	b,r7
      0002B9 12r00r00         [24]  618 	lcall	__gptrget
      0002BC FD               [12]  619 	mov	r5,a
      0002BD A3               [24]  620 	inc	dptr
      0002BE 12r00r00         [24]  621 	lcall	__gptrget
      0002C1 FE               [12]  622 	mov	r6,a
      0002C2 A3               [24]  623 	inc	dptr
      0002C3 12r00r00         [24]  624 	lcall	__gptrget
      0002C6 FF               [12]  625 	mov	r7,a
      0002C7 A3               [24]  626 	inc	dptr
      0002C8 12r00r00         [24]  627 	lcall	__gptrget
      0002CB FC               [12]  628 	mov	r4,a
      0002CC A8*00            [24]  629 	mov	r0,_bp
      0002CE 08               [12]  630 	inc	r0
      0002CF 86 82            [24]  631 	mov	dpl,@r0
      0002D1 08               [12]  632 	inc	r0
      0002D2 86 83            [24]  633 	mov	dph,@r0
      0002D4 08               [12]  634 	inc	r0
      0002D5 86 F0            [24]  635 	mov	b,@r0
      0002D7 ED               [12]  636 	mov	a,r5
      0002D8 12r00r00         [24]  637 	lcall	__gptrput
      0002DB A3               [24]  638 	inc	dptr
      0002DC EE               [12]  639 	mov	a,r6
      0002DD 12r00r00         [24]  640 	lcall	__gptrput
      0002E0 A3               [24]  641 	inc	dptr
      0002E1 EF               [12]  642 	mov	a,r7
      0002E2 12r00r00         [24]  643 	lcall	__gptrput
      0002E5 A3               [24]  644 	inc	dptr
      0002E6 EC               [12]  645 	mov	a,r4
      0002E7 12r00r00         [24]  646 	lcall	__gptrput
                                    647 ;	stack.c:33: return 1;
      0002EA 90 00 01         [24]  648 	mov	dptr,#0x0001
      0002ED                        649 00103$:
                                    650 ;	stack.c:34: }
      0002ED 85*00 81         [24]  651 	mov	sp,_bp
      0002F0 D0*00            [24]  652 	pop	_bp
      0002F2 22               [24]  653 	ret
                                    654 ;------------------------------------------------------------
                                    655 ;Allocation info for local variables in function 'stack_peek2'
                                    656 ;------------------------------------------------------------
                                    657 ;vals                      Allocated to stack - _bp -5
                                    658 ;s                         Allocated to stack - _bp +1
                                    659 ;nvals                     Allocated to registers r3 r2 
                                    660 ;sloc0                     Allocated to stack - _bp +6
                                    661 ;sloc1                     Allocated to stack - _bp +4
                                    662 ;sloc2                     Allocated to stack - _bp +11
                                    663 ;sloc3                     Allocated to stack - _bp +7
                                    664 ;------------------------------------------------------------
                                    665 ;	stack.c:36: int stack_peek2(stack_t *s, long *vals) __reentrant {
                                    666 ;	-----------------------------------------
                                    667 ;	 function stack_peek2
                                    668 ;	-----------------------------------------
      0002F3                        669 _stack_peek2:
      0002F3 C0*00            [24]  670 	push	_bp
      0002F5 85 81*00         [24]  671 	mov	_bp,sp
      0002F8 C0 82            [24]  672 	push	dpl
      0002FA C0 83            [24]  673 	push	dph
      0002FC C0 F0            [24]  674 	push	b
      0002FE E5 81            [12]  675 	mov	a,sp
      000300 24 06            [12]  676 	add	a,#0x06
      000302 F5 81            [12]  677 	mov	sp,a
                                    678 ;	stack.c:37: int nvals = 0;
      000304 7B 00            [12]  679 	mov	r3,#0x00
      000306 7A 00            [12]  680 	mov	r2,#0x00
                                    681 ;	stack.c:39: if (s->spin) goto out; /* if called from ISR */
      000308 A8*00            [24]  682 	mov	r0,_bp
      00030A 08               [12]  683 	inc	r0
      00030B 86 82            [24]  684 	mov	dpl,@r0
      00030D 08               [12]  685 	inc	r0
      00030E 86 83            [24]  686 	mov	dph,@r0
      000310 08               [12]  687 	inc	r0
      000311 86 F0            [24]  688 	mov	b,@r0
      000313 12r00r00         [24]  689 	lcall	__gptrget
      000316 60 03            [24]  690 	jz	00122$
      000318 02r04r5A         [24]  691 	ljmp	00107$
      00031B                        692 00122$:
                                    693 ;	stack.c:41: if (s->p < 0) goto out;
      00031B A8*00            [24]  694 	mov	r0,_bp
      00031D 08               [12]  695 	inc	r0
      00031E E5*00            [12]  696 	mov	a,_bp
      000320 24 07            [12]  697 	add	a,#0x07
      000322 F9               [12]  698 	mov	r1,a
      000323 74 03            [12]  699 	mov	a,#0x03
      000325 26               [12]  700 	add	a,@r0
      000326 F7               [12]  701 	mov	@r1,a
      000327 74 20            [12]  702 	mov	a,#0x20
      000329 08               [12]  703 	inc	r0
      00032A 36               [12]  704 	addc	a,@r0
      00032B 09               [12]  705 	inc	r1
      00032C F7               [12]  706 	mov	@r1,a
      00032D 08               [12]  707 	inc	r0
      00032E 09               [12]  708 	inc	r1
      00032F E6               [12]  709 	mov	a,@r0
      000330 F7               [12]  710 	mov	@r1,a
      000331 E5*00            [12]  711 	mov	a,_bp
      000333 24 07            [12]  712 	add	a,#0x07
      000335 F8               [12]  713 	mov	r0,a
      000336 86 82            [24]  714 	mov	dpl,@r0
      000338 08               [12]  715 	inc	r0
      000339 86 83            [24]  716 	mov	dph,@r0
      00033B 08               [12]  717 	inc	r0
      00033C 86 F0            [24]  718 	mov	b,@r0
      00033E 12r00r00         [24]  719 	lcall	__gptrget
      000341 FF               [12]  720 	mov	r7,a
      000342 A3               [24]  721 	inc	dptr
      000343 12r00r00         [24]  722 	lcall	__gptrget
      000346 FE               [12]  723 	mov	r6,a
      000347 30 E7 03         [24]  724 	jnb	acc.7,00123$
      00034A 02r04r5A         [24]  725 	ljmp	00107$
      00034D                        726 00123$:
                                    727 ;	stack.c:42: vals[1] = s->data[s->p];
      00034D E5*00            [12]  728 	mov	a,_bp
      00034F 24 FB            [12]  729 	add	a,#0xfb
      000351 F8               [12]  730 	mov	r0,a
      000352 E5*00            [12]  731 	mov	a,_bp
      000354 24 04            [12]  732 	add	a,#0x04
      000356 F9               [12]  733 	mov	r1,a
      000357 74 04            [12]  734 	mov	a,#0x04
      000359 26               [12]  735 	add	a,@r0
      00035A F7               [12]  736 	mov	@r1,a
      00035B E4               [12]  737 	clr	a
      00035C 08               [12]  738 	inc	r0
      00035D 36               [12]  739 	addc	a,@r0
      00035E 09               [12]  740 	inc	r1
      00035F F7               [12]  741 	mov	@r1,a
      000360 08               [12]  742 	inc	r0
      000361 09               [12]  743 	inc	r1
      000362 E6               [12]  744 	mov	a,@r0
      000363 F7               [12]  745 	mov	@r1,a
      000364 A8*00            [24]  746 	mov	r0,_bp
      000366 08               [12]  747 	inc	r0
      000367 74 01            [12]  748 	mov	a,#0x01
      000369 26               [12]  749 	add	a,@r0
      00036A FD               [12]  750 	mov	r5,a
      00036B E4               [12]  751 	clr	a
      00036C 08               [12]  752 	inc	r0
      00036D 36               [12]  753 	addc	a,@r0
      00036E FC               [12]  754 	mov	r4,a
      00036F 08               [12]  755 	inc	r0
      000370 86 03            [24]  756 	mov	ar3,@r0
      000372 EF               [12]  757 	mov	a,r7
      000373 2F               [12]  758 	add	a,r7
      000374 FF               [12]  759 	mov	r7,a
      000375 EE               [12]  760 	mov	a,r6
      000376 33               [12]  761 	rlc	a
      000377 FE               [12]  762 	mov	r6,a
      000378 EF               [12]  763 	mov	a,r7
      000379 2F               [12]  764 	add	a,r7
      00037A FF               [12]  765 	mov	r7,a
      00037B EE               [12]  766 	mov	a,r6
      00037C 33               [12]  767 	rlc	a
      00037D FE               [12]  768 	mov	r6,a
      00037E EF               [12]  769 	mov	a,r7
      00037F 2D               [12]  770 	add	a,r5
      000380 FD               [12]  771 	mov	r5,a
      000381 EE               [12]  772 	mov	a,r6
      000382 3C               [12]  773 	addc	a,r4
      000383 FE               [12]  774 	mov	r6,a
      000384 8B 07            [24]  775 	mov	ar7,r3
      000386 8D 82            [24]  776 	mov	dpl,r5
      000388 8E 83            [24]  777 	mov	dph,r6
      00038A 8F F0            [24]  778 	mov	b,r7
      00038C 12r00r00         [24]  779 	lcall	__gptrget
      00038F FD               [12]  780 	mov	r5,a
      000390 A3               [24]  781 	inc	dptr
      000391 12r00r00         [24]  782 	lcall	__gptrget
      000394 FE               [12]  783 	mov	r6,a
      000395 A3               [24]  784 	inc	dptr
      000396 12r00r00         [24]  785 	lcall	__gptrget
      000399 FC               [12]  786 	mov	r4,a
      00039A A3               [24]  787 	inc	dptr
      00039B 12r00r00         [24]  788 	lcall	__gptrget
      00039E FF               [12]  789 	mov	r7,a
      00039F E5*00            [12]  790 	mov	a,_bp
      0003A1 24 04            [12]  791 	add	a,#0x04
      0003A3 F8               [12]  792 	mov	r0,a
      0003A4 86 82            [24]  793 	mov	dpl,@r0
      0003A6 08               [12]  794 	inc	r0
      0003A7 86 83            [24]  795 	mov	dph,@r0
      0003A9 08               [12]  796 	inc	r0
      0003AA 86 F0            [24]  797 	mov	b,@r0
      0003AC ED               [12]  798 	mov	a,r5
      0003AD 12r00r00         [24]  799 	lcall	__gptrput
      0003B0 A3               [24]  800 	inc	dptr
      0003B1 EE               [12]  801 	mov	a,r6
      0003B2 12r00r00         [24]  802 	lcall	__gptrput
      0003B5 A3               [24]  803 	inc	dptr
      0003B6 EC               [12]  804 	mov	a,r4
      0003B7 12r00r00         [24]  805 	lcall	__gptrput
      0003BA A3               [24]  806 	inc	dptr
      0003BB EF               [12]  807 	mov	a,r7
      0003BC 12r00r00         [24]  808 	lcall	__gptrput
                                    809 ;	stack.c:43: nvals++;
      0003BF 7B 01            [12]  810 	mov	r3,#0x01
      0003C1 7A 00            [12]  811 	mov	r2,#0x00
                                    812 ;	stack.c:45: if ((s->p - 1) < 0) goto out;
      0003C3 E5*00            [12]  813 	mov	a,_bp
      0003C5 24 07            [12]  814 	add	a,#0x07
      0003C7 F8               [12]  815 	mov	r0,a
      0003C8 86 82            [24]  816 	mov	dpl,@r0
      0003CA 08               [12]  817 	inc	r0
      0003CB 86 83            [24]  818 	mov	dph,@r0
      0003CD 08               [12]  819 	inc	r0
      0003CE 86 F0            [24]  820 	mov	b,@r0
      0003D0 12r00r00         [24]  821 	lcall	__gptrget
      0003D3 FE               [12]  822 	mov	r6,a
      0003D4 A3               [24]  823 	inc	dptr
      0003D5 12r00r00         [24]  824 	lcall	__gptrget
      0003D8 FF               [12]  825 	mov	r7,a
      0003D9 EE               [12]  826 	mov	a,r6
      0003DA 24 FF            [12]  827 	add	a,#0xff
      0003DC FC               [12]  828 	mov	r4,a
      0003DD EF               [12]  829 	mov	a,r7
      0003DE 34 FF            [12]  830 	addc	a,#0xff
      0003E0 FD               [12]  831 	mov	r5,a
      0003E1 20 E7 76         [24]  832 	jb	acc.7,00107$
                                    833 ;	stack.c:46: vals[0] = s->data[s->p - 1];
      0003E4 E5*00            [12]  834 	mov	a,_bp
      0003E6 24 FB            [12]  835 	add	a,#0xfb
      0003E8 F8               [12]  836 	mov	r0,a
      0003E9 E5*00            [12]  837 	mov	a,_bp
      0003EB 24 07            [12]  838 	add	a,#0x07
      0003ED F9               [12]  839 	mov	r1,a
      0003EE E6               [12]  840 	mov	a,@r0
      0003EF F7               [12]  841 	mov	@r1,a
      0003F0 08               [12]  842 	inc	r0
      0003F1 09               [12]  843 	inc	r1
      0003F2 E6               [12]  844 	mov	a,@r0
      0003F3 F7               [12]  845 	mov	@r1,a
      0003F4 08               [12]  846 	inc	r0
      0003F5 09               [12]  847 	inc	r1
      0003F6 E6               [12]  848 	mov	a,@r0
      0003F7 F7               [12]  849 	mov	@r1,a
      0003F8 A8*00            [24]  850 	mov	r0,_bp
      0003FA 08               [12]  851 	inc	r0
      0003FB 74 01            [12]  852 	mov	a,#0x01
      0003FD 26               [12]  853 	add	a,@r0
      0003FE FA               [12]  854 	mov	r2,a
      0003FF E4               [12]  855 	clr	a
      000400 08               [12]  856 	inc	r0
      000401 36               [12]  857 	addc	a,@r0
      000402 FC               [12]  858 	mov	r4,a
      000403 08               [12]  859 	inc	r0
      000404 86 05            [24]  860 	mov	ar5,@r0
      000406 1E               [12]  861 	dec	r6
      000407 BE FF 01         [24]  862 	cjne	r6,#0xff,00125$
      00040A 1F               [12]  863 	dec	r7
      00040B                        864 00125$:
      00040B EE               [12]  865 	mov	a,r6
      00040C 2E               [12]  866 	add	a,r6
      00040D FE               [12]  867 	mov	r6,a
      00040E EF               [12]  868 	mov	a,r7
      00040F 33               [12]  869 	rlc	a
      000410 FF               [12]  870 	mov	r7,a
      000411 EE               [12]  871 	mov	a,r6
      000412 2E               [12]  872 	add	a,r6
      000413 FE               [12]  873 	mov	r6,a
      000414 EF               [12]  874 	mov	a,r7
      000415 33               [12]  875 	rlc	a
      000416 FF               [12]  876 	mov	r7,a
      000417 EE               [12]  877 	mov	a,r6
      000418 2A               [12]  878 	add	a,r2
      000419 FA               [12]  879 	mov	r2,a
      00041A EF               [12]  880 	mov	a,r7
      00041B 3C               [12]  881 	addc	a,r4
      00041C FC               [12]  882 	mov	r4,a
      00041D 8A 82            [24]  883 	mov	dpl,r2
      00041F 8C 83            [24]  884 	mov	dph,r4
      000421 8D F0            [24]  885 	mov	b,r5
      000423 12r00r00         [24]  886 	lcall	__gptrget
      000426 FA               [12]  887 	mov	r2,a
      000427 A3               [24]  888 	inc	dptr
      000428 12r00r00         [24]  889 	lcall	__gptrget
      00042B FC               [12]  890 	mov	r4,a
      00042C A3               [24]  891 	inc	dptr
      00042D 12r00r00         [24]  892 	lcall	__gptrget
      000430 FD               [12]  893 	mov	r5,a
      000431 A3               [24]  894 	inc	dptr
      000432 12r00r00         [24]  895 	lcall	__gptrget
      000435 FF               [12]  896 	mov	r7,a
      000436 E5*00            [12]  897 	mov	a,_bp
      000438 24 07            [12]  898 	add	a,#0x07
      00043A F8               [12]  899 	mov	r0,a
      00043B 86 82            [24]  900 	mov	dpl,@r0
      00043D 08               [12]  901 	inc	r0
      00043E 86 83            [24]  902 	mov	dph,@r0
      000440 08               [12]  903 	inc	r0
      000441 86 F0            [24]  904 	mov	b,@r0
      000443 EA               [12]  905 	mov	a,r2
      000444 12r00r00         [24]  906 	lcall	__gptrput
      000447 A3               [24]  907 	inc	dptr
      000448 EC               [12]  908 	mov	a,r4
      000449 12r00r00         [24]  909 	lcall	__gptrput
      00044C A3               [24]  910 	inc	dptr
      00044D ED               [12]  911 	mov	a,r5
      00044E 12r00r00         [24]  912 	lcall	__gptrput
      000451 A3               [24]  913 	inc	dptr
      000452 EF               [12]  914 	mov	a,r7
      000453 12r00r00         [24]  915 	lcall	__gptrput
                                    916 ;	stack.c:47: nvals++;
      000456 7B 02            [12]  917 	mov	r3,#0x02
      000458 7A 00            [12]  918 	mov	r2,#0x00
                                    919 ;	stack.c:49: out:
      00045A                        920 00107$:
                                    921 ;	stack.c:50: return nvals;
      00045A 8B 82            [24]  922 	mov	dpl,r3
      00045C 8A 83            [24]  923 	mov	dph,r2
                                    924 ;	stack.c:51: }
      00045E 85*00 81         [24]  925 	mov	sp,_bp
      000461 D0*00            [24]  926 	pop	_bp
      000463 22               [24]  927 	ret
                                    928 ;------------------------------------------------------------
                                    929 ;Allocation info for local variables in function 'stack_iter_peek'
                                    930 ;------------------------------------------------------------
                                    931 ;iter                      Allocated to stack - _bp -4
                                    932 ;_ctx                      Allocated to stack - _bp -7
                                    933 ;s                         Allocated to stack - _bp +1
                                    934 ;j                         Allocated to registers 
                                    935 ;r                         Allocated to registers r2 r7 
                                    936 ;sloc0                     Allocated to stack - _bp +4
                                    937 ;------------------------------------------------------------
                                    938 ;	stack.c:53: int stack_iter_peek(stack_t *s, stack_iter_t iter, void *_ctx) __reentrant {
                                    939 ;	-----------------------------------------
                                    940 ;	 function stack_iter_peek
                                    941 ;	-----------------------------------------
      000464                        942 _stack_iter_peek:
      000464 C0*00            [24]  943 	push	_bp
      000466 85 81*00         [24]  944 	mov	_bp,sp
      000469 C0 82            [24]  945 	push	dpl
      00046B C0 83            [24]  946 	push	dph
      00046D C0 F0            [24]  947 	push	b
      00046F 05 81            [12]  948 	inc	sp
      000471 05 81            [12]  949 	inc	sp
      000473 05 81            [12]  950 	inc	sp
                                    951 ;	stack.c:56: if (s->p < 0) return 0;
      000475 A8*00            [24]  952 	mov	r0,_bp
      000477 08               [12]  953 	inc	r0
      000478 74 03            [12]  954 	mov	a,#0x03
      00047A 26               [12]  955 	add	a,@r0
      00047B FB               [12]  956 	mov	r3,a
      00047C 74 20            [12]  957 	mov	a,#0x20
      00047E 08               [12]  958 	inc	r0
      00047F 36               [12]  959 	addc	a,@r0
      000480 FA               [12]  960 	mov	r2,a
      000481 08               [12]  961 	inc	r0
      000482 86 04            [24]  962 	mov	ar4,@r0
      000484 8B 82            [24]  963 	mov	dpl,r3
      000486 8A 83            [24]  964 	mov	dph,r2
      000488 8C F0            [24]  965 	mov	b,r4
      00048A 12r00r00         [24]  966 	lcall	__gptrget
      00048D FB               [12]  967 	mov	r3,a
      00048E A3               [24]  968 	inc	dptr
      00048F 12r00r00         [24]  969 	lcall	__gptrget
      000492 FC               [12]  970 	mov	r4,a
      000493 30 E7 06         [24]  971 	jnb	acc.7,00102$
      000496 90 00 00         [24]  972 	mov	dptr,#0x0000
      000499 02r05r4F         [24]  973 	ljmp	00109$
      00049C                        974 00102$:
                                    975 ;	stack.c:58: for (j = s->p, r = 0; j >= 0; j--) {
      00049C 7A 00            [12]  976 	mov	r2,#0x00
      00049E 7F 00            [12]  977 	mov	r7,#0x00
      0004A0 A8*00            [24]  978 	mov	r0,_bp
      0004A2 08               [12]  979 	inc	r0
      0004A3 E5*00            [12]  980 	mov	a,_bp
      0004A5 24 04            [12]  981 	add	a,#0x04
      0004A7 F9               [12]  982 	mov	r1,a
      0004A8 74 01            [12]  983 	mov	a,#0x01
      0004AA 26               [12]  984 	add	a,@r0
      0004AB F7               [12]  985 	mov	@r1,a
      0004AC E4               [12]  986 	clr	a
      0004AD 08               [12]  987 	inc	r0
      0004AE 36               [12]  988 	addc	a,@r0
      0004AF 09               [12]  989 	inc	r1
      0004B0 F7               [12]  990 	mov	@r1,a
      0004B1 08               [12]  991 	inc	r0
      0004B2 09               [12]  992 	inc	r1
      0004B3 E6               [12]  993 	mov	a,@r0
      0004B4 F7               [12]  994 	mov	@r1,a
      0004B5                        995 00107$:
      0004B5 EC               [12]  996 	mov	a,r4
      0004B6 30 E7 03         [24]  997 	jnb	acc.7,00129$
      0004B9 02r05r4B         [24]  998 	ljmp	00105$
      0004BC                        999 00129$:
                                   1000 ;	stack.c:59: r = iter(_ctx, s->data[j]);
      0004BC EB               [12] 1001 	mov	a,r3
      0004BD 2B               [12] 1002 	add	a,r3
      0004BE FD               [12] 1003 	mov	r5,a
      0004BF EC               [12] 1004 	mov	a,r4
      0004C0 33               [12] 1005 	rlc	a
      0004C1 FE               [12] 1006 	mov	r6,a
      0004C2 ED               [12] 1007 	mov	a,r5
      0004C3 2D               [12] 1008 	add	a,r5
      0004C4 FD               [12] 1009 	mov	r5,a
      0004C5 EE               [12] 1010 	mov	a,r6
      0004C6 33               [12] 1011 	rlc	a
      0004C7 FE               [12] 1012 	mov	r6,a
      0004C8 C0 03            [24] 1013 	push	ar3
      0004CA C0 04            [24] 1014 	push	ar4
      0004CC E5*00            [12] 1015 	mov	a,_bp
      0004CE 24 04            [12] 1016 	add	a,#0x04
      0004D0 F8               [12] 1017 	mov	r0,a
      0004D1 ED               [12] 1018 	mov	a,r5
      0004D2 26               [12] 1019 	add	a,@r0
      0004D3 FD               [12] 1020 	mov	r5,a
      0004D4 EE               [12] 1021 	mov	a,r6
      0004D5 08               [12] 1022 	inc	r0
      0004D6 36               [12] 1023 	addc	a,@r0
      0004D7 FC               [12] 1024 	mov	r4,a
      0004D8 08               [12] 1025 	inc	r0
      0004D9 86 06            [24] 1026 	mov	ar6,@r0
      0004DB 8D 82            [24] 1027 	mov	dpl,r5
      0004DD 8C 83            [24] 1028 	mov	dph,r4
      0004DF 8E F0            [24] 1029 	mov	b,r6
      0004E1 12r00r00         [24] 1030 	lcall	__gptrget
      0004E4 FD               [12] 1031 	mov	r5,a
      0004E5 A3               [24] 1032 	inc	dptr
      0004E6 12r00r00         [24] 1033 	lcall	__gptrget
      0004E9 FC               [12] 1034 	mov	r4,a
      0004EA A3               [24] 1035 	inc	dptr
      0004EB 12r00r00         [24] 1036 	lcall	__gptrget
      0004EE FE               [12] 1037 	mov	r6,a
      0004EF A3               [24] 1038 	inc	dptr
      0004F0 12r00r00         [24] 1039 	lcall	__gptrget
      0004F3 FB               [12] 1040 	mov	r3,a
      0004F4 C0 04            [24] 1041 	push	ar4
      0004F6 C0 03            [24] 1042 	push	ar3
      0004F8 C0 05            [24] 1043 	push	ar5
      0004FA C0 04            [24] 1044 	push	ar4
      0004FC C0 06            [24] 1045 	push	ar6
      0004FE C0 03            [24] 1046 	push	ar3
      000500 12r05r05         [24] 1047 	lcall	00130$
      000503 80 1A            [24] 1048 	sjmp	00131$
      000505                       1049 00130$:
      000505 E5*00            [12] 1050 	mov	a,_bp
      000507 24 FC            [12] 1051 	add	a,#0xfc
      000509 F8               [12] 1052 	mov	r0,a
      00050A E6               [12] 1053 	mov	a,@r0
      00050B C0 E0            [24] 1054 	push	acc
      00050D 08               [12] 1055 	inc	r0
      00050E E6               [12] 1056 	mov	a,@r0
      00050F C0 E0            [24] 1057 	push	acc
      000511 E5*00            [12] 1058 	mov	a,_bp
      000513 24 F9            [12] 1059 	add	a,#0xf9
      000515 F8               [12] 1060 	mov	r0,a
      000516 86 82            [24] 1061 	mov	dpl,@r0
      000518 08               [12] 1062 	inc	r0
      000519 86 83            [24] 1063 	mov	dph,@r0
      00051B 08               [12] 1064 	inc	r0
      00051C 86 F0            [24] 1065 	mov	b,@r0
      00051E 22               [24] 1066 	ret
      00051F                       1067 00131$:
      00051F AD 82            [24] 1068 	mov	r5,dpl
      000521 AE 83            [24] 1069 	mov	r6,dph
      000523 E5 81            [12] 1070 	mov	a,sp
      000525 24 FC            [12] 1071 	add	a,#0xfc
      000527 F5 81            [12] 1072 	mov	sp,a
      000529 D0 03            [24] 1073 	pop	ar3
      00052B D0 04            [24] 1074 	pop	ar4
      00052D 8D 02            [24] 1075 	mov	ar2,r5
      00052F 8E 07            [24] 1076 	mov	ar7,r6
                                   1077 ;	stack.c:60: if (r <= 0) break;
      000531 C3               [12] 1078 	clr	c
      000532 E4               [12] 1079 	clr	a
      000533 9A               [12] 1080 	subb	a,r2
      000534 74 80            [12] 1081 	mov	a,#(0x00 ^ 0x80)
      000536 8F F0            [24] 1082 	mov	b,r7
      000538 63 F0 80         [24] 1083 	xrl	b,#0x80
      00053B 95 F0            [12] 1084 	subb	a,b
      00053D D0 04            [24] 1085 	pop	ar4
      00053F D0 03            [24] 1086 	pop	ar3
      000541 50 08            [24] 1087 	jnc	00105$
                                   1088 ;	stack.c:58: for (j = s->p, r = 0; j >= 0; j--) {
      000543 1B               [12] 1089 	dec	r3
      000544 BB FF 01         [24] 1090 	cjne	r3,#0xff,00133$
      000547 1C               [12] 1091 	dec	r4
      000548                       1092 00133$:
      000548 02r04rB5         [24] 1093 	ljmp	00107$
      00054B                       1094 00105$:
                                   1095 ;	stack.c:63: return r;
      00054B 8A 82            [24] 1096 	mov	dpl,r2
      00054D 8F 83            [24] 1097 	mov	dph,r7
      00054F                       1098 00109$:
                                   1099 ;	stack.c:64: }
      00054F 85*00 81         [24] 1100 	mov	sp,_bp
      000552 D0*00            [24] 1101 	pop	_bp
      000554 22               [24] 1102 	ret
                                   1103 	.area CSEG    (CODE)
                                   1104 	.area CONST   (CODE)
                                   1105 	.area XINIT   (CODE)
                                   1106 	.area CABS    (ABS,CODE)
