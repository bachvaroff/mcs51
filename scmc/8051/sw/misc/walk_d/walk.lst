                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9648
      0025B0                        323 _stack:
      0025B0                        324 	.ds 38592
      00BC70                        325 _sp:
      00BC70                        326 	.ds 2
                           00F006   327 _OEreg	=	0xf006
                                    328 ;--------------------------------------------------------
                                    329 ; absolute external ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XABS    (ABS,XDATA)
                                    332 ;--------------------------------------------------------
                                    333 ; external initialized ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XISEG   (XDATA)
      000000                        336 _neigh:
      000000                        337 	.ds 64
                                    338 	.area HOME    (CODE)
                                    339 	.area GSINIT0 (CODE)
                                    340 	.area GSINIT1 (CODE)
                                    341 	.area GSINIT2 (CODE)
                                    342 	.area GSINIT3 (CODE)
                                    343 	.area GSINIT4 (CODE)
                                    344 	.area GSINIT5 (CODE)
                                    345 	.area GSINIT  (CODE)
                                    346 	.area GSFINAL (CODE)
                                    347 	.area CSEG    (CODE)
                                    348 ;--------------------------------------------------------
                                    349 ; interrupt vector 
                                    350 ;--------------------------------------------------------
                                    351 	.area HOME    (CODE)
      000000                        352 __interrupt_vect:
      000000 02r00r00         [24]  353 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  354 	ljmp	_int0
                                    355 ;--------------------------------------------------------
                                    356 ; global & static initialisations
                                    357 ;--------------------------------------------------------
                                    358 	.area HOME    (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.area GSFINAL (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.globl __sdcc_gsinit_startup
                                    363 	.globl __sdcc_program_startup
                                    364 	.globl __start__stack
                                    365 	.globl __mcs51_genXINIT
                                    366 	.globl __mcs51_genXRAMCLEAR
                                    367 	.globl __mcs51_genRAMCLEAR
                                    368 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  369 	ljmp	__sdcc_program_startup
                                    370 ;--------------------------------------------------------
                                    371 ; Home
                                    372 ;--------------------------------------------------------
                                    373 	.area HOME    (CODE)
                                    374 	.area HOME    (CODE)
      000006                        375 __sdcc_program_startup:
      000006 02r06r35         [24]  376 	ljmp	_main
                                    377 ;	return from main will return to caller
                                    378 ;--------------------------------------------------------
                                    379 ; code
                                    380 ;--------------------------------------------------------
                                    381 	.area CSEG    (CODE)
                                    382 ;------------------------------------------------------------
                                    383 ;Allocation info for local variables in function 'putchar'
                                    384 ;------------------------------------------------------------
                                    385 ;c                         Allocated to registers 
                                    386 ;------------------------------------------------------------
                                    387 ;	walk.c:9: int putchar(int c) __naked {
                                    388 ;	-----------------------------------------
                                    389 ;	 function putchar
                                    390 ;	-----------------------------------------
      000000                        391 _putchar:
                                    392 ;	naked function: no prologue.
                                    393 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  394 	mov	a, dpl
      000002 02 00 30         [24]  395 	ljmp	0x0030
                                    396 ;	walk.c:15: }
                                    397 ;	naked function: no epilogue.
                                    398 ;------------------------------------------------------------
                                    399 ;Allocation info for local variables in function 'getchar'
                                    400 ;------------------------------------------------------------
                                    401 ;	walk.c:17: int getchar(void) __naked {
                                    402 ;	-----------------------------------------
                                    403 ;	 function getchar
                                    404 ;	-----------------------------------------
      000005                        405 _getchar:
                                    406 ;	naked function: no prologue.
                                    407 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  408 	lcall	0x0032
      000008 F5 82            [12]  409 	mov	dpl, a
      00000A 75 83 00         [24]  410 	mov	dph, #0
      00000D 22               [24]  411 	ret
                                    412 ;	walk.c:24: }
                                    413 ;	naked function: no epilogue.
                                    414 ;------------------------------------------------------------
                                    415 ;Allocation info for local variables in function 'int0'
                                    416 ;------------------------------------------------------------
                                    417 ;	walk.c:28: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    418 ;	-----------------------------------------
                                    419 ;	 function int0
                                    420 ;	-----------------------------------------
      00000E                        421 _int0:
                           00000F   422 	ar7 = 0x0f
                           00000E   423 	ar6 = 0x0e
                           00000D   424 	ar5 = 0x0d
                           00000C   425 	ar4 = 0x0c
                           00000B   426 	ar3 = 0x0b
                           00000A   427 	ar2 = 0x0a
                           000009   428 	ar1 = 0x09
                           000008   429 	ar0 = 0x08
      00000E C0 D0            [24]  430 	push	psw
      000010 75 D0 08         [24]  431 	mov	psw,#0x08
                                    432 ;	walk.c:29: i0 = 0u;
      000013 78r00            [12]  433 	mov	r0,#_i0
      000015 76 00            [12]  434 	mov	@r0,#0x00
                                    435 ;	walk.c:30: }
      000017 D0 D0            [24]  436 	pop	psw
      000019 32               [24]  437 	reti
                                    438 ;	eliminated unneeded push/pop dpl
                                    439 ;	eliminated unneeded push/pop dph
                                    440 ;	eliminated unneeded push/pop b
                                    441 ;	eliminated unneeded push/pop acc
                                    442 ;------------------------------------------------------------
                                    443 ;Allocation info for local variables in function 'reset'
                                    444 ;------------------------------------------------------------
                                    445 ;	walk.c:32: static void reset(void) __naked {
                                    446 ;	-----------------------------------------
                                    447 ;	 function reset
                                    448 ;	-----------------------------------------
      00001A                        449 _reset:
                                    450 ;	naked function: no prologue.
                                    451 ;	walk.c:35: __endasm;
      00001A 43 87 02         [24]  452 	orl	pcon, #2
                                    453 ;	walk.c:36: }
                                    454 ;	naked function: no epilogue.
                                    455 ;------------------------------------------------------------
                                    456 ;Allocation info for local variables in function 'bang'
                                    457 ;------------------------------------------------------------
                                    458 ;	walk.c:38: static void bang(void) {
                                    459 ;	-----------------------------------------
                                    460 ;	 function bang
                                    461 ;	-----------------------------------------
      00001D                        462 _bang:
                           000007   463 	ar7 = 0x07
                           000006   464 	ar6 = 0x06
                           000005   465 	ar5 = 0x05
                           000004   466 	ar4 = 0x04
                           000003   467 	ar3 = 0x03
                           000002   468 	ar2 = 0x02
                           000001   469 	ar1 = 0x01
                           000000   470 	ar0 = 0x00
                                    471 ;	walk.c:39: (void)puts("Memory error");
      00001D 90r00r00         [24]  472 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  473 	mov	b,#0x80
      000023 12r00r00         [24]  474 	lcall	_puts
                                    475 ;	walk.c:40: reset();
                                    476 ;	walk.c:42: return;
                                    477 ;	walk.c:43: }
      000026 02r00r1A         [24]  478 	ljmp	_reset
                                    479 ;------------------------------------------------------------
                                    480 ;Allocation info for local variables in function 'flashOE'
                                    481 ;------------------------------------------------------------
                                    482 ;mask                      Allocated to registers r7 
                                    483 ;------------------------------------------------------------
                                    484 ;	walk.c:85: static void flashOE(uint8_t mask) {
                                    485 ;	-----------------------------------------
                                    486 ;	 function flashOE
                                    487 ;	-----------------------------------------
      000029                        488 _flashOE:
      000029 AF 82            [24]  489 	mov	r7,dpl
                                    490 ;	walk.c:87: P1_7 = 0;
                                    491 ;	assignBit
      00002B C2 97            [12]  492 	clr	_P1_7
                                    493 ;	walk.c:88: OEreg = OE76;
      00002D 78r01            [12]  494 	mov	r0,#_OE76
      00002F 90 F0 06         [24]  495 	mov	dptr,#_OEreg
      000032 E6               [12]  496 	mov	a,@r0
      000033 F0               [24]  497 	movx	@dptr,a
                                    498 ;	walk.c:89: P1_7 = 1;
                                    499 ;	assignBit
      000034 D2 97            [12]  500 	setb	_P1_7
                                    501 ;	walk.c:90: OE76 ^= mask;
      000036 78r01            [12]  502 	mov	r0,#_OE76
      000038 EF               [12]  503 	mov	a,r7
      000039 66               [12]  504 	xrl	a,@r0
      00003A F6               [12]  505 	mov	@r0,a
                                    506 ;	walk.c:92: return;
                                    507 ;	walk.c:93: }
      00003B 22               [24]  508 	ret
                                    509 ;------------------------------------------------------------
                                    510 ;Allocation info for local variables in function 'update'
                                    511 ;------------------------------------------------------------
                                    512 ;cur                       Allocated to stack - _bp -5
                                    513 ;j                         Allocated to stack - _bp -6
                                    514 ;t                         Allocated to stack - _bp +1
                                    515 ;sloc0                     Allocated to stack - _bp +4
                                    516 ;sloc1                     Allocated to stack - _bp +6
                                    517 ;sloc2                     Allocated to stack - _bp +8
                                    518 ;------------------------------------------------------------
                                    519 ;	walk.c:95: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    520 ;	-----------------------------------------
                                    521 ;	 function update
                                    522 ;	-----------------------------------------
      00003C                        523 _update:
      00003C C0*00            [24]  524 	push	_bp
      00003E 85 81*00         [24]  525 	mov	_bp,sp
      000041 C0 82            [24]  526 	push	dpl
      000043 C0 83            [24]  527 	push	dph
      000045 C0 F0            [24]  528 	push	b
      000047 E5 81            [12]  529 	mov	a,sp
      000049 24 07            [12]  530 	add	a,#0x07
      00004B F5 81            [12]  531 	mov	sp,a
                                    532 ;	walk.c:96: t->r = cur->r + neigh[j].r;
      00004D E5*00            [12]  533 	mov	a,_bp
      00004F 24 FB            [12]  534 	add	a,#0xfb
      000051 F8               [12]  535 	mov	r0,a
      000052 86 02            [24]  536 	mov	ar2,@r0
      000054 08               [12]  537 	inc	r0
      000055 86 03            [24]  538 	mov	ar3,@r0
      000057 08               [12]  539 	inc	r0
      000058 86 04            [24]  540 	mov	ar4,@r0
      00005A 8A 82            [24]  541 	mov	dpl,r2
      00005C 8B 83            [24]  542 	mov	dph,r3
      00005E 8C F0            [24]  543 	mov	b,r4
      000060 E5*00            [12]  544 	mov	a,_bp
      000062 24 04            [12]  545 	add	a,#0x04
      000064 F8               [12]  546 	mov	r0,a
      000065 12r00r00         [24]  547 	lcall	__gptrget
      000068 F6               [12]  548 	mov	@r0,a
      000069 A3               [24]  549 	inc	dptr
      00006A 12r00r00         [24]  550 	lcall	__gptrget
      00006D 08               [12]  551 	inc	r0
      00006E F6               [12]  552 	mov	@r0,a
      00006F E5*00            [12]  553 	mov	a,_bp
      000071 24 FA            [12]  554 	add	a,#0xfa
      000073 F8               [12]  555 	mov	r0,a
      000074 E5*00            [12]  556 	mov	a,_bp
      000076 24 06            [12]  557 	add	a,#0x06
      000078 F9               [12]  558 	mov	r1,a
      000079 E6               [12]  559 	mov	a,@r0
      00007A 75 F0 04         [24]  560 	mov	b,#0x04
      00007D A4               [48]  561 	mul	ab
      00007E F7               [12]  562 	mov	@r1,a
      00007F 09               [12]  563 	inc	r1
      000080 A7 F0            [24]  564 	mov	@r1,b
      000082 E5*00            [12]  565 	mov	a,_bp
      000084 24 06            [12]  566 	add	a,#0x06
      000086 F8               [12]  567 	mov	r0,a
      000087 E6               [12]  568 	mov	a,@r0
      000088 24r00            [12]  569 	add	a,#_neigh
      00008A F5 82            [12]  570 	mov	dpl,a
      00008C 08               [12]  571 	inc	r0
      00008D E6               [12]  572 	mov	a,@r0
      00008E 34s00            [12]  573 	addc	a,#(_neigh >> 8)
      000090 F5 83            [12]  574 	mov	dph,a
      000092 E0               [24]  575 	movx	a,@dptr
      000093 FF               [12]  576 	mov	r7,a
      000094 A3               [24]  577 	inc	dptr
      000095 E0               [24]  578 	movx	a,@dptr
      000096 FE               [12]  579 	mov	r6,a
      000097 E5*00            [12]  580 	mov	a,_bp
      000099 24 04            [12]  581 	add	a,#0x04
      00009B F8               [12]  582 	mov	r0,a
      00009C EF               [12]  583 	mov	a,r7
      00009D 26               [12]  584 	add	a,@r0
      00009E FF               [12]  585 	mov	r7,a
      00009F EE               [12]  586 	mov	a,r6
      0000A0 08               [12]  587 	inc	r0
      0000A1 36               [12]  588 	addc	a,@r0
      0000A2 FE               [12]  589 	mov	r6,a
      0000A3 A8*00            [24]  590 	mov	r0,_bp
      0000A5 08               [12]  591 	inc	r0
      0000A6 86 82            [24]  592 	mov	dpl,@r0
      0000A8 08               [12]  593 	inc	r0
      0000A9 86 83            [24]  594 	mov	dph,@r0
      0000AB 08               [12]  595 	inc	r0
      0000AC 86 F0            [24]  596 	mov	b,@r0
      0000AE EF               [12]  597 	mov	a,r7
      0000AF 12r00r00         [24]  598 	lcall	__gptrput
      0000B2 A3               [24]  599 	inc	dptr
      0000B3 EE               [12]  600 	mov	a,r6
      0000B4 12r00r00         [24]  601 	lcall	__gptrput
                                    602 ;	walk.c:97: t->c = cur->c + neigh[j].c;
      0000B7 A8*00            [24]  603 	mov	r0,_bp
      0000B9 08               [12]  604 	inc	r0
      0000BA E5*00            [12]  605 	mov	a,_bp
      0000BC 24 08            [12]  606 	add	a,#0x08
      0000BE F9               [12]  607 	mov	r1,a
      0000BF 74 02            [12]  608 	mov	a,#0x02
      0000C1 26               [12]  609 	add	a,@r0
      0000C2 F7               [12]  610 	mov	@r1,a
      0000C3 E4               [12]  611 	clr	a
      0000C4 08               [12]  612 	inc	r0
      0000C5 36               [12]  613 	addc	a,@r0
      0000C6 09               [12]  614 	inc	r1
      0000C7 F7               [12]  615 	mov	@r1,a
      0000C8 08               [12]  616 	inc	r0
      0000C9 09               [12]  617 	inc	r1
      0000CA E6               [12]  618 	mov	a,@r0
      0000CB F7               [12]  619 	mov	@r1,a
      0000CC 74 02            [12]  620 	mov	a,#0x02
      0000CE 2A               [12]  621 	add	a,r2
      0000CF FA               [12]  622 	mov	r2,a
      0000D0 E4               [12]  623 	clr	a
      0000D1 3B               [12]  624 	addc	a,r3
      0000D2 FB               [12]  625 	mov	r3,a
      0000D3 8A 82            [24]  626 	mov	dpl,r2
      0000D5 8B 83            [24]  627 	mov	dph,r3
      0000D7 8C F0            [24]  628 	mov	b,r4
      0000D9 12r00r00         [24]  629 	lcall	__gptrget
      0000DC FA               [12]  630 	mov	r2,a
      0000DD A3               [24]  631 	inc	dptr
      0000DE 12r00r00         [24]  632 	lcall	__gptrget
      0000E1 FB               [12]  633 	mov	r3,a
      0000E2 E5*00            [12]  634 	mov	a,_bp
      0000E4 24 06            [12]  635 	add	a,#0x06
      0000E6 F8               [12]  636 	mov	r0,a
      0000E7 E6               [12]  637 	mov	a,@r0
      0000E8 24r00            [12]  638 	add	a,#_neigh
      0000EA FC               [12]  639 	mov	r4,a
      0000EB 08               [12]  640 	inc	r0
      0000EC E6               [12]  641 	mov	a,@r0
      0000ED 34s00            [12]  642 	addc	a,#(_neigh >> 8)
      0000EF FD               [12]  643 	mov	r5,a
      0000F0 8C 82            [24]  644 	mov	dpl,r4
      0000F2 8D 83            [24]  645 	mov	dph,r5
      0000F4 A3               [24]  646 	inc	dptr
      0000F5 A3               [24]  647 	inc	dptr
      0000F6 E0               [24]  648 	movx	a,@dptr
      0000F7 FC               [12]  649 	mov	r4,a
      0000F8 A3               [24]  650 	inc	dptr
      0000F9 E0               [24]  651 	movx	a,@dptr
      0000FA FD               [12]  652 	mov	r5,a
      0000FB EC               [12]  653 	mov	a,r4
      0000FC 2A               [12]  654 	add	a,r2
      0000FD FA               [12]  655 	mov	r2,a
      0000FE ED               [12]  656 	mov	a,r5
      0000FF 3B               [12]  657 	addc	a,r3
      000100 FB               [12]  658 	mov	r3,a
      000101 E5*00            [12]  659 	mov	a,_bp
      000103 24 08            [12]  660 	add	a,#0x08
      000105 F8               [12]  661 	mov	r0,a
      000106 86 82            [24]  662 	mov	dpl,@r0
      000108 08               [12]  663 	inc	r0
      000109 86 83            [24]  664 	mov	dph,@r0
      00010B 08               [12]  665 	inc	r0
      00010C 86 F0            [24]  666 	mov	b,@r0
      00010E EA               [12]  667 	mov	a,r2
      00010F 12r00r00         [24]  668 	lcall	__gptrput
      000112 A3               [24]  669 	inc	dptr
      000113 EB               [12]  670 	mov	a,r3
      000114 12r00r00         [24]  671 	lcall	__gptrput
                                    672 ;	walk.c:99: if (t->r < 0) t->r += ROWS;
      000117 A8*00            [24]  673 	mov	r0,_bp
      000119 08               [12]  674 	inc	r0
      00011A 86 82            [24]  675 	mov	dpl,@r0
      00011C 08               [12]  676 	inc	r0
      00011D 86 83            [24]  677 	mov	dph,@r0
      00011F 08               [12]  678 	inc	r0
      000120 86 F0            [24]  679 	mov	b,@r0
      000122 12r00r00         [24]  680 	lcall	__gptrget
      000125 FD               [12]  681 	mov	r5,a
      000126 A3               [24]  682 	inc	dptr
      000127 12r00r00         [24]  683 	lcall	__gptrget
      00012A FC               [12]  684 	mov	r4,a
      00012B EE               [12]  685 	mov	a,r6
      00012C 30 E7 1D         [24]  686 	jnb	acc.7,00104$
      00012F 74 30            [12]  687 	mov	a,#0x30
      000131 2D               [12]  688 	add	a,r5
      000132 FF               [12]  689 	mov	r7,a
      000133 E4               [12]  690 	clr	a
      000134 3C               [12]  691 	addc	a,r4
      000135 FE               [12]  692 	mov	r6,a
      000136 A8*00            [24]  693 	mov	r0,_bp
      000138 08               [12]  694 	inc	r0
      000139 86 82            [24]  695 	mov	dpl,@r0
      00013B 08               [12]  696 	inc	r0
      00013C 86 83            [24]  697 	mov	dph,@r0
      00013E 08               [12]  698 	inc	r0
      00013F 86 F0            [24]  699 	mov	b,@r0
      000141 EF               [12]  700 	mov	a,r7
      000142 12r00r00         [24]  701 	lcall	__gptrput
      000145 A3               [24]  702 	inc	dptr
      000146 EE               [12]  703 	mov	a,r6
      000147 12r00r00         [24]  704 	lcall	__gptrput
      00014A 80 27            [24]  705 	sjmp	00105$
      00014C                        706 00104$:
                                    707 ;	walk.c:100: else if (t->r >= ROWS) t->r -= ROWS;
      00014C C3               [12]  708 	clr	c
      00014D ED               [12]  709 	mov	a,r5
      00014E 94 30            [12]  710 	subb	a,#0x30
      000150 EC               [12]  711 	mov	a,r4
      000151 64 80            [12]  712 	xrl	a,#0x80
      000153 94 80            [12]  713 	subb	a,#0x80
      000155 40 1C            [24]  714 	jc	00105$
      000157 ED               [12]  715 	mov	a,r5
      000158 24 D0            [12]  716 	add	a,#0xd0
      00015A FD               [12]  717 	mov	r5,a
      00015B EC               [12]  718 	mov	a,r4
      00015C 34 FF            [12]  719 	addc	a,#0xff
      00015E FC               [12]  720 	mov	r4,a
      00015F A8*00            [24]  721 	mov	r0,_bp
      000161 08               [12]  722 	inc	r0
      000162 86 82            [24]  723 	mov	dpl,@r0
      000164 08               [12]  724 	inc	r0
      000165 86 83            [24]  725 	mov	dph,@r0
      000167 08               [12]  726 	inc	r0
      000168 86 F0            [24]  727 	mov	b,@r0
      00016A ED               [12]  728 	mov	a,r5
      00016B 12r00r00         [24]  729 	lcall	__gptrput
      00016E A3               [24]  730 	inc	dptr
      00016F EC               [12]  731 	mov	a,r4
      000170 12r00r00         [24]  732 	lcall	__gptrput
      000173                        733 00105$:
                                    734 ;	walk.c:101: if (t->c < 0) t->c += COLS;
      000173 E5*00            [12]  735 	mov	a,_bp
      000175 24 08            [12]  736 	add	a,#0x08
      000177 F8               [12]  737 	mov	r0,a
      000178 86 82            [24]  738 	mov	dpl,@r0
      00017A 08               [12]  739 	inc	r0
      00017B 86 83            [24]  740 	mov	dph,@r0
      00017D 08               [12]  741 	inc	r0
      00017E 86 F0            [24]  742 	mov	b,@r0
      000180 12r00r00         [24]  743 	lcall	__gptrget
      000183 A3               [24]  744 	inc	dptr
      000184 12r00r00         [24]  745 	lcall	__gptrget
      000187 30 E7 35         [24]  746 	jnb	acc.7,00109$
      00018A E5*00            [12]  747 	mov	a,_bp
      00018C 24 08            [12]  748 	add	a,#0x08
      00018E F8               [12]  749 	mov	r0,a
      00018F 86 82            [24]  750 	mov	dpl,@r0
      000191 08               [12]  751 	inc	r0
      000192 86 83            [24]  752 	mov	dph,@r0
      000194 08               [12]  753 	inc	r0
      000195 86 F0            [24]  754 	mov	b,@r0
      000197 12r00r00         [24]  755 	lcall	__gptrget
      00019A FE               [12]  756 	mov	r6,a
      00019B A3               [24]  757 	inc	dptr
      00019C 12r00r00         [24]  758 	lcall	__gptrget
      00019F FF               [12]  759 	mov	r7,a
      0001A0 74 C9            [12]  760 	mov	a,#0xc9
      0001A2 2E               [12]  761 	add	a,r6
      0001A3 FE               [12]  762 	mov	r6,a
      0001A4 E4               [12]  763 	clr	a
      0001A5 3F               [12]  764 	addc	a,r7
      0001A6 FF               [12]  765 	mov	r7,a
      0001A7 E5*00            [12]  766 	mov	a,_bp
      0001A9 24 08            [12]  767 	add	a,#0x08
      0001AB F8               [12]  768 	mov	r0,a
      0001AC 86 82            [24]  769 	mov	dpl,@r0
      0001AE 08               [12]  770 	inc	r0
      0001AF 86 83            [24]  771 	mov	dph,@r0
      0001B1 08               [12]  772 	inc	r0
      0001B2 86 F0            [24]  773 	mov	b,@r0
      0001B4 EE               [12]  774 	mov	a,r6
      0001B5 12r00r00         [24]  775 	lcall	__gptrput
      0001B8 A3               [24]  776 	inc	dptr
      0001B9 EF               [12]  777 	mov	a,r7
      0001BA 12r00r00         [24]  778 	lcall	__gptrput
      0001BD 80 55            [24]  779 	sjmp	00110$
      0001BF                        780 00109$:
                                    781 ;	walk.c:102: else if (t->c >= COLS) t->c -= COLS;
      0001BF E5*00            [12]  782 	mov	a,_bp
      0001C1 24 08            [12]  783 	add	a,#0x08
      0001C3 F8               [12]  784 	mov	r0,a
      0001C4 86 82            [24]  785 	mov	dpl,@r0
      0001C6 08               [12]  786 	inc	r0
      0001C7 86 83            [24]  787 	mov	dph,@r0
      0001C9 08               [12]  788 	inc	r0
      0001CA 86 F0            [24]  789 	mov	b,@r0
      0001CC 12r00r00         [24]  790 	lcall	__gptrget
      0001CF FE               [12]  791 	mov	r6,a
      0001D0 A3               [24]  792 	inc	dptr
      0001D1 12r00r00         [24]  793 	lcall	__gptrget
      0001D4 FF               [12]  794 	mov	r7,a
      0001D5 C3               [12]  795 	clr	c
      0001D6 EE               [12]  796 	mov	a,r6
      0001D7 94 C9            [12]  797 	subb	a,#0xc9
      0001D9 EF               [12]  798 	mov	a,r7
      0001DA 64 80            [12]  799 	xrl	a,#0x80
      0001DC 94 80            [12]  800 	subb	a,#0x80
      0001DE 40 34            [24]  801 	jc	00110$
      0001E0 E5*00            [12]  802 	mov	a,_bp
      0001E2 24 08            [12]  803 	add	a,#0x08
      0001E4 F8               [12]  804 	mov	r0,a
      0001E5 86 82            [24]  805 	mov	dpl,@r0
      0001E7 08               [12]  806 	inc	r0
      0001E8 86 83            [24]  807 	mov	dph,@r0
      0001EA 08               [12]  808 	inc	r0
      0001EB 86 F0            [24]  809 	mov	b,@r0
      0001ED 12r00r00         [24]  810 	lcall	__gptrget
      0001F0 FE               [12]  811 	mov	r6,a
      0001F1 A3               [24]  812 	inc	dptr
      0001F2 12r00r00         [24]  813 	lcall	__gptrget
      0001F5 FF               [12]  814 	mov	r7,a
      0001F6 EE               [12]  815 	mov	a,r6
      0001F7 24 37            [12]  816 	add	a,#0x37
      0001F9 FE               [12]  817 	mov	r6,a
      0001FA EF               [12]  818 	mov	a,r7
      0001FB 34 FF            [12]  819 	addc	a,#0xff
      0001FD FF               [12]  820 	mov	r7,a
      0001FE E5*00            [12]  821 	mov	a,_bp
      000200 24 08            [12]  822 	add	a,#0x08
      000202 F8               [12]  823 	mov	r0,a
      000203 86 82            [24]  824 	mov	dpl,@r0
      000205 08               [12]  825 	inc	r0
      000206 86 83            [24]  826 	mov	dph,@r0
      000208 08               [12]  827 	inc	r0
      000209 86 F0            [24]  828 	mov	b,@r0
      00020B EE               [12]  829 	mov	a,r6
      00020C 12r00r00         [24]  830 	lcall	__gptrput
      00020F A3               [24]  831 	inc	dptr
      000210 EF               [12]  832 	mov	a,r7
      000211 12r00r00         [24]  833 	lcall	__gptrput
      000214                        834 00110$:
                                    835 ;	walk.c:104: if (g[t->r][t->c] == 0xaau) return 0u;
      000214 A8*00            [24]  836 	mov	r0,_bp
      000216 08               [12]  837 	inc	r0
      000217 86 82            [24]  838 	mov	dpl,@r0
      000219 08               [12]  839 	inc	r0
      00021A 86 83            [24]  840 	mov	dph,@r0
      00021C 08               [12]  841 	inc	r0
      00021D 86 F0            [24]  842 	mov	b,@r0
      00021F 12r00r00         [24]  843 	lcall	__gptrget
      000222 FE               [12]  844 	mov	r6,a
      000223 A3               [24]  845 	inc	dptr
      000224 12r00r00         [24]  846 	lcall	__gptrget
      000227 FF               [12]  847 	mov	r7,a
      000228 C0 06            [24]  848 	push	ar6
      00022A C0 07            [24]  849 	push	ar7
      00022C 90 00 C9         [24]  850 	mov	dptr,#0x00c9
      00022F 12r00r00         [24]  851 	lcall	__mulint
      000232 AE 82            [24]  852 	mov	r6,dpl
      000234 AF 83            [24]  853 	mov	r7,dph
      000236 15 81            [12]  854 	dec	sp
      000238 15 81            [12]  855 	dec	sp
      00023A EE               [12]  856 	mov	a,r6
      00023B 24r00            [12]  857 	add	a,#_g
      00023D FE               [12]  858 	mov	r6,a
      00023E EF               [12]  859 	mov	a,r7
      00023F 34s00            [12]  860 	addc	a,#(_g >> 8)
      000241 FF               [12]  861 	mov	r7,a
      000242 E5*00            [12]  862 	mov	a,_bp
      000244 24 08            [12]  863 	add	a,#0x08
      000246 F8               [12]  864 	mov	r0,a
      000247 86 82            [24]  865 	mov	dpl,@r0
      000249 08               [12]  866 	inc	r0
      00024A 86 83            [24]  867 	mov	dph,@r0
      00024C 08               [12]  868 	inc	r0
      00024D 86 F0            [24]  869 	mov	b,@r0
      00024F 12r00r00         [24]  870 	lcall	__gptrget
      000252 FC               [12]  871 	mov	r4,a
      000253 A3               [24]  872 	inc	dptr
      000254 12r00r00         [24]  873 	lcall	__gptrget
      000257 FD               [12]  874 	mov	r5,a
      000258 EC               [12]  875 	mov	a,r4
      000259 2E               [12]  876 	add	a,r6
      00025A F5 82            [12]  877 	mov	dpl,a
      00025C ED               [12]  878 	mov	a,r5
      00025D 3F               [12]  879 	addc	a,r7
      00025E F5 83            [12]  880 	mov	dph,a
      000260 E0               [24]  881 	movx	a,@dptr
      000261 FF               [12]  882 	mov	r7,a
      000262 BF AA 05         [24]  883 	cjne	r7,#0xaa,00114$
      000265 75 82 00         [24]  884 	mov	dpl,#0x00
      000268 80 59            [24]  885 	sjmp	00116$
      00026A                        886 00114$:
                                    887 ;	walk.c:105: else if (g[t->r][t->c] != 0x55u) bang();
      00026A A8*00            [24]  888 	mov	r0,_bp
      00026C 08               [12]  889 	inc	r0
      00026D 86 82            [24]  890 	mov	dpl,@r0
      00026F 08               [12]  891 	inc	r0
      000270 86 83            [24]  892 	mov	dph,@r0
      000272 08               [12]  893 	inc	r0
      000273 86 F0            [24]  894 	mov	b,@r0
      000275 12r00r00         [24]  895 	lcall	__gptrget
      000278 FE               [12]  896 	mov	r6,a
      000279 A3               [24]  897 	inc	dptr
      00027A 12r00r00         [24]  898 	lcall	__gptrget
      00027D FF               [12]  899 	mov	r7,a
      00027E C0 06            [24]  900 	push	ar6
      000280 C0 07            [24]  901 	push	ar7
      000282 90 00 C9         [24]  902 	mov	dptr,#0x00c9
      000285 12r00r00         [24]  903 	lcall	__mulint
      000288 AE 82            [24]  904 	mov	r6,dpl
      00028A AF 83            [24]  905 	mov	r7,dph
      00028C 15 81            [12]  906 	dec	sp
      00028E 15 81            [12]  907 	dec	sp
      000290 EE               [12]  908 	mov	a,r6
      000291 24r00            [12]  909 	add	a,#_g
      000293 FE               [12]  910 	mov	r6,a
      000294 EF               [12]  911 	mov	a,r7
      000295 34s00            [12]  912 	addc	a,#(_g >> 8)
      000297 FF               [12]  913 	mov	r7,a
      000298 E5*00            [12]  914 	mov	a,_bp
      00029A 24 08            [12]  915 	add	a,#0x08
      00029C F8               [12]  916 	mov	r0,a
      00029D 86 82            [24]  917 	mov	dpl,@r0
      00029F 08               [12]  918 	inc	r0
      0002A0 86 83            [24]  919 	mov	dph,@r0
      0002A2 08               [12]  920 	inc	r0
      0002A3 86 F0            [24]  921 	mov	b,@r0
      0002A5 12r00r00         [24]  922 	lcall	__gptrget
      0002A8 FC               [12]  923 	mov	r4,a
      0002A9 A3               [24]  924 	inc	dptr
      0002AA 12r00r00         [24]  925 	lcall	__gptrget
      0002AD FD               [12]  926 	mov	r5,a
      0002AE EC               [12]  927 	mov	a,r4
      0002AF 2E               [12]  928 	add	a,r6
      0002B0 F5 82            [12]  929 	mov	dpl,a
      0002B2 ED               [12]  930 	mov	a,r5
      0002B3 3F               [12]  931 	addc	a,r7
      0002B4 F5 83            [12]  932 	mov	dph,a
      0002B6 E0               [24]  933 	movx	a,@dptr
      0002B7 FF               [12]  934 	mov	r7,a
      0002B8 BF 55 02         [24]  935 	cjne	r7,#0x55,00148$
      0002BB 80 03            [24]  936 	sjmp	00115$
      0002BD                        937 00148$:
      0002BD 12r00r1D         [24]  938 	lcall	_bang
      0002C0                        939 00115$:
                                    940 ;	walk.c:107: return 1u;
      0002C0 75 82 01         [24]  941 	mov	dpl,#0x01
      0002C3                        942 00116$:
                                    943 ;	walk.c:108: }
      0002C3 85*00 81         [24]  944 	mov	sp,_bp
      0002C6 D0*00            [24]  945 	pop	_bp
      0002C8 22               [24]  946 	ret
                                    947 ;------------------------------------------------------------
                                    948 ;Allocation info for local variables in function 'walk'
                                    949 ;------------------------------------------------------------
                                    950 ;nstart                    Allocated to registers 
                                    951 ;cur                       Allocated to stack - _bp +10
                                    952 ;t                         Allocated to stack - _bp +14
                                    953 ;j                         Allocated to stack - _bp +18
                                    954 ;f                         Allocated to registers r3 
                                    955 ;sloc0                     Allocated to stack - _bp +1
                                    956 ;sloc1                     Allocated to stack - _bp +2
                                    957 ;sloc2                     Allocated to stack - _bp +3
                                    958 ;sloc3                     Allocated to stack - _bp +17
                                    959 ;sloc4                     Allocated to stack - _bp +4
                                    960 ;sloc5                     Allocated to stack - _bp +5
                                    961 ;sloc6                     Allocated to stack - _bp +6
                                    962 ;sloc7                     Allocated to stack - _bp +7
                                    963 ;------------------------------------------------------------
                                    964 ;	walk.c:110: static void walk(struct node *nstart) {
                                    965 ;	-----------------------------------------
                                    966 ;	 function walk
                                    967 ;	-----------------------------------------
      0002C9                        968 _walk:
      0002C9 C0*00            [24]  969 	push	_bp
      0002CB E5 81            [12]  970 	mov	a,sp
      0002CD F5*00            [12]  971 	mov	_bp,a
      0002CF 24 12            [12]  972 	add	a,#0x12
      0002D1 F5 81            [12]  973 	mov	sp,a
      0002D3 AD 82            [24]  974 	mov	r5,dpl
      0002D5 AE 83            [24]  975 	mov	r6,dph
      0002D7 AF F0            [24]  976 	mov	r7,b
                                    977 ;	walk.c:114: cur = *nstart;
      0002D9 E5*00            [12]  978 	mov	a,_bp
      0002DB 24 0A            [12]  979 	add	a,#0x0a
      0002DD F9               [12]  980 	mov	r1,a
      0002DE FA               [12]  981 	mov	r2,a
      0002DF 7B 00            [12]  982 	mov	r3,#0x00
      0002E1 7C 40            [12]  983 	mov	r4,#0x40
      0002E3 C0 01            [24]  984 	push	ar1
      0002E5 74 04            [12]  985 	mov	a,#0x04
      0002E7 C0 E0            [24]  986 	push	acc
      0002E9 E4               [12]  987 	clr	a
      0002EA C0 E0            [24]  988 	push	acc
      0002EC C0 05            [24]  989 	push	ar5
      0002EE C0 06            [24]  990 	push	ar6
      0002F0 C0 07            [24]  991 	push	ar7
      0002F2 8A 82            [24]  992 	mov	dpl,r2
      0002F4 8B 83            [24]  993 	mov	dph,r3
      0002F6 8C F0            [24]  994 	mov	b,r4
      0002F8 12r00r00         [24]  995 	lcall	___memcpy
      0002FB E5 81            [12]  996 	mov	a,sp
      0002FD 24 FB            [12]  997 	add	a,#0xfb
      0002FF F5 81            [12]  998 	mov	sp,a
      000301 D0 01            [24]  999 	pop	ar1
                                   1000 ;	walk.c:116: process:
      000303 E5*00            [12] 1001 	mov	a,_bp
      000305 24 06            [12] 1002 	add	a,#0x06
      000307 F8               [12] 1003 	mov	r0,a
      000308 A6 01            [24] 1004 	mov	@r0,ar1
      00030A E5*00            [12] 1005 	mov	a,_bp
      00030C 24 0E            [12] 1006 	add	a,#0x0e
      00030E FE               [12] 1007 	mov	r6,a
      00030F E5*00            [12] 1008 	mov	a,_bp
      000311 24 03            [12] 1009 	add	a,#0x03
      000313 F8               [12] 1010 	mov	r0,a
      000314 A6 01            [24] 1011 	mov	@r0,ar1
      000316 E5*00            [12] 1012 	mov	a,_bp
      000318 24 05            [12] 1013 	add	a,#0x05
      00031A F8               [12] 1014 	mov	r0,a
      00031B A6 01            [24] 1015 	mov	@r0,ar1
      00031D E5*00            [12] 1016 	mov	a,_bp
      00031F 24 04            [12] 1017 	add	a,#0x04
      000321 F8               [12] 1018 	mov	r0,a
      000322 A6 06            [24] 1019 	mov	@r0,ar6
      000324 89 02            [24] 1020 	mov	ar2,r1
      000326 A8*00            [24] 1021 	mov	r0,_bp
      000328 08               [12] 1022 	inc	r0
      000329 A6 06            [24] 1023 	mov	@r0,ar6
      00032B A8*00            [24] 1024 	mov	r0,_bp
      00032D 08               [12] 1025 	inc	r0
      00032E 08               [12] 1026 	inc	r0
      00032F A6 01            [24] 1027 	mov	@r0,ar1
      000331 74 02            [12] 1028 	mov	a,#0x02
      000333 29               [12] 1029 	add	a,r1
      000334 F8               [12] 1030 	mov	r0,a
      000335                       1031 00101$:
                                   1032 ;	walk.c:117: g[cur.r][cur.c] = 0xaau;
      000335 C0 02            [24] 1033 	push	ar2
      000337 87 02            [24] 1034 	mov	ar2,@r1
      000339 09               [12] 1035 	inc	r1
      00033A 87 05            [24] 1036 	mov	ar5,@r1
      00033C 19               [12] 1037 	dec	r1
      00033D C0 06            [24] 1038 	push	ar6
      00033F C0 01            [24] 1039 	push	ar1
      000341 C0 00            [24] 1040 	push	ar0
      000343 C0 02            [24] 1041 	push	ar2
      000345 C0 05            [24] 1042 	push	ar5
      000347 90 00 C9         [24] 1043 	mov	dptr,#0x00c9
      00034A 12r00r00         [24] 1044 	lcall	__mulint
      00034D AA 82            [24] 1045 	mov	r2,dpl
      00034F AD 83            [24] 1046 	mov	r5,dph
      000351 15 81            [12] 1047 	dec	sp
      000353 15 81            [12] 1048 	dec	sp
      000355 D0 00            [24] 1049 	pop	ar0
      000357 D0 01            [24] 1050 	pop	ar1
      000359 EA               [12] 1051 	mov	a,r2
      00035A 24r00            [12] 1052 	add	a,#_g
      00035C FF               [12] 1053 	mov	r7,a
      00035D ED               [12] 1054 	mov	a,r5
      00035E 34s00            [12] 1055 	addc	a,#(_g >> 8)
      000360 FC               [12] 1056 	mov	r4,a
      000361 86 02            [24] 1057 	mov	ar2,@r0
      000363 08               [12] 1058 	inc	r0
      000364 86 05            [24] 1059 	mov	ar5,@r0
      000366 18               [12] 1060 	dec	r0
      000367 EA               [12] 1061 	mov	a,r2
      000368 2F               [12] 1062 	add	a,r7
      000369 F5 82            [12] 1063 	mov	dpl,a
      00036B ED               [12] 1064 	mov	a,r5
      00036C 3C               [12] 1065 	addc	a,r4
      00036D F5 83            [12] 1066 	mov	dph,a
      00036F 74 AA            [12] 1067 	mov	a,#0xaa
      000371 F0               [24] 1068 	movx	@dptr,a
                                   1069 ;	walk.c:119: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000372 86 02            [24] 1070 	mov	ar2,@r0
      000374 08               [12] 1071 	inc	r0
      000375 86 05            [24] 1072 	mov	ar5,@r0
      000377 18               [12] 1073 	dec	r0
      000378 74 01            [12] 1074 	mov	a,#0x01
      00037A 2A               [12] 1075 	add	a,r2
      00037B FF               [12] 1076 	mov	r7,a
      00037C E4               [12] 1077 	clr	a
      00037D 3D               [12] 1078 	addc	a,r5
      00037E FC               [12] 1079 	mov	r4,a
      00037F 87 02            [24] 1080 	mov	ar2,@r1
      000381 09               [12] 1081 	inc	r1
      000382 87 05            [24] 1082 	mov	ar5,@r1
      000384 19               [12] 1083 	dec	r1
      000385 74 04            [12] 1084 	mov	a,#0x04
      000387 2A               [12] 1085 	add	a,r2
      000388 FA               [12] 1086 	mov	r2,a
      000389 E4               [12] 1087 	clr	a
      00038A 3D               [12] 1088 	addc	a,r5
      00038B FD               [12] 1089 	mov	r5,a
      00038C C0 02            [24] 1090 	push	ar2
      00038E C0 01            [24] 1091 	push	ar1
      000390 C0 00            [24] 1092 	push	ar0
      000392 C0 07            [24] 1093 	push	ar7
      000394 C0 04            [24] 1094 	push	ar4
      000396 C0 02            [24] 1095 	push	ar2
      000398 C0 05            [24] 1096 	push	ar5
      00039A 74r0D            [12] 1097 	mov	a,#___str_1
      00039C C0 E0            [24] 1098 	push	acc
      00039E 74s00            [12] 1099 	mov	a,#(___str_1 >> 8)
      0003A0 C0 E0            [24] 1100 	push	acc
      0003A2 74 80            [12] 1101 	mov	a,#0x80
      0003A4 C0 E0            [24] 1102 	push	acc
      0003A6 12r00r00         [24] 1103 	lcall	_printf
      0003A9 E5 81            [12] 1104 	mov	a,sp
      0003AB 24 F9            [12] 1105 	add	a,#0xf9
      0003AD F5 81            [12] 1106 	mov	sp,a
                                   1107 ;	walk.c:120: flashOE(OE76_MASK7);
      0003AF 75 82 80         [24] 1108 	mov	dpl,#0x80
      0003B2 12r00r29         [24] 1109 	lcall	_flashOE
      0003B5 D0 00            [24] 1110 	pop	ar0
      0003B7 D0 01            [24] 1111 	pop	ar1
      0003B9 D0 02            [24] 1112 	pop	ar2
      0003BB D0 06            [24] 1113 	pop	ar6
                                   1114 ;	walk.c:145: return;
      0003BD D0 02            [24] 1115 	pop	ar2
                                   1116 ;	walk.c:122: next:
      0003BF                       1117 00102$:
                                   1118 ;	walk.c:123: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003BF C0 02            [24] 1119 	push	ar2
      0003C1 86 07            [24] 1120 	mov	ar7,@r0
      0003C3 08               [12] 1121 	inc	r0
      0003C4 86 04            [24] 1122 	mov	ar4,@r0
      0003C6 18               [12] 1123 	dec	r0
      0003C7 87 02            [24] 1124 	mov	ar2,@r1
      0003C9 09               [12] 1125 	inc	r1
      0003CA 87 05            [24] 1126 	mov	ar5,@r1
      0003CC 19               [12] 1127 	dec	r1
      0003CD C0 06            [24] 1128 	push	ar6
      0003CF C0 02            [24] 1129 	push	ar2
      0003D1 C0 01            [24] 1130 	push	ar1
      0003D3 C0 00            [24] 1131 	push	ar0
      0003D5 C0 07            [24] 1132 	push	ar7
      0003D7 C0 04            [24] 1133 	push	ar4
      0003D9 C0 02            [24] 1134 	push	ar2
      0003DB C0 05            [24] 1135 	push	ar5
      0003DD 90rBCr70         [24] 1136 	mov	dptr,#_sp
      0003E0 E0               [24] 1137 	movx	a,@dptr
      0003E1 C0 E0            [24] 1138 	push	acc
      0003E3 A3               [24] 1139 	inc	dptr
      0003E4 E0               [24] 1140 	movx	a,@dptr
      0003E5 C0 E0            [24] 1141 	push	acc
      0003E7 74r17            [12] 1142 	mov	a,#___str_2
      0003E9 C0 E0            [24] 1143 	push	acc
      0003EB 74s00            [12] 1144 	mov	a,#(___str_2 >> 8)
      0003ED C0 E0            [24] 1145 	push	acc
      0003EF 74 80            [12] 1146 	mov	a,#0x80
      0003F1 C0 E0            [24] 1147 	push	acc
      0003F3 12r00r00         [24] 1148 	lcall	_printf
      0003F6 E5 81            [12] 1149 	mov	a,sp
      0003F8 24 F7            [12] 1150 	add	a,#0xf7
      0003FA F5 81            [12] 1151 	mov	sp,a
      0003FC D0 00            [24] 1152 	pop	ar0
      0003FE D0 01            [24] 1153 	pop	ar1
      000400 D0 02            [24] 1154 	pop	ar2
      000402 D0 06            [24] 1155 	pop	ar6
                                   1156 ;	walk.c:125: for (j = 0u, f = 0u; j < NMAX; j++) {
      000404 7B 00            [12] 1157 	mov	r3,#0x00
      000406 C0 00            [24] 1158 	push	ar0
      000408 E5*00            [12] 1159 	mov	a,_bp
      00040A 24 12            [12] 1160 	add	a,#0x12
      00040C F8               [12] 1161 	mov	r0,a
      00040D 76 00            [12] 1162 	mov	@r0,#0x00
      00040F D0 00            [24] 1163 	pop	ar0
                                   1164 ;	walk.c:145: return;
      000411 D0 02            [24] 1165 	pop	ar2
                                   1166 ;	walk.c:125: for (j = 0u, f = 0u; j < NMAX; j++) {
      000413                       1167 00119$:
      000413 C0 00            [24] 1168 	push	ar0
      000415 E5*00            [12] 1169 	mov	a,_bp
      000417 24 12            [12] 1170 	add	a,#0x12
      000419 F8               [12] 1171 	mov	r0,a
      00041A B6 10 00         [24] 1172 	cjne	@r0,#0x10,00159$
      00041D                       1173 00159$:
      00041D D0 00            [24] 1174 	pop	ar0
      00041F 50 7A            [24] 1175 	jnc	00106$
                                   1176 ;	walk.c:126: if (!update(&t, &cur, j)) continue;
      000421 C0 02            [24] 1177 	push	ar2
      000423 C0 00            [24] 1178 	push	ar0
      000425 E5*00            [12] 1179 	mov	a,_bp
      000427 24 06            [12] 1180 	add	a,#0x06
      000429 F8               [12] 1181 	mov	r0,a
      00042A C0 01            [24] 1182 	push	ar1
      00042C E5*00            [12] 1183 	mov	a,_bp
      00042E 24 07            [12] 1184 	add	a,#0x07
      000430 F9               [12] 1185 	mov	r1,a
      000431 E6               [12] 1186 	mov	a,@r0
      000432 F7               [12] 1187 	mov	@r1,a
      000433 09               [12] 1188 	inc	r1
      000434 77 00            [12] 1189 	mov	@r1,#0x00
      000436 09               [12] 1190 	inc	r1
      000437 77 40            [12] 1191 	mov	@r1,#0x40
      000439 D0 01            [24] 1192 	pop	ar1
      00043B D0 00            [24] 1193 	pop	ar0
      00043D 8E 04            [24] 1194 	mov	ar4,r6
      00043F 7D 00            [12] 1195 	mov	r5,#0x00
      000441 7F 40            [12] 1196 	mov	r7,#0x40
      000443 C0 06            [24] 1197 	push	ar6
      000445 C0 03            [24] 1198 	push	ar3
      000447 C0 02            [24] 1199 	push	ar2
      000449 C0 01            [24] 1200 	push	ar1
      00044B C0 00            [24] 1201 	push	ar0
      00044D 85 00 F0         [24] 1202 	mov	b,ar0
      000450 E5*00            [12] 1203 	mov	a,_bp
      000452 24 12            [12] 1204 	add	a,#0x12
      000454 F8               [12] 1205 	mov	r0,a
      000455 E6               [12] 1206 	mov	a,@r0
      000456 C0 E0            [24] 1207 	push	acc
      000458 A8 F0            [24] 1208 	mov	r0,b
      00045A 85 00 F0         [24] 1209 	mov	b,ar0
      00045D E5*00            [12] 1210 	mov	a,_bp
      00045F 24 07            [12] 1211 	add	a,#0x07
      000461 F8               [12] 1212 	mov	r0,a
      000462 E6               [12] 1213 	mov	a,@r0
      000463 C0 E0            [24] 1214 	push	acc
      000465 08               [12] 1215 	inc	r0
      000466 E6               [12] 1216 	mov	a,@r0
      000467 C0 E0            [24] 1217 	push	acc
      000469 08               [12] 1218 	inc	r0
      00046A E6               [12] 1219 	mov	a,@r0
      00046B C0 E0            [24] 1220 	push	acc
      00046D 8C 82            [24] 1221 	mov	dpl,r4
      00046F 8D 83            [24] 1222 	mov	dph,r5
      000471 8F F0            [24] 1223 	mov	b,r7
      000473 12r00r3C         [24] 1224 	lcall	_update
      000476 AF 82            [24] 1225 	mov	r7,dpl
      000478 E5 81            [12] 1226 	mov	a,sp
      00047A 24 FC            [12] 1227 	add	a,#0xfc
      00047C F5 81            [12] 1228 	mov	sp,a
      00047E D0 00            [24] 1229 	pop	ar0
      000480 D0 01            [24] 1230 	pop	ar1
      000482 D0 02            [24] 1231 	pop	ar2
      000484 D0 03            [24] 1232 	pop	ar3
      000486 D0 06            [24] 1233 	pop	ar6
      000488 D0 02            [24] 1234 	pop	ar2
      00048A EF               [12] 1235 	mov	a,r7
      00048B 60 01            [24] 1236 	jz	00105$
                                   1237 ;	walk.c:127: f++;
      00048D 0B               [12] 1238 	inc	r3
      00048E                       1239 00105$:
                                   1240 ;	walk.c:125: for (j = 0u, f = 0u; j < NMAX; j++) {
      00048E C0 00            [24] 1241 	push	ar0
      000490 E5*00            [12] 1242 	mov	a,_bp
      000492 24 12            [12] 1243 	add	a,#0x12
      000494 F8               [12] 1244 	mov	r0,a
      000495 06               [12] 1245 	inc	@r0
      000496 D0 00            [24] 1246 	pop	ar0
      000498 02r04r13         [24] 1247 	ljmp	00119$
      00049B                       1248 00106$:
                                   1249 ;	walk.c:130: if (f) {
      00049B EB               [12] 1250 	mov	a,r3
      00049C 70 03            [24] 1251 	jnz	00162$
      00049E 02r05rB5         [24] 1252 	ljmp	00115$
      0004A1                       1253 00162$:
                                   1254 ;	walk.c:131: while (1) {
      0004A1                       1255 00112$:
                                   1256 ;	walk.c:132: j = (uint8_t)(rand() % NMAX);
      0004A1 C0 02            [24] 1257 	push	ar2
      0004A3 C0 06            [24] 1258 	push	ar6
      0004A5 C0 02            [24] 1259 	push	ar2
      0004A7 C0 01            [24] 1260 	push	ar1
      0004A9 C0 00            [24] 1261 	push	ar0
      0004AB 12r00r00         [24] 1262 	lcall	_rand
      0004AE AD 82            [24] 1263 	mov	r5,dpl
      0004B0 D0 00            [24] 1264 	pop	ar0
      0004B2 D0 01            [24] 1265 	pop	ar1
      0004B4 D0 02            [24] 1266 	pop	ar2
      0004B6 D0 06            [24] 1267 	pop	ar6
      0004B8 53 05 0F         [24] 1268 	anl	ar5,#0x0f
      0004BB 8D 04            [24] 1269 	mov	ar4,r5
                                   1270 ;	walk.c:133: if (!update(&t, &cur, j)) continue;
      0004BD C0 00            [24] 1271 	push	ar0
      0004BF E5*00            [12] 1272 	mov	a,_bp
      0004C1 24 05            [12] 1273 	add	a,#0x05
      0004C3 F8               [12] 1274 	mov	r0,a
      0004C4 C0 01            [24] 1275 	push	ar1
      0004C6 E5*00            [12] 1276 	mov	a,_bp
      0004C8 24 07            [12] 1277 	add	a,#0x07
      0004CA F9               [12] 1278 	mov	r1,a
      0004CB E6               [12] 1279 	mov	a,@r0
      0004CC F7               [12] 1280 	mov	@r1,a
      0004CD 09               [12] 1281 	inc	r1
      0004CE 77 00            [12] 1282 	mov	@r1,#0x00
      0004D0 09               [12] 1283 	inc	r1
      0004D1 77 40            [12] 1284 	mov	@r1,#0x40
      0004D3 D0 01            [24] 1285 	pop	ar1
      0004D5 E5*00            [12] 1286 	mov	a,_bp
      0004D7 24 04            [12] 1287 	add	a,#0x04
      0004D9 F8               [12] 1288 	mov	r0,a
      0004DA 86 02            [24] 1289 	mov	ar2,@r0
      0004DC 7D 00            [12] 1290 	mov	r5,#0x00
      0004DE 7F 40            [12] 1291 	mov	r7,#0x40
      0004E0 D0 00            [24] 1292 	pop	ar0
      0004E2 C0 06            [24] 1293 	push	ar6
      0004E4 C0 02            [24] 1294 	push	ar2
      0004E6 C0 01            [24] 1295 	push	ar1
      0004E8 C0 00            [24] 1296 	push	ar0
      0004EA C0 04            [24] 1297 	push	ar4
      0004EC 85 00 F0         [24] 1298 	mov	b,ar0
      0004EF E5*00            [12] 1299 	mov	a,_bp
      0004F1 24 07            [12] 1300 	add	a,#0x07
      0004F3 F8               [12] 1301 	mov	r0,a
      0004F4 E6               [12] 1302 	mov	a,@r0
      0004F5 C0 E0            [24] 1303 	push	acc
      0004F7 08               [12] 1304 	inc	r0
      0004F8 E6               [12] 1305 	mov	a,@r0
      0004F9 C0 E0            [24] 1306 	push	acc
      0004FB 08               [12] 1307 	inc	r0
      0004FC E6               [12] 1308 	mov	a,@r0
      0004FD C0 E0            [24] 1309 	push	acc
      0004FF 8A 82            [24] 1310 	mov	dpl,r2
      000501 8D 83            [24] 1311 	mov	dph,r5
      000503 8F F0            [24] 1312 	mov	b,r7
      000505 12r00r3C         [24] 1313 	lcall	_update
      000508 AF 82            [24] 1314 	mov	r7,dpl
      00050A E5 81            [12] 1315 	mov	a,sp
      00050C 24 FC            [12] 1316 	add	a,#0xfc
      00050E F5 81            [12] 1317 	mov	sp,a
      000510 D0 00            [24] 1318 	pop	ar0
      000512 D0 01            [24] 1319 	pop	ar1
      000514 D0 02            [24] 1320 	pop	ar2
      000516 D0 06            [24] 1321 	pop	ar6
      000518 D0 02            [24] 1322 	pop	ar2
      00051A EF               [12] 1323 	mov	a,r7
      00051B 60 84            [24] 1324 	jz	00112$
                                   1325 ;	walk.c:134: if (!stpush(&cur)) bang();
      00051D 8A 04            [24] 1326 	mov	ar4,r2
      00051F 7D 00            [12] 1327 	mov	r5,#0x00
      000521 7F 40            [12] 1328 	mov	r7,#0x40
      000523 8C 82            [24] 1329 	mov	dpl,r4
      000525 8D 83            [24] 1330 	mov	dph,r5
      000527 8F F0            [24] 1331 	mov	b,r7
      000529 C0 06            [24] 1332 	push	ar6
      00052B C0 02            [24] 1333 	push	ar2
      00052D C0 01            [24] 1334 	push	ar1
      00052F C0 00            [24] 1335 	push	ar0
      000531 12r0Ar1C         [24] 1336 	lcall	_stpush
      000534 E5 82            [12] 1337 	mov	a,dpl
      000536 D0 00            [24] 1338 	pop	ar0
      000538 D0 01            [24] 1339 	pop	ar1
      00053A D0 02            [24] 1340 	pop	ar2
      00053C D0 06            [24] 1341 	pop	ar6
      00053E 70 13            [24] 1342 	jnz	00110$
      000540 C0 06            [24] 1343 	push	ar6
      000542 C0 02            [24] 1344 	push	ar2
      000544 C0 01            [24] 1345 	push	ar1
      000546 C0 00            [24] 1346 	push	ar0
      000548 12r00r1D         [24] 1347 	lcall	_bang
      00054B D0 00            [24] 1348 	pop	ar0
      00054D D0 01            [24] 1349 	pop	ar1
      00054F D0 02            [24] 1350 	pop	ar2
      000551 D0 06            [24] 1351 	pop	ar6
      000553                       1352 00110$:
                                   1353 ;	walk.c:135: cur = t;
      000553 C0 02            [24] 1354 	push	ar2
      000555 C0 00            [24] 1355 	push	ar0
      000557 A8*00            [24] 1356 	mov	r0,_bp
      000559 08               [12] 1357 	inc	r0
      00055A C0 01            [24] 1358 	push	ar1
      00055C E5*00            [12] 1359 	mov	a,_bp
      00055E 24 07            [12] 1360 	add	a,#0x07
      000560 F9               [12] 1361 	mov	r1,a
      000561 E6               [12] 1362 	mov	a,@r0
      000562 F7               [12] 1363 	mov	@r1,a
      000563 09               [12] 1364 	inc	r1
      000564 77 00            [12] 1365 	mov	@r1,#0x00
      000566 09               [12] 1366 	inc	r1
      000567 77 40            [12] 1367 	mov	@r1,#0x40
      000569 D0 01            [24] 1368 	pop	ar1
      00056B A8*00            [24] 1369 	mov	r0,_bp
      00056D 08               [12] 1370 	inc	r0
      00056E 08               [12] 1371 	inc	r0
      00056F 86 02            [24] 1372 	mov	ar2,@r0
      000571 7B 00            [12] 1373 	mov	r3,#0x00
      000573 7F 40            [12] 1374 	mov	r7,#0x40
      000575 D0 00            [24] 1375 	pop	ar0
      000577 C0 06            [24] 1376 	push	ar6
      000579 C0 02            [24] 1377 	push	ar2
      00057B C0 01            [24] 1378 	push	ar1
      00057D C0 00            [24] 1379 	push	ar0
      00057F 74 04            [12] 1380 	mov	a,#0x04
      000581 C0 E0            [24] 1381 	push	acc
      000583 E4               [12] 1382 	clr	a
      000584 C0 E0            [24] 1383 	push	acc
      000586 85 00 F0         [24] 1384 	mov	b,ar0
      000589 E5*00            [12] 1385 	mov	a,_bp
      00058B 24 07            [12] 1386 	add	a,#0x07
      00058D F8               [12] 1387 	mov	r0,a
      00058E E6               [12] 1388 	mov	a,@r0
      00058F C0 E0            [24] 1389 	push	acc
      000591 08               [12] 1390 	inc	r0
      000592 E6               [12] 1391 	mov	a,@r0
      000593 C0 E0            [24] 1392 	push	acc
      000595 08               [12] 1393 	inc	r0
      000596 E6               [12] 1394 	mov	a,@r0
      000597 C0 E0            [24] 1395 	push	acc
      000599 8A 82            [24] 1396 	mov	dpl,r2
      00059B 8B 83            [24] 1397 	mov	dph,r3
      00059D 8F F0            [24] 1398 	mov	b,r7
      00059F 12r00r00         [24] 1399 	lcall	___memcpy
      0005A2 E5 81            [12] 1400 	mov	a,sp
      0005A4 24 FB            [12] 1401 	add	a,#0xfb
      0005A6 F5 81            [12] 1402 	mov	sp,a
      0005A8 D0 00            [24] 1403 	pop	ar0
      0005AA D0 01            [24] 1404 	pop	ar1
      0005AC D0 02            [24] 1405 	pop	ar2
      0005AE D0 06            [24] 1406 	pop	ar6
                                   1407 ;	walk.c:136: goto process;
      0005B0 D0 02            [24] 1408 	pop	ar2
      0005B2 02r03r35         [24] 1409 	ljmp	00101$
      0005B5                       1410 00115$:
                                   1411 ;	walk.c:140: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005B5 86 05            [24] 1412 	mov	ar5,@r0
      0005B7 08               [12] 1413 	inc	r0
      0005B8 86 07            [24] 1414 	mov	ar7,@r0
      0005BA 18               [12] 1415 	dec	r0
      0005BB 0D               [12] 1416 	inc	r5
      0005BC BD 00 01         [24] 1417 	cjne	r5,#0x00,00165$
      0005BF 0F               [12] 1418 	inc	r7
      0005C0                       1419 00165$:
      0005C0 87 03            [24] 1420 	mov	ar3,@r1
      0005C2 09               [12] 1421 	inc	r1
      0005C3 87 04            [24] 1422 	mov	ar4,@r1
      0005C5 19               [12] 1423 	dec	r1
      0005C6 74 04            [12] 1424 	mov	a,#0x04
      0005C8 2B               [12] 1425 	add	a,r3
      0005C9 FB               [12] 1426 	mov	r3,a
      0005CA E4               [12] 1427 	clr	a
      0005CB 3C               [12] 1428 	addc	a,r4
      0005CC FC               [12] 1429 	mov	r4,a
      0005CD C0 06            [24] 1430 	push	ar6
      0005CF C0 02            [24] 1431 	push	ar2
      0005D1 C0 01            [24] 1432 	push	ar1
      0005D3 C0 00            [24] 1433 	push	ar0
      0005D5 C0 05            [24] 1434 	push	ar5
      0005D7 C0 07            [24] 1435 	push	ar7
      0005D9 C0 03            [24] 1436 	push	ar3
      0005DB C0 04            [24] 1437 	push	ar4
      0005DD 74r2A            [12] 1438 	mov	a,#___str_3
      0005DF C0 E0            [24] 1439 	push	acc
      0005E1 74s00            [12] 1440 	mov	a,#(___str_3 >> 8)
      0005E3 C0 E0            [24] 1441 	push	acc
      0005E5 74 80            [12] 1442 	mov	a,#0x80
      0005E7 C0 E0            [24] 1443 	push	acc
      0005E9 12r00r00         [24] 1444 	lcall	_printf
      0005EC E5 81            [12] 1445 	mov	a,sp
      0005EE 24 F9            [12] 1446 	add	a,#0xf9
      0005F0 F5 81            [12] 1447 	mov	sp,a
                                   1448 ;	walk.c:141: flashOE(OE76_MASK6);
      0005F2 75 82 40         [24] 1449 	mov	dpl,#0x40
      0005F5 12r00r29         [24] 1450 	lcall	_flashOE
      0005F8 D0 00            [24] 1451 	pop	ar0
      0005FA D0 01            [24] 1452 	pop	ar1
      0005FC D0 02            [24] 1453 	pop	ar2
      0005FE D0 06            [24] 1454 	pop	ar6
                                   1455 ;	walk.c:143: if (stpop(&cur)) goto next;
      000600 C0 00            [24] 1456 	push	ar0
      000602 E5*00            [12] 1457 	mov	a,_bp
      000604 24 03            [12] 1458 	add	a,#0x03
      000606 F8               [12] 1459 	mov	r0,a
      000607 86 04            [24] 1460 	mov	ar4,@r0
      000609 7D 00            [12] 1461 	mov	r5,#0x00
      00060B 7F 40            [12] 1462 	mov	r7,#0x40
      00060D D0 00            [24] 1463 	pop	ar0
      00060F 8C 82            [24] 1464 	mov	dpl,r4
      000611 8D 83            [24] 1465 	mov	dph,r5
      000613 8F F0            [24] 1466 	mov	b,r7
      000615 C0 06            [24] 1467 	push	ar6
      000617 C0 02            [24] 1468 	push	ar2
      000619 C0 01            [24] 1469 	push	ar1
      00061B C0 00            [24] 1470 	push	ar0
      00061D 12r0Ar7D         [24] 1471 	lcall	_stpop
      000620 E5 82            [12] 1472 	mov	a,dpl
      000622 D0 00            [24] 1473 	pop	ar0
      000624 D0 01            [24] 1474 	pop	ar1
      000626 D0 02            [24] 1475 	pop	ar2
      000628 D0 06            [24] 1476 	pop	ar6
      00062A 60 03            [24] 1477 	jz	00166$
      00062C 02r03rBF         [24] 1478 	ljmp	00102$
      00062F                       1479 00166$:
                                   1480 ;	walk.c:145: return;
                                   1481 ;	walk.c:146: }
      00062F 85*00 81         [24] 1482 	mov	sp,_bp
      000632 D0*00            [24] 1483 	pop	_bp
      000634 22               [24] 1484 	ret
                                   1485 ;------------------------------------------------------------
                                   1486 ;Allocation info for local variables in function 'main'
                                   1487 ;------------------------------------------------------------
                                   1488 ;R                         Allocated to stack - _bp +13
                                   1489 ;initial                   Allocated to stack - _bp +5
                                   1490 ;N                         Allocated to stack - _bp +9
                                   1491 ;i                         Allocated to stack - _bp +11
                                   1492 ;j                         Allocated to registers r2 r6 
                                   1493 ;sloc0                     Allocated to stack - _bp +1
                                   1494 ;sloc1                     Allocated to stack - _bp +3
                                   1495 ;sloc2                     Allocated to stack - _bp +17
                                   1496 ;------------------------------------------------------------
                                   1497 ;	walk.c:148: int main(void) {
                                   1498 ;	-----------------------------------------
                                   1499 ;	 function main
                                   1500 ;	-----------------------------------------
      000635                       1501 _main:
      000635 C0*00            [24] 1502 	push	_bp
      000637 E5 81            [12] 1503 	mov	a,sp
      000639 F5*00            [12] 1504 	mov	_bp,a
      00063B 24 0E            [12] 1505 	add	a,#0x0e
      00063D F5 81            [12] 1506 	mov	sp,a
                                   1507 ;	walk.c:154: i0 = 1u;
      00063F 78r00            [12] 1508 	mov	r0,#_i0
      000641 76 01            [12] 1509 	mov	@r0,#0x01
                                   1510 ;	walk.c:156: P1_7 = 1;
                                   1511 ;	assignBit
      000643 D2 97            [12] 1512 	setb	_P1_7
                                   1513 ;	walk.c:157: IT0 = 1;
                                   1514 ;	assignBit
      000645 D2 88            [12] 1515 	setb	_IT0
                                   1516 ;	walk.c:158: EX0 = 1;
                                   1517 ;	assignBit
      000647 D2 A8            [12] 1518 	setb	_EX0
                                   1519 ;	walk.c:159: EA = 1;
                                   1520 ;	assignBit
      000649 D2 AF            [12] 1521 	setb	_EA
                                   1522 ;	walk.c:161: srand(*R);
      00064B 90 FF FE         [24] 1523 	mov	dptr,#0xfffe
      00064E E0               [24] 1524 	movx	a,@dptr
      00064F FE               [12] 1525 	mov	r6,a
      000650 A3               [24] 1526 	inc	dptr
      000651 E0               [24] 1527 	movx	a,@dptr
      000652 FF               [12] 1528 	mov	r7,a
      000653 8E 82            [24] 1529 	mov	dpl,r6
      000655 8F 83            [24] 1530 	mov	dph,r7
      000657 12r00r00         [24] 1531 	lcall	_srand
                                   1532 ;	walk.c:162: stinit();
      00065A 12r0Ar13         [24] 1533 	lcall	_stinit
                                   1534 ;	walk.c:164: puts("\033[2J\033[?25l");
      00065D 90r00r34         [24] 1535 	mov	dptr,#___str_4
      000660 75 F0 80         [24] 1536 	mov	b,#0x80
      000663 12r00r00         [24] 1537 	lcall	_puts
                                   1538 ;	walk.c:166: while (i0) {
      000666 E5*00            [12] 1539 	mov	a,_bp
      000668 24 05            [12] 1540 	add	a,#0x05
      00066A F9               [12] 1541 	mov	r1,a
      00066B FF               [12] 1542 	mov	r7,a
      00066C E5*00            [12] 1543 	mov	a,_bp
      00066E 24 09            [12] 1544 	add	a,#0x09
      000670 F8               [12] 1545 	mov	r0,a
      000671 E4               [12] 1546 	clr	a
      000672 F6               [12] 1547 	mov	@r0,a
      000673 08               [12] 1548 	inc	r0
      000674 F6               [12] 1549 	mov	@r0,a
      000675                       1550 00108$:
      000675 78r00            [12] 1551 	mov	r0,#_i0
      000677 E6               [12] 1552 	mov	a,@r0
      000678 70 03            [24] 1553 	jnz	00181$
      00067A 02r09rFC         [24] 1554 	ljmp	00110$
      00067D                       1555 00181$:
                                   1556 ;	walk.c:167: for (i = 0; i < ROWS; i++)
      00067D 7B 00            [12] 1557 	mov	r3,#0x00
      00067F 7C 00            [12] 1558 	mov	r4,#0x00
      000681 A8*00            [24] 1559 	mov	r0,_bp
      000683 08               [12] 1560 	inc	r0
      000684 E4               [12] 1561 	clr	a
      000685 F6               [12] 1562 	mov	@r0,a
      000686 08               [12] 1563 	inc	r0
      000687 F6               [12] 1564 	mov	@r0,a
                                   1565 ;	walk.c:168: for (j = 0; j < COLS; j++)
      000688                       1566 00124$:
      000688 A8*00            [24] 1567 	mov	r0,_bp
      00068A 08               [12] 1568 	inc	r0
      00068B C0 01            [24] 1569 	push	ar1
      00068D E5*00            [12] 1570 	mov	a,_bp
      00068F 24 03            [12] 1571 	add	a,#0x03
      000691 F9               [12] 1572 	mov	r1,a
      000692 E6               [12] 1573 	mov	a,@r0
      000693 24r00            [12] 1574 	add	a,#_g
      000695 F7               [12] 1575 	mov	@r1,a
      000696 08               [12] 1576 	inc	r0
      000697 E6               [12] 1577 	mov	a,@r0
      000698 34s00            [12] 1578 	addc	a,#(_g >> 8)
      00069A 09               [12] 1579 	inc	r1
      00069B F7               [12] 1580 	mov	@r1,a
      00069C D0 01            [24] 1581 	pop	ar1
      00069E 7A 00            [12] 1582 	mov	r2,#0x00
      0006A0 7E 00            [12] 1583 	mov	r6,#0x00
      0006A2                       1584 00111$:
                                   1585 ;	walk.c:169: g[i][j] = 0x55u;
      0006A2 E5*00            [12] 1586 	mov	a,_bp
      0006A4 24 03            [12] 1587 	add	a,#0x03
      0006A6 F8               [12] 1588 	mov	r0,a
      0006A7 EA               [12] 1589 	mov	a,r2
      0006A8 26               [12] 1590 	add	a,@r0
      0006A9 F5 82            [12] 1591 	mov	dpl,a
      0006AB EE               [12] 1592 	mov	a,r6
      0006AC 08               [12] 1593 	inc	r0
      0006AD 36               [12] 1594 	addc	a,@r0
      0006AE F5 83            [12] 1595 	mov	dph,a
      0006B0 74 55            [12] 1596 	mov	a,#0x55
      0006B2 F0               [24] 1597 	movx	@dptr,a
                                   1598 ;	walk.c:168: for (j = 0; j < COLS; j++)
      0006B3 0A               [12] 1599 	inc	r2
      0006B4 BA 00 01         [24] 1600 	cjne	r2,#0x00,00182$
      0006B7 0E               [12] 1601 	inc	r6
      0006B8                       1602 00182$:
      0006B8 C3               [12] 1603 	clr	c
      0006B9 EA               [12] 1604 	mov	a,r2
      0006BA 94 C9            [12] 1605 	subb	a,#0xc9
      0006BC EE               [12] 1606 	mov	a,r6
      0006BD 64 80            [12] 1607 	xrl	a,#0x80
      0006BF 94 80            [12] 1608 	subb	a,#0x80
      0006C1 40 DF            [24] 1609 	jc	00111$
                                   1610 ;	walk.c:167: for (i = 0; i < ROWS; i++)
      0006C3 A8*00            [24] 1611 	mov	r0,_bp
      0006C5 08               [12] 1612 	inc	r0
      0006C6 74 C9            [12] 1613 	mov	a,#0xc9
      0006C8 26               [12] 1614 	add	a,@r0
      0006C9 F6               [12] 1615 	mov	@r0,a
      0006CA E4               [12] 1616 	clr	a
      0006CB 08               [12] 1617 	inc	r0
      0006CC 36               [12] 1618 	addc	a,@r0
      0006CD F6               [12] 1619 	mov	@r0,a
      0006CE 0B               [12] 1620 	inc	r3
      0006CF BB 00 01         [24] 1621 	cjne	r3,#0x00,00184$
      0006D2 0C               [12] 1622 	inc	r4
      0006D3                       1623 00184$:
      0006D3 C3               [12] 1624 	clr	c
      0006D4 EB               [12] 1625 	mov	a,r3
      0006D5 94 30            [12] 1626 	subb	a,#0x30
      0006D7 EC               [12] 1627 	mov	a,r4
      0006D8 64 80            [12] 1628 	xrl	a,#0x80
      0006DA 94 80            [12] 1629 	subb	a,#0x80
      0006DC 40 AA            [24] 1630 	jc	00124$
                                   1631 ;	walk.c:171: initial.r = rand() % ROWS;
      0006DE E5*00            [12] 1632 	mov	a,_bp
      0006E0 24 05            [12] 1633 	add	a,#0x05
      0006E2 F8               [12] 1634 	mov	r0,a
      0006E3 C0 07            [24] 1635 	push	ar7
      0006E5 C0 01            [24] 1636 	push	ar1
      0006E7 C0 00            [24] 1637 	push	ar0
      0006E9 12r00r00         [24] 1638 	lcall	_rand
      0006EC AD 82            [24] 1639 	mov	r5,dpl
      0006EE AE 83            [24] 1640 	mov	r6,dph
      0006F0 74 30            [12] 1641 	mov	a,#0x30
      0006F2 C0 E0            [24] 1642 	push	acc
      0006F4 E4               [12] 1643 	clr	a
      0006F5 C0 E0            [24] 1644 	push	acc
      0006F7 8D 82            [24] 1645 	mov	dpl,r5
      0006F9 8E 83            [24] 1646 	mov	dph,r6
      0006FB 12r00r00         [24] 1647 	lcall	__modsint
      0006FE AD 82            [24] 1648 	mov	r5,dpl
      000700 AE 83            [24] 1649 	mov	r6,dph
      000702 15 81            [12] 1650 	dec	sp
      000704 15 81            [12] 1651 	dec	sp
      000706 D0 00            [24] 1652 	pop	ar0
      000708 D0 01            [24] 1653 	pop	ar1
      00070A A6 05            [24] 1654 	mov	@r0,ar5
      00070C 08               [12] 1655 	inc	r0
      00070D A6 06            [24] 1656 	mov	@r0,ar6
      00070F 18               [12] 1657 	dec	r0
                                   1658 ;	walk.c:172: initial.c = rand() % COLS;
      000710 74 02            [12] 1659 	mov	a,#0x02
      000712 29               [12] 1660 	add	a,r1
      000713 F8               [12] 1661 	mov	r0,a
      000714 C0 01            [24] 1662 	push	ar1
      000716 C0 00            [24] 1663 	push	ar0
      000718 12r00r00         [24] 1664 	lcall	_rand
      00071B AD 82            [24] 1665 	mov	r5,dpl
      00071D AE 83            [24] 1666 	mov	r6,dph
      00071F 74 C9            [12] 1667 	mov	a,#0xc9
      000721 C0 E0            [24] 1668 	push	acc
      000723 E4               [12] 1669 	clr	a
      000724 C0 E0            [24] 1670 	push	acc
      000726 8D 82            [24] 1671 	mov	dpl,r5
      000728 8E 83            [24] 1672 	mov	dph,r6
      00072A 12r00r00         [24] 1673 	lcall	__modsint
      00072D AD 82            [24] 1674 	mov	r5,dpl
      00072F AE 83            [24] 1675 	mov	r6,dph
      000731 15 81            [12] 1676 	dec	sp
      000733 15 81            [12] 1677 	dec	sp
      000735 D0 00            [24] 1678 	pop	ar0
      000737 A6 05            [24] 1679 	mov	@r0,ar5
      000739 08               [12] 1680 	inc	r0
      00073A A6 06            [24] 1681 	mov	@r0,ar6
      00073C 18               [12] 1682 	dec	r0
                                   1683 ;	walk.c:174: puts("\033[2J\033[?25l");
      00073D 90r00r34         [24] 1684 	mov	dptr,#___str_4
      000740 75 F0 80         [24] 1685 	mov	b,#0x80
      000743 C0 00            [24] 1686 	push	ar0
      000745 12r00r00         [24] 1687 	lcall	_puts
      000748 D0 00            [24] 1688 	pop	ar0
      00074A D0 01            [24] 1689 	pop	ar1
                                   1690 ;	walk.c:175: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00074C 86 05            [24] 1691 	mov	ar5,@r0
      00074E 08               [12] 1692 	inc	r0
      00074F 86 06            [24] 1693 	mov	ar6,@r0
      000751 18               [12] 1694 	dec	r0
      000752 87 03            [24] 1695 	mov	ar3,@r1
      000754 09               [12] 1696 	inc	r1
      000755 87 04            [24] 1697 	mov	ar4,@r1
      000757 19               [12] 1698 	dec	r1
      000758 C0 01            [24] 1699 	push	ar1
      00075A C0 05            [24] 1700 	push	ar5
      00075C C0 06            [24] 1701 	push	ar6
      00075E C0 03            [24] 1702 	push	ar3
      000760 C0 04            [24] 1703 	push	ar4
      000762 E5*00            [12] 1704 	mov	a,_bp
      000764 24 09            [12] 1705 	add	a,#0x09
      000766 F8               [12] 1706 	mov	r0,a
      000767 E6               [12] 1707 	mov	a,@r0
      000768 C0 E0            [24] 1708 	push	acc
      00076A 08               [12] 1709 	inc	r0
      00076B E6               [12] 1710 	mov	a,@r0
      00076C C0 E0            [24] 1711 	push	acc
      00076E 74r3F            [12] 1712 	mov	a,#___str_5
      000770 C0 E0            [24] 1713 	push	acc
      000772 74s00            [12] 1714 	mov	a,#(___str_5 >> 8)
      000774 C0 E0            [24] 1715 	push	acc
      000776 74 80            [12] 1716 	mov	a,#0x80
      000778 C0 E0            [24] 1717 	push	acc
      00077A 12r00r00         [24] 1718 	lcall	_printf
      00077D E5 81            [12] 1719 	mov	a,sp
      00077F 24 F7            [12] 1720 	add	a,#0xf7
      000781 F5 81            [12] 1721 	mov	sp,a
      000783 D0 01            [24] 1722 	pop	ar1
      000785 D0 07            [24] 1723 	pop	ar7
                                   1724 ;	walk.c:177: for (i = 0; i < REG; i++) {
      000787 E5*00            [12] 1725 	mov	a,_bp
      000789 24 0B            [12] 1726 	add	a,#0x0b
      00078B F8               [12] 1727 	mov	r0,a
      00078C E4               [12] 1728 	clr	a
      00078D F6               [12] 1729 	mov	@r0,a
      00078E 08               [12] 1730 	inc	r0
      00078F F6               [12] 1731 	mov	@r0,a
      000790                       1732 00115$:
                                   1733 ;	walk.c:178: neigh[i].r = neigh[REG + i].r * (1 + rand() % 8);
      000790 C0 07            [24] 1734 	push	ar7
      000792 E5*00            [12] 1735 	mov	a,_bp
      000794 24 0B            [12] 1736 	add	a,#0x0b
      000796 F8               [12] 1737 	mov	r0,a
      000797 E6               [12] 1738 	mov	a,@r0
      000798 25 E0            [12] 1739 	add	a,acc
      00079A FB               [12] 1740 	mov	r3,a
      00079B 08               [12] 1741 	inc	r0
      00079C E6               [12] 1742 	mov	a,@r0
      00079D 33               [12] 1743 	rlc	a
      00079E FC               [12] 1744 	mov	r4,a
      00079F EB               [12] 1745 	mov	a,r3
      0007A0 2B               [12] 1746 	add	a,r3
      0007A1 FB               [12] 1747 	mov	r3,a
      0007A2 EC               [12] 1748 	mov	a,r4
      0007A3 33               [12] 1749 	rlc	a
      0007A4 FC               [12] 1750 	mov	r4,a
      0007A5 E5*00            [12] 1751 	mov	a,_bp
      0007A7 24 03            [12] 1752 	add	a,#0x03
      0007A9 F8               [12] 1753 	mov	r0,a
      0007AA EB               [12] 1754 	mov	a,r3
      0007AB 24r00            [12] 1755 	add	a,#_neigh
      0007AD F6               [12] 1756 	mov	@r0,a
      0007AE EC               [12] 1757 	mov	a,r4
      0007AF 34s00            [12] 1758 	addc	a,#(_neigh >> 8)
      0007B1 08               [12] 1759 	inc	r0
      0007B2 F6               [12] 1760 	mov	@r0,a
      0007B3 E5*00            [12] 1761 	mov	a,_bp
      0007B5 24 0B            [12] 1762 	add	a,#0x0b
      0007B7 F8               [12] 1763 	mov	r0,a
      0007B8 86 06            [24] 1764 	mov	ar6,@r0
      0007BA 74 08            [12] 1765 	mov	a,#0x08
      0007BC 2E               [12] 1766 	add	a,r6
      0007BD FE               [12] 1767 	mov	r6,a
      0007BE C2 D5            [12] 1768 	clr	F0
      0007C0 75 F0 04         [24] 1769 	mov	b,#0x04
      0007C3 EE               [12] 1770 	mov	a,r6
      0007C4 30 E7 04         [24] 1771 	jnb	acc.7,00186$
      0007C7 B2 D5            [12] 1772 	cpl	F0
      0007C9 F4               [12] 1773 	cpl	a
      0007CA 04               [12] 1774 	inc	a
      0007CB                       1775 00186$:
      0007CB A4               [48] 1776 	mul	ab
      0007CC 30 D5 0A         [24] 1777 	jnb	F0,00187$
      0007CF F4               [12] 1778 	cpl	a
      0007D0 24 01            [12] 1779 	add	a,#0x01
      0007D2 C5 F0            [12] 1780 	xch	a,b
      0007D4 F4               [12] 1781 	cpl	a
      0007D5 34 00            [12] 1782 	addc	a,#0x00
      0007D7 C5 F0            [12] 1783 	xch	a,b
      0007D9                       1784 00187$:
      0007D9 FE               [12] 1785 	mov	r6,a
      0007DA AD F0            [24] 1786 	mov	r5,b
      0007DC 24r00            [12] 1787 	add	a,#_neigh
      0007DE F5 82            [12] 1788 	mov	dpl,a
      0007E0 ED               [12] 1789 	mov	a,r5
      0007E1 34s00            [12] 1790 	addc	a,#(_neigh >> 8)
      0007E3 F5 83            [12] 1791 	mov	dph,a
      0007E5 A8*00            [24] 1792 	mov	r0,_bp
      0007E7 08               [12] 1793 	inc	r0
      0007E8 E0               [24] 1794 	movx	a,@dptr
      0007E9 F6               [12] 1795 	mov	@r0,a
      0007EA A3               [24] 1796 	inc	dptr
      0007EB E0               [24] 1797 	movx	a,@dptr
      0007EC 08               [12] 1798 	inc	r0
      0007ED F6               [12] 1799 	mov	@r0,a
      0007EE C0 06            [24] 1800 	push	ar6
      0007F0 C0 05            [24] 1801 	push	ar5
      0007F2 C0 04            [24] 1802 	push	ar4
      0007F4 C0 03            [24] 1803 	push	ar3
      0007F6 C0 01            [24] 1804 	push	ar1
      0007F8 12r00r00         [24] 1805 	lcall	_rand
      0007FB AA 82            [24] 1806 	mov	r2,dpl
      0007FD AF 83            [24] 1807 	mov	r7,dph
      0007FF 74 08            [12] 1808 	mov	a,#0x08
      000801 C0 E0            [24] 1809 	push	acc
      000803 E4               [12] 1810 	clr	a
      000804 C0 E0            [24] 1811 	push	acc
      000806 8A 82            [24] 1812 	mov	dpl,r2
      000808 8F 83            [24] 1813 	mov	dph,r7
      00080A 12r00r00         [24] 1814 	lcall	__modsint
      00080D AA 82            [24] 1815 	mov	r2,dpl
      00080F AF 83            [24] 1816 	mov	r7,dph
      000811 15 81            [12] 1817 	dec	sp
      000813 15 81            [12] 1818 	dec	sp
      000815 D0 01            [24] 1819 	pop	ar1
      000817 D0 03            [24] 1820 	pop	ar3
      000819 D0 04            [24] 1821 	pop	ar4
      00081B D0 05            [24] 1822 	pop	ar5
      00081D D0 06            [24] 1823 	pop	ar6
      00081F 0A               [12] 1824 	inc	r2
      000820 BA 00 01         [24] 1825 	cjne	r2,#0x00,00188$
      000823 0F               [12] 1826 	inc	r7
      000824                       1827 00188$:
      000824 C0 06            [24] 1828 	push	ar6
      000826 C0 05            [24] 1829 	push	ar5
      000828 C0 04            [24] 1830 	push	ar4
      00082A C0 03            [24] 1831 	push	ar3
      00082C C0 01            [24] 1832 	push	ar1
      00082E C0 02            [24] 1833 	push	ar2
      000830 C0 07            [24] 1834 	push	ar7
      000832 A8*00            [24] 1835 	mov	r0,_bp
      000834 08               [12] 1836 	inc	r0
      000835 86 82            [24] 1837 	mov	dpl,@r0
      000837 08               [12] 1838 	inc	r0
      000838 86 83            [24] 1839 	mov	dph,@r0
      00083A 12r00r00         [24] 1840 	lcall	__mulint
      00083D AA 82            [24] 1841 	mov	r2,dpl
      00083F AF 83            [24] 1842 	mov	r7,dph
      000841 15 81            [12] 1843 	dec	sp
      000843 15 81            [12] 1844 	dec	sp
      000845 D0 01            [24] 1845 	pop	ar1
      000847 D0 03            [24] 1846 	pop	ar3
      000849 D0 04            [24] 1847 	pop	ar4
      00084B D0 05            [24] 1848 	pop	ar5
      00084D D0 06            [24] 1849 	pop	ar6
      00084F E5*00            [12] 1850 	mov	a,_bp
      000851 24 03            [12] 1851 	add	a,#0x03
      000853 F8               [12] 1852 	mov	r0,a
      000854 86 82            [24] 1853 	mov	dpl,@r0
      000856 08               [12] 1854 	inc	r0
      000857 86 83            [24] 1855 	mov	dph,@r0
      000859 EA               [12] 1856 	mov	a,r2
      00085A F0               [24] 1857 	movx	@dptr,a
      00085B EF               [12] 1858 	mov	a,r7
      00085C A3               [24] 1859 	inc	dptr
      00085D F0               [24] 1860 	movx	@dptr,a
                                   1861 ;	walk.c:179: neigh[i].c = neigh[REG + i].c * (1 + rand() % 8);
      00085E EB               [12] 1862 	mov	a,r3
      00085F 24r00            [12] 1863 	add	a,#_neigh
      000861 FB               [12] 1864 	mov	r3,a
      000862 EC               [12] 1865 	mov	a,r4
      000863 34s00            [12] 1866 	addc	a,#(_neigh >> 8)
      000865 FC               [12] 1867 	mov	r4,a
      000866 74 02            [12] 1868 	mov	a,#0x02
      000868 2B               [12] 1869 	add	a,r3
      000869 FA               [12] 1870 	mov	r2,a
      00086A E4               [12] 1871 	clr	a
      00086B 3C               [12] 1872 	addc	a,r4
      00086C FF               [12] 1873 	mov	r7,a
      00086D EE               [12] 1874 	mov	a,r6
      00086E 24r00            [12] 1875 	add	a,#_neigh
      000870 FE               [12] 1876 	mov	r6,a
      000871 ED               [12] 1877 	mov	a,r5
      000872 34s00            [12] 1878 	addc	a,#(_neigh >> 8)
      000874 FD               [12] 1879 	mov	r5,a
      000875 8E 82            [24] 1880 	mov	dpl,r6
      000877 8D 83            [24] 1881 	mov	dph,r5
      000879 A3               [24] 1882 	inc	dptr
      00087A A3               [24] 1883 	inc	dptr
      00087B E5*00            [12] 1884 	mov	a,_bp
      00087D 24 03            [12] 1885 	add	a,#0x03
      00087F F8               [12] 1886 	mov	r0,a
      000880 E0               [24] 1887 	movx	a,@dptr
      000881 F6               [12] 1888 	mov	@r0,a
      000882 A3               [24] 1889 	inc	dptr
      000883 E0               [24] 1890 	movx	a,@dptr
      000884 08               [12] 1891 	inc	r0
      000885 F6               [12] 1892 	mov	@r0,a
      000886 C0 07            [24] 1893 	push	ar7
      000888 C0 04            [24] 1894 	push	ar4
      00088A C0 03            [24] 1895 	push	ar3
      00088C C0 02            [24] 1896 	push	ar2
      00088E C0 01            [24] 1897 	push	ar1
      000890 12r00r00         [24] 1898 	lcall	_rand
      000893 AD 82            [24] 1899 	mov	r5,dpl
      000895 AE 83            [24] 1900 	mov	r6,dph
      000897 74 08            [12] 1901 	mov	a,#0x08
      000899 C0 E0            [24] 1902 	push	acc
      00089B E4               [12] 1903 	clr	a
      00089C C0 E0            [24] 1904 	push	acc
      00089E 8D 82            [24] 1905 	mov	dpl,r5
      0008A0 8E 83            [24] 1906 	mov	dph,r6
      0008A2 12r00r00         [24] 1907 	lcall	__modsint
      0008A5 AD 82            [24] 1908 	mov	r5,dpl
      0008A7 AE 83            [24] 1909 	mov	r6,dph
      0008A9 15 81            [12] 1910 	dec	sp
      0008AB 15 81            [12] 1911 	dec	sp
      0008AD D0 01            [24] 1912 	pop	ar1
      0008AF D0 02            [24] 1913 	pop	ar2
      0008B1 D0 03            [24] 1914 	pop	ar3
      0008B3 D0 04            [24] 1915 	pop	ar4
      0008B5 D0 07            [24] 1916 	pop	ar7
      0008B7 0D               [12] 1917 	inc	r5
      0008B8 BD 00 01         [24] 1918 	cjne	r5,#0x00,00189$
      0008BB 0E               [12] 1919 	inc	r6
      0008BC                       1920 00189$:
      0008BC C0 07            [24] 1921 	push	ar7
      0008BE C0 04            [24] 1922 	push	ar4
      0008C0 C0 03            [24] 1923 	push	ar3
      0008C2 C0 02            [24] 1924 	push	ar2
      0008C4 C0 01            [24] 1925 	push	ar1
      0008C6 C0 05            [24] 1926 	push	ar5
      0008C8 C0 06            [24] 1927 	push	ar6
      0008CA E5*00            [12] 1928 	mov	a,_bp
      0008CC 24 03            [12] 1929 	add	a,#0x03
      0008CE F8               [12] 1930 	mov	r0,a
      0008CF 86 82            [24] 1931 	mov	dpl,@r0
      0008D1 08               [12] 1932 	inc	r0
      0008D2 86 83            [24] 1933 	mov	dph,@r0
      0008D4 12r00r00         [24] 1934 	lcall	__mulint
      0008D7 AD 82            [24] 1935 	mov	r5,dpl
      0008D9 AE 83            [24] 1936 	mov	r6,dph
      0008DB 15 81            [12] 1937 	dec	sp
      0008DD 15 81            [12] 1938 	dec	sp
      0008DF D0 01            [24] 1939 	pop	ar1
      0008E1 D0 02            [24] 1940 	pop	ar2
      0008E3 D0 03            [24] 1941 	pop	ar3
      0008E5 D0 04            [24] 1942 	pop	ar4
      0008E7 D0 07            [24] 1943 	pop	ar7
      0008E9 8A 82            [24] 1944 	mov	dpl,r2
      0008EB 8F 83            [24] 1945 	mov	dph,r7
      0008ED ED               [12] 1946 	mov	a,r5
      0008EE F0               [24] 1947 	movx	@dptr,a
      0008EF EE               [12] 1948 	mov	a,r6
      0008F0 A3               [24] 1949 	inc	dptr
      0008F1 F0               [24] 1950 	movx	@dptr,a
                                   1951 ;	walk.c:180: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      0008F2 8B 82            [24] 1952 	mov	dpl,r3
      0008F4 8C 83            [24] 1953 	mov	dph,r4
      0008F6 E0               [24] 1954 	movx	a,@dptr
      0008F7 FB               [12] 1955 	mov	r3,a
      0008F8 A3               [24] 1956 	inc	dptr
      0008F9 E0               [24] 1957 	movx	a,@dptr
      0008FA FC               [12] 1958 	mov	r4,a
      0008FB C0 07            [24] 1959 	push	ar7
      0008FD C0 01            [24] 1960 	push	ar1
      0008FF C0 05            [24] 1961 	push	ar5
      000901 C0 06            [24] 1962 	push	ar6
      000903 C0 03            [24] 1963 	push	ar3
      000905 C0 04            [24] 1964 	push	ar4
      000907 74r52            [12] 1965 	mov	a,#___str_6
      000909 C0 E0            [24] 1966 	push	acc
      00090B 74s00            [12] 1967 	mov	a,#(___str_6 >> 8)
      00090D C0 E0            [24] 1968 	push	acc
      00090F 74 80            [12] 1969 	mov	a,#0x80
      000911 C0 E0            [24] 1970 	push	acc
      000913 12r00r00         [24] 1971 	lcall	_printf
      000916 E5 81            [12] 1972 	mov	a,sp
      000918 24 F9            [12] 1973 	add	a,#0xf9
      00091A F5 81            [12] 1974 	mov	sp,a
      00091C D0 01            [24] 1975 	pop	ar1
      00091E D0 07            [24] 1976 	pop	ar7
                                   1977 ;	walk.c:177: for (i = 0; i < REG; i++) {
      000920 E5*00            [12] 1978 	mov	a,_bp
      000922 24 0B            [12] 1979 	add	a,#0x0b
      000924 F8               [12] 1980 	mov	r0,a
      000925 06               [12] 1981 	inc	@r0
      000926 B6 00 02         [24] 1982 	cjne	@r0,#0x00,00190$
      000929 08               [12] 1983 	inc	r0
      00092A 06               [12] 1984 	inc	@r0
      00092B                       1985 00190$:
      00092B E5*00            [12] 1986 	mov	a,_bp
      00092D 24 0B            [12] 1987 	add	a,#0x0b
      00092F F8               [12] 1988 	mov	r0,a
      000930 86 05            [24] 1989 	mov	ar5,@r0
      000932 08               [12] 1990 	inc	r0
      000933 86 06            [24] 1991 	mov	ar6,@r0
      000935 C3               [12] 1992 	clr	c
      000936 ED               [12] 1993 	mov	a,r5
      000937 94 08            [12] 1994 	subb	a,#0x08
      000939 EE               [12] 1995 	mov	a,r6
      00093A 94 00            [12] 1996 	subb	a,#0x00
      00093C D0 07            [24] 1997 	pop	ar7
      00093E 50 03            [24] 1998 	jnc	00191$
      000940 02r07r90         [24] 1999 	ljmp	00115$
      000943                       2000 00191$:
                                   2001 ;	walk.c:183: OE76 = OE76_0;
      000943 78r01            [12] 2002 	mov	r0,#_OE76
      000945 76 3F            [12] 2003 	mov	@r0,#0x3f
                                   2004 ;	walk.c:184: flashOE(OE76_NC);
      000947 75 82 00         [24] 2005 	mov	dpl,#0x00
      00094A C0 07            [24] 2006 	push	ar7
      00094C C0 01            [24] 2007 	push	ar1
      00094E 12r00r29         [24] 2008 	lcall	_flashOE
      000951 D0 01            [24] 2009 	pop	ar1
      000953 D0 07            [24] 2010 	pop	ar7
                                   2011 ;	walk.c:186: walk(&initial);
      000955 8F 04            [24] 2012 	mov	ar4,r7
      000957 7D 00            [12] 2013 	mov	r5,#0x00
      000959 7E 40            [12] 2014 	mov	r6,#0x40
      00095B 8C 82            [24] 2015 	mov	dpl,r4
      00095D 8D 83            [24] 2016 	mov	dph,r5
      00095F 8E F0            [24] 2017 	mov	b,r6
      000961 C0 07            [24] 2018 	push	ar7
      000963 C0 01            [24] 2019 	push	ar1
      000965 12r02rC9         [24] 2020 	lcall	_walk
      000968 D0 01            [24] 2021 	pop	ar1
      00096A D0 07            [24] 2022 	pop	ar7
                                   2023 ;	walk.c:188: for (i = 0; i < ROWS; i++)
      00096C E5*00            [12] 2024 	mov	a,_bp
      00096E 24 0B            [12] 2025 	add	a,#0x0b
      000970 F8               [12] 2026 	mov	r0,a
      000971 E4               [12] 2027 	clr	a
      000972 F6               [12] 2028 	mov	@r0,a
      000973 08               [12] 2029 	inc	r0
      000974 F6               [12] 2030 	mov	@r0,a
      000975 7B 00            [12] 2031 	mov	r3,#0x00
      000977 7C 00            [12] 2032 	mov	r4,#0x00
                                   2033 ;	walk.c:189: for (j = 0; j < COLS; j++)
      000979                       2034 00131$:
      000979 E5*00            [12] 2035 	mov	a,_bp
      00097B 24 03            [12] 2036 	add	a,#0x03
      00097D F8               [12] 2037 	mov	r0,a
      00097E EB               [12] 2038 	mov	a,r3
      00097F 24r00            [12] 2039 	add	a,#_g
      000981 F6               [12] 2040 	mov	@r0,a
      000982 EC               [12] 2041 	mov	a,r4
      000983 34s00            [12] 2042 	addc	a,#(_g >> 8)
      000985 08               [12] 2043 	inc	r0
      000986 F6               [12] 2044 	mov	@r0,a
      000987 7A 00            [12] 2045 	mov	r2,#0x00
      000989 7E 00            [12] 2046 	mov	r6,#0x00
      00098B                       2047 00117$:
                                   2048 ;	walk.c:190: if (g[i][j] != 0xaau) bang();
      00098B E5*00            [12] 2049 	mov	a,_bp
      00098D 24 03            [12] 2050 	add	a,#0x03
      00098F F8               [12] 2051 	mov	r0,a
      000990 EA               [12] 2052 	mov	a,r2
      000991 26               [12] 2053 	add	a,@r0
      000992 F5 82            [12] 2054 	mov	dpl,a
      000994 EE               [12] 2055 	mov	a,r6
      000995 08               [12] 2056 	inc	r0
      000996 36               [12] 2057 	addc	a,@r0
      000997 F5 83            [12] 2058 	mov	dph,a
      000999 E0               [24] 2059 	movx	a,@dptr
      00099A FD               [12] 2060 	mov	r5,a
      00099B BD AA 02         [24] 2061 	cjne	r5,#0xaa,00192$
      00099E 80 1B            [24] 2062 	sjmp	00118$
      0009A0                       2063 00192$:
      0009A0 C0 07            [24] 2064 	push	ar7
      0009A2 C0 06            [24] 2065 	push	ar6
      0009A4 C0 04            [24] 2066 	push	ar4
      0009A6 C0 03            [24] 2067 	push	ar3
      0009A8 C0 02            [24] 2068 	push	ar2
      0009AA C0 01            [24] 2069 	push	ar1
      0009AC 12r00r1D         [24] 2070 	lcall	_bang
      0009AF D0 01            [24] 2071 	pop	ar1
      0009B1 D0 02            [24] 2072 	pop	ar2
      0009B3 D0 03            [24] 2073 	pop	ar3
      0009B5 D0 04            [24] 2074 	pop	ar4
      0009B7 D0 06            [24] 2075 	pop	ar6
      0009B9 D0 07            [24] 2076 	pop	ar7
      0009BB                       2077 00118$:
                                   2078 ;	walk.c:189: for (j = 0; j < COLS; j++)
      0009BB 0A               [12] 2079 	inc	r2
      0009BC BA 00 01         [24] 2080 	cjne	r2,#0x00,00193$
      0009BF 0E               [12] 2081 	inc	r6
      0009C0                       2082 00193$:
      0009C0 C3               [12] 2083 	clr	c
      0009C1 EA               [12] 2084 	mov	a,r2
      0009C2 94 C9            [12] 2085 	subb	a,#0xc9
      0009C4 EE               [12] 2086 	mov	a,r6
      0009C5 64 80            [12] 2087 	xrl	a,#0x80
      0009C7 94 80            [12] 2088 	subb	a,#0x80
      0009C9 40 C0            [24] 2089 	jc	00117$
                                   2090 ;	walk.c:188: for (i = 0; i < ROWS; i++)
      0009CB 74 C9            [12] 2091 	mov	a,#0xc9
      0009CD 2B               [12] 2092 	add	a,r3
      0009CE FB               [12] 2093 	mov	r3,a
      0009CF E4               [12] 2094 	clr	a
      0009D0 3C               [12] 2095 	addc	a,r4
      0009D1 FC               [12] 2096 	mov	r4,a
      0009D2 E5*00            [12] 2097 	mov	a,_bp
      0009D4 24 0B            [12] 2098 	add	a,#0x0b
      0009D6 F8               [12] 2099 	mov	r0,a
      0009D7 06               [12] 2100 	inc	@r0
      0009D8 B6 00 02         [24] 2101 	cjne	@r0,#0x00,00195$
      0009DB 08               [12] 2102 	inc	r0
      0009DC 06               [12] 2103 	inc	@r0
      0009DD                       2104 00195$:
      0009DD E5*00            [12] 2105 	mov	a,_bp
      0009DF 24 0B            [12] 2106 	add	a,#0x0b
      0009E1 F8               [12] 2107 	mov	r0,a
      0009E2 C3               [12] 2108 	clr	c
      0009E3 E6               [12] 2109 	mov	a,@r0
      0009E4 94 30            [12] 2110 	subb	a,#0x30
      0009E6 08               [12] 2111 	inc	r0
      0009E7 E6               [12] 2112 	mov	a,@r0
      0009E8 64 80            [12] 2113 	xrl	a,#0x80
      0009EA 94 80            [12] 2114 	subb	a,#0x80
      0009EC 40 8B            [24] 2115 	jc	00131$
                                   2116 ;	walk.c:192: N++;
      0009EE E5*00            [12] 2117 	mov	a,_bp
      0009F0 24 09            [12] 2118 	add	a,#0x09
      0009F2 F8               [12] 2119 	mov	r0,a
      0009F3 06               [12] 2120 	inc	@r0
      0009F4 B6 00 02         [24] 2121 	cjne	@r0,#0x00,00197$
      0009F7 08               [12] 2122 	inc	r0
      0009F8 06               [12] 2123 	inc	@r0
      0009F9                       2124 00197$:
      0009F9 02r06r75         [24] 2125 	ljmp	00108$
      0009FC                       2126 00110$:
                                   2127 ;	walk.c:195: EA = 0;
                                   2128 ;	assignBit
      0009FC C2 AF            [12] 2129 	clr	_EA
                                   2130 ;	walk.c:197: puts("\033[2J\033[?25h");
      0009FE 90r00r5B         [24] 2131 	mov	dptr,#___str_7
      000A01 75 F0 80         [24] 2132 	mov	b,#0x80
      000A04 12r00r00         [24] 2133 	lcall	_puts
                                   2134 ;	walk.c:201: __endasm;
      000A07 02 00 00         [24] 2135 	ljmp	0
                                   2136 ;	walk.c:203: return 0;
      000A0A 90 00 00         [24] 2137 	mov	dptr,#0x0000
                                   2138 ;	walk.c:204: }
      000A0D 85*00 81         [24] 2139 	mov	sp,_bp
      000A10 D0*00            [24] 2140 	pop	_bp
      000A12 22               [24] 2141 	ret
                                   2142 ;------------------------------------------------------------
                                   2143 ;Allocation info for local variables in function 'stinit'
                                   2144 ;------------------------------------------------------------
                                   2145 ;	walk.c:206: static void stinit(void) {
                                   2146 ;	-----------------------------------------
                                   2147 ;	 function stinit
                                   2148 ;	-----------------------------------------
      000A13                       2149 _stinit:
                                   2150 ;	walk.c:207: sp = -1;
      000A13 90rBCr70         [24] 2151 	mov	dptr,#_sp
      000A16 74 FF            [12] 2152 	mov	a,#0xff
      000A18 F0               [24] 2153 	movx	@dptr,a
      000A19 A3               [24] 2154 	inc	dptr
      000A1A F0               [24] 2155 	movx	@dptr,a
                                   2156 ;	walk.c:208: return;
                                   2157 ;	walk.c:209: }
      000A1B 22               [24] 2158 	ret
                                   2159 ;------------------------------------------------------------
                                   2160 ;Allocation info for local variables in function 'stpush'
                                   2161 ;------------------------------------------------------------
                                   2162 ;t                         Allocated to registers r5 r6 r7 
                                   2163 ;------------------------------------------------------------
                                   2164 ;	walk.c:211: static uint8_t stpush(struct node *t) {
                                   2165 ;	-----------------------------------------
                                   2166 ;	 function stpush
                                   2167 ;	-----------------------------------------
      000A1C                       2168 _stpush:
      000A1C AD 82            [24] 2169 	mov	r5,dpl
      000A1E AE 83            [24] 2170 	mov	r6,dph
      000A20 AF F0            [24] 2171 	mov	r7,b
                                   2172 ;	walk.c:212: if (sp == (SMAX - 1)) return 0u;
      000A22 90rBCr70         [24] 2173 	mov	dptr,#_sp
      000A25 E0               [24] 2174 	movx	a,@dptr
      000A26 FB               [12] 2175 	mov	r3,a
      000A27 A3               [24] 2176 	inc	dptr
      000A28 E0               [24] 2177 	movx	a,@dptr
      000A29 FC               [12] 2178 	mov	r4,a
      000A2A BB AF 07         [24] 2179 	cjne	r3,#0xaf,00102$
      000A2D BC 25 04         [24] 2180 	cjne	r4,#0x25,00102$
      000A30 75 82 00         [24] 2181 	mov	dpl,#0x00
      000A33 22               [24] 2182 	ret
      000A34                       2183 00102$:
                                   2184 ;	walk.c:213: sp++;
      000A34 90rBCr70         [24] 2185 	mov	dptr,#_sp
      000A37 74 01            [12] 2186 	mov	a,#0x01
      000A39 2B               [12] 2187 	add	a,r3
      000A3A F0               [24] 2188 	movx	@dptr,a
      000A3B E4               [12] 2189 	clr	a
      000A3C 3C               [12] 2190 	addc	a,r4
      000A3D A3               [24] 2191 	inc	dptr
      000A3E F0               [24] 2192 	movx	@dptr,a
                                   2193 ;	walk.c:214: stack[sp] = *t;
      000A3F 90rBCr70         [24] 2194 	mov	dptr,#_sp
      000A42 E0               [24] 2195 	movx	a,@dptr
      000A43 FB               [12] 2196 	mov	r3,a
      000A44 A3               [24] 2197 	inc	dptr
      000A45 E0               [24] 2198 	movx	a,@dptr
      000A46 FC               [12] 2199 	mov	r4,a
      000A47 EB               [12] 2200 	mov	a,r3
      000A48 2B               [12] 2201 	add	a,r3
      000A49 FB               [12] 2202 	mov	r3,a
      000A4A EC               [12] 2203 	mov	a,r4
      000A4B 33               [12] 2204 	rlc	a
      000A4C FC               [12] 2205 	mov	r4,a
      000A4D EB               [12] 2206 	mov	a,r3
      000A4E 2B               [12] 2207 	add	a,r3
      000A4F FB               [12] 2208 	mov	r3,a
      000A50 EC               [12] 2209 	mov	a,r4
      000A51 33               [12] 2210 	rlc	a
      000A52 FC               [12] 2211 	mov	r4,a
      000A53 EB               [12] 2212 	mov	a,r3
      000A54 24rB0            [12] 2213 	add	a,#_stack
      000A56 FB               [12] 2214 	mov	r3,a
      000A57 EC               [12] 2215 	mov	a,r4
      000A58 34s25            [12] 2216 	addc	a,#(_stack >> 8)
      000A5A FC               [12] 2217 	mov	r4,a
      000A5B 7A 00            [12] 2218 	mov	r2,#0x00
      000A5D 74 04            [12] 2219 	mov	a,#0x04
      000A5F C0 E0            [24] 2220 	push	acc
      000A61 E4               [12] 2221 	clr	a
      000A62 C0 E0            [24] 2222 	push	acc
      000A64 C0 05            [24] 2223 	push	ar5
      000A66 C0 06            [24] 2224 	push	ar6
      000A68 C0 07            [24] 2225 	push	ar7
      000A6A 8B 82            [24] 2226 	mov	dpl,r3
      000A6C 8C 83            [24] 2227 	mov	dph,r4
      000A6E 8A F0            [24] 2228 	mov	b,r2
      000A70 12r00r00         [24] 2229 	lcall	___memcpy
      000A73 E5 81            [12] 2230 	mov	a,sp
      000A75 24 FB            [12] 2231 	add	a,#0xfb
      000A77 F5 81            [12] 2232 	mov	sp,a
                                   2233 ;	walk.c:215: return 1u;
      000A79 75 82 01         [24] 2234 	mov	dpl,#0x01
                                   2235 ;	walk.c:216: }
      000A7C 22               [24] 2236 	ret
                                   2237 ;------------------------------------------------------------
                                   2238 ;Allocation info for local variables in function 'stpop'
                                   2239 ;------------------------------------------------------------
                                   2240 ;t                         Allocated to registers r5 r6 r7 
                                   2241 ;------------------------------------------------------------
                                   2242 ;	walk.c:218: static uint8_t stpop(struct node *t) {
                                   2243 ;	-----------------------------------------
                                   2244 ;	 function stpop
                                   2245 ;	-----------------------------------------
      000A7D                       2246 _stpop:
      000A7D AD 82            [24] 2247 	mov	r5,dpl
      000A7F AE 83            [24] 2248 	mov	r6,dph
      000A81 AF F0            [24] 2249 	mov	r7,b
                                   2250 ;	walk.c:219: if (sp == -1) return 0u;
      000A83 90rBCr70         [24] 2251 	mov	dptr,#_sp
      000A86 E0               [24] 2252 	movx	a,@dptr
      000A87 FB               [12] 2253 	mov	r3,a
      000A88 A3               [24] 2254 	inc	dptr
      000A89 E0               [24] 2255 	movx	a,@dptr
      000A8A FC               [12] 2256 	mov	r4,a
      000A8B BB FF 07         [24] 2257 	cjne	r3,#0xff,00102$
      000A8E BC FF 04         [24] 2258 	cjne	r4,#0xff,00102$
      000A91 75 82 00         [24] 2259 	mov	dpl,#0x00
      000A94 22               [24] 2260 	ret
      000A95                       2261 00102$:
                                   2262 ;	walk.c:220: *t = stack[sp];
      000A95 EB               [12] 2263 	mov	a,r3
      000A96 2B               [12] 2264 	add	a,r3
      000A97 FB               [12] 2265 	mov	r3,a
      000A98 EC               [12] 2266 	mov	a,r4
      000A99 33               [12] 2267 	rlc	a
      000A9A FC               [12] 2268 	mov	r4,a
      000A9B EB               [12] 2269 	mov	a,r3
      000A9C 2B               [12] 2270 	add	a,r3
      000A9D FB               [12] 2271 	mov	r3,a
      000A9E EC               [12] 2272 	mov	a,r4
      000A9F 33               [12] 2273 	rlc	a
      000AA0 FC               [12] 2274 	mov	r4,a
      000AA1 EB               [12] 2275 	mov	a,r3
      000AA2 24rB0            [12] 2276 	add	a,#_stack
      000AA4 FB               [12] 2277 	mov	r3,a
      000AA5 EC               [12] 2278 	mov	a,r4
      000AA6 34s25            [12] 2279 	addc	a,#(_stack >> 8)
      000AA8 FC               [12] 2280 	mov	r4,a
      000AA9 7A 00            [12] 2281 	mov	r2,#0x00
      000AAB 74 04            [12] 2282 	mov	a,#0x04
      000AAD C0 E0            [24] 2283 	push	acc
      000AAF E4               [12] 2284 	clr	a
      000AB0 C0 E0            [24] 2285 	push	acc
      000AB2 C0 03            [24] 2286 	push	ar3
      000AB4 C0 04            [24] 2287 	push	ar4
      000AB6 C0 02            [24] 2288 	push	ar2
      000AB8 8D 82            [24] 2289 	mov	dpl,r5
      000ABA 8E 83            [24] 2290 	mov	dph,r6
      000ABC 8F F0            [24] 2291 	mov	b,r7
      000ABE 12r00r00         [24] 2292 	lcall	___memcpy
      000AC1 E5 81            [12] 2293 	mov	a,sp
      000AC3 24 FB            [12] 2294 	add	a,#0xfb
      000AC5 F5 81            [12] 2295 	mov	sp,a
                                   2296 ;	walk.c:221: sp--;
      000AC7 90rBCr70         [24] 2297 	mov	dptr,#_sp
      000ACA E0               [24] 2298 	movx	a,@dptr
      000ACB 24 FF            [12] 2299 	add	a,#0xff
      000ACD FE               [12] 2300 	mov	r6,a
      000ACE A3               [24] 2301 	inc	dptr
      000ACF E0               [24] 2302 	movx	a,@dptr
      000AD0 34 FF            [12] 2303 	addc	a,#0xff
      000AD2 FF               [12] 2304 	mov	r7,a
      000AD3 90rBCr70         [24] 2305 	mov	dptr,#_sp
      000AD6 EE               [12] 2306 	mov	a,r6
      000AD7 F0               [24] 2307 	movx	@dptr,a
      000AD8 EF               [12] 2308 	mov	a,r7
      000AD9 A3               [24] 2309 	inc	dptr
      000ADA F0               [24] 2310 	movx	@dptr,a
                                   2311 ;	walk.c:222: return 1u;
      000ADB 75 82 01         [24] 2312 	mov	dpl,#0x01
                                   2313 ;	walk.c:223: }
      000ADE 22               [24] 2314 	ret
                                   2315 	.area CSEG    (CODE)
                                   2316 	.area CONST   (CODE)
                                   2317 	.area CONST   (CODE)
      000000                       2318 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2319 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2320 	.db 0x00
                                   2321 	.area CSEG    (CODE)
                                   2322 	.area CONST   (CODE)
      00000D                       2323 ___str_1:
      00000D 1B                    2324 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2325 	.ascii "[%d;%dHo"
             6F
      000016 00                    2326 	.db 0x00
                                   2327 	.area CSEG    (CODE)
                                   2328 	.area CONST   (CODE)
      000017                       2329 ___str_2:
      000017 1B                    2330 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2331 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2332 	.db 0x00
                                   2333 	.area CSEG    (CODE)
                                   2334 	.area CONST   (CODE)
      00002A                       2335 ___str_3:
      00002A 1B                    2336 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2337 	.ascii "[%d;%dH."
             2E
      000033 00                    2338 	.db 0x00
                                   2339 	.area CSEG    (CODE)
                                   2340 	.area CONST   (CODE)
      000034                       2341 ___str_4:
      000034 1B                    2342 	.db 0x1b
      000035 5B 32 4A              2343 	.ascii "[2J"
      000038 1B                    2344 	.db 0x1b
      000039 5B 3F 32 35 6C        2345 	.ascii "[?25l"
      00003E 00                    2346 	.db 0x00
                                   2347 	.area CSEG    (CODE)
                                   2348 	.area CONST   (CODE)
      00003F                       2349 ___str_5:
      00003F 1B                    2350 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2351 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2352 	.db 0x00
                                   2353 	.area CSEG    (CODE)
                                   2354 	.area CONST   (CODE)
      000052                       2355 ___str_6:
      000052 25 20 38 64 25 20 38  2356 	.ascii "% 8d% 8d"
             64
      00005A 00                    2357 	.db 0x00
                                   2358 	.area CSEG    (CODE)
                                   2359 	.area CONST   (CODE)
      00005B                       2360 ___str_7:
      00005B 1B                    2361 	.db 0x1b
      00005C 5B 32 4A              2362 	.ascii "[2J"
      00005F 1B                    2363 	.db 0x1b
      000060 5B 3F 32 35 68        2364 	.ascii "[?25h"
      000065 00                    2365 	.db 0x00
                                   2366 	.area CSEG    (CODE)
                                   2367 	.area XINIT   (CODE)
      000000                       2368 __xinit__neigh:
      000000 FF FF                 2369 	.byte #0xff, #0xff	; -1
      000002 01 00                 2370 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2371 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2372 	.byte #0xff, #0xff	; -1
      000008 01 00                 2373 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2374 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2375 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2376 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2377 	.byte #0xff, #0xff	; -1
      000012 00 00                 2378 	.byte #0x00, #0x00	;  0
      000014 00 00                 2379 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2380 	.byte #0xff, #0xff	; -1
      000018 01 00                 2381 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2382 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2383 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2384 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2385 	.byte #0xff, #0xff	; -1
      000022 01 00                 2386 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2387 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2388 	.byte #0xff, #0xff	; -1
      000028 01 00                 2389 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2390 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2391 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2392 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2393 	.byte #0xff, #0xff	; -1
      000032 00 00                 2394 	.byte #0x00, #0x00	;  0
      000034 00 00                 2395 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2396 	.byte #0xff, #0xff	; -1
      000038 01 00                 2397 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2398 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2399 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2400 	.byte #0x01, #0x00	;  1
                                   2401 	.area CABS    (ABS,CODE)
