                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9648
      0025B0                        323 _stack:
      0025B0                        324 	.ds 38592
      00BC70                        325 _sp:
      00BC70                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
      000000                        335 _neigh:
      000000                        336 	.ds 64
                                    337 	.area HOME    (CODE)
                                    338 	.area GSINIT0 (CODE)
                                    339 	.area GSINIT1 (CODE)
                                    340 	.area GSINIT2 (CODE)
                                    341 	.area GSINIT3 (CODE)
                                    342 	.area GSINIT4 (CODE)
                                    343 	.area GSINIT5 (CODE)
                                    344 	.area GSINIT  (CODE)
                                    345 	.area GSFINAL (CODE)
                                    346 	.area CSEG    (CODE)
                                    347 ;--------------------------------------------------------
                                    348 ; interrupt vector 
                                    349 ;--------------------------------------------------------
                                    350 	.area HOME    (CODE)
      000000                        351 __interrupt_vect:
      000000 02r00r00         [24]  352 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  353 	ljmp	_int0
                                    354 ;--------------------------------------------------------
                                    355 ; global & static initialisations
                                    356 ;--------------------------------------------------------
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.area GSFINAL (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.globl __sdcc_gsinit_startup
                                    362 	.globl __sdcc_program_startup
                                    363 	.globl __start__stack
                                    364 	.globl __mcs51_genXINIT
                                    365 	.globl __mcs51_genXRAMCLEAR
                                    366 	.globl __mcs51_genRAMCLEAR
                                    367 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  368 	ljmp	__sdcc_program_startup
                                    369 ;--------------------------------------------------------
                                    370 ; Home
                                    371 ;--------------------------------------------------------
                                    372 	.area HOME    (CODE)
                                    373 	.area HOME    (CODE)
      000006                        374 __sdcc_program_startup:
      000006 02r06r43         [24]  375 	ljmp	_main
                                    376 ;	return from main will return to caller
                                    377 ;--------------------------------------------------------
                                    378 ; code
                                    379 ;--------------------------------------------------------
                                    380 	.area CSEG    (CODE)
                                    381 ;------------------------------------------------------------
                                    382 ;Allocation info for local variables in function 'putchar'
                                    383 ;------------------------------------------------------------
                                    384 ;c                         Allocated to registers 
                                    385 ;------------------------------------------------------------
                                    386 ;	walk.c:9: int putchar(int c) __naked {
                                    387 ;	-----------------------------------------
                                    388 ;	 function putchar
                                    389 ;	-----------------------------------------
      000000                        390 _putchar:
                                    391 ;	naked function: no prologue.
                                    392 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  393 	mov	a, dpl
      000002 02 00 30         [24]  394 	ljmp	0x0030
                                    395 ;	walk.c:15: }
                                    396 ;	naked function: no epilogue.
                                    397 ;------------------------------------------------------------
                                    398 ;Allocation info for local variables in function 'getchar'
                                    399 ;------------------------------------------------------------
                                    400 ;	walk.c:17: int getchar(void) __naked {
                                    401 ;	-----------------------------------------
                                    402 ;	 function getchar
                                    403 ;	-----------------------------------------
      000005                        404 _getchar:
                                    405 ;	naked function: no prologue.
                                    406 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  407 	lcall	0x0032
      000008 F5 82            [12]  408 	mov	dpl, a
      00000A 75 83 00         [24]  409 	mov	dph, #0
      00000D 22               [24]  410 	ret
                                    411 ;	walk.c:24: }
                                    412 ;	naked function: no epilogue.
                                    413 ;------------------------------------------------------------
                                    414 ;Allocation info for local variables in function 'int0'
                                    415 ;------------------------------------------------------------
                                    416 ;	walk.c:28: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    417 ;	-----------------------------------------
                                    418 ;	 function int0
                                    419 ;	-----------------------------------------
      00000E                        420 _int0:
                           00000F   421 	ar7 = 0x0f
                           00000E   422 	ar6 = 0x0e
                           00000D   423 	ar5 = 0x0d
                           00000C   424 	ar4 = 0x0c
                           00000B   425 	ar3 = 0x0b
                           00000A   426 	ar2 = 0x0a
                           000009   427 	ar1 = 0x09
                           000008   428 	ar0 = 0x08
      00000E C0 D0            [24]  429 	push	psw
      000010 75 D0 08         [24]  430 	mov	psw,#0x08
                                    431 ;	walk.c:29: i0 = 0u;
      000013 78r00            [12]  432 	mov	r0,#_i0
      000015 76 00            [12]  433 	mov	@r0,#0x00
                                    434 ;	walk.c:30: }
      000017 D0 D0            [24]  435 	pop	psw
      000019 32               [24]  436 	reti
                                    437 ;	eliminated unneeded push/pop dpl
                                    438 ;	eliminated unneeded push/pop dph
                                    439 ;	eliminated unneeded push/pop b
                                    440 ;	eliminated unneeded push/pop acc
                                    441 ;------------------------------------------------------------
                                    442 ;Allocation info for local variables in function 'reset'
                                    443 ;------------------------------------------------------------
                                    444 ;	walk.c:32: static void reset(void) __naked {
                                    445 ;	-----------------------------------------
                                    446 ;	 function reset
                                    447 ;	-----------------------------------------
      00001A                        448 _reset:
                                    449 ;	naked function: no prologue.
                                    450 ;	walk.c:35: __endasm;
      00001A 43 87 02         [24]  451 	orl	pcon, #2
                                    452 ;	walk.c:36: }
                                    453 ;	naked function: no epilogue.
                                    454 ;------------------------------------------------------------
                                    455 ;Allocation info for local variables in function 'bang'
                                    456 ;------------------------------------------------------------
                                    457 ;	walk.c:38: static void bang(void) {
                                    458 ;	-----------------------------------------
                                    459 ;	 function bang
                                    460 ;	-----------------------------------------
      00001D                        461 _bang:
                           000007   462 	ar7 = 0x07
                           000006   463 	ar6 = 0x06
                           000005   464 	ar5 = 0x05
                           000004   465 	ar4 = 0x04
                           000003   466 	ar3 = 0x03
                           000002   467 	ar2 = 0x02
                           000001   468 	ar1 = 0x01
                           000000   469 	ar0 = 0x00
                                    470 ;	walk.c:39: (void)puts("Memory error");
      00001D 90r00r00         [24]  471 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  472 	mov	b,#0x80
      000023 12r00r00         [24]  473 	lcall	_puts
                                    474 ;	walk.c:40: reset();
                                    475 ;	walk.c:42: return;
                                    476 ;	walk.c:43: }
      000026 02r00r1A         [24]  477 	ljmp	_reset
                                    478 ;------------------------------------------------------------
                                    479 ;Allocation info for local variables in function 'flashOE'
                                    480 ;------------------------------------------------------------
                                    481 ;mask                      Allocated to registers r7 
                                    482 ;OEreg                     Allocated to stack - _bp +1
                                    483 ;------------------------------------------------------------
                                    484 ;	walk.c:84: static void flashOE(uint8_t mask) {
                                    485 ;	-----------------------------------------
                                    486 ;	 function flashOE
                                    487 ;	-----------------------------------------
      000029                        488 _flashOE:
      000029 C0*00            [24]  489 	push	_bp
      00002B 85 81*00         [24]  490 	mov	_bp,sp
      00002E 05 81            [12]  491 	inc	sp
      000030 05 81            [12]  492 	inc	sp
      000032 AF 82            [24]  493 	mov	r7,dpl
                                    494 ;	walk.c:87: P1_7 = 0;
                                    495 ;	assignBit
      000034 C2 97            [12]  496 	clr	_P1_7
                                    497 ;	walk.c:88: *OEreg = OE76;
      000036 90 F0 06         [24]  498 	mov	dptr,#0xf006
      000039 78r01            [12]  499 	mov	r0,#_OE76
      00003B E6               [12]  500 	mov	a,@r0
      00003C F0               [24]  501 	movx	@dptr,a
                                    502 ;	walk.c:89: P1_7 = 1;
                                    503 ;	assignBit
      00003D D2 97            [12]  504 	setb	_P1_7
                                    505 ;	walk.c:90: OE76 ^= mask;
      00003F 78r01            [12]  506 	mov	r0,#_OE76
      000041 EF               [12]  507 	mov	a,r7
      000042 66               [12]  508 	xrl	a,@r0
      000043 F6               [12]  509 	mov	@r0,a
                                    510 ;	walk.c:92: return;
                                    511 ;	walk.c:93: }
      000044 85*00 81         [24]  512 	mov	sp,_bp
      000047 D0*00            [24]  513 	pop	_bp
      000049 22               [24]  514 	ret
                                    515 ;------------------------------------------------------------
                                    516 ;Allocation info for local variables in function 'update'
                                    517 ;------------------------------------------------------------
                                    518 ;cur                       Allocated to stack - _bp -5
                                    519 ;j                         Allocated to stack - _bp -6
                                    520 ;t                         Allocated to stack - _bp +1
                                    521 ;sloc0                     Allocated to stack - _bp +4
                                    522 ;sloc1                     Allocated to stack - _bp +6
                                    523 ;sloc2                     Allocated to stack - _bp +8
                                    524 ;------------------------------------------------------------
                                    525 ;	walk.c:95: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    526 ;	-----------------------------------------
                                    527 ;	 function update
                                    528 ;	-----------------------------------------
      00004A                        529 _update:
      00004A C0*00            [24]  530 	push	_bp
      00004C 85 81*00         [24]  531 	mov	_bp,sp
      00004F C0 82            [24]  532 	push	dpl
      000051 C0 83            [24]  533 	push	dph
      000053 C0 F0            [24]  534 	push	b
      000055 E5 81            [12]  535 	mov	a,sp
      000057 24 07            [12]  536 	add	a,#0x07
      000059 F5 81            [12]  537 	mov	sp,a
                                    538 ;	walk.c:96: t->r = cur->r + neigh[j].r;
      00005B E5*00            [12]  539 	mov	a,_bp
      00005D 24 FB            [12]  540 	add	a,#0xfb
      00005F F8               [12]  541 	mov	r0,a
      000060 86 02            [24]  542 	mov	ar2,@r0
      000062 08               [12]  543 	inc	r0
      000063 86 03            [24]  544 	mov	ar3,@r0
      000065 08               [12]  545 	inc	r0
      000066 86 04            [24]  546 	mov	ar4,@r0
      000068 8A 82            [24]  547 	mov	dpl,r2
      00006A 8B 83            [24]  548 	mov	dph,r3
      00006C 8C F0            [24]  549 	mov	b,r4
      00006E E5*00            [12]  550 	mov	a,_bp
      000070 24 04            [12]  551 	add	a,#0x04
      000072 F8               [12]  552 	mov	r0,a
      000073 12r00r00         [24]  553 	lcall	__gptrget
      000076 F6               [12]  554 	mov	@r0,a
      000077 A3               [24]  555 	inc	dptr
      000078 12r00r00         [24]  556 	lcall	__gptrget
      00007B 08               [12]  557 	inc	r0
      00007C F6               [12]  558 	mov	@r0,a
      00007D E5*00            [12]  559 	mov	a,_bp
      00007F 24 FA            [12]  560 	add	a,#0xfa
      000081 F8               [12]  561 	mov	r0,a
      000082 E5*00            [12]  562 	mov	a,_bp
      000084 24 06            [12]  563 	add	a,#0x06
      000086 F9               [12]  564 	mov	r1,a
      000087 E6               [12]  565 	mov	a,@r0
      000088 75 F0 04         [24]  566 	mov	b,#0x04
      00008B A4               [48]  567 	mul	ab
      00008C F7               [12]  568 	mov	@r1,a
      00008D 09               [12]  569 	inc	r1
      00008E A7 F0            [24]  570 	mov	@r1,b
      000090 E5*00            [12]  571 	mov	a,_bp
      000092 24 06            [12]  572 	add	a,#0x06
      000094 F8               [12]  573 	mov	r0,a
      000095 E6               [12]  574 	mov	a,@r0
      000096 24r00            [12]  575 	add	a,#_neigh
      000098 F5 82            [12]  576 	mov	dpl,a
      00009A 08               [12]  577 	inc	r0
      00009B E6               [12]  578 	mov	a,@r0
      00009C 34s00            [12]  579 	addc	a,#(_neigh >> 8)
      00009E F5 83            [12]  580 	mov	dph,a
      0000A0 E0               [24]  581 	movx	a,@dptr
      0000A1 FF               [12]  582 	mov	r7,a
      0000A2 A3               [24]  583 	inc	dptr
      0000A3 E0               [24]  584 	movx	a,@dptr
      0000A4 FE               [12]  585 	mov	r6,a
      0000A5 E5*00            [12]  586 	mov	a,_bp
      0000A7 24 04            [12]  587 	add	a,#0x04
      0000A9 F8               [12]  588 	mov	r0,a
      0000AA EF               [12]  589 	mov	a,r7
      0000AB 26               [12]  590 	add	a,@r0
      0000AC FF               [12]  591 	mov	r7,a
      0000AD EE               [12]  592 	mov	a,r6
      0000AE 08               [12]  593 	inc	r0
      0000AF 36               [12]  594 	addc	a,@r0
      0000B0 FE               [12]  595 	mov	r6,a
      0000B1 A8*00            [24]  596 	mov	r0,_bp
      0000B3 08               [12]  597 	inc	r0
      0000B4 86 82            [24]  598 	mov	dpl,@r0
      0000B6 08               [12]  599 	inc	r0
      0000B7 86 83            [24]  600 	mov	dph,@r0
      0000B9 08               [12]  601 	inc	r0
      0000BA 86 F0            [24]  602 	mov	b,@r0
      0000BC EF               [12]  603 	mov	a,r7
      0000BD 12r00r00         [24]  604 	lcall	__gptrput
      0000C0 A3               [24]  605 	inc	dptr
      0000C1 EE               [12]  606 	mov	a,r6
      0000C2 12r00r00         [24]  607 	lcall	__gptrput
                                    608 ;	walk.c:97: t->c = cur->c + neigh[j].c;
      0000C5 A8*00            [24]  609 	mov	r0,_bp
      0000C7 08               [12]  610 	inc	r0
      0000C8 E5*00            [12]  611 	mov	a,_bp
      0000CA 24 08            [12]  612 	add	a,#0x08
      0000CC F9               [12]  613 	mov	r1,a
      0000CD 74 02            [12]  614 	mov	a,#0x02
      0000CF 26               [12]  615 	add	a,@r0
      0000D0 F7               [12]  616 	mov	@r1,a
      0000D1 E4               [12]  617 	clr	a
      0000D2 08               [12]  618 	inc	r0
      0000D3 36               [12]  619 	addc	a,@r0
      0000D4 09               [12]  620 	inc	r1
      0000D5 F7               [12]  621 	mov	@r1,a
      0000D6 08               [12]  622 	inc	r0
      0000D7 09               [12]  623 	inc	r1
      0000D8 E6               [12]  624 	mov	a,@r0
      0000D9 F7               [12]  625 	mov	@r1,a
      0000DA 74 02            [12]  626 	mov	a,#0x02
      0000DC 2A               [12]  627 	add	a,r2
      0000DD FA               [12]  628 	mov	r2,a
      0000DE E4               [12]  629 	clr	a
      0000DF 3B               [12]  630 	addc	a,r3
      0000E0 FB               [12]  631 	mov	r3,a
      0000E1 8A 82            [24]  632 	mov	dpl,r2
      0000E3 8B 83            [24]  633 	mov	dph,r3
      0000E5 8C F0            [24]  634 	mov	b,r4
      0000E7 12r00r00         [24]  635 	lcall	__gptrget
      0000EA FA               [12]  636 	mov	r2,a
      0000EB A3               [24]  637 	inc	dptr
      0000EC 12r00r00         [24]  638 	lcall	__gptrget
      0000EF FB               [12]  639 	mov	r3,a
      0000F0 E5*00            [12]  640 	mov	a,_bp
      0000F2 24 06            [12]  641 	add	a,#0x06
      0000F4 F8               [12]  642 	mov	r0,a
      0000F5 E6               [12]  643 	mov	a,@r0
      0000F6 24r00            [12]  644 	add	a,#_neigh
      0000F8 FC               [12]  645 	mov	r4,a
      0000F9 08               [12]  646 	inc	r0
      0000FA E6               [12]  647 	mov	a,@r0
      0000FB 34s00            [12]  648 	addc	a,#(_neigh >> 8)
      0000FD FD               [12]  649 	mov	r5,a
      0000FE 8C 82            [24]  650 	mov	dpl,r4
      000100 8D 83            [24]  651 	mov	dph,r5
      000102 A3               [24]  652 	inc	dptr
      000103 A3               [24]  653 	inc	dptr
      000104 E0               [24]  654 	movx	a,@dptr
      000105 FC               [12]  655 	mov	r4,a
      000106 A3               [24]  656 	inc	dptr
      000107 E0               [24]  657 	movx	a,@dptr
      000108 FD               [12]  658 	mov	r5,a
      000109 EC               [12]  659 	mov	a,r4
      00010A 2A               [12]  660 	add	a,r2
      00010B FA               [12]  661 	mov	r2,a
      00010C ED               [12]  662 	mov	a,r5
      00010D 3B               [12]  663 	addc	a,r3
      00010E FB               [12]  664 	mov	r3,a
      00010F E5*00            [12]  665 	mov	a,_bp
      000111 24 08            [12]  666 	add	a,#0x08
      000113 F8               [12]  667 	mov	r0,a
      000114 86 82            [24]  668 	mov	dpl,@r0
      000116 08               [12]  669 	inc	r0
      000117 86 83            [24]  670 	mov	dph,@r0
      000119 08               [12]  671 	inc	r0
      00011A 86 F0            [24]  672 	mov	b,@r0
      00011C EA               [12]  673 	mov	a,r2
      00011D 12r00r00         [24]  674 	lcall	__gptrput
      000120 A3               [24]  675 	inc	dptr
      000121 EB               [12]  676 	mov	a,r3
      000122 12r00r00         [24]  677 	lcall	__gptrput
                                    678 ;	walk.c:99: if (t->r < 0) t->r += ROWS;
      000125 A8*00            [24]  679 	mov	r0,_bp
      000127 08               [12]  680 	inc	r0
      000128 86 82            [24]  681 	mov	dpl,@r0
      00012A 08               [12]  682 	inc	r0
      00012B 86 83            [24]  683 	mov	dph,@r0
      00012D 08               [12]  684 	inc	r0
      00012E 86 F0            [24]  685 	mov	b,@r0
      000130 12r00r00         [24]  686 	lcall	__gptrget
      000133 FD               [12]  687 	mov	r5,a
      000134 A3               [24]  688 	inc	dptr
      000135 12r00r00         [24]  689 	lcall	__gptrget
      000138 FC               [12]  690 	mov	r4,a
      000139 EE               [12]  691 	mov	a,r6
      00013A 30 E7 1D         [24]  692 	jnb	acc.7,00104$
      00013D 74 30            [12]  693 	mov	a,#0x30
      00013F 2D               [12]  694 	add	a,r5
      000140 FF               [12]  695 	mov	r7,a
      000141 E4               [12]  696 	clr	a
      000142 3C               [12]  697 	addc	a,r4
      000143 FE               [12]  698 	mov	r6,a
      000144 A8*00            [24]  699 	mov	r0,_bp
      000146 08               [12]  700 	inc	r0
      000147 86 82            [24]  701 	mov	dpl,@r0
      000149 08               [12]  702 	inc	r0
      00014A 86 83            [24]  703 	mov	dph,@r0
      00014C 08               [12]  704 	inc	r0
      00014D 86 F0            [24]  705 	mov	b,@r0
      00014F EF               [12]  706 	mov	a,r7
      000150 12r00r00         [24]  707 	lcall	__gptrput
      000153 A3               [24]  708 	inc	dptr
      000154 EE               [12]  709 	mov	a,r6
      000155 12r00r00         [24]  710 	lcall	__gptrput
      000158 80 27            [24]  711 	sjmp	00105$
      00015A                        712 00104$:
                                    713 ;	walk.c:100: else if (t->r >= ROWS) t->r -= ROWS;
      00015A C3               [12]  714 	clr	c
      00015B ED               [12]  715 	mov	a,r5
      00015C 94 30            [12]  716 	subb	a,#0x30
      00015E EC               [12]  717 	mov	a,r4
      00015F 64 80            [12]  718 	xrl	a,#0x80
      000161 94 80            [12]  719 	subb	a,#0x80
      000163 40 1C            [24]  720 	jc	00105$
      000165 ED               [12]  721 	mov	a,r5
      000166 24 D0            [12]  722 	add	a,#0xd0
      000168 FD               [12]  723 	mov	r5,a
      000169 EC               [12]  724 	mov	a,r4
      00016A 34 FF            [12]  725 	addc	a,#0xff
      00016C FC               [12]  726 	mov	r4,a
      00016D A8*00            [24]  727 	mov	r0,_bp
      00016F 08               [12]  728 	inc	r0
      000170 86 82            [24]  729 	mov	dpl,@r0
      000172 08               [12]  730 	inc	r0
      000173 86 83            [24]  731 	mov	dph,@r0
      000175 08               [12]  732 	inc	r0
      000176 86 F0            [24]  733 	mov	b,@r0
      000178 ED               [12]  734 	mov	a,r5
      000179 12r00r00         [24]  735 	lcall	__gptrput
      00017C A3               [24]  736 	inc	dptr
      00017D EC               [12]  737 	mov	a,r4
      00017E 12r00r00         [24]  738 	lcall	__gptrput
      000181                        739 00105$:
                                    740 ;	walk.c:101: if (t->c < 0) t->c += COLS;
      000181 E5*00            [12]  741 	mov	a,_bp
      000183 24 08            [12]  742 	add	a,#0x08
      000185 F8               [12]  743 	mov	r0,a
      000186 86 82            [24]  744 	mov	dpl,@r0
      000188 08               [12]  745 	inc	r0
      000189 86 83            [24]  746 	mov	dph,@r0
      00018B 08               [12]  747 	inc	r0
      00018C 86 F0            [24]  748 	mov	b,@r0
      00018E 12r00r00         [24]  749 	lcall	__gptrget
      000191 A3               [24]  750 	inc	dptr
      000192 12r00r00         [24]  751 	lcall	__gptrget
      000195 30 E7 35         [24]  752 	jnb	acc.7,00109$
      000198 E5*00            [12]  753 	mov	a,_bp
      00019A 24 08            [12]  754 	add	a,#0x08
      00019C F8               [12]  755 	mov	r0,a
      00019D 86 82            [24]  756 	mov	dpl,@r0
      00019F 08               [12]  757 	inc	r0
      0001A0 86 83            [24]  758 	mov	dph,@r0
      0001A2 08               [12]  759 	inc	r0
      0001A3 86 F0            [24]  760 	mov	b,@r0
      0001A5 12r00r00         [24]  761 	lcall	__gptrget
      0001A8 FE               [12]  762 	mov	r6,a
      0001A9 A3               [24]  763 	inc	dptr
      0001AA 12r00r00         [24]  764 	lcall	__gptrget
      0001AD FF               [12]  765 	mov	r7,a
      0001AE 74 C9            [12]  766 	mov	a,#0xc9
      0001B0 2E               [12]  767 	add	a,r6
      0001B1 FE               [12]  768 	mov	r6,a
      0001B2 E4               [12]  769 	clr	a
      0001B3 3F               [12]  770 	addc	a,r7
      0001B4 FF               [12]  771 	mov	r7,a
      0001B5 E5*00            [12]  772 	mov	a,_bp
      0001B7 24 08            [12]  773 	add	a,#0x08
      0001B9 F8               [12]  774 	mov	r0,a
      0001BA 86 82            [24]  775 	mov	dpl,@r0
      0001BC 08               [12]  776 	inc	r0
      0001BD 86 83            [24]  777 	mov	dph,@r0
      0001BF 08               [12]  778 	inc	r0
      0001C0 86 F0            [24]  779 	mov	b,@r0
      0001C2 EE               [12]  780 	mov	a,r6
      0001C3 12r00r00         [24]  781 	lcall	__gptrput
      0001C6 A3               [24]  782 	inc	dptr
      0001C7 EF               [12]  783 	mov	a,r7
      0001C8 12r00r00         [24]  784 	lcall	__gptrput
      0001CB 80 55            [24]  785 	sjmp	00110$
      0001CD                        786 00109$:
                                    787 ;	walk.c:102: else if (t->c >= COLS) t->c -= COLS;
      0001CD E5*00            [12]  788 	mov	a,_bp
      0001CF 24 08            [12]  789 	add	a,#0x08
      0001D1 F8               [12]  790 	mov	r0,a
      0001D2 86 82            [24]  791 	mov	dpl,@r0
      0001D4 08               [12]  792 	inc	r0
      0001D5 86 83            [24]  793 	mov	dph,@r0
      0001D7 08               [12]  794 	inc	r0
      0001D8 86 F0            [24]  795 	mov	b,@r0
      0001DA 12r00r00         [24]  796 	lcall	__gptrget
      0001DD FE               [12]  797 	mov	r6,a
      0001DE A3               [24]  798 	inc	dptr
      0001DF 12r00r00         [24]  799 	lcall	__gptrget
      0001E2 FF               [12]  800 	mov	r7,a
      0001E3 C3               [12]  801 	clr	c
      0001E4 EE               [12]  802 	mov	a,r6
      0001E5 94 C9            [12]  803 	subb	a,#0xc9
      0001E7 EF               [12]  804 	mov	a,r7
      0001E8 64 80            [12]  805 	xrl	a,#0x80
      0001EA 94 80            [12]  806 	subb	a,#0x80
      0001EC 40 34            [24]  807 	jc	00110$
      0001EE E5*00            [12]  808 	mov	a,_bp
      0001F0 24 08            [12]  809 	add	a,#0x08
      0001F2 F8               [12]  810 	mov	r0,a
      0001F3 86 82            [24]  811 	mov	dpl,@r0
      0001F5 08               [12]  812 	inc	r0
      0001F6 86 83            [24]  813 	mov	dph,@r0
      0001F8 08               [12]  814 	inc	r0
      0001F9 86 F0            [24]  815 	mov	b,@r0
      0001FB 12r00r00         [24]  816 	lcall	__gptrget
      0001FE FE               [12]  817 	mov	r6,a
      0001FF A3               [24]  818 	inc	dptr
      000200 12r00r00         [24]  819 	lcall	__gptrget
      000203 FF               [12]  820 	mov	r7,a
      000204 EE               [12]  821 	mov	a,r6
      000205 24 37            [12]  822 	add	a,#0x37
      000207 FE               [12]  823 	mov	r6,a
      000208 EF               [12]  824 	mov	a,r7
      000209 34 FF            [12]  825 	addc	a,#0xff
      00020B FF               [12]  826 	mov	r7,a
      00020C E5*00            [12]  827 	mov	a,_bp
      00020E 24 08            [12]  828 	add	a,#0x08
      000210 F8               [12]  829 	mov	r0,a
      000211 86 82            [24]  830 	mov	dpl,@r0
      000213 08               [12]  831 	inc	r0
      000214 86 83            [24]  832 	mov	dph,@r0
      000216 08               [12]  833 	inc	r0
      000217 86 F0            [24]  834 	mov	b,@r0
      000219 EE               [12]  835 	mov	a,r6
      00021A 12r00r00         [24]  836 	lcall	__gptrput
      00021D A3               [24]  837 	inc	dptr
      00021E EF               [12]  838 	mov	a,r7
      00021F 12r00r00         [24]  839 	lcall	__gptrput
      000222                        840 00110$:
                                    841 ;	walk.c:104: if (g[t->r][t->c] == 0xaau) return 0u;
      000222 A8*00            [24]  842 	mov	r0,_bp
      000224 08               [12]  843 	inc	r0
      000225 86 82            [24]  844 	mov	dpl,@r0
      000227 08               [12]  845 	inc	r0
      000228 86 83            [24]  846 	mov	dph,@r0
      00022A 08               [12]  847 	inc	r0
      00022B 86 F0            [24]  848 	mov	b,@r0
      00022D 12r00r00         [24]  849 	lcall	__gptrget
      000230 FE               [12]  850 	mov	r6,a
      000231 A3               [24]  851 	inc	dptr
      000232 12r00r00         [24]  852 	lcall	__gptrget
      000235 FF               [12]  853 	mov	r7,a
      000236 C0 06            [24]  854 	push	ar6
      000238 C0 07            [24]  855 	push	ar7
      00023A 90 00 C9         [24]  856 	mov	dptr,#0x00c9
      00023D 12r00r00         [24]  857 	lcall	__mulint
      000240 AE 82            [24]  858 	mov	r6,dpl
      000242 AF 83            [24]  859 	mov	r7,dph
      000244 15 81            [12]  860 	dec	sp
      000246 15 81            [12]  861 	dec	sp
      000248 EE               [12]  862 	mov	a,r6
      000249 24r00            [12]  863 	add	a,#_g
      00024B FE               [12]  864 	mov	r6,a
      00024C EF               [12]  865 	mov	a,r7
      00024D 34s00            [12]  866 	addc	a,#(_g >> 8)
      00024F FF               [12]  867 	mov	r7,a
      000250 E5*00            [12]  868 	mov	a,_bp
      000252 24 08            [12]  869 	add	a,#0x08
      000254 F8               [12]  870 	mov	r0,a
      000255 86 82            [24]  871 	mov	dpl,@r0
      000257 08               [12]  872 	inc	r0
      000258 86 83            [24]  873 	mov	dph,@r0
      00025A 08               [12]  874 	inc	r0
      00025B 86 F0            [24]  875 	mov	b,@r0
      00025D 12r00r00         [24]  876 	lcall	__gptrget
      000260 FC               [12]  877 	mov	r4,a
      000261 A3               [24]  878 	inc	dptr
      000262 12r00r00         [24]  879 	lcall	__gptrget
      000265 FD               [12]  880 	mov	r5,a
      000266 EC               [12]  881 	mov	a,r4
      000267 2E               [12]  882 	add	a,r6
      000268 F5 82            [12]  883 	mov	dpl,a
      00026A ED               [12]  884 	mov	a,r5
      00026B 3F               [12]  885 	addc	a,r7
      00026C F5 83            [12]  886 	mov	dph,a
      00026E E0               [24]  887 	movx	a,@dptr
      00026F FF               [12]  888 	mov	r7,a
      000270 BF AA 05         [24]  889 	cjne	r7,#0xaa,00114$
      000273 75 82 00         [24]  890 	mov	dpl,#0x00
      000276 80 59            [24]  891 	sjmp	00116$
      000278                        892 00114$:
                                    893 ;	walk.c:105: else if (g[t->r][t->c] != 0x55u) bang();
      000278 A8*00            [24]  894 	mov	r0,_bp
      00027A 08               [12]  895 	inc	r0
      00027B 86 82            [24]  896 	mov	dpl,@r0
      00027D 08               [12]  897 	inc	r0
      00027E 86 83            [24]  898 	mov	dph,@r0
      000280 08               [12]  899 	inc	r0
      000281 86 F0            [24]  900 	mov	b,@r0
      000283 12r00r00         [24]  901 	lcall	__gptrget
      000286 FE               [12]  902 	mov	r6,a
      000287 A3               [24]  903 	inc	dptr
      000288 12r00r00         [24]  904 	lcall	__gptrget
      00028B FF               [12]  905 	mov	r7,a
      00028C C0 06            [24]  906 	push	ar6
      00028E C0 07            [24]  907 	push	ar7
      000290 90 00 C9         [24]  908 	mov	dptr,#0x00c9
      000293 12r00r00         [24]  909 	lcall	__mulint
      000296 AE 82            [24]  910 	mov	r6,dpl
      000298 AF 83            [24]  911 	mov	r7,dph
      00029A 15 81            [12]  912 	dec	sp
      00029C 15 81            [12]  913 	dec	sp
      00029E EE               [12]  914 	mov	a,r6
      00029F 24r00            [12]  915 	add	a,#_g
      0002A1 FE               [12]  916 	mov	r6,a
      0002A2 EF               [12]  917 	mov	a,r7
      0002A3 34s00            [12]  918 	addc	a,#(_g >> 8)
      0002A5 FF               [12]  919 	mov	r7,a
      0002A6 E5*00            [12]  920 	mov	a,_bp
      0002A8 24 08            [12]  921 	add	a,#0x08
      0002AA F8               [12]  922 	mov	r0,a
      0002AB 86 82            [24]  923 	mov	dpl,@r0
      0002AD 08               [12]  924 	inc	r0
      0002AE 86 83            [24]  925 	mov	dph,@r0
      0002B0 08               [12]  926 	inc	r0
      0002B1 86 F0            [24]  927 	mov	b,@r0
      0002B3 12r00r00         [24]  928 	lcall	__gptrget
      0002B6 FC               [12]  929 	mov	r4,a
      0002B7 A3               [24]  930 	inc	dptr
      0002B8 12r00r00         [24]  931 	lcall	__gptrget
      0002BB FD               [12]  932 	mov	r5,a
      0002BC EC               [12]  933 	mov	a,r4
      0002BD 2E               [12]  934 	add	a,r6
      0002BE F5 82            [12]  935 	mov	dpl,a
      0002C0 ED               [12]  936 	mov	a,r5
      0002C1 3F               [12]  937 	addc	a,r7
      0002C2 F5 83            [12]  938 	mov	dph,a
      0002C4 E0               [24]  939 	movx	a,@dptr
      0002C5 FF               [12]  940 	mov	r7,a
      0002C6 BF 55 02         [24]  941 	cjne	r7,#0x55,00148$
      0002C9 80 03            [24]  942 	sjmp	00115$
      0002CB                        943 00148$:
      0002CB 12r00r1D         [24]  944 	lcall	_bang
      0002CE                        945 00115$:
                                    946 ;	walk.c:107: return 1u;
      0002CE 75 82 01         [24]  947 	mov	dpl,#0x01
      0002D1                        948 00116$:
                                    949 ;	walk.c:108: }
      0002D1 85*00 81         [24]  950 	mov	sp,_bp
      0002D4 D0*00            [24]  951 	pop	_bp
      0002D6 22               [24]  952 	ret
                                    953 ;------------------------------------------------------------
                                    954 ;Allocation info for local variables in function 'walk'
                                    955 ;------------------------------------------------------------
                                    956 ;nstart                    Allocated to registers 
                                    957 ;cur                       Allocated to stack - _bp +10
                                    958 ;t                         Allocated to stack - _bp +14
                                    959 ;j                         Allocated to stack - _bp +18
                                    960 ;f                         Allocated to registers r3 
                                    961 ;sloc0                     Allocated to stack - _bp +1
                                    962 ;sloc1                     Allocated to stack - _bp +2
                                    963 ;sloc2                     Allocated to stack - _bp +3
                                    964 ;sloc3                     Allocated to stack - _bp +17
                                    965 ;sloc4                     Allocated to stack - _bp +4
                                    966 ;sloc5                     Allocated to stack - _bp +5
                                    967 ;sloc6                     Allocated to stack - _bp +6
                                    968 ;sloc7                     Allocated to stack - _bp +7
                                    969 ;------------------------------------------------------------
                                    970 ;	walk.c:110: static void walk(struct node *nstart) {
                                    971 ;	-----------------------------------------
                                    972 ;	 function walk
                                    973 ;	-----------------------------------------
      0002D7                        974 _walk:
      0002D7 C0*00            [24]  975 	push	_bp
      0002D9 E5 81            [12]  976 	mov	a,sp
      0002DB F5*00            [12]  977 	mov	_bp,a
      0002DD 24 12            [12]  978 	add	a,#0x12
      0002DF F5 81            [12]  979 	mov	sp,a
      0002E1 AD 82            [24]  980 	mov	r5,dpl
      0002E3 AE 83            [24]  981 	mov	r6,dph
      0002E5 AF F0            [24]  982 	mov	r7,b
                                    983 ;	walk.c:114: cur = *nstart;
      0002E7 E5*00            [12]  984 	mov	a,_bp
      0002E9 24 0A            [12]  985 	add	a,#0x0a
      0002EB F9               [12]  986 	mov	r1,a
      0002EC FA               [12]  987 	mov	r2,a
      0002ED 7B 00            [12]  988 	mov	r3,#0x00
      0002EF 7C 40            [12]  989 	mov	r4,#0x40
      0002F1 C0 01            [24]  990 	push	ar1
      0002F3 74 04            [12]  991 	mov	a,#0x04
      0002F5 C0 E0            [24]  992 	push	acc
      0002F7 E4               [12]  993 	clr	a
      0002F8 C0 E0            [24]  994 	push	acc
      0002FA C0 05            [24]  995 	push	ar5
      0002FC C0 06            [24]  996 	push	ar6
      0002FE C0 07            [24]  997 	push	ar7
      000300 8A 82            [24]  998 	mov	dpl,r2
      000302 8B 83            [24]  999 	mov	dph,r3
      000304 8C F0            [24] 1000 	mov	b,r4
      000306 12r00r00         [24] 1001 	lcall	___memcpy
      000309 E5 81            [12] 1002 	mov	a,sp
      00030B 24 FB            [12] 1003 	add	a,#0xfb
      00030D F5 81            [12] 1004 	mov	sp,a
      00030F D0 01            [24] 1005 	pop	ar1
                                   1006 ;	walk.c:116: process:
      000311 E5*00            [12] 1007 	mov	a,_bp
      000313 24 06            [12] 1008 	add	a,#0x06
      000315 F8               [12] 1009 	mov	r0,a
      000316 A6 01            [24] 1010 	mov	@r0,ar1
      000318 E5*00            [12] 1011 	mov	a,_bp
      00031A 24 0E            [12] 1012 	add	a,#0x0e
      00031C FE               [12] 1013 	mov	r6,a
      00031D E5*00            [12] 1014 	mov	a,_bp
      00031F 24 03            [12] 1015 	add	a,#0x03
      000321 F8               [12] 1016 	mov	r0,a
      000322 A6 01            [24] 1017 	mov	@r0,ar1
      000324 E5*00            [12] 1018 	mov	a,_bp
      000326 24 05            [12] 1019 	add	a,#0x05
      000328 F8               [12] 1020 	mov	r0,a
      000329 A6 01            [24] 1021 	mov	@r0,ar1
      00032B E5*00            [12] 1022 	mov	a,_bp
      00032D 24 04            [12] 1023 	add	a,#0x04
      00032F F8               [12] 1024 	mov	r0,a
      000330 A6 06            [24] 1025 	mov	@r0,ar6
      000332 89 02            [24] 1026 	mov	ar2,r1
      000334 A8*00            [24] 1027 	mov	r0,_bp
      000336 08               [12] 1028 	inc	r0
      000337 A6 06            [24] 1029 	mov	@r0,ar6
      000339 A8*00            [24] 1030 	mov	r0,_bp
      00033B 08               [12] 1031 	inc	r0
      00033C 08               [12] 1032 	inc	r0
      00033D A6 01            [24] 1033 	mov	@r0,ar1
      00033F 74 02            [12] 1034 	mov	a,#0x02
      000341 29               [12] 1035 	add	a,r1
      000342 F8               [12] 1036 	mov	r0,a
      000343                       1037 00101$:
                                   1038 ;	walk.c:117: g[cur.r][cur.c] = 0xaau;
      000343 C0 02            [24] 1039 	push	ar2
      000345 87 02            [24] 1040 	mov	ar2,@r1
      000347 09               [12] 1041 	inc	r1
      000348 87 05            [24] 1042 	mov	ar5,@r1
      00034A 19               [12] 1043 	dec	r1
      00034B C0 06            [24] 1044 	push	ar6
      00034D C0 01            [24] 1045 	push	ar1
      00034F C0 00            [24] 1046 	push	ar0
      000351 C0 02            [24] 1047 	push	ar2
      000353 C0 05            [24] 1048 	push	ar5
      000355 90 00 C9         [24] 1049 	mov	dptr,#0x00c9
      000358 12r00r00         [24] 1050 	lcall	__mulint
      00035B AA 82            [24] 1051 	mov	r2,dpl
      00035D AD 83            [24] 1052 	mov	r5,dph
      00035F 15 81            [12] 1053 	dec	sp
      000361 15 81            [12] 1054 	dec	sp
      000363 D0 00            [24] 1055 	pop	ar0
      000365 D0 01            [24] 1056 	pop	ar1
      000367 EA               [12] 1057 	mov	a,r2
      000368 24r00            [12] 1058 	add	a,#_g
      00036A FF               [12] 1059 	mov	r7,a
      00036B ED               [12] 1060 	mov	a,r5
      00036C 34s00            [12] 1061 	addc	a,#(_g >> 8)
      00036E FC               [12] 1062 	mov	r4,a
      00036F 86 02            [24] 1063 	mov	ar2,@r0
      000371 08               [12] 1064 	inc	r0
      000372 86 05            [24] 1065 	mov	ar5,@r0
      000374 18               [12] 1066 	dec	r0
      000375 EA               [12] 1067 	mov	a,r2
      000376 2F               [12] 1068 	add	a,r7
      000377 F5 82            [12] 1069 	mov	dpl,a
      000379 ED               [12] 1070 	mov	a,r5
      00037A 3C               [12] 1071 	addc	a,r4
      00037B F5 83            [12] 1072 	mov	dph,a
      00037D 74 AA            [12] 1073 	mov	a,#0xaa
      00037F F0               [24] 1074 	movx	@dptr,a
                                   1075 ;	walk.c:119: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000380 86 02            [24] 1076 	mov	ar2,@r0
      000382 08               [12] 1077 	inc	r0
      000383 86 05            [24] 1078 	mov	ar5,@r0
      000385 18               [12] 1079 	dec	r0
      000386 74 01            [12] 1080 	mov	a,#0x01
      000388 2A               [12] 1081 	add	a,r2
      000389 FF               [12] 1082 	mov	r7,a
      00038A E4               [12] 1083 	clr	a
      00038B 3D               [12] 1084 	addc	a,r5
      00038C FC               [12] 1085 	mov	r4,a
      00038D 87 02            [24] 1086 	mov	ar2,@r1
      00038F 09               [12] 1087 	inc	r1
      000390 87 05            [24] 1088 	mov	ar5,@r1
      000392 19               [12] 1089 	dec	r1
      000393 74 04            [12] 1090 	mov	a,#0x04
      000395 2A               [12] 1091 	add	a,r2
      000396 FA               [12] 1092 	mov	r2,a
      000397 E4               [12] 1093 	clr	a
      000398 3D               [12] 1094 	addc	a,r5
      000399 FD               [12] 1095 	mov	r5,a
      00039A C0 02            [24] 1096 	push	ar2
      00039C C0 01            [24] 1097 	push	ar1
      00039E C0 00            [24] 1098 	push	ar0
      0003A0 C0 07            [24] 1099 	push	ar7
      0003A2 C0 04            [24] 1100 	push	ar4
      0003A4 C0 02            [24] 1101 	push	ar2
      0003A6 C0 05            [24] 1102 	push	ar5
      0003A8 74r0D            [12] 1103 	mov	a,#___str_1
      0003AA C0 E0            [24] 1104 	push	acc
      0003AC 74s00            [12] 1105 	mov	a,#(___str_1 >> 8)
      0003AE C0 E0            [24] 1106 	push	acc
      0003B0 74 80            [12] 1107 	mov	a,#0x80
      0003B2 C0 E0            [24] 1108 	push	acc
      0003B4 12r00r00         [24] 1109 	lcall	_printf
      0003B7 E5 81            [12] 1110 	mov	a,sp
      0003B9 24 F9            [12] 1111 	add	a,#0xf9
      0003BB F5 81            [12] 1112 	mov	sp,a
                                   1113 ;	walk.c:120: flashOE(OE76_MASK7);
      0003BD 75 82 80         [24] 1114 	mov	dpl,#0x80
      0003C0 12r00r29         [24] 1115 	lcall	_flashOE
      0003C3 D0 00            [24] 1116 	pop	ar0
      0003C5 D0 01            [24] 1117 	pop	ar1
      0003C7 D0 02            [24] 1118 	pop	ar2
      0003C9 D0 06            [24] 1119 	pop	ar6
                                   1120 ;	walk.c:145: return;
      0003CB D0 02            [24] 1121 	pop	ar2
                                   1122 ;	walk.c:122: next:
      0003CD                       1123 00102$:
                                   1124 ;	walk.c:123: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003CD C0 02            [24] 1125 	push	ar2
      0003CF 86 07            [24] 1126 	mov	ar7,@r0
      0003D1 08               [12] 1127 	inc	r0
      0003D2 86 04            [24] 1128 	mov	ar4,@r0
      0003D4 18               [12] 1129 	dec	r0
      0003D5 87 02            [24] 1130 	mov	ar2,@r1
      0003D7 09               [12] 1131 	inc	r1
      0003D8 87 05            [24] 1132 	mov	ar5,@r1
      0003DA 19               [12] 1133 	dec	r1
      0003DB C0 06            [24] 1134 	push	ar6
      0003DD C0 02            [24] 1135 	push	ar2
      0003DF C0 01            [24] 1136 	push	ar1
      0003E1 C0 00            [24] 1137 	push	ar0
      0003E3 C0 07            [24] 1138 	push	ar7
      0003E5 C0 04            [24] 1139 	push	ar4
      0003E7 C0 02            [24] 1140 	push	ar2
      0003E9 C0 05            [24] 1141 	push	ar5
      0003EB 90rBCr70         [24] 1142 	mov	dptr,#_sp
      0003EE E0               [24] 1143 	movx	a,@dptr
      0003EF C0 E0            [24] 1144 	push	acc
      0003F1 A3               [24] 1145 	inc	dptr
      0003F2 E0               [24] 1146 	movx	a,@dptr
      0003F3 C0 E0            [24] 1147 	push	acc
      0003F5 74r17            [12] 1148 	mov	a,#___str_2
      0003F7 C0 E0            [24] 1149 	push	acc
      0003F9 74s00            [12] 1150 	mov	a,#(___str_2 >> 8)
      0003FB C0 E0            [24] 1151 	push	acc
      0003FD 74 80            [12] 1152 	mov	a,#0x80
      0003FF C0 E0            [24] 1153 	push	acc
      000401 12r00r00         [24] 1154 	lcall	_printf
      000404 E5 81            [12] 1155 	mov	a,sp
      000406 24 F7            [12] 1156 	add	a,#0xf7
      000408 F5 81            [12] 1157 	mov	sp,a
      00040A D0 00            [24] 1158 	pop	ar0
      00040C D0 01            [24] 1159 	pop	ar1
      00040E D0 02            [24] 1160 	pop	ar2
      000410 D0 06            [24] 1161 	pop	ar6
                                   1162 ;	walk.c:125: for (j = 0u, f = 0u; j < NMAX; j++) {
      000412 7B 00            [12] 1163 	mov	r3,#0x00
      000414 C0 00            [24] 1164 	push	ar0
      000416 E5*00            [12] 1165 	mov	a,_bp
      000418 24 12            [12] 1166 	add	a,#0x12
      00041A F8               [12] 1167 	mov	r0,a
      00041B 76 00            [12] 1168 	mov	@r0,#0x00
      00041D D0 00            [24] 1169 	pop	ar0
                                   1170 ;	walk.c:145: return;
      00041F D0 02            [24] 1171 	pop	ar2
                                   1172 ;	walk.c:125: for (j = 0u, f = 0u; j < NMAX; j++) {
      000421                       1173 00119$:
      000421 C0 00            [24] 1174 	push	ar0
      000423 E5*00            [12] 1175 	mov	a,_bp
      000425 24 12            [12] 1176 	add	a,#0x12
      000427 F8               [12] 1177 	mov	r0,a
      000428 B6 10 00         [24] 1178 	cjne	@r0,#0x10,00159$
      00042B                       1179 00159$:
      00042B D0 00            [24] 1180 	pop	ar0
      00042D 50 7A            [24] 1181 	jnc	00106$
                                   1182 ;	walk.c:126: if (!update(&t, &cur, j)) continue;
      00042F C0 02            [24] 1183 	push	ar2
      000431 C0 00            [24] 1184 	push	ar0
      000433 E5*00            [12] 1185 	mov	a,_bp
      000435 24 06            [12] 1186 	add	a,#0x06
      000437 F8               [12] 1187 	mov	r0,a
      000438 C0 01            [24] 1188 	push	ar1
      00043A E5*00            [12] 1189 	mov	a,_bp
      00043C 24 07            [12] 1190 	add	a,#0x07
      00043E F9               [12] 1191 	mov	r1,a
      00043F E6               [12] 1192 	mov	a,@r0
      000440 F7               [12] 1193 	mov	@r1,a
      000441 09               [12] 1194 	inc	r1
      000442 77 00            [12] 1195 	mov	@r1,#0x00
      000444 09               [12] 1196 	inc	r1
      000445 77 40            [12] 1197 	mov	@r1,#0x40
      000447 D0 01            [24] 1198 	pop	ar1
      000449 D0 00            [24] 1199 	pop	ar0
      00044B 8E 04            [24] 1200 	mov	ar4,r6
      00044D 7D 00            [12] 1201 	mov	r5,#0x00
      00044F 7F 40            [12] 1202 	mov	r7,#0x40
      000451 C0 06            [24] 1203 	push	ar6
      000453 C0 03            [24] 1204 	push	ar3
      000455 C0 02            [24] 1205 	push	ar2
      000457 C0 01            [24] 1206 	push	ar1
      000459 C0 00            [24] 1207 	push	ar0
      00045B 85 00 F0         [24] 1208 	mov	b,ar0
      00045E E5*00            [12] 1209 	mov	a,_bp
      000460 24 12            [12] 1210 	add	a,#0x12
      000462 F8               [12] 1211 	mov	r0,a
      000463 E6               [12] 1212 	mov	a,@r0
      000464 C0 E0            [24] 1213 	push	acc
      000466 A8 F0            [24] 1214 	mov	r0,b
      000468 85 00 F0         [24] 1215 	mov	b,ar0
      00046B E5*00            [12] 1216 	mov	a,_bp
      00046D 24 07            [12] 1217 	add	a,#0x07
      00046F F8               [12] 1218 	mov	r0,a
      000470 E6               [12] 1219 	mov	a,@r0
      000471 C0 E0            [24] 1220 	push	acc
      000473 08               [12] 1221 	inc	r0
      000474 E6               [12] 1222 	mov	a,@r0
      000475 C0 E0            [24] 1223 	push	acc
      000477 08               [12] 1224 	inc	r0
      000478 E6               [12] 1225 	mov	a,@r0
      000479 C0 E0            [24] 1226 	push	acc
      00047B 8C 82            [24] 1227 	mov	dpl,r4
      00047D 8D 83            [24] 1228 	mov	dph,r5
      00047F 8F F0            [24] 1229 	mov	b,r7
      000481 12r00r4A         [24] 1230 	lcall	_update
      000484 AF 82            [24] 1231 	mov	r7,dpl
      000486 E5 81            [12] 1232 	mov	a,sp
      000488 24 FC            [12] 1233 	add	a,#0xfc
      00048A F5 81            [12] 1234 	mov	sp,a
      00048C D0 00            [24] 1235 	pop	ar0
      00048E D0 01            [24] 1236 	pop	ar1
      000490 D0 02            [24] 1237 	pop	ar2
      000492 D0 03            [24] 1238 	pop	ar3
      000494 D0 06            [24] 1239 	pop	ar6
      000496 D0 02            [24] 1240 	pop	ar2
      000498 EF               [12] 1241 	mov	a,r7
      000499 60 01            [24] 1242 	jz	00105$
                                   1243 ;	walk.c:127: f++;
      00049B 0B               [12] 1244 	inc	r3
      00049C                       1245 00105$:
                                   1246 ;	walk.c:125: for (j = 0u, f = 0u; j < NMAX; j++) {
      00049C C0 00            [24] 1247 	push	ar0
      00049E E5*00            [12] 1248 	mov	a,_bp
      0004A0 24 12            [12] 1249 	add	a,#0x12
      0004A2 F8               [12] 1250 	mov	r0,a
      0004A3 06               [12] 1251 	inc	@r0
      0004A4 D0 00            [24] 1252 	pop	ar0
      0004A6 02r04r21         [24] 1253 	ljmp	00119$
      0004A9                       1254 00106$:
                                   1255 ;	walk.c:130: if (f) {
      0004A9 EB               [12] 1256 	mov	a,r3
      0004AA 70 03            [24] 1257 	jnz	00162$
      0004AC 02r05rC3         [24] 1258 	ljmp	00115$
      0004AF                       1259 00162$:
                                   1260 ;	walk.c:131: while (1) {
      0004AF                       1261 00112$:
                                   1262 ;	walk.c:132: j = (uint8_t)(rand() % NMAX);
      0004AF C0 02            [24] 1263 	push	ar2
      0004B1 C0 06            [24] 1264 	push	ar6
      0004B3 C0 02            [24] 1265 	push	ar2
      0004B5 C0 01            [24] 1266 	push	ar1
      0004B7 C0 00            [24] 1267 	push	ar0
      0004B9 12r00r00         [24] 1268 	lcall	_rand
      0004BC AD 82            [24] 1269 	mov	r5,dpl
      0004BE D0 00            [24] 1270 	pop	ar0
      0004C0 D0 01            [24] 1271 	pop	ar1
      0004C2 D0 02            [24] 1272 	pop	ar2
      0004C4 D0 06            [24] 1273 	pop	ar6
      0004C6 53 05 0F         [24] 1274 	anl	ar5,#0x0f
      0004C9 8D 04            [24] 1275 	mov	ar4,r5
                                   1276 ;	walk.c:133: if (!update(&t, &cur, j)) continue;
      0004CB C0 00            [24] 1277 	push	ar0
      0004CD E5*00            [12] 1278 	mov	a,_bp
      0004CF 24 05            [12] 1279 	add	a,#0x05
      0004D1 F8               [12] 1280 	mov	r0,a
      0004D2 C0 01            [24] 1281 	push	ar1
      0004D4 E5*00            [12] 1282 	mov	a,_bp
      0004D6 24 07            [12] 1283 	add	a,#0x07
      0004D8 F9               [12] 1284 	mov	r1,a
      0004D9 E6               [12] 1285 	mov	a,@r0
      0004DA F7               [12] 1286 	mov	@r1,a
      0004DB 09               [12] 1287 	inc	r1
      0004DC 77 00            [12] 1288 	mov	@r1,#0x00
      0004DE 09               [12] 1289 	inc	r1
      0004DF 77 40            [12] 1290 	mov	@r1,#0x40
      0004E1 D0 01            [24] 1291 	pop	ar1
      0004E3 E5*00            [12] 1292 	mov	a,_bp
      0004E5 24 04            [12] 1293 	add	a,#0x04
      0004E7 F8               [12] 1294 	mov	r0,a
      0004E8 86 02            [24] 1295 	mov	ar2,@r0
      0004EA 7D 00            [12] 1296 	mov	r5,#0x00
      0004EC 7F 40            [12] 1297 	mov	r7,#0x40
      0004EE D0 00            [24] 1298 	pop	ar0
      0004F0 C0 06            [24] 1299 	push	ar6
      0004F2 C0 02            [24] 1300 	push	ar2
      0004F4 C0 01            [24] 1301 	push	ar1
      0004F6 C0 00            [24] 1302 	push	ar0
      0004F8 C0 04            [24] 1303 	push	ar4
      0004FA 85 00 F0         [24] 1304 	mov	b,ar0
      0004FD E5*00            [12] 1305 	mov	a,_bp
      0004FF 24 07            [12] 1306 	add	a,#0x07
      000501 F8               [12] 1307 	mov	r0,a
      000502 E6               [12] 1308 	mov	a,@r0
      000503 C0 E0            [24] 1309 	push	acc
      000505 08               [12] 1310 	inc	r0
      000506 E6               [12] 1311 	mov	a,@r0
      000507 C0 E0            [24] 1312 	push	acc
      000509 08               [12] 1313 	inc	r0
      00050A E6               [12] 1314 	mov	a,@r0
      00050B C0 E0            [24] 1315 	push	acc
      00050D 8A 82            [24] 1316 	mov	dpl,r2
      00050F 8D 83            [24] 1317 	mov	dph,r5
      000511 8F F0            [24] 1318 	mov	b,r7
      000513 12r00r4A         [24] 1319 	lcall	_update
      000516 AF 82            [24] 1320 	mov	r7,dpl
      000518 E5 81            [12] 1321 	mov	a,sp
      00051A 24 FC            [12] 1322 	add	a,#0xfc
      00051C F5 81            [12] 1323 	mov	sp,a
      00051E D0 00            [24] 1324 	pop	ar0
      000520 D0 01            [24] 1325 	pop	ar1
      000522 D0 02            [24] 1326 	pop	ar2
      000524 D0 06            [24] 1327 	pop	ar6
      000526 D0 02            [24] 1328 	pop	ar2
      000528 EF               [12] 1329 	mov	a,r7
      000529 60 84            [24] 1330 	jz	00112$
                                   1331 ;	walk.c:134: if (!stpush(&cur)) bang();
      00052B 8A 04            [24] 1332 	mov	ar4,r2
      00052D 7D 00            [12] 1333 	mov	r5,#0x00
      00052F 7F 40            [12] 1334 	mov	r7,#0x40
      000531 8C 82            [24] 1335 	mov	dpl,r4
      000533 8D 83            [24] 1336 	mov	dph,r5
      000535 8F F0            [24] 1337 	mov	b,r7
      000537 C0 06            [24] 1338 	push	ar6
      000539 C0 02            [24] 1339 	push	ar2
      00053B C0 01            [24] 1340 	push	ar1
      00053D C0 00            [24] 1341 	push	ar0
      00053F 12r0Ar2A         [24] 1342 	lcall	_stpush
      000542 E5 82            [12] 1343 	mov	a,dpl
      000544 D0 00            [24] 1344 	pop	ar0
      000546 D0 01            [24] 1345 	pop	ar1
      000548 D0 02            [24] 1346 	pop	ar2
      00054A D0 06            [24] 1347 	pop	ar6
      00054C 70 13            [24] 1348 	jnz	00110$
      00054E C0 06            [24] 1349 	push	ar6
      000550 C0 02            [24] 1350 	push	ar2
      000552 C0 01            [24] 1351 	push	ar1
      000554 C0 00            [24] 1352 	push	ar0
      000556 12r00r1D         [24] 1353 	lcall	_bang
      000559 D0 00            [24] 1354 	pop	ar0
      00055B D0 01            [24] 1355 	pop	ar1
      00055D D0 02            [24] 1356 	pop	ar2
      00055F D0 06            [24] 1357 	pop	ar6
      000561                       1358 00110$:
                                   1359 ;	walk.c:135: cur = t;
      000561 C0 02            [24] 1360 	push	ar2
      000563 C0 00            [24] 1361 	push	ar0
      000565 A8*00            [24] 1362 	mov	r0,_bp
      000567 08               [12] 1363 	inc	r0
      000568 C0 01            [24] 1364 	push	ar1
      00056A E5*00            [12] 1365 	mov	a,_bp
      00056C 24 07            [12] 1366 	add	a,#0x07
      00056E F9               [12] 1367 	mov	r1,a
      00056F E6               [12] 1368 	mov	a,@r0
      000570 F7               [12] 1369 	mov	@r1,a
      000571 09               [12] 1370 	inc	r1
      000572 77 00            [12] 1371 	mov	@r1,#0x00
      000574 09               [12] 1372 	inc	r1
      000575 77 40            [12] 1373 	mov	@r1,#0x40
      000577 D0 01            [24] 1374 	pop	ar1
      000579 A8*00            [24] 1375 	mov	r0,_bp
      00057B 08               [12] 1376 	inc	r0
      00057C 08               [12] 1377 	inc	r0
      00057D 86 02            [24] 1378 	mov	ar2,@r0
      00057F 7B 00            [12] 1379 	mov	r3,#0x00
      000581 7F 40            [12] 1380 	mov	r7,#0x40
      000583 D0 00            [24] 1381 	pop	ar0
      000585 C0 06            [24] 1382 	push	ar6
      000587 C0 02            [24] 1383 	push	ar2
      000589 C0 01            [24] 1384 	push	ar1
      00058B C0 00            [24] 1385 	push	ar0
      00058D 74 04            [12] 1386 	mov	a,#0x04
      00058F C0 E0            [24] 1387 	push	acc
      000591 E4               [12] 1388 	clr	a
      000592 C0 E0            [24] 1389 	push	acc
      000594 85 00 F0         [24] 1390 	mov	b,ar0
      000597 E5*00            [12] 1391 	mov	a,_bp
      000599 24 07            [12] 1392 	add	a,#0x07
      00059B F8               [12] 1393 	mov	r0,a
      00059C E6               [12] 1394 	mov	a,@r0
      00059D C0 E0            [24] 1395 	push	acc
      00059F 08               [12] 1396 	inc	r0
      0005A0 E6               [12] 1397 	mov	a,@r0
      0005A1 C0 E0            [24] 1398 	push	acc
      0005A3 08               [12] 1399 	inc	r0
      0005A4 E6               [12] 1400 	mov	a,@r0
      0005A5 C0 E0            [24] 1401 	push	acc
      0005A7 8A 82            [24] 1402 	mov	dpl,r2
      0005A9 8B 83            [24] 1403 	mov	dph,r3
      0005AB 8F F0            [24] 1404 	mov	b,r7
      0005AD 12r00r00         [24] 1405 	lcall	___memcpy
      0005B0 E5 81            [12] 1406 	mov	a,sp
      0005B2 24 FB            [12] 1407 	add	a,#0xfb
      0005B4 F5 81            [12] 1408 	mov	sp,a
      0005B6 D0 00            [24] 1409 	pop	ar0
      0005B8 D0 01            [24] 1410 	pop	ar1
      0005BA D0 02            [24] 1411 	pop	ar2
      0005BC D0 06            [24] 1412 	pop	ar6
                                   1413 ;	walk.c:136: goto process;
      0005BE D0 02            [24] 1414 	pop	ar2
      0005C0 02r03r43         [24] 1415 	ljmp	00101$
      0005C3                       1416 00115$:
                                   1417 ;	walk.c:140: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005C3 86 05            [24] 1418 	mov	ar5,@r0
      0005C5 08               [12] 1419 	inc	r0
      0005C6 86 07            [24] 1420 	mov	ar7,@r0
      0005C8 18               [12] 1421 	dec	r0
      0005C9 0D               [12] 1422 	inc	r5
      0005CA BD 00 01         [24] 1423 	cjne	r5,#0x00,00165$
      0005CD 0F               [12] 1424 	inc	r7
      0005CE                       1425 00165$:
      0005CE 87 03            [24] 1426 	mov	ar3,@r1
      0005D0 09               [12] 1427 	inc	r1
      0005D1 87 04            [24] 1428 	mov	ar4,@r1
      0005D3 19               [12] 1429 	dec	r1
      0005D4 74 04            [12] 1430 	mov	a,#0x04
      0005D6 2B               [12] 1431 	add	a,r3
      0005D7 FB               [12] 1432 	mov	r3,a
      0005D8 E4               [12] 1433 	clr	a
      0005D9 3C               [12] 1434 	addc	a,r4
      0005DA FC               [12] 1435 	mov	r4,a
      0005DB C0 06            [24] 1436 	push	ar6
      0005DD C0 02            [24] 1437 	push	ar2
      0005DF C0 01            [24] 1438 	push	ar1
      0005E1 C0 00            [24] 1439 	push	ar0
      0005E3 C0 05            [24] 1440 	push	ar5
      0005E5 C0 07            [24] 1441 	push	ar7
      0005E7 C0 03            [24] 1442 	push	ar3
      0005E9 C0 04            [24] 1443 	push	ar4
      0005EB 74r2A            [12] 1444 	mov	a,#___str_3
      0005ED C0 E0            [24] 1445 	push	acc
      0005EF 74s00            [12] 1446 	mov	a,#(___str_3 >> 8)
      0005F1 C0 E0            [24] 1447 	push	acc
      0005F3 74 80            [12] 1448 	mov	a,#0x80
      0005F5 C0 E0            [24] 1449 	push	acc
      0005F7 12r00r00         [24] 1450 	lcall	_printf
      0005FA E5 81            [12] 1451 	mov	a,sp
      0005FC 24 F9            [12] 1452 	add	a,#0xf9
      0005FE F5 81            [12] 1453 	mov	sp,a
                                   1454 ;	walk.c:141: flashOE(OE76_MASK6);
      000600 75 82 40         [24] 1455 	mov	dpl,#0x40
      000603 12r00r29         [24] 1456 	lcall	_flashOE
      000606 D0 00            [24] 1457 	pop	ar0
      000608 D0 01            [24] 1458 	pop	ar1
      00060A D0 02            [24] 1459 	pop	ar2
      00060C D0 06            [24] 1460 	pop	ar6
                                   1461 ;	walk.c:143: if (stpop(&cur)) goto next;
      00060E C0 00            [24] 1462 	push	ar0
      000610 E5*00            [12] 1463 	mov	a,_bp
      000612 24 03            [12] 1464 	add	a,#0x03
      000614 F8               [12] 1465 	mov	r0,a
      000615 86 04            [24] 1466 	mov	ar4,@r0
      000617 7D 00            [12] 1467 	mov	r5,#0x00
      000619 7F 40            [12] 1468 	mov	r7,#0x40
      00061B D0 00            [24] 1469 	pop	ar0
      00061D 8C 82            [24] 1470 	mov	dpl,r4
      00061F 8D 83            [24] 1471 	mov	dph,r5
      000621 8F F0            [24] 1472 	mov	b,r7
      000623 C0 06            [24] 1473 	push	ar6
      000625 C0 02            [24] 1474 	push	ar2
      000627 C0 01            [24] 1475 	push	ar1
      000629 C0 00            [24] 1476 	push	ar0
      00062B 12r0Ar8B         [24] 1477 	lcall	_stpop
      00062E E5 82            [12] 1478 	mov	a,dpl
      000630 D0 00            [24] 1479 	pop	ar0
      000632 D0 01            [24] 1480 	pop	ar1
      000634 D0 02            [24] 1481 	pop	ar2
      000636 D0 06            [24] 1482 	pop	ar6
      000638 60 03            [24] 1483 	jz	00166$
      00063A 02r03rCD         [24] 1484 	ljmp	00102$
      00063D                       1485 00166$:
                                   1486 ;	walk.c:145: return;
                                   1487 ;	walk.c:146: }
      00063D 85*00 81         [24] 1488 	mov	sp,_bp
      000640 D0*00            [24] 1489 	pop	_bp
      000642 22               [24] 1490 	ret
                                   1491 ;------------------------------------------------------------
                                   1492 ;Allocation info for local variables in function 'main'
                                   1493 ;------------------------------------------------------------
                                   1494 ;R                         Allocated to stack - _bp +13
                                   1495 ;initial                   Allocated to stack - _bp +5
                                   1496 ;N                         Allocated to stack - _bp +9
                                   1497 ;i                         Allocated to stack - _bp +11
                                   1498 ;j                         Allocated to registers r2 r6 
                                   1499 ;sloc0                     Allocated to stack - _bp +1
                                   1500 ;sloc1                     Allocated to stack - _bp +3
                                   1501 ;sloc2                     Allocated to stack - _bp +17
                                   1502 ;------------------------------------------------------------
                                   1503 ;	walk.c:148: int main(void) {
                                   1504 ;	-----------------------------------------
                                   1505 ;	 function main
                                   1506 ;	-----------------------------------------
      000643                       1507 _main:
      000643 C0*00            [24] 1508 	push	_bp
      000645 E5 81            [12] 1509 	mov	a,sp
      000647 F5*00            [12] 1510 	mov	_bp,a
      000649 24 0E            [12] 1511 	add	a,#0x0e
      00064B F5 81            [12] 1512 	mov	sp,a
                                   1513 ;	walk.c:154: i0 = 1u;
      00064D 78r00            [12] 1514 	mov	r0,#_i0
      00064F 76 01            [12] 1515 	mov	@r0,#0x01
                                   1516 ;	walk.c:156: P1_7 = 1;
                                   1517 ;	assignBit
      000651 D2 97            [12] 1518 	setb	_P1_7
                                   1519 ;	walk.c:157: IT0 = 1;
                                   1520 ;	assignBit
      000653 D2 88            [12] 1521 	setb	_IT0
                                   1522 ;	walk.c:158: EX0 = 1;
                                   1523 ;	assignBit
      000655 D2 A8            [12] 1524 	setb	_EX0
                                   1525 ;	walk.c:159: EA = 1;
                                   1526 ;	assignBit
      000657 D2 AF            [12] 1527 	setb	_EA
                                   1528 ;	walk.c:161: srand(*R);
      000659 90 FF FE         [24] 1529 	mov	dptr,#0xfffe
      00065C E0               [24] 1530 	movx	a,@dptr
      00065D FE               [12] 1531 	mov	r6,a
      00065E A3               [24] 1532 	inc	dptr
      00065F E0               [24] 1533 	movx	a,@dptr
      000660 FF               [12] 1534 	mov	r7,a
      000661 8E 82            [24] 1535 	mov	dpl,r6
      000663 8F 83            [24] 1536 	mov	dph,r7
      000665 12r00r00         [24] 1537 	lcall	_srand
                                   1538 ;	walk.c:162: stinit();
      000668 12r0Ar21         [24] 1539 	lcall	_stinit
                                   1540 ;	walk.c:164: puts("\033[2J\033[?25l");
      00066B 90r00r34         [24] 1541 	mov	dptr,#___str_4
      00066E 75 F0 80         [24] 1542 	mov	b,#0x80
      000671 12r00r00         [24] 1543 	lcall	_puts
                                   1544 ;	walk.c:166: while (i0) {
      000674 E5*00            [12] 1545 	mov	a,_bp
      000676 24 05            [12] 1546 	add	a,#0x05
      000678 F9               [12] 1547 	mov	r1,a
      000679 FF               [12] 1548 	mov	r7,a
      00067A E5*00            [12] 1549 	mov	a,_bp
      00067C 24 09            [12] 1550 	add	a,#0x09
      00067E F8               [12] 1551 	mov	r0,a
      00067F E4               [12] 1552 	clr	a
      000680 F6               [12] 1553 	mov	@r0,a
      000681 08               [12] 1554 	inc	r0
      000682 F6               [12] 1555 	mov	@r0,a
      000683                       1556 00108$:
      000683 78r00            [12] 1557 	mov	r0,#_i0
      000685 E6               [12] 1558 	mov	a,@r0
      000686 70 03            [24] 1559 	jnz	00181$
      000688 02r0Ar0A         [24] 1560 	ljmp	00110$
      00068B                       1561 00181$:
                                   1562 ;	walk.c:167: for (i = 0; i < ROWS; i++)
      00068B 7B 00            [12] 1563 	mov	r3,#0x00
      00068D 7C 00            [12] 1564 	mov	r4,#0x00
      00068F A8*00            [24] 1565 	mov	r0,_bp
      000691 08               [12] 1566 	inc	r0
      000692 E4               [12] 1567 	clr	a
      000693 F6               [12] 1568 	mov	@r0,a
      000694 08               [12] 1569 	inc	r0
      000695 F6               [12] 1570 	mov	@r0,a
                                   1571 ;	walk.c:168: for (j = 0; j < COLS; j++)
      000696                       1572 00124$:
      000696 A8*00            [24] 1573 	mov	r0,_bp
      000698 08               [12] 1574 	inc	r0
      000699 C0 01            [24] 1575 	push	ar1
      00069B E5*00            [12] 1576 	mov	a,_bp
      00069D 24 03            [12] 1577 	add	a,#0x03
      00069F F9               [12] 1578 	mov	r1,a
      0006A0 E6               [12] 1579 	mov	a,@r0
      0006A1 24r00            [12] 1580 	add	a,#_g
      0006A3 F7               [12] 1581 	mov	@r1,a
      0006A4 08               [12] 1582 	inc	r0
      0006A5 E6               [12] 1583 	mov	a,@r0
      0006A6 34s00            [12] 1584 	addc	a,#(_g >> 8)
      0006A8 09               [12] 1585 	inc	r1
      0006A9 F7               [12] 1586 	mov	@r1,a
      0006AA D0 01            [24] 1587 	pop	ar1
      0006AC 7A 00            [12] 1588 	mov	r2,#0x00
      0006AE 7E 00            [12] 1589 	mov	r6,#0x00
      0006B0                       1590 00111$:
                                   1591 ;	walk.c:169: g[i][j] = 0x55u;
      0006B0 E5*00            [12] 1592 	mov	a,_bp
      0006B2 24 03            [12] 1593 	add	a,#0x03
      0006B4 F8               [12] 1594 	mov	r0,a
      0006B5 EA               [12] 1595 	mov	a,r2
      0006B6 26               [12] 1596 	add	a,@r0
      0006B7 F5 82            [12] 1597 	mov	dpl,a
      0006B9 EE               [12] 1598 	mov	a,r6
      0006BA 08               [12] 1599 	inc	r0
      0006BB 36               [12] 1600 	addc	a,@r0
      0006BC F5 83            [12] 1601 	mov	dph,a
      0006BE 74 55            [12] 1602 	mov	a,#0x55
      0006C0 F0               [24] 1603 	movx	@dptr,a
                                   1604 ;	walk.c:168: for (j = 0; j < COLS; j++)
      0006C1 0A               [12] 1605 	inc	r2
      0006C2 BA 00 01         [24] 1606 	cjne	r2,#0x00,00182$
      0006C5 0E               [12] 1607 	inc	r6
      0006C6                       1608 00182$:
      0006C6 C3               [12] 1609 	clr	c
      0006C7 EA               [12] 1610 	mov	a,r2
      0006C8 94 C9            [12] 1611 	subb	a,#0xc9
      0006CA EE               [12] 1612 	mov	a,r6
      0006CB 64 80            [12] 1613 	xrl	a,#0x80
      0006CD 94 80            [12] 1614 	subb	a,#0x80
      0006CF 40 DF            [24] 1615 	jc	00111$
                                   1616 ;	walk.c:167: for (i = 0; i < ROWS; i++)
      0006D1 A8*00            [24] 1617 	mov	r0,_bp
      0006D3 08               [12] 1618 	inc	r0
      0006D4 74 C9            [12] 1619 	mov	a,#0xc9
      0006D6 26               [12] 1620 	add	a,@r0
      0006D7 F6               [12] 1621 	mov	@r0,a
      0006D8 E4               [12] 1622 	clr	a
      0006D9 08               [12] 1623 	inc	r0
      0006DA 36               [12] 1624 	addc	a,@r0
      0006DB F6               [12] 1625 	mov	@r0,a
      0006DC 0B               [12] 1626 	inc	r3
      0006DD BB 00 01         [24] 1627 	cjne	r3,#0x00,00184$
      0006E0 0C               [12] 1628 	inc	r4
      0006E1                       1629 00184$:
      0006E1 C3               [12] 1630 	clr	c
      0006E2 EB               [12] 1631 	mov	a,r3
      0006E3 94 30            [12] 1632 	subb	a,#0x30
      0006E5 EC               [12] 1633 	mov	a,r4
      0006E6 64 80            [12] 1634 	xrl	a,#0x80
      0006E8 94 80            [12] 1635 	subb	a,#0x80
      0006EA 40 AA            [24] 1636 	jc	00124$
                                   1637 ;	walk.c:171: initial.r = rand() % ROWS;
      0006EC E5*00            [12] 1638 	mov	a,_bp
      0006EE 24 05            [12] 1639 	add	a,#0x05
      0006F0 F8               [12] 1640 	mov	r0,a
      0006F1 C0 07            [24] 1641 	push	ar7
      0006F3 C0 01            [24] 1642 	push	ar1
      0006F5 C0 00            [24] 1643 	push	ar0
      0006F7 12r00r00         [24] 1644 	lcall	_rand
      0006FA AD 82            [24] 1645 	mov	r5,dpl
      0006FC AE 83            [24] 1646 	mov	r6,dph
      0006FE 74 30            [12] 1647 	mov	a,#0x30
      000700 C0 E0            [24] 1648 	push	acc
      000702 E4               [12] 1649 	clr	a
      000703 C0 E0            [24] 1650 	push	acc
      000705 8D 82            [24] 1651 	mov	dpl,r5
      000707 8E 83            [24] 1652 	mov	dph,r6
      000709 12r00r00         [24] 1653 	lcall	__modsint
      00070C AD 82            [24] 1654 	mov	r5,dpl
      00070E AE 83            [24] 1655 	mov	r6,dph
      000710 15 81            [12] 1656 	dec	sp
      000712 15 81            [12] 1657 	dec	sp
      000714 D0 00            [24] 1658 	pop	ar0
      000716 D0 01            [24] 1659 	pop	ar1
      000718 A6 05            [24] 1660 	mov	@r0,ar5
      00071A 08               [12] 1661 	inc	r0
      00071B A6 06            [24] 1662 	mov	@r0,ar6
      00071D 18               [12] 1663 	dec	r0
                                   1664 ;	walk.c:172: initial.c = rand() % COLS;
      00071E 74 02            [12] 1665 	mov	a,#0x02
      000720 29               [12] 1666 	add	a,r1
      000721 F8               [12] 1667 	mov	r0,a
      000722 C0 01            [24] 1668 	push	ar1
      000724 C0 00            [24] 1669 	push	ar0
      000726 12r00r00         [24] 1670 	lcall	_rand
      000729 AD 82            [24] 1671 	mov	r5,dpl
      00072B AE 83            [24] 1672 	mov	r6,dph
      00072D 74 C9            [12] 1673 	mov	a,#0xc9
      00072F C0 E0            [24] 1674 	push	acc
      000731 E4               [12] 1675 	clr	a
      000732 C0 E0            [24] 1676 	push	acc
      000734 8D 82            [24] 1677 	mov	dpl,r5
      000736 8E 83            [24] 1678 	mov	dph,r6
      000738 12r00r00         [24] 1679 	lcall	__modsint
      00073B AD 82            [24] 1680 	mov	r5,dpl
      00073D AE 83            [24] 1681 	mov	r6,dph
      00073F 15 81            [12] 1682 	dec	sp
      000741 15 81            [12] 1683 	dec	sp
      000743 D0 00            [24] 1684 	pop	ar0
      000745 A6 05            [24] 1685 	mov	@r0,ar5
      000747 08               [12] 1686 	inc	r0
      000748 A6 06            [24] 1687 	mov	@r0,ar6
      00074A 18               [12] 1688 	dec	r0
                                   1689 ;	walk.c:174: puts("\033[2J\033[?25l");
      00074B 90r00r34         [24] 1690 	mov	dptr,#___str_4
      00074E 75 F0 80         [24] 1691 	mov	b,#0x80
      000751 C0 00            [24] 1692 	push	ar0
      000753 12r00r00         [24] 1693 	lcall	_puts
      000756 D0 00            [24] 1694 	pop	ar0
      000758 D0 01            [24] 1695 	pop	ar1
                                   1696 ;	walk.c:175: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00075A 86 05            [24] 1697 	mov	ar5,@r0
      00075C 08               [12] 1698 	inc	r0
      00075D 86 06            [24] 1699 	mov	ar6,@r0
      00075F 18               [12] 1700 	dec	r0
      000760 87 03            [24] 1701 	mov	ar3,@r1
      000762 09               [12] 1702 	inc	r1
      000763 87 04            [24] 1703 	mov	ar4,@r1
      000765 19               [12] 1704 	dec	r1
      000766 C0 01            [24] 1705 	push	ar1
      000768 C0 05            [24] 1706 	push	ar5
      00076A C0 06            [24] 1707 	push	ar6
      00076C C0 03            [24] 1708 	push	ar3
      00076E C0 04            [24] 1709 	push	ar4
      000770 E5*00            [12] 1710 	mov	a,_bp
      000772 24 09            [12] 1711 	add	a,#0x09
      000774 F8               [12] 1712 	mov	r0,a
      000775 E6               [12] 1713 	mov	a,@r0
      000776 C0 E0            [24] 1714 	push	acc
      000778 08               [12] 1715 	inc	r0
      000779 E6               [12] 1716 	mov	a,@r0
      00077A C0 E0            [24] 1717 	push	acc
      00077C 74r3F            [12] 1718 	mov	a,#___str_5
      00077E C0 E0            [24] 1719 	push	acc
      000780 74s00            [12] 1720 	mov	a,#(___str_5 >> 8)
      000782 C0 E0            [24] 1721 	push	acc
      000784 74 80            [12] 1722 	mov	a,#0x80
      000786 C0 E0            [24] 1723 	push	acc
      000788 12r00r00         [24] 1724 	lcall	_printf
      00078B E5 81            [12] 1725 	mov	a,sp
      00078D 24 F7            [12] 1726 	add	a,#0xf7
      00078F F5 81            [12] 1727 	mov	sp,a
      000791 D0 01            [24] 1728 	pop	ar1
      000793 D0 07            [24] 1729 	pop	ar7
                                   1730 ;	walk.c:177: for (i = 0; i < REG; i++) {
      000795 E5*00            [12] 1731 	mov	a,_bp
      000797 24 0B            [12] 1732 	add	a,#0x0b
      000799 F8               [12] 1733 	mov	r0,a
      00079A E4               [12] 1734 	clr	a
      00079B F6               [12] 1735 	mov	@r0,a
      00079C 08               [12] 1736 	inc	r0
      00079D F6               [12] 1737 	mov	@r0,a
      00079E                       1738 00115$:
                                   1739 ;	walk.c:178: neigh[i].r = neigh[REG + i].r * (1 + rand() % 8);
      00079E C0 07            [24] 1740 	push	ar7
      0007A0 E5*00            [12] 1741 	mov	a,_bp
      0007A2 24 0B            [12] 1742 	add	a,#0x0b
      0007A4 F8               [12] 1743 	mov	r0,a
      0007A5 E6               [12] 1744 	mov	a,@r0
      0007A6 25 E0            [12] 1745 	add	a,acc
      0007A8 FB               [12] 1746 	mov	r3,a
      0007A9 08               [12] 1747 	inc	r0
      0007AA E6               [12] 1748 	mov	a,@r0
      0007AB 33               [12] 1749 	rlc	a
      0007AC FC               [12] 1750 	mov	r4,a
      0007AD EB               [12] 1751 	mov	a,r3
      0007AE 2B               [12] 1752 	add	a,r3
      0007AF FB               [12] 1753 	mov	r3,a
      0007B0 EC               [12] 1754 	mov	a,r4
      0007B1 33               [12] 1755 	rlc	a
      0007B2 FC               [12] 1756 	mov	r4,a
      0007B3 E5*00            [12] 1757 	mov	a,_bp
      0007B5 24 03            [12] 1758 	add	a,#0x03
      0007B7 F8               [12] 1759 	mov	r0,a
      0007B8 EB               [12] 1760 	mov	a,r3
      0007B9 24r00            [12] 1761 	add	a,#_neigh
      0007BB F6               [12] 1762 	mov	@r0,a
      0007BC EC               [12] 1763 	mov	a,r4
      0007BD 34s00            [12] 1764 	addc	a,#(_neigh >> 8)
      0007BF 08               [12] 1765 	inc	r0
      0007C0 F6               [12] 1766 	mov	@r0,a
      0007C1 E5*00            [12] 1767 	mov	a,_bp
      0007C3 24 0B            [12] 1768 	add	a,#0x0b
      0007C5 F8               [12] 1769 	mov	r0,a
      0007C6 86 06            [24] 1770 	mov	ar6,@r0
      0007C8 74 08            [12] 1771 	mov	a,#0x08
      0007CA 2E               [12] 1772 	add	a,r6
      0007CB FE               [12] 1773 	mov	r6,a
      0007CC C2 D5            [12] 1774 	clr	F0
      0007CE 75 F0 04         [24] 1775 	mov	b,#0x04
      0007D1 EE               [12] 1776 	mov	a,r6
      0007D2 30 E7 04         [24] 1777 	jnb	acc.7,00186$
      0007D5 B2 D5            [12] 1778 	cpl	F0
      0007D7 F4               [12] 1779 	cpl	a
      0007D8 04               [12] 1780 	inc	a
      0007D9                       1781 00186$:
      0007D9 A4               [48] 1782 	mul	ab
      0007DA 30 D5 0A         [24] 1783 	jnb	F0,00187$
      0007DD F4               [12] 1784 	cpl	a
      0007DE 24 01            [12] 1785 	add	a,#0x01
      0007E0 C5 F0            [12] 1786 	xch	a,b
      0007E2 F4               [12] 1787 	cpl	a
      0007E3 34 00            [12] 1788 	addc	a,#0x00
      0007E5 C5 F0            [12] 1789 	xch	a,b
      0007E7                       1790 00187$:
      0007E7 FE               [12] 1791 	mov	r6,a
      0007E8 AD F0            [24] 1792 	mov	r5,b
      0007EA 24r00            [12] 1793 	add	a,#_neigh
      0007EC F5 82            [12] 1794 	mov	dpl,a
      0007EE ED               [12] 1795 	mov	a,r5
      0007EF 34s00            [12] 1796 	addc	a,#(_neigh >> 8)
      0007F1 F5 83            [12] 1797 	mov	dph,a
      0007F3 A8*00            [24] 1798 	mov	r0,_bp
      0007F5 08               [12] 1799 	inc	r0
      0007F6 E0               [24] 1800 	movx	a,@dptr
      0007F7 F6               [12] 1801 	mov	@r0,a
      0007F8 A3               [24] 1802 	inc	dptr
      0007F9 E0               [24] 1803 	movx	a,@dptr
      0007FA 08               [12] 1804 	inc	r0
      0007FB F6               [12] 1805 	mov	@r0,a
      0007FC C0 06            [24] 1806 	push	ar6
      0007FE C0 05            [24] 1807 	push	ar5
      000800 C0 04            [24] 1808 	push	ar4
      000802 C0 03            [24] 1809 	push	ar3
      000804 C0 01            [24] 1810 	push	ar1
      000806 12r00r00         [24] 1811 	lcall	_rand
      000809 AA 82            [24] 1812 	mov	r2,dpl
      00080B AF 83            [24] 1813 	mov	r7,dph
      00080D 74 08            [12] 1814 	mov	a,#0x08
      00080F C0 E0            [24] 1815 	push	acc
      000811 E4               [12] 1816 	clr	a
      000812 C0 E0            [24] 1817 	push	acc
      000814 8A 82            [24] 1818 	mov	dpl,r2
      000816 8F 83            [24] 1819 	mov	dph,r7
      000818 12r00r00         [24] 1820 	lcall	__modsint
      00081B AA 82            [24] 1821 	mov	r2,dpl
      00081D AF 83            [24] 1822 	mov	r7,dph
      00081F 15 81            [12] 1823 	dec	sp
      000821 15 81            [12] 1824 	dec	sp
      000823 D0 01            [24] 1825 	pop	ar1
      000825 D0 03            [24] 1826 	pop	ar3
      000827 D0 04            [24] 1827 	pop	ar4
      000829 D0 05            [24] 1828 	pop	ar5
      00082B D0 06            [24] 1829 	pop	ar6
      00082D 0A               [12] 1830 	inc	r2
      00082E BA 00 01         [24] 1831 	cjne	r2,#0x00,00188$
      000831 0F               [12] 1832 	inc	r7
      000832                       1833 00188$:
      000832 C0 06            [24] 1834 	push	ar6
      000834 C0 05            [24] 1835 	push	ar5
      000836 C0 04            [24] 1836 	push	ar4
      000838 C0 03            [24] 1837 	push	ar3
      00083A C0 01            [24] 1838 	push	ar1
      00083C C0 02            [24] 1839 	push	ar2
      00083E C0 07            [24] 1840 	push	ar7
      000840 A8*00            [24] 1841 	mov	r0,_bp
      000842 08               [12] 1842 	inc	r0
      000843 86 82            [24] 1843 	mov	dpl,@r0
      000845 08               [12] 1844 	inc	r0
      000846 86 83            [24] 1845 	mov	dph,@r0
      000848 12r00r00         [24] 1846 	lcall	__mulint
      00084B AA 82            [24] 1847 	mov	r2,dpl
      00084D AF 83            [24] 1848 	mov	r7,dph
      00084F 15 81            [12] 1849 	dec	sp
      000851 15 81            [12] 1850 	dec	sp
      000853 D0 01            [24] 1851 	pop	ar1
      000855 D0 03            [24] 1852 	pop	ar3
      000857 D0 04            [24] 1853 	pop	ar4
      000859 D0 05            [24] 1854 	pop	ar5
      00085B D0 06            [24] 1855 	pop	ar6
      00085D E5*00            [12] 1856 	mov	a,_bp
      00085F 24 03            [12] 1857 	add	a,#0x03
      000861 F8               [12] 1858 	mov	r0,a
      000862 86 82            [24] 1859 	mov	dpl,@r0
      000864 08               [12] 1860 	inc	r0
      000865 86 83            [24] 1861 	mov	dph,@r0
      000867 EA               [12] 1862 	mov	a,r2
      000868 F0               [24] 1863 	movx	@dptr,a
      000869 EF               [12] 1864 	mov	a,r7
      00086A A3               [24] 1865 	inc	dptr
      00086B F0               [24] 1866 	movx	@dptr,a
                                   1867 ;	walk.c:179: neigh[i].c = neigh[REG + i].c * (1 + rand() % 8);
      00086C EB               [12] 1868 	mov	a,r3
      00086D 24r00            [12] 1869 	add	a,#_neigh
      00086F FB               [12] 1870 	mov	r3,a
      000870 EC               [12] 1871 	mov	a,r4
      000871 34s00            [12] 1872 	addc	a,#(_neigh >> 8)
      000873 FC               [12] 1873 	mov	r4,a
      000874 74 02            [12] 1874 	mov	a,#0x02
      000876 2B               [12] 1875 	add	a,r3
      000877 FA               [12] 1876 	mov	r2,a
      000878 E4               [12] 1877 	clr	a
      000879 3C               [12] 1878 	addc	a,r4
      00087A FF               [12] 1879 	mov	r7,a
      00087B EE               [12] 1880 	mov	a,r6
      00087C 24r00            [12] 1881 	add	a,#_neigh
      00087E FE               [12] 1882 	mov	r6,a
      00087F ED               [12] 1883 	mov	a,r5
      000880 34s00            [12] 1884 	addc	a,#(_neigh >> 8)
      000882 FD               [12] 1885 	mov	r5,a
      000883 8E 82            [24] 1886 	mov	dpl,r6
      000885 8D 83            [24] 1887 	mov	dph,r5
      000887 A3               [24] 1888 	inc	dptr
      000888 A3               [24] 1889 	inc	dptr
      000889 E5*00            [12] 1890 	mov	a,_bp
      00088B 24 03            [12] 1891 	add	a,#0x03
      00088D F8               [12] 1892 	mov	r0,a
      00088E E0               [24] 1893 	movx	a,@dptr
      00088F F6               [12] 1894 	mov	@r0,a
      000890 A3               [24] 1895 	inc	dptr
      000891 E0               [24] 1896 	movx	a,@dptr
      000892 08               [12] 1897 	inc	r0
      000893 F6               [12] 1898 	mov	@r0,a
      000894 C0 07            [24] 1899 	push	ar7
      000896 C0 04            [24] 1900 	push	ar4
      000898 C0 03            [24] 1901 	push	ar3
      00089A C0 02            [24] 1902 	push	ar2
      00089C C0 01            [24] 1903 	push	ar1
      00089E 12r00r00         [24] 1904 	lcall	_rand
      0008A1 AD 82            [24] 1905 	mov	r5,dpl
      0008A3 AE 83            [24] 1906 	mov	r6,dph
      0008A5 74 08            [12] 1907 	mov	a,#0x08
      0008A7 C0 E0            [24] 1908 	push	acc
      0008A9 E4               [12] 1909 	clr	a
      0008AA C0 E0            [24] 1910 	push	acc
      0008AC 8D 82            [24] 1911 	mov	dpl,r5
      0008AE 8E 83            [24] 1912 	mov	dph,r6
      0008B0 12r00r00         [24] 1913 	lcall	__modsint
      0008B3 AD 82            [24] 1914 	mov	r5,dpl
      0008B5 AE 83            [24] 1915 	mov	r6,dph
      0008B7 15 81            [12] 1916 	dec	sp
      0008B9 15 81            [12] 1917 	dec	sp
      0008BB D0 01            [24] 1918 	pop	ar1
      0008BD D0 02            [24] 1919 	pop	ar2
      0008BF D0 03            [24] 1920 	pop	ar3
      0008C1 D0 04            [24] 1921 	pop	ar4
      0008C3 D0 07            [24] 1922 	pop	ar7
      0008C5 0D               [12] 1923 	inc	r5
      0008C6 BD 00 01         [24] 1924 	cjne	r5,#0x00,00189$
      0008C9 0E               [12] 1925 	inc	r6
      0008CA                       1926 00189$:
      0008CA C0 07            [24] 1927 	push	ar7
      0008CC C0 04            [24] 1928 	push	ar4
      0008CE C0 03            [24] 1929 	push	ar3
      0008D0 C0 02            [24] 1930 	push	ar2
      0008D2 C0 01            [24] 1931 	push	ar1
      0008D4 C0 05            [24] 1932 	push	ar5
      0008D6 C0 06            [24] 1933 	push	ar6
      0008D8 E5*00            [12] 1934 	mov	a,_bp
      0008DA 24 03            [12] 1935 	add	a,#0x03
      0008DC F8               [12] 1936 	mov	r0,a
      0008DD 86 82            [24] 1937 	mov	dpl,@r0
      0008DF 08               [12] 1938 	inc	r0
      0008E0 86 83            [24] 1939 	mov	dph,@r0
      0008E2 12r00r00         [24] 1940 	lcall	__mulint
      0008E5 AD 82            [24] 1941 	mov	r5,dpl
      0008E7 AE 83            [24] 1942 	mov	r6,dph
      0008E9 15 81            [12] 1943 	dec	sp
      0008EB 15 81            [12] 1944 	dec	sp
      0008ED D0 01            [24] 1945 	pop	ar1
      0008EF D0 02            [24] 1946 	pop	ar2
      0008F1 D0 03            [24] 1947 	pop	ar3
      0008F3 D0 04            [24] 1948 	pop	ar4
      0008F5 D0 07            [24] 1949 	pop	ar7
      0008F7 8A 82            [24] 1950 	mov	dpl,r2
      0008F9 8F 83            [24] 1951 	mov	dph,r7
      0008FB ED               [12] 1952 	mov	a,r5
      0008FC F0               [24] 1953 	movx	@dptr,a
      0008FD EE               [12] 1954 	mov	a,r6
      0008FE A3               [24] 1955 	inc	dptr
      0008FF F0               [24] 1956 	movx	@dptr,a
                                   1957 ;	walk.c:180: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000900 8B 82            [24] 1958 	mov	dpl,r3
      000902 8C 83            [24] 1959 	mov	dph,r4
      000904 E0               [24] 1960 	movx	a,@dptr
      000905 FB               [12] 1961 	mov	r3,a
      000906 A3               [24] 1962 	inc	dptr
      000907 E0               [24] 1963 	movx	a,@dptr
      000908 FC               [12] 1964 	mov	r4,a
      000909 C0 07            [24] 1965 	push	ar7
      00090B C0 01            [24] 1966 	push	ar1
      00090D C0 05            [24] 1967 	push	ar5
      00090F C0 06            [24] 1968 	push	ar6
      000911 C0 03            [24] 1969 	push	ar3
      000913 C0 04            [24] 1970 	push	ar4
      000915 74r52            [12] 1971 	mov	a,#___str_6
      000917 C0 E0            [24] 1972 	push	acc
      000919 74s00            [12] 1973 	mov	a,#(___str_6 >> 8)
      00091B C0 E0            [24] 1974 	push	acc
      00091D 74 80            [12] 1975 	mov	a,#0x80
      00091F C0 E0            [24] 1976 	push	acc
      000921 12r00r00         [24] 1977 	lcall	_printf
      000924 E5 81            [12] 1978 	mov	a,sp
      000926 24 F9            [12] 1979 	add	a,#0xf9
      000928 F5 81            [12] 1980 	mov	sp,a
      00092A D0 01            [24] 1981 	pop	ar1
      00092C D0 07            [24] 1982 	pop	ar7
                                   1983 ;	walk.c:177: for (i = 0; i < REG; i++) {
      00092E E5*00            [12] 1984 	mov	a,_bp
      000930 24 0B            [12] 1985 	add	a,#0x0b
      000932 F8               [12] 1986 	mov	r0,a
      000933 06               [12] 1987 	inc	@r0
      000934 B6 00 02         [24] 1988 	cjne	@r0,#0x00,00190$
      000937 08               [12] 1989 	inc	r0
      000938 06               [12] 1990 	inc	@r0
      000939                       1991 00190$:
      000939 E5*00            [12] 1992 	mov	a,_bp
      00093B 24 0B            [12] 1993 	add	a,#0x0b
      00093D F8               [12] 1994 	mov	r0,a
      00093E 86 05            [24] 1995 	mov	ar5,@r0
      000940 08               [12] 1996 	inc	r0
      000941 86 06            [24] 1997 	mov	ar6,@r0
      000943 C3               [12] 1998 	clr	c
      000944 ED               [12] 1999 	mov	a,r5
      000945 94 08            [12] 2000 	subb	a,#0x08
      000947 EE               [12] 2001 	mov	a,r6
      000948 94 00            [12] 2002 	subb	a,#0x00
      00094A D0 07            [24] 2003 	pop	ar7
      00094C 50 03            [24] 2004 	jnc	00191$
      00094E 02r07r9E         [24] 2005 	ljmp	00115$
      000951                       2006 00191$:
                                   2007 ;	walk.c:183: OE76 = OE76_0;
      000951 78r01            [12] 2008 	mov	r0,#_OE76
      000953 76 3F            [12] 2009 	mov	@r0,#0x3f
                                   2010 ;	walk.c:184: flashOE(OE76_NC);
      000955 75 82 00         [24] 2011 	mov	dpl,#0x00
      000958 C0 07            [24] 2012 	push	ar7
      00095A C0 01            [24] 2013 	push	ar1
      00095C 12r00r29         [24] 2014 	lcall	_flashOE
      00095F D0 01            [24] 2015 	pop	ar1
      000961 D0 07            [24] 2016 	pop	ar7
                                   2017 ;	walk.c:186: walk(&initial);
      000963 8F 04            [24] 2018 	mov	ar4,r7
      000965 7D 00            [12] 2019 	mov	r5,#0x00
      000967 7E 40            [12] 2020 	mov	r6,#0x40
      000969 8C 82            [24] 2021 	mov	dpl,r4
      00096B 8D 83            [24] 2022 	mov	dph,r5
      00096D 8E F0            [24] 2023 	mov	b,r6
      00096F C0 07            [24] 2024 	push	ar7
      000971 C0 01            [24] 2025 	push	ar1
      000973 12r02rD7         [24] 2026 	lcall	_walk
      000976 D0 01            [24] 2027 	pop	ar1
      000978 D0 07            [24] 2028 	pop	ar7
                                   2029 ;	walk.c:188: for (i = 0; i < ROWS; i++)
      00097A E5*00            [12] 2030 	mov	a,_bp
      00097C 24 0B            [12] 2031 	add	a,#0x0b
      00097E F8               [12] 2032 	mov	r0,a
      00097F E4               [12] 2033 	clr	a
      000980 F6               [12] 2034 	mov	@r0,a
      000981 08               [12] 2035 	inc	r0
      000982 F6               [12] 2036 	mov	@r0,a
      000983 7B 00            [12] 2037 	mov	r3,#0x00
      000985 7C 00            [12] 2038 	mov	r4,#0x00
                                   2039 ;	walk.c:189: for (j = 0; j < COLS; j++)
      000987                       2040 00131$:
      000987 E5*00            [12] 2041 	mov	a,_bp
      000989 24 03            [12] 2042 	add	a,#0x03
      00098B F8               [12] 2043 	mov	r0,a
      00098C EB               [12] 2044 	mov	a,r3
      00098D 24r00            [12] 2045 	add	a,#_g
      00098F F6               [12] 2046 	mov	@r0,a
      000990 EC               [12] 2047 	mov	a,r4
      000991 34s00            [12] 2048 	addc	a,#(_g >> 8)
      000993 08               [12] 2049 	inc	r0
      000994 F6               [12] 2050 	mov	@r0,a
      000995 7A 00            [12] 2051 	mov	r2,#0x00
      000997 7E 00            [12] 2052 	mov	r6,#0x00
      000999                       2053 00117$:
                                   2054 ;	walk.c:190: if (g[i][j] != 0xaau) bang();
      000999 E5*00            [12] 2055 	mov	a,_bp
      00099B 24 03            [12] 2056 	add	a,#0x03
      00099D F8               [12] 2057 	mov	r0,a
      00099E EA               [12] 2058 	mov	a,r2
      00099F 26               [12] 2059 	add	a,@r0
      0009A0 F5 82            [12] 2060 	mov	dpl,a
      0009A2 EE               [12] 2061 	mov	a,r6
      0009A3 08               [12] 2062 	inc	r0
      0009A4 36               [12] 2063 	addc	a,@r0
      0009A5 F5 83            [12] 2064 	mov	dph,a
      0009A7 E0               [24] 2065 	movx	a,@dptr
      0009A8 FD               [12] 2066 	mov	r5,a
      0009A9 BD AA 02         [24] 2067 	cjne	r5,#0xaa,00192$
      0009AC 80 1B            [24] 2068 	sjmp	00118$
      0009AE                       2069 00192$:
      0009AE C0 07            [24] 2070 	push	ar7
      0009B0 C0 06            [24] 2071 	push	ar6
      0009B2 C0 04            [24] 2072 	push	ar4
      0009B4 C0 03            [24] 2073 	push	ar3
      0009B6 C0 02            [24] 2074 	push	ar2
      0009B8 C0 01            [24] 2075 	push	ar1
      0009BA 12r00r1D         [24] 2076 	lcall	_bang
      0009BD D0 01            [24] 2077 	pop	ar1
      0009BF D0 02            [24] 2078 	pop	ar2
      0009C1 D0 03            [24] 2079 	pop	ar3
      0009C3 D0 04            [24] 2080 	pop	ar4
      0009C5 D0 06            [24] 2081 	pop	ar6
      0009C7 D0 07            [24] 2082 	pop	ar7
      0009C9                       2083 00118$:
                                   2084 ;	walk.c:189: for (j = 0; j < COLS; j++)
      0009C9 0A               [12] 2085 	inc	r2
      0009CA BA 00 01         [24] 2086 	cjne	r2,#0x00,00193$
      0009CD 0E               [12] 2087 	inc	r6
      0009CE                       2088 00193$:
      0009CE C3               [12] 2089 	clr	c
      0009CF EA               [12] 2090 	mov	a,r2
      0009D0 94 C9            [12] 2091 	subb	a,#0xc9
      0009D2 EE               [12] 2092 	mov	a,r6
      0009D3 64 80            [12] 2093 	xrl	a,#0x80
      0009D5 94 80            [12] 2094 	subb	a,#0x80
      0009D7 40 C0            [24] 2095 	jc	00117$
                                   2096 ;	walk.c:188: for (i = 0; i < ROWS; i++)
      0009D9 74 C9            [12] 2097 	mov	a,#0xc9
      0009DB 2B               [12] 2098 	add	a,r3
      0009DC FB               [12] 2099 	mov	r3,a
      0009DD E4               [12] 2100 	clr	a
      0009DE 3C               [12] 2101 	addc	a,r4
      0009DF FC               [12] 2102 	mov	r4,a
      0009E0 E5*00            [12] 2103 	mov	a,_bp
      0009E2 24 0B            [12] 2104 	add	a,#0x0b
      0009E4 F8               [12] 2105 	mov	r0,a
      0009E5 06               [12] 2106 	inc	@r0
      0009E6 B6 00 02         [24] 2107 	cjne	@r0,#0x00,00195$
      0009E9 08               [12] 2108 	inc	r0
      0009EA 06               [12] 2109 	inc	@r0
      0009EB                       2110 00195$:
      0009EB E5*00            [12] 2111 	mov	a,_bp
      0009ED 24 0B            [12] 2112 	add	a,#0x0b
      0009EF F8               [12] 2113 	mov	r0,a
      0009F0 C3               [12] 2114 	clr	c
      0009F1 E6               [12] 2115 	mov	a,@r0
      0009F2 94 30            [12] 2116 	subb	a,#0x30
      0009F4 08               [12] 2117 	inc	r0
      0009F5 E6               [12] 2118 	mov	a,@r0
      0009F6 64 80            [12] 2119 	xrl	a,#0x80
      0009F8 94 80            [12] 2120 	subb	a,#0x80
      0009FA 40 8B            [24] 2121 	jc	00131$
                                   2122 ;	walk.c:192: N++;
      0009FC E5*00            [12] 2123 	mov	a,_bp
      0009FE 24 09            [12] 2124 	add	a,#0x09
      000A00 F8               [12] 2125 	mov	r0,a
      000A01 06               [12] 2126 	inc	@r0
      000A02 B6 00 02         [24] 2127 	cjne	@r0,#0x00,00197$
      000A05 08               [12] 2128 	inc	r0
      000A06 06               [12] 2129 	inc	@r0
      000A07                       2130 00197$:
      000A07 02r06r83         [24] 2131 	ljmp	00108$
      000A0A                       2132 00110$:
                                   2133 ;	walk.c:195: EA = 0;
                                   2134 ;	assignBit
      000A0A C2 AF            [12] 2135 	clr	_EA
                                   2136 ;	walk.c:197: puts("\033[2J\033[?25h");
      000A0C 90r00r5B         [24] 2137 	mov	dptr,#___str_7
      000A0F 75 F0 80         [24] 2138 	mov	b,#0x80
      000A12 12r00r00         [24] 2139 	lcall	_puts
                                   2140 ;	walk.c:201: __endasm;
      000A15 02 00 00         [24] 2141 	ljmp	0
                                   2142 ;	walk.c:203: return 0;
      000A18 90 00 00         [24] 2143 	mov	dptr,#0x0000
                                   2144 ;	walk.c:204: }
      000A1B 85*00 81         [24] 2145 	mov	sp,_bp
      000A1E D0*00            [24] 2146 	pop	_bp
      000A20 22               [24] 2147 	ret
                                   2148 ;------------------------------------------------------------
                                   2149 ;Allocation info for local variables in function 'stinit'
                                   2150 ;------------------------------------------------------------
                                   2151 ;	walk.c:206: static void stinit(void) {
                                   2152 ;	-----------------------------------------
                                   2153 ;	 function stinit
                                   2154 ;	-----------------------------------------
      000A21                       2155 _stinit:
                                   2156 ;	walk.c:207: sp = -1;
      000A21 90rBCr70         [24] 2157 	mov	dptr,#_sp
      000A24 74 FF            [12] 2158 	mov	a,#0xff
      000A26 F0               [24] 2159 	movx	@dptr,a
      000A27 A3               [24] 2160 	inc	dptr
      000A28 F0               [24] 2161 	movx	@dptr,a
                                   2162 ;	walk.c:208: return;
                                   2163 ;	walk.c:209: }
      000A29 22               [24] 2164 	ret
                                   2165 ;------------------------------------------------------------
                                   2166 ;Allocation info for local variables in function 'stpush'
                                   2167 ;------------------------------------------------------------
                                   2168 ;t                         Allocated to registers r5 r6 r7 
                                   2169 ;------------------------------------------------------------
                                   2170 ;	walk.c:211: static uint8_t stpush(struct node *t) {
                                   2171 ;	-----------------------------------------
                                   2172 ;	 function stpush
                                   2173 ;	-----------------------------------------
      000A2A                       2174 _stpush:
      000A2A AD 82            [24] 2175 	mov	r5,dpl
      000A2C AE 83            [24] 2176 	mov	r6,dph
      000A2E AF F0            [24] 2177 	mov	r7,b
                                   2178 ;	walk.c:212: if (sp == (SMAX - 1)) return 0u;
      000A30 90rBCr70         [24] 2179 	mov	dptr,#_sp
      000A33 E0               [24] 2180 	movx	a,@dptr
      000A34 FB               [12] 2181 	mov	r3,a
      000A35 A3               [24] 2182 	inc	dptr
      000A36 E0               [24] 2183 	movx	a,@dptr
      000A37 FC               [12] 2184 	mov	r4,a
      000A38 BB AF 07         [24] 2185 	cjne	r3,#0xaf,00102$
      000A3B BC 25 04         [24] 2186 	cjne	r4,#0x25,00102$
      000A3E 75 82 00         [24] 2187 	mov	dpl,#0x00
      000A41 22               [24] 2188 	ret
      000A42                       2189 00102$:
                                   2190 ;	walk.c:213: sp++;
      000A42 90rBCr70         [24] 2191 	mov	dptr,#_sp
      000A45 74 01            [12] 2192 	mov	a,#0x01
      000A47 2B               [12] 2193 	add	a,r3
      000A48 F0               [24] 2194 	movx	@dptr,a
      000A49 E4               [12] 2195 	clr	a
      000A4A 3C               [12] 2196 	addc	a,r4
      000A4B A3               [24] 2197 	inc	dptr
      000A4C F0               [24] 2198 	movx	@dptr,a
                                   2199 ;	walk.c:214: stack[sp] = *t;
      000A4D 90rBCr70         [24] 2200 	mov	dptr,#_sp
      000A50 E0               [24] 2201 	movx	a,@dptr
      000A51 FB               [12] 2202 	mov	r3,a
      000A52 A3               [24] 2203 	inc	dptr
      000A53 E0               [24] 2204 	movx	a,@dptr
      000A54 FC               [12] 2205 	mov	r4,a
      000A55 EB               [12] 2206 	mov	a,r3
      000A56 2B               [12] 2207 	add	a,r3
      000A57 FB               [12] 2208 	mov	r3,a
      000A58 EC               [12] 2209 	mov	a,r4
      000A59 33               [12] 2210 	rlc	a
      000A5A FC               [12] 2211 	mov	r4,a
      000A5B EB               [12] 2212 	mov	a,r3
      000A5C 2B               [12] 2213 	add	a,r3
      000A5D FB               [12] 2214 	mov	r3,a
      000A5E EC               [12] 2215 	mov	a,r4
      000A5F 33               [12] 2216 	rlc	a
      000A60 FC               [12] 2217 	mov	r4,a
      000A61 EB               [12] 2218 	mov	a,r3
      000A62 24rB0            [12] 2219 	add	a,#_stack
      000A64 FB               [12] 2220 	mov	r3,a
      000A65 EC               [12] 2221 	mov	a,r4
      000A66 34s25            [12] 2222 	addc	a,#(_stack >> 8)
      000A68 FC               [12] 2223 	mov	r4,a
      000A69 7A 00            [12] 2224 	mov	r2,#0x00
      000A6B 74 04            [12] 2225 	mov	a,#0x04
      000A6D C0 E0            [24] 2226 	push	acc
      000A6F E4               [12] 2227 	clr	a
      000A70 C0 E0            [24] 2228 	push	acc
      000A72 C0 05            [24] 2229 	push	ar5
      000A74 C0 06            [24] 2230 	push	ar6
      000A76 C0 07            [24] 2231 	push	ar7
      000A78 8B 82            [24] 2232 	mov	dpl,r3
      000A7A 8C 83            [24] 2233 	mov	dph,r4
      000A7C 8A F0            [24] 2234 	mov	b,r2
      000A7E 12r00r00         [24] 2235 	lcall	___memcpy
      000A81 E5 81            [12] 2236 	mov	a,sp
      000A83 24 FB            [12] 2237 	add	a,#0xfb
      000A85 F5 81            [12] 2238 	mov	sp,a
                                   2239 ;	walk.c:215: return 1u;
      000A87 75 82 01         [24] 2240 	mov	dpl,#0x01
                                   2241 ;	walk.c:216: }
      000A8A 22               [24] 2242 	ret
                                   2243 ;------------------------------------------------------------
                                   2244 ;Allocation info for local variables in function 'stpop'
                                   2245 ;------------------------------------------------------------
                                   2246 ;t                         Allocated to registers r5 r6 r7 
                                   2247 ;------------------------------------------------------------
                                   2248 ;	walk.c:218: static uint8_t stpop(struct node *t) {
                                   2249 ;	-----------------------------------------
                                   2250 ;	 function stpop
                                   2251 ;	-----------------------------------------
      000A8B                       2252 _stpop:
      000A8B AD 82            [24] 2253 	mov	r5,dpl
      000A8D AE 83            [24] 2254 	mov	r6,dph
      000A8F AF F0            [24] 2255 	mov	r7,b
                                   2256 ;	walk.c:219: if (sp == -1) return 0u;
      000A91 90rBCr70         [24] 2257 	mov	dptr,#_sp
      000A94 E0               [24] 2258 	movx	a,@dptr
      000A95 FB               [12] 2259 	mov	r3,a
      000A96 A3               [24] 2260 	inc	dptr
      000A97 E0               [24] 2261 	movx	a,@dptr
      000A98 FC               [12] 2262 	mov	r4,a
      000A99 BB FF 07         [24] 2263 	cjne	r3,#0xff,00102$
      000A9C BC FF 04         [24] 2264 	cjne	r4,#0xff,00102$
      000A9F 75 82 00         [24] 2265 	mov	dpl,#0x00
      000AA2 22               [24] 2266 	ret
      000AA3                       2267 00102$:
                                   2268 ;	walk.c:220: *t = stack[sp];
      000AA3 EB               [12] 2269 	mov	a,r3
      000AA4 2B               [12] 2270 	add	a,r3
      000AA5 FB               [12] 2271 	mov	r3,a
      000AA6 EC               [12] 2272 	mov	a,r4
      000AA7 33               [12] 2273 	rlc	a
      000AA8 FC               [12] 2274 	mov	r4,a
      000AA9 EB               [12] 2275 	mov	a,r3
      000AAA 2B               [12] 2276 	add	a,r3
      000AAB FB               [12] 2277 	mov	r3,a
      000AAC EC               [12] 2278 	mov	a,r4
      000AAD 33               [12] 2279 	rlc	a
      000AAE FC               [12] 2280 	mov	r4,a
      000AAF EB               [12] 2281 	mov	a,r3
      000AB0 24rB0            [12] 2282 	add	a,#_stack
      000AB2 FB               [12] 2283 	mov	r3,a
      000AB3 EC               [12] 2284 	mov	a,r4
      000AB4 34s25            [12] 2285 	addc	a,#(_stack >> 8)
      000AB6 FC               [12] 2286 	mov	r4,a
      000AB7 7A 00            [12] 2287 	mov	r2,#0x00
      000AB9 74 04            [12] 2288 	mov	a,#0x04
      000ABB C0 E0            [24] 2289 	push	acc
      000ABD E4               [12] 2290 	clr	a
      000ABE C0 E0            [24] 2291 	push	acc
      000AC0 C0 03            [24] 2292 	push	ar3
      000AC2 C0 04            [24] 2293 	push	ar4
      000AC4 C0 02            [24] 2294 	push	ar2
      000AC6 8D 82            [24] 2295 	mov	dpl,r5
      000AC8 8E 83            [24] 2296 	mov	dph,r6
      000ACA 8F F0            [24] 2297 	mov	b,r7
      000ACC 12r00r00         [24] 2298 	lcall	___memcpy
      000ACF E5 81            [12] 2299 	mov	a,sp
      000AD1 24 FB            [12] 2300 	add	a,#0xfb
      000AD3 F5 81            [12] 2301 	mov	sp,a
                                   2302 ;	walk.c:221: sp--;
      000AD5 90rBCr70         [24] 2303 	mov	dptr,#_sp
      000AD8 E0               [24] 2304 	movx	a,@dptr
      000AD9 24 FF            [12] 2305 	add	a,#0xff
      000ADB FE               [12] 2306 	mov	r6,a
      000ADC A3               [24] 2307 	inc	dptr
      000ADD E0               [24] 2308 	movx	a,@dptr
      000ADE 34 FF            [12] 2309 	addc	a,#0xff
      000AE0 FF               [12] 2310 	mov	r7,a
      000AE1 90rBCr70         [24] 2311 	mov	dptr,#_sp
      000AE4 EE               [12] 2312 	mov	a,r6
      000AE5 F0               [24] 2313 	movx	@dptr,a
      000AE6 EF               [12] 2314 	mov	a,r7
      000AE7 A3               [24] 2315 	inc	dptr
      000AE8 F0               [24] 2316 	movx	@dptr,a
                                   2317 ;	walk.c:222: return 1u;
      000AE9 75 82 01         [24] 2318 	mov	dpl,#0x01
                                   2319 ;	walk.c:223: }
      000AEC 22               [24] 2320 	ret
                                   2321 	.area CSEG    (CODE)
                                   2322 	.area CONST   (CODE)
                                   2323 	.area CONST   (CODE)
      000000                       2324 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2325 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2326 	.db 0x00
                                   2327 	.area CSEG    (CODE)
                                   2328 	.area CONST   (CODE)
      00000D                       2329 ___str_1:
      00000D 1B                    2330 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2331 	.ascii "[%d;%dHo"
             6F
      000016 00                    2332 	.db 0x00
                                   2333 	.area CSEG    (CODE)
                                   2334 	.area CONST   (CODE)
      000017                       2335 ___str_2:
      000017 1B                    2336 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2337 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2338 	.db 0x00
                                   2339 	.area CSEG    (CODE)
                                   2340 	.area CONST   (CODE)
      00002A                       2341 ___str_3:
      00002A 1B                    2342 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2343 	.ascii "[%d;%dH."
             2E
      000033 00                    2344 	.db 0x00
                                   2345 	.area CSEG    (CODE)
                                   2346 	.area CONST   (CODE)
      000034                       2347 ___str_4:
      000034 1B                    2348 	.db 0x1b
      000035 5B 32 4A              2349 	.ascii "[2J"
      000038 1B                    2350 	.db 0x1b
      000039 5B 3F 32 35 6C        2351 	.ascii "[?25l"
      00003E 00                    2352 	.db 0x00
                                   2353 	.area CSEG    (CODE)
                                   2354 	.area CONST   (CODE)
      00003F                       2355 ___str_5:
      00003F 1B                    2356 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2357 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2358 	.db 0x00
                                   2359 	.area CSEG    (CODE)
                                   2360 	.area CONST   (CODE)
      000052                       2361 ___str_6:
      000052 25 20 38 64 25 20 38  2362 	.ascii "% 8d% 8d"
             64
      00005A 00                    2363 	.db 0x00
                                   2364 	.area CSEG    (CODE)
                                   2365 	.area CONST   (CODE)
      00005B                       2366 ___str_7:
      00005B 1B                    2367 	.db 0x1b
      00005C 5B 32 4A              2368 	.ascii "[2J"
      00005F 1B                    2369 	.db 0x1b
      000060 5B 3F 32 35 68        2370 	.ascii "[?25h"
      000065 00                    2371 	.db 0x00
                                   2372 	.area CSEG    (CODE)
                                   2373 	.area XINIT   (CODE)
      000000                       2374 __xinit__neigh:
      000000 FF FF                 2375 	.byte #0xff, #0xff	; -1
      000002 01 00                 2376 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2377 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2378 	.byte #0xff, #0xff	; -1
      000008 01 00                 2379 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2380 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2381 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2382 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2383 	.byte #0xff, #0xff	; -1
      000012 00 00                 2384 	.byte #0x00, #0x00	;  0
      000014 00 00                 2385 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2386 	.byte #0xff, #0xff	; -1
      000018 01 00                 2387 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2388 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2389 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2390 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2391 	.byte #0xff, #0xff	; -1
      000022 01 00                 2392 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2393 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2394 	.byte #0xff, #0xff	; -1
      000028 01 00                 2395 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2396 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2397 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2398 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2399 	.byte #0xff, #0xff	; -1
      000032 00 00                 2400 	.byte #0x00, #0x00	;  0
      000034 00 00                 2401 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2402 	.byte #0xff, #0xff	; -1
      000038 01 00                 2403 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2404 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2405 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2406 	.byte #0x01, #0x00	;  1
                                   2407 	.area CABS    (ABS,CODE)
