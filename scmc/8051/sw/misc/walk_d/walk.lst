                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _stack:
      0025B0                        325 	.ds 38592
      00BC70                        326 _sp:
      00BC70                        327 	.ds 2
                           00F006   328 _OEreg	=	0xf006
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _neigh:
      000000                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r17         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r06r81         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	walk.c:7: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	walk.c:15: __endasm;
      000000 C0 E0            [24]  395 	push	acc
      000002 E5 82            [12]  396 	mov	a, dpl
      000004 12 00 3C         [24]  397 	lcall	0x003c
      000007 D0 E0            [24]  398 	pop	acc
      000009 22               [24]  399 	ret
                                    400 ;	walk.c:16: }
                                    401 ;	naked function: no epilogue.
                                    402 ;------------------------------------------------------------
                                    403 ;Allocation info for local variables in function 'getchar'
                                    404 ;------------------------------------------------------------
                                    405 ;	walk.c:18: int getchar(void) __naked {
                                    406 ;	-----------------------------------------
                                    407 ;	 function getchar
                                    408 ;	-----------------------------------------
      00000A                        409 _getchar:
                                    410 ;	naked function: no prologue.
                                    411 ;	walk.c:26: __endasm;
      00000A C0 E0            [24]  412 	push	acc
      00000C 12 00 36         [24]  413 	lcall	0x0036
      00000F F5 82            [12]  414 	mov	dpl, a
      000011 75 83 00         [24]  415 	mov	dph, #0
      000014 D0 E0            [24]  416 	pop	acc
      000016 22               [24]  417 	ret
                                    418 ;	walk.c:27: }
                                    419 ;	naked function: no epilogue.
                                    420 ;------------------------------------------------------------
                                    421 ;Allocation info for local variables in function 'int0'
                                    422 ;------------------------------------------------------------
                                    423 ;	walk.c:33: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    424 ;	-----------------------------------------
                                    425 ;	 function int0
                                    426 ;	-----------------------------------------
      000017                        427 _int0:
                           00000F   428 	ar7 = 0x0f
                           00000E   429 	ar6 = 0x0e
                           00000D   430 	ar5 = 0x0d
                           00000C   431 	ar4 = 0x0c
                           00000B   432 	ar3 = 0x0b
                           00000A   433 	ar2 = 0x0a
                           000009   434 	ar1 = 0x09
                           000008   435 	ar0 = 0x08
      000017 C0 D0            [24]  436 	push	psw
      000019 75 D0 08         [24]  437 	mov	psw,#0x08
                                    438 ;	walk.c:34: i0 = 0u;
      00001C 78r00            [12]  439 	mov	r0,#_i0
      00001E 76 00            [12]  440 	mov	@r0,#0x00
                                    441 ;	walk.c:35: }
      000020 D0 D0            [24]  442 	pop	psw
      000022 32               [24]  443 	reti
                                    444 ;	eliminated unneeded push/pop dpl
                                    445 ;	eliminated unneeded push/pop dph
                                    446 ;	eliminated unneeded push/pop b
                                    447 ;	eliminated unneeded push/pop acc
                                    448 ;------------------------------------------------------------
                                    449 ;Allocation info for local variables in function 'bang'
                                    450 ;------------------------------------------------------------
                                    451 ;	walk.c:41: static void bang(void) {
                                    452 ;	-----------------------------------------
                                    453 ;	 function bang
                                    454 ;	-----------------------------------------
      000023                        455 _bang:
                           000007   456 	ar7 = 0x07
                           000006   457 	ar6 = 0x06
                           000005   458 	ar5 = 0x05
                           000004   459 	ar4 = 0x04
                           000003   460 	ar3 = 0x03
                           000002   461 	ar2 = 0x02
                           000001   462 	ar1 = 0x01
                           000000   463 	ar0 = 0x00
                                    464 ;	walk.c:42: (void)puts("Memory error");
      000023 90r00r00         [24]  465 	mov	dptr,#___str_0
      000026 75 F0 80         [24]  466 	mov	b,#0x80
      000029 12r00r00         [24]  467 	lcall	_puts
                                    468 ;	walk.c:38: PCON |= 2;
      00002C 43 87 02         [24]  469 	orl	_PCON,#0x02
                                    470 ;	walk.c:45: return;
                                    471 ;	walk.c:46: }
      00002F 22               [24]  472 	ret
                                    473 ;------------------------------------------------------------
                                    474 ;Allocation info for local variables in function 'setOE'
                                    475 ;------------------------------------------------------------
                                    476 ;mask                      Allocated to registers r7 
                                    477 ;------------------------------------------------------------
                                    478 ;	walk.c:88: static void setOE(uint8_t mask) {
                                    479 ;	-----------------------------------------
                                    480 ;	 function setOE
                                    481 ;	-----------------------------------------
      000030                        482 _setOE:
      000030 AF 82            [24]  483 	mov	r7,dpl
                                    484 ;	walk.c:89: OE76 |= mask;
      000032 78r01            [12]  485 	mov	r0,#_OE76
      000034 EF               [12]  486 	mov	a,r7
      000035 46               [12]  487 	orl	a,@r0
      000036 F6               [12]  488 	mov	@r0,a
                                    489 ;	walk.c:90: P1_7 = 0;
                                    490 ;	assignBit
      000037 C2 97            [12]  491 	clr	_P1_7
                                    492 ;	walk.c:95: __endasm;
      000039 00               [12]  493 	nop
      00003A 00               [12]  494 	nop
      00003B 00               [12]  495 	nop
                                    496 ;	walk.c:96: OEreg = OE76;
      00003C 78r01            [12]  497 	mov	r0,#_OE76
      00003E 90 F0 06         [24]  498 	mov	dptr,#_OEreg
      000041 E6               [12]  499 	mov	a,@r0
      000042 F0               [24]  500 	movx	@dptr,a
                                    501 ;	walk.c:97: P1_7 = 1;
                                    502 ;	assignBit
      000043 D2 97            [12]  503 	setb	_P1_7
                                    504 ;	walk.c:102: __endasm;
      000045 00               [12]  505 	nop
      000046 00               [12]  506 	nop
      000047 00               [12]  507 	nop
                                    508 ;	walk.c:104: return;
                                    509 ;	walk.c:105: }
      000048 22               [24]  510 	ret
                                    511 ;------------------------------------------------------------
                                    512 ;Allocation info for local variables in function 'unsetOE'
                                    513 ;------------------------------------------------------------
                                    514 ;mask                      Allocated to registers r7 
                                    515 ;------------------------------------------------------------
                                    516 ;	walk.c:107: static void unsetOE(uint8_t mask) {
                                    517 ;	-----------------------------------------
                                    518 ;	 function unsetOE
                                    519 ;	-----------------------------------------
      000049                        520 _unsetOE:
                                    521 ;	walk.c:108: OE76 &= ~mask;
      000049 E5 82            [12]  522 	mov	a,dpl
      00004B F4               [12]  523 	cpl	a
      00004C FF               [12]  524 	mov	r7,a
      00004D 78r01            [12]  525 	mov	r0,#_OE76
      00004F 56               [12]  526 	anl	a,@r0
      000050 F6               [12]  527 	mov	@r0,a
                                    528 ;	walk.c:109: P1_7 = 0;
                                    529 ;	assignBit
      000051 C2 97            [12]  530 	clr	_P1_7
                                    531 ;	walk.c:114: __endasm;
      000053 00               [12]  532 	nop
      000054 00               [12]  533 	nop
      000055 00               [12]  534 	nop
                                    535 ;	walk.c:115: OEreg = OE76;
      000056 78r01            [12]  536 	mov	r0,#_OE76
      000058 90 F0 06         [24]  537 	mov	dptr,#_OEreg
      00005B E6               [12]  538 	mov	a,@r0
      00005C F0               [24]  539 	movx	@dptr,a
                                    540 ;	walk.c:116: P1_7 = 1;
                                    541 ;	assignBit
      00005D D2 97            [12]  542 	setb	_P1_7
                                    543 ;	walk.c:121: __endasm;
      00005F 00               [12]  544 	nop
      000060 00               [12]  545 	nop
      000061 00               [12]  546 	nop
                                    547 ;	walk.c:123: return;
                                    548 ;	walk.c:124: }
      000062 22               [24]  549 	ret
                                    550 ;------------------------------------------------------------
                                    551 ;Allocation info for local variables in function 'flipOE'
                                    552 ;------------------------------------------------------------
                                    553 ;mask                      Allocated to registers r7 
                                    554 ;------------------------------------------------------------
                                    555 ;	walk.c:126: static void flipOE(uint8_t mask) {
                                    556 ;	-----------------------------------------
                                    557 ;	 function flipOE
                                    558 ;	-----------------------------------------
      000063                        559 _flipOE:
      000063 AF 82            [24]  560 	mov	r7,dpl
                                    561 ;	walk.c:127: OE76 ^= mask;
      000065 78r01            [12]  562 	mov	r0,#_OE76
      000067 EF               [12]  563 	mov	a,r7
      000068 66               [12]  564 	xrl	a,@r0
      000069 F6               [12]  565 	mov	@r0,a
                                    566 ;	walk.c:128: P1_7 = 0;
                                    567 ;	assignBit
      00006A C2 97            [12]  568 	clr	_P1_7
                                    569 ;	walk.c:133: __endasm;
      00006C 00               [12]  570 	nop
      00006D 00               [12]  571 	nop
      00006E 00               [12]  572 	nop
                                    573 ;	walk.c:134: OEreg = OE76;
      00006F 78r01            [12]  574 	mov	r0,#_OE76
      000071 90 F0 06         [24]  575 	mov	dptr,#_OEreg
      000074 E6               [12]  576 	mov	a,@r0
      000075 F0               [24]  577 	movx	@dptr,a
                                    578 ;	walk.c:135: P1_7 = 1;
                                    579 ;	assignBit
      000076 D2 97            [12]  580 	setb	_P1_7
                                    581 ;	walk.c:140: __endasm;
      000078 00               [12]  582 	nop
      000079 00               [12]  583 	nop
      00007A 00               [12]  584 	nop
                                    585 ;	walk.c:142: return;
                                    586 ;	walk.c:143: }
      00007B 22               [24]  587 	ret
                                    588 ;------------------------------------------------------------
                                    589 ;Allocation info for local variables in function 'update'
                                    590 ;------------------------------------------------------------
                                    591 ;cur                       Allocated to stack - _bp -5
                                    592 ;j                         Allocated to stack - _bp -6
                                    593 ;t                         Allocated to stack - _bp +1
                                    594 ;sloc0                     Allocated to stack - _bp +4
                                    595 ;sloc1                     Allocated to stack - _bp +6
                                    596 ;sloc2                     Allocated to stack - _bp +8
                                    597 ;------------------------------------------------------------
                                    598 ;	walk.c:145: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    599 ;	-----------------------------------------
                                    600 ;	 function update
                                    601 ;	-----------------------------------------
      00007C                        602 _update:
      00007C C0*00            [24]  603 	push	_bp
      00007E 85 81*00         [24]  604 	mov	_bp,sp
      000081 C0 82            [24]  605 	push	dpl
      000083 C0 83            [24]  606 	push	dph
      000085 C0 F0            [24]  607 	push	b
      000087 E5 81            [12]  608 	mov	a,sp
      000089 24 07            [12]  609 	add	a,#0x07
      00008B F5 81            [12]  610 	mov	sp,a
                                    611 ;	walk.c:146: t->r = cur->r + neigh[j].r;
      00008D E5*00            [12]  612 	mov	a,_bp
      00008F 24 FB            [12]  613 	add	a,#0xfb
      000091 F8               [12]  614 	mov	r0,a
      000092 86 02            [24]  615 	mov	ar2,@r0
      000094 08               [12]  616 	inc	r0
      000095 86 03            [24]  617 	mov	ar3,@r0
      000097 08               [12]  618 	inc	r0
      000098 86 04            [24]  619 	mov	ar4,@r0
      00009A 8A 82            [24]  620 	mov	dpl,r2
      00009C 8B 83            [24]  621 	mov	dph,r3
      00009E 8C F0            [24]  622 	mov	b,r4
      0000A0 E5*00            [12]  623 	mov	a,_bp
      0000A2 24 04            [12]  624 	add	a,#0x04
      0000A4 F8               [12]  625 	mov	r0,a
      0000A5 12r00r00         [24]  626 	lcall	__gptrget
      0000A8 F6               [12]  627 	mov	@r0,a
      0000A9 A3               [24]  628 	inc	dptr
      0000AA 12r00r00         [24]  629 	lcall	__gptrget
      0000AD 08               [12]  630 	inc	r0
      0000AE F6               [12]  631 	mov	@r0,a
      0000AF E5*00            [12]  632 	mov	a,_bp
      0000B1 24 FA            [12]  633 	add	a,#0xfa
      0000B3 F8               [12]  634 	mov	r0,a
      0000B4 E5*00            [12]  635 	mov	a,_bp
      0000B6 24 06            [12]  636 	add	a,#0x06
      0000B8 F9               [12]  637 	mov	r1,a
      0000B9 E6               [12]  638 	mov	a,@r0
      0000BA 75 F0 04         [24]  639 	mov	b,#0x04
      0000BD A4               [48]  640 	mul	ab
      0000BE F7               [12]  641 	mov	@r1,a
      0000BF 09               [12]  642 	inc	r1
      0000C0 A7 F0            [24]  643 	mov	@r1,b
      0000C2 E5*00            [12]  644 	mov	a,_bp
      0000C4 24 06            [12]  645 	add	a,#0x06
      0000C6 F8               [12]  646 	mov	r0,a
      0000C7 E6               [12]  647 	mov	a,@r0
      0000C8 24r00            [12]  648 	add	a,#_neigh
      0000CA F5 82            [12]  649 	mov	dpl,a
      0000CC 08               [12]  650 	inc	r0
      0000CD E6               [12]  651 	mov	a,@r0
      0000CE 34s00            [12]  652 	addc	a,#(_neigh >> 8)
      0000D0 F5 83            [12]  653 	mov	dph,a
      0000D2 E0               [24]  654 	movx	a,@dptr
      0000D3 FF               [12]  655 	mov	r7,a
      0000D4 A3               [24]  656 	inc	dptr
      0000D5 E0               [24]  657 	movx	a,@dptr
      0000D6 FE               [12]  658 	mov	r6,a
      0000D7 E5*00            [12]  659 	mov	a,_bp
      0000D9 24 04            [12]  660 	add	a,#0x04
      0000DB F8               [12]  661 	mov	r0,a
      0000DC EF               [12]  662 	mov	a,r7
      0000DD 26               [12]  663 	add	a,@r0
      0000DE FF               [12]  664 	mov	r7,a
      0000DF EE               [12]  665 	mov	a,r6
      0000E0 08               [12]  666 	inc	r0
      0000E1 36               [12]  667 	addc	a,@r0
      0000E2 FE               [12]  668 	mov	r6,a
      0000E3 A8*00            [24]  669 	mov	r0,_bp
      0000E5 08               [12]  670 	inc	r0
      0000E6 86 82            [24]  671 	mov	dpl,@r0
      0000E8 08               [12]  672 	inc	r0
      0000E9 86 83            [24]  673 	mov	dph,@r0
      0000EB 08               [12]  674 	inc	r0
      0000EC 86 F0            [24]  675 	mov	b,@r0
      0000EE EF               [12]  676 	mov	a,r7
      0000EF 12r00r00         [24]  677 	lcall	__gptrput
      0000F2 A3               [24]  678 	inc	dptr
      0000F3 EE               [12]  679 	mov	a,r6
      0000F4 12r00r00         [24]  680 	lcall	__gptrput
                                    681 ;	walk.c:147: t->c = cur->c + neigh[j].c;
      0000F7 A8*00            [24]  682 	mov	r0,_bp
      0000F9 08               [12]  683 	inc	r0
      0000FA E5*00            [12]  684 	mov	a,_bp
      0000FC 24 08            [12]  685 	add	a,#0x08
      0000FE F9               [12]  686 	mov	r1,a
      0000FF 74 02            [12]  687 	mov	a,#0x02
      000101 26               [12]  688 	add	a,@r0
      000102 F7               [12]  689 	mov	@r1,a
      000103 E4               [12]  690 	clr	a
      000104 08               [12]  691 	inc	r0
      000105 36               [12]  692 	addc	a,@r0
      000106 09               [12]  693 	inc	r1
      000107 F7               [12]  694 	mov	@r1,a
      000108 08               [12]  695 	inc	r0
      000109 09               [12]  696 	inc	r1
      00010A E6               [12]  697 	mov	a,@r0
      00010B F7               [12]  698 	mov	@r1,a
      00010C 74 02            [12]  699 	mov	a,#0x02
      00010E 2A               [12]  700 	add	a,r2
      00010F FA               [12]  701 	mov	r2,a
      000110 E4               [12]  702 	clr	a
      000111 3B               [12]  703 	addc	a,r3
      000112 FB               [12]  704 	mov	r3,a
      000113 8A 82            [24]  705 	mov	dpl,r2
      000115 8B 83            [24]  706 	mov	dph,r3
      000117 8C F0            [24]  707 	mov	b,r4
      000119 12r00r00         [24]  708 	lcall	__gptrget
      00011C FA               [12]  709 	mov	r2,a
      00011D A3               [24]  710 	inc	dptr
      00011E 12r00r00         [24]  711 	lcall	__gptrget
      000121 FB               [12]  712 	mov	r3,a
      000122 E5*00            [12]  713 	mov	a,_bp
      000124 24 06            [12]  714 	add	a,#0x06
      000126 F8               [12]  715 	mov	r0,a
      000127 E6               [12]  716 	mov	a,@r0
      000128 24r00            [12]  717 	add	a,#_neigh
      00012A FC               [12]  718 	mov	r4,a
      00012B 08               [12]  719 	inc	r0
      00012C E6               [12]  720 	mov	a,@r0
      00012D 34s00            [12]  721 	addc	a,#(_neigh >> 8)
      00012F FD               [12]  722 	mov	r5,a
      000130 8C 82            [24]  723 	mov	dpl,r4
      000132 8D 83            [24]  724 	mov	dph,r5
      000134 A3               [24]  725 	inc	dptr
      000135 A3               [24]  726 	inc	dptr
      000136 E0               [24]  727 	movx	a,@dptr
      000137 FC               [12]  728 	mov	r4,a
      000138 A3               [24]  729 	inc	dptr
      000139 E0               [24]  730 	movx	a,@dptr
      00013A FD               [12]  731 	mov	r5,a
      00013B EC               [12]  732 	mov	a,r4
      00013C 2A               [12]  733 	add	a,r2
      00013D FA               [12]  734 	mov	r2,a
      00013E ED               [12]  735 	mov	a,r5
      00013F 3B               [12]  736 	addc	a,r3
      000140 FB               [12]  737 	mov	r3,a
      000141 E5*00            [12]  738 	mov	a,_bp
      000143 24 08            [12]  739 	add	a,#0x08
      000145 F8               [12]  740 	mov	r0,a
      000146 86 82            [24]  741 	mov	dpl,@r0
      000148 08               [12]  742 	inc	r0
      000149 86 83            [24]  743 	mov	dph,@r0
      00014B 08               [12]  744 	inc	r0
      00014C 86 F0            [24]  745 	mov	b,@r0
      00014E EA               [12]  746 	mov	a,r2
      00014F 12r00r00         [24]  747 	lcall	__gptrput
      000152 A3               [24]  748 	inc	dptr
      000153 EB               [12]  749 	mov	a,r3
      000154 12r00r00         [24]  750 	lcall	__gptrput
                                    751 ;	walk.c:149: if (t->r < 0) t->r += ROWS;
      000157 A8*00            [24]  752 	mov	r0,_bp
      000159 08               [12]  753 	inc	r0
      00015A 86 82            [24]  754 	mov	dpl,@r0
      00015C 08               [12]  755 	inc	r0
      00015D 86 83            [24]  756 	mov	dph,@r0
      00015F 08               [12]  757 	inc	r0
      000160 86 F0            [24]  758 	mov	b,@r0
      000162 12r00r00         [24]  759 	lcall	__gptrget
      000165 FD               [12]  760 	mov	r5,a
      000166 A3               [24]  761 	inc	dptr
      000167 12r00r00         [24]  762 	lcall	__gptrget
      00016A FC               [12]  763 	mov	r4,a
      00016B EE               [12]  764 	mov	a,r6
      00016C 30 E7 1D         [24]  765 	jnb	acc.7,00104$
      00016F 74 30            [12]  766 	mov	a,#0x30
      000171 2D               [12]  767 	add	a,r5
      000172 FF               [12]  768 	mov	r7,a
      000173 E4               [12]  769 	clr	a
      000174 3C               [12]  770 	addc	a,r4
      000175 FE               [12]  771 	mov	r6,a
      000176 A8*00            [24]  772 	mov	r0,_bp
      000178 08               [12]  773 	inc	r0
      000179 86 82            [24]  774 	mov	dpl,@r0
      00017B 08               [12]  775 	inc	r0
      00017C 86 83            [24]  776 	mov	dph,@r0
      00017E 08               [12]  777 	inc	r0
      00017F 86 F0            [24]  778 	mov	b,@r0
      000181 EF               [12]  779 	mov	a,r7
      000182 12r00r00         [24]  780 	lcall	__gptrput
      000185 A3               [24]  781 	inc	dptr
      000186 EE               [12]  782 	mov	a,r6
      000187 12r00r00         [24]  783 	lcall	__gptrput
      00018A 80 27            [24]  784 	sjmp	00105$
      00018C                        785 00104$:
                                    786 ;	walk.c:150: else if (t->r >= ROWS) t->r -= ROWS;
      00018C C3               [12]  787 	clr	c
      00018D ED               [12]  788 	mov	a,r5
      00018E 94 30            [12]  789 	subb	a,#0x30
      000190 EC               [12]  790 	mov	a,r4
      000191 64 80            [12]  791 	xrl	a,#0x80
      000193 94 80            [12]  792 	subb	a,#0x80
      000195 40 1C            [24]  793 	jc	00105$
      000197 ED               [12]  794 	mov	a,r5
      000198 24 D0            [12]  795 	add	a,#0xd0
      00019A FD               [12]  796 	mov	r5,a
      00019B EC               [12]  797 	mov	a,r4
      00019C 34 FF            [12]  798 	addc	a,#0xff
      00019E FC               [12]  799 	mov	r4,a
      00019F A8*00            [24]  800 	mov	r0,_bp
      0001A1 08               [12]  801 	inc	r0
      0001A2 86 82            [24]  802 	mov	dpl,@r0
      0001A4 08               [12]  803 	inc	r0
      0001A5 86 83            [24]  804 	mov	dph,@r0
      0001A7 08               [12]  805 	inc	r0
      0001A8 86 F0            [24]  806 	mov	b,@r0
      0001AA ED               [12]  807 	mov	a,r5
      0001AB 12r00r00         [24]  808 	lcall	__gptrput
      0001AE A3               [24]  809 	inc	dptr
      0001AF EC               [12]  810 	mov	a,r4
      0001B0 12r00r00         [24]  811 	lcall	__gptrput
      0001B3                        812 00105$:
                                    813 ;	walk.c:151: if (t->c < 0) t->c += COLS;
      0001B3 E5*00            [12]  814 	mov	a,_bp
      0001B5 24 08            [12]  815 	add	a,#0x08
      0001B7 F8               [12]  816 	mov	r0,a
      0001B8 86 82            [24]  817 	mov	dpl,@r0
      0001BA 08               [12]  818 	inc	r0
      0001BB 86 83            [24]  819 	mov	dph,@r0
      0001BD 08               [12]  820 	inc	r0
      0001BE 86 F0            [24]  821 	mov	b,@r0
      0001C0 12r00r00         [24]  822 	lcall	__gptrget
      0001C3 A3               [24]  823 	inc	dptr
      0001C4 12r00r00         [24]  824 	lcall	__gptrget
      0001C7 30 E7 35         [24]  825 	jnb	acc.7,00109$
      0001CA E5*00            [12]  826 	mov	a,_bp
      0001CC 24 08            [12]  827 	add	a,#0x08
      0001CE F8               [12]  828 	mov	r0,a
      0001CF 86 82            [24]  829 	mov	dpl,@r0
      0001D1 08               [12]  830 	inc	r0
      0001D2 86 83            [24]  831 	mov	dph,@r0
      0001D4 08               [12]  832 	inc	r0
      0001D5 86 F0            [24]  833 	mov	b,@r0
      0001D7 12r00r00         [24]  834 	lcall	__gptrget
      0001DA FE               [12]  835 	mov	r6,a
      0001DB A3               [24]  836 	inc	dptr
      0001DC 12r00r00         [24]  837 	lcall	__gptrget
      0001DF FF               [12]  838 	mov	r7,a
      0001E0 74 C9            [12]  839 	mov	a,#0xc9
      0001E2 2E               [12]  840 	add	a,r6
      0001E3 FE               [12]  841 	mov	r6,a
      0001E4 E4               [12]  842 	clr	a
      0001E5 3F               [12]  843 	addc	a,r7
      0001E6 FF               [12]  844 	mov	r7,a
      0001E7 E5*00            [12]  845 	mov	a,_bp
      0001E9 24 08            [12]  846 	add	a,#0x08
      0001EB F8               [12]  847 	mov	r0,a
      0001EC 86 82            [24]  848 	mov	dpl,@r0
      0001EE 08               [12]  849 	inc	r0
      0001EF 86 83            [24]  850 	mov	dph,@r0
      0001F1 08               [12]  851 	inc	r0
      0001F2 86 F0            [24]  852 	mov	b,@r0
      0001F4 EE               [12]  853 	mov	a,r6
      0001F5 12r00r00         [24]  854 	lcall	__gptrput
      0001F8 A3               [24]  855 	inc	dptr
      0001F9 EF               [12]  856 	mov	a,r7
      0001FA 12r00r00         [24]  857 	lcall	__gptrput
      0001FD 80 55            [24]  858 	sjmp	00110$
      0001FF                        859 00109$:
                                    860 ;	walk.c:152: else if (t->c >= COLS) t->c -= COLS;
      0001FF E5*00            [12]  861 	mov	a,_bp
      000201 24 08            [12]  862 	add	a,#0x08
      000203 F8               [12]  863 	mov	r0,a
      000204 86 82            [24]  864 	mov	dpl,@r0
      000206 08               [12]  865 	inc	r0
      000207 86 83            [24]  866 	mov	dph,@r0
      000209 08               [12]  867 	inc	r0
      00020A 86 F0            [24]  868 	mov	b,@r0
      00020C 12r00r00         [24]  869 	lcall	__gptrget
      00020F FE               [12]  870 	mov	r6,a
      000210 A3               [24]  871 	inc	dptr
      000211 12r00r00         [24]  872 	lcall	__gptrget
      000214 FF               [12]  873 	mov	r7,a
      000215 C3               [12]  874 	clr	c
      000216 EE               [12]  875 	mov	a,r6
      000217 94 C9            [12]  876 	subb	a,#0xc9
      000219 EF               [12]  877 	mov	a,r7
      00021A 64 80            [12]  878 	xrl	a,#0x80
      00021C 94 80            [12]  879 	subb	a,#0x80
      00021E 40 34            [24]  880 	jc	00110$
      000220 E5*00            [12]  881 	mov	a,_bp
      000222 24 08            [12]  882 	add	a,#0x08
      000224 F8               [12]  883 	mov	r0,a
      000225 86 82            [24]  884 	mov	dpl,@r0
      000227 08               [12]  885 	inc	r0
      000228 86 83            [24]  886 	mov	dph,@r0
      00022A 08               [12]  887 	inc	r0
      00022B 86 F0            [24]  888 	mov	b,@r0
      00022D 12r00r00         [24]  889 	lcall	__gptrget
      000230 FE               [12]  890 	mov	r6,a
      000231 A3               [24]  891 	inc	dptr
      000232 12r00r00         [24]  892 	lcall	__gptrget
      000235 FF               [12]  893 	mov	r7,a
      000236 EE               [12]  894 	mov	a,r6
      000237 24 37            [12]  895 	add	a,#0x37
      000239 FE               [12]  896 	mov	r6,a
      00023A EF               [12]  897 	mov	a,r7
      00023B 34 FF            [12]  898 	addc	a,#0xff
      00023D FF               [12]  899 	mov	r7,a
      00023E E5*00            [12]  900 	mov	a,_bp
      000240 24 08            [12]  901 	add	a,#0x08
      000242 F8               [12]  902 	mov	r0,a
      000243 86 82            [24]  903 	mov	dpl,@r0
      000245 08               [12]  904 	inc	r0
      000246 86 83            [24]  905 	mov	dph,@r0
      000248 08               [12]  906 	inc	r0
      000249 86 F0            [24]  907 	mov	b,@r0
      00024B EE               [12]  908 	mov	a,r6
      00024C 12r00r00         [24]  909 	lcall	__gptrput
      00024F A3               [24]  910 	inc	dptr
      000250 EF               [12]  911 	mov	a,r7
      000251 12r00r00         [24]  912 	lcall	__gptrput
      000254                        913 00110$:
                                    914 ;	walk.c:154: if (g[t->r][t->c] == 0xaau) return 0u;
      000254 A8*00            [24]  915 	mov	r0,_bp
      000256 08               [12]  916 	inc	r0
      000257 86 82            [24]  917 	mov	dpl,@r0
      000259 08               [12]  918 	inc	r0
      00025A 86 83            [24]  919 	mov	dph,@r0
      00025C 08               [12]  920 	inc	r0
      00025D 86 F0            [24]  921 	mov	b,@r0
      00025F 12r00r00         [24]  922 	lcall	__gptrget
      000262 FE               [12]  923 	mov	r6,a
      000263 A3               [24]  924 	inc	dptr
      000264 12r00r00         [24]  925 	lcall	__gptrget
      000267 FF               [12]  926 	mov	r7,a
      000268 C0 06            [24]  927 	push	ar6
      00026A C0 07            [24]  928 	push	ar7
      00026C 90 00 C9         [24]  929 	mov	dptr,#0x00c9
      00026F 12r00r00         [24]  930 	lcall	__mulint
      000272 AE 82            [24]  931 	mov	r6,dpl
      000274 AF 83            [24]  932 	mov	r7,dph
      000276 15 81            [12]  933 	dec	sp
      000278 15 81            [12]  934 	dec	sp
      00027A EE               [12]  935 	mov	a,r6
      00027B 24r00            [12]  936 	add	a,#_g
      00027D FE               [12]  937 	mov	r6,a
      00027E EF               [12]  938 	mov	a,r7
      00027F 34s00            [12]  939 	addc	a,#(_g >> 8)
      000281 FF               [12]  940 	mov	r7,a
      000282 E5*00            [12]  941 	mov	a,_bp
      000284 24 08            [12]  942 	add	a,#0x08
      000286 F8               [12]  943 	mov	r0,a
      000287 86 82            [24]  944 	mov	dpl,@r0
      000289 08               [12]  945 	inc	r0
      00028A 86 83            [24]  946 	mov	dph,@r0
      00028C 08               [12]  947 	inc	r0
      00028D 86 F0            [24]  948 	mov	b,@r0
      00028F 12r00r00         [24]  949 	lcall	__gptrget
      000292 FC               [12]  950 	mov	r4,a
      000293 A3               [24]  951 	inc	dptr
      000294 12r00r00         [24]  952 	lcall	__gptrget
      000297 FD               [12]  953 	mov	r5,a
      000298 EC               [12]  954 	mov	a,r4
      000299 2E               [12]  955 	add	a,r6
      00029A F5 82            [12]  956 	mov	dpl,a
      00029C ED               [12]  957 	mov	a,r5
      00029D 3F               [12]  958 	addc	a,r7
      00029E F5 83            [12]  959 	mov	dph,a
      0002A0 E0               [24]  960 	movx	a,@dptr
      0002A1 FF               [12]  961 	mov	r7,a
      0002A2 BF AA 05         [24]  962 	cjne	r7,#0xaa,00114$
      0002A5 75 82 00         [24]  963 	mov	dpl,#0x00
      0002A8 80 59            [24]  964 	sjmp	00116$
      0002AA                        965 00114$:
                                    966 ;	walk.c:155: else if (g[t->r][t->c] != 0x55u) bang();
      0002AA A8*00            [24]  967 	mov	r0,_bp
      0002AC 08               [12]  968 	inc	r0
      0002AD 86 82            [24]  969 	mov	dpl,@r0
      0002AF 08               [12]  970 	inc	r0
      0002B0 86 83            [24]  971 	mov	dph,@r0
      0002B2 08               [12]  972 	inc	r0
      0002B3 86 F0            [24]  973 	mov	b,@r0
      0002B5 12r00r00         [24]  974 	lcall	__gptrget
      0002B8 FE               [12]  975 	mov	r6,a
      0002B9 A3               [24]  976 	inc	dptr
      0002BA 12r00r00         [24]  977 	lcall	__gptrget
      0002BD FF               [12]  978 	mov	r7,a
      0002BE C0 06            [24]  979 	push	ar6
      0002C0 C0 07            [24]  980 	push	ar7
      0002C2 90 00 C9         [24]  981 	mov	dptr,#0x00c9
      0002C5 12r00r00         [24]  982 	lcall	__mulint
      0002C8 AE 82            [24]  983 	mov	r6,dpl
      0002CA AF 83            [24]  984 	mov	r7,dph
      0002CC 15 81            [12]  985 	dec	sp
      0002CE 15 81            [12]  986 	dec	sp
      0002D0 EE               [12]  987 	mov	a,r6
      0002D1 24r00            [12]  988 	add	a,#_g
      0002D3 FE               [12]  989 	mov	r6,a
      0002D4 EF               [12]  990 	mov	a,r7
      0002D5 34s00            [12]  991 	addc	a,#(_g >> 8)
      0002D7 FF               [12]  992 	mov	r7,a
      0002D8 E5*00            [12]  993 	mov	a,_bp
      0002DA 24 08            [12]  994 	add	a,#0x08
      0002DC F8               [12]  995 	mov	r0,a
      0002DD 86 82            [24]  996 	mov	dpl,@r0
      0002DF 08               [12]  997 	inc	r0
      0002E0 86 83            [24]  998 	mov	dph,@r0
      0002E2 08               [12]  999 	inc	r0
      0002E3 86 F0            [24] 1000 	mov	b,@r0
      0002E5 12r00r00         [24] 1001 	lcall	__gptrget
      0002E8 FC               [12] 1002 	mov	r4,a
      0002E9 A3               [24] 1003 	inc	dptr
      0002EA 12r00r00         [24] 1004 	lcall	__gptrget
      0002ED FD               [12] 1005 	mov	r5,a
      0002EE EC               [12] 1006 	mov	a,r4
      0002EF 2E               [12] 1007 	add	a,r6
      0002F0 F5 82            [12] 1008 	mov	dpl,a
      0002F2 ED               [12] 1009 	mov	a,r5
      0002F3 3F               [12] 1010 	addc	a,r7
      0002F4 F5 83            [12] 1011 	mov	dph,a
      0002F6 E0               [24] 1012 	movx	a,@dptr
      0002F7 FF               [12] 1013 	mov	r7,a
      0002F8 BF 55 02         [24] 1014 	cjne	r7,#0x55,00148$
      0002FB 80 03            [24] 1015 	sjmp	00115$
      0002FD                       1016 00148$:
      0002FD 12r00r23         [24] 1017 	lcall	_bang
      000300                       1018 00115$:
                                   1019 ;	walk.c:157: return 1u;
      000300 75 82 01         [24] 1020 	mov	dpl,#0x01
      000303                       1021 00116$:
                                   1022 ;	walk.c:158: }
      000303 85*00 81         [24] 1023 	mov	sp,_bp
      000306 D0*00            [24] 1024 	pop	_bp
      000308 22               [24] 1025 	ret
                                   1026 ;------------------------------------------------------------
                                   1027 ;Allocation info for local variables in function 'walk'
                                   1028 ;------------------------------------------------------------
                                   1029 ;nstart                    Allocated to registers 
                                   1030 ;cur                       Allocated to stack - _bp +10
                                   1031 ;t                         Allocated to stack - _bp +14
                                   1032 ;j                         Allocated to stack - _bp +18
                                   1033 ;f                         Allocated to registers r3 
                                   1034 ;sloc0                     Allocated to stack - _bp +1
                                   1035 ;sloc1                     Allocated to stack - _bp +2
                                   1036 ;sloc2                     Allocated to stack - _bp +3
                                   1037 ;sloc3                     Allocated to stack - _bp +17
                                   1038 ;sloc4                     Allocated to stack - _bp +4
                                   1039 ;sloc5                     Allocated to stack - _bp +5
                                   1040 ;sloc6                     Allocated to stack - _bp +6
                                   1041 ;sloc7                     Allocated to stack - _bp +7
                                   1042 ;------------------------------------------------------------
                                   1043 ;	walk.c:160: static void walk(struct node *nstart) {
                                   1044 ;	-----------------------------------------
                                   1045 ;	 function walk
                                   1046 ;	-----------------------------------------
      000309                       1047 _walk:
      000309 C0*00            [24] 1048 	push	_bp
      00030B E5 81            [12] 1049 	mov	a,sp
      00030D F5*00            [12] 1050 	mov	_bp,a
      00030F 24 12            [12] 1051 	add	a,#0x12
      000311 F5 81            [12] 1052 	mov	sp,a
      000313 AD 82            [24] 1053 	mov	r5,dpl
      000315 AE 83            [24] 1054 	mov	r6,dph
      000317 AF F0            [24] 1055 	mov	r7,b
                                   1056 ;	walk.c:164: cur = *nstart;
      000319 E5*00            [12] 1057 	mov	a,_bp
      00031B 24 0A            [12] 1058 	add	a,#0x0a
      00031D F9               [12] 1059 	mov	r1,a
      00031E FA               [12] 1060 	mov	r2,a
      00031F 7B 00            [12] 1061 	mov	r3,#0x00
      000321 7C 40            [12] 1062 	mov	r4,#0x40
      000323 C0 01            [24] 1063 	push	ar1
      000325 74 04            [12] 1064 	mov	a,#0x04
      000327 C0 E0            [24] 1065 	push	acc
      000329 E4               [12] 1066 	clr	a
      00032A C0 E0            [24] 1067 	push	acc
      00032C C0 05            [24] 1068 	push	ar5
      00032E C0 06            [24] 1069 	push	ar6
      000330 C0 07            [24] 1070 	push	ar7
      000332 8A 82            [24] 1071 	mov	dpl,r2
      000334 8B 83            [24] 1072 	mov	dph,r3
      000336 8C F0            [24] 1073 	mov	b,r4
      000338 12r00r00         [24] 1074 	lcall	___memcpy
      00033B E5 81            [12] 1075 	mov	a,sp
      00033D 24 FB            [12] 1076 	add	a,#0xfb
      00033F F5 81            [12] 1077 	mov	sp,a
      000341 D0 01            [24] 1078 	pop	ar1
                                   1079 ;	walk.c:166: process:
      000343 E5*00            [12] 1080 	mov	a,_bp
      000345 24 06            [12] 1081 	add	a,#0x06
      000347 F8               [12] 1082 	mov	r0,a
      000348 A6 01            [24] 1083 	mov	@r0,ar1
      00034A E5*00            [12] 1084 	mov	a,_bp
      00034C 24 0E            [12] 1085 	add	a,#0x0e
      00034E FE               [12] 1086 	mov	r6,a
      00034F E5*00            [12] 1087 	mov	a,_bp
      000351 24 03            [12] 1088 	add	a,#0x03
      000353 F8               [12] 1089 	mov	r0,a
      000354 A6 01            [24] 1090 	mov	@r0,ar1
      000356 E5*00            [12] 1091 	mov	a,_bp
      000358 24 05            [12] 1092 	add	a,#0x05
      00035A F8               [12] 1093 	mov	r0,a
      00035B A6 01            [24] 1094 	mov	@r0,ar1
      00035D E5*00            [12] 1095 	mov	a,_bp
      00035F 24 04            [12] 1096 	add	a,#0x04
      000361 F8               [12] 1097 	mov	r0,a
      000362 A6 06            [24] 1098 	mov	@r0,ar6
      000364 89 02            [24] 1099 	mov	ar2,r1
      000366 A8*00            [24] 1100 	mov	r0,_bp
      000368 08               [12] 1101 	inc	r0
      000369 A6 06            [24] 1102 	mov	@r0,ar6
      00036B A8*00            [24] 1103 	mov	r0,_bp
      00036D 08               [12] 1104 	inc	r0
      00036E 08               [12] 1105 	inc	r0
      00036F A6 01            [24] 1106 	mov	@r0,ar1
      000371 74 02            [12] 1107 	mov	a,#0x02
      000373 29               [12] 1108 	add	a,r1
      000374 F8               [12] 1109 	mov	r0,a
      000375                       1110 00101$:
                                   1111 ;	walk.c:167: g[cur.r][cur.c] = 0xaau;
      000375 C0 02            [24] 1112 	push	ar2
      000377 87 02            [24] 1113 	mov	ar2,@r1
      000379 09               [12] 1114 	inc	r1
      00037A 87 05            [24] 1115 	mov	ar5,@r1
      00037C 19               [12] 1116 	dec	r1
      00037D C0 06            [24] 1117 	push	ar6
      00037F C0 01            [24] 1118 	push	ar1
      000381 C0 00            [24] 1119 	push	ar0
      000383 C0 02            [24] 1120 	push	ar2
      000385 C0 05            [24] 1121 	push	ar5
      000387 90 00 C9         [24] 1122 	mov	dptr,#0x00c9
      00038A 12r00r00         [24] 1123 	lcall	__mulint
      00038D AA 82            [24] 1124 	mov	r2,dpl
      00038F AD 83            [24] 1125 	mov	r5,dph
      000391 15 81            [12] 1126 	dec	sp
      000393 15 81            [12] 1127 	dec	sp
      000395 D0 00            [24] 1128 	pop	ar0
      000397 D0 01            [24] 1129 	pop	ar1
      000399 EA               [12] 1130 	mov	a,r2
      00039A 24r00            [12] 1131 	add	a,#_g
      00039C FF               [12] 1132 	mov	r7,a
      00039D ED               [12] 1133 	mov	a,r5
      00039E 34s00            [12] 1134 	addc	a,#(_g >> 8)
      0003A0 FC               [12] 1135 	mov	r4,a
      0003A1 86 02            [24] 1136 	mov	ar2,@r0
      0003A3 08               [12] 1137 	inc	r0
      0003A4 86 05            [24] 1138 	mov	ar5,@r0
      0003A6 18               [12] 1139 	dec	r0
      0003A7 EA               [12] 1140 	mov	a,r2
      0003A8 2F               [12] 1141 	add	a,r7
      0003A9 F5 82            [12] 1142 	mov	dpl,a
      0003AB ED               [12] 1143 	mov	a,r5
      0003AC 3C               [12] 1144 	addc	a,r4
      0003AD F5 83            [12] 1145 	mov	dph,a
      0003AF 74 AA            [12] 1146 	mov	a,#0xaa
      0003B1 F0               [24] 1147 	movx	@dptr,a
                                   1148 ;	walk.c:169: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      0003B2 86 02            [24] 1149 	mov	ar2,@r0
      0003B4 08               [12] 1150 	inc	r0
      0003B5 86 05            [24] 1151 	mov	ar5,@r0
      0003B7 18               [12] 1152 	dec	r0
      0003B8 74 01            [12] 1153 	mov	a,#0x01
      0003BA 2A               [12] 1154 	add	a,r2
      0003BB FF               [12] 1155 	mov	r7,a
      0003BC E4               [12] 1156 	clr	a
      0003BD 3D               [12] 1157 	addc	a,r5
      0003BE FC               [12] 1158 	mov	r4,a
      0003BF 87 02            [24] 1159 	mov	ar2,@r1
      0003C1 09               [12] 1160 	inc	r1
      0003C2 87 05            [24] 1161 	mov	ar5,@r1
      0003C4 19               [12] 1162 	dec	r1
      0003C5 74 04            [12] 1163 	mov	a,#0x04
      0003C7 2A               [12] 1164 	add	a,r2
      0003C8 FA               [12] 1165 	mov	r2,a
      0003C9 E4               [12] 1166 	clr	a
      0003CA 3D               [12] 1167 	addc	a,r5
      0003CB FD               [12] 1168 	mov	r5,a
      0003CC C0 02            [24] 1169 	push	ar2
      0003CE C0 01            [24] 1170 	push	ar1
      0003D0 C0 00            [24] 1171 	push	ar0
      0003D2 C0 07            [24] 1172 	push	ar7
      0003D4 C0 04            [24] 1173 	push	ar4
      0003D6 C0 02            [24] 1174 	push	ar2
      0003D8 C0 05            [24] 1175 	push	ar5
      0003DA 74r0D            [12] 1176 	mov	a,#___str_1
      0003DC C0 E0            [24] 1177 	push	acc
      0003DE 74s00            [12] 1178 	mov	a,#(___str_1 >> 8)
      0003E0 C0 E0            [24] 1179 	push	acc
      0003E2 74 80            [12] 1180 	mov	a,#0x80
      0003E4 C0 E0            [24] 1181 	push	acc
      0003E6 12r00r00         [24] 1182 	lcall	_printf
      0003E9 E5 81            [12] 1183 	mov	a,sp
      0003EB 24 F9            [12] 1184 	add	a,#0xf9
      0003ED F5 81            [12] 1185 	mov	sp,a
                                   1186 ;	walk.c:170: setOE(OE76_MASK7);
      0003EF 75 82 80         [24] 1187 	mov	dpl,#0x80
      0003F2 12r00r30         [24] 1188 	lcall	_setOE
      0003F5 D0 00            [24] 1189 	pop	ar0
      0003F7 D0 01            [24] 1190 	pop	ar1
      0003F9 D0 02            [24] 1191 	pop	ar2
      0003FB D0 06            [24] 1192 	pop	ar6
                                   1193 ;	walk.c:198: return;
      0003FD D0 02            [24] 1194 	pop	ar2
                                   1195 ;	walk.c:172: next:
      0003FF                       1196 00102$:
                                   1197 ;	walk.c:173: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003FF C0 02            [24] 1198 	push	ar2
      000401 86 07            [24] 1199 	mov	ar7,@r0
      000403 08               [12] 1200 	inc	r0
      000404 86 04            [24] 1201 	mov	ar4,@r0
      000406 18               [12] 1202 	dec	r0
      000407 87 02            [24] 1203 	mov	ar2,@r1
      000409 09               [12] 1204 	inc	r1
      00040A 87 05            [24] 1205 	mov	ar5,@r1
      00040C 19               [12] 1206 	dec	r1
      00040D C0 06            [24] 1207 	push	ar6
      00040F C0 02            [24] 1208 	push	ar2
      000411 C0 01            [24] 1209 	push	ar1
      000413 C0 00            [24] 1210 	push	ar0
      000415 C0 07            [24] 1211 	push	ar7
      000417 C0 04            [24] 1212 	push	ar4
      000419 C0 02            [24] 1213 	push	ar2
      00041B C0 05            [24] 1214 	push	ar5
      00041D 90rBCr70         [24] 1215 	mov	dptr,#_sp
      000420 E0               [24] 1216 	movx	a,@dptr
      000421 C0 E0            [24] 1217 	push	acc
      000423 A3               [24] 1218 	inc	dptr
      000424 E0               [24] 1219 	movx	a,@dptr
      000425 C0 E0            [24] 1220 	push	acc
      000427 74r17            [12] 1221 	mov	a,#___str_2
      000429 C0 E0            [24] 1222 	push	acc
      00042B 74s00            [12] 1223 	mov	a,#(___str_2 >> 8)
      00042D C0 E0            [24] 1224 	push	acc
      00042F 74 80            [12] 1225 	mov	a,#0x80
      000431 C0 E0            [24] 1226 	push	acc
      000433 12r00r00         [24] 1227 	lcall	_printf
      000436 E5 81            [12] 1228 	mov	a,sp
      000438 24 F7            [12] 1229 	add	a,#0xf7
      00043A F5 81            [12] 1230 	mov	sp,a
                                   1231 ;	walk.c:174: unsetOE(OE76_MASK7 | OE76_MASK6);
      00043C 75 82 C0         [24] 1232 	mov	dpl,#0xc0
      00043F 12r00r49         [24] 1233 	lcall	_unsetOE
      000442 D0 00            [24] 1234 	pop	ar0
      000444 D0 01            [24] 1235 	pop	ar1
      000446 D0 02            [24] 1236 	pop	ar2
      000448 D0 06            [24] 1237 	pop	ar6
                                   1238 ;	walk.c:176: for (j = 0u, f = 0u; j < NMAX; j++) {
      00044A 7B 00            [12] 1239 	mov	r3,#0x00
      00044C C0 00            [24] 1240 	push	ar0
      00044E E5*00            [12] 1241 	mov	a,_bp
      000450 24 12            [12] 1242 	add	a,#0x12
      000452 F8               [12] 1243 	mov	r0,a
      000453 76 00            [12] 1244 	mov	@r0,#0x00
      000455 D0 00            [24] 1245 	pop	ar0
                                   1246 ;	walk.c:198: return;
      000457 D0 02            [24] 1247 	pop	ar2
                                   1248 ;	walk.c:176: for (j = 0u, f = 0u; j < NMAX; j++) {
      000459                       1249 00119$:
      000459 C0 00            [24] 1250 	push	ar0
      00045B E5*00            [12] 1251 	mov	a,_bp
      00045D 24 12            [12] 1252 	add	a,#0x12
      00045F F8               [12] 1253 	mov	r0,a
      000460 B6 10 00         [24] 1254 	cjne	@r0,#0x10,00159$
      000463                       1255 00159$:
      000463 D0 00            [24] 1256 	pop	ar0
      000465 50 7A            [24] 1257 	jnc	00106$
                                   1258 ;	walk.c:177: if (!update(&t, &cur, j)) continue;
      000467 C0 02            [24] 1259 	push	ar2
      000469 C0 00            [24] 1260 	push	ar0
      00046B E5*00            [12] 1261 	mov	a,_bp
      00046D 24 06            [12] 1262 	add	a,#0x06
      00046F F8               [12] 1263 	mov	r0,a
      000470 C0 01            [24] 1264 	push	ar1
      000472 E5*00            [12] 1265 	mov	a,_bp
      000474 24 07            [12] 1266 	add	a,#0x07
      000476 F9               [12] 1267 	mov	r1,a
      000477 E6               [12] 1268 	mov	a,@r0
      000478 F7               [12] 1269 	mov	@r1,a
      000479 09               [12] 1270 	inc	r1
      00047A 77 00            [12] 1271 	mov	@r1,#0x00
      00047C 09               [12] 1272 	inc	r1
      00047D 77 40            [12] 1273 	mov	@r1,#0x40
      00047F D0 01            [24] 1274 	pop	ar1
      000481 D0 00            [24] 1275 	pop	ar0
      000483 8E 04            [24] 1276 	mov	ar4,r6
      000485 7D 00            [12] 1277 	mov	r5,#0x00
      000487 7F 40            [12] 1278 	mov	r7,#0x40
      000489 C0 06            [24] 1279 	push	ar6
      00048B C0 03            [24] 1280 	push	ar3
      00048D C0 02            [24] 1281 	push	ar2
      00048F C0 01            [24] 1282 	push	ar1
      000491 C0 00            [24] 1283 	push	ar0
      000493 85 00 F0         [24] 1284 	mov	b,ar0
      000496 E5*00            [12] 1285 	mov	a,_bp
      000498 24 12            [12] 1286 	add	a,#0x12
      00049A F8               [12] 1287 	mov	r0,a
      00049B E6               [12] 1288 	mov	a,@r0
      00049C C0 E0            [24] 1289 	push	acc
      00049E A8 F0            [24] 1290 	mov	r0,b
      0004A0 85 00 F0         [24] 1291 	mov	b,ar0
      0004A3 E5*00            [12] 1292 	mov	a,_bp
      0004A5 24 07            [12] 1293 	add	a,#0x07
      0004A7 F8               [12] 1294 	mov	r0,a
      0004A8 E6               [12] 1295 	mov	a,@r0
      0004A9 C0 E0            [24] 1296 	push	acc
      0004AB 08               [12] 1297 	inc	r0
      0004AC E6               [12] 1298 	mov	a,@r0
      0004AD C0 E0            [24] 1299 	push	acc
      0004AF 08               [12] 1300 	inc	r0
      0004B0 E6               [12] 1301 	mov	a,@r0
      0004B1 C0 E0            [24] 1302 	push	acc
      0004B3 8C 82            [24] 1303 	mov	dpl,r4
      0004B5 8D 83            [24] 1304 	mov	dph,r5
      0004B7 8F F0            [24] 1305 	mov	b,r7
      0004B9 12r00r7C         [24] 1306 	lcall	_update
      0004BC AF 82            [24] 1307 	mov	r7,dpl
      0004BE E5 81            [12] 1308 	mov	a,sp
      0004C0 24 FC            [12] 1309 	add	a,#0xfc
      0004C2 F5 81            [12] 1310 	mov	sp,a
      0004C4 D0 00            [24] 1311 	pop	ar0
      0004C6 D0 01            [24] 1312 	pop	ar1
      0004C8 D0 02            [24] 1313 	pop	ar2
      0004CA D0 03            [24] 1314 	pop	ar3
      0004CC D0 06            [24] 1315 	pop	ar6
      0004CE D0 02            [24] 1316 	pop	ar2
      0004D0 EF               [12] 1317 	mov	a,r7
      0004D1 60 01            [24] 1318 	jz	00105$
                                   1319 ;	walk.c:178: f++;
      0004D3 0B               [12] 1320 	inc	r3
      0004D4                       1321 00105$:
                                   1322 ;	walk.c:176: for (j = 0u, f = 0u; j < NMAX; j++) {
      0004D4 C0 00            [24] 1323 	push	ar0
      0004D6 E5*00            [12] 1324 	mov	a,_bp
      0004D8 24 12            [12] 1325 	add	a,#0x12
      0004DA F8               [12] 1326 	mov	r0,a
      0004DB 06               [12] 1327 	inc	@r0
      0004DC D0 00            [24] 1328 	pop	ar0
      0004DE 02r04r59         [24] 1329 	ljmp	00119$
      0004E1                       1330 00106$:
                                   1331 ;	walk.c:181: if (f) {
      0004E1 EB               [12] 1332 	mov	a,r3
      0004E2 70 03            [24] 1333 	jnz	00162$
      0004E4 02r05rFB         [24] 1334 	ljmp	00115$
      0004E7                       1335 00162$:
                                   1336 ;	walk.c:182: while (1) {
      0004E7                       1337 00112$:
                                   1338 ;	walk.c:183: j = (uint8_t)(rand() % NMAX);
      0004E7 C0 02            [24] 1339 	push	ar2
      0004E9 C0 06            [24] 1340 	push	ar6
      0004EB C0 02            [24] 1341 	push	ar2
      0004ED C0 01            [24] 1342 	push	ar1
      0004EF C0 00            [24] 1343 	push	ar0
      0004F1 12r00r00         [24] 1344 	lcall	_rand
      0004F4 AD 82            [24] 1345 	mov	r5,dpl
      0004F6 D0 00            [24] 1346 	pop	ar0
      0004F8 D0 01            [24] 1347 	pop	ar1
      0004FA D0 02            [24] 1348 	pop	ar2
      0004FC D0 06            [24] 1349 	pop	ar6
      0004FE 53 05 0F         [24] 1350 	anl	ar5,#0x0f
      000501 8D 04            [24] 1351 	mov	ar4,r5
                                   1352 ;	walk.c:184: if (!update(&t, &cur, j)) continue;
      000503 C0 00            [24] 1353 	push	ar0
      000505 E5*00            [12] 1354 	mov	a,_bp
      000507 24 05            [12] 1355 	add	a,#0x05
      000509 F8               [12] 1356 	mov	r0,a
      00050A C0 01            [24] 1357 	push	ar1
      00050C E5*00            [12] 1358 	mov	a,_bp
      00050E 24 07            [12] 1359 	add	a,#0x07
      000510 F9               [12] 1360 	mov	r1,a
      000511 E6               [12] 1361 	mov	a,@r0
      000512 F7               [12] 1362 	mov	@r1,a
      000513 09               [12] 1363 	inc	r1
      000514 77 00            [12] 1364 	mov	@r1,#0x00
      000516 09               [12] 1365 	inc	r1
      000517 77 40            [12] 1366 	mov	@r1,#0x40
      000519 D0 01            [24] 1367 	pop	ar1
      00051B E5*00            [12] 1368 	mov	a,_bp
      00051D 24 04            [12] 1369 	add	a,#0x04
      00051F F8               [12] 1370 	mov	r0,a
      000520 86 02            [24] 1371 	mov	ar2,@r0
      000522 7D 00            [12] 1372 	mov	r5,#0x00
      000524 7F 40            [12] 1373 	mov	r7,#0x40
      000526 D0 00            [24] 1374 	pop	ar0
      000528 C0 06            [24] 1375 	push	ar6
      00052A C0 02            [24] 1376 	push	ar2
      00052C C0 01            [24] 1377 	push	ar1
      00052E C0 00            [24] 1378 	push	ar0
      000530 C0 04            [24] 1379 	push	ar4
      000532 85 00 F0         [24] 1380 	mov	b,ar0
      000535 E5*00            [12] 1381 	mov	a,_bp
      000537 24 07            [12] 1382 	add	a,#0x07
      000539 F8               [12] 1383 	mov	r0,a
      00053A E6               [12] 1384 	mov	a,@r0
      00053B C0 E0            [24] 1385 	push	acc
      00053D 08               [12] 1386 	inc	r0
      00053E E6               [12] 1387 	mov	a,@r0
      00053F C0 E0            [24] 1388 	push	acc
      000541 08               [12] 1389 	inc	r0
      000542 E6               [12] 1390 	mov	a,@r0
      000543 C0 E0            [24] 1391 	push	acc
      000545 8A 82            [24] 1392 	mov	dpl,r2
      000547 8D 83            [24] 1393 	mov	dph,r5
      000549 8F F0            [24] 1394 	mov	b,r7
      00054B 12r00r7C         [24] 1395 	lcall	_update
      00054E AF 82            [24] 1396 	mov	r7,dpl
      000550 E5 81            [12] 1397 	mov	a,sp
      000552 24 FC            [12] 1398 	add	a,#0xfc
      000554 F5 81            [12] 1399 	mov	sp,a
      000556 D0 00            [24] 1400 	pop	ar0
      000558 D0 01            [24] 1401 	pop	ar1
      00055A D0 02            [24] 1402 	pop	ar2
      00055C D0 06            [24] 1403 	pop	ar6
      00055E D0 02            [24] 1404 	pop	ar2
      000560 EF               [12] 1405 	mov	a,r7
      000561 60 84            [24] 1406 	jz	00112$
                                   1407 ;	walk.c:185: if (!stpush(&cur)) bang();
      000563 8A 04            [24] 1408 	mov	ar4,r2
      000565 7D 00            [12] 1409 	mov	r5,#0x00
      000567 7F 40            [12] 1410 	mov	r7,#0x40
      000569 8C 82            [24] 1411 	mov	dpl,r4
      00056B 8D 83            [24] 1412 	mov	dph,r5
      00056D 8F F0            [24] 1413 	mov	b,r7
      00056F C0 06            [24] 1414 	push	ar6
      000571 C0 02            [24] 1415 	push	ar2
      000573 C0 01            [24] 1416 	push	ar1
      000575 C0 00            [24] 1417 	push	ar0
      000577 12r0Ar65         [24] 1418 	lcall	_stpush
      00057A E5 82            [12] 1419 	mov	a,dpl
      00057C D0 00            [24] 1420 	pop	ar0
      00057E D0 01            [24] 1421 	pop	ar1
      000580 D0 02            [24] 1422 	pop	ar2
      000582 D0 06            [24] 1423 	pop	ar6
      000584 70 13            [24] 1424 	jnz	00110$
      000586 C0 06            [24] 1425 	push	ar6
      000588 C0 02            [24] 1426 	push	ar2
      00058A C0 01            [24] 1427 	push	ar1
      00058C C0 00            [24] 1428 	push	ar0
      00058E 12r00r23         [24] 1429 	lcall	_bang
      000591 D0 00            [24] 1430 	pop	ar0
      000593 D0 01            [24] 1431 	pop	ar1
      000595 D0 02            [24] 1432 	pop	ar2
      000597 D0 06            [24] 1433 	pop	ar6
      000599                       1434 00110$:
                                   1435 ;	walk.c:186: cur = t;
      000599 C0 02            [24] 1436 	push	ar2
      00059B C0 00            [24] 1437 	push	ar0
      00059D A8*00            [24] 1438 	mov	r0,_bp
      00059F 08               [12] 1439 	inc	r0
      0005A0 C0 01            [24] 1440 	push	ar1
      0005A2 E5*00            [12] 1441 	mov	a,_bp
      0005A4 24 07            [12] 1442 	add	a,#0x07
      0005A6 F9               [12] 1443 	mov	r1,a
      0005A7 E6               [12] 1444 	mov	a,@r0
      0005A8 F7               [12] 1445 	mov	@r1,a
      0005A9 09               [12] 1446 	inc	r1
      0005AA 77 00            [12] 1447 	mov	@r1,#0x00
      0005AC 09               [12] 1448 	inc	r1
      0005AD 77 40            [12] 1449 	mov	@r1,#0x40
      0005AF D0 01            [24] 1450 	pop	ar1
      0005B1 A8*00            [24] 1451 	mov	r0,_bp
      0005B3 08               [12] 1452 	inc	r0
      0005B4 08               [12] 1453 	inc	r0
      0005B5 86 02            [24] 1454 	mov	ar2,@r0
      0005B7 7B 00            [12] 1455 	mov	r3,#0x00
      0005B9 7F 40            [12] 1456 	mov	r7,#0x40
      0005BB D0 00            [24] 1457 	pop	ar0
      0005BD C0 06            [24] 1458 	push	ar6
      0005BF C0 02            [24] 1459 	push	ar2
      0005C1 C0 01            [24] 1460 	push	ar1
      0005C3 C0 00            [24] 1461 	push	ar0
      0005C5 74 04            [12] 1462 	mov	a,#0x04
      0005C7 C0 E0            [24] 1463 	push	acc
      0005C9 E4               [12] 1464 	clr	a
      0005CA C0 E0            [24] 1465 	push	acc
      0005CC 85 00 F0         [24] 1466 	mov	b,ar0
      0005CF E5*00            [12] 1467 	mov	a,_bp
      0005D1 24 07            [12] 1468 	add	a,#0x07
      0005D3 F8               [12] 1469 	mov	r0,a
      0005D4 E6               [12] 1470 	mov	a,@r0
      0005D5 C0 E0            [24] 1471 	push	acc
      0005D7 08               [12] 1472 	inc	r0
      0005D8 E6               [12] 1473 	mov	a,@r0
      0005D9 C0 E0            [24] 1474 	push	acc
      0005DB 08               [12] 1475 	inc	r0
      0005DC E6               [12] 1476 	mov	a,@r0
      0005DD C0 E0            [24] 1477 	push	acc
      0005DF 8A 82            [24] 1478 	mov	dpl,r2
      0005E1 8B 83            [24] 1479 	mov	dph,r3
      0005E3 8F F0            [24] 1480 	mov	b,r7
      0005E5 12r00r00         [24] 1481 	lcall	___memcpy
      0005E8 E5 81            [12] 1482 	mov	a,sp
      0005EA 24 FB            [12] 1483 	add	a,#0xfb
      0005EC F5 81            [12] 1484 	mov	sp,a
      0005EE D0 00            [24] 1485 	pop	ar0
      0005F0 D0 01            [24] 1486 	pop	ar1
      0005F2 D0 02            [24] 1487 	pop	ar2
      0005F4 D0 06            [24] 1488 	pop	ar6
                                   1489 ;	walk.c:187: goto process;
      0005F6 D0 02            [24] 1490 	pop	ar2
      0005F8 02r03r75         [24] 1491 	ljmp	00101$
      0005FB                       1492 00115$:
                                   1493 ;	walk.c:191: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005FB 86 05            [24] 1494 	mov	ar5,@r0
      0005FD 08               [12] 1495 	inc	r0
      0005FE 86 07            [24] 1496 	mov	ar7,@r0
      000600 18               [12] 1497 	dec	r0
      000601 0D               [12] 1498 	inc	r5
      000602 BD 00 01         [24] 1499 	cjne	r5,#0x00,00165$
      000605 0F               [12] 1500 	inc	r7
      000606                       1501 00165$:
      000606 87 03            [24] 1502 	mov	ar3,@r1
      000608 09               [12] 1503 	inc	r1
      000609 87 04            [24] 1504 	mov	ar4,@r1
      00060B 19               [12] 1505 	dec	r1
      00060C 74 04            [12] 1506 	mov	a,#0x04
      00060E 2B               [12] 1507 	add	a,r3
      00060F FB               [12] 1508 	mov	r3,a
      000610 E4               [12] 1509 	clr	a
      000611 3C               [12] 1510 	addc	a,r4
      000612 FC               [12] 1511 	mov	r4,a
      000613 C0 06            [24] 1512 	push	ar6
      000615 C0 02            [24] 1513 	push	ar2
      000617 C0 01            [24] 1514 	push	ar1
      000619 C0 00            [24] 1515 	push	ar0
      00061B C0 05            [24] 1516 	push	ar5
      00061D C0 07            [24] 1517 	push	ar7
      00061F C0 03            [24] 1518 	push	ar3
      000621 C0 04            [24] 1519 	push	ar4
      000623 74r2A            [12] 1520 	mov	a,#___str_3
      000625 C0 E0            [24] 1521 	push	acc
      000627 74s00            [12] 1522 	mov	a,#(___str_3 >> 8)
      000629 C0 E0            [24] 1523 	push	acc
      00062B 74 80            [12] 1524 	mov	a,#0x80
      00062D C0 E0            [24] 1525 	push	acc
      00062F 12r00r00         [24] 1526 	lcall	_printf
      000632 E5 81            [12] 1527 	mov	a,sp
      000634 24 F9            [12] 1528 	add	a,#0xf9
      000636 F5 81            [12] 1529 	mov	sp,a
                                   1530 ;	walk.c:192: setOE(OE76_MASK6);
      000638 75 82 40         [24] 1531 	mov	dpl,#0x40
      00063B 12r00r30         [24] 1532 	lcall	_setOE
      00063E D0 00            [24] 1533 	pop	ar0
      000640 D0 01            [24] 1534 	pop	ar1
      000642 D0 02            [24] 1535 	pop	ar2
      000644 D0 06            [24] 1536 	pop	ar6
                                   1537 ;	walk.c:194: if (stpop(&cur)) goto next;
      000646 C0 00            [24] 1538 	push	ar0
      000648 E5*00            [12] 1539 	mov	a,_bp
      00064A 24 03            [12] 1540 	add	a,#0x03
      00064C F8               [12] 1541 	mov	r0,a
      00064D 86 04            [24] 1542 	mov	ar4,@r0
      00064F 7D 00            [12] 1543 	mov	r5,#0x00
      000651 7F 40            [12] 1544 	mov	r7,#0x40
      000653 D0 00            [24] 1545 	pop	ar0
      000655 8C 82            [24] 1546 	mov	dpl,r4
      000657 8D 83            [24] 1547 	mov	dph,r5
      000659 8F F0            [24] 1548 	mov	b,r7
      00065B C0 06            [24] 1549 	push	ar6
      00065D C0 02            [24] 1550 	push	ar2
      00065F C0 01            [24] 1551 	push	ar1
      000661 C0 00            [24] 1552 	push	ar0
      000663 12r0ArC6         [24] 1553 	lcall	_stpop
      000666 E5 82            [12] 1554 	mov	a,dpl
      000668 D0 00            [24] 1555 	pop	ar0
      00066A D0 01            [24] 1556 	pop	ar1
      00066C D0 02            [24] 1557 	pop	ar2
      00066E D0 06            [24] 1558 	pop	ar6
      000670 60 03            [24] 1559 	jz	00166$
      000672 02r03rFF         [24] 1560 	ljmp	00102$
      000675                       1561 00166$:
                                   1562 ;	walk.c:196: unsetOE(OE76_MASK7 | OE76_MASK6);
      000675 75 82 C0         [24] 1563 	mov	dpl,#0xc0
      000678 12r00r49         [24] 1564 	lcall	_unsetOE
                                   1565 ;	walk.c:198: return;
                                   1566 ;	walk.c:199: }
      00067B 85*00 81         [24] 1567 	mov	sp,_bp
      00067E D0*00            [24] 1568 	pop	_bp
      000680 22               [24] 1569 	ret
                                   1570 ;------------------------------------------------------------
                                   1571 ;Allocation info for local variables in function 'main'
                                   1572 ;------------------------------------------------------------
                                   1573 ;initial                   Allocated to stack - _bp +7
                                   1574 ;N                         Allocated to stack - _bp +11
                                   1575 ;i                         Allocated to stack - _bp +5
                                   1576 ;j                         Allocated to registers r2 r6 
                                   1577 ;sloc0                     Allocated to stack - _bp +1
                                   1578 ;sloc1                     Allocated to stack - _bp +3
                                   1579 ;sloc2                     Allocated to stack - _bp +15
                                   1580 ;------------------------------------------------------------
                                   1581 ;	walk.c:201: void main(void) {
                                   1582 ;	-----------------------------------------
                                   1583 ;	 function main
                                   1584 ;	-----------------------------------------
      000681                       1585 _main:
      000681 C0*00            [24] 1586 	push	_bp
      000683 E5 81            [12] 1587 	mov	a,sp
      000685 F5*00            [12] 1588 	mov	_bp,a
      000687 24 0C            [12] 1589 	add	a,#0x0c
      000689 F5 81            [12] 1590 	mov	sp,a
                                   1591 ;	walk.c:206: i0 = 1u;
      00068B 78r00            [12] 1592 	mov	r0,#_i0
      00068D 76 01            [12] 1593 	mov	@r0,#0x01
                                   1594 ;	walk.c:208: P1_7 = 1;
                                   1595 ;	assignBit
      00068F D2 97            [12] 1596 	setb	_P1_7
                                   1597 ;	walk.c:209: IT0 = 1;
                                   1598 ;	assignBit
      000691 D2 88            [12] 1599 	setb	_IT0
                                   1600 ;	walk.c:210: EX0 = 1;
                                   1601 ;	assignBit
      000693 D2 A8            [12] 1602 	setb	_EX0
                                   1603 ;	walk.c:211: EA = 1;
                                   1604 ;	assignBit
      000695 D2 AF            [12] 1605 	setb	_EA
                                   1606 ;	walk.c:213: srand(RND);
      000697 90 80 00         [24] 1607 	mov	dptr,#_RND
      00069A E0               [24] 1608 	movx	a,@dptr
      00069B FE               [12] 1609 	mov	r6,a
      00069C A3               [24] 1610 	inc	dptr
      00069D E0               [24] 1611 	movx	a,@dptr
      00069E FF               [12] 1612 	mov	r7,a
      00069F 8E 82            [24] 1613 	mov	dpl,r6
      0006A1 8F 83            [24] 1614 	mov	dph,r7
      0006A3 12r00r00         [24] 1615 	lcall	_srand
                                   1616 ;	walk.c:214: stinit();
      0006A6 12r0Ar5C         [24] 1617 	lcall	_stinit
                                   1618 ;	walk.c:216: puts("\033[2J\033[?25l");
      0006A9 90r00r34         [24] 1619 	mov	dptr,#___str_4
      0006AC 75 F0 80         [24] 1620 	mov	b,#0x80
      0006AF 12r00r00         [24] 1621 	lcall	_puts
                                   1622 ;	walk.c:218: while (i0) {
      0006B2 E5*00            [12] 1623 	mov	a,_bp
      0006B4 24 07            [12] 1624 	add	a,#0x07
      0006B6 F9               [12] 1625 	mov	r1,a
      0006B7 FF               [12] 1626 	mov	r7,a
      0006B8 E5*00            [12] 1627 	mov	a,_bp
      0006BA 24 0B            [12] 1628 	add	a,#0x0b
      0006BC F8               [12] 1629 	mov	r0,a
      0006BD E4               [12] 1630 	clr	a
      0006BE F6               [12] 1631 	mov	@r0,a
      0006BF 08               [12] 1632 	inc	r0
      0006C0 F6               [12] 1633 	mov	@r0,a
      0006C1                       1634 00108$:
      0006C1 78r00            [12] 1635 	mov	r0,#_i0
      0006C3 E6               [12] 1636 	mov	a,@r0
      0006C4 70 03            [24] 1637 	jnz	00182$
      0006C6 02r0Ar48         [24] 1638 	ljmp	00110$
      0006C9                       1639 00182$:
                                   1640 ;	walk.c:219: for (i = 0; i < ROWS; i++)
      0006C9 7B 00            [12] 1641 	mov	r3,#0x00
      0006CB 7C 00            [12] 1642 	mov	r4,#0x00
      0006CD A8*00            [24] 1643 	mov	r0,_bp
      0006CF 08               [12] 1644 	inc	r0
      0006D0 E4               [12] 1645 	clr	a
      0006D1 F6               [12] 1646 	mov	@r0,a
      0006D2 08               [12] 1647 	inc	r0
      0006D3 F6               [12] 1648 	mov	@r0,a
                                   1649 ;	walk.c:220: for (j = 0; j < COLS; j++)
      0006D4                       1650 00125$:
      0006D4 A8*00            [24] 1651 	mov	r0,_bp
      0006D6 08               [12] 1652 	inc	r0
      0006D7 C0 01            [24] 1653 	push	ar1
      0006D9 E5*00            [12] 1654 	mov	a,_bp
      0006DB 24 03            [12] 1655 	add	a,#0x03
      0006DD F9               [12] 1656 	mov	r1,a
      0006DE E6               [12] 1657 	mov	a,@r0
      0006DF 24r00            [12] 1658 	add	a,#_g
      0006E1 F7               [12] 1659 	mov	@r1,a
      0006E2 08               [12] 1660 	inc	r0
      0006E3 E6               [12] 1661 	mov	a,@r0
      0006E4 34s00            [12] 1662 	addc	a,#(_g >> 8)
      0006E6 09               [12] 1663 	inc	r1
      0006E7 F7               [12] 1664 	mov	@r1,a
      0006E8 D0 01            [24] 1665 	pop	ar1
      0006EA 7A 00            [12] 1666 	mov	r2,#0x00
      0006EC 7E 00            [12] 1667 	mov	r6,#0x00
      0006EE                       1668 00112$:
                                   1669 ;	walk.c:221: g[i][j] = 0x55u;
      0006EE E5*00            [12] 1670 	mov	a,_bp
      0006F0 24 03            [12] 1671 	add	a,#0x03
      0006F2 F8               [12] 1672 	mov	r0,a
      0006F3 EA               [12] 1673 	mov	a,r2
      0006F4 26               [12] 1674 	add	a,@r0
      0006F5 F5 82            [12] 1675 	mov	dpl,a
      0006F7 EE               [12] 1676 	mov	a,r6
      0006F8 08               [12] 1677 	inc	r0
      0006F9 36               [12] 1678 	addc	a,@r0
      0006FA F5 83            [12] 1679 	mov	dph,a
      0006FC 74 55            [12] 1680 	mov	a,#0x55
      0006FE F0               [24] 1681 	movx	@dptr,a
                                   1682 ;	walk.c:220: for (j = 0; j < COLS; j++)
      0006FF 0A               [12] 1683 	inc	r2
      000700 BA 00 01         [24] 1684 	cjne	r2,#0x00,00183$
      000703 0E               [12] 1685 	inc	r6
      000704                       1686 00183$:
      000704 C3               [12] 1687 	clr	c
      000705 EA               [12] 1688 	mov	a,r2
      000706 94 C9            [12] 1689 	subb	a,#0xc9
      000708 EE               [12] 1690 	mov	a,r6
      000709 64 80            [12] 1691 	xrl	a,#0x80
      00070B 94 80            [12] 1692 	subb	a,#0x80
      00070D 40 DF            [24] 1693 	jc	00112$
                                   1694 ;	walk.c:219: for (i = 0; i < ROWS; i++)
      00070F A8*00            [24] 1695 	mov	r0,_bp
      000711 08               [12] 1696 	inc	r0
      000712 74 C9            [12] 1697 	mov	a,#0xc9
      000714 26               [12] 1698 	add	a,@r0
      000715 F6               [12] 1699 	mov	@r0,a
      000716 E4               [12] 1700 	clr	a
      000717 08               [12] 1701 	inc	r0
      000718 36               [12] 1702 	addc	a,@r0
      000719 F6               [12] 1703 	mov	@r0,a
      00071A 0B               [12] 1704 	inc	r3
      00071B BB 00 01         [24] 1705 	cjne	r3,#0x00,00185$
      00071E 0C               [12] 1706 	inc	r4
      00071F                       1707 00185$:
      00071F C3               [12] 1708 	clr	c
      000720 EB               [12] 1709 	mov	a,r3
      000721 94 30            [12] 1710 	subb	a,#0x30
      000723 EC               [12] 1711 	mov	a,r4
      000724 64 80            [12] 1712 	xrl	a,#0x80
      000726 94 80            [12] 1713 	subb	a,#0x80
      000728 40 AA            [24] 1714 	jc	00125$
                                   1715 ;	walk.c:223: initial.r = rand() % ROWS;
      00072A E5*00            [12] 1716 	mov	a,_bp
      00072C 24 07            [12] 1717 	add	a,#0x07
      00072E F8               [12] 1718 	mov	r0,a
      00072F C0 07            [24] 1719 	push	ar7
      000731 C0 01            [24] 1720 	push	ar1
      000733 C0 00            [24] 1721 	push	ar0
      000735 12r00r00         [24] 1722 	lcall	_rand
      000738 AD 82            [24] 1723 	mov	r5,dpl
      00073A AE 83            [24] 1724 	mov	r6,dph
      00073C 74 30            [12] 1725 	mov	a,#0x30
      00073E C0 E0            [24] 1726 	push	acc
      000740 E4               [12] 1727 	clr	a
      000741 C0 E0            [24] 1728 	push	acc
      000743 8D 82            [24] 1729 	mov	dpl,r5
      000745 8E 83            [24] 1730 	mov	dph,r6
      000747 12r00r00         [24] 1731 	lcall	__modsint
      00074A AD 82            [24] 1732 	mov	r5,dpl
      00074C AE 83            [24] 1733 	mov	r6,dph
      00074E 15 81            [12] 1734 	dec	sp
      000750 15 81            [12] 1735 	dec	sp
      000752 D0 00            [24] 1736 	pop	ar0
      000754 D0 01            [24] 1737 	pop	ar1
      000756 A6 05            [24] 1738 	mov	@r0,ar5
      000758 08               [12] 1739 	inc	r0
      000759 A6 06            [24] 1740 	mov	@r0,ar6
      00075B 18               [12] 1741 	dec	r0
                                   1742 ;	walk.c:224: initial.c = rand() % COLS;
      00075C 74 02            [12] 1743 	mov	a,#0x02
      00075E 29               [12] 1744 	add	a,r1
      00075F F8               [12] 1745 	mov	r0,a
      000760 C0 01            [24] 1746 	push	ar1
      000762 C0 00            [24] 1747 	push	ar0
      000764 12r00r00         [24] 1748 	lcall	_rand
      000767 AD 82            [24] 1749 	mov	r5,dpl
      000769 AE 83            [24] 1750 	mov	r6,dph
      00076B 74 C9            [12] 1751 	mov	a,#0xc9
      00076D C0 E0            [24] 1752 	push	acc
      00076F E4               [12] 1753 	clr	a
      000770 C0 E0            [24] 1754 	push	acc
      000772 8D 82            [24] 1755 	mov	dpl,r5
      000774 8E 83            [24] 1756 	mov	dph,r6
      000776 12r00r00         [24] 1757 	lcall	__modsint
      000779 AD 82            [24] 1758 	mov	r5,dpl
      00077B AE 83            [24] 1759 	mov	r6,dph
      00077D 15 81            [12] 1760 	dec	sp
      00077F 15 81            [12] 1761 	dec	sp
      000781 D0 00            [24] 1762 	pop	ar0
      000783 A6 05            [24] 1763 	mov	@r0,ar5
      000785 08               [12] 1764 	inc	r0
      000786 A6 06            [24] 1765 	mov	@r0,ar6
      000788 18               [12] 1766 	dec	r0
                                   1767 ;	walk.c:226: puts("\033[2J\033[?25l");
      000789 90r00r34         [24] 1768 	mov	dptr,#___str_4
      00078C 75 F0 80         [24] 1769 	mov	b,#0x80
      00078F C0 00            [24] 1770 	push	ar0
      000791 12r00r00         [24] 1771 	lcall	_puts
      000794 D0 00            [24] 1772 	pop	ar0
      000796 D0 01            [24] 1773 	pop	ar1
                                   1774 ;	walk.c:227: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      000798 86 05            [24] 1775 	mov	ar5,@r0
      00079A 08               [12] 1776 	inc	r0
      00079B 86 06            [24] 1777 	mov	ar6,@r0
      00079D 18               [12] 1778 	dec	r0
      00079E 87 03            [24] 1779 	mov	ar3,@r1
      0007A0 09               [12] 1780 	inc	r1
      0007A1 87 04            [24] 1781 	mov	ar4,@r1
      0007A3 19               [12] 1782 	dec	r1
      0007A4 C0 01            [24] 1783 	push	ar1
      0007A6 C0 05            [24] 1784 	push	ar5
      0007A8 C0 06            [24] 1785 	push	ar6
      0007AA C0 03            [24] 1786 	push	ar3
      0007AC C0 04            [24] 1787 	push	ar4
      0007AE E5*00            [12] 1788 	mov	a,_bp
      0007B0 24 0B            [12] 1789 	add	a,#0x0b
      0007B2 F8               [12] 1790 	mov	r0,a
      0007B3 E6               [12] 1791 	mov	a,@r0
      0007B4 C0 E0            [24] 1792 	push	acc
      0007B6 08               [12] 1793 	inc	r0
      0007B7 E6               [12] 1794 	mov	a,@r0
      0007B8 C0 E0            [24] 1795 	push	acc
      0007BA 74r3F            [12] 1796 	mov	a,#___str_5
      0007BC C0 E0            [24] 1797 	push	acc
      0007BE 74s00            [12] 1798 	mov	a,#(___str_5 >> 8)
      0007C0 C0 E0            [24] 1799 	push	acc
      0007C2 74 80            [12] 1800 	mov	a,#0x80
      0007C4 C0 E0            [24] 1801 	push	acc
      0007C6 12r00r00         [24] 1802 	lcall	_printf
      0007C9 E5 81            [12] 1803 	mov	a,sp
      0007CB 24 F7            [12] 1804 	add	a,#0xf7
      0007CD F5 81            [12] 1805 	mov	sp,a
      0007CF D0 01            [24] 1806 	pop	ar1
      0007D1 D0 07            [24] 1807 	pop	ar7
                                   1808 ;	walk.c:229: for (i = 0; i < REG; i++) {
      0007D3 E5*00            [12] 1809 	mov	a,_bp
      0007D5 24 05            [12] 1810 	add	a,#0x05
      0007D7 F8               [12] 1811 	mov	r0,a
      0007D8 E4               [12] 1812 	clr	a
      0007D9 F6               [12] 1813 	mov	@r0,a
      0007DA 08               [12] 1814 	inc	r0
      0007DB F6               [12] 1815 	mov	@r0,a
      0007DC                       1816 00116$:
                                   1817 ;	walk.c:230: neigh[i].r = neigh[REG + i].r * (1 + rand() % 8);
      0007DC C0 07            [24] 1818 	push	ar7
      0007DE E5*00            [12] 1819 	mov	a,_bp
      0007E0 24 05            [12] 1820 	add	a,#0x05
      0007E2 F8               [12] 1821 	mov	r0,a
      0007E3 E6               [12] 1822 	mov	a,@r0
      0007E4 25 E0            [12] 1823 	add	a,acc
      0007E6 FB               [12] 1824 	mov	r3,a
      0007E7 08               [12] 1825 	inc	r0
      0007E8 E6               [12] 1826 	mov	a,@r0
      0007E9 33               [12] 1827 	rlc	a
      0007EA FC               [12] 1828 	mov	r4,a
      0007EB EB               [12] 1829 	mov	a,r3
      0007EC 2B               [12] 1830 	add	a,r3
      0007ED FB               [12] 1831 	mov	r3,a
      0007EE EC               [12] 1832 	mov	a,r4
      0007EF 33               [12] 1833 	rlc	a
      0007F0 FC               [12] 1834 	mov	r4,a
      0007F1 E5*00            [12] 1835 	mov	a,_bp
      0007F3 24 03            [12] 1836 	add	a,#0x03
      0007F5 F8               [12] 1837 	mov	r0,a
      0007F6 EB               [12] 1838 	mov	a,r3
      0007F7 24r00            [12] 1839 	add	a,#_neigh
      0007F9 F6               [12] 1840 	mov	@r0,a
      0007FA EC               [12] 1841 	mov	a,r4
      0007FB 34s00            [12] 1842 	addc	a,#(_neigh >> 8)
      0007FD 08               [12] 1843 	inc	r0
      0007FE F6               [12] 1844 	mov	@r0,a
      0007FF E5*00            [12] 1845 	mov	a,_bp
      000801 24 05            [12] 1846 	add	a,#0x05
      000803 F8               [12] 1847 	mov	r0,a
      000804 86 06            [24] 1848 	mov	ar6,@r0
      000806 74 08            [12] 1849 	mov	a,#0x08
      000808 2E               [12] 1850 	add	a,r6
      000809 FE               [12] 1851 	mov	r6,a
      00080A C2 D5            [12] 1852 	clr	F0
      00080C 75 F0 04         [24] 1853 	mov	b,#0x04
      00080F EE               [12] 1854 	mov	a,r6
      000810 30 E7 04         [24] 1855 	jnb	acc.7,00187$
      000813 B2 D5            [12] 1856 	cpl	F0
      000815 F4               [12] 1857 	cpl	a
      000816 04               [12] 1858 	inc	a
      000817                       1859 00187$:
      000817 A4               [48] 1860 	mul	ab
      000818 30 D5 0A         [24] 1861 	jnb	F0,00188$
      00081B F4               [12] 1862 	cpl	a
      00081C 24 01            [12] 1863 	add	a,#0x01
      00081E C5 F0            [12] 1864 	xch	a,b
      000820 F4               [12] 1865 	cpl	a
      000821 34 00            [12] 1866 	addc	a,#0x00
      000823 C5 F0            [12] 1867 	xch	a,b
      000825                       1868 00188$:
      000825 FE               [12] 1869 	mov	r6,a
      000826 AD F0            [24] 1870 	mov	r5,b
      000828 24r00            [12] 1871 	add	a,#_neigh
      00082A F5 82            [12] 1872 	mov	dpl,a
      00082C ED               [12] 1873 	mov	a,r5
      00082D 34s00            [12] 1874 	addc	a,#(_neigh >> 8)
      00082F F5 83            [12] 1875 	mov	dph,a
      000831 A8*00            [24] 1876 	mov	r0,_bp
      000833 08               [12] 1877 	inc	r0
      000834 E0               [24] 1878 	movx	a,@dptr
      000835 F6               [12] 1879 	mov	@r0,a
      000836 A3               [24] 1880 	inc	dptr
      000837 E0               [24] 1881 	movx	a,@dptr
      000838 08               [12] 1882 	inc	r0
      000839 F6               [12] 1883 	mov	@r0,a
      00083A C0 06            [24] 1884 	push	ar6
      00083C C0 05            [24] 1885 	push	ar5
      00083E C0 04            [24] 1886 	push	ar4
      000840 C0 03            [24] 1887 	push	ar3
      000842 C0 01            [24] 1888 	push	ar1
      000844 12r00r00         [24] 1889 	lcall	_rand
      000847 AA 82            [24] 1890 	mov	r2,dpl
      000849 AF 83            [24] 1891 	mov	r7,dph
      00084B 74 08            [12] 1892 	mov	a,#0x08
      00084D C0 E0            [24] 1893 	push	acc
      00084F E4               [12] 1894 	clr	a
      000850 C0 E0            [24] 1895 	push	acc
      000852 8A 82            [24] 1896 	mov	dpl,r2
      000854 8F 83            [24] 1897 	mov	dph,r7
      000856 12r00r00         [24] 1898 	lcall	__modsint
      000859 AA 82            [24] 1899 	mov	r2,dpl
      00085B AF 83            [24] 1900 	mov	r7,dph
      00085D 15 81            [12] 1901 	dec	sp
      00085F 15 81            [12] 1902 	dec	sp
      000861 D0 01            [24] 1903 	pop	ar1
      000863 D0 03            [24] 1904 	pop	ar3
      000865 D0 04            [24] 1905 	pop	ar4
      000867 D0 05            [24] 1906 	pop	ar5
      000869 D0 06            [24] 1907 	pop	ar6
      00086B 0A               [12] 1908 	inc	r2
      00086C BA 00 01         [24] 1909 	cjne	r2,#0x00,00189$
      00086F 0F               [12] 1910 	inc	r7
      000870                       1911 00189$:
      000870 C0 06            [24] 1912 	push	ar6
      000872 C0 05            [24] 1913 	push	ar5
      000874 C0 04            [24] 1914 	push	ar4
      000876 C0 03            [24] 1915 	push	ar3
      000878 C0 01            [24] 1916 	push	ar1
      00087A C0 02            [24] 1917 	push	ar2
      00087C C0 07            [24] 1918 	push	ar7
      00087E A8*00            [24] 1919 	mov	r0,_bp
      000880 08               [12] 1920 	inc	r0
      000881 86 82            [24] 1921 	mov	dpl,@r0
      000883 08               [12] 1922 	inc	r0
      000884 86 83            [24] 1923 	mov	dph,@r0
      000886 12r00r00         [24] 1924 	lcall	__mulint
      000889 AA 82            [24] 1925 	mov	r2,dpl
      00088B AF 83            [24] 1926 	mov	r7,dph
      00088D 15 81            [12] 1927 	dec	sp
      00088F 15 81            [12] 1928 	dec	sp
      000891 D0 01            [24] 1929 	pop	ar1
      000893 D0 03            [24] 1930 	pop	ar3
      000895 D0 04            [24] 1931 	pop	ar4
      000897 D0 05            [24] 1932 	pop	ar5
      000899 D0 06            [24] 1933 	pop	ar6
      00089B E5*00            [12] 1934 	mov	a,_bp
      00089D 24 03            [12] 1935 	add	a,#0x03
      00089F F8               [12] 1936 	mov	r0,a
      0008A0 86 82            [24] 1937 	mov	dpl,@r0
      0008A2 08               [12] 1938 	inc	r0
      0008A3 86 83            [24] 1939 	mov	dph,@r0
      0008A5 EA               [12] 1940 	mov	a,r2
      0008A6 F0               [24] 1941 	movx	@dptr,a
      0008A7 EF               [12] 1942 	mov	a,r7
      0008A8 A3               [24] 1943 	inc	dptr
      0008A9 F0               [24] 1944 	movx	@dptr,a
                                   1945 ;	walk.c:231: neigh[i].c = neigh[REG + i].c * (1 + rand() % 8);
      0008AA EB               [12] 1946 	mov	a,r3
      0008AB 24r00            [12] 1947 	add	a,#_neigh
      0008AD FB               [12] 1948 	mov	r3,a
      0008AE EC               [12] 1949 	mov	a,r4
      0008AF 34s00            [12] 1950 	addc	a,#(_neigh >> 8)
      0008B1 FC               [12] 1951 	mov	r4,a
      0008B2 74 02            [12] 1952 	mov	a,#0x02
      0008B4 2B               [12] 1953 	add	a,r3
      0008B5 FA               [12] 1954 	mov	r2,a
      0008B6 E4               [12] 1955 	clr	a
      0008B7 3C               [12] 1956 	addc	a,r4
      0008B8 FF               [12] 1957 	mov	r7,a
      0008B9 EE               [12] 1958 	mov	a,r6
      0008BA 24r00            [12] 1959 	add	a,#_neigh
      0008BC FE               [12] 1960 	mov	r6,a
      0008BD ED               [12] 1961 	mov	a,r5
      0008BE 34s00            [12] 1962 	addc	a,#(_neigh >> 8)
      0008C0 FD               [12] 1963 	mov	r5,a
      0008C1 8E 82            [24] 1964 	mov	dpl,r6
      0008C3 8D 83            [24] 1965 	mov	dph,r5
      0008C5 A3               [24] 1966 	inc	dptr
      0008C6 A3               [24] 1967 	inc	dptr
      0008C7 E5*00            [12] 1968 	mov	a,_bp
      0008C9 24 03            [12] 1969 	add	a,#0x03
      0008CB F8               [12] 1970 	mov	r0,a
      0008CC E0               [24] 1971 	movx	a,@dptr
      0008CD F6               [12] 1972 	mov	@r0,a
      0008CE A3               [24] 1973 	inc	dptr
      0008CF E0               [24] 1974 	movx	a,@dptr
      0008D0 08               [12] 1975 	inc	r0
      0008D1 F6               [12] 1976 	mov	@r0,a
      0008D2 C0 07            [24] 1977 	push	ar7
      0008D4 C0 04            [24] 1978 	push	ar4
      0008D6 C0 03            [24] 1979 	push	ar3
      0008D8 C0 02            [24] 1980 	push	ar2
      0008DA C0 01            [24] 1981 	push	ar1
      0008DC 12r00r00         [24] 1982 	lcall	_rand
      0008DF AD 82            [24] 1983 	mov	r5,dpl
      0008E1 AE 83            [24] 1984 	mov	r6,dph
      0008E3 74 08            [12] 1985 	mov	a,#0x08
      0008E5 C0 E0            [24] 1986 	push	acc
      0008E7 E4               [12] 1987 	clr	a
      0008E8 C0 E0            [24] 1988 	push	acc
      0008EA 8D 82            [24] 1989 	mov	dpl,r5
      0008EC 8E 83            [24] 1990 	mov	dph,r6
      0008EE 12r00r00         [24] 1991 	lcall	__modsint
      0008F1 AD 82            [24] 1992 	mov	r5,dpl
      0008F3 AE 83            [24] 1993 	mov	r6,dph
      0008F5 15 81            [12] 1994 	dec	sp
      0008F7 15 81            [12] 1995 	dec	sp
      0008F9 D0 01            [24] 1996 	pop	ar1
      0008FB D0 02            [24] 1997 	pop	ar2
      0008FD D0 03            [24] 1998 	pop	ar3
      0008FF D0 04            [24] 1999 	pop	ar4
      000901 D0 07            [24] 2000 	pop	ar7
      000903 0D               [12] 2001 	inc	r5
      000904 BD 00 01         [24] 2002 	cjne	r5,#0x00,00190$
      000907 0E               [12] 2003 	inc	r6
      000908                       2004 00190$:
      000908 C0 07            [24] 2005 	push	ar7
      00090A C0 04            [24] 2006 	push	ar4
      00090C C0 03            [24] 2007 	push	ar3
      00090E C0 02            [24] 2008 	push	ar2
      000910 C0 01            [24] 2009 	push	ar1
      000912 C0 05            [24] 2010 	push	ar5
      000914 C0 06            [24] 2011 	push	ar6
      000916 E5*00            [12] 2012 	mov	a,_bp
      000918 24 03            [12] 2013 	add	a,#0x03
      00091A F8               [12] 2014 	mov	r0,a
      00091B 86 82            [24] 2015 	mov	dpl,@r0
      00091D 08               [12] 2016 	inc	r0
      00091E 86 83            [24] 2017 	mov	dph,@r0
      000920 12r00r00         [24] 2018 	lcall	__mulint
      000923 AD 82            [24] 2019 	mov	r5,dpl
      000925 AE 83            [24] 2020 	mov	r6,dph
      000927 15 81            [12] 2021 	dec	sp
      000929 15 81            [12] 2022 	dec	sp
      00092B D0 01            [24] 2023 	pop	ar1
      00092D D0 02            [24] 2024 	pop	ar2
      00092F D0 03            [24] 2025 	pop	ar3
      000931 D0 04            [24] 2026 	pop	ar4
      000933 D0 07            [24] 2027 	pop	ar7
      000935 8A 82            [24] 2028 	mov	dpl,r2
      000937 8F 83            [24] 2029 	mov	dph,r7
      000939 ED               [12] 2030 	mov	a,r5
      00093A F0               [24] 2031 	movx	@dptr,a
      00093B EE               [12] 2032 	mov	a,r6
      00093C A3               [24] 2033 	inc	dptr
      00093D F0               [24] 2034 	movx	@dptr,a
                                   2035 ;	walk.c:232: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      00093E 8B 82            [24] 2036 	mov	dpl,r3
      000940 8C 83            [24] 2037 	mov	dph,r4
      000942 E0               [24] 2038 	movx	a,@dptr
      000943 FB               [12] 2039 	mov	r3,a
      000944 A3               [24] 2040 	inc	dptr
      000945 E0               [24] 2041 	movx	a,@dptr
      000946 FC               [12] 2042 	mov	r4,a
      000947 C0 07            [24] 2043 	push	ar7
      000949 C0 01            [24] 2044 	push	ar1
      00094B C0 05            [24] 2045 	push	ar5
      00094D C0 06            [24] 2046 	push	ar6
      00094F C0 03            [24] 2047 	push	ar3
      000951 C0 04            [24] 2048 	push	ar4
      000953 74r52            [12] 2049 	mov	a,#___str_6
      000955 C0 E0            [24] 2050 	push	acc
      000957 74s00            [12] 2051 	mov	a,#(___str_6 >> 8)
      000959 C0 E0            [24] 2052 	push	acc
      00095B 74 80            [12] 2053 	mov	a,#0x80
      00095D C0 E0            [24] 2054 	push	acc
      00095F 12r00r00         [24] 2055 	lcall	_printf
      000962 E5 81            [12] 2056 	mov	a,sp
      000964 24 F9            [12] 2057 	add	a,#0xf9
      000966 F5 81            [12] 2058 	mov	sp,a
      000968 D0 01            [24] 2059 	pop	ar1
      00096A D0 07            [24] 2060 	pop	ar7
                                   2061 ;	walk.c:229: for (i = 0; i < REG; i++) {
      00096C E5*00            [12] 2062 	mov	a,_bp
      00096E 24 05            [12] 2063 	add	a,#0x05
      000970 F8               [12] 2064 	mov	r0,a
      000971 06               [12] 2065 	inc	@r0
      000972 B6 00 02         [24] 2066 	cjne	@r0,#0x00,00191$
      000975 08               [12] 2067 	inc	r0
      000976 06               [12] 2068 	inc	@r0
      000977                       2069 00191$:
      000977 E5*00            [12] 2070 	mov	a,_bp
      000979 24 05            [12] 2071 	add	a,#0x05
      00097B F8               [12] 2072 	mov	r0,a
      00097C 86 05            [24] 2073 	mov	ar5,@r0
      00097E 08               [12] 2074 	inc	r0
      00097F 86 06            [24] 2075 	mov	ar6,@r0
      000981 C3               [12] 2076 	clr	c
      000982 ED               [12] 2077 	mov	a,r5
      000983 94 08            [12] 2078 	subb	a,#0x08
      000985 EE               [12] 2079 	mov	a,r6
      000986 94 00            [12] 2080 	subb	a,#0x00
      000988 D0 07            [24] 2081 	pop	ar7
      00098A 50 03            [24] 2082 	jnc	00192$
      00098C 02r07rDC         [24] 2083 	ljmp	00116$
      00098F                       2084 00192$:
                                   2085 ;	walk.c:235: OE76 = OE76_0;
      00098F 78r01            [12] 2086 	mov	r0,#_OE76
      000991 76 3F            [12] 2087 	mov	@r0,#0x3f
                                   2088 ;	walk.c:236: setOE(OE76_NC);
      000993 75 82 00         [24] 2089 	mov	dpl,#0x00
      000996 C0 07            [24] 2090 	push	ar7
      000998 C0 01            [24] 2091 	push	ar1
      00099A 12r00r30         [24] 2092 	lcall	_setOE
      00099D D0 01            [24] 2093 	pop	ar1
      00099F D0 07            [24] 2094 	pop	ar7
                                   2095 ;	walk.c:238: walk(&initial);
      0009A1 8F 04            [24] 2096 	mov	ar4,r7
      0009A3 7D 00            [12] 2097 	mov	r5,#0x00
      0009A5 7E 40            [12] 2098 	mov	r6,#0x40
      0009A7 8C 82            [24] 2099 	mov	dpl,r4
      0009A9 8D 83            [24] 2100 	mov	dph,r5
      0009AB 8E F0            [24] 2101 	mov	b,r6
      0009AD C0 07            [24] 2102 	push	ar7
      0009AF C0 01            [24] 2103 	push	ar1
      0009B1 12r03r09         [24] 2104 	lcall	_walk
      0009B4 D0 01            [24] 2105 	pop	ar1
      0009B6 D0 07            [24] 2106 	pop	ar7
                                   2107 ;	walk.c:240: for (i = 0; i < ROWS; i++)
      0009B8 E5*00            [12] 2108 	mov	a,_bp
      0009BA 24 05            [12] 2109 	add	a,#0x05
      0009BC F8               [12] 2110 	mov	r0,a
      0009BD E4               [12] 2111 	clr	a
      0009BE F6               [12] 2112 	mov	@r0,a
      0009BF 08               [12] 2113 	inc	r0
      0009C0 F6               [12] 2114 	mov	@r0,a
      0009C1 7B 00            [12] 2115 	mov	r3,#0x00
      0009C3 7C 00            [12] 2116 	mov	r4,#0x00
                                   2117 ;	walk.c:241: for (j = 0; j < COLS; j++)
      0009C5                       2118 00132$:
      0009C5 E5*00            [12] 2119 	mov	a,_bp
      0009C7 24 03            [12] 2120 	add	a,#0x03
      0009C9 F8               [12] 2121 	mov	r0,a
      0009CA EB               [12] 2122 	mov	a,r3
      0009CB 24r00            [12] 2123 	add	a,#_g
      0009CD F6               [12] 2124 	mov	@r0,a
      0009CE EC               [12] 2125 	mov	a,r4
      0009CF 34s00            [12] 2126 	addc	a,#(_g >> 8)
      0009D1 08               [12] 2127 	inc	r0
      0009D2 F6               [12] 2128 	mov	@r0,a
      0009D3 7A 00            [12] 2129 	mov	r2,#0x00
      0009D5 7E 00            [12] 2130 	mov	r6,#0x00
      0009D7                       2131 00118$:
                                   2132 ;	walk.c:242: if (g[i][j] != 0xaau) bang();
      0009D7 E5*00            [12] 2133 	mov	a,_bp
      0009D9 24 03            [12] 2134 	add	a,#0x03
      0009DB F8               [12] 2135 	mov	r0,a
      0009DC EA               [12] 2136 	mov	a,r2
      0009DD 26               [12] 2137 	add	a,@r0
      0009DE F5 82            [12] 2138 	mov	dpl,a
      0009E0 EE               [12] 2139 	mov	a,r6
      0009E1 08               [12] 2140 	inc	r0
      0009E2 36               [12] 2141 	addc	a,@r0
      0009E3 F5 83            [12] 2142 	mov	dph,a
      0009E5 E0               [24] 2143 	movx	a,@dptr
      0009E6 FD               [12] 2144 	mov	r5,a
      0009E7 BD AA 02         [24] 2145 	cjne	r5,#0xaa,00193$
      0009EA 80 1B            [24] 2146 	sjmp	00119$
      0009EC                       2147 00193$:
      0009EC C0 07            [24] 2148 	push	ar7
      0009EE C0 06            [24] 2149 	push	ar6
      0009F0 C0 04            [24] 2150 	push	ar4
      0009F2 C0 03            [24] 2151 	push	ar3
      0009F4 C0 02            [24] 2152 	push	ar2
      0009F6 C0 01            [24] 2153 	push	ar1
      0009F8 12r00r23         [24] 2154 	lcall	_bang
      0009FB D0 01            [24] 2155 	pop	ar1
      0009FD D0 02            [24] 2156 	pop	ar2
      0009FF D0 03            [24] 2157 	pop	ar3
      000A01 D0 04            [24] 2158 	pop	ar4
      000A03 D0 06            [24] 2159 	pop	ar6
      000A05 D0 07            [24] 2160 	pop	ar7
      000A07                       2161 00119$:
                                   2162 ;	walk.c:241: for (j = 0; j < COLS; j++)
      000A07 0A               [12] 2163 	inc	r2
      000A08 BA 00 01         [24] 2164 	cjne	r2,#0x00,00194$
      000A0B 0E               [12] 2165 	inc	r6
      000A0C                       2166 00194$:
      000A0C C3               [12] 2167 	clr	c
      000A0D EA               [12] 2168 	mov	a,r2
      000A0E 94 C9            [12] 2169 	subb	a,#0xc9
      000A10 EE               [12] 2170 	mov	a,r6
      000A11 64 80            [12] 2171 	xrl	a,#0x80
      000A13 94 80            [12] 2172 	subb	a,#0x80
      000A15 40 C0            [24] 2173 	jc	00118$
                                   2174 ;	walk.c:240: for (i = 0; i < ROWS; i++)
      000A17 74 C9            [12] 2175 	mov	a,#0xc9
      000A19 2B               [12] 2176 	add	a,r3
      000A1A FB               [12] 2177 	mov	r3,a
      000A1B E4               [12] 2178 	clr	a
      000A1C 3C               [12] 2179 	addc	a,r4
      000A1D FC               [12] 2180 	mov	r4,a
      000A1E E5*00            [12] 2181 	mov	a,_bp
      000A20 24 05            [12] 2182 	add	a,#0x05
      000A22 F8               [12] 2183 	mov	r0,a
      000A23 06               [12] 2184 	inc	@r0
      000A24 B6 00 02         [24] 2185 	cjne	@r0,#0x00,00196$
      000A27 08               [12] 2186 	inc	r0
      000A28 06               [12] 2187 	inc	@r0
      000A29                       2188 00196$:
      000A29 E5*00            [12] 2189 	mov	a,_bp
      000A2B 24 05            [12] 2190 	add	a,#0x05
      000A2D F8               [12] 2191 	mov	r0,a
      000A2E C3               [12] 2192 	clr	c
      000A2F E6               [12] 2193 	mov	a,@r0
      000A30 94 30            [12] 2194 	subb	a,#0x30
      000A32 08               [12] 2195 	inc	r0
      000A33 E6               [12] 2196 	mov	a,@r0
      000A34 64 80            [12] 2197 	xrl	a,#0x80
      000A36 94 80            [12] 2198 	subb	a,#0x80
      000A38 40 8B            [24] 2199 	jc	00132$
                                   2200 ;	walk.c:244: N++;
      000A3A E5*00            [12] 2201 	mov	a,_bp
      000A3C 24 0B            [12] 2202 	add	a,#0x0b
      000A3E F8               [12] 2203 	mov	r0,a
      000A3F 06               [12] 2204 	inc	@r0
      000A40 B6 00 02         [24] 2205 	cjne	@r0,#0x00,00198$
      000A43 08               [12] 2206 	inc	r0
      000A44 06               [12] 2207 	inc	@r0
      000A45                       2208 00198$:
      000A45 02r06rC1         [24] 2209 	ljmp	00108$
      000A48                       2210 00110$:
                                   2211 ;	walk.c:247: EA = 0;
                                   2212 ;	assignBit
      000A48 C2 AF            [12] 2213 	clr	_EA
                                   2214 ;	walk.c:249: puts("\033[2J\033[?25h");
      000A4A 90r00r5B         [24] 2215 	mov	dptr,#___str_7
      000A4D 75 F0 80         [24] 2216 	mov	b,#0x80
      000A50 12r00r00         [24] 2217 	lcall	_puts
                                   2218 ;	walk.c:38: PCON |= 2;
      000A53 43 87 02         [24] 2219 	orl	_PCON,#0x02
                                   2220 ;	walk.c:253: return;
                                   2221 ;	walk.c:254: }
      000A56 85*00 81         [24] 2222 	mov	sp,_bp
      000A59 D0*00            [24] 2223 	pop	_bp
      000A5B 22               [24] 2224 	ret
                                   2225 ;------------------------------------------------------------
                                   2226 ;Allocation info for local variables in function 'stinit'
                                   2227 ;------------------------------------------------------------
                                   2228 ;	walk.c:256: static void stinit(void) {
                                   2229 ;	-----------------------------------------
                                   2230 ;	 function stinit
                                   2231 ;	-----------------------------------------
      000A5C                       2232 _stinit:
                                   2233 ;	walk.c:257: sp = -1;
      000A5C 90rBCr70         [24] 2234 	mov	dptr,#_sp
      000A5F 74 FF            [12] 2235 	mov	a,#0xff
      000A61 F0               [24] 2236 	movx	@dptr,a
      000A62 A3               [24] 2237 	inc	dptr
      000A63 F0               [24] 2238 	movx	@dptr,a
                                   2239 ;	walk.c:258: return;
                                   2240 ;	walk.c:259: }
      000A64 22               [24] 2241 	ret
                                   2242 ;------------------------------------------------------------
                                   2243 ;Allocation info for local variables in function 'stpush'
                                   2244 ;------------------------------------------------------------
                                   2245 ;t                         Allocated to registers r5 r6 r7 
                                   2246 ;------------------------------------------------------------
                                   2247 ;	walk.c:261: static uint8_t stpush(struct node *t) {
                                   2248 ;	-----------------------------------------
                                   2249 ;	 function stpush
                                   2250 ;	-----------------------------------------
      000A65                       2251 _stpush:
      000A65 AD 82            [24] 2252 	mov	r5,dpl
      000A67 AE 83            [24] 2253 	mov	r6,dph
      000A69 AF F0            [24] 2254 	mov	r7,b
                                   2255 ;	walk.c:262: if (sp == (SMAX - 1)) return 0u;
      000A6B 90rBCr70         [24] 2256 	mov	dptr,#_sp
      000A6E E0               [24] 2257 	movx	a,@dptr
      000A6F FB               [12] 2258 	mov	r3,a
      000A70 A3               [24] 2259 	inc	dptr
      000A71 E0               [24] 2260 	movx	a,@dptr
      000A72 FC               [12] 2261 	mov	r4,a
      000A73 BB AF 07         [24] 2262 	cjne	r3,#0xaf,00102$
      000A76 BC 25 04         [24] 2263 	cjne	r4,#0x25,00102$
      000A79 75 82 00         [24] 2264 	mov	dpl,#0x00
      000A7C 22               [24] 2265 	ret
      000A7D                       2266 00102$:
                                   2267 ;	walk.c:263: sp++;
      000A7D 90rBCr70         [24] 2268 	mov	dptr,#_sp
      000A80 74 01            [12] 2269 	mov	a,#0x01
      000A82 2B               [12] 2270 	add	a,r3
      000A83 F0               [24] 2271 	movx	@dptr,a
      000A84 E4               [12] 2272 	clr	a
      000A85 3C               [12] 2273 	addc	a,r4
      000A86 A3               [24] 2274 	inc	dptr
      000A87 F0               [24] 2275 	movx	@dptr,a
                                   2276 ;	walk.c:264: stack[sp] = *t;
      000A88 90rBCr70         [24] 2277 	mov	dptr,#_sp
      000A8B E0               [24] 2278 	movx	a,@dptr
      000A8C FB               [12] 2279 	mov	r3,a
      000A8D A3               [24] 2280 	inc	dptr
      000A8E E0               [24] 2281 	movx	a,@dptr
      000A8F FC               [12] 2282 	mov	r4,a
      000A90 EB               [12] 2283 	mov	a,r3
      000A91 2B               [12] 2284 	add	a,r3
      000A92 FB               [12] 2285 	mov	r3,a
      000A93 EC               [12] 2286 	mov	a,r4
      000A94 33               [12] 2287 	rlc	a
      000A95 FC               [12] 2288 	mov	r4,a
      000A96 EB               [12] 2289 	mov	a,r3
      000A97 2B               [12] 2290 	add	a,r3
      000A98 FB               [12] 2291 	mov	r3,a
      000A99 EC               [12] 2292 	mov	a,r4
      000A9A 33               [12] 2293 	rlc	a
      000A9B FC               [12] 2294 	mov	r4,a
      000A9C EB               [12] 2295 	mov	a,r3
      000A9D 24rB0            [12] 2296 	add	a,#_stack
      000A9F FB               [12] 2297 	mov	r3,a
      000AA0 EC               [12] 2298 	mov	a,r4
      000AA1 34s25            [12] 2299 	addc	a,#(_stack >> 8)
      000AA3 FC               [12] 2300 	mov	r4,a
      000AA4 7A 00            [12] 2301 	mov	r2,#0x00
      000AA6 74 04            [12] 2302 	mov	a,#0x04
      000AA8 C0 E0            [24] 2303 	push	acc
      000AAA E4               [12] 2304 	clr	a
      000AAB C0 E0            [24] 2305 	push	acc
      000AAD C0 05            [24] 2306 	push	ar5
      000AAF C0 06            [24] 2307 	push	ar6
      000AB1 C0 07            [24] 2308 	push	ar7
      000AB3 8B 82            [24] 2309 	mov	dpl,r3
      000AB5 8C 83            [24] 2310 	mov	dph,r4
      000AB7 8A F0            [24] 2311 	mov	b,r2
      000AB9 12r00r00         [24] 2312 	lcall	___memcpy
      000ABC E5 81            [12] 2313 	mov	a,sp
      000ABE 24 FB            [12] 2314 	add	a,#0xfb
      000AC0 F5 81            [12] 2315 	mov	sp,a
                                   2316 ;	walk.c:265: return 1u;
      000AC2 75 82 01         [24] 2317 	mov	dpl,#0x01
                                   2318 ;	walk.c:266: }
      000AC5 22               [24] 2319 	ret
                                   2320 ;------------------------------------------------------------
                                   2321 ;Allocation info for local variables in function 'stpop'
                                   2322 ;------------------------------------------------------------
                                   2323 ;t                         Allocated to registers r5 r6 r7 
                                   2324 ;------------------------------------------------------------
                                   2325 ;	walk.c:268: static uint8_t stpop(struct node *t) {
                                   2326 ;	-----------------------------------------
                                   2327 ;	 function stpop
                                   2328 ;	-----------------------------------------
      000AC6                       2329 _stpop:
      000AC6 AD 82            [24] 2330 	mov	r5,dpl
      000AC8 AE 83            [24] 2331 	mov	r6,dph
      000ACA AF F0            [24] 2332 	mov	r7,b
                                   2333 ;	walk.c:269: if (sp == -1) return 0u;
      000ACC 90rBCr70         [24] 2334 	mov	dptr,#_sp
      000ACF E0               [24] 2335 	movx	a,@dptr
      000AD0 FB               [12] 2336 	mov	r3,a
      000AD1 A3               [24] 2337 	inc	dptr
      000AD2 E0               [24] 2338 	movx	a,@dptr
      000AD3 FC               [12] 2339 	mov	r4,a
      000AD4 BB FF 07         [24] 2340 	cjne	r3,#0xff,00102$
      000AD7 BC FF 04         [24] 2341 	cjne	r4,#0xff,00102$
      000ADA 75 82 00         [24] 2342 	mov	dpl,#0x00
      000ADD 22               [24] 2343 	ret
      000ADE                       2344 00102$:
                                   2345 ;	walk.c:270: *t = stack[sp];
      000ADE EB               [12] 2346 	mov	a,r3
      000ADF 2B               [12] 2347 	add	a,r3
      000AE0 FB               [12] 2348 	mov	r3,a
      000AE1 EC               [12] 2349 	mov	a,r4
      000AE2 33               [12] 2350 	rlc	a
      000AE3 FC               [12] 2351 	mov	r4,a
      000AE4 EB               [12] 2352 	mov	a,r3
      000AE5 2B               [12] 2353 	add	a,r3
      000AE6 FB               [12] 2354 	mov	r3,a
      000AE7 EC               [12] 2355 	mov	a,r4
      000AE8 33               [12] 2356 	rlc	a
      000AE9 FC               [12] 2357 	mov	r4,a
      000AEA EB               [12] 2358 	mov	a,r3
      000AEB 24rB0            [12] 2359 	add	a,#_stack
      000AED FB               [12] 2360 	mov	r3,a
      000AEE EC               [12] 2361 	mov	a,r4
      000AEF 34s25            [12] 2362 	addc	a,#(_stack >> 8)
      000AF1 FC               [12] 2363 	mov	r4,a
      000AF2 7A 00            [12] 2364 	mov	r2,#0x00
      000AF4 74 04            [12] 2365 	mov	a,#0x04
      000AF6 C0 E0            [24] 2366 	push	acc
      000AF8 E4               [12] 2367 	clr	a
      000AF9 C0 E0            [24] 2368 	push	acc
      000AFB C0 03            [24] 2369 	push	ar3
      000AFD C0 04            [24] 2370 	push	ar4
      000AFF C0 02            [24] 2371 	push	ar2
      000B01 8D 82            [24] 2372 	mov	dpl,r5
      000B03 8E 83            [24] 2373 	mov	dph,r6
      000B05 8F F0            [24] 2374 	mov	b,r7
      000B07 12r00r00         [24] 2375 	lcall	___memcpy
      000B0A E5 81            [12] 2376 	mov	a,sp
      000B0C 24 FB            [12] 2377 	add	a,#0xfb
      000B0E F5 81            [12] 2378 	mov	sp,a
                                   2379 ;	walk.c:271: sp--;
      000B10 90rBCr70         [24] 2380 	mov	dptr,#_sp
      000B13 E0               [24] 2381 	movx	a,@dptr
      000B14 24 FF            [12] 2382 	add	a,#0xff
      000B16 FE               [12] 2383 	mov	r6,a
      000B17 A3               [24] 2384 	inc	dptr
      000B18 E0               [24] 2385 	movx	a,@dptr
      000B19 34 FF            [12] 2386 	addc	a,#0xff
      000B1B FF               [12] 2387 	mov	r7,a
      000B1C 90rBCr70         [24] 2388 	mov	dptr,#_sp
      000B1F EE               [12] 2389 	mov	a,r6
      000B20 F0               [24] 2390 	movx	@dptr,a
      000B21 EF               [12] 2391 	mov	a,r7
      000B22 A3               [24] 2392 	inc	dptr
      000B23 F0               [24] 2393 	movx	@dptr,a
                                   2394 ;	walk.c:272: return 1u;
      000B24 75 82 01         [24] 2395 	mov	dpl,#0x01
                                   2396 ;	walk.c:273: }
      000B27 22               [24] 2397 	ret
                                   2398 	.area CSEG    (CODE)
                                   2399 	.area CONST   (CODE)
                                   2400 	.area CONST   (CODE)
      000000                       2401 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2402 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2403 	.db 0x00
                                   2404 	.area CSEG    (CODE)
                                   2405 	.area CONST   (CODE)
      00000D                       2406 ___str_1:
      00000D 1B                    2407 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2408 	.ascii "[%d;%dHo"
             6F
      000016 00                    2409 	.db 0x00
                                   2410 	.area CSEG    (CODE)
                                   2411 	.area CONST   (CODE)
      000017                       2412 ___str_2:
      000017 1B                    2413 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2414 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2415 	.db 0x00
                                   2416 	.area CSEG    (CODE)
                                   2417 	.area CONST   (CODE)
      00002A                       2418 ___str_3:
      00002A 1B                    2419 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2420 	.ascii "[%d;%dH."
             2E
      000033 00                    2421 	.db 0x00
                                   2422 	.area CSEG    (CODE)
                                   2423 	.area CONST   (CODE)
      000034                       2424 ___str_4:
      000034 1B                    2425 	.db 0x1b
      000035 5B 32 4A              2426 	.ascii "[2J"
      000038 1B                    2427 	.db 0x1b
      000039 5B 3F 32 35 6C        2428 	.ascii "[?25l"
      00003E 00                    2429 	.db 0x00
                                   2430 	.area CSEG    (CODE)
                                   2431 	.area CONST   (CODE)
      00003F                       2432 ___str_5:
      00003F 1B                    2433 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2434 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2435 	.db 0x00
                                   2436 	.area CSEG    (CODE)
                                   2437 	.area CONST   (CODE)
      000052                       2438 ___str_6:
      000052 25 20 38 64 25 20 38  2439 	.ascii "% 8d% 8d"
             64
      00005A 00                    2440 	.db 0x00
                                   2441 	.area CSEG    (CODE)
                                   2442 	.area CONST   (CODE)
      00005B                       2443 ___str_7:
      00005B 1B                    2444 	.db 0x1b
      00005C 5B 32 4A              2445 	.ascii "[2J"
      00005F 1B                    2446 	.db 0x1b
      000060 5B 3F 32 35 68        2447 	.ascii "[?25h"
      000065 00                    2448 	.db 0x00
                                   2449 	.area CSEG    (CODE)
                                   2450 	.area XINIT   (CODE)
      000000                       2451 __xinit__neigh:
      000000 FF FF                 2452 	.byte #0xff, #0xff	; -1
      000002 01 00                 2453 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2454 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2455 	.byte #0xff, #0xff	; -1
      000008 01 00                 2456 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2457 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2458 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2459 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2460 	.byte #0xff, #0xff	; -1
      000012 00 00                 2461 	.byte #0x00, #0x00	;  0
      000014 00 00                 2462 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2463 	.byte #0xff, #0xff	; -1
      000018 01 00                 2464 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2465 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2466 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2467 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2468 	.byte #0xff, #0xff	; -1
      000022 01 00                 2469 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2470 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2471 	.byte #0xff, #0xff	; -1
      000028 01 00                 2472 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2473 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2474 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2475 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2476 	.byte #0xff, #0xff	; -1
      000032 00 00                 2477 	.byte #0x00, #0x00	;  0
      000034 00 00                 2478 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2479 	.byte #0xff, #0xff	; -1
      000038 01 00                 2480 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2481 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2482 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2483 	.byte #0x01, #0x00	;  1
                                   2484 	.area CABS    (ABS,CODE)
