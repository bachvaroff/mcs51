                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _stack:
      0025B0                        325 	.ds 38592
      00BC70                        326 _sp:
      00BC70                        327 	.ds 2
                           00F006   328 _OEreg	=	0xf006
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _neigh:
      000000                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r06r65         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	walk.c:9: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  395 	mov	a, dpl
      000002 02 00 30         [24]  396 	ljmp	0x0030
                                    397 ;	walk.c:15: }
                                    398 ;	naked function: no epilogue.
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'getchar'
                                    401 ;------------------------------------------------------------
                                    402 ;	walk.c:17: int getchar(void) __naked {
                                    403 ;	-----------------------------------------
                                    404 ;	 function getchar
                                    405 ;	-----------------------------------------
      000005                        406 _getchar:
                                    407 ;	naked function: no prologue.
                                    408 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  409 	lcall	0x0032
      000008 F5 82            [12]  410 	mov	dpl, a
      00000A 75 83 00         [24]  411 	mov	dph, #0
      00000D 22               [24]  412 	ret
                                    413 ;	walk.c:24: }
                                    414 ;	naked function: no epilogue.
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'int0'
                                    417 ;------------------------------------------------------------
                                    418 ;	walk.c:30: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    419 ;	-----------------------------------------
                                    420 ;	 function int0
                                    421 ;	-----------------------------------------
      00000E                        422 _int0:
                           00000F   423 	ar7 = 0x0f
                           00000E   424 	ar6 = 0x0e
                           00000D   425 	ar5 = 0x0d
                           00000C   426 	ar4 = 0x0c
                           00000B   427 	ar3 = 0x0b
                           00000A   428 	ar2 = 0x0a
                           000009   429 	ar1 = 0x09
                           000008   430 	ar0 = 0x08
      00000E C0 D0            [24]  431 	push	psw
      000010 75 D0 08         [24]  432 	mov	psw,#0x08
                                    433 ;	walk.c:31: i0 = 0u;
      000013 78r00            [12]  434 	mov	r0,#_i0
      000015 76 00            [12]  435 	mov	@r0,#0x00
                                    436 ;	walk.c:32: }
      000017 D0 D0            [24]  437 	pop	psw
      000019 32               [24]  438 	reti
                                    439 ;	eliminated unneeded push/pop dpl
                                    440 ;	eliminated unneeded push/pop dph
                                    441 ;	eliminated unneeded push/pop b
                                    442 ;	eliminated unneeded push/pop acc
                                    443 ;------------------------------------------------------------
                                    444 ;Allocation info for local variables in function 'bang'
                                    445 ;------------------------------------------------------------
                                    446 ;	walk.c:38: static void bang(void) {
                                    447 ;	-----------------------------------------
                                    448 ;	 function bang
                                    449 ;	-----------------------------------------
      00001A                        450 _bang:
                           000007   451 	ar7 = 0x07
                           000006   452 	ar6 = 0x06
                           000005   453 	ar5 = 0x05
                           000004   454 	ar4 = 0x04
                           000003   455 	ar3 = 0x03
                           000002   456 	ar2 = 0x02
                           000001   457 	ar1 = 0x01
                           000000   458 	ar0 = 0x00
                                    459 ;	walk.c:39: (void)puts("Memory error");
      00001A 90r00r00         [24]  460 	mov	dptr,#___str_0
      00001D 75 F0 80         [24]  461 	mov	b,#0x80
      000020 12r00r00         [24]  462 	lcall	_puts
                                    463 ;	walk.c:35: PCON |= 2;
      000023 43 87 02         [24]  464 	orl	_PCON,#0x02
                                    465 ;	walk.c:42: return;
                                    466 ;	walk.c:43: }
      000026 22               [24]  467 	ret
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'setOE'
                                    470 ;------------------------------------------------------------
                                    471 ;mask                      Allocated to registers r7 
                                    472 ;------------------------------------------------------------
                                    473 ;	walk.c:85: static void setOE(uint8_t mask) {
                                    474 ;	-----------------------------------------
                                    475 ;	 function setOE
                                    476 ;	-----------------------------------------
      000027                        477 _setOE:
      000027 AF 82            [24]  478 	mov	r7,dpl
                                    479 ;	walk.c:86: OE76 |= mask;
      000029 78r01            [12]  480 	mov	r0,#_OE76
      00002B EF               [12]  481 	mov	a,r7
      00002C 46               [12]  482 	orl	a,@r0
      00002D F6               [12]  483 	mov	@r0,a
                                    484 ;	walk.c:87: P1_7 = 0;
                                    485 ;	assignBit
      00002E C2 97            [12]  486 	clr	_P1_7
                                    487 ;	walk.c:88: OEreg = OE76;
      000030 78r01            [12]  488 	mov	r0,#_OE76
      000032 90 F0 06         [24]  489 	mov	dptr,#_OEreg
      000035 E6               [12]  490 	mov	a,@r0
      000036 F0               [24]  491 	movx	@dptr,a
                                    492 ;	walk.c:89: P1_7 = 1;
                                    493 ;	assignBit
      000037 D2 97            [12]  494 	setb	_P1_7
                                    495 ;	walk.c:91: return;
                                    496 ;	walk.c:92: }
      000039 22               [24]  497 	ret
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'unsetOE'
                                    500 ;------------------------------------------------------------
                                    501 ;mask                      Allocated to registers r7 
                                    502 ;------------------------------------------------------------
                                    503 ;	walk.c:94: static void unsetOE(uint8_t mask) {
                                    504 ;	-----------------------------------------
                                    505 ;	 function unsetOE
                                    506 ;	-----------------------------------------
      00003A                        507 _unsetOE:
                                    508 ;	walk.c:95: OE76 &= ~mask;
      00003A E5 82            [12]  509 	mov	a,dpl
      00003C F4               [12]  510 	cpl	a
      00003D 78r01            [12]  511 	mov	r0,#_OE76
      00003F 56               [12]  512 	anl	a,@r0
      000040 F6               [12]  513 	mov	@r0,a
                                    514 ;	walk.c:96: P1_7 = 0;
                                    515 ;	assignBit
      000041 C2 97            [12]  516 	clr	_P1_7
                                    517 ;	walk.c:97: OEreg = OE76;
      000043 78r01            [12]  518 	mov	r0,#_OE76
      000045 90 F0 06         [24]  519 	mov	dptr,#_OEreg
      000048 E6               [12]  520 	mov	a,@r0
      000049 F0               [24]  521 	movx	@dptr,a
                                    522 ;	walk.c:98: P1_7 = 1;
                                    523 ;	assignBit
      00004A D2 97            [12]  524 	setb	_P1_7
                                    525 ;	walk.c:100: return;
                                    526 ;	walk.c:101: }
      00004C 22               [24]  527 	ret
                                    528 ;------------------------------------------------------------
                                    529 ;Allocation info for local variables in function 'flipOE'
                                    530 ;------------------------------------------------------------
                                    531 ;mask                      Allocated to registers r7 
                                    532 ;------------------------------------------------------------
                                    533 ;	walk.c:103: static void flipOE(uint8_t mask) {
                                    534 ;	-----------------------------------------
                                    535 ;	 function flipOE
                                    536 ;	-----------------------------------------
      00004D                        537 _flipOE:
      00004D AF 82            [24]  538 	mov	r7,dpl
                                    539 ;	walk.c:104: OE76 ^= mask;
      00004F 78r01            [12]  540 	mov	r0,#_OE76
      000051 EF               [12]  541 	mov	a,r7
      000052 66               [12]  542 	xrl	a,@r0
      000053 F6               [12]  543 	mov	@r0,a
                                    544 ;	walk.c:105: P1_7 = 0;
                                    545 ;	assignBit
      000054 C2 97            [12]  546 	clr	_P1_7
                                    547 ;	walk.c:106: OEreg = OE76;
      000056 78r01            [12]  548 	mov	r0,#_OE76
      000058 90 F0 06         [24]  549 	mov	dptr,#_OEreg
      00005B E6               [12]  550 	mov	a,@r0
      00005C F0               [24]  551 	movx	@dptr,a
                                    552 ;	walk.c:107: P1_7 = 1;
                                    553 ;	assignBit
      00005D D2 97            [12]  554 	setb	_P1_7
                                    555 ;	walk.c:109: return;
                                    556 ;	walk.c:110: }
      00005F 22               [24]  557 	ret
                                    558 ;------------------------------------------------------------
                                    559 ;Allocation info for local variables in function 'update'
                                    560 ;------------------------------------------------------------
                                    561 ;cur                       Allocated to stack - _bp -5
                                    562 ;j                         Allocated to stack - _bp -6
                                    563 ;t                         Allocated to stack - _bp +1
                                    564 ;sloc0                     Allocated to stack - _bp +4
                                    565 ;sloc1                     Allocated to stack - _bp +6
                                    566 ;sloc2                     Allocated to stack - _bp +8
                                    567 ;------------------------------------------------------------
                                    568 ;	walk.c:112: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    569 ;	-----------------------------------------
                                    570 ;	 function update
                                    571 ;	-----------------------------------------
      000060                        572 _update:
      000060 C0*00            [24]  573 	push	_bp
      000062 85 81*00         [24]  574 	mov	_bp,sp
      000065 C0 82            [24]  575 	push	dpl
      000067 C0 83            [24]  576 	push	dph
      000069 C0 F0            [24]  577 	push	b
      00006B E5 81            [12]  578 	mov	a,sp
      00006D 24 07            [12]  579 	add	a,#0x07
      00006F F5 81            [12]  580 	mov	sp,a
                                    581 ;	walk.c:113: t->r = cur->r + neigh[j].r;
      000071 E5*00            [12]  582 	mov	a,_bp
      000073 24 FB            [12]  583 	add	a,#0xfb
      000075 F8               [12]  584 	mov	r0,a
      000076 86 02            [24]  585 	mov	ar2,@r0
      000078 08               [12]  586 	inc	r0
      000079 86 03            [24]  587 	mov	ar3,@r0
      00007B 08               [12]  588 	inc	r0
      00007C 86 04            [24]  589 	mov	ar4,@r0
      00007E 8A 82            [24]  590 	mov	dpl,r2
      000080 8B 83            [24]  591 	mov	dph,r3
      000082 8C F0            [24]  592 	mov	b,r4
      000084 E5*00            [12]  593 	mov	a,_bp
      000086 24 04            [12]  594 	add	a,#0x04
      000088 F8               [12]  595 	mov	r0,a
      000089 12r00r00         [24]  596 	lcall	__gptrget
      00008C F6               [12]  597 	mov	@r0,a
      00008D A3               [24]  598 	inc	dptr
      00008E 12r00r00         [24]  599 	lcall	__gptrget
      000091 08               [12]  600 	inc	r0
      000092 F6               [12]  601 	mov	@r0,a
      000093 E5*00            [12]  602 	mov	a,_bp
      000095 24 FA            [12]  603 	add	a,#0xfa
      000097 F8               [12]  604 	mov	r0,a
      000098 E5*00            [12]  605 	mov	a,_bp
      00009A 24 06            [12]  606 	add	a,#0x06
      00009C F9               [12]  607 	mov	r1,a
      00009D E6               [12]  608 	mov	a,@r0
      00009E 75 F0 04         [24]  609 	mov	b,#0x04
      0000A1 A4               [48]  610 	mul	ab
      0000A2 F7               [12]  611 	mov	@r1,a
      0000A3 09               [12]  612 	inc	r1
      0000A4 A7 F0            [24]  613 	mov	@r1,b
      0000A6 E5*00            [12]  614 	mov	a,_bp
      0000A8 24 06            [12]  615 	add	a,#0x06
      0000AA F8               [12]  616 	mov	r0,a
      0000AB E6               [12]  617 	mov	a,@r0
      0000AC 24r00            [12]  618 	add	a,#_neigh
      0000AE F5 82            [12]  619 	mov	dpl,a
      0000B0 08               [12]  620 	inc	r0
      0000B1 E6               [12]  621 	mov	a,@r0
      0000B2 34s00            [12]  622 	addc	a,#(_neigh >> 8)
      0000B4 F5 83            [12]  623 	mov	dph,a
      0000B6 E0               [24]  624 	movx	a,@dptr
      0000B7 FF               [12]  625 	mov	r7,a
      0000B8 A3               [24]  626 	inc	dptr
      0000B9 E0               [24]  627 	movx	a,@dptr
      0000BA FE               [12]  628 	mov	r6,a
      0000BB E5*00            [12]  629 	mov	a,_bp
      0000BD 24 04            [12]  630 	add	a,#0x04
      0000BF F8               [12]  631 	mov	r0,a
      0000C0 EF               [12]  632 	mov	a,r7
      0000C1 26               [12]  633 	add	a,@r0
      0000C2 FF               [12]  634 	mov	r7,a
      0000C3 EE               [12]  635 	mov	a,r6
      0000C4 08               [12]  636 	inc	r0
      0000C5 36               [12]  637 	addc	a,@r0
      0000C6 FE               [12]  638 	mov	r6,a
      0000C7 A8*00            [24]  639 	mov	r0,_bp
      0000C9 08               [12]  640 	inc	r0
      0000CA 86 82            [24]  641 	mov	dpl,@r0
      0000CC 08               [12]  642 	inc	r0
      0000CD 86 83            [24]  643 	mov	dph,@r0
      0000CF 08               [12]  644 	inc	r0
      0000D0 86 F0            [24]  645 	mov	b,@r0
      0000D2 EF               [12]  646 	mov	a,r7
      0000D3 12r00r00         [24]  647 	lcall	__gptrput
      0000D6 A3               [24]  648 	inc	dptr
      0000D7 EE               [12]  649 	mov	a,r6
      0000D8 12r00r00         [24]  650 	lcall	__gptrput
                                    651 ;	walk.c:114: t->c = cur->c + neigh[j].c;
      0000DB A8*00            [24]  652 	mov	r0,_bp
      0000DD 08               [12]  653 	inc	r0
      0000DE E5*00            [12]  654 	mov	a,_bp
      0000E0 24 08            [12]  655 	add	a,#0x08
      0000E2 F9               [12]  656 	mov	r1,a
      0000E3 74 02            [12]  657 	mov	a,#0x02
      0000E5 26               [12]  658 	add	a,@r0
      0000E6 F7               [12]  659 	mov	@r1,a
      0000E7 E4               [12]  660 	clr	a
      0000E8 08               [12]  661 	inc	r0
      0000E9 36               [12]  662 	addc	a,@r0
      0000EA 09               [12]  663 	inc	r1
      0000EB F7               [12]  664 	mov	@r1,a
      0000EC 08               [12]  665 	inc	r0
      0000ED 09               [12]  666 	inc	r1
      0000EE E6               [12]  667 	mov	a,@r0
      0000EF F7               [12]  668 	mov	@r1,a
      0000F0 74 02            [12]  669 	mov	a,#0x02
      0000F2 2A               [12]  670 	add	a,r2
      0000F3 FA               [12]  671 	mov	r2,a
      0000F4 E4               [12]  672 	clr	a
      0000F5 3B               [12]  673 	addc	a,r3
      0000F6 FB               [12]  674 	mov	r3,a
      0000F7 8A 82            [24]  675 	mov	dpl,r2
      0000F9 8B 83            [24]  676 	mov	dph,r3
      0000FB 8C F0            [24]  677 	mov	b,r4
      0000FD 12r00r00         [24]  678 	lcall	__gptrget
      000100 FA               [12]  679 	mov	r2,a
      000101 A3               [24]  680 	inc	dptr
      000102 12r00r00         [24]  681 	lcall	__gptrget
      000105 FB               [12]  682 	mov	r3,a
      000106 E5*00            [12]  683 	mov	a,_bp
      000108 24 06            [12]  684 	add	a,#0x06
      00010A F8               [12]  685 	mov	r0,a
      00010B E6               [12]  686 	mov	a,@r0
      00010C 24r00            [12]  687 	add	a,#_neigh
      00010E FC               [12]  688 	mov	r4,a
      00010F 08               [12]  689 	inc	r0
      000110 E6               [12]  690 	mov	a,@r0
      000111 34s00            [12]  691 	addc	a,#(_neigh >> 8)
      000113 FD               [12]  692 	mov	r5,a
      000114 8C 82            [24]  693 	mov	dpl,r4
      000116 8D 83            [24]  694 	mov	dph,r5
      000118 A3               [24]  695 	inc	dptr
      000119 A3               [24]  696 	inc	dptr
      00011A E0               [24]  697 	movx	a,@dptr
      00011B FC               [12]  698 	mov	r4,a
      00011C A3               [24]  699 	inc	dptr
      00011D E0               [24]  700 	movx	a,@dptr
      00011E FD               [12]  701 	mov	r5,a
      00011F EC               [12]  702 	mov	a,r4
      000120 2A               [12]  703 	add	a,r2
      000121 FA               [12]  704 	mov	r2,a
      000122 ED               [12]  705 	mov	a,r5
      000123 3B               [12]  706 	addc	a,r3
      000124 FB               [12]  707 	mov	r3,a
      000125 E5*00            [12]  708 	mov	a,_bp
      000127 24 08            [12]  709 	add	a,#0x08
      000129 F8               [12]  710 	mov	r0,a
      00012A 86 82            [24]  711 	mov	dpl,@r0
      00012C 08               [12]  712 	inc	r0
      00012D 86 83            [24]  713 	mov	dph,@r0
      00012F 08               [12]  714 	inc	r0
      000130 86 F0            [24]  715 	mov	b,@r0
      000132 EA               [12]  716 	mov	a,r2
      000133 12r00r00         [24]  717 	lcall	__gptrput
      000136 A3               [24]  718 	inc	dptr
      000137 EB               [12]  719 	mov	a,r3
      000138 12r00r00         [24]  720 	lcall	__gptrput
                                    721 ;	walk.c:116: if (t->r < 0) t->r += ROWS;
      00013B A8*00            [24]  722 	mov	r0,_bp
      00013D 08               [12]  723 	inc	r0
      00013E 86 82            [24]  724 	mov	dpl,@r0
      000140 08               [12]  725 	inc	r0
      000141 86 83            [24]  726 	mov	dph,@r0
      000143 08               [12]  727 	inc	r0
      000144 86 F0            [24]  728 	mov	b,@r0
      000146 12r00r00         [24]  729 	lcall	__gptrget
      000149 FD               [12]  730 	mov	r5,a
      00014A A3               [24]  731 	inc	dptr
      00014B 12r00r00         [24]  732 	lcall	__gptrget
      00014E FC               [12]  733 	mov	r4,a
      00014F EE               [12]  734 	mov	a,r6
      000150 30 E7 1D         [24]  735 	jnb	acc.7,00104$
      000153 74 30            [12]  736 	mov	a,#0x30
      000155 2D               [12]  737 	add	a,r5
      000156 FF               [12]  738 	mov	r7,a
      000157 E4               [12]  739 	clr	a
      000158 3C               [12]  740 	addc	a,r4
      000159 FE               [12]  741 	mov	r6,a
      00015A A8*00            [24]  742 	mov	r0,_bp
      00015C 08               [12]  743 	inc	r0
      00015D 86 82            [24]  744 	mov	dpl,@r0
      00015F 08               [12]  745 	inc	r0
      000160 86 83            [24]  746 	mov	dph,@r0
      000162 08               [12]  747 	inc	r0
      000163 86 F0            [24]  748 	mov	b,@r0
      000165 EF               [12]  749 	mov	a,r7
      000166 12r00r00         [24]  750 	lcall	__gptrput
      000169 A3               [24]  751 	inc	dptr
      00016A EE               [12]  752 	mov	a,r6
      00016B 12r00r00         [24]  753 	lcall	__gptrput
      00016E 80 27            [24]  754 	sjmp	00105$
      000170                        755 00104$:
                                    756 ;	walk.c:117: else if (t->r >= ROWS) t->r -= ROWS;
      000170 C3               [12]  757 	clr	c
      000171 ED               [12]  758 	mov	a,r5
      000172 94 30            [12]  759 	subb	a,#0x30
      000174 EC               [12]  760 	mov	a,r4
      000175 64 80            [12]  761 	xrl	a,#0x80
      000177 94 80            [12]  762 	subb	a,#0x80
      000179 40 1C            [24]  763 	jc	00105$
      00017B ED               [12]  764 	mov	a,r5
      00017C 24 D0            [12]  765 	add	a,#0xd0
      00017E FD               [12]  766 	mov	r5,a
      00017F EC               [12]  767 	mov	a,r4
      000180 34 FF            [12]  768 	addc	a,#0xff
      000182 FC               [12]  769 	mov	r4,a
      000183 A8*00            [24]  770 	mov	r0,_bp
      000185 08               [12]  771 	inc	r0
      000186 86 82            [24]  772 	mov	dpl,@r0
      000188 08               [12]  773 	inc	r0
      000189 86 83            [24]  774 	mov	dph,@r0
      00018B 08               [12]  775 	inc	r0
      00018C 86 F0            [24]  776 	mov	b,@r0
      00018E ED               [12]  777 	mov	a,r5
      00018F 12r00r00         [24]  778 	lcall	__gptrput
      000192 A3               [24]  779 	inc	dptr
      000193 EC               [12]  780 	mov	a,r4
      000194 12r00r00         [24]  781 	lcall	__gptrput
      000197                        782 00105$:
                                    783 ;	walk.c:118: if (t->c < 0) t->c += COLS;
      000197 E5*00            [12]  784 	mov	a,_bp
      000199 24 08            [12]  785 	add	a,#0x08
      00019B F8               [12]  786 	mov	r0,a
      00019C 86 82            [24]  787 	mov	dpl,@r0
      00019E 08               [12]  788 	inc	r0
      00019F 86 83            [24]  789 	mov	dph,@r0
      0001A1 08               [12]  790 	inc	r0
      0001A2 86 F0            [24]  791 	mov	b,@r0
      0001A4 12r00r00         [24]  792 	lcall	__gptrget
      0001A7 A3               [24]  793 	inc	dptr
      0001A8 12r00r00         [24]  794 	lcall	__gptrget
      0001AB 30 E7 35         [24]  795 	jnb	acc.7,00109$
      0001AE E5*00            [12]  796 	mov	a,_bp
      0001B0 24 08            [12]  797 	add	a,#0x08
      0001B2 F8               [12]  798 	mov	r0,a
      0001B3 86 82            [24]  799 	mov	dpl,@r0
      0001B5 08               [12]  800 	inc	r0
      0001B6 86 83            [24]  801 	mov	dph,@r0
      0001B8 08               [12]  802 	inc	r0
      0001B9 86 F0            [24]  803 	mov	b,@r0
      0001BB 12r00r00         [24]  804 	lcall	__gptrget
      0001BE FE               [12]  805 	mov	r6,a
      0001BF A3               [24]  806 	inc	dptr
      0001C0 12r00r00         [24]  807 	lcall	__gptrget
      0001C3 FF               [12]  808 	mov	r7,a
      0001C4 74 C9            [12]  809 	mov	a,#0xc9
      0001C6 2E               [12]  810 	add	a,r6
      0001C7 FE               [12]  811 	mov	r6,a
      0001C8 E4               [12]  812 	clr	a
      0001C9 3F               [12]  813 	addc	a,r7
      0001CA FF               [12]  814 	mov	r7,a
      0001CB E5*00            [12]  815 	mov	a,_bp
      0001CD 24 08            [12]  816 	add	a,#0x08
      0001CF F8               [12]  817 	mov	r0,a
      0001D0 86 82            [24]  818 	mov	dpl,@r0
      0001D2 08               [12]  819 	inc	r0
      0001D3 86 83            [24]  820 	mov	dph,@r0
      0001D5 08               [12]  821 	inc	r0
      0001D6 86 F0            [24]  822 	mov	b,@r0
      0001D8 EE               [12]  823 	mov	a,r6
      0001D9 12r00r00         [24]  824 	lcall	__gptrput
      0001DC A3               [24]  825 	inc	dptr
      0001DD EF               [12]  826 	mov	a,r7
      0001DE 12r00r00         [24]  827 	lcall	__gptrput
      0001E1 80 55            [24]  828 	sjmp	00110$
      0001E3                        829 00109$:
                                    830 ;	walk.c:119: else if (t->c >= COLS) t->c -= COLS;
      0001E3 E5*00            [12]  831 	mov	a,_bp
      0001E5 24 08            [12]  832 	add	a,#0x08
      0001E7 F8               [12]  833 	mov	r0,a
      0001E8 86 82            [24]  834 	mov	dpl,@r0
      0001EA 08               [12]  835 	inc	r0
      0001EB 86 83            [24]  836 	mov	dph,@r0
      0001ED 08               [12]  837 	inc	r0
      0001EE 86 F0            [24]  838 	mov	b,@r0
      0001F0 12r00r00         [24]  839 	lcall	__gptrget
      0001F3 FE               [12]  840 	mov	r6,a
      0001F4 A3               [24]  841 	inc	dptr
      0001F5 12r00r00         [24]  842 	lcall	__gptrget
      0001F8 FF               [12]  843 	mov	r7,a
      0001F9 C3               [12]  844 	clr	c
      0001FA EE               [12]  845 	mov	a,r6
      0001FB 94 C9            [12]  846 	subb	a,#0xc9
      0001FD EF               [12]  847 	mov	a,r7
      0001FE 64 80            [12]  848 	xrl	a,#0x80
      000200 94 80            [12]  849 	subb	a,#0x80
      000202 40 34            [24]  850 	jc	00110$
      000204 E5*00            [12]  851 	mov	a,_bp
      000206 24 08            [12]  852 	add	a,#0x08
      000208 F8               [12]  853 	mov	r0,a
      000209 86 82            [24]  854 	mov	dpl,@r0
      00020B 08               [12]  855 	inc	r0
      00020C 86 83            [24]  856 	mov	dph,@r0
      00020E 08               [12]  857 	inc	r0
      00020F 86 F0            [24]  858 	mov	b,@r0
      000211 12r00r00         [24]  859 	lcall	__gptrget
      000214 FE               [12]  860 	mov	r6,a
      000215 A3               [24]  861 	inc	dptr
      000216 12r00r00         [24]  862 	lcall	__gptrget
      000219 FF               [12]  863 	mov	r7,a
      00021A EE               [12]  864 	mov	a,r6
      00021B 24 37            [12]  865 	add	a,#0x37
      00021D FE               [12]  866 	mov	r6,a
      00021E EF               [12]  867 	mov	a,r7
      00021F 34 FF            [12]  868 	addc	a,#0xff
      000221 FF               [12]  869 	mov	r7,a
      000222 E5*00            [12]  870 	mov	a,_bp
      000224 24 08            [12]  871 	add	a,#0x08
      000226 F8               [12]  872 	mov	r0,a
      000227 86 82            [24]  873 	mov	dpl,@r0
      000229 08               [12]  874 	inc	r0
      00022A 86 83            [24]  875 	mov	dph,@r0
      00022C 08               [12]  876 	inc	r0
      00022D 86 F0            [24]  877 	mov	b,@r0
      00022F EE               [12]  878 	mov	a,r6
      000230 12r00r00         [24]  879 	lcall	__gptrput
      000233 A3               [24]  880 	inc	dptr
      000234 EF               [12]  881 	mov	a,r7
      000235 12r00r00         [24]  882 	lcall	__gptrput
      000238                        883 00110$:
                                    884 ;	walk.c:121: if (g[t->r][t->c] == 0xaau) return 0u;
      000238 A8*00            [24]  885 	mov	r0,_bp
      00023A 08               [12]  886 	inc	r0
      00023B 86 82            [24]  887 	mov	dpl,@r0
      00023D 08               [12]  888 	inc	r0
      00023E 86 83            [24]  889 	mov	dph,@r0
      000240 08               [12]  890 	inc	r0
      000241 86 F0            [24]  891 	mov	b,@r0
      000243 12r00r00         [24]  892 	lcall	__gptrget
      000246 FE               [12]  893 	mov	r6,a
      000247 A3               [24]  894 	inc	dptr
      000248 12r00r00         [24]  895 	lcall	__gptrget
      00024B FF               [12]  896 	mov	r7,a
      00024C C0 06            [24]  897 	push	ar6
      00024E C0 07            [24]  898 	push	ar7
      000250 90 00 C9         [24]  899 	mov	dptr,#0x00c9
      000253 12r00r00         [24]  900 	lcall	__mulint
      000256 AE 82            [24]  901 	mov	r6,dpl
      000258 AF 83            [24]  902 	mov	r7,dph
      00025A 15 81            [12]  903 	dec	sp
      00025C 15 81            [12]  904 	dec	sp
      00025E EE               [12]  905 	mov	a,r6
      00025F 24r00            [12]  906 	add	a,#_g
      000261 FE               [12]  907 	mov	r6,a
      000262 EF               [12]  908 	mov	a,r7
      000263 34s00            [12]  909 	addc	a,#(_g >> 8)
      000265 FF               [12]  910 	mov	r7,a
      000266 E5*00            [12]  911 	mov	a,_bp
      000268 24 08            [12]  912 	add	a,#0x08
      00026A F8               [12]  913 	mov	r0,a
      00026B 86 82            [24]  914 	mov	dpl,@r0
      00026D 08               [12]  915 	inc	r0
      00026E 86 83            [24]  916 	mov	dph,@r0
      000270 08               [12]  917 	inc	r0
      000271 86 F0            [24]  918 	mov	b,@r0
      000273 12r00r00         [24]  919 	lcall	__gptrget
      000276 FC               [12]  920 	mov	r4,a
      000277 A3               [24]  921 	inc	dptr
      000278 12r00r00         [24]  922 	lcall	__gptrget
      00027B FD               [12]  923 	mov	r5,a
      00027C EC               [12]  924 	mov	a,r4
      00027D 2E               [12]  925 	add	a,r6
      00027E F5 82            [12]  926 	mov	dpl,a
      000280 ED               [12]  927 	mov	a,r5
      000281 3F               [12]  928 	addc	a,r7
      000282 F5 83            [12]  929 	mov	dph,a
      000284 E0               [24]  930 	movx	a,@dptr
      000285 FF               [12]  931 	mov	r7,a
      000286 BF AA 05         [24]  932 	cjne	r7,#0xaa,00114$
      000289 75 82 00         [24]  933 	mov	dpl,#0x00
      00028C 80 59            [24]  934 	sjmp	00116$
      00028E                        935 00114$:
                                    936 ;	walk.c:122: else if (g[t->r][t->c] != 0x55u) bang();
      00028E A8*00            [24]  937 	mov	r0,_bp
      000290 08               [12]  938 	inc	r0
      000291 86 82            [24]  939 	mov	dpl,@r0
      000293 08               [12]  940 	inc	r0
      000294 86 83            [24]  941 	mov	dph,@r0
      000296 08               [12]  942 	inc	r0
      000297 86 F0            [24]  943 	mov	b,@r0
      000299 12r00r00         [24]  944 	lcall	__gptrget
      00029C FE               [12]  945 	mov	r6,a
      00029D A3               [24]  946 	inc	dptr
      00029E 12r00r00         [24]  947 	lcall	__gptrget
      0002A1 FF               [12]  948 	mov	r7,a
      0002A2 C0 06            [24]  949 	push	ar6
      0002A4 C0 07            [24]  950 	push	ar7
      0002A6 90 00 C9         [24]  951 	mov	dptr,#0x00c9
      0002A9 12r00r00         [24]  952 	lcall	__mulint
      0002AC AE 82            [24]  953 	mov	r6,dpl
      0002AE AF 83            [24]  954 	mov	r7,dph
      0002B0 15 81            [12]  955 	dec	sp
      0002B2 15 81            [12]  956 	dec	sp
      0002B4 EE               [12]  957 	mov	a,r6
      0002B5 24r00            [12]  958 	add	a,#_g
      0002B7 FE               [12]  959 	mov	r6,a
      0002B8 EF               [12]  960 	mov	a,r7
      0002B9 34s00            [12]  961 	addc	a,#(_g >> 8)
      0002BB FF               [12]  962 	mov	r7,a
      0002BC E5*00            [12]  963 	mov	a,_bp
      0002BE 24 08            [12]  964 	add	a,#0x08
      0002C0 F8               [12]  965 	mov	r0,a
      0002C1 86 82            [24]  966 	mov	dpl,@r0
      0002C3 08               [12]  967 	inc	r0
      0002C4 86 83            [24]  968 	mov	dph,@r0
      0002C6 08               [12]  969 	inc	r0
      0002C7 86 F0            [24]  970 	mov	b,@r0
      0002C9 12r00r00         [24]  971 	lcall	__gptrget
      0002CC FC               [12]  972 	mov	r4,a
      0002CD A3               [24]  973 	inc	dptr
      0002CE 12r00r00         [24]  974 	lcall	__gptrget
      0002D1 FD               [12]  975 	mov	r5,a
      0002D2 EC               [12]  976 	mov	a,r4
      0002D3 2E               [12]  977 	add	a,r6
      0002D4 F5 82            [12]  978 	mov	dpl,a
      0002D6 ED               [12]  979 	mov	a,r5
      0002D7 3F               [12]  980 	addc	a,r7
      0002D8 F5 83            [12]  981 	mov	dph,a
      0002DA E0               [24]  982 	movx	a,@dptr
      0002DB FF               [12]  983 	mov	r7,a
      0002DC BF 55 02         [24]  984 	cjne	r7,#0x55,00148$
      0002DF 80 03            [24]  985 	sjmp	00115$
      0002E1                        986 00148$:
      0002E1 12r00r1A         [24]  987 	lcall	_bang
      0002E4                        988 00115$:
                                    989 ;	walk.c:124: return 1u;
      0002E4 75 82 01         [24]  990 	mov	dpl,#0x01
      0002E7                        991 00116$:
                                    992 ;	walk.c:125: }
      0002E7 85*00 81         [24]  993 	mov	sp,_bp
      0002EA D0*00            [24]  994 	pop	_bp
      0002EC 22               [24]  995 	ret
                                    996 ;------------------------------------------------------------
                                    997 ;Allocation info for local variables in function 'walk'
                                    998 ;------------------------------------------------------------
                                    999 ;nstart                    Allocated to registers 
                                   1000 ;cur                       Allocated to stack - _bp +10
                                   1001 ;t                         Allocated to stack - _bp +14
                                   1002 ;j                         Allocated to stack - _bp +18
                                   1003 ;f                         Allocated to registers r3 
                                   1004 ;sloc0                     Allocated to stack - _bp +1
                                   1005 ;sloc1                     Allocated to stack - _bp +2
                                   1006 ;sloc2                     Allocated to stack - _bp +3
                                   1007 ;sloc3                     Allocated to stack - _bp +17
                                   1008 ;sloc4                     Allocated to stack - _bp +4
                                   1009 ;sloc5                     Allocated to stack - _bp +5
                                   1010 ;sloc6                     Allocated to stack - _bp +6
                                   1011 ;sloc7                     Allocated to stack - _bp +7
                                   1012 ;------------------------------------------------------------
                                   1013 ;	walk.c:127: static void walk(struct node *nstart) {
                                   1014 ;	-----------------------------------------
                                   1015 ;	 function walk
                                   1016 ;	-----------------------------------------
      0002ED                       1017 _walk:
      0002ED C0*00            [24] 1018 	push	_bp
      0002EF E5 81            [12] 1019 	mov	a,sp
      0002F1 F5*00            [12] 1020 	mov	_bp,a
      0002F3 24 12            [12] 1021 	add	a,#0x12
      0002F5 F5 81            [12] 1022 	mov	sp,a
      0002F7 AD 82            [24] 1023 	mov	r5,dpl
      0002F9 AE 83            [24] 1024 	mov	r6,dph
      0002FB AF F0            [24] 1025 	mov	r7,b
                                   1026 ;	walk.c:131: cur = *nstart;
      0002FD E5*00            [12] 1027 	mov	a,_bp
      0002FF 24 0A            [12] 1028 	add	a,#0x0a
      000301 F9               [12] 1029 	mov	r1,a
      000302 FA               [12] 1030 	mov	r2,a
      000303 7B 00            [12] 1031 	mov	r3,#0x00
      000305 7C 40            [12] 1032 	mov	r4,#0x40
      000307 C0 01            [24] 1033 	push	ar1
      000309 74 04            [12] 1034 	mov	a,#0x04
      00030B C0 E0            [24] 1035 	push	acc
      00030D E4               [12] 1036 	clr	a
      00030E C0 E0            [24] 1037 	push	acc
      000310 C0 05            [24] 1038 	push	ar5
      000312 C0 06            [24] 1039 	push	ar6
      000314 C0 07            [24] 1040 	push	ar7
      000316 8A 82            [24] 1041 	mov	dpl,r2
      000318 8B 83            [24] 1042 	mov	dph,r3
      00031A 8C F0            [24] 1043 	mov	b,r4
      00031C 12r00r00         [24] 1044 	lcall	___memcpy
      00031F E5 81            [12] 1045 	mov	a,sp
      000321 24 FB            [12] 1046 	add	a,#0xfb
      000323 F5 81            [12] 1047 	mov	sp,a
      000325 D0 01            [24] 1048 	pop	ar1
                                   1049 ;	walk.c:133: process:
      000327 E5*00            [12] 1050 	mov	a,_bp
      000329 24 06            [12] 1051 	add	a,#0x06
      00032B F8               [12] 1052 	mov	r0,a
      00032C A6 01            [24] 1053 	mov	@r0,ar1
      00032E E5*00            [12] 1054 	mov	a,_bp
      000330 24 0E            [12] 1055 	add	a,#0x0e
      000332 FE               [12] 1056 	mov	r6,a
      000333 E5*00            [12] 1057 	mov	a,_bp
      000335 24 03            [12] 1058 	add	a,#0x03
      000337 F8               [12] 1059 	mov	r0,a
      000338 A6 01            [24] 1060 	mov	@r0,ar1
      00033A E5*00            [12] 1061 	mov	a,_bp
      00033C 24 05            [12] 1062 	add	a,#0x05
      00033E F8               [12] 1063 	mov	r0,a
      00033F A6 01            [24] 1064 	mov	@r0,ar1
      000341 E5*00            [12] 1065 	mov	a,_bp
      000343 24 04            [12] 1066 	add	a,#0x04
      000345 F8               [12] 1067 	mov	r0,a
      000346 A6 06            [24] 1068 	mov	@r0,ar6
      000348 89 02            [24] 1069 	mov	ar2,r1
      00034A A8*00            [24] 1070 	mov	r0,_bp
      00034C 08               [12] 1071 	inc	r0
      00034D A6 06            [24] 1072 	mov	@r0,ar6
      00034F A8*00            [24] 1073 	mov	r0,_bp
      000351 08               [12] 1074 	inc	r0
      000352 08               [12] 1075 	inc	r0
      000353 A6 01            [24] 1076 	mov	@r0,ar1
      000355 74 02            [12] 1077 	mov	a,#0x02
      000357 29               [12] 1078 	add	a,r1
      000358 F8               [12] 1079 	mov	r0,a
      000359                       1080 00101$:
                                   1081 ;	walk.c:134: g[cur.r][cur.c] = 0xaau;
      000359 C0 02            [24] 1082 	push	ar2
      00035B 87 02            [24] 1083 	mov	ar2,@r1
      00035D 09               [12] 1084 	inc	r1
      00035E 87 05            [24] 1085 	mov	ar5,@r1
      000360 19               [12] 1086 	dec	r1
      000361 C0 06            [24] 1087 	push	ar6
      000363 C0 01            [24] 1088 	push	ar1
      000365 C0 00            [24] 1089 	push	ar0
      000367 C0 02            [24] 1090 	push	ar2
      000369 C0 05            [24] 1091 	push	ar5
      00036B 90 00 C9         [24] 1092 	mov	dptr,#0x00c9
      00036E 12r00r00         [24] 1093 	lcall	__mulint
      000371 AA 82            [24] 1094 	mov	r2,dpl
      000373 AD 83            [24] 1095 	mov	r5,dph
      000375 15 81            [12] 1096 	dec	sp
      000377 15 81            [12] 1097 	dec	sp
      000379 D0 00            [24] 1098 	pop	ar0
      00037B D0 01            [24] 1099 	pop	ar1
      00037D EA               [12] 1100 	mov	a,r2
      00037E 24r00            [12] 1101 	add	a,#_g
      000380 FF               [12] 1102 	mov	r7,a
      000381 ED               [12] 1103 	mov	a,r5
      000382 34s00            [12] 1104 	addc	a,#(_g >> 8)
      000384 FC               [12] 1105 	mov	r4,a
      000385 86 02            [24] 1106 	mov	ar2,@r0
      000387 08               [12] 1107 	inc	r0
      000388 86 05            [24] 1108 	mov	ar5,@r0
      00038A 18               [12] 1109 	dec	r0
      00038B EA               [12] 1110 	mov	a,r2
      00038C 2F               [12] 1111 	add	a,r7
      00038D F5 82            [12] 1112 	mov	dpl,a
      00038F ED               [12] 1113 	mov	a,r5
      000390 3C               [12] 1114 	addc	a,r4
      000391 F5 83            [12] 1115 	mov	dph,a
      000393 74 AA            [12] 1116 	mov	a,#0xaa
      000395 F0               [24] 1117 	movx	@dptr,a
                                   1118 ;	walk.c:136: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000396 86 02            [24] 1119 	mov	ar2,@r0
      000398 08               [12] 1120 	inc	r0
      000399 86 05            [24] 1121 	mov	ar5,@r0
      00039B 18               [12] 1122 	dec	r0
      00039C 74 01            [12] 1123 	mov	a,#0x01
      00039E 2A               [12] 1124 	add	a,r2
      00039F FF               [12] 1125 	mov	r7,a
      0003A0 E4               [12] 1126 	clr	a
      0003A1 3D               [12] 1127 	addc	a,r5
      0003A2 FC               [12] 1128 	mov	r4,a
      0003A3 87 02            [24] 1129 	mov	ar2,@r1
      0003A5 09               [12] 1130 	inc	r1
      0003A6 87 05            [24] 1131 	mov	ar5,@r1
      0003A8 19               [12] 1132 	dec	r1
      0003A9 74 04            [12] 1133 	mov	a,#0x04
      0003AB 2A               [12] 1134 	add	a,r2
      0003AC FA               [12] 1135 	mov	r2,a
      0003AD E4               [12] 1136 	clr	a
      0003AE 3D               [12] 1137 	addc	a,r5
      0003AF FD               [12] 1138 	mov	r5,a
      0003B0 C0 02            [24] 1139 	push	ar2
      0003B2 C0 01            [24] 1140 	push	ar1
      0003B4 C0 00            [24] 1141 	push	ar0
      0003B6 C0 07            [24] 1142 	push	ar7
      0003B8 C0 04            [24] 1143 	push	ar4
      0003BA C0 02            [24] 1144 	push	ar2
      0003BC C0 05            [24] 1145 	push	ar5
      0003BE 74r0D            [12] 1146 	mov	a,#___str_1
      0003C0 C0 E0            [24] 1147 	push	acc
      0003C2 74s00            [12] 1148 	mov	a,#(___str_1 >> 8)
      0003C4 C0 E0            [24] 1149 	push	acc
      0003C6 74 80            [12] 1150 	mov	a,#0x80
      0003C8 C0 E0            [24] 1151 	push	acc
      0003CA 12r00r00         [24] 1152 	lcall	_printf
      0003CD E5 81            [12] 1153 	mov	a,sp
      0003CF 24 F9            [12] 1154 	add	a,#0xf9
      0003D1 F5 81            [12] 1155 	mov	sp,a
                                   1156 ;	walk.c:137: setOE(OE76_MASK7);
      0003D3 75 82 80         [24] 1157 	mov	dpl,#0x80
      0003D6 12r00r27         [24] 1158 	lcall	_setOE
      0003D9 D0 00            [24] 1159 	pop	ar0
      0003DB D0 01            [24] 1160 	pop	ar1
      0003DD D0 02            [24] 1161 	pop	ar2
      0003DF D0 06            [24] 1162 	pop	ar6
                                   1163 ;	walk.c:165: return;
      0003E1 D0 02            [24] 1164 	pop	ar2
                                   1165 ;	walk.c:139: next:
      0003E3                       1166 00102$:
                                   1167 ;	walk.c:140: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003E3 C0 02            [24] 1168 	push	ar2
      0003E5 86 07            [24] 1169 	mov	ar7,@r0
      0003E7 08               [12] 1170 	inc	r0
      0003E8 86 04            [24] 1171 	mov	ar4,@r0
      0003EA 18               [12] 1172 	dec	r0
      0003EB 87 02            [24] 1173 	mov	ar2,@r1
      0003ED 09               [12] 1174 	inc	r1
      0003EE 87 05            [24] 1175 	mov	ar5,@r1
      0003F0 19               [12] 1176 	dec	r1
      0003F1 C0 06            [24] 1177 	push	ar6
      0003F3 C0 02            [24] 1178 	push	ar2
      0003F5 C0 01            [24] 1179 	push	ar1
      0003F7 C0 00            [24] 1180 	push	ar0
      0003F9 C0 07            [24] 1181 	push	ar7
      0003FB C0 04            [24] 1182 	push	ar4
      0003FD C0 02            [24] 1183 	push	ar2
      0003FF C0 05            [24] 1184 	push	ar5
      000401 90rBCr70         [24] 1185 	mov	dptr,#_sp
      000404 E0               [24] 1186 	movx	a,@dptr
      000405 C0 E0            [24] 1187 	push	acc
      000407 A3               [24] 1188 	inc	dptr
      000408 E0               [24] 1189 	movx	a,@dptr
      000409 C0 E0            [24] 1190 	push	acc
      00040B 74r17            [12] 1191 	mov	a,#___str_2
      00040D C0 E0            [24] 1192 	push	acc
      00040F 74s00            [12] 1193 	mov	a,#(___str_2 >> 8)
      000411 C0 E0            [24] 1194 	push	acc
      000413 74 80            [12] 1195 	mov	a,#0x80
      000415 C0 E0            [24] 1196 	push	acc
      000417 12r00r00         [24] 1197 	lcall	_printf
      00041A E5 81            [12] 1198 	mov	a,sp
      00041C 24 F7            [12] 1199 	add	a,#0xf7
      00041E F5 81            [12] 1200 	mov	sp,a
                                   1201 ;	walk.c:141: unsetOE(OE76_MASK7 | OE76_MASK6);
      000420 75 82 C0         [24] 1202 	mov	dpl,#0xc0
      000423 12r00r3A         [24] 1203 	lcall	_unsetOE
      000426 D0 00            [24] 1204 	pop	ar0
      000428 D0 01            [24] 1205 	pop	ar1
      00042A D0 02            [24] 1206 	pop	ar2
      00042C D0 06            [24] 1207 	pop	ar6
                                   1208 ;	walk.c:143: for (j = 0u, f = 0u; j < NMAX; j++) {
      00042E 7B 00            [12] 1209 	mov	r3,#0x00
      000430 C0 00            [24] 1210 	push	ar0
      000432 E5*00            [12] 1211 	mov	a,_bp
      000434 24 12            [12] 1212 	add	a,#0x12
      000436 F8               [12] 1213 	mov	r0,a
      000437 76 00            [12] 1214 	mov	@r0,#0x00
      000439 D0 00            [24] 1215 	pop	ar0
                                   1216 ;	walk.c:165: return;
      00043B D0 02            [24] 1217 	pop	ar2
                                   1218 ;	walk.c:143: for (j = 0u, f = 0u; j < NMAX; j++) {
      00043D                       1219 00119$:
      00043D C0 00            [24] 1220 	push	ar0
      00043F E5*00            [12] 1221 	mov	a,_bp
      000441 24 12            [12] 1222 	add	a,#0x12
      000443 F8               [12] 1223 	mov	r0,a
      000444 B6 10 00         [24] 1224 	cjne	@r0,#0x10,00159$
      000447                       1225 00159$:
      000447 D0 00            [24] 1226 	pop	ar0
      000449 50 7A            [24] 1227 	jnc	00106$
                                   1228 ;	walk.c:144: if (!update(&t, &cur, j)) continue;
      00044B C0 02            [24] 1229 	push	ar2
      00044D C0 00            [24] 1230 	push	ar0
      00044F E5*00            [12] 1231 	mov	a,_bp
      000451 24 06            [12] 1232 	add	a,#0x06
      000453 F8               [12] 1233 	mov	r0,a
      000454 C0 01            [24] 1234 	push	ar1
      000456 E5*00            [12] 1235 	mov	a,_bp
      000458 24 07            [12] 1236 	add	a,#0x07
      00045A F9               [12] 1237 	mov	r1,a
      00045B E6               [12] 1238 	mov	a,@r0
      00045C F7               [12] 1239 	mov	@r1,a
      00045D 09               [12] 1240 	inc	r1
      00045E 77 00            [12] 1241 	mov	@r1,#0x00
      000460 09               [12] 1242 	inc	r1
      000461 77 40            [12] 1243 	mov	@r1,#0x40
      000463 D0 01            [24] 1244 	pop	ar1
      000465 D0 00            [24] 1245 	pop	ar0
      000467 8E 04            [24] 1246 	mov	ar4,r6
      000469 7D 00            [12] 1247 	mov	r5,#0x00
      00046B 7F 40            [12] 1248 	mov	r7,#0x40
      00046D C0 06            [24] 1249 	push	ar6
      00046F C0 03            [24] 1250 	push	ar3
      000471 C0 02            [24] 1251 	push	ar2
      000473 C0 01            [24] 1252 	push	ar1
      000475 C0 00            [24] 1253 	push	ar0
      000477 85 00 F0         [24] 1254 	mov	b,ar0
      00047A E5*00            [12] 1255 	mov	a,_bp
      00047C 24 12            [12] 1256 	add	a,#0x12
      00047E F8               [12] 1257 	mov	r0,a
      00047F E6               [12] 1258 	mov	a,@r0
      000480 C0 E0            [24] 1259 	push	acc
      000482 A8 F0            [24] 1260 	mov	r0,b
      000484 85 00 F0         [24] 1261 	mov	b,ar0
      000487 E5*00            [12] 1262 	mov	a,_bp
      000489 24 07            [12] 1263 	add	a,#0x07
      00048B F8               [12] 1264 	mov	r0,a
      00048C E6               [12] 1265 	mov	a,@r0
      00048D C0 E0            [24] 1266 	push	acc
      00048F 08               [12] 1267 	inc	r0
      000490 E6               [12] 1268 	mov	a,@r0
      000491 C0 E0            [24] 1269 	push	acc
      000493 08               [12] 1270 	inc	r0
      000494 E6               [12] 1271 	mov	a,@r0
      000495 C0 E0            [24] 1272 	push	acc
      000497 8C 82            [24] 1273 	mov	dpl,r4
      000499 8D 83            [24] 1274 	mov	dph,r5
      00049B 8F F0            [24] 1275 	mov	b,r7
      00049D 12r00r60         [24] 1276 	lcall	_update
      0004A0 AF 82            [24] 1277 	mov	r7,dpl
      0004A2 E5 81            [12] 1278 	mov	a,sp
      0004A4 24 FC            [12] 1279 	add	a,#0xfc
      0004A6 F5 81            [12] 1280 	mov	sp,a
      0004A8 D0 00            [24] 1281 	pop	ar0
      0004AA D0 01            [24] 1282 	pop	ar1
      0004AC D0 02            [24] 1283 	pop	ar2
      0004AE D0 03            [24] 1284 	pop	ar3
      0004B0 D0 06            [24] 1285 	pop	ar6
      0004B2 D0 02            [24] 1286 	pop	ar2
      0004B4 EF               [12] 1287 	mov	a,r7
      0004B5 60 01            [24] 1288 	jz	00105$
                                   1289 ;	walk.c:145: f++;
      0004B7 0B               [12] 1290 	inc	r3
      0004B8                       1291 00105$:
                                   1292 ;	walk.c:143: for (j = 0u, f = 0u; j < NMAX; j++) {
      0004B8 C0 00            [24] 1293 	push	ar0
      0004BA E5*00            [12] 1294 	mov	a,_bp
      0004BC 24 12            [12] 1295 	add	a,#0x12
      0004BE F8               [12] 1296 	mov	r0,a
      0004BF 06               [12] 1297 	inc	@r0
      0004C0 D0 00            [24] 1298 	pop	ar0
      0004C2 02r04r3D         [24] 1299 	ljmp	00119$
      0004C5                       1300 00106$:
                                   1301 ;	walk.c:148: if (f) {
      0004C5 EB               [12] 1302 	mov	a,r3
      0004C6 70 03            [24] 1303 	jnz	00162$
      0004C8 02r05rDF         [24] 1304 	ljmp	00115$
      0004CB                       1305 00162$:
                                   1306 ;	walk.c:149: while (1) {
      0004CB                       1307 00112$:
                                   1308 ;	walk.c:150: j = (uint8_t)(rand() % NMAX);
      0004CB C0 02            [24] 1309 	push	ar2
      0004CD C0 06            [24] 1310 	push	ar6
      0004CF C0 02            [24] 1311 	push	ar2
      0004D1 C0 01            [24] 1312 	push	ar1
      0004D3 C0 00            [24] 1313 	push	ar0
      0004D5 12r00r00         [24] 1314 	lcall	_rand
      0004D8 AD 82            [24] 1315 	mov	r5,dpl
      0004DA D0 00            [24] 1316 	pop	ar0
      0004DC D0 01            [24] 1317 	pop	ar1
      0004DE D0 02            [24] 1318 	pop	ar2
      0004E0 D0 06            [24] 1319 	pop	ar6
      0004E2 53 05 0F         [24] 1320 	anl	ar5,#0x0f
      0004E5 8D 04            [24] 1321 	mov	ar4,r5
                                   1322 ;	walk.c:151: if (!update(&t, &cur, j)) continue;
      0004E7 C0 00            [24] 1323 	push	ar0
      0004E9 E5*00            [12] 1324 	mov	a,_bp
      0004EB 24 05            [12] 1325 	add	a,#0x05
      0004ED F8               [12] 1326 	mov	r0,a
      0004EE C0 01            [24] 1327 	push	ar1
      0004F0 E5*00            [12] 1328 	mov	a,_bp
      0004F2 24 07            [12] 1329 	add	a,#0x07
      0004F4 F9               [12] 1330 	mov	r1,a
      0004F5 E6               [12] 1331 	mov	a,@r0
      0004F6 F7               [12] 1332 	mov	@r1,a
      0004F7 09               [12] 1333 	inc	r1
      0004F8 77 00            [12] 1334 	mov	@r1,#0x00
      0004FA 09               [12] 1335 	inc	r1
      0004FB 77 40            [12] 1336 	mov	@r1,#0x40
      0004FD D0 01            [24] 1337 	pop	ar1
      0004FF E5*00            [12] 1338 	mov	a,_bp
      000501 24 04            [12] 1339 	add	a,#0x04
      000503 F8               [12] 1340 	mov	r0,a
      000504 86 02            [24] 1341 	mov	ar2,@r0
      000506 7D 00            [12] 1342 	mov	r5,#0x00
      000508 7F 40            [12] 1343 	mov	r7,#0x40
      00050A D0 00            [24] 1344 	pop	ar0
      00050C C0 06            [24] 1345 	push	ar6
      00050E C0 02            [24] 1346 	push	ar2
      000510 C0 01            [24] 1347 	push	ar1
      000512 C0 00            [24] 1348 	push	ar0
      000514 C0 04            [24] 1349 	push	ar4
      000516 85 00 F0         [24] 1350 	mov	b,ar0
      000519 E5*00            [12] 1351 	mov	a,_bp
      00051B 24 07            [12] 1352 	add	a,#0x07
      00051D F8               [12] 1353 	mov	r0,a
      00051E E6               [12] 1354 	mov	a,@r0
      00051F C0 E0            [24] 1355 	push	acc
      000521 08               [12] 1356 	inc	r0
      000522 E6               [12] 1357 	mov	a,@r0
      000523 C0 E0            [24] 1358 	push	acc
      000525 08               [12] 1359 	inc	r0
      000526 E6               [12] 1360 	mov	a,@r0
      000527 C0 E0            [24] 1361 	push	acc
      000529 8A 82            [24] 1362 	mov	dpl,r2
      00052B 8D 83            [24] 1363 	mov	dph,r5
      00052D 8F F0            [24] 1364 	mov	b,r7
      00052F 12r00r60         [24] 1365 	lcall	_update
      000532 AF 82            [24] 1366 	mov	r7,dpl
      000534 E5 81            [12] 1367 	mov	a,sp
      000536 24 FC            [12] 1368 	add	a,#0xfc
      000538 F5 81            [12] 1369 	mov	sp,a
      00053A D0 00            [24] 1370 	pop	ar0
      00053C D0 01            [24] 1371 	pop	ar1
      00053E D0 02            [24] 1372 	pop	ar2
      000540 D0 06            [24] 1373 	pop	ar6
      000542 D0 02            [24] 1374 	pop	ar2
      000544 EF               [12] 1375 	mov	a,r7
      000545 60 84            [24] 1376 	jz	00112$
                                   1377 ;	walk.c:152: if (!stpush(&cur)) bang();
      000547 8A 04            [24] 1378 	mov	ar4,r2
      000549 7D 00            [12] 1379 	mov	r5,#0x00
      00054B 7F 40            [12] 1380 	mov	r7,#0x40
      00054D 8C 82            [24] 1381 	mov	dpl,r4
      00054F 8D 83            [24] 1382 	mov	dph,r5
      000551 8F F0            [24] 1383 	mov	b,r7
      000553 C0 06            [24] 1384 	push	ar6
      000555 C0 02            [24] 1385 	push	ar2
      000557 C0 01            [24] 1386 	push	ar1
      000559 C0 00            [24] 1387 	push	ar0
      00055B 12r0Ar49         [24] 1388 	lcall	_stpush
      00055E E5 82            [12] 1389 	mov	a,dpl
      000560 D0 00            [24] 1390 	pop	ar0
      000562 D0 01            [24] 1391 	pop	ar1
      000564 D0 02            [24] 1392 	pop	ar2
      000566 D0 06            [24] 1393 	pop	ar6
      000568 70 13            [24] 1394 	jnz	00110$
      00056A C0 06            [24] 1395 	push	ar6
      00056C C0 02            [24] 1396 	push	ar2
      00056E C0 01            [24] 1397 	push	ar1
      000570 C0 00            [24] 1398 	push	ar0
      000572 12r00r1A         [24] 1399 	lcall	_bang
      000575 D0 00            [24] 1400 	pop	ar0
      000577 D0 01            [24] 1401 	pop	ar1
      000579 D0 02            [24] 1402 	pop	ar2
      00057B D0 06            [24] 1403 	pop	ar6
      00057D                       1404 00110$:
                                   1405 ;	walk.c:153: cur = t;
      00057D C0 02            [24] 1406 	push	ar2
      00057F C0 00            [24] 1407 	push	ar0
      000581 A8*00            [24] 1408 	mov	r0,_bp
      000583 08               [12] 1409 	inc	r0
      000584 C0 01            [24] 1410 	push	ar1
      000586 E5*00            [12] 1411 	mov	a,_bp
      000588 24 07            [12] 1412 	add	a,#0x07
      00058A F9               [12] 1413 	mov	r1,a
      00058B E6               [12] 1414 	mov	a,@r0
      00058C F7               [12] 1415 	mov	@r1,a
      00058D 09               [12] 1416 	inc	r1
      00058E 77 00            [12] 1417 	mov	@r1,#0x00
      000590 09               [12] 1418 	inc	r1
      000591 77 40            [12] 1419 	mov	@r1,#0x40
      000593 D0 01            [24] 1420 	pop	ar1
      000595 A8*00            [24] 1421 	mov	r0,_bp
      000597 08               [12] 1422 	inc	r0
      000598 08               [12] 1423 	inc	r0
      000599 86 02            [24] 1424 	mov	ar2,@r0
      00059B 7B 00            [12] 1425 	mov	r3,#0x00
      00059D 7F 40            [12] 1426 	mov	r7,#0x40
      00059F D0 00            [24] 1427 	pop	ar0
      0005A1 C0 06            [24] 1428 	push	ar6
      0005A3 C0 02            [24] 1429 	push	ar2
      0005A5 C0 01            [24] 1430 	push	ar1
      0005A7 C0 00            [24] 1431 	push	ar0
      0005A9 74 04            [12] 1432 	mov	a,#0x04
      0005AB C0 E0            [24] 1433 	push	acc
      0005AD E4               [12] 1434 	clr	a
      0005AE C0 E0            [24] 1435 	push	acc
      0005B0 85 00 F0         [24] 1436 	mov	b,ar0
      0005B3 E5*00            [12] 1437 	mov	a,_bp
      0005B5 24 07            [12] 1438 	add	a,#0x07
      0005B7 F8               [12] 1439 	mov	r0,a
      0005B8 E6               [12] 1440 	mov	a,@r0
      0005B9 C0 E0            [24] 1441 	push	acc
      0005BB 08               [12] 1442 	inc	r0
      0005BC E6               [12] 1443 	mov	a,@r0
      0005BD C0 E0            [24] 1444 	push	acc
      0005BF 08               [12] 1445 	inc	r0
      0005C0 E6               [12] 1446 	mov	a,@r0
      0005C1 C0 E0            [24] 1447 	push	acc
      0005C3 8A 82            [24] 1448 	mov	dpl,r2
      0005C5 8B 83            [24] 1449 	mov	dph,r3
      0005C7 8F F0            [24] 1450 	mov	b,r7
      0005C9 12r00r00         [24] 1451 	lcall	___memcpy
      0005CC E5 81            [12] 1452 	mov	a,sp
      0005CE 24 FB            [12] 1453 	add	a,#0xfb
      0005D0 F5 81            [12] 1454 	mov	sp,a
      0005D2 D0 00            [24] 1455 	pop	ar0
      0005D4 D0 01            [24] 1456 	pop	ar1
      0005D6 D0 02            [24] 1457 	pop	ar2
      0005D8 D0 06            [24] 1458 	pop	ar6
                                   1459 ;	walk.c:154: goto process;
      0005DA D0 02            [24] 1460 	pop	ar2
      0005DC 02r03r59         [24] 1461 	ljmp	00101$
      0005DF                       1462 00115$:
                                   1463 ;	walk.c:158: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005DF 86 05            [24] 1464 	mov	ar5,@r0
      0005E1 08               [12] 1465 	inc	r0
      0005E2 86 07            [24] 1466 	mov	ar7,@r0
      0005E4 18               [12] 1467 	dec	r0
      0005E5 0D               [12] 1468 	inc	r5
      0005E6 BD 00 01         [24] 1469 	cjne	r5,#0x00,00165$
      0005E9 0F               [12] 1470 	inc	r7
      0005EA                       1471 00165$:
      0005EA 87 03            [24] 1472 	mov	ar3,@r1
      0005EC 09               [12] 1473 	inc	r1
      0005ED 87 04            [24] 1474 	mov	ar4,@r1
      0005EF 19               [12] 1475 	dec	r1
      0005F0 74 04            [12] 1476 	mov	a,#0x04
      0005F2 2B               [12] 1477 	add	a,r3
      0005F3 FB               [12] 1478 	mov	r3,a
      0005F4 E4               [12] 1479 	clr	a
      0005F5 3C               [12] 1480 	addc	a,r4
      0005F6 FC               [12] 1481 	mov	r4,a
      0005F7 C0 06            [24] 1482 	push	ar6
      0005F9 C0 02            [24] 1483 	push	ar2
      0005FB C0 01            [24] 1484 	push	ar1
      0005FD C0 00            [24] 1485 	push	ar0
      0005FF C0 05            [24] 1486 	push	ar5
      000601 C0 07            [24] 1487 	push	ar7
      000603 C0 03            [24] 1488 	push	ar3
      000605 C0 04            [24] 1489 	push	ar4
      000607 74r2A            [12] 1490 	mov	a,#___str_3
      000609 C0 E0            [24] 1491 	push	acc
      00060B 74s00            [12] 1492 	mov	a,#(___str_3 >> 8)
      00060D C0 E0            [24] 1493 	push	acc
      00060F 74 80            [12] 1494 	mov	a,#0x80
      000611 C0 E0            [24] 1495 	push	acc
      000613 12r00r00         [24] 1496 	lcall	_printf
      000616 E5 81            [12] 1497 	mov	a,sp
      000618 24 F9            [12] 1498 	add	a,#0xf9
      00061A F5 81            [12] 1499 	mov	sp,a
                                   1500 ;	walk.c:159: setOE(OE76_MASK6);
      00061C 75 82 40         [24] 1501 	mov	dpl,#0x40
      00061F 12r00r27         [24] 1502 	lcall	_setOE
      000622 D0 00            [24] 1503 	pop	ar0
      000624 D0 01            [24] 1504 	pop	ar1
      000626 D0 02            [24] 1505 	pop	ar2
      000628 D0 06            [24] 1506 	pop	ar6
                                   1507 ;	walk.c:161: if (stpop(&cur)) goto next;
      00062A C0 00            [24] 1508 	push	ar0
      00062C E5*00            [12] 1509 	mov	a,_bp
      00062E 24 03            [12] 1510 	add	a,#0x03
      000630 F8               [12] 1511 	mov	r0,a
      000631 86 04            [24] 1512 	mov	ar4,@r0
      000633 7D 00            [12] 1513 	mov	r5,#0x00
      000635 7F 40            [12] 1514 	mov	r7,#0x40
      000637 D0 00            [24] 1515 	pop	ar0
      000639 8C 82            [24] 1516 	mov	dpl,r4
      00063B 8D 83            [24] 1517 	mov	dph,r5
      00063D 8F F0            [24] 1518 	mov	b,r7
      00063F C0 06            [24] 1519 	push	ar6
      000641 C0 02            [24] 1520 	push	ar2
      000643 C0 01            [24] 1521 	push	ar1
      000645 C0 00            [24] 1522 	push	ar0
      000647 12r0ArAA         [24] 1523 	lcall	_stpop
      00064A E5 82            [12] 1524 	mov	a,dpl
      00064C D0 00            [24] 1525 	pop	ar0
      00064E D0 01            [24] 1526 	pop	ar1
      000650 D0 02            [24] 1527 	pop	ar2
      000652 D0 06            [24] 1528 	pop	ar6
      000654 60 03            [24] 1529 	jz	00166$
      000656 02r03rE3         [24] 1530 	ljmp	00102$
      000659                       1531 00166$:
                                   1532 ;	walk.c:163: unsetOE(OE76_MASK7 | OE76_MASK6);
      000659 75 82 C0         [24] 1533 	mov	dpl,#0xc0
      00065C 12r00r3A         [24] 1534 	lcall	_unsetOE
                                   1535 ;	walk.c:165: return;
                                   1536 ;	walk.c:166: }
      00065F 85*00 81         [24] 1537 	mov	sp,_bp
      000662 D0*00            [24] 1538 	pop	_bp
      000664 22               [24] 1539 	ret
                                   1540 ;------------------------------------------------------------
                                   1541 ;Allocation info for local variables in function 'main'
                                   1542 ;------------------------------------------------------------
                                   1543 ;initial                   Allocated to stack - _bp +7
                                   1544 ;N                         Allocated to stack - _bp +11
                                   1545 ;i                         Allocated to stack - _bp +5
                                   1546 ;j                         Allocated to registers r2 r6 
                                   1547 ;sloc0                     Allocated to stack - _bp +1
                                   1548 ;sloc1                     Allocated to stack - _bp +3
                                   1549 ;sloc2                     Allocated to stack - _bp +15
                                   1550 ;------------------------------------------------------------
                                   1551 ;	walk.c:168: void main(void) {
                                   1552 ;	-----------------------------------------
                                   1553 ;	 function main
                                   1554 ;	-----------------------------------------
      000665                       1555 _main:
      000665 C0*00            [24] 1556 	push	_bp
      000667 E5 81            [12] 1557 	mov	a,sp
      000669 F5*00            [12] 1558 	mov	_bp,a
      00066B 24 0C            [12] 1559 	add	a,#0x0c
      00066D F5 81            [12] 1560 	mov	sp,a
                                   1561 ;	walk.c:173: i0 = 1u;
      00066F 78r00            [12] 1562 	mov	r0,#_i0
      000671 76 01            [12] 1563 	mov	@r0,#0x01
                                   1564 ;	walk.c:175: P1_7 = 1;
                                   1565 ;	assignBit
      000673 D2 97            [12] 1566 	setb	_P1_7
                                   1567 ;	walk.c:176: IT0 = 1;
                                   1568 ;	assignBit
      000675 D2 88            [12] 1569 	setb	_IT0
                                   1570 ;	walk.c:177: EX0 = 1;
                                   1571 ;	assignBit
      000677 D2 A8            [12] 1572 	setb	_EX0
                                   1573 ;	walk.c:178: EA = 1;
                                   1574 ;	assignBit
      000679 D2 AF            [12] 1575 	setb	_EA
                                   1576 ;	walk.c:180: srand(RND);
      00067B 90 80 00         [24] 1577 	mov	dptr,#_RND
      00067E E0               [24] 1578 	movx	a,@dptr
      00067F FE               [12] 1579 	mov	r6,a
      000680 A3               [24] 1580 	inc	dptr
      000681 E0               [24] 1581 	movx	a,@dptr
      000682 FF               [12] 1582 	mov	r7,a
      000683 8E 82            [24] 1583 	mov	dpl,r6
      000685 8F 83            [24] 1584 	mov	dph,r7
      000687 12r00r00         [24] 1585 	lcall	_srand
                                   1586 ;	walk.c:181: stinit();
      00068A 12r0Ar40         [24] 1587 	lcall	_stinit
                                   1588 ;	walk.c:183: puts("\033[2J\033[?25l");
      00068D 90r00r34         [24] 1589 	mov	dptr,#___str_4
      000690 75 F0 80         [24] 1590 	mov	b,#0x80
      000693 12r00r00         [24] 1591 	lcall	_puts
                                   1592 ;	walk.c:185: while (i0) {
      000696 E5*00            [12] 1593 	mov	a,_bp
      000698 24 07            [12] 1594 	add	a,#0x07
      00069A F9               [12] 1595 	mov	r1,a
      00069B FF               [12] 1596 	mov	r7,a
      00069C E5*00            [12] 1597 	mov	a,_bp
      00069E 24 0B            [12] 1598 	add	a,#0x0b
      0006A0 F8               [12] 1599 	mov	r0,a
      0006A1 E4               [12] 1600 	clr	a
      0006A2 F6               [12] 1601 	mov	@r0,a
      0006A3 08               [12] 1602 	inc	r0
      0006A4 F6               [12] 1603 	mov	@r0,a
      0006A5                       1604 00108$:
      0006A5 78r00            [12] 1605 	mov	r0,#_i0
      0006A7 E6               [12] 1606 	mov	a,@r0
      0006A8 70 03            [24] 1607 	jnz	00182$
      0006AA 02r0Ar2C         [24] 1608 	ljmp	00110$
      0006AD                       1609 00182$:
                                   1610 ;	walk.c:186: for (i = 0; i < ROWS; i++)
      0006AD 7B 00            [12] 1611 	mov	r3,#0x00
      0006AF 7C 00            [12] 1612 	mov	r4,#0x00
      0006B1 A8*00            [24] 1613 	mov	r0,_bp
      0006B3 08               [12] 1614 	inc	r0
      0006B4 E4               [12] 1615 	clr	a
      0006B5 F6               [12] 1616 	mov	@r0,a
      0006B6 08               [12] 1617 	inc	r0
      0006B7 F6               [12] 1618 	mov	@r0,a
                                   1619 ;	walk.c:187: for (j = 0; j < COLS; j++)
      0006B8                       1620 00125$:
      0006B8 A8*00            [24] 1621 	mov	r0,_bp
      0006BA 08               [12] 1622 	inc	r0
      0006BB C0 01            [24] 1623 	push	ar1
      0006BD E5*00            [12] 1624 	mov	a,_bp
      0006BF 24 03            [12] 1625 	add	a,#0x03
      0006C1 F9               [12] 1626 	mov	r1,a
      0006C2 E6               [12] 1627 	mov	a,@r0
      0006C3 24r00            [12] 1628 	add	a,#_g
      0006C5 F7               [12] 1629 	mov	@r1,a
      0006C6 08               [12] 1630 	inc	r0
      0006C7 E6               [12] 1631 	mov	a,@r0
      0006C8 34s00            [12] 1632 	addc	a,#(_g >> 8)
      0006CA 09               [12] 1633 	inc	r1
      0006CB F7               [12] 1634 	mov	@r1,a
      0006CC D0 01            [24] 1635 	pop	ar1
      0006CE 7A 00            [12] 1636 	mov	r2,#0x00
      0006D0 7E 00            [12] 1637 	mov	r6,#0x00
      0006D2                       1638 00112$:
                                   1639 ;	walk.c:188: g[i][j] = 0x55u;
      0006D2 E5*00            [12] 1640 	mov	a,_bp
      0006D4 24 03            [12] 1641 	add	a,#0x03
      0006D6 F8               [12] 1642 	mov	r0,a
      0006D7 EA               [12] 1643 	mov	a,r2
      0006D8 26               [12] 1644 	add	a,@r0
      0006D9 F5 82            [12] 1645 	mov	dpl,a
      0006DB EE               [12] 1646 	mov	a,r6
      0006DC 08               [12] 1647 	inc	r0
      0006DD 36               [12] 1648 	addc	a,@r0
      0006DE F5 83            [12] 1649 	mov	dph,a
      0006E0 74 55            [12] 1650 	mov	a,#0x55
      0006E2 F0               [24] 1651 	movx	@dptr,a
                                   1652 ;	walk.c:187: for (j = 0; j < COLS; j++)
      0006E3 0A               [12] 1653 	inc	r2
      0006E4 BA 00 01         [24] 1654 	cjne	r2,#0x00,00183$
      0006E7 0E               [12] 1655 	inc	r6
      0006E8                       1656 00183$:
      0006E8 C3               [12] 1657 	clr	c
      0006E9 EA               [12] 1658 	mov	a,r2
      0006EA 94 C9            [12] 1659 	subb	a,#0xc9
      0006EC EE               [12] 1660 	mov	a,r6
      0006ED 64 80            [12] 1661 	xrl	a,#0x80
      0006EF 94 80            [12] 1662 	subb	a,#0x80
      0006F1 40 DF            [24] 1663 	jc	00112$
                                   1664 ;	walk.c:186: for (i = 0; i < ROWS; i++)
      0006F3 A8*00            [24] 1665 	mov	r0,_bp
      0006F5 08               [12] 1666 	inc	r0
      0006F6 74 C9            [12] 1667 	mov	a,#0xc9
      0006F8 26               [12] 1668 	add	a,@r0
      0006F9 F6               [12] 1669 	mov	@r0,a
      0006FA E4               [12] 1670 	clr	a
      0006FB 08               [12] 1671 	inc	r0
      0006FC 36               [12] 1672 	addc	a,@r0
      0006FD F6               [12] 1673 	mov	@r0,a
      0006FE 0B               [12] 1674 	inc	r3
      0006FF BB 00 01         [24] 1675 	cjne	r3,#0x00,00185$
      000702 0C               [12] 1676 	inc	r4
      000703                       1677 00185$:
      000703 C3               [12] 1678 	clr	c
      000704 EB               [12] 1679 	mov	a,r3
      000705 94 30            [12] 1680 	subb	a,#0x30
      000707 EC               [12] 1681 	mov	a,r4
      000708 64 80            [12] 1682 	xrl	a,#0x80
      00070A 94 80            [12] 1683 	subb	a,#0x80
      00070C 40 AA            [24] 1684 	jc	00125$
                                   1685 ;	walk.c:190: initial.r = rand() % ROWS;
      00070E E5*00            [12] 1686 	mov	a,_bp
      000710 24 07            [12] 1687 	add	a,#0x07
      000712 F8               [12] 1688 	mov	r0,a
      000713 C0 07            [24] 1689 	push	ar7
      000715 C0 01            [24] 1690 	push	ar1
      000717 C0 00            [24] 1691 	push	ar0
      000719 12r00r00         [24] 1692 	lcall	_rand
      00071C AD 82            [24] 1693 	mov	r5,dpl
      00071E AE 83            [24] 1694 	mov	r6,dph
      000720 74 30            [12] 1695 	mov	a,#0x30
      000722 C0 E0            [24] 1696 	push	acc
      000724 E4               [12] 1697 	clr	a
      000725 C0 E0            [24] 1698 	push	acc
      000727 8D 82            [24] 1699 	mov	dpl,r5
      000729 8E 83            [24] 1700 	mov	dph,r6
      00072B 12r00r00         [24] 1701 	lcall	__modsint
      00072E AD 82            [24] 1702 	mov	r5,dpl
      000730 AE 83            [24] 1703 	mov	r6,dph
      000732 15 81            [12] 1704 	dec	sp
      000734 15 81            [12] 1705 	dec	sp
      000736 D0 00            [24] 1706 	pop	ar0
      000738 D0 01            [24] 1707 	pop	ar1
      00073A A6 05            [24] 1708 	mov	@r0,ar5
      00073C 08               [12] 1709 	inc	r0
      00073D A6 06            [24] 1710 	mov	@r0,ar6
      00073F 18               [12] 1711 	dec	r0
                                   1712 ;	walk.c:191: initial.c = rand() % COLS;
      000740 74 02            [12] 1713 	mov	a,#0x02
      000742 29               [12] 1714 	add	a,r1
      000743 F8               [12] 1715 	mov	r0,a
      000744 C0 01            [24] 1716 	push	ar1
      000746 C0 00            [24] 1717 	push	ar0
      000748 12r00r00         [24] 1718 	lcall	_rand
      00074B AD 82            [24] 1719 	mov	r5,dpl
      00074D AE 83            [24] 1720 	mov	r6,dph
      00074F 74 C9            [12] 1721 	mov	a,#0xc9
      000751 C0 E0            [24] 1722 	push	acc
      000753 E4               [12] 1723 	clr	a
      000754 C0 E0            [24] 1724 	push	acc
      000756 8D 82            [24] 1725 	mov	dpl,r5
      000758 8E 83            [24] 1726 	mov	dph,r6
      00075A 12r00r00         [24] 1727 	lcall	__modsint
      00075D AD 82            [24] 1728 	mov	r5,dpl
      00075F AE 83            [24] 1729 	mov	r6,dph
      000761 15 81            [12] 1730 	dec	sp
      000763 15 81            [12] 1731 	dec	sp
      000765 D0 00            [24] 1732 	pop	ar0
      000767 A6 05            [24] 1733 	mov	@r0,ar5
      000769 08               [12] 1734 	inc	r0
      00076A A6 06            [24] 1735 	mov	@r0,ar6
      00076C 18               [12] 1736 	dec	r0
                                   1737 ;	walk.c:193: puts("\033[2J\033[?25l");
      00076D 90r00r34         [24] 1738 	mov	dptr,#___str_4
      000770 75 F0 80         [24] 1739 	mov	b,#0x80
      000773 C0 00            [24] 1740 	push	ar0
      000775 12r00r00         [24] 1741 	lcall	_puts
      000778 D0 00            [24] 1742 	pop	ar0
      00077A D0 01            [24] 1743 	pop	ar1
                                   1744 ;	walk.c:194: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00077C 86 05            [24] 1745 	mov	ar5,@r0
      00077E 08               [12] 1746 	inc	r0
      00077F 86 06            [24] 1747 	mov	ar6,@r0
      000781 18               [12] 1748 	dec	r0
      000782 87 03            [24] 1749 	mov	ar3,@r1
      000784 09               [12] 1750 	inc	r1
      000785 87 04            [24] 1751 	mov	ar4,@r1
      000787 19               [12] 1752 	dec	r1
      000788 C0 01            [24] 1753 	push	ar1
      00078A C0 05            [24] 1754 	push	ar5
      00078C C0 06            [24] 1755 	push	ar6
      00078E C0 03            [24] 1756 	push	ar3
      000790 C0 04            [24] 1757 	push	ar4
      000792 E5*00            [12] 1758 	mov	a,_bp
      000794 24 0B            [12] 1759 	add	a,#0x0b
      000796 F8               [12] 1760 	mov	r0,a
      000797 E6               [12] 1761 	mov	a,@r0
      000798 C0 E0            [24] 1762 	push	acc
      00079A 08               [12] 1763 	inc	r0
      00079B E6               [12] 1764 	mov	a,@r0
      00079C C0 E0            [24] 1765 	push	acc
      00079E 74r3F            [12] 1766 	mov	a,#___str_5
      0007A0 C0 E0            [24] 1767 	push	acc
      0007A2 74s00            [12] 1768 	mov	a,#(___str_5 >> 8)
      0007A4 C0 E0            [24] 1769 	push	acc
      0007A6 74 80            [12] 1770 	mov	a,#0x80
      0007A8 C0 E0            [24] 1771 	push	acc
      0007AA 12r00r00         [24] 1772 	lcall	_printf
      0007AD E5 81            [12] 1773 	mov	a,sp
      0007AF 24 F7            [12] 1774 	add	a,#0xf7
      0007B1 F5 81            [12] 1775 	mov	sp,a
      0007B3 D0 01            [24] 1776 	pop	ar1
      0007B5 D0 07            [24] 1777 	pop	ar7
                                   1778 ;	walk.c:196: for (i = 0; i < REG; i++) {
      0007B7 E5*00            [12] 1779 	mov	a,_bp
      0007B9 24 05            [12] 1780 	add	a,#0x05
      0007BB F8               [12] 1781 	mov	r0,a
      0007BC E4               [12] 1782 	clr	a
      0007BD F6               [12] 1783 	mov	@r0,a
      0007BE 08               [12] 1784 	inc	r0
      0007BF F6               [12] 1785 	mov	@r0,a
      0007C0                       1786 00116$:
                                   1787 ;	walk.c:197: neigh[i].r = neigh[REG + i].r * (1 + rand() % 8);
      0007C0 C0 07            [24] 1788 	push	ar7
      0007C2 E5*00            [12] 1789 	mov	a,_bp
      0007C4 24 05            [12] 1790 	add	a,#0x05
      0007C6 F8               [12] 1791 	mov	r0,a
      0007C7 E6               [12] 1792 	mov	a,@r0
      0007C8 25 E0            [12] 1793 	add	a,acc
      0007CA FB               [12] 1794 	mov	r3,a
      0007CB 08               [12] 1795 	inc	r0
      0007CC E6               [12] 1796 	mov	a,@r0
      0007CD 33               [12] 1797 	rlc	a
      0007CE FC               [12] 1798 	mov	r4,a
      0007CF EB               [12] 1799 	mov	a,r3
      0007D0 2B               [12] 1800 	add	a,r3
      0007D1 FB               [12] 1801 	mov	r3,a
      0007D2 EC               [12] 1802 	mov	a,r4
      0007D3 33               [12] 1803 	rlc	a
      0007D4 FC               [12] 1804 	mov	r4,a
      0007D5 E5*00            [12] 1805 	mov	a,_bp
      0007D7 24 03            [12] 1806 	add	a,#0x03
      0007D9 F8               [12] 1807 	mov	r0,a
      0007DA EB               [12] 1808 	mov	a,r3
      0007DB 24r00            [12] 1809 	add	a,#_neigh
      0007DD F6               [12] 1810 	mov	@r0,a
      0007DE EC               [12] 1811 	mov	a,r4
      0007DF 34s00            [12] 1812 	addc	a,#(_neigh >> 8)
      0007E1 08               [12] 1813 	inc	r0
      0007E2 F6               [12] 1814 	mov	@r0,a
      0007E3 E5*00            [12] 1815 	mov	a,_bp
      0007E5 24 05            [12] 1816 	add	a,#0x05
      0007E7 F8               [12] 1817 	mov	r0,a
      0007E8 86 06            [24] 1818 	mov	ar6,@r0
      0007EA 74 08            [12] 1819 	mov	a,#0x08
      0007EC 2E               [12] 1820 	add	a,r6
      0007ED FE               [12] 1821 	mov	r6,a
      0007EE C2 D5            [12] 1822 	clr	F0
      0007F0 75 F0 04         [24] 1823 	mov	b,#0x04
      0007F3 EE               [12] 1824 	mov	a,r6
      0007F4 30 E7 04         [24] 1825 	jnb	acc.7,00187$
      0007F7 B2 D5            [12] 1826 	cpl	F0
      0007F9 F4               [12] 1827 	cpl	a
      0007FA 04               [12] 1828 	inc	a
      0007FB                       1829 00187$:
      0007FB A4               [48] 1830 	mul	ab
      0007FC 30 D5 0A         [24] 1831 	jnb	F0,00188$
      0007FF F4               [12] 1832 	cpl	a
      000800 24 01            [12] 1833 	add	a,#0x01
      000802 C5 F0            [12] 1834 	xch	a,b
      000804 F4               [12] 1835 	cpl	a
      000805 34 00            [12] 1836 	addc	a,#0x00
      000807 C5 F0            [12] 1837 	xch	a,b
      000809                       1838 00188$:
      000809 FE               [12] 1839 	mov	r6,a
      00080A AD F0            [24] 1840 	mov	r5,b
      00080C 24r00            [12] 1841 	add	a,#_neigh
      00080E F5 82            [12] 1842 	mov	dpl,a
      000810 ED               [12] 1843 	mov	a,r5
      000811 34s00            [12] 1844 	addc	a,#(_neigh >> 8)
      000813 F5 83            [12] 1845 	mov	dph,a
      000815 A8*00            [24] 1846 	mov	r0,_bp
      000817 08               [12] 1847 	inc	r0
      000818 E0               [24] 1848 	movx	a,@dptr
      000819 F6               [12] 1849 	mov	@r0,a
      00081A A3               [24] 1850 	inc	dptr
      00081B E0               [24] 1851 	movx	a,@dptr
      00081C 08               [12] 1852 	inc	r0
      00081D F6               [12] 1853 	mov	@r0,a
      00081E C0 06            [24] 1854 	push	ar6
      000820 C0 05            [24] 1855 	push	ar5
      000822 C0 04            [24] 1856 	push	ar4
      000824 C0 03            [24] 1857 	push	ar3
      000826 C0 01            [24] 1858 	push	ar1
      000828 12r00r00         [24] 1859 	lcall	_rand
      00082B AA 82            [24] 1860 	mov	r2,dpl
      00082D AF 83            [24] 1861 	mov	r7,dph
      00082F 74 08            [12] 1862 	mov	a,#0x08
      000831 C0 E0            [24] 1863 	push	acc
      000833 E4               [12] 1864 	clr	a
      000834 C0 E0            [24] 1865 	push	acc
      000836 8A 82            [24] 1866 	mov	dpl,r2
      000838 8F 83            [24] 1867 	mov	dph,r7
      00083A 12r00r00         [24] 1868 	lcall	__modsint
      00083D AA 82            [24] 1869 	mov	r2,dpl
      00083F AF 83            [24] 1870 	mov	r7,dph
      000841 15 81            [12] 1871 	dec	sp
      000843 15 81            [12] 1872 	dec	sp
      000845 D0 01            [24] 1873 	pop	ar1
      000847 D0 03            [24] 1874 	pop	ar3
      000849 D0 04            [24] 1875 	pop	ar4
      00084B D0 05            [24] 1876 	pop	ar5
      00084D D0 06            [24] 1877 	pop	ar6
      00084F 0A               [12] 1878 	inc	r2
      000850 BA 00 01         [24] 1879 	cjne	r2,#0x00,00189$
      000853 0F               [12] 1880 	inc	r7
      000854                       1881 00189$:
      000854 C0 06            [24] 1882 	push	ar6
      000856 C0 05            [24] 1883 	push	ar5
      000858 C0 04            [24] 1884 	push	ar4
      00085A C0 03            [24] 1885 	push	ar3
      00085C C0 01            [24] 1886 	push	ar1
      00085E C0 02            [24] 1887 	push	ar2
      000860 C0 07            [24] 1888 	push	ar7
      000862 A8*00            [24] 1889 	mov	r0,_bp
      000864 08               [12] 1890 	inc	r0
      000865 86 82            [24] 1891 	mov	dpl,@r0
      000867 08               [12] 1892 	inc	r0
      000868 86 83            [24] 1893 	mov	dph,@r0
      00086A 12r00r00         [24] 1894 	lcall	__mulint
      00086D AA 82            [24] 1895 	mov	r2,dpl
      00086F AF 83            [24] 1896 	mov	r7,dph
      000871 15 81            [12] 1897 	dec	sp
      000873 15 81            [12] 1898 	dec	sp
      000875 D0 01            [24] 1899 	pop	ar1
      000877 D0 03            [24] 1900 	pop	ar3
      000879 D0 04            [24] 1901 	pop	ar4
      00087B D0 05            [24] 1902 	pop	ar5
      00087D D0 06            [24] 1903 	pop	ar6
      00087F E5*00            [12] 1904 	mov	a,_bp
      000881 24 03            [12] 1905 	add	a,#0x03
      000883 F8               [12] 1906 	mov	r0,a
      000884 86 82            [24] 1907 	mov	dpl,@r0
      000886 08               [12] 1908 	inc	r0
      000887 86 83            [24] 1909 	mov	dph,@r0
      000889 EA               [12] 1910 	mov	a,r2
      00088A F0               [24] 1911 	movx	@dptr,a
      00088B EF               [12] 1912 	mov	a,r7
      00088C A3               [24] 1913 	inc	dptr
      00088D F0               [24] 1914 	movx	@dptr,a
                                   1915 ;	walk.c:198: neigh[i].c = neigh[REG + i].c * (1 + rand() % 8);
      00088E EB               [12] 1916 	mov	a,r3
      00088F 24r00            [12] 1917 	add	a,#_neigh
      000891 FB               [12] 1918 	mov	r3,a
      000892 EC               [12] 1919 	mov	a,r4
      000893 34s00            [12] 1920 	addc	a,#(_neigh >> 8)
      000895 FC               [12] 1921 	mov	r4,a
      000896 74 02            [12] 1922 	mov	a,#0x02
      000898 2B               [12] 1923 	add	a,r3
      000899 FA               [12] 1924 	mov	r2,a
      00089A E4               [12] 1925 	clr	a
      00089B 3C               [12] 1926 	addc	a,r4
      00089C FF               [12] 1927 	mov	r7,a
      00089D EE               [12] 1928 	mov	a,r6
      00089E 24r00            [12] 1929 	add	a,#_neigh
      0008A0 FE               [12] 1930 	mov	r6,a
      0008A1 ED               [12] 1931 	mov	a,r5
      0008A2 34s00            [12] 1932 	addc	a,#(_neigh >> 8)
      0008A4 FD               [12] 1933 	mov	r5,a
      0008A5 8E 82            [24] 1934 	mov	dpl,r6
      0008A7 8D 83            [24] 1935 	mov	dph,r5
      0008A9 A3               [24] 1936 	inc	dptr
      0008AA A3               [24] 1937 	inc	dptr
      0008AB E5*00            [12] 1938 	mov	a,_bp
      0008AD 24 03            [12] 1939 	add	a,#0x03
      0008AF F8               [12] 1940 	mov	r0,a
      0008B0 E0               [24] 1941 	movx	a,@dptr
      0008B1 F6               [12] 1942 	mov	@r0,a
      0008B2 A3               [24] 1943 	inc	dptr
      0008B3 E0               [24] 1944 	movx	a,@dptr
      0008B4 08               [12] 1945 	inc	r0
      0008B5 F6               [12] 1946 	mov	@r0,a
      0008B6 C0 07            [24] 1947 	push	ar7
      0008B8 C0 04            [24] 1948 	push	ar4
      0008BA C0 03            [24] 1949 	push	ar3
      0008BC C0 02            [24] 1950 	push	ar2
      0008BE C0 01            [24] 1951 	push	ar1
      0008C0 12r00r00         [24] 1952 	lcall	_rand
      0008C3 AD 82            [24] 1953 	mov	r5,dpl
      0008C5 AE 83            [24] 1954 	mov	r6,dph
      0008C7 74 08            [12] 1955 	mov	a,#0x08
      0008C9 C0 E0            [24] 1956 	push	acc
      0008CB E4               [12] 1957 	clr	a
      0008CC C0 E0            [24] 1958 	push	acc
      0008CE 8D 82            [24] 1959 	mov	dpl,r5
      0008D0 8E 83            [24] 1960 	mov	dph,r6
      0008D2 12r00r00         [24] 1961 	lcall	__modsint
      0008D5 AD 82            [24] 1962 	mov	r5,dpl
      0008D7 AE 83            [24] 1963 	mov	r6,dph
      0008D9 15 81            [12] 1964 	dec	sp
      0008DB 15 81            [12] 1965 	dec	sp
      0008DD D0 01            [24] 1966 	pop	ar1
      0008DF D0 02            [24] 1967 	pop	ar2
      0008E1 D0 03            [24] 1968 	pop	ar3
      0008E3 D0 04            [24] 1969 	pop	ar4
      0008E5 D0 07            [24] 1970 	pop	ar7
      0008E7 0D               [12] 1971 	inc	r5
      0008E8 BD 00 01         [24] 1972 	cjne	r5,#0x00,00190$
      0008EB 0E               [12] 1973 	inc	r6
      0008EC                       1974 00190$:
      0008EC C0 07            [24] 1975 	push	ar7
      0008EE C0 04            [24] 1976 	push	ar4
      0008F0 C0 03            [24] 1977 	push	ar3
      0008F2 C0 02            [24] 1978 	push	ar2
      0008F4 C0 01            [24] 1979 	push	ar1
      0008F6 C0 05            [24] 1980 	push	ar5
      0008F8 C0 06            [24] 1981 	push	ar6
      0008FA E5*00            [12] 1982 	mov	a,_bp
      0008FC 24 03            [12] 1983 	add	a,#0x03
      0008FE F8               [12] 1984 	mov	r0,a
      0008FF 86 82            [24] 1985 	mov	dpl,@r0
      000901 08               [12] 1986 	inc	r0
      000902 86 83            [24] 1987 	mov	dph,@r0
      000904 12r00r00         [24] 1988 	lcall	__mulint
      000907 AD 82            [24] 1989 	mov	r5,dpl
      000909 AE 83            [24] 1990 	mov	r6,dph
      00090B 15 81            [12] 1991 	dec	sp
      00090D 15 81            [12] 1992 	dec	sp
      00090F D0 01            [24] 1993 	pop	ar1
      000911 D0 02            [24] 1994 	pop	ar2
      000913 D0 03            [24] 1995 	pop	ar3
      000915 D0 04            [24] 1996 	pop	ar4
      000917 D0 07            [24] 1997 	pop	ar7
      000919 8A 82            [24] 1998 	mov	dpl,r2
      00091B 8F 83            [24] 1999 	mov	dph,r7
      00091D ED               [12] 2000 	mov	a,r5
      00091E F0               [24] 2001 	movx	@dptr,a
      00091F EE               [12] 2002 	mov	a,r6
      000920 A3               [24] 2003 	inc	dptr
      000921 F0               [24] 2004 	movx	@dptr,a
                                   2005 ;	walk.c:199: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000922 8B 82            [24] 2006 	mov	dpl,r3
      000924 8C 83            [24] 2007 	mov	dph,r4
      000926 E0               [24] 2008 	movx	a,@dptr
      000927 FB               [12] 2009 	mov	r3,a
      000928 A3               [24] 2010 	inc	dptr
      000929 E0               [24] 2011 	movx	a,@dptr
      00092A FC               [12] 2012 	mov	r4,a
      00092B C0 07            [24] 2013 	push	ar7
      00092D C0 01            [24] 2014 	push	ar1
      00092F C0 05            [24] 2015 	push	ar5
      000931 C0 06            [24] 2016 	push	ar6
      000933 C0 03            [24] 2017 	push	ar3
      000935 C0 04            [24] 2018 	push	ar4
      000937 74r52            [12] 2019 	mov	a,#___str_6
      000939 C0 E0            [24] 2020 	push	acc
      00093B 74s00            [12] 2021 	mov	a,#(___str_6 >> 8)
      00093D C0 E0            [24] 2022 	push	acc
      00093F 74 80            [12] 2023 	mov	a,#0x80
      000941 C0 E0            [24] 2024 	push	acc
      000943 12r00r00         [24] 2025 	lcall	_printf
      000946 E5 81            [12] 2026 	mov	a,sp
      000948 24 F9            [12] 2027 	add	a,#0xf9
      00094A F5 81            [12] 2028 	mov	sp,a
      00094C D0 01            [24] 2029 	pop	ar1
      00094E D0 07            [24] 2030 	pop	ar7
                                   2031 ;	walk.c:196: for (i = 0; i < REG; i++) {
      000950 E5*00            [12] 2032 	mov	a,_bp
      000952 24 05            [12] 2033 	add	a,#0x05
      000954 F8               [12] 2034 	mov	r0,a
      000955 06               [12] 2035 	inc	@r0
      000956 B6 00 02         [24] 2036 	cjne	@r0,#0x00,00191$
      000959 08               [12] 2037 	inc	r0
      00095A 06               [12] 2038 	inc	@r0
      00095B                       2039 00191$:
      00095B E5*00            [12] 2040 	mov	a,_bp
      00095D 24 05            [12] 2041 	add	a,#0x05
      00095F F8               [12] 2042 	mov	r0,a
      000960 86 05            [24] 2043 	mov	ar5,@r0
      000962 08               [12] 2044 	inc	r0
      000963 86 06            [24] 2045 	mov	ar6,@r0
      000965 C3               [12] 2046 	clr	c
      000966 ED               [12] 2047 	mov	a,r5
      000967 94 08            [12] 2048 	subb	a,#0x08
      000969 EE               [12] 2049 	mov	a,r6
      00096A 94 00            [12] 2050 	subb	a,#0x00
      00096C D0 07            [24] 2051 	pop	ar7
      00096E 50 03            [24] 2052 	jnc	00192$
      000970 02r07rC0         [24] 2053 	ljmp	00116$
      000973                       2054 00192$:
                                   2055 ;	walk.c:202: OE76 = OE76_0;
      000973 78r01            [12] 2056 	mov	r0,#_OE76
      000975 76 3F            [12] 2057 	mov	@r0,#0x3f
                                   2058 ;	walk.c:203: setOE(OE76_NC);
      000977 75 82 00         [24] 2059 	mov	dpl,#0x00
      00097A C0 07            [24] 2060 	push	ar7
      00097C C0 01            [24] 2061 	push	ar1
      00097E 12r00r27         [24] 2062 	lcall	_setOE
      000981 D0 01            [24] 2063 	pop	ar1
      000983 D0 07            [24] 2064 	pop	ar7
                                   2065 ;	walk.c:205: walk(&initial);
      000985 8F 04            [24] 2066 	mov	ar4,r7
      000987 7D 00            [12] 2067 	mov	r5,#0x00
      000989 7E 40            [12] 2068 	mov	r6,#0x40
      00098B 8C 82            [24] 2069 	mov	dpl,r4
      00098D 8D 83            [24] 2070 	mov	dph,r5
      00098F 8E F0            [24] 2071 	mov	b,r6
      000991 C0 07            [24] 2072 	push	ar7
      000993 C0 01            [24] 2073 	push	ar1
      000995 12r02rED         [24] 2074 	lcall	_walk
      000998 D0 01            [24] 2075 	pop	ar1
      00099A D0 07            [24] 2076 	pop	ar7
                                   2077 ;	walk.c:207: for (i = 0; i < ROWS; i++)
      00099C E5*00            [12] 2078 	mov	a,_bp
      00099E 24 05            [12] 2079 	add	a,#0x05
      0009A0 F8               [12] 2080 	mov	r0,a
      0009A1 E4               [12] 2081 	clr	a
      0009A2 F6               [12] 2082 	mov	@r0,a
      0009A3 08               [12] 2083 	inc	r0
      0009A4 F6               [12] 2084 	mov	@r0,a
      0009A5 7B 00            [12] 2085 	mov	r3,#0x00
      0009A7 7C 00            [12] 2086 	mov	r4,#0x00
                                   2087 ;	walk.c:208: for (j = 0; j < COLS; j++)
      0009A9                       2088 00132$:
      0009A9 E5*00            [12] 2089 	mov	a,_bp
      0009AB 24 03            [12] 2090 	add	a,#0x03
      0009AD F8               [12] 2091 	mov	r0,a
      0009AE EB               [12] 2092 	mov	a,r3
      0009AF 24r00            [12] 2093 	add	a,#_g
      0009B1 F6               [12] 2094 	mov	@r0,a
      0009B2 EC               [12] 2095 	mov	a,r4
      0009B3 34s00            [12] 2096 	addc	a,#(_g >> 8)
      0009B5 08               [12] 2097 	inc	r0
      0009B6 F6               [12] 2098 	mov	@r0,a
      0009B7 7A 00            [12] 2099 	mov	r2,#0x00
      0009B9 7E 00            [12] 2100 	mov	r6,#0x00
      0009BB                       2101 00118$:
                                   2102 ;	walk.c:209: if (g[i][j] != 0xaau) bang();
      0009BB E5*00            [12] 2103 	mov	a,_bp
      0009BD 24 03            [12] 2104 	add	a,#0x03
      0009BF F8               [12] 2105 	mov	r0,a
      0009C0 EA               [12] 2106 	mov	a,r2
      0009C1 26               [12] 2107 	add	a,@r0
      0009C2 F5 82            [12] 2108 	mov	dpl,a
      0009C4 EE               [12] 2109 	mov	a,r6
      0009C5 08               [12] 2110 	inc	r0
      0009C6 36               [12] 2111 	addc	a,@r0
      0009C7 F5 83            [12] 2112 	mov	dph,a
      0009C9 E0               [24] 2113 	movx	a,@dptr
      0009CA FD               [12] 2114 	mov	r5,a
      0009CB BD AA 02         [24] 2115 	cjne	r5,#0xaa,00193$
      0009CE 80 1B            [24] 2116 	sjmp	00119$
      0009D0                       2117 00193$:
      0009D0 C0 07            [24] 2118 	push	ar7
      0009D2 C0 06            [24] 2119 	push	ar6
      0009D4 C0 04            [24] 2120 	push	ar4
      0009D6 C0 03            [24] 2121 	push	ar3
      0009D8 C0 02            [24] 2122 	push	ar2
      0009DA C0 01            [24] 2123 	push	ar1
      0009DC 12r00r1A         [24] 2124 	lcall	_bang
      0009DF D0 01            [24] 2125 	pop	ar1
      0009E1 D0 02            [24] 2126 	pop	ar2
      0009E3 D0 03            [24] 2127 	pop	ar3
      0009E5 D0 04            [24] 2128 	pop	ar4
      0009E7 D0 06            [24] 2129 	pop	ar6
      0009E9 D0 07            [24] 2130 	pop	ar7
      0009EB                       2131 00119$:
                                   2132 ;	walk.c:208: for (j = 0; j < COLS; j++)
      0009EB 0A               [12] 2133 	inc	r2
      0009EC BA 00 01         [24] 2134 	cjne	r2,#0x00,00194$
      0009EF 0E               [12] 2135 	inc	r6
      0009F0                       2136 00194$:
      0009F0 C3               [12] 2137 	clr	c
      0009F1 EA               [12] 2138 	mov	a,r2
      0009F2 94 C9            [12] 2139 	subb	a,#0xc9
      0009F4 EE               [12] 2140 	mov	a,r6
      0009F5 64 80            [12] 2141 	xrl	a,#0x80
      0009F7 94 80            [12] 2142 	subb	a,#0x80
      0009F9 40 C0            [24] 2143 	jc	00118$
                                   2144 ;	walk.c:207: for (i = 0; i < ROWS; i++)
      0009FB 74 C9            [12] 2145 	mov	a,#0xc9
      0009FD 2B               [12] 2146 	add	a,r3
      0009FE FB               [12] 2147 	mov	r3,a
      0009FF E4               [12] 2148 	clr	a
      000A00 3C               [12] 2149 	addc	a,r4
      000A01 FC               [12] 2150 	mov	r4,a
      000A02 E5*00            [12] 2151 	mov	a,_bp
      000A04 24 05            [12] 2152 	add	a,#0x05
      000A06 F8               [12] 2153 	mov	r0,a
      000A07 06               [12] 2154 	inc	@r0
      000A08 B6 00 02         [24] 2155 	cjne	@r0,#0x00,00196$
      000A0B 08               [12] 2156 	inc	r0
      000A0C 06               [12] 2157 	inc	@r0
      000A0D                       2158 00196$:
      000A0D E5*00            [12] 2159 	mov	a,_bp
      000A0F 24 05            [12] 2160 	add	a,#0x05
      000A11 F8               [12] 2161 	mov	r0,a
      000A12 C3               [12] 2162 	clr	c
      000A13 E6               [12] 2163 	mov	a,@r0
      000A14 94 30            [12] 2164 	subb	a,#0x30
      000A16 08               [12] 2165 	inc	r0
      000A17 E6               [12] 2166 	mov	a,@r0
      000A18 64 80            [12] 2167 	xrl	a,#0x80
      000A1A 94 80            [12] 2168 	subb	a,#0x80
      000A1C 40 8B            [24] 2169 	jc	00132$
                                   2170 ;	walk.c:211: N++;
      000A1E E5*00            [12] 2171 	mov	a,_bp
      000A20 24 0B            [12] 2172 	add	a,#0x0b
      000A22 F8               [12] 2173 	mov	r0,a
      000A23 06               [12] 2174 	inc	@r0
      000A24 B6 00 02         [24] 2175 	cjne	@r0,#0x00,00198$
      000A27 08               [12] 2176 	inc	r0
      000A28 06               [12] 2177 	inc	@r0
      000A29                       2178 00198$:
      000A29 02r06rA5         [24] 2179 	ljmp	00108$
      000A2C                       2180 00110$:
                                   2181 ;	walk.c:214: EA = 0;
                                   2182 ;	assignBit
      000A2C C2 AF            [12] 2183 	clr	_EA
                                   2184 ;	walk.c:216: puts("\033[2J\033[?25h");
      000A2E 90r00r5B         [24] 2185 	mov	dptr,#___str_7
      000A31 75 F0 80         [24] 2186 	mov	b,#0x80
      000A34 12r00r00         [24] 2187 	lcall	_puts
                                   2188 ;	walk.c:35: PCON |= 2;
      000A37 43 87 02         [24] 2189 	orl	_PCON,#0x02
                                   2190 ;	walk.c:220: return;
                                   2191 ;	walk.c:221: }
      000A3A 85*00 81         [24] 2192 	mov	sp,_bp
      000A3D D0*00            [24] 2193 	pop	_bp
      000A3F 22               [24] 2194 	ret
                                   2195 ;------------------------------------------------------------
                                   2196 ;Allocation info for local variables in function 'stinit'
                                   2197 ;------------------------------------------------------------
                                   2198 ;	walk.c:223: static void stinit(void) {
                                   2199 ;	-----------------------------------------
                                   2200 ;	 function stinit
                                   2201 ;	-----------------------------------------
      000A40                       2202 _stinit:
                                   2203 ;	walk.c:224: sp = -1;
      000A40 90rBCr70         [24] 2204 	mov	dptr,#_sp
      000A43 74 FF            [12] 2205 	mov	a,#0xff
      000A45 F0               [24] 2206 	movx	@dptr,a
      000A46 A3               [24] 2207 	inc	dptr
      000A47 F0               [24] 2208 	movx	@dptr,a
                                   2209 ;	walk.c:225: return;
                                   2210 ;	walk.c:226: }
      000A48 22               [24] 2211 	ret
                                   2212 ;------------------------------------------------------------
                                   2213 ;Allocation info for local variables in function 'stpush'
                                   2214 ;------------------------------------------------------------
                                   2215 ;t                         Allocated to registers r5 r6 r7 
                                   2216 ;------------------------------------------------------------
                                   2217 ;	walk.c:228: static uint8_t stpush(struct node *t) {
                                   2218 ;	-----------------------------------------
                                   2219 ;	 function stpush
                                   2220 ;	-----------------------------------------
      000A49                       2221 _stpush:
      000A49 AD 82            [24] 2222 	mov	r5,dpl
      000A4B AE 83            [24] 2223 	mov	r6,dph
      000A4D AF F0            [24] 2224 	mov	r7,b
                                   2225 ;	walk.c:229: if (sp == (SMAX - 1)) return 0u;
      000A4F 90rBCr70         [24] 2226 	mov	dptr,#_sp
      000A52 E0               [24] 2227 	movx	a,@dptr
      000A53 FB               [12] 2228 	mov	r3,a
      000A54 A3               [24] 2229 	inc	dptr
      000A55 E0               [24] 2230 	movx	a,@dptr
      000A56 FC               [12] 2231 	mov	r4,a
      000A57 BB AF 07         [24] 2232 	cjne	r3,#0xaf,00102$
      000A5A BC 25 04         [24] 2233 	cjne	r4,#0x25,00102$
      000A5D 75 82 00         [24] 2234 	mov	dpl,#0x00
      000A60 22               [24] 2235 	ret
      000A61                       2236 00102$:
                                   2237 ;	walk.c:230: sp++;
      000A61 90rBCr70         [24] 2238 	mov	dptr,#_sp
      000A64 74 01            [12] 2239 	mov	a,#0x01
      000A66 2B               [12] 2240 	add	a,r3
      000A67 F0               [24] 2241 	movx	@dptr,a
      000A68 E4               [12] 2242 	clr	a
      000A69 3C               [12] 2243 	addc	a,r4
      000A6A A3               [24] 2244 	inc	dptr
      000A6B F0               [24] 2245 	movx	@dptr,a
                                   2246 ;	walk.c:231: stack[sp] = *t;
      000A6C 90rBCr70         [24] 2247 	mov	dptr,#_sp
      000A6F E0               [24] 2248 	movx	a,@dptr
      000A70 FB               [12] 2249 	mov	r3,a
      000A71 A3               [24] 2250 	inc	dptr
      000A72 E0               [24] 2251 	movx	a,@dptr
      000A73 FC               [12] 2252 	mov	r4,a
      000A74 EB               [12] 2253 	mov	a,r3
      000A75 2B               [12] 2254 	add	a,r3
      000A76 FB               [12] 2255 	mov	r3,a
      000A77 EC               [12] 2256 	mov	a,r4
      000A78 33               [12] 2257 	rlc	a
      000A79 FC               [12] 2258 	mov	r4,a
      000A7A EB               [12] 2259 	mov	a,r3
      000A7B 2B               [12] 2260 	add	a,r3
      000A7C FB               [12] 2261 	mov	r3,a
      000A7D EC               [12] 2262 	mov	a,r4
      000A7E 33               [12] 2263 	rlc	a
      000A7F FC               [12] 2264 	mov	r4,a
      000A80 EB               [12] 2265 	mov	a,r3
      000A81 24rB0            [12] 2266 	add	a,#_stack
      000A83 FB               [12] 2267 	mov	r3,a
      000A84 EC               [12] 2268 	mov	a,r4
      000A85 34s25            [12] 2269 	addc	a,#(_stack >> 8)
      000A87 FC               [12] 2270 	mov	r4,a
      000A88 7A 00            [12] 2271 	mov	r2,#0x00
      000A8A 74 04            [12] 2272 	mov	a,#0x04
      000A8C C0 E0            [24] 2273 	push	acc
      000A8E E4               [12] 2274 	clr	a
      000A8F C0 E0            [24] 2275 	push	acc
      000A91 C0 05            [24] 2276 	push	ar5
      000A93 C0 06            [24] 2277 	push	ar6
      000A95 C0 07            [24] 2278 	push	ar7
      000A97 8B 82            [24] 2279 	mov	dpl,r3
      000A99 8C 83            [24] 2280 	mov	dph,r4
      000A9B 8A F0            [24] 2281 	mov	b,r2
      000A9D 12r00r00         [24] 2282 	lcall	___memcpy
      000AA0 E5 81            [12] 2283 	mov	a,sp
      000AA2 24 FB            [12] 2284 	add	a,#0xfb
      000AA4 F5 81            [12] 2285 	mov	sp,a
                                   2286 ;	walk.c:232: return 1u;
      000AA6 75 82 01         [24] 2287 	mov	dpl,#0x01
                                   2288 ;	walk.c:233: }
      000AA9 22               [24] 2289 	ret
                                   2290 ;------------------------------------------------------------
                                   2291 ;Allocation info for local variables in function 'stpop'
                                   2292 ;------------------------------------------------------------
                                   2293 ;t                         Allocated to registers r5 r6 r7 
                                   2294 ;------------------------------------------------------------
                                   2295 ;	walk.c:235: static uint8_t stpop(struct node *t) {
                                   2296 ;	-----------------------------------------
                                   2297 ;	 function stpop
                                   2298 ;	-----------------------------------------
      000AAA                       2299 _stpop:
      000AAA AD 82            [24] 2300 	mov	r5,dpl
      000AAC AE 83            [24] 2301 	mov	r6,dph
      000AAE AF F0            [24] 2302 	mov	r7,b
                                   2303 ;	walk.c:236: if (sp == -1) return 0u;
      000AB0 90rBCr70         [24] 2304 	mov	dptr,#_sp
      000AB3 E0               [24] 2305 	movx	a,@dptr
      000AB4 FB               [12] 2306 	mov	r3,a
      000AB5 A3               [24] 2307 	inc	dptr
      000AB6 E0               [24] 2308 	movx	a,@dptr
      000AB7 FC               [12] 2309 	mov	r4,a
      000AB8 BB FF 07         [24] 2310 	cjne	r3,#0xff,00102$
      000ABB BC FF 04         [24] 2311 	cjne	r4,#0xff,00102$
      000ABE 75 82 00         [24] 2312 	mov	dpl,#0x00
      000AC1 22               [24] 2313 	ret
      000AC2                       2314 00102$:
                                   2315 ;	walk.c:237: *t = stack[sp];
      000AC2 EB               [12] 2316 	mov	a,r3
      000AC3 2B               [12] 2317 	add	a,r3
      000AC4 FB               [12] 2318 	mov	r3,a
      000AC5 EC               [12] 2319 	mov	a,r4
      000AC6 33               [12] 2320 	rlc	a
      000AC7 FC               [12] 2321 	mov	r4,a
      000AC8 EB               [12] 2322 	mov	a,r3
      000AC9 2B               [12] 2323 	add	a,r3
      000ACA FB               [12] 2324 	mov	r3,a
      000ACB EC               [12] 2325 	mov	a,r4
      000ACC 33               [12] 2326 	rlc	a
      000ACD FC               [12] 2327 	mov	r4,a
      000ACE EB               [12] 2328 	mov	a,r3
      000ACF 24rB0            [12] 2329 	add	a,#_stack
      000AD1 FB               [12] 2330 	mov	r3,a
      000AD2 EC               [12] 2331 	mov	a,r4
      000AD3 34s25            [12] 2332 	addc	a,#(_stack >> 8)
      000AD5 FC               [12] 2333 	mov	r4,a
      000AD6 7A 00            [12] 2334 	mov	r2,#0x00
      000AD8 74 04            [12] 2335 	mov	a,#0x04
      000ADA C0 E0            [24] 2336 	push	acc
      000ADC E4               [12] 2337 	clr	a
      000ADD C0 E0            [24] 2338 	push	acc
      000ADF C0 03            [24] 2339 	push	ar3
      000AE1 C0 04            [24] 2340 	push	ar4
      000AE3 C0 02            [24] 2341 	push	ar2
      000AE5 8D 82            [24] 2342 	mov	dpl,r5
      000AE7 8E 83            [24] 2343 	mov	dph,r6
      000AE9 8F F0            [24] 2344 	mov	b,r7
      000AEB 12r00r00         [24] 2345 	lcall	___memcpy
      000AEE E5 81            [12] 2346 	mov	a,sp
      000AF0 24 FB            [12] 2347 	add	a,#0xfb
      000AF2 F5 81            [12] 2348 	mov	sp,a
                                   2349 ;	walk.c:238: sp--;
      000AF4 90rBCr70         [24] 2350 	mov	dptr,#_sp
      000AF7 E0               [24] 2351 	movx	a,@dptr
      000AF8 24 FF            [12] 2352 	add	a,#0xff
      000AFA FE               [12] 2353 	mov	r6,a
      000AFB A3               [24] 2354 	inc	dptr
      000AFC E0               [24] 2355 	movx	a,@dptr
      000AFD 34 FF            [12] 2356 	addc	a,#0xff
      000AFF FF               [12] 2357 	mov	r7,a
      000B00 90rBCr70         [24] 2358 	mov	dptr,#_sp
      000B03 EE               [12] 2359 	mov	a,r6
      000B04 F0               [24] 2360 	movx	@dptr,a
      000B05 EF               [12] 2361 	mov	a,r7
      000B06 A3               [24] 2362 	inc	dptr
      000B07 F0               [24] 2363 	movx	@dptr,a
                                   2364 ;	walk.c:239: return 1u;
      000B08 75 82 01         [24] 2365 	mov	dpl,#0x01
                                   2366 ;	walk.c:240: }
      000B0B 22               [24] 2367 	ret
                                   2368 	.area CSEG    (CODE)
                                   2369 	.area CONST   (CODE)
                                   2370 	.area CONST   (CODE)
      000000                       2371 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2372 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2373 	.db 0x00
                                   2374 	.area CSEG    (CODE)
                                   2375 	.area CONST   (CODE)
      00000D                       2376 ___str_1:
      00000D 1B                    2377 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2378 	.ascii "[%d;%dHo"
             6F
      000016 00                    2379 	.db 0x00
                                   2380 	.area CSEG    (CODE)
                                   2381 	.area CONST   (CODE)
      000017                       2382 ___str_2:
      000017 1B                    2383 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2384 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2385 	.db 0x00
                                   2386 	.area CSEG    (CODE)
                                   2387 	.area CONST   (CODE)
      00002A                       2388 ___str_3:
      00002A 1B                    2389 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2390 	.ascii "[%d;%dH."
             2E
      000033 00                    2391 	.db 0x00
                                   2392 	.area CSEG    (CODE)
                                   2393 	.area CONST   (CODE)
      000034                       2394 ___str_4:
      000034 1B                    2395 	.db 0x1b
      000035 5B 32 4A              2396 	.ascii "[2J"
      000038 1B                    2397 	.db 0x1b
      000039 5B 3F 32 35 6C        2398 	.ascii "[?25l"
      00003E 00                    2399 	.db 0x00
                                   2400 	.area CSEG    (CODE)
                                   2401 	.area CONST   (CODE)
      00003F                       2402 ___str_5:
      00003F 1B                    2403 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2404 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2405 	.db 0x00
                                   2406 	.area CSEG    (CODE)
                                   2407 	.area CONST   (CODE)
      000052                       2408 ___str_6:
      000052 25 20 38 64 25 20 38  2409 	.ascii "% 8d% 8d"
             64
      00005A 00                    2410 	.db 0x00
                                   2411 	.area CSEG    (CODE)
                                   2412 	.area CONST   (CODE)
      00005B                       2413 ___str_7:
      00005B 1B                    2414 	.db 0x1b
      00005C 5B 32 4A              2415 	.ascii "[2J"
      00005F 1B                    2416 	.db 0x1b
      000060 5B 3F 32 35 68        2417 	.ascii "[?25h"
      000065 00                    2418 	.db 0x00
                                   2419 	.area CSEG    (CODE)
                                   2420 	.area XINIT   (CODE)
      000000                       2421 __xinit__neigh:
      000000 FF FF                 2422 	.byte #0xff, #0xff	; -1
      000002 01 00                 2423 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2424 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2425 	.byte #0xff, #0xff	; -1
      000008 01 00                 2426 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2427 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2428 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2429 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2430 	.byte #0xff, #0xff	; -1
      000012 00 00                 2431 	.byte #0x00, #0x00	;  0
      000014 00 00                 2432 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2433 	.byte #0xff, #0xff	; -1
      000018 01 00                 2434 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2435 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2436 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2437 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2438 	.byte #0xff, #0xff	; -1
      000022 01 00                 2439 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2440 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2441 	.byte #0xff, #0xff	; -1
      000028 01 00                 2442 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2443 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2444 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2445 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2446 	.byte #0xff, #0xff	; -1
      000032 00 00                 2447 	.byte #0x00, #0x00	;  0
      000034 00 00                 2448 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2449 	.byte #0xff, #0xff	; -1
      000038 01 00                 2450 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2451 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2452 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2453 	.byte #0x01, #0x00	;  1
                                   2454 	.area CABS    (ABS,CODE)
