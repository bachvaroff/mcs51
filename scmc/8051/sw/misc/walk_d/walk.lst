                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _stack:
      0025B0                        325 	.ds 38592
      00BC70                        326 _sp:
      00BC70                        327 	.ds 2
                           00F006   328 _OEreg	=	0xf006
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _neigh:
      000000                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r16         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r06r80         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	walk.c:7: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	walk.c:14: __endasm;
      000000 C0 E0            [24]  395 	push	acc
      000002 E5 82            [12]  396 	mov	a, dpl
      000004 12 00 3C         [24]  397 	lcall	0x003c
      000007 D0 E0            [24]  398 	pop	acc
                                    399 ;	walk.c:15: }
                                    400 ;	naked function: no epilogue.
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'getchar'
                                    403 ;------------------------------------------------------------
                                    404 ;	walk.c:17: int getchar(void) __naked {
                                    405 ;	-----------------------------------------
                                    406 ;	 function getchar
                                    407 ;	-----------------------------------------
      000009                        408 _getchar:
                                    409 ;	naked function: no prologue.
                                    410 ;	walk.c:25: __endasm;
      000009 C0 E0            [24]  411 	push	acc
      00000B 12 00 36         [24]  412 	lcall	0x0036
      00000E F5 82            [12]  413 	mov	dpl, a
      000010 75 83 00         [24]  414 	mov	dph, #0
      000013 D0 E0            [24]  415 	pop	acc
      000015 22               [24]  416 	ret
                                    417 ;	walk.c:26: }
                                    418 ;	naked function: no epilogue.
                                    419 ;------------------------------------------------------------
                                    420 ;Allocation info for local variables in function 'int0'
                                    421 ;------------------------------------------------------------
                                    422 ;	walk.c:32: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    423 ;	-----------------------------------------
                                    424 ;	 function int0
                                    425 ;	-----------------------------------------
      000016                        426 _int0:
                           00000F   427 	ar7 = 0x0f
                           00000E   428 	ar6 = 0x0e
                           00000D   429 	ar5 = 0x0d
                           00000C   430 	ar4 = 0x0c
                           00000B   431 	ar3 = 0x0b
                           00000A   432 	ar2 = 0x0a
                           000009   433 	ar1 = 0x09
                           000008   434 	ar0 = 0x08
      000016 C0 D0            [24]  435 	push	psw
      000018 75 D0 08         [24]  436 	mov	psw,#0x08
                                    437 ;	walk.c:33: i0 = 0u;
      00001B 78r00            [12]  438 	mov	r0,#_i0
      00001D 76 00            [12]  439 	mov	@r0,#0x00
                                    440 ;	walk.c:34: }
      00001F D0 D0            [24]  441 	pop	psw
      000021 32               [24]  442 	reti
                                    443 ;	eliminated unneeded push/pop dpl
                                    444 ;	eliminated unneeded push/pop dph
                                    445 ;	eliminated unneeded push/pop b
                                    446 ;	eliminated unneeded push/pop acc
                                    447 ;------------------------------------------------------------
                                    448 ;Allocation info for local variables in function 'bang'
                                    449 ;------------------------------------------------------------
                                    450 ;	walk.c:40: static void bang(void) {
                                    451 ;	-----------------------------------------
                                    452 ;	 function bang
                                    453 ;	-----------------------------------------
      000022                        454 _bang:
                           000007   455 	ar7 = 0x07
                           000006   456 	ar6 = 0x06
                           000005   457 	ar5 = 0x05
                           000004   458 	ar4 = 0x04
                           000003   459 	ar3 = 0x03
                           000002   460 	ar2 = 0x02
                           000001   461 	ar1 = 0x01
                           000000   462 	ar0 = 0x00
                                    463 ;	walk.c:41: (void)puts("Memory error");
      000022 90r00r00         [24]  464 	mov	dptr,#___str_0
      000025 75 F0 80         [24]  465 	mov	b,#0x80
      000028 12r00r00         [24]  466 	lcall	_puts
                                    467 ;	walk.c:37: PCON |= 2;
      00002B 43 87 02         [24]  468 	orl	_PCON,#0x02
                                    469 ;	walk.c:44: return;
                                    470 ;	walk.c:45: }
      00002E 22               [24]  471 	ret
                                    472 ;------------------------------------------------------------
                                    473 ;Allocation info for local variables in function 'setOE'
                                    474 ;------------------------------------------------------------
                                    475 ;mask                      Allocated to registers r7 
                                    476 ;------------------------------------------------------------
                                    477 ;	walk.c:87: static void setOE(uint8_t mask) {
                                    478 ;	-----------------------------------------
                                    479 ;	 function setOE
                                    480 ;	-----------------------------------------
      00002F                        481 _setOE:
      00002F AF 82            [24]  482 	mov	r7,dpl
                                    483 ;	walk.c:88: OE76 |= mask;
      000031 78r01            [12]  484 	mov	r0,#_OE76
      000033 EF               [12]  485 	mov	a,r7
      000034 46               [12]  486 	orl	a,@r0
      000035 F6               [12]  487 	mov	@r0,a
                                    488 ;	walk.c:89: P1_7 = 0;
                                    489 ;	assignBit
      000036 C2 97            [12]  490 	clr	_P1_7
                                    491 ;	walk.c:94: __endasm;
      000038 00               [12]  492 	nop
      000039 00               [12]  493 	nop
      00003A 00               [12]  494 	nop
                                    495 ;	walk.c:95: OEreg = OE76;
      00003B 78r01            [12]  496 	mov	r0,#_OE76
      00003D 90 F0 06         [24]  497 	mov	dptr,#_OEreg
      000040 E6               [12]  498 	mov	a,@r0
      000041 F0               [24]  499 	movx	@dptr,a
                                    500 ;	walk.c:96: P1_7 = 1;
                                    501 ;	assignBit
      000042 D2 97            [12]  502 	setb	_P1_7
                                    503 ;	walk.c:101: __endasm;
      000044 00               [12]  504 	nop
      000045 00               [12]  505 	nop
      000046 00               [12]  506 	nop
                                    507 ;	walk.c:103: return;
                                    508 ;	walk.c:104: }
      000047 22               [24]  509 	ret
                                    510 ;------------------------------------------------------------
                                    511 ;Allocation info for local variables in function 'unsetOE'
                                    512 ;------------------------------------------------------------
                                    513 ;mask                      Allocated to registers r7 
                                    514 ;------------------------------------------------------------
                                    515 ;	walk.c:106: static void unsetOE(uint8_t mask) {
                                    516 ;	-----------------------------------------
                                    517 ;	 function unsetOE
                                    518 ;	-----------------------------------------
      000048                        519 _unsetOE:
                                    520 ;	walk.c:107: OE76 &= ~mask;
      000048 E5 82            [12]  521 	mov	a,dpl
      00004A F4               [12]  522 	cpl	a
      00004B FF               [12]  523 	mov	r7,a
      00004C 78r01            [12]  524 	mov	r0,#_OE76
      00004E 56               [12]  525 	anl	a,@r0
      00004F F6               [12]  526 	mov	@r0,a
                                    527 ;	walk.c:108: P1_7 = 0;
                                    528 ;	assignBit
      000050 C2 97            [12]  529 	clr	_P1_7
                                    530 ;	walk.c:113: __endasm;
      000052 00               [12]  531 	nop
      000053 00               [12]  532 	nop
      000054 00               [12]  533 	nop
                                    534 ;	walk.c:114: OEreg = OE76;
      000055 78r01            [12]  535 	mov	r0,#_OE76
      000057 90 F0 06         [24]  536 	mov	dptr,#_OEreg
      00005A E6               [12]  537 	mov	a,@r0
      00005B F0               [24]  538 	movx	@dptr,a
                                    539 ;	walk.c:115: P1_7 = 1;
                                    540 ;	assignBit
      00005C D2 97            [12]  541 	setb	_P1_7
                                    542 ;	walk.c:120: __endasm;
      00005E 00               [12]  543 	nop
      00005F 00               [12]  544 	nop
      000060 00               [12]  545 	nop
                                    546 ;	walk.c:122: return;
                                    547 ;	walk.c:123: }
      000061 22               [24]  548 	ret
                                    549 ;------------------------------------------------------------
                                    550 ;Allocation info for local variables in function 'flipOE'
                                    551 ;------------------------------------------------------------
                                    552 ;mask                      Allocated to registers r7 
                                    553 ;------------------------------------------------------------
                                    554 ;	walk.c:125: static void flipOE(uint8_t mask) {
                                    555 ;	-----------------------------------------
                                    556 ;	 function flipOE
                                    557 ;	-----------------------------------------
      000062                        558 _flipOE:
      000062 AF 82            [24]  559 	mov	r7,dpl
                                    560 ;	walk.c:126: OE76 ^= mask;
      000064 78r01            [12]  561 	mov	r0,#_OE76
      000066 EF               [12]  562 	mov	a,r7
      000067 66               [12]  563 	xrl	a,@r0
      000068 F6               [12]  564 	mov	@r0,a
                                    565 ;	walk.c:127: P1_7 = 0;
                                    566 ;	assignBit
      000069 C2 97            [12]  567 	clr	_P1_7
                                    568 ;	walk.c:132: __endasm;
      00006B 00               [12]  569 	nop
      00006C 00               [12]  570 	nop
      00006D 00               [12]  571 	nop
                                    572 ;	walk.c:133: OEreg = OE76;
      00006E 78r01            [12]  573 	mov	r0,#_OE76
      000070 90 F0 06         [24]  574 	mov	dptr,#_OEreg
      000073 E6               [12]  575 	mov	a,@r0
      000074 F0               [24]  576 	movx	@dptr,a
                                    577 ;	walk.c:134: P1_7 = 1;
                                    578 ;	assignBit
      000075 D2 97            [12]  579 	setb	_P1_7
                                    580 ;	walk.c:139: __endasm;
      000077 00               [12]  581 	nop
      000078 00               [12]  582 	nop
      000079 00               [12]  583 	nop
                                    584 ;	walk.c:141: return;
                                    585 ;	walk.c:142: }
      00007A 22               [24]  586 	ret
                                    587 ;------------------------------------------------------------
                                    588 ;Allocation info for local variables in function 'update'
                                    589 ;------------------------------------------------------------
                                    590 ;cur                       Allocated to stack - _bp -5
                                    591 ;j                         Allocated to stack - _bp -6
                                    592 ;t                         Allocated to stack - _bp +1
                                    593 ;sloc0                     Allocated to stack - _bp +4
                                    594 ;sloc1                     Allocated to stack - _bp +6
                                    595 ;sloc2                     Allocated to stack - _bp +8
                                    596 ;------------------------------------------------------------
                                    597 ;	walk.c:144: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    598 ;	-----------------------------------------
                                    599 ;	 function update
                                    600 ;	-----------------------------------------
      00007B                        601 _update:
      00007B C0*00            [24]  602 	push	_bp
      00007D 85 81*00         [24]  603 	mov	_bp,sp
      000080 C0 82            [24]  604 	push	dpl
      000082 C0 83            [24]  605 	push	dph
      000084 C0 F0            [24]  606 	push	b
      000086 E5 81            [12]  607 	mov	a,sp
      000088 24 07            [12]  608 	add	a,#0x07
      00008A F5 81            [12]  609 	mov	sp,a
                                    610 ;	walk.c:145: t->r = cur->r + neigh[j].r;
      00008C E5*00            [12]  611 	mov	a,_bp
      00008E 24 FB            [12]  612 	add	a,#0xfb
      000090 F8               [12]  613 	mov	r0,a
      000091 86 02            [24]  614 	mov	ar2,@r0
      000093 08               [12]  615 	inc	r0
      000094 86 03            [24]  616 	mov	ar3,@r0
      000096 08               [12]  617 	inc	r0
      000097 86 04            [24]  618 	mov	ar4,@r0
      000099 8A 82            [24]  619 	mov	dpl,r2
      00009B 8B 83            [24]  620 	mov	dph,r3
      00009D 8C F0            [24]  621 	mov	b,r4
      00009F E5*00            [12]  622 	mov	a,_bp
      0000A1 24 04            [12]  623 	add	a,#0x04
      0000A3 F8               [12]  624 	mov	r0,a
      0000A4 12r00r00         [24]  625 	lcall	__gptrget
      0000A7 F6               [12]  626 	mov	@r0,a
      0000A8 A3               [24]  627 	inc	dptr
      0000A9 12r00r00         [24]  628 	lcall	__gptrget
      0000AC 08               [12]  629 	inc	r0
      0000AD F6               [12]  630 	mov	@r0,a
      0000AE E5*00            [12]  631 	mov	a,_bp
      0000B0 24 FA            [12]  632 	add	a,#0xfa
      0000B2 F8               [12]  633 	mov	r0,a
      0000B3 E5*00            [12]  634 	mov	a,_bp
      0000B5 24 06            [12]  635 	add	a,#0x06
      0000B7 F9               [12]  636 	mov	r1,a
      0000B8 E6               [12]  637 	mov	a,@r0
      0000B9 75 F0 04         [24]  638 	mov	b,#0x04
      0000BC A4               [48]  639 	mul	ab
      0000BD F7               [12]  640 	mov	@r1,a
      0000BE 09               [12]  641 	inc	r1
      0000BF A7 F0            [24]  642 	mov	@r1,b
      0000C1 E5*00            [12]  643 	mov	a,_bp
      0000C3 24 06            [12]  644 	add	a,#0x06
      0000C5 F8               [12]  645 	mov	r0,a
      0000C6 E6               [12]  646 	mov	a,@r0
      0000C7 24r00            [12]  647 	add	a,#_neigh
      0000C9 F5 82            [12]  648 	mov	dpl,a
      0000CB 08               [12]  649 	inc	r0
      0000CC E6               [12]  650 	mov	a,@r0
      0000CD 34s00            [12]  651 	addc	a,#(_neigh >> 8)
      0000CF F5 83            [12]  652 	mov	dph,a
      0000D1 E0               [24]  653 	movx	a,@dptr
      0000D2 FF               [12]  654 	mov	r7,a
      0000D3 A3               [24]  655 	inc	dptr
      0000D4 E0               [24]  656 	movx	a,@dptr
      0000D5 FE               [12]  657 	mov	r6,a
      0000D6 E5*00            [12]  658 	mov	a,_bp
      0000D8 24 04            [12]  659 	add	a,#0x04
      0000DA F8               [12]  660 	mov	r0,a
      0000DB EF               [12]  661 	mov	a,r7
      0000DC 26               [12]  662 	add	a,@r0
      0000DD FF               [12]  663 	mov	r7,a
      0000DE EE               [12]  664 	mov	a,r6
      0000DF 08               [12]  665 	inc	r0
      0000E0 36               [12]  666 	addc	a,@r0
      0000E1 FE               [12]  667 	mov	r6,a
      0000E2 A8*00            [24]  668 	mov	r0,_bp
      0000E4 08               [12]  669 	inc	r0
      0000E5 86 82            [24]  670 	mov	dpl,@r0
      0000E7 08               [12]  671 	inc	r0
      0000E8 86 83            [24]  672 	mov	dph,@r0
      0000EA 08               [12]  673 	inc	r0
      0000EB 86 F0            [24]  674 	mov	b,@r0
      0000ED EF               [12]  675 	mov	a,r7
      0000EE 12r00r00         [24]  676 	lcall	__gptrput
      0000F1 A3               [24]  677 	inc	dptr
      0000F2 EE               [12]  678 	mov	a,r6
      0000F3 12r00r00         [24]  679 	lcall	__gptrput
                                    680 ;	walk.c:146: t->c = cur->c + neigh[j].c;
      0000F6 A8*00            [24]  681 	mov	r0,_bp
      0000F8 08               [12]  682 	inc	r0
      0000F9 E5*00            [12]  683 	mov	a,_bp
      0000FB 24 08            [12]  684 	add	a,#0x08
      0000FD F9               [12]  685 	mov	r1,a
      0000FE 74 02            [12]  686 	mov	a,#0x02
      000100 26               [12]  687 	add	a,@r0
      000101 F7               [12]  688 	mov	@r1,a
      000102 E4               [12]  689 	clr	a
      000103 08               [12]  690 	inc	r0
      000104 36               [12]  691 	addc	a,@r0
      000105 09               [12]  692 	inc	r1
      000106 F7               [12]  693 	mov	@r1,a
      000107 08               [12]  694 	inc	r0
      000108 09               [12]  695 	inc	r1
      000109 E6               [12]  696 	mov	a,@r0
      00010A F7               [12]  697 	mov	@r1,a
      00010B 74 02            [12]  698 	mov	a,#0x02
      00010D 2A               [12]  699 	add	a,r2
      00010E FA               [12]  700 	mov	r2,a
      00010F E4               [12]  701 	clr	a
      000110 3B               [12]  702 	addc	a,r3
      000111 FB               [12]  703 	mov	r3,a
      000112 8A 82            [24]  704 	mov	dpl,r2
      000114 8B 83            [24]  705 	mov	dph,r3
      000116 8C F0            [24]  706 	mov	b,r4
      000118 12r00r00         [24]  707 	lcall	__gptrget
      00011B FA               [12]  708 	mov	r2,a
      00011C A3               [24]  709 	inc	dptr
      00011D 12r00r00         [24]  710 	lcall	__gptrget
      000120 FB               [12]  711 	mov	r3,a
      000121 E5*00            [12]  712 	mov	a,_bp
      000123 24 06            [12]  713 	add	a,#0x06
      000125 F8               [12]  714 	mov	r0,a
      000126 E6               [12]  715 	mov	a,@r0
      000127 24r00            [12]  716 	add	a,#_neigh
      000129 FC               [12]  717 	mov	r4,a
      00012A 08               [12]  718 	inc	r0
      00012B E6               [12]  719 	mov	a,@r0
      00012C 34s00            [12]  720 	addc	a,#(_neigh >> 8)
      00012E FD               [12]  721 	mov	r5,a
      00012F 8C 82            [24]  722 	mov	dpl,r4
      000131 8D 83            [24]  723 	mov	dph,r5
      000133 A3               [24]  724 	inc	dptr
      000134 A3               [24]  725 	inc	dptr
      000135 E0               [24]  726 	movx	a,@dptr
      000136 FC               [12]  727 	mov	r4,a
      000137 A3               [24]  728 	inc	dptr
      000138 E0               [24]  729 	movx	a,@dptr
      000139 FD               [12]  730 	mov	r5,a
      00013A EC               [12]  731 	mov	a,r4
      00013B 2A               [12]  732 	add	a,r2
      00013C FA               [12]  733 	mov	r2,a
      00013D ED               [12]  734 	mov	a,r5
      00013E 3B               [12]  735 	addc	a,r3
      00013F FB               [12]  736 	mov	r3,a
      000140 E5*00            [12]  737 	mov	a,_bp
      000142 24 08            [12]  738 	add	a,#0x08
      000144 F8               [12]  739 	mov	r0,a
      000145 86 82            [24]  740 	mov	dpl,@r0
      000147 08               [12]  741 	inc	r0
      000148 86 83            [24]  742 	mov	dph,@r0
      00014A 08               [12]  743 	inc	r0
      00014B 86 F0            [24]  744 	mov	b,@r0
      00014D EA               [12]  745 	mov	a,r2
      00014E 12r00r00         [24]  746 	lcall	__gptrput
      000151 A3               [24]  747 	inc	dptr
      000152 EB               [12]  748 	mov	a,r3
      000153 12r00r00         [24]  749 	lcall	__gptrput
                                    750 ;	walk.c:148: if (t->r < 0) t->r += ROWS;
      000156 A8*00            [24]  751 	mov	r0,_bp
      000158 08               [12]  752 	inc	r0
      000159 86 82            [24]  753 	mov	dpl,@r0
      00015B 08               [12]  754 	inc	r0
      00015C 86 83            [24]  755 	mov	dph,@r0
      00015E 08               [12]  756 	inc	r0
      00015F 86 F0            [24]  757 	mov	b,@r0
      000161 12r00r00         [24]  758 	lcall	__gptrget
      000164 FD               [12]  759 	mov	r5,a
      000165 A3               [24]  760 	inc	dptr
      000166 12r00r00         [24]  761 	lcall	__gptrget
      000169 FC               [12]  762 	mov	r4,a
      00016A EE               [12]  763 	mov	a,r6
      00016B 30 E7 1D         [24]  764 	jnb	acc.7,00104$
      00016E 74 30            [12]  765 	mov	a,#0x30
      000170 2D               [12]  766 	add	a,r5
      000171 FF               [12]  767 	mov	r7,a
      000172 E4               [12]  768 	clr	a
      000173 3C               [12]  769 	addc	a,r4
      000174 FE               [12]  770 	mov	r6,a
      000175 A8*00            [24]  771 	mov	r0,_bp
      000177 08               [12]  772 	inc	r0
      000178 86 82            [24]  773 	mov	dpl,@r0
      00017A 08               [12]  774 	inc	r0
      00017B 86 83            [24]  775 	mov	dph,@r0
      00017D 08               [12]  776 	inc	r0
      00017E 86 F0            [24]  777 	mov	b,@r0
      000180 EF               [12]  778 	mov	a,r7
      000181 12r00r00         [24]  779 	lcall	__gptrput
      000184 A3               [24]  780 	inc	dptr
      000185 EE               [12]  781 	mov	a,r6
      000186 12r00r00         [24]  782 	lcall	__gptrput
      000189 80 27            [24]  783 	sjmp	00105$
      00018B                        784 00104$:
                                    785 ;	walk.c:149: else if (t->r >= ROWS) t->r -= ROWS;
      00018B C3               [12]  786 	clr	c
      00018C ED               [12]  787 	mov	a,r5
      00018D 94 30            [12]  788 	subb	a,#0x30
      00018F EC               [12]  789 	mov	a,r4
      000190 64 80            [12]  790 	xrl	a,#0x80
      000192 94 80            [12]  791 	subb	a,#0x80
      000194 40 1C            [24]  792 	jc	00105$
      000196 ED               [12]  793 	mov	a,r5
      000197 24 D0            [12]  794 	add	a,#0xd0
      000199 FD               [12]  795 	mov	r5,a
      00019A EC               [12]  796 	mov	a,r4
      00019B 34 FF            [12]  797 	addc	a,#0xff
      00019D FC               [12]  798 	mov	r4,a
      00019E A8*00            [24]  799 	mov	r0,_bp
      0001A0 08               [12]  800 	inc	r0
      0001A1 86 82            [24]  801 	mov	dpl,@r0
      0001A3 08               [12]  802 	inc	r0
      0001A4 86 83            [24]  803 	mov	dph,@r0
      0001A6 08               [12]  804 	inc	r0
      0001A7 86 F0            [24]  805 	mov	b,@r0
      0001A9 ED               [12]  806 	mov	a,r5
      0001AA 12r00r00         [24]  807 	lcall	__gptrput
      0001AD A3               [24]  808 	inc	dptr
      0001AE EC               [12]  809 	mov	a,r4
      0001AF 12r00r00         [24]  810 	lcall	__gptrput
      0001B2                        811 00105$:
                                    812 ;	walk.c:150: if (t->c < 0) t->c += COLS;
      0001B2 E5*00            [12]  813 	mov	a,_bp
      0001B4 24 08            [12]  814 	add	a,#0x08
      0001B6 F8               [12]  815 	mov	r0,a
      0001B7 86 82            [24]  816 	mov	dpl,@r0
      0001B9 08               [12]  817 	inc	r0
      0001BA 86 83            [24]  818 	mov	dph,@r0
      0001BC 08               [12]  819 	inc	r0
      0001BD 86 F0            [24]  820 	mov	b,@r0
      0001BF 12r00r00         [24]  821 	lcall	__gptrget
      0001C2 A3               [24]  822 	inc	dptr
      0001C3 12r00r00         [24]  823 	lcall	__gptrget
      0001C6 30 E7 35         [24]  824 	jnb	acc.7,00109$
      0001C9 E5*00            [12]  825 	mov	a,_bp
      0001CB 24 08            [12]  826 	add	a,#0x08
      0001CD F8               [12]  827 	mov	r0,a
      0001CE 86 82            [24]  828 	mov	dpl,@r0
      0001D0 08               [12]  829 	inc	r0
      0001D1 86 83            [24]  830 	mov	dph,@r0
      0001D3 08               [12]  831 	inc	r0
      0001D4 86 F0            [24]  832 	mov	b,@r0
      0001D6 12r00r00         [24]  833 	lcall	__gptrget
      0001D9 FE               [12]  834 	mov	r6,a
      0001DA A3               [24]  835 	inc	dptr
      0001DB 12r00r00         [24]  836 	lcall	__gptrget
      0001DE FF               [12]  837 	mov	r7,a
      0001DF 74 C9            [12]  838 	mov	a,#0xc9
      0001E1 2E               [12]  839 	add	a,r6
      0001E2 FE               [12]  840 	mov	r6,a
      0001E3 E4               [12]  841 	clr	a
      0001E4 3F               [12]  842 	addc	a,r7
      0001E5 FF               [12]  843 	mov	r7,a
      0001E6 E5*00            [12]  844 	mov	a,_bp
      0001E8 24 08            [12]  845 	add	a,#0x08
      0001EA F8               [12]  846 	mov	r0,a
      0001EB 86 82            [24]  847 	mov	dpl,@r0
      0001ED 08               [12]  848 	inc	r0
      0001EE 86 83            [24]  849 	mov	dph,@r0
      0001F0 08               [12]  850 	inc	r0
      0001F1 86 F0            [24]  851 	mov	b,@r0
      0001F3 EE               [12]  852 	mov	a,r6
      0001F4 12r00r00         [24]  853 	lcall	__gptrput
      0001F7 A3               [24]  854 	inc	dptr
      0001F8 EF               [12]  855 	mov	a,r7
      0001F9 12r00r00         [24]  856 	lcall	__gptrput
      0001FC 80 55            [24]  857 	sjmp	00110$
      0001FE                        858 00109$:
                                    859 ;	walk.c:151: else if (t->c >= COLS) t->c -= COLS;
      0001FE E5*00            [12]  860 	mov	a,_bp
      000200 24 08            [12]  861 	add	a,#0x08
      000202 F8               [12]  862 	mov	r0,a
      000203 86 82            [24]  863 	mov	dpl,@r0
      000205 08               [12]  864 	inc	r0
      000206 86 83            [24]  865 	mov	dph,@r0
      000208 08               [12]  866 	inc	r0
      000209 86 F0            [24]  867 	mov	b,@r0
      00020B 12r00r00         [24]  868 	lcall	__gptrget
      00020E FE               [12]  869 	mov	r6,a
      00020F A3               [24]  870 	inc	dptr
      000210 12r00r00         [24]  871 	lcall	__gptrget
      000213 FF               [12]  872 	mov	r7,a
      000214 C3               [12]  873 	clr	c
      000215 EE               [12]  874 	mov	a,r6
      000216 94 C9            [12]  875 	subb	a,#0xc9
      000218 EF               [12]  876 	mov	a,r7
      000219 64 80            [12]  877 	xrl	a,#0x80
      00021B 94 80            [12]  878 	subb	a,#0x80
      00021D 40 34            [24]  879 	jc	00110$
      00021F E5*00            [12]  880 	mov	a,_bp
      000221 24 08            [12]  881 	add	a,#0x08
      000223 F8               [12]  882 	mov	r0,a
      000224 86 82            [24]  883 	mov	dpl,@r0
      000226 08               [12]  884 	inc	r0
      000227 86 83            [24]  885 	mov	dph,@r0
      000229 08               [12]  886 	inc	r0
      00022A 86 F0            [24]  887 	mov	b,@r0
      00022C 12r00r00         [24]  888 	lcall	__gptrget
      00022F FE               [12]  889 	mov	r6,a
      000230 A3               [24]  890 	inc	dptr
      000231 12r00r00         [24]  891 	lcall	__gptrget
      000234 FF               [12]  892 	mov	r7,a
      000235 EE               [12]  893 	mov	a,r6
      000236 24 37            [12]  894 	add	a,#0x37
      000238 FE               [12]  895 	mov	r6,a
      000239 EF               [12]  896 	mov	a,r7
      00023A 34 FF            [12]  897 	addc	a,#0xff
      00023C FF               [12]  898 	mov	r7,a
      00023D E5*00            [12]  899 	mov	a,_bp
      00023F 24 08            [12]  900 	add	a,#0x08
      000241 F8               [12]  901 	mov	r0,a
      000242 86 82            [24]  902 	mov	dpl,@r0
      000244 08               [12]  903 	inc	r0
      000245 86 83            [24]  904 	mov	dph,@r0
      000247 08               [12]  905 	inc	r0
      000248 86 F0            [24]  906 	mov	b,@r0
      00024A EE               [12]  907 	mov	a,r6
      00024B 12r00r00         [24]  908 	lcall	__gptrput
      00024E A3               [24]  909 	inc	dptr
      00024F EF               [12]  910 	mov	a,r7
      000250 12r00r00         [24]  911 	lcall	__gptrput
      000253                        912 00110$:
                                    913 ;	walk.c:153: if (g[t->r][t->c] == 0xaau) return 0u;
      000253 A8*00            [24]  914 	mov	r0,_bp
      000255 08               [12]  915 	inc	r0
      000256 86 82            [24]  916 	mov	dpl,@r0
      000258 08               [12]  917 	inc	r0
      000259 86 83            [24]  918 	mov	dph,@r0
      00025B 08               [12]  919 	inc	r0
      00025C 86 F0            [24]  920 	mov	b,@r0
      00025E 12r00r00         [24]  921 	lcall	__gptrget
      000261 FE               [12]  922 	mov	r6,a
      000262 A3               [24]  923 	inc	dptr
      000263 12r00r00         [24]  924 	lcall	__gptrget
      000266 FF               [12]  925 	mov	r7,a
      000267 C0 06            [24]  926 	push	ar6
      000269 C0 07            [24]  927 	push	ar7
      00026B 90 00 C9         [24]  928 	mov	dptr,#0x00c9
      00026E 12r00r00         [24]  929 	lcall	__mulint
      000271 AE 82            [24]  930 	mov	r6,dpl
      000273 AF 83            [24]  931 	mov	r7,dph
      000275 15 81            [12]  932 	dec	sp
      000277 15 81            [12]  933 	dec	sp
      000279 EE               [12]  934 	mov	a,r6
      00027A 24r00            [12]  935 	add	a,#_g
      00027C FE               [12]  936 	mov	r6,a
      00027D EF               [12]  937 	mov	a,r7
      00027E 34s00            [12]  938 	addc	a,#(_g >> 8)
      000280 FF               [12]  939 	mov	r7,a
      000281 E5*00            [12]  940 	mov	a,_bp
      000283 24 08            [12]  941 	add	a,#0x08
      000285 F8               [12]  942 	mov	r0,a
      000286 86 82            [24]  943 	mov	dpl,@r0
      000288 08               [12]  944 	inc	r0
      000289 86 83            [24]  945 	mov	dph,@r0
      00028B 08               [12]  946 	inc	r0
      00028C 86 F0            [24]  947 	mov	b,@r0
      00028E 12r00r00         [24]  948 	lcall	__gptrget
      000291 FC               [12]  949 	mov	r4,a
      000292 A3               [24]  950 	inc	dptr
      000293 12r00r00         [24]  951 	lcall	__gptrget
      000296 FD               [12]  952 	mov	r5,a
      000297 EC               [12]  953 	mov	a,r4
      000298 2E               [12]  954 	add	a,r6
      000299 F5 82            [12]  955 	mov	dpl,a
      00029B ED               [12]  956 	mov	a,r5
      00029C 3F               [12]  957 	addc	a,r7
      00029D F5 83            [12]  958 	mov	dph,a
      00029F E0               [24]  959 	movx	a,@dptr
      0002A0 FF               [12]  960 	mov	r7,a
      0002A1 BF AA 05         [24]  961 	cjne	r7,#0xaa,00114$
      0002A4 75 82 00         [24]  962 	mov	dpl,#0x00
      0002A7 80 59            [24]  963 	sjmp	00116$
      0002A9                        964 00114$:
                                    965 ;	walk.c:154: else if (g[t->r][t->c] != 0x55u) bang();
      0002A9 A8*00            [24]  966 	mov	r0,_bp
      0002AB 08               [12]  967 	inc	r0
      0002AC 86 82            [24]  968 	mov	dpl,@r0
      0002AE 08               [12]  969 	inc	r0
      0002AF 86 83            [24]  970 	mov	dph,@r0
      0002B1 08               [12]  971 	inc	r0
      0002B2 86 F0            [24]  972 	mov	b,@r0
      0002B4 12r00r00         [24]  973 	lcall	__gptrget
      0002B7 FE               [12]  974 	mov	r6,a
      0002B8 A3               [24]  975 	inc	dptr
      0002B9 12r00r00         [24]  976 	lcall	__gptrget
      0002BC FF               [12]  977 	mov	r7,a
      0002BD C0 06            [24]  978 	push	ar6
      0002BF C0 07            [24]  979 	push	ar7
      0002C1 90 00 C9         [24]  980 	mov	dptr,#0x00c9
      0002C4 12r00r00         [24]  981 	lcall	__mulint
      0002C7 AE 82            [24]  982 	mov	r6,dpl
      0002C9 AF 83            [24]  983 	mov	r7,dph
      0002CB 15 81            [12]  984 	dec	sp
      0002CD 15 81            [12]  985 	dec	sp
      0002CF EE               [12]  986 	mov	a,r6
      0002D0 24r00            [12]  987 	add	a,#_g
      0002D2 FE               [12]  988 	mov	r6,a
      0002D3 EF               [12]  989 	mov	a,r7
      0002D4 34s00            [12]  990 	addc	a,#(_g >> 8)
      0002D6 FF               [12]  991 	mov	r7,a
      0002D7 E5*00            [12]  992 	mov	a,_bp
      0002D9 24 08            [12]  993 	add	a,#0x08
      0002DB F8               [12]  994 	mov	r0,a
      0002DC 86 82            [24]  995 	mov	dpl,@r0
      0002DE 08               [12]  996 	inc	r0
      0002DF 86 83            [24]  997 	mov	dph,@r0
      0002E1 08               [12]  998 	inc	r0
      0002E2 86 F0            [24]  999 	mov	b,@r0
      0002E4 12r00r00         [24] 1000 	lcall	__gptrget
      0002E7 FC               [12] 1001 	mov	r4,a
      0002E8 A3               [24] 1002 	inc	dptr
      0002E9 12r00r00         [24] 1003 	lcall	__gptrget
      0002EC FD               [12] 1004 	mov	r5,a
      0002ED EC               [12] 1005 	mov	a,r4
      0002EE 2E               [12] 1006 	add	a,r6
      0002EF F5 82            [12] 1007 	mov	dpl,a
      0002F1 ED               [12] 1008 	mov	a,r5
      0002F2 3F               [12] 1009 	addc	a,r7
      0002F3 F5 83            [12] 1010 	mov	dph,a
      0002F5 E0               [24] 1011 	movx	a,@dptr
      0002F6 FF               [12] 1012 	mov	r7,a
      0002F7 BF 55 02         [24] 1013 	cjne	r7,#0x55,00148$
      0002FA 80 03            [24] 1014 	sjmp	00115$
      0002FC                       1015 00148$:
      0002FC 12r00r22         [24] 1016 	lcall	_bang
      0002FF                       1017 00115$:
                                   1018 ;	walk.c:156: return 1u;
      0002FF 75 82 01         [24] 1019 	mov	dpl,#0x01
      000302                       1020 00116$:
                                   1021 ;	walk.c:157: }
      000302 85*00 81         [24] 1022 	mov	sp,_bp
      000305 D0*00            [24] 1023 	pop	_bp
      000307 22               [24] 1024 	ret
                                   1025 ;------------------------------------------------------------
                                   1026 ;Allocation info for local variables in function 'walk'
                                   1027 ;------------------------------------------------------------
                                   1028 ;nstart                    Allocated to registers 
                                   1029 ;cur                       Allocated to stack - _bp +10
                                   1030 ;t                         Allocated to stack - _bp +14
                                   1031 ;j                         Allocated to stack - _bp +18
                                   1032 ;f                         Allocated to registers r3 
                                   1033 ;sloc0                     Allocated to stack - _bp +1
                                   1034 ;sloc1                     Allocated to stack - _bp +2
                                   1035 ;sloc2                     Allocated to stack - _bp +3
                                   1036 ;sloc3                     Allocated to stack - _bp +17
                                   1037 ;sloc4                     Allocated to stack - _bp +4
                                   1038 ;sloc5                     Allocated to stack - _bp +5
                                   1039 ;sloc6                     Allocated to stack - _bp +6
                                   1040 ;sloc7                     Allocated to stack - _bp +7
                                   1041 ;------------------------------------------------------------
                                   1042 ;	walk.c:159: static void walk(struct node *nstart) {
                                   1043 ;	-----------------------------------------
                                   1044 ;	 function walk
                                   1045 ;	-----------------------------------------
      000308                       1046 _walk:
      000308 C0*00            [24] 1047 	push	_bp
      00030A E5 81            [12] 1048 	mov	a,sp
      00030C F5*00            [12] 1049 	mov	_bp,a
      00030E 24 12            [12] 1050 	add	a,#0x12
      000310 F5 81            [12] 1051 	mov	sp,a
      000312 AD 82            [24] 1052 	mov	r5,dpl
      000314 AE 83            [24] 1053 	mov	r6,dph
      000316 AF F0            [24] 1054 	mov	r7,b
                                   1055 ;	walk.c:163: cur = *nstart;
      000318 E5*00            [12] 1056 	mov	a,_bp
      00031A 24 0A            [12] 1057 	add	a,#0x0a
      00031C F9               [12] 1058 	mov	r1,a
      00031D FA               [12] 1059 	mov	r2,a
      00031E 7B 00            [12] 1060 	mov	r3,#0x00
      000320 7C 40            [12] 1061 	mov	r4,#0x40
      000322 C0 01            [24] 1062 	push	ar1
      000324 74 04            [12] 1063 	mov	a,#0x04
      000326 C0 E0            [24] 1064 	push	acc
      000328 E4               [12] 1065 	clr	a
      000329 C0 E0            [24] 1066 	push	acc
      00032B C0 05            [24] 1067 	push	ar5
      00032D C0 06            [24] 1068 	push	ar6
      00032F C0 07            [24] 1069 	push	ar7
      000331 8A 82            [24] 1070 	mov	dpl,r2
      000333 8B 83            [24] 1071 	mov	dph,r3
      000335 8C F0            [24] 1072 	mov	b,r4
      000337 12r00r00         [24] 1073 	lcall	___memcpy
      00033A E5 81            [12] 1074 	mov	a,sp
      00033C 24 FB            [12] 1075 	add	a,#0xfb
      00033E F5 81            [12] 1076 	mov	sp,a
      000340 D0 01            [24] 1077 	pop	ar1
                                   1078 ;	walk.c:165: process:
      000342 E5*00            [12] 1079 	mov	a,_bp
      000344 24 06            [12] 1080 	add	a,#0x06
      000346 F8               [12] 1081 	mov	r0,a
      000347 A6 01            [24] 1082 	mov	@r0,ar1
      000349 E5*00            [12] 1083 	mov	a,_bp
      00034B 24 0E            [12] 1084 	add	a,#0x0e
      00034D FE               [12] 1085 	mov	r6,a
      00034E E5*00            [12] 1086 	mov	a,_bp
      000350 24 03            [12] 1087 	add	a,#0x03
      000352 F8               [12] 1088 	mov	r0,a
      000353 A6 01            [24] 1089 	mov	@r0,ar1
      000355 E5*00            [12] 1090 	mov	a,_bp
      000357 24 05            [12] 1091 	add	a,#0x05
      000359 F8               [12] 1092 	mov	r0,a
      00035A A6 01            [24] 1093 	mov	@r0,ar1
      00035C E5*00            [12] 1094 	mov	a,_bp
      00035E 24 04            [12] 1095 	add	a,#0x04
      000360 F8               [12] 1096 	mov	r0,a
      000361 A6 06            [24] 1097 	mov	@r0,ar6
      000363 89 02            [24] 1098 	mov	ar2,r1
      000365 A8*00            [24] 1099 	mov	r0,_bp
      000367 08               [12] 1100 	inc	r0
      000368 A6 06            [24] 1101 	mov	@r0,ar6
      00036A A8*00            [24] 1102 	mov	r0,_bp
      00036C 08               [12] 1103 	inc	r0
      00036D 08               [12] 1104 	inc	r0
      00036E A6 01            [24] 1105 	mov	@r0,ar1
      000370 74 02            [12] 1106 	mov	a,#0x02
      000372 29               [12] 1107 	add	a,r1
      000373 F8               [12] 1108 	mov	r0,a
      000374                       1109 00101$:
                                   1110 ;	walk.c:166: g[cur.r][cur.c] = 0xaau;
      000374 C0 02            [24] 1111 	push	ar2
      000376 87 02            [24] 1112 	mov	ar2,@r1
      000378 09               [12] 1113 	inc	r1
      000379 87 05            [24] 1114 	mov	ar5,@r1
      00037B 19               [12] 1115 	dec	r1
      00037C C0 06            [24] 1116 	push	ar6
      00037E C0 01            [24] 1117 	push	ar1
      000380 C0 00            [24] 1118 	push	ar0
      000382 C0 02            [24] 1119 	push	ar2
      000384 C0 05            [24] 1120 	push	ar5
      000386 90 00 C9         [24] 1121 	mov	dptr,#0x00c9
      000389 12r00r00         [24] 1122 	lcall	__mulint
      00038C AA 82            [24] 1123 	mov	r2,dpl
      00038E AD 83            [24] 1124 	mov	r5,dph
      000390 15 81            [12] 1125 	dec	sp
      000392 15 81            [12] 1126 	dec	sp
      000394 D0 00            [24] 1127 	pop	ar0
      000396 D0 01            [24] 1128 	pop	ar1
      000398 EA               [12] 1129 	mov	a,r2
      000399 24r00            [12] 1130 	add	a,#_g
      00039B FF               [12] 1131 	mov	r7,a
      00039C ED               [12] 1132 	mov	a,r5
      00039D 34s00            [12] 1133 	addc	a,#(_g >> 8)
      00039F FC               [12] 1134 	mov	r4,a
      0003A0 86 02            [24] 1135 	mov	ar2,@r0
      0003A2 08               [12] 1136 	inc	r0
      0003A3 86 05            [24] 1137 	mov	ar5,@r0
      0003A5 18               [12] 1138 	dec	r0
      0003A6 EA               [12] 1139 	mov	a,r2
      0003A7 2F               [12] 1140 	add	a,r7
      0003A8 F5 82            [12] 1141 	mov	dpl,a
      0003AA ED               [12] 1142 	mov	a,r5
      0003AB 3C               [12] 1143 	addc	a,r4
      0003AC F5 83            [12] 1144 	mov	dph,a
      0003AE 74 AA            [12] 1145 	mov	a,#0xaa
      0003B0 F0               [24] 1146 	movx	@dptr,a
                                   1147 ;	walk.c:168: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      0003B1 86 02            [24] 1148 	mov	ar2,@r0
      0003B3 08               [12] 1149 	inc	r0
      0003B4 86 05            [24] 1150 	mov	ar5,@r0
      0003B6 18               [12] 1151 	dec	r0
      0003B7 74 01            [12] 1152 	mov	a,#0x01
      0003B9 2A               [12] 1153 	add	a,r2
      0003BA FF               [12] 1154 	mov	r7,a
      0003BB E4               [12] 1155 	clr	a
      0003BC 3D               [12] 1156 	addc	a,r5
      0003BD FC               [12] 1157 	mov	r4,a
      0003BE 87 02            [24] 1158 	mov	ar2,@r1
      0003C0 09               [12] 1159 	inc	r1
      0003C1 87 05            [24] 1160 	mov	ar5,@r1
      0003C3 19               [12] 1161 	dec	r1
      0003C4 74 04            [12] 1162 	mov	a,#0x04
      0003C6 2A               [12] 1163 	add	a,r2
      0003C7 FA               [12] 1164 	mov	r2,a
      0003C8 E4               [12] 1165 	clr	a
      0003C9 3D               [12] 1166 	addc	a,r5
      0003CA FD               [12] 1167 	mov	r5,a
      0003CB C0 02            [24] 1168 	push	ar2
      0003CD C0 01            [24] 1169 	push	ar1
      0003CF C0 00            [24] 1170 	push	ar0
      0003D1 C0 07            [24] 1171 	push	ar7
      0003D3 C0 04            [24] 1172 	push	ar4
      0003D5 C0 02            [24] 1173 	push	ar2
      0003D7 C0 05            [24] 1174 	push	ar5
      0003D9 74r0D            [12] 1175 	mov	a,#___str_1
      0003DB C0 E0            [24] 1176 	push	acc
      0003DD 74s00            [12] 1177 	mov	a,#(___str_1 >> 8)
      0003DF C0 E0            [24] 1178 	push	acc
      0003E1 74 80            [12] 1179 	mov	a,#0x80
      0003E3 C0 E0            [24] 1180 	push	acc
      0003E5 12r00r00         [24] 1181 	lcall	_printf
      0003E8 E5 81            [12] 1182 	mov	a,sp
      0003EA 24 F9            [12] 1183 	add	a,#0xf9
      0003EC F5 81            [12] 1184 	mov	sp,a
                                   1185 ;	walk.c:169: setOE(OE76_MASK7);
      0003EE 75 82 80         [24] 1186 	mov	dpl,#0x80
      0003F1 12r00r2F         [24] 1187 	lcall	_setOE
      0003F4 D0 00            [24] 1188 	pop	ar0
      0003F6 D0 01            [24] 1189 	pop	ar1
      0003F8 D0 02            [24] 1190 	pop	ar2
      0003FA D0 06            [24] 1191 	pop	ar6
                                   1192 ;	walk.c:197: return;
      0003FC D0 02            [24] 1193 	pop	ar2
                                   1194 ;	walk.c:171: next:
      0003FE                       1195 00102$:
                                   1196 ;	walk.c:172: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003FE C0 02            [24] 1197 	push	ar2
      000400 86 07            [24] 1198 	mov	ar7,@r0
      000402 08               [12] 1199 	inc	r0
      000403 86 04            [24] 1200 	mov	ar4,@r0
      000405 18               [12] 1201 	dec	r0
      000406 87 02            [24] 1202 	mov	ar2,@r1
      000408 09               [12] 1203 	inc	r1
      000409 87 05            [24] 1204 	mov	ar5,@r1
      00040B 19               [12] 1205 	dec	r1
      00040C C0 06            [24] 1206 	push	ar6
      00040E C0 02            [24] 1207 	push	ar2
      000410 C0 01            [24] 1208 	push	ar1
      000412 C0 00            [24] 1209 	push	ar0
      000414 C0 07            [24] 1210 	push	ar7
      000416 C0 04            [24] 1211 	push	ar4
      000418 C0 02            [24] 1212 	push	ar2
      00041A C0 05            [24] 1213 	push	ar5
      00041C 90rBCr70         [24] 1214 	mov	dptr,#_sp
      00041F E0               [24] 1215 	movx	a,@dptr
      000420 C0 E0            [24] 1216 	push	acc
      000422 A3               [24] 1217 	inc	dptr
      000423 E0               [24] 1218 	movx	a,@dptr
      000424 C0 E0            [24] 1219 	push	acc
      000426 74r17            [12] 1220 	mov	a,#___str_2
      000428 C0 E0            [24] 1221 	push	acc
      00042A 74s00            [12] 1222 	mov	a,#(___str_2 >> 8)
      00042C C0 E0            [24] 1223 	push	acc
      00042E 74 80            [12] 1224 	mov	a,#0x80
      000430 C0 E0            [24] 1225 	push	acc
      000432 12r00r00         [24] 1226 	lcall	_printf
      000435 E5 81            [12] 1227 	mov	a,sp
      000437 24 F7            [12] 1228 	add	a,#0xf7
      000439 F5 81            [12] 1229 	mov	sp,a
                                   1230 ;	walk.c:173: unsetOE(OE76_MASK7 | OE76_MASK6);
      00043B 75 82 C0         [24] 1231 	mov	dpl,#0xc0
      00043E 12r00r48         [24] 1232 	lcall	_unsetOE
      000441 D0 00            [24] 1233 	pop	ar0
      000443 D0 01            [24] 1234 	pop	ar1
      000445 D0 02            [24] 1235 	pop	ar2
      000447 D0 06            [24] 1236 	pop	ar6
                                   1237 ;	walk.c:175: for (j = 0u, f = 0u; j < NMAX; j++) {
      000449 7B 00            [12] 1238 	mov	r3,#0x00
      00044B C0 00            [24] 1239 	push	ar0
      00044D E5*00            [12] 1240 	mov	a,_bp
      00044F 24 12            [12] 1241 	add	a,#0x12
      000451 F8               [12] 1242 	mov	r0,a
      000452 76 00            [12] 1243 	mov	@r0,#0x00
      000454 D0 00            [24] 1244 	pop	ar0
                                   1245 ;	walk.c:197: return;
      000456 D0 02            [24] 1246 	pop	ar2
                                   1247 ;	walk.c:175: for (j = 0u, f = 0u; j < NMAX; j++) {
      000458                       1248 00119$:
      000458 C0 00            [24] 1249 	push	ar0
      00045A E5*00            [12] 1250 	mov	a,_bp
      00045C 24 12            [12] 1251 	add	a,#0x12
      00045E F8               [12] 1252 	mov	r0,a
      00045F B6 10 00         [24] 1253 	cjne	@r0,#0x10,00159$
      000462                       1254 00159$:
      000462 D0 00            [24] 1255 	pop	ar0
      000464 50 7A            [24] 1256 	jnc	00106$
                                   1257 ;	walk.c:176: if (!update(&t, &cur, j)) continue;
      000466 C0 02            [24] 1258 	push	ar2
      000468 C0 00            [24] 1259 	push	ar0
      00046A E5*00            [12] 1260 	mov	a,_bp
      00046C 24 06            [12] 1261 	add	a,#0x06
      00046E F8               [12] 1262 	mov	r0,a
      00046F C0 01            [24] 1263 	push	ar1
      000471 E5*00            [12] 1264 	mov	a,_bp
      000473 24 07            [12] 1265 	add	a,#0x07
      000475 F9               [12] 1266 	mov	r1,a
      000476 E6               [12] 1267 	mov	a,@r0
      000477 F7               [12] 1268 	mov	@r1,a
      000478 09               [12] 1269 	inc	r1
      000479 77 00            [12] 1270 	mov	@r1,#0x00
      00047B 09               [12] 1271 	inc	r1
      00047C 77 40            [12] 1272 	mov	@r1,#0x40
      00047E D0 01            [24] 1273 	pop	ar1
      000480 D0 00            [24] 1274 	pop	ar0
      000482 8E 04            [24] 1275 	mov	ar4,r6
      000484 7D 00            [12] 1276 	mov	r5,#0x00
      000486 7F 40            [12] 1277 	mov	r7,#0x40
      000488 C0 06            [24] 1278 	push	ar6
      00048A C0 03            [24] 1279 	push	ar3
      00048C C0 02            [24] 1280 	push	ar2
      00048E C0 01            [24] 1281 	push	ar1
      000490 C0 00            [24] 1282 	push	ar0
      000492 85 00 F0         [24] 1283 	mov	b,ar0
      000495 E5*00            [12] 1284 	mov	a,_bp
      000497 24 12            [12] 1285 	add	a,#0x12
      000499 F8               [12] 1286 	mov	r0,a
      00049A E6               [12] 1287 	mov	a,@r0
      00049B C0 E0            [24] 1288 	push	acc
      00049D A8 F0            [24] 1289 	mov	r0,b
      00049F 85 00 F0         [24] 1290 	mov	b,ar0
      0004A2 E5*00            [12] 1291 	mov	a,_bp
      0004A4 24 07            [12] 1292 	add	a,#0x07
      0004A6 F8               [12] 1293 	mov	r0,a
      0004A7 E6               [12] 1294 	mov	a,@r0
      0004A8 C0 E0            [24] 1295 	push	acc
      0004AA 08               [12] 1296 	inc	r0
      0004AB E6               [12] 1297 	mov	a,@r0
      0004AC C0 E0            [24] 1298 	push	acc
      0004AE 08               [12] 1299 	inc	r0
      0004AF E6               [12] 1300 	mov	a,@r0
      0004B0 C0 E0            [24] 1301 	push	acc
      0004B2 8C 82            [24] 1302 	mov	dpl,r4
      0004B4 8D 83            [24] 1303 	mov	dph,r5
      0004B6 8F F0            [24] 1304 	mov	b,r7
      0004B8 12r00r7B         [24] 1305 	lcall	_update
      0004BB AF 82            [24] 1306 	mov	r7,dpl
      0004BD E5 81            [12] 1307 	mov	a,sp
      0004BF 24 FC            [12] 1308 	add	a,#0xfc
      0004C1 F5 81            [12] 1309 	mov	sp,a
      0004C3 D0 00            [24] 1310 	pop	ar0
      0004C5 D0 01            [24] 1311 	pop	ar1
      0004C7 D0 02            [24] 1312 	pop	ar2
      0004C9 D0 03            [24] 1313 	pop	ar3
      0004CB D0 06            [24] 1314 	pop	ar6
      0004CD D0 02            [24] 1315 	pop	ar2
      0004CF EF               [12] 1316 	mov	a,r7
      0004D0 60 01            [24] 1317 	jz	00105$
                                   1318 ;	walk.c:177: f++;
      0004D2 0B               [12] 1319 	inc	r3
      0004D3                       1320 00105$:
                                   1321 ;	walk.c:175: for (j = 0u, f = 0u; j < NMAX; j++) {
      0004D3 C0 00            [24] 1322 	push	ar0
      0004D5 E5*00            [12] 1323 	mov	a,_bp
      0004D7 24 12            [12] 1324 	add	a,#0x12
      0004D9 F8               [12] 1325 	mov	r0,a
      0004DA 06               [12] 1326 	inc	@r0
      0004DB D0 00            [24] 1327 	pop	ar0
      0004DD 02r04r58         [24] 1328 	ljmp	00119$
      0004E0                       1329 00106$:
                                   1330 ;	walk.c:180: if (f) {
      0004E0 EB               [12] 1331 	mov	a,r3
      0004E1 70 03            [24] 1332 	jnz	00162$
      0004E3 02r05rFA         [24] 1333 	ljmp	00115$
      0004E6                       1334 00162$:
                                   1335 ;	walk.c:181: while (1) {
      0004E6                       1336 00112$:
                                   1337 ;	walk.c:182: j = (uint8_t)(rand() % NMAX);
      0004E6 C0 02            [24] 1338 	push	ar2
      0004E8 C0 06            [24] 1339 	push	ar6
      0004EA C0 02            [24] 1340 	push	ar2
      0004EC C0 01            [24] 1341 	push	ar1
      0004EE C0 00            [24] 1342 	push	ar0
      0004F0 12r00r00         [24] 1343 	lcall	_rand
      0004F3 AD 82            [24] 1344 	mov	r5,dpl
      0004F5 D0 00            [24] 1345 	pop	ar0
      0004F7 D0 01            [24] 1346 	pop	ar1
      0004F9 D0 02            [24] 1347 	pop	ar2
      0004FB D0 06            [24] 1348 	pop	ar6
      0004FD 53 05 0F         [24] 1349 	anl	ar5,#0x0f
      000500 8D 04            [24] 1350 	mov	ar4,r5
                                   1351 ;	walk.c:183: if (!update(&t, &cur, j)) continue;
      000502 C0 00            [24] 1352 	push	ar0
      000504 E5*00            [12] 1353 	mov	a,_bp
      000506 24 05            [12] 1354 	add	a,#0x05
      000508 F8               [12] 1355 	mov	r0,a
      000509 C0 01            [24] 1356 	push	ar1
      00050B E5*00            [12] 1357 	mov	a,_bp
      00050D 24 07            [12] 1358 	add	a,#0x07
      00050F F9               [12] 1359 	mov	r1,a
      000510 E6               [12] 1360 	mov	a,@r0
      000511 F7               [12] 1361 	mov	@r1,a
      000512 09               [12] 1362 	inc	r1
      000513 77 00            [12] 1363 	mov	@r1,#0x00
      000515 09               [12] 1364 	inc	r1
      000516 77 40            [12] 1365 	mov	@r1,#0x40
      000518 D0 01            [24] 1366 	pop	ar1
      00051A E5*00            [12] 1367 	mov	a,_bp
      00051C 24 04            [12] 1368 	add	a,#0x04
      00051E F8               [12] 1369 	mov	r0,a
      00051F 86 02            [24] 1370 	mov	ar2,@r0
      000521 7D 00            [12] 1371 	mov	r5,#0x00
      000523 7F 40            [12] 1372 	mov	r7,#0x40
      000525 D0 00            [24] 1373 	pop	ar0
      000527 C0 06            [24] 1374 	push	ar6
      000529 C0 02            [24] 1375 	push	ar2
      00052B C0 01            [24] 1376 	push	ar1
      00052D C0 00            [24] 1377 	push	ar0
      00052F C0 04            [24] 1378 	push	ar4
      000531 85 00 F0         [24] 1379 	mov	b,ar0
      000534 E5*00            [12] 1380 	mov	a,_bp
      000536 24 07            [12] 1381 	add	a,#0x07
      000538 F8               [12] 1382 	mov	r0,a
      000539 E6               [12] 1383 	mov	a,@r0
      00053A C0 E0            [24] 1384 	push	acc
      00053C 08               [12] 1385 	inc	r0
      00053D E6               [12] 1386 	mov	a,@r0
      00053E C0 E0            [24] 1387 	push	acc
      000540 08               [12] 1388 	inc	r0
      000541 E6               [12] 1389 	mov	a,@r0
      000542 C0 E0            [24] 1390 	push	acc
      000544 8A 82            [24] 1391 	mov	dpl,r2
      000546 8D 83            [24] 1392 	mov	dph,r5
      000548 8F F0            [24] 1393 	mov	b,r7
      00054A 12r00r7B         [24] 1394 	lcall	_update
      00054D AF 82            [24] 1395 	mov	r7,dpl
      00054F E5 81            [12] 1396 	mov	a,sp
      000551 24 FC            [12] 1397 	add	a,#0xfc
      000553 F5 81            [12] 1398 	mov	sp,a
      000555 D0 00            [24] 1399 	pop	ar0
      000557 D0 01            [24] 1400 	pop	ar1
      000559 D0 02            [24] 1401 	pop	ar2
      00055B D0 06            [24] 1402 	pop	ar6
      00055D D0 02            [24] 1403 	pop	ar2
      00055F EF               [12] 1404 	mov	a,r7
      000560 60 84            [24] 1405 	jz	00112$
                                   1406 ;	walk.c:184: if (!stpush(&cur)) bang();
      000562 8A 04            [24] 1407 	mov	ar4,r2
      000564 7D 00            [12] 1408 	mov	r5,#0x00
      000566 7F 40            [12] 1409 	mov	r7,#0x40
      000568 8C 82            [24] 1410 	mov	dpl,r4
      00056A 8D 83            [24] 1411 	mov	dph,r5
      00056C 8F F0            [24] 1412 	mov	b,r7
      00056E C0 06            [24] 1413 	push	ar6
      000570 C0 02            [24] 1414 	push	ar2
      000572 C0 01            [24] 1415 	push	ar1
      000574 C0 00            [24] 1416 	push	ar0
      000576 12r0Ar64         [24] 1417 	lcall	_stpush
      000579 E5 82            [12] 1418 	mov	a,dpl
      00057B D0 00            [24] 1419 	pop	ar0
      00057D D0 01            [24] 1420 	pop	ar1
      00057F D0 02            [24] 1421 	pop	ar2
      000581 D0 06            [24] 1422 	pop	ar6
      000583 70 13            [24] 1423 	jnz	00110$
      000585 C0 06            [24] 1424 	push	ar6
      000587 C0 02            [24] 1425 	push	ar2
      000589 C0 01            [24] 1426 	push	ar1
      00058B C0 00            [24] 1427 	push	ar0
      00058D 12r00r22         [24] 1428 	lcall	_bang
      000590 D0 00            [24] 1429 	pop	ar0
      000592 D0 01            [24] 1430 	pop	ar1
      000594 D0 02            [24] 1431 	pop	ar2
      000596 D0 06            [24] 1432 	pop	ar6
      000598                       1433 00110$:
                                   1434 ;	walk.c:185: cur = t;
      000598 C0 02            [24] 1435 	push	ar2
      00059A C0 00            [24] 1436 	push	ar0
      00059C A8*00            [24] 1437 	mov	r0,_bp
      00059E 08               [12] 1438 	inc	r0
      00059F C0 01            [24] 1439 	push	ar1
      0005A1 E5*00            [12] 1440 	mov	a,_bp
      0005A3 24 07            [12] 1441 	add	a,#0x07
      0005A5 F9               [12] 1442 	mov	r1,a
      0005A6 E6               [12] 1443 	mov	a,@r0
      0005A7 F7               [12] 1444 	mov	@r1,a
      0005A8 09               [12] 1445 	inc	r1
      0005A9 77 00            [12] 1446 	mov	@r1,#0x00
      0005AB 09               [12] 1447 	inc	r1
      0005AC 77 40            [12] 1448 	mov	@r1,#0x40
      0005AE D0 01            [24] 1449 	pop	ar1
      0005B0 A8*00            [24] 1450 	mov	r0,_bp
      0005B2 08               [12] 1451 	inc	r0
      0005B3 08               [12] 1452 	inc	r0
      0005B4 86 02            [24] 1453 	mov	ar2,@r0
      0005B6 7B 00            [12] 1454 	mov	r3,#0x00
      0005B8 7F 40            [12] 1455 	mov	r7,#0x40
      0005BA D0 00            [24] 1456 	pop	ar0
      0005BC C0 06            [24] 1457 	push	ar6
      0005BE C0 02            [24] 1458 	push	ar2
      0005C0 C0 01            [24] 1459 	push	ar1
      0005C2 C0 00            [24] 1460 	push	ar0
      0005C4 74 04            [12] 1461 	mov	a,#0x04
      0005C6 C0 E0            [24] 1462 	push	acc
      0005C8 E4               [12] 1463 	clr	a
      0005C9 C0 E0            [24] 1464 	push	acc
      0005CB 85 00 F0         [24] 1465 	mov	b,ar0
      0005CE E5*00            [12] 1466 	mov	a,_bp
      0005D0 24 07            [12] 1467 	add	a,#0x07
      0005D2 F8               [12] 1468 	mov	r0,a
      0005D3 E6               [12] 1469 	mov	a,@r0
      0005D4 C0 E0            [24] 1470 	push	acc
      0005D6 08               [12] 1471 	inc	r0
      0005D7 E6               [12] 1472 	mov	a,@r0
      0005D8 C0 E0            [24] 1473 	push	acc
      0005DA 08               [12] 1474 	inc	r0
      0005DB E6               [12] 1475 	mov	a,@r0
      0005DC C0 E0            [24] 1476 	push	acc
      0005DE 8A 82            [24] 1477 	mov	dpl,r2
      0005E0 8B 83            [24] 1478 	mov	dph,r3
      0005E2 8F F0            [24] 1479 	mov	b,r7
      0005E4 12r00r00         [24] 1480 	lcall	___memcpy
      0005E7 E5 81            [12] 1481 	mov	a,sp
      0005E9 24 FB            [12] 1482 	add	a,#0xfb
      0005EB F5 81            [12] 1483 	mov	sp,a
      0005ED D0 00            [24] 1484 	pop	ar0
      0005EF D0 01            [24] 1485 	pop	ar1
      0005F1 D0 02            [24] 1486 	pop	ar2
      0005F3 D0 06            [24] 1487 	pop	ar6
                                   1488 ;	walk.c:186: goto process;
      0005F5 D0 02            [24] 1489 	pop	ar2
      0005F7 02r03r74         [24] 1490 	ljmp	00101$
      0005FA                       1491 00115$:
                                   1492 ;	walk.c:190: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005FA 86 05            [24] 1493 	mov	ar5,@r0
      0005FC 08               [12] 1494 	inc	r0
      0005FD 86 07            [24] 1495 	mov	ar7,@r0
      0005FF 18               [12] 1496 	dec	r0
      000600 0D               [12] 1497 	inc	r5
      000601 BD 00 01         [24] 1498 	cjne	r5,#0x00,00165$
      000604 0F               [12] 1499 	inc	r7
      000605                       1500 00165$:
      000605 87 03            [24] 1501 	mov	ar3,@r1
      000607 09               [12] 1502 	inc	r1
      000608 87 04            [24] 1503 	mov	ar4,@r1
      00060A 19               [12] 1504 	dec	r1
      00060B 74 04            [12] 1505 	mov	a,#0x04
      00060D 2B               [12] 1506 	add	a,r3
      00060E FB               [12] 1507 	mov	r3,a
      00060F E4               [12] 1508 	clr	a
      000610 3C               [12] 1509 	addc	a,r4
      000611 FC               [12] 1510 	mov	r4,a
      000612 C0 06            [24] 1511 	push	ar6
      000614 C0 02            [24] 1512 	push	ar2
      000616 C0 01            [24] 1513 	push	ar1
      000618 C0 00            [24] 1514 	push	ar0
      00061A C0 05            [24] 1515 	push	ar5
      00061C C0 07            [24] 1516 	push	ar7
      00061E C0 03            [24] 1517 	push	ar3
      000620 C0 04            [24] 1518 	push	ar4
      000622 74r2A            [12] 1519 	mov	a,#___str_3
      000624 C0 E0            [24] 1520 	push	acc
      000626 74s00            [12] 1521 	mov	a,#(___str_3 >> 8)
      000628 C0 E0            [24] 1522 	push	acc
      00062A 74 80            [12] 1523 	mov	a,#0x80
      00062C C0 E0            [24] 1524 	push	acc
      00062E 12r00r00         [24] 1525 	lcall	_printf
      000631 E5 81            [12] 1526 	mov	a,sp
      000633 24 F9            [12] 1527 	add	a,#0xf9
      000635 F5 81            [12] 1528 	mov	sp,a
                                   1529 ;	walk.c:191: setOE(OE76_MASK6);
      000637 75 82 40         [24] 1530 	mov	dpl,#0x40
      00063A 12r00r2F         [24] 1531 	lcall	_setOE
      00063D D0 00            [24] 1532 	pop	ar0
      00063F D0 01            [24] 1533 	pop	ar1
      000641 D0 02            [24] 1534 	pop	ar2
      000643 D0 06            [24] 1535 	pop	ar6
                                   1536 ;	walk.c:193: if (stpop(&cur)) goto next;
      000645 C0 00            [24] 1537 	push	ar0
      000647 E5*00            [12] 1538 	mov	a,_bp
      000649 24 03            [12] 1539 	add	a,#0x03
      00064B F8               [12] 1540 	mov	r0,a
      00064C 86 04            [24] 1541 	mov	ar4,@r0
      00064E 7D 00            [12] 1542 	mov	r5,#0x00
      000650 7F 40            [12] 1543 	mov	r7,#0x40
      000652 D0 00            [24] 1544 	pop	ar0
      000654 8C 82            [24] 1545 	mov	dpl,r4
      000656 8D 83            [24] 1546 	mov	dph,r5
      000658 8F F0            [24] 1547 	mov	b,r7
      00065A C0 06            [24] 1548 	push	ar6
      00065C C0 02            [24] 1549 	push	ar2
      00065E C0 01            [24] 1550 	push	ar1
      000660 C0 00            [24] 1551 	push	ar0
      000662 12r0ArC5         [24] 1552 	lcall	_stpop
      000665 E5 82            [12] 1553 	mov	a,dpl
      000667 D0 00            [24] 1554 	pop	ar0
      000669 D0 01            [24] 1555 	pop	ar1
      00066B D0 02            [24] 1556 	pop	ar2
      00066D D0 06            [24] 1557 	pop	ar6
      00066F 60 03            [24] 1558 	jz	00166$
      000671 02r03rFE         [24] 1559 	ljmp	00102$
      000674                       1560 00166$:
                                   1561 ;	walk.c:195: unsetOE(OE76_MASK7 | OE76_MASK6);
      000674 75 82 C0         [24] 1562 	mov	dpl,#0xc0
      000677 12r00r48         [24] 1563 	lcall	_unsetOE
                                   1564 ;	walk.c:197: return;
                                   1565 ;	walk.c:198: }
      00067A 85*00 81         [24] 1566 	mov	sp,_bp
      00067D D0*00            [24] 1567 	pop	_bp
      00067F 22               [24] 1568 	ret
                                   1569 ;------------------------------------------------------------
                                   1570 ;Allocation info for local variables in function 'main'
                                   1571 ;------------------------------------------------------------
                                   1572 ;initial                   Allocated to stack - _bp +7
                                   1573 ;N                         Allocated to stack - _bp +11
                                   1574 ;i                         Allocated to stack - _bp +5
                                   1575 ;j                         Allocated to registers r2 r6 
                                   1576 ;sloc0                     Allocated to stack - _bp +1
                                   1577 ;sloc1                     Allocated to stack - _bp +3
                                   1578 ;sloc2                     Allocated to stack - _bp +15
                                   1579 ;------------------------------------------------------------
                                   1580 ;	walk.c:200: void main(void) {
                                   1581 ;	-----------------------------------------
                                   1582 ;	 function main
                                   1583 ;	-----------------------------------------
      000680                       1584 _main:
      000680 C0*00            [24] 1585 	push	_bp
      000682 E5 81            [12] 1586 	mov	a,sp
      000684 F5*00            [12] 1587 	mov	_bp,a
      000686 24 0C            [12] 1588 	add	a,#0x0c
      000688 F5 81            [12] 1589 	mov	sp,a
                                   1590 ;	walk.c:205: i0 = 1u;
      00068A 78r00            [12] 1591 	mov	r0,#_i0
      00068C 76 01            [12] 1592 	mov	@r0,#0x01
                                   1593 ;	walk.c:207: P1_7 = 1;
                                   1594 ;	assignBit
      00068E D2 97            [12] 1595 	setb	_P1_7
                                   1596 ;	walk.c:208: IT0 = 1;
                                   1597 ;	assignBit
      000690 D2 88            [12] 1598 	setb	_IT0
                                   1599 ;	walk.c:209: EX0 = 1;
                                   1600 ;	assignBit
      000692 D2 A8            [12] 1601 	setb	_EX0
                                   1602 ;	walk.c:210: EA = 1;
                                   1603 ;	assignBit
      000694 D2 AF            [12] 1604 	setb	_EA
                                   1605 ;	walk.c:212: srand(RND);
      000696 90 80 00         [24] 1606 	mov	dptr,#_RND
      000699 E0               [24] 1607 	movx	a,@dptr
      00069A FE               [12] 1608 	mov	r6,a
      00069B A3               [24] 1609 	inc	dptr
      00069C E0               [24] 1610 	movx	a,@dptr
      00069D FF               [12] 1611 	mov	r7,a
      00069E 8E 82            [24] 1612 	mov	dpl,r6
      0006A0 8F 83            [24] 1613 	mov	dph,r7
      0006A2 12r00r00         [24] 1614 	lcall	_srand
                                   1615 ;	walk.c:213: stinit();
      0006A5 12r0Ar5B         [24] 1616 	lcall	_stinit
                                   1617 ;	walk.c:215: puts("\033[2J\033[?25l");
      0006A8 90r00r34         [24] 1618 	mov	dptr,#___str_4
      0006AB 75 F0 80         [24] 1619 	mov	b,#0x80
      0006AE 12r00r00         [24] 1620 	lcall	_puts
                                   1621 ;	walk.c:217: while (i0) {
      0006B1 E5*00            [12] 1622 	mov	a,_bp
      0006B3 24 07            [12] 1623 	add	a,#0x07
      0006B5 F9               [12] 1624 	mov	r1,a
      0006B6 FF               [12] 1625 	mov	r7,a
      0006B7 E5*00            [12] 1626 	mov	a,_bp
      0006B9 24 0B            [12] 1627 	add	a,#0x0b
      0006BB F8               [12] 1628 	mov	r0,a
      0006BC E4               [12] 1629 	clr	a
      0006BD F6               [12] 1630 	mov	@r0,a
      0006BE 08               [12] 1631 	inc	r0
      0006BF F6               [12] 1632 	mov	@r0,a
      0006C0                       1633 00108$:
      0006C0 78r00            [12] 1634 	mov	r0,#_i0
      0006C2 E6               [12] 1635 	mov	a,@r0
      0006C3 70 03            [24] 1636 	jnz	00182$
      0006C5 02r0Ar47         [24] 1637 	ljmp	00110$
      0006C8                       1638 00182$:
                                   1639 ;	walk.c:218: for (i = 0; i < ROWS; i++)
      0006C8 7B 00            [12] 1640 	mov	r3,#0x00
      0006CA 7C 00            [12] 1641 	mov	r4,#0x00
      0006CC A8*00            [24] 1642 	mov	r0,_bp
      0006CE 08               [12] 1643 	inc	r0
      0006CF E4               [12] 1644 	clr	a
      0006D0 F6               [12] 1645 	mov	@r0,a
      0006D1 08               [12] 1646 	inc	r0
      0006D2 F6               [12] 1647 	mov	@r0,a
                                   1648 ;	walk.c:219: for (j = 0; j < COLS; j++)
      0006D3                       1649 00125$:
      0006D3 A8*00            [24] 1650 	mov	r0,_bp
      0006D5 08               [12] 1651 	inc	r0
      0006D6 C0 01            [24] 1652 	push	ar1
      0006D8 E5*00            [12] 1653 	mov	a,_bp
      0006DA 24 03            [12] 1654 	add	a,#0x03
      0006DC F9               [12] 1655 	mov	r1,a
      0006DD E6               [12] 1656 	mov	a,@r0
      0006DE 24r00            [12] 1657 	add	a,#_g
      0006E0 F7               [12] 1658 	mov	@r1,a
      0006E1 08               [12] 1659 	inc	r0
      0006E2 E6               [12] 1660 	mov	a,@r0
      0006E3 34s00            [12] 1661 	addc	a,#(_g >> 8)
      0006E5 09               [12] 1662 	inc	r1
      0006E6 F7               [12] 1663 	mov	@r1,a
      0006E7 D0 01            [24] 1664 	pop	ar1
      0006E9 7A 00            [12] 1665 	mov	r2,#0x00
      0006EB 7E 00            [12] 1666 	mov	r6,#0x00
      0006ED                       1667 00112$:
                                   1668 ;	walk.c:220: g[i][j] = 0x55u;
      0006ED E5*00            [12] 1669 	mov	a,_bp
      0006EF 24 03            [12] 1670 	add	a,#0x03
      0006F1 F8               [12] 1671 	mov	r0,a
      0006F2 EA               [12] 1672 	mov	a,r2
      0006F3 26               [12] 1673 	add	a,@r0
      0006F4 F5 82            [12] 1674 	mov	dpl,a
      0006F6 EE               [12] 1675 	mov	a,r6
      0006F7 08               [12] 1676 	inc	r0
      0006F8 36               [12] 1677 	addc	a,@r0
      0006F9 F5 83            [12] 1678 	mov	dph,a
      0006FB 74 55            [12] 1679 	mov	a,#0x55
      0006FD F0               [24] 1680 	movx	@dptr,a
                                   1681 ;	walk.c:219: for (j = 0; j < COLS; j++)
      0006FE 0A               [12] 1682 	inc	r2
      0006FF BA 00 01         [24] 1683 	cjne	r2,#0x00,00183$
      000702 0E               [12] 1684 	inc	r6
      000703                       1685 00183$:
      000703 C3               [12] 1686 	clr	c
      000704 EA               [12] 1687 	mov	a,r2
      000705 94 C9            [12] 1688 	subb	a,#0xc9
      000707 EE               [12] 1689 	mov	a,r6
      000708 64 80            [12] 1690 	xrl	a,#0x80
      00070A 94 80            [12] 1691 	subb	a,#0x80
      00070C 40 DF            [24] 1692 	jc	00112$
                                   1693 ;	walk.c:218: for (i = 0; i < ROWS; i++)
      00070E A8*00            [24] 1694 	mov	r0,_bp
      000710 08               [12] 1695 	inc	r0
      000711 74 C9            [12] 1696 	mov	a,#0xc9
      000713 26               [12] 1697 	add	a,@r0
      000714 F6               [12] 1698 	mov	@r0,a
      000715 E4               [12] 1699 	clr	a
      000716 08               [12] 1700 	inc	r0
      000717 36               [12] 1701 	addc	a,@r0
      000718 F6               [12] 1702 	mov	@r0,a
      000719 0B               [12] 1703 	inc	r3
      00071A BB 00 01         [24] 1704 	cjne	r3,#0x00,00185$
      00071D 0C               [12] 1705 	inc	r4
      00071E                       1706 00185$:
      00071E C3               [12] 1707 	clr	c
      00071F EB               [12] 1708 	mov	a,r3
      000720 94 30            [12] 1709 	subb	a,#0x30
      000722 EC               [12] 1710 	mov	a,r4
      000723 64 80            [12] 1711 	xrl	a,#0x80
      000725 94 80            [12] 1712 	subb	a,#0x80
      000727 40 AA            [24] 1713 	jc	00125$
                                   1714 ;	walk.c:222: initial.r = rand() % ROWS;
      000729 E5*00            [12] 1715 	mov	a,_bp
      00072B 24 07            [12] 1716 	add	a,#0x07
      00072D F8               [12] 1717 	mov	r0,a
      00072E C0 07            [24] 1718 	push	ar7
      000730 C0 01            [24] 1719 	push	ar1
      000732 C0 00            [24] 1720 	push	ar0
      000734 12r00r00         [24] 1721 	lcall	_rand
      000737 AD 82            [24] 1722 	mov	r5,dpl
      000739 AE 83            [24] 1723 	mov	r6,dph
      00073B 74 30            [12] 1724 	mov	a,#0x30
      00073D C0 E0            [24] 1725 	push	acc
      00073F E4               [12] 1726 	clr	a
      000740 C0 E0            [24] 1727 	push	acc
      000742 8D 82            [24] 1728 	mov	dpl,r5
      000744 8E 83            [24] 1729 	mov	dph,r6
      000746 12r00r00         [24] 1730 	lcall	__modsint
      000749 AD 82            [24] 1731 	mov	r5,dpl
      00074B AE 83            [24] 1732 	mov	r6,dph
      00074D 15 81            [12] 1733 	dec	sp
      00074F 15 81            [12] 1734 	dec	sp
      000751 D0 00            [24] 1735 	pop	ar0
      000753 D0 01            [24] 1736 	pop	ar1
      000755 A6 05            [24] 1737 	mov	@r0,ar5
      000757 08               [12] 1738 	inc	r0
      000758 A6 06            [24] 1739 	mov	@r0,ar6
      00075A 18               [12] 1740 	dec	r0
                                   1741 ;	walk.c:223: initial.c = rand() % COLS;
      00075B 74 02            [12] 1742 	mov	a,#0x02
      00075D 29               [12] 1743 	add	a,r1
      00075E F8               [12] 1744 	mov	r0,a
      00075F C0 01            [24] 1745 	push	ar1
      000761 C0 00            [24] 1746 	push	ar0
      000763 12r00r00         [24] 1747 	lcall	_rand
      000766 AD 82            [24] 1748 	mov	r5,dpl
      000768 AE 83            [24] 1749 	mov	r6,dph
      00076A 74 C9            [12] 1750 	mov	a,#0xc9
      00076C C0 E0            [24] 1751 	push	acc
      00076E E4               [12] 1752 	clr	a
      00076F C0 E0            [24] 1753 	push	acc
      000771 8D 82            [24] 1754 	mov	dpl,r5
      000773 8E 83            [24] 1755 	mov	dph,r6
      000775 12r00r00         [24] 1756 	lcall	__modsint
      000778 AD 82            [24] 1757 	mov	r5,dpl
      00077A AE 83            [24] 1758 	mov	r6,dph
      00077C 15 81            [12] 1759 	dec	sp
      00077E 15 81            [12] 1760 	dec	sp
      000780 D0 00            [24] 1761 	pop	ar0
      000782 A6 05            [24] 1762 	mov	@r0,ar5
      000784 08               [12] 1763 	inc	r0
      000785 A6 06            [24] 1764 	mov	@r0,ar6
      000787 18               [12] 1765 	dec	r0
                                   1766 ;	walk.c:225: puts("\033[2J\033[?25l");
      000788 90r00r34         [24] 1767 	mov	dptr,#___str_4
      00078B 75 F0 80         [24] 1768 	mov	b,#0x80
      00078E C0 00            [24] 1769 	push	ar0
      000790 12r00r00         [24] 1770 	lcall	_puts
      000793 D0 00            [24] 1771 	pop	ar0
      000795 D0 01            [24] 1772 	pop	ar1
                                   1773 ;	walk.c:226: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      000797 86 05            [24] 1774 	mov	ar5,@r0
      000799 08               [12] 1775 	inc	r0
      00079A 86 06            [24] 1776 	mov	ar6,@r0
      00079C 18               [12] 1777 	dec	r0
      00079D 87 03            [24] 1778 	mov	ar3,@r1
      00079F 09               [12] 1779 	inc	r1
      0007A0 87 04            [24] 1780 	mov	ar4,@r1
      0007A2 19               [12] 1781 	dec	r1
      0007A3 C0 01            [24] 1782 	push	ar1
      0007A5 C0 05            [24] 1783 	push	ar5
      0007A7 C0 06            [24] 1784 	push	ar6
      0007A9 C0 03            [24] 1785 	push	ar3
      0007AB C0 04            [24] 1786 	push	ar4
      0007AD E5*00            [12] 1787 	mov	a,_bp
      0007AF 24 0B            [12] 1788 	add	a,#0x0b
      0007B1 F8               [12] 1789 	mov	r0,a
      0007B2 E6               [12] 1790 	mov	a,@r0
      0007B3 C0 E0            [24] 1791 	push	acc
      0007B5 08               [12] 1792 	inc	r0
      0007B6 E6               [12] 1793 	mov	a,@r0
      0007B7 C0 E0            [24] 1794 	push	acc
      0007B9 74r3F            [12] 1795 	mov	a,#___str_5
      0007BB C0 E0            [24] 1796 	push	acc
      0007BD 74s00            [12] 1797 	mov	a,#(___str_5 >> 8)
      0007BF C0 E0            [24] 1798 	push	acc
      0007C1 74 80            [12] 1799 	mov	a,#0x80
      0007C3 C0 E0            [24] 1800 	push	acc
      0007C5 12r00r00         [24] 1801 	lcall	_printf
      0007C8 E5 81            [12] 1802 	mov	a,sp
      0007CA 24 F7            [12] 1803 	add	a,#0xf7
      0007CC F5 81            [12] 1804 	mov	sp,a
      0007CE D0 01            [24] 1805 	pop	ar1
      0007D0 D0 07            [24] 1806 	pop	ar7
                                   1807 ;	walk.c:228: for (i = 0; i < REG; i++) {
      0007D2 E5*00            [12] 1808 	mov	a,_bp
      0007D4 24 05            [12] 1809 	add	a,#0x05
      0007D6 F8               [12] 1810 	mov	r0,a
      0007D7 E4               [12] 1811 	clr	a
      0007D8 F6               [12] 1812 	mov	@r0,a
      0007D9 08               [12] 1813 	inc	r0
      0007DA F6               [12] 1814 	mov	@r0,a
      0007DB                       1815 00116$:
                                   1816 ;	walk.c:229: neigh[i].r = neigh[REG + i].r * (1 + rand() % 8);
      0007DB C0 07            [24] 1817 	push	ar7
      0007DD E5*00            [12] 1818 	mov	a,_bp
      0007DF 24 05            [12] 1819 	add	a,#0x05
      0007E1 F8               [12] 1820 	mov	r0,a
      0007E2 E6               [12] 1821 	mov	a,@r0
      0007E3 25 E0            [12] 1822 	add	a,acc
      0007E5 FB               [12] 1823 	mov	r3,a
      0007E6 08               [12] 1824 	inc	r0
      0007E7 E6               [12] 1825 	mov	a,@r0
      0007E8 33               [12] 1826 	rlc	a
      0007E9 FC               [12] 1827 	mov	r4,a
      0007EA EB               [12] 1828 	mov	a,r3
      0007EB 2B               [12] 1829 	add	a,r3
      0007EC FB               [12] 1830 	mov	r3,a
      0007ED EC               [12] 1831 	mov	a,r4
      0007EE 33               [12] 1832 	rlc	a
      0007EF FC               [12] 1833 	mov	r4,a
      0007F0 E5*00            [12] 1834 	mov	a,_bp
      0007F2 24 03            [12] 1835 	add	a,#0x03
      0007F4 F8               [12] 1836 	mov	r0,a
      0007F5 EB               [12] 1837 	mov	a,r3
      0007F6 24r00            [12] 1838 	add	a,#_neigh
      0007F8 F6               [12] 1839 	mov	@r0,a
      0007F9 EC               [12] 1840 	mov	a,r4
      0007FA 34s00            [12] 1841 	addc	a,#(_neigh >> 8)
      0007FC 08               [12] 1842 	inc	r0
      0007FD F6               [12] 1843 	mov	@r0,a
      0007FE E5*00            [12] 1844 	mov	a,_bp
      000800 24 05            [12] 1845 	add	a,#0x05
      000802 F8               [12] 1846 	mov	r0,a
      000803 86 06            [24] 1847 	mov	ar6,@r0
      000805 74 08            [12] 1848 	mov	a,#0x08
      000807 2E               [12] 1849 	add	a,r6
      000808 FE               [12] 1850 	mov	r6,a
      000809 C2 D5            [12] 1851 	clr	F0
      00080B 75 F0 04         [24] 1852 	mov	b,#0x04
      00080E EE               [12] 1853 	mov	a,r6
      00080F 30 E7 04         [24] 1854 	jnb	acc.7,00187$
      000812 B2 D5            [12] 1855 	cpl	F0
      000814 F4               [12] 1856 	cpl	a
      000815 04               [12] 1857 	inc	a
      000816                       1858 00187$:
      000816 A4               [48] 1859 	mul	ab
      000817 30 D5 0A         [24] 1860 	jnb	F0,00188$
      00081A F4               [12] 1861 	cpl	a
      00081B 24 01            [12] 1862 	add	a,#0x01
      00081D C5 F0            [12] 1863 	xch	a,b
      00081F F4               [12] 1864 	cpl	a
      000820 34 00            [12] 1865 	addc	a,#0x00
      000822 C5 F0            [12] 1866 	xch	a,b
      000824                       1867 00188$:
      000824 FE               [12] 1868 	mov	r6,a
      000825 AD F0            [24] 1869 	mov	r5,b
      000827 24r00            [12] 1870 	add	a,#_neigh
      000829 F5 82            [12] 1871 	mov	dpl,a
      00082B ED               [12] 1872 	mov	a,r5
      00082C 34s00            [12] 1873 	addc	a,#(_neigh >> 8)
      00082E F5 83            [12] 1874 	mov	dph,a
      000830 A8*00            [24] 1875 	mov	r0,_bp
      000832 08               [12] 1876 	inc	r0
      000833 E0               [24] 1877 	movx	a,@dptr
      000834 F6               [12] 1878 	mov	@r0,a
      000835 A3               [24] 1879 	inc	dptr
      000836 E0               [24] 1880 	movx	a,@dptr
      000837 08               [12] 1881 	inc	r0
      000838 F6               [12] 1882 	mov	@r0,a
      000839 C0 06            [24] 1883 	push	ar6
      00083B C0 05            [24] 1884 	push	ar5
      00083D C0 04            [24] 1885 	push	ar4
      00083F C0 03            [24] 1886 	push	ar3
      000841 C0 01            [24] 1887 	push	ar1
      000843 12r00r00         [24] 1888 	lcall	_rand
      000846 AA 82            [24] 1889 	mov	r2,dpl
      000848 AF 83            [24] 1890 	mov	r7,dph
      00084A 74 08            [12] 1891 	mov	a,#0x08
      00084C C0 E0            [24] 1892 	push	acc
      00084E E4               [12] 1893 	clr	a
      00084F C0 E0            [24] 1894 	push	acc
      000851 8A 82            [24] 1895 	mov	dpl,r2
      000853 8F 83            [24] 1896 	mov	dph,r7
      000855 12r00r00         [24] 1897 	lcall	__modsint
      000858 AA 82            [24] 1898 	mov	r2,dpl
      00085A AF 83            [24] 1899 	mov	r7,dph
      00085C 15 81            [12] 1900 	dec	sp
      00085E 15 81            [12] 1901 	dec	sp
      000860 D0 01            [24] 1902 	pop	ar1
      000862 D0 03            [24] 1903 	pop	ar3
      000864 D0 04            [24] 1904 	pop	ar4
      000866 D0 05            [24] 1905 	pop	ar5
      000868 D0 06            [24] 1906 	pop	ar6
      00086A 0A               [12] 1907 	inc	r2
      00086B BA 00 01         [24] 1908 	cjne	r2,#0x00,00189$
      00086E 0F               [12] 1909 	inc	r7
      00086F                       1910 00189$:
      00086F C0 06            [24] 1911 	push	ar6
      000871 C0 05            [24] 1912 	push	ar5
      000873 C0 04            [24] 1913 	push	ar4
      000875 C0 03            [24] 1914 	push	ar3
      000877 C0 01            [24] 1915 	push	ar1
      000879 C0 02            [24] 1916 	push	ar2
      00087B C0 07            [24] 1917 	push	ar7
      00087D A8*00            [24] 1918 	mov	r0,_bp
      00087F 08               [12] 1919 	inc	r0
      000880 86 82            [24] 1920 	mov	dpl,@r0
      000882 08               [12] 1921 	inc	r0
      000883 86 83            [24] 1922 	mov	dph,@r0
      000885 12r00r00         [24] 1923 	lcall	__mulint
      000888 AA 82            [24] 1924 	mov	r2,dpl
      00088A AF 83            [24] 1925 	mov	r7,dph
      00088C 15 81            [12] 1926 	dec	sp
      00088E 15 81            [12] 1927 	dec	sp
      000890 D0 01            [24] 1928 	pop	ar1
      000892 D0 03            [24] 1929 	pop	ar3
      000894 D0 04            [24] 1930 	pop	ar4
      000896 D0 05            [24] 1931 	pop	ar5
      000898 D0 06            [24] 1932 	pop	ar6
      00089A E5*00            [12] 1933 	mov	a,_bp
      00089C 24 03            [12] 1934 	add	a,#0x03
      00089E F8               [12] 1935 	mov	r0,a
      00089F 86 82            [24] 1936 	mov	dpl,@r0
      0008A1 08               [12] 1937 	inc	r0
      0008A2 86 83            [24] 1938 	mov	dph,@r0
      0008A4 EA               [12] 1939 	mov	a,r2
      0008A5 F0               [24] 1940 	movx	@dptr,a
      0008A6 EF               [12] 1941 	mov	a,r7
      0008A7 A3               [24] 1942 	inc	dptr
      0008A8 F0               [24] 1943 	movx	@dptr,a
                                   1944 ;	walk.c:230: neigh[i].c = neigh[REG + i].c * (1 + rand() % 8);
      0008A9 EB               [12] 1945 	mov	a,r3
      0008AA 24r00            [12] 1946 	add	a,#_neigh
      0008AC FB               [12] 1947 	mov	r3,a
      0008AD EC               [12] 1948 	mov	a,r4
      0008AE 34s00            [12] 1949 	addc	a,#(_neigh >> 8)
      0008B0 FC               [12] 1950 	mov	r4,a
      0008B1 74 02            [12] 1951 	mov	a,#0x02
      0008B3 2B               [12] 1952 	add	a,r3
      0008B4 FA               [12] 1953 	mov	r2,a
      0008B5 E4               [12] 1954 	clr	a
      0008B6 3C               [12] 1955 	addc	a,r4
      0008B7 FF               [12] 1956 	mov	r7,a
      0008B8 EE               [12] 1957 	mov	a,r6
      0008B9 24r00            [12] 1958 	add	a,#_neigh
      0008BB FE               [12] 1959 	mov	r6,a
      0008BC ED               [12] 1960 	mov	a,r5
      0008BD 34s00            [12] 1961 	addc	a,#(_neigh >> 8)
      0008BF FD               [12] 1962 	mov	r5,a
      0008C0 8E 82            [24] 1963 	mov	dpl,r6
      0008C2 8D 83            [24] 1964 	mov	dph,r5
      0008C4 A3               [24] 1965 	inc	dptr
      0008C5 A3               [24] 1966 	inc	dptr
      0008C6 E5*00            [12] 1967 	mov	a,_bp
      0008C8 24 03            [12] 1968 	add	a,#0x03
      0008CA F8               [12] 1969 	mov	r0,a
      0008CB E0               [24] 1970 	movx	a,@dptr
      0008CC F6               [12] 1971 	mov	@r0,a
      0008CD A3               [24] 1972 	inc	dptr
      0008CE E0               [24] 1973 	movx	a,@dptr
      0008CF 08               [12] 1974 	inc	r0
      0008D0 F6               [12] 1975 	mov	@r0,a
      0008D1 C0 07            [24] 1976 	push	ar7
      0008D3 C0 04            [24] 1977 	push	ar4
      0008D5 C0 03            [24] 1978 	push	ar3
      0008D7 C0 02            [24] 1979 	push	ar2
      0008D9 C0 01            [24] 1980 	push	ar1
      0008DB 12r00r00         [24] 1981 	lcall	_rand
      0008DE AD 82            [24] 1982 	mov	r5,dpl
      0008E0 AE 83            [24] 1983 	mov	r6,dph
      0008E2 74 08            [12] 1984 	mov	a,#0x08
      0008E4 C0 E0            [24] 1985 	push	acc
      0008E6 E4               [12] 1986 	clr	a
      0008E7 C0 E0            [24] 1987 	push	acc
      0008E9 8D 82            [24] 1988 	mov	dpl,r5
      0008EB 8E 83            [24] 1989 	mov	dph,r6
      0008ED 12r00r00         [24] 1990 	lcall	__modsint
      0008F0 AD 82            [24] 1991 	mov	r5,dpl
      0008F2 AE 83            [24] 1992 	mov	r6,dph
      0008F4 15 81            [12] 1993 	dec	sp
      0008F6 15 81            [12] 1994 	dec	sp
      0008F8 D0 01            [24] 1995 	pop	ar1
      0008FA D0 02            [24] 1996 	pop	ar2
      0008FC D0 03            [24] 1997 	pop	ar3
      0008FE D0 04            [24] 1998 	pop	ar4
      000900 D0 07            [24] 1999 	pop	ar7
      000902 0D               [12] 2000 	inc	r5
      000903 BD 00 01         [24] 2001 	cjne	r5,#0x00,00190$
      000906 0E               [12] 2002 	inc	r6
      000907                       2003 00190$:
      000907 C0 07            [24] 2004 	push	ar7
      000909 C0 04            [24] 2005 	push	ar4
      00090B C0 03            [24] 2006 	push	ar3
      00090D C0 02            [24] 2007 	push	ar2
      00090F C0 01            [24] 2008 	push	ar1
      000911 C0 05            [24] 2009 	push	ar5
      000913 C0 06            [24] 2010 	push	ar6
      000915 E5*00            [12] 2011 	mov	a,_bp
      000917 24 03            [12] 2012 	add	a,#0x03
      000919 F8               [12] 2013 	mov	r0,a
      00091A 86 82            [24] 2014 	mov	dpl,@r0
      00091C 08               [12] 2015 	inc	r0
      00091D 86 83            [24] 2016 	mov	dph,@r0
      00091F 12r00r00         [24] 2017 	lcall	__mulint
      000922 AD 82            [24] 2018 	mov	r5,dpl
      000924 AE 83            [24] 2019 	mov	r6,dph
      000926 15 81            [12] 2020 	dec	sp
      000928 15 81            [12] 2021 	dec	sp
      00092A D0 01            [24] 2022 	pop	ar1
      00092C D0 02            [24] 2023 	pop	ar2
      00092E D0 03            [24] 2024 	pop	ar3
      000930 D0 04            [24] 2025 	pop	ar4
      000932 D0 07            [24] 2026 	pop	ar7
      000934 8A 82            [24] 2027 	mov	dpl,r2
      000936 8F 83            [24] 2028 	mov	dph,r7
      000938 ED               [12] 2029 	mov	a,r5
      000939 F0               [24] 2030 	movx	@dptr,a
      00093A EE               [12] 2031 	mov	a,r6
      00093B A3               [24] 2032 	inc	dptr
      00093C F0               [24] 2033 	movx	@dptr,a
                                   2034 ;	walk.c:231: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      00093D 8B 82            [24] 2035 	mov	dpl,r3
      00093F 8C 83            [24] 2036 	mov	dph,r4
      000941 E0               [24] 2037 	movx	a,@dptr
      000942 FB               [12] 2038 	mov	r3,a
      000943 A3               [24] 2039 	inc	dptr
      000944 E0               [24] 2040 	movx	a,@dptr
      000945 FC               [12] 2041 	mov	r4,a
      000946 C0 07            [24] 2042 	push	ar7
      000948 C0 01            [24] 2043 	push	ar1
      00094A C0 05            [24] 2044 	push	ar5
      00094C C0 06            [24] 2045 	push	ar6
      00094E C0 03            [24] 2046 	push	ar3
      000950 C0 04            [24] 2047 	push	ar4
      000952 74r52            [12] 2048 	mov	a,#___str_6
      000954 C0 E0            [24] 2049 	push	acc
      000956 74s00            [12] 2050 	mov	a,#(___str_6 >> 8)
      000958 C0 E0            [24] 2051 	push	acc
      00095A 74 80            [12] 2052 	mov	a,#0x80
      00095C C0 E0            [24] 2053 	push	acc
      00095E 12r00r00         [24] 2054 	lcall	_printf
      000961 E5 81            [12] 2055 	mov	a,sp
      000963 24 F9            [12] 2056 	add	a,#0xf9
      000965 F5 81            [12] 2057 	mov	sp,a
      000967 D0 01            [24] 2058 	pop	ar1
      000969 D0 07            [24] 2059 	pop	ar7
                                   2060 ;	walk.c:228: for (i = 0; i < REG; i++) {
      00096B E5*00            [12] 2061 	mov	a,_bp
      00096D 24 05            [12] 2062 	add	a,#0x05
      00096F F8               [12] 2063 	mov	r0,a
      000970 06               [12] 2064 	inc	@r0
      000971 B6 00 02         [24] 2065 	cjne	@r0,#0x00,00191$
      000974 08               [12] 2066 	inc	r0
      000975 06               [12] 2067 	inc	@r0
      000976                       2068 00191$:
      000976 E5*00            [12] 2069 	mov	a,_bp
      000978 24 05            [12] 2070 	add	a,#0x05
      00097A F8               [12] 2071 	mov	r0,a
      00097B 86 05            [24] 2072 	mov	ar5,@r0
      00097D 08               [12] 2073 	inc	r0
      00097E 86 06            [24] 2074 	mov	ar6,@r0
      000980 C3               [12] 2075 	clr	c
      000981 ED               [12] 2076 	mov	a,r5
      000982 94 08            [12] 2077 	subb	a,#0x08
      000984 EE               [12] 2078 	mov	a,r6
      000985 94 00            [12] 2079 	subb	a,#0x00
      000987 D0 07            [24] 2080 	pop	ar7
      000989 50 03            [24] 2081 	jnc	00192$
      00098B 02r07rDB         [24] 2082 	ljmp	00116$
      00098E                       2083 00192$:
                                   2084 ;	walk.c:234: OE76 = OE76_0;
      00098E 78r01            [12] 2085 	mov	r0,#_OE76
      000990 76 3F            [12] 2086 	mov	@r0,#0x3f
                                   2087 ;	walk.c:235: setOE(OE76_NC);
      000992 75 82 00         [24] 2088 	mov	dpl,#0x00
      000995 C0 07            [24] 2089 	push	ar7
      000997 C0 01            [24] 2090 	push	ar1
      000999 12r00r2F         [24] 2091 	lcall	_setOE
      00099C D0 01            [24] 2092 	pop	ar1
      00099E D0 07            [24] 2093 	pop	ar7
                                   2094 ;	walk.c:237: walk(&initial);
      0009A0 8F 04            [24] 2095 	mov	ar4,r7
      0009A2 7D 00            [12] 2096 	mov	r5,#0x00
      0009A4 7E 40            [12] 2097 	mov	r6,#0x40
      0009A6 8C 82            [24] 2098 	mov	dpl,r4
      0009A8 8D 83            [24] 2099 	mov	dph,r5
      0009AA 8E F0            [24] 2100 	mov	b,r6
      0009AC C0 07            [24] 2101 	push	ar7
      0009AE C0 01            [24] 2102 	push	ar1
      0009B0 12r03r08         [24] 2103 	lcall	_walk
      0009B3 D0 01            [24] 2104 	pop	ar1
      0009B5 D0 07            [24] 2105 	pop	ar7
                                   2106 ;	walk.c:239: for (i = 0; i < ROWS; i++)
      0009B7 E5*00            [12] 2107 	mov	a,_bp
      0009B9 24 05            [12] 2108 	add	a,#0x05
      0009BB F8               [12] 2109 	mov	r0,a
      0009BC E4               [12] 2110 	clr	a
      0009BD F6               [12] 2111 	mov	@r0,a
      0009BE 08               [12] 2112 	inc	r0
      0009BF F6               [12] 2113 	mov	@r0,a
      0009C0 7B 00            [12] 2114 	mov	r3,#0x00
      0009C2 7C 00            [12] 2115 	mov	r4,#0x00
                                   2116 ;	walk.c:240: for (j = 0; j < COLS; j++)
      0009C4                       2117 00132$:
      0009C4 E5*00            [12] 2118 	mov	a,_bp
      0009C6 24 03            [12] 2119 	add	a,#0x03
      0009C8 F8               [12] 2120 	mov	r0,a
      0009C9 EB               [12] 2121 	mov	a,r3
      0009CA 24r00            [12] 2122 	add	a,#_g
      0009CC F6               [12] 2123 	mov	@r0,a
      0009CD EC               [12] 2124 	mov	a,r4
      0009CE 34s00            [12] 2125 	addc	a,#(_g >> 8)
      0009D0 08               [12] 2126 	inc	r0
      0009D1 F6               [12] 2127 	mov	@r0,a
      0009D2 7A 00            [12] 2128 	mov	r2,#0x00
      0009D4 7E 00            [12] 2129 	mov	r6,#0x00
      0009D6                       2130 00118$:
                                   2131 ;	walk.c:241: if (g[i][j] != 0xaau) bang();
      0009D6 E5*00            [12] 2132 	mov	a,_bp
      0009D8 24 03            [12] 2133 	add	a,#0x03
      0009DA F8               [12] 2134 	mov	r0,a
      0009DB EA               [12] 2135 	mov	a,r2
      0009DC 26               [12] 2136 	add	a,@r0
      0009DD F5 82            [12] 2137 	mov	dpl,a
      0009DF EE               [12] 2138 	mov	a,r6
      0009E0 08               [12] 2139 	inc	r0
      0009E1 36               [12] 2140 	addc	a,@r0
      0009E2 F5 83            [12] 2141 	mov	dph,a
      0009E4 E0               [24] 2142 	movx	a,@dptr
      0009E5 FD               [12] 2143 	mov	r5,a
      0009E6 BD AA 02         [24] 2144 	cjne	r5,#0xaa,00193$
      0009E9 80 1B            [24] 2145 	sjmp	00119$
      0009EB                       2146 00193$:
      0009EB C0 07            [24] 2147 	push	ar7
      0009ED C0 06            [24] 2148 	push	ar6
      0009EF C0 04            [24] 2149 	push	ar4
      0009F1 C0 03            [24] 2150 	push	ar3
      0009F3 C0 02            [24] 2151 	push	ar2
      0009F5 C0 01            [24] 2152 	push	ar1
      0009F7 12r00r22         [24] 2153 	lcall	_bang
      0009FA D0 01            [24] 2154 	pop	ar1
      0009FC D0 02            [24] 2155 	pop	ar2
      0009FE D0 03            [24] 2156 	pop	ar3
      000A00 D0 04            [24] 2157 	pop	ar4
      000A02 D0 06            [24] 2158 	pop	ar6
      000A04 D0 07            [24] 2159 	pop	ar7
      000A06                       2160 00119$:
                                   2161 ;	walk.c:240: for (j = 0; j < COLS; j++)
      000A06 0A               [12] 2162 	inc	r2
      000A07 BA 00 01         [24] 2163 	cjne	r2,#0x00,00194$
      000A0A 0E               [12] 2164 	inc	r6
      000A0B                       2165 00194$:
      000A0B C3               [12] 2166 	clr	c
      000A0C EA               [12] 2167 	mov	a,r2
      000A0D 94 C9            [12] 2168 	subb	a,#0xc9
      000A0F EE               [12] 2169 	mov	a,r6
      000A10 64 80            [12] 2170 	xrl	a,#0x80
      000A12 94 80            [12] 2171 	subb	a,#0x80
      000A14 40 C0            [24] 2172 	jc	00118$
                                   2173 ;	walk.c:239: for (i = 0; i < ROWS; i++)
      000A16 74 C9            [12] 2174 	mov	a,#0xc9
      000A18 2B               [12] 2175 	add	a,r3
      000A19 FB               [12] 2176 	mov	r3,a
      000A1A E4               [12] 2177 	clr	a
      000A1B 3C               [12] 2178 	addc	a,r4
      000A1C FC               [12] 2179 	mov	r4,a
      000A1D E5*00            [12] 2180 	mov	a,_bp
      000A1F 24 05            [12] 2181 	add	a,#0x05
      000A21 F8               [12] 2182 	mov	r0,a
      000A22 06               [12] 2183 	inc	@r0
      000A23 B6 00 02         [24] 2184 	cjne	@r0,#0x00,00196$
      000A26 08               [12] 2185 	inc	r0
      000A27 06               [12] 2186 	inc	@r0
      000A28                       2187 00196$:
      000A28 E5*00            [12] 2188 	mov	a,_bp
      000A2A 24 05            [12] 2189 	add	a,#0x05
      000A2C F8               [12] 2190 	mov	r0,a
      000A2D C3               [12] 2191 	clr	c
      000A2E E6               [12] 2192 	mov	a,@r0
      000A2F 94 30            [12] 2193 	subb	a,#0x30
      000A31 08               [12] 2194 	inc	r0
      000A32 E6               [12] 2195 	mov	a,@r0
      000A33 64 80            [12] 2196 	xrl	a,#0x80
      000A35 94 80            [12] 2197 	subb	a,#0x80
      000A37 40 8B            [24] 2198 	jc	00132$
                                   2199 ;	walk.c:243: N++;
      000A39 E5*00            [12] 2200 	mov	a,_bp
      000A3B 24 0B            [12] 2201 	add	a,#0x0b
      000A3D F8               [12] 2202 	mov	r0,a
      000A3E 06               [12] 2203 	inc	@r0
      000A3F B6 00 02         [24] 2204 	cjne	@r0,#0x00,00198$
      000A42 08               [12] 2205 	inc	r0
      000A43 06               [12] 2206 	inc	@r0
      000A44                       2207 00198$:
      000A44 02r06rC0         [24] 2208 	ljmp	00108$
      000A47                       2209 00110$:
                                   2210 ;	walk.c:246: EA = 0;
                                   2211 ;	assignBit
      000A47 C2 AF            [12] 2212 	clr	_EA
                                   2213 ;	walk.c:248: puts("\033[2J\033[?25h");
      000A49 90r00r5B         [24] 2214 	mov	dptr,#___str_7
      000A4C 75 F0 80         [24] 2215 	mov	b,#0x80
      000A4F 12r00r00         [24] 2216 	lcall	_puts
                                   2217 ;	walk.c:37: PCON |= 2;
      000A52 43 87 02         [24] 2218 	orl	_PCON,#0x02
                                   2219 ;	walk.c:252: return;
                                   2220 ;	walk.c:253: }
      000A55 85*00 81         [24] 2221 	mov	sp,_bp
      000A58 D0*00            [24] 2222 	pop	_bp
      000A5A 22               [24] 2223 	ret
                                   2224 ;------------------------------------------------------------
                                   2225 ;Allocation info for local variables in function 'stinit'
                                   2226 ;------------------------------------------------------------
                                   2227 ;	walk.c:255: static void stinit(void) {
                                   2228 ;	-----------------------------------------
                                   2229 ;	 function stinit
                                   2230 ;	-----------------------------------------
      000A5B                       2231 _stinit:
                                   2232 ;	walk.c:256: sp = -1;
      000A5B 90rBCr70         [24] 2233 	mov	dptr,#_sp
      000A5E 74 FF            [12] 2234 	mov	a,#0xff
      000A60 F0               [24] 2235 	movx	@dptr,a
      000A61 A3               [24] 2236 	inc	dptr
      000A62 F0               [24] 2237 	movx	@dptr,a
                                   2238 ;	walk.c:257: return;
                                   2239 ;	walk.c:258: }
      000A63 22               [24] 2240 	ret
                                   2241 ;------------------------------------------------------------
                                   2242 ;Allocation info for local variables in function 'stpush'
                                   2243 ;------------------------------------------------------------
                                   2244 ;t                         Allocated to registers r5 r6 r7 
                                   2245 ;------------------------------------------------------------
                                   2246 ;	walk.c:260: static uint8_t stpush(struct node *t) {
                                   2247 ;	-----------------------------------------
                                   2248 ;	 function stpush
                                   2249 ;	-----------------------------------------
      000A64                       2250 _stpush:
      000A64 AD 82            [24] 2251 	mov	r5,dpl
      000A66 AE 83            [24] 2252 	mov	r6,dph
      000A68 AF F0            [24] 2253 	mov	r7,b
                                   2254 ;	walk.c:261: if (sp == (SMAX - 1)) return 0u;
      000A6A 90rBCr70         [24] 2255 	mov	dptr,#_sp
      000A6D E0               [24] 2256 	movx	a,@dptr
      000A6E FB               [12] 2257 	mov	r3,a
      000A6F A3               [24] 2258 	inc	dptr
      000A70 E0               [24] 2259 	movx	a,@dptr
      000A71 FC               [12] 2260 	mov	r4,a
      000A72 BB AF 07         [24] 2261 	cjne	r3,#0xaf,00102$
      000A75 BC 25 04         [24] 2262 	cjne	r4,#0x25,00102$
      000A78 75 82 00         [24] 2263 	mov	dpl,#0x00
      000A7B 22               [24] 2264 	ret
      000A7C                       2265 00102$:
                                   2266 ;	walk.c:262: sp++;
      000A7C 90rBCr70         [24] 2267 	mov	dptr,#_sp
      000A7F 74 01            [12] 2268 	mov	a,#0x01
      000A81 2B               [12] 2269 	add	a,r3
      000A82 F0               [24] 2270 	movx	@dptr,a
      000A83 E4               [12] 2271 	clr	a
      000A84 3C               [12] 2272 	addc	a,r4
      000A85 A3               [24] 2273 	inc	dptr
      000A86 F0               [24] 2274 	movx	@dptr,a
                                   2275 ;	walk.c:263: stack[sp] = *t;
      000A87 90rBCr70         [24] 2276 	mov	dptr,#_sp
      000A8A E0               [24] 2277 	movx	a,@dptr
      000A8B FB               [12] 2278 	mov	r3,a
      000A8C A3               [24] 2279 	inc	dptr
      000A8D E0               [24] 2280 	movx	a,@dptr
      000A8E FC               [12] 2281 	mov	r4,a
      000A8F EB               [12] 2282 	mov	a,r3
      000A90 2B               [12] 2283 	add	a,r3
      000A91 FB               [12] 2284 	mov	r3,a
      000A92 EC               [12] 2285 	mov	a,r4
      000A93 33               [12] 2286 	rlc	a
      000A94 FC               [12] 2287 	mov	r4,a
      000A95 EB               [12] 2288 	mov	a,r3
      000A96 2B               [12] 2289 	add	a,r3
      000A97 FB               [12] 2290 	mov	r3,a
      000A98 EC               [12] 2291 	mov	a,r4
      000A99 33               [12] 2292 	rlc	a
      000A9A FC               [12] 2293 	mov	r4,a
      000A9B EB               [12] 2294 	mov	a,r3
      000A9C 24rB0            [12] 2295 	add	a,#_stack
      000A9E FB               [12] 2296 	mov	r3,a
      000A9F EC               [12] 2297 	mov	a,r4
      000AA0 34s25            [12] 2298 	addc	a,#(_stack >> 8)
      000AA2 FC               [12] 2299 	mov	r4,a
      000AA3 7A 00            [12] 2300 	mov	r2,#0x00
      000AA5 74 04            [12] 2301 	mov	a,#0x04
      000AA7 C0 E0            [24] 2302 	push	acc
      000AA9 E4               [12] 2303 	clr	a
      000AAA C0 E0            [24] 2304 	push	acc
      000AAC C0 05            [24] 2305 	push	ar5
      000AAE C0 06            [24] 2306 	push	ar6
      000AB0 C0 07            [24] 2307 	push	ar7
      000AB2 8B 82            [24] 2308 	mov	dpl,r3
      000AB4 8C 83            [24] 2309 	mov	dph,r4
      000AB6 8A F0            [24] 2310 	mov	b,r2
      000AB8 12r00r00         [24] 2311 	lcall	___memcpy
      000ABB E5 81            [12] 2312 	mov	a,sp
      000ABD 24 FB            [12] 2313 	add	a,#0xfb
      000ABF F5 81            [12] 2314 	mov	sp,a
                                   2315 ;	walk.c:264: return 1u;
      000AC1 75 82 01         [24] 2316 	mov	dpl,#0x01
                                   2317 ;	walk.c:265: }
      000AC4 22               [24] 2318 	ret
                                   2319 ;------------------------------------------------------------
                                   2320 ;Allocation info for local variables in function 'stpop'
                                   2321 ;------------------------------------------------------------
                                   2322 ;t                         Allocated to registers r5 r6 r7 
                                   2323 ;------------------------------------------------------------
                                   2324 ;	walk.c:267: static uint8_t stpop(struct node *t) {
                                   2325 ;	-----------------------------------------
                                   2326 ;	 function stpop
                                   2327 ;	-----------------------------------------
      000AC5                       2328 _stpop:
      000AC5 AD 82            [24] 2329 	mov	r5,dpl
      000AC7 AE 83            [24] 2330 	mov	r6,dph
      000AC9 AF F0            [24] 2331 	mov	r7,b
                                   2332 ;	walk.c:268: if (sp == -1) return 0u;
      000ACB 90rBCr70         [24] 2333 	mov	dptr,#_sp
      000ACE E0               [24] 2334 	movx	a,@dptr
      000ACF FB               [12] 2335 	mov	r3,a
      000AD0 A3               [24] 2336 	inc	dptr
      000AD1 E0               [24] 2337 	movx	a,@dptr
      000AD2 FC               [12] 2338 	mov	r4,a
      000AD3 BB FF 07         [24] 2339 	cjne	r3,#0xff,00102$
      000AD6 BC FF 04         [24] 2340 	cjne	r4,#0xff,00102$
      000AD9 75 82 00         [24] 2341 	mov	dpl,#0x00
      000ADC 22               [24] 2342 	ret
      000ADD                       2343 00102$:
                                   2344 ;	walk.c:269: *t = stack[sp];
      000ADD EB               [12] 2345 	mov	a,r3
      000ADE 2B               [12] 2346 	add	a,r3
      000ADF FB               [12] 2347 	mov	r3,a
      000AE0 EC               [12] 2348 	mov	a,r4
      000AE1 33               [12] 2349 	rlc	a
      000AE2 FC               [12] 2350 	mov	r4,a
      000AE3 EB               [12] 2351 	mov	a,r3
      000AE4 2B               [12] 2352 	add	a,r3
      000AE5 FB               [12] 2353 	mov	r3,a
      000AE6 EC               [12] 2354 	mov	a,r4
      000AE7 33               [12] 2355 	rlc	a
      000AE8 FC               [12] 2356 	mov	r4,a
      000AE9 EB               [12] 2357 	mov	a,r3
      000AEA 24rB0            [12] 2358 	add	a,#_stack
      000AEC FB               [12] 2359 	mov	r3,a
      000AED EC               [12] 2360 	mov	a,r4
      000AEE 34s25            [12] 2361 	addc	a,#(_stack >> 8)
      000AF0 FC               [12] 2362 	mov	r4,a
      000AF1 7A 00            [12] 2363 	mov	r2,#0x00
      000AF3 74 04            [12] 2364 	mov	a,#0x04
      000AF5 C0 E0            [24] 2365 	push	acc
      000AF7 E4               [12] 2366 	clr	a
      000AF8 C0 E0            [24] 2367 	push	acc
      000AFA C0 03            [24] 2368 	push	ar3
      000AFC C0 04            [24] 2369 	push	ar4
      000AFE C0 02            [24] 2370 	push	ar2
      000B00 8D 82            [24] 2371 	mov	dpl,r5
      000B02 8E 83            [24] 2372 	mov	dph,r6
      000B04 8F F0            [24] 2373 	mov	b,r7
      000B06 12r00r00         [24] 2374 	lcall	___memcpy
      000B09 E5 81            [12] 2375 	mov	a,sp
      000B0B 24 FB            [12] 2376 	add	a,#0xfb
      000B0D F5 81            [12] 2377 	mov	sp,a
                                   2378 ;	walk.c:270: sp--;
      000B0F 90rBCr70         [24] 2379 	mov	dptr,#_sp
      000B12 E0               [24] 2380 	movx	a,@dptr
      000B13 24 FF            [12] 2381 	add	a,#0xff
      000B15 FE               [12] 2382 	mov	r6,a
      000B16 A3               [24] 2383 	inc	dptr
      000B17 E0               [24] 2384 	movx	a,@dptr
      000B18 34 FF            [12] 2385 	addc	a,#0xff
      000B1A FF               [12] 2386 	mov	r7,a
      000B1B 90rBCr70         [24] 2387 	mov	dptr,#_sp
      000B1E EE               [12] 2388 	mov	a,r6
      000B1F F0               [24] 2389 	movx	@dptr,a
      000B20 EF               [12] 2390 	mov	a,r7
      000B21 A3               [24] 2391 	inc	dptr
      000B22 F0               [24] 2392 	movx	@dptr,a
                                   2393 ;	walk.c:271: return 1u;
      000B23 75 82 01         [24] 2394 	mov	dpl,#0x01
                                   2395 ;	walk.c:272: }
      000B26 22               [24] 2396 	ret
                                   2397 	.area CSEG    (CODE)
                                   2398 	.area CONST   (CODE)
                                   2399 	.area CONST   (CODE)
      000000                       2400 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2401 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2402 	.db 0x00
                                   2403 	.area CSEG    (CODE)
                                   2404 	.area CONST   (CODE)
      00000D                       2405 ___str_1:
      00000D 1B                    2406 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2407 	.ascii "[%d;%dHo"
             6F
      000016 00                    2408 	.db 0x00
                                   2409 	.area CSEG    (CODE)
                                   2410 	.area CONST   (CODE)
      000017                       2411 ___str_2:
      000017 1B                    2412 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2413 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2414 	.db 0x00
                                   2415 	.area CSEG    (CODE)
                                   2416 	.area CONST   (CODE)
      00002A                       2417 ___str_3:
      00002A 1B                    2418 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2419 	.ascii "[%d;%dH."
             2E
      000033 00                    2420 	.db 0x00
                                   2421 	.area CSEG    (CODE)
                                   2422 	.area CONST   (CODE)
      000034                       2423 ___str_4:
      000034 1B                    2424 	.db 0x1b
      000035 5B 32 4A              2425 	.ascii "[2J"
      000038 1B                    2426 	.db 0x1b
      000039 5B 3F 32 35 6C        2427 	.ascii "[?25l"
      00003E 00                    2428 	.db 0x00
                                   2429 	.area CSEG    (CODE)
                                   2430 	.area CONST   (CODE)
      00003F                       2431 ___str_5:
      00003F 1B                    2432 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2433 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2434 	.db 0x00
                                   2435 	.area CSEG    (CODE)
                                   2436 	.area CONST   (CODE)
      000052                       2437 ___str_6:
      000052 25 20 38 64 25 20 38  2438 	.ascii "% 8d% 8d"
             64
      00005A 00                    2439 	.db 0x00
                                   2440 	.area CSEG    (CODE)
                                   2441 	.area CONST   (CODE)
      00005B                       2442 ___str_7:
      00005B 1B                    2443 	.db 0x1b
      00005C 5B 32 4A              2444 	.ascii "[2J"
      00005F 1B                    2445 	.db 0x1b
      000060 5B 3F 32 35 68        2446 	.ascii "[?25h"
      000065 00                    2447 	.db 0x00
                                   2448 	.area CSEG    (CODE)
                                   2449 	.area XINIT   (CODE)
      000000                       2450 __xinit__neigh:
      000000 FF FF                 2451 	.byte #0xff, #0xff	; -1
      000002 01 00                 2452 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2453 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2454 	.byte #0xff, #0xff	; -1
      000008 01 00                 2455 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2456 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2457 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2458 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2459 	.byte #0xff, #0xff	; -1
      000012 00 00                 2460 	.byte #0x00, #0x00	;  0
      000014 00 00                 2461 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2462 	.byte #0xff, #0xff	; -1
      000018 01 00                 2463 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2464 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2465 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2466 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2467 	.byte #0xff, #0xff	; -1
      000022 01 00                 2468 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2469 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2470 	.byte #0xff, #0xff	; -1
      000028 01 00                 2471 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2472 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2473 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2474 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2475 	.byte #0xff, #0xff	; -1
      000032 00 00                 2476 	.byte #0x00, #0x00	;  0
      000034 00 00                 2477 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2478 	.byte #0xff, #0xff	; -1
      000038 01 00                 2479 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2480 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2481 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2482 	.byte #0x01, #0x00	;  1
                                   2483 	.area CABS    (ABS,CODE)
