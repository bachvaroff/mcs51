                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _stack:
      0025B0                        325 	.ds 38592
      00BC70                        326 _sp:
      00BC70                        327 	.ds 2
                           00F006   328 _OEreg	=	0xf006
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _neigh:
      000000                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r06r33         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	walk.c:9: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  395 	mov	a, dpl
      000002 02 00 30         [24]  396 	ljmp	0x0030
                                    397 ;	walk.c:15: }
                                    398 ;	naked function: no epilogue.
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'getchar'
                                    401 ;------------------------------------------------------------
                                    402 ;	walk.c:17: int getchar(void) __naked {
                                    403 ;	-----------------------------------------
                                    404 ;	 function getchar
                                    405 ;	-----------------------------------------
      000005                        406 _getchar:
                                    407 ;	naked function: no prologue.
                                    408 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  409 	lcall	0x0032
      000008 F5 82            [12]  410 	mov	dpl, a
      00000A 75 83 00         [24]  411 	mov	dph, #0
      00000D 22               [24]  412 	ret
                                    413 ;	walk.c:24: }
                                    414 ;	naked function: no epilogue.
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'int0'
                                    417 ;------------------------------------------------------------
                                    418 ;	walk.c:30: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    419 ;	-----------------------------------------
                                    420 ;	 function int0
                                    421 ;	-----------------------------------------
      00000E                        422 _int0:
                           00000F   423 	ar7 = 0x0f
                           00000E   424 	ar6 = 0x0e
                           00000D   425 	ar5 = 0x0d
                           00000C   426 	ar4 = 0x0c
                           00000B   427 	ar3 = 0x0b
                           00000A   428 	ar2 = 0x0a
                           000009   429 	ar1 = 0x09
                           000008   430 	ar0 = 0x08
      00000E C0 D0            [24]  431 	push	psw
      000010 75 D0 08         [24]  432 	mov	psw,#0x08
                                    433 ;	walk.c:31: i0 = 0u;
      000013 78r00            [12]  434 	mov	r0,#_i0
      000015 76 00            [12]  435 	mov	@r0,#0x00
                                    436 ;	walk.c:32: }
      000017 D0 D0            [24]  437 	pop	psw
      000019 32               [24]  438 	reti
                                    439 ;	eliminated unneeded push/pop dpl
                                    440 ;	eliminated unneeded push/pop dph
                                    441 ;	eliminated unneeded push/pop b
                                    442 ;	eliminated unneeded push/pop acc
                                    443 ;------------------------------------------------------------
                                    444 ;Allocation info for local variables in function 'bang'
                                    445 ;------------------------------------------------------------
                                    446 ;	walk.c:38: static void bang(void) {
                                    447 ;	-----------------------------------------
                                    448 ;	 function bang
                                    449 ;	-----------------------------------------
      00001A                        450 _bang:
                           000007   451 	ar7 = 0x07
                           000006   452 	ar6 = 0x06
                           000005   453 	ar5 = 0x05
                           000004   454 	ar4 = 0x04
                           000003   455 	ar3 = 0x03
                           000002   456 	ar2 = 0x02
                           000001   457 	ar1 = 0x01
                           000000   458 	ar0 = 0x00
                                    459 ;	walk.c:39: (void)puts("Memory error");
      00001A 90r00r00         [24]  460 	mov	dptr,#___str_0
      00001D 75 F0 80         [24]  461 	mov	b,#0x80
      000020 12r00r00         [24]  462 	lcall	_puts
                                    463 ;	walk.c:35: PCON |= 2;
      000023 43 87 02         [24]  464 	orl	_PCON,#0x02
                                    465 ;	walk.c:42: return;
                                    466 ;	walk.c:43: }
      000026 22               [24]  467 	ret
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'flashOE'
                                    470 ;------------------------------------------------------------
                                    471 ;mask                      Allocated to registers r7 
                                    472 ;------------------------------------------------------------
                                    473 ;	walk.c:85: static void flashOE(uint8_t mask) {
                                    474 ;	-----------------------------------------
                                    475 ;	 function flashOE
                                    476 ;	-----------------------------------------
      000027                        477 _flashOE:
      000027 AF 82            [24]  478 	mov	r7,dpl
                                    479 ;	walk.c:86: P1_7 = 0;
                                    480 ;	assignBit
      000029 C2 97            [12]  481 	clr	_P1_7
                                    482 ;	walk.c:87: OEreg = OE76;
      00002B 78r01            [12]  483 	mov	r0,#_OE76
      00002D 90 F0 06         [24]  484 	mov	dptr,#_OEreg
      000030 E6               [12]  485 	mov	a,@r0
      000031 F0               [24]  486 	movx	@dptr,a
                                    487 ;	walk.c:88: P1_7 = 1;
                                    488 ;	assignBit
      000032 D2 97            [12]  489 	setb	_P1_7
                                    490 ;	walk.c:89: OE76 ^= mask;
      000034 78r01            [12]  491 	mov	r0,#_OE76
      000036 EF               [12]  492 	mov	a,r7
      000037 66               [12]  493 	xrl	a,@r0
      000038 F6               [12]  494 	mov	@r0,a
                                    495 ;	walk.c:91: return;
                                    496 ;	walk.c:92: }
      000039 22               [24]  497 	ret
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'update'
                                    500 ;------------------------------------------------------------
                                    501 ;cur                       Allocated to stack - _bp -5
                                    502 ;j                         Allocated to stack - _bp -6
                                    503 ;t                         Allocated to stack - _bp +1
                                    504 ;sloc0                     Allocated to stack - _bp +4
                                    505 ;sloc1                     Allocated to stack - _bp +6
                                    506 ;sloc2                     Allocated to stack - _bp +8
                                    507 ;------------------------------------------------------------
                                    508 ;	walk.c:94: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    509 ;	-----------------------------------------
                                    510 ;	 function update
                                    511 ;	-----------------------------------------
      00003A                        512 _update:
      00003A C0*00            [24]  513 	push	_bp
      00003C 85 81*00         [24]  514 	mov	_bp,sp
      00003F C0 82            [24]  515 	push	dpl
      000041 C0 83            [24]  516 	push	dph
      000043 C0 F0            [24]  517 	push	b
      000045 E5 81            [12]  518 	mov	a,sp
      000047 24 07            [12]  519 	add	a,#0x07
      000049 F5 81            [12]  520 	mov	sp,a
                                    521 ;	walk.c:95: t->r = cur->r + neigh[j].r;
      00004B E5*00            [12]  522 	mov	a,_bp
      00004D 24 FB            [12]  523 	add	a,#0xfb
      00004F F8               [12]  524 	mov	r0,a
      000050 86 02            [24]  525 	mov	ar2,@r0
      000052 08               [12]  526 	inc	r0
      000053 86 03            [24]  527 	mov	ar3,@r0
      000055 08               [12]  528 	inc	r0
      000056 86 04            [24]  529 	mov	ar4,@r0
      000058 8A 82            [24]  530 	mov	dpl,r2
      00005A 8B 83            [24]  531 	mov	dph,r3
      00005C 8C F0            [24]  532 	mov	b,r4
      00005E E5*00            [12]  533 	mov	a,_bp
      000060 24 04            [12]  534 	add	a,#0x04
      000062 F8               [12]  535 	mov	r0,a
      000063 12r00r00         [24]  536 	lcall	__gptrget
      000066 F6               [12]  537 	mov	@r0,a
      000067 A3               [24]  538 	inc	dptr
      000068 12r00r00         [24]  539 	lcall	__gptrget
      00006B 08               [12]  540 	inc	r0
      00006C F6               [12]  541 	mov	@r0,a
      00006D E5*00            [12]  542 	mov	a,_bp
      00006F 24 FA            [12]  543 	add	a,#0xfa
      000071 F8               [12]  544 	mov	r0,a
      000072 E5*00            [12]  545 	mov	a,_bp
      000074 24 06            [12]  546 	add	a,#0x06
      000076 F9               [12]  547 	mov	r1,a
      000077 E6               [12]  548 	mov	a,@r0
      000078 75 F0 04         [24]  549 	mov	b,#0x04
      00007B A4               [48]  550 	mul	ab
      00007C F7               [12]  551 	mov	@r1,a
      00007D 09               [12]  552 	inc	r1
      00007E A7 F0            [24]  553 	mov	@r1,b
      000080 E5*00            [12]  554 	mov	a,_bp
      000082 24 06            [12]  555 	add	a,#0x06
      000084 F8               [12]  556 	mov	r0,a
      000085 E6               [12]  557 	mov	a,@r0
      000086 24r00            [12]  558 	add	a,#_neigh
      000088 F5 82            [12]  559 	mov	dpl,a
      00008A 08               [12]  560 	inc	r0
      00008B E6               [12]  561 	mov	a,@r0
      00008C 34s00            [12]  562 	addc	a,#(_neigh >> 8)
      00008E F5 83            [12]  563 	mov	dph,a
      000090 E0               [24]  564 	movx	a,@dptr
      000091 FF               [12]  565 	mov	r7,a
      000092 A3               [24]  566 	inc	dptr
      000093 E0               [24]  567 	movx	a,@dptr
      000094 FE               [12]  568 	mov	r6,a
      000095 E5*00            [12]  569 	mov	a,_bp
      000097 24 04            [12]  570 	add	a,#0x04
      000099 F8               [12]  571 	mov	r0,a
      00009A EF               [12]  572 	mov	a,r7
      00009B 26               [12]  573 	add	a,@r0
      00009C FF               [12]  574 	mov	r7,a
      00009D EE               [12]  575 	mov	a,r6
      00009E 08               [12]  576 	inc	r0
      00009F 36               [12]  577 	addc	a,@r0
      0000A0 FE               [12]  578 	mov	r6,a
      0000A1 A8*00            [24]  579 	mov	r0,_bp
      0000A3 08               [12]  580 	inc	r0
      0000A4 86 82            [24]  581 	mov	dpl,@r0
      0000A6 08               [12]  582 	inc	r0
      0000A7 86 83            [24]  583 	mov	dph,@r0
      0000A9 08               [12]  584 	inc	r0
      0000AA 86 F0            [24]  585 	mov	b,@r0
      0000AC EF               [12]  586 	mov	a,r7
      0000AD 12r00r00         [24]  587 	lcall	__gptrput
      0000B0 A3               [24]  588 	inc	dptr
      0000B1 EE               [12]  589 	mov	a,r6
      0000B2 12r00r00         [24]  590 	lcall	__gptrput
                                    591 ;	walk.c:96: t->c = cur->c + neigh[j].c;
      0000B5 A8*00            [24]  592 	mov	r0,_bp
      0000B7 08               [12]  593 	inc	r0
      0000B8 E5*00            [12]  594 	mov	a,_bp
      0000BA 24 08            [12]  595 	add	a,#0x08
      0000BC F9               [12]  596 	mov	r1,a
      0000BD 74 02            [12]  597 	mov	a,#0x02
      0000BF 26               [12]  598 	add	a,@r0
      0000C0 F7               [12]  599 	mov	@r1,a
      0000C1 E4               [12]  600 	clr	a
      0000C2 08               [12]  601 	inc	r0
      0000C3 36               [12]  602 	addc	a,@r0
      0000C4 09               [12]  603 	inc	r1
      0000C5 F7               [12]  604 	mov	@r1,a
      0000C6 08               [12]  605 	inc	r0
      0000C7 09               [12]  606 	inc	r1
      0000C8 E6               [12]  607 	mov	a,@r0
      0000C9 F7               [12]  608 	mov	@r1,a
      0000CA 74 02            [12]  609 	mov	a,#0x02
      0000CC 2A               [12]  610 	add	a,r2
      0000CD FA               [12]  611 	mov	r2,a
      0000CE E4               [12]  612 	clr	a
      0000CF 3B               [12]  613 	addc	a,r3
      0000D0 FB               [12]  614 	mov	r3,a
      0000D1 8A 82            [24]  615 	mov	dpl,r2
      0000D3 8B 83            [24]  616 	mov	dph,r3
      0000D5 8C F0            [24]  617 	mov	b,r4
      0000D7 12r00r00         [24]  618 	lcall	__gptrget
      0000DA FA               [12]  619 	mov	r2,a
      0000DB A3               [24]  620 	inc	dptr
      0000DC 12r00r00         [24]  621 	lcall	__gptrget
      0000DF FB               [12]  622 	mov	r3,a
      0000E0 E5*00            [12]  623 	mov	a,_bp
      0000E2 24 06            [12]  624 	add	a,#0x06
      0000E4 F8               [12]  625 	mov	r0,a
      0000E5 E6               [12]  626 	mov	a,@r0
      0000E6 24r00            [12]  627 	add	a,#_neigh
      0000E8 FC               [12]  628 	mov	r4,a
      0000E9 08               [12]  629 	inc	r0
      0000EA E6               [12]  630 	mov	a,@r0
      0000EB 34s00            [12]  631 	addc	a,#(_neigh >> 8)
      0000ED FD               [12]  632 	mov	r5,a
      0000EE 8C 82            [24]  633 	mov	dpl,r4
      0000F0 8D 83            [24]  634 	mov	dph,r5
      0000F2 A3               [24]  635 	inc	dptr
      0000F3 A3               [24]  636 	inc	dptr
      0000F4 E0               [24]  637 	movx	a,@dptr
      0000F5 FC               [12]  638 	mov	r4,a
      0000F6 A3               [24]  639 	inc	dptr
      0000F7 E0               [24]  640 	movx	a,@dptr
      0000F8 FD               [12]  641 	mov	r5,a
      0000F9 EC               [12]  642 	mov	a,r4
      0000FA 2A               [12]  643 	add	a,r2
      0000FB FA               [12]  644 	mov	r2,a
      0000FC ED               [12]  645 	mov	a,r5
      0000FD 3B               [12]  646 	addc	a,r3
      0000FE FB               [12]  647 	mov	r3,a
      0000FF E5*00            [12]  648 	mov	a,_bp
      000101 24 08            [12]  649 	add	a,#0x08
      000103 F8               [12]  650 	mov	r0,a
      000104 86 82            [24]  651 	mov	dpl,@r0
      000106 08               [12]  652 	inc	r0
      000107 86 83            [24]  653 	mov	dph,@r0
      000109 08               [12]  654 	inc	r0
      00010A 86 F0            [24]  655 	mov	b,@r0
      00010C EA               [12]  656 	mov	a,r2
      00010D 12r00r00         [24]  657 	lcall	__gptrput
      000110 A3               [24]  658 	inc	dptr
      000111 EB               [12]  659 	mov	a,r3
      000112 12r00r00         [24]  660 	lcall	__gptrput
                                    661 ;	walk.c:98: if (t->r < 0) t->r += ROWS;
      000115 A8*00            [24]  662 	mov	r0,_bp
      000117 08               [12]  663 	inc	r0
      000118 86 82            [24]  664 	mov	dpl,@r0
      00011A 08               [12]  665 	inc	r0
      00011B 86 83            [24]  666 	mov	dph,@r0
      00011D 08               [12]  667 	inc	r0
      00011E 86 F0            [24]  668 	mov	b,@r0
      000120 12r00r00         [24]  669 	lcall	__gptrget
      000123 FD               [12]  670 	mov	r5,a
      000124 A3               [24]  671 	inc	dptr
      000125 12r00r00         [24]  672 	lcall	__gptrget
      000128 FC               [12]  673 	mov	r4,a
      000129 EE               [12]  674 	mov	a,r6
      00012A 30 E7 1D         [24]  675 	jnb	acc.7,00104$
      00012D 74 30            [12]  676 	mov	a,#0x30
      00012F 2D               [12]  677 	add	a,r5
      000130 FF               [12]  678 	mov	r7,a
      000131 E4               [12]  679 	clr	a
      000132 3C               [12]  680 	addc	a,r4
      000133 FE               [12]  681 	mov	r6,a
      000134 A8*00            [24]  682 	mov	r0,_bp
      000136 08               [12]  683 	inc	r0
      000137 86 82            [24]  684 	mov	dpl,@r0
      000139 08               [12]  685 	inc	r0
      00013A 86 83            [24]  686 	mov	dph,@r0
      00013C 08               [12]  687 	inc	r0
      00013D 86 F0            [24]  688 	mov	b,@r0
      00013F EF               [12]  689 	mov	a,r7
      000140 12r00r00         [24]  690 	lcall	__gptrput
      000143 A3               [24]  691 	inc	dptr
      000144 EE               [12]  692 	mov	a,r6
      000145 12r00r00         [24]  693 	lcall	__gptrput
      000148 80 27            [24]  694 	sjmp	00105$
      00014A                        695 00104$:
                                    696 ;	walk.c:99: else if (t->r >= ROWS) t->r -= ROWS;
      00014A C3               [12]  697 	clr	c
      00014B ED               [12]  698 	mov	a,r5
      00014C 94 30            [12]  699 	subb	a,#0x30
      00014E EC               [12]  700 	mov	a,r4
      00014F 64 80            [12]  701 	xrl	a,#0x80
      000151 94 80            [12]  702 	subb	a,#0x80
      000153 40 1C            [24]  703 	jc	00105$
      000155 ED               [12]  704 	mov	a,r5
      000156 24 D0            [12]  705 	add	a,#0xd0
      000158 FD               [12]  706 	mov	r5,a
      000159 EC               [12]  707 	mov	a,r4
      00015A 34 FF            [12]  708 	addc	a,#0xff
      00015C FC               [12]  709 	mov	r4,a
      00015D A8*00            [24]  710 	mov	r0,_bp
      00015F 08               [12]  711 	inc	r0
      000160 86 82            [24]  712 	mov	dpl,@r0
      000162 08               [12]  713 	inc	r0
      000163 86 83            [24]  714 	mov	dph,@r0
      000165 08               [12]  715 	inc	r0
      000166 86 F0            [24]  716 	mov	b,@r0
      000168 ED               [12]  717 	mov	a,r5
      000169 12r00r00         [24]  718 	lcall	__gptrput
      00016C A3               [24]  719 	inc	dptr
      00016D EC               [12]  720 	mov	a,r4
      00016E 12r00r00         [24]  721 	lcall	__gptrput
      000171                        722 00105$:
                                    723 ;	walk.c:100: if (t->c < 0) t->c += COLS;
      000171 E5*00            [12]  724 	mov	a,_bp
      000173 24 08            [12]  725 	add	a,#0x08
      000175 F8               [12]  726 	mov	r0,a
      000176 86 82            [24]  727 	mov	dpl,@r0
      000178 08               [12]  728 	inc	r0
      000179 86 83            [24]  729 	mov	dph,@r0
      00017B 08               [12]  730 	inc	r0
      00017C 86 F0            [24]  731 	mov	b,@r0
      00017E 12r00r00         [24]  732 	lcall	__gptrget
      000181 A3               [24]  733 	inc	dptr
      000182 12r00r00         [24]  734 	lcall	__gptrget
      000185 30 E7 35         [24]  735 	jnb	acc.7,00109$
      000188 E5*00            [12]  736 	mov	a,_bp
      00018A 24 08            [12]  737 	add	a,#0x08
      00018C F8               [12]  738 	mov	r0,a
      00018D 86 82            [24]  739 	mov	dpl,@r0
      00018F 08               [12]  740 	inc	r0
      000190 86 83            [24]  741 	mov	dph,@r0
      000192 08               [12]  742 	inc	r0
      000193 86 F0            [24]  743 	mov	b,@r0
      000195 12r00r00         [24]  744 	lcall	__gptrget
      000198 FE               [12]  745 	mov	r6,a
      000199 A3               [24]  746 	inc	dptr
      00019A 12r00r00         [24]  747 	lcall	__gptrget
      00019D FF               [12]  748 	mov	r7,a
      00019E 74 C9            [12]  749 	mov	a,#0xc9
      0001A0 2E               [12]  750 	add	a,r6
      0001A1 FE               [12]  751 	mov	r6,a
      0001A2 E4               [12]  752 	clr	a
      0001A3 3F               [12]  753 	addc	a,r7
      0001A4 FF               [12]  754 	mov	r7,a
      0001A5 E5*00            [12]  755 	mov	a,_bp
      0001A7 24 08            [12]  756 	add	a,#0x08
      0001A9 F8               [12]  757 	mov	r0,a
      0001AA 86 82            [24]  758 	mov	dpl,@r0
      0001AC 08               [12]  759 	inc	r0
      0001AD 86 83            [24]  760 	mov	dph,@r0
      0001AF 08               [12]  761 	inc	r0
      0001B0 86 F0            [24]  762 	mov	b,@r0
      0001B2 EE               [12]  763 	mov	a,r6
      0001B3 12r00r00         [24]  764 	lcall	__gptrput
      0001B6 A3               [24]  765 	inc	dptr
      0001B7 EF               [12]  766 	mov	a,r7
      0001B8 12r00r00         [24]  767 	lcall	__gptrput
      0001BB 80 55            [24]  768 	sjmp	00110$
      0001BD                        769 00109$:
                                    770 ;	walk.c:101: else if (t->c >= COLS) t->c -= COLS;
      0001BD E5*00            [12]  771 	mov	a,_bp
      0001BF 24 08            [12]  772 	add	a,#0x08
      0001C1 F8               [12]  773 	mov	r0,a
      0001C2 86 82            [24]  774 	mov	dpl,@r0
      0001C4 08               [12]  775 	inc	r0
      0001C5 86 83            [24]  776 	mov	dph,@r0
      0001C7 08               [12]  777 	inc	r0
      0001C8 86 F0            [24]  778 	mov	b,@r0
      0001CA 12r00r00         [24]  779 	lcall	__gptrget
      0001CD FE               [12]  780 	mov	r6,a
      0001CE A3               [24]  781 	inc	dptr
      0001CF 12r00r00         [24]  782 	lcall	__gptrget
      0001D2 FF               [12]  783 	mov	r7,a
      0001D3 C3               [12]  784 	clr	c
      0001D4 EE               [12]  785 	mov	a,r6
      0001D5 94 C9            [12]  786 	subb	a,#0xc9
      0001D7 EF               [12]  787 	mov	a,r7
      0001D8 64 80            [12]  788 	xrl	a,#0x80
      0001DA 94 80            [12]  789 	subb	a,#0x80
      0001DC 40 34            [24]  790 	jc	00110$
      0001DE E5*00            [12]  791 	mov	a,_bp
      0001E0 24 08            [12]  792 	add	a,#0x08
      0001E2 F8               [12]  793 	mov	r0,a
      0001E3 86 82            [24]  794 	mov	dpl,@r0
      0001E5 08               [12]  795 	inc	r0
      0001E6 86 83            [24]  796 	mov	dph,@r0
      0001E8 08               [12]  797 	inc	r0
      0001E9 86 F0            [24]  798 	mov	b,@r0
      0001EB 12r00r00         [24]  799 	lcall	__gptrget
      0001EE FE               [12]  800 	mov	r6,a
      0001EF A3               [24]  801 	inc	dptr
      0001F0 12r00r00         [24]  802 	lcall	__gptrget
      0001F3 FF               [12]  803 	mov	r7,a
      0001F4 EE               [12]  804 	mov	a,r6
      0001F5 24 37            [12]  805 	add	a,#0x37
      0001F7 FE               [12]  806 	mov	r6,a
      0001F8 EF               [12]  807 	mov	a,r7
      0001F9 34 FF            [12]  808 	addc	a,#0xff
      0001FB FF               [12]  809 	mov	r7,a
      0001FC E5*00            [12]  810 	mov	a,_bp
      0001FE 24 08            [12]  811 	add	a,#0x08
      000200 F8               [12]  812 	mov	r0,a
      000201 86 82            [24]  813 	mov	dpl,@r0
      000203 08               [12]  814 	inc	r0
      000204 86 83            [24]  815 	mov	dph,@r0
      000206 08               [12]  816 	inc	r0
      000207 86 F0            [24]  817 	mov	b,@r0
      000209 EE               [12]  818 	mov	a,r6
      00020A 12r00r00         [24]  819 	lcall	__gptrput
      00020D A3               [24]  820 	inc	dptr
      00020E EF               [12]  821 	mov	a,r7
      00020F 12r00r00         [24]  822 	lcall	__gptrput
      000212                        823 00110$:
                                    824 ;	walk.c:103: if (g[t->r][t->c] == 0xaau) return 0u;
      000212 A8*00            [24]  825 	mov	r0,_bp
      000214 08               [12]  826 	inc	r0
      000215 86 82            [24]  827 	mov	dpl,@r0
      000217 08               [12]  828 	inc	r0
      000218 86 83            [24]  829 	mov	dph,@r0
      00021A 08               [12]  830 	inc	r0
      00021B 86 F0            [24]  831 	mov	b,@r0
      00021D 12r00r00         [24]  832 	lcall	__gptrget
      000220 FE               [12]  833 	mov	r6,a
      000221 A3               [24]  834 	inc	dptr
      000222 12r00r00         [24]  835 	lcall	__gptrget
      000225 FF               [12]  836 	mov	r7,a
      000226 C0 06            [24]  837 	push	ar6
      000228 C0 07            [24]  838 	push	ar7
      00022A 90 00 C9         [24]  839 	mov	dptr,#0x00c9
      00022D 12r00r00         [24]  840 	lcall	__mulint
      000230 AE 82            [24]  841 	mov	r6,dpl
      000232 AF 83            [24]  842 	mov	r7,dph
      000234 15 81            [12]  843 	dec	sp
      000236 15 81            [12]  844 	dec	sp
      000238 EE               [12]  845 	mov	a,r6
      000239 24r00            [12]  846 	add	a,#_g
      00023B FE               [12]  847 	mov	r6,a
      00023C EF               [12]  848 	mov	a,r7
      00023D 34s00            [12]  849 	addc	a,#(_g >> 8)
      00023F FF               [12]  850 	mov	r7,a
      000240 E5*00            [12]  851 	mov	a,_bp
      000242 24 08            [12]  852 	add	a,#0x08
      000244 F8               [12]  853 	mov	r0,a
      000245 86 82            [24]  854 	mov	dpl,@r0
      000247 08               [12]  855 	inc	r0
      000248 86 83            [24]  856 	mov	dph,@r0
      00024A 08               [12]  857 	inc	r0
      00024B 86 F0            [24]  858 	mov	b,@r0
      00024D 12r00r00         [24]  859 	lcall	__gptrget
      000250 FC               [12]  860 	mov	r4,a
      000251 A3               [24]  861 	inc	dptr
      000252 12r00r00         [24]  862 	lcall	__gptrget
      000255 FD               [12]  863 	mov	r5,a
      000256 EC               [12]  864 	mov	a,r4
      000257 2E               [12]  865 	add	a,r6
      000258 F5 82            [12]  866 	mov	dpl,a
      00025A ED               [12]  867 	mov	a,r5
      00025B 3F               [12]  868 	addc	a,r7
      00025C F5 83            [12]  869 	mov	dph,a
      00025E E0               [24]  870 	movx	a,@dptr
      00025F FF               [12]  871 	mov	r7,a
      000260 BF AA 05         [24]  872 	cjne	r7,#0xaa,00114$
      000263 75 82 00         [24]  873 	mov	dpl,#0x00
      000266 80 59            [24]  874 	sjmp	00116$
      000268                        875 00114$:
                                    876 ;	walk.c:104: else if (g[t->r][t->c] != 0x55u) bang();
      000268 A8*00            [24]  877 	mov	r0,_bp
      00026A 08               [12]  878 	inc	r0
      00026B 86 82            [24]  879 	mov	dpl,@r0
      00026D 08               [12]  880 	inc	r0
      00026E 86 83            [24]  881 	mov	dph,@r0
      000270 08               [12]  882 	inc	r0
      000271 86 F0            [24]  883 	mov	b,@r0
      000273 12r00r00         [24]  884 	lcall	__gptrget
      000276 FE               [12]  885 	mov	r6,a
      000277 A3               [24]  886 	inc	dptr
      000278 12r00r00         [24]  887 	lcall	__gptrget
      00027B FF               [12]  888 	mov	r7,a
      00027C C0 06            [24]  889 	push	ar6
      00027E C0 07            [24]  890 	push	ar7
      000280 90 00 C9         [24]  891 	mov	dptr,#0x00c9
      000283 12r00r00         [24]  892 	lcall	__mulint
      000286 AE 82            [24]  893 	mov	r6,dpl
      000288 AF 83            [24]  894 	mov	r7,dph
      00028A 15 81            [12]  895 	dec	sp
      00028C 15 81            [12]  896 	dec	sp
      00028E EE               [12]  897 	mov	a,r6
      00028F 24r00            [12]  898 	add	a,#_g
      000291 FE               [12]  899 	mov	r6,a
      000292 EF               [12]  900 	mov	a,r7
      000293 34s00            [12]  901 	addc	a,#(_g >> 8)
      000295 FF               [12]  902 	mov	r7,a
      000296 E5*00            [12]  903 	mov	a,_bp
      000298 24 08            [12]  904 	add	a,#0x08
      00029A F8               [12]  905 	mov	r0,a
      00029B 86 82            [24]  906 	mov	dpl,@r0
      00029D 08               [12]  907 	inc	r0
      00029E 86 83            [24]  908 	mov	dph,@r0
      0002A0 08               [12]  909 	inc	r0
      0002A1 86 F0            [24]  910 	mov	b,@r0
      0002A3 12r00r00         [24]  911 	lcall	__gptrget
      0002A6 FC               [12]  912 	mov	r4,a
      0002A7 A3               [24]  913 	inc	dptr
      0002A8 12r00r00         [24]  914 	lcall	__gptrget
      0002AB FD               [12]  915 	mov	r5,a
      0002AC EC               [12]  916 	mov	a,r4
      0002AD 2E               [12]  917 	add	a,r6
      0002AE F5 82            [12]  918 	mov	dpl,a
      0002B0 ED               [12]  919 	mov	a,r5
      0002B1 3F               [12]  920 	addc	a,r7
      0002B2 F5 83            [12]  921 	mov	dph,a
      0002B4 E0               [24]  922 	movx	a,@dptr
      0002B5 FF               [12]  923 	mov	r7,a
      0002B6 BF 55 02         [24]  924 	cjne	r7,#0x55,00148$
      0002B9 80 03            [24]  925 	sjmp	00115$
      0002BB                        926 00148$:
      0002BB 12r00r1A         [24]  927 	lcall	_bang
      0002BE                        928 00115$:
                                    929 ;	walk.c:106: return 1u;
      0002BE 75 82 01         [24]  930 	mov	dpl,#0x01
      0002C1                        931 00116$:
                                    932 ;	walk.c:107: }
      0002C1 85*00 81         [24]  933 	mov	sp,_bp
      0002C4 D0*00            [24]  934 	pop	_bp
      0002C6 22               [24]  935 	ret
                                    936 ;------------------------------------------------------------
                                    937 ;Allocation info for local variables in function 'walk'
                                    938 ;------------------------------------------------------------
                                    939 ;nstart                    Allocated to registers 
                                    940 ;cur                       Allocated to stack - _bp +10
                                    941 ;t                         Allocated to stack - _bp +14
                                    942 ;j                         Allocated to stack - _bp +18
                                    943 ;f                         Allocated to registers r3 
                                    944 ;sloc0                     Allocated to stack - _bp +1
                                    945 ;sloc1                     Allocated to stack - _bp +2
                                    946 ;sloc2                     Allocated to stack - _bp +3
                                    947 ;sloc3                     Allocated to stack - _bp +17
                                    948 ;sloc4                     Allocated to stack - _bp +4
                                    949 ;sloc5                     Allocated to stack - _bp +5
                                    950 ;sloc6                     Allocated to stack - _bp +6
                                    951 ;sloc7                     Allocated to stack - _bp +7
                                    952 ;------------------------------------------------------------
                                    953 ;	walk.c:109: static void walk(struct node *nstart) {
                                    954 ;	-----------------------------------------
                                    955 ;	 function walk
                                    956 ;	-----------------------------------------
      0002C7                        957 _walk:
      0002C7 C0*00            [24]  958 	push	_bp
      0002C9 E5 81            [12]  959 	mov	a,sp
      0002CB F5*00            [12]  960 	mov	_bp,a
      0002CD 24 12            [12]  961 	add	a,#0x12
      0002CF F5 81            [12]  962 	mov	sp,a
      0002D1 AD 82            [24]  963 	mov	r5,dpl
      0002D3 AE 83            [24]  964 	mov	r6,dph
      0002D5 AF F0            [24]  965 	mov	r7,b
                                    966 ;	walk.c:113: cur = *nstart;
      0002D7 E5*00            [12]  967 	mov	a,_bp
      0002D9 24 0A            [12]  968 	add	a,#0x0a
      0002DB F9               [12]  969 	mov	r1,a
      0002DC FA               [12]  970 	mov	r2,a
      0002DD 7B 00            [12]  971 	mov	r3,#0x00
      0002DF 7C 40            [12]  972 	mov	r4,#0x40
      0002E1 C0 01            [24]  973 	push	ar1
      0002E3 74 04            [12]  974 	mov	a,#0x04
      0002E5 C0 E0            [24]  975 	push	acc
      0002E7 E4               [12]  976 	clr	a
      0002E8 C0 E0            [24]  977 	push	acc
      0002EA C0 05            [24]  978 	push	ar5
      0002EC C0 06            [24]  979 	push	ar6
      0002EE C0 07            [24]  980 	push	ar7
      0002F0 8A 82            [24]  981 	mov	dpl,r2
      0002F2 8B 83            [24]  982 	mov	dph,r3
      0002F4 8C F0            [24]  983 	mov	b,r4
      0002F6 12r00r00         [24]  984 	lcall	___memcpy
      0002F9 E5 81            [12]  985 	mov	a,sp
      0002FB 24 FB            [12]  986 	add	a,#0xfb
      0002FD F5 81            [12]  987 	mov	sp,a
      0002FF D0 01            [24]  988 	pop	ar1
                                    989 ;	walk.c:115: process:
      000301 E5*00            [12]  990 	mov	a,_bp
      000303 24 06            [12]  991 	add	a,#0x06
      000305 F8               [12]  992 	mov	r0,a
      000306 A6 01            [24]  993 	mov	@r0,ar1
      000308 E5*00            [12]  994 	mov	a,_bp
      00030A 24 0E            [12]  995 	add	a,#0x0e
      00030C FE               [12]  996 	mov	r6,a
      00030D E5*00            [12]  997 	mov	a,_bp
      00030F 24 03            [12]  998 	add	a,#0x03
      000311 F8               [12]  999 	mov	r0,a
      000312 A6 01            [24] 1000 	mov	@r0,ar1
      000314 E5*00            [12] 1001 	mov	a,_bp
      000316 24 05            [12] 1002 	add	a,#0x05
      000318 F8               [12] 1003 	mov	r0,a
      000319 A6 01            [24] 1004 	mov	@r0,ar1
      00031B E5*00            [12] 1005 	mov	a,_bp
      00031D 24 04            [12] 1006 	add	a,#0x04
      00031F F8               [12] 1007 	mov	r0,a
      000320 A6 06            [24] 1008 	mov	@r0,ar6
      000322 89 02            [24] 1009 	mov	ar2,r1
      000324 A8*00            [24] 1010 	mov	r0,_bp
      000326 08               [12] 1011 	inc	r0
      000327 A6 06            [24] 1012 	mov	@r0,ar6
      000329 A8*00            [24] 1013 	mov	r0,_bp
      00032B 08               [12] 1014 	inc	r0
      00032C 08               [12] 1015 	inc	r0
      00032D A6 01            [24] 1016 	mov	@r0,ar1
      00032F 74 02            [12] 1017 	mov	a,#0x02
      000331 29               [12] 1018 	add	a,r1
      000332 F8               [12] 1019 	mov	r0,a
      000333                       1020 00101$:
                                   1021 ;	walk.c:116: g[cur.r][cur.c] = 0xaau;
      000333 C0 02            [24] 1022 	push	ar2
      000335 87 02            [24] 1023 	mov	ar2,@r1
      000337 09               [12] 1024 	inc	r1
      000338 87 05            [24] 1025 	mov	ar5,@r1
      00033A 19               [12] 1026 	dec	r1
      00033B C0 06            [24] 1027 	push	ar6
      00033D C0 01            [24] 1028 	push	ar1
      00033F C0 00            [24] 1029 	push	ar0
      000341 C0 02            [24] 1030 	push	ar2
      000343 C0 05            [24] 1031 	push	ar5
      000345 90 00 C9         [24] 1032 	mov	dptr,#0x00c9
      000348 12r00r00         [24] 1033 	lcall	__mulint
      00034B AA 82            [24] 1034 	mov	r2,dpl
      00034D AD 83            [24] 1035 	mov	r5,dph
      00034F 15 81            [12] 1036 	dec	sp
      000351 15 81            [12] 1037 	dec	sp
      000353 D0 00            [24] 1038 	pop	ar0
      000355 D0 01            [24] 1039 	pop	ar1
      000357 EA               [12] 1040 	mov	a,r2
      000358 24r00            [12] 1041 	add	a,#_g
      00035A FF               [12] 1042 	mov	r7,a
      00035B ED               [12] 1043 	mov	a,r5
      00035C 34s00            [12] 1044 	addc	a,#(_g >> 8)
      00035E FC               [12] 1045 	mov	r4,a
      00035F 86 02            [24] 1046 	mov	ar2,@r0
      000361 08               [12] 1047 	inc	r0
      000362 86 05            [24] 1048 	mov	ar5,@r0
      000364 18               [12] 1049 	dec	r0
      000365 EA               [12] 1050 	mov	a,r2
      000366 2F               [12] 1051 	add	a,r7
      000367 F5 82            [12] 1052 	mov	dpl,a
      000369 ED               [12] 1053 	mov	a,r5
      00036A 3C               [12] 1054 	addc	a,r4
      00036B F5 83            [12] 1055 	mov	dph,a
      00036D 74 AA            [12] 1056 	mov	a,#0xaa
      00036F F0               [24] 1057 	movx	@dptr,a
                                   1058 ;	walk.c:118: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000370 86 02            [24] 1059 	mov	ar2,@r0
      000372 08               [12] 1060 	inc	r0
      000373 86 05            [24] 1061 	mov	ar5,@r0
      000375 18               [12] 1062 	dec	r0
      000376 74 01            [12] 1063 	mov	a,#0x01
      000378 2A               [12] 1064 	add	a,r2
      000379 FF               [12] 1065 	mov	r7,a
      00037A E4               [12] 1066 	clr	a
      00037B 3D               [12] 1067 	addc	a,r5
      00037C FC               [12] 1068 	mov	r4,a
      00037D 87 02            [24] 1069 	mov	ar2,@r1
      00037F 09               [12] 1070 	inc	r1
      000380 87 05            [24] 1071 	mov	ar5,@r1
      000382 19               [12] 1072 	dec	r1
      000383 74 04            [12] 1073 	mov	a,#0x04
      000385 2A               [12] 1074 	add	a,r2
      000386 FA               [12] 1075 	mov	r2,a
      000387 E4               [12] 1076 	clr	a
      000388 3D               [12] 1077 	addc	a,r5
      000389 FD               [12] 1078 	mov	r5,a
      00038A C0 02            [24] 1079 	push	ar2
      00038C C0 01            [24] 1080 	push	ar1
      00038E C0 00            [24] 1081 	push	ar0
      000390 C0 07            [24] 1082 	push	ar7
      000392 C0 04            [24] 1083 	push	ar4
      000394 C0 02            [24] 1084 	push	ar2
      000396 C0 05            [24] 1085 	push	ar5
      000398 74r0D            [12] 1086 	mov	a,#___str_1
      00039A C0 E0            [24] 1087 	push	acc
      00039C 74s00            [12] 1088 	mov	a,#(___str_1 >> 8)
      00039E C0 E0            [24] 1089 	push	acc
      0003A0 74 80            [12] 1090 	mov	a,#0x80
      0003A2 C0 E0            [24] 1091 	push	acc
      0003A4 12r00r00         [24] 1092 	lcall	_printf
      0003A7 E5 81            [12] 1093 	mov	a,sp
      0003A9 24 F9            [12] 1094 	add	a,#0xf9
      0003AB F5 81            [12] 1095 	mov	sp,a
                                   1096 ;	walk.c:119: flashOE(OE76_MASK7);
      0003AD 75 82 80         [24] 1097 	mov	dpl,#0x80
      0003B0 12r00r27         [24] 1098 	lcall	_flashOE
      0003B3 D0 00            [24] 1099 	pop	ar0
      0003B5 D0 01            [24] 1100 	pop	ar1
      0003B7 D0 02            [24] 1101 	pop	ar2
      0003B9 D0 06            [24] 1102 	pop	ar6
                                   1103 ;	walk.c:144: return;
      0003BB D0 02            [24] 1104 	pop	ar2
                                   1105 ;	walk.c:121: next:
      0003BD                       1106 00102$:
                                   1107 ;	walk.c:122: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003BD C0 02            [24] 1108 	push	ar2
      0003BF 86 07            [24] 1109 	mov	ar7,@r0
      0003C1 08               [12] 1110 	inc	r0
      0003C2 86 04            [24] 1111 	mov	ar4,@r0
      0003C4 18               [12] 1112 	dec	r0
      0003C5 87 02            [24] 1113 	mov	ar2,@r1
      0003C7 09               [12] 1114 	inc	r1
      0003C8 87 05            [24] 1115 	mov	ar5,@r1
      0003CA 19               [12] 1116 	dec	r1
      0003CB C0 06            [24] 1117 	push	ar6
      0003CD C0 02            [24] 1118 	push	ar2
      0003CF C0 01            [24] 1119 	push	ar1
      0003D1 C0 00            [24] 1120 	push	ar0
      0003D3 C0 07            [24] 1121 	push	ar7
      0003D5 C0 04            [24] 1122 	push	ar4
      0003D7 C0 02            [24] 1123 	push	ar2
      0003D9 C0 05            [24] 1124 	push	ar5
      0003DB 90rBCr70         [24] 1125 	mov	dptr,#_sp
      0003DE E0               [24] 1126 	movx	a,@dptr
      0003DF C0 E0            [24] 1127 	push	acc
      0003E1 A3               [24] 1128 	inc	dptr
      0003E2 E0               [24] 1129 	movx	a,@dptr
      0003E3 C0 E0            [24] 1130 	push	acc
      0003E5 74r17            [12] 1131 	mov	a,#___str_2
      0003E7 C0 E0            [24] 1132 	push	acc
      0003E9 74s00            [12] 1133 	mov	a,#(___str_2 >> 8)
      0003EB C0 E0            [24] 1134 	push	acc
      0003ED 74 80            [12] 1135 	mov	a,#0x80
      0003EF C0 E0            [24] 1136 	push	acc
      0003F1 12r00r00         [24] 1137 	lcall	_printf
      0003F4 E5 81            [12] 1138 	mov	a,sp
      0003F6 24 F7            [12] 1139 	add	a,#0xf7
      0003F8 F5 81            [12] 1140 	mov	sp,a
      0003FA D0 00            [24] 1141 	pop	ar0
      0003FC D0 01            [24] 1142 	pop	ar1
      0003FE D0 02            [24] 1143 	pop	ar2
      000400 D0 06            [24] 1144 	pop	ar6
                                   1145 ;	walk.c:124: for (j = 0u, f = 0u; j < NMAX; j++) {
      000402 7B 00            [12] 1146 	mov	r3,#0x00
      000404 C0 00            [24] 1147 	push	ar0
      000406 E5*00            [12] 1148 	mov	a,_bp
      000408 24 12            [12] 1149 	add	a,#0x12
      00040A F8               [12] 1150 	mov	r0,a
      00040B 76 00            [12] 1151 	mov	@r0,#0x00
      00040D D0 00            [24] 1152 	pop	ar0
                                   1153 ;	walk.c:144: return;
      00040F D0 02            [24] 1154 	pop	ar2
                                   1155 ;	walk.c:124: for (j = 0u, f = 0u; j < NMAX; j++) {
      000411                       1156 00119$:
      000411 C0 00            [24] 1157 	push	ar0
      000413 E5*00            [12] 1158 	mov	a,_bp
      000415 24 12            [12] 1159 	add	a,#0x12
      000417 F8               [12] 1160 	mov	r0,a
      000418 B6 10 00         [24] 1161 	cjne	@r0,#0x10,00159$
      00041B                       1162 00159$:
      00041B D0 00            [24] 1163 	pop	ar0
      00041D 50 7A            [24] 1164 	jnc	00106$
                                   1165 ;	walk.c:125: if (!update(&t, &cur, j)) continue;
      00041F C0 02            [24] 1166 	push	ar2
      000421 C0 00            [24] 1167 	push	ar0
      000423 E5*00            [12] 1168 	mov	a,_bp
      000425 24 06            [12] 1169 	add	a,#0x06
      000427 F8               [12] 1170 	mov	r0,a
      000428 C0 01            [24] 1171 	push	ar1
      00042A E5*00            [12] 1172 	mov	a,_bp
      00042C 24 07            [12] 1173 	add	a,#0x07
      00042E F9               [12] 1174 	mov	r1,a
      00042F E6               [12] 1175 	mov	a,@r0
      000430 F7               [12] 1176 	mov	@r1,a
      000431 09               [12] 1177 	inc	r1
      000432 77 00            [12] 1178 	mov	@r1,#0x00
      000434 09               [12] 1179 	inc	r1
      000435 77 40            [12] 1180 	mov	@r1,#0x40
      000437 D0 01            [24] 1181 	pop	ar1
      000439 D0 00            [24] 1182 	pop	ar0
      00043B 8E 04            [24] 1183 	mov	ar4,r6
      00043D 7D 00            [12] 1184 	mov	r5,#0x00
      00043F 7F 40            [12] 1185 	mov	r7,#0x40
      000441 C0 06            [24] 1186 	push	ar6
      000443 C0 03            [24] 1187 	push	ar3
      000445 C0 02            [24] 1188 	push	ar2
      000447 C0 01            [24] 1189 	push	ar1
      000449 C0 00            [24] 1190 	push	ar0
      00044B 85 00 F0         [24] 1191 	mov	b,ar0
      00044E E5*00            [12] 1192 	mov	a,_bp
      000450 24 12            [12] 1193 	add	a,#0x12
      000452 F8               [12] 1194 	mov	r0,a
      000453 E6               [12] 1195 	mov	a,@r0
      000454 C0 E0            [24] 1196 	push	acc
      000456 A8 F0            [24] 1197 	mov	r0,b
      000458 85 00 F0         [24] 1198 	mov	b,ar0
      00045B E5*00            [12] 1199 	mov	a,_bp
      00045D 24 07            [12] 1200 	add	a,#0x07
      00045F F8               [12] 1201 	mov	r0,a
      000460 E6               [12] 1202 	mov	a,@r0
      000461 C0 E0            [24] 1203 	push	acc
      000463 08               [12] 1204 	inc	r0
      000464 E6               [12] 1205 	mov	a,@r0
      000465 C0 E0            [24] 1206 	push	acc
      000467 08               [12] 1207 	inc	r0
      000468 E6               [12] 1208 	mov	a,@r0
      000469 C0 E0            [24] 1209 	push	acc
      00046B 8C 82            [24] 1210 	mov	dpl,r4
      00046D 8D 83            [24] 1211 	mov	dph,r5
      00046F 8F F0            [24] 1212 	mov	b,r7
      000471 12r00r3A         [24] 1213 	lcall	_update
      000474 AF 82            [24] 1214 	mov	r7,dpl
      000476 E5 81            [12] 1215 	mov	a,sp
      000478 24 FC            [12] 1216 	add	a,#0xfc
      00047A F5 81            [12] 1217 	mov	sp,a
      00047C D0 00            [24] 1218 	pop	ar0
      00047E D0 01            [24] 1219 	pop	ar1
      000480 D0 02            [24] 1220 	pop	ar2
      000482 D0 03            [24] 1221 	pop	ar3
      000484 D0 06            [24] 1222 	pop	ar6
      000486 D0 02            [24] 1223 	pop	ar2
      000488 EF               [12] 1224 	mov	a,r7
      000489 60 01            [24] 1225 	jz	00105$
                                   1226 ;	walk.c:126: f++;
      00048B 0B               [12] 1227 	inc	r3
      00048C                       1228 00105$:
                                   1229 ;	walk.c:124: for (j = 0u, f = 0u; j < NMAX; j++) {
      00048C C0 00            [24] 1230 	push	ar0
      00048E E5*00            [12] 1231 	mov	a,_bp
      000490 24 12            [12] 1232 	add	a,#0x12
      000492 F8               [12] 1233 	mov	r0,a
      000493 06               [12] 1234 	inc	@r0
      000494 D0 00            [24] 1235 	pop	ar0
      000496 02r04r11         [24] 1236 	ljmp	00119$
      000499                       1237 00106$:
                                   1238 ;	walk.c:129: if (f) {
      000499 EB               [12] 1239 	mov	a,r3
      00049A 70 03            [24] 1240 	jnz	00162$
      00049C 02r05rB3         [24] 1241 	ljmp	00115$
      00049F                       1242 00162$:
                                   1243 ;	walk.c:130: while (1) {
      00049F                       1244 00112$:
                                   1245 ;	walk.c:131: j = (uint8_t)(rand() % NMAX);
      00049F C0 02            [24] 1246 	push	ar2
      0004A1 C0 06            [24] 1247 	push	ar6
      0004A3 C0 02            [24] 1248 	push	ar2
      0004A5 C0 01            [24] 1249 	push	ar1
      0004A7 C0 00            [24] 1250 	push	ar0
      0004A9 12r00r00         [24] 1251 	lcall	_rand
      0004AC AD 82            [24] 1252 	mov	r5,dpl
      0004AE D0 00            [24] 1253 	pop	ar0
      0004B0 D0 01            [24] 1254 	pop	ar1
      0004B2 D0 02            [24] 1255 	pop	ar2
      0004B4 D0 06            [24] 1256 	pop	ar6
      0004B6 53 05 0F         [24] 1257 	anl	ar5,#0x0f
      0004B9 8D 04            [24] 1258 	mov	ar4,r5
                                   1259 ;	walk.c:132: if (!update(&t, &cur, j)) continue;
      0004BB C0 00            [24] 1260 	push	ar0
      0004BD E5*00            [12] 1261 	mov	a,_bp
      0004BF 24 05            [12] 1262 	add	a,#0x05
      0004C1 F8               [12] 1263 	mov	r0,a
      0004C2 C0 01            [24] 1264 	push	ar1
      0004C4 E5*00            [12] 1265 	mov	a,_bp
      0004C6 24 07            [12] 1266 	add	a,#0x07
      0004C8 F9               [12] 1267 	mov	r1,a
      0004C9 E6               [12] 1268 	mov	a,@r0
      0004CA F7               [12] 1269 	mov	@r1,a
      0004CB 09               [12] 1270 	inc	r1
      0004CC 77 00            [12] 1271 	mov	@r1,#0x00
      0004CE 09               [12] 1272 	inc	r1
      0004CF 77 40            [12] 1273 	mov	@r1,#0x40
      0004D1 D0 01            [24] 1274 	pop	ar1
      0004D3 E5*00            [12] 1275 	mov	a,_bp
      0004D5 24 04            [12] 1276 	add	a,#0x04
      0004D7 F8               [12] 1277 	mov	r0,a
      0004D8 86 02            [24] 1278 	mov	ar2,@r0
      0004DA 7D 00            [12] 1279 	mov	r5,#0x00
      0004DC 7F 40            [12] 1280 	mov	r7,#0x40
      0004DE D0 00            [24] 1281 	pop	ar0
      0004E0 C0 06            [24] 1282 	push	ar6
      0004E2 C0 02            [24] 1283 	push	ar2
      0004E4 C0 01            [24] 1284 	push	ar1
      0004E6 C0 00            [24] 1285 	push	ar0
      0004E8 C0 04            [24] 1286 	push	ar4
      0004EA 85 00 F0         [24] 1287 	mov	b,ar0
      0004ED E5*00            [12] 1288 	mov	a,_bp
      0004EF 24 07            [12] 1289 	add	a,#0x07
      0004F1 F8               [12] 1290 	mov	r0,a
      0004F2 E6               [12] 1291 	mov	a,@r0
      0004F3 C0 E0            [24] 1292 	push	acc
      0004F5 08               [12] 1293 	inc	r0
      0004F6 E6               [12] 1294 	mov	a,@r0
      0004F7 C0 E0            [24] 1295 	push	acc
      0004F9 08               [12] 1296 	inc	r0
      0004FA E6               [12] 1297 	mov	a,@r0
      0004FB C0 E0            [24] 1298 	push	acc
      0004FD 8A 82            [24] 1299 	mov	dpl,r2
      0004FF 8D 83            [24] 1300 	mov	dph,r5
      000501 8F F0            [24] 1301 	mov	b,r7
      000503 12r00r3A         [24] 1302 	lcall	_update
      000506 AF 82            [24] 1303 	mov	r7,dpl
      000508 E5 81            [12] 1304 	mov	a,sp
      00050A 24 FC            [12] 1305 	add	a,#0xfc
      00050C F5 81            [12] 1306 	mov	sp,a
      00050E D0 00            [24] 1307 	pop	ar0
      000510 D0 01            [24] 1308 	pop	ar1
      000512 D0 02            [24] 1309 	pop	ar2
      000514 D0 06            [24] 1310 	pop	ar6
      000516 D0 02            [24] 1311 	pop	ar2
      000518 EF               [12] 1312 	mov	a,r7
      000519 60 84            [24] 1313 	jz	00112$
                                   1314 ;	walk.c:133: if (!stpush(&cur)) bang();
      00051B 8A 04            [24] 1315 	mov	ar4,r2
      00051D 7D 00            [12] 1316 	mov	r5,#0x00
      00051F 7F 40            [12] 1317 	mov	r7,#0x40
      000521 8C 82            [24] 1318 	mov	dpl,r4
      000523 8D 83            [24] 1319 	mov	dph,r5
      000525 8F F0            [24] 1320 	mov	b,r7
      000527 C0 06            [24] 1321 	push	ar6
      000529 C0 02            [24] 1322 	push	ar2
      00052B C0 01            [24] 1323 	push	ar1
      00052D C0 00            [24] 1324 	push	ar0
      00052F 12r0Ar17         [24] 1325 	lcall	_stpush
      000532 E5 82            [12] 1326 	mov	a,dpl
      000534 D0 00            [24] 1327 	pop	ar0
      000536 D0 01            [24] 1328 	pop	ar1
      000538 D0 02            [24] 1329 	pop	ar2
      00053A D0 06            [24] 1330 	pop	ar6
      00053C 70 13            [24] 1331 	jnz	00110$
      00053E C0 06            [24] 1332 	push	ar6
      000540 C0 02            [24] 1333 	push	ar2
      000542 C0 01            [24] 1334 	push	ar1
      000544 C0 00            [24] 1335 	push	ar0
      000546 12r00r1A         [24] 1336 	lcall	_bang
      000549 D0 00            [24] 1337 	pop	ar0
      00054B D0 01            [24] 1338 	pop	ar1
      00054D D0 02            [24] 1339 	pop	ar2
      00054F D0 06            [24] 1340 	pop	ar6
      000551                       1341 00110$:
                                   1342 ;	walk.c:134: cur = t;
      000551 C0 02            [24] 1343 	push	ar2
      000553 C0 00            [24] 1344 	push	ar0
      000555 A8*00            [24] 1345 	mov	r0,_bp
      000557 08               [12] 1346 	inc	r0
      000558 C0 01            [24] 1347 	push	ar1
      00055A E5*00            [12] 1348 	mov	a,_bp
      00055C 24 07            [12] 1349 	add	a,#0x07
      00055E F9               [12] 1350 	mov	r1,a
      00055F E6               [12] 1351 	mov	a,@r0
      000560 F7               [12] 1352 	mov	@r1,a
      000561 09               [12] 1353 	inc	r1
      000562 77 00            [12] 1354 	mov	@r1,#0x00
      000564 09               [12] 1355 	inc	r1
      000565 77 40            [12] 1356 	mov	@r1,#0x40
      000567 D0 01            [24] 1357 	pop	ar1
      000569 A8*00            [24] 1358 	mov	r0,_bp
      00056B 08               [12] 1359 	inc	r0
      00056C 08               [12] 1360 	inc	r0
      00056D 86 02            [24] 1361 	mov	ar2,@r0
      00056F 7B 00            [12] 1362 	mov	r3,#0x00
      000571 7F 40            [12] 1363 	mov	r7,#0x40
      000573 D0 00            [24] 1364 	pop	ar0
      000575 C0 06            [24] 1365 	push	ar6
      000577 C0 02            [24] 1366 	push	ar2
      000579 C0 01            [24] 1367 	push	ar1
      00057B C0 00            [24] 1368 	push	ar0
      00057D 74 04            [12] 1369 	mov	a,#0x04
      00057F C0 E0            [24] 1370 	push	acc
      000581 E4               [12] 1371 	clr	a
      000582 C0 E0            [24] 1372 	push	acc
      000584 85 00 F0         [24] 1373 	mov	b,ar0
      000587 E5*00            [12] 1374 	mov	a,_bp
      000589 24 07            [12] 1375 	add	a,#0x07
      00058B F8               [12] 1376 	mov	r0,a
      00058C E6               [12] 1377 	mov	a,@r0
      00058D C0 E0            [24] 1378 	push	acc
      00058F 08               [12] 1379 	inc	r0
      000590 E6               [12] 1380 	mov	a,@r0
      000591 C0 E0            [24] 1381 	push	acc
      000593 08               [12] 1382 	inc	r0
      000594 E6               [12] 1383 	mov	a,@r0
      000595 C0 E0            [24] 1384 	push	acc
      000597 8A 82            [24] 1385 	mov	dpl,r2
      000599 8B 83            [24] 1386 	mov	dph,r3
      00059B 8F F0            [24] 1387 	mov	b,r7
      00059D 12r00r00         [24] 1388 	lcall	___memcpy
      0005A0 E5 81            [12] 1389 	mov	a,sp
      0005A2 24 FB            [12] 1390 	add	a,#0xfb
      0005A4 F5 81            [12] 1391 	mov	sp,a
      0005A6 D0 00            [24] 1392 	pop	ar0
      0005A8 D0 01            [24] 1393 	pop	ar1
      0005AA D0 02            [24] 1394 	pop	ar2
      0005AC D0 06            [24] 1395 	pop	ar6
                                   1396 ;	walk.c:135: goto process;
      0005AE D0 02            [24] 1397 	pop	ar2
      0005B0 02r03r33         [24] 1398 	ljmp	00101$
      0005B3                       1399 00115$:
                                   1400 ;	walk.c:139: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005B3 86 05            [24] 1401 	mov	ar5,@r0
      0005B5 08               [12] 1402 	inc	r0
      0005B6 86 07            [24] 1403 	mov	ar7,@r0
      0005B8 18               [12] 1404 	dec	r0
      0005B9 0D               [12] 1405 	inc	r5
      0005BA BD 00 01         [24] 1406 	cjne	r5,#0x00,00165$
      0005BD 0F               [12] 1407 	inc	r7
      0005BE                       1408 00165$:
      0005BE 87 03            [24] 1409 	mov	ar3,@r1
      0005C0 09               [12] 1410 	inc	r1
      0005C1 87 04            [24] 1411 	mov	ar4,@r1
      0005C3 19               [12] 1412 	dec	r1
      0005C4 74 04            [12] 1413 	mov	a,#0x04
      0005C6 2B               [12] 1414 	add	a,r3
      0005C7 FB               [12] 1415 	mov	r3,a
      0005C8 E4               [12] 1416 	clr	a
      0005C9 3C               [12] 1417 	addc	a,r4
      0005CA FC               [12] 1418 	mov	r4,a
      0005CB C0 06            [24] 1419 	push	ar6
      0005CD C0 02            [24] 1420 	push	ar2
      0005CF C0 01            [24] 1421 	push	ar1
      0005D1 C0 00            [24] 1422 	push	ar0
      0005D3 C0 05            [24] 1423 	push	ar5
      0005D5 C0 07            [24] 1424 	push	ar7
      0005D7 C0 03            [24] 1425 	push	ar3
      0005D9 C0 04            [24] 1426 	push	ar4
      0005DB 74r2A            [12] 1427 	mov	a,#___str_3
      0005DD C0 E0            [24] 1428 	push	acc
      0005DF 74s00            [12] 1429 	mov	a,#(___str_3 >> 8)
      0005E1 C0 E0            [24] 1430 	push	acc
      0005E3 74 80            [12] 1431 	mov	a,#0x80
      0005E5 C0 E0            [24] 1432 	push	acc
      0005E7 12r00r00         [24] 1433 	lcall	_printf
      0005EA E5 81            [12] 1434 	mov	a,sp
      0005EC 24 F9            [12] 1435 	add	a,#0xf9
      0005EE F5 81            [12] 1436 	mov	sp,a
                                   1437 ;	walk.c:140: flashOE(OE76_MASK6);
      0005F0 75 82 40         [24] 1438 	mov	dpl,#0x40
      0005F3 12r00r27         [24] 1439 	lcall	_flashOE
      0005F6 D0 00            [24] 1440 	pop	ar0
      0005F8 D0 01            [24] 1441 	pop	ar1
      0005FA D0 02            [24] 1442 	pop	ar2
      0005FC D0 06            [24] 1443 	pop	ar6
                                   1444 ;	walk.c:142: if (stpop(&cur)) goto next;
      0005FE C0 00            [24] 1445 	push	ar0
      000600 E5*00            [12] 1446 	mov	a,_bp
      000602 24 03            [12] 1447 	add	a,#0x03
      000604 F8               [12] 1448 	mov	r0,a
      000605 86 04            [24] 1449 	mov	ar4,@r0
      000607 7D 00            [12] 1450 	mov	r5,#0x00
      000609 7F 40            [12] 1451 	mov	r7,#0x40
      00060B D0 00            [24] 1452 	pop	ar0
      00060D 8C 82            [24] 1453 	mov	dpl,r4
      00060F 8D 83            [24] 1454 	mov	dph,r5
      000611 8F F0            [24] 1455 	mov	b,r7
      000613 C0 06            [24] 1456 	push	ar6
      000615 C0 02            [24] 1457 	push	ar2
      000617 C0 01            [24] 1458 	push	ar1
      000619 C0 00            [24] 1459 	push	ar0
      00061B 12r0Ar78         [24] 1460 	lcall	_stpop
      00061E E5 82            [12] 1461 	mov	a,dpl
      000620 D0 00            [24] 1462 	pop	ar0
      000622 D0 01            [24] 1463 	pop	ar1
      000624 D0 02            [24] 1464 	pop	ar2
      000626 D0 06            [24] 1465 	pop	ar6
      000628 60 03            [24] 1466 	jz	00166$
      00062A 02r03rBD         [24] 1467 	ljmp	00102$
      00062D                       1468 00166$:
                                   1469 ;	walk.c:144: return;
                                   1470 ;	walk.c:145: }
      00062D 85*00 81         [24] 1471 	mov	sp,_bp
      000630 D0*00            [24] 1472 	pop	_bp
      000632 22               [24] 1473 	ret
                                   1474 ;------------------------------------------------------------
                                   1475 ;Allocation info for local variables in function 'main'
                                   1476 ;------------------------------------------------------------
                                   1477 ;initial                   Allocated to stack - _bp +9
                                   1478 ;N                         Allocated to stack - _bp +5
                                   1479 ;i                         Allocated to stack - _bp +7
                                   1480 ;j                         Allocated to registers r2 r6 
                                   1481 ;sloc0                     Allocated to stack - _bp +1
                                   1482 ;sloc1                     Allocated to stack - _bp +3
                                   1483 ;sloc2                     Allocated to stack - _bp +15
                                   1484 ;------------------------------------------------------------
                                   1485 ;	walk.c:147: void main(void) {
                                   1486 ;	-----------------------------------------
                                   1487 ;	 function main
                                   1488 ;	-----------------------------------------
      000633                       1489 _main:
      000633 C0*00            [24] 1490 	push	_bp
      000635 E5 81            [12] 1491 	mov	a,sp
      000637 F5*00            [12] 1492 	mov	_bp,a
      000639 24 0C            [12] 1493 	add	a,#0x0c
      00063B F5 81            [12] 1494 	mov	sp,a
                                   1495 ;	walk.c:152: i0 = 1u;
      00063D 78r00            [12] 1496 	mov	r0,#_i0
      00063F 76 01            [12] 1497 	mov	@r0,#0x01
                                   1498 ;	walk.c:154: P1_7 = 1;
                                   1499 ;	assignBit
      000641 D2 97            [12] 1500 	setb	_P1_7
                                   1501 ;	walk.c:155: IT0 = 1;
                                   1502 ;	assignBit
      000643 D2 88            [12] 1503 	setb	_IT0
                                   1504 ;	walk.c:156: EX0 = 1;
                                   1505 ;	assignBit
      000645 D2 A8            [12] 1506 	setb	_EX0
                                   1507 ;	walk.c:157: EA = 1;
                                   1508 ;	assignBit
      000647 D2 AF            [12] 1509 	setb	_EA
                                   1510 ;	walk.c:159: srand(RND);
      000649 90 80 00         [24] 1511 	mov	dptr,#_RND
      00064C E0               [24] 1512 	movx	a,@dptr
      00064D FE               [12] 1513 	mov	r6,a
      00064E A3               [24] 1514 	inc	dptr
      00064F E0               [24] 1515 	movx	a,@dptr
      000650 FF               [12] 1516 	mov	r7,a
      000651 8E 82            [24] 1517 	mov	dpl,r6
      000653 8F 83            [24] 1518 	mov	dph,r7
      000655 12r00r00         [24] 1519 	lcall	_srand
                                   1520 ;	walk.c:160: stinit();
      000658 12r0Ar0E         [24] 1521 	lcall	_stinit
                                   1522 ;	walk.c:162: puts("\033[2J\033[?25l");
      00065B 90r00r34         [24] 1523 	mov	dptr,#___str_4
      00065E 75 F0 80         [24] 1524 	mov	b,#0x80
      000661 12r00r00         [24] 1525 	lcall	_puts
                                   1526 ;	walk.c:164: while (i0) {
      000664 E5*00            [12] 1527 	mov	a,_bp
      000666 24 09            [12] 1528 	add	a,#0x09
      000668 F9               [12] 1529 	mov	r1,a
      000669 FF               [12] 1530 	mov	r7,a
      00066A E5*00            [12] 1531 	mov	a,_bp
      00066C 24 05            [12] 1532 	add	a,#0x05
      00066E F8               [12] 1533 	mov	r0,a
      00066F E4               [12] 1534 	clr	a
      000670 F6               [12] 1535 	mov	@r0,a
      000671 08               [12] 1536 	inc	r0
      000672 F6               [12] 1537 	mov	@r0,a
      000673                       1538 00108$:
      000673 78r00            [12] 1539 	mov	r0,#_i0
      000675 E6               [12] 1540 	mov	a,@r0
      000676 70 03            [24] 1541 	jnz	00182$
      000678 02r09rFA         [24] 1542 	ljmp	00110$
      00067B                       1543 00182$:
                                   1544 ;	walk.c:165: for (i = 0; i < ROWS; i++)
      00067B 7B 00            [12] 1545 	mov	r3,#0x00
      00067D 7C 00            [12] 1546 	mov	r4,#0x00
      00067F A8*00            [24] 1547 	mov	r0,_bp
      000681 08               [12] 1548 	inc	r0
      000682 E4               [12] 1549 	clr	a
      000683 F6               [12] 1550 	mov	@r0,a
      000684 08               [12] 1551 	inc	r0
      000685 F6               [12] 1552 	mov	@r0,a
                                   1553 ;	walk.c:166: for (j = 0; j < COLS; j++)
      000686                       1554 00125$:
      000686 A8*00            [24] 1555 	mov	r0,_bp
      000688 08               [12] 1556 	inc	r0
      000689 C0 01            [24] 1557 	push	ar1
      00068B E5*00            [12] 1558 	mov	a,_bp
      00068D 24 03            [12] 1559 	add	a,#0x03
      00068F F9               [12] 1560 	mov	r1,a
      000690 E6               [12] 1561 	mov	a,@r0
      000691 24r00            [12] 1562 	add	a,#_g
      000693 F7               [12] 1563 	mov	@r1,a
      000694 08               [12] 1564 	inc	r0
      000695 E6               [12] 1565 	mov	a,@r0
      000696 34s00            [12] 1566 	addc	a,#(_g >> 8)
      000698 09               [12] 1567 	inc	r1
      000699 F7               [12] 1568 	mov	@r1,a
      00069A D0 01            [24] 1569 	pop	ar1
      00069C 7A 00            [12] 1570 	mov	r2,#0x00
      00069E 7E 00            [12] 1571 	mov	r6,#0x00
      0006A0                       1572 00112$:
                                   1573 ;	walk.c:167: g[i][j] = 0x55u;
      0006A0 E5*00            [12] 1574 	mov	a,_bp
      0006A2 24 03            [12] 1575 	add	a,#0x03
      0006A4 F8               [12] 1576 	mov	r0,a
      0006A5 EA               [12] 1577 	mov	a,r2
      0006A6 26               [12] 1578 	add	a,@r0
      0006A7 F5 82            [12] 1579 	mov	dpl,a
      0006A9 EE               [12] 1580 	mov	a,r6
      0006AA 08               [12] 1581 	inc	r0
      0006AB 36               [12] 1582 	addc	a,@r0
      0006AC F5 83            [12] 1583 	mov	dph,a
      0006AE 74 55            [12] 1584 	mov	a,#0x55
      0006B0 F0               [24] 1585 	movx	@dptr,a
                                   1586 ;	walk.c:166: for (j = 0; j < COLS; j++)
      0006B1 0A               [12] 1587 	inc	r2
      0006B2 BA 00 01         [24] 1588 	cjne	r2,#0x00,00183$
      0006B5 0E               [12] 1589 	inc	r6
      0006B6                       1590 00183$:
      0006B6 C3               [12] 1591 	clr	c
      0006B7 EA               [12] 1592 	mov	a,r2
      0006B8 94 C9            [12] 1593 	subb	a,#0xc9
      0006BA EE               [12] 1594 	mov	a,r6
      0006BB 64 80            [12] 1595 	xrl	a,#0x80
      0006BD 94 80            [12] 1596 	subb	a,#0x80
      0006BF 40 DF            [24] 1597 	jc	00112$
                                   1598 ;	walk.c:165: for (i = 0; i < ROWS; i++)
      0006C1 A8*00            [24] 1599 	mov	r0,_bp
      0006C3 08               [12] 1600 	inc	r0
      0006C4 74 C9            [12] 1601 	mov	a,#0xc9
      0006C6 26               [12] 1602 	add	a,@r0
      0006C7 F6               [12] 1603 	mov	@r0,a
      0006C8 E4               [12] 1604 	clr	a
      0006C9 08               [12] 1605 	inc	r0
      0006CA 36               [12] 1606 	addc	a,@r0
      0006CB F6               [12] 1607 	mov	@r0,a
      0006CC 0B               [12] 1608 	inc	r3
      0006CD BB 00 01         [24] 1609 	cjne	r3,#0x00,00185$
      0006D0 0C               [12] 1610 	inc	r4
      0006D1                       1611 00185$:
      0006D1 C3               [12] 1612 	clr	c
      0006D2 EB               [12] 1613 	mov	a,r3
      0006D3 94 30            [12] 1614 	subb	a,#0x30
      0006D5 EC               [12] 1615 	mov	a,r4
      0006D6 64 80            [12] 1616 	xrl	a,#0x80
      0006D8 94 80            [12] 1617 	subb	a,#0x80
      0006DA 40 AA            [24] 1618 	jc	00125$
                                   1619 ;	walk.c:169: initial.r = rand() % ROWS;
      0006DC E5*00            [12] 1620 	mov	a,_bp
      0006DE 24 09            [12] 1621 	add	a,#0x09
      0006E0 F8               [12] 1622 	mov	r0,a
      0006E1 C0 07            [24] 1623 	push	ar7
      0006E3 C0 01            [24] 1624 	push	ar1
      0006E5 C0 00            [24] 1625 	push	ar0
      0006E7 12r00r00         [24] 1626 	lcall	_rand
      0006EA AD 82            [24] 1627 	mov	r5,dpl
      0006EC AE 83            [24] 1628 	mov	r6,dph
      0006EE 74 30            [12] 1629 	mov	a,#0x30
      0006F0 C0 E0            [24] 1630 	push	acc
      0006F2 E4               [12] 1631 	clr	a
      0006F3 C0 E0            [24] 1632 	push	acc
      0006F5 8D 82            [24] 1633 	mov	dpl,r5
      0006F7 8E 83            [24] 1634 	mov	dph,r6
      0006F9 12r00r00         [24] 1635 	lcall	__modsint
      0006FC AD 82            [24] 1636 	mov	r5,dpl
      0006FE AE 83            [24] 1637 	mov	r6,dph
      000700 15 81            [12] 1638 	dec	sp
      000702 15 81            [12] 1639 	dec	sp
      000704 D0 00            [24] 1640 	pop	ar0
      000706 D0 01            [24] 1641 	pop	ar1
      000708 A6 05            [24] 1642 	mov	@r0,ar5
      00070A 08               [12] 1643 	inc	r0
      00070B A6 06            [24] 1644 	mov	@r0,ar6
      00070D 18               [12] 1645 	dec	r0
                                   1646 ;	walk.c:170: initial.c = rand() % COLS;
      00070E 74 02            [12] 1647 	mov	a,#0x02
      000710 29               [12] 1648 	add	a,r1
      000711 F8               [12] 1649 	mov	r0,a
      000712 C0 01            [24] 1650 	push	ar1
      000714 C0 00            [24] 1651 	push	ar0
      000716 12r00r00         [24] 1652 	lcall	_rand
      000719 AD 82            [24] 1653 	mov	r5,dpl
      00071B AE 83            [24] 1654 	mov	r6,dph
      00071D 74 C9            [12] 1655 	mov	a,#0xc9
      00071F C0 E0            [24] 1656 	push	acc
      000721 E4               [12] 1657 	clr	a
      000722 C0 E0            [24] 1658 	push	acc
      000724 8D 82            [24] 1659 	mov	dpl,r5
      000726 8E 83            [24] 1660 	mov	dph,r6
      000728 12r00r00         [24] 1661 	lcall	__modsint
      00072B AD 82            [24] 1662 	mov	r5,dpl
      00072D AE 83            [24] 1663 	mov	r6,dph
      00072F 15 81            [12] 1664 	dec	sp
      000731 15 81            [12] 1665 	dec	sp
      000733 D0 00            [24] 1666 	pop	ar0
      000735 A6 05            [24] 1667 	mov	@r0,ar5
      000737 08               [12] 1668 	inc	r0
      000738 A6 06            [24] 1669 	mov	@r0,ar6
      00073A 18               [12] 1670 	dec	r0
                                   1671 ;	walk.c:172: puts("\033[2J\033[?25l");
      00073B 90r00r34         [24] 1672 	mov	dptr,#___str_4
      00073E 75 F0 80         [24] 1673 	mov	b,#0x80
      000741 C0 00            [24] 1674 	push	ar0
      000743 12r00r00         [24] 1675 	lcall	_puts
      000746 D0 00            [24] 1676 	pop	ar0
      000748 D0 01            [24] 1677 	pop	ar1
                                   1678 ;	walk.c:173: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00074A 86 05            [24] 1679 	mov	ar5,@r0
      00074C 08               [12] 1680 	inc	r0
      00074D 86 06            [24] 1681 	mov	ar6,@r0
      00074F 18               [12] 1682 	dec	r0
      000750 87 03            [24] 1683 	mov	ar3,@r1
      000752 09               [12] 1684 	inc	r1
      000753 87 04            [24] 1685 	mov	ar4,@r1
      000755 19               [12] 1686 	dec	r1
      000756 C0 01            [24] 1687 	push	ar1
      000758 C0 05            [24] 1688 	push	ar5
      00075A C0 06            [24] 1689 	push	ar6
      00075C C0 03            [24] 1690 	push	ar3
      00075E C0 04            [24] 1691 	push	ar4
      000760 E5*00            [12] 1692 	mov	a,_bp
      000762 24 05            [12] 1693 	add	a,#0x05
      000764 F8               [12] 1694 	mov	r0,a
      000765 E6               [12] 1695 	mov	a,@r0
      000766 C0 E0            [24] 1696 	push	acc
      000768 08               [12] 1697 	inc	r0
      000769 E6               [12] 1698 	mov	a,@r0
      00076A C0 E0            [24] 1699 	push	acc
      00076C 74r3F            [12] 1700 	mov	a,#___str_5
      00076E C0 E0            [24] 1701 	push	acc
      000770 74s00            [12] 1702 	mov	a,#(___str_5 >> 8)
      000772 C0 E0            [24] 1703 	push	acc
      000774 74 80            [12] 1704 	mov	a,#0x80
      000776 C0 E0            [24] 1705 	push	acc
      000778 12r00r00         [24] 1706 	lcall	_printf
      00077B E5 81            [12] 1707 	mov	a,sp
      00077D 24 F7            [12] 1708 	add	a,#0xf7
      00077F F5 81            [12] 1709 	mov	sp,a
      000781 D0 01            [24] 1710 	pop	ar1
      000783 D0 07            [24] 1711 	pop	ar7
                                   1712 ;	walk.c:175: for (i = 0; i < REG; i++) {
      000785 E5*00            [12] 1713 	mov	a,_bp
      000787 24 07            [12] 1714 	add	a,#0x07
      000789 F8               [12] 1715 	mov	r0,a
      00078A E4               [12] 1716 	clr	a
      00078B F6               [12] 1717 	mov	@r0,a
      00078C 08               [12] 1718 	inc	r0
      00078D F6               [12] 1719 	mov	@r0,a
      00078E                       1720 00116$:
                                   1721 ;	walk.c:176: neigh[i].r = neigh[REG + i].r * (1 + rand() % 8);
      00078E C0 07            [24] 1722 	push	ar7
      000790 E5*00            [12] 1723 	mov	a,_bp
      000792 24 07            [12] 1724 	add	a,#0x07
      000794 F8               [12] 1725 	mov	r0,a
      000795 E6               [12] 1726 	mov	a,@r0
      000796 25 E0            [12] 1727 	add	a,acc
      000798 FB               [12] 1728 	mov	r3,a
      000799 08               [12] 1729 	inc	r0
      00079A E6               [12] 1730 	mov	a,@r0
      00079B 33               [12] 1731 	rlc	a
      00079C FC               [12] 1732 	mov	r4,a
      00079D EB               [12] 1733 	mov	a,r3
      00079E 2B               [12] 1734 	add	a,r3
      00079F FB               [12] 1735 	mov	r3,a
      0007A0 EC               [12] 1736 	mov	a,r4
      0007A1 33               [12] 1737 	rlc	a
      0007A2 FC               [12] 1738 	mov	r4,a
      0007A3 E5*00            [12] 1739 	mov	a,_bp
      0007A5 24 03            [12] 1740 	add	a,#0x03
      0007A7 F8               [12] 1741 	mov	r0,a
      0007A8 EB               [12] 1742 	mov	a,r3
      0007A9 24r00            [12] 1743 	add	a,#_neigh
      0007AB F6               [12] 1744 	mov	@r0,a
      0007AC EC               [12] 1745 	mov	a,r4
      0007AD 34s00            [12] 1746 	addc	a,#(_neigh >> 8)
      0007AF 08               [12] 1747 	inc	r0
      0007B0 F6               [12] 1748 	mov	@r0,a
      0007B1 E5*00            [12] 1749 	mov	a,_bp
      0007B3 24 07            [12] 1750 	add	a,#0x07
      0007B5 F8               [12] 1751 	mov	r0,a
      0007B6 86 06            [24] 1752 	mov	ar6,@r0
      0007B8 74 08            [12] 1753 	mov	a,#0x08
      0007BA 2E               [12] 1754 	add	a,r6
      0007BB FE               [12] 1755 	mov	r6,a
      0007BC C2 D5            [12] 1756 	clr	F0
      0007BE 75 F0 04         [24] 1757 	mov	b,#0x04
      0007C1 EE               [12] 1758 	mov	a,r6
      0007C2 30 E7 04         [24] 1759 	jnb	acc.7,00187$
      0007C5 B2 D5            [12] 1760 	cpl	F0
      0007C7 F4               [12] 1761 	cpl	a
      0007C8 04               [12] 1762 	inc	a
      0007C9                       1763 00187$:
      0007C9 A4               [48] 1764 	mul	ab
      0007CA 30 D5 0A         [24] 1765 	jnb	F0,00188$
      0007CD F4               [12] 1766 	cpl	a
      0007CE 24 01            [12] 1767 	add	a,#0x01
      0007D0 C5 F0            [12] 1768 	xch	a,b
      0007D2 F4               [12] 1769 	cpl	a
      0007D3 34 00            [12] 1770 	addc	a,#0x00
      0007D5 C5 F0            [12] 1771 	xch	a,b
      0007D7                       1772 00188$:
      0007D7 FE               [12] 1773 	mov	r6,a
      0007D8 AD F0            [24] 1774 	mov	r5,b
      0007DA 24r00            [12] 1775 	add	a,#_neigh
      0007DC F5 82            [12] 1776 	mov	dpl,a
      0007DE ED               [12] 1777 	mov	a,r5
      0007DF 34s00            [12] 1778 	addc	a,#(_neigh >> 8)
      0007E1 F5 83            [12] 1779 	mov	dph,a
      0007E3 A8*00            [24] 1780 	mov	r0,_bp
      0007E5 08               [12] 1781 	inc	r0
      0007E6 E0               [24] 1782 	movx	a,@dptr
      0007E7 F6               [12] 1783 	mov	@r0,a
      0007E8 A3               [24] 1784 	inc	dptr
      0007E9 E0               [24] 1785 	movx	a,@dptr
      0007EA 08               [12] 1786 	inc	r0
      0007EB F6               [12] 1787 	mov	@r0,a
      0007EC C0 06            [24] 1788 	push	ar6
      0007EE C0 05            [24] 1789 	push	ar5
      0007F0 C0 04            [24] 1790 	push	ar4
      0007F2 C0 03            [24] 1791 	push	ar3
      0007F4 C0 01            [24] 1792 	push	ar1
      0007F6 12r00r00         [24] 1793 	lcall	_rand
      0007F9 AA 82            [24] 1794 	mov	r2,dpl
      0007FB AF 83            [24] 1795 	mov	r7,dph
      0007FD 74 08            [12] 1796 	mov	a,#0x08
      0007FF C0 E0            [24] 1797 	push	acc
      000801 E4               [12] 1798 	clr	a
      000802 C0 E0            [24] 1799 	push	acc
      000804 8A 82            [24] 1800 	mov	dpl,r2
      000806 8F 83            [24] 1801 	mov	dph,r7
      000808 12r00r00         [24] 1802 	lcall	__modsint
      00080B AA 82            [24] 1803 	mov	r2,dpl
      00080D AF 83            [24] 1804 	mov	r7,dph
      00080F 15 81            [12] 1805 	dec	sp
      000811 15 81            [12] 1806 	dec	sp
      000813 D0 01            [24] 1807 	pop	ar1
      000815 D0 03            [24] 1808 	pop	ar3
      000817 D0 04            [24] 1809 	pop	ar4
      000819 D0 05            [24] 1810 	pop	ar5
      00081B D0 06            [24] 1811 	pop	ar6
      00081D 0A               [12] 1812 	inc	r2
      00081E BA 00 01         [24] 1813 	cjne	r2,#0x00,00189$
      000821 0F               [12] 1814 	inc	r7
      000822                       1815 00189$:
      000822 C0 06            [24] 1816 	push	ar6
      000824 C0 05            [24] 1817 	push	ar5
      000826 C0 04            [24] 1818 	push	ar4
      000828 C0 03            [24] 1819 	push	ar3
      00082A C0 01            [24] 1820 	push	ar1
      00082C C0 02            [24] 1821 	push	ar2
      00082E C0 07            [24] 1822 	push	ar7
      000830 A8*00            [24] 1823 	mov	r0,_bp
      000832 08               [12] 1824 	inc	r0
      000833 86 82            [24] 1825 	mov	dpl,@r0
      000835 08               [12] 1826 	inc	r0
      000836 86 83            [24] 1827 	mov	dph,@r0
      000838 12r00r00         [24] 1828 	lcall	__mulint
      00083B AA 82            [24] 1829 	mov	r2,dpl
      00083D AF 83            [24] 1830 	mov	r7,dph
      00083F 15 81            [12] 1831 	dec	sp
      000841 15 81            [12] 1832 	dec	sp
      000843 D0 01            [24] 1833 	pop	ar1
      000845 D0 03            [24] 1834 	pop	ar3
      000847 D0 04            [24] 1835 	pop	ar4
      000849 D0 05            [24] 1836 	pop	ar5
      00084B D0 06            [24] 1837 	pop	ar6
      00084D E5*00            [12] 1838 	mov	a,_bp
      00084F 24 03            [12] 1839 	add	a,#0x03
      000851 F8               [12] 1840 	mov	r0,a
      000852 86 82            [24] 1841 	mov	dpl,@r0
      000854 08               [12] 1842 	inc	r0
      000855 86 83            [24] 1843 	mov	dph,@r0
      000857 EA               [12] 1844 	mov	a,r2
      000858 F0               [24] 1845 	movx	@dptr,a
      000859 EF               [12] 1846 	mov	a,r7
      00085A A3               [24] 1847 	inc	dptr
      00085B F0               [24] 1848 	movx	@dptr,a
                                   1849 ;	walk.c:177: neigh[i].c = neigh[REG + i].c * (1 + rand() % 8);
      00085C EB               [12] 1850 	mov	a,r3
      00085D 24r00            [12] 1851 	add	a,#_neigh
      00085F FB               [12] 1852 	mov	r3,a
      000860 EC               [12] 1853 	mov	a,r4
      000861 34s00            [12] 1854 	addc	a,#(_neigh >> 8)
      000863 FC               [12] 1855 	mov	r4,a
      000864 74 02            [12] 1856 	mov	a,#0x02
      000866 2B               [12] 1857 	add	a,r3
      000867 FA               [12] 1858 	mov	r2,a
      000868 E4               [12] 1859 	clr	a
      000869 3C               [12] 1860 	addc	a,r4
      00086A FF               [12] 1861 	mov	r7,a
      00086B EE               [12] 1862 	mov	a,r6
      00086C 24r00            [12] 1863 	add	a,#_neigh
      00086E FE               [12] 1864 	mov	r6,a
      00086F ED               [12] 1865 	mov	a,r5
      000870 34s00            [12] 1866 	addc	a,#(_neigh >> 8)
      000872 FD               [12] 1867 	mov	r5,a
      000873 8E 82            [24] 1868 	mov	dpl,r6
      000875 8D 83            [24] 1869 	mov	dph,r5
      000877 A3               [24] 1870 	inc	dptr
      000878 A3               [24] 1871 	inc	dptr
      000879 E5*00            [12] 1872 	mov	a,_bp
      00087B 24 03            [12] 1873 	add	a,#0x03
      00087D F8               [12] 1874 	mov	r0,a
      00087E E0               [24] 1875 	movx	a,@dptr
      00087F F6               [12] 1876 	mov	@r0,a
      000880 A3               [24] 1877 	inc	dptr
      000881 E0               [24] 1878 	movx	a,@dptr
      000882 08               [12] 1879 	inc	r0
      000883 F6               [12] 1880 	mov	@r0,a
      000884 C0 07            [24] 1881 	push	ar7
      000886 C0 04            [24] 1882 	push	ar4
      000888 C0 03            [24] 1883 	push	ar3
      00088A C0 02            [24] 1884 	push	ar2
      00088C C0 01            [24] 1885 	push	ar1
      00088E 12r00r00         [24] 1886 	lcall	_rand
      000891 AD 82            [24] 1887 	mov	r5,dpl
      000893 AE 83            [24] 1888 	mov	r6,dph
      000895 74 08            [12] 1889 	mov	a,#0x08
      000897 C0 E0            [24] 1890 	push	acc
      000899 E4               [12] 1891 	clr	a
      00089A C0 E0            [24] 1892 	push	acc
      00089C 8D 82            [24] 1893 	mov	dpl,r5
      00089E 8E 83            [24] 1894 	mov	dph,r6
      0008A0 12r00r00         [24] 1895 	lcall	__modsint
      0008A3 AD 82            [24] 1896 	mov	r5,dpl
      0008A5 AE 83            [24] 1897 	mov	r6,dph
      0008A7 15 81            [12] 1898 	dec	sp
      0008A9 15 81            [12] 1899 	dec	sp
      0008AB D0 01            [24] 1900 	pop	ar1
      0008AD D0 02            [24] 1901 	pop	ar2
      0008AF D0 03            [24] 1902 	pop	ar3
      0008B1 D0 04            [24] 1903 	pop	ar4
      0008B3 D0 07            [24] 1904 	pop	ar7
      0008B5 0D               [12] 1905 	inc	r5
      0008B6 BD 00 01         [24] 1906 	cjne	r5,#0x00,00190$
      0008B9 0E               [12] 1907 	inc	r6
      0008BA                       1908 00190$:
      0008BA C0 07            [24] 1909 	push	ar7
      0008BC C0 04            [24] 1910 	push	ar4
      0008BE C0 03            [24] 1911 	push	ar3
      0008C0 C0 02            [24] 1912 	push	ar2
      0008C2 C0 01            [24] 1913 	push	ar1
      0008C4 C0 05            [24] 1914 	push	ar5
      0008C6 C0 06            [24] 1915 	push	ar6
      0008C8 E5*00            [12] 1916 	mov	a,_bp
      0008CA 24 03            [12] 1917 	add	a,#0x03
      0008CC F8               [12] 1918 	mov	r0,a
      0008CD 86 82            [24] 1919 	mov	dpl,@r0
      0008CF 08               [12] 1920 	inc	r0
      0008D0 86 83            [24] 1921 	mov	dph,@r0
      0008D2 12r00r00         [24] 1922 	lcall	__mulint
      0008D5 AD 82            [24] 1923 	mov	r5,dpl
      0008D7 AE 83            [24] 1924 	mov	r6,dph
      0008D9 15 81            [12] 1925 	dec	sp
      0008DB 15 81            [12] 1926 	dec	sp
      0008DD D0 01            [24] 1927 	pop	ar1
      0008DF D0 02            [24] 1928 	pop	ar2
      0008E1 D0 03            [24] 1929 	pop	ar3
      0008E3 D0 04            [24] 1930 	pop	ar4
      0008E5 D0 07            [24] 1931 	pop	ar7
      0008E7 8A 82            [24] 1932 	mov	dpl,r2
      0008E9 8F 83            [24] 1933 	mov	dph,r7
      0008EB ED               [12] 1934 	mov	a,r5
      0008EC F0               [24] 1935 	movx	@dptr,a
      0008ED EE               [12] 1936 	mov	a,r6
      0008EE A3               [24] 1937 	inc	dptr
      0008EF F0               [24] 1938 	movx	@dptr,a
                                   1939 ;	walk.c:178: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      0008F0 8B 82            [24] 1940 	mov	dpl,r3
      0008F2 8C 83            [24] 1941 	mov	dph,r4
      0008F4 E0               [24] 1942 	movx	a,@dptr
      0008F5 FB               [12] 1943 	mov	r3,a
      0008F6 A3               [24] 1944 	inc	dptr
      0008F7 E0               [24] 1945 	movx	a,@dptr
      0008F8 FC               [12] 1946 	mov	r4,a
      0008F9 C0 07            [24] 1947 	push	ar7
      0008FB C0 01            [24] 1948 	push	ar1
      0008FD C0 05            [24] 1949 	push	ar5
      0008FF C0 06            [24] 1950 	push	ar6
      000901 C0 03            [24] 1951 	push	ar3
      000903 C0 04            [24] 1952 	push	ar4
      000905 74r52            [12] 1953 	mov	a,#___str_6
      000907 C0 E0            [24] 1954 	push	acc
      000909 74s00            [12] 1955 	mov	a,#(___str_6 >> 8)
      00090B C0 E0            [24] 1956 	push	acc
      00090D 74 80            [12] 1957 	mov	a,#0x80
      00090F C0 E0            [24] 1958 	push	acc
      000911 12r00r00         [24] 1959 	lcall	_printf
      000914 E5 81            [12] 1960 	mov	a,sp
      000916 24 F9            [12] 1961 	add	a,#0xf9
      000918 F5 81            [12] 1962 	mov	sp,a
      00091A D0 01            [24] 1963 	pop	ar1
      00091C D0 07            [24] 1964 	pop	ar7
                                   1965 ;	walk.c:175: for (i = 0; i < REG; i++) {
      00091E E5*00            [12] 1966 	mov	a,_bp
      000920 24 07            [12] 1967 	add	a,#0x07
      000922 F8               [12] 1968 	mov	r0,a
      000923 06               [12] 1969 	inc	@r0
      000924 B6 00 02         [24] 1970 	cjne	@r0,#0x00,00191$
      000927 08               [12] 1971 	inc	r0
      000928 06               [12] 1972 	inc	@r0
      000929                       1973 00191$:
      000929 E5*00            [12] 1974 	mov	a,_bp
      00092B 24 07            [12] 1975 	add	a,#0x07
      00092D F8               [12] 1976 	mov	r0,a
      00092E 86 05            [24] 1977 	mov	ar5,@r0
      000930 08               [12] 1978 	inc	r0
      000931 86 06            [24] 1979 	mov	ar6,@r0
      000933 C3               [12] 1980 	clr	c
      000934 ED               [12] 1981 	mov	a,r5
      000935 94 08            [12] 1982 	subb	a,#0x08
      000937 EE               [12] 1983 	mov	a,r6
      000938 94 00            [12] 1984 	subb	a,#0x00
      00093A D0 07            [24] 1985 	pop	ar7
      00093C 50 03            [24] 1986 	jnc	00192$
      00093E 02r07r8E         [24] 1987 	ljmp	00116$
      000941                       1988 00192$:
                                   1989 ;	walk.c:181: OE76 = OE76_0;
      000941 78r01            [12] 1990 	mov	r0,#_OE76
      000943 76 3F            [12] 1991 	mov	@r0,#0x3f
                                   1992 ;	walk.c:182: flashOE(OE76_NC);
      000945 75 82 00         [24] 1993 	mov	dpl,#0x00
      000948 C0 07            [24] 1994 	push	ar7
      00094A C0 01            [24] 1995 	push	ar1
      00094C 12r00r27         [24] 1996 	lcall	_flashOE
      00094F D0 01            [24] 1997 	pop	ar1
      000951 D0 07            [24] 1998 	pop	ar7
                                   1999 ;	walk.c:184: walk(&initial);
      000953 8F 04            [24] 2000 	mov	ar4,r7
      000955 7D 00            [12] 2001 	mov	r5,#0x00
      000957 7E 40            [12] 2002 	mov	r6,#0x40
      000959 8C 82            [24] 2003 	mov	dpl,r4
      00095B 8D 83            [24] 2004 	mov	dph,r5
      00095D 8E F0            [24] 2005 	mov	b,r6
      00095F C0 07            [24] 2006 	push	ar7
      000961 C0 01            [24] 2007 	push	ar1
      000963 12r02rC7         [24] 2008 	lcall	_walk
      000966 D0 01            [24] 2009 	pop	ar1
      000968 D0 07            [24] 2010 	pop	ar7
                                   2011 ;	walk.c:186: for (i = 0; i < ROWS; i++)
      00096A E5*00            [12] 2012 	mov	a,_bp
      00096C 24 07            [12] 2013 	add	a,#0x07
      00096E F8               [12] 2014 	mov	r0,a
      00096F E4               [12] 2015 	clr	a
      000970 F6               [12] 2016 	mov	@r0,a
      000971 08               [12] 2017 	inc	r0
      000972 F6               [12] 2018 	mov	@r0,a
      000973 7B 00            [12] 2019 	mov	r3,#0x00
      000975 7C 00            [12] 2020 	mov	r4,#0x00
                                   2021 ;	walk.c:187: for (j = 0; j < COLS; j++)
      000977                       2022 00132$:
      000977 E5*00            [12] 2023 	mov	a,_bp
      000979 24 03            [12] 2024 	add	a,#0x03
      00097B F8               [12] 2025 	mov	r0,a
      00097C EB               [12] 2026 	mov	a,r3
      00097D 24r00            [12] 2027 	add	a,#_g
      00097F F6               [12] 2028 	mov	@r0,a
      000980 EC               [12] 2029 	mov	a,r4
      000981 34s00            [12] 2030 	addc	a,#(_g >> 8)
      000983 08               [12] 2031 	inc	r0
      000984 F6               [12] 2032 	mov	@r0,a
      000985 7A 00            [12] 2033 	mov	r2,#0x00
      000987 7E 00            [12] 2034 	mov	r6,#0x00
      000989                       2035 00118$:
                                   2036 ;	walk.c:188: if (g[i][j] != 0xaau) bang();
      000989 E5*00            [12] 2037 	mov	a,_bp
      00098B 24 03            [12] 2038 	add	a,#0x03
      00098D F8               [12] 2039 	mov	r0,a
      00098E EA               [12] 2040 	mov	a,r2
      00098F 26               [12] 2041 	add	a,@r0
      000990 F5 82            [12] 2042 	mov	dpl,a
      000992 EE               [12] 2043 	mov	a,r6
      000993 08               [12] 2044 	inc	r0
      000994 36               [12] 2045 	addc	a,@r0
      000995 F5 83            [12] 2046 	mov	dph,a
      000997 E0               [24] 2047 	movx	a,@dptr
      000998 FD               [12] 2048 	mov	r5,a
      000999 BD AA 02         [24] 2049 	cjne	r5,#0xaa,00193$
      00099C 80 1B            [24] 2050 	sjmp	00119$
      00099E                       2051 00193$:
      00099E C0 07            [24] 2052 	push	ar7
      0009A0 C0 06            [24] 2053 	push	ar6
      0009A2 C0 04            [24] 2054 	push	ar4
      0009A4 C0 03            [24] 2055 	push	ar3
      0009A6 C0 02            [24] 2056 	push	ar2
      0009A8 C0 01            [24] 2057 	push	ar1
      0009AA 12r00r1A         [24] 2058 	lcall	_bang
      0009AD D0 01            [24] 2059 	pop	ar1
      0009AF D0 02            [24] 2060 	pop	ar2
      0009B1 D0 03            [24] 2061 	pop	ar3
      0009B3 D0 04            [24] 2062 	pop	ar4
      0009B5 D0 06            [24] 2063 	pop	ar6
      0009B7 D0 07            [24] 2064 	pop	ar7
      0009B9                       2065 00119$:
                                   2066 ;	walk.c:187: for (j = 0; j < COLS; j++)
      0009B9 0A               [12] 2067 	inc	r2
      0009BA BA 00 01         [24] 2068 	cjne	r2,#0x00,00194$
      0009BD 0E               [12] 2069 	inc	r6
      0009BE                       2070 00194$:
      0009BE C3               [12] 2071 	clr	c
      0009BF EA               [12] 2072 	mov	a,r2
      0009C0 94 C9            [12] 2073 	subb	a,#0xc9
      0009C2 EE               [12] 2074 	mov	a,r6
      0009C3 64 80            [12] 2075 	xrl	a,#0x80
      0009C5 94 80            [12] 2076 	subb	a,#0x80
      0009C7 40 C0            [24] 2077 	jc	00118$
                                   2078 ;	walk.c:186: for (i = 0; i < ROWS; i++)
      0009C9 74 C9            [12] 2079 	mov	a,#0xc9
      0009CB 2B               [12] 2080 	add	a,r3
      0009CC FB               [12] 2081 	mov	r3,a
      0009CD E4               [12] 2082 	clr	a
      0009CE 3C               [12] 2083 	addc	a,r4
      0009CF FC               [12] 2084 	mov	r4,a
      0009D0 E5*00            [12] 2085 	mov	a,_bp
      0009D2 24 07            [12] 2086 	add	a,#0x07
      0009D4 F8               [12] 2087 	mov	r0,a
      0009D5 06               [12] 2088 	inc	@r0
      0009D6 B6 00 02         [24] 2089 	cjne	@r0,#0x00,00196$
      0009D9 08               [12] 2090 	inc	r0
      0009DA 06               [12] 2091 	inc	@r0
      0009DB                       2092 00196$:
      0009DB E5*00            [12] 2093 	mov	a,_bp
      0009DD 24 07            [12] 2094 	add	a,#0x07
      0009DF F8               [12] 2095 	mov	r0,a
      0009E0 C3               [12] 2096 	clr	c
      0009E1 E6               [12] 2097 	mov	a,@r0
      0009E2 94 30            [12] 2098 	subb	a,#0x30
      0009E4 08               [12] 2099 	inc	r0
      0009E5 E6               [12] 2100 	mov	a,@r0
      0009E6 64 80            [12] 2101 	xrl	a,#0x80
      0009E8 94 80            [12] 2102 	subb	a,#0x80
      0009EA 40 8B            [24] 2103 	jc	00132$
                                   2104 ;	walk.c:190: N++;
      0009EC E5*00            [12] 2105 	mov	a,_bp
      0009EE 24 05            [12] 2106 	add	a,#0x05
      0009F0 F8               [12] 2107 	mov	r0,a
      0009F1 06               [12] 2108 	inc	@r0
      0009F2 B6 00 02         [24] 2109 	cjne	@r0,#0x00,00198$
      0009F5 08               [12] 2110 	inc	r0
      0009F6 06               [12] 2111 	inc	@r0
      0009F7                       2112 00198$:
      0009F7 02r06r73         [24] 2113 	ljmp	00108$
      0009FA                       2114 00110$:
                                   2115 ;	walk.c:193: EA = 0;
                                   2116 ;	assignBit
      0009FA C2 AF            [12] 2117 	clr	_EA
                                   2118 ;	walk.c:195: puts("\033[2J\033[?25h");
      0009FC 90r00r5B         [24] 2119 	mov	dptr,#___str_7
      0009FF 75 F0 80         [24] 2120 	mov	b,#0x80
      000A02 12r00r00         [24] 2121 	lcall	_puts
                                   2122 ;	walk.c:35: PCON |= 2;
      000A05 43 87 02         [24] 2123 	orl	_PCON,#0x02
                                   2124 ;	walk.c:199: return;
                                   2125 ;	walk.c:200: }
      000A08 85*00 81         [24] 2126 	mov	sp,_bp
      000A0B D0*00            [24] 2127 	pop	_bp
      000A0D 22               [24] 2128 	ret
                                   2129 ;------------------------------------------------------------
                                   2130 ;Allocation info for local variables in function 'stinit'
                                   2131 ;------------------------------------------------------------
                                   2132 ;	walk.c:202: static void stinit(void) {
                                   2133 ;	-----------------------------------------
                                   2134 ;	 function stinit
                                   2135 ;	-----------------------------------------
      000A0E                       2136 _stinit:
                                   2137 ;	walk.c:203: sp = -1;
      000A0E 90rBCr70         [24] 2138 	mov	dptr,#_sp
      000A11 74 FF            [12] 2139 	mov	a,#0xff
      000A13 F0               [24] 2140 	movx	@dptr,a
      000A14 A3               [24] 2141 	inc	dptr
      000A15 F0               [24] 2142 	movx	@dptr,a
                                   2143 ;	walk.c:204: return;
                                   2144 ;	walk.c:205: }
      000A16 22               [24] 2145 	ret
                                   2146 ;------------------------------------------------------------
                                   2147 ;Allocation info for local variables in function 'stpush'
                                   2148 ;------------------------------------------------------------
                                   2149 ;t                         Allocated to registers r5 r6 r7 
                                   2150 ;------------------------------------------------------------
                                   2151 ;	walk.c:207: static uint8_t stpush(struct node *t) {
                                   2152 ;	-----------------------------------------
                                   2153 ;	 function stpush
                                   2154 ;	-----------------------------------------
      000A17                       2155 _stpush:
      000A17 AD 82            [24] 2156 	mov	r5,dpl
      000A19 AE 83            [24] 2157 	mov	r6,dph
      000A1B AF F0            [24] 2158 	mov	r7,b
                                   2159 ;	walk.c:208: if (sp == (SMAX - 1)) return 0u;
      000A1D 90rBCr70         [24] 2160 	mov	dptr,#_sp
      000A20 E0               [24] 2161 	movx	a,@dptr
      000A21 FB               [12] 2162 	mov	r3,a
      000A22 A3               [24] 2163 	inc	dptr
      000A23 E0               [24] 2164 	movx	a,@dptr
      000A24 FC               [12] 2165 	mov	r4,a
      000A25 BB AF 07         [24] 2166 	cjne	r3,#0xaf,00102$
      000A28 BC 25 04         [24] 2167 	cjne	r4,#0x25,00102$
      000A2B 75 82 00         [24] 2168 	mov	dpl,#0x00
      000A2E 22               [24] 2169 	ret
      000A2F                       2170 00102$:
                                   2171 ;	walk.c:209: sp++;
      000A2F 90rBCr70         [24] 2172 	mov	dptr,#_sp
      000A32 74 01            [12] 2173 	mov	a,#0x01
      000A34 2B               [12] 2174 	add	a,r3
      000A35 F0               [24] 2175 	movx	@dptr,a
      000A36 E4               [12] 2176 	clr	a
      000A37 3C               [12] 2177 	addc	a,r4
      000A38 A3               [24] 2178 	inc	dptr
      000A39 F0               [24] 2179 	movx	@dptr,a
                                   2180 ;	walk.c:210: stack[sp] = *t;
      000A3A 90rBCr70         [24] 2181 	mov	dptr,#_sp
      000A3D E0               [24] 2182 	movx	a,@dptr
      000A3E FB               [12] 2183 	mov	r3,a
      000A3F A3               [24] 2184 	inc	dptr
      000A40 E0               [24] 2185 	movx	a,@dptr
      000A41 FC               [12] 2186 	mov	r4,a
      000A42 EB               [12] 2187 	mov	a,r3
      000A43 2B               [12] 2188 	add	a,r3
      000A44 FB               [12] 2189 	mov	r3,a
      000A45 EC               [12] 2190 	mov	a,r4
      000A46 33               [12] 2191 	rlc	a
      000A47 FC               [12] 2192 	mov	r4,a
      000A48 EB               [12] 2193 	mov	a,r3
      000A49 2B               [12] 2194 	add	a,r3
      000A4A FB               [12] 2195 	mov	r3,a
      000A4B EC               [12] 2196 	mov	a,r4
      000A4C 33               [12] 2197 	rlc	a
      000A4D FC               [12] 2198 	mov	r4,a
      000A4E EB               [12] 2199 	mov	a,r3
      000A4F 24rB0            [12] 2200 	add	a,#_stack
      000A51 FB               [12] 2201 	mov	r3,a
      000A52 EC               [12] 2202 	mov	a,r4
      000A53 34s25            [12] 2203 	addc	a,#(_stack >> 8)
      000A55 FC               [12] 2204 	mov	r4,a
      000A56 7A 00            [12] 2205 	mov	r2,#0x00
      000A58 74 04            [12] 2206 	mov	a,#0x04
      000A5A C0 E0            [24] 2207 	push	acc
      000A5C E4               [12] 2208 	clr	a
      000A5D C0 E0            [24] 2209 	push	acc
      000A5F C0 05            [24] 2210 	push	ar5
      000A61 C0 06            [24] 2211 	push	ar6
      000A63 C0 07            [24] 2212 	push	ar7
      000A65 8B 82            [24] 2213 	mov	dpl,r3
      000A67 8C 83            [24] 2214 	mov	dph,r4
      000A69 8A F0            [24] 2215 	mov	b,r2
      000A6B 12r00r00         [24] 2216 	lcall	___memcpy
      000A6E E5 81            [12] 2217 	mov	a,sp
      000A70 24 FB            [12] 2218 	add	a,#0xfb
      000A72 F5 81            [12] 2219 	mov	sp,a
                                   2220 ;	walk.c:211: return 1u;
      000A74 75 82 01         [24] 2221 	mov	dpl,#0x01
                                   2222 ;	walk.c:212: }
      000A77 22               [24] 2223 	ret
                                   2224 ;------------------------------------------------------------
                                   2225 ;Allocation info for local variables in function 'stpop'
                                   2226 ;------------------------------------------------------------
                                   2227 ;t                         Allocated to registers r5 r6 r7 
                                   2228 ;------------------------------------------------------------
                                   2229 ;	walk.c:214: static uint8_t stpop(struct node *t) {
                                   2230 ;	-----------------------------------------
                                   2231 ;	 function stpop
                                   2232 ;	-----------------------------------------
      000A78                       2233 _stpop:
      000A78 AD 82            [24] 2234 	mov	r5,dpl
      000A7A AE 83            [24] 2235 	mov	r6,dph
      000A7C AF F0            [24] 2236 	mov	r7,b
                                   2237 ;	walk.c:215: if (sp == -1) return 0u;
      000A7E 90rBCr70         [24] 2238 	mov	dptr,#_sp
      000A81 E0               [24] 2239 	movx	a,@dptr
      000A82 FB               [12] 2240 	mov	r3,a
      000A83 A3               [24] 2241 	inc	dptr
      000A84 E0               [24] 2242 	movx	a,@dptr
      000A85 FC               [12] 2243 	mov	r4,a
      000A86 BB FF 07         [24] 2244 	cjne	r3,#0xff,00102$
      000A89 BC FF 04         [24] 2245 	cjne	r4,#0xff,00102$
      000A8C 75 82 00         [24] 2246 	mov	dpl,#0x00
      000A8F 22               [24] 2247 	ret
      000A90                       2248 00102$:
                                   2249 ;	walk.c:216: *t = stack[sp];
      000A90 EB               [12] 2250 	mov	a,r3
      000A91 2B               [12] 2251 	add	a,r3
      000A92 FB               [12] 2252 	mov	r3,a
      000A93 EC               [12] 2253 	mov	a,r4
      000A94 33               [12] 2254 	rlc	a
      000A95 FC               [12] 2255 	mov	r4,a
      000A96 EB               [12] 2256 	mov	a,r3
      000A97 2B               [12] 2257 	add	a,r3
      000A98 FB               [12] 2258 	mov	r3,a
      000A99 EC               [12] 2259 	mov	a,r4
      000A9A 33               [12] 2260 	rlc	a
      000A9B FC               [12] 2261 	mov	r4,a
      000A9C EB               [12] 2262 	mov	a,r3
      000A9D 24rB0            [12] 2263 	add	a,#_stack
      000A9F FB               [12] 2264 	mov	r3,a
      000AA0 EC               [12] 2265 	mov	a,r4
      000AA1 34s25            [12] 2266 	addc	a,#(_stack >> 8)
      000AA3 FC               [12] 2267 	mov	r4,a
      000AA4 7A 00            [12] 2268 	mov	r2,#0x00
      000AA6 74 04            [12] 2269 	mov	a,#0x04
      000AA8 C0 E0            [24] 2270 	push	acc
      000AAA E4               [12] 2271 	clr	a
      000AAB C0 E0            [24] 2272 	push	acc
      000AAD C0 03            [24] 2273 	push	ar3
      000AAF C0 04            [24] 2274 	push	ar4
      000AB1 C0 02            [24] 2275 	push	ar2
      000AB3 8D 82            [24] 2276 	mov	dpl,r5
      000AB5 8E 83            [24] 2277 	mov	dph,r6
      000AB7 8F F0            [24] 2278 	mov	b,r7
      000AB9 12r00r00         [24] 2279 	lcall	___memcpy
      000ABC E5 81            [12] 2280 	mov	a,sp
      000ABE 24 FB            [12] 2281 	add	a,#0xfb
      000AC0 F5 81            [12] 2282 	mov	sp,a
                                   2283 ;	walk.c:217: sp--;
      000AC2 90rBCr70         [24] 2284 	mov	dptr,#_sp
      000AC5 E0               [24] 2285 	movx	a,@dptr
      000AC6 24 FF            [12] 2286 	add	a,#0xff
      000AC8 FE               [12] 2287 	mov	r6,a
      000AC9 A3               [24] 2288 	inc	dptr
      000ACA E0               [24] 2289 	movx	a,@dptr
      000ACB 34 FF            [12] 2290 	addc	a,#0xff
      000ACD FF               [12] 2291 	mov	r7,a
      000ACE 90rBCr70         [24] 2292 	mov	dptr,#_sp
      000AD1 EE               [12] 2293 	mov	a,r6
      000AD2 F0               [24] 2294 	movx	@dptr,a
      000AD3 EF               [12] 2295 	mov	a,r7
      000AD4 A3               [24] 2296 	inc	dptr
      000AD5 F0               [24] 2297 	movx	@dptr,a
                                   2298 ;	walk.c:218: return 1u;
      000AD6 75 82 01         [24] 2299 	mov	dpl,#0x01
                                   2300 ;	walk.c:219: }
      000AD9 22               [24] 2301 	ret
                                   2302 	.area CSEG    (CODE)
                                   2303 	.area CONST   (CODE)
                                   2304 	.area CONST   (CODE)
      000000                       2305 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2306 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2307 	.db 0x00
                                   2308 	.area CSEG    (CODE)
                                   2309 	.area CONST   (CODE)
      00000D                       2310 ___str_1:
      00000D 1B                    2311 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2312 	.ascii "[%d;%dHo"
             6F
      000016 00                    2313 	.db 0x00
                                   2314 	.area CSEG    (CODE)
                                   2315 	.area CONST   (CODE)
      000017                       2316 ___str_2:
      000017 1B                    2317 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2318 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2319 	.db 0x00
                                   2320 	.area CSEG    (CODE)
                                   2321 	.area CONST   (CODE)
      00002A                       2322 ___str_3:
      00002A 1B                    2323 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2324 	.ascii "[%d;%dH."
             2E
      000033 00                    2325 	.db 0x00
                                   2326 	.area CSEG    (CODE)
                                   2327 	.area CONST   (CODE)
      000034                       2328 ___str_4:
      000034 1B                    2329 	.db 0x1b
      000035 5B 32 4A              2330 	.ascii "[2J"
      000038 1B                    2331 	.db 0x1b
      000039 5B 3F 32 35 6C        2332 	.ascii "[?25l"
      00003E 00                    2333 	.db 0x00
                                   2334 	.area CSEG    (CODE)
                                   2335 	.area CONST   (CODE)
      00003F                       2336 ___str_5:
      00003F 1B                    2337 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2338 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2339 	.db 0x00
                                   2340 	.area CSEG    (CODE)
                                   2341 	.area CONST   (CODE)
      000052                       2342 ___str_6:
      000052 25 20 38 64 25 20 38  2343 	.ascii "% 8d% 8d"
             64
      00005A 00                    2344 	.db 0x00
                                   2345 	.area CSEG    (CODE)
                                   2346 	.area CONST   (CODE)
      00005B                       2347 ___str_7:
      00005B 1B                    2348 	.db 0x1b
      00005C 5B 32 4A              2349 	.ascii "[2J"
      00005F 1B                    2350 	.db 0x1b
      000060 5B 3F 32 35 68        2351 	.ascii "[?25h"
      000065 00                    2352 	.db 0x00
                                   2353 	.area CSEG    (CODE)
                                   2354 	.area XINIT   (CODE)
      000000                       2355 __xinit__neigh:
      000000 FF FF                 2356 	.byte #0xff, #0xff	; -1
      000002 01 00                 2357 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2358 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2359 	.byte #0xff, #0xff	; -1
      000008 01 00                 2360 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2361 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2362 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2363 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2364 	.byte #0xff, #0xff	; -1
      000012 00 00                 2365 	.byte #0x00, #0x00	;  0
      000014 00 00                 2366 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2367 	.byte #0xff, #0xff	; -1
      000018 01 00                 2368 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2369 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2370 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2371 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2372 	.byte #0xff, #0xff	; -1
      000022 01 00                 2373 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2374 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2375 	.byte #0xff, #0xff	; -1
      000028 01 00                 2376 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2377 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2378 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2379 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2380 	.byte #0xff, #0xff	; -1
      000032 00 00                 2381 	.byte #0x00, #0x00	;  0
      000034 00 00                 2382 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2383 	.byte #0xff, #0xff	; -1
      000038 01 00                 2384 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2385 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2386 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2387 	.byte #0x01, #0x00	;  1
                                   2388 	.area CABS    (ABS,CODE)
