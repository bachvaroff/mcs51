                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 ;--------------------------------------------------------
                                    141 ; special function registers
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0	=	0x0080
                           000081   146 _SP	=	0x0081
                           000082   147 _DPL	=	0x0082
                           000083   148 _DPH	=	0x0083
                           000087   149 _PCON	=	0x0087
                           000088   150 _TCON	=	0x0088
                           000089   151 _TMOD	=	0x0089
                           00008A   152 _TL0	=	0x008a
                           00008B   153 _TL1	=	0x008b
                           00008C   154 _TH0	=	0x008c
                           00008D   155 _TH1	=	0x008d
                           000090   156 _P1	=	0x0090
                           000098   157 _SCON	=	0x0098
                           000099   158 _SBUF	=	0x0099
                           0000A0   159 _P2	=	0x00a0
                           0000A8   160 _IE	=	0x00a8
                           0000B0   161 _P3	=	0x00b0
                           0000B8   162 _IP	=	0x00b8
                           0000C8   163 _T2CON	=	0x00c8
                           0000C9   164 _T2MOD	=	0x00c9
                           0000CA   165 _RCAP2L	=	0x00ca
                           0000CB   166 _RCAP2H	=	0x00cb
                           0000CC   167 _TL2	=	0x00cc
                           0000CD   168 _TH2	=	0x00cd
                           0000D0   169 _PSW	=	0x00d0
                           0000E0   170 _ACC	=	0x00e0
                           0000E0   171 _A	=	0x00e0
                           0000F0   172 _B	=	0x00f0
                                    173 ;--------------------------------------------------------
                                    174 ; special function bits
                                    175 ;--------------------------------------------------------
                                    176 	.area RSEG    (ABS,DATA)
      000000                        177 	.org 0x0000
                           000080   178 _P0_0	=	0x0080
                           000081   179 _P0_1	=	0x0081
                           000082   180 _P0_2	=	0x0082
                           000083   181 _P0_3	=	0x0083
                           000084   182 _P0_4	=	0x0084
                           000085   183 _P0_5	=	0x0085
                           000086   184 _P0_6	=	0x0086
                           000087   185 _P0_7	=	0x0087
                           000088   186 _IT0	=	0x0088
                           000089   187 _IE0	=	0x0089
                           00008A   188 _IT1	=	0x008a
                           00008B   189 _IE1	=	0x008b
                           00008C   190 _TR0	=	0x008c
                           00008D   191 _TF0	=	0x008d
                           00008E   192 _TR1	=	0x008e
                           00008F   193 _TF1	=	0x008f
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           000090   202 _T2	=	0x0090
                           000091   203 _T2EX	=	0x0091
                           000098   204 _RI	=	0x0098
                           000099   205 _TI	=	0x0099
                           00009A   206 _RB8	=	0x009a
                           00009B   207 _TB8	=	0x009b
                           00009C   208 _REN	=	0x009c
                           00009D   209 _SM2	=	0x009d
                           00009E   210 _SM1	=	0x009e
                           00009F   211 _SM0	=	0x009f
                           0000A0   212 _P2_0	=	0x00a0
                           0000A1   213 _P2_1	=	0x00a1
                           0000A2   214 _P2_2	=	0x00a2
                           0000A3   215 _P2_3	=	0x00a3
                           0000A4   216 _P2_4	=	0x00a4
                           0000A5   217 _P2_5	=	0x00a5
                           0000A6   218 _P2_6	=	0x00a6
                           0000A7   219 _P2_7	=	0x00a7
                           0000A8   220 _EX0	=	0x00a8
                           0000A9   221 _ET0	=	0x00a9
                           0000AA   222 _EX1	=	0x00aa
                           0000AB   223 _ET1	=	0x00ab
                           0000AC   224 _ES	=	0x00ac
                           0000AD   225 _ET2	=	0x00ad
                           0000AF   226 _EA	=	0x00af
                           0000B0   227 _P3_0	=	0x00b0
                           0000B1   228 _P3_1	=	0x00b1
                           0000B2   229 _P3_2	=	0x00b2
                           0000B3   230 _P3_3	=	0x00b3
                           0000B4   231 _P3_4	=	0x00b4
                           0000B5   232 _P3_5	=	0x00b5
                           0000B6   233 _P3_6	=	0x00b6
                           0000B7   234 _P3_7	=	0x00b7
                           0000B0   235 _RXD	=	0x00b0
                           0000B1   236 _TXD	=	0x00b1
                           0000B2   237 _INT0	=	0x00b2
                           0000B3   238 _INT1	=	0x00b3
                           0000B4   239 _T0	=	0x00b4
                           0000B5   240 _T1	=	0x00b5
                           0000B6   241 _WR	=	0x00b6
                           0000B7   242 _RD	=	0x00b7
                           0000B8   243 _PX0	=	0x00b8
                           0000B9   244 _PT0	=	0x00b9
                           0000BA   245 _PX1	=	0x00ba
                           0000BB   246 _PT1	=	0x00bb
                           0000BC   247 _PS	=	0x00bc
                           0000BD   248 _PT2	=	0x00bd
                           0000C8   249 _T2CON_0	=	0x00c8
                           0000C9   250 _T2CON_1	=	0x00c9
                           0000CA   251 _T2CON_2	=	0x00ca
                           0000CB   252 _T2CON_3	=	0x00cb
                           0000CC   253 _T2CON_4	=	0x00cc
                           0000CD   254 _T2CON_5	=	0x00cd
                           0000CE   255 _T2CON_6	=	0x00ce
                           0000CF   256 _T2CON_7	=	0x00cf
                           0000C8   257 _CP_RL2	=	0x00c8
                           0000C9   258 _C_T2	=	0x00c9
                           0000CA   259 _TR2	=	0x00ca
                           0000CB   260 _EXEN2	=	0x00cb
                           0000CC   261 _TCLK	=	0x00cc
                           0000CD   262 _RCLK	=	0x00cd
                           0000CE   263 _EXF2	=	0x00ce
                           0000CF   264 _TF2	=	0x00cf
                           0000D0   265 _P	=	0x00d0
                           0000D1   266 _FL	=	0x00d1
                           0000D2   267 _OV	=	0x00d2
                           0000D3   268 _RS0	=	0x00d3
                           0000D4   269 _RS1	=	0x00d4
                           0000D5   270 _F0	=	0x00d5
                           0000D6   271 _AC	=	0x00d6
                           0000D7   272 _CY	=	0x00d7
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable register banks
                                    275 ;--------------------------------------------------------
                                    276 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; internal ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area DSEG    (DATA)
                                    284 ;--------------------------------------------------------
                                    285 ; overlayable items in internal ram 
                                    286 ;--------------------------------------------------------
                                    287 ;--------------------------------------------------------
                                    288 ; Stack segment in internal ram 
                                    289 ;--------------------------------------------------------
                                    290 	.area	SSEG
      000000                        291 __start__stack:
      000000                        292 	.ds	1
                                    293 
                                    294 ;--------------------------------------------------------
                                    295 ; indirectly addressable internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area ISEG    (DATA)
      000000                        298 _i0:
      000000                        299 	.ds 1
      000001                        300 _OE76:
      000001                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
                           008000   319 _RND	=	0x8000
      000000                        320 _g:
      000000                        321 	.ds 9648
      0025B0                        322 _stack:
      0025B0                        323 	.ds 38592
      00BC70                        324 _sp:
      00BC70                        325 	.ds 2
                           00F006   326 _OEreg	=	0xf006
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
      000000                        335 _neigh:
      000000                        336 	.ds 64
                                    337 	.area HOME    (CODE)
                                    338 	.area GSINIT0 (CODE)
                                    339 	.area GSINIT1 (CODE)
                                    340 	.area GSINIT2 (CODE)
                                    341 	.area GSINIT3 (CODE)
                                    342 	.area GSINIT4 (CODE)
                                    343 	.area GSINIT5 (CODE)
                                    344 	.area GSINIT  (CODE)
                                    345 	.area GSFINAL (CODE)
                                    346 	.area CSEG    (CODE)
                                    347 ;--------------------------------------------------------
                                    348 ; interrupt vector 
                                    349 ;--------------------------------------------------------
                                    350 	.area HOME    (CODE)
      000000                        351 __interrupt_vect:
      000000 02r00r00         [24]  352 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  353 	ljmp	_int0
                                    354 ;--------------------------------------------------------
                                    355 ; global & static initialisations
                                    356 ;--------------------------------------------------------
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.area GSFINAL (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.globl __sdcc_gsinit_startup
                                    362 	.globl __sdcc_program_startup
                                    363 	.globl __start__stack
                                    364 	.globl __mcs51_genXINIT
                                    365 	.globl __mcs51_genXRAMCLEAR
                                    366 	.globl __mcs51_genRAMCLEAR
                                    367 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  368 	ljmp	__sdcc_program_startup
                                    369 ;--------------------------------------------------------
                                    370 ; Home
                                    371 ;--------------------------------------------------------
                                    372 	.area HOME    (CODE)
                                    373 	.area HOME    (CODE)
      000006                        374 __sdcc_program_startup:
      000006 02r06r6A         [24]  375 	ljmp	_main
                                    376 ;	return from main will return to caller
                                    377 ;--------------------------------------------------------
                                    378 ; code
                                    379 ;--------------------------------------------------------
                                    380 	.area CSEG    (CODE)
                                    381 ;------------------------------------------------------------
                                    382 ;Allocation info for local variables in function 'int0'
                                    383 ;------------------------------------------------------------
                                    384 ;	walk.c:12: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    385 ;	-----------------------------------------
                                    386 ;	 function int0
                                    387 ;	-----------------------------------------
      000000                        388 _int0:
                           00000F   389 	ar7 = 0x0f
                           00000E   390 	ar6 = 0x0e
                           00000D   391 	ar5 = 0x0d
                           00000C   392 	ar4 = 0x0c
                           00000B   393 	ar3 = 0x0b
                           00000A   394 	ar2 = 0x0a
                           000009   395 	ar1 = 0x09
                           000008   396 	ar0 = 0x08
      000000 C0 D0            [24]  397 	push	psw
      000002 75 D0 08         [24]  398 	mov	psw,#0x08
                                    399 ;	walk.c:13: i0 = 0u;
      000005 78r00            [12]  400 	mov	r0,#_i0
      000007 76 00            [12]  401 	mov	@r0,#0x00
                                    402 ;	walk.c:14: }
      000009 D0 D0            [24]  403 	pop	psw
      00000B 32               [24]  404 	reti
                                    405 ;	eliminated unneeded push/pop dpl
                                    406 ;	eliminated unneeded push/pop dph
                                    407 ;	eliminated unneeded push/pop b
                                    408 ;	eliminated unneeded push/pop acc
                                    409 ;------------------------------------------------------------
                                    410 ;Allocation info for local variables in function 'bang'
                                    411 ;------------------------------------------------------------
                                    412 ;	walk.c:20: static void bang(void) {
                                    413 ;	-----------------------------------------
                                    414 ;	 function bang
                                    415 ;	-----------------------------------------
      00000C                        416 _bang:
                           000007   417 	ar7 = 0x07
                           000006   418 	ar6 = 0x06
                           000005   419 	ar5 = 0x05
                           000004   420 	ar4 = 0x04
                           000003   421 	ar3 = 0x03
                           000002   422 	ar2 = 0x02
                           000001   423 	ar1 = 0x01
                           000000   424 	ar0 = 0x00
                                    425 ;	walk.c:21: (void)puts("Memory error");
      00000C 90r00r00         [24]  426 	mov	dptr,#___str_0
      00000F 75 F0 80         [24]  427 	mov	b,#0x80
      000012 12r00r00         [24]  428 	lcall	_puts
                                    429 ;	walk.c:17: PCON |= 2;
      000015 43 87 02         [24]  430 	orl	_PCON,#0x02
                                    431 ;	walk.c:24: return;
                                    432 ;	walk.c:25: }
      000018 22               [24]  433 	ret
                                    434 ;------------------------------------------------------------
                                    435 ;Allocation info for local variables in function 'setOE'
                                    436 ;------------------------------------------------------------
                                    437 ;mask                      Allocated to registers r7 
                                    438 ;------------------------------------------------------------
                                    439 ;	walk.c:67: static void setOE(uint8_t mask) {
                                    440 ;	-----------------------------------------
                                    441 ;	 function setOE
                                    442 ;	-----------------------------------------
      000019                        443 _setOE:
      000019 AF 82            [24]  444 	mov	r7,dpl
                                    445 ;	walk.c:68: OE76 |= mask;
      00001B 78r01            [12]  446 	mov	r0,#_OE76
      00001D EF               [12]  447 	mov	a,r7
      00001E 46               [12]  448 	orl	a,@r0
      00001F F6               [12]  449 	mov	@r0,a
                                    450 ;	walk.c:69: P1_7 = 0;
                                    451 ;	assignBit
      000020 C2 97            [12]  452 	clr	_P1_7
                                    453 ;	walk.c:74: __endasm;
      000022 00               [12]  454 	nop
      000023 00               [12]  455 	nop
      000024 00               [12]  456 	nop
                                    457 ;	walk.c:75: OEreg = OE76;
      000025 78r01            [12]  458 	mov	r0,#_OE76
      000027 90 F0 06         [24]  459 	mov	dptr,#_OEreg
      00002A E6               [12]  460 	mov	a,@r0
      00002B F0               [24]  461 	movx	@dptr,a
                                    462 ;	walk.c:76: P1_7 = 1;
                                    463 ;	assignBit
      00002C D2 97            [12]  464 	setb	_P1_7
                                    465 ;	walk.c:81: __endasm;
      00002E 00               [12]  466 	nop
      00002F 00               [12]  467 	nop
      000030 00               [12]  468 	nop
                                    469 ;	walk.c:83: return;
                                    470 ;	walk.c:84: }
      000031 22               [24]  471 	ret
                                    472 ;------------------------------------------------------------
                                    473 ;Allocation info for local variables in function 'unsetOE'
                                    474 ;------------------------------------------------------------
                                    475 ;mask                      Allocated to registers r7 
                                    476 ;------------------------------------------------------------
                                    477 ;	walk.c:86: static void unsetOE(uint8_t mask) {
                                    478 ;	-----------------------------------------
                                    479 ;	 function unsetOE
                                    480 ;	-----------------------------------------
      000032                        481 _unsetOE:
                                    482 ;	walk.c:87: OE76 &= ~mask;
      000032 E5 82            [12]  483 	mov	a,dpl
      000034 F4               [12]  484 	cpl	a
      000035 FF               [12]  485 	mov	r7,a
      000036 78r01            [12]  486 	mov	r0,#_OE76
      000038 56               [12]  487 	anl	a,@r0
      000039 F6               [12]  488 	mov	@r0,a
                                    489 ;	walk.c:88: P1_7 = 0;
                                    490 ;	assignBit
      00003A C2 97            [12]  491 	clr	_P1_7
                                    492 ;	walk.c:93: __endasm;
      00003C 00               [12]  493 	nop
      00003D 00               [12]  494 	nop
      00003E 00               [12]  495 	nop
                                    496 ;	walk.c:94: OEreg = OE76;
      00003F 78r01            [12]  497 	mov	r0,#_OE76
      000041 90 F0 06         [24]  498 	mov	dptr,#_OEreg
      000044 E6               [12]  499 	mov	a,@r0
      000045 F0               [24]  500 	movx	@dptr,a
                                    501 ;	walk.c:95: P1_7 = 1;
                                    502 ;	assignBit
      000046 D2 97            [12]  503 	setb	_P1_7
                                    504 ;	walk.c:100: __endasm;
      000048 00               [12]  505 	nop
      000049 00               [12]  506 	nop
      00004A 00               [12]  507 	nop
                                    508 ;	walk.c:102: return;
                                    509 ;	walk.c:103: }
      00004B 22               [24]  510 	ret
                                    511 ;------------------------------------------------------------
                                    512 ;Allocation info for local variables in function 'flipOE'
                                    513 ;------------------------------------------------------------
                                    514 ;mask                      Allocated to registers r7 
                                    515 ;------------------------------------------------------------
                                    516 ;	walk.c:105: static void flipOE(uint8_t mask) {
                                    517 ;	-----------------------------------------
                                    518 ;	 function flipOE
                                    519 ;	-----------------------------------------
      00004C                        520 _flipOE:
      00004C AF 82            [24]  521 	mov	r7,dpl
                                    522 ;	walk.c:106: OE76 ^= mask;
      00004E 78r01            [12]  523 	mov	r0,#_OE76
      000050 EF               [12]  524 	mov	a,r7
      000051 66               [12]  525 	xrl	a,@r0
      000052 F6               [12]  526 	mov	@r0,a
                                    527 ;	walk.c:107: P1_7 = 0;
                                    528 ;	assignBit
      000053 C2 97            [12]  529 	clr	_P1_7
                                    530 ;	walk.c:112: __endasm;
      000055 00               [12]  531 	nop
      000056 00               [12]  532 	nop
      000057 00               [12]  533 	nop
                                    534 ;	walk.c:113: OEreg = OE76;
      000058 78r01            [12]  535 	mov	r0,#_OE76
      00005A 90 F0 06         [24]  536 	mov	dptr,#_OEreg
      00005D E6               [12]  537 	mov	a,@r0
      00005E F0               [24]  538 	movx	@dptr,a
                                    539 ;	walk.c:114: P1_7 = 1;
                                    540 ;	assignBit
      00005F D2 97            [12]  541 	setb	_P1_7
                                    542 ;	walk.c:119: __endasm;
      000061 00               [12]  543 	nop
      000062 00               [12]  544 	nop
      000063 00               [12]  545 	nop
                                    546 ;	walk.c:121: return;
                                    547 ;	walk.c:122: }
      000064 22               [24]  548 	ret
                                    549 ;------------------------------------------------------------
                                    550 ;Allocation info for local variables in function 'update'
                                    551 ;------------------------------------------------------------
                                    552 ;cur                       Allocated to stack - _bp -5
                                    553 ;j                         Allocated to stack - _bp -6
                                    554 ;t                         Allocated to stack - _bp +1
                                    555 ;sloc0                     Allocated to stack - _bp +4
                                    556 ;sloc1                     Allocated to stack - _bp +6
                                    557 ;sloc2                     Allocated to stack - _bp +8
                                    558 ;------------------------------------------------------------
                                    559 ;	walk.c:124: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    560 ;	-----------------------------------------
                                    561 ;	 function update
                                    562 ;	-----------------------------------------
      000065                        563 _update:
      000065 C0*00            [24]  564 	push	_bp
      000067 85 81*00         [24]  565 	mov	_bp,sp
      00006A C0 82            [24]  566 	push	dpl
      00006C C0 83            [24]  567 	push	dph
      00006E C0 F0            [24]  568 	push	b
      000070 E5 81            [12]  569 	mov	a,sp
      000072 24 07            [12]  570 	add	a,#0x07
      000074 F5 81            [12]  571 	mov	sp,a
                                    572 ;	walk.c:125: t->r = cur->r + neigh[j].r;
      000076 E5*00            [12]  573 	mov	a,_bp
      000078 24 FB            [12]  574 	add	a,#0xfb
      00007A F8               [12]  575 	mov	r0,a
      00007B 86 02            [24]  576 	mov	ar2,@r0
      00007D 08               [12]  577 	inc	r0
      00007E 86 03            [24]  578 	mov	ar3,@r0
      000080 08               [12]  579 	inc	r0
      000081 86 04            [24]  580 	mov	ar4,@r0
      000083 8A 82            [24]  581 	mov	dpl,r2
      000085 8B 83            [24]  582 	mov	dph,r3
      000087 8C F0            [24]  583 	mov	b,r4
      000089 E5*00            [12]  584 	mov	a,_bp
      00008B 24 04            [12]  585 	add	a,#0x04
      00008D F8               [12]  586 	mov	r0,a
      00008E 12r00r00         [24]  587 	lcall	__gptrget
      000091 F6               [12]  588 	mov	@r0,a
      000092 A3               [24]  589 	inc	dptr
      000093 12r00r00         [24]  590 	lcall	__gptrget
      000096 08               [12]  591 	inc	r0
      000097 F6               [12]  592 	mov	@r0,a
      000098 E5*00            [12]  593 	mov	a,_bp
      00009A 24 FA            [12]  594 	add	a,#0xfa
      00009C F8               [12]  595 	mov	r0,a
      00009D E5*00            [12]  596 	mov	a,_bp
      00009F 24 06            [12]  597 	add	a,#0x06
      0000A1 F9               [12]  598 	mov	r1,a
      0000A2 E6               [12]  599 	mov	a,@r0
      0000A3 75 F0 04         [24]  600 	mov	b,#0x04
      0000A6 A4               [48]  601 	mul	ab
      0000A7 F7               [12]  602 	mov	@r1,a
      0000A8 09               [12]  603 	inc	r1
      0000A9 A7 F0            [24]  604 	mov	@r1,b
      0000AB E5*00            [12]  605 	mov	a,_bp
      0000AD 24 06            [12]  606 	add	a,#0x06
      0000AF F8               [12]  607 	mov	r0,a
      0000B0 E6               [12]  608 	mov	a,@r0
      0000B1 24r00            [12]  609 	add	a,#_neigh
      0000B3 F5 82            [12]  610 	mov	dpl,a
      0000B5 08               [12]  611 	inc	r0
      0000B6 E6               [12]  612 	mov	a,@r0
      0000B7 34s00            [12]  613 	addc	a,#(_neigh >> 8)
      0000B9 F5 83            [12]  614 	mov	dph,a
      0000BB E0               [24]  615 	movx	a,@dptr
      0000BC FF               [12]  616 	mov	r7,a
      0000BD A3               [24]  617 	inc	dptr
      0000BE E0               [24]  618 	movx	a,@dptr
      0000BF FE               [12]  619 	mov	r6,a
      0000C0 E5*00            [12]  620 	mov	a,_bp
      0000C2 24 04            [12]  621 	add	a,#0x04
      0000C4 F8               [12]  622 	mov	r0,a
      0000C5 EF               [12]  623 	mov	a,r7
      0000C6 26               [12]  624 	add	a,@r0
      0000C7 FF               [12]  625 	mov	r7,a
      0000C8 EE               [12]  626 	mov	a,r6
      0000C9 08               [12]  627 	inc	r0
      0000CA 36               [12]  628 	addc	a,@r0
      0000CB FE               [12]  629 	mov	r6,a
      0000CC A8*00            [24]  630 	mov	r0,_bp
      0000CE 08               [12]  631 	inc	r0
      0000CF 86 82            [24]  632 	mov	dpl,@r0
      0000D1 08               [12]  633 	inc	r0
      0000D2 86 83            [24]  634 	mov	dph,@r0
      0000D4 08               [12]  635 	inc	r0
      0000D5 86 F0            [24]  636 	mov	b,@r0
      0000D7 EF               [12]  637 	mov	a,r7
      0000D8 12r00r00         [24]  638 	lcall	__gptrput
      0000DB A3               [24]  639 	inc	dptr
      0000DC EE               [12]  640 	mov	a,r6
      0000DD 12r00r00         [24]  641 	lcall	__gptrput
                                    642 ;	walk.c:126: t->c = cur->c + neigh[j].c;
      0000E0 A8*00            [24]  643 	mov	r0,_bp
      0000E2 08               [12]  644 	inc	r0
      0000E3 E5*00            [12]  645 	mov	a,_bp
      0000E5 24 08            [12]  646 	add	a,#0x08
      0000E7 F9               [12]  647 	mov	r1,a
      0000E8 74 02            [12]  648 	mov	a,#0x02
      0000EA 26               [12]  649 	add	a,@r0
      0000EB F7               [12]  650 	mov	@r1,a
      0000EC E4               [12]  651 	clr	a
      0000ED 08               [12]  652 	inc	r0
      0000EE 36               [12]  653 	addc	a,@r0
      0000EF 09               [12]  654 	inc	r1
      0000F0 F7               [12]  655 	mov	@r1,a
      0000F1 08               [12]  656 	inc	r0
      0000F2 09               [12]  657 	inc	r1
      0000F3 E6               [12]  658 	mov	a,@r0
      0000F4 F7               [12]  659 	mov	@r1,a
      0000F5 74 02            [12]  660 	mov	a,#0x02
      0000F7 2A               [12]  661 	add	a,r2
      0000F8 FA               [12]  662 	mov	r2,a
      0000F9 E4               [12]  663 	clr	a
      0000FA 3B               [12]  664 	addc	a,r3
      0000FB FB               [12]  665 	mov	r3,a
      0000FC 8A 82            [24]  666 	mov	dpl,r2
      0000FE 8B 83            [24]  667 	mov	dph,r3
      000100 8C F0            [24]  668 	mov	b,r4
      000102 12r00r00         [24]  669 	lcall	__gptrget
      000105 FA               [12]  670 	mov	r2,a
      000106 A3               [24]  671 	inc	dptr
      000107 12r00r00         [24]  672 	lcall	__gptrget
      00010A FB               [12]  673 	mov	r3,a
      00010B E5*00            [12]  674 	mov	a,_bp
      00010D 24 06            [12]  675 	add	a,#0x06
      00010F F8               [12]  676 	mov	r0,a
      000110 E6               [12]  677 	mov	a,@r0
      000111 24r00            [12]  678 	add	a,#_neigh
      000113 FC               [12]  679 	mov	r4,a
      000114 08               [12]  680 	inc	r0
      000115 E6               [12]  681 	mov	a,@r0
      000116 34s00            [12]  682 	addc	a,#(_neigh >> 8)
      000118 FD               [12]  683 	mov	r5,a
      000119 8C 82            [24]  684 	mov	dpl,r4
      00011B 8D 83            [24]  685 	mov	dph,r5
      00011D A3               [24]  686 	inc	dptr
      00011E A3               [24]  687 	inc	dptr
      00011F E0               [24]  688 	movx	a,@dptr
      000120 FC               [12]  689 	mov	r4,a
      000121 A3               [24]  690 	inc	dptr
      000122 E0               [24]  691 	movx	a,@dptr
      000123 FD               [12]  692 	mov	r5,a
      000124 EC               [12]  693 	mov	a,r4
      000125 2A               [12]  694 	add	a,r2
      000126 FA               [12]  695 	mov	r2,a
      000127 ED               [12]  696 	mov	a,r5
      000128 3B               [12]  697 	addc	a,r3
      000129 FB               [12]  698 	mov	r3,a
      00012A E5*00            [12]  699 	mov	a,_bp
      00012C 24 08            [12]  700 	add	a,#0x08
      00012E F8               [12]  701 	mov	r0,a
      00012F 86 82            [24]  702 	mov	dpl,@r0
      000131 08               [12]  703 	inc	r0
      000132 86 83            [24]  704 	mov	dph,@r0
      000134 08               [12]  705 	inc	r0
      000135 86 F0            [24]  706 	mov	b,@r0
      000137 EA               [12]  707 	mov	a,r2
      000138 12r00r00         [24]  708 	lcall	__gptrput
      00013B A3               [24]  709 	inc	dptr
      00013C EB               [12]  710 	mov	a,r3
      00013D 12r00r00         [24]  711 	lcall	__gptrput
                                    712 ;	walk.c:128: if (t->r < 0) t->r += ROWS;
      000140 A8*00            [24]  713 	mov	r0,_bp
      000142 08               [12]  714 	inc	r0
      000143 86 82            [24]  715 	mov	dpl,@r0
      000145 08               [12]  716 	inc	r0
      000146 86 83            [24]  717 	mov	dph,@r0
      000148 08               [12]  718 	inc	r0
      000149 86 F0            [24]  719 	mov	b,@r0
      00014B 12r00r00         [24]  720 	lcall	__gptrget
      00014E FD               [12]  721 	mov	r5,a
      00014F A3               [24]  722 	inc	dptr
      000150 12r00r00         [24]  723 	lcall	__gptrget
      000153 FC               [12]  724 	mov	r4,a
      000154 EE               [12]  725 	mov	a,r6
      000155 30 E7 1D         [24]  726 	jnb	acc.7,00104$
      000158 74 30            [12]  727 	mov	a,#0x30
      00015A 2D               [12]  728 	add	a,r5
      00015B FF               [12]  729 	mov	r7,a
      00015C E4               [12]  730 	clr	a
      00015D 3C               [12]  731 	addc	a,r4
      00015E FE               [12]  732 	mov	r6,a
      00015F A8*00            [24]  733 	mov	r0,_bp
      000161 08               [12]  734 	inc	r0
      000162 86 82            [24]  735 	mov	dpl,@r0
      000164 08               [12]  736 	inc	r0
      000165 86 83            [24]  737 	mov	dph,@r0
      000167 08               [12]  738 	inc	r0
      000168 86 F0            [24]  739 	mov	b,@r0
      00016A EF               [12]  740 	mov	a,r7
      00016B 12r00r00         [24]  741 	lcall	__gptrput
      00016E A3               [24]  742 	inc	dptr
      00016F EE               [12]  743 	mov	a,r6
      000170 12r00r00         [24]  744 	lcall	__gptrput
      000173 80 27            [24]  745 	sjmp	00105$
      000175                        746 00104$:
                                    747 ;	walk.c:129: else if (t->r >= ROWS) t->r -= ROWS;
      000175 C3               [12]  748 	clr	c
      000176 ED               [12]  749 	mov	a,r5
      000177 94 30            [12]  750 	subb	a,#0x30
      000179 EC               [12]  751 	mov	a,r4
      00017A 64 80            [12]  752 	xrl	a,#0x80
      00017C 94 80            [12]  753 	subb	a,#0x80
      00017E 40 1C            [24]  754 	jc	00105$
      000180 ED               [12]  755 	mov	a,r5
      000181 24 D0            [12]  756 	add	a,#0xd0
      000183 FD               [12]  757 	mov	r5,a
      000184 EC               [12]  758 	mov	a,r4
      000185 34 FF            [12]  759 	addc	a,#0xff
      000187 FC               [12]  760 	mov	r4,a
      000188 A8*00            [24]  761 	mov	r0,_bp
      00018A 08               [12]  762 	inc	r0
      00018B 86 82            [24]  763 	mov	dpl,@r0
      00018D 08               [12]  764 	inc	r0
      00018E 86 83            [24]  765 	mov	dph,@r0
      000190 08               [12]  766 	inc	r0
      000191 86 F0            [24]  767 	mov	b,@r0
      000193 ED               [12]  768 	mov	a,r5
      000194 12r00r00         [24]  769 	lcall	__gptrput
      000197 A3               [24]  770 	inc	dptr
      000198 EC               [12]  771 	mov	a,r4
      000199 12r00r00         [24]  772 	lcall	__gptrput
      00019C                        773 00105$:
                                    774 ;	walk.c:130: if (t->c < 0) t->c += COLS;
      00019C E5*00            [12]  775 	mov	a,_bp
      00019E 24 08            [12]  776 	add	a,#0x08
      0001A0 F8               [12]  777 	mov	r0,a
      0001A1 86 82            [24]  778 	mov	dpl,@r0
      0001A3 08               [12]  779 	inc	r0
      0001A4 86 83            [24]  780 	mov	dph,@r0
      0001A6 08               [12]  781 	inc	r0
      0001A7 86 F0            [24]  782 	mov	b,@r0
      0001A9 12r00r00         [24]  783 	lcall	__gptrget
      0001AC A3               [24]  784 	inc	dptr
      0001AD 12r00r00         [24]  785 	lcall	__gptrget
      0001B0 30 E7 35         [24]  786 	jnb	acc.7,00109$
      0001B3 E5*00            [12]  787 	mov	a,_bp
      0001B5 24 08            [12]  788 	add	a,#0x08
      0001B7 F8               [12]  789 	mov	r0,a
      0001B8 86 82            [24]  790 	mov	dpl,@r0
      0001BA 08               [12]  791 	inc	r0
      0001BB 86 83            [24]  792 	mov	dph,@r0
      0001BD 08               [12]  793 	inc	r0
      0001BE 86 F0            [24]  794 	mov	b,@r0
      0001C0 12r00r00         [24]  795 	lcall	__gptrget
      0001C3 FE               [12]  796 	mov	r6,a
      0001C4 A3               [24]  797 	inc	dptr
      0001C5 12r00r00         [24]  798 	lcall	__gptrget
      0001C8 FF               [12]  799 	mov	r7,a
      0001C9 74 C9            [12]  800 	mov	a,#0xc9
      0001CB 2E               [12]  801 	add	a,r6
      0001CC FE               [12]  802 	mov	r6,a
      0001CD E4               [12]  803 	clr	a
      0001CE 3F               [12]  804 	addc	a,r7
      0001CF FF               [12]  805 	mov	r7,a
      0001D0 E5*00            [12]  806 	mov	a,_bp
      0001D2 24 08            [12]  807 	add	a,#0x08
      0001D4 F8               [12]  808 	mov	r0,a
      0001D5 86 82            [24]  809 	mov	dpl,@r0
      0001D7 08               [12]  810 	inc	r0
      0001D8 86 83            [24]  811 	mov	dph,@r0
      0001DA 08               [12]  812 	inc	r0
      0001DB 86 F0            [24]  813 	mov	b,@r0
      0001DD EE               [12]  814 	mov	a,r6
      0001DE 12r00r00         [24]  815 	lcall	__gptrput
      0001E1 A3               [24]  816 	inc	dptr
      0001E2 EF               [12]  817 	mov	a,r7
      0001E3 12r00r00         [24]  818 	lcall	__gptrput
      0001E6 80 55            [24]  819 	sjmp	00110$
      0001E8                        820 00109$:
                                    821 ;	walk.c:131: else if (t->c >= COLS) t->c -= COLS;
      0001E8 E5*00            [12]  822 	mov	a,_bp
      0001EA 24 08            [12]  823 	add	a,#0x08
      0001EC F8               [12]  824 	mov	r0,a
      0001ED 86 82            [24]  825 	mov	dpl,@r0
      0001EF 08               [12]  826 	inc	r0
      0001F0 86 83            [24]  827 	mov	dph,@r0
      0001F2 08               [12]  828 	inc	r0
      0001F3 86 F0            [24]  829 	mov	b,@r0
      0001F5 12r00r00         [24]  830 	lcall	__gptrget
      0001F8 FE               [12]  831 	mov	r6,a
      0001F9 A3               [24]  832 	inc	dptr
      0001FA 12r00r00         [24]  833 	lcall	__gptrget
      0001FD FF               [12]  834 	mov	r7,a
      0001FE C3               [12]  835 	clr	c
      0001FF EE               [12]  836 	mov	a,r6
      000200 94 C9            [12]  837 	subb	a,#0xc9
      000202 EF               [12]  838 	mov	a,r7
      000203 64 80            [12]  839 	xrl	a,#0x80
      000205 94 80            [12]  840 	subb	a,#0x80
      000207 40 34            [24]  841 	jc	00110$
      000209 E5*00            [12]  842 	mov	a,_bp
      00020B 24 08            [12]  843 	add	a,#0x08
      00020D F8               [12]  844 	mov	r0,a
      00020E 86 82            [24]  845 	mov	dpl,@r0
      000210 08               [12]  846 	inc	r0
      000211 86 83            [24]  847 	mov	dph,@r0
      000213 08               [12]  848 	inc	r0
      000214 86 F0            [24]  849 	mov	b,@r0
      000216 12r00r00         [24]  850 	lcall	__gptrget
      000219 FE               [12]  851 	mov	r6,a
      00021A A3               [24]  852 	inc	dptr
      00021B 12r00r00         [24]  853 	lcall	__gptrget
      00021E FF               [12]  854 	mov	r7,a
      00021F EE               [12]  855 	mov	a,r6
      000220 24 37            [12]  856 	add	a,#0x37
      000222 FE               [12]  857 	mov	r6,a
      000223 EF               [12]  858 	mov	a,r7
      000224 34 FF            [12]  859 	addc	a,#0xff
      000226 FF               [12]  860 	mov	r7,a
      000227 E5*00            [12]  861 	mov	a,_bp
      000229 24 08            [12]  862 	add	a,#0x08
      00022B F8               [12]  863 	mov	r0,a
      00022C 86 82            [24]  864 	mov	dpl,@r0
      00022E 08               [12]  865 	inc	r0
      00022F 86 83            [24]  866 	mov	dph,@r0
      000231 08               [12]  867 	inc	r0
      000232 86 F0            [24]  868 	mov	b,@r0
      000234 EE               [12]  869 	mov	a,r6
      000235 12r00r00         [24]  870 	lcall	__gptrput
      000238 A3               [24]  871 	inc	dptr
      000239 EF               [12]  872 	mov	a,r7
      00023A 12r00r00         [24]  873 	lcall	__gptrput
      00023D                        874 00110$:
                                    875 ;	walk.c:133: if (g[t->r][t->c] == 0xaau) return 0u;
      00023D A8*00            [24]  876 	mov	r0,_bp
      00023F 08               [12]  877 	inc	r0
      000240 86 82            [24]  878 	mov	dpl,@r0
      000242 08               [12]  879 	inc	r0
      000243 86 83            [24]  880 	mov	dph,@r0
      000245 08               [12]  881 	inc	r0
      000246 86 F0            [24]  882 	mov	b,@r0
      000248 12r00r00         [24]  883 	lcall	__gptrget
      00024B FE               [12]  884 	mov	r6,a
      00024C A3               [24]  885 	inc	dptr
      00024D 12r00r00         [24]  886 	lcall	__gptrget
      000250 FF               [12]  887 	mov	r7,a
      000251 C0 06            [24]  888 	push	ar6
      000253 C0 07            [24]  889 	push	ar7
      000255 90 00 C9         [24]  890 	mov	dptr,#0x00c9
      000258 12r00r00         [24]  891 	lcall	__mulint
      00025B AE 82            [24]  892 	mov	r6,dpl
      00025D AF 83            [24]  893 	mov	r7,dph
      00025F 15 81            [12]  894 	dec	sp
      000261 15 81            [12]  895 	dec	sp
      000263 EE               [12]  896 	mov	a,r6
      000264 24r00            [12]  897 	add	a,#_g
      000266 FE               [12]  898 	mov	r6,a
      000267 EF               [12]  899 	mov	a,r7
      000268 34s00            [12]  900 	addc	a,#(_g >> 8)
      00026A FF               [12]  901 	mov	r7,a
      00026B E5*00            [12]  902 	mov	a,_bp
      00026D 24 08            [12]  903 	add	a,#0x08
      00026F F8               [12]  904 	mov	r0,a
      000270 86 82            [24]  905 	mov	dpl,@r0
      000272 08               [12]  906 	inc	r0
      000273 86 83            [24]  907 	mov	dph,@r0
      000275 08               [12]  908 	inc	r0
      000276 86 F0            [24]  909 	mov	b,@r0
      000278 12r00r00         [24]  910 	lcall	__gptrget
      00027B FC               [12]  911 	mov	r4,a
      00027C A3               [24]  912 	inc	dptr
      00027D 12r00r00         [24]  913 	lcall	__gptrget
      000280 FD               [12]  914 	mov	r5,a
      000281 EC               [12]  915 	mov	a,r4
      000282 2E               [12]  916 	add	a,r6
      000283 F5 82            [12]  917 	mov	dpl,a
      000285 ED               [12]  918 	mov	a,r5
      000286 3F               [12]  919 	addc	a,r7
      000287 F5 83            [12]  920 	mov	dph,a
      000289 E0               [24]  921 	movx	a,@dptr
      00028A FF               [12]  922 	mov	r7,a
      00028B BF AA 05         [24]  923 	cjne	r7,#0xaa,00114$
      00028E 75 82 00         [24]  924 	mov	dpl,#0x00
      000291 80 59            [24]  925 	sjmp	00116$
      000293                        926 00114$:
                                    927 ;	walk.c:134: else if (g[t->r][t->c] != 0x55u) bang();
      000293 A8*00            [24]  928 	mov	r0,_bp
      000295 08               [12]  929 	inc	r0
      000296 86 82            [24]  930 	mov	dpl,@r0
      000298 08               [12]  931 	inc	r0
      000299 86 83            [24]  932 	mov	dph,@r0
      00029B 08               [12]  933 	inc	r0
      00029C 86 F0            [24]  934 	mov	b,@r0
      00029E 12r00r00         [24]  935 	lcall	__gptrget
      0002A1 FE               [12]  936 	mov	r6,a
      0002A2 A3               [24]  937 	inc	dptr
      0002A3 12r00r00         [24]  938 	lcall	__gptrget
      0002A6 FF               [12]  939 	mov	r7,a
      0002A7 C0 06            [24]  940 	push	ar6
      0002A9 C0 07            [24]  941 	push	ar7
      0002AB 90 00 C9         [24]  942 	mov	dptr,#0x00c9
      0002AE 12r00r00         [24]  943 	lcall	__mulint
      0002B1 AE 82            [24]  944 	mov	r6,dpl
      0002B3 AF 83            [24]  945 	mov	r7,dph
      0002B5 15 81            [12]  946 	dec	sp
      0002B7 15 81            [12]  947 	dec	sp
      0002B9 EE               [12]  948 	mov	a,r6
      0002BA 24r00            [12]  949 	add	a,#_g
      0002BC FE               [12]  950 	mov	r6,a
      0002BD EF               [12]  951 	mov	a,r7
      0002BE 34s00            [12]  952 	addc	a,#(_g >> 8)
      0002C0 FF               [12]  953 	mov	r7,a
      0002C1 E5*00            [12]  954 	mov	a,_bp
      0002C3 24 08            [12]  955 	add	a,#0x08
      0002C5 F8               [12]  956 	mov	r0,a
      0002C6 86 82            [24]  957 	mov	dpl,@r0
      0002C8 08               [12]  958 	inc	r0
      0002C9 86 83            [24]  959 	mov	dph,@r0
      0002CB 08               [12]  960 	inc	r0
      0002CC 86 F0            [24]  961 	mov	b,@r0
      0002CE 12r00r00         [24]  962 	lcall	__gptrget
      0002D1 FC               [12]  963 	mov	r4,a
      0002D2 A3               [24]  964 	inc	dptr
      0002D3 12r00r00         [24]  965 	lcall	__gptrget
      0002D6 FD               [12]  966 	mov	r5,a
      0002D7 EC               [12]  967 	mov	a,r4
      0002D8 2E               [12]  968 	add	a,r6
      0002D9 F5 82            [12]  969 	mov	dpl,a
      0002DB ED               [12]  970 	mov	a,r5
      0002DC 3F               [12]  971 	addc	a,r7
      0002DD F5 83            [12]  972 	mov	dph,a
      0002DF E0               [24]  973 	movx	a,@dptr
      0002E0 FF               [12]  974 	mov	r7,a
      0002E1 BF 55 02         [24]  975 	cjne	r7,#0x55,00148$
      0002E4 80 03            [24]  976 	sjmp	00115$
      0002E6                        977 00148$:
      0002E6 12r00r0C         [24]  978 	lcall	_bang
      0002E9                        979 00115$:
                                    980 ;	walk.c:136: return 1u;
      0002E9 75 82 01         [24]  981 	mov	dpl,#0x01
      0002EC                        982 00116$:
                                    983 ;	walk.c:137: }
      0002EC 85*00 81         [24]  984 	mov	sp,_bp
      0002EF D0*00            [24]  985 	pop	_bp
      0002F1 22               [24]  986 	ret
                                    987 ;------------------------------------------------------------
                                    988 ;Allocation info for local variables in function 'walk'
                                    989 ;------------------------------------------------------------
                                    990 ;nstart                    Allocated to registers 
                                    991 ;cur                       Allocated to stack - _bp +10
                                    992 ;t                         Allocated to stack - _bp +14
                                    993 ;j                         Allocated to stack - _bp +18
                                    994 ;f                         Allocated to registers r3 
                                    995 ;sloc0                     Allocated to stack - _bp +1
                                    996 ;sloc1                     Allocated to stack - _bp +2
                                    997 ;sloc2                     Allocated to stack - _bp +3
                                    998 ;sloc3                     Allocated to stack - _bp +17
                                    999 ;sloc4                     Allocated to stack - _bp +4
                                   1000 ;sloc5                     Allocated to stack - _bp +5
                                   1001 ;sloc6                     Allocated to stack - _bp +6
                                   1002 ;sloc7                     Allocated to stack - _bp +7
                                   1003 ;------------------------------------------------------------
                                   1004 ;	walk.c:139: static void walk(struct node *nstart) {
                                   1005 ;	-----------------------------------------
                                   1006 ;	 function walk
                                   1007 ;	-----------------------------------------
      0002F2                       1008 _walk:
      0002F2 C0*00            [24] 1009 	push	_bp
      0002F4 E5 81            [12] 1010 	mov	a,sp
      0002F6 F5*00            [12] 1011 	mov	_bp,a
      0002F8 24 12            [12] 1012 	add	a,#0x12
      0002FA F5 81            [12] 1013 	mov	sp,a
      0002FC AD 82            [24] 1014 	mov	r5,dpl
      0002FE AE 83            [24] 1015 	mov	r6,dph
      000300 AF F0            [24] 1016 	mov	r7,b
                                   1017 ;	walk.c:143: cur = *nstart;
      000302 E5*00            [12] 1018 	mov	a,_bp
      000304 24 0A            [12] 1019 	add	a,#0x0a
      000306 F9               [12] 1020 	mov	r1,a
      000307 FA               [12] 1021 	mov	r2,a
      000308 7B 00            [12] 1022 	mov	r3,#0x00
      00030A 7C 40            [12] 1023 	mov	r4,#0x40
      00030C C0 01            [24] 1024 	push	ar1
      00030E 74 04            [12] 1025 	mov	a,#0x04
      000310 C0 E0            [24] 1026 	push	acc
      000312 E4               [12] 1027 	clr	a
      000313 C0 E0            [24] 1028 	push	acc
      000315 C0 05            [24] 1029 	push	ar5
      000317 C0 06            [24] 1030 	push	ar6
      000319 C0 07            [24] 1031 	push	ar7
      00031B 8A 82            [24] 1032 	mov	dpl,r2
      00031D 8B 83            [24] 1033 	mov	dph,r3
      00031F 8C F0            [24] 1034 	mov	b,r4
      000321 12r00r00         [24] 1035 	lcall	___memcpy
      000324 E5 81            [12] 1036 	mov	a,sp
      000326 24 FB            [12] 1037 	add	a,#0xfb
      000328 F5 81            [12] 1038 	mov	sp,a
      00032A D0 01            [24] 1039 	pop	ar1
                                   1040 ;	walk.c:145: process:
      00032C E5*00            [12] 1041 	mov	a,_bp
      00032E 24 06            [12] 1042 	add	a,#0x06
      000330 F8               [12] 1043 	mov	r0,a
      000331 A6 01            [24] 1044 	mov	@r0,ar1
      000333 E5*00            [12] 1045 	mov	a,_bp
      000335 24 0E            [12] 1046 	add	a,#0x0e
      000337 FE               [12] 1047 	mov	r6,a
      000338 E5*00            [12] 1048 	mov	a,_bp
      00033A 24 03            [12] 1049 	add	a,#0x03
      00033C F8               [12] 1050 	mov	r0,a
      00033D A6 01            [24] 1051 	mov	@r0,ar1
      00033F E5*00            [12] 1052 	mov	a,_bp
      000341 24 05            [12] 1053 	add	a,#0x05
      000343 F8               [12] 1054 	mov	r0,a
      000344 A6 01            [24] 1055 	mov	@r0,ar1
      000346 E5*00            [12] 1056 	mov	a,_bp
      000348 24 04            [12] 1057 	add	a,#0x04
      00034A F8               [12] 1058 	mov	r0,a
      00034B A6 06            [24] 1059 	mov	@r0,ar6
      00034D 89 02            [24] 1060 	mov	ar2,r1
      00034F A8*00            [24] 1061 	mov	r0,_bp
      000351 08               [12] 1062 	inc	r0
      000352 A6 06            [24] 1063 	mov	@r0,ar6
      000354 A8*00            [24] 1064 	mov	r0,_bp
      000356 08               [12] 1065 	inc	r0
      000357 08               [12] 1066 	inc	r0
      000358 A6 01            [24] 1067 	mov	@r0,ar1
      00035A 74 02            [12] 1068 	mov	a,#0x02
      00035C 29               [12] 1069 	add	a,r1
      00035D F8               [12] 1070 	mov	r0,a
      00035E                       1071 00101$:
                                   1072 ;	walk.c:146: g[cur.r][cur.c] = 0xaau;
      00035E C0 02            [24] 1073 	push	ar2
      000360 87 02            [24] 1074 	mov	ar2,@r1
      000362 09               [12] 1075 	inc	r1
      000363 87 05            [24] 1076 	mov	ar5,@r1
      000365 19               [12] 1077 	dec	r1
      000366 C0 06            [24] 1078 	push	ar6
      000368 C0 01            [24] 1079 	push	ar1
      00036A C0 00            [24] 1080 	push	ar0
      00036C C0 02            [24] 1081 	push	ar2
      00036E C0 05            [24] 1082 	push	ar5
      000370 90 00 C9         [24] 1083 	mov	dptr,#0x00c9
      000373 12r00r00         [24] 1084 	lcall	__mulint
      000376 AA 82            [24] 1085 	mov	r2,dpl
      000378 AD 83            [24] 1086 	mov	r5,dph
      00037A 15 81            [12] 1087 	dec	sp
      00037C 15 81            [12] 1088 	dec	sp
      00037E D0 00            [24] 1089 	pop	ar0
      000380 D0 01            [24] 1090 	pop	ar1
      000382 EA               [12] 1091 	mov	a,r2
      000383 24r00            [12] 1092 	add	a,#_g
      000385 FF               [12] 1093 	mov	r7,a
      000386 ED               [12] 1094 	mov	a,r5
      000387 34s00            [12] 1095 	addc	a,#(_g >> 8)
      000389 FC               [12] 1096 	mov	r4,a
      00038A 86 02            [24] 1097 	mov	ar2,@r0
      00038C 08               [12] 1098 	inc	r0
      00038D 86 05            [24] 1099 	mov	ar5,@r0
      00038F 18               [12] 1100 	dec	r0
      000390 EA               [12] 1101 	mov	a,r2
      000391 2F               [12] 1102 	add	a,r7
      000392 F5 82            [12] 1103 	mov	dpl,a
      000394 ED               [12] 1104 	mov	a,r5
      000395 3C               [12] 1105 	addc	a,r4
      000396 F5 83            [12] 1106 	mov	dph,a
      000398 74 AA            [12] 1107 	mov	a,#0xaa
      00039A F0               [24] 1108 	movx	@dptr,a
                                   1109 ;	walk.c:148: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      00039B 86 02            [24] 1110 	mov	ar2,@r0
      00039D 08               [12] 1111 	inc	r0
      00039E 86 05            [24] 1112 	mov	ar5,@r0
      0003A0 18               [12] 1113 	dec	r0
      0003A1 74 01            [12] 1114 	mov	a,#0x01
      0003A3 2A               [12] 1115 	add	a,r2
      0003A4 FF               [12] 1116 	mov	r7,a
      0003A5 E4               [12] 1117 	clr	a
      0003A6 3D               [12] 1118 	addc	a,r5
      0003A7 FC               [12] 1119 	mov	r4,a
      0003A8 87 02            [24] 1120 	mov	ar2,@r1
      0003AA 09               [12] 1121 	inc	r1
      0003AB 87 05            [24] 1122 	mov	ar5,@r1
      0003AD 19               [12] 1123 	dec	r1
      0003AE 74 04            [12] 1124 	mov	a,#0x04
      0003B0 2A               [12] 1125 	add	a,r2
      0003B1 FA               [12] 1126 	mov	r2,a
      0003B2 E4               [12] 1127 	clr	a
      0003B3 3D               [12] 1128 	addc	a,r5
      0003B4 FD               [12] 1129 	mov	r5,a
      0003B5 C0 02            [24] 1130 	push	ar2
      0003B7 C0 01            [24] 1131 	push	ar1
      0003B9 C0 00            [24] 1132 	push	ar0
      0003BB C0 07            [24] 1133 	push	ar7
      0003BD C0 04            [24] 1134 	push	ar4
      0003BF C0 02            [24] 1135 	push	ar2
      0003C1 C0 05            [24] 1136 	push	ar5
      0003C3 74r0D            [12] 1137 	mov	a,#___str_1
      0003C5 C0 E0            [24] 1138 	push	acc
      0003C7 74s00            [12] 1139 	mov	a,#(___str_1 >> 8)
      0003C9 C0 E0            [24] 1140 	push	acc
      0003CB 74 80            [12] 1141 	mov	a,#0x80
      0003CD C0 E0            [24] 1142 	push	acc
      0003CF 12r00r00         [24] 1143 	lcall	_printf
      0003D2 E5 81            [12] 1144 	mov	a,sp
      0003D4 24 F9            [12] 1145 	add	a,#0xf9
      0003D6 F5 81            [12] 1146 	mov	sp,a
                                   1147 ;	walk.c:149: setOE(OE76_MASK7);
      0003D8 75 82 80         [24] 1148 	mov	dpl,#0x80
      0003DB 12r00r19         [24] 1149 	lcall	_setOE
      0003DE D0 00            [24] 1150 	pop	ar0
      0003E0 D0 01            [24] 1151 	pop	ar1
      0003E2 D0 02            [24] 1152 	pop	ar2
      0003E4 D0 06            [24] 1153 	pop	ar6
                                   1154 ;	walk.c:177: return;
      0003E6 D0 02            [24] 1155 	pop	ar2
                                   1156 ;	walk.c:151: next:
      0003E8                       1157 00102$:
                                   1158 ;	walk.c:152: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003E8 C0 02            [24] 1159 	push	ar2
      0003EA 86 07            [24] 1160 	mov	ar7,@r0
      0003EC 08               [12] 1161 	inc	r0
      0003ED 86 04            [24] 1162 	mov	ar4,@r0
      0003EF 18               [12] 1163 	dec	r0
      0003F0 87 02            [24] 1164 	mov	ar2,@r1
      0003F2 09               [12] 1165 	inc	r1
      0003F3 87 05            [24] 1166 	mov	ar5,@r1
      0003F5 19               [12] 1167 	dec	r1
      0003F6 C0 06            [24] 1168 	push	ar6
      0003F8 C0 02            [24] 1169 	push	ar2
      0003FA C0 01            [24] 1170 	push	ar1
      0003FC C0 00            [24] 1171 	push	ar0
      0003FE C0 07            [24] 1172 	push	ar7
      000400 C0 04            [24] 1173 	push	ar4
      000402 C0 02            [24] 1174 	push	ar2
      000404 C0 05            [24] 1175 	push	ar5
      000406 90rBCr70         [24] 1176 	mov	dptr,#_sp
      000409 E0               [24] 1177 	movx	a,@dptr
      00040A C0 E0            [24] 1178 	push	acc
      00040C A3               [24] 1179 	inc	dptr
      00040D E0               [24] 1180 	movx	a,@dptr
      00040E C0 E0            [24] 1181 	push	acc
      000410 74r17            [12] 1182 	mov	a,#___str_2
      000412 C0 E0            [24] 1183 	push	acc
      000414 74s00            [12] 1184 	mov	a,#(___str_2 >> 8)
      000416 C0 E0            [24] 1185 	push	acc
      000418 74 80            [12] 1186 	mov	a,#0x80
      00041A C0 E0            [24] 1187 	push	acc
      00041C 12r00r00         [24] 1188 	lcall	_printf
      00041F E5 81            [12] 1189 	mov	a,sp
      000421 24 F7            [12] 1190 	add	a,#0xf7
      000423 F5 81            [12] 1191 	mov	sp,a
                                   1192 ;	walk.c:153: unsetOE(OE76_MASK7 | OE76_MASK6);
      000425 75 82 C0         [24] 1193 	mov	dpl,#0xc0
      000428 12r00r32         [24] 1194 	lcall	_unsetOE
      00042B D0 00            [24] 1195 	pop	ar0
      00042D D0 01            [24] 1196 	pop	ar1
      00042F D0 02            [24] 1197 	pop	ar2
      000431 D0 06            [24] 1198 	pop	ar6
                                   1199 ;	walk.c:155: for (j = 0u, f = 0u; j < NMAX; j++) {
      000433 7B 00            [12] 1200 	mov	r3,#0x00
      000435 C0 00            [24] 1201 	push	ar0
      000437 E5*00            [12] 1202 	mov	a,_bp
      000439 24 12            [12] 1203 	add	a,#0x12
      00043B F8               [12] 1204 	mov	r0,a
      00043C 76 00            [12] 1205 	mov	@r0,#0x00
      00043E D0 00            [24] 1206 	pop	ar0
                                   1207 ;	walk.c:177: return;
      000440 D0 02            [24] 1208 	pop	ar2
                                   1209 ;	walk.c:155: for (j = 0u, f = 0u; j < NMAX; j++) {
      000442                       1210 00119$:
      000442 C0 00            [24] 1211 	push	ar0
      000444 E5*00            [12] 1212 	mov	a,_bp
      000446 24 12            [12] 1213 	add	a,#0x12
      000448 F8               [12] 1214 	mov	r0,a
      000449 B6 10 00         [24] 1215 	cjne	@r0,#0x10,00159$
      00044C                       1216 00159$:
      00044C D0 00            [24] 1217 	pop	ar0
      00044E 50 7A            [24] 1218 	jnc	00106$
                                   1219 ;	walk.c:156: if (!update(&t, &cur, j)) continue;
      000450 C0 02            [24] 1220 	push	ar2
      000452 C0 00            [24] 1221 	push	ar0
      000454 E5*00            [12] 1222 	mov	a,_bp
      000456 24 06            [12] 1223 	add	a,#0x06
      000458 F8               [12] 1224 	mov	r0,a
      000459 C0 01            [24] 1225 	push	ar1
      00045B E5*00            [12] 1226 	mov	a,_bp
      00045D 24 07            [12] 1227 	add	a,#0x07
      00045F F9               [12] 1228 	mov	r1,a
      000460 E6               [12] 1229 	mov	a,@r0
      000461 F7               [12] 1230 	mov	@r1,a
      000462 09               [12] 1231 	inc	r1
      000463 77 00            [12] 1232 	mov	@r1,#0x00
      000465 09               [12] 1233 	inc	r1
      000466 77 40            [12] 1234 	mov	@r1,#0x40
      000468 D0 01            [24] 1235 	pop	ar1
      00046A D0 00            [24] 1236 	pop	ar0
      00046C 8E 04            [24] 1237 	mov	ar4,r6
      00046E 7D 00            [12] 1238 	mov	r5,#0x00
      000470 7F 40            [12] 1239 	mov	r7,#0x40
      000472 C0 06            [24] 1240 	push	ar6
      000474 C0 03            [24] 1241 	push	ar3
      000476 C0 02            [24] 1242 	push	ar2
      000478 C0 01            [24] 1243 	push	ar1
      00047A C0 00            [24] 1244 	push	ar0
      00047C 85 00 F0         [24] 1245 	mov	b,ar0
      00047F E5*00            [12] 1246 	mov	a,_bp
      000481 24 12            [12] 1247 	add	a,#0x12
      000483 F8               [12] 1248 	mov	r0,a
      000484 E6               [12] 1249 	mov	a,@r0
      000485 C0 E0            [24] 1250 	push	acc
      000487 A8 F0            [24] 1251 	mov	r0,b
      000489 85 00 F0         [24] 1252 	mov	b,ar0
      00048C E5*00            [12] 1253 	mov	a,_bp
      00048E 24 07            [12] 1254 	add	a,#0x07
      000490 F8               [12] 1255 	mov	r0,a
      000491 E6               [12] 1256 	mov	a,@r0
      000492 C0 E0            [24] 1257 	push	acc
      000494 08               [12] 1258 	inc	r0
      000495 E6               [12] 1259 	mov	a,@r0
      000496 C0 E0            [24] 1260 	push	acc
      000498 08               [12] 1261 	inc	r0
      000499 E6               [12] 1262 	mov	a,@r0
      00049A C0 E0            [24] 1263 	push	acc
      00049C 8C 82            [24] 1264 	mov	dpl,r4
      00049E 8D 83            [24] 1265 	mov	dph,r5
      0004A0 8F F0            [24] 1266 	mov	b,r7
      0004A2 12r00r65         [24] 1267 	lcall	_update
      0004A5 AF 82            [24] 1268 	mov	r7,dpl
      0004A7 E5 81            [12] 1269 	mov	a,sp
      0004A9 24 FC            [12] 1270 	add	a,#0xfc
      0004AB F5 81            [12] 1271 	mov	sp,a
      0004AD D0 00            [24] 1272 	pop	ar0
      0004AF D0 01            [24] 1273 	pop	ar1
      0004B1 D0 02            [24] 1274 	pop	ar2
      0004B3 D0 03            [24] 1275 	pop	ar3
      0004B5 D0 06            [24] 1276 	pop	ar6
      0004B7 D0 02            [24] 1277 	pop	ar2
      0004B9 EF               [12] 1278 	mov	a,r7
      0004BA 60 01            [24] 1279 	jz	00105$
                                   1280 ;	walk.c:157: f++;
      0004BC 0B               [12] 1281 	inc	r3
      0004BD                       1282 00105$:
                                   1283 ;	walk.c:155: for (j = 0u, f = 0u; j < NMAX; j++) {
      0004BD C0 00            [24] 1284 	push	ar0
      0004BF E5*00            [12] 1285 	mov	a,_bp
      0004C1 24 12            [12] 1286 	add	a,#0x12
      0004C3 F8               [12] 1287 	mov	r0,a
      0004C4 06               [12] 1288 	inc	@r0
      0004C5 D0 00            [24] 1289 	pop	ar0
      0004C7 02r04r42         [24] 1290 	ljmp	00119$
      0004CA                       1291 00106$:
                                   1292 ;	walk.c:160: if (f) {
      0004CA EB               [12] 1293 	mov	a,r3
      0004CB 70 03            [24] 1294 	jnz	00162$
      0004CD 02r05rE4         [24] 1295 	ljmp	00115$
      0004D0                       1296 00162$:
                                   1297 ;	walk.c:161: while (1) {
      0004D0                       1298 00112$:
                                   1299 ;	walk.c:162: j = (uint8_t)(rand() % NMAX);
      0004D0 C0 02            [24] 1300 	push	ar2
      0004D2 C0 06            [24] 1301 	push	ar6
      0004D4 C0 02            [24] 1302 	push	ar2
      0004D6 C0 01            [24] 1303 	push	ar1
      0004D8 C0 00            [24] 1304 	push	ar0
      0004DA 12r00r00         [24] 1305 	lcall	_rand
      0004DD AD 82            [24] 1306 	mov	r5,dpl
      0004DF D0 00            [24] 1307 	pop	ar0
      0004E1 D0 01            [24] 1308 	pop	ar1
      0004E3 D0 02            [24] 1309 	pop	ar2
      0004E5 D0 06            [24] 1310 	pop	ar6
      0004E7 53 05 0F         [24] 1311 	anl	ar5,#0x0f
      0004EA 8D 04            [24] 1312 	mov	ar4,r5
                                   1313 ;	walk.c:163: if (!update(&t, &cur, j)) continue;
      0004EC C0 00            [24] 1314 	push	ar0
      0004EE E5*00            [12] 1315 	mov	a,_bp
      0004F0 24 05            [12] 1316 	add	a,#0x05
      0004F2 F8               [12] 1317 	mov	r0,a
      0004F3 C0 01            [24] 1318 	push	ar1
      0004F5 E5*00            [12] 1319 	mov	a,_bp
      0004F7 24 07            [12] 1320 	add	a,#0x07
      0004F9 F9               [12] 1321 	mov	r1,a
      0004FA E6               [12] 1322 	mov	a,@r0
      0004FB F7               [12] 1323 	mov	@r1,a
      0004FC 09               [12] 1324 	inc	r1
      0004FD 77 00            [12] 1325 	mov	@r1,#0x00
      0004FF 09               [12] 1326 	inc	r1
      000500 77 40            [12] 1327 	mov	@r1,#0x40
      000502 D0 01            [24] 1328 	pop	ar1
      000504 E5*00            [12] 1329 	mov	a,_bp
      000506 24 04            [12] 1330 	add	a,#0x04
      000508 F8               [12] 1331 	mov	r0,a
      000509 86 02            [24] 1332 	mov	ar2,@r0
      00050B 7D 00            [12] 1333 	mov	r5,#0x00
      00050D 7F 40            [12] 1334 	mov	r7,#0x40
      00050F D0 00            [24] 1335 	pop	ar0
      000511 C0 06            [24] 1336 	push	ar6
      000513 C0 02            [24] 1337 	push	ar2
      000515 C0 01            [24] 1338 	push	ar1
      000517 C0 00            [24] 1339 	push	ar0
      000519 C0 04            [24] 1340 	push	ar4
      00051B 85 00 F0         [24] 1341 	mov	b,ar0
      00051E E5*00            [12] 1342 	mov	a,_bp
      000520 24 07            [12] 1343 	add	a,#0x07
      000522 F8               [12] 1344 	mov	r0,a
      000523 E6               [12] 1345 	mov	a,@r0
      000524 C0 E0            [24] 1346 	push	acc
      000526 08               [12] 1347 	inc	r0
      000527 E6               [12] 1348 	mov	a,@r0
      000528 C0 E0            [24] 1349 	push	acc
      00052A 08               [12] 1350 	inc	r0
      00052B E6               [12] 1351 	mov	a,@r0
      00052C C0 E0            [24] 1352 	push	acc
      00052E 8A 82            [24] 1353 	mov	dpl,r2
      000530 8D 83            [24] 1354 	mov	dph,r5
      000532 8F F0            [24] 1355 	mov	b,r7
      000534 12r00r65         [24] 1356 	lcall	_update
      000537 AF 82            [24] 1357 	mov	r7,dpl
      000539 E5 81            [12] 1358 	mov	a,sp
      00053B 24 FC            [12] 1359 	add	a,#0xfc
      00053D F5 81            [12] 1360 	mov	sp,a
      00053F D0 00            [24] 1361 	pop	ar0
      000541 D0 01            [24] 1362 	pop	ar1
      000543 D0 02            [24] 1363 	pop	ar2
      000545 D0 06            [24] 1364 	pop	ar6
      000547 D0 02            [24] 1365 	pop	ar2
      000549 EF               [12] 1366 	mov	a,r7
      00054A 60 84            [24] 1367 	jz	00112$
                                   1368 ;	walk.c:164: if (!stpush(&cur)) bang();
      00054C 8A 04            [24] 1369 	mov	ar4,r2
      00054E 7D 00            [12] 1370 	mov	r5,#0x00
      000550 7F 40            [12] 1371 	mov	r7,#0x40
      000552 8C 82            [24] 1372 	mov	dpl,r4
      000554 8D 83            [24] 1373 	mov	dph,r5
      000556 8F F0            [24] 1374 	mov	b,r7
      000558 C0 06            [24] 1375 	push	ar6
      00055A C0 02            [24] 1376 	push	ar2
      00055C C0 01            [24] 1377 	push	ar1
      00055E C0 00            [24] 1378 	push	ar0
      000560 12r0Ar4E         [24] 1379 	lcall	_stpush
      000563 E5 82            [12] 1380 	mov	a,dpl
      000565 D0 00            [24] 1381 	pop	ar0
      000567 D0 01            [24] 1382 	pop	ar1
      000569 D0 02            [24] 1383 	pop	ar2
      00056B D0 06            [24] 1384 	pop	ar6
      00056D 70 13            [24] 1385 	jnz	00110$
      00056F C0 06            [24] 1386 	push	ar6
      000571 C0 02            [24] 1387 	push	ar2
      000573 C0 01            [24] 1388 	push	ar1
      000575 C0 00            [24] 1389 	push	ar0
      000577 12r00r0C         [24] 1390 	lcall	_bang
      00057A D0 00            [24] 1391 	pop	ar0
      00057C D0 01            [24] 1392 	pop	ar1
      00057E D0 02            [24] 1393 	pop	ar2
      000580 D0 06            [24] 1394 	pop	ar6
      000582                       1395 00110$:
                                   1396 ;	walk.c:165: cur = t;
      000582 C0 02            [24] 1397 	push	ar2
      000584 C0 00            [24] 1398 	push	ar0
      000586 A8*00            [24] 1399 	mov	r0,_bp
      000588 08               [12] 1400 	inc	r0
      000589 C0 01            [24] 1401 	push	ar1
      00058B E5*00            [12] 1402 	mov	a,_bp
      00058D 24 07            [12] 1403 	add	a,#0x07
      00058F F9               [12] 1404 	mov	r1,a
      000590 E6               [12] 1405 	mov	a,@r0
      000591 F7               [12] 1406 	mov	@r1,a
      000592 09               [12] 1407 	inc	r1
      000593 77 00            [12] 1408 	mov	@r1,#0x00
      000595 09               [12] 1409 	inc	r1
      000596 77 40            [12] 1410 	mov	@r1,#0x40
      000598 D0 01            [24] 1411 	pop	ar1
      00059A A8*00            [24] 1412 	mov	r0,_bp
      00059C 08               [12] 1413 	inc	r0
      00059D 08               [12] 1414 	inc	r0
      00059E 86 02            [24] 1415 	mov	ar2,@r0
      0005A0 7B 00            [12] 1416 	mov	r3,#0x00
      0005A2 7F 40            [12] 1417 	mov	r7,#0x40
      0005A4 D0 00            [24] 1418 	pop	ar0
      0005A6 C0 06            [24] 1419 	push	ar6
      0005A8 C0 02            [24] 1420 	push	ar2
      0005AA C0 01            [24] 1421 	push	ar1
      0005AC C0 00            [24] 1422 	push	ar0
      0005AE 74 04            [12] 1423 	mov	a,#0x04
      0005B0 C0 E0            [24] 1424 	push	acc
      0005B2 E4               [12] 1425 	clr	a
      0005B3 C0 E0            [24] 1426 	push	acc
      0005B5 85 00 F0         [24] 1427 	mov	b,ar0
      0005B8 E5*00            [12] 1428 	mov	a,_bp
      0005BA 24 07            [12] 1429 	add	a,#0x07
      0005BC F8               [12] 1430 	mov	r0,a
      0005BD E6               [12] 1431 	mov	a,@r0
      0005BE C0 E0            [24] 1432 	push	acc
      0005C0 08               [12] 1433 	inc	r0
      0005C1 E6               [12] 1434 	mov	a,@r0
      0005C2 C0 E0            [24] 1435 	push	acc
      0005C4 08               [12] 1436 	inc	r0
      0005C5 E6               [12] 1437 	mov	a,@r0
      0005C6 C0 E0            [24] 1438 	push	acc
      0005C8 8A 82            [24] 1439 	mov	dpl,r2
      0005CA 8B 83            [24] 1440 	mov	dph,r3
      0005CC 8F F0            [24] 1441 	mov	b,r7
      0005CE 12r00r00         [24] 1442 	lcall	___memcpy
      0005D1 E5 81            [12] 1443 	mov	a,sp
      0005D3 24 FB            [12] 1444 	add	a,#0xfb
      0005D5 F5 81            [12] 1445 	mov	sp,a
      0005D7 D0 00            [24] 1446 	pop	ar0
      0005D9 D0 01            [24] 1447 	pop	ar1
      0005DB D0 02            [24] 1448 	pop	ar2
      0005DD D0 06            [24] 1449 	pop	ar6
                                   1450 ;	walk.c:166: goto process;
      0005DF D0 02            [24] 1451 	pop	ar2
      0005E1 02r03r5E         [24] 1452 	ljmp	00101$
      0005E4                       1453 00115$:
                                   1454 ;	walk.c:170: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005E4 86 05            [24] 1455 	mov	ar5,@r0
      0005E6 08               [12] 1456 	inc	r0
      0005E7 86 07            [24] 1457 	mov	ar7,@r0
      0005E9 18               [12] 1458 	dec	r0
      0005EA 0D               [12] 1459 	inc	r5
      0005EB BD 00 01         [24] 1460 	cjne	r5,#0x00,00165$
      0005EE 0F               [12] 1461 	inc	r7
      0005EF                       1462 00165$:
      0005EF 87 03            [24] 1463 	mov	ar3,@r1
      0005F1 09               [12] 1464 	inc	r1
      0005F2 87 04            [24] 1465 	mov	ar4,@r1
      0005F4 19               [12] 1466 	dec	r1
      0005F5 74 04            [12] 1467 	mov	a,#0x04
      0005F7 2B               [12] 1468 	add	a,r3
      0005F8 FB               [12] 1469 	mov	r3,a
      0005F9 E4               [12] 1470 	clr	a
      0005FA 3C               [12] 1471 	addc	a,r4
      0005FB FC               [12] 1472 	mov	r4,a
      0005FC C0 06            [24] 1473 	push	ar6
      0005FE C0 02            [24] 1474 	push	ar2
      000600 C0 01            [24] 1475 	push	ar1
      000602 C0 00            [24] 1476 	push	ar0
      000604 C0 05            [24] 1477 	push	ar5
      000606 C0 07            [24] 1478 	push	ar7
      000608 C0 03            [24] 1479 	push	ar3
      00060A C0 04            [24] 1480 	push	ar4
      00060C 74r2A            [12] 1481 	mov	a,#___str_3
      00060E C0 E0            [24] 1482 	push	acc
      000610 74s00            [12] 1483 	mov	a,#(___str_3 >> 8)
      000612 C0 E0            [24] 1484 	push	acc
      000614 74 80            [12] 1485 	mov	a,#0x80
      000616 C0 E0            [24] 1486 	push	acc
      000618 12r00r00         [24] 1487 	lcall	_printf
      00061B E5 81            [12] 1488 	mov	a,sp
      00061D 24 F9            [12] 1489 	add	a,#0xf9
      00061F F5 81            [12] 1490 	mov	sp,a
                                   1491 ;	walk.c:171: setOE(OE76_MASK6);
      000621 75 82 40         [24] 1492 	mov	dpl,#0x40
      000624 12r00r19         [24] 1493 	lcall	_setOE
      000627 D0 00            [24] 1494 	pop	ar0
      000629 D0 01            [24] 1495 	pop	ar1
      00062B D0 02            [24] 1496 	pop	ar2
      00062D D0 06            [24] 1497 	pop	ar6
                                   1498 ;	walk.c:173: if (stpop(&cur)) goto next;
      00062F C0 00            [24] 1499 	push	ar0
      000631 E5*00            [12] 1500 	mov	a,_bp
      000633 24 03            [12] 1501 	add	a,#0x03
      000635 F8               [12] 1502 	mov	r0,a
      000636 86 04            [24] 1503 	mov	ar4,@r0
      000638 7D 00            [12] 1504 	mov	r5,#0x00
      00063A 7F 40            [12] 1505 	mov	r7,#0x40
      00063C D0 00            [24] 1506 	pop	ar0
      00063E 8C 82            [24] 1507 	mov	dpl,r4
      000640 8D 83            [24] 1508 	mov	dph,r5
      000642 8F F0            [24] 1509 	mov	b,r7
      000644 C0 06            [24] 1510 	push	ar6
      000646 C0 02            [24] 1511 	push	ar2
      000648 C0 01            [24] 1512 	push	ar1
      00064A C0 00            [24] 1513 	push	ar0
      00064C 12r0ArAF         [24] 1514 	lcall	_stpop
      00064F E5 82            [12] 1515 	mov	a,dpl
      000651 D0 00            [24] 1516 	pop	ar0
      000653 D0 01            [24] 1517 	pop	ar1
      000655 D0 02            [24] 1518 	pop	ar2
      000657 D0 06            [24] 1519 	pop	ar6
      000659 60 03            [24] 1520 	jz	00166$
      00065B 02r03rE8         [24] 1521 	ljmp	00102$
      00065E                       1522 00166$:
                                   1523 ;	walk.c:175: unsetOE(OE76_MASK7 | OE76_MASK6);
      00065E 75 82 C0         [24] 1524 	mov	dpl,#0xc0
      000661 12r00r32         [24] 1525 	lcall	_unsetOE
                                   1526 ;	walk.c:177: return;
                                   1527 ;	walk.c:178: }
      000664 85*00 81         [24] 1528 	mov	sp,_bp
      000667 D0*00            [24] 1529 	pop	_bp
      000669 22               [24] 1530 	ret
                                   1531 ;------------------------------------------------------------
                                   1532 ;Allocation info for local variables in function 'main'
                                   1533 ;------------------------------------------------------------
                                   1534 ;initial                   Allocated to stack - _bp +9
                                   1535 ;N                         Allocated to stack - _bp +5
                                   1536 ;i                         Allocated to stack - _bp +7
                                   1537 ;j                         Allocated to registers r2 r6 
                                   1538 ;sloc0                     Allocated to stack - _bp +1
                                   1539 ;sloc1                     Allocated to stack - _bp +3
                                   1540 ;sloc2                     Allocated to stack - _bp +15
                                   1541 ;------------------------------------------------------------
                                   1542 ;	walk.c:180: void main(void) {
                                   1543 ;	-----------------------------------------
                                   1544 ;	 function main
                                   1545 ;	-----------------------------------------
      00066A                       1546 _main:
      00066A C0*00            [24] 1547 	push	_bp
      00066C E5 81            [12] 1548 	mov	a,sp
      00066E F5*00            [12] 1549 	mov	_bp,a
      000670 24 0C            [12] 1550 	add	a,#0x0c
      000672 F5 81            [12] 1551 	mov	sp,a
                                   1552 ;	walk.c:185: i0 = 1u;
      000674 78r00            [12] 1553 	mov	r0,#_i0
      000676 76 01            [12] 1554 	mov	@r0,#0x01
                                   1555 ;	walk.c:187: P1_7 = 1;
                                   1556 ;	assignBit
      000678 D2 97            [12] 1557 	setb	_P1_7
                                   1558 ;	walk.c:188: IT0 = 1;
                                   1559 ;	assignBit
      00067A D2 88            [12] 1560 	setb	_IT0
                                   1561 ;	walk.c:189: EX0 = 1;
                                   1562 ;	assignBit
      00067C D2 A8            [12] 1563 	setb	_EX0
                                   1564 ;	walk.c:190: EA = 1;
                                   1565 ;	assignBit
      00067E D2 AF            [12] 1566 	setb	_EA
                                   1567 ;	walk.c:192: srand(RND);
      000680 90 80 00         [24] 1568 	mov	dptr,#_RND
      000683 E0               [24] 1569 	movx	a,@dptr
      000684 FE               [12] 1570 	mov	r6,a
      000685 A3               [24] 1571 	inc	dptr
      000686 E0               [24] 1572 	movx	a,@dptr
      000687 FF               [12] 1573 	mov	r7,a
      000688 8E 82            [24] 1574 	mov	dpl,r6
      00068A 8F 83            [24] 1575 	mov	dph,r7
      00068C 12r00r00         [24] 1576 	lcall	_srand
                                   1577 ;	walk.c:193: stinit();
      00068F 12r0Ar45         [24] 1578 	lcall	_stinit
                                   1579 ;	walk.c:195: puts("\033[2J\033[?25l");
      000692 90r00r34         [24] 1580 	mov	dptr,#___str_4
      000695 75 F0 80         [24] 1581 	mov	b,#0x80
      000698 12r00r00         [24] 1582 	lcall	_puts
                                   1583 ;	walk.c:197: while (i0) {
      00069B E5*00            [12] 1584 	mov	a,_bp
      00069D 24 09            [12] 1585 	add	a,#0x09
      00069F F9               [12] 1586 	mov	r1,a
      0006A0 FF               [12] 1587 	mov	r7,a
      0006A1 E5*00            [12] 1588 	mov	a,_bp
      0006A3 24 05            [12] 1589 	add	a,#0x05
      0006A5 F8               [12] 1590 	mov	r0,a
      0006A6 E4               [12] 1591 	clr	a
      0006A7 F6               [12] 1592 	mov	@r0,a
      0006A8 08               [12] 1593 	inc	r0
      0006A9 F6               [12] 1594 	mov	@r0,a
      0006AA                       1595 00108$:
      0006AA 78r00            [12] 1596 	mov	r0,#_i0
      0006AC E6               [12] 1597 	mov	a,@r0
      0006AD 70 03            [24] 1598 	jnz	00182$
      0006AF 02r0Ar31         [24] 1599 	ljmp	00110$
      0006B2                       1600 00182$:
                                   1601 ;	walk.c:198: for (i = 0; i < ROWS; i++)
      0006B2 7B 00            [12] 1602 	mov	r3,#0x00
      0006B4 7C 00            [12] 1603 	mov	r4,#0x00
      0006B6 A8*00            [24] 1604 	mov	r0,_bp
      0006B8 08               [12] 1605 	inc	r0
      0006B9 E4               [12] 1606 	clr	a
      0006BA F6               [12] 1607 	mov	@r0,a
      0006BB 08               [12] 1608 	inc	r0
      0006BC F6               [12] 1609 	mov	@r0,a
                                   1610 ;	walk.c:199: for (j = 0; j < COLS; j++)
      0006BD                       1611 00125$:
      0006BD A8*00            [24] 1612 	mov	r0,_bp
      0006BF 08               [12] 1613 	inc	r0
      0006C0 C0 01            [24] 1614 	push	ar1
      0006C2 E5*00            [12] 1615 	mov	a,_bp
      0006C4 24 03            [12] 1616 	add	a,#0x03
      0006C6 F9               [12] 1617 	mov	r1,a
      0006C7 E6               [12] 1618 	mov	a,@r0
      0006C8 24r00            [12] 1619 	add	a,#_g
      0006CA F7               [12] 1620 	mov	@r1,a
      0006CB 08               [12] 1621 	inc	r0
      0006CC E6               [12] 1622 	mov	a,@r0
      0006CD 34s00            [12] 1623 	addc	a,#(_g >> 8)
      0006CF 09               [12] 1624 	inc	r1
      0006D0 F7               [12] 1625 	mov	@r1,a
      0006D1 D0 01            [24] 1626 	pop	ar1
      0006D3 7A 00            [12] 1627 	mov	r2,#0x00
      0006D5 7E 00            [12] 1628 	mov	r6,#0x00
      0006D7                       1629 00112$:
                                   1630 ;	walk.c:200: g[i][j] = 0x55u;
      0006D7 E5*00            [12] 1631 	mov	a,_bp
      0006D9 24 03            [12] 1632 	add	a,#0x03
      0006DB F8               [12] 1633 	mov	r0,a
      0006DC EA               [12] 1634 	mov	a,r2
      0006DD 26               [12] 1635 	add	a,@r0
      0006DE F5 82            [12] 1636 	mov	dpl,a
      0006E0 EE               [12] 1637 	mov	a,r6
      0006E1 08               [12] 1638 	inc	r0
      0006E2 36               [12] 1639 	addc	a,@r0
      0006E3 F5 83            [12] 1640 	mov	dph,a
      0006E5 74 55            [12] 1641 	mov	a,#0x55
      0006E7 F0               [24] 1642 	movx	@dptr,a
                                   1643 ;	walk.c:199: for (j = 0; j < COLS; j++)
      0006E8 0A               [12] 1644 	inc	r2
      0006E9 BA 00 01         [24] 1645 	cjne	r2,#0x00,00183$
      0006EC 0E               [12] 1646 	inc	r6
      0006ED                       1647 00183$:
      0006ED C3               [12] 1648 	clr	c
      0006EE EA               [12] 1649 	mov	a,r2
      0006EF 94 C9            [12] 1650 	subb	a,#0xc9
      0006F1 EE               [12] 1651 	mov	a,r6
      0006F2 64 80            [12] 1652 	xrl	a,#0x80
      0006F4 94 80            [12] 1653 	subb	a,#0x80
      0006F6 40 DF            [24] 1654 	jc	00112$
                                   1655 ;	walk.c:198: for (i = 0; i < ROWS; i++)
      0006F8 A8*00            [24] 1656 	mov	r0,_bp
      0006FA 08               [12] 1657 	inc	r0
      0006FB 74 C9            [12] 1658 	mov	a,#0xc9
      0006FD 26               [12] 1659 	add	a,@r0
      0006FE F6               [12] 1660 	mov	@r0,a
      0006FF E4               [12] 1661 	clr	a
      000700 08               [12] 1662 	inc	r0
      000701 36               [12] 1663 	addc	a,@r0
      000702 F6               [12] 1664 	mov	@r0,a
      000703 0B               [12] 1665 	inc	r3
      000704 BB 00 01         [24] 1666 	cjne	r3,#0x00,00185$
      000707 0C               [12] 1667 	inc	r4
      000708                       1668 00185$:
      000708 C3               [12] 1669 	clr	c
      000709 EB               [12] 1670 	mov	a,r3
      00070A 94 30            [12] 1671 	subb	a,#0x30
      00070C EC               [12] 1672 	mov	a,r4
      00070D 64 80            [12] 1673 	xrl	a,#0x80
      00070F 94 80            [12] 1674 	subb	a,#0x80
      000711 40 AA            [24] 1675 	jc	00125$
                                   1676 ;	walk.c:202: initial.r = rand() % ROWS;
      000713 E5*00            [12] 1677 	mov	a,_bp
      000715 24 09            [12] 1678 	add	a,#0x09
      000717 F8               [12] 1679 	mov	r0,a
      000718 C0 07            [24] 1680 	push	ar7
      00071A C0 01            [24] 1681 	push	ar1
      00071C C0 00            [24] 1682 	push	ar0
      00071E 12r00r00         [24] 1683 	lcall	_rand
      000721 AD 82            [24] 1684 	mov	r5,dpl
      000723 AE 83            [24] 1685 	mov	r6,dph
      000725 74 30            [12] 1686 	mov	a,#0x30
      000727 C0 E0            [24] 1687 	push	acc
      000729 E4               [12] 1688 	clr	a
      00072A C0 E0            [24] 1689 	push	acc
      00072C 8D 82            [24] 1690 	mov	dpl,r5
      00072E 8E 83            [24] 1691 	mov	dph,r6
      000730 12r00r00         [24] 1692 	lcall	__modsint
      000733 AD 82            [24] 1693 	mov	r5,dpl
      000735 AE 83            [24] 1694 	mov	r6,dph
      000737 15 81            [12] 1695 	dec	sp
      000739 15 81            [12] 1696 	dec	sp
      00073B D0 00            [24] 1697 	pop	ar0
      00073D D0 01            [24] 1698 	pop	ar1
      00073F A6 05            [24] 1699 	mov	@r0,ar5
      000741 08               [12] 1700 	inc	r0
      000742 A6 06            [24] 1701 	mov	@r0,ar6
      000744 18               [12] 1702 	dec	r0
                                   1703 ;	walk.c:203: initial.c = rand() % COLS;
      000745 74 02            [12] 1704 	mov	a,#0x02
      000747 29               [12] 1705 	add	a,r1
      000748 F8               [12] 1706 	mov	r0,a
      000749 C0 01            [24] 1707 	push	ar1
      00074B C0 00            [24] 1708 	push	ar0
      00074D 12r00r00         [24] 1709 	lcall	_rand
      000750 AD 82            [24] 1710 	mov	r5,dpl
      000752 AE 83            [24] 1711 	mov	r6,dph
      000754 74 C9            [12] 1712 	mov	a,#0xc9
      000756 C0 E0            [24] 1713 	push	acc
      000758 E4               [12] 1714 	clr	a
      000759 C0 E0            [24] 1715 	push	acc
      00075B 8D 82            [24] 1716 	mov	dpl,r5
      00075D 8E 83            [24] 1717 	mov	dph,r6
      00075F 12r00r00         [24] 1718 	lcall	__modsint
      000762 AD 82            [24] 1719 	mov	r5,dpl
      000764 AE 83            [24] 1720 	mov	r6,dph
      000766 15 81            [12] 1721 	dec	sp
      000768 15 81            [12] 1722 	dec	sp
      00076A D0 00            [24] 1723 	pop	ar0
      00076C A6 05            [24] 1724 	mov	@r0,ar5
      00076E 08               [12] 1725 	inc	r0
      00076F A6 06            [24] 1726 	mov	@r0,ar6
      000771 18               [12] 1727 	dec	r0
                                   1728 ;	walk.c:205: puts("\033[2J\033[?25l");
      000772 90r00r34         [24] 1729 	mov	dptr,#___str_4
      000775 75 F0 80         [24] 1730 	mov	b,#0x80
      000778 C0 00            [24] 1731 	push	ar0
      00077A 12r00r00         [24] 1732 	lcall	_puts
      00077D D0 00            [24] 1733 	pop	ar0
      00077F D0 01            [24] 1734 	pop	ar1
                                   1735 ;	walk.c:206: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      000781 86 05            [24] 1736 	mov	ar5,@r0
      000783 08               [12] 1737 	inc	r0
      000784 86 06            [24] 1738 	mov	ar6,@r0
      000786 18               [12] 1739 	dec	r0
      000787 87 03            [24] 1740 	mov	ar3,@r1
      000789 09               [12] 1741 	inc	r1
      00078A 87 04            [24] 1742 	mov	ar4,@r1
      00078C 19               [12] 1743 	dec	r1
      00078D C0 01            [24] 1744 	push	ar1
      00078F C0 05            [24] 1745 	push	ar5
      000791 C0 06            [24] 1746 	push	ar6
      000793 C0 03            [24] 1747 	push	ar3
      000795 C0 04            [24] 1748 	push	ar4
      000797 E5*00            [12] 1749 	mov	a,_bp
      000799 24 05            [12] 1750 	add	a,#0x05
      00079B F8               [12] 1751 	mov	r0,a
      00079C E6               [12] 1752 	mov	a,@r0
      00079D C0 E0            [24] 1753 	push	acc
      00079F 08               [12] 1754 	inc	r0
      0007A0 E6               [12] 1755 	mov	a,@r0
      0007A1 C0 E0            [24] 1756 	push	acc
      0007A3 74r3F            [12] 1757 	mov	a,#___str_5
      0007A5 C0 E0            [24] 1758 	push	acc
      0007A7 74s00            [12] 1759 	mov	a,#(___str_5 >> 8)
      0007A9 C0 E0            [24] 1760 	push	acc
      0007AB 74 80            [12] 1761 	mov	a,#0x80
      0007AD C0 E0            [24] 1762 	push	acc
      0007AF 12r00r00         [24] 1763 	lcall	_printf
      0007B2 E5 81            [12] 1764 	mov	a,sp
      0007B4 24 F7            [12] 1765 	add	a,#0xf7
      0007B6 F5 81            [12] 1766 	mov	sp,a
      0007B8 D0 01            [24] 1767 	pop	ar1
      0007BA D0 07            [24] 1768 	pop	ar7
                                   1769 ;	walk.c:208: for (i = 0; i < REG; i++) {
      0007BC E5*00            [12] 1770 	mov	a,_bp
      0007BE 24 07            [12] 1771 	add	a,#0x07
      0007C0 F8               [12] 1772 	mov	r0,a
      0007C1 E4               [12] 1773 	clr	a
      0007C2 F6               [12] 1774 	mov	@r0,a
      0007C3 08               [12] 1775 	inc	r0
      0007C4 F6               [12] 1776 	mov	@r0,a
      0007C5                       1777 00116$:
                                   1778 ;	walk.c:209: neigh[i].r = neigh[REG + i].r * (1 + rand() % 8);
      0007C5 C0 07            [24] 1779 	push	ar7
      0007C7 E5*00            [12] 1780 	mov	a,_bp
      0007C9 24 07            [12] 1781 	add	a,#0x07
      0007CB F8               [12] 1782 	mov	r0,a
      0007CC E6               [12] 1783 	mov	a,@r0
      0007CD 25 E0            [12] 1784 	add	a,acc
      0007CF FB               [12] 1785 	mov	r3,a
      0007D0 08               [12] 1786 	inc	r0
      0007D1 E6               [12] 1787 	mov	a,@r0
      0007D2 33               [12] 1788 	rlc	a
      0007D3 FC               [12] 1789 	mov	r4,a
      0007D4 EB               [12] 1790 	mov	a,r3
      0007D5 2B               [12] 1791 	add	a,r3
      0007D6 FB               [12] 1792 	mov	r3,a
      0007D7 EC               [12] 1793 	mov	a,r4
      0007D8 33               [12] 1794 	rlc	a
      0007D9 FC               [12] 1795 	mov	r4,a
      0007DA E5*00            [12] 1796 	mov	a,_bp
      0007DC 24 03            [12] 1797 	add	a,#0x03
      0007DE F8               [12] 1798 	mov	r0,a
      0007DF EB               [12] 1799 	mov	a,r3
      0007E0 24r00            [12] 1800 	add	a,#_neigh
      0007E2 F6               [12] 1801 	mov	@r0,a
      0007E3 EC               [12] 1802 	mov	a,r4
      0007E4 34s00            [12] 1803 	addc	a,#(_neigh >> 8)
      0007E6 08               [12] 1804 	inc	r0
      0007E7 F6               [12] 1805 	mov	@r0,a
      0007E8 E5*00            [12] 1806 	mov	a,_bp
      0007EA 24 07            [12] 1807 	add	a,#0x07
      0007EC F8               [12] 1808 	mov	r0,a
      0007ED 86 06            [24] 1809 	mov	ar6,@r0
      0007EF 74 08            [12] 1810 	mov	a,#0x08
      0007F1 2E               [12] 1811 	add	a,r6
      0007F2 FE               [12] 1812 	mov	r6,a
      0007F3 C2 D5            [12] 1813 	clr	F0
      0007F5 75 F0 04         [24] 1814 	mov	b,#0x04
      0007F8 EE               [12] 1815 	mov	a,r6
      0007F9 30 E7 04         [24] 1816 	jnb	acc.7,00187$
      0007FC B2 D5            [12] 1817 	cpl	F0
      0007FE F4               [12] 1818 	cpl	a
      0007FF 04               [12] 1819 	inc	a
      000800                       1820 00187$:
      000800 A4               [48] 1821 	mul	ab
      000801 30 D5 0A         [24] 1822 	jnb	F0,00188$
      000804 F4               [12] 1823 	cpl	a
      000805 24 01            [12] 1824 	add	a,#0x01
      000807 C5 F0            [12] 1825 	xch	a,b
      000809 F4               [12] 1826 	cpl	a
      00080A 34 00            [12] 1827 	addc	a,#0x00
      00080C C5 F0            [12] 1828 	xch	a,b
      00080E                       1829 00188$:
      00080E FE               [12] 1830 	mov	r6,a
      00080F AD F0            [24] 1831 	mov	r5,b
      000811 24r00            [12] 1832 	add	a,#_neigh
      000813 F5 82            [12] 1833 	mov	dpl,a
      000815 ED               [12] 1834 	mov	a,r5
      000816 34s00            [12] 1835 	addc	a,#(_neigh >> 8)
      000818 F5 83            [12] 1836 	mov	dph,a
      00081A A8*00            [24] 1837 	mov	r0,_bp
      00081C 08               [12] 1838 	inc	r0
      00081D E0               [24] 1839 	movx	a,@dptr
      00081E F6               [12] 1840 	mov	@r0,a
      00081F A3               [24] 1841 	inc	dptr
      000820 E0               [24] 1842 	movx	a,@dptr
      000821 08               [12] 1843 	inc	r0
      000822 F6               [12] 1844 	mov	@r0,a
      000823 C0 06            [24] 1845 	push	ar6
      000825 C0 05            [24] 1846 	push	ar5
      000827 C0 04            [24] 1847 	push	ar4
      000829 C0 03            [24] 1848 	push	ar3
      00082B C0 01            [24] 1849 	push	ar1
      00082D 12r00r00         [24] 1850 	lcall	_rand
      000830 AA 82            [24] 1851 	mov	r2,dpl
      000832 AF 83            [24] 1852 	mov	r7,dph
      000834 74 08            [12] 1853 	mov	a,#0x08
      000836 C0 E0            [24] 1854 	push	acc
      000838 E4               [12] 1855 	clr	a
      000839 C0 E0            [24] 1856 	push	acc
      00083B 8A 82            [24] 1857 	mov	dpl,r2
      00083D 8F 83            [24] 1858 	mov	dph,r7
      00083F 12r00r00         [24] 1859 	lcall	__modsint
      000842 AA 82            [24] 1860 	mov	r2,dpl
      000844 AF 83            [24] 1861 	mov	r7,dph
      000846 15 81            [12] 1862 	dec	sp
      000848 15 81            [12] 1863 	dec	sp
      00084A D0 01            [24] 1864 	pop	ar1
      00084C D0 03            [24] 1865 	pop	ar3
      00084E D0 04            [24] 1866 	pop	ar4
      000850 D0 05            [24] 1867 	pop	ar5
      000852 D0 06            [24] 1868 	pop	ar6
      000854 0A               [12] 1869 	inc	r2
      000855 BA 00 01         [24] 1870 	cjne	r2,#0x00,00189$
      000858 0F               [12] 1871 	inc	r7
      000859                       1872 00189$:
      000859 C0 06            [24] 1873 	push	ar6
      00085B C0 05            [24] 1874 	push	ar5
      00085D C0 04            [24] 1875 	push	ar4
      00085F C0 03            [24] 1876 	push	ar3
      000861 C0 01            [24] 1877 	push	ar1
      000863 C0 02            [24] 1878 	push	ar2
      000865 C0 07            [24] 1879 	push	ar7
      000867 A8*00            [24] 1880 	mov	r0,_bp
      000869 08               [12] 1881 	inc	r0
      00086A 86 82            [24] 1882 	mov	dpl,@r0
      00086C 08               [12] 1883 	inc	r0
      00086D 86 83            [24] 1884 	mov	dph,@r0
      00086F 12r00r00         [24] 1885 	lcall	__mulint
      000872 AA 82            [24] 1886 	mov	r2,dpl
      000874 AF 83            [24] 1887 	mov	r7,dph
      000876 15 81            [12] 1888 	dec	sp
      000878 15 81            [12] 1889 	dec	sp
      00087A D0 01            [24] 1890 	pop	ar1
      00087C D0 03            [24] 1891 	pop	ar3
      00087E D0 04            [24] 1892 	pop	ar4
      000880 D0 05            [24] 1893 	pop	ar5
      000882 D0 06            [24] 1894 	pop	ar6
      000884 E5*00            [12] 1895 	mov	a,_bp
      000886 24 03            [12] 1896 	add	a,#0x03
      000888 F8               [12] 1897 	mov	r0,a
      000889 86 82            [24] 1898 	mov	dpl,@r0
      00088B 08               [12] 1899 	inc	r0
      00088C 86 83            [24] 1900 	mov	dph,@r0
      00088E EA               [12] 1901 	mov	a,r2
      00088F F0               [24] 1902 	movx	@dptr,a
      000890 EF               [12] 1903 	mov	a,r7
      000891 A3               [24] 1904 	inc	dptr
      000892 F0               [24] 1905 	movx	@dptr,a
                                   1906 ;	walk.c:210: neigh[i].c = neigh[REG + i].c * (1 + rand() % 8);
      000893 EB               [12] 1907 	mov	a,r3
      000894 24r00            [12] 1908 	add	a,#_neigh
      000896 FB               [12] 1909 	mov	r3,a
      000897 EC               [12] 1910 	mov	a,r4
      000898 34s00            [12] 1911 	addc	a,#(_neigh >> 8)
      00089A FC               [12] 1912 	mov	r4,a
      00089B 74 02            [12] 1913 	mov	a,#0x02
      00089D 2B               [12] 1914 	add	a,r3
      00089E FA               [12] 1915 	mov	r2,a
      00089F E4               [12] 1916 	clr	a
      0008A0 3C               [12] 1917 	addc	a,r4
      0008A1 FF               [12] 1918 	mov	r7,a
      0008A2 EE               [12] 1919 	mov	a,r6
      0008A3 24r00            [12] 1920 	add	a,#_neigh
      0008A5 FE               [12] 1921 	mov	r6,a
      0008A6 ED               [12] 1922 	mov	a,r5
      0008A7 34s00            [12] 1923 	addc	a,#(_neigh >> 8)
      0008A9 FD               [12] 1924 	mov	r5,a
      0008AA 8E 82            [24] 1925 	mov	dpl,r6
      0008AC 8D 83            [24] 1926 	mov	dph,r5
      0008AE A3               [24] 1927 	inc	dptr
      0008AF A3               [24] 1928 	inc	dptr
      0008B0 E5*00            [12] 1929 	mov	a,_bp
      0008B2 24 03            [12] 1930 	add	a,#0x03
      0008B4 F8               [12] 1931 	mov	r0,a
      0008B5 E0               [24] 1932 	movx	a,@dptr
      0008B6 F6               [12] 1933 	mov	@r0,a
      0008B7 A3               [24] 1934 	inc	dptr
      0008B8 E0               [24] 1935 	movx	a,@dptr
      0008B9 08               [12] 1936 	inc	r0
      0008BA F6               [12] 1937 	mov	@r0,a
      0008BB C0 07            [24] 1938 	push	ar7
      0008BD C0 04            [24] 1939 	push	ar4
      0008BF C0 03            [24] 1940 	push	ar3
      0008C1 C0 02            [24] 1941 	push	ar2
      0008C3 C0 01            [24] 1942 	push	ar1
      0008C5 12r00r00         [24] 1943 	lcall	_rand
      0008C8 AD 82            [24] 1944 	mov	r5,dpl
      0008CA AE 83            [24] 1945 	mov	r6,dph
      0008CC 74 08            [12] 1946 	mov	a,#0x08
      0008CE C0 E0            [24] 1947 	push	acc
      0008D0 E4               [12] 1948 	clr	a
      0008D1 C0 E0            [24] 1949 	push	acc
      0008D3 8D 82            [24] 1950 	mov	dpl,r5
      0008D5 8E 83            [24] 1951 	mov	dph,r6
      0008D7 12r00r00         [24] 1952 	lcall	__modsint
      0008DA AD 82            [24] 1953 	mov	r5,dpl
      0008DC AE 83            [24] 1954 	mov	r6,dph
      0008DE 15 81            [12] 1955 	dec	sp
      0008E0 15 81            [12] 1956 	dec	sp
      0008E2 D0 01            [24] 1957 	pop	ar1
      0008E4 D0 02            [24] 1958 	pop	ar2
      0008E6 D0 03            [24] 1959 	pop	ar3
      0008E8 D0 04            [24] 1960 	pop	ar4
      0008EA D0 07            [24] 1961 	pop	ar7
      0008EC 0D               [12] 1962 	inc	r5
      0008ED BD 00 01         [24] 1963 	cjne	r5,#0x00,00190$
      0008F0 0E               [12] 1964 	inc	r6
      0008F1                       1965 00190$:
      0008F1 C0 07            [24] 1966 	push	ar7
      0008F3 C0 04            [24] 1967 	push	ar4
      0008F5 C0 03            [24] 1968 	push	ar3
      0008F7 C0 02            [24] 1969 	push	ar2
      0008F9 C0 01            [24] 1970 	push	ar1
      0008FB C0 05            [24] 1971 	push	ar5
      0008FD C0 06            [24] 1972 	push	ar6
      0008FF E5*00            [12] 1973 	mov	a,_bp
      000901 24 03            [12] 1974 	add	a,#0x03
      000903 F8               [12] 1975 	mov	r0,a
      000904 86 82            [24] 1976 	mov	dpl,@r0
      000906 08               [12] 1977 	inc	r0
      000907 86 83            [24] 1978 	mov	dph,@r0
      000909 12r00r00         [24] 1979 	lcall	__mulint
      00090C AD 82            [24] 1980 	mov	r5,dpl
      00090E AE 83            [24] 1981 	mov	r6,dph
      000910 15 81            [12] 1982 	dec	sp
      000912 15 81            [12] 1983 	dec	sp
      000914 D0 01            [24] 1984 	pop	ar1
      000916 D0 02            [24] 1985 	pop	ar2
      000918 D0 03            [24] 1986 	pop	ar3
      00091A D0 04            [24] 1987 	pop	ar4
      00091C D0 07            [24] 1988 	pop	ar7
      00091E 8A 82            [24] 1989 	mov	dpl,r2
      000920 8F 83            [24] 1990 	mov	dph,r7
      000922 ED               [12] 1991 	mov	a,r5
      000923 F0               [24] 1992 	movx	@dptr,a
      000924 EE               [12] 1993 	mov	a,r6
      000925 A3               [24] 1994 	inc	dptr
      000926 F0               [24] 1995 	movx	@dptr,a
                                   1996 ;	walk.c:211: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000927 8B 82            [24] 1997 	mov	dpl,r3
      000929 8C 83            [24] 1998 	mov	dph,r4
      00092B E0               [24] 1999 	movx	a,@dptr
      00092C FB               [12] 2000 	mov	r3,a
      00092D A3               [24] 2001 	inc	dptr
      00092E E0               [24] 2002 	movx	a,@dptr
      00092F FC               [12] 2003 	mov	r4,a
      000930 C0 07            [24] 2004 	push	ar7
      000932 C0 01            [24] 2005 	push	ar1
      000934 C0 05            [24] 2006 	push	ar5
      000936 C0 06            [24] 2007 	push	ar6
      000938 C0 03            [24] 2008 	push	ar3
      00093A C0 04            [24] 2009 	push	ar4
      00093C 74r52            [12] 2010 	mov	a,#___str_6
      00093E C0 E0            [24] 2011 	push	acc
      000940 74s00            [12] 2012 	mov	a,#(___str_6 >> 8)
      000942 C0 E0            [24] 2013 	push	acc
      000944 74 80            [12] 2014 	mov	a,#0x80
      000946 C0 E0            [24] 2015 	push	acc
      000948 12r00r00         [24] 2016 	lcall	_printf
      00094B E5 81            [12] 2017 	mov	a,sp
      00094D 24 F9            [12] 2018 	add	a,#0xf9
      00094F F5 81            [12] 2019 	mov	sp,a
      000951 D0 01            [24] 2020 	pop	ar1
      000953 D0 07            [24] 2021 	pop	ar7
                                   2022 ;	walk.c:208: for (i = 0; i < REG; i++) {
      000955 E5*00            [12] 2023 	mov	a,_bp
      000957 24 07            [12] 2024 	add	a,#0x07
      000959 F8               [12] 2025 	mov	r0,a
      00095A 06               [12] 2026 	inc	@r0
      00095B B6 00 02         [24] 2027 	cjne	@r0,#0x00,00191$
      00095E 08               [12] 2028 	inc	r0
      00095F 06               [12] 2029 	inc	@r0
      000960                       2030 00191$:
      000960 E5*00            [12] 2031 	mov	a,_bp
      000962 24 07            [12] 2032 	add	a,#0x07
      000964 F8               [12] 2033 	mov	r0,a
      000965 86 05            [24] 2034 	mov	ar5,@r0
      000967 08               [12] 2035 	inc	r0
      000968 86 06            [24] 2036 	mov	ar6,@r0
      00096A C3               [12] 2037 	clr	c
      00096B ED               [12] 2038 	mov	a,r5
      00096C 94 08            [12] 2039 	subb	a,#0x08
      00096E EE               [12] 2040 	mov	a,r6
      00096F 94 00            [12] 2041 	subb	a,#0x00
      000971 D0 07            [24] 2042 	pop	ar7
      000973 50 03            [24] 2043 	jnc	00192$
      000975 02r07rC5         [24] 2044 	ljmp	00116$
      000978                       2045 00192$:
                                   2046 ;	walk.c:214: OE76 = OE76_0;
      000978 78r01            [12] 2047 	mov	r0,#_OE76
      00097A 76 3F            [12] 2048 	mov	@r0,#0x3f
                                   2049 ;	walk.c:215: setOE(OE76_NC);
      00097C 75 82 00         [24] 2050 	mov	dpl,#0x00
      00097F C0 07            [24] 2051 	push	ar7
      000981 C0 01            [24] 2052 	push	ar1
      000983 12r00r19         [24] 2053 	lcall	_setOE
      000986 D0 01            [24] 2054 	pop	ar1
      000988 D0 07            [24] 2055 	pop	ar7
                                   2056 ;	walk.c:217: walk(&initial);
      00098A 8F 04            [24] 2057 	mov	ar4,r7
      00098C 7D 00            [12] 2058 	mov	r5,#0x00
      00098E 7E 40            [12] 2059 	mov	r6,#0x40
      000990 8C 82            [24] 2060 	mov	dpl,r4
      000992 8D 83            [24] 2061 	mov	dph,r5
      000994 8E F0            [24] 2062 	mov	b,r6
      000996 C0 07            [24] 2063 	push	ar7
      000998 C0 01            [24] 2064 	push	ar1
      00099A 12r02rF2         [24] 2065 	lcall	_walk
      00099D D0 01            [24] 2066 	pop	ar1
      00099F D0 07            [24] 2067 	pop	ar7
                                   2068 ;	walk.c:219: for (i = 0; i < ROWS; i++)
      0009A1 E5*00            [12] 2069 	mov	a,_bp
      0009A3 24 07            [12] 2070 	add	a,#0x07
      0009A5 F8               [12] 2071 	mov	r0,a
      0009A6 E4               [12] 2072 	clr	a
      0009A7 F6               [12] 2073 	mov	@r0,a
      0009A8 08               [12] 2074 	inc	r0
      0009A9 F6               [12] 2075 	mov	@r0,a
      0009AA 7B 00            [12] 2076 	mov	r3,#0x00
      0009AC 7C 00            [12] 2077 	mov	r4,#0x00
                                   2078 ;	walk.c:220: for (j = 0; j < COLS; j++)
      0009AE                       2079 00132$:
      0009AE E5*00            [12] 2080 	mov	a,_bp
      0009B0 24 03            [12] 2081 	add	a,#0x03
      0009B2 F8               [12] 2082 	mov	r0,a
      0009B3 EB               [12] 2083 	mov	a,r3
      0009B4 24r00            [12] 2084 	add	a,#_g
      0009B6 F6               [12] 2085 	mov	@r0,a
      0009B7 EC               [12] 2086 	mov	a,r4
      0009B8 34s00            [12] 2087 	addc	a,#(_g >> 8)
      0009BA 08               [12] 2088 	inc	r0
      0009BB F6               [12] 2089 	mov	@r0,a
      0009BC 7A 00            [12] 2090 	mov	r2,#0x00
      0009BE 7E 00            [12] 2091 	mov	r6,#0x00
      0009C0                       2092 00118$:
                                   2093 ;	walk.c:221: if (g[i][j] != 0xaau) bang();
      0009C0 E5*00            [12] 2094 	mov	a,_bp
      0009C2 24 03            [12] 2095 	add	a,#0x03
      0009C4 F8               [12] 2096 	mov	r0,a
      0009C5 EA               [12] 2097 	mov	a,r2
      0009C6 26               [12] 2098 	add	a,@r0
      0009C7 F5 82            [12] 2099 	mov	dpl,a
      0009C9 EE               [12] 2100 	mov	a,r6
      0009CA 08               [12] 2101 	inc	r0
      0009CB 36               [12] 2102 	addc	a,@r0
      0009CC F5 83            [12] 2103 	mov	dph,a
      0009CE E0               [24] 2104 	movx	a,@dptr
      0009CF FD               [12] 2105 	mov	r5,a
      0009D0 BD AA 02         [24] 2106 	cjne	r5,#0xaa,00193$
      0009D3 80 1B            [24] 2107 	sjmp	00119$
      0009D5                       2108 00193$:
      0009D5 C0 07            [24] 2109 	push	ar7
      0009D7 C0 06            [24] 2110 	push	ar6
      0009D9 C0 04            [24] 2111 	push	ar4
      0009DB C0 03            [24] 2112 	push	ar3
      0009DD C0 02            [24] 2113 	push	ar2
      0009DF C0 01            [24] 2114 	push	ar1
      0009E1 12r00r0C         [24] 2115 	lcall	_bang
      0009E4 D0 01            [24] 2116 	pop	ar1
      0009E6 D0 02            [24] 2117 	pop	ar2
      0009E8 D0 03            [24] 2118 	pop	ar3
      0009EA D0 04            [24] 2119 	pop	ar4
      0009EC D0 06            [24] 2120 	pop	ar6
      0009EE D0 07            [24] 2121 	pop	ar7
      0009F0                       2122 00119$:
                                   2123 ;	walk.c:220: for (j = 0; j < COLS; j++)
      0009F0 0A               [12] 2124 	inc	r2
      0009F1 BA 00 01         [24] 2125 	cjne	r2,#0x00,00194$
      0009F4 0E               [12] 2126 	inc	r6
      0009F5                       2127 00194$:
      0009F5 C3               [12] 2128 	clr	c
      0009F6 EA               [12] 2129 	mov	a,r2
      0009F7 94 C9            [12] 2130 	subb	a,#0xc9
      0009F9 EE               [12] 2131 	mov	a,r6
      0009FA 64 80            [12] 2132 	xrl	a,#0x80
      0009FC 94 80            [12] 2133 	subb	a,#0x80
      0009FE 40 C0            [24] 2134 	jc	00118$
                                   2135 ;	walk.c:219: for (i = 0; i < ROWS; i++)
      000A00 74 C9            [12] 2136 	mov	a,#0xc9
      000A02 2B               [12] 2137 	add	a,r3
      000A03 FB               [12] 2138 	mov	r3,a
      000A04 E4               [12] 2139 	clr	a
      000A05 3C               [12] 2140 	addc	a,r4
      000A06 FC               [12] 2141 	mov	r4,a
      000A07 E5*00            [12] 2142 	mov	a,_bp
      000A09 24 07            [12] 2143 	add	a,#0x07
      000A0B F8               [12] 2144 	mov	r0,a
      000A0C 06               [12] 2145 	inc	@r0
      000A0D B6 00 02         [24] 2146 	cjne	@r0,#0x00,00196$
      000A10 08               [12] 2147 	inc	r0
      000A11 06               [12] 2148 	inc	@r0
      000A12                       2149 00196$:
      000A12 E5*00            [12] 2150 	mov	a,_bp
      000A14 24 07            [12] 2151 	add	a,#0x07
      000A16 F8               [12] 2152 	mov	r0,a
      000A17 C3               [12] 2153 	clr	c
      000A18 E6               [12] 2154 	mov	a,@r0
      000A19 94 30            [12] 2155 	subb	a,#0x30
      000A1B 08               [12] 2156 	inc	r0
      000A1C E6               [12] 2157 	mov	a,@r0
      000A1D 64 80            [12] 2158 	xrl	a,#0x80
      000A1F 94 80            [12] 2159 	subb	a,#0x80
      000A21 40 8B            [24] 2160 	jc	00132$
                                   2161 ;	walk.c:223: N++;
      000A23 E5*00            [12] 2162 	mov	a,_bp
      000A25 24 05            [12] 2163 	add	a,#0x05
      000A27 F8               [12] 2164 	mov	r0,a
      000A28 06               [12] 2165 	inc	@r0
      000A29 B6 00 02         [24] 2166 	cjne	@r0,#0x00,00198$
      000A2C 08               [12] 2167 	inc	r0
      000A2D 06               [12] 2168 	inc	@r0
      000A2E                       2169 00198$:
      000A2E 02r06rAA         [24] 2170 	ljmp	00108$
      000A31                       2171 00110$:
                                   2172 ;	walk.c:226: EA = 0;
                                   2173 ;	assignBit
      000A31 C2 AF            [12] 2174 	clr	_EA
                                   2175 ;	walk.c:228: puts("\033[2J\033[?25h");
      000A33 90r00r5B         [24] 2176 	mov	dptr,#___str_7
      000A36 75 F0 80         [24] 2177 	mov	b,#0x80
      000A39 12r00r00         [24] 2178 	lcall	_puts
                                   2179 ;	walk.c:17: PCON |= 2;
      000A3C 43 87 02         [24] 2180 	orl	_PCON,#0x02
                                   2181 ;	walk.c:232: return;
                                   2182 ;	walk.c:233: }
      000A3F 85*00 81         [24] 2183 	mov	sp,_bp
      000A42 D0*00            [24] 2184 	pop	_bp
      000A44 22               [24] 2185 	ret
                                   2186 ;------------------------------------------------------------
                                   2187 ;Allocation info for local variables in function 'stinit'
                                   2188 ;------------------------------------------------------------
                                   2189 ;	walk.c:235: static void stinit(void) {
                                   2190 ;	-----------------------------------------
                                   2191 ;	 function stinit
                                   2192 ;	-----------------------------------------
      000A45                       2193 _stinit:
                                   2194 ;	walk.c:236: sp = -1;
      000A45 90rBCr70         [24] 2195 	mov	dptr,#_sp
      000A48 74 FF            [12] 2196 	mov	a,#0xff
      000A4A F0               [24] 2197 	movx	@dptr,a
      000A4B A3               [24] 2198 	inc	dptr
      000A4C F0               [24] 2199 	movx	@dptr,a
                                   2200 ;	walk.c:237: return;
                                   2201 ;	walk.c:238: }
      000A4D 22               [24] 2202 	ret
                                   2203 ;------------------------------------------------------------
                                   2204 ;Allocation info for local variables in function 'stpush'
                                   2205 ;------------------------------------------------------------
                                   2206 ;t                         Allocated to registers r5 r6 r7 
                                   2207 ;------------------------------------------------------------
                                   2208 ;	walk.c:240: static uint8_t stpush(struct node *t) {
                                   2209 ;	-----------------------------------------
                                   2210 ;	 function stpush
                                   2211 ;	-----------------------------------------
      000A4E                       2212 _stpush:
      000A4E AD 82            [24] 2213 	mov	r5,dpl
      000A50 AE 83            [24] 2214 	mov	r6,dph
      000A52 AF F0            [24] 2215 	mov	r7,b
                                   2216 ;	walk.c:241: if (sp == (SMAX - 1)) return 0u;
      000A54 90rBCr70         [24] 2217 	mov	dptr,#_sp
      000A57 E0               [24] 2218 	movx	a,@dptr
      000A58 FB               [12] 2219 	mov	r3,a
      000A59 A3               [24] 2220 	inc	dptr
      000A5A E0               [24] 2221 	movx	a,@dptr
      000A5B FC               [12] 2222 	mov	r4,a
      000A5C BB AF 07         [24] 2223 	cjne	r3,#0xaf,00102$
      000A5F BC 25 04         [24] 2224 	cjne	r4,#0x25,00102$
      000A62 75 82 00         [24] 2225 	mov	dpl,#0x00
      000A65 22               [24] 2226 	ret
      000A66                       2227 00102$:
                                   2228 ;	walk.c:242: sp++;
      000A66 90rBCr70         [24] 2229 	mov	dptr,#_sp
      000A69 74 01            [12] 2230 	mov	a,#0x01
      000A6B 2B               [12] 2231 	add	a,r3
      000A6C F0               [24] 2232 	movx	@dptr,a
      000A6D E4               [12] 2233 	clr	a
      000A6E 3C               [12] 2234 	addc	a,r4
      000A6F A3               [24] 2235 	inc	dptr
      000A70 F0               [24] 2236 	movx	@dptr,a
                                   2237 ;	walk.c:243: stack[sp] = *t;
      000A71 90rBCr70         [24] 2238 	mov	dptr,#_sp
      000A74 E0               [24] 2239 	movx	a,@dptr
      000A75 FB               [12] 2240 	mov	r3,a
      000A76 A3               [24] 2241 	inc	dptr
      000A77 E0               [24] 2242 	movx	a,@dptr
      000A78 FC               [12] 2243 	mov	r4,a
      000A79 EB               [12] 2244 	mov	a,r3
      000A7A 2B               [12] 2245 	add	a,r3
      000A7B FB               [12] 2246 	mov	r3,a
      000A7C EC               [12] 2247 	mov	a,r4
      000A7D 33               [12] 2248 	rlc	a
      000A7E FC               [12] 2249 	mov	r4,a
      000A7F EB               [12] 2250 	mov	a,r3
      000A80 2B               [12] 2251 	add	a,r3
      000A81 FB               [12] 2252 	mov	r3,a
      000A82 EC               [12] 2253 	mov	a,r4
      000A83 33               [12] 2254 	rlc	a
      000A84 FC               [12] 2255 	mov	r4,a
      000A85 EB               [12] 2256 	mov	a,r3
      000A86 24rB0            [12] 2257 	add	a,#_stack
      000A88 FB               [12] 2258 	mov	r3,a
      000A89 EC               [12] 2259 	mov	a,r4
      000A8A 34s25            [12] 2260 	addc	a,#(_stack >> 8)
      000A8C FC               [12] 2261 	mov	r4,a
      000A8D 7A 00            [12] 2262 	mov	r2,#0x00
      000A8F 74 04            [12] 2263 	mov	a,#0x04
      000A91 C0 E0            [24] 2264 	push	acc
      000A93 E4               [12] 2265 	clr	a
      000A94 C0 E0            [24] 2266 	push	acc
      000A96 C0 05            [24] 2267 	push	ar5
      000A98 C0 06            [24] 2268 	push	ar6
      000A9A C0 07            [24] 2269 	push	ar7
      000A9C 8B 82            [24] 2270 	mov	dpl,r3
      000A9E 8C 83            [24] 2271 	mov	dph,r4
      000AA0 8A F0            [24] 2272 	mov	b,r2
      000AA2 12r00r00         [24] 2273 	lcall	___memcpy
      000AA5 E5 81            [12] 2274 	mov	a,sp
      000AA7 24 FB            [12] 2275 	add	a,#0xfb
      000AA9 F5 81            [12] 2276 	mov	sp,a
                                   2277 ;	walk.c:244: return 1u;
      000AAB 75 82 01         [24] 2278 	mov	dpl,#0x01
                                   2279 ;	walk.c:245: }
      000AAE 22               [24] 2280 	ret
                                   2281 ;------------------------------------------------------------
                                   2282 ;Allocation info for local variables in function 'stpop'
                                   2283 ;------------------------------------------------------------
                                   2284 ;t                         Allocated to registers r5 r6 r7 
                                   2285 ;------------------------------------------------------------
                                   2286 ;	walk.c:247: static uint8_t stpop(struct node *t) {
                                   2287 ;	-----------------------------------------
                                   2288 ;	 function stpop
                                   2289 ;	-----------------------------------------
      000AAF                       2290 _stpop:
      000AAF AD 82            [24] 2291 	mov	r5,dpl
      000AB1 AE 83            [24] 2292 	mov	r6,dph
      000AB3 AF F0            [24] 2293 	mov	r7,b
                                   2294 ;	walk.c:248: if (sp == -1) return 0u;
      000AB5 90rBCr70         [24] 2295 	mov	dptr,#_sp
      000AB8 E0               [24] 2296 	movx	a,@dptr
      000AB9 FB               [12] 2297 	mov	r3,a
      000ABA A3               [24] 2298 	inc	dptr
      000ABB E0               [24] 2299 	movx	a,@dptr
      000ABC FC               [12] 2300 	mov	r4,a
      000ABD BB FF 07         [24] 2301 	cjne	r3,#0xff,00102$
      000AC0 BC FF 04         [24] 2302 	cjne	r4,#0xff,00102$
      000AC3 75 82 00         [24] 2303 	mov	dpl,#0x00
      000AC6 22               [24] 2304 	ret
      000AC7                       2305 00102$:
                                   2306 ;	walk.c:249: *t = stack[sp];
      000AC7 EB               [12] 2307 	mov	a,r3
      000AC8 2B               [12] 2308 	add	a,r3
      000AC9 FB               [12] 2309 	mov	r3,a
      000ACA EC               [12] 2310 	mov	a,r4
      000ACB 33               [12] 2311 	rlc	a
      000ACC FC               [12] 2312 	mov	r4,a
      000ACD EB               [12] 2313 	mov	a,r3
      000ACE 2B               [12] 2314 	add	a,r3
      000ACF FB               [12] 2315 	mov	r3,a
      000AD0 EC               [12] 2316 	mov	a,r4
      000AD1 33               [12] 2317 	rlc	a
      000AD2 FC               [12] 2318 	mov	r4,a
      000AD3 EB               [12] 2319 	mov	a,r3
      000AD4 24rB0            [12] 2320 	add	a,#_stack
      000AD6 FB               [12] 2321 	mov	r3,a
      000AD7 EC               [12] 2322 	mov	a,r4
      000AD8 34s25            [12] 2323 	addc	a,#(_stack >> 8)
      000ADA FC               [12] 2324 	mov	r4,a
      000ADB 7A 00            [12] 2325 	mov	r2,#0x00
      000ADD 74 04            [12] 2326 	mov	a,#0x04
      000ADF C0 E0            [24] 2327 	push	acc
      000AE1 E4               [12] 2328 	clr	a
      000AE2 C0 E0            [24] 2329 	push	acc
      000AE4 C0 03            [24] 2330 	push	ar3
      000AE6 C0 04            [24] 2331 	push	ar4
      000AE8 C0 02            [24] 2332 	push	ar2
      000AEA 8D 82            [24] 2333 	mov	dpl,r5
      000AEC 8E 83            [24] 2334 	mov	dph,r6
      000AEE 8F F0            [24] 2335 	mov	b,r7
      000AF0 12r00r00         [24] 2336 	lcall	___memcpy
      000AF3 E5 81            [12] 2337 	mov	a,sp
      000AF5 24 FB            [12] 2338 	add	a,#0xfb
      000AF7 F5 81            [12] 2339 	mov	sp,a
                                   2340 ;	walk.c:250: sp--;
      000AF9 90rBCr70         [24] 2341 	mov	dptr,#_sp
      000AFC E0               [24] 2342 	movx	a,@dptr
      000AFD 24 FF            [12] 2343 	add	a,#0xff
      000AFF FE               [12] 2344 	mov	r6,a
      000B00 A3               [24] 2345 	inc	dptr
      000B01 E0               [24] 2346 	movx	a,@dptr
      000B02 34 FF            [12] 2347 	addc	a,#0xff
      000B04 FF               [12] 2348 	mov	r7,a
      000B05 90rBCr70         [24] 2349 	mov	dptr,#_sp
      000B08 EE               [12] 2350 	mov	a,r6
      000B09 F0               [24] 2351 	movx	@dptr,a
      000B0A EF               [12] 2352 	mov	a,r7
      000B0B A3               [24] 2353 	inc	dptr
      000B0C F0               [24] 2354 	movx	@dptr,a
                                   2355 ;	walk.c:251: return 1u;
      000B0D 75 82 01         [24] 2356 	mov	dpl,#0x01
                                   2357 ;	walk.c:252: }
      000B10 22               [24] 2358 	ret
                                   2359 	.area CSEG    (CODE)
                                   2360 	.area CONST   (CODE)
                                   2361 	.area CONST   (CODE)
      000000                       2362 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2363 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2364 	.db 0x00
                                   2365 	.area CSEG    (CODE)
                                   2366 	.area CONST   (CODE)
      00000D                       2367 ___str_1:
      00000D 1B                    2368 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2369 	.ascii "[%d;%dHo"
             6F
      000016 00                    2370 	.db 0x00
                                   2371 	.area CSEG    (CODE)
                                   2372 	.area CONST   (CODE)
      000017                       2373 ___str_2:
      000017 1B                    2374 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2375 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2376 	.db 0x00
                                   2377 	.area CSEG    (CODE)
                                   2378 	.area CONST   (CODE)
      00002A                       2379 ___str_3:
      00002A 1B                    2380 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2381 	.ascii "[%d;%dH."
             2E
      000033 00                    2382 	.db 0x00
                                   2383 	.area CSEG    (CODE)
                                   2384 	.area CONST   (CODE)
      000034                       2385 ___str_4:
      000034 1B                    2386 	.db 0x1b
      000035 5B 32 4A              2387 	.ascii "[2J"
      000038 1B                    2388 	.db 0x1b
      000039 5B 3F 32 35 6C        2389 	.ascii "[?25l"
      00003E 00                    2390 	.db 0x00
                                   2391 	.area CSEG    (CODE)
                                   2392 	.area CONST   (CODE)
      00003F                       2393 ___str_5:
      00003F 1B                    2394 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2395 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2396 	.db 0x00
                                   2397 	.area CSEG    (CODE)
                                   2398 	.area CONST   (CODE)
      000052                       2399 ___str_6:
      000052 25 20 38 64 25 20 38  2400 	.ascii "% 8d% 8d"
             64
      00005A 00                    2401 	.db 0x00
                                   2402 	.area CSEG    (CODE)
                                   2403 	.area CONST   (CODE)
      00005B                       2404 ___str_7:
      00005B 1B                    2405 	.db 0x1b
      00005C 5B 32 4A              2406 	.ascii "[2J"
      00005F 1B                    2407 	.db 0x1b
      000060 5B 3F 32 35 68        2408 	.ascii "[?25h"
      000065 00                    2409 	.db 0x00
                                   2410 	.area CSEG    (CODE)
                                   2411 	.area XINIT   (CODE)
      000000                       2412 __xinit__neigh:
      000000 FF FF                 2413 	.byte #0xff, #0xff	; -1
      000002 01 00                 2414 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2415 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2416 	.byte #0xff, #0xff	; -1
      000008 01 00                 2417 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2418 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2419 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2420 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2421 	.byte #0xff, #0xff	; -1
      000012 00 00                 2422 	.byte #0x00, #0x00	;  0
      000014 00 00                 2423 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2424 	.byte #0xff, #0xff	; -1
      000018 01 00                 2425 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2426 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2427 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2428 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2429 	.byte #0xff, #0xff	; -1
      000022 01 00                 2430 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2431 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2432 	.byte #0xff, #0xff	; -1
      000028 01 00                 2433 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2434 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2435 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2436 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2437 	.byte #0xff, #0xff	; -1
      000032 00 00                 2438 	.byte #0x00, #0x00	;  0
      000034 00 00                 2439 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2440 	.byte #0xff, #0xff	; -1
      000038 01 00                 2441 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2442 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2443 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2444 	.byte #0x01, #0x00	;  1
                                   2445 	.area CABS    (ABS,CODE)
