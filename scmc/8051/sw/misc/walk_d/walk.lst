                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _stack:
      0025B0                        325 	.ds 38592
      00BC70                        326 _sp:
      00BC70                        327 	.ds 2
                           00F006   328 _OEreg	=	0xf006
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _neigh:
      000000                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r06r78         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	walk.c:9: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  395 	mov	a, dpl
      000002 02 00 30         [24]  396 	ljmp	0x0030
                                    397 ;	walk.c:15: }
                                    398 ;	naked function: no epilogue.
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'getchar'
                                    401 ;------------------------------------------------------------
                                    402 ;	walk.c:17: int getchar(void) __naked {
                                    403 ;	-----------------------------------------
                                    404 ;	 function getchar
                                    405 ;	-----------------------------------------
      000005                        406 _getchar:
                                    407 ;	naked function: no prologue.
                                    408 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  409 	lcall	0x0032
      000008 F5 82            [12]  410 	mov	dpl, a
      00000A 75 83 00         [24]  411 	mov	dph, #0
      00000D 22               [24]  412 	ret
                                    413 ;	walk.c:24: }
                                    414 ;	naked function: no epilogue.
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'int0'
                                    417 ;------------------------------------------------------------
                                    418 ;	walk.c:30: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    419 ;	-----------------------------------------
                                    420 ;	 function int0
                                    421 ;	-----------------------------------------
      00000E                        422 _int0:
                           00000F   423 	ar7 = 0x0f
                           00000E   424 	ar6 = 0x0e
                           00000D   425 	ar5 = 0x0d
                           00000C   426 	ar4 = 0x0c
                           00000B   427 	ar3 = 0x0b
                           00000A   428 	ar2 = 0x0a
                           000009   429 	ar1 = 0x09
                           000008   430 	ar0 = 0x08
      00000E C0 D0            [24]  431 	push	psw
      000010 75 D0 08         [24]  432 	mov	psw,#0x08
                                    433 ;	walk.c:31: i0 = 0u;
      000013 78r00            [12]  434 	mov	r0,#_i0
      000015 76 00            [12]  435 	mov	@r0,#0x00
                                    436 ;	walk.c:32: }
      000017 D0 D0            [24]  437 	pop	psw
      000019 32               [24]  438 	reti
                                    439 ;	eliminated unneeded push/pop dpl
                                    440 ;	eliminated unneeded push/pop dph
                                    441 ;	eliminated unneeded push/pop b
                                    442 ;	eliminated unneeded push/pop acc
                                    443 ;------------------------------------------------------------
                                    444 ;Allocation info for local variables in function 'bang'
                                    445 ;------------------------------------------------------------
                                    446 ;	walk.c:38: static void bang(void) {
                                    447 ;	-----------------------------------------
                                    448 ;	 function bang
                                    449 ;	-----------------------------------------
      00001A                        450 _bang:
                           000007   451 	ar7 = 0x07
                           000006   452 	ar6 = 0x06
                           000005   453 	ar5 = 0x05
                           000004   454 	ar4 = 0x04
                           000003   455 	ar3 = 0x03
                           000002   456 	ar2 = 0x02
                           000001   457 	ar1 = 0x01
                           000000   458 	ar0 = 0x00
                                    459 ;	walk.c:39: (void)puts("Memory error");
      00001A 90r00r00         [24]  460 	mov	dptr,#___str_0
      00001D 75 F0 80         [24]  461 	mov	b,#0x80
      000020 12r00r00         [24]  462 	lcall	_puts
                                    463 ;	walk.c:35: PCON |= 2;
      000023 43 87 02         [24]  464 	orl	_PCON,#0x02
                                    465 ;	walk.c:42: return;
                                    466 ;	walk.c:43: }
      000026 22               [24]  467 	ret
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'setOE'
                                    470 ;------------------------------------------------------------
                                    471 ;mask                      Allocated to registers r7 
                                    472 ;------------------------------------------------------------
                                    473 ;	walk.c:85: static void setOE(uint8_t mask) {
                                    474 ;	-----------------------------------------
                                    475 ;	 function setOE
                                    476 ;	-----------------------------------------
      000027                        477 _setOE:
      000027 AF 82            [24]  478 	mov	r7,dpl
                                    479 ;	walk.c:86: OE76 |= mask;
      000029 78r01            [12]  480 	mov	r0,#_OE76
      00002B EF               [12]  481 	mov	a,r7
      00002C 46               [12]  482 	orl	a,@r0
      00002D F6               [12]  483 	mov	@r0,a
                                    484 ;	walk.c:87: P1_7 = 0;
                                    485 ;	assignBit
      00002E C2 97            [12]  486 	clr	_P1_7
                                    487 ;	walk.c:92: __endasm;
      000030 00               [12]  488 	nop
      000031 00               [12]  489 	nop
      000032 00               [12]  490 	nop
                                    491 ;	walk.c:93: OEreg = OE76;
      000033 78r01            [12]  492 	mov	r0,#_OE76
      000035 90 F0 06         [24]  493 	mov	dptr,#_OEreg
      000038 E6               [12]  494 	mov	a,@r0
      000039 F0               [24]  495 	movx	@dptr,a
                                    496 ;	walk.c:94: P1_7 = 1;
                                    497 ;	assignBit
      00003A D2 97            [12]  498 	setb	_P1_7
                                    499 ;	walk.c:99: __endasm;
      00003C 00               [12]  500 	nop
      00003D 00               [12]  501 	nop
      00003E 00               [12]  502 	nop
                                    503 ;	walk.c:101: return;
                                    504 ;	walk.c:102: }
      00003F 22               [24]  505 	ret
                                    506 ;------------------------------------------------------------
                                    507 ;Allocation info for local variables in function 'unsetOE'
                                    508 ;------------------------------------------------------------
                                    509 ;mask                      Allocated to registers r7 
                                    510 ;------------------------------------------------------------
                                    511 ;	walk.c:104: static void unsetOE(uint8_t mask) {
                                    512 ;	-----------------------------------------
                                    513 ;	 function unsetOE
                                    514 ;	-----------------------------------------
      000040                        515 _unsetOE:
                                    516 ;	walk.c:105: OE76 &= ~mask;
      000040 E5 82            [12]  517 	mov	a,dpl
      000042 F4               [12]  518 	cpl	a
      000043 FF               [12]  519 	mov	r7,a
      000044 78r01            [12]  520 	mov	r0,#_OE76
      000046 56               [12]  521 	anl	a,@r0
      000047 F6               [12]  522 	mov	@r0,a
                                    523 ;	walk.c:106: P1_7 = 0;
                                    524 ;	assignBit
      000048 C2 97            [12]  525 	clr	_P1_7
                                    526 ;	walk.c:111: __endasm;
      00004A 00               [12]  527 	nop
      00004B 00               [12]  528 	nop
      00004C 00               [12]  529 	nop
                                    530 ;	walk.c:112: OEreg = OE76;
      00004D 78r01            [12]  531 	mov	r0,#_OE76
      00004F 90 F0 06         [24]  532 	mov	dptr,#_OEreg
      000052 E6               [12]  533 	mov	a,@r0
      000053 F0               [24]  534 	movx	@dptr,a
                                    535 ;	walk.c:113: P1_7 = 1;
                                    536 ;	assignBit
      000054 D2 97            [12]  537 	setb	_P1_7
                                    538 ;	walk.c:118: __endasm;
      000056 00               [12]  539 	nop
      000057 00               [12]  540 	nop
      000058 00               [12]  541 	nop
                                    542 ;	walk.c:120: return;
                                    543 ;	walk.c:121: }
      000059 22               [24]  544 	ret
                                    545 ;------------------------------------------------------------
                                    546 ;Allocation info for local variables in function 'flipOE'
                                    547 ;------------------------------------------------------------
                                    548 ;mask                      Allocated to registers r7 
                                    549 ;------------------------------------------------------------
                                    550 ;	walk.c:123: static void flipOE(uint8_t mask) {
                                    551 ;	-----------------------------------------
                                    552 ;	 function flipOE
                                    553 ;	-----------------------------------------
      00005A                        554 _flipOE:
      00005A AF 82            [24]  555 	mov	r7,dpl
                                    556 ;	walk.c:124: OE76 ^= mask;
      00005C 78r01            [12]  557 	mov	r0,#_OE76
      00005E EF               [12]  558 	mov	a,r7
      00005F 66               [12]  559 	xrl	a,@r0
      000060 F6               [12]  560 	mov	@r0,a
                                    561 ;	walk.c:125: P1_7 = 0;
                                    562 ;	assignBit
      000061 C2 97            [12]  563 	clr	_P1_7
                                    564 ;	walk.c:130: __endasm;
      000063 00               [12]  565 	nop
      000064 00               [12]  566 	nop
      000065 00               [12]  567 	nop
                                    568 ;	walk.c:131: OEreg = OE76;
      000066 78r01            [12]  569 	mov	r0,#_OE76
      000068 90 F0 06         [24]  570 	mov	dptr,#_OEreg
      00006B E6               [12]  571 	mov	a,@r0
      00006C F0               [24]  572 	movx	@dptr,a
                                    573 ;	walk.c:132: P1_7 = 1;
                                    574 ;	assignBit
      00006D D2 97            [12]  575 	setb	_P1_7
                                    576 ;	walk.c:137: __endasm;
      00006F 00               [12]  577 	nop
      000070 00               [12]  578 	nop
      000071 00               [12]  579 	nop
                                    580 ;	walk.c:139: return;
                                    581 ;	walk.c:140: }
      000072 22               [24]  582 	ret
                                    583 ;------------------------------------------------------------
                                    584 ;Allocation info for local variables in function 'update'
                                    585 ;------------------------------------------------------------
                                    586 ;cur                       Allocated to stack - _bp -5
                                    587 ;j                         Allocated to stack - _bp -6
                                    588 ;t                         Allocated to stack - _bp +1
                                    589 ;sloc0                     Allocated to stack - _bp +4
                                    590 ;sloc1                     Allocated to stack - _bp +6
                                    591 ;sloc2                     Allocated to stack - _bp +8
                                    592 ;------------------------------------------------------------
                                    593 ;	walk.c:142: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    594 ;	-----------------------------------------
                                    595 ;	 function update
                                    596 ;	-----------------------------------------
      000073                        597 _update:
      000073 C0*00            [24]  598 	push	_bp
      000075 85 81*00         [24]  599 	mov	_bp,sp
      000078 C0 82            [24]  600 	push	dpl
      00007A C0 83            [24]  601 	push	dph
      00007C C0 F0            [24]  602 	push	b
      00007E E5 81            [12]  603 	mov	a,sp
      000080 24 07            [12]  604 	add	a,#0x07
      000082 F5 81            [12]  605 	mov	sp,a
                                    606 ;	walk.c:143: t->r = cur->r + neigh[j].r;
      000084 E5*00            [12]  607 	mov	a,_bp
      000086 24 FB            [12]  608 	add	a,#0xfb
      000088 F8               [12]  609 	mov	r0,a
      000089 86 02            [24]  610 	mov	ar2,@r0
      00008B 08               [12]  611 	inc	r0
      00008C 86 03            [24]  612 	mov	ar3,@r0
      00008E 08               [12]  613 	inc	r0
      00008F 86 04            [24]  614 	mov	ar4,@r0
      000091 8A 82            [24]  615 	mov	dpl,r2
      000093 8B 83            [24]  616 	mov	dph,r3
      000095 8C F0            [24]  617 	mov	b,r4
      000097 E5*00            [12]  618 	mov	a,_bp
      000099 24 04            [12]  619 	add	a,#0x04
      00009B F8               [12]  620 	mov	r0,a
      00009C 12r00r00         [24]  621 	lcall	__gptrget
      00009F F6               [12]  622 	mov	@r0,a
      0000A0 A3               [24]  623 	inc	dptr
      0000A1 12r00r00         [24]  624 	lcall	__gptrget
      0000A4 08               [12]  625 	inc	r0
      0000A5 F6               [12]  626 	mov	@r0,a
      0000A6 E5*00            [12]  627 	mov	a,_bp
      0000A8 24 FA            [12]  628 	add	a,#0xfa
      0000AA F8               [12]  629 	mov	r0,a
      0000AB E5*00            [12]  630 	mov	a,_bp
      0000AD 24 06            [12]  631 	add	a,#0x06
      0000AF F9               [12]  632 	mov	r1,a
      0000B0 E6               [12]  633 	mov	a,@r0
      0000B1 75 F0 04         [24]  634 	mov	b,#0x04
      0000B4 A4               [48]  635 	mul	ab
      0000B5 F7               [12]  636 	mov	@r1,a
      0000B6 09               [12]  637 	inc	r1
      0000B7 A7 F0            [24]  638 	mov	@r1,b
      0000B9 E5*00            [12]  639 	mov	a,_bp
      0000BB 24 06            [12]  640 	add	a,#0x06
      0000BD F8               [12]  641 	mov	r0,a
      0000BE E6               [12]  642 	mov	a,@r0
      0000BF 24r00            [12]  643 	add	a,#_neigh
      0000C1 F5 82            [12]  644 	mov	dpl,a
      0000C3 08               [12]  645 	inc	r0
      0000C4 E6               [12]  646 	mov	a,@r0
      0000C5 34s00            [12]  647 	addc	a,#(_neigh >> 8)
      0000C7 F5 83            [12]  648 	mov	dph,a
      0000C9 E0               [24]  649 	movx	a,@dptr
      0000CA FF               [12]  650 	mov	r7,a
      0000CB A3               [24]  651 	inc	dptr
      0000CC E0               [24]  652 	movx	a,@dptr
      0000CD FE               [12]  653 	mov	r6,a
      0000CE E5*00            [12]  654 	mov	a,_bp
      0000D0 24 04            [12]  655 	add	a,#0x04
      0000D2 F8               [12]  656 	mov	r0,a
      0000D3 EF               [12]  657 	mov	a,r7
      0000D4 26               [12]  658 	add	a,@r0
      0000D5 FF               [12]  659 	mov	r7,a
      0000D6 EE               [12]  660 	mov	a,r6
      0000D7 08               [12]  661 	inc	r0
      0000D8 36               [12]  662 	addc	a,@r0
      0000D9 FE               [12]  663 	mov	r6,a
      0000DA A8*00            [24]  664 	mov	r0,_bp
      0000DC 08               [12]  665 	inc	r0
      0000DD 86 82            [24]  666 	mov	dpl,@r0
      0000DF 08               [12]  667 	inc	r0
      0000E0 86 83            [24]  668 	mov	dph,@r0
      0000E2 08               [12]  669 	inc	r0
      0000E3 86 F0            [24]  670 	mov	b,@r0
      0000E5 EF               [12]  671 	mov	a,r7
      0000E6 12r00r00         [24]  672 	lcall	__gptrput
      0000E9 A3               [24]  673 	inc	dptr
      0000EA EE               [12]  674 	mov	a,r6
      0000EB 12r00r00         [24]  675 	lcall	__gptrput
                                    676 ;	walk.c:144: t->c = cur->c + neigh[j].c;
      0000EE A8*00            [24]  677 	mov	r0,_bp
      0000F0 08               [12]  678 	inc	r0
      0000F1 E5*00            [12]  679 	mov	a,_bp
      0000F3 24 08            [12]  680 	add	a,#0x08
      0000F5 F9               [12]  681 	mov	r1,a
      0000F6 74 02            [12]  682 	mov	a,#0x02
      0000F8 26               [12]  683 	add	a,@r0
      0000F9 F7               [12]  684 	mov	@r1,a
      0000FA E4               [12]  685 	clr	a
      0000FB 08               [12]  686 	inc	r0
      0000FC 36               [12]  687 	addc	a,@r0
      0000FD 09               [12]  688 	inc	r1
      0000FE F7               [12]  689 	mov	@r1,a
      0000FF 08               [12]  690 	inc	r0
      000100 09               [12]  691 	inc	r1
      000101 E6               [12]  692 	mov	a,@r0
      000102 F7               [12]  693 	mov	@r1,a
      000103 74 02            [12]  694 	mov	a,#0x02
      000105 2A               [12]  695 	add	a,r2
      000106 FA               [12]  696 	mov	r2,a
      000107 E4               [12]  697 	clr	a
      000108 3B               [12]  698 	addc	a,r3
      000109 FB               [12]  699 	mov	r3,a
      00010A 8A 82            [24]  700 	mov	dpl,r2
      00010C 8B 83            [24]  701 	mov	dph,r3
      00010E 8C F0            [24]  702 	mov	b,r4
      000110 12r00r00         [24]  703 	lcall	__gptrget
      000113 FA               [12]  704 	mov	r2,a
      000114 A3               [24]  705 	inc	dptr
      000115 12r00r00         [24]  706 	lcall	__gptrget
      000118 FB               [12]  707 	mov	r3,a
      000119 E5*00            [12]  708 	mov	a,_bp
      00011B 24 06            [12]  709 	add	a,#0x06
      00011D F8               [12]  710 	mov	r0,a
      00011E E6               [12]  711 	mov	a,@r0
      00011F 24r00            [12]  712 	add	a,#_neigh
      000121 FC               [12]  713 	mov	r4,a
      000122 08               [12]  714 	inc	r0
      000123 E6               [12]  715 	mov	a,@r0
      000124 34s00            [12]  716 	addc	a,#(_neigh >> 8)
      000126 FD               [12]  717 	mov	r5,a
      000127 8C 82            [24]  718 	mov	dpl,r4
      000129 8D 83            [24]  719 	mov	dph,r5
      00012B A3               [24]  720 	inc	dptr
      00012C A3               [24]  721 	inc	dptr
      00012D E0               [24]  722 	movx	a,@dptr
      00012E FC               [12]  723 	mov	r4,a
      00012F A3               [24]  724 	inc	dptr
      000130 E0               [24]  725 	movx	a,@dptr
      000131 FD               [12]  726 	mov	r5,a
      000132 EC               [12]  727 	mov	a,r4
      000133 2A               [12]  728 	add	a,r2
      000134 FA               [12]  729 	mov	r2,a
      000135 ED               [12]  730 	mov	a,r5
      000136 3B               [12]  731 	addc	a,r3
      000137 FB               [12]  732 	mov	r3,a
      000138 E5*00            [12]  733 	mov	a,_bp
      00013A 24 08            [12]  734 	add	a,#0x08
      00013C F8               [12]  735 	mov	r0,a
      00013D 86 82            [24]  736 	mov	dpl,@r0
      00013F 08               [12]  737 	inc	r0
      000140 86 83            [24]  738 	mov	dph,@r0
      000142 08               [12]  739 	inc	r0
      000143 86 F0            [24]  740 	mov	b,@r0
      000145 EA               [12]  741 	mov	a,r2
      000146 12r00r00         [24]  742 	lcall	__gptrput
      000149 A3               [24]  743 	inc	dptr
      00014A EB               [12]  744 	mov	a,r3
      00014B 12r00r00         [24]  745 	lcall	__gptrput
                                    746 ;	walk.c:146: if (t->r < 0) t->r += ROWS;
      00014E A8*00            [24]  747 	mov	r0,_bp
      000150 08               [12]  748 	inc	r0
      000151 86 82            [24]  749 	mov	dpl,@r0
      000153 08               [12]  750 	inc	r0
      000154 86 83            [24]  751 	mov	dph,@r0
      000156 08               [12]  752 	inc	r0
      000157 86 F0            [24]  753 	mov	b,@r0
      000159 12r00r00         [24]  754 	lcall	__gptrget
      00015C FD               [12]  755 	mov	r5,a
      00015D A3               [24]  756 	inc	dptr
      00015E 12r00r00         [24]  757 	lcall	__gptrget
      000161 FC               [12]  758 	mov	r4,a
      000162 EE               [12]  759 	mov	a,r6
      000163 30 E7 1D         [24]  760 	jnb	acc.7,00104$
      000166 74 30            [12]  761 	mov	a,#0x30
      000168 2D               [12]  762 	add	a,r5
      000169 FF               [12]  763 	mov	r7,a
      00016A E4               [12]  764 	clr	a
      00016B 3C               [12]  765 	addc	a,r4
      00016C FE               [12]  766 	mov	r6,a
      00016D A8*00            [24]  767 	mov	r0,_bp
      00016F 08               [12]  768 	inc	r0
      000170 86 82            [24]  769 	mov	dpl,@r0
      000172 08               [12]  770 	inc	r0
      000173 86 83            [24]  771 	mov	dph,@r0
      000175 08               [12]  772 	inc	r0
      000176 86 F0            [24]  773 	mov	b,@r0
      000178 EF               [12]  774 	mov	a,r7
      000179 12r00r00         [24]  775 	lcall	__gptrput
      00017C A3               [24]  776 	inc	dptr
      00017D EE               [12]  777 	mov	a,r6
      00017E 12r00r00         [24]  778 	lcall	__gptrput
      000181 80 27            [24]  779 	sjmp	00105$
      000183                        780 00104$:
                                    781 ;	walk.c:147: else if (t->r >= ROWS) t->r -= ROWS;
      000183 C3               [12]  782 	clr	c
      000184 ED               [12]  783 	mov	a,r5
      000185 94 30            [12]  784 	subb	a,#0x30
      000187 EC               [12]  785 	mov	a,r4
      000188 64 80            [12]  786 	xrl	a,#0x80
      00018A 94 80            [12]  787 	subb	a,#0x80
      00018C 40 1C            [24]  788 	jc	00105$
      00018E ED               [12]  789 	mov	a,r5
      00018F 24 D0            [12]  790 	add	a,#0xd0
      000191 FD               [12]  791 	mov	r5,a
      000192 EC               [12]  792 	mov	a,r4
      000193 34 FF            [12]  793 	addc	a,#0xff
      000195 FC               [12]  794 	mov	r4,a
      000196 A8*00            [24]  795 	mov	r0,_bp
      000198 08               [12]  796 	inc	r0
      000199 86 82            [24]  797 	mov	dpl,@r0
      00019B 08               [12]  798 	inc	r0
      00019C 86 83            [24]  799 	mov	dph,@r0
      00019E 08               [12]  800 	inc	r0
      00019F 86 F0            [24]  801 	mov	b,@r0
      0001A1 ED               [12]  802 	mov	a,r5
      0001A2 12r00r00         [24]  803 	lcall	__gptrput
      0001A5 A3               [24]  804 	inc	dptr
      0001A6 EC               [12]  805 	mov	a,r4
      0001A7 12r00r00         [24]  806 	lcall	__gptrput
      0001AA                        807 00105$:
                                    808 ;	walk.c:148: if (t->c < 0) t->c += COLS;
      0001AA E5*00            [12]  809 	mov	a,_bp
      0001AC 24 08            [12]  810 	add	a,#0x08
      0001AE F8               [12]  811 	mov	r0,a
      0001AF 86 82            [24]  812 	mov	dpl,@r0
      0001B1 08               [12]  813 	inc	r0
      0001B2 86 83            [24]  814 	mov	dph,@r0
      0001B4 08               [12]  815 	inc	r0
      0001B5 86 F0            [24]  816 	mov	b,@r0
      0001B7 12r00r00         [24]  817 	lcall	__gptrget
      0001BA A3               [24]  818 	inc	dptr
      0001BB 12r00r00         [24]  819 	lcall	__gptrget
      0001BE 30 E7 35         [24]  820 	jnb	acc.7,00109$
      0001C1 E5*00            [12]  821 	mov	a,_bp
      0001C3 24 08            [12]  822 	add	a,#0x08
      0001C5 F8               [12]  823 	mov	r0,a
      0001C6 86 82            [24]  824 	mov	dpl,@r0
      0001C8 08               [12]  825 	inc	r0
      0001C9 86 83            [24]  826 	mov	dph,@r0
      0001CB 08               [12]  827 	inc	r0
      0001CC 86 F0            [24]  828 	mov	b,@r0
      0001CE 12r00r00         [24]  829 	lcall	__gptrget
      0001D1 FE               [12]  830 	mov	r6,a
      0001D2 A3               [24]  831 	inc	dptr
      0001D3 12r00r00         [24]  832 	lcall	__gptrget
      0001D6 FF               [12]  833 	mov	r7,a
      0001D7 74 C9            [12]  834 	mov	a,#0xc9
      0001D9 2E               [12]  835 	add	a,r6
      0001DA FE               [12]  836 	mov	r6,a
      0001DB E4               [12]  837 	clr	a
      0001DC 3F               [12]  838 	addc	a,r7
      0001DD FF               [12]  839 	mov	r7,a
      0001DE E5*00            [12]  840 	mov	a,_bp
      0001E0 24 08            [12]  841 	add	a,#0x08
      0001E2 F8               [12]  842 	mov	r0,a
      0001E3 86 82            [24]  843 	mov	dpl,@r0
      0001E5 08               [12]  844 	inc	r0
      0001E6 86 83            [24]  845 	mov	dph,@r0
      0001E8 08               [12]  846 	inc	r0
      0001E9 86 F0            [24]  847 	mov	b,@r0
      0001EB EE               [12]  848 	mov	a,r6
      0001EC 12r00r00         [24]  849 	lcall	__gptrput
      0001EF A3               [24]  850 	inc	dptr
      0001F0 EF               [12]  851 	mov	a,r7
      0001F1 12r00r00         [24]  852 	lcall	__gptrput
      0001F4 80 55            [24]  853 	sjmp	00110$
      0001F6                        854 00109$:
                                    855 ;	walk.c:149: else if (t->c >= COLS) t->c -= COLS;
      0001F6 E5*00            [12]  856 	mov	a,_bp
      0001F8 24 08            [12]  857 	add	a,#0x08
      0001FA F8               [12]  858 	mov	r0,a
      0001FB 86 82            [24]  859 	mov	dpl,@r0
      0001FD 08               [12]  860 	inc	r0
      0001FE 86 83            [24]  861 	mov	dph,@r0
      000200 08               [12]  862 	inc	r0
      000201 86 F0            [24]  863 	mov	b,@r0
      000203 12r00r00         [24]  864 	lcall	__gptrget
      000206 FE               [12]  865 	mov	r6,a
      000207 A3               [24]  866 	inc	dptr
      000208 12r00r00         [24]  867 	lcall	__gptrget
      00020B FF               [12]  868 	mov	r7,a
      00020C C3               [12]  869 	clr	c
      00020D EE               [12]  870 	mov	a,r6
      00020E 94 C9            [12]  871 	subb	a,#0xc9
      000210 EF               [12]  872 	mov	a,r7
      000211 64 80            [12]  873 	xrl	a,#0x80
      000213 94 80            [12]  874 	subb	a,#0x80
      000215 40 34            [24]  875 	jc	00110$
      000217 E5*00            [12]  876 	mov	a,_bp
      000219 24 08            [12]  877 	add	a,#0x08
      00021B F8               [12]  878 	mov	r0,a
      00021C 86 82            [24]  879 	mov	dpl,@r0
      00021E 08               [12]  880 	inc	r0
      00021F 86 83            [24]  881 	mov	dph,@r0
      000221 08               [12]  882 	inc	r0
      000222 86 F0            [24]  883 	mov	b,@r0
      000224 12r00r00         [24]  884 	lcall	__gptrget
      000227 FE               [12]  885 	mov	r6,a
      000228 A3               [24]  886 	inc	dptr
      000229 12r00r00         [24]  887 	lcall	__gptrget
      00022C FF               [12]  888 	mov	r7,a
      00022D EE               [12]  889 	mov	a,r6
      00022E 24 37            [12]  890 	add	a,#0x37
      000230 FE               [12]  891 	mov	r6,a
      000231 EF               [12]  892 	mov	a,r7
      000232 34 FF            [12]  893 	addc	a,#0xff
      000234 FF               [12]  894 	mov	r7,a
      000235 E5*00            [12]  895 	mov	a,_bp
      000237 24 08            [12]  896 	add	a,#0x08
      000239 F8               [12]  897 	mov	r0,a
      00023A 86 82            [24]  898 	mov	dpl,@r0
      00023C 08               [12]  899 	inc	r0
      00023D 86 83            [24]  900 	mov	dph,@r0
      00023F 08               [12]  901 	inc	r0
      000240 86 F0            [24]  902 	mov	b,@r0
      000242 EE               [12]  903 	mov	a,r6
      000243 12r00r00         [24]  904 	lcall	__gptrput
      000246 A3               [24]  905 	inc	dptr
      000247 EF               [12]  906 	mov	a,r7
      000248 12r00r00         [24]  907 	lcall	__gptrput
      00024B                        908 00110$:
                                    909 ;	walk.c:151: if (g[t->r][t->c] == 0xaau) return 0u;
      00024B A8*00            [24]  910 	mov	r0,_bp
      00024D 08               [12]  911 	inc	r0
      00024E 86 82            [24]  912 	mov	dpl,@r0
      000250 08               [12]  913 	inc	r0
      000251 86 83            [24]  914 	mov	dph,@r0
      000253 08               [12]  915 	inc	r0
      000254 86 F0            [24]  916 	mov	b,@r0
      000256 12r00r00         [24]  917 	lcall	__gptrget
      000259 FE               [12]  918 	mov	r6,a
      00025A A3               [24]  919 	inc	dptr
      00025B 12r00r00         [24]  920 	lcall	__gptrget
      00025E FF               [12]  921 	mov	r7,a
      00025F C0 06            [24]  922 	push	ar6
      000261 C0 07            [24]  923 	push	ar7
      000263 90 00 C9         [24]  924 	mov	dptr,#0x00c9
      000266 12r00r00         [24]  925 	lcall	__mulint
      000269 AE 82            [24]  926 	mov	r6,dpl
      00026B AF 83            [24]  927 	mov	r7,dph
      00026D 15 81            [12]  928 	dec	sp
      00026F 15 81            [12]  929 	dec	sp
      000271 EE               [12]  930 	mov	a,r6
      000272 24r00            [12]  931 	add	a,#_g
      000274 FE               [12]  932 	mov	r6,a
      000275 EF               [12]  933 	mov	a,r7
      000276 34s00            [12]  934 	addc	a,#(_g >> 8)
      000278 FF               [12]  935 	mov	r7,a
      000279 E5*00            [12]  936 	mov	a,_bp
      00027B 24 08            [12]  937 	add	a,#0x08
      00027D F8               [12]  938 	mov	r0,a
      00027E 86 82            [24]  939 	mov	dpl,@r0
      000280 08               [12]  940 	inc	r0
      000281 86 83            [24]  941 	mov	dph,@r0
      000283 08               [12]  942 	inc	r0
      000284 86 F0            [24]  943 	mov	b,@r0
      000286 12r00r00         [24]  944 	lcall	__gptrget
      000289 FC               [12]  945 	mov	r4,a
      00028A A3               [24]  946 	inc	dptr
      00028B 12r00r00         [24]  947 	lcall	__gptrget
      00028E FD               [12]  948 	mov	r5,a
      00028F EC               [12]  949 	mov	a,r4
      000290 2E               [12]  950 	add	a,r6
      000291 F5 82            [12]  951 	mov	dpl,a
      000293 ED               [12]  952 	mov	a,r5
      000294 3F               [12]  953 	addc	a,r7
      000295 F5 83            [12]  954 	mov	dph,a
      000297 E0               [24]  955 	movx	a,@dptr
      000298 FF               [12]  956 	mov	r7,a
      000299 BF AA 05         [24]  957 	cjne	r7,#0xaa,00114$
      00029C 75 82 00         [24]  958 	mov	dpl,#0x00
      00029F 80 59            [24]  959 	sjmp	00116$
      0002A1                        960 00114$:
                                    961 ;	walk.c:152: else if (g[t->r][t->c] != 0x55u) bang();
      0002A1 A8*00            [24]  962 	mov	r0,_bp
      0002A3 08               [12]  963 	inc	r0
      0002A4 86 82            [24]  964 	mov	dpl,@r0
      0002A6 08               [12]  965 	inc	r0
      0002A7 86 83            [24]  966 	mov	dph,@r0
      0002A9 08               [12]  967 	inc	r0
      0002AA 86 F0            [24]  968 	mov	b,@r0
      0002AC 12r00r00         [24]  969 	lcall	__gptrget
      0002AF FE               [12]  970 	mov	r6,a
      0002B0 A3               [24]  971 	inc	dptr
      0002B1 12r00r00         [24]  972 	lcall	__gptrget
      0002B4 FF               [12]  973 	mov	r7,a
      0002B5 C0 06            [24]  974 	push	ar6
      0002B7 C0 07            [24]  975 	push	ar7
      0002B9 90 00 C9         [24]  976 	mov	dptr,#0x00c9
      0002BC 12r00r00         [24]  977 	lcall	__mulint
      0002BF AE 82            [24]  978 	mov	r6,dpl
      0002C1 AF 83            [24]  979 	mov	r7,dph
      0002C3 15 81            [12]  980 	dec	sp
      0002C5 15 81            [12]  981 	dec	sp
      0002C7 EE               [12]  982 	mov	a,r6
      0002C8 24r00            [12]  983 	add	a,#_g
      0002CA FE               [12]  984 	mov	r6,a
      0002CB EF               [12]  985 	mov	a,r7
      0002CC 34s00            [12]  986 	addc	a,#(_g >> 8)
      0002CE FF               [12]  987 	mov	r7,a
      0002CF E5*00            [12]  988 	mov	a,_bp
      0002D1 24 08            [12]  989 	add	a,#0x08
      0002D3 F8               [12]  990 	mov	r0,a
      0002D4 86 82            [24]  991 	mov	dpl,@r0
      0002D6 08               [12]  992 	inc	r0
      0002D7 86 83            [24]  993 	mov	dph,@r0
      0002D9 08               [12]  994 	inc	r0
      0002DA 86 F0            [24]  995 	mov	b,@r0
      0002DC 12r00r00         [24]  996 	lcall	__gptrget
      0002DF FC               [12]  997 	mov	r4,a
      0002E0 A3               [24]  998 	inc	dptr
      0002E1 12r00r00         [24]  999 	lcall	__gptrget
      0002E4 FD               [12] 1000 	mov	r5,a
      0002E5 EC               [12] 1001 	mov	a,r4
      0002E6 2E               [12] 1002 	add	a,r6
      0002E7 F5 82            [12] 1003 	mov	dpl,a
      0002E9 ED               [12] 1004 	mov	a,r5
      0002EA 3F               [12] 1005 	addc	a,r7
      0002EB F5 83            [12] 1006 	mov	dph,a
      0002ED E0               [24] 1007 	movx	a,@dptr
      0002EE FF               [12] 1008 	mov	r7,a
      0002EF BF 55 02         [24] 1009 	cjne	r7,#0x55,00148$
      0002F2 80 03            [24] 1010 	sjmp	00115$
      0002F4                       1011 00148$:
      0002F4 12r00r1A         [24] 1012 	lcall	_bang
      0002F7                       1013 00115$:
                                   1014 ;	walk.c:154: return 1u;
      0002F7 75 82 01         [24] 1015 	mov	dpl,#0x01
      0002FA                       1016 00116$:
                                   1017 ;	walk.c:155: }
      0002FA 85*00 81         [24] 1018 	mov	sp,_bp
      0002FD D0*00            [24] 1019 	pop	_bp
      0002FF 22               [24] 1020 	ret
                                   1021 ;------------------------------------------------------------
                                   1022 ;Allocation info for local variables in function 'walk'
                                   1023 ;------------------------------------------------------------
                                   1024 ;nstart                    Allocated to registers 
                                   1025 ;cur                       Allocated to stack - _bp +10
                                   1026 ;t                         Allocated to stack - _bp +14
                                   1027 ;j                         Allocated to stack - _bp +18
                                   1028 ;f                         Allocated to registers r3 
                                   1029 ;sloc0                     Allocated to stack - _bp +1
                                   1030 ;sloc1                     Allocated to stack - _bp +2
                                   1031 ;sloc2                     Allocated to stack - _bp +3
                                   1032 ;sloc3                     Allocated to stack - _bp +17
                                   1033 ;sloc4                     Allocated to stack - _bp +4
                                   1034 ;sloc5                     Allocated to stack - _bp +5
                                   1035 ;sloc6                     Allocated to stack - _bp +6
                                   1036 ;sloc7                     Allocated to stack - _bp +7
                                   1037 ;------------------------------------------------------------
                                   1038 ;	walk.c:157: static void walk(struct node *nstart) {
                                   1039 ;	-----------------------------------------
                                   1040 ;	 function walk
                                   1041 ;	-----------------------------------------
      000300                       1042 _walk:
      000300 C0*00            [24] 1043 	push	_bp
      000302 E5 81            [12] 1044 	mov	a,sp
      000304 F5*00            [12] 1045 	mov	_bp,a
      000306 24 12            [12] 1046 	add	a,#0x12
      000308 F5 81            [12] 1047 	mov	sp,a
      00030A AD 82            [24] 1048 	mov	r5,dpl
      00030C AE 83            [24] 1049 	mov	r6,dph
      00030E AF F0            [24] 1050 	mov	r7,b
                                   1051 ;	walk.c:161: cur = *nstart;
      000310 E5*00            [12] 1052 	mov	a,_bp
      000312 24 0A            [12] 1053 	add	a,#0x0a
      000314 F9               [12] 1054 	mov	r1,a
      000315 FA               [12] 1055 	mov	r2,a
      000316 7B 00            [12] 1056 	mov	r3,#0x00
      000318 7C 40            [12] 1057 	mov	r4,#0x40
      00031A C0 01            [24] 1058 	push	ar1
      00031C 74 04            [12] 1059 	mov	a,#0x04
      00031E C0 E0            [24] 1060 	push	acc
      000320 E4               [12] 1061 	clr	a
      000321 C0 E0            [24] 1062 	push	acc
      000323 C0 05            [24] 1063 	push	ar5
      000325 C0 06            [24] 1064 	push	ar6
      000327 C0 07            [24] 1065 	push	ar7
      000329 8A 82            [24] 1066 	mov	dpl,r2
      00032B 8B 83            [24] 1067 	mov	dph,r3
      00032D 8C F0            [24] 1068 	mov	b,r4
      00032F 12r00r00         [24] 1069 	lcall	___memcpy
      000332 E5 81            [12] 1070 	mov	a,sp
      000334 24 FB            [12] 1071 	add	a,#0xfb
      000336 F5 81            [12] 1072 	mov	sp,a
      000338 D0 01            [24] 1073 	pop	ar1
                                   1074 ;	walk.c:163: process:
      00033A E5*00            [12] 1075 	mov	a,_bp
      00033C 24 06            [12] 1076 	add	a,#0x06
      00033E F8               [12] 1077 	mov	r0,a
      00033F A6 01            [24] 1078 	mov	@r0,ar1
      000341 E5*00            [12] 1079 	mov	a,_bp
      000343 24 0E            [12] 1080 	add	a,#0x0e
      000345 FE               [12] 1081 	mov	r6,a
      000346 E5*00            [12] 1082 	mov	a,_bp
      000348 24 03            [12] 1083 	add	a,#0x03
      00034A F8               [12] 1084 	mov	r0,a
      00034B A6 01            [24] 1085 	mov	@r0,ar1
      00034D E5*00            [12] 1086 	mov	a,_bp
      00034F 24 05            [12] 1087 	add	a,#0x05
      000351 F8               [12] 1088 	mov	r0,a
      000352 A6 01            [24] 1089 	mov	@r0,ar1
      000354 E5*00            [12] 1090 	mov	a,_bp
      000356 24 04            [12] 1091 	add	a,#0x04
      000358 F8               [12] 1092 	mov	r0,a
      000359 A6 06            [24] 1093 	mov	@r0,ar6
      00035B 89 02            [24] 1094 	mov	ar2,r1
      00035D A8*00            [24] 1095 	mov	r0,_bp
      00035F 08               [12] 1096 	inc	r0
      000360 A6 06            [24] 1097 	mov	@r0,ar6
      000362 A8*00            [24] 1098 	mov	r0,_bp
      000364 08               [12] 1099 	inc	r0
      000365 08               [12] 1100 	inc	r0
      000366 A6 01            [24] 1101 	mov	@r0,ar1
      000368 74 02            [12] 1102 	mov	a,#0x02
      00036A 29               [12] 1103 	add	a,r1
      00036B F8               [12] 1104 	mov	r0,a
      00036C                       1105 00101$:
                                   1106 ;	walk.c:164: g[cur.r][cur.c] = 0xaau;
      00036C C0 02            [24] 1107 	push	ar2
      00036E 87 02            [24] 1108 	mov	ar2,@r1
      000370 09               [12] 1109 	inc	r1
      000371 87 05            [24] 1110 	mov	ar5,@r1
      000373 19               [12] 1111 	dec	r1
      000374 C0 06            [24] 1112 	push	ar6
      000376 C0 01            [24] 1113 	push	ar1
      000378 C0 00            [24] 1114 	push	ar0
      00037A C0 02            [24] 1115 	push	ar2
      00037C C0 05            [24] 1116 	push	ar5
      00037E 90 00 C9         [24] 1117 	mov	dptr,#0x00c9
      000381 12r00r00         [24] 1118 	lcall	__mulint
      000384 AA 82            [24] 1119 	mov	r2,dpl
      000386 AD 83            [24] 1120 	mov	r5,dph
      000388 15 81            [12] 1121 	dec	sp
      00038A 15 81            [12] 1122 	dec	sp
      00038C D0 00            [24] 1123 	pop	ar0
      00038E D0 01            [24] 1124 	pop	ar1
      000390 EA               [12] 1125 	mov	a,r2
      000391 24r00            [12] 1126 	add	a,#_g
      000393 FF               [12] 1127 	mov	r7,a
      000394 ED               [12] 1128 	mov	a,r5
      000395 34s00            [12] 1129 	addc	a,#(_g >> 8)
      000397 FC               [12] 1130 	mov	r4,a
      000398 86 02            [24] 1131 	mov	ar2,@r0
      00039A 08               [12] 1132 	inc	r0
      00039B 86 05            [24] 1133 	mov	ar5,@r0
      00039D 18               [12] 1134 	dec	r0
      00039E EA               [12] 1135 	mov	a,r2
      00039F 2F               [12] 1136 	add	a,r7
      0003A0 F5 82            [12] 1137 	mov	dpl,a
      0003A2 ED               [12] 1138 	mov	a,r5
      0003A3 3C               [12] 1139 	addc	a,r4
      0003A4 F5 83            [12] 1140 	mov	dph,a
      0003A6 74 AA            [12] 1141 	mov	a,#0xaa
      0003A8 F0               [24] 1142 	movx	@dptr,a
                                   1143 ;	walk.c:166: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      0003A9 86 02            [24] 1144 	mov	ar2,@r0
      0003AB 08               [12] 1145 	inc	r0
      0003AC 86 05            [24] 1146 	mov	ar5,@r0
      0003AE 18               [12] 1147 	dec	r0
      0003AF 74 01            [12] 1148 	mov	a,#0x01
      0003B1 2A               [12] 1149 	add	a,r2
      0003B2 FF               [12] 1150 	mov	r7,a
      0003B3 E4               [12] 1151 	clr	a
      0003B4 3D               [12] 1152 	addc	a,r5
      0003B5 FC               [12] 1153 	mov	r4,a
      0003B6 87 02            [24] 1154 	mov	ar2,@r1
      0003B8 09               [12] 1155 	inc	r1
      0003B9 87 05            [24] 1156 	mov	ar5,@r1
      0003BB 19               [12] 1157 	dec	r1
      0003BC 74 04            [12] 1158 	mov	a,#0x04
      0003BE 2A               [12] 1159 	add	a,r2
      0003BF FA               [12] 1160 	mov	r2,a
      0003C0 E4               [12] 1161 	clr	a
      0003C1 3D               [12] 1162 	addc	a,r5
      0003C2 FD               [12] 1163 	mov	r5,a
      0003C3 C0 02            [24] 1164 	push	ar2
      0003C5 C0 01            [24] 1165 	push	ar1
      0003C7 C0 00            [24] 1166 	push	ar0
      0003C9 C0 07            [24] 1167 	push	ar7
      0003CB C0 04            [24] 1168 	push	ar4
      0003CD C0 02            [24] 1169 	push	ar2
      0003CF C0 05            [24] 1170 	push	ar5
      0003D1 74r0D            [12] 1171 	mov	a,#___str_1
      0003D3 C0 E0            [24] 1172 	push	acc
      0003D5 74s00            [12] 1173 	mov	a,#(___str_1 >> 8)
      0003D7 C0 E0            [24] 1174 	push	acc
      0003D9 74 80            [12] 1175 	mov	a,#0x80
      0003DB C0 E0            [24] 1176 	push	acc
      0003DD 12r00r00         [24] 1177 	lcall	_printf
      0003E0 E5 81            [12] 1178 	mov	a,sp
      0003E2 24 F9            [12] 1179 	add	a,#0xf9
      0003E4 F5 81            [12] 1180 	mov	sp,a
                                   1181 ;	walk.c:167: setOE(OE76_MASK7);
      0003E6 75 82 80         [24] 1182 	mov	dpl,#0x80
      0003E9 12r00r27         [24] 1183 	lcall	_setOE
      0003EC D0 00            [24] 1184 	pop	ar0
      0003EE D0 01            [24] 1185 	pop	ar1
      0003F0 D0 02            [24] 1186 	pop	ar2
      0003F2 D0 06            [24] 1187 	pop	ar6
                                   1188 ;	walk.c:195: return;
      0003F4 D0 02            [24] 1189 	pop	ar2
                                   1190 ;	walk.c:169: next:
      0003F6                       1191 00102$:
                                   1192 ;	walk.c:170: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003F6 C0 02            [24] 1193 	push	ar2
      0003F8 86 07            [24] 1194 	mov	ar7,@r0
      0003FA 08               [12] 1195 	inc	r0
      0003FB 86 04            [24] 1196 	mov	ar4,@r0
      0003FD 18               [12] 1197 	dec	r0
      0003FE 87 02            [24] 1198 	mov	ar2,@r1
      000400 09               [12] 1199 	inc	r1
      000401 87 05            [24] 1200 	mov	ar5,@r1
      000403 19               [12] 1201 	dec	r1
      000404 C0 06            [24] 1202 	push	ar6
      000406 C0 02            [24] 1203 	push	ar2
      000408 C0 01            [24] 1204 	push	ar1
      00040A C0 00            [24] 1205 	push	ar0
      00040C C0 07            [24] 1206 	push	ar7
      00040E C0 04            [24] 1207 	push	ar4
      000410 C0 02            [24] 1208 	push	ar2
      000412 C0 05            [24] 1209 	push	ar5
      000414 90rBCr70         [24] 1210 	mov	dptr,#_sp
      000417 E0               [24] 1211 	movx	a,@dptr
      000418 C0 E0            [24] 1212 	push	acc
      00041A A3               [24] 1213 	inc	dptr
      00041B E0               [24] 1214 	movx	a,@dptr
      00041C C0 E0            [24] 1215 	push	acc
      00041E 74r17            [12] 1216 	mov	a,#___str_2
      000420 C0 E0            [24] 1217 	push	acc
      000422 74s00            [12] 1218 	mov	a,#(___str_2 >> 8)
      000424 C0 E0            [24] 1219 	push	acc
      000426 74 80            [12] 1220 	mov	a,#0x80
      000428 C0 E0            [24] 1221 	push	acc
      00042A 12r00r00         [24] 1222 	lcall	_printf
      00042D E5 81            [12] 1223 	mov	a,sp
      00042F 24 F7            [12] 1224 	add	a,#0xf7
      000431 F5 81            [12] 1225 	mov	sp,a
                                   1226 ;	walk.c:171: unsetOE(OE76_MASK7 | OE76_MASK6);
      000433 75 82 C0         [24] 1227 	mov	dpl,#0xc0
      000436 12r00r40         [24] 1228 	lcall	_unsetOE
      000439 D0 00            [24] 1229 	pop	ar0
      00043B D0 01            [24] 1230 	pop	ar1
      00043D D0 02            [24] 1231 	pop	ar2
      00043F D0 06            [24] 1232 	pop	ar6
                                   1233 ;	walk.c:173: for (j = 0u, f = 0u; j < NMAX; j++) {
      000441 7B 00            [12] 1234 	mov	r3,#0x00
      000443 C0 00            [24] 1235 	push	ar0
      000445 E5*00            [12] 1236 	mov	a,_bp
      000447 24 12            [12] 1237 	add	a,#0x12
      000449 F8               [12] 1238 	mov	r0,a
      00044A 76 00            [12] 1239 	mov	@r0,#0x00
      00044C D0 00            [24] 1240 	pop	ar0
                                   1241 ;	walk.c:195: return;
      00044E D0 02            [24] 1242 	pop	ar2
                                   1243 ;	walk.c:173: for (j = 0u, f = 0u; j < NMAX; j++) {
      000450                       1244 00119$:
      000450 C0 00            [24] 1245 	push	ar0
      000452 E5*00            [12] 1246 	mov	a,_bp
      000454 24 12            [12] 1247 	add	a,#0x12
      000456 F8               [12] 1248 	mov	r0,a
      000457 B6 10 00         [24] 1249 	cjne	@r0,#0x10,00159$
      00045A                       1250 00159$:
      00045A D0 00            [24] 1251 	pop	ar0
      00045C 50 7A            [24] 1252 	jnc	00106$
                                   1253 ;	walk.c:174: if (!update(&t, &cur, j)) continue;
      00045E C0 02            [24] 1254 	push	ar2
      000460 C0 00            [24] 1255 	push	ar0
      000462 E5*00            [12] 1256 	mov	a,_bp
      000464 24 06            [12] 1257 	add	a,#0x06
      000466 F8               [12] 1258 	mov	r0,a
      000467 C0 01            [24] 1259 	push	ar1
      000469 E5*00            [12] 1260 	mov	a,_bp
      00046B 24 07            [12] 1261 	add	a,#0x07
      00046D F9               [12] 1262 	mov	r1,a
      00046E E6               [12] 1263 	mov	a,@r0
      00046F F7               [12] 1264 	mov	@r1,a
      000470 09               [12] 1265 	inc	r1
      000471 77 00            [12] 1266 	mov	@r1,#0x00
      000473 09               [12] 1267 	inc	r1
      000474 77 40            [12] 1268 	mov	@r1,#0x40
      000476 D0 01            [24] 1269 	pop	ar1
      000478 D0 00            [24] 1270 	pop	ar0
      00047A 8E 04            [24] 1271 	mov	ar4,r6
      00047C 7D 00            [12] 1272 	mov	r5,#0x00
      00047E 7F 40            [12] 1273 	mov	r7,#0x40
      000480 C0 06            [24] 1274 	push	ar6
      000482 C0 03            [24] 1275 	push	ar3
      000484 C0 02            [24] 1276 	push	ar2
      000486 C0 01            [24] 1277 	push	ar1
      000488 C0 00            [24] 1278 	push	ar0
      00048A 85 00 F0         [24] 1279 	mov	b,ar0
      00048D E5*00            [12] 1280 	mov	a,_bp
      00048F 24 12            [12] 1281 	add	a,#0x12
      000491 F8               [12] 1282 	mov	r0,a
      000492 E6               [12] 1283 	mov	a,@r0
      000493 C0 E0            [24] 1284 	push	acc
      000495 A8 F0            [24] 1285 	mov	r0,b
      000497 85 00 F0         [24] 1286 	mov	b,ar0
      00049A E5*00            [12] 1287 	mov	a,_bp
      00049C 24 07            [12] 1288 	add	a,#0x07
      00049E F8               [12] 1289 	mov	r0,a
      00049F E6               [12] 1290 	mov	a,@r0
      0004A0 C0 E0            [24] 1291 	push	acc
      0004A2 08               [12] 1292 	inc	r0
      0004A3 E6               [12] 1293 	mov	a,@r0
      0004A4 C0 E0            [24] 1294 	push	acc
      0004A6 08               [12] 1295 	inc	r0
      0004A7 E6               [12] 1296 	mov	a,@r0
      0004A8 C0 E0            [24] 1297 	push	acc
      0004AA 8C 82            [24] 1298 	mov	dpl,r4
      0004AC 8D 83            [24] 1299 	mov	dph,r5
      0004AE 8F F0            [24] 1300 	mov	b,r7
      0004B0 12r00r73         [24] 1301 	lcall	_update
      0004B3 AF 82            [24] 1302 	mov	r7,dpl
      0004B5 E5 81            [12] 1303 	mov	a,sp
      0004B7 24 FC            [12] 1304 	add	a,#0xfc
      0004B9 F5 81            [12] 1305 	mov	sp,a
      0004BB D0 00            [24] 1306 	pop	ar0
      0004BD D0 01            [24] 1307 	pop	ar1
      0004BF D0 02            [24] 1308 	pop	ar2
      0004C1 D0 03            [24] 1309 	pop	ar3
      0004C3 D0 06            [24] 1310 	pop	ar6
      0004C5 D0 02            [24] 1311 	pop	ar2
      0004C7 EF               [12] 1312 	mov	a,r7
      0004C8 60 01            [24] 1313 	jz	00105$
                                   1314 ;	walk.c:175: f++;
      0004CA 0B               [12] 1315 	inc	r3
      0004CB                       1316 00105$:
                                   1317 ;	walk.c:173: for (j = 0u, f = 0u; j < NMAX; j++) {
      0004CB C0 00            [24] 1318 	push	ar0
      0004CD E5*00            [12] 1319 	mov	a,_bp
      0004CF 24 12            [12] 1320 	add	a,#0x12
      0004D1 F8               [12] 1321 	mov	r0,a
      0004D2 06               [12] 1322 	inc	@r0
      0004D3 D0 00            [24] 1323 	pop	ar0
      0004D5 02r04r50         [24] 1324 	ljmp	00119$
      0004D8                       1325 00106$:
                                   1326 ;	walk.c:178: if (f) {
      0004D8 EB               [12] 1327 	mov	a,r3
      0004D9 70 03            [24] 1328 	jnz	00162$
      0004DB 02r05rF2         [24] 1329 	ljmp	00115$
      0004DE                       1330 00162$:
                                   1331 ;	walk.c:179: while (1) {
      0004DE                       1332 00112$:
                                   1333 ;	walk.c:180: j = (uint8_t)(rand() % NMAX);
      0004DE C0 02            [24] 1334 	push	ar2
      0004E0 C0 06            [24] 1335 	push	ar6
      0004E2 C0 02            [24] 1336 	push	ar2
      0004E4 C0 01            [24] 1337 	push	ar1
      0004E6 C0 00            [24] 1338 	push	ar0
      0004E8 12r00r00         [24] 1339 	lcall	_rand
      0004EB AD 82            [24] 1340 	mov	r5,dpl
      0004ED D0 00            [24] 1341 	pop	ar0
      0004EF D0 01            [24] 1342 	pop	ar1
      0004F1 D0 02            [24] 1343 	pop	ar2
      0004F3 D0 06            [24] 1344 	pop	ar6
      0004F5 53 05 0F         [24] 1345 	anl	ar5,#0x0f
      0004F8 8D 04            [24] 1346 	mov	ar4,r5
                                   1347 ;	walk.c:181: if (!update(&t, &cur, j)) continue;
      0004FA C0 00            [24] 1348 	push	ar0
      0004FC E5*00            [12] 1349 	mov	a,_bp
      0004FE 24 05            [12] 1350 	add	a,#0x05
      000500 F8               [12] 1351 	mov	r0,a
      000501 C0 01            [24] 1352 	push	ar1
      000503 E5*00            [12] 1353 	mov	a,_bp
      000505 24 07            [12] 1354 	add	a,#0x07
      000507 F9               [12] 1355 	mov	r1,a
      000508 E6               [12] 1356 	mov	a,@r0
      000509 F7               [12] 1357 	mov	@r1,a
      00050A 09               [12] 1358 	inc	r1
      00050B 77 00            [12] 1359 	mov	@r1,#0x00
      00050D 09               [12] 1360 	inc	r1
      00050E 77 40            [12] 1361 	mov	@r1,#0x40
      000510 D0 01            [24] 1362 	pop	ar1
      000512 E5*00            [12] 1363 	mov	a,_bp
      000514 24 04            [12] 1364 	add	a,#0x04
      000516 F8               [12] 1365 	mov	r0,a
      000517 86 02            [24] 1366 	mov	ar2,@r0
      000519 7D 00            [12] 1367 	mov	r5,#0x00
      00051B 7F 40            [12] 1368 	mov	r7,#0x40
      00051D D0 00            [24] 1369 	pop	ar0
      00051F C0 06            [24] 1370 	push	ar6
      000521 C0 02            [24] 1371 	push	ar2
      000523 C0 01            [24] 1372 	push	ar1
      000525 C0 00            [24] 1373 	push	ar0
      000527 C0 04            [24] 1374 	push	ar4
      000529 85 00 F0         [24] 1375 	mov	b,ar0
      00052C E5*00            [12] 1376 	mov	a,_bp
      00052E 24 07            [12] 1377 	add	a,#0x07
      000530 F8               [12] 1378 	mov	r0,a
      000531 E6               [12] 1379 	mov	a,@r0
      000532 C0 E0            [24] 1380 	push	acc
      000534 08               [12] 1381 	inc	r0
      000535 E6               [12] 1382 	mov	a,@r0
      000536 C0 E0            [24] 1383 	push	acc
      000538 08               [12] 1384 	inc	r0
      000539 E6               [12] 1385 	mov	a,@r0
      00053A C0 E0            [24] 1386 	push	acc
      00053C 8A 82            [24] 1387 	mov	dpl,r2
      00053E 8D 83            [24] 1388 	mov	dph,r5
      000540 8F F0            [24] 1389 	mov	b,r7
      000542 12r00r73         [24] 1390 	lcall	_update
      000545 AF 82            [24] 1391 	mov	r7,dpl
      000547 E5 81            [12] 1392 	mov	a,sp
      000549 24 FC            [12] 1393 	add	a,#0xfc
      00054B F5 81            [12] 1394 	mov	sp,a
      00054D D0 00            [24] 1395 	pop	ar0
      00054F D0 01            [24] 1396 	pop	ar1
      000551 D0 02            [24] 1397 	pop	ar2
      000553 D0 06            [24] 1398 	pop	ar6
      000555 D0 02            [24] 1399 	pop	ar2
      000557 EF               [12] 1400 	mov	a,r7
      000558 60 84            [24] 1401 	jz	00112$
                                   1402 ;	walk.c:182: if (!stpush(&cur)) bang();
      00055A 8A 04            [24] 1403 	mov	ar4,r2
      00055C 7D 00            [12] 1404 	mov	r5,#0x00
      00055E 7F 40            [12] 1405 	mov	r7,#0x40
      000560 8C 82            [24] 1406 	mov	dpl,r4
      000562 8D 83            [24] 1407 	mov	dph,r5
      000564 8F F0            [24] 1408 	mov	b,r7
      000566 C0 06            [24] 1409 	push	ar6
      000568 C0 02            [24] 1410 	push	ar2
      00056A C0 01            [24] 1411 	push	ar1
      00056C C0 00            [24] 1412 	push	ar0
      00056E 12r0Ar5C         [24] 1413 	lcall	_stpush
      000571 E5 82            [12] 1414 	mov	a,dpl
      000573 D0 00            [24] 1415 	pop	ar0
      000575 D0 01            [24] 1416 	pop	ar1
      000577 D0 02            [24] 1417 	pop	ar2
      000579 D0 06            [24] 1418 	pop	ar6
      00057B 70 13            [24] 1419 	jnz	00110$
      00057D C0 06            [24] 1420 	push	ar6
      00057F C0 02            [24] 1421 	push	ar2
      000581 C0 01            [24] 1422 	push	ar1
      000583 C0 00            [24] 1423 	push	ar0
      000585 12r00r1A         [24] 1424 	lcall	_bang
      000588 D0 00            [24] 1425 	pop	ar0
      00058A D0 01            [24] 1426 	pop	ar1
      00058C D0 02            [24] 1427 	pop	ar2
      00058E D0 06            [24] 1428 	pop	ar6
      000590                       1429 00110$:
                                   1430 ;	walk.c:183: cur = t;
      000590 C0 02            [24] 1431 	push	ar2
      000592 C0 00            [24] 1432 	push	ar0
      000594 A8*00            [24] 1433 	mov	r0,_bp
      000596 08               [12] 1434 	inc	r0
      000597 C0 01            [24] 1435 	push	ar1
      000599 E5*00            [12] 1436 	mov	a,_bp
      00059B 24 07            [12] 1437 	add	a,#0x07
      00059D F9               [12] 1438 	mov	r1,a
      00059E E6               [12] 1439 	mov	a,@r0
      00059F F7               [12] 1440 	mov	@r1,a
      0005A0 09               [12] 1441 	inc	r1
      0005A1 77 00            [12] 1442 	mov	@r1,#0x00
      0005A3 09               [12] 1443 	inc	r1
      0005A4 77 40            [12] 1444 	mov	@r1,#0x40
      0005A6 D0 01            [24] 1445 	pop	ar1
      0005A8 A8*00            [24] 1446 	mov	r0,_bp
      0005AA 08               [12] 1447 	inc	r0
      0005AB 08               [12] 1448 	inc	r0
      0005AC 86 02            [24] 1449 	mov	ar2,@r0
      0005AE 7B 00            [12] 1450 	mov	r3,#0x00
      0005B0 7F 40            [12] 1451 	mov	r7,#0x40
      0005B2 D0 00            [24] 1452 	pop	ar0
      0005B4 C0 06            [24] 1453 	push	ar6
      0005B6 C0 02            [24] 1454 	push	ar2
      0005B8 C0 01            [24] 1455 	push	ar1
      0005BA C0 00            [24] 1456 	push	ar0
      0005BC 74 04            [12] 1457 	mov	a,#0x04
      0005BE C0 E0            [24] 1458 	push	acc
      0005C0 E4               [12] 1459 	clr	a
      0005C1 C0 E0            [24] 1460 	push	acc
      0005C3 85 00 F0         [24] 1461 	mov	b,ar0
      0005C6 E5*00            [12] 1462 	mov	a,_bp
      0005C8 24 07            [12] 1463 	add	a,#0x07
      0005CA F8               [12] 1464 	mov	r0,a
      0005CB E6               [12] 1465 	mov	a,@r0
      0005CC C0 E0            [24] 1466 	push	acc
      0005CE 08               [12] 1467 	inc	r0
      0005CF E6               [12] 1468 	mov	a,@r0
      0005D0 C0 E0            [24] 1469 	push	acc
      0005D2 08               [12] 1470 	inc	r0
      0005D3 E6               [12] 1471 	mov	a,@r0
      0005D4 C0 E0            [24] 1472 	push	acc
      0005D6 8A 82            [24] 1473 	mov	dpl,r2
      0005D8 8B 83            [24] 1474 	mov	dph,r3
      0005DA 8F F0            [24] 1475 	mov	b,r7
      0005DC 12r00r00         [24] 1476 	lcall	___memcpy
      0005DF E5 81            [12] 1477 	mov	a,sp
      0005E1 24 FB            [12] 1478 	add	a,#0xfb
      0005E3 F5 81            [12] 1479 	mov	sp,a
      0005E5 D0 00            [24] 1480 	pop	ar0
      0005E7 D0 01            [24] 1481 	pop	ar1
      0005E9 D0 02            [24] 1482 	pop	ar2
      0005EB D0 06            [24] 1483 	pop	ar6
                                   1484 ;	walk.c:184: goto process;
      0005ED D0 02            [24] 1485 	pop	ar2
      0005EF 02r03r6C         [24] 1486 	ljmp	00101$
      0005F2                       1487 00115$:
                                   1488 ;	walk.c:188: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005F2 86 05            [24] 1489 	mov	ar5,@r0
      0005F4 08               [12] 1490 	inc	r0
      0005F5 86 07            [24] 1491 	mov	ar7,@r0
      0005F7 18               [12] 1492 	dec	r0
      0005F8 0D               [12] 1493 	inc	r5
      0005F9 BD 00 01         [24] 1494 	cjne	r5,#0x00,00165$
      0005FC 0F               [12] 1495 	inc	r7
      0005FD                       1496 00165$:
      0005FD 87 03            [24] 1497 	mov	ar3,@r1
      0005FF 09               [12] 1498 	inc	r1
      000600 87 04            [24] 1499 	mov	ar4,@r1
      000602 19               [12] 1500 	dec	r1
      000603 74 04            [12] 1501 	mov	a,#0x04
      000605 2B               [12] 1502 	add	a,r3
      000606 FB               [12] 1503 	mov	r3,a
      000607 E4               [12] 1504 	clr	a
      000608 3C               [12] 1505 	addc	a,r4
      000609 FC               [12] 1506 	mov	r4,a
      00060A C0 06            [24] 1507 	push	ar6
      00060C C0 02            [24] 1508 	push	ar2
      00060E C0 01            [24] 1509 	push	ar1
      000610 C0 00            [24] 1510 	push	ar0
      000612 C0 05            [24] 1511 	push	ar5
      000614 C0 07            [24] 1512 	push	ar7
      000616 C0 03            [24] 1513 	push	ar3
      000618 C0 04            [24] 1514 	push	ar4
      00061A 74r2A            [12] 1515 	mov	a,#___str_3
      00061C C0 E0            [24] 1516 	push	acc
      00061E 74s00            [12] 1517 	mov	a,#(___str_3 >> 8)
      000620 C0 E0            [24] 1518 	push	acc
      000622 74 80            [12] 1519 	mov	a,#0x80
      000624 C0 E0            [24] 1520 	push	acc
      000626 12r00r00         [24] 1521 	lcall	_printf
      000629 E5 81            [12] 1522 	mov	a,sp
      00062B 24 F9            [12] 1523 	add	a,#0xf9
      00062D F5 81            [12] 1524 	mov	sp,a
                                   1525 ;	walk.c:189: setOE(OE76_MASK6);
      00062F 75 82 40         [24] 1526 	mov	dpl,#0x40
      000632 12r00r27         [24] 1527 	lcall	_setOE
      000635 D0 00            [24] 1528 	pop	ar0
      000637 D0 01            [24] 1529 	pop	ar1
      000639 D0 02            [24] 1530 	pop	ar2
      00063B D0 06            [24] 1531 	pop	ar6
                                   1532 ;	walk.c:191: if (stpop(&cur)) goto next;
      00063D C0 00            [24] 1533 	push	ar0
      00063F E5*00            [12] 1534 	mov	a,_bp
      000641 24 03            [12] 1535 	add	a,#0x03
      000643 F8               [12] 1536 	mov	r0,a
      000644 86 04            [24] 1537 	mov	ar4,@r0
      000646 7D 00            [12] 1538 	mov	r5,#0x00
      000648 7F 40            [12] 1539 	mov	r7,#0x40
      00064A D0 00            [24] 1540 	pop	ar0
      00064C 8C 82            [24] 1541 	mov	dpl,r4
      00064E 8D 83            [24] 1542 	mov	dph,r5
      000650 8F F0            [24] 1543 	mov	b,r7
      000652 C0 06            [24] 1544 	push	ar6
      000654 C0 02            [24] 1545 	push	ar2
      000656 C0 01            [24] 1546 	push	ar1
      000658 C0 00            [24] 1547 	push	ar0
      00065A 12r0ArBD         [24] 1548 	lcall	_stpop
      00065D E5 82            [12] 1549 	mov	a,dpl
      00065F D0 00            [24] 1550 	pop	ar0
      000661 D0 01            [24] 1551 	pop	ar1
      000663 D0 02            [24] 1552 	pop	ar2
      000665 D0 06            [24] 1553 	pop	ar6
      000667 60 03            [24] 1554 	jz	00166$
      000669 02r03rF6         [24] 1555 	ljmp	00102$
      00066C                       1556 00166$:
                                   1557 ;	walk.c:193: unsetOE(OE76_MASK7 | OE76_MASK6);
      00066C 75 82 C0         [24] 1558 	mov	dpl,#0xc0
      00066F 12r00r40         [24] 1559 	lcall	_unsetOE
                                   1560 ;	walk.c:195: return;
                                   1561 ;	walk.c:196: }
      000672 85*00 81         [24] 1562 	mov	sp,_bp
      000675 D0*00            [24] 1563 	pop	_bp
      000677 22               [24] 1564 	ret
                                   1565 ;------------------------------------------------------------
                                   1566 ;Allocation info for local variables in function 'main'
                                   1567 ;------------------------------------------------------------
                                   1568 ;initial                   Allocated to stack - _bp +7
                                   1569 ;N                         Allocated to stack - _bp +11
                                   1570 ;i                         Allocated to stack - _bp +5
                                   1571 ;j                         Allocated to registers r2 r6 
                                   1572 ;sloc0                     Allocated to stack - _bp +1
                                   1573 ;sloc1                     Allocated to stack - _bp +3
                                   1574 ;sloc2                     Allocated to stack - _bp +15
                                   1575 ;------------------------------------------------------------
                                   1576 ;	walk.c:198: void main(void) {
                                   1577 ;	-----------------------------------------
                                   1578 ;	 function main
                                   1579 ;	-----------------------------------------
      000678                       1580 _main:
      000678 C0*00            [24] 1581 	push	_bp
      00067A E5 81            [12] 1582 	mov	a,sp
      00067C F5*00            [12] 1583 	mov	_bp,a
      00067E 24 0C            [12] 1584 	add	a,#0x0c
      000680 F5 81            [12] 1585 	mov	sp,a
                                   1586 ;	walk.c:203: i0 = 1u;
      000682 78r00            [12] 1587 	mov	r0,#_i0
      000684 76 01            [12] 1588 	mov	@r0,#0x01
                                   1589 ;	walk.c:205: P1_7 = 1;
                                   1590 ;	assignBit
      000686 D2 97            [12] 1591 	setb	_P1_7
                                   1592 ;	walk.c:206: IT0 = 1;
                                   1593 ;	assignBit
      000688 D2 88            [12] 1594 	setb	_IT0
                                   1595 ;	walk.c:207: EX0 = 1;
                                   1596 ;	assignBit
      00068A D2 A8            [12] 1597 	setb	_EX0
                                   1598 ;	walk.c:208: EA = 1;
                                   1599 ;	assignBit
      00068C D2 AF            [12] 1600 	setb	_EA
                                   1601 ;	walk.c:210: srand(RND);
      00068E 90 80 00         [24] 1602 	mov	dptr,#_RND
      000691 E0               [24] 1603 	movx	a,@dptr
      000692 FE               [12] 1604 	mov	r6,a
      000693 A3               [24] 1605 	inc	dptr
      000694 E0               [24] 1606 	movx	a,@dptr
      000695 FF               [12] 1607 	mov	r7,a
      000696 8E 82            [24] 1608 	mov	dpl,r6
      000698 8F 83            [24] 1609 	mov	dph,r7
      00069A 12r00r00         [24] 1610 	lcall	_srand
                                   1611 ;	walk.c:211: stinit();
      00069D 12r0Ar53         [24] 1612 	lcall	_stinit
                                   1613 ;	walk.c:213: puts("\033[2J\033[?25l");
      0006A0 90r00r34         [24] 1614 	mov	dptr,#___str_4
      0006A3 75 F0 80         [24] 1615 	mov	b,#0x80
      0006A6 12r00r00         [24] 1616 	lcall	_puts
                                   1617 ;	walk.c:215: while (i0) {
      0006A9 E5*00            [12] 1618 	mov	a,_bp
      0006AB 24 07            [12] 1619 	add	a,#0x07
      0006AD F9               [12] 1620 	mov	r1,a
      0006AE FF               [12] 1621 	mov	r7,a
      0006AF E5*00            [12] 1622 	mov	a,_bp
      0006B1 24 0B            [12] 1623 	add	a,#0x0b
      0006B3 F8               [12] 1624 	mov	r0,a
      0006B4 E4               [12] 1625 	clr	a
      0006B5 F6               [12] 1626 	mov	@r0,a
      0006B6 08               [12] 1627 	inc	r0
      0006B7 F6               [12] 1628 	mov	@r0,a
      0006B8                       1629 00108$:
      0006B8 78r00            [12] 1630 	mov	r0,#_i0
      0006BA E6               [12] 1631 	mov	a,@r0
      0006BB 70 03            [24] 1632 	jnz	00182$
      0006BD 02r0Ar3F         [24] 1633 	ljmp	00110$
      0006C0                       1634 00182$:
                                   1635 ;	walk.c:216: for (i = 0; i < ROWS; i++)
      0006C0 7B 00            [12] 1636 	mov	r3,#0x00
      0006C2 7C 00            [12] 1637 	mov	r4,#0x00
      0006C4 A8*00            [24] 1638 	mov	r0,_bp
      0006C6 08               [12] 1639 	inc	r0
      0006C7 E4               [12] 1640 	clr	a
      0006C8 F6               [12] 1641 	mov	@r0,a
      0006C9 08               [12] 1642 	inc	r0
      0006CA F6               [12] 1643 	mov	@r0,a
                                   1644 ;	walk.c:217: for (j = 0; j < COLS; j++)
      0006CB                       1645 00125$:
      0006CB A8*00            [24] 1646 	mov	r0,_bp
      0006CD 08               [12] 1647 	inc	r0
      0006CE C0 01            [24] 1648 	push	ar1
      0006D0 E5*00            [12] 1649 	mov	a,_bp
      0006D2 24 03            [12] 1650 	add	a,#0x03
      0006D4 F9               [12] 1651 	mov	r1,a
      0006D5 E6               [12] 1652 	mov	a,@r0
      0006D6 24r00            [12] 1653 	add	a,#_g
      0006D8 F7               [12] 1654 	mov	@r1,a
      0006D9 08               [12] 1655 	inc	r0
      0006DA E6               [12] 1656 	mov	a,@r0
      0006DB 34s00            [12] 1657 	addc	a,#(_g >> 8)
      0006DD 09               [12] 1658 	inc	r1
      0006DE F7               [12] 1659 	mov	@r1,a
      0006DF D0 01            [24] 1660 	pop	ar1
      0006E1 7A 00            [12] 1661 	mov	r2,#0x00
      0006E3 7E 00            [12] 1662 	mov	r6,#0x00
      0006E5                       1663 00112$:
                                   1664 ;	walk.c:218: g[i][j] = 0x55u;
      0006E5 E5*00            [12] 1665 	mov	a,_bp
      0006E7 24 03            [12] 1666 	add	a,#0x03
      0006E9 F8               [12] 1667 	mov	r0,a
      0006EA EA               [12] 1668 	mov	a,r2
      0006EB 26               [12] 1669 	add	a,@r0
      0006EC F5 82            [12] 1670 	mov	dpl,a
      0006EE EE               [12] 1671 	mov	a,r6
      0006EF 08               [12] 1672 	inc	r0
      0006F0 36               [12] 1673 	addc	a,@r0
      0006F1 F5 83            [12] 1674 	mov	dph,a
      0006F3 74 55            [12] 1675 	mov	a,#0x55
      0006F5 F0               [24] 1676 	movx	@dptr,a
                                   1677 ;	walk.c:217: for (j = 0; j < COLS; j++)
      0006F6 0A               [12] 1678 	inc	r2
      0006F7 BA 00 01         [24] 1679 	cjne	r2,#0x00,00183$
      0006FA 0E               [12] 1680 	inc	r6
      0006FB                       1681 00183$:
      0006FB C3               [12] 1682 	clr	c
      0006FC EA               [12] 1683 	mov	a,r2
      0006FD 94 C9            [12] 1684 	subb	a,#0xc9
      0006FF EE               [12] 1685 	mov	a,r6
      000700 64 80            [12] 1686 	xrl	a,#0x80
      000702 94 80            [12] 1687 	subb	a,#0x80
      000704 40 DF            [24] 1688 	jc	00112$
                                   1689 ;	walk.c:216: for (i = 0; i < ROWS; i++)
      000706 A8*00            [24] 1690 	mov	r0,_bp
      000708 08               [12] 1691 	inc	r0
      000709 74 C9            [12] 1692 	mov	a,#0xc9
      00070B 26               [12] 1693 	add	a,@r0
      00070C F6               [12] 1694 	mov	@r0,a
      00070D E4               [12] 1695 	clr	a
      00070E 08               [12] 1696 	inc	r0
      00070F 36               [12] 1697 	addc	a,@r0
      000710 F6               [12] 1698 	mov	@r0,a
      000711 0B               [12] 1699 	inc	r3
      000712 BB 00 01         [24] 1700 	cjne	r3,#0x00,00185$
      000715 0C               [12] 1701 	inc	r4
      000716                       1702 00185$:
      000716 C3               [12] 1703 	clr	c
      000717 EB               [12] 1704 	mov	a,r3
      000718 94 30            [12] 1705 	subb	a,#0x30
      00071A EC               [12] 1706 	mov	a,r4
      00071B 64 80            [12] 1707 	xrl	a,#0x80
      00071D 94 80            [12] 1708 	subb	a,#0x80
      00071F 40 AA            [24] 1709 	jc	00125$
                                   1710 ;	walk.c:220: initial.r = rand() % ROWS;
      000721 E5*00            [12] 1711 	mov	a,_bp
      000723 24 07            [12] 1712 	add	a,#0x07
      000725 F8               [12] 1713 	mov	r0,a
      000726 C0 07            [24] 1714 	push	ar7
      000728 C0 01            [24] 1715 	push	ar1
      00072A C0 00            [24] 1716 	push	ar0
      00072C 12r00r00         [24] 1717 	lcall	_rand
      00072F AD 82            [24] 1718 	mov	r5,dpl
      000731 AE 83            [24] 1719 	mov	r6,dph
      000733 74 30            [12] 1720 	mov	a,#0x30
      000735 C0 E0            [24] 1721 	push	acc
      000737 E4               [12] 1722 	clr	a
      000738 C0 E0            [24] 1723 	push	acc
      00073A 8D 82            [24] 1724 	mov	dpl,r5
      00073C 8E 83            [24] 1725 	mov	dph,r6
      00073E 12r00r00         [24] 1726 	lcall	__modsint
      000741 AD 82            [24] 1727 	mov	r5,dpl
      000743 AE 83            [24] 1728 	mov	r6,dph
      000745 15 81            [12] 1729 	dec	sp
      000747 15 81            [12] 1730 	dec	sp
      000749 D0 00            [24] 1731 	pop	ar0
      00074B D0 01            [24] 1732 	pop	ar1
      00074D A6 05            [24] 1733 	mov	@r0,ar5
      00074F 08               [12] 1734 	inc	r0
      000750 A6 06            [24] 1735 	mov	@r0,ar6
      000752 18               [12] 1736 	dec	r0
                                   1737 ;	walk.c:221: initial.c = rand() % COLS;
      000753 74 02            [12] 1738 	mov	a,#0x02
      000755 29               [12] 1739 	add	a,r1
      000756 F8               [12] 1740 	mov	r0,a
      000757 C0 01            [24] 1741 	push	ar1
      000759 C0 00            [24] 1742 	push	ar0
      00075B 12r00r00         [24] 1743 	lcall	_rand
      00075E AD 82            [24] 1744 	mov	r5,dpl
      000760 AE 83            [24] 1745 	mov	r6,dph
      000762 74 C9            [12] 1746 	mov	a,#0xc9
      000764 C0 E0            [24] 1747 	push	acc
      000766 E4               [12] 1748 	clr	a
      000767 C0 E0            [24] 1749 	push	acc
      000769 8D 82            [24] 1750 	mov	dpl,r5
      00076B 8E 83            [24] 1751 	mov	dph,r6
      00076D 12r00r00         [24] 1752 	lcall	__modsint
      000770 AD 82            [24] 1753 	mov	r5,dpl
      000772 AE 83            [24] 1754 	mov	r6,dph
      000774 15 81            [12] 1755 	dec	sp
      000776 15 81            [12] 1756 	dec	sp
      000778 D0 00            [24] 1757 	pop	ar0
      00077A A6 05            [24] 1758 	mov	@r0,ar5
      00077C 08               [12] 1759 	inc	r0
      00077D A6 06            [24] 1760 	mov	@r0,ar6
      00077F 18               [12] 1761 	dec	r0
                                   1762 ;	walk.c:223: puts("\033[2J\033[?25l");
      000780 90r00r34         [24] 1763 	mov	dptr,#___str_4
      000783 75 F0 80         [24] 1764 	mov	b,#0x80
      000786 C0 00            [24] 1765 	push	ar0
      000788 12r00r00         [24] 1766 	lcall	_puts
      00078B D0 00            [24] 1767 	pop	ar0
      00078D D0 01            [24] 1768 	pop	ar1
                                   1769 ;	walk.c:224: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00078F 86 05            [24] 1770 	mov	ar5,@r0
      000791 08               [12] 1771 	inc	r0
      000792 86 06            [24] 1772 	mov	ar6,@r0
      000794 18               [12] 1773 	dec	r0
      000795 87 03            [24] 1774 	mov	ar3,@r1
      000797 09               [12] 1775 	inc	r1
      000798 87 04            [24] 1776 	mov	ar4,@r1
      00079A 19               [12] 1777 	dec	r1
      00079B C0 01            [24] 1778 	push	ar1
      00079D C0 05            [24] 1779 	push	ar5
      00079F C0 06            [24] 1780 	push	ar6
      0007A1 C0 03            [24] 1781 	push	ar3
      0007A3 C0 04            [24] 1782 	push	ar4
      0007A5 E5*00            [12] 1783 	mov	a,_bp
      0007A7 24 0B            [12] 1784 	add	a,#0x0b
      0007A9 F8               [12] 1785 	mov	r0,a
      0007AA E6               [12] 1786 	mov	a,@r0
      0007AB C0 E0            [24] 1787 	push	acc
      0007AD 08               [12] 1788 	inc	r0
      0007AE E6               [12] 1789 	mov	a,@r0
      0007AF C0 E0            [24] 1790 	push	acc
      0007B1 74r3F            [12] 1791 	mov	a,#___str_5
      0007B3 C0 E0            [24] 1792 	push	acc
      0007B5 74s00            [12] 1793 	mov	a,#(___str_5 >> 8)
      0007B7 C0 E0            [24] 1794 	push	acc
      0007B9 74 80            [12] 1795 	mov	a,#0x80
      0007BB C0 E0            [24] 1796 	push	acc
      0007BD 12r00r00         [24] 1797 	lcall	_printf
      0007C0 E5 81            [12] 1798 	mov	a,sp
      0007C2 24 F7            [12] 1799 	add	a,#0xf7
      0007C4 F5 81            [12] 1800 	mov	sp,a
      0007C6 D0 01            [24] 1801 	pop	ar1
      0007C8 D0 07            [24] 1802 	pop	ar7
                                   1803 ;	walk.c:226: for (i = 0; i < REG; i++) {
      0007CA E5*00            [12] 1804 	mov	a,_bp
      0007CC 24 05            [12] 1805 	add	a,#0x05
      0007CE F8               [12] 1806 	mov	r0,a
      0007CF E4               [12] 1807 	clr	a
      0007D0 F6               [12] 1808 	mov	@r0,a
      0007D1 08               [12] 1809 	inc	r0
      0007D2 F6               [12] 1810 	mov	@r0,a
      0007D3                       1811 00116$:
                                   1812 ;	walk.c:227: neigh[i].r = neigh[REG + i].r * (1 + rand() % 8);
      0007D3 C0 07            [24] 1813 	push	ar7
      0007D5 E5*00            [12] 1814 	mov	a,_bp
      0007D7 24 05            [12] 1815 	add	a,#0x05
      0007D9 F8               [12] 1816 	mov	r0,a
      0007DA E6               [12] 1817 	mov	a,@r0
      0007DB 25 E0            [12] 1818 	add	a,acc
      0007DD FB               [12] 1819 	mov	r3,a
      0007DE 08               [12] 1820 	inc	r0
      0007DF E6               [12] 1821 	mov	a,@r0
      0007E0 33               [12] 1822 	rlc	a
      0007E1 FC               [12] 1823 	mov	r4,a
      0007E2 EB               [12] 1824 	mov	a,r3
      0007E3 2B               [12] 1825 	add	a,r3
      0007E4 FB               [12] 1826 	mov	r3,a
      0007E5 EC               [12] 1827 	mov	a,r4
      0007E6 33               [12] 1828 	rlc	a
      0007E7 FC               [12] 1829 	mov	r4,a
      0007E8 E5*00            [12] 1830 	mov	a,_bp
      0007EA 24 03            [12] 1831 	add	a,#0x03
      0007EC F8               [12] 1832 	mov	r0,a
      0007ED EB               [12] 1833 	mov	a,r3
      0007EE 24r00            [12] 1834 	add	a,#_neigh
      0007F0 F6               [12] 1835 	mov	@r0,a
      0007F1 EC               [12] 1836 	mov	a,r4
      0007F2 34s00            [12] 1837 	addc	a,#(_neigh >> 8)
      0007F4 08               [12] 1838 	inc	r0
      0007F5 F6               [12] 1839 	mov	@r0,a
      0007F6 E5*00            [12] 1840 	mov	a,_bp
      0007F8 24 05            [12] 1841 	add	a,#0x05
      0007FA F8               [12] 1842 	mov	r0,a
      0007FB 86 06            [24] 1843 	mov	ar6,@r0
      0007FD 74 08            [12] 1844 	mov	a,#0x08
      0007FF 2E               [12] 1845 	add	a,r6
      000800 FE               [12] 1846 	mov	r6,a
      000801 C2 D5            [12] 1847 	clr	F0
      000803 75 F0 04         [24] 1848 	mov	b,#0x04
      000806 EE               [12] 1849 	mov	a,r6
      000807 30 E7 04         [24] 1850 	jnb	acc.7,00187$
      00080A B2 D5            [12] 1851 	cpl	F0
      00080C F4               [12] 1852 	cpl	a
      00080D 04               [12] 1853 	inc	a
      00080E                       1854 00187$:
      00080E A4               [48] 1855 	mul	ab
      00080F 30 D5 0A         [24] 1856 	jnb	F0,00188$
      000812 F4               [12] 1857 	cpl	a
      000813 24 01            [12] 1858 	add	a,#0x01
      000815 C5 F0            [12] 1859 	xch	a,b
      000817 F4               [12] 1860 	cpl	a
      000818 34 00            [12] 1861 	addc	a,#0x00
      00081A C5 F0            [12] 1862 	xch	a,b
      00081C                       1863 00188$:
      00081C FE               [12] 1864 	mov	r6,a
      00081D AD F0            [24] 1865 	mov	r5,b
      00081F 24r00            [12] 1866 	add	a,#_neigh
      000821 F5 82            [12] 1867 	mov	dpl,a
      000823 ED               [12] 1868 	mov	a,r5
      000824 34s00            [12] 1869 	addc	a,#(_neigh >> 8)
      000826 F5 83            [12] 1870 	mov	dph,a
      000828 A8*00            [24] 1871 	mov	r0,_bp
      00082A 08               [12] 1872 	inc	r0
      00082B E0               [24] 1873 	movx	a,@dptr
      00082C F6               [12] 1874 	mov	@r0,a
      00082D A3               [24] 1875 	inc	dptr
      00082E E0               [24] 1876 	movx	a,@dptr
      00082F 08               [12] 1877 	inc	r0
      000830 F6               [12] 1878 	mov	@r0,a
      000831 C0 06            [24] 1879 	push	ar6
      000833 C0 05            [24] 1880 	push	ar5
      000835 C0 04            [24] 1881 	push	ar4
      000837 C0 03            [24] 1882 	push	ar3
      000839 C0 01            [24] 1883 	push	ar1
      00083B 12r00r00         [24] 1884 	lcall	_rand
      00083E AA 82            [24] 1885 	mov	r2,dpl
      000840 AF 83            [24] 1886 	mov	r7,dph
      000842 74 08            [12] 1887 	mov	a,#0x08
      000844 C0 E0            [24] 1888 	push	acc
      000846 E4               [12] 1889 	clr	a
      000847 C0 E0            [24] 1890 	push	acc
      000849 8A 82            [24] 1891 	mov	dpl,r2
      00084B 8F 83            [24] 1892 	mov	dph,r7
      00084D 12r00r00         [24] 1893 	lcall	__modsint
      000850 AA 82            [24] 1894 	mov	r2,dpl
      000852 AF 83            [24] 1895 	mov	r7,dph
      000854 15 81            [12] 1896 	dec	sp
      000856 15 81            [12] 1897 	dec	sp
      000858 D0 01            [24] 1898 	pop	ar1
      00085A D0 03            [24] 1899 	pop	ar3
      00085C D0 04            [24] 1900 	pop	ar4
      00085E D0 05            [24] 1901 	pop	ar5
      000860 D0 06            [24] 1902 	pop	ar6
      000862 0A               [12] 1903 	inc	r2
      000863 BA 00 01         [24] 1904 	cjne	r2,#0x00,00189$
      000866 0F               [12] 1905 	inc	r7
      000867                       1906 00189$:
      000867 C0 06            [24] 1907 	push	ar6
      000869 C0 05            [24] 1908 	push	ar5
      00086B C0 04            [24] 1909 	push	ar4
      00086D C0 03            [24] 1910 	push	ar3
      00086F C0 01            [24] 1911 	push	ar1
      000871 C0 02            [24] 1912 	push	ar2
      000873 C0 07            [24] 1913 	push	ar7
      000875 A8*00            [24] 1914 	mov	r0,_bp
      000877 08               [12] 1915 	inc	r0
      000878 86 82            [24] 1916 	mov	dpl,@r0
      00087A 08               [12] 1917 	inc	r0
      00087B 86 83            [24] 1918 	mov	dph,@r0
      00087D 12r00r00         [24] 1919 	lcall	__mulint
      000880 AA 82            [24] 1920 	mov	r2,dpl
      000882 AF 83            [24] 1921 	mov	r7,dph
      000884 15 81            [12] 1922 	dec	sp
      000886 15 81            [12] 1923 	dec	sp
      000888 D0 01            [24] 1924 	pop	ar1
      00088A D0 03            [24] 1925 	pop	ar3
      00088C D0 04            [24] 1926 	pop	ar4
      00088E D0 05            [24] 1927 	pop	ar5
      000890 D0 06            [24] 1928 	pop	ar6
      000892 E5*00            [12] 1929 	mov	a,_bp
      000894 24 03            [12] 1930 	add	a,#0x03
      000896 F8               [12] 1931 	mov	r0,a
      000897 86 82            [24] 1932 	mov	dpl,@r0
      000899 08               [12] 1933 	inc	r0
      00089A 86 83            [24] 1934 	mov	dph,@r0
      00089C EA               [12] 1935 	mov	a,r2
      00089D F0               [24] 1936 	movx	@dptr,a
      00089E EF               [12] 1937 	mov	a,r7
      00089F A3               [24] 1938 	inc	dptr
      0008A0 F0               [24] 1939 	movx	@dptr,a
                                   1940 ;	walk.c:228: neigh[i].c = neigh[REG + i].c * (1 + rand() % 8);
      0008A1 EB               [12] 1941 	mov	a,r3
      0008A2 24r00            [12] 1942 	add	a,#_neigh
      0008A4 FB               [12] 1943 	mov	r3,a
      0008A5 EC               [12] 1944 	mov	a,r4
      0008A6 34s00            [12] 1945 	addc	a,#(_neigh >> 8)
      0008A8 FC               [12] 1946 	mov	r4,a
      0008A9 74 02            [12] 1947 	mov	a,#0x02
      0008AB 2B               [12] 1948 	add	a,r3
      0008AC FA               [12] 1949 	mov	r2,a
      0008AD E4               [12] 1950 	clr	a
      0008AE 3C               [12] 1951 	addc	a,r4
      0008AF FF               [12] 1952 	mov	r7,a
      0008B0 EE               [12] 1953 	mov	a,r6
      0008B1 24r00            [12] 1954 	add	a,#_neigh
      0008B3 FE               [12] 1955 	mov	r6,a
      0008B4 ED               [12] 1956 	mov	a,r5
      0008B5 34s00            [12] 1957 	addc	a,#(_neigh >> 8)
      0008B7 FD               [12] 1958 	mov	r5,a
      0008B8 8E 82            [24] 1959 	mov	dpl,r6
      0008BA 8D 83            [24] 1960 	mov	dph,r5
      0008BC A3               [24] 1961 	inc	dptr
      0008BD A3               [24] 1962 	inc	dptr
      0008BE E5*00            [12] 1963 	mov	a,_bp
      0008C0 24 03            [12] 1964 	add	a,#0x03
      0008C2 F8               [12] 1965 	mov	r0,a
      0008C3 E0               [24] 1966 	movx	a,@dptr
      0008C4 F6               [12] 1967 	mov	@r0,a
      0008C5 A3               [24] 1968 	inc	dptr
      0008C6 E0               [24] 1969 	movx	a,@dptr
      0008C7 08               [12] 1970 	inc	r0
      0008C8 F6               [12] 1971 	mov	@r0,a
      0008C9 C0 07            [24] 1972 	push	ar7
      0008CB C0 04            [24] 1973 	push	ar4
      0008CD C0 03            [24] 1974 	push	ar3
      0008CF C0 02            [24] 1975 	push	ar2
      0008D1 C0 01            [24] 1976 	push	ar1
      0008D3 12r00r00         [24] 1977 	lcall	_rand
      0008D6 AD 82            [24] 1978 	mov	r5,dpl
      0008D8 AE 83            [24] 1979 	mov	r6,dph
      0008DA 74 08            [12] 1980 	mov	a,#0x08
      0008DC C0 E0            [24] 1981 	push	acc
      0008DE E4               [12] 1982 	clr	a
      0008DF C0 E0            [24] 1983 	push	acc
      0008E1 8D 82            [24] 1984 	mov	dpl,r5
      0008E3 8E 83            [24] 1985 	mov	dph,r6
      0008E5 12r00r00         [24] 1986 	lcall	__modsint
      0008E8 AD 82            [24] 1987 	mov	r5,dpl
      0008EA AE 83            [24] 1988 	mov	r6,dph
      0008EC 15 81            [12] 1989 	dec	sp
      0008EE 15 81            [12] 1990 	dec	sp
      0008F0 D0 01            [24] 1991 	pop	ar1
      0008F2 D0 02            [24] 1992 	pop	ar2
      0008F4 D0 03            [24] 1993 	pop	ar3
      0008F6 D0 04            [24] 1994 	pop	ar4
      0008F8 D0 07            [24] 1995 	pop	ar7
      0008FA 0D               [12] 1996 	inc	r5
      0008FB BD 00 01         [24] 1997 	cjne	r5,#0x00,00190$
      0008FE 0E               [12] 1998 	inc	r6
      0008FF                       1999 00190$:
      0008FF C0 07            [24] 2000 	push	ar7
      000901 C0 04            [24] 2001 	push	ar4
      000903 C0 03            [24] 2002 	push	ar3
      000905 C0 02            [24] 2003 	push	ar2
      000907 C0 01            [24] 2004 	push	ar1
      000909 C0 05            [24] 2005 	push	ar5
      00090B C0 06            [24] 2006 	push	ar6
      00090D E5*00            [12] 2007 	mov	a,_bp
      00090F 24 03            [12] 2008 	add	a,#0x03
      000911 F8               [12] 2009 	mov	r0,a
      000912 86 82            [24] 2010 	mov	dpl,@r0
      000914 08               [12] 2011 	inc	r0
      000915 86 83            [24] 2012 	mov	dph,@r0
      000917 12r00r00         [24] 2013 	lcall	__mulint
      00091A AD 82            [24] 2014 	mov	r5,dpl
      00091C AE 83            [24] 2015 	mov	r6,dph
      00091E 15 81            [12] 2016 	dec	sp
      000920 15 81            [12] 2017 	dec	sp
      000922 D0 01            [24] 2018 	pop	ar1
      000924 D0 02            [24] 2019 	pop	ar2
      000926 D0 03            [24] 2020 	pop	ar3
      000928 D0 04            [24] 2021 	pop	ar4
      00092A D0 07            [24] 2022 	pop	ar7
      00092C 8A 82            [24] 2023 	mov	dpl,r2
      00092E 8F 83            [24] 2024 	mov	dph,r7
      000930 ED               [12] 2025 	mov	a,r5
      000931 F0               [24] 2026 	movx	@dptr,a
      000932 EE               [12] 2027 	mov	a,r6
      000933 A3               [24] 2028 	inc	dptr
      000934 F0               [24] 2029 	movx	@dptr,a
                                   2030 ;	walk.c:229: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000935 8B 82            [24] 2031 	mov	dpl,r3
      000937 8C 83            [24] 2032 	mov	dph,r4
      000939 E0               [24] 2033 	movx	a,@dptr
      00093A FB               [12] 2034 	mov	r3,a
      00093B A3               [24] 2035 	inc	dptr
      00093C E0               [24] 2036 	movx	a,@dptr
      00093D FC               [12] 2037 	mov	r4,a
      00093E C0 07            [24] 2038 	push	ar7
      000940 C0 01            [24] 2039 	push	ar1
      000942 C0 05            [24] 2040 	push	ar5
      000944 C0 06            [24] 2041 	push	ar6
      000946 C0 03            [24] 2042 	push	ar3
      000948 C0 04            [24] 2043 	push	ar4
      00094A 74r52            [12] 2044 	mov	a,#___str_6
      00094C C0 E0            [24] 2045 	push	acc
      00094E 74s00            [12] 2046 	mov	a,#(___str_6 >> 8)
      000950 C0 E0            [24] 2047 	push	acc
      000952 74 80            [12] 2048 	mov	a,#0x80
      000954 C0 E0            [24] 2049 	push	acc
      000956 12r00r00         [24] 2050 	lcall	_printf
      000959 E5 81            [12] 2051 	mov	a,sp
      00095B 24 F9            [12] 2052 	add	a,#0xf9
      00095D F5 81            [12] 2053 	mov	sp,a
      00095F D0 01            [24] 2054 	pop	ar1
      000961 D0 07            [24] 2055 	pop	ar7
                                   2056 ;	walk.c:226: for (i = 0; i < REG; i++) {
      000963 E5*00            [12] 2057 	mov	a,_bp
      000965 24 05            [12] 2058 	add	a,#0x05
      000967 F8               [12] 2059 	mov	r0,a
      000968 06               [12] 2060 	inc	@r0
      000969 B6 00 02         [24] 2061 	cjne	@r0,#0x00,00191$
      00096C 08               [12] 2062 	inc	r0
      00096D 06               [12] 2063 	inc	@r0
      00096E                       2064 00191$:
      00096E E5*00            [12] 2065 	mov	a,_bp
      000970 24 05            [12] 2066 	add	a,#0x05
      000972 F8               [12] 2067 	mov	r0,a
      000973 86 05            [24] 2068 	mov	ar5,@r0
      000975 08               [12] 2069 	inc	r0
      000976 86 06            [24] 2070 	mov	ar6,@r0
      000978 C3               [12] 2071 	clr	c
      000979 ED               [12] 2072 	mov	a,r5
      00097A 94 08            [12] 2073 	subb	a,#0x08
      00097C EE               [12] 2074 	mov	a,r6
      00097D 94 00            [12] 2075 	subb	a,#0x00
      00097F D0 07            [24] 2076 	pop	ar7
      000981 50 03            [24] 2077 	jnc	00192$
      000983 02r07rD3         [24] 2078 	ljmp	00116$
      000986                       2079 00192$:
                                   2080 ;	walk.c:232: OE76 = OE76_0;
      000986 78r01            [12] 2081 	mov	r0,#_OE76
      000988 76 3F            [12] 2082 	mov	@r0,#0x3f
                                   2083 ;	walk.c:233: setOE(OE76_NC);
      00098A 75 82 00         [24] 2084 	mov	dpl,#0x00
      00098D C0 07            [24] 2085 	push	ar7
      00098F C0 01            [24] 2086 	push	ar1
      000991 12r00r27         [24] 2087 	lcall	_setOE
      000994 D0 01            [24] 2088 	pop	ar1
      000996 D0 07            [24] 2089 	pop	ar7
                                   2090 ;	walk.c:235: walk(&initial);
      000998 8F 04            [24] 2091 	mov	ar4,r7
      00099A 7D 00            [12] 2092 	mov	r5,#0x00
      00099C 7E 40            [12] 2093 	mov	r6,#0x40
      00099E 8C 82            [24] 2094 	mov	dpl,r4
      0009A0 8D 83            [24] 2095 	mov	dph,r5
      0009A2 8E F0            [24] 2096 	mov	b,r6
      0009A4 C0 07            [24] 2097 	push	ar7
      0009A6 C0 01            [24] 2098 	push	ar1
      0009A8 12r03r00         [24] 2099 	lcall	_walk
      0009AB D0 01            [24] 2100 	pop	ar1
      0009AD D0 07            [24] 2101 	pop	ar7
                                   2102 ;	walk.c:237: for (i = 0; i < ROWS; i++)
      0009AF E5*00            [12] 2103 	mov	a,_bp
      0009B1 24 05            [12] 2104 	add	a,#0x05
      0009B3 F8               [12] 2105 	mov	r0,a
      0009B4 E4               [12] 2106 	clr	a
      0009B5 F6               [12] 2107 	mov	@r0,a
      0009B6 08               [12] 2108 	inc	r0
      0009B7 F6               [12] 2109 	mov	@r0,a
      0009B8 7B 00            [12] 2110 	mov	r3,#0x00
      0009BA 7C 00            [12] 2111 	mov	r4,#0x00
                                   2112 ;	walk.c:238: for (j = 0; j < COLS; j++)
      0009BC                       2113 00132$:
      0009BC E5*00            [12] 2114 	mov	a,_bp
      0009BE 24 03            [12] 2115 	add	a,#0x03
      0009C0 F8               [12] 2116 	mov	r0,a
      0009C1 EB               [12] 2117 	mov	a,r3
      0009C2 24r00            [12] 2118 	add	a,#_g
      0009C4 F6               [12] 2119 	mov	@r0,a
      0009C5 EC               [12] 2120 	mov	a,r4
      0009C6 34s00            [12] 2121 	addc	a,#(_g >> 8)
      0009C8 08               [12] 2122 	inc	r0
      0009C9 F6               [12] 2123 	mov	@r0,a
      0009CA 7A 00            [12] 2124 	mov	r2,#0x00
      0009CC 7E 00            [12] 2125 	mov	r6,#0x00
      0009CE                       2126 00118$:
                                   2127 ;	walk.c:239: if (g[i][j] != 0xaau) bang();
      0009CE E5*00            [12] 2128 	mov	a,_bp
      0009D0 24 03            [12] 2129 	add	a,#0x03
      0009D2 F8               [12] 2130 	mov	r0,a
      0009D3 EA               [12] 2131 	mov	a,r2
      0009D4 26               [12] 2132 	add	a,@r0
      0009D5 F5 82            [12] 2133 	mov	dpl,a
      0009D7 EE               [12] 2134 	mov	a,r6
      0009D8 08               [12] 2135 	inc	r0
      0009D9 36               [12] 2136 	addc	a,@r0
      0009DA F5 83            [12] 2137 	mov	dph,a
      0009DC E0               [24] 2138 	movx	a,@dptr
      0009DD FD               [12] 2139 	mov	r5,a
      0009DE BD AA 02         [24] 2140 	cjne	r5,#0xaa,00193$
      0009E1 80 1B            [24] 2141 	sjmp	00119$
      0009E3                       2142 00193$:
      0009E3 C0 07            [24] 2143 	push	ar7
      0009E5 C0 06            [24] 2144 	push	ar6
      0009E7 C0 04            [24] 2145 	push	ar4
      0009E9 C0 03            [24] 2146 	push	ar3
      0009EB C0 02            [24] 2147 	push	ar2
      0009ED C0 01            [24] 2148 	push	ar1
      0009EF 12r00r1A         [24] 2149 	lcall	_bang
      0009F2 D0 01            [24] 2150 	pop	ar1
      0009F4 D0 02            [24] 2151 	pop	ar2
      0009F6 D0 03            [24] 2152 	pop	ar3
      0009F8 D0 04            [24] 2153 	pop	ar4
      0009FA D0 06            [24] 2154 	pop	ar6
      0009FC D0 07            [24] 2155 	pop	ar7
      0009FE                       2156 00119$:
                                   2157 ;	walk.c:238: for (j = 0; j < COLS; j++)
      0009FE 0A               [12] 2158 	inc	r2
      0009FF BA 00 01         [24] 2159 	cjne	r2,#0x00,00194$
      000A02 0E               [12] 2160 	inc	r6
      000A03                       2161 00194$:
      000A03 C3               [12] 2162 	clr	c
      000A04 EA               [12] 2163 	mov	a,r2
      000A05 94 C9            [12] 2164 	subb	a,#0xc9
      000A07 EE               [12] 2165 	mov	a,r6
      000A08 64 80            [12] 2166 	xrl	a,#0x80
      000A0A 94 80            [12] 2167 	subb	a,#0x80
      000A0C 40 C0            [24] 2168 	jc	00118$
                                   2169 ;	walk.c:237: for (i = 0; i < ROWS; i++)
      000A0E 74 C9            [12] 2170 	mov	a,#0xc9
      000A10 2B               [12] 2171 	add	a,r3
      000A11 FB               [12] 2172 	mov	r3,a
      000A12 E4               [12] 2173 	clr	a
      000A13 3C               [12] 2174 	addc	a,r4
      000A14 FC               [12] 2175 	mov	r4,a
      000A15 E5*00            [12] 2176 	mov	a,_bp
      000A17 24 05            [12] 2177 	add	a,#0x05
      000A19 F8               [12] 2178 	mov	r0,a
      000A1A 06               [12] 2179 	inc	@r0
      000A1B B6 00 02         [24] 2180 	cjne	@r0,#0x00,00196$
      000A1E 08               [12] 2181 	inc	r0
      000A1F 06               [12] 2182 	inc	@r0
      000A20                       2183 00196$:
      000A20 E5*00            [12] 2184 	mov	a,_bp
      000A22 24 05            [12] 2185 	add	a,#0x05
      000A24 F8               [12] 2186 	mov	r0,a
      000A25 C3               [12] 2187 	clr	c
      000A26 E6               [12] 2188 	mov	a,@r0
      000A27 94 30            [12] 2189 	subb	a,#0x30
      000A29 08               [12] 2190 	inc	r0
      000A2A E6               [12] 2191 	mov	a,@r0
      000A2B 64 80            [12] 2192 	xrl	a,#0x80
      000A2D 94 80            [12] 2193 	subb	a,#0x80
      000A2F 40 8B            [24] 2194 	jc	00132$
                                   2195 ;	walk.c:241: N++;
      000A31 E5*00            [12] 2196 	mov	a,_bp
      000A33 24 0B            [12] 2197 	add	a,#0x0b
      000A35 F8               [12] 2198 	mov	r0,a
      000A36 06               [12] 2199 	inc	@r0
      000A37 B6 00 02         [24] 2200 	cjne	@r0,#0x00,00198$
      000A3A 08               [12] 2201 	inc	r0
      000A3B 06               [12] 2202 	inc	@r0
      000A3C                       2203 00198$:
      000A3C 02r06rB8         [24] 2204 	ljmp	00108$
      000A3F                       2205 00110$:
                                   2206 ;	walk.c:244: EA = 0;
                                   2207 ;	assignBit
      000A3F C2 AF            [12] 2208 	clr	_EA
                                   2209 ;	walk.c:246: puts("\033[2J\033[?25h");
      000A41 90r00r5B         [24] 2210 	mov	dptr,#___str_7
      000A44 75 F0 80         [24] 2211 	mov	b,#0x80
      000A47 12r00r00         [24] 2212 	lcall	_puts
                                   2213 ;	walk.c:35: PCON |= 2;
      000A4A 43 87 02         [24] 2214 	orl	_PCON,#0x02
                                   2215 ;	walk.c:250: return;
                                   2216 ;	walk.c:251: }
      000A4D 85*00 81         [24] 2217 	mov	sp,_bp
      000A50 D0*00            [24] 2218 	pop	_bp
      000A52 22               [24] 2219 	ret
                                   2220 ;------------------------------------------------------------
                                   2221 ;Allocation info for local variables in function 'stinit'
                                   2222 ;------------------------------------------------------------
                                   2223 ;	walk.c:253: static void stinit(void) {
                                   2224 ;	-----------------------------------------
                                   2225 ;	 function stinit
                                   2226 ;	-----------------------------------------
      000A53                       2227 _stinit:
                                   2228 ;	walk.c:254: sp = -1;
      000A53 90rBCr70         [24] 2229 	mov	dptr,#_sp
      000A56 74 FF            [12] 2230 	mov	a,#0xff
      000A58 F0               [24] 2231 	movx	@dptr,a
      000A59 A3               [24] 2232 	inc	dptr
      000A5A F0               [24] 2233 	movx	@dptr,a
                                   2234 ;	walk.c:255: return;
                                   2235 ;	walk.c:256: }
      000A5B 22               [24] 2236 	ret
                                   2237 ;------------------------------------------------------------
                                   2238 ;Allocation info for local variables in function 'stpush'
                                   2239 ;------------------------------------------------------------
                                   2240 ;t                         Allocated to registers r5 r6 r7 
                                   2241 ;------------------------------------------------------------
                                   2242 ;	walk.c:258: static uint8_t stpush(struct node *t) {
                                   2243 ;	-----------------------------------------
                                   2244 ;	 function stpush
                                   2245 ;	-----------------------------------------
      000A5C                       2246 _stpush:
      000A5C AD 82            [24] 2247 	mov	r5,dpl
      000A5E AE 83            [24] 2248 	mov	r6,dph
      000A60 AF F0            [24] 2249 	mov	r7,b
                                   2250 ;	walk.c:259: if (sp == (SMAX - 1)) return 0u;
      000A62 90rBCr70         [24] 2251 	mov	dptr,#_sp
      000A65 E0               [24] 2252 	movx	a,@dptr
      000A66 FB               [12] 2253 	mov	r3,a
      000A67 A3               [24] 2254 	inc	dptr
      000A68 E0               [24] 2255 	movx	a,@dptr
      000A69 FC               [12] 2256 	mov	r4,a
      000A6A BB AF 07         [24] 2257 	cjne	r3,#0xaf,00102$
      000A6D BC 25 04         [24] 2258 	cjne	r4,#0x25,00102$
      000A70 75 82 00         [24] 2259 	mov	dpl,#0x00
      000A73 22               [24] 2260 	ret
      000A74                       2261 00102$:
                                   2262 ;	walk.c:260: sp++;
      000A74 90rBCr70         [24] 2263 	mov	dptr,#_sp
      000A77 74 01            [12] 2264 	mov	a,#0x01
      000A79 2B               [12] 2265 	add	a,r3
      000A7A F0               [24] 2266 	movx	@dptr,a
      000A7B E4               [12] 2267 	clr	a
      000A7C 3C               [12] 2268 	addc	a,r4
      000A7D A3               [24] 2269 	inc	dptr
      000A7E F0               [24] 2270 	movx	@dptr,a
                                   2271 ;	walk.c:261: stack[sp] = *t;
      000A7F 90rBCr70         [24] 2272 	mov	dptr,#_sp
      000A82 E0               [24] 2273 	movx	a,@dptr
      000A83 FB               [12] 2274 	mov	r3,a
      000A84 A3               [24] 2275 	inc	dptr
      000A85 E0               [24] 2276 	movx	a,@dptr
      000A86 FC               [12] 2277 	mov	r4,a
      000A87 EB               [12] 2278 	mov	a,r3
      000A88 2B               [12] 2279 	add	a,r3
      000A89 FB               [12] 2280 	mov	r3,a
      000A8A EC               [12] 2281 	mov	a,r4
      000A8B 33               [12] 2282 	rlc	a
      000A8C FC               [12] 2283 	mov	r4,a
      000A8D EB               [12] 2284 	mov	a,r3
      000A8E 2B               [12] 2285 	add	a,r3
      000A8F FB               [12] 2286 	mov	r3,a
      000A90 EC               [12] 2287 	mov	a,r4
      000A91 33               [12] 2288 	rlc	a
      000A92 FC               [12] 2289 	mov	r4,a
      000A93 EB               [12] 2290 	mov	a,r3
      000A94 24rB0            [12] 2291 	add	a,#_stack
      000A96 FB               [12] 2292 	mov	r3,a
      000A97 EC               [12] 2293 	mov	a,r4
      000A98 34s25            [12] 2294 	addc	a,#(_stack >> 8)
      000A9A FC               [12] 2295 	mov	r4,a
      000A9B 7A 00            [12] 2296 	mov	r2,#0x00
      000A9D 74 04            [12] 2297 	mov	a,#0x04
      000A9F C0 E0            [24] 2298 	push	acc
      000AA1 E4               [12] 2299 	clr	a
      000AA2 C0 E0            [24] 2300 	push	acc
      000AA4 C0 05            [24] 2301 	push	ar5
      000AA6 C0 06            [24] 2302 	push	ar6
      000AA8 C0 07            [24] 2303 	push	ar7
      000AAA 8B 82            [24] 2304 	mov	dpl,r3
      000AAC 8C 83            [24] 2305 	mov	dph,r4
      000AAE 8A F0            [24] 2306 	mov	b,r2
      000AB0 12r00r00         [24] 2307 	lcall	___memcpy
      000AB3 E5 81            [12] 2308 	mov	a,sp
      000AB5 24 FB            [12] 2309 	add	a,#0xfb
      000AB7 F5 81            [12] 2310 	mov	sp,a
                                   2311 ;	walk.c:262: return 1u;
      000AB9 75 82 01         [24] 2312 	mov	dpl,#0x01
                                   2313 ;	walk.c:263: }
      000ABC 22               [24] 2314 	ret
                                   2315 ;------------------------------------------------------------
                                   2316 ;Allocation info for local variables in function 'stpop'
                                   2317 ;------------------------------------------------------------
                                   2318 ;t                         Allocated to registers r5 r6 r7 
                                   2319 ;------------------------------------------------------------
                                   2320 ;	walk.c:265: static uint8_t stpop(struct node *t) {
                                   2321 ;	-----------------------------------------
                                   2322 ;	 function stpop
                                   2323 ;	-----------------------------------------
      000ABD                       2324 _stpop:
      000ABD AD 82            [24] 2325 	mov	r5,dpl
      000ABF AE 83            [24] 2326 	mov	r6,dph
      000AC1 AF F0            [24] 2327 	mov	r7,b
                                   2328 ;	walk.c:266: if (sp == -1) return 0u;
      000AC3 90rBCr70         [24] 2329 	mov	dptr,#_sp
      000AC6 E0               [24] 2330 	movx	a,@dptr
      000AC7 FB               [12] 2331 	mov	r3,a
      000AC8 A3               [24] 2332 	inc	dptr
      000AC9 E0               [24] 2333 	movx	a,@dptr
      000ACA FC               [12] 2334 	mov	r4,a
      000ACB BB FF 07         [24] 2335 	cjne	r3,#0xff,00102$
      000ACE BC FF 04         [24] 2336 	cjne	r4,#0xff,00102$
      000AD1 75 82 00         [24] 2337 	mov	dpl,#0x00
      000AD4 22               [24] 2338 	ret
      000AD5                       2339 00102$:
                                   2340 ;	walk.c:267: *t = stack[sp];
      000AD5 EB               [12] 2341 	mov	a,r3
      000AD6 2B               [12] 2342 	add	a,r3
      000AD7 FB               [12] 2343 	mov	r3,a
      000AD8 EC               [12] 2344 	mov	a,r4
      000AD9 33               [12] 2345 	rlc	a
      000ADA FC               [12] 2346 	mov	r4,a
      000ADB EB               [12] 2347 	mov	a,r3
      000ADC 2B               [12] 2348 	add	a,r3
      000ADD FB               [12] 2349 	mov	r3,a
      000ADE EC               [12] 2350 	mov	a,r4
      000ADF 33               [12] 2351 	rlc	a
      000AE0 FC               [12] 2352 	mov	r4,a
      000AE1 EB               [12] 2353 	mov	a,r3
      000AE2 24rB0            [12] 2354 	add	a,#_stack
      000AE4 FB               [12] 2355 	mov	r3,a
      000AE5 EC               [12] 2356 	mov	a,r4
      000AE6 34s25            [12] 2357 	addc	a,#(_stack >> 8)
      000AE8 FC               [12] 2358 	mov	r4,a
      000AE9 7A 00            [12] 2359 	mov	r2,#0x00
      000AEB 74 04            [12] 2360 	mov	a,#0x04
      000AED C0 E0            [24] 2361 	push	acc
      000AEF E4               [12] 2362 	clr	a
      000AF0 C0 E0            [24] 2363 	push	acc
      000AF2 C0 03            [24] 2364 	push	ar3
      000AF4 C0 04            [24] 2365 	push	ar4
      000AF6 C0 02            [24] 2366 	push	ar2
      000AF8 8D 82            [24] 2367 	mov	dpl,r5
      000AFA 8E 83            [24] 2368 	mov	dph,r6
      000AFC 8F F0            [24] 2369 	mov	b,r7
      000AFE 12r00r00         [24] 2370 	lcall	___memcpy
      000B01 E5 81            [12] 2371 	mov	a,sp
      000B03 24 FB            [12] 2372 	add	a,#0xfb
      000B05 F5 81            [12] 2373 	mov	sp,a
                                   2374 ;	walk.c:268: sp--;
      000B07 90rBCr70         [24] 2375 	mov	dptr,#_sp
      000B0A E0               [24] 2376 	movx	a,@dptr
      000B0B 24 FF            [12] 2377 	add	a,#0xff
      000B0D FE               [12] 2378 	mov	r6,a
      000B0E A3               [24] 2379 	inc	dptr
      000B0F E0               [24] 2380 	movx	a,@dptr
      000B10 34 FF            [12] 2381 	addc	a,#0xff
      000B12 FF               [12] 2382 	mov	r7,a
      000B13 90rBCr70         [24] 2383 	mov	dptr,#_sp
      000B16 EE               [12] 2384 	mov	a,r6
      000B17 F0               [24] 2385 	movx	@dptr,a
      000B18 EF               [12] 2386 	mov	a,r7
      000B19 A3               [24] 2387 	inc	dptr
      000B1A F0               [24] 2388 	movx	@dptr,a
                                   2389 ;	walk.c:269: return 1u;
      000B1B 75 82 01         [24] 2390 	mov	dpl,#0x01
                                   2391 ;	walk.c:270: }
      000B1E 22               [24] 2392 	ret
                                   2393 	.area CSEG    (CODE)
                                   2394 	.area CONST   (CODE)
                                   2395 	.area CONST   (CODE)
      000000                       2396 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2397 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2398 	.db 0x00
                                   2399 	.area CSEG    (CODE)
                                   2400 	.area CONST   (CODE)
      00000D                       2401 ___str_1:
      00000D 1B                    2402 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2403 	.ascii "[%d;%dHo"
             6F
      000016 00                    2404 	.db 0x00
                                   2405 	.area CSEG    (CODE)
                                   2406 	.area CONST   (CODE)
      000017                       2407 ___str_2:
      000017 1B                    2408 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2409 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2410 	.db 0x00
                                   2411 	.area CSEG    (CODE)
                                   2412 	.area CONST   (CODE)
      00002A                       2413 ___str_3:
      00002A 1B                    2414 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2415 	.ascii "[%d;%dH."
             2E
      000033 00                    2416 	.db 0x00
                                   2417 	.area CSEG    (CODE)
                                   2418 	.area CONST   (CODE)
      000034                       2419 ___str_4:
      000034 1B                    2420 	.db 0x1b
      000035 5B 32 4A              2421 	.ascii "[2J"
      000038 1B                    2422 	.db 0x1b
      000039 5B 3F 32 35 6C        2423 	.ascii "[?25l"
      00003E 00                    2424 	.db 0x00
                                   2425 	.area CSEG    (CODE)
                                   2426 	.area CONST   (CODE)
      00003F                       2427 ___str_5:
      00003F 1B                    2428 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2429 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2430 	.db 0x00
                                   2431 	.area CSEG    (CODE)
                                   2432 	.area CONST   (CODE)
      000052                       2433 ___str_6:
      000052 25 20 38 64 25 20 38  2434 	.ascii "% 8d% 8d"
             64
      00005A 00                    2435 	.db 0x00
                                   2436 	.area CSEG    (CODE)
                                   2437 	.area CONST   (CODE)
      00005B                       2438 ___str_7:
      00005B 1B                    2439 	.db 0x1b
      00005C 5B 32 4A              2440 	.ascii "[2J"
      00005F 1B                    2441 	.db 0x1b
      000060 5B 3F 32 35 68        2442 	.ascii "[?25h"
      000065 00                    2443 	.db 0x00
                                   2444 	.area CSEG    (CODE)
                                   2445 	.area XINIT   (CODE)
      000000                       2446 __xinit__neigh:
      000000 FF FF                 2447 	.byte #0xff, #0xff	; -1
      000002 01 00                 2448 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2449 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2450 	.byte #0xff, #0xff	; -1
      000008 01 00                 2451 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2452 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2453 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2454 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2455 	.byte #0xff, #0xff	; -1
      000012 00 00                 2456 	.byte #0x00, #0x00	;  0
      000014 00 00                 2457 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2458 	.byte #0xff, #0xff	; -1
      000018 01 00                 2459 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2460 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2461 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2462 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2463 	.byte #0xff, #0xff	; -1
      000022 01 00                 2464 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2465 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2466 	.byte #0xff, #0xff	; -1
      000028 01 00                 2467 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2468 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2469 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2470 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2471 	.byte #0xff, #0xff	; -1
      000032 00 00                 2472 	.byte #0x00, #0x00	;  0
      000034 00 00                 2473 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2474 	.byte #0xff, #0xff	; -1
      000038 01 00                 2475 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2476 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2477 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2478 	.byte #0x01, #0x00	;  1
                                   2479 	.area CABS    (ABS,CODE)
