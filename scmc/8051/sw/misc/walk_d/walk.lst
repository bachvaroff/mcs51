                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _neigh:
      000001                        303 	.ds 32
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9216
      002400                        323 _stack:
      002400                        324 	.ds 36864
      00B400                        325 _sp:
      00B400                        326 	.ds 2
      00B402                        327 _main_R_65536_64:
      00B402                        328 	.ds 2
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
                                    337 	.area HOME    (CODE)
                                    338 	.area GSINIT0 (CODE)
                                    339 	.area GSINIT1 (CODE)
                                    340 	.area GSINIT2 (CODE)
                                    341 	.area GSINIT3 (CODE)
                                    342 	.area GSINIT4 (CODE)
                                    343 	.area GSINIT5 (CODE)
                                    344 	.area GSINIT  (CODE)
                                    345 	.area GSFINAL (CODE)
                                    346 	.area CSEG    (CODE)
                                    347 ;--------------------------------------------------------
                                    348 ; interrupt vector 
                                    349 ;--------------------------------------------------------
                                    350 	.area HOME    (CODE)
      000000                        351 __interrupt_vect:
      000000 02r00r00         [24]  352 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  353 	ljmp	_int0
                                    354 ;--------------------------------------------------------
                                    355 ; global & static initialisations
                                    356 ;--------------------------------------------------------
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.area GSFINAL (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.globl __sdcc_gsinit_startup
                                    362 	.globl __sdcc_program_startup
                                    363 	.globl __start__stack
                                    364 	.globl __mcs51_genXINIT
                                    365 	.globl __mcs51_genXRAMCLEAR
                                    366 	.globl __mcs51_genRAMCLEAR
                                    367 ;------------------------------------------------------------
                                    368 ;Allocation info for local variables in function 'main'
                                    369 ;------------------------------------------------------------
                                    370 ;initial                   Allocated to stack - _bp +5
                                    371 ;N                         Allocated to stack - _bp +9
                                    372 ;i                         Allocated to stack - _bp +11
                                    373 ;j                         Allocated to registers r2 r6 
                                    374 ;sloc0                     Allocated to stack - _bp +1
                                    375 ;sloc1                     Allocated to stack - _bp +3
                                    376 ;R                         Allocated with name '_main_R_65536_64'
                                    377 ;------------------------------------------------------------
                                    378 ;	walk.c:134: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  379 	mov	dptr,#_main_R_65536_64
      000003 74 FE            [12]  380 	mov	a,#0xfe
      000005 F0               [24]  381 	movx	@dptr,a
      000006 04               [12]  382 	inc	a
      000007 A3               [24]  383 	inc	dptr
      000008 F0               [24]  384 	movx	@dptr,a
                                    385 ;	walk.c:65: __idata static const struct node neigh[NMAX] = {
      000009 78r01            [12]  386 	mov	r0,#_neigh
      00000B 76 FF            [12]  387 	mov	@r0,#0xff
      00000D 08               [12]  388 	inc	r0
      00000E 76 FF            [12]  389 	mov	@r0,#0xff
      000010 78r03            [12]  390 	mov	r0,#(_neigh + 0x0002)
      000012 76 FF            [12]  391 	mov	@r0,#0xff
      000014 08               [12]  392 	inc	r0
      000015 76 FF            [12]  393 	mov	@r0,#0xff
      000017 78r05            [12]  394 	mov	r0,#(_neigh + 0x0004)
      000019 76 FF            [12]  395 	mov	@r0,#0xff
      00001B 08               [12]  396 	inc	r0
      00001C 76 FF            [12]  397 	mov	@r0,#0xff
      00001E 78r07            [12]  398 	mov	r0,#(_neigh + 0x0006)
      000020 76 00            [12]  399 	mov	@r0,#0x00
      000022 08               [12]  400 	inc	r0
      000023 76 00            [12]  401 	mov	@r0,#0x00
      000025 78r09            [12]  402 	mov	r0,#(_neigh + 0x0008)
      000027 76 FF            [12]  403 	mov	@r0,#0xff
      000029 08               [12]  404 	inc	r0
      00002A 76 FF            [12]  405 	mov	@r0,#0xff
      00002C 78r0B            [12]  406 	mov	r0,#(_neigh + 0x000a)
      00002E 76 01            [12]  407 	mov	@r0,#0x01
      000030 08               [12]  408 	inc	r0
      000031 76 00            [12]  409 	mov	@r0,#0x00
      000033 78r0D            [12]  410 	mov	r0,#(_neigh + 0x000c)
      000035 76 00            [12]  411 	mov	@r0,#0x00
      000037 08               [12]  412 	inc	r0
      000038 76 00            [12]  413 	mov	@r0,#0x00
      00003A 78r0F            [12]  414 	mov	r0,#(_neigh + 0x000e)
      00003C 76 FF            [12]  415 	mov	@r0,#0xff
      00003E 08               [12]  416 	inc	r0
      00003F 76 FF            [12]  417 	mov	@r0,#0xff
      000041 78r11            [12]  418 	mov	r0,#(_neigh + 0x0010)
      000043 76 00            [12]  419 	mov	@r0,#0x00
      000045 08               [12]  420 	inc	r0
      000046 76 00            [12]  421 	mov	@r0,#0x00
      000048 78r13            [12]  422 	mov	r0,#(_neigh + 0x0012)
      00004A 76 01            [12]  423 	mov	@r0,#0x01
      00004C 08               [12]  424 	inc	r0
      00004D 76 00            [12]  425 	mov	@r0,#0x00
      00004F 78r15            [12]  426 	mov	r0,#(_neigh + 0x0014)
      000051 76 01            [12]  427 	mov	@r0,#0x01
      000053 08               [12]  428 	inc	r0
      000054 76 00            [12]  429 	mov	@r0,#0x00
      000056 78r17            [12]  430 	mov	r0,#(_neigh + 0x0016)
      000058 76 FF            [12]  431 	mov	@r0,#0xff
      00005A 08               [12]  432 	inc	r0
      00005B 76 FF            [12]  433 	mov	@r0,#0xff
      00005D 78r19            [12]  434 	mov	r0,#(_neigh + 0x0018)
      00005F 76 01            [12]  435 	mov	@r0,#0x01
      000061 08               [12]  436 	inc	r0
      000062 76 00            [12]  437 	mov	@r0,#0x00
      000064 78r1B            [12]  438 	mov	r0,#(_neigh + 0x001a)
      000066 76 00            [12]  439 	mov	@r0,#0x00
      000068 08               [12]  440 	inc	r0
      000069 76 00            [12]  441 	mov	@r0,#0x00
      00006B 78r1D            [12]  442 	mov	r0,#(_neigh + 0x001c)
      00006D 76 01            [12]  443 	mov	@r0,#0x01
      00006F 08               [12]  444 	inc	r0
      000070 76 00            [12]  445 	mov	@r0,#0x00
      000072 78r1F            [12]  446 	mov	r0,#(_neigh + 0x001e)
      000074 76 01            [12]  447 	mov	@r0,#0x01
      000076 08               [12]  448 	inc	r0
      000077 76 00            [12]  449 	mov	@r0,#0x00
                                    450 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  451 	ljmp	__sdcc_program_startup
                                    452 ;--------------------------------------------------------
                                    453 ; Home
                                    454 ;--------------------------------------------------------
                                    455 	.area HOME    (CODE)
                                    456 	.area HOME    (CODE)
      000006                        457 __sdcc_program_startup:
      000006 02r06r1B         [24]  458 	ljmp	_main
                                    459 ;	return from main will return to caller
                                    460 ;--------------------------------------------------------
                                    461 ; code
                                    462 ;--------------------------------------------------------
                                    463 	.area CSEG    (CODE)
                                    464 ;------------------------------------------------------------
                                    465 ;Allocation info for local variables in function 'putchar'
                                    466 ;------------------------------------------------------------
                                    467 ;c                         Allocated to registers 
                                    468 ;------------------------------------------------------------
                                    469 ;	walk.c:8: int putchar(int c) __naked {
                                    470 ;	-----------------------------------------
                                    471 ;	 function putchar
                                    472 ;	-----------------------------------------
      000000                        473 _putchar:
                                    474 ;	naked function: no prologue.
                                    475 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  476 	mov	a, dpl
      000002 02 00 30         [24]  477 	ljmp	0x0030
                                    478 ;	walk.c:14: }
                                    479 ;	naked function: no epilogue.
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'getchar'
                                    482 ;------------------------------------------------------------
                                    483 ;	walk.c:16: int getchar(void) __naked {
                                    484 ;	-----------------------------------------
                                    485 ;	 function getchar
                                    486 ;	-----------------------------------------
      000005                        487 _getchar:
                                    488 ;	naked function: no prologue.
                                    489 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  490 	lcall	0x0032
      000008 F5 82            [12]  491 	mov	dpl, a
      00000A 75 83 00         [24]  492 	mov	dph, #0
      00000D 22               [24]  493 	ret
                                    494 ;	walk.c:23: }
                                    495 ;	naked function: no epilogue.
                                    496 ;------------------------------------------------------------
                                    497 ;Allocation info for local variables in function 'int0'
                                    498 ;------------------------------------------------------------
                                    499 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    500 ;	-----------------------------------------
                                    501 ;	 function int0
                                    502 ;	-----------------------------------------
      00000E                        503 _int0:
                           00000F   504 	ar7 = 0x0f
                           00000E   505 	ar6 = 0x0e
                           00000D   506 	ar5 = 0x0d
                           00000C   507 	ar4 = 0x0c
                           00000B   508 	ar3 = 0x0b
                           00000A   509 	ar2 = 0x0a
                           000009   510 	ar1 = 0x09
                           000008   511 	ar0 = 0x08
      00000E C0 D0            [24]  512 	push	psw
      000010 75 D0 08         [24]  513 	mov	psw,#0x08
                                    514 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  515 	mov	r0,#_i0
      000015 76 00            [12]  516 	mov	@r0,#0x00
                                    517 ;	walk.c:29: }
      000017 D0 D0            [24]  518 	pop	psw
      000019 32               [24]  519 	reti
                                    520 ;	eliminated unneeded push/pop dpl
                                    521 ;	eliminated unneeded push/pop dph
                                    522 ;	eliminated unneeded push/pop b
                                    523 ;	eliminated unneeded push/pop acc
                                    524 ;------------------------------------------------------------
                                    525 ;Allocation info for local variables in function 'reset'
                                    526 ;------------------------------------------------------------
                                    527 ;	walk.c:31: static void reset(void) __naked {
                                    528 ;	-----------------------------------------
                                    529 ;	 function reset
                                    530 ;	-----------------------------------------
      00001A                        531 _reset:
                                    532 ;	naked function: no prologue.
                                    533 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  534 	orl	pcon, #2
                                    535 ;	walk.c:35: }
                                    536 ;	naked function: no epilogue.
                                    537 ;------------------------------------------------------------
                                    538 ;Allocation info for local variables in function 'bang'
                                    539 ;------------------------------------------------------------
                                    540 ;	walk.c:37: static void bang(void) {
                                    541 ;	-----------------------------------------
                                    542 ;	 function bang
                                    543 ;	-----------------------------------------
      00001D                        544 _bang:
                           000007   545 	ar7 = 0x07
                           000006   546 	ar6 = 0x06
                           000005   547 	ar5 = 0x05
                           000004   548 	ar4 = 0x04
                           000003   549 	ar3 = 0x03
                           000002   550 	ar2 = 0x02
                           000001   551 	ar1 = 0x01
                           000000   552 	ar0 = 0x00
                                    553 ;	walk.c:38: (void)puts("Memory error");
      00001D 90r00r00         [24]  554 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  555 	mov	b,#0x80
      000023 12r00r00         [24]  556 	lcall	_puts
                                    557 ;	walk.c:39: reset();
                                    558 ;	walk.c:41: return;
                                    559 ;	walk.c:42: }
      000026 02r00r1A         [24]  560 	ljmp	_reset
                                    561 ;------------------------------------------------------------
                                    562 ;Allocation info for local variables in function 'update'
                                    563 ;------------------------------------------------------------
                                    564 ;cur                       Allocated to stack - _bp -5
                                    565 ;j                         Allocated to stack - _bp -6
                                    566 ;t                         Allocated to stack - _bp +1
                                    567 ;sloc0                     Allocated to stack - _bp +4
                                    568 ;sloc1                     Allocated to stack - _bp +6
                                    569 ;------------------------------------------------------------
                                    570 ;	walk.c:80: static int update(struct node *t, struct node *cur, char j) {
                                    571 ;	-----------------------------------------
                                    572 ;	 function update
                                    573 ;	-----------------------------------------
      000029                        574 _update:
      000029 C0*00            [24]  575 	push	_bp
      00002B 85 81*00         [24]  576 	mov	_bp,sp
      00002E C0 82            [24]  577 	push	dpl
      000030 C0 83            [24]  578 	push	dph
      000032 C0 F0            [24]  579 	push	b
      000034 E5 81            [12]  580 	mov	a,sp
      000036 24 05            [12]  581 	add	a,#0x05
      000038 F5 81            [12]  582 	mov	sp,a
                                    583 ;	walk.c:81: t->r = cur->r + neigh[j].r;
      00003A E5*00            [12]  584 	mov	a,_bp
      00003C 24 FB            [12]  585 	add	a,#0xfb
      00003E F8               [12]  586 	mov	r0,a
      00003F 86 02            [24]  587 	mov	ar2,@r0
      000041 08               [12]  588 	inc	r0
      000042 86 03            [24]  589 	mov	ar3,@r0
      000044 08               [12]  590 	inc	r0
      000045 86 04            [24]  591 	mov	ar4,@r0
      000047 8A 82            [24]  592 	mov	dpl,r2
      000049 8B 83            [24]  593 	mov	dph,r3
      00004B 8C F0            [24]  594 	mov	b,r4
      00004D E5*00            [12]  595 	mov	a,_bp
      00004F 24 04            [12]  596 	add	a,#0x04
      000051 F8               [12]  597 	mov	r0,a
      000052 12r00r00         [24]  598 	lcall	__gptrget
      000055 F6               [12]  599 	mov	@r0,a
      000056 A3               [24]  600 	inc	dptr
      000057 12r00r00         [24]  601 	lcall	__gptrget
      00005A 08               [12]  602 	inc	r0
      00005B F6               [12]  603 	mov	@r0,a
      00005C E5*00            [12]  604 	mov	a,_bp
      00005E 24 FA            [12]  605 	add	a,#0xfa
      000060 F8               [12]  606 	mov	r0,a
      000061 E6               [12]  607 	mov	a,@r0
      000062 26               [12]  608 	add	a,@r0
      000063 25 E0            [12]  609 	add	a,acc
      000065 FD               [12]  610 	mov	r5,a
      000066 24r01            [12]  611 	add	a,#_neigh
      000068 F9               [12]  612 	mov	r1,a
      000069 87 07            [24]  613 	mov	ar7,@r1
      00006B 09               [12]  614 	inc	r1
      00006C 87 06            [24]  615 	mov	ar6,@r1
      00006E E5*00            [12]  616 	mov	a,_bp
      000070 24 04            [12]  617 	add	a,#0x04
      000072 F8               [12]  618 	mov	r0,a
      000073 EF               [12]  619 	mov	a,r7
      000074 26               [12]  620 	add	a,@r0
      000075 FF               [12]  621 	mov	r7,a
      000076 EE               [12]  622 	mov	a,r6
      000077 08               [12]  623 	inc	r0
      000078 36               [12]  624 	addc	a,@r0
      000079 FE               [12]  625 	mov	r6,a
      00007A A8*00            [24]  626 	mov	r0,_bp
      00007C 08               [12]  627 	inc	r0
      00007D 86 82            [24]  628 	mov	dpl,@r0
      00007F 08               [12]  629 	inc	r0
      000080 86 83            [24]  630 	mov	dph,@r0
      000082 08               [12]  631 	inc	r0
      000083 86 F0            [24]  632 	mov	b,@r0
      000085 EF               [12]  633 	mov	a,r7
      000086 12r00r00         [24]  634 	lcall	__gptrput
      000089 A3               [24]  635 	inc	dptr
      00008A EE               [12]  636 	mov	a,r6
      00008B 12r00r00         [24]  637 	lcall	__gptrput
                                    638 ;	walk.c:82: t->c = cur->c + neigh[j].c;
      00008E A8*00            [24]  639 	mov	r0,_bp
      000090 08               [12]  640 	inc	r0
      000091 E5*00            [12]  641 	mov	a,_bp
      000093 24 06            [12]  642 	add	a,#0x06
      000095 F9               [12]  643 	mov	r1,a
      000096 74 02            [12]  644 	mov	a,#0x02
      000098 26               [12]  645 	add	a,@r0
      000099 F7               [12]  646 	mov	@r1,a
      00009A E4               [12]  647 	clr	a
      00009B 08               [12]  648 	inc	r0
      00009C 36               [12]  649 	addc	a,@r0
      00009D 09               [12]  650 	inc	r1
      00009E F7               [12]  651 	mov	@r1,a
      00009F 08               [12]  652 	inc	r0
      0000A0 09               [12]  653 	inc	r1
      0000A1 E6               [12]  654 	mov	a,@r0
      0000A2 F7               [12]  655 	mov	@r1,a
      0000A3 74 02            [12]  656 	mov	a,#0x02
      0000A5 2A               [12]  657 	add	a,r2
      0000A6 FA               [12]  658 	mov	r2,a
      0000A7 E4               [12]  659 	clr	a
      0000A8 3B               [12]  660 	addc	a,r3
      0000A9 FB               [12]  661 	mov	r3,a
      0000AA 8A 82            [24]  662 	mov	dpl,r2
      0000AC 8B 83            [24]  663 	mov	dph,r3
      0000AE 8C F0            [24]  664 	mov	b,r4
      0000B0 12r00r00         [24]  665 	lcall	__gptrget
      0000B3 FA               [12]  666 	mov	r2,a
      0000B4 A3               [24]  667 	inc	dptr
      0000B5 12r00r00         [24]  668 	lcall	__gptrget
      0000B8 FB               [12]  669 	mov	r3,a
      0000B9 ED               [12]  670 	mov	a,r5
      0000BA 24r01            [12]  671 	add	a,#_neigh
      0000BC 24 02            [12]  672 	add	a,#0x02
      0000BE F9               [12]  673 	mov	r1,a
      0000BF 87 04            [24]  674 	mov	ar4,@r1
      0000C1 09               [12]  675 	inc	r1
      0000C2 87 05            [24]  676 	mov	ar5,@r1
      0000C4 EC               [12]  677 	mov	a,r4
      0000C5 2A               [12]  678 	add	a,r2
      0000C6 FA               [12]  679 	mov	r2,a
      0000C7 ED               [12]  680 	mov	a,r5
      0000C8 3B               [12]  681 	addc	a,r3
      0000C9 FB               [12]  682 	mov	r3,a
      0000CA E5*00            [12]  683 	mov	a,_bp
      0000CC 24 06            [12]  684 	add	a,#0x06
      0000CE F8               [12]  685 	mov	r0,a
      0000CF 86 82            [24]  686 	mov	dpl,@r0
      0000D1 08               [12]  687 	inc	r0
      0000D2 86 83            [24]  688 	mov	dph,@r0
      0000D4 08               [12]  689 	inc	r0
      0000D5 86 F0            [24]  690 	mov	b,@r0
      0000D7 EA               [12]  691 	mov	a,r2
      0000D8 12r00r00         [24]  692 	lcall	__gptrput
      0000DB A3               [24]  693 	inc	dptr
      0000DC EB               [12]  694 	mov	a,r3
      0000DD 12r00r00         [24]  695 	lcall	__gptrput
                                    696 ;	walk.c:84: if (t->r < 0) t->r += ROWS;
      0000E0 A8*00            [24]  697 	mov	r0,_bp
      0000E2 08               [12]  698 	inc	r0
      0000E3 86 82            [24]  699 	mov	dpl,@r0
      0000E5 08               [12]  700 	inc	r0
      0000E6 86 83            [24]  701 	mov	dph,@r0
      0000E8 08               [12]  702 	inc	r0
      0000E9 86 F0            [24]  703 	mov	b,@r0
      0000EB 12r00r00         [24]  704 	lcall	__gptrget
      0000EE FD               [12]  705 	mov	r5,a
      0000EF A3               [24]  706 	inc	dptr
      0000F0 12r00r00         [24]  707 	lcall	__gptrget
      0000F3 FC               [12]  708 	mov	r4,a
      0000F4 EE               [12]  709 	mov	a,r6
      0000F5 30 E7 1D         [24]  710 	jnb	acc.7,00104$
      0000F8 74 30            [12]  711 	mov	a,#0x30
      0000FA 2D               [12]  712 	add	a,r5
      0000FB FF               [12]  713 	mov	r7,a
      0000FC E4               [12]  714 	clr	a
      0000FD 3C               [12]  715 	addc	a,r4
      0000FE FE               [12]  716 	mov	r6,a
      0000FF A8*00            [24]  717 	mov	r0,_bp
      000101 08               [12]  718 	inc	r0
      000102 86 82            [24]  719 	mov	dpl,@r0
      000104 08               [12]  720 	inc	r0
      000105 86 83            [24]  721 	mov	dph,@r0
      000107 08               [12]  722 	inc	r0
      000108 86 F0            [24]  723 	mov	b,@r0
      00010A EF               [12]  724 	mov	a,r7
      00010B 12r00r00         [24]  725 	lcall	__gptrput
      00010E A3               [24]  726 	inc	dptr
      00010F EE               [12]  727 	mov	a,r6
      000110 12r00r00         [24]  728 	lcall	__gptrput
      000113 80 27            [24]  729 	sjmp	00105$
      000115                        730 00104$:
                                    731 ;	walk.c:85: else if (t->r >= ROWS) t->r -= ROWS;
      000115 C3               [12]  732 	clr	c
      000116 ED               [12]  733 	mov	a,r5
      000117 94 30            [12]  734 	subb	a,#0x30
      000119 EC               [12]  735 	mov	a,r4
      00011A 64 80            [12]  736 	xrl	a,#0x80
      00011C 94 80            [12]  737 	subb	a,#0x80
      00011E 40 1C            [24]  738 	jc	00105$
      000120 ED               [12]  739 	mov	a,r5
      000121 24 D0            [12]  740 	add	a,#0xd0
      000123 FD               [12]  741 	mov	r5,a
      000124 EC               [12]  742 	mov	a,r4
      000125 34 FF            [12]  743 	addc	a,#0xff
      000127 FC               [12]  744 	mov	r4,a
      000128 A8*00            [24]  745 	mov	r0,_bp
      00012A 08               [12]  746 	inc	r0
      00012B 86 82            [24]  747 	mov	dpl,@r0
      00012D 08               [12]  748 	inc	r0
      00012E 86 83            [24]  749 	mov	dph,@r0
      000130 08               [12]  750 	inc	r0
      000131 86 F0            [24]  751 	mov	b,@r0
      000133 ED               [12]  752 	mov	a,r5
      000134 12r00r00         [24]  753 	lcall	__gptrput
      000137 A3               [24]  754 	inc	dptr
      000138 EC               [12]  755 	mov	a,r4
      000139 12r00r00         [24]  756 	lcall	__gptrput
      00013C                        757 00105$:
                                    758 ;	walk.c:86: if (t->c < 0) t->c += COLS;
      00013C E5*00            [12]  759 	mov	a,_bp
      00013E 24 06            [12]  760 	add	a,#0x06
      000140 F8               [12]  761 	mov	r0,a
      000141 86 82            [24]  762 	mov	dpl,@r0
      000143 08               [12]  763 	inc	r0
      000144 86 83            [24]  764 	mov	dph,@r0
      000146 08               [12]  765 	inc	r0
      000147 86 F0            [24]  766 	mov	b,@r0
      000149 12r00r00         [24]  767 	lcall	__gptrget
      00014C A3               [24]  768 	inc	dptr
      00014D 12r00r00         [24]  769 	lcall	__gptrget
      000150 30 E7 35         [24]  770 	jnb	acc.7,00109$
      000153 E5*00            [12]  771 	mov	a,_bp
      000155 24 06            [12]  772 	add	a,#0x06
      000157 F8               [12]  773 	mov	r0,a
      000158 86 82            [24]  774 	mov	dpl,@r0
      00015A 08               [12]  775 	inc	r0
      00015B 86 83            [24]  776 	mov	dph,@r0
      00015D 08               [12]  777 	inc	r0
      00015E 86 F0            [24]  778 	mov	b,@r0
      000160 12r00r00         [24]  779 	lcall	__gptrget
      000163 FE               [12]  780 	mov	r6,a
      000164 A3               [24]  781 	inc	dptr
      000165 12r00r00         [24]  782 	lcall	__gptrget
      000168 FF               [12]  783 	mov	r7,a
      000169 74 C0            [12]  784 	mov	a,#0xc0
      00016B 2E               [12]  785 	add	a,r6
      00016C FE               [12]  786 	mov	r6,a
      00016D E4               [12]  787 	clr	a
      00016E 3F               [12]  788 	addc	a,r7
      00016F FF               [12]  789 	mov	r7,a
      000170 E5*00            [12]  790 	mov	a,_bp
      000172 24 06            [12]  791 	add	a,#0x06
      000174 F8               [12]  792 	mov	r0,a
      000175 86 82            [24]  793 	mov	dpl,@r0
      000177 08               [12]  794 	inc	r0
      000178 86 83            [24]  795 	mov	dph,@r0
      00017A 08               [12]  796 	inc	r0
      00017B 86 F0            [24]  797 	mov	b,@r0
      00017D EE               [12]  798 	mov	a,r6
      00017E 12r00r00         [24]  799 	lcall	__gptrput
      000181 A3               [24]  800 	inc	dptr
      000182 EF               [12]  801 	mov	a,r7
      000183 12r00r00         [24]  802 	lcall	__gptrput
      000186 80 55            [24]  803 	sjmp	00110$
      000188                        804 00109$:
                                    805 ;	walk.c:87: else if (t->c >= COLS) t->c -= COLS;
      000188 E5*00            [12]  806 	mov	a,_bp
      00018A 24 06            [12]  807 	add	a,#0x06
      00018C F8               [12]  808 	mov	r0,a
      00018D 86 82            [24]  809 	mov	dpl,@r0
      00018F 08               [12]  810 	inc	r0
      000190 86 83            [24]  811 	mov	dph,@r0
      000192 08               [12]  812 	inc	r0
      000193 86 F0            [24]  813 	mov	b,@r0
      000195 12r00r00         [24]  814 	lcall	__gptrget
      000198 FE               [12]  815 	mov	r6,a
      000199 A3               [24]  816 	inc	dptr
      00019A 12r00r00         [24]  817 	lcall	__gptrget
      00019D FF               [12]  818 	mov	r7,a
      00019E C3               [12]  819 	clr	c
      00019F EE               [12]  820 	mov	a,r6
      0001A0 94 C0            [12]  821 	subb	a,#0xc0
      0001A2 EF               [12]  822 	mov	a,r7
      0001A3 64 80            [12]  823 	xrl	a,#0x80
      0001A5 94 80            [12]  824 	subb	a,#0x80
      0001A7 40 34            [24]  825 	jc	00110$
      0001A9 E5*00            [12]  826 	mov	a,_bp
      0001AB 24 06            [12]  827 	add	a,#0x06
      0001AD F8               [12]  828 	mov	r0,a
      0001AE 86 82            [24]  829 	mov	dpl,@r0
      0001B0 08               [12]  830 	inc	r0
      0001B1 86 83            [24]  831 	mov	dph,@r0
      0001B3 08               [12]  832 	inc	r0
      0001B4 86 F0            [24]  833 	mov	b,@r0
      0001B6 12r00r00         [24]  834 	lcall	__gptrget
      0001B9 FE               [12]  835 	mov	r6,a
      0001BA A3               [24]  836 	inc	dptr
      0001BB 12r00r00         [24]  837 	lcall	__gptrget
      0001BE FF               [12]  838 	mov	r7,a
      0001BF EE               [12]  839 	mov	a,r6
      0001C0 24 40            [12]  840 	add	a,#0x40
      0001C2 FE               [12]  841 	mov	r6,a
      0001C3 EF               [12]  842 	mov	a,r7
      0001C4 34 FF            [12]  843 	addc	a,#0xff
      0001C6 FF               [12]  844 	mov	r7,a
      0001C7 E5*00            [12]  845 	mov	a,_bp
      0001C9 24 06            [12]  846 	add	a,#0x06
      0001CB F8               [12]  847 	mov	r0,a
      0001CC 86 82            [24]  848 	mov	dpl,@r0
      0001CE 08               [12]  849 	inc	r0
      0001CF 86 83            [24]  850 	mov	dph,@r0
      0001D1 08               [12]  851 	inc	r0
      0001D2 86 F0            [24]  852 	mov	b,@r0
      0001D4 EE               [12]  853 	mov	a,r6
      0001D5 12r00r00         [24]  854 	lcall	__gptrput
      0001D8 A3               [24]  855 	inc	dptr
      0001D9 EF               [12]  856 	mov	a,r7
      0001DA 12r00r00         [24]  857 	lcall	__gptrput
      0001DD                        858 00110$:
                                    859 ;	walk.c:89: if (g[t->r][t->c] == 0xaa) return 0;
      0001DD A8*00            [24]  860 	mov	r0,_bp
      0001DF 08               [12]  861 	inc	r0
      0001E0 86 82            [24]  862 	mov	dpl,@r0
      0001E2 08               [12]  863 	inc	r0
      0001E3 86 83            [24]  864 	mov	dph,@r0
      0001E5 08               [12]  865 	inc	r0
      0001E6 86 F0            [24]  866 	mov	b,@r0
      0001E8 12r00r00         [24]  867 	lcall	__gptrget
      0001EB FE               [12]  868 	mov	r6,a
      0001EC A3               [24]  869 	inc	dptr
      0001ED 12r00r00         [24]  870 	lcall	__gptrget
      0001F0 FF               [12]  871 	mov	r7,a
      0001F1 C0 06            [24]  872 	push	ar6
      0001F3 C0 07            [24]  873 	push	ar7
      0001F5 90 00 C0         [24]  874 	mov	dptr,#0x00c0
      0001F8 12r00r00         [24]  875 	lcall	__mulint
      0001FB AE 82            [24]  876 	mov	r6,dpl
      0001FD AF 83            [24]  877 	mov	r7,dph
      0001FF 15 81            [12]  878 	dec	sp
      000201 15 81            [12]  879 	dec	sp
      000203 EE               [12]  880 	mov	a,r6
      000204 24r00            [12]  881 	add	a,#_g
      000206 FE               [12]  882 	mov	r6,a
      000207 EF               [12]  883 	mov	a,r7
      000208 34s00            [12]  884 	addc	a,#(_g >> 8)
      00020A FF               [12]  885 	mov	r7,a
      00020B E5*00            [12]  886 	mov	a,_bp
      00020D 24 06            [12]  887 	add	a,#0x06
      00020F F8               [12]  888 	mov	r0,a
      000210 86 82            [24]  889 	mov	dpl,@r0
      000212 08               [12]  890 	inc	r0
      000213 86 83            [24]  891 	mov	dph,@r0
      000215 08               [12]  892 	inc	r0
      000216 86 F0            [24]  893 	mov	b,@r0
      000218 12r00r00         [24]  894 	lcall	__gptrget
      00021B FC               [12]  895 	mov	r4,a
      00021C A3               [24]  896 	inc	dptr
      00021D 12r00r00         [24]  897 	lcall	__gptrget
      000220 FD               [12]  898 	mov	r5,a
      000221 EC               [12]  899 	mov	a,r4
      000222 2E               [12]  900 	add	a,r6
      000223 F5 82            [12]  901 	mov	dpl,a
      000225 ED               [12]  902 	mov	a,r5
      000226 3F               [12]  903 	addc	a,r7
      000227 F5 83            [12]  904 	mov	dph,a
      000229 E0               [24]  905 	movx	a,@dptr
      00022A FF               [12]  906 	mov	r7,a
      00022B BF AA 05         [24]  907 	cjne	r7,#0xaa,00114$
      00022E 90 00 00         [24]  908 	mov	dptr,#0x0000
      000231 80 59            [24]  909 	sjmp	00116$
      000233                        910 00114$:
                                    911 ;	walk.c:90: else if (g[t->r][t->c] != 0x55) bang();
      000233 A8*00            [24]  912 	mov	r0,_bp
      000235 08               [12]  913 	inc	r0
      000236 86 82            [24]  914 	mov	dpl,@r0
      000238 08               [12]  915 	inc	r0
      000239 86 83            [24]  916 	mov	dph,@r0
      00023B 08               [12]  917 	inc	r0
      00023C 86 F0            [24]  918 	mov	b,@r0
      00023E 12r00r00         [24]  919 	lcall	__gptrget
      000241 FE               [12]  920 	mov	r6,a
      000242 A3               [24]  921 	inc	dptr
      000243 12r00r00         [24]  922 	lcall	__gptrget
      000246 FF               [12]  923 	mov	r7,a
      000247 C0 06            [24]  924 	push	ar6
      000249 C0 07            [24]  925 	push	ar7
      00024B 90 00 C0         [24]  926 	mov	dptr,#0x00c0
      00024E 12r00r00         [24]  927 	lcall	__mulint
      000251 AE 82            [24]  928 	mov	r6,dpl
      000253 AF 83            [24]  929 	mov	r7,dph
      000255 15 81            [12]  930 	dec	sp
      000257 15 81            [12]  931 	dec	sp
      000259 EE               [12]  932 	mov	a,r6
      00025A 24r00            [12]  933 	add	a,#_g
      00025C FE               [12]  934 	mov	r6,a
      00025D EF               [12]  935 	mov	a,r7
      00025E 34s00            [12]  936 	addc	a,#(_g >> 8)
      000260 FF               [12]  937 	mov	r7,a
      000261 E5*00            [12]  938 	mov	a,_bp
      000263 24 06            [12]  939 	add	a,#0x06
      000265 F8               [12]  940 	mov	r0,a
      000266 86 82            [24]  941 	mov	dpl,@r0
      000268 08               [12]  942 	inc	r0
      000269 86 83            [24]  943 	mov	dph,@r0
      00026B 08               [12]  944 	inc	r0
      00026C 86 F0            [24]  945 	mov	b,@r0
      00026E 12r00r00         [24]  946 	lcall	__gptrget
      000271 FC               [12]  947 	mov	r4,a
      000272 A3               [24]  948 	inc	dptr
      000273 12r00r00         [24]  949 	lcall	__gptrget
      000276 FD               [12]  950 	mov	r5,a
      000277 EC               [12]  951 	mov	a,r4
      000278 2E               [12]  952 	add	a,r6
      000279 F5 82            [12]  953 	mov	dpl,a
      00027B ED               [12]  954 	mov	a,r5
      00027C 3F               [12]  955 	addc	a,r7
      00027D F5 83            [12]  956 	mov	dph,a
      00027F E0               [24]  957 	movx	a,@dptr
      000280 FF               [12]  958 	mov	r7,a
      000281 BF 55 02         [24]  959 	cjne	r7,#0x55,00148$
      000284 80 03            [24]  960 	sjmp	00115$
      000286                        961 00148$:
      000286 12r00r1D         [24]  962 	lcall	_bang
      000289                        963 00115$:
                                    964 ;	walk.c:92: return 1;
      000289 90 00 01         [24]  965 	mov	dptr,#0x0001
      00028C                        966 00116$:
                                    967 ;	walk.c:93: }
      00028C 85*00 81         [24]  968 	mov	sp,_bp
      00028F D0*00            [24]  969 	pop	_bp
      000291 22               [24]  970 	ret
                                    971 ;------------------------------------------------------------
                                    972 ;Allocation info for local variables in function 'walk'
                                    973 ;------------------------------------------------------------
                                    974 ;nstart                    Allocated to registers 
                                    975 ;cur                       Allocated to stack - _bp +10
                                    976 ;t                         Allocated to stack - _bp +14
                                    977 ;j                         Allocated to stack - _bp +18
                                    978 ;f                         Allocated to registers r3 
                                    979 ;sloc0                     Allocated to stack - _bp +1
                                    980 ;sloc1                     Allocated to stack - _bp +2
                                    981 ;sloc2                     Allocated to stack - _bp +3
                                    982 ;sloc3                     Allocated to stack - _bp +17
                                    983 ;sloc4                     Allocated to stack - _bp +4
                                    984 ;sloc5                     Allocated to stack - _bp +5
                                    985 ;sloc6                     Allocated to stack - _bp +6
                                    986 ;sloc7                     Allocated to stack - _bp +7
                                    987 ;------------------------------------------------------------
                                    988 ;	walk.c:95: static void walk(struct node *nstart) {
                                    989 ;	-----------------------------------------
                                    990 ;	 function walk
                                    991 ;	-----------------------------------------
      000292                        992 _walk:
      000292 C0*00            [24]  993 	push	_bp
      000294 E5 81            [12]  994 	mov	a,sp
      000296 F5*00            [12]  995 	mov	_bp,a
      000298 24 12            [12]  996 	add	a,#0x12
      00029A F5 81            [12]  997 	mov	sp,a
      00029C AD 82            [24]  998 	mov	r5,dpl
      00029E AE 83            [24]  999 	mov	r6,dph
      0002A0 AF F0            [24] 1000 	mov	r7,b
                                   1001 ;	walk.c:99: cur = *nstart;
      0002A2 E5*00            [12] 1002 	mov	a,_bp
      0002A4 24 0A            [12] 1003 	add	a,#0x0a
      0002A6 F9               [12] 1004 	mov	r1,a
      0002A7 FA               [12] 1005 	mov	r2,a
      0002A8 7B 00            [12] 1006 	mov	r3,#0x00
      0002AA 7C 40            [12] 1007 	mov	r4,#0x40
      0002AC C0 01            [24] 1008 	push	ar1
      0002AE 74 04            [12] 1009 	mov	a,#0x04
      0002B0 C0 E0            [24] 1010 	push	acc
      0002B2 E4               [12] 1011 	clr	a
      0002B3 C0 E0            [24] 1012 	push	acc
      0002B5 C0 05            [24] 1013 	push	ar5
      0002B7 C0 06            [24] 1014 	push	ar6
      0002B9 C0 07            [24] 1015 	push	ar7
      0002BB 8A 82            [24] 1016 	mov	dpl,r2
      0002BD 8B 83            [24] 1017 	mov	dph,r3
      0002BF 8C F0            [24] 1018 	mov	b,r4
      0002C1 12r00r00         [24] 1019 	lcall	___memcpy
      0002C4 E5 81            [12] 1020 	mov	a,sp
      0002C6 24 FB            [12] 1021 	add	a,#0xfb
      0002C8 F5 81            [12] 1022 	mov	sp,a
      0002CA D0 01            [24] 1023 	pop	ar1
                                   1024 ;	walk.c:101: process:
      0002CC E5*00            [12] 1025 	mov	a,_bp
      0002CE 24 06            [12] 1026 	add	a,#0x06
      0002D0 F8               [12] 1027 	mov	r0,a
      0002D1 A6 01            [24] 1028 	mov	@r0,ar1
      0002D3 E5*00            [12] 1029 	mov	a,_bp
      0002D5 24 0E            [12] 1030 	add	a,#0x0e
      0002D7 FE               [12] 1031 	mov	r6,a
      0002D8 E5*00            [12] 1032 	mov	a,_bp
      0002DA 24 03            [12] 1033 	add	a,#0x03
      0002DC F8               [12] 1034 	mov	r0,a
      0002DD A6 01            [24] 1035 	mov	@r0,ar1
      0002DF E5*00            [12] 1036 	mov	a,_bp
      0002E1 24 05            [12] 1037 	add	a,#0x05
      0002E3 F8               [12] 1038 	mov	r0,a
      0002E4 A6 01            [24] 1039 	mov	@r0,ar1
      0002E6 E5*00            [12] 1040 	mov	a,_bp
      0002E8 24 04            [12] 1041 	add	a,#0x04
      0002EA F8               [12] 1042 	mov	r0,a
      0002EB A6 06            [24] 1043 	mov	@r0,ar6
      0002ED 89 02            [24] 1044 	mov	ar2,r1
      0002EF A8*00            [24] 1045 	mov	r0,_bp
      0002F1 08               [12] 1046 	inc	r0
      0002F2 A6 06            [24] 1047 	mov	@r0,ar6
      0002F4 A8*00            [24] 1048 	mov	r0,_bp
      0002F6 08               [12] 1049 	inc	r0
      0002F7 08               [12] 1050 	inc	r0
      0002F8 A6 01            [24] 1051 	mov	@r0,ar1
      0002FA 74 02            [12] 1052 	mov	a,#0x02
      0002FC 29               [12] 1053 	add	a,r1
      0002FD F8               [12] 1054 	mov	r0,a
      0002FE                       1055 00101$:
                                   1056 ;	walk.c:102: g[cur.r][cur.c] = 0xaa;
      0002FE C0 02            [24] 1057 	push	ar2
      000300 87 02            [24] 1058 	mov	ar2,@r1
      000302 09               [12] 1059 	inc	r1
      000303 87 05            [24] 1060 	mov	ar5,@r1
      000305 19               [12] 1061 	dec	r1
      000306 C0 06            [24] 1062 	push	ar6
      000308 C0 01            [24] 1063 	push	ar1
      00030A C0 00            [24] 1064 	push	ar0
      00030C C0 02            [24] 1065 	push	ar2
      00030E C0 05            [24] 1066 	push	ar5
      000310 90 00 C0         [24] 1067 	mov	dptr,#0x00c0
      000313 12r00r00         [24] 1068 	lcall	__mulint
      000316 AA 82            [24] 1069 	mov	r2,dpl
      000318 AD 83            [24] 1070 	mov	r5,dph
      00031A 15 81            [12] 1071 	dec	sp
      00031C 15 81            [12] 1072 	dec	sp
      00031E D0 00            [24] 1073 	pop	ar0
      000320 D0 01            [24] 1074 	pop	ar1
      000322 EA               [12] 1075 	mov	a,r2
      000323 24r00            [12] 1076 	add	a,#_g
      000325 FF               [12] 1077 	mov	r7,a
      000326 ED               [12] 1078 	mov	a,r5
      000327 34s00            [12] 1079 	addc	a,#(_g >> 8)
      000329 FC               [12] 1080 	mov	r4,a
      00032A 86 02            [24] 1081 	mov	ar2,@r0
      00032C 08               [12] 1082 	inc	r0
      00032D 86 05            [24] 1083 	mov	ar5,@r0
      00032F 18               [12] 1084 	dec	r0
      000330 EA               [12] 1085 	mov	a,r2
      000331 2F               [12] 1086 	add	a,r7
      000332 F5 82            [12] 1087 	mov	dpl,a
      000334 ED               [12] 1088 	mov	a,r5
      000335 3C               [12] 1089 	addc	a,r4
      000336 F5 83            [12] 1090 	mov	dph,a
      000338 74 AA            [12] 1091 	mov	a,#0xaa
      00033A F0               [24] 1092 	movx	@dptr,a
                                   1093 ;	walk.c:103: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      00033B 86 02            [24] 1094 	mov	ar2,@r0
      00033D 08               [12] 1095 	inc	r0
      00033E 86 05            [24] 1096 	mov	ar5,@r0
      000340 18               [12] 1097 	dec	r0
      000341 74 01            [12] 1098 	mov	a,#0x01
      000343 2A               [12] 1099 	add	a,r2
      000344 FF               [12] 1100 	mov	r7,a
      000345 E4               [12] 1101 	clr	a
      000346 3D               [12] 1102 	addc	a,r5
      000347 FC               [12] 1103 	mov	r4,a
      000348 87 02            [24] 1104 	mov	ar2,@r1
      00034A 09               [12] 1105 	inc	r1
      00034B 87 05            [24] 1106 	mov	ar5,@r1
      00034D 19               [12] 1107 	dec	r1
      00034E 74 04            [12] 1108 	mov	a,#0x04
      000350 2A               [12] 1109 	add	a,r2
      000351 FA               [12] 1110 	mov	r2,a
      000352 E4               [12] 1111 	clr	a
      000353 3D               [12] 1112 	addc	a,r5
      000354 FD               [12] 1113 	mov	r5,a
      000355 C0 02            [24] 1114 	push	ar2
      000357 C0 01            [24] 1115 	push	ar1
      000359 C0 00            [24] 1116 	push	ar0
      00035B C0 07            [24] 1117 	push	ar7
      00035D C0 04            [24] 1118 	push	ar4
      00035F C0 02            [24] 1119 	push	ar2
      000361 C0 05            [24] 1120 	push	ar5
      000363 74r0D            [12] 1121 	mov	a,#___str_1
      000365 C0 E0            [24] 1122 	push	acc
      000367 74s00            [12] 1123 	mov	a,#(___str_1 >> 8)
      000369 C0 E0            [24] 1124 	push	acc
      00036B 74 80            [12] 1125 	mov	a,#0x80
      00036D C0 E0            [24] 1126 	push	acc
      00036F 12r00r00         [24] 1127 	lcall	_printf
      000372 E5 81            [12] 1128 	mov	a,sp
      000374 24 F9            [12] 1129 	add	a,#0xf9
      000376 F5 81            [12] 1130 	mov	sp,a
      000378 D0 00            [24] 1131 	pop	ar0
      00037A D0 01            [24] 1132 	pop	ar1
      00037C D0 02            [24] 1133 	pop	ar2
      00037E D0 06            [24] 1134 	pop	ar6
                                   1135 ;	walk.c:130: return;
      000380 D0 02            [24] 1136 	pop	ar2
                                   1137 ;	walk.c:105: next:
      000382                       1138 00102$:
                                   1139 ;	walk.c:106: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      000382 C0 02            [24] 1140 	push	ar2
      000384 86 07            [24] 1141 	mov	ar7,@r0
      000386 08               [12] 1142 	inc	r0
      000387 86 04            [24] 1143 	mov	ar4,@r0
      000389 18               [12] 1144 	dec	r0
      00038A 87 02            [24] 1145 	mov	ar2,@r1
      00038C 09               [12] 1146 	inc	r1
      00038D 87 05            [24] 1147 	mov	ar5,@r1
      00038F 19               [12] 1148 	dec	r1
      000390 C0 06            [24] 1149 	push	ar6
      000392 C0 02            [24] 1150 	push	ar2
      000394 C0 01            [24] 1151 	push	ar1
      000396 C0 00            [24] 1152 	push	ar0
      000398 C0 07            [24] 1153 	push	ar7
      00039A C0 04            [24] 1154 	push	ar4
      00039C C0 02            [24] 1155 	push	ar2
      00039E C0 05            [24] 1156 	push	ar5
      0003A0 90rB4r00         [24] 1157 	mov	dptr,#_sp
      0003A3 E0               [24] 1158 	movx	a,@dptr
      0003A4 C0 E0            [24] 1159 	push	acc
      0003A6 A3               [24] 1160 	inc	dptr
      0003A7 E0               [24] 1161 	movx	a,@dptr
      0003A8 C0 E0            [24] 1162 	push	acc
      0003AA 74r17            [12] 1163 	mov	a,#___str_2
      0003AC C0 E0            [24] 1164 	push	acc
      0003AE 74s00            [12] 1165 	mov	a,#(___str_2 >> 8)
      0003B0 C0 E0            [24] 1166 	push	acc
      0003B2 74 80            [12] 1167 	mov	a,#0x80
      0003B4 C0 E0            [24] 1168 	push	acc
      0003B6 12r00r00         [24] 1169 	lcall	_printf
      0003B9 E5 81            [12] 1170 	mov	a,sp
      0003BB 24 F7            [12] 1171 	add	a,#0xf7
      0003BD F5 81            [12] 1172 	mov	sp,a
      0003BF D0 00            [24] 1173 	pop	ar0
      0003C1 D0 01            [24] 1174 	pop	ar1
      0003C3 D0 02            [24] 1175 	pop	ar2
      0003C5 D0 06            [24] 1176 	pop	ar6
                                   1177 ;	walk.c:108: for (j = 0, f = 0; j < NMAX; j++) {
      0003C7 7B 00            [12] 1178 	mov	r3,#0x00
      0003C9 C0 00            [24] 1179 	push	ar0
      0003CB E5*00            [12] 1180 	mov	a,_bp
      0003CD 24 12            [12] 1181 	add	a,#0x12
      0003CF F8               [12] 1182 	mov	r0,a
      0003D0 76 00            [12] 1183 	mov	@r0,#0x00
      0003D2 D0 00            [24] 1184 	pop	ar0
                                   1185 ;	walk.c:130: return;
      0003D4 D0 02            [24] 1186 	pop	ar2
                                   1187 ;	walk.c:108: for (j = 0, f = 0; j < NMAX; j++) {
      0003D6                       1188 00120$:
      0003D6 C0 00            [24] 1189 	push	ar0
      0003D8 E5*00            [12] 1190 	mov	a,_bp
      0003DA 24 12            [12] 1191 	add	a,#0x12
      0003DC F8               [12] 1192 	mov	r0,a
      0003DD B6 08 00         [24] 1193 	cjne	@r0,#0x08,00160$
      0003E0                       1194 00160$:
      0003E0 D0 00            [24] 1195 	pop	ar0
      0003E2 40 03            [24] 1196 	jc	00161$
      0003E4 02r04r64         [24] 1197 	ljmp	00106$
      0003E7                       1198 00161$:
                                   1199 ;	walk.c:109: if (!update(&t, &cur, j)) continue;
      0003E7 C0 02            [24] 1200 	push	ar2
      0003E9 C0 00            [24] 1201 	push	ar0
      0003EB E5*00            [12] 1202 	mov	a,_bp
      0003ED 24 06            [12] 1203 	add	a,#0x06
      0003EF F8               [12] 1204 	mov	r0,a
      0003F0 C0 01            [24] 1205 	push	ar1
      0003F2 E5*00            [12] 1206 	mov	a,_bp
      0003F4 24 07            [12] 1207 	add	a,#0x07
      0003F6 F9               [12] 1208 	mov	r1,a
      0003F7 E6               [12] 1209 	mov	a,@r0
      0003F8 F7               [12] 1210 	mov	@r1,a
      0003F9 09               [12] 1211 	inc	r1
      0003FA 77 00            [12] 1212 	mov	@r1,#0x00
      0003FC 09               [12] 1213 	inc	r1
      0003FD 77 40            [12] 1214 	mov	@r1,#0x40
      0003FF D0 01            [24] 1215 	pop	ar1
      000401 D0 00            [24] 1216 	pop	ar0
      000403 8E 04            [24] 1217 	mov	ar4,r6
      000405 7D 00            [12] 1218 	mov	r5,#0x00
      000407 7F 40            [12] 1219 	mov	r7,#0x40
      000409 C0 06            [24] 1220 	push	ar6
      00040B C0 03            [24] 1221 	push	ar3
      00040D C0 02            [24] 1222 	push	ar2
      00040F C0 01            [24] 1223 	push	ar1
      000411 C0 00            [24] 1224 	push	ar0
      000413 85 00 F0         [24] 1225 	mov	b,ar0
      000416 E5*00            [12] 1226 	mov	a,_bp
      000418 24 12            [12] 1227 	add	a,#0x12
      00041A F8               [12] 1228 	mov	r0,a
      00041B E6               [12] 1229 	mov	a,@r0
      00041C C0 E0            [24] 1230 	push	acc
      00041E A8 F0            [24] 1231 	mov	r0,b
      000420 85 00 F0         [24] 1232 	mov	b,ar0
      000423 E5*00            [12] 1233 	mov	a,_bp
      000425 24 07            [12] 1234 	add	a,#0x07
      000427 F8               [12] 1235 	mov	r0,a
      000428 E6               [12] 1236 	mov	a,@r0
      000429 C0 E0            [24] 1237 	push	acc
      00042B 08               [12] 1238 	inc	r0
      00042C E6               [12] 1239 	mov	a,@r0
      00042D C0 E0            [24] 1240 	push	acc
      00042F 08               [12] 1241 	inc	r0
      000430 E6               [12] 1242 	mov	a,@r0
      000431 C0 E0            [24] 1243 	push	acc
      000433 8C 82            [24] 1244 	mov	dpl,r4
      000435 8D 83            [24] 1245 	mov	dph,r5
      000437 8F F0            [24] 1246 	mov	b,r7
      000439 12r00r29         [24] 1247 	lcall	_update
      00043C AD 82            [24] 1248 	mov	r5,dpl
      00043E AF 83            [24] 1249 	mov	r7,dph
      000440 E5 81            [12] 1250 	mov	a,sp
      000442 24 FC            [12] 1251 	add	a,#0xfc
      000444 F5 81            [12] 1252 	mov	sp,a
      000446 D0 00            [24] 1253 	pop	ar0
      000448 D0 01            [24] 1254 	pop	ar1
      00044A D0 02            [24] 1255 	pop	ar2
      00044C D0 03            [24] 1256 	pop	ar3
      00044E D0 06            [24] 1257 	pop	ar6
      000450 D0 02            [24] 1258 	pop	ar2
      000452 ED               [12] 1259 	mov	a,r5
      000453 4F               [12] 1260 	orl	a,r7
      000454 60 01            [24] 1261 	jz	00105$
                                   1262 ;	walk.c:110: f++;
      000456 0B               [12] 1263 	inc	r3
      000457                       1264 00105$:
                                   1265 ;	walk.c:108: for (j = 0, f = 0; j < NMAX; j++) {
      000457 C0 00            [24] 1266 	push	ar0
      000459 E5*00            [12] 1267 	mov	a,_bp
      00045B 24 12            [12] 1268 	add	a,#0x12
      00045D F8               [12] 1269 	mov	r0,a
      00045E 06               [12] 1270 	inc	@r0
      00045F D0 00            [24] 1271 	pop	ar0
      000461 02r03rD6         [24] 1272 	ljmp	00120$
      000464                       1273 00106$:
                                   1274 ;	walk.c:113: if (f) {
      000464 EB               [12] 1275 	mov	a,r3
      000465 70 03            [24] 1276 	jnz	00163$
      000467 02r05r9C         [24] 1277 	ljmp	00115$
      00046A                       1278 00163$:
                                   1279 ;	walk.c:114: while (1) {
      00046A                       1280 00112$:
                                   1281 ;	walk.c:115: j = rand() % NMAX;
      00046A C0 02            [24] 1282 	push	ar2
      00046C C0 06            [24] 1283 	push	ar6
      00046E C0 02            [24] 1284 	push	ar2
      000470 C0 01            [24] 1285 	push	ar1
      000472 C0 00            [24] 1286 	push	ar0
      000474 12r00r00         [24] 1287 	lcall	_rand
      000477 AD 82            [24] 1288 	mov	r5,dpl
      000479 AF 83            [24] 1289 	mov	r7,dph
      00047B 74 08            [12] 1290 	mov	a,#0x08
      00047D C0 E0            [24] 1291 	push	acc
      00047F E4               [12] 1292 	clr	a
      000480 C0 E0            [24] 1293 	push	acc
      000482 8D 82            [24] 1294 	mov	dpl,r5
      000484 8F 83            [24] 1295 	mov	dph,r7
      000486 12r00r00         [24] 1296 	lcall	__modsint
      000489 AD 82            [24] 1297 	mov	r5,dpl
      00048B 15 81            [12] 1298 	dec	sp
      00048D 15 81            [12] 1299 	dec	sp
      00048F D0 00            [24] 1300 	pop	ar0
      000491 D0 01            [24] 1301 	pop	ar1
      000493 D0 02            [24] 1302 	pop	ar2
      000495 D0 06            [24] 1303 	pop	ar6
      000497 8D 04            [24] 1304 	mov	ar4,r5
                                   1305 ;	walk.c:116: if (!update(&t, &cur, j)) continue;
      000499 C0 00            [24] 1306 	push	ar0
      00049B E5*00            [12] 1307 	mov	a,_bp
      00049D 24 05            [12] 1308 	add	a,#0x05
      00049F F8               [12] 1309 	mov	r0,a
      0004A0 C0 01            [24] 1310 	push	ar1
      0004A2 E5*00            [12] 1311 	mov	a,_bp
      0004A4 24 07            [12] 1312 	add	a,#0x07
      0004A6 F9               [12] 1313 	mov	r1,a
      0004A7 E6               [12] 1314 	mov	a,@r0
      0004A8 F7               [12] 1315 	mov	@r1,a
      0004A9 09               [12] 1316 	inc	r1
      0004AA 77 00            [12] 1317 	mov	@r1,#0x00
      0004AC 09               [12] 1318 	inc	r1
      0004AD 77 40            [12] 1319 	mov	@r1,#0x40
      0004AF D0 01            [24] 1320 	pop	ar1
      0004B1 E5*00            [12] 1321 	mov	a,_bp
      0004B3 24 04            [12] 1322 	add	a,#0x04
      0004B5 F8               [12] 1323 	mov	r0,a
      0004B6 86 02            [24] 1324 	mov	ar2,@r0
      0004B8 7D 00            [12] 1325 	mov	r5,#0x00
      0004BA 7F 40            [12] 1326 	mov	r7,#0x40
      0004BC D0 00            [24] 1327 	pop	ar0
      0004BE C0 06            [24] 1328 	push	ar6
      0004C0 C0 02            [24] 1329 	push	ar2
      0004C2 C0 01            [24] 1330 	push	ar1
      0004C4 C0 00            [24] 1331 	push	ar0
      0004C6 C0 04            [24] 1332 	push	ar4
      0004C8 85 00 F0         [24] 1333 	mov	b,ar0
      0004CB E5*00            [12] 1334 	mov	a,_bp
      0004CD 24 07            [12] 1335 	add	a,#0x07
      0004CF F8               [12] 1336 	mov	r0,a
      0004D0 E6               [12] 1337 	mov	a,@r0
      0004D1 C0 E0            [24] 1338 	push	acc
      0004D3 08               [12] 1339 	inc	r0
      0004D4 E6               [12] 1340 	mov	a,@r0
      0004D5 C0 E0            [24] 1341 	push	acc
      0004D7 08               [12] 1342 	inc	r0
      0004D8 E6               [12] 1343 	mov	a,@r0
      0004D9 C0 E0            [24] 1344 	push	acc
      0004DB 8A 82            [24] 1345 	mov	dpl,r2
      0004DD 8D 83            [24] 1346 	mov	dph,r5
      0004DF 8F F0            [24] 1347 	mov	b,r7
      0004E1 12r00r29         [24] 1348 	lcall	_update
      0004E4 AD 82            [24] 1349 	mov	r5,dpl
      0004E6 AF 83            [24] 1350 	mov	r7,dph
      0004E8 E5 81            [12] 1351 	mov	a,sp
      0004EA 24 FC            [12] 1352 	add	a,#0xfc
      0004EC F5 81            [12] 1353 	mov	sp,a
      0004EE D0 00            [24] 1354 	pop	ar0
      0004F0 D0 01            [24] 1355 	pop	ar1
      0004F2 D0 02            [24] 1356 	pop	ar2
      0004F4 D0 06            [24] 1357 	pop	ar6
      0004F6 D0 02            [24] 1358 	pop	ar2
      0004F8 ED               [12] 1359 	mov	a,r5
      0004F9 4F               [12] 1360 	orl	a,r7
      0004FA 70 03            [24] 1361 	jnz	00164$
      0004FC 02r04r6A         [24] 1362 	ljmp	00112$
      0004FF                       1363 00164$:
                                   1364 ;	walk.c:118: if (!stpush(&cur)) bang();
      0004FF 8A 04            [24] 1365 	mov	ar4,r2
      000501 7D 00            [12] 1366 	mov	r5,#0x00
      000503 7F 40            [12] 1367 	mov	r7,#0x40
      000505 8C 82            [24] 1368 	mov	dpl,r4
      000507 8D 83            [24] 1369 	mov	dph,r5
      000509 8F F0            [24] 1370 	mov	b,r7
      00050B C0 06            [24] 1371 	push	ar6
      00050D C0 02            [24] 1372 	push	ar2
      00050F C0 01            [24] 1373 	push	ar1
      000511 C0 00            [24] 1374 	push	ar0
      000513 12r08r3B         [24] 1375 	lcall	_stpush
      000516 E5 82            [12] 1376 	mov	a,dpl
      000518 85 83 F0         [24] 1377 	mov	b,dph
      00051B D0 00            [24] 1378 	pop	ar0
      00051D D0 01            [24] 1379 	pop	ar1
      00051F D0 02            [24] 1380 	pop	ar2
      000521 D0 06            [24] 1381 	pop	ar6
      000523 45 F0            [12] 1382 	orl	a,b
      000525 70 13            [24] 1383 	jnz	00110$
      000527 C0 06            [24] 1384 	push	ar6
      000529 C0 02            [24] 1385 	push	ar2
      00052B C0 01            [24] 1386 	push	ar1
      00052D C0 00            [24] 1387 	push	ar0
      00052F 12r00r1D         [24] 1388 	lcall	_bang
      000532 D0 00            [24] 1389 	pop	ar0
      000534 D0 01            [24] 1390 	pop	ar1
      000536 D0 02            [24] 1391 	pop	ar2
      000538 D0 06            [24] 1392 	pop	ar6
      00053A                       1393 00110$:
                                   1394 ;	walk.c:119: cur = t;
      00053A C0 02            [24] 1395 	push	ar2
      00053C C0 00            [24] 1396 	push	ar0
      00053E A8*00            [24] 1397 	mov	r0,_bp
      000540 08               [12] 1398 	inc	r0
      000541 C0 01            [24] 1399 	push	ar1
      000543 E5*00            [12] 1400 	mov	a,_bp
      000545 24 07            [12] 1401 	add	a,#0x07
      000547 F9               [12] 1402 	mov	r1,a
      000548 E6               [12] 1403 	mov	a,@r0
      000549 F7               [12] 1404 	mov	@r1,a
      00054A 09               [12] 1405 	inc	r1
      00054B 77 00            [12] 1406 	mov	@r1,#0x00
      00054D 09               [12] 1407 	inc	r1
      00054E 77 40            [12] 1408 	mov	@r1,#0x40
      000550 D0 01            [24] 1409 	pop	ar1
      000552 A8*00            [24] 1410 	mov	r0,_bp
      000554 08               [12] 1411 	inc	r0
      000555 08               [12] 1412 	inc	r0
      000556 86 02            [24] 1413 	mov	ar2,@r0
      000558 7B 00            [12] 1414 	mov	r3,#0x00
      00055A 7F 40            [12] 1415 	mov	r7,#0x40
      00055C D0 00            [24] 1416 	pop	ar0
      00055E C0 06            [24] 1417 	push	ar6
      000560 C0 02            [24] 1418 	push	ar2
      000562 C0 01            [24] 1419 	push	ar1
      000564 C0 00            [24] 1420 	push	ar0
      000566 74 04            [12] 1421 	mov	a,#0x04
      000568 C0 E0            [24] 1422 	push	acc
      00056A E4               [12] 1423 	clr	a
      00056B C0 E0            [24] 1424 	push	acc
      00056D 85 00 F0         [24] 1425 	mov	b,ar0
      000570 E5*00            [12] 1426 	mov	a,_bp
      000572 24 07            [12] 1427 	add	a,#0x07
      000574 F8               [12] 1428 	mov	r0,a
      000575 E6               [12] 1429 	mov	a,@r0
      000576 C0 E0            [24] 1430 	push	acc
      000578 08               [12] 1431 	inc	r0
      000579 E6               [12] 1432 	mov	a,@r0
      00057A C0 E0            [24] 1433 	push	acc
      00057C 08               [12] 1434 	inc	r0
      00057D E6               [12] 1435 	mov	a,@r0
      00057E C0 E0            [24] 1436 	push	acc
      000580 8A 82            [24] 1437 	mov	dpl,r2
      000582 8B 83            [24] 1438 	mov	dph,r3
      000584 8F F0            [24] 1439 	mov	b,r7
      000586 12r00r00         [24] 1440 	lcall	___memcpy
      000589 E5 81            [12] 1441 	mov	a,sp
      00058B 24 FB            [12] 1442 	add	a,#0xfb
      00058D F5 81            [12] 1443 	mov	sp,a
      00058F D0 00            [24] 1444 	pop	ar0
      000591 D0 01            [24] 1445 	pop	ar1
      000593 D0 02            [24] 1446 	pop	ar2
      000595 D0 06            [24] 1447 	pop	ar6
                                   1448 ;	walk.c:120: goto process;
      000597 D0 02            [24] 1449 	pop	ar2
      000599 02r02rFE         [24] 1450 	ljmp	00101$
      00059C                       1451 00115$:
                                   1452 ;	walk.c:124: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      00059C 86 05            [24] 1453 	mov	ar5,@r0
      00059E 08               [12] 1454 	inc	r0
      00059F 86 07            [24] 1455 	mov	ar7,@r0
      0005A1 18               [12] 1456 	dec	r0
      0005A2 0D               [12] 1457 	inc	r5
      0005A3 BD 00 01         [24] 1458 	cjne	r5,#0x00,00166$
      0005A6 0F               [12] 1459 	inc	r7
      0005A7                       1460 00166$:
      0005A7 87 03            [24] 1461 	mov	ar3,@r1
      0005A9 09               [12] 1462 	inc	r1
      0005AA 87 04            [24] 1463 	mov	ar4,@r1
      0005AC 19               [12] 1464 	dec	r1
      0005AD 74 04            [12] 1465 	mov	a,#0x04
      0005AF 2B               [12] 1466 	add	a,r3
      0005B0 FB               [12] 1467 	mov	r3,a
      0005B1 E4               [12] 1468 	clr	a
      0005B2 3C               [12] 1469 	addc	a,r4
      0005B3 FC               [12] 1470 	mov	r4,a
      0005B4 C0 06            [24] 1471 	push	ar6
      0005B6 C0 02            [24] 1472 	push	ar2
      0005B8 C0 01            [24] 1473 	push	ar1
      0005BA C0 00            [24] 1474 	push	ar0
      0005BC C0 05            [24] 1475 	push	ar5
      0005BE C0 07            [24] 1476 	push	ar7
      0005C0 C0 03            [24] 1477 	push	ar3
      0005C2 C0 04            [24] 1478 	push	ar4
      0005C4 74r2A            [12] 1479 	mov	a,#___str_3
      0005C6 C0 E0            [24] 1480 	push	acc
      0005C8 74s00            [12] 1481 	mov	a,#(___str_3 >> 8)
      0005CA C0 E0            [24] 1482 	push	acc
      0005CC 74 80            [12] 1483 	mov	a,#0x80
      0005CE C0 E0            [24] 1484 	push	acc
      0005D0 12r00r00         [24] 1485 	lcall	_printf
      0005D3 E5 81            [12] 1486 	mov	a,sp
      0005D5 24 F9            [12] 1487 	add	a,#0xf9
      0005D7 F5 81            [12] 1488 	mov	sp,a
      0005D9 D0 00            [24] 1489 	pop	ar0
      0005DB D0 01            [24] 1490 	pop	ar1
      0005DD D0 02            [24] 1491 	pop	ar2
      0005DF D0 06            [24] 1492 	pop	ar6
                                   1493 ;	walk.c:126: if (!stpop(&cur)) goto term;
      0005E1 C0 00            [24] 1494 	push	ar0
      0005E3 E5*00            [12] 1495 	mov	a,_bp
      0005E5 24 03            [12] 1496 	add	a,#0x03
      0005E7 F8               [12] 1497 	mov	r0,a
      0005E8 86 04            [24] 1498 	mov	ar4,@r0
      0005EA 7D 00            [12] 1499 	mov	r5,#0x00
      0005EC 7F 40            [12] 1500 	mov	r7,#0x40
      0005EE D0 00            [24] 1501 	pop	ar0
      0005F0 8C 82            [24] 1502 	mov	dpl,r4
      0005F2 8D 83            [24] 1503 	mov	dph,r5
      0005F4 8F F0            [24] 1504 	mov	b,r7
      0005F6 C0 06            [24] 1505 	push	ar6
      0005F8 C0 02            [24] 1506 	push	ar2
      0005FA C0 01            [24] 1507 	push	ar1
      0005FC C0 00            [24] 1508 	push	ar0
      0005FE 12r08r9C         [24] 1509 	lcall	_stpop
      000601 E5 82            [12] 1510 	mov	a,dpl
      000603 85 83 F0         [24] 1511 	mov	b,dph
      000606 D0 00            [24] 1512 	pop	ar0
      000608 D0 01            [24] 1513 	pop	ar1
      00060A D0 02            [24] 1514 	pop	ar2
      00060C D0 06            [24] 1515 	pop	ar6
      00060E 45 F0            [12] 1516 	orl	a,b
      000610 60 03            [24] 1517 	jz	00167$
      000612 02r03r82         [24] 1518 	ljmp	00102$
      000615                       1519 00167$:
                                   1520 ;	walk.c:130: return;
                                   1521 ;	walk.c:131: }
      000615 85*00 81         [24] 1522 	mov	sp,_bp
      000618 D0*00            [24] 1523 	pop	_bp
      00061A 22               [24] 1524 	ret
                                   1525 ;------------------------------------------------------------
                                   1526 ;Allocation info for local variables in function 'main'
                                   1527 ;------------------------------------------------------------
                                   1528 ;initial                   Allocated to stack - _bp +5
                                   1529 ;N                         Allocated to stack - _bp +9
                                   1530 ;i                         Allocated to stack - _bp +11
                                   1531 ;j                         Allocated to registers r2 r6 
                                   1532 ;sloc0                     Allocated to stack - _bp +1
                                   1533 ;sloc1                     Allocated to stack - _bp +3
                                   1534 ;R                         Allocated with name '_main_R_65536_64'
                                   1535 ;------------------------------------------------------------
                                   1536 ;	walk.c:133: int main(void) {
                                   1537 ;	-----------------------------------------
                                   1538 ;	 function main
                                   1539 ;	-----------------------------------------
      00061B                       1540 _main:
      00061B C0*00            [24] 1541 	push	_bp
      00061D E5 81            [12] 1542 	mov	a,sp
      00061F F5*00            [12] 1543 	mov	_bp,a
      000621 24 0C            [12] 1544 	add	a,#0x0c
      000623 F5 81            [12] 1545 	mov	sp,a
                                   1546 ;	walk.c:139: i0 = 1;
      000625 78r00            [12] 1547 	mov	r0,#_i0
      000627 76 01            [12] 1548 	mov	@r0,#0x01
                                   1549 ;	walk.c:141: IT0 = 1;
                                   1550 ;	assignBit
      000629 D2 88            [12] 1551 	setb	_IT0
                                   1552 ;	walk.c:142: EX0 = 1;
                                   1553 ;	assignBit
      00062B D2 A8            [12] 1554 	setb	_EX0
                                   1555 ;	walk.c:143: EA = 1;
                                   1556 ;	assignBit
      00062D D2 AF            [12] 1557 	setb	_EA
                                   1558 ;	walk.c:145: srand(*R);
      00062F 90rB4r02         [24] 1559 	mov	dptr,#_main_R_65536_64
      000632 E0               [24] 1560 	movx	a,@dptr
      000633 FE               [12] 1561 	mov	r6,a
      000634 A3               [24] 1562 	inc	dptr
      000635 E0               [24] 1563 	movx	a,@dptr
      000636 FF               [12] 1564 	mov	r7,a
      000637 8E 82            [24] 1565 	mov	dpl,r6
      000639 8F 83            [24] 1566 	mov	dph,r7
      00063B E0               [24] 1567 	movx	a,@dptr
      00063C FE               [12] 1568 	mov	r6,a
      00063D A3               [24] 1569 	inc	dptr
      00063E E0               [24] 1570 	movx	a,@dptr
      00063F FF               [12] 1571 	mov	r7,a
      000640 8E 82            [24] 1572 	mov	dpl,r6
      000642 8F 83            [24] 1573 	mov	dph,r7
      000644 12r00r00         [24] 1574 	lcall	_srand
                                   1575 ;	walk.c:146: stinit();
      000647 12r08r32         [24] 1576 	lcall	_stinit
                                   1577 ;	walk.c:148: puts("\033[2J\033[?25l");
      00064A 90r00r34         [24] 1578 	mov	dptr,#___str_4
      00064D 75 F0 80         [24] 1579 	mov	b,#0x80
      000650 12r00r00         [24] 1580 	lcall	_puts
                                   1581 ;	walk.c:150: while (i0) {
      000653 E5*00            [12] 1582 	mov	a,_bp
      000655 24 05            [12] 1583 	add	a,#0x05
      000657 F9               [12] 1584 	mov	r1,a
      000658 FF               [12] 1585 	mov	r7,a
      000659 E5*00            [12] 1586 	mov	a,_bp
      00065B 24 09            [12] 1587 	add	a,#0x09
      00065D F8               [12] 1588 	mov	r0,a
      00065E E4               [12] 1589 	clr	a
      00065F F6               [12] 1590 	mov	@r0,a
      000660 08               [12] 1591 	inc	r0
      000661 F6               [12] 1592 	mov	@r0,a
      000662                       1593 00107$:
      000662 78r00            [12] 1594 	mov	r0,#_i0
      000664 E6               [12] 1595 	mov	a,@r0
      000665 70 03            [24] 1596 	jnz	00169$
      000667 02r08r1B         [24] 1597 	ljmp	00109$
      00066A                       1598 00169$:
                                   1599 ;	walk.c:151: for (i = 0; i < ROWS; i++)
      00066A 7B 00            [12] 1600 	mov	r3,#0x00
      00066C 7C 00            [12] 1601 	mov	r4,#0x00
      00066E A8*00            [24] 1602 	mov	r0,_bp
      000670 08               [12] 1603 	inc	r0
      000671 E4               [12] 1604 	clr	a
      000672 F6               [12] 1605 	mov	@r0,a
      000673 08               [12] 1606 	inc	r0
      000674 F6               [12] 1607 	mov	@r0,a
                                   1608 ;	walk.c:152: for (j = 0; j < COLS; j++)
      000675                       1609 00121$:
      000675 A8*00            [24] 1610 	mov	r0,_bp
      000677 08               [12] 1611 	inc	r0
      000678 C0 01            [24] 1612 	push	ar1
      00067A E5*00            [12] 1613 	mov	a,_bp
      00067C 24 03            [12] 1614 	add	a,#0x03
      00067E F9               [12] 1615 	mov	r1,a
      00067F E6               [12] 1616 	mov	a,@r0
      000680 24r00            [12] 1617 	add	a,#_g
      000682 F7               [12] 1618 	mov	@r1,a
      000683 08               [12] 1619 	inc	r0
      000684 E6               [12] 1620 	mov	a,@r0
      000685 34s00            [12] 1621 	addc	a,#(_g >> 8)
      000687 09               [12] 1622 	inc	r1
      000688 F7               [12] 1623 	mov	@r1,a
      000689 D0 01            [24] 1624 	pop	ar1
      00068B 7A 00            [12] 1625 	mov	r2,#0x00
      00068D 7E 00            [12] 1626 	mov	r6,#0x00
      00068F                       1627 00110$:
                                   1628 ;	walk.c:153: g[i][j] = 0x55;
      00068F E5*00            [12] 1629 	mov	a,_bp
      000691 24 03            [12] 1630 	add	a,#0x03
      000693 F8               [12] 1631 	mov	r0,a
      000694 EA               [12] 1632 	mov	a,r2
      000695 26               [12] 1633 	add	a,@r0
      000696 F5 82            [12] 1634 	mov	dpl,a
      000698 EE               [12] 1635 	mov	a,r6
      000699 08               [12] 1636 	inc	r0
      00069A 36               [12] 1637 	addc	a,@r0
      00069B F5 83            [12] 1638 	mov	dph,a
      00069D 74 55            [12] 1639 	mov	a,#0x55
      00069F F0               [24] 1640 	movx	@dptr,a
                                   1641 ;	walk.c:152: for (j = 0; j < COLS; j++)
      0006A0 0A               [12] 1642 	inc	r2
      0006A1 BA 00 01         [24] 1643 	cjne	r2,#0x00,00170$
      0006A4 0E               [12] 1644 	inc	r6
      0006A5                       1645 00170$:
      0006A5 C3               [12] 1646 	clr	c
      0006A6 EA               [12] 1647 	mov	a,r2
      0006A7 94 C0            [12] 1648 	subb	a,#0xc0
      0006A9 EE               [12] 1649 	mov	a,r6
      0006AA 64 80            [12] 1650 	xrl	a,#0x80
      0006AC 94 80            [12] 1651 	subb	a,#0x80
      0006AE 40 DF            [24] 1652 	jc	00110$
                                   1653 ;	walk.c:151: for (i = 0; i < ROWS; i++)
      0006B0 A8*00            [24] 1654 	mov	r0,_bp
      0006B2 08               [12] 1655 	inc	r0
      0006B3 74 C0            [12] 1656 	mov	a,#0xc0
      0006B5 26               [12] 1657 	add	a,@r0
      0006B6 F6               [12] 1658 	mov	@r0,a
      0006B7 E4               [12] 1659 	clr	a
      0006B8 08               [12] 1660 	inc	r0
      0006B9 36               [12] 1661 	addc	a,@r0
      0006BA F6               [12] 1662 	mov	@r0,a
      0006BB 0B               [12] 1663 	inc	r3
      0006BC BB 00 01         [24] 1664 	cjne	r3,#0x00,00172$
      0006BF 0C               [12] 1665 	inc	r4
      0006C0                       1666 00172$:
      0006C0 C3               [12] 1667 	clr	c
      0006C1 EB               [12] 1668 	mov	a,r3
      0006C2 94 30            [12] 1669 	subb	a,#0x30
      0006C4 EC               [12] 1670 	mov	a,r4
      0006C5 64 80            [12] 1671 	xrl	a,#0x80
      0006C7 94 80            [12] 1672 	subb	a,#0x80
      0006C9 40 AA            [24] 1673 	jc	00121$
                                   1674 ;	walk.c:155: initial.r = rand() % ROWS;
      0006CB E5*00            [12] 1675 	mov	a,_bp
      0006CD 24 05            [12] 1676 	add	a,#0x05
      0006CF F8               [12] 1677 	mov	r0,a
      0006D0 C0 07            [24] 1678 	push	ar7
      0006D2 C0 01            [24] 1679 	push	ar1
      0006D4 C0 00            [24] 1680 	push	ar0
      0006D6 12r00r00         [24] 1681 	lcall	_rand
      0006D9 AD 82            [24] 1682 	mov	r5,dpl
      0006DB AE 83            [24] 1683 	mov	r6,dph
      0006DD 74 30            [12] 1684 	mov	a,#0x30
      0006DF C0 E0            [24] 1685 	push	acc
      0006E1 E4               [12] 1686 	clr	a
      0006E2 C0 E0            [24] 1687 	push	acc
      0006E4 8D 82            [24] 1688 	mov	dpl,r5
      0006E6 8E 83            [24] 1689 	mov	dph,r6
      0006E8 12r00r00         [24] 1690 	lcall	__modsint
      0006EB AD 82            [24] 1691 	mov	r5,dpl
      0006ED AE 83            [24] 1692 	mov	r6,dph
      0006EF 15 81            [12] 1693 	dec	sp
      0006F1 15 81            [12] 1694 	dec	sp
      0006F3 D0 00            [24] 1695 	pop	ar0
      0006F5 D0 01            [24] 1696 	pop	ar1
      0006F7 A6 05            [24] 1697 	mov	@r0,ar5
      0006F9 08               [12] 1698 	inc	r0
      0006FA A6 06            [24] 1699 	mov	@r0,ar6
      0006FC 18               [12] 1700 	dec	r0
                                   1701 ;	walk.c:156: initial.c = rand() % COLS;
      0006FD 74 02            [12] 1702 	mov	a,#0x02
      0006FF 29               [12] 1703 	add	a,r1
      000700 F8               [12] 1704 	mov	r0,a
      000701 C0 01            [24] 1705 	push	ar1
      000703 C0 00            [24] 1706 	push	ar0
      000705 12r00r00         [24] 1707 	lcall	_rand
      000708 AD 82            [24] 1708 	mov	r5,dpl
      00070A AE 83            [24] 1709 	mov	r6,dph
      00070C 74 C0            [12] 1710 	mov	a,#0xc0
      00070E C0 E0            [24] 1711 	push	acc
      000710 E4               [12] 1712 	clr	a
      000711 C0 E0            [24] 1713 	push	acc
      000713 8D 82            [24] 1714 	mov	dpl,r5
      000715 8E 83            [24] 1715 	mov	dph,r6
      000717 12r00r00         [24] 1716 	lcall	__modsint
      00071A AD 82            [24] 1717 	mov	r5,dpl
      00071C AE 83            [24] 1718 	mov	r6,dph
      00071E 15 81            [12] 1719 	dec	sp
      000720 15 81            [12] 1720 	dec	sp
      000722 D0 00            [24] 1721 	pop	ar0
      000724 A6 05            [24] 1722 	mov	@r0,ar5
      000726 08               [12] 1723 	inc	r0
      000727 A6 06            [24] 1724 	mov	@r0,ar6
      000729 18               [12] 1725 	dec	r0
                                   1726 ;	walk.c:158: puts("\033[2J\033[?25l");
      00072A 90r00r34         [24] 1727 	mov	dptr,#___str_4
      00072D 75 F0 80         [24] 1728 	mov	b,#0x80
      000730 C0 00            [24] 1729 	push	ar0
      000732 12r00r00         [24] 1730 	lcall	_puts
      000735 D0 00            [24] 1731 	pop	ar0
      000737 D0 01            [24] 1732 	pop	ar1
                                   1733 ;	walk.c:159: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      000739 86 05            [24] 1734 	mov	ar5,@r0
      00073B 08               [12] 1735 	inc	r0
      00073C 86 06            [24] 1736 	mov	ar6,@r0
      00073E 18               [12] 1737 	dec	r0
      00073F 87 03            [24] 1738 	mov	ar3,@r1
      000741 09               [12] 1739 	inc	r1
      000742 87 04            [24] 1740 	mov	ar4,@r1
      000744 19               [12] 1741 	dec	r1
      000745 C0 01            [24] 1742 	push	ar1
      000747 C0 05            [24] 1743 	push	ar5
      000749 C0 06            [24] 1744 	push	ar6
      00074B C0 03            [24] 1745 	push	ar3
      00074D C0 04            [24] 1746 	push	ar4
      00074F E5*00            [12] 1747 	mov	a,_bp
      000751 24 09            [12] 1748 	add	a,#0x09
      000753 F8               [12] 1749 	mov	r0,a
      000754 E6               [12] 1750 	mov	a,@r0
      000755 C0 E0            [24] 1751 	push	acc
      000757 08               [12] 1752 	inc	r0
      000758 E6               [12] 1753 	mov	a,@r0
      000759 C0 E0            [24] 1754 	push	acc
      00075B 74r3F            [12] 1755 	mov	a,#___str_5
      00075D C0 E0            [24] 1756 	push	acc
      00075F 74s00            [12] 1757 	mov	a,#(___str_5 >> 8)
      000761 C0 E0            [24] 1758 	push	acc
      000763 74 80            [12] 1759 	mov	a,#0x80
      000765 C0 E0            [24] 1760 	push	acc
      000767 12r00r00         [24] 1761 	lcall	_printf
      00076A E5 81            [12] 1762 	mov	a,sp
      00076C 24 F7            [12] 1763 	add	a,#0xf7
      00076E F5 81            [12] 1764 	mov	sp,a
      000770 D0 01            [24] 1765 	pop	ar1
      000772 D0 07            [24] 1766 	pop	ar7
                                   1767 ;	walk.c:161: walk(&initial);
      000774 8F 04            [24] 1768 	mov	ar4,r7
      000776 7D 00            [12] 1769 	mov	r5,#0x00
      000778 7E 40            [12] 1770 	mov	r6,#0x40
      00077A 8C 82            [24] 1771 	mov	dpl,r4
      00077C 8D 83            [24] 1772 	mov	dph,r5
      00077E 8E F0            [24] 1773 	mov	b,r6
      000780 C0 07            [24] 1774 	push	ar7
      000782 C0 01            [24] 1775 	push	ar1
      000784 12r02r92         [24] 1776 	lcall	_walk
      000787 D0 01            [24] 1777 	pop	ar1
      000789 D0 07            [24] 1778 	pop	ar7
                                   1779 ;	walk.c:163: for (i = 0; i < ROWS; i++)
      00078B E5*00            [12] 1780 	mov	a,_bp
      00078D 24 0B            [12] 1781 	add	a,#0x0b
      00078F F8               [12] 1782 	mov	r0,a
      000790 E4               [12] 1783 	clr	a
      000791 F6               [12] 1784 	mov	@r0,a
      000792 08               [12] 1785 	inc	r0
      000793 F6               [12] 1786 	mov	@r0,a
      000794 7B 00            [12] 1787 	mov	r3,#0x00
      000796 7C 00            [12] 1788 	mov	r4,#0x00
                                   1789 ;	walk.c:164: for (j = 0; j < COLS; j++)
      000798                       1790 00126$:
      000798 E5*00            [12] 1791 	mov	a,_bp
      00079A 24 03            [12] 1792 	add	a,#0x03
      00079C F8               [12] 1793 	mov	r0,a
      00079D EB               [12] 1794 	mov	a,r3
      00079E 24r00            [12] 1795 	add	a,#_g
      0007A0 F6               [12] 1796 	mov	@r0,a
      0007A1 EC               [12] 1797 	mov	a,r4
      0007A2 34s00            [12] 1798 	addc	a,#(_g >> 8)
      0007A4 08               [12] 1799 	inc	r0
      0007A5 F6               [12] 1800 	mov	@r0,a
      0007A6 7A 00            [12] 1801 	mov	r2,#0x00
      0007A8 7E 00            [12] 1802 	mov	r6,#0x00
      0007AA                       1803 00114$:
                                   1804 ;	walk.c:165: if (g[i][j] != 0xaa) bang();
      0007AA E5*00            [12] 1805 	mov	a,_bp
      0007AC 24 03            [12] 1806 	add	a,#0x03
      0007AE F8               [12] 1807 	mov	r0,a
      0007AF EA               [12] 1808 	mov	a,r2
      0007B0 26               [12] 1809 	add	a,@r0
      0007B1 F5 82            [12] 1810 	mov	dpl,a
      0007B3 EE               [12] 1811 	mov	a,r6
      0007B4 08               [12] 1812 	inc	r0
      0007B5 36               [12] 1813 	addc	a,@r0
      0007B6 F5 83            [12] 1814 	mov	dph,a
      0007B8 E0               [24] 1815 	movx	a,@dptr
      0007B9 FD               [12] 1816 	mov	r5,a
      0007BA BD AA 02         [24] 1817 	cjne	r5,#0xaa,00174$
      0007BD 80 1B            [24] 1818 	sjmp	00115$
      0007BF                       1819 00174$:
      0007BF C0 07            [24] 1820 	push	ar7
      0007C1 C0 06            [24] 1821 	push	ar6
      0007C3 C0 04            [24] 1822 	push	ar4
      0007C5 C0 03            [24] 1823 	push	ar3
      0007C7 C0 02            [24] 1824 	push	ar2
      0007C9 C0 01            [24] 1825 	push	ar1
      0007CB 12r00r1D         [24] 1826 	lcall	_bang
      0007CE D0 01            [24] 1827 	pop	ar1
      0007D0 D0 02            [24] 1828 	pop	ar2
      0007D2 D0 03            [24] 1829 	pop	ar3
      0007D4 D0 04            [24] 1830 	pop	ar4
      0007D6 D0 06            [24] 1831 	pop	ar6
      0007D8 D0 07            [24] 1832 	pop	ar7
      0007DA                       1833 00115$:
                                   1834 ;	walk.c:164: for (j = 0; j < COLS; j++)
      0007DA 0A               [12] 1835 	inc	r2
      0007DB BA 00 01         [24] 1836 	cjne	r2,#0x00,00175$
      0007DE 0E               [12] 1837 	inc	r6
      0007DF                       1838 00175$:
      0007DF C3               [12] 1839 	clr	c
      0007E0 EA               [12] 1840 	mov	a,r2
      0007E1 94 C0            [12] 1841 	subb	a,#0xc0
      0007E3 EE               [12] 1842 	mov	a,r6
      0007E4 64 80            [12] 1843 	xrl	a,#0x80
      0007E6 94 80            [12] 1844 	subb	a,#0x80
      0007E8 40 C0            [24] 1845 	jc	00114$
                                   1846 ;	walk.c:163: for (i = 0; i < ROWS; i++)
      0007EA 74 C0            [12] 1847 	mov	a,#0xc0
      0007EC 2B               [12] 1848 	add	a,r3
      0007ED FB               [12] 1849 	mov	r3,a
      0007EE E4               [12] 1850 	clr	a
      0007EF 3C               [12] 1851 	addc	a,r4
      0007F0 FC               [12] 1852 	mov	r4,a
      0007F1 E5*00            [12] 1853 	mov	a,_bp
      0007F3 24 0B            [12] 1854 	add	a,#0x0b
      0007F5 F8               [12] 1855 	mov	r0,a
      0007F6 06               [12] 1856 	inc	@r0
      0007F7 B6 00 02         [24] 1857 	cjne	@r0,#0x00,00177$
      0007FA 08               [12] 1858 	inc	r0
      0007FB 06               [12] 1859 	inc	@r0
      0007FC                       1860 00177$:
      0007FC E5*00            [12] 1861 	mov	a,_bp
      0007FE 24 0B            [12] 1862 	add	a,#0x0b
      000800 F8               [12] 1863 	mov	r0,a
      000801 C3               [12] 1864 	clr	c
      000802 E6               [12] 1865 	mov	a,@r0
      000803 94 30            [12] 1866 	subb	a,#0x30
      000805 08               [12] 1867 	inc	r0
      000806 E6               [12] 1868 	mov	a,@r0
      000807 64 80            [12] 1869 	xrl	a,#0x80
      000809 94 80            [12] 1870 	subb	a,#0x80
      00080B 40 8B            [24] 1871 	jc	00126$
                                   1872 ;	walk.c:167: N++;
      00080D E5*00            [12] 1873 	mov	a,_bp
      00080F 24 09            [12] 1874 	add	a,#0x09
      000811 F8               [12] 1875 	mov	r0,a
      000812 06               [12] 1876 	inc	@r0
      000813 B6 00 02         [24] 1877 	cjne	@r0,#0x00,00179$
      000816 08               [12] 1878 	inc	r0
      000817 06               [12] 1879 	inc	@r0
      000818                       1880 00179$:
      000818 02r06r62         [24] 1881 	ljmp	00107$
      00081B                       1882 00109$:
                                   1883 ;	walk.c:170: EA = 0;
                                   1884 ;	assignBit
      00081B C2 AF            [12] 1885 	clr	_EA
                                   1886 ;	walk.c:172: puts("\033[2J\033[?25h");
      00081D 90r00r52         [24] 1887 	mov	dptr,#___str_6
      000820 75 F0 80         [24] 1888 	mov	b,#0x80
      000823 12r00r00         [24] 1889 	lcall	_puts
                                   1890 ;	walk.c:176: __endasm;
      000826 02 00 00         [24] 1891 	ljmp	0
                                   1892 ;	walk.c:178: return 0;
      000829 90 00 00         [24] 1893 	mov	dptr,#0x0000
                                   1894 ;	walk.c:179: }
      00082C 85*00 81         [24] 1895 	mov	sp,_bp
      00082F D0*00            [24] 1896 	pop	_bp
      000831 22               [24] 1897 	ret
                                   1898 ;------------------------------------------------------------
                                   1899 ;Allocation info for local variables in function 'stinit'
                                   1900 ;------------------------------------------------------------
                                   1901 ;	walk.c:181: static void stinit(void) {
                                   1902 ;	-----------------------------------------
                                   1903 ;	 function stinit
                                   1904 ;	-----------------------------------------
      000832                       1905 _stinit:
                                   1906 ;	walk.c:182: sp = -1;
      000832 90rB4r00         [24] 1907 	mov	dptr,#_sp
      000835 74 FF            [12] 1908 	mov	a,#0xff
      000837 F0               [24] 1909 	movx	@dptr,a
      000838 A3               [24] 1910 	inc	dptr
      000839 F0               [24] 1911 	movx	@dptr,a
                                   1912 ;	walk.c:183: return;
                                   1913 ;	walk.c:184: }
      00083A 22               [24] 1914 	ret
                                   1915 ;------------------------------------------------------------
                                   1916 ;Allocation info for local variables in function 'stpush'
                                   1917 ;------------------------------------------------------------
                                   1918 ;t                         Allocated to registers r5 r6 r7 
                                   1919 ;------------------------------------------------------------
                                   1920 ;	walk.c:186: static int stpush(struct node *t) {
                                   1921 ;	-----------------------------------------
                                   1922 ;	 function stpush
                                   1923 ;	-----------------------------------------
      00083B                       1924 _stpush:
      00083B AD 82            [24] 1925 	mov	r5,dpl
      00083D AE 83            [24] 1926 	mov	r6,dph
      00083F AF F0            [24] 1927 	mov	r7,b
                                   1928 ;	walk.c:187: if (sp == (SMAX - 1)) return 0;
      000841 90rB4r00         [24] 1929 	mov	dptr,#_sp
      000844 E0               [24] 1930 	movx	a,@dptr
      000845 FB               [12] 1931 	mov	r3,a
      000846 A3               [24] 1932 	inc	dptr
      000847 E0               [24] 1933 	movx	a,@dptr
      000848 FC               [12] 1934 	mov	r4,a
      000849 BB FF 07         [24] 1935 	cjne	r3,#0xff,00102$
      00084C BC 23 04         [24] 1936 	cjne	r4,#0x23,00102$
      00084F 90 00 00         [24] 1937 	mov	dptr,#0x0000
      000852 22               [24] 1938 	ret
      000853                       1939 00102$:
                                   1940 ;	walk.c:188: sp++;
      000853 90rB4r00         [24] 1941 	mov	dptr,#_sp
      000856 74 01            [12] 1942 	mov	a,#0x01
      000858 2B               [12] 1943 	add	a,r3
      000859 F0               [24] 1944 	movx	@dptr,a
      00085A E4               [12] 1945 	clr	a
      00085B 3C               [12] 1946 	addc	a,r4
      00085C A3               [24] 1947 	inc	dptr
      00085D F0               [24] 1948 	movx	@dptr,a
                                   1949 ;	walk.c:189: stack[sp] = *t;
      00085E 90rB4r00         [24] 1950 	mov	dptr,#_sp
      000861 E0               [24] 1951 	movx	a,@dptr
      000862 FB               [12] 1952 	mov	r3,a
      000863 A3               [24] 1953 	inc	dptr
      000864 E0               [24] 1954 	movx	a,@dptr
      000865 FC               [12] 1955 	mov	r4,a
      000866 EB               [12] 1956 	mov	a,r3
      000867 2B               [12] 1957 	add	a,r3
      000868 FB               [12] 1958 	mov	r3,a
      000869 EC               [12] 1959 	mov	a,r4
      00086A 33               [12] 1960 	rlc	a
      00086B FC               [12] 1961 	mov	r4,a
      00086C EB               [12] 1962 	mov	a,r3
      00086D 2B               [12] 1963 	add	a,r3
      00086E FB               [12] 1964 	mov	r3,a
      00086F EC               [12] 1965 	mov	a,r4
      000870 33               [12] 1966 	rlc	a
      000871 FC               [12] 1967 	mov	r4,a
      000872 EB               [12] 1968 	mov	a,r3
      000873 24r00            [12] 1969 	add	a,#_stack
      000875 FB               [12] 1970 	mov	r3,a
      000876 EC               [12] 1971 	mov	a,r4
      000877 34s24            [12] 1972 	addc	a,#(_stack >> 8)
      000879 FC               [12] 1973 	mov	r4,a
      00087A 7A 00            [12] 1974 	mov	r2,#0x00
      00087C 74 04            [12] 1975 	mov	a,#0x04
      00087E C0 E0            [24] 1976 	push	acc
      000880 E4               [12] 1977 	clr	a
      000881 C0 E0            [24] 1978 	push	acc
      000883 C0 05            [24] 1979 	push	ar5
      000885 C0 06            [24] 1980 	push	ar6
      000887 C0 07            [24] 1981 	push	ar7
      000889 8B 82            [24] 1982 	mov	dpl,r3
      00088B 8C 83            [24] 1983 	mov	dph,r4
      00088D 8A F0            [24] 1984 	mov	b,r2
      00088F 12r00r00         [24] 1985 	lcall	___memcpy
      000892 E5 81            [12] 1986 	mov	a,sp
      000894 24 FB            [12] 1987 	add	a,#0xfb
      000896 F5 81            [12] 1988 	mov	sp,a
                                   1989 ;	walk.c:190: return 1;
      000898 90 00 01         [24] 1990 	mov	dptr,#0x0001
                                   1991 ;	walk.c:191: }
      00089B 22               [24] 1992 	ret
                                   1993 ;------------------------------------------------------------
                                   1994 ;Allocation info for local variables in function 'stpop'
                                   1995 ;------------------------------------------------------------
                                   1996 ;t                         Allocated to registers r5 r6 r7 
                                   1997 ;------------------------------------------------------------
                                   1998 ;	walk.c:193: static int stpop(struct node *t) {
                                   1999 ;	-----------------------------------------
                                   2000 ;	 function stpop
                                   2001 ;	-----------------------------------------
      00089C                       2002 _stpop:
      00089C AD 82            [24] 2003 	mov	r5,dpl
      00089E AE 83            [24] 2004 	mov	r6,dph
      0008A0 AF F0            [24] 2005 	mov	r7,b
                                   2006 ;	walk.c:194: if (sp == -1) return 0;
      0008A2 90rB4r00         [24] 2007 	mov	dptr,#_sp
      0008A5 E0               [24] 2008 	movx	a,@dptr
      0008A6 FB               [12] 2009 	mov	r3,a
      0008A7 A3               [24] 2010 	inc	dptr
      0008A8 E0               [24] 2011 	movx	a,@dptr
      0008A9 FC               [12] 2012 	mov	r4,a
      0008AA BB FF 07         [24] 2013 	cjne	r3,#0xff,00102$
      0008AD BC FF 04         [24] 2014 	cjne	r4,#0xff,00102$
      0008B0 90 00 00         [24] 2015 	mov	dptr,#0x0000
      0008B3 22               [24] 2016 	ret
      0008B4                       2017 00102$:
                                   2018 ;	walk.c:195: *t = stack[sp];
      0008B4 EB               [12] 2019 	mov	a,r3
      0008B5 2B               [12] 2020 	add	a,r3
      0008B6 FB               [12] 2021 	mov	r3,a
      0008B7 EC               [12] 2022 	mov	a,r4
      0008B8 33               [12] 2023 	rlc	a
      0008B9 FC               [12] 2024 	mov	r4,a
      0008BA EB               [12] 2025 	mov	a,r3
      0008BB 2B               [12] 2026 	add	a,r3
      0008BC FB               [12] 2027 	mov	r3,a
      0008BD EC               [12] 2028 	mov	a,r4
      0008BE 33               [12] 2029 	rlc	a
      0008BF FC               [12] 2030 	mov	r4,a
      0008C0 EB               [12] 2031 	mov	a,r3
      0008C1 24r00            [12] 2032 	add	a,#_stack
      0008C3 FB               [12] 2033 	mov	r3,a
      0008C4 EC               [12] 2034 	mov	a,r4
      0008C5 34s24            [12] 2035 	addc	a,#(_stack >> 8)
      0008C7 FC               [12] 2036 	mov	r4,a
      0008C8 7A 00            [12] 2037 	mov	r2,#0x00
      0008CA 74 04            [12] 2038 	mov	a,#0x04
      0008CC C0 E0            [24] 2039 	push	acc
      0008CE E4               [12] 2040 	clr	a
      0008CF C0 E0            [24] 2041 	push	acc
      0008D1 C0 03            [24] 2042 	push	ar3
      0008D3 C0 04            [24] 2043 	push	ar4
      0008D5 C0 02            [24] 2044 	push	ar2
      0008D7 8D 82            [24] 2045 	mov	dpl,r5
      0008D9 8E 83            [24] 2046 	mov	dph,r6
      0008DB 8F F0            [24] 2047 	mov	b,r7
      0008DD 12r00r00         [24] 2048 	lcall	___memcpy
      0008E0 E5 81            [12] 2049 	mov	a,sp
      0008E2 24 FB            [12] 2050 	add	a,#0xfb
      0008E4 F5 81            [12] 2051 	mov	sp,a
                                   2052 ;	walk.c:196: sp--;
      0008E6 90rB4r00         [24] 2053 	mov	dptr,#_sp
      0008E9 E0               [24] 2054 	movx	a,@dptr
      0008EA 24 FF            [12] 2055 	add	a,#0xff
      0008EC FE               [12] 2056 	mov	r6,a
      0008ED A3               [24] 2057 	inc	dptr
      0008EE E0               [24] 2058 	movx	a,@dptr
      0008EF 34 FF            [12] 2059 	addc	a,#0xff
      0008F1 FF               [12] 2060 	mov	r7,a
      0008F2 90rB4r00         [24] 2061 	mov	dptr,#_sp
      0008F5 EE               [12] 2062 	mov	a,r6
      0008F6 F0               [24] 2063 	movx	@dptr,a
      0008F7 EF               [12] 2064 	mov	a,r7
      0008F8 A3               [24] 2065 	inc	dptr
      0008F9 F0               [24] 2066 	movx	@dptr,a
                                   2067 ;	walk.c:197: return 1;
      0008FA 90 00 01         [24] 2068 	mov	dptr,#0x0001
                                   2069 ;	walk.c:198: }
      0008FD 22               [24] 2070 	ret
                                   2071 	.area CSEG    (CODE)
                                   2072 	.area CONST   (CODE)
                                   2073 	.area CONST   (CODE)
      000000                       2074 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2075 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2076 	.db 0x00
                                   2077 	.area CSEG    (CODE)
                                   2078 	.area CONST   (CODE)
      00000D                       2079 ___str_1:
      00000D 1B                    2080 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2081 	.ascii "[%d;%dHo"
             6F
      000016 00                    2082 	.db 0x00
                                   2083 	.area CSEG    (CODE)
                                   2084 	.area CONST   (CODE)
      000017                       2085 ___str_2:
      000017 1B                    2086 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2087 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2088 	.db 0x00
                                   2089 	.area CSEG    (CODE)
                                   2090 	.area CONST   (CODE)
      00002A                       2091 ___str_3:
      00002A 1B                    2092 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2093 	.ascii "[%d;%dH."
             2E
      000033 00                    2094 	.db 0x00
                                   2095 	.area CSEG    (CODE)
                                   2096 	.area CONST   (CODE)
      000034                       2097 ___str_4:
      000034 1B                    2098 	.db 0x1b
      000035 5B 32 4A              2099 	.ascii "[2J"
      000038 1B                    2100 	.db 0x1b
      000039 5B 3F 32 35 6C        2101 	.ascii "[?25l"
      00003E 00                    2102 	.db 0x00
                                   2103 	.area CSEG    (CODE)
                                   2104 	.area CONST   (CODE)
      00003F                       2105 ___str_5:
      00003F 1B                    2106 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2107 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2108 	.db 0x00
                                   2109 	.area CSEG    (CODE)
                                   2110 	.area CONST   (CODE)
      000052                       2111 ___str_6:
      000052 1B                    2112 	.db 0x1b
      000053 5B 32 4A              2113 	.ascii "[2J"
      000056 1B                    2114 	.db 0x1b
      000057 5B 3F 32 35 68        2115 	.ascii "[?25h"
      00005C 00                    2116 	.db 0x00
                                   2117 	.area CSEG    (CODE)
                                   2118 	.area XINIT   (CODE)
                                   2119 	.area CABS    (ABS,CODE)
