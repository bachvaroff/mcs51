                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module dump
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _print16x
                                     14 	.globl _print8x
                                     15 	.globl _printstr
                                     16 	.globl _getchar
                                     17 	.globl _putchar
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _FL
                                     25 	.globl _P
                                     26 	.globl _TF2
                                     27 	.globl _EXF2
                                     28 	.globl _RCLK
                                     29 	.globl _TCLK
                                     30 	.globl _EXEN2
                                     31 	.globl _TR2
                                     32 	.globl _C_T2
                                     33 	.globl _CP_RL2
                                     34 	.globl _T2CON_7
                                     35 	.globl _T2CON_6
                                     36 	.globl _T2CON_5
                                     37 	.globl _T2CON_4
                                     38 	.globl _T2CON_3
                                     39 	.globl _T2CON_2
                                     40 	.globl _T2CON_1
                                     41 	.globl _T2CON_0
                                     42 	.globl _PT2
                                     43 	.globl _PS
                                     44 	.globl _PT1
                                     45 	.globl _PX1
                                     46 	.globl _PT0
                                     47 	.globl _PX0
                                     48 	.globl _RD
                                     49 	.globl _WR
                                     50 	.globl _T1
                                     51 	.globl _T0
                                     52 	.globl _INT1
                                     53 	.globl _INT0
                                     54 	.globl _TXD
                                     55 	.globl _RXD
                                     56 	.globl _P3_7
                                     57 	.globl _P3_6
                                     58 	.globl _P3_5
                                     59 	.globl _P3_4
                                     60 	.globl _P3_3
                                     61 	.globl _P3_2
                                     62 	.globl _P3_1
                                     63 	.globl _P3_0
                                     64 	.globl _EA
                                     65 	.globl _ET2
                                     66 	.globl _ES
                                     67 	.globl _ET1
                                     68 	.globl _EX1
                                     69 	.globl _ET0
                                     70 	.globl _EX0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _SM0
                                     80 	.globl _SM1
                                     81 	.globl _SM2
                                     82 	.globl _REN
                                     83 	.globl _TB8
                                     84 	.globl _RB8
                                     85 	.globl _TI
                                     86 	.globl _RI
                                     87 	.globl _T2EX
                                     88 	.globl _T2
                                     89 	.globl _P1_7
                                     90 	.globl _P1_6
                                     91 	.globl _P1_5
                                     92 	.globl _P1_4
                                     93 	.globl _P1_3
                                     94 	.globl _P1_2
                                     95 	.globl _P1_1
                                     96 	.globl _P1_0
                                     97 	.globl _TF1
                                     98 	.globl _TR1
                                     99 	.globl _TF0
                                    100 	.globl _TR0
                                    101 	.globl _IE1
                                    102 	.globl _IT1
                                    103 	.globl _IE0
                                    104 	.globl _IT0
                                    105 	.globl _P0_7
                                    106 	.globl _P0_6
                                    107 	.globl _P0_5
                                    108 	.globl _P0_4
                                    109 	.globl _P0_3
                                    110 	.globl _P0_2
                                    111 	.globl _P0_1
                                    112 	.globl _P0_0
                                    113 	.globl _B
                                    114 	.globl _A
                                    115 	.globl _ACC
                                    116 	.globl _PSW
                                    117 	.globl _TH2
                                    118 	.globl _TL2
                                    119 	.globl _RCAP2H
                                    120 	.globl _RCAP2L
                                    121 	.globl _T2MOD
                                    122 	.globl _T2CON
                                    123 	.globl _IP
                                    124 	.globl _P3
                                    125 	.globl _IE
                                    126 	.globl _P2
                                    127 	.globl _SBUF
                                    128 	.globl _SCON
                                    129 	.globl _P1
                                    130 	.globl _TH1
                                    131 	.globl _TH0
                                    132 	.globl _TL1
                                    133 	.globl _TL0
                                    134 	.globl _TMOD
                                    135 	.globl _TCON
                                    136 	.globl _PCON
                                    137 	.globl _DPH
                                    138 	.globl _DPL
                                    139 	.globl _SP
                                    140 	.globl _P0
                                    141 	.globl _col
                                    142 	.globl _off
                                    143 	.globl _base
                                    144 	.globl _intr
                                    145 ;--------------------------------------------------------
                                    146 ; special function registers
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0	=	0x0080
                           000081   151 _SP	=	0x0081
                           000082   152 _DPL	=	0x0082
                           000083   153 _DPH	=	0x0083
                           000087   154 _PCON	=	0x0087
                           000088   155 _TCON	=	0x0088
                           000089   156 _TMOD	=	0x0089
                           00008A   157 _TL0	=	0x008a
                           00008B   158 _TL1	=	0x008b
                           00008C   159 _TH0	=	0x008c
                           00008D   160 _TH1	=	0x008d
                           000090   161 _P1	=	0x0090
                           000098   162 _SCON	=	0x0098
                           000099   163 _SBUF	=	0x0099
                           0000A0   164 _P2	=	0x00a0
                           0000A8   165 _IE	=	0x00a8
                           0000B0   166 _P3	=	0x00b0
                           0000B8   167 _IP	=	0x00b8
                           0000C8   168 _T2CON	=	0x00c8
                           0000C9   169 _T2MOD	=	0x00c9
                           0000CA   170 _RCAP2L	=	0x00ca
                           0000CB   171 _RCAP2H	=	0x00cb
                           0000CC   172 _TL2	=	0x00cc
                           0000CD   173 _TH2	=	0x00cd
                           0000D0   174 _PSW	=	0x00d0
                           0000E0   175 _ACC	=	0x00e0
                           0000E0   176 _A	=	0x00e0
                           0000F0   177 _B	=	0x00f0
                                    178 ;--------------------------------------------------------
                                    179 ; special function bits
                                    180 ;--------------------------------------------------------
                                    181 	.area RSEG    (ABS,DATA)
      000000                        182 	.org 0x0000
                           000080   183 _P0_0	=	0x0080
                           000081   184 _P0_1	=	0x0081
                           000082   185 _P0_2	=	0x0082
                           000083   186 _P0_3	=	0x0083
                           000084   187 _P0_4	=	0x0084
                           000085   188 _P0_5	=	0x0085
                           000086   189 _P0_6	=	0x0086
                           000087   190 _P0_7	=	0x0087
                           000088   191 _IT0	=	0x0088
                           000089   192 _IE0	=	0x0089
                           00008A   193 _IT1	=	0x008a
                           00008B   194 _IE1	=	0x008b
                           00008C   195 _TR0	=	0x008c
                           00008D   196 _TF0	=	0x008d
                           00008E   197 _TR1	=	0x008e
                           00008F   198 _TF1	=	0x008f
                           000090   199 _P1_0	=	0x0090
                           000091   200 _P1_1	=	0x0091
                           000092   201 _P1_2	=	0x0092
                           000093   202 _P1_3	=	0x0093
                           000094   203 _P1_4	=	0x0094
                           000095   204 _P1_5	=	0x0095
                           000096   205 _P1_6	=	0x0096
                           000097   206 _P1_7	=	0x0097
                           000090   207 _T2	=	0x0090
                           000091   208 _T2EX	=	0x0091
                           000098   209 _RI	=	0x0098
                           000099   210 _TI	=	0x0099
                           00009A   211 _RB8	=	0x009a
                           00009B   212 _TB8	=	0x009b
                           00009C   213 _REN	=	0x009c
                           00009D   214 _SM2	=	0x009d
                           00009E   215 _SM1	=	0x009e
                           00009F   216 _SM0	=	0x009f
                           0000A0   217 _P2_0	=	0x00a0
                           0000A1   218 _P2_1	=	0x00a1
                           0000A2   219 _P2_2	=	0x00a2
                           0000A3   220 _P2_3	=	0x00a3
                           0000A4   221 _P2_4	=	0x00a4
                           0000A5   222 _P2_5	=	0x00a5
                           0000A6   223 _P2_6	=	0x00a6
                           0000A7   224 _P2_7	=	0x00a7
                           0000A8   225 _EX0	=	0x00a8
                           0000A9   226 _ET0	=	0x00a9
                           0000AA   227 _EX1	=	0x00aa
                           0000AB   228 _ET1	=	0x00ab
                           0000AC   229 _ES	=	0x00ac
                           0000AD   230 _ET2	=	0x00ad
                           0000AF   231 _EA	=	0x00af
                           0000B0   232 _P3_0	=	0x00b0
                           0000B1   233 _P3_1	=	0x00b1
                           0000B2   234 _P3_2	=	0x00b2
                           0000B3   235 _P3_3	=	0x00b3
                           0000B4   236 _P3_4	=	0x00b4
                           0000B5   237 _P3_5	=	0x00b5
                           0000B6   238 _P3_6	=	0x00b6
                           0000B7   239 _P3_7	=	0x00b7
                           0000B0   240 _RXD	=	0x00b0
                           0000B1   241 _TXD	=	0x00b1
                           0000B2   242 _INT0	=	0x00b2
                           0000B3   243 _INT1	=	0x00b3
                           0000B4   244 _T0	=	0x00b4
                           0000B5   245 _T1	=	0x00b5
                           0000B6   246 _WR	=	0x00b6
                           0000B7   247 _RD	=	0x00b7
                           0000B8   248 _PX0	=	0x00b8
                           0000B9   249 _PT0	=	0x00b9
                           0000BA   250 _PX1	=	0x00ba
                           0000BB   251 _PT1	=	0x00bb
                           0000BC   252 _PS	=	0x00bc
                           0000BD   253 _PT2	=	0x00bd
                           0000C8   254 _T2CON_0	=	0x00c8
                           0000C9   255 _T2CON_1	=	0x00c9
                           0000CA   256 _T2CON_2	=	0x00ca
                           0000CB   257 _T2CON_3	=	0x00cb
                           0000CC   258 _T2CON_4	=	0x00cc
                           0000CD   259 _T2CON_5	=	0x00cd
                           0000CE   260 _T2CON_6	=	0x00ce
                           0000CF   261 _T2CON_7	=	0x00cf
                           0000C8   262 _CP_RL2	=	0x00c8
                           0000C9   263 _C_T2	=	0x00c9
                           0000CA   264 _TR2	=	0x00ca
                           0000CB   265 _EXEN2	=	0x00cb
                           0000CC   266 _TCLK	=	0x00cc
                           0000CD   267 _RCLK	=	0x00cd
                           0000CE   268 _EXF2	=	0x00ce
                           0000CF   269 _TF2	=	0x00cf
                           0000D0   270 _P	=	0x00d0
                           0000D1   271 _FL	=	0x00d1
                           0000D2   272 _OV	=	0x00d2
                           0000D3   273 _RS0	=	0x00d3
                           0000D4   274 _RS1	=	0x00d4
                           0000D5   275 _F0	=	0x00d5
                           0000D6   276 _AC	=	0x00d6
                           0000D7   277 _CY	=	0x00d7
                                    278 ;--------------------------------------------------------
                                    279 ; overlayable register banks
                                    280 ;--------------------------------------------------------
                                    281 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        284 	.ds 8
                                    285 ;--------------------------------------------------------
                                    286 ; internal ram data
                                    287 ;--------------------------------------------------------
                                    288 	.area DSEG    (DATA)
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable items in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 ;--------------------------------------------------------
                                    293 ; Stack segment in internal ram 
                                    294 ;--------------------------------------------------------
                                    295 	.area	SSEG
      000000                        296 __start__stack:
      000000                        297 	.ds	1
                                    298 
                                    299 ;--------------------------------------------------------
                                    300 ; indirectly addressable internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area ISEG    (DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; absolute internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area IABS    (ABS,DATA)
                                    307 	.area IABS    (ABS,DATA)
                                    308 ;--------------------------------------------------------
                                    309 ; bit data
                                    310 ;--------------------------------------------------------
                                    311 	.area BSEG    (BIT)
                                    312 ;--------------------------------------------------------
                                    313 ; paged external ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area PSEG    (PAG,XDATA)
                                    316 ;--------------------------------------------------------
                                    317 ; external ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area XSEG    (XDATA)
      000000                        320 _intr::
      000000                        321 	.ds 1
      000001                        322 _base::
      000001                        323 	.ds 3
      000004                        324 _off::
      000004                        325 	.ds 2
      000006                        326 _col::
      000006                        327 	.ds 2
                                    328 ;--------------------------------------------------------
                                    329 ; absolute external ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XABS    (ABS,XDATA)
                                    332 ;--------------------------------------------------------
                                    333 ; external initialized ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XISEG   (XDATA)
                                    336 	.area HOME    (CODE)
                                    337 	.area GSINIT0 (CODE)
                                    338 	.area GSINIT1 (CODE)
                                    339 	.area GSINIT2 (CODE)
                                    340 	.area GSINIT3 (CODE)
                                    341 	.area GSINIT4 (CODE)
                                    342 	.area GSINIT5 (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.area GSFINAL (CODE)
                                    345 	.area CSEG    (CODE)
                                    346 ;--------------------------------------------------------
                                    347 ; interrupt vector 
                                    348 ;--------------------------------------------------------
                                    349 	.area HOME    (CODE)
      000000                        350 __interrupt_vect:
      000000 02r00r00         [24]  351 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  352 	ljmp	_int0
                                    353 ;--------------------------------------------------------
                                    354 ; global & static initialisations
                                    355 ;--------------------------------------------------------
                                    356 	.area HOME    (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.area GSFINAL (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.globl __sdcc_gsinit_startup
                                    361 	.globl __sdcc_program_startup
                                    362 	.globl __start__stack
                                    363 	.globl __mcs51_genXINIT
                                    364 	.globl __mcs51_genXRAMCLEAR
                                    365 	.globl __mcs51_genRAMCLEAR
                                    366 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  367 	ljmp	__sdcc_program_startup
                                    368 ;--------------------------------------------------------
                                    369 ; Home
                                    370 ;--------------------------------------------------------
                                    371 	.area HOME    (CODE)
                                    372 	.area HOME    (CODE)
      000006                        373 __sdcc_program_startup:
      000006 02r00r13         [24]  374 	ljmp	_main
                                    375 ;	return from main will return to caller
                                    376 ;--------------------------------------------------------
                                    377 ; code
                                    378 ;--------------------------------------------------------
                                    379 	.area CSEG    (CODE)
                                    380 ;------------------------------------------------------------
                                    381 ;Allocation info for local variables in function 'int0'
                                    382 ;------------------------------------------------------------
                                    383 ;	dump.c:7: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    384 ;	-----------------------------------------
                                    385 ;	 function int0
                                    386 ;	-----------------------------------------
      000000                        387 _int0:
                           00000F   388 	ar7 = 0x0f
                           00000E   389 	ar6 = 0x0e
                           00000D   390 	ar5 = 0x0d
                           00000C   391 	ar4 = 0x0c
                           00000B   392 	ar3 = 0x0b
                           00000A   393 	ar2 = 0x0a
                           000009   394 	ar1 = 0x09
                           000008   395 	ar0 = 0x08
      000000 C0 E0            [24]  396 	push	acc
      000002 C0 82            [24]  397 	push	dpl
      000004 C0 83            [24]  398 	push	dph
                                    399 ;	dump.c:8: intr = 1;
      000006 90r00r00         [24]  400 	mov	dptr,#_intr
      000009 74 01            [12]  401 	mov	a,#0x01
      00000B F0               [24]  402 	movx	@dptr,a
                                    403 ;	dump.c:9: }
      00000C D0 83            [24]  404 	pop	dph
      00000E D0 82            [24]  405 	pop	dpl
      000010 D0 E0            [24]  406 	pop	acc
      000012 32               [24]  407 	reti
                                    408 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    409 ;	eliminated unneeded push/pop psw
                                    410 ;	eliminated unneeded push/pop b
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'main'
                                    413 ;------------------------------------------------------------
                                    414 ;	dump.c:14: void main(void) {
                                    415 ;	-----------------------------------------
                                    416 ;	 function main
                                    417 ;	-----------------------------------------
      000013                        418 _main:
                           000007   419 	ar7 = 0x07
                           000006   420 	ar6 = 0x06
                           000005   421 	ar5 = 0x05
                           000004   422 	ar4 = 0x04
                           000003   423 	ar3 = 0x03
                           000002   424 	ar2 = 0x02
                           000001   425 	ar1 = 0x01
                           000000   426 	ar0 = 0x00
                                    427 ;	dump.c:15: intr = 0;
      000013 90r00r00         [24]  428 	mov	dptr,#_intr
      000016 E4               [12]  429 	clr	a
      000017 F0               [24]  430 	movx	@dptr,a
                                    431 ;	dump.c:17: IT0 = 1;
                                    432 ;	assignBit
      000018 D2 88            [12]  433 	setb	_IT0
                                    434 ;	dump.c:18: EX0 = 1;	
                                    435 ;	assignBit
      00001A D2 A8            [12]  436 	setb	_EX0
                                    437 ;	dump.c:19: EA = 1;
                                    438 ;	assignBit
      00001C D2 AF            [12]  439 	setb	_EA
                                    440 ;	dump.c:21: P1_7 = 0; /* activate IO address space from 0xe000 to 0xffff */
                                    441 ;	assignBit
      00001E C2 97            [12]  442 	clr	_P1_7
                                    443 ;	dump.c:26: __endasm;
      000020 00               [12]  444 	nop
      000021 00               [12]  445 	nop
      000022 00               [12]  446 	nop
                                    447 ;	dump.c:28: for (base = (unsigned char *)0u; !intr; base += 0x400u) {
      000023 90r00r01         [24]  448 	mov	dptr,#_base
      000026 E4               [12]  449 	clr	a
      000027 F0               [24]  450 	movx	@dptr,a
      000028 A3               [24]  451 	inc	dptr
      000029 F0               [24]  452 	movx	@dptr,a
      00002A A3               [24]  453 	inc	dptr
      00002B F0               [24]  454 	movx	@dptr,a
      00002C                        455 00112$:
      00002C 90r00r00         [24]  456 	mov	dptr,#_intr
      00002F E0               [24]  457 	movx	a,@dptr
      000030 60 03            [24]  458 	jz	00144$
      000032 02r01r31         [24]  459 	ljmp	00106$
      000035                        460 00144$:
                                    461 ;	dump.c:29: for (off = 0u; off < 0x400u; off += 0x20u) {
      000035 90r00r04         [24]  462 	mov	dptr,#_off
      000038 E4               [12]  463 	clr	a
      000039 F0               [24]  464 	movx	@dptr,a
      00003A A3               [24]  465 	inc	dptr
      00003B F0               [24]  466 	movx	@dptr,a
      00003C                        467 00109$:
                                    468 ;	dump.c:30: print16x((unsigned int)base + off);
      00003C 90r00r01         [24]  469 	mov	dptr,#_base
      00003F E0               [24]  470 	movx	a,@dptr
      000040 FD               [12]  471 	mov	r5,a
      000041 A3               [24]  472 	inc	dptr
      000042 E0               [24]  473 	movx	a,@dptr
      000043 FE               [12]  474 	mov	r6,a
      000044 A3               [24]  475 	inc	dptr
      000045 E0               [24]  476 	movx	a,@dptr
      000046 90r00r04         [24]  477 	mov	dptr,#_off
      000049 E0               [24]  478 	movx	a,@dptr
      00004A FC               [12]  479 	mov	r4,a
      00004B A3               [24]  480 	inc	dptr
      00004C E0               [24]  481 	movx	a,@dptr
      00004D FF               [12]  482 	mov	r7,a
      00004E EC               [12]  483 	mov	a,r4
      00004F 2D               [12]  484 	add	a,r5
      000050 FD               [12]  485 	mov	r5,a
      000051 EF               [12]  486 	mov	a,r7
      000052 3E               [12]  487 	addc	a,r6
      000053 FE               [12]  488 	mov	r6,a
      000054 8D 82            [24]  489 	mov	dpl,r5
      000056 8E 83            [24]  490 	mov	dph,r6
      000058 12r00r00         [24]  491 	lcall	_print16x
                                    492 ;	dump.c:31: printstr(" : ");
      00005B 90r00r00         [24]  493 	mov	dptr,#___str_0
      00005E 75 F0 80         [24]  494 	mov	b,#0x80
      000061 12r00r00         [24]  495 	lcall	_printstr
                                    496 ;	dump.c:32: for (col = 0u; col < 0x20u; col++) {
      000064 90r00r06         [24]  497 	mov	dptr,#_col
      000067 E4               [12]  498 	clr	a
      000068 F0               [24]  499 	movx	@dptr,a
      000069 A3               [24]  500 	inc	dptr
      00006A F0               [24]  501 	movx	@dptr,a
      00006B                        502 00107$:
                                    503 ;	dump.c:33: print8x(base[off + col]);
      00006B 90r00r06         [24]  504 	mov	dptr,#_col
      00006E E0               [24]  505 	movx	a,@dptr
      00006F FE               [12]  506 	mov	r6,a
      000070 A3               [24]  507 	inc	dptr
      000071 E0               [24]  508 	movx	a,@dptr
      000072 FF               [12]  509 	mov	r7,a
      000073 90r00r04         [24]  510 	mov	dptr,#_off
      000076 E0               [24]  511 	movx	a,@dptr
      000077 FC               [12]  512 	mov	r4,a
      000078 A3               [24]  513 	inc	dptr
      000079 E0               [24]  514 	movx	a,@dptr
      00007A FD               [12]  515 	mov	r5,a
      00007B EE               [12]  516 	mov	a,r6
      00007C 2C               [12]  517 	add	a,r4
      00007D FE               [12]  518 	mov	r6,a
      00007E EF               [12]  519 	mov	a,r7
      00007F 3D               [12]  520 	addc	a,r5
      000080 FF               [12]  521 	mov	r7,a
      000081 90r00r01         [24]  522 	mov	dptr,#_base
      000084 E0               [24]  523 	movx	a,@dptr
      000085 FB               [12]  524 	mov	r3,a
      000086 A3               [24]  525 	inc	dptr
      000087 E0               [24]  526 	movx	a,@dptr
      000088 FC               [12]  527 	mov	r4,a
      000089 A3               [24]  528 	inc	dptr
      00008A E0               [24]  529 	movx	a,@dptr
      00008B FD               [12]  530 	mov	r5,a
      00008C EE               [12]  531 	mov	a,r6
      00008D 2B               [12]  532 	add	a,r3
      00008E FE               [12]  533 	mov	r6,a
      00008F EF               [12]  534 	mov	a,r7
      000090 3C               [12]  535 	addc	a,r4
      000091 FF               [12]  536 	mov	r7,a
      000092 8D 02            [24]  537 	mov	ar2,r5
      000094 8E 82            [24]  538 	mov	dpl,r6
      000096 8F 83            [24]  539 	mov	dph,r7
      000098 8A F0            [24]  540 	mov	b,r2
      00009A 12r00r00         [24]  541 	lcall	__gptrget
      00009D F5 82            [12]  542 	mov	dpl,a
      00009F 12r00r00         [24]  543 	lcall	_print8x
                                    544 ;	dump.c:34: if (col == 0x1fu) {
      0000A2 90r00r06         [24]  545 	mov	dptr,#_col
      0000A5 E0               [24]  546 	movx	a,@dptr
      0000A6 FE               [12]  547 	mov	r6,a
      0000A7 A3               [24]  548 	inc	dptr
      0000A8 E0               [24]  549 	movx	a,@dptr
      0000A9 FF               [12]  550 	mov	r7,a
      0000AA BE 1F 11         [24]  551 	cjne	r6,#0x1f,00102$
      0000AD BF 00 0E         [24]  552 	cjne	r7,#0x00,00102$
                                    553 ;	dump.c:35: putchar('\r'); putchar('\n');
      0000B0 90 00 0D         [24]  554 	mov	dptr,#0x000d
      0000B3 12r00r00         [24]  555 	lcall	_putchar
      0000B6 90 00 0A         [24]  556 	mov	dptr,#0x000a
      0000B9 12r00r00         [24]  557 	lcall	_putchar
      0000BC 80 06            [24]  558 	sjmp	00108$
      0000BE                        559 00102$:
                                    560 ;	dump.c:36: } else putchar(' ');
      0000BE 90 00 20         [24]  561 	mov	dptr,#0x0020
      0000C1 12r00r00         [24]  562 	lcall	_putchar
      0000C4                        563 00108$:
                                    564 ;	dump.c:32: for (col = 0u; col < 0x20u; col++) {
      0000C4 90r00r06         [24]  565 	mov	dptr,#_col
      0000C7 E0               [24]  566 	movx	a,@dptr
      0000C8 24 01            [12]  567 	add	a,#0x01
      0000CA F0               [24]  568 	movx	@dptr,a
      0000CB A3               [24]  569 	inc	dptr
      0000CC E0               [24]  570 	movx	a,@dptr
      0000CD 34 00            [12]  571 	addc	a,#0x00
      0000CF F0               [24]  572 	movx	@dptr,a
      0000D0 90r00r06         [24]  573 	mov	dptr,#_col
      0000D3 E0               [24]  574 	movx	a,@dptr
      0000D4 FE               [12]  575 	mov	r6,a
      0000D5 A3               [24]  576 	inc	dptr
      0000D6 E0               [24]  577 	movx	a,@dptr
      0000D7 FF               [12]  578 	mov	r7,a
      0000D8 C3               [12]  579 	clr	c
      0000D9 EE               [12]  580 	mov	a,r6
      0000DA 94 20            [12]  581 	subb	a,#0x20
      0000DC EF               [12]  582 	mov	a,r7
      0000DD 94 00            [12]  583 	subb	a,#0x00
      0000DF 50 03            [24]  584 	jnc	00147$
      0000E1 02r00r6B         [24]  585 	ljmp	00107$
      0000E4                        586 00147$:
                                    587 ;	dump.c:29: for (off = 0u; off < 0x400u; off += 0x20u) {
      0000E4 90r00r04         [24]  588 	mov	dptr,#_off
      0000E7 E0               [24]  589 	movx	a,@dptr
      0000E8 FE               [12]  590 	mov	r6,a
      0000E9 A3               [24]  591 	inc	dptr
      0000EA E0               [24]  592 	movx	a,@dptr
      0000EB FF               [12]  593 	mov	r7,a
      0000EC 90r00r04         [24]  594 	mov	dptr,#_off
      0000EF 74 20            [12]  595 	mov	a,#0x20
      0000F1 2E               [12]  596 	add	a,r6
      0000F2 F0               [24]  597 	movx	@dptr,a
      0000F3 E4               [12]  598 	clr	a
      0000F4 3F               [12]  599 	addc	a,r7
      0000F5 A3               [24]  600 	inc	dptr
      0000F6 F0               [24]  601 	movx	@dptr,a
      0000F7 90r00r04         [24]  602 	mov	dptr,#_off
      0000FA E0               [24]  603 	movx	a,@dptr
      0000FB FE               [12]  604 	mov	r6,a
      0000FC A3               [24]  605 	inc	dptr
      0000FD E0               [24]  606 	movx	a,@dptr
      0000FE FF               [12]  607 	mov	r7,a
      0000FF C3               [12]  608 	clr	c
      000100 94 04            [12]  609 	subb	a,#0x04
      000102 50 03            [24]  610 	jnc	00148$
      000104 02r00r3C         [24]  611 	ljmp	00109$
      000107                        612 00148$:
                                    613 ;	dump.c:39: getchar();
      000107 12r00r00         [24]  614 	lcall	_getchar
                                    615 ;	dump.c:40: putchar('\r'); putchar('\n');
      00010A 90 00 0D         [24]  616 	mov	dptr,#0x000d
      00010D 12r00r00         [24]  617 	lcall	_putchar
      000110 90 00 0A         [24]  618 	mov	dptr,#0x000a
      000113 12r00r00         [24]  619 	lcall	_putchar
                                    620 ;	dump.c:28: for (base = (unsigned char *)0u; !intr; base += 0x400u) {
      000116 90r00r01         [24]  621 	mov	dptr,#_base
      000119 E0               [24]  622 	movx	a,@dptr
      00011A FD               [12]  623 	mov	r5,a
      00011B A3               [24]  624 	inc	dptr
      00011C E0               [24]  625 	movx	a,@dptr
      00011D FE               [12]  626 	mov	r6,a
      00011E A3               [24]  627 	inc	dptr
      00011F E0               [24]  628 	movx	a,@dptr
      000120 FF               [12]  629 	mov	r7,a
      000121 90r00r01         [24]  630 	mov	dptr,#_base
      000124 ED               [12]  631 	mov	a,r5
      000125 F0               [24]  632 	movx	@dptr,a
      000126 74 04            [12]  633 	mov	a,#0x04
      000128 2E               [12]  634 	add	a,r6
      000129 A3               [24]  635 	inc	dptr
      00012A F0               [24]  636 	movx	@dptr,a
      00012B EF               [12]  637 	mov	a,r7
      00012C A3               [24]  638 	inc	dptr
      00012D F0               [24]  639 	movx	@dptr,a
      00012E 02r00r2C         [24]  640 	ljmp	00112$
      000131                        641 00106$:
                                    642 ;	dump.c:43: P1_7 = 1; /* deactivate IO address space from 0xe000 to 0xffff */
                                    643 ;	assignBit
      000131 D2 97            [12]  644 	setb	_P1_7
                                    645 ;	dump.c:48: __endasm;
      000133 00               [12]  646 	nop
      000134 00               [12]  647 	nop
      000135 00               [12]  648 	nop
                                    649 ;	dump.c:50: PCON |= 2;
      000136 43 87 02         [24]  650 	orl	_PCON,#0x02
                                    651 ;	dump.c:52: return;
                                    652 ;	dump.c:53: }
      000139 22               [24]  653 	ret
                                    654 	.area CSEG    (CODE)
                                    655 	.area CONST   (CODE)
                                    656 	.area CONST   (CODE)
      000000                        657 ___str_0:
      000000 20 3A 20               658 	.ascii " : "
      000003 00                     659 	.db 0x00
                                    660 	.area CSEG    (CODE)
                                    661 	.area XINIT   (CODE)
                                    662 	.area CABS    (ABS,CODE)
