                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module dump
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _getchar
                                     14 	.globl _putchar
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _FL
                                     22 	.globl _P
                                     23 	.globl _TF2
                                     24 	.globl _EXF2
                                     25 	.globl _RCLK
                                     26 	.globl _TCLK
                                     27 	.globl _EXEN2
                                     28 	.globl _TR2
                                     29 	.globl _C_T2
                                     30 	.globl _CP_RL2
                                     31 	.globl _T2CON_7
                                     32 	.globl _T2CON_6
                                     33 	.globl _T2CON_5
                                     34 	.globl _T2CON_4
                                     35 	.globl _T2CON_3
                                     36 	.globl _T2CON_2
                                     37 	.globl _T2CON_1
                                     38 	.globl _T2CON_0
                                     39 	.globl _PT2
                                     40 	.globl _PS
                                     41 	.globl _PT1
                                     42 	.globl _PX1
                                     43 	.globl _PT0
                                     44 	.globl _PX0
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _EA
                                     62 	.globl _ET2
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _T2EX
                                     85 	.globl _T2
                                     86 	.globl _P1_7
                                     87 	.globl _P1_6
                                     88 	.globl _P1_5
                                     89 	.globl _P1_4
                                     90 	.globl _P1_3
                                     91 	.globl _P1_2
                                     92 	.globl _P1_1
                                     93 	.globl _P1_0
                                     94 	.globl _TF1
                                     95 	.globl _TR1
                                     96 	.globl _TF0
                                     97 	.globl _TR0
                                     98 	.globl _IE1
                                     99 	.globl _IT1
                                    100 	.globl _IE0
                                    101 	.globl _IT0
                                    102 	.globl _P0_7
                                    103 	.globl _P0_6
                                    104 	.globl _P0_5
                                    105 	.globl _P0_4
                                    106 	.globl _P0_3
                                    107 	.globl _P0_2
                                    108 	.globl _P0_1
                                    109 	.globl _P0_0
                                    110 	.globl _B
                                    111 	.globl _A
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _TH2
                                    115 	.globl _TL2
                                    116 	.globl _RCAP2H
                                    117 	.globl _RCAP2L
                                    118 	.globl _T2MOD
                                    119 	.globl _T2CON
                                    120 	.globl _IP
                                    121 	.globl _P3
                                    122 	.globl _IE
                                    123 	.globl _P2
                                    124 	.globl _SBUF
                                    125 	.globl _SCON
                                    126 	.globl _P1
                                    127 	.globl _TH1
                                    128 	.globl _TH0
                                    129 	.globl _TL1
                                    130 	.globl _TL0
                                    131 	.globl _TMOD
                                    132 	.globl _TCON
                                    133 	.globl _PCON
                                    134 	.globl _DPH
                                    135 	.globl _DPL
                                    136 	.globl _SP
                                    137 	.globl _P0
                                    138 	.globl _col
                                    139 	.globl _off
                                    140 	.globl _base
                                    141 	.globl _intr
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
                                    300 ;--------------------------------------------------------
                                    301 ; absolute internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area IABS    (ABS,DATA)
                                    304 	.area IABS    (ABS,DATA)
                                    305 ;--------------------------------------------------------
                                    306 ; bit data
                                    307 ;--------------------------------------------------------
                                    308 	.area BSEG    (BIT)
                                    309 ;--------------------------------------------------------
                                    310 ; paged external ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area PSEG    (PAG,XDATA)
                                    313 ;--------------------------------------------------------
                                    314 ; external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area XSEG    (XDATA)
      000000                        317 _intr::
      000000                        318 	.ds 1
      000001                        319 _base::
      000001                        320 	.ds 3
      000004                        321 _off::
      000004                        322 	.ds 2
      000006                        323 _col::
      000006                        324 	.ds 2
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
                                    333 	.area HOME    (CODE)
                                    334 	.area GSINIT0 (CODE)
                                    335 	.area GSINIT1 (CODE)
                                    336 	.area GSINIT2 (CODE)
                                    337 	.area GSINIT3 (CODE)
                                    338 	.area GSINIT4 (CODE)
                                    339 	.area GSINIT5 (CODE)
                                    340 	.area GSINIT  (CODE)
                                    341 	.area GSFINAL (CODE)
                                    342 	.area CSEG    (CODE)
                                    343 ;--------------------------------------------------------
                                    344 ; interrupt vector 
                                    345 ;--------------------------------------------------------
                                    346 	.area HOME    (CODE)
      000000                        347 __interrupt_vect:
      000000 02r00r00         [24]  348 	ljmp	__sdcc_gsinit_startup
      000003 02r00r17         [24]  349 	ljmp	_int0
                                    350 ;--------------------------------------------------------
                                    351 ; global & static initialisations
                                    352 ;--------------------------------------------------------
                                    353 	.area HOME    (CODE)
                                    354 	.area GSINIT  (CODE)
                                    355 	.area GSFINAL (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.globl __sdcc_gsinit_startup
                                    358 	.globl __sdcc_program_startup
                                    359 	.globl __start__stack
                                    360 	.globl __mcs51_genXINIT
                                    361 	.globl __mcs51_genXRAMCLEAR
                                    362 	.globl __mcs51_genRAMCLEAR
                                    363 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  364 	ljmp	__sdcc_program_startup
                                    365 ;--------------------------------------------------------
                                    366 ; Home
                                    367 ;--------------------------------------------------------
                                    368 	.area HOME    (CODE)
                                    369 	.area HOME    (CODE)
      000006                        370 __sdcc_program_startup:
      000006 02r00r2A         [24]  371 	ljmp	_main
                                    372 ;	return from main will return to caller
                                    373 ;--------------------------------------------------------
                                    374 ; code
                                    375 ;--------------------------------------------------------
                                    376 	.area CSEG    (CODE)
                                    377 ;------------------------------------------------------------
                                    378 ;Allocation info for local variables in function 'putchar'
                                    379 ;------------------------------------------------------------
                                    380 ;c                         Allocated to registers 
                                    381 ;------------------------------------------------------------
                                    382 ;	dump.c:4: int putchar(int c) __naked {
                                    383 ;	-----------------------------------------
                                    384 ;	 function putchar
                                    385 ;	-----------------------------------------
      000000                        386 _putchar:
                                    387 ;	naked function: no prologue.
                                    388 ;	dump.c:12: __endasm;
      000000 C0 E0            [24]  389 	push	acc
      000002 E5 82            [12]  390 	mov	a, dpl
      000004 12 00 3C         [24]  391 	lcall	0x003c
      000007 D0 E0            [24]  392 	pop	acc
      000009 22               [24]  393 	ret
                                    394 ;	dump.c:13: }
                                    395 ;	naked function: no epilogue.
                                    396 ;------------------------------------------------------------
                                    397 ;Allocation info for local variables in function 'getchar'
                                    398 ;------------------------------------------------------------
                                    399 ;	dump.c:15: int getchar(void) __naked {
                                    400 ;	-----------------------------------------
                                    401 ;	 function getchar
                                    402 ;	-----------------------------------------
      00000A                        403 _getchar:
                                    404 ;	naked function: no prologue.
                                    405 ;	dump.c:23: __endasm;
      00000A C0 E0            [24]  406 	push	acc
      00000C 12 00 36         [24]  407 	lcall	0x0036
      00000F F5 82            [12]  408 	mov	dpl, a
      000011 75 83 00         [24]  409 	mov	dph, #0
      000014 D0 E0            [24]  410 	pop	acc
      000016 22               [24]  411 	ret
                                    412 ;	dump.c:24: }
                                    413 ;	naked function: no epilogue.
                                    414 ;------------------------------------------------------------
                                    415 ;Allocation info for local variables in function 'int0'
                                    416 ;------------------------------------------------------------
                                    417 ;	dump.c:55: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    418 ;	-----------------------------------------
                                    419 ;	 function int0
                                    420 ;	-----------------------------------------
      000017                        421 _int0:
                           00000F   422 	ar7 = 0x0f
                           00000E   423 	ar6 = 0x0e
                           00000D   424 	ar5 = 0x0d
                           00000C   425 	ar4 = 0x0c
                           00000B   426 	ar3 = 0x0b
                           00000A   427 	ar2 = 0x0a
                           000009   428 	ar1 = 0x09
                           000008   429 	ar0 = 0x08
      000017 C0 E0            [24]  430 	push	acc
      000019 C0 82            [24]  431 	push	dpl
      00001B C0 83            [24]  432 	push	dph
                                    433 ;	dump.c:56: intr = 1;
      00001D 90r00r00         [24]  434 	mov	dptr,#_intr
      000020 74 01            [12]  435 	mov	a,#0x01
      000022 F0               [24]  436 	movx	@dptr,a
                                    437 ;	dump.c:57: }
      000023 D0 83            [24]  438 	pop	dph
      000025 D0 82            [24]  439 	pop	dpl
      000027 D0 E0            [24]  440 	pop	acc
      000029 32               [24]  441 	reti
                                    442 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    443 ;	eliminated unneeded push/pop psw
                                    444 ;	eliminated unneeded push/pop b
                                    445 ;------------------------------------------------------------
                                    446 ;Allocation info for local variables in function 'main'
                                    447 ;------------------------------------------------------------
                                    448 ;__3932160001              Allocated to registers r5 r6 
                                    449 ;a                         Allocated to registers r4 r7 
                                    450 ;__3932160003              Allocated to registers 
                                    451 ;s                         Allocated to registers r5 r6 r7 
                                    452 ;__5242880005              Allocated to registers r6 r7 
                                    453 ;a                         Allocated to registers r4 r5 
                                    454 ;------------------------------------------------------------
                                    455 ;	dump.c:62: void main(void) {
                                    456 ;	-----------------------------------------
                                    457 ;	 function main
                                    458 ;	-----------------------------------------
      00002A                        459 _main:
                           000007   460 	ar7 = 0x07
                           000006   461 	ar6 = 0x06
                           000005   462 	ar5 = 0x05
                           000004   463 	ar4 = 0x04
                           000003   464 	ar3 = 0x03
                           000002   465 	ar2 = 0x02
                           000001   466 	ar1 = 0x01
                           000000   467 	ar0 = 0x00
                                    468 ;	dump.c:63: intr = 0;
      00002A 90r00r00         [24]  469 	mov	dptr,#_intr
      00002D E4               [12]  470 	clr	a
      00002E F0               [24]  471 	movx	@dptr,a
                                    472 ;	dump.c:65: IT0 = 1;
                                    473 ;	assignBit
      00002F D2 88            [12]  474 	setb	_IT0
                                    475 ;	dump.c:66: EX0 = 1;	
                                    476 ;	assignBit
      000031 D2 A8            [12]  477 	setb	_EX0
                                    478 ;	dump.c:67: EA = 1;
                                    479 ;	assignBit
      000033 D2 AF            [12]  480 	setb	_EA
                                    481 ;	dump.c:69: P1_7 = 0; /* activate IO address space from 0xe000 to 0xffff */
                                    482 ;	assignBit
      000035 C2 97            [12]  483 	clr	_P1_7
                                    484 ;	dump.c:74: __endasm;
      000037 00               [12]  485 	nop
      000038 00               [12]  486 	nop
      000039 00               [12]  487 	nop
                                    488 ;	dump.c:76: for (base = (unsigned char *)0u; !intr; base += 0x400u) {
      00003A 90r00r01         [24]  489 	mov	dptr,#_base
      00003D E4               [12]  490 	clr	a
      00003E F0               [24]  491 	movx	@dptr,a
      00003F A3               [24]  492 	inc	dptr
      000040 F0               [24]  493 	movx	@dptr,a
      000041 A3               [24]  494 	inc	dptr
      000042 F0               [24]  495 	movx	@dptr,a
      000043                        496 00119$:
      000043 90r00r00         [24]  497 	mov	dptr,#_intr
      000046 E0               [24]  498 	movx	a,@dptr
      000047 60 03            [24]  499 	jz	00160$
      000049 02r02r34         [24]  500 	ljmp	00106$
      00004C                        501 00160$:
                                    502 ;	dump.c:77: for (off = 0u; off < 0x400u; off += 0x20u) {
      00004C 90r00r04         [24]  503 	mov	dptr,#_off
      00004F E4               [12]  504 	clr	a
      000050 F0               [24]  505 	movx	@dptr,a
      000051 A3               [24]  506 	inc	dptr
      000052 F0               [24]  507 	movx	@dptr,a
      000053                        508 00116$:
                                    509 ;	dump.c:78: print16x((unsigned int)base + off);
      000053 90r00r01         [24]  510 	mov	dptr,#_base
      000056 E0               [24]  511 	movx	a,@dptr
      000057 FD               [12]  512 	mov	r5,a
      000058 A3               [24]  513 	inc	dptr
      000059 E0               [24]  514 	movx	a,@dptr
      00005A FE               [12]  515 	mov	r6,a
      00005B A3               [24]  516 	inc	dptr
      00005C E0               [24]  517 	movx	a,@dptr
      00005D 90r00r04         [24]  518 	mov	dptr,#_off
      000060 E0               [24]  519 	movx	a,@dptr
      000061 FC               [12]  520 	mov	r4,a
      000062 A3               [24]  521 	inc	dptr
      000063 E0               [24]  522 	movx	a,@dptr
      000064 FF               [12]  523 	mov	r7,a
      000065 EC               [12]  524 	mov	a,r4
      000066 2D               [12]  525 	add	a,r5
      000067 FD               [12]  526 	mov	r5,a
      000068 EF               [12]  527 	mov	a,r7
      000069 3E               [12]  528 	addc	a,r6
      00006A FE               [12]  529 	mov	r6,a
      00006B 8D 04            [24]  530 	mov	ar4,r5
                                    531 ;	dump.c:39: putchar(digits[(a >> 12) & 0xf]);
      00006D EE               [12]  532 	mov	a,r6
      00006E FF               [12]  533 	mov	r7,a
      00006F C4               [12]  534 	swap	a
      000070 54 0F            [12]  535 	anl	a,#0x0f
      000072 30 E3 02         [24]  536 	jnb	acc.3,00161$
      000075 44 F0            [12]  537 	orl	a,#0xf0
      000077                        538 00161$:
      000077 FD               [12]  539 	mov	r5,a
      000078 33               [12]  540 	rlc	a
      000079 95 E0            [12]  541 	subb	a,acc
      00007B 53 05 0F         [24]  542 	anl	ar5,#0x0f
      00007E 7E 00            [12]  543 	mov	r6,#0x00
      000080 ED               [12]  544 	mov	a,r5
      000081 24r00            [12]  545 	add	a,#_digits
      000083 F5 82            [12]  546 	mov	dpl,a
      000085 EE               [12]  547 	mov	a,r6
      000086 34s00            [12]  548 	addc	a,#(_digits >> 8)
      000088 F5 83            [12]  549 	mov	dph,a
      00008A E4               [12]  550 	clr	a
      00008B 93               [24]  551 	movc	a,@a+dptr
      00008C FE               [12]  552 	mov	r6,a
      00008D 7D 00            [12]  553 	mov	r5,#0x00
      00008F 8E 82            [24]  554 	mov	dpl,r6
      000091 8D 83            [24]  555 	mov	dph,r5
      000093 12r00r00         [24]  556 	lcall	_putchar
                                    557 ;	dump.c:40: putchar(digits[(a >> 8) & 0xf]);
      000096 8F 06            [24]  558 	mov	ar6,r7
      000098 53 06 0F         [24]  559 	anl	ar6,#0x0f
      00009B 7D 00            [12]  560 	mov	r5,#0x00
      00009D EE               [12]  561 	mov	a,r6
      00009E 24r00            [12]  562 	add	a,#_digits
      0000A0 F5 82            [12]  563 	mov	dpl,a
      0000A2 ED               [12]  564 	mov	a,r5
      0000A3 34s00            [12]  565 	addc	a,#(_digits >> 8)
      0000A5 F5 83            [12]  566 	mov	dph,a
      0000A7 E4               [12]  567 	clr	a
      0000A8 93               [24]  568 	movc	a,@a+dptr
      0000A9 FE               [12]  569 	mov	r6,a
      0000AA 7D 00            [12]  570 	mov	r5,#0x00
      0000AC 8E 82            [24]  571 	mov	dpl,r6
      0000AE 8D 83            [24]  572 	mov	dph,r5
      0000B0 12r00r00         [24]  573 	lcall	_putchar
                                    574 ;	dump.c:41: putchar(digits[(a >> 4) & 0xf]);
      0000B3 8C 05            [24]  575 	mov	ar5,r4
      0000B5 EF               [12]  576 	mov	a,r7
      0000B6 C4               [12]  577 	swap	a
      0000B7 CD               [12]  578 	xch	a,r5
      0000B8 C4               [12]  579 	swap	a
      0000B9 54 0F            [12]  580 	anl	a,#0x0f
      0000BB 6D               [12]  581 	xrl	a,r5
      0000BC CD               [12]  582 	xch	a,r5
      0000BD 54 0F            [12]  583 	anl	a,#0x0f
      0000BF CD               [12]  584 	xch	a,r5
      0000C0 6D               [12]  585 	xrl	a,r5
      0000C1 CD               [12]  586 	xch	a,r5
      0000C2 30 E3 02         [24]  587 	jnb	acc.3,00162$
      0000C5 44 F0            [12]  588 	orl	a,#0xf0
      0000C7                        589 00162$:
      0000C7 53 05 0F         [24]  590 	anl	ar5,#0x0f
      0000CA 7E 00            [12]  591 	mov	r6,#0x00
      0000CC ED               [12]  592 	mov	a,r5
      0000CD 24r00            [12]  593 	add	a,#_digits
      0000CF F5 82            [12]  594 	mov	dpl,a
      0000D1 EE               [12]  595 	mov	a,r6
      0000D2 34s00            [12]  596 	addc	a,#(_digits >> 8)
      0000D4 F5 83            [12]  597 	mov	dph,a
      0000D6 E4               [12]  598 	clr	a
      0000D7 93               [24]  599 	movc	a,@a+dptr
      0000D8 FE               [12]  600 	mov	r6,a
      0000D9 7D 00            [12]  601 	mov	r5,#0x00
      0000DB 8E 82            [24]  602 	mov	dpl,r6
      0000DD 8D 83            [24]  603 	mov	dph,r5
      0000DF 12r00r00         [24]  604 	lcall	_putchar
                                    605 ;	dump.c:42: putchar(digits[a & 0xf]);
      0000E2 53 04 0F         [24]  606 	anl	ar4,#0x0f
      0000E5 7F 00            [12]  607 	mov	r7,#0x00
      0000E7 EC               [12]  608 	mov	a,r4
      0000E8 24r00            [12]  609 	add	a,#_digits
      0000EA F5 82            [12]  610 	mov	dpl,a
      0000EC EF               [12]  611 	mov	a,r7
      0000ED 34s00            [12]  612 	addc	a,#(_digits >> 8)
      0000EF F5 83            [12]  613 	mov	dph,a
      0000F1 E4               [12]  614 	clr	a
      0000F2 93               [24]  615 	movc	a,@a+dptr
      0000F3 FF               [12]  616 	mov	r7,a
      0000F4 7E 00            [12]  617 	mov	r6,#0x00
      0000F6 8F 82            [24]  618 	mov	dpl,r7
      0000F8 8E 83            [24]  619 	mov	dph,r6
      0000FA 12r00r00         [24]  620 	lcall	_putchar
                                    621 ;	dump.c:79: printstr(" : ");
      0000FD 7Dr10            [12]  622 	mov	r5,#___str_0
      0000FF 7Es00            [12]  623 	mov	r6,#(___str_0 >> 8)
      000101 7F 80            [12]  624 	mov	r7,#0x80
                                    625 ;	dump.c:50: return;
      000103                        626 00112$:
                                    627 ;	dump.c:48: for (; *s; s++) putchar(*s);
      000103 8D 82            [24]  628 	mov	dpl,r5
      000105 8E 83            [24]  629 	mov	dph,r6
      000107 8F F0            [24]  630 	mov	b,r7
      000109 12r00r00         [24]  631 	lcall	__gptrget
      00010C FC               [12]  632 	mov	r4,a
      00010D 60 10            [24]  633 	jz	00109$
      00010F 7B 00            [12]  634 	mov	r3,#0x00
      000111 8C 82            [24]  635 	mov	dpl,r4
      000113 8B 83            [24]  636 	mov	dph,r3
      000115 12r00r00         [24]  637 	lcall	_putchar
      000118 0D               [12]  638 	inc	r5
                                    639 ;	dump.c:79: printstr(" : ");
      000119 BD 00 E7         [24]  640 	cjne	r5,#0x00,00112$
      00011C 0E               [12]  641 	inc	r6
      00011D 80 E4            [24]  642 	sjmp	00112$
      00011F                        643 00109$:
                                    644 ;	dump.c:80: for (col = 0u; col < 0x20u; col++) {
      00011F 90r00r06         [24]  645 	mov	dptr,#_col
      000122 E4               [12]  646 	clr	a
      000123 F0               [24]  647 	movx	@dptr,a
      000124 A3               [24]  648 	inc	dptr
      000125 F0               [24]  649 	movx	@dptr,a
      000126                        650 00114$:
                                    651 ;	dump.c:81: print8x(base[off + col]);
      000126 90r00r06         [24]  652 	mov	dptr,#_col
      000129 E0               [24]  653 	movx	a,@dptr
      00012A FE               [12]  654 	mov	r6,a
      00012B A3               [24]  655 	inc	dptr
      00012C E0               [24]  656 	movx	a,@dptr
      00012D FF               [12]  657 	mov	r7,a
      00012E 90r00r04         [24]  658 	mov	dptr,#_off
      000131 E0               [24]  659 	movx	a,@dptr
      000132 FC               [12]  660 	mov	r4,a
      000133 A3               [24]  661 	inc	dptr
      000134 E0               [24]  662 	movx	a,@dptr
      000135 FD               [12]  663 	mov	r5,a
      000136 EE               [12]  664 	mov	a,r6
      000137 2C               [12]  665 	add	a,r4
      000138 FE               [12]  666 	mov	r6,a
      000139 EF               [12]  667 	mov	a,r7
      00013A 3D               [12]  668 	addc	a,r5
      00013B FF               [12]  669 	mov	r7,a
      00013C 90r00r01         [24]  670 	mov	dptr,#_base
      00013F E0               [24]  671 	movx	a,@dptr
      000140 FB               [12]  672 	mov	r3,a
      000141 A3               [24]  673 	inc	dptr
      000142 E0               [24]  674 	movx	a,@dptr
      000143 FC               [12]  675 	mov	r4,a
      000144 A3               [24]  676 	inc	dptr
      000145 E0               [24]  677 	movx	a,@dptr
      000146 FD               [12]  678 	mov	r5,a
      000147 EE               [12]  679 	mov	a,r6
      000148 2B               [12]  680 	add	a,r3
      000149 FE               [12]  681 	mov	r6,a
      00014A EF               [12]  682 	mov	a,r7
      00014B 3C               [12]  683 	addc	a,r4
      00014C FF               [12]  684 	mov	r7,a
      00014D 8D 02            [24]  685 	mov	ar2,r5
      00014F 8E 82            [24]  686 	mov	dpl,r6
      000151 8F 83            [24]  687 	mov	dph,r7
      000153 8A F0            [24]  688 	mov	b,r2
      000155 12r00r00         [24]  689 	lcall	__gptrget
      000158 FE               [12]  690 	mov	r6,a
      000159 7F 00            [12]  691 	mov	r7,#0x00
      00015B 8E 04            [24]  692 	mov	ar4,r6
                                    693 ;	dump.c:32: putchar(digits[(a >> 4) & 0xf]);
      00015D EF               [12]  694 	mov	a,r7
      00015E C4               [12]  695 	swap	a
      00015F CE               [12]  696 	xch	a,r6
      000160 C4               [12]  697 	swap	a
      000161 54 0F            [12]  698 	anl	a,#0x0f
      000163 6E               [12]  699 	xrl	a,r6
      000164 CE               [12]  700 	xch	a,r6
      000165 54 0F            [12]  701 	anl	a,#0x0f
      000167 CE               [12]  702 	xch	a,r6
      000168 6E               [12]  703 	xrl	a,r6
      000169 CE               [12]  704 	xch	a,r6
      00016A 30 E3 02         [24]  705 	jnb	acc.3,00165$
      00016D 44 F0            [12]  706 	orl	a,#0xf0
      00016F                        707 00165$:
      00016F 53 06 0F         [24]  708 	anl	ar6,#0x0f
      000172 7F 00            [12]  709 	mov	r7,#0x00
      000174 EE               [12]  710 	mov	a,r6
      000175 24r00            [12]  711 	add	a,#_digits
      000177 F5 82            [12]  712 	mov	dpl,a
      000179 EF               [12]  713 	mov	a,r7
      00017A 34s00            [12]  714 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  715 	mov	dph,a
      00017E E4               [12]  716 	clr	a
      00017F 93               [24]  717 	movc	a,@a+dptr
      000180 FF               [12]  718 	mov	r7,a
      000181 7E 00            [12]  719 	mov	r6,#0x00
      000183 8F 82            [24]  720 	mov	dpl,r7
      000185 8E 83            [24]  721 	mov	dph,r6
      000187 12r00r00         [24]  722 	lcall	_putchar
                                    723 ;	dump.c:33: putchar(digits[a & 0xf]);
      00018A 53 04 0F         [24]  724 	anl	ar4,#0x0f
      00018D 7D 00            [12]  725 	mov	r5,#0x00
      00018F EC               [12]  726 	mov	a,r4
      000190 24r00            [12]  727 	add	a,#_digits
      000192 F5 82            [12]  728 	mov	dpl,a
      000194 ED               [12]  729 	mov	a,r5
      000195 34s00            [12]  730 	addc	a,#(_digits >> 8)
      000197 F5 83            [12]  731 	mov	dph,a
      000199 E4               [12]  732 	clr	a
      00019A 93               [24]  733 	movc	a,@a+dptr
      00019B FF               [12]  734 	mov	r7,a
      00019C 7E 00            [12]  735 	mov	r6,#0x00
      00019E 8F 82            [24]  736 	mov	dpl,r7
      0001A0 8E 83            [24]  737 	mov	dph,r6
      0001A2 12r00r00         [24]  738 	lcall	_putchar
                                    739 ;	dump.c:82: if (col == 0x1fu) {
      0001A5 90r00r06         [24]  740 	mov	dptr,#_col
      0001A8 E0               [24]  741 	movx	a,@dptr
      0001A9 FE               [12]  742 	mov	r6,a
      0001AA A3               [24]  743 	inc	dptr
      0001AB E0               [24]  744 	movx	a,@dptr
      0001AC FF               [12]  745 	mov	r7,a
      0001AD BE 1F 11         [24]  746 	cjne	r6,#0x1f,00102$
      0001B0 BF 00 0E         [24]  747 	cjne	r7,#0x00,00102$
                                    748 ;	dump.c:83: putchar('\r'); putchar('\n');
      0001B3 90 00 0D         [24]  749 	mov	dptr,#0x000d
      0001B6 12r00r00         [24]  750 	lcall	_putchar
      0001B9 90 00 0A         [24]  751 	mov	dptr,#0x000a
      0001BC 12r00r00         [24]  752 	lcall	_putchar
      0001BF 80 06            [24]  753 	sjmp	00115$
      0001C1                        754 00102$:
                                    755 ;	dump.c:84: } else putchar(' ');
      0001C1 90 00 20         [24]  756 	mov	dptr,#0x0020
      0001C4 12r00r00         [24]  757 	lcall	_putchar
      0001C7                        758 00115$:
                                    759 ;	dump.c:80: for (col = 0u; col < 0x20u; col++) {
      0001C7 90r00r06         [24]  760 	mov	dptr,#_col
      0001CA E0               [24]  761 	movx	a,@dptr
      0001CB 24 01            [12]  762 	add	a,#0x01
      0001CD F0               [24]  763 	movx	@dptr,a
      0001CE A3               [24]  764 	inc	dptr
      0001CF E0               [24]  765 	movx	a,@dptr
      0001D0 34 00            [12]  766 	addc	a,#0x00
      0001D2 F0               [24]  767 	movx	@dptr,a
      0001D3 90r00r06         [24]  768 	mov	dptr,#_col
      0001D6 E0               [24]  769 	movx	a,@dptr
      0001D7 FE               [12]  770 	mov	r6,a
      0001D8 A3               [24]  771 	inc	dptr
      0001D9 E0               [24]  772 	movx	a,@dptr
      0001DA FF               [12]  773 	mov	r7,a
      0001DB C3               [12]  774 	clr	c
      0001DC EE               [12]  775 	mov	a,r6
      0001DD 94 20            [12]  776 	subb	a,#0x20
      0001DF EF               [12]  777 	mov	a,r7
      0001E0 94 00            [12]  778 	subb	a,#0x00
      0001E2 50 03            [24]  779 	jnc	00168$
      0001E4 02r01r26         [24]  780 	ljmp	00114$
      0001E7                        781 00168$:
                                    782 ;	dump.c:77: for (off = 0u; off < 0x400u; off += 0x20u) {
      0001E7 90r00r04         [24]  783 	mov	dptr,#_off
      0001EA E0               [24]  784 	movx	a,@dptr
      0001EB FE               [12]  785 	mov	r6,a
      0001EC A3               [24]  786 	inc	dptr
      0001ED E0               [24]  787 	movx	a,@dptr
      0001EE FF               [12]  788 	mov	r7,a
      0001EF 90r00r04         [24]  789 	mov	dptr,#_off
      0001F2 74 20            [12]  790 	mov	a,#0x20
      0001F4 2E               [12]  791 	add	a,r6
      0001F5 F0               [24]  792 	movx	@dptr,a
      0001F6 E4               [12]  793 	clr	a
      0001F7 3F               [12]  794 	addc	a,r7
      0001F8 A3               [24]  795 	inc	dptr
      0001F9 F0               [24]  796 	movx	@dptr,a
      0001FA 90r00r04         [24]  797 	mov	dptr,#_off
      0001FD E0               [24]  798 	movx	a,@dptr
      0001FE FE               [12]  799 	mov	r6,a
      0001FF A3               [24]  800 	inc	dptr
      000200 E0               [24]  801 	movx	a,@dptr
      000201 FF               [12]  802 	mov	r7,a
      000202 C3               [12]  803 	clr	c
      000203 94 04            [12]  804 	subb	a,#0x04
      000205 50 03            [24]  805 	jnc	00169$
      000207 02r00r53         [24]  806 	ljmp	00116$
      00020A                        807 00169$:
                                    808 ;	dump.c:87: getchar();
      00020A 12r00r0A         [24]  809 	lcall	_getchar
                                    810 ;	dump.c:88: putchar('\r'); putchar('\n');
      00020D 90 00 0D         [24]  811 	mov	dptr,#0x000d
      000210 12r00r00         [24]  812 	lcall	_putchar
      000213 90 00 0A         [24]  813 	mov	dptr,#0x000a
      000216 12r00r00         [24]  814 	lcall	_putchar
                                    815 ;	dump.c:76: for (base = (unsigned char *)0u; !intr; base += 0x400u) {
      000219 90r00r01         [24]  816 	mov	dptr,#_base
      00021C E0               [24]  817 	movx	a,@dptr
      00021D FD               [12]  818 	mov	r5,a
      00021E A3               [24]  819 	inc	dptr
      00021F E0               [24]  820 	movx	a,@dptr
      000220 FE               [12]  821 	mov	r6,a
      000221 A3               [24]  822 	inc	dptr
      000222 E0               [24]  823 	movx	a,@dptr
      000223 FF               [12]  824 	mov	r7,a
      000224 90r00r01         [24]  825 	mov	dptr,#_base
      000227 ED               [12]  826 	mov	a,r5
      000228 F0               [24]  827 	movx	@dptr,a
      000229 74 04            [12]  828 	mov	a,#0x04
      00022B 2E               [12]  829 	add	a,r6
      00022C A3               [24]  830 	inc	dptr
      00022D F0               [24]  831 	movx	@dptr,a
      00022E EF               [12]  832 	mov	a,r7
      00022F A3               [24]  833 	inc	dptr
      000230 F0               [24]  834 	movx	@dptr,a
      000231 02r00r43         [24]  835 	ljmp	00119$
      000234                        836 00106$:
                                    837 ;	dump.c:91: P1_7 = 1; /* deactivate IO address space from 0xe000 to 0xffff */
                                    838 ;	assignBit
      000234 D2 97            [12]  839 	setb	_P1_7
                                    840 ;	dump.c:96: __endasm;
      000236 00               [12]  841 	nop
      000237 00               [12]  842 	nop
      000238 00               [12]  843 	nop
                                    844 ;	dump.c:98: PCON |= 2;
      000239 43 87 02         [24]  845 	orl	_PCON,#0x02
                                    846 ;	dump.c:100: return;
                                    847 ;	dump.c:101: }
      00023C 22               [24]  848 	ret
                                    849 	.area CSEG    (CODE)
                                    850 	.area CONST   (CODE)
      000000                        851 _digits:
      000000 30                     852 	.db #0x30	; 48	'0'
      000001 31                     853 	.db #0x31	; 49	'1'
      000002 32                     854 	.db #0x32	; 50	'2'
      000003 33                     855 	.db #0x33	; 51	'3'
      000004 34                     856 	.db #0x34	; 52	'4'
      000005 35                     857 	.db #0x35	; 53	'5'
      000006 36                     858 	.db #0x36	; 54	'6'
      000007 37                     859 	.db #0x37	; 55	'7'
      000008 38                     860 	.db #0x38	; 56	'8'
      000009 39                     861 	.db #0x39	; 57	'9'
      00000A 61                     862 	.db #0x61	; 97	'a'
      00000B 62                     863 	.db #0x62	; 98	'b'
      00000C 63                     864 	.db #0x63	; 99	'c'
      00000D 64                     865 	.db #0x64	; 100	'd'
      00000E 65                     866 	.db #0x65	; 101	'e'
      00000F 66                     867 	.db #0x66	; 102	'f'
                                    868 	.area CONST   (CODE)
      000010                        869 ___str_0:
      000010 20 3A 20               870 	.ascii " : "
      000013 00                     871 	.db 0x00
                                    872 	.area CSEG    (CODE)
                                    873 	.area XINIT   (CODE)
                                    874 	.area CABS    (ABS,CODE)
