                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module dump
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _getchar
                                     14 	.globl _putchar
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _FL
                                     22 	.globl _P
                                     23 	.globl _TF2
                                     24 	.globl _EXF2
                                     25 	.globl _RCLK
                                     26 	.globl _TCLK
                                     27 	.globl _EXEN2
                                     28 	.globl _TR2
                                     29 	.globl _C_T2
                                     30 	.globl _CP_RL2
                                     31 	.globl _T2CON_7
                                     32 	.globl _T2CON_6
                                     33 	.globl _T2CON_5
                                     34 	.globl _T2CON_4
                                     35 	.globl _T2CON_3
                                     36 	.globl _T2CON_2
                                     37 	.globl _T2CON_1
                                     38 	.globl _T2CON_0
                                     39 	.globl _PT2
                                     40 	.globl _PS
                                     41 	.globl _PT1
                                     42 	.globl _PX1
                                     43 	.globl _PT0
                                     44 	.globl _PX0
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _EA
                                     62 	.globl _ET2
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _T2EX
                                     85 	.globl _T2
                                     86 	.globl _P1_7
                                     87 	.globl _P1_6
                                     88 	.globl _P1_5
                                     89 	.globl _P1_4
                                     90 	.globl _P1_3
                                     91 	.globl _P1_2
                                     92 	.globl _P1_1
                                     93 	.globl _P1_0
                                     94 	.globl _TF1
                                     95 	.globl _TR1
                                     96 	.globl _TF0
                                     97 	.globl _TR0
                                     98 	.globl _IE1
                                     99 	.globl _IT1
                                    100 	.globl _IE0
                                    101 	.globl _IT0
                                    102 	.globl _P0_7
                                    103 	.globl _P0_6
                                    104 	.globl _P0_5
                                    105 	.globl _P0_4
                                    106 	.globl _P0_3
                                    107 	.globl _P0_2
                                    108 	.globl _P0_1
                                    109 	.globl _P0_0
                                    110 	.globl _B
                                    111 	.globl _A
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _TH2
                                    115 	.globl _TL2
                                    116 	.globl _RCAP2H
                                    117 	.globl _RCAP2L
                                    118 	.globl _T2MOD
                                    119 	.globl _T2CON
                                    120 	.globl _IP
                                    121 	.globl _P3
                                    122 	.globl _IE
                                    123 	.globl _P2
                                    124 	.globl _SBUF
                                    125 	.globl _SCON
                                    126 	.globl _P1
                                    127 	.globl _TH1
                                    128 	.globl _TH0
                                    129 	.globl _TL1
                                    130 	.globl _TL0
                                    131 	.globl _TMOD
                                    132 	.globl _TCON
                                    133 	.globl _PCON
                                    134 	.globl _DPH
                                    135 	.globl _DPL
                                    136 	.globl _SP
                                    137 	.globl _P0
                                    138 	.globl _col
                                    139 	.globl _off
                                    140 	.globl _base
                                    141 	.globl _intr
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
                                    300 ;--------------------------------------------------------
                                    301 ; absolute internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area IABS    (ABS,DATA)
                                    304 	.area IABS    (ABS,DATA)
                                    305 ;--------------------------------------------------------
                                    306 ; bit data
                                    307 ;--------------------------------------------------------
                                    308 	.area BSEG    (BIT)
                                    309 ;--------------------------------------------------------
                                    310 ; paged external ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area PSEG    (PAG,XDATA)
                                    313 ;--------------------------------------------------------
                                    314 ; external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area XSEG    (XDATA)
      000000                        317 _intr::
      000000                        318 	.ds 1
      000001                        319 _base::
      000001                        320 	.ds 3
      000004                        321 _off::
      000004                        322 	.ds 2
      000006                        323 _col::
      000006                        324 	.ds 2
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
                                    333 	.area HOME    (CODE)
                                    334 	.area GSINIT0 (CODE)
                                    335 	.area GSINIT1 (CODE)
                                    336 	.area GSINIT2 (CODE)
                                    337 	.area GSINIT3 (CODE)
                                    338 	.area GSINIT4 (CODE)
                                    339 	.area GSINIT5 (CODE)
                                    340 	.area GSINIT  (CODE)
                                    341 	.area GSFINAL (CODE)
                                    342 	.area CSEG    (CODE)
                                    343 ;--------------------------------------------------------
                                    344 ; interrupt vector 
                                    345 ;--------------------------------------------------------
                                    346 	.area HOME    (CODE)
      000000                        347 __interrupt_vect:
      000000 02r00r00         [24]  348 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  349 	ljmp	_int0
                                    350 ;--------------------------------------------------------
                                    351 ; global & static initialisations
                                    352 ;--------------------------------------------------------
                                    353 	.area HOME    (CODE)
                                    354 	.area GSINIT  (CODE)
                                    355 	.area GSFINAL (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.globl __sdcc_gsinit_startup
                                    358 	.globl __sdcc_program_startup
                                    359 	.globl __start__stack
                                    360 	.globl __mcs51_genXINIT
                                    361 	.globl __mcs51_genXRAMCLEAR
                                    362 	.globl __mcs51_genRAMCLEAR
                                    363 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  364 	ljmp	__sdcc_program_startup
                                    365 ;--------------------------------------------------------
                                    366 ; Home
                                    367 ;--------------------------------------------------------
                                    368 	.area HOME    (CODE)
                                    369 	.area HOME    (CODE)
      000006                        370 __sdcc_program_startup:
      000006 02r00r21         [24]  371 	ljmp	_main
                                    372 ;	return from main will return to caller
                                    373 ;--------------------------------------------------------
                                    374 ; code
                                    375 ;--------------------------------------------------------
                                    376 	.area CSEG    (CODE)
                                    377 ;------------------------------------------------------------
                                    378 ;Allocation info for local variables in function 'putchar'
                                    379 ;------------------------------------------------------------
                                    380 ;c                         Allocated to registers 
                                    381 ;------------------------------------------------------------
                                    382 ;	dump.c:6: int putchar(int c) __naked {
                                    383 ;	-----------------------------------------
                                    384 ;	 function putchar
                                    385 ;	-----------------------------------------
      000000                        386 _putchar:
                                    387 ;	naked function: no prologue.
                                    388 ;	dump.c:11: __endasm;
      000000 E5 82            [12]  389 	mov	a, dpl
      000002 02 00 30         [24]  390 	ljmp	0x0030
                                    391 ;	dump.c:12: }
                                    392 ;	naked function: no epilogue.
                                    393 ;------------------------------------------------------------
                                    394 ;Allocation info for local variables in function 'getchar'
                                    395 ;------------------------------------------------------------
                                    396 ;	dump.c:14: int getchar(void) __naked {
                                    397 ;	-----------------------------------------
                                    398 ;	 function getchar
                                    399 ;	-----------------------------------------
      000005                        400 _getchar:
                                    401 ;	naked function: no prologue.
                                    402 ;	dump.c:20: __endasm;
      000005 12 00 32         [24]  403 	lcall	0x0032
      000008 F5 82            [12]  404 	mov	dpl, a
      00000A 75 83 00         [24]  405 	mov	dph, #0
      00000D 22               [24]  406 	ret
                                    407 ;	dump.c:21: }
                                    408 ;	naked function: no epilogue.
                                    409 ;------------------------------------------------------------
                                    410 ;Allocation info for local variables in function 'int0'
                                    411 ;------------------------------------------------------------
                                    412 ;	dump.c:52: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    413 ;	-----------------------------------------
                                    414 ;	 function int0
                                    415 ;	-----------------------------------------
      00000E                        416 _int0:
                           00000F   417 	ar7 = 0x0f
                           00000E   418 	ar6 = 0x0e
                           00000D   419 	ar5 = 0x0d
                           00000C   420 	ar4 = 0x0c
                           00000B   421 	ar3 = 0x0b
                           00000A   422 	ar2 = 0x0a
                           000009   423 	ar1 = 0x09
                           000008   424 	ar0 = 0x08
      00000E C0 E0            [24]  425 	push	acc
      000010 C0 82            [24]  426 	push	dpl
      000012 C0 83            [24]  427 	push	dph
                                    428 ;	dump.c:53: intr = 1;
      000014 90r00r00         [24]  429 	mov	dptr,#_intr
      000017 74 01            [12]  430 	mov	a,#0x01
      000019 F0               [24]  431 	movx	@dptr,a
                                    432 ;	dump.c:54: }
      00001A D0 83            [24]  433 	pop	dph
      00001C D0 82            [24]  434 	pop	dpl
      00001E D0 E0            [24]  435 	pop	acc
      000020 32               [24]  436 	reti
                                    437 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    438 ;	eliminated unneeded push/pop psw
                                    439 ;	eliminated unneeded push/pop b
                                    440 ;------------------------------------------------------------
                                    441 ;Allocation info for local variables in function 'main'
                                    442 ;------------------------------------------------------------
                                    443 ;__3932160001              Allocated to registers r5 r6 
                                    444 ;a                         Allocated to registers r4 r7 
                                    445 ;__3932160003              Allocated to registers 
                                    446 ;s                         Allocated to registers r5 r6 r7 
                                    447 ;__5242880005              Allocated to registers r6 r7 
                                    448 ;a                         Allocated to registers r4 r5 
                                    449 ;------------------------------------------------------------
                                    450 ;	dump.c:59: void main(void) {
                                    451 ;	-----------------------------------------
                                    452 ;	 function main
                                    453 ;	-----------------------------------------
      000021                        454 _main:
                           000007   455 	ar7 = 0x07
                           000006   456 	ar6 = 0x06
                           000005   457 	ar5 = 0x05
                           000004   458 	ar4 = 0x04
                           000003   459 	ar3 = 0x03
                           000002   460 	ar2 = 0x02
                           000001   461 	ar1 = 0x01
                           000000   462 	ar0 = 0x00
                                    463 ;	dump.c:60: intr = 0;
      000021 90r00r00         [24]  464 	mov	dptr,#_intr
      000024 E4               [12]  465 	clr	a
      000025 F0               [24]  466 	movx	@dptr,a
                                    467 ;	dump.c:62: IT0 = 1;
                                    468 ;	assignBit
      000026 D2 88            [12]  469 	setb	_IT0
                                    470 ;	dump.c:63: EX0 = 1;	
                                    471 ;	assignBit
      000028 D2 A8            [12]  472 	setb	_EX0
                                    473 ;	dump.c:64: EA = 1;
                                    474 ;	assignBit
      00002A D2 AF            [12]  475 	setb	_EA
                                    476 ;	dump.c:66: P1_7 = 0; /* activate IO address space from 0xe000 to 0xffff */
                                    477 ;	assignBit
      00002C C2 97            [12]  478 	clr	_P1_7
                                    479 ;	dump.c:71: __endasm;
      00002E 00               [12]  480 	nop
      00002F 00               [12]  481 	nop
      000030 00               [12]  482 	nop
                                    483 ;	dump.c:73: for (base = (unsigned char *)0u; !intr; base += 0x400u) {
      000031 90r00r01         [24]  484 	mov	dptr,#_base
      000034 E4               [12]  485 	clr	a
      000035 F0               [24]  486 	movx	@dptr,a
      000036 A3               [24]  487 	inc	dptr
      000037 F0               [24]  488 	movx	@dptr,a
      000038 A3               [24]  489 	inc	dptr
      000039 F0               [24]  490 	movx	@dptr,a
      00003A                        491 00119$:
      00003A 90r00r00         [24]  492 	mov	dptr,#_intr
      00003D E0               [24]  493 	movx	a,@dptr
      00003E 60 03            [24]  494 	jz	00160$
      000040 02r02r2B         [24]  495 	ljmp	00106$
      000043                        496 00160$:
                                    497 ;	dump.c:74: for (off = 0u; off < 0x400u; off += 0x20u) {
      000043 90r00r04         [24]  498 	mov	dptr,#_off
      000046 E4               [12]  499 	clr	a
      000047 F0               [24]  500 	movx	@dptr,a
      000048 A3               [24]  501 	inc	dptr
      000049 F0               [24]  502 	movx	@dptr,a
      00004A                        503 00116$:
                                    504 ;	dump.c:75: print16x((unsigned int)base + off);
      00004A 90r00r01         [24]  505 	mov	dptr,#_base
      00004D E0               [24]  506 	movx	a,@dptr
      00004E FD               [12]  507 	mov	r5,a
      00004F A3               [24]  508 	inc	dptr
      000050 E0               [24]  509 	movx	a,@dptr
      000051 FE               [12]  510 	mov	r6,a
      000052 A3               [24]  511 	inc	dptr
      000053 E0               [24]  512 	movx	a,@dptr
      000054 90r00r04         [24]  513 	mov	dptr,#_off
      000057 E0               [24]  514 	movx	a,@dptr
      000058 FC               [12]  515 	mov	r4,a
      000059 A3               [24]  516 	inc	dptr
      00005A E0               [24]  517 	movx	a,@dptr
      00005B FF               [12]  518 	mov	r7,a
      00005C EC               [12]  519 	mov	a,r4
      00005D 2D               [12]  520 	add	a,r5
      00005E FD               [12]  521 	mov	r5,a
      00005F EF               [12]  522 	mov	a,r7
      000060 3E               [12]  523 	addc	a,r6
      000061 FE               [12]  524 	mov	r6,a
      000062 8D 04            [24]  525 	mov	ar4,r5
                                    526 ;	dump.c:36: putchar(digits[(a >> 12) & 0xf]);
      000064 EE               [12]  527 	mov	a,r6
      000065 FF               [12]  528 	mov	r7,a
      000066 C4               [12]  529 	swap	a
      000067 54 0F            [12]  530 	anl	a,#0x0f
      000069 30 E3 02         [24]  531 	jnb	acc.3,00161$
      00006C 44 F0            [12]  532 	orl	a,#0xf0
      00006E                        533 00161$:
      00006E FD               [12]  534 	mov	r5,a
      00006F 33               [12]  535 	rlc	a
      000070 95 E0            [12]  536 	subb	a,acc
      000072 53 05 0F         [24]  537 	anl	ar5,#0x0f
      000075 7E 00            [12]  538 	mov	r6,#0x00
      000077 ED               [12]  539 	mov	a,r5
      000078 24r00            [12]  540 	add	a,#_digits
      00007A F5 82            [12]  541 	mov	dpl,a
      00007C EE               [12]  542 	mov	a,r6
      00007D 34s00            [12]  543 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  544 	mov	dph,a
      000081 E4               [12]  545 	clr	a
      000082 93               [24]  546 	movc	a,@a+dptr
      000083 FE               [12]  547 	mov	r6,a
      000084 7D 00            [12]  548 	mov	r5,#0x00
      000086 8E 82            [24]  549 	mov	dpl,r6
      000088 8D 83            [24]  550 	mov	dph,r5
      00008A 12r00r00         [24]  551 	lcall	_putchar
                                    552 ;	dump.c:37: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 06            [24]  553 	mov	ar6,r7
      00008F 53 06 0F         [24]  554 	anl	ar6,#0x0f
      000092 7D 00            [12]  555 	mov	r5,#0x00
      000094 EE               [12]  556 	mov	a,r6
      000095 24r00            [12]  557 	add	a,#_digits
      000097 F5 82            [12]  558 	mov	dpl,a
      000099 ED               [12]  559 	mov	a,r5
      00009A 34s00            [12]  560 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  561 	mov	dph,a
      00009E E4               [12]  562 	clr	a
      00009F 93               [24]  563 	movc	a,@a+dptr
      0000A0 FE               [12]  564 	mov	r6,a
      0000A1 7D 00            [12]  565 	mov	r5,#0x00
      0000A3 8E 82            [24]  566 	mov	dpl,r6
      0000A5 8D 83            [24]  567 	mov	dph,r5
      0000A7 12r00r00         [24]  568 	lcall	_putchar
                                    569 ;	dump.c:38: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8C 05            [24]  570 	mov	ar5,r4
      0000AC EF               [12]  571 	mov	a,r7
      0000AD C4               [12]  572 	swap	a
      0000AE CD               [12]  573 	xch	a,r5
      0000AF C4               [12]  574 	swap	a
      0000B0 54 0F            [12]  575 	anl	a,#0x0f
      0000B2 6D               [12]  576 	xrl	a,r5
      0000B3 CD               [12]  577 	xch	a,r5
      0000B4 54 0F            [12]  578 	anl	a,#0x0f
      0000B6 CD               [12]  579 	xch	a,r5
      0000B7 6D               [12]  580 	xrl	a,r5
      0000B8 CD               [12]  581 	xch	a,r5
      0000B9 30 E3 02         [24]  582 	jnb	acc.3,00162$
      0000BC 44 F0            [12]  583 	orl	a,#0xf0
      0000BE                        584 00162$:
      0000BE 53 05 0F         [24]  585 	anl	ar5,#0x0f
      0000C1 7E 00            [12]  586 	mov	r6,#0x00
      0000C3 ED               [12]  587 	mov	a,r5
      0000C4 24r00            [12]  588 	add	a,#_digits
      0000C6 F5 82            [12]  589 	mov	dpl,a
      0000C8 EE               [12]  590 	mov	a,r6
      0000C9 34s00            [12]  591 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  592 	mov	dph,a
      0000CD E4               [12]  593 	clr	a
      0000CE 93               [24]  594 	movc	a,@a+dptr
      0000CF FE               [12]  595 	mov	r6,a
      0000D0 7D 00            [12]  596 	mov	r5,#0x00
      0000D2 8E 82            [24]  597 	mov	dpl,r6
      0000D4 8D 83            [24]  598 	mov	dph,r5
      0000D6 12r00r00         [24]  599 	lcall	_putchar
                                    600 ;	dump.c:39: putchar(digits[a & 0xf]);
      0000D9 53 04 0F         [24]  601 	anl	ar4,#0x0f
      0000DC 7F 00            [12]  602 	mov	r7,#0x00
      0000DE EC               [12]  603 	mov	a,r4
      0000DF 24r00            [12]  604 	add	a,#_digits
      0000E1 F5 82            [12]  605 	mov	dpl,a
      0000E3 EF               [12]  606 	mov	a,r7
      0000E4 34s00            [12]  607 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  608 	mov	dph,a
      0000E8 E4               [12]  609 	clr	a
      0000E9 93               [24]  610 	movc	a,@a+dptr
      0000EA FF               [12]  611 	mov	r7,a
      0000EB 7E 00            [12]  612 	mov	r6,#0x00
      0000ED 8F 82            [24]  613 	mov	dpl,r7
      0000EF 8E 83            [24]  614 	mov	dph,r6
      0000F1 12r00r00         [24]  615 	lcall	_putchar
                                    616 ;	dump.c:76: printstr(" : ");
      0000F4 7Dr10            [12]  617 	mov	r5,#___str_0
      0000F6 7Es00            [12]  618 	mov	r6,#(___str_0 >> 8)
      0000F8 7F 80            [12]  619 	mov	r7,#0x80
                                    620 ;	dump.c:47: return;
      0000FA                        621 00112$:
                                    622 ;	dump.c:45: for (; *s; s++) putchar(*s);
      0000FA 8D 82            [24]  623 	mov	dpl,r5
      0000FC 8E 83            [24]  624 	mov	dph,r6
      0000FE 8F F0            [24]  625 	mov	b,r7
      000100 12r00r00         [24]  626 	lcall	__gptrget
      000103 FC               [12]  627 	mov	r4,a
      000104 60 10            [24]  628 	jz	00109$
      000106 7B 00            [12]  629 	mov	r3,#0x00
      000108 8C 82            [24]  630 	mov	dpl,r4
      00010A 8B 83            [24]  631 	mov	dph,r3
      00010C 12r00r00         [24]  632 	lcall	_putchar
      00010F 0D               [12]  633 	inc	r5
                                    634 ;	dump.c:76: printstr(" : ");
      000110 BD 00 E7         [24]  635 	cjne	r5,#0x00,00112$
      000113 0E               [12]  636 	inc	r6
      000114 80 E4            [24]  637 	sjmp	00112$
      000116                        638 00109$:
                                    639 ;	dump.c:77: for (col = 0u; col < 0x20u; col++) {
      000116 90r00r06         [24]  640 	mov	dptr,#_col
      000119 E4               [12]  641 	clr	a
      00011A F0               [24]  642 	movx	@dptr,a
      00011B A3               [24]  643 	inc	dptr
      00011C F0               [24]  644 	movx	@dptr,a
      00011D                        645 00114$:
                                    646 ;	dump.c:78: print8x(base[off + col]);
      00011D 90r00r06         [24]  647 	mov	dptr,#_col
      000120 E0               [24]  648 	movx	a,@dptr
      000121 FE               [12]  649 	mov	r6,a
      000122 A3               [24]  650 	inc	dptr
      000123 E0               [24]  651 	movx	a,@dptr
      000124 FF               [12]  652 	mov	r7,a
      000125 90r00r04         [24]  653 	mov	dptr,#_off
      000128 E0               [24]  654 	movx	a,@dptr
      000129 FC               [12]  655 	mov	r4,a
      00012A A3               [24]  656 	inc	dptr
      00012B E0               [24]  657 	movx	a,@dptr
      00012C FD               [12]  658 	mov	r5,a
      00012D EE               [12]  659 	mov	a,r6
      00012E 2C               [12]  660 	add	a,r4
      00012F FE               [12]  661 	mov	r6,a
      000130 EF               [12]  662 	mov	a,r7
      000131 3D               [12]  663 	addc	a,r5
      000132 FF               [12]  664 	mov	r7,a
      000133 90r00r01         [24]  665 	mov	dptr,#_base
      000136 E0               [24]  666 	movx	a,@dptr
      000137 FB               [12]  667 	mov	r3,a
      000138 A3               [24]  668 	inc	dptr
      000139 E0               [24]  669 	movx	a,@dptr
      00013A FC               [12]  670 	mov	r4,a
      00013B A3               [24]  671 	inc	dptr
      00013C E0               [24]  672 	movx	a,@dptr
      00013D FD               [12]  673 	mov	r5,a
      00013E EE               [12]  674 	mov	a,r6
      00013F 2B               [12]  675 	add	a,r3
      000140 FE               [12]  676 	mov	r6,a
      000141 EF               [12]  677 	mov	a,r7
      000142 3C               [12]  678 	addc	a,r4
      000143 FF               [12]  679 	mov	r7,a
      000144 8D 02            [24]  680 	mov	ar2,r5
      000146 8E 82            [24]  681 	mov	dpl,r6
      000148 8F 83            [24]  682 	mov	dph,r7
      00014A 8A F0            [24]  683 	mov	b,r2
      00014C 12r00r00         [24]  684 	lcall	__gptrget
      00014F FE               [12]  685 	mov	r6,a
      000150 7F 00            [12]  686 	mov	r7,#0x00
      000152 8E 04            [24]  687 	mov	ar4,r6
                                    688 ;	dump.c:29: putchar(digits[(a >> 4) & 0xf]);
      000154 EF               [12]  689 	mov	a,r7
      000155 C4               [12]  690 	swap	a
      000156 CE               [12]  691 	xch	a,r6
      000157 C4               [12]  692 	swap	a
      000158 54 0F            [12]  693 	anl	a,#0x0f
      00015A 6E               [12]  694 	xrl	a,r6
      00015B CE               [12]  695 	xch	a,r6
      00015C 54 0F            [12]  696 	anl	a,#0x0f
      00015E CE               [12]  697 	xch	a,r6
      00015F 6E               [12]  698 	xrl	a,r6
      000160 CE               [12]  699 	xch	a,r6
      000161 30 E3 02         [24]  700 	jnb	acc.3,00165$
      000164 44 F0            [12]  701 	orl	a,#0xf0
      000166                        702 00165$:
      000166 53 06 0F         [24]  703 	anl	ar6,#0x0f
      000169 7F 00            [12]  704 	mov	r7,#0x00
      00016B EE               [12]  705 	mov	a,r6
      00016C 24r00            [12]  706 	add	a,#_digits
      00016E F5 82            [12]  707 	mov	dpl,a
      000170 EF               [12]  708 	mov	a,r7
      000171 34s00            [12]  709 	addc	a,#(_digits >> 8)
      000173 F5 83            [12]  710 	mov	dph,a
      000175 E4               [12]  711 	clr	a
      000176 93               [24]  712 	movc	a,@a+dptr
      000177 FF               [12]  713 	mov	r7,a
      000178 7E 00            [12]  714 	mov	r6,#0x00
      00017A 8F 82            [24]  715 	mov	dpl,r7
      00017C 8E 83            [24]  716 	mov	dph,r6
      00017E 12r00r00         [24]  717 	lcall	_putchar
                                    718 ;	dump.c:30: putchar(digits[a & 0xf]);
      000181 53 04 0F         [24]  719 	anl	ar4,#0x0f
      000184 7D 00            [12]  720 	mov	r5,#0x00
      000186 EC               [12]  721 	mov	a,r4
      000187 24r00            [12]  722 	add	a,#_digits
      000189 F5 82            [12]  723 	mov	dpl,a
      00018B ED               [12]  724 	mov	a,r5
      00018C 34s00            [12]  725 	addc	a,#(_digits >> 8)
      00018E F5 83            [12]  726 	mov	dph,a
      000190 E4               [12]  727 	clr	a
      000191 93               [24]  728 	movc	a,@a+dptr
      000192 FF               [12]  729 	mov	r7,a
      000193 7E 00            [12]  730 	mov	r6,#0x00
      000195 8F 82            [24]  731 	mov	dpl,r7
      000197 8E 83            [24]  732 	mov	dph,r6
      000199 12r00r00         [24]  733 	lcall	_putchar
                                    734 ;	dump.c:79: if (col == 0x1fu) {
      00019C 90r00r06         [24]  735 	mov	dptr,#_col
      00019F E0               [24]  736 	movx	a,@dptr
      0001A0 FE               [12]  737 	mov	r6,a
      0001A1 A3               [24]  738 	inc	dptr
      0001A2 E0               [24]  739 	movx	a,@dptr
      0001A3 FF               [12]  740 	mov	r7,a
      0001A4 BE 1F 11         [24]  741 	cjne	r6,#0x1f,00102$
      0001A7 BF 00 0E         [24]  742 	cjne	r7,#0x00,00102$
                                    743 ;	dump.c:80: putchar('\r'); putchar('\n');
      0001AA 90 00 0D         [24]  744 	mov	dptr,#0x000d
      0001AD 12r00r00         [24]  745 	lcall	_putchar
      0001B0 90 00 0A         [24]  746 	mov	dptr,#0x000a
      0001B3 12r00r00         [24]  747 	lcall	_putchar
      0001B6 80 06            [24]  748 	sjmp	00115$
      0001B8                        749 00102$:
                                    750 ;	dump.c:81: } else putchar(' ');
      0001B8 90 00 20         [24]  751 	mov	dptr,#0x0020
      0001BB 12r00r00         [24]  752 	lcall	_putchar
      0001BE                        753 00115$:
                                    754 ;	dump.c:77: for (col = 0u; col < 0x20u; col++) {
      0001BE 90r00r06         [24]  755 	mov	dptr,#_col
      0001C1 E0               [24]  756 	movx	a,@dptr
      0001C2 24 01            [12]  757 	add	a,#0x01
      0001C4 F0               [24]  758 	movx	@dptr,a
      0001C5 A3               [24]  759 	inc	dptr
      0001C6 E0               [24]  760 	movx	a,@dptr
      0001C7 34 00            [12]  761 	addc	a,#0x00
      0001C9 F0               [24]  762 	movx	@dptr,a
      0001CA 90r00r06         [24]  763 	mov	dptr,#_col
      0001CD E0               [24]  764 	movx	a,@dptr
      0001CE FE               [12]  765 	mov	r6,a
      0001CF A3               [24]  766 	inc	dptr
      0001D0 E0               [24]  767 	movx	a,@dptr
      0001D1 FF               [12]  768 	mov	r7,a
      0001D2 C3               [12]  769 	clr	c
      0001D3 EE               [12]  770 	mov	a,r6
      0001D4 94 20            [12]  771 	subb	a,#0x20
      0001D6 EF               [12]  772 	mov	a,r7
      0001D7 94 00            [12]  773 	subb	a,#0x00
      0001D9 50 03            [24]  774 	jnc	00168$
      0001DB 02r01r1D         [24]  775 	ljmp	00114$
      0001DE                        776 00168$:
                                    777 ;	dump.c:74: for (off = 0u; off < 0x400u; off += 0x20u) {
      0001DE 90r00r04         [24]  778 	mov	dptr,#_off
      0001E1 E0               [24]  779 	movx	a,@dptr
      0001E2 FE               [12]  780 	mov	r6,a
      0001E3 A3               [24]  781 	inc	dptr
      0001E4 E0               [24]  782 	movx	a,@dptr
      0001E5 FF               [12]  783 	mov	r7,a
      0001E6 90r00r04         [24]  784 	mov	dptr,#_off
      0001E9 74 20            [12]  785 	mov	a,#0x20
      0001EB 2E               [12]  786 	add	a,r6
      0001EC F0               [24]  787 	movx	@dptr,a
      0001ED E4               [12]  788 	clr	a
      0001EE 3F               [12]  789 	addc	a,r7
      0001EF A3               [24]  790 	inc	dptr
      0001F0 F0               [24]  791 	movx	@dptr,a
      0001F1 90r00r04         [24]  792 	mov	dptr,#_off
      0001F4 E0               [24]  793 	movx	a,@dptr
      0001F5 FE               [12]  794 	mov	r6,a
      0001F6 A3               [24]  795 	inc	dptr
      0001F7 E0               [24]  796 	movx	a,@dptr
      0001F8 FF               [12]  797 	mov	r7,a
      0001F9 C3               [12]  798 	clr	c
      0001FA 94 04            [12]  799 	subb	a,#0x04
      0001FC 50 03            [24]  800 	jnc	00169$
      0001FE 02r00r4A         [24]  801 	ljmp	00116$
      000201                        802 00169$:
                                    803 ;	dump.c:84: getchar();
      000201 12r00r05         [24]  804 	lcall	_getchar
                                    805 ;	dump.c:85: putchar('\r'); putchar('\n');
      000204 90 00 0D         [24]  806 	mov	dptr,#0x000d
      000207 12r00r00         [24]  807 	lcall	_putchar
      00020A 90 00 0A         [24]  808 	mov	dptr,#0x000a
      00020D 12r00r00         [24]  809 	lcall	_putchar
                                    810 ;	dump.c:73: for (base = (unsigned char *)0u; !intr; base += 0x400u) {
      000210 90r00r01         [24]  811 	mov	dptr,#_base
      000213 E0               [24]  812 	movx	a,@dptr
      000214 FD               [12]  813 	mov	r5,a
      000215 A3               [24]  814 	inc	dptr
      000216 E0               [24]  815 	movx	a,@dptr
      000217 FE               [12]  816 	mov	r6,a
      000218 A3               [24]  817 	inc	dptr
      000219 E0               [24]  818 	movx	a,@dptr
      00021A FF               [12]  819 	mov	r7,a
      00021B 90r00r01         [24]  820 	mov	dptr,#_base
      00021E ED               [12]  821 	mov	a,r5
      00021F F0               [24]  822 	movx	@dptr,a
      000220 74 04            [12]  823 	mov	a,#0x04
      000222 2E               [12]  824 	add	a,r6
      000223 A3               [24]  825 	inc	dptr
      000224 F0               [24]  826 	movx	@dptr,a
      000225 EF               [12]  827 	mov	a,r7
      000226 A3               [24]  828 	inc	dptr
      000227 F0               [24]  829 	movx	@dptr,a
      000228 02r00r3A         [24]  830 	ljmp	00119$
      00022B                        831 00106$:
                                    832 ;	dump.c:88: P1_7 = 1; /* deactivate IO address space from 0xe000 to 0xffff */
                                    833 ;	assignBit
      00022B D2 97            [12]  834 	setb	_P1_7
                                    835 ;	dump.c:93: __endasm;
      00022D 00               [12]  836 	nop
      00022E 00               [12]  837 	nop
      00022F 00               [12]  838 	nop
                                    839 ;	dump.c:95: PCON |= 2;
      000230 43 87 02         [24]  840 	orl	_PCON,#0x02
                                    841 ;	dump.c:97: return;
                                    842 ;	dump.c:98: }
      000233 22               [24]  843 	ret
                                    844 	.area CSEG    (CODE)
                                    845 	.area CONST   (CODE)
      000000                        846 _digits:
      000000 30                     847 	.db #0x30	; 48	'0'
      000001 31                     848 	.db #0x31	; 49	'1'
      000002 32                     849 	.db #0x32	; 50	'2'
      000003 33                     850 	.db #0x33	; 51	'3'
      000004 34                     851 	.db #0x34	; 52	'4'
      000005 35                     852 	.db #0x35	; 53	'5'
      000006 36                     853 	.db #0x36	; 54	'6'
      000007 37                     854 	.db #0x37	; 55	'7'
      000008 38                     855 	.db #0x38	; 56	'8'
      000009 39                     856 	.db #0x39	; 57	'9'
      00000A 61                     857 	.db #0x61	; 97	'a'
      00000B 62                     858 	.db #0x62	; 98	'b'
      00000C 63                     859 	.db #0x63	; 99	'c'
      00000D 64                     860 	.db #0x64	; 100	'd'
      00000E 65                     861 	.db #0x65	; 101	'e'
      00000F 66                     862 	.db #0x66	; 102	'f'
                                    863 	.area CONST   (CODE)
      000010                        864 ___str_0:
      000010 20 3A 20               865 	.ascii " : "
      000013 00                     866 	.db 0x00
                                    867 	.area CSEG    (CODE)
                                    868 	.area XINIT   (CODE)
                                    869 	.area CABS    (ABS,CODE)
