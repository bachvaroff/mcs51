                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _FL
                                     27 	.globl _P
                                     28 	.globl _TF2
                                     29 	.globl _EXF2
                                     30 	.globl _RCLK
                                     31 	.globl _TCLK
                                     32 	.globl _EXEN2
                                     33 	.globl _TR2
                                     34 	.globl _C_T2
                                     35 	.globl _CP_RL2
                                     36 	.globl _T2CON_7
                                     37 	.globl _T2CON_6
                                     38 	.globl _T2CON_5
                                     39 	.globl _T2CON_4
                                     40 	.globl _T2CON_3
                                     41 	.globl _T2CON_2
                                     42 	.globl _T2CON_1
                                     43 	.globl _T2CON_0
                                     44 	.globl _PT2
                                     45 	.globl _PS
                                     46 	.globl _PT1
                                     47 	.globl _PX1
                                     48 	.globl _PT0
                                     49 	.globl _PX0
                                     50 	.globl _RD
                                     51 	.globl _WR
                                     52 	.globl _T1
                                     53 	.globl _T0
                                     54 	.globl _INT1
                                     55 	.globl _INT0
                                     56 	.globl _TXD
                                     57 	.globl _RXD
                                     58 	.globl _P3_7
                                     59 	.globl _P3_6
                                     60 	.globl _P3_5
                                     61 	.globl _P3_4
                                     62 	.globl _P3_3
                                     63 	.globl _P3_2
                                     64 	.globl _P3_1
                                     65 	.globl _P3_0
                                     66 	.globl _EA
                                     67 	.globl _ET2
                                     68 	.globl _ES
                                     69 	.globl _ET1
                                     70 	.globl _EX1
                                     71 	.globl _ET0
                                     72 	.globl _EX0
                                     73 	.globl _P2_7
                                     74 	.globl _P2_6
                                     75 	.globl _P2_5
                                     76 	.globl _P2_4
                                     77 	.globl _P2_3
                                     78 	.globl _P2_2
                                     79 	.globl _P2_1
                                     80 	.globl _P2_0
                                     81 	.globl _SM0
                                     82 	.globl _SM1
                                     83 	.globl _SM2
                                     84 	.globl _REN
                                     85 	.globl _TB8
                                     86 	.globl _RB8
                                     87 	.globl _TI
                                     88 	.globl _RI
                                     89 	.globl _T2EX
                                     90 	.globl _T2
                                     91 	.globl _P1_7
                                     92 	.globl _P1_6
                                     93 	.globl _P1_5
                                     94 	.globl _P1_4
                                     95 	.globl _P1_3
                                     96 	.globl _P1_2
                                     97 	.globl _P1_1
                                     98 	.globl _P1_0
                                     99 	.globl _TF1
                                    100 	.globl _TR1
                                    101 	.globl _TF0
                                    102 	.globl _TR0
                                    103 	.globl _IE1
                                    104 	.globl _IT1
                                    105 	.globl _IE0
                                    106 	.globl _IT0
                                    107 	.globl _P0_7
                                    108 	.globl _P0_6
                                    109 	.globl _P0_5
                                    110 	.globl _P0_4
                                    111 	.globl _P0_3
                                    112 	.globl _P0_2
                                    113 	.globl _P0_1
                                    114 	.globl _P0_0
                                    115 	.globl _B
                                    116 	.globl _A
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _TH2
                                    120 	.globl _TL2
                                    121 	.globl _RCAP2H
                                    122 	.globl _RCAP2L
                                    123 	.globl _T2MOD
                                    124 	.globl _T2CON
                                    125 	.globl _IP
                                    126 	.globl _P3
                                    127 	.globl _IE
                                    128 	.globl _P2
                                    129 	.globl _SBUF
                                    130 	.globl _SCON
                                    131 	.globl _P1
                                    132 	.globl _TH1
                                    133 	.globl _TH0
                                    134 	.globl _TL1
                                    135 	.globl _TL0
                                    136 	.globl _TMOD
                                    137 	.globl _TCON
                                    138 	.globl _PCON
                                    139 	.globl _DPH
                                    140 	.globl _DPL
                                    141 	.globl _SP
                                    142 	.globl _P0
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000C8   166 _T2CON	=	0x00c8
                           0000C9   167 _T2MOD	=	0x00c9
                           0000CA   168 _RCAP2L	=	0x00ca
                           0000CB   169 _RCAP2H	=	0x00cb
                           0000CC   170 _TL2	=	0x00cc
                           0000CD   171 _TH2	=	0x00cd
                           0000D0   172 _PSW	=	0x00d0
                           0000E0   173 _ACC	=	0x00e0
                           0000E0   174 _A	=	0x00e0
                           0000F0   175 _B	=	0x00f0
                                    176 ;--------------------------------------------------------
                                    177 ; special function bits
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0_0	=	0x0080
                           000081   182 _P0_1	=	0x0081
                           000082   183 _P0_2	=	0x0082
                           000083   184 _P0_3	=	0x0083
                           000084   185 _P0_4	=	0x0084
                           000085   186 _P0_5	=	0x0085
                           000086   187 _P0_6	=	0x0086
                           000087   188 _P0_7	=	0x0087
                           000088   189 _IT0	=	0x0088
                           000089   190 _IE0	=	0x0089
                           00008A   191 _IT1	=	0x008a
                           00008B   192 _IE1	=	0x008b
                           00008C   193 _TR0	=	0x008c
                           00008D   194 _TF0	=	0x008d
                           00008E   195 _TR1	=	0x008e
                           00008F   196 _TF1	=	0x008f
                           000090   197 _P1_0	=	0x0090
                           000091   198 _P1_1	=	0x0091
                           000092   199 _P1_2	=	0x0092
                           000093   200 _P1_3	=	0x0093
                           000094   201 _P1_4	=	0x0094
                           000095   202 _P1_5	=	0x0095
                           000096   203 _P1_6	=	0x0096
                           000097   204 _P1_7	=	0x0097
                           000090   205 _T2	=	0x0090
                           000091   206 _T2EX	=	0x0091
                           000098   207 _RI	=	0x0098
                           000099   208 _TI	=	0x0099
                           00009A   209 _RB8	=	0x009a
                           00009B   210 _TB8	=	0x009b
                           00009C   211 _REN	=	0x009c
                           00009D   212 _SM2	=	0x009d
                           00009E   213 _SM1	=	0x009e
                           00009F   214 _SM0	=	0x009f
                           0000A0   215 _P2_0	=	0x00a0
                           0000A1   216 _P2_1	=	0x00a1
                           0000A2   217 _P2_2	=	0x00a2
                           0000A3   218 _P2_3	=	0x00a3
                           0000A4   219 _P2_4	=	0x00a4
                           0000A5   220 _P2_5	=	0x00a5
                           0000A6   221 _P2_6	=	0x00a6
                           0000A7   222 _P2_7	=	0x00a7
                           0000A8   223 _EX0	=	0x00a8
                           0000A9   224 _ET0	=	0x00a9
                           0000AA   225 _EX1	=	0x00aa
                           0000AB   226 _ET1	=	0x00ab
                           0000AC   227 _ES	=	0x00ac
                           0000AD   228 _ET2	=	0x00ad
                           0000AF   229 _EA	=	0x00af
                           0000B0   230 _P3_0	=	0x00b0
                           0000B1   231 _P3_1	=	0x00b1
                           0000B2   232 _P3_2	=	0x00b2
                           0000B3   233 _P3_3	=	0x00b3
                           0000B4   234 _P3_4	=	0x00b4
                           0000B5   235 _P3_5	=	0x00b5
                           0000B6   236 _P3_6	=	0x00b6
                           0000B7   237 _P3_7	=	0x00b7
                           0000B0   238 _RXD	=	0x00b0
                           0000B1   239 _TXD	=	0x00b1
                           0000B2   240 _INT0	=	0x00b2
                           0000B3   241 _INT1	=	0x00b3
                           0000B4   242 _T0	=	0x00b4
                           0000B5   243 _T1	=	0x00b5
                           0000B6   244 _WR	=	0x00b6
                           0000B7   245 _RD	=	0x00b7
                           0000B8   246 _PX0	=	0x00b8
                           0000B9   247 _PT0	=	0x00b9
                           0000BA   248 _PX1	=	0x00ba
                           0000BB   249 _PT1	=	0x00bb
                           0000BC   250 _PS	=	0x00bc
                           0000BD   251 _PT2	=	0x00bd
                           0000C8   252 _T2CON_0	=	0x00c8
                           0000C9   253 _T2CON_1	=	0x00c9
                           0000CA   254 _T2CON_2	=	0x00ca
                           0000CB   255 _T2CON_3	=	0x00cb
                           0000CC   256 _T2CON_4	=	0x00cc
                           0000CD   257 _T2CON_5	=	0x00cd
                           0000CE   258 _T2CON_6	=	0x00ce
                           0000CF   259 _T2CON_7	=	0x00cf
                           0000C8   260 _CP_RL2	=	0x00c8
                           0000C9   261 _C_T2	=	0x00c9
                           0000CA   262 _TR2	=	0x00ca
                           0000CB   263 _EXEN2	=	0x00cb
                           0000CC   264 _TCLK	=	0x00cc
                           0000CD   265 _RCLK	=	0x00cd
                           0000CE   266 _EXF2	=	0x00ce
                           0000CF   267 _TF2	=	0x00cf
                           0000D0   268 _P	=	0x00d0
                           0000D1   269 _FL	=	0x00d1
                           0000D2   270 _OV	=	0x00d2
                           0000D3   271 _RS0	=	0x00d3
                           0000D4   272 _RS1	=	0x00d4
                           0000D5   273 _F0	=	0x00d5
                           0000D6   274 _AC	=	0x00d6
                           0000D7   275 _CY	=	0x00d7
                                    276 ;--------------------------------------------------------
                                    277 ; overlayable register banks
                                    278 ;--------------------------------------------------------
                                    279 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        280 	.ds 8
                                    281 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable bit register bank
                                    285 ;--------------------------------------------------------
                                    286 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        287 bits:
      000000                        288 	.ds 1
                           008000   289 	b0 = bits[0]
                           008100   290 	b1 = bits[1]
                           008200   291 	b2 = bits[2]
                           008300   292 	b3 = bits[3]
                           008400   293 	b4 = bits[4]
                           008500   294 	b5 = bits[5]
                           008600   295 	b6 = bits[6]
                           008700   296 	b7 = bits[7]
                                    297 ;--------------------------------------------------------
                                    298 ; internal ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area DSEG    (DATA)
                                    301 ;--------------------------------------------------------
                                    302 ; overlayable items in internal ram 
                                    303 ;--------------------------------------------------------
                                    304 ;--------------------------------------------------------
                                    305 ; Stack segment in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 	.area	SSEG
      000000                        308 __start__stack:
      000000                        309 	.ds	1
                                    310 
                                    311 ;--------------------------------------------------------
                                    312 ; indirectly addressable internal ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area ISEG    (DATA)
      000000                        315 _digits:
      000000                        316 	.ds 16
      000010                        317 _i0:
      000010                        318 	.ds 1
      000011                        319 _i1:
      000011                        320 	.ds 1
      000012                        321 _x:
      000012                        322 	.ds 2
      000014                        323 _y:
      000014                        324 	.ds 2
      000016                        325 _j:
      000016                        326 	.ds 2
      000018                        327 _c:
      000018                        328 	.ds 2
      00001A                        329 _bstep:
      00001A                        330 	.ds 1
      00001B                        331 _n:
      00001B                        332 	.ds 1
      00001C                        333 _fixed:
      00001C                        334 	.ds 1
      00001D                        335 _cycle2:
      00001D                        336 	.ds 1
      00001E                        337 _dx:
      00001E                        338 	.ds 2
      000020                        339 _dy:
      000020                        340 	.ds 2
      000022                        341 _generation:
      000022                        342 	.ds 4
      000026                        343 _busy:
      000026                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
      000000                        362 _pu:
      000000                        363 	.ds 2048
      000800                        364 _u:
      000800                        365 	.ds 2048
      001000                        366 _nu:
      001000                        367 	.ds 2048
                                    368 ;--------------------------------------------------------
                                    369 ; absolute external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XABS    (ABS,XDATA)
                                    372 ;--------------------------------------------------------
                                    373 ; external initialized ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XISEG   (XDATA)
                                    376 	.area HOME    (CODE)
                                    377 	.area GSINIT0 (CODE)
                                    378 	.area GSINIT1 (CODE)
                                    379 	.area GSINIT2 (CODE)
                                    380 	.area GSINIT3 (CODE)
                                    381 	.area GSINIT4 (CODE)
                                    382 	.area GSINIT5 (CODE)
                                    383 	.area GSINIT  (CODE)
                                    384 	.area GSFINAL (CODE)
                                    385 	.area CSEG    (CODE)
                                    386 ;--------------------------------------------------------
                                    387 ; interrupt vector 
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
      000000                        390 __interrupt_vect:
      000000 02r00r00         [24]  391 	ljmp	__sdcc_gsinit_startup
      000003 02r00r17         [24]  392 	ljmp	_int0
      000006                        393 	.ds	5
      00000B 32               [24]  394 	reti
      00000C                        395 	.ds	7
      000013 02r00r23         [24]  396 	ljmp	_int1
                                    397 ;--------------------------------------------------------
                                    398 ; global & static initialisations
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
                                    401 	.area GSINIT  (CODE)
                                    402 	.area GSFINAL (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.globl __sdcc_gsinit_startup
                                    405 	.globl __sdcc_program_startup
                                    406 	.globl __start__stack
                                    407 	.globl __mcs51_genXINIT
                                    408 	.globl __mcs51_genXRAMCLEAR
                                    409 	.globl __mcs51_genRAMCLEAR
                                    410 ;	life.c:28: __idata static const char digits[16] = {
      000000 78r00            [12]  411 	mov	r0,#_digits
      000002 76 30            [12]  412 	mov	@r0,#0x30
      000004 78r01            [12]  413 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  414 	mov	@r0,#0x31
      000008 78r02            [12]  415 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  416 	mov	@r0,#0x32
      00000C 78r03            [12]  417 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  418 	mov	@r0,#0x33
      000010 78r04            [12]  419 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  420 	mov	@r0,#0x34
      000014 78r05            [12]  421 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  422 	mov	@r0,#0x35
      000018 78r06            [12]  423 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  424 	mov	@r0,#0x36
      00001C 78r07            [12]  425 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  426 	mov	@r0,#0x37
      000020 78r08            [12]  427 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  428 	mov	@r0,#0x38
      000024 78r09            [12]  429 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  430 	mov	@r0,#0x39
      000028 78r0A            [12]  431 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  432 	mov	@r0,#0x41
      00002C 78r0B            [12]  433 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  434 	mov	@r0,#0x42
      000030 78r0C            [12]  435 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  436 	mov	@r0,#0x43
      000034 78r0D            [12]  437 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  438 	mov	@r0,#0x44
      000038 78r0E            [12]  439 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  440 	mov	@r0,#0x45
      00003C 78r0F            [12]  441 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  442 	mov	@r0,#0x46
                                    443 ;	life.c:165: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000040 78r26            [12]  444 	mov	r0,#_busy
      000042 76 5C            [12]  445 	mov	@r0,#0x5c
      000044 78r27            [12]  446 	mov	r0,#(_busy + 0x0001)
      000046 76 7C            [12]  447 	mov	@r0,#0x7c
      000048 78r28            [12]  448 	mov	r0,#(_busy + 0x0002)
      00004A 76 2F            [12]  449 	mov	@r0,#0x2f
      00004C 78r29            [12]  450 	mov	r0,#(_busy + 0x0003)
      00004E 76 2D            [12]  451 	mov	@r0,#0x2d
                                    452 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  453 	ljmp	__sdcc_program_startup
                                    454 ;--------------------------------------------------------
                                    455 ; Home
                                    456 ;--------------------------------------------------------
                                    457 	.area HOME    (CODE)
                                    458 	.area HOME    (CODE)
      000016                        459 __sdcc_program_startup:
      000016 02r02r2C         [24]  460 	ljmp	_main
                                    461 ;	return from main will return to caller
                                    462 ;--------------------------------------------------------
                                    463 ; code
                                    464 ;--------------------------------------------------------
                                    465 	.area CSEG    (CODE)
                                    466 ;------------------------------------------------------------
                                    467 ;Allocation info for local variables in function 'putchar'
                                    468 ;------------------------------------------------------------
                                    469 ;c                         Allocated to registers 
                                    470 ;------------------------------------------------------------
                                    471 ;	life.c:6: int putchar(int c) __naked {
                                    472 ;	-----------------------------------------
                                    473 ;	 function putchar
                                    474 ;	-----------------------------------------
      000000                        475 _putchar:
                                    476 ;	naked function: no prologue.
                                    477 ;	life.c:14: __endasm;
      000000 C0 E0            [24]  478 	push	acc
      000002 E5 82            [12]  479 	mov	a, dpl
      000004 12 00 3C         [24]  480 	lcall	0x003c
      000007 D0 E0            [24]  481 	pop	acc
      000009 22               [24]  482 	ret
                                    483 ;	life.c:15: }
                                    484 ;	naked function: no epilogue.
                                    485 ;------------------------------------------------------------
                                    486 ;Allocation info for local variables in function 'getchar'
                                    487 ;------------------------------------------------------------
                                    488 ;	life.c:17: int getchar(void) __naked {
                                    489 ;	-----------------------------------------
                                    490 ;	 function getchar
                                    491 ;	-----------------------------------------
      00000A                        492 _getchar:
                                    493 ;	naked function: no prologue.
                                    494 ;	life.c:25: __endasm;
      00000A C0 E0            [24]  495 	push	acc
      00000C 12 00 36         [24]  496 	lcall	0x0036
      00000F F5 82            [12]  497 	mov	dpl, a
      000011 75 83 00         [24]  498 	mov	dph, #0
      000014 D0 E0            [24]  499 	pop	acc
      000016 22               [24]  500 	ret
                                    501 ;	life.c:26: }
                                    502 ;	naked function: no epilogue.
                                    503 ;------------------------------------------------------------
                                    504 ;Allocation info for local variables in function 'int0'
                                    505 ;------------------------------------------------------------
                                    506 ;	life.c:57: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    507 ;	-----------------------------------------
                                    508 ;	 function int0
                                    509 ;	-----------------------------------------
      000017                        510 _int0:
                           00000F   511 	ar7 = 0x0f
                           00000E   512 	ar6 = 0x0e
                           00000D   513 	ar5 = 0x0d
                           00000C   514 	ar4 = 0x0c
                           00000B   515 	ar3 = 0x0b
                           00000A   516 	ar2 = 0x0a
                           000009   517 	ar1 = 0x09
                           000008   518 	ar0 = 0x08
      000017 C0 D0            [24]  519 	push	psw
      000019 75 D0 08         [24]  520 	mov	psw,#0x08
                                    521 ;	life.c:58: i0 = 1;
      00001C 78r10            [12]  522 	mov	r0,#_i0
      00001E 76 01            [12]  523 	mov	@r0,#0x01
                                    524 ;	life.c:59: }
      000020 D0 D0            [24]  525 	pop	psw
      000022 32               [24]  526 	reti
                                    527 ;	eliminated unneeded push/pop dpl
                                    528 ;	eliminated unneeded push/pop dph
                                    529 ;	eliminated unneeded push/pop b
                                    530 ;	eliminated unneeded push/pop acc
                                    531 ;------------------------------------------------------------
                                    532 ;Allocation info for local variables in function 'int1'
                                    533 ;------------------------------------------------------------
                                    534 ;	life.c:61: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    535 ;	-----------------------------------------
                                    536 ;	 function int1
                                    537 ;	-----------------------------------------
      000023                        538 _int1:
      000023 C0 D0            [24]  539 	push	psw
      000025 75 D0 08         [24]  540 	mov	psw,#0x08
                                    541 ;	life.c:62: i1 = 1;
      000028 78r11            [12]  542 	mov	r0,#_i1
      00002A 76 01            [12]  543 	mov	@r0,#0x01
                                    544 ;	life.c:63: }
      00002C D0 D0            [24]  545 	pop	psw
      00002E 32               [24]  546 	reti
                                    547 ;	eliminated unneeded push/pop dpl
                                    548 ;	eliminated unneeded push/pop dph
                                    549 ;	eliminated unneeded push/pop b
                                    550 ;	eliminated unneeded push/pop acc
                                    551 ;------------------------------------------------------------
                                    552 ;Allocation info for local variables in function 'show'
                                    553 ;------------------------------------------------------------
                                    554 ;hdr                       Allocated to registers r7 
                                    555 ;__1966080005              Allocated to registers 
                                    556 ;s                         Allocated to registers r5 r6 r7 
                                    557 ;__1310720001              Allocated to registers r6 r7 
                                    558 ;a                         Allocated to registers 
                                    559 ;__1310720003              Allocated to registers r6 r7 
                                    560 ;a                         Allocated to registers 
                                    561 ;__1966080008              Allocated to registers 
                                    562 ;s                         Allocated to registers r5 r6 r7 
                                    563 ;__2621440011              Allocated to registers 
                                    564 ;s                         Allocated to registers r5 r6 r7 
                                    565 ;------------------------------------------------------------
                                    566 ;	life.c:99: void show(char hdr) {
                                    567 ;	-----------------------------------------
                                    568 ;	 function show
                                    569 ;	-----------------------------------------
      00002F                        570 _show:
                           000007   571 	ar7 = 0x07
                           000006   572 	ar6 = 0x06
                           000005   573 	ar5 = 0x05
                           000004   574 	ar4 = 0x04
                           000003   575 	ar3 = 0x03
                           000002   576 	ar2 = 0x02
                           000001   577 	ar1 = 0x01
                           000000   578 	ar0 = 0x00
                                    579 ;	life.c:100: if (hdr) {
      00002F E5 82            [12]  580 	mov	a,dpl
      000031 FF               [12]  581 	mov	r7,a
      000032 70 03            [24]  582 	jnz	00190$
      000034 02r01r87         [24]  583 	ljmp	00102$
      000037                        584 00190$:
                                    585 ;	life.c:101: printstr("\033[2J\033[mGEN ");
      000037 7Dr00            [12]  586 	mov	r5,#___str_0
      000039 7Es00            [12]  587 	mov	r6,#(___str_0 >> 8)
      00003B 7F 80            [12]  588 	mov	r7,#0x80
                                    589 ;	life.c:52: return;
      00003D                        590 00121$:
                                    591 ;	life.c:50: for (; *s; s++) putchar(*s);
      00003D 8D 82            [24]  592 	mov	dpl,r5
      00003F 8E 83            [24]  593 	mov	dph,r6
      000041 8F F0            [24]  594 	mov	b,r7
      000043 12r00r00         [24]  595 	lcall	__gptrget
      000046 FC               [12]  596 	mov	r4,a
      000047 60 10            [24]  597 	jz	00109$
      000049 7B 00            [12]  598 	mov	r3,#0x00
      00004B 8C 82            [24]  599 	mov	dpl,r4
      00004D 8B 83            [24]  600 	mov	dph,r3
      00004F 12r00r00         [24]  601 	lcall	_putchar
      000052 0D               [12]  602 	inc	r5
                                    603 ;	life.c:101: printstr("\033[2J\033[mGEN ");
      000053 BD 00 E7         [24]  604 	cjne	r5,#0x00,00121$
      000056 0E               [12]  605 	inc	r6
      000057 80 E4            [24]  606 	sjmp	00121$
      000059                        607 00109$:
                                    608 ;	life.c:93: print16x(generation[1]);
      000059 78r24            [12]  609 	mov	r0,#(_generation + 0x0002)
      00005B 86 06            [24]  610 	mov	ar6,@r0
      00005D 08               [12]  611 	inc	r0
                                    612 ;	life.c:41: putchar(digits[(a >> 12) & 0xf]);
      00005E E6               [12]  613 	mov	a,@r0
      00005F FF               [12]  614 	mov	r7,a
      000060 C4               [12]  615 	swap	a
      000061 54 0F            [12]  616 	anl	a,#0x0f
      000063 30 E3 02         [24]  617 	jnb	acc.3,00193$
      000066 44 F0            [12]  618 	orl	a,#0xf0
      000068                        619 00193$:
      000068 FC               [12]  620 	mov	r4,a
      000069 33               [12]  621 	rlc	a
      00006A 95 E0            [12]  622 	subb	a,acc
      00006C 53 04 0F         [24]  623 	anl	ar4,#0x0f
      00006F EC               [12]  624 	mov	a,r4
      000070 24r00            [12]  625 	add	a,#_digits
      000072 F9               [12]  626 	mov	r1,a
      000073 87 05            [24]  627 	mov	ar5,@r1
      000075 7C 00            [12]  628 	mov	r4,#0x00
      000077 8D 82            [24]  629 	mov	dpl,r5
      000079 8C 83            [24]  630 	mov	dph,r4
      00007B 12r00r00         [24]  631 	lcall	_putchar
                                    632 ;	life.c:42: putchar(digits[(a >> 8) & 0xf]);
      00007E 8F 05            [24]  633 	mov	ar5,r7
      000080 53 05 0F         [24]  634 	anl	ar5,#0x0f
      000083 ED               [12]  635 	mov	a,r5
      000084 24r00            [12]  636 	add	a,#_digits
      000086 F9               [12]  637 	mov	r1,a
      000087 87 05            [24]  638 	mov	ar5,@r1
      000089 7C 00            [12]  639 	mov	r4,#0x00
      00008B 8D 82            [24]  640 	mov	dpl,r5
      00008D 8C 83            [24]  641 	mov	dph,r4
      00008F 12r00r00         [24]  642 	lcall	_putchar
                                    643 ;	life.c:43: putchar(digits[(a >> 4) & 0xf]);
      000092 8E 04            [24]  644 	mov	ar4,r6
      000094 EF               [12]  645 	mov	a,r7
      000095 C4               [12]  646 	swap	a
      000096 CC               [12]  647 	xch	a,r4
      000097 C4               [12]  648 	swap	a
      000098 54 0F            [12]  649 	anl	a,#0x0f
      00009A 6C               [12]  650 	xrl	a,r4
      00009B CC               [12]  651 	xch	a,r4
      00009C 54 0F            [12]  652 	anl	a,#0x0f
      00009E CC               [12]  653 	xch	a,r4
      00009F 6C               [12]  654 	xrl	a,r4
      0000A0 CC               [12]  655 	xch	a,r4
      0000A1 30 E3 02         [24]  656 	jnb	acc.3,00194$
      0000A4 44 F0            [12]  657 	orl	a,#0xf0
      0000A6                        658 00194$:
      0000A6 53 04 0F         [24]  659 	anl	ar4,#0x0f
      0000A9 EC               [12]  660 	mov	a,r4
      0000AA 24r00            [12]  661 	add	a,#_digits
      0000AC F9               [12]  662 	mov	r1,a
      0000AD 87 05            [24]  663 	mov	ar5,@r1
      0000AF 7C 00            [12]  664 	mov	r4,#0x00
      0000B1 8D 82            [24]  665 	mov	dpl,r5
      0000B3 8C 83            [24]  666 	mov	dph,r4
      0000B5 12r00r00         [24]  667 	lcall	_putchar
                                    668 ;	life.c:44: putchar(digits[a & 0xf]);
      0000B8 53 06 0F         [24]  669 	anl	ar6,#0x0f
      0000BB EE               [12]  670 	mov	a,r6
      0000BC 24r00            [12]  671 	add	a,#_digits
      0000BE F9               [12]  672 	mov	r1,a
      0000BF 87 07            [24]  673 	mov	ar7,@r1
      0000C1 7E 00            [12]  674 	mov	r6,#0x00
      0000C3 8F 82            [24]  675 	mov	dpl,r7
      0000C5 8E 83            [24]  676 	mov	dph,r6
      0000C7 12r00r00         [24]  677 	lcall	_putchar
                                    678 ;	life.c:94: print16x(generation[0]);
      0000CA 78r22            [12]  679 	mov	r0,#_generation
      0000CC 86 06            [24]  680 	mov	ar6,@r0
      0000CE 08               [12]  681 	inc	r0
                                    682 ;	life.c:41: putchar(digits[(a >> 12) & 0xf]);
      0000CF E6               [12]  683 	mov	a,@r0
      0000D0 FF               [12]  684 	mov	r7,a
      0000D1 C4               [12]  685 	swap	a
      0000D2 54 0F            [12]  686 	anl	a,#0x0f
      0000D4 30 E3 02         [24]  687 	jnb	acc.3,00195$
      0000D7 44 F0            [12]  688 	orl	a,#0xf0
      0000D9                        689 00195$:
      0000D9 FC               [12]  690 	mov	r4,a
      0000DA 33               [12]  691 	rlc	a
      0000DB 95 E0            [12]  692 	subb	a,acc
      0000DD 53 04 0F         [24]  693 	anl	ar4,#0x0f
      0000E0 EC               [12]  694 	mov	a,r4
      0000E1 24r00            [12]  695 	add	a,#_digits
      0000E3 F9               [12]  696 	mov	r1,a
      0000E4 87 05            [24]  697 	mov	ar5,@r1
      0000E6 7C 00            [12]  698 	mov	r4,#0x00
      0000E8 8D 82            [24]  699 	mov	dpl,r5
      0000EA 8C 83            [24]  700 	mov	dph,r4
      0000EC 12r00r00         [24]  701 	lcall	_putchar
                                    702 ;	life.c:42: putchar(digits[(a >> 8) & 0xf]);
      0000EF 8F 05            [24]  703 	mov	ar5,r7
      0000F1 53 05 0F         [24]  704 	anl	ar5,#0x0f
      0000F4 ED               [12]  705 	mov	a,r5
      0000F5 24r00            [12]  706 	add	a,#_digits
      0000F7 F9               [12]  707 	mov	r1,a
      0000F8 87 05            [24]  708 	mov	ar5,@r1
      0000FA 7C 00            [12]  709 	mov	r4,#0x00
      0000FC 8D 82            [24]  710 	mov	dpl,r5
      0000FE 8C 83            [24]  711 	mov	dph,r4
      000100 12r00r00         [24]  712 	lcall	_putchar
                                    713 ;	life.c:43: putchar(digits[(a >> 4) & 0xf]);
      000103 8E 04            [24]  714 	mov	ar4,r6
      000105 EF               [12]  715 	mov	a,r7
      000106 C4               [12]  716 	swap	a
      000107 CC               [12]  717 	xch	a,r4
      000108 C4               [12]  718 	swap	a
      000109 54 0F            [12]  719 	anl	a,#0x0f
      00010B 6C               [12]  720 	xrl	a,r4
      00010C CC               [12]  721 	xch	a,r4
      00010D 54 0F            [12]  722 	anl	a,#0x0f
      00010F CC               [12]  723 	xch	a,r4
      000110 6C               [12]  724 	xrl	a,r4
      000111 CC               [12]  725 	xch	a,r4
      000112 30 E3 02         [24]  726 	jnb	acc.3,00196$
      000115 44 F0            [12]  727 	orl	a,#0xf0
      000117                        728 00196$:
      000117 53 04 0F         [24]  729 	anl	ar4,#0x0f
      00011A EC               [12]  730 	mov	a,r4
      00011B 24r00            [12]  731 	add	a,#_digits
      00011D F9               [12]  732 	mov	r1,a
      00011E 87 05            [24]  733 	mov	ar5,@r1
      000120 7C 00            [12]  734 	mov	r4,#0x00
      000122 8D 82            [24]  735 	mov	dpl,r5
      000124 8C 83            [24]  736 	mov	dph,r4
      000126 12r00r00         [24]  737 	lcall	_putchar
                                    738 ;	life.c:44: putchar(digits[a & 0xf]);
      000129 53 06 0F         [24]  739 	anl	ar6,#0x0f
      00012C EE               [12]  740 	mov	a,r6
      00012D 24r00            [12]  741 	add	a,#_digits
      00012F F9               [12]  742 	mov	r1,a
      000130 87 07            [24]  743 	mov	ar7,@r1
      000132 7E 00            [12]  744 	mov	r6,#0x00
      000134 8F 82            [24]  745 	mov	dpl,r7
      000136 8E 83            [24]  746 	mov	dph,r6
      000138 12r00r00         [24]  747 	lcall	_putchar
                                    748 ;	life.c:103: printstr("\r\n");
      00013B 7Dr0C            [12]  749 	mov	r5,#___str_1
      00013D 7Es00            [12]  750 	mov	r6,#(___str_1 >> 8)
      00013F 7F 80            [12]  751 	mov	r7,#0x80
                                    752 ;	life.c:52: return;
      000141                        753 00124$:
                                    754 ;	life.c:50: for (; *s; s++) putchar(*s);
      000141 8D 82            [24]  755 	mov	dpl,r5
      000143 8E 83            [24]  756 	mov	dph,r6
      000145 8F F0            [24]  757 	mov	b,r7
      000147 12r00r00         [24]  758 	lcall	__gptrget
      00014A FC               [12]  759 	mov	r4,a
      00014B 60 10            [24]  760 	jz	00114$
      00014D 7B 00            [12]  761 	mov	r3,#0x00
      00014F 8C 82            [24]  762 	mov	dpl,r4
      000151 8B 83            [24]  763 	mov	dph,r3
      000153 12r00r00         [24]  764 	lcall	_putchar
      000156 0D               [12]  765 	inc	r5
                                    766 ;	life.c:103: printstr("\r\n");
      000157 BD 00 E7         [24]  767 	cjne	r5,#0x00,00124$
      00015A 0E               [12]  768 	inc	r6
      00015B 80 E4            [24]  769 	sjmp	00124$
      00015D                        770 00114$:
                                    771 ;	life.c:86: generation[0]++;
      00015D 78r22            [12]  772 	mov	r0,#_generation
      00015F 86 06            [24]  773 	mov	ar6,@r0
      000161 08               [12]  774 	inc	r0
      000162 86 07            [24]  775 	mov	ar7,@r0
      000164 0E               [12]  776 	inc	r6
      000165 BE 00 01         [24]  777 	cjne	r6,#0x00,00199$
      000168 0F               [12]  778 	inc	r7
      000169                        779 00199$:
      000169 78r22            [12]  780 	mov	r0,#_generation
      00016B A6 06            [24]  781 	mov	@r0,ar6
      00016D 08               [12]  782 	inc	r0
      00016E A6 07            [24]  783 	mov	@r0,ar7
                                    784 ;	life.c:87: if (!generation[0]) generation[1]++;
      000170 EE               [12]  785 	mov	a,r6
      000171 4F               [12]  786 	orl	a,r7
      000172 70 13            [24]  787 	jnz	00102$
      000174 78r24            [12]  788 	mov	r0,#(_generation + 0x0002)
      000176 86 06            [24]  789 	mov	ar6,@r0
      000178 08               [12]  790 	inc	r0
      000179 86 07            [24]  791 	mov	ar7,@r0
      00017B 0E               [12]  792 	inc	r6
      00017C BE 00 01         [24]  793 	cjne	r6,#0x00,00201$
      00017F 0F               [12]  794 	inc	r7
      000180                        795 00201$:
      000180 78r24            [12]  796 	mov	r0,#(_generation + 0x0002)
      000182 A6 06            [24]  797 	mov	@r0,ar6
      000184 08               [12]  798 	inc	r0
      000185 A6 07            [24]  799 	mov	@r0,ar7
                                    800 ;	life.c:104: updategen();
      000187                        801 00102$:
                                    802 ;	life.c:107: for (x = 0; x < W; x++) {
      000187 78r12            [12]  803 	mov	r0,#_x
      000189 E4               [12]  804 	clr	a
      00018A F6               [12]  805 	mov	@r0,a
      00018B 08               [12]  806 	inc	r0
      00018C F6               [12]  807 	mov	@r0,a
      00018D                        808 00131$:
                                    809 ;	life.c:108: for (y = 0; y < H; y++)
      00018D 78r14            [12]  810 	mov	r0,#_y
      00018F E4               [12]  811 	clr	a
      000190 F6               [12]  812 	mov	@r0,a
      000191 08               [12]  813 	inc	r0
      000192 F6               [12]  814 	mov	@r0,a
      000193                        815 00126$:
                                    816 ;	life.c:109: if (u[A2D(W, y, x)]) {
      000193 78r14            [12]  817 	mov	r0,#_y
      000195 86 06            [24]  818 	mov	ar6,@r0
      000197 08               [12]  819 	inc	r0
      000198 E6               [12]  820 	mov	a,@r0
      000199 C4               [12]  821 	swap	a
      00019A 23               [12]  822 	rl	a
      00019B 54 E0            [12]  823 	anl	a,#0xe0
      00019D CE               [12]  824 	xch	a,r6
      00019E C4               [12]  825 	swap	a
      00019F 23               [12]  826 	rl	a
      0001A0 CE               [12]  827 	xch	a,r6
      0001A1 6E               [12]  828 	xrl	a,r6
      0001A2 CE               [12]  829 	xch	a,r6
      0001A3 54 E0            [12]  830 	anl	a,#0xe0
      0001A5 CE               [12]  831 	xch	a,r6
      0001A6 6E               [12]  832 	xrl	a,r6
      0001A7 FF               [12]  833 	mov	r7,a
      0001A8 78r12            [12]  834 	mov	r0,#_x
      0001AA E6               [12]  835 	mov	a,@r0
      0001AB 2E               [12]  836 	add	a,r6
      0001AC FE               [12]  837 	mov	r6,a
      0001AD 08               [12]  838 	inc	r0
      0001AE E6               [12]  839 	mov	a,@r0
      0001AF 3F               [12]  840 	addc	a,r7
      0001B0 FF               [12]  841 	mov	r7,a
      0001B1 EE               [12]  842 	mov	a,r6
      0001B2 24r00            [12]  843 	add	a,#_u
      0001B4 FE               [12]  844 	mov	r6,a
      0001B5 EF               [12]  845 	mov	a,r7
      0001B6 34s08            [12]  846 	addc	a,#(_u >> 8)
      0001B8 FF               [12]  847 	mov	r7,a
      0001B9 8E 82            [24]  848 	mov	dpl,r6
      0001BB 8F 83            [24]  849 	mov	dph,r7
      0001BD E0               [24]  850 	movx	a,@dptr
      0001BE 60 0E            [24]  851 	jz	00104$
                                    852 ;	life.c:110: putchar('['); putchar(']');
      0001C0 90 00 5B         [24]  853 	mov	dptr,#0x005b
      0001C3 12r00r00         [24]  854 	lcall	_putchar
      0001C6 90 00 5D         [24]  855 	mov	dptr,#0x005d
      0001C9 12r00r00         [24]  856 	lcall	_putchar
      0001CC 80 0C            [24]  857 	sjmp	00127$
      0001CE                        858 00104$:
                                    859 ;	life.c:112: putchar('#'); putchar('#');
      0001CE 90 00 23         [24]  860 	mov	dptr,#0x0023
      0001D1 12r00r00         [24]  861 	lcall	_putchar
      0001D4 90 00 23         [24]  862 	mov	dptr,#0x0023
      0001D7 12r00r00         [24]  863 	lcall	_putchar
      0001DA                        864 00127$:
                                    865 ;	life.c:108: for (y = 0; y < H; y++)
      0001DA 78r14            [12]  866 	mov	r0,#_y
      0001DC 06               [12]  867 	inc	@r0
      0001DD B6 00 02         [24]  868 	cjne	@r0,#0x00,00203$
      0001E0 08               [12]  869 	inc	r0
      0001E1 06               [12]  870 	inc	@r0
      0001E2                        871 00203$:
      0001E2 78r14            [12]  872 	mov	r0,#_y
      0001E4 C3               [12]  873 	clr	c
      0001E5 E6               [12]  874 	mov	a,@r0
      0001E6 94 40            [12]  875 	subb	a,#0x40
      0001E8 08               [12]  876 	inc	r0
      0001E9 E6               [12]  877 	mov	a,@r0
      0001EA 64 80            [12]  878 	xrl	a,#0x80
      0001EC 94 80            [12]  879 	subb	a,#0x80
      0001EE 40 A3            [24]  880 	jc	00126$
                                    881 ;	life.c:114: printstr("\r\n");
      0001F0 7Dr0C            [12]  882 	mov	r5,#___str_1
      0001F2 7Es00            [12]  883 	mov	r6,#(___str_1 >> 8)
      0001F4 7F 80            [12]  884 	mov	r7,#0x80
                                    885 ;	life.c:52: return;
      0001F6                        886 00129$:
                                    887 ;	life.c:50: for (; *s; s++) putchar(*s);
      0001F6 8D 82            [24]  888 	mov	dpl,r5
      0001F8 8E 83            [24]  889 	mov	dph,r6
      0001FA 8F F0            [24]  890 	mov	b,r7
      0001FC 12r00r00         [24]  891 	lcall	__gptrget
      0001FF FC               [12]  892 	mov	r4,a
      000200 60 10            [24]  893 	jz	00119$
      000202 7B 00            [12]  894 	mov	r3,#0x00
      000204 8C 82            [24]  895 	mov	dpl,r4
      000206 8B 83            [24]  896 	mov	dph,r3
      000208 12r00r00         [24]  897 	lcall	_putchar
      00020B 0D               [12]  898 	inc	r5
                                    899 ;	life.c:114: printstr("\r\n");
      00020C BD 00 E7         [24]  900 	cjne	r5,#0x00,00129$
      00020F 0E               [12]  901 	inc	r6
      000210 80 E4            [24]  902 	sjmp	00129$
      000212                        903 00119$:
                                    904 ;	life.c:107: for (x = 0; x < W; x++) {
      000212 78r12            [12]  905 	mov	r0,#_x
      000214 06               [12]  906 	inc	@r0
      000215 B6 00 02         [24]  907 	cjne	@r0,#0x00,00207$
      000218 08               [12]  908 	inc	r0
      000219 06               [12]  909 	inc	@r0
      00021A                        910 00207$:
      00021A 78r12            [12]  911 	mov	r0,#_x
      00021C C3               [12]  912 	clr	c
      00021D E6               [12]  913 	mov	a,@r0
      00021E 94 20            [12]  914 	subb	a,#0x20
      000220 08               [12]  915 	inc	r0
      000221 E6               [12]  916 	mov	a,@r0
      000222 64 80            [12]  917 	xrl	a,#0x80
      000224 94 80            [12]  918 	subb	a,#0x80
      000226 50 03            [24]  919 	jnc	00208$
      000228 02r01r8D         [24]  920 	ljmp	00131$
      00022B                        921 00208$:
                                    922 ;	life.c:117: return;
                                    923 ;	life.c:118: }
      00022B 22               [24]  924 	ret
                                    925 ;------------------------------------------------------------
                                    926 ;Allocation info for local variables in function 'main'
                                    927 ;------------------------------------------------------------
                                    928 ;__2621440019              Allocated to registers 
                                    929 ;s                         Allocated to registers r5 r6 r7 
                                    930 ;__1310720013              Allocated to registers 
                                    931 ;s                         Allocated to registers r5 r6 r7 
                                    932 ;__1310720015              Allocated to registers r6 r7 
                                    933 ;a                         Allocated to registers r4 r5 
                                    934 ;__1310720017              Allocated to registers 
                                    935 ;s                         Allocated to registers r5 r6 r7 
                                    936 ;__2621440023              Allocated to registers 
                                    937 ;s                         Allocated to registers r5 r6 r7 
                                    938 ;__4587520027              Allocated to registers 
                                    939 ;s                         Allocated to registers r5 r6 r7 
                                    940 ;__4587520029              Allocated to registers 
                                    941 ;s                         Allocated to registers r5 r6 r7 
                                    942 ;__4587520031              Allocated to registers 
                                    943 ;s                         Allocated to registers r5 r6 r7 
                                    944 ;__3276800033              Allocated to registers 
                                    945 ;s                         Allocated to registers r5 r6 r7 
                                    946 ;__1310720035              Allocated to registers 
                                    947 ;s                         Allocated to registers r5 r6 r7 
                                    948 ;sloc0                     Allocated to stack - _bp +1
                                    949 ;sloc1                     Allocated to stack - _bp +3
                                    950 ;sloc2                     Allocated to stack - _bp +5
                                    951 ;sloc3                     Allocated to stack - _bp +7
                                    952 ;sloc4                     Allocated to stack - _bp +9
                                    953 ;sloc5                     Allocated to stack - _bp +11
                                    954 ;sloc6                     Allocated to stack - _bp +13
                                    955 ;------------------------------------------------------------
                                    956 ;	life.c:209: void main(void) {
                                    957 ;	-----------------------------------------
                                    958 ;	 function main
                                    959 ;	-----------------------------------------
      00022C                        960 _main:
      00022C C0*00            [24]  961 	push	_bp
      00022E E5 81            [12]  962 	mov	a,sp
      000230 F5*00            [12]  963 	mov	_bp,a
      000232 24 0E            [12]  964 	add	a,#0x0e
      000234 F5 81            [12]  965 	mov	sp,a
                                    966 ;	life.c:210: IT0 = 1;
                                    967 ;	assignBit
      000236 D2 88            [12]  968 	setb	_IT0
                                    969 ;	life.c:211: IT1 = 1;
                                    970 ;	assignBit
      000238 D2 8A            [12]  971 	setb	_IT1
                                    972 ;	life.c:212: EX0 = 1;
                                    973 ;	assignBit
      00023A D2 A8            [12]  974 	setb	_EX0
                                    975 ;	life.c:213: EX1 = 1;
                                    976 ;	assignBit
      00023C D2 AA            [12]  977 	setb	_EX1
                                    978 ;	life.c:214: EA = 1;
                                    979 ;	assignBit
      00023E D2 AF            [12]  980 	setb	_EA
                                    981 ;	life.c:216: for (i0 = 0; !i0; ) {		
      000240 78r10            [12]  982 	mov	r0,#_i0
      000242 76 00            [12]  983 	mov	@r0,#0x00
      000244                        984 00247$:
                                    985 ;	life.c:217: printstr("\033[2J\033[mLIFE INIT\r\n");
      000244 7Dr1A            [12]  986 	mov	r5,#___str_4
      000246 7Es00            [12]  987 	mov	r6,#(___str_4 >> 8)
      000248 7F 80            [12]  988 	mov	r7,#0x80
                                    989 ;	life.c:52: return;
      00024A                        990 00213$:
                                    991 ;	life.c:50: for (; *s; s++) putchar(*s);
      00024A 8D 82            [24]  992 	mov	dpl,r5
      00024C 8E 83            [24]  993 	mov	dph,r6
      00024E 8F F0            [24]  994 	mov	b,r7
      000250 12r00r00         [24]  995 	lcall	__gptrget
      000253 FC               [12]  996 	mov	r4,a
      000254 60 10            [24]  997 	jz	00108$
      000256 7B 00            [12]  998 	mov	r3,#0x00
      000258 8C 82            [24]  999 	mov	dpl,r4
      00025A 8B 83            [24] 1000 	mov	dph,r3
      00025C 12r00r00         [24] 1001 	lcall	_putchar
      00025F 0D               [12] 1002 	inc	r5
                                   1003 ;	life.c:218: while (1) {
      000260 BD 00 E7         [24] 1004 	cjne	r5,#0x00,00213$
      000263 0E               [12] 1005 	inc	r6
      000264 80 E4            [24] 1006 	sjmp	00213$
      000266                       1007 00108$:
                                   1008 ;	life.c:219: c = toupper(getchar());
      000266 12r00r0A         [24] 1009 	lcall	_getchar
      000269 12r00r00         [24] 1010 	lcall	_toupper
      00026C AE 82            [24] 1011 	mov	r6,dpl
      00026E AF 83            [24] 1012 	mov	r7,dph
      000270 78r18            [12] 1013 	mov	r0,#_c
      000272 A6 06            [24] 1014 	mov	@r0,ar6
      000274 08               [12] 1015 	inc	r0
      000275 A6 07            [24] 1016 	mov	@r0,ar7
                                   1017 ;	life.c:220: if (i0 || (c == (int)'T')) goto terminate;
      000277 78r10            [12] 1018 	mov	r0,#_i0
      000279 E6               [12] 1019 	mov	a,@r0
      00027A 60 03            [24] 1020 	jz	00462$
      00027C 02r09rCD         [24] 1021 	ljmp	00133$
      00027F                       1022 00462$:
      00027F BE 54 06         [24] 1023 	cjne	r6,#0x54,00463$
      000282 BF 00 03         [24] 1024 	cjne	r7,#0x00,00463$
      000285 02r09rCD         [24] 1025 	ljmp	00133$
      000288                       1026 00463$:
                                   1027 ;	life.c:221: else if (c == (int)'L') break;
      000288 BE 4C DB         [24] 1028 	cjne	r6,#0x4c,00108$
      00028B BF 00 D8         [24] 1029 	cjne	r7,#0x00,00108$
                                   1030 ;	life.c:224: reload:
      00028E                       1031 00110$:
                                   1032 ;	life.c:121: memset(u, 0, sizeof (u));
      00028E E4               [12] 1033 	clr	a
      00028F C0 E0            [24] 1034 	push	acc
      000291 74 08            [12] 1035 	mov	a,#0x08
      000293 C0 E0            [24] 1036 	push	acc
      000295 E4               [12] 1037 	clr	a
      000296 C0 E0            [24] 1038 	push	acc
      000298 90r08r00         [24] 1039 	mov	dptr,#_u
      00029B 75 F0 00         [24] 1040 	mov	b,#0x00
      00029E 12r00r00         [24] 1041 	lcall	_memset
      0002A1 15 81            [12] 1042 	dec	sp
      0002A3 15 81            [12] 1043 	dec	sp
      0002A5 15 81            [12] 1044 	dec	sp
                                   1045 ;	life.c:122: memset(pu, 0, sizeof (pu));
      0002A7 E4               [12] 1046 	clr	a
      0002A8 C0 E0            [24] 1047 	push	acc
      0002AA 74 08            [12] 1048 	mov	a,#0x08
      0002AC C0 E0            [24] 1049 	push	acc
      0002AE E4               [12] 1050 	clr	a
      0002AF C0 E0            [24] 1051 	push	acc
      0002B1 90r00r00         [24] 1052 	mov	dptr,#_pu
      0002B4 75 F0 00         [24] 1053 	mov	b,#0x00
      0002B7 12r00r00         [24] 1054 	lcall	_memset
      0002BA 15 81            [12] 1055 	dec	sp
      0002BC 15 81            [12] 1056 	dec	sp
      0002BE 15 81            [12] 1057 	dec	sp
                                   1058 ;	life.c:128: j = 0;
      0002C0 78r16            [12] 1059 	mov	r0,#_j
      0002C2 E4               [12] 1060 	clr	a
      0002C3 F6               [12] 1061 	mov	@r0,a
      0002C4 08               [12] 1062 	inc	r0
      0002C5 F6               [12] 1063 	mov	@r0,a
                                   1064 ;	life.c:130: printstr("LOAD <");
      0002C6 7Dr0F            [12] 1065 	mov	r5,#___str_2
      0002C8 7Es00            [12] 1066 	mov	r6,#(___str_2 >> 8)
      0002CA 7F 80            [12] 1067 	mov	r7,#0x80
                                   1068 ;	life.c:52: return;
      0002CC                       1069 00216$:
                                   1070 ;	life.c:50: for (; *s; s++) putchar(*s);
      0002CC 8D 82            [24] 1071 	mov	dpl,r5
      0002CE 8E 83            [24] 1072 	mov	dph,r6
      0002D0 8F F0            [24] 1073 	mov	b,r7
      0002D2 12r00r00         [24] 1074 	lcall	__gptrget
      0002D5 FC               [12] 1075 	mov	r4,a
      0002D6 60 10            [24] 1076 	jz	00138$
      0002D8 7B 00            [12] 1077 	mov	r3,#0x00
      0002DA 8C 82            [24] 1078 	mov	dpl,r4
      0002DC 8B 83            [24] 1079 	mov	dph,r3
      0002DE 12r00r00         [24] 1080 	lcall	_putchar
      0002E1 0D               [12] 1081 	inc	r5
                                   1082 ;	life.c:130: printstr("LOAD <");
      0002E2 BD 00 E7         [24] 1083 	cjne	r5,#0x00,00216$
      0002E5 0E               [12] 1084 	inc	r6
      0002E6 80 E4            [24] 1085 	sjmp	00216$
      0002E8                       1086 00138$:
                                   1087 ;	life.c:132: for (y = 0; y < H; y++) {
      0002E8 78r14            [12] 1088 	mov	r0,#_y
      0002EA E4               [12] 1089 	clr	a
      0002EB F6               [12] 1090 	mov	@r0,a
      0002EC 08               [12] 1091 	inc	r0
      0002ED F6               [12] 1092 	mov	@r0,a
      0002EE                       1093 00219$:
                                   1094 ;	life.c:133: for (x = 0; x < W; x++) {
      0002EE 78r12            [12] 1095 	mov	r0,#_x
      0002F0 E4               [12] 1096 	clr	a
      0002F1 F6               [12] 1097 	mov	@r0,a
      0002F2 08               [12] 1098 	inc	r0
      0002F3 F6               [12] 1099 	mov	@r0,a
                                   1100 ;	life.c:134: while (1) {
      0002F4                       1101 00151$:
                                   1102 ;	life.c:135: c = toupper(getchar());
      0002F4 12r00r0A         [24] 1103 	lcall	_getchar
      0002F7 12r00r00         [24] 1104 	lcall	_toupper
      0002FA AE 82            [24] 1105 	mov	r6,dpl
      0002FC AF 83            [24] 1106 	mov	r7,dph
      0002FE 78r18            [12] 1107 	mov	r0,#_c
      000300 A6 06            [24] 1108 	mov	@r0,ar6
      000302 08               [12] 1109 	inc	r0
      000303 A6 07            [24] 1110 	mov	@r0,ar7
                                   1111 ;	life.c:136: if (c == (int)'0') {
      000305 BE 30 37         [24] 1112 	cjne	r6,#0x30,00149$
      000308 BF 00 34         [24] 1113 	cjne	r7,#0x00,00149$
                                   1114 ;	life.c:137: u[A2D(W, y, x)] = 0;
      00030B 78r14            [12] 1115 	mov	r0,#_y
      00030D 86 04            [24] 1116 	mov	ar4,@r0
      00030F 08               [12] 1117 	inc	r0
      000310 E6               [12] 1118 	mov	a,@r0
      000311 C4               [12] 1119 	swap	a
      000312 23               [12] 1120 	rl	a
      000313 54 E0            [12] 1121 	anl	a,#0xe0
      000315 CC               [12] 1122 	xch	a,r4
      000316 C4               [12] 1123 	swap	a
      000317 23               [12] 1124 	rl	a
      000318 CC               [12] 1125 	xch	a,r4
      000319 6C               [12] 1126 	xrl	a,r4
      00031A CC               [12] 1127 	xch	a,r4
      00031B 54 E0            [12] 1128 	anl	a,#0xe0
      00031D CC               [12] 1129 	xch	a,r4
      00031E 6C               [12] 1130 	xrl	a,r4
      00031F FD               [12] 1131 	mov	r5,a
      000320 78r12            [12] 1132 	mov	r0,#_x
      000322 E6               [12] 1133 	mov	a,@r0
      000323 2C               [12] 1134 	add	a,r4
      000324 FC               [12] 1135 	mov	r4,a
      000325 08               [12] 1136 	inc	r0
      000326 E6               [12] 1137 	mov	a,@r0
      000327 3D               [12] 1138 	addc	a,r5
      000328 FD               [12] 1139 	mov	r5,a
      000329 EC               [12] 1140 	mov	a,r4
      00032A 24r00            [12] 1141 	add	a,#_u
      00032C F5 82            [12] 1142 	mov	dpl,a
      00032E ED               [12] 1143 	mov	a,r5
      00032F 34s08            [12] 1144 	addc	a,#(_u >> 8)
      000331 F5 83            [12] 1145 	mov	dph,a
      000333 E4               [12] 1146 	clr	a
      000334 F0               [24] 1147 	movx	@dptr,a
                                   1148 ;	life.c:138: j++;
      000335 78r16            [12] 1149 	mov	r0,#_j
      000337 06               [12] 1150 	inc	@r0
      000338 B6 00 02         [24] 1151 	cjne	@r0,#0x00,00470$
      00033B 08               [12] 1152 	inc	r0
      00033C 06               [12] 1153 	inc	@r0
      00033D                       1154 00470$:
                                   1155 ;	life.c:139: break;
      00033D 80 4E            [24] 1156 	sjmp	00154$
      00033F                       1157 00149$:
                                   1158 ;	life.c:140: } else if (c == (int)'1') {
      00033F BE 31 38         [24] 1159 	cjne	r6,#0x31,00147$
      000342 BF 00 35         [24] 1160 	cjne	r7,#0x00,00147$
                                   1161 ;	life.c:141: u[A2D(W, y, x)] = 1;
      000345 78r14            [12] 1162 	mov	r0,#_y
      000347 86 04            [24] 1163 	mov	ar4,@r0
      000349 08               [12] 1164 	inc	r0
      00034A E6               [12] 1165 	mov	a,@r0
      00034B C4               [12] 1166 	swap	a
      00034C 23               [12] 1167 	rl	a
      00034D 54 E0            [12] 1168 	anl	a,#0xe0
      00034F CC               [12] 1169 	xch	a,r4
      000350 C4               [12] 1170 	swap	a
      000351 23               [12] 1171 	rl	a
      000352 CC               [12] 1172 	xch	a,r4
      000353 6C               [12] 1173 	xrl	a,r4
      000354 CC               [12] 1174 	xch	a,r4
      000355 54 E0            [12] 1175 	anl	a,#0xe0
      000357 CC               [12] 1176 	xch	a,r4
      000358 6C               [12] 1177 	xrl	a,r4
      000359 FD               [12] 1178 	mov	r5,a
      00035A 78r12            [12] 1179 	mov	r0,#_x
      00035C E6               [12] 1180 	mov	a,@r0
      00035D 2C               [12] 1181 	add	a,r4
      00035E FC               [12] 1182 	mov	r4,a
      00035F 08               [12] 1183 	inc	r0
      000360 E6               [12] 1184 	mov	a,@r0
      000361 3D               [12] 1185 	addc	a,r5
      000362 FD               [12] 1186 	mov	r5,a
      000363 EC               [12] 1187 	mov	a,r4
      000364 24r00            [12] 1188 	add	a,#_u
      000366 F5 82            [12] 1189 	mov	dpl,a
      000368 ED               [12] 1190 	mov	a,r5
      000369 34s08            [12] 1191 	addc	a,#(_u >> 8)
      00036B F5 83            [12] 1192 	mov	dph,a
      00036D 74 01            [12] 1193 	mov	a,#0x01
      00036F F0               [24] 1194 	movx	@dptr,a
                                   1195 ;	life.c:142: j++;
      000370 78r16            [12] 1196 	mov	r0,#_j
      000372 06               [12] 1197 	inc	@r0
      000373 B6 00 02         [24] 1198 	cjne	@r0,#0x00,00473$
      000376 08               [12] 1199 	inc	r0
      000377 06               [12] 1200 	inc	@r0
      000378                       1201 00473$:
                                   1202 ;	life.c:143: break;
      000378 80 13            [24] 1203 	sjmp	00154$
      00037A                       1204 00147$:
                                   1205 ;	life.c:144: } else if (c == (int)'S') goto br_inner;
      00037A BE 53 05         [24] 1206 	cjne	r6,#0x53,00474$
      00037D BF 00 02         [24] 1207 	cjne	r7,#0x00,00474$
      000380 80 24            [24] 1208 	sjmp	00220$
      000382                       1209 00474$:
                                   1210 ;	life.c:145: else if (c == (int)'#') goto out;
      000382 BE 23 05         [24] 1211 	cjne	r6,#0x23,00475$
      000385 BF 00 02         [24] 1212 	cjne	r7,#0x00,00475$
      000388 80 35            [24] 1213 	sjmp	00164$
      00038A                       1214 00475$:
      00038A 02r02rF4         [24] 1215 	ljmp	00151$
                                   1216 ;	life.c:149: break;
      00038D                       1217 00154$:
                                   1218 ;	life.c:133: for (x = 0; x < W; x++) {
      00038D 78r12            [12] 1219 	mov	r0,#_x
      00038F 06               [12] 1220 	inc	@r0
      000390 B6 00 02         [24] 1221 	cjne	@r0,#0x00,00476$
      000393 08               [12] 1222 	inc	r0
      000394 06               [12] 1223 	inc	@r0
      000395                       1224 00476$:
      000395 78r12            [12] 1225 	mov	r0,#_x
      000397 C3               [12] 1226 	clr	c
      000398 E6               [12] 1227 	mov	a,@r0
      000399 94 20            [12] 1228 	subb	a,#0x20
      00039B 08               [12] 1229 	inc	r0
      00039C E6               [12] 1230 	mov	a,@r0
      00039D 64 80            [12] 1231 	xrl	a,#0x80
      00039F 94 80            [12] 1232 	subb	a,#0x80
      0003A1 50 03            [24] 1233 	jnc	00477$
      0003A3 02r02rF4         [24] 1234 	ljmp	00151$
      0003A6                       1235 00477$:
      0003A6                       1236 00220$:
                                   1237 ;	life.c:132: for (y = 0; y < H; y++) {
      0003A6 78r14            [12] 1238 	mov	r0,#_y
      0003A8 06               [12] 1239 	inc	@r0
      0003A9 B6 00 02         [24] 1240 	cjne	@r0,#0x00,00478$
      0003AC 08               [12] 1241 	inc	r0
      0003AD 06               [12] 1242 	inc	@r0
      0003AE                       1243 00478$:
      0003AE 78r14            [12] 1244 	mov	r0,#_y
      0003B0 C3               [12] 1245 	clr	c
      0003B1 E6               [12] 1246 	mov	a,@r0
      0003B2 94 40            [12] 1247 	subb	a,#0x40
      0003B4 08               [12] 1248 	inc	r0
      0003B5 E6               [12] 1249 	mov	a,@r0
      0003B6 64 80            [12] 1250 	xrl	a,#0x80
      0003B8 94 80            [12] 1251 	subb	a,#0x80
      0003BA 50 03            [24] 1252 	jnc	00479$
      0003BC 02r02rEE         [24] 1253 	ljmp	00219$
      0003BF                       1254 00479$:
                                   1255 ;	life.c:153: out:
      0003BF                       1256 00164$:
                                   1257 ;	life.c:154: if (c != (int)'#')
      0003BF BE 23 05         [24] 1258 	cjne	r6,#0x23,00480$
      0003C2 BF 00 02         [24] 1259 	cjne	r7,#0x00,00480$
      0003C5 80 14            [24] 1260 	sjmp	00163$
      0003C7                       1261 00480$:
                                   1262 ;	life.c:155: while (1) {
      0003C7                       1263 00160$:
                                   1264 ;	life.c:156: c = getchar();
      0003C7 12r00r0A         [24] 1265 	lcall	_getchar
      0003CA AE 82            [24] 1266 	mov	r6,dpl
      0003CC AF 83            [24] 1267 	mov	r7,dph
      0003CE 78r18            [12] 1268 	mov	r0,#_c
      0003D0 A6 06            [24] 1269 	mov	@r0,ar6
      0003D2 08               [12] 1270 	inc	r0
      0003D3 A6 07            [24] 1271 	mov	@r0,ar7
                                   1272 ;	life.c:157: if (c == (int)'#') break;
      0003D5 BE 23 EF         [24] 1273 	cjne	r6,#0x23,00160$
      0003D8 BF 00 EC         [24] 1274 	cjne	r7,#0x00,00160$
      0003DB                       1275 00163$:
                                   1276 ;	life.c:159: print16x(j);
      0003DB 78r16            [12] 1277 	mov	r0,#_j
      0003DD 86 06            [24] 1278 	mov	ar6,@r0
      0003DF 08               [12] 1279 	inc	r0
      0003E0 86 07            [24] 1280 	mov	ar7,@r0
      0003E2 8E 04            [24] 1281 	mov	ar4,r6
                                   1282 ;	life.c:41: putchar(digits[(a >> 12) & 0xf]);
      0003E4 EF               [12] 1283 	mov	a,r7
      0003E5 FD               [12] 1284 	mov	r5,a
      0003E6 C4               [12] 1285 	swap	a
      0003E7 54 0F            [12] 1286 	anl	a,#0x0f
      0003E9 30 E3 02         [24] 1287 	jnb	acc.3,00483$
      0003EC 44 F0            [12] 1288 	orl	a,#0xf0
      0003EE                       1289 00483$:
      0003EE FE               [12] 1290 	mov	r6,a
      0003EF 33               [12] 1291 	rlc	a
      0003F0 95 E0            [12] 1292 	subb	a,acc
      0003F2 53 06 0F         [24] 1293 	anl	ar6,#0x0f
      0003F5 EE               [12] 1294 	mov	a,r6
      0003F6 24r00            [12] 1295 	add	a,#_digits
      0003F8 F9               [12] 1296 	mov	r1,a
      0003F9 87 07            [24] 1297 	mov	ar7,@r1
      0003FB 7E 00            [12] 1298 	mov	r6,#0x00
      0003FD 8F 82            [24] 1299 	mov	dpl,r7
      0003FF 8E 83            [24] 1300 	mov	dph,r6
      000401 12r00r00         [24] 1301 	lcall	_putchar
                                   1302 ;	life.c:42: putchar(digits[(a >> 8) & 0xf]);
      000404 8D 07            [24] 1303 	mov	ar7,r5
      000406 53 07 0F         [24] 1304 	anl	ar7,#0x0f
      000409 EF               [12] 1305 	mov	a,r7
      00040A 24r00            [12] 1306 	add	a,#_digits
      00040C F9               [12] 1307 	mov	r1,a
      00040D 87 07            [24] 1308 	mov	ar7,@r1
      00040F 7E 00            [12] 1309 	mov	r6,#0x00
      000411 8F 82            [24] 1310 	mov	dpl,r7
      000413 8E 83            [24] 1311 	mov	dph,r6
      000415 12r00r00         [24] 1312 	lcall	_putchar
                                   1313 ;	life.c:43: putchar(digits[(a >> 4) & 0xf]);
      000418 8C 06            [24] 1314 	mov	ar6,r4
      00041A ED               [12] 1315 	mov	a,r5
      00041B C4               [12] 1316 	swap	a
      00041C CE               [12] 1317 	xch	a,r6
      00041D C4               [12] 1318 	swap	a
      00041E 54 0F            [12] 1319 	anl	a,#0x0f
      000420 6E               [12] 1320 	xrl	a,r6
      000421 CE               [12] 1321 	xch	a,r6
      000422 54 0F            [12] 1322 	anl	a,#0x0f
      000424 CE               [12] 1323 	xch	a,r6
      000425 6E               [12] 1324 	xrl	a,r6
      000426 CE               [12] 1325 	xch	a,r6
      000427 30 E3 02         [24] 1326 	jnb	acc.3,00484$
      00042A 44 F0            [12] 1327 	orl	a,#0xf0
      00042C                       1328 00484$:
      00042C 53 06 0F         [24] 1329 	anl	ar6,#0x0f
      00042F EE               [12] 1330 	mov	a,r6
      000430 24r00            [12] 1331 	add	a,#_digits
      000432 F9               [12] 1332 	mov	r1,a
      000433 87 07            [24] 1333 	mov	ar7,@r1
      000435 7E 00            [12] 1334 	mov	r6,#0x00
      000437 8F 82            [24] 1335 	mov	dpl,r7
      000439 8E 83            [24] 1336 	mov	dph,r6
      00043B 12r00r00         [24] 1337 	lcall	_putchar
                                   1338 ;	life.c:44: putchar(digits[a & 0xf]);
      00043E 53 04 0F         [24] 1339 	anl	ar4,#0x0f
      000441 EC               [12] 1340 	mov	a,r4
      000442 24r00            [12] 1341 	add	a,#_digits
      000444 F9               [12] 1342 	mov	r1,a
      000445 87 07            [24] 1343 	mov	ar7,@r1
      000447 7E 00            [12] 1344 	mov	r6,#0x00
      000449 8F 82            [24] 1345 	mov	dpl,r7
      00044B 8E 83            [24] 1346 	mov	dph,r6
      00044D 12r00r00         [24] 1347 	lcall	_putchar
                                   1348 ;	life.c:160: printstr(">\r\n");
      000450 7Dr16            [12] 1349 	mov	r5,#___str_3
      000452 7Es00            [12] 1350 	mov	r6,#(___str_3 >> 8)
      000454 7F 80            [12] 1351 	mov	r7,#0x80
                                   1352 ;	life.c:52: return;
      000456                       1353 00222$:
                                   1354 ;	life.c:50: for (; *s; s++) putchar(*s);
      000456 8D 82            [24] 1355 	mov	dpl,r5
      000458 8E 83            [24] 1356 	mov	dph,r6
      00045A 8F F0            [24] 1357 	mov	b,r7
      00045C 12r00r00         [24] 1358 	lcall	__gptrget
      00045F FC               [12] 1359 	mov	r4,a
      000460 60 10            [24] 1360 	jz	00167$
      000462 7B 00            [12] 1361 	mov	r3,#0x00
      000464 8C 82            [24] 1362 	mov	dpl,r4
      000466 8B 83            [24] 1363 	mov	dph,r3
      000468 12r00r00         [24] 1364 	lcall	_putchar
      00046B 0D               [12] 1365 	inc	r5
                                   1366 ;	life.c:160: printstr(">\r\n");
      00046C BD 00 E7         [24] 1367 	cjne	r5,#0x00,00222$
      00046F 0E               [12] 1368 	inc	r6
      000470 80 E4            [24] 1369 	sjmp	00222$
      000472                       1370 00167$:
                                   1371 ;	life.c:227: show(0);
      000472 75 82 00         [24] 1372 	mov	dpl,#0x00
      000475 12r00r2F         [24] 1373 	lcall	_show
                                   1374 ;	life.c:229: printstr("READY\r\n");
      000478 7Dr2D            [12] 1375 	mov	r5,#___str_5
      00047A 7Es00            [12] 1376 	mov	r6,#(___str_5 >> 8)
      00047C 7F 80            [12] 1377 	mov	r7,#0x80
                                   1378 ;	life.c:52: return;
      00047E                       1379 00225$:
                                   1380 ;	life.c:50: for (; *s; s++) putchar(*s);
      00047E 8D 82            [24] 1381 	mov	dpl,r5
      000480 8E 83            [24] 1382 	mov	dph,r6
      000482 8F F0            [24] 1383 	mov	b,r7
      000484 12r00r00         [24] 1384 	lcall	__gptrget
      000487 FC               [12] 1385 	mov	r4,a
      000488 60 10            [24] 1386 	jz	00121$
      00048A 7B 00            [12] 1387 	mov	r3,#0x00
      00048C 8C 82            [24] 1388 	mov	dpl,r4
      00048E 8B 83            [24] 1389 	mov	dph,r3
      000490 12r00r00         [24] 1390 	lcall	_putchar
      000493 0D               [12] 1391 	inc	r5
                                   1392 ;	life.c:230: while (1) {
      000494 BD 00 E7         [24] 1393 	cjne	r5,#0x00,00225$
      000497 0E               [12] 1394 	inc	r6
      000498 80 E4            [24] 1395 	sjmp	00225$
      00049A                       1396 00121$:
                                   1397 ;	life.c:231: c = toupper(getchar());
      00049A 12r00r0A         [24] 1398 	lcall	_getchar
      00049D 12r00r00         [24] 1399 	lcall	_toupper
      0004A0 AE 82            [24] 1400 	mov	r6,dpl
      0004A2 AF 83            [24] 1401 	mov	r7,dph
      0004A4 78r18            [12] 1402 	mov	r0,#_c
      0004A6 A6 06            [24] 1403 	mov	@r0,ar6
      0004A8 08               [12] 1404 	inc	r0
      0004A9 A6 07            [24] 1405 	mov	@r0,ar7
                                   1406 ;	life.c:232: if (i0 || (c == (int)'T')) goto terminate;
      0004AB 78r10            [12] 1407 	mov	r0,#_i0
      0004AD E6               [12] 1408 	mov	a,@r0
      0004AE 60 03            [24] 1409 	jz	00489$
      0004B0 02r09rCD         [24] 1410 	ljmp	00133$
      0004B3                       1411 00489$:
      0004B3 BE 54 06         [24] 1412 	cjne	r6,#0x54,00490$
      0004B6 BF 00 03         [24] 1413 	cjne	r7,#0x00,00490$
      0004B9 02r09rCD         [24] 1414 	ljmp	00133$
      0004BC                       1415 00490$:
                                   1416 ;	life.c:233: else if (c == (int)'L') goto reload;
      0004BC BE 4C 06         [24] 1417 	cjne	r6,#0x4c,00491$
      0004BF BF 00 03         [24] 1418 	cjne	r7,#0x00,00491$
      0004C2 02r02r8E         [24] 1419 	ljmp	00110$
      0004C5                       1420 00491$:
                                   1421 ;	life.c:234: else if (c == (int)'S') break;
      0004C5 BE 53 D2         [24] 1422 	cjne	r6,#0x53,00121$
      0004C8 BF 00 CF         [24] 1423 	cjne	r7,#0x00,00121$
                                   1424 ;	life.c:79: generation[0] = 0;
      0004CB 78r22            [12] 1425 	mov	r0,#_generation
      0004CD 76 00            [12] 1426 	mov	@r0,#0x00
      0004CF 08               [12] 1427 	inc	r0
      0004D0 76 00            [12] 1428 	mov	@r0,#0x00
                                   1429 ;	life.c:80: generation[1] = 0;
      0004D2 78r24            [12] 1430 	mov	r0,#(_generation + 0x0002)
      0004D4 76 00            [12] 1431 	mov	@r0,#0x00
      0004D6 08               [12] 1432 	inc	r0
      0004D7 76 00            [12] 1433 	mov	@r0,#0x00
                                   1434 ;	life.c:239: for (i1 = 0; !i0 && !i1; ) {
      0004D9 78r11            [12] 1435 	mov	r0,#_i1
      0004DB 76 00            [12] 1436 	mov	@r0,#0x00
      0004DD                       1437 00242$:
      0004DD 78r10            [12] 1438 	mov	r0,#_i0
      0004DF E6               [12] 1439 	mov	a,@r0
      0004E0 60 03            [24] 1440 	jz	00494$
      0004E2 02r09r9B         [24] 1441 	ljmp	00129$
      0004E5                       1442 00494$:
      0004E5 78r11            [12] 1443 	mov	r0,#_i1
      0004E7 E6               [12] 1444 	mov	a,@r0
      0004E8 60 03            [24] 1445 	jz	00495$
      0004EA 02r09r9B         [24] 1446 	ljmp	00129$
      0004ED                       1447 00495$:
                                   1448 ;	life.c:240: show(1);
      0004ED 75 82 01         [24] 1449 	mov	dpl,#0x01
      0004F0 12r00r2F         [24] 1450 	lcall	_show
                                   1451 ;	life.c:168: fixed = 0;
      0004F3 78r1C            [12] 1452 	mov	r0,#_fixed
      0004F5 76 00            [12] 1453 	mov	@r0,#0x00
                                   1454 ;	life.c:169: cycle2 = 0;
      0004F7 78r1D            [12] 1455 	mov	r0,#_cycle2
      0004F9 76 00            [12] 1456 	mov	@r0,#0x00
                                   1457 ;	life.c:170: bstep = 0;
      0004FB 78r1A            [12] 1458 	mov	r0,#_bstep
      0004FD 76 00            [12] 1459 	mov	@r0,#0x00
                                   1460 ;	life.c:172: for (y = 0; y < H; y++) {
      0004FF 78r14            [12] 1461 	mov	r0,#_y
      000501 E4               [12] 1462 	clr	a
      000502 F6               [12] 1463 	mov	@r0,a
      000503 08               [12] 1464 	inc	r0
      000504 F6               [12] 1465 	mov	@r0,a
      000505                       1466 00229$:
                                   1467 ;	life.c:173: putchar(busy[bstep]); putchar('\r');
      000505 78r1A            [12] 1468 	mov	r0,#_bstep
      000507 E6               [12] 1469 	mov	a,@r0
      000508 24r26            [12] 1470 	add	a,#_busy
      00050A F9               [12] 1471 	mov	r1,a
      00050B 87 07            [24] 1472 	mov	ar7,@r1
      00050D 7E 00            [12] 1473 	mov	r6,#0x00
      00050F 8F 82            [24] 1474 	mov	dpl,r7
      000511 8E 83            [24] 1475 	mov	dph,r6
      000513 12r00r00         [24] 1476 	lcall	_putchar
      000516 90 00 0D         [24] 1477 	mov	dptr,#0x000d
      000519 12r00r00         [24] 1478 	lcall	_putchar
                                   1479 ;	life.c:174: bstep = (bstep + 1) & 3;
      00051C 78r1A            [12] 1480 	mov	r0,#_bstep
      00051E 86 07            [24] 1481 	mov	ar7,@r0
      000520 0F               [12] 1482 	inc	r7
      000521 78r1A            [12] 1483 	mov	r0,#_bstep
      000523 74 03            [12] 1484 	mov	a,#0x03
      000525 5F               [12] 1485 	anl	a,r7
      000526 F6               [12] 1486 	mov	@r0,a
                                   1487 ;	life.c:175: for (x = 0; x < W; x++) {
      000527 78r12            [12] 1488 	mov	r0,#_x
      000529 E4               [12] 1489 	clr	a
      00052A F6               [12] 1490 	mov	@r0,a
      00052B 08               [12] 1491 	inc	r0
      00052C F6               [12] 1492 	mov	@r0,a
      00052D                       1493 00227$:
                                   1494 ;	life.c:176: n = -u[A2D(W, y, x)];
      00052D 78r14            [12] 1495 	mov	r0,#_y
      00052F E5*00            [12] 1496 	mov	a,_bp
      000531 24 03            [12] 1497 	add	a,#0x03
      000533 F9               [12] 1498 	mov	r1,a
      000534 E6               [12] 1499 	mov	a,@r0
      000535 F7               [12] 1500 	mov	@r1,a
      000536 08               [12] 1501 	inc	r0
      000537 E6               [12] 1502 	mov	a,@r0
      000538 C4               [12] 1503 	swap	a
      000539 23               [12] 1504 	rl	a
      00053A 54 E0            [12] 1505 	anl	a,#0xe0
      00053C C7               [12] 1506 	xch	a,@r1
      00053D C4               [12] 1507 	swap	a
      00053E 23               [12] 1508 	rl	a
      00053F C7               [12] 1509 	xch	a,@r1
      000540 67               [12] 1510 	xrl	a,@r1
      000541 C7               [12] 1511 	xch	a,@r1
      000542 54 E0            [12] 1512 	anl	a,#0xe0
      000544 C7               [12] 1513 	xch	a,@r1
      000545 67               [12] 1514 	xrl	a,@r1
      000546 09               [12] 1515 	inc	r1
      000547 F7               [12] 1516 	mov	@r1,a
      000548 E5*00            [12] 1517 	mov	a,_bp
      00054A 24 03            [12] 1518 	add	a,#0x03
      00054C F8               [12] 1519 	mov	r0,a
      00054D 79r12            [12] 1520 	mov	r1,#_x
      00054F E7               [12] 1521 	mov	a,@r1
      000550 26               [12] 1522 	add	a,@r0
      000551 C0 E0            [24] 1523 	push	acc
      000553 09               [12] 1524 	inc	r1
      000554 E7               [12] 1525 	mov	a,@r1
      000555 08               [12] 1526 	inc	r0
      000556 36               [12] 1527 	addc	a,@r0
      000557 C0 E0            [24] 1528 	push	acc
      000559 A8*00            [24] 1529 	mov	r0,_bp
      00055B 08               [12] 1530 	inc	r0
      00055C 08               [12] 1531 	inc	r0
      00055D D0 E0            [24] 1532 	pop	acc
      00055F F6               [12] 1533 	mov	@r0,a
      000560 18               [12] 1534 	dec	r0
      000561 D0 E0            [24] 1535 	pop	acc
      000563 F6               [12] 1536 	mov	@r0,a
      000564 A8*00            [24] 1537 	mov	r0,_bp
      000566 08               [12] 1538 	inc	r0
      000567 E6               [12] 1539 	mov	a,@r0
      000568 24r00            [12] 1540 	add	a,#_u
      00056A F5 82            [12] 1541 	mov	dpl,a
      00056C 08               [12] 1542 	inc	r0
      00056D E6               [12] 1543 	mov	a,@r0
      00056E 34s08            [12] 1544 	addc	a,#(_u >> 8)
      000570 F5 83            [12] 1545 	mov	dph,a
      000572 E0               [24] 1546 	movx	a,@dptr
      000573 FB               [12] 1547 	mov	r3,a
      000574 C3               [12] 1548 	clr	c
      000575 E4               [12] 1549 	clr	a
      000576 9B               [12] 1550 	subb	a,r3
      000577 FB               [12] 1551 	mov	r3,a
                                   1552 ;	life.c:183: UPDN(-1, -1);
      000578 78r14            [12] 1553 	mov	r0,#_y
      00057A 74 FF            [12] 1554 	mov	a,#0xff
      00057C 26               [12] 1555 	add	a,@r0
      00057D FA               [12] 1556 	mov	r2,a
      00057E 74 FF            [12] 1557 	mov	a,#0xff
      000580 08               [12] 1558 	inc	r0
      000581 36               [12] 1559 	addc	a,@r0
      000582 FD               [12] 1560 	mov	r5,a
      000583 74 40            [12] 1561 	mov	a,#0x40
      000585 2A               [12] 1562 	add	a,r2
      000586 FA               [12] 1563 	mov	r2,a
      000587 E4               [12] 1564 	clr	a
      000588 3D               [12] 1565 	addc	a,r5
      000589 FD               [12] 1566 	mov	r5,a
      00058A C0 03            [24] 1567 	push	ar3
      00058C 74 40            [12] 1568 	mov	a,#0x40
      00058E C0 E0            [24] 1569 	push	acc
      000590 E4               [12] 1570 	clr	a
      000591 C0 E0            [24] 1571 	push	acc
      000593 8A 82            [24] 1572 	mov	dpl,r2
      000595 8D 83            [24] 1573 	mov	dph,r5
      000597 12r00r00         [24] 1574 	lcall	__modsint
      00059A AC 82            [24] 1575 	mov	r4,dpl
      00059C AD 83            [24] 1576 	mov	r5,dph
      00059E 15 81            [12] 1577 	dec	sp
      0005A0 15 81            [12] 1578 	dec	sp
      0005A2 D0 03            [24] 1579 	pop	ar3
      0005A4 ED               [12] 1580 	mov	a,r5
      0005A5 C4               [12] 1581 	swap	a
      0005A6 23               [12] 1582 	rl	a
      0005A7 54 E0            [12] 1583 	anl	a,#0xe0
      0005A9 CC               [12] 1584 	xch	a,r4
      0005AA C4               [12] 1585 	swap	a
      0005AB 23               [12] 1586 	rl	a
      0005AC CC               [12] 1587 	xch	a,r4
      0005AD 6C               [12] 1588 	xrl	a,r4
      0005AE CC               [12] 1589 	xch	a,r4
      0005AF 54 E0            [12] 1590 	anl	a,#0xe0
      0005B1 CC               [12] 1591 	xch	a,r4
      0005B2 6C               [12] 1592 	xrl	a,r4
      0005B3 FD               [12] 1593 	mov	r5,a
      0005B4 78r12            [12] 1594 	mov	r0,#_x
      0005B6 74 FF            [12] 1595 	mov	a,#0xff
      0005B8 26               [12] 1596 	add	a,@r0
      0005B9 FA               [12] 1597 	mov	r2,a
      0005BA 74 FF            [12] 1598 	mov	a,#0xff
      0005BC 08               [12] 1599 	inc	r0
      0005BD 36               [12] 1600 	addc	a,@r0
      0005BE FF               [12] 1601 	mov	r7,a
      0005BF 74 20            [12] 1602 	mov	a,#0x20
      0005C1 2A               [12] 1603 	add	a,r2
      0005C2 FA               [12] 1604 	mov	r2,a
      0005C3 E4               [12] 1605 	clr	a
      0005C4 3F               [12] 1606 	addc	a,r7
      0005C5 FF               [12] 1607 	mov	r7,a
      0005C6 C0 05            [24] 1608 	push	ar5
      0005C8 C0 04            [24] 1609 	push	ar4
      0005CA C0 03            [24] 1610 	push	ar3
      0005CC 74 20            [12] 1611 	mov	a,#0x20
      0005CE C0 E0            [24] 1612 	push	acc
      0005D0 E4               [12] 1613 	clr	a
      0005D1 C0 E0            [24] 1614 	push	acc
      0005D3 8A 82            [24] 1615 	mov	dpl,r2
      0005D5 8F 83            [24] 1616 	mov	dph,r7
      0005D7 12r00r00         [24] 1617 	lcall	__modsint
      0005DA C8               [12] 1618 	xch	a,r0
      0005DB E5*00            [12] 1619 	mov	a,_bp
      0005DD 24 05            [12] 1620 	add	a,#0x05
      0005DF C8               [12] 1621 	xch	a,r0
      0005E0 A6 82            [24] 1622 	mov	@r0,dpl
      0005E2 08               [12] 1623 	inc	r0
      0005E3 A6 83            [24] 1624 	mov	@r0,dph
      0005E5 15 81            [12] 1625 	dec	sp
      0005E7 15 81            [12] 1626 	dec	sp
      0005E9 D0 03            [24] 1627 	pop	ar3
      0005EB D0 04            [24] 1628 	pop	ar4
      0005ED D0 05            [24] 1629 	pop	ar5
      0005EF E5*00            [12] 1630 	mov	a,_bp
      0005F1 24 05            [12] 1631 	add	a,#0x05
      0005F3 F8               [12] 1632 	mov	r0,a
      0005F4 E6               [12] 1633 	mov	a,@r0
      0005F5 2C               [12] 1634 	add	a,r4
      0005F6 FA               [12] 1635 	mov	r2,a
      0005F7 08               [12] 1636 	inc	r0
      0005F8 E6               [12] 1637 	mov	a,@r0
      0005F9 3D               [12] 1638 	addc	a,r5
      0005FA FF               [12] 1639 	mov	r7,a
      0005FB EA               [12] 1640 	mov	a,r2
      0005FC 24r00            [12] 1641 	add	a,#_u
      0005FE F5 82            [12] 1642 	mov	dpl,a
      000600 EF               [12] 1643 	mov	a,r7
      000601 34s08            [12] 1644 	addc	a,#(_u >> 8)
      000603 F5 83            [12] 1645 	mov	dph,a
      000605 E0               [24] 1646 	movx	a,@dptr
      000606 2B               [12] 1647 	add	a,r3
      000607 FB               [12] 1648 	mov	r3,a
                                   1649 ;	life.c:184: UPDN(-1, 0);
      000608 78r12            [12] 1650 	mov	r0,#_x
      00060A E5*00            [12] 1651 	mov	a,_bp
      00060C 24 07            [12] 1652 	add	a,#0x07
      00060E F9               [12] 1653 	mov	r1,a
      00060F E6               [12] 1654 	mov	a,@r0
      000610 F7               [12] 1655 	mov	@r1,a
      000611 08               [12] 1656 	inc	r0
      000612 09               [12] 1657 	inc	r1
      000613 E6               [12] 1658 	mov	a,@r0
      000614 F7               [12] 1659 	mov	@r1,a
      000615 E5*00            [12] 1660 	mov	a,_bp
      000617 24 07            [12] 1661 	add	a,#0x07
      000619 F8               [12] 1662 	mov	r0,a
      00061A 74 20            [12] 1663 	mov	a,#0x20
      00061C 26               [12] 1664 	add	a,@r0
      00061D FA               [12] 1665 	mov	r2,a
      00061E E4               [12] 1666 	clr	a
      00061F 08               [12] 1667 	inc	r0
      000620 36               [12] 1668 	addc	a,@r0
      000621 FF               [12] 1669 	mov	r7,a
      000622 C0 05            [24] 1670 	push	ar5
      000624 C0 04            [24] 1671 	push	ar4
      000626 C0 03            [24] 1672 	push	ar3
      000628 74 20            [12] 1673 	mov	a,#0x20
      00062A C0 E0            [24] 1674 	push	acc
      00062C E4               [12] 1675 	clr	a
      00062D C0 E0            [24] 1676 	push	acc
      00062F 8A 82            [24] 1677 	mov	dpl,r2
      000631 8F 83            [24] 1678 	mov	dph,r7
      000633 12r00r00         [24] 1679 	lcall	__modsint
      000636 C8               [12] 1680 	xch	a,r0
      000637 E5*00            [12] 1681 	mov	a,_bp
      000639 24 09            [12] 1682 	add	a,#0x09
      00063B C8               [12] 1683 	xch	a,r0
      00063C A6 82            [24] 1684 	mov	@r0,dpl
      00063E 08               [12] 1685 	inc	r0
      00063F A6 83            [24] 1686 	mov	@r0,dph
      000641 15 81            [12] 1687 	dec	sp
      000643 15 81            [12] 1688 	dec	sp
      000645 D0 03            [24] 1689 	pop	ar3
      000647 D0 04            [24] 1690 	pop	ar4
      000649 D0 05            [24] 1691 	pop	ar5
      00064B E5*00            [12] 1692 	mov	a,_bp
      00064D 24 09            [12] 1693 	add	a,#0x09
      00064F F8               [12] 1694 	mov	r0,a
      000650 E6               [12] 1695 	mov	a,@r0
      000651 2C               [12] 1696 	add	a,r4
      000652 FA               [12] 1697 	mov	r2,a
      000653 08               [12] 1698 	inc	r0
      000654 E6               [12] 1699 	mov	a,@r0
      000655 3D               [12] 1700 	addc	a,r5
      000656 FF               [12] 1701 	mov	r7,a
      000657 EA               [12] 1702 	mov	a,r2
      000658 24r00            [12] 1703 	add	a,#_u
      00065A F5 82            [12] 1704 	mov	dpl,a
      00065C EF               [12] 1705 	mov	a,r7
      00065D 34s08            [12] 1706 	addc	a,#(_u >> 8)
      00065F F5 83            [12] 1707 	mov	dph,a
      000661 E0               [24] 1708 	movx	a,@dptr
      000662 2B               [12] 1709 	add	a,r3
      000663 FB               [12] 1710 	mov	r3,a
                                   1711 ;	life.c:185: UPDN(-1, 1);
      000664 E5*00            [12] 1712 	mov	a,_bp
      000666 24 07            [12] 1713 	add	a,#0x07
      000668 F8               [12] 1714 	mov	r0,a
      000669 74 21            [12] 1715 	mov	a,#0x21
      00066B 26               [12] 1716 	add	a,@r0
      00066C FE               [12] 1717 	mov	r6,a
      00066D E4               [12] 1718 	clr	a
      00066E 08               [12] 1719 	inc	r0
      00066F 36               [12] 1720 	addc	a,@r0
      000670 FF               [12] 1721 	mov	r7,a
      000671 C0 05            [24] 1722 	push	ar5
      000673 C0 04            [24] 1723 	push	ar4
      000675 C0 03            [24] 1724 	push	ar3
      000677 74 20            [12] 1725 	mov	a,#0x20
      000679 C0 E0            [24] 1726 	push	acc
      00067B E4               [12] 1727 	clr	a
      00067C C0 E0            [24] 1728 	push	acc
      00067E 8E 82            [24] 1729 	mov	dpl,r6
      000680 8F 83            [24] 1730 	mov	dph,r7
      000682 12r00r00         [24] 1731 	lcall	__modsint
      000685 AE 82            [24] 1732 	mov	r6,dpl
      000687 AF 83            [24] 1733 	mov	r7,dph
      000689 15 81            [12] 1734 	dec	sp
      00068B 15 81            [12] 1735 	dec	sp
      00068D D0 03            [24] 1736 	pop	ar3
      00068F D0 04            [24] 1737 	pop	ar4
      000691 D0 05            [24] 1738 	pop	ar5
      000693 EE               [12] 1739 	mov	a,r6
      000694 2C               [12] 1740 	add	a,r4
      000695 FC               [12] 1741 	mov	r4,a
      000696 EF               [12] 1742 	mov	a,r7
      000697 3D               [12] 1743 	addc	a,r5
      000698 FD               [12] 1744 	mov	r5,a
      000699 EC               [12] 1745 	mov	a,r4
      00069A 24r00            [12] 1746 	add	a,#_u
      00069C F5 82            [12] 1747 	mov	dpl,a
      00069E ED               [12] 1748 	mov	a,r5
      00069F 34s08            [12] 1749 	addc	a,#(_u >> 8)
      0006A1 F5 83            [12] 1750 	mov	dph,a
      0006A3 E0               [24] 1751 	movx	a,@dptr
      0006A4 2B               [12] 1752 	add	a,r3
      0006A5 FB               [12] 1753 	mov	r3,a
                                   1754 ;	life.c:186: UPDN(0, -1);
      0006A6 78r14            [12] 1755 	mov	r0,#_y
      0006A8 E5*00            [12] 1756 	mov	a,_bp
      0006AA 24 0B            [12] 1757 	add	a,#0x0b
      0006AC F9               [12] 1758 	mov	r1,a
      0006AD E6               [12] 1759 	mov	a,@r0
      0006AE F7               [12] 1760 	mov	@r1,a
      0006AF 08               [12] 1761 	inc	r0
      0006B0 09               [12] 1762 	inc	r1
      0006B1 E6               [12] 1763 	mov	a,@r0
      0006B2 F7               [12] 1764 	mov	@r1,a
      0006B3 E5*00            [12] 1765 	mov	a,_bp
      0006B5 24 0B            [12] 1766 	add	a,#0x0b
      0006B7 F8               [12] 1767 	mov	r0,a
      0006B8 74 40            [12] 1768 	mov	a,#0x40
      0006BA 26               [12] 1769 	add	a,@r0
      0006BB FA               [12] 1770 	mov	r2,a
      0006BC E4               [12] 1771 	clr	a
      0006BD 08               [12] 1772 	inc	r0
      0006BE 36               [12] 1773 	addc	a,@r0
      0006BF FD               [12] 1774 	mov	r5,a
      0006C0 C0 07            [24] 1775 	push	ar7
      0006C2 C0 06            [24] 1776 	push	ar6
      0006C4 C0 03            [24] 1777 	push	ar3
      0006C6 74 40            [12] 1778 	mov	a,#0x40
      0006C8 C0 E0            [24] 1779 	push	acc
      0006CA E4               [12] 1780 	clr	a
      0006CB C0 E0            [24] 1781 	push	acc
      0006CD 8A 82            [24] 1782 	mov	dpl,r2
      0006CF 8D 83            [24] 1783 	mov	dph,r5
      0006D1 12r00r00         [24] 1784 	lcall	__modsint
      0006D4 AC 82            [24] 1785 	mov	r4,dpl
      0006D6 AD 83            [24] 1786 	mov	r5,dph
      0006D8 15 81            [12] 1787 	dec	sp
      0006DA 15 81            [12] 1788 	dec	sp
      0006DC D0 03            [24] 1789 	pop	ar3
      0006DE D0 06            [24] 1790 	pop	ar6
      0006E0 D0 07            [24] 1791 	pop	ar7
      0006E2 E5*00            [12] 1792 	mov	a,_bp
      0006E4 24 0D            [12] 1793 	add	a,#0x0d
      0006E6 F8               [12] 1794 	mov	r0,a
      0006E7 A6 04            [24] 1795 	mov	@r0,ar4
      0006E9 ED               [12] 1796 	mov	a,r5
      0006EA C4               [12] 1797 	swap	a
      0006EB 23               [12] 1798 	rl	a
      0006EC 54 E0            [12] 1799 	anl	a,#0xe0
      0006EE C6               [12] 1800 	xch	a,@r0
      0006EF C4               [12] 1801 	swap	a
      0006F0 23               [12] 1802 	rl	a
      0006F1 C6               [12] 1803 	xch	a,@r0
      0006F2 66               [12] 1804 	xrl	a,@r0
      0006F3 C6               [12] 1805 	xch	a,@r0
      0006F4 54 E0            [12] 1806 	anl	a,#0xe0
      0006F6 C6               [12] 1807 	xch	a,@r0
      0006F7 66               [12] 1808 	xrl	a,@r0
      0006F8 08               [12] 1809 	inc	r0
      0006F9 F6               [12] 1810 	mov	@r0,a
      0006FA E5*00            [12] 1811 	mov	a,_bp
      0006FC 24 0D            [12] 1812 	add	a,#0x0d
      0006FE F8               [12] 1813 	mov	r0,a
      0006FF E5*00            [12] 1814 	mov	a,_bp
      000701 24 05            [12] 1815 	add	a,#0x05
      000703 F9               [12] 1816 	mov	r1,a
      000704 E7               [12] 1817 	mov	a,@r1
      000705 26               [12] 1818 	add	a,@r0
      000706 FA               [12] 1819 	mov	r2,a
      000707 09               [12] 1820 	inc	r1
      000708 E7               [12] 1821 	mov	a,@r1
      000709 08               [12] 1822 	inc	r0
      00070A 36               [12] 1823 	addc	a,@r0
      00070B FD               [12] 1824 	mov	r5,a
      00070C EA               [12] 1825 	mov	a,r2
      00070D 24r00            [12] 1826 	add	a,#_u
      00070F F5 82            [12] 1827 	mov	dpl,a
      000711 ED               [12] 1828 	mov	a,r5
      000712 34s08            [12] 1829 	addc	a,#(_u >> 8)
      000714 F5 83            [12] 1830 	mov	dph,a
      000716 E0               [24] 1831 	movx	a,@dptr
      000717 2B               [12] 1832 	add	a,r3
      000718 FB               [12] 1833 	mov	r3,a
                                   1834 ;	life.c:187: UPDN(0, 0);
      000719 E5*00            [12] 1835 	mov	a,_bp
      00071B 24 0D            [12] 1836 	add	a,#0x0d
      00071D F8               [12] 1837 	mov	r0,a
      00071E E5*00            [12] 1838 	mov	a,_bp
      000720 24 09            [12] 1839 	add	a,#0x09
      000722 F9               [12] 1840 	mov	r1,a
      000723 E7               [12] 1841 	mov	a,@r1
      000724 26               [12] 1842 	add	a,@r0
      000725 FC               [12] 1843 	mov	r4,a
      000726 09               [12] 1844 	inc	r1
      000727 E7               [12] 1845 	mov	a,@r1
      000728 08               [12] 1846 	inc	r0
      000729 36               [12] 1847 	addc	a,@r0
      00072A FD               [12] 1848 	mov	r5,a
      00072B EC               [12] 1849 	mov	a,r4
      00072C 24r00            [12] 1850 	add	a,#_u
      00072E F5 82            [12] 1851 	mov	dpl,a
      000730 ED               [12] 1852 	mov	a,r5
      000731 34s08            [12] 1853 	addc	a,#(_u >> 8)
      000733 F5 83            [12] 1854 	mov	dph,a
      000735 E0               [24] 1855 	movx	a,@dptr
      000736 2B               [12] 1856 	add	a,r3
      000737 FB               [12] 1857 	mov	r3,a
                                   1858 ;	life.c:188: UPDN(0, 1);
      000738 E5*00            [12] 1859 	mov	a,_bp
      00073A 24 0D            [12] 1860 	add	a,#0x0d
      00073C F8               [12] 1861 	mov	r0,a
      00073D EE               [12] 1862 	mov	a,r6
      00073E 26               [12] 1863 	add	a,@r0
      00073F FC               [12] 1864 	mov	r4,a
      000740 EF               [12] 1865 	mov	a,r7
      000741 08               [12] 1866 	inc	r0
      000742 36               [12] 1867 	addc	a,@r0
      000743 FD               [12] 1868 	mov	r5,a
      000744 EC               [12] 1869 	mov	a,r4
      000745 24r00            [12] 1870 	add	a,#_u
      000747 F5 82            [12] 1871 	mov	dpl,a
      000749 ED               [12] 1872 	mov	a,r5
      00074A 34s08            [12] 1873 	addc	a,#(_u >> 8)
      00074C F5 83            [12] 1874 	mov	dph,a
      00074E E0               [24] 1875 	movx	a,@dptr
      00074F 2B               [12] 1876 	add	a,r3
      000750 FB               [12] 1877 	mov	r3,a
                                   1878 ;	life.c:189: UPDN(1, -1);
      000751 E5*00            [12] 1879 	mov	a,_bp
      000753 24 0B            [12] 1880 	add	a,#0x0b
      000755 F8               [12] 1881 	mov	r0,a
      000756 74 41            [12] 1882 	mov	a,#0x41
      000758 26               [12] 1883 	add	a,@r0
      000759 FC               [12] 1884 	mov	r4,a
      00075A E4               [12] 1885 	clr	a
      00075B 08               [12] 1886 	inc	r0
      00075C 36               [12] 1887 	addc	a,@r0
      00075D FD               [12] 1888 	mov	r5,a
      00075E C0 07            [24] 1889 	push	ar7
      000760 C0 06            [24] 1890 	push	ar6
      000762 C0 03            [24] 1891 	push	ar3
      000764 74 40            [12] 1892 	mov	a,#0x40
      000766 C0 E0            [24] 1893 	push	acc
      000768 E4               [12] 1894 	clr	a
      000769 C0 E0            [24] 1895 	push	acc
      00076B 8C 82            [24] 1896 	mov	dpl,r4
      00076D 8D 83            [24] 1897 	mov	dph,r5
      00076F 12r00r00         [24] 1898 	lcall	__modsint
      000772 AC 82            [24] 1899 	mov	r4,dpl
      000774 AD 83            [24] 1900 	mov	r5,dph
      000776 15 81            [12] 1901 	dec	sp
      000778 15 81            [12] 1902 	dec	sp
      00077A D0 03            [24] 1903 	pop	ar3
      00077C D0 06            [24] 1904 	pop	ar6
      00077E D0 07            [24] 1905 	pop	ar7
      000780 E5*00            [12] 1906 	mov	a,_bp
      000782 24 0D            [12] 1907 	add	a,#0x0d
      000784 F8               [12] 1908 	mov	r0,a
      000785 A6 04            [24] 1909 	mov	@r0,ar4
      000787 ED               [12] 1910 	mov	a,r5
      000788 C4               [12] 1911 	swap	a
      000789 23               [12] 1912 	rl	a
      00078A 54 E0            [12] 1913 	anl	a,#0xe0
      00078C C6               [12] 1914 	xch	a,@r0
      00078D C4               [12] 1915 	swap	a
      00078E 23               [12] 1916 	rl	a
      00078F C6               [12] 1917 	xch	a,@r0
      000790 66               [12] 1918 	xrl	a,@r0
      000791 C6               [12] 1919 	xch	a,@r0
      000792 54 E0            [12] 1920 	anl	a,#0xe0
      000794 C6               [12] 1921 	xch	a,@r0
      000795 66               [12] 1922 	xrl	a,@r0
      000796 08               [12] 1923 	inc	r0
      000797 F6               [12] 1924 	mov	@r0,a
      000798 E5*00            [12] 1925 	mov	a,_bp
      00079A 24 0D            [12] 1926 	add	a,#0x0d
      00079C F8               [12] 1927 	mov	r0,a
      00079D E5*00            [12] 1928 	mov	a,_bp
      00079F 24 05            [12] 1929 	add	a,#0x05
      0007A1 F9               [12] 1930 	mov	r1,a
      0007A2 E7               [12] 1931 	mov	a,@r1
      0007A3 26               [12] 1932 	add	a,@r0
      0007A4 FA               [12] 1933 	mov	r2,a
      0007A5 09               [12] 1934 	inc	r1
      0007A6 E7               [12] 1935 	mov	a,@r1
      0007A7 08               [12] 1936 	inc	r0
      0007A8 36               [12] 1937 	addc	a,@r0
      0007A9 FD               [12] 1938 	mov	r5,a
      0007AA EA               [12] 1939 	mov	a,r2
      0007AB 24r00            [12] 1940 	add	a,#_u
      0007AD F5 82            [12] 1941 	mov	dpl,a
      0007AF ED               [12] 1942 	mov	a,r5
      0007B0 34s08            [12] 1943 	addc	a,#(_u >> 8)
      0007B2 F5 83            [12] 1944 	mov	dph,a
      0007B4 E0               [24] 1945 	movx	a,@dptr
      0007B5 2B               [12] 1946 	add	a,r3
      0007B6 FB               [12] 1947 	mov	r3,a
                                   1948 ;	life.c:190: UPDN(1, 0);
      0007B7 E5*00            [12] 1949 	mov	a,_bp
      0007B9 24 0D            [12] 1950 	add	a,#0x0d
      0007BB F8               [12] 1951 	mov	r0,a
      0007BC E5*00            [12] 1952 	mov	a,_bp
      0007BE 24 09            [12] 1953 	add	a,#0x09
      0007C0 F9               [12] 1954 	mov	r1,a
      0007C1 E7               [12] 1955 	mov	a,@r1
      0007C2 26               [12] 1956 	add	a,@r0
      0007C3 FC               [12] 1957 	mov	r4,a
      0007C4 09               [12] 1958 	inc	r1
      0007C5 E7               [12] 1959 	mov	a,@r1
      0007C6 08               [12] 1960 	inc	r0
      0007C7 36               [12] 1961 	addc	a,@r0
      0007C8 FD               [12] 1962 	mov	r5,a
      0007C9 EC               [12] 1963 	mov	a,r4
      0007CA 24r00            [12] 1964 	add	a,#_u
      0007CC F5 82            [12] 1965 	mov	dpl,a
      0007CE ED               [12] 1966 	mov	a,r5
      0007CF 34s08            [12] 1967 	addc	a,#(_u >> 8)
      0007D1 F5 83            [12] 1968 	mov	dph,a
      0007D3 E0               [24] 1969 	movx	a,@dptr
      0007D4 2B               [12] 1970 	add	a,r3
      0007D5 FB               [12] 1971 	mov	r3,a
                                   1972 ;	life.c:191: UPDN(1, 1);
      0007D6 78r20            [12] 1973 	mov	r0,#_dy
      0007D8 76 01            [12] 1974 	mov	@r0,#0x01
      0007DA 08               [12] 1975 	inc	r0
      0007DB 76 00            [12] 1976 	mov	@r0,#0x00
      0007DD 78r1E            [12] 1977 	mov	r0,#_dx
      0007DF 76 01            [12] 1978 	mov	@r0,#0x01
      0007E1 08               [12] 1979 	inc	r0
      0007E2 76 00            [12] 1980 	mov	@r0,#0x00
      0007E4 E5*00            [12] 1981 	mov	a,_bp
      0007E6 24 0D            [12] 1982 	add	a,#0x0d
      0007E8 F8               [12] 1983 	mov	r0,a
      0007E9 EE               [12] 1984 	mov	a,r6
      0007EA 26               [12] 1985 	add	a,@r0
      0007EB FE               [12] 1986 	mov	r6,a
      0007EC EF               [12] 1987 	mov	a,r7
      0007ED 08               [12] 1988 	inc	r0
      0007EE 36               [12] 1989 	addc	a,@r0
      0007EF FF               [12] 1990 	mov	r7,a
      0007F0 EE               [12] 1991 	mov	a,r6
      0007F1 24r00            [12] 1992 	add	a,#_u
      0007F3 F5 82            [12] 1993 	mov	dpl,a
      0007F5 EF               [12] 1994 	mov	a,r7
      0007F6 34s08            [12] 1995 	addc	a,#(_u >> 8)
      0007F8 F5 83            [12] 1996 	mov	dph,a
      0007FA E0               [24] 1997 	movx	a,@dptr
      0007FB 2B               [12] 1998 	add	a,r3
      0007FC FF               [12] 1999 	mov	r7,a
      0007FD 78r1B            [12] 2000 	mov	r0,#_n
      0007FF A6 07            [24] 2001 	mov	@r0,ar7
                                   2002 ;	life.c:194: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000801 A8*00            [24] 2003 	mov	r0,_bp
      000803 08               [12] 2004 	inc	r0
      000804 E6               [12] 2005 	mov	a,@r0
      000805 24r00            [12] 2006 	add	a,#_nu
      000807 FD               [12] 2007 	mov	r5,a
      000808 08               [12] 2008 	inc	r0
      000809 E6               [12] 2009 	mov	a,@r0
      00080A 34s10            [12] 2010 	addc	a,#(_nu >> 8)
      00080C FE               [12] 2011 	mov	r6,a
      00080D BF 03 02         [24] 2012 	cjne	r7,#0x03,00496$
      000810 80 28            [24] 2013 	sjmp	00255$
      000812                       2014 00496$:
      000812 BF 02 21         [24] 2015 	cjne	r7,#0x02,00254$
      000815 E5*00            [12] 2016 	mov	a,_bp
      000817 24 03            [12] 2017 	add	a,#0x03
      000819 F8               [12] 2018 	mov	r0,a
      00081A E5*00            [12] 2019 	mov	a,_bp
      00081C 24 07            [12] 2020 	add	a,#0x07
      00081E F9               [12] 2021 	mov	r1,a
      00081F E7               [12] 2022 	mov	a,@r1
      000820 26               [12] 2023 	add	a,@r0
      000821 FC               [12] 2024 	mov	r4,a
      000822 09               [12] 2025 	inc	r1
      000823 E7               [12] 2026 	mov	a,@r1
      000824 08               [12] 2027 	inc	r0
      000825 36               [12] 2028 	addc	a,@r0
      000826 FF               [12] 2029 	mov	r7,a
      000827 EC               [12] 2030 	mov	a,r4
      000828 24r00            [12] 2031 	add	a,#_u
      00082A FC               [12] 2032 	mov	r4,a
      00082B EF               [12] 2033 	mov	a,r7
      00082C 34s08            [12] 2034 	addc	a,#(_u >> 8)
      00082E FF               [12] 2035 	mov	r7,a
      00082F 8C 82            [24] 2036 	mov	dpl,r4
      000831 8F 83            [24] 2037 	mov	dph,r7
      000833 E0               [24] 2038 	movx	a,@dptr
      000834 70 04            [24] 2039 	jnz	00255$
      000836                       2040 00254$:
                                   2041 ;	assignBit
      000836 C2*00            [12] 2042 	clr	b0
      000838 80 02            [24] 2043 	sjmp	00256$
      00083A                       2044 00255$:
                                   2045 ;	assignBit
      00083A D2*00            [12] 2046 	setb	b0
      00083C                       2047 00256$:
      00083C A2*00            [12] 2048 	mov	c,b0
      00083E E4               [12] 2049 	clr	a
      00083F 33               [12] 2050 	rlc	a
      000840 8D 82            [24] 2051 	mov	dpl,r5
      000842 8E 83            [24] 2052 	mov	dph,r6
      000844 F0               [24] 2053 	movx	@dptr,a
                                   2054 ;	life.c:195: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000845 78r14            [12] 2055 	mov	r0,#_y
      000847 86 06            [24] 2056 	mov	ar6,@r0
      000849 08               [12] 2057 	inc	r0
      00084A E6               [12] 2058 	mov	a,@r0
      00084B C4               [12] 2059 	swap	a
      00084C 23               [12] 2060 	rl	a
      00084D 54 E0            [12] 2061 	anl	a,#0xe0
      00084F CE               [12] 2062 	xch	a,r6
      000850 C4               [12] 2063 	swap	a
      000851 23               [12] 2064 	rl	a
      000852 CE               [12] 2065 	xch	a,r6
      000853 6E               [12] 2066 	xrl	a,r6
      000854 CE               [12] 2067 	xch	a,r6
      000855 54 E0            [12] 2068 	anl	a,#0xe0
      000857 CE               [12] 2069 	xch	a,r6
      000858 6E               [12] 2070 	xrl	a,r6
      000859 FF               [12] 2071 	mov	r7,a
      00085A 78r12            [12] 2072 	mov	r0,#_x
      00085C E6               [12] 2073 	mov	a,@r0
      00085D 2E               [12] 2074 	add	a,r6
      00085E FE               [12] 2075 	mov	r6,a
      00085F 08               [12] 2076 	inc	r0
      000860 E6               [12] 2077 	mov	a,@r0
      000861 3F               [12] 2078 	addc	a,r7
      000862 FF               [12] 2079 	mov	r7,a
      000863 EE               [12] 2080 	mov	a,r6
      000864 24r00            [12] 2081 	add	a,#_pu
      000866 F5 82            [12] 2082 	mov	dpl,a
      000868 EF               [12] 2083 	mov	a,r7
      000869 34s00            [12] 2084 	addc	a,#(_pu >> 8)
      00086B F5 83            [12] 2085 	mov	dph,a
      00086D E0               [24] 2086 	movx	a,@dptr
      00086E FD               [12] 2087 	mov	r5,a
      00086F EE               [12] 2088 	mov	a,r6
      000870 24r00            [12] 2089 	add	a,#_nu
      000872 F5 82            [12] 2090 	mov	dpl,a
      000874 EF               [12] 2091 	mov	a,r7
      000875 34s10            [12] 2092 	addc	a,#(_nu >> 8)
      000877 F5 83            [12] 2093 	mov	dph,a
      000879 E0               [24] 2094 	movx	a,@dptr
      00087A FC               [12] 2095 	mov	r4,a
      00087B 6D               [12] 2096 	xrl	a,r5
      00087C 78r1D            [12] 2097 	mov	r0,#_cycle2
      00087E 46               [12] 2098 	orl	a,@r0
      00087F F6               [12] 2099 	mov	@r0,a
                                   2100 ;	life.c:196: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000880 EE               [12] 2101 	mov	a,r6
      000881 24r00            [12] 2102 	add	a,#_u
      000883 F5 82            [12] 2103 	mov	dpl,a
      000885 EF               [12] 2104 	mov	a,r7
      000886 34s08            [12] 2105 	addc	a,#(_u >> 8)
      000888 F5 83            [12] 2106 	mov	dph,a
      00088A E0               [24] 2107 	movx	a,@dptr
      00088B FF               [12] 2108 	mov	r7,a
      00088C EC               [12] 2109 	mov	a,r4
      00088D 6F               [12] 2110 	xrl	a,r7
      00088E 78r1C            [12] 2111 	mov	r0,#_fixed
      000890 46               [12] 2112 	orl	a,@r0
      000891 F6               [12] 2113 	mov	@r0,a
                                   2114 ;	life.c:175: for (x = 0; x < W; x++) {
      000892 78r12            [12] 2115 	mov	r0,#_x
      000894 06               [12] 2116 	inc	@r0
      000895 B6 00 02         [24] 2117 	cjne	@r0,#0x00,00500$
      000898 08               [12] 2118 	inc	r0
      000899 06               [12] 2119 	inc	@r0
      00089A                       2120 00500$:
      00089A 78r12            [12] 2121 	mov	r0,#_x
      00089C C3               [12] 2122 	clr	c
      00089D E6               [12] 2123 	mov	a,@r0
      00089E 94 20            [12] 2124 	subb	a,#0x20
      0008A0 08               [12] 2125 	inc	r0
      0008A1 E6               [12] 2126 	mov	a,@r0
      0008A2 64 80            [12] 2127 	xrl	a,#0x80
      0008A4 94 80            [12] 2128 	subb	a,#0x80
      0008A6 50 03            [24] 2129 	jnc	00501$
      0008A8 02r05r2D         [24] 2130 	ljmp	00227$
      0008AB                       2131 00501$:
                                   2132 ;	life.c:172: for (y = 0; y < H; y++) {
      0008AB 78r14            [12] 2133 	mov	r0,#_y
      0008AD 06               [12] 2134 	inc	@r0
      0008AE B6 00 02         [24] 2135 	cjne	@r0,#0x00,00502$
      0008B1 08               [12] 2136 	inc	r0
      0008B2 06               [12] 2137 	inc	@r0
      0008B3                       2138 00502$:
      0008B3 78r14            [12] 2139 	mov	r0,#_y
      0008B5 C3               [12] 2140 	clr	c
      0008B6 E6               [12] 2141 	mov	a,@r0
      0008B7 94 40            [12] 2142 	subb	a,#0x40
      0008B9 08               [12] 2143 	inc	r0
      0008BA E6               [12] 2144 	mov	a,@r0
      0008BB 64 80            [12] 2145 	xrl	a,#0x80
      0008BD 94 80            [12] 2146 	subb	a,#0x80
      0008BF 50 03            [24] 2147 	jnc	00503$
      0008C1 02r05r05         [24] 2148 	ljmp	00229$
      0008C4                       2149 00503$:
                                   2150 ;	life.c:200: cycle2 = !cycle2;
      0008C4 78r1D            [12] 2151 	mov	r0,#_cycle2
      0008C6 E6               [12] 2152 	mov	a,@r0
      0008C7 B4 01 00         [24] 2153 	cjne	a,#0x01,00504$
      0008CA                       2154 00504$:
      0008CA 92*00            [24] 2155 	mov	b0,c
      0008CC 78r1D            [12] 2156 	mov	r0,#_cycle2
      0008CE E4               [12] 2157 	clr	a
      0008CF 33               [12] 2158 	rlc	a
      0008D0 F6               [12] 2159 	mov	@r0,a
                                   2160 ;	life.c:201: fixed = !fixed;
      0008D1 78r1C            [12] 2161 	mov	r0,#_fixed
      0008D3 E6               [12] 2162 	mov	a,@r0
      0008D4 B4 01 00         [24] 2163 	cjne	a,#0x01,00505$
      0008D7                       2164 00505$:
      0008D7 92*00            [24] 2165 	mov	b0,c
      0008D9 78r1C            [12] 2166 	mov	r0,#_fixed
      0008DB E4               [12] 2167 	clr	a
      0008DC 33               [12] 2168 	rlc	a
      0008DD F6               [12] 2169 	mov	@r0,a
                                   2170 ;	life.c:203: memcpy(pu, u, sizeof (u));
      0008DE E4               [12] 2171 	clr	a
      0008DF C0 E0            [24] 2172 	push	acc
      0008E1 74 08            [12] 2173 	mov	a,#0x08
      0008E3 C0 E0            [24] 2174 	push	acc
      0008E5 74r00            [12] 2175 	mov	a,#_u
      0008E7 C0 E0            [24] 2176 	push	acc
      0008E9 74s08            [12] 2177 	mov	a,#(_u >> 8)
      0008EB C0 E0            [24] 2178 	push	acc
      0008ED E4               [12] 2179 	clr	a
      0008EE C0 E0            [24] 2180 	push	acc
      0008F0 90r00r00         [24] 2181 	mov	dptr,#_pu
      0008F3 75 F0 00         [24] 2182 	mov	b,#0x00
      0008F6 12r00r00         [24] 2183 	lcall	___memcpy
      0008F9 E5 81            [12] 2184 	mov	a,sp
      0008FB 24 FB            [12] 2185 	add	a,#0xfb
      0008FD F5 81            [12] 2186 	mov	sp,a
                                   2187 ;	life.c:204: memcpy(u, nu, sizeof (nu));
      0008FF E4               [12] 2188 	clr	a
      000900 C0 E0            [24] 2189 	push	acc
      000902 74 08            [12] 2190 	mov	a,#0x08
      000904 C0 E0            [24] 2191 	push	acc
      000906 74r00            [12] 2192 	mov	a,#_nu
      000908 C0 E0            [24] 2193 	push	acc
      00090A 74s10            [12] 2194 	mov	a,#(_nu >> 8)
      00090C C0 E0            [24] 2195 	push	acc
      00090E E4               [12] 2196 	clr	a
      00090F C0 E0            [24] 2197 	push	acc
      000911 90r08r00         [24] 2198 	mov	dptr,#_u
      000914 75 F0 00         [24] 2199 	mov	b,#0x00
      000917 12r00r00         [24] 2200 	lcall	___memcpy
      00091A E5 81            [12] 2201 	mov	a,sp
      00091C 24 FB            [12] 2202 	add	a,#0xfb
      00091E F5 81            [12] 2203 	mov	sp,a
                                   2204 ;	life.c:242: if (fixed || cycle2) {
      000920 78r1C            [12] 2205 	mov	r0,#_fixed
      000922 E6               [12] 2206 	mov	a,@r0
      000923 70 08            [24] 2207 	jnz	00126$
      000925 78r1D            [12] 2208 	mov	r0,#_cycle2
      000927 E6               [12] 2209 	mov	a,@r0
      000928 70 03            [24] 2210 	jnz	00507$
      00092A 02r04rDD         [24] 2211 	ljmp	00242$
      00092D                       2212 00507$:
      00092D                       2213 00126$:
                                   2214 ;	life.c:243: printstr("DONE ");
      00092D 7Dr35            [12] 2215 	mov	r5,#___str_6
      00092F 7Es00            [12] 2216 	mov	r6,#(___str_6 >> 8)
      000931 7F 80            [12] 2217 	mov	r7,#0x80
                                   2218 ;	life.c:52: return;
      000933                       2219 00232$:
                                   2220 ;	life.c:50: for (; *s; s++) putchar(*s);
      000933 8D 82            [24] 2221 	mov	dpl,r5
      000935 8E 83            [24] 2222 	mov	dph,r6
      000937 8F F0            [24] 2223 	mov	b,r7
      000939 12r00r00         [24] 2224 	lcall	__gptrget
      00093C FC               [12] 2225 	mov	r4,a
      00093D 60 10            [24] 2226 	jz	00203$
      00093F 7B 00            [12] 2227 	mov	r3,#0x00
      000941 8C 82            [24] 2228 	mov	dpl,r4
      000943 8B 83            [24] 2229 	mov	dph,r3
      000945 12r00r00         [24] 2230 	lcall	_putchar
      000948 0D               [12] 2231 	inc	r5
                                   2232 ;	life.c:243: printstr("DONE ");
      000949 BD 00 E7         [24] 2233 	cjne	r5,#0x00,00232$
      00094C 0E               [12] 2234 	inc	r6
      00094D 80 E4            [24] 2235 	sjmp	00232$
      00094F                       2236 00203$:
                                   2237 ;	life.c:244: if (fixed) printstr("FIXED\r\n");
      00094F 78r1C            [12] 2238 	mov	r0,#_fixed
      000951 E6               [12] 2239 	mov	a,@r0
      000952 60 22            [24] 2240 	jz	00124$
      000954 7Dr3B            [12] 2241 	mov	r5,#___str_7
      000956 7Es00            [12] 2242 	mov	r6,#(___str_7 >> 8)
      000958 7F 80            [12] 2243 	mov	r7,#0x80
                                   2244 ;	life.c:52: return;
      00095A                       2245 00235$:
                                   2246 ;	life.c:50: for (; *s; s++) putchar(*s);
      00095A 8D 82            [24] 2247 	mov	dpl,r5
      00095C 8E 83            [24] 2248 	mov	dph,r6
      00095E 8F F0            [24] 2249 	mov	b,r7
      000960 12r00r00         [24] 2250 	lcall	__gptrget
      000963 FC               [12] 2251 	mov	r4,a
      000964 60 32            [24] 2252 	jz	00125$
      000966 7B 00            [12] 2253 	mov	r3,#0x00
      000968 8C 82            [24] 2254 	mov	dpl,r4
      00096A 8B 83            [24] 2255 	mov	dph,r3
      00096C 12r00r00         [24] 2256 	lcall	_putchar
      00096F 0D               [12] 2257 	inc	r5
                                   2258 ;	life.c:244: if (fixed) printstr("FIXED\r\n");
      000970 BD 00 E7         [24] 2259 	cjne	r5,#0x00,00235$
      000973 0E               [12] 2260 	inc	r6
      000974 80 E4            [24] 2261 	sjmp	00235$
      000976                       2262 00124$:
                                   2263 ;	life.c:245: else printstr("CYCLE2\r\n");
      000976 7Dr43            [12] 2264 	mov	r5,#___str_8
      000978 7Es00            [12] 2265 	mov	r6,#(___str_8 >> 8)
      00097A 7F 80            [12] 2266 	mov	r7,#0x80
                                   2267 ;	life.c:52: return;
      00097C                       2268 00238$:
                                   2269 ;	life.c:50: for (; *s; s++) putchar(*s);
      00097C 8D 82            [24] 2270 	mov	dpl,r5
      00097E 8E 83            [24] 2271 	mov	dph,r6
      000980 8F F0            [24] 2272 	mov	b,r7
      000982 12r00r00         [24] 2273 	lcall	__gptrget
      000985 FC               [12] 2274 	mov	r4,a
      000986 60 10            [24] 2275 	jz	00125$
      000988 7B 00            [12] 2276 	mov	r3,#0x00
      00098A 8C 82            [24] 2277 	mov	dpl,r4
      00098C 8B 83            [24] 2278 	mov	dph,r3
      00098E 12r00r00         [24] 2279 	lcall	_putchar
      000991 0D               [12] 2280 	inc	r5
                                   2281 ;	life.c:245: else printstr("CYCLE2\r\n");
      000992 BD 00 E7         [24] 2282 	cjne	r5,#0x00,00238$
      000995 0E               [12] 2283 	inc	r6
      000996 80 E4            [24] 2284 	sjmp	00238$
      000998                       2285 00125$:
                                   2286 ;	life.c:246: (void)getchar();
      000998 12r00r0A         [24] 2287 	lcall	_getchar
                                   2288 ;	life.c:247: break;
      00099B                       2289 00129$:
                                   2290 ;	life.c:251: if (i1) {
      00099B 78r11            [12] 2291 	mov	r0,#_i1
      00099D E6               [12] 2292 	mov	a,@r0
      00099E 60 25            [24] 2293 	jz	00248$
                                   2294 ;	life.c:252: printstr("BREAK\r\n");
      0009A0 7Dr4C            [12] 2295 	mov	r5,#___str_9
      0009A2 7Es00            [12] 2296 	mov	r6,#(___str_9 >> 8)
      0009A4 7F 80            [12] 2297 	mov	r7,#0x80
                                   2298 ;	life.c:52: return;
      0009A6                       2299 00245$:
                                   2300 ;	life.c:50: for (; *s; s++) putchar(*s);
      0009A6 8D 82            [24] 2301 	mov	dpl,r5
      0009A8 8E 83            [24] 2302 	mov	dph,r6
      0009AA 8F F0            [24] 2303 	mov	b,r7
      0009AC 12r00r00         [24] 2304 	lcall	__gptrget
      0009AF FC               [12] 2305 	mov	r4,a
      0009B0 60 10            [24] 2306 	jz	00209$
      0009B2 7B 00            [12] 2307 	mov	r3,#0x00
      0009B4 8C 82            [24] 2308 	mov	dpl,r4
      0009B6 8B 83            [24] 2309 	mov	dph,r3
      0009B8 12r00r00         [24] 2310 	lcall	_putchar
      0009BB 0D               [12] 2311 	inc	r5
                                   2312 ;	life.c:252: printstr("BREAK\r\n");
      0009BC BD 00 E7         [24] 2313 	cjne	r5,#0x00,00245$
      0009BF 0E               [12] 2314 	inc	r6
      0009C0 80 E4            [24] 2315 	sjmp	00245$
      0009C2                       2316 00209$:
                                   2317 ;	life.c:253: (void)getchar();
      0009C2 12r00r0A         [24] 2318 	lcall	_getchar
      0009C5                       2319 00248$:
                                   2320 ;	life.c:216: for (i0 = 0; !i0; ) {		
      0009C5 78r10            [12] 2321 	mov	r0,#_i0
      0009C7 E6               [12] 2322 	mov	a,@r0
      0009C8 70 03            [24] 2323 	jnz	00518$
      0009CA 02r02r44         [24] 2324 	ljmp	00247$
      0009CD                       2325 00518$:
                                   2326 ;	life.c:257: terminate:
      0009CD                       2327 00133$:
                                   2328 ;	life.c:258: EA = 0;
                                   2329 ;	assignBit
      0009CD C2 AF            [12] 2330 	clr	_EA
                                   2331 ;	life.c:259: printstr("TERM\r\n");
      0009CF 7Dr54            [12] 2332 	mov	r5,#___str_10
      0009D1 7Es00            [12] 2333 	mov	r6,#(___str_10 >> 8)
      0009D3 7F 80            [12] 2334 	mov	r7,#0x80
                                   2335 ;	life.c:52: return;
      0009D5                       2336 00250$:
                                   2337 ;	life.c:50: for (; *s; s++) putchar(*s);
      0009D5 8D 82            [24] 2338 	mov	dpl,r5
      0009D7 8E 83            [24] 2339 	mov	dph,r6
      0009D9 8F F0            [24] 2340 	mov	b,r7
      0009DB 12r00r00         [24] 2341 	lcall	__gptrget
      0009DE FC               [12] 2342 	mov	r4,a
      0009DF 60 10            [24] 2343 	jz	00211$
      0009E1 7B 00            [12] 2344 	mov	r3,#0x00
      0009E3 8C 82            [24] 2345 	mov	dpl,r4
      0009E5 8B 83            [24] 2346 	mov	dph,r3
      0009E7 12r00r00         [24] 2347 	lcall	_putchar
      0009EA 0D               [12] 2348 	inc	r5
                                   2349 ;	life.c:259: printstr("TERM\r\n");
      0009EB BD 00 E7         [24] 2350 	cjne	r5,#0x00,00250$
      0009EE 0E               [12] 2351 	inc	r6
      0009EF 80 E4            [24] 2352 	sjmp	00250$
      0009F1                       2353 00211$:
                                   2354 ;	life.c:260: (void)getchar();
      0009F1 12r00r0A         [24] 2355 	lcall	_getchar
                                   2356 ;	life.c:262: PCON |= 2;
      0009F4 43 87 02         [24] 2357 	orl	_PCON,#0x02
                                   2358 ;	life.c:264: return;
                                   2359 ;	life.c:265: }
      0009F7 85*00 81         [24] 2360 	mov	sp,_bp
      0009FA D0*00            [24] 2361 	pop	_bp
      0009FC 22               [24] 2362 	ret
                                   2363 	.area CSEG    (CODE)
                                   2364 	.area CONST   (CODE)
                                   2365 	.area CONST   (CODE)
      000000                       2366 ___str_0:
      000000 1B                    2367 	.db 0x1b
      000001 5B 32 4A              2368 	.ascii "[2J"
      000004 1B                    2369 	.db 0x1b
      000005 5B 6D 47 45 4E 20     2370 	.ascii "[mGEN "
      00000B 00                    2371 	.db 0x00
                                   2372 	.area CSEG    (CODE)
                                   2373 	.area CONST   (CODE)
      00000C                       2374 ___str_1:
      00000C 0D                    2375 	.db 0x0d
      00000D 0A                    2376 	.db 0x0a
      00000E 00                    2377 	.db 0x00
                                   2378 	.area CSEG    (CODE)
                                   2379 	.area CONST   (CODE)
      00000F                       2380 ___str_2:
      00000F 4C 4F 41 44 20 3C     2381 	.ascii "LOAD <"
      000015 00                    2382 	.db 0x00
                                   2383 	.area CSEG    (CODE)
                                   2384 	.area CONST   (CODE)
      000016                       2385 ___str_3:
      000016 3E                    2386 	.ascii ">"
      000017 0D                    2387 	.db 0x0d
      000018 0A                    2388 	.db 0x0a
      000019 00                    2389 	.db 0x00
                                   2390 	.area CSEG    (CODE)
                                   2391 	.area CONST   (CODE)
      00001A                       2392 ___str_4:
      00001A 1B                    2393 	.db 0x1b
      00001B 5B 32 4A              2394 	.ascii "[2J"
      00001E 1B                    2395 	.db 0x1b
      00001F 5B 6D 4C 49 46 45 20  2396 	.ascii "[mLIFE INIT"
             49 4E 49 54
      00002A 0D                    2397 	.db 0x0d
      00002B 0A                    2398 	.db 0x0a
      00002C 00                    2399 	.db 0x00
                                   2400 	.area CSEG    (CODE)
                                   2401 	.area CONST   (CODE)
      00002D                       2402 ___str_5:
      00002D 52 45 41 44 59        2403 	.ascii "READY"
      000032 0D                    2404 	.db 0x0d
      000033 0A                    2405 	.db 0x0a
      000034 00                    2406 	.db 0x00
                                   2407 	.area CSEG    (CODE)
                                   2408 	.area CONST   (CODE)
      000035                       2409 ___str_6:
      000035 44 4F 4E 45 20        2410 	.ascii "DONE "
      00003A 00                    2411 	.db 0x00
                                   2412 	.area CSEG    (CODE)
                                   2413 	.area CONST   (CODE)
      00003B                       2414 ___str_7:
      00003B 46 49 58 45 44        2415 	.ascii "FIXED"
      000040 0D                    2416 	.db 0x0d
      000041 0A                    2417 	.db 0x0a
      000042 00                    2418 	.db 0x00
                                   2419 	.area CSEG    (CODE)
                                   2420 	.area CONST   (CODE)
      000043                       2421 ___str_8:
      000043 43 59 43 4C 45 32     2422 	.ascii "CYCLE2"
      000049 0D                    2423 	.db 0x0d
      00004A 0A                    2424 	.db 0x0a
      00004B 00                    2425 	.db 0x00
                                   2426 	.area CSEG    (CODE)
                                   2427 	.area CONST   (CODE)
      00004C                       2428 ___str_9:
      00004C 42 52 45 41 4B        2429 	.ascii "BREAK"
      000051 0D                    2430 	.db 0x0d
      000052 0A                    2431 	.db 0x0a
      000053 00                    2432 	.db 0x00
                                   2433 	.area CSEG    (CODE)
                                   2434 	.area CONST   (CODE)
      000054                       2435 ___str_10:
      000054 54 45 52 4D           2436 	.ascii "TERM"
      000058 0D                    2437 	.db 0x0d
      000059 0A                    2438 	.db 0x0a
      00005A 00                    2439 	.db 0x00
                                   2440 	.area CSEG    (CODE)
                                   2441 	.area XINIT   (CODE)
                                   2442 	.area CABS    (ABS,CODE)
