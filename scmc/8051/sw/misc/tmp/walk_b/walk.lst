                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
      000000                        319 _g:
      000000                        320 	.ds 9216
      002400                        321 _queue:
      002400                        322 	.ds 36864
      00B400                        323 _hp:
      00B400                        324 	.ds 2
      00B402                        325 _tp:
      00B402                        326 	.ds 2
      00B404                        327 _main_R_65536_63:
      00B404                        328 	.ds 2
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _neigh_tmpl:
      000000                        338 	.ds 64
      000040                        339 _neigh:
      000040                        340 	.ds 64
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  357 	ljmp	_int0
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 ;------------------------------------------------------------
                                    372 ;Allocation info for local variables in function 'main'
                                    373 ;------------------------------------------------------------
                                    374 ;initial                   Allocated to stack - _bp +5
                                    375 ;N                         Allocated to stack - _bp +9
                                    376 ;i                         Allocated to stack - _bp +11
                                    377 ;j                         Allocated to registers r2 r6 
                                    378 ;sloc0                     Allocated to stack - _bp +1
                                    379 ;sloc1                     Allocated to stack - _bp +3
                                    380 ;sloc2                     Allocated to stack - _bp +15
                                    381 ;R                         Allocated with name '_main_R_65536_63'
                                    382 ;------------------------------------------------------------
                                    383 ;	walk.c:136: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r04         [24]  384 	mov	dptr,#_main_R_65536_63
      000003 74 FE            [12]  385 	mov	a,#0xfe
      000005 F0               [24]  386 	movx	@dptr,a
      000006 04               [12]  387 	inc	a
      000007 A3               [24]  388 	inc	dptr
      000008 F0               [24]  389 	movx	@dptr,a
                                    390 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  391 	ljmp	__sdcc_program_startup
                                    392 ;--------------------------------------------------------
                                    393 ; Home
                                    394 ;--------------------------------------------------------
                                    395 	.area HOME    (CODE)
                                    396 	.area HOME    (CODE)
      000006                        397 __sdcc_program_startup:
      000006 02r06r1F         [24]  398 	ljmp	_main
                                    399 ;	return from main will return to caller
                                    400 ;--------------------------------------------------------
                                    401 ; code
                                    402 ;--------------------------------------------------------
                                    403 	.area CSEG    (CODE)
                                    404 ;------------------------------------------------------------
                                    405 ;Allocation info for local variables in function 'putchar'
                                    406 ;------------------------------------------------------------
                                    407 ;c                         Allocated to registers 
                                    408 ;------------------------------------------------------------
                                    409 ;	walk.c:8: int putchar(int c) __naked {
                                    410 ;	-----------------------------------------
                                    411 ;	 function putchar
                                    412 ;	-----------------------------------------
      000000                        413 _putchar:
                                    414 ;	naked function: no prologue.
                                    415 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  416 	mov	a, dpl
      000002 02 00 30         [24]  417 	ljmp	0x0030
                                    418 ;	walk.c:14: }
                                    419 ;	naked function: no epilogue.
                                    420 ;------------------------------------------------------------
                                    421 ;Allocation info for local variables in function 'getchar'
                                    422 ;------------------------------------------------------------
                                    423 ;	walk.c:16: int getchar(void) __naked {
                                    424 ;	-----------------------------------------
                                    425 ;	 function getchar
                                    426 ;	-----------------------------------------
      000005                        427 _getchar:
                                    428 ;	naked function: no prologue.
                                    429 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  430 	lcall	0x0032
      000008 F5 82            [12]  431 	mov	dpl, a
      00000A 75 83 00         [24]  432 	mov	dph, #0
      00000D 22               [24]  433 	ret
                                    434 ;	walk.c:23: }
                                    435 ;	naked function: no epilogue.
                                    436 ;------------------------------------------------------------
                                    437 ;Allocation info for local variables in function 'int0'
                                    438 ;------------------------------------------------------------
                                    439 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    440 ;	-----------------------------------------
                                    441 ;	 function int0
                                    442 ;	-----------------------------------------
      00000E                        443 _int0:
                           00000F   444 	ar7 = 0x0f
                           00000E   445 	ar6 = 0x0e
                           00000D   446 	ar5 = 0x0d
                           00000C   447 	ar4 = 0x0c
                           00000B   448 	ar3 = 0x0b
                           00000A   449 	ar2 = 0x0a
                           000009   450 	ar1 = 0x09
                           000008   451 	ar0 = 0x08
      00000E C0 D0            [24]  452 	push	psw
      000010 75 D0 08         [24]  453 	mov	psw,#0x08
                                    454 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  455 	mov	r0,#_i0
      000015 76 00            [12]  456 	mov	@r0,#0x00
                                    457 ;	walk.c:29: }
      000017 D0 D0            [24]  458 	pop	psw
      000019 32               [24]  459 	reti
                                    460 ;	eliminated unneeded push/pop dpl
                                    461 ;	eliminated unneeded push/pop dph
                                    462 ;	eliminated unneeded push/pop b
                                    463 ;	eliminated unneeded push/pop acc
                                    464 ;------------------------------------------------------------
                                    465 ;Allocation info for local variables in function 'reset'
                                    466 ;------------------------------------------------------------
                                    467 ;	walk.c:31: static void reset(void) __naked {
                                    468 ;	-----------------------------------------
                                    469 ;	 function reset
                                    470 ;	-----------------------------------------
      00001A                        471 _reset:
                                    472 ;	naked function: no prologue.
                                    473 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  474 	orl	pcon, #2
                                    475 ;	walk.c:35: }
                                    476 ;	naked function: no epilogue.
                                    477 ;------------------------------------------------------------
                                    478 ;Allocation info for local variables in function 'bang'
                                    479 ;------------------------------------------------------------
                                    480 ;	walk.c:37: static void bang(void) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function bang
                                    483 ;	-----------------------------------------
      00001D                        484 _bang:
                           000007   485 	ar7 = 0x07
                           000006   486 	ar6 = 0x06
                           000005   487 	ar5 = 0x05
                           000004   488 	ar4 = 0x04
                           000003   489 	ar3 = 0x03
                           000002   490 	ar2 = 0x02
                           000001   491 	ar1 = 0x01
                           000000   492 	ar0 = 0x00
                                    493 ;	walk.c:38: (void)puts("Memory error");
      00001D 90r00r00         [24]  494 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  495 	mov	b,#0x80
      000023 12r00r00         [24]  496 	lcall	_puts
                                    497 ;	walk.c:39: reset();
                                    498 ;	walk.c:41: return;
                                    499 ;	walk.c:42: }
      000026 02r00r1A         [24]  500 	ljmp	_reset
                                    501 ;------------------------------------------------------------
                                    502 ;Allocation info for local variables in function 'update'
                                    503 ;------------------------------------------------------------
                                    504 ;cur                       Allocated to stack - _bp -5
                                    505 ;j                         Allocated to stack - _bp -6
                                    506 ;t                         Allocated to stack - _bp +1
                                    507 ;sloc0                     Allocated to stack - _bp +4
                                    508 ;sloc1                     Allocated to stack - _bp +6
                                    509 ;sloc2                     Allocated to stack - _bp +8
                                    510 ;------------------------------------------------------------
                                    511 ;	walk.c:88: static int update(struct node *t, struct node *cur, char j) {
                                    512 ;	-----------------------------------------
                                    513 ;	 function update
                                    514 ;	-----------------------------------------
      000029                        515 _update:
      000029 C0*00            [24]  516 	push	_bp
      00002B 85 81*00         [24]  517 	mov	_bp,sp
      00002E C0 82            [24]  518 	push	dpl
      000030 C0 83            [24]  519 	push	dph
      000032 C0 F0            [24]  520 	push	b
      000034 E5 81            [12]  521 	mov	a,sp
      000036 24 07            [12]  522 	add	a,#0x07
      000038 F5 81            [12]  523 	mov	sp,a
                                    524 ;	walk.c:89: t->r = cur->r + neigh[j].r;
      00003A E5*00            [12]  525 	mov	a,_bp
      00003C 24 FB            [12]  526 	add	a,#0xfb
      00003E F8               [12]  527 	mov	r0,a
      00003F 86 02            [24]  528 	mov	ar2,@r0
      000041 08               [12]  529 	inc	r0
      000042 86 03            [24]  530 	mov	ar3,@r0
      000044 08               [12]  531 	inc	r0
      000045 86 04            [24]  532 	mov	ar4,@r0
      000047 8A 82            [24]  533 	mov	dpl,r2
      000049 8B 83            [24]  534 	mov	dph,r3
      00004B 8C F0            [24]  535 	mov	b,r4
      00004D E5*00            [12]  536 	mov	a,_bp
      00004F 24 04            [12]  537 	add	a,#0x04
      000051 F8               [12]  538 	mov	r0,a
      000052 12r00r00         [24]  539 	lcall	__gptrget
      000055 F6               [12]  540 	mov	@r0,a
      000056 A3               [24]  541 	inc	dptr
      000057 12r00r00         [24]  542 	lcall	__gptrget
      00005A 08               [12]  543 	inc	r0
      00005B F6               [12]  544 	mov	@r0,a
      00005C E5*00            [12]  545 	mov	a,_bp
      00005E 24 FA            [12]  546 	add	a,#0xfa
      000060 F8               [12]  547 	mov	r0,a
      000061 E5*00            [12]  548 	mov	a,_bp
      000063 24 06            [12]  549 	add	a,#0x06
      000065 F9               [12]  550 	mov	r1,a
      000066 E6               [12]  551 	mov	a,@r0
      000067 75 F0 04         [24]  552 	mov	b,#0x04
      00006A A4               [48]  553 	mul	ab
      00006B F7               [12]  554 	mov	@r1,a
      00006C 09               [12]  555 	inc	r1
      00006D A7 F0            [24]  556 	mov	@r1,b
      00006F E5*00            [12]  557 	mov	a,_bp
      000071 24 06            [12]  558 	add	a,#0x06
      000073 F8               [12]  559 	mov	r0,a
      000074 E6               [12]  560 	mov	a,@r0
      000075 24r40            [12]  561 	add	a,#_neigh
      000077 F5 82            [12]  562 	mov	dpl,a
      000079 08               [12]  563 	inc	r0
      00007A E6               [12]  564 	mov	a,@r0
      00007B 34s00            [12]  565 	addc	a,#(_neigh >> 8)
      00007D F5 83            [12]  566 	mov	dph,a
      00007F E0               [24]  567 	movx	a,@dptr
      000080 FF               [12]  568 	mov	r7,a
      000081 A3               [24]  569 	inc	dptr
      000082 E0               [24]  570 	movx	a,@dptr
      000083 FE               [12]  571 	mov	r6,a
      000084 E5*00            [12]  572 	mov	a,_bp
      000086 24 04            [12]  573 	add	a,#0x04
      000088 F8               [12]  574 	mov	r0,a
      000089 EF               [12]  575 	mov	a,r7
      00008A 26               [12]  576 	add	a,@r0
      00008B FF               [12]  577 	mov	r7,a
      00008C EE               [12]  578 	mov	a,r6
      00008D 08               [12]  579 	inc	r0
      00008E 36               [12]  580 	addc	a,@r0
      00008F FE               [12]  581 	mov	r6,a
      000090 A8*00            [24]  582 	mov	r0,_bp
      000092 08               [12]  583 	inc	r0
      000093 86 82            [24]  584 	mov	dpl,@r0
      000095 08               [12]  585 	inc	r0
      000096 86 83            [24]  586 	mov	dph,@r0
      000098 08               [12]  587 	inc	r0
      000099 86 F0            [24]  588 	mov	b,@r0
      00009B EF               [12]  589 	mov	a,r7
      00009C 12r00r00         [24]  590 	lcall	__gptrput
      00009F A3               [24]  591 	inc	dptr
      0000A0 EE               [12]  592 	mov	a,r6
      0000A1 12r00r00         [24]  593 	lcall	__gptrput
                                    594 ;	walk.c:90: t->c = cur->c + neigh[j].c;
      0000A4 A8*00            [24]  595 	mov	r0,_bp
      0000A6 08               [12]  596 	inc	r0
      0000A7 E5*00            [12]  597 	mov	a,_bp
      0000A9 24 08            [12]  598 	add	a,#0x08
      0000AB F9               [12]  599 	mov	r1,a
      0000AC 74 02            [12]  600 	mov	a,#0x02
      0000AE 26               [12]  601 	add	a,@r0
      0000AF F7               [12]  602 	mov	@r1,a
      0000B0 E4               [12]  603 	clr	a
      0000B1 08               [12]  604 	inc	r0
      0000B2 36               [12]  605 	addc	a,@r0
      0000B3 09               [12]  606 	inc	r1
      0000B4 F7               [12]  607 	mov	@r1,a
      0000B5 08               [12]  608 	inc	r0
      0000B6 09               [12]  609 	inc	r1
      0000B7 E6               [12]  610 	mov	a,@r0
      0000B8 F7               [12]  611 	mov	@r1,a
      0000B9 74 02            [12]  612 	mov	a,#0x02
      0000BB 2A               [12]  613 	add	a,r2
      0000BC FA               [12]  614 	mov	r2,a
      0000BD E4               [12]  615 	clr	a
      0000BE 3B               [12]  616 	addc	a,r3
      0000BF FB               [12]  617 	mov	r3,a
      0000C0 8A 82            [24]  618 	mov	dpl,r2
      0000C2 8B 83            [24]  619 	mov	dph,r3
      0000C4 8C F0            [24]  620 	mov	b,r4
      0000C6 12r00r00         [24]  621 	lcall	__gptrget
      0000C9 FA               [12]  622 	mov	r2,a
      0000CA A3               [24]  623 	inc	dptr
      0000CB 12r00r00         [24]  624 	lcall	__gptrget
      0000CE FB               [12]  625 	mov	r3,a
      0000CF E5*00            [12]  626 	mov	a,_bp
      0000D1 24 06            [12]  627 	add	a,#0x06
      0000D3 F8               [12]  628 	mov	r0,a
      0000D4 E6               [12]  629 	mov	a,@r0
      0000D5 24r40            [12]  630 	add	a,#_neigh
      0000D7 FC               [12]  631 	mov	r4,a
      0000D8 08               [12]  632 	inc	r0
      0000D9 E6               [12]  633 	mov	a,@r0
      0000DA 34s00            [12]  634 	addc	a,#(_neigh >> 8)
      0000DC FD               [12]  635 	mov	r5,a
      0000DD 8C 82            [24]  636 	mov	dpl,r4
      0000DF 8D 83            [24]  637 	mov	dph,r5
      0000E1 A3               [24]  638 	inc	dptr
      0000E2 A3               [24]  639 	inc	dptr
      0000E3 E0               [24]  640 	movx	a,@dptr
      0000E4 FC               [12]  641 	mov	r4,a
      0000E5 A3               [24]  642 	inc	dptr
      0000E6 E0               [24]  643 	movx	a,@dptr
      0000E7 FD               [12]  644 	mov	r5,a
      0000E8 EC               [12]  645 	mov	a,r4
      0000E9 2A               [12]  646 	add	a,r2
      0000EA FA               [12]  647 	mov	r2,a
      0000EB ED               [12]  648 	mov	a,r5
      0000EC 3B               [12]  649 	addc	a,r3
      0000ED FB               [12]  650 	mov	r3,a
      0000EE E5*00            [12]  651 	mov	a,_bp
      0000F0 24 08            [12]  652 	add	a,#0x08
      0000F2 F8               [12]  653 	mov	r0,a
      0000F3 86 82            [24]  654 	mov	dpl,@r0
      0000F5 08               [12]  655 	inc	r0
      0000F6 86 83            [24]  656 	mov	dph,@r0
      0000F8 08               [12]  657 	inc	r0
      0000F9 86 F0            [24]  658 	mov	b,@r0
      0000FB EA               [12]  659 	mov	a,r2
      0000FC 12r00r00         [24]  660 	lcall	__gptrput
      0000FF A3               [24]  661 	inc	dptr
      000100 EB               [12]  662 	mov	a,r3
      000101 12r00r00         [24]  663 	lcall	__gptrput
                                    664 ;	walk.c:92: if (t->r < 0) t->r += ROWS;
      000104 A8*00            [24]  665 	mov	r0,_bp
      000106 08               [12]  666 	inc	r0
      000107 86 82            [24]  667 	mov	dpl,@r0
      000109 08               [12]  668 	inc	r0
      00010A 86 83            [24]  669 	mov	dph,@r0
      00010C 08               [12]  670 	inc	r0
      00010D 86 F0            [24]  671 	mov	b,@r0
      00010F 12r00r00         [24]  672 	lcall	__gptrget
      000112 FD               [12]  673 	mov	r5,a
      000113 A3               [24]  674 	inc	dptr
      000114 12r00r00         [24]  675 	lcall	__gptrget
      000117 FC               [12]  676 	mov	r4,a
      000118 EE               [12]  677 	mov	a,r6
      000119 30 E7 1D         [24]  678 	jnb	acc.7,00104$
      00011C 74 30            [12]  679 	mov	a,#0x30
      00011E 2D               [12]  680 	add	a,r5
      00011F FF               [12]  681 	mov	r7,a
      000120 E4               [12]  682 	clr	a
      000121 3C               [12]  683 	addc	a,r4
      000122 FE               [12]  684 	mov	r6,a
      000123 A8*00            [24]  685 	mov	r0,_bp
      000125 08               [12]  686 	inc	r0
      000126 86 82            [24]  687 	mov	dpl,@r0
      000128 08               [12]  688 	inc	r0
      000129 86 83            [24]  689 	mov	dph,@r0
      00012B 08               [12]  690 	inc	r0
      00012C 86 F0            [24]  691 	mov	b,@r0
      00012E EF               [12]  692 	mov	a,r7
      00012F 12r00r00         [24]  693 	lcall	__gptrput
      000132 A3               [24]  694 	inc	dptr
      000133 EE               [12]  695 	mov	a,r6
      000134 12r00r00         [24]  696 	lcall	__gptrput
      000137 80 27            [24]  697 	sjmp	00105$
      000139                        698 00104$:
                                    699 ;	walk.c:93: else if (t->r >= ROWS) t->r -= ROWS;
      000139 C3               [12]  700 	clr	c
      00013A ED               [12]  701 	mov	a,r5
      00013B 94 30            [12]  702 	subb	a,#0x30
      00013D EC               [12]  703 	mov	a,r4
      00013E 64 80            [12]  704 	xrl	a,#0x80
      000140 94 80            [12]  705 	subb	a,#0x80
      000142 40 1C            [24]  706 	jc	00105$
      000144 ED               [12]  707 	mov	a,r5
      000145 24 D0            [12]  708 	add	a,#0xd0
      000147 FD               [12]  709 	mov	r5,a
      000148 EC               [12]  710 	mov	a,r4
      000149 34 FF            [12]  711 	addc	a,#0xff
      00014B FC               [12]  712 	mov	r4,a
      00014C A8*00            [24]  713 	mov	r0,_bp
      00014E 08               [12]  714 	inc	r0
      00014F 86 82            [24]  715 	mov	dpl,@r0
      000151 08               [12]  716 	inc	r0
      000152 86 83            [24]  717 	mov	dph,@r0
      000154 08               [12]  718 	inc	r0
      000155 86 F0            [24]  719 	mov	b,@r0
      000157 ED               [12]  720 	mov	a,r5
      000158 12r00r00         [24]  721 	lcall	__gptrput
      00015B A3               [24]  722 	inc	dptr
      00015C EC               [12]  723 	mov	a,r4
      00015D 12r00r00         [24]  724 	lcall	__gptrput
      000160                        725 00105$:
                                    726 ;	walk.c:94: if (t->c < 0) t->c += COLS;
      000160 E5*00            [12]  727 	mov	a,_bp
      000162 24 08            [12]  728 	add	a,#0x08
      000164 F8               [12]  729 	mov	r0,a
      000165 86 82            [24]  730 	mov	dpl,@r0
      000167 08               [12]  731 	inc	r0
      000168 86 83            [24]  732 	mov	dph,@r0
      00016A 08               [12]  733 	inc	r0
      00016B 86 F0            [24]  734 	mov	b,@r0
      00016D 12r00r00         [24]  735 	lcall	__gptrget
      000170 A3               [24]  736 	inc	dptr
      000171 12r00r00         [24]  737 	lcall	__gptrget
      000174 30 E7 35         [24]  738 	jnb	acc.7,00109$
      000177 E5*00            [12]  739 	mov	a,_bp
      000179 24 08            [12]  740 	add	a,#0x08
      00017B F8               [12]  741 	mov	r0,a
      00017C 86 82            [24]  742 	mov	dpl,@r0
      00017E 08               [12]  743 	inc	r0
      00017F 86 83            [24]  744 	mov	dph,@r0
      000181 08               [12]  745 	inc	r0
      000182 86 F0            [24]  746 	mov	b,@r0
      000184 12r00r00         [24]  747 	lcall	__gptrget
      000187 FE               [12]  748 	mov	r6,a
      000188 A3               [24]  749 	inc	dptr
      000189 12r00r00         [24]  750 	lcall	__gptrget
      00018C FF               [12]  751 	mov	r7,a
      00018D 74 C0            [12]  752 	mov	a,#0xc0
      00018F 2E               [12]  753 	add	a,r6
      000190 FE               [12]  754 	mov	r6,a
      000191 E4               [12]  755 	clr	a
      000192 3F               [12]  756 	addc	a,r7
      000193 FF               [12]  757 	mov	r7,a
      000194 E5*00            [12]  758 	mov	a,_bp
      000196 24 08            [12]  759 	add	a,#0x08
      000198 F8               [12]  760 	mov	r0,a
      000199 86 82            [24]  761 	mov	dpl,@r0
      00019B 08               [12]  762 	inc	r0
      00019C 86 83            [24]  763 	mov	dph,@r0
      00019E 08               [12]  764 	inc	r0
      00019F 86 F0            [24]  765 	mov	b,@r0
      0001A1 EE               [12]  766 	mov	a,r6
      0001A2 12r00r00         [24]  767 	lcall	__gptrput
      0001A5 A3               [24]  768 	inc	dptr
      0001A6 EF               [12]  769 	mov	a,r7
      0001A7 12r00r00         [24]  770 	lcall	__gptrput
      0001AA 80 55            [24]  771 	sjmp	00110$
      0001AC                        772 00109$:
                                    773 ;	walk.c:95: else if (t->c >= COLS) t->c -= COLS;
      0001AC E5*00            [12]  774 	mov	a,_bp
      0001AE 24 08            [12]  775 	add	a,#0x08
      0001B0 F8               [12]  776 	mov	r0,a
      0001B1 86 82            [24]  777 	mov	dpl,@r0
      0001B3 08               [12]  778 	inc	r0
      0001B4 86 83            [24]  779 	mov	dph,@r0
      0001B6 08               [12]  780 	inc	r0
      0001B7 86 F0            [24]  781 	mov	b,@r0
      0001B9 12r00r00         [24]  782 	lcall	__gptrget
      0001BC FE               [12]  783 	mov	r6,a
      0001BD A3               [24]  784 	inc	dptr
      0001BE 12r00r00         [24]  785 	lcall	__gptrget
      0001C1 FF               [12]  786 	mov	r7,a
      0001C2 C3               [12]  787 	clr	c
      0001C3 EE               [12]  788 	mov	a,r6
      0001C4 94 C0            [12]  789 	subb	a,#0xc0
      0001C6 EF               [12]  790 	mov	a,r7
      0001C7 64 80            [12]  791 	xrl	a,#0x80
      0001C9 94 80            [12]  792 	subb	a,#0x80
      0001CB 40 34            [24]  793 	jc	00110$
      0001CD E5*00            [12]  794 	mov	a,_bp
      0001CF 24 08            [12]  795 	add	a,#0x08
      0001D1 F8               [12]  796 	mov	r0,a
      0001D2 86 82            [24]  797 	mov	dpl,@r0
      0001D4 08               [12]  798 	inc	r0
      0001D5 86 83            [24]  799 	mov	dph,@r0
      0001D7 08               [12]  800 	inc	r0
      0001D8 86 F0            [24]  801 	mov	b,@r0
      0001DA 12r00r00         [24]  802 	lcall	__gptrget
      0001DD FE               [12]  803 	mov	r6,a
      0001DE A3               [24]  804 	inc	dptr
      0001DF 12r00r00         [24]  805 	lcall	__gptrget
      0001E2 FF               [12]  806 	mov	r7,a
      0001E3 EE               [12]  807 	mov	a,r6
      0001E4 24 40            [12]  808 	add	a,#0x40
      0001E6 FE               [12]  809 	mov	r6,a
      0001E7 EF               [12]  810 	mov	a,r7
      0001E8 34 FF            [12]  811 	addc	a,#0xff
      0001EA FF               [12]  812 	mov	r7,a
      0001EB E5*00            [12]  813 	mov	a,_bp
      0001ED 24 08            [12]  814 	add	a,#0x08
      0001EF F8               [12]  815 	mov	r0,a
      0001F0 86 82            [24]  816 	mov	dpl,@r0
      0001F2 08               [12]  817 	inc	r0
      0001F3 86 83            [24]  818 	mov	dph,@r0
      0001F5 08               [12]  819 	inc	r0
      0001F6 86 F0            [24]  820 	mov	b,@r0
      0001F8 EE               [12]  821 	mov	a,r6
      0001F9 12r00r00         [24]  822 	lcall	__gptrput
      0001FC A3               [24]  823 	inc	dptr
      0001FD EF               [12]  824 	mov	a,r7
      0001FE 12r00r00         [24]  825 	lcall	__gptrput
      000201                        826 00110$:
                                    827 ;	walk.c:97: if (g[t->r][t->c] == 0xaa) return 0;
      000201 A8*00            [24]  828 	mov	r0,_bp
      000203 08               [12]  829 	inc	r0
      000204 86 82            [24]  830 	mov	dpl,@r0
      000206 08               [12]  831 	inc	r0
      000207 86 83            [24]  832 	mov	dph,@r0
      000209 08               [12]  833 	inc	r0
      00020A 86 F0            [24]  834 	mov	b,@r0
      00020C 12r00r00         [24]  835 	lcall	__gptrget
      00020F FE               [12]  836 	mov	r6,a
      000210 A3               [24]  837 	inc	dptr
      000211 12r00r00         [24]  838 	lcall	__gptrget
      000214 FF               [12]  839 	mov	r7,a
      000215 C0 06            [24]  840 	push	ar6
      000217 C0 07            [24]  841 	push	ar7
      000219 90 00 C0         [24]  842 	mov	dptr,#0x00c0
      00021C 12r00r00         [24]  843 	lcall	__mulint
      00021F AE 82            [24]  844 	mov	r6,dpl
      000221 AF 83            [24]  845 	mov	r7,dph
      000223 15 81            [12]  846 	dec	sp
      000225 15 81            [12]  847 	dec	sp
      000227 EE               [12]  848 	mov	a,r6
      000228 24r00            [12]  849 	add	a,#_g
      00022A FE               [12]  850 	mov	r6,a
      00022B EF               [12]  851 	mov	a,r7
      00022C 34s00            [12]  852 	addc	a,#(_g >> 8)
      00022E FF               [12]  853 	mov	r7,a
      00022F E5*00            [12]  854 	mov	a,_bp
      000231 24 08            [12]  855 	add	a,#0x08
      000233 F8               [12]  856 	mov	r0,a
      000234 86 82            [24]  857 	mov	dpl,@r0
      000236 08               [12]  858 	inc	r0
      000237 86 83            [24]  859 	mov	dph,@r0
      000239 08               [12]  860 	inc	r0
      00023A 86 F0            [24]  861 	mov	b,@r0
      00023C 12r00r00         [24]  862 	lcall	__gptrget
      00023F FC               [12]  863 	mov	r4,a
      000240 A3               [24]  864 	inc	dptr
      000241 12r00r00         [24]  865 	lcall	__gptrget
      000244 FD               [12]  866 	mov	r5,a
      000245 EC               [12]  867 	mov	a,r4
      000246 2E               [12]  868 	add	a,r6
      000247 F5 82            [12]  869 	mov	dpl,a
      000249 ED               [12]  870 	mov	a,r5
      00024A 3F               [12]  871 	addc	a,r7
      00024B F5 83            [12]  872 	mov	dph,a
      00024D E0               [24]  873 	movx	a,@dptr
      00024E FF               [12]  874 	mov	r7,a
      00024F BF AA 05         [24]  875 	cjne	r7,#0xaa,00114$
      000252 90 00 00         [24]  876 	mov	dptr,#0x0000
      000255 80 59            [24]  877 	sjmp	00116$
      000257                        878 00114$:
                                    879 ;	walk.c:98: else if (g[t->r][t->c] != 0x55) bang();
      000257 A8*00            [24]  880 	mov	r0,_bp
      000259 08               [12]  881 	inc	r0
      00025A 86 82            [24]  882 	mov	dpl,@r0
      00025C 08               [12]  883 	inc	r0
      00025D 86 83            [24]  884 	mov	dph,@r0
      00025F 08               [12]  885 	inc	r0
      000260 86 F0            [24]  886 	mov	b,@r0
      000262 12r00r00         [24]  887 	lcall	__gptrget
      000265 FE               [12]  888 	mov	r6,a
      000266 A3               [24]  889 	inc	dptr
      000267 12r00r00         [24]  890 	lcall	__gptrget
      00026A FF               [12]  891 	mov	r7,a
      00026B C0 06            [24]  892 	push	ar6
      00026D C0 07            [24]  893 	push	ar7
      00026F 90 00 C0         [24]  894 	mov	dptr,#0x00c0
      000272 12r00r00         [24]  895 	lcall	__mulint
      000275 AE 82            [24]  896 	mov	r6,dpl
      000277 AF 83            [24]  897 	mov	r7,dph
      000279 15 81            [12]  898 	dec	sp
      00027B 15 81            [12]  899 	dec	sp
      00027D EE               [12]  900 	mov	a,r6
      00027E 24r00            [12]  901 	add	a,#_g
      000280 FE               [12]  902 	mov	r6,a
      000281 EF               [12]  903 	mov	a,r7
      000282 34s00            [12]  904 	addc	a,#(_g >> 8)
      000284 FF               [12]  905 	mov	r7,a
      000285 E5*00            [12]  906 	mov	a,_bp
      000287 24 08            [12]  907 	add	a,#0x08
      000289 F8               [12]  908 	mov	r0,a
      00028A 86 82            [24]  909 	mov	dpl,@r0
      00028C 08               [12]  910 	inc	r0
      00028D 86 83            [24]  911 	mov	dph,@r0
      00028F 08               [12]  912 	inc	r0
      000290 86 F0            [24]  913 	mov	b,@r0
      000292 12r00r00         [24]  914 	lcall	__gptrget
      000295 FC               [12]  915 	mov	r4,a
      000296 A3               [24]  916 	inc	dptr
      000297 12r00r00         [24]  917 	lcall	__gptrget
      00029A FD               [12]  918 	mov	r5,a
      00029B EC               [12]  919 	mov	a,r4
      00029C 2E               [12]  920 	add	a,r6
      00029D F5 82            [12]  921 	mov	dpl,a
      00029F ED               [12]  922 	mov	a,r5
      0002A0 3F               [12]  923 	addc	a,r7
      0002A1 F5 83            [12]  924 	mov	dph,a
      0002A3 E0               [24]  925 	movx	a,@dptr
      0002A4 FF               [12]  926 	mov	r7,a
      0002A5 BF 55 02         [24]  927 	cjne	r7,#0x55,00148$
      0002A8 80 03            [24]  928 	sjmp	00115$
      0002AA                        929 00148$:
      0002AA 12r00r1D         [24]  930 	lcall	_bang
      0002AD                        931 00115$:
                                    932 ;	walk.c:100: return 1;
      0002AD 90 00 01         [24]  933 	mov	dptr,#0x0001
      0002B0                        934 00116$:
                                    935 ;	walk.c:101: }
      0002B0 85*00 81         [24]  936 	mov	sp,_bp
      0002B3 D0*00            [24]  937 	pop	_bp
      0002B5 22               [24]  938 	ret
                                    939 ;------------------------------------------------------------
                                    940 ;Allocation info for local variables in function 'walk'
                                    941 ;------------------------------------------------------------
                                    942 ;nstart                    Allocated to registers r5 r6 r7 
                                    943 ;cur                       Allocated to stack - _bp +5
                                    944 ;t                         Allocated to stack - _bp +9
                                    945 ;j                         Allocated to stack - _bp +13
                                    946 ;r                         Allocated to registers r2 r3 
                                    947 ;sloc0                     Allocated to stack - _bp +15
                                    948 ;sloc1                     Allocated to stack - _bp +1
                                    949 ;sloc2                     Allocated to stack - _bp +2
                                    950 ;------------------------------------------------------------
                                    951 ;	walk.c:103: static void walk(struct node *nstart) {
                                    952 ;	-----------------------------------------
                                    953 ;	 function walk
                                    954 ;	-----------------------------------------
      0002B6                        955 _walk:
      0002B6 C0*00            [24]  956 	push	_bp
      0002B8 E5 81            [12]  957 	mov	a,sp
      0002BA F5*00            [12]  958 	mov	_bp,a
      0002BC 24 0D            [12]  959 	add	a,#0x0d
      0002BE F5 81            [12]  960 	mov	sp,a
                                    961 ;	walk.c:108: if (!qadd(nstart)) bang();
      0002C0 AD 82            [24]  962 	mov	r5,dpl
      0002C2 AE 83            [24]  963 	mov	r6,dph
      0002C4 AF F0            [24]  964 	mov	r7,b
      0002C6 C0 07            [24]  965 	push	ar7
      0002C8 C0 06            [24]  966 	push	ar6
      0002CA C0 05            [24]  967 	push	ar5
      0002CC 12r0Br59         [24]  968 	lcall	_qadd
      0002CF E5 82            [12]  969 	mov	a,dpl
      0002D1 85 83 F0         [24]  970 	mov	b,dph
      0002D4 D0 05            [24]  971 	pop	ar5
      0002D6 D0 06            [24]  972 	pop	ar6
      0002D8 D0 07            [24]  973 	pop	ar7
      0002DA 45 F0            [12]  974 	orl	a,b
      0002DC 70 0F            [24]  975 	jnz	00102$
      0002DE C0 07            [24]  976 	push	ar7
      0002E0 C0 06            [24]  977 	push	ar6
      0002E2 C0 05            [24]  978 	push	ar5
      0002E4 12r00r1D         [24]  979 	lcall	_bang
      0002E7 D0 05            [24]  980 	pop	ar5
      0002E9 D0 06            [24]  981 	pop	ar6
      0002EB D0 07            [24]  982 	pop	ar7
      0002ED                        983 00102$:
                                    984 ;	walk.c:109: g[nstart->r][nstart->c] = 0xaa;
      0002ED 8D 82            [24]  985 	mov	dpl,r5
      0002EF 8E 83            [24]  986 	mov	dph,r6
      0002F1 8F F0            [24]  987 	mov	b,r7
      0002F3 12r00r00         [24]  988 	lcall	__gptrget
      0002F6 FB               [12]  989 	mov	r3,a
      0002F7 A3               [24]  990 	inc	dptr
      0002F8 12r00r00         [24]  991 	lcall	__gptrget
      0002FB FC               [12]  992 	mov	r4,a
      0002FC C0 07            [24]  993 	push	ar7
      0002FE C0 06            [24]  994 	push	ar6
      000300 C0 05            [24]  995 	push	ar5
      000302 C0 03            [24]  996 	push	ar3
      000304 C0 04            [24]  997 	push	ar4
      000306 90 00 C0         [24]  998 	mov	dptr,#0x00c0
      000309 12r00r00         [24]  999 	lcall	__mulint
      00030C AB 82            [24] 1000 	mov	r3,dpl
      00030E AC 83            [24] 1001 	mov	r4,dph
      000310 15 81            [12] 1002 	dec	sp
      000312 15 81            [12] 1003 	dec	sp
      000314 D0 05            [24] 1004 	pop	ar5
      000316 D0 06            [24] 1005 	pop	ar6
      000318 D0 07            [24] 1006 	pop	ar7
      00031A EB               [12] 1007 	mov	a,r3
      00031B 24r00            [12] 1008 	add	a,#_g
      00031D FB               [12] 1009 	mov	r3,a
      00031E EC               [12] 1010 	mov	a,r4
      00031F 34s00            [12] 1011 	addc	a,#(_g >> 8)
      000321 FC               [12] 1012 	mov	r4,a
      000322 74 02            [12] 1013 	mov	a,#0x02
      000324 2D               [12] 1014 	add	a,r5
      000325 FD               [12] 1015 	mov	r5,a
      000326 E4               [12] 1016 	clr	a
      000327 3E               [12] 1017 	addc	a,r6
      000328 FE               [12] 1018 	mov	r6,a
      000329 8D 82            [24] 1019 	mov	dpl,r5
      00032B 8E 83            [24] 1020 	mov	dph,r6
      00032D 8F F0            [24] 1021 	mov	b,r7
      00032F 12r00r00         [24] 1022 	lcall	__gptrget
      000332 FD               [12] 1023 	mov	r5,a
      000333 A3               [24] 1024 	inc	dptr
      000334 12r00r00         [24] 1025 	lcall	__gptrget
      000337 FE               [12] 1026 	mov	r6,a
      000338 ED               [12] 1027 	mov	a,r5
      000339 2B               [12] 1028 	add	a,r3
      00033A F5 82            [12] 1029 	mov	dpl,a
      00033C EE               [12] 1030 	mov	a,r6
      00033D 3C               [12] 1031 	addc	a,r4
      00033E F5 83            [12] 1032 	mov	dph,a
      000340 74 AA            [12] 1033 	mov	a,#0xaa
      000342 F0               [24] 1034 	movx	@dptr,a
                                   1035 ;	walk.c:111: process:
      000343 E5*00            [12] 1036 	mov	a,_bp
      000345 24 05            [12] 1037 	add	a,#0x05
      000347 F9               [12] 1038 	mov	r1,a
      000348 24 02            [12] 1039 	add	a,#0x02
      00034A F8               [12] 1040 	mov	r0,a
      00034B C0 00            [24] 1041 	push	ar0
      00034D A8*00            [24] 1042 	mov	r0,_bp
      00034F 08               [12] 1043 	inc	r0
      000350 A6 01            [24] 1044 	mov	@r0,ar1
      000352 D0 00            [24] 1045 	pop	ar0
      000354 E5*00            [12] 1046 	mov	a,_bp
      000356 24 09            [12] 1047 	add	a,#0x09
      000358 FE               [12] 1048 	mov	r6,a
      000359 FD               [12] 1049 	mov	r5,a
      00035A 74 02            [12] 1050 	mov	a,#0x02
      00035C 2E               [12] 1051 	add	a,r6
      00035D FC               [12] 1052 	mov	r4,a
      00035E                       1053 00103$:
                                   1054 ;	walk.c:112: if (!qget(&cur)) goto term;
      00035E C0 05            [24] 1055 	push	ar5
      000360 89 02            [24] 1056 	mov	ar2,r1
      000362 7B 00            [12] 1057 	mov	r3,#0x00
      000364 7D 40            [12] 1058 	mov	r5,#0x40
      000366 8A 82            [24] 1059 	mov	dpl,r2
      000368 8B 83            [24] 1060 	mov	dph,r3
      00036A 8D F0            [24] 1061 	mov	b,r5
      00036C C0 06            [24] 1062 	push	ar6
      00036E C0 05            [24] 1063 	push	ar5
      000370 C0 04            [24] 1064 	push	ar4
      000372 C0 01            [24] 1065 	push	ar1
      000374 C0 00            [24] 1066 	push	ar0
      000376 12r0Cr49         [24] 1067 	lcall	_qget
      000379 E5 82            [12] 1068 	mov	a,dpl
      00037B 85 83 F0         [24] 1069 	mov	b,dph
      00037E D0 00            [24] 1070 	pop	ar0
      000380 D0 01            [24] 1071 	pop	ar1
      000382 D0 04            [24] 1072 	pop	ar4
      000384 D0 05            [24] 1073 	pop	ar5
      000386 D0 06            [24] 1074 	pop	ar6
      000388 D0 05            [24] 1075 	pop	ar5
      00038A 45 F0            [12] 1076 	orl	a,b
      00038C 70 03            [24] 1077 	jnz	00158$
      00038E 02r06r19         [24] 1078 	ljmp	00115$
      000391                       1079 00158$:
                                   1080 ;	walk.c:113: r = rand() & 0x001f;
      000391 C0 06            [24] 1081 	push	ar6
      000393 C0 05            [24] 1082 	push	ar5
      000395 C0 04            [24] 1083 	push	ar4
      000397 C0 01            [24] 1084 	push	ar1
      000399 C0 00            [24] 1085 	push	ar0
      00039B 12r00r00         [24] 1086 	lcall	_rand
      00039E AA 82            [24] 1087 	mov	r2,dpl
      0003A0 D0 00            [24] 1088 	pop	ar0
      0003A2 D0 01            [24] 1089 	pop	ar1
      0003A4 D0 04            [24] 1090 	pop	ar4
      0003A6 D0 05            [24] 1091 	pop	ar5
      0003A8 D0 06            [24] 1092 	pop	ar6
      0003AA 53 02 1F         [24] 1093 	anl	ar2,#0x1f
      0003AD 7B 00            [12] 1094 	mov	r3,#0x00
                                   1095 ;	walk.c:114: if (r < 16) {
      0003AF C3               [12] 1096 	clr	c
      0003B0 EA               [12] 1097 	mov	a,r2
      0003B1 94 10            [12] 1098 	subb	a,#0x10
      0003B3 EB               [12] 1099 	mov	a,r3
      0003B4 64 80            [12] 1100 	xrl	a,#0x80
      0003B6 94 80            [12] 1101 	subb	a,#0x80
      0003B8 50 4F            [24] 1102 	jnc	00109$
                                   1103 ;	walk.c:115: if (!qadd(&cur)) bang();
      0003BA C0 05            [24] 1104 	push	ar5
      0003BC 89 03            [24] 1105 	mov	ar3,r1
      0003BE 8B 02            [24] 1106 	mov	ar2,r3
      0003C0 7B 00            [12] 1107 	mov	r3,#0x00
      0003C2 7D 40            [12] 1108 	mov	r5,#0x40
      0003C4 8A 82            [24] 1109 	mov	dpl,r2
      0003C6 8B 83            [24] 1110 	mov	dph,r3
      0003C8 8D F0            [24] 1111 	mov	b,r5
      0003CA C0 06            [24] 1112 	push	ar6
      0003CC C0 05            [24] 1113 	push	ar5
      0003CE C0 04            [24] 1114 	push	ar4
      0003D0 C0 01            [24] 1115 	push	ar1
      0003D2 C0 00            [24] 1116 	push	ar0
      0003D4 12r0Br59         [24] 1117 	lcall	_qadd
      0003D7 E5 82            [12] 1118 	mov	a,dpl
      0003D9 85 83 F0         [24] 1119 	mov	b,dph
      0003DC D0 00            [24] 1120 	pop	ar0
      0003DE D0 01            [24] 1121 	pop	ar1
      0003E0 D0 04            [24] 1122 	pop	ar4
      0003E2 D0 05            [24] 1123 	pop	ar5
      0003E4 D0 06            [24] 1124 	pop	ar6
      0003E6 D0 05            [24] 1125 	pop	ar5
      0003E8 45 F0            [12] 1126 	orl	a,b
      0003EA 60 03            [24] 1127 	jz	00160$
      0003EC 02r03r5E         [24] 1128 	ljmp	00103$
      0003EF                       1129 00160$:
      0003EF C0 06            [24] 1130 	push	ar6
      0003F1 C0 05            [24] 1131 	push	ar5
      0003F3 C0 04            [24] 1132 	push	ar4
      0003F5 C0 01            [24] 1133 	push	ar1
      0003F7 C0 00            [24] 1134 	push	ar0
      0003F9 12r00r1D         [24] 1135 	lcall	_bang
      0003FC D0 00            [24] 1136 	pop	ar0
      0003FE D0 01            [24] 1137 	pop	ar1
      000400 D0 04            [24] 1138 	pop	ar4
      000402 D0 05            [24] 1139 	pop	ar5
      000404 D0 06            [24] 1140 	pop	ar6
                                   1141 ;	walk.c:116: goto process;
      000406 02r03r5E         [24] 1142 	ljmp	00103$
      000409                       1143 00109$:
                                   1144 ;	walk.c:119: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      000409 C0 05            [24] 1145 	push	ar5
      00040B 86 02            [24] 1146 	mov	ar2,@r0
      00040D 08               [12] 1147 	inc	r0
      00040E 86 03            [24] 1148 	mov	ar3,@r0
      000410 18               [12] 1149 	dec	r0
      000411 74 01            [12] 1150 	mov	a,#0x01
      000413 2A               [12] 1151 	add	a,r2
      000414 FA               [12] 1152 	mov	r2,a
      000415 E4               [12] 1153 	clr	a
      000416 3B               [12] 1154 	addc	a,r3
      000417 FF               [12] 1155 	mov	r7,a
      000418 87 03            [24] 1156 	mov	ar3,@r1
      00041A 09               [12] 1157 	inc	r1
      00041B 87 05            [24] 1158 	mov	ar5,@r1
      00041D 19               [12] 1159 	dec	r1
      00041E 74 04            [12] 1160 	mov	a,#0x04
      000420 2B               [12] 1161 	add	a,r3
      000421 FB               [12] 1162 	mov	r3,a
      000422 E4               [12] 1163 	clr	a
      000423 3D               [12] 1164 	addc	a,r5
      000424 FD               [12] 1165 	mov	r5,a
      000425 C0 06            [24] 1166 	push	ar6
      000427 C0 05            [24] 1167 	push	ar5
      000429 C0 04            [24] 1168 	push	ar4
      00042B C0 01            [24] 1169 	push	ar1
      00042D C0 00            [24] 1170 	push	ar0
      00042F C0 02            [24] 1171 	push	ar2
      000431 C0 07            [24] 1172 	push	ar7
      000433 C0 03            [24] 1173 	push	ar3
      000435 C0 05            [24] 1174 	push	ar5
      000437 74r0D            [12] 1175 	mov	a,#___str_1
      000439 C0 E0            [24] 1176 	push	acc
      00043B 74s00            [12] 1177 	mov	a,#(___str_1 >> 8)
      00043D C0 E0            [24] 1178 	push	acc
      00043F 74 80            [12] 1179 	mov	a,#0x80
      000441 C0 E0            [24] 1180 	push	acc
      000443 12r00r00         [24] 1181 	lcall	_printf
      000446 E5 81            [12] 1182 	mov	a,sp
      000448 24 F9            [12] 1183 	add	a,#0xf9
      00044A F5 81            [12] 1184 	mov	sp,a
      00044C D0 00            [24] 1185 	pop	ar0
      00044E D0 01            [24] 1186 	pop	ar1
      000450 D0 04            [24] 1187 	pop	ar4
      000452 D0 05            [24] 1188 	pop	ar5
                                   1189 ;	walk.c:120: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      000454 86 07            [24] 1190 	mov	ar7,@r0
      000456 08               [12] 1191 	inc	r0
      000457 86 03            [24] 1192 	mov	ar3,@r0
      000459 18               [12] 1193 	dec	r0
      00045A 87 02            [24] 1194 	mov	ar2,@r1
      00045C 09               [12] 1195 	inc	r1
      00045D 87 05            [24] 1196 	mov	ar5,@r1
      00045F 19               [12] 1197 	dec	r1
      000460 C0 05            [24] 1198 	push	ar5
      000462 C0 04            [24] 1199 	push	ar4
      000464 C0 01            [24] 1200 	push	ar1
      000466 C0 00            [24] 1201 	push	ar0
      000468 C0 07            [24] 1202 	push	ar7
      00046A C0 03            [24] 1203 	push	ar3
      00046C C0 02            [24] 1204 	push	ar2
      00046E C0 05            [24] 1205 	push	ar5
      000470 90rB4r02         [24] 1206 	mov	dptr,#_tp
      000473 E0               [24] 1207 	movx	a,@dptr
      000474 C0 E0            [24] 1208 	push	acc
      000476 A3               [24] 1209 	inc	dptr
      000477 E0               [24] 1210 	movx	a,@dptr
      000478 C0 E0            [24] 1211 	push	acc
      00047A 90rB4r00         [24] 1212 	mov	dptr,#_hp
      00047D E0               [24] 1213 	movx	a,@dptr
      00047E C0 E0            [24] 1214 	push	acc
      000480 A3               [24] 1215 	inc	dptr
      000481 E0               [24] 1216 	movx	a,@dptr
      000482 C0 E0            [24] 1217 	push	acc
      000484 74r17            [12] 1218 	mov	a,#___str_2
      000486 C0 E0            [24] 1219 	push	acc
      000488 74s00            [12] 1220 	mov	a,#(___str_2 >> 8)
      00048A C0 E0            [24] 1221 	push	acc
      00048C 74 80            [12] 1222 	mov	a,#0x80
      00048E C0 E0            [24] 1223 	push	acc
      000490 12r00r00         [24] 1224 	lcall	_printf
      000493 E5 81            [12] 1225 	mov	a,sp
      000495 24 F5            [12] 1226 	add	a,#0xf5
      000497 F5 81            [12] 1227 	mov	sp,a
      000499 D0 00            [24] 1228 	pop	ar0
      00049B D0 01            [24] 1229 	pop	ar1
      00049D D0 04            [24] 1230 	pop	ar4
      00049F D0 05            [24] 1231 	pop	ar5
      0004A1 D0 06            [24] 1232 	pop	ar6
                                   1233 ;	walk.c:122: for (j = 0; j < NMAX; j++)
      0004A3 C0 00            [24] 1234 	push	ar0
      0004A5 E5*00            [12] 1235 	mov	a,_bp
      0004A7 24 0D            [12] 1236 	add	a,#0x0d
      0004A9 F8               [12] 1237 	mov	r0,a
      0004AA 76 00            [12] 1238 	mov	@r0,#0x00
      0004AC D0 00            [24] 1239 	pop	ar0
                                   1240 ;	walk.c:132: return;
      0004AE D0 05            [24] 1241 	pop	ar5
                                   1242 ;	walk.c:122: for (j = 0; j < NMAX; j++)
      0004B0                       1243 00116$:
                                   1244 ;	walk.c:123: if (update(&t, &cur, j)) {
      0004B0 C0 05            [24] 1245 	push	ar5
      0004B2 C0 00            [24] 1246 	push	ar0
      0004B4 A8*00            [24] 1247 	mov	r0,_bp
      0004B6 08               [12] 1248 	inc	r0
      0004B7 C0 01            [24] 1249 	push	ar1
      0004B9 A9*00            [24] 1250 	mov	r1,_bp
      0004BB 09               [12] 1251 	inc	r1
      0004BC 09               [12] 1252 	inc	r1
      0004BD E6               [12] 1253 	mov	a,@r0
      0004BE F7               [12] 1254 	mov	@r1,a
      0004BF 09               [12] 1255 	inc	r1
      0004C0 77 00            [12] 1256 	mov	@r1,#0x00
      0004C2 09               [12] 1257 	inc	r1
      0004C3 77 40            [12] 1258 	mov	@r1,#0x40
      0004C5 D0 01            [24] 1259 	pop	ar1
      0004C7 D0 00            [24] 1260 	pop	ar0
      0004C9 8E 03            [24] 1261 	mov	ar3,r6
      0004CB 7D 00            [12] 1262 	mov	r5,#0x00
      0004CD 7F 40            [12] 1263 	mov	r7,#0x40
      0004CF C0 06            [24] 1264 	push	ar6
      0004D1 C0 04            [24] 1265 	push	ar4
      0004D3 C0 01            [24] 1266 	push	ar1
      0004D5 C0 00            [24] 1267 	push	ar0
      0004D7 85 00 F0         [24] 1268 	mov	b,ar0
      0004DA E5*00            [12] 1269 	mov	a,_bp
      0004DC 24 0D            [12] 1270 	add	a,#0x0d
      0004DE F8               [12] 1271 	mov	r0,a
      0004DF E6               [12] 1272 	mov	a,@r0
      0004E0 C0 E0            [24] 1273 	push	acc
      0004E2 A8 F0            [24] 1274 	mov	r0,b
      0004E4 85 00 F0         [24] 1275 	mov	b,ar0
      0004E7 A8*00            [24] 1276 	mov	r0,_bp
      0004E9 08               [12] 1277 	inc	r0
      0004EA 08               [12] 1278 	inc	r0
      0004EB E6               [12] 1279 	mov	a,@r0
      0004EC C0 E0            [24] 1280 	push	acc
      0004EE 08               [12] 1281 	inc	r0
      0004EF E6               [12] 1282 	mov	a,@r0
      0004F0 C0 E0            [24] 1283 	push	acc
      0004F2 08               [12] 1284 	inc	r0
      0004F3 E6               [12] 1285 	mov	a,@r0
      0004F4 C0 E0            [24] 1286 	push	acc
      0004F6 8B 82            [24] 1287 	mov	dpl,r3
      0004F8 8D 83            [24] 1288 	mov	dph,r5
      0004FA 8F F0            [24] 1289 	mov	b,r7
      0004FC 12r00r29         [24] 1290 	lcall	_update
      0004FF AD 82            [24] 1291 	mov	r5,dpl
      000501 AF 83            [24] 1292 	mov	r7,dph
      000503 E5 81            [12] 1293 	mov	a,sp
      000505 24 FC            [12] 1294 	add	a,#0xfc
      000507 F5 81            [12] 1295 	mov	sp,a
      000509 D0 00            [24] 1296 	pop	ar0
      00050B D0 01            [24] 1297 	pop	ar1
      00050D D0 04            [24] 1298 	pop	ar4
      00050F D0 06            [24] 1299 	pop	ar6
      000511 ED               [12] 1300 	mov	a,r5
      000512 4F               [12] 1301 	orl	a,r7
      000513 D0 05            [24] 1302 	pop	ar5
      000515 70 03            [24] 1303 	jnz	00161$
      000517 02r05rFF         [24] 1304 	ljmp	00117$
      00051A                       1305 00161$:
                                   1306 ;	walk.c:124: if (!qadd(&t)) bang();
      00051A 8D 02            [24] 1307 	mov	ar2,r5
      00051C 7B 00            [12] 1308 	mov	r3,#0x00
      00051E 7F 40            [12] 1309 	mov	r7,#0x40
      000520 8A 82            [24] 1310 	mov	dpl,r2
      000522 8B 83            [24] 1311 	mov	dph,r3
      000524 8F F0            [24] 1312 	mov	b,r7
      000526 C0 06            [24] 1313 	push	ar6
      000528 C0 05            [24] 1314 	push	ar5
      00052A C0 04            [24] 1315 	push	ar4
      00052C C0 01            [24] 1316 	push	ar1
      00052E C0 00            [24] 1317 	push	ar0
      000530 12r0Br59         [24] 1318 	lcall	_qadd
      000533 E5 82            [12] 1319 	mov	a,dpl
      000535 85 83 F0         [24] 1320 	mov	b,dph
      000538 D0 00            [24] 1321 	pop	ar0
      00053A D0 01            [24] 1322 	pop	ar1
      00053C D0 04            [24] 1323 	pop	ar4
      00053E D0 05            [24] 1324 	pop	ar5
      000540 D0 06            [24] 1325 	pop	ar6
      000542 45 F0            [12] 1326 	orl	a,b
      000544 70 17            [24] 1327 	jnz	00111$
      000546 C0 06            [24] 1328 	push	ar6
      000548 C0 05            [24] 1329 	push	ar5
      00054A C0 04            [24] 1330 	push	ar4
      00054C C0 01            [24] 1331 	push	ar1
      00054E C0 00            [24] 1332 	push	ar0
      000550 12r00r1D         [24] 1333 	lcall	_bang
      000553 D0 00            [24] 1334 	pop	ar0
      000555 D0 01            [24] 1335 	pop	ar1
      000557 D0 04            [24] 1336 	pop	ar4
      000559 D0 05            [24] 1337 	pop	ar5
      00055B D0 06            [24] 1338 	pop	ar6
      00055D                       1339 00111$:
                                   1340 ;	walk.c:125: g[t.r][t.c] = 0xaa;
      00055D C0 05            [24] 1341 	push	ar5
      00055F C0 00            [24] 1342 	push	ar0
      000561 A8 06            [24] 1343 	mov	r0,ar6
      000563 86 03            [24] 1344 	mov	ar3,@r0
      000565 08               [12] 1345 	inc	r0
      000566 86 07            [24] 1346 	mov	ar7,@r0
      000568 D0 00            [24] 1347 	pop	ar0
      00056A C0 06            [24] 1348 	push	ar6
      00056C C0 05            [24] 1349 	push	ar5
      00056E C0 04            [24] 1350 	push	ar4
      000570 C0 01            [24] 1351 	push	ar1
      000572 C0 00            [24] 1352 	push	ar0
      000574 C0 03            [24] 1353 	push	ar3
      000576 C0 07            [24] 1354 	push	ar7
      000578 90 00 C0         [24] 1355 	mov	dptr,#0x00c0
      00057B 12r00r00         [24] 1356 	lcall	__mulint
      00057E AB 82            [24] 1357 	mov	r3,dpl
      000580 AF 83            [24] 1358 	mov	r7,dph
      000582 15 81            [12] 1359 	dec	sp
      000584 15 81            [12] 1360 	dec	sp
      000586 D0 00            [24] 1361 	pop	ar0
      000588 D0 01            [24] 1362 	pop	ar1
      00058A D0 04            [24] 1363 	pop	ar4
      00058C D0 05            [24] 1364 	pop	ar5
      00058E D0 06            [24] 1365 	pop	ar6
      000590 EB               [12] 1366 	mov	a,r3
      000591 24r00            [12] 1367 	add	a,#_g
      000593 FB               [12] 1368 	mov	r3,a
      000594 EF               [12] 1369 	mov	a,r7
      000595 34s00            [12] 1370 	addc	a,#(_g >> 8)
      000597 FF               [12] 1371 	mov	r7,a
      000598 C0 00            [24] 1372 	push	ar0
      00059A A8 04            [24] 1373 	mov	r0,ar4
      00059C 86 02            [24] 1374 	mov	ar2,@r0
      00059E 08               [12] 1375 	inc	r0
      00059F 86 05            [24] 1376 	mov	ar5,@r0
      0005A1 EA               [12] 1377 	mov	a,r2
      0005A2 2B               [12] 1378 	add	a,r3
      0005A3 F5 82            [12] 1379 	mov	dpl,a
      0005A5 ED               [12] 1380 	mov	a,r5
      0005A6 3F               [12] 1381 	addc	a,r7
      0005A7 F5 83            [12] 1382 	mov	dph,a
      0005A9 74 AA            [12] 1383 	mov	a,#0xaa
      0005AB F0               [24] 1384 	movx	@dptr,a
                                   1385 ;	walk.c:126: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      0005AC A8 04            [24] 1386 	mov	r0,ar4
      0005AE 86 05            [24] 1387 	mov	ar5,@r0
      0005B0 08               [12] 1388 	inc	r0
      0005B1 86 07            [24] 1389 	mov	ar7,@r0
      0005B3 D0 00            [24] 1390 	pop	ar0
      0005B5 0D               [12] 1391 	inc	r5
      0005B6 BD 00 01         [24] 1392 	cjne	r5,#0x00,00163$
      0005B9 0F               [12] 1393 	inc	r7
      0005BA                       1394 00163$:
      0005BA C0 00            [24] 1395 	push	ar0
      0005BC A8 06            [24] 1396 	mov	r0,ar6
      0005BE 86 02            [24] 1397 	mov	ar2,@r0
      0005C0 08               [12] 1398 	inc	r0
      0005C1 86 03            [24] 1399 	mov	ar3,@r0
      0005C3 D0 00            [24] 1400 	pop	ar0
      0005C5 74 04            [12] 1401 	mov	a,#0x04
      0005C7 2A               [12] 1402 	add	a,r2
      0005C8 FA               [12] 1403 	mov	r2,a
      0005C9 E4               [12] 1404 	clr	a
      0005CA 3B               [12] 1405 	addc	a,r3
      0005CB FB               [12] 1406 	mov	r3,a
      0005CC C0 06            [24] 1407 	push	ar6
      0005CE C0 05            [24] 1408 	push	ar5
      0005D0 C0 04            [24] 1409 	push	ar4
      0005D2 C0 01            [24] 1410 	push	ar1
      0005D4 C0 00            [24] 1411 	push	ar0
      0005D6 C0 05            [24] 1412 	push	ar5
      0005D8 C0 07            [24] 1413 	push	ar7
      0005DA C0 02            [24] 1414 	push	ar2
      0005DC C0 03            [24] 1415 	push	ar3
      0005DE 74r2E            [12] 1416 	mov	a,#___str_3
      0005E0 C0 E0            [24] 1417 	push	acc
      0005E2 74s00            [12] 1418 	mov	a,#(___str_3 >> 8)
      0005E4 C0 E0            [24] 1419 	push	acc
      0005E6 74 80            [12] 1420 	mov	a,#0x80
      0005E8 C0 E0            [24] 1421 	push	acc
      0005EA 12r00r00         [24] 1422 	lcall	_printf
      0005ED E5 81            [12] 1423 	mov	a,sp
      0005EF 24 F9            [12] 1424 	add	a,#0xf9
      0005F1 F5 81            [12] 1425 	mov	sp,a
      0005F3 D0 00            [24] 1426 	pop	ar0
      0005F5 D0 01            [24] 1427 	pop	ar1
      0005F7 D0 04            [24] 1428 	pop	ar4
      0005F9 D0 05            [24] 1429 	pop	ar5
      0005FB D0 06            [24] 1430 	pop	ar6
                                   1431 ;	walk.c:132: return;
      0005FD D0 05            [24] 1432 	pop	ar5
                                   1433 ;	walk.c:126: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      0005FF                       1434 00117$:
                                   1435 ;	walk.c:122: for (j = 0; j < NMAX; j++)
      0005FF C0 00            [24] 1436 	push	ar0
      000601 E5*00            [12] 1437 	mov	a,_bp
      000603 24 0D            [12] 1438 	add	a,#0x0d
      000605 F8               [12] 1439 	mov	r0,a
      000606 06               [12] 1440 	inc	@r0
      000607 E5*00            [12] 1441 	mov	a,_bp
      000609 24 0D            [12] 1442 	add	a,#0x0d
      00060B F8               [12] 1443 	mov	r0,a
      00060C B6 10 00         [24] 1444 	cjne	@r0,#0x10,00164$
      00060F                       1445 00164$:
      00060F D0 00            [24] 1446 	pop	ar0
      000611 50 03            [24] 1447 	jnc	00165$
      000613 02r04rB0         [24] 1448 	ljmp	00116$
      000616                       1449 00165$:
                                   1450 ;	walk.c:129: goto process;
      000616 02r03r5E         [24] 1451 	ljmp	00103$
                                   1452 ;	walk.c:131: term:
      000619                       1453 00115$:
                                   1454 ;	walk.c:132: return;
                                   1455 ;	walk.c:133: }
      000619 85*00 81         [24] 1456 	mov	sp,_bp
      00061C D0*00            [24] 1457 	pop	_bp
      00061E 22               [24] 1458 	ret
                                   1459 ;------------------------------------------------------------
                                   1460 ;Allocation info for local variables in function 'main'
                                   1461 ;------------------------------------------------------------
                                   1462 ;initial                   Allocated to stack - _bp +5
                                   1463 ;N                         Allocated to stack - _bp +9
                                   1464 ;i                         Allocated to stack - _bp +11
                                   1465 ;j                         Allocated to registers r2 r6 
                                   1466 ;sloc0                     Allocated to stack - _bp +1
                                   1467 ;sloc1                     Allocated to stack - _bp +3
                                   1468 ;sloc2                     Allocated to stack - _bp +15
                                   1469 ;R                         Allocated with name '_main_R_65536_63'
                                   1470 ;------------------------------------------------------------
                                   1471 ;	walk.c:135: int main(void) {
                                   1472 ;	-----------------------------------------
                                   1473 ;	 function main
                                   1474 ;	-----------------------------------------
      00061F                       1475 _main:
      00061F C0*00            [24] 1476 	push	_bp
      000621 E5 81            [12] 1477 	mov	a,sp
      000623 F5*00            [12] 1478 	mov	_bp,a
      000625 24 0C            [12] 1479 	add	a,#0x0c
      000627 F5 81            [12] 1480 	mov	sp,a
                                   1481 ;	walk.c:141: i0 = 1;
      000629 78r00            [12] 1482 	mov	r0,#_i0
      00062B 76 01            [12] 1483 	mov	@r0,#0x01
                                   1484 ;	walk.c:143: IT0 = 1;
                                   1485 ;	assignBit
      00062D D2 88            [12] 1486 	setb	_IT0
                                   1487 ;	walk.c:144: EX0 = 1;
                                   1488 ;	assignBit
      00062F D2 A8            [12] 1489 	setb	_EX0
                                   1490 ;	walk.c:145: EA = 1;
                                   1491 ;	assignBit
      000631 D2 AF            [12] 1492 	setb	_EA
                                   1493 ;	walk.c:147: srand(*R);
      000633 90rB4r04         [24] 1494 	mov	dptr,#_main_R_65536_63
      000636 E0               [24] 1495 	movx	a,@dptr
      000637 FE               [12] 1496 	mov	r6,a
      000638 A3               [24] 1497 	inc	dptr
      000639 E0               [24] 1498 	movx	a,@dptr
      00063A FF               [12] 1499 	mov	r7,a
      00063B 8E 82            [24] 1500 	mov	dpl,r6
      00063D 8F 83            [24] 1501 	mov	dph,r7
      00063F E0               [24] 1502 	movx	a,@dptr
      000640 FE               [12] 1503 	mov	r6,a
      000641 A3               [24] 1504 	inc	dptr
      000642 E0               [24] 1505 	movx	a,@dptr
      000643 FF               [12] 1506 	mov	r7,a
      000644 8E 82            [24] 1507 	mov	dpl,r6
      000646 8F 83            [24] 1508 	mov	dph,r7
      000648 12r00r00         [24] 1509 	lcall	_srand
                                   1510 ;	walk.c:148: qinit();
      00064B 12r0Br4B         [24] 1511 	lcall	_qinit
                                   1512 ;	walk.c:150: puts("\033[2J\033[?25l");
      00064E 90r00r38         [24] 1513 	mov	dptr,#___str_4
      000651 75 F0 80         [24] 1514 	mov	b,#0x80
      000654 12r00r00         [24] 1515 	lcall	_puts
                                   1516 ;	walk.c:152: while (i0) {
      000657 E5*00            [12] 1517 	mov	a,_bp
      000659 24 05            [12] 1518 	add	a,#0x05
      00065B F9               [12] 1519 	mov	r1,a
      00065C FF               [12] 1520 	mov	r7,a
      00065D E5*00            [12] 1521 	mov	a,_bp
      00065F 24 09            [12] 1522 	add	a,#0x09
      000661 F8               [12] 1523 	mov	r0,a
      000662 E4               [12] 1524 	clr	a
      000663 F6               [12] 1525 	mov	@r0,a
      000664 08               [12] 1526 	inc	r0
      000665 F6               [12] 1527 	mov	@r0,a
      000666                       1528 00109$:
      000666 78r00            [12] 1529 	mov	r0,#_i0
      000668 E6               [12] 1530 	mov	a,@r0
      000669 70 03            [24] 1531 	jnz	00193$
      00066B 02r0Br34         [24] 1532 	ljmp	00111$
      00066E                       1533 00193$:
                                   1534 ;	walk.c:153: for (i = 0; i < ROWS; i++)
      00066E 7B 00            [12] 1535 	mov	r3,#0x00
      000670 7C 00            [12] 1536 	mov	r4,#0x00
      000672 A8*00            [24] 1537 	mov	r0,_bp
      000674 08               [12] 1538 	inc	r0
      000675 E4               [12] 1539 	clr	a
      000676 F6               [12] 1540 	mov	@r0,a
      000677 08               [12] 1541 	inc	r0
      000678 F6               [12] 1542 	mov	@r0,a
                                   1543 ;	walk.c:154: for (j = 0; j < COLS; j++)
      000679                       1544 00127$:
      000679 A8*00            [24] 1545 	mov	r0,_bp
      00067B 08               [12] 1546 	inc	r0
      00067C C0 01            [24] 1547 	push	ar1
      00067E E5*00            [12] 1548 	mov	a,_bp
      000680 24 03            [12] 1549 	add	a,#0x03
      000682 F9               [12] 1550 	mov	r1,a
      000683 E6               [12] 1551 	mov	a,@r0
      000684 24r00            [12] 1552 	add	a,#_g
      000686 F7               [12] 1553 	mov	@r1,a
      000687 08               [12] 1554 	inc	r0
      000688 E6               [12] 1555 	mov	a,@r0
      000689 34s00            [12] 1556 	addc	a,#(_g >> 8)
      00068B 09               [12] 1557 	inc	r1
      00068C F7               [12] 1558 	mov	@r1,a
      00068D D0 01            [24] 1559 	pop	ar1
      00068F 7A 00            [12] 1560 	mov	r2,#0x00
      000691 7E 00            [12] 1561 	mov	r6,#0x00
      000693                       1562 00112$:
                                   1563 ;	walk.c:155: g[i][j] = 0x55;
      000693 E5*00            [12] 1564 	mov	a,_bp
      000695 24 03            [12] 1565 	add	a,#0x03
      000697 F8               [12] 1566 	mov	r0,a
      000698 EA               [12] 1567 	mov	a,r2
      000699 26               [12] 1568 	add	a,@r0
      00069A F5 82            [12] 1569 	mov	dpl,a
      00069C EE               [12] 1570 	mov	a,r6
      00069D 08               [12] 1571 	inc	r0
      00069E 36               [12] 1572 	addc	a,@r0
      00069F F5 83            [12] 1573 	mov	dph,a
      0006A1 74 55            [12] 1574 	mov	a,#0x55
      0006A3 F0               [24] 1575 	movx	@dptr,a
                                   1576 ;	walk.c:154: for (j = 0; j < COLS; j++)
      0006A4 0A               [12] 1577 	inc	r2
      0006A5 BA 00 01         [24] 1578 	cjne	r2,#0x00,00194$
      0006A8 0E               [12] 1579 	inc	r6
      0006A9                       1580 00194$:
      0006A9 C3               [12] 1581 	clr	c
      0006AA EA               [12] 1582 	mov	a,r2
      0006AB 94 C0            [12] 1583 	subb	a,#0xc0
      0006AD EE               [12] 1584 	mov	a,r6
      0006AE 64 80            [12] 1585 	xrl	a,#0x80
      0006B0 94 80            [12] 1586 	subb	a,#0x80
      0006B2 40 DF            [24] 1587 	jc	00112$
                                   1588 ;	walk.c:153: for (i = 0; i < ROWS; i++)
      0006B4 A8*00            [24] 1589 	mov	r0,_bp
      0006B6 08               [12] 1590 	inc	r0
      0006B7 74 C0            [12] 1591 	mov	a,#0xc0
      0006B9 26               [12] 1592 	add	a,@r0
      0006BA F6               [12] 1593 	mov	@r0,a
      0006BB E4               [12] 1594 	clr	a
      0006BC 08               [12] 1595 	inc	r0
      0006BD 36               [12] 1596 	addc	a,@r0
      0006BE F6               [12] 1597 	mov	@r0,a
      0006BF 0B               [12] 1598 	inc	r3
      0006C0 BB 00 01         [24] 1599 	cjne	r3,#0x00,00196$
      0006C3 0C               [12] 1600 	inc	r4
      0006C4                       1601 00196$:
      0006C4 C3               [12] 1602 	clr	c
      0006C5 EB               [12] 1603 	mov	a,r3
      0006C6 94 30            [12] 1604 	subb	a,#0x30
      0006C8 EC               [12] 1605 	mov	a,r4
      0006C9 64 80            [12] 1606 	xrl	a,#0x80
      0006CB 94 80            [12] 1607 	subb	a,#0x80
      0006CD 40 AA            [24] 1608 	jc	00127$
                                   1609 ;	walk.c:157: initial.r = rand() % ROWS;
      0006CF E5*00            [12] 1610 	mov	a,_bp
      0006D1 24 05            [12] 1611 	add	a,#0x05
      0006D3 F8               [12] 1612 	mov	r0,a
      0006D4 C0 07            [24] 1613 	push	ar7
      0006D6 C0 01            [24] 1614 	push	ar1
      0006D8 C0 00            [24] 1615 	push	ar0
      0006DA 12r00r00         [24] 1616 	lcall	_rand
      0006DD AD 82            [24] 1617 	mov	r5,dpl
      0006DF AE 83            [24] 1618 	mov	r6,dph
      0006E1 74 30            [12] 1619 	mov	a,#0x30
      0006E3 C0 E0            [24] 1620 	push	acc
      0006E5 E4               [12] 1621 	clr	a
      0006E6 C0 E0            [24] 1622 	push	acc
      0006E8 8D 82            [24] 1623 	mov	dpl,r5
      0006EA 8E 83            [24] 1624 	mov	dph,r6
      0006EC 12r00r00         [24] 1625 	lcall	__modsint
      0006EF AD 82            [24] 1626 	mov	r5,dpl
      0006F1 AE 83            [24] 1627 	mov	r6,dph
      0006F3 15 81            [12] 1628 	dec	sp
      0006F5 15 81            [12] 1629 	dec	sp
      0006F7 D0 00            [24] 1630 	pop	ar0
      0006F9 D0 01            [24] 1631 	pop	ar1
      0006FB A6 05            [24] 1632 	mov	@r0,ar5
      0006FD 08               [12] 1633 	inc	r0
      0006FE A6 06            [24] 1634 	mov	@r0,ar6
      000700 18               [12] 1635 	dec	r0
                                   1636 ;	walk.c:158: initial.c = rand() % COLS;
      000701 74 02            [12] 1637 	mov	a,#0x02
      000703 29               [12] 1638 	add	a,r1
      000704 F8               [12] 1639 	mov	r0,a
      000705 C0 01            [24] 1640 	push	ar1
      000707 C0 00            [24] 1641 	push	ar0
      000709 12r00r00         [24] 1642 	lcall	_rand
      00070C AD 82            [24] 1643 	mov	r5,dpl
      00070E AE 83            [24] 1644 	mov	r6,dph
      000710 74 C0            [12] 1645 	mov	a,#0xc0
      000712 C0 E0            [24] 1646 	push	acc
      000714 E4               [12] 1647 	clr	a
      000715 C0 E0            [24] 1648 	push	acc
      000717 8D 82            [24] 1649 	mov	dpl,r5
      000719 8E 83            [24] 1650 	mov	dph,r6
      00071B 12r00r00         [24] 1651 	lcall	__modsint
      00071E AD 82            [24] 1652 	mov	r5,dpl
      000720 AE 83            [24] 1653 	mov	r6,dph
      000722 15 81            [12] 1654 	dec	sp
      000724 15 81            [12] 1655 	dec	sp
      000726 D0 00            [24] 1656 	pop	ar0
      000728 A6 05            [24] 1657 	mov	@r0,ar5
      00072A 08               [12] 1658 	inc	r0
      00072B A6 06            [24] 1659 	mov	@r0,ar6
      00072D 18               [12] 1660 	dec	r0
                                   1661 ;	walk.c:160: puts("\033[2J\033[?25l");
      00072E 90r00r38         [24] 1662 	mov	dptr,#___str_4
      000731 75 F0 80         [24] 1663 	mov	b,#0x80
      000734 C0 00            [24] 1664 	push	ar0
      000736 12r00r00         [24] 1665 	lcall	_puts
      000739 D0 00            [24] 1666 	pop	ar0
      00073B D0 01            [24] 1667 	pop	ar1
                                   1668 ;	walk.c:161: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00073D 86 05            [24] 1669 	mov	ar5,@r0
      00073F 08               [12] 1670 	inc	r0
      000740 86 06            [24] 1671 	mov	ar6,@r0
      000742 18               [12] 1672 	dec	r0
      000743 87 03            [24] 1673 	mov	ar3,@r1
      000745 09               [12] 1674 	inc	r1
      000746 87 04            [24] 1675 	mov	ar4,@r1
      000748 19               [12] 1676 	dec	r1
      000749 C0 01            [24] 1677 	push	ar1
      00074B C0 05            [24] 1678 	push	ar5
      00074D C0 06            [24] 1679 	push	ar6
      00074F C0 03            [24] 1680 	push	ar3
      000751 C0 04            [24] 1681 	push	ar4
      000753 E5*00            [12] 1682 	mov	a,_bp
      000755 24 09            [12] 1683 	add	a,#0x09
      000757 F8               [12] 1684 	mov	r0,a
      000758 E6               [12] 1685 	mov	a,@r0
      000759 C0 E0            [24] 1686 	push	acc
      00075B 08               [12] 1687 	inc	r0
      00075C E6               [12] 1688 	mov	a,@r0
      00075D C0 E0            [24] 1689 	push	acc
      00075F 74r43            [12] 1690 	mov	a,#___str_5
      000761 C0 E0            [24] 1691 	push	acc
      000763 74s00            [12] 1692 	mov	a,#(___str_5 >> 8)
      000765 C0 E0            [24] 1693 	push	acc
      000767 74 80            [12] 1694 	mov	a,#0x80
      000769 C0 E0            [24] 1695 	push	acc
      00076B 12r00r00         [24] 1696 	lcall	_printf
      00076E E5 81            [12] 1697 	mov	a,sp
      000770 24 F7            [12] 1698 	add	a,#0xf7
      000772 F5 81            [12] 1699 	mov	sp,a
      000774 D0 01            [24] 1700 	pop	ar1
      000776 D0 07            [24] 1701 	pop	ar7
                                   1702 ;	walk.c:163: for (i = 0; i < REG; i++) {
      000778 E5*00            [12] 1703 	mov	a,_bp
      00077A 24 0B            [12] 1704 	add	a,#0x0b
      00077C F8               [12] 1705 	mov	r0,a
      00077D E4               [12] 1706 	clr	a
      00077E F6               [12] 1707 	mov	@r0,a
      00077F 08               [12] 1708 	inc	r0
      000780 F6               [12] 1709 	mov	@r0,a
      000781                       1710 00116$:
                                   1711 ;	walk.c:164: neigh[i].r = neigh_tmpl[i].r * (1 + rand() % 4);
      000781 C0 07            [24] 1712 	push	ar7
      000783 E5*00            [12] 1713 	mov	a,_bp
      000785 24 0B            [12] 1714 	add	a,#0x0b
      000787 F8               [12] 1715 	mov	r0,a
      000788 E6               [12] 1716 	mov	a,@r0
      000789 25 E0            [12] 1717 	add	a,acc
      00078B FB               [12] 1718 	mov	r3,a
      00078C 08               [12] 1719 	inc	r0
      00078D E6               [12] 1720 	mov	a,@r0
      00078E 33               [12] 1721 	rlc	a
      00078F FC               [12] 1722 	mov	r4,a
      000790 EB               [12] 1723 	mov	a,r3
      000791 2B               [12] 1724 	add	a,r3
      000792 FB               [12] 1725 	mov	r3,a
      000793 EC               [12] 1726 	mov	a,r4
      000794 33               [12] 1727 	rlc	a
      000795 FC               [12] 1728 	mov	r4,a
      000796 EB               [12] 1729 	mov	a,r3
      000797 24r40            [12] 1730 	add	a,#_neigh
      000799 FA               [12] 1731 	mov	r2,a
      00079A EC               [12] 1732 	mov	a,r4
      00079B 34s00            [12] 1733 	addc	a,#(_neigh >> 8)
      00079D FF               [12] 1734 	mov	r7,a
      00079E EB               [12] 1735 	mov	a,r3
      00079F 24r00            [12] 1736 	add	a,#_neigh_tmpl
      0007A1 F5 82            [12] 1737 	mov	dpl,a
      0007A3 EC               [12] 1738 	mov	a,r4
      0007A4 34s00            [12] 1739 	addc	a,#(_neigh_tmpl >> 8)
      0007A6 F5 83            [12] 1740 	mov	dph,a
      0007A8 E5*00            [12] 1741 	mov	a,_bp
      0007AA 24 03            [12] 1742 	add	a,#0x03
      0007AC F8               [12] 1743 	mov	r0,a
      0007AD E0               [24] 1744 	movx	a,@dptr
      0007AE F6               [12] 1745 	mov	@r0,a
      0007AF A3               [24] 1746 	inc	dptr
      0007B0 E0               [24] 1747 	movx	a,@dptr
      0007B1 08               [12] 1748 	inc	r0
      0007B2 F6               [12] 1749 	mov	@r0,a
      0007B3 C0 07            [24] 1750 	push	ar7
      0007B5 C0 04            [24] 1751 	push	ar4
      0007B7 C0 03            [24] 1752 	push	ar3
      0007B9 C0 02            [24] 1753 	push	ar2
      0007BB C0 01            [24] 1754 	push	ar1
      0007BD 12r00r00         [24] 1755 	lcall	_rand
      0007C0 AD 82            [24] 1756 	mov	r5,dpl
      0007C2 AE 83            [24] 1757 	mov	r6,dph
      0007C4 74 04            [12] 1758 	mov	a,#0x04
      0007C6 C0 E0            [24] 1759 	push	acc
      0007C8 E4               [12] 1760 	clr	a
      0007C9 C0 E0            [24] 1761 	push	acc
      0007CB 8D 82            [24] 1762 	mov	dpl,r5
      0007CD 8E 83            [24] 1763 	mov	dph,r6
      0007CF 12r00r00         [24] 1764 	lcall	__modsint
      0007D2 AD 82            [24] 1765 	mov	r5,dpl
      0007D4 AE 83            [24] 1766 	mov	r6,dph
      0007D6 15 81            [12] 1767 	dec	sp
      0007D8 15 81            [12] 1768 	dec	sp
      0007DA D0 01            [24] 1769 	pop	ar1
      0007DC D0 02            [24] 1770 	pop	ar2
      0007DE D0 03            [24] 1771 	pop	ar3
      0007E0 D0 04            [24] 1772 	pop	ar4
      0007E2 D0 07            [24] 1773 	pop	ar7
      0007E4 0D               [12] 1774 	inc	r5
      0007E5 BD 00 01         [24] 1775 	cjne	r5,#0x00,00198$
      0007E8 0E               [12] 1776 	inc	r6
      0007E9                       1777 00198$:
      0007E9 C0 07            [24] 1778 	push	ar7
      0007EB C0 04            [24] 1779 	push	ar4
      0007ED C0 03            [24] 1780 	push	ar3
      0007EF C0 02            [24] 1781 	push	ar2
      0007F1 C0 01            [24] 1782 	push	ar1
      0007F3 C0 05            [24] 1783 	push	ar5
      0007F5 C0 06            [24] 1784 	push	ar6
      0007F7 E5*00            [12] 1785 	mov	a,_bp
      0007F9 24 03            [12] 1786 	add	a,#0x03
      0007FB F8               [12] 1787 	mov	r0,a
      0007FC 86 82            [24] 1788 	mov	dpl,@r0
      0007FE 08               [12] 1789 	inc	r0
      0007FF 86 83            [24] 1790 	mov	dph,@r0
      000801 12r00r00         [24] 1791 	lcall	__mulint
      000804 AD 82            [24] 1792 	mov	r5,dpl
      000806 AE 83            [24] 1793 	mov	r6,dph
      000808 15 81            [12] 1794 	dec	sp
      00080A 15 81            [12] 1795 	dec	sp
      00080C D0 01            [24] 1796 	pop	ar1
      00080E D0 02            [24] 1797 	pop	ar2
      000810 D0 03            [24] 1798 	pop	ar3
      000812 D0 04            [24] 1799 	pop	ar4
      000814 D0 07            [24] 1800 	pop	ar7
      000816 8A 82            [24] 1801 	mov	dpl,r2
      000818 8F 83            [24] 1802 	mov	dph,r7
      00081A ED               [12] 1803 	mov	a,r5
      00081B F0               [24] 1804 	movx	@dptr,a
      00081C EE               [12] 1805 	mov	a,r6
      00081D A3               [24] 1806 	inc	dptr
      00081E F0               [24] 1807 	movx	@dptr,a
                                   1808 ;	walk.c:165: neigh[i].c = neigh_tmpl[i].c * (1 + rand() % 4);
      00081F EB               [12] 1809 	mov	a,r3
      000820 24r40            [12] 1810 	add	a,#_neigh
      000822 FE               [12] 1811 	mov	r6,a
      000823 EC               [12] 1812 	mov	a,r4
      000824 34s00            [12] 1813 	addc	a,#(_neigh >> 8)
      000826 FF               [12] 1814 	mov	r7,a
      000827 74 02            [12] 1815 	mov	a,#0x02
      000829 2E               [12] 1816 	add	a,r6
      00082A FA               [12] 1817 	mov	r2,a
      00082B E4               [12] 1818 	clr	a
      00082C 3F               [12] 1819 	addc	a,r7
      00082D FD               [12] 1820 	mov	r5,a
      00082E EB               [12] 1821 	mov	a,r3
      00082F 24r00            [12] 1822 	add	a,#_neigh_tmpl
      000831 FB               [12] 1823 	mov	r3,a
      000832 EC               [12] 1824 	mov	a,r4
      000833 34s00            [12] 1825 	addc	a,#(_neigh_tmpl >> 8)
      000835 FC               [12] 1826 	mov	r4,a
      000836 8B 82            [24] 1827 	mov	dpl,r3
      000838 8C 83            [24] 1828 	mov	dph,r4
      00083A A3               [24] 1829 	inc	dptr
      00083B A3               [24] 1830 	inc	dptr
      00083C E5*00            [12] 1831 	mov	a,_bp
      00083E 24 03            [12] 1832 	add	a,#0x03
      000840 F8               [12] 1833 	mov	r0,a
      000841 E0               [24] 1834 	movx	a,@dptr
      000842 F6               [12] 1835 	mov	@r0,a
      000843 A3               [24] 1836 	inc	dptr
      000844 E0               [24] 1837 	movx	a,@dptr
      000845 08               [12] 1838 	inc	r0
      000846 F6               [12] 1839 	mov	@r0,a
      000847 C0 07            [24] 1840 	push	ar7
      000849 C0 06            [24] 1841 	push	ar6
      00084B C0 05            [24] 1842 	push	ar5
      00084D C0 02            [24] 1843 	push	ar2
      00084F C0 01            [24] 1844 	push	ar1
      000851 12r00r00         [24] 1845 	lcall	_rand
      000854 AB 82            [24] 1846 	mov	r3,dpl
      000856 AC 83            [24] 1847 	mov	r4,dph
      000858 74 04            [12] 1848 	mov	a,#0x04
      00085A C0 E0            [24] 1849 	push	acc
      00085C E4               [12] 1850 	clr	a
      00085D C0 E0            [24] 1851 	push	acc
      00085F 8B 82            [24] 1852 	mov	dpl,r3
      000861 8C 83            [24] 1853 	mov	dph,r4
      000863 12r00r00         [24] 1854 	lcall	__modsint
      000866 AB 82            [24] 1855 	mov	r3,dpl
      000868 AC 83            [24] 1856 	mov	r4,dph
      00086A 15 81            [12] 1857 	dec	sp
      00086C 15 81            [12] 1858 	dec	sp
      00086E D0 01            [24] 1859 	pop	ar1
      000870 D0 02            [24] 1860 	pop	ar2
      000872 D0 05            [24] 1861 	pop	ar5
      000874 D0 06            [24] 1862 	pop	ar6
      000876 D0 07            [24] 1863 	pop	ar7
      000878 0B               [12] 1864 	inc	r3
      000879 BB 00 01         [24] 1865 	cjne	r3,#0x00,00199$
      00087C 0C               [12] 1866 	inc	r4
      00087D                       1867 00199$:
      00087D C0 07            [24] 1868 	push	ar7
      00087F C0 06            [24] 1869 	push	ar6
      000881 C0 05            [24] 1870 	push	ar5
      000883 C0 02            [24] 1871 	push	ar2
      000885 C0 01            [24] 1872 	push	ar1
      000887 C0 03            [24] 1873 	push	ar3
      000889 C0 04            [24] 1874 	push	ar4
      00088B E5*00            [12] 1875 	mov	a,_bp
      00088D 24 03            [12] 1876 	add	a,#0x03
      00088F F8               [12] 1877 	mov	r0,a
      000890 86 82            [24] 1878 	mov	dpl,@r0
      000892 08               [12] 1879 	inc	r0
      000893 86 83            [24] 1880 	mov	dph,@r0
      000895 12r00r00         [24] 1881 	lcall	__mulint
      000898 AB 82            [24] 1882 	mov	r3,dpl
      00089A AC 83            [24] 1883 	mov	r4,dph
      00089C 15 81            [12] 1884 	dec	sp
      00089E 15 81            [12] 1885 	dec	sp
      0008A0 D0 01            [24] 1886 	pop	ar1
      0008A2 D0 02            [24] 1887 	pop	ar2
      0008A4 D0 05            [24] 1888 	pop	ar5
      0008A6 D0 06            [24] 1889 	pop	ar6
      0008A8 D0 07            [24] 1890 	pop	ar7
      0008AA 8A 82            [24] 1891 	mov	dpl,r2
      0008AC 8D 83            [24] 1892 	mov	dph,r5
      0008AE EB               [12] 1893 	mov	a,r3
      0008AF F0               [24] 1894 	movx	@dptr,a
      0008B0 EC               [12] 1895 	mov	a,r4
      0008B1 A3               [24] 1896 	inc	dptr
      0008B2 F0               [24] 1897 	movx	@dptr,a
                                   1898 ;	walk.c:166: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      0008B3 8E 82            [24] 1899 	mov	dpl,r6
      0008B5 8F 83            [24] 1900 	mov	dph,r7
      0008B7 E0               [24] 1901 	movx	a,@dptr
      0008B8 FE               [12] 1902 	mov	r6,a
      0008B9 A3               [24] 1903 	inc	dptr
      0008BA E0               [24] 1904 	movx	a,@dptr
      0008BB FF               [12] 1905 	mov	r7,a
      0008BC C0 07            [24] 1906 	push	ar7
      0008BE C0 01            [24] 1907 	push	ar1
      0008C0 C0 03            [24] 1908 	push	ar3
      0008C2 C0 04            [24] 1909 	push	ar4
      0008C4 C0 06            [24] 1910 	push	ar6
      0008C6 C0 07            [24] 1911 	push	ar7
      0008C8 74r56            [12] 1912 	mov	a,#___str_6
      0008CA C0 E0            [24] 1913 	push	acc
      0008CC 74s00            [12] 1914 	mov	a,#(___str_6 >> 8)
      0008CE C0 E0            [24] 1915 	push	acc
      0008D0 74 80            [12] 1916 	mov	a,#0x80
      0008D2 C0 E0            [24] 1917 	push	acc
      0008D4 12r00r00         [24] 1918 	lcall	_printf
      0008D7 E5 81            [12] 1919 	mov	a,sp
      0008D9 24 F9            [12] 1920 	add	a,#0xf9
      0008DB F5 81            [12] 1921 	mov	sp,a
      0008DD D0 01            [24] 1922 	pop	ar1
      0008DF D0 07            [24] 1923 	pop	ar7
                                   1924 ;	walk.c:163: for (i = 0; i < REG; i++) {
      0008E1 E5*00            [12] 1925 	mov	a,_bp
      0008E3 24 0B            [12] 1926 	add	a,#0x0b
      0008E5 F8               [12] 1927 	mov	r0,a
      0008E6 06               [12] 1928 	inc	@r0
      0008E7 B6 00 02         [24] 1929 	cjne	@r0,#0x00,00200$
      0008EA 08               [12] 1930 	inc	r0
      0008EB 06               [12] 1931 	inc	@r0
      0008EC                       1932 00200$:
      0008EC E5*00            [12] 1933 	mov	a,_bp
      0008EE 24 0B            [12] 1934 	add	a,#0x0b
      0008F0 F8               [12] 1935 	mov	r0,a
      0008F1 C3               [12] 1936 	clr	c
      0008F2 E6               [12] 1937 	mov	a,@r0
      0008F3 94 04            [12] 1938 	subb	a,#0x04
      0008F5 08               [12] 1939 	inc	r0
      0008F6 E6               [12] 1940 	mov	a,@r0
      0008F7 64 80            [12] 1941 	xrl	a,#0x80
      0008F9 94 80            [12] 1942 	subb	a,#0x80
      0008FB D0 07            [24] 1943 	pop	ar7
      0008FD 50 03            [24] 1944 	jnc	00201$
      0008FF 02r07r81         [24] 1945 	ljmp	00116$
      000902                       1946 00201$:
                                   1947 ;	walk.c:169: for (i = REG; i < (2 * REG); i++) {
      000902 E5*00            [12] 1948 	mov	a,_bp
      000904 24 0B            [12] 1949 	add	a,#0x0b
      000906 F8               [12] 1950 	mov	r0,a
      000907 76 04            [12] 1951 	mov	@r0,#0x04
      000909 08               [12] 1952 	inc	r0
      00090A 76 00            [12] 1953 	mov	@r0,#0x00
      00090C                       1954 00118$:
                                   1955 ;	walk.c:170: neigh[i].r = neigh_tmpl[i].r * (1 + rand() % 4);
      00090C C0 07            [24] 1956 	push	ar7
      00090E E5*00            [12] 1957 	mov	a,_bp
      000910 24 0B            [12] 1958 	add	a,#0x0b
      000912 F8               [12] 1959 	mov	r0,a
      000913 E6               [12] 1960 	mov	a,@r0
      000914 25 E0            [12] 1961 	add	a,acc
      000916 FB               [12] 1962 	mov	r3,a
      000917 08               [12] 1963 	inc	r0
      000918 E6               [12] 1964 	mov	a,@r0
      000919 33               [12] 1965 	rlc	a
      00091A FC               [12] 1966 	mov	r4,a
      00091B EB               [12] 1967 	mov	a,r3
      00091C 2B               [12] 1968 	add	a,r3
      00091D FB               [12] 1969 	mov	r3,a
      00091E EC               [12] 1970 	mov	a,r4
      00091F 33               [12] 1971 	rlc	a
      000920 FC               [12] 1972 	mov	r4,a
      000921 EB               [12] 1973 	mov	a,r3
      000922 24r40            [12] 1974 	add	a,#_neigh
      000924 FA               [12] 1975 	mov	r2,a
      000925 EC               [12] 1976 	mov	a,r4
      000926 34s00            [12] 1977 	addc	a,#(_neigh >> 8)
      000928 FF               [12] 1978 	mov	r7,a
      000929 EB               [12] 1979 	mov	a,r3
      00092A 24r00            [12] 1980 	add	a,#_neigh_tmpl
      00092C F5 82            [12] 1981 	mov	dpl,a
      00092E EC               [12] 1982 	mov	a,r4
      00092F 34s00            [12] 1983 	addc	a,#(_neigh_tmpl >> 8)
      000931 F5 83            [12] 1984 	mov	dph,a
      000933 E5*00            [12] 1985 	mov	a,_bp
      000935 24 03            [12] 1986 	add	a,#0x03
      000937 F8               [12] 1987 	mov	r0,a
      000938 E0               [24] 1988 	movx	a,@dptr
      000939 F6               [12] 1989 	mov	@r0,a
      00093A A3               [24] 1990 	inc	dptr
      00093B E0               [24] 1991 	movx	a,@dptr
      00093C 08               [12] 1992 	inc	r0
      00093D F6               [12] 1993 	mov	@r0,a
      00093E C0 07            [24] 1994 	push	ar7
      000940 C0 04            [24] 1995 	push	ar4
      000942 C0 03            [24] 1996 	push	ar3
      000944 C0 02            [24] 1997 	push	ar2
      000946 C0 01            [24] 1998 	push	ar1
      000948 12r00r00         [24] 1999 	lcall	_rand
      00094B AD 82            [24] 2000 	mov	r5,dpl
      00094D AE 83            [24] 2001 	mov	r6,dph
      00094F 74 04            [12] 2002 	mov	a,#0x04
      000951 C0 E0            [24] 2003 	push	acc
      000953 E4               [12] 2004 	clr	a
      000954 C0 E0            [24] 2005 	push	acc
      000956 8D 82            [24] 2006 	mov	dpl,r5
      000958 8E 83            [24] 2007 	mov	dph,r6
      00095A 12r00r00         [24] 2008 	lcall	__modsint
      00095D AD 82            [24] 2009 	mov	r5,dpl
      00095F AE 83            [24] 2010 	mov	r6,dph
      000961 15 81            [12] 2011 	dec	sp
      000963 15 81            [12] 2012 	dec	sp
      000965 D0 01            [24] 2013 	pop	ar1
      000967 D0 02            [24] 2014 	pop	ar2
      000969 D0 03            [24] 2015 	pop	ar3
      00096B D0 04            [24] 2016 	pop	ar4
      00096D D0 07            [24] 2017 	pop	ar7
      00096F 0D               [12] 2018 	inc	r5
      000970 BD 00 01         [24] 2019 	cjne	r5,#0x00,00202$
      000973 0E               [12] 2020 	inc	r6
      000974                       2021 00202$:
      000974 C0 07            [24] 2022 	push	ar7
      000976 C0 04            [24] 2023 	push	ar4
      000978 C0 03            [24] 2024 	push	ar3
      00097A C0 02            [24] 2025 	push	ar2
      00097C C0 01            [24] 2026 	push	ar1
      00097E C0 05            [24] 2027 	push	ar5
      000980 C0 06            [24] 2028 	push	ar6
      000982 E5*00            [12] 2029 	mov	a,_bp
      000984 24 03            [12] 2030 	add	a,#0x03
      000986 F8               [12] 2031 	mov	r0,a
      000987 86 82            [24] 2032 	mov	dpl,@r0
      000989 08               [12] 2033 	inc	r0
      00098A 86 83            [24] 2034 	mov	dph,@r0
      00098C 12r00r00         [24] 2035 	lcall	__mulint
      00098F AD 82            [24] 2036 	mov	r5,dpl
      000991 AE 83            [24] 2037 	mov	r6,dph
      000993 15 81            [12] 2038 	dec	sp
      000995 15 81            [12] 2039 	dec	sp
      000997 D0 01            [24] 2040 	pop	ar1
      000999 D0 02            [24] 2041 	pop	ar2
      00099B D0 03            [24] 2042 	pop	ar3
      00099D D0 04            [24] 2043 	pop	ar4
      00099F D0 07            [24] 2044 	pop	ar7
      0009A1 8A 82            [24] 2045 	mov	dpl,r2
      0009A3 8F 83            [24] 2046 	mov	dph,r7
      0009A5 ED               [12] 2047 	mov	a,r5
      0009A6 F0               [24] 2048 	movx	@dptr,a
      0009A7 EE               [12] 2049 	mov	a,r6
      0009A8 A3               [24] 2050 	inc	dptr
      0009A9 F0               [24] 2051 	movx	@dptr,a
                                   2052 ;	walk.c:171: neigh[i].c = neigh_tmpl[i].c * (1 + rand() % 4);
      0009AA EB               [12] 2053 	mov	a,r3
      0009AB 24r40            [12] 2054 	add	a,#_neigh
      0009AD FE               [12] 2055 	mov	r6,a
      0009AE EC               [12] 2056 	mov	a,r4
      0009AF 34s00            [12] 2057 	addc	a,#(_neigh >> 8)
      0009B1 FF               [12] 2058 	mov	r7,a
      0009B2 74 02            [12] 2059 	mov	a,#0x02
      0009B4 2E               [12] 2060 	add	a,r6
      0009B5 FA               [12] 2061 	mov	r2,a
      0009B6 E4               [12] 2062 	clr	a
      0009B7 3F               [12] 2063 	addc	a,r7
      0009B8 FD               [12] 2064 	mov	r5,a
      0009B9 EB               [12] 2065 	mov	a,r3
      0009BA 24r00            [12] 2066 	add	a,#_neigh_tmpl
      0009BC FB               [12] 2067 	mov	r3,a
      0009BD EC               [12] 2068 	mov	a,r4
      0009BE 34s00            [12] 2069 	addc	a,#(_neigh_tmpl >> 8)
      0009C0 FC               [12] 2070 	mov	r4,a
      0009C1 8B 82            [24] 2071 	mov	dpl,r3
      0009C3 8C 83            [24] 2072 	mov	dph,r4
      0009C5 A3               [24] 2073 	inc	dptr
      0009C6 A3               [24] 2074 	inc	dptr
      0009C7 E5*00            [12] 2075 	mov	a,_bp
      0009C9 24 03            [12] 2076 	add	a,#0x03
      0009CB F8               [12] 2077 	mov	r0,a
      0009CC E0               [24] 2078 	movx	a,@dptr
      0009CD F6               [12] 2079 	mov	@r0,a
      0009CE A3               [24] 2080 	inc	dptr
      0009CF E0               [24] 2081 	movx	a,@dptr
      0009D0 08               [12] 2082 	inc	r0
      0009D1 F6               [12] 2083 	mov	@r0,a
      0009D2 C0 07            [24] 2084 	push	ar7
      0009D4 C0 06            [24] 2085 	push	ar6
      0009D6 C0 05            [24] 2086 	push	ar5
      0009D8 C0 02            [24] 2087 	push	ar2
      0009DA C0 01            [24] 2088 	push	ar1
      0009DC 12r00r00         [24] 2089 	lcall	_rand
      0009DF AB 82            [24] 2090 	mov	r3,dpl
      0009E1 AC 83            [24] 2091 	mov	r4,dph
      0009E3 74 04            [12] 2092 	mov	a,#0x04
      0009E5 C0 E0            [24] 2093 	push	acc
      0009E7 E4               [12] 2094 	clr	a
      0009E8 C0 E0            [24] 2095 	push	acc
      0009EA 8B 82            [24] 2096 	mov	dpl,r3
      0009EC 8C 83            [24] 2097 	mov	dph,r4
      0009EE 12r00r00         [24] 2098 	lcall	__modsint
      0009F1 AB 82            [24] 2099 	mov	r3,dpl
      0009F3 AC 83            [24] 2100 	mov	r4,dph
      0009F5 15 81            [12] 2101 	dec	sp
      0009F7 15 81            [12] 2102 	dec	sp
      0009F9 D0 01            [24] 2103 	pop	ar1
      0009FB D0 02            [24] 2104 	pop	ar2
      0009FD D0 05            [24] 2105 	pop	ar5
      0009FF D0 06            [24] 2106 	pop	ar6
      000A01 D0 07            [24] 2107 	pop	ar7
      000A03 0B               [12] 2108 	inc	r3
      000A04 BB 00 01         [24] 2109 	cjne	r3,#0x00,00203$
      000A07 0C               [12] 2110 	inc	r4
      000A08                       2111 00203$:
      000A08 C0 07            [24] 2112 	push	ar7
      000A0A C0 06            [24] 2113 	push	ar6
      000A0C C0 05            [24] 2114 	push	ar5
      000A0E C0 02            [24] 2115 	push	ar2
      000A10 C0 01            [24] 2116 	push	ar1
      000A12 C0 03            [24] 2117 	push	ar3
      000A14 C0 04            [24] 2118 	push	ar4
      000A16 E5*00            [12] 2119 	mov	a,_bp
      000A18 24 03            [12] 2120 	add	a,#0x03
      000A1A F8               [12] 2121 	mov	r0,a
      000A1B 86 82            [24] 2122 	mov	dpl,@r0
      000A1D 08               [12] 2123 	inc	r0
      000A1E 86 83            [24] 2124 	mov	dph,@r0
      000A20 12r00r00         [24] 2125 	lcall	__mulint
      000A23 AB 82            [24] 2126 	mov	r3,dpl
      000A25 AC 83            [24] 2127 	mov	r4,dph
      000A27 15 81            [12] 2128 	dec	sp
      000A29 15 81            [12] 2129 	dec	sp
      000A2B D0 01            [24] 2130 	pop	ar1
      000A2D D0 02            [24] 2131 	pop	ar2
      000A2F D0 05            [24] 2132 	pop	ar5
      000A31 D0 06            [24] 2133 	pop	ar6
      000A33 D0 07            [24] 2134 	pop	ar7
      000A35 8A 82            [24] 2135 	mov	dpl,r2
      000A37 8D 83            [24] 2136 	mov	dph,r5
      000A39 EB               [12] 2137 	mov	a,r3
      000A3A F0               [24] 2138 	movx	@dptr,a
      000A3B EC               [12] 2139 	mov	a,r4
      000A3C A3               [24] 2140 	inc	dptr
      000A3D F0               [24] 2141 	movx	@dptr,a
                                   2142 ;	walk.c:172: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000A3E 8E 82            [24] 2143 	mov	dpl,r6
      000A40 8F 83            [24] 2144 	mov	dph,r7
      000A42 E0               [24] 2145 	movx	a,@dptr
      000A43 FE               [12] 2146 	mov	r6,a
      000A44 A3               [24] 2147 	inc	dptr
      000A45 E0               [24] 2148 	movx	a,@dptr
      000A46 FF               [12] 2149 	mov	r7,a
      000A47 C0 07            [24] 2150 	push	ar7
      000A49 C0 01            [24] 2151 	push	ar1
      000A4B C0 03            [24] 2152 	push	ar3
      000A4D C0 04            [24] 2153 	push	ar4
      000A4F C0 06            [24] 2154 	push	ar6
      000A51 C0 07            [24] 2155 	push	ar7
      000A53 74r56            [12] 2156 	mov	a,#___str_6
      000A55 C0 E0            [24] 2157 	push	acc
      000A57 74s00            [12] 2158 	mov	a,#(___str_6 >> 8)
      000A59 C0 E0            [24] 2159 	push	acc
      000A5B 74 80            [12] 2160 	mov	a,#0x80
      000A5D C0 E0            [24] 2161 	push	acc
      000A5F 12r00r00         [24] 2162 	lcall	_printf
      000A62 E5 81            [12] 2163 	mov	a,sp
      000A64 24 F9            [12] 2164 	add	a,#0xf9
      000A66 F5 81            [12] 2165 	mov	sp,a
      000A68 D0 01            [24] 2166 	pop	ar1
      000A6A D0 07            [24] 2167 	pop	ar7
                                   2168 ;	walk.c:169: for (i = REG; i < (2 * REG); i++) {
      000A6C E5*00            [12] 2169 	mov	a,_bp
      000A6E 24 0B            [12] 2170 	add	a,#0x0b
      000A70 F8               [12] 2171 	mov	r0,a
      000A71 06               [12] 2172 	inc	@r0
      000A72 B6 00 02         [24] 2173 	cjne	@r0,#0x00,00204$
      000A75 08               [12] 2174 	inc	r0
      000A76 06               [12] 2175 	inc	@r0
      000A77                       2176 00204$:
      000A77 E5*00            [12] 2177 	mov	a,_bp
      000A79 24 0B            [12] 2178 	add	a,#0x0b
      000A7B F8               [12] 2179 	mov	r0,a
      000A7C C3               [12] 2180 	clr	c
      000A7D E6               [12] 2181 	mov	a,@r0
      000A7E 94 08            [12] 2182 	subb	a,#0x08
      000A80 08               [12] 2183 	inc	r0
      000A81 E6               [12] 2184 	mov	a,@r0
      000A82 64 80            [12] 2185 	xrl	a,#0x80
      000A84 94 80            [12] 2186 	subb	a,#0x80
      000A86 D0 07            [24] 2187 	pop	ar7
      000A88 50 03            [24] 2188 	jnc	00205$
      000A8A 02r09r0C         [24] 2189 	ljmp	00118$
      000A8D                       2190 00205$:
                                   2191 ;	walk.c:175: walk(&initial);
      000A8D 8F 04            [24] 2192 	mov	ar4,r7
      000A8F 7D 00            [12] 2193 	mov	r5,#0x00
      000A91 7E 40            [12] 2194 	mov	r6,#0x40
      000A93 8C 82            [24] 2195 	mov	dpl,r4
      000A95 8D 83            [24] 2196 	mov	dph,r5
      000A97 8E F0            [24] 2197 	mov	b,r6
      000A99 C0 07            [24] 2198 	push	ar7
      000A9B C0 01            [24] 2199 	push	ar1
      000A9D 12r02rB6         [24] 2200 	lcall	_walk
      000AA0 D0 01            [24] 2201 	pop	ar1
      000AA2 D0 07            [24] 2202 	pop	ar7
                                   2203 ;	walk.c:177: for (i = 0; i < ROWS; i++)
      000AA4 E5*00            [12] 2204 	mov	a,_bp
      000AA6 24 0B            [12] 2205 	add	a,#0x0b
      000AA8 F8               [12] 2206 	mov	r0,a
      000AA9 E4               [12] 2207 	clr	a
      000AAA F6               [12] 2208 	mov	@r0,a
      000AAB 08               [12] 2209 	inc	r0
      000AAC F6               [12] 2210 	mov	@r0,a
      000AAD 7B 00            [12] 2211 	mov	r3,#0x00
      000AAF 7C 00            [12] 2212 	mov	r4,#0x00
                                   2213 ;	walk.c:178: for (j = 0; j < COLS; j++)
      000AB1                       2214 00136$:
      000AB1 E5*00            [12] 2215 	mov	a,_bp
      000AB3 24 03            [12] 2216 	add	a,#0x03
      000AB5 F8               [12] 2217 	mov	r0,a
      000AB6 EB               [12] 2218 	mov	a,r3
      000AB7 24r00            [12] 2219 	add	a,#_g
      000AB9 F6               [12] 2220 	mov	@r0,a
      000ABA EC               [12] 2221 	mov	a,r4
      000ABB 34s00            [12] 2222 	addc	a,#(_g >> 8)
      000ABD 08               [12] 2223 	inc	r0
      000ABE F6               [12] 2224 	mov	@r0,a
      000ABF 7A 00            [12] 2225 	mov	r2,#0x00
      000AC1 7E 00            [12] 2226 	mov	r6,#0x00
      000AC3                       2227 00120$:
                                   2228 ;	walk.c:179: if (g[i][j] != 0xaa) bang();
      000AC3 E5*00            [12] 2229 	mov	a,_bp
      000AC5 24 03            [12] 2230 	add	a,#0x03
      000AC7 F8               [12] 2231 	mov	r0,a
      000AC8 EA               [12] 2232 	mov	a,r2
      000AC9 26               [12] 2233 	add	a,@r0
      000ACA F5 82            [12] 2234 	mov	dpl,a
      000ACC EE               [12] 2235 	mov	a,r6
      000ACD 08               [12] 2236 	inc	r0
      000ACE 36               [12] 2237 	addc	a,@r0
      000ACF F5 83            [12] 2238 	mov	dph,a
      000AD1 E0               [24] 2239 	movx	a,@dptr
      000AD2 FD               [12] 2240 	mov	r5,a
      000AD3 BD AA 02         [24] 2241 	cjne	r5,#0xaa,00206$
      000AD6 80 1B            [24] 2242 	sjmp	00121$
      000AD8                       2243 00206$:
      000AD8 C0 07            [24] 2244 	push	ar7
      000ADA C0 06            [24] 2245 	push	ar6
      000ADC C0 04            [24] 2246 	push	ar4
      000ADE C0 03            [24] 2247 	push	ar3
      000AE0 C0 02            [24] 2248 	push	ar2
      000AE2 C0 01            [24] 2249 	push	ar1
      000AE4 12r00r1D         [24] 2250 	lcall	_bang
      000AE7 D0 01            [24] 2251 	pop	ar1
      000AE9 D0 02            [24] 2252 	pop	ar2
      000AEB D0 03            [24] 2253 	pop	ar3
      000AED D0 04            [24] 2254 	pop	ar4
      000AEF D0 06            [24] 2255 	pop	ar6
      000AF1 D0 07            [24] 2256 	pop	ar7
      000AF3                       2257 00121$:
                                   2258 ;	walk.c:178: for (j = 0; j < COLS; j++)
      000AF3 0A               [12] 2259 	inc	r2
      000AF4 BA 00 01         [24] 2260 	cjne	r2,#0x00,00207$
      000AF7 0E               [12] 2261 	inc	r6
      000AF8                       2262 00207$:
      000AF8 C3               [12] 2263 	clr	c
      000AF9 EA               [12] 2264 	mov	a,r2
      000AFA 94 C0            [12] 2265 	subb	a,#0xc0
      000AFC EE               [12] 2266 	mov	a,r6
      000AFD 64 80            [12] 2267 	xrl	a,#0x80
      000AFF 94 80            [12] 2268 	subb	a,#0x80
      000B01 40 C0            [24] 2269 	jc	00120$
                                   2270 ;	walk.c:177: for (i = 0; i < ROWS; i++)
      000B03 74 C0            [12] 2271 	mov	a,#0xc0
      000B05 2B               [12] 2272 	add	a,r3
      000B06 FB               [12] 2273 	mov	r3,a
      000B07 E4               [12] 2274 	clr	a
      000B08 3C               [12] 2275 	addc	a,r4
      000B09 FC               [12] 2276 	mov	r4,a
      000B0A E5*00            [12] 2277 	mov	a,_bp
      000B0C 24 0B            [12] 2278 	add	a,#0x0b
      000B0E F8               [12] 2279 	mov	r0,a
      000B0F 06               [12] 2280 	inc	@r0
      000B10 B6 00 02         [24] 2281 	cjne	@r0,#0x00,00209$
      000B13 08               [12] 2282 	inc	r0
      000B14 06               [12] 2283 	inc	@r0
      000B15                       2284 00209$:
      000B15 E5*00            [12] 2285 	mov	a,_bp
      000B17 24 0B            [12] 2286 	add	a,#0x0b
      000B19 F8               [12] 2287 	mov	r0,a
      000B1A C3               [12] 2288 	clr	c
      000B1B E6               [12] 2289 	mov	a,@r0
      000B1C 94 30            [12] 2290 	subb	a,#0x30
      000B1E 08               [12] 2291 	inc	r0
      000B1F E6               [12] 2292 	mov	a,@r0
      000B20 64 80            [12] 2293 	xrl	a,#0x80
      000B22 94 80            [12] 2294 	subb	a,#0x80
      000B24 40 8B            [24] 2295 	jc	00136$
                                   2296 ;	walk.c:181: N++;
      000B26 E5*00            [12] 2297 	mov	a,_bp
      000B28 24 09            [12] 2298 	add	a,#0x09
      000B2A F8               [12] 2299 	mov	r0,a
      000B2B 06               [12] 2300 	inc	@r0
      000B2C B6 00 02         [24] 2301 	cjne	@r0,#0x00,00211$
      000B2F 08               [12] 2302 	inc	r0
      000B30 06               [12] 2303 	inc	@r0
      000B31                       2304 00211$:
      000B31 02r06r66         [24] 2305 	ljmp	00109$
      000B34                       2306 00111$:
                                   2307 ;	walk.c:184: EA = 0;
                                   2308 ;	assignBit
      000B34 C2 AF            [12] 2309 	clr	_EA
                                   2310 ;	walk.c:186: puts("\033[2J\033[?25h");
      000B36 90r00r5F         [24] 2311 	mov	dptr,#___str_7
      000B39 75 F0 80         [24] 2312 	mov	b,#0x80
      000B3C 12r00r00         [24] 2313 	lcall	_puts
                                   2314 ;	walk.c:190: __endasm;
      000B3F 02 00 00         [24] 2315 	ljmp	0
                                   2316 ;	walk.c:192: return 0;
      000B42 90 00 00         [24] 2317 	mov	dptr,#0x0000
                                   2318 ;	walk.c:193: }
      000B45 85*00 81         [24] 2319 	mov	sp,_bp
      000B48 D0*00            [24] 2320 	pop	_bp
      000B4A 22               [24] 2321 	ret
                                   2322 ;------------------------------------------------------------
                                   2323 ;Allocation info for local variables in function 'qinit'
                                   2324 ;------------------------------------------------------------
                                   2325 ;	walk.c:195: static void qinit(void) {
                                   2326 ;	-----------------------------------------
                                   2327 ;	 function qinit
                                   2328 ;	-----------------------------------------
      000B4B                       2329 _qinit:
                                   2330 ;	walk.c:196: hp = tp = 0;
      000B4B 90rB4r02         [24] 2331 	mov	dptr,#_tp
      000B4E E4               [12] 2332 	clr	a
      000B4F F0               [24] 2333 	movx	@dptr,a
      000B50 A3               [24] 2334 	inc	dptr
      000B51 F0               [24] 2335 	movx	@dptr,a
      000B52 90rB4r00         [24] 2336 	mov	dptr,#_hp
      000B55 F0               [24] 2337 	movx	@dptr,a
      000B56 A3               [24] 2338 	inc	dptr
      000B57 F0               [24] 2339 	movx	@dptr,a
                                   2340 ;	walk.c:197: return;
                                   2341 ;	walk.c:198: }
      000B58 22               [24] 2342 	ret
                                   2343 ;------------------------------------------------------------
                                   2344 ;Allocation info for local variables in function 'qadd'
                                   2345 ;------------------------------------------------------------
                                   2346 ;t                         Allocated to registers r7 r5 r6 
                                   2347 ;sloc0                     Allocated to stack - _bp +1
                                   2348 ;sloc1                     Allocated to stack - _bp +3
                                   2349 ;sloc2                     Allocated to stack - _bp +5
                                   2350 ;sloc3                     Allocated to stack - _bp +10
                                   2351 ;------------------------------------------------------------
                                   2352 ;	walk.c:200: static int qadd(struct node *t) {
                                   2353 ;	-----------------------------------------
                                   2354 ;	 function qadd
                                   2355 ;	-----------------------------------------
      000B59                       2356 _qadd:
      000B59 C0*00            [24] 2357 	push	_bp
      000B5B E5 81            [12] 2358 	mov	a,sp
      000B5D F5*00            [12] 2359 	mov	_bp,a
      000B5F 24 06            [12] 2360 	add	a,#0x06
      000B61 F5 81            [12] 2361 	mov	sp,a
      000B63 AF 82            [24] 2362 	mov	r7,dpl
      000B65 AD 83            [24] 2363 	mov	r5,dph
      000B67 AE F0            [24] 2364 	mov	r6,b
                                   2365 ;	walk.c:201: if (((hp + 1) % QMAX) == tp) return 0;
      000B69 90rB4r00         [24] 2366 	mov	dptr,#_hp
      000B6C E0               [24] 2367 	movx	a,@dptr
      000B6D FB               [12] 2368 	mov	r3,a
      000B6E A3               [24] 2369 	inc	dptr
      000B6F E0               [24] 2370 	movx	a,@dptr
      000B70 FC               [12] 2371 	mov	r4,a
      000B71 A8*00            [24] 2372 	mov	r0,_bp
      000B73 08               [12] 2373 	inc	r0
      000B74 74 01            [12] 2374 	mov	a,#0x01
      000B76 2B               [12] 2375 	add	a,r3
      000B77 F6               [12] 2376 	mov	@r0,a
      000B78 E4               [12] 2377 	clr	a
      000B79 3C               [12] 2378 	addc	a,r4
      000B7A 08               [12] 2379 	inc	r0
      000B7B F6               [12] 2380 	mov	@r0,a
      000B7C C0 07            [24] 2381 	push	ar7
      000B7E C0 06            [24] 2382 	push	ar6
      000B80 C0 05            [24] 2383 	push	ar5
      000B82 C0 04            [24] 2384 	push	ar4
      000B84 C0 03            [24] 2385 	push	ar3
      000B86 E4               [12] 2386 	clr	a
      000B87 C0 E0            [24] 2387 	push	acc
      000B89 74 24            [12] 2388 	mov	a,#0x24
      000B8B C0 E0            [24] 2389 	push	acc
      000B8D A8*00            [24] 2390 	mov	r0,_bp
      000B8F 08               [12] 2391 	inc	r0
      000B90 86 82            [24] 2392 	mov	dpl,@r0
      000B92 08               [12] 2393 	inc	r0
      000B93 86 83            [24] 2394 	mov	dph,@r0
      000B95 12r00r00         [24] 2395 	lcall	__modsint
      000B98 A8*00            [24] 2396 	mov	r0,_bp
      000B9A 08               [12] 2397 	inc	r0
      000B9B 08               [12] 2398 	inc	r0
      000B9C 08               [12] 2399 	inc	r0
      000B9D A6 82            [24] 2400 	mov	@r0,dpl
      000B9F 08               [12] 2401 	inc	r0
      000BA0 A6 83            [24] 2402 	mov	@r0,dph
      000BA2 15 81            [12] 2403 	dec	sp
      000BA4 15 81            [12] 2404 	dec	sp
      000BA6 D0 03            [24] 2405 	pop	ar3
      000BA8 D0 04            [24] 2406 	pop	ar4
      000BAA D0 05            [24] 2407 	pop	ar5
      000BAC D0 06            [24] 2408 	pop	ar6
      000BAE D0 07            [24] 2409 	pop	ar7
      000BB0 90rB4r02         [24] 2410 	mov	dptr,#_tp
      000BB3 E5*00            [12] 2411 	mov	a,_bp
      000BB5 24 05            [12] 2412 	add	a,#0x05
      000BB7 F8               [12] 2413 	mov	r0,a
      000BB8 E0               [24] 2414 	movx	a,@dptr
      000BB9 F6               [12] 2415 	mov	@r0,a
      000BBA A3               [24] 2416 	inc	dptr
      000BBB E0               [24] 2417 	movx	a,@dptr
      000BBC 08               [12] 2418 	inc	r0
      000BBD F6               [12] 2419 	mov	@r0,a
      000BBE E5*00            [12] 2420 	mov	a,_bp
      000BC0 24 03            [12] 2421 	add	a,#0x03
      000BC2 F8               [12] 2422 	mov	r0,a
      000BC3 E5*00            [12] 2423 	mov	a,_bp
      000BC5 24 05            [12] 2424 	add	a,#0x05
      000BC7 F9               [12] 2425 	mov	r1,a
      000BC8 86 F0            [24] 2426 	mov	b,@r0
      000BCA E7               [12] 2427 	mov	a,@r1
      000BCB B5 F0 0A         [24] 2428 	cjne	a,b,00109$
      000BCE 08               [12] 2429 	inc	r0
      000BCF 86 F0            [24] 2430 	mov	b,@r0
      000BD1 09               [12] 2431 	inc	r1
      000BD2 E7               [12] 2432 	mov	a,@r1
      000BD3 B5 F0 02         [24] 2433 	cjne	a,b,00109$
      000BD6 80 02            [24] 2434 	sjmp	00110$
      000BD8                       2435 00109$:
      000BD8 80 05            [24] 2436 	sjmp	00102$
      000BDA                       2437 00110$:
      000BDA 90 00 00         [24] 2438 	mov	dptr,#0x0000
      000BDD 80 64            [24] 2439 	sjmp	00103$
      000BDF                       2440 00102$:
                                   2441 ;	walk.c:202: queue[hp] = *t;
      000BDF 8F 02            [24] 2442 	mov	ar2,r7
      000BE1 8E 07            [24] 2443 	mov	ar7,r6
      000BE3 EB               [12] 2444 	mov	a,r3
      000BE4 2B               [12] 2445 	add	a,r3
      000BE5 FB               [12] 2446 	mov	r3,a
      000BE6 EC               [12] 2447 	mov	a,r4
      000BE7 33               [12] 2448 	rlc	a
      000BE8 FC               [12] 2449 	mov	r4,a
      000BE9 EB               [12] 2450 	mov	a,r3
      000BEA 2B               [12] 2451 	add	a,r3
      000BEB FB               [12] 2452 	mov	r3,a
      000BEC EC               [12] 2453 	mov	a,r4
      000BED 33               [12] 2454 	rlc	a
      000BEE FC               [12] 2455 	mov	r4,a
      000BEF EB               [12] 2456 	mov	a,r3
      000BF0 24r00            [12] 2457 	add	a,#_queue
      000BF2 FB               [12] 2458 	mov	r3,a
      000BF3 EC               [12] 2459 	mov	a,r4
      000BF4 34s24            [12] 2460 	addc	a,#(_queue >> 8)
      000BF6 FC               [12] 2461 	mov	r4,a
      000BF7 7E 00            [12] 2462 	mov	r6,#0x00
      000BF9 74 04            [12] 2463 	mov	a,#0x04
      000BFB C0 E0            [24] 2464 	push	acc
      000BFD E4               [12] 2465 	clr	a
      000BFE C0 E0            [24] 2466 	push	acc
      000C00 C0 02            [24] 2467 	push	ar2
      000C02 C0 05            [24] 2468 	push	ar5
      000C04 C0 07            [24] 2469 	push	ar7
      000C06 8B 82            [24] 2470 	mov	dpl,r3
      000C08 8C 83            [24] 2471 	mov	dph,r4
      000C0A 8E F0            [24] 2472 	mov	b,r6
      000C0C 12r00r00         [24] 2473 	lcall	___memcpy
      000C0F E5 81            [12] 2474 	mov	a,sp
      000C11 24 FB            [12] 2475 	add	a,#0xfb
      000C13 F5 81            [12] 2476 	mov	sp,a
                                   2477 ;	walk.c:203: hp = (hp + 1) % QMAX;
      000C15 90rB4r00         [24] 2478 	mov	dptr,#_hp
      000C18 E0               [24] 2479 	movx	a,@dptr
      000C19 FD               [12] 2480 	mov	r5,a
      000C1A A3               [24] 2481 	inc	dptr
      000C1B E0               [24] 2482 	movx	a,@dptr
      000C1C FE               [12] 2483 	mov	r6,a
      000C1D 0D               [12] 2484 	inc	r5
      000C1E BD 00 01         [24] 2485 	cjne	r5,#0x00,00111$
      000C21 0E               [12] 2486 	inc	r6
      000C22                       2487 00111$:
      000C22 E4               [12] 2488 	clr	a
      000C23 C0 E0            [24] 2489 	push	acc
      000C25 74 24            [12] 2490 	mov	a,#0x24
      000C27 C0 E0            [24] 2491 	push	acc
      000C29 8D 82            [24] 2492 	mov	dpl,r5
      000C2B 8E 83            [24] 2493 	mov	dph,r6
      000C2D 12r00r00         [24] 2494 	lcall	__modsint
      000C30 AD 82            [24] 2495 	mov	r5,dpl
      000C32 AE 83            [24] 2496 	mov	r6,dph
      000C34 15 81            [12] 2497 	dec	sp
      000C36 15 81            [12] 2498 	dec	sp
      000C38 90rB4r00         [24] 2499 	mov	dptr,#_hp
      000C3B ED               [12] 2500 	mov	a,r5
      000C3C F0               [24] 2501 	movx	@dptr,a
      000C3D EE               [12] 2502 	mov	a,r6
      000C3E A3               [24] 2503 	inc	dptr
      000C3F F0               [24] 2504 	movx	@dptr,a
                                   2505 ;	walk.c:204: return 1;
      000C40 90 00 01         [24] 2506 	mov	dptr,#0x0001
      000C43                       2507 00103$:
                                   2508 ;	walk.c:205: }
      000C43 85*00 81         [24] 2509 	mov	sp,_bp
      000C46 D0*00            [24] 2510 	pop	_bp
      000C48 22               [24] 2511 	ret
                                   2512 ;------------------------------------------------------------
                                   2513 ;Allocation info for local variables in function 'qget'
                                   2514 ;------------------------------------------------------------
                                   2515 ;t                         Allocated to registers r5 r6 r7 
                                   2516 ;------------------------------------------------------------
                                   2517 ;	walk.c:207: static int qget(struct node *t) {
                                   2518 ;	-----------------------------------------
                                   2519 ;	 function qget
                                   2520 ;	-----------------------------------------
      000C49                       2521 _qget:
      000C49 AD 82            [24] 2522 	mov	r5,dpl
      000C4B AE 83            [24] 2523 	mov	r6,dph
      000C4D AF F0            [24] 2524 	mov	r7,b
                                   2525 ;	walk.c:208: if (hp == tp) return 0;
      000C4F 90rB4r00         [24] 2526 	mov	dptr,#_hp
      000C52 E0               [24] 2527 	movx	a,@dptr
      000C53 FB               [12] 2528 	mov	r3,a
      000C54 A3               [24] 2529 	inc	dptr
      000C55 E0               [24] 2530 	movx	a,@dptr
      000C56 FC               [12] 2531 	mov	r4,a
      000C57 90rB4r02         [24] 2532 	mov	dptr,#_tp
      000C5A E0               [24] 2533 	movx	a,@dptr
      000C5B F9               [12] 2534 	mov	r1,a
      000C5C A3               [24] 2535 	inc	dptr
      000C5D E0               [24] 2536 	movx	a,@dptr
      000C5E FA               [12] 2537 	mov	r2,a
      000C5F EB               [12] 2538 	mov	a,r3
      000C60 B5 01 08         [24] 2539 	cjne	a,ar1,00102$
      000C63 EC               [12] 2540 	mov	a,r4
      000C64 B5 02 04         [24] 2541 	cjne	a,ar2,00102$
      000C67 90 00 00         [24] 2542 	mov	dptr,#0x0000
      000C6A 22               [24] 2543 	ret
      000C6B                       2544 00102$:
                                   2545 ;	walk.c:209: *t = queue[tp];
      000C6B E9               [12] 2546 	mov	a,r1
      000C6C 29               [12] 2547 	add	a,r1
      000C6D F9               [12] 2548 	mov	r1,a
      000C6E EA               [12] 2549 	mov	a,r2
      000C6F 33               [12] 2550 	rlc	a
      000C70 FA               [12] 2551 	mov	r2,a
      000C71 E9               [12] 2552 	mov	a,r1
      000C72 29               [12] 2553 	add	a,r1
      000C73 F9               [12] 2554 	mov	r1,a
      000C74 EA               [12] 2555 	mov	a,r2
      000C75 33               [12] 2556 	rlc	a
      000C76 FA               [12] 2557 	mov	r2,a
      000C77 E9               [12] 2558 	mov	a,r1
      000C78 24r00            [12] 2559 	add	a,#_queue
      000C7A F9               [12] 2560 	mov	r1,a
      000C7B EA               [12] 2561 	mov	a,r2
      000C7C 34s24            [12] 2562 	addc	a,#(_queue >> 8)
      000C7E FA               [12] 2563 	mov	r2,a
      000C7F 7C 00            [12] 2564 	mov	r4,#0x00
      000C81 74 04            [12] 2565 	mov	a,#0x04
      000C83 C0 E0            [24] 2566 	push	acc
      000C85 E4               [12] 2567 	clr	a
      000C86 C0 E0            [24] 2568 	push	acc
      000C88 C0 01            [24] 2569 	push	ar1
      000C8A C0 02            [24] 2570 	push	ar2
      000C8C C0 04            [24] 2571 	push	ar4
      000C8E 8D 82            [24] 2572 	mov	dpl,r5
      000C90 8E 83            [24] 2573 	mov	dph,r6
      000C92 8F F0            [24] 2574 	mov	b,r7
      000C94 12r00r00         [24] 2575 	lcall	___memcpy
      000C97 E5 81            [12] 2576 	mov	a,sp
      000C99 24 FB            [12] 2577 	add	a,#0xfb
      000C9B F5 81            [12] 2578 	mov	sp,a
                                   2579 ;	walk.c:210: tp = (tp + 1) % QMAX;
      000C9D 90rB4r02         [24] 2580 	mov	dptr,#_tp
      000CA0 E0               [24] 2581 	movx	a,@dptr
      000CA1 FE               [12] 2582 	mov	r6,a
      000CA2 A3               [24] 2583 	inc	dptr
      000CA3 E0               [24] 2584 	movx	a,@dptr
      000CA4 FF               [12] 2585 	mov	r7,a
      000CA5 0E               [12] 2586 	inc	r6
      000CA6 BE 00 01         [24] 2587 	cjne	r6,#0x00,00111$
      000CA9 0F               [12] 2588 	inc	r7
      000CAA                       2589 00111$:
      000CAA E4               [12] 2590 	clr	a
      000CAB C0 E0            [24] 2591 	push	acc
      000CAD 74 24            [12] 2592 	mov	a,#0x24
      000CAF C0 E0            [24] 2593 	push	acc
      000CB1 8E 82            [24] 2594 	mov	dpl,r6
      000CB3 8F 83            [24] 2595 	mov	dph,r7
      000CB5 12r00r00         [24] 2596 	lcall	__modsint
      000CB8 AE 82            [24] 2597 	mov	r6,dpl
      000CBA AF 83            [24] 2598 	mov	r7,dph
      000CBC 15 81            [12] 2599 	dec	sp
      000CBE 15 81            [12] 2600 	dec	sp
      000CC0 90rB4r02         [24] 2601 	mov	dptr,#_tp
      000CC3 EE               [12] 2602 	mov	a,r6
      000CC4 F0               [24] 2603 	movx	@dptr,a
      000CC5 EF               [12] 2604 	mov	a,r7
      000CC6 A3               [24] 2605 	inc	dptr
      000CC7 F0               [24] 2606 	movx	@dptr,a
                                   2607 ;	walk.c:211: return 1;
      000CC8 90 00 01         [24] 2608 	mov	dptr,#0x0001
                                   2609 ;	walk.c:212: }
      000CCB 22               [24] 2610 	ret
                                   2611 	.area CSEG    (CODE)
                                   2612 	.area CONST   (CODE)
                                   2613 	.area CONST   (CODE)
      000000                       2614 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2615 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2616 	.db 0x00
                                   2617 	.area CSEG    (CODE)
                                   2618 	.area CONST   (CODE)
      00000D                       2619 ___str_1:
      00000D 1B                    2620 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2621 	.ascii "[%d;%dH."
             2E
      000016 00                    2622 	.db 0x00
                                   2623 	.area CSEG    (CODE)
                                   2624 	.area CONST   (CODE)
      000017                       2625 ___str_2:
      000017 1B                    2626 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2627 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      00002D 00                    2628 	.db 0x00
                                   2629 	.area CSEG    (CODE)
                                   2630 	.area CONST   (CODE)
      00002E                       2631 ___str_3:
      00002E 1B                    2632 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2633 	.ascii "[%d;%dHo"
             6F
      000037 00                    2634 	.db 0x00
                                   2635 	.area CSEG    (CODE)
                                   2636 	.area CONST   (CODE)
      000038                       2637 ___str_4:
      000038 1B                    2638 	.db 0x1b
      000039 5B 32 4A              2639 	.ascii "[2J"
      00003C 1B                    2640 	.db 0x1b
      00003D 5B 3F 32 35 6C        2641 	.ascii "[?25l"
      000042 00                    2642 	.db 0x00
                                   2643 	.area CSEG    (CODE)
                                   2644 	.area CONST   (CODE)
      000043                       2645 ___str_5:
      000043 1B                    2646 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2647 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2648 	.db 0x00
                                   2649 	.area CSEG    (CODE)
                                   2650 	.area CONST   (CODE)
      000056                       2651 ___str_6:
      000056 25 20 38 64 25 20 38  2652 	.ascii "% 8d% 8d"
             64
      00005E 00                    2653 	.db 0x00
                                   2654 	.area CSEG    (CODE)
                                   2655 	.area CONST   (CODE)
      00005F                       2656 ___str_7:
      00005F 1B                    2657 	.db 0x1b
      000060 5B 32 4A              2658 	.ascii "[2J"
      000063 1B                    2659 	.db 0x1b
      000064 5B 3F 32 35 68        2660 	.ascii "[?25h"
      000069 00                    2661 	.db 0x00
                                   2662 	.area CSEG    (CODE)
                                   2663 	.area XINIT   (CODE)
      000000                       2664 __xinit__neigh_tmpl:
      000000 FF FF                 2665 	.byte #0xff, #0xff	; -1
      000002 01 00                 2666 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2667 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2668 	.byte #0xff, #0xff	; -1
      000008 01 00                 2669 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2670 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2671 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2672 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2673 	.byte #0xff, #0xff	; -1
      000012 00 00                 2674 	.byte #0x00, #0x00	;  0
      000014 00 00                 2675 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2676 	.byte #0xff, #0xff	; -1
      000018 01 00                 2677 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2678 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2679 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2680 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2681 	.byte #0xff, #0xff	; -1
      000022 01 00                 2682 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2683 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2684 	.byte #0xff, #0xff	; -1
      000028 01 00                 2685 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2686 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2687 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2688 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2689 	.byte #0xff, #0xff	; -1
      000032 00 00                 2690 	.byte #0x00, #0x00	;  0
      000034 00 00                 2691 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2692 	.byte #0xff, #0xff	; -1
      000038 01 00                 2693 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2694 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2695 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2696 	.byte #0x01, #0x00	;  1
      000040                       2697 __xinit__neigh:
      000040 FF FF                 2698 	.byte #0xff, #0xff	; -1
      000042 01 00                 2699 	.byte #0x01, #0x00	;  1
      000044 FF FF                 2700 	.byte #0xff, #0xff	; -1
      000046 FF FF                 2701 	.byte #0xff, #0xff	; -1
      000048 01 00                 2702 	.byte #0x01, #0x00	;  1
      00004A FF FF                 2703 	.byte #0xff, #0xff	; -1
      00004C 01 00                 2704 	.byte #0x01, #0x00	;  1
      00004E 01 00                 2705 	.byte #0x01, #0x00	;  1
      000050 FF FF                 2706 	.byte #0xff, #0xff	; -1
      000052 00 00                 2707 	.byte #0x00, #0x00	;  0
      000054 00 00                 2708 	.byte #0x00, #0x00	;  0
      000056 FF FF                 2709 	.byte #0xff, #0xff	; -1
      000058 01 00                 2710 	.byte #0x01, #0x00	;  1
      00005A 00 00                 2711 	.byte #0x00, #0x00	;  0
      00005C 00 00                 2712 	.byte #0x00, #0x00	;  0
      00005E 01 00                 2713 	.byte #0x01, #0x00	;  1
      000060 FF FF                 2714 	.byte #0xff, #0xff	; -1
      000062 01 00                 2715 	.byte #0x01, #0x00	;  1
      000064 FF FF                 2716 	.byte #0xff, #0xff	; -1
      000066 FF FF                 2717 	.byte #0xff, #0xff	; -1
      000068 01 00                 2718 	.byte #0x01, #0x00	;  1
      00006A FF FF                 2719 	.byte #0xff, #0xff	; -1
      00006C 01 00                 2720 	.byte #0x01, #0x00	;  1
      00006E 01 00                 2721 	.byte #0x01, #0x00	;  1
      000070 FF FF                 2722 	.byte #0xff, #0xff	; -1
      000072 00 00                 2723 	.byte #0x00, #0x00	;  0
      000074 00 00                 2724 	.byte #0x00, #0x00	;  0
      000076 FF FF                 2725 	.byte #0xff, #0xff	; -1
      000078 01 00                 2726 	.byte #0x01, #0x00	;  1
      00007A 00 00                 2727 	.byte #0x00, #0x00	;  0
      00007C 00 00                 2728 	.byte #0x00, #0x00	;  0
      00007E 01 00                 2729 	.byte #0x01, #0x00	;  1
                                   2730 	.area CABS    (ABS,CODE)
