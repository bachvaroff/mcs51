                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _FL
                                     27 	.globl _P
                                     28 	.globl _TF2
                                     29 	.globl _EXF2
                                     30 	.globl _RCLK
                                     31 	.globl _TCLK
                                     32 	.globl _EXEN2
                                     33 	.globl _TR2
                                     34 	.globl _C_T2
                                     35 	.globl _CP_RL2
                                     36 	.globl _T2CON_7
                                     37 	.globl _T2CON_6
                                     38 	.globl _T2CON_5
                                     39 	.globl _T2CON_4
                                     40 	.globl _T2CON_3
                                     41 	.globl _T2CON_2
                                     42 	.globl _T2CON_1
                                     43 	.globl _T2CON_0
                                     44 	.globl _PT2
                                     45 	.globl _PS
                                     46 	.globl _PT1
                                     47 	.globl _PX1
                                     48 	.globl _PT0
                                     49 	.globl _PX0
                                     50 	.globl _RD
                                     51 	.globl _WR
                                     52 	.globl _T1
                                     53 	.globl _T0
                                     54 	.globl _INT1
                                     55 	.globl _INT0
                                     56 	.globl _TXD
                                     57 	.globl _RXD
                                     58 	.globl _P3_7
                                     59 	.globl _P3_6
                                     60 	.globl _P3_5
                                     61 	.globl _P3_4
                                     62 	.globl _P3_3
                                     63 	.globl _P3_2
                                     64 	.globl _P3_1
                                     65 	.globl _P3_0
                                     66 	.globl _EA
                                     67 	.globl _ET2
                                     68 	.globl _ES
                                     69 	.globl _ET1
                                     70 	.globl _EX1
                                     71 	.globl _ET0
                                     72 	.globl _EX0
                                     73 	.globl _P2_7
                                     74 	.globl _P2_6
                                     75 	.globl _P2_5
                                     76 	.globl _P2_4
                                     77 	.globl _P2_3
                                     78 	.globl _P2_2
                                     79 	.globl _P2_1
                                     80 	.globl _P2_0
                                     81 	.globl _SM0
                                     82 	.globl _SM1
                                     83 	.globl _SM2
                                     84 	.globl _REN
                                     85 	.globl _TB8
                                     86 	.globl _RB8
                                     87 	.globl _TI
                                     88 	.globl _RI
                                     89 	.globl _T2EX
                                     90 	.globl _T2
                                     91 	.globl _P1_7
                                     92 	.globl _P1_6
                                     93 	.globl _P1_5
                                     94 	.globl _P1_4
                                     95 	.globl _P1_3
                                     96 	.globl _P1_2
                                     97 	.globl _P1_1
                                     98 	.globl _P1_0
                                     99 	.globl _TF1
                                    100 	.globl _TR1
                                    101 	.globl _TF0
                                    102 	.globl _TR0
                                    103 	.globl _IE1
                                    104 	.globl _IT1
                                    105 	.globl _IE0
                                    106 	.globl _IT0
                                    107 	.globl _P0_7
                                    108 	.globl _P0_6
                                    109 	.globl _P0_5
                                    110 	.globl _P0_4
                                    111 	.globl _P0_3
                                    112 	.globl _P0_2
                                    113 	.globl _P0_1
                                    114 	.globl _P0_0
                                    115 	.globl _B
                                    116 	.globl _A
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _TH2
                                    120 	.globl _TL2
                                    121 	.globl _RCAP2H
                                    122 	.globl _RCAP2L
                                    123 	.globl _T2MOD
                                    124 	.globl _T2CON
                                    125 	.globl _IP
                                    126 	.globl _P3
                                    127 	.globl _IE
                                    128 	.globl _P2
                                    129 	.globl _SBUF
                                    130 	.globl _SCON
                                    131 	.globl _P1
                                    132 	.globl _TH1
                                    133 	.globl _TH0
                                    134 	.globl _TL1
                                    135 	.globl _TL0
                                    136 	.globl _TMOD
                                    137 	.globl _TCON
                                    138 	.globl _PCON
                                    139 	.globl _DPH
                                    140 	.globl _DPL
                                    141 	.globl _SP
                                    142 	.globl _P0
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000C8   166 _T2CON	=	0x00c8
                           0000C9   167 _T2MOD	=	0x00c9
                           0000CA   168 _RCAP2L	=	0x00ca
                           0000CB   169 _RCAP2H	=	0x00cb
                           0000CC   170 _TL2	=	0x00cc
                           0000CD   171 _TH2	=	0x00cd
                           0000D0   172 _PSW	=	0x00d0
                           0000E0   173 _ACC	=	0x00e0
                           0000E0   174 _A	=	0x00e0
                           0000F0   175 _B	=	0x00f0
                                    176 ;--------------------------------------------------------
                                    177 ; special function bits
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0_0	=	0x0080
                           000081   182 _P0_1	=	0x0081
                           000082   183 _P0_2	=	0x0082
                           000083   184 _P0_3	=	0x0083
                           000084   185 _P0_4	=	0x0084
                           000085   186 _P0_5	=	0x0085
                           000086   187 _P0_6	=	0x0086
                           000087   188 _P0_7	=	0x0087
                           000088   189 _IT0	=	0x0088
                           000089   190 _IE0	=	0x0089
                           00008A   191 _IT1	=	0x008a
                           00008B   192 _IE1	=	0x008b
                           00008C   193 _TR0	=	0x008c
                           00008D   194 _TF0	=	0x008d
                           00008E   195 _TR1	=	0x008e
                           00008F   196 _TF1	=	0x008f
                           000090   197 _P1_0	=	0x0090
                           000091   198 _P1_1	=	0x0091
                           000092   199 _P1_2	=	0x0092
                           000093   200 _P1_3	=	0x0093
                           000094   201 _P1_4	=	0x0094
                           000095   202 _P1_5	=	0x0095
                           000096   203 _P1_6	=	0x0096
                           000097   204 _P1_7	=	0x0097
                           000090   205 _T2	=	0x0090
                           000091   206 _T2EX	=	0x0091
                           000098   207 _RI	=	0x0098
                           000099   208 _TI	=	0x0099
                           00009A   209 _RB8	=	0x009a
                           00009B   210 _TB8	=	0x009b
                           00009C   211 _REN	=	0x009c
                           00009D   212 _SM2	=	0x009d
                           00009E   213 _SM1	=	0x009e
                           00009F   214 _SM0	=	0x009f
                           0000A0   215 _P2_0	=	0x00a0
                           0000A1   216 _P2_1	=	0x00a1
                           0000A2   217 _P2_2	=	0x00a2
                           0000A3   218 _P2_3	=	0x00a3
                           0000A4   219 _P2_4	=	0x00a4
                           0000A5   220 _P2_5	=	0x00a5
                           0000A6   221 _P2_6	=	0x00a6
                           0000A7   222 _P2_7	=	0x00a7
                           0000A8   223 _EX0	=	0x00a8
                           0000A9   224 _ET0	=	0x00a9
                           0000AA   225 _EX1	=	0x00aa
                           0000AB   226 _ET1	=	0x00ab
                           0000AC   227 _ES	=	0x00ac
                           0000AD   228 _ET2	=	0x00ad
                           0000AF   229 _EA	=	0x00af
                           0000B0   230 _P3_0	=	0x00b0
                           0000B1   231 _P3_1	=	0x00b1
                           0000B2   232 _P3_2	=	0x00b2
                           0000B3   233 _P3_3	=	0x00b3
                           0000B4   234 _P3_4	=	0x00b4
                           0000B5   235 _P3_5	=	0x00b5
                           0000B6   236 _P3_6	=	0x00b6
                           0000B7   237 _P3_7	=	0x00b7
                           0000B0   238 _RXD	=	0x00b0
                           0000B1   239 _TXD	=	0x00b1
                           0000B2   240 _INT0	=	0x00b2
                           0000B3   241 _INT1	=	0x00b3
                           0000B4   242 _T0	=	0x00b4
                           0000B5   243 _T1	=	0x00b5
                           0000B6   244 _WR	=	0x00b6
                           0000B7   245 _RD	=	0x00b7
                           0000B8   246 _PX0	=	0x00b8
                           0000B9   247 _PT0	=	0x00b9
                           0000BA   248 _PX1	=	0x00ba
                           0000BB   249 _PT1	=	0x00bb
                           0000BC   250 _PS	=	0x00bc
                           0000BD   251 _PT2	=	0x00bd
                           0000C8   252 _T2CON_0	=	0x00c8
                           0000C9   253 _T2CON_1	=	0x00c9
                           0000CA   254 _T2CON_2	=	0x00ca
                           0000CB   255 _T2CON_3	=	0x00cb
                           0000CC   256 _T2CON_4	=	0x00cc
                           0000CD   257 _T2CON_5	=	0x00cd
                           0000CE   258 _T2CON_6	=	0x00ce
                           0000CF   259 _T2CON_7	=	0x00cf
                           0000C8   260 _CP_RL2	=	0x00c8
                           0000C9   261 _C_T2	=	0x00c9
                           0000CA   262 _TR2	=	0x00ca
                           0000CB   263 _EXEN2	=	0x00cb
                           0000CC   264 _TCLK	=	0x00cc
                           0000CD   265 _RCLK	=	0x00cd
                           0000CE   266 _EXF2	=	0x00ce
                           0000CF   267 _TF2	=	0x00cf
                           0000D0   268 _P	=	0x00d0
                           0000D1   269 _FL	=	0x00d1
                           0000D2   270 _OV	=	0x00d2
                           0000D3   271 _RS0	=	0x00d3
                           0000D4   272 _RS1	=	0x00d4
                           0000D5   273 _F0	=	0x00d5
                           0000D6   274 _AC	=	0x00d6
                           0000D7   275 _CY	=	0x00d7
                                    276 ;--------------------------------------------------------
                                    277 ; overlayable register banks
                                    278 ;--------------------------------------------------------
                                    279 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        280 	.ds 8
                                    281 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable bit register bank
                                    285 ;--------------------------------------------------------
                                    286 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        287 bits:
      000000                        288 	.ds 1
                           008000   289 	b0 = bits[0]
                           008100   290 	b1 = bits[1]
                           008200   291 	b2 = bits[2]
                           008300   292 	b3 = bits[3]
                           008400   293 	b4 = bits[4]
                           008500   294 	b5 = bits[5]
                           008600   295 	b6 = bits[6]
                           008700   296 	b7 = bits[7]
                                    297 ;--------------------------------------------------------
                                    298 ; internal ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area DSEG    (DATA)
                                    301 ;--------------------------------------------------------
                                    302 ; overlayable items in internal ram 
                                    303 ;--------------------------------------------------------
                                    304 ;--------------------------------------------------------
                                    305 ; Stack segment in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 	.area	SSEG
      000000                        308 __start__stack:
      000000                        309 	.ds	1
                                    310 
                                    311 ;--------------------------------------------------------
                                    312 ; indirectly addressable internal ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area ISEG    (DATA)
      000000                        315 _digits:
      000000                        316 	.ds 16
      000010                        317 _i0:
      000010                        318 	.ds 1
      000011                        319 _i1:
      000011                        320 	.ds 1
      000012                        321 _x:
      000012                        322 	.ds 2
      000014                        323 _y:
      000014                        324 	.ds 2
      000016                        325 _j:
      000016                        326 	.ds 2
      000018                        327 _c:
      000018                        328 	.ds 2
      00001A                        329 _bstep:
      00001A                        330 	.ds 1
      00001B                        331 _n:
      00001B                        332 	.ds 1
      00001C                        333 _fixed:
      00001C                        334 	.ds 1
      00001D                        335 _cycle2:
      00001D                        336 	.ds 1
      00001E                        337 _x1:
      00001E                        338 	.ds 2
      000020                        339 _y1:
      000020                        340 	.ds 2
      000022                        341 _generation:
      000022                        342 	.ds 4
      000026                        343 _busy:
      000026                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
      000000                        362 _pu:
      000000                        363 	.ds 2048
      000800                        364 _u:
      000800                        365 	.ds 2048
      001000                        366 _nu:
      001000                        367 	.ds 2048
                                    368 ;--------------------------------------------------------
                                    369 ; absolute external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XABS    (ABS,XDATA)
                                    372 ;--------------------------------------------------------
                                    373 ; external initialized ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XISEG   (XDATA)
                                    376 	.area HOME    (CODE)
                                    377 	.area GSINIT0 (CODE)
                                    378 	.area GSINIT1 (CODE)
                                    379 	.area GSINIT2 (CODE)
                                    380 	.area GSINIT3 (CODE)
                                    381 	.area GSINIT4 (CODE)
                                    382 	.area GSINIT5 (CODE)
                                    383 	.area GSINIT  (CODE)
                                    384 	.area GSFINAL (CODE)
                                    385 	.area CSEG    (CODE)
                                    386 ;--------------------------------------------------------
                                    387 ; interrupt vector 
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
      000000                        390 __interrupt_vect:
      000000 02r00r00         [24]  391 	ljmp	__sdcc_gsinit_startup
      000003 02r00r16         [24]  392 	ljmp	_int0
      000006                        393 	.ds	5
      00000B 32               [24]  394 	reti
      00000C                        395 	.ds	7
      000013 02r00r22         [24]  396 	ljmp	_int1
                                    397 ;--------------------------------------------------------
                                    398 ; global & static initialisations
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
                                    401 	.area GSINIT  (CODE)
                                    402 	.area GSFINAL (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.globl __sdcc_gsinit_startup
                                    405 	.globl __sdcc_program_startup
                                    406 	.globl __start__stack
                                    407 	.globl __mcs51_genXINIT
                                    408 	.globl __mcs51_genXRAMCLEAR
                                    409 	.globl __mcs51_genRAMCLEAR
                                    410 ;	life.c:27: __idata static const char digits[16] = {
      000000 78r00            [12]  411 	mov	r0,#_digits
      000002 76 30            [12]  412 	mov	@r0,#0x30
      000004 78r01            [12]  413 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  414 	mov	@r0,#0x31
      000008 78r02            [12]  415 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  416 	mov	@r0,#0x32
      00000C 78r03            [12]  417 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  418 	mov	@r0,#0x33
      000010 78r04            [12]  419 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  420 	mov	@r0,#0x34
      000014 78r05            [12]  421 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  422 	mov	@r0,#0x35
      000018 78r06            [12]  423 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  424 	mov	@r0,#0x36
      00001C 78r07            [12]  425 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  426 	mov	@r0,#0x37
      000020 78r08            [12]  427 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  428 	mov	@r0,#0x38
      000024 78r09            [12]  429 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  430 	mov	@r0,#0x39
      000028 78r0A            [12]  431 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  432 	mov	@r0,#0x41
      00002C 78r0B            [12]  433 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  434 	mov	@r0,#0x42
      000030 78r0C            [12]  435 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  436 	mov	@r0,#0x43
      000034 78r0D            [12]  437 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  438 	mov	@r0,#0x44
      000038 78r0E            [12]  439 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  440 	mov	@r0,#0x45
      00003C 78r0F            [12]  441 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  442 	mov	@r0,#0x46
                                    443 ;	life.c:164: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000040 78r26            [12]  444 	mov	r0,#_busy
      000042 76 5C            [12]  445 	mov	@r0,#0x5c
      000044 78r27            [12]  446 	mov	r0,#(_busy + 0x0001)
      000046 76 7C            [12]  447 	mov	@r0,#0x7c
      000048 78r28            [12]  448 	mov	r0,#(_busy + 0x0002)
      00004A 76 2F            [12]  449 	mov	@r0,#0x2f
      00004C 78r29            [12]  450 	mov	r0,#(_busy + 0x0003)
      00004E 76 2D            [12]  451 	mov	@r0,#0x2d
                                    452 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  453 	ljmp	__sdcc_program_startup
                                    454 ;--------------------------------------------------------
                                    455 ; Home
                                    456 ;--------------------------------------------------------
                                    457 	.area HOME    (CODE)
                                    458 	.area HOME    (CODE)
      000016                        459 __sdcc_program_startup:
      000016 02r02r2B         [24]  460 	ljmp	_main
                                    461 ;	return from main will return to caller
                                    462 ;--------------------------------------------------------
                                    463 ; code
                                    464 ;--------------------------------------------------------
                                    465 	.area CSEG    (CODE)
                                    466 ;------------------------------------------------------------
                                    467 ;Allocation info for local variables in function 'putchar'
                                    468 ;------------------------------------------------------------
                                    469 ;c                         Allocated to registers 
                                    470 ;------------------------------------------------------------
                                    471 ;	life.c:6: int putchar(int c) __naked {
                                    472 ;	-----------------------------------------
                                    473 ;	 function putchar
                                    474 ;	-----------------------------------------
      000000                        475 _putchar:
                                    476 ;	naked function: no prologue.
                                    477 ;	life.c:13: __endasm;
      000000 C0 E0            [24]  478 	push	acc
      000002 E5 82            [12]  479 	mov	a, dpl
      000004 12 00 3C         [24]  480 	lcall	0x003c
      000007 D0 E0            [24]  481 	pop	acc
                                    482 ;	life.c:14: }
                                    483 ;	naked function: no epilogue.
                                    484 ;------------------------------------------------------------
                                    485 ;Allocation info for local variables in function 'getchar'
                                    486 ;------------------------------------------------------------
                                    487 ;	life.c:16: int getchar(void) __naked {
                                    488 ;	-----------------------------------------
                                    489 ;	 function getchar
                                    490 ;	-----------------------------------------
      000009                        491 _getchar:
                                    492 ;	naked function: no prologue.
                                    493 ;	life.c:24: __endasm;
      000009 C0 E0            [24]  494 	push	acc
      00000B 12 00 36         [24]  495 	lcall	0x0036
      00000E F5 82            [12]  496 	mov	dpl, a
      000010 75 83 00         [24]  497 	mov	dph, #0
      000013 D0 E0            [24]  498 	pop	acc
      000015 22               [24]  499 	ret
                                    500 ;	life.c:25: }
                                    501 ;	naked function: no epilogue.
                                    502 ;------------------------------------------------------------
                                    503 ;Allocation info for local variables in function 'int0'
                                    504 ;------------------------------------------------------------
                                    505 ;	life.c:56: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    506 ;	-----------------------------------------
                                    507 ;	 function int0
                                    508 ;	-----------------------------------------
      000016                        509 _int0:
                           00000F   510 	ar7 = 0x0f
                           00000E   511 	ar6 = 0x0e
                           00000D   512 	ar5 = 0x0d
                           00000C   513 	ar4 = 0x0c
                           00000B   514 	ar3 = 0x0b
                           00000A   515 	ar2 = 0x0a
                           000009   516 	ar1 = 0x09
                           000008   517 	ar0 = 0x08
      000016 C0 D0            [24]  518 	push	psw
      000018 75 D0 08         [24]  519 	mov	psw,#0x08
                                    520 ;	life.c:57: i0 = 1;
      00001B 78r10            [12]  521 	mov	r0,#_i0
      00001D 76 01            [12]  522 	mov	@r0,#0x01
                                    523 ;	life.c:58: }
      00001F D0 D0            [24]  524 	pop	psw
      000021 32               [24]  525 	reti
                                    526 ;	eliminated unneeded push/pop dpl
                                    527 ;	eliminated unneeded push/pop dph
                                    528 ;	eliminated unneeded push/pop b
                                    529 ;	eliminated unneeded push/pop acc
                                    530 ;------------------------------------------------------------
                                    531 ;Allocation info for local variables in function 'int1'
                                    532 ;------------------------------------------------------------
                                    533 ;	life.c:60: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    534 ;	-----------------------------------------
                                    535 ;	 function int1
                                    536 ;	-----------------------------------------
      000022                        537 _int1:
      000022 C0 D0            [24]  538 	push	psw
      000024 75 D0 08         [24]  539 	mov	psw,#0x08
                                    540 ;	life.c:61: i1 = 1;
      000027 78r11            [12]  541 	mov	r0,#_i1
      000029 76 01            [12]  542 	mov	@r0,#0x01
                                    543 ;	life.c:62: }
      00002B D0 D0            [24]  544 	pop	psw
      00002D 32               [24]  545 	reti
                                    546 ;	eliminated unneeded push/pop dpl
                                    547 ;	eliminated unneeded push/pop dph
                                    548 ;	eliminated unneeded push/pop b
                                    549 ;	eliminated unneeded push/pop acc
                                    550 ;------------------------------------------------------------
                                    551 ;Allocation info for local variables in function 'show'
                                    552 ;------------------------------------------------------------
                                    553 ;hdr                       Allocated to registers r7 
                                    554 ;__1966080005              Allocated to registers 
                                    555 ;s                         Allocated to registers r5 r6 r7 
                                    556 ;__1310720001              Allocated to registers r6 r7 
                                    557 ;a                         Allocated to registers 
                                    558 ;__1310720003              Allocated to registers r6 r7 
                                    559 ;a                         Allocated to registers 
                                    560 ;__1966080008              Allocated to registers 
                                    561 ;s                         Allocated to registers r5 r6 r7 
                                    562 ;__2621440011              Allocated to registers 
                                    563 ;s                         Allocated to registers r5 r6 r7 
                                    564 ;------------------------------------------------------------
                                    565 ;	life.c:98: void show(char hdr) {
                                    566 ;	-----------------------------------------
                                    567 ;	 function show
                                    568 ;	-----------------------------------------
      00002E                        569 _show:
                           000007   570 	ar7 = 0x07
                           000006   571 	ar6 = 0x06
                           000005   572 	ar5 = 0x05
                           000004   573 	ar4 = 0x04
                           000003   574 	ar3 = 0x03
                           000002   575 	ar2 = 0x02
                           000001   576 	ar1 = 0x01
                           000000   577 	ar0 = 0x00
                                    578 ;	life.c:99: if (hdr) {
      00002E E5 82            [12]  579 	mov	a,dpl
      000030 FF               [12]  580 	mov	r7,a
      000031 70 03            [24]  581 	jnz	00190$
      000033 02r01r86         [24]  582 	ljmp	00102$
      000036                        583 00190$:
                                    584 ;	life.c:100: printstr("\033[2J\033[mGEN ");
      000036 7Dr00            [12]  585 	mov	r5,#___str_0
      000038 7Es00            [12]  586 	mov	r6,#(___str_0 >> 8)
      00003A 7F 80            [12]  587 	mov	r7,#0x80
                                    588 ;	life.c:51: return;
      00003C                        589 00121$:
                                    590 ;	life.c:49: for (; *s; s++) putchar(*s);
      00003C 8D 82            [24]  591 	mov	dpl,r5
      00003E 8E 83            [24]  592 	mov	dph,r6
      000040 8F F0            [24]  593 	mov	b,r7
      000042 12r00r00         [24]  594 	lcall	__gptrget
      000045 FC               [12]  595 	mov	r4,a
      000046 60 10            [24]  596 	jz	00109$
      000048 7B 00            [12]  597 	mov	r3,#0x00
      00004A 8C 82            [24]  598 	mov	dpl,r4
      00004C 8B 83            [24]  599 	mov	dph,r3
      00004E 12r00r00         [24]  600 	lcall	_putchar
      000051 0D               [12]  601 	inc	r5
                                    602 ;	life.c:100: printstr("\033[2J\033[mGEN ");
      000052 BD 00 E7         [24]  603 	cjne	r5,#0x00,00121$
      000055 0E               [12]  604 	inc	r6
      000056 80 E4            [24]  605 	sjmp	00121$
      000058                        606 00109$:
                                    607 ;	life.c:92: print16x(generation[1]);
      000058 78r24            [12]  608 	mov	r0,#(_generation + 0x0002)
      00005A 86 06            [24]  609 	mov	ar6,@r0
      00005C 08               [12]  610 	inc	r0
                                    611 ;	life.c:40: putchar(digits[(a >> 12) & 0xf]);
      00005D E6               [12]  612 	mov	a,@r0
      00005E FF               [12]  613 	mov	r7,a
      00005F C4               [12]  614 	swap	a
      000060 54 0F            [12]  615 	anl	a,#0x0f
      000062 30 E3 02         [24]  616 	jnb	acc.3,00193$
      000065 44 F0            [12]  617 	orl	a,#0xf0
      000067                        618 00193$:
      000067 FC               [12]  619 	mov	r4,a
      000068 33               [12]  620 	rlc	a
      000069 95 E0            [12]  621 	subb	a,acc
      00006B 53 04 0F         [24]  622 	anl	ar4,#0x0f
      00006E EC               [12]  623 	mov	a,r4
      00006F 24r00            [12]  624 	add	a,#_digits
      000071 F9               [12]  625 	mov	r1,a
      000072 87 05            [24]  626 	mov	ar5,@r1
      000074 7C 00            [12]  627 	mov	r4,#0x00
      000076 8D 82            [24]  628 	mov	dpl,r5
      000078 8C 83            [24]  629 	mov	dph,r4
      00007A 12r00r00         [24]  630 	lcall	_putchar
                                    631 ;	life.c:41: putchar(digits[(a >> 8) & 0xf]);
      00007D 8F 05            [24]  632 	mov	ar5,r7
      00007F 53 05 0F         [24]  633 	anl	ar5,#0x0f
      000082 ED               [12]  634 	mov	a,r5
      000083 24r00            [12]  635 	add	a,#_digits
      000085 F9               [12]  636 	mov	r1,a
      000086 87 05            [24]  637 	mov	ar5,@r1
      000088 7C 00            [12]  638 	mov	r4,#0x00
      00008A 8D 82            [24]  639 	mov	dpl,r5
      00008C 8C 83            [24]  640 	mov	dph,r4
      00008E 12r00r00         [24]  641 	lcall	_putchar
                                    642 ;	life.c:42: putchar(digits[(a >> 4) & 0xf]);
      000091 8E 04            [24]  643 	mov	ar4,r6
      000093 EF               [12]  644 	mov	a,r7
      000094 C4               [12]  645 	swap	a
      000095 CC               [12]  646 	xch	a,r4
      000096 C4               [12]  647 	swap	a
      000097 54 0F            [12]  648 	anl	a,#0x0f
      000099 6C               [12]  649 	xrl	a,r4
      00009A CC               [12]  650 	xch	a,r4
      00009B 54 0F            [12]  651 	anl	a,#0x0f
      00009D CC               [12]  652 	xch	a,r4
      00009E 6C               [12]  653 	xrl	a,r4
      00009F CC               [12]  654 	xch	a,r4
      0000A0 30 E3 02         [24]  655 	jnb	acc.3,00194$
      0000A3 44 F0            [12]  656 	orl	a,#0xf0
      0000A5                        657 00194$:
      0000A5 53 04 0F         [24]  658 	anl	ar4,#0x0f
      0000A8 EC               [12]  659 	mov	a,r4
      0000A9 24r00            [12]  660 	add	a,#_digits
      0000AB F9               [12]  661 	mov	r1,a
      0000AC 87 05            [24]  662 	mov	ar5,@r1
      0000AE 7C 00            [12]  663 	mov	r4,#0x00
      0000B0 8D 82            [24]  664 	mov	dpl,r5
      0000B2 8C 83            [24]  665 	mov	dph,r4
      0000B4 12r00r00         [24]  666 	lcall	_putchar
                                    667 ;	life.c:43: putchar(digits[a & 0xf]);
      0000B7 53 06 0F         [24]  668 	anl	ar6,#0x0f
      0000BA EE               [12]  669 	mov	a,r6
      0000BB 24r00            [12]  670 	add	a,#_digits
      0000BD F9               [12]  671 	mov	r1,a
      0000BE 87 07            [24]  672 	mov	ar7,@r1
      0000C0 7E 00            [12]  673 	mov	r6,#0x00
      0000C2 8F 82            [24]  674 	mov	dpl,r7
      0000C4 8E 83            [24]  675 	mov	dph,r6
      0000C6 12r00r00         [24]  676 	lcall	_putchar
                                    677 ;	life.c:93: print16x(generation[0]);
      0000C9 78r22            [12]  678 	mov	r0,#_generation
      0000CB 86 06            [24]  679 	mov	ar6,@r0
      0000CD 08               [12]  680 	inc	r0
                                    681 ;	life.c:40: putchar(digits[(a >> 12) & 0xf]);
      0000CE E6               [12]  682 	mov	a,@r0
      0000CF FF               [12]  683 	mov	r7,a
      0000D0 C4               [12]  684 	swap	a
      0000D1 54 0F            [12]  685 	anl	a,#0x0f
      0000D3 30 E3 02         [24]  686 	jnb	acc.3,00195$
      0000D6 44 F0            [12]  687 	orl	a,#0xf0
      0000D8                        688 00195$:
      0000D8 FC               [12]  689 	mov	r4,a
      0000D9 33               [12]  690 	rlc	a
      0000DA 95 E0            [12]  691 	subb	a,acc
      0000DC 53 04 0F         [24]  692 	anl	ar4,#0x0f
      0000DF EC               [12]  693 	mov	a,r4
      0000E0 24r00            [12]  694 	add	a,#_digits
      0000E2 F9               [12]  695 	mov	r1,a
      0000E3 87 05            [24]  696 	mov	ar5,@r1
      0000E5 7C 00            [12]  697 	mov	r4,#0x00
      0000E7 8D 82            [24]  698 	mov	dpl,r5
      0000E9 8C 83            [24]  699 	mov	dph,r4
      0000EB 12r00r00         [24]  700 	lcall	_putchar
                                    701 ;	life.c:41: putchar(digits[(a >> 8) & 0xf]);
      0000EE 8F 05            [24]  702 	mov	ar5,r7
      0000F0 53 05 0F         [24]  703 	anl	ar5,#0x0f
      0000F3 ED               [12]  704 	mov	a,r5
      0000F4 24r00            [12]  705 	add	a,#_digits
      0000F6 F9               [12]  706 	mov	r1,a
      0000F7 87 05            [24]  707 	mov	ar5,@r1
      0000F9 7C 00            [12]  708 	mov	r4,#0x00
      0000FB 8D 82            [24]  709 	mov	dpl,r5
      0000FD 8C 83            [24]  710 	mov	dph,r4
      0000FF 12r00r00         [24]  711 	lcall	_putchar
                                    712 ;	life.c:42: putchar(digits[(a >> 4) & 0xf]);
      000102 8E 04            [24]  713 	mov	ar4,r6
      000104 EF               [12]  714 	mov	a,r7
      000105 C4               [12]  715 	swap	a
      000106 CC               [12]  716 	xch	a,r4
      000107 C4               [12]  717 	swap	a
      000108 54 0F            [12]  718 	anl	a,#0x0f
      00010A 6C               [12]  719 	xrl	a,r4
      00010B CC               [12]  720 	xch	a,r4
      00010C 54 0F            [12]  721 	anl	a,#0x0f
      00010E CC               [12]  722 	xch	a,r4
      00010F 6C               [12]  723 	xrl	a,r4
      000110 CC               [12]  724 	xch	a,r4
      000111 30 E3 02         [24]  725 	jnb	acc.3,00196$
      000114 44 F0            [12]  726 	orl	a,#0xf0
      000116                        727 00196$:
      000116 53 04 0F         [24]  728 	anl	ar4,#0x0f
      000119 EC               [12]  729 	mov	a,r4
      00011A 24r00            [12]  730 	add	a,#_digits
      00011C F9               [12]  731 	mov	r1,a
      00011D 87 05            [24]  732 	mov	ar5,@r1
      00011F 7C 00            [12]  733 	mov	r4,#0x00
      000121 8D 82            [24]  734 	mov	dpl,r5
      000123 8C 83            [24]  735 	mov	dph,r4
      000125 12r00r00         [24]  736 	lcall	_putchar
                                    737 ;	life.c:43: putchar(digits[a & 0xf]);
      000128 53 06 0F         [24]  738 	anl	ar6,#0x0f
      00012B EE               [12]  739 	mov	a,r6
      00012C 24r00            [12]  740 	add	a,#_digits
      00012E F9               [12]  741 	mov	r1,a
      00012F 87 07            [24]  742 	mov	ar7,@r1
      000131 7E 00            [12]  743 	mov	r6,#0x00
      000133 8F 82            [24]  744 	mov	dpl,r7
      000135 8E 83            [24]  745 	mov	dph,r6
      000137 12r00r00         [24]  746 	lcall	_putchar
                                    747 ;	life.c:102: printstr("\r\n");
      00013A 7Dr0C            [12]  748 	mov	r5,#___str_1
      00013C 7Es00            [12]  749 	mov	r6,#(___str_1 >> 8)
      00013E 7F 80            [12]  750 	mov	r7,#0x80
                                    751 ;	life.c:51: return;
      000140                        752 00124$:
                                    753 ;	life.c:49: for (; *s; s++) putchar(*s);
      000140 8D 82            [24]  754 	mov	dpl,r5
      000142 8E 83            [24]  755 	mov	dph,r6
      000144 8F F0            [24]  756 	mov	b,r7
      000146 12r00r00         [24]  757 	lcall	__gptrget
      000149 FC               [12]  758 	mov	r4,a
      00014A 60 10            [24]  759 	jz	00114$
      00014C 7B 00            [12]  760 	mov	r3,#0x00
      00014E 8C 82            [24]  761 	mov	dpl,r4
      000150 8B 83            [24]  762 	mov	dph,r3
      000152 12r00r00         [24]  763 	lcall	_putchar
      000155 0D               [12]  764 	inc	r5
                                    765 ;	life.c:102: printstr("\r\n");
      000156 BD 00 E7         [24]  766 	cjne	r5,#0x00,00124$
      000159 0E               [12]  767 	inc	r6
      00015A 80 E4            [24]  768 	sjmp	00124$
      00015C                        769 00114$:
                                    770 ;	life.c:85: generation[0]++;
      00015C 78r22            [12]  771 	mov	r0,#_generation
      00015E 86 06            [24]  772 	mov	ar6,@r0
      000160 08               [12]  773 	inc	r0
      000161 86 07            [24]  774 	mov	ar7,@r0
      000163 0E               [12]  775 	inc	r6
      000164 BE 00 01         [24]  776 	cjne	r6,#0x00,00199$
      000167 0F               [12]  777 	inc	r7
      000168                        778 00199$:
      000168 78r22            [12]  779 	mov	r0,#_generation
      00016A A6 06            [24]  780 	mov	@r0,ar6
      00016C 08               [12]  781 	inc	r0
      00016D A6 07            [24]  782 	mov	@r0,ar7
                                    783 ;	life.c:86: if (!generation[0]) generation[1]++;
      00016F EE               [12]  784 	mov	a,r6
      000170 4F               [12]  785 	orl	a,r7
      000171 70 13            [24]  786 	jnz	00102$
      000173 78r24            [12]  787 	mov	r0,#(_generation + 0x0002)
      000175 86 06            [24]  788 	mov	ar6,@r0
      000177 08               [12]  789 	inc	r0
      000178 86 07            [24]  790 	mov	ar7,@r0
      00017A 0E               [12]  791 	inc	r6
      00017B BE 00 01         [24]  792 	cjne	r6,#0x00,00201$
      00017E 0F               [12]  793 	inc	r7
      00017F                        794 00201$:
      00017F 78r24            [12]  795 	mov	r0,#(_generation + 0x0002)
      000181 A6 06            [24]  796 	mov	@r0,ar6
      000183 08               [12]  797 	inc	r0
      000184 A6 07            [24]  798 	mov	@r0,ar7
                                    799 ;	life.c:103: updategen();
      000186                        800 00102$:
                                    801 ;	life.c:106: for (x = 0; x < W; x++) {
      000186 78r12            [12]  802 	mov	r0,#_x
      000188 E4               [12]  803 	clr	a
      000189 F6               [12]  804 	mov	@r0,a
      00018A 08               [12]  805 	inc	r0
      00018B F6               [12]  806 	mov	@r0,a
      00018C                        807 00131$:
                                    808 ;	life.c:107: for (y = 0; y < H; y++)
      00018C 78r14            [12]  809 	mov	r0,#_y
      00018E E4               [12]  810 	clr	a
      00018F F6               [12]  811 	mov	@r0,a
      000190 08               [12]  812 	inc	r0
      000191 F6               [12]  813 	mov	@r0,a
      000192                        814 00126$:
                                    815 ;	life.c:108: if (u[A2D(W, y, x)]) {
      000192 78r14            [12]  816 	mov	r0,#_y
      000194 86 06            [24]  817 	mov	ar6,@r0
      000196 08               [12]  818 	inc	r0
      000197 E6               [12]  819 	mov	a,@r0
      000198 C4               [12]  820 	swap	a
      000199 23               [12]  821 	rl	a
      00019A 54 E0            [12]  822 	anl	a,#0xe0
      00019C CE               [12]  823 	xch	a,r6
      00019D C4               [12]  824 	swap	a
      00019E 23               [12]  825 	rl	a
      00019F CE               [12]  826 	xch	a,r6
      0001A0 6E               [12]  827 	xrl	a,r6
      0001A1 CE               [12]  828 	xch	a,r6
      0001A2 54 E0            [12]  829 	anl	a,#0xe0
      0001A4 CE               [12]  830 	xch	a,r6
      0001A5 6E               [12]  831 	xrl	a,r6
      0001A6 FF               [12]  832 	mov	r7,a
      0001A7 78r12            [12]  833 	mov	r0,#_x
      0001A9 E6               [12]  834 	mov	a,@r0
      0001AA 2E               [12]  835 	add	a,r6
      0001AB FE               [12]  836 	mov	r6,a
      0001AC 08               [12]  837 	inc	r0
      0001AD E6               [12]  838 	mov	a,@r0
      0001AE 3F               [12]  839 	addc	a,r7
      0001AF FF               [12]  840 	mov	r7,a
      0001B0 EE               [12]  841 	mov	a,r6
      0001B1 24r00            [12]  842 	add	a,#_u
      0001B3 FE               [12]  843 	mov	r6,a
      0001B4 EF               [12]  844 	mov	a,r7
      0001B5 34s08            [12]  845 	addc	a,#(_u >> 8)
      0001B7 FF               [12]  846 	mov	r7,a
      0001B8 8E 82            [24]  847 	mov	dpl,r6
      0001BA 8F 83            [24]  848 	mov	dph,r7
      0001BC E0               [24]  849 	movx	a,@dptr
      0001BD 60 0E            [24]  850 	jz	00104$
                                    851 ;	life.c:109: putchar('['); putchar(']');
      0001BF 90 00 5B         [24]  852 	mov	dptr,#0x005b
      0001C2 12r00r00         [24]  853 	lcall	_putchar
      0001C5 90 00 5D         [24]  854 	mov	dptr,#0x005d
      0001C8 12r00r00         [24]  855 	lcall	_putchar
      0001CB 80 0C            [24]  856 	sjmp	00127$
      0001CD                        857 00104$:
                                    858 ;	life.c:111: putchar('#'); putchar('#');
      0001CD 90 00 23         [24]  859 	mov	dptr,#0x0023
      0001D0 12r00r00         [24]  860 	lcall	_putchar
      0001D3 90 00 23         [24]  861 	mov	dptr,#0x0023
      0001D6 12r00r00         [24]  862 	lcall	_putchar
      0001D9                        863 00127$:
                                    864 ;	life.c:107: for (y = 0; y < H; y++)
      0001D9 78r14            [12]  865 	mov	r0,#_y
      0001DB 06               [12]  866 	inc	@r0
      0001DC B6 00 02         [24]  867 	cjne	@r0,#0x00,00203$
      0001DF 08               [12]  868 	inc	r0
      0001E0 06               [12]  869 	inc	@r0
      0001E1                        870 00203$:
      0001E1 78r14            [12]  871 	mov	r0,#_y
      0001E3 C3               [12]  872 	clr	c
      0001E4 E6               [12]  873 	mov	a,@r0
      0001E5 94 40            [12]  874 	subb	a,#0x40
      0001E7 08               [12]  875 	inc	r0
      0001E8 E6               [12]  876 	mov	a,@r0
      0001E9 64 80            [12]  877 	xrl	a,#0x80
      0001EB 94 80            [12]  878 	subb	a,#0x80
      0001ED 40 A3            [24]  879 	jc	00126$
                                    880 ;	life.c:113: printstr("\r\n");
      0001EF 7Dr0C            [12]  881 	mov	r5,#___str_1
      0001F1 7Es00            [12]  882 	mov	r6,#(___str_1 >> 8)
      0001F3 7F 80            [12]  883 	mov	r7,#0x80
                                    884 ;	life.c:51: return;
      0001F5                        885 00129$:
                                    886 ;	life.c:49: for (; *s; s++) putchar(*s);
      0001F5 8D 82            [24]  887 	mov	dpl,r5
      0001F7 8E 83            [24]  888 	mov	dph,r6
      0001F9 8F F0            [24]  889 	mov	b,r7
      0001FB 12r00r00         [24]  890 	lcall	__gptrget
      0001FE FC               [12]  891 	mov	r4,a
      0001FF 60 10            [24]  892 	jz	00119$
      000201 7B 00            [12]  893 	mov	r3,#0x00
      000203 8C 82            [24]  894 	mov	dpl,r4
      000205 8B 83            [24]  895 	mov	dph,r3
      000207 12r00r00         [24]  896 	lcall	_putchar
      00020A 0D               [12]  897 	inc	r5
                                    898 ;	life.c:113: printstr("\r\n");
      00020B BD 00 E7         [24]  899 	cjne	r5,#0x00,00129$
      00020E 0E               [12]  900 	inc	r6
      00020F 80 E4            [24]  901 	sjmp	00129$
      000211                        902 00119$:
                                    903 ;	life.c:106: for (x = 0; x < W; x++) {
      000211 78r12            [12]  904 	mov	r0,#_x
      000213 06               [12]  905 	inc	@r0
      000214 B6 00 02         [24]  906 	cjne	@r0,#0x00,00207$
      000217 08               [12]  907 	inc	r0
      000218 06               [12]  908 	inc	@r0
      000219                        909 00207$:
      000219 78r12            [12]  910 	mov	r0,#_x
      00021B C3               [12]  911 	clr	c
      00021C E6               [12]  912 	mov	a,@r0
      00021D 94 20            [12]  913 	subb	a,#0x20
      00021F 08               [12]  914 	inc	r0
      000220 E6               [12]  915 	mov	a,@r0
      000221 64 80            [12]  916 	xrl	a,#0x80
      000223 94 80            [12]  917 	subb	a,#0x80
      000225 50 03            [24]  918 	jnc	00208$
      000227 02r01r8C         [24]  919 	ljmp	00131$
      00022A                        920 00208$:
                                    921 ;	life.c:116: return;
                                    922 ;	life.c:117: }
      00022A 22               [24]  923 	ret
                                    924 ;------------------------------------------------------------
                                    925 ;Allocation info for local variables in function 'main'
                                    926 ;------------------------------------------------------------
                                    927 ;__2621440019              Allocated to registers 
                                    928 ;s                         Allocated to registers r5 r6 r7 
                                    929 ;__1310720013              Allocated to registers 
                                    930 ;s                         Allocated to registers r5 r6 r7 
                                    931 ;__1310720015              Allocated to registers r6 r7 
                                    932 ;a                         Allocated to registers r4 r5 
                                    933 ;__1310720017              Allocated to registers 
                                    934 ;s                         Allocated to registers r5 r6 r7 
                                    935 ;__2621440023              Allocated to registers 
                                    936 ;s                         Allocated to registers r5 r6 r7 
                                    937 ;__4587520027              Allocated to registers 
                                    938 ;s                         Allocated to registers r5 r6 r7 
                                    939 ;__4587520029              Allocated to registers 
                                    940 ;s                         Allocated to registers r5 r6 r7 
                                    941 ;__4587520031              Allocated to registers 
                                    942 ;s                         Allocated to registers r5 r6 r7 
                                    943 ;__3276800033              Allocated to registers 
                                    944 ;s                         Allocated to registers r5 r6 r7 
                                    945 ;__1310720035              Allocated to registers 
                                    946 ;s                         Allocated to registers r5 r6 r7 
                                    947 ;sloc0                     Allocated to stack - _bp +1
                                    948 ;sloc1                     Allocated to stack - _bp +3
                                    949 ;sloc2                     Allocated to stack - _bp +5
                                    950 ;sloc3                     Allocated to stack - _bp +7
                                    951 ;sloc4                     Allocated to stack - _bp +9
                                    952 ;sloc5                     Allocated to stack - _bp +11
                                    953 ;sloc6                     Allocated to stack - _bp +13
                                    954 ;------------------------------------------------------------
                                    955 ;	life.c:211: void main(void) {
                                    956 ;	-----------------------------------------
                                    957 ;	 function main
                                    958 ;	-----------------------------------------
      00022B                        959 _main:
      00022B C0*00            [24]  960 	push	_bp
      00022D E5 81            [12]  961 	mov	a,sp
      00022F F5*00            [12]  962 	mov	_bp,a
      000231 24 0E            [12]  963 	add	a,#0x0e
      000233 F5 81            [12]  964 	mov	sp,a
                                    965 ;	life.c:212: IT0 = 1;
                                    966 ;	assignBit
      000235 D2 88            [12]  967 	setb	_IT0
                                    968 ;	life.c:213: IT1 = 1;
                                    969 ;	assignBit
      000237 D2 8A            [12]  970 	setb	_IT1
                                    971 ;	life.c:214: EX0 = 1;
                                    972 ;	assignBit
      000239 D2 A8            [12]  973 	setb	_EX0
                                    974 ;	life.c:215: EX1 = 1;
                                    975 ;	assignBit
      00023B D2 AA            [12]  976 	setb	_EX1
                                    977 ;	life.c:216: EA = 1;
                                    978 ;	assignBit
      00023D D2 AF            [12]  979 	setb	_EA
                                    980 ;	life.c:218: for (i0 = 0; !i0; ) {		
      00023F 78r10            [12]  981 	mov	r0,#_i0
      000241 76 00            [12]  982 	mov	@r0,#0x00
      000243                        983 00220$:
                                    984 ;	life.c:219: printstr("\033[2J\033[mLIFE INIT\r\n");
      000243 7Dr1A            [12]  985 	mov	r5,#___str_4
      000245 7Es00            [12]  986 	mov	r6,#(___str_4 >> 8)
      000247 7F 80            [12]  987 	mov	r7,#0x80
                                    988 ;	life.c:51: return;
      000249                        989 00186$:
                                    990 ;	life.c:49: for (; *s; s++) putchar(*s);
      000249 8D 82            [24]  991 	mov	dpl,r5
      00024B 8E 83            [24]  992 	mov	dph,r6
      00024D 8F F0            [24]  993 	mov	b,r7
      00024F 12r00r00         [24]  994 	lcall	__gptrget
      000252 FC               [12]  995 	mov	r4,a
      000253 60 10            [24]  996 	jz	00108$
      000255 7B 00            [12]  997 	mov	r3,#0x00
      000257 8C 82            [24]  998 	mov	dpl,r4
      000259 8B 83            [24]  999 	mov	dph,r3
      00025B 12r00r00         [24] 1000 	lcall	_putchar
      00025E 0D               [12] 1001 	inc	r5
                                   1002 ;	life.c:220: while (1) {
      00025F BD 00 E7         [24] 1003 	cjne	r5,#0x00,00186$
      000262 0E               [12] 1004 	inc	r6
      000263 80 E4            [24] 1005 	sjmp	00186$
      000265                       1006 00108$:
                                   1007 ;	life.c:221: c = toupper(getchar());
      000265 12r00r09         [24] 1008 	lcall	_getchar
      000268 12r00r00         [24] 1009 	lcall	_toupper
      00026B AE 82            [24] 1010 	mov	r6,dpl
      00026D AF 83            [24] 1011 	mov	r7,dph
      00026F 78r18            [12] 1012 	mov	r0,#_c
      000271 A6 06            [24] 1013 	mov	@r0,ar6
      000273 08               [12] 1014 	inc	r0
      000274 A6 07            [24] 1015 	mov	@r0,ar7
                                   1016 ;	life.c:222: if (i0 || (c == (int)'T')) goto terminate;
      000276 78r10            [12] 1017 	mov	r0,#_i0
      000278 E6               [12] 1018 	mov	a,@r0
      000279 60 03            [24] 1019 	jz	00435$
      00027B 02r09rCC         [24] 1020 	ljmp	00133$
      00027E                       1021 00435$:
      00027E BE 54 06         [24] 1022 	cjne	r6,#0x54,00436$
      000281 BF 00 03         [24] 1023 	cjne	r7,#0x00,00436$
      000284 02r09rCC         [24] 1024 	ljmp	00133$
      000287                       1025 00436$:
                                   1026 ;	life.c:223: else if (c == (int)'L') break;
      000287 BE 4C DB         [24] 1027 	cjne	r6,#0x4c,00108$
      00028A BF 00 D8         [24] 1028 	cjne	r7,#0x00,00108$
                                   1029 ;	life.c:226: reload:
      00028D                       1030 00110$:
                                   1031 ;	life.c:120: memset(u, 0, sizeof (u));
      00028D E4               [12] 1032 	clr	a
      00028E C0 E0            [24] 1033 	push	acc
      000290 74 08            [12] 1034 	mov	a,#0x08
      000292 C0 E0            [24] 1035 	push	acc
      000294 E4               [12] 1036 	clr	a
      000295 C0 E0            [24] 1037 	push	acc
      000297 90r08r00         [24] 1038 	mov	dptr,#_u
      00029A 75 F0 00         [24] 1039 	mov	b,#0x00
      00029D 12r00r00         [24] 1040 	lcall	_memset
      0002A0 15 81            [12] 1041 	dec	sp
      0002A2 15 81            [12] 1042 	dec	sp
      0002A4 15 81            [12] 1043 	dec	sp
                                   1044 ;	life.c:121: memset(pu, 0, sizeof (pu));
      0002A6 E4               [12] 1045 	clr	a
      0002A7 C0 E0            [24] 1046 	push	acc
      0002A9 74 08            [12] 1047 	mov	a,#0x08
      0002AB C0 E0            [24] 1048 	push	acc
      0002AD E4               [12] 1049 	clr	a
      0002AE C0 E0            [24] 1050 	push	acc
      0002B0 90r00r00         [24] 1051 	mov	dptr,#_pu
      0002B3 75 F0 00         [24] 1052 	mov	b,#0x00
      0002B6 12r00r00         [24] 1053 	lcall	_memset
      0002B9 15 81            [12] 1054 	dec	sp
      0002BB 15 81            [12] 1055 	dec	sp
      0002BD 15 81            [12] 1056 	dec	sp
                                   1057 ;	life.c:127: j = 0;
      0002BF 78r16            [12] 1058 	mov	r0,#_j
      0002C1 E4               [12] 1059 	clr	a
      0002C2 F6               [12] 1060 	mov	@r0,a
      0002C3 08               [12] 1061 	inc	r0
      0002C4 F6               [12] 1062 	mov	@r0,a
                                   1063 ;	life.c:129: printstr("LOAD <");
      0002C5 7Dr0F            [12] 1064 	mov	r5,#___str_2
      0002C7 7Es00            [12] 1065 	mov	r6,#(___str_2 >> 8)
      0002C9 7F 80            [12] 1066 	mov	r7,#0x80
                                   1067 ;	life.c:51: return;
      0002CB                       1068 00189$:
                                   1069 ;	life.c:49: for (; *s; s++) putchar(*s);
      0002CB 8D 82            [24] 1070 	mov	dpl,r5
      0002CD 8E 83            [24] 1071 	mov	dph,r6
      0002CF 8F F0            [24] 1072 	mov	b,r7
      0002D1 12r00r00         [24] 1073 	lcall	__gptrget
      0002D4 FC               [12] 1074 	mov	r4,a
      0002D5 60 10            [24] 1075 	jz	00138$
      0002D7 7B 00            [12] 1076 	mov	r3,#0x00
      0002D9 8C 82            [24] 1077 	mov	dpl,r4
      0002DB 8B 83            [24] 1078 	mov	dph,r3
      0002DD 12r00r00         [24] 1079 	lcall	_putchar
      0002E0 0D               [12] 1080 	inc	r5
                                   1081 ;	life.c:129: printstr("LOAD <");
      0002E1 BD 00 E7         [24] 1082 	cjne	r5,#0x00,00189$
      0002E4 0E               [12] 1083 	inc	r6
      0002E5 80 E4            [24] 1084 	sjmp	00189$
      0002E7                       1085 00138$:
                                   1086 ;	life.c:131: for (y = 0; y < H; y++) {
      0002E7 78r14            [12] 1087 	mov	r0,#_y
      0002E9 E4               [12] 1088 	clr	a
      0002EA F6               [12] 1089 	mov	@r0,a
      0002EB 08               [12] 1090 	inc	r0
      0002EC F6               [12] 1091 	mov	@r0,a
      0002ED                       1092 00192$:
                                   1093 ;	life.c:132: for (x = 0; x < W; x++) {
      0002ED 78r12            [12] 1094 	mov	r0,#_x
      0002EF E4               [12] 1095 	clr	a
      0002F0 F6               [12] 1096 	mov	@r0,a
      0002F1 08               [12] 1097 	inc	r0
      0002F2 F6               [12] 1098 	mov	@r0,a
                                   1099 ;	life.c:133: while (1) {
      0002F3                       1100 00151$:
                                   1101 ;	life.c:134: c = toupper(getchar());
      0002F3 12r00r09         [24] 1102 	lcall	_getchar
      0002F6 12r00r00         [24] 1103 	lcall	_toupper
      0002F9 AE 82            [24] 1104 	mov	r6,dpl
      0002FB AF 83            [24] 1105 	mov	r7,dph
      0002FD 78r18            [12] 1106 	mov	r0,#_c
      0002FF A6 06            [24] 1107 	mov	@r0,ar6
      000301 08               [12] 1108 	inc	r0
      000302 A6 07            [24] 1109 	mov	@r0,ar7
                                   1110 ;	life.c:135: if (c == (int)'0') {
      000304 BE 30 37         [24] 1111 	cjne	r6,#0x30,00149$
      000307 BF 00 34         [24] 1112 	cjne	r7,#0x00,00149$
                                   1113 ;	life.c:136: u[A2D(W, y, x)] = 0;
      00030A 78r14            [12] 1114 	mov	r0,#_y
      00030C 86 04            [24] 1115 	mov	ar4,@r0
      00030E 08               [12] 1116 	inc	r0
      00030F E6               [12] 1117 	mov	a,@r0
      000310 C4               [12] 1118 	swap	a
      000311 23               [12] 1119 	rl	a
      000312 54 E0            [12] 1120 	anl	a,#0xe0
      000314 CC               [12] 1121 	xch	a,r4
      000315 C4               [12] 1122 	swap	a
      000316 23               [12] 1123 	rl	a
      000317 CC               [12] 1124 	xch	a,r4
      000318 6C               [12] 1125 	xrl	a,r4
      000319 CC               [12] 1126 	xch	a,r4
      00031A 54 E0            [12] 1127 	anl	a,#0xe0
      00031C CC               [12] 1128 	xch	a,r4
      00031D 6C               [12] 1129 	xrl	a,r4
      00031E FD               [12] 1130 	mov	r5,a
      00031F 78r12            [12] 1131 	mov	r0,#_x
      000321 E6               [12] 1132 	mov	a,@r0
      000322 2C               [12] 1133 	add	a,r4
      000323 FC               [12] 1134 	mov	r4,a
      000324 08               [12] 1135 	inc	r0
      000325 E6               [12] 1136 	mov	a,@r0
      000326 3D               [12] 1137 	addc	a,r5
      000327 FD               [12] 1138 	mov	r5,a
      000328 EC               [12] 1139 	mov	a,r4
      000329 24r00            [12] 1140 	add	a,#_u
      00032B F5 82            [12] 1141 	mov	dpl,a
      00032D ED               [12] 1142 	mov	a,r5
      00032E 34s08            [12] 1143 	addc	a,#(_u >> 8)
      000330 F5 83            [12] 1144 	mov	dph,a
      000332 E4               [12] 1145 	clr	a
      000333 F0               [24] 1146 	movx	@dptr,a
                                   1147 ;	life.c:137: j++;
      000334 78r16            [12] 1148 	mov	r0,#_j
      000336 06               [12] 1149 	inc	@r0
      000337 B6 00 02         [24] 1150 	cjne	@r0,#0x00,00443$
      00033A 08               [12] 1151 	inc	r0
      00033B 06               [12] 1152 	inc	@r0
      00033C                       1153 00443$:
                                   1154 ;	life.c:138: break;
      00033C 80 4E            [24] 1155 	sjmp	00154$
      00033E                       1156 00149$:
                                   1157 ;	life.c:139: } else if (c == (int)'1') {
      00033E BE 31 38         [24] 1158 	cjne	r6,#0x31,00147$
      000341 BF 00 35         [24] 1159 	cjne	r7,#0x00,00147$
                                   1160 ;	life.c:140: u[A2D(W, y, x)] = 1;
      000344 78r14            [12] 1161 	mov	r0,#_y
      000346 86 04            [24] 1162 	mov	ar4,@r0
      000348 08               [12] 1163 	inc	r0
      000349 E6               [12] 1164 	mov	a,@r0
      00034A C4               [12] 1165 	swap	a
      00034B 23               [12] 1166 	rl	a
      00034C 54 E0            [12] 1167 	anl	a,#0xe0
      00034E CC               [12] 1168 	xch	a,r4
      00034F C4               [12] 1169 	swap	a
      000350 23               [12] 1170 	rl	a
      000351 CC               [12] 1171 	xch	a,r4
      000352 6C               [12] 1172 	xrl	a,r4
      000353 CC               [12] 1173 	xch	a,r4
      000354 54 E0            [12] 1174 	anl	a,#0xe0
      000356 CC               [12] 1175 	xch	a,r4
      000357 6C               [12] 1176 	xrl	a,r4
      000358 FD               [12] 1177 	mov	r5,a
      000359 78r12            [12] 1178 	mov	r0,#_x
      00035B E6               [12] 1179 	mov	a,@r0
      00035C 2C               [12] 1180 	add	a,r4
      00035D FC               [12] 1181 	mov	r4,a
      00035E 08               [12] 1182 	inc	r0
      00035F E6               [12] 1183 	mov	a,@r0
      000360 3D               [12] 1184 	addc	a,r5
      000361 FD               [12] 1185 	mov	r5,a
      000362 EC               [12] 1186 	mov	a,r4
      000363 24r00            [12] 1187 	add	a,#_u
      000365 F5 82            [12] 1188 	mov	dpl,a
      000367 ED               [12] 1189 	mov	a,r5
      000368 34s08            [12] 1190 	addc	a,#(_u >> 8)
      00036A F5 83            [12] 1191 	mov	dph,a
      00036C 74 01            [12] 1192 	mov	a,#0x01
      00036E F0               [24] 1193 	movx	@dptr,a
                                   1194 ;	life.c:141: j++;
      00036F 78r16            [12] 1195 	mov	r0,#_j
      000371 06               [12] 1196 	inc	@r0
      000372 B6 00 02         [24] 1197 	cjne	@r0,#0x00,00446$
      000375 08               [12] 1198 	inc	r0
      000376 06               [12] 1199 	inc	@r0
      000377                       1200 00446$:
                                   1201 ;	life.c:142: break;
      000377 80 13            [24] 1202 	sjmp	00154$
      000379                       1203 00147$:
                                   1204 ;	life.c:143: } else if (c == (int)'S') goto br_inner;
      000379 BE 53 05         [24] 1205 	cjne	r6,#0x53,00447$
      00037C BF 00 02         [24] 1206 	cjne	r7,#0x00,00447$
      00037F 80 24            [24] 1207 	sjmp	00193$
      000381                       1208 00447$:
                                   1209 ;	life.c:144: else if (c == (int)'#') goto out;
      000381 BE 23 05         [24] 1210 	cjne	r6,#0x23,00448$
      000384 BF 00 02         [24] 1211 	cjne	r7,#0x00,00448$
      000387 80 35            [24] 1212 	sjmp	00164$
      000389                       1213 00448$:
      000389 02r02rF3         [24] 1214 	ljmp	00151$
                                   1215 ;	life.c:148: break;
      00038C                       1216 00154$:
                                   1217 ;	life.c:132: for (x = 0; x < W; x++) {
      00038C 78r12            [12] 1218 	mov	r0,#_x
      00038E 06               [12] 1219 	inc	@r0
      00038F B6 00 02         [24] 1220 	cjne	@r0,#0x00,00449$
      000392 08               [12] 1221 	inc	r0
      000393 06               [12] 1222 	inc	@r0
      000394                       1223 00449$:
      000394 78r12            [12] 1224 	mov	r0,#_x
      000396 C3               [12] 1225 	clr	c
      000397 E6               [12] 1226 	mov	a,@r0
      000398 94 20            [12] 1227 	subb	a,#0x20
      00039A 08               [12] 1228 	inc	r0
      00039B E6               [12] 1229 	mov	a,@r0
      00039C 64 80            [12] 1230 	xrl	a,#0x80
      00039E 94 80            [12] 1231 	subb	a,#0x80
      0003A0 50 03            [24] 1232 	jnc	00450$
      0003A2 02r02rF3         [24] 1233 	ljmp	00151$
      0003A5                       1234 00450$:
      0003A5                       1235 00193$:
                                   1236 ;	life.c:131: for (y = 0; y < H; y++) {
      0003A5 78r14            [12] 1237 	mov	r0,#_y
      0003A7 06               [12] 1238 	inc	@r0
      0003A8 B6 00 02         [24] 1239 	cjne	@r0,#0x00,00451$
      0003AB 08               [12] 1240 	inc	r0
      0003AC 06               [12] 1241 	inc	@r0
      0003AD                       1242 00451$:
      0003AD 78r14            [12] 1243 	mov	r0,#_y
      0003AF C3               [12] 1244 	clr	c
      0003B0 E6               [12] 1245 	mov	a,@r0
      0003B1 94 40            [12] 1246 	subb	a,#0x40
      0003B3 08               [12] 1247 	inc	r0
      0003B4 E6               [12] 1248 	mov	a,@r0
      0003B5 64 80            [12] 1249 	xrl	a,#0x80
      0003B7 94 80            [12] 1250 	subb	a,#0x80
      0003B9 50 03            [24] 1251 	jnc	00452$
      0003BB 02r02rED         [24] 1252 	ljmp	00192$
      0003BE                       1253 00452$:
                                   1254 ;	life.c:152: out:
      0003BE                       1255 00164$:
                                   1256 ;	life.c:153: if (c != (int)'#')
      0003BE BE 23 05         [24] 1257 	cjne	r6,#0x23,00453$
      0003C1 BF 00 02         [24] 1258 	cjne	r7,#0x00,00453$
      0003C4 80 14            [24] 1259 	sjmp	00163$
      0003C6                       1260 00453$:
                                   1261 ;	life.c:154: while (1) {
      0003C6                       1262 00160$:
                                   1263 ;	life.c:155: c = getchar();
      0003C6 12r00r09         [24] 1264 	lcall	_getchar
      0003C9 AE 82            [24] 1265 	mov	r6,dpl
      0003CB AF 83            [24] 1266 	mov	r7,dph
      0003CD 78r18            [12] 1267 	mov	r0,#_c
      0003CF A6 06            [24] 1268 	mov	@r0,ar6
      0003D1 08               [12] 1269 	inc	r0
      0003D2 A6 07            [24] 1270 	mov	@r0,ar7
                                   1271 ;	life.c:156: if (c == (int)'#') break;
      0003D4 BE 23 EF         [24] 1272 	cjne	r6,#0x23,00160$
      0003D7 BF 00 EC         [24] 1273 	cjne	r7,#0x00,00160$
      0003DA                       1274 00163$:
                                   1275 ;	life.c:158: print16x(j);
      0003DA 78r16            [12] 1276 	mov	r0,#_j
      0003DC 86 06            [24] 1277 	mov	ar6,@r0
      0003DE 08               [12] 1278 	inc	r0
      0003DF 86 07            [24] 1279 	mov	ar7,@r0
      0003E1 8E 04            [24] 1280 	mov	ar4,r6
                                   1281 ;	life.c:40: putchar(digits[(a >> 12) & 0xf]);
      0003E3 EF               [12] 1282 	mov	a,r7
      0003E4 FD               [12] 1283 	mov	r5,a
      0003E5 C4               [12] 1284 	swap	a
      0003E6 54 0F            [12] 1285 	anl	a,#0x0f
      0003E8 30 E3 02         [24] 1286 	jnb	acc.3,00456$
      0003EB 44 F0            [12] 1287 	orl	a,#0xf0
      0003ED                       1288 00456$:
      0003ED FE               [12] 1289 	mov	r6,a
      0003EE 33               [12] 1290 	rlc	a
      0003EF 95 E0            [12] 1291 	subb	a,acc
      0003F1 53 06 0F         [24] 1292 	anl	ar6,#0x0f
      0003F4 EE               [12] 1293 	mov	a,r6
      0003F5 24r00            [12] 1294 	add	a,#_digits
      0003F7 F9               [12] 1295 	mov	r1,a
      0003F8 87 07            [24] 1296 	mov	ar7,@r1
      0003FA 7E 00            [12] 1297 	mov	r6,#0x00
      0003FC 8F 82            [24] 1298 	mov	dpl,r7
      0003FE 8E 83            [24] 1299 	mov	dph,r6
      000400 12r00r00         [24] 1300 	lcall	_putchar
                                   1301 ;	life.c:41: putchar(digits[(a >> 8) & 0xf]);
      000403 8D 07            [24] 1302 	mov	ar7,r5
      000405 53 07 0F         [24] 1303 	anl	ar7,#0x0f
      000408 EF               [12] 1304 	mov	a,r7
      000409 24r00            [12] 1305 	add	a,#_digits
      00040B F9               [12] 1306 	mov	r1,a
      00040C 87 07            [24] 1307 	mov	ar7,@r1
      00040E 7E 00            [12] 1308 	mov	r6,#0x00
      000410 8F 82            [24] 1309 	mov	dpl,r7
      000412 8E 83            [24] 1310 	mov	dph,r6
      000414 12r00r00         [24] 1311 	lcall	_putchar
                                   1312 ;	life.c:42: putchar(digits[(a >> 4) & 0xf]);
      000417 8C 06            [24] 1313 	mov	ar6,r4
      000419 ED               [12] 1314 	mov	a,r5
      00041A C4               [12] 1315 	swap	a
      00041B CE               [12] 1316 	xch	a,r6
      00041C C4               [12] 1317 	swap	a
      00041D 54 0F            [12] 1318 	anl	a,#0x0f
      00041F 6E               [12] 1319 	xrl	a,r6
      000420 CE               [12] 1320 	xch	a,r6
      000421 54 0F            [12] 1321 	anl	a,#0x0f
      000423 CE               [12] 1322 	xch	a,r6
      000424 6E               [12] 1323 	xrl	a,r6
      000425 CE               [12] 1324 	xch	a,r6
      000426 30 E3 02         [24] 1325 	jnb	acc.3,00457$
      000429 44 F0            [12] 1326 	orl	a,#0xf0
      00042B                       1327 00457$:
      00042B 53 06 0F         [24] 1328 	anl	ar6,#0x0f
      00042E EE               [12] 1329 	mov	a,r6
      00042F 24r00            [12] 1330 	add	a,#_digits
      000431 F9               [12] 1331 	mov	r1,a
      000432 87 07            [24] 1332 	mov	ar7,@r1
      000434 7E 00            [12] 1333 	mov	r6,#0x00
      000436 8F 82            [24] 1334 	mov	dpl,r7
      000438 8E 83            [24] 1335 	mov	dph,r6
      00043A 12r00r00         [24] 1336 	lcall	_putchar
                                   1337 ;	life.c:43: putchar(digits[a & 0xf]);
      00043D 53 04 0F         [24] 1338 	anl	ar4,#0x0f
      000440 EC               [12] 1339 	mov	a,r4
      000441 24r00            [12] 1340 	add	a,#_digits
      000443 F9               [12] 1341 	mov	r1,a
      000444 87 07            [24] 1342 	mov	ar7,@r1
      000446 7E 00            [12] 1343 	mov	r6,#0x00
      000448 8F 82            [24] 1344 	mov	dpl,r7
      00044A 8E 83            [24] 1345 	mov	dph,r6
      00044C 12r00r00         [24] 1346 	lcall	_putchar
                                   1347 ;	life.c:159: printstr(">\r\n");
      00044F 7Dr16            [12] 1348 	mov	r5,#___str_3
      000451 7Es00            [12] 1349 	mov	r6,#(___str_3 >> 8)
      000453 7F 80            [12] 1350 	mov	r7,#0x80
                                   1351 ;	life.c:51: return;
      000455                       1352 00195$:
                                   1353 ;	life.c:49: for (; *s; s++) putchar(*s);
      000455 8D 82            [24] 1354 	mov	dpl,r5
      000457 8E 83            [24] 1355 	mov	dph,r6
      000459 8F F0            [24] 1356 	mov	b,r7
      00045B 12r00r00         [24] 1357 	lcall	__gptrget
      00045E FC               [12] 1358 	mov	r4,a
      00045F 60 10            [24] 1359 	jz	00167$
      000461 7B 00            [12] 1360 	mov	r3,#0x00
      000463 8C 82            [24] 1361 	mov	dpl,r4
      000465 8B 83            [24] 1362 	mov	dph,r3
      000467 12r00r00         [24] 1363 	lcall	_putchar
      00046A 0D               [12] 1364 	inc	r5
                                   1365 ;	life.c:159: printstr(">\r\n");
      00046B BD 00 E7         [24] 1366 	cjne	r5,#0x00,00195$
      00046E 0E               [12] 1367 	inc	r6
      00046F 80 E4            [24] 1368 	sjmp	00195$
      000471                       1369 00167$:
                                   1370 ;	life.c:229: show(0);
      000471 75 82 00         [24] 1371 	mov	dpl,#0x00
      000474 12r00r2E         [24] 1372 	lcall	_show
                                   1373 ;	life.c:231: printstr("READY\r\n");
      000477 7Dr2D            [12] 1374 	mov	r5,#___str_5
      000479 7Es00            [12] 1375 	mov	r6,#(___str_5 >> 8)
      00047B 7F 80            [12] 1376 	mov	r7,#0x80
                                   1377 ;	life.c:51: return;
      00047D                       1378 00198$:
                                   1379 ;	life.c:49: for (; *s; s++) putchar(*s);
      00047D 8D 82            [24] 1380 	mov	dpl,r5
      00047F 8E 83            [24] 1381 	mov	dph,r6
      000481 8F F0            [24] 1382 	mov	b,r7
      000483 12r00r00         [24] 1383 	lcall	__gptrget
      000486 FC               [12] 1384 	mov	r4,a
      000487 60 10            [24] 1385 	jz	00121$
      000489 7B 00            [12] 1386 	mov	r3,#0x00
      00048B 8C 82            [24] 1387 	mov	dpl,r4
      00048D 8B 83            [24] 1388 	mov	dph,r3
      00048F 12r00r00         [24] 1389 	lcall	_putchar
      000492 0D               [12] 1390 	inc	r5
                                   1391 ;	life.c:232: while (1) {
      000493 BD 00 E7         [24] 1392 	cjne	r5,#0x00,00198$
      000496 0E               [12] 1393 	inc	r6
      000497 80 E4            [24] 1394 	sjmp	00198$
      000499                       1395 00121$:
                                   1396 ;	life.c:233: c = toupper(getchar());
      000499 12r00r09         [24] 1397 	lcall	_getchar
      00049C 12r00r00         [24] 1398 	lcall	_toupper
      00049F AE 82            [24] 1399 	mov	r6,dpl
      0004A1 AF 83            [24] 1400 	mov	r7,dph
      0004A3 78r18            [12] 1401 	mov	r0,#_c
      0004A5 A6 06            [24] 1402 	mov	@r0,ar6
      0004A7 08               [12] 1403 	inc	r0
      0004A8 A6 07            [24] 1404 	mov	@r0,ar7
                                   1405 ;	life.c:234: if (i0 || (c == (int)'T')) goto terminate;
      0004AA 78r10            [12] 1406 	mov	r0,#_i0
      0004AC E6               [12] 1407 	mov	a,@r0
      0004AD 60 03            [24] 1408 	jz	00462$
      0004AF 02r09rCC         [24] 1409 	ljmp	00133$
      0004B2                       1410 00462$:
      0004B2 BE 54 06         [24] 1411 	cjne	r6,#0x54,00463$
      0004B5 BF 00 03         [24] 1412 	cjne	r7,#0x00,00463$
      0004B8 02r09rCC         [24] 1413 	ljmp	00133$
      0004BB                       1414 00463$:
                                   1415 ;	life.c:235: else if (c == (int)'L') goto reload;
      0004BB BE 4C 06         [24] 1416 	cjne	r6,#0x4c,00464$
      0004BE BF 00 03         [24] 1417 	cjne	r7,#0x00,00464$
      0004C1 02r02r8D         [24] 1418 	ljmp	00110$
      0004C4                       1419 00464$:
                                   1420 ;	life.c:236: else if (c == (int)'S') break;
      0004C4 BE 53 D2         [24] 1421 	cjne	r6,#0x53,00121$
      0004C7 BF 00 CF         [24] 1422 	cjne	r7,#0x00,00121$
                                   1423 ;	life.c:78: generation[0] = 0;
      0004CA 78r22            [12] 1424 	mov	r0,#_generation
      0004CC 76 00            [12] 1425 	mov	@r0,#0x00
      0004CE 08               [12] 1426 	inc	r0
      0004CF 76 00            [12] 1427 	mov	@r0,#0x00
                                   1428 ;	life.c:79: generation[1] = 0;
      0004D1 78r24            [12] 1429 	mov	r0,#(_generation + 0x0002)
      0004D3 76 00            [12] 1430 	mov	@r0,#0x00
      0004D5 08               [12] 1431 	inc	r0
      0004D6 76 00            [12] 1432 	mov	@r0,#0x00
                                   1433 ;	life.c:241: for (i1 = 0; !i0 && !i1; ) {
      0004D8 78r11            [12] 1434 	mov	r0,#_i1
      0004DA 76 00            [12] 1435 	mov	@r0,#0x00
      0004DC                       1436 00215$:
      0004DC 78r10            [12] 1437 	mov	r0,#_i0
      0004DE E6               [12] 1438 	mov	a,@r0
      0004DF 60 03            [24] 1439 	jz	00467$
      0004E1 02r09r9A         [24] 1440 	ljmp	00129$
      0004E4                       1441 00467$:
      0004E4 78r11            [12] 1442 	mov	r0,#_i1
      0004E6 E6               [12] 1443 	mov	a,@r0
      0004E7 60 03            [24] 1444 	jz	00468$
      0004E9 02r09r9A         [24] 1445 	ljmp	00129$
      0004EC                       1446 00468$:
                                   1447 ;	life.c:242: show(1);
      0004EC 75 82 01         [24] 1448 	mov	dpl,#0x01
      0004EF 12r00r2E         [24] 1449 	lcall	_show
                                   1450 ;	life.c:167: fixed = 0;
      0004F2 78r1C            [12] 1451 	mov	r0,#_fixed
      0004F4 76 00            [12] 1452 	mov	@r0,#0x00
                                   1453 ;	life.c:168: cycle2 = 0;
      0004F6 78r1D            [12] 1454 	mov	r0,#_cycle2
      0004F8 76 00            [12] 1455 	mov	@r0,#0x00
                                   1456 ;	life.c:169: bstep = 0;
      0004FA 78r1A            [12] 1457 	mov	r0,#_bstep
      0004FC 76 00            [12] 1458 	mov	@r0,#0x00
                                   1459 ;	life.c:171: for (y = 0; y < H; y++) {
      0004FE 78r14            [12] 1460 	mov	r0,#_y
      000500 E4               [12] 1461 	clr	a
      000501 F6               [12] 1462 	mov	@r0,a
      000502 08               [12] 1463 	inc	r0
      000503 F6               [12] 1464 	mov	@r0,a
      000504                       1465 00202$:
                                   1466 ;	life.c:172: putchar(busy[bstep]); putchar('\r');
      000504 78r1A            [12] 1467 	mov	r0,#_bstep
      000506 E6               [12] 1468 	mov	a,@r0
      000507 24r26            [12] 1469 	add	a,#_busy
      000509 F9               [12] 1470 	mov	r1,a
      00050A 87 07            [24] 1471 	mov	ar7,@r1
      00050C 7E 00            [12] 1472 	mov	r6,#0x00
      00050E 8F 82            [24] 1473 	mov	dpl,r7
      000510 8E 83            [24] 1474 	mov	dph,r6
      000512 12r00r00         [24] 1475 	lcall	_putchar
      000515 90 00 0D         [24] 1476 	mov	dptr,#0x000d
      000518 12r00r00         [24] 1477 	lcall	_putchar
                                   1478 ;	life.c:173: bstep = (bstep + 1) & 3;
      00051B 78r1A            [12] 1479 	mov	r0,#_bstep
      00051D 86 07            [24] 1480 	mov	ar7,@r0
      00051F 0F               [12] 1481 	inc	r7
      000520 78r1A            [12] 1482 	mov	r0,#_bstep
      000522 74 03            [12] 1483 	mov	a,#0x03
      000524 5F               [12] 1484 	anl	a,r7
      000525 F6               [12] 1485 	mov	@r0,a
                                   1486 ;	life.c:174: for (x = 0; x < W; x++) {
      000526 78r12            [12] 1487 	mov	r0,#_x
      000528 E4               [12] 1488 	clr	a
      000529 F6               [12] 1489 	mov	@r0,a
      00052A 08               [12] 1490 	inc	r0
      00052B F6               [12] 1491 	mov	@r0,a
      00052C                       1492 00200$:
                                   1493 ;	life.c:175: n = -u[A2D(W, y, x)];
      00052C 78r14            [12] 1494 	mov	r0,#_y
      00052E E5*00            [12] 1495 	mov	a,_bp
      000530 24 03            [12] 1496 	add	a,#0x03
      000532 F9               [12] 1497 	mov	r1,a
      000533 E6               [12] 1498 	mov	a,@r0
      000534 F7               [12] 1499 	mov	@r1,a
      000535 08               [12] 1500 	inc	r0
      000536 E6               [12] 1501 	mov	a,@r0
      000537 C4               [12] 1502 	swap	a
      000538 23               [12] 1503 	rl	a
      000539 54 E0            [12] 1504 	anl	a,#0xe0
      00053B C7               [12] 1505 	xch	a,@r1
      00053C C4               [12] 1506 	swap	a
      00053D 23               [12] 1507 	rl	a
      00053E C7               [12] 1508 	xch	a,@r1
      00053F 67               [12] 1509 	xrl	a,@r1
      000540 C7               [12] 1510 	xch	a,@r1
      000541 54 E0            [12] 1511 	anl	a,#0xe0
      000543 C7               [12] 1512 	xch	a,@r1
      000544 67               [12] 1513 	xrl	a,@r1
      000545 09               [12] 1514 	inc	r1
      000546 F7               [12] 1515 	mov	@r1,a
      000547 E5*00            [12] 1516 	mov	a,_bp
      000549 24 03            [12] 1517 	add	a,#0x03
      00054B F8               [12] 1518 	mov	r0,a
      00054C 79r12            [12] 1519 	mov	r1,#_x
      00054E E7               [12] 1520 	mov	a,@r1
      00054F 26               [12] 1521 	add	a,@r0
      000550 C0 E0            [24] 1522 	push	acc
      000552 09               [12] 1523 	inc	r1
      000553 E7               [12] 1524 	mov	a,@r1
      000554 08               [12] 1525 	inc	r0
      000555 36               [12] 1526 	addc	a,@r0
      000556 C0 E0            [24] 1527 	push	acc
      000558 A8*00            [24] 1528 	mov	r0,_bp
      00055A 08               [12] 1529 	inc	r0
      00055B 08               [12] 1530 	inc	r0
      00055C D0 E0            [24] 1531 	pop	acc
      00055E F6               [12] 1532 	mov	@r0,a
      00055F 18               [12] 1533 	dec	r0
      000560 D0 E0            [24] 1534 	pop	acc
      000562 F6               [12] 1535 	mov	@r0,a
      000563 A8*00            [24] 1536 	mov	r0,_bp
      000565 08               [12] 1537 	inc	r0
      000566 E6               [12] 1538 	mov	a,@r0
      000567 24r00            [12] 1539 	add	a,#_u
      000569 F5 82            [12] 1540 	mov	dpl,a
      00056B 08               [12] 1541 	inc	r0
      00056C E6               [12] 1542 	mov	a,@r0
      00056D 34s08            [12] 1543 	addc	a,#(_u >> 8)
      00056F F5 83            [12] 1544 	mov	dph,a
      000571 E0               [24] 1545 	movx	a,@dptr
      000572 FB               [12] 1546 	mov	r3,a
      000573 C3               [12] 1547 	clr	c
      000574 E4               [12] 1548 	clr	a
      000575 9B               [12] 1549 	subb	a,r3
      000576 FB               [12] 1550 	mov	r3,a
                                   1551 ;	life.c:178: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000577 78r14            [12] 1552 	mov	r0,#_y
      000579 74 FF            [12] 1553 	mov	a,#0xff
      00057B 26               [12] 1554 	add	a,@r0
      00057C FA               [12] 1555 	mov	r2,a
      00057D 74 FF            [12] 1556 	mov	a,#0xff
      00057F 08               [12] 1557 	inc	r0
      000580 36               [12] 1558 	addc	a,@r0
      000581 FD               [12] 1559 	mov	r5,a
      000582 74 40            [12] 1560 	mov	a,#0x40
      000584 2A               [12] 1561 	add	a,r2
      000585 FA               [12] 1562 	mov	r2,a
      000586 E4               [12] 1563 	clr	a
      000587 3D               [12] 1564 	addc	a,r5
      000588 FD               [12] 1565 	mov	r5,a
      000589 C0 03            [24] 1566 	push	ar3
      00058B 74 40            [12] 1567 	mov	a,#0x40
      00058D C0 E0            [24] 1568 	push	acc
      00058F E4               [12] 1569 	clr	a
      000590 C0 E0            [24] 1570 	push	acc
      000592 8A 82            [24] 1571 	mov	dpl,r2
      000594 8D 83            [24] 1572 	mov	dph,r5
      000596 12r00r00         [24] 1573 	lcall	__modsint
      000599 AC 82            [24] 1574 	mov	r4,dpl
      00059B AD 83            [24] 1575 	mov	r5,dph
      00059D 15 81            [12] 1576 	dec	sp
      00059F 15 81            [12] 1577 	dec	sp
      0005A1 D0 03            [24] 1578 	pop	ar3
      0005A3 ED               [12] 1579 	mov	a,r5
      0005A4 C4               [12] 1580 	swap	a
      0005A5 23               [12] 1581 	rl	a
      0005A6 54 E0            [12] 1582 	anl	a,#0xe0
      0005A8 CC               [12] 1583 	xch	a,r4
      0005A9 C4               [12] 1584 	swap	a
      0005AA 23               [12] 1585 	rl	a
      0005AB CC               [12] 1586 	xch	a,r4
      0005AC 6C               [12] 1587 	xrl	a,r4
      0005AD CC               [12] 1588 	xch	a,r4
      0005AE 54 E0            [12] 1589 	anl	a,#0xe0
      0005B0 CC               [12] 1590 	xch	a,r4
      0005B1 6C               [12] 1591 	xrl	a,r4
      0005B2 FD               [12] 1592 	mov	r5,a
      0005B3 78r12            [12] 1593 	mov	r0,#_x
      0005B5 74 FF            [12] 1594 	mov	a,#0xff
      0005B7 26               [12] 1595 	add	a,@r0
      0005B8 FA               [12] 1596 	mov	r2,a
      0005B9 74 FF            [12] 1597 	mov	a,#0xff
      0005BB 08               [12] 1598 	inc	r0
      0005BC 36               [12] 1599 	addc	a,@r0
      0005BD FF               [12] 1600 	mov	r7,a
      0005BE 74 20            [12] 1601 	mov	a,#0x20
      0005C0 2A               [12] 1602 	add	a,r2
      0005C1 FA               [12] 1603 	mov	r2,a
      0005C2 E4               [12] 1604 	clr	a
      0005C3 3F               [12] 1605 	addc	a,r7
      0005C4 FF               [12] 1606 	mov	r7,a
      0005C5 C0 05            [24] 1607 	push	ar5
      0005C7 C0 04            [24] 1608 	push	ar4
      0005C9 C0 03            [24] 1609 	push	ar3
      0005CB 74 20            [12] 1610 	mov	a,#0x20
      0005CD C0 E0            [24] 1611 	push	acc
      0005CF E4               [12] 1612 	clr	a
      0005D0 C0 E0            [24] 1613 	push	acc
      0005D2 8A 82            [24] 1614 	mov	dpl,r2
      0005D4 8F 83            [24] 1615 	mov	dph,r7
      0005D6 12r00r00         [24] 1616 	lcall	__modsint
      0005D9 C8               [12] 1617 	xch	a,r0
      0005DA E5*00            [12] 1618 	mov	a,_bp
      0005DC 24 05            [12] 1619 	add	a,#0x05
      0005DE C8               [12] 1620 	xch	a,r0
      0005DF A6 82            [24] 1621 	mov	@r0,dpl
      0005E1 08               [12] 1622 	inc	r0
      0005E2 A6 83            [24] 1623 	mov	@r0,dph
      0005E4 15 81            [12] 1624 	dec	sp
      0005E6 15 81            [12] 1625 	dec	sp
      0005E8 D0 03            [24] 1626 	pop	ar3
      0005EA D0 04            [24] 1627 	pop	ar4
      0005EC D0 05            [24] 1628 	pop	ar5
      0005EE E5*00            [12] 1629 	mov	a,_bp
      0005F0 24 05            [12] 1630 	add	a,#0x05
      0005F2 F8               [12] 1631 	mov	r0,a
      0005F3 E6               [12] 1632 	mov	a,@r0
      0005F4 2C               [12] 1633 	add	a,r4
      0005F5 FA               [12] 1634 	mov	r2,a
      0005F6 08               [12] 1635 	inc	r0
      0005F7 E6               [12] 1636 	mov	a,@r0
      0005F8 3D               [12] 1637 	addc	a,r5
      0005F9 FF               [12] 1638 	mov	r7,a
      0005FA EA               [12] 1639 	mov	a,r2
      0005FB 24r00            [12] 1640 	add	a,#_u
      0005FD F5 82            [12] 1641 	mov	dpl,a
      0005FF EF               [12] 1642 	mov	a,r7
      000600 34s08            [12] 1643 	addc	a,#(_u >> 8)
      000602 F5 83            [12] 1644 	mov	dph,a
      000604 E0               [24] 1645 	movx	a,@dptr
      000605 2B               [12] 1646 	add	a,r3
      000606 FB               [12] 1647 	mov	r3,a
                                   1648 ;	life.c:180: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000607 78r12            [12] 1649 	mov	r0,#_x
      000609 E5*00            [12] 1650 	mov	a,_bp
      00060B 24 07            [12] 1651 	add	a,#0x07
      00060D F9               [12] 1652 	mov	r1,a
      00060E E6               [12] 1653 	mov	a,@r0
      00060F F7               [12] 1654 	mov	@r1,a
      000610 08               [12] 1655 	inc	r0
      000611 09               [12] 1656 	inc	r1
      000612 E6               [12] 1657 	mov	a,@r0
      000613 F7               [12] 1658 	mov	@r1,a
      000614 E5*00            [12] 1659 	mov	a,_bp
      000616 24 07            [12] 1660 	add	a,#0x07
      000618 F8               [12] 1661 	mov	r0,a
      000619 74 20            [12] 1662 	mov	a,#0x20
      00061B 26               [12] 1663 	add	a,@r0
      00061C FA               [12] 1664 	mov	r2,a
      00061D E4               [12] 1665 	clr	a
      00061E 08               [12] 1666 	inc	r0
      00061F 36               [12] 1667 	addc	a,@r0
      000620 FF               [12] 1668 	mov	r7,a
      000621 C0 05            [24] 1669 	push	ar5
      000623 C0 04            [24] 1670 	push	ar4
      000625 C0 03            [24] 1671 	push	ar3
      000627 74 20            [12] 1672 	mov	a,#0x20
      000629 C0 E0            [24] 1673 	push	acc
      00062B E4               [12] 1674 	clr	a
      00062C C0 E0            [24] 1675 	push	acc
      00062E 8A 82            [24] 1676 	mov	dpl,r2
      000630 8F 83            [24] 1677 	mov	dph,r7
      000632 12r00r00         [24] 1678 	lcall	__modsint
      000635 C8               [12] 1679 	xch	a,r0
      000636 E5*00            [12] 1680 	mov	a,_bp
      000638 24 09            [12] 1681 	add	a,#0x09
      00063A C8               [12] 1682 	xch	a,r0
      00063B A6 82            [24] 1683 	mov	@r0,dpl
      00063D 08               [12] 1684 	inc	r0
      00063E A6 83            [24] 1685 	mov	@r0,dph
      000640 15 81            [12] 1686 	dec	sp
      000642 15 81            [12] 1687 	dec	sp
      000644 D0 03            [24] 1688 	pop	ar3
      000646 D0 04            [24] 1689 	pop	ar4
      000648 D0 05            [24] 1690 	pop	ar5
      00064A E5*00            [12] 1691 	mov	a,_bp
      00064C 24 09            [12] 1692 	add	a,#0x09
      00064E F8               [12] 1693 	mov	r0,a
      00064F E6               [12] 1694 	mov	a,@r0
      000650 2C               [12] 1695 	add	a,r4
      000651 FA               [12] 1696 	mov	r2,a
      000652 08               [12] 1697 	inc	r0
      000653 E6               [12] 1698 	mov	a,@r0
      000654 3D               [12] 1699 	addc	a,r5
      000655 FF               [12] 1700 	mov	r7,a
      000656 EA               [12] 1701 	mov	a,r2
      000657 24r00            [12] 1702 	add	a,#_u
      000659 F5 82            [12] 1703 	mov	dpl,a
      00065B EF               [12] 1704 	mov	a,r7
      00065C 34s08            [12] 1705 	addc	a,#(_u >> 8)
      00065E F5 83            [12] 1706 	mov	dph,a
      000660 E0               [24] 1707 	movx	a,@dptr
      000661 2B               [12] 1708 	add	a,r3
      000662 FB               [12] 1709 	mov	r3,a
                                   1710 ;	life.c:182: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000663 E5*00            [12] 1711 	mov	a,_bp
      000665 24 07            [12] 1712 	add	a,#0x07
      000667 F8               [12] 1713 	mov	r0,a
      000668 74 21            [12] 1714 	mov	a,#0x21
      00066A 26               [12] 1715 	add	a,@r0
      00066B FE               [12] 1716 	mov	r6,a
      00066C E4               [12] 1717 	clr	a
      00066D 08               [12] 1718 	inc	r0
      00066E 36               [12] 1719 	addc	a,@r0
      00066F FF               [12] 1720 	mov	r7,a
      000670 C0 05            [24] 1721 	push	ar5
      000672 C0 04            [24] 1722 	push	ar4
      000674 C0 03            [24] 1723 	push	ar3
      000676 74 20            [12] 1724 	mov	a,#0x20
      000678 C0 E0            [24] 1725 	push	acc
      00067A E4               [12] 1726 	clr	a
      00067B C0 E0            [24] 1727 	push	acc
      00067D 8E 82            [24] 1728 	mov	dpl,r6
      00067F 8F 83            [24] 1729 	mov	dph,r7
      000681 12r00r00         [24] 1730 	lcall	__modsint
      000684 AE 82            [24] 1731 	mov	r6,dpl
      000686 AF 83            [24] 1732 	mov	r7,dph
      000688 15 81            [12] 1733 	dec	sp
      00068A 15 81            [12] 1734 	dec	sp
      00068C D0 03            [24] 1735 	pop	ar3
      00068E D0 04            [24] 1736 	pop	ar4
      000690 D0 05            [24] 1737 	pop	ar5
      000692 EE               [12] 1738 	mov	a,r6
      000693 2C               [12] 1739 	add	a,r4
      000694 FC               [12] 1740 	mov	r4,a
      000695 EF               [12] 1741 	mov	a,r7
      000696 3D               [12] 1742 	addc	a,r5
      000697 FD               [12] 1743 	mov	r5,a
      000698 EC               [12] 1744 	mov	a,r4
      000699 24r00            [12] 1745 	add	a,#_u
      00069B F5 82            [12] 1746 	mov	dpl,a
      00069D ED               [12] 1747 	mov	a,r5
      00069E 34s08            [12] 1748 	addc	a,#(_u >> 8)
      0006A0 F5 83            [12] 1749 	mov	dph,a
      0006A2 E0               [24] 1750 	movx	a,@dptr
      0006A3 2B               [12] 1751 	add	a,r3
      0006A4 FB               [12] 1752 	mov	r3,a
                                   1753 ;	life.c:184: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006A5 78r14            [12] 1754 	mov	r0,#_y
      0006A7 E5*00            [12] 1755 	mov	a,_bp
      0006A9 24 0B            [12] 1756 	add	a,#0x0b
      0006AB F9               [12] 1757 	mov	r1,a
      0006AC E6               [12] 1758 	mov	a,@r0
      0006AD F7               [12] 1759 	mov	@r1,a
      0006AE 08               [12] 1760 	inc	r0
      0006AF 09               [12] 1761 	inc	r1
      0006B0 E6               [12] 1762 	mov	a,@r0
      0006B1 F7               [12] 1763 	mov	@r1,a
      0006B2 E5*00            [12] 1764 	mov	a,_bp
      0006B4 24 0B            [12] 1765 	add	a,#0x0b
      0006B6 F8               [12] 1766 	mov	r0,a
      0006B7 74 40            [12] 1767 	mov	a,#0x40
      0006B9 26               [12] 1768 	add	a,@r0
      0006BA FA               [12] 1769 	mov	r2,a
      0006BB E4               [12] 1770 	clr	a
      0006BC 08               [12] 1771 	inc	r0
      0006BD 36               [12] 1772 	addc	a,@r0
      0006BE FD               [12] 1773 	mov	r5,a
      0006BF C0 07            [24] 1774 	push	ar7
      0006C1 C0 06            [24] 1775 	push	ar6
      0006C3 C0 03            [24] 1776 	push	ar3
      0006C5 74 40            [12] 1777 	mov	a,#0x40
      0006C7 C0 E0            [24] 1778 	push	acc
      0006C9 E4               [12] 1779 	clr	a
      0006CA C0 E0            [24] 1780 	push	acc
      0006CC 8A 82            [24] 1781 	mov	dpl,r2
      0006CE 8D 83            [24] 1782 	mov	dph,r5
      0006D0 12r00r00         [24] 1783 	lcall	__modsint
      0006D3 AC 82            [24] 1784 	mov	r4,dpl
      0006D5 AD 83            [24] 1785 	mov	r5,dph
      0006D7 15 81            [12] 1786 	dec	sp
      0006D9 15 81            [12] 1787 	dec	sp
      0006DB D0 03            [24] 1788 	pop	ar3
      0006DD D0 06            [24] 1789 	pop	ar6
      0006DF D0 07            [24] 1790 	pop	ar7
      0006E1 E5*00            [12] 1791 	mov	a,_bp
      0006E3 24 0D            [12] 1792 	add	a,#0x0d
      0006E5 F8               [12] 1793 	mov	r0,a
      0006E6 A6 04            [24] 1794 	mov	@r0,ar4
      0006E8 ED               [12] 1795 	mov	a,r5
      0006E9 C4               [12] 1796 	swap	a
      0006EA 23               [12] 1797 	rl	a
      0006EB 54 E0            [12] 1798 	anl	a,#0xe0
      0006ED C6               [12] 1799 	xch	a,@r0
      0006EE C4               [12] 1800 	swap	a
      0006EF 23               [12] 1801 	rl	a
      0006F0 C6               [12] 1802 	xch	a,@r0
      0006F1 66               [12] 1803 	xrl	a,@r0
      0006F2 C6               [12] 1804 	xch	a,@r0
      0006F3 54 E0            [12] 1805 	anl	a,#0xe0
      0006F5 C6               [12] 1806 	xch	a,@r0
      0006F6 66               [12] 1807 	xrl	a,@r0
      0006F7 08               [12] 1808 	inc	r0
      0006F8 F6               [12] 1809 	mov	@r0,a
      0006F9 E5*00            [12] 1810 	mov	a,_bp
      0006FB 24 0D            [12] 1811 	add	a,#0x0d
      0006FD F8               [12] 1812 	mov	r0,a
      0006FE E5*00            [12] 1813 	mov	a,_bp
      000700 24 05            [12] 1814 	add	a,#0x05
      000702 F9               [12] 1815 	mov	r1,a
      000703 E7               [12] 1816 	mov	a,@r1
      000704 26               [12] 1817 	add	a,@r0
      000705 FA               [12] 1818 	mov	r2,a
      000706 09               [12] 1819 	inc	r1
      000707 E7               [12] 1820 	mov	a,@r1
      000708 08               [12] 1821 	inc	r0
      000709 36               [12] 1822 	addc	a,@r0
      00070A FD               [12] 1823 	mov	r5,a
      00070B EA               [12] 1824 	mov	a,r2
      00070C 24r00            [12] 1825 	add	a,#_u
      00070E F5 82            [12] 1826 	mov	dpl,a
      000710 ED               [12] 1827 	mov	a,r5
      000711 34s08            [12] 1828 	addc	a,#(_u >> 8)
      000713 F5 83            [12] 1829 	mov	dph,a
      000715 E0               [24] 1830 	movx	a,@dptr
      000716 2B               [12] 1831 	add	a,r3
      000717 FB               [12] 1832 	mov	r3,a
                                   1833 ;	life.c:186: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000718 E5*00            [12] 1834 	mov	a,_bp
      00071A 24 0D            [12] 1835 	add	a,#0x0d
      00071C F8               [12] 1836 	mov	r0,a
      00071D E5*00            [12] 1837 	mov	a,_bp
      00071F 24 09            [12] 1838 	add	a,#0x09
      000721 F9               [12] 1839 	mov	r1,a
      000722 E7               [12] 1840 	mov	a,@r1
      000723 26               [12] 1841 	add	a,@r0
      000724 FC               [12] 1842 	mov	r4,a
      000725 09               [12] 1843 	inc	r1
      000726 E7               [12] 1844 	mov	a,@r1
      000727 08               [12] 1845 	inc	r0
      000728 36               [12] 1846 	addc	a,@r0
      000729 FD               [12] 1847 	mov	r5,a
      00072A EC               [12] 1848 	mov	a,r4
      00072B 24r00            [12] 1849 	add	a,#_u
      00072D F5 82            [12] 1850 	mov	dpl,a
      00072F ED               [12] 1851 	mov	a,r5
      000730 34s08            [12] 1852 	addc	a,#(_u >> 8)
      000732 F5 83            [12] 1853 	mov	dph,a
      000734 E0               [24] 1854 	movx	a,@dptr
      000735 2B               [12] 1855 	add	a,r3
      000736 FB               [12] 1856 	mov	r3,a
                                   1857 ;	life.c:188: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000737 E5*00            [12] 1858 	mov	a,_bp
      000739 24 0D            [12] 1859 	add	a,#0x0d
      00073B F8               [12] 1860 	mov	r0,a
      00073C EE               [12] 1861 	mov	a,r6
      00073D 26               [12] 1862 	add	a,@r0
      00073E FC               [12] 1863 	mov	r4,a
      00073F EF               [12] 1864 	mov	a,r7
      000740 08               [12] 1865 	inc	r0
      000741 36               [12] 1866 	addc	a,@r0
      000742 FD               [12] 1867 	mov	r5,a
      000743 EC               [12] 1868 	mov	a,r4
      000744 24r00            [12] 1869 	add	a,#_u
      000746 F5 82            [12] 1870 	mov	dpl,a
      000748 ED               [12] 1871 	mov	a,r5
      000749 34s08            [12] 1872 	addc	a,#(_u >> 8)
      00074B F5 83            [12] 1873 	mov	dph,a
      00074D E0               [24] 1874 	movx	a,@dptr
      00074E 2B               [12] 1875 	add	a,r3
      00074F FB               [12] 1876 	mov	r3,a
                                   1877 ;	life.c:190: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000750 E5*00            [12] 1878 	mov	a,_bp
      000752 24 0B            [12] 1879 	add	a,#0x0b
      000754 F8               [12] 1880 	mov	r0,a
      000755 74 41            [12] 1881 	mov	a,#0x41
      000757 26               [12] 1882 	add	a,@r0
      000758 FC               [12] 1883 	mov	r4,a
      000759 E4               [12] 1884 	clr	a
      00075A 08               [12] 1885 	inc	r0
      00075B 36               [12] 1886 	addc	a,@r0
      00075C FD               [12] 1887 	mov	r5,a
      00075D C0 07            [24] 1888 	push	ar7
      00075F C0 06            [24] 1889 	push	ar6
      000761 C0 03            [24] 1890 	push	ar3
      000763 74 40            [12] 1891 	mov	a,#0x40
      000765 C0 E0            [24] 1892 	push	acc
      000767 E4               [12] 1893 	clr	a
      000768 C0 E0            [24] 1894 	push	acc
      00076A 8C 82            [24] 1895 	mov	dpl,r4
      00076C 8D 83            [24] 1896 	mov	dph,r5
      00076E 12r00r00         [24] 1897 	lcall	__modsint
      000771 AC 82            [24] 1898 	mov	r4,dpl
      000773 AD 83            [24] 1899 	mov	r5,dph
      000775 15 81            [12] 1900 	dec	sp
      000777 15 81            [12] 1901 	dec	sp
      000779 D0 03            [24] 1902 	pop	ar3
      00077B D0 06            [24] 1903 	pop	ar6
      00077D D0 07            [24] 1904 	pop	ar7
      00077F E5*00            [12] 1905 	mov	a,_bp
      000781 24 0D            [12] 1906 	add	a,#0x0d
      000783 F8               [12] 1907 	mov	r0,a
      000784 A6 04            [24] 1908 	mov	@r0,ar4
      000786 ED               [12] 1909 	mov	a,r5
      000787 C4               [12] 1910 	swap	a
      000788 23               [12] 1911 	rl	a
      000789 54 E0            [12] 1912 	anl	a,#0xe0
      00078B C6               [12] 1913 	xch	a,@r0
      00078C C4               [12] 1914 	swap	a
      00078D 23               [12] 1915 	rl	a
      00078E C6               [12] 1916 	xch	a,@r0
      00078F 66               [12] 1917 	xrl	a,@r0
      000790 C6               [12] 1918 	xch	a,@r0
      000791 54 E0            [12] 1919 	anl	a,#0xe0
      000793 C6               [12] 1920 	xch	a,@r0
      000794 66               [12] 1921 	xrl	a,@r0
      000795 08               [12] 1922 	inc	r0
      000796 F6               [12] 1923 	mov	@r0,a
      000797 E5*00            [12] 1924 	mov	a,_bp
      000799 24 0D            [12] 1925 	add	a,#0x0d
      00079B F8               [12] 1926 	mov	r0,a
      00079C E5*00            [12] 1927 	mov	a,_bp
      00079E 24 05            [12] 1928 	add	a,#0x05
      0007A0 F9               [12] 1929 	mov	r1,a
      0007A1 E7               [12] 1930 	mov	a,@r1
      0007A2 26               [12] 1931 	add	a,@r0
      0007A3 FA               [12] 1932 	mov	r2,a
      0007A4 09               [12] 1933 	inc	r1
      0007A5 E7               [12] 1934 	mov	a,@r1
      0007A6 08               [12] 1935 	inc	r0
      0007A7 36               [12] 1936 	addc	a,@r0
      0007A8 FD               [12] 1937 	mov	r5,a
      0007A9 EA               [12] 1938 	mov	a,r2
      0007AA 24r00            [12] 1939 	add	a,#_u
      0007AC F5 82            [12] 1940 	mov	dpl,a
      0007AE ED               [12] 1941 	mov	a,r5
      0007AF 34s08            [12] 1942 	addc	a,#(_u >> 8)
      0007B1 F5 83            [12] 1943 	mov	dph,a
      0007B3 E0               [24] 1944 	movx	a,@dptr
      0007B4 2B               [12] 1945 	add	a,r3
      0007B5 FB               [12] 1946 	mov	r3,a
                                   1947 ;	life.c:192: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007B6 E5*00            [12] 1948 	mov	a,_bp
      0007B8 24 0D            [12] 1949 	add	a,#0x0d
      0007BA F8               [12] 1950 	mov	r0,a
      0007BB E5*00            [12] 1951 	mov	a,_bp
      0007BD 24 09            [12] 1952 	add	a,#0x09
      0007BF F9               [12] 1953 	mov	r1,a
      0007C0 E7               [12] 1954 	mov	a,@r1
      0007C1 26               [12] 1955 	add	a,@r0
      0007C2 FC               [12] 1956 	mov	r4,a
      0007C3 09               [12] 1957 	inc	r1
      0007C4 E7               [12] 1958 	mov	a,@r1
      0007C5 08               [12] 1959 	inc	r0
      0007C6 36               [12] 1960 	addc	a,@r0
      0007C7 FD               [12] 1961 	mov	r5,a
      0007C8 EC               [12] 1962 	mov	a,r4
      0007C9 24r00            [12] 1963 	add	a,#_u
      0007CB F5 82            [12] 1964 	mov	dpl,a
      0007CD ED               [12] 1965 	mov	a,r5
      0007CE 34s08            [12] 1966 	addc	a,#(_u >> 8)
      0007D0 F5 83            [12] 1967 	mov	dph,a
      0007D2 E0               [24] 1968 	movx	a,@dptr
      0007D3 2B               [12] 1969 	add	a,r3
      0007D4 FB               [12] 1970 	mov	r3,a
                                   1971 ;	life.c:193: y1 = 1; x1 = 1;
      0007D5 78r20            [12] 1972 	mov	r0,#_y1
      0007D7 76 01            [12] 1973 	mov	@r0,#0x01
      0007D9 08               [12] 1974 	inc	r0
      0007DA 76 00            [12] 1975 	mov	@r0,#0x00
      0007DC 78r1E            [12] 1976 	mov	r0,#_x1
      0007DE 76 01            [12] 1977 	mov	@r0,#0x01
      0007E0 08               [12] 1978 	inc	r0
      0007E1 76 00            [12] 1979 	mov	@r0,#0x00
                                   1980 ;	life.c:194: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007E3 E5*00            [12] 1981 	mov	a,_bp
      0007E5 24 0D            [12] 1982 	add	a,#0x0d
      0007E7 F8               [12] 1983 	mov	r0,a
      0007E8 EE               [12] 1984 	mov	a,r6
      0007E9 26               [12] 1985 	add	a,@r0
      0007EA FE               [12] 1986 	mov	r6,a
      0007EB EF               [12] 1987 	mov	a,r7
      0007EC 08               [12] 1988 	inc	r0
      0007ED 36               [12] 1989 	addc	a,@r0
      0007EE FF               [12] 1990 	mov	r7,a
      0007EF EE               [12] 1991 	mov	a,r6
      0007F0 24r00            [12] 1992 	add	a,#_u
      0007F2 F5 82            [12] 1993 	mov	dpl,a
      0007F4 EF               [12] 1994 	mov	a,r7
      0007F5 34s08            [12] 1995 	addc	a,#(_u >> 8)
      0007F7 F5 83            [12] 1996 	mov	dph,a
      0007F9 E0               [24] 1997 	movx	a,@dptr
      0007FA 2B               [12] 1998 	add	a,r3
      0007FB FF               [12] 1999 	mov	r7,a
      0007FC 78r1B            [12] 2000 	mov	r0,#_n
      0007FE A6 07            [24] 2001 	mov	@r0,ar7
                                   2002 ;	life.c:196: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000800 A8*00            [24] 2003 	mov	r0,_bp
      000802 08               [12] 2004 	inc	r0
      000803 E6               [12] 2005 	mov	a,@r0
      000804 24r00            [12] 2006 	add	a,#_nu
      000806 FD               [12] 2007 	mov	r5,a
      000807 08               [12] 2008 	inc	r0
      000808 E6               [12] 2009 	mov	a,@r0
      000809 34s10            [12] 2010 	addc	a,#(_nu >> 8)
      00080B FE               [12] 2011 	mov	r6,a
      00080C BF 03 02         [24] 2012 	cjne	r7,#0x03,00469$
      00080F 80 28            [24] 2013 	sjmp	00228$
      000811                       2014 00469$:
      000811 BF 02 21         [24] 2015 	cjne	r7,#0x02,00227$
      000814 E5*00            [12] 2016 	mov	a,_bp
      000816 24 03            [12] 2017 	add	a,#0x03
      000818 F8               [12] 2018 	mov	r0,a
      000819 E5*00            [12] 2019 	mov	a,_bp
      00081B 24 07            [12] 2020 	add	a,#0x07
      00081D F9               [12] 2021 	mov	r1,a
      00081E E7               [12] 2022 	mov	a,@r1
      00081F 26               [12] 2023 	add	a,@r0
      000820 FC               [12] 2024 	mov	r4,a
      000821 09               [12] 2025 	inc	r1
      000822 E7               [12] 2026 	mov	a,@r1
      000823 08               [12] 2027 	inc	r0
      000824 36               [12] 2028 	addc	a,@r0
      000825 FF               [12] 2029 	mov	r7,a
      000826 EC               [12] 2030 	mov	a,r4
      000827 24r00            [12] 2031 	add	a,#_u
      000829 FC               [12] 2032 	mov	r4,a
      00082A EF               [12] 2033 	mov	a,r7
      00082B 34s08            [12] 2034 	addc	a,#(_u >> 8)
      00082D FF               [12] 2035 	mov	r7,a
      00082E 8C 82            [24] 2036 	mov	dpl,r4
      000830 8F 83            [24] 2037 	mov	dph,r7
      000832 E0               [24] 2038 	movx	a,@dptr
      000833 70 04            [24] 2039 	jnz	00228$
      000835                       2040 00227$:
                                   2041 ;	assignBit
      000835 C2*00            [12] 2042 	clr	b0
      000837 80 02            [24] 2043 	sjmp	00229$
      000839                       2044 00228$:
                                   2045 ;	assignBit
      000839 D2*00            [12] 2046 	setb	b0
      00083B                       2047 00229$:
      00083B A2*00            [12] 2048 	mov	c,b0
      00083D E4               [12] 2049 	clr	a
      00083E 33               [12] 2050 	rlc	a
      00083F 8D 82            [24] 2051 	mov	dpl,r5
      000841 8E 83            [24] 2052 	mov	dph,r6
      000843 F0               [24] 2053 	movx	@dptr,a
                                   2054 ;	life.c:197: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000844 78r14            [12] 2055 	mov	r0,#_y
      000846 86 06            [24] 2056 	mov	ar6,@r0
      000848 08               [12] 2057 	inc	r0
      000849 E6               [12] 2058 	mov	a,@r0
      00084A C4               [12] 2059 	swap	a
      00084B 23               [12] 2060 	rl	a
      00084C 54 E0            [12] 2061 	anl	a,#0xe0
      00084E CE               [12] 2062 	xch	a,r6
      00084F C4               [12] 2063 	swap	a
      000850 23               [12] 2064 	rl	a
      000851 CE               [12] 2065 	xch	a,r6
      000852 6E               [12] 2066 	xrl	a,r6
      000853 CE               [12] 2067 	xch	a,r6
      000854 54 E0            [12] 2068 	anl	a,#0xe0
      000856 CE               [12] 2069 	xch	a,r6
      000857 6E               [12] 2070 	xrl	a,r6
      000858 FF               [12] 2071 	mov	r7,a
      000859 78r12            [12] 2072 	mov	r0,#_x
      00085B E6               [12] 2073 	mov	a,@r0
      00085C 2E               [12] 2074 	add	a,r6
      00085D FE               [12] 2075 	mov	r6,a
      00085E 08               [12] 2076 	inc	r0
      00085F E6               [12] 2077 	mov	a,@r0
      000860 3F               [12] 2078 	addc	a,r7
      000861 FF               [12] 2079 	mov	r7,a
      000862 EE               [12] 2080 	mov	a,r6
      000863 24r00            [12] 2081 	add	a,#_pu
      000865 F5 82            [12] 2082 	mov	dpl,a
      000867 EF               [12] 2083 	mov	a,r7
      000868 34s00            [12] 2084 	addc	a,#(_pu >> 8)
      00086A F5 83            [12] 2085 	mov	dph,a
      00086C E0               [24] 2086 	movx	a,@dptr
      00086D FD               [12] 2087 	mov	r5,a
      00086E EE               [12] 2088 	mov	a,r6
      00086F 24r00            [12] 2089 	add	a,#_nu
      000871 F5 82            [12] 2090 	mov	dpl,a
      000873 EF               [12] 2091 	mov	a,r7
      000874 34s10            [12] 2092 	addc	a,#(_nu >> 8)
      000876 F5 83            [12] 2093 	mov	dph,a
      000878 E0               [24] 2094 	movx	a,@dptr
      000879 FC               [12] 2095 	mov	r4,a
      00087A 6D               [12] 2096 	xrl	a,r5
      00087B 78r1D            [12] 2097 	mov	r0,#_cycle2
      00087D 46               [12] 2098 	orl	a,@r0
      00087E F6               [12] 2099 	mov	@r0,a
                                   2100 ;	life.c:198: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00087F EE               [12] 2101 	mov	a,r6
      000880 24r00            [12] 2102 	add	a,#_u
      000882 F5 82            [12] 2103 	mov	dpl,a
      000884 EF               [12] 2104 	mov	a,r7
      000885 34s08            [12] 2105 	addc	a,#(_u >> 8)
      000887 F5 83            [12] 2106 	mov	dph,a
      000889 E0               [24] 2107 	movx	a,@dptr
      00088A FF               [12] 2108 	mov	r7,a
      00088B EC               [12] 2109 	mov	a,r4
      00088C 6F               [12] 2110 	xrl	a,r7
      00088D 78r1C            [12] 2111 	mov	r0,#_fixed
      00088F 46               [12] 2112 	orl	a,@r0
      000890 F6               [12] 2113 	mov	@r0,a
                                   2114 ;	life.c:174: for (x = 0; x < W; x++) {
      000891 78r12            [12] 2115 	mov	r0,#_x
      000893 06               [12] 2116 	inc	@r0
      000894 B6 00 02         [24] 2117 	cjne	@r0,#0x00,00473$
      000897 08               [12] 2118 	inc	r0
      000898 06               [12] 2119 	inc	@r0
      000899                       2120 00473$:
      000899 78r12            [12] 2121 	mov	r0,#_x
      00089B C3               [12] 2122 	clr	c
      00089C E6               [12] 2123 	mov	a,@r0
      00089D 94 20            [12] 2124 	subb	a,#0x20
      00089F 08               [12] 2125 	inc	r0
      0008A0 E6               [12] 2126 	mov	a,@r0
      0008A1 64 80            [12] 2127 	xrl	a,#0x80
      0008A3 94 80            [12] 2128 	subb	a,#0x80
      0008A5 50 03            [24] 2129 	jnc	00474$
      0008A7 02r05r2C         [24] 2130 	ljmp	00200$
      0008AA                       2131 00474$:
                                   2132 ;	life.c:171: for (y = 0; y < H; y++) {
      0008AA 78r14            [12] 2133 	mov	r0,#_y
      0008AC 06               [12] 2134 	inc	@r0
      0008AD B6 00 02         [24] 2135 	cjne	@r0,#0x00,00475$
      0008B0 08               [12] 2136 	inc	r0
      0008B1 06               [12] 2137 	inc	@r0
      0008B2                       2138 00475$:
      0008B2 78r14            [12] 2139 	mov	r0,#_y
      0008B4 C3               [12] 2140 	clr	c
      0008B5 E6               [12] 2141 	mov	a,@r0
      0008B6 94 40            [12] 2142 	subb	a,#0x40
      0008B8 08               [12] 2143 	inc	r0
      0008B9 E6               [12] 2144 	mov	a,@r0
      0008BA 64 80            [12] 2145 	xrl	a,#0x80
      0008BC 94 80            [12] 2146 	subb	a,#0x80
      0008BE 50 03            [24] 2147 	jnc	00476$
      0008C0 02r05r04         [24] 2148 	ljmp	00202$
      0008C3                       2149 00476$:
                                   2150 ;	life.c:202: cycle2 = !cycle2;
      0008C3 78r1D            [12] 2151 	mov	r0,#_cycle2
      0008C5 E6               [12] 2152 	mov	a,@r0
      0008C6 B4 01 00         [24] 2153 	cjne	a,#0x01,00477$
      0008C9                       2154 00477$:
      0008C9 92*00            [24] 2155 	mov	b0,c
      0008CB 78r1D            [12] 2156 	mov	r0,#_cycle2
      0008CD E4               [12] 2157 	clr	a
      0008CE 33               [12] 2158 	rlc	a
      0008CF F6               [12] 2159 	mov	@r0,a
                                   2160 ;	life.c:203: fixed = !fixed;
      0008D0 78r1C            [12] 2161 	mov	r0,#_fixed
      0008D2 E6               [12] 2162 	mov	a,@r0
      0008D3 B4 01 00         [24] 2163 	cjne	a,#0x01,00478$
      0008D6                       2164 00478$:
      0008D6 92*00            [24] 2165 	mov	b0,c
      0008D8 78r1C            [12] 2166 	mov	r0,#_fixed
      0008DA E4               [12] 2167 	clr	a
      0008DB 33               [12] 2168 	rlc	a
      0008DC F6               [12] 2169 	mov	@r0,a
                                   2170 ;	life.c:205: memcpy(pu, u, sizeof (u));
      0008DD E4               [12] 2171 	clr	a
      0008DE C0 E0            [24] 2172 	push	acc
      0008E0 74 08            [12] 2173 	mov	a,#0x08
      0008E2 C0 E0            [24] 2174 	push	acc
      0008E4 74r00            [12] 2175 	mov	a,#_u
      0008E6 C0 E0            [24] 2176 	push	acc
      0008E8 74s08            [12] 2177 	mov	a,#(_u >> 8)
      0008EA C0 E0            [24] 2178 	push	acc
      0008EC E4               [12] 2179 	clr	a
      0008ED C0 E0            [24] 2180 	push	acc
      0008EF 90r00r00         [24] 2181 	mov	dptr,#_pu
      0008F2 75 F0 00         [24] 2182 	mov	b,#0x00
      0008F5 12r00r00         [24] 2183 	lcall	___memcpy
      0008F8 E5 81            [12] 2184 	mov	a,sp
      0008FA 24 FB            [12] 2185 	add	a,#0xfb
      0008FC F5 81            [12] 2186 	mov	sp,a
                                   2187 ;	life.c:206: memcpy(u, nu, sizeof (nu));
      0008FE E4               [12] 2188 	clr	a
      0008FF C0 E0            [24] 2189 	push	acc
      000901 74 08            [12] 2190 	mov	a,#0x08
      000903 C0 E0            [24] 2191 	push	acc
      000905 74r00            [12] 2192 	mov	a,#_nu
      000907 C0 E0            [24] 2193 	push	acc
      000909 74s10            [12] 2194 	mov	a,#(_nu >> 8)
      00090B C0 E0            [24] 2195 	push	acc
      00090D E4               [12] 2196 	clr	a
      00090E C0 E0            [24] 2197 	push	acc
      000910 90r08r00         [24] 2198 	mov	dptr,#_u
      000913 75 F0 00         [24] 2199 	mov	b,#0x00
      000916 12r00r00         [24] 2200 	lcall	___memcpy
      000919 E5 81            [12] 2201 	mov	a,sp
      00091B 24 FB            [12] 2202 	add	a,#0xfb
      00091D F5 81            [12] 2203 	mov	sp,a
                                   2204 ;	life.c:244: if (fixed || cycle2) {
      00091F 78r1C            [12] 2205 	mov	r0,#_fixed
      000921 E6               [12] 2206 	mov	a,@r0
      000922 70 08            [24] 2207 	jnz	00126$
      000924 78r1D            [12] 2208 	mov	r0,#_cycle2
      000926 E6               [12] 2209 	mov	a,@r0
      000927 70 03            [24] 2210 	jnz	00480$
      000929 02r04rDC         [24] 2211 	ljmp	00215$
      00092C                       2212 00480$:
      00092C                       2213 00126$:
                                   2214 ;	life.c:245: printstr("DONE ");
      00092C 7Dr35            [12] 2215 	mov	r5,#___str_6
      00092E 7Es00            [12] 2216 	mov	r6,#(___str_6 >> 8)
      000930 7F 80            [12] 2217 	mov	r7,#0x80
                                   2218 ;	life.c:51: return;
      000932                       2219 00205$:
                                   2220 ;	life.c:49: for (; *s; s++) putchar(*s);
      000932 8D 82            [24] 2221 	mov	dpl,r5
      000934 8E 83            [24] 2222 	mov	dph,r6
      000936 8F F0            [24] 2223 	mov	b,r7
      000938 12r00r00         [24] 2224 	lcall	__gptrget
      00093B FC               [12] 2225 	mov	r4,a
      00093C 60 10            [24] 2226 	jz	00176$
      00093E 7B 00            [12] 2227 	mov	r3,#0x00
      000940 8C 82            [24] 2228 	mov	dpl,r4
      000942 8B 83            [24] 2229 	mov	dph,r3
      000944 12r00r00         [24] 2230 	lcall	_putchar
      000947 0D               [12] 2231 	inc	r5
                                   2232 ;	life.c:245: printstr("DONE ");
      000948 BD 00 E7         [24] 2233 	cjne	r5,#0x00,00205$
      00094B 0E               [12] 2234 	inc	r6
      00094C 80 E4            [24] 2235 	sjmp	00205$
      00094E                       2236 00176$:
                                   2237 ;	life.c:246: if (fixed) printstr("FIXED\r\n");
      00094E 78r1C            [12] 2238 	mov	r0,#_fixed
      000950 E6               [12] 2239 	mov	a,@r0
      000951 60 22            [24] 2240 	jz	00124$
      000953 7Dr3B            [12] 2241 	mov	r5,#___str_7
      000955 7Es00            [12] 2242 	mov	r6,#(___str_7 >> 8)
      000957 7F 80            [12] 2243 	mov	r7,#0x80
                                   2244 ;	life.c:51: return;
      000959                       2245 00208$:
                                   2246 ;	life.c:49: for (; *s; s++) putchar(*s);
      000959 8D 82            [24] 2247 	mov	dpl,r5
      00095B 8E 83            [24] 2248 	mov	dph,r6
      00095D 8F F0            [24] 2249 	mov	b,r7
      00095F 12r00r00         [24] 2250 	lcall	__gptrget
      000962 FC               [12] 2251 	mov	r4,a
      000963 60 32            [24] 2252 	jz	00125$
      000965 7B 00            [12] 2253 	mov	r3,#0x00
      000967 8C 82            [24] 2254 	mov	dpl,r4
      000969 8B 83            [24] 2255 	mov	dph,r3
      00096B 12r00r00         [24] 2256 	lcall	_putchar
      00096E 0D               [12] 2257 	inc	r5
                                   2258 ;	life.c:246: if (fixed) printstr("FIXED\r\n");
      00096F BD 00 E7         [24] 2259 	cjne	r5,#0x00,00208$
      000972 0E               [12] 2260 	inc	r6
      000973 80 E4            [24] 2261 	sjmp	00208$
      000975                       2262 00124$:
                                   2263 ;	life.c:247: else printstr("CYCLE2\r\n");
      000975 7Dr43            [12] 2264 	mov	r5,#___str_8
      000977 7Es00            [12] 2265 	mov	r6,#(___str_8 >> 8)
      000979 7F 80            [12] 2266 	mov	r7,#0x80
                                   2267 ;	life.c:51: return;
      00097B                       2268 00211$:
                                   2269 ;	life.c:49: for (; *s; s++) putchar(*s);
      00097B 8D 82            [24] 2270 	mov	dpl,r5
      00097D 8E 83            [24] 2271 	mov	dph,r6
      00097F 8F F0            [24] 2272 	mov	b,r7
      000981 12r00r00         [24] 2273 	lcall	__gptrget
      000984 FC               [12] 2274 	mov	r4,a
      000985 60 10            [24] 2275 	jz	00125$
      000987 7B 00            [12] 2276 	mov	r3,#0x00
      000989 8C 82            [24] 2277 	mov	dpl,r4
      00098B 8B 83            [24] 2278 	mov	dph,r3
      00098D 12r00r00         [24] 2279 	lcall	_putchar
      000990 0D               [12] 2280 	inc	r5
                                   2281 ;	life.c:247: else printstr("CYCLE2\r\n");
      000991 BD 00 E7         [24] 2282 	cjne	r5,#0x00,00211$
      000994 0E               [12] 2283 	inc	r6
      000995 80 E4            [24] 2284 	sjmp	00211$
      000997                       2285 00125$:
                                   2286 ;	life.c:248: (void)getchar();
      000997 12r00r09         [24] 2287 	lcall	_getchar
                                   2288 ;	life.c:249: break;
      00099A                       2289 00129$:
                                   2290 ;	life.c:253: if (i1) {
      00099A 78r11            [12] 2291 	mov	r0,#_i1
      00099C E6               [12] 2292 	mov	a,@r0
      00099D 60 25            [24] 2293 	jz	00221$
                                   2294 ;	life.c:254: printstr("BREAK\r\n");
      00099F 7Dr4C            [12] 2295 	mov	r5,#___str_9
      0009A1 7Es00            [12] 2296 	mov	r6,#(___str_9 >> 8)
      0009A3 7F 80            [12] 2297 	mov	r7,#0x80
                                   2298 ;	life.c:51: return;
      0009A5                       2299 00218$:
                                   2300 ;	life.c:49: for (; *s; s++) putchar(*s);
      0009A5 8D 82            [24] 2301 	mov	dpl,r5
      0009A7 8E 83            [24] 2302 	mov	dph,r6
      0009A9 8F F0            [24] 2303 	mov	b,r7
      0009AB 12r00r00         [24] 2304 	lcall	__gptrget
      0009AE FC               [12] 2305 	mov	r4,a
      0009AF 60 10            [24] 2306 	jz	00182$
      0009B1 7B 00            [12] 2307 	mov	r3,#0x00
      0009B3 8C 82            [24] 2308 	mov	dpl,r4
      0009B5 8B 83            [24] 2309 	mov	dph,r3
      0009B7 12r00r00         [24] 2310 	lcall	_putchar
      0009BA 0D               [12] 2311 	inc	r5
                                   2312 ;	life.c:254: printstr("BREAK\r\n");
      0009BB BD 00 E7         [24] 2313 	cjne	r5,#0x00,00218$
      0009BE 0E               [12] 2314 	inc	r6
      0009BF 80 E4            [24] 2315 	sjmp	00218$
      0009C1                       2316 00182$:
                                   2317 ;	life.c:255: (void)getchar();
      0009C1 12r00r09         [24] 2318 	lcall	_getchar
      0009C4                       2319 00221$:
                                   2320 ;	life.c:218: for (i0 = 0; !i0; ) {		
      0009C4 78r10            [12] 2321 	mov	r0,#_i0
      0009C6 E6               [12] 2322 	mov	a,@r0
      0009C7 70 03            [24] 2323 	jnz	00491$
      0009C9 02r02r43         [24] 2324 	ljmp	00220$
      0009CC                       2325 00491$:
                                   2326 ;	life.c:259: terminate:
      0009CC                       2327 00133$:
                                   2328 ;	life.c:260: EA = 0;
                                   2329 ;	assignBit
      0009CC C2 AF            [12] 2330 	clr	_EA
                                   2331 ;	life.c:261: printstr("TERM\r\n");
      0009CE 7Dr54            [12] 2332 	mov	r5,#___str_10
      0009D0 7Es00            [12] 2333 	mov	r6,#(___str_10 >> 8)
      0009D2 7F 80            [12] 2334 	mov	r7,#0x80
                                   2335 ;	life.c:51: return;
      0009D4                       2336 00223$:
                                   2337 ;	life.c:49: for (; *s; s++) putchar(*s);
      0009D4 8D 82            [24] 2338 	mov	dpl,r5
      0009D6 8E 83            [24] 2339 	mov	dph,r6
      0009D8 8F F0            [24] 2340 	mov	b,r7
      0009DA 12r00r00         [24] 2341 	lcall	__gptrget
      0009DD FC               [12] 2342 	mov	r4,a
      0009DE 60 10            [24] 2343 	jz	00184$
      0009E0 7B 00            [12] 2344 	mov	r3,#0x00
      0009E2 8C 82            [24] 2345 	mov	dpl,r4
      0009E4 8B 83            [24] 2346 	mov	dph,r3
      0009E6 12r00r00         [24] 2347 	lcall	_putchar
      0009E9 0D               [12] 2348 	inc	r5
                                   2349 ;	life.c:261: printstr("TERM\r\n");
      0009EA BD 00 E7         [24] 2350 	cjne	r5,#0x00,00223$
      0009ED 0E               [12] 2351 	inc	r6
      0009EE 80 E4            [24] 2352 	sjmp	00223$
      0009F0                       2353 00184$:
                                   2354 ;	life.c:262: (void)getchar();
      0009F0 12r00r09         [24] 2355 	lcall	_getchar
                                   2356 ;	life.c:264: PCON |= 2;
      0009F3 43 87 02         [24] 2357 	orl	_PCON,#0x02
                                   2358 ;	life.c:266: return;
                                   2359 ;	life.c:267: }
      0009F6 85*00 81         [24] 2360 	mov	sp,_bp
      0009F9 D0*00            [24] 2361 	pop	_bp
      0009FB 22               [24] 2362 	ret
                                   2363 	.area CSEG    (CODE)
                                   2364 	.area CONST   (CODE)
                                   2365 	.area CONST   (CODE)
      000000                       2366 ___str_0:
      000000 1B                    2367 	.db 0x1b
      000001 5B 32 4A              2368 	.ascii "[2J"
      000004 1B                    2369 	.db 0x1b
      000005 5B 6D 47 45 4E 20     2370 	.ascii "[mGEN "
      00000B 00                    2371 	.db 0x00
                                   2372 	.area CSEG    (CODE)
                                   2373 	.area CONST   (CODE)
      00000C                       2374 ___str_1:
      00000C 0D                    2375 	.db 0x0d
      00000D 0A                    2376 	.db 0x0a
      00000E 00                    2377 	.db 0x00
                                   2378 	.area CSEG    (CODE)
                                   2379 	.area CONST   (CODE)
      00000F                       2380 ___str_2:
      00000F 4C 4F 41 44 20 3C     2381 	.ascii "LOAD <"
      000015 00                    2382 	.db 0x00
                                   2383 	.area CSEG    (CODE)
                                   2384 	.area CONST   (CODE)
      000016                       2385 ___str_3:
      000016 3E                    2386 	.ascii ">"
      000017 0D                    2387 	.db 0x0d
      000018 0A                    2388 	.db 0x0a
      000019 00                    2389 	.db 0x00
                                   2390 	.area CSEG    (CODE)
                                   2391 	.area CONST   (CODE)
      00001A                       2392 ___str_4:
      00001A 1B                    2393 	.db 0x1b
      00001B 5B 32 4A              2394 	.ascii "[2J"
      00001E 1B                    2395 	.db 0x1b
      00001F 5B 6D 4C 49 46 45 20  2396 	.ascii "[mLIFE INIT"
             49 4E 49 54
      00002A 0D                    2397 	.db 0x0d
      00002B 0A                    2398 	.db 0x0a
      00002C 00                    2399 	.db 0x00
                                   2400 	.area CSEG    (CODE)
                                   2401 	.area CONST   (CODE)
      00002D                       2402 ___str_5:
      00002D 52 45 41 44 59        2403 	.ascii "READY"
      000032 0D                    2404 	.db 0x0d
      000033 0A                    2405 	.db 0x0a
      000034 00                    2406 	.db 0x00
                                   2407 	.area CSEG    (CODE)
                                   2408 	.area CONST   (CODE)
      000035                       2409 ___str_6:
      000035 44 4F 4E 45 20        2410 	.ascii "DONE "
      00003A 00                    2411 	.db 0x00
                                   2412 	.area CSEG    (CODE)
                                   2413 	.area CONST   (CODE)
      00003B                       2414 ___str_7:
      00003B 46 49 58 45 44        2415 	.ascii "FIXED"
      000040 0D                    2416 	.db 0x0d
      000041 0A                    2417 	.db 0x0a
      000042 00                    2418 	.db 0x00
                                   2419 	.area CSEG    (CODE)
                                   2420 	.area CONST   (CODE)
      000043                       2421 ___str_8:
      000043 43 59 43 4C 45 32     2422 	.ascii "CYCLE2"
      000049 0D                    2423 	.db 0x0d
      00004A 0A                    2424 	.db 0x0a
      00004B 00                    2425 	.db 0x00
                                   2426 	.area CSEG    (CODE)
                                   2427 	.area CONST   (CODE)
      00004C                       2428 ___str_9:
      00004C 42 52 45 41 4B        2429 	.ascii "BREAK"
      000051 0D                    2430 	.db 0x0d
      000052 0A                    2431 	.db 0x0a
      000053 00                    2432 	.db 0x00
                                   2433 	.area CSEG    (CODE)
                                   2434 	.area CONST   (CODE)
      000054                       2435 ___str_10:
      000054 54 45 52 4D           2436 	.ascii "TERM"
      000058 0D                    2437 	.db 0x0d
      000059 0A                    2438 	.db 0x0a
      00005A 00                    2439 	.db 0x00
                                   2440 	.area CSEG    (CODE)
                                   2441 	.area XINIT   (CODE)
                                   2442 	.area CABS    (ABS,CODE)
