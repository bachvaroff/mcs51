                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int1
                                     13 	.globl _int0
                                     14 	.globl _printf
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _FL
                                     22 	.globl _P
                                     23 	.globl _TF2
                                     24 	.globl _EXF2
                                     25 	.globl _RCLK
                                     26 	.globl _TCLK
                                     27 	.globl _EXEN2
                                     28 	.globl _TR2
                                     29 	.globl _C_T2
                                     30 	.globl _CP_RL2
                                     31 	.globl _T2CON_7
                                     32 	.globl _T2CON_6
                                     33 	.globl _T2CON_5
                                     34 	.globl _T2CON_4
                                     35 	.globl _T2CON_3
                                     36 	.globl _T2CON_2
                                     37 	.globl _T2CON_1
                                     38 	.globl _T2CON_0
                                     39 	.globl _PT2
                                     40 	.globl _PS
                                     41 	.globl _PT1
                                     42 	.globl _PX1
                                     43 	.globl _PT0
                                     44 	.globl _PX0
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _EA
                                     62 	.globl _ET2
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _T2EX
                                     85 	.globl _T2
                                     86 	.globl _P1_7
                                     87 	.globl _P1_6
                                     88 	.globl _P1_5
                                     89 	.globl _P1_4
                                     90 	.globl _P1_3
                                     91 	.globl _P1_2
                                     92 	.globl _P1_1
                                     93 	.globl _P1_0
                                     94 	.globl _TF1
                                     95 	.globl _TR1
                                     96 	.globl _TF0
                                     97 	.globl _TR0
                                     98 	.globl _IE1
                                     99 	.globl _IT1
                                    100 	.globl _IE0
                                    101 	.globl _IT0
                                    102 	.globl _P0_7
                                    103 	.globl _P0_6
                                    104 	.globl _P0_5
                                    105 	.globl _P0_4
                                    106 	.globl _P0_3
                                    107 	.globl _P0_2
                                    108 	.globl _P0_1
                                    109 	.globl _P0_0
                                    110 	.globl _B
                                    111 	.globl _A
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _TH2
                                    115 	.globl _TL2
                                    116 	.globl _RCAP2H
                                    117 	.globl _RCAP2L
                                    118 	.globl _T2MOD
                                    119 	.globl _T2CON
                                    120 	.globl _IP
                                    121 	.globl _P3
                                    122 	.globl _IE
                                    123 	.globl _P2
                                    124 	.globl _SBUF
                                    125 	.globl _SCON
                                    126 	.globl _P1
                                    127 	.globl _TH1
                                    128 	.globl _TH0
                                    129 	.globl _TL1
                                    130 	.globl _TL0
                                    131 	.globl _TMOD
                                    132 	.globl _TCON
                                    133 	.globl _PCON
                                    134 	.globl _DPH
                                    135 	.globl _DPL
                                    136 	.globl _SP
                                    137 	.globl _P0
                                    138 	.globl _c
                                    139 	.globl _cycle2
                                    140 	.globl _fixed
                                    141 	.globl _j
                                    142 	.globl _generation
                                    143 	.globl _n
                                    144 	.globl _y1
                                    145 	.globl _x1
                                    146 	.globl _y
                                    147 	.globl _x
                                    148 	.globl _nu
                                    149 	.globl _u
                                    150 	.globl _pu
                                    151 	.globl _i1
                                    152 	.globl _i0
                                    153 	.globl _putchar
                                    154 	.globl _getchar
                                    155 ;--------------------------------------------------------
                                    156 ; special function registers
                                    157 ;--------------------------------------------------------
                                    158 	.area RSEG    (ABS,DATA)
      000000                        159 	.org 0x0000
                           000080   160 _P0	=	0x0080
                           000081   161 _SP	=	0x0081
                           000082   162 _DPL	=	0x0082
                           000083   163 _DPH	=	0x0083
                           000087   164 _PCON	=	0x0087
                           000088   165 _TCON	=	0x0088
                           000089   166 _TMOD	=	0x0089
                           00008A   167 _TL0	=	0x008a
                           00008B   168 _TL1	=	0x008b
                           00008C   169 _TH0	=	0x008c
                           00008D   170 _TH1	=	0x008d
                           000090   171 _P1	=	0x0090
                           000098   172 _SCON	=	0x0098
                           000099   173 _SBUF	=	0x0099
                           0000A0   174 _P2	=	0x00a0
                           0000A8   175 _IE	=	0x00a8
                           0000B0   176 _P3	=	0x00b0
                           0000B8   177 _IP	=	0x00b8
                           0000C8   178 _T2CON	=	0x00c8
                           0000C9   179 _T2MOD	=	0x00c9
                           0000CA   180 _RCAP2L	=	0x00ca
                           0000CB   181 _RCAP2H	=	0x00cb
                           0000CC   182 _TL2	=	0x00cc
                           0000CD   183 _TH2	=	0x00cd
                           0000D0   184 _PSW	=	0x00d0
                           0000E0   185 _ACC	=	0x00e0
                           0000E0   186 _A	=	0x00e0
                           0000F0   187 _B	=	0x00f0
                                    188 ;--------------------------------------------------------
                                    189 ; special function bits
                                    190 ;--------------------------------------------------------
                                    191 	.area RSEG    (ABS,DATA)
      000000                        192 	.org 0x0000
                           000080   193 _P0_0	=	0x0080
                           000081   194 _P0_1	=	0x0081
                           000082   195 _P0_2	=	0x0082
                           000083   196 _P0_3	=	0x0083
                           000084   197 _P0_4	=	0x0084
                           000085   198 _P0_5	=	0x0085
                           000086   199 _P0_6	=	0x0086
                           000087   200 _P0_7	=	0x0087
                           000088   201 _IT0	=	0x0088
                           000089   202 _IE0	=	0x0089
                           00008A   203 _IT1	=	0x008a
                           00008B   204 _IE1	=	0x008b
                           00008C   205 _TR0	=	0x008c
                           00008D   206 _TF0	=	0x008d
                           00008E   207 _TR1	=	0x008e
                           00008F   208 _TF1	=	0x008f
                           000090   209 _P1_0	=	0x0090
                           000091   210 _P1_1	=	0x0091
                           000092   211 _P1_2	=	0x0092
                           000093   212 _P1_3	=	0x0093
                           000094   213 _P1_4	=	0x0094
                           000095   214 _P1_5	=	0x0095
                           000096   215 _P1_6	=	0x0096
                           000097   216 _P1_7	=	0x0097
                           000090   217 _T2	=	0x0090
                           000091   218 _T2EX	=	0x0091
                           000098   219 _RI	=	0x0098
                           000099   220 _TI	=	0x0099
                           00009A   221 _RB8	=	0x009a
                           00009B   222 _TB8	=	0x009b
                           00009C   223 _REN	=	0x009c
                           00009D   224 _SM2	=	0x009d
                           00009E   225 _SM1	=	0x009e
                           00009F   226 _SM0	=	0x009f
                           0000A0   227 _P2_0	=	0x00a0
                           0000A1   228 _P2_1	=	0x00a1
                           0000A2   229 _P2_2	=	0x00a2
                           0000A3   230 _P2_3	=	0x00a3
                           0000A4   231 _P2_4	=	0x00a4
                           0000A5   232 _P2_5	=	0x00a5
                           0000A6   233 _P2_6	=	0x00a6
                           0000A7   234 _P2_7	=	0x00a7
                           0000A8   235 _EX0	=	0x00a8
                           0000A9   236 _ET0	=	0x00a9
                           0000AA   237 _EX1	=	0x00aa
                           0000AB   238 _ET1	=	0x00ab
                           0000AC   239 _ES	=	0x00ac
                           0000AD   240 _ET2	=	0x00ad
                           0000AF   241 _EA	=	0x00af
                           0000B0   242 _P3_0	=	0x00b0
                           0000B1   243 _P3_1	=	0x00b1
                           0000B2   244 _P3_2	=	0x00b2
                           0000B3   245 _P3_3	=	0x00b3
                           0000B4   246 _P3_4	=	0x00b4
                           0000B5   247 _P3_5	=	0x00b5
                           0000B6   248 _P3_6	=	0x00b6
                           0000B7   249 _P3_7	=	0x00b7
                           0000B0   250 _RXD	=	0x00b0
                           0000B1   251 _TXD	=	0x00b1
                           0000B2   252 _INT0	=	0x00b2
                           0000B3   253 _INT1	=	0x00b3
                           0000B4   254 _T0	=	0x00b4
                           0000B5   255 _T1	=	0x00b5
                           0000B6   256 _WR	=	0x00b6
                           0000B7   257 _RD	=	0x00b7
                           0000B8   258 _PX0	=	0x00b8
                           0000B9   259 _PT0	=	0x00b9
                           0000BA   260 _PX1	=	0x00ba
                           0000BB   261 _PT1	=	0x00bb
                           0000BC   262 _PS	=	0x00bc
                           0000BD   263 _PT2	=	0x00bd
                           0000C8   264 _T2CON_0	=	0x00c8
                           0000C9   265 _T2CON_1	=	0x00c9
                           0000CA   266 _T2CON_2	=	0x00ca
                           0000CB   267 _T2CON_3	=	0x00cb
                           0000CC   268 _T2CON_4	=	0x00cc
                           0000CD   269 _T2CON_5	=	0x00cd
                           0000CE   270 _T2CON_6	=	0x00ce
                           0000CF   271 _T2CON_7	=	0x00cf
                           0000C8   272 _CP_RL2	=	0x00c8
                           0000C9   273 _C_T2	=	0x00c9
                           0000CA   274 _TR2	=	0x00ca
                           0000CB   275 _EXEN2	=	0x00cb
                           0000CC   276 _TCLK	=	0x00cc
                           0000CD   277 _RCLK	=	0x00cd
                           0000CE   278 _EXF2	=	0x00ce
                           0000CF   279 _TF2	=	0x00cf
                           0000D0   280 _P	=	0x00d0
                           0000D1   281 _FL	=	0x00d1
                           0000D2   282 _OV	=	0x00d2
                           0000D3   283 _RS0	=	0x00d3
                           0000D4   284 _RS1	=	0x00d4
                           0000D5   285 _F0	=	0x00d5
                           0000D6   286 _AC	=	0x00d6
                           0000D7   287 _CY	=	0x00d7
                                    288 ;--------------------------------------------------------
                                    289 ; overlayable register banks
                                    290 ;--------------------------------------------------------
                                    291 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        292 	.ds 8
                                    293 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        294 	.ds 8
                                    295 ;--------------------------------------------------------
                                    296 ; overlayable bit register bank
                                    297 ;--------------------------------------------------------
                                    298 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        299 bits:
      000000                        300 	.ds 1
                           008000   301 	b0 = bits[0]
                           008100   302 	b1 = bits[1]
                           008200   303 	b2 = bits[2]
                           008300   304 	b3 = bits[3]
                           008400   305 	b4 = bits[4]
                           008500   306 	b5 = bits[5]
                           008600   307 	b6 = bits[6]
                           008700   308 	b7 = bits[7]
                                    309 ;--------------------------------------------------------
                                    310 ; internal ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area DSEG    (DATA)
                                    313 ;--------------------------------------------------------
                                    314 ; overlayable items in internal ram 
                                    315 ;--------------------------------------------------------
                                    316 ;--------------------------------------------------------
                                    317 ; Stack segment in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 	.area	SSEG
      000000                        320 __start__stack:
      000000                        321 	.ds	1
                                    322 
                                    323 ;--------------------------------------------------------
                                    324 ; indirectly addressable internal ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area ISEG    (DATA)
                                    327 ;--------------------------------------------------------
                                    328 ; absolute internal ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area IABS    (ABS,DATA)
                                    331 	.area IABS    (ABS,DATA)
                                    332 ;--------------------------------------------------------
                                    333 ; bit data
                                    334 ;--------------------------------------------------------
                                    335 	.area BSEG    (BIT)
                                    336 ;--------------------------------------------------------
                                    337 ; paged external ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area PSEG    (PAG,XDATA)
                                    340 ;--------------------------------------------------------
                                    341 ; external ram data
                                    342 ;--------------------------------------------------------
                                    343 	.area XSEG    (XDATA)
      000000                        344 _i0::
      000000                        345 	.ds 2
      000002                        346 _i1::
      000002                        347 	.ds 2
      000004                        348 _pu::
      000004                        349 	.ds 1024
      000404                        350 _u::
      000404                        351 	.ds 1024
      000804                        352 _nu::
      000804                        353 	.ds 1024
      000C04                        354 _x::
      000C04                        355 	.ds 2
      000C06                        356 _y::
      000C06                        357 	.ds 2
      000C08                        358 _x1::
      000C08                        359 	.ds 2
      000C0A                        360 _y1::
      000C0A                        361 	.ds 2
      000C0C                        362 _n::
      000C0C                        363 	.ds 2
      000C0E                        364 _generation::
      000C0E                        365 	.ds 8
      000C16                        366 _j::
      000C16                        367 	.ds 2
      000C18                        368 _fixed::
      000C18                        369 	.ds 2
      000C1A                        370 _cycle2::
      000C1A                        371 	.ds 2
      000C1C                        372 _c::
      000C1C                        373 	.ds 2
                                    374 ;--------------------------------------------------------
                                    375 ; absolute external ram data
                                    376 ;--------------------------------------------------------
                                    377 	.area XABS    (ABS,XDATA)
                                    378 ;--------------------------------------------------------
                                    379 ; external initialized ram data
                                    380 ;--------------------------------------------------------
                                    381 	.area XISEG   (XDATA)
                                    382 	.area HOME    (CODE)
                                    383 	.area GSINIT0 (CODE)
                                    384 	.area GSINIT1 (CODE)
                                    385 	.area GSINIT2 (CODE)
                                    386 	.area GSINIT3 (CODE)
                                    387 	.area GSINIT4 (CODE)
                                    388 	.area GSINIT5 (CODE)
                                    389 	.area GSINIT  (CODE)
                                    390 	.area GSFINAL (CODE)
                                    391 	.area CSEG    (CODE)
                                    392 ;--------------------------------------------------------
                                    393 ; interrupt vector 
                                    394 ;--------------------------------------------------------
                                    395 	.area HOME    (CODE)
      000000                        396 __interrupt_vect:
      000000 02r00r00         [24]  397 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0D         [24]  398 	ljmp	_int0
      000006                        399 	.ds	5
      00000B 32               [24]  400 	reti
      00000C                        401 	.ds	7
      000013 02r00r23         [24]  402 	ljmp	_int1
                                    403 ;--------------------------------------------------------
                                    404 ; global & static initialisations
                                    405 ;--------------------------------------------------------
                                    406 	.area HOME    (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.area GSFINAL (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.globl __sdcc_gsinit_startup
                                    411 	.globl __sdcc_program_startup
                                    412 	.globl __start__stack
                                    413 	.globl __mcs51_genXINIT
                                    414 	.globl __mcs51_genXRAMCLEAR
                                    415 	.globl __mcs51_genRAMCLEAR
                                    416 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  417 	ljmp	__sdcc_program_startup
                                    418 ;--------------------------------------------------------
                                    419 ; Home
                                    420 ;--------------------------------------------------------
                                    421 	.area HOME    (CODE)
                                    422 	.area HOME    (CODE)
      000016                        423 __sdcc_program_startup:
      000016 02r00r39         [24]  424 	ljmp	_main
                                    425 ;	return from main will return to caller
                                    426 ;--------------------------------------------------------
                                    427 ; code
                                    428 ;--------------------------------------------------------
                                    429 	.area CSEG    (CODE)
                                    430 ;------------------------------------------------------------
                                    431 ;Allocation info for local variables in function 'putchar'
                                    432 ;------------------------------------------------------------
                                    433 ;c                         Allocated to registers 
                                    434 ;------------------------------------------------------------
                                    435 ;	life.c:7: int putchar(int c) __naked {
                                    436 ;	-----------------------------------------
                                    437 ;	 function putchar
                                    438 ;	-----------------------------------------
      000000                        439 _putchar:
                                    440 ;	naked function: no prologue.
                                    441 ;	life.c:12: __endasm;
      000000 E5 82            [12]  442 	mov	a, dpl
      000002 02 00 30         [24]  443 	ljmp	0x0030
                                    444 ;	life.c:13: }
                                    445 ;	naked function: no epilogue.
                                    446 ;------------------------------------------------------------
                                    447 ;Allocation info for local variables in function 'getchar'
                                    448 ;------------------------------------------------------------
                                    449 ;	life.c:15: int getchar(void) {
                                    450 ;	-----------------------------------------
                                    451 ;	 function getchar
                                    452 ;	-----------------------------------------
      000005                        453 _getchar:
                           000007   454 	ar7 = 0x07
                           000006   455 	ar6 = 0x06
                           000005   456 	ar5 = 0x05
                           000004   457 	ar4 = 0x04
                           000003   458 	ar3 = 0x03
                           000002   459 	ar2 = 0x02
                           000001   460 	ar1 = 0x01
                           000000   461 	ar0 = 0x00
                                    462 ;	life.c:20: __endasm;
      000005 12 00 32         [24]  463 	lcall	0x0032
      000008 C2 83            [12]  464 	clr	dph
      00000A F5 82            [12]  465 	mov	dpl, a
                                    466 ;	life.c:21: }
      00000C 22               [24]  467 	ret
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'int0'
                                    470 ;------------------------------------------------------------
                                    471 ;	life.c:32: void int0(void) __interrupt 0 __using 1 {
                                    472 ;	-----------------------------------------
                                    473 ;	 function int0
                                    474 ;	-----------------------------------------
      00000D                        475 _int0:
                           00000F   476 	ar7 = 0x0f
                           00000E   477 	ar6 = 0x0e
                           00000D   478 	ar5 = 0x0d
                           00000C   479 	ar4 = 0x0c
                           00000B   480 	ar3 = 0x0b
                           00000A   481 	ar2 = 0x0a
                           000009   482 	ar1 = 0x09
                           000008   483 	ar0 = 0x08
      00000D C0 E0            [24]  484 	push	acc
      00000F C0 82            [24]  485 	push	dpl
      000011 C0 83            [24]  486 	push	dph
                                    487 ;	life.c:33: i0 = 1;
      000013 90r00r00         [24]  488 	mov	dptr,#_i0
      000016 74 01            [12]  489 	mov	a,#0x01
      000018 F0               [24]  490 	movx	@dptr,a
      000019 E4               [12]  491 	clr	a
      00001A A3               [24]  492 	inc	dptr
      00001B F0               [24]  493 	movx	@dptr,a
                                    494 ;	life.c:34: }
      00001C D0 83            [24]  495 	pop	dph
      00001E D0 82            [24]  496 	pop	dpl
      000020 D0 E0            [24]  497 	pop	acc
      000022 32               [24]  498 	reti
                                    499 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    500 ;	eliminated unneeded push/pop psw
                                    501 ;	eliminated unneeded push/pop b
                                    502 ;------------------------------------------------------------
                                    503 ;Allocation info for local variables in function 'int1'
                                    504 ;------------------------------------------------------------
                                    505 ;	life.c:37: void int1(void) __interrupt 2 __using 1 {
                                    506 ;	-----------------------------------------
                                    507 ;	 function int1
                                    508 ;	-----------------------------------------
      000023                        509 _int1:
      000023 C0 E0            [24]  510 	push	acc
      000025 C0 82            [24]  511 	push	dpl
      000027 C0 83            [24]  512 	push	dph
                                    513 ;	life.c:38: i1 = 1;
      000029 90r00r02         [24]  514 	mov	dptr,#_i1
      00002C 74 01            [12]  515 	mov	a,#0x01
      00002E F0               [24]  516 	movx	@dptr,a
      00002F E4               [12]  517 	clr	a
      000030 A3               [24]  518 	inc	dptr
      000031 F0               [24]  519 	movx	@dptr,a
                                    520 ;	life.c:39: }
      000032 D0 83            [24]  521 	pop	dph
      000034 D0 82            [24]  522 	pop	dpl
      000036 D0 E0            [24]  523 	pop	acc
      000038 32               [24]  524 	reti
                                    525 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    526 ;	eliminated unneeded push/pop psw
                                    527 ;	eliminated unneeded push/pop b
                                    528 ;------------------------------------------------------------
                                    529 ;Allocation info for local variables in function 'main'
                                    530 ;------------------------------------------------------------
                                    531 ;	life.c:128: void main(void) {
                                    532 ;	-----------------------------------------
                                    533 ;	 function main
                                    534 ;	-----------------------------------------
      000039                        535 _main:
                           000007   536 	ar7 = 0x07
                           000006   537 	ar6 = 0x06
                           000005   538 	ar5 = 0x05
                           000004   539 	ar4 = 0x04
                           000003   540 	ar3 = 0x03
                           000002   541 	ar2 = 0x02
                           000001   542 	ar1 = 0x01
                           000000   543 	ar0 = 0x00
                                    544 ;	life.c:129: IT0 = 1;
                                    545 ;	assignBit
      000039 D2 88            [12]  546 	setb	_IT0
                                    547 ;	life.c:130: IT1 = 1;
                                    548 ;	assignBit
      00003B D2 8A            [12]  549 	setb	_IT1
                                    550 ;	life.c:131: EX0 = 1;
                                    551 ;	assignBit
      00003D D2 A8            [12]  552 	setb	_EX0
                                    553 ;	life.c:132: EX1 = 1;
                                    554 ;	assignBit
      00003F D2 AA            [12]  555 	setb	_EX1
                                    556 ;	life.c:133: EA = 1;
                                    557 ;	assignBit
      000041 D2 AF            [12]  558 	setb	_EA
                                    559 ;	life.c:135: for (i0 = 0; !i0; ) {
      000043 90r00r00         [24]  560 	mov	dptr,#_i0
      000046 E4               [12]  561 	clr	a
      000047 F0               [24]  562 	movx	@dptr,a
      000048 A3               [24]  563 	inc	dptr
      000049 F0               [24]  564 	movx	@dptr,a
      00004A 90r00r02         [24]  565 	mov	dptr,#_i1
      00004D F0               [24]  566 	movx	@dptr,a
      00004E A3               [24]  567 	inc	dptr
      00004F F0               [24]  568 	movx	@dptr,a
      000050                        569 00181$:
                                    570 ;	life.c:83: for (y = 0; y < H; y++)
      000050 90r0Cr06         [24]  571 	mov	dptr,#_y
      000053 E4               [12]  572 	clr	a
      000054 F0               [24]  573 	movx	@dptr,a
      000055 A3               [24]  574 	inc	dptr
      000056 F0               [24]  575 	movx	@dptr,a
      000057                        576 00147$:
                                    577 ;	life.c:84: for (x = 0; x < W; x++)
      000057 90r0Cr04         [24]  578 	mov	dptr,#_x
      00005A E4               [12]  579 	clr	a
      00005B F0               [24]  580 	movx	@dptr,a
      00005C A3               [24]  581 	inc	dptr
      00005D F0               [24]  582 	movx	@dptr,a
      00005E                        583 00145$:
                                    584 ;	life.c:85: pu[y][x] = 0;
      00005E 90r0Cr06         [24]  585 	mov	dptr,#_y
      000061 E0               [24]  586 	movx	a,@dptr
      000062 FE               [12]  587 	mov	r6,a
      000063 A3               [24]  588 	inc	dptr
      000064 E0               [24]  589 	movx	a,@dptr
      000065 C4               [12]  590 	swap	a
      000066 23               [12]  591 	rl	a
      000067 54 E0            [12]  592 	anl	a,#0xe0
      000069 CE               [12]  593 	xch	a,r6
      00006A C4               [12]  594 	swap	a
      00006B 23               [12]  595 	rl	a
      00006C CE               [12]  596 	xch	a,r6
      00006D 6E               [12]  597 	xrl	a,r6
      00006E CE               [12]  598 	xch	a,r6
      00006F 54 E0            [12]  599 	anl	a,#0xe0
      000071 CE               [12]  600 	xch	a,r6
      000072 6E               [12]  601 	xrl	a,r6
      000073 FF               [12]  602 	mov	r7,a
      000074 EE               [12]  603 	mov	a,r6
      000075 24r04            [12]  604 	add	a,#_pu
      000077 FE               [12]  605 	mov	r6,a
      000078 EF               [12]  606 	mov	a,r7
      000079 34s00            [12]  607 	addc	a,#(_pu >> 8)
      00007B FF               [12]  608 	mov	r7,a
      00007C 90r0Cr04         [24]  609 	mov	dptr,#_x
      00007F E0               [24]  610 	movx	a,@dptr
      000080 FC               [12]  611 	mov	r4,a
      000081 A3               [24]  612 	inc	dptr
      000082 E0               [24]  613 	movx	a,@dptr
      000083 FD               [12]  614 	mov	r5,a
      000084 EC               [12]  615 	mov	a,r4
      000085 2E               [12]  616 	add	a,r6
      000086 F5 82            [12]  617 	mov	dpl,a
      000088 ED               [12]  618 	mov	a,r5
      000089 3F               [12]  619 	addc	a,r7
      00008A F5 83            [12]  620 	mov	dph,a
      00008C E4               [12]  621 	clr	a
      00008D F0               [24]  622 	movx	@dptr,a
                                    623 ;	life.c:84: for (x = 0; x < W; x++)
      00008E 90r0Cr04         [24]  624 	mov	dptr,#_x
      000091 E0               [24]  625 	movx	a,@dptr
      000092 24 01            [12]  626 	add	a,#0x01
      000094 F0               [24]  627 	movx	@dptr,a
      000095 A3               [24]  628 	inc	dptr
      000096 E0               [24]  629 	movx	a,@dptr
      000097 34 00            [12]  630 	addc	a,#0x00
      000099 F0               [24]  631 	movx	@dptr,a
      00009A 90r0Cr04         [24]  632 	mov	dptr,#_x
      00009D E0               [24]  633 	movx	a,@dptr
      00009E FE               [12]  634 	mov	r6,a
      00009F A3               [24]  635 	inc	dptr
      0000A0 E0               [24]  636 	movx	a,@dptr
      0000A1 FF               [12]  637 	mov	r7,a
      0000A2 C3               [12]  638 	clr	c
      0000A3 EE               [12]  639 	mov	a,r6
      0000A4 94 20            [12]  640 	subb	a,#0x20
      0000A6 EF               [12]  641 	mov	a,r7
      0000A7 64 80            [12]  642 	xrl	a,#0x80
      0000A9 94 80            [12]  643 	subb	a,#0x80
      0000AB 40 B1            [24]  644 	jc	00145$
                                    645 ;	life.c:83: for (y = 0; y < H; y++)
      0000AD 90r0Cr06         [24]  646 	mov	dptr,#_y
      0000B0 E0               [24]  647 	movx	a,@dptr
      0000B1 24 01            [12]  648 	add	a,#0x01
      0000B3 F0               [24]  649 	movx	@dptr,a
      0000B4 A3               [24]  650 	inc	dptr
      0000B5 E0               [24]  651 	movx	a,@dptr
      0000B6 34 00            [12]  652 	addc	a,#0x00
      0000B8 F0               [24]  653 	movx	@dptr,a
      0000B9 90r0Cr06         [24]  654 	mov	dptr,#_y
      0000BC E0               [24]  655 	movx	a,@dptr
      0000BD FE               [12]  656 	mov	r6,a
      0000BE A3               [24]  657 	inc	dptr
      0000BF E0               [24]  658 	movx	a,@dptr
      0000C0 FF               [12]  659 	mov	r7,a
      0000C1 C3               [12]  660 	clr	c
      0000C2 EE               [12]  661 	mov	a,r6
      0000C3 94 20            [12]  662 	subb	a,#0x20
      0000C5 EF               [12]  663 	mov	a,r7
      0000C6 64 80            [12]  664 	xrl	a,#0x80
      0000C8 94 80            [12]  665 	subb	a,#0x80
      0000CA 40 8B            [24]  666 	jc	00147$
                                    667 ;	life.c:137: printf("\033[2J\033[mINIT\n\r");
      0000CC 74r1E            [12]  668 	mov	a,#___str_5
      0000CE C0 E0            [24]  669 	push	acc
      0000D0 74s00            [12]  670 	mov	a,#(___str_5 >> 8)
      0000D2 C0 E0            [24]  671 	push	acc
      0000D4 74 80            [12]  672 	mov	a,#0x80
      0000D6 C0 E0            [24]  673 	push	acc
      0000D8 12r00r00         [24]  674 	lcall	_printf
      0000DB 15 81            [12]  675 	dec	sp
      0000DD 15 81            [12]  676 	dec	sp
      0000DF 15 81            [12]  677 	dec	sp
                                    678 ;	life.c:91: for (y = 0; y < H; y++)
      0000E1 90r0Cr06         [24]  679 	mov	dptr,#_y
      0000E4 E4               [12]  680 	clr	a
      0000E5 F0               [24]  681 	movx	@dptr,a
      0000E6 A3               [24]  682 	inc	dptr
      0000E7 F0               [24]  683 	movx	@dptr,a
      0000E8                        684 00151$:
                                    685 ;	life.c:92: for (x = 0; x < W; x++) {
      0000E8 90r0Cr04         [24]  686 	mov	dptr,#_x
      0000EB E4               [12]  687 	clr	a
      0000EC F0               [24]  688 	movx	@dptr,a
      0000ED A3               [24]  689 	inc	dptr
      0000EE F0               [24]  690 	movx	@dptr,a
      0000EF                        691 00149$:
                                    692 ;	life.c:93: c = getchar();
      0000EF 12r00r05         [24]  693 	lcall	_getchar
      0000F2 AE 82            [24]  694 	mov	r6,dpl
      0000F4 AF 83            [24]  695 	mov	r7,dph
      0000F6 90r0Cr1C         [24]  696 	mov	dptr,#_c
      0000F9 EE               [12]  697 	mov	a,r6
      0000FA F0               [24]  698 	movx	@dptr,a
      0000FB EF               [12]  699 	mov	a,r7
      0000FC A3               [24]  700 	inc	dptr
      0000FD F0               [24]  701 	movx	@dptr,a
                                    702 ;	life.c:94: u[y][x] = c & 1;
      0000FE 90r0Cr06         [24]  703 	mov	dptr,#_y
      000101 E0               [24]  704 	movx	a,@dptr
      000102 FC               [12]  705 	mov	r4,a
      000103 A3               [24]  706 	inc	dptr
      000104 E0               [24]  707 	movx	a,@dptr
      000105 C4               [12]  708 	swap	a
      000106 23               [12]  709 	rl	a
      000107 54 E0            [12]  710 	anl	a,#0xe0
      000109 CC               [12]  711 	xch	a,r4
      00010A C4               [12]  712 	swap	a
      00010B 23               [12]  713 	rl	a
      00010C CC               [12]  714 	xch	a,r4
      00010D 6C               [12]  715 	xrl	a,r4
      00010E CC               [12]  716 	xch	a,r4
      00010F 54 E0            [12]  717 	anl	a,#0xe0
      000111 CC               [12]  718 	xch	a,r4
      000112 6C               [12]  719 	xrl	a,r4
      000113 FD               [12]  720 	mov	r5,a
      000114 EC               [12]  721 	mov	a,r4
      000115 24r04            [12]  722 	add	a,#_u
      000117 FC               [12]  723 	mov	r4,a
      000118 ED               [12]  724 	mov	a,r5
      000119 34s04            [12]  725 	addc	a,#(_u >> 8)
      00011B FD               [12]  726 	mov	r5,a
      00011C 90r0Cr04         [24]  727 	mov	dptr,#_x
      00011F E0               [24]  728 	movx	a,@dptr
      000120 FA               [12]  729 	mov	r2,a
      000121 A3               [24]  730 	inc	dptr
      000122 E0               [24]  731 	movx	a,@dptr
      000123 FB               [12]  732 	mov	r3,a
      000124 EA               [12]  733 	mov	a,r2
      000125 2C               [12]  734 	add	a,r4
      000126 F5 82            [12]  735 	mov	dpl,a
      000128 EB               [12]  736 	mov	a,r3
      000129 3D               [12]  737 	addc	a,r5
      00012A F5 83            [12]  738 	mov	dph,a
      00012C 53 06 01         [24]  739 	anl	ar6,#0x01
      00012F EE               [12]  740 	mov	a,r6
      000130 F0               [24]  741 	movx	@dptr,a
                                    742 ;	life.c:92: for (x = 0; x < W; x++) {
      000131 90r0Cr04         [24]  743 	mov	dptr,#_x
      000134 E0               [24]  744 	movx	a,@dptr
      000135 24 01            [12]  745 	add	a,#0x01
      000137 F0               [24]  746 	movx	@dptr,a
      000138 A3               [24]  747 	inc	dptr
      000139 E0               [24]  748 	movx	a,@dptr
      00013A 34 00            [12]  749 	addc	a,#0x00
      00013C F0               [24]  750 	movx	@dptr,a
      00013D 90r0Cr04         [24]  751 	mov	dptr,#_x
      000140 E0               [24]  752 	movx	a,@dptr
      000141 FE               [12]  753 	mov	r6,a
      000142 A3               [24]  754 	inc	dptr
      000143 E0               [24]  755 	movx	a,@dptr
      000144 FF               [12]  756 	mov	r7,a
      000145 C3               [12]  757 	clr	c
      000146 EE               [12]  758 	mov	a,r6
      000147 94 20            [12]  759 	subb	a,#0x20
      000149 EF               [12]  760 	mov	a,r7
      00014A 64 80            [12]  761 	xrl	a,#0x80
      00014C 94 80            [12]  762 	subb	a,#0x80
      00014E 40 9F            [24]  763 	jc	00149$
                                    764 ;	life.c:91: for (y = 0; y < H; y++)
      000150 90r0Cr06         [24]  765 	mov	dptr,#_y
      000153 E0               [24]  766 	movx	a,@dptr
      000154 24 01            [12]  767 	add	a,#0x01
      000156 F0               [24]  768 	movx	@dptr,a
      000157 A3               [24]  769 	inc	dptr
      000158 E0               [24]  770 	movx	a,@dptr
      000159 34 00            [12]  771 	addc	a,#0x00
      00015B F0               [24]  772 	movx	@dptr,a
      00015C 90r0Cr06         [24]  773 	mov	dptr,#_y
      00015F E0               [24]  774 	movx	a,@dptr
      000160 FE               [12]  775 	mov	r6,a
      000161 A3               [24]  776 	inc	dptr
      000162 E0               [24]  777 	movx	a,@dptr
      000163 FF               [12]  778 	mov	r7,a
      000164 C3               [12]  779 	clr	c
      000165 EE               [12]  780 	mov	a,r6
      000166 94 20            [12]  781 	subb	a,#0x20
      000168 EF               [12]  782 	mov	a,r7
      000169 64 80            [12]  783 	xrl	a,#0x80
      00016B 94 80            [12]  784 	subb	a,#0x80
      00016D 50 03            [24]  785 	jnc	00368$
      00016F 02r00rE8         [24]  786 	ljmp	00151$
      000172                        787 00368$:
                                    788 ;	life.c:140: printf("RDY\n\r");
      000172 74r2C            [12]  789 	mov	a,#___str_6
      000174 C0 E0            [24]  790 	push	acc
      000176 74s00            [12]  791 	mov	a,#(___str_6 >> 8)
      000178 C0 E0            [24]  792 	push	acc
      00017A 74 80            [12]  793 	mov	a,#0x80
      00017C C0 E0            [24]  794 	push	acc
      00017E 12r00r00         [24]  795 	lcall	_printf
      000181 15 81            [12]  796 	dec	sp
      000183 15 81            [12]  797 	dec	sp
      000185 15 81            [12]  798 	dec	sp
                                    799 ;	life.c:141: (void)getchar();
      000187 12r00r05         [24]  800 	lcall	_getchar
                                    801 ;	life.c:42: for (j = 0; j < 4; j++)
      00018A 90r0Cr16         [24]  802 	mov	dptr,#_j
      00018D E4               [12]  803 	clr	a
      00018E F0               [24]  804 	movx	@dptr,a
      00018F A3               [24]  805 	inc	dptr
      000190 F0               [24]  806 	movx	@dptr,a
      000191                        807 00153$:
                                    808 ;	life.c:43: generation[j] = 0;
      000191 90r0Cr16         [24]  809 	mov	dptr,#_j
      000194 E0               [24]  810 	movx	a,@dptr
      000195 FE               [12]  811 	mov	r6,a
      000196 A3               [24]  812 	inc	dptr
      000197 E0               [24]  813 	movx	a,@dptr
      000198 FF               [12]  814 	mov	r7,a
      000199 EE               [12]  815 	mov	a,r6
      00019A 2E               [12]  816 	add	a,r6
      00019B FE               [12]  817 	mov	r6,a
      00019C EF               [12]  818 	mov	a,r7
      00019D 33               [12]  819 	rlc	a
      00019E FF               [12]  820 	mov	r7,a
      00019F EE               [12]  821 	mov	a,r6
      0001A0 24r0E            [12]  822 	add	a,#_generation
      0001A2 F5 82            [12]  823 	mov	dpl,a
      0001A4 EF               [12]  824 	mov	a,r7
      0001A5 34s0C            [12]  825 	addc	a,#(_generation >> 8)
      0001A7 F5 83            [12]  826 	mov	dph,a
      0001A9 E4               [12]  827 	clr	a
      0001AA F0               [24]  828 	movx	@dptr,a
      0001AB A3               [24]  829 	inc	dptr
      0001AC F0               [24]  830 	movx	@dptr,a
                                    831 ;	life.c:42: for (j = 0; j < 4; j++)
      0001AD 90r0Cr16         [24]  832 	mov	dptr,#_j
      0001B0 E0               [24]  833 	movx	a,@dptr
      0001B1 24 01            [12]  834 	add	a,#0x01
      0001B3 F0               [24]  835 	movx	@dptr,a
      0001B4 A3               [24]  836 	inc	dptr
      0001B5 E0               [24]  837 	movx	a,@dptr
      0001B6 34 00            [12]  838 	addc	a,#0x00
      0001B8 F0               [24]  839 	movx	@dptr,a
      0001B9 90r0Cr16         [24]  840 	mov	dptr,#_j
      0001BC E0               [24]  841 	movx	a,@dptr
      0001BD FE               [12]  842 	mov	r6,a
      0001BE A3               [24]  843 	inc	dptr
      0001BF E0               [24]  844 	movx	a,@dptr
      0001C0 FF               [12]  845 	mov	r7,a
      0001C1 C3               [12]  846 	clr	c
      0001C2 EE               [12]  847 	mov	a,r6
      0001C3 94 04            [12]  848 	subb	a,#0x04
      0001C5 EF               [12]  849 	mov	a,r7
      0001C6 64 80            [12]  850 	xrl	a,#0x80
      0001C8 94 80            [12]  851 	subb	a,#0x80
      0001CA 40 C5            [24]  852 	jc	00153$
                                    853 ;	life.c:145: for (i1 = 0; !i0 && !i1; ) {
      0001CC                        854 00179$:
      0001CC 90r00r00         [24]  855 	mov	dptr,#_i0
      0001CF E0               [24]  856 	movx	a,@dptr
      0001D0 F5 F0            [12]  857 	mov	b,a
      0001D2 A3               [24]  858 	inc	dptr
      0001D3 E0               [24]  859 	movx	a,@dptr
      0001D4 45 F0            [12]  860 	orl	a,b
      0001D6 60 03            [24]  861 	jz	00370$
      0001D8 02r07rA4         [24]  862 	ljmp	00104$
      0001DB                        863 00370$:
                                    864 ;	life.c:67: printf("\033[2J\033[m");
      0001DB 74r05            [12]  865 	mov	a,#___str_1
      0001DD C0 E0            [24]  866 	push	acc
      0001DF 74s00            [12]  867 	mov	a,#(___str_1 >> 8)
      0001E1 C0 E0            [24]  868 	push	acc
      0001E3 74 80            [12]  869 	mov	a,#0x80
      0001E5 C0 E0            [24]  870 	push	acc
      0001E7 12r00r00         [24]  871 	lcall	_printf
      0001EA 15 81            [12]  872 	dec	sp
      0001EC 15 81            [12]  873 	dec	sp
      0001EE 15 81            [12]  874 	dec	sp
                                    875 ;	life.c:58: for (j = 0; j < 4; j++) {
      0001F0 90r0Cr16         [24]  876 	mov	dptr,#_j
      0001F3 E4               [12]  877 	clr	a
      0001F4 F0               [24]  878 	movx	@dptr,a
      0001F5 A3               [24]  879 	inc	dptr
      0001F6 F0               [24]  880 	movx	@dptr,a
      0001F7                        881 00155$:
                                    882 ;	life.c:59: printf("%04x", generation[3 - j]);
      0001F7 90r0Cr16         [24]  883 	mov	dptr,#_j
      0001FA E0               [24]  884 	movx	a,@dptr
      0001FB FE               [12]  885 	mov	r6,a
      0001FC A3               [24]  886 	inc	dptr
      0001FD E0               [24]  887 	movx	a,@dptr
      0001FE 74 03            [12]  888 	mov	a,#0x03
      000200 C3               [12]  889 	clr	c
      000201 9E               [12]  890 	subb	a,r6
      000202 FE               [12]  891 	mov	r6,a
      000203 C2 D5            [12]  892 	clr	F0
      000205 75 F0 02         [24]  893 	mov	b,#0x02
      000208 EE               [12]  894 	mov	a,r6
      000209 30 E7 04         [24]  895 	jnb	acc.7,00371$
      00020C B2 D5            [12]  896 	cpl	F0
      00020E F4               [12]  897 	cpl	a
      00020F 04               [12]  898 	inc	a
      000210                        899 00371$:
      000210 A4               [48]  900 	mul	ab
      000211 30 D5 0A         [24]  901 	jnb	F0,00372$
      000214 F4               [12]  902 	cpl	a
      000215 24 01            [12]  903 	add	a,#0x01
      000217 C5 F0            [12]  904 	xch	a,b
      000219 F4               [12]  905 	cpl	a
      00021A 34 00            [12]  906 	addc	a,#0x00
      00021C C5 F0            [12]  907 	xch	a,b
      00021E                        908 00372$:
      00021E 24r0E            [12]  909 	add	a,#_generation
      000220 F5 82            [12]  910 	mov	dpl,a
      000222 74s0C            [12]  911 	mov	a,#(_generation >> 8)
      000224 35 F0            [12]  912 	addc	a,b
      000226 F5 83            [12]  913 	mov	dph,a
      000228 E0               [24]  914 	movx	a,@dptr
      000229 FE               [12]  915 	mov	r6,a
      00022A A3               [24]  916 	inc	dptr
      00022B E0               [24]  917 	movx	a,@dptr
      00022C FF               [12]  918 	mov	r7,a
      00022D C0 06            [24]  919 	push	ar6
      00022F C0 07            [24]  920 	push	ar7
      000231 74r00            [12]  921 	mov	a,#___str_0
      000233 C0 E0            [24]  922 	push	acc
      000235 74s00            [12]  923 	mov	a,#(___str_0 >> 8)
      000237 C0 E0            [24]  924 	push	acc
      000239 74 80            [12]  925 	mov	a,#0x80
      00023B C0 E0            [24]  926 	push	acc
      00023D 12r00r00         [24]  927 	lcall	_printf
      000240 E5 81            [12]  928 	mov	a,sp
      000242 24 FB            [12]  929 	add	a,#0xfb
      000244 F5 81            [12]  930 	mov	sp,a
                                    931 ;	life.c:60: if (j < 3) putchar(' ');
      000246 90r0Cr16         [24]  932 	mov	dptr,#_j
      000249 E0               [24]  933 	movx	a,@dptr
      00024A FE               [12]  934 	mov	r6,a
      00024B A3               [24]  935 	inc	dptr
      00024C E0               [24]  936 	movx	a,@dptr
      00024D FF               [12]  937 	mov	r7,a
      00024E C3               [12]  938 	clr	c
      00024F EE               [12]  939 	mov	a,r6
      000250 94 03            [12]  940 	subb	a,#0x03
      000252 EF               [12]  941 	mov	a,r7
      000253 64 80            [12]  942 	xrl	a,#0x80
      000255 94 80            [12]  943 	subb	a,#0x80
      000257 50 06            [24]  944 	jnc	00156$
      000259 90 00 20         [24]  945 	mov	dptr,#0x0020
      00025C 12r00r00         [24]  946 	lcall	_putchar
      00025F                        947 00156$:
                                    948 ;	life.c:58: for (j = 0; j < 4; j++) {
      00025F 90r0Cr16         [24]  949 	mov	dptr,#_j
      000262 E0               [24]  950 	movx	a,@dptr
      000263 24 01            [12]  951 	add	a,#0x01
      000265 F0               [24]  952 	movx	@dptr,a
      000266 A3               [24]  953 	inc	dptr
      000267 E0               [24]  954 	movx	a,@dptr
      000268 34 00            [12]  955 	addc	a,#0x00
      00026A F0               [24]  956 	movx	@dptr,a
      00026B 90r0Cr16         [24]  957 	mov	dptr,#_j
      00026E E0               [24]  958 	movx	a,@dptr
      00026F FE               [12]  959 	mov	r6,a
      000270 A3               [24]  960 	inc	dptr
      000271 E0               [24]  961 	movx	a,@dptr
      000272 FF               [12]  962 	mov	r7,a
      000273 C3               [12]  963 	clr	c
      000274 EE               [12]  964 	mov	a,r6
      000275 94 04            [12]  965 	subb	a,#0x04
      000277 EF               [12]  966 	mov	a,r7
      000278 64 80            [12]  967 	xrl	a,#0x80
      00027A 94 80            [12]  968 	subb	a,#0x80
      00027C 50 03            [24]  969 	jnc	00374$
      00027E 02r01rF7         [24]  970 	ljmp	00155$
      000281                        971 00374$:
                                    972 ;	life.c:69: printf("\r\n");
      000281 74r0D            [12]  973 	mov	a,#___str_2
      000283 C0 E0            [24]  974 	push	acc
      000285 74s00            [12]  975 	mov	a,#(___str_2 >> 8)
      000287 C0 E0            [24]  976 	push	acc
      000289 74 80            [12]  977 	mov	a,#0x80
      00028B C0 E0            [24]  978 	push	acc
      00028D 12r00r00         [24]  979 	lcall	_printf
      000290 15 81            [12]  980 	dec	sp
      000292 15 81            [12]  981 	dec	sp
      000294 15 81            [12]  982 	dec	sp
                                    983 ;	life.c:49: for (j = 0; j < 4; j++) {
      000296 90r0Cr16         [24]  984 	mov	dptr,#_j
      000299 E4               [12]  985 	clr	a
      00029A F0               [24]  986 	movx	@dptr,a
      00029B A3               [24]  987 	inc	dptr
      00029C F0               [24]  988 	movx	@dptr,a
      00029D                        989 00157$:
                                    990 ;	life.c:50: generation[j]++;
      00029D 90r0Cr16         [24]  991 	mov	dptr,#_j
      0002A0 E0               [24]  992 	movx	a,@dptr
      0002A1 FE               [12]  993 	mov	r6,a
      0002A2 A3               [24]  994 	inc	dptr
      0002A3 E0               [24]  995 	movx	a,@dptr
      0002A4 FF               [12]  996 	mov	r7,a
      0002A5 EE               [12]  997 	mov	a,r6
      0002A6 2E               [12]  998 	add	a,r6
      0002A7 FE               [12]  999 	mov	r6,a
      0002A8 EF               [12] 1000 	mov	a,r7
      0002A9 33               [12] 1001 	rlc	a
      0002AA FF               [12] 1002 	mov	r7,a
      0002AB EE               [12] 1003 	mov	a,r6
      0002AC 24r0E            [12] 1004 	add	a,#_generation
      0002AE FE               [12] 1005 	mov	r6,a
      0002AF EF               [12] 1006 	mov	a,r7
      0002B0 34s0C            [12] 1007 	addc	a,#(_generation >> 8)
      0002B2 FF               [12] 1008 	mov	r7,a
      0002B3 8E 82            [24] 1009 	mov	dpl,r6
      0002B5 8F 83            [24] 1010 	mov	dph,r7
      0002B7 E0               [24] 1011 	movx	a,@dptr
      0002B8 FC               [12] 1012 	mov	r4,a
      0002B9 A3               [24] 1013 	inc	dptr
      0002BA E0               [24] 1014 	movx	a,@dptr
      0002BB FD               [12] 1015 	mov	r5,a
      0002BC 0C               [12] 1016 	inc	r4
      0002BD BC 00 01         [24] 1017 	cjne	r4,#0x00,00375$
      0002C0 0D               [12] 1018 	inc	r5
      0002C1                       1019 00375$:
      0002C1 8E 82            [24] 1020 	mov	dpl,r6
      0002C3 8F 83            [24] 1021 	mov	dph,r7
      0002C5 EC               [12] 1022 	mov	a,r4
      0002C6 F0               [24] 1023 	movx	@dptr,a
      0002C7 ED               [12] 1024 	mov	a,r5
      0002C8 A3               [24] 1025 	inc	dptr
      0002C9 F0               [24] 1026 	movx	@dptr,a
                                   1027 ;	life.c:51: if (generation[j]) break;
      0002CA 90r0Cr16         [24] 1028 	mov	dptr,#_j
      0002CD E0               [24] 1029 	movx	a,@dptr
      0002CE FE               [12] 1030 	mov	r6,a
      0002CF A3               [24] 1031 	inc	dptr
      0002D0 E0               [24] 1032 	movx	a,@dptr
      0002D1 FF               [12] 1033 	mov	r7,a
      0002D2 EE               [12] 1034 	mov	a,r6
      0002D3 2E               [12] 1035 	add	a,r6
      0002D4 FC               [12] 1036 	mov	r4,a
      0002D5 EF               [12] 1037 	mov	a,r7
      0002D6 33               [12] 1038 	rlc	a
      0002D7 FD               [12] 1039 	mov	r5,a
      0002D8 EC               [12] 1040 	mov	a,r4
      0002D9 24r0E            [12] 1041 	add	a,#_generation
      0002DB F5 82            [12] 1042 	mov	dpl,a
      0002DD ED               [12] 1043 	mov	a,r5
      0002DE 34s0C            [12] 1044 	addc	a,#(_generation >> 8)
      0002E0 F5 83            [12] 1045 	mov	dph,a
      0002E2 E0               [24] 1046 	movx	a,@dptr
      0002E3 FC               [12] 1047 	mov	r4,a
      0002E4 A3               [24] 1048 	inc	dptr
      0002E5 E0               [24] 1049 	movx	a,@dptr
      0002E6 FD               [12] 1050 	mov	r5,a
      0002E7 4C               [12] 1051 	orl	a,r4
      0002E8 70 1E            [24] 1052 	jnz	00123$
                                   1053 ;	life.c:49: for (j = 0; j < 4; j++) {
      0002EA 90r0Cr16         [24] 1054 	mov	dptr,#_j
      0002ED 74 01            [12] 1055 	mov	a,#0x01
      0002EF 2E               [12] 1056 	add	a,r6
      0002F0 F0               [24] 1057 	movx	@dptr,a
      0002F1 E4               [12] 1058 	clr	a
      0002F2 3F               [12] 1059 	addc	a,r7
      0002F3 A3               [24] 1060 	inc	dptr
      0002F4 F0               [24] 1061 	movx	@dptr,a
      0002F5 90r0Cr16         [24] 1062 	mov	dptr,#_j
      0002F8 E0               [24] 1063 	movx	a,@dptr
      0002F9 FE               [12] 1064 	mov	r6,a
      0002FA A3               [24] 1065 	inc	dptr
      0002FB E0               [24] 1066 	movx	a,@dptr
      0002FC FF               [12] 1067 	mov	r7,a
      0002FD C3               [12] 1068 	clr	c
      0002FE EE               [12] 1069 	mov	a,r6
      0002FF 94 04            [12] 1070 	subb	a,#0x04
      000301 EF               [12] 1071 	mov	a,r7
      000302 64 80            [12] 1072 	xrl	a,#0x80
      000304 94 80            [12] 1073 	subb	a,#0x80
      000306 40 95            [24] 1074 	jc	00157$
                                   1075 ;	life.c:70: updategen();
      000308                       1076 00123$:
                                   1077 ;	life.c:72: for (x = 0; x < W; x++) {
      000308 90r0Cr04         [24] 1078 	mov	dptr,#_x
      00030B E4               [12] 1079 	clr	a
      00030C F0               [24] 1080 	movx	@dptr,a
      00030D A3               [24] 1081 	inc	dptr
      00030E F0               [24] 1082 	movx	@dptr,a
      00030F                       1083 00161$:
                                   1084 ;	life.c:73: for (y = 0; y < H; y++)
      00030F 90r0Cr06         [24] 1085 	mov	dptr,#_y
      000312 E4               [12] 1086 	clr	a
      000313 F0               [24] 1087 	movx	@dptr,a
      000314 A3               [24] 1088 	inc	dptr
      000315 F0               [24] 1089 	movx	@dptr,a
      000316                       1090 00159$:
                                   1091 ;	life.c:74: if (u[y][x]) printf("\033[01m[]\033[m");
      000316 90r0Cr06         [24] 1092 	mov	dptr,#_y
      000319 E0               [24] 1093 	movx	a,@dptr
      00031A FE               [12] 1094 	mov	r6,a
      00031B A3               [24] 1095 	inc	dptr
      00031C E0               [24] 1096 	movx	a,@dptr
      00031D C4               [12] 1097 	swap	a
      00031E 23               [12] 1098 	rl	a
      00031F 54 E0            [12] 1099 	anl	a,#0xe0
      000321 CE               [12] 1100 	xch	a,r6
      000322 C4               [12] 1101 	swap	a
      000323 23               [12] 1102 	rl	a
      000324 CE               [12] 1103 	xch	a,r6
      000325 6E               [12] 1104 	xrl	a,r6
      000326 CE               [12] 1105 	xch	a,r6
      000327 54 E0            [12] 1106 	anl	a,#0xe0
      000329 CE               [12] 1107 	xch	a,r6
      00032A 6E               [12] 1108 	xrl	a,r6
      00032B FF               [12] 1109 	mov	r7,a
      00032C EE               [12] 1110 	mov	a,r6
      00032D 24r04            [12] 1111 	add	a,#_u
      00032F FE               [12] 1112 	mov	r6,a
      000330 EF               [12] 1113 	mov	a,r7
      000331 34s04            [12] 1114 	addc	a,#(_u >> 8)
      000333 FF               [12] 1115 	mov	r7,a
      000334 90r0Cr04         [24] 1116 	mov	dptr,#_x
      000337 E0               [24] 1117 	movx	a,@dptr
      000338 FC               [12] 1118 	mov	r4,a
      000339 A3               [24] 1119 	inc	dptr
      00033A E0               [24] 1120 	movx	a,@dptr
      00033B FD               [12] 1121 	mov	r5,a
      00033C EC               [12] 1122 	mov	a,r4
      00033D 2E               [12] 1123 	add	a,r6
      00033E FE               [12] 1124 	mov	r6,a
      00033F ED               [12] 1125 	mov	a,r5
      000340 3F               [12] 1126 	addc	a,r7
      000341 FF               [12] 1127 	mov	r7,a
      000342 8E 82            [24] 1128 	mov	dpl,r6
      000344 8F 83            [24] 1129 	mov	dph,r7
      000346 E0               [24] 1130 	movx	a,@dptr
      000347 60 17            [24] 1131 	jz	00125$
      000349 74r10            [12] 1132 	mov	a,#___str_3
      00034B C0 E0            [24] 1133 	push	acc
      00034D 74s00            [12] 1134 	mov	a,#(___str_3 >> 8)
      00034F C0 E0            [24] 1135 	push	acc
      000351 74 80            [12] 1136 	mov	a,#0x80
      000353 C0 E0            [24] 1137 	push	acc
      000355 12r00r00         [24] 1138 	lcall	_printf
      000358 15 81            [12] 1139 	dec	sp
      00035A 15 81            [12] 1140 	dec	sp
      00035C 15 81            [12] 1141 	dec	sp
      00035E 80 15            [24] 1142 	sjmp	00160$
      000360                       1143 00125$:
                                   1144 ;	life.c:75: else printf("--");
      000360 74r1B            [12] 1145 	mov	a,#___str_4
      000362 C0 E0            [24] 1146 	push	acc
      000364 74s00            [12] 1147 	mov	a,#(___str_4 >> 8)
      000366 C0 E0            [24] 1148 	push	acc
      000368 74 80            [12] 1149 	mov	a,#0x80
      00036A C0 E0            [24] 1150 	push	acc
      00036C 12r00r00         [24] 1151 	lcall	_printf
      00036F 15 81            [12] 1152 	dec	sp
      000371 15 81            [12] 1153 	dec	sp
      000373 15 81            [12] 1154 	dec	sp
      000375                       1155 00160$:
                                   1156 ;	life.c:73: for (y = 0; y < H; y++)
      000375 90r0Cr06         [24] 1157 	mov	dptr,#_y
      000378 E0               [24] 1158 	movx	a,@dptr
      000379 24 01            [12] 1159 	add	a,#0x01
      00037B F0               [24] 1160 	movx	@dptr,a
      00037C A3               [24] 1161 	inc	dptr
      00037D E0               [24] 1162 	movx	a,@dptr
      00037E 34 00            [12] 1163 	addc	a,#0x00
      000380 F0               [24] 1164 	movx	@dptr,a
      000381 90r0Cr06         [24] 1165 	mov	dptr,#_y
      000384 E0               [24] 1166 	movx	a,@dptr
      000385 FE               [12] 1167 	mov	r6,a
      000386 A3               [24] 1168 	inc	dptr
      000387 E0               [24] 1169 	movx	a,@dptr
      000388 FF               [12] 1170 	mov	r7,a
      000389 C3               [12] 1171 	clr	c
      00038A EE               [12] 1172 	mov	a,r6
      00038B 94 20            [12] 1173 	subb	a,#0x20
      00038D EF               [12] 1174 	mov	a,r7
      00038E 64 80            [12] 1175 	xrl	a,#0x80
      000390 94 80            [12] 1176 	subb	a,#0x80
      000392 50 03            [24] 1177 	jnc	00379$
      000394 02r03r16         [24] 1178 	ljmp	00159$
      000397                       1179 00379$:
                                   1180 ;	life.c:76: printf("\r\n");
      000397 74r0D            [12] 1181 	mov	a,#___str_2
      000399 C0 E0            [24] 1182 	push	acc
      00039B 74s00            [12] 1183 	mov	a,#(___str_2 >> 8)
      00039D C0 E0            [24] 1184 	push	acc
      00039F 74 80            [12] 1185 	mov	a,#0x80
      0003A1 C0 E0            [24] 1186 	push	acc
      0003A3 12r00r00         [24] 1187 	lcall	_printf
      0003A6 15 81            [12] 1188 	dec	sp
      0003A8 15 81            [12] 1189 	dec	sp
      0003AA 15 81            [12] 1190 	dec	sp
                                   1191 ;	life.c:72: for (x = 0; x < W; x++) {
      0003AC 90r0Cr04         [24] 1192 	mov	dptr,#_x
      0003AF E0               [24] 1193 	movx	a,@dptr
      0003B0 24 01            [12] 1194 	add	a,#0x01
      0003B2 F0               [24] 1195 	movx	@dptr,a
      0003B3 A3               [24] 1196 	inc	dptr
      0003B4 E0               [24] 1197 	movx	a,@dptr
      0003B5 34 00            [12] 1198 	addc	a,#0x00
      0003B7 F0               [24] 1199 	movx	@dptr,a
      0003B8 90r0Cr04         [24] 1200 	mov	dptr,#_x
      0003BB E0               [24] 1201 	movx	a,@dptr
      0003BC FE               [12] 1202 	mov	r6,a
      0003BD A3               [24] 1203 	inc	dptr
      0003BE E0               [24] 1204 	movx	a,@dptr
      0003BF FF               [12] 1205 	mov	r7,a
      0003C0 C3               [12] 1206 	clr	c
      0003C1 EE               [12] 1207 	mov	a,r6
      0003C2 94 20            [12] 1208 	subb	a,#0x20
      0003C4 EF               [12] 1209 	mov	a,r7
      0003C5 64 80            [12] 1210 	xrl	a,#0x80
      0003C7 94 80            [12] 1211 	subb	a,#0x80
      0003C9 50 03            [24] 1212 	jnc	00380$
      0003CB 02r03r0F         [24] 1213 	ljmp	00161$
      0003CE                       1214 00380$:
                                   1215 ;	life.c:101: fixed = 1;
      0003CE 90r0Cr18         [24] 1216 	mov	dptr,#_fixed
      0003D1 74 01            [12] 1217 	mov	a,#0x01
      0003D3 F0               [24] 1218 	movx	@dptr,a
      0003D4 E4               [12] 1219 	clr	a
      0003D5 A3               [24] 1220 	inc	dptr
      0003D6 F0               [24] 1221 	movx	@dptr,a
                                   1222 ;	life.c:102: cycle2 = 1;
      0003D7 90r0Cr1A         [24] 1223 	mov	dptr,#_cycle2
      0003DA 04               [12] 1224 	inc	a
      0003DB F0               [24] 1225 	movx	@dptr,a
      0003DC E4               [12] 1226 	clr	a
      0003DD A3               [24] 1227 	inc	dptr
      0003DE F0               [24] 1228 	movx	@dptr,a
                                   1229 ;	life.c:104: for (y = 0; y < H; y++) {
      0003DF 90r0Cr06         [24] 1230 	mov	dptr,#_y
      0003E2 F0               [24] 1231 	movx	@dptr,a
      0003E3 A3               [24] 1232 	inc	dptr
      0003E4 F0               [24] 1233 	movx	@dptr,a
      0003E5                       1234 00171$:
                                   1235 ;	life.c:105: for (x = 0; x < W; x++) {
      0003E5 90r0Cr04         [24] 1236 	mov	dptr,#_x
      0003E8 E4               [12] 1237 	clr	a
      0003E9 F0               [24] 1238 	movx	@dptr,a
      0003EA A3               [24] 1239 	inc	dptr
      0003EB F0               [24] 1240 	movx	@dptr,a
      0003EC                       1241 00169$:
                                   1242 ;	life.c:106: n = 0;
      0003EC 90r0Cr0C         [24] 1243 	mov	dptr,#_n
      0003EF E4               [12] 1244 	clr	a
      0003F0 F0               [24] 1245 	movx	@dptr,a
      0003F1 A3               [24] 1246 	inc	dptr
      0003F2 F0               [24] 1247 	movx	@dptr,a
                                   1248 ;	life.c:107: for (y1 = y - 1; y1 <= y + 1; y1++)
      0003F3 90r0Cr06         [24] 1249 	mov	dptr,#_y
      0003F6 E0               [24] 1250 	movx	a,@dptr
      0003F7 FE               [12] 1251 	mov	r6,a
      0003F8 A3               [24] 1252 	inc	dptr
      0003F9 E0               [24] 1253 	movx	a,@dptr
      0003FA FF               [12] 1254 	mov	r7,a
      0003FB 1E               [12] 1255 	dec	r6
      0003FC BE FF 01         [24] 1256 	cjne	r6,#0xff,00381$
      0003FF 1F               [12] 1257 	dec	r7
      000400                       1258 00381$:
      000400 90r0Cr0A         [24] 1259 	mov	dptr,#_y1
      000403 EE               [12] 1260 	mov	a,r6
      000404 F0               [24] 1261 	movx	@dptr,a
      000405 EF               [12] 1262 	mov	a,r7
      000406 A3               [24] 1263 	inc	dptr
      000407 F0               [24] 1264 	movx	@dptr,a
      000408                       1265 00167$:
      000408 90r0Cr06         [24] 1266 	mov	dptr,#_y
      00040B E0               [24] 1267 	movx	a,@dptr
      00040C FE               [12] 1268 	mov	r6,a
      00040D A3               [24] 1269 	inc	dptr
      00040E E0               [24] 1270 	movx	a,@dptr
      00040F FF               [12] 1271 	mov	r7,a
      000410 74 01            [12] 1272 	mov	a,#0x01
      000412 2E               [12] 1273 	add	a,r6
      000413 FC               [12] 1274 	mov	r4,a
      000414 E4               [12] 1275 	clr	a
      000415 3F               [12] 1276 	addc	a,r7
      000416 FD               [12] 1277 	mov	r5,a
      000417 90r0Cr0A         [24] 1278 	mov	dptr,#_y1
      00041A E0               [24] 1279 	movx	a,@dptr
      00041B FA               [12] 1280 	mov	r2,a
      00041C A3               [24] 1281 	inc	dptr
      00041D E0               [24] 1282 	movx	a,@dptr
      00041E FB               [12] 1283 	mov	r3,a
      00041F C3               [12] 1284 	clr	c
      000420 EC               [12] 1285 	mov	a,r4
      000421 9A               [12] 1286 	subb	a,r2
      000422 ED               [12] 1287 	mov	a,r5
      000423 64 80            [12] 1288 	xrl	a,#0x80
      000425 8B F0            [24] 1289 	mov	b,r3
      000427 63 F0 80         [24] 1290 	xrl	b,#0x80
      00042A 95 F0            [12] 1291 	subb	a,b
      00042C 50 03            [24] 1292 	jnc	00382$
      00042E 02r05r0E         [24] 1293 	ljmp	00133$
      000431                       1294 00382$:
                                   1295 ;	life.c:108: for (x1 = x - 1; x1 <= x + 1; x1++)
      000431 90r0Cr04         [24] 1296 	mov	dptr,#_x
      000434 E0               [24] 1297 	movx	a,@dptr
      000435 FC               [12] 1298 	mov	r4,a
      000436 A3               [24] 1299 	inc	dptr
      000437 E0               [24] 1300 	movx	a,@dptr
      000438 FD               [12] 1301 	mov	r5,a
      000439 1C               [12] 1302 	dec	r4
      00043A BC FF 01         [24] 1303 	cjne	r4,#0xff,00383$
      00043D 1D               [12] 1304 	dec	r5
      00043E                       1305 00383$:
      00043E 90r0Cr08         [24] 1306 	mov	dptr,#_x1
      000441 EC               [12] 1307 	mov	a,r4
      000442 F0               [24] 1308 	movx	@dptr,a
      000443 ED               [12] 1309 	mov	a,r5
      000444 A3               [24] 1310 	inc	dptr
      000445 F0               [24] 1311 	movx	@dptr,a
      000446                       1312 00164$:
      000446 90r0Cr04         [24] 1313 	mov	dptr,#_x
      000449 E0               [24] 1314 	movx	a,@dptr
      00044A FC               [12] 1315 	mov	r4,a
      00044B A3               [24] 1316 	inc	dptr
      00044C E0               [24] 1317 	movx	a,@dptr
      00044D FD               [12] 1318 	mov	r5,a
      00044E 0C               [12] 1319 	inc	r4
      00044F BC 00 01         [24] 1320 	cjne	r4,#0x00,00384$
      000452 0D               [12] 1321 	inc	r5
      000453                       1322 00384$:
      000453 90r0Cr08         [24] 1323 	mov	dptr,#_x1
      000456 E0               [24] 1324 	movx	a,@dptr
      000457 FA               [12] 1325 	mov	r2,a
      000458 A3               [24] 1326 	inc	dptr
      000459 E0               [24] 1327 	movx	a,@dptr
      00045A FB               [12] 1328 	mov	r3,a
      00045B C3               [12] 1329 	clr	c
      00045C EC               [12] 1330 	mov	a,r4
      00045D 9A               [12] 1331 	subb	a,r2
      00045E ED               [12] 1332 	mov	a,r5
      00045F 64 80            [12] 1333 	xrl	a,#0x80
      000461 8B F0            [24] 1334 	mov	b,r3
      000463 63 F0 80         [24] 1335 	xrl	b,#0x80
      000466 95 F0            [12] 1336 	subb	a,b
      000468 50 03            [24] 1337 	jnc	00385$
      00046A 02r04rFF         [24] 1338 	ljmp	00168$
      00046D                       1339 00385$:
                                   1340 ;	life.c:109: if (u[(y1 + H) % H][(x1 + W) % W])
      00046D 90r0Cr0A         [24] 1341 	mov	dptr,#_y1
      000470 E0               [24] 1342 	movx	a,@dptr
      000471 FC               [12] 1343 	mov	r4,a
      000472 A3               [24] 1344 	inc	dptr
      000473 E0               [24] 1345 	movx	a,@dptr
      000474 FD               [12] 1346 	mov	r5,a
      000475 74 20            [12] 1347 	mov	a,#0x20
      000477 2C               [12] 1348 	add	a,r4
      000478 FC               [12] 1349 	mov	r4,a
      000479 E4               [12] 1350 	clr	a
      00047A 3D               [12] 1351 	addc	a,r5
      00047B FD               [12] 1352 	mov	r5,a
      00047C C0 03            [24] 1353 	push	ar3
      00047E C0 02            [24] 1354 	push	ar2
      000480 74 20            [12] 1355 	mov	a,#0x20
      000482 C0 E0            [24] 1356 	push	acc
      000484 E4               [12] 1357 	clr	a
      000485 C0 E0            [24] 1358 	push	acc
      000487 8C 82            [24] 1359 	mov	dpl,r4
      000489 8D 83            [24] 1360 	mov	dph,r5
      00048B 12r00r00         [24] 1361 	lcall	__modsint
      00048E AC 82            [24] 1362 	mov	r4,dpl
      000490 AD 83            [24] 1363 	mov	r5,dph
      000492 15 81            [12] 1364 	dec	sp
      000494 15 81            [12] 1365 	dec	sp
      000496 D0 02            [24] 1366 	pop	ar2
      000498 D0 03            [24] 1367 	pop	ar3
      00049A ED               [12] 1368 	mov	a,r5
      00049B C4               [12] 1369 	swap	a
      00049C 23               [12] 1370 	rl	a
      00049D 54 E0            [12] 1371 	anl	a,#0xe0
      00049F CC               [12] 1372 	xch	a,r4
      0004A0 C4               [12] 1373 	swap	a
      0004A1 23               [12] 1374 	rl	a
      0004A2 CC               [12] 1375 	xch	a,r4
      0004A3 6C               [12] 1376 	xrl	a,r4
      0004A4 CC               [12] 1377 	xch	a,r4
      0004A5 54 E0            [12] 1378 	anl	a,#0xe0
      0004A7 CC               [12] 1379 	xch	a,r4
      0004A8 6C               [12] 1380 	xrl	a,r4
      0004A9 FD               [12] 1381 	mov	r5,a
      0004AA EC               [12] 1382 	mov	a,r4
      0004AB 24r04            [12] 1383 	add	a,#_u
      0004AD FC               [12] 1384 	mov	r4,a
      0004AE ED               [12] 1385 	mov	a,r5
      0004AF 34s04            [12] 1386 	addc	a,#(_u >> 8)
      0004B1 FD               [12] 1387 	mov	r5,a
      0004B2 74 20            [12] 1388 	mov	a,#0x20
      0004B4 2A               [12] 1389 	add	a,r2
      0004B5 FA               [12] 1390 	mov	r2,a
      0004B6 E4               [12] 1391 	clr	a
      0004B7 3B               [12] 1392 	addc	a,r3
      0004B8 FB               [12] 1393 	mov	r3,a
      0004B9 C0 05            [24] 1394 	push	ar5
      0004BB C0 04            [24] 1395 	push	ar4
      0004BD 74 20            [12] 1396 	mov	a,#0x20
      0004BF C0 E0            [24] 1397 	push	acc
      0004C1 E4               [12] 1398 	clr	a
      0004C2 C0 E0            [24] 1399 	push	acc
      0004C4 8A 82            [24] 1400 	mov	dpl,r2
      0004C6 8B 83            [24] 1401 	mov	dph,r3
      0004C8 12r00r00         [24] 1402 	lcall	__modsint
      0004CB AA 82            [24] 1403 	mov	r2,dpl
      0004CD AB 83            [24] 1404 	mov	r3,dph
      0004CF 15 81            [12] 1405 	dec	sp
      0004D1 15 81            [12] 1406 	dec	sp
      0004D3 D0 04            [24] 1407 	pop	ar4
      0004D5 D0 05            [24] 1408 	pop	ar5
      0004D7 EA               [12] 1409 	mov	a,r2
      0004D8 2C               [12] 1410 	add	a,r4
      0004D9 FC               [12] 1411 	mov	r4,a
      0004DA EB               [12] 1412 	mov	a,r3
      0004DB 3D               [12] 1413 	addc	a,r5
      0004DC FD               [12] 1414 	mov	r5,a
      0004DD 8C 82            [24] 1415 	mov	dpl,r4
      0004DF 8D 83            [24] 1416 	mov	dph,r5
      0004E1 E0               [24] 1417 	movx	a,@dptr
      0004E2 60 0C            [24] 1418 	jz	00165$
                                   1419 ;	life.c:110: n++;
      0004E4 90r0Cr0C         [24] 1420 	mov	dptr,#_n
      0004E7 E0               [24] 1421 	movx	a,@dptr
      0004E8 24 01            [12] 1422 	add	a,#0x01
      0004EA F0               [24] 1423 	movx	@dptr,a
      0004EB A3               [24] 1424 	inc	dptr
      0004EC E0               [24] 1425 	movx	a,@dptr
      0004ED 34 00            [12] 1426 	addc	a,#0x00
      0004EF F0               [24] 1427 	movx	@dptr,a
      0004F0                       1428 00165$:
                                   1429 ;	life.c:108: for (x1 = x - 1; x1 <= x + 1; x1++)
      0004F0 90r0Cr08         [24] 1430 	mov	dptr,#_x1
      0004F3 E0               [24] 1431 	movx	a,@dptr
      0004F4 24 01            [12] 1432 	add	a,#0x01
      0004F6 F0               [24] 1433 	movx	@dptr,a
      0004F7 A3               [24] 1434 	inc	dptr
      0004F8 E0               [24] 1435 	movx	a,@dptr
      0004F9 34 00            [12] 1436 	addc	a,#0x00
      0004FB F0               [24] 1437 	movx	@dptr,a
      0004FC 02r04r46         [24] 1438 	ljmp	00164$
      0004FF                       1439 00168$:
                                   1440 ;	life.c:107: for (y1 = y - 1; y1 <= y + 1; y1++)
      0004FF 90r0Cr0A         [24] 1441 	mov	dptr,#_y1
      000502 E0               [24] 1442 	movx	a,@dptr
      000503 24 01            [12] 1443 	add	a,#0x01
      000505 F0               [24] 1444 	movx	@dptr,a
      000506 A3               [24] 1445 	inc	dptr
      000507 E0               [24] 1446 	movx	a,@dptr
      000508 34 00            [12] 1447 	addc	a,#0x00
      00050A F0               [24] 1448 	movx	@dptr,a
      00050B 02r04r08         [24] 1449 	ljmp	00167$
      00050E                       1450 00133$:
                                   1451 ;	life.c:112: if (u[y][x]) n--;
      00050E EF               [12] 1452 	mov	a,r7
      00050F C4               [12] 1453 	swap	a
      000510 23               [12] 1454 	rl	a
      000511 54 E0            [12] 1455 	anl	a,#0xe0
      000513 CE               [12] 1456 	xch	a,r6
      000514 C4               [12] 1457 	swap	a
      000515 23               [12] 1458 	rl	a
      000516 CE               [12] 1459 	xch	a,r6
      000517 6E               [12] 1460 	xrl	a,r6
      000518 CE               [12] 1461 	xch	a,r6
      000519 54 E0            [12] 1462 	anl	a,#0xe0
      00051B CE               [12] 1463 	xch	a,r6
      00051C 6E               [12] 1464 	xrl	a,r6
      00051D FF               [12] 1465 	mov	r7,a
      00051E EE               [12] 1466 	mov	a,r6
      00051F 24r04            [12] 1467 	add	a,#_u
      000521 FE               [12] 1468 	mov	r6,a
      000522 EF               [12] 1469 	mov	a,r7
      000523 34s04            [12] 1470 	addc	a,#(_u >> 8)
      000525 FF               [12] 1471 	mov	r7,a
      000526 90r0Cr04         [24] 1472 	mov	dptr,#_x
      000529 E0               [24] 1473 	movx	a,@dptr
      00052A FC               [12] 1474 	mov	r4,a
      00052B A3               [24] 1475 	inc	dptr
      00052C E0               [24] 1476 	movx	a,@dptr
      00052D FD               [12] 1477 	mov	r5,a
      00052E EC               [12] 1478 	mov	a,r4
      00052F 2E               [12] 1479 	add	a,r6
      000530 FE               [12] 1480 	mov	r6,a
      000531 ED               [12] 1481 	mov	a,r5
      000532 3F               [12] 1482 	addc	a,r7
      000533 FF               [12] 1483 	mov	r7,a
      000534 8E 82            [24] 1484 	mov	dpl,r6
      000536 8F 83            [24] 1485 	mov	dph,r7
      000538 E0               [24] 1486 	movx	a,@dptr
      000539 60 14            [24] 1487 	jz	00135$
      00053B 90r0Cr0C         [24] 1488 	mov	dptr,#_n
      00053E E0               [24] 1489 	movx	a,@dptr
      00053F 24 FF            [12] 1490 	add	a,#0xff
      000541 FE               [12] 1491 	mov	r6,a
      000542 A3               [24] 1492 	inc	dptr
      000543 E0               [24] 1493 	movx	a,@dptr
      000544 34 FF            [12] 1494 	addc	a,#0xff
      000546 FF               [12] 1495 	mov	r7,a
      000547 90r0Cr0C         [24] 1496 	mov	dptr,#_n
      00054A EE               [12] 1497 	mov	a,r6
      00054B F0               [24] 1498 	movx	@dptr,a
      00054C EF               [12] 1499 	mov	a,r7
      00054D A3               [24] 1500 	inc	dptr
      00054E F0               [24] 1501 	movx	@dptr,a
      00054F                       1502 00135$:
                                   1503 ;	life.c:113: nu[y][x] = (n == 3 || (n == 2 && u[y][x]));
      00054F 90r0Cr06         [24] 1504 	mov	dptr,#_y
      000552 E0               [24] 1505 	movx	a,@dptr
      000553 FE               [12] 1506 	mov	r6,a
      000554 A3               [24] 1507 	inc	dptr
      000555 E0               [24] 1508 	movx	a,@dptr
      000556 C4               [12] 1509 	swap	a
      000557 23               [12] 1510 	rl	a
      000558 54 E0            [12] 1511 	anl	a,#0xe0
      00055A CE               [12] 1512 	xch	a,r6
      00055B C4               [12] 1513 	swap	a
      00055C 23               [12] 1514 	rl	a
      00055D CE               [12] 1515 	xch	a,r6
      00055E 6E               [12] 1516 	xrl	a,r6
      00055F CE               [12] 1517 	xch	a,r6
      000560 54 E0            [12] 1518 	anl	a,#0xe0
      000562 CE               [12] 1519 	xch	a,r6
      000563 6E               [12] 1520 	xrl	a,r6
      000564 FF               [12] 1521 	mov	r7,a
      000565 EE               [12] 1522 	mov	a,r6
      000566 24r04            [12] 1523 	add	a,#_nu
      000568 FC               [12] 1524 	mov	r4,a
      000569 EF               [12] 1525 	mov	a,r7
      00056A 34s08            [12] 1526 	addc	a,#(_nu >> 8)
      00056C FD               [12] 1527 	mov	r5,a
      00056D 90r0Cr04         [24] 1528 	mov	dptr,#_x
      000570 E0               [24] 1529 	movx	a,@dptr
      000571 FA               [12] 1530 	mov	r2,a
      000572 A3               [24] 1531 	inc	dptr
      000573 E0               [24] 1532 	movx	a,@dptr
      000574 FB               [12] 1533 	mov	r3,a
      000575 EA               [12] 1534 	mov	a,r2
      000576 2C               [12] 1535 	add	a,r4
      000577 FC               [12] 1536 	mov	r4,a
      000578 EB               [12] 1537 	mov	a,r3
      000579 3D               [12] 1538 	addc	a,r5
      00057A FD               [12] 1539 	mov	r5,a
      00057B 90r0Cr0C         [24] 1540 	mov	dptr,#_n
      00057E E0               [24] 1541 	movx	a,@dptr
      00057F F8               [12] 1542 	mov	r0,a
      000580 A3               [24] 1543 	inc	dptr
      000581 E0               [24] 1544 	movx	a,@dptr
      000582 F9               [12] 1545 	mov	r1,a
      000583 B8 03 05         [24] 1546 	cjne	r0,#0x03,00388$
      000586 B9 00 02         [24] 1547 	cjne	r1,#0x00,00388$
      000589 80 1F            [24] 1548 	sjmp	00186$
      00058B                       1549 00388$:
      00058B B8 02 18         [24] 1550 	cjne	r0,#0x02,00185$
      00058E B9 00 15         [24] 1551 	cjne	r1,#0x00,00185$
      000591 EE               [12] 1552 	mov	a,r6
      000592 24r04            [12] 1553 	add	a,#_u
      000594 FE               [12] 1554 	mov	r6,a
      000595 EF               [12] 1555 	mov	a,r7
      000596 34s04            [12] 1556 	addc	a,#(_u >> 8)
      000598 FF               [12] 1557 	mov	r7,a
      000599 EA               [12] 1558 	mov	a,r2
      00059A 2E               [12] 1559 	add	a,r6
      00059B FA               [12] 1560 	mov	r2,a
      00059C EB               [12] 1561 	mov	a,r3
      00059D 3F               [12] 1562 	addc	a,r7
      00059E FB               [12] 1563 	mov	r3,a
      00059F 8A 82            [24] 1564 	mov	dpl,r2
      0005A1 8B 83            [24] 1565 	mov	dph,r3
      0005A3 E0               [24] 1566 	movx	a,@dptr
      0005A4 70 04            [24] 1567 	jnz	00186$
      0005A6                       1568 00185$:
                                   1569 ;	assignBit
      0005A6 C2*00            [12] 1570 	clr	b0
      0005A8 80 02            [24] 1571 	sjmp	00187$
      0005AA                       1572 00186$:
                                   1573 ;	assignBit
      0005AA D2*00            [12] 1574 	setb	b0
      0005AC                       1575 00187$:
      0005AC A2*00            [12] 1576 	mov	c,b0
      0005AE E4               [12] 1577 	clr	a
      0005AF 33               [12] 1578 	rlc	a
      0005B0 8C 82            [24] 1579 	mov	dpl,r4
      0005B2 8D 83            [24] 1580 	mov	dph,r5
      0005B4 F0               [24] 1581 	movx	@dptr,a
                                   1582 ;	life.c:105: for (x = 0; x < W; x++) {
      0005B5 90r0Cr04         [24] 1583 	mov	dptr,#_x
      0005B8 E0               [24] 1584 	movx	a,@dptr
      0005B9 24 01            [12] 1585 	add	a,#0x01
      0005BB F0               [24] 1586 	movx	@dptr,a
      0005BC A3               [24] 1587 	inc	dptr
      0005BD E0               [24] 1588 	movx	a,@dptr
      0005BE 34 00            [12] 1589 	addc	a,#0x00
      0005C0 F0               [24] 1590 	movx	@dptr,a
      0005C1 90r0Cr04         [24] 1591 	mov	dptr,#_x
      0005C4 E0               [24] 1592 	movx	a,@dptr
      0005C5 FE               [12] 1593 	mov	r6,a
      0005C6 A3               [24] 1594 	inc	dptr
      0005C7 E0               [24] 1595 	movx	a,@dptr
      0005C8 FF               [12] 1596 	mov	r7,a
      0005C9 C3               [12] 1597 	clr	c
      0005CA EE               [12] 1598 	mov	a,r6
      0005CB 94 20            [12] 1599 	subb	a,#0x20
      0005CD EF               [12] 1600 	mov	a,r7
      0005CE 64 80            [12] 1601 	xrl	a,#0x80
      0005D0 94 80            [12] 1602 	subb	a,#0x80
      0005D2 50 03            [24] 1603 	jnc	00392$
      0005D4 02r03rEC         [24] 1604 	ljmp	00169$
      0005D7                       1605 00392$:
                                   1606 ;	life.c:104: for (y = 0; y < H; y++) {
      0005D7 90r0Cr06         [24] 1607 	mov	dptr,#_y
      0005DA E0               [24] 1608 	movx	a,@dptr
      0005DB 24 01            [12] 1609 	add	a,#0x01
      0005DD F0               [24] 1610 	movx	@dptr,a
      0005DE A3               [24] 1611 	inc	dptr
      0005DF E0               [24] 1612 	movx	a,@dptr
      0005E0 34 00            [12] 1613 	addc	a,#0x00
      0005E2 F0               [24] 1614 	movx	@dptr,a
      0005E3 90r0Cr06         [24] 1615 	mov	dptr,#_y
      0005E6 E0               [24] 1616 	movx	a,@dptr
      0005E7 FE               [12] 1617 	mov	r6,a
      0005E8 A3               [24] 1618 	inc	dptr
      0005E9 E0               [24] 1619 	movx	a,@dptr
      0005EA FF               [12] 1620 	mov	r7,a
      0005EB C3               [12] 1621 	clr	c
      0005EC EE               [12] 1622 	mov	a,r6
      0005ED 94 20            [12] 1623 	subb	a,#0x20
      0005EF EF               [12] 1624 	mov	a,r7
      0005F0 64 80            [12] 1625 	xrl	a,#0x80
      0005F2 94 80            [12] 1626 	subb	a,#0x80
      0005F4 50 03            [24] 1627 	jnc	00393$
      0005F6 02r03rE5         [24] 1628 	ljmp	00171$
      0005F9                       1629 00393$:
                                   1630 ;	life.c:117: for (y = 0; y < H; y++)
      0005F9 90r0Cr06         [24] 1631 	mov	dptr,#_y
      0005FC E4               [12] 1632 	clr	a
      0005FD F0               [24] 1633 	movx	@dptr,a
      0005FE A3               [24] 1634 	inc	dptr
      0005FF F0               [24] 1635 	movx	@dptr,a
      000600                       1636 00175$:
                                   1637 ;	life.c:118: for (x = 0; x < W; x++) {
      000600 90r0Cr04         [24] 1638 	mov	dptr,#_x
      000603 E4               [12] 1639 	clr	a
      000604 F0               [24] 1640 	movx	@dptr,a
      000605 A3               [24] 1641 	inc	dptr
      000606 F0               [24] 1642 	movx	@dptr,a
      000607                       1643 00173$:
                                   1644 ;	life.c:119: if (pu[y][x] != nu[y][x]) cycle2 = 0;
      000607 90r0Cr06         [24] 1645 	mov	dptr,#_y
      00060A E0               [24] 1646 	movx	a,@dptr
      00060B FE               [12] 1647 	mov	r6,a
      00060C A3               [24] 1648 	inc	dptr
      00060D E0               [24] 1649 	movx	a,@dptr
      00060E C4               [12] 1650 	swap	a
      00060F 23               [12] 1651 	rl	a
      000610 54 E0            [12] 1652 	anl	a,#0xe0
      000612 CE               [12] 1653 	xch	a,r6
      000613 C4               [12] 1654 	swap	a
      000614 23               [12] 1655 	rl	a
      000615 CE               [12] 1656 	xch	a,r6
      000616 6E               [12] 1657 	xrl	a,r6
      000617 CE               [12] 1658 	xch	a,r6
      000618 54 E0            [12] 1659 	anl	a,#0xe0
      00061A CE               [12] 1660 	xch	a,r6
      00061B 6E               [12] 1661 	xrl	a,r6
      00061C FF               [12] 1662 	mov	r7,a
      00061D EE               [12] 1663 	mov	a,r6
      00061E 24r04            [12] 1664 	add	a,#_pu
      000620 FC               [12] 1665 	mov	r4,a
      000621 EF               [12] 1666 	mov	a,r7
      000622 34s00            [12] 1667 	addc	a,#(_pu >> 8)
      000624 FD               [12] 1668 	mov	r5,a
      000625 90r0Cr04         [24] 1669 	mov	dptr,#_x
      000628 E0               [24] 1670 	movx	a,@dptr
      000629 FA               [12] 1671 	mov	r2,a
      00062A A3               [24] 1672 	inc	dptr
      00062B E0               [24] 1673 	movx	a,@dptr
      00062C FB               [12] 1674 	mov	r3,a
      00062D EA               [12] 1675 	mov	a,r2
      00062E 2C               [12] 1676 	add	a,r4
      00062F F5 82            [12] 1677 	mov	dpl,a
      000631 EB               [12] 1678 	mov	a,r3
      000632 3D               [12] 1679 	addc	a,r5
      000633 F5 83            [12] 1680 	mov	dph,a
      000635 EE               [12] 1681 	mov	a,r6
      000636 24r04            [12] 1682 	add	a,#_nu
      000638 FE               [12] 1683 	mov	r6,a
      000639 EF               [12] 1684 	mov	a,r7
      00063A 34s08            [12] 1685 	addc	a,#(_nu >> 8)
      00063C FF               [12] 1686 	mov	r7,a
      00063D EA               [12] 1687 	mov	a,r2
      00063E 2E               [12] 1688 	add	a,r6
      00063F FA               [12] 1689 	mov	r2,a
      000640 EB               [12] 1690 	mov	a,r3
      000641 3F               [12] 1691 	addc	a,r7
      000642 FB               [12] 1692 	mov	r3,a
      000643 E0               [24] 1693 	movx	a,@dptr
      000644 FF               [12] 1694 	mov	r7,a
      000645 8A 82            [24] 1695 	mov	dpl,r2
      000647 8B 83            [24] 1696 	mov	dph,r3
      000649 E0               [24] 1697 	movx	a,@dptr
      00064A FA               [12] 1698 	mov	r2,a
      00064B EF               [12] 1699 	mov	a,r7
      00064C B5 02 02         [24] 1700 	cjne	a,ar2,00394$
      00064F 80 07            [24] 1701 	sjmp	00139$
      000651                       1702 00394$:
      000651 90r0Cr1A         [24] 1703 	mov	dptr,#_cycle2
      000654 E4               [12] 1704 	clr	a
      000655 F0               [24] 1705 	movx	@dptr,a
      000656 A3               [24] 1706 	inc	dptr
      000657 F0               [24] 1707 	movx	@dptr,a
      000658                       1708 00139$:
                                   1709 ;	life.c:120: if (u[y][x] != nu[y][x]) fixed = 0;
      000658 90r0Cr06         [24] 1710 	mov	dptr,#_y
      00065B E0               [24] 1711 	movx	a,@dptr
      00065C FE               [12] 1712 	mov	r6,a
      00065D A3               [24] 1713 	inc	dptr
      00065E E0               [24] 1714 	movx	a,@dptr
      00065F C4               [12] 1715 	swap	a
      000660 23               [12] 1716 	rl	a
      000661 54 E0            [12] 1717 	anl	a,#0xe0
      000663 CE               [12] 1718 	xch	a,r6
      000664 C4               [12] 1719 	swap	a
      000665 23               [12] 1720 	rl	a
      000666 CE               [12] 1721 	xch	a,r6
      000667 6E               [12] 1722 	xrl	a,r6
      000668 CE               [12] 1723 	xch	a,r6
      000669 54 E0            [12] 1724 	anl	a,#0xe0
      00066B CE               [12] 1725 	xch	a,r6
      00066C 6E               [12] 1726 	xrl	a,r6
      00066D FF               [12] 1727 	mov	r7,a
      00066E EE               [12] 1728 	mov	a,r6
      00066F 24r04            [12] 1729 	add	a,#_u
      000671 FC               [12] 1730 	mov	r4,a
      000672 EF               [12] 1731 	mov	a,r7
      000673 34s04            [12] 1732 	addc	a,#(_u >> 8)
      000675 FD               [12] 1733 	mov	r5,a
      000676 90r0Cr04         [24] 1734 	mov	dptr,#_x
      000679 E0               [24] 1735 	movx	a,@dptr
      00067A FA               [12] 1736 	mov	r2,a
      00067B A3               [24] 1737 	inc	dptr
      00067C E0               [24] 1738 	movx	a,@dptr
      00067D FB               [12] 1739 	mov	r3,a
      00067E EA               [12] 1740 	mov	a,r2
      00067F 2C               [12] 1741 	add	a,r4
      000680 F5 82            [12] 1742 	mov	dpl,a
      000682 EB               [12] 1743 	mov	a,r3
      000683 3D               [12] 1744 	addc	a,r5
      000684 F5 83            [12] 1745 	mov	dph,a
      000686 EE               [12] 1746 	mov	a,r6
      000687 24r04            [12] 1747 	add	a,#_nu
      000689 FE               [12] 1748 	mov	r6,a
      00068A EF               [12] 1749 	mov	a,r7
      00068B 34s08            [12] 1750 	addc	a,#(_nu >> 8)
      00068D FF               [12] 1751 	mov	r7,a
      00068E EA               [12] 1752 	mov	a,r2
      00068F 2E               [12] 1753 	add	a,r6
      000690 FA               [12] 1754 	mov	r2,a
      000691 EB               [12] 1755 	mov	a,r3
      000692 3F               [12] 1756 	addc	a,r7
      000693 FB               [12] 1757 	mov	r3,a
      000694 E0               [24] 1758 	movx	a,@dptr
      000695 FF               [12] 1759 	mov	r7,a
      000696 8A 82            [24] 1760 	mov	dpl,r2
      000698 8B 83            [24] 1761 	mov	dph,r3
      00069A E0               [24] 1762 	movx	a,@dptr
      00069B FA               [12] 1763 	mov	r2,a
      00069C EF               [12] 1764 	mov	a,r7
      00069D B5 02 02         [24] 1765 	cjne	a,ar2,00395$
      0006A0 80 07            [24] 1766 	sjmp	00141$
      0006A2                       1767 00395$:
      0006A2 90r0Cr18         [24] 1768 	mov	dptr,#_fixed
      0006A5 E4               [12] 1769 	clr	a
      0006A6 F0               [24] 1770 	movx	@dptr,a
      0006A7 A3               [24] 1771 	inc	dptr
      0006A8 F0               [24] 1772 	movx	@dptr,a
      0006A9                       1773 00141$:
                                   1774 ;	life.c:121: pu[y][x] = u[y][x];
      0006A9 90r0Cr06         [24] 1775 	mov	dptr,#_y
      0006AC E0               [24] 1776 	movx	a,@dptr
      0006AD FE               [12] 1777 	mov	r6,a
      0006AE A3               [24] 1778 	inc	dptr
      0006AF E0               [24] 1779 	movx	a,@dptr
      0006B0 C4               [12] 1780 	swap	a
      0006B1 23               [12] 1781 	rl	a
      0006B2 54 E0            [12] 1782 	anl	a,#0xe0
      0006B4 CE               [12] 1783 	xch	a,r6
      0006B5 C4               [12] 1784 	swap	a
      0006B6 23               [12] 1785 	rl	a
      0006B7 CE               [12] 1786 	xch	a,r6
      0006B8 6E               [12] 1787 	xrl	a,r6
      0006B9 CE               [12] 1788 	xch	a,r6
      0006BA 54 E0            [12] 1789 	anl	a,#0xe0
      0006BC CE               [12] 1790 	xch	a,r6
      0006BD 6E               [12] 1791 	xrl	a,r6
      0006BE FF               [12] 1792 	mov	r7,a
      0006BF EE               [12] 1793 	mov	a,r6
      0006C0 24r04            [12] 1794 	add	a,#_pu
      0006C2 FC               [12] 1795 	mov	r4,a
      0006C3 EF               [12] 1796 	mov	a,r7
      0006C4 34s00            [12] 1797 	addc	a,#(_pu >> 8)
      0006C6 FD               [12] 1798 	mov	r5,a
      0006C7 90r0Cr04         [24] 1799 	mov	dptr,#_x
      0006CA E0               [24] 1800 	movx	a,@dptr
      0006CB FA               [12] 1801 	mov	r2,a
      0006CC A3               [24] 1802 	inc	dptr
      0006CD E0               [24] 1803 	movx	a,@dptr
      0006CE FB               [12] 1804 	mov	r3,a
      0006CF EA               [12] 1805 	mov	a,r2
      0006D0 2C               [12] 1806 	add	a,r4
      0006D1 FC               [12] 1807 	mov	r4,a
      0006D2 EB               [12] 1808 	mov	a,r3
      0006D3 3D               [12] 1809 	addc	a,r5
      0006D4 FD               [12] 1810 	mov	r5,a
      0006D5 EE               [12] 1811 	mov	a,r6
      0006D6 24r04            [12] 1812 	add	a,#_u
      0006D8 FE               [12] 1813 	mov	r6,a
      0006D9 EF               [12] 1814 	mov	a,r7
      0006DA 34s04            [12] 1815 	addc	a,#(_u >> 8)
      0006DC FF               [12] 1816 	mov	r7,a
      0006DD EA               [12] 1817 	mov	a,r2
      0006DE 2E               [12] 1818 	add	a,r6
      0006DF F5 82            [12] 1819 	mov	dpl,a
      0006E1 EB               [12] 1820 	mov	a,r3
      0006E2 3F               [12] 1821 	addc	a,r7
      0006E3 F5 83            [12] 1822 	mov	dph,a
      0006E5 E0               [24] 1823 	movx	a,@dptr
      0006E6 8C 82            [24] 1824 	mov	dpl,r4
      0006E8 8D 83            [24] 1825 	mov	dph,r5
      0006EA F0               [24] 1826 	movx	@dptr,a
                                   1827 ;	life.c:122: u[y][x] = nu[y][x];
      0006EB 90r0Cr06         [24] 1828 	mov	dptr,#_y
      0006EE E0               [24] 1829 	movx	a,@dptr
      0006EF FE               [12] 1830 	mov	r6,a
      0006F0 A3               [24] 1831 	inc	dptr
      0006F1 E0               [24] 1832 	movx	a,@dptr
      0006F2 C4               [12] 1833 	swap	a
      0006F3 23               [12] 1834 	rl	a
      0006F4 54 E0            [12] 1835 	anl	a,#0xe0
      0006F6 CE               [12] 1836 	xch	a,r6
      0006F7 C4               [12] 1837 	swap	a
      0006F8 23               [12] 1838 	rl	a
      0006F9 CE               [12] 1839 	xch	a,r6
      0006FA 6E               [12] 1840 	xrl	a,r6
      0006FB CE               [12] 1841 	xch	a,r6
      0006FC 54 E0            [12] 1842 	anl	a,#0xe0
      0006FE CE               [12] 1843 	xch	a,r6
      0006FF 6E               [12] 1844 	xrl	a,r6
      000700 FF               [12] 1845 	mov	r7,a
      000701 EE               [12] 1846 	mov	a,r6
      000702 24r04            [12] 1847 	add	a,#_u
      000704 FC               [12] 1848 	mov	r4,a
      000705 EF               [12] 1849 	mov	a,r7
      000706 34s04            [12] 1850 	addc	a,#(_u >> 8)
      000708 FD               [12] 1851 	mov	r5,a
      000709 90r0Cr04         [24] 1852 	mov	dptr,#_x
      00070C E0               [24] 1853 	movx	a,@dptr
      00070D FA               [12] 1854 	mov	r2,a
      00070E A3               [24] 1855 	inc	dptr
      00070F E0               [24] 1856 	movx	a,@dptr
      000710 FB               [12] 1857 	mov	r3,a
      000711 EA               [12] 1858 	mov	a,r2
      000712 2C               [12] 1859 	add	a,r4
      000713 FC               [12] 1860 	mov	r4,a
      000714 EB               [12] 1861 	mov	a,r3
      000715 3D               [12] 1862 	addc	a,r5
      000716 FD               [12] 1863 	mov	r5,a
      000717 EE               [12] 1864 	mov	a,r6
      000718 24r04            [12] 1865 	add	a,#_nu
      00071A FE               [12] 1866 	mov	r6,a
      00071B EF               [12] 1867 	mov	a,r7
      00071C 34s08            [12] 1868 	addc	a,#(_nu >> 8)
      00071E FF               [12] 1869 	mov	r7,a
      00071F EA               [12] 1870 	mov	a,r2
      000720 2E               [12] 1871 	add	a,r6
      000721 F5 82            [12] 1872 	mov	dpl,a
      000723 EB               [12] 1873 	mov	a,r3
      000724 3F               [12] 1874 	addc	a,r7
      000725 F5 83            [12] 1875 	mov	dph,a
      000727 E0               [24] 1876 	movx	a,@dptr
      000728 8C 82            [24] 1877 	mov	dpl,r4
      00072A 8D 83            [24] 1878 	mov	dph,r5
      00072C F0               [24] 1879 	movx	@dptr,a
                                   1880 ;	life.c:118: for (x = 0; x < W; x++) {
      00072D 90r0Cr04         [24] 1881 	mov	dptr,#_x
      000730 E0               [24] 1882 	movx	a,@dptr
      000731 24 01            [12] 1883 	add	a,#0x01
      000733 F0               [24] 1884 	movx	@dptr,a
      000734 A3               [24] 1885 	inc	dptr
      000735 E0               [24] 1886 	movx	a,@dptr
      000736 34 00            [12] 1887 	addc	a,#0x00
      000738 F0               [24] 1888 	movx	@dptr,a
      000739 90r0Cr04         [24] 1889 	mov	dptr,#_x
      00073C E0               [24] 1890 	movx	a,@dptr
      00073D FE               [12] 1891 	mov	r6,a
      00073E A3               [24] 1892 	inc	dptr
      00073F E0               [24] 1893 	movx	a,@dptr
      000740 FF               [12] 1894 	mov	r7,a
      000741 C3               [12] 1895 	clr	c
      000742 EE               [12] 1896 	mov	a,r6
      000743 94 20            [12] 1897 	subb	a,#0x20
      000745 EF               [12] 1898 	mov	a,r7
      000746 64 80            [12] 1899 	xrl	a,#0x80
      000748 94 80            [12] 1900 	subb	a,#0x80
      00074A 50 03            [24] 1901 	jnc	00396$
      00074C 02r06r07         [24] 1902 	ljmp	00173$
      00074F                       1903 00396$:
                                   1904 ;	life.c:117: for (y = 0; y < H; y++)
      00074F 90r0Cr06         [24] 1905 	mov	dptr,#_y
      000752 E0               [24] 1906 	movx	a,@dptr
      000753 24 01            [12] 1907 	add	a,#0x01
      000755 F0               [24] 1908 	movx	@dptr,a
      000756 A3               [24] 1909 	inc	dptr
      000757 E0               [24] 1910 	movx	a,@dptr
      000758 34 00            [12] 1911 	addc	a,#0x00
      00075A F0               [24] 1912 	movx	@dptr,a
      00075B 90r0Cr06         [24] 1913 	mov	dptr,#_y
      00075E E0               [24] 1914 	movx	a,@dptr
      00075F FE               [12] 1915 	mov	r6,a
      000760 A3               [24] 1916 	inc	dptr
      000761 E0               [24] 1917 	movx	a,@dptr
      000762 FF               [12] 1918 	mov	r7,a
      000763 C3               [12] 1919 	clr	c
      000764 EE               [12] 1920 	mov	a,r6
      000765 94 20            [12] 1921 	subb	a,#0x20
      000767 EF               [12] 1922 	mov	a,r7
      000768 64 80            [12] 1923 	xrl	a,#0x80
      00076A 94 80            [12] 1924 	subb	a,#0x80
      00076C 50 03            [24] 1925 	jnc	00397$
      00076E 02r06r00         [24] 1926 	ljmp	00175$
      000771                       1927 00397$:
                                   1928 ;	life.c:148: if (fixed || cycle2) {
      000771 90r0Cr18         [24] 1929 	mov	dptr,#_fixed
      000774 E0               [24] 1930 	movx	a,@dptr
      000775 F5 F0            [12] 1931 	mov	b,a
      000777 A3               [24] 1932 	inc	dptr
      000778 E0               [24] 1933 	movx	a,@dptr
      000779 45 F0            [12] 1934 	orl	a,b
      00077B 70 0F            [24] 1935 	jnz	00101$
      00077D 90r0Cr1A         [24] 1936 	mov	dptr,#_cycle2
      000780 E0               [24] 1937 	movx	a,@dptr
      000781 F5 F0            [12] 1938 	mov	b,a
      000783 A3               [24] 1939 	inc	dptr
      000784 E0               [24] 1940 	movx	a,@dptr
      000785 45 F0            [12] 1941 	orl	a,b
      000787 70 03            [24] 1942 	jnz	00399$
      000789 02r01rCC         [24] 1943 	ljmp	00179$
      00078C                       1944 00399$:
      00078C                       1945 00101$:
                                   1946 ;	life.c:149: printf("DONE\n\r");
      00078C 74r32            [12] 1947 	mov	a,#___str_7
      00078E C0 E0            [24] 1948 	push	acc
      000790 74s00            [12] 1949 	mov	a,#(___str_7 >> 8)
      000792 C0 E0            [24] 1950 	push	acc
      000794 74 80            [12] 1951 	mov	a,#0x80
      000796 C0 E0            [24] 1952 	push	acc
      000798 12r00r00         [24] 1953 	lcall	_printf
      00079B 15 81            [12] 1954 	dec	sp
      00079D 15 81            [12] 1955 	dec	sp
      00079F 15 81            [12] 1956 	dec	sp
                                   1957 ;	life.c:150: (void)getchar();
      0007A1 12r00r05         [24] 1958 	lcall	_getchar
                                   1959 ;	life.c:151: break;
      0007A4                       1960 00104$:
                                   1961 ;	life.c:155: if (i1) {
      0007A4 90r00r02         [24] 1962 	mov	dptr,#_i1
      0007A7 E0               [24] 1963 	movx	a,@dptr
      0007A8 F5 F0            [12] 1964 	mov	b,a
      0007AA A3               [24] 1965 	inc	dptr
      0007AB E0               [24] 1966 	movx	a,@dptr
      0007AC 45 F0            [12] 1967 	orl	a,b
      0007AE 60 18            [24] 1968 	jz	00182$
                                   1969 ;	life.c:156: printf("BREAK\n\r");
      0007B0 74r39            [12] 1970 	mov	a,#___str_8
      0007B2 C0 E0            [24] 1971 	push	acc
      0007B4 74s00            [12] 1972 	mov	a,#(___str_8 >> 8)
      0007B6 C0 E0            [24] 1973 	push	acc
      0007B8 74 80            [12] 1974 	mov	a,#0x80
      0007BA C0 E0            [24] 1975 	push	acc
      0007BC 12r00r00         [24] 1976 	lcall	_printf
      0007BF 15 81            [12] 1977 	dec	sp
      0007C1 15 81            [12] 1978 	dec	sp
      0007C3 15 81            [12] 1979 	dec	sp
                                   1980 ;	life.c:157: (void)getchar();
      0007C5 12r00r05         [24] 1981 	lcall	_getchar
      0007C8                       1982 00182$:
                                   1983 ;	life.c:135: for (i0 = 0; !i0; ) {
      0007C8 90r00r00         [24] 1984 	mov	dptr,#_i0
      0007CB E0               [24] 1985 	movx	a,@dptr
      0007CC F5 F0            [12] 1986 	mov	b,a
      0007CE A3               [24] 1987 	inc	dptr
      0007CF E0               [24] 1988 	movx	a,@dptr
      0007D0 45 F0            [12] 1989 	orl	a,b
      0007D2 70 03            [24] 1990 	jnz	00401$
      0007D4 02r00r50         [24] 1991 	ljmp	00181$
      0007D7                       1992 00401$:
                                   1993 ;	life.c:161: EA = 0;
                                   1994 ;	assignBit
      0007D7 C2 AF            [12] 1995 	clr	_EA
                                   1996 ;	life.c:163: printf("TERM\n\r");
      0007D9 74r41            [12] 1997 	mov	a,#___str_9
      0007DB C0 E0            [24] 1998 	push	acc
      0007DD 74s00            [12] 1999 	mov	a,#(___str_9 >> 8)
      0007DF C0 E0            [24] 2000 	push	acc
      0007E1 74 80            [12] 2001 	mov	a,#0x80
      0007E3 C0 E0            [24] 2002 	push	acc
      0007E5 12r00r00         [24] 2003 	lcall	_printf
      0007E8 15 81            [12] 2004 	dec	sp
      0007EA 15 81            [12] 2005 	dec	sp
      0007EC 15 81            [12] 2006 	dec	sp
                                   2007 ;	life.c:164: (void)getchar();
      0007EE 12r00r05         [24] 2008 	lcall	_getchar
                                   2009 ;	life.c:168: __endasm;
      0007F1 02 00 00         [24] 2010 	ljmp	0
                                   2011 ;	life.c:169: }
      0007F4 22               [24] 2012 	ret
                                   2013 	.area CSEG    (CODE)
                                   2014 	.area CONST   (CODE)
                                   2015 	.area CONST   (CODE)
      000000                       2016 ___str_0:
      000000 25 30 34 78           2017 	.ascii "%04x"
      000004 00                    2018 	.db 0x00
                                   2019 	.area CSEG    (CODE)
                                   2020 	.area CONST   (CODE)
      000005                       2021 ___str_1:
      000005 1B                    2022 	.db 0x1b
      000006 5B 32 4A              2023 	.ascii "[2J"
      000009 1B                    2024 	.db 0x1b
      00000A 5B 6D                 2025 	.ascii "[m"
      00000C 00                    2026 	.db 0x00
                                   2027 	.area CSEG    (CODE)
                                   2028 	.area CONST   (CODE)
      00000D                       2029 ___str_2:
      00000D 0D                    2030 	.db 0x0d
      00000E 0A                    2031 	.db 0x0a
      00000F 00                    2032 	.db 0x00
                                   2033 	.area CSEG    (CODE)
                                   2034 	.area CONST   (CODE)
      000010                       2035 ___str_3:
      000010 1B                    2036 	.db 0x1b
      000011 5B 30 31 6D 5B 5D     2037 	.ascii "[01m[]"
      000017 1B                    2038 	.db 0x1b
      000018 5B 6D                 2039 	.ascii "[m"
      00001A 00                    2040 	.db 0x00
                                   2041 	.area CSEG    (CODE)
                                   2042 	.area CONST   (CODE)
      00001B                       2043 ___str_4:
      00001B 2D 2D                 2044 	.ascii "--"
      00001D 00                    2045 	.db 0x00
                                   2046 	.area CSEG    (CODE)
                                   2047 	.area CONST   (CODE)
      00001E                       2048 ___str_5:
      00001E 1B                    2049 	.db 0x1b
      00001F 5B 32 4A              2050 	.ascii "[2J"
      000022 1B                    2051 	.db 0x1b
      000023 5B 6D 49 4E 49 54     2052 	.ascii "[mINIT"
      000029 0A                    2053 	.db 0x0a
      00002A 0D                    2054 	.db 0x0d
      00002B 00                    2055 	.db 0x00
                                   2056 	.area CSEG    (CODE)
                                   2057 	.area CONST   (CODE)
      00002C                       2058 ___str_6:
      00002C 52 44 59              2059 	.ascii "RDY"
      00002F 0A                    2060 	.db 0x0a
      000030 0D                    2061 	.db 0x0d
      000031 00                    2062 	.db 0x00
                                   2063 	.area CSEG    (CODE)
                                   2064 	.area CONST   (CODE)
      000032                       2065 ___str_7:
      000032 44 4F 4E 45           2066 	.ascii "DONE"
      000036 0A                    2067 	.db 0x0a
      000037 0D                    2068 	.db 0x0d
      000038 00                    2069 	.db 0x00
                                   2070 	.area CSEG    (CODE)
                                   2071 	.area CONST   (CODE)
      000039                       2072 ___str_8:
      000039 42 52 45 41 4B        2073 	.ascii "BREAK"
      00003E 0A                    2074 	.db 0x0a
      00003F 0D                    2075 	.db 0x0d
      000040 00                    2076 	.db 0x00
                                   2077 	.area CSEG    (CODE)
                                   2078 	.area CONST   (CODE)
      000041                       2079 ___str_9:
      000041 54 45 52 4D           2080 	.ascii "TERM"
      000045 0A                    2081 	.db 0x0a
      000046 0D                    2082 	.db 0x0d
      000047 00                    2083 	.db 0x00
                                   2084 	.area CSEG    (CODE)
                                   2085 	.area XINIT   (CODE)
                                   2086 	.area CABS    (ABS,CODE)
