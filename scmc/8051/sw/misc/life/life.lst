                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _evolveu
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print32x
                                     16 	.globl _print16x
                                     17 	.globl _printstr
                                     18 	.globl _getchar_poll
                                     19 	.globl _getchar
                                     20 	.globl _putchar
                                     21 	.globl _toupper
                                     22 	.globl ___memcpy
                                     23 	.globl _memset
                                     24 	.globl _srand
                                     25 	.globl _rand
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable bit register bank
                                    291 ;--------------------------------------------------------
                                    292 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        293 bits:
      000000                        294 	.ds 1
                           008000   295 	b0 = bits[0]
                           008100   296 	b1 = bits[1]
                           008200   297 	b2 = bits[2]
                           008300   298 	b3 = bits[3]
                           008400   299 	b4 = bits[4]
                           008500   300 	b5 = bits[5]
                           008600   301 	b6 = bits[6]
                           008700   302 	b7 = bits[7]
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 ;--------------------------------------------------------
                                    311 ; Stack segment in internal ram 
                                    312 ;--------------------------------------------------------
                                    313 	.area	SSEG
      000000                        314 __start__stack:
      000000                        315 	.ds	1
                                    316 
                                    317 ;--------------------------------------------------------
                                    318 ; indirectly addressable internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area ISEG    (DATA)
      000000                        321 _i0:
      000000                        322 	.ds 1
      000001                        323 _i1:
      000001                        324 	.ds 1
      000002                        325 _OE76:
      000002                        326 	.ds 1
      000003                        327 _gen:
      000003                        328 	.ds 4
      000007                        329 _genc2:
      000007                        330 	.ds 4
      00000B                        331 _genfx:
      00000B                        332 	.ds 4
      00000F                        333 _c2set:
      00000F                        334 	.ds 1
      000010                        335 _fxset:
      000010                        336 	.ds 1
      000011                        337 _pruni:
      000011                        338 	.ds 1
      000012                        339 _fixed:
      000012                        340 	.ds 1
      000013                        341 _cycle2:
      000013                        342 	.ds 1
                                    343 ;--------------------------------------------------------
                                    344 ; absolute internal ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area IABS    (ABS,DATA)
                                    347 	.area IABS    (ABS,DATA)
                                    348 ;--------------------------------------------------------
                                    349 ; bit data
                                    350 ;--------------------------------------------------------
                                    351 	.area BSEG    (BIT)
                                    352 ;--------------------------------------------------------
                                    353 ; paged external ram data
                                    354 ;--------------------------------------------------------
                                    355 	.area PSEG    (PAG,XDATA)
                                    356 ;--------------------------------------------------------
                                    357 ; external ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area XSEG    (XDATA)
                           00E000   360 _RND	=	0xe000
                           00F006   361 _OEreg	=	0xf006
      000000                        362 _iu:
      000000                        363 	.ds 9216
      002400                        364 _pu:
      002400                        365 	.ds 9216
      004800                        366 _u:
      004800                        367 	.ds 9216
      006C00                        368 _nu:
      006C00                        369 	.ds 9216
                                    370 ;--------------------------------------------------------
                                    371 ; absolute external ram data
                                    372 ;--------------------------------------------------------
                                    373 	.area XABS    (ABS,XDATA)
                                    374 ;--------------------------------------------------------
                                    375 ; external initialized ram data
                                    376 ;--------------------------------------------------------
                                    377 	.area XISEG   (XDATA)
                                    378 	.area HOME    (CODE)
                                    379 	.area GSINIT0 (CODE)
                                    380 	.area GSINIT1 (CODE)
                                    381 	.area GSINIT2 (CODE)
                                    382 	.area GSINIT3 (CODE)
                                    383 	.area GSINIT4 (CODE)
                                    384 	.area GSINIT5 (CODE)
                                    385 	.area GSINIT  (CODE)
                                    386 	.area GSFINAL (CODE)
                                    387 	.area CSEG    (CODE)
                                    388 ;--------------------------------------------------------
                                    389 ; interrupt vector 
                                    390 ;--------------------------------------------------------
                                    391 	.area HOME    (CODE)
      000000                        392 __interrupt_vect:
      000000 02r00r00         [24]  393 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  394 	ljmp	_int0
      000006                        395 	.ds	5
      00000B 32               [24]  396 	reti
      00000C                        397 	.ds	7
      000013 02r00r0C         [24]  398 	ljmp	_int1
                                    399 ;--------------------------------------------------------
                                    400 ; global & static initialisations
                                    401 ;--------------------------------------------------------
                                    402 	.area HOME    (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.area GSFINAL (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.globl __sdcc_gsinit_startup
                                    407 	.globl __sdcc_program_startup
                                    408 	.globl __start__stack
                                    409 	.globl __mcs51_genXINIT
                                    410 	.globl __mcs51_genXRAMCLEAR
                                    411 	.globl __mcs51_genRAMCLEAR
                                    412 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  413 	ljmp	__sdcc_program_startup
                                    414 ;--------------------------------------------------------
                                    415 ; Home
                                    416 ;--------------------------------------------------------
                                    417 	.area HOME    (CODE)
                                    418 	.area HOME    (CODE)
      000016                        419 __sdcc_program_startup:
      000016 02r08r84         [24]  420 	ljmp	_main
                                    421 ;	return from main will return to caller
                                    422 ;--------------------------------------------------------
                                    423 ; code
                                    424 ;--------------------------------------------------------
                                    425 	.area CSEG    (CODE)
                                    426 ;------------------------------------------------------------
                                    427 ;Allocation info for local variables in function 'int0'
                                    428 ;------------------------------------------------------------
                                    429 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    430 ;	-----------------------------------------
                                    431 ;	 function int0
                                    432 ;	-----------------------------------------
      000000                        433 _int0:
                           00000F   434 	ar7 = 0x0f
                           00000E   435 	ar6 = 0x0e
                           00000D   436 	ar5 = 0x0d
                           00000C   437 	ar4 = 0x0c
                           00000B   438 	ar3 = 0x0b
                           00000A   439 	ar2 = 0x0a
                           000009   440 	ar1 = 0x09
                           000008   441 	ar0 = 0x08
      000000 C0 D0            [24]  442 	push	psw
      000002 75 D0 08         [24]  443 	mov	psw,#0x08
                                    444 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  445 	mov	r0,#_i0
      000007 76 01            [12]  446 	mov	@r0,#0x01
                                    447 ;	life.c:15: }
      000009 D0 D0            [24]  448 	pop	psw
      00000B 32               [24]  449 	reti
                                    450 ;	eliminated unneeded push/pop dpl
                                    451 ;	eliminated unneeded push/pop dph
                                    452 ;	eliminated unneeded push/pop b
                                    453 ;	eliminated unneeded push/pop acc
                                    454 ;------------------------------------------------------------
                                    455 ;Allocation info for local variables in function 'int1'
                                    456 ;------------------------------------------------------------
                                    457 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    458 ;	-----------------------------------------
                                    459 ;	 function int1
                                    460 ;	-----------------------------------------
      00000C                        461 _int1:
      00000C C0 D0            [24]  462 	push	psw
      00000E 75 D0 08         [24]  463 	mov	psw,#0x08
                                    464 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  465 	mov	r0,#_i1
      000013 76 01            [12]  466 	mov	@r0,#0x01
                                    467 ;	life.c:19: }
      000015 D0 D0            [24]  468 	pop	psw
      000017 32               [24]  469 	reti
                                    470 ;	eliminated unneeded push/pop dpl
                                    471 ;	eliminated unneeded push/pop dph
                                    472 ;	eliminated unneeded push/pop b
                                    473 ;	eliminated unneeded push/pop acc
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'initu'
                                    476 ;------------------------------------------------------------
                                    477 ;	life.c:91: static void initu(void) {
                                    478 ;	-----------------------------------------
                                    479 ;	 function initu
                                    480 ;	-----------------------------------------
      000018                        481 _initu:
                           000007   482 	ar7 = 0x07
                           000006   483 	ar6 = 0x06
                           000005   484 	ar5 = 0x05
                           000004   485 	ar4 = 0x04
                           000003   486 	ar3 = 0x03
                           000002   487 	ar2 = 0x02
                           000001   488 	ar1 = 0x01
                           000000   489 	ar0 = 0x00
                                    490 ;	life.c:92: memcpy(u, iu, sizeof (iu));
      000018 E4               [12]  491 	clr	a
      000019 C0 E0            [24]  492 	push	acc
      00001B 74 24            [12]  493 	mov	a,#0x24
      00001D C0 E0            [24]  494 	push	acc
      00001F 74r00            [12]  495 	mov	a,#_iu
      000021 C0 E0            [24]  496 	push	acc
      000023 74s00            [12]  497 	mov	a,#(_iu >> 8)
      000025 C0 E0            [24]  498 	push	acc
      000027 E4               [12]  499 	clr	a
      000028 C0 E0            [24]  500 	push	acc
      00002A 90r48r00         [24]  501 	mov	dptr,#_u
      00002D 75 F0 00         [24]  502 	mov	b,#0x00
      000030 12r00r00         [24]  503 	lcall	___memcpy
      000033 E5 81            [12]  504 	mov	a,sp
      000035 24 FB            [12]  505 	add	a,#0xfb
      000037 F5 81            [12]  506 	mov	sp,a
                                    507 ;	life.c:93: memset(pu, 0, sizeof (pu));
      000039 E4               [12]  508 	clr	a
      00003A C0 E0            [24]  509 	push	acc
      00003C 74 24            [12]  510 	mov	a,#0x24
      00003E C0 E0            [24]  511 	push	acc
      000040 E4               [12]  512 	clr	a
      000041 C0 E0            [24]  513 	push	acc
      000043 90r24r00         [24]  514 	mov	dptr,#_pu
      000046 75 F0 00         [24]  515 	mov	b,#0x00
      000049 12r00r00         [24]  516 	lcall	_memset
      00004C 15 81            [12]  517 	dec	sp
      00004E 15 81            [12]  518 	dec	sp
      000050 15 81            [12]  519 	dec	sp
                                    520 ;	life.c:43: gen = 0ul;
      000052 78r03            [12]  521 	mov	r0,#_gen
      000054 E4               [12]  522 	clr	a
      000055 F6               [12]  523 	mov	@r0,a
      000056 08               [12]  524 	inc	r0
      000057 F6               [12]  525 	mov	@r0,a
      000058 08               [12]  526 	inc	r0
      000059 F6               [12]  527 	mov	@r0,a
      00005A 08               [12]  528 	inc	r0
      00005B F6               [12]  529 	mov	@r0,a
                                    530 ;	life.c:44: genc2 = 0ul;
      00005C 78r07            [12]  531 	mov	r0,#_genc2
      00005E F6               [12]  532 	mov	@r0,a
      00005F 08               [12]  533 	inc	r0
      000060 F6               [12]  534 	mov	@r0,a
      000061 08               [12]  535 	inc	r0
      000062 F6               [12]  536 	mov	@r0,a
      000063 08               [12]  537 	inc	r0
      000064 F6               [12]  538 	mov	@r0,a
                                    539 ;	life.c:45: genfx = 0ul;
      000065 78r0B            [12]  540 	mov	r0,#_genfx
      000067 F6               [12]  541 	mov	@r0,a
      000068 08               [12]  542 	inc	r0
      000069 F6               [12]  543 	mov	@r0,a
      00006A 08               [12]  544 	inc	r0
      00006B F6               [12]  545 	mov	@r0,a
      00006C 08               [12]  546 	inc	r0
      00006D F6               [12]  547 	mov	@r0,a
                                    548 ;	life.c:46: c2set = 0;
      00006E 78r0F            [12]  549 	mov	r0,#_c2set
      000070 76 00            [12]  550 	mov	@r0,#0x00
                                    551 ;	life.c:47: fxset = 0;
      000072 78r10            [12]  552 	mov	r0,#_fxset
      000074 76 00            [12]  553 	mov	@r0,#0x00
                                    554 ;	life.c:96: return;
                                    555 ;	life.c:97: }
      000076 22               [24]  556 	ret
                                    557 ;------------------------------------------------------------
                                    558 ;Allocation info for local variables in function 'showu'
                                    559 ;------------------------------------------------------------
                                    560 ;universe                  Allocated to stack - _bp -5
                                    561 ;prflags                   Allocated to registers r7 
                                    562 ;x                         Allocated to stack - _bp +1
                                    563 ;y                         Allocated to registers r4 r5 
                                    564 ;------------------------------------------------------------
                                    565 ;	life.c:104: static void showu(char prflags, char *universe) {
                                    566 ;	-----------------------------------------
                                    567 ;	 function showu
                                    568 ;	-----------------------------------------
      000077                        569 _showu:
      000077 C0*00            [24]  570 	push	_bp
      000079 85 81*00         [24]  571 	mov	_bp,sp
      00007C 05 81            [12]  572 	inc	sp
      00007E 05 81            [12]  573 	inc	sp
                                    574 ;	life.c:107: if (prflags & PRCLR) printstr("\033[2J");
      000080 E5 82            [12]  575 	mov	a,dpl
      000082 FF               [12]  576 	mov	r7,a
      000083 30 E0 0D         [24]  577 	jnb	acc.0,00102$
      000086 90r00r00         [24]  578 	mov	dptr,#___str_0
      000089 75 F0 80         [24]  579 	mov	b,#0x80
      00008C C0 07            [24]  580 	push	ar7
      00008E 12r00r00         [24]  581 	lcall	_printstr
      000091 D0 07            [24]  582 	pop	ar7
      000093                        583 00102$:
                                    584 ;	life.c:108: if (prflags & PRHDR) {
      000093 EF               [12]  585 	mov	a,r7
      000094 30 E1 6B         [24]  586 	jnb	acc.1,00108$
                                    587 ;	life.c:109: printstr("GEN ");
      000097 90r00r05         [24]  588 	mov	dptr,#___str_1
      00009A 75 F0 80         [24]  589 	mov	b,#0x80
      00009D C0 07            [24]  590 	push	ar7
      00009F 12r00r00         [24]  591 	lcall	_printstr
                                    592 ;	life.c:110: print32x(gen);
      0000A2 78r03            [12]  593 	mov	r0,#_gen
      0000A4 86 82            [24]  594 	mov	dpl,@r0
      0000A6 08               [12]  595 	inc	r0
      0000A7 86 83            [24]  596 	mov	dph,@r0
      0000A9 08               [12]  597 	inc	r0
      0000AA 86 F0            [24]  598 	mov	b,@r0
      0000AC 08               [12]  599 	inc	r0
      0000AD E6               [12]  600 	mov	a,@r0
      0000AE 12r00r00         [24]  601 	lcall	_print32x
      0000B1 D0 07            [24]  602 	pop	ar7
                                    603 ;	life.c:111: if (c2set) {
      0000B3 78r0F            [12]  604 	mov	r0,#_c2set
      0000B5 E6               [12]  605 	mov	a,@r0
      0000B6 60 1C            [24]  606 	jz	00104$
                                    607 ;	life.c:112: printstr(" CYCLE2 ");
      0000B8 90r00r0A         [24]  608 	mov	dptr,#___str_2
      0000BB 75 F0 80         [24]  609 	mov	b,#0x80
      0000BE C0 07            [24]  610 	push	ar7
      0000C0 12r00r00         [24]  611 	lcall	_printstr
                                    612 ;	life.c:113: print32x(genc2);
      0000C3 78r07            [12]  613 	mov	r0,#_genc2
      0000C5 86 82            [24]  614 	mov	dpl,@r0
      0000C7 08               [12]  615 	inc	r0
      0000C8 86 83            [24]  616 	mov	dph,@r0
      0000CA 08               [12]  617 	inc	r0
      0000CB 86 F0            [24]  618 	mov	b,@r0
      0000CD 08               [12]  619 	inc	r0
      0000CE E6               [12]  620 	mov	a,@r0
      0000CF 12r00r00         [24]  621 	lcall	_print32x
      0000D2 D0 07            [24]  622 	pop	ar7
      0000D4                        623 00104$:
                                    624 ;	life.c:115: if (fxset) {
      0000D4 78r10            [12]  625 	mov	r0,#_fxset
      0000D6 E6               [12]  626 	mov	a,@r0
      0000D7 60 1C            [24]  627 	jz	00106$
                                    628 ;	life.c:116: printstr(" FIXED ");
      0000D9 90r00r13         [24]  629 	mov	dptr,#___str_3
      0000DC 75 F0 80         [24]  630 	mov	b,#0x80
      0000DF C0 07            [24]  631 	push	ar7
      0000E1 12r00r00         [24]  632 	lcall	_printstr
                                    633 ;	life.c:117: print32x(genfx);
      0000E4 78r0B            [12]  634 	mov	r0,#_genfx
      0000E6 86 82            [24]  635 	mov	dpl,@r0
      0000E8 08               [12]  636 	inc	r0
      0000E9 86 83            [24]  637 	mov	dph,@r0
      0000EB 08               [12]  638 	inc	r0
      0000EC 86 F0            [24]  639 	mov	b,@r0
      0000EE 08               [12]  640 	inc	r0
      0000EF E6               [12]  641 	mov	a,@r0
      0000F0 12r00r00         [24]  642 	lcall	_print32x
      0000F3 D0 07            [24]  643 	pop	ar7
      0000F5                        644 00106$:
                                    645 ;	life.c:119: printstr("\r\n");
      0000F5 90r00r1B         [24]  646 	mov	dptr,#___str_4
      0000F8 75 F0 80         [24]  647 	mov	b,#0x80
      0000FB C0 07            [24]  648 	push	ar7
      0000FD 12r00r00         [24]  649 	lcall	_printstr
      000100 D0 07            [24]  650 	pop	ar7
      000102                        651 00108$:
                                    652 ;	life.c:121: if (prflags & PRUNI) {
      000102 EF               [12]  653 	mov	a,r7
      000103 20 E2 03         [24]  654 	jb	acc.2,00168$
      000106 02r01rBF         [24]  655 	ljmp	00115$
      000109                        656 00168$:
                                    657 ;	life.c:122: printstr("\033[?25l");
      000109 90r00r1E         [24]  658 	mov	dptr,#___str_5
      00010C 75 F0 80         [24]  659 	mov	b,#0x80
      00010F 12r00r00         [24]  660 	lcall	_printstr
                                    661 ;	life.c:123: for (x = 0; x < W; x++) {
      000112 A8*00            [24]  662 	mov	r0,_bp
      000114 08               [12]  663 	inc	r0
      000115 E4               [12]  664 	clr	a
      000116 F6               [12]  665 	mov	@r0,a
      000117 08               [12]  666 	inc	r0
      000118 F6               [12]  667 	mov	@r0,a
                                    668 ;	life.c:124: for (y = 0; y < H; y++)
      000119                        669 00128$:
      000119 7C 00            [12]  670 	mov	r4,#0x00
      00011B 7D 00            [12]  671 	mov	r5,#0x00
      00011D 7A 00            [12]  672 	mov	r2,#0x00
      00011F 7B 00            [12]  673 	mov	r3,#0x00
      000121                        674 00116$:
                                    675 ;	life.c:125: if (universe[A2D(W, y, x)]) putchar((int)'1');
      000121 C0 04            [24]  676 	push	ar4
      000123 C0 05            [24]  677 	push	ar5
      000125 A8*00            [24]  678 	mov	r0,_bp
      000127 08               [12]  679 	inc	r0
      000128 E6               [12]  680 	mov	a,@r0
      000129 2A               [12]  681 	add	a,r2
      00012A FC               [12]  682 	mov	r4,a
      00012B 08               [12]  683 	inc	r0
      00012C E6               [12]  684 	mov	a,@r0
      00012D 3B               [12]  685 	addc	a,r3
      00012E FD               [12]  686 	mov	r5,a
      00012F E5*00            [12]  687 	mov	a,_bp
      000131 24 FB            [12]  688 	add	a,#0xfb
      000133 F8               [12]  689 	mov	r0,a
      000134 EC               [12]  690 	mov	a,r4
      000135 26               [12]  691 	add	a,@r0
      000136 FC               [12]  692 	mov	r4,a
      000137 ED               [12]  693 	mov	a,r5
      000138 08               [12]  694 	inc	r0
      000139 36               [12]  695 	addc	a,@r0
      00013A FD               [12]  696 	mov	r5,a
      00013B 08               [12]  697 	inc	r0
      00013C 86 07            [24]  698 	mov	ar7,@r0
      00013E 8C 82            [24]  699 	mov	dpl,r4
      000140 8D 83            [24]  700 	mov	dph,r5
      000142 8F F0            [24]  701 	mov	b,r7
      000144 12r00r00         [24]  702 	lcall	__gptrget
      000147 D0 05            [24]  703 	pop	ar5
      000149 D0 04            [24]  704 	pop	ar4
      00014B 60 18            [24]  705 	jz	00110$
      00014D 90 00 31         [24]  706 	mov	dptr,#0x0031
      000150 C0 05            [24]  707 	push	ar5
      000152 C0 04            [24]  708 	push	ar4
      000154 C0 03            [24]  709 	push	ar3
      000156 C0 02            [24]  710 	push	ar2
      000158 12r00r00         [24]  711 	lcall	_putchar
      00015B D0 02            [24]  712 	pop	ar2
      00015D D0 03            [24]  713 	pop	ar3
      00015F D0 04            [24]  714 	pop	ar4
      000161 D0 05            [24]  715 	pop	ar5
      000163 80 16            [24]  716 	sjmp	00117$
      000165                        717 00110$:
                                    718 ;	life.c:126: else putchar((int)'0');
      000165 90 00 30         [24]  719 	mov	dptr,#0x0030
      000168 C0 05            [24]  720 	push	ar5
      00016A C0 04            [24]  721 	push	ar4
      00016C C0 03            [24]  722 	push	ar3
      00016E C0 02            [24]  723 	push	ar2
      000170 12r00r00         [24]  724 	lcall	_putchar
      000173 D0 02            [24]  725 	pop	ar2
      000175 D0 03            [24]  726 	pop	ar3
      000177 D0 04            [24]  727 	pop	ar4
      000179 D0 05            [24]  728 	pop	ar5
      00017B                        729 00117$:
                                    730 ;	life.c:124: for (y = 0; y < H; y++)
      00017B 74 30            [12]  731 	mov	a,#0x30
      00017D 2A               [12]  732 	add	a,r2
      00017E FA               [12]  733 	mov	r2,a
      00017F E4               [12]  734 	clr	a
      000180 3B               [12]  735 	addc	a,r3
      000181 FB               [12]  736 	mov	r3,a
      000182 0C               [12]  737 	inc	r4
      000183 BC 00 01         [24]  738 	cjne	r4,#0x00,00170$
      000186 0D               [12]  739 	inc	r5
      000187                        740 00170$:
      000187 C3               [12]  741 	clr	c
      000188 EC               [12]  742 	mov	a,r4
      000189 94 C0            [12]  743 	subb	a,#0xc0
      00018B ED               [12]  744 	mov	a,r5
      00018C 64 80            [12]  745 	xrl	a,#0x80
      00018E 94 80            [12]  746 	subb	a,#0x80
      000190 40 8F            [24]  747 	jc	00116$
                                    748 ;	life.c:127: printstr("\r\n");
      000192 90r00r1B         [24]  749 	mov	dptr,#___str_4
      000195 75 F0 80         [24]  750 	mov	b,#0x80
      000198 12r00r00         [24]  751 	lcall	_printstr
                                    752 ;	life.c:123: for (x = 0; x < W; x++) {
      00019B A8*00            [24]  753 	mov	r0,_bp
      00019D 08               [12]  754 	inc	r0
      00019E 06               [12]  755 	inc	@r0
      00019F B6 00 02         [24]  756 	cjne	@r0,#0x00,00172$
      0001A2 08               [12]  757 	inc	r0
      0001A3 06               [12]  758 	inc	@r0
      0001A4                        759 00172$:
      0001A4 A8*00            [24]  760 	mov	r0,_bp
      0001A6 08               [12]  761 	inc	r0
      0001A7 C3               [12]  762 	clr	c
      0001A8 E6               [12]  763 	mov	a,@r0
      0001A9 94 30            [12]  764 	subb	a,#0x30
      0001AB 08               [12]  765 	inc	r0
      0001AC E6               [12]  766 	mov	a,@r0
      0001AD 64 80            [12]  767 	xrl	a,#0x80
      0001AF 94 80            [12]  768 	subb	a,#0x80
      0001B1 50 03            [24]  769 	jnc	00173$
      0001B3 02r01r19         [24]  770 	ljmp	00128$
      0001B6                        771 00173$:
                                    772 ;	life.c:129: printstr("\033[?25h");
      0001B6 90r00r25         [24]  773 	mov	dptr,#___str_6
      0001B9 75 F0 80         [24]  774 	mov	b,#0x80
      0001BC 12r00r00         [24]  775 	lcall	_printstr
      0001BF                        776 00115$:
                                    777 ;	life.c:132: return;
                                    778 ;	life.c:133: }
      0001BF 85*00 81         [24]  779 	mov	sp,_bp
      0001C2 D0*00            [24]  780 	pop	_bp
      0001C4 22               [24]  781 	ret
                                    782 ;------------------------------------------------------------
                                    783 ;Allocation info for local variables in function 'dumpu'
                                    784 ;------------------------------------------------------------
                                    785 ;universe                  Allocated to stack - _bp +1
                                    786 ;x                         Allocated to stack - _bp +4
                                    787 ;y                         Allocated to registers r3 r4 
                                    788 ;sloc0                     Allocated to stack - _bp +8
                                    789 ;------------------------------------------------------------
                                    790 ;	life.c:135: static void dumpu(char *universe) {
                                    791 ;	-----------------------------------------
                                    792 ;	 function dumpu
                                    793 ;	-----------------------------------------
      0001C5                        794 _dumpu:
      0001C5 C0*00            [24]  795 	push	_bp
      0001C7 85 81*00         [24]  796 	mov	_bp,sp
      0001CA C0 82            [24]  797 	push	dpl
      0001CC C0 83            [24]  798 	push	dph
      0001CE C0 F0            [24]  799 	push	b
      0001D0 05 81            [12]  800 	inc	sp
      0001D2 05 81            [12]  801 	inc	sp
                                    802 ;	life.c:138: for (y = 0; y < (H * W); y += W) {
      0001D4 7B 00            [12]  803 	mov	r3,#0x00
      0001D6 7C 00            [12]  804 	mov	r4,#0x00
                                    805 ;	life.c:139: for (x = 0; x < W; x++)
      0001D8                        806 00112$:
      0001D8 E5*00            [12]  807 	mov	a,_bp
      0001DA 24 04            [12]  808 	add	a,#0x04
      0001DC F8               [12]  809 	mov	r0,a
      0001DD E4               [12]  810 	clr	a
      0001DE F6               [12]  811 	mov	@r0,a
      0001DF 08               [12]  812 	inc	r0
      0001E0 F6               [12]  813 	mov	@r0,a
      0001E1                        814 00103$:
                                    815 ;	life.c:140: putchar(universe[y + x] ? (int)'1' : (int)'0');
      0001E1 E5*00            [12]  816 	mov	a,_bp
      0001E3 24 04            [12]  817 	add	a,#0x04
      0001E5 F8               [12]  818 	mov	r0,a
      0001E6 E6               [12]  819 	mov	a,@r0
      0001E7 2B               [12]  820 	add	a,r3
      0001E8 FF               [12]  821 	mov	r7,a
      0001E9 08               [12]  822 	inc	r0
      0001EA E6               [12]  823 	mov	a,@r0
      0001EB 3C               [12]  824 	addc	a,r4
      0001EC FE               [12]  825 	mov	r6,a
      0001ED A8*00            [24]  826 	mov	r0,_bp
      0001EF 08               [12]  827 	inc	r0
      0001F0 EF               [12]  828 	mov	a,r7
      0001F1 26               [12]  829 	add	a,@r0
      0001F2 FA               [12]  830 	mov	r2,a
      0001F3 EE               [12]  831 	mov	a,r6
      0001F4 08               [12]  832 	inc	r0
      0001F5 36               [12]  833 	addc	a,@r0
      0001F6 FD               [12]  834 	mov	r5,a
      0001F7 08               [12]  835 	inc	r0
      0001F8 86 06            [24]  836 	mov	ar6,@r0
      0001FA 8A 82            [24]  837 	mov	dpl,r2
      0001FC 8D 83            [24]  838 	mov	dph,r5
      0001FE 8E F0            [24]  839 	mov	b,r6
      000200 12r00r00         [24]  840 	lcall	__gptrget
      000203 60 06            [24]  841 	jz	00109$
      000205 7D 31            [12]  842 	mov	r5,#0x31
      000207 7E 00            [12]  843 	mov	r6,#0x00
      000209 80 04            [24]  844 	sjmp	00110$
      00020B                        845 00109$:
      00020B 7D 30            [12]  846 	mov	r5,#0x30
      00020D 7E 00            [12]  847 	mov	r6,#0x00
      00020F                        848 00110$:
      00020F 8D 82            [24]  849 	mov	dpl,r5
      000211 8E 83            [24]  850 	mov	dph,r6
      000213 C0 04            [24]  851 	push	ar4
      000215 C0 03            [24]  852 	push	ar3
      000217 12r00r00         [24]  853 	lcall	_putchar
      00021A D0 03            [24]  854 	pop	ar3
      00021C D0 04            [24]  855 	pop	ar4
                                    856 ;	life.c:139: for (x = 0; x < W; x++)
      00021E E5*00            [12]  857 	mov	a,_bp
      000220 24 04            [12]  858 	add	a,#0x04
      000222 F8               [12]  859 	mov	r0,a
      000223 06               [12]  860 	inc	@r0
      000224 B6 00 02         [24]  861 	cjne	@r0,#0x00,00134$
      000227 08               [12]  862 	inc	r0
      000228 06               [12]  863 	inc	@r0
      000229                        864 00134$:
      000229 E5*00            [12]  865 	mov	a,_bp
      00022B 24 04            [12]  866 	add	a,#0x04
      00022D F8               [12]  867 	mov	r0,a
      00022E C3               [12]  868 	clr	c
      00022F E6               [12]  869 	mov	a,@r0
      000230 94 30            [12]  870 	subb	a,#0x30
      000232 08               [12]  871 	inc	r0
      000233 E6               [12]  872 	mov	a,@r0
      000234 64 80            [12]  873 	xrl	a,#0x80
      000236 94 80            [12]  874 	subb	a,#0x80
      000238 40 A7            [24]  875 	jc	00103$
                                    876 ;	life.c:141: printstr("\r\n");
      00023A 90r00r1B         [24]  877 	mov	dptr,#___str_4
      00023D 75 F0 80         [24]  878 	mov	b,#0x80
      000240 C0 04            [24]  879 	push	ar4
      000242 C0 03            [24]  880 	push	ar3
      000244 12r00r00         [24]  881 	lcall	_printstr
      000247 D0 03            [24]  882 	pop	ar3
      000249 D0 04            [24]  883 	pop	ar4
                                    884 ;	life.c:138: for (y = 0; y < (H * W); y += W) {
      00024B 74 30            [12]  885 	mov	a,#0x30
      00024D 2B               [12]  886 	add	a,r3
      00024E FB               [12]  887 	mov	r3,a
      00024F E4               [12]  888 	clr	a
      000250 3C               [12]  889 	addc	a,r4
      000251 FC               [12]  890 	mov	r4,a
      000252 C3               [12]  891 	clr	c
      000253 64 80            [12]  892 	xrl	a,#0x80
      000255 94 A4            [12]  893 	subb	a,#0xa4
      000257 50 03            [24]  894 	jnc	00136$
      000259 02r01rD8         [24]  895 	ljmp	00112$
      00025C                        896 00136$:
                                    897 ;	life.c:143: printstr("#\n");
      00025C 90r00r2C         [24]  898 	mov	dptr,#___str_7
      00025F 75 F0 80         [24]  899 	mov	b,#0x80
      000262 12r00r00         [24]  900 	lcall	_printstr
                                    901 ;	life.c:145: return;
                                    902 ;	life.c:146: }
      000265 85*00 81         [24]  903 	mov	sp,_bp
      000268 D0*00            [24]  904 	pop	_bp
      00026A 22               [24]  905 	ret
                                    906 ;------------------------------------------------------------
                                    907 ;Allocation info for local variables in function 'loadiu'
                                    908 ;------------------------------------------------------------
                                    909 ;x                         Allocated to registers r2 r3 
                                    910 ;y                         Allocated to registers r4 r5 
                                    911 ;nbits                     Allocated to stack - _bp +3
                                    912 ;c                         Allocated to registers r6 r7 
                                    913 ;sloc0                     Allocated to stack - _bp +1
                                    914 ;------------------------------------------------------------
                                    915 ;	life.c:148: static void loadiu(void) {
                                    916 ;	-----------------------------------------
                                    917 ;	 function loadiu
                                    918 ;	-----------------------------------------
      00026B                        919 _loadiu:
      00026B C0*00            [24]  920 	push	_bp
      00026D E5 81            [12]  921 	mov	a,sp
      00026F F5*00            [12]  922 	mov	_bp,a
      000271 24 04            [12]  923 	add	a,#0x04
      000273 F5 81            [12]  924 	mov	sp,a
                                    925 ;	life.c:152: memset(iu, 0, sizeof (iu));
      000275 E4               [12]  926 	clr	a
      000276 C0 E0            [24]  927 	push	acc
      000278 74 24            [12]  928 	mov	a,#0x24
      00027A C0 E0            [24]  929 	push	acc
      00027C E4               [12]  930 	clr	a
      00027D C0 E0            [24]  931 	push	acc
      00027F 90r00r00         [24]  932 	mov	dptr,#_iu
      000282 75 F0 00         [24]  933 	mov	b,#0x00
      000285 12r00r00         [24]  934 	lcall	_memset
      000288 15 81            [12]  935 	dec	sp
      00028A 15 81            [12]  936 	dec	sp
      00028C 15 81            [12]  937 	dec	sp
                                    938 ;	life.c:154: printstr("LOAD 0 1 ~ # <");
      00028E 90r00r2F         [24]  939 	mov	dptr,#___str_8
      000291 75 F0 80         [24]  940 	mov	b,#0x80
      000294 12r00r00         [24]  941 	lcall	_printstr
                                    942 ;	life.c:156: for (nbits = 0, y = 0; y < (H * W); y += W) {
      000297 E5*00            [12]  943 	mov	a,_bp
      000299 24 03            [12]  944 	add	a,#0x03
      00029B F8               [12]  945 	mov	r0,a
      00029C E4               [12]  946 	clr	a
      00029D F6               [12]  947 	mov	@r0,a
      00029E 08               [12]  948 	inc	r0
      00029F F6               [12]  949 	mov	@r0,a
      0002A0 7C 00            [12]  950 	mov	r4,#0x00
      0002A2 7D 00            [12]  951 	mov	r5,#0x00
      0002A4                        952 00129$:
      0002A4 C3               [12]  953 	clr	c
      0002A5 ED               [12]  954 	mov	a,r5
      0002A6 64 80            [12]  955 	xrl	a,#0x80
      0002A8 94 A4            [12]  956 	subb	a,#0xa4
      0002AA 40 03            [24]  957 	jc	00174$
      0002AC 02r03r59         [24]  958 	ljmp	00119$
      0002AF                        959 00174$:
                                    960 ;	life.c:158: while (1) {
      0002AF 7A 00            [12]  961 	mov	r2,#0x00
      0002B1 7B 00            [12]  962 	mov	r3,#0x00
      0002B3                        963 00113$:
                                    964 ;	life.c:159: c = getchar();
      0002B3 C0 05            [24]  965 	push	ar5
      0002B5 C0 04            [24]  966 	push	ar4
      0002B7 C0 03            [24]  967 	push	ar3
      0002B9 C0 02            [24]  968 	push	ar2
      0002BB 12r00r00         [24]  969 	lcall	_getchar
      0002BE A8*00            [24]  970 	mov	r0,_bp
      0002C0 08               [12]  971 	inc	r0
      0002C1 A6 82            [24]  972 	mov	@r0,dpl
      0002C3 08               [12]  973 	inc	r0
      0002C4 A6 83            [24]  974 	mov	@r0,dph
      0002C6 D0 02            [24]  975 	pop	ar2
      0002C8 D0 03            [24]  976 	pop	ar3
      0002CA D0 04            [24]  977 	pop	ar4
      0002CC D0 05            [24]  978 	pop	ar5
                                    979 ;	life.c:160: if (c == (int)'0') {
      0002CE A8*00            [24]  980 	mov	r0,_bp
      0002D0 08               [12]  981 	inc	r0
      0002D1 B6 30 23         [24]  982 	cjne	@r0,#0x30,00110$
      0002D4 08               [12]  983 	inc	r0
      0002D5 B6 00 1F         [24]  984 	cjne	@r0,#0x00,00110$
                                    985 ;	life.c:161: iu[y + x] = 0;
      0002D8 EA               [12]  986 	mov	a,r2
      0002D9 2C               [12]  987 	add	a,r4
      0002DA FE               [12]  988 	mov	r6,a
      0002DB EB               [12]  989 	mov	a,r3
      0002DC 3D               [12]  990 	addc	a,r5
      0002DD FF               [12]  991 	mov	r7,a
      0002DE EE               [12]  992 	mov	a,r6
      0002DF 24r00            [12]  993 	add	a,#_iu
      0002E1 F5 82            [12]  994 	mov	dpl,a
      0002E3 EF               [12]  995 	mov	a,r7
      0002E4 34s00            [12]  996 	addc	a,#(_iu >> 8)
      0002E6 F5 83            [12]  997 	mov	dph,a
      0002E8 E4               [12]  998 	clr	a
      0002E9 F0               [24]  999 	movx	@dptr,a
                                   1000 ;	life.c:162: nbits++;
      0002EA E5*00            [12] 1001 	mov	a,_bp
      0002EC 24 03            [12] 1002 	add	a,#0x03
      0002EE F8               [12] 1003 	mov	r0,a
      0002EF 06               [12] 1004 	inc	@r0
      0002F0 B6 00 02         [24] 1005 	cjne	@r0,#0x00,00177$
      0002F3 08               [12] 1006 	inc	r0
      0002F4 06               [12] 1007 	inc	@r0
      0002F5                       1008 00177$:
                                   1009 ;	life.c:163: break;
      0002F5 80 45            [24] 1010 	sjmp	00116$
      0002F7                       1011 00110$:
                                   1012 ;	life.c:164: } else if (c == (int)'1') {
      0002F7 A8*00            [24] 1013 	mov	r0,_bp
      0002F9 08               [12] 1014 	inc	r0
      0002FA B6 31 24         [24] 1015 	cjne	@r0,#0x31,00107$
      0002FD 08               [12] 1016 	inc	r0
      0002FE B6 00 20         [24] 1017 	cjne	@r0,#0x00,00107$
                                   1018 ;	life.c:165: iu[y + x] = 1;
      000301 EA               [12] 1019 	mov	a,r2
      000302 2C               [12] 1020 	add	a,r4
      000303 FE               [12] 1021 	mov	r6,a
      000304 EB               [12] 1022 	mov	a,r3
      000305 3D               [12] 1023 	addc	a,r5
      000306 FF               [12] 1024 	mov	r7,a
      000307 EE               [12] 1025 	mov	a,r6
      000308 24r00            [12] 1026 	add	a,#_iu
      00030A F5 82            [12] 1027 	mov	dpl,a
      00030C EF               [12] 1028 	mov	a,r7
      00030D 34s00            [12] 1029 	addc	a,#(_iu >> 8)
      00030F F5 83            [12] 1030 	mov	dph,a
      000311 74 01            [12] 1031 	mov	a,#0x01
      000313 F0               [24] 1032 	movx	@dptr,a
                                   1033 ;	life.c:166: nbits++;
      000314 E5*00            [12] 1034 	mov	a,_bp
      000316 24 03            [12] 1035 	add	a,#0x03
      000318 F8               [12] 1036 	mov	r0,a
      000319 06               [12] 1037 	inc	@r0
      00031A B6 00 02         [24] 1038 	cjne	@r0,#0x00,00180$
      00031D 08               [12] 1039 	inc	r0
      00031E 06               [12] 1040 	inc	@r0
      00031F                       1041 00180$:
                                   1042 ;	life.c:167: break;
      00031F 80 1B            [24] 1043 	sjmp	00116$
      000321                       1044 00107$:
                                   1045 ;	life.c:168: } else if (c == (int)'~') goto br_inner;
      000321 A8*00            [24] 1046 	mov	r0,_bp
      000323 08               [12] 1047 	inc	r0
      000324 B6 7E 06         [24] 1048 	cjne	@r0,#0x7e,00181$
      000327 08               [12] 1049 	inc	r0
      000328 B6 00 02         [24] 1050 	cjne	@r0,#0x00,00181$
      00032B 80 22            [24] 1051 	sjmp	00130$
      00032D                       1052 00181$:
                                   1053 ;	life.c:169: else if (c == (int)'#') goto out;
      00032D A8*00            [24] 1054 	mov	r0,_bp
      00032F 08               [12] 1055 	inc	r0
      000330 B6 23 06         [24] 1056 	cjne	@r0,#0x23,00182$
      000333 08               [12] 1057 	inc	r0
      000334 B6 00 02         [24] 1058 	cjne	@r0,#0x00,00182$
      000337 80 20            [24] 1059 	sjmp	00119$
      000339                       1060 00182$:
      000339 02r02rB3         [24] 1061 	ljmp	00113$
                                   1062 ;	life.c:173: break;
      00033C                       1063 00116$:
                                   1064 ;	life.c:157: for (x = 0; x < W; x++) {
      00033C 0A               [12] 1065 	inc	r2
      00033D BA 00 01         [24] 1066 	cjne	r2,#0x00,00183$
      000340 0B               [12] 1067 	inc	r3
      000341                       1068 00183$:
      000341 C3               [12] 1069 	clr	c
      000342 EA               [12] 1070 	mov	a,r2
      000343 94 30            [12] 1071 	subb	a,#0x30
      000345 EB               [12] 1072 	mov	a,r3
      000346 64 80            [12] 1073 	xrl	a,#0x80
      000348 94 80            [12] 1074 	subb	a,#0x80
      00034A 50 03            [24] 1075 	jnc	00184$
      00034C 02r02rB3         [24] 1076 	ljmp	00113$
      00034F                       1077 00184$:
      00034F                       1078 00130$:
                                   1079 ;	life.c:156: for (nbits = 0, y = 0; y < (H * W); y += W) {
      00034F 74 30            [12] 1080 	mov	a,#0x30
      000351 2C               [12] 1081 	add	a,r4
      000352 FC               [12] 1082 	mov	r4,a
      000353 E4               [12] 1083 	clr	a
      000354 3D               [12] 1084 	addc	a,r5
      000355 FD               [12] 1085 	mov	r5,a
      000356 02r02rA4         [24] 1086 	ljmp	00129$
                                   1087 ;	life.c:177: out:
      000359                       1088 00119$:
                                   1089 ;	life.c:178: if (c != (int)'#')
      000359 A8*00            [24] 1090 	mov	r0,_bp
      00035B 08               [12] 1091 	inc	r0
      00035C B6 23 06         [24] 1092 	cjne	@r0,#0x23,00185$
      00035F 08               [12] 1093 	inc	r0
      000360 B6 00 02         [24] 1094 	cjne	@r0,#0x00,00185$
      000363 80 0D            [24] 1095 	sjmp	00126$
      000365                       1096 00185$:
                                   1097 ;	life.c:179: while (1) {
      000365                       1098 00123$:
                                   1099 ;	life.c:180: c = getchar();
      000365 12r00r00         [24] 1100 	lcall	_getchar
      000368 AE 82            [24] 1101 	mov	r6,dpl
      00036A AF 83            [24] 1102 	mov	r7,dph
                                   1103 ;	life.c:181: if (c == (int)'#') break;
      00036C BE 23 F6         [24] 1104 	cjne	r6,#0x23,00123$
      00036F BF 00 F3         [24] 1105 	cjne	r7,#0x00,00123$
      000372                       1106 00126$:
                                   1107 ;	life.c:183: print16x(nbits);
      000372 E5*00            [12] 1108 	mov	a,_bp
      000374 24 03            [12] 1109 	add	a,#0x03
      000376 F8               [12] 1110 	mov	r0,a
      000377 86 82            [24] 1111 	mov	dpl,@r0
      000379 08               [12] 1112 	inc	r0
      00037A 86 83            [24] 1113 	mov	dph,@r0
      00037C 12r00r00         [24] 1114 	lcall	_print16x
                                   1115 ;	life.c:184: printstr(">\r\n");
      00037F 90r00r3E         [24] 1116 	mov	dptr,#___str_9
      000382 75 F0 80         [24] 1117 	mov	b,#0x80
      000385 12r00r00         [24] 1118 	lcall	_printstr
                                   1119 ;	life.c:186: return;
                                   1120 ;	life.c:187: }
      000388 85*00 81         [24] 1121 	mov	sp,_bp
      00038B D0*00            [24] 1122 	pop	_bp
      00038D 22               [24] 1123 	ret
                                   1124 ;------------------------------------------------------------
                                   1125 ;Allocation info for local variables in function 'loadriu'
                                   1126 ;------------------------------------------------------------
                                   1127 ;x                         Allocated to registers r4 r5 
                                   1128 ;y                         Allocated to registers r6 r7 
                                   1129 ;------------------------------------------------------------
                                   1130 ;	life.c:189: static void loadriu(void) {
                                   1131 ;	-----------------------------------------
                                   1132 ;	 function loadriu
                                   1133 ;	-----------------------------------------
      00038E                       1134 _loadriu:
                                   1135 ;	life.c:192: printstr("RANDOM");
      00038E 90r00r42         [24] 1136 	mov	dptr,#___str_10
      000391 75 F0 80         [24] 1137 	mov	b,#0x80
      000394 12r00r00         [24] 1138 	lcall	_printstr
                                   1139 ;	life.c:194: for (y = 0; y < (H * W); y += W)
      000397 7E 00            [12] 1140 	mov	r6,#0x00
      000399 7F 00            [12] 1141 	mov	r7,#0x00
                                   1142 ;	life.c:195: for (x = 0; x < W; x++)
      00039B                       1143 00109$:
      00039B 7C 00            [12] 1144 	mov	r4,#0x00
      00039D 7D 00            [12] 1145 	mov	r5,#0x00
      00039F                       1146 00103$:
                                   1147 ;	life.c:196: iu[y + x] = rand() & 1;
      00039F EC               [12] 1148 	mov	a,r4
      0003A0 2E               [12] 1149 	add	a,r6
      0003A1 FA               [12] 1150 	mov	r2,a
      0003A2 ED               [12] 1151 	mov	a,r5
      0003A3 3F               [12] 1152 	addc	a,r7
      0003A4 FB               [12] 1153 	mov	r3,a
      0003A5 EA               [12] 1154 	mov	a,r2
      0003A6 24r00            [12] 1155 	add	a,#_iu
      0003A8 FA               [12] 1156 	mov	r2,a
      0003A9 EB               [12] 1157 	mov	a,r3
      0003AA 34s00            [12] 1158 	addc	a,#(_iu >> 8)
      0003AC FB               [12] 1159 	mov	r3,a
      0003AD C0 07            [24] 1160 	push	ar7
      0003AF C0 06            [24] 1161 	push	ar6
      0003B1 C0 05            [24] 1162 	push	ar5
      0003B3 C0 04            [24] 1163 	push	ar4
      0003B5 C0 03            [24] 1164 	push	ar3
      0003B7 C0 02            [24] 1165 	push	ar2
      0003B9 12r00r00         [24] 1166 	lcall	_rand
      0003BC A8 82            [24] 1167 	mov	r0,dpl
      0003BE D0 02            [24] 1168 	pop	ar2
      0003C0 D0 03            [24] 1169 	pop	ar3
      0003C2 D0 04            [24] 1170 	pop	ar4
      0003C4 D0 05            [24] 1171 	pop	ar5
      0003C6 D0 06            [24] 1172 	pop	ar6
      0003C8 D0 07            [24] 1173 	pop	ar7
      0003CA 53 00 01         [24] 1174 	anl	ar0,#0x01
      0003CD 8A 82            [24] 1175 	mov	dpl,r2
      0003CF 8B 83            [24] 1176 	mov	dph,r3
      0003D1 E8               [12] 1177 	mov	a,r0
      0003D2 F0               [24] 1178 	movx	@dptr,a
                                   1179 ;	life.c:195: for (x = 0; x < W; x++)
      0003D3 0C               [12] 1180 	inc	r4
      0003D4 BC 00 01         [24] 1181 	cjne	r4,#0x00,00127$
      0003D7 0D               [12] 1182 	inc	r5
      0003D8                       1183 00127$:
      0003D8 C3               [12] 1184 	clr	c
      0003D9 EC               [12] 1185 	mov	a,r4
      0003DA 94 30            [12] 1186 	subb	a,#0x30
      0003DC ED               [12] 1187 	mov	a,r5
      0003DD 64 80            [12] 1188 	xrl	a,#0x80
      0003DF 94 80            [12] 1189 	subb	a,#0x80
      0003E1 40 BC            [24] 1190 	jc	00103$
                                   1191 ;	life.c:194: for (y = 0; y < (H * W); y += W)
      0003E3 74 30            [12] 1192 	mov	a,#0x30
      0003E5 2E               [12] 1193 	add	a,r6
      0003E6 FE               [12] 1194 	mov	r6,a
      0003E7 E4               [12] 1195 	clr	a
      0003E8 3F               [12] 1196 	addc	a,r7
      0003E9 FF               [12] 1197 	mov	r7,a
      0003EA C3               [12] 1198 	clr	c
      0003EB 64 80            [12] 1199 	xrl	a,#0x80
      0003ED 94 A4            [12] 1200 	subb	a,#0xa4
      0003EF 40 AA            [24] 1201 	jc	00109$
                                   1202 ;	life.c:198: printstr("\r\n");
      0003F1 90r00r1B         [24] 1203 	mov	dptr,#___str_4
      0003F4 75 F0 80         [24] 1204 	mov	b,#0x80
                                   1205 ;	life.c:200: return;
                                   1206 ;	life.c:201: }
      0003F7 02r00r00         [24] 1207 	ljmp	_printstr
                                   1208 ;------------------------------------------------------------
                                   1209 ;Allocation info for local variables in function 'evolveu'
                                   1210 ;------------------------------------------------------------
                                   1211 ;x                         Allocated to stack - _bp +15
                                   1212 ;y                         Allocated to stack - _bp +17
                                   1213 ;n                         Allocated to registers 
                                   1214 ;sloc0                     Allocated to stack - _bp +1
                                   1215 ;sloc1                     Allocated to stack - _bp +3
                                   1216 ;sloc2                     Allocated to stack - _bp +5
                                   1217 ;sloc3                     Allocated to stack - _bp +7
                                   1218 ;sloc4                     Allocated to stack - _bp +9
                                   1219 ;sloc5                     Allocated to stack - _bp +11
                                   1220 ;sloc6                     Allocated to stack - _bp +13
                                   1221 ;------------------------------------------------------------
                                   1222 ;	life.c:203: void evolveu(void) {
                                   1223 ;	-----------------------------------------
                                   1224 ;	 function evolveu
                                   1225 ;	-----------------------------------------
      0003FA                       1226 _evolveu:
      0003FA C0*00            [24] 1227 	push	_bp
      0003FC E5 81            [12] 1228 	mov	a,sp
      0003FE F5*00            [12] 1229 	mov	_bp,a
      000400 24 12            [12] 1230 	add	a,#0x12
      000402 F5 81            [12] 1231 	mov	sp,a
                                   1232 ;	life.c:207: fixed = 0;
      000404 78r12            [12] 1233 	mov	r0,#_fixed
      000406 76 00            [12] 1234 	mov	@r0,#0x00
                                   1235 ;	life.c:208: cycle2 = 0;
      000408 78r13            [12] 1236 	mov	r0,#_cycle2
      00040A 76 00            [12] 1237 	mov	@r0,#0x00
                                   1238 ;	life.c:210: OE76 = OE76_0;
      00040C 78r02            [12] 1239 	mov	r0,#_OE76
      00040E 76 3F            [12] 1240 	mov	@r0,#0x3f
                                   1241 ;	life.c:30: OEreg = OE76;
      000410 90 F0 06         [24] 1242 	mov	dptr,#_OEreg
      000413 74 3F            [12] 1243 	mov	a,#0x3f
      000415 F0               [24] 1244 	movx	@dptr,a
                                   1245 ;	life.c:213: for (y = 0; y < H; y++) {
      000416 E5*00            [12] 1246 	mov	a,_bp
      000418 24 11            [12] 1247 	add	a,#0x11
      00041A F8               [12] 1248 	mov	r0,a
      00041B E4               [12] 1249 	clr	a
      00041C F6               [12] 1250 	mov	@r0,a
      00041D 08               [12] 1251 	inc	r0
      00041E F6               [12] 1252 	mov	@r0,a
      00041F E4               [12] 1253 	clr	a
      000420 FC               [12] 1254 	mov	r4,a
      000421 FD               [12] 1255 	mov	r5,a
      000422 E5*00            [12] 1256 	mov	a,_bp
      000424 24 0B            [12] 1257 	add	a,#0x0b
      000426 F8               [12] 1258 	mov	r0,a
      000427 E4               [12] 1259 	clr	a
      000428 F6               [12] 1260 	mov	@r0,a
      000429 08               [12] 1261 	inc	r0
      00042A F6               [12] 1262 	mov	@r0,a
      00042B                       1263 00135$:
                                   1264 ;	life.c:214: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      00042B C0 04            [24] 1265 	push	ar4
      00042D C0 05            [24] 1266 	push	ar5
      00042F E5*00            [12] 1267 	mov	a,_bp
      000431 24 11            [12] 1268 	add	a,#0x11
      000433 F8               [12] 1269 	mov	r0,a
      000434 86 05            [24] 1270 	mov	ar5,@r0
      000436 53 05 03         [24] 1271 	anl	ar5,#0x03
      000439 ED               [12] 1272 	mov	a,r5
      00043A 03               [12] 1273 	rr	a
      00043B 03               [12] 1274 	rr	a
      00043C 54 C0            [12] 1275 	anl	a,#0xc0
      00043E FD               [12] 1276 	mov	r5,a
      00043F 43 05 3F         [24] 1277 	orl	ar5,#0x3f
      000442 78r02            [12] 1278 	mov	r0,#_OE76
      000444 A6 05            [24] 1279 	mov	@r0,ar5
                                   1280 ;	life.c:30: OEreg = OE76;
      000446 90 F0 06         [24] 1281 	mov	dptr,#_OEreg
      000449 ED               [12] 1282 	mov	a,r5
      00044A F0               [24] 1283 	movx	@dptr,a
                                   1284 ;	life.c:216: for (x = 0; x < W; x++) {
      00044B E5*00            [12] 1285 	mov	a,_bp
      00044D 24 11            [12] 1286 	add	a,#0x11
      00044F F8               [12] 1287 	mov	r0,a
      000450 74 BF            [12] 1288 	mov	a,#0xbf
      000452 26               [12] 1289 	add	a,@r0
      000453 FC               [12] 1290 	mov	r4,a
      000454 E4               [12] 1291 	clr	a
      000455 08               [12] 1292 	inc	r0
      000456 36               [12] 1293 	addc	a,@r0
      000457 FD               [12] 1294 	mov	r5,a
      000458 74 C0            [12] 1295 	mov	a,#0xc0
      00045A C0 E0            [24] 1296 	push	acc
      00045C E4               [12] 1297 	clr	a
      00045D C0 E0            [24] 1298 	push	acc
      00045F 8C 82            [24] 1299 	mov	dpl,r4
      000461 8D 83            [24] 1300 	mov	dph,r5
      000463 12r00r00         [24] 1301 	lcall	__modsint
      000466 AC 82            [24] 1302 	mov	r4,dpl
      000468 AD 83            [24] 1303 	mov	r5,dph
      00046A 15 81            [12] 1304 	dec	sp
      00046C 15 81            [12] 1305 	dec	sp
      00046E C0 05            [24] 1306 	push	ar5
      000470 C0 04            [24] 1307 	push	ar4
      000472 C0 04            [24] 1308 	push	ar4
      000474 C0 05            [24] 1309 	push	ar5
      000476 90 00 30         [24] 1310 	mov	dptr,#0x0030
      000479 12r00r00         [24] 1311 	lcall	__mulint
      00047C A8*00            [24] 1312 	mov	r0,_bp
      00047E 08               [12] 1313 	inc	r0
      00047F A6 82            [24] 1314 	mov	@r0,dpl
      000481 08               [12] 1315 	inc	r0
      000482 A6 83            [24] 1316 	mov	@r0,dph
      000484 15 81            [12] 1317 	dec	sp
      000486 15 81            [12] 1318 	dec	sp
      000488 D0 04            [24] 1319 	pop	ar4
      00048A D0 05            [24] 1320 	pop	ar5
      00048C E5*00            [12] 1321 	mov	a,_bp
      00048E 24 11            [12] 1322 	add	a,#0x11
      000490 F8               [12] 1323 	mov	r0,a
      000491 74 C0            [12] 1324 	mov	a,#0xc0
      000493 26               [12] 1325 	add	a,@r0
      000494 FC               [12] 1326 	mov	r4,a
      000495 E4               [12] 1327 	clr	a
      000496 08               [12] 1328 	inc	r0
      000497 36               [12] 1329 	addc	a,@r0
      000498 FD               [12] 1330 	mov	r5,a
      000499 74 C0            [12] 1331 	mov	a,#0xc0
      00049B C0 E0            [24] 1332 	push	acc
      00049D E4               [12] 1333 	clr	a
      00049E C0 E0            [24] 1334 	push	acc
      0004A0 8C 82            [24] 1335 	mov	dpl,r4
      0004A2 8D 83            [24] 1336 	mov	dph,r5
      0004A4 12r00r00         [24] 1337 	lcall	__modsint
      0004A7 AC 82            [24] 1338 	mov	r4,dpl
      0004A9 AD 83            [24] 1339 	mov	r5,dph
      0004AB 15 81            [12] 1340 	dec	sp
      0004AD 15 81            [12] 1341 	dec	sp
      0004AF C0 05            [24] 1342 	push	ar5
      0004B1 C0 04            [24] 1343 	push	ar4
      0004B3 C0 04            [24] 1344 	push	ar4
      0004B5 C0 05            [24] 1345 	push	ar5
      0004B7 90 00 30         [24] 1346 	mov	dptr,#0x0030
      0004BA 12r00r00         [24] 1347 	lcall	__mulint
      0004BD A8*00            [24] 1348 	mov	r0,_bp
      0004BF 08               [12] 1349 	inc	r0
      0004C0 08               [12] 1350 	inc	r0
      0004C1 08               [12] 1351 	inc	r0
      0004C2 A6 82            [24] 1352 	mov	@r0,dpl
      0004C4 08               [12] 1353 	inc	r0
      0004C5 A6 83            [24] 1354 	mov	@r0,dph
      0004C7 15 81            [12] 1355 	dec	sp
      0004C9 15 81            [12] 1356 	dec	sp
      0004CB D0 04            [24] 1357 	pop	ar4
      0004CD D0 05            [24] 1358 	pop	ar5
      0004CF E5*00            [12] 1359 	mov	a,_bp
      0004D1 24 11            [12] 1360 	add	a,#0x11
      0004D3 F8               [12] 1361 	mov	r0,a
      0004D4 74 C1            [12] 1362 	mov	a,#0xc1
      0004D6 26               [12] 1363 	add	a,@r0
      0004D7 FC               [12] 1364 	mov	r4,a
      0004D8 E4               [12] 1365 	clr	a
      0004D9 08               [12] 1366 	inc	r0
      0004DA 36               [12] 1367 	addc	a,@r0
      0004DB FD               [12] 1368 	mov	r5,a
      0004DC 74 C0            [12] 1369 	mov	a,#0xc0
      0004DE C0 E0            [24] 1370 	push	acc
      0004E0 E4               [12] 1371 	clr	a
      0004E1 C0 E0            [24] 1372 	push	acc
      0004E3 8C 82            [24] 1373 	mov	dpl,r4
      0004E5 8D 83            [24] 1374 	mov	dph,r5
      0004E7 12r00r00         [24] 1375 	lcall	__modsint
      0004EA AC 82            [24] 1376 	mov	r4,dpl
      0004EC AD 83            [24] 1377 	mov	r5,dph
      0004EE 15 81            [12] 1378 	dec	sp
      0004F0 15 81            [12] 1379 	dec	sp
      0004F2 C0 05            [24] 1380 	push	ar5
      0004F4 C0 04            [24] 1381 	push	ar4
      0004F6 C0 04            [24] 1382 	push	ar4
      0004F8 C0 05            [24] 1383 	push	ar5
      0004FA 90 00 30         [24] 1384 	mov	dptr,#0x0030
      0004FD 12r00r00         [24] 1385 	lcall	__mulint
      000500 C8               [12] 1386 	xch	a,r0
      000501 E5*00            [12] 1387 	mov	a,_bp
      000503 24 05            [12] 1388 	add	a,#0x05
      000505 C8               [12] 1389 	xch	a,r0
      000506 A6 82            [24] 1390 	mov	@r0,dpl
      000508 08               [12] 1391 	inc	r0
      000509 A6 83            [24] 1392 	mov	@r0,dph
      00050B 15 81            [12] 1393 	dec	sp
      00050D 15 81            [12] 1394 	dec	sp
      00050F D0 04            [24] 1395 	pop	ar4
      000511 D0 05            [24] 1396 	pop	ar5
      000513 E5*00            [12] 1397 	mov	a,_bp
      000515 24 0F            [12] 1398 	add	a,#0x0f
      000517 F8               [12] 1399 	mov	r0,a
      000518 E4               [12] 1400 	clr	a
      000519 F6               [12] 1401 	mov	@r0,a
      00051A 08               [12] 1402 	inc	r0
      00051B F6               [12] 1403 	mov	@r0,a
                                   1404 ;	life.c:248: return;
      00051C D0 05            [24] 1405 	pop	ar5
      00051E D0 04            [24] 1406 	pop	ar4
                                   1407 ;	life.c:216: for (x = 0; x < W; x++) {
      000520                       1408 00133$:
                                   1409 ;	life.c:217: n = -u[A2D(W, y, x)];
      000520 C0 04            [24] 1410 	push	ar4
      000522 C0 05            [24] 1411 	push	ar5
      000524 E5*00            [12] 1412 	mov	a,_bp
      000526 24 0B            [12] 1413 	add	a,#0x0b
      000528 F8               [12] 1414 	mov	r0,a
      000529 E5*00            [12] 1415 	mov	a,_bp
      00052B 24 0F            [12] 1416 	add	a,#0x0f
      00052D F9               [12] 1417 	mov	r1,a
      00052E E7               [12] 1418 	mov	a,@r1
      00052F 26               [12] 1419 	add	a,@r0
      000530 C0 E0            [24] 1420 	push	acc
      000532 09               [12] 1421 	inc	r1
      000533 E7               [12] 1422 	mov	a,@r1
      000534 08               [12] 1423 	inc	r0
      000535 36               [12] 1424 	addc	a,@r0
      000536 C0 E0            [24] 1425 	push	acc
      000538 E5*00            [12] 1426 	mov	a,_bp
      00053A 24 0A            [12] 1427 	add	a,#0x0a
      00053C F8               [12] 1428 	mov	r0,a
      00053D D0 E0            [24] 1429 	pop	acc
      00053F F6               [12] 1430 	mov	@r0,a
      000540 18               [12] 1431 	dec	r0
      000541 D0 E0            [24] 1432 	pop	acc
      000543 F6               [12] 1433 	mov	@r0,a
      000544 E5*00            [12] 1434 	mov	a,_bp
      000546 24 09            [12] 1435 	add	a,#0x09
      000548 F8               [12] 1436 	mov	r0,a
      000549 E6               [12] 1437 	mov	a,@r0
      00054A 24r00            [12] 1438 	add	a,#_u
      00054C F5 82            [12] 1439 	mov	dpl,a
      00054E 08               [12] 1440 	inc	r0
      00054F E6               [12] 1441 	mov	a,@r0
      000550 34s48            [12] 1442 	addc	a,#(_u >> 8)
      000552 F5 83            [12] 1443 	mov	dph,a
      000554 E0               [24] 1444 	movx	a,@dptr
      000555 FF               [12] 1445 	mov	r7,a
      000556 7E 00            [12] 1446 	mov	r6,#0x00
      000558 C3               [12] 1447 	clr	c
      000559 E4               [12] 1448 	clr	a
      00055A 9F               [12] 1449 	subb	a,r7
      00055B FB               [12] 1450 	mov	r3,a
      00055C E4               [12] 1451 	clr	a
      00055D 9E               [12] 1452 	subb	a,r6
      00055E FA               [12] 1453 	mov	r2,a
                                   1454 ;	life.c:222: UPDN(-1, -1);
      00055F E5*00            [12] 1455 	mov	a,_bp
      000561 24 0F            [12] 1456 	add	a,#0x0f
      000563 F8               [12] 1457 	mov	r0,a
      000564 74 2F            [12] 1458 	mov	a,#0x2f
      000566 26               [12] 1459 	add	a,@r0
      000567 FE               [12] 1460 	mov	r6,a
      000568 E4               [12] 1461 	clr	a
      000569 08               [12] 1462 	inc	r0
      00056A 36               [12] 1463 	addc	a,@r0
      00056B FF               [12] 1464 	mov	r7,a
      00056C C0 05            [24] 1465 	push	ar5
      00056E C0 04            [24] 1466 	push	ar4
      000570 C0 03            [24] 1467 	push	ar3
      000572 C0 02            [24] 1468 	push	ar2
      000574 74 30            [12] 1469 	mov	a,#0x30
      000576 C0 E0            [24] 1470 	push	acc
      000578 E4               [12] 1471 	clr	a
      000579 C0 E0            [24] 1472 	push	acc
      00057B 8E 82            [24] 1473 	mov	dpl,r6
      00057D 8F 83            [24] 1474 	mov	dph,r7
      00057F 12r00r00         [24] 1475 	lcall	__modsint
      000582 AE 82            [24] 1476 	mov	r6,dpl
      000584 AF 83            [24] 1477 	mov	r7,dph
      000586 15 81            [12] 1478 	dec	sp
      000588 15 81            [12] 1479 	dec	sp
      00058A D0 02            [24] 1480 	pop	ar2
      00058C D0 03            [24] 1481 	pop	ar3
      00058E D0 04            [24] 1482 	pop	ar4
      000590 D0 05            [24] 1483 	pop	ar5
      000592 A8*00            [24] 1484 	mov	r0,_bp
      000594 08               [12] 1485 	inc	r0
      000595 EE               [12] 1486 	mov	a,r6
      000596 26               [12] 1487 	add	a,@r0
      000597 FC               [12] 1488 	mov	r4,a
      000598 EF               [12] 1489 	mov	a,r7
      000599 08               [12] 1490 	inc	r0
      00059A 36               [12] 1491 	addc	a,@r0
      00059B FD               [12] 1492 	mov	r5,a
      00059C EC               [12] 1493 	mov	a,r4
      00059D 24r00            [12] 1494 	add	a,#_u
      00059F F5 82            [12] 1495 	mov	dpl,a
      0005A1 ED               [12] 1496 	mov	a,r5
      0005A2 34s48            [12] 1497 	addc	a,#(_u >> 8)
      0005A4 F5 83            [12] 1498 	mov	dph,a
      0005A6 E0               [24] 1499 	movx	a,@dptr
      0005A7 FD               [12] 1500 	mov	r5,a
      0005A8 7C 00            [12] 1501 	mov	r4,#0x00
      0005AA E5*00            [12] 1502 	mov	a,_bp
      0005AC 24 07            [12] 1503 	add	a,#0x07
      0005AE F8               [12] 1504 	mov	r0,a
      0005AF ED               [12] 1505 	mov	a,r5
      0005B0 2B               [12] 1506 	add	a,r3
      0005B1 F6               [12] 1507 	mov	@r0,a
      0005B2 EC               [12] 1508 	mov	a,r4
      0005B3 3A               [12] 1509 	addc	a,r2
      0005B4 08               [12] 1510 	inc	r0
      0005B5 F6               [12] 1511 	mov	@r0,a
                                   1512 ;	life.c:223: UPDN(-1, 0);
      0005B6 E5*00            [12] 1513 	mov	a,_bp
      0005B8 24 0F            [12] 1514 	add	a,#0x0f
      0005BA F8               [12] 1515 	mov	r0,a
      0005BB 74 30            [12] 1516 	mov	a,#0x30
      0005BD 26               [12] 1517 	add	a,@r0
      0005BE FC               [12] 1518 	mov	r4,a
      0005BF E4               [12] 1519 	clr	a
      0005C0 08               [12] 1520 	inc	r0
      0005C1 36               [12] 1521 	addc	a,@r0
      0005C2 FD               [12] 1522 	mov	r5,a
      0005C3 C0 07            [24] 1523 	push	ar7
      0005C5 C0 06            [24] 1524 	push	ar6
      0005C7 74 30            [12] 1525 	mov	a,#0x30
      0005C9 C0 E0            [24] 1526 	push	acc
      0005CB E4               [12] 1527 	clr	a
      0005CC C0 E0            [24] 1528 	push	acc
      0005CE 8C 82            [24] 1529 	mov	dpl,r4
      0005D0 8D 83            [24] 1530 	mov	dph,r5
      0005D2 12r00r00         [24] 1531 	lcall	__modsint
      0005D5 AC 82            [24] 1532 	mov	r4,dpl
      0005D7 AD 83            [24] 1533 	mov	r5,dph
      0005D9 15 81            [12] 1534 	dec	sp
      0005DB 15 81            [12] 1535 	dec	sp
      0005DD A8*00            [24] 1536 	mov	r0,_bp
      0005DF 08               [12] 1537 	inc	r0
      0005E0 EC               [12] 1538 	mov	a,r4
      0005E1 26               [12] 1539 	add	a,@r0
      0005E2 FA               [12] 1540 	mov	r2,a
      0005E3 ED               [12] 1541 	mov	a,r5
      0005E4 08               [12] 1542 	inc	r0
      0005E5 36               [12] 1543 	addc	a,@r0
      0005E6 FB               [12] 1544 	mov	r3,a
      0005E7 EA               [12] 1545 	mov	a,r2
      0005E8 24r00            [12] 1546 	add	a,#_u
      0005EA F5 82            [12] 1547 	mov	dpl,a
      0005EC EB               [12] 1548 	mov	a,r3
      0005ED 34s48            [12] 1549 	addc	a,#(_u >> 8)
      0005EF F5 83            [12] 1550 	mov	dph,a
      0005F1 E0               [24] 1551 	movx	a,@dptr
      0005F2 FB               [12] 1552 	mov	r3,a
      0005F3 7A 00            [12] 1553 	mov	r2,#0x00
      0005F5 E5*00            [12] 1554 	mov	a,_bp
      0005F7 24 07            [12] 1555 	add	a,#0x07
      0005F9 F8               [12] 1556 	mov	r0,a
      0005FA EB               [12] 1557 	mov	a,r3
      0005FB 26               [12] 1558 	add	a,@r0
      0005FC F6               [12] 1559 	mov	@r0,a
      0005FD EA               [12] 1560 	mov	a,r2
      0005FE 08               [12] 1561 	inc	r0
      0005FF 36               [12] 1562 	addc	a,@r0
      000600 F6               [12] 1563 	mov	@r0,a
                                   1564 ;	life.c:224: UPDN(-1, 1);
      000601 E5*00            [12] 1565 	mov	a,_bp
      000603 24 0F            [12] 1566 	add	a,#0x0f
      000605 F8               [12] 1567 	mov	r0,a
      000606 74 31            [12] 1568 	mov	a,#0x31
      000608 26               [12] 1569 	add	a,@r0
      000609 FA               [12] 1570 	mov	r2,a
      00060A E4               [12] 1571 	clr	a
      00060B 08               [12] 1572 	inc	r0
      00060C 36               [12] 1573 	addc	a,@r0
      00060D FB               [12] 1574 	mov	r3,a
      00060E C0 05            [24] 1575 	push	ar5
      000610 C0 04            [24] 1576 	push	ar4
      000612 74 30            [12] 1577 	mov	a,#0x30
      000614 C0 E0            [24] 1578 	push	acc
      000616 E4               [12] 1579 	clr	a
      000617 C0 E0            [24] 1580 	push	acc
      000619 8A 82            [24] 1581 	mov	dpl,r2
      00061B 8B 83            [24] 1582 	mov	dph,r3
      00061D 12r00r00         [24] 1583 	lcall	__modsint
      000620 C8               [12] 1584 	xch	a,r0
      000621 E5*00            [12] 1585 	mov	a,_bp
      000623 24 0D            [12] 1586 	add	a,#0x0d
      000625 C8               [12] 1587 	xch	a,r0
      000626 A6 82            [24] 1588 	mov	@r0,dpl
      000628 08               [12] 1589 	inc	r0
      000629 A6 83            [24] 1590 	mov	@r0,dph
      00062B 15 81            [12] 1591 	dec	sp
      00062D 15 81            [12] 1592 	dec	sp
      00062F D0 04            [24] 1593 	pop	ar4
      000631 D0 05            [24] 1594 	pop	ar5
      000633 D0 06            [24] 1595 	pop	ar6
      000635 D0 07            [24] 1596 	pop	ar7
      000637 A8*00            [24] 1597 	mov	r0,_bp
      000639 08               [12] 1598 	inc	r0
      00063A E5*00            [12] 1599 	mov	a,_bp
      00063C 24 0D            [12] 1600 	add	a,#0x0d
      00063E F9               [12] 1601 	mov	r1,a
      00063F E7               [12] 1602 	mov	a,@r1
      000640 26               [12] 1603 	add	a,@r0
      000641 FA               [12] 1604 	mov	r2,a
      000642 09               [12] 1605 	inc	r1
      000643 E7               [12] 1606 	mov	a,@r1
      000644 08               [12] 1607 	inc	r0
      000645 36               [12] 1608 	addc	a,@r0
      000646 FB               [12] 1609 	mov	r3,a
      000647 EA               [12] 1610 	mov	a,r2
      000648 24r00            [12] 1611 	add	a,#_u
      00064A F5 82            [12] 1612 	mov	dpl,a
      00064C EB               [12] 1613 	mov	a,r3
      00064D 34s48            [12] 1614 	addc	a,#(_u >> 8)
      00064F F5 83            [12] 1615 	mov	dph,a
      000651 E0               [24] 1616 	movx	a,@dptr
      000652 FB               [12] 1617 	mov	r3,a
      000653 7A 00            [12] 1618 	mov	r2,#0x00
      000655 E5*00            [12] 1619 	mov	a,_bp
      000657 24 07            [12] 1620 	add	a,#0x07
      000659 F8               [12] 1621 	mov	r0,a
      00065A EB               [12] 1622 	mov	a,r3
      00065B 26               [12] 1623 	add	a,@r0
      00065C F6               [12] 1624 	mov	@r0,a
      00065D EA               [12] 1625 	mov	a,r2
      00065E 08               [12] 1626 	inc	r0
      00065F 36               [12] 1627 	addc	a,@r0
      000660 F6               [12] 1628 	mov	@r0,a
                                   1629 ;	life.c:225: UPDN(0, -1);
      000661 E5*00            [12] 1630 	mov	a,_bp
      000663 24 03            [12] 1631 	add	a,#0x03
      000665 F8               [12] 1632 	mov	r0,a
      000666 EE               [12] 1633 	mov	a,r6
      000667 26               [12] 1634 	add	a,@r0
      000668 FA               [12] 1635 	mov	r2,a
      000669 EF               [12] 1636 	mov	a,r7
      00066A 08               [12] 1637 	inc	r0
      00066B 36               [12] 1638 	addc	a,@r0
      00066C FB               [12] 1639 	mov	r3,a
      00066D EA               [12] 1640 	mov	a,r2
      00066E 24r00            [12] 1641 	add	a,#_u
      000670 F5 82            [12] 1642 	mov	dpl,a
      000672 EB               [12] 1643 	mov	a,r3
      000673 34s48            [12] 1644 	addc	a,#(_u >> 8)
      000675 F5 83            [12] 1645 	mov	dph,a
      000677 E0               [24] 1646 	movx	a,@dptr
      000678 FB               [12] 1647 	mov	r3,a
      000679 7A 00            [12] 1648 	mov	r2,#0x00
      00067B E5*00            [12] 1649 	mov	a,_bp
      00067D 24 07            [12] 1650 	add	a,#0x07
      00067F F8               [12] 1651 	mov	r0,a
      000680 EB               [12] 1652 	mov	a,r3
      000681 26               [12] 1653 	add	a,@r0
      000682 F6               [12] 1654 	mov	@r0,a
      000683 EA               [12] 1655 	mov	a,r2
      000684 08               [12] 1656 	inc	r0
      000685 36               [12] 1657 	addc	a,@r0
      000686 F6               [12] 1658 	mov	@r0,a
                                   1659 ;	life.c:226: UPDN(0, 0);
      000687 E5*00            [12] 1660 	mov	a,_bp
      000689 24 03            [12] 1661 	add	a,#0x03
      00068B F8               [12] 1662 	mov	r0,a
      00068C EC               [12] 1663 	mov	a,r4
      00068D 26               [12] 1664 	add	a,@r0
      00068E FA               [12] 1665 	mov	r2,a
      00068F ED               [12] 1666 	mov	a,r5
      000690 08               [12] 1667 	inc	r0
      000691 36               [12] 1668 	addc	a,@r0
      000692 FB               [12] 1669 	mov	r3,a
      000693 EA               [12] 1670 	mov	a,r2
      000694 24r00            [12] 1671 	add	a,#_u
      000696 F5 82            [12] 1672 	mov	dpl,a
      000698 EB               [12] 1673 	mov	a,r3
      000699 34s48            [12] 1674 	addc	a,#(_u >> 8)
      00069B F5 83            [12] 1675 	mov	dph,a
      00069D E0               [24] 1676 	movx	a,@dptr
      00069E FB               [12] 1677 	mov	r3,a
      00069F 7A 00            [12] 1678 	mov	r2,#0x00
      0006A1 E5*00            [12] 1679 	mov	a,_bp
      0006A3 24 07            [12] 1680 	add	a,#0x07
      0006A5 F8               [12] 1681 	mov	r0,a
      0006A6 EB               [12] 1682 	mov	a,r3
      0006A7 26               [12] 1683 	add	a,@r0
      0006A8 F6               [12] 1684 	mov	@r0,a
      0006A9 EA               [12] 1685 	mov	a,r2
      0006AA 08               [12] 1686 	inc	r0
      0006AB 36               [12] 1687 	addc	a,@r0
      0006AC F6               [12] 1688 	mov	@r0,a
                                   1689 ;	life.c:227: UPDN(0, 1);
      0006AD E5*00            [12] 1690 	mov	a,_bp
      0006AF 24 03            [12] 1691 	add	a,#0x03
      0006B1 F8               [12] 1692 	mov	r0,a
      0006B2 E5*00            [12] 1693 	mov	a,_bp
      0006B4 24 0D            [12] 1694 	add	a,#0x0d
      0006B6 F9               [12] 1695 	mov	r1,a
      0006B7 E7               [12] 1696 	mov	a,@r1
      0006B8 26               [12] 1697 	add	a,@r0
      0006B9 FA               [12] 1698 	mov	r2,a
      0006BA 09               [12] 1699 	inc	r1
      0006BB E7               [12] 1700 	mov	a,@r1
      0006BC 08               [12] 1701 	inc	r0
      0006BD 36               [12] 1702 	addc	a,@r0
      0006BE FB               [12] 1703 	mov	r3,a
      0006BF EA               [12] 1704 	mov	a,r2
      0006C0 24r00            [12] 1705 	add	a,#_u
      0006C2 F5 82            [12] 1706 	mov	dpl,a
      0006C4 EB               [12] 1707 	mov	a,r3
      0006C5 34s48            [12] 1708 	addc	a,#(_u >> 8)
      0006C7 F5 83            [12] 1709 	mov	dph,a
      0006C9 E0               [24] 1710 	movx	a,@dptr
      0006CA FB               [12] 1711 	mov	r3,a
      0006CB 7A 00            [12] 1712 	mov	r2,#0x00
      0006CD E5*00            [12] 1713 	mov	a,_bp
      0006CF 24 07            [12] 1714 	add	a,#0x07
      0006D1 F8               [12] 1715 	mov	r0,a
      0006D2 EB               [12] 1716 	mov	a,r3
      0006D3 26               [12] 1717 	add	a,@r0
      0006D4 FB               [12] 1718 	mov	r3,a
      0006D5 EA               [12] 1719 	mov	a,r2
      0006D6 08               [12] 1720 	inc	r0
      0006D7 36               [12] 1721 	addc	a,@r0
      0006D8 FA               [12] 1722 	mov	r2,a
                                   1723 ;	life.c:228: UPDN(1, -1);
      0006D9 E5*00            [12] 1724 	mov	a,_bp
      0006DB 24 05            [12] 1725 	add	a,#0x05
      0006DD F8               [12] 1726 	mov	r0,a
      0006DE EE               [12] 1727 	mov	a,r6
      0006DF 26               [12] 1728 	add	a,@r0
      0006E0 FE               [12] 1729 	mov	r6,a
      0006E1 EF               [12] 1730 	mov	a,r7
      0006E2 08               [12] 1731 	inc	r0
      0006E3 36               [12] 1732 	addc	a,@r0
      0006E4 FF               [12] 1733 	mov	r7,a
      0006E5 EE               [12] 1734 	mov	a,r6
      0006E6 24r00            [12] 1735 	add	a,#_u
      0006E8 F5 82            [12] 1736 	mov	dpl,a
      0006EA EF               [12] 1737 	mov	a,r7
      0006EB 34s48            [12] 1738 	addc	a,#(_u >> 8)
      0006ED F5 83            [12] 1739 	mov	dph,a
      0006EF E0               [24] 1740 	movx	a,@dptr
      0006F0 7E 00            [12] 1741 	mov	r6,#0x00
      0006F2 2B               [12] 1742 	add	a,r3
      0006F3 FF               [12] 1743 	mov	r7,a
      0006F4 EE               [12] 1744 	mov	a,r6
      0006F5 3A               [12] 1745 	addc	a,r2
      0006F6 FE               [12] 1746 	mov	r6,a
                                   1747 ;	life.c:229: UPDN(1, 0);
      0006F7 E5*00            [12] 1748 	mov	a,_bp
      0006F9 24 05            [12] 1749 	add	a,#0x05
      0006FB F8               [12] 1750 	mov	r0,a
      0006FC EC               [12] 1751 	mov	a,r4
      0006FD 26               [12] 1752 	add	a,@r0
      0006FE FC               [12] 1753 	mov	r4,a
      0006FF ED               [12] 1754 	mov	a,r5
      000700 08               [12] 1755 	inc	r0
      000701 36               [12] 1756 	addc	a,@r0
      000702 FD               [12] 1757 	mov	r5,a
      000703 EC               [12] 1758 	mov	a,r4
      000704 24r00            [12] 1759 	add	a,#_u
      000706 F5 82            [12] 1760 	mov	dpl,a
      000708 ED               [12] 1761 	mov	a,r5
      000709 34s48            [12] 1762 	addc	a,#(_u >> 8)
      00070B F5 83            [12] 1763 	mov	dph,a
      00070D E0               [24] 1764 	movx	a,@dptr
      00070E 7C 00            [12] 1765 	mov	r4,#0x00
      000710 2F               [12] 1766 	add	a,r7
      000711 FD               [12] 1767 	mov	r5,a
      000712 EC               [12] 1768 	mov	a,r4
      000713 3E               [12] 1769 	addc	a,r6
      000714 FC               [12] 1770 	mov	r4,a
                                   1771 ;	life.c:230: UPDN(1, 1);
      000715 E5*00            [12] 1772 	mov	a,_bp
      000717 24 05            [12] 1773 	add	a,#0x05
      000719 F8               [12] 1774 	mov	r0,a
      00071A E5*00            [12] 1775 	mov	a,_bp
      00071C 24 0D            [12] 1776 	add	a,#0x0d
      00071E F9               [12] 1777 	mov	r1,a
      00071F E7               [12] 1778 	mov	a,@r1
      000720 26               [12] 1779 	add	a,@r0
      000721 FE               [12] 1780 	mov	r6,a
      000722 09               [12] 1781 	inc	r1
      000723 E7               [12] 1782 	mov	a,@r1
      000724 08               [12] 1783 	inc	r0
      000725 36               [12] 1784 	addc	a,@r0
      000726 FF               [12] 1785 	mov	r7,a
      000727 EE               [12] 1786 	mov	a,r6
      000728 24r00            [12] 1787 	add	a,#_u
      00072A F5 82            [12] 1788 	mov	dpl,a
      00072C EF               [12] 1789 	mov	a,r7
      00072D 34s48            [12] 1790 	addc	a,#(_u >> 8)
      00072F F5 83            [12] 1791 	mov	dph,a
      000731 E0               [24] 1792 	movx	a,@dptr
      000732 7E 00            [12] 1793 	mov	r6,#0x00
      000734 2D               [12] 1794 	add	a,r5
      000735 FF               [12] 1795 	mov	r7,a
      000736 EE               [12] 1796 	mov	a,r6
      000737 3C               [12] 1797 	addc	a,r4
      000738 FE               [12] 1798 	mov	r6,a
                                   1799 ;	life.c:233: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000739 E5*00            [12] 1800 	mov	a,_bp
      00073B 24 09            [12] 1801 	add	a,#0x09
      00073D F8               [12] 1802 	mov	r0,a
      00073E E6               [12] 1803 	mov	a,@r0
      00073F 24r00            [12] 1804 	add	a,#_nu
      000741 FB               [12] 1805 	mov	r3,a
      000742 08               [12] 1806 	inc	r0
      000743 E6               [12] 1807 	mov	a,@r0
      000744 34s6C            [12] 1808 	addc	a,#(_nu >> 8)
      000746 FA               [12] 1809 	mov	r2,a
      000747 BF 03 09         [24] 1810 	cjne	r7,#0x03,00177$
      00074A BE 00 06         [24] 1811 	cjne	r6,#0x00,00177$
      00074D D0 05            [24] 1812 	pop	ar5
      00074F D0 04            [24] 1813 	pop	ar4
      000751 80 2F            [24] 1814 	sjmp	00140$
      000753                       1815 00177$:
      000753 D0 05            [24] 1816 	pop	ar5
      000755 D0 04            [24] 1817 	pop	ar4
      000757 BF 02 24         [24] 1818 	cjne	r7,#0x02,00139$
      00075A BE 00 21         [24] 1819 	cjne	r6,#0x00,00139$
      00075D E5*00            [12] 1820 	mov	a,_bp
      00075F 24 0B            [12] 1821 	add	a,#0x0b
      000761 F8               [12] 1822 	mov	r0,a
      000762 E5*00            [12] 1823 	mov	a,_bp
      000764 24 0F            [12] 1824 	add	a,#0x0f
      000766 F9               [12] 1825 	mov	r1,a
      000767 E7               [12] 1826 	mov	a,@r1
      000768 26               [12] 1827 	add	a,@r0
      000769 FE               [12] 1828 	mov	r6,a
      00076A 09               [12] 1829 	inc	r1
      00076B E7               [12] 1830 	mov	a,@r1
      00076C 08               [12] 1831 	inc	r0
      00076D 36               [12] 1832 	addc	a,@r0
      00076E FF               [12] 1833 	mov	r7,a
      00076F EE               [12] 1834 	mov	a,r6
      000770 24r00            [12] 1835 	add	a,#_u
      000772 FE               [12] 1836 	mov	r6,a
      000773 EF               [12] 1837 	mov	a,r7
      000774 34s48            [12] 1838 	addc	a,#(_u >> 8)
      000776 FF               [12] 1839 	mov	r7,a
      000777 8E 82            [24] 1840 	mov	dpl,r6
      000779 8F 83            [24] 1841 	mov	dph,r7
      00077B E0               [24] 1842 	movx	a,@dptr
      00077C 70 04            [24] 1843 	jnz	00140$
      00077E                       1844 00139$:
                                   1845 ;	assignBit
      00077E C2*00            [12] 1846 	clr	b0
      000780 80 02            [24] 1847 	sjmp	00141$
      000782                       1848 00140$:
                                   1849 ;	assignBit
      000782 D2*00            [12] 1850 	setb	b0
      000784                       1851 00141$:
      000784 A2*00            [12] 1852 	mov	c,b0
      000786 E4               [12] 1853 	clr	a
      000787 33               [12] 1854 	rlc	a
      000788 8B 82            [24] 1855 	mov	dpl,r3
      00078A 8A 83            [24] 1856 	mov	dph,r2
      00078C F0               [24] 1857 	movx	@dptr,a
                                   1858 ;	life.c:234: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00078D E5*00            [12] 1859 	mov	a,_bp
      00078F 24 0F            [12] 1860 	add	a,#0x0f
      000791 F8               [12] 1861 	mov	r0,a
      000792 E6               [12] 1862 	mov	a,@r0
      000793 2C               [12] 1863 	add	a,r4
      000794 FE               [12] 1864 	mov	r6,a
      000795 08               [12] 1865 	inc	r0
      000796 E6               [12] 1866 	mov	a,@r0
      000797 3D               [12] 1867 	addc	a,r5
      000798 FF               [12] 1868 	mov	r7,a
      000799 EE               [12] 1869 	mov	a,r6
      00079A 24r00            [12] 1870 	add	a,#_pu
      00079C F5 82            [12] 1871 	mov	dpl,a
      00079E EF               [12] 1872 	mov	a,r7
      00079F 34s24            [12] 1873 	addc	a,#(_pu >> 8)
      0007A1 F5 83            [12] 1874 	mov	dph,a
      0007A3 E0               [24] 1875 	movx	a,@dptr
      0007A4 FB               [12] 1876 	mov	r3,a
      0007A5 EE               [12] 1877 	mov	a,r6
      0007A6 24r00            [12] 1878 	add	a,#_nu
      0007A8 F5 82            [12] 1879 	mov	dpl,a
      0007AA EF               [12] 1880 	mov	a,r7
      0007AB 34s6C            [12] 1881 	addc	a,#(_nu >> 8)
      0007AD F5 83            [12] 1882 	mov	dph,a
      0007AF E0               [24] 1883 	movx	a,@dptr
      0007B0 FA               [12] 1884 	mov	r2,a
      0007B1 6B               [12] 1885 	xrl	a,r3
      0007B2 78r13            [12] 1886 	mov	r0,#_cycle2
      0007B4 46               [12] 1887 	orl	a,@r0
      0007B5 F6               [12] 1888 	mov	@r0,a
                                   1889 ;	life.c:235: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0007B6 EE               [12] 1890 	mov	a,r6
      0007B7 24r00            [12] 1891 	add	a,#_u
      0007B9 F5 82            [12] 1892 	mov	dpl,a
      0007BB EF               [12] 1893 	mov	a,r7
      0007BC 34s48            [12] 1894 	addc	a,#(_u >> 8)
      0007BE F5 83            [12] 1895 	mov	dph,a
      0007C0 E0               [24] 1896 	movx	a,@dptr
      0007C1 FF               [12] 1897 	mov	r7,a
      0007C2 EA               [12] 1898 	mov	a,r2
      0007C3 6F               [12] 1899 	xrl	a,r7
      0007C4 78r12            [12] 1900 	mov	r0,#_fixed
      0007C6 46               [12] 1901 	orl	a,@r0
      0007C7 F6               [12] 1902 	mov	@r0,a
                                   1903 ;	life.c:216: for (x = 0; x < W; x++) {
      0007C8 E5*00            [12] 1904 	mov	a,_bp
      0007CA 24 0F            [12] 1905 	add	a,#0x0f
      0007CC F8               [12] 1906 	mov	r0,a
      0007CD 06               [12] 1907 	inc	@r0
      0007CE B6 00 02         [24] 1908 	cjne	@r0,#0x00,00181$
      0007D1 08               [12] 1909 	inc	r0
      0007D2 06               [12] 1910 	inc	@r0
      0007D3                       1911 00181$:
      0007D3 E5*00            [12] 1912 	mov	a,_bp
      0007D5 24 0F            [12] 1913 	add	a,#0x0f
      0007D7 F8               [12] 1914 	mov	r0,a
      0007D8 C3               [12] 1915 	clr	c
      0007D9 E6               [12] 1916 	mov	a,@r0
      0007DA 94 30            [12] 1917 	subb	a,#0x30
      0007DC 08               [12] 1918 	inc	r0
      0007DD E6               [12] 1919 	mov	a,@r0
      0007DE 64 80            [12] 1920 	xrl	a,#0x80
      0007E0 94 80            [12] 1921 	subb	a,#0x80
      0007E2 50 03            [24] 1922 	jnc	00182$
      0007E4 02r05r20         [24] 1923 	ljmp	00133$
      0007E7                       1924 00182$:
                                   1925 ;	life.c:213: for (y = 0; y < H; y++) {
      0007E7 74 30            [12] 1926 	mov	a,#0x30
      0007E9 2C               [12] 1927 	add	a,r4
      0007EA FC               [12] 1928 	mov	r4,a
      0007EB E4               [12] 1929 	clr	a
      0007EC 3D               [12] 1930 	addc	a,r5
      0007ED FD               [12] 1931 	mov	r5,a
      0007EE E5*00            [12] 1932 	mov	a,_bp
      0007F0 24 0B            [12] 1933 	add	a,#0x0b
      0007F2 F8               [12] 1934 	mov	r0,a
      0007F3 74 30            [12] 1935 	mov	a,#0x30
      0007F5 26               [12] 1936 	add	a,@r0
      0007F6 F6               [12] 1937 	mov	@r0,a
      0007F7 E4               [12] 1938 	clr	a
      0007F8 08               [12] 1939 	inc	r0
      0007F9 36               [12] 1940 	addc	a,@r0
      0007FA F6               [12] 1941 	mov	@r0,a
      0007FB E5*00            [12] 1942 	mov	a,_bp
      0007FD 24 11            [12] 1943 	add	a,#0x11
      0007FF F8               [12] 1944 	mov	r0,a
      000800 06               [12] 1945 	inc	@r0
      000801 B6 00 02         [24] 1946 	cjne	@r0,#0x00,00183$
      000804 08               [12] 1947 	inc	r0
      000805 06               [12] 1948 	inc	@r0
      000806                       1949 00183$:
      000806 E5*00            [12] 1950 	mov	a,_bp
      000808 24 11            [12] 1951 	add	a,#0x11
      00080A F8               [12] 1952 	mov	r0,a
      00080B C3               [12] 1953 	clr	c
      00080C E6               [12] 1954 	mov	a,@r0
      00080D 94 C0            [12] 1955 	subb	a,#0xc0
      00080F 08               [12] 1956 	inc	r0
      000810 E6               [12] 1957 	mov	a,@r0
      000811 64 80            [12] 1958 	xrl	a,#0x80
      000813 94 80            [12] 1959 	subb	a,#0x80
      000815 50 03            [24] 1960 	jnc	00184$
      000817 02r04r2B         [24] 1961 	ljmp	00135$
      00081A                       1962 00184$:
                                   1963 ;	life.c:239: OE76 = OE76_0;
      00081A 78r02            [12] 1964 	mov	r0,#_OE76
      00081C 76 3F            [12] 1965 	mov	@r0,#0x3f
                                   1966 ;	life.c:30: OEreg = OE76;
      00081E 90 F0 06         [24] 1967 	mov	dptr,#_OEreg
      000821 74 3F            [12] 1968 	mov	a,#0x3f
      000823 F0               [24] 1969 	movx	@dptr,a
                                   1970 ;	life.c:242: cycle2 = !cycle2;
      000824 78r13            [12] 1971 	mov	r0,#_cycle2
      000826 E6               [12] 1972 	mov	a,@r0
      000827 B4 01 00         [24] 1973 	cjne	a,#0x01,00185$
      00082A                       1974 00185$:
      00082A 92*00            [24] 1975 	mov	b0,c
      00082C 78r13            [12] 1976 	mov	r0,#_cycle2
      00082E E4               [12] 1977 	clr	a
      00082F 33               [12] 1978 	rlc	a
      000830 F6               [12] 1979 	mov	@r0,a
                                   1980 ;	life.c:243: fixed = !fixed;
      000831 78r12            [12] 1981 	mov	r0,#_fixed
      000833 E6               [12] 1982 	mov	a,@r0
      000834 B4 01 00         [24] 1983 	cjne	a,#0x01,00186$
      000837                       1984 00186$:
      000837 92*00            [24] 1985 	mov	b0,c
      000839 78r12            [12] 1986 	mov	r0,#_fixed
      00083B E4               [12] 1987 	clr	a
      00083C 33               [12] 1988 	rlc	a
      00083D F6               [12] 1989 	mov	@r0,a
                                   1990 ;	life.c:245: memcpy(pu, u, sizeof (u));
      00083E E4               [12] 1991 	clr	a
      00083F C0 E0            [24] 1992 	push	acc
      000841 74 24            [12] 1993 	mov	a,#0x24
      000843 C0 E0            [24] 1994 	push	acc
      000845 74r00            [12] 1995 	mov	a,#_u
      000847 C0 E0            [24] 1996 	push	acc
      000849 74s48            [12] 1997 	mov	a,#(_u >> 8)
      00084B C0 E0            [24] 1998 	push	acc
      00084D E4               [12] 1999 	clr	a
      00084E C0 E0            [24] 2000 	push	acc
      000850 90r24r00         [24] 2001 	mov	dptr,#_pu
      000853 75 F0 00         [24] 2002 	mov	b,#0x00
      000856 12r00r00         [24] 2003 	lcall	___memcpy
      000859 E5 81            [12] 2004 	mov	a,sp
      00085B 24 FB            [12] 2005 	add	a,#0xfb
      00085D F5 81            [12] 2006 	mov	sp,a
                                   2007 ;	life.c:246: memcpy(u, nu, sizeof (nu));
      00085F E4               [12] 2008 	clr	a
      000860 C0 E0            [24] 2009 	push	acc
      000862 74 24            [12] 2010 	mov	a,#0x24
      000864 C0 E0            [24] 2011 	push	acc
      000866 74r00            [12] 2012 	mov	a,#_nu
      000868 C0 E0            [24] 2013 	push	acc
      00086A 74s6C            [12] 2014 	mov	a,#(_nu >> 8)
      00086C C0 E0            [24] 2015 	push	acc
      00086E E4               [12] 2016 	clr	a
      00086F C0 E0            [24] 2017 	push	acc
      000871 90r48r00         [24] 2018 	mov	dptr,#_u
      000874 75 F0 00         [24] 2019 	mov	b,#0x00
      000877 12r00r00         [24] 2020 	lcall	___memcpy
      00087A E5 81            [12] 2021 	mov	a,sp
      00087C 24 FB            [12] 2022 	add	a,#0xfb
                                   2023 ;	life.c:248: return;
                                   2024 ;	life.c:249: }
      00087E 85*00 81         [24] 2025 	mov	sp,_bp
      000881 D0*00            [24] 2026 	pop	_bp
      000883 22               [24] 2027 	ret
                                   2028 ;------------------------------------------------------------
                                   2029 ;Allocation info for local variables in function 'main'
                                   2030 ;------------------------------------------------------------
                                   2031 ;c                         Allocated to registers r6 r7 
                                   2032 ;__3932160007              Allocated to registers 
                                   2033 ;__4587520011              Allocated to registers 
                                   2034 ;------------------------------------------------------------
                                   2035 ;	life.c:251: void main(void) {
                                   2036 ;	-----------------------------------------
                                   2037 ;	 function main
                                   2038 ;	-----------------------------------------
      000884                       2039 _main:
                                   2040 ;	life.c:254: IT0 = 1;
                                   2041 ;	assignBit
      000884 D2 88            [12] 2042 	setb	_IT0
                                   2043 ;	life.c:255: IT1 = 1;
                                   2044 ;	assignBit
      000886 D2 8A            [12] 2045 	setb	_IT1
                                   2046 ;	life.c:256: EX0 = 1;
                                   2047 ;	assignBit
      000888 D2 A8            [12] 2048 	setb	_EX0
                                   2049 ;	life.c:257: EX1 = 1;
                                   2050 ;	assignBit
      00088A D2 AA            [12] 2051 	setb	_EX1
                                   2052 ;	life.c:258: EA = 1;
                                   2053 ;	assignBit
      00088C D2 AF            [12] 2054 	setb	_EA
                                   2055 ;	life.c:259: P1_7 = 0;
                                   2056 ;	assignBit
      00088E C2 97            [12] 2057 	clr	_P1_7
                                   2058 ;	life.c:264: __endasm;
      000890 00               [12] 2059 	nop
      000891 00               [12] 2060 	nop
      000892 00               [12] 2061 	nop
                                   2062 ;	life.c:266: srand(RND);
      000893 90 E0 00         [24] 2063 	mov	dptr,#_RND
      000896 E0               [24] 2064 	movx	a,@dptr
      000897 FE               [12] 2065 	mov	r6,a
      000898 A3               [24] 2066 	inc	dptr
      000899 E0               [24] 2067 	movx	a,@dptr
      00089A FF               [12] 2068 	mov	r7,a
      00089B 8E 82            [24] 2069 	mov	dpl,r6
      00089D 8F 83            [24] 2070 	mov	dph,r7
      00089F 12r00r00         [24] 2071 	lcall	_srand
                                   2072 ;	life.c:268: OE76 = OE76_0;
      0008A2 78r02            [12] 2073 	mov	r0,#_OE76
      0008A4 76 3F            [12] 2074 	mov	@r0,#0x3f
                                   2075 ;	life.c:30: OEreg = OE76;
      0008A6 90 F0 06         [24] 2076 	mov	dptr,#_OEreg
      0008A9 74 3F            [12] 2077 	mov	a,#0x3f
      0008AB F0               [24] 2078 	movx	@dptr,a
                                   2079 ;	life.c:43: gen = 0ul;
      0008AC 78r03            [12] 2080 	mov	r0,#_gen
      0008AE E4               [12] 2081 	clr	a
      0008AF F6               [12] 2082 	mov	@r0,a
      0008B0 08               [12] 2083 	inc	r0
      0008B1 F6               [12] 2084 	mov	@r0,a
      0008B2 08               [12] 2085 	inc	r0
      0008B3 F6               [12] 2086 	mov	@r0,a
      0008B4 08               [12] 2087 	inc	r0
      0008B5 F6               [12] 2088 	mov	@r0,a
                                   2089 ;	life.c:44: genc2 = 0ul;
      0008B6 78r07            [12] 2090 	mov	r0,#_genc2
      0008B8 F6               [12] 2091 	mov	@r0,a
      0008B9 08               [12] 2092 	inc	r0
      0008BA F6               [12] 2093 	mov	@r0,a
      0008BB 08               [12] 2094 	inc	r0
      0008BC F6               [12] 2095 	mov	@r0,a
      0008BD 08               [12] 2096 	inc	r0
      0008BE F6               [12] 2097 	mov	@r0,a
                                   2098 ;	life.c:45: genfx = 0ul;
      0008BF 78r0B            [12] 2099 	mov	r0,#_genfx
      0008C1 F6               [12] 2100 	mov	@r0,a
      0008C2 08               [12] 2101 	inc	r0
      0008C3 F6               [12] 2102 	mov	@r0,a
      0008C4 08               [12] 2103 	inc	r0
      0008C5 F6               [12] 2104 	mov	@r0,a
      0008C6 08               [12] 2105 	inc	r0
      0008C7 F6               [12] 2106 	mov	@r0,a
                                   2107 ;	life.c:46: c2set = 0;
      0008C8 78r0F            [12] 2108 	mov	r0,#_c2set
      0008CA 76 00            [12] 2109 	mov	@r0,#0x00
                                   2110 ;	life.c:47: fxset = 0;
      0008CC 78r10            [12] 2111 	mov	r0,#_fxset
      0008CE 76 00            [12] 2112 	mov	@r0,#0x00
                                   2113 ;	life.c:272: pruni = 0;
      0008D0 78r11            [12] 2114 	mov	r0,#_pruni
      0008D2 76 00            [12] 2115 	mov	@r0,#0x00
                                   2116 ;	life.c:274: printstr("\033[?25h\033[m");
      0008D4 90r00r49         [24] 2117 	mov	dptr,#___str_11
      0008D7 75 F0 80         [24] 2118 	mov	b,#0x80
      0008DA 12r00r00         [24] 2119 	lcall	_printstr
                                   2120 ;	life.c:276: for (i0 = 0; !i0; ) {
      0008DD 78r00            [12] 2121 	mov	r0,#_i0
      0008DF 76 00            [12] 2122 	mov	@r0,#0x00
                                   2123 ;	life.c:277: while (1) {
      0008E1                       2124 00133$:
                                   2125 ;	life.c:278: printstr("LIFE [ I L R ] [ D O Q P ] [ S U");
      0008E1 90r00r53         [24] 2126 	mov	dptr,#___str_12
      0008E4 75 F0 80         [24] 2127 	mov	b,#0x80
      0008E7 12r00r00         [24] 2128 	lcall	_printstr
                                   2129 ;	life.c:279: putchar(pruni ? (int)'1' : (int)'0');
      0008EA 78r11            [12] 2130 	mov	r0,#_pruni
      0008EC E6               [12] 2131 	mov	a,@r0
      0008ED 60 06            [24] 2132 	jz	00176$
      0008EF 7E 31            [12] 2133 	mov	r6,#0x31
      0008F1 7F 00            [12] 2134 	mov	r7,#0x00
      0008F3 80 04            [24] 2135 	sjmp	00177$
      0008F5                       2136 00176$:
      0008F5 7E 30            [12] 2137 	mov	r6,#0x30
      0008F7 7F 00            [12] 2138 	mov	r7,#0x00
      0008F9                       2139 00177$:
      0008F9 8E 82            [24] 2140 	mov	dpl,r6
      0008FB 8F 83            [24] 2141 	mov	dph,r7
      0008FD 12r00r00         [24] 2142 	lcall	_putchar
                                   2143 ;	life.c:280: printstr(" B ] T\r\n");
      000900 90r00r74         [24] 2144 	mov	dptr,#___str_13
      000903 75 F0 80         [24] 2145 	mov	b,#0x80
      000906 12r00r00         [24] 2146 	lcall	_printstr
                                   2147 ;	life.c:281: c = toupper(getchar());
      000909 12r00r00         [24] 2148 	lcall	_getchar
      00090C 12r00r00         [24] 2149 	lcall	_toupper
      00090F AE 82            [24] 2150 	mov	r6,dpl
      000911 AF 83            [24] 2151 	mov	r7,dph
                                   2152 ;	life.c:282: if (i0 || (c == (int)'T')) goto term;
      000913 78r00            [12] 2153 	mov	r0,#_i0
      000915 E6               [12] 2154 	mov	a,@r0
      000916 60 03            [24] 2155 	jz	00314$
      000918 02r0Br69         [24] 2156 	ljmp	00160$
      00091B                       2157 00314$:
      00091B BE 54 06         [24] 2158 	cjne	r6,#0x54,00315$
      00091E BF 00 03         [24] 2159 	cjne	r7,#0x00,00315$
      000921 02r0Br69         [24] 2160 	ljmp	00160$
      000924                       2161 00315$:
                                   2162 ;	life.c:283: else if ((c == (int)'I') || (c == (int)'L') || (c == (int)'R')) {
      000924 BE 49 05         [24] 2163 	cjne	r6,#0x49,00316$
      000927 BF 00 02         [24] 2164 	cjne	r7,#0x00,00316$
      00092A 80 0E            [24] 2165 	sjmp	00123$
      00092C                       2166 00316$:
      00092C BE 4C 05         [24] 2167 	cjne	r6,#0x4c,00317$
      00092F BF 00 02         [24] 2168 	cjne	r7,#0x00,00317$
      000932 80 06            [24] 2169 	sjmp	00123$
      000934                       2170 00317$:
      000934 BE 52 34         [24] 2171 	cjne	r6,#0x52,00124$
      000937 BF 00 31         [24] 2172 	cjne	r7,#0x00,00124$
      00093A                       2173 00123$:
                                   2174 ;	life.c:284: if (c == (int)'L') loadiu();
      00093A BE 4C 08         [24] 2175 	cjne	r6,#0x4c,00104$
      00093D BF 00 05         [24] 2176 	cjne	r7,#0x00,00104$
      000940 12r02r6B         [24] 2177 	lcall	_loadiu
      000943 80 09            [24] 2178 	sjmp	00105$
      000945                       2179 00104$:
                                   2180 ;	life.c:285: else if (c == (int)'R') loadriu();
      000945 BE 52 06         [24] 2181 	cjne	r6,#0x52,00105$
      000948 BF 00 03         [24] 2182 	cjne	r7,#0x00,00105$
      00094B 12r03r8E         [24] 2183 	lcall	_loadriu
      00094E                       2184 00105$:
                                   2185 ;	life.c:286: initu();
      00094E 12r00r18         [24] 2186 	lcall	_initu
                                   2187 ;	life.c:287: showu(PRUNI, u);
      000951 74r00            [12] 2188 	mov	a,#_u
      000953 C0 E0            [24] 2189 	push	acc
      000955 74s48            [12] 2190 	mov	a,#(_u >> 8)
      000957 C0 E0            [24] 2191 	push	acc
      000959 E4               [12] 2192 	clr	a
      00095A C0 E0            [24] 2193 	push	acc
      00095C 75 82 04         [24] 2194 	mov	dpl,#0x04
      00095F 12r00r77         [24] 2195 	lcall	_showu
      000962 15 81            [12] 2196 	dec	sp
      000964 15 81            [12] 2197 	dec	sp
      000966 15 81            [12] 2198 	dec	sp
      000968 02r08rE1         [24] 2199 	ljmp	00133$
      00096B                       2200 00124$:
                                   2201 ;	life.c:288: } else if (c == (int)'D') dumpu(iu);
      00096B BE 44 0F         [24] 2202 	cjne	r6,#0x44,00121$
      00096E BF 00 0C         [24] 2203 	cjne	r7,#0x00,00121$
      000971 90r00r00         [24] 2204 	mov	dptr,#_iu
      000974 75 F0 00         [24] 2205 	mov	b,#0x00
      000977 12r01rC5         [24] 2206 	lcall	_dumpu
      00097A 02r08rE1         [24] 2207 	ljmp	00133$
      00097D                       2208 00121$:
                                   2209 ;	life.c:289: else if (c == (int)'O') showu(PRUNI, iu);
      00097D BE 4F 1D         [24] 2210 	cjne	r6,#0x4f,00118$
      000980 BF 00 1A         [24] 2211 	cjne	r7,#0x00,00118$
      000983 74r00            [12] 2212 	mov	a,#_iu
      000985 C0 E0            [24] 2213 	push	acc
      000987 74s00            [12] 2214 	mov	a,#(_iu >> 8)
      000989 C0 E0            [24] 2215 	push	acc
      00098B E4               [12] 2216 	clr	a
      00098C C0 E0            [24] 2217 	push	acc
      00098E 75 82 04         [24] 2218 	mov	dpl,#0x04
      000991 12r00r77         [24] 2219 	lcall	_showu
      000994 15 81            [12] 2220 	dec	sp
      000996 15 81            [12] 2221 	dec	sp
      000998 15 81            [12] 2222 	dec	sp
      00099A 02r08rE1         [24] 2223 	ljmp	00133$
      00099D                       2224 00118$:
                                   2225 ;	life.c:290: else if (c == (int)'Q') dumpu(u);
      00099D BE 51 0F         [24] 2226 	cjne	r6,#0x51,00115$
      0009A0 BF 00 0C         [24] 2227 	cjne	r7,#0x00,00115$
      0009A3 90r48r00         [24] 2228 	mov	dptr,#_u
      0009A6 75 F0 00         [24] 2229 	mov	b,#0x00
      0009A9 12r01rC5         [24] 2230 	lcall	_dumpu
      0009AC 02r08rE1         [24] 2231 	ljmp	00133$
      0009AF                       2232 00115$:
                                   2233 ;	life.c:291: else if (c == (int)'P') showu(PRHDR | PRUNI, u);
      0009AF BE 50 1D         [24] 2234 	cjne	r6,#0x50,00112$
      0009B2 BF 00 1A         [24] 2235 	cjne	r7,#0x00,00112$
      0009B5 74r00            [12] 2236 	mov	a,#_u
      0009B7 C0 E0            [24] 2237 	push	acc
      0009B9 74s48            [12] 2238 	mov	a,#(_u >> 8)
      0009BB C0 E0            [24] 2239 	push	acc
      0009BD E4               [12] 2240 	clr	a
      0009BE C0 E0            [24] 2241 	push	acc
      0009C0 75 82 06         [24] 2242 	mov	dpl,#0x06
      0009C3 12r00r77         [24] 2243 	lcall	_showu
      0009C6 15 81            [12] 2244 	dec	sp
      0009C8 15 81            [12] 2245 	dec	sp
      0009CA 15 81            [12] 2246 	dec	sp
      0009CC 02r08rE1         [24] 2247 	ljmp	00133$
      0009CF                       2248 00112$:
                                   2249 ;	life.c:292: else if (c == (int)'U') pruni = !pruni;
      0009CF BE 55 13         [24] 2250 	cjne	r6,#0x55,00109$
      0009D2 BF 00 10         [24] 2251 	cjne	r7,#0x00,00109$
      0009D5 78r11            [12] 2252 	mov	r0,#_pruni
      0009D7 E6               [12] 2253 	mov	a,@r0
      0009D8 B4 01 00         [24] 2254 	cjne	a,#0x01,00334$
      0009DB                       2255 00334$:
      0009DB 92*00            [24] 2256 	mov	b0,c
      0009DD 78r11            [12] 2257 	mov	r0,#_pruni
      0009DF E4               [12] 2258 	clr	a
      0009E0 33               [12] 2259 	rlc	a
      0009E1 F6               [12] 2260 	mov	@r0,a
      0009E2 02r08rE1         [24] 2261 	ljmp	00133$
      0009E5                       2262 00109$:
                                   2263 ;	life.c:293: else if (c == (int)'S') break;
      0009E5 BE 53 05         [24] 2264 	cjne	r6,#0x53,00335$
      0009E8 BF 00 02         [24] 2265 	cjne	r7,#0x00,00335$
      0009EB 80 03            [24] 2266 	sjmp	00336$
      0009ED                       2267 00335$:
      0009ED 02r08rE1         [24] 2268 	ljmp	00133$
      0009F0                       2269 00336$:
                                   2270 ;	life.c:296: for (i1 = 0; !i0 && !i1; ) {
      0009F0 78r01            [12] 2271 	mov	r0,#_i1
      0009F2 76 00            [12] 2272 	mov	@r0,#0x00
      0009F4                       2273 00170$:
      0009F4 78r00            [12] 2274 	mov	r0,#_i0
      0009F6 E6               [12] 2275 	mov	a,@r0
      0009F7 60 03            [24] 2276 	jz	00337$
      0009F9 02r0Br3C         [24] 2277 	ljmp	00156$
      0009FC                       2278 00337$:
      0009FC 78r01            [12] 2279 	mov	r0,#_i1
      0009FE E6               [12] 2280 	mov	a,@r0
      0009FF 60 03            [24] 2281 	jz	00338$
      000A01 02r0Br3C         [24] 2282 	ljmp	00156$
      000A04                       2283 00338$:
                                   2284 ;	life.c:297: if (fxu()) {
      000A04 78r10            [12] 2285 	mov	r0,#_fxset
      000A06 E6               [12] 2286 	mov	a,@r0
      000A07 60 23            [24] 2287 	jz	00136$
                                   2288 ;	life.c:298: printstr("FIXED AT ");
      000A09 90r00r7D         [24] 2289 	mov	dptr,#___str_14
      000A0C 75 F0 80         [24] 2290 	mov	b,#0x80
      000A0F 12r00r00         [24] 2291 	lcall	_printstr
                                   2292 ;	life.c:299: showu(PRHDR, u);
      000A12 74r00            [12] 2293 	mov	a,#_u
      000A14 C0 E0            [24] 2294 	push	acc
      000A16 74s48            [12] 2295 	mov	a,#(_u >> 8)
      000A18 C0 E0            [24] 2296 	push	acc
      000A1A E4               [12] 2297 	clr	a
      000A1B C0 E0            [24] 2298 	push	acc
      000A1D 75 82 02         [24] 2299 	mov	dpl,#0x02
      000A20 12r00r77         [24] 2300 	lcall	_showu
      000A23 15 81            [12] 2301 	dec	sp
      000A25 15 81            [12] 2302 	dec	sp
      000A27 15 81            [12] 2303 	dec	sp
                                   2304 ;	life.c:300: break;
      000A29 02r0Br3C         [24] 2305 	ljmp	00156$
      000A2C                       2306 00136$:
                                   2307 ;	life.c:302: if (pruni) showu(PRCLR | PRHDR | PRUNI, u);
      000A2C 78r11            [12] 2308 	mov	r0,#_pruni
      000A2E E6               [12] 2309 	mov	a,@r0
      000A2F 60 19            [24] 2310 	jz	00138$
      000A31 74r00            [12] 2311 	mov	a,#_u
      000A33 C0 E0            [24] 2312 	push	acc
      000A35 74s48            [12] 2313 	mov	a,#(_u >> 8)
      000A37 C0 E0            [24] 2314 	push	acc
      000A39 E4               [12] 2315 	clr	a
      000A3A C0 E0            [24] 2316 	push	acc
      000A3C 75 82 07         [24] 2317 	mov	dpl,#0x07
      000A3F 12r00r77         [24] 2318 	lcall	_showu
      000A42 15 81            [12] 2319 	dec	sp
      000A44 15 81            [12] 2320 	dec	sp
      000A46 15 81            [12] 2321 	dec	sp
      000A48 80 17            [24] 2322 	sjmp	00139$
      000A4A                       2323 00138$:
                                   2324 ;	life.c:303: else showu(PRHDR, u);
      000A4A 74r00            [12] 2325 	mov	a,#_u
      000A4C C0 E0            [24] 2326 	push	acc
      000A4E 74s48            [12] 2327 	mov	a,#(_u >> 8)
      000A50 C0 E0            [24] 2328 	push	acc
      000A52 E4               [12] 2329 	clr	a
      000A53 C0 E0            [24] 2330 	push	acc
      000A55 75 82 02         [24] 2331 	mov	dpl,#0x02
      000A58 12r00r77         [24] 2332 	lcall	_showu
      000A5B 15 81            [12] 2333 	dec	sp
      000A5D 15 81            [12] 2334 	dec	sp
      000A5F 15 81            [12] 2335 	dec	sp
      000A61                       2336 00139$:
                                   2337 ;	life.c:53: gen++;
      000A61 78r03            [12] 2338 	mov	r0,#_gen
      000A63 06               [12] 2339 	inc	@r0
      000A64 B6 00 0C         [24] 2340 	cjne	@r0,#0x00,00341$
      000A67 08               [12] 2341 	inc	r0
      000A68 06               [12] 2342 	inc	@r0
      000A69 B6 00 07         [24] 2343 	cjne	@r0,#0x00,00341$
      000A6C 08               [12] 2344 	inc	r0
      000A6D 06               [12] 2345 	inc	@r0
      000A6E B6 00 02         [24] 2346 	cjne	@r0,#0x00,00341$
      000A71 08               [12] 2347 	inc	r0
      000A72 06               [12] 2348 	inc	@r0
      000A73                       2349 00341$:
                                   2350 ;	life.c:305: evolveu();
      000A73 12r03rFA         [24] 2351 	lcall	_evolveu
                                   2352 ;	life.c:306: if (fixed) {
      000A76 78r12            [12] 2353 	mov	r0,#_fixed
      000A78 E6               [12] 2354 	mov	a,@r0
      000A79 60 41            [24] 2355 	jz	00141$
                                   2356 ;	life.c:59: genfx = gen;
      000A7B 78r03            [12] 2357 	mov	r0,#_gen
      000A7D 86 04            [24] 2358 	mov	ar4,@r0
      000A7F 08               [12] 2359 	inc	r0
      000A80 86 05            [24] 2360 	mov	ar5,@r0
      000A82 08               [12] 2361 	inc	r0
      000A83 86 06            [24] 2362 	mov	ar6,@r0
      000A85 08               [12] 2363 	inc	r0
      000A86 86 07            [24] 2364 	mov	ar7,@r0
      000A88 78r0B            [12] 2365 	mov	r0,#_genfx
      000A8A A6 04            [24] 2366 	mov	@r0,ar4
      000A8C 08               [12] 2367 	inc	r0
      000A8D A6 05            [24] 2368 	mov	@r0,ar5
      000A8F 08               [12] 2369 	inc	r0
      000A90 A6 06            [24] 2370 	mov	@r0,ar6
      000A92 08               [12] 2371 	inc	r0
      000A93 A6 07            [24] 2372 	mov	@r0,ar7
                                   2373 ;	life.c:60: fxset = 1;
      000A95 78r10            [12] 2374 	mov	r0,#_fxset
      000A97 76 01            [12] 2375 	mov	@r0,#0x01
                                   2376 ;	life.c:308: printstr("FIXED AT ");
      000A99 90r00r7D         [24] 2377 	mov	dptr,#___str_14
      000A9C 75 F0 80         [24] 2378 	mov	b,#0x80
      000A9F 12r00r00         [24] 2379 	lcall	_printstr
                                   2380 ;	life.c:309: showu(PRHDR, u);
      000AA2 74r00            [12] 2381 	mov	a,#_u
      000AA4 C0 E0            [24] 2382 	push	acc
      000AA6 74s48            [12] 2383 	mov	a,#(_u >> 8)
      000AA8 C0 E0            [24] 2384 	push	acc
      000AAA E4               [12] 2385 	clr	a
      000AAB C0 E0            [24] 2386 	push	acc
      000AAD 75 82 02         [24] 2387 	mov	dpl,#0x02
      000AB0 12r00r77         [24] 2388 	lcall	_showu
      000AB3 15 81            [12] 2389 	dec	sp
      000AB5 15 81            [12] 2390 	dec	sp
      000AB7 15 81            [12] 2391 	dec	sp
                                   2392 ;	life.c:310: break;
      000AB9 02r0Br3C         [24] 2393 	ljmp	00156$
      000ABC                       2394 00141$:
                                   2395 ;	life.c:312: if (cycle2) {
      000ABC 78r13            [12] 2396 	mov	r0,#_cycle2
      000ABE E6               [12] 2397 	mov	a,@r0
      000ABF 60 23            [24] 2398 	jz	00145$
                                   2399 ;	life.c:313: if (!c2u()) updatec2();
      000AC1 78r0F            [12] 2400 	mov	r0,#_c2set
      000AC3 E6               [12] 2401 	mov	a,@r0
      000AC4 70 1E            [24] 2402 	jnz	00145$
                                   2403 ;	life.c:66: genc2 = gen;
      000AC6 78r03            [12] 2404 	mov	r0,#_gen
      000AC8 86 04            [24] 2405 	mov	ar4,@r0
      000ACA 08               [12] 2406 	inc	r0
      000ACB 86 05            [24] 2407 	mov	ar5,@r0
      000ACD 08               [12] 2408 	inc	r0
      000ACE 86 06            [24] 2409 	mov	ar6,@r0
      000AD0 08               [12] 2410 	inc	r0
      000AD1 86 07            [24] 2411 	mov	ar7,@r0
      000AD3 78r07            [12] 2412 	mov	r0,#_genc2
      000AD5 A6 04            [24] 2413 	mov	@r0,ar4
      000AD7 08               [12] 2414 	inc	r0
      000AD8 A6 05            [24] 2415 	mov	@r0,ar5
      000ADA 08               [12] 2416 	inc	r0
      000ADB A6 06            [24] 2417 	mov	@r0,ar6
      000ADD 08               [12] 2418 	inc	r0
      000ADE A6 07            [24] 2419 	mov	@r0,ar7
                                   2420 ;	life.c:67: c2set = 1;
      000AE0 78r0F            [12] 2421 	mov	r0,#_c2set
      000AE2 76 01            [12] 2422 	mov	@r0,#0x01
                                   2423 ;	life.c:313: if (!c2u()) updatec2();
      000AE4                       2424 00145$:
                                   2425 ;	life.c:316: c = getchar_poll();
      000AE4 12r00r00         [24] 2426 	lcall	_getchar_poll
      000AE7 AE 82            [24] 2427 	mov	r6,dpl
      000AE9 AF 83            [24] 2428 	mov	r7,dph
                                   2429 ;	life.c:317: if (c > 0) {
      000AEB C3               [12] 2430 	clr	c
      000AEC E4               [12] 2431 	clr	a
      000AED 9E               [12] 2432 	subb	a,r6
      000AEE 74 80            [12] 2433 	mov	a,#(0x00 ^ 0x80)
      000AF0 8F F0            [24] 2434 	mov	b,r7
      000AF2 63 F0 80         [24] 2435 	xrl	b,#0x80
      000AF5 95 F0            [12] 2436 	subb	a,b
      000AF7 40 03            [24] 2437 	jc	00345$
      000AF9 02r09rF4         [24] 2438 	ljmp	00170$
      000AFC                       2439 00345$:
                                   2440 ;	life.c:318: c = toupper(c);
      000AFC 8E 82            [24] 2441 	mov	dpl,r6
      000AFE 8F 83            [24] 2442 	mov	dph,r7
      000B00 12r00r00         [24] 2443 	lcall	_toupper
      000B03 AE 82            [24] 2444 	mov	r6,dpl
      000B05 AF 83            [24] 2445 	mov	r7,dph
                                   2446 ;	life.c:319: if (c == (int)'U') pruni = !pruni;
      000B07 BE 55 13         [24] 2447 	cjne	r6,#0x55,00152$
      000B0A BF 00 10         [24] 2448 	cjne	r7,#0x00,00152$
      000B0D 78r11            [12] 2449 	mov	r0,#_pruni
      000B0F E6               [12] 2450 	mov	a,@r0
      000B10 B4 01 00         [24] 2451 	cjne	a,#0x01,00348$
      000B13                       2452 00348$:
      000B13 92*00            [24] 2453 	mov	b0,c
      000B15 78r11            [12] 2454 	mov	r0,#_pruni
      000B17 E4               [12] 2455 	clr	a
      000B18 33               [12] 2456 	rlc	a
      000B19 F6               [12] 2457 	mov	@r0,a
      000B1A 02r09rF4         [24] 2458 	ljmp	00170$
      000B1D                       2459 00152$:
                                   2460 ;	life.c:320: else if (c == (int)'T') i0 = 1;
      000B1D BE 54 0A         [24] 2461 	cjne	r6,#0x54,00149$
      000B20 BF 00 07         [24] 2462 	cjne	r7,#0x00,00149$
      000B23 78r00            [12] 2463 	mov	r0,#_i0
      000B25 76 01            [12] 2464 	mov	@r0,#0x01
      000B27 02r09rF4         [24] 2465 	ljmp	00170$
      000B2A                       2466 00149$:
                                   2467 ;	life.c:321: else if (c == (int)'B') i1 = 1;
      000B2A BE 42 05         [24] 2468 	cjne	r6,#0x42,00351$
      000B2D BF 00 02         [24] 2469 	cjne	r7,#0x00,00351$
      000B30 80 03            [24] 2470 	sjmp	00352$
      000B32                       2471 00351$:
      000B32 02r09rF4         [24] 2472 	ljmp	00170$
      000B35                       2473 00352$:
      000B35 78r01            [12] 2474 	mov	r0,#_i1
      000B37 76 01            [12] 2475 	mov	@r0,#0x01
      000B39 02r09rF4         [24] 2476 	ljmp	00170$
      000B3C                       2477 00156$:
                                   2478 ;	life.c:325: if (i1) {
      000B3C 78r01            [12] 2479 	mov	r0,#_i1
      000B3E E6               [12] 2480 	mov	a,@r0
      000B3F 60 20            [24] 2481 	jz	00173$
                                   2482 ;	life.c:326: printstr("BREAK AT ");
      000B41 90r00r87         [24] 2483 	mov	dptr,#___str_15
      000B44 75 F0 80         [24] 2484 	mov	b,#0x80
      000B47 12r00r00         [24] 2485 	lcall	_printstr
                                   2486 ;	life.c:327: showu(PRHDR, u);
      000B4A 74r00            [12] 2487 	mov	a,#_u
      000B4C C0 E0            [24] 2488 	push	acc
      000B4E 74s48            [12] 2489 	mov	a,#(_u >> 8)
      000B50 C0 E0            [24] 2490 	push	acc
      000B52 E4               [12] 2491 	clr	a
      000B53 C0 E0            [24] 2492 	push	acc
      000B55 75 82 02         [24] 2493 	mov	dpl,#0x02
      000B58 12r00r77         [24] 2494 	lcall	_showu
      000B5B 15 81            [12] 2495 	dec	sp
      000B5D 15 81            [12] 2496 	dec	sp
      000B5F 15 81            [12] 2497 	dec	sp
      000B61                       2498 00173$:
                                   2499 ;	life.c:276: for (i0 = 0; !i0; ) {
      000B61 78r00            [12] 2500 	mov	r0,#_i0
      000B63 E6               [12] 2501 	mov	a,@r0
      000B64 70 03            [24] 2502 	jnz	00354$
      000B66 02r08rE1         [24] 2503 	ljmp	00133$
      000B69                       2504 00354$:
                                   2505 ;	life.c:331: term:
      000B69                       2506 00160$:
                                   2507 ;	life.c:332: EA = 0;
                                   2508 ;	assignBit
      000B69 C2 AF            [12] 2509 	clr	_EA
                                   2510 ;	life.c:333: printstr("TERM\r\n");
      000B6B 90r00r91         [24] 2511 	mov	dptr,#___str_16
      000B6E 75 F0 80         [24] 2512 	mov	b,#0x80
      000B71 12r00r00         [24] 2513 	lcall	_printstr
                                   2514 ;	life.c:335: PCON |= 2;
      000B74 43 87 02         [24] 2515 	orl	_PCON,#0x02
                                   2516 ;	life.c:337: return;
                                   2517 ;	life.c:338: }
      000B77 22               [24] 2518 	ret
                                   2519 	.area CSEG    (CODE)
                                   2520 	.area CONST   (CODE)
                                   2521 	.area CONST   (CODE)
      000000                       2522 ___str_0:
      000000 1B                    2523 	.db 0x1b
      000001 5B 32 4A              2524 	.ascii "[2J"
      000004 00                    2525 	.db 0x00
                                   2526 	.area CSEG    (CODE)
                                   2527 	.area CONST   (CODE)
      000005                       2528 ___str_1:
      000005 47 45 4E 20           2529 	.ascii "GEN "
      000009 00                    2530 	.db 0x00
                                   2531 	.area CSEG    (CODE)
                                   2532 	.area CONST   (CODE)
      00000A                       2533 ___str_2:
      00000A 20 43 59 43 4C 45 32  2534 	.ascii " CYCLE2 "
             20
      000012 00                    2535 	.db 0x00
                                   2536 	.area CSEG    (CODE)
                                   2537 	.area CONST   (CODE)
      000013                       2538 ___str_3:
      000013 20 46 49 58 45 44 20  2539 	.ascii " FIXED "
      00001A 00                    2540 	.db 0x00
                                   2541 	.area CSEG    (CODE)
                                   2542 	.area CONST   (CODE)
      00001B                       2543 ___str_4:
      00001B 0D                    2544 	.db 0x0d
      00001C 0A                    2545 	.db 0x0a
      00001D 00                    2546 	.db 0x00
                                   2547 	.area CSEG    (CODE)
                                   2548 	.area CONST   (CODE)
      00001E                       2549 ___str_5:
      00001E 1B                    2550 	.db 0x1b
      00001F 5B 3F 32 35 6C        2551 	.ascii "[?25l"
      000024 00                    2552 	.db 0x00
                                   2553 	.area CSEG    (CODE)
                                   2554 	.area CONST   (CODE)
      000025                       2555 ___str_6:
      000025 1B                    2556 	.db 0x1b
      000026 5B 3F 32 35 68        2557 	.ascii "[?25h"
      00002B 00                    2558 	.db 0x00
                                   2559 	.area CSEG    (CODE)
                                   2560 	.area CONST   (CODE)
      00002C                       2561 ___str_7:
      00002C 23                    2562 	.ascii "#"
      00002D 0A                    2563 	.db 0x0a
      00002E 00                    2564 	.db 0x00
                                   2565 	.area CSEG    (CODE)
                                   2566 	.area CONST   (CODE)
      00002F                       2567 ___str_8:
      00002F 4C 4F 41 44 20 30 20  2568 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00003D 00                    2569 	.db 0x00
                                   2570 	.area CSEG    (CODE)
                                   2571 	.area CONST   (CODE)
      00003E                       2572 ___str_9:
      00003E 3E                    2573 	.ascii ">"
      00003F 0D                    2574 	.db 0x0d
      000040 0A                    2575 	.db 0x0a
      000041 00                    2576 	.db 0x00
                                   2577 	.area CSEG    (CODE)
                                   2578 	.area CONST   (CODE)
      000042                       2579 ___str_10:
      000042 52 41 4E 44 4F 4D     2580 	.ascii "RANDOM"
      000048 00                    2581 	.db 0x00
                                   2582 	.area CSEG    (CODE)
                                   2583 	.area CONST   (CODE)
      000049                       2584 ___str_11:
      000049 1B                    2585 	.db 0x1b
      00004A 5B 3F 32 35 68        2586 	.ascii "[?25h"
      00004F 1B                    2587 	.db 0x1b
      000050 5B 6D                 2588 	.ascii "[m"
      000052 00                    2589 	.db 0x00
                                   2590 	.area CSEG    (CODE)
                                   2591 	.area CONST   (CODE)
      000053                       2592 ___str_12:
      000053 4C 49 46 45 20 5B 20  2593 	.ascii "LIFE [ I L R ] [ D O Q P ] [ S U"
             49 20 4C 20 52 20 5D
             20 5B 20 44 20 4F 20
             51 20 50 20 5D 20 5B
             20 53 20 55
      000073 00                    2594 	.db 0x00
                                   2595 	.area CSEG    (CODE)
                                   2596 	.area CONST   (CODE)
      000074                       2597 ___str_13:
      000074 20 42 20 5D 20 54     2598 	.ascii " B ] T"
      00007A 0D                    2599 	.db 0x0d
      00007B 0A                    2600 	.db 0x0a
      00007C 00                    2601 	.db 0x00
                                   2602 	.area CSEG    (CODE)
                                   2603 	.area CONST   (CODE)
      00007D                       2604 ___str_14:
      00007D 46 49 58 45 44 20 41  2605 	.ascii "FIXED AT "
             54 20
      000086 00                    2606 	.db 0x00
                                   2607 	.area CSEG    (CODE)
                                   2608 	.area CONST   (CODE)
      000087                       2609 ___str_15:
      000087 42 52 45 41 4B 20 41  2610 	.ascii "BREAK AT "
             54 20
      000090 00                    2611 	.db 0x00
                                   2612 	.area CSEG    (CODE)
                                   2613 	.area CONST   (CODE)
      000091                       2614 ___str_16:
      000091 54 45 52 4D           2615 	.ascii "TERM"
      000095 0D                    2616 	.db 0x0d
      000096 0A                    2617 	.db 0x0a
      000097 00                    2618 	.db 0x00
                                   2619 	.area CSEG    (CODE)
                                   2620 	.area XINIT   (CODE)
                                   2621 	.area CABS    (ABS,CODE)
