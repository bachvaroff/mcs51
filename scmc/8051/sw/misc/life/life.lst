                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _srand
                                     21 	.globl _rand
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _FL
                                     29 	.globl _P
                                     30 	.globl _TF2
                                     31 	.globl _EXF2
                                     32 	.globl _RCLK
                                     33 	.globl _TCLK
                                     34 	.globl _EXEN2
                                     35 	.globl _TR2
                                     36 	.globl _C_T2
                                     37 	.globl _CP_RL2
                                     38 	.globl _T2CON_7
                                     39 	.globl _T2CON_6
                                     40 	.globl _T2CON_5
                                     41 	.globl _T2CON_4
                                     42 	.globl _T2CON_3
                                     43 	.globl _T2CON_2
                                     44 	.globl _T2CON_1
                                     45 	.globl _T2CON_0
                                     46 	.globl _PT2
                                     47 	.globl _PS
                                     48 	.globl _PT1
                                     49 	.globl _PX1
                                     50 	.globl _PT0
                                     51 	.globl _PX0
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _EA
                                     69 	.globl _ET2
                                     70 	.globl _ES
                                     71 	.globl _ET1
                                     72 	.globl _EX1
                                     73 	.globl _ET0
                                     74 	.globl _EX0
                                     75 	.globl _P2_7
                                     76 	.globl _P2_6
                                     77 	.globl _P2_5
                                     78 	.globl _P2_4
                                     79 	.globl _P2_3
                                     80 	.globl _P2_2
                                     81 	.globl _P2_1
                                     82 	.globl _P2_0
                                     83 	.globl _SM0
                                     84 	.globl _SM1
                                     85 	.globl _SM2
                                     86 	.globl _REN
                                     87 	.globl _TB8
                                     88 	.globl _RB8
                                     89 	.globl _TI
                                     90 	.globl _RI
                                     91 	.globl _T2EX
                                     92 	.globl _T2
                                     93 	.globl _P1_7
                                     94 	.globl _P1_6
                                     95 	.globl _P1_5
                                     96 	.globl _P1_4
                                     97 	.globl _P1_3
                                     98 	.globl _P1_2
                                     99 	.globl _P1_1
                                    100 	.globl _P1_0
                                    101 	.globl _TF1
                                    102 	.globl _TR1
                                    103 	.globl _TF0
                                    104 	.globl _TR0
                                    105 	.globl _IE1
                                    106 	.globl _IT1
                                    107 	.globl _IE0
                                    108 	.globl _IT0
                                    109 	.globl _P0_7
                                    110 	.globl _P0_6
                                    111 	.globl _P0_5
                                    112 	.globl _P0_4
                                    113 	.globl _P0_3
                                    114 	.globl _P0_2
                                    115 	.globl _P0_1
                                    116 	.globl _P0_0
                                    117 	.globl _B
                                    118 	.globl _A
                                    119 	.globl _ACC
                                    120 	.globl _PSW
                                    121 	.globl _TH2
                                    122 	.globl _TL2
                                    123 	.globl _RCAP2H
                                    124 	.globl _RCAP2L
                                    125 	.globl _T2MOD
                                    126 	.globl _T2CON
                                    127 	.globl _IP
                                    128 	.globl _P3
                                    129 	.globl _IE
                                    130 	.globl _P2
                                    131 	.globl _SBUF
                                    132 	.globl _SCON
                                    133 	.globl _P1
                                    134 	.globl _TH1
                                    135 	.globl _TH0
                                    136 	.globl _TL1
                                    137 	.globl _TL0
                                    138 	.globl _TMOD
                                    139 	.globl _TCON
                                    140 	.globl _PCON
                                    141 	.globl _DPH
                                    142 	.globl _DPL
                                    143 	.globl _SP
                                    144 	.globl _P0
                                    145 ;--------------------------------------------------------
                                    146 ; special function registers
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0	=	0x0080
                           000081   151 _SP	=	0x0081
                           000082   152 _DPL	=	0x0082
                           000083   153 _DPH	=	0x0083
                           000087   154 _PCON	=	0x0087
                           000088   155 _TCON	=	0x0088
                           000089   156 _TMOD	=	0x0089
                           00008A   157 _TL0	=	0x008a
                           00008B   158 _TL1	=	0x008b
                           00008C   159 _TH0	=	0x008c
                           00008D   160 _TH1	=	0x008d
                           000090   161 _P1	=	0x0090
                           000098   162 _SCON	=	0x0098
                           000099   163 _SBUF	=	0x0099
                           0000A0   164 _P2	=	0x00a0
                           0000A8   165 _IE	=	0x00a8
                           0000B0   166 _P3	=	0x00b0
                           0000B8   167 _IP	=	0x00b8
                           0000C8   168 _T2CON	=	0x00c8
                           0000C9   169 _T2MOD	=	0x00c9
                           0000CA   170 _RCAP2L	=	0x00ca
                           0000CB   171 _RCAP2H	=	0x00cb
                           0000CC   172 _TL2	=	0x00cc
                           0000CD   173 _TH2	=	0x00cd
                           0000D0   174 _PSW	=	0x00d0
                           0000E0   175 _ACC	=	0x00e0
                           0000E0   176 _A	=	0x00e0
                           0000F0   177 _B	=	0x00f0
                                    178 ;--------------------------------------------------------
                                    179 ; special function bits
                                    180 ;--------------------------------------------------------
                                    181 	.area RSEG    (ABS,DATA)
      000000                        182 	.org 0x0000
                           000080   183 _P0_0	=	0x0080
                           000081   184 _P0_1	=	0x0081
                           000082   185 _P0_2	=	0x0082
                           000083   186 _P0_3	=	0x0083
                           000084   187 _P0_4	=	0x0084
                           000085   188 _P0_5	=	0x0085
                           000086   189 _P0_6	=	0x0086
                           000087   190 _P0_7	=	0x0087
                           000088   191 _IT0	=	0x0088
                           000089   192 _IE0	=	0x0089
                           00008A   193 _IT1	=	0x008a
                           00008B   194 _IE1	=	0x008b
                           00008C   195 _TR0	=	0x008c
                           00008D   196 _TF0	=	0x008d
                           00008E   197 _TR1	=	0x008e
                           00008F   198 _TF1	=	0x008f
                           000090   199 _P1_0	=	0x0090
                           000091   200 _P1_1	=	0x0091
                           000092   201 _P1_2	=	0x0092
                           000093   202 _P1_3	=	0x0093
                           000094   203 _P1_4	=	0x0094
                           000095   204 _P1_5	=	0x0095
                           000096   205 _P1_6	=	0x0096
                           000097   206 _P1_7	=	0x0097
                           000090   207 _T2	=	0x0090
                           000091   208 _T2EX	=	0x0091
                           000098   209 _RI	=	0x0098
                           000099   210 _TI	=	0x0099
                           00009A   211 _RB8	=	0x009a
                           00009B   212 _TB8	=	0x009b
                           00009C   213 _REN	=	0x009c
                           00009D   214 _SM2	=	0x009d
                           00009E   215 _SM1	=	0x009e
                           00009F   216 _SM0	=	0x009f
                           0000A0   217 _P2_0	=	0x00a0
                           0000A1   218 _P2_1	=	0x00a1
                           0000A2   219 _P2_2	=	0x00a2
                           0000A3   220 _P2_3	=	0x00a3
                           0000A4   221 _P2_4	=	0x00a4
                           0000A5   222 _P2_5	=	0x00a5
                           0000A6   223 _P2_6	=	0x00a6
                           0000A7   224 _P2_7	=	0x00a7
                           0000A8   225 _EX0	=	0x00a8
                           0000A9   226 _ET0	=	0x00a9
                           0000AA   227 _EX1	=	0x00aa
                           0000AB   228 _ET1	=	0x00ab
                           0000AC   229 _ES	=	0x00ac
                           0000AD   230 _ET2	=	0x00ad
                           0000AF   231 _EA	=	0x00af
                           0000B0   232 _P3_0	=	0x00b0
                           0000B1   233 _P3_1	=	0x00b1
                           0000B2   234 _P3_2	=	0x00b2
                           0000B3   235 _P3_3	=	0x00b3
                           0000B4   236 _P3_4	=	0x00b4
                           0000B5   237 _P3_5	=	0x00b5
                           0000B6   238 _P3_6	=	0x00b6
                           0000B7   239 _P3_7	=	0x00b7
                           0000B0   240 _RXD	=	0x00b0
                           0000B1   241 _TXD	=	0x00b1
                           0000B2   242 _INT0	=	0x00b2
                           0000B3   243 _INT1	=	0x00b3
                           0000B4   244 _T0	=	0x00b4
                           0000B5   245 _T1	=	0x00b5
                           0000B6   246 _WR	=	0x00b6
                           0000B7   247 _RD	=	0x00b7
                           0000B8   248 _PX0	=	0x00b8
                           0000B9   249 _PT0	=	0x00b9
                           0000BA   250 _PX1	=	0x00ba
                           0000BB   251 _PT1	=	0x00bb
                           0000BC   252 _PS	=	0x00bc
                           0000BD   253 _PT2	=	0x00bd
                           0000C8   254 _T2CON_0	=	0x00c8
                           0000C9   255 _T2CON_1	=	0x00c9
                           0000CA   256 _T2CON_2	=	0x00ca
                           0000CB   257 _T2CON_3	=	0x00cb
                           0000CC   258 _T2CON_4	=	0x00cc
                           0000CD   259 _T2CON_5	=	0x00cd
                           0000CE   260 _T2CON_6	=	0x00ce
                           0000CF   261 _T2CON_7	=	0x00cf
                           0000C8   262 _CP_RL2	=	0x00c8
                           0000C9   263 _C_T2	=	0x00c9
                           0000CA   264 _TR2	=	0x00ca
                           0000CB   265 _EXEN2	=	0x00cb
                           0000CC   266 _TCLK	=	0x00cc
                           0000CD   267 _RCLK	=	0x00cd
                           0000CE   268 _EXF2	=	0x00ce
                           0000CF   269 _TF2	=	0x00cf
                           0000D0   270 _P	=	0x00d0
                           0000D1   271 _FL	=	0x00d1
                           0000D2   272 _OV	=	0x00d2
                           0000D3   273 _RS0	=	0x00d3
                           0000D4   274 _RS1	=	0x00d4
                           0000D5   275 _F0	=	0x00d5
                           0000D6   276 _AC	=	0x00d6
                           0000D7   277 _CY	=	0x00d7
                                    278 ;--------------------------------------------------------
                                    279 ; overlayable register banks
                                    280 ;--------------------------------------------------------
                                    281 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        284 	.ds 8
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable bit register bank
                                    287 ;--------------------------------------------------------
                                    288 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        289 bits:
      000000                        290 	.ds 1
                           008000   291 	b0 = bits[0]
                           008100   292 	b1 = bits[1]
                           008200   293 	b2 = bits[2]
                           008300   294 	b3 = bits[3]
                           008400   295 	b4 = bits[4]
                           008500   296 	b5 = bits[5]
                           008600   297 	b6 = bits[6]
                           008700   298 	b7 = bits[7]
                                    299 ;--------------------------------------------------------
                                    300 ; internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area DSEG    (DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable items in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 ;--------------------------------------------------------
                                    307 ; Stack segment in internal ram 
                                    308 ;--------------------------------------------------------
                                    309 	.area	SSEG
      000000                        310 __start__stack:
      000000                        311 	.ds	1
                                    312 
                                    313 ;--------------------------------------------------------
                                    314 ; indirectly addressable internal ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area ISEG    (DATA)
      000000                        317 _digits:
      000000                        318 	.ds 16
      000010                        319 _i0:
      000010                        320 	.ds 1
      000011                        321 _i1:
      000011                        322 	.ds 1
      000012                        323 _OE76:
      000012                        324 	.ds 1
      000013                        325 _x:
      000013                        326 	.ds 2
      000015                        327 _y:
      000015                        328 	.ds 2
      000017                        329 _j:
      000017                        330 	.ds 2
      000019                        331 _c:
      000019                        332 	.ds 2
      00001B                        333 _n:
      00001B                        334 	.ds 1
      00001C                        335 _fixed:
      00001C                        336 	.ds 1
      00001D                        337 _cycle2:
      00001D                        338 	.ds 1
      00001E                        339 _x1:
      00001E                        340 	.ds 2
      000020                        341 _y1:
      000020                        342 	.ds 2
      000022                        343 _generation:
      000022                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
                           00FFFE   362 _RND	=	0xfffe
                           00F006   363 _OEreg	=	0xf006
      000000                        364 _iu:
      000000                        365 	.ds 9216
      002400                        366 _pu:
      002400                        367 	.ds 9216
      004800                        368 _u:
      004800                        369 	.ds 9216
      006C00                        370 _nu:
      006C00                        371 	.ds 9216
                                    372 ;--------------------------------------------------------
                                    373 ; absolute external ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XABS    (ABS,XDATA)
                                    376 ;--------------------------------------------------------
                                    377 ; external initialized ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XISEG   (XDATA)
                                    380 	.area HOME    (CODE)
                                    381 	.area GSINIT0 (CODE)
                                    382 	.area GSINIT1 (CODE)
                                    383 	.area GSINIT2 (CODE)
                                    384 	.area GSINIT3 (CODE)
                                    385 	.area GSINIT4 (CODE)
                                    386 	.area GSINIT5 (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area CSEG    (CODE)
                                    390 ;--------------------------------------------------------
                                    391 ; interrupt vector 
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
      000000                        394 __interrupt_vect:
      000000 02r00r00         [24]  395 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  396 	ljmp	_int0
      000006                        397 	.ds	5
      00000B 32               [24]  398 	reti
      00000C                        399 	.ds	7
      000013 02r00r1A         [24]  400 	ljmp	_int1
                                    401 ;--------------------------------------------------------
                                    402 ; global & static initialisations
                                    403 ;--------------------------------------------------------
                                    404 	.area HOME    (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.area GSFINAL (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.globl __sdcc_gsinit_startup
                                    409 	.globl __sdcc_program_startup
                                    410 	.globl __start__stack
                                    411 	.globl __mcs51_genXINIT
                                    412 	.globl __mcs51_genXRAMCLEAR
                                    413 	.globl __mcs51_genRAMCLEAR
                                    414 ;	life.c:29: __idata static const char digits[16] = {
      000000 78r00            [12]  415 	mov	r0,#_digits
      000002 76 30            [12]  416 	mov	@r0,#0x30
      000004 78r01            [12]  417 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  418 	mov	@r0,#0x31
      000008 78r02            [12]  419 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  420 	mov	@r0,#0x32
      00000C 78r03            [12]  421 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  422 	mov	@r0,#0x33
      000010 78r04            [12]  423 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  424 	mov	@r0,#0x34
      000014 78r05            [12]  425 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  426 	mov	@r0,#0x35
      000018 78r06            [12]  427 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  428 	mov	@r0,#0x36
      00001C 78r07            [12]  429 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  430 	mov	@r0,#0x37
      000020 78r08            [12]  431 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  432 	mov	@r0,#0x38
      000024 78r09            [12]  433 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  434 	mov	@r0,#0x39
      000028 78r0A            [12]  435 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  436 	mov	@r0,#0x41
      00002C 78r0B            [12]  437 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  438 	mov	@r0,#0x42
      000030 78r0C            [12]  439 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  440 	mov	@r0,#0x43
      000034 78r0D            [12]  441 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  442 	mov	@r0,#0x44
      000038 78r0E            [12]  443 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  444 	mov	@r0,#0x45
      00003C 78r0F            [12]  445 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  446 	mov	@r0,#0x46
                                    447 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  448 	ljmp	__sdcc_program_startup
                                    449 ;--------------------------------------------------------
                                    450 ; Home
                                    451 ;--------------------------------------------------------
                                    452 	.area HOME    (CODE)
                                    453 	.area HOME    (CODE)
      000016                        454 __sdcc_program_startup:
      000016 02r02r0B         [24]  455 	ljmp	_main
                                    456 ;	return from main will return to caller
                                    457 ;--------------------------------------------------------
                                    458 ; code
                                    459 ;--------------------------------------------------------
                                    460 	.area CSEG    (CODE)
                                    461 ;------------------------------------------------------------
                                    462 ;Allocation info for local variables in function 'putchar'
                                    463 ;------------------------------------------------------------
                                    464 ;c                         Allocated to registers 
                                    465 ;------------------------------------------------------------
                                    466 ;	life.c:10: int putchar(int c) __naked {
                                    467 ;	-----------------------------------------
                                    468 ;	 function putchar
                                    469 ;	-----------------------------------------
      000000                        470 _putchar:
                                    471 ;	naked function: no prologue.
                                    472 ;	life.c:15: __endasm;
      000000 E5 82            [12]  473 	mov	a, dpl
      000002 02 00 30         [24]  474 	ljmp	0x0030
                                    475 ;	life.c:16: }
                                    476 ;	naked function: no epilogue.
                                    477 ;------------------------------------------------------------
                                    478 ;Allocation info for local variables in function 'getchar'
                                    479 ;------------------------------------------------------------
                                    480 ;	life.c:18: int getchar(void) __naked {
                                    481 ;	-----------------------------------------
                                    482 ;	 function getchar
                                    483 ;	-----------------------------------------
      000005                        484 _getchar:
                                    485 ;	naked function: no prologue.
                                    486 ;	life.c:24: __endasm;
      000005 12 00 32         [24]  487 	lcall	0x0032
      000008 F5 82            [12]  488 	mov	dpl, a
      00000A 75 83 00         [24]  489 	mov	dph, #0
      00000D 22               [24]  490 	ret
                                    491 ;	life.c:25: }
                                    492 ;	naked function: no epilogue.
                                    493 ;------------------------------------------------------------
                                    494 ;Allocation info for local variables in function 'int0'
                                    495 ;------------------------------------------------------------
                                    496 ;	life.c:58: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    497 ;	-----------------------------------------
                                    498 ;	 function int0
                                    499 ;	-----------------------------------------
      00000E                        500 _int0:
                           00000F   501 	ar7 = 0x0f
                           00000E   502 	ar6 = 0x0e
                           00000D   503 	ar5 = 0x0d
                           00000C   504 	ar4 = 0x0c
                           00000B   505 	ar3 = 0x0b
                           00000A   506 	ar2 = 0x0a
                           000009   507 	ar1 = 0x09
                           000008   508 	ar0 = 0x08
      00000E C0 D0            [24]  509 	push	psw
      000010 75 D0 08         [24]  510 	mov	psw,#0x08
                                    511 ;	life.c:59: i0 = 1;
      000013 78r10            [12]  512 	mov	r0,#_i0
      000015 76 01            [12]  513 	mov	@r0,#0x01
                                    514 ;	life.c:60: }
      000017 D0 D0            [24]  515 	pop	psw
      000019 32               [24]  516 	reti
                                    517 ;	eliminated unneeded push/pop dpl
                                    518 ;	eliminated unneeded push/pop dph
                                    519 ;	eliminated unneeded push/pop b
                                    520 ;	eliminated unneeded push/pop acc
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'int1'
                                    523 ;------------------------------------------------------------
                                    524 ;	life.c:62: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    525 ;	-----------------------------------------
                                    526 ;	 function int1
                                    527 ;	-----------------------------------------
      00001A                        528 _int1:
      00001A C0 D0            [24]  529 	push	psw
      00001C 75 D0 08         [24]  530 	mov	psw,#0x08
                                    531 ;	life.c:63: i1 = 1;
      00001F 78r11            [12]  532 	mov	r0,#_i1
      000021 76 01            [12]  533 	mov	@r0,#0x01
                                    534 ;	life.c:64: }
      000023 D0 D0            [24]  535 	pop	psw
      000025 32               [24]  536 	reti
                                    537 ;	eliminated unneeded push/pop dpl
                                    538 ;	eliminated unneeded push/pop dph
                                    539 ;	eliminated unneeded push/pop b
                                    540 ;	eliminated unneeded push/pop acc
                                    541 ;------------------------------------------------------------
                                    542 ;Allocation info for local variables in function 'flashOE'
                                    543 ;------------------------------------------------------------
                                    544 ;	life.c:74: static void flashOE(void) {
                                    545 ;	-----------------------------------------
                                    546 ;	 function flashOE
                                    547 ;	-----------------------------------------
      000026                        548 _flashOE:
                           000007   549 	ar7 = 0x07
                           000006   550 	ar6 = 0x06
                           000005   551 	ar5 = 0x05
                           000004   552 	ar4 = 0x04
                           000003   553 	ar3 = 0x03
                           000002   554 	ar2 = 0x02
                           000001   555 	ar1 = 0x01
                           000000   556 	ar0 = 0x00
                                    557 ;	life.c:75: P1_7 = 0;
                                    558 ;	assignBit
      000026 C2 97            [12]  559 	clr	_P1_7
                                    560 ;	life.c:76: OEreg = OE76;
      000028 78r12            [12]  561 	mov	r0,#_OE76
      00002A 90 F0 06         [24]  562 	mov	dptr,#_OEreg
      00002D E6               [12]  563 	mov	a,@r0
      00002E F0               [24]  564 	movx	@dptr,a
                                    565 ;	life.c:77: P1_7 = 1;
                                    566 ;	assignBit
      00002F D2 97            [12]  567 	setb	_P1_7
                                    568 ;	life.c:79: return;
                                    569 ;	life.c:80: }
      000031 22               [24]  570 	ret
                                    571 ;------------------------------------------------------------
                                    572 ;Allocation info for local variables in function 'show'
                                    573 ;------------------------------------------------------------
                                    574 ;hdr                       Allocated to registers r7 
                                    575 ;__1966080005              Allocated to registers 
                                    576 ;s                         Allocated to registers r5 r6 r7 
                                    577 ;__1310720001              Allocated to registers r6 r7 
                                    578 ;a                         Allocated to registers 
                                    579 ;__1310720003              Allocated to registers r6 r7 
                                    580 ;a                         Allocated to registers 
                                    581 ;__1966080008              Allocated to registers 
                                    582 ;s                         Allocated to registers r5 r6 r7 
                                    583 ;__2621440011              Allocated to registers 
                                    584 ;s                         Allocated to registers r5 r6 r7 
                                    585 ;------------------------------------------------------------
                                    586 ;	life.c:116: void show(char hdr) {
                                    587 ;	-----------------------------------------
                                    588 ;	 function show
                                    589 ;	-----------------------------------------
      000032                        590 _show:
                                    591 ;	life.c:117: if (hdr) {
      000032 E5 82            [12]  592 	mov	a,dpl
      000034 FF               [12]  593 	mov	r7,a
      000035 70 03            [24]  594 	jnz	00190$
      000037 02r01r70         [24]  595 	ljmp	00102$
      00003A                        596 00190$:
                                    597 ;	life.c:118: printstr("\033[2J\033[mGEN ");
      00003A 7Dr00            [12]  598 	mov	r5,#___str_0
      00003C 7Es00            [12]  599 	mov	r6,#(___str_0 >> 8)
      00003E 7F 80            [12]  600 	mov	r7,#0x80
                                    601 ;	life.c:53: return;
      000040                        602 00121$:
                                    603 ;	life.c:51: for (; *s; s++) putchar(*s);
      000040 8D 82            [24]  604 	mov	dpl,r5
      000042 8E 83            [24]  605 	mov	dph,r6
      000044 8F F0            [24]  606 	mov	b,r7
      000046 12r00r00         [24]  607 	lcall	__gptrget
      000049 FC               [12]  608 	mov	r4,a
      00004A 60 10            [24]  609 	jz	00109$
      00004C 7B 00            [12]  610 	mov	r3,#0x00
      00004E 8C 82            [24]  611 	mov	dpl,r4
      000050 8B 83            [24]  612 	mov	dph,r3
      000052 12r00r00         [24]  613 	lcall	_putchar
      000055 0D               [12]  614 	inc	r5
                                    615 ;	life.c:118: printstr("\033[2J\033[mGEN ");
      000056 BD 00 E7         [24]  616 	cjne	r5,#0x00,00121$
      000059 0E               [12]  617 	inc	r6
      00005A 80 E4            [24]  618 	sjmp	00121$
      00005C                        619 00109$:
                                    620 ;	life.c:110: print16x(generation[1]);
      00005C 78r24            [12]  621 	mov	r0,#(_generation + 0x0002)
      00005E 86 06            [24]  622 	mov	ar6,@r0
      000060 08               [12]  623 	inc	r0
                                    624 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      000061 E6               [12]  625 	mov	a,@r0
      000062 FF               [12]  626 	mov	r7,a
      000063 C4               [12]  627 	swap	a
      000064 54 0F            [12]  628 	anl	a,#0x0f
      000066 FC               [12]  629 	mov	r4,a
      000067 53 04 0F         [24]  630 	anl	ar4,#0x0f
      00006A EC               [12]  631 	mov	a,r4
      00006B 24r00            [12]  632 	add	a,#_digits
      00006D F9               [12]  633 	mov	r1,a
      00006E 87 05            [24]  634 	mov	ar5,@r1
      000070 7C 00            [12]  635 	mov	r4,#0x00
      000072 8D 82            [24]  636 	mov	dpl,r5
      000074 8C 83            [24]  637 	mov	dph,r4
      000076 12r00r00         [24]  638 	lcall	_putchar
                                    639 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      000079 8F 05            [24]  640 	mov	ar5,r7
      00007B 53 05 0F         [24]  641 	anl	ar5,#0x0f
      00007E ED               [12]  642 	mov	a,r5
      00007F 24r00            [12]  643 	add	a,#_digits
      000081 F9               [12]  644 	mov	r1,a
      000082 87 05            [24]  645 	mov	ar5,@r1
      000084 7C 00            [12]  646 	mov	r4,#0x00
      000086 8D 82            [24]  647 	mov	dpl,r5
      000088 8C 83            [24]  648 	mov	dph,r4
      00008A 12r00r00         [24]  649 	lcall	_putchar
                                    650 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      00008D 8E 04            [24]  651 	mov	ar4,r6
      00008F EF               [12]  652 	mov	a,r7
      000090 C4               [12]  653 	swap	a
      000091 CC               [12]  654 	xch	a,r4
      000092 C4               [12]  655 	swap	a
      000093 54 0F            [12]  656 	anl	a,#0x0f
      000095 6C               [12]  657 	xrl	a,r4
      000096 CC               [12]  658 	xch	a,r4
      000097 54 0F            [12]  659 	anl	a,#0x0f
      000099 CC               [12]  660 	xch	a,r4
      00009A 6C               [12]  661 	xrl	a,r4
      00009B CC               [12]  662 	xch	a,r4
      00009C 53 04 0F         [24]  663 	anl	ar4,#0x0f
      00009F EC               [12]  664 	mov	a,r4
      0000A0 24r00            [12]  665 	add	a,#_digits
      0000A2 F9               [12]  666 	mov	r1,a
      0000A3 87 05            [24]  667 	mov	ar5,@r1
      0000A5 7C 00            [12]  668 	mov	r4,#0x00
      0000A7 8D 82            [24]  669 	mov	dpl,r5
      0000A9 8C 83            [24]  670 	mov	dph,r4
      0000AB 12r00r00         [24]  671 	lcall	_putchar
                                    672 ;	life.c:45: putchar(digits[a & 0xf]);
      0000AE 53 06 0F         [24]  673 	anl	ar6,#0x0f
      0000B1 EE               [12]  674 	mov	a,r6
      0000B2 24r00            [12]  675 	add	a,#_digits
      0000B4 F9               [12]  676 	mov	r1,a
      0000B5 87 07            [24]  677 	mov	ar7,@r1
      0000B7 7E 00            [12]  678 	mov	r6,#0x00
      0000B9 8F 82            [24]  679 	mov	dpl,r7
      0000BB 8E 83            [24]  680 	mov	dph,r6
      0000BD 12r00r00         [24]  681 	lcall	_putchar
                                    682 ;	life.c:111: print16x(generation[0]);
      0000C0 78r22            [12]  683 	mov	r0,#_generation
      0000C2 86 06            [24]  684 	mov	ar6,@r0
      0000C4 08               [12]  685 	inc	r0
                                    686 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      0000C5 E6               [12]  687 	mov	a,@r0
      0000C6 FF               [12]  688 	mov	r7,a
      0000C7 C4               [12]  689 	swap	a
      0000C8 54 0F            [12]  690 	anl	a,#0x0f
      0000CA FC               [12]  691 	mov	r4,a
      0000CB 53 04 0F         [24]  692 	anl	ar4,#0x0f
      0000CE EC               [12]  693 	mov	a,r4
      0000CF 24r00            [12]  694 	add	a,#_digits
      0000D1 F9               [12]  695 	mov	r1,a
      0000D2 87 05            [24]  696 	mov	ar5,@r1
      0000D4 7C 00            [12]  697 	mov	r4,#0x00
      0000D6 8D 82            [24]  698 	mov	dpl,r5
      0000D8 8C 83            [24]  699 	mov	dph,r4
      0000DA 12r00r00         [24]  700 	lcall	_putchar
                                    701 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      0000DD 8F 05            [24]  702 	mov	ar5,r7
      0000DF 53 05 0F         [24]  703 	anl	ar5,#0x0f
      0000E2 ED               [12]  704 	mov	a,r5
      0000E3 24r00            [12]  705 	add	a,#_digits
      0000E5 F9               [12]  706 	mov	r1,a
      0000E6 87 05            [24]  707 	mov	ar5,@r1
      0000E8 7C 00            [12]  708 	mov	r4,#0x00
      0000EA 8D 82            [24]  709 	mov	dpl,r5
      0000EC 8C 83            [24]  710 	mov	dph,r4
      0000EE 12r00r00         [24]  711 	lcall	_putchar
                                    712 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      0000F1 8E 04            [24]  713 	mov	ar4,r6
      0000F3 EF               [12]  714 	mov	a,r7
      0000F4 C4               [12]  715 	swap	a
      0000F5 CC               [12]  716 	xch	a,r4
      0000F6 C4               [12]  717 	swap	a
      0000F7 54 0F            [12]  718 	anl	a,#0x0f
      0000F9 6C               [12]  719 	xrl	a,r4
      0000FA CC               [12]  720 	xch	a,r4
      0000FB 54 0F            [12]  721 	anl	a,#0x0f
      0000FD CC               [12]  722 	xch	a,r4
      0000FE 6C               [12]  723 	xrl	a,r4
      0000FF CC               [12]  724 	xch	a,r4
      000100 53 04 0F         [24]  725 	anl	ar4,#0x0f
      000103 EC               [12]  726 	mov	a,r4
      000104 24r00            [12]  727 	add	a,#_digits
      000106 F9               [12]  728 	mov	r1,a
      000107 87 05            [24]  729 	mov	ar5,@r1
      000109 7C 00            [12]  730 	mov	r4,#0x00
      00010B 8D 82            [24]  731 	mov	dpl,r5
      00010D 8C 83            [24]  732 	mov	dph,r4
      00010F 12r00r00         [24]  733 	lcall	_putchar
                                    734 ;	life.c:45: putchar(digits[a & 0xf]);
      000112 53 06 0F         [24]  735 	anl	ar6,#0x0f
      000115 EE               [12]  736 	mov	a,r6
      000116 24r00            [12]  737 	add	a,#_digits
      000118 F9               [12]  738 	mov	r1,a
      000119 87 07            [24]  739 	mov	ar7,@r1
      00011B 7E 00            [12]  740 	mov	r6,#0x00
      00011D 8F 82            [24]  741 	mov	dpl,r7
      00011F 8E 83            [24]  742 	mov	dph,r6
      000121 12r00r00         [24]  743 	lcall	_putchar
                                    744 ;	life.c:120: printstr("\r\n");
      000124 7Dr0C            [12]  745 	mov	r5,#___str_1
      000126 7Es00            [12]  746 	mov	r6,#(___str_1 >> 8)
      000128 7F 80            [12]  747 	mov	r7,#0x80
                                    748 ;	life.c:53: return;
      00012A                        749 00124$:
                                    750 ;	life.c:51: for (; *s; s++) putchar(*s);
      00012A 8D 82            [24]  751 	mov	dpl,r5
      00012C 8E 83            [24]  752 	mov	dph,r6
      00012E 8F F0            [24]  753 	mov	b,r7
      000130 12r00r00         [24]  754 	lcall	__gptrget
      000133 FC               [12]  755 	mov	r4,a
      000134 60 10            [24]  756 	jz	00114$
      000136 7B 00            [12]  757 	mov	r3,#0x00
      000138 8C 82            [24]  758 	mov	dpl,r4
      00013A 8B 83            [24]  759 	mov	dph,r3
      00013C 12r00r00         [24]  760 	lcall	_putchar
      00013F 0D               [12]  761 	inc	r5
                                    762 ;	life.c:120: printstr("\r\n");
      000140 BD 00 E7         [24]  763 	cjne	r5,#0x00,00124$
      000143 0E               [12]  764 	inc	r6
      000144 80 E4            [24]  765 	sjmp	00124$
      000146                        766 00114$:
                                    767 ;	life.c:103: generation[0]++;
      000146 78r22            [12]  768 	mov	r0,#_generation
      000148 86 06            [24]  769 	mov	ar6,@r0
      00014A 08               [12]  770 	inc	r0
      00014B 86 07            [24]  771 	mov	ar7,@r0
      00014D 0E               [12]  772 	inc	r6
      00014E BE 00 01         [24]  773 	cjne	r6,#0x00,00195$
      000151 0F               [12]  774 	inc	r7
      000152                        775 00195$:
      000152 78r22            [12]  776 	mov	r0,#_generation
      000154 A6 06            [24]  777 	mov	@r0,ar6
      000156 08               [12]  778 	inc	r0
      000157 A6 07            [24]  779 	mov	@r0,ar7
                                    780 ;	life.c:104: if (!generation[0]) generation[1]++;
      000159 EE               [12]  781 	mov	a,r6
      00015A 4F               [12]  782 	orl	a,r7
      00015B 70 13            [24]  783 	jnz	00102$
      00015D 78r24            [12]  784 	mov	r0,#(_generation + 0x0002)
      00015F 86 06            [24]  785 	mov	ar6,@r0
      000161 08               [12]  786 	inc	r0
      000162 86 07            [24]  787 	mov	ar7,@r0
      000164 0E               [12]  788 	inc	r6
      000165 BE 00 01         [24]  789 	cjne	r6,#0x00,00197$
      000168 0F               [12]  790 	inc	r7
      000169                        791 00197$:
      000169 78r24            [12]  792 	mov	r0,#(_generation + 0x0002)
      00016B A6 06            [24]  793 	mov	@r0,ar6
      00016D 08               [12]  794 	inc	r0
      00016E A6 07            [24]  795 	mov	@r0,ar7
                                    796 ;	life.c:121: updategen();
      000170                        797 00102$:
                                    798 ;	life.c:124: for (x = 0; x < W; x++) {
      000170 78r13            [12]  799 	mov	r0,#_x
      000172 E4               [12]  800 	clr	a
      000173 F6               [12]  801 	mov	@r0,a
      000174 08               [12]  802 	inc	r0
      000175 F6               [12]  803 	mov	@r0,a
      000176                        804 00131$:
                                    805 ;	life.c:125: for (y = 0; y < H; y++)
      000176 78r15            [12]  806 	mov	r0,#_y
      000178 E4               [12]  807 	clr	a
      000179 F6               [12]  808 	mov	@r0,a
      00017A 08               [12]  809 	inc	r0
      00017B F6               [12]  810 	mov	@r0,a
      00017C                        811 00126$:
                                    812 ;	life.c:126: if (u[A2D(W, y, x)]) putchar('1');
      00017C 78r15            [12]  813 	mov	r0,#_y
      00017E E6               [12]  814 	mov	a,@r0
      00017F C0 E0            [24]  815 	push	acc
      000181 08               [12]  816 	inc	r0
      000182 E6               [12]  817 	mov	a,@r0
      000183 C0 E0            [24]  818 	push	acc
      000185 90 00 30         [24]  819 	mov	dptr,#0x0030
      000188 12r00r00         [24]  820 	lcall	__mulint
      00018B AE 82            [24]  821 	mov	r6,dpl
      00018D AF 83            [24]  822 	mov	r7,dph
      00018F 15 81            [12]  823 	dec	sp
      000191 15 81            [12]  824 	dec	sp
      000193 78r13            [12]  825 	mov	r0,#_x
      000195 E6               [12]  826 	mov	a,@r0
      000196 2E               [12]  827 	add	a,r6
      000197 FE               [12]  828 	mov	r6,a
      000198 08               [12]  829 	inc	r0
      000199 E6               [12]  830 	mov	a,@r0
      00019A 3F               [12]  831 	addc	a,r7
      00019B FF               [12]  832 	mov	r7,a
      00019C EE               [12]  833 	mov	a,r6
      00019D 24r00            [12]  834 	add	a,#_u
      00019F FE               [12]  835 	mov	r6,a
      0001A0 EF               [12]  836 	mov	a,r7
      0001A1 34s48            [12]  837 	addc	a,#(_u >> 8)
      0001A3 FF               [12]  838 	mov	r7,a
      0001A4 8E 82            [24]  839 	mov	dpl,r6
      0001A6 8F 83            [24]  840 	mov	dph,r7
      0001A8 E0               [24]  841 	movx	a,@dptr
      0001A9 60 08            [24]  842 	jz	00104$
      0001AB 90 00 31         [24]  843 	mov	dptr,#0x0031
      0001AE 12r00r00         [24]  844 	lcall	_putchar
      0001B1 80 06            [24]  845 	sjmp	00127$
      0001B3                        846 00104$:
                                    847 ;	life.c:127: else putchar('0');
      0001B3 90 00 30         [24]  848 	mov	dptr,#0x0030
      0001B6 12r00r00         [24]  849 	lcall	_putchar
      0001B9                        850 00127$:
                                    851 ;	life.c:125: for (y = 0; y < H; y++)
      0001B9 78r15            [12]  852 	mov	r0,#_y
      0001BB 06               [12]  853 	inc	@r0
      0001BC B6 00 02         [24]  854 	cjne	@r0,#0x00,00199$
      0001BF 08               [12]  855 	inc	r0
      0001C0 06               [12]  856 	inc	@r0
      0001C1                        857 00199$:
      0001C1 78r15            [12]  858 	mov	r0,#_y
      0001C3 C3               [12]  859 	clr	c
      0001C4 E6               [12]  860 	mov	a,@r0
      0001C5 94 C0            [12]  861 	subb	a,#0xc0
      0001C7 08               [12]  862 	inc	r0
      0001C8 E6               [12]  863 	mov	a,@r0
      0001C9 64 80            [12]  864 	xrl	a,#0x80
      0001CB 94 80            [12]  865 	subb	a,#0x80
      0001CD 40 AD            [24]  866 	jc	00126$
                                    867 ;	life.c:128: printstr("\r\n");
      0001CF 7Dr0C            [12]  868 	mov	r5,#___str_1
      0001D1 7Es00            [12]  869 	mov	r6,#(___str_1 >> 8)
      0001D3 7F 80            [12]  870 	mov	r7,#0x80
                                    871 ;	life.c:53: return;
      0001D5                        872 00129$:
                                    873 ;	life.c:51: for (; *s; s++) putchar(*s);
      0001D5 8D 82            [24]  874 	mov	dpl,r5
      0001D7 8E 83            [24]  875 	mov	dph,r6
      0001D9 8F F0            [24]  876 	mov	b,r7
      0001DB 12r00r00         [24]  877 	lcall	__gptrget
      0001DE FC               [12]  878 	mov	r4,a
      0001DF 60 10            [24]  879 	jz	00119$
      0001E1 7B 00            [12]  880 	mov	r3,#0x00
      0001E3 8C 82            [24]  881 	mov	dpl,r4
      0001E5 8B 83            [24]  882 	mov	dph,r3
      0001E7 12r00r00         [24]  883 	lcall	_putchar
      0001EA 0D               [12]  884 	inc	r5
                                    885 ;	life.c:128: printstr("\r\n");
      0001EB BD 00 E7         [24]  886 	cjne	r5,#0x00,00129$
      0001EE 0E               [12]  887 	inc	r6
      0001EF 80 E4            [24]  888 	sjmp	00129$
      0001F1                        889 00119$:
                                    890 ;	life.c:124: for (x = 0; x < W; x++) {
      0001F1 78r13            [12]  891 	mov	r0,#_x
      0001F3 06               [12]  892 	inc	@r0
      0001F4 B6 00 02         [24]  893 	cjne	@r0,#0x00,00203$
      0001F7 08               [12]  894 	inc	r0
      0001F8 06               [12]  895 	inc	@r0
      0001F9                        896 00203$:
      0001F9 78r13            [12]  897 	mov	r0,#_x
      0001FB C3               [12]  898 	clr	c
      0001FC E6               [12]  899 	mov	a,@r0
      0001FD 94 30            [12]  900 	subb	a,#0x30
      0001FF 08               [12]  901 	inc	r0
      000200 E6               [12]  902 	mov	a,@r0
      000201 64 80            [12]  903 	xrl	a,#0x80
      000203 94 80            [12]  904 	subb	a,#0x80
      000205 50 03            [24]  905 	jnc	00204$
      000207 02r01r76         [24]  906 	ljmp	00131$
      00020A                        907 00204$:
                                    908 ;	life.c:131: return;
                                    909 ;	life.c:132: }
      00020A 22               [24]  910 	ret
                                    911 ;------------------------------------------------------------
                                    912 ;Allocation info for local variables in function 'main'
                                    913 ;------------------------------------------------------------
                                    914 ;__2621440023              Allocated to registers 
                                    915 ;s                         Allocated to registers r5 r6 r7 
                                    916 ;__1310720013              Allocated to registers 
                                    917 ;s                         Allocated to registers r5 r6 r7 
                                    918 ;__1310720015              Allocated to registers r6 r7 
                                    919 ;a                         Allocated to registers r4 r5 
                                    920 ;__1310720017              Allocated to registers 
                                    921 ;s                         Allocated to registers r5 r6 r7 
                                    922 ;__1310720019              Allocated to registers 
                                    923 ;s                         Allocated to registers r5 r6 r7 
                                    924 ;__1310720021              Allocated to registers 
                                    925 ;s                         Allocated to registers r5 r6 r7 
                                    926 ;__2621440028              Allocated to registers 
                                    927 ;s                         Allocated to registers r5 r6 r7 
                                    928 ;__4587520032              Allocated to registers 
                                    929 ;s                         Allocated to registers r5 r6 r7 
                                    930 ;__4587520034              Allocated to registers 
                                    931 ;s                         Allocated to registers r5 r6 r7 
                                    932 ;__4587520036              Allocated to registers 
                                    933 ;s                         Allocated to registers r5 r6 r7 
                                    934 ;__3276800038              Allocated to registers 
                                    935 ;s                         Allocated to registers r5 r6 r7 
                                    936 ;__1310720040              Allocated to registers 
                                    937 ;s                         Allocated to registers r5 r6 r7 
                                    938 ;sloc0                     Allocated to stack - _bp +1
                                    939 ;sloc1                     Allocated to stack - _bp +2
                                    940 ;sloc2                     Allocated to stack - _bp +4
                                    941 ;sloc3                     Allocated to stack - _bp +6
                                    942 ;sloc4                     Allocated to stack - _bp +8
                                    943 ;sloc5                     Allocated to stack - _bp +10
                                    944 ;sloc6                     Allocated to stack - _bp +12
                                    945 ;------------------------------------------------------------
                                    946 ;	life.c:243: void main(void) {
                                    947 ;	-----------------------------------------
                                    948 ;	 function main
                                    949 ;	-----------------------------------------
      00020B                        950 _main:
      00020B C0*00            [24]  951 	push	_bp
      00020D E5 81            [12]  952 	mov	a,sp
      00020F F5*00            [12]  953 	mov	_bp,a
      000211 24 0D            [12]  954 	add	a,#0x0d
      000213 F5 81            [12]  955 	mov	sp,a
                                    956 ;	life.c:244: IT0 = 1;
                                    957 ;	assignBit
      000215 D2 88            [12]  958 	setb	_IT0
                                    959 ;	life.c:245: IT1 = 1;
                                    960 ;	assignBit
      000217 D2 8A            [12]  961 	setb	_IT1
                                    962 ;	life.c:246: EX0 = 1;
                                    963 ;	assignBit
      000219 D2 A8            [12]  964 	setb	_EX0
                                    965 ;	life.c:247: EX1 = 1;
                                    966 ;	assignBit
      00021B D2 AA            [12]  967 	setb	_EX1
                                    968 ;	life.c:248: EA = 1;	
                                    969 ;	assignBit
      00021D D2 AF            [12]  970 	setb	_EA
                                    971 ;	life.c:249: P1_7 = 1;
                                    972 ;	assignBit
      00021F D2 97            [12]  973 	setb	_P1_7
                                    974 ;	life.c:251: srand(RND);
      000221 90 FF FE         [24]  975 	mov	dptr,#_RND
      000224 E0               [24]  976 	movx	a,@dptr
      000225 FE               [12]  977 	mov	r6,a
      000226 A3               [24]  978 	inc	dptr
      000227 E0               [24]  979 	movx	a,@dptr
      000228 FF               [12]  980 	mov	r7,a
      000229 8E 82            [24]  981 	mov	dpl,r6
      00022B 8F 83            [24]  982 	mov	dph,r7
      00022D 12r00r00         [24]  983 	lcall	_srand
                                    984 ;	life.c:253: OE76 = OE76_0;
      000230 78r12            [12]  985 	mov	r0,#_OE76
      000232 76 3F            [12]  986 	mov	@r0,#0x3f
                                    987 ;	life.c:254: flashOE();
      000234 12r00r26         [24]  988 	lcall	_flashOE
                                    989 ;	life.c:256: for (i0 = 0; !i0; ) {	
      000237 78r10            [12]  990 	mov	r0,#_i0
      000239 76 00            [12]  991 	mov	@r0,#0x00
      00023B                        992 00246$:
                                    993 ;	life.c:257: printstr("\033[2J\033[?25l\033[mLIFE INIT T L R P\r\n");
      00023B 7Dr29            [12]  994 	mov	r5,#___str_5
      00023D 7Es00            [12]  995 	mov	r6,#(___str_5 >> 8)
      00023F 7F 80            [12]  996 	mov	r7,#0x80
                                    997 ;	life.c:53: return;
      000241                        998 00202$:
                                    999 ;	life.c:51: for (; *s; s++) putchar(*s);
      000241 8D 82            [24] 1000 	mov	dpl,r5
      000243 8E 83            [24] 1001 	mov	dph,r6
      000245 8F F0            [24] 1002 	mov	b,r7
      000247 12r00r00         [24] 1003 	lcall	__gptrget
      00024A FC               [12] 1004 	mov	r4,a
      00024B 60 10            [24] 1005 	jz	00110$
      00024D 7B 00            [12] 1006 	mov	r3,#0x00
      00024F 8C 82            [24] 1007 	mov	dpl,r4
      000251 8B 83            [24] 1008 	mov	dph,r3
      000253 12r00r00         [24] 1009 	lcall	_putchar
      000256 0D               [12] 1010 	inc	r5
                                   1011 ;	life.c:258: while (1) {
      000257 BD 00 E7         [24] 1012 	cjne	r5,#0x00,00202$
      00025A 0E               [12] 1013 	inc	r6
      00025B 80 E4            [24] 1014 	sjmp	00202$
      00025D                       1015 00110$:
                                   1016 ;	life.c:259: c = toupper(getchar());
      00025D 12r00r05         [24] 1017 	lcall	_getchar
      000260 12r00r00         [24] 1018 	lcall	_toupper
      000263 AE 82            [24] 1019 	mov	r6,dpl
      000265 AF 83            [24] 1020 	mov	r7,dph
      000267 78r19            [12] 1021 	mov	r0,#_c
      000269 A6 06            [24] 1022 	mov	@r0,ar6
      00026B 08               [12] 1023 	inc	r0
      00026C A6 07            [24] 1024 	mov	@r0,ar7
                                   1025 ;	life.c:260: if (i0 || (c == (int)'T')) goto terminate;
      00026E 78r10            [12] 1026 	mov	r0,#_i0
      000270 E6               [12] 1027 	mov	a,@r0
      000271 60 03            [24] 1028 	jz	00516$
      000273 02r0ArA5         [24] 1029 	ljmp	00142$
      000276                       1030 00516$:
      000276 BE 54 06         [24] 1031 	cjne	r6,#0x54,00517$
      000279 BF 00 03         [24] 1032 	cjne	r7,#0x00,00517$
      00027C 02r0ArA5         [24] 1033 	ljmp	00142$
      00027F                       1034 00517$:
                                   1035 ;	life.c:261: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      00027F BE 4C 05         [24] 1036 	cjne	r6,#0x4c,00518$
      000282 BF 00 02         [24] 1037 	cjne	r7,#0x00,00518$
      000285 80 0E            [24] 1038 	sjmp	00291$
      000287                       1039 00518$:
      000287 BE 52 05         [24] 1040 	cjne	r6,#0x52,00519$
      00028A BF 00 02         [24] 1041 	cjne	r7,#0x00,00519$
      00028D 80 06            [24] 1042 	sjmp	00291$
      00028F                       1043 00519$:
      00028F BE 50 CB         [24] 1044 	cjne	r6,#0x50,00110$
      000292 BF 00 C8         [24] 1045 	cjne	r7,#0x00,00110$
                                   1046 ;	life.c:264: reload:
      000295                       1047 00291$:
      000295                       1048 00112$:
                                   1049 ;	life.c:135: memset(u, 0, sizeof (u));
      000295 E4               [12] 1050 	clr	a
      000296 C0 E0            [24] 1051 	push	acc
      000298 74 24            [12] 1052 	mov	a,#0x24
      00029A C0 E0            [24] 1053 	push	acc
      00029C E4               [12] 1054 	clr	a
      00029D C0 E0            [24] 1055 	push	acc
      00029F 90r48r00         [24] 1056 	mov	dptr,#_u
      0002A2 75 F0 00         [24] 1057 	mov	b,#0x00
      0002A5 12r00r00         [24] 1058 	lcall	_memset
      0002A8 15 81            [12] 1059 	dec	sp
      0002AA 15 81            [12] 1060 	dec	sp
      0002AC 15 81            [12] 1061 	dec	sp
                                   1062 ;	life.c:136: memset(pu, 0, sizeof (pu));
      0002AE E4               [12] 1063 	clr	a
      0002AF C0 E0            [24] 1064 	push	acc
      0002B1 74 24            [12] 1065 	mov	a,#0x24
      0002B3 C0 E0            [24] 1066 	push	acc
      0002B5 E4               [12] 1067 	clr	a
      0002B6 C0 E0            [24] 1068 	push	acc
      0002B8 90r24r00         [24] 1069 	mov	dptr,#_pu
      0002BB 75 F0 00         [24] 1070 	mov	b,#0x00
      0002BE 12r00r00         [24] 1071 	lcall	_memset
      0002C1 15 81            [12] 1072 	dec	sp
      0002C3 15 81            [12] 1073 	dec	sp
      0002C5 15 81            [12] 1074 	dec	sp
                                   1075 ;	life.c:266: if (c == (int)'L') loadiu();
      0002C7 78r19            [12] 1076 	mov	r0,#_c
      0002C9 B6 4C 06         [24] 1077 	cjne	@r0,#0x4c,00522$
      0002CC 08               [12] 1078 	inc	r0
      0002CD B6 00 02         [24] 1079 	cjne	@r0,#0x00,00522$
      0002D0 80 03            [24] 1080 	sjmp	00523$
      0002D2                       1081 00522$:
      0002D2 02r04r4D         [24] 1082 	ljmp	00116$
      0002D5                       1083 00523$:
                                   1084 ;	life.c:142: j = 0;
      0002D5 78r17            [12] 1085 	mov	r0,#_j
      0002D7 E4               [12] 1086 	clr	a
      0002D8 F6               [12] 1087 	mov	@r0,a
      0002D9 08               [12] 1088 	inc	r0
      0002DA F6               [12] 1089 	mov	@r0,a
                                   1090 ;	life.c:144: printstr("LOAD 0 1 ~ # <");
      0002DB 7Dr0F            [12] 1091 	mov	r5,#___str_2
      0002DD 7Es00            [12] 1092 	mov	r6,#(___str_2 >> 8)
      0002DF 7F 80            [12] 1093 	mov	r7,#0x80
                                   1094 ;	life.c:53: return;
      0002E1                       1095 00205$:
                                   1096 ;	life.c:51: for (; *s; s++) putchar(*s);
      0002E1 8D 82            [24] 1097 	mov	dpl,r5
      0002E3 8E 83            [24] 1098 	mov	dph,r6
      0002E5 8F F0            [24] 1099 	mov	b,r7
      0002E7 12r00r00         [24] 1100 	lcall	__gptrget
      0002EA FC               [12] 1101 	mov	r4,a
      0002EB 60 10            [24] 1102 	jz	00147$
      0002ED 7B 00            [12] 1103 	mov	r3,#0x00
      0002EF 8C 82            [24] 1104 	mov	dpl,r4
      0002F1 8B 83            [24] 1105 	mov	dph,r3
      0002F3 12r00r00         [24] 1106 	lcall	_putchar
      0002F6 0D               [12] 1107 	inc	r5
                                   1108 ;	life.c:144: printstr("LOAD 0 1 ~ # <");
      0002F7 BD 00 E7         [24] 1109 	cjne	r5,#0x00,00205$
      0002FA 0E               [12] 1110 	inc	r6
      0002FB 80 E4            [24] 1111 	sjmp	00205$
      0002FD                       1112 00147$:
                                   1113 ;	life.c:146: for (y = 0; y < (H * W); y += W) {
      0002FD 78r15            [12] 1114 	mov	r0,#_y
      0002FF E4               [12] 1115 	clr	a
      000300 F6               [12] 1116 	mov	@r0,a
      000301 08               [12] 1117 	inc	r0
      000302 F6               [12] 1118 	mov	@r0,a
      000303                       1119 00208$:
                                   1120 ;	life.c:147: for (x = 0; x < W; x++) {
      000303 78r13            [12] 1121 	mov	r0,#_x
      000305 E4               [12] 1122 	clr	a
      000306 F6               [12] 1123 	mov	@r0,a
      000307 08               [12] 1124 	inc	r0
      000308 F6               [12] 1125 	mov	@r0,a
                                   1126 ;	life.c:148: while (1) {
      000309                       1127 00160$:
                                   1128 ;	life.c:149: c = getchar();
      000309 12r00r05         [24] 1129 	lcall	_getchar
      00030C AE 82            [24] 1130 	mov	r6,dpl
      00030E AF 83            [24] 1131 	mov	r7,dph
      000310 78r19            [12] 1132 	mov	r0,#_c
      000312 A6 06            [24] 1133 	mov	@r0,ar6
      000314 08               [12] 1134 	inc	r0
      000315 A6 07            [24] 1135 	mov	@r0,ar7
                                   1136 ;	life.c:150: if (c == (int)'0') {
      000317 BE 30 25         [24] 1137 	cjne	r6,#0x30,00158$
      00031A BF 00 22         [24] 1138 	cjne	r7,#0x00,00158$
                                   1139 ;	life.c:151: iu[y + x] = 0;
      00031D 78r15            [12] 1140 	mov	r0,#_y
      00031F 79r13            [12] 1141 	mov	r1,#_x
      000321 E7               [12] 1142 	mov	a,@r1
      000322 26               [12] 1143 	add	a,@r0
      000323 FC               [12] 1144 	mov	r4,a
      000324 09               [12] 1145 	inc	r1
      000325 E7               [12] 1146 	mov	a,@r1
      000326 08               [12] 1147 	inc	r0
      000327 36               [12] 1148 	addc	a,@r0
      000328 FD               [12] 1149 	mov	r5,a
      000329 EC               [12] 1150 	mov	a,r4
      00032A 24r00            [12] 1151 	add	a,#_iu
      00032C F5 82            [12] 1152 	mov	dpl,a
      00032E ED               [12] 1153 	mov	a,r5
      00032F 34s00            [12] 1154 	addc	a,#(_iu >> 8)
      000331 F5 83            [12] 1155 	mov	dph,a
      000333 E4               [12] 1156 	clr	a
      000334 F0               [24] 1157 	movx	@dptr,a
                                   1158 ;	life.c:152: j++;
      000335 78r17            [12] 1159 	mov	r0,#_j
      000337 06               [12] 1160 	inc	@r0
      000338 B6 00 02         [24] 1161 	cjne	@r0,#0x00,00528$
      00033B 08               [12] 1162 	inc	r0
      00033C 06               [12] 1163 	inc	@r0
      00033D                       1164 00528$:
                                   1165 ;	life.c:153: break;
      00033D 80 39            [24] 1166 	sjmp	00163$
      00033F                       1167 00158$:
                                   1168 ;	life.c:154: } else if (c == (int)'1') {
      00033F BE 31 26         [24] 1169 	cjne	r6,#0x31,00156$
      000342 BF 00 23         [24] 1170 	cjne	r7,#0x00,00156$
                                   1171 ;	life.c:155: iu[y + x] = 1;
      000345 78r15            [12] 1172 	mov	r0,#_y
      000347 79r13            [12] 1173 	mov	r1,#_x
      000349 E7               [12] 1174 	mov	a,@r1
      00034A 26               [12] 1175 	add	a,@r0
      00034B FC               [12] 1176 	mov	r4,a
      00034C 09               [12] 1177 	inc	r1
      00034D E7               [12] 1178 	mov	a,@r1
      00034E 08               [12] 1179 	inc	r0
      00034F 36               [12] 1180 	addc	a,@r0
      000350 FD               [12] 1181 	mov	r5,a
      000351 EC               [12] 1182 	mov	a,r4
      000352 24r00            [12] 1183 	add	a,#_iu
      000354 F5 82            [12] 1184 	mov	dpl,a
      000356 ED               [12] 1185 	mov	a,r5
      000357 34s00            [12] 1186 	addc	a,#(_iu >> 8)
      000359 F5 83            [12] 1187 	mov	dph,a
      00035B 74 01            [12] 1188 	mov	a,#0x01
      00035D F0               [24] 1189 	movx	@dptr,a
                                   1190 ;	life.c:156: j++;
      00035E 78r17            [12] 1191 	mov	r0,#_j
      000360 06               [12] 1192 	inc	@r0
      000361 B6 00 02         [24] 1193 	cjne	@r0,#0x00,00531$
      000364 08               [12] 1194 	inc	r0
      000365 06               [12] 1195 	inc	@r0
      000366                       1196 00531$:
                                   1197 ;	life.c:157: break;
      000366 80 10            [24] 1198 	sjmp	00163$
      000368                       1199 00156$:
                                   1200 ;	life.c:158: } else if (c == (int)'~') goto br_inner;
      000368 BE 7E 05         [24] 1201 	cjne	r6,#0x7e,00532$
      00036B BF 00 02         [24] 1202 	cjne	r7,#0x00,00532$
      00036E 80 21            [24] 1203 	sjmp	00209$
      000370                       1204 00532$:
                                   1205 ;	life.c:159: else if (c == (int)'#') goto out;
                                   1206 ;	life.c:163: break;
      000370 BE 23 96         [24] 1207 	cjne	r6,#0x23,00160$
      000373 BF 00 93         [24] 1208 	cjne	r7,#0x00,00160$
      000376 80 31            [24] 1209 	sjmp	00173$
      000378                       1210 00163$:
                                   1211 ;	life.c:147: for (x = 0; x < W; x++) {
      000378 78r13            [12] 1212 	mov	r0,#_x
      00037A 06               [12] 1213 	inc	@r0
      00037B B6 00 02         [24] 1214 	cjne	@r0,#0x00,00534$
      00037E 08               [12] 1215 	inc	r0
      00037F 06               [12] 1216 	inc	@r0
      000380                       1217 00534$:
      000380 78r13            [12] 1218 	mov	r0,#_x
      000382 C3               [12] 1219 	clr	c
      000383 E6               [12] 1220 	mov	a,@r0
      000384 94 30            [12] 1221 	subb	a,#0x30
      000386 08               [12] 1222 	inc	r0
      000387 E6               [12] 1223 	mov	a,@r0
      000388 64 80            [12] 1224 	xrl	a,#0x80
      00038A 94 80            [12] 1225 	subb	a,#0x80
      00038C 50 03            [24] 1226 	jnc	00535$
      00038E 02r03r09         [24] 1227 	ljmp	00160$
      000391                       1228 00535$:
      000391                       1229 00209$:
                                   1230 ;	life.c:146: for (y = 0; y < (H * W); y += W) {
      000391 78r15            [12] 1231 	mov	r0,#_y
      000393 74 30            [12] 1232 	mov	a,#0x30
      000395 26               [12] 1233 	add	a,@r0
      000396 F6               [12] 1234 	mov	@r0,a
      000397 E4               [12] 1235 	clr	a
      000398 08               [12] 1236 	inc	r0
      000399 36               [12] 1237 	addc	a,@r0
      00039A F6               [12] 1238 	mov	@r0,a
      00039B 78r15            [12] 1239 	mov	r0,#_y
      00039D C3               [12] 1240 	clr	c
      00039E 08               [12] 1241 	inc	r0
      00039F E6               [12] 1242 	mov	a,@r0
      0003A0 64 80            [12] 1243 	xrl	a,#0x80
      0003A2 94 A4            [12] 1244 	subb	a,#0xa4
      0003A4 50 03            [24] 1245 	jnc	00536$
      0003A6 02r03r03         [24] 1246 	ljmp	00208$
      0003A9                       1247 00536$:
                                   1248 ;	life.c:167: out:
      0003A9                       1249 00173$:
                                   1250 ;	life.c:168: if (c != (int)'#')
      0003A9 BE 23 05         [24] 1251 	cjne	r6,#0x23,00537$
      0003AC BF 00 02         [24] 1252 	cjne	r7,#0x00,00537$
      0003AF 80 14            [24] 1253 	sjmp	00172$
      0003B1                       1254 00537$:
                                   1255 ;	life.c:169: while (1) {
      0003B1                       1256 00169$:
                                   1257 ;	life.c:170: c = getchar();
      0003B1 12r00r05         [24] 1258 	lcall	_getchar
      0003B4 AE 82            [24] 1259 	mov	r6,dpl
      0003B6 AF 83            [24] 1260 	mov	r7,dph
      0003B8 78r19            [12] 1261 	mov	r0,#_c
      0003BA A6 06            [24] 1262 	mov	@r0,ar6
      0003BC 08               [12] 1263 	inc	r0
      0003BD A6 07            [24] 1264 	mov	@r0,ar7
                                   1265 ;	life.c:171: if (c == (int)'#') break;
      0003BF BE 23 EF         [24] 1266 	cjne	r6,#0x23,00169$
      0003C2 BF 00 EC         [24] 1267 	cjne	r7,#0x00,00169$
      0003C5                       1268 00172$:
                                   1269 ;	life.c:173: print16x(j);
      0003C5 78r17            [12] 1270 	mov	r0,#_j
      0003C7 86 06            [24] 1271 	mov	ar6,@r0
      0003C9 08               [12] 1272 	inc	r0
      0003CA 86 07            [24] 1273 	mov	ar7,@r0
      0003CC 8E 04            [24] 1274 	mov	ar4,r6
                                   1275 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      0003CE EF               [12] 1276 	mov	a,r7
      0003CF FD               [12] 1277 	mov	r5,a
      0003D0 C4               [12] 1278 	swap	a
      0003D1 54 0F            [12] 1279 	anl	a,#(0x0f&0x0f)
      0003D3 24r00            [12] 1280 	add	a,#_digits
      0003D5 F9               [12] 1281 	mov	r1,a
      0003D6 87 07            [24] 1282 	mov	ar7,@r1
      0003D8 7E 00            [12] 1283 	mov	r6,#0x00
      0003DA 8F 82            [24] 1284 	mov	dpl,r7
      0003DC 8E 83            [24] 1285 	mov	dph,r6
      0003DE 12r00r00         [24] 1286 	lcall	_putchar
                                   1287 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      0003E1 8D 07            [24] 1288 	mov	ar7,r5
      0003E3 53 07 0F         [24] 1289 	anl	ar7,#0x0f
      0003E6 EF               [12] 1290 	mov	a,r7
      0003E7 24r00            [12] 1291 	add	a,#_digits
      0003E9 F9               [12] 1292 	mov	r1,a
      0003EA 87 07            [24] 1293 	mov	ar7,@r1
      0003EC 7E 00            [12] 1294 	mov	r6,#0x00
      0003EE 8F 82            [24] 1295 	mov	dpl,r7
      0003F0 8E 83            [24] 1296 	mov	dph,r6
      0003F2 12r00r00         [24] 1297 	lcall	_putchar
                                   1298 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      0003F5 8C 06            [24] 1299 	mov	ar6,r4
      0003F7 ED               [12] 1300 	mov	a,r5
      0003F8 C4               [12] 1301 	swap	a
      0003F9 CE               [12] 1302 	xch	a,r6
      0003FA C4               [12] 1303 	swap	a
      0003FB 54 0F            [12] 1304 	anl	a,#0x0f
      0003FD 6E               [12] 1305 	xrl	a,r6
      0003FE CE               [12] 1306 	xch	a,r6
      0003FF 54 0F            [12] 1307 	anl	a,#0x0f
      000401 CE               [12] 1308 	xch	a,r6
      000402 6E               [12] 1309 	xrl	a,r6
      000403 CE               [12] 1310 	xch	a,r6
      000404 53 06 0F         [24] 1311 	anl	ar6,#0x0f
      000407 EE               [12] 1312 	mov	a,r6
      000408 24r00            [12] 1313 	add	a,#_digits
      00040A F9               [12] 1314 	mov	r1,a
      00040B 87 07            [24] 1315 	mov	ar7,@r1
      00040D 7E 00            [12] 1316 	mov	r6,#0x00
      00040F 8F 82            [24] 1317 	mov	dpl,r7
      000411 8E 83            [24] 1318 	mov	dph,r6
      000413 12r00r00         [24] 1319 	lcall	_putchar
                                   1320 ;	life.c:45: putchar(digits[a & 0xf]);
      000416 53 04 0F         [24] 1321 	anl	ar4,#0x0f
      000419 EC               [12] 1322 	mov	a,r4
      00041A 24r00            [12] 1323 	add	a,#_digits
      00041C F9               [12] 1324 	mov	r1,a
      00041D 87 07            [24] 1325 	mov	ar7,@r1
      00041F 7E 00            [12] 1326 	mov	r6,#0x00
      000421 8F 82            [24] 1327 	mov	dpl,r7
      000423 8E 83            [24] 1328 	mov	dph,r6
      000425 12r00r00         [24] 1329 	lcall	_putchar
                                   1330 ;	life.c:174: printstr(">\r\n");
      000428 7Dr1E            [12] 1331 	mov	r5,#___str_3
      00042A 7Es00            [12] 1332 	mov	r6,#(___str_3 >> 8)
      00042C 7F 80            [12] 1333 	mov	r7,#0x80
                                   1334 ;	life.c:53: return;
      00042E                       1335 00211$:
                                   1336 ;	life.c:51: for (; *s; s++) putchar(*s);
      00042E 8D 82            [24] 1337 	mov	dpl,r5
      000430 8E 83            [24] 1338 	mov	dph,r6
      000432 8F F0            [24] 1339 	mov	b,r7
      000434 12r00r00         [24] 1340 	lcall	__gptrget
      000437 FC               [12] 1341 	mov	r4,a
      000438 70 03            [24] 1342 	jnz	00540$
      00043A 02r05r06         [24] 1343 	ljmp	00117$
      00043D                       1344 00540$:
      00043D 7B 00            [12] 1345 	mov	r3,#0x00
      00043F 8C 82            [24] 1346 	mov	dpl,r4
      000441 8B 83            [24] 1347 	mov	dph,r3
      000443 12r00r00         [24] 1348 	lcall	_putchar
      000446 0D               [12] 1349 	inc	r5
                                   1350 ;	life.c:266: if (c == (int)'L') loadiu();
      000447 BD 00 E4         [24] 1351 	cjne	r5,#0x00,00211$
      00044A 0E               [12] 1352 	inc	r6
      00044B 80 E1            [24] 1353 	sjmp	00211$
      00044D                       1354 00116$:
                                   1355 ;	life.c:267: else if (c == (int)'R') loadriu();
      00044D 78r19            [12] 1356 	mov	r0,#_c
      00044F B6 52 06         [24] 1357 	cjne	@r0,#0x52,00542$
      000452 08               [12] 1358 	inc	r0
      000453 B6 00 02         [24] 1359 	cjne	@r0,#0x00,00542$
      000456 80 03            [24] 1360 	sjmp	00543$
      000458                       1361 00542$:
      000458 02r05r06         [24] 1362 	ljmp	00117$
      00045B                       1363 00543$:
                                   1364 ;	life.c:180: j = 0;
      00045B 78r17            [12] 1365 	mov	r0,#_j
      00045D E4               [12] 1366 	clr	a
      00045E F6               [12] 1367 	mov	@r0,a
      00045F 08               [12] 1368 	inc	r0
      000460 F6               [12] 1369 	mov	@r0,a
                                   1370 ;	life.c:182: printstr("RANDOM");
      000461 7Dr22            [12] 1371 	mov	r5,#___str_4
      000463 7Es00            [12] 1372 	mov	r6,#(___str_4 >> 8)
      000465 7F 80            [12] 1373 	mov	r7,#0x80
                                   1374 ;	life.c:53: return;
      000467                       1375 00214$:
                                   1376 ;	life.c:51: for (; *s; s++) putchar(*s);
      000467 8D 82            [24] 1377 	mov	dpl,r5
      000469 8E 83            [24] 1378 	mov	dph,r6
      00046B 8F F0            [24] 1379 	mov	b,r7
      00046D 12r00r00         [24] 1380 	lcall	__gptrget
      000470 FC               [12] 1381 	mov	r4,a
      000471 60 10            [24] 1382 	jz	00179$
      000473 7B 00            [12] 1383 	mov	r3,#0x00
      000475 8C 82            [24] 1384 	mov	dpl,r4
      000477 8B 83            [24] 1385 	mov	dph,r3
      000479 12r00r00         [24] 1386 	lcall	_putchar
      00047C 0D               [12] 1387 	inc	r5
                                   1388 ;	life.c:182: printstr("RANDOM");
      00047D BD 00 E7         [24] 1389 	cjne	r5,#0x00,00214$
      000480 0E               [12] 1390 	inc	r6
      000481 80 E4            [24] 1391 	sjmp	00214$
      000483                       1392 00179$:
                                   1393 ;	life.c:184: for (y = 0; y < (H * W); y += W)
      000483 78r15            [12] 1394 	mov	r0,#_y
      000485 E4               [12] 1395 	clr	a
      000486 F6               [12] 1396 	mov	@r0,a
      000487 08               [12] 1397 	inc	r0
      000488 F6               [12] 1398 	mov	@r0,a
      000489                       1399 00218$:
                                   1400 ;	life.c:185: for (x = 0; x < W; x++)
      000489 78r13            [12] 1401 	mov	r0,#_x
      00048B E4               [12] 1402 	clr	a
      00048C F6               [12] 1403 	mov	@r0,a
      00048D 08               [12] 1404 	inc	r0
      00048E F6               [12] 1405 	mov	@r0,a
      00048F                       1406 00216$:
                                   1407 ;	life.c:186: iu[y + x] = rand() & 1;
      00048F 78r15            [12] 1408 	mov	r0,#_y
      000491 79r13            [12] 1409 	mov	r1,#_x
      000493 E7               [12] 1410 	mov	a,@r1
      000494 26               [12] 1411 	add	a,@r0
      000495 FE               [12] 1412 	mov	r6,a
      000496 09               [12] 1413 	inc	r1
      000497 E7               [12] 1414 	mov	a,@r1
      000498 08               [12] 1415 	inc	r0
      000499 36               [12] 1416 	addc	a,@r0
      00049A FF               [12] 1417 	mov	r7,a
      00049B EE               [12] 1418 	mov	a,r6
      00049C 24r00            [12] 1419 	add	a,#_iu
      00049E FE               [12] 1420 	mov	r6,a
      00049F EF               [12] 1421 	mov	a,r7
      0004A0 34s00            [12] 1422 	addc	a,#(_iu >> 8)
      0004A2 FF               [12] 1423 	mov	r7,a
      0004A3 C0 07            [24] 1424 	push	ar7
      0004A5 C0 06            [24] 1425 	push	ar6
      0004A7 12r00r00         [24] 1426 	lcall	_rand
      0004AA AC 82            [24] 1427 	mov	r4,dpl
      0004AC D0 06            [24] 1428 	pop	ar6
      0004AE D0 07            [24] 1429 	pop	ar7
      0004B0 53 04 01         [24] 1430 	anl	ar4,#0x01
      0004B3 8E 82            [24] 1431 	mov	dpl,r6
      0004B5 8F 83            [24] 1432 	mov	dph,r7
      0004B7 EC               [12] 1433 	mov	a,r4
      0004B8 F0               [24] 1434 	movx	@dptr,a
                                   1435 ;	life.c:185: for (x = 0; x < W; x++)
      0004B9 78r13            [12] 1436 	mov	r0,#_x
      0004BB 06               [12] 1437 	inc	@r0
      0004BC B6 00 02         [24] 1438 	cjne	@r0,#0x00,00546$
      0004BF 08               [12] 1439 	inc	r0
      0004C0 06               [12] 1440 	inc	@r0
      0004C1                       1441 00546$:
      0004C1 78r13            [12] 1442 	mov	r0,#_x
      0004C3 C3               [12] 1443 	clr	c
      0004C4 E6               [12] 1444 	mov	a,@r0
      0004C5 94 30            [12] 1445 	subb	a,#0x30
      0004C7 08               [12] 1446 	inc	r0
      0004C8 E6               [12] 1447 	mov	a,@r0
      0004C9 64 80            [12] 1448 	xrl	a,#0x80
      0004CB 94 80            [12] 1449 	subb	a,#0x80
      0004CD 40 C0            [24] 1450 	jc	00216$
                                   1451 ;	life.c:184: for (y = 0; y < (H * W); y += W)
      0004CF 78r15            [12] 1452 	mov	r0,#_y
      0004D1 74 30            [12] 1453 	mov	a,#0x30
      0004D3 26               [12] 1454 	add	a,@r0
      0004D4 F6               [12] 1455 	mov	@r0,a
      0004D5 E4               [12] 1456 	clr	a
      0004D6 08               [12] 1457 	inc	r0
      0004D7 36               [12] 1458 	addc	a,@r0
      0004D8 F6               [12] 1459 	mov	@r0,a
      0004D9 78r15            [12] 1460 	mov	r0,#_y
      0004DB C3               [12] 1461 	clr	c
      0004DC 08               [12] 1462 	inc	r0
      0004DD E6               [12] 1463 	mov	a,@r0
      0004DE 64 80            [12] 1464 	xrl	a,#0x80
      0004E0 94 A4            [12] 1465 	subb	a,#0xa4
      0004E2 40 A5            [24] 1466 	jc	00218$
                                   1467 ;	life.c:188: printstr("\r\n");
      0004E4 7Dr0C            [12] 1468 	mov	r5,#___str_1
      0004E6 7Es00            [12] 1469 	mov	r6,#(___str_1 >> 8)
      0004E8 7F 80            [12] 1470 	mov	r7,#0x80
                                   1471 ;	life.c:53: return;
      0004EA                       1472 00221$:
                                   1473 ;	life.c:51: for (; *s; s++) putchar(*s);
      0004EA 8D 82            [24] 1474 	mov	dpl,r5
      0004EC 8E 83            [24] 1475 	mov	dph,r6
      0004EE 8F F0            [24] 1476 	mov	b,r7
      0004F0 12r00r00         [24] 1477 	lcall	__gptrget
      0004F3 FC               [12] 1478 	mov	r4,a
      0004F4 60 10            [24] 1479 	jz	00117$
      0004F6 7B 00            [12] 1480 	mov	r3,#0x00
      0004F8 8C 82            [24] 1481 	mov	dpl,r4
      0004FA 8B 83            [24] 1482 	mov	dph,r3
      0004FC 12r00r00         [24] 1483 	lcall	_putchar
      0004FF 0D               [12] 1484 	inc	r5
                                   1485 ;	life.c:267: else if (c == (int)'R') loadriu();
      000500 BD 00 E7         [24] 1486 	cjne	r5,#0x00,00221$
      000503 0E               [12] 1487 	inc	r6
      000504 80 E4            [24] 1488 	sjmp	00221$
      000506                       1489 00117$:
                                   1490 ;	life.c:268: memcpy(u, iu, sizeof (iu));
      000506 E4               [12] 1491 	clr	a
      000507 C0 E0            [24] 1492 	push	acc
      000509 74 24            [12] 1493 	mov	a,#0x24
      00050B C0 E0            [24] 1494 	push	acc
      00050D 74r00            [12] 1495 	mov	a,#_iu
      00050F C0 E0            [24] 1496 	push	acc
      000511 74s00            [12] 1497 	mov	a,#(_iu >> 8)
      000513 C0 E0            [24] 1498 	push	acc
      000515 E4               [12] 1499 	clr	a
      000516 C0 E0            [24] 1500 	push	acc
      000518 90r48r00         [24] 1501 	mov	dptr,#_u
      00051B 75 F0 00         [24] 1502 	mov	b,#0x00
      00051E 12r00r00         [24] 1503 	lcall	___memcpy
      000521 E5 81            [12] 1504 	mov	a,sp
      000523 24 FB            [12] 1505 	add	a,#0xfb
      000525 F5 81            [12] 1506 	mov	sp,a
                                   1507 ;	life.c:269: show(0);
      000527 75 82 00         [24] 1508 	mov	dpl,#0x00
      00052A 12r00r32         [24] 1509 	lcall	_show
                                   1510 ;	life.c:271: printstr("READY T L R P S\r\n");
      00052D 7Dr4A            [12] 1511 	mov	r5,#___str_6
      00052F 7Es00            [12] 1512 	mov	r6,#(___str_6 >> 8)
      000531 7F 80            [12] 1513 	mov	r7,#0x80
                                   1514 ;	life.c:53: return;
      000533                       1515 00224$:
                                   1516 ;	life.c:51: for (; *s; s++) putchar(*s);
      000533 8D 82            [24] 1517 	mov	dpl,r5
      000535 8E 83            [24] 1518 	mov	dph,r6
      000537 8F F0            [24] 1519 	mov	b,r7
      000539 12r00r00         [24] 1520 	lcall	__gptrget
      00053C FC               [12] 1521 	mov	r4,a
      00053D 60 10            [24] 1522 	jz	00130$
      00053F 7B 00            [12] 1523 	mov	r3,#0x00
      000541 8C 82            [24] 1524 	mov	dpl,r4
      000543 8B 83            [24] 1525 	mov	dph,r3
      000545 12r00r00         [24] 1526 	lcall	_putchar
      000548 0D               [12] 1527 	inc	r5
                                   1528 ;	life.c:272: while (1) {
      000549 BD 00 E7         [24] 1529 	cjne	r5,#0x00,00224$
      00054C 0E               [12] 1530 	inc	r6
      00054D 80 E4            [24] 1531 	sjmp	00224$
      00054F                       1532 00130$:
                                   1533 ;	life.c:273: c = toupper(getchar());
      00054F 12r00r05         [24] 1534 	lcall	_getchar
      000552 12r00r00         [24] 1535 	lcall	_toupper
      000555 AE 82            [24] 1536 	mov	r6,dpl
      000557 AF 83            [24] 1537 	mov	r7,dph
      000559 78r19            [12] 1538 	mov	r0,#_c
      00055B A6 06            [24] 1539 	mov	@r0,ar6
      00055D 08               [12] 1540 	inc	r0
      00055E A6 07            [24] 1541 	mov	@r0,ar7
                                   1542 ;	life.c:274: if (i0 || (c == (int)'T')) goto terminate;
      000560 78r10            [12] 1543 	mov	r0,#_i0
      000562 E6               [12] 1544 	mov	a,@r0
      000563 60 03            [24] 1545 	jz	00553$
      000565 02r0ArA5         [24] 1546 	ljmp	00142$
      000568                       1547 00553$:
      000568 BE 54 06         [24] 1548 	cjne	r6,#0x54,00554$
      00056B BF 00 03         [24] 1549 	cjne	r7,#0x00,00554$
      00056E 02r0ArA5         [24] 1550 	ljmp	00142$
      000571                       1551 00554$:
                                   1552 ;	life.c:275: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      000571 BE 4C 06         [24] 1553 	cjne	r6,#0x4c,00555$
      000574 BF 00 03         [24] 1554 	cjne	r7,#0x00,00555$
      000577 02r02r95         [24] 1555 	ljmp	00112$
      00057A                       1556 00555$:
      00057A BE 52 06         [24] 1557 	cjne	r6,#0x52,00556$
      00057D BF 00 03         [24] 1558 	cjne	r7,#0x00,00556$
      000580 02r02r95         [24] 1559 	ljmp	00112$
      000583                       1560 00556$:
      000583 BE 50 06         [24] 1561 	cjne	r6,#0x50,00557$
      000586 BF 00 03         [24] 1562 	cjne	r7,#0x00,00557$
      000589 02r02r95         [24] 1563 	ljmp	00112$
      00058C                       1564 00557$:
                                   1565 ;	life.c:276: else if (c == (int)'S') break;
      00058C BE 53 C0         [24] 1566 	cjne	r6,#0x53,00130$
      00058F BF 00 BD         [24] 1567 	cjne	r7,#0x00,00130$
                                   1568 ;	life.c:96: generation[0] = 0u;
      000592 78r22            [12] 1569 	mov	r0,#_generation
      000594 76 00            [12] 1570 	mov	@r0,#0x00
      000596 08               [12] 1571 	inc	r0
      000597 76 00            [12] 1572 	mov	@r0,#0x00
                                   1573 ;	life.c:97: generation[1] = 0u;
      000599 78r24            [12] 1574 	mov	r0,#(_generation + 0x0002)
      00059B 76 00            [12] 1575 	mov	@r0,#0x00
      00059D 08               [12] 1576 	inc	r0
      00059E 76 00            [12] 1577 	mov	@r0,#0x00
                                   1578 ;	life.c:281: for (i1 = 0; !i0 && !i1; ) {
      0005A0 78r11            [12] 1579 	mov	r0,#_i1
      0005A2 76 00            [12] 1580 	mov	@r0,#0x00
      0005A4                       1581 00241$:
      0005A4 78r10            [12] 1582 	mov	r0,#_i0
      0005A6 E6               [12] 1583 	mov	a,@r0
      0005A7 60 03            [24] 1584 	jz	00560$
      0005A9 02r0Ar73         [24] 1585 	ljmp	00138$
      0005AC                       1586 00560$:
      0005AC 78r11            [12] 1587 	mov	r0,#_i1
      0005AE E6               [12] 1588 	mov	a,@r0
      0005AF 60 03            [24] 1589 	jz	00561$
      0005B1 02r0Ar73         [24] 1590 	ljmp	00138$
      0005B4                       1591 00561$:
                                   1592 ;	life.c:282: show(1);
      0005B4 75 82 01         [24] 1593 	mov	dpl,#0x01
      0005B7 12r00r32         [24] 1594 	lcall	_show
                                   1595 ;	life.c:194: fixed = 0;
      0005BA 78r1C            [12] 1596 	mov	r0,#_fixed
      0005BC 76 00            [12] 1597 	mov	@r0,#0x00
                                   1598 ;	life.c:195: cycle2 = 0;
      0005BE 78r1D            [12] 1599 	mov	r0,#_cycle2
      0005C0 76 00            [12] 1600 	mov	@r0,#0x00
                                   1601 ;	life.c:197: OE76 = OE76_0;
      0005C2 78r12            [12] 1602 	mov	r0,#_OE76
      0005C4 76 3F            [12] 1603 	mov	@r0,#0x3f
                                   1604 ;	life.c:198: flashOE();
      0005C6 12r00r26         [24] 1605 	lcall	_flashOE
                                   1606 ;	life.c:200: for (y = 0; y < H; y++) {
      0005C9 78r15            [12] 1607 	mov	r0,#_y
      0005CB E4               [12] 1608 	clr	a
      0005CC F6               [12] 1609 	mov	@r0,a
      0005CD 08               [12] 1610 	inc	r0
      0005CE F6               [12] 1611 	mov	@r0,a
      0005CF                       1612 00228$:
                                   1613 ;	life.c:201: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      0005CF 78r15            [12] 1614 	mov	r0,#_y
      0005D1 86 07            [24] 1615 	mov	ar7,@r0
      0005D3 53 07 03         [24] 1616 	anl	ar7,#0x03
      0005D6 EF               [12] 1617 	mov	a,r7
      0005D7 03               [12] 1618 	rr	a
      0005D8 03               [12] 1619 	rr	a
      0005D9 54 C0            [12] 1620 	anl	a,#0xc0
      0005DB FF               [12] 1621 	mov	r7,a
      0005DC 78r12            [12] 1622 	mov	r0,#_OE76
      0005DE 74 3F            [12] 1623 	mov	a,#0x3f
      0005E0 4F               [12] 1624 	orl	a,r7
      0005E1 F6               [12] 1625 	mov	@r0,a
                                   1626 ;	life.c:202: flashOE();
      0005E2 12r00r26         [24] 1627 	lcall	_flashOE
                                   1628 ;	life.c:203: for (x = 0; x < W; x++) {
      0005E5 78r13            [12] 1629 	mov	r0,#_x
      0005E7 E4               [12] 1630 	clr	a
      0005E8 F6               [12] 1631 	mov	@r0,a
      0005E9 08               [12] 1632 	inc	r0
      0005EA F6               [12] 1633 	mov	@r0,a
      0005EB                       1634 00226$:
                                   1635 ;	life.c:204: n = -u[A2D(W, y, x)];
      0005EB 78r15            [12] 1636 	mov	r0,#_y
      0005ED E6               [12] 1637 	mov	a,@r0
      0005EE C0 E0            [24] 1638 	push	acc
      0005F0 08               [12] 1639 	inc	r0
      0005F1 E6               [12] 1640 	mov	a,@r0
      0005F2 C0 E0            [24] 1641 	push	acc
      0005F4 90 00 30         [24] 1642 	mov	dptr,#0x0030
      0005F7 12r00r00         [24] 1643 	lcall	__mulint
      0005FA C8               [12] 1644 	xch	a,r0
      0005FB E5*00            [12] 1645 	mov	a,_bp
      0005FD 24 04            [12] 1646 	add	a,#0x04
      0005FF C8               [12] 1647 	xch	a,r0
      000600 A6 82            [24] 1648 	mov	@r0,dpl
      000602 08               [12] 1649 	inc	r0
      000603 A6 83            [24] 1650 	mov	@r0,dph
      000605 15 81            [12] 1651 	dec	sp
      000607 15 81            [12] 1652 	dec	sp
      000609 E5*00            [12] 1653 	mov	a,_bp
      00060B 24 04            [12] 1654 	add	a,#0x04
      00060D F8               [12] 1655 	mov	r0,a
      00060E 79r13            [12] 1656 	mov	r1,#_x
      000610 E7               [12] 1657 	mov	a,@r1
      000611 26               [12] 1658 	add	a,@r0
      000612 C0 E0            [24] 1659 	push	acc
      000614 09               [12] 1660 	inc	r1
      000615 E7               [12] 1661 	mov	a,@r1
      000616 08               [12] 1662 	inc	r0
      000617 36               [12] 1663 	addc	a,@r0
      000618 C0 E0            [24] 1664 	push	acc
      00061A E5*00            [12] 1665 	mov	a,_bp
      00061C 24 03            [12] 1666 	add	a,#0x03
      00061E F8               [12] 1667 	mov	r0,a
      00061F D0 E0            [24] 1668 	pop	acc
      000621 F6               [12] 1669 	mov	@r0,a
      000622 18               [12] 1670 	dec	r0
      000623 D0 E0            [24] 1671 	pop	acc
      000625 F6               [12] 1672 	mov	@r0,a
      000626 A8*00            [24] 1673 	mov	r0,_bp
      000628 08               [12] 1674 	inc	r0
      000629 08               [12] 1675 	inc	r0
      00062A E6               [12] 1676 	mov	a,@r0
      00062B 24r00            [12] 1677 	add	a,#_u
      00062D F5 82            [12] 1678 	mov	dpl,a
      00062F 08               [12] 1679 	inc	r0
      000630 E6               [12] 1680 	mov	a,@r0
      000631 34s48            [12] 1681 	addc	a,#(_u >> 8)
      000633 F5 83            [12] 1682 	mov	dph,a
      000635 E0               [24] 1683 	movx	a,@dptr
      000636 FB               [12] 1684 	mov	r3,a
      000637 A8*00            [24] 1685 	mov	r0,_bp
      000639 08               [12] 1686 	inc	r0
      00063A C3               [12] 1687 	clr	c
      00063B E4               [12] 1688 	clr	a
      00063C 9B               [12] 1689 	subb	a,r3
      00063D F6               [12] 1690 	mov	@r0,a
                                   1691 ;	life.c:207: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00063E 78r15            [12] 1692 	mov	r0,#_y
      000640 74 FF            [12] 1693 	mov	a,#0xff
      000642 26               [12] 1694 	add	a,@r0
      000643 FA               [12] 1695 	mov	r2,a
      000644 74 FF            [12] 1696 	mov	a,#0xff
      000646 08               [12] 1697 	inc	r0
      000647 36               [12] 1698 	addc	a,@r0
      000648 FB               [12] 1699 	mov	r3,a
      000649 74 C0            [12] 1700 	mov	a,#0xc0
      00064B 2A               [12] 1701 	add	a,r2
      00064C FA               [12] 1702 	mov	r2,a
      00064D E4               [12] 1703 	clr	a
      00064E 3B               [12] 1704 	addc	a,r3
      00064F FB               [12] 1705 	mov	r3,a
      000650 74 C0            [12] 1706 	mov	a,#0xc0
      000652 C0 E0            [24] 1707 	push	acc
      000654 E4               [12] 1708 	clr	a
      000655 C0 E0            [24] 1709 	push	acc
      000657 8A 82            [24] 1710 	mov	dpl,r2
      000659 8B 83            [24] 1711 	mov	dph,r3
      00065B 12r00r00         [24] 1712 	lcall	__modsint
      00065E AA 82            [24] 1713 	mov	r2,dpl
      000660 AB 83            [24] 1714 	mov	r3,dph
      000662 15 81            [12] 1715 	dec	sp
      000664 15 81            [12] 1716 	dec	sp
      000666 C0 02            [24] 1717 	push	ar2
      000668 C0 03            [24] 1718 	push	ar3
      00066A 90 00 30         [24] 1719 	mov	dptr,#0x0030
      00066D 12r00r00         [24] 1720 	lcall	__mulint
      000670 AA 82            [24] 1721 	mov	r2,dpl
      000672 AB 83            [24] 1722 	mov	r3,dph
      000674 15 81            [12] 1723 	dec	sp
      000676 15 81            [12] 1724 	dec	sp
      000678 78r13            [12] 1725 	mov	r0,#_x
      00067A 74 FF            [12] 1726 	mov	a,#0xff
      00067C 26               [12] 1727 	add	a,@r0
      00067D FC               [12] 1728 	mov	r4,a
      00067E 74 FF            [12] 1729 	mov	a,#0xff
      000680 08               [12] 1730 	inc	r0
      000681 36               [12] 1731 	addc	a,@r0
      000682 FD               [12] 1732 	mov	r5,a
      000683 74 30            [12] 1733 	mov	a,#0x30
      000685 2C               [12] 1734 	add	a,r4
      000686 FC               [12] 1735 	mov	r4,a
      000687 E4               [12] 1736 	clr	a
      000688 3D               [12] 1737 	addc	a,r5
      000689 FD               [12] 1738 	mov	r5,a
      00068A C0 03            [24] 1739 	push	ar3
      00068C C0 02            [24] 1740 	push	ar2
      00068E 74 30            [12] 1741 	mov	a,#0x30
      000690 C0 E0            [24] 1742 	push	acc
      000692 E4               [12] 1743 	clr	a
      000693 C0 E0            [24] 1744 	push	acc
      000695 8C 82            [24] 1745 	mov	dpl,r4
      000697 8D 83            [24] 1746 	mov	dph,r5
      000699 12r00r00         [24] 1747 	lcall	__modsint
      00069C AC 82            [24] 1748 	mov	r4,dpl
      00069E AD 83            [24] 1749 	mov	r5,dph
      0006A0 15 81            [12] 1750 	dec	sp
      0006A2 15 81            [12] 1751 	dec	sp
      0006A4 D0 02            [24] 1752 	pop	ar2
      0006A6 D0 03            [24] 1753 	pop	ar3
      0006A8 EC               [12] 1754 	mov	a,r4
      0006A9 2A               [12] 1755 	add	a,r2
      0006AA FE               [12] 1756 	mov	r6,a
      0006AB ED               [12] 1757 	mov	a,r5
      0006AC 3B               [12] 1758 	addc	a,r3
      0006AD FF               [12] 1759 	mov	r7,a
      0006AE EE               [12] 1760 	mov	a,r6
      0006AF 24r00            [12] 1761 	add	a,#_u
      0006B1 F5 82            [12] 1762 	mov	dpl,a
      0006B3 EF               [12] 1763 	mov	a,r7
      0006B4 34s48            [12] 1764 	addc	a,#(_u >> 8)
      0006B6 F5 83            [12] 1765 	mov	dph,a
      0006B8 E0               [24] 1766 	movx	a,@dptr
      0006B9 FF               [12] 1767 	mov	r7,a
      0006BA A8*00            [24] 1768 	mov	r0,_bp
      0006BC 08               [12] 1769 	inc	r0
      0006BD EF               [12] 1770 	mov	a,r7
      0006BE 26               [12] 1771 	add	a,@r0
      0006BF F6               [12] 1772 	mov	@r0,a
                                   1773 ;	life.c:209: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006C0 78r13            [12] 1774 	mov	r0,#_x
      0006C2 E5*00            [12] 1775 	mov	a,_bp
      0006C4 24 06            [12] 1776 	add	a,#0x06
      0006C6 F9               [12] 1777 	mov	r1,a
      0006C7 E6               [12] 1778 	mov	a,@r0
      0006C8 F7               [12] 1779 	mov	@r1,a
      0006C9 08               [12] 1780 	inc	r0
      0006CA 09               [12] 1781 	inc	r1
      0006CB E6               [12] 1782 	mov	a,@r0
      0006CC F7               [12] 1783 	mov	@r1,a
      0006CD E5*00            [12] 1784 	mov	a,_bp
      0006CF 24 06            [12] 1785 	add	a,#0x06
      0006D1 F8               [12] 1786 	mov	r0,a
      0006D2 74 30            [12] 1787 	mov	a,#0x30
      0006D4 26               [12] 1788 	add	a,@r0
      0006D5 FE               [12] 1789 	mov	r6,a
      0006D6 E4               [12] 1790 	clr	a
      0006D7 08               [12] 1791 	inc	r0
      0006D8 36               [12] 1792 	addc	a,@r0
      0006D9 FF               [12] 1793 	mov	r7,a
      0006DA C0 05            [24] 1794 	push	ar5
      0006DC C0 04            [24] 1795 	push	ar4
      0006DE C0 03            [24] 1796 	push	ar3
      0006E0 C0 02            [24] 1797 	push	ar2
      0006E2 74 30            [12] 1798 	mov	a,#0x30
      0006E4 C0 E0            [24] 1799 	push	acc
      0006E6 E4               [12] 1800 	clr	a
      0006E7 C0 E0            [24] 1801 	push	acc
      0006E9 8E 82            [24] 1802 	mov	dpl,r6
      0006EB 8F 83            [24] 1803 	mov	dph,r7
      0006ED 12r00r00         [24] 1804 	lcall	__modsint
      0006F0 C8               [12] 1805 	xch	a,r0
      0006F1 E5*00            [12] 1806 	mov	a,_bp
      0006F3 24 08            [12] 1807 	add	a,#0x08
      0006F5 C8               [12] 1808 	xch	a,r0
      0006F6 A6 82            [24] 1809 	mov	@r0,dpl
      0006F8 08               [12] 1810 	inc	r0
      0006F9 A6 83            [24] 1811 	mov	@r0,dph
      0006FB 15 81            [12] 1812 	dec	sp
      0006FD 15 81            [12] 1813 	dec	sp
      0006FF D0 02            [24] 1814 	pop	ar2
      000701 D0 03            [24] 1815 	pop	ar3
      000703 E5*00            [12] 1816 	mov	a,_bp
      000705 24 08            [12] 1817 	add	a,#0x08
      000707 F8               [12] 1818 	mov	r0,a
      000708 E6               [12] 1819 	mov	a,@r0
      000709 2A               [12] 1820 	add	a,r2
      00070A FE               [12] 1821 	mov	r6,a
      00070B 08               [12] 1822 	inc	r0
      00070C E6               [12] 1823 	mov	a,@r0
      00070D 3B               [12] 1824 	addc	a,r3
      00070E FF               [12] 1825 	mov	r7,a
      00070F EE               [12] 1826 	mov	a,r6
      000710 24r00            [12] 1827 	add	a,#_u
      000712 F5 82            [12] 1828 	mov	dpl,a
      000714 EF               [12] 1829 	mov	a,r7
      000715 34s48            [12] 1830 	addc	a,#(_u >> 8)
      000717 F5 83            [12] 1831 	mov	dph,a
      000719 E0               [24] 1832 	movx	a,@dptr
      00071A FF               [12] 1833 	mov	r7,a
      00071B A8*00            [24] 1834 	mov	r0,_bp
      00071D 08               [12] 1835 	inc	r0
      00071E EF               [12] 1836 	mov	a,r7
      00071F 26               [12] 1837 	add	a,@r0
      000720 F6               [12] 1838 	mov	@r0,a
                                   1839 ;	life.c:211: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000721 E5*00            [12] 1840 	mov	a,_bp
      000723 24 06            [12] 1841 	add	a,#0x06
      000725 F8               [12] 1842 	mov	r0,a
      000726 74 31            [12] 1843 	mov	a,#0x31
      000728 26               [12] 1844 	add	a,@r0
      000729 FE               [12] 1845 	mov	r6,a
      00072A E4               [12] 1846 	clr	a
      00072B 08               [12] 1847 	inc	r0
      00072C 36               [12] 1848 	addc	a,@r0
      00072D FF               [12] 1849 	mov	r7,a
      00072E C0 03            [24] 1850 	push	ar3
      000730 C0 02            [24] 1851 	push	ar2
      000732 74 30            [12] 1852 	mov	a,#0x30
      000734 C0 E0            [24] 1853 	push	acc
      000736 E4               [12] 1854 	clr	a
      000737 C0 E0            [24] 1855 	push	acc
      000739 8E 82            [24] 1856 	mov	dpl,r6
      00073B 8F 83            [24] 1857 	mov	dph,r7
      00073D 12r00r00         [24] 1858 	lcall	__modsint
      000740 AE 82            [24] 1859 	mov	r6,dpl
      000742 AF 83            [24] 1860 	mov	r7,dph
      000744 15 81            [12] 1861 	dec	sp
      000746 15 81            [12] 1862 	dec	sp
      000748 D0 02            [24] 1863 	pop	ar2
      00074A D0 03            [24] 1864 	pop	ar3
      00074C D0 04            [24] 1865 	pop	ar4
      00074E D0 05            [24] 1866 	pop	ar5
      000750 EE               [12] 1867 	mov	a,r6
      000751 2A               [12] 1868 	add	a,r2
      000752 FA               [12] 1869 	mov	r2,a
      000753 EF               [12] 1870 	mov	a,r7
      000754 3B               [12] 1871 	addc	a,r3
      000755 FB               [12] 1872 	mov	r3,a
      000756 EA               [12] 1873 	mov	a,r2
      000757 24r00            [12] 1874 	add	a,#_u
      000759 F5 82            [12] 1875 	mov	dpl,a
      00075B EB               [12] 1876 	mov	a,r3
      00075C 34s48            [12] 1877 	addc	a,#(_u >> 8)
      00075E F5 83            [12] 1878 	mov	dph,a
      000760 E0               [24] 1879 	movx	a,@dptr
      000761 FB               [12] 1880 	mov	r3,a
      000762 A8*00            [24] 1881 	mov	r0,_bp
      000764 08               [12] 1882 	inc	r0
      000765 EB               [12] 1883 	mov	a,r3
      000766 26               [12] 1884 	add	a,@r0
      000767 F6               [12] 1885 	mov	@r0,a
                                   1886 ;	life.c:213: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000768 78r15            [12] 1887 	mov	r0,#_y
      00076A E5*00            [12] 1888 	mov	a,_bp
      00076C 24 0A            [12] 1889 	add	a,#0x0a
      00076E F9               [12] 1890 	mov	r1,a
      00076F E6               [12] 1891 	mov	a,@r0
      000770 F7               [12] 1892 	mov	@r1,a
      000771 08               [12] 1893 	inc	r0
      000772 09               [12] 1894 	inc	r1
      000773 E6               [12] 1895 	mov	a,@r0
      000774 F7               [12] 1896 	mov	@r1,a
      000775 E5*00            [12] 1897 	mov	a,_bp
      000777 24 0A            [12] 1898 	add	a,#0x0a
      000779 F8               [12] 1899 	mov	r0,a
      00077A 74 C0            [12] 1900 	mov	a,#0xc0
      00077C 26               [12] 1901 	add	a,@r0
      00077D FA               [12] 1902 	mov	r2,a
      00077E E4               [12] 1903 	clr	a
      00077F 08               [12] 1904 	inc	r0
      000780 36               [12] 1905 	addc	a,@r0
      000781 FB               [12] 1906 	mov	r3,a
      000782 C0 07            [24] 1907 	push	ar7
      000784 C0 06            [24] 1908 	push	ar6
      000786 C0 05            [24] 1909 	push	ar5
      000788 C0 04            [24] 1910 	push	ar4
      00078A 74 C0            [12] 1911 	mov	a,#0xc0
      00078C C0 E0            [24] 1912 	push	acc
      00078E E4               [12] 1913 	clr	a
      00078F C0 E0            [24] 1914 	push	acc
      000791 8A 82            [24] 1915 	mov	dpl,r2
      000793 8B 83            [24] 1916 	mov	dph,r3
      000795 12r00r00         [24] 1917 	lcall	__modsint
      000798 AA 82            [24] 1918 	mov	r2,dpl
      00079A AB 83            [24] 1919 	mov	r3,dph
      00079C 15 81            [12] 1920 	dec	sp
      00079E 15 81            [12] 1921 	dec	sp
      0007A0 C0 02            [24] 1922 	push	ar2
      0007A2 C0 03            [24] 1923 	push	ar3
      0007A4 90 00 30         [24] 1924 	mov	dptr,#0x0030
      0007A7 12r00r00         [24] 1925 	lcall	__mulint
      0007AA C8               [12] 1926 	xch	a,r0
      0007AB E5*00            [12] 1927 	mov	a,_bp
      0007AD 24 0C            [12] 1928 	add	a,#0x0c
      0007AF C8               [12] 1929 	xch	a,r0
      0007B0 A6 82            [24] 1930 	mov	@r0,dpl
      0007B2 08               [12] 1931 	inc	r0
      0007B3 A6 83            [24] 1932 	mov	@r0,dph
      0007B5 15 81            [12] 1933 	dec	sp
      0007B7 15 81            [12] 1934 	dec	sp
      0007B9 D0 04            [24] 1935 	pop	ar4
      0007BB D0 05            [24] 1936 	pop	ar5
      0007BD D0 06            [24] 1937 	pop	ar6
      0007BF D0 07            [24] 1938 	pop	ar7
      0007C1 E5*00            [12] 1939 	mov	a,_bp
      0007C3 24 0C            [12] 1940 	add	a,#0x0c
      0007C5 F8               [12] 1941 	mov	r0,a
      0007C6 EC               [12] 1942 	mov	a,r4
      0007C7 26               [12] 1943 	add	a,@r0
      0007C8 FA               [12] 1944 	mov	r2,a
      0007C9 ED               [12] 1945 	mov	a,r5
      0007CA 08               [12] 1946 	inc	r0
      0007CB 36               [12] 1947 	addc	a,@r0
      0007CC FB               [12] 1948 	mov	r3,a
      0007CD EA               [12] 1949 	mov	a,r2
      0007CE 24r00            [12] 1950 	add	a,#_u
      0007D0 F5 82            [12] 1951 	mov	dpl,a
      0007D2 EB               [12] 1952 	mov	a,r3
      0007D3 34s48            [12] 1953 	addc	a,#(_u >> 8)
      0007D5 F5 83            [12] 1954 	mov	dph,a
      0007D7 E0               [24] 1955 	movx	a,@dptr
      0007D8 FB               [12] 1956 	mov	r3,a
      0007D9 A8*00            [24] 1957 	mov	r0,_bp
      0007DB 08               [12] 1958 	inc	r0
      0007DC EB               [12] 1959 	mov	a,r3
      0007DD 26               [12] 1960 	add	a,@r0
      0007DE F6               [12] 1961 	mov	@r0,a
                                   1962 ;	life.c:215: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007DF E5*00            [12] 1963 	mov	a,_bp
      0007E1 24 0C            [12] 1964 	add	a,#0x0c
      0007E3 F8               [12] 1965 	mov	r0,a
      0007E4 E5*00            [12] 1966 	mov	a,_bp
      0007E6 24 08            [12] 1967 	add	a,#0x08
      0007E8 F9               [12] 1968 	mov	r1,a
      0007E9 E7               [12] 1969 	mov	a,@r1
      0007EA 26               [12] 1970 	add	a,@r0
      0007EB FA               [12] 1971 	mov	r2,a
      0007EC 09               [12] 1972 	inc	r1
      0007ED E7               [12] 1973 	mov	a,@r1
      0007EE 08               [12] 1974 	inc	r0
      0007EF 36               [12] 1975 	addc	a,@r0
      0007F0 FB               [12] 1976 	mov	r3,a
      0007F1 EA               [12] 1977 	mov	a,r2
      0007F2 24r00            [12] 1978 	add	a,#_u
      0007F4 F5 82            [12] 1979 	mov	dpl,a
      0007F6 EB               [12] 1980 	mov	a,r3
      0007F7 34s48            [12] 1981 	addc	a,#(_u >> 8)
      0007F9 F5 83            [12] 1982 	mov	dph,a
      0007FB E0               [24] 1983 	movx	a,@dptr
      0007FC FB               [12] 1984 	mov	r3,a
      0007FD A8*00            [24] 1985 	mov	r0,_bp
      0007FF 08               [12] 1986 	inc	r0
      000800 EB               [12] 1987 	mov	a,r3
      000801 26               [12] 1988 	add	a,@r0
      000802 F6               [12] 1989 	mov	@r0,a
                                   1990 ;	life.c:217: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000803 E5*00            [12] 1991 	mov	a,_bp
      000805 24 0C            [12] 1992 	add	a,#0x0c
      000807 F8               [12] 1993 	mov	r0,a
      000808 EE               [12] 1994 	mov	a,r6
      000809 26               [12] 1995 	add	a,@r0
      00080A FA               [12] 1996 	mov	r2,a
      00080B EF               [12] 1997 	mov	a,r7
      00080C 08               [12] 1998 	inc	r0
      00080D 36               [12] 1999 	addc	a,@r0
      00080E FB               [12] 2000 	mov	r3,a
      00080F EA               [12] 2001 	mov	a,r2
      000810 24r00            [12] 2002 	add	a,#_u
      000812 F5 82            [12] 2003 	mov	dpl,a
      000814 EB               [12] 2004 	mov	a,r3
      000815 34s48            [12] 2005 	addc	a,#(_u >> 8)
      000817 F5 83            [12] 2006 	mov	dph,a
      000819 E0               [24] 2007 	movx	a,@dptr
      00081A FB               [12] 2008 	mov	r3,a
      00081B A8*00            [24] 2009 	mov	r0,_bp
      00081D 08               [12] 2010 	inc	r0
      00081E E5*00            [12] 2011 	mov	a,_bp
      000820 24 0C            [12] 2012 	add	a,#0x0c
      000822 F9               [12] 2013 	mov	r1,a
      000823 EB               [12] 2014 	mov	a,r3
      000824 26               [12] 2015 	add	a,@r0
      000825 F7               [12] 2016 	mov	@r1,a
                                   2017 ;	life.c:219: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000826 E5*00            [12] 2018 	mov	a,_bp
      000828 24 0A            [12] 2019 	add	a,#0x0a
      00082A F8               [12] 2020 	mov	r0,a
      00082B 74 C1            [12] 2021 	mov	a,#0xc1
      00082D 26               [12] 2022 	add	a,@r0
      00082E FA               [12] 2023 	mov	r2,a
      00082F E4               [12] 2024 	clr	a
      000830 08               [12] 2025 	inc	r0
      000831 36               [12] 2026 	addc	a,@r0
      000832 FB               [12] 2027 	mov	r3,a
      000833 C0 07            [24] 2028 	push	ar7
      000835 C0 06            [24] 2029 	push	ar6
      000837 C0 05            [24] 2030 	push	ar5
      000839 C0 04            [24] 2031 	push	ar4
      00083B 74 C0            [12] 2032 	mov	a,#0xc0
      00083D C0 E0            [24] 2033 	push	acc
      00083F E4               [12] 2034 	clr	a
      000840 C0 E0            [24] 2035 	push	acc
      000842 8A 82            [24] 2036 	mov	dpl,r2
      000844 8B 83            [24] 2037 	mov	dph,r3
      000846 12r00r00         [24] 2038 	lcall	__modsint
      000849 AA 82            [24] 2039 	mov	r2,dpl
      00084B AB 83            [24] 2040 	mov	r3,dph
      00084D 15 81            [12] 2041 	dec	sp
      00084F 15 81            [12] 2042 	dec	sp
      000851 C0 02            [24] 2043 	push	ar2
      000853 C0 03            [24] 2044 	push	ar3
      000855 90 00 30         [24] 2045 	mov	dptr,#0x0030
      000858 12r00r00         [24] 2046 	lcall	__mulint
      00085B AA 82            [24] 2047 	mov	r2,dpl
      00085D AB 83            [24] 2048 	mov	r3,dph
      00085F 15 81            [12] 2049 	dec	sp
      000861 15 81            [12] 2050 	dec	sp
      000863 D0 04            [24] 2051 	pop	ar4
      000865 D0 05            [24] 2052 	pop	ar5
      000867 D0 06            [24] 2053 	pop	ar6
      000869 D0 07            [24] 2054 	pop	ar7
      00086B EC               [12] 2055 	mov	a,r4
      00086C 2A               [12] 2056 	add	a,r2
      00086D FC               [12] 2057 	mov	r4,a
      00086E ED               [12] 2058 	mov	a,r5
      00086F 3B               [12] 2059 	addc	a,r3
      000870 FD               [12] 2060 	mov	r5,a
      000871 EC               [12] 2061 	mov	a,r4
      000872 24r00            [12] 2062 	add	a,#_u
      000874 F5 82            [12] 2063 	mov	dpl,a
      000876 ED               [12] 2064 	mov	a,r5
      000877 34s48            [12] 2065 	addc	a,#(_u >> 8)
      000879 F5 83            [12] 2066 	mov	dph,a
      00087B E0               [24] 2067 	movx	a,@dptr
      00087C FD               [12] 2068 	mov	r5,a
      00087D E5*00            [12] 2069 	mov	a,_bp
      00087F 24 0C            [12] 2070 	add	a,#0x0c
      000881 F8               [12] 2071 	mov	r0,a
      000882 E5*00            [12] 2072 	mov	a,_bp
      000884 24 0C            [12] 2073 	add	a,#0x0c
      000886 F9               [12] 2074 	mov	r1,a
      000887 ED               [12] 2075 	mov	a,r5
      000888 26               [12] 2076 	add	a,@r0
      000889 F7               [12] 2077 	mov	@r1,a
                                   2078 ;	life.c:221: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00088A E5*00            [12] 2079 	mov	a,_bp
      00088C 24 08            [12] 2080 	add	a,#0x08
      00088E F8               [12] 2081 	mov	r0,a
      00088F E6               [12] 2082 	mov	a,@r0
      000890 2A               [12] 2083 	add	a,r2
      000891 FC               [12] 2084 	mov	r4,a
      000892 08               [12] 2085 	inc	r0
      000893 E6               [12] 2086 	mov	a,@r0
      000894 3B               [12] 2087 	addc	a,r3
      000895 FD               [12] 2088 	mov	r5,a
      000896 EC               [12] 2089 	mov	a,r4
      000897 24r00            [12] 2090 	add	a,#_u
      000899 F5 82            [12] 2091 	mov	dpl,a
      00089B ED               [12] 2092 	mov	a,r5
      00089C 34s48            [12] 2093 	addc	a,#(_u >> 8)
      00089E F5 83            [12] 2094 	mov	dph,a
      0008A0 E0               [24] 2095 	movx	a,@dptr
      0008A1 FD               [12] 2096 	mov	r5,a
      0008A2 E5*00            [12] 2097 	mov	a,_bp
      0008A4 24 0C            [12] 2098 	add	a,#0x0c
      0008A6 F8               [12] 2099 	mov	r0,a
      0008A7 ED               [12] 2100 	mov	a,r5
      0008A8 26               [12] 2101 	add	a,@r0
      0008A9 FD               [12] 2102 	mov	r5,a
                                   2103 ;	life.c:222: y1 = 1; x1 = 1;
      0008AA 78r20            [12] 2104 	mov	r0,#_y1
      0008AC 76 01            [12] 2105 	mov	@r0,#0x01
      0008AE 08               [12] 2106 	inc	r0
      0008AF 76 00            [12] 2107 	mov	@r0,#0x00
      0008B1 78r1E            [12] 2108 	mov	r0,#_x1
      0008B3 76 01            [12] 2109 	mov	@r0,#0x01
      0008B5 08               [12] 2110 	inc	r0
      0008B6 76 00            [12] 2111 	mov	@r0,#0x00
                                   2112 ;	life.c:223: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008B8 EE               [12] 2113 	mov	a,r6
      0008B9 2A               [12] 2114 	add	a,r2
      0008BA FE               [12] 2115 	mov	r6,a
      0008BB EF               [12] 2116 	mov	a,r7
      0008BC 3B               [12] 2117 	addc	a,r3
      0008BD FF               [12] 2118 	mov	r7,a
      0008BE EE               [12] 2119 	mov	a,r6
      0008BF 24r00            [12] 2120 	add	a,#_u
      0008C1 F5 82            [12] 2121 	mov	dpl,a
      0008C3 EF               [12] 2122 	mov	a,r7
      0008C4 34s48            [12] 2123 	addc	a,#(_u >> 8)
      0008C6 F5 83            [12] 2124 	mov	dph,a
      0008C8 E0               [24] 2125 	movx	a,@dptr
      0008C9 2D               [12] 2126 	add	a,r5
      0008CA FF               [12] 2127 	mov	r7,a
      0008CB 78r1B            [12] 2128 	mov	r0,#_n
      0008CD A6 07            [24] 2129 	mov	@r0,ar7
                                   2130 ;	life.c:225: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008CF A8*00            [24] 2131 	mov	r0,_bp
      0008D1 08               [12] 2132 	inc	r0
      0008D2 08               [12] 2133 	inc	r0
      0008D3 E6               [12] 2134 	mov	a,@r0
      0008D4 24r00            [12] 2135 	add	a,#_nu
      0008D6 FD               [12] 2136 	mov	r5,a
      0008D7 08               [12] 2137 	inc	r0
      0008D8 E6               [12] 2138 	mov	a,@r0
      0008D9 34s6C            [12] 2139 	addc	a,#(_nu >> 8)
      0008DB FE               [12] 2140 	mov	r6,a
      0008DC BF 03 02         [24] 2141 	cjne	r7,#0x03,00562$
      0008DF 80 28            [24] 2142 	sjmp	00254$
      0008E1                       2143 00562$:
      0008E1 BF 02 21         [24] 2144 	cjne	r7,#0x02,00253$
      0008E4 E5*00            [12] 2145 	mov	a,_bp
      0008E6 24 04            [12] 2146 	add	a,#0x04
      0008E8 F8               [12] 2147 	mov	r0,a
      0008E9 E5*00            [12] 2148 	mov	a,_bp
      0008EB 24 06            [12] 2149 	add	a,#0x06
      0008ED F9               [12] 2150 	mov	r1,a
      0008EE E7               [12] 2151 	mov	a,@r1
      0008EF 26               [12] 2152 	add	a,@r0
      0008F0 FC               [12] 2153 	mov	r4,a
      0008F1 09               [12] 2154 	inc	r1
      0008F2 E7               [12] 2155 	mov	a,@r1
      0008F3 08               [12] 2156 	inc	r0
      0008F4 36               [12] 2157 	addc	a,@r0
      0008F5 FF               [12] 2158 	mov	r7,a
      0008F6 EC               [12] 2159 	mov	a,r4
      0008F7 24r00            [12] 2160 	add	a,#_u
      0008F9 FC               [12] 2161 	mov	r4,a
      0008FA EF               [12] 2162 	mov	a,r7
      0008FB 34s48            [12] 2163 	addc	a,#(_u >> 8)
      0008FD FF               [12] 2164 	mov	r7,a
      0008FE 8C 82            [24] 2165 	mov	dpl,r4
      000900 8F 83            [24] 2166 	mov	dph,r7
      000902 E0               [24] 2167 	movx	a,@dptr
      000903 70 04            [24] 2168 	jnz	00254$
      000905                       2169 00253$:
                                   2170 ;	assignBit
      000905 C2*00            [12] 2171 	clr	b0
      000907 80 02            [24] 2172 	sjmp	00255$
      000909                       2173 00254$:
                                   2174 ;	assignBit
      000909 D2*00            [12] 2175 	setb	b0
      00090B                       2176 00255$:
      00090B A2*00            [12] 2177 	mov	c,b0
      00090D E4               [12] 2178 	clr	a
      00090E 33               [12] 2179 	rlc	a
      00090F 8D 82            [24] 2180 	mov	dpl,r5
      000911 8E 83            [24] 2181 	mov	dph,r6
      000913 F0               [24] 2182 	movx	@dptr,a
                                   2183 ;	life.c:226: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000914 78r15            [12] 2184 	mov	r0,#_y
      000916 E6               [12] 2185 	mov	a,@r0
      000917 C0 E0            [24] 2186 	push	acc
      000919 08               [12] 2187 	inc	r0
      00091A E6               [12] 2188 	mov	a,@r0
      00091B C0 E0            [24] 2189 	push	acc
      00091D 90 00 30         [24] 2190 	mov	dptr,#0x0030
      000920 12r00r00         [24] 2191 	lcall	__mulint
      000923 AE 82            [24] 2192 	mov	r6,dpl
      000925 AF 83            [24] 2193 	mov	r7,dph
      000927 15 81            [12] 2194 	dec	sp
      000929 15 81            [12] 2195 	dec	sp
      00092B 78r13            [12] 2196 	mov	r0,#_x
      00092D E6               [12] 2197 	mov	a,@r0
      00092E 2E               [12] 2198 	add	a,r6
      00092F FE               [12] 2199 	mov	r6,a
      000930 08               [12] 2200 	inc	r0
      000931 E6               [12] 2201 	mov	a,@r0
      000932 3F               [12] 2202 	addc	a,r7
      000933 FF               [12] 2203 	mov	r7,a
      000934 EE               [12] 2204 	mov	a,r6
      000935 24r00            [12] 2205 	add	a,#_pu
      000937 F5 82            [12] 2206 	mov	dpl,a
      000939 EF               [12] 2207 	mov	a,r7
      00093A 34s24            [12] 2208 	addc	a,#(_pu >> 8)
      00093C F5 83            [12] 2209 	mov	dph,a
      00093E E0               [24] 2210 	movx	a,@dptr
      00093F FD               [12] 2211 	mov	r5,a
      000940 EE               [12] 2212 	mov	a,r6
      000941 24r00            [12] 2213 	add	a,#_nu
      000943 F5 82            [12] 2214 	mov	dpl,a
      000945 EF               [12] 2215 	mov	a,r7
      000946 34s6C            [12] 2216 	addc	a,#(_nu >> 8)
      000948 F5 83            [12] 2217 	mov	dph,a
      00094A E0               [24] 2218 	movx	a,@dptr
      00094B FC               [12] 2219 	mov	r4,a
      00094C 6D               [12] 2220 	xrl	a,r5
      00094D 78r1D            [12] 2221 	mov	r0,#_cycle2
      00094F 46               [12] 2222 	orl	a,@r0
      000950 F6               [12] 2223 	mov	@r0,a
                                   2224 ;	life.c:227: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000951 EE               [12] 2225 	mov	a,r6
      000952 24r00            [12] 2226 	add	a,#_u
      000954 F5 82            [12] 2227 	mov	dpl,a
      000956 EF               [12] 2228 	mov	a,r7
      000957 34s48            [12] 2229 	addc	a,#(_u >> 8)
      000959 F5 83            [12] 2230 	mov	dph,a
      00095B E0               [24] 2231 	movx	a,@dptr
      00095C FF               [12] 2232 	mov	r7,a
      00095D EC               [12] 2233 	mov	a,r4
      00095E 6F               [12] 2234 	xrl	a,r7
      00095F 78r1C            [12] 2235 	mov	r0,#_fixed
      000961 46               [12] 2236 	orl	a,@r0
      000962 F6               [12] 2237 	mov	@r0,a
                                   2238 ;	life.c:203: for (x = 0; x < W; x++) {
      000963 78r13            [12] 2239 	mov	r0,#_x
      000965 06               [12] 2240 	inc	@r0
      000966 B6 00 02         [24] 2241 	cjne	@r0,#0x00,00566$
      000969 08               [12] 2242 	inc	r0
      00096A 06               [12] 2243 	inc	@r0
      00096B                       2244 00566$:
      00096B 78r13            [12] 2245 	mov	r0,#_x
      00096D C3               [12] 2246 	clr	c
      00096E E6               [12] 2247 	mov	a,@r0
      00096F 94 30            [12] 2248 	subb	a,#0x30
      000971 08               [12] 2249 	inc	r0
      000972 E6               [12] 2250 	mov	a,@r0
      000973 64 80            [12] 2251 	xrl	a,#0x80
      000975 94 80            [12] 2252 	subb	a,#0x80
      000977 50 03            [24] 2253 	jnc	00567$
      000979 02r05rEB         [24] 2254 	ljmp	00226$
      00097C                       2255 00567$:
                                   2256 ;	life.c:200: for (y = 0; y < H; y++) {
      00097C 78r15            [12] 2257 	mov	r0,#_y
      00097E 06               [12] 2258 	inc	@r0
      00097F B6 00 02         [24] 2259 	cjne	@r0,#0x00,00568$
      000982 08               [12] 2260 	inc	r0
      000983 06               [12] 2261 	inc	@r0
      000984                       2262 00568$:
      000984 78r15            [12] 2263 	mov	r0,#_y
      000986 C3               [12] 2264 	clr	c
      000987 E6               [12] 2265 	mov	a,@r0
      000988 94 C0            [12] 2266 	subb	a,#0xc0
      00098A 08               [12] 2267 	inc	r0
      00098B E6               [12] 2268 	mov	a,@r0
      00098C 64 80            [12] 2269 	xrl	a,#0x80
      00098E 94 80            [12] 2270 	subb	a,#0x80
      000990 50 03            [24] 2271 	jnc	00569$
      000992 02r05rCF         [24] 2272 	ljmp	00228$
      000995                       2273 00569$:
                                   2274 ;	life.c:231: OE76 = OE76_0;
      000995 78r12            [12] 2275 	mov	r0,#_OE76
      000997 76 3F            [12] 2276 	mov	@r0,#0x3f
                                   2277 ;	life.c:232: flashOE();
      000999 12r00r26         [24] 2278 	lcall	_flashOE
                                   2279 ;	life.c:234: cycle2 = !cycle2;
      00099C 78r1D            [12] 2280 	mov	r0,#_cycle2
      00099E E6               [12] 2281 	mov	a,@r0
      00099F B4 01 00         [24] 2282 	cjne	a,#0x01,00570$
      0009A2                       2283 00570$:
      0009A2 92*00            [24] 2284 	mov	b0,c
      0009A4 78r1D            [12] 2285 	mov	r0,#_cycle2
      0009A6 E4               [12] 2286 	clr	a
      0009A7 33               [12] 2287 	rlc	a
      0009A8 F6               [12] 2288 	mov	@r0,a
                                   2289 ;	life.c:235: fixed = !fixed;
      0009A9 78r1C            [12] 2290 	mov	r0,#_fixed
      0009AB E6               [12] 2291 	mov	a,@r0
      0009AC B4 01 00         [24] 2292 	cjne	a,#0x01,00571$
      0009AF                       2293 00571$:
      0009AF 92*00            [24] 2294 	mov	b0,c
      0009B1 78r1C            [12] 2295 	mov	r0,#_fixed
      0009B3 E4               [12] 2296 	clr	a
      0009B4 33               [12] 2297 	rlc	a
      0009B5 F6               [12] 2298 	mov	@r0,a
                                   2299 ;	life.c:237: memcpy(pu, u, sizeof (u));
      0009B6 E4               [12] 2300 	clr	a
      0009B7 C0 E0            [24] 2301 	push	acc
      0009B9 74 24            [12] 2302 	mov	a,#0x24
      0009BB C0 E0            [24] 2303 	push	acc
      0009BD 74r00            [12] 2304 	mov	a,#_u
      0009BF C0 E0            [24] 2305 	push	acc
      0009C1 74s48            [12] 2306 	mov	a,#(_u >> 8)
      0009C3 C0 E0            [24] 2307 	push	acc
      0009C5 E4               [12] 2308 	clr	a
      0009C6 C0 E0            [24] 2309 	push	acc
      0009C8 90r24r00         [24] 2310 	mov	dptr,#_pu
      0009CB 75 F0 00         [24] 2311 	mov	b,#0x00
      0009CE 12r00r00         [24] 2312 	lcall	___memcpy
      0009D1 E5 81            [12] 2313 	mov	a,sp
      0009D3 24 FB            [12] 2314 	add	a,#0xfb
      0009D5 F5 81            [12] 2315 	mov	sp,a
                                   2316 ;	life.c:238: memcpy(u, nu, sizeof (nu));
      0009D7 E4               [12] 2317 	clr	a
      0009D8 C0 E0            [24] 2318 	push	acc
      0009DA 74 24            [12] 2319 	mov	a,#0x24
      0009DC C0 E0            [24] 2320 	push	acc
      0009DE 74r00            [12] 2321 	mov	a,#_nu
      0009E0 C0 E0            [24] 2322 	push	acc
      0009E2 74s6C            [12] 2323 	mov	a,#(_nu >> 8)
      0009E4 C0 E0            [24] 2324 	push	acc
      0009E6 E4               [12] 2325 	clr	a
      0009E7 C0 E0            [24] 2326 	push	acc
      0009E9 90r48r00         [24] 2327 	mov	dptr,#_u
      0009EC 75 F0 00         [24] 2328 	mov	b,#0x00
      0009EF 12r00r00         [24] 2329 	lcall	___memcpy
      0009F2 E5 81            [12] 2330 	mov	a,sp
      0009F4 24 FB            [12] 2331 	add	a,#0xfb
      0009F6 F5 81            [12] 2332 	mov	sp,a
                                   2333 ;	life.c:284: if (fixed || cycle2) {
      0009F8 78r1C            [12] 2334 	mov	r0,#_fixed
      0009FA E6               [12] 2335 	mov	a,@r0
      0009FB 70 08            [24] 2336 	jnz	00135$
      0009FD 78r1D            [12] 2337 	mov	r0,#_cycle2
      0009FF E6               [12] 2338 	mov	a,@r0
      000A00 70 03            [24] 2339 	jnz	00573$
      000A02 02r05rA4         [24] 2340 	ljmp	00241$
      000A05                       2341 00573$:
      000A05                       2342 00135$:
                                   2343 ;	life.c:285: printstr("DONE ");
      000A05 7Dr5C            [12] 2344 	mov	r5,#___str_7
      000A07 7Es00            [12] 2345 	mov	r6,#(___str_7 >> 8)
      000A09 7F 80            [12] 2346 	mov	r7,#0x80
                                   2347 ;	life.c:53: return;
      000A0B                       2348 00231$:
                                   2349 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A0B 8D 82            [24] 2350 	mov	dpl,r5
      000A0D 8E 83            [24] 2351 	mov	dph,r6
      000A0F 8F F0            [24] 2352 	mov	b,r7
      000A11 12r00r00         [24] 2353 	lcall	__gptrget
      000A14 FC               [12] 2354 	mov	r4,a
      000A15 60 10            [24] 2355 	jz	00192$
      000A17 7B 00            [12] 2356 	mov	r3,#0x00
      000A19 8C 82            [24] 2357 	mov	dpl,r4
      000A1B 8B 83            [24] 2358 	mov	dph,r3
      000A1D 12r00r00         [24] 2359 	lcall	_putchar
      000A20 0D               [12] 2360 	inc	r5
                                   2361 ;	life.c:285: printstr("DONE ");
      000A21 BD 00 E7         [24] 2362 	cjne	r5,#0x00,00231$
      000A24 0E               [12] 2363 	inc	r6
      000A25 80 E4            [24] 2364 	sjmp	00231$
      000A27                       2365 00192$:
                                   2366 ;	life.c:286: if (fixed) printstr("FIXED\r\n");
      000A27 78r1C            [12] 2367 	mov	r0,#_fixed
      000A29 E6               [12] 2368 	mov	a,@r0
      000A2A 60 22            [24] 2369 	jz	00133$
      000A2C 7Dr62            [12] 2370 	mov	r5,#___str_8
      000A2E 7Es00            [12] 2371 	mov	r6,#(___str_8 >> 8)
      000A30 7F 80            [12] 2372 	mov	r7,#0x80
                                   2373 ;	life.c:53: return;
      000A32                       2374 00234$:
                                   2375 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A32 8D 82            [24] 2376 	mov	dpl,r5
      000A34 8E 83            [24] 2377 	mov	dph,r6
      000A36 8F F0            [24] 2378 	mov	b,r7
      000A38 12r00r00         [24] 2379 	lcall	__gptrget
      000A3B FC               [12] 2380 	mov	r4,a
      000A3C 60 32            [24] 2381 	jz	00134$
      000A3E 7B 00            [12] 2382 	mov	r3,#0x00
      000A40 8C 82            [24] 2383 	mov	dpl,r4
      000A42 8B 83            [24] 2384 	mov	dph,r3
      000A44 12r00r00         [24] 2385 	lcall	_putchar
      000A47 0D               [12] 2386 	inc	r5
                                   2387 ;	life.c:286: if (fixed) printstr("FIXED\r\n");
      000A48 BD 00 E7         [24] 2388 	cjne	r5,#0x00,00234$
      000A4B 0E               [12] 2389 	inc	r6
      000A4C 80 E4            [24] 2390 	sjmp	00234$
      000A4E                       2391 00133$:
                                   2392 ;	life.c:287: else printstr("CYCLE2\r\n");
      000A4E 7Dr6A            [12] 2393 	mov	r5,#___str_9
      000A50 7Es00            [12] 2394 	mov	r6,#(___str_9 >> 8)
      000A52 7F 80            [12] 2395 	mov	r7,#0x80
                                   2396 ;	life.c:53: return;
      000A54                       2397 00237$:
                                   2398 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A54 8D 82            [24] 2399 	mov	dpl,r5
      000A56 8E 83            [24] 2400 	mov	dph,r6
      000A58 8F F0            [24] 2401 	mov	b,r7
      000A5A 12r00r00         [24] 2402 	lcall	__gptrget
      000A5D FC               [12] 2403 	mov	r4,a
      000A5E 60 10            [24] 2404 	jz	00134$
      000A60 7B 00            [12] 2405 	mov	r3,#0x00
      000A62 8C 82            [24] 2406 	mov	dpl,r4
      000A64 8B 83            [24] 2407 	mov	dph,r3
      000A66 12r00r00         [24] 2408 	lcall	_putchar
      000A69 0D               [12] 2409 	inc	r5
                                   2410 ;	life.c:287: else printstr("CYCLE2\r\n");
      000A6A BD 00 E7         [24] 2411 	cjne	r5,#0x00,00237$
      000A6D 0E               [12] 2412 	inc	r6
      000A6E 80 E4            [24] 2413 	sjmp	00237$
      000A70                       2414 00134$:
                                   2415 ;	life.c:288: (void)getchar();
      000A70 12r00r05         [24] 2416 	lcall	_getchar
                                   2417 ;	life.c:289: break;
      000A73                       2418 00138$:
                                   2419 ;	life.c:293: if (i1) {
      000A73 78r11            [12] 2420 	mov	r0,#_i1
      000A75 E6               [12] 2421 	mov	a,@r0
      000A76 60 25            [24] 2422 	jz	00247$
                                   2423 ;	life.c:294: printstr("BREAK\r\n");
      000A78 7Dr73            [12] 2424 	mov	r5,#___str_10
      000A7A 7Es00            [12] 2425 	mov	r6,#(___str_10 >> 8)
      000A7C 7F 80            [12] 2426 	mov	r7,#0x80
                                   2427 ;	life.c:53: return;
      000A7E                       2428 00244$:
                                   2429 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A7E 8D 82            [24] 2430 	mov	dpl,r5
      000A80 8E 83            [24] 2431 	mov	dph,r6
      000A82 8F F0            [24] 2432 	mov	b,r7
      000A84 12r00r00         [24] 2433 	lcall	__gptrget
      000A87 FC               [12] 2434 	mov	r4,a
      000A88 60 10            [24] 2435 	jz	00198$
      000A8A 7B 00            [12] 2436 	mov	r3,#0x00
      000A8C 8C 82            [24] 2437 	mov	dpl,r4
      000A8E 8B 83            [24] 2438 	mov	dph,r3
      000A90 12r00r00         [24] 2439 	lcall	_putchar
      000A93 0D               [12] 2440 	inc	r5
                                   2441 ;	life.c:294: printstr("BREAK\r\n");
      000A94 BD 00 E7         [24] 2442 	cjne	r5,#0x00,00244$
      000A97 0E               [12] 2443 	inc	r6
      000A98 80 E4            [24] 2444 	sjmp	00244$
      000A9A                       2445 00198$:
                                   2446 ;	life.c:295: (void)getchar();
      000A9A 12r00r05         [24] 2447 	lcall	_getchar
      000A9D                       2448 00247$:
                                   2449 ;	life.c:256: for (i0 = 0; !i0; ) {	
      000A9D 78r10            [12] 2450 	mov	r0,#_i0
      000A9F E6               [12] 2451 	mov	a,@r0
      000AA0 70 03            [24] 2452 	jnz	00584$
      000AA2 02r02r3B         [24] 2453 	ljmp	00246$
      000AA5                       2454 00584$:
                                   2455 ;	life.c:299: terminate:
      000AA5                       2456 00142$:
                                   2457 ;	life.c:300: EA = 0;
                                   2458 ;	assignBit
      000AA5 C2 AF            [12] 2459 	clr	_EA
                                   2460 ;	life.c:301: printstr("TERM\r\n");
      000AA7 7Dr7B            [12] 2461 	mov	r5,#___str_11
      000AA9 7Es00            [12] 2462 	mov	r6,#(___str_11 >> 8)
      000AAB 7F 80            [12] 2463 	mov	r7,#0x80
                                   2464 ;	life.c:53: return;
      000AAD                       2465 00249$:
                                   2466 ;	life.c:51: for (; *s; s++) putchar(*s);
      000AAD 8D 82            [24] 2467 	mov	dpl,r5
      000AAF 8E 83            [24] 2468 	mov	dph,r6
      000AB1 8F F0            [24] 2469 	mov	b,r7
      000AB3 12r00r00         [24] 2470 	lcall	__gptrget
      000AB6 FC               [12] 2471 	mov	r4,a
      000AB7 60 10            [24] 2472 	jz	00200$
      000AB9 7B 00            [12] 2473 	mov	r3,#0x00
      000ABB 8C 82            [24] 2474 	mov	dpl,r4
      000ABD 8B 83            [24] 2475 	mov	dph,r3
      000ABF 12r00r00         [24] 2476 	lcall	_putchar
      000AC2 0D               [12] 2477 	inc	r5
                                   2478 ;	life.c:301: printstr("TERM\r\n");
      000AC3 BD 00 E7         [24] 2479 	cjne	r5,#0x00,00249$
      000AC6 0E               [12] 2480 	inc	r6
      000AC7 80 E4            [24] 2481 	sjmp	00249$
      000AC9                       2482 00200$:
                                   2483 ;	life.c:302: (void)getchar();
      000AC9 12r00r05         [24] 2484 	lcall	_getchar
                                   2485 ;	life.c:306: __endasm;
      000ACC 02 00 00         [24] 2486 	ljmp	0
                                   2487 ;	life.c:307: }
      000ACF 85*00 81         [24] 2488 	mov	sp,_bp
      000AD2 D0*00            [24] 2489 	pop	_bp
      000AD4 22               [24] 2490 	ret
                                   2491 	.area CSEG    (CODE)
                                   2492 	.area CONST   (CODE)
                                   2493 	.area CONST   (CODE)
      000000                       2494 ___str_0:
      000000 1B                    2495 	.db 0x1b
      000001 5B 32 4A              2496 	.ascii "[2J"
      000004 1B                    2497 	.db 0x1b
      000005 5B 6D 47 45 4E 20     2498 	.ascii "[mGEN "
      00000B 00                    2499 	.db 0x00
                                   2500 	.area CSEG    (CODE)
                                   2501 	.area CONST   (CODE)
      00000C                       2502 ___str_1:
      00000C 0D                    2503 	.db 0x0d
      00000D 0A                    2504 	.db 0x0a
      00000E 00                    2505 	.db 0x00
                                   2506 	.area CSEG    (CODE)
                                   2507 	.area CONST   (CODE)
      00000F                       2508 ___str_2:
      00000F 4C 4F 41 44 20 30 20  2509 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00001D 00                    2510 	.db 0x00
                                   2511 	.area CSEG    (CODE)
                                   2512 	.area CONST   (CODE)
      00001E                       2513 ___str_3:
      00001E 3E                    2514 	.ascii ">"
      00001F 0D                    2515 	.db 0x0d
      000020 0A                    2516 	.db 0x0a
      000021 00                    2517 	.db 0x00
                                   2518 	.area CSEG    (CODE)
                                   2519 	.area CONST   (CODE)
      000022                       2520 ___str_4:
      000022 52 41 4E 44 4F 4D     2521 	.ascii "RANDOM"
      000028 00                    2522 	.db 0x00
                                   2523 	.area CSEG    (CODE)
                                   2524 	.area CONST   (CODE)
      000029                       2525 ___str_5:
      000029 1B                    2526 	.db 0x1b
      00002A 5B 32 4A              2527 	.ascii "[2J"
      00002D 1B                    2528 	.db 0x1b
      00002E 5B 3F 32 35 6C        2529 	.ascii "[?25l"
      000033 1B                    2530 	.db 0x1b
      000034 5B 6D 4C 49 46 45 20  2531 	.ascii "[mLIFE INIT T L R P"
             49 4E 49 54 20 54 20
             4C 20 52 20 50
      000047 0D                    2532 	.db 0x0d
      000048 0A                    2533 	.db 0x0a
      000049 00                    2534 	.db 0x00
                                   2535 	.area CSEG    (CODE)
                                   2536 	.area CONST   (CODE)
      00004A                       2537 ___str_6:
      00004A 52 45 41 44 59 20 54  2538 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000059 0D                    2539 	.db 0x0d
      00005A 0A                    2540 	.db 0x0a
      00005B 00                    2541 	.db 0x00
                                   2542 	.area CSEG    (CODE)
                                   2543 	.area CONST   (CODE)
      00005C                       2544 ___str_7:
      00005C 44 4F 4E 45 20        2545 	.ascii "DONE "
      000061 00                    2546 	.db 0x00
                                   2547 	.area CSEG    (CODE)
                                   2548 	.area CONST   (CODE)
      000062                       2549 ___str_8:
      000062 46 49 58 45 44        2550 	.ascii "FIXED"
      000067 0D                    2551 	.db 0x0d
      000068 0A                    2552 	.db 0x0a
      000069 00                    2553 	.db 0x00
                                   2554 	.area CSEG    (CODE)
                                   2555 	.area CONST   (CODE)
      00006A                       2556 ___str_9:
      00006A 43 59 43 4C 45 32     2557 	.ascii "CYCLE2"
      000070 0D                    2558 	.db 0x0d
      000071 0A                    2559 	.db 0x0a
      000072 00                    2560 	.db 0x00
                                   2561 	.area CSEG    (CODE)
                                   2562 	.area CONST   (CODE)
      000073                       2563 ___str_10:
      000073 42 52 45 41 4B        2564 	.ascii "BREAK"
      000078 0D                    2565 	.db 0x0d
      000079 0A                    2566 	.db 0x0a
      00007A 00                    2567 	.db 0x00
                                   2568 	.area CSEG    (CODE)
                                   2569 	.area CONST   (CODE)
      00007B                       2570 ___str_11:
      00007B 54 45 52 4D           2571 	.ascii "TERM"
      00007F 0D                    2572 	.db 0x0d
      000080 0A                    2573 	.db 0x0a
      000081 00                    2574 	.db 0x00
                                   2575 	.area CSEG    (CODE)
                                   2576 	.area XINIT   (CODE)
                                   2577 	.area CABS    (ABS,CODE)
