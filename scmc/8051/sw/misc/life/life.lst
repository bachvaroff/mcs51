                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _generation
                                    143 	.globl _cycle2
                                    144 	.globl _fixed
                                    145 	.globl _n
                                    146 	.globl _bstep
                                    147 	.globl _c
                                    148 	.globl _j
                                    149 	.globl _y1
                                    150 	.globl _x1
                                    151 	.globl _y
                                    152 	.globl _x
                                    153 	.globl _nu
                                    154 	.globl _u
                                    155 	.globl _pu
                                    156 	.globl _i1
                                    157 	.globl _i0
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 1
      000001                        349 _i1::
      000001                        350 	.ds 1
      000002                        351 _pu::
      000002                        352 	.ds 1024
      000402                        353 _u::
      000402                        354 	.ds 1024
      000802                        355 _nu::
      000802                        356 	.ds 1024
      000C02                        357 _x::
      000C02                        358 	.ds 2
      000C04                        359 _y::
      000C04                        360 	.ds 2
      000C06                        361 _x1::
      000C06                        362 	.ds 2
      000C08                        363 _y1::
      000C08                        364 	.ds 2
      000C0A                        365 _j::
      000C0A                        366 	.ds 2
      000C0C                        367 _c::
      000C0C                        368 	.ds 2
      000C0E                        369 _bstep::
      000C0E                        370 	.ds 1
      000C0F                        371 _n::
      000C0F                        372 	.ds 1
      000C10                        373 _fixed::
      000C10                        374 	.ds 1
      000C11                        375 _cycle2::
      000C11                        376 	.ds 1
      000C12                        377 _generation::
      000C12                        378 	.ds 4
                                    379 ;--------------------------------------------------------
                                    380 ; absolute external ram data
                                    381 ;--------------------------------------------------------
                                    382 	.area XABS    (ABS,XDATA)
                                    383 ;--------------------------------------------------------
                                    384 ; external initialized ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area XISEG   (XDATA)
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT0 (CODE)
                                    389 	.area GSINIT1 (CODE)
                                    390 	.area GSINIT2 (CODE)
                                    391 	.area GSINIT3 (CODE)
                                    392 	.area GSINIT4 (CODE)
                                    393 	.area GSINIT5 (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.area GSFINAL (CODE)
                                    396 	.area CSEG    (CODE)
                                    397 ;--------------------------------------------------------
                                    398 ; interrupt vector 
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
      000000                        401 __interrupt_vect:
      000000 02r00r00         [24]  402 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  403 	ljmp	_int0
      000006                        404 	.ds	5
      00000B 32               [24]  405 	reti
      00000C                        406 	.ds	7
      000013 02r00r21         [24]  407 	ljmp	_int1
                                    408 ;--------------------------------------------------------
                                    409 ; global & static initialisations
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area GSINIT  (CODE)
                                    413 	.area GSFINAL (CODE)
                                    414 	.area GSINIT  (CODE)
                                    415 	.globl __sdcc_gsinit_startup
                                    416 	.globl __sdcc_program_startup
                                    417 	.globl __start__stack
                                    418 	.globl __mcs51_genXINIT
                                    419 	.globl __mcs51_genXRAMCLEAR
                                    420 	.globl __mcs51_genRAMCLEAR
                                    421 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  422 	ljmp	__sdcc_program_startup
                                    423 ;--------------------------------------------------------
                                    424 ; Home
                                    425 ;--------------------------------------------------------
                                    426 	.area HOME    (CODE)
                                    427 	.area HOME    (CODE)
      000016                        428 __sdcc_program_startup:
      000016 02r02r99         [24]  429 	ljmp	_main
                                    430 ;	return from main will return to caller
                                    431 ;--------------------------------------------------------
                                    432 ; code
                                    433 ;--------------------------------------------------------
                                    434 	.area CSEG    (CODE)
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'putchar'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers 
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:7: int putchar(int c) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function putchar
                                    443 ;	-----------------------------------------
      000000                        444 _putchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:12: __endasm;
      000000 E5 82            [12]  447 	mov	a, dpl
      000002 02 00 30         [24]  448 	ljmp	0x0030
                                    449 ;	life.c:13: }
                                    450 ;	naked function: no epilogue.
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'getchar'
                                    453 ;------------------------------------------------------------
                                    454 ;	life.c:15: int getchar(void) __naked {
                                    455 ;	-----------------------------------------
                                    456 ;	 function getchar
                                    457 ;	-----------------------------------------
      000005                        458 _getchar:
                                    459 ;	naked function: no prologue.
                                    460 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  461 	lcall	0x0032
      000008 F5 82            [12]  462 	mov	dpl, a
      00000A 75 83 00         [24]  463 	mov	dph, #0
      00000D 22               [24]  464 	ret
                                    465 ;	life.c:22: }
                                    466 ;	naked function: no epilogue.
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:65: void int0(void) __interrupt 0 __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000E                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000E C0 E0            [24]  483 	push	acc
      000010 C0 82            [24]  484 	push	dpl
      000012 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  487 	mov	dptr,#_i0
      000017 74 01            [12]  488 	mov	a,#0x01
      000019 F0               [24]  489 	movx	@dptr,a
                                    490 ;	life.c:67: }
      00001A D0 83            [24]  491 	pop	dph
      00001C D0 82            [24]  492 	pop	dpl
      00001E D0 E0            [24]  493 	pop	acc
      000020 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop psw
                                    497 ;	eliminated unneeded push/pop b
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int1'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:69: void int1(void) __interrupt 2 __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int1
                                    504 ;	-----------------------------------------
      000021                        505 _int1:
      000021 C0 E0            [24]  506 	push	acc
      000023 C0 82            [24]  507 	push	dpl
      000025 C0 83            [24]  508 	push	dph
                                    509 ;	life.c:70: i1 = 1;
      000027 90r00r01         [24]  510 	mov	dptr,#_i1
      00002A 74 01            [12]  511 	mov	a,#0x01
      00002C F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:71: }
      00002D D0 83            [24]  514 	pop	dph
      00002F D0 82            [24]  515 	pop	dpl
      000031 D0 E0            [24]  516 	pop	acc
      000033 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;hdr                       Allocated to registers r7 
                                    525 ;__1966080005              Allocated to registers 
                                    526 ;s                         Allocated to registers r5 r6 r7 
                                    527 ;__1310720001              Allocated to registers r6 r7 
                                    528 ;a                         Allocated to registers 
                                    529 ;__1310720003              Allocated to registers r6 r7 
                                    530 ;a                         Allocated to registers 
                                    531 ;__1966080008              Allocated to registers 
                                    532 ;s                         Allocated to registers r5 r6 r7 
                                    533 ;__2621440011              Allocated to registers 
                                    534 ;s                         Allocated to registers r5 r6 r7 
                                    535 ;------------------------------------------------------------
                                    536 ;	life.c:94: void show(char hdr) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function show
                                    539 ;	-----------------------------------------
      000034                        540 _show:
                           000007   541 	ar7 = 0x07
                           000006   542 	ar6 = 0x06
                           000005   543 	ar5 = 0x05
                           000004   544 	ar4 = 0x04
                           000003   545 	ar3 = 0x03
                           000002   546 	ar2 = 0x02
                           000001   547 	ar1 = 0x01
                           000000   548 	ar0 = 0x00
                                    549 ;	life.c:95: if (hdr) {
      000034 E5 82            [12]  550 	mov	a,dpl
      000036 FF               [12]  551 	mov	r7,a
      000037 70 03            [24]  552 	jnz	00190$
      000039 02r01rDA         [24]  553 	ljmp	00102$
      00003C                        554 00190$:
                                    555 ;	life.c:96: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  556 	mov	r5,#___str_0
      00003E 7Es00            [12]  557 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  558 	mov	r7,#0x80
                                    559 ;	life.c:48: return;
      000042                        560 00121$:
                                    561 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  562 	mov	dpl,r5
      000044 8E 83            [24]  563 	mov	dph,r6
      000046 8F F0            [24]  564 	mov	b,r7
      000048 12r00r00         [24]  565 	lcall	__gptrget
      00004B FC               [12]  566 	mov	r4,a
      00004C 60 10            [24]  567 	jz	00109$
      00004E 7B 00            [12]  568 	mov	r3,#0x00
      000050 8C 82            [24]  569 	mov	dpl,r4
      000052 8B 83            [24]  570 	mov	dph,r3
      000054 12r00r00         [24]  571 	lcall	_putchar
      000057 0D               [12]  572 	inc	r5
                                    573 ;	life.c:96: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  574 	cjne	r5,#0x00,00121$
      00005B 0E               [12]  575 	inc	r6
      00005C 80 E4            [24]  576 	sjmp	00121$
      00005E                        577 00109$:
                                    578 ;	life.c:88: print16x(generation[1]);
      00005E 90r0Cr14         [24]  579 	mov	dptr,#(_generation + 0x0002)
      000061 E0               [24]  580 	movx	a,@dptr
      000062 FE               [12]  581 	mov	r6,a
      000063 A3               [24]  582 	inc	dptr
      000064 E0               [24]  583 	movx	a,@dptr
                                    584 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000065 FF               [12]  585 	mov	r7,a
      000066 C4               [12]  586 	swap	a
      000067 54 0F            [12]  587 	anl	a,#0x0f
      000069 30 E3 02         [24]  588 	jnb	acc.3,00193$
      00006C 44 F0            [12]  589 	orl	a,#0xf0
      00006E                        590 00193$:
      00006E FC               [12]  591 	mov	r4,a
      00006F 33               [12]  592 	rlc	a
      000070 95 E0            [12]  593 	subb	a,acc
      000072 53 04 0F         [24]  594 	anl	ar4,#0x0f
      000075 7D 00            [12]  595 	mov	r5,#0x00
      000077 EC               [12]  596 	mov	a,r4
      000078 24r00            [12]  597 	add	a,#_digits
      00007A F5 82            [12]  598 	mov	dpl,a
      00007C ED               [12]  599 	mov	a,r5
      00007D 34s00            [12]  600 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  601 	mov	dph,a
      000081 E4               [12]  602 	clr	a
      000082 93               [24]  603 	movc	a,@a+dptr
      000083 FD               [12]  604 	mov	r5,a
      000084 7C 00            [12]  605 	mov	r4,#0x00
      000086 8D 82            [24]  606 	mov	dpl,r5
      000088 8C 83            [24]  607 	mov	dph,r4
      00008A 12r00r00         [24]  608 	lcall	_putchar
                                    609 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 05            [24]  610 	mov	ar5,r7
      00008F 53 05 0F         [24]  611 	anl	ar5,#0x0f
      000092 7C 00            [12]  612 	mov	r4,#0x00
      000094 ED               [12]  613 	mov	a,r5
      000095 24r00            [12]  614 	add	a,#_digits
      000097 F5 82            [12]  615 	mov	dpl,a
      000099 EC               [12]  616 	mov	a,r4
      00009A 34s00            [12]  617 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  618 	mov	dph,a
      00009E E4               [12]  619 	clr	a
      00009F 93               [24]  620 	movc	a,@a+dptr
      0000A0 FD               [12]  621 	mov	r5,a
      0000A1 7C 00            [12]  622 	mov	r4,#0x00
      0000A3 8D 82            [24]  623 	mov	dpl,r5
      0000A5 8C 83            [24]  624 	mov	dph,r4
      0000A7 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8E 04            [24]  627 	mov	ar4,r6
      0000AC EF               [12]  628 	mov	a,r7
      0000AD C4               [12]  629 	swap	a
      0000AE CC               [12]  630 	xch	a,r4
      0000AF C4               [12]  631 	swap	a
      0000B0 54 0F            [12]  632 	anl	a,#0x0f
      0000B2 6C               [12]  633 	xrl	a,r4
      0000B3 CC               [12]  634 	xch	a,r4
      0000B4 54 0F            [12]  635 	anl	a,#0x0f
      0000B6 CC               [12]  636 	xch	a,r4
      0000B7 6C               [12]  637 	xrl	a,r4
      0000B8 CC               [12]  638 	xch	a,r4
      0000B9 30 E3 02         [24]  639 	jnb	acc.3,00194$
      0000BC 44 F0            [12]  640 	orl	a,#0xf0
      0000BE                        641 00194$:
      0000BE 53 04 0F         [24]  642 	anl	ar4,#0x0f
      0000C1 7D 00            [12]  643 	mov	r5,#0x00
      0000C3 EC               [12]  644 	mov	a,r4
      0000C4 24r00            [12]  645 	add	a,#_digits
      0000C6 F5 82            [12]  646 	mov	dpl,a
      0000C8 ED               [12]  647 	mov	a,r5
      0000C9 34s00            [12]  648 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  649 	mov	dph,a
      0000CD E4               [12]  650 	clr	a
      0000CE 93               [24]  651 	movc	a,@a+dptr
      0000CF FD               [12]  652 	mov	r5,a
      0000D0 7C 00            [12]  653 	mov	r4,#0x00
      0000D2 8D 82            [24]  654 	mov	dpl,r5
      0000D4 8C 83            [24]  655 	mov	dph,r4
      0000D6 12r00r00         [24]  656 	lcall	_putchar
                                    657 ;	life.c:40: putchar(digits[a & 0xf]);
      0000D9 53 06 0F         [24]  658 	anl	ar6,#0x0f
      0000DC 7F 00            [12]  659 	mov	r7,#0x00
      0000DE EE               [12]  660 	mov	a,r6
      0000DF 24r00            [12]  661 	add	a,#_digits
      0000E1 F5 82            [12]  662 	mov	dpl,a
      0000E3 EF               [12]  663 	mov	a,r7
      0000E4 34s00            [12]  664 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  665 	mov	dph,a
      0000E8 E4               [12]  666 	clr	a
      0000E9 93               [24]  667 	movc	a,@a+dptr
      0000EA FF               [12]  668 	mov	r7,a
      0000EB 7E 00            [12]  669 	mov	r6,#0x00
      0000ED 8F 82            [24]  670 	mov	dpl,r7
      0000EF 8E 83            [24]  671 	mov	dph,r6
      0000F1 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:89: print16x(generation[0]);
      0000F4 90r0Cr12         [24]  674 	mov	dptr,#_generation
      0000F7 E0               [24]  675 	movx	a,@dptr
      0000F8 FE               [12]  676 	mov	r6,a
      0000F9 A3               [24]  677 	inc	dptr
      0000FA E0               [24]  678 	movx	a,@dptr
                                    679 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000FB FF               [12]  680 	mov	r7,a
      0000FC C4               [12]  681 	swap	a
      0000FD 54 0F            [12]  682 	anl	a,#0x0f
      0000FF 30 E3 02         [24]  683 	jnb	acc.3,00195$
      000102 44 F0            [12]  684 	orl	a,#0xf0
      000104                        685 00195$:
      000104 FC               [12]  686 	mov	r4,a
      000105 33               [12]  687 	rlc	a
      000106 95 E0            [12]  688 	subb	a,acc
      000108 53 04 0F         [24]  689 	anl	ar4,#0x0f
      00010B 7D 00            [12]  690 	mov	r5,#0x00
      00010D EC               [12]  691 	mov	a,r4
      00010E 24r00            [12]  692 	add	a,#_digits
      000110 F5 82            [12]  693 	mov	dpl,a
      000112 ED               [12]  694 	mov	a,r5
      000113 34s00            [12]  695 	addc	a,#(_digits >> 8)
      000115 F5 83            [12]  696 	mov	dph,a
      000117 E4               [12]  697 	clr	a
      000118 93               [24]  698 	movc	a,@a+dptr
      000119 FD               [12]  699 	mov	r5,a
      00011A 7C 00            [12]  700 	mov	r4,#0x00
      00011C 8D 82            [24]  701 	mov	dpl,r5
      00011E 8C 83            [24]  702 	mov	dph,r4
      000120 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000123 8F 05            [24]  705 	mov	ar5,r7
      000125 53 05 0F         [24]  706 	anl	ar5,#0x0f
      000128 7C 00            [12]  707 	mov	r4,#0x00
      00012A ED               [12]  708 	mov	a,r5
      00012B 24r00            [12]  709 	add	a,#_digits
      00012D F5 82            [12]  710 	mov	dpl,a
      00012F EC               [12]  711 	mov	a,r4
      000130 34s00            [12]  712 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  713 	mov	dph,a
      000134 E4               [12]  714 	clr	a
      000135 93               [24]  715 	movc	a,@a+dptr
      000136 FD               [12]  716 	mov	r5,a
      000137 7C 00            [12]  717 	mov	r4,#0x00
      000139 8D 82            [24]  718 	mov	dpl,r5
      00013B 8C 83            [24]  719 	mov	dph,r4
      00013D 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000140 8E 04            [24]  722 	mov	ar4,r6
      000142 EF               [12]  723 	mov	a,r7
      000143 C4               [12]  724 	swap	a
      000144 CC               [12]  725 	xch	a,r4
      000145 C4               [12]  726 	swap	a
      000146 54 0F            [12]  727 	anl	a,#0x0f
      000148 6C               [12]  728 	xrl	a,r4
      000149 CC               [12]  729 	xch	a,r4
      00014A 54 0F            [12]  730 	anl	a,#0x0f
      00014C CC               [12]  731 	xch	a,r4
      00014D 6C               [12]  732 	xrl	a,r4
      00014E CC               [12]  733 	xch	a,r4
      00014F 30 E3 02         [24]  734 	jnb	acc.3,00196$
      000152 44 F0            [12]  735 	orl	a,#0xf0
      000154                        736 00196$:
      000154 53 04 0F         [24]  737 	anl	ar4,#0x0f
      000157 7D 00            [12]  738 	mov	r5,#0x00
      000159 EC               [12]  739 	mov	a,r4
      00015A 24r00            [12]  740 	add	a,#_digits
      00015C F5 82            [12]  741 	mov	dpl,a
      00015E ED               [12]  742 	mov	a,r5
      00015F 34s00            [12]  743 	addc	a,#(_digits >> 8)
      000161 F5 83            [12]  744 	mov	dph,a
      000163 E4               [12]  745 	clr	a
      000164 93               [24]  746 	movc	a,@a+dptr
      000165 FD               [12]  747 	mov	r5,a
      000166 7C 00            [12]  748 	mov	r4,#0x00
      000168 8D 82            [24]  749 	mov	dpl,r5
      00016A 8C 83            [24]  750 	mov	dph,r4
      00016C 12r00r00         [24]  751 	lcall	_putchar
                                    752 ;	life.c:40: putchar(digits[a & 0xf]);
      00016F 53 06 0F         [24]  753 	anl	ar6,#0x0f
      000172 7F 00            [12]  754 	mov	r7,#0x00
      000174 EE               [12]  755 	mov	a,r6
      000175 24r00            [12]  756 	add	a,#_digits
      000177 F5 82            [12]  757 	mov	dpl,a
      000179 EF               [12]  758 	mov	a,r7
      00017A 34s00            [12]  759 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  760 	mov	dph,a
      00017E E4               [12]  761 	clr	a
      00017F 93               [24]  762 	movc	a,@a+dptr
      000180 FF               [12]  763 	mov	r7,a
      000181 7E 00            [12]  764 	mov	r6,#0x00
      000183 8F 82            [24]  765 	mov	dpl,r7
      000185 8E 83            [24]  766 	mov	dph,r6
      000187 12r00r00         [24]  767 	lcall	_putchar
                                    768 ;	life.c:98: printstr("\r\n");
      00018A 7Dr18            [12]  769 	mov	r5,#___str_1
      00018C 7Es00            [12]  770 	mov	r6,#(___str_1 >> 8)
      00018E 7F 80            [12]  771 	mov	r7,#0x80
                                    772 ;	life.c:48: return;
      000190                        773 00124$:
                                    774 ;	life.c:46: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  775 	mov	dpl,r5
      000192 8E 83            [24]  776 	mov	dph,r6
      000194 8F F0            [24]  777 	mov	b,r7
      000196 12r00r00         [24]  778 	lcall	__gptrget
      000199 FC               [12]  779 	mov	r4,a
      00019A 60 10            [24]  780 	jz	00114$
      00019C 7B 00            [12]  781 	mov	r3,#0x00
      00019E 8C 82            [24]  782 	mov	dpl,r4
      0001A0 8B 83            [24]  783 	mov	dph,r3
      0001A2 12r00r00         [24]  784 	lcall	_putchar
      0001A5 0D               [12]  785 	inc	r5
                                    786 ;	life.c:98: printstr("\r\n");
      0001A6 BD 00 E7         [24]  787 	cjne	r5,#0x00,00124$
      0001A9 0E               [12]  788 	inc	r6
      0001AA 80 E4            [24]  789 	sjmp	00124$
      0001AC                        790 00114$:
                                    791 ;	life.c:81: generation[0]++;
      0001AC 90r0Cr12         [24]  792 	mov	dptr,#_generation
      0001AF E0               [24]  793 	movx	a,@dptr
      0001B0 FE               [12]  794 	mov	r6,a
      0001B1 A3               [24]  795 	inc	dptr
      0001B2 E0               [24]  796 	movx	a,@dptr
      0001B3 FF               [12]  797 	mov	r7,a
      0001B4 0E               [12]  798 	inc	r6
      0001B5 BE 00 01         [24]  799 	cjne	r6,#0x00,00199$
      0001B8 0F               [12]  800 	inc	r7
      0001B9                        801 00199$:
      0001B9 90r0Cr12         [24]  802 	mov	dptr,#_generation
      0001BC EE               [12]  803 	mov	a,r6
      0001BD F0               [24]  804 	movx	@dptr,a
      0001BE EF               [12]  805 	mov	a,r7
      0001BF A3               [24]  806 	inc	dptr
      0001C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	life.c:82: if (!generation[0]) generation[1]++;
      0001C1 EE               [12]  809 	mov	a,r6
      0001C2 4F               [12]  810 	orl	a,r7
      0001C3 70 15            [24]  811 	jnz	00102$
      0001C5 90r0Cr14         [24]  812 	mov	dptr,#(_generation + 0x0002)
      0001C8 E0               [24]  813 	movx	a,@dptr
      0001C9 FE               [12]  814 	mov	r6,a
      0001CA A3               [24]  815 	inc	dptr
      0001CB E0               [24]  816 	movx	a,@dptr
      0001CC FF               [12]  817 	mov	r7,a
      0001CD 0E               [12]  818 	inc	r6
      0001CE BE 00 01         [24]  819 	cjne	r6,#0x00,00201$
      0001D1 0F               [12]  820 	inc	r7
      0001D2                        821 00201$:
      0001D2 90r0Cr14         [24]  822 	mov	dptr,#(_generation + 0x0002)
      0001D5 EE               [12]  823 	mov	a,r6
      0001D6 F0               [24]  824 	movx	@dptr,a
      0001D7 EF               [12]  825 	mov	a,r7
      0001D8 A3               [24]  826 	inc	dptr
      0001D9 F0               [24]  827 	movx	@dptr,a
                                    828 ;	life.c:99: updategen();
      0001DA                        829 00102$:
                                    830 ;	life.c:102: for (x = 0; x < W; x++) {
      0001DA 90r0Cr02         [24]  831 	mov	dptr,#_x
      0001DD E4               [12]  832 	clr	a
      0001DE F0               [24]  833 	movx	@dptr,a
      0001DF A3               [24]  834 	inc	dptr
      0001E0 F0               [24]  835 	movx	@dptr,a
      0001E1                        836 00131$:
                                    837 ;	life.c:103: for (y = 0; y < H; y++)
      0001E1 90r0Cr04         [24]  838 	mov	dptr,#_y
      0001E4 E4               [12]  839 	clr	a
      0001E5 F0               [24]  840 	movx	@dptr,a
      0001E6 A3               [24]  841 	inc	dptr
      0001E7 F0               [24]  842 	movx	@dptr,a
      0001E8                        843 00126$:
                                    844 ;	life.c:104: if (u[A2D(W, y, x)]) {
      0001E8 90r0Cr04         [24]  845 	mov	dptr,#_y
      0001EB E0               [24]  846 	movx	a,@dptr
      0001EC FE               [12]  847 	mov	r6,a
      0001ED A3               [24]  848 	inc	dptr
      0001EE E0               [24]  849 	movx	a,@dptr
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CE               [12]  853 	xch	a,r6
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CE               [12]  856 	xch	a,r6
      0001F7 6E               [12]  857 	xrl	a,r6
      0001F8 CE               [12]  858 	xch	a,r6
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CE               [12]  860 	xch	a,r6
      0001FC 6E               [12]  861 	xrl	a,r6
      0001FD FF               [12]  862 	mov	r7,a
      0001FE 90r0Cr02         [24]  863 	mov	dptr,#_x
      000201 E0               [24]  864 	movx	a,@dptr
      000202 FC               [12]  865 	mov	r4,a
      000203 A3               [24]  866 	inc	dptr
      000204 E0               [24]  867 	movx	a,@dptr
      000205 FD               [12]  868 	mov	r5,a
      000206 EC               [12]  869 	mov	a,r4
      000207 2E               [12]  870 	add	a,r6
      000208 FE               [12]  871 	mov	r6,a
      000209 ED               [12]  872 	mov	a,r5
      00020A 3F               [12]  873 	addc	a,r7
      00020B FF               [12]  874 	mov	r7,a
      00020C EE               [12]  875 	mov	a,r6
      00020D 24r02            [12]  876 	add	a,#_u
      00020F FE               [12]  877 	mov	r6,a
      000210 EF               [12]  878 	mov	a,r7
      000211 34s04            [12]  879 	addc	a,#(_u >> 8)
      000213 FF               [12]  880 	mov	r7,a
      000214 8E 82            [24]  881 	mov	dpl,r6
      000216 8F 83            [24]  882 	mov	dph,r7
      000218 E0               [24]  883 	movx	a,@dptr
      000219 60 0E            [24]  884 	jz	00104$
                                    885 ;	life.c:105: putchar('['); putchar(']');
      00021B 90 00 5B         [24]  886 	mov	dptr,#0x005b
      00021E 12r00r00         [24]  887 	lcall	_putchar
      000221 90 00 5D         [24]  888 	mov	dptr,#0x005d
      000224 12r00r00         [24]  889 	lcall	_putchar
      000227 80 0C            [24]  890 	sjmp	00127$
      000229                        891 00104$:
                                    892 ;	life.c:107: putchar('#'); putchar('#');
      000229 90 00 23         [24]  893 	mov	dptr,#0x0023
      00022C 12r00r00         [24]  894 	lcall	_putchar
      00022F 90 00 23         [24]  895 	mov	dptr,#0x0023
      000232 12r00r00         [24]  896 	lcall	_putchar
      000235                        897 00127$:
                                    898 ;	life.c:103: for (y = 0; y < H; y++)
      000235 90r0Cr04         [24]  899 	mov	dptr,#_y
      000238 E0               [24]  900 	movx	a,@dptr
      000239 24 01            [12]  901 	add	a,#0x01
      00023B F0               [24]  902 	movx	@dptr,a
      00023C A3               [24]  903 	inc	dptr
      00023D E0               [24]  904 	movx	a,@dptr
      00023E 34 00            [12]  905 	addc	a,#0x00
      000240 F0               [24]  906 	movx	@dptr,a
      000241 90r0Cr04         [24]  907 	mov	dptr,#_y
      000244 E0               [24]  908 	movx	a,@dptr
      000245 FE               [12]  909 	mov	r6,a
      000246 A3               [24]  910 	inc	dptr
      000247 E0               [24]  911 	movx	a,@dptr
      000248 FF               [12]  912 	mov	r7,a
      000249 C3               [12]  913 	clr	c
      00024A EE               [12]  914 	mov	a,r6
      00024B 94 20            [12]  915 	subb	a,#0x20
      00024D EF               [12]  916 	mov	a,r7
      00024E 64 80            [12]  917 	xrl	a,#0x80
      000250 94 80            [12]  918 	subb	a,#0x80
      000252 40 94            [24]  919 	jc	00126$
                                    920 ;	life.c:109: printstr("\r\n");
      000254 7Dr18            [12]  921 	mov	r5,#___str_1
      000256 7Es00            [12]  922 	mov	r6,#(___str_1 >> 8)
      000258 7F 80            [12]  923 	mov	r7,#0x80
                                    924 ;	life.c:48: return;
      00025A                        925 00129$:
                                    926 ;	life.c:46: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  927 	mov	dpl,r5
      00025C 8E 83            [24]  928 	mov	dph,r6
      00025E 8F F0            [24]  929 	mov	b,r7
      000260 12r00r00         [24]  930 	lcall	__gptrget
      000263 FC               [12]  931 	mov	r4,a
      000264 60 10            [24]  932 	jz	00119$
      000266 7B 00            [12]  933 	mov	r3,#0x00
      000268 8C 82            [24]  934 	mov	dpl,r4
      00026A 8B 83            [24]  935 	mov	dph,r3
      00026C 12r00r00         [24]  936 	lcall	_putchar
      00026F 0D               [12]  937 	inc	r5
                                    938 ;	life.c:109: printstr("\r\n");
      000270 BD 00 E7         [24]  939 	cjne	r5,#0x00,00129$
      000273 0E               [12]  940 	inc	r6
      000274 80 E4            [24]  941 	sjmp	00129$
      000276                        942 00119$:
                                    943 ;	life.c:102: for (x = 0; x < W; x++) {
      000276 90r0Cr02         [24]  944 	mov	dptr,#_x
      000279 E0               [24]  945 	movx	a,@dptr
      00027A 24 01            [12]  946 	add	a,#0x01
      00027C F0               [24]  947 	movx	@dptr,a
      00027D A3               [24]  948 	inc	dptr
      00027E E0               [24]  949 	movx	a,@dptr
      00027F 34 00            [12]  950 	addc	a,#0x00
      000281 F0               [24]  951 	movx	@dptr,a
      000282 90r0Cr02         [24]  952 	mov	dptr,#_x
      000285 E0               [24]  953 	movx	a,@dptr
      000286 FE               [12]  954 	mov	r6,a
      000287 A3               [24]  955 	inc	dptr
      000288 E0               [24]  956 	movx	a,@dptr
      000289 FF               [12]  957 	mov	r7,a
      00028A C3               [12]  958 	clr	c
      00028B EE               [12]  959 	mov	a,r6
      00028C 94 20            [12]  960 	subb	a,#0x20
      00028E EF               [12]  961 	mov	a,r7
      00028F 64 80            [12]  962 	xrl	a,#0x80
      000291 94 80            [12]  963 	subb	a,#0x80
      000293 50 03            [24]  964 	jnc	00206$
      000295 02r01rE1         [24]  965 	ljmp	00131$
      000298                        966 00206$:
                                    967 ;	life.c:112: return;
                                    968 ;	life.c:113: }
      000298 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'main'
                                    972 ;------------------------------------------------------------
                                    973 ;__2621440020              Allocated to registers 
                                    974 ;s                         Allocated to registers r5 r6 r7 
                                    975 ;__1310720013              Allocated to registers 
                                    976 ;s                         Allocated to registers r5 r6 r7 
                                    977 ;__1310720015              Allocated to registers r6 r7 
                                    978 ;a                         Allocated to registers r4 r5 
                                    979 ;__1310720017              Allocated to registers 
                                    980 ;s                         Allocated to registers r5 r6 r7 
                                    981 ;__2621440023              Allocated to registers 
                                    982 ;s                         Allocated to registers r5 r6 r7 
                                    983 ;__4587520027              Allocated to registers 
                                    984 ;s                         Allocated to registers r5 r6 r7 
                                    985 ;__3276800029              Allocated to registers 
                                    986 ;s                         Allocated to registers r5 r6 r7 
                                    987 ;__1310720031              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;sloc0                     Allocated to stack - _bp +1
                                    990 ;sloc1                     Allocated to stack - _bp +3
                                    991 ;sloc2                     Allocated to stack - _bp +5
                                    992 ;sloc3                     Allocated to stack - _bp +6
                                    993 ;sloc4                     Allocated to stack - _bp +8
                                    994 ;sloc5                     Allocated to stack - _bp +10
                                    995 ;sloc6                     Allocated to stack - _bp +12
                                    996 ;sloc7                     Allocated to stack - _bp +14
                                    997 ;------------------------------------------------------------
                                    998 ;	life.c:196: void main(void) {
                                    999 ;	-----------------------------------------
                                   1000 ;	 function main
                                   1001 ;	-----------------------------------------
      000299                       1002 _main:
      000299 C0*00            [24] 1003 	push	_bp
      00029B E5 81            [12] 1004 	mov	a,sp
      00029D F5*00            [12] 1005 	mov	_bp,a
      00029F 24 0F            [12] 1006 	add	a,#0x0f
      0002A1 F5 81            [12] 1007 	mov	sp,a
                                   1008 ;	life.c:197: IT0 = 1;
                                   1009 ;	assignBit
      0002A3 D2 88            [12] 1010 	setb	_IT0
                                   1011 ;	life.c:198: IT1 = 1;
                                   1012 ;	assignBit
      0002A5 D2 8A            [12] 1013 	setb	_IT1
                                   1014 ;	life.c:199: EX0 = 1;
                                   1015 ;	assignBit
      0002A7 D2 A8            [12] 1016 	setb	_EX0
                                   1017 ;	life.c:200: EX1 = 1;
                                   1018 ;	assignBit
      0002A9 D2 AA            [12] 1019 	setb	_EX1
                                   1020 ;	life.c:201: EA = 1;
                                   1021 ;	assignBit
      0002AB D2 AF            [12] 1022 	setb	_EA
                                   1023 ;	life.c:203: for (i0 = 0; !i0; ) {
      0002AD 90r00r00         [24] 1024 	mov	dptr,#_i0
      0002B0 E4               [12] 1025 	clr	a
      0002B1 F0               [24] 1026 	movx	@dptr,a
      0002B2 90r00r01         [24] 1027 	mov	dptr,#_i1
      0002B5 F0               [24] 1028 	movx	@dptr,a
      0002B6                       1029 00194$:
                                   1030 ;	life.c:116: memset(u, 0, sizeof (u));
      0002B6 E4               [12] 1031 	clr	a
      0002B7 C0 E0            [24] 1032 	push	acc
      0002B9 74 04            [12] 1033 	mov	a,#0x04
      0002BB C0 E0            [24] 1034 	push	acc
      0002BD E4               [12] 1035 	clr	a
      0002BE C0 E0            [24] 1036 	push	acc
      0002C0 90r04r02         [24] 1037 	mov	dptr,#_u
      0002C3 75 F0 00         [24] 1038 	mov	b,#0x00
      0002C6 12r00r00         [24] 1039 	lcall	_memset
      0002C9 15 81            [12] 1040 	dec	sp
      0002CB 15 81            [12] 1041 	dec	sp
      0002CD 15 81            [12] 1042 	dec	sp
                                   1043 ;	life.c:117: memset(pu, 0, sizeof (pu));
      0002CF E4               [12] 1044 	clr	a
      0002D0 C0 E0            [24] 1045 	push	acc
      0002D2 74 04            [12] 1046 	mov	a,#0x04
      0002D4 C0 E0            [24] 1047 	push	acc
      0002D6 E4               [12] 1048 	clr	a
      0002D7 C0 E0            [24] 1049 	push	acc
      0002D9 90r00r02         [24] 1050 	mov	dptr,#_pu
      0002DC 75 F0 00         [24] 1051 	mov	b,#0x00
      0002DF 12r00r00         [24] 1052 	lcall	_memset
      0002E2 15 81            [12] 1053 	dec	sp
      0002E4 15 81            [12] 1054 	dec	sp
      0002E6 15 81            [12] 1055 	dec	sp
                                   1056 ;	life.c:206: printstr("\033[2J\033[mINIT\r\n");
      0002E8 7Dr26            [12] 1057 	mov	r5,#___str_4
      0002EA 7Es00            [12] 1058 	mov	r6,#(___str_4 >> 8)
      0002EC 7F 80            [12] 1059 	mov	r7,#0x80
                                   1060 ;	life.c:48: return;
      0002EE                       1061 00165$:
                                   1062 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002EE 8D 82            [24] 1063 	mov	dpl,r5
      0002F0 8E 83            [24] 1064 	mov	dph,r6
      0002F2 8F F0            [24] 1065 	mov	b,r7
      0002F4 12r00r00         [24] 1066 	lcall	__gptrget
      0002F7 FC               [12] 1067 	mov	r4,a
      0002F8 60 10            [24] 1068 	jz	00104$
      0002FA 7B 00            [12] 1069 	mov	r3,#0x00
      0002FC 8C 82            [24] 1070 	mov	dpl,r4
      0002FE 8B 83            [24] 1071 	mov	dph,r3
      000300 12r00r00         [24] 1072 	lcall	_putchar
      000303 0D               [12] 1073 	inc	r5
                                   1074 ;	life.c:207: while (1) {
      000304 BD 00 E7         [24] 1075 	cjne	r5,#0x00,00165$
      000307 0E               [12] 1076 	inc	r6
      000308 80 E4            [24] 1077 	sjmp	00165$
      00030A                       1078 00104$:
                                   1079 ;	life.c:208: c = getchar();
      00030A 12r00r05         [24] 1080 	lcall	_getchar
      00030D AE 82            [24] 1081 	mov	r6,dpl
      00030F AF 83            [24] 1082 	mov	r7,dph
      000311 90r0Cr0C         [24] 1083 	mov	dptr,#_c
      000314 EE               [12] 1084 	mov	a,r6
      000315 F0               [24] 1085 	movx	@dptr,a
      000316 EF               [12] 1086 	mov	a,r7
      000317 A3               [24] 1087 	inc	dptr
      000318 F0               [24] 1088 	movx	@dptr,a
                                   1089 ;	life.c:209: if (c == (int)'L') break;
      000319 BE 4C EE         [24] 1090 	cjne	r6,#0x4c,00104$
      00031C BF 00 EB         [24] 1091 	cjne	r7,#0x00,00104$
                                   1092 ;	life.c:212: reload:
      00031F                       1093 00106$:
                                   1094 ;	life.c:123: j = 0;
      00031F 90r0Cr0A         [24] 1095 	mov	dptr,#_j
      000322 E4               [12] 1096 	clr	a
      000323 F0               [24] 1097 	movx	@dptr,a
      000324 A3               [24] 1098 	inc	dptr
      000325 F0               [24] 1099 	movx	@dptr,a
                                   1100 ;	life.c:125: printstr("LOAD <");
      000326 7Dr1B            [12] 1101 	mov	r5,#___str_2
      000328 7Es00            [12] 1102 	mov	r6,#(___str_2 >> 8)
      00032A 7F 80            [12] 1103 	mov	r7,#0x80
                                   1104 ;	life.c:48: return;
      00032C                       1105 00168$:
                                   1106 ;	life.c:46: for (; *s; s++) putchar(*s);
      00032C 8D 82            [24] 1107 	mov	dpl,r5
      00032E 8E 83            [24] 1108 	mov	dph,r6
      000330 8F F0            [24] 1109 	mov	b,r7
      000332 12r00r00         [24] 1110 	lcall	__gptrget
      000335 FC               [12] 1111 	mov	r4,a
      000336 60 10            [24] 1112 	jz	00125$
      000338 7B 00            [12] 1113 	mov	r3,#0x00
      00033A 8C 82            [24] 1114 	mov	dpl,r4
      00033C 8B 83            [24] 1115 	mov	dph,r3
      00033E 12r00r00         [24] 1116 	lcall	_putchar
      000341 0D               [12] 1117 	inc	r5
                                   1118 ;	life.c:125: printstr("LOAD <");
      000342 BD 00 E7         [24] 1119 	cjne	r5,#0x00,00168$
      000345 0E               [12] 1120 	inc	r6
      000346 80 E4            [24] 1121 	sjmp	00168$
      000348                       1122 00125$:
                                   1123 ;	life.c:127: for (y = 0; y < H; y++)
      000348 90r0Cr04         [24] 1124 	mov	dptr,#_y
      00034B E4               [12] 1125 	clr	a
      00034C F0               [24] 1126 	movx	@dptr,a
      00034D A3               [24] 1127 	inc	dptr
      00034E F0               [24] 1128 	movx	@dptr,a
      00034F                       1129 00172$:
                                   1130 ;	life.c:128: for (x = 0; x < W; x++) {
      00034F 90r0Cr02         [24] 1131 	mov	dptr,#_x
      000352 E4               [12] 1132 	clr	a
      000353 F0               [24] 1133 	movx	@dptr,a
      000354 A3               [24] 1134 	inc	dptr
      000355 F0               [24] 1135 	movx	@dptr,a
      000356                       1136 00170$:
                                   1137 ;	life.c:129: c = getchar();
      000356 12r00r05         [24] 1138 	lcall	_getchar
      000359 AE 82            [24] 1139 	mov	r6,dpl
      00035B AF 83            [24] 1140 	mov	r7,dph
      00035D 90r0Cr0C         [24] 1141 	mov	dptr,#_c
      000360 EE               [12] 1142 	mov	a,r6
      000361 F0               [24] 1143 	movx	@dptr,a
      000362 EF               [12] 1144 	mov	a,r7
      000363 A3               [24] 1145 	inc	dptr
      000364 F0               [24] 1146 	movx	@dptr,a
                                   1147 ;	life.c:130: if (c == (int)'0') {
      000365 BE 30 41         [24] 1148 	cjne	r6,#0x30,00132$
      000368 BF 00 3E         [24] 1149 	cjne	r7,#0x00,00132$
                                   1150 ;	life.c:131: u[A2D(W, y, x)] = 0;
      00036B 90r0Cr04         [24] 1151 	mov	dptr,#_y
      00036E E0               [24] 1152 	movx	a,@dptr
      00036F FC               [12] 1153 	mov	r4,a
      000370 A3               [24] 1154 	inc	dptr
      000371 E0               [24] 1155 	movx	a,@dptr
      000372 C4               [12] 1156 	swap	a
      000373 23               [12] 1157 	rl	a
      000374 54 E0            [12] 1158 	anl	a,#0xe0
      000376 CC               [12] 1159 	xch	a,r4
      000377 C4               [12] 1160 	swap	a
      000378 23               [12] 1161 	rl	a
      000379 CC               [12] 1162 	xch	a,r4
      00037A 6C               [12] 1163 	xrl	a,r4
      00037B CC               [12] 1164 	xch	a,r4
      00037C 54 E0            [12] 1165 	anl	a,#0xe0
      00037E CC               [12] 1166 	xch	a,r4
      00037F 6C               [12] 1167 	xrl	a,r4
      000380 FD               [12] 1168 	mov	r5,a
      000381 90r0Cr02         [24] 1169 	mov	dptr,#_x
      000384 E0               [24] 1170 	movx	a,@dptr
      000385 FA               [12] 1171 	mov	r2,a
      000386 A3               [24] 1172 	inc	dptr
      000387 E0               [24] 1173 	movx	a,@dptr
      000388 FB               [12] 1174 	mov	r3,a
      000389 EA               [12] 1175 	mov	a,r2
      00038A 2C               [12] 1176 	add	a,r4
      00038B FC               [12] 1177 	mov	r4,a
      00038C EB               [12] 1178 	mov	a,r3
      00038D 3D               [12] 1179 	addc	a,r5
      00038E FD               [12] 1180 	mov	r5,a
      00038F EC               [12] 1181 	mov	a,r4
      000390 24r02            [12] 1182 	add	a,#_u
      000392 F5 82            [12] 1183 	mov	dpl,a
      000394 ED               [12] 1184 	mov	a,r5
      000395 34s04            [12] 1185 	addc	a,#(_u >> 8)
      000397 F5 83            [12] 1186 	mov	dph,a
      000399 E4               [12] 1187 	clr	a
      00039A F0               [24] 1188 	movx	@dptr,a
                                   1189 ;	life.c:132: j++;
      00039B 90r0Cr0A         [24] 1190 	mov	dptr,#_j
      00039E E0               [24] 1191 	movx	a,@dptr
      00039F 24 01            [12] 1192 	add	a,#0x01
      0003A1 F0               [24] 1193 	movx	@dptr,a
      0003A2 A3               [24] 1194 	inc	dptr
      0003A3 E0               [24] 1195 	movx	a,@dptr
      0003A4 34 00            [12] 1196 	addc	a,#0x00
      0003A6 F0               [24] 1197 	movx	@dptr,a
      0003A7 80 4D            [24] 1198 	sjmp	00171$
      0003A9                       1199 00132$:
                                   1200 ;	life.c:133: } else if (c == (int)'1') {
      0003A9 BE 31 42         [24] 1201 	cjne	r6,#0x31,00130$
      0003AC BF 00 3F         [24] 1202 	cjne	r7,#0x00,00130$
                                   1203 ;	life.c:134: u[A2D(W, y, x)] = 1;
      0003AF 90r0Cr04         [24] 1204 	mov	dptr,#_y
      0003B2 E0               [24] 1205 	movx	a,@dptr
      0003B3 FC               [12] 1206 	mov	r4,a
      0003B4 A3               [24] 1207 	inc	dptr
      0003B5 E0               [24] 1208 	movx	a,@dptr
      0003B6 C4               [12] 1209 	swap	a
      0003B7 23               [12] 1210 	rl	a
      0003B8 54 E0            [12] 1211 	anl	a,#0xe0
      0003BA CC               [12] 1212 	xch	a,r4
      0003BB C4               [12] 1213 	swap	a
      0003BC 23               [12] 1214 	rl	a
      0003BD CC               [12] 1215 	xch	a,r4
      0003BE 6C               [12] 1216 	xrl	a,r4
      0003BF CC               [12] 1217 	xch	a,r4
      0003C0 54 E0            [12] 1218 	anl	a,#0xe0
      0003C2 CC               [12] 1219 	xch	a,r4
      0003C3 6C               [12] 1220 	xrl	a,r4
      0003C4 FD               [12] 1221 	mov	r5,a
      0003C5 90r0Cr02         [24] 1222 	mov	dptr,#_x
      0003C8 E0               [24] 1223 	movx	a,@dptr
      0003C9 FA               [12] 1224 	mov	r2,a
      0003CA A3               [24] 1225 	inc	dptr
      0003CB E0               [24] 1226 	movx	a,@dptr
      0003CC FB               [12] 1227 	mov	r3,a
      0003CD EA               [12] 1228 	mov	a,r2
      0003CE 2C               [12] 1229 	add	a,r4
      0003CF FC               [12] 1230 	mov	r4,a
      0003D0 EB               [12] 1231 	mov	a,r3
      0003D1 3D               [12] 1232 	addc	a,r5
      0003D2 FD               [12] 1233 	mov	r5,a
      0003D3 EC               [12] 1234 	mov	a,r4
      0003D4 24r02            [12] 1235 	add	a,#_u
      0003D6 F5 82            [12] 1236 	mov	dpl,a
      0003D8 ED               [12] 1237 	mov	a,r5
      0003D9 34s04            [12] 1238 	addc	a,#(_u >> 8)
      0003DB F5 83            [12] 1239 	mov	dph,a
      0003DD 74 01            [12] 1240 	mov	a,#0x01
      0003DF F0               [24] 1241 	movx	@dptr,a
                                   1242 ;	life.c:135: j++;
      0003E0 90r0Cr0A         [24] 1243 	mov	dptr,#_j
      0003E3 E0               [24] 1244 	movx	a,@dptr
      0003E4 24 01            [12] 1245 	add	a,#0x01
      0003E6 F0               [24] 1246 	movx	@dptr,a
      0003E7 A3               [24] 1247 	inc	dptr
      0003E8 E0               [24] 1248 	movx	a,@dptr
      0003E9 34 00            [12] 1249 	addc	a,#0x00
      0003EB F0               [24] 1250 	movx	@dptr,a
      0003EC 80 08            [24] 1251 	sjmp	00171$
      0003EE                       1252 00130$:
                                   1253 ;	life.c:136: } else if (c == (int)'#') goto out;
      0003EE BE 23 05         [24] 1254 	cjne	r6,#0x23,00381$
      0003F1 BF 00 02         [24] 1255 	cjne	r7,#0x00,00381$
      0003F4 80 44            [24] 1256 	sjmp	00143$
      0003F6                       1257 00381$:
      0003F6                       1258 00171$:
                                   1259 ;	life.c:128: for (x = 0; x < W; x++) {
      0003F6 90r0Cr02         [24] 1260 	mov	dptr,#_x
      0003F9 E0               [24] 1261 	movx	a,@dptr
      0003FA 24 01            [12] 1262 	add	a,#0x01
      0003FC F0               [24] 1263 	movx	@dptr,a
      0003FD A3               [24] 1264 	inc	dptr
      0003FE E0               [24] 1265 	movx	a,@dptr
      0003FF 34 00            [12] 1266 	addc	a,#0x00
      000401 F0               [24] 1267 	movx	@dptr,a
      000402 90r0Cr02         [24] 1268 	mov	dptr,#_x
      000405 E0               [24] 1269 	movx	a,@dptr
      000406 FE               [12] 1270 	mov	r6,a
      000407 A3               [24] 1271 	inc	dptr
      000408 E0               [24] 1272 	movx	a,@dptr
      000409 FF               [12] 1273 	mov	r7,a
      00040A C3               [12] 1274 	clr	c
      00040B EE               [12] 1275 	mov	a,r6
      00040C 94 20            [12] 1276 	subb	a,#0x20
      00040E EF               [12] 1277 	mov	a,r7
      00040F 64 80            [12] 1278 	xrl	a,#0x80
      000411 94 80            [12] 1279 	subb	a,#0x80
      000413 50 03            [24] 1280 	jnc	00382$
      000415 02r03r56         [24] 1281 	ljmp	00170$
      000418                       1282 00382$:
                                   1283 ;	life.c:127: for (y = 0; y < H; y++)
      000418 90r0Cr04         [24] 1284 	mov	dptr,#_y
      00041B E0               [24] 1285 	movx	a,@dptr
      00041C 24 01            [12] 1286 	add	a,#0x01
      00041E F0               [24] 1287 	movx	@dptr,a
      00041F A3               [24] 1288 	inc	dptr
      000420 E0               [24] 1289 	movx	a,@dptr
      000421 34 00            [12] 1290 	addc	a,#0x00
      000423 F0               [24] 1291 	movx	@dptr,a
      000424 90r0Cr04         [24] 1292 	mov	dptr,#_y
      000427 E0               [24] 1293 	movx	a,@dptr
      000428 FE               [12] 1294 	mov	r6,a
      000429 A3               [24] 1295 	inc	dptr
      00042A E0               [24] 1296 	movx	a,@dptr
      00042B FF               [12] 1297 	mov	r7,a
      00042C C3               [12] 1298 	clr	c
      00042D EE               [12] 1299 	mov	a,r6
      00042E 94 20            [12] 1300 	subb	a,#0x20
      000430 EF               [12] 1301 	mov	a,r7
      000431 64 80            [12] 1302 	xrl	a,#0x80
      000433 94 80            [12] 1303 	subb	a,#0x80
      000435 50 03            [24] 1304 	jnc	00383$
      000437 02r03r4F         [24] 1305 	ljmp	00172$
      00043A                       1306 00383$:
                                   1307 ;	life.c:139: out:
      00043A                       1308 00143$:
                                   1309 ;	life.c:140: if (c != (int)'#')
      00043A 90r0Cr0C         [24] 1310 	mov	dptr,#_c
      00043D E0               [24] 1311 	movx	a,@dptr
      00043E FE               [12] 1312 	mov	r6,a
      00043F A3               [24] 1313 	inc	dptr
      000440 E0               [24] 1314 	movx	a,@dptr
      000441 FF               [12] 1315 	mov	r7,a
      000442 BE 23 05         [24] 1316 	cjne	r6,#0x23,00384$
      000445 BF 00 02         [24] 1317 	cjne	r7,#0x00,00384$
      000448 80 15            [24] 1318 	sjmp	00142$
      00044A                       1319 00384$:
                                   1320 ;	life.c:141: while (1) {
      00044A                       1321 00139$:
                                   1322 ;	life.c:142: c = getchar();
      00044A 12r00r05         [24] 1323 	lcall	_getchar
      00044D AE 82            [24] 1324 	mov	r6,dpl
      00044F AF 83            [24] 1325 	mov	r7,dph
      000451 90r0Cr0C         [24] 1326 	mov	dptr,#_c
      000454 EE               [12] 1327 	mov	a,r6
      000455 F0               [24] 1328 	movx	@dptr,a
      000456 EF               [12] 1329 	mov	a,r7
      000457 A3               [24] 1330 	inc	dptr
      000458 F0               [24] 1331 	movx	@dptr,a
                                   1332 ;	life.c:143: if (c == (int)'#') break;
      000459 BE 23 EE         [24] 1333 	cjne	r6,#0x23,00139$
      00045C BF 00 EB         [24] 1334 	cjne	r7,#0x00,00139$
      00045F                       1335 00142$:
                                   1336 ;	life.c:145: print16x(j);
      00045F 90r0Cr0A         [24] 1337 	mov	dptr,#_j
      000462 E0               [24] 1338 	movx	a,@dptr
      000463 FE               [12] 1339 	mov	r6,a
      000464 A3               [24] 1340 	inc	dptr
      000465 E0               [24] 1341 	movx	a,@dptr
                                   1342 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000466 8E 04            [24] 1343 	mov	ar4,r6
      000468 FD               [12] 1344 	mov	r5,a
      000469 C4               [12] 1345 	swap	a
      00046A 54 0F            [12] 1346 	anl	a,#0x0f
      00046C 30 E3 02         [24] 1347 	jnb	acc.3,00387$
      00046F 44 F0            [12] 1348 	orl	a,#0xf0
      000471                       1349 00387$:
      000471 FE               [12] 1350 	mov	r6,a
      000472 33               [12] 1351 	rlc	a
      000473 95 E0            [12] 1352 	subb	a,acc
      000475 53 06 0F         [24] 1353 	anl	ar6,#0x0f
      000478 7F 00            [12] 1354 	mov	r7,#0x00
      00047A EE               [12] 1355 	mov	a,r6
      00047B 24r00            [12] 1356 	add	a,#_digits
      00047D F5 82            [12] 1357 	mov	dpl,a
      00047F EF               [12] 1358 	mov	a,r7
      000480 34s00            [12] 1359 	addc	a,#(_digits >> 8)
      000482 F5 83            [12] 1360 	mov	dph,a
      000484 E4               [12] 1361 	clr	a
      000485 93               [24] 1362 	movc	a,@a+dptr
      000486 FF               [12] 1363 	mov	r7,a
      000487 7E 00            [12] 1364 	mov	r6,#0x00
      000489 8F 82            [24] 1365 	mov	dpl,r7
      00048B 8E 83            [24] 1366 	mov	dph,r6
      00048D 12r00r00         [24] 1367 	lcall	_putchar
                                   1368 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000490 8D 07            [24] 1369 	mov	ar7,r5
      000492 53 07 0F         [24] 1370 	anl	ar7,#0x0f
      000495 7E 00            [12] 1371 	mov	r6,#0x00
      000497 EF               [12] 1372 	mov	a,r7
      000498 24r00            [12] 1373 	add	a,#_digits
      00049A F5 82            [12] 1374 	mov	dpl,a
      00049C EE               [12] 1375 	mov	a,r6
      00049D 34s00            [12] 1376 	addc	a,#(_digits >> 8)
      00049F F5 83            [12] 1377 	mov	dph,a
      0004A1 E4               [12] 1378 	clr	a
      0004A2 93               [24] 1379 	movc	a,@a+dptr
      0004A3 FF               [12] 1380 	mov	r7,a
      0004A4 7E 00            [12] 1381 	mov	r6,#0x00
      0004A6 8F 82            [24] 1382 	mov	dpl,r7
      0004A8 8E 83            [24] 1383 	mov	dph,r6
      0004AA 12r00r00         [24] 1384 	lcall	_putchar
                                   1385 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0004AD 8C 06            [24] 1386 	mov	ar6,r4
      0004AF ED               [12] 1387 	mov	a,r5
      0004B0 C4               [12] 1388 	swap	a
      0004B1 CE               [12] 1389 	xch	a,r6
      0004B2 C4               [12] 1390 	swap	a
      0004B3 54 0F            [12] 1391 	anl	a,#0x0f
      0004B5 6E               [12] 1392 	xrl	a,r6
      0004B6 CE               [12] 1393 	xch	a,r6
      0004B7 54 0F            [12] 1394 	anl	a,#0x0f
      0004B9 CE               [12] 1395 	xch	a,r6
      0004BA 6E               [12] 1396 	xrl	a,r6
      0004BB CE               [12] 1397 	xch	a,r6
      0004BC 30 E3 02         [24] 1398 	jnb	acc.3,00388$
      0004BF 44 F0            [12] 1399 	orl	a,#0xf0
      0004C1                       1400 00388$:
      0004C1 53 06 0F         [24] 1401 	anl	ar6,#0x0f
      0004C4 7F 00            [12] 1402 	mov	r7,#0x00
      0004C6 EE               [12] 1403 	mov	a,r6
      0004C7 24r00            [12] 1404 	add	a,#_digits
      0004C9 F5 82            [12] 1405 	mov	dpl,a
      0004CB EF               [12] 1406 	mov	a,r7
      0004CC 34s00            [12] 1407 	addc	a,#(_digits >> 8)
      0004CE F5 83            [12] 1408 	mov	dph,a
      0004D0 E4               [12] 1409 	clr	a
      0004D1 93               [24] 1410 	movc	a,@a+dptr
      0004D2 FF               [12] 1411 	mov	r7,a
      0004D3 7E 00            [12] 1412 	mov	r6,#0x00
      0004D5 8F 82            [24] 1413 	mov	dpl,r7
      0004D7 8E 83            [24] 1414 	mov	dph,r6
      0004D9 12r00r00         [24] 1415 	lcall	_putchar
                                   1416 ;	life.c:40: putchar(digits[a & 0xf]);
      0004DC 53 04 0F         [24] 1417 	anl	ar4,#0x0f
      0004DF 7D 00            [12] 1418 	mov	r5,#0x00
      0004E1 EC               [12] 1419 	mov	a,r4
      0004E2 24r00            [12] 1420 	add	a,#_digits
      0004E4 F5 82            [12] 1421 	mov	dpl,a
      0004E6 ED               [12] 1422 	mov	a,r5
      0004E7 34s00            [12] 1423 	addc	a,#(_digits >> 8)
      0004E9 F5 83            [12] 1424 	mov	dph,a
      0004EB E4               [12] 1425 	clr	a
      0004EC 93               [24] 1426 	movc	a,@a+dptr
      0004ED FF               [12] 1427 	mov	r7,a
      0004EE 7E 00            [12] 1428 	mov	r6,#0x00
      0004F0 8F 82            [24] 1429 	mov	dpl,r7
      0004F2 8E 83            [24] 1430 	mov	dph,r6
      0004F4 12r00r00         [24] 1431 	lcall	_putchar
                                   1432 ;	life.c:146: printstr(">\r\n");
      0004F7 7Dr22            [12] 1433 	mov	r5,#___str_3
      0004F9 7Es00            [12] 1434 	mov	r6,#(___str_3 >> 8)
      0004FB 7F 80            [12] 1435 	mov	r7,#0x80
                                   1436 ;	life.c:48: return;
      0004FD                       1437 00175$:
                                   1438 ;	life.c:46: for (; *s; s++) putchar(*s);
      0004FD 8D 82            [24] 1439 	mov	dpl,r5
      0004FF 8E 83            [24] 1440 	mov	dph,r6
      000501 8F F0            [24] 1441 	mov	b,r7
      000503 12r00r00         [24] 1442 	lcall	__gptrget
      000506 FC               [12] 1443 	mov	r4,a
      000507 60 10            [24] 1444 	jz	00146$
      000509 7B 00            [12] 1445 	mov	r3,#0x00
      00050B 8C 82            [24] 1446 	mov	dpl,r4
      00050D 8B 83            [24] 1447 	mov	dph,r3
      00050F 12r00r00         [24] 1448 	lcall	_putchar
      000512 0D               [12] 1449 	inc	r5
                                   1450 ;	life.c:146: printstr(">\r\n");
      000513 BD 00 E7         [24] 1451 	cjne	r5,#0x00,00175$
      000516 0E               [12] 1452 	inc	r6
      000517 80 E4            [24] 1453 	sjmp	00175$
      000519                       1454 00146$:
                                   1455 ;	life.c:214: show(0);
      000519 75 82 00         [24] 1456 	mov	dpl,#0x00
      00051C 12r00r34         [24] 1457 	lcall	_show
                                   1458 ;	life.c:216: printstr("READY\r\n");
      00051F 7Dr34            [12] 1459 	mov	r5,#___str_5
      000521 7Es00            [12] 1460 	mov	r6,#(___str_5 >> 8)
      000523 7F 80            [12] 1461 	mov	r7,#0x80
                                   1462 ;	life.c:48: return;
      000525                       1463 00178$:
                                   1464 ;	life.c:46: for (; *s; s++) putchar(*s);
      000525 8D 82            [24] 1465 	mov	dpl,r5
      000527 8E 83            [24] 1466 	mov	dph,r6
      000529 8F F0            [24] 1467 	mov	b,r7
      00052B 12r00r00         [24] 1468 	lcall	__gptrget
      00052E FC               [12] 1469 	mov	r4,a
      00052F 60 10            [24] 1470 	jz	00112$
      000531 7B 00            [12] 1471 	mov	r3,#0x00
      000533 8C 82            [24] 1472 	mov	dpl,r4
      000535 8B 83            [24] 1473 	mov	dph,r3
      000537 12r00r00         [24] 1474 	lcall	_putchar
      00053A 0D               [12] 1475 	inc	r5
                                   1476 ;	life.c:217: while (1) {
      00053B BD 00 E7         [24] 1477 	cjne	r5,#0x00,00178$
      00053E 0E               [12] 1478 	inc	r6
      00053F 80 E4            [24] 1479 	sjmp	00178$
      000541                       1480 00112$:
                                   1481 ;	life.c:218: c = getchar();
      000541 12r00r05         [24] 1482 	lcall	_getchar
      000544 AE 82            [24] 1483 	mov	r6,dpl
      000546 AF 83            [24] 1484 	mov	r7,dph
      000548 90r0Cr0C         [24] 1485 	mov	dptr,#_c
      00054B EE               [12] 1486 	mov	a,r6
      00054C F0               [24] 1487 	movx	@dptr,a
      00054D EF               [12] 1488 	mov	a,r7
      00054E A3               [24] 1489 	inc	dptr
      00054F F0               [24] 1490 	movx	@dptr,a
                                   1491 ;	life.c:219: if (c == (int)'L') goto reload;
      000550 BE 4C 06         [24] 1492 	cjne	r6,#0x4c,00393$
      000553 BF 00 03         [24] 1493 	cjne	r7,#0x00,00393$
      000556 02r03r1F         [24] 1494 	ljmp	00106$
      000559                       1495 00393$:
                                   1496 ;	life.c:220: if (c == (int)'S') break;
      000559 BE 53 E5         [24] 1497 	cjne	r6,#0x53,00112$
      00055C BF 00 E2         [24] 1498 	cjne	r7,#0x00,00112$
                                   1499 ;	life.c:74: generation[0] = 0;
      00055F 90r0Cr12         [24] 1500 	mov	dptr,#_generation
      000562 E4               [12] 1501 	clr	a
      000563 F0               [24] 1502 	movx	@dptr,a
      000564 A3               [24] 1503 	inc	dptr
      000565 F0               [24] 1504 	movx	@dptr,a
                                   1505 ;	life.c:75: generation[1] = 0;
      000566 90r0Cr14         [24] 1506 	mov	dptr,#(_generation + 0x0002)
      000569 F0               [24] 1507 	movx	@dptr,a
      00056A A3               [24] 1508 	inc	dptr
      00056B F0               [24] 1509 	movx	@dptr,a
                                   1510 ;	life.c:225: for (i1 = 0; !i0 && !i1; ) {
      00056C                       1511 00189$:
      00056C 90r00r00         [24] 1512 	mov	dptr,#_i0
      00056F E0               [24] 1513 	movx	a,@dptr
      000570 60 03            [24] 1514 	jz	00396$
      000572 02r0Ar3E         [24] 1515 	ljmp	00117$
      000575                       1516 00396$:
                                   1517 ;	life.c:226: show(1);
      000575 75 82 01         [24] 1518 	mov	dpl,#0x01
      000578 12r00r34         [24] 1519 	lcall	_show
                                   1520 ;	life.c:154: fixed = 1;
      00057B 90r0Cr10         [24] 1521 	mov	dptr,#_fixed
      00057E 74 01            [12] 1522 	mov	a,#0x01
      000580 F0               [24] 1523 	movx	@dptr,a
                                   1524 ;	life.c:155: cycle2 = 1;
      000581 90r0Cr11         [24] 1525 	mov	dptr,#_cycle2
      000584 F0               [24] 1526 	movx	@dptr,a
                                   1527 ;	life.c:156: bstep = 0;
      000585 90r0Cr0E         [24] 1528 	mov	dptr,#_bstep
      000588 E4               [12] 1529 	clr	a
      000589 F0               [24] 1530 	movx	@dptr,a
                                   1531 ;	life.c:158: for (y = 0; y < H; y++) {
      00058A 90r0Cr04         [24] 1532 	mov	dptr,#_y
      00058D F0               [24] 1533 	movx	@dptr,a
      00058E A3               [24] 1534 	inc	dptr
      00058F F0               [24] 1535 	movx	@dptr,a
      000590                       1536 00182$:
                                   1537 ;	life.c:159: putchar(busy[bstep]); putchar('\r');
      000590 90r0Cr0E         [24] 1538 	mov	dptr,#_bstep
      000593 E0               [24] 1539 	movx	a,@dptr
      000594 90r0ArA2         [24] 1540 	mov	dptr,#_busy
      000597 93               [24] 1541 	movc	a,@a+dptr
      000598 FF               [12] 1542 	mov	r7,a
      000599 7E 00            [12] 1543 	mov	r6,#0x00
      00059B 8F 82            [24] 1544 	mov	dpl,r7
      00059D 8E 83            [24] 1545 	mov	dph,r6
      00059F 12r00r00         [24] 1546 	lcall	_putchar
      0005A2 90 00 0D         [24] 1547 	mov	dptr,#0x000d
      0005A5 12r00r00         [24] 1548 	lcall	_putchar
                                   1549 ;	life.c:160: bstep = (bstep + 1) & 3;
      0005A8 90r0Cr0E         [24] 1550 	mov	dptr,#_bstep
      0005AB E0               [24] 1551 	movx	a,@dptr
      0005AC FF               [12] 1552 	mov	r7,a
      0005AD 0F               [12] 1553 	inc	r7
      0005AE 74 03            [12] 1554 	mov	a,#0x03
      0005B0 5F               [12] 1555 	anl	a,r7
      0005B1 F0               [24] 1556 	movx	@dptr,a
                                   1557 ;	life.c:161: for (x = 0; x < W; x++) {
      0005B2 90r0Cr02         [24] 1558 	mov	dptr,#_x
      0005B5 E4               [12] 1559 	clr	a
      0005B6 F0               [24] 1560 	movx	@dptr,a
      0005B7 A3               [24] 1561 	inc	dptr
      0005B8 F0               [24] 1562 	movx	@dptr,a
      0005B9                       1563 00180$:
                                   1564 ;	life.c:162: n = -u[A2D(W, y, x)];
      0005B9 90r0Cr04         [24] 1565 	mov	dptr,#_y
      0005BC E0               [24] 1566 	movx	a,@dptr
      0005BD FE               [12] 1567 	mov	r6,a
      0005BE A3               [24] 1568 	inc	dptr
      0005BF E0               [24] 1569 	movx	a,@dptr
      0005C0 FF               [12] 1570 	mov	r7,a
      0005C1 A8*00            [24] 1571 	mov	r0,_bp
      0005C3 08               [12] 1572 	inc	r0
      0005C4 A6 06            [24] 1573 	mov	@r0,ar6
      0005C6 EF               [12] 1574 	mov	a,r7
      0005C7 C4               [12] 1575 	swap	a
      0005C8 23               [12] 1576 	rl	a
      0005C9 54 E0            [12] 1577 	anl	a,#0xe0
      0005CB C6               [12] 1578 	xch	a,@r0
      0005CC C4               [12] 1579 	swap	a
      0005CD 23               [12] 1580 	rl	a
      0005CE C6               [12] 1581 	xch	a,@r0
      0005CF 66               [12] 1582 	xrl	a,@r0
      0005D0 C6               [12] 1583 	xch	a,@r0
      0005D1 54 E0            [12] 1584 	anl	a,#0xe0
      0005D3 C6               [12] 1585 	xch	a,@r0
      0005D4 66               [12] 1586 	xrl	a,@r0
      0005D5 08               [12] 1587 	inc	r0
      0005D6 F6               [12] 1588 	mov	@r0,a
      0005D7 90r0Cr02         [24] 1589 	mov	dptr,#_x
      0005DA E0               [24] 1590 	movx	a,@dptr
      0005DB FA               [12] 1591 	mov	r2,a
      0005DC A3               [24] 1592 	inc	dptr
      0005DD E0               [24] 1593 	movx	a,@dptr
      0005DE FB               [12] 1594 	mov	r3,a
      0005DF A8*00            [24] 1595 	mov	r0,_bp
      0005E1 08               [12] 1596 	inc	r0
      0005E2 E5*00            [12] 1597 	mov	a,_bp
      0005E4 24 03            [12] 1598 	add	a,#0x03
      0005E6 F9               [12] 1599 	mov	r1,a
      0005E7 EA               [12] 1600 	mov	a,r2
      0005E8 26               [12] 1601 	add	a,@r0
      0005E9 F7               [12] 1602 	mov	@r1,a
      0005EA EB               [12] 1603 	mov	a,r3
      0005EB 08               [12] 1604 	inc	r0
      0005EC 36               [12] 1605 	addc	a,@r0
      0005ED 09               [12] 1606 	inc	r1
      0005EE F7               [12] 1607 	mov	@r1,a
      0005EF E5*00            [12] 1608 	mov	a,_bp
      0005F1 24 03            [12] 1609 	add	a,#0x03
      0005F3 F8               [12] 1610 	mov	r0,a
      0005F4 E6               [12] 1611 	mov	a,@r0
      0005F5 24r02            [12] 1612 	add	a,#_u
      0005F7 F5 82            [12] 1613 	mov	dpl,a
      0005F9 08               [12] 1614 	inc	r0
      0005FA E6               [12] 1615 	mov	a,@r0
      0005FB 34s04            [12] 1616 	addc	a,#(_u >> 8)
      0005FD F5 83            [12] 1617 	mov	dph,a
      0005FF E0               [24] 1618 	movx	a,@dptr
      000600 FD               [12] 1619 	mov	r5,a
      000601 E5*00            [12] 1620 	mov	a,_bp
      000603 24 05            [12] 1621 	add	a,#0x05
      000605 F8               [12] 1622 	mov	r0,a
      000606 C3               [12] 1623 	clr	c
      000607 E4               [12] 1624 	clr	a
      000608 9D               [12] 1625 	subb	a,r5
      000609 F6               [12] 1626 	mov	@r0,a
                                   1627 ;	life.c:165: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00060A 74 1F            [12] 1628 	mov	a,#0x1f
      00060C 2E               [12] 1629 	add	a,r6
      00060D FC               [12] 1630 	mov	r4,a
      00060E E4               [12] 1631 	clr	a
      00060F 3F               [12] 1632 	addc	a,r7
      000610 FD               [12] 1633 	mov	r5,a
      000611 C0 07            [24] 1634 	push	ar7
      000613 C0 06            [24] 1635 	push	ar6
      000615 C0 03            [24] 1636 	push	ar3
      000617 C0 02            [24] 1637 	push	ar2
      000619 74 20            [12] 1638 	mov	a,#0x20
      00061B C0 E0            [24] 1639 	push	acc
      00061D E4               [12] 1640 	clr	a
      00061E C0 E0            [24] 1641 	push	acc
      000620 8C 82            [24] 1642 	mov	dpl,r4
      000622 8D 83            [24] 1643 	mov	dph,r5
      000624 12r00r00         [24] 1644 	lcall	__modsint
      000627 AC 82            [24] 1645 	mov	r4,dpl
      000629 AD 83            [24] 1646 	mov	r5,dph
      00062B 15 81            [12] 1647 	dec	sp
      00062D 15 81            [12] 1648 	dec	sp
      00062F D0 02            [24] 1649 	pop	ar2
      000631 D0 03            [24] 1650 	pop	ar3
      000633 E5*00            [12] 1651 	mov	a,_bp
      000635 24 06            [12] 1652 	add	a,#0x06
      000637 F8               [12] 1653 	mov	r0,a
      000638 A6 04            [24] 1654 	mov	@r0,ar4
      00063A ED               [12] 1655 	mov	a,r5
      00063B C4               [12] 1656 	swap	a
      00063C 23               [12] 1657 	rl	a
      00063D 54 E0            [12] 1658 	anl	a,#0xe0
      00063F C6               [12] 1659 	xch	a,@r0
      000640 C4               [12] 1660 	swap	a
      000641 23               [12] 1661 	rl	a
      000642 C6               [12] 1662 	xch	a,@r0
      000643 66               [12] 1663 	xrl	a,@r0
      000644 C6               [12] 1664 	xch	a,@r0
      000645 54 E0            [12] 1665 	anl	a,#0xe0
      000647 C6               [12] 1666 	xch	a,@r0
      000648 66               [12] 1667 	xrl	a,@r0
      000649 08               [12] 1668 	inc	r0
      00064A F6               [12] 1669 	mov	@r0,a
      00064B 74 1F            [12] 1670 	mov	a,#0x1f
      00064D 2A               [12] 1671 	add	a,r2
      00064E FC               [12] 1672 	mov	r4,a
      00064F E4               [12] 1673 	clr	a
      000650 3B               [12] 1674 	addc	a,r3
      000651 FD               [12] 1675 	mov	r5,a
      000652 C0 03            [24] 1676 	push	ar3
      000654 C0 02            [24] 1677 	push	ar2
      000656 74 20            [12] 1678 	mov	a,#0x20
      000658 C0 E0            [24] 1679 	push	acc
      00065A E4               [12] 1680 	clr	a
      00065B C0 E0            [24] 1681 	push	acc
      00065D 8C 82            [24] 1682 	mov	dpl,r4
      00065F 8D 83            [24] 1683 	mov	dph,r5
      000661 12r00r00         [24] 1684 	lcall	__modsint
      000664 C8               [12] 1685 	xch	a,r0
      000665 E5*00            [12] 1686 	mov	a,_bp
      000667 24 08            [12] 1687 	add	a,#0x08
      000669 C8               [12] 1688 	xch	a,r0
      00066A A6 82            [24] 1689 	mov	@r0,dpl
      00066C 08               [12] 1690 	inc	r0
      00066D A6 83            [24] 1691 	mov	@r0,dph
      00066F 15 81            [12] 1692 	dec	sp
      000671 15 81            [12] 1693 	dec	sp
      000673 D0 02            [24] 1694 	pop	ar2
      000675 D0 03            [24] 1695 	pop	ar3
      000677 E5*00            [12] 1696 	mov	a,_bp
      000679 24 06            [12] 1697 	add	a,#0x06
      00067B F8               [12] 1698 	mov	r0,a
      00067C E5*00            [12] 1699 	mov	a,_bp
      00067E 24 08            [12] 1700 	add	a,#0x08
      000680 F9               [12] 1701 	mov	r1,a
      000681 E7               [12] 1702 	mov	a,@r1
      000682 26               [12] 1703 	add	a,@r0
      000683 FC               [12] 1704 	mov	r4,a
      000684 09               [12] 1705 	inc	r1
      000685 E7               [12] 1706 	mov	a,@r1
      000686 08               [12] 1707 	inc	r0
      000687 36               [12] 1708 	addc	a,@r0
      000688 FD               [12] 1709 	mov	r5,a
      000689 EC               [12] 1710 	mov	a,r4
      00068A 24r02            [12] 1711 	add	a,#_u
      00068C F5 82            [12] 1712 	mov	dpl,a
      00068E ED               [12] 1713 	mov	a,r5
      00068F 34s04            [12] 1714 	addc	a,#(_u >> 8)
      000691 F5 83            [12] 1715 	mov	dph,a
      000693 E0               [24] 1716 	movx	a,@dptr
      000694 FD               [12] 1717 	mov	r5,a
      000695 E5*00            [12] 1718 	mov	a,_bp
      000697 24 05            [12] 1719 	add	a,#0x05
      000699 F8               [12] 1720 	mov	r0,a
      00069A ED               [12] 1721 	mov	a,r5
      00069B 26               [12] 1722 	add	a,@r0
      00069C F6               [12] 1723 	mov	@r0,a
                                   1724 ;	life.c:167: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00069D 74 20            [12] 1725 	mov	a,#0x20
      00069F 2A               [12] 1726 	add	a,r2
      0006A0 FC               [12] 1727 	mov	r4,a
      0006A1 E4               [12] 1728 	clr	a
      0006A2 3B               [12] 1729 	addc	a,r3
      0006A3 FD               [12] 1730 	mov	r5,a
      0006A4 C0 03            [24] 1731 	push	ar3
      0006A6 C0 02            [24] 1732 	push	ar2
      0006A8 74 20            [12] 1733 	mov	a,#0x20
      0006AA C0 E0            [24] 1734 	push	acc
      0006AC E4               [12] 1735 	clr	a
      0006AD C0 E0            [24] 1736 	push	acc
      0006AF 8C 82            [24] 1737 	mov	dpl,r4
      0006B1 8D 83            [24] 1738 	mov	dph,r5
      0006B3 12r00r00         [24] 1739 	lcall	__modsint
      0006B6 C8               [12] 1740 	xch	a,r0
      0006B7 E5*00            [12] 1741 	mov	a,_bp
      0006B9 24 0A            [12] 1742 	add	a,#0x0a
      0006BB C8               [12] 1743 	xch	a,r0
      0006BC A6 82            [24] 1744 	mov	@r0,dpl
      0006BE 08               [12] 1745 	inc	r0
      0006BF A6 83            [24] 1746 	mov	@r0,dph
      0006C1 15 81            [12] 1747 	dec	sp
      0006C3 15 81            [12] 1748 	dec	sp
      0006C5 D0 02            [24] 1749 	pop	ar2
      0006C7 D0 03            [24] 1750 	pop	ar3
      0006C9 E5*00            [12] 1751 	mov	a,_bp
      0006CB 24 06            [12] 1752 	add	a,#0x06
      0006CD F8               [12] 1753 	mov	r0,a
      0006CE E5*00            [12] 1754 	mov	a,_bp
      0006D0 24 0A            [12] 1755 	add	a,#0x0a
      0006D2 F9               [12] 1756 	mov	r1,a
      0006D3 E7               [12] 1757 	mov	a,@r1
      0006D4 26               [12] 1758 	add	a,@r0
      0006D5 FC               [12] 1759 	mov	r4,a
      0006D6 09               [12] 1760 	inc	r1
      0006D7 E7               [12] 1761 	mov	a,@r1
      0006D8 08               [12] 1762 	inc	r0
      0006D9 36               [12] 1763 	addc	a,@r0
      0006DA FD               [12] 1764 	mov	r5,a
      0006DB EC               [12] 1765 	mov	a,r4
      0006DC 24r02            [12] 1766 	add	a,#_u
      0006DE F5 82            [12] 1767 	mov	dpl,a
      0006E0 ED               [12] 1768 	mov	a,r5
      0006E1 34s04            [12] 1769 	addc	a,#(_u >> 8)
      0006E3 F5 83            [12] 1770 	mov	dph,a
      0006E5 E0               [24] 1771 	movx	a,@dptr
      0006E6 FD               [12] 1772 	mov	r5,a
      0006E7 E5*00            [12] 1773 	mov	a,_bp
      0006E9 24 05            [12] 1774 	add	a,#0x05
      0006EB F8               [12] 1775 	mov	r0,a
      0006EC ED               [12] 1776 	mov	a,r5
      0006ED 26               [12] 1777 	add	a,@r0
      0006EE F6               [12] 1778 	mov	@r0,a
                                   1779 ;	life.c:169: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006EF 74 21            [12] 1780 	mov	a,#0x21
      0006F1 2A               [12] 1781 	add	a,r2
      0006F2 FC               [12] 1782 	mov	r4,a
      0006F3 E4               [12] 1783 	clr	a
      0006F4 3B               [12] 1784 	addc	a,r3
      0006F5 FD               [12] 1785 	mov	r5,a
      0006F6 C0 03            [24] 1786 	push	ar3
      0006F8 C0 02            [24] 1787 	push	ar2
      0006FA 74 20            [12] 1788 	mov	a,#0x20
      0006FC C0 E0            [24] 1789 	push	acc
      0006FE E4               [12] 1790 	clr	a
      0006FF C0 E0            [24] 1791 	push	acc
      000701 8C 82            [24] 1792 	mov	dpl,r4
      000703 8D 83            [24] 1793 	mov	dph,r5
      000705 12r00r00         [24] 1794 	lcall	__modsint
      000708 C8               [12] 1795 	xch	a,r0
      000709 E5*00            [12] 1796 	mov	a,_bp
      00070B 24 0C            [12] 1797 	add	a,#0x0c
      00070D C8               [12] 1798 	xch	a,r0
      00070E A6 82            [24] 1799 	mov	@r0,dpl
      000710 08               [12] 1800 	inc	r0
      000711 A6 83            [24] 1801 	mov	@r0,dph
      000713 15 81            [12] 1802 	dec	sp
      000715 15 81            [12] 1803 	dec	sp
      000717 D0 02            [24] 1804 	pop	ar2
      000719 D0 03            [24] 1805 	pop	ar3
      00071B D0 06            [24] 1806 	pop	ar6
      00071D D0 07            [24] 1807 	pop	ar7
      00071F E5*00            [12] 1808 	mov	a,_bp
      000721 24 06            [12] 1809 	add	a,#0x06
      000723 F8               [12] 1810 	mov	r0,a
      000724 E5*00            [12] 1811 	mov	a,_bp
      000726 24 0C            [12] 1812 	add	a,#0x0c
      000728 F9               [12] 1813 	mov	r1,a
      000729 E7               [12] 1814 	mov	a,@r1
      00072A 26               [12] 1815 	add	a,@r0
      00072B FC               [12] 1816 	mov	r4,a
      00072C 09               [12] 1817 	inc	r1
      00072D E7               [12] 1818 	mov	a,@r1
      00072E 08               [12] 1819 	inc	r0
      00072F 36               [12] 1820 	addc	a,@r0
      000730 FD               [12] 1821 	mov	r5,a
      000731 EC               [12] 1822 	mov	a,r4
      000732 24r02            [12] 1823 	add	a,#_u
      000734 F5 82            [12] 1824 	mov	dpl,a
      000736 ED               [12] 1825 	mov	a,r5
      000737 34s04            [12] 1826 	addc	a,#(_u >> 8)
      000739 F5 83            [12] 1827 	mov	dph,a
      00073B E0               [24] 1828 	movx	a,@dptr
      00073C FD               [12] 1829 	mov	r5,a
      00073D E5*00            [12] 1830 	mov	a,_bp
      00073F 24 05            [12] 1831 	add	a,#0x05
      000741 F8               [12] 1832 	mov	r0,a
      000742 E5*00            [12] 1833 	mov	a,_bp
      000744 24 06            [12] 1834 	add	a,#0x06
      000746 F9               [12] 1835 	mov	r1,a
      000747 ED               [12] 1836 	mov	a,r5
      000748 26               [12] 1837 	add	a,@r0
      000749 F7               [12] 1838 	mov	@r1,a
                                   1839 ;	life.c:171: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00074A 74 20            [12] 1840 	mov	a,#0x20
      00074C 2E               [12] 1841 	add	a,r6
      00074D FC               [12] 1842 	mov	r4,a
      00074E E4               [12] 1843 	clr	a
      00074F 3F               [12] 1844 	addc	a,r7
      000750 FD               [12] 1845 	mov	r5,a
      000751 C0 07            [24] 1846 	push	ar7
      000753 C0 06            [24] 1847 	push	ar6
      000755 C0 03            [24] 1848 	push	ar3
      000757 C0 02            [24] 1849 	push	ar2
      000759 74 20            [12] 1850 	mov	a,#0x20
      00075B C0 E0            [24] 1851 	push	acc
      00075D E4               [12] 1852 	clr	a
      00075E C0 E0            [24] 1853 	push	acc
      000760 8C 82            [24] 1854 	mov	dpl,r4
      000762 8D 83            [24] 1855 	mov	dph,r5
      000764 12r00r00         [24] 1856 	lcall	__modsint
      000767 AC 82            [24] 1857 	mov	r4,dpl
      000769 AD 83            [24] 1858 	mov	r5,dph
      00076B 15 81            [12] 1859 	dec	sp
      00076D 15 81            [12] 1860 	dec	sp
      00076F D0 02            [24] 1861 	pop	ar2
      000771 D0 03            [24] 1862 	pop	ar3
      000773 D0 06            [24] 1863 	pop	ar6
      000775 D0 07            [24] 1864 	pop	ar7
      000777 E5*00            [12] 1865 	mov	a,_bp
      000779 24 0E            [12] 1866 	add	a,#0x0e
      00077B F8               [12] 1867 	mov	r0,a
      00077C A6 04            [24] 1868 	mov	@r0,ar4
      00077E ED               [12] 1869 	mov	a,r5
      00077F C4               [12] 1870 	swap	a
      000780 23               [12] 1871 	rl	a
      000781 54 E0            [12] 1872 	anl	a,#0xe0
      000783 C6               [12] 1873 	xch	a,@r0
      000784 C4               [12] 1874 	swap	a
      000785 23               [12] 1875 	rl	a
      000786 C6               [12] 1876 	xch	a,@r0
      000787 66               [12] 1877 	xrl	a,@r0
      000788 C6               [12] 1878 	xch	a,@r0
      000789 54 E0            [12] 1879 	anl	a,#0xe0
      00078B C6               [12] 1880 	xch	a,@r0
      00078C 66               [12] 1881 	xrl	a,@r0
      00078D 08               [12] 1882 	inc	r0
      00078E F6               [12] 1883 	mov	@r0,a
      00078F E5*00            [12] 1884 	mov	a,_bp
      000791 24 0E            [12] 1885 	add	a,#0x0e
      000793 F8               [12] 1886 	mov	r0,a
      000794 E5*00            [12] 1887 	mov	a,_bp
      000796 24 08            [12] 1888 	add	a,#0x08
      000798 F9               [12] 1889 	mov	r1,a
      000799 E7               [12] 1890 	mov	a,@r1
      00079A 26               [12] 1891 	add	a,@r0
      00079B FC               [12] 1892 	mov	r4,a
      00079C 09               [12] 1893 	inc	r1
      00079D E7               [12] 1894 	mov	a,@r1
      00079E 08               [12] 1895 	inc	r0
      00079F 36               [12] 1896 	addc	a,@r0
      0007A0 FD               [12] 1897 	mov	r5,a
      0007A1 EC               [12] 1898 	mov	a,r4
      0007A2 24r02            [12] 1899 	add	a,#_u
      0007A4 F5 82            [12] 1900 	mov	dpl,a
      0007A6 ED               [12] 1901 	mov	a,r5
      0007A7 34s04            [12] 1902 	addc	a,#(_u >> 8)
      0007A9 F5 83            [12] 1903 	mov	dph,a
      0007AB E0               [24] 1904 	movx	a,@dptr
      0007AC FD               [12] 1905 	mov	r5,a
      0007AD E5*00            [12] 1906 	mov	a,_bp
      0007AF 24 06            [12] 1907 	add	a,#0x06
      0007B1 F8               [12] 1908 	mov	r0,a
      0007B2 E5*00            [12] 1909 	mov	a,_bp
      0007B4 24 06            [12] 1910 	add	a,#0x06
      0007B6 F9               [12] 1911 	mov	r1,a
      0007B7 ED               [12] 1912 	mov	a,r5
      0007B8 26               [12] 1913 	add	a,@r0
      0007B9 F7               [12] 1914 	mov	@r1,a
                                   1915 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007BA E5*00            [12] 1916 	mov	a,_bp
      0007BC 24 0E            [12] 1917 	add	a,#0x0e
      0007BE F8               [12] 1918 	mov	r0,a
      0007BF E5*00            [12] 1919 	mov	a,_bp
      0007C1 24 0A            [12] 1920 	add	a,#0x0a
      0007C3 F9               [12] 1921 	mov	r1,a
      0007C4 E7               [12] 1922 	mov	a,@r1
      0007C5 26               [12] 1923 	add	a,@r0
      0007C6 FC               [12] 1924 	mov	r4,a
      0007C7 09               [12] 1925 	inc	r1
      0007C8 E7               [12] 1926 	mov	a,@r1
      0007C9 08               [12] 1927 	inc	r0
      0007CA 36               [12] 1928 	addc	a,@r0
      0007CB FD               [12] 1929 	mov	r5,a
      0007CC EC               [12] 1930 	mov	a,r4
      0007CD 24r02            [12] 1931 	add	a,#_u
      0007CF F5 82            [12] 1932 	mov	dpl,a
      0007D1 ED               [12] 1933 	mov	a,r5
      0007D2 34s04            [12] 1934 	addc	a,#(_u >> 8)
      0007D4 F5 83            [12] 1935 	mov	dph,a
      0007D6 E0               [24] 1936 	movx	a,@dptr
      0007D7 FD               [12] 1937 	mov	r5,a
      0007D8 E5*00            [12] 1938 	mov	a,_bp
      0007DA 24 06            [12] 1939 	add	a,#0x06
      0007DC F8               [12] 1940 	mov	r0,a
      0007DD E5*00            [12] 1941 	mov	a,_bp
      0007DF 24 06            [12] 1942 	add	a,#0x06
      0007E1 F9               [12] 1943 	mov	r1,a
      0007E2 ED               [12] 1944 	mov	a,r5
      0007E3 26               [12] 1945 	add	a,@r0
      0007E4 F7               [12] 1946 	mov	@r1,a
                                   1947 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007E5 E5*00            [12] 1948 	mov	a,_bp
      0007E7 24 0E            [12] 1949 	add	a,#0x0e
      0007E9 F8               [12] 1950 	mov	r0,a
      0007EA E5*00            [12] 1951 	mov	a,_bp
      0007EC 24 0C            [12] 1952 	add	a,#0x0c
      0007EE F9               [12] 1953 	mov	r1,a
      0007EF E7               [12] 1954 	mov	a,@r1
      0007F0 26               [12] 1955 	add	a,@r0
      0007F1 FC               [12] 1956 	mov	r4,a
      0007F2 09               [12] 1957 	inc	r1
      0007F3 E7               [12] 1958 	mov	a,@r1
      0007F4 08               [12] 1959 	inc	r0
      0007F5 36               [12] 1960 	addc	a,@r0
      0007F6 FD               [12] 1961 	mov	r5,a
      0007F7 EC               [12] 1962 	mov	a,r4
      0007F8 24r02            [12] 1963 	add	a,#_u
      0007FA F5 82            [12] 1964 	mov	dpl,a
      0007FC ED               [12] 1965 	mov	a,r5
      0007FD 34s04            [12] 1966 	addc	a,#(_u >> 8)
      0007FF F5 83            [12] 1967 	mov	dph,a
      000801 E0               [24] 1968 	movx	a,@dptr
      000802 FD               [12] 1969 	mov	r5,a
      000803 E5*00            [12] 1970 	mov	a,_bp
      000805 24 06            [12] 1971 	add	a,#0x06
      000807 F8               [12] 1972 	mov	r0,a
      000808 E5*00            [12] 1973 	mov	a,_bp
      00080A 24 0E            [12] 1974 	add	a,#0x0e
      00080C F9               [12] 1975 	mov	r1,a
      00080D ED               [12] 1976 	mov	a,r5
      00080E 26               [12] 1977 	add	a,@r0
      00080F F7               [12] 1978 	mov	@r1,a
                                   1979 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000810 74 21            [12] 1980 	mov	a,#0x21
      000812 2E               [12] 1981 	add	a,r6
      000813 FE               [12] 1982 	mov	r6,a
      000814 E4               [12] 1983 	clr	a
      000815 3F               [12] 1984 	addc	a,r7
      000816 FF               [12] 1985 	mov	r7,a
      000817 C0 03            [24] 1986 	push	ar3
      000819 C0 02            [24] 1987 	push	ar2
      00081B 74 20            [12] 1988 	mov	a,#0x20
      00081D C0 E0            [24] 1989 	push	acc
      00081F E4               [12] 1990 	clr	a
      000820 C0 E0            [24] 1991 	push	acc
      000822 8E 82            [24] 1992 	mov	dpl,r6
      000824 8F 83            [24] 1993 	mov	dph,r7
      000826 12r00r00         [24] 1994 	lcall	__modsint
      000829 AE 82            [24] 1995 	mov	r6,dpl
      00082B AF 83            [24] 1996 	mov	r7,dph
      00082D 15 81            [12] 1997 	dec	sp
      00082F 15 81            [12] 1998 	dec	sp
      000831 D0 02            [24] 1999 	pop	ar2
      000833 D0 03            [24] 2000 	pop	ar3
      000835 EF               [12] 2001 	mov	a,r7
      000836 C4               [12] 2002 	swap	a
      000837 23               [12] 2003 	rl	a
      000838 54 E0            [12] 2004 	anl	a,#0xe0
      00083A CE               [12] 2005 	xch	a,r6
      00083B C4               [12] 2006 	swap	a
      00083C 23               [12] 2007 	rl	a
      00083D CE               [12] 2008 	xch	a,r6
      00083E 6E               [12] 2009 	xrl	a,r6
      00083F CE               [12] 2010 	xch	a,r6
      000840 54 E0            [12] 2011 	anl	a,#0xe0
      000842 CE               [12] 2012 	xch	a,r6
      000843 6E               [12] 2013 	xrl	a,r6
      000844 FF               [12] 2014 	mov	r7,a
      000845 E5*00            [12] 2015 	mov	a,_bp
      000847 24 08            [12] 2016 	add	a,#0x08
      000849 F8               [12] 2017 	mov	r0,a
      00084A E6               [12] 2018 	mov	a,@r0
      00084B 2E               [12] 2019 	add	a,r6
      00084C FC               [12] 2020 	mov	r4,a
      00084D 08               [12] 2021 	inc	r0
      00084E E6               [12] 2022 	mov	a,@r0
      00084F 3F               [12] 2023 	addc	a,r7
      000850 FD               [12] 2024 	mov	r5,a
      000851 EC               [12] 2025 	mov	a,r4
      000852 24r02            [12] 2026 	add	a,#_u
      000854 F5 82            [12] 2027 	mov	dpl,a
      000856 ED               [12] 2028 	mov	a,r5
      000857 34s04            [12] 2029 	addc	a,#(_u >> 8)
      000859 F5 83            [12] 2030 	mov	dph,a
      00085B E0               [24] 2031 	movx	a,@dptr
      00085C FD               [12] 2032 	mov	r5,a
      00085D E5*00            [12] 2033 	mov	a,_bp
      00085F 24 0E            [12] 2034 	add	a,#0x0e
      000861 F8               [12] 2035 	mov	r0,a
      000862 E5*00            [12] 2036 	mov	a,_bp
      000864 24 0E            [12] 2037 	add	a,#0x0e
      000866 F9               [12] 2038 	mov	r1,a
      000867 ED               [12] 2039 	mov	a,r5
      000868 26               [12] 2040 	add	a,@r0
      000869 F7               [12] 2041 	mov	@r1,a
                                   2042 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00086A E5*00            [12] 2043 	mov	a,_bp
      00086C 24 0A            [12] 2044 	add	a,#0x0a
      00086E F8               [12] 2045 	mov	r0,a
      00086F E6               [12] 2046 	mov	a,@r0
      000870 2E               [12] 2047 	add	a,r6
      000871 FC               [12] 2048 	mov	r4,a
      000872 08               [12] 2049 	inc	r0
      000873 E6               [12] 2050 	mov	a,@r0
      000874 3F               [12] 2051 	addc	a,r7
      000875 FD               [12] 2052 	mov	r5,a
      000876 EC               [12] 2053 	mov	a,r4
      000877 24r02            [12] 2054 	add	a,#_u
      000879 F5 82            [12] 2055 	mov	dpl,a
      00087B ED               [12] 2056 	mov	a,r5
      00087C 34s04            [12] 2057 	addc	a,#(_u >> 8)
      00087E F5 83            [12] 2058 	mov	dph,a
      000880 E0               [24] 2059 	movx	a,@dptr
      000881 FD               [12] 2060 	mov	r5,a
      000882 E5*00            [12] 2061 	mov	a,_bp
      000884 24 0E            [12] 2062 	add	a,#0x0e
      000886 F8               [12] 2063 	mov	r0,a
      000887 ED               [12] 2064 	mov	a,r5
      000888 26               [12] 2065 	add	a,@r0
      000889 FD               [12] 2066 	mov	r5,a
                                   2067 ;	life.c:180: y1 = 1; x1 = 1;
      00088A 90r0Cr08         [24] 2068 	mov	dptr,#_y1
      00088D 74 01            [12] 2069 	mov	a,#0x01
      00088F F0               [24] 2070 	movx	@dptr,a
      000890 E4               [12] 2071 	clr	a
      000891 A3               [24] 2072 	inc	dptr
      000892 F0               [24] 2073 	movx	@dptr,a
      000893 90r0Cr06         [24] 2074 	mov	dptr,#_x1
      000896 04               [12] 2075 	inc	a
      000897 F0               [24] 2076 	movx	@dptr,a
      000898 E4               [12] 2077 	clr	a
      000899 A3               [24] 2078 	inc	dptr
      00089A F0               [24] 2079 	movx	@dptr,a
                                   2080 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00089B E5*00            [12] 2081 	mov	a,_bp
      00089D 24 0C            [12] 2082 	add	a,#0x0c
      00089F F8               [12] 2083 	mov	r0,a
      0008A0 E6               [12] 2084 	mov	a,@r0
      0008A1 2E               [12] 2085 	add	a,r6
      0008A2 FE               [12] 2086 	mov	r6,a
      0008A3 08               [12] 2087 	inc	r0
      0008A4 E6               [12] 2088 	mov	a,@r0
      0008A5 3F               [12] 2089 	addc	a,r7
      0008A6 FF               [12] 2090 	mov	r7,a
      0008A7 EE               [12] 2091 	mov	a,r6
      0008A8 24r02            [12] 2092 	add	a,#_u
      0008AA F5 82            [12] 2093 	mov	dpl,a
      0008AC EF               [12] 2094 	mov	a,r7
      0008AD 34s04            [12] 2095 	addc	a,#(_u >> 8)
      0008AF F5 83            [12] 2096 	mov	dph,a
      0008B1 E0               [24] 2097 	movx	a,@dptr
      0008B2 2D               [12] 2098 	add	a,r5
      0008B3 FF               [12] 2099 	mov	r7,a
      0008B4 90r0Cr0F         [24] 2100 	mov	dptr,#_n
      0008B7 F0               [24] 2101 	movx	@dptr,a
                                   2102 ;	life.c:183: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008B8 E5*00            [12] 2103 	mov	a,_bp
      0008BA 24 03            [12] 2104 	add	a,#0x03
      0008BC F8               [12] 2105 	mov	r0,a
      0008BD E6               [12] 2106 	mov	a,@r0
      0008BE 24r02            [12] 2107 	add	a,#_nu
      0008C0 FD               [12] 2108 	mov	r5,a
      0008C1 08               [12] 2109 	inc	r0
      0008C2 E6               [12] 2110 	mov	a,@r0
      0008C3 34s08            [12] 2111 	addc	a,#(_nu >> 8)
      0008C5 FE               [12] 2112 	mov	r6,a
      0008C6 BF 03 02         [24] 2113 	cjne	r7,#0x03,00397$
      0008C9 80 20            [24] 2114 	sjmp	00202$
      0008CB                       2115 00397$:
      0008CB BF 02 19         [24] 2116 	cjne	r7,#0x02,00201$
      0008CE A8*00            [24] 2117 	mov	r0,_bp
      0008D0 08               [12] 2118 	inc	r0
      0008D1 EA               [12] 2119 	mov	a,r2
      0008D2 26               [12] 2120 	add	a,@r0
      0008D3 FA               [12] 2121 	mov	r2,a
      0008D4 EB               [12] 2122 	mov	a,r3
      0008D5 08               [12] 2123 	inc	r0
      0008D6 36               [12] 2124 	addc	a,@r0
      0008D7 FB               [12] 2125 	mov	r3,a
      0008D8 EA               [12] 2126 	mov	a,r2
      0008D9 24r02            [12] 2127 	add	a,#_u
      0008DB FA               [12] 2128 	mov	r2,a
      0008DC EB               [12] 2129 	mov	a,r3
      0008DD 34s04            [12] 2130 	addc	a,#(_u >> 8)
      0008DF FB               [12] 2131 	mov	r3,a
      0008E0 8A 82            [24] 2132 	mov	dpl,r2
      0008E2 8B 83            [24] 2133 	mov	dph,r3
      0008E4 E0               [24] 2134 	movx	a,@dptr
      0008E5 70 04            [24] 2135 	jnz	00202$
      0008E7                       2136 00201$:
                                   2137 ;	assignBit
      0008E7 C2*00            [12] 2138 	clr	b0
      0008E9 80 02            [24] 2139 	sjmp	00203$
      0008EB                       2140 00202$:
                                   2141 ;	assignBit
      0008EB D2*00            [12] 2142 	setb	b0
      0008ED                       2143 00203$:
      0008ED A2*00            [12] 2144 	mov	c,b0
      0008EF E4               [12] 2145 	clr	a
      0008F0 33               [12] 2146 	rlc	a
      0008F1 8D 82            [24] 2147 	mov	dpl,r5
      0008F3 8E 83            [24] 2148 	mov	dph,r6
      0008F5 F0               [24] 2149 	movx	@dptr,a
                                   2150 ;	life.c:185: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      0008F6 90r0Cr04         [24] 2151 	mov	dptr,#_y
      0008F9 E0               [24] 2152 	movx	a,@dptr
      0008FA FE               [12] 2153 	mov	r6,a
      0008FB A3               [24] 2154 	inc	dptr
      0008FC E0               [24] 2155 	movx	a,@dptr
      0008FD C4               [12] 2156 	swap	a
      0008FE 23               [12] 2157 	rl	a
      0008FF 54 E0            [12] 2158 	anl	a,#0xe0
      000901 CE               [12] 2159 	xch	a,r6
      000902 C4               [12] 2160 	swap	a
      000903 23               [12] 2161 	rl	a
      000904 CE               [12] 2162 	xch	a,r6
      000905 6E               [12] 2163 	xrl	a,r6
      000906 CE               [12] 2164 	xch	a,r6
      000907 54 E0            [12] 2165 	anl	a,#0xe0
      000909 CE               [12] 2166 	xch	a,r6
      00090A 6E               [12] 2167 	xrl	a,r6
      00090B FF               [12] 2168 	mov	r7,a
      00090C 90r0Cr02         [24] 2169 	mov	dptr,#_x
      00090F E0               [24] 2170 	movx	a,@dptr
      000910 FC               [12] 2171 	mov	r4,a
      000911 A3               [24] 2172 	inc	dptr
      000912 E0               [24] 2173 	movx	a,@dptr
      000913 FD               [12] 2174 	mov	r5,a
      000914 EC               [12] 2175 	mov	a,r4
      000915 2E               [12] 2176 	add	a,r6
      000916 FE               [12] 2177 	mov	r6,a
      000917 ED               [12] 2178 	mov	a,r5
      000918 3F               [12] 2179 	addc	a,r7
      000919 FF               [12] 2180 	mov	r7,a
      00091A EE               [12] 2181 	mov	a,r6
      00091B 24r02            [12] 2182 	add	a,#_pu
      00091D F5 82            [12] 2183 	mov	dpl,a
      00091F EF               [12] 2184 	mov	a,r7
      000920 34s00            [12] 2185 	addc	a,#(_pu >> 8)
      000922 F5 83            [12] 2186 	mov	dph,a
      000924 E0               [24] 2187 	movx	a,@dptr
      000925 FD               [12] 2188 	mov	r5,a
      000926 EE               [12] 2189 	mov	a,r6
      000927 24r02            [12] 2190 	add	a,#_nu
      000929 F5 82            [12] 2191 	mov	dpl,a
      00092B EF               [12] 2192 	mov	a,r7
      00092C 34s08            [12] 2193 	addc	a,#(_nu >> 8)
      00092E F5 83            [12] 2194 	mov	dph,a
      000930 E0               [24] 2195 	movx	a,@dptr
      000931 FF               [12] 2196 	mov	r7,a
      000932 ED               [12] 2197 	mov	a,r5
      000933 B5 07 02         [24] 2198 	cjne	a,ar7,00401$
      000936 80 05            [24] 2199 	sjmp	00152$
      000938                       2200 00401$:
      000938 90r0Cr11         [24] 2201 	mov	dptr,#_cycle2
      00093B E4               [12] 2202 	clr	a
      00093C F0               [24] 2203 	movx	@dptr,a
      00093D                       2204 00152$:
                                   2205 ;	life.c:186: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      00093D 90r0Cr04         [24] 2206 	mov	dptr,#_y
      000940 E0               [24] 2207 	movx	a,@dptr
      000941 FE               [12] 2208 	mov	r6,a
      000942 A3               [24] 2209 	inc	dptr
      000943 E0               [24] 2210 	movx	a,@dptr
      000944 C4               [12] 2211 	swap	a
      000945 23               [12] 2212 	rl	a
      000946 54 E0            [12] 2213 	anl	a,#0xe0
      000948 CE               [12] 2214 	xch	a,r6
      000949 C4               [12] 2215 	swap	a
      00094A 23               [12] 2216 	rl	a
      00094B CE               [12] 2217 	xch	a,r6
      00094C 6E               [12] 2218 	xrl	a,r6
      00094D CE               [12] 2219 	xch	a,r6
      00094E 54 E0            [12] 2220 	anl	a,#0xe0
      000950 CE               [12] 2221 	xch	a,r6
      000951 6E               [12] 2222 	xrl	a,r6
      000952 FF               [12] 2223 	mov	r7,a
      000953 90r0Cr02         [24] 2224 	mov	dptr,#_x
      000956 E0               [24] 2225 	movx	a,@dptr
      000957 FC               [12] 2226 	mov	r4,a
      000958 A3               [24] 2227 	inc	dptr
      000959 E0               [24] 2228 	movx	a,@dptr
      00095A FD               [12] 2229 	mov	r5,a
      00095B EC               [12] 2230 	mov	a,r4
      00095C 2E               [12] 2231 	add	a,r6
      00095D FE               [12] 2232 	mov	r6,a
      00095E ED               [12] 2233 	mov	a,r5
      00095F 3F               [12] 2234 	addc	a,r7
      000960 FF               [12] 2235 	mov	r7,a
      000961 EE               [12] 2236 	mov	a,r6
      000962 24r02            [12] 2237 	add	a,#_u
      000964 F5 82            [12] 2238 	mov	dpl,a
      000966 EF               [12] 2239 	mov	a,r7
      000967 34s04            [12] 2240 	addc	a,#(_u >> 8)
      000969 F5 83            [12] 2241 	mov	dph,a
      00096B E0               [24] 2242 	movx	a,@dptr
      00096C FD               [12] 2243 	mov	r5,a
      00096D EE               [12] 2244 	mov	a,r6
      00096E 24r02            [12] 2245 	add	a,#_nu
      000970 F5 82            [12] 2246 	mov	dpl,a
      000972 EF               [12] 2247 	mov	a,r7
      000973 34s08            [12] 2248 	addc	a,#(_nu >> 8)
      000975 F5 83            [12] 2249 	mov	dph,a
      000977 E0               [24] 2250 	movx	a,@dptr
      000978 FF               [12] 2251 	mov	r7,a
      000979 ED               [12] 2252 	mov	a,r5
      00097A B5 07 02         [24] 2253 	cjne	a,ar7,00402$
      00097D 80 05            [24] 2254 	sjmp	00181$
      00097F                       2255 00402$:
      00097F 90r0Cr10         [24] 2256 	mov	dptr,#_fixed
      000982 E4               [12] 2257 	clr	a
      000983 F0               [24] 2258 	movx	@dptr,a
      000984                       2259 00181$:
                                   2260 ;	life.c:161: for (x = 0; x < W; x++) {
      000984 90r0Cr02         [24] 2261 	mov	dptr,#_x
      000987 E0               [24] 2262 	movx	a,@dptr
      000988 24 01            [12] 2263 	add	a,#0x01
      00098A F0               [24] 2264 	movx	@dptr,a
      00098B A3               [24] 2265 	inc	dptr
      00098C E0               [24] 2266 	movx	a,@dptr
      00098D 34 00            [12] 2267 	addc	a,#0x00
      00098F F0               [24] 2268 	movx	@dptr,a
      000990 90r0Cr02         [24] 2269 	mov	dptr,#_x
      000993 E0               [24] 2270 	movx	a,@dptr
      000994 FE               [12] 2271 	mov	r6,a
      000995 A3               [24] 2272 	inc	dptr
      000996 E0               [24] 2273 	movx	a,@dptr
      000997 FF               [12] 2274 	mov	r7,a
      000998 C3               [12] 2275 	clr	c
      000999 EE               [12] 2276 	mov	a,r6
      00099A 94 20            [12] 2277 	subb	a,#0x20
      00099C EF               [12] 2278 	mov	a,r7
      00099D 64 80            [12] 2279 	xrl	a,#0x80
      00099F 94 80            [12] 2280 	subb	a,#0x80
      0009A1 50 03            [24] 2281 	jnc	00403$
      0009A3 02r05rB9         [24] 2282 	ljmp	00180$
      0009A6                       2283 00403$:
                                   2284 ;	life.c:158: for (y = 0; y < H; y++) {
      0009A6 90r0Cr04         [24] 2285 	mov	dptr,#_y
      0009A9 E0               [24] 2286 	movx	a,@dptr
      0009AA 24 01            [12] 2287 	add	a,#0x01
      0009AC F0               [24] 2288 	movx	@dptr,a
      0009AD A3               [24] 2289 	inc	dptr
      0009AE E0               [24] 2290 	movx	a,@dptr
      0009AF 34 00            [12] 2291 	addc	a,#0x00
      0009B1 F0               [24] 2292 	movx	@dptr,a
      0009B2 90r0Cr04         [24] 2293 	mov	dptr,#_y
      0009B5 E0               [24] 2294 	movx	a,@dptr
      0009B6 FE               [12] 2295 	mov	r6,a
      0009B7 A3               [24] 2296 	inc	dptr
      0009B8 E0               [24] 2297 	movx	a,@dptr
      0009B9 FF               [12] 2298 	mov	r7,a
      0009BA C3               [12] 2299 	clr	c
      0009BB EE               [12] 2300 	mov	a,r6
      0009BC 94 20            [12] 2301 	subb	a,#0x20
      0009BE EF               [12] 2302 	mov	a,r7
      0009BF 64 80            [12] 2303 	xrl	a,#0x80
      0009C1 94 80            [12] 2304 	subb	a,#0x80
      0009C3 50 03            [24] 2305 	jnc	00404$
      0009C5 02r05r90         [24] 2306 	ljmp	00182$
      0009C8                       2307 00404$:
                                   2308 ;	life.c:190: memcpy(pu, u, sizeof (u));
      0009C8 E4               [12] 2309 	clr	a
      0009C9 C0 E0            [24] 2310 	push	acc
      0009CB 74 04            [12] 2311 	mov	a,#0x04
      0009CD C0 E0            [24] 2312 	push	acc
      0009CF 74r02            [12] 2313 	mov	a,#_u
      0009D1 C0 E0            [24] 2314 	push	acc
      0009D3 74s04            [12] 2315 	mov	a,#(_u >> 8)
      0009D5 C0 E0            [24] 2316 	push	acc
      0009D7 E4               [12] 2317 	clr	a
      0009D8 C0 E0            [24] 2318 	push	acc
      0009DA 90r00r02         [24] 2319 	mov	dptr,#_pu
      0009DD 75 F0 00         [24] 2320 	mov	b,#0x00
      0009E0 12r00r00         [24] 2321 	lcall	___memcpy
      0009E3 E5 81            [12] 2322 	mov	a,sp
      0009E5 24 FB            [12] 2323 	add	a,#0xfb
      0009E7 F5 81            [12] 2324 	mov	sp,a
                                   2325 ;	life.c:191: memcpy(u, nu, sizeof (nu));
      0009E9 E4               [12] 2326 	clr	a
      0009EA C0 E0            [24] 2327 	push	acc
      0009EC 74 04            [12] 2328 	mov	a,#0x04
      0009EE C0 E0            [24] 2329 	push	acc
      0009F0 74r02            [12] 2330 	mov	a,#_nu
      0009F2 C0 E0            [24] 2331 	push	acc
      0009F4 74s08            [12] 2332 	mov	a,#(_nu >> 8)
      0009F6 C0 E0            [24] 2333 	push	acc
      0009F8 E4               [12] 2334 	clr	a
      0009F9 C0 E0            [24] 2335 	push	acc
      0009FB 90r04r02         [24] 2336 	mov	dptr,#_u
      0009FE 75 F0 00         [24] 2337 	mov	b,#0x00
      000A01 12r00r00         [24] 2338 	lcall	___memcpy
      000A04 E5 81            [12] 2339 	mov	a,sp
      000A06 24 FB            [12] 2340 	add	a,#0xfb
      000A08 F5 81            [12] 2341 	mov	sp,a
                                   2342 ;	life.c:228: if (fixed || cycle2) {
      000A0A 90r0Cr10         [24] 2343 	mov	dptr,#_fixed
      000A0D E0               [24] 2344 	movx	a,@dptr
      000A0E 70 09            [24] 2345 	jnz	00114$
      000A10 90r0Cr11         [24] 2346 	mov	dptr,#_cycle2
      000A13 E0               [24] 2347 	movx	a,@dptr
      000A14 70 03            [24] 2348 	jnz	00406$
      000A16 02r05r6C         [24] 2349 	ljmp	00189$
      000A19                       2350 00406$:
      000A19                       2351 00114$:
                                   2352 ;	life.c:229: printstr("DONE\r\n");
      000A19 7Dr3C            [12] 2353 	mov	r5,#___str_6
      000A1B 7Es00            [12] 2354 	mov	r6,#(___str_6 >> 8)
      000A1D 7F 80            [12] 2355 	mov	r7,#0x80
                                   2356 ;	life.c:48: return;
      000A1F                       2357 00185$:
                                   2358 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A1F 8D 82            [24] 2359 	mov	dpl,r5
      000A21 8E 83            [24] 2360 	mov	dph,r6
      000A23 8F F0            [24] 2361 	mov	b,r7
      000A25 12r00r00         [24] 2362 	lcall	__gptrget
      000A28 FC               [12] 2363 	mov	r4,a
      000A29 60 10            [24] 2364 	jz	00159$
      000A2B 7B 00            [12] 2365 	mov	r3,#0x00
      000A2D 8C 82            [24] 2366 	mov	dpl,r4
      000A2F 8B 83            [24] 2367 	mov	dph,r3
      000A31 12r00r00         [24] 2368 	lcall	_putchar
      000A34 0D               [12] 2369 	inc	r5
                                   2370 ;	life.c:229: printstr("DONE\r\n");
      000A35 BD 00 E7         [24] 2371 	cjne	r5,#0x00,00185$
      000A38 0E               [12] 2372 	inc	r6
      000A39 80 E4            [24] 2373 	sjmp	00185$
      000A3B                       2374 00159$:
                                   2375 ;	life.c:230: (void)getchar();
      000A3B 12r00r05         [24] 2376 	lcall	_getchar
                                   2377 ;	life.c:231: break;
      000A3E                       2378 00117$:
                                   2379 ;	life.c:235: if (i1) {
      000A3E 90r00r01         [24] 2380 	mov	dptr,#_i1
      000A41 E0               [24] 2381 	movx	a,@dptr
      000A42 60 25            [24] 2382 	jz	00195$
                                   2383 ;	life.c:236: printstr("BREAK\r\n");
      000A44 7Dr43            [12] 2384 	mov	r5,#___str_7
      000A46 7Es00            [12] 2385 	mov	r6,#(___str_7 >> 8)
      000A48 7F 80            [12] 2386 	mov	r7,#0x80
                                   2387 ;	life.c:48: return;
      000A4A                       2388 00192$:
                                   2389 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A4A 8D 82            [24] 2390 	mov	dpl,r5
      000A4C 8E 83            [24] 2391 	mov	dph,r6
      000A4E 8F F0            [24] 2392 	mov	b,r7
      000A50 12r00r00         [24] 2393 	lcall	__gptrget
      000A53 FC               [12] 2394 	mov	r4,a
      000A54 60 10            [24] 2395 	jz	00161$
      000A56 7B 00            [12] 2396 	mov	r3,#0x00
      000A58 8C 82            [24] 2397 	mov	dpl,r4
      000A5A 8B 83            [24] 2398 	mov	dph,r3
      000A5C 12r00r00         [24] 2399 	lcall	_putchar
      000A5F 0D               [12] 2400 	inc	r5
                                   2401 ;	life.c:236: printstr("BREAK\r\n");
      000A60 BD 00 E7         [24] 2402 	cjne	r5,#0x00,00192$
      000A63 0E               [12] 2403 	inc	r6
      000A64 80 E4            [24] 2404 	sjmp	00192$
      000A66                       2405 00161$:
                                   2406 ;	life.c:237: (void)getchar();
      000A66 12r00r05         [24] 2407 	lcall	_getchar
      000A69                       2408 00195$:
                                   2409 ;	life.c:203: for (i0 = 0; !i0; ) {
      000A69 90r00r00         [24] 2410 	mov	dptr,#_i0
      000A6C E0               [24] 2411 	movx	a,@dptr
      000A6D 70 03            [24] 2412 	jnz	00412$
      000A6F 02r02rB6         [24] 2413 	ljmp	00194$
      000A72                       2414 00412$:
                                   2415 ;	life.c:241: EA = 0;
                                   2416 ;	assignBit
      000A72 C2 AF            [12] 2417 	clr	_EA
                                   2418 ;	life.c:243: printstr("TERM\r\n");
      000A74 7Dr4B            [12] 2419 	mov	r5,#___str_8
      000A76 7Es00            [12] 2420 	mov	r6,#(___str_8 >> 8)
      000A78 7F 80            [12] 2421 	mov	r7,#0x80
                                   2422 ;	life.c:48: return;
      000A7A                       2423 00197$:
                                   2424 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A7A 8D 82            [24] 2425 	mov	dpl,r5
      000A7C 8E 83            [24] 2426 	mov	dph,r6
      000A7E 8F F0            [24] 2427 	mov	b,r7
      000A80 12r00r00         [24] 2428 	lcall	__gptrget
      000A83 FC               [12] 2429 	mov	r4,a
      000A84 60 10            [24] 2430 	jz	00163$
      000A86 7B 00            [12] 2431 	mov	r3,#0x00
      000A88 8C 82            [24] 2432 	mov	dpl,r4
      000A8A 8B 83            [24] 2433 	mov	dph,r3
      000A8C 12r00r00         [24] 2434 	lcall	_putchar
      000A8F 0D               [12] 2435 	inc	r5
                                   2436 ;	life.c:243: printstr("TERM\r\n");
      000A90 BD 00 E7         [24] 2437 	cjne	r5,#0x00,00197$
      000A93 0E               [12] 2438 	inc	r6
      000A94 80 E4            [24] 2439 	sjmp	00197$
      000A96                       2440 00163$:
                                   2441 ;	life.c:244: (void)getchar();
      000A96 12r00r05         [24] 2442 	lcall	_getchar
                                   2443 ;	life.c:248: __endasm;
      000A99 02 00 00         [24] 2444 	ljmp	0
                                   2445 ;	life.c:249: }
      000A9C 85*00 81         [24] 2446 	mov	sp,_bp
      000A9F D0*00            [24] 2447 	pop	_bp
      000AA1 22               [24] 2448 	ret
                                   2449 	.area CSEG    (CODE)
                                   2450 	.area CONST   (CODE)
      000000                       2451 _digits:
      000000 30                    2452 	.db #0x30	; 48	'0'
      000001 31                    2453 	.db #0x31	; 49	'1'
      000002 32                    2454 	.db #0x32	; 50	'2'
      000003 33                    2455 	.db #0x33	; 51	'3'
      000004 34                    2456 	.db #0x34	; 52	'4'
      000005 35                    2457 	.db #0x35	; 53	'5'
      000006 36                    2458 	.db #0x36	; 54	'6'
      000007 37                    2459 	.db #0x37	; 55	'7'
      000008 38                    2460 	.db #0x38	; 56	'8'
      000009 39                    2461 	.db #0x39	; 57	'9'
      00000A 61                    2462 	.db #0x61	; 97	'a'
      00000B 62                    2463 	.db #0x62	; 98	'b'
      00000C 63                    2464 	.db #0x63	; 99	'c'
      00000D 64                    2465 	.db #0x64	; 100	'd'
      00000E 65                    2466 	.db #0x65	; 101	'e'
      00000F 66                    2467 	.db #0x66	; 102	'f'
                                   2468 	.area CONST   (CODE)
      000010                       2469 ___str_0:
      000010 1B                    2470 	.db 0x1b
      000011 5B 32 4A              2471 	.ascii "[2J"
      000014 1B                    2472 	.db 0x1b
      000015 5B 6D                 2473 	.ascii "[m"
      000017 00                    2474 	.db 0x00
                                   2475 	.area CSEG    (CODE)
                                   2476 	.area CONST   (CODE)
      000018                       2477 ___str_1:
      000018 0D                    2478 	.db 0x0d
      000019 0A                    2479 	.db 0x0a
      00001A 00                    2480 	.db 0x00
                                   2481 	.area CSEG    (CODE)
                                   2482 	.area CONST   (CODE)
      00001B                       2483 ___str_2:
      00001B 4C 4F 41 44 20 3C     2484 	.ascii "LOAD <"
      000021 00                    2485 	.db 0x00
                                   2486 	.area CSEG    (CODE)
                                   2487 	.area CONST   (CODE)
      000022                       2488 ___str_3:
      000022 3E                    2489 	.ascii ">"
      000023 0D                    2490 	.db 0x0d
      000024 0A                    2491 	.db 0x0a
      000025 00                    2492 	.db 0x00
                                   2493 	.area CSEG    (CODE)
      000AA2                       2494 _busy:
      000AA2 5C                    2495 	.db #0x5c	; 92
      000AA3 7C                    2496 	.db #0x7c	; 124
      000AA4 2F                    2497 	.db #0x2f	; 47
      000AA5 2D                    2498 	.db #0x2d	; 45
                                   2499 	.area CONST   (CODE)
      000026                       2500 ___str_4:
      000026 1B                    2501 	.db 0x1b
      000027 5B 32 4A              2502 	.ascii "[2J"
      00002A 1B                    2503 	.db 0x1b
      00002B 5B 6D 49 4E 49 54     2504 	.ascii "[mINIT"
      000031 0D                    2505 	.db 0x0d
      000032 0A                    2506 	.db 0x0a
      000033 00                    2507 	.db 0x00
                                   2508 	.area CSEG    (CODE)
                                   2509 	.area CONST   (CODE)
      000034                       2510 ___str_5:
      000034 52 45 41 44 59        2511 	.ascii "READY"
      000039 0D                    2512 	.db 0x0d
      00003A 0A                    2513 	.db 0x0a
      00003B 00                    2514 	.db 0x00
                                   2515 	.area CSEG    (CODE)
                                   2516 	.area CONST   (CODE)
      00003C                       2517 ___str_6:
      00003C 44 4F 4E 45           2518 	.ascii "DONE"
      000040 0D                    2519 	.db 0x0d
      000041 0A                    2520 	.db 0x0a
      000042 00                    2521 	.db 0x00
                                   2522 	.area CSEG    (CODE)
                                   2523 	.area CONST   (CODE)
      000043                       2524 ___str_7:
      000043 42 52 45 41 4B        2525 	.ascii "BREAK"
      000048 0D                    2526 	.db 0x0d
      000049 0A                    2527 	.db 0x0a
      00004A 00                    2528 	.db 0x00
                                   2529 	.area CSEG    (CODE)
                                   2530 	.area CONST   (CODE)
      00004B                       2531 ___str_8:
      00004B 54 45 52 4D           2532 	.ascii "TERM"
      00004F 0D                    2533 	.db 0x0d
      000050 0A                    2534 	.db 0x0a
      000051 00                    2535 	.db 0x00
                                   2536 	.area CSEG    (CODE)
                                   2537 	.area XINIT   (CODE)
                                   2538 	.area CABS    (ABS,CODE)
