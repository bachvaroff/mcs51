                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar_poll
                                     16 	.globl _getchar
                                     17 	.globl _putchar
                                     18 	.globl _toupper
                                     19 	.globl ___memcpy
                                     20 	.globl _memset
                                     21 	.globl _srand
                                     22 	.globl _rand
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000C8   169 _T2CON	=	0x00c8
                           0000C9   170 _T2MOD	=	0x00c9
                           0000CA   171 _RCAP2L	=	0x00ca
                           0000CB   172 _RCAP2H	=	0x00cb
                           0000CC   173 _TL2	=	0x00cc
                           0000CD   174 _TH2	=	0x00cd
                           0000D0   175 _PSW	=	0x00d0
                           0000E0   176 _ACC	=	0x00e0
                           0000E0   177 _A	=	0x00e0
                           0000F0   178 _B	=	0x00f0
                                    179 ;--------------------------------------------------------
                                    180 ; special function bits
                                    181 ;--------------------------------------------------------
                                    182 	.area RSEG    (ABS,DATA)
      000000                        183 	.org 0x0000
                           000080   184 _P0_0	=	0x0080
                           000081   185 _P0_1	=	0x0081
                           000082   186 _P0_2	=	0x0082
                           000083   187 _P0_3	=	0x0083
                           000084   188 _P0_4	=	0x0084
                           000085   189 _P0_5	=	0x0085
                           000086   190 _P0_6	=	0x0086
                           000087   191 _P0_7	=	0x0087
                           000088   192 _IT0	=	0x0088
                           000089   193 _IE0	=	0x0089
                           00008A   194 _IT1	=	0x008a
                           00008B   195 _IE1	=	0x008b
                           00008C   196 _TR0	=	0x008c
                           00008D   197 _TF0	=	0x008d
                           00008E   198 _TR1	=	0x008e
                           00008F   199 _TF1	=	0x008f
                           000090   200 _P1_0	=	0x0090
                           000091   201 _P1_1	=	0x0091
                           000092   202 _P1_2	=	0x0092
                           000093   203 _P1_3	=	0x0093
                           000094   204 _P1_4	=	0x0094
                           000095   205 _P1_5	=	0x0095
                           000096   206 _P1_6	=	0x0096
                           000097   207 _P1_7	=	0x0097
                           000090   208 _T2	=	0x0090
                           000091   209 _T2EX	=	0x0091
                           000098   210 _RI	=	0x0098
                           000099   211 _TI	=	0x0099
                           00009A   212 _RB8	=	0x009a
                           00009B   213 _TB8	=	0x009b
                           00009C   214 _REN	=	0x009c
                           00009D   215 _SM2	=	0x009d
                           00009E   216 _SM1	=	0x009e
                           00009F   217 _SM0	=	0x009f
                           0000A0   218 _P2_0	=	0x00a0
                           0000A1   219 _P2_1	=	0x00a1
                           0000A2   220 _P2_2	=	0x00a2
                           0000A3   221 _P2_3	=	0x00a3
                           0000A4   222 _P2_4	=	0x00a4
                           0000A5   223 _P2_5	=	0x00a5
                           0000A6   224 _P2_6	=	0x00a6
                           0000A7   225 _P2_7	=	0x00a7
                           0000A8   226 _EX0	=	0x00a8
                           0000A9   227 _ET0	=	0x00a9
                           0000AA   228 _EX1	=	0x00aa
                           0000AB   229 _ET1	=	0x00ab
                           0000AC   230 _ES	=	0x00ac
                           0000AD   231 _ET2	=	0x00ad
                           0000AF   232 _EA	=	0x00af
                           0000B0   233 _P3_0	=	0x00b0
                           0000B1   234 _P3_1	=	0x00b1
                           0000B2   235 _P3_2	=	0x00b2
                           0000B3   236 _P3_3	=	0x00b3
                           0000B4   237 _P3_4	=	0x00b4
                           0000B5   238 _P3_5	=	0x00b5
                           0000B6   239 _P3_6	=	0x00b6
                           0000B7   240 _P3_7	=	0x00b7
                           0000B0   241 _RXD	=	0x00b0
                           0000B1   242 _TXD	=	0x00b1
                           0000B2   243 _INT0	=	0x00b2
                           0000B3   244 _INT1	=	0x00b3
                           0000B4   245 _T0	=	0x00b4
                           0000B5   246 _T1	=	0x00b5
                           0000B6   247 _WR	=	0x00b6
                           0000B7   248 _RD	=	0x00b7
                           0000B8   249 _PX0	=	0x00b8
                           0000B9   250 _PT0	=	0x00b9
                           0000BA   251 _PX1	=	0x00ba
                           0000BB   252 _PT1	=	0x00bb
                           0000BC   253 _PS	=	0x00bc
                           0000BD   254 _PT2	=	0x00bd
                           0000C8   255 _T2CON_0	=	0x00c8
                           0000C9   256 _T2CON_1	=	0x00c9
                           0000CA   257 _T2CON_2	=	0x00ca
                           0000CB   258 _T2CON_3	=	0x00cb
                           0000CC   259 _T2CON_4	=	0x00cc
                           0000CD   260 _T2CON_5	=	0x00cd
                           0000CE   261 _T2CON_6	=	0x00ce
                           0000CF   262 _T2CON_7	=	0x00cf
                           0000C8   263 _CP_RL2	=	0x00c8
                           0000C9   264 _C_T2	=	0x00c9
                           0000CA   265 _TR2	=	0x00ca
                           0000CB   266 _EXEN2	=	0x00cb
                           0000CC   267 _TCLK	=	0x00cc
                           0000CD   268 _RCLK	=	0x00cd
                           0000CE   269 _EXF2	=	0x00ce
                           0000CF   270 _TF2	=	0x00cf
                           0000D0   271 _P	=	0x00d0
                           0000D1   272 _FL	=	0x00d1
                           0000D2   273 _OV	=	0x00d2
                           0000D3   274 _RS0	=	0x00d3
                           0000D4   275 _RS1	=	0x00d4
                           0000D5   276 _F0	=	0x00d5
                           0000D6   277 _AC	=	0x00d6
                           0000D7   278 _CY	=	0x00d7
                                    279 ;--------------------------------------------------------
                                    280 ; overlayable register banks
                                    281 ;--------------------------------------------------------
                                    282 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        283 	.ds 8
                                    284 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable bit register bank
                                    288 ;--------------------------------------------------------
                                    289 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        290 bits:
      000000                        291 	.ds 1
                           008000   292 	b0 = bits[0]
                           008100   293 	b1 = bits[1]
                           008200   294 	b2 = bits[2]
                           008300   295 	b3 = bits[3]
                           008400   296 	b4 = bits[4]
                           008500   297 	b5 = bits[5]
                           008600   298 	b6 = bits[6]
                           008700   299 	b7 = bits[7]
                                    300 ;--------------------------------------------------------
                                    301 ; internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area DSEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; overlayable items in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 ;--------------------------------------------------------
                                    308 ; Stack segment in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 	.area	SSEG
      000000                        311 __start__stack:
      000000                        312 	.ds	1
                                    313 
                                    314 ;--------------------------------------------------------
                                    315 ; indirectly addressable internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area ISEG    (DATA)
      000000                        318 _digits:
      000000                        319 	.ds 16
      000010                        320 _i0:
      000010                        321 	.ds 1
      000011                        322 _i1:
      000011                        323 	.ds 1
      000012                        324 _OE76:
      000012                        325 	.ds 1
      000013                        326 _x:
      000013                        327 	.ds 2
      000015                        328 _y:
      000015                        329 	.ds 2
      000017                        330 _j:
      000017                        331 	.ds 2
      000019                        332 _c:
      000019                        333 	.ds 2
      00001B                        334 _n:
      00001B                        335 	.ds 1
      00001C                        336 _fixed:
      00001C                        337 	.ds 1
      00001D                        338 _cycle2:
      00001D                        339 	.ds 1
      00001E                        340 _x1:
      00001E                        341 	.ds 2
      000020                        342 _y1:
      000020                        343 	.ds 2
      000022                        344 _generation:
      000022                        345 	.ds 4
                                    346 ;--------------------------------------------------------
                                    347 ; absolute internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area IABS    (ABS,DATA)
                                    350 	.area IABS    (ABS,DATA)
                                    351 ;--------------------------------------------------------
                                    352 ; bit data
                                    353 ;--------------------------------------------------------
                                    354 	.area BSEG    (BIT)
                                    355 ;--------------------------------------------------------
                                    356 ; paged external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area PSEG    (PAG,XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XSEG    (XDATA)
                           008000   363 _RND	=	0x8000
                           00F006   364 _OEreg	=	0xf006
      000000                        365 _iu:
      000000                        366 	.ds 9216
      002400                        367 _pu:
      002400                        368 	.ds 9216
      004800                        369 _u:
      004800                        370 	.ds 9216
      006C00                        371 _nu:
      006C00                        372 	.ds 9216
                                    373 ;--------------------------------------------------------
                                    374 ; absolute external ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XABS    (ABS,XDATA)
                                    377 ;--------------------------------------------------------
                                    378 ; external initialized ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area XISEG   (XDATA)
                                    381 	.area HOME    (CODE)
                                    382 	.area GSINIT0 (CODE)
                                    383 	.area GSINIT1 (CODE)
                                    384 	.area GSINIT2 (CODE)
                                    385 	.area GSINIT3 (CODE)
                                    386 	.area GSINIT4 (CODE)
                                    387 	.area GSINIT5 (CODE)
                                    388 	.area GSINIT  (CODE)
                                    389 	.area GSFINAL (CODE)
                                    390 	.area CSEG    (CODE)
                                    391 ;--------------------------------------------------------
                                    392 ; interrupt vector 
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
      000000                        395 __interrupt_vect:
      000000 02r00r00         [24]  396 	ljmp	__sdcc_gsinit_startup
      000003 02r00r31         [24]  397 	ljmp	_int0
      000006                        398 	.ds	5
      00000B 32               [24]  399 	reti
      00000C                        400 	.ds	7
      000013 02r00r3D         [24]  401 	ljmp	_int1
                                    402 ;--------------------------------------------------------
                                    403 ; global & static initialisations
                                    404 ;--------------------------------------------------------
                                    405 	.area HOME    (CODE)
                                    406 	.area GSINIT  (CODE)
                                    407 	.area GSFINAL (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.globl __sdcc_gsinit_startup
                                    410 	.globl __sdcc_program_startup
                                    411 	.globl __start__stack
                                    412 	.globl __mcs51_genXINIT
                                    413 	.globl __mcs51_genXRAMCLEAR
                                    414 	.globl __mcs51_genRAMCLEAR
                                    415 ;	life.c:50: __idata static const char digits[16] = {
      000000 78r00            [12]  416 	mov	r0,#_digits
      000002 76 30            [12]  417 	mov	@r0,#0x30
      000004 78r01            [12]  418 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  419 	mov	@r0,#0x31
      000008 78r02            [12]  420 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  421 	mov	@r0,#0x32
      00000C 78r03            [12]  422 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  423 	mov	@r0,#0x33
      000010 78r04            [12]  424 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  425 	mov	@r0,#0x34
      000014 78r05            [12]  426 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  427 	mov	@r0,#0x35
      000018 78r06            [12]  428 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  429 	mov	@r0,#0x36
      00001C 78r07            [12]  430 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  431 	mov	@r0,#0x37
      000020 78r08            [12]  432 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  433 	mov	@r0,#0x38
      000024 78r09            [12]  434 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  435 	mov	@r0,#0x39
      000028 78r0A            [12]  436 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  437 	mov	@r0,#0x41
      00002C 78r0B            [12]  438 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  439 	mov	@r0,#0x42
      000030 78r0C            [12]  440 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  441 	mov	@r0,#0x43
      000034 78r0D            [12]  442 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  443 	mov	@r0,#0x44
      000038 78r0E            [12]  444 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  445 	mov	@r0,#0x45
      00003C 78r0F            [12]  446 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  447 	mov	@r0,#0x46
                                    448 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  449 	ljmp	__sdcc_program_startup
                                    450 ;--------------------------------------------------------
                                    451 ; Home
                                    452 ;--------------------------------------------------------
                                    453 	.area HOME    (CODE)
                                    454 	.area HOME    (CODE)
      000016                        455 __sdcc_program_startup:
      000016 02r02r78         [24]  456 	ljmp	_main
                                    457 ;	return from main will return to caller
                                    458 ;--------------------------------------------------------
                                    459 ; code
                                    460 ;--------------------------------------------------------
                                    461 	.area CSEG    (CODE)
                                    462 ;------------------------------------------------------------
                                    463 ;Allocation info for local variables in function 'putchar'
                                    464 ;------------------------------------------------------------
                                    465 ;c                         Allocated to registers 
                                    466 ;------------------------------------------------------------
                                    467 ;	life.c:8: int putchar(int c) __naked {
                                    468 ;	-----------------------------------------
                                    469 ;	 function putchar
                                    470 ;	-----------------------------------------
      000000                        471 _putchar:
                                    472 ;	naked function: no prologue.
                                    473 ;	life.c:16: __endasm;
      000000 C0 E0            [24]  474 	push	acc
      000002 E5 82            [12]  475 	mov	a, dpl
      000004 12 00 3C         [24]  476 	lcall	0x003c
      000007 D0 E0            [24]  477 	pop	acc
      000009 22               [24]  478 	ret
                                    479 ;	life.c:17: }
                                    480 ;	naked function: no epilogue.
                                    481 ;------------------------------------------------------------
                                    482 ;Allocation info for local variables in function 'getchar'
                                    483 ;------------------------------------------------------------
                                    484 ;	life.c:19: int getchar(void) __naked {
                                    485 ;	-----------------------------------------
                                    486 ;	 function getchar
                                    487 ;	-----------------------------------------
      00000A                        488 _getchar:
                                    489 ;	naked function: no prologue.
                                    490 ;	life.c:27: __endasm;
      00000A C0 E0            [24]  491 	push	acc
      00000C 12 00 36         [24]  492 	lcall	0x0036
      00000F F5 82            [12]  493 	mov	dpl, a
      000011 75 83 00         [24]  494 	mov	dph, #0
      000014 D0 E0            [24]  495 	pop	acc
      000016 22               [24]  496 	ret
                                    497 ;	life.c:28: }
                                    498 ;	naked function: no epilogue.
                                    499 ;------------------------------------------------------------
                                    500 ;Allocation info for local variables in function 'getchar_poll'
                                    501 ;------------------------------------------------------------
                                    502 ;	life.c:30: int getchar_poll(void) __naked {
                                    503 ;	-----------------------------------------
                                    504 ;	 function getchar_poll
                                    505 ;	-----------------------------------------
      000017                        506 _getchar_poll:
                                    507 ;	naked function: no prologue.
                                    508 ;	life.c:45: __endasm;
      000017 C0 E0            [24]  509 	push	acc
      000019 C0 F0            [24]  510 	push	b
      00001B 74 FF            [12]  511 	mov	a, #0xff
      00001D F5 F0            [12]  512 	mov	b, a
      00001F 12 00 39         [24]  513 	lcall	0x0039
      000022 40 03            [24]  514 	jc	nochar
      000024 75 F0 00         [24]  515 	mov	b, #0x00
      000027                        516 	nochar:
      000027 F5 82            [12]  517 	mov	dpl, a
      000029 85 F0 83         [24]  518 	mov	dph, b
      00002C D0 F0            [24]  519 	pop	b
      00002E D0 E0            [24]  520 	pop	acc
      000030 22               [24]  521 	ret
                                    522 ;	life.c:46: }
                                    523 ;	naked function: no epilogue.
                                    524 ;------------------------------------------------------------
                                    525 ;Allocation info for local variables in function 'int0'
                                    526 ;------------------------------------------------------------
                                    527 ;	life.c:79: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    528 ;	-----------------------------------------
                                    529 ;	 function int0
                                    530 ;	-----------------------------------------
      000031                        531 _int0:
                           00000F   532 	ar7 = 0x0f
                           00000E   533 	ar6 = 0x0e
                           00000D   534 	ar5 = 0x0d
                           00000C   535 	ar4 = 0x0c
                           00000B   536 	ar3 = 0x0b
                           00000A   537 	ar2 = 0x0a
                           000009   538 	ar1 = 0x09
                           000008   539 	ar0 = 0x08
      000031 C0 D0            [24]  540 	push	psw
      000033 75 D0 08         [24]  541 	mov	psw,#0x08
                                    542 ;	life.c:80: i0 = 1;
      000036 78r10            [12]  543 	mov	r0,#_i0
      000038 76 01            [12]  544 	mov	@r0,#0x01
                                    545 ;	life.c:81: }
      00003A D0 D0            [24]  546 	pop	psw
      00003C 32               [24]  547 	reti
                                    548 ;	eliminated unneeded push/pop dpl
                                    549 ;	eliminated unneeded push/pop dph
                                    550 ;	eliminated unneeded push/pop b
                                    551 ;	eliminated unneeded push/pop acc
                                    552 ;------------------------------------------------------------
                                    553 ;Allocation info for local variables in function 'int1'
                                    554 ;------------------------------------------------------------
                                    555 ;	life.c:83: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    556 ;	-----------------------------------------
                                    557 ;	 function int1
                                    558 ;	-----------------------------------------
      00003D                        559 _int1:
      00003D C0 D0            [24]  560 	push	psw
      00003F 75 D0 08         [24]  561 	mov	psw,#0x08
                                    562 ;	life.c:84: i1 = 1;
      000042 78r11            [12]  563 	mov	r0,#_i1
      000044 76 01            [12]  564 	mov	@r0,#0x01
                                    565 ;	life.c:85: }
      000046 D0 D0            [24]  566 	pop	psw
      000048 32               [24]  567 	reti
                                    568 ;	eliminated unneeded push/pop dpl
                                    569 ;	eliminated unneeded push/pop dph
                                    570 ;	eliminated unneeded push/pop b
                                    571 ;	eliminated unneeded push/pop acc
                                    572 ;------------------------------------------------------------
                                    573 ;Allocation info for local variables in function 'flashOE'
                                    574 ;------------------------------------------------------------
                                    575 ;	life.c:95: static void flashOE(void) {
                                    576 ;	-----------------------------------------
                                    577 ;	 function flashOE
                                    578 ;	-----------------------------------------
      000049                        579 _flashOE:
                           000007   580 	ar7 = 0x07
                           000006   581 	ar6 = 0x06
                           000005   582 	ar5 = 0x05
                           000004   583 	ar4 = 0x04
                           000003   584 	ar3 = 0x03
                           000002   585 	ar2 = 0x02
                           000001   586 	ar1 = 0x01
                           000000   587 	ar0 = 0x00
                                    588 ;	life.c:96: P1_7 = 0;
                                    589 ;	assignBit
      000049 C2 97            [12]  590 	clr	_P1_7
                                    591 ;	life.c:101: __endasm;
      00004B 00               [12]  592 	nop
      00004C 00               [12]  593 	nop
      00004D 00               [12]  594 	nop
                                    595 ;	life.c:102: OEreg = OE76;
      00004E 78r12            [12]  596 	mov	r0,#_OE76
      000050 90 F0 06         [24]  597 	mov	dptr,#_OEreg
      000053 E6               [12]  598 	mov	a,@r0
      000054 F0               [24]  599 	movx	@dptr,a
                                    600 ;	life.c:103: P1_7 = 1;
                                    601 ;	assignBit
      000055 D2 97            [12]  602 	setb	_P1_7
                                    603 ;	life.c:108: __endasm;
      000057 00               [12]  604 	nop
      000058 00               [12]  605 	nop
      000059 00               [12]  606 	nop
                                    607 ;	life.c:110: return;
                                    608 ;	life.c:111: }
      00005A 22               [24]  609 	ret
                                    610 ;------------------------------------------------------------
                                    611 ;Allocation info for local variables in function 'show'
                                    612 ;------------------------------------------------------------
                                    613 ;hdr                       Allocated to registers r7 
                                    614 ;__1310720005              Allocated to registers 
                                    615 ;s                         Allocated to registers r4 r5 r6 
                                    616 ;__1966080007              Allocated to registers 
                                    617 ;s                         Allocated to registers r5 r6 r7 
                                    618 ;__1310720001              Allocated to registers r6 r7 
                                    619 ;a                         Allocated to registers 
                                    620 ;__1310720003              Allocated to registers r6 r7 
                                    621 ;a                         Allocated to registers 
                                    622 ;__1966080010              Allocated to registers 
                                    623 ;s                         Allocated to registers r5 r6 r7 
                                    624 ;__2621440013              Allocated to registers 
                                    625 ;s                         Allocated to registers r5 r6 r7 
                                    626 ;__1310720015              Allocated to registers 
                                    627 ;s                         Allocated to registers r5 r6 r7 
                                    628 ;------------------------------------------------------------
                                    629 ;	life.c:147: void show(char hdr) {
                                    630 ;	-----------------------------------------
                                    631 ;	 function show
                                    632 ;	-----------------------------------------
      00005B                        633 _show:
      00005B AF 82            [24]  634 	mov	r7,dpl
                                    635 ;	life.c:148: printstr("\033[?25l");
      00005D 7Cr00            [12]  636 	mov	r4,#___str_0
      00005F 7Ds00            [12]  637 	mov	r5,#(___str_0 >> 8)
      000061 7E 80            [12]  638 	mov	r6,#0x80
                                    639 ;	life.c:74: return;
      000063                        640 00125$:
                                    641 ;	life.c:72: for (; *s; s++) putchar(*s);
      000063 8C 82            [24]  642 	mov	dpl,r4
      000065 8D 83            [24]  643 	mov	dph,r5
      000067 8E F0            [24]  644 	mov	b,r6
      000069 12r00r00         [24]  645 	lcall	__gptrget
      00006C FB               [12]  646 	mov	r3,a
      00006D 60 10            [24]  647 	jz	00109$
      00006F 7A 00            [12]  648 	mov	r2,#0x00
      000071 8B 82            [24]  649 	mov	dpl,r3
      000073 8A 83            [24]  650 	mov	dph,r2
      000075 12r00r00         [24]  651 	lcall	_putchar
      000078 0C               [12]  652 	inc	r4
                                    653 ;	life.c:148: printstr("\033[?25l");
      000079 BC 00 E7         [24]  654 	cjne	r4,#0x00,00125$
      00007C 0D               [12]  655 	inc	r5
      00007D 80 E4            [24]  656 	sjmp	00125$
      00007F                        657 00109$:
                                    658 ;	life.c:150: if (hdr) {
      00007F EF               [12]  659 	mov	a,r7
      000080 70 03            [24]  660 	jnz	00220$
      000082 02r01rBB         [24]  661 	ljmp	00102$
      000085                        662 00220$:
                                    663 ;	life.c:151: printstr("\033[2JGEN ");
      000085 7Dr07            [12]  664 	mov	r5,#___str_1
      000087 7Es00            [12]  665 	mov	r6,#(___str_1 >> 8)
      000089 7F 80            [12]  666 	mov	r7,#0x80
                                    667 ;	life.c:74: return;
      00008B                        668 00128$:
                                    669 ;	life.c:72: for (; *s; s++) putchar(*s);
      00008B 8D 82            [24]  670 	mov	dpl,r5
      00008D 8E 83            [24]  671 	mov	dph,r6
      00008F 8F F0            [24]  672 	mov	b,r7
      000091 12r00r00         [24]  673 	lcall	__gptrget
      000094 FC               [12]  674 	mov	r4,a
      000095 60 10            [24]  675 	jz	00111$
      000097 7B 00            [12]  676 	mov	r3,#0x00
      000099 8C 82            [24]  677 	mov	dpl,r4
      00009B 8B 83            [24]  678 	mov	dph,r3
      00009D 12r00r00         [24]  679 	lcall	_putchar
      0000A0 0D               [12]  680 	inc	r5
                                    681 ;	life.c:151: printstr("\033[2JGEN ");
      0000A1 BD 00 E7         [24]  682 	cjne	r5,#0x00,00128$
      0000A4 0E               [12]  683 	inc	r6
      0000A5 80 E4            [24]  684 	sjmp	00128$
      0000A7                        685 00111$:
                                    686 ;	life.c:141: print16x(generation[1]);
      0000A7 78r24            [12]  687 	mov	r0,#(_generation + 0x0002)
      0000A9 86 06            [24]  688 	mov	ar6,@r0
      0000AB 08               [12]  689 	inc	r0
                                    690 ;	life.c:63: putchar(digits[(a >> 12) & 0xf]);
      0000AC E6               [12]  691 	mov	a,@r0
      0000AD FF               [12]  692 	mov	r7,a
      0000AE C4               [12]  693 	swap	a
      0000AF 54 0F            [12]  694 	anl	a,#0x0f
      0000B1 FC               [12]  695 	mov	r4,a
      0000B2 53 04 0F         [24]  696 	anl	ar4,#0x0f
      0000B5 EC               [12]  697 	mov	a,r4
      0000B6 24r00            [12]  698 	add	a,#_digits
      0000B8 F9               [12]  699 	mov	r1,a
      0000B9 87 05            [24]  700 	mov	ar5,@r1
      0000BB 7C 00            [12]  701 	mov	r4,#0x00
      0000BD 8D 82            [24]  702 	mov	dpl,r5
      0000BF 8C 83            [24]  703 	mov	dph,r4
      0000C1 12r00r00         [24]  704 	lcall	_putchar
                                    705 ;	life.c:64: putchar(digits[(a >> 8) & 0xf]);
      0000C4 8F 05            [24]  706 	mov	ar5,r7
      0000C6 53 05 0F         [24]  707 	anl	ar5,#0x0f
      0000C9 ED               [12]  708 	mov	a,r5
      0000CA 24r00            [12]  709 	add	a,#_digits
      0000CC F9               [12]  710 	mov	r1,a
      0000CD 87 05            [24]  711 	mov	ar5,@r1
      0000CF 7C 00            [12]  712 	mov	r4,#0x00
      0000D1 8D 82            [24]  713 	mov	dpl,r5
      0000D3 8C 83            [24]  714 	mov	dph,r4
      0000D5 12r00r00         [24]  715 	lcall	_putchar
                                    716 ;	life.c:65: putchar(digits[(a >> 4) & 0xf]);
      0000D8 8E 04            [24]  717 	mov	ar4,r6
      0000DA EF               [12]  718 	mov	a,r7
      0000DB C4               [12]  719 	swap	a
      0000DC CC               [12]  720 	xch	a,r4
      0000DD C4               [12]  721 	swap	a
      0000DE 54 0F            [12]  722 	anl	a,#0x0f
      0000E0 6C               [12]  723 	xrl	a,r4
      0000E1 CC               [12]  724 	xch	a,r4
      0000E2 54 0F            [12]  725 	anl	a,#0x0f
      0000E4 CC               [12]  726 	xch	a,r4
      0000E5 6C               [12]  727 	xrl	a,r4
      0000E6 CC               [12]  728 	xch	a,r4
      0000E7 53 04 0F         [24]  729 	anl	ar4,#0x0f
      0000EA EC               [12]  730 	mov	a,r4
      0000EB 24r00            [12]  731 	add	a,#_digits
      0000ED F9               [12]  732 	mov	r1,a
      0000EE 87 05            [24]  733 	mov	ar5,@r1
      0000F0 7C 00            [12]  734 	mov	r4,#0x00
      0000F2 8D 82            [24]  735 	mov	dpl,r5
      0000F4 8C 83            [24]  736 	mov	dph,r4
      0000F6 12r00r00         [24]  737 	lcall	_putchar
                                    738 ;	life.c:66: putchar(digits[a & 0xf]);
      0000F9 53 06 0F         [24]  739 	anl	ar6,#0x0f
      0000FC EE               [12]  740 	mov	a,r6
      0000FD 24r00            [12]  741 	add	a,#_digits
      0000FF F9               [12]  742 	mov	r1,a
      000100 87 07            [24]  743 	mov	ar7,@r1
      000102 7E 00            [12]  744 	mov	r6,#0x00
      000104 8F 82            [24]  745 	mov	dpl,r7
      000106 8E 83            [24]  746 	mov	dph,r6
      000108 12r00r00         [24]  747 	lcall	_putchar
                                    748 ;	life.c:142: print16x(generation[0]);
      00010B 78r22            [12]  749 	mov	r0,#_generation
      00010D 86 06            [24]  750 	mov	ar6,@r0
      00010F 08               [12]  751 	inc	r0
                                    752 ;	life.c:63: putchar(digits[(a >> 12) & 0xf]);
      000110 E6               [12]  753 	mov	a,@r0
      000111 FF               [12]  754 	mov	r7,a
      000112 C4               [12]  755 	swap	a
      000113 54 0F            [12]  756 	anl	a,#0x0f
      000115 FC               [12]  757 	mov	r4,a
      000116 53 04 0F         [24]  758 	anl	ar4,#0x0f
      000119 EC               [12]  759 	mov	a,r4
      00011A 24r00            [12]  760 	add	a,#_digits
      00011C F9               [12]  761 	mov	r1,a
      00011D 87 05            [24]  762 	mov	ar5,@r1
      00011F 7C 00            [12]  763 	mov	r4,#0x00
      000121 8D 82            [24]  764 	mov	dpl,r5
      000123 8C 83            [24]  765 	mov	dph,r4
      000125 12r00r00         [24]  766 	lcall	_putchar
                                    767 ;	life.c:64: putchar(digits[(a >> 8) & 0xf]);
      000128 8F 05            [24]  768 	mov	ar5,r7
      00012A 53 05 0F         [24]  769 	anl	ar5,#0x0f
      00012D ED               [12]  770 	mov	a,r5
      00012E 24r00            [12]  771 	add	a,#_digits
      000130 F9               [12]  772 	mov	r1,a
      000131 87 05            [24]  773 	mov	ar5,@r1
      000133 7C 00            [12]  774 	mov	r4,#0x00
      000135 8D 82            [24]  775 	mov	dpl,r5
      000137 8C 83            [24]  776 	mov	dph,r4
      000139 12r00r00         [24]  777 	lcall	_putchar
                                    778 ;	life.c:65: putchar(digits[(a >> 4) & 0xf]);
      00013C 8E 04            [24]  779 	mov	ar4,r6
      00013E EF               [12]  780 	mov	a,r7
      00013F C4               [12]  781 	swap	a
      000140 CC               [12]  782 	xch	a,r4
      000141 C4               [12]  783 	swap	a
      000142 54 0F            [12]  784 	anl	a,#0x0f
      000144 6C               [12]  785 	xrl	a,r4
      000145 CC               [12]  786 	xch	a,r4
      000146 54 0F            [12]  787 	anl	a,#0x0f
      000148 CC               [12]  788 	xch	a,r4
      000149 6C               [12]  789 	xrl	a,r4
      00014A CC               [12]  790 	xch	a,r4
      00014B 53 04 0F         [24]  791 	anl	ar4,#0x0f
      00014E EC               [12]  792 	mov	a,r4
      00014F 24r00            [12]  793 	add	a,#_digits
      000151 F9               [12]  794 	mov	r1,a
      000152 87 05            [24]  795 	mov	ar5,@r1
      000154 7C 00            [12]  796 	mov	r4,#0x00
      000156 8D 82            [24]  797 	mov	dpl,r5
      000158 8C 83            [24]  798 	mov	dph,r4
      00015A 12r00r00         [24]  799 	lcall	_putchar
                                    800 ;	life.c:66: putchar(digits[a & 0xf]);
      00015D 53 06 0F         [24]  801 	anl	ar6,#0x0f
      000160 EE               [12]  802 	mov	a,r6
      000161 24r00            [12]  803 	add	a,#_digits
      000163 F9               [12]  804 	mov	r1,a
      000164 87 07            [24]  805 	mov	ar7,@r1
      000166 7E 00            [12]  806 	mov	r6,#0x00
      000168 8F 82            [24]  807 	mov	dpl,r7
      00016A 8E 83            [24]  808 	mov	dph,r6
      00016C 12r00r00         [24]  809 	lcall	_putchar
                                    810 ;	life.c:153: printstr("\r\n");
      00016F 7Dr10            [12]  811 	mov	r5,#___str_2
      000171 7Es00            [12]  812 	mov	r6,#(___str_2 >> 8)
      000173 7F 80            [12]  813 	mov	r7,#0x80
                                    814 ;	life.c:74: return;
      000175                        815 00131$:
                                    816 ;	life.c:72: for (; *s; s++) putchar(*s);
      000175 8D 82            [24]  817 	mov	dpl,r5
      000177 8E 83            [24]  818 	mov	dph,r6
      000179 8F F0            [24]  819 	mov	b,r7
      00017B 12r00r00         [24]  820 	lcall	__gptrget
      00017E FC               [12]  821 	mov	r4,a
      00017F 60 10            [24]  822 	jz	00116$
      000181 7B 00            [12]  823 	mov	r3,#0x00
      000183 8C 82            [24]  824 	mov	dpl,r4
      000185 8B 83            [24]  825 	mov	dph,r3
      000187 12r00r00         [24]  826 	lcall	_putchar
      00018A 0D               [12]  827 	inc	r5
                                    828 ;	life.c:153: printstr("\r\n");
      00018B BD 00 E7         [24]  829 	cjne	r5,#0x00,00131$
      00018E 0E               [12]  830 	inc	r6
      00018F 80 E4            [24]  831 	sjmp	00131$
      000191                        832 00116$:
                                    833 ;	life.c:134: generation[0]++;
      000191 78r22            [12]  834 	mov	r0,#_generation
      000193 86 06            [24]  835 	mov	ar6,@r0
      000195 08               [12]  836 	inc	r0
      000196 86 07            [24]  837 	mov	ar7,@r0
      000198 0E               [12]  838 	inc	r6
      000199 BE 00 01         [24]  839 	cjne	r6,#0x00,00225$
      00019C 0F               [12]  840 	inc	r7
      00019D                        841 00225$:
      00019D 78r22            [12]  842 	mov	r0,#_generation
      00019F A6 06            [24]  843 	mov	@r0,ar6
      0001A1 08               [12]  844 	inc	r0
      0001A2 A6 07            [24]  845 	mov	@r0,ar7
                                    846 ;	life.c:135: if (!generation[0]) generation[1]++;
      0001A4 EE               [12]  847 	mov	a,r6
      0001A5 4F               [12]  848 	orl	a,r7
      0001A6 70 13            [24]  849 	jnz	00102$
      0001A8 78r24            [12]  850 	mov	r0,#(_generation + 0x0002)
      0001AA 86 06            [24]  851 	mov	ar6,@r0
      0001AC 08               [12]  852 	inc	r0
      0001AD 86 07            [24]  853 	mov	ar7,@r0
      0001AF 0E               [12]  854 	inc	r6
      0001B0 BE 00 01         [24]  855 	cjne	r6,#0x00,00227$
      0001B3 0F               [12]  856 	inc	r7
      0001B4                        857 00227$:
      0001B4 78r24            [12]  858 	mov	r0,#(_generation + 0x0002)
      0001B6 A6 06            [24]  859 	mov	@r0,ar6
      0001B8 08               [12]  860 	inc	r0
      0001B9 A6 07            [24]  861 	mov	@r0,ar7
                                    862 ;	life.c:154: updategen();
      0001BB                        863 00102$:
                                    864 ;	life.c:157: for (x = 0; x < W; x++) {
      0001BB 78r13            [12]  865 	mov	r0,#_x
      0001BD E4               [12]  866 	clr	a
      0001BE F6               [12]  867 	mov	@r0,a
      0001BF 08               [12]  868 	inc	r0
      0001C0 F6               [12]  869 	mov	@r0,a
      0001C1                        870 00138$:
                                    871 ;	life.c:158: for (y = 0; y < H; y++)
      0001C1 78r15            [12]  872 	mov	r0,#_y
      0001C3 E4               [12]  873 	clr	a
      0001C4 F6               [12]  874 	mov	@r0,a
      0001C5 08               [12]  875 	inc	r0
      0001C6 F6               [12]  876 	mov	@r0,a
      0001C7                        877 00133$:
                                    878 ;	life.c:159: if (u[A2D(W, y, x)]) putchar('1');
      0001C7 78r15            [12]  879 	mov	r0,#_y
      0001C9 E6               [12]  880 	mov	a,@r0
      0001CA C0 E0            [24]  881 	push	acc
      0001CC 08               [12]  882 	inc	r0
      0001CD E6               [12]  883 	mov	a,@r0
      0001CE C0 E0            [24]  884 	push	acc
      0001D0 90 00 30         [24]  885 	mov	dptr,#0x0030
      0001D3 12r00r00         [24]  886 	lcall	__mulint
      0001D6 AE 82            [24]  887 	mov	r6,dpl
      0001D8 AF 83            [24]  888 	mov	r7,dph
      0001DA 15 81            [12]  889 	dec	sp
      0001DC 15 81            [12]  890 	dec	sp
      0001DE 78r13            [12]  891 	mov	r0,#_x
      0001E0 E6               [12]  892 	mov	a,@r0
      0001E1 2E               [12]  893 	add	a,r6
      0001E2 FE               [12]  894 	mov	r6,a
      0001E3 08               [12]  895 	inc	r0
      0001E4 E6               [12]  896 	mov	a,@r0
      0001E5 3F               [12]  897 	addc	a,r7
      0001E6 FF               [12]  898 	mov	r7,a
      0001E7 EE               [12]  899 	mov	a,r6
      0001E8 24r00            [12]  900 	add	a,#_u
      0001EA FE               [12]  901 	mov	r6,a
      0001EB EF               [12]  902 	mov	a,r7
      0001EC 34s48            [12]  903 	addc	a,#(_u >> 8)
      0001EE FF               [12]  904 	mov	r7,a
      0001EF 8E 82            [24]  905 	mov	dpl,r6
      0001F1 8F 83            [24]  906 	mov	dph,r7
      0001F3 E0               [24]  907 	movx	a,@dptr
      0001F4 60 08            [24]  908 	jz	00104$
      0001F6 90 00 31         [24]  909 	mov	dptr,#0x0031
      0001F9 12r00r00         [24]  910 	lcall	_putchar
      0001FC 80 06            [24]  911 	sjmp	00134$
      0001FE                        912 00104$:
                                    913 ;	life.c:160: else putchar('0');
      0001FE 90 00 30         [24]  914 	mov	dptr,#0x0030
      000201 12r00r00         [24]  915 	lcall	_putchar
      000204                        916 00134$:
                                    917 ;	life.c:158: for (y = 0; y < H; y++)
      000204 78r15            [12]  918 	mov	r0,#_y
      000206 06               [12]  919 	inc	@r0
      000207 B6 00 02         [24]  920 	cjne	@r0,#0x00,00229$
      00020A 08               [12]  921 	inc	r0
      00020B 06               [12]  922 	inc	@r0
      00020C                        923 00229$:
      00020C 78r15            [12]  924 	mov	r0,#_y
      00020E C3               [12]  925 	clr	c
      00020F E6               [12]  926 	mov	a,@r0
      000210 94 C0            [12]  927 	subb	a,#0xc0
      000212 08               [12]  928 	inc	r0
      000213 E6               [12]  929 	mov	a,@r0
      000214 64 80            [12]  930 	xrl	a,#0x80
      000216 94 80            [12]  931 	subb	a,#0x80
      000218 40 AD            [24]  932 	jc	00133$
                                    933 ;	life.c:161: printstr("\r\n");
      00021A 7Dr10            [12]  934 	mov	r5,#___str_2
      00021C 7Es00            [12]  935 	mov	r6,#(___str_2 >> 8)
      00021E 7F 80            [12]  936 	mov	r7,#0x80
                                    937 ;	life.c:74: return;
      000220                        938 00136$:
                                    939 ;	life.c:72: for (; *s; s++) putchar(*s);
      000220 8D 82            [24]  940 	mov	dpl,r5
      000222 8E 83            [24]  941 	mov	dph,r6
      000224 8F F0            [24]  942 	mov	b,r7
      000226 12r00r00         [24]  943 	lcall	__gptrget
      000229 FC               [12]  944 	mov	r4,a
      00022A 60 10            [24]  945 	jz	00121$
      00022C 7B 00            [12]  946 	mov	r3,#0x00
      00022E 8C 82            [24]  947 	mov	dpl,r4
      000230 8B 83            [24]  948 	mov	dph,r3
      000232 12r00r00         [24]  949 	lcall	_putchar
      000235 0D               [12]  950 	inc	r5
                                    951 ;	life.c:161: printstr("\r\n");
      000236 BD 00 E7         [24]  952 	cjne	r5,#0x00,00136$
      000239 0E               [12]  953 	inc	r6
      00023A 80 E4            [24]  954 	sjmp	00136$
      00023C                        955 00121$:
                                    956 ;	life.c:157: for (x = 0; x < W; x++) {
      00023C 78r13            [12]  957 	mov	r0,#_x
      00023E 06               [12]  958 	inc	@r0
      00023F B6 00 02         [24]  959 	cjne	@r0,#0x00,00233$
      000242 08               [12]  960 	inc	r0
      000243 06               [12]  961 	inc	@r0
      000244                        962 00233$:
      000244 78r13            [12]  963 	mov	r0,#_x
      000246 C3               [12]  964 	clr	c
      000247 E6               [12]  965 	mov	a,@r0
      000248 94 30            [12]  966 	subb	a,#0x30
      00024A 08               [12]  967 	inc	r0
      00024B E6               [12]  968 	mov	a,@r0
      00024C 64 80            [12]  969 	xrl	a,#0x80
      00024E 94 80            [12]  970 	subb	a,#0x80
      000250 50 03            [24]  971 	jnc	00234$
      000252 02r01rC1         [24]  972 	ljmp	00138$
      000255                        973 00234$:
                                    974 ;	life.c:164: printstr("\033[?25h");
      000255 7Dr13            [12]  975 	mov	r5,#___str_3
      000257 7Es00            [12]  976 	mov	r6,#(___str_3 >> 8)
      000259 7F 80            [12]  977 	mov	r7,#0x80
                                    978 ;	life.c:74: return;
      00025B                        979 00141$:
                                    980 ;	life.c:72: for (; *s; s++) putchar(*s);
      00025B 8D 82            [24]  981 	mov	dpl,r5
      00025D 8E 83            [24]  982 	mov	dph,r6
      00025F 8F F0            [24]  983 	mov	b,r7
      000261 12r00r00         [24]  984 	lcall	__gptrget
      000264 FC               [12]  985 	mov	r4,a
      000265 60 10            [24]  986 	jz	00123$
      000267 7B 00            [12]  987 	mov	r3,#0x00
      000269 8C 82            [24]  988 	mov	dpl,r4
      00026B 8B 83            [24]  989 	mov	dph,r3
      00026D 12r00r00         [24]  990 	lcall	_putchar
      000270 0D               [12]  991 	inc	r5
                                    992 ;	life.c:164: printstr("\033[?25h");
      000271 BD 00 E7         [24]  993 	cjne	r5,#0x00,00141$
      000274 0E               [12]  994 	inc	r6
      000275 80 E4            [24]  995 	sjmp	00141$
      000277                        996 00123$:
                                    997 ;	life.c:166: return;
                                    998 ;	life.c:167: }
      000277 22               [24]  999 	ret
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'main'
                                   1002 ;------------------------------------------------------------
                                   1003 ;__1310720027              Allocated to registers 
                                   1004 ;s                         Allocated to registers r5 r6 r7 
                                   1005 ;__2621440029              Allocated to registers 
                                   1006 ;s                         Allocated to registers r5 r6 r7 
                                   1007 ;__1310720017              Allocated to registers 
                                   1008 ;s                         Allocated to registers r5 r6 r7 
                                   1009 ;__1310720019              Allocated to registers r6 r7 
                                   1010 ;a                         Allocated to registers r4 r5 
                                   1011 ;__1310720021              Allocated to registers 
                                   1012 ;s                         Allocated to registers r5 r6 r7 
                                   1013 ;__1310720023              Allocated to registers 
                                   1014 ;s                         Allocated to registers r5 r6 r7 
                                   1015 ;__1310720025              Allocated to registers 
                                   1016 ;s                         Allocated to registers r5 r6 r7 
                                   1017 ;__2621440034              Allocated to registers 
                                   1018 ;s                         Allocated to registers r5 r6 r7 
                                   1019 ;__4587520038              Allocated to registers 
                                   1020 ;s                         Allocated to registers r5 r6 r7 
                                   1021 ;__4587520040              Allocated to registers 
                                   1022 ;s                         Allocated to registers r5 r6 r7 
                                   1023 ;__4587520042              Allocated to registers 
                                   1024 ;s                         Allocated to registers r5 r6 r7 
                                   1025 ;__3276800044              Allocated to registers 
                                   1026 ;s                         Allocated to registers r5 r6 r7 
                                   1027 ;__1310720046              Allocated to registers 
                                   1028 ;s                         Allocated to registers r5 r6 r7 
                                   1029 ;sloc0                     Allocated to stack - _bp +1
                                   1030 ;sloc1                     Allocated to stack - _bp +2
                                   1031 ;sloc2                     Allocated to stack - _bp +4
                                   1032 ;sloc3                     Allocated to stack - _bp +6
                                   1033 ;sloc4                     Allocated to stack - _bp +8
                                   1034 ;sloc5                     Allocated to stack - _bp +10
                                   1035 ;sloc6                     Allocated to stack - _bp +12
                                   1036 ;------------------------------------------------------------
                                   1037 ;	life.c:278: void main(void) {
                                   1038 ;	-----------------------------------------
                                   1039 ;	 function main
                                   1040 ;	-----------------------------------------
      000278                       1041 _main:
      000278 C0*00            [24] 1042 	push	_bp
      00027A E5 81            [12] 1043 	mov	a,sp
      00027C F5*00            [12] 1044 	mov	_bp,a
      00027E 24 0D            [12] 1045 	add	a,#0x0d
      000280 F5 81            [12] 1046 	mov	sp,a
                                   1047 ;	life.c:279: IT0 = 1;
                                   1048 ;	assignBit
      000282 D2 88            [12] 1049 	setb	_IT0
                                   1050 ;	life.c:280: IT1 = 1;
                                   1051 ;	assignBit
      000284 D2 8A            [12] 1052 	setb	_IT1
                                   1053 ;	life.c:281: EX0 = 1;
                                   1054 ;	assignBit
      000286 D2 A8            [12] 1055 	setb	_EX0
                                   1056 ;	life.c:282: EX1 = 1;
                                   1057 ;	assignBit
      000288 D2 AA            [12] 1058 	setb	_EX1
                                   1059 ;	life.c:283: EA = 1;	
                                   1060 ;	assignBit
      00028A D2 AF            [12] 1061 	setb	_EA
                                   1062 ;	life.c:284: P1_7 = 1;
                                   1063 ;	assignBit
      00028C D2 97            [12] 1064 	setb	_P1_7
                                   1065 ;	life.c:289: __endasm;
      00028E 00               [12] 1066 	nop
      00028F 00               [12] 1067 	nop
      000290 00               [12] 1068 	nop
                                   1069 ;	life.c:291: srand(RND);
      000291 90 80 00         [24] 1070 	mov	dptr,#_RND
      000294 E0               [24] 1071 	movx	a,@dptr
      000295 FE               [12] 1072 	mov	r6,a
      000296 A3               [24] 1073 	inc	dptr
      000297 E0               [24] 1074 	movx	a,@dptr
      000298 FF               [12] 1075 	mov	r7,a
      000299 8E 82            [24] 1076 	mov	dpl,r6
      00029B 8F 83            [24] 1077 	mov	dph,r7
      00029D 12r00r00         [24] 1078 	lcall	_srand
                                   1079 ;	life.c:293: OE76 = OE76_0;
      0002A0 78r12            [12] 1080 	mov	r0,#_OE76
      0002A2 76 3F            [12] 1081 	mov	@r0,#0x3f
                                   1082 ;	life.c:294: flashOE();
      0002A4 12r00r49         [24] 1083 	lcall	_flashOE
                                   1084 ;	life.c:296: printstr("\033[?25h\033[m");
      0002A7 7Dr34            [12] 1085 	mov	r5,#___str_7
      0002A9 7Es00            [12] 1086 	mov	r6,#(___str_7 >> 8)
      0002AB 7F 80            [12] 1087 	mov	r7,#0x80
                                   1088 ;	life.c:74: return;
      0002AD                       1089 00211$:
                                   1090 ;	life.c:72: for (; *s; s++) putchar(*s);
      0002AD 8D 82            [24] 1091 	mov	dpl,r5
      0002AF 8E 83            [24] 1092 	mov	dph,r6
      0002B1 8F F0            [24] 1093 	mov	b,r7
      0002B3 12r00r00         [24] 1094 	lcall	__gptrget
      0002B6 FC               [12] 1095 	mov	r4,a
      0002B7 60 10            [24] 1096 	jz	00151$
      0002B9 7B 00            [12] 1097 	mov	r3,#0x00
      0002BB 8C 82            [24] 1098 	mov	dpl,r4
      0002BD 8B 83            [24] 1099 	mov	dph,r3
      0002BF 12r00r00         [24] 1100 	lcall	_putchar
      0002C2 0D               [12] 1101 	inc	r5
                                   1102 ;	life.c:296: printstr("\033[?25h\033[m");
      0002C3 BD 00 E7         [24] 1103 	cjne	r5,#0x00,00211$
      0002C6 0E               [12] 1104 	inc	r6
      0002C7 80 E4            [24] 1105 	sjmp	00211$
      0002C9                       1106 00151$:
                                   1107 ;	life.c:298: for (i0 = 0; !i0; ) {	
      0002C9 78r10            [12] 1108 	mov	r0,#_i0
      0002CB 76 00            [12] 1109 	mov	@r0,#0x00
      0002CD                       1110 00258$:
                                   1111 ;	life.c:299: printstr("LIFE INIT T L R P\r\n");
      0002CD 7Dr3E            [12] 1112 	mov	r5,#___str_8
      0002CF 7Es00            [12] 1113 	mov	r6,#(___str_8 >> 8)
      0002D1 7F 80            [12] 1114 	mov	r7,#0x80
                                   1115 ;	life.c:74: return;
      0002D3                       1116 00214$:
                                   1117 ;	life.c:72: for (; *s; s++) putchar(*s);
      0002D3 8D 82            [24] 1118 	mov	dpl,r5
      0002D5 8E 83            [24] 1119 	mov	dph,r6
      0002D7 8F F0            [24] 1120 	mov	b,r7
      0002D9 12r00r00         [24] 1121 	lcall	__gptrget
      0002DC FC               [12] 1122 	mov	r4,a
      0002DD 60 10            [24] 1123 	jz	00110$
      0002DF 7B 00            [12] 1124 	mov	r3,#0x00
      0002E1 8C 82            [24] 1125 	mov	dpl,r4
      0002E3 8B 83            [24] 1126 	mov	dph,r3
      0002E5 12r00r00         [24] 1127 	lcall	_putchar
      0002E8 0D               [12] 1128 	inc	r5
                                   1129 ;	life.c:300: while (1) {
      0002E9 BD 00 E7         [24] 1130 	cjne	r5,#0x00,00214$
      0002EC 0E               [12] 1131 	inc	r6
      0002ED 80 E4            [24] 1132 	sjmp	00214$
      0002EF                       1133 00110$:
                                   1134 ;	life.c:301: c = toupper(getchar());
      0002EF 12r00r0A         [24] 1135 	lcall	_getchar
      0002F2 12r00r00         [24] 1136 	lcall	_toupper
      0002F5 AE 82            [24] 1137 	mov	r6,dpl
      0002F7 AF 83            [24] 1138 	mov	r7,dph
      0002F9 78r19            [12] 1139 	mov	r0,#_c
      0002FB A6 06            [24] 1140 	mov	@r0,ar6
      0002FD 08               [12] 1141 	inc	r0
      0002FE A6 07            [24] 1142 	mov	@r0,ar7
                                   1143 ;	life.c:302: if (i0 || (c == (int)'T')) goto term;
      000300 78r10            [12] 1144 	mov	r0,#_i0
      000302 E6               [12] 1145 	mov	a,@r0
      000303 60 03            [24] 1146 	jz	00551$
      000305 02r0Br86         [24] 1147 	ljmp	00149$
      000308                       1148 00551$:
      000308 BE 54 06         [24] 1149 	cjne	r6,#0x54,00552$
      00030B BF 00 03         [24] 1150 	cjne	r7,#0x00,00552$
      00030E 02r0Br86         [24] 1151 	ljmp	00149$
      000311                       1152 00552$:
                                   1153 ;	life.c:303: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      000311 BE 4C 05         [24] 1154 	cjne	r6,#0x4c,00553$
      000314 BF 00 02         [24] 1155 	cjne	r7,#0x00,00553$
      000317 80 0E            [24] 1156 	sjmp	00305$
      000319                       1157 00553$:
      000319 BE 52 05         [24] 1158 	cjne	r6,#0x52,00554$
      00031C BF 00 02         [24] 1159 	cjne	r7,#0x00,00554$
      00031F 80 06            [24] 1160 	sjmp	00305$
      000321                       1161 00554$:
      000321 BE 50 CB         [24] 1162 	cjne	r6,#0x50,00110$
      000324 BF 00 C8         [24] 1163 	cjne	r7,#0x00,00110$
                                   1164 ;	life.c:306: reload:
      000327                       1165 00305$:
      000327                       1166 00112$:
                                   1167 ;	life.c:170: memset(u, 0, sizeof (u));
      000327 E4               [12] 1168 	clr	a
      000328 C0 E0            [24] 1169 	push	acc
      00032A 74 24            [12] 1170 	mov	a,#0x24
      00032C C0 E0            [24] 1171 	push	acc
      00032E E4               [12] 1172 	clr	a
      00032F C0 E0            [24] 1173 	push	acc
      000331 90r48r00         [24] 1174 	mov	dptr,#_u
      000334 75 F0 00         [24] 1175 	mov	b,#0x00
      000337 12r00r00         [24] 1176 	lcall	_memset
      00033A 15 81            [12] 1177 	dec	sp
      00033C 15 81            [12] 1178 	dec	sp
      00033E 15 81            [12] 1179 	dec	sp
                                   1180 ;	life.c:171: memset(pu, 0, sizeof (pu));
      000340 E4               [12] 1181 	clr	a
      000341 C0 E0            [24] 1182 	push	acc
      000343 74 24            [12] 1183 	mov	a,#0x24
      000345 C0 E0            [24] 1184 	push	acc
      000347 E4               [12] 1185 	clr	a
      000348 C0 E0            [24] 1186 	push	acc
      00034A 90r24r00         [24] 1187 	mov	dptr,#_pu
      00034D 75 F0 00         [24] 1188 	mov	b,#0x00
      000350 12r00r00         [24] 1189 	lcall	_memset
      000353 15 81            [12] 1190 	dec	sp
      000355 15 81            [12] 1191 	dec	sp
      000357 15 81            [12] 1192 	dec	sp
                                   1193 ;	life.c:308: if (c == (int)'L') loadiu();
      000359 78r19            [12] 1194 	mov	r0,#_c
      00035B B6 4C 06         [24] 1195 	cjne	@r0,#0x4c,00557$
      00035E 08               [12] 1196 	inc	r0
      00035F B6 00 02         [24] 1197 	cjne	@r0,#0x00,00557$
      000362 80 03            [24] 1198 	sjmp	00558$
      000364                       1199 00557$:
      000364 02r04rDF         [24] 1200 	ljmp	00116$
      000367                       1201 00558$:
                                   1202 ;	life.c:177: j = 0;
      000367 78r17            [12] 1203 	mov	r0,#_j
      000369 E4               [12] 1204 	clr	a
      00036A F6               [12] 1205 	mov	@r0,a
      00036B 08               [12] 1206 	inc	r0
      00036C F6               [12] 1207 	mov	@r0,a
                                   1208 ;	life.c:179: printstr("LOAD 0 1 ~ # <");
      00036D 7Dr1A            [12] 1209 	mov	r5,#___str_4
      00036F 7Es00            [12] 1210 	mov	r6,#(___str_4 >> 8)
      000371 7F 80            [12] 1211 	mov	r7,#0x80
                                   1212 ;	life.c:74: return;
      000373                       1213 00217$:
                                   1214 ;	life.c:72: for (; *s; s++) putchar(*s);
      000373 8D 82            [24] 1215 	mov	dpl,r5
      000375 8E 83            [24] 1216 	mov	dph,r6
      000377 8F F0            [24] 1217 	mov	b,r7
      000379 12r00r00         [24] 1218 	lcall	__gptrget
      00037C FC               [12] 1219 	mov	r4,a
      00037D 60 10            [24] 1220 	jz	00156$
      00037F 7B 00            [12] 1221 	mov	r3,#0x00
      000381 8C 82            [24] 1222 	mov	dpl,r4
      000383 8B 83            [24] 1223 	mov	dph,r3
      000385 12r00r00         [24] 1224 	lcall	_putchar
      000388 0D               [12] 1225 	inc	r5
                                   1226 ;	life.c:179: printstr("LOAD 0 1 ~ # <");
      000389 BD 00 E7         [24] 1227 	cjne	r5,#0x00,00217$
      00038C 0E               [12] 1228 	inc	r6
      00038D 80 E4            [24] 1229 	sjmp	00217$
      00038F                       1230 00156$:
                                   1231 ;	life.c:181: for (y = 0; y < (H * W); y += W) {
      00038F 78r15            [12] 1232 	mov	r0,#_y
      000391 E4               [12] 1233 	clr	a
      000392 F6               [12] 1234 	mov	@r0,a
      000393 08               [12] 1235 	inc	r0
      000394 F6               [12] 1236 	mov	@r0,a
      000395                       1237 00220$:
                                   1238 ;	life.c:182: for (x = 0; x < W; x++) {
      000395 78r13            [12] 1239 	mov	r0,#_x
      000397 E4               [12] 1240 	clr	a
      000398 F6               [12] 1241 	mov	@r0,a
      000399 08               [12] 1242 	inc	r0
      00039A F6               [12] 1243 	mov	@r0,a
                                   1244 ;	life.c:183: while (1) {
      00039B                       1245 00169$:
                                   1246 ;	life.c:184: c = getchar();
      00039B 12r00r0A         [24] 1247 	lcall	_getchar
      00039E AE 82            [24] 1248 	mov	r6,dpl
      0003A0 AF 83            [24] 1249 	mov	r7,dph
      0003A2 78r19            [12] 1250 	mov	r0,#_c
      0003A4 A6 06            [24] 1251 	mov	@r0,ar6
      0003A6 08               [12] 1252 	inc	r0
      0003A7 A6 07            [24] 1253 	mov	@r0,ar7
                                   1254 ;	life.c:185: if (c == (int)'0') {
      0003A9 BE 30 25         [24] 1255 	cjne	r6,#0x30,00167$
      0003AC BF 00 22         [24] 1256 	cjne	r7,#0x00,00167$
                                   1257 ;	life.c:186: iu[y + x] = 0;
      0003AF 78r15            [12] 1258 	mov	r0,#_y
      0003B1 79r13            [12] 1259 	mov	r1,#_x
      0003B3 E7               [12] 1260 	mov	a,@r1
      0003B4 26               [12] 1261 	add	a,@r0
      0003B5 FC               [12] 1262 	mov	r4,a
      0003B6 09               [12] 1263 	inc	r1
      0003B7 E7               [12] 1264 	mov	a,@r1
      0003B8 08               [12] 1265 	inc	r0
      0003B9 36               [12] 1266 	addc	a,@r0
      0003BA FD               [12] 1267 	mov	r5,a
      0003BB EC               [12] 1268 	mov	a,r4
      0003BC 24r00            [12] 1269 	add	a,#_iu
      0003BE F5 82            [12] 1270 	mov	dpl,a
      0003C0 ED               [12] 1271 	mov	a,r5
      0003C1 34s00            [12] 1272 	addc	a,#(_iu >> 8)
      0003C3 F5 83            [12] 1273 	mov	dph,a
      0003C5 E4               [12] 1274 	clr	a
      0003C6 F0               [24] 1275 	movx	@dptr,a
                                   1276 ;	life.c:187: j++;
      0003C7 78r17            [12] 1277 	mov	r0,#_j
      0003C9 06               [12] 1278 	inc	@r0
      0003CA B6 00 02         [24] 1279 	cjne	@r0,#0x00,00563$
      0003CD 08               [12] 1280 	inc	r0
      0003CE 06               [12] 1281 	inc	@r0
      0003CF                       1282 00563$:
                                   1283 ;	life.c:188: break;
      0003CF 80 39            [24] 1284 	sjmp	00172$
      0003D1                       1285 00167$:
                                   1286 ;	life.c:189: } else if (c == (int)'1') {
      0003D1 BE 31 26         [24] 1287 	cjne	r6,#0x31,00165$
      0003D4 BF 00 23         [24] 1288 	cjne	r7,#0x00,00165$
                                   1289 ;	life.c:190: iu[y + x] = 1;
      0003D7 78r15            [12] 1290 	mov	r0,#_y
      0003D9 79r13            [12] 1291 	mov	r1,#_x
      0003DB E7               [12] 1292 	mov	a,@r1
      0003DC 26               [12] 1293 	add	a,@r0
      0003DD FC               [12] 1294 	mov	r4,a
      0003DE 09               [12] 1295 	inc	r1
      0003DF E7               [12] 1296 	mov	a,@r1
      0003E0 08               [12] 1297 	inc	r0
      0003E1 36               [12] 1298 	addc	a,@r0
      0003E2 FD               [12] 1299 	mov	r5,a
      0003E3 EC               [12] 1300 	mov	a,r4
      0003E4 24r00            [12] 1301 	add	a,#_iu
      0003E6 F5 82            [12] 1302 	mov	dpl,a
      0003E8 ED               [12] 1303 	mov	a,r5
      0003E9 34s00            [12] 1304 	addc	a,#(_iu >> 8)
      0003EB F5 83            [12] 1305 	mov	dph,a
      0003ED 74 01            [12] 1306 	mov	a,#0x01
      0003EF F0               [24] 1307 	movx	@dptr,a
                                   1308 ;	life.c:191: j++;
      0003F0 78r17            [12] 1309 	mov	r0,#_j
      0003F2 06               [12] 1310 	inc	@r0
      0003F3 B6 00 02         [24] 1311 	cjne	@r0,#0x00,00566$
      0003F6 08               [12] 1312 	inc	r0
      0003F7 06               [12] 1313 	inc	@r0
      0003F8                       1314 00566$:
                                   1315 ;	life.c:192: break;
      0003F8 80 10            [24] 1316 	sjmp	00172$
      0003FA                       1317 00165$:
                                   1318 ;	life.c:193: } else if (c == (int)'~') goto br_inner;
      0003FA BE 7E 05         [24] 1319 	cjne	r6,#0x7e,00567$
      0003FD BF 00 02         [24] 1320 	cjne	r7,#0x00,00567$
      000400 80 21            [24] 1321 	sjmp	00221$
      000402                       1322 00567$:
                                   1323 ;	life.c:194: else if (c == (int)'#') goto out;
                                   1324 ;	life.c:198: break;
      000402 BE 23 96         [24] 1325 	cjne	r6,#0x23,00169$
      000405 BF 00 93         [24] 1326 	cjne	r7,#0x00,00169$
      000408 80 31            [24] 1327 	sjmp	00182$
      00040A                       1328 00172$:
                                   1329 ;	life.c:182: for (x = 0; x < W; x++) {
      00040A 78r13            [12] 1330 	mov	r0,#_x
      00040C 06               [12] 1331 	inc	@r0
      00040D B6 00 02         [24] 1332 	cjne	@r0,#0x00,00569$
      000410 08               [12] 1333 	inc	r0
      000411 06               [12] 1334 	inc	@r0
      000412                       1335 00569$:
      000412 78r13            [12] 1336 	mov	r0,#_x
      000414 C3               [12] 1337 	clr	c
      000415 E6               [12] 1338 	mov	a,@r0
      000416 94 30            [12] 1339 	subb	a,#0x30
      000418 08               [12] 1340 	inc	r0
      000419 E6               [12] 1341 	mov	a,@r0
      00041A 64 80            [12] 1342 	xrl	a,#0x80
      00041C 94 80            [12] 1343 	subb	a,#0x80
      00041E 50 03            [24] 1344 	jnc	00570$
      000420 02r03r9B         [24] 1345 	ljmp	00169$
      000423                       1346 00570$:
      000423                       1347 00221$:
                                   1348 ;	life.c:181: for (y = 0; y < (H * W); y += W) {
      000423 78r15            [12] 1349 	mov	r0,#_y
      000425 74 30            [12] 1350 	mov	a,#0x30
      000427 26               [12] 1351 	add	a,@r0
      000428 F6               [12] 1352 	mov	@r0,a
      000429 E4               [12] 1353 	clr	a
      00042A 08               [12] 1354 	inc	r0
      00042B 36               [12] 1355 	addc	a,@r0
      00042C F6               [12] 1356 	mov	@r0,a
      00042D 78r15            [12] 1357 	mov	r0,#_y
      00042F C3               [12] 1358 	clr	c
      000430 08               [12] 1359 	inc	r0
      000431 E6               [12] 1360 	mov	a,@r0
      000432 64 80            [12] 1361 	xrl	a,#0x80
      000434 94 A4            [12] 1362 	subb	a,#0xa4
      000436 50 03            [24] 1363 	jnc	00571$
      000438 02r03r95         [24] 1364 	ljmp	00220$
      00043B                       1365 00571$:
                                   1366 ;	life.c:202: out:
      00043B                       1367 00182$:
                                   1368 ;	life.c:203: if (c != (int)'#')
      00043B BE 23 05         [24] 1369 	cjne	r6,#0x23,00572$
      00043E BF 00 02         [24] 1370 	cjne	r7,#0x00,00572$
      000441 80 14            [24] 1371 	sjmp	00181$
      000443                       1372 00572$:
                                   1373 ;	life.c:204: while (1) {
      000443                       1374 00178$:
                                   1375 ;	life.c:205: c = getchar();
      000443 12r00r0A         [24] 1376 	lcall	_getchar
      000446 AE 82            [24] 1377 	mov	r6,dpl
      000448 AF 83            [24] 1378 	mov	r7,dph
      00044A 78r19            [12] 1379 	mov	r0,#_c
      00044C A6 06            [24] 1380 	mov	@r0,ar6
      00044E 08               [12] 1381 	inc	r0
      00044F A6 07            [24] 1382 	mov	@r0,ar7
                                   1383 ;	life.c:206: if (c == (int)'#') break;
      000451 BE 23 EF         [24] 1384 	cjne	r6,#0x23,00178$
      000454 BF 00 EC         [24] 1385 	cjne	r7,#0x00,00178$
      000457                       1386 00181$:
                                   1387 ;	life.c:208: print16x(j);
      000457 78r17            [12] 1388 	mov	r0,#_j
      000459 86 06            [24] 1389 	mov	ar6,@r0
      00045B 08               [12] 1390 	inc	r0
      00045C 86 07            [24] 1391 	mov	ar7,@r0
      00045E 8E 04            [24] 1392 	mov	ar4,r6
                                   1393 ;	life.c:63: putchar(digits[(a >> 12) & 0xf]);
      000460 EF               [12] 1394 	mov	a,r7
      000461 FD               [12] 1395 	mov	r5,a
      000462 C4               [12] 1396 	swap	a
      000463 54 0F            [12] 1397 	anl	a,#(0x0f&0x0f)
      000465 24r00            [12] 1398 	add	a,#_digits
      000467 F9               [12] 1399 	mov	r1,a
      000468 87 07            [24] 1400 	mov	ar7,@r1
      00046A 7E 00            [12] 1401 	mov	r6,#0x00
      00046C 8F 82            [24] 1402 	mov	dpl,r7
      00046E 8E 83            [24] 1403 	mov	dph,r6
      000470 12r00r00         [24] 1404 	lcall	_putchar
                                   1405 ;	life.c:64: putchar(digits[(a >> 8) & 0xf]);
      000473 8D 07            [24] 1406 	mov	ar7,r5
      000475 53 07 0F         [24] 1407 	anl	ar7,#0x0f
      000478 EF               [12] 1408 	mov	a,r7
      000479 24r00            [12] 1409 	add	a,#_digits
      00047B F9               [12] 1410 	mov	r1,a
      00047C 87 07            [24] 1411 	mov	ar7,@r1
      00047E 7E 00            [12] 1412 	mov	r6,#0x00
      000480 8F 82            [24] 1413 	mov	dpl,r7
      000482 8E 83            [24] 1414 	mov	dph,r6
      000484 12r00r00         [24] 1415 	lcall	_putchar
                                   1416 ;	life.c:65: putchar(digits[(a >> 4) & 0xf]);
      000487 8C 06            [24] 1417 	mov	ar6,r4
      000489 ED               [12] 1418 	mov	a,r5
      00048A C4               [12] 1419 	swap	a
      00048B CE               [12] 1420 	xch	a,r6
      00048C C4               [12] 1421 	swap	a
      00048D 54 0F            [12] 1422 	anl	a,#0x0f
      00048F 6E               [12] 1423 	xrl	a,r6
      000490 CE               [12] 1424 	xch	a,r6
      000491 54 0F            [12] 1425 	anl	a,#0x0f
      000493 CE               [12] 1426 	xch	a,r6
      000494 6E               [12] 1427 	xrl	a,r6
      000495 CE               [12] 1428 	xch	a,r6
      000496 53 06 0F         [24] 1429 	anl	ar6,#0x0f
      000499 EE               [12] 1430 	mov	a,r6
      00049A 24r00            [12] 1431 	add	a,#_digits
      00049C F9               [12] 1432 	mov	r1,a
      00049D 87 07            [24] 1433 	mov	ar7,@r1
      00049F 7E 00            [12] 1434 	mov	r6,#0x00
      0004A1 8F 82            [24] 1435 	mov	dpl,r7
      0004A3 8E 83            [24] 1436 	mov	dph,r6
      0004A5 12r00r00         [24] 1437 	lcall	_putchar
                                   1438 ;	life.c:66: putchar(digits[a & 0xf]);
      0004A8 53 04 0F         [24] 1439 	anl	ar4,#0x0f
      0004AB EC               [12] 1440 	mov	a,r4
      0004AC 24r00            [12] 1441 	add	a,#_digits
      0004AE F9               [12] 1442 	mov	r1,a
      0004AF 87 07            [24] 1443 	mov	ar7,@r1
      0004B1 7E 00            [12] 1444 	mov	r6,#0x00
      0004B3 8F 82            [24] 1445 	mov	dpl,r7
      0004B5 8E 83            [24] 1446 	mov	dph,r6
      0004B7 12r00r00         [24] 1447 	lcall	_putchar
                                   1448 ;	life.c:209: printstr(">\r\n");
      0004BA 7Dr29            [12] 1449 	mov	r5,#___str_5
      0004BC 7Es00            [12] 1450 	mov	r6,#(___str_5 >> 8)
      0004BE 7F 80            [12] 1451 	mov	r7,#0x80
                                   1452 ;	life.c:74: return;
      0004C0                       1453 00223$:
                                   1454 ;	life.c:72: for (; *s; s++) putchar(*s);
      0004C0 8D 82            [24] 1455 	mov	dpl,r5
      0004C2 8E 83            [24] 1456 	mov	dph,r6
      0004C4 8F F0            [24] 1457 	mov	b,r7
      0004C6 12r00r00         [24] 1458 	lcall	__gptrget
      0004C9 FC               [12] 1459 	mov	r4,a
      0004CA 70 03            [24] 1460 	jnz	00575$
      0004CC 02r05r98         [24] 1461 	ljmp	00117$
      0004CF                       1462 00575$:
      0004CF 7B 00            [12] 1463 	mov	r3,#0x00
      0004D1 8C 82            [24] 1464 	mov	dpl,r4
      0004D3 8B 83            [24] 1465 	mov	dph,r3
      0004D5 12r00r00         [24] 1466 	lcall	_putchar
      0004D8 0D               [12] 1467 	inc	r5
                                   1468 ;	life.c:308: if (c == (int)'L') loadiu();
      0004D9 BD 00 E4         [24] 1469 	cjne	r5,#0x00,00223$
      0004DC 0E               [12] 1470 	inc	r6
      0004DD 80 E1            [24] 1471 	sjmp	00223$
      0004DF                       1472 00116$:
                                   1473 ;	life.c:309: else if (c == (int)'R') loadriu();
      0004DF 78r19            [12] 1474 	mov	r0,#_c
      0004E1 B6 52 06         [24] 1475 	cjne	@r0,#0x52,00577$
      0004E4 08               [12] 1476 	inc	r0
      0004E5 B6 00 02         [24] 1477 	cjne	@r0,#0x00,00577$
      0004E8 80 03            [24] 1478 	sjmp	00578$
      0004EA                       1479 00577$:
      0004EA 02r05r98         [24] 1480 	ljmp	00117$
      0004ED                       1481 00578$:
                                   1482 ;	life.c:215: j = 0;
      0004ED 78r17            [12] 1483 	mov	r0,#_j
      0004EF E4               [12] 1484 	clr	a
      0004F0 F6               [12] 1485 	mov	@r0,a
      0004F1 08               [12] 1486 	inc	r0
      0004F2 F6               [12] 1487 	mov	@r0,a
                                   1488 ;	life.c:217: printstr("RANDOM");
      0004F3 7Dr2D            [12] 1489 	mov	r5,#___str_6
      0004F5 7Es00            [12] 1490 	mov	r6,#(___str_6 >> 8)
      0004F7 7F 80            [12] 1491 	mov	r7,#0x80
                                   1492 ;	life.c:74: return;
      0004F9                       1493 00226$:
                                   1494 ;	life.c:72: for (; *s; s++) putchar(*s);
      0004F9 8D 82            [24] 1495 	mov	dpl,r5
      0004FB 8E 83            [24] 1496 	mov	dph,r6
      0004FD 8F F0            [24] 1497 	mov	b,r7
      0004FF 12r00r00         [24] 1498 	lcall	__gptrget
      000502 FC               [12] 1499 	mov	r4,a
      000503 60 10            [24] 1500 	jz	00188$
      000505 7B 00            [12] 1501 	mov	r3,#0x00
      000507 8C 82            [24] 1502 	mov	dpl,r4
      000509 8B 83            [24] 1503 	mov	dph,r3
      00050B 12r00r00         [24] 1504 	lcall	_putchar
      00050E 0D               [12] 1505 	inc	r5
                                   1506 ;	life.c:217: printstr("RANDOM");
      00050F BD 00 E7         [24] 1507 	cjne	r5,#0x00,00226$
      000512 0E               [12] 1508 	inc	r6
      000513 80 E4            [24] 1509 	sjmp	00226$
      000515                       1510 00188$:
                                   1511 ;	life.c:219: for (y = 0; y < (H * W); y += W)
      000515 78r15            [12] 1512 	mov	r0,#_y
      000517 E4               [12] 1513 	clr	a
      000518 F6               [12] 1514 	mov	@r0,a
      000519 08               [12] 1515 	inc	r0
      00051A F6               [12] 1516 	mov	@r0,a
      00051B                       1517 00230$:
                                   1518 ;	life.c:220: for (x = 0; x < W; x++)
      00051B 78r13            [12] 1519 	mov	r0,#_x
      00051D E4               [12] 1520 	clr	a
      00051E F6               [12] 1521 	mov	@r0,a
      00051F 08               [12] 1522 	inc	r0
      000520 F6               [12] 1523 	mov	@r0,a
      000521                       1524 00228$:
                                   1525 ;	life.c:221: iu[y + x] = rand() & 1;
      000521 78r15            [12] 1526 	mov	r0,#_y
      000523 79r13            [12] 1527 	mov	r1,#_x
      000525 E7               [12] 1528 	mov	a,@r1
      000526 26               [12] 1529 	add	a,@r0
      000527 FE               [12] 1530 	mov	r6,a
      000528 09               [12] 1531 	inc	r1
      000529 E7               [12] 1532 	mov	a,@r1
      00052A 08               [12] 1533 	inc	r0
      00052B 36               [12] 1534 	addc	a,@r0
      00052C FF               [12] 1535 	mov	r7,a
      00052D EE               [12] 1536 	mov	a,r6
      00052E 24r00            [12] 1537 	add	a,#_iu
      000530 FE               [12] 1538 	mov	r6,a
      000531 EF               [12] 1539 	mov	a,r7
      000532 34s00            [12] 1540 	addc	a,#(_iu >> 8)
      000534 FF               [12] 1541 	mov	r7,a
      000535 C0 07            [24] 1542 	push	ar7
      000537 C0 06            [24] 1543 	push	ar6
      000539 12r00r00         [24] 1544 	lcall	_rand
      00053C AC 82            [24] 1545 	mov	r4,dpl
      00053E D0 06            [24] 1546 	pop	ar6
      000540 D0 07            [24] 1547 	pop	ar7
      000542 53 04 01         [24] 1548 	anl	ar4,#0x01
      000545 8E 82            [24] 1549 	mov	dpl,r6
      000547 8F 83            [24] 1550 	mov	dph,r7
      000549 EC               [12] 1551 	mov	a,r4
      00054A F0               [24] 1552 	movx	@dptr,a
                                   1553 ;	life.c:220: for (x = 0; x < W; x++)
      00054B 78r13            [12] 1554 	mov	r0,#_x
      00054D 06               [12] 1555 	inc	@r0
      00054E B6 00 02         [24] 1556 	cjne	@r0,#0x00,00581$
      000551 08               [12] 1557 	inc	r0
      000552 06               [12] 1558 	inc	@r0
      000553                       1559 00581$:
      000553 78r13            [12] 1560 	mov	r0,#_x
      000555 C3               [12] 1561 	clr	c
      000556 E6               [12] 1562 	mov	a,@r0
      000557 94 30            [12] 1563 	subb	a,#0x30
      000559 08               [12] 1564 	inc	r0
      00055A E6               [12] 1565 	mov	a,@r0
      00055B 64 80            [12] 1566 	xrl	a,#0x80
      00055D 94 80            [12] 1567 	subb	a,#0x80
      00055F 40 C0            [24] 1568 	jc	00228$
                                   1569 ;	life.c:219: for (y = 0; y < (H * W); y += W)
      000561 78r15            [12] 1570 	mov	r0,#_y
      000563 74 30            [12] 1571 	mov	a,#0x30
      000565 26               [12] 1572 	add	a,@r0
      000566 F6               [12] 1573 	mov	@r0,a
      000567 E4               [12] 1574 	clr	a
      000568 08               [12] 1575 	inc	r0
      000569 36               [12] 1576 	addc	a,@r0
      00056A F6               [12] 1577 	mov	@r0,a
      00056B 78r15            [12] 1578 	mov	r0,#_y
      00056D C3               [12] 1579 	clr	c
      00056E 08               [12] 1580 	inc	r0
      00056F E6               [12] 1581 	mov	a,@r0
      000570 64 80            [12] 1582 	xrl	a,#0x80
      000572 94 A4            [12] 1583 	subb	a,#0xa4
      000574 40 A5            [24] 1584 	jc	00230$
                                   1585 ;	life.c:223: printstr("\r\n");
      000576 7Dr10            [12] 1586 	mov	r5,#___str_2
      000578 7Es00            [12] 1587 	mov	r6,#(___str_2 >> 8)
      00057A 7F 80            [12] 1588 	mov	r7,#0x80
                                   1589 ;	life.c:74: return;
      00057C                       1590 00233$:
                                   1591 ;	life.c:72: for (; *s; s++) putchar(*s);
      00057C 8D 82            [24] 1592 	mov	dpl,r5
      00057E 8E 83            [24] 1593 	mov	dph,r6
      000580 8F F0            [24] 1594 	mov	b,r7
      000582 12r00r00         [24] 1595 	lcall	__gptrget
      000585 FC               [12] 1596 	mov	r4,a
      000586 60 10            [24] 1597 	jz	00117$
      000588 7B 00            [12] 1598 	mov	r3,#0x00
      00058A 8C 82            [24] 1599 	mov	dpl,r4
      00058C 8B 83            [24] 1600 	mov	dph,r3
      00058E 12r00r00         [24] 1601 	lcall	_putchar
      000591 0D               [12] 1602 	inc	r5
                                   1603 ;	life.c:309: else if (c == (int)'R') loadriu();
      000592 BD 00 E7         [24] 1604 	cjne	r5,#0x00,00233$
      000595 0E               [12] 1605 	inc	r6
      000596 80 E4            [24] 1606 	sjmp	00233$
      000598                       1607 00117$:
                                   1608 ;	life.c:310: memcpy(u, iu, sizeof (iu));
      000598 E4               [12] 1609 	clr	a
      000599 C0 E0            [24] 1610 	push	acc
      00059B 74 24            [12] 1611 	mov	a,#0x24
      00059D C0 E0            [24] 1612 	push	acc
      00059F 74r00            [12] 1613 	mov	a,#_iu
      0005A1 C0 E0            [24] 1614 	push	acc
      0005A3 74s00            [12] 1615 	mov	a,#(_iu >> 8)
      0005A5 C0 E0            [24] 1616 	push	acc
      0005A7 E4               [12] 1617 	clr	a
      0005A8 C0 E0            [24] 1618 	push	acc
      0005AA 90r48r00         [24] 1619 	mov	dptr,#_u
      0005AD 75 F0 00         [24] 1620 	mov	b,#0x00
      0005B0 12r00r00         [24] 1621 	lcall	___memcpy
      0005B3 E5 81            [12] 1622 	mov	a,sp
      0005B5 24 FB            [12] 1623 	add	a,#0xfb
      0005B7 F5 81            [12] 1624 	mov	sp,a
                                   1625 ;	life.c:311: show(0);
      0005B9 75 82 00         [24] 1626 	mov	dpl,#0x00
      0005BC 12r00r5B         [24] 1627 	lcall	_show
                                   1628 ;	life.c:313: printstr("READY T L R P S\r\n");
      0005BF 7Dr52            [12] 1629 	mov	r5,#___str_9
      0005C1 7Es00            [12] 1630 	mov	r6,#(___str_9 >> 8)
      0005C3 7F 80            [12] 1631 	mov	r7,#0x80
                                   1632 ;	life.c:74: return;
      0005C5                       1633 00236$:
                                   1634 ;	life.c:72: for (; *s; s++) putchar(*s);
      0005C5 8D 82            [24] 1635 	mov	dpl,r5
      0005C7 8E 83            [24] 1636 	mov	dph,r6
      0005C9 8F F0            [24] 1637 	mov	b,r7
      0005CB 12r00r00         [24] 1638 	lcall	__gptrget
      0005CE FC               [12] 1639 	mov	r4,a
      0005CF 60 10            [24] 1640 	jz	00130$
      0005D1 7B 00            [12] 1641 	mov	r3,#0x00
      0005D3 8C 82            [24] 1642 	mov	dpl,r4
      0005D5 8B 83            [24] 1643 	mov	dph,r3
      0005D7 12r00r00         [24] 1644 	lcall	_putchar
      0005DA 0D               [12] 1645 	inc	r5
                                   1646 ;	life.c:314: while (1) {
      0005DB BD 00 E7         [24] 1647 	cjne	r5,#0x00,00236$
      0005DE 0E               [12] 1648 	inc	r6
      0005DF 80 E4            [24] 1649 	sjmp	00236$
      0005E1                       1650 00130$:
                                   1651 ;	life.c:315: c = toupper(getchar());
      0005E1 12r00r0A         [24] 1652 	lcall	_getchar
      0005E4 12r00r00         [24] 1653 	lcall	_toupper
      0005E7 AE 82            [24] 1654 	mov	r6,dpl
      0005E9 AF 83            [24] 1655 	mov	r7,dph
      0005EB 78r19            [12] 1656 	mov	r0,#_c
      0005ED A6 06            [24] 1657 	mov	@r0,ar6
      0005EF 08               [12] 1658 	inc	r0
      0005F0 A6 07            [24] 1659 	mov	@r0,ar7
                                   1660 ;	life.c:316: if (i0 || (c == (int)'T')) goto term;
      0005F2 78r10            [12] 1661 	mov	r0,#_i0
      0005F4 E6               [12] 1662 	mov	a,@r0
      0005F5 60 03            [24] 1663 	jz	00588$
      0005F7 02r0Br86         [24] 1664 	ljmp	00149$
      0005FA                       1665 00588$:
      0005FA BE 54 06         [24] 1666 	cjne	r6,#0x54,00589$
      0005FD BF 00 03         [24] 1667 	cjne	r7,#0x00,00589$
      000600 02r0Br86         [24] 1668 	ljmp	00149$
      000603                       1669 00589$:
                                   1670 ;	life.c:317: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      000603 BE 4C 06         [24] 1671 	cjne	r6,#0x4c,00590$
      000606 BF 00 03         [24] 1672 	cjne	r7,#0x00,00590$
      000609 02r03r27         [24] 1673 	ljmp	00112$
      00060C                       1674 00590$:
      00060C BE 52 06         [24] 1675 	cjne	r6,#0x52,00591$
      00060F BF 00 03         [24] 1676 	cjne	r7,#0x00,00591$
      000612 02r03r27         [24] 1677 	ljmp	00112$
      000615                       1678 00591$:
      000615 BE 50 06         [24] 1679 	cjne	r6,#0x50,00592$
      000618 BF 00 03         [24] 1680 	cjne	r7,#0x00,00592$
      00061B 02r03r27         [24] 1681 	ljmp	00112$
      00061E                       1682 00592$:
                                   1683 ;	life.c:318: else if (c == (int)'S') break;
      00061E BE 53 C0         [24] 1684 	cjne	r6,#0x53,00130$
      000621 BF 00 BD         [24] 1685 	cjne	r7,#0x00,00130$
                                   1686 ;	life.c:127: generation[0] = 0u;
      000624 78r22            [12] 1687 	mov	r0,#_generation
      000626 76 00            [12] 1688 	mov	@r0,#0x00
      000628 08               [12] 1689 	inc	r0
      000629 76 00            [12] 1690 	mov	@r0,#0x00
                                   1691 ;	life.c:128: generation[1] = 0u;
      00062B 78r24            [12] 1692 	mov	r0,#(_generation + 0x0002)
      00062D 76 00            [12] 1693 	mov	@r0,#0x00
      00062F 08               [12] 1694 	inc	r0
      000630 76 00            [12] 1695 	mov	@r0,#0x00
                                   1696 ;	life.c:323: for (i1 = 0; !i0 && !i1; ) {
      000632 78r11            [12] 1697 	mov	r0,#_i1
      000634 76 00            [12] 1698 	mov	@r0,#0x00
      000636                       1699 00253$:
      000636 78r10            [12] 1700 	mov	r0,#_i0
      000638 E6               [12] 1701 	mov	a,@r0
      000639 60 03            [24] 1702 	jz	00595$
      00063B 02r0Br54         [24] 1703 	ljmp	00145$
      00063E                       1704 00595$:
      00063E 78r11            [12] 1705 	mov	r0,#_i1
      000640 E6               [12] 1706 	mov	a,@r0
      000641 60 03            [24] 1707 	jz	00596$
      000643 02r0Br54         [24] 1708 	ljmp	00145$
      000646                       1709 00596$:
                                   1710 ;	life.c:324: show(1);
      000646 75 82 01         [24] 1711 	mov	dpl,#0x01
      000649 12r00r5B         [24] 1712 	lcall	_show
                                   1713 ;	life.c:229: fixed = 0;
      00064C 78r1C            [12] 1714 	mov	r0,#_fixed
      00064E 76 00            [12] 1715 	mov	@r0,#0x00
                                   1716 ;	life.c:230: cycle2 = 0;
      000650 78r1D            [12] 1717 	mov	r0,#_cycle2
      000652 76 00            [12] 1718 	mov	@r0,#0x00
                                   1719 ;	life.c:232: OE76 = OE76_0;
      000654 78r12            [12] 1720 	mov	r0,#_OE76
      000656 76 3F            [12] 1721 	mov	@r0,#0x3f
                                   1722 ;	life.c:233: flashOE();
      000658 12r00r49         [24] 1723 	lcall	_flashOE
                                   1724 ;	life.c:235: for (y = 0; y < H; y++) {
      00065B 78r15            [12] 1725 	mov	r0,#_y
      00065D E4               [12] 1726 	clr	a
      00065E F6               [12] 1727 	mov	@r0,a
      00065F 08               [12] 1728 	inc	r0
      000660 F6               [12] 1729 	mov	@r0,a
      000661                       1730 00240$:
                                   1731 ;	life.c:236: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000661 78r15            [12] 1732 	mov	r0,#_y
      000663 86 07            [24] 1733 	mov	ar7,@r0
      000665 53 07 03         [24] 1734 	anl	ar7,#0x03
      000668 EF               [12] 1735 	mov	a,r7
      000669 03               [12] 1736 	rr	a
      00066A 03               [12] 1737 	rr	a
      00066B 54 C0            [12] 1738 	anl	a,#0xc0
      00066D FF               [12] 1739 	mov	r7,a
      00066E 78r12            [12] 1740 	mov	r0,#_OE76
      000670 74 3F            [12] 1741 	mov	a,#0x3f
      000672 4F               [12] 1742 	orl	a,r7
      000673 F6               [12] 1743 	mov	@r0,a
                                   1744 ;	life.c:237: flashOE();
      000674 12r00r49         [24] 1745 	lcall	_flashOE
                                   1746 ;	life.c:238: for (x = 0; x < W; x++) {
      000677 78r13            [12] 1747 	mov	r0,#_x
      000679 E4               [12] 1748 	clr	a
      00067A F6               [12] 1749 	mov	@r0,a
      00067B 08               [12] 1750 	inc	r0
      00067C F6               [12] 1751 	mov	@r0,a
      00067D                       1752 00238$:
                                   1753 ;	life.c:239: n = -u[A2D(W, y, x)];
      00067D 78r15            [12] 1754 	mov	r0,#_y
      00067F E6               [12] 1755 	mov	a,@r0
      000680 C0 E0            [24] 1756 	push	acc
      000682 08               [12] 1757 	inc	r0
      000683 E6               [12] 1758 	mov	a,@r0
      000684 C0 E0            [24] 1759 	push	acc
      000686 90 00 30         [24] 1760 	mov	dptr,#0x0030
      000689 12r00r00         [24] 1761 	lcall	__mulint
      00068C C8               [12] 1762 	xch	a,r0
      00068D E5*00            [12] 1763 	mov	a,_bp
      00068F 24 04            [12] 1764 	add	a,#0x04
      000691 C8               [12] 1765 	xch	a,r0
      000692 A6 82            [24] 1766 	mov	@r0,dpl
      000694 08               [12] 1767 	inc	r0
      000695 A6 83            [24] 1768 	mov	@r0,dph
      000697 15 81            [12] 1769 	dec	sp
      000699 15 81            [12] 1770 	dec	sp
      00069B E5*00            [12] 1771 	mov	a,_bp
      00069D 24 04            [12] 1772 	add	a,#0x04
      00069F F8               [12] 1773 	mov	r0,a
      0006A0 79r13            [12] 1774 	mov	r1,#_x
      0006A2 E7               [12] 1775 	mov	a,@r1
      0006A3 26               [12] 1776 	add	a,@r0
      0006A4 C0 E0            [24] 1777 	push	acc
      0006A6 09               [12] 1778 	inc	r1
      0006A7 E7               [12] 1779 	mov	a,@r1
      0006A8 08               [12] 1780 	inc	r0
      0006A9 36               [12] 1781 	addc	a,@r0
      0006AA C0 E0            [24] 1782 	push	acc
      0006AC E5*00            [12] 1783 	mov	a,_bp
      0006AE 24 03            [12] 1784 	add	a,#0x03
      0006B0 F8               [12] 1785 	mov	r0,a
      0006B1 D0 E0            [24] 1786 	pop	acc
      0006B3 F6               [12] 1787 	mov	@r0,a
      0006B4 18               [12] 1788 	dec	r0
      0006B5 D0 E0            [24] 1789 	pop	acc
      0006B7 F6               [12] 1790 	mov	@r0,a
      0006B8 A8*00            [24] 1791 	mov	r0,_bp
      0006BA 08               [12] 1792 	inc	r0
      0006BB 08               [12] 1793 	inc	r0
      0006BC E6               [12] 1794 	mov	a,@r0
      0006BD 24r00            [12] 1795 	add	a,#_u
      0006BF F5 82            [12] 1796 	mov	dpl,a
      0006C1 08               [12] 1797 	inc	r0
      0006C2 E6               [12] 1798 	mov	a,@r0
      0006C3 34s48            [12] 1799 	addc	a,#(_u >> 8)
      0006C5 F5 83            [12] 1800 	mov	dph,a
      0006C7 E0               [24] 1801 	movx	a,@dptr
      0006C8 FB               [12] 1802 	mov	r3,a
      0006C9 A8*00            [24] 1803 	mov	r0,_bp
      0006CB 08               [12] 1804 	inc	r0
      0006CC C3               [12] 1805 	clr	c
      0006CD E4               [12] 1806 	clr	a
      0006CE 9B               [12] 1807 	subb	a,r3
      0006CF F6               [12] 1808 	mov	@r0,a
                                   1809 ;	life.c:242: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006D0 78r15            [12] 1810 	mov	r0,#_y
      0006D2 74 FF            [12] 1811 	mov	a,#0xff
      0006D4 26               [12] 1812 	add	a,@r0
      0006D5 FA               [12] 1813 	mov	r2,a
      0006D6 74 FF            [12] 1814 	mov	a,#0xff
      0006D8 08               [12] 1815 	inc	r0
      0006D9 36               [12] 1816 	addc	a,@r0
      0006DA FB               [12] 1817 	mov	r3,a
      0006DB 74 C0            [12] 1818 	mov	a,#0xc0
      0006DD 2A               [12] 1819 	add	a,r2
      0006DE FA               [12] 1820 	mov	r2,a
      0006DF E4               [12] 1821 	clr	a
      0006E0 3B               [12] 1822 	addc	a,r3
      0006E1 FB               [12] 1823 	mov	r3,a
      0006E2 74 C0            [12] 1824 	mov	a,#0xc0
      0006E4 C0 E0            [24] 1825 	push	acc
      0006E6 E4               [12] 1826 	clr	a
      0006E7 C0 E0            [24] 1827 	push	acc
      0006E9 8A 82            [24] 1828 	mov	dpl,r2
      0006EB 8B 83            [24] 1829 	mov	dph,r3
      0006ED 12r00r00         [24] 1830 	lcall	__modsint
      0006F0 AA 82            [24] 1831 	mov	r2,dpl
      0006F2 AB 83            [24] 1832 	mov	r3,dph
      0006F4 15 81            [12] 1833 	dec	sp
      0006F6 15 81            [12] 1834 	dec	sp
      0006F8 C0 02            [24] 1835 	push	ar2
      0006FA C0 03            [24] 1836 	push	ar3
      0006FC 90 00 30         [24] 1837 	mov	dptr,#0x0030
      0006FF 12r00r00         [24] 1838 	lcall	__mulint
      000702 AA 82            [24] 1839 	mov	r2,dpl
      000704 AB 83            [24] 1840 	mov	r3,dph
      000706 15 81            [12] 1841 	dec	sp
      000708 15 81            [12] 1842 	dec	sp
      00070A 78r13            [12] 1843 	mov	r0,#_x
      00070C 74 FF            [12] 1844 	mov	a,#0xff
      00070E 26               [12] 1845 	add	a,@r0
      00070F FC               [12] 1846 	mov	r4,a
      000710 74 FF            [12] 1847 	mov	a,#0xff
      000712 08               [12] 1848 	inc	r0
      000713 36               [12] 1849 	addc	a,@r0
      000714 FD               [12] 1850 	mov	r5,a
      000715 74 30            [12] 1851 	mov	a,#0x30
      000717 2C               [12] 1852 	add	a,r4
      000718 FC               [12] 1853 	mov	r4,a
      000719 E4               [12] 1854 	clr	a
      00071A 3D               [12] 1855 	addc	a,r5
      00071B FD               [12] 1856 	mov	r5,a
      00071C C0 03            [24] 1857 	push	ar3
      00071E C0 02            [24] 1858 	push	ar2
      000720 74 30            [12] 1859 	mov	a,#0x30
      000722 C0 E0            [24] 1860 	push	acc
      000724 E4               [12] 1861 	clr	a
      000725 C0 E0            [24] 1862 	push	acc
      000727 8C 82            [24] 1863 	mov	dpl,r4
      000729 8D 83            [24] 1864 	mov	dph,r5
      00072B 12r00r00         [24] 1865 	lcall	__modsint
      00072E AC 82            [24] 1866 	mov	r4,dpl
      000730 AD 83            [24] 1867 	mov	r5,dph
      000732 15 81            [12] 1868 	dec	sp
      000734 15 81            [12] 1869 	dec	sp
      000736 D0 02            [24] 1870 	pop	ar2
      000738 D0 03            [24] 1871 	pop	ar3
      00073A EC               [12] 1872 	mov	a,r4
      00073B 2A               [12] 1873 	add	a,r2
      00073C FE               [12] 1874 	mov	r6,a
      00073D ED               [12] 1875 	mov	a,r5
      00073E 3B               [12] 1876 	addc	a,r3
      00073F FF               [12] 1877 	mov	r7,a
      000740 EE               [12] 1878 	mov	a,r6
      000741 24r00            [12] 1879 	add	a,#_u
      000743 F5 82            [12] 1880 	mov	dpl,a
      000745 EF               [12] 1881 	mov	a,r7
      000746 34s48            [12] 1882 	addc	a,#(_u >> 8)
      000748 F5 83            [12] 1883 	mov	dph,a
      00074A E0               [24] 1884 	movx	a,@dptr
      00074B FF               [12] 1885 	mov	r7,a
      00074C A8*00            [24] 1886 	mov	r0,_bp
      00074E 08               [12] 1887 	inc	r0
      00074F EF               [12] 1888 	mov	a,r7
      000750 26               [12] 1889 	add	a,@r0
      000751 F6               [12] 1890 	mov	@r0,a
                                   1891 ;	life.c:244: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000752 78r13            [12] 1892 	mov	r0,#_x
      000754 E5*00            [12] 1893 	mov	a,_bp
      000756 24 06            [12] 1894 	add	a,#0x06
      000758 F9               [12] 1895 	mov	r1,a
      000759 E6               [12] 1896 	mov	a,@r0
      00075A F7               [12] 1897 	mov	@r1,a
      00075B 08               [12] 1898 	inc	r0
      00075C 09               [12] 1899 	inc	r1
      00075D E6               [12] 1900 	mov	a,@r0
      00075E F7               [12] 1901 	mov	@r1,a
      00075F E5*00            [12] 1902 	mov	a,_bp
      000761 24 06            [12] 1903 	add	a,#0x06
      000763 F8               [12] 1904 	mov	r0,a
      000764 74 30            [12] 1905 	mov	a,#0x30
      000766 26               [12] 1906 	add	a,@r0
      000767 FE               [12] 1907 	mov	r6,a
      000768 E4               [12] 1908 	clr	a
      000769 08               [12] 1909 	inc	r0
      00076A 36               [12] 1910 	addc	a,@r0
      00076B FF               [12] 1911 	mov	r7,a
      00076C C0 05            [24] 1912 	push	ar5
      00076E C0 04            [24] 1913 	push	ar4
      000770 C0 03            [24] 1914 	push	ar3
      000772 C0 02            [24] 1915 	push	ar2
      000774 74 30            [12] 1916 	mov	a,#0x30
      000776 C0 E0            [24] 1917 	push	acc
      000778 E4               [12] 1918 	clr	a
      000779 C0 E0            [24] 1919 	push	acc
      00077B 8E 82            [24] 1920 	mov	dpl,r6
      00077D 8F 83            [24] 1921 	mov	dph,r7
      00077F 12r00r00         [24] 1922 	lcall	__modsint
      000782 C8               [12] 1923 	xch	a,r0
      000783 E5*00            [12] 1924 	mov	a,_bp
      000785 24 08            [12] 1925 	add	a,#0x08
      000787 C8               [12] 1926 	xch	a,r0
      000788 A6 82            [24] 1927 	mov	@r0,dpl
      00078A 08               [12] 1928 	inc	r0
      00078B A6 83            [24] 1929 	mov	@r0,dph
      00078D 15 81            [12] 1930 	dec	sp
      00078F 15 81            [12] 1931 	dec	sp
      000791 D0 02            [24] 1932 	pop	ar2
      000793 D0 03            [24] 1933 	pop	ar3
      000795 E5*00            [12] 1934 	mov	a,_bp
      000797 24 08            [12] 1935 	add	a,#0x08
      000799 F8               [12] 1936 	mov	r0,a
      00079A E6               [12] 1937 	mov	a,@r0
      00079B 2A               [12] 1938 	add	a,r2
      00079C FE               [12] 1939 	mov	r6,a
      00079D 08               [12] 1940 	inc	r0
      00079E E6               [12] 1941 	mov	a,@r0
      00079F 3B               [12] 1942 	addc	a,r3
      0007A0 FF               [12] 1943 	mov	r7,a
      0007A1 EE               [12] 1944 	mov	a,r6
      0007A2 24r00            [12] 1945 	add	a,#_u
      0007A4 F5 82            [12] 1946 	mov	dpl,a
      0007A6 EF               [12] 1947 	mov	a,r7
      0007A7 34s48            [12] 1948 	addc	a,#(_u >> 8)
      0007A9 F5 83            [12] 1949 	mov	dph,a
      0007AB E0               [24] 1950 	movx	a,@dptr
      0007AC FF               [12] 1951 	mov	r7,a
      0007AD A8*00            [24] 1952 	mov	r0,_bp
      0007AF 08               [12] 1953 	inc	r0
      0007B0 EF               [12] 1954 	mov	a,r7
      0007B1 26               [12] 1955 	add	a,@r0
      0007B2 F6               [12] 1956 	mov	@r0,a
                                   1957 ;	life.c:246: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007B3 E5*00            [12] 1958 	mov	a,_bp
      0007B5 24 06            [12] 1959 	add	a,#0x06
      0007B7 F8               [12] 1960 	mov	r0,a
      0007B8 74 31            [12] 1961 	mov	a,#0x31
      0007BA 26               [12] 1962 	add	a,@r0
      0007BB FE               [12] 1963 	mov	r6,a
      0007BC E4               [12] 1964 	clr	a
      0007BD 08               [12] 1965 	inc	r0
      0007BE 36               [12] 1966 	addc	a,@r0
      0007BF FF               [12] 1967 	mov	r7,a
      0007C0 C0 03            [24] 1968 	push	ar3
      0007C2 C0 02            [24] 1969 	push	ar2
      0007C4 74 30            [12] 1970 	mov	a,#0x30
      0007C6 C0 E0            [24] 1971 	push	acc
      0007C8 E4               [12] 1972 	clr	a
      0007C9 C0 E0            [24] 1973 	push	acc
      0007CB 8E 82            [24] 1974 	mov	dpl,r6
      0007CD 8F 83            [24] 1975 	mov	dph,r7
      0007CF 12r00r00         [24] 1976 	lcall	__modsint
      0007D2 AE 82            [24] 1977 	mov	r6,dpl
      0007D4 AF 83            [24] 1978 	mov	r7,dph
      0007D6 15 81            [12] 1979 	dec	sp
      0007D8 15 81            [12] 1980 	dec	sp
      0007DA D0 02            [24] 1981 	pop	ar2
      0007DC D0 03            [24] 1982 	pop	ar3
      0007DE D0 04            [24] 1983 	pop	ar4
      0007E0 D0 05            [24] 1984 	pop	ar5
      0007E2 EE               [12] 1985 	mov	a,r6
      0007E3 2A               [12] 1986 	add	a,r2
      0007E4 FA               [12] 1987 	mov	r2,a
      0007E5 EF               [12] 1988 	mov	a,r7
      0007E6 3B               [12] 1989 	addc	a,r3
      0007E7 FB               [12] 1990 	mov	r3,a
      0007E8 EA               [12] 1991 	mov	a,r2
      0007E9 24r00            [12] 1992 	add	a,#_u
      0007EB F5 82            [12] 1993 	mov	dpl,a
      0007ED EB               [12] 1994 	mov	a,r3
      0007EE 34s48            [12] 1995 	addc	a,#(_u >> 8)
      0007F0 F5 83            [12] 1996 	mov	dph,a
      0007F2 E0               [24] 1997 	movx	a,@dptr
      0007F3 FB               [12] 1998 	mov	r3,a
      0007F4 A8*00            [24] 1999 	mov	r0,_bp
      0007F6 08               [12] 2000 	inc	r0
      0007F7 EB               [12] 2001 	mov	a,r3
      0007F8 26               [12] 2002 	add	a,@r0
      0007F9 F6               [12] 2003 	mov	@r0,a
                                   2004 ;	life.c:248: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007FA 78r15            [12] 2005 	mov	r0,#_y
      0007FC E5*00            [12] 2006 	mov	a,_bp
      0007FE 24 0A            [12] 2007 	add	a,#0x0a
      000800 F9               [12] 2008 	mov	r1,a
      000801 E6               [12] 2009 	mov	a,@r0
      000802 F7               [12] 2010 	mov	@r1,a
      000803 08               [12] 2011 	inc	r0
      000804 09               [12] 2012 	inc	r1
      000805 E6               [12] 2013 	mov	a,@r0
      000806 F7               [12] 2014 	mov	@r1,a
      000807 E5*00            [12] 2015 	mov	a,_bp
      000809 24 0A            [12] 2016 	add	a,#0x0a
      00080B F8               [12] 2017 	mov	r0,a
      00080C 74 C0            [12] 2018 	mov	a,#0xc0
      00080E 26               [12] 2019 	add	a,@r0
      00080F FA               [12] 2020 	mov	r2,a
      000810 E4               [12] 2021 	clr	a
      000811 08               [12] 2022 	inc	r0
      000812 36               [12] 2023 	addc	a,@r0
      000813 FB               [12] 2024 	mov	r3,a
      000814 C0 07            [24] 2025 	push	ar7
      000816 C0 06            [24] 2026 	push	ar6
      000818 C0 05            [24] 2027 	push	ar5
      00081A C0 04            [24] 2028 	push	ar4
      00081C 74 C0            [12] 2029 	mov	a,#0xc0
      00081E C0 E0            [24] 2030 	push	acc
      000820 E4               [12] 2031 	clr	a
      000821 C0 E0            [24] 2032 	push	acc
      000823 8A 82            [24] 2033 	mov	dpl,r2
      000825 8B 83            [24] 2034 	mov	dph,r3
      000827 12r00r00         [24] 2035 	lcall	__modsint
      00082A AA 82            [24] 2036 	mov	r2,dpl
      00082C AB 83            [24] 2037 	mov	r3,dph
      00082E 15 81            [12] 2038 	dec	sp
      000830 15 81            [12] 2039 	dec	sp
      000832 C0 02            [24] 2040 	push	ar2
      000834 C0 03            [24] 2041 	push	ar3
      000836 90 00 30         [24] 2042 	mov	dptr,#0x0030
      000839 12r00r00         [24] 2043 	lcall	__mulint
      00083C C8               [12] 2044 	xch	a,r0
      00083D E5*00            [12] 2045 	mov	a,_bp
      00083F 24 0C            [12] 2046 	add	a,#0x0c
      000841 C8               [12] 2047 	xch	a,r0
      000842 A6 82            [24] 2048 	mov	@r0,dpl
      000844 08               [12] 2049 	inc	r0
      000845 A6 83            [24] 2050 	mov	@r0,dph
      000847 15 81            [12] 2051 	dec	sp
      000849 15 81            [12] 2052 	dec	sp
      00084B D0 04            [24] 2053 	pop	ar4
      00084D D0 05            [24] 2054 	pop	ar5
      00084F D0 06            [24] 2055 	pop	ar6
      000851 D0 07            [24] 2056 	pop	ar7
      000853 E5*00            [12] 2057 	mov	a,_bp
      000855 24 0C            [12] 2058 	add	a,#0x0c
      000857 F8               [12] 2059 	mov	r0,a
      000858 EC               [12] 2060 	mov	a,r4
      000859 26               [12] 2061 	add	a,@r0
      00085A FA               [12] 2062 	mov	r2,a
      00085B ED               [12] 2063 	mov	a,r5
      00085C 08               [12] 2064 	inc	r0
      00085D 36               [12] 2065 	addc	a,@r0
      00085E FB               [12] 2066 	mov	r3,a
      00085F EA               [12] 2067 	mov	a,r2
      000860 24r00            [12] 2068 	add	a,#_u
      000862 F5 82            [12] 2069 	mov	dpl,a
      000864 EB               [12] 2070 	mov	a,r3
      000865 34s48            [12] 2071 	addc	a,#(_u >> 8)
      000867 F5 83            [12] 2072 	mov	dph,a
      000869 E0               [24] 2073 	movx	a,@dptr
      00086A FB               [12] 2074 	mov	r3,a
      00086B A8*00            [24] 2075 	mov	r0,_bp
      00086D 08               [12] 2076 	inc	r0
      00086E EB               [12] 2077 	mov	a,r3
      00086F 26               [12] 2078 	add	a,@r0
      000870 F6               [12] 2079 	mov	@r0,a
                                   2080 ;	life.c:250: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000871 E5*00            [12] 2081 	mov	a,_bp
      000873 24 0C            [12] 2082 	add	a,#0x0c
      000875 F8               [12] 2083 	mov	r0,a
      000876 E5*00            [12] 2084 	mov	a,_bp
      000878 24 08            [12] 2085 	add	a,#0x08
      00087A F9               [12] 2086 	mov	r1,a
      00087B E7               [12] 2087 	mov	a,@r1
      00087C 26               [12] 2088 	add	a,@r0
      00087D FA               [12] 2089 	mov	r2,a
      00087E 09               [12] 2090 	inc	r1
      00087F E7               [12] 2091 	mov	a,@r1
      000880 08               [12] 2092 	inc	r0
      000881 36               [12] 2093 	addc	a,@r0
      000882 FB               [12] 2094 	mov	r3,a
      000883 EA               [12] 2095 	mov	a,r2
      000884 24r00            [12] 2096 	add	a,#_u
      000886 F5 82            [12] 2097 	mov	dpl,a
      000888 EB               [12] 2098 	mov	a,r3
      000889 34s48            [12] 2099 	addc	a,#(_u >> 8)
      00088B F5 83            [12] 2100 	mov	dph,a
      00088D E0               [24] 2101 	movx	a,@dptr
      00088E FB               [12] 2102 	mov	r3,a
      00088F A8*00            [24] 2103 	mov	r0,_bp
      000891 08               [12] 2104 	inc	r0
      000892 EB               [12] 2105 	mov	a,r3
      000893 26               [12] 2106 	add	a,@r0
      000894 F6               [12] 2107 	mov	@r0,a
                                   2108 ;	life.c:252: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000895 E5*00            [12] 2109 	mov	a,_bp
      000897 24 0C            [12] 2110 	add	a,#0x0c
      000899 F8               [12] 2111 	mov	r0,a
      00089A EE               [12] 2112 	mov	a,r6
      00089B 26               [12] 2113 	add	a,@r0
      00089C FA               [12] 2114 	mov	r2,a
      00089D EF               [12] 2115 	mov	a,r7
      00089E 08               [12] 2116 	inc	r0
      00089F 36               [12] 2117 	addc	a,@r0
      0008A0 FB               [12] 2118 	mov	r3,a
      0008A1 EA               [12] 2119 	mov	a,r2
      0008A2 24r00            [12] 2120 	add	a,#_u
      0008A4 F5 82            [12] 2121 	mov	dpl,a
      0008A6 EB               [12] 2122 	mov	a,r3
      0008A7 34s48            [12] 2123 	addc	a,#(_u >> 8)
      0008A9 F5 83            [12] 2124 	mov	dph,a
      0008AB E0               [24] 2125 	movx	a,@dptr
      0008AC FB               [12] 2126 	mov	r3,a
      0008AD A8*00            [24] 2127 	mov	r0,_bp
      0008AF 08               [12] 2128 	inc	r0
      0008B0 E5*00            [12] 2129 	mov	a,_bp
      0008B2 24 0C            [12] 2130 	add	a,#0x0c
      0008B4 F9               [12] 2131 	mov	r1,a
      0008B5 EB               [12] 2132 	mov	a,r3
      0008B6 26               [12] 2133 	add	a,@r0
      0008B7 F7               [12] 2134 	mov	@r1,a
                                   2135 ;	life.c:254: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008B8 E5*00            [12] 2136 	mov	a,_bp
      0008BA 24 0A            [12] 2137 	add	a,#0x0a
      0008BC F8               [12] 2138 	mov	r0,a
      0008BD 74 C1            [12] 2139 	mov	a,#0xc1
      0008BF 26               [12] 2140 	add	a,@r0
      0008C0 FA               [12] 2141 	mov	r2,a
      0008C1 E4               [12] 2142 	clr	a
      0008C2 08               [12] 2143 	inc	r0
      0008C3 36               [12] 2144 	addc	a,@r0
      0008C4 FB               [12] 2145 	mov	r3,a
      0008C5 C0 07            [24] 2146 	push	ar7
      0008C7 C0 06            [24] 2147 	push	ar6
      0008C9 C0 05            [24] 2148 	push	ar5
      0008CB C0 04            [24] 2149 	push	ar4
      0008CD 74 C0            [12] 2150 	mov	a,#0xc0
      0008CF C0 E0            [24] 2151 	push	acc
      0008D1 E4               [12] 2152 	clr	a
      0008D2 C0 E0            [24] 2153 	push	acc
      0008D4 8A 82            [24] 2154 	mov	dpl,r2
      0008D6 8B 83            [24] 2155 	mov	dph,r3
      0008D8 12r00r00         [24] 2156 	lcall	__modsint
      0008DB AA 82            [24] 2157 	mov	r2,dpl
      0008DD AB 83            [24] 2158 	mov	r3,dph
      0008DF 15 81            [12] 2159 	dec	sp
      0008E1 15 81            [12] 2160 	dec	sp
      0008E3 C0 02            [24] 2161 	push	ar2
      0008E5 C0 03            [24] 2162 	push	ar3
      0008E7 90 00 30         [24] 2163 	mov	dptr,#0x0030
      0008EA 12r00r00         [24] 2164 	lcall	__mulint
      0008ED AA 82            [24] 2165 	mov	r2,dpl
      0008EF AB 83            [24] 2166 	mov	r3,dph
      0008F1 15 81            [12] 2167 	dec	sp
      0008F3 15 81            [12] 2168 	dec	sp
      0008F5 D0 04            [24] 2169 	pop	ar4
      0008F7 D0 05            [24] 2170 	pop	ar5
      0008F9 D0 06            [24] 2171 	pop	ar6
      0008FB D0 07            [24] 2172 	pop	ar7
      0008FD EC               [12] 2173 	mov	a,r4
      0008FE 2A               [12] 2174 	add	a,r2
      0008FF FC               [12] 2175 	mov	r4,a
      000900 ED               [12] 2176 	mov	a,r5
      000901 3B               [12] 2177 	addc	a,r3
      000902 FD               [12] 2178 	mov	r5,a
      000903 EC               [12] 2179 	mov	a,r4
      000904 24r00            [12] 2180 	add	a,#_u
      000906 F5 82            [12] 2181 	mov	dpl,a
      000908 ED               [12] 2182 	mov	a,r5
      000909 34s48            [12] 2183 	addc	a,#(_u >> 8)
      00090B F5 83            [12] 2184 	mov	dph,a
      00090D E0               [24] 2185 	movx	a,@dptr
      00090E FD               [12] 2186 	mov	r5,a
      00090F E5*00            [12] 2187 	mov	a,_bp
      000911 24 0C            [12] 2188 	add	a,#0x0c
      000913 F8               [12] 2189 	mov	r0,a
      000914 E5*00            [12] 2190 	mov	a,_bp
      000916 24 0C            [12] 2191 	add	a,#0x0c
      000918 F9               [12] 2192 	mov	r1,a
      000919 ED               [12] 2193 	mov	a,r5
      00091A 26               [12] 2194 	add	a,@r0
      00091B F7               [12] 2195 	mov	@r1,a
                                   2196 ;	life.c:256: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00091C E5*00            [12] 2197 	mov	a,_bp
      00091E 24 08            [12] 2198 	add	a,#0x08
      000920 F8               [12] 2199 	mov	r0,a
      000921 E6               [12] 2200 	mov	a,@r0
      000922 2A               [12] 2201 	add	a,r2
      000923 FC               [12] 2202 	mov	r4,a
      000924 08               [12] 2203 	inc	r0
      000925 E6               [12] 2204 	mov	a,@r0
      000926 3B               [12] 2205 	addc	a,r3
      000927 FD               [12] 2206 	mov	r5,a
      000928 EC               [12] 2207 	mov	a,r4
      000929 24r00            [12] 2208 	add	a,#_u
      00092B F5 82            [12] 2209 	mov	dpl,a
      00092D ED               [12] 2210 	mov	a,r5
      00092E 34s48            [12] 2211 	addc	a,#(_u >> 8)
      000930 F5 83            [12] 2212 	mov	dph,a
      000932 E0               [24] 2213 	movx	a,@dptr
      000933 FD               [12] 2214 	mov	r5,a
      000934 E5*00            [12] 2215 	mov	a,_bp
      000936 24 0C            [12] 2216 	add	a,#0x0c
      000938 F8               [12] 2217 	mov	r0,a
      000939 ED               [12] 2218 	mov	a,r5
      00093A 26               [12] 2219 	add	a,@r0
      00093B FD               [12] 2220 	mov	r5,a
                                   2221 ;	life.c:257: y1 = 1; x1 = 1;
      00093C 78r20            [12] 2222 	mov	r0,#_y1
      00093E 76 01            [12] 2223 	mov	@r0,#0x01
      000940 08               [12] 2224 	inc	r0
      000941 76 00            [12] 2225 	mov	@r0,#0x00
      000943 78r1E            [12] 2226 	mov	r0,#_x1
      000945 76 01            [12] 2227 	mov	@r0,#0x01
      000947 08               [12] 2228 	inc	r0
      000948 76 00            [12] 2229 	mov	@r0,#0x00
                                   2230 ;	life.c:258: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00094A EE               [12] 2231 	mov	a,r6
      00094B 2A               [12] 2232 	add	a,r2
      00094C FE               [12] 2233 	mov	r6,a
      00094D EF               [12] 2234 	mov	a,r7
      00094E 3B               [12] 2235 	addc	a,r3
      00094F FF               [12] 2236 	mov	r7,a
      000950 EE               [12] 2237 	mov	a,r6
      000951 24r00            [12] 2238 	add	a,#_u
      000953 F5 82            [12] 2239 	mov	dpl,a
      000955 EF               [12] 2240 	mov	a,r7
      000956 34s48            [12] 2241 	addc	a,#(_u >> 8)
      000958 F5 83            [12] 2242 	mov	dph,a
      00095A E0               [24] 2243 	movx	a,@dptr
      00095B 2D               [12] 2244 	add	a,r5
      00095C FF               [12] 2245 	mov	r7,a
      00095D 78r1B            [12] 2246 	mov	r0,#_n
      00095F A6 07            [24] 2247 	mov	@r0,ar7
                                   2248 ;	life.c:260: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000961 A8*00            [24] 2249 	mov	r0,_bp
      000963 08               [12] 2250 	inc	r0
      000964 08               [12] 2251 	inc	r0
      000965 E6               [12] 2252 	mov	a,@r0
      000966 24r00            [12] 2253 	add	a,#_nu
      000968 FD               [12] 2254 	mov	r5,a
      000969 08               [12] 2255 	inc	r0
      00096A E6               [12] 2256 	mov	a,@r0
      00096B 34s6C            [12] 2257 	addc	a,#(_nu >> 8)
      00096D FE               [12] 2258 	mov	r6,a
      00096E BF 03 02         [24] 2259 	cjne	r7,#0x03,00597$
      000971 80 28            [24] 2260 	sjmp	00266$
      000973                       2261 00597$:
      000973 BF 02 21         [24] 2262 	cjne	r7,#0x02,00265$
      000976 E5*00            [12] 2263 	mov	a,_bp
      000978 24 04            [12] 2264 	add	a,#0x04
      00097A F8               [12] 2265 	mov	r0,a
      00097B E5*00            [12] 2266 	mov	a,_bp
      00097D 24 06            [12] 2267 	add	a,#0x06
      00097F F9               [12] 2268 	mov	r1,a
      000980 E7               [12] 2269 	mov	a,@r1
      000981 26               [12] 2270 	add	a,@r0
      000982 FC               [12] 2271 	mov	r4,a
      000983 09               [12] 2272 	inc	r1
      000984 E7               [12] 2273 	mov	a,@r1
      000985 08               [12] 2274 	inc	r0
      000986 36               [12] 2275 	addc	a,@r0
      000987 FF               [12] 2276 	mov	r7,a
      000988 EC               [12] 2277 	mov	a,r4
      000989 24r00            [12] 2278 	add	a,#_u
      00098B FC               [12] 2279 	mov	r4,a
      00098C EF               [12] 2280 	mov	a,r7
      00098D 34s48            [12] 2281 	addc	a,#(_u >> 8)
      00098F FF               [12] 2282 	mov	r7,a
      000990 8C 82            [24] 2283 	mov	dpl,r4
      000992 8F 83            [24] 2284 	mov	dph,r7
      000994 E0               [24] 2285 	movx	a,@dptr
      000995 70 04            [24] 2286 	jnz	00266$
      000997                       2287 00265$:
                                   2288 ;	assignBit
      000997 C2*00            [12] 2289 	clr	b0
      000999 80 02            [24] 2290 	sjmp	00267$
      00099B                       2291 00266$:
                                   2292 ;	assignBit
      00099B D2*00            [12] 2293 	setb	b0
      00099D                       2294 00267$:
      00099D A2*00            [12] 2295 	mov	c,b0
      00099F E4               [12] 2296 	clr	a
      0009A0 33               [12] 2297 	rlc	a
      0009A1 8D 82            [24] 2298 	mov	dpl,r5
      0009A3 8E 83            [24] 2299 	mov	dph,r6
      0009A5 F0               [24] 2300 	movx	@dptr,a
                                   2301 ;	life.c:261: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0009A6 78r15            [12] 2302 	mov	r0,#_y
      0009A8 E6               [12] 2303 	mov	a,@r0
      0009A9 C0 E0            [24] 2304 	push	acc
      0009AB 08               [12] 2305 	inc	r0
      0009AC E6               [12] 2306 	mov	a,@r0
      0009AD C0 E0            [24] 2307 	push	acc
      0009AF 90 00 30         [24] 2308 	mov	dptr,#0x0030
      0009B2 12r00r00         [24] 2309 	lcall	__mulint
      0009B5 AE 82            [24] 2310 	mov	r6,dpl
      0009B7 AF 83            [24] 2311 	mov	r7,dph
      0009B9 15 81            [12] 2312 	dec	sp
      0009BB 15 81            [12] 2313 	dec	sp
      0009BD 78r13            [12] 2314 	mov	r0,#_x
      0009BF E6               [12] 2315 	mov	a,@r0
      0009C0 2E               [12] 2316 	add	a,r6
      0009C1 FE               [12] 2317 	mov	r6,a
      0009C2 08               [12] 2318 	inc	r0
      0009C3 E6               [12] 2319 	mov	a,@r0
      0009C4 3F               [12] 2320 	addc	a,r7
      0009C5 FF               [12] 2321 	mov	r7,a
      0009C6 EE               [12] 2322 	mov	a,r6
      0009C7 24r00            [12] 2323 	add	a,#_pu
      0009C9 F5 82            [12] 2324 	mov	dpl,a
      0009CB EF               [12] 2325 	mov	a,r7
      0009CC 34s24            [12] 2326 	addc	a,#(_pu >> 8)
      0009CE F5 83            [12] 2327 	mov	dph,a
      0009D0 E0               [24] 2328 	movx	a,@dptr
      0009D1 FD               [12] 2329 	mov	r5,a
      0009D2 EE               [12] 2330 	mov	a,r6
      0009D3 24r00            [12] 2331 	add	a,#_nu
      0009D5 F5 82            [12] 2332 	mov	dpl,a
      0009D7 EF               [12] 2333 	mov	a,r7
      0009D8 34s6C            [12] 2334 	addc	a,#(_nu >> 8)
      0009DA F5 83            [12] 2335 	mov	dph,a
      0009DC E0               [24] 2336 	movx	a,@dptr
      0009DD FC               [12] 2337 	mov	r4,a
      0009DE 6D               [12] 2338 	xrl	a,r5
      0009DF 78r1D            [12] 2339 	mov	r0,#_cycle2
      0009E1 46               [12] 2340 	orl	a,@r0
      0009E2 F6               [12] 2341 	mov	@r0,a
                                   2342 ;	life.c:262: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0009E3 EE               [12] 2343 	mov	a,r6
      0009E4 24r00            [12] 2344 	add	a,#_u
      0009E6 F5 82            [12] 2345 	mov	dpl,a
      0009E8 EF               [12] 2346 	mov	a,r7
      0009E9 34s48            [12] 2347 	addc	a,#(_u >> 8)
      0009EB F5 83            [12] 2348 	mov	dph,a
      0009ED E0               [24] 2349 	movx	a,@dptr
      0009EE FF               [12] 2350 	mov	r7,a
      0009EF EC               [12] 2351 	mov	a,r4
      0009F0 6F               [12] 2352 	xrl	a,r7
      0009F1 78r1C            [12] 2353 	mov	r0,#_fixed
      0009F3 46               [12] 2354 	orl	a,@r0
      0009F4 F6               [12] 2355 	mov	@r0,a
                                   2356 ;	life.c:238: for (x = 0; x < W; x++) {
      0009F5 78r13            [12] 2357 	mov	r0,#_x
      0009F7 06               [12] 2358 	inc	@r0
      0009F8 B6 00 02         [24] 2359 	cjne	@r0,#0x00,00601$
      0009FB 08               [12] 2360 	inc	r0
      0009FC 06               [12] 2361 	inc	@r0
      0009FD                       2362 00601$:
      0009FD 78r13            [12] 2363 	mov	r0,#_x
      0009FF C3               [12] 2364 	clr	c
      000A00 E6               [12] 2365 	mov	a,@r0
      000A01 94 30            [12] 2366 	subb	a,#0x30
      000A03 08               [12] 2367 	inc	r0
      000A04 E6               [12] 2368 	mov	a,@r0
      000A05 64 80            [12] 2369 	xrl	a,#0x80
      000A07 94 80            [12] 2370 	subb	a,#0x80
      000A09 50 03            [24] 2371 	jnc	00602$
      000A0B 02r06r7D         [24] 2372 	ljmp	00238$
      000A0E                       2373 00602$:
                                   2374 ;	life.c:235: for (y = 0; y < H; y++) {
      000A0E 78r15            [12] 2375 	mov	r0,#_y
      000A10 06               [12] 2376 	inc	@r0
      000A11 B6 00 02         [24] 2377 	cjne	@r0,#0x00,00603$
      000A14 08               [12] 2378 	inc	r0
      000A15 06               [12] 2379 	inc	@r0
      000A16                       2380 00603$:
      000A16 78r15            [12] 2381 	mov	r0,#_y
      000A18 C3               [12] 2382 	clr	c
      000A19 E6               [12] 2383 	mov	a,@r0
      000A1A 94 C0            [12] 2384 	subb	a,#0xc0
      000A1C 08               [12] 2385 	inc	r0
      000A1D E6               [12] 2386 	mov	a,@r0
      000A1E 64 80            [12] 2387 	xrl	a,#0x80
      000A20 94 80            [12] 2388 	subb	a,#0x80
      000A22 50 03            [24] 2389 	jnc	00604$
      000A24 02r06r61         [24] 2390 	ljmp	00240$
      000A27                       2391 00604$:
                                   2392 ;	life.c:266: OE76 = OE76_0;
      000A27 78r12            [12] 2393 	mov	r0,#_OE76
      000A29 76 3F            [12] 2394 	mov	@r0,#0x3f
                                   2395 ;	life.c:267: flashOE();
      000A2B 12r00r49         [24] 2396 	lcall	_flashOE
                                   2397 ;	life.c:269: cycle2 = !cycle2;
      000A2E 78r1D            [12] 2398 	mov	r0,#_cycle2
      000A30 E6               [12] 2399 	mov	a,@r0
      000A31 B4 01 00         [24] 2400 	cjne	a,#0x01,00605$
      000A34                       2401 00605$:
      000A34 92*00            [24] 2402 	mov	b0,c
      000A36 78r1D            [12] 2403 	mov	r0,#_cycle2
      000A38 E4               [12] 2404 	clr	a
      000A39 33               [12] 2405 	rlc	a
      000A3A F6               [12] 2406 	mov	@r0,a
                                   2407 ;	life.c:270: fixed = !fixed;
      000A3B 78r1C            [12] 2408 	mov	r0,#_fixed
      000A3D E6               [12] 2409 	mov	a,@r0
      000A3E B4 01 00         [24] 2410 	cjne	a,#0x01,00606$
      000A41                       2411 00606$:
      000A41 92*00            [24] 2412 	mov	b0,c
      000A43 78r1C            [12] 2413 	mov	r0,#_fixed
      000A45 E4               [12] 2414 	clr	a
      000A46 33               [12] 2415 	rlc	a
      000A47 F6               [12] 2416 	mov	@r0,a
                                   2417 ;	life.c:272: memcpy(pu, u, sizeof (u));
      000A48 E4               [12] 2418 	clr	a
      000A49 C0 E0            [24] 2419 	push	acc
      000A4B 74 24            [12] 2420 	mov	a,#0x24
      000A4D C0 E0            [24] 2421 	push	acc
      000A4F 74r00            [12] 2422 	mov	a,#_u
      000A51 C0 E0            [24] 2423 	push	acc
      000A53 74s48            [12] 2424 	mov	a,#(_u >> 8)
      000A55 C0 E0            [24] 2425 	push	acc
      000A57 E4               [12] 2426 	clr	a
      000A58 C0 E0            [24] 2427 	push	acc
      000A5A 90r24r00         [24] 2428 	mov	dptr,#_pu
      000A5D 75 F0 00         [24] 2429 	mov	b,#0x00
      000A60 12r00r00         [24] 2430 	lcall	___memcpy
      000A63 E5 81            [12] 2431 	mov	a,sp
      000A65 24 FB            [12] 2432 	add	a,#0xfb
      000A67 F5 81            [12] 2433 	mov	sp,a
                                   2434 ;	life.c:273: memcpy(u, nu, sizeof (nu));
      000A69 E4               [12] 2435 	clr	a
      000A6A C0 E0            [24] 2436 	push	acc
      000A6C 74 24            [12] 2437 	mov	a,#0x24
      000A6E C0 E0            [24] 2438 	push	acc
      000A70 74r00            [12] 2439 	mov	a,#_nu
      000A72 C0 E0            [24] 2440 	push	acc
      000A74 74s6C            [12] 2441 	mov	a,#(_nu >> 8)
      000A76 C0 E0            [24] 2442 	push	acc
      000A78 E4               [12] 2443 	clr	a
      000A79 C0 E0            [24] 2444 	push	acc
      000A7B 90r48r00         [24] 2445 	mov	dptr,#_u
      000A7E 75 F0 00         [24] 2446 	mov	b,#0x00
      000A81 12r00r00         [24] 2447 	lcall	___memcpy
      000A84 E5 81            [12] 2448 	mov	a,sp
      000A86 24 FB            [12] 2449 	add	a,#0xfb
      000A88 F5 81            [12] 2450 	mov	sp,a
                                   2451 ;	life.c:327: if (fixed || cycle2) {
      000A8A 78r1C            [12] 2452 	mov	r0,#_fixed
      000A8C E6               [12] 2453 	mov	a,@r0
      000A8D 70 05            [24] 2454 	jnz	00135$
      000A8F 78r1D            [12] 2455 	mov	r0,#_cycle2
      000A91 E6               [12] 2456 	mov	a,@r0
      000A92 60 70            [24] 2457 	jz	00136$
      000A94                       2458 00135$:
                                   2459 ;	life.c:328: printstr("DONE ");
      000A94 7Dr64            [12] 2460 	mov	r5,#___str_10
      000A96 7Es00            [12] 2461 	mov	r6,#(___str_10 >> 8)
      000A98 7F 80            [12] 2462 	mov	r7,#0x80
                                   2463 ;	life.c:74: return;
      000A9A                       2464 00243$:
                                   2465 ;	life.c:72: for (; *s; s++) putchar(*s);
      000A9A 8D 82            [24] 2466 	mov	dpl,r5
      000A9C 8E 83            [24] 2467 	mov	dph,r6
      000A9E 8F F0            [24] 2468 	mov	b,r7
      000AA0 12r00r00         [24] 2469 	lcall	__gptrget
      000AA3 FC               [12] 2470 	mov	r4,a
      000AA4 60 10            [24] 2471 	jz	00201$
      000AA6 7B 00            [12] 2472 	mov	r3,#0x00
      000AA8 8C 82            [24] 2473 	mov	dpl,r4
      000AAA 8B 83            [24] 2474 	mov	dph,r3
      000AAC 12r00r00         [24] 2475 	lcall	_putchar
      000AAF 0D               [12] 2476 	inc	r5
                                   2477 ;	life.c:328: printstr("DONE ");
      000AB0 BD 00 E7         [24] 2478 	cjne	r5,#0x00,00243$
      000AB3 0E               [12] 2479 	inc	r6
      000AB4 80 E4            [24] 2480 	sjmp	00243$
      000AB6                       2481 00201$:
                                   2482 ;	life.c:329: if (fixed) printstr("FIXED\r\n");
      000AB6 78r1C            [12] 2483 	mov	r0,#_fixed
      000AB8 E6               [12] 2484 	mov	a,@r0
      000AB9 60 22            [24] 2485 	jz	00133$
      000ABB 7Dr6A            [12] 2486 	mov	r5,#___str_11
      000ABD 7Es00            [12] 2487 	mov	r6,#(___str_11 >> 8)
      000ABF 7F 80            [12] 2488 	mov	r7,#0x80
                                   2489 ;	life.c:74: return;
      000AC1                       2490 00246$:
                                   2491 ;	life.c:72: for (; *s; s++) putchar(*s);
      000AC1 8D 82            [24] 2492 	mov	dpl,r5
      000AC3 8E 83            [24] 2493 	mov	dph,r6
      000AC5 8F F0            [24] 2494 	mov	b,r7
      000AC7 12r00r00         [24] 2495 	lcall	__gptrget
      000ACA FC               [12] 2496 	mov	r4,a
      000ACB 60 32            [24] 2497 	jz	00134$
      000ACD 7B 00            [12] 2498 	mov	r3,#0x00
      000ACF 8C 82            [24] 2499 	mov	dpl,r4
      000AD1 8B 83            [24] 2500 	mov	dph,r3
      000AD3 12r00r00         [24] 2501 	lcall	_putchar
      000AD6 0D               [12] 2502 	inc	r5
                                   2503 ;	life.c:329: if (fixed) printstr("FIXED\r\n");
      000AD7 BD 00 E7         [24] 2504 	cjne	r5,#0x00,00246$
      000ADA 0E               [12] 2505 	inc	r6
      000ADB 80 E4            [24] 2506 	sjmp	00246$
      000ADD                       2507 00133$:
                                   2508 ;	life.c:330: else printstr("CYCLE2\r\n");
      000ADD 7Dr72            [12] 2509 	mov	r5,#___str_12
      000ADF 7Es00            [12] 2510 	mov	r6,#(___str_12 >> 8)
      000AE1 7F 80            [12] 2511 	mov	r7,#0x80
                                   2512 ;	life.c:74: return;
      000AE3                       2513 00249$:
                                   2514 ;	life.c:72: for (; *s; s++) putchar(*s);
      000AE3 8D 82            [24] 2515 	mov	dpl,r5
      000AE5 8E 83            [24] 2516 	mov	dph,r6
      000AE7 8F F0            [24] 2517 	mov	b,r7
      000AE9 12r00r00         [24] 2518 	lcall	__gptrget
      000AEC FC               [12] 2519 	mov	r4,a
      000AED 60 10            [24] 2520 	jz	00134$
      000AEF 7B 00            [12] 2521 	mov	r3,#0x00
      000AF1 8C 82            [24] 2522 	mov	dpl,r4
      000AF3 8B 83            [24] 2523 	mov	dph,r3
      000AF5 12r00r00         [24] 2524 	lcall	_putchar
      000AF8 0D               [12] 2525 	inc	r5
                                   2526 ;	life.c:330: else printstr("CYCLE2\r\n");
      000AF9 BD 00 E7         [24] 2527 	cjne	r5,#0x00,00249$
      000AFC 0E               [12] 2528 	inc	r6
      000AFD 80 E4            [24] 2529 	sjmp	00249$
      000AFF                       2530 00134$:
                                   2531 ;	life.c:331: (void)getchar();
      000AFF 12r00r0A         [24] 2532 	lcall	_getchar
                                   2533 ;	life.c:332: break;
      000B02 80 50            [24] 2534 	sjmp	00145$
      000B04                       2535 00136$:
                                   2536 ;	life.c:335: c = getchar_poll();
      000B04 12r00r17         [24] 2537 	lcall	_getchar_poll
      000B07 AE 82            [24] 2538 	mov	r6,dpl
      000B09 AF 83            [24] 2539 	mov	r7,dph
      000B0B 78r19            [12] 2540 	mov	r0,#_c
      000B0D A6 06            [24] 2541 	mov	@r0,ar6
      000B0F 08               [12] 2542 	inc	r0
      000B10 A6 07            [24] 2543 	mov	@r0,ar7
                                   2544 ;	life.c:336: if (c > 0) {
      000B12 C3               [12] 2545 	clr	c
      000B13 E4               [12] 2546 	clr	a
      000B14 9E               [12] 2547 	subb	a,r6
      000B15 74 80            [12] 2548 	mov	a,#(0x00 ^ 0x80)
      000B17 8F F0            [24] 2549 	mov	b,r7
      000B19 63 F0 80         [24] 2550 	xrl	b,#0x80
      000B1C 95 F0            [12] 2551 	subb	a,b
      000B1E 40 03            [24] 2552 	jc	00616$
      000B20 02r06r36         [24] 2553 	ljmp	00253$
      000B23                       2554 00616$:
                                   2555 ;	life.c:337: c = toupper(c);
      000B23 8E 82            [24] 2556 	mov	dpl,r6
      000B25 8F 83            [24] 2557 	mov	dph,r7
      000B27 12r00r00         [24] 2558 	lcall	_toupper
      000B2A AE 82            [24] 2559 	mov	r6,dpl
      000B2C AF 83            [24] 2560 	mov	r7,dph
      000B2E 78r19            [12] 2561 	mov	r0,#_c
      000B30 A6 06            [24] 2562 	mov	@r0,ar6
      000B32 08               [12] 2563 	inc	r0
      000B33 A6 07            [24] 2564 	mov	@r0,ar7
                                   2565 ;	life.c:338: if (c == (int)'T') i0 = 1;
      000B35 BE 54 0A         [24] 2566 	cjne	r6,#0x54,00141$
      000B38 BF 00 07         [24] 2567 	cjne	r7,#0x00,00141$
      000B3B 78r10            [12] 2568 	mov	r0,#_i0
      000B3D 76 01            [12] 2569 	mov	@r0,#0x01
      000B3F 02r06r36         [24] 2570 	ljmp	00253$
      000B42                       2571 00141$:
                                   2572 ;	life.c:339: else if (c == (int)'B') i1 = 1;
      000B42 BE 42 05         [24] 2573 	cjne	r6,#0x42,00619$
      000B45 BF 00 02         [24] 2574 	cjne	r7,#0x00,00619$
      000B48 80 03            [24] 2575 	sjmp	00620$
      000B4A                       2576 00619$:
      000B4A 02r06r36         [24] 2577 	ljmp	00253$
      000B4D                       2578 00620$:
      000B4D 78r11            [12] 2579 	mov	r0,#_i1
      000B4F 76 01            [12] 2580 	mov	@r0,#0x01
      000B51 02r06r36         [24] 2581 	ljmp	00253$
      000B54                       2582 00145$:
                                   2583 ;	life.c:343: if (i1) {
      000B54 78r11            [12] 2584 	mov	r0,#_i1
      000B56 E6               [12] 2585 	mov	a,@r0
      000B57 60 25            [24] 2586 	jz	00259$
                                   2587 ;	life.c:344: printstr("BREAK\r\n");
      000B59 7Dr7B            [12] 2588 	mov	r5,#___str_13
      000B5B 7Es00            [12] 2589 	mov	r6,#(___str_13 >> 8)
      000B5D 7F 80            [12] 2590 	mov	r7,#0x80
                                   2591 ;	life.c:74: return;
      000B5F                       2592 00256$:
                                   2593 ;	life.c:72: for (; *s; s++) putchar(*s);
      000B5F 8D 82            [24] 2594 	mov	dpl,r5
      000B61 8E 83            [24] 2595 	mov	dph,r6
      000B63 8F F0            [24] 2596 	mov	b,r7
      000B65 12r00r00         [24] 2597 	lcall	__gptrget
      000B68 FC               [12] 2598 	mov	r4,a
      000B69 60 10            [24] 2599 	jz	00207$
      000B6B 7B 00            [12] 2600 	mov	r3,#0x00
      000B6D 8C 82            [24] 2601 	mov	dpl,r4
      000B6F 8B 83            [24] 2602 	mov	dph,r3
      000B71 12r00r00         [24] 2603 	lcall	_putchar
      000B74 0D               [12] 2604 	inc	r5
                                   2605 ;	life.c:344: printstr("BREAK\r\n");
      000B75 BD 00 E7         [24] 2606 	cjne	r5,#0x00,00256$
      000B78 0E               [12] 2607 	inc	r6
      000B79 80 E4            [24] 2608 	sjmp	00256$
      000B7B                       2609 00207$:
                                   2610 ;	life.c:345: (void)getchar();
      000B7B 12r00r0A         [24] 2611 	lcall	_getchar
      000B7E                       2612 00259$:
                                   2613 ;	life.c:298: for (i0 = 0; !i0; ) {	
      000B7E 78r10            [12] 2614 	mov	r0,#_i0
      000B80 E6               [12] 2615 	mov	a,@r0
      000B81 70 03            [24] 2616 	jnz	00624$
      000B83 02r02rCD         [24] 2617 	ljmp	00258$
      000B86                       2618 00624$:
                                   2619 ;	life.c:349: term:
      000B86                       2620 00149$:
                                   2621 ;	life.c:350: EA = 0;
                                   2622 ;	assignBit
      000B86 C2 AF            [12] 2623 	clr	_EA
                                   2624 ;	life.c:351: printstr("TERM\r\n");
      000B88 7Dr83            [12] 2625 	mov	r5,#___str_14
      000B8A 7Es00            [12] 2626 	mov	r6,#(___str_14 >> 8)
      000B8C 7F 80            [12] 2627 	mov	r7,#0x80
                                   2628 ;	life.c:74: return;
      000B8E                       2629 00261$:
                                   2630 ;	life.c:72: for (; *s; s++) putchar(*s);
      000B8E 8D 82            [24] 2631 	mov	dpl,r5
      000B90 8E 83            [24] 2632 	mov	dph,r6
      000B92 8F F0            [24] 2633 	mov	b,r7
      000B94 12r00r00         [24] 2634 	lcall	__gptrget
      000B97 FC               [12] 2635 	mov	r4,a
      000B98 60 10            [24] 2636 	jz	00209$
      000B9A 7B 00            [12] 2637 	mov	r3,#0x00
      000B9C 8C 82            [24] 2638 	mov	dpl,r4
      000B9E 8B 83            [24] 2639 	mov	dph,r3
      000BA0 12r00r00         [24] 2640 	lcall	_putchar
      000BA3 0D               [12] 2641 	inc	r5
                                   2642 ;	life.c:351: printstr("TERM\r\n");
      000BA4 BD 00 E7         [24] 2643 	cjne	r5,#0x00,00261$
      000BA7 0E               [12] 2644 	inc	r6
      000BA8 80 E4            [24] 2645 	sjmp	00261$
      000BAA                       2646 00209$:
                                   2647 ;	life.c:352: (void)getchar();
      000BAA 12r00r0A         [24] 2648 	lcall	_getchar
                                   2649 ;	life.c:354: PCON |= 2;
      000BAD 43 87 02         [24] 2650 	orl	_PCON,#0x02
                                   2651 ;	life.c:356: return;
                                   2652 ;	life.c:357: }
      000BB0 85*00 81         [24] 2653 	mov	sp,_bp
      000BB3 D0*00            [24] 2654 	pop	_bp
      000BB5 22               [24] 2655 	ret
                                   2656 	.area CSEG    (CODE)
                                   2657 	.area CONST   (CODE)
                                   2658 	.area CONST   (CODE)
      000000                       2659 ___str_0:
      000000 1B                    2660 	.db 0x1b
      000001 5B 3F 32 35 6C        2661 	.ascii "[?25l"
      000006 00                    2662 	.db 0x00
                                   2663 	.area CSEG    (CODE)
                                   2664 	.area CONST   (CODE)
      000007                       2665 ___str_1:
      000007 1B                    2666 	.db 0x1b
      000008 5B 32 4A 47 45 4E 20  2667 	.ascii "[2JGEN "
      00000F 00                    2668 	.db 0x00
                                   2669 	.area CSEG    (CODE)
                                   2670 	.area CONST   (CODE)
      000010                       2671 ___str_2:
      000010 0D                    2672 	.db 0x0d
      000011 0A                    2673 	.db 0x0a
      000012 00                    2674 	.db 0x00
                                   2675 	.area CSEG    (CODE)
                                   2676 	.area CONST   (CODE)
      000013                       2677 ___str_3:
      000013 1B                    2678 	.db 0x1b
      000014 5B 3F 32 35 68        2679 	.ascii "[?25h"
      000019 00                    2680 	.db 0x00
                                   2681 	.area CSEG    (CODE)
                                   2682 	.area CONST   (CODE)
      00001A                       2683 ___str_4:
      00001A 4C 4F 41 44 20 30 20  2684 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000028 00                    2685 	.db 0x00
                                   2686 	.area CSEG    (CODE)
                                   2687 	.area CONST   (CODE)
      000029                       2688 ___str_5:
      000029 3E                    2689 	.ascii ">"
      00002A 0D                    2690 	.db 0x0d
      00002B 0A                    2691 	.db 0x0a
      00002C 00                    2692 	.db 0x00
                                   2693 	.area CSEG    (CODE)
                                   2694 	.area CONST   (CODE)
      00002D                       2695 ___str_6:
      00002D 52 41 4E 44 4F 4D     2696 	.ascii "RANDOM"
      000033 00                    2697 	.db 0x00
                                   2698 	.area CSEG    (CODE)
                                   2699 	.area CONST   (CODE)
      000034                       2700 ___str_7:
      000034 1B                    2701 	.db 0x1b
      000035 5B 3F 32 35 68        2702 	.ascii "[?25h"
      00003A 1B                    2703 	.db 0x1b
      00003B 5B 6D                 2704 	.ascii "[m"
      00003D 00                    2705 	.db 0x00
                                   2706 	.area CSEG    (CODE)
                                   2707 	.area CONST   (CODE)
      00003E                       2708 ___str_8:
      00003E 4C 49 46 45 20 49 4E  2709 	.ascii "LIFE INIT T L R P"
             49 54 20 54 20 4C 20
             52 20 50
      00004F 0D                    2710 	.db 0x0d
      000050 0A                    2711 	.db 0x0a
      000051 00                    2712 	.db 0x00
                                   2713 	.area CSEG    (CODE)
                                   2714 	.area CONST   (CODE)
      000052                       2715 ___str_9:
      000052 52 45 41 44 59 20 54  2716 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000061 0D                    2717 	.db 0x0d
      000062 0A                    2718 	.db 0x0a
      000063 00                    2719 	.db 0x00
                                   2720 	.area CSEG    (CODE)
                                   2721 	.area CONST   (CODE)
      000064                       2722 ___str_10:
      000064 44 4F 4E 45 20        2723 	.ascii "DONE "
      000069 00                    2724 	.db 0x00
                                   2725 	.area CSEG    (CODE)
                                   2726 	.area CONST   (CODE)
      00006A                       2727 ___str_11:
      00006A 46 49 58 45 44        2728 	.ascii "FIXED"
      00006F 0D                    2729 	.db 0x0d
      000070 0A                    2730 	.db 0x0a
      000071 00                    2731 	.db 0x00
                                   2732 	.area CSEG    (CODE)
                                   2733 	.area CONST   (CODE)
      000072                       2734 ___str_12:
      000072 43 59 43 4C 45 32     2735 	.ascii "CYCLE2"
      000078 0D                    2736 	.db 0x0d
      000079 0A                    2737 	.db 0x0a
      00007A 00                    2738 	.db 0x00
                                   2739 	.area CSEG    (CODE)
                                   2740 	.area CONST   (CODE)
      00007B                       2741 ___str_13:
      00007B 42 52 45 41 4B        2742 	.ascii "BREAK"
      000080 0D                    2743 	.db 0x0d
      000081 0A                    2744 	.db 0x0a
      000082 00                    2745 	.db 0x00
                                   2746 	.area CSEG    (CODE)
                                   2747 	.area CONST   (CODE)
      000083                       2748 ___str_14:
      000083 54 45 52 4D           2749 	.ascii "TERM"
      000087 0D                    2750 	.db 0x0d
      000088 0A                    2751 	.db 0x0a
      000089 00                    2752 	.db 0x00
                                   2753 	.area CSEG    (CODE)
                                   2754 	.area XINIT   (CODE)
                                   2755 	.area CABS    (ABS,CODE)
