                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print16x
                                     16 	.globl _printstr
                                     17 	.globl _getchar_poll
                                     18 	.globl _getchar
                                     19 	.globl _putchar
                                     20 	.globl _toupper
                                     21 	.globl ___memcpy
                                     22 	.globl _memset
                                     23 	.globl _srand
                                     24 	.globl _rand
                                     25 	.globl _CY
                                     26 	.globl _AC
                                     27 	.globl _F0
                                     28 	.globl _RS1
                                     29 	.globl _RS0
                                     30 	.globl _OV
                                     31 	.globl _FL
                                     32 	.globl _P
                                     33 	.globl _TF2
                                     34 	.globl _EXF2
                                     35 	.globl _RCLK
                                     36 	.globl _TCLK
                                     37 	.globl _EXEN2
                                     38 	.globl _TR2
                                     39 	.globl _C_T2
                                     40 	.globl _CP_RL2
                                     41 	.globl _T2CON_7
                                     42 	.globl _T2CON_6
                                     43 	.globl _T2CON_5
                                     44 	.globl _T2CON_4
                                     45 	.globl _T2CON_3
                                     46 	.globl _T2CON_2
                                     47 	.globl _T2CON_1
                                     48 	.globl _T2CON_0
                                     49 	.globl _PT2
                                     50 	.globl _PS
                                     51 	.globl _PT1
                                     52 	.globl _PX1
                                     53 	.globl _PT0
                                     54 	.globl _PX0
                                     55 	.globl _RD
                                     56 	.globl _WR
                                     57 	.globl _T1
                                     58 	.globl _T0
                                     59 	.globl _INT1
                                     60 	.globl _INT0
                                     61 	.globl _TXD
                                     62 	.globl _RXD
                                     63 	.globl _P3_7
                                     64 	.globl _P3_6
                                     65 	.globl _P3_5
                                     66 	.globl _P3_4
                                     67 	.globl _P3_3
                                     68 	.globl _P3_2
                                     69 	.globl _P3_1
                                     70 	.globl _P3_0
                                     71 	.globl _EA
                                     72 	.globl _ET2
                                     73 	.globl _ES
                                     74 	.globl _ET1
                                     75 	.globl _EX1
                                     76 	.globl _ET0
                                     77 	.globl _EX0
                                     78 	.globl _P2_7
                                     79 	.globl _P2_6
                                     80 	.globl _P2_5
                                     81 	.globl _P2_4
                                     82 	.globl _P2_3
                                     83 	.globl _P2_2
                                     84 	.globl _P2_1
                                     85 	.globl _P2_0
                                     86 	.globl _SM0
                                     87 	.globl _SM1
                                     88 	.globl _SM2
                                     89 	.globl _REN
                                     90 	.globl _TB8
                                     91 	.globl _RB8
                                     92 	.globl _TI
                                     93 	.globl _RI
                                     94 	.globl _T2EX
                                     95 	.globl _T2
                                     96 	.globl _P1_7
                                     97 	.globl _P1_6
                                     98 	.globl _P1_5
                                     99 	.globl _P1_4
                                    100 	.globl _P1_3
                                    101 	.globl _P1_2
                                    102 	.globl _P1_1
                                    103 	.globl _P1_0
                                    104 	.globl _TF1
                                    105 	.globl _TR1
                                    106 	.globl _TF0
                                    107 	.globl _TR0
                                    108 	.globl _IE1
                                    109 	.globl _IT1
                                    110 	.globl _IE0
                                    111 	.globl _IT0
                                    112 	.globl _P0_7
                                    113 	.globl _P0_6
                                    114 	.globl _P0_5
                                    115 	.globl _P0_4
                                    116 	.globl _P0_3
                                    117 	.globl _P0_2
                                    118 	.globl _P0_1
                                    119 	.globl _P0_0
                                    120 	.globl _B
                                    121 	.globl _A
                                    122 	.globl _ACC
                                    123 	.globl _PSW
                                    124 	.globl _TH2
                                    125 	.globl _TL2
                                    126 	.globl _RCAP2H
                                    127 	.globl _RCAP2L
                                    128 	.globl _T2MOD
                                    129 	.globl _T2CON
                                    130 	.globl _IP
                                    131 	.globl _P3
                                    132 	.globl _IE
                                    133 	.globl _P2
                                    134 	.globl _SBUF
                                    135 	.globl _SCON
                                    136 	.globl _P1
                                    137 	.globl _TH1
                                    138 	.globl _TH0
                                    139 	.globl _TL1
                                    140 	.globl _TL0
                                    141 	.globl _TMOD
                                    142 	.globl _TCON
                                    143 	.globl _PCON
                                    144 	.globl _DPH
                                    145 	.globl _DPL
                                    146 	.globl _SP
                                    147 	.globl _P0
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        287 	.ds 8
                                    288 ;--------------------------------------------------------
                                    289 ; overlayable bit register bank
                                    290 ;--------------------------------------------------------
                                    291 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        292 bits:
      000000                        293 	.ds 1
                           008000   294 	b0 = bits[0]
                           008100   295 	b1 = bits[1]
                           008200   296 	b2 = bits[2]
                           008300   297 	b3 = bits[3]
                           008400   298 	b4 = bits[4]
                           008500   299 	b5 = bits[5]
                           008600   300 	b6 = bits[6]
                           008700   301 	b7 = bits[7]
                                    302 ;--------------------------------------------------------
                                    303 ; internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area DSEG    (DATA)
                                    306 ;--------------------------------------------------------
                                    307 ; overlayable items in internal ram 
                                    308 ;--------------------------------------------------------
                                    309 ;--------------------------------------------------------
                                    310 ; Stack segment in internal ram 
                                    311 ;--------------------------------------------------------
                                    312 	.area	SSEG
      000000                        313 __start__stack:
      000000                        314 	.ds	1
                                    315 
                                    316 ;--------------------------------------------------------
                                    317 ; indirectly addressable internal ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area ISEG    (DATA)
      000000                        320 _i0:
      000000                        321 	.ds 1
      000001                        322 _i1:
      000001                        323 	.ds 1
      000002                        324 _OE76:
      000002                        325 	.ds 1
      000003                        326 _x:
      000003                        327 	.ds 2
      000005                        328 _y:
      000005                        329 	.ds 2
      000007                        330 _j:
      000007                        331 	.ds 2
      000009                        332 _c:
      000009                        333 	.ds 2
      00000B                        334 _n:
      00000B                        335 	.ds 1
      00000C                        336 _fixed:
      00000C                        337 	.ds 1
      00000D                        338 _cycle2:
      00000D                        339 	.ds 1
      00000E                        340 _dx:
      00000E                        341 	.ds 2
      000010                        342 _dy:
      000010                        343 	.ds 2
      000012                        344 _generation:
      000012                        345 	.ds 4
                                    346 ;--------------------------------------------------------
                                    347 ; absolute internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area IABS    (ABS,DATA)
                                    350 	.area IABS    (ABS,DATA)
                                    351 ;--------------------------------------------------------
                                    352 ; bit data
                                    353 ;--------------------------------------------------------
                                    354 	.area BSEG    (BIT)
                                    355 ;--------------------------------------------------------
                                    356 ; paged external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area PSEG    (PAG,XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XSEG    (XDATA)
                           008000   363 _RND	=	0x8000
                           00F006   364 _OEreg	=	0xf006
      000000                        365 _iu:
      000000                        366 	.ds 9216
      002400                        367 _pu:
      002400                        368 	.ds 9216
      004800                        369 _u:
      004800                        370 	.ds 9216
      006C00                        371 _nu:
      006C00                        372 	.ds 9216
                                    373 ;--------------------------------------------------------
                                    374 ; absolute external ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XABS    (ABS,XDATA)
                                    377 ;--------------------------------------------------------
                                    378 ; external initialized ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area XISEG   (XDATA)
                                    381 	.area HOME    (CODE)
                                    382 	.area GSINIT0 (CODE)
                                    383 	.area GSINIT1 (CODE)
                                    384 	.area GSINIT2 (CODE)
                                    385 	.area GSINIT3 (CODE)
                                    386 	.area GSINIT4 (CODE)
                                    387 	.area GSINIT5 (CODE)
                                    388 	.area GSINIT  (CODE)
                                    389 	.area GSFINAL (CODE)
                                    390 	.area CSEG    (CODE)
                                    391 ;--------------------------------------------------------
                                    392 ; interrupt vector 
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
      000000                        395 __interrupt_vect:
      000000 02r00r00         [24]  396 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  397 	ljmp	_int0
      000006                        398 	.ds	5
      00000B 32               [24]  399 	reti
      00000C                        400 	.ds	7
      000013 02r00r0C         [24]  401 	ljmp	_int1
                                    402 ;--------------------------------------------------------
                                    403 ; global & static initialisations
                                    404 ;--------------------------------------------------------
                                    405 	.area HOME    (CODE)
                                    406 	.area GSINIT  (CODE)
                                    407 	.area GSFINAL (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.globl __sdcc_gsinit_startup
                                    410 	.globl __sdcc_program_startup
                                    411 	.globl __start__stack
                                    412 	.globl __mcs51_genXINIT
                                    413 	.globl __mcs51_genXRAMCLEAR
                                    414 	.globl __mcs51_genRAMCLEAR
                                    415 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  416 	ljmp	__sdcc_program_startup
                                    417 ;--------------------------------------------------------
                                    418 ; Home
                                    419 ;--------------------------------------------------------
                                    420 	.area HOME    (CODE)
                                    421 	.area HOME    (CODE)
      000016                        422 __sdcc_program_startup:
      000016 02r01r1E         [24]  423 	ljmp	_main
                                    424 ;	return from main will return to caller
                                    425 ;--------------------------------------------------------
                                    426 ; code
                                    427 ;--------------------------------------------------------
                                    428 	.area CSEG    (CODE)
                                    429 ;------------------------------------------------------------
                                    430 ;Allocation info for local variables in function 'int0'
                                    431 ;------------------------------------------------------------
                                    432 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    433 ;	-----------------------------------------
                                    434 ;	 function int0
                                    435 ;	-----------------------------------------
      000000                        436 _int0:
                           00000F   437 	ar7 = 0x0f
                           00000E   438 	ar6 = 0x0e
                           00000D   439 	ar5 = 0x0d
                           00000C   440 	ar4 = 0x0c
                           00000B   441 	ar3 = 0x0b
                           00000A   442 	ar2 = 0x0a
                           000009   443 	ar1 = 0x09
                           000008   444 	ar0 = 0x08
      000000 C0 D0            [24]  445 	push	psw
      000002 75 D0 08         [24]  446 	mov	psw,#0x08
                                    447 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  448 	mov	r0,#_i0
      000007 76 01            [12]  449 	mov	@r0,#0x01
                                    450 ;	life.c:15: }
      000009 D0 D0            [24]  451 	pop	psw
      00000B 32               [24]  452 	reti
                                    453 ;	eliminated unneeded push/pop dpl
                                    454 ;	eliminated unneeded push/pop dph
                                    455 ;	eliminated unneeded push/pop b
                                    456 ;	eliminated unneeded push/pop acc
                                    457 ;------------------------------------------------------------
                                    458 ;Allocation info for local variables in function 'int1'
                                    459 ;------------------------------------------------------------
                                    460 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    461 ;	-----------------------------------------
                                    462 ;	 function int1
                                    463 ;	-----------------------------------------
      00000C                        464 _int1:
      00000C C0 D0            [24]  465 	push	psw
      00000E 75 D0 08         [24]  466 	mov	psw,#0x08
                                    467 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  468 	mov	r0,#_i1
      000013 76 01            [12]  469 	mov	@r0,#0x01
                                    470 ;	life.c:19: }
      000015 D0 D0            [24]  471 	pop	psw
      000017 32               [24]  472 	reti
                                    473 ;	eliminated unneeded push/pop dpl
                                    474 ;	eliminated unneeded push/pop dph
                                    475 ;	eliminated unneeded push/pop b
                                    476 ;	eliminated unneeded push/pop acc
                                    477 ;------------------------------------------------------------
                                    478 ;Allocation info for local variables in function 'flashOE'
                                    479 ;------------------------------------------------------------
                                    480 ;	life.c:29: static void flashOE(void) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function flashOE
                                    483 ;	-----------------------------------------
      000018                        484 _flashOE:
                           000007   485 	ar7 = 0x07
                           000006   486 	ar6 = 0x06
                           000005   487 	ar5 = 0x05
                           000004   488 	ar4 = 0x04
                           000003   489 	ar3 = 0x03
                           000002   490 	ar2 = 0x02
                           000001   491 	ar1 = 0x01
                           000000   492 	ar0 = 0x00
                                    493 ;	life.c:30: P1_7 = 0;
                                    494 ;	assignBit
      000018 C2 97            [12]  495 	clr	_P1_7
                                    496 ;	life.c:35: __endasm;
      00001A 00               [12]  497 	nop
      00001B 00               [12]  498 	nop
      00001C 00               [12]  499 	nop
                                    500 ;	life.c:36: OEreg = OE76;
      00001D 78r02            [12]  501 	mov	r0,#_OE76
      00001F 90 F0 06         [24]  502 	mov	dptr,#_OEreg
      000022 E6               [12]  503 	mov	a,@r0
      000023 F0               [24]  504 	movx	@dptr,a
                                    505 ;	life.c:37: P1_7 = 1;
                                    506 ;	assignBit
      000024 D2 97            [12]  507 	setb	_P1_7
                                    508 ;	life.c:42: __endasm;
      000026 00               [12]  509 	nop
      000027 00               [12]  510 	nop
      000028 00               [12]  511 	nop
                                    512 ;	life.c:44: return;
                                    513 ;	life.c:45: }
      000029 22               [24]  514 	ret
                                    515 ;------------------------------------------------------------
                                    516 ;Allocation info for local variables in function 'show'
                                    517 ;------------------------------------------------------------
                                    518 ;hdr                       Allocated to registers r7 
                                    519 ;------------------------------------------------------------
                                    520 ;	life.c:81: void show(char hdr) {
                                    521 ;	-----------------------------------------
                                    522 ;	 function show
                                    523 ;	-----------------------------------------
      00002A                        524 _show:
      00002A AF 82            [24]  525 	mov	r7,dpl
                                    526 ;	life.c:82: printstr("\033[?25l");
      00002C 90r00r00         [24]  527 	mov	dptr,#___str_0
      00002F 75 F0 80         [24]  528 	mov	b,#0x80
      000032 C0 07            [24]  529 	push	ar7
      000034 12r00r00         [24]  530 	lcall	_printstr
      000037 D0 07            [24]  531 	pop	ar7
                                    532 ;	life.c:84: if (hdr) {
      000039 EF               [12]  533 	mov	a,r7
      00003A 60 58            [24]  534 	jz	00102$
                                    535 ;	life.c:85: printstr("\033[2JGEN ");
      00003C 90r00r07         [24]  536 	mov	dptr,#___str_1
      00003F 75 F0 80         [24]  537 	mov	b,#0x80
      000042 12r00r00         [24]  538 	lcall	_printstr
                                    539 ;	life.c:75: print16x(generation[1]);
      000045 78r14            [12]  540 	mov	r0,#(_generation + 0x0002)
      000047 86 06            [24]  541 	mov	ar6,@r0
      000049 08               [12]  542 	inc	r0
      00004A 86 07            [24]  543 	mov	ar7,@r0
      00004C 8E 82            [24]  544 	mov	dpl,r6
      00004E 8F 83            [24]  545 	mov	dph,r7
      000050 12r00r00         [24]  546 	lcall	_print16x
                                    547 ;	life.c:76: print16x(generation[0]);
      000053 78r12            [12]  548 	mov	r0,#_generation
      000055 86 06            [24]  549 	mov	ar6,@r0
      000057 08               [12]  550 	inc	r0
      000058 86 07            [24]  551 	mov	ar7,@r0
      00005A 8E 82            [24]  552 	mov	dpl,r6
      00005C 8F 83            [24]  553 	mov	dph,r7
      00005E 12r00r00         [24]  554 	lcall	_print16x
                                    555 ;	life.c:87: printstr("\r\n");
      000061 90r00r10         [24]  556 	mov	dptr,#___str_2
      000064 75 F0 80         [24]  557 	mov	b,#0x80
      000067 12r00r00         [24]  558 	lcall	_printstr
                                    559 ;	life.c:68: generation[0]++;
      00006A 78r12            [12]  560 	mov	r0,#_generation
      00006C 86 06            [24]  561 	mov	ar6,@r0
      00006E 08               [12]  562 	inc	r0
      00006F 86 07            [24]  563 	mov	ar7,@r0
      000071 0E               [12]  564 	inc	r6
      000072 BE 00 01         [24]  565 	cjne	r6,#0x00,00147$
      000075 0F               [12]  566 	inc	r7
      000076                        567 00147$:
      000076 78r12            [12]  568 	mov	r0,#_generation
      000078 A6 06            [24]  569 	mov	@r0,ar6
      00007A 08               [12]  570 	inc	r0
      00007B A6 07            [24]  571 	mov	@r0,ar7
                                    572 ;	life.c:69: if (!generation[0]) generation[1]++;
      00007D EE               [12]  573 	mov	a,r6
      00007E 4F               [12]  574 	orl	a,r7
      00007F 70 13            [24]  575 	jnz	00102$
      000081 78r14            [12]  576 	mov	r0,#(_generation + 0x0002)
      000083 86 06            [24]  577 	mov	ar6,@r0
      000085 08               [12]  578 	inc	r0
      000086 86 07            [24]  579 	mov	ar7,@r0
      000088 0E               [12]  580 	inc	r6
      000089 BE 00 01         [24]  581 	cjne	r6,#0x00,00149$
      00008C 0F               [12]  582 	inc	r7
      00008D                        583 00149$:
      00008D 78r14            [12]  584 	mov	r0,#(_generation + 0x0002)
      00008F A6 06            [24]  585 	mov	@r0,ar6
      000091 08               [12]  586 	inc	r0
      000092 A6 07            [24]  587 	mov	@r0,ar7
                                    588 ;	life.c:88: updategen();
      000094                        589 00102$:
                                    590 ;	life.c:91: for (x = 0; x < W; x++) {
      000094 78r03            [12]  591 	mov	r0,#_x
      000096 E4               [12]  592 	clr	a
      000097 F6               [12]  593 	mov	@r0,a
      000098 08               [12]  594 	inc	r0
      000099 F6               [12]  595 	mov	@r0,a
      00009A                        596 00114$:
                                    597 ;	life.c:92: for (y = 0; y < H; y++)
      00009A 78r05            [12]  598 	mov	r0,#_y
      00009C E4               [12]  599 	clr	a
      00009D F6               [12]  600 	mov	@r0,a
      00009E 08               [12]  601 	inc	r0
      00009F F6               [12]  602 	mov	@r0,a
      0000A0                        603 00112$:
                                    604 ;	life.c:93: if (u[A2D(W, y, x)]) putchar('1');
      0000A0 78r05            [12]  605 	mov	r0,#_y
      0000A2 E6               [12]  606 	mov	a,@r0
      0000A3 C0 E0            [24]  607 	push	acc
      0000A5 08               [12]  608 	inc	r0
      0000A6 E6               [12]  609 	mov	a,@r0
      0000A7 C0 E0            [24]  610 	push	acc
      0000A9 90 00 30         [24]  611 	mov	dptr,#0x0030
      0000AC 12r00r00         [24]  612 	lcall	__mulint
      0000AF AE 82            [24]  613 	mov	r6,dpl
      0000B1 AF 83            [24]  614 	mov	r7,dph
      0000B3 15 81            [12]  615 	dec	sp
      0000B5 15 81            [12]  616 	dec	sp
      0000B7 78r03            [12]  617 	mov	r0,#_x
      0000B9 E6               [12]  618 	mov	a,@r0
      0000BA 2E               [12]  619 	add	a,r6
      0000BB FE               [12]  620 	mov	r6,a
      0000BC 08               [12]  621 	inc	r0
      0000BD E6               [12]  622 	mov	a,@r0
      0000BE 3F               [12]  623 	addc	a,r7
      0000BF FF               [12]  624 	mov	r7,a
      0000C0 EE               [12]  625 	mov	a,r6
      0000C1 24r00            [12]  626 	add	a,#_u
      0000C3 FE               [12]  627 	mov	r6,a
      0000C4 EF               [12]  628 	mov	a,r7
      0000C5 34s48            [12]  629 	addc	a,#(_u >> 8)
      0000C7 FF               [12]  630 	mov	r7,a
      0000C8 8E 82            [24]  631 	mov	dpl,r6
      0000CA 8F 83            [24]  632 	mov	dph,r7
      0000CC E0               [24]  633 	movx	a,@dptr
      0000CD 60 08            [24]  634 	jz	00104$
      0000CF 90 00 31         [24]  635 	mov	dptr,#0x0031
      0000D2 12r00r00         [24]  636 	lcall	_putchar
      0000D5 80 06            [24]  637 	sjmp	00113$
      0000D7                        638 00104$:
                                    639 ;	life.c:94: else putchar('0');
      0000D7 90 00 30         [24]  640 	mov	dptr,#0x0030
      0000DA 12r00r00         [24]  641 	lcall	_putchar
      0000DD                        642 00113$:
                                    643 ;	life.c:92: for (y = 0; y < H; y++)
      0000DD 78r05            [12]  644 	mov	r0,#_y
      0000DF 06               [12]  645 	inc	@r0
      0000E0 B6 00 02         [24]  646 	cjne	@r0,#0x00,00151$
      0000E3 08               [12]  647 	inc	r0
      0000E4 06               [12]  648 	inc	@r0
      0000E5                        649 00151$:
      0000E5 78r05            [12]  650 	mov	r0,#_y
      0000E7 C3               [12]  651 	clr	c
      0000E8 E6               [12]  652 	mov	a,@r0
      0000E9 94 C0            [12]  653 	subb	a,#0xc0
      0000EB 08               [12]  654 	inc	r0
      0000EC E6               [12]  655 	mov	a,@r0
      0000ED 64 80            [12]  656 	xrl	a,#0x80
      0000EF 94 80            [12]  657 	subb	a,#0x80
      0000F1 40 AD            [24]  658 	jc	00112$
                                    659 ;	life.c:95: printstr("\r\n");
      0000F3 90r00r10         [24]  660 	mov	dptr,#___str_2
      0000F6 75 F0 80         [24]  661 	mov	b,#0x80
      0000F9 12r00r00         [24]  662 	lcall	_printstr
                                    663 ;	life.c:91: for (x = 0; x < W; x++) {
      0000FC 78r03            [12]  664 	mov	r0,#_x
      0000FE 06               [12]  665 	inc	@r0
      0000FF B6 00 02         [24]  666 	cjne	@r0,#0x00,00153$
      000102 08               [12]  667 	inc	r0
      000103 06               [12]  668 	inc	@r0
      000104                        669 00153$:
      000104 78r03            [12]  670 	mov	r0,#_x
      000106 C3               [12]  671 	clr	c
      000107 E6               [12]  672 	mov	a,@r0
      000108 94 30            [12]  673 	subb	a,#0x30
      00010A 08               [12]  674 	inc	r0
      00010B E6               [12]  675 	mov	a,@r0
      00010C 64 80            [12]  676 	xrl	a,#0x80
      00010E 94 80            [12]  677 	subb	a,#0x80
      000110 50 03            [24]  678 	jnc	00154$
      000112 02r00r9A         [24]  679 	ljmp	00114$
      000115                        680 00154$:
                                    681 ;	life.c:98: printstr("\033[?25h");
      000115 90r00r13         [24]  682 	mov	dptr,#___str_3
      000118 75 F0 80         [24]  683 	mov	b,#0x80
                                    684 ;	life.c:100: return;
                                    685 ;	life.c:101: }
      00011B 02r00r00         [24]  686 	ljmp	_printstr
                                    687 ;------------------------------------------------------------
                                    688 ;Allocation info for local variables in function 'main'
                                    689 ;------------------------------------------------------------
                                    690 ;sloc0                     Allocated to stack - _bp +1
                                    691 ;sloc1                     Allocated to stack - _bp +2
                                    692 ;sloc2                     Allocated to stack - _bp +4
                                    693 ;sloc3                     Allocated to stack - _bp +6
                                    694 ;sloc4                     Allocated to stack - _bp +8
                                    695 ;sloc5                     Allocated to stack - _bp +10
                                    696 ;sloc6                     Allocated to stack - _bp +12
                                    697 ;------------------------------------------------------------
                                    698 ;	life.c:209: void main(void) {
                                    699 ;	-----------------------------------------
                                    700 ;	 function main
                                    701 ;	-----------------------------------------
      00011E                        702 _main:
      00011E C0*00            [24]  703 	push	_bp
      000120 E5 81            [12]  704 	mov	a,sp
      000122 F5*00            [12]  705 	mov	_bp,a
      000124 24 0D            [12]  706 	add	a,#0x0d
      000126 F5 81            [12]  707 	mov	sp,a
                                    708 ;	life.c:210: IT0 = 1;
                                    709 ;	assignBit
      000128 D2 88            [12]  710 	setb	_IT0
                                    711 ;	life.c:211: IT1 = 1;
                                    712 ;	assignBit
      00012A D2 8A            [12]  713 	setb	_IT1
                                    714 ;	life.c:212: EX0 = 1;
                                    715 ;	assignBit
      00012C D2 A8            [12]  716 	setb	_EX0
                                    717 ;	life.c:213: EX1 = 1;
                                    718 ;	assignBit
      00012E D2 AA            [12]  719 	setb	_EX1
                                    720 ;	life.c:214: EA = 1;	
                                    721 ;	assignBit
      000130 D2 AF            [12]  722 	setb	_EA
                                    723 ;	life.c:215: P1_7 = 1;
                                    724 ;	assignBit
      000132 D2 97            [12]  725 	setb	_P1_7
                                    726 ;	life.c:220: __endasm;
      000134 00               [12]  727 	nop
      000135 00               [12]  728 	nop
      000136 00               [12]  729 	nop
                                    730 ;	life.c:222: srand(RND);
      000137 90 80 00         [24]  731 	mov	dptr,#_RND
      00013A E0               [24]  732 	movx	a,@dptr
      00013B FE               [12]  733 	mov	r6,a
      00013C A3               [24]  734 	inc	dptr
      00013D E0               [24]  735 	movx	a,@dptr
      00013E FF               [12]  736 	mov	r7,a
      00013F 8E 82            [24]  737 	mov	dpl,r6
      000141 8F 83            [24]  738 	mov	dph,r7
      000143 12r00r00         [24]  739 	lcall	_srand
                                    740 ;	life.c:224: OE76 = OE76_0;
      000146 78r02            [12]  741 	mov	r0,#_OE76
      000148 76 3F            [12]  742 	mov	@r0,#0x3f
                                    743 ;	life.c:225: flashOE();
      00014A 12r00r18         [24]  744 	lcall	_flashOE
                                    745 ;	life.c:227: printstr("\033[?25h\033[m");
      00014D 90r00r34         [24]  746 	mov	dptr,#___str_7
      000150 75 F0 80         [24]  747 	mov	b,#0x80
      000153 12r00r00         [24]  748 	lcall	_printstr
                                    749 ;	life.c:229: for (i0 = 0; !i0; ) {	
      000156 78r00            [12]  750 	mov	r0,#_i0
      000158 76 00            [12]  751 	mov	@r0,#0x00
      00015A                        752 00227$:
                                    753 ;	life.c:230: printstr("LIFE INIT T L R P\r\n");
      00015A 90r00r3E         [24]  754 	mov	dptr,#___str_8
      00015D 75 F0 80         [24]  755 	mov	b,#0x80
      000160 12r00r00         [24]  756 	lcall	_printstr
                                    757 ;	life.c:231: while (1) {
      000163                        758 00110$:
                                    759 ;	life.c:232: c = toupper(getchar());
      000163 12r00r00         [24]  760 	lcall	_getchar
      000166 12r00r00         [24]  761 	lcall	_toupper
      000169 AE 82            [24]  762 	mov	r6,dpl
      00016B AF 83            [24]  763 	mov	r7,dph
      00016D 78r09            [12]  764 	mov	r0,#_c
      00016F A6 06            [24]  765 	mov	@r0,ar6
      000171 08               [12]  766 	inc	r0
      000172 A6 07            [24]  767 	mov	@r0,ar7
                                    768 ;	life.c:233: if (i0 || (c == (int)'T')) goto term;
      000174 78r00            [12]  769 	mov	r0,#_i0
      000176 E6               [12]  770 	mov	a,@r0
      000177 60 03            [24]  771 	jz	00405$
      000179 02r08rC1         [24]  772 	ljmp	00149$
      00017C                        773 00405$:
      00017C BE 54 06         [24]  774 	cjne	r6,#0x54,00406$
      00017F BF 00 03         [24]  775 	cjne	r7,#0x00,00406$
      000182 02r08rC1         [24]  776 	ljmp	00149$
      000185                        777 00406$:
                                    778 ;	life.c:234: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      000185 BE 4C 05         [24]  779 	cjne	r6,#0x4c,00407$
      000188 BF 00 02         [24]  780 	cjne	r7,#0x00,00407$
      00018B 80 0E            [24]  781 	sjmp	00257$
      00018D                        782 00407$:
      00018D BE 52 05         [24]  783 	cjne	r6,#0x52,00408$
      000190 BF 00 02         [24]  784 	cjne	r7,#0x00,00408$
      000193 80 06            [24]  785 	sjmp	00257$
      000195                        786 00408$:
      000195 BE 50 CB         [24]  787 	cjne	r6,#0x50,00110$
      000198 BF 00 C8         [24]  788 	cjne	r7,#0x00,00110$
                                    789 ;	life.c:237: reload:
      00019B                        790 00257$:
      00019B                        791 00112$:
                                    792 ;	life.c:104: memset(u, 0, sizeof (u));
      00019B E4               [12]  793 	clr	a
      00019C C0 E0            [24]  794 	push	acc
      00019E 74 24            [12]  795 	mov	a,#0x24
      0001A0 C0 E0            [24]  796 	push	acc
      0001A2 E4               [12]  797 	clr	a
      0001A3 C0 E0            [24]  798 	push	acc
      0001A5 90r48r00         [24]  799 	mov	dptr,#_u
      0001A8 75 F0 00         [24]  800 	mov	b,#0x00
      0001AB 12r00r00         [24]  801 	lcall	_memset
      0001AE 15 81            [12]  802 	dec	sp
      0001B0 15 81            [12]  803 	dec	sp
      0001B2 15 81            [12]  804 	dec	sp
                                    805 ;	life.c:105: memset(pu, 0, sizeof (pu));
      0001B4 E4               [12]  806 	clr	a
      0001B5 C0 E0            [24]  807 	push	acc
      0001B7 74 24            [12]  808 	mov	a,#0x24
      0001B9 C0 E0            [24]  809 	push	acc
      0001BB E4               [12]  810 	clr	a
      0001BC C0 E0            [24]  811 	push	acc
      0001BE 90r24r00         [24]  812 	mov	dptr,#_pu
      0001C1 75 F0 00         [24]  813 	mov	b,#0x00
      0001C4 12r00r00         [24]  814 	lcall	_memset
      0001C7 15 81            [12]  815 	dec	sp
      0001C9 15 81            [12]  816 	dec	sp
      0001CB 15 81            [12]  817 	dec	sp
                                    818 ;	life.c:239: if (c == (int)'L') loadiu();
      0001CD 78r09            [12]  819 	mov	r0,#_c
      0001CF B6 4C 06         [24]  820 	cjne	@r0,#0x4c,00411$
      0001D2 08               [12]  821 	inc	r0
      0001D3 B6 00 02         [24]  822 	cjne	@r0,#0x00,00411$
      0001D6 80 03            [24]  823 	sjmp	00412$
      0001D8                        824 00411$:
      0001D8 02r02rC8         [24]  825 	ljmp	00116$
      0001DB                        826 00412$:
                                    827 ;	life.c:111: j = 0;
      0001DB 78r07            [12]  828 	mov	r0,#_j
      0001DD E4               [12]  829 	clr	a
      0001DE F6               [12]  830 	mov	@r0,a
      0001DF 08               [12]  831 	inc	r0
      0001E0 F6               [12]  832 	mov	@r0,a
                                    833 ;	life.c:113: printstr("LOAD 0 1 ~ # <");
      0001E1 90r00r1A         [24]  834 	mov	dptr,#___str_4
      0001E4 75 F0 80         [24]  835 	mov	b,#0x80
      0001E7 12r00r00         [24]  836 	lcall	_printstr
                                    837 ;	life.c:115: for (y = 0; y < (H * W); y += W) {
      0001EA 78r05            [12]  838 	mov	r0,#_y
      0001EC E4               [12]  839 	clr	a
      0001ED F6               [12]  840 	mov	@r0,a
      0001EE 08               [12]  841 	inc	r0
      0001EF F6               [12]  842 	mov	@r0,a
      0001F0                        843 00213$:
                                    844 ;	life.c:116: for (x = 0; x < W; x++) {
      0001F0 78r03            [12]  845 	mov	r0,#_x
      0001F2 E4               [12]  846 	clr	a
      0001F3 F6               [12]  847 	mov	@r0,a
      0001F4 08               [12]  848 	inc	r0
      0001F5 F6               [12]  849 	mov	@r0,a
                                    850 ;	life.c:117: while (1) {
      0001F6                        851 00163$:
                                    852 ;	life.c:118: c = getchar();
      0001F6 12r00r00         [24]  853 	lcall	_getchar
      0001F9 AE 82            [24]  854 	mov	r6,dpl
      0001FB AF 83            [24]  855 	mov	r7,dph
      0001FD 78r09            [12]  856 	mov	r0,#_c
      0001FF A6 06            [24]  857 	mov	@r0,ar6
      000201 08               [12]  858 	inc	r0
      000202 A6 07            [24]  859 	mov	@r0,ar7
                                    860 ;	life.c:119: if (c == (int)'0') {
      000204 BE 30 25         [24]  861 	cjne	r6,#0x30,00161$
      000207 BF 00 22         [24]  862 	cjne	r7,#0x00,00161$
                                    863 ;	life.c:120: iu[y + x] = 0;
      00020A 78r05            [12]  864 	mov	r0,#_y
      00020C 79r03            [12]  865 	mov	r1,#_x
      00020E E7               [12]  866 	mov	a,@r1
      00020F 26               [12]  867 	add	a,@r0
      000210 FC               [12]  868 	mov	r4,a
      000211 09               [12]  869 	inc	r1
      000212 E7               [12]  870 	mov	a,@r1
      000213 08               [12]  871 	inc	r0
      000214 36               [12]  872 	addc	a,@r0
      000215 FD               [12]  873 	mov	r5,a
      000216 EC               [12]  874 	mov	a,r4
      000217 24r00            [12]  875 	add	a,#_iu
      000219 F5 82            [12]  876 	mov	dpl,a
      00021B ED               [12]  877 	mov	a,r5
      00021C 34s00            [12]  878 	addc	a,#(_iu >> 8)
      00021E F5 83            [12]  879 	mov	dph,a
      000220 E4               [12]  880 	clr	a
      000221 F0               [24]  881 	movx	@dptr,a
                                    882 ;	life.c:121: j++;
      000222 78r07            [12]  883 	mov	r0,#_j
      000224 06               [12]  884 	inc	@r0
      000225 B6 00 02         [24]  885 	cjne	@r0,#0x00,00415$
      000228 08               [12]  886 	inc	r0
      000229 06               [12]  887 	inc	@r0
      00022A                        888 00415$:
                                    889 ;	life.c:122: break;
      00022A 80 39            [24]  890 	sjmp	00166$
      00022C                        891 00161$:
                                    892 ;	life.c:123: } else if (c == (int)'1') {
      00022C BE 31 26         [24]  893 	cjne	r6,#0x31,00159$
      00022F BF 00 23         [24]  894 	cjne	r7,#0x00,00159$
                                    895 ;	life.c:124: iu[y + x] = 1;
      000232 78r05            [12]  896 	mov	r0,#_y
      000234 79r03            [12]  897 	mov	r1,#_x
      000236 E7               [12]  898 	mov	a,@r1
      000237 26               [12]  899 	add	a,@r0
      000238 FC               [12]  900 	mov	r4,a
      000239 09               [12]  901 	inc	r1
      00023A E7               [12]  902 	mov	a,@r1
      00023B 08               [12]  903 	inc	r0
      00023C 36               [12]  904 	addc	a,@r0
      00023D FD               [12]  905 	mov	r5,a
      00023E EC               [12]  906 	mov	a,r4
      00023F 24r00            [12]  907 	add	a,#_iu
      000241 F5 82            [12]  908 	mov	dpl,a
      000243 ED               [12]  909 	mov	a,r5
      000244 34s00            [12]  910 	addc	a,#(_iu >> 8)
      000246 F5 83            [12]  911 	mov	dph,a
      000248 74 01            [12]  912 	mov	a,#0x01
      00024A F0               [24]  913 	movx	@dptr,a
                                    914 ;	life.c:125: j++;
      00024B 78r07            [12]  915 	mov	r0,#_j
      00024D 06               [12]  916 	inc	@r0
      00024E B6 00 02         [24]  917 	cjne	@r0,#0x00,00418$
      000251 08               [12]  918 	inc	r0
      000252 06               [12]  919 	inc	@r0
      000253                        920 00418$:
                                    921 ;	life.c:126: break;
      000253 80 10            [24]  922 	sjmp	00166$
      000255                        923 00159$:
                                    924 ;	life.c:127: } else if (c == (int)'~') goto br_inner;
      000255 BE 7E 05         [24]  925 	cjne	r6,#0x7e,00419$
      000258 BF 00 02         [24]  926 	cjne	r7,#0x00,00419$
      00025B 80 21            [24]  927 	sjmp	00214$
      00025D                        928 00419$:
                                    929 ;	life.c:128: else if (c == (int)'#') goto out;
                                    930 ;	life.c:132: break;
      00025D BE 23 96         [24]  931 	cjne	r6,#0x23,00163$
      000260 BF 00 93         [24]  932 	cjne	r7,#0x00,00163$
      000263 80 31            [24]  933 	sjmp	00176$
      000265                        934 00166$:
                                    935 ;	life.c:116: for (x = 0; x < W; x++) {
      000265 78r03            [12]  936 	mov	r0,#_x
      000267 06               [12]  937 	inc	@r0
      000268 B6 00 02         [24]  938 	cjne	@r0,#0x00,00421$
      00026B 08               [12]  939 	inc	r0
      00026C 06               [12]  940 	inc	@r0
      00026D                        941 00421$:
      00026D 78r03            [12]  942 	mov	r0,#_x
      00026F C3               [12]  943 	clr	c
      000270 E6               [12]  944 	mov	a,@r0
      000271 94 30            [12]  945 	subb	a,#0x30
      000273 08               [12]  946 	inc	r0
      000274 E6               [12]  947 	mov	a,@r0
      000275 64 80            [12]  948 	xrl	a,#0x80
      000277 94 80            [12]  949 	subb	a,#0x80
      000279 50 03            [24]  950 	jnc	00422$
      00027B 02r01rF6         [24]  951 	ljmp	00163$
      00027E                        952 00422$:
      00027E                        953 00214$:
                                    954 ;	life.c:115: for (y = 0; y < (H * W); y += W) {
      00027E 78r05            [12]  955 	mov	r0,#_y
      000280 74 30            [12]  956 	mov	a,#0x30
      000282 26               [12]  957 	add	a,@r0
      000283 F6               [12]  958 	mov	@r0,a
      000284 E4               [12]  959 	clr	a
      000285 08               [12]  960 	inc	r0
      000286 36               [12]  961 	addc	a,@r0
      000287 F6               [12]  962 	mov	@r0,a
      000288 78r05            [12]  963 	mov	r0,#_y
      00028A C3               [12]  964 	clr	c
      00028B 08               [12]  965 	inc	r0
      00028C E6               [12]  966 	mov	a,@r0
      00028D 64 80            [12]  967 	xrl	a,#0x80
      00028F 94 A4            [12]  968 	subb	a,#0xa4
      000291 50 03            [24]  969 	jnc	00423$
      000293 02r01rF0         [24]  970 	ljmp	00213$
      000296                        971 00423$:
                                    972 ;	life.c:136: out:
      000296                        973 00176$:
                                    974 ;	life.c:137: if (c != (int)'#')
      000296 BE 23 05         [24]  975 	cjne	r6,#0x23,00424$
      000299 BF 00 02         [24]  976 	cjne	r7,#0x00,00424$
      00029C 80 14            [24]  977 	sjmp	00175$
      00029E                        978 00424$:
                                    979 ;	life.c:138: while (1) {
      00029E                        980 00172$:
                                    981 ;	life.c:139: c = getchar();
      00029E 12r00r00         [24]  982 	lcall	_getchar
      0002A1 AE 82            [24]  983 	mov	r6,dpl
      0002A3 AF 83            [24]  984 	mov	r7,dph
      0002A5 78r09            [12]  985 	mov	r0,#_c
      0002A7 A6 06            [24]  986 	mov	@r0,ar6
      0002A9 08               [12]  987 	inc	r0
      0002AA A6 07            [24]  988 	mov	@r0,ar7
                                    989 ;	life.c:140: if (c == (int)'#') break;
      0002AC BE 23 EF         [24]  990 	cjne	r6,#0x23,00172$
      0002AF BF 00 EC         [24]  991 	cjne	r7,#0x00,00172$
      0002B2                        992 00175$:
                                    993 ;	life.c:142: print16x(j);
      0002B2 78r07            [12]  994 	mov	r0,#_j
      0002B4 86 82            [24]  995 	mov	dpl,@r0
      0002B6 08               [12]  996 	inc	r0
      0002B7 86 83            [24]  997 	mov	dph,@r0
      0002B9 12r00r00         [24]  998 	lcall	_print16x
                                    999 ;	life.c:143: printstr(">\r\n");
      0002BC 90r00r29         [24] 1000 	mov	dptr,#___str_5
      0002BF 75 F0 80         [24] 1001 	mov	b,#0x80
      0002C2 12r00r00         [24] 1002 	lcall	_printstr
                                   1003 ;	life.c:239: if (c == (int)'L') loadiu();
      0002C5 02r03r4E         [24] 1004 	ljmp	00117$
      0002C8                       1005 00116$:
                                   1006 ;	life.c:240: else if (c == (int)'R') loadriu();
      0002C8 78r09            [12] 1007 	mov	r0,#_c
      0002CA B6 52 06         [24] 1008 	cjne	@r0,#0x52,00427$
      0002CD 08               [12] 1009 	inc	r0
      0002CE B6 00 02         [24] 1010 	cjne	@r0,#0x00,00427$
      0002D1 80 02            [24] 1011 	sjmp	00428$
      0002D3                       1012 00427$:
      0002D3 80 79            [24] 1013 	sjmp	00117$
      0002D5                       1014 00428$:
                                   1015 ;	life.c:149: j = 0;
      0002D5 78r07            [12] 1016 	mov	r0,#_j
      0002D7 E4               [12] 1017 	clr	a
      0002D8 F6               [12] 1018 	mov	@r0,a
      0002D9 08               [12] 1019 	inc	r0
      0002DA F6               [12] 1020 	mov	@r0,a
                                   1021 ;	life.c:151: printstr("RANDOM");
      0002DB 90r00r2D         [24] 1022 	mov	dptr,#___str_6
      0002DE 75 F0 80         [24] 1023 	mov	b,#0x80
      0002E1 12r00r00         [24] 1024 	lcall	_printstr
                                   1025 ;	life.c:153: for (y = 0; y < (H * W); y += W)
      0002E4 78r05            [12] 1026 	mov	r0,#_y
      0002E6 E4               [12] 1027 	clr	a
      0002E7 F6               [12] 1028 	mov	@r0,a
      0002E8 08               [12] 1029 	inc	r0
      0002E9 F6               [12] 1030 	mov	@r0,a
      0002EA                       1031 00217$:
                                   1032 ;	life.c:154: for (x = 0; x < W; x++)
      0002EA 78r03            [12] 1033 	mov	r0,#_x
      0002EC E4               [12] 1034 	clr	a
      0002ED F6               [12] 1035 	mov	@r0,a
      0002EE 08               [12] 1036 	inc	r0
      0002EF F6               [12] 1037 	mov	@r0,a
      0002F0                       1038 00215$:
                                   1039 ;	life.c:155: iu[y + x] = rand() & 1;
      0002F0 78r05            [12] 1040 	mov	r0,#_y
      0002F2 79r03            [12] 1041 	mov	r1,#_x
      0002F4 E7               [12] 1042 	mov	a,@r1
      0002F5 26               [12] 1043 	add	a,@r0
      0002F6 FE               [12] 1044 	mov	r6,a
      0002F7 09               [12] 1045 	inc	r1
      0002F8 E7               [12] 1046 	mov	a,@r1
      0002F9 08               [12] 1047 	inc	r0
      0002FA 36               [12] 1048 	addc	a,@r0
      0002FB FF               [12] 1049 	mov	r7,a
      0002FC EE               [12] 1050 	mov	a,r6
      0002FD 24r00            [12] 1051 	add	a,#_iu
      0002FF FE               [12] 1052 	mov	r6,a
      000300 EF               [12] 1053 	mov	a,r7
      000301 34s00            [12] 1054 	addc	a,#(_iu >> 8)
      000303 FF               [12] 1055 	mov	r7,a
      000304 C0 07            [24] 1056 	push	ar7
      000306 C0 06            [24] 1057 	push	ar6
      000308 12r00r00         [24] 1058 	lcall	_rand
      00030B AC 82            [24] 1059 	mov	r4,dpl
      00030D D0 06            [24] 1060 	pop	ar6
      00030F D0 07            [24] 1061 	pop	ar7
      000311 53 04 01         [24] 1062 	anl	ar4,#0x01
      000314 8E 82            [24] 1063 	mov	dpl,r6
      000316 8F 83            [24] 1064 	mov	dph,r7
      000318 EC               [12] 1065 	mov	a,r4
      000319 F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	life.c:154: for (x = 0; x < W; x++)
      00031A 78r03            [12] 1068 	mov	r0,#_x
      00031C 06               [12] 1069 	inc	@r0
      00031D B6 00 02         [24] 1070 	cjne	@r0,#0x00,00429$
      000320 08               [12] 1071 	inc	r0
      000321 06               [12] 1072 	inc	@r0
      000322                       1073 00429$:
      000322 78r03            [12] 1074 	mov	r0,#_x
      000324 C3               [12] 1075 	clr	c
      000325 E6               [12] 1076 	mov	a,@r0
      000326 94 30            [12] 1077 	subb	a,#0x30
      000328 08               [12] 1078 	inc	r0
      000329 E6               [12] 1079 	mov	a,@r0
      00032A 64 80            [12] 1080 	xrl	a,#0x80
      00032C 94 80            [12] 1081 	subb	a,#0x80
      00032E 40 C0            [24] 1082 	jc	00215$
                                   1083 ;	life.c:153: for (y = 0; y < (H * W); y += W)
      000330 78r05            [12] 1084 	mov	r0,#_y
      000332 74 30            [12] 1085 	mov	a,#0x30
      000334 26               [12] 1086 	add	a,@r0
      000335 F6               [12] 1087 	mov	@r0,a
      000336 E4               [12] 1088 	clr	a
      000337 08               [12] 1089 	inc	r0
      000338 36               [12] 1090 	addc	a,@r0
      000339 F6               [12] 1091 	mov	@r0,a
      00033A 78r05            [12] 1092 	mov	r0,#_y
      00033C C3               [12] 1093 	clr	c
      00033D 08               [12] 1094 	inc	r0
      00033E E6               [12] 1095 	mov	a,@r0
      00033F 64 80            [12] 1096 	xrl	a,#0x80
      000341 94 A4            [12] 1097 	subb	a,#0xa4
      000343 40 A5            [24] 1098 	jc	00217$
                                   1099 ;	life.c:157: printstr("\r\n");
      000345 90r00r10         [24] 1100 	mov	dptr,#___str_2
      000348 75 F0 80         [24] 1101 	mov	b,#0x80
      00034B 12r00r00         [24] 1102 	lcall	_printstr
                                   1103 ;	life.c:240: else if (c == (int)'R') loadriu();
      00034E                       1104 00117$:
                                   1105 ;	life.c:241: memcpy(u, iu, sizeof (iu));
      00034E E4               [12] 1106 	clr	a
      00034F C0 E0            [24] 1107 	push	acc
      000351 74 24            [12] 1108 	mov	a,#0x24
      000353 C0 E0            [24] 1109 	push	acc
      000355 74r00            [12] 1110 	mov	a,#_iu
      000357 C0 E0            [24] 1111 	push	acc
      000359 74s00            [12] 1112 	mov	a,#(_iu >> 8)
      00035B C0 E0            [24] 1113 	push	acc
      00035D E4               [12] 1114 	clr	a
      00035E C0 E0            [24] 1115 	push	acc
      000360 90r48r00         [24] 1116 	mov	dptr,#_u
      000363 75 F0 00         [24] 1117 	mov	b,#0x00
      000366 12r00r00         [24] 1118 	lcall	___memcpy
      000369 E5 81            [12] 1119 	mov	a,sp
      00036B 24 FB            [12] 1120 	add	a,#0xfb
      00036D F5 81            [12] 1121 	mov	sp,a
                                   1122 ;	life.c:242: show(0);
      00036F 75 82 00         [24] 1123 	mov	dpl,#0x00
      000372 12r00r2A         [24] 1124 	lcall	_show
                                   1125 ;	life.c:244: printstr("READY T L R P S\r\n");
      000375 90r00r52         [24] 1126 	mov	dptr,#___str_9
      000378 75 F0 80         [24] 1127 	mov	b,#0x80
      00037B 12r00r00         [24] 1128 	lcall	_printstr
                                   1129 ;	life.c:245: while (1) {
      00037E                       1130 00130$:
                                   1131 ;	life.c:246: c = toupper(getchar());
      00037E 12r00r00         [24] 1132 	lcall	_getchar
      000381 12r00r00         [24] 1133 	lcall	_toupper
      000384 AE 82            [24] 1134 	mov	r6,dpl
      000386 AF 83            [24] 1135 	mov	r7,dph
      000388 78r09            [12] 1136 	mov	r0,#_c
      00038A A6 06            [24] 1137 	mov	@r0,ar6
      00038C 08               [12] 1138 	inc	r0
      00038D A6 07            [24] 1139 	mov	@r0,ar7
                                   1140 ;	life.c:247: if (i0 || (c == (int)'T')) goto term;
      00038F 78r00            [12] 1141 	mov	r0,#_i0
      000391 E6               [12] 1142 	mov	a,@r0
      000392 60 03            [24] 1143 	jz	00432$
      000394 02r08rC1         [24] 1144 	ljmp	00149$
      000397                       1145 00432$:
      000397 BE 54 06         [24] 1146 	cjne	r6,#0x54,00433$
      00039A BF 00 03         [24] 1147 	cjne	r7,#0x00,00433$
      00039D 02r08rC1         [24] 1148 	ljmp	00149$
      0003A0                       1149 00433$:
                                   1150 ;	life.c:248: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      0003A0 BE 4C 06         [24] 1151 	cjne	r6,#0x4c,00434$
      0003A3 BF 00 03         [24] 1152 	cjne	r7,#0x00,00434$
      0003A6 02r01r9B         [24] 1153 	ljmp	00112$
      0003A9                       1154 00434$:
      0003A9 BE 52 06         [24] 1155 	cjne	r6,#0x52,00435$
      0003AC BF 00 03         [24] 1156 	cjne	r7,#0x00,00435$
      0003AF 02r01r9B         [24] 1157 	ljmp	00112$
      0003B2                       1158 00435$:
      0003B2 BE 50 06         [24] 1159 	cjne	r6,#0x50,00436$
      0003B5 BF 00 03         [24] 1160 	cjne	r7,#0x00,00436$
      0003B8 02r01r9B         [24] 1161 	ljmp	00112$
      0003BB                       1162 00436$:
                                   1163 ;	life.c:249: else if (c == (int)'S') break;
      0003BB BE 53 C0         [24] 1164 	cjne	r6,#0x53,00130$
      0003BE BF 00 BD         [24] 1165 	cjne	r7,#0x00,00130$
                                   1166 ;	life.c:61: generation[0] = 0u;
      0003C1 78r12            [12] 1167 	mov	r0,#_generation
      0003C3 76 00            [12] 1168 	mov	@r0,#0x00
      0003C5 08               [12] 1169 	inc	r0
      0003C6 76 00            [12] 1170 	mov	@r0,#0x00
                                   1171 ;	life.c:62: generation[1] = 0u;
      0003C8 78r14            [12] 1172 	mov	r0,#(_generation + 0x0002)
      0003CA 76 00            [12] 1173 	mov	@r0,#0x00
      0003CC 08               [12] 1174 	inc	r0
      0003CD 76 00            [12] 1175 	mov	@r0,#0x00
                                   1176 ;	life.c:254: for (i1 = 0; !i0 && !i1; ) {
      0003CF 78r01            [12] 1177 	mov	r0,#_i1
      0003D1 76 00            [12] 1178 	mov	@r0,#0x00
      0003D3                       1179 00225$:
      0003D3 78r00            [12] 1180 	mov	r0,#_i0
      0003D5 E6               [12] 1181 	mov	a,@r0
      0003D6 60 03            [24] 1182 	jz	00439$
      0003D8 02r08rA8         [24] 1183 	ljmp	00145$
      0003DB                       1184 00439$:
      0003DB 78r01            [12] 1185 	mov	r0,#_i1
      0003DD E6               [12] 1186 	mov	a,@r0
      0003DE 60 03            [24] 1187 	jz	00440$
      0003E0 02r08rA8         [24] 1188 	ljmp	00145$
      0003E3                       1189 00440$:
                                   1190 ;	life.c:255: show(1);
      0003E3 75 82 01         [24] 1191 	mov	dpl,#0x01
      0003E6 12r00r2A         [24] 1192 	lcall	_show
                                   1193 ;	life.c:163: fixed = 0;
      0003E9 78r0C            [12] 1194 	mov	r0,#_fixed
      0003EB 76 00            [12] 1195 	mov	@r0,#0x00
                                   1196 ;	life.c:164: cycle2 = 0;
      0003ED 78r0D            [12] 1197 	mov	r0,#_cycle2
      0003EF 76 00            [12] 1198 	mov	@r0,#0x00
                                   1199 ;	life.c:166: OE76 = OE76_0;
      0003F1 78r02            [12] 1200 	mov	r0,#_OE76
      0003F3 76 3F            [12] 1201 	mov	@r0,#0x3f
                                   1202 ;	life.c:167: flashOE();
      0003F5 12r00r18         [24] 1203 	lcall	_flashOE
                                   1204 ;	life.c:169: for (y = 0; y < H; y++) {
      0003F8 78r05            [12] 1205 	mov	r0,#_y
      0003FA E4               [12] 1206 	clr	a
      0003FB F6               [12] 1207 	mov	@r0,a
      0003FC 08               [12] 1208 	inc	r0
      0003FD F6               [12] 1209 	mov	@r0,a
      0003FE                       1210 00221$:
                                   1211 ;	life.c:170: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      0003FE 78r05            [12] 1212 	mov	r0,#_y
      000400 86 07            [24] 1213 	mov	ar7,@r0
      000402 53 07 03         [24] 1214 	anl	ar7,#0x03
      000405 EF               [12] 1215 	mov	a,r7
      000406 03               [12] 1216 	rr	a
      000407 03               [12] 1217 	rr	a
      000408 54 C0            [12] 1218 	anl	a,#0xc0
      00040A FF               [12] 1219 	mov	r7,a
      00040B 78r02            [12] 1220 	mov	r0,#_OE76
      00040D 74 3F            [12] 1221 	mov	a,#0x3f
      00040F 4F               [12] 1222 	orl	a,r7
      000410 F6               [12] 1223 	mov	@r0,a
                                   1224 ;	life.c:171: flashOE();
      000411 12r00r18         [24] 1225 	lcall	_flashOE
                                   1226 ;	life.c:172: for (x = 0; x < W; x++) {
      000414 78r03            [12] 1227 	mov	r0,#_x
      000416 E4               [12] 1228 	clr	a
      000417 F6               [12] 1229 	mov	@r0,a
      000418 08               [12] 1230 	inc	r0
      000419 F6               [12] 1231 	mov	@r0,a
      00041A                       1232 00219$:
                                   1233 ;	life.c:173: n = -u[A2D(W, y, x)];
      00041A 78r05            [12] 1234 	mov	r0,#_y
      00041C E6               [12] 1235 	mov	a,@r0
      00041D C0 E0            [24] 1236 	push	acc
      00041F 08               [12] 1237 	inc	r0
      000420 E6               [12] 1238 	mov	a,@r0
      000421 C0 E0            [24] 1239 	push	acc
      000423 90 00 30         [24] 1240 	mov	dptr,#0x0030
      000426 12r00r00         [24] 1241 	lcall	__mulint
      000429 C8               [12] 1242 	xch	a,r0
      00042A E5*00            [12] 1243 	mov	a,_bp
      00042C 24 04            [12] 1244 	add	a,#0x04
      00042E C8               [12] 1245 	xch	a,r0
      00042F A6 82            [24] 1246 	mov	@r0,dpl
      000431 08               [12] 1247 	inc	r0
      000432 A6 83            [24] 1248 	mov	@r0,dph
      000434 15 81            [12] 1249 	dec	sp
      000436 15 81            [12] 1250 	dec	sp
      000438 E5*00            [12] 1251 	mov	a,_bp
      00043A 24 04            [12] 1252 	add	a,#0x04
      00043C F8               [12] 1253 	mov	r0,a
      00043D 79r03            [12] 1254 	mov	r1,#_x
      00043F E7               [12] 1255 	mov	a,@r1
      000440 26               [12] 1256 	add	a,@r0
      000441 C0 E0            [24] 1257 	push	acc
      000443 09               [12] 1258 	inc	r1
      000444 E7               [12] 1259 	mov	a,@r1
      000445 08               [12] 1260 	inc	r0
      000446 36               [12] 1261 	addc	a,@r0
      000447 C0 E0            [24] 1262 	push	acc
      000449 E5*00            [12] 1263 	mov	a,_bp
      00044B 24 03            [12] 1264 	add	a,#0x03
      00044D F8               [12] 1265 	mov	r0,a
      00044E D0 E0            [24] 1266 	pop	acc
      000450 F6               [12] 1267 	mov	@r0,a
      000451 18               [12] 1268 	dec	r0
      000452 D0 E0            [24] 1269 	pop	acc
      000454 F6               [12] 1270 	mov	@r0,a
      000455 A8*00            [24] 1271 	mov	r0,_bp
      000457 08               [12] 1272 	inc	r0
      000458 08               [12] 1273 	inc	r0
      000459 E6               [12] 1274 	mov	a,@r0
      00045A 24r00            [12] 1275 	add	a,#_u
      00045C F5 82            [12] 1276 	mov	dpl,a
      00045E 08               [12] 1277 	inc	r0
      00045F E6               [12] 1278 	mov	a,@r0
      000460 34s48            [12] 1279 	addc	a,#(_u >> 8)
      000462 F5 83            [12] 1280 	mov	dph,a
      000464 E0               [24] 1281 	movx	a,@dptr
      000465 FB               [12] 1282 	mov	r3,a
      000466 A8*00            [24] 1283 	mov	r0,_bp
      000468 08               [12] 1284 	inc	r0
      000469 C3               [12] 1285 	clr	c
      00046A E4               [12] 1286 	clr	a
      00046B 9B               [12] 1287 	subb	a,r3
      00046C F6               [12] 1288 	mov	@r0,a
                                   1289 ;	life.c:180: UPDN(-1, -1);
      00046D 78r05            [12] 1290 	mov	r0,#_y
      00046F 74 FF            [12] 1291 	mov	a,#0xff
      000471 26               [12] 1292 	add	a,@r0
      000472 FA               [12] 1293 	mov	r2,a
      000473 74 FF            [12] 1294 	mov	a,#0xff
      000475 08               [12] 1295 	inc	r0
      000476 36               [12] 1296 	addc	a,@r0
      000477 FB               [12] 1297 	mov	r3,a
      000478 74 C0            [12] 1298 	mov	a,#0xc0
      00047A 2A               [12] 1299 	add	a,r2
      00047B FA               [12] 1300 	mov	r2,a
      00047C E4               [12] 1301 	clr	a
      00047D 3B               [12] 1302 	addc	a,r3
      00047E FB               [12] 1303 	mov	r3,a
      00047F 74 C0            [12] 1304 	mov	a,#0xc0
      000481 C0 E0            [24] 1305 	push	acc
      000483 E4               [12] 1306 	clr	a
      000484 C0 E0            [24] 1307 	push	acc
      000486 8A 82            [24] 1308 	mov	dpl,r2
      000488 8B 83            [24] 1309 	mov	dph,r3
      00048A 12r00r00         [24] 1310 	lcall	__modsint
      00048D AA 82            [24] 1311 	mov	r2,dpl
      00048F AB 83            [24] 1312 	mov	r3,dph
      000491 15 81            [12] 1313 	dec	sp
      000493 15 81            [12] 1314 	dec	sp
      000495 C0 02            [24] 1315 	push	ar2
      000497 C0 03            [24] 1316 	push	ar3
      000499 90 00 30         [24] 1317 	mov	dptr,#0x0030
      00049C 12r00r00         [24] 1318 	lcall	__mulint
      00049F AA 82            [24] 1319 	mov	r2,dpl
      0004A1 AB 83            [24] 1320 	mov	r3,dph
      0004A3 15 81            [12] 1321 	dec	sp
      0004A5 15 81            [12] 1322 	dec	sp
      0004A7 78r03            [12] 1323 	mov	r0,#_x
      0004A9 74 FF            [12] 1324 	mov	a,#0xff
      0004AB 26               [12] 1325 	add	a,@r0
      0004AC FC               [12] 1326 	mov	r4,a
      0004AD 74 FF            [12] 1327 	mov	a,#0xff
      0004AF 08               [12] 1328 	inc	r0
      0004B0 36               [12] 1329 	addc	a,@r0
      0004B1 FD               [12] 1330 	mov	r5,a
      0004B2 74 30            [12] 1331 	mov	a,#0x30
      0004B4 2C               [12] 1332 	add	a,r4
      0004B5 FC               [12] 1333 	mov	r4,a
      0004B6 E4               [12] 1334 	clr	a
      0004B7 3D               [12] 1335 	addc	a,r5
      0004B8 FD               [12] 1336 	mov	r5,a
      0004B9 C0 03            [24] 1337 	push	ar3
      0004BB C0 02            [24] 1338 	push	ar2
      0004BD 74 30            [12] 1339 	mov	a,#0x30
      0004BF C0 E0            [24] 1340 	push	acc
      0004C1 E4               [12] 1341 	clr	a
      0004C2 C0 E0            [24] 1342 	push	acc
      0004C4 8C 82            [24] 1343 	mov	dpl,r4
      0004C6 8D 83            [24] 1344 	mov	dph,r5
      0004C8 12r00r00         [24] 1345 	lcall	__modsint
      0004CB AC 82            [24] 1346 	mov	r4,dpl
      0004CD AD 83            [24] 1347 	mov	r5,dph
      0004CF 15 81            [12] 1348 	dec	sp
      0004D1 15 81            [12] 1349 	dec	sp
      0004D3 D0 02            [24] 1350 	pop	ar2
      0004D5 D0 03            [24] 1351 	pop	ar3
      0004D7 EC               [12] 1352 	mov	a,r4
      0004D8 2A               [12] 1353 	add	a,r2
      0004D9 FE               [12] 1354 	mov	r6,a
      0004DA ED               [12] 1355 	mov	a,r5
      0004DB 3B               [12] 1356 	addc	a,r3
      0004DC FF               [12] 1357 	mov	r7,a
      0004DD EE               [12] 1358 	mov	a,r6
      0004DE 24r00            [12] 1359 	add	a,#_u
      0004E0 F5 82            [12] 1360 	mov	dpl,a
      0004E2 EF               [12] 1361 	mov	a,r7
      0004E3 34s48            [12] 1362 	addc	a,#(_u >> 8)
      0004E5 F5 83            [12] 1363 	mov	dph,a
      0004E7 E0               [24] 1364 	movx	a,@dptr
      0004E8 FF               [12] 1365 	mov	r7,a
      0004E9 A8*00            [24] 1366 	mov	r0,_bp
      0004EB 08               [12] 1367 	inc	r0
      0004EC EF               [12] 1368 	mov	a,r7
      0004ED 26               [12] 1369 	add	a,@r0
      0004EE F6               [12] 1370 	mov	@r0,a
                                   1371 ;	life.c:181: UPDN(-1, 0);
      0004EF 78r03            [12] 1372 	mov	r0,#_x
      0004F1 E5*00            [12] 1373 	mov	a,_bp
      0004F3 24 06            [12] 1374 	add	a,#0x06
      0004F5 F9               [12] 1375 	mov	r1,a
      0004F6 E6               [12] 1376 	mov	a,@r0
      0004F7 F7               [12] 1377 	mov	@r1,a
      0004F8 08               [12] 1378 	inc	r0
      0004F9 09               [12] 1379 	inc	r1
      0004FA E6               [12] 1380 	mov	a,@r0
      0004FB F7               [12] 1381 	mov	@r1,a
      0004FC E5*00            [12] 1382 	mov	a,_bp
      0004FE 24 06            [12] 1383 	add	a,#0x06
      000500 F8               [12] 1384 	mov	r0,a
      000501 74 30            [12] 1385 	mov	a,#0x30
      000503 26               [12] 1386 	add	a,@r0
      000504 FE               [12] 1387 	mov	r6,a
      000505 E4               [12] 1388 	clr	a
      000506 08               [12] 1389 	inc	r0
      000507 36               [12] 1390 	addc	a,@r0
      000508 FF               [12] 1391 	mov	r7,a
      000509 C0 05            [24] 1392 	push	ar5
      00050B C0 04            [24] 1393 	push	ar4
      00050D C0 03            [24] 1394 	push	ar3
      00050F C0 02            [24] 1395 	push	ar2
      000511 74 30            [12] 1396 	mov	a,#0x30
      000513 C0 E0            [24] 1397 	push	acc
      000515 E4               [12] 1398 	clr	a
      000516 C0 E0            [24] 1399 	push	acc
      000518 8E 82            [24] 1400 	mov	dpl,r6
      00051A 8F 83            [24] 1401 	mov	dph,r7
      00051C 12r00r00         [24] 1402 	lcall	__modsint
      00051F C8               [12] 1403 	xch	a,r0
      000520 E5*00            [12] 1404 	mov	a,_bp
      000522 24 08            [12] 1405 	add	a,#0x08
      000524 C8               [12] 1406 	xch	a,r0
      000525 A6 82            [24] 1407 	mov	@r0,dpl
      000527 08               [12] 1408 	inc	r0
      000528 A6 83            [24] 1409 	mov	@r0,dph
      00052A 15 81            [12] 1410 	dec	sp
      00052C 15 81            [12] 1411 	dec	sp
      00052E D0 02            [24] 1412 	pop	ar2
      000530 D0 03            [24] 1413 	pop	ar3
      000532 E5*00            [12] 1414 	mov	a,_bp
      000534 24 08            [12] 1415 	add	a,#0x08
      000536 F8               [12] 1416 	mov	r0,a
      000537 E6               [12] 1417 	mov	a,@r0
      000538 2A               [12] 1418 	add	a,r2
      000539 FE               [12] 1419 	mov	r6,a
      00053A 08               [12] 1420 	inc	r0
      00053B E6               [12] 1421 	mov	a,@r0
      00053C 3B               [12] 1422 	addc	a,r3
      00053D FF               [12] 1423 	mov	r7,a
      00053E EE               [12] 1424 	mov	a,r6
      00053F 24r00            [12] 1425 	add	a,#_u
      000541 F5 82            [12] 1426 	mov	dpl,a
      000543 EF               [12] 1427 	mov	a,r7
      000544 34s48            [12] 1428 	addc	a,#(_u >> 8)
      000546 F5 83            [12] 1429 	mov	dph,a
      000548 E0               [24] 1430 	movx	a,@dptr
      000549 FF               [12] 1431 	mov	r7,a
      00054A A8*00            [24] 1432 	mov	r0,_bp
      00054C 08               [12] 1433 	inc	r0
      00054D EF               [12] 1434 	mov	a,r7
      00054E 26               [12] 1435 	add	a,@r0
      00054F F6               [12] 1436 	mov	@r0,a
                                   1437 ;	life.c:182: UPDN(-1, 1);
      000550 E5*00            [12] 1438 	mov	a,_bp
      000552 24 06            [12] 1439 	add	a,#0x06
      000554 F8               [12] 1440 	mov	r0,a
      000555 74 31            [12] 1441 	mov	a,#0x31
      000557 26               [12] 1442 	add	a,@r0
      000558 FE               [12] 1443 	mov	r6,a
      000559 E4               [12] 1444 	clr	a
      00055A 08               [12] 1445 	inc	r0
      00055B 36               [12] 1446 	addc	a,@r0
      00055C FF               [12] 1447 	mov	r7,a
      00055D C0 03            [24] 1448 	push	ar3
      00055F C0 02            [24] 1449 	push	ar2
      000561 74 30            [12] 1450 	mov	a,#0x30
      000563 C0 E0            [24] 1451 	push	acc
      000565 E4               [12] 1452 	clr	a
      000566 C0 E0            [24] 1453 	push	acc
      000568 8E 82            [24] 1454 	mov	dpl,r6
      00056A 8F 83            [24] 1455 	mov	dph,r7
      00056C 12r00r00         [24] 1456 	lcall	__modsint
      00056F AE 82            [24] 1457 	mov	r6,dpl
      000571 AF 83            [24] 1458 	mov	r7,dph
      000573 15 81            [12] 1459 	dec	sp
      000575 15 81            [12] 1460 	dec	sp
      000577 D0 02            [24] 1461 	pop	ar2
      000579 D0 03            [24] 1462 	pop	ar3
      00057B D0 04            [24] 1463 	pop	ar4
      00057D D0 05            [24] 1464 	pop	ar5
      00057F EE               [12] 1465 	mov	a,r6
      000580 2A               [12] 1466 	add	a,r2
      000581 FA               [12] 1467 	mov	r2,a
      000582 EF               [12] 1468 	mov	a,r7
      000583 3B               [12] 1469 	addc	a,r3
      000584 FB               [12] 1470 	mov	r3,a
      000585 EA               [12] 1471 	mov	a,r2
      000586 24r00            [12] 1472 	add	a,#_u
      000588 F5 82            [12] 1473 	mov	dpl,a
      00058A EB               [12] 1474 	mov	a,r3
      00058B 34s48            [12] 1475 	addc	a,#(_u >> 8)
      00058D F5 83            [12] 1476 	mov	dph,a
      00058F E0               [24] 1477 	movx	a,@dptr
      000590 FB               [12] 1478 	mov	r3,a
      000591 A8*00            [24] 1479 	mov	r0,_bp
      000593 08               [12] 1480 	inc	r0
      000594 EB               [12] 1481 	mov	a,r3
      000595 26               [12] 1482 	add	a,@r0
      000596 F6               [12] 1483 	mov	@r0,a
                                   1484 ;	life.c:183: UPDN(0, -1);
      000597 78r05            [12] 1485 	mov	r0,#_y
      000599 E5*00            [12] 1486 	mov	a,_bp
      00059B 24 0A            [12] 1487 	add	a,#0x0a
      00059D F9               [12] 1488 	mov	r1,a
      00059E E6               [12] 1489 	mov	a,@r0
      00059F F7               [12] 1490 	mov	@r1,a
      0005A0 08               [12] 1491 	inc	r0
      0005A1 09               [12] 1492 	inc	r1
      0005A2 E6               [12] 1493 	mov	a,@r0
      0005A3 F7               [12] 1494 	mov	@r1,a
      0005A4 E5*00            [12] 1495 	mov	a,_bp
      0005A6 24 0A            [12] 1496 	add	a,#0x0a
      0005A8 F8               [12] 1497 	mov	r0,a
      0005A9 74 C0            [12] 1498 	mov	a,#0xc0
      0005AB 26               [12] 1499 	add	a,@r0
      0005AC FA               [12] 1500 	mov	r2,a
      0005AD E4               [12] 1501 	clr	a
      0005AE 08               [12] 1502 	inc	r0
      0005AF 36               [12] 1503 	addc	a,@r0
      0005B0 FB               [12] 1504 	mov	r3,a
      0005B1 C0 07            [24] 1505 	push	ar7
      0005B3 C0 06            [24] 1506 	push	ar6
      0005B5 C0 05            [24] 1507 	push	ar5
      0005B7 C0 04            [24] 1508 	push	ar4
      0005B9 74 C0            [12] 1509 	mov	a,#0xc0
      0005BB C0 E0            [24] 1510 	push	acc
      0005BD E4               [12] 1511 	clr	a
      0005BE C0 E0            [24] 1512 	push	acc
      0005C0 8A 82            [24] 1513 	mov	dpl,r2
      0005C2 8B 83            [24] 1514 	mov	dph,r3
      0005C4 12r00r00         [24] 1515 	lcall	__modsint
      0005C7 AA 82            [24] 1516 	mov	r2,dpl
      0005C9 AB 83            [24] 1517 	mov	r3,dph
      0005CB 15 81            [12] 1518 	dec	sp
      0005CD 15 81            [12] 1519 	dec	sp
      0005CF C0 02            [24] 1520 	push	ar2
      0005D1 C0 03            [24] 1521 	push	ar3
      0005D3 90 00 30         [24] 1522 	mov	dptr,#0x0030
      0005D6 12r00r00         [24] 1523 	lcall	__mulint
      0005D9 C8               [12] 1524 	xch	a,r0
      0005DA E5*00            [12] 1525 	mov	a,_bp
      0005DC 24 0C            [12] 1526 	add	a,#0x0c
      0005DE C8               [12] 1527 	xch	a,r0
      0005DF A6 82            [24] 1528 	mov	@r0,dpl
      0005E1 08               [12] 1529 	inc	r0
      0005E2 A6 83            [24] 1530 	mov	@r0,dph
      0005E4 15 81            [12] 1531 	dec	sp
      0005E6 15 81            [12] 1532 	dec	sp
      0005E8 D0 04            [24] 1533 	pop	ar4
      0005EA D0 05            [24] 1534 	pop	ar5
      0005EC D0 06            [24] 1535 	pop	ar6
      0005EE D0 07            [24] 1536 	pop	ar7
      0005F0 E5*00            [12] 1537 	mov	a,_bp
      0005F2 24 0C            [12] 1538 	add	a,#0x0c
      0005F4 F8               [12] 1539 	mov	r0,a
      0005F5 EC               [12] 1540 	mov	a,r4
      0005F6 26               [12] 1541 	add	a,@r0
      0005F7 FA               [12] 1542 	mov	r2,a
      0005F8 ED               [12] 1543 	mov	a,r5
      0005F9 08               [12] 1544 	inc	r0
      0005FA 36               [12] 1545 	addc	a,@r0
      0005FB FB               [12] 1546 	mov	r3,a
      0005FC EA               [12] 1547 	mov	a,r2
      0005FD 24r00            [12] 1548 	add	a,#_u
      0005FF F5 82            [12] 1549 	mov	dpl,a
      000601 EB               [12] 1550 	mov	a,r3
      000602 34s48            [12] 1551 	addc	a,#(_u >> 8)
      000604 F5 83            [12] 1552 	mov	dph,a
      000606 E0               [24] 1553 	movx	a,@dptr
      000607 FB               [12] 1554 	mov	r3,a
      000608 A8*00            [24] 1555 	mov	r0,_bp
      00060A 08               [12] 1556 	inc	r0
      00060B EB               [12] 1557 	mov	a,r3
      00060C 26               [12] 1558 	add	a,@r0
      00060D F6               [12] 1559 	mov	@r0,a
                                   1560 ;	life.c:184: UPDN(0, 0);
      00060E E5*00            [12] 1561 	mov	a,_bp
      000610 24 0C            [12] 1562 	add	a,#0x0c
      000612 F8               [12] 1563 	mov	r0,a
      000613 E5*00            [12] 1564 	mov	a,_bp
      000615 24 08            [12] 1565 	add	a,#0x08
      000617 F9               [12] 1566 	mov	r1,a
      000618 E7               [12] 1567 	mov	a,@r1
      000619 26               [12] 1568 	add	a,@r0
      00061A FA               [12] 1569 	mov	r2,a
      00061B 09               [12] 1570 	inc	r1
      00061C E7               [12] 1571 	mov	a,@r1
      00061D 08               [12] 1572 	inc	r0
      00061E 36               [12] 1573 	addc	a,@r0
      00061F FB               [12] 1574 	mov	r3,a
      000620 EA               [12] 1575 	mov	a,r2
      000621 24r00            [12] 1576 	add	a,#_u
      000623 F5 82            [12] 1577 	mov	dpl,a
      000625 EB               [12] 1578 	mov	a,r3
      000626 34s48            [12] 1579 	addc	a,#(_u >> 8)
      000628 F5 83            [12] 1580 	mov	dph,a
      00062A E0               [24] 1581 	movx	a,@dptr
      00062B FB               [12] 1582 	mov	r3,a
      00062C A8*00            [24] 1583 	mov	r0,_bp
      00062E 08               [12] 1584 	inc	r0
      00062F EB               [12] 1585 	mov	a,r3
      000630 26               [12] 1586 	add	a,@r0
      000631 F6               [12] 1587 	mov	@r0,a
                                   1588 ;	life.c:185: UPDN(0, 1);
      000632 E5*00            [12] 1589 	mov	a,_bp
      000634 24 0C            [12] 1590 	add	a,#0x0c
      000636 F8               [12] 1591 	mov	r0,a
      000637 EE               [12] 1592 	mov	a,r6
      000638 26               [12] 1593 	add	a,@r0
      000639 FA               [12] 1594 	mov	r2,a
      00063A EF               [12] 1595 	mov	a,r7
      00063B 08               [12] 1596 	inc	r0
      00063C 36               [12] 1597 	addc	a,@r0
      00063D FB               [12] 1598 	mov	r3,a
      00063E EA               [12] 1599 	mov	a,r2
      00063F 24r00            [12] 1600 	add	a,#_u
      000641 F5 82            [12] 1601 	mov	dpl,a
      000643 EB               [12] 1602 	mov	a,r3
      000644 34s48            [12] 1603 	addc	a,#(_u >> 8)
      000646 F5 83            [12] 1604 	mov	dph,a
      000648 E0               [24] 1605 	movx	a,@dptr
      000649 FB               [12] 1606 	mov	r3,a
      00064A A8*00            [24] 1607 	mov	r0,_bp
      00064C 08               [12] 1608 	inc	r0
      00064D E5*00            [12] 1609 	mov	a,_bp
      00064F 24 0C            [12] 1610 	add	a,#0x0c
      000651 F9               [12] 1611 	mov	r1,a
      000652 EB               [12] 1612 	mov	a,r3
      000653 26               [12] 1613 	add	a,@r0
      000654 F7               [12] 1614 	mov	@r1,a
                                   1615 ;	life.c:186: UPDN(1, -1);
      000655 E5*00            [12] 1616 	mov	a,_bp
      000657 24 0A            [12] 1617 	add	a,#0x0a
      000659 F8               [12] 1618 	mov	r0,a
      00065A 74 C1            [12] 1619 	mov	a,#0xc1
      00065C 26               [12] 1620 	add	a,@r0
      00065D FA               [12] 1621 	mov	r2,a
      00065E E4               [12] 1622 	clr	a
      00065F 08               [12] 1623 	inc	r0
      000660 36               [12] 1624 	addc	a,@r0
      000661 FB               [12] 1625 	mov	r3,a
      000662 C0 07            [24] 1626 	push	ar7
      000664 C0 06            [24] 1627 	push	ar6
      000666 C0 05            [24] 1628 	push	ar5
      000668 C0 04            [24] 1629 	push	ar4
      00066A 74 C0            [12] 1630 	mov	a,#0xc0
      00066C C0 E0            [24] 1631 	push	acc
      00066E E4               [12] 1632 	clr	a
      00066F C0 E0            [24] 1633 	push	acc
      000671 8A 82            [24] 1634 	mov	dpl,r2
      000673 8B 83            [24] 1635 	mov	dph,r3
      000675 12r00r00         [24] 1636 	lcall	__modsint
      000678 AA 82            [24] 1637 	mov	r2,dpl
      00067A AB 83            [24] 1638 	mov	r3,dph
      00067C 15 81            [12] 1639 	dec	sp
      00067E 15 81            [12] 1640 	dec	sp
      000680 C0 02            [24] 1641 	push	ar2
      000682 C0 03            [24] 1642 	push	ar3
      000684 90 00 30         [24] 1643 	mov	dptr,#0x0030
      000687 12r00r00         [24] 1644 	lcall	__mulint
      00068A AA 82            [24] 1645 	mov	r2,dpl
      00068C AB 83            [24] 1646 	mov	r3,dph
      00068E 15 81            [12] 1647 	dec	sp
      000690 15 81            [12] 1648 	dec	sp
      000692 D0 04            [24] 1649 	pop	ar4
      000694 D0 05            [24] 1650 	pop	ar5
      000696 D0 06            [24] 1651 	pop	ar6
      000698 D0 07            [24] 1652 	pop	ar7
      00069A EC               [12] 1653 	mov	a,r4
      00069B 2A               [12] 1654 	add	a,r2
      00069C FC               [12] 1655 	mov	r4,a
      00069D ED               [12] 1656 	mov	a,r5
      00069E 3B               [12] 1657 	addc	a,r3
      00069F FD               [12] 1658 	mov	r5,a
      0006A0 EC               [12] 1659 	mov	a,r4
      0006A1 24r00            [12] 1660 	add	a,#_u
      0006A3 F5 82            [12] 1661 	mov	dpl,a
      0006A5 ED               [12] 1662 	mov	a,r5
      0006A6 34s48            [12] 1663 	addc	a,#(_u >> 8)
      0006A8 F5 83            [12] 1664 	mov	dph,a
      0006AA E0               [24] 1665 	movx	a,@dptr
      0006AB FD               [12] 1666 	mov	r5,a
      0006AC E5*00            [12] 1667 	mov	a,_bp
      0006AE 24 0C            [12] 1668 	add	a,#0x0c
      0006B0 F8               [12] 1669 	mov	r0,a
      0006B1 E5*00            [12] 1670 	mov	a,_bp
      0006B3 24 0C            [12] 1671 	add	a,#0x0c
      0006B5 F9               [12] 1672 	mov	r1,a
      0006B6 ED               [12] 1673 	mov	a,r5
      0006B7 26               [12] 1674 	add	a,@r0
      0006B8 F7               [12] 1675 	mov	@r1,a
                                   1676 ;	life.c:187: UPDN(1, 0);
      0006B9 E5*00            [12] 1677 	mov	a,_bp
      0006BB 24 08            [12] 1678 	add	a,#0x08
      0006BD F8               [12] 1679 	mov	r0,a
      0006BE E6               [12] 1680 	mov	a,@r0
      0006BF 2A               [12] 1681 	add	a,r2
      0006C0 FC               [12] 1682 	mov	r4,a
      0006C1 08               [12] 1683 	inc	r0
      0006C2 E6               [12] 1684 	mov	a,@r0
      0006C3 3B               [12] 1685 	addc	a,r3
      0006C4 FD               [12] 1686 	mov	r5,a
      0006C5 EC               [12] 1687 	mov	a,r4
      0006C6 24r00            [12] 1688 	add	a,#_u
      0006C8 F5 82            [12] 1689 	mov	dpl,a
      0006CA ED               [12] 1690 	mov	a,r5
      0006CB 34s48            [12] 1691 	addc	a,#(_u >> 8)
      0006CD F5 83            [12] 1692 	mov	dph,a
      0006CF E0               [24] 1693 	movx	a,@dptr
      0006D0 FD               [12] 1694 	mov	r5,a
      0006D1 E5*00            [12] 1695 	mov	a,_bp
      0006D3 24 0C            [12] 1696 	add	a,#0x0c
      0006D5 F8               [12] 1697 	mov	r0,a
      0006D6 ED               [12] 1698 	mov	a,r5
      0006D7 26               [12] 1699 	add	a,@r0
      0006D8 FD               [12] 1700 	mov	r5,a
                                   1701 ;	life.c:188: UPDN(1, 1);
      0006D9 78r10            [12] 1702 	mov	r0,#_dy
      0006DB 76 01            [12] 1703 	mov	@r0,#0x01
      0006DD 08               [12] 1704 	inc	r0
      0006DE 76 00            [12] 1705 	mov	@r0,#0x00
      0006E0 78r0E            [12] 1706 	mov	r0,#_dx
      0006E2 76 01            [12] 1707 	mov	@r0,#0x01
      0006E4 08               [12] 1708 	inc	r0
      0006E5 76 00            [12] 1709 	mov	@r0,#0x00
      0006E7 EE               [12] 1710 	mov	a,r6
      0006E8 2A               [12] 1711 	add	a,r2
      0006E9 FE               [12] 1712 	mov	r6,a
      0006EA EF               [12] 1713 	mov	a,r7
      0006EB 3B               [12] 1714 	addc	a,r3
      0006EC FF               [12] 1715 	mov	r7,a
      0006ED EE               [12] 1716 	mov	a,r6
      0006EE 24r00            [12] 1717 	add	a,#_u
      0006F0 F5 82            [12] 1718 	mov	dpl,a
      0006F2 EF               [12] 1719 	mov	a,r7
      0006F3 34s48            [12] 1720 	addc	a,#(_u >> 8)
      0006F5 F5 83            [12] 1721 	mov	dph,a
      0006F7 E0               [24] 1722 	movx	a,@dptr
      0006F8 2D               [12] 1723 	add	a,r5
      0006F9 FF               [12] 1724 	mov	r7,a
      0006FA 78r0B            [12] 1725 	mov	r0,#_n
      0006FC A6 07            [24] 1726 	mov	@r0,ar7
                                   1727 ;	life.c:191: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0006FE A8*00            [24] 1728 	mov	r0,_bp
      000700 08               [12] 1729 	inc	r0
      000701 08               [12] 1730 	inc	r0
      000702 E6               [12] 1731 	mov	a,@r0
      000703 24r00            [12] 1732 	add	a,#_nu
      000705 FD               [12] 1733 	mov	r5,a
      000706 08               [12] 1734 	inc	r0
      000707 E6               [12] 1735 	mov	a,@r0
      000708 34s6C            [12] 1736 	addc	a,#(_nu >> 8)
      00070A FE               [12] 1737 	mov	r6,a
      00070B BF 03 02         [24] 1738 	cjne	r7,#0x03,00441$
      00070E 80 28            [24] 1739 	sjmp	00232$
      000710                       1740 00441$:
      000710 BF 02 21         [24] 1741 	cjne	r7,#0x02,00231$
      000713 E5*00            [12] 1742 	mov	a,_bp
      000715 24 04            [12] 1743 	add	a,#0x04
      000717 F8               [12] 1744 	mov	r0,a
      000718 E5*00            [12] 1745 	mov	a,_bp
      00071A 24 06            [12] 1746 	add	a,#0x06
      00071C F9               [12] 1747 	mov	r1,a
      00071D E7               [12] 1748 	mov	a,@r1
      00071E 26               [12] 1749 	add	a,@r0
      00071F FC               [12] 1750 	mov	r4,a
      000720 09               [12] 1751 	inc	r1
      000721 E7               [12] 1752 	mov	a,@r1
      000722 08               [12] 1753 	inc	r0
      000723 36               [12] 1754 	addc	a,@r0
      000724 FF               [12] 1755 	mov	r7,a
      000725 EC               [12] 1756 	mov	a,r4
      000726 24r00            [12] 1757 	add	a,#_u
      000728 FC               [12] 1758 	mov	r4,a
      000729 EF               [12] 1759 	mov	a,r7
      00072A 34s48            [12] 1760 	addc	a,#(_u >> 8)
      00072C FF               [12] 1761 	mov	r7,a
      00072D 8C 82            [24] 1762 	mov	dpl,r4
      00072F 8F 83            [24] 1763 	mov	dph,r7
      000731 E0               [24] 1764 	movx	a,@dptr
      000732 70 04            [24] 1765 	jnz	00232$
      000734                       1766 00231$:
                                   1767 ;	assignBit
      000734 C2*00            [12] 1768 	clr	b0
      000736 80 02            [24] 1769 	sjmp	00233$
      000738                       1770 00232$:
                                   1771 ;	assignBit
      000738 D2*00            [12] 1772 	setb	b0
      00073A                       1773 00233$:
      00073A A2*00            [12] 1774 	mov	c,b0
      00073C E4               [12] 1775 	clr	a
      00073D 33               [12] 1776 	rlc	a
      00073E 8D 82            [24] 1777 	mov	dpl,r5
      000740 8E 83            [24] 1778 	mov	dph,r6
      000742 F0               [24] 1779 	movx	@dptr,a
                                   1780 ;	life.c:192: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000743 78r05            [12] 1781 	mov	r0,#_y
      000745 E6               [12] 1782 	mov	a,@r0
      000746 C0 E0            [24] 1783 	push	acc
      000748 08               [12] 1784 	inc	r0
      000749 E6               [12] 1785 	mov	a,@r0
      00074A C0 E0            [24] 1786 	push	acc
      00074C 90 00 30         [24] 1787 	mov	dptr,#0x0030
      00074F 12r00r00         [24] 1788 	lcall	__mulint
      000752 AE 82            [24] 1789 	mov	r6,dpl
      000754 AF 83            [24] 1790 	mov	r7,dph
      000756 15 81            [12] 1791 	dec	sp
      000758 15 81            [12] 1792 	dec	sp
      00075A 78r03            [12] 1793 	mov	r0,#_x
      00075C E6               [12] 1794 	mov	a,@r0
      00075D 2E               [12] 1795 	add	a,r6
      00075E FE               [12] 1796 	mov	r6,a
      00075F 08               [12] 1797 	inc	r0
      000760 E6               [12] 1798 	mov	a,@r0
      000761 3F               [12] 1799 	addc	a,r7
      000762 FF               [12] 1800 	mov	r7,a
      000763 EE               [12] 1801 	mov	a,r6
      000764 24r00            [12] 1802 	add	a,#_pu
      000766 F5 82            [12] 1803 	mov	dpl,a
      000768 EF               [12] 1804 	mov	a,r7
      000769 34s24            [12] 1805 	addc	a,#(_pu >> 8)
      00076B F5 83            [12] 1806 	mov	dph,a
      00076D E0               [24] 1807 	movx	a,@dptr
      00076E FD               [12] 1808 	mov	r5,a
      00076F EE               [12] 1809 	mov	a,r6
      000770 24r00            [12] 1810 	add	a,#_nu
      000772 F5 82            [12] 1811 	mov	dpl,a
      000774 EF               [12] 1812 	mov	a,r7
      000775 34s6C            [12] 1813 	addc	a,#(_nu >> 8)
      000777 F5 83            [12] 1814 	mov	dph,a
      000779 E0               [24] 1815 	movx	a,@dptr
      00077A FC               [12] 1816 	mov	r4,a
      00077B 6D               [12] 1817 	xrl	a,r5
      00077C 78r0D            [12] 1818 	mov	r0,#_cycle2
      00077E 46               [12] 1819 	orl	a,@r0
      00077F F6               [12] 1820 	mov	@r0,a
                                   1821 ;	life.c:193: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000780 EE               [12] 1822 	mov	a,r6
      000781 24r00            [12] 1823 	add	a,#_u
      000783 F5 82            [12] 1824 	mov	dpl,a
      000785 EF               [12] 1825 	mov	a,r7
      000786 34s48            [12] 1826 	addc	a,#(_u >> 8)
      000788 F5 83            [12] 1827 	mov	dph,a
      00078A E0               [24] 1828 	movx	a,@dptr
      00078B FF               [12] 1829 	mov	r7,a
      00078C EC               [12] 1830 	mov	a,r4
      00078D 6F               [12] 1831 	xrl	a,r7
      00078E 78r0C            [12] 1832 	mov	r0,#_fixed
      000790 46               [12] 1833 	orl	a,@r0
      000791 F6               [12] 1834 	mov	@r0,a
                                   1835 ;	life.c:172: for (x = 0; x < W; x++) {
      000792 78r03            [12] 1836 	mov	r0,#_x
      000794 06               [12] 1837 	inc	@r0
      000795 B6 00 02         [24] 1838 	cjne	@r0,#0x00,00445$
      000798 08               [12] 1839 	inc	r0
      000799 06               [12] 1840 	inc	@r0
      00079A                       1841 00445$:
      00079A 78r03            [12] 1842 	mov	r0,#_x
      00079C C3               [12] 1843 	clr	c
      00079D E6               [12] 1844 	mov	a,@r0
      00079E 94 30            [12] 1845 	subb	a,#0x30
      0007A0 08               [12] 1846 	inc	r0
      0007A1 E6               [12] 1847 	mov	a,@r0
      0007A2 64 80            [12] 1848 	xrl	a,#0x80
      0007A4 94 80            [12] 1849 	subb	a,#0x80
      0007A6 50 03            [24] 1850 	jnc	00446$
      0007A8 02r04r1A         [24] 1851 	ljmp	00219$
      0007AB                       1852 00446$:
                                   1853 ;	life.c:169: for (y = 0; y < H; y++) {
      0007AB 78r05            [12] 1854 	mov	r0,#_y
      0007AD 06               [12] 1855 	inc	@r0
      0007AE B6 00 02         [24] 1856 	cjne	@r0,#0x00,00447$
      0007B1 08               [12] 1857 	inc	r0
      0007B2 06               [12] 1858 	inc	@r0
      0007B3                       1859 00447$:
      0007B3 78r05            [12] 1860 	mov	r0,#_y
      0007B5 C3               [12] 1861 	clr	c
      0007B6 E6               [12] 1862 	mov	a,@r0
      0007B7 94 C0            [12] 1863 	subb	a,#0xc0
      0007B9 08               [12] 1864 	inc	r0
      0007BA E6               [12] 1865 	mov	a,@r0
      0007BB 64 80            [12] 1866 	xrl	a,#0x80
      0007BD 94 80            [12] 1867 	subb	a,#0x80
      0007BF 50 03            [24] 1868 	jnc	00448$
      0007C1 02r03rFE         [24] 1869 	ljmp	00221$
      0007C4                       1870 00448$:
                                   1871 ;	life.c:197: OE76 = OE76_0;
      0007C4 78r02            [12] 1872 	mov	r0,#_OE76
      0007C6 76 3F            [12] 1873 	mov	@r0,#0x3f
                                   1874 ;	life.c:198: flashOE();
      0007C8 12r00r18         [24] 1875 	lcall	_flashOE
                                   1876 ;	life.c:200: cycle2 = !cycle2;
      0007CB 78r0D            [12] 1877 	mov	r0,#_cycle2
      0007CD E6               [12] 1878 	mov	a,@r0
      0007CE B4 01 00         [24] 1879 	cjne	a,#0x01,00449$
      0007D1                       1880 00449$:
      0007D1 92*00            [24] 1881 	mov	b0,c
      0007D3 78r0D            [12] 1882 	mov	r0,#_cycle2
      0007D5 E4               [12] 1883 	clr	a
      0007D6 33               [12] 1884 	rlc	a
      0007D7 F6               [12] 1885 	mov	@r0,a
                                   1886 ;	life.c:201: fixed = !fixed;
      0007D8 78r0C            [12] 1887 	mov	r0,#_fixed
      0007DA E6               [12] 1888 	mov	a,@r0
      0007DB B4 01 00         [24] 1889 	cjne	a,#0x01,00450$
      0007DE                       1890 00450$:
      0007DE 92*00            [24] 1891 	mov	b0,c
      0007E0 78r0C            [12] 1892 	mov	r0,#_fixed
      0007E2 E4               [12] 1893 	clr	a
      0007E3 33               [12] 1894 	rlc	a
      0007E4 F6               [12] 1895 	mov	@r0,a
                                   1896 ;	life.c:203: memcpy(pu, u, sizeof (u));
      0007E5 E4               [12] 1897 	clr	a
      0007E6 C0 E0            [24] 1898 	push	acc
      0007E8 74 24            [12] 1899 	mov	a,#0x24
      0007EA C0 E0            [24] 1900 	push	acc
      0007EC 74r00            [12] 1901 	mov	a,#_u
      0007EE C0 E0            [24] 1902 	push	acc
      0007F0 74s48            [12] 1903 	mov	a,#(_u >> 8)
      0007F2 C0 E0            [24] 1904 	push	acc
      0007F4 E4               [12] 1905 	clr	a
      0007F5 C0 E0            [24] 1906 	push	acc
      0007F7 90r24r00         [24] 1907 	mov	dptr,#_pu
      0007FA 75 F0 00         [24] 1908 	mov	b,#0x00
      0007FD 12r00r00         [24] 1909 	lcall	___memcpy
      000800 E5 81            [12] 1910 	mov	a,sp
      000802 24 FB            [12] 1911 	add	a,#0xfb
      000804 F5 81            [12] 1912 	mov	sp,a
                                   1913 ;	life.c:204: memcpy(u, nu, sizeof (nu));
      000806 E4               [12] 1914 	clr	a
      000807 C0 E0            [24] 1915 	push	acc
      000809 74 24            [12] 1916 	mov	a,#0x24
      00080B C0 E0            [24] 1917 	push	acc
      00080D 74r00            [12] 1918 	mov	a,#_nu
      00080F C0 E0            [24] 1919 	push	acc
      000811 74s6C            [12] 1920 	mov	a,#(_nu >> 8)
      000813 C0 E0            [24] 1921 	push	acc
      000815 E4               [12] 1922 	clr	a
      000816 C0 E0            [24] 1923 	push	acc
      000818 90r48r00         [24] 1924 	mov	dptr,#_u
      00081B 75 F0 00         [24] 1925 	mov	b,#0x00
      00081E 12r00r00         [24] 1926 	lcall	___memcpy
      000821 E5 81            [12] 1927 	mov	a,sp
      000823 24 FB            [12] 1928 	add	a,#0xfb
      000825 F5 81            [12] 1929 	mov	sp,a
                                   1930 ;	life.c:258: if (fixed || cycle2) {
      000827 78r0C            [12] 1931 	mov	r0,#_fixed
      000829 E6               [12] 1932 	mov	a,@r0
      00082A 70 05            [24] 1933 	jnz	00135$
      00082C 78r0D            [12] 1934 	mov	r0,#_cycle2
      00082E E6               [12] 1935 	mov	a,@r0
      00082F 60 27            [24] 1936 	jz	00136$
      000831                       1937 00135$:
                                   1938 ;	life.c:259: printstr("DONE ");
      000831 90r00r64         [24] 1939 	mov	dptr,#___str_10
      000834 75 F0 80         [24] 1940 	mov	b,#0x80
      000837 12r00r00         [24] 1941 	lcall	_printstr
                                   1942 ;	life.c:260: if (fixed) printstr("FIXED\r\n");
      00083A 78r0C            [12] 1943 	mov	r0,#_fixed
      00083C E6               [12] 1944 	mov	a,@r0
      00083D 60 0B            [24] 1945 	jz	00133$
      00083F 90r00r6A         [24] 1946 	mov	dptr,#___str_11
      000842 75 F0 80         [24] 1947 	mov	b,#0x80
      000845 12r00r00         [24] 1948 	lcall	_printstr
      000848 80 09            [24] 1949 	sjmp	00134$
      00084A                       1950 00133$:
                                   1951 ;	life.c:261: else printstr("CYCLE2\r\n");
      00084A 90r00r72         [24] 1952 	mov	dptr,#___str_12
      00084D 75 F0 80         [24] 1953 	mov	b,#0x80
      000850 12r00r00         [24] 1954 	lcall	_printstr
      000853                       1955 00134$:
                                   1956 ;	life.c:262: (void)getchar();
      000853 12r00r00         [24] 1957 	lcall	_getchar
                                   1958 ;	life.c:263: break;
      000856 80 50            [24] 1959 	sjmp	00145$
      000858                       1960 00136$:
                                   1961 ;	life.c:266: c = getchar_poll();
      000858 12r00r00         [24] 1962 	lcall	_getchar_poll
      00085B AE 82            [24] 1963 	mov	r6,dpl
      00085D AF 83            [24] 1964 	mov	r7,dph
      00085F 78r09            [12] 1965 	mov	r0,#_c
      000861 A6 06            [24] 1966 	mov	@r0,ar6
      000863 08               [12] 1967 	inc	r0
      000864 A6 07            [24] 1968 	mov	@r0,ar7
                                   1969 ;	life.c:267: if (c > 0) {
      000866 C3               [12] 1970 	clr	c
      000867 E4               [12] 1971 	clr	a
      000868 9E               [12] 1972 	subb	a,r6
      000869 74 80            [12] 1973 	mov	a,#(0x00 ^ 0x80)
      00086B 8F F0            [24] 1974 	mov	b,r7
      00086D 63 F0 80         [24] 1975 	xrl	b,#0x80
      000870 95 F0            [12] 1976 	subb	a,b
      000872 40 03            [24] 1977 	jc	00454$
      000874 02r03rD3         [24] 1978 	ljmp	00225$
      000877                       1979 00454$:
                                   1980 ;	life.c:268: c = toupper(c);
      000877 8E 82            [24] 1981 	mov	dpl,r6
      000879 8F 83            [24] 1982 	mov	dph,r7
      00087B 12r00r00         [24] 1983 	lcall	_toupper
      00087E AE 82            [24] 1984 	mov	r6,dpl
      000880 AF 83            [24] 1985 	mov	r7,dph
      000882 78r09            [12] 1986 	mov	r0,#_c
      000884 A6 06            [24] 1987 	mov	@r0,ar6
      000886 08               [12] 1988 	inc	r0
      000887 A6 07            [24] 1989 	mov	@r0,ar7
                                   1990 ;	life.c:269: if (c == (int)'T') i0 = 1;
      000889 BE 54 0A         [24] 1991 	cjne	r6,#0x54,00141$
      00088C BF 00 07         [24] 1992 	cjne	r7,#0x00,00141$
      00088F 78r00            [12] 1993 	mov	r0,#_i0
      000891 76 01            [12] 1994 	mov	@r0,#0x01
      000893 02r03rD3         [24] 1995 	ljmp	00225$
      000896                       1996 00141$:
                                   1997 ;	life.c:270: else if (c == (int)'B') i1 = 1;
      000896 BE 42 05         [24] 1998 	cjne	r6,#0x42,00457$
      000899 BF 00 02         [24] 1999 	cjne	r7,#0x00,00457$
      00089C 80 03            [24] 2000 	sjmp	00458$
      00089E                       2001 00457$:
      00089E 02r03rD3         [24] 2002 	ljmp	00225$
      0008A1                       2003 00458$:
      0008A1 78r01            [12] 2004 	mov	r0,#_i1
      0008A3 76 01            [12] 2005 	mov	@r0,#0x01
      0008A5 02r03rD3         [24] 2006 	ljmp	00225$
      0008A8                       2007 00145$:
                                   2008 ;	life.c:274: if (i1) {
      0008A8 78r01            [12] 2009 	mov	r0,#_i1
      0008AA E6               [12] 2010 	mov	a,@r0
      0008AB 60 0C            [24] 2011 	jz	00228$
                                   2012 ;	life.c:275: printstr("BREAK\r\n");
      0008AD 90r00r7B         [24] 2013 	mov	dptr,#___str_13
      0008B0 75 F0 80         [24] 2014 	mov	b,#0x80
      0008B3 12r00r00         [24] 2015 	lcall	_printstr
                                   2016 ;	life.c:276: (void)getchar();
      0008B6 12r00r00         [24] 2017 	lcall	_getchar
      0008B9                       2018 00228$:
                                   2019 ;	life.c:229: for (i0 = 0; !i0; ) {	
      0008B9 78r00            [12] 2020 	mov	r0,#_i0
      0008BB E6               [12] 2021 	mov	a,@r0
      0008BC 70 03            [24] 2022 	jnz	00460$
      0008BE 02r01r5A         [24] 2023 	ljmp	00227$
      0008C1                       2024 00460$:
                                   2025 ;	life.c:280: term:
      0008C1                       2026 00149$:
                                   2027 ;	life.c:281: EA = 0;
                                   2028 ;	assignBit
      0008C1 C2 AF            [12] 2029 	clr	_EA
                                   2030 ;	life.c:282: printstr("TERM\r\n");
      0008C3 90r00r83         [24] 2031 	mov	dptr,#___str_14
      0008C6 75 F0 80         [24] 2032 	mov	b,#0x80
      0008C9 12r00r00         [24] 2033 	lcall	_printstr
                                   2034 ;	life.c:283: (void)getchar();
      0008CC 12r00r00         [24] 2035 	lcall	_getchar
                                   2036 ;	life.c:285: PCON |= 2;
      0008CF 43 87 02         [24] 2037 	orl	_PCON,#0x02
                                   2038 ;	life.c:287: return;
                                   2039 ;	life.c:288: }
      0008D2 85*00 81         [24] 2040 	mov	sp,_bp
      0008D5 D0*00            [24] 2041 	pop	_bp
      0008D7 22               [24] 2042 	ret
                                   2043 	.area CSEG    (CODE)
                                   2044 	.area CONST   (CODE)
                                   2045 	.area CONST   (CODE)
      000000                       2046 ___str_0:
      000000 1B                    2047 	.db 0x1b
      000001 5B 3F 32 35 6C        2048 	.ascii "[?25l"
      000006 00                    2049 	.db 0x00
                                   2050 	.area CSEG    (CODE)
                                   2051 	.area CONST   (CODE)
      000007                       2052 ___str_1:
      000007 1B                    2053 	.db 0x1b
      000008 5B 32 4A 47 45 4E 20  2054 	.ascii "[2JGEN "
      00000F 00                    2055 	.db 0x00
                                   2056 	.area CSEG    (CODE)
                                   2057 	.area CONST   (CODE)
      000010                       2058 ___str_2:
      000010 0D                    2059 	.db 0x0d
      000011 0A                    2060 	.db 0x0a
      000012 00                    2061 	.db 0x00
                                   2062 	.area CSEG    (CODE)
                                   2063 	.area CONST   (CODE)
      000013                       2064 ___str_3:
      000013 1B                    2065 	.db 0x1b
      000014 5B 3F 32 35 68        2066 	.ascii "[?25h"
      000019 00                    2067 	.db 0x00
                                   2068 	.area CSEG    (CODE)
                                   2069 	.area CONST   (CODE)
      00001A                       2070 ___str_4:
      00001A 4C 4F 41 44 20 30 20  2071 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000028 00                    2072 	.db 0x00
                                   2073 	.area CSEG    (CODE)
                                   2074 	.area CONST   (CODE)
      000029                       2075 ___str_5:
      000029 3E                    2076 	.ascii ">"
      00002A 0D                    2077 	.db 0x0d
      00002B 0A                    2078 	.db 0x0a
      00002C 00                    2079 	.db 0x00
                                   2080 	.area CSEG    (CODE)
                                   2081 	.area CONST   (CODE)
      00002D                       2082 ___str_6:
      00002D 52 41 4E 44 4F 4D     2083 	.ascii "RANDOM"
      000033 00                    2084 	.db 0x00
                                   2085 	.area CSEG    (CODE)
                                   2086 	.area CONST   (CODE)
      000034                       2087 ___str_7:
      000034 1B                    2088 	.db 0x1b
      000035 5B 3F 32 35 68        2089 	.ascii "[?25h"
      00003A 1B                    2090 	.db 0x1b
      00003B 5B 6D                 2091 	.ascii "[m"
      00003D 00                    2092 	.db 0x00
                                   2093 	.area CSEG    (CODE)
                                   2094 	.area CONST   (CODE)
      00003E                       2095 ___str_8:
      00003E 4C 49 46 45 20 49 4E  2096 	.ascii "LIFE INIT T L R P"
             49 54 20 54 20 4C 20
             52 20 50
      00004F 0D                    2097 	.db 0x0d
      000050 0A                    2098 	.db 0x0a
      000051 00                    2099 	.db 0x00
                                   2100 	.area CSEG    (CODE)
                                   2101 	.area CONST   (CODE)
      000052                       2102 ___str_9:
      000052 52 45 41 44 59 20 54  2103 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000061 0D                    2104 	.db 0x0d
      000062 0A                    2105 	.db 0x0a
      000063 00                    2106 	.db 0x00
                                   2107 	.area CSEG    (CODE)
                                   2108 	.area CONST   (CODE)
      000064                       2109 ___str_10:
      000064 44 4F 4E 45 20        2110 	.ascii "DONE "
      000069 00                    2111 	.db 0x00
                                   2112 	.area CSEG    (CODE)
                                   2113 	.area CONST   (CODE)
      00006A                       2114 ___str_11:
      00006A 46 49 58 45 44        2115 	.ascii "FIXED"
      00006F 0D                    2116 	.db 0x0d
      000070 0A                    2117 	.db 0x0a
      000071 00                    2118 	.db 0x00
                                   2119 	.area CSEG    (CODE)
                                   2120 	.area CONST   (CODE)
      000072                       2121 ___str_12:
      000072 43 59 43 4C 45 32     2122 	.ascii "CYCLE2"
      000078 0D                    2123 	.db 0x0d
      000079 0A                    2124 	.db 0x0a
      00007A 00                    2125 	.db 0x00
                                   2126 	.area CSEG    (CODE)
                                   2127 	.area CONST   (CODE)
      00007B                       2128 ___str_13:
      00007B 42 52 45 41 4B        2129 	.ascii "BREAK"
      000080 0D                    2130 	.db 0x0d
      000081 0A                    2131 	.db 0x0a
      000082 00                    2132 	.db 0x00
                                   2133 	.area CSEG    (CODE)
                                   2134 	.area CONST   (CODE)
      000083                       2135 ___str_14:
      000083 54 45 52 4D           2136 	.ascii "TERM"
      000087 0D                    2137 	.db 0x0d
      000088 0A                    2138 	.db 0x0a
      000089 00                    2139 	.db 0x00
                                   2140 	.area CSEG    (CODE)
                                   2141 	.area XINIT   (CODE)
                                   2142 	.area CABS    (ABS,CODE)
