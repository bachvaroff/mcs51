                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _showu
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print32x
                                     16 	.globl _print16x
                                     17 	.globl _printstr
                                     18 	.globl _getchar_poll
                                     19 	.globl _getchar
                                     20 	.globl _putchar
                                     21 	.globl _toupper
                                     22 	.globl ___memcpy
                                     23 	.globl _memset
                                     24 	.globl _srand
                                     25 	.globl _rand
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable bit register bank
                                    291 ;--------------------------------------------------------
                                    292 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        293 bits:
      000000                        294 	.ds 1
                           008000   295 	b0 = bits[0]
                           008100   296 	b1 = bits[1]
                           008200   297 	b2 = bits[2]
                           008300   298 	b3 = bits[3]
                           008400   299 	b4 = bits[4]
                           008500   300 	b5 = bits[5]
                           008600   301 	b6 = bits[6]
                           008700   302 	b7 = bits[7]
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 ;--------------------------------------------------------
                                    311 ; Stack segment in internal ram 
                                    312 ;--------------------------------------------------------
                                    313 	.area	SSEG
      000000                        314 __start__stack:
      000000                        315 	.ds	1
                                    316 
                                    317 ;--------------------------------------------------------
                                    318 ; indirectly addressable internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area ISEG    (DATA)
      000000                        321 _i0:
      000000                        322 	.ds 1
      000001                        323 _i1:
      000001                        324 	.ds 1
      000002                        325 _OE76:
      000002                        326 	.ds 1
      000003                        327 _x:
      000003                        328 	.ds 2
      000005                        329 _y:
      000005                        330 	.ds 2
      000007                        331 _n:
      000007                        332 	.ds 1
      000008                        333 _fixed:
      000008                        334 	.ds 1
      000009                        335 _cycle2:
      000009                        336 	.ds 1
      00000A                        337 _gen:
      00000A                        338 	.ds 4
      00000E                        339 _genc2:
      00000E                        340 	.ds 4
      000012                        341 _genfx:
      000012                        342 	.ds 4
      000016                        343 _c2set:
      000016                        344 	.ds 1
      000017                        345 _fxset:
      000017                        346 	.ds 1
      000018                        347 _pruni:
      000018                        348 	.ds 1
                                    349 ;--------------------------------------------------------
                                    350 ; absolute internal ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area IABS    (ABS,DATA)
                                    353 	.area IABS    (ABS,DATA)
                                    354 ;--------------------------------------------------------
                                    355 ; bit data
                                    356 ;--------------------------------------------------------
                                    357 	.area BSEG    (BIT)
                                    358 ;--------------------------------------------------------
                                    359 ; paged external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area PSEG    (PAG,XDATA)
                                    362 ;--------------------------------------------------------
                                    363 ; external ram data
                                    364 ;--------------------------------------------------------
                                    365 	.area XSEG    (XDATA)
                           00E000   366 _RND	=	0xe000
                           00F006   367 _OEreg	=	0xf006
      000000                        368 _iu:
      000000                        369 	.ds 9216
      002400                        370 _pu:
      002400                        371 	.ds 9216
      004800                        372 _u:
      004800                        373 	.ds 9216
      006C00                        374 _nu:
      006C00                        375 	.ds 9216
                                    376 ;--------------------------------------------------------
                                    377 ; absolute external ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XABS    (ABS,XDATA)
                                    380 ;--------------------------------------------------------
                                    381 ; external initialized ram data
                                    382 ;--------------------------------------------------------
                                    383 	.area XISEG   (XDATA)
                                    384 	.area HOME    (CODE)
                                    385 	.area GSINIT0 (CODE)
                                    386 	.area GSINIT1 (CODE)
                                    387 	.area GSINIT2 (CODE)
                                    388 	.area GSINIT3 (CODE)
                                    389 	.area GSINIT4 (CODE)
                                    390 	.area GSINIT5 (CODE)
                                    391 	.area GSINIT  (CODE)
                                    392 	.area GSFINAL (CODE)
                                    393 	.area CSEG    (CODE)
                                    394 ;--------------------------------------------------------
                                    395 ; interrupt vector 
                                    396 ;--------------------------------------------------------
                                    397 	.area HOME    (CODE)
      000000                        398 __interrupt_vect:
      000000 02r00r00         [24]  399 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  400 	ljmp	_int0
      000006                        401 	.ds	5
      00000B 32               [24]  402 	reti
      00000C                        403 	.ds	7
      000013 02r00r0C         [24]  404 	ljmp	_int1
                                    405 ;--------------------------------------------------------
                                    406 ; global & static initialisations
                                    407 ;--------------------------------------------------------
                                    408 	.area HOME    (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.area GSFINAL (CODE)
                                    411 	.area GSINIT  (CODE)
                                    412 	.globl __sdcc_gsinit_startup
                                    413 	.globl __sdcc_program_startup
                                    414 	.globl __start__stack
                                    415 	.globl __mcs51_genXINIT
                                    416 	.globl __mcs51_genXRAMCLEAR
                                    417 	.globl __mcs51_genRAMCLEAR
                                    418 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  419 	ljmp	__sdcc_program_startup
                                    420 ;--------------------------------------------------------
                                    421 ; Home
                                    422 ;--------------------------------------------------------
                                    423 	.area HOME    (CODE)
                                    424 	.area HOME    (CODE)
      000016                        425 __sdcc_program_startup:
      000016 02r01r4F         [24]  426 	ljmp	_main
                                    427 ;	return from main will return to caller
                                    428 ;--------------------------------------------------------
                                    429 ; code
                                    430 ;--------------------------------------------------------
                                    431 	.area CSEG    (CODE)
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'int0'
                                    434 ;------------------------------------------------------------
                                    435 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    436 ;	-----------------------------------------
                                    437 ;	 function int0
                                    438 ;	-----------------------------------------
      000000                        439 _int0:
                           00000F   440 	ar7 = 0x0f
                           00000E   441 	ar6 = 0x0e
                           00000D   442 	ar5 = 0x0d
                           00000C   443 	ar4 = 0x0c
                           00000B   444 	ar3 = 0x0b
                           00000A   445 	ar2 = 0x0a
                           000009   446 	ar1 = 0x09
                           000008   447 	ar0 = 0x08
      000000 C0 D0            [24]  448 	push	psw
      000002 75 D0 08         [24]  449 	mov	psw,#0x08
                                    450 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  451 	mov	r0,#_i0
      000007 76 01            [12]  452 	mov	@r0,#0x01
                                    453 ;	life.c:15: }
      000009 D0 D0            [24]  454 	pop	psw
      00000B 32               [24]  455 	reti
                                    456 ;	eliminated unneeded push/pop dpl
                                    457 ;	eliminated unneeded push/pop dph
                                    458 ;	eliminated unneeded push/pop b
                                    459 ;	eliminated unneeded push/pop acc
                                    460 ;------------------------------------------------------------
                                    461 ;Allocation info for local variables in function 'int1'
                                    462 ;------------------------------------------------------------
                                    463 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    464 ;	-----------------------------------------
                                    465 ;	 function int1
                                    466 ;	-----------------------------------------
      00000C                        467 _int1:
      00000C C0 D0            [24]  468 	push	psw
      00000E 75 D0 08         [24]  469 	mov	psw,#0x08
                                    470 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  471 	mov	r0,#_i1
      000013 76 01            [12]  472 	mov	@r0,#0x01
                                    473 ;	life.c:19: }
      000015 D0 D0            [24]  474 	pop	psw
      000017 32               [24]  475 	reti
                                    476 ;	eliminated unneeded push/pop dpl
                                    477 ;	eliminated unneeded push/pop dph
                                    478 ;	eliminated unneeded push/pop b
                                    479 ;	eliminated unneeded push/pop acc
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'flashOE'
                                    482 ;------------------------------------------------------------
                                    483 ;	life.c:29: static void flashOE(void) {
                                    484 ;	-----------------------------------------
                                    485 ;	 function flashOE
                                    486 ;	-----------------------------------------
      000018                        487 _flashOE:
                           000007   488 	ar7 = 0x07
                           000006   489 	ar6 = 0x06
                           000005   490 	ar5 = 0x05
                           000004   491 	ar4 = 0x04
                           000003   492 	ar3 = 0x03
                           000002   493 	ar2 = 0x02
                           000001   494 	ar1 = 0x01
                           000000   495 	ar0 = 0x00
                                    496 ;	life.c:30: OEreg = OE76;
      000018 78r02            [12]  497 	mov	r0,#_OE76
      00001A 90 F0 06         [24]  498 	mov	dptr,#_OEreg
      00001D E6               [12]  499 	mov	a,@r0
      00001E F0               [24]  500 	movx	@dptr,a
                                    501 ;	life.c:32: return;
                                    502 ;	life.c:33: }
      00001F 22               [24]  503 	ret
                                    504 ;------------------------------------------------------------
                                    505 ;Allocation info for local variables in function 'showu'
                                    506 ;------------------------------------------------------------
                                    507 ;universe                  Allocated to stack - _bp -5
                                    508 ;prflags                   Allocated to registers r7 
                                    509 ;------------------------------------------------------------
                                    510 ;	life.c:93: void showu(char prflags, char *universe) {
                                    511 ;	-----------------------------------------
                                    512 ;	 function showu
                                    513 ;	-----------------------------------------
      000020                        514 _showu:
      000020 C0*00            [24]  515 	push	_bp
      000022 85 81*00         [24]  516 	mov	_bp,sp
                                    517 ;	life.c:94: if (prflags & PRCLR) printstr("\033[2J");
      000025 E5 82            [12]  518 	mov	a,dpl
      000027 FF               [12]  519 	mov	r7,a
      000028 30 E0 0D         [24]  520 	jnb	acc.0,00102$
      00002B 90r00r00         [24]  521 	mov	dptr,#___str_0
      00002E 75 F0 80         [24]  522 	mov	b,#0x80
      000031 C0 07            [24]  523 	push	ar7
      000033 12r00r00         [24]  524 	lcall	_printstr
      000036 D0 07            [24]  525 	pop	ar7
      000038                        526 00102$:
                                    527 ;	life.c:95: if (prflags & PRHDR) {
      000038 EF               [12]  528 	mov	a,r7
      000039 30 E1 6B         [24]  529 	jnb	acc.1,00108$
                                    530 ;	life.c:96: printstr("GEN ");
      00003C 90r00r05         [24]  531 	mov	dptr,#___str_1
      00003F 75 F0 80         [24]  532 	mov	b,#0x80
      000042 C0 07            [24]  533 	push	ar7
      000044 12r00r00         [24]  534 	lcall	_printstr
                                    535 ;	life.c:97: print32x(gen);
      000047 78r0A            [12]  536 	mov	r0,#_gen
      000049 86 82            [24]  537 	mov	dpl,@r0
      00004B 08               [12]  538 	inc	r0
      00004C 86 83            [24]  539 	mov	dph,@r0
      00004E 08               [12]  540 	inc	r0
      00004F 86 F0            [24]  541 	mov	b,@r0
      000051 08               [12]  542 	inc	r0
      000052 E6               [12]  543 	mov	a,@r0
      000053 12r00r00         [24]  544 	lcall	_print32x
      000056 D0 07            [24]  545 	pop	ar7
                                    546 ;	life.c:98: if (c2set) {
      000058 78r16            [12]  547 	mov	r0,#_c2set
      00005A E6               [12]  548 	mov	a,@r0
      00005B 60 1C            [24]  549 	jz	00104$
                                    550 ;	life.c:99: printstr(" CYCLE2 ");
      00005D 90r00r0A         [24]  551 	mov	dptr,#___str_2
      000060 75 F0 80         [24]  552 	mov	b,#0x80
      000063 C0 07            [24]  553 	push	ar7
      000065 12r00r00         [24]  554 	lcall	_printstr
                                    555 ;	life.c:100: print32x(genc2);
      000068 78r0E            [12]  556 	mov	r0,#_genc2
      00006A 86 82            [24]  557 	mov	dpl,@r0
      00006C 08               [12]  558 	inc	r0
      00006D 86 83            [24]  559 	mov	dph,@r0
      00006F 08               [12]  560 	inc	r0
      000070 86 F0            [24]  561 	mov	b,@r0
      000072 08               [12]  562 	inc	r0
      000073 E6               [12]  563 	mov	a,@r0
      000074 12r00r00         [24]  564 	lcall	_print32x
      000077 D0 07            [24]  565 	pop	ar7
      000079                        566 00104$:
                                    567 ;	life.c:102: if (fxset) {
      000079 78r17            [12]  568 	mov	r0,#_fxset
      00007B E6               [12]  569 	mov	a,@r0
      00007C 60 1C            [24]  570 	jz	00106$
                                    571 ;	life.c:103: printstr(" FIXED ");
      00007E 90r00r13         [24]  572 	mov	dptr,#___str_3
      000081 75 F0 80         [24]  573 	mov	b,#0x80
      000084 C0 07            [24]  574 	push	ar7
      000086 12r00r00         [24]  575 	lcall	_printstr
                                    576 ;	life.c:104: print32x(genfx);
      000089 78r12            [12]  577 	mov	r0,#_genfx
      00008B 86 82            [24]  578 	mov	dpl,@r0
      00008D 08               [12]  579 	inc	r0
      00008E 86 83            [24]  580 	mov	dph,@r0
      000090 08               [12]  581 	inc	r0
      000091 86 F0            [24]  582 	mov	b,@r0
      000093 08               [12]  583 	inc	r0
      000094 E6               [12]  584 	mov	a,@r0
      000095 12r00r00         [24]  585 	lcall	_print32x
      000098 D0 07            [24]  586 	pop	ar7
      00009A                        587 00106$:
                                    588 ;	life.c:106: printstr("\r\n");
      00009A 90r00r1B         [24]  589 	mov	dptr,#___str_4
      00009D 75 F0 80         [24]  590 	mov	b,#0x80
      0000A0 C0 07            [24]  591 	push	ar7
      0000A2 12r00r00         [24]  592 	lcall	_printstr
      0000A5 D0 07            [24]  593 	pop	ar7
      0000A7                        594 00108$:
                                    595 ;	life.c:108: if (prflags & PRUNI) {
      0000A7 EF               [12]  596 	mov	a,r7
      0000A8 20 E2 03         [24]  597 	jb	acc.2,00166$
      0000AB 02r01r4C         [24]  598 	ljmp	00115$
      0000AE                        599 00166$:
                                    600 ;	life.c:109: printstr("\033[?25l");
      0000AE 90r00r1E         [24]  601 	mov	dptr,#___str_5
      0000B1 75 F0 80         [24]  602 	mov	b,#0x80
      0000B4 12r00r00         [24]  603 	lcall	_printstr
                                    604 ;	life.c:110: for (x = 0; x < W; x++) {
      0000B7 78r03            [12]  605 	mov	r0,#_x
      0000B9 E4               [12]  606 	clr	a
      0000BA F6               [12]  607 	mov	@r0,a
      0000BB 08               [12]  608 	inc	r0
      0000BC F6               [12]  609 	mov	@r0,a
      0000BD                        610 00118$:
                                    611 ;	life.c:111: for (y = 0; y < H; y++)
      0000BD 78r05            [12]  612 	mov	r0,#_y
      0000BF E4               [12]  613 	clr	a
      0000C0 F6               [12]  614 	mov	@r0,a
      0000C1 08               [12]  615 	inc	r0
      0000C2 F6               [12]  616 	mov	@r0,a
      0000C3                        617 00116$:
                                    618 ;	life.c:112: if (universe[A2D(W, y, x)]) putchar((int)'1');
      0000C3 78r05            [12]  619 	mov	r0,#_y
      0000C5 E6               [12]  620 	mov	a,@r0
      0000C6 C0 E0            [24]  621 	push	acc
      0000C8 08               [12]  622 	inc	r0
      0000C9 E6               [12]  623 	mov	a,@r0
      0000CA C0 E0            [24]  624 	push	acc
      0000CC 90 00 30         [24]  625 	mov	dptr,#0x0030
      0000CF 12r00r00         [24]  626 	lcall	__mulint
      0000D2 AE 82            [24]  627 	mov	r6,dpl
      0000D4 AF 83            [24]  628 	mov	r7,dph
      0000D6 15 81            [12]  629 	dec	sp
      0000D8 15 81            [12]  630 	dec	sp
      0000DA 78r03            [12]  631 	mov	r0,#_x
      0000DC E6               [12]  632 	mov	a,@r0
      0000DD 2E               [12]  633 	add	a,r6
      0000DE FE               [12]  634 	mov	r6,a
      0000DF 08               [12]  635 	inc	r0
      0000E0 E6               [12]  636 	mov	a,@r0
      0000E1 3F               [12]  637 	addc	a,r7
      0000E2 FF               [12]  638 	mov	r7,a
      0000E3 E5*00            [12]  639 	mov	a,_bp
      0000E5 24 FB            [12]  640 	add	a,#0xfb
      0000E7 F8               [12]  641 	mov	r0,a
      0000E8 EE               [12]  642 	mov	a,r6
      0000E9 26               [12]  643 	add	a,@r0
      0000EA FE               [12]  644 	mov	r6,a
      0000EB EF               [12]  645 	mov	a,r7
      0000EC 08               [12]  646 	inc	r0
      0000ED 36               [12]  647 	addc	a,@r0
      0000EE FF               [12]  648 	mov	r7,a
      0000EF 08               [12]  649 	inc	r0
      0000F0 86 05            [24]  650 	mov	ar5,@r0
      0000F2 8E 82            [24]  651 	mov	dpl,r6
      0000F4 8F 83            [24]  652 	mov	dph,r7
      0000F6 8D F0            [24]  653 	mov	b,r5
      0000F8 12r00r00         [24]  654 	lcall	__gptrget
      0000FB 60 08            [24]  655 	jz	00110$
      0000FD 90 00 31         [24]  656 	mov	dptr,#0x0031
      000100 12r00r00         [24]  657 	lcall	_putchar
      000103 80 06            [24]  658 	sjmp	00117$
      000105                        659 00110$:
                                    660 ;	life.c:113: else putchar((int)'0');
      000105 90 00 30         [24]  661 	mov	dptr,#0x0030
      000108 12r00r00         [24]  662 	lcall	_putchar
      00010B                        663 00117$:
                                    664 ;	life.c:111: for (y = 0; y < H; y++)
      00010B 78r05            [12]  665 	mov	r0,#_y
      00010D 06               [12]  666 	inc	@r0
      00010E B6 00 02         [24]  667 	cjne	@r0,#0x00,00168$
      000111 08               [12]  668 	inc	r0
      000112 06               [12]  669 	inc	@r0
      000113                        670 00168$:
      000113 78r05            [12]  671 	mov	r0,#_y
      000115 C3               [12]  672 	clr	c
      000116 E6               [12]  673 	mov	a,@r0
      000117 94 C0            [12]  674 	subb	a,#0xc0
      000119 08               [12]  675 	inc	r0
      00011A E6               [12]  676 	mov	a,@r0
      00011B 64 80            [12]  677 	xrl	a,#0x80
      00011D 94 80            [12]  678 	subb	a,#0x80
      00011F 40 A2            [24]  679 	jc	00116$
                                    680 ;	life.c:114: printstr("\r\n");
      000121 90r00r1B         [24]  681 	mov	dptr,#___str_4
      000124 75 F0 80         [24]  682 	mov	b,#0x80
      000127 12r00r00         [24]  683 	lcall	_printstr
                                    684 ;	life.c:110: for (x = 0; x < W; x++) {
      00012A 78r03            [12]  685 	mov	r0,#_x
      00012C 06               [12]  686 	inc	@r0
      00012D B6 00 02         [24]  687 	cjne	@r0,#0x00,00170$
      000130 08               [12]  688 	inc	r0
      000131 06               [12]  689 	inc	@r0
      000132                        690 00170$:
      000132 78r03            [12]  691 	mov	r0,#_x
      000134 C3               [12]  692 	clr	c
      000135 E6               [12]  693 	mov	a,@r0
      000136 94 30            [12]  694 	subb	a,#0x30
      000138 08               [12]  695 	inc	r0
      000139 E6               [12]  696 	mov	a,@r0
      00013A 64 80            [12]  697 	xrl	a,#0x80
      00013C 94 80            [12]  698 	subb	a,#0x80
      00013E 50 03            [24]  699 	jnc	00171$
      000140 02r00rBD         [24]  700 	ljmp	00118$
      000143                        701 00171$:
                                    702 ;	life.c:116: printstr("\033[?25h");
      000143 90r00r25         [24]  703 	mov	dptr,#___str_6
      000146 75 F0 80         [24]  704 	mov	b,#0x80
      000149 12r00r00         [24]  705 	lcall	_printstr
      00014C                        706 00115$:
                                    707 ;	life.c:119: return;
                                    708 ;	life.c:120: }
      00014C D0*00            [24]  709 	pop	_bp
      00014E 22               [24]  710 	ret
                                    711 ;------------------------------------------------------------
                                    712 ;Allocation info for local variables in function 'main'
                                    713 ;------------------------------------------------------------
                                    714 ;c                         Allocated to registers r6 r7 
                                    715 ;nbits                     Allocated to registers r4 r5 
                                    716 ;c                         Allocated to stack - _bp +10
                                    717 ;__3932160006              Allocated to registers 
                                    718 ;__4587520011              Allocated to registers 
                                    719 ;sloc0                     Allocated to stack - _bp +1
                                    720 ;sloc1                     Allocated to stack - _bp +2
                                    721 ;sloc2                     Allocated to stack - _bp +4
                                    722 ;sloc3                     Allocated to stack - _bp +6
                                    723 ;sloc4                     Allocated to stack - _bp +8
                                    724 ;------------------------------------------------------------
                                    725 ;	life.c:225: void main(void) {
                                    726 ;	-----------------------------------------
                                    727 ;	 function main
                                    728 ;	-----------------------------------------
      00014F                        729 _main:
      00014F C0*00            [24]  730 	push	_bp
      000151 E5 81            [12]  731 	mov	a,sp
      000153 F5*00            [12]  732 	mov	_bp,a
      000155 24 0B            [12]  733 	add	a,#0x0b
      000157 F5 81            [12]  734 	mov	sp,a
                                    735 ;	life.c:228: IT0 = 1;
                                    736 ;	assignBit
      000159 D2 88            [12]  737 	setb	_IT0
                                    738 ;	life.c:229: IT1 = 1;
                                    739 ;	assignBit
      00015B D2 8A            [12]  740 	setb	_IT1
                                    741 ;	life.c:230: EX0 = 1;
                                    742 ;	assignBit
      00015D D2 A8            [12]  743 	setb	_EX0
                                    744 ;	life.c:231: EX1 = 1;
                                    745 ;	assignBit
      00015F D2 AA            [12]  746 	setb	_EX1
                                    747 ;	life.c:232: EA = 1;
                                    748 ;	assignBit
      000161 D2 AF            [12]  749 	setb	_EA
                                    750 ;	life.c:233: P1_7 = 0;
                                    751 ;	assignBit
      000163 C2 97            [12]  752 	clr	_P1_7
                                    753 ;	life.c:238: __endasm;
      000165 00               [12]  754 	nop
      000166 00               [12]  755 	nop
      000167 00               [12]  756 	nop
                                    757 ;	life.c:240: srand(RND);
      000168 90 E0 00         [24]  758 	mov	dptr,#_RND
      00016B E0               [24]  759 	movx	a,@dptr
      00016C FE               [12]  760 	mov	r6,a
      00016D A3               [24]  761 	inc	dptr
      00016E E0               [24]  762 	movx	a,@dptr
      00016F FF               [12]  763 	mov	r7,a
      000170 8E 82            [24]  764 	mov	dpl,r6
      000172 8F 83            [24]  765 	mov	dph,r7
      000174 12r00r00         [24]  766 	lcall	_srand
                                    767 ;	life.c:242: OE76 = OE76_0;
      000177 78r02            [12]  768 	mov	r0,#_OE76
      000179 76 3F            [12]  769 	mov	@r0,#0x3f
                                    770 ;	life.c:243: flashOE();
      00017B 12r00r18         [24]  771 	lcall	_flashOE
                                    772 ;	life.c:51: gen = 0ul;
      00017E 78r0A            [12]  773 	mov	r0,#_gen
      000180 E4               [12]  774 	clr	a
      000181 F6               [12]  775 	mov	@r0,a
      000182 08               [12]  776 	inc	r0
      000183 F6               [12]  777 	mov	@r0,a
      000184 08               [12]  778 	inc	r0
      000185 F6               [12]  779 	mov	@r0,a
      000186 08               [12]  780 	inc	r0
      000187 F6               [12]  781 	mov	@r0,a
                                    782 ;	life.c:52: genc2 = 0ul;
      000188 78r0E            [12]  783 	mov	r0,#_genc2
      00018A F6               [12]  784 	mov	@r0,a
      00018B 08               [12]  785 	inc	r0
      00018C F6               [12]  786 	mov	@r0,a
      00018D 08               [12]  787 	inc	r0
      00018E F6               [12]  788 	mov	@r0,a
      00018F 08               [12]  789 	inc	r0
      000190 F6               [12]  790 	mov	@r0,a
                                    791 ;	life.c:53: genfx = 0ul;
      000191 78r12            [12]  792 	mov	r0,#_genfx
      000193 F6               [12]  793 	mov	@r0,a
      000194 08               [12]  794 	inc	r0
      000195 F6               [12]  795 	mov	@r0,a
      000196 08               [12]  796 	inc	r0
      000197 F6               [12]  797 	mov	@r0,a
      000198 08               [12]  798 	inc	r0
      000199 F6               [12]  799 	mov	@r0,a
                                    800 ;	life.c:54: c2set = 0;
      00019A 78r16            [12]  801 	mov	r0,#_c2set
      00019C 76 00            [12]  802 	mov	@r0,#0x00
                                    803 ;	life.c:55: fxset = 0;
      00019E 78r17            [12]  804 	mov	r0,#_fxset
      0001A0 76 00            [12]  805 	mov	@r0,#0x00
                                    806 ;	life.c:246: pruni = 0;
      0001A2 78r18            [12]  807 	mov	r0,#_pruni
      0001A4 76 00            [12]  808 	mov	@r0,#0x00
                                    809 ;	life.c:248: printstr("\033[?25h\033[m");
      0001A6 90r00r46         [24]  810 	mov	dptr,#___str_10
      0001A9 75 F0 80         [24]  811 	mov	b,#0x80
      0001AC 12r00r00         [24]  812 	lcall	_printstr
                                    813 ;	life.c:250: for (i0 = 0; !i0; ) {
      0001AF 78r00            [12]  814 	mov	r0,#_i0
      0001B1 76 00            [12]  815 	mov	@r0,#0x00
                                    816 ;	life.c:251: while (1) {
      0001B3                        817 00127$:
                                    818 ;	life.c:252: printstr("LIFE I L R O P S U");
      0001B3 90r00r50         [24]  819 	mov	dptr,#___str_11
      0001B6 75 F0 80         [24]  820 	mov	b,#0x80
      0001B9 12r00r00         [24]  821 	lcall	_printstr
                                    822 ;	life.c:253: putchar(pruni ? (int)'1' : (int)'0');
      0001BC 78r18            [12]  823 	mov	r0,#_pruni
      0001BE E6               [12]  824 	mov	a,@r0
      0001BF 60 06            [24]  825 	jz	00243$
      0001C1 7E 31            [12]  826 	mov	r6,#0x31
      0001C3 7F 00            [12]  827 	mov	r7,#0x00
      0001C5 80 04            [24]  828 	sjmp	00244$
      0001C7                        829 00243$:
      0001C7 7E 30            [12]  830 	mov	r6,#0x30
      0001C9 7F 00            [12]  831 	mov	r7,#0x00
      0001CB                        832 00244$:
      0001CB 8E 82            [24]  833 	mov	dpl,r6
      0001CD 8F 83            [24]  834 	mov	dph,r7
      0001CF 12r00r00         [24]  835 	lcall	_putchar
                                    836 ;	life.c:254: printstr(" B T\r\n");
      0001D2 90r00r63         [24]  837 	mov	dptr,#___str_12
      0001D5 75 F0 80         [24]  838 	mov	b,#0x80
      0001D8 12r00r00         [24]  839 	lcall	_printstr
                                    840 ;	life.c:255: c = toupper(getchar());
      0001DB 12r00r00         [24]  841 	lcall	_getchar
      0001DE 12r00r00         [24]  842 	lcall	_toupper
      0001E1 AE 82            [24]  843 	mov	r6,dpl
      0001E3 AF 83            [24]  844 	mov	r7,dph
                                    845 ;	life.c:256: if (i0 || (c == (int)'T')) goto term;
      0001E5 78r00            [12]  846 	mov	r0,#_i0
      0001E7 E6               [12]  847 	mov	a,@r0
      0001E8 60 03            [24]  848 	jz	00467$
      0001EA 02r09rFC         [24]  849 	ljmp	00154$
      0001ED                        850 00467$:
      0001ED BE 54 06         [24]  851 	cjne	r6,#0x54,00468$
      0001F0 BF 00 03         [24]  852 	cjne	r7,#0x00,00468$
      0001F3 02r09rFC         [24]  853 	ljmp	00154$
      0001F6                        854 00468$:
                                    855 ;	life.c:257: else if ((c == (int)'I') || (c == (int)'L') || (c == (int)'R')) {
      0001F6 BE 49 05         [24]  856 	cjne	r6,#0x49,00469$
      0001F9 BF 00 02         [24]  857 	cjne	r7,#0x00,00469$
      0001FC 80 13            [24]  858 	sjmp	00117$
      0001FE                        859 00469$:
      0001FE BE 4C 05         [24]  860 	cjne	r6,#0x4c,00470$
      000201 BF 00 02         [24]  861 	cjne	r7,#0x00,00470$
      000204 80 0B            [24]  862 	sjmp	00117$
      000206                        863 00470$:
      000206 BE 52 05         [24]  864 	cjne	r6,#0x52,00471$
      000209 BF 00 02         [24]  865 	cjne	r7,#0x00,00471$
      00020C 80 03            [24]  866 	sjmp	00472$
      00020E                        867 00471$:
      00020E 02r04r2E         [24]  868 	ljmp	00118$
      000211                        869 00472$:
      000211                        870 00117$:
                                    871 ;	life.c:258: if (c == (int)'L') loadiu();
      000211 BE 4C 05         [24]  872 	cjne	r6,#0x4c,00473$
      000214 BF 00 02         [24]  873 	cjne	r7,#0x00,00473$
      000217 80 03            [24]  874 	sjmp	00474$
      000219                        875 00473$:
      000219 02r03r3D         [24]  876 	ljmp	00104$
      00021C                        877 00474$:
                                    878 ;	life.c:133: printstr("LOAD 0 1 ~ # <");
      00021C 90r00r2C         [24]  879 	mov	dptr,#___str_7
      00021F 75 F0 80         [24]  880 	mov	b,#0x80
      000222 12r00r00         [24]  881 	lcall	_printstr
                                    882 ;	life.c:135: for (nbits = 0, y = 0; y < (H * W); y += W) {
      000225 7C 00            [12]  883 	mov	r4,#0x00
      000227 7D 00            [12]  884 	mov	r5,#0x00
      000229 78r05            [12]  885 	mov	r0,#_y
      00022B E4               [12]  886 	clr	a
      00022C F6               [12]  887 	mov	@r0,a
      00022D 08               [12]  888 	inc	r0
      00022E F6               [12]  889 	mov	@r0,a
      00022F                        890 00225$:
      00022F 78r05            [12]  891 	mov	r0,#_y
      000231 C3               [12]  892 	clr	c
      000232 08               [12]  893 	inc	r0
      000233 E6               [12]  894 	mov	a,@r0
      000234 64 80            [12]  895 	xrl	a,#0x80
      000236 94 A4            [12]  896 	subb	a,#0xa4
      000238 40 03            [24]  897 	jc	00475$
      00023A 02r02rF8         [24]  898 	ljmp	00181$
      00023D                        899 00475$:
                                    900 ;	life.c:136: for (x = 0; x < W; x++) {
      00023D 78r03            [12]  901 	mov	r0,#_x
      00023F E4               [12]  902 	clr	a
      000240 F6               [12]  903 	mov	@r0,a
      000241 08               [12]  904 	inc	r0
      000242 F6               [12]  905 	mov	@r0,a
                                    906 ;	life.c:137: while (1) {
      000243                        907 00168$:
                                    908 ;	life.c:138: c = getchar();
      000243 C0 05            [24]  909 	push	ar5
      000245 C0 04            [24]  910 	push	ar4
      000247 12r00r00         [24]  911 	lcall	_getchar
      00024A AA 82            [24]  912 	mov	r2,dpl
      00024C AB 83            [24]  913 	mov	r3,dph
      00024E D0 04            [24]  914 	pop	ar4
      000250 D0 05            [24]  915 	pop	ar5
      000252 E5*00            [12]  916 	mov	a,_bp
      000254 24 0A            [12]  917 	add	a,#0x0a
      000256 F8               [12]  918 	mov	r0,a
      000257 A6 02            [24]  919 	mov	@r0,ar2
      000259 08               [12]  920 	inc	r0
      00025A A6 03            [24]  921 	mov	@r0,ar3
                                    922 ;	life.c:139: if (c == (int)'0') {
      00025C E5*00            [12]  923 	mov	a,_bp
      00025E 24 0A            [12]  924 	add	a,#0x0a
      000260 F8               [12]  925 	mov	r0,a
      000261 B6 30 23         [24]  926 	cjne	@r0,#0x30,00166$
      000264 08               [12]  927 	inc	r0
      000265 B6 00 1F         [24]  928 	cjne	@r0,#0x00,00166$
                                    929 ;	life.c:140: iu[y + x] = 0;
      000268 78r05            [12]  930 	mov	r0,#_y
      00026A 79r03            [12]  931 	mov	r1,#_x
      00026C E7               [12]  932 	mov	a,@r1
      00026D 26               [12]  933 	add	a,@r0
      00026E FA               [12]  934 	mov	r2,a
      00026F 09               [12]  935 	inc	r1
      000270 E7               [12]  936 	mov	a,@r1
      000271 08               [12]  937 	inc	r0
      000272 36               [12]  938 	addc	a,@r0
      000273 FB               [12]  939 	mov	r3,a
      000274 EA               [12]  940 	mov	a,r2
      000275 24r00            [12]  941 	add	a,#_iu
      000277 F5 82            [12]  942 	mov	dpl,a
      000279 EB               [12]  943 	mov	a,r3
      00027A 34s00            [12]  944 	addc	a,#(_iu >> 8)
      00027C F5 83            [12]  945 	mov	dph,a
      00027E E4               [12]  946 	clr	a
      00027F F0               [24]  947 	movx	@dptr,a
                                    948 ;	life.c:141: nbits++;
      000280 0C               [12]  949 	inc	r4
                                    950 ;	life.c:142: break;
      000281 BC 00 4E         [24]  951 	cjne	r4,#0x00,00171$
      000284 0D               [12]  952 	inc	r5
      000285 80 4B            [24]  953 	sjmp	00171$
      000287                        954 00166$:
                                    955 ;	life.c:143: } else if (c == (int)'1') {
      000287 E5*00            [12]  956 	mov	a,_bp
      000289 24 0A            [12]  957 	add	a,#0x0a
      00028B F8               [12]  958 	mov	r0,a
      00028C B6 31 24         [24]  959 	cjne	@r0,#0x31,00164$
      00028F 08               [12]  960 	inc	r0
      000290 B6 00 20         [24]  961 	cjne	@r0,#0x00,00164$
                                    962 ;	life.c:144: iu[y + x] = 1;
      000293 78r05            [12]  963 	mov	r0,#_y
      000295 79r03            [12]  964 	mov	r1,#_x
      000297 E7               [12]  965 	mov	a,@r1
      000298 26               [12]  966 	add	a,@r0
      000299 FA               [12]  967 	mov	r2,a
      00029A 09               [12]  968 	inc	r1
      00029B E7               [12]  969 	mov	a,@r1
      00029C 08               [12]  970 	inc	r0
      00029D 36               [12]  971 	addc	a,@r0
      00029E FB               [12]  972 	mov	r3,a
      00029F EA               [12]  973 	mov	a,r2
      0002A0 24r00            [12]  974 	add	a,#_iu
      0002A2 F5 82            [12]  975 	mov	dpl,a
      0002A4 EB               [12]  976 	mov	a,r3
      0002A5 34s00            [12]  977 	addc	a,#(_iu >> 8)
      0002A7 F5 83            [12]  978 	mov	dph,a
      0002A9 74 01            [12]  979 	mov	a,#0x01
      0002AB F0               [24]  980 	movx	@dptr,a
                                    981 ;	life.c:145: nbits++;
      0002AC 0C               [12]  982 	inc	r4
                                    983 ;	life.c:146: break;
      0002AD BC 00 22         [24]  984 	cjne	r4,#0x00,00171$
      0002B0 0D               [12]  985 	inc	r5
      0002B1 80 1F            [24]  986 	sjmp	00171$
      0002B3                        987 00164$:
                                    988 ;	life.c:147: } else if (c == (int)'~') goto br_inner;
      0002B3 E5*00            [12]  989 	mov	a,_bp
      0002B5 24 0A            [12]  990 	add	a,#0x0a
      0002B7 F8               [12]  991 	mov	r0,a
      0002B8 B6 7E 06         [24]  992 	cjne	@r0,#0x7e,00482$
      0002BB 08               [12]  993 	inc	r0
      0002BC B6 00 02         [24]  994 	cjne	@r0,#0x00,00482$
      0002BF 80 2A            [24]  995 	sjmp	00226$
      0002C1                        996 00482$:
                                    997 ;	life.c:148: else if (c == (int)'#') goto out;
      0002C1 E5*00            [12]  998 	mov	a,_bp
      0002C3 24 0A            [12]  999 	add	a,#0x0a
      0002C5 F8               [12] 1000 	mov	r0,a
      0002C6 B6 23 06         [24] 1001 	cjne	@r0,#0x23,00483$
      0002C9 08               [12] 1002 	inc	r0
      0002CA B6 00 02         [24] 1003 	cjne	@r0,#0x00,00483$
      0002CD 80 29            [24] 1004 	sjmp	00181$
      0002CF                       1005 00483$:
      0002CF 02r02r43         [24] 1006 	ljmp	00168$
                                   1007 ;	life.c:152: break;
      0002D2                       1008 00171$:
                                   1009 ;	life.c:136: for (x = 0; x < W; x++) {
      0002D2 78r03            [12] 1010 	mov	r0,#_x
      0002D4 06               [12] 1011 	inc	@r0
      0002D5 B6 00 02         [24] 1012 	cjne	@r0,#0x00,00484$
      0002D8 08               [12] 1013 	inc	r0
      0002D9 06               [12] 1014 	inc	@r0
      0002DA                       1015 00484$:
      0002DA 78r03            [12] 1016 	mov	r0,#_x
      0002DC C3               [12] 1017 	clr	c
      0002DD E6               [12] 1018 	mov	a,@r0
      0002DE 94 30            [12] 1019 	subb	a,#0x30
      0002E0 08               [12] 1020 	inc	r0
      0002E1 E6               [12] 1021 	mov	a,@r0
      0002E2 64 80            [12] 1022 	xrl	a,#0x80
      0002E4 94 80            [12] 1023 	subb	a,#0x80
      0002E6 50 03            [24] 1024 	jnc	00485$
      0002E8 02r02r43         [24] 1025 	ljmp	00168$
      0002EB                       1026 00485$:
      0002EB                       1027 00226$:
                                   1028 ;	life.c:135: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0002EB 78r05            [12] 1029 	mov	r0,#_y
      0002ED 74 30            [12] 1030 	mov	a,#0x30
      0002EF 26               [12] 1031 	add	a,@r0
      0002F0 F6               [12] 1032 	mov	@r0,a
      0002F1 E4               [12] 1033 	clr	a
      0002F2 08               [12] 1034 	inc	r0
      0002F3 36               [12] 1035 	addc	a,@r0
      0002F4 F6               [12] 1036 	mov	@r0,a
      0002F5 02r02r2F         [24] 1037 	ljmp	00225$
                                   1038 ;	life.c:156: out:
      0002F8                       1039 00181$:
                                   1040 ;	life.c:157: if (c != (int)'#')
      0002F8 E5*00            [12] 1041 	mov	a,_bp
      0002FA 24 0A            [12] 1042 	add	a,#0x0a
      0002FC F8               [12] 1043 	mov	r0,a
      0002FD B6 23 06         [24] 1044 	cjne	@r0,#0x23,00486$
      000300 08               [12] 1045 	inc	r0
      000301 B6 00 02         [24] 1046 	cjne	@r0,#0x00,00486$
      000304 80 25            [24] 1047 	sjmp	00180$
      000306                       1048 00486$:
                                   1049 ;	life.c:158: while (1) {
      000306                       1050 00177$:
                                   1051 ;	life.c:159: c = getchar();
      000306 C0 05            [24] 1052 	push	ar5
      000308 C0 04            [24] 1053 	push	ar4
      00030A 12r00r00         [24] 1054 	lcall	_getchar
      00030D AA 82            [24] 1055 	mov	r2,dpl
      00030F AB 83            [24] 1056 	mov	r3,dph
      000311 D0 04            [24] 1057 	pop	ar4
      000313 D0 05            [24] 1058 	pop	ar5
      000315 E5*00            [12] 1059 	mov	a,_bp
      000317 24 0A            [12] 1060 	add	a,#0x0a
      000319 F8               [12] 1061 	mov	r0,a
      00031A A6 02            [24] 1062 	mov	@r0,ar2
      00031C 08               [12] 1063 	inc	r0
      00031D A6 03            [24] 1064 	mov	@r0,ar3
                                   1065 ;	life.c:160: if (c == (int)'#') break;
      00031F E5*00            [12] 1066 	mov	a,_bp
      000321 24 0A            [12] 1067 	add	a,#0x0a
      000323 F8               [12] 1068 	mov	r0,a
      000324 B6 23 DF         [24] 1069 	cjne	@r0,#0x23,00177$
      000327 08               [12] 1070 	inc	r0
      000328 B6 00 DB         [24] 1071 	cjne	@r0,#0x00,00177$
      00032B                       1072 00180$:
                                   1073 ;	life.c:162: print16x(nbits);
      00032B 8C 82            [24] 1074 	mov	dpl,r4
      00032D 8D 83            [24] 1075 	mov	dph,r5
      00032F 12r00r00         [24] 1076 	lcall	_print16x
                                   1077 ;	life.c:163: printstr(">\r\n");
      000332 90r00r3B         [24] 1078 	mov	dptr,#___str_8
      000335 75 F0 80         [24] 1079 	mov	b,#0x80
      000338 12r00r00         [24] 1080 	lcall	_printstr
                                   1081 ;	life.c:258: if (c == (int)'L') loadiu();
      00033B 80 79            [24] 1082 	sjmp	00105$
      00033D                       1083 00104$:
                                   1084 ;	life.c:259: else if (c == (int)'R') loadriu();
      00033D BE 52 76         [24] 1085 	cjne	r6,#0x52,00105$
      000340 BF 00 73         [24] 1086 	cjne	r7,#0x00,00105$
                                   1087 ;	life.c:169: printstr("RANDOM");
      000343 90r00r3F         [24] 1088 	mov	dptr,#___str_9
      000346 75 F0 80         [24] 1089 	mov	b,#0x80
      000349 12r00r00         [24] 1090 	lcall	_printstr
                                   1091 ;	life.c:171: for (y = 0; y < (H * W); y += W)
      00034C 78r05            [12] 1092 	mov	r0,#_y
      00034E E4               [12] 1093 	clr	a
      00034F F6               [12] 1094 	mov	@r0,a
      000350 08               [12] 1095 	inc	r0
      000351 F6               [12] 1096 	mov	@r0,a
      000352                       1097 00229$:
                                   1098 ;	life.c:172: for (x = 0; x < W; x++)
      000352 78r03            [12] 1099 	mov	r0,#_x
      000354 E4               [12] 1100 	clr	a
      000355 F6               [12] 1101 	mov	@r0,a
      000356 08               [12] 1102 	inc	r0
      000357 F6               [12] 1103 	mov	@r0,a
      000358                       1104 00227$:
                                   1105 ;	life.c:173: iu[y + x] = rand() & 1;
      000358 78r05            [12] 1106 	mov	r0,#_y
      00035A 79r03            [12] 1107 	mov	r1,#_x
      00035C E7               [12] 1108 	mov	a,@r1
      00035D 26               [12] 1109 	add	a,@r0
      00035E FC               [12] 1110 	mov	r4,a
      00035F 09               [12] 1111 	inc	r1
      000360 E7               [12] 1112 	mov	a,@r1
      000361 08               [12] 1113 	inc	r0
      000362 36               [12] 1114 	addc	a,@r0
      000363 FD               [12] 1115 	mov	r5,a
      000364 EC               [12] 1116 	mov	a,r4
      000365 24r00            [12] 1117 	add	a,#_iu
      000367 FC               [12] 1118 	mov	r4,a
      000368 ED               [12] 1119 	mov	a,r5
      000369 34s00            [12] 1120 	addc	a,#(_iu >> 8)
      00036B FD               [12] 1121 	mov	r5,a
      00036C C0 05            [24] 1122 	push	ar5
      00036E C0 04            [24] 1123 	push	ar4
      000370 12r00r00         [24] 1124 	lcall	_rand
      000373 AA 82            [24] 1125 	mov	r2,dpl
      000375 D0 04            [24] 1126 	pop	ar4
      000377 D0 05            [24] 1127 	pop	ar5
      000379 53 02 01         [24] 1128 	anl	ar2,#0x01
      00037C 8C 82            [24] 1129 	mov	dpl,r4
      00037E 8D 83            [24] 1130 	mov	dph,r5
      000380 EA               [12] 1131 	mov	a,r2
      000381 F0               [24] 1132 	movx	@dptr,a
                                   1133 ;	life.c:172: for (x = 0; x < W; x++)
      000382 78r03            [12] 1134 	mov	r0,#_x
      000384 06               [12] 1135 	inc	@r0
      000385 B6 00 02         [24] 1136 	cjne	@r0,#0x00,00491$
      000388 08               [12] 1137 	inc	r0
      000389 06               [12] 1138 	inc	@r0
      00038A                       1139 00491$:
      00038A 78r03            [12] 1140 	mov	r0,#_x
      00038C C3               [12] 1141 	clr	c
      00038D E6               [12] 1142 	mov	a,@r0
      00038E 94 30            [12] 1143 	subb	a,#0x30
      000390 08               [12] 1144 	inc	r0
      000391 E6               [12] 1145 	mov	a,@r0
      000392 64 80            [12] 1146 	xrl	a,#0x80
      000394 94 80            [12] 1147 	subb	a,#0x80
      000396 40 C0            [24] 1148 	jc	00227$
                                   1149 ;	life.c:171: for (y = 0; y < (H * W); y += W)
      000398 78r05            [12] 1150 	mov	r0,#_y
      00039A 74 30            [12] 1151 	mov	a,#0x30
      00039C 26               [12] 1152 	add	a,@r0
      00039D F6               [12] 1153 	mov	@r0,a
      00039E E4               [12] 1154 	clr	a
      00039F 08               [12] 1155 	inc	r0
      0003A0 36               [12] 1156 	addc	a,@r0
      0003A1 F6               [12] 1157 	mov	@r0,a
      0003A2 78r05            [12] 1158 	mov	r0,#_y
      0003A4 C3               [12] 1159 	clr	c
      0003A5 08               [12] 1160 	inc	r0
      0003A6 E6               [12] 1161 	mov	a,@r0
      0003A7 64 80            [12] 1162 	xrl	a,#0x80
      0003A9 94 A4            [12] 1163 	subb	a,#0xa4
      0003AB 40 A5            [24] 1164 	jc	00229$
                                   1165 ;	life.c:175: printstr("\r\n");
      0003AD 90r00r1B         [24] 1166 	mov	dptr,#___str_4
      0003B0 75 F0 80         [24] 1167 	mov	b,#0x80
      0003B3 12r00r00         [24] 1168 	lcall	_printstr
                                   1169 ;	life.c:259: else if (c == (int)'R') loadriu();
      0003B6                       1170 00105$:
                                   1171 ;	life.c:123: memcpy(u, iu, sizeof (iu));
      0003B6 E4               [12] 1172 	clr	a
      0003B7 C0 E0            [24] 1173 	push	acc
      0003B9 74 24            [12] 1174 	mov	a,#0x24
      0003BB C0 E0            [24] 1175 	push	acc
      0003BD 74r00            [12] 1176 	mov	a,#_iu
      0003BF C0 E0            [24] 1177 	push	acc
      0003C1 74s00            [12] 1178 	mov	a,#(_iu >> 8)
      0003C3 C0 E0            [24] 1179 	push	acc
      0003C5 E4               [12] 1180 	clr	a
      0003C6 C0 E0            [24] 1181 	push	acc
      0003C8 90r48r00         [24] 1182 	mov	dptr,#_u
      0003CB 75 F0 00         [24] 1183 	mov	b,#0x00
      0003CE 12r00r00         [24] 1184 	lcall	___memcpy
      0003D1 E5 81            [12] 1185 	mov	a,sp
      0003D3 24 FB            [12] 1186 	add	a,#0xfb
      0003D5 F5 81            [12] 1187 	mov	sp,a
                                   1188 ;	life.c:124: memset(pu, 0, sizeof (pu));
      0003D7 E4               [12] 1189 	clr	a
      0003D8 C0 E0            [24] 1190 	push	acc
      0003DA 74 24            [12] 1191 	mov	a,#0x24
      0003DC C0 E0            [24] 1192 	push	acc
      0003DE E4               [12] 1193 	clr	a
      0003DF C0 E0            [24] 1194 	push	acc
      0003E1 90r24r00         [24] 1195 	mov	dptr,#_pu
      0003E4 75 F0 00         [24] 1196 	mov	b,#0x00
      0003E7 12r00r00         [24] 1197 	lcall	_memset
      0003EA 15 81            [12] 1198 	dec	sp
      0003EC 15 81            [12] 1199 	dec	sp
      0003EE 15 81            [12] 1200 	dec	sp
                                   1201 ;	life.c:51: gen = 0ul;
      0003F0 78r0A            [12] 1202 	mov	r0,#_gen
      0003F2 E4               [12] 1203 	clr	a
      0003F3 F6               [12] 1204 	mov	@r0,a
      0003F4 08               [12] 1205 	inc	r0
      0003F5 F6               [12] 1206 	mov	@r0,a
      0003F6 08               [12] 1207 	inc	r0
      0003F7 F6               [12] 1208 	mov	@r0,a
      0003F8 08               [12] 1209 	inc	r0
      0003F9 F6               [12] 1210 	mov	@r0,a
                                   1211 ;	life.c:52: genc2 = 0ul;
      0003FA 78r0E            [12] 1212 	mov	r0,#_genc2
      0003FC F6               [12] 1213 	mov	@r0,a
      0003FD 08               [12] 1214 	inc	r0
      0003FE F6               [12] 1215 	mov	@r0,a
      0003FF 08               [12] 1216 	inc	r0
      000400 F6               [12] 1217 	mov	@r0,a
      000401 08               [12] 1218 	inc	r0
      000402 F6               [12] 1219 	mov	@r0,a
                                   1220 ;	life.c:53: genfx = 0ul;
      000403 78r12            [12] 1221 	mov	r0,#_genfx
      000405 F6               [12] 1222 	mov	@r0,a
      000406 08               [12] 1223 	inc	r0
      000407 F6               [12] 1224 	mov	@r0,a
      000408 08               [12] 1225 	inc	r0
      000409 F6               [12] 1226 	mov	@r0,a
      00040A 08               [12] 1227 	inc	r0
      00040B F6               [12] 1228 	mov	@r0,a
                                   1229 ;	life.c:54: c2set = 0;
      00040C 78r16            [12] 1230 	mov	r0,#_c2set
      00040E 76 00            [12] 1231 	mov	@r0,#0x00
                                   1232 ;	life.c:55: fxset = 0;
      000410 78r17            [12] 1233 	mov	r0,#_fxset
      000412 76 00            [12] 1234 	mov	@r0,#0x00
                                   1235 ;	life.c:261: showu(PRUNI, u);
      000414 74r00            [12] 1236 	mov	a,#_u
      000416 C0 E0            [24] 1237 	push	acc
      000418 74s48            [12] 1238 	mov	a,#(_u >> 8)
      00041A C0 E0            [24] 1239 	push	acc
      00041C E4               [12] 1240 	clr	a
      00041D C0 E0            [24] 1241 	push	acc
      00041F 75 82 04         [24] 1242 	mov	dpl,#0x04
      000422 12r00r20         [24] 1243 	lcall	_showu
      000425 15 81            [12] 1244 	dec	sp
      000427 15 81            [12] 1245 	dec	sp
      000429 15 81            [12] 1246 	dec	sp
      00042B 02r01rB3         [24] 1247 	ljmp	00127$
      00042E                       1248 00118$:
                                   1249 ;	life.c:262: } else if (c == (int)'O') showu(PRUNI, iu);
      00042E BE 4F 1D         [24] 1250 	cjne	r6,#0x4f,00115$
      000431 BF 00 1A         [24] 1251 	cjne	r7,#0x00,00115$
      000434 74r00            [12] 1252 	mov	a,#_iu
      000436 C0 E0            [24] 1253 	push	acc
      000438 74s00            [12] 1254 	mov	a,#(_iu >> 8)
      00043A C0 E0            [24] 1255 	push	acc
      00043C E4               [12] 1256 	clr	a
      00043D C0 E0            [24] 1257 	push	acc
      00043F 75 82 04         [24] 1258 	mov	dpl,#0x04
      000442 12r00r20         [24] 1259 	lcall	_showu
      000445 15 81            [12] 1260 	dec	sp
      000447 15 81            [12] 1261 	dec	sp
      000449 15 81            [12] 1262 	dec	sp
      00044B 02r01rB3         [24] 1263 	ljmp	00127$
      00044E                       1264 00115$:
                                   1265 ;	life.c:263: else if (c == (int)'P') showu(PRHDR | PRUNI, u);
      00044E BE 50 1D         [24] 1266 	cjne	r6,#0x50,00112$
      000451 BF 00 1A         [24] 1267 	cjne	r7,#0x00,00112$
      000454 74r00            [12] 1268 	mov	a,#_u
      000456 C0 E0            [24] 1269 	push	acc
      000458 74s48            [12] 1270 	mov	a,#(_u >> 8)
      00045A C0 E0            [24] 1271 	push	acc
      00045C E4               [12] 1272 	clr	a
      00045D C0 E0            [24] 1273 	push	acc
      00045F 75 82 06         [24] 1274 	mov	dpl,#0x06
      000462 12r00r20         [24] 1275 	lcall	_showu
      000465 15 81            [12] 1276 	dec	sp
      000467 15 81            [12] 1277 	dec	sp
      000469 15 81            [12] 1278 	dec	sp
      00046B 02r01rB3         [24] 1279 	ljmp	00127$
      00046E                       1280 00112$:
                                   1281 ;	life.c:264: else if (c == (int)'U') pruni = !pruni;
      00046E BE 55 13         [24] 1282 	cjne	r6,#0x55,00109$
      000471 BF 00 10         [24] 1283 	cjne	r7,#0x00,00109$
      000474 78r18            [12] 1284 	mov	r0,#_pruni
      000476 E6               [12] 1285 	mov	a,@r0
      000477 B4 01 00         [24] 1286 	cjne	a,#0x01,00500$
      00047A                       1287 00500$:
      00047A 92*00            [24] 1288 	mov	b0,c
      00047C 78r18            [12] 1289 	mov	r0,#_pruni
      00047E E4               [12] 1290 	clr	a
      00047F 33               [12] 1291 	rlc	a
      000480 F6               [12] 1292 	mov	@r0,a
      000481 02r01rB3         [24] 1293 	ljmp	00127$
      000484                       1294 00109$:
                                   1295 ;	life.c:265: else if (c == (int)'S') break;
      000484 BE 53 05         [24] 1296 	cjne	r6,#0x53,00501$
      000487 BF 00 02         [24] 1297 	cjne	r7,#0x00,00501$
      00048A 80 03            [24] 1298 	sjmp	00502$
      00048C                       1299 00501$:
      00048C 02r01rB3         [24] 1300 	ljmp	00127$
      00048F                       1301 00502$:
                                   1302 ;	life.c:268: for (i1 = 0; !i0 && !i1; ) {
      00048F 78r01            [12] 1303 	mov	r0,#_i1
      000491 76 00            [12] 1304 	mov	@r0,#0x00
      000493                       1305 00237$:
      000493 78r00            [12] 1306 	mov	r0,#_i0
      000495 E6               [12] 1307 	mov	a,@r0
      000496 60 03            [24] 1308 	jz	00503$
      000498 02r09rCF         [24] 1309 	ljmp	00150$
      00049B                       1310 00503$:
      00049B 78r01            [12] 1311 	mov	r0,#_i1
      00049D E6               [12] 1312 	mov	a,@r0
      00049E 60 03            [24] 1313 	jz	00504$
      0004A0 02r09rCF         [24] 1314 	ljmp	00150$
      0004A3                       1315 00504$:
                                   1316 ;	life.c:269: if (fxu()) {
      0004A3 78r17            [12] 1317 	mov	r0,#_fxset
      0004A5 E6               [12] 1318 	mov	a,@r0
      0004A6 60 23            [24] 1319 	jz	00130$
                                   1320 ;	life.c:270: printstr("FIXED AT ");
      0004A8 90r00r6A         [24] 1321 	mov	dptr,#___str_13
      0004AB 75 F0 80         [24] 1322 	mov	b,#0x80
      0004AE 12r00r00         [24] 1323 	lcall	_printstr
                                   1324 ;	life.c:271: showu(PRHDR, u);
      0004B1 74r00            [12] 1325 	mov	a,#_u
      0004B3 C0 E0            [24] 1326 	push	acc
      0004B5 74s48            [12] 1327 	mov	a,#(_u >> 8)
      0004B7 C0 E0            [24] 1328 	push	acc
      0004B9 E4               [12] 1329 	clr	a
      0004BA C0 E0            [24] 1330 	push	acc
      0004BC 75 82 02         [24] 1331 	mov	dpl,#0x02
      0004BF 12r00r20         [24] 1332 	lcall	_showu
      0004C2 15 81            [12] 1333 	dec	sp
      0004C4 15 81            [12] 1334 	dec	sp
      0004C6 15 81            [12] 1335 	dec	sp
                                   1336 ;	life.c:272: break;
      0004C8 02r09rCF         [24] 1337 	ljmp	00150$
      0004CB                       1338 00130$:
                                   1339 ;	life.c:274: if (pruni) showu(PRCLR | PRHDR | PRUNI, u);
      0004CB 78r18            [12] 1340 	mov	r0,#_pruni
      0004CD E6               [12] 1341 	mov	a,@r0
      0004CE 60 19            [24] 1342 	jz	00132$
      0004D0 74r00            [12] 1343 	mov	a,#_u
      0004D2 C0 E0            [24] 1344 	push	acc
      0004D4 74s48            [12] 1345 	mov	a,#(_u >> 8)
      0004D6 C0 E0            [24] 1346 	push	acc
      0004D8 E4               [12] 1347 	clr	a
      0004D9 C0 E0            [24] 1348 	push	acc
      0004DB 75 82 07         [24] 1349 	mov	dpl,#0x07
      0004DE 12r00r20         [24] 1350 	lcall	_showu
      0004E1 15 81            [12] 1351 	dec	sp
      0004E3 15 81            [12] 1352 	dec	sp
      0004E5 15 81            [12] 1353 	dec	sp
      0004E7 80 17            [24] 1354 	sjmp	00133$
      0004E9                       1355 00132$:
                                   1356 ;	life.c:275: else showu(PRHDR, u);
      0004E9 74r00            [12] 1357 	mov	a,#_u
      0004EB C0 E0            [24] 1358 	push	acc
      0004ED 74s48            [12] 1359 	mov	a,#(_u >> 8)
      0004EF C0 E0            [24] 1360 	push	acc
      0004F1 E4               [12] 1361 	clr	a
      0004F2 C0 E0            [24] 1362 	push	acc
      0004F4 75 82 02         [24] 1363 	mov	dpl,#0x02
      0004F7 12r00r20         [24] 1364 	lcall	_showu
      0004FA 15 81            [12] 1365 	dec	sp
      0004FC 15 81            [12] 1366 	dec	sp
      0004FE 15 81            [12] 1367 	dec	sp
      000500                       1368 00133$:
                                   1369 ;	life.c:61: gen++;
      000500 78r0A            [12] 1370 	mov	r0,#_gen
      000502 06               [12] 1371 	inc	@r0
      000503 B6 00 0C         [24] 1372 	cjne	@r0,#0x00,00507$
      000506 08               [12] 1373 	inc	r0
      000507 06               [12] 1374 	inc	@r0
      000508 B6 00 07         [24] 1375 	cjne	@r0,#0x00,00507$
      00050B 08               [12] 1376 	inc	r0
      00050C 06               [12] 1377 	inc	@r0
      00050D B6 00 02         [24] 1378 	cjne	@r0,#0x00,00507$
      000510 08               [12] 1379 	inc	r0
      000511 06               [12] 1380 	inc	@r0
      000512                       1381 00507$:
                                   1382 ;	life.c:181: fixed = 0;
      000512 78r08            [12] 1383 	mov	r0,#_fixed
      000514 76 00            [12] 1384 	mov	@r0,#0x00
                                   1385 ;	life.c:182: cycle2 = 0;
      000516 78r09            [12] 1386 	mov	r0,#_cycle2
      000518 76 00            [12] 1387 	mov	@r0,#0x00
                                   1388 ;	life.c:184: OE76 = OE76_0;
      00051A 78r02            [12] 1389 	mov	r0,#_OE76
      00051C 76 3F            [12] 1390 	mov	@r0,#0x3f
                                   1391 ;	life.c:185: flashOE();
      00051E 12r00r18         [24] 1392 	lcall	_flashOE
                                   1393 ;	life.c:187: for (y = 0; y < H; y++) {
      000521 78r05            [12] 1394 	mov	r0,#_y
      000523 E4               [12] 1395 	clr	a
      000524 F6               [12] 1396 	mov	@r0,a
      000525 08               [12] 1397 	inc	r0
      000526 F6               [12] 1398 	mov	@r0,a
      000527                       1399 00233$:
                                   1400 ;	life.c:188: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000527 78r05            [12] 1401 	mov	r0,#_y
      000529 86 07            [24] 1402 	mov	ar7,@r0
      00052B 53 07 03         [24] 1403 	anl	ar7,#0x03
      00052E EF               [12] 1404 	mov	a,r7
      00052F 03               [12] 1405 	rr	a
      000530 03               [12] 1406 	rr	a
      000531 54 C0            [12] 1407 	anl	a,#0xc0
      000533 FF               [12] 1408 	mov	r7,a
      000534 78r02            [12] 1409 	mov	r0,#_OE76
      000536 74 3F            [12] 1410 	mov	a,#0x3f
      000538 4F               [12] 1411 	orl	a,r7
      000539 F6               [12] 1412 	mov	@r0,a
                                   1413 ;	life.c:189: flashOE();
      00053A 12r00r18         [24] 1414 	lcall	_flashOE
                                   1415 ;	life.c:190: for (x = 0; x < W; x++) {
      00053D 78r03            [12] 1416 	mov	r0,#_x
      00053F E4               [12] 1417 	clr	a
      000540 F6               [12] 1418 	mov	@r0,a
      000541 08               [12] 1419 	inc	r0
      000542 F6               [12] 1420 	mov	@r0,a
      000543                       1421 00231$:
                                   1422 ;	life.c:191: n = -u[A2D(W, y, x)];
      000543 78r05            [12] 1423 	mov	r0,#_y
      000545 E6               [12] 1424 	mov	a,@r0
      000546 C0 E0            [24] 1425 	push	acc
      000548 08               [12] 1426 	inc	r0
      000549 E6               [12] 1427 	mov	a,@r0
      00054A C0 E0            [24] 1428 	push	acc
      00054C 90 00 30         [24] 1429 	mov	dptr,#0x0030
      00054F 12r00r00         [24] 1430 	lcall	__mulint
      000552 C8               [12] 1431 	xch	a,r0
      000553 E5*00            [12] 1432 	mov	a,_bp
      000555 24 04            [12] 1433 	add	a,#0x04
      000557 C8               [12] 1434 	xch	a,r0
      000558 A6 82            [24] 1435 	mov	@r0,dpl
      00055A 08               [12] 1436 	inc	r0
      00055B A6 83            [24] 1437 	mov	@r0,dph
      00055D 15 81            [12] 1438 	dec	sp
      00055F 15 81            [12] 1439 	dec	sp
      000561 E5*00            [12] 1440 	mov	a,_bp
      000563 24 04            [12] 1441 	add	a,#0x04
      000565 F8               [12] 1442 	mov	r0,a
      000566 79r03            [12] 1443 	mov	r1,#_x
      000568 E7               [12] 1444 	mov	a,@r1
      000569 26               [12] 1445 	add	a,@r0
      00056A C0 E0            [24] 1446 	push	acc
      00056C 09               [12] 1447 	inc	r1
      00056D E7               [12] 1448 	mov	a,@r1
      00056E 08               [12] 1449 	inc	r0
      00056F 36               [12] 1450 	addc	a,@r0
      000570 C0 E0            [24] 1451 	push	acc
      000572 E5*00            [12] 1452 	mov	a,_bp
      000574 24 03            [12] 1453 	add	a,#0x03
      000576 F8               [12] 1454 	mov	r0,a
      000577 D0 E0            [24] 1455 	pop	acc
      000579 F6               [12] 1456 	mov	@r0,a
      00057A 18               [12] 1457 	dec	r0
      00057B D0 E0            [24] 1458 	pop	acc
      00057D F6               [12] 1459 	mov	@r0,a
      00057E A8*00            [24] 1460 	mov	r0,_bp
      000580 08               [12] 1461 	inc	r0
      000581 08               [12] 1462 	inc	r0
      000582 E6               [12] 1463 	mov	a,@r0
      000583 24r00            [12] 1464 	add	a,#_u
      000585 F5 82            [12] 1465 	mov	dpl,a
      000587 08               [12] 1466 	inc	r0
      000588 E6               [12] 1467 	mov	a,@r0
      000589 34s48            [12] 1468 	addc	a,#(_u >> 8)
      00058B F5 83            [12] 1469 	mov	dph,a
      00058D E0               [24] 1470 	movx	a,@dptr
      00058E FB               [12] 1471 	mov	r3,a
      00058F A8*00            [24] 1472 	mov	r0,_bp
      000591 08               [12] 1473 	inc	r0
      000592 C3               [12] 1474 	clr	c
      000593 E4               [12] 1475 	clr	a
      000594 9B               [12] 1476 	subb	a,r3
      000595 F6               [12] 1477 	mov	@r0,a
                                   1478 ;	life.c:196: UPDN(-1, -1);
      000596 78r05            [12] 1479 	mov	r0,#_y
      000598 74 BF            [12] 1480 	mov	a,#0xbf
      00059A 26               [12] 1481 	add	a,@r0
      00059B FA               [12] 1482 	mov	r2,a
      00059C E4               [12] 1483 	clr	a
      00059D 08               [12] 1484 	inc	r0
      00059E 36               [12] 1485 	addc	a,@r0
      00059F FB               [12] 1486 	mov	r3,a
      0005A0 74 C0            [12] 1487 	mov	a,#0xc0
      0005A2 C0 E0            [24] 1488 	push	acc
      0005A4 E4               [12] 1489 	clr	a
      0005A5 C0 E0            [24] 1490 	push	acc
      0005A7 8A 82            [24] 1491 	mov	dpl,r2
      0005A9 8B 83            [24] 1492 	mov	dph,r3
      0005AB 12r00r00         [24] 1493 	lcall	__modsint
      0005AE AA 82            [24] 1494 	mov	r2,dpl
      0005B0 AB 83            [24] 1495 	mov	r3,dph
      0005B2 15 81            [12] 1496 	dec	sp
      0005B4 15 81            [12] 1497 	dec	sp
      0005B6 C0 02            [24] 1498 	push	ar2
      0005B8 C0 03            [24] 1499 	push	ar3
      0005BA 90 00 30         [24] 1500 	mov	dptr,#0x0030
      0005BD 12r00r00         [24] 1501 	lcall	__mulint
      0005C0 AA 82            [24] 1502 	mov	r2,dpl
      0005C2 AB 83            [24] 1503 	mov	r3,dph
      0005C4 15 81            [12] 1504 	dec	sp
      0005C6 15 81            [12] 1505 	dec	sp
      0005C8 78r03            [12] 1506 	mov	r0,#_x
      0005CA 74 2F            [12] 1507 	mov	a,#0x2f
      0005CC 26               [12] 1508 	add	a,@r0
      0005CD FC               [12] 1509 	mov	r4,a
      0005CE E4               [12] 1510 	clr	a
      0005CF 08               [12] 1511 	inc	r0
      0005D0 36               [12] 1512 	addc	a,@r0
      0005D1 FD               [12] 1513 	mov	r5,a
      0005D2 C0 03            [24] 1514 	push	ar3
      0005D4 C0 02            [24] 1515 	push	ar2
      0005D6 74 30            [12] 1516 	mov	a,#0x30
      0005D8 C0 E0            [24] 1517 	push	acc
      0005DA E4               [12] 1518 	clr	a
      0005DB C0 E0            [24] 1519 	push	acc
      0005DD 8C 82            [24] 1520 	mov	dpl,r4
      0005DF 8D 83            [24] 1521 	mov	dph,r5
      0005E1 12r00r00         [24] 1522 	lcall	__modsint
      0005E4 AC 82            [24] 1523 	mov	r4,dpl
      0005E6 AD 83            [24] 1524 	mov	r5,dph
      0005E8 15 81            [12] 1525 	dec	sp
      0005EA 15 81            [12] 1526 	dec	sp
      0005EC D0 02            [24] 1527 	pop	ar2
      0005EE D0 03            [24] 1528 	pop	ar3
      0005F0 EC               [12] 1529 	mov	a,r4
      0005F1 2A               [12] 1530 	add	a,r2
      0005F2 FE               [12] 1531 	mov	r6,a
      0005F3 ED               [12] 1532 	mov	a,r5
      0005F4 3B               [12] 1533 	addc	a,r3
      0005F5 FF               [12] 1534 	mov	r7,a
      0005F6 EE               [12] 1535 	mov	a,r6
      0005F7 24r00            [12] 1536 	add	a,#_u
      0005F9 F5 82            [12] 1537 	mov	dpl,a
      0005FB EF               [12] 1538 	mov	a,r7
      0005FC 34s48            [12] 1539 	addc	a,#(_u >> 8)
      0005FE F5 83            [12] 1540 	mov	dph,a
      000600 E0               [24] 1541 	movx	a,@dptr
      000601 FF               [12] 1542 	mov	r7,a
      000602 A8*00            [24] 1543 	mov	r0,_bp
      000604 08               [12] 1544 	inc	r0
      000605 EF               [12] 1545 	mov	a,r7
      000606 26               [12] 1546 	add	a,@r0
      000607 F6               [12] 1547 	mov	@r0,a
                                   1548 ;	life.c:197: UPDN(-1, 0);
      000608 78r03            [12] 1549 	mov	r0,#_x
      00060A 74 30            [12] 1550 	mov	a,#0x30
      00060C 26               [12] 1551 	add	a,@r0
      00060D FE               [12] 1552 	mov	r6,a
      00060E E4               [12] 1553 	clr	a
      00060F 08               [12] 1554 	inc	r0
      000610 36               [12] 1555 	addc	a,@r0
      000611 FF               [12] 1556 	mov	r7,a
      000612 C0 05            [24] 1557 	push	ar5
      000614 C0 04            [24] 1558 	push	ar4
      000616 C0 03            [24] 1559 	push	ar3
      000618 C0 02            [24] 1560 	push	ar2
      00061A 74 30            [12] 1561 	mov	a,#0x30
      00061C C0 E0            [24] 1562 	push	acc
      00061E E4               [12] 1563 	clr	a
      00061F C0 E0            [24] 1564 	push	acc
      000621 8E 82            [24] 1565 	mov	dpl,r6
      000623 8F 83            [24] 1566 	mov	dph,r7
      000625 12r00r00         [24] 1567 	lcall	__modsint
      000628 C8               [12] 1568 	xch	a,r0
      000629 E5*00            [12] 1569 	mov	a,_bp
      00062B 24 06            [12] 1570 	add	a,#0x06
      00062D C8               [12] 1571 	xch	a,r0
      00062E A6 82            [24] 1572 	mov	@r0,dpl
      000630 08               [12] 1573 	inc	r0
      000631 A6 83            [24] 1574 	mov	@r0,dph
      000633 15 81            [12] 1575 	dec	sp
      000635 15 81            [12] 1576 	dec	sp
      000637 D0 02            [24] 1577 	pop	ar2
      000639 D0 03            [24] 1578 	pop	ar3
      00063B E5*00            [12] 1579 	mov	a,_bp
      00063D 24 06            [12] 1580 	add	a,#0x06
      00063F F8               [12] 1581 	mov	r0,a
      000640 E6               [12] 1582 	mov	a,@r0
      000641 2A               [12] 1583 	add	a,r2
      000642 FE               [12] 1584 	mov	r6,a
      000643 08               [12] 1585 	inc	r0
      000644 E6               [12] 1586 	mov	a,@r0
      000645 3B               [12] 1587 	addc	a,r3
      000646 FF               [12] 1588 	mov	r7,a
      000647 EE               [12] 1589 	mov	a,r6
      000648 24r00            [12] 1590 	add	a,#_u
      00064A F5 82            [12] 1591 	mov	dpl,a
      00064C EF               [12] 1592 	mov	a,r7
      00064D 34s48            [12] 1593 	addc	a,#(_u >> 8)
      00064F F5 83            [12] 1594 	mov	dph,a
      000651 E0               [24] 1595 	movx	a,@dptr
      000652 FF               [12] 1596 	mov	r7,a
      000653 A8*00            [24] 1597 	mov	r0,_bp
      000655 08               [12] 1598 	inc	r0
      000656 EF               [12] 1599 	mov	a,r7
      000657 26               [12] 1600 	add	a,@r0
      000658 F6               [12] 1601 	mov	@r0,a
                                   1602 ;	life.c:198: UPDN(-1, 1);
      000659 78r03            [12] 1603 	mov	r0,#_x
      00065B 74 31            [12] 1604 	mov	a,#0x31
      00065D 26               [12] 1605 	add	a,@r0
      00065E FE               [12] 1606 	mov	r6,a
      00065F E4               [12] 1607 	clr	a
      000660 08               [12] 1608 	inc	r0
      000661 36               [12] 1609 	addc	a,@r0
      000662 FF               [12] 1610 	mov	r7,a
      000663 C0 03            [24] 1611 	push	ar3
      000665 C0 02            [24] 1612 	push	ar2
      000667 74 30            [12] 1613 	mov	a,#0x30
      000669 C0 E0            [24] 1614 	push	acc
      00066B E4               [12] 1615 	clr	a
      00066C C0 E0            [24] 1616 	push	acc
      00066E 8E 82            [24] 1617 	mov	dpl,r6
      000670 8F 83            [24] 1618 	mov	dph,r7
      000672 12r00r00         [24] 1619 	lcall	__modsint
      000675 AE 82            [24] 1620 	mov	r6,dpl
      000677 AF 83            [24] 1621 	mov	r7,dph
      000679 15 81            [12] 1622 	dec	sp
      00067B 15 81            [12] 1623 	dec	sp
      00067D D0 02            [24] 1624 	pop	ar2
      00067F D0 03            [24] 1625 	pop	ar3
      000681 D0 04            [24] 1626 	pop	ar4
      000683 D0 05            [24] 1627 	pop	ar5
      000685 EE               [12] 1628 	mov	a,r6
      000686 2A               [12] 1629 	add	a,r2
      000687 FA               [12] 1630 	mov	r2,a
      000688 EF               [12] 1631 	mov	a,r7
      000689 3B               [12] 1632 	addc	a,r3
      00068A FB               [12] 1633 	mov	r3,a
      00068B EA               [12] 1634 	mov	a,r2
      00068C 24r00            [12] 1635 	add	a,#_u
      00068E F5 82            [12] 1636 	mov	dpl,a
      000690 EB               [12] 1637 	mov	a,r3
      000691 34s48            [12] 1638 	addc	a,#(_u >> 8)
      000693 F5 83            [12] 1639 	mov	dph,a
      000695 E0               [24] 1640 	movx	a,@dptr
      000696 FB               [12] 1641 	mov	r3,a
      000697 A8*00            [24] 1642 	mov	r0,_bp
      000699 08               [12] 1643 	inc	r0
      00069A EB               [12] 1644 	mov	a,r3
      00069B 26               [12] 1645 	add	a,@r0
      00069C F6               [12] 1646 	mov	@r0,a
                                   1647 ;	life.c:199: UPDN(0, -1);
      00069D 78r05            [12] 1648 	mov	r0,#_y
      00069F 74 C0            [12] 1649 	mov	a,#0xc0
      0006A1 26               [12] 1650 	add	a,@r0
      0006A2 FA               [12] 1651 	mov	r2,a
      0006A3 E4               [12] 1652 	clr	a
      0006A4 08               [12] 1653 	inc	r0
      0006A5 36               [12] 1654 	addc	a,@r0
      0006A6 FB               [12] 1655 	mov	r3,a
      0006A7 C0 07            [24] 1656 	push	ar7
      0006A9 C0 06            [24] 1657 	push	ar6
      0006AB C0 05            [24] 1658 	push	ar5
      0006AD C0 04            [24] 1659 	push	ar4
      0006AF 74 C0            [12] 1660 	mov	a,#0xc0
      0006B1 C0 E0            [24] 1661 	push	acc
      0006B3 E4               [12] 1662 	clr	a
      0006B4 C0 E0            [24] 1663 	push	acc
      0006B6 8A 82            [24] 1664 	mov	dpl,r2
      0006B8 8B 83            [24] 1665 	mov	dph,r3
      0006BA 12r00r00         [24] 1666 	lcall	__modsint
      0006BD AA 82            [24] 1667 	mov	r2,dpl
      0006BF AB 83            [24] 1668 	mov	r3,dph
      0006C1 15 81            [12] 1669 	dec	sp
      0006C3 15 81            [12] 1670 	dec	sp
      0006C5 C0 02            [24] 1671 	push	ar2
      0006C7 C0 03            [24] 1672 	push	ar3
      0006C9 90 00 30         [24] 1673 	mov	dptr,#0x0030
      0006CC 12r00r00         [24] 1674 	lcall	__mulint
      0006CF C8               [12] 1675 	xch	a,r0
      0006D0 E5*00            [12] 1676 	mov	a,_bp
      0006D2 24 08            [12] 1677 	add	a,#0x08
      0006D4 C8               [12] 1678 	xch	a,r0
      0006D5 A6 82            [24] 1679 	mov	@r0,dpl
      0006D7 08               [12] 1680 	inc	r0
      0006D8 A6 83            [24] 1681 	mov	@r0,dph
      0006DA 15 81            [12] 1682 	dec	sp
      0006DC 15 81            [12] 1683 	dec	sp
      0006DE D0 04            [24] 1684 	pop	ar4
      0006E0 D0 05            [24] 1685 	pop	ar5
      0006E2 D0 06            [24] 1686 	pop	ar6
      0006E4 D0 07            [24] 1687 	pop	ar7
      0006E6 E5*00            [12] 1688 	mov	a,_bp
      0006E8 24 08            [12] 1689 	add	a,#0x08
      0006EA F8               [12] 1690 	mov	r0,a
      0006EB EC               [12] 1691 	mov	a,r4
      0006EC 26               [12] 1692 	add	a,@r0
      0006ED FA               [12] 1693 	mov	r2,a
      0006EE ED               [12] 1694 	mov	a,r5
      0006EF 08               [12] 1695 	inc	r0
      0006F0 36               [12] 1696 	addc	a,@r0
      0006F1 FB               [12] 1697 	mov	r3,a
      0006F2 EA               [12] 1698 	mov	a,r2
      0006F3 24r00            [12] 1699 	add	a,#_u
      0006F5 F5 82            [12] 1700 	mov	dpl,a
      0006F7 EB               [12] 1701 	mov	a,r3
      0006F8 34s48            [12] 1702 	addc	a,#(_u >> 8)
      0006FA F5 83            [12] 1703 	mov	dph,a
      0006FC E0               [24] 1704 	movx	a,@dptr
      0006FD FB               [12] 1705 	mov	r3,a
      0006FE A8*00            [24] 1706 	mov	r0,_bp
      000700 08               [12] 1707 	inc	r0
      000701 EB               [12] 1708 	mov	a,r3
      000702 26               [12] 1709 	add	a,@r0
      000703 F6               [12] 1710 	mov	@r0,a
                                   1711 ;	life.c:200: UPDN(0, 0);
      000704 E5*00            [12] 1712 	mov	a,_bp
      000706 24 08            [12] 1713 	add	a,#0x08
      000708 F8               [12] 1714 	mov	r0,a
      000709 E5*00            [12] 1715 	mov	a,_bp
      00070B 24 06            [12] 1716 	add	a,#0x06
      00070D F9               [12] 1717 	mov	r1,a
      00070E E7               [12] 1718 	mov	a,@r1
      00070F 26               [12] 1719 	add	a,@r0
      000710 FA               [12] 1720 	mov	r2,a
      000711 09               [12] 1721 	inc	r1
      000712 E7               [12] 1722 	mov	a,@r1
      000713 08               [12] 1723 	inc	r0
      000714 36               [12] 1724 	addc	a,@r0
      000715 FB               [12] 1725 	mov	r3,a
      000716 EA               [12] 1726 	mov	a,r2
      000717 24r00            [12] 1727 	add	a,#_u
      000719 F5 82            [12] 1728 	mov	dpl,a
      00071B EB               [12] 1729 	mov	a,r3
      00071C 34s48            [12] 1730 	addc	a,#(_u >> 8)
      00071E F5 83            [12] 1731 	mov	dph,a
      000720 E0               [24] 1732 	movx	a,@dptr
      000721 FB               [12] 1733 	mov	r3,a
      000722 A8*00            [24] 1734 	mov	r0,_bp
      000724 08               [12] 1735 	inc	r0
      000725 EB               [12] 1736 	mov	a,r3
      000726 26               [12] 1737 	add	a,@r0
      000727 F6               [12] 1738 	mov	@r0,a
                                   1739 ;	life.c:201: UPDN(0, 1);
      000728 E5*00            [12] 1740 	mov	a,_bp
      00072A 24 08            [12] 1741 	add	a,#0x08
      00072C F8               [12] 1742 	mov	r0,a
      00072D EE               [12] 1743 	mov	a,r6
      00072E 26               [12] 1744 	add	a,@r0
      00072F FA               [12] 1745 	mov	r2,a
      000730 EF               [12] 1746 	mov	a,r7
      000731 08               [12] 1747 	inc	r0
      000732 36               [12] 1748 	addc	a,@r0
      000733 FB               [12] 1749 	mov	r3,a
      000734 EA               [12] 1750 	mov	a,r2
      000735 24r00            [12] 1751 	add	a,#_u
      000737 F5 82            [12] 1752 	mov	dpl,a
      000739 EB               [12] 1753 	mov	a,r3
      00073A 34s48            [12] 1754 	addc	a,#(_u >> 8)
      00073C F5 83            [12] 1755 	mov	dph,a
      00073E E0               [24] 1756 	movx	a,@dptr
      00073F FB               [12] 1757 	mov	r3,a
      000740 A8*00            [24] 1758 	mov	r0,_bp
      000742 08               [12] 1759 	inc	r0
      000743 E5*00            [12] 1760 	mov	a,_bp
      000745 24 08            [12] 1761 	add	a,#0x08
      000747 F9               [12] 1762 	mov	r1,a
      000748 EB               [12] 1763 	mov	a,r3
      000749 26               [12] 1764 	add	a,@r0
      00074A F7               [12] 1765 	mov	@r1,a
                                   1766 ;	life.c:202: UPDN(1, -1);
      00074B 78r05            [12] 1767 	mov	r0,#_y
      00074D 74 C1            [12] 1768 	mov	a,#0xc1
      00074F 26               [12] 1769 	add	a,@r0
      000750 FA               [12] 1770 	mov	r2,a
      000751 E4               [12] 1771 	clr	a
      000752 08               [12] 1772 	inc	r0
      000753 36               [12] 1773 	addc	a,@r0
      000754 FB               [12] 1774 	mov	r3,a
      000755 C0 07            [24] 1775 	push	ar7
      000757 C0 06            [24] 1776 	push	ar6
      000759 C0 05            [24] 1777 	push	ar5
      00075B C0 04            [24] 1778 	push	ar4
      00075D 74 C0            [12] 1779 	mov	a,#0xc0
      00075F C0 E0            [24] 1780 	push	acc
      000761 E4               [12] 1781 	clr	a
      000762 C0 E0            [24] 1782 	push	acc
      000764 8A 82            [24] 1783 	mov	dpl,r2
      000766 8B 83            [24] 1784 	mov	dph,r3
      000768 12r00r00         [24] 1785 	lcall	__modsint
      00076B AA 82            [24] 1786 	mov	r2,dpl
      00076D AB 83            [24] 1787 	mov	r3,dph
      00076F 15 81            [12] 1788 	dec	sp
      000771 15 81            [12] 1789 	dec	sp
      000773 C0 02            [24] 1790 	push	ar2
      000775 C0 03            [24] 1791 	push	ar3
      000777 90 00 30         [24] 1792 	mov	dptr,#0x0030
      00077A 12r00r00         [24] 1793 	lcall	__mulint
      00077D AA 82            [24] 1794 	mov	r2,dpl
      00077F AB 83            [24] 1795 	mov	r3,dph
      000781 15 81            [12] 1796 	dec	sp
      000783 15 81            [12] 1797 	dec	sp
      000785 D0 04            [24] 1798 	pop	ar4
      000787 D0 05            [24] 1799 	pop	ar5
      000789 D0 06            [24] 1800 	pop	ar6
      00078B D0 07            [24] 1801 	pop	ar7
      00078D EC               [12] 1802 	mov	a,r4
      00078E 2A               [12] 1803 	add	a,r2
      00078F FC               [12] 1804 	mov	r4,a
      000790 ED               [12] 1805 	mov	a,r5
      000791 3B               [12] 1806 	addc	a,r3
      000792 FD               [12] 1807 	mov	r5,a
      000793 EC               [12] 1808 	mov	a,r4
      000794 24r00            [12] 1809 	add	a,#_u
      000796 F5 82            [12] 1810 	mov	dpl,a
      000798 ED               [12] 1811 	mov	a,r5
      000799 34s48            [12] 1812 	addc	a,#(_u >> 8)
      00079B F5 83            [12] 1813 	mov	dph,a
      00079D E0               [24] 1814 	movx	a,@dptr
      00079E FD               [12] 1815 	mov	r5,a
      00079F E5*00            [12] 1816 	mov	a,_bp
      0007A1 24 08            [12] 1817 	add	a,#0x08
      0007A3 F8               [12] 1818 	mov	r0,a
      0007A4 E5*00            [12] 1819 	mov	a,_bp
      0007A6 24 08            [12] 1820 	add	a,#0x08
      0007A8 F9               [12] 1821 	mov	r1,a
      0007A9 ED               [12] 1822 	mov	a,r5
      0007AA 26               [12] 1823 	add	a,@r0
      0007AB F7               [12] 1824 	mov	@r1,a
                                   1825 ;	life.c:203: UPDN(1, 0);
      0007AC E5*00            [12] 1826 	mov	a,_bp
      0007AE 24 06            [12] 1827 	add	a,#0x06
      0007B0 F8               [12] 1828 	mov	r0,a
      0007B1 E6               [12] 1829 	mov	a,@r0
      0007B2 2A               [12] 1830 	add	a,r2
      0007B3 FC               [12] 1831 	mov	r4,a
      0007B4 08               [12] 1832 	inc	r0
      0007B5 E6               [12] 1833 	mov	a,@r0
      0007B6 3B               [12] 1834 	addc	a,r3
      0007B7 FD               [12] 1835 	mov	r5,a
      0007B8 EC               [12] 1836 	mov	a,r4
      0007B9 24r00            [12] 1837 	add	a,#_u
      0007BB F5 82            [12] 1838 	mov	dpl,a
      0007BD ED               [12] 1839 	mov	a,r5
      0007BE 34s48            [12] 1840 	addc	a,#(_u >> 8)
      0007C0 F5 83            [12] 1841 	mov	dph,a
      0007C2 E0               [24] 1842 	movx	a,@dptr
      0007C3 FD               [12] 1843 	mov	r5,a
      0007C4 E5*00            [12] 1844 	mov	a,_bp
      0007C6 24 08            [12] 1845 	add	a,#0x08
      0007C8 F8               [12] 1846 	mov	r0,a
      0007C9 ED               [12] 1847 	mov	a,r5
      0007CA 26               [12] 1848 	add	a,@r0
      0007CB FD               [12] 1849 	mov	r5,a
                                   1850 ;	life.c:204: UPDN(1, 1);
      0007CC EE               [12] 1851 	mov	a,r6
      0007CD 2A               [12] 1852 	add	a,r2
      0007CE FE               [12] 1853 	mov	r6,a
      0007CF EF               [12] 1854 	mov	a,r7
      0007D0 3B               [12] 1855 	addc	a,r3
      0007D1 FF               [12] 1856 	mov	r7,a
      0007D2 EE               [12] 1857 	mov	a,r6
      0007D3 24r00            [12] 1858 	add	a,#_u
      0007D5 F5 82            [12] 1859 	mov	dpl,a
      0007D7 EF               [12] 1860 	mov	a,r7
      0007D8 34s48            [12] 1861 	addc	a,#(_u >> 8)
      0007DA F5 83            [12] 1862 	mov	dph,a
      0007DC E0               [24] 1863 	movx	a,@dptr
      0007DD 2D               [12] 1864 	add	a,r5
      0007DE FF               [12] 1865 	mov	r7,a
      0007DF 78r07            [12] 1866 	mov	r0,#_n
      0007E1 A6 07            [24] 1867 	mov	@r0,ar7
                                   1868 ;	life.c:207: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007E3 A8*00            [24] 1869 	mov	r0,_bp
      0007E5 08               [12] 1870 	inc	r0
      0007E6 08               [12] 1871 	inc	r0
      0007E7 E6               [12] 1872 	mov	a,@r0
      0007E8 24r00            [12] 1873 	add	a,#_nu
      0007EA FD               [12] 1874 	mov	r5,a
      0007EB 08               [12] 1875 	inc	r0
      0007EC E6               [12] 1876 	mov	a,@r0
      0007ED 34s6C            [12] 1877 	addc	a,#(_nu >> 8)
      0007EF FE               [12] 1878 	mov	r6,a
      0007F0 BF 03 02         [24] 1879 	cjne	r7,#0x03,00508$
      0007F3 80 25            [24] 1880 	sjmp	00246$
      0007F5                       1881 00508$:
      0007F5 BF 02 1E         [24] 1882 	cjne	r7,#0x02,00245$
      0007F8 E5*00            [12] 1883 	mov	a,_bp
      0007FA 24 04            [12] 1884 	add	a,#0x04
      0007FC F8               [12] 1885 	mov	r0,a
      0007FD 79r03            [12] 1886 	mov	r1,#_x
      0007FF E7               [12] 1887 	mov	a,@r1
      000800 26               [12] 1888 	add	a,@r0
      000801 FC               [12] 1889 	mov	r4,a
      000802 09               [12] 1890 	inc	r1
      000803 E7               [12] 1891 	mov	a,@r1
      000804 08               [12] 1892 	inc	r0
      000805 36               [12] 1893 	addc	a,@r0
      000806 FF               [12] 1894 	mov	r7,a
      000807 EC               [12] 1895 	mov	a,r4
      000808 24r00            [12] 1896 	add	a,#_u
      00080A FC               [12] 1897 	mov	r4,a
      00080B EF               [12] 1898 	mov	a,r7
      00080C 34s48            [12] 1899 	addc	a,#(_u >> 8)
      00080E FF               [12] 1900 	mov	r7,a
      00080F 8C 82            [24] 1901 	mov	dpl,r4
      000811 8F 83            [24] 1902 	mov	dph,r7
      000813 E0               [24] 1903 	movx	a,@dptr
      000814 70 04            [24] 1904 	jnz	00246$
      000816                       1905 00245$:
                                   1906 ;	assignBit
      000816 C2*00            [12] 1907 	clr	b0
      000818 80 02            [24] 1908 	sjmp	00247$
      00081A                       1909 00246$:
                                   1910 ;	assignBit
      00081A D2*00            [12] 1911 	setb	b0
      00081C                       1912 00247$:
      00081C A2*00            [12] 1913 	mov	c,b0
      00081E E4               [12] 1914 	clr	a
      00081F 33               [12] 1915 	rlc	a
      000820 8D 82            [24] 1916 	mov	dpl,r5
      000822 8E 83            [24] 1917 	mov	dph,r6
      000824 F0               [24] 1918 	movx	@dptr,a
                                   1919 ;	life.c:208: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000825 78r05            [12] 1920 	mov	r0,#_y
      000827 E6               [12] 1921 	mov	a,@r0
      000828 C0 E0            [24] 1922 	push	acc
      00082A 08               [12] 1923 	inc	r0
      00082B E6               [12] 1924 	mov	a,@r0
      00082C C0 E0            [24] 1925 	push	acc
      00082E 90 00 30         [24] 1926 	mov	dptr,#0x0030
      000831 12r00r00         [24] 1927 	lcall	__mulint
      000834 AE 82            [24] 1928 	mov	r6,dpl
      000836 AF 83            [24] 1929 	mov	r7,dph
      000838 15 81            [12] 1930 	dec	sp
      00083A 15 81            [12] 1931 	dec	sp
      00083C 78r03            [12] 1932 	mov	r0,#_x
      00083E E6               [12] 1933 	mov	a,@r0
      00083F 2E               [12] 1934 	add	a,r6
      000840 FE               [12] 1935 	mov	r6,a
      000841 08               [12] 1936 	inc	r0
      000842 E6               [12] 1937 	mov	a,@r0
      000843 3F               [12] 1938 	addc	a,r7
      000844 FF               [12] 1939 	mov	r7,a
      000845 EE               [12] 1940 	mov	a,r6
      000846 24r00            [12] 1941 	add	a,#_pu
      000848 F5 82            [12] 1942 	mov	dpl,a
      00084A EF               [12] 1943 	mov	a,r7
      00084B 34s24            [12] 1944 	addc	a,#(_pu >> 8)
      00084D F5 83            [12] 1945 	mov	dph,a
      00084F E0               [24] 1946 	movx	a,@dptr
      000850 FD               [12] 1947 	mov	r5,a
      000851 EE               [12] 1948 	mov	a,r6
      000852 24r00            [12] 1949 	add	a,#_nu
      000854 F5 82            [12] 1950 	mov	dpl,a
      000856 EF               [12] 1951 	mov	a,r7
      000857 34s6C            [12] 1952 	addc	a,#(_nu >> 8)
      000859 F5 83            [12] 1953 	mov	dph,a
      00085B E0               [24] 1954 	movx	a,@dptr
      00085C FC               [12] 1955 	mov	r4,a
      00085D 6D               [12] 1956 	xrl	a,r5
      00085E 78r09            [12] 1957 	mov	r0,#_cycle2
      000860 46               [12] 1958 	orl	a,@r0
      000861 F6               [12] 1959 	mov	@r0,a
                                   1960 ;	life.c:209: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000862 EE               [12] 1961 	mov	a,r6
      000863 24r00            [12] 1962 	add	a,#_u
      000865 F5 82            [12] 1963 	mov	dpl,a
      000867 EF               [12] 1964 	mov	a,r7
      000868 34s48            [12] 1965 	addc	a,#(_u >> 8)
      00086A F5 83            [12] 1966 	mov	dph,a
      00086C E0               [24] 1967 	movx	a,@dptr
      00086D FF               [12] 1968 	mov	r7,a
      00086E EC               [12] 1969 	mov	a,r4
      00086F 6F               [12] 1970 	xrl	a,r7
      000870 78r08            [12] 1971 	mov	r0,#_fixed
      000872 46               [12] 1972 	orl	a,@r0
      000873 F6               [12] 1973 	mov	@r0,a
                                   1974 ;	life.c:190: for (x = 0; x < W; x++) {
      000874 78r03            [12] 1975 	mov	r0,#_x
      000876 06               [12] 1976 	inc	@r0
      000877 B6 00 02         [24] 1977 	cjne	@r0,#0x00,00512$
      00087A 08               [12] 1978 	inc	r0
      00087B 06               [12] 1979 	inc	@r0
      00087C                       1980 00512$:
      00087C 78r03            [12] 1981 	mov	r0,#_x
      00087E C3               [12] 1982 	clr	c
      00087F E6               [12] 1983 	mov	a,@r0
      000880 94 30            [12] 1984 	subb	a,#0x30
      000882 08               [12] 1985 	inc	r0
      000883 E6               [12] 1986 	mov	a,@r0
      000884 64 80            [12] 1987 	xrl	a,#0x80
      000886 94 80            [12] 1988 	subb	a,#0x80
      000888 50 03            [24] 1989 	jnc	00513$
      00088A 02r05r43         [24] 1990 	ljmp	00231$
      00088D                       1991 00513$:
                                   1992 ;	life.c:187: for (y = 0; y < H; y++) {
      00088D 78r05            [12] 1993 	mov	r0,#_y
      00088F 06               [12] 1994 	inc	@r0
      000890 B6 00 02         [24] 1995 	cjne	@r0,#0x00,00514$
      000893 08               [12] 1996 	inc	r0
      000894 06               [12] 1997 	inc	@r0
      000895                       1998 00514$:
      000895 78r05            [12] 1999 	mov	r0,#_y
      000897 C3               [12] 2000 	clr	c
      000898 E6               [12] 2001 	mov	a,@r0
      000899 94 C0            [12] 2002 	subb	a,#0xc0
      00089B 08               [12] 2003 	inc	r0
      00089C E6               [12] 2004 	mov	a,@r0
      00089D 64 80            [12] 2005 	xrl	a,#0x80
      00089F 94 80            [12] 2006 	subb	a,#0x80
      0008A1 50 03            [24] 2007 	jnc	00515$
      0008A3 02r05r27         [24] 2008 	ljmp	00233$
      0008A6                       2009 00515$:
                                   2010 ;	life.c:213: OE76 = OE76_0;
      0008A6 78r02            [12] 2011 	mov	r0,#_OE76
      0008A8 76 3F            [12] 2012 	mov	@r0,#0x3f
                                   2013 ;	life.c:214: flashOE();
      0008AA 12r00r18         [24] 2014 	lcall	_flashOE
                                   2015 ;	life.c:216: cycle2 = !cycle2;
      0008AD 78r09            [12] 2016 	mov	r0,#_cycle2
      0008AF E6               [12] 2017 	mov	a,@r0
      0008B0 B4 01 00         [24] 2018 	cjne	a,#0x01,00516$
      0008B3                       2019 00516$:
      0008B3 92*00            [24] 2020 	mov	b0,c
      0008B5 78r09            [12] 2021 	mov	r0,#_cycle2
      0008B7 E4               [12] 2022 	clr	a
      0008B8 33               [12] 2023 	rlc	a
      0008B9 F6               [12] 2024 	mov	@r0,a
                                   2025 ;	life.c:217: fixed = !fixed;
      0008BA 78r08            [12] 2026 	mov	r0,#_fixed
      0008BC E6               [12] 2027 	mov	a,@r0
      0008BD B4 01 00         [24] 2028 	cjne	a,#0x01,00517$
      0008C0                       2029 00517$:
      0008C0 92*00            [24] 2030 	mov	b0,c
      0008C2 78r08            [12] 2031 	mov	r0,#_fixed
      0008C4 E4               [12] 2032 	clr	a
      0008C5 33               [12] 2033 	rlc	a
      0008C6 F6               [12] 2034 	mov	@r0,a
                                   2035 ;	life.c:219: memcpy(pu, u, sizeof (u));
      0008C7 E4               [12] 2036 	clr	a
      0008C8 C0 E0            [24] 2037 	push	acc
      0008CA 74 24            [12] 2038 	mov	a,#0x24
      0008CC C0 E0            [24] 2039 	push	acc
      0008CE 74r00            [12] 2040 	mov	a,#_u
      0008D0 C0 E0            [24] 2041 	push	acc
      0008D2 74s48            [12] 2042 	mov	a,#(_u >> 8)
      0008D4 C0 E0            [24] 2043 	push	acc
      0008D6 E4               [12] 2044 	clr	a
      0008D7 C0 E0            [24] 2045 	push	acc
      0008D9 90r24r00         [24] 2046 	mov	dptr,#_pu
      0008DC 75 F0 00         [24] 2047 	mov	b,#0x00
      0008DF 12r00r00         [24] 2048 	lcall	___memcpy
      0008E2 E5 81            [12] 2049 	mov	a,sp
      0008E4 24 FB            [12] 2050 	add	a,#0xfb
      0008E6 F5 81            [12] 2051 	mov	sp,a
                                   2052 ;	life.c:220: memcpy(u, nu, sizeof (nu));
      0008E8 E4               [12] 2053 	clr	a
      0008E9 C0 E0            [24] 2054 	push	acc
      0008EB 74 24            [12] 2055 	mov	a,#0x24
      0008ED C0 E0            [24] 2056 	push	acc
      0008EF 74r00            [12] 2057 	mov	a,#_nu
      0008F1 C0 E0            [24] 2058 	push	acc
      0008F3 74s6C            [12] 2059 	mov	a,#(_nu >> 8)
      0008F5 C0 E0            [24] 2060 	push	acc
      0008F7 E4               [12] 2061 	clr	a
      0008F8 C0 E0            [24] 2062 	push	acc
      0008FA 90r48r00         [24] 2063 	mov	dptr,#_u
      0008FD 75 F0 00         [24] 2064 	mov	b,#0x00
      000900 12r00r00         [24] 2065 	lcall	___memcpy
      000903 E5 81            [12] 2066 	mov	a,sp
      000905 24 FB            [12] 2067 	add	a,#0xfb
      000907 F5 81            [12] 2068 	mov	sp,a
                                   2069 ;	life.c:278: if (fixed) {
      000909 78r08            [12] 2070 	mov	r0,#_fixed
      00090B E6               [12] 2071 	mov	a,@r0
      00090C 60 41            [24] 2072 	jz	00135$
                                   2073 ;	life.c:67: genfx = gen;
      00090E 78r0A            [12] 2074 	mov	r0,#_gen
      000910 86 04            [24] 2075 	mov	ar4,@r0
      000912 08               [12] 2076 	inc	r0
      000913 86 05            [24] 2077 	mov	ar5,@r0
      000915 08               [12] 2078 	inc	r0
      000916 86 06            [24] 2079 	mov	ar6,@r0
      000918 08               [12] 2080 	inc	r0
      000919 86 07            [24] 2081 	mov	ar7,@r0
      00091B 78r12            [12] 2082 	mov	r0,#_genfx
      00091D A6 04            [24] 2083 	mov	@r0,ar4
      00091F 08               [12] 2084 	inc	r0
      000920 A6 05            [24] 2085 	mov	@r0,ar5
      000922 08               [12] 2086 	inc	r0
      000923 A6 06            [24] 2087 	mov	@r0,ar6
      000925 08               [12] 2088 	inc	r0
      000926 A6 07            [24] 2089 	mov	@r0,ar7
                                   2090 ;	life.c:68: fxset = 1;
      000928 78r17            [12] 2091 	mov	r0,#_fxset
      00092A 76 01            [12] 2092 	mov	@r0,#0x01
                                   2093 ;	life.c:280: printstr("FIXED AT ");
      00092C 90r00r6A         [24] 2094 	mov	dptr,#___str_13
      00092F 75 F0 80         [24] 2095 	mov	b,#0x80
      000932 12r00r00         [24] 2096 	lcall	_printstr
                                   2097 ;	life.c:281: showu(PRHDR, u);
      000935 74r00            [12] 2098 	mov	a,#_u
      000937 C0 E0            [24] 2099 	push	acc
      000939 74s48            [12] 2100 	mov	a,#(_u >> 8)
      00093B C0 E0            [24] 2101 	push	acc
      00093D E4               [12] 2102 	clr	a
      00093E C0 E0            [24] 2103 	push	acc
      000940 75 82 02         [24] 2104 	mov	dpl,#0x02
      000943 12r00r20         [24] 2105 	lcall	_showu
      000946 15 81            [12] 2106 	dec	sp
      000948 15 81            [12] 2107 	dec	sp
      00094A 15 81            [12] 2108 	dec	sp
                                   2109 ;	life.c:282: break;
      00094C 02r09rCF         [24] 2110 	ljmp	00150$
      00094F                       2111 00135$:
                                   2112 ;	life.c:284: if (cycle2) {
      00094F 78r09            [12] 2113 	mov	r0,#_cycle2
      000951 E6               [12] 2114 	mov	a,@r0
      000952 60 23            [24] 2115 	jz	00139$
                                   2116 ;	life.c:285: if (!c2u()) updatec2();
      000954 78r16            [12] 2117 	mov	r0,#_c2set
      000956 E6               [12] 2118 	mov	a,@r0
      000957 70 1E            [24] 2119 	jnz	00139$
                                   2120 ;	life.c:74: genc2 = gen;
      000959 78r0A            [12] 2121 	mov	r0,#_gen
      00095B 86 04            [24] 2122 	mov	ar4,@r0
      00095D 08               [12] 2123 	inc	r0
      00095E 86 05            [24] 2124 	mov	ar5,@r0
      000960 08               [12] 2125 	inc	r0
      000961 86 06            [24] 2126 	mov	ar6,@r0
      000963 08               [12] 2127 	inc	r0
      000964 86 07            [24] 2128 	mov	ar7,@r0
      000966 78r0E            [12] 2129 	mov	r0,#_genc2
      000968 A6 04            [24] 2130 	mov	@r0,ar4
      00096A 08               [12] 2131 	inc	r0
      00096B A6 05            [24] 2132 	mov	@r0,ar5
      00096D 08               [12] 2133 	inc	r0
      00096E A6 06            [24] 2134 	mov	@r0,ar6
      000970 08               [12] 2135 	inc	r0
      000971 A6 07            [24] 2136 	mov	@r0,ar7
                                   2137 ;	life.c:75: c2set = 1;
      000973 78r16            [12] 2138 	mov	r0,#_c2set
      000975 76 01            [12] 2139 	mov	@r0,#0x01
                                   2140 ;	life.c:285: if (!c2u()) updatec2();
      000977                       2141 00139$:
                                   2142 ;	life.c:288: c = getchar_poll();
      000977 12r00r00         [24] 2143 	lcall	_getchar_poll
      00097A AE 82            [24] 2144 	mov	r6,dpl
      00097C AF 83            [24] 2145 	mov	r7,dph
                                   2146 ;	life.c:289: if (c > 0) {
      00097E C3               [12] 2147 	clr	c
      00097F E4               [12] 2148 	clr	a
      000980 9E               [12] 2149 	subb	a,r6
      000981 74 80            [12] 2150 	mov	a,#(0x00 ^ 0x80)
      000983 8F F0            [24] 2151 	mov	b,r7
      000985 63 F0 80         [24] 2152 	xrl	b,#0x80
      000988 95 F0            [12] 2153 	subb	a,b
      00098A 40 03            [24] 2154 	jc	00521$
      00098C 02r04r93         [24] 2155 	ljmp	00237$
      00098F                       2156 00521$:
                                   2157 ;	life.c:290: c = toupper(c);
      00098F 8E 82            [24] 2158 	mov	dpl,r6
      000991 8F 83            [24] 2159 	mov	dph,r7
      000993 12r00r00         [24] 2160 	lcall	_toupper
      000996 AE 82            [24] 2161 	mov	r6,dpl
      000998 AF 83            [24] 2162 	mov	r7,dph
                                   2163 ;	life.c:291: if (c == (int)'U') pruni = !pruni;
      00099A BE 55 13         [24] 2164 	cjne	r6,#0x55,00146$
      00099D BF 00 10         [24] 2165 	cjne	r7,#0x00,00146$
      0009A0 78r18            [12] 2166 	mov	r0,#_pruni
      0009A2 E6               [12] 2167 	mov	a,@r0
      0009A3 B4 01 00         [24] 2168 	cjne	a,#0x01,00524$
      0009A6                       2169 00524$:
      0009A6 92*00            [24] 2170 	mov	b0,c
      0009A8 78r18            [12] 2171 	mov	r0,#_pruni
      0009AA E4               [12] 2172 	clr	a
      0009AB 33               [12] 2173 	rlc	a
      0009AC F6               [12] 2174 	mov	@r0,a
      0009AD 02r04r93         [24] 2175 	ljmp	00237$
      0009B0                       2176 00146$:
                                   2177 ;	life.c:292: else if (c == (int)'T') i0 = 1;
      0009B0 BE 54 0A         [24] 2178 	cjne	r6,#0x54,00143$
      0009B3 BF 00 07         [24] 2179 	cjne	r7,#0x00,00143$
      0009B6 78r00            [12] 2180 	mov	r0,#_i0
      0009B8 76 01            [12] 2181 	mov	@r0,#0x01
      0009BA 02r04r93         [24] 2182 	ljmp	00237$
      0009BD                       2183 00143$:
                                   2184 ;	life.c:293: else if (c == (int)'B') i1 = 1;
      0009BD BE 42 05         [24] 2185 	cjne	r6,#0x42,00527$
      0009C0 BF 00 02         [24] 2186 	cjne	r7,#0x00,00527$
      0009C3 80 03            [24] 2187 	sjmp	00528$
      0009C5                       2188 00527$:
      0009C5 02r04r93         [24] 2189 	ljmp	00237$
      0009C8                       2190 00528$:
      0009C8 78r01            [12] 2191 	mov	r0,#_i1
      0009CA 76 01            [12] 2192 	mov	@r0,#0x01
      0009CC 02r04r93         [24] 2193 	ljmp	00237$
      0009CF                       2194 00150$:
                                   2195 ;	life.c:297: if (i1) {
      0009CF 78r01            [12] 2196 	mov	r0,#_i1
      0009D1 E6               [12] 2197 	mov	a,@r0
      0009D2 60 20            [24] 2198 	jz	00240$
                                   2199 ;	life.c:298: printstr("BREAK AT ");
      0009D4 90r00r74         [24] 2200 	mov	dptr,#___str_14
      0009D7 75 F0 80         [24] 2201 	mov	b,#0x80
      0009DA 12r00r00         [24] 2202 	lcall	_printstr
                                   2203 ;	life.c:299: showu(PRHDR, u);
      0009DD 74r00            [12] 2204 	mov	a,#_u
      0009DF C0 E0            [24] 2205 	push	acc
      0009E1 74s48            [12] 2206 	mov	a,#(_u >> 8)
      0009E3 C0 E0            [24] 2207 	push	acc
      0009E5 E4               [12] 2208 	clr	a
      0009E6 C0 E0            [24] 2209 	push	acc
      0009E8 75 82 02         [24] 2210 	mov	dpl,#0x02
      0009EB 12r00r20         [24] 2211 	lcall	_showu
      0009EE 15 81            [12] 2212 	dec	sp
      0009F0 15 81            [12] 2213 	dec	sp
      0009F2 15 81            [12] 2214 	dec	sp
      0009F4                       2215 00240$:
                                   2216 ;	life.c:250: for (i0 = 0; !i0; ) {
      0009F4 78r00            [12] 2217 	mov	r0,#_i0
      0009F6 E6               [12] 2218 	mov	a,@r0
      0009F7 70 03            [24] 2219 	jnz	00530$
      0009F9 02r01rB3         [24] 2220 	ljmp	00127$
      0009FC                       2221 00530$:
                                   2222 ;	life.c:303: term:
      0009FC                       2223 00154$:
                                   2224 ;	life.c:304: EA = 0;
                                   2225 ;	assignBit
      0009FC C2 AF            [12] 2226 	clr	_EA
                                   2227 ;	life.c:305: printstr("TERM\r\n");
      0009FE 90r00r7E         [24] 2228 	mov	dptr,#___str_15
      000A01 75 F0 80         [24] 2229 	mov	b,#0x80
      000A04 12r00r00         [24] 2230 	lcall	_printstr
                                   2231 ;	life.c:307: PCON |= 2;
      000A07 43 87 02         [24] 2232 	orl	_PCON,#0x02
                                   2233 ;	life.c:309: return;
                                   2234 ;	life.c:310: }
      000A0A 85*00 81         [24] 2235 	mov	sp,_bp
      000A0D D0*00            [24] 2236 	pop	_bp
      000A0F 22               [24] 2237 	ret
                                   2238 	.area CSEG    (CODE)
                                   2239 	.area CONST   (CODE)
                                   2240 	.area CONST   (CODE)
      000000                       2241 ___str_0:
      000000 1B                    2242 	.db 0x1b
      000001 5B 32 4A              2243 	.ascii "[2J"
      000004 00                    2244 	.db 0x00
                                   2245 	.area CSEG    (CODE)
                                   2246 	.area CONST   (CODE)
      000005                       2247 ___str_1:
      000005 47 45 4E 20           2248 	.ascii "GEN "
      000009 00                    2249 	.db 0x00
                                   2250 	.area CSEG    (CODE)
                                   2251 	.area CONST   (CODE)
      00000A                       2252 ___str_2:
      00000A 20 43 59 43 4C 45 32  2253 	.ascii " CYCLE2 "
             20
      000012 00                    2254 	.db 0x00
                                   2255 	.area CSEG    (CODE)
                                   2256 	.area CONST   (CODE)
      000013                       2257 ___str_3:
      000013 20 46 49 58 45 44 20  2258 	.ascii " FIXED "
      00001A 00                    2259 	.db 0x00
                                   2260 	.area CSEG    (CODE)
                                   2261 	.area CONST   (CODE)
      00001B                       2262 ___str_4:
      00001B 0D                    2263 	.db 0x0d
      00001C 0A                    2264 	.db 0x0a
      00001D 00                    2265 	.db 0x00
                                   2266 	.area CSEG    (CODE)
                                   2267 	.area CONST   (CODE)
      00001E                       2268 ___str_5:
      00001E 1B                    2269 	.db 0x1b
      00001F 5B 3F 32 35 6C        2270 	.ascii "[?25l"
      000024 00                    2271 	.db 0x00
                                   2272 	.area CSEG    (CODE)
                                   2273 	.area CONST   (CODE)
      000025                       2274 ___str_6:
      000025 1B                    2275 	.db 0x1b
      000026 5B 3F 32 35 68        2276 	.ascii "[?25h"
      00002B 00                    2277 	.db 0x00
                                   2278 	.area CSEG    (CODE)
                                   2279 	.area CONST   (CODE)
      00002C                       2280 ___str_7:
      00002C 4C 4F 41 44 20 30 20  2281 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00003A 00                    2282 	.db 0x00
                                   2283 	.area CSEG    (CODE)
                                   2284 	.area CONST   (CODE)
      00003B                       2285 ___str_8:
      00003B 3E                    2286 	.ascii ">"
      00003C 0D                    2287 	.db 0x0d
      00003D 0A                    2288 	.db 0x0a
      00003E 00                    2289 	.db 0x00
                                   2290 	.area CSEG    (CODE)
                                   2291 	.area CONST   (CODE)
      00003F                       2292 ___str_9:
      00003F 52 41 4E 44 4F 4D     2293 	.ascii "RANDOM"
      000045 00                    2294 	.db 0x00
                                   2295 	.area CSEG    (CODE)
                                   2296 	.area CONST   (CODE)
      000046                       2297 ___str_10:
      000046 1B                    2298 	.db 0x1b
      000047 5B 3F 32 35 68        2299 	.ascii "[?25h"
      00004C 1B                    2300 	.db 0x1b
      00004D 5B 6D                 2301 	.ascii "[m"
      00004F 00                    2302 	.db 0x00
                                   2303 	.area CSEG    (CODE)
                                   2304 	.area CONST   (CODE)
      000050                       2305 ___str_11:
      000050 4C 49 46 45 20 49 20  2306 	.ascii "LIFE I L R O P S U"
             4C 20 52 20 4F 20 50
             20 53 20 55
      000062 00                    2307 	.db 0x00
                                   2308 	.area CSEG    (CODE)
                                   2309 	.area CONST   (CODE)
      000063                       2310 ___str_12:
      000063 20 42 20 54           2311 	.ascii " B T"
      000067 0D                    2312 	.db 0x0d
      000068 0A                    2313 	.db 0x0a
      000069 00                    2314 	.db 0x00
                                   2315 	.area CSEG    (CODE)
                                   2316 	.area CONST   (CODE)
      00006A                       2317 ___str_13:
      00006A 46 49 58 45 44 20 41  2318 	.ascii "FIXED AT "
             54 20
      000073 00                    2319 	.db 0x00
                                   2320 	.area CSEG    (CODE)
                                   2321 	.area CONST   (CODE)
      000074                       2322 ___str_14:
      000074 42 52 45 41 4B 20 41  2323 	.ascii "BREAK AT "
             54 20
      00007D 00                    2324 	.db 0x00
                                   2325 	.area CSEG    (CODE)
                                   2326 	.area CONST   (CODE)
      00007E                       2327 ___str_15:
      00007E 54 45 52 4D           2328 	.ascii "TERM"
      000082 0D                    2329 	.db 0x0d
      000083 0A                    2330 	.db 0x0a
      000084 00                    2331 	.db 0x00
                                   2332 	.area CSEG    (CODE)
                                   2333 	.area XINIT   (CODE)
                                   2334 	.area CABS    (ABS,CODE)
