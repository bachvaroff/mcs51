                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _generation
                                    143 	.globl _cycle2
                                    144 	.globl _fixed
                                    145 	.globl _n
                                    146 	.globl _bstep
                                    147 	.globl _c
                                    148 	.globl _j
                                    149 	.globl _y1
                                    150 	.globl _x1
                                    151 	.globl _y
                                    152 	.globl _x
                                    153 	.globl _nu
                                    154 	.globl _u
                                    155 	.globl _pu
                                    156 	.globl _i1
                                    157 	.globl _i0
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 1
      000001                        349 _i1::
      000001                        350 	.ds 1
      000002                        351 _pu::
      000002                        352 	.ds 1024
      000402                        353 _u::
      000402                        354 	.ds 1024
      000802                        355 _nu::
      000802                        356 	.ds 1024
      000C02                        357 _x::
      000C02                        358 	.ds 2
      000C04                        359 _y::
      000C04                        360 	.ds 2
      000C06                        361 _x1::
      000C06                        362 	.ds 2
      000C08                        363 _y1::
      000C08                        364 	.ds 2
      000C0A                        365 _j::
      000C0A                        366 	.ds 2
      000C0C                        367 _c::
      000C0C                        368 	.ds 2
      000C0E                        369 _bstep::
      000C0E                        370 	.ds 1
      000C0F                        371 _n::
      000C0F                        372 	.ds 1
      000C10                        373 _fixed::
      000C10                        374 	.ds 1
      000C11                        375 _cycle2::
      000C11                        376 	.ds 1
      000C12                        377 _generation::
      000C12                        378 	.ds 4
                                    379 ;--------------------------------------------------------
                                    380 ; absolute external ram data
                                    381 ;--------------------------------------------------------
                                    382 	.area XABS    (ABS,XDATA)
                                    383 ;--------------------------------------------------------
                                    384 ; external initialized ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area XISEG   (XDATA)
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT0 (CODE)
                                    389 	.area GSINIT1 (CODE)
                                    390 	.area GSINIT2 (CODE)
                                    391 	.area GSINIT3 (CODE)
                                    392 	.area GSINIT4 (CODE)
                                    393 	.area GSINIT5 (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.area GSFINAL (CODE)
                                    396 	.area CSEG    (CODE)
                                    397 ;--------------------------------------------------------
                                    398 ; interrupt vector 
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
      000000                        401 __interrupt_vect:
      000000 02r00r00         [24]  402 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  403 	ljmp	_int0
      000006                        404 	.ds	5
      00000B 32               [24]  405 	reti
      00000C                        406 	.ds	7
      000013 02r00r21         [24]  407 	ljmp	_int1
                                    408 ;--------------------------------------------------------
                                    409 ; global & static initialisations
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area GSINIT  (CODE)
                                    413 	.area GSFINAL (CODE)
                                    414 	.area GSINIT  (CODE)
                                    415 	.globl __sdcc_gsinit_startup
                                    416 	.globl __sdcc_program_startup
                                    417 	.globl __start__stack
                                    418 	.globl __mcs51_genXINIT
                                    419 	.globl __mcs51_genXRAMCLEAR
                                    420 	.globl __mcs51_genRAMCLEAR
                                    421 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  422 	ljmp	__sdcc_program_startup
                                    423 ;--------------------------------------------------------
                                    424 ; Home
                                    425 ;--------------------------------------------------------
                                    426 	.area HOME    (CODE)
                                    427 	.area HOME    (CODE)
      000016                        428 __sdcc_program_startup:
      000016 02r02r99         [24]  429 	ljmp	_main
                                    430 ;	return from main will return to caller
                                    431 ;--------------------------------------------------------
                                    432 ; code
                                    433 ;--------------------------------------------------------
                                    434 	.area CSEG    (CODE)
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'putchar'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers 
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:7: int putchar(int c) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function putchar
                                    443 ;	-----------------------------------------
      000000                        444 _putchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:12: __endasm;
      000000 E5 82            [12]  447 	mov	a, dpl
      000002 02 00 30         [24]  448 	ljmp	0x0030
                                    449 ;	life.c:13: }
                                    450 ;	naked function: no epilogue.
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'getchar'
                                    453 ;------------------------------------------------------------
                                    454 ;	life.c:15: int getchar(void) __naked {
                                    455 ;	-----------------------------------------
                                    456 ;	 function getchar
                                    457 ;	-----------------------------------------
      000005                        458 _getchar:
                                    459 ;	naked function: no prologue.
                                    460 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  461 	lcall	0x0032
      000008 F5 82            [12]  462 	mov	dpl, a
      00000A 75 83 00         [24]  463 	mov	dph, #0
      00000D 22               [24]  464 	ret
                                    465 ;	life.c:22: }
                                    466 ;	naked function: no epilogue.
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:65: void int0(void) __interrupt 0 __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000E                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000E C0 E0            [24]  483 	push	acc
      000010 C0 82            [24]  484 	push	dpl
      000012 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  487 	mov	dptr,#_i0
      000017 74 01            [12]  488 	mov	a,#0x01
      000019 F0               [24]  489 	movx	@dptr,a
                                    490 ;	life.c:67: }
      00001A D0 83            [24]  491 	pop	dph
      00001C D0 82            [24]  492 	pop	dpl
      00001E D0 E0            [24]  493 	pop	acc
      000020 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop psw
                                    497 ;	eliminated unneeded push/pop b
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int1'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:70: void int1(void) __interrupt 2 __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int1
                                    504 ;	-----------------------------------------
      000021                        505 _int1:
      000021 C0 E0            [24]  506 	push	acc
      000023 C0 82            [24]  507 	push	dpl
      000025 C0 83            [24]  508 	push	dph
                                    509 ;	life.c:71: i1 = 1;
      000027 90r00r01         [24]  510 	mov	dptr,#_i1
      00002A 74 01            [12]  511 	mov	a,#0x01
      00002C F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:72: }
      00002D D0 83            [24]  514 	pop	dph
      00002F D0 82            [24]  515 	pop	dpl
      000031 D0 E0            [24]  516 	pop	acc
      000033 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;hdr                       Allocated to registers r7 
                                    525 ;__1966080005              Allocated to registers 
                                    526 ;s                         Allocated to registers r5 r6 r7 
                                    527 ;__1310720001              Allocated to registers r6 r7 
                                    528 ;a                         Allocated to registers 
                                    529 ;__1310720003              Allocated to registers r6 r7 
                                    530 ;a                         Allocated to registers 
                                    531 ;__1966080008              Allocated to registers 
                                    532 ;s                         Allocated to registers r5 r6 r7 
                                    533 ;__2621440011              Allocated to registers 
                                    534 ;s                         Allocated to registers r5 r6 r7 
                                    535 ;------------------------------------------------------------
                                    536 ;	life.c:95: void show(char hdr) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function show
                                    539 ;	-----------------------------------------
      000034                        540 _show:
                           000007   541 	ar7 = 0x07
                           000006   542 	ar6 = 0x06
                           000005   543 	ar5 = 0x05
                           000004   544 	ar4 = 0x04
                           000003   545 	ar3 = 0x03
                           000002   546 	ar2 = 0x02
                           000001   547 	ar1 = 0x01
                           000000   548 	ar0 = 0x00
                                    549 ;	life.c:96: if (hdr) {
      000034 E5 82            [12]  550 	mov	a,dpl
      000036 FF               [12]  551 	mov	r7,a
      000037 70 03            [24]  552 	jnz	00190$
      000039 02r01rDA         [24]  553 	ljmp	00102$
      00003C                        554 00190$:
                                    555 ;	life.c:97: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  556 	mov	r5,#___str_0
      00003E 7Es00            [12]  557 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  558 	mov	r7,#0x80
                                    559 ;	life.c:48: return;
      000042                        560 00121$:
                                    561 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  562 	mov	dpl,r5
      000044 8E 83            [24]  563 	mov	dph,r6
      000046 8F F0            [24]  564 	mov	b,r7
      000048 12r00r00         [24]  565 	lcall	__gptrget
      00004B FC               [12]  566 	mov	r4,a
      00004C 60 10            [24]  567 	jz	00109$
      00004E 7B 00            [12]  568 	mov	r3,#0x00
      000050 8C 82            [24]  569 	mov	dpl,r4
      000052 8B 83            [24]  570 	mov	dph,r3
      000054 12r00r00         [24]  571 	lcall	_putchar
      000057 0D               [12]  572 	inc	r5
                                    573 ;	life.c:97: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  574 	cjne	r5,#0x00,00121$
      00005B 0E               [12]  575 	inc	r6
      00005C 80 E4            [24]  576 	sjmp	00121$
      00005E                        577 00109$:
                                    578 ;	life.c:89: print16x(generation[1]);
      00005E 90r0Cr14         [24]  579 	mov	dptr,#(_generation + 0x0002)
      000061 E0               [24]  580 	movx	a,@dptr
      000062 FE               [12]  581 	mov	r6,a
      000063 A3               [24]  582 	inc	dptr
      000064 E0               [24]  583 	movx	a,@dptr
                                    584 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000065 FF               [12]  585 	mov	r7,a
      000066 C4               [12]  586 	swap	a
      000067 54 0F            [12]  587 	anl	a,#0x0f
      000069 30 E3 02         [24]  588 	jnb	acc.3,00193$
      00006C 44 F0            [12]  589 	orl	a,#0xf0
      00006E                        590 00193$:
      00006E FC               [12]  591 	mov	r4,a
      00006F 33               [12]  592 	rlc	a
      000070 95 E0            [12]  593 	subb	a,acc
      000072 53 04 0F         [24]  594 	anl	ar4,#0x0f
      000075 7D 00            [12]  595 	mov	r5,#0x00
      000077 EC               [12]  596 	mov	a,r4
      000078 24r00            [12]  597 	add	a,#_digits
      00007A F5 82            [12]  598 	mov	dpl,a
      00007C ED               [12]  599 	mov	a,r5
      00007D 34s00            [12]  600 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  601 	mov	dph,a
      000081 E4               [12]  602 	clr	a
      000082 93               [24]  603 	movc	a,@a+dptr
      000083 FD               [12]  604 	mov	r5,a
      000084 7C 00            [12]  605 	mov	r4,#0x00
      000086 8D 82            [24]  606 	mov	dpl,r5
      000088 8C 83            [24]  607 	mov	dph,r4
      00008A 12r00r00         [24]  608 	lcall	_putchar
                                    609 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 05            [24]  610 	mov	ar5,r7
      00008F 53 05 0F         [24]  611 	anl	ar5,#0x0f
      000092 7C 00            [12]  612 	mov	r4,#0x00
      000094 ED               [12]  613 	mov	a,r5
      000095 24r00            [12]  614 	add	a,#_digits
      000097 F5 82            [12]  615 	mov	dpl,a
      000099 EC               [12]  616 	mov	a,r4
      00009A 34s00            [12]  617 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  618 	mov	dph,a
      00009E E4               [12]  619 	clr	a
      00009F 93               [24]  620 	movc	a,@a+dptr
      0000A0 FD               [12]  621 	mov	r5,a
      0000A1 7C 00            [12]  622 	mov	r4,#0x00
      0000A3 8D 82            [24]  623 	mov	dpl,r5
      0000A5 8C 83            [24]  624 	mov	dph,r4
      0000A7 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8E 04            [24]  627 	mov	ar4,r6
      0000AC EF               [12]  628 	mov	a,r7
      0000AD C4               [12]  629 	swap	a
      0000AE CC               [12]  630 	xch	a,r4
      0000AF C4               [12]  631 	swap	a
      0000B0 54 0F            [12]  632 	anl	a,#0x0f
      0000B2 6C               [12]  633 	xrl	a,r4
      0000B3 CC               [12]  634 	xch	a,r4
      0000B4 54 0F            [12]  635 	anl	a,#0x0f
      0000B6 CC               [12]  636 	xch	a,r4
      0000B7 6C               [12]  637 	xrl	a,r4
      0000B8 CC               [12]  638 	xch	a,r4
      0000B9 30 E3 02         [24]  639 	jnb	acc.3,00194$
      0000BC 44 F0            [12]  640 	orl	a,#0xf0
      0000BE                        641 00194$:
      0000BE 53 04 0F         [24]  642 	anl	ar4,#0x0f
      0000C1 7D 00            [12]  643 	mov	r5,#0x00
      0000C3 EC               [12]  644 	mov	a,r4
      0000C4 24r00            [12]  645 	add	a,#_digits
      0000C6 F5 82            [12]  646 	mov	dpl,a
      0000C8 ED               [12]  647 	mov	a,r5
      0000C9 34s00            [12]  648 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  649 	mov	dph,a
      0000CD E4               [12]  650 	clr	a
      0000CE 93               [24]  651 	movc	a,@a+dptr
      0000CF FD               [12]  652 	mov	r5,a
      0000D0 7C 00            [12]  653 	mov	r4,#0x00
      0000D2 8D 82            [24]  654 	mov	dpl,r5
      0000D4 8C 83            [24]  655 	mov	dph,r4
      0000D6 12r00r00         [24]  656 	lcall	_putchar
                                    657 ;	life.c:40: putchar(digits[a & 0xf]);
      0000D9 53 06 0F         [24]  658 	anl	ar6,#0x0f
      0000DC 7F 00            [12]  659 	mov	r7,#0x00
      0000DE EE               [12]  660 	mov	a,r6
      0000DF 24r00            [12]  661 	add	a,#_digits
      0000E1 F5 82            [12]  662 	mov	dpl,a
      0000E3 EF               [12]  663 	mov	a,r7
      0000E4 34s00            [12]  664 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  665 	mov	dph,a
      0000E8 E4               [12]  666 	clr	a
      0000E9 93               [24]  667 	movc	a,@a+dptr
      0000EA FF               [12]  668 	mov	r7,a
      0000EB 7E 00            [12]  669 	mov	r6,#0x00
      0000ED 8F 82            [24]  670 	mov	dpl,r7
      0000EF 8E 83            [24]  671 	mov	dph,r6
      0000F1 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:90: print16x(generation[0]);
      0000F4 90r0Cr12         [24]  674 	mov	dptr,#_generation
      0000F7 E0               [24]  675 	movx	a,@dptr
      0000F8 FE               [12]  676 	mov	r6,a
      0000F9 A3               [24]  677 	inc	dptr
      0000FA E0               [24]  678 	movx	a,@dptr
                                    679 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000FB FF               [12]  680 	mov	r7,a
      0000FC C4               [12]  681 	swap	a
      0000FD 54 0F            [12]  682 	anl	a,#0x0f
      0000FF 30 E3 02         [24]  683 	jnb	acc.3,00195$
      000102 44 F0            [12]  684 	orl	a,#0xf0
      000104                        685 00195$:
      000104 FC               [12]  686 	mov	r4,a
      000105 33               [12]  687 	rlc	a
      000106 95 E0            [12]  688 	subb	a,acc
      000108 53 04 0F         [24]  689 	anl	ar4,#0x0f
      00010B 7D 00            [12]  690 	mov	r5,#0x00
      00010D EC               [12]  691 	mov	a,r4
      00010E 24r00            [12]  692 	add	a,#_digits
      000110 F5 82            [12]  693 	mov	dpl,a
      000112 ED               [12]  694 	mov	a,r5
      000113 34s00            [12]  695 	addc	a,#(_digits >> 8)
      000115 F5 83            [12]  696 	mov	dph,a
      000117 E4               [12]  697 	clr	a
      000118 93               [24]  698 	movc	a,@a+dptr
      000119 FD               [12]  699 	mov	r5,a
      00011A 7C 00            [12]  700 	mov	r4,#0x00
      00011C 8D 82            [24]  701 	mov	dpl,r5
      00011E 8C 83            [24]  702 	mov	dph,r4
      000120 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000123 8F 05            [24]  705 	mov	ar5,r7
      000125 53 05 0F         [24]  706 	anl	ar5,#0x0f
      000128 7C 00            [12]  707 	mov	r4,#0x00
      00012A ED               [12]  708 	mov	a,r5
      00012B 24r00            [12]  709 	add	a,#_digits
      00012D F5 82            [12]  710 	mov	dpl,a
      00012F EC               [12]  711 	mov	a,r4
      000130 34s00            [12]  712 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  713 	mov	dph,a
      000134 E4               [12]  714 	clr	a
      000135 93               [24]  715 	movc	a,@a+dptr
      000136 FD               [12]  716 	mov	r5,a
      000137 7C 00            [12]  717 	mov	r4,#0x00
      000139 8D 82            [24]  718 	mov	dpl,r5
      00013B 8C 83            [24]  719 	mov	dph,r4
      00013D 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000140 8E 04            [24]  722 	mov	ar4,r6
      000142 EF               [12]  723 	mov	a,r7
      000143 C4               [12]  724 	swap	a
      000144 CC               [12]  725 	xch	a,r4
      000145 C4               [12]  726 	swap	a
      000146 54 0F            [12]  727 	anl	a,#0x0f
      000148 6C               [12]  728 	xrl	a,r4
      000149 CC               [12]  729 	xch	a,r4
      00014A 54 0F            [12]  730 	anl	a,#0x0f
      00014C CC               [12]  731 	xch	a,r4
      00014D 6C               [12]  732 	xrl	a,r4
      00014E CC               [12]  733 	xch	a,r4
      00014F 30 E3 02         [24]  734 	jnb	acc.3,00196$
      000152 44 F0            [12]  735 	orl	a,#0xf0
      000154                        736 00196$:
      000154 53 04 0F         [24]  737 	anl	ar4,#0x0f
      000157 7D 00            [12]  738 	mov	r5,#0x00
      000159 EC               [12]  739 	mov	a,r4
      00015A 24r00            [12]  740 	add	a,#_digits
      00015C F5 82            [12]  741 	mov	dpl,a
      00015E ED               [12]  742 	mov	a,r5
      00015F 34s00            [12]  743 	addc	a,#(_digits >> 8)
      000161 F5 83            [12]  744 	mov	dph,a
      000163 E4               [12]  745 	clr	a
      000164 93               [24]  746 	movc	a,@a+dptr
      000165 FD               [12]  747 	mov	r5,a
      000166 7C 00            [12]  748 	mov	r4,#0x00
      000168 8D 82            [24]  749 	mov	dpl,r5
      00016A 8C 83            [24]  750 	mov	dph,r4
      00016C 12r00r00         [24]  751 	lcall	_putchar
                                    752 ;	life.c:40: putchar(digits[a & 0xf]);
      00016F 53 06 0F         [24]  753 	anl	ar6,#0x0f
      000172 7F 00            [12]  754 	mov	r7,#0x00
      000174 EE               [12]  755 	mov	a,r6
      000175 24r00            [12]  756 	add	a,#_digits
      000177 F5 82            [12]  757 	mov	dpl,a
      000179 EF               [12]  758 	mov	a,r7
      00017A 34s00            [12]  759 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  760 	mov	dph,a
      00017E E4               [12]  761 	clr	a
      00017F 93               [24]  762 	movc	a,@a+dptr
      000180 FF               [12]  763 	mov	r7,a
      000181 7E 00            [12]  764 	mov	r6,#0x00
      000183 8F 82            [24]  765 	mov	dpl,r7
      000185 8E 83            [24]  766 	mov	dph,r6
      000187 12r00r00         [24]  767 	lcall	_putchar
                                    768 ;	life.c:99: printstr("\r\n");
      00018A 7Dr18            [12]  769 	mov	r5,#___str_1
      00018C 7Es00            [12]  770 	mov	r6,#(___str_1 >> 8)
      00018E 7F 80            [12]  771 	mov	r7,#0x80
                                    772 ;	life.c:48: return;
      000190                        773 00124$:
                                    774 ;	life.c:46: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  775 	mov	dpl,r5
      000192 8E 83            [24]  776 	mov	dph,r6
      000194 8F F0            [24]  777 	mov	b,r7
      000196 12r00r00         [24]  778 	lcall	__gptrget
      000199 FC               [12]  779 	mov	r4,a
      00019A 60 10            [24]  780 	jz	00114$
      00019C 7B 00            [12]  781 	mov	r3,#0x00
      00019E 8C 82            [24]  782 	mov	dpl,r4
      0001A0 8B 83            [24]  783 	mov	dph,r3
      0001A2 12r00r00         [24]  784 	lcall	_putchar
      0001A5 0D               [12]  785 	inc	r5
                                    786 ;	life.c:99: printstr("\r\n");
      0001A6 BD 00 E7         [24]  787 	cjne	r5,#0x00,00124$
      0001A9 0E               [12]  788 	inc	r6
      0001AA 80 E4            [24]  789 	sjmp	00124$
      0001AC                        790 00114$:
                                    791 ;	life.c:82: generation[0]++;
      0001AC 90r0Cr12         [24]  792 	mov	dptr,#_generation
      0001AF E0               [24]  793 	movx	a,@dptr
      0001B0 FE               [12]  794 	mov	r6,a
      0001B1 A3               [24]  795 	inc	dptr
      0001B2 E0               [24]  796 	movx	a,@dptr
      0001B3 FF               [12]  797 	mov	r7,a
      0001B4 0E               [12]  798 	inc	r6
      0001B5 BE 00 01         [24]  799 	cjne	r6,#0x00,00199$
      0001B8 0F               [12]  800 	inc	r7
      0001B9                        801 00199$:
      0001B9 90r0Cr12         [24]  802 	mov	dptr,#_generation
      0001BC EE               [12]  803 	mov	a,r6
      0001BD F0               [24]  804 	movx	@dptr,a
      0001BE EF               [12]  805 	mov	a,r7
      0001BF A3               [24]  806 	inc	dptr
      0001C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	life.c:83: if (!generation[0]) generation[1]++;
      0001C1 EE               [12]  809 	mov	a,r6
      0001C2 4F               [12]  810 	orl	a,r7
      0001C3 70 15            [24]  811 	jnz	00102$
      0001C5 90r0Cr14         [24]  812 	mov	dptr,#(_generation + 0x0002)
      0001C8 E0               [24]  813 	movx	a,@dptr
      0001C9 FE               [12]  814 	mov	r6,a
      0001CA A3               [24]  815 	inc	dptr
      0001CB E0               [24]  816 	movx	a,@dptr
      0001CC FF               [12]  817 	mov	r7,a
      0001CD 0E               [12]  818 	inc	r6
      0001CE BE 00 01         [24]  819 	cjne	r6,#0x00,00201$
      0001D1 0F               [12]  820 	inc	r7
      0001D2                        821 00201$:
      0001D2 90r0Cr14         [24]  822 	mov	dptr,#(_generation + 0x0002)
      0001D5 EE               [12]  823 	mov	a,r6
      0001D6 F0               [24]  824 	movx	@dptr,a
      0001D7 EF               [12]  825 	mov	a,r7
      0001D8 A3               [24]  826 	inc	dptr
      0001D9 F0               [24]  827 	movx	@dptr,a
                                    828 ;	life.c:100: updategen();
      0001DA                        829 00102$:
                                    830 ;	life.c:103: for (x = 0; x < W; x++) {
      0001DA 90r0Cr02         [24]  831 	mov	dptr,#_x
      0001DD E4               [12]  832 	clr	a
      0001DE F0               [24]  833 	movx	@dptr,a
      0001DF A3               [24]  834 	inc	dptr
      0001E0 F0               [24]  835 	movx	@dptr,a
      0001E1                        836 00131$:
                                    837 ;	life.c:104: for (y = 0; y < H; y++)
      0001E1 90r0Cr04         [24]  838 	mov	dptr,#_y
      0001E4 E4               [12]  839 	clr	a
      0001E5 F0               [24]  840 	movx	@dptr,a
      0001E6 A3               [24]  841 	inc	dptr
      0001E7 F0               [24]  842 	movx	@dptr,a
      0001E8                        843 00126$:
                                    844 ;	life.c:105: if (u[A2D(W, y, x)]) {
      0001E8 90r0Cr04         [24]  845 	mov	dptr,#_y
      0001EB E0               [24]  846 	movx	a,@dptr
      0001EC FE               [12]  847 	mov	r6,a
      0001ED A3               [24]  848 	inc	dptr
      0001EE E0               [24]  849 	movx	a,@dptr
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CE               [12]  853 	xch	a,r6
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CE               [12]  856 	xch	a,r6
      0001F7 6E               [12]  857 	xrl	a,r6
      0001F8 CE               [12]  858 	xch	a,r6
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CE               [12]  860 	xch	a,r6
      0001FC 6E               [12]  861 	xrl	a,r6
      0001FD FF               [12]  862 	mov	r7,a
      0001FE 90r0Cr02         [24]  863 	mov	dptr,#_x
      000201 E0               [24]  864 	movx	a,@dptr
      000202 FC               [12]  865 	mov	r4,a
      000203 A3               [24]  866 	inc	dptr
      000204 E0               [24]  867 	movx	a,@dptr
      000205 FD               [12]  868 	mov	r5,a
      000206 EC               [12]  869 	mov	a,r4
      000207 2E               [12]  870 	add	a,r6
      000208 FE               [12]  871 	mov	r6,a
      000209 ED               [12]  872 	mov	a,r5
      00020A 3F               [12]  873 	addc	a,r7
      00020B FF               [12]  874 	mov	r7,a
      00020C EE               [12]  875 	mov	a,r6
      00020D 24r02            [12]  876 	add	a,#_u
      00020F FE               [12]  877 	mov	r6,a
      000210 EF               [12]  878 	mov	a,r7
      000211 34s04            [12]  879 	addc	a,#(_u >> 8)
      000213 FF               [12]  880 	mov	r7,a
      000214 8E 82            [24]  881 	mov	dpl,r6
      000216 8F 83            [24]  882 	mov	dph,r7
      000218 E0               [24]  883 	movx	a,@dptr
      000219 60 0E            [24]  884 	jz	00104$
                                    885 ;	life.c:106: putchar('['); putchar(']');
      00021B 90 00 5B         [24]  886 	mov	dptr,#0x005b
      00021E 12r00r00         [24]  887 	lcall	_putchar
      000221 90 00 5D         [24]  888 	mov	dptr,#0x005d
      000224 12r00r00         [24]  889 	lcall	_putchar
      000227 80 0C            [24]  890 	sjmp	00127$
      000229                        891 00104$:
                                    892 ;	life.c:108: putchar('#'); putchar('#');
      000229 90 00 23         [24]  893 	mov	dptr,#0x0023
      00022C 12r00r00         [24]  894 	lcall	_putchar
      00022F 90 00 23         [24]  895 	mov	dptr,#0x0023
      000232 12r00r00         [24]  896 	lcall	_putchar
      000235                        897 00127$:
                                    898 ;	life.c:104: for (y = 0; y < H; y++)
      000235 90r0Cr04         [24]  899 	mov	dptr,#_y
      000238 E0               [24]  900 	movx	a,@dptr
      000239 24 01            [12]  901 	add	a,#0x01
      00023B F0               [24]  902 	movx	@dptr,a
      00023C A3               [24]  903 	inc	dptr
      00023D E0               [24]  904 	movx	a,@dptr
      00023E 34 00            [12]  905 	addc	a,#0x00
      000240 F0               [24]  906 	movx	@dptr,a
      000241 90r0Cr04         [24]  907 	mov	dptr,#_y
      000244 E0               [24]  908 	movx	a,@dptr
      000245 FE               [12]  909 	mov	r6,a
      000246 A3               [24]  910 	inc	dptr
      000247 E0               [24]  911 	movx	a,@dptr
      000248 FF               [12]  912 	mov	r7,a
      000249 C3               [12]  913 	clr	c
      00024A EE               [12]  914 	mov	a,r6
      00024B 94 20            [12]  915 	subb	a,#0x20
      00024D EF               [12]  916 	mov	a,r7
      00024E 64 80            [12]  917 	xrl	a,#0x80
      000250 94 80            [12]  918 	subb	a,#0x80
      000252 40 94            [24]  919 	jc	00126$
                                    920 ;	life.c:110: printstr("\r\n");
      000254 7Dr18            [12]  921 	mov	r5,#___str_1
      000256 7Es00            [12]  922 	mov	r6,#(___str_1 >> 8)
      000258 7F 80            [12]  923 	mov	r7,#0x80
                                    924 ;	life.c:48: return;
      00025A                        925 00129$:
                                    926 ;	life.c:46: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  927 	mov	dpl,r5
      00025C 8E 83            [24]  928 	mov	dph,r6
      00025E 8F F0            [24]  929 	mov	b,r7
      000260 12r00r00         [24]  930 	lcall	__gptrget
      000263 FC               [12]  931 	mov	r4,a
      000264 60 10            [24]  932 	jz	00119$
      000266 7B 00            [12]  933 	mov	r3,#0x00
      000268 8C 82            [24]  934 	mov	dpl,r4
      00026A 8B 83            [24]  935 	mov	dph,r3
      00026C 12r00r00         [24]  936 	lcall	_putchar
      00026F 0D               [12]  937 	inc	r5
                                    938 ;	life.c:110: printstr("\r\n");
      000270 BD 00 E7         [24]  939 	cjne	r5,#0x00,00129$
      000273 0E               [12]  940 	inc	r6
      000274 80 E4            [24]  941 	sjmp	00129$
      000276                        942 00119$:
                                    943 ;	life.c:103: for (x = 0; x < W; x++) {
      000276 90r0Cr02         [24]  944 	mov	dptr,#_x
      000279 E0               [24]  945 	movx	a,@dptr
      00027A 24 01            [12]  946 	add	a,#0x01
      00027C F0               [24]  947 	movx	@dptr,a
      00027D A3               [24]  948 	inc	dptr
      00027E E0               [24]  949 	movx	a,@dptr
      00027F 34 00            [12]  950 	addc	a,#0x00
      000281 F0               [24]  951 	movx	@dptr,a
      000282 90r0Cr02         [24]  952 	mov	dptr,#_x
      000285 E0               [24]  953 	movx	a,@dptr
      000286 FE               [12]  954 	mov	r6,a
      000287 A3               [24]  955 	inc	dptr
      000288 E0               [24]  956 	movx	a,@dptr
      000289 FF               [12]  957 	mov	r7,a
      00028A C3               [12]  958 	clr	c
      00028B EE               [12]  959 	mov	a,r6
      00028C 94 20            [12]  960 	subb	a,#0x20
      00028E EF               [12]  961 	mov	a,r7
      00028F 64 80            [12]  962 	xrl	a,#0x80
      000291 94 80            [12]  963 	subb	a,#0x80
      000293 50 03            [24]  964 	jnc	00206$
      000295 02r01rE1         [24]  965 	ljmp	00131$
      000298                        966 00206$:
                                    967 ;	life.c:113: return;
                                    968 ;	life.c:114: }
      000298 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'main'
                                    972 ;------------------------------------------------------------
                                    973 ;__2621440020              Allocated to registers 
                                    974 ;s                         Allocated to registers r5 r6 r7 
                                    975 ;__1310720013              Allocated to registers 
                                    976 ;s                         Allocated to registers r5 r6 r7 
                                    977 ;__1310720015              Allocated to registers r6 r7 
                                    978 ;a                         Allocated to registers r4 r5 
                                    979 ;__1310720017              Allocated to registers 
                                    980 ;s                         Allocated to registers r5 r6 r7 
                                    981 ;__2621440023              Allocated to registers 
                                    982 ;s                         Allocated to registers r5 r6 r7 
                                    983 ;__4587520027              Allocated to registers 
                                    984 ;s                         Allocated to registers r5 r6 r7 
                                    985 ;__3276800029              Allocated to registers 
                                    986 ;s                         Allocated to registers r5 r6 r7 
                                    987 ;__1310720031              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;sloc0                     Allocated to stack - _bp +1
                                    990 ;------------------------------------------------------------
                                    991 ;	life.c:181: void main(void) {
                                    992 ;	-----------------------------------------
                                    993 ;	 function main
                                    994 ;	-----------------------------------------
      000299                        995 _main:
      000299 C0*00            [24]  996 	push	_bp
      00029B 85 81*00         [24]  997 	mov	_bp,sp
      00029E 05 81            [12]  998 	inc	sp
      0002A0 05 81            [12]  999 	inc	sp
                                   1000 ;	life.c:182: IT0 = 1;
                                   1001 ;	assignBit
      0002A2 D2 88            [12] 1002 	setb	_IT0
                                   1003 ;	life.c:183: IT1 = 1;
                                   1004 ;	assignBit
      0002A4 D2 8A            [12] 1005 	setb	_IT1
                                   1006 ;	life.c:184: EX0 = 1;
                                   1007 ;	assignBit
      0002A6 D2 A8            [12] 1008 	setb	_EX0
                                   1009 ;	life.c:185: EX1 = 1;
                                   1010 ;	assignBit
      0002A8 D2 AA            [12] 1011 	setb	_EX1
                                   1012 ;	life.c:186: EA = 1;
                                   1013 ;	assignBit
      0002AA D2 AF            [12] 1014 	setb	_EA
                                   1015 ;	life.c:188: for (i0 = 0; !i0; ) {
      0002AC 90r00r00         [24] 1016 	mov	dptr,#_i0
      0002AF E4               [12] 1017 	clr	a
      0002B0 F0               [24] 1018 	movx	@dptr,a
      0002B1                       1019 00189$:
                                   1020 ;	life.c:117: memset(u, 0, sizeof (u));
      0002B1 E4               [12] 1021 	clr	a
      0002B2 C0 E0            [24] 1022 	push	acc
      0002B4 74 04            [12] 1023 	mov	a,#0x04
      0002B6 C0 E0            [24] 1024 	push	acc
      0002B8 E4               [12] 1025 	clr	a
      0002B9 C0 E0            [24] 1026 	push	acc
      0002BB 90r04r02         [24] 1027 	mov	dptr,#_u
      0002BE 75 F0 00         [24] 1028 	mov	b,#0x00
      0002C1 12r00r00         [24] 1029 	lcall	_memset
      0002C4 15 81            [12] 1030 	dec	sp
      0002C6 15 81            [12] 1031 	dec	sp
      0002C8 15 81            [12] 1032 	dec	sp
                                   1033 ;	life.c:118: memset(pu, 0, sizeof (pu));
      0002CA E4               [12] 1034 	clr	a
      0002CB C0 E0            [24] 1035 	push	acc
      0002CD 74 04            [12] 1036 	mov	a,#0x04
      0002CF C0 E0            [24] 1037 	push	acc
      0002D1 E4               [12] 1038 	clr	a
      0002D2 C0 E0            [24] 1039 	push	acc
      0002D4 90r00r02         [24] 1040 	mov	dptr,#_pu
      0002D7 75 F0 00         [24] 1041 	mov	b,#0x00
      0002DA 12r00r00         [24] 1042 	lcall	_memset
      0002DD 15 81            [12] 1043 	dec	sp
      0002DF 15 81            [12] 1044 	dec	sp
      0002E1 15 81            [12] 1045 	dec	sp
                                   1046 ;	life.c:190: printstr("\033[2J\033[mINIT\r\n");
      0002E3 7Dr26            [12] 1047 	mov	r5,#___str_4
      0002E5 7Es00            [12] 1048 	mov	r6,#(___str_4 >> 8)
      0002E7 7F 80            [12] 1049 	mov	r7,#0x80
                                   1050 ;	life.c:48: return;
      0002E9                       1051 00154$:
                                   1052 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002E9 8D 82            [24] 1053 	mov	dpl,r5
      0002EB 8E 83            [24] 1054 	mov	dph,r6
      0002ED 8F F0            [24] 1055 	mov	b,r7
      0002EF 12r00r00         [24] 1056 	lcall	__gptrget
      0002F2 FC               [12] 1057 	mov	r4,a
      0002F3 60 10            [24] 1058 	jz	00110$
      0002F5 7B 00            [12] 1059 	mov	r3,#0x00
      0002F7 8C 82            [24] 1060 	mov	dpl,r4
      0002F9 8B 83            [24] 1061 	mov	dph,r3
      0002FB 12r00r00         [24] 1062 	lcall	_putchar
      0002FE 0D               [12] 1063 	inc	r5
                                   1064 ;	life.c:190: printstr("\033[2J\033[mINIT\r\n");
      0002FF BD 00 E7         [24] 1065 	cjne	r5,#0x00,00154$
      000302 0E               [12] 1066 	inc	r6
      000303 80 E4            [24] 1067 	sjmp	00154$
      000305                       1068 00110$:
                                   1069 ;	life.c:191: (void)getchar();
      000305 12r00r05         [24] 1070 	lcall	_getchar
                                   1071 ;	life.c:124: j = 0;
      000308 90r0Cr0A         [24] 1072 	mov	dptr,#_j
      00030B E4               [12] 1073 	clr	a
      00030C F0               [24] 1074 	movx	@dptr,a
      00030D A3               [24] 1075 	inc	dptr
      00030E F0               [24] 1076 	movx	@dptr,a
                                   1077 ;	life.c:126: printstr("LOAD <");
      00030F 7Dr1B            [12] 1078 	mov	r5,#___str_2
      000311 7Es00            [12] 1079 	mov	r6,#(___str_2 >> 8)
      000313 7F 80            [12] 1080 	mov	r7,#0x80
                                   1081 ;	life.c:48: return;
      000315                       1082 00157$:
                                   1083 ;	life.c:46: for (; *s; s++) putchar(*s);
      000315 8D 82            [24] 1084 	mov	dpl,r5
      000317 8E 83            [24] 1085 	mov	dph,r6
      000319 8F F0            [24] 1086 	mov	b,r7
      00031B 12r00r00         [24] 1087 	lcall	__gptrget
      00031E FC               [12] 1088 	mov	r4,a
      00031F 60 10            [24] 1089 	jz	00112$
      000321 7B 00            [12] 1090 	mov	r3,#0x00
      000323 8C 82            [24] 1091 	mov	dpl,r4
      000325 8B 83            [24] 1092 	mov	dph,r3
      000327 12r00r00         [24] 1093 	lcall	_putchar
      00032A 0D               [12] 1094 	inc	r5
                                   1095 ;	life.c:126: printstr("LOAD <");
      00032B BD 00 E7         [24] 1096 	cjne	r5,#0x00,00157$
      00032E 0E               [12] 1097 	inc	r6
      00032F 80 E4            [24] 1098 	sjmp	00157$
      000331                       1099 00112$:
                                   1100 ;	life.c:128: for (y = 0; y < H; y++)
      000331 90r0Cr04         [24] 1101 	mov	dptr,#_y
      000334 E4               [12] 1102 	clr	a
      000335 F0               [24] 1103 	movx	@dptr,a
      000336 A3               [24] 1104 	inc	dptr
      000337 F0               [24] 1105 	movx	@dptr,a
      000338                       1106 00161$:
                                   1107 ;	life.c:129: for (x = 0; x < W; x++) {
      000338 90r0Cr02         [24] 1108 	mov	dptr,#_x
      00033B E4               [12] 1109 	clr	a
      00033C F0               [24] 1110 	movx	@dptr,a
      00033D A3               [24] 1111 	inc	dptr
      00033E F0               [24] 1112 	movx	@dptr,a
      00033F                       1113 00159$:
                                   1114 ;	life.c:130: c = getchar();
      00033F 12r00r05         [24] 1115 	lcall	_getchar
      000342 AE 82            [24] 1116 	mov	r6,dpl
      000344 AF 83            [24] 1117 	mov	r7,dph
      000346 90r0Cr0C         [24] 1118 	mov	dptr,#_c
      000349 EE               [12] 1119 	mov	a,r6
      00034A F0               [24] 1120 	movx	@dptr,a
      00034B EF               [12] 1121 	mov	a,r7
      00034C A3               [24] 1122 	inc	dptr
      00034D F0               [24] 1123 	movx	@dptr,a
                                   1124 ;	life.c:131: if (c == (int)'0') {
      00034E BE 30 41         [24] 1125 	cjne	r6,#0x30,00119$
      000351 BF 00 3E         [24] 1126 	cjne	r7,#0x00,00119$
                                   1127 ;	life.c:132: u[A2D(W, y, x)] = 0;
      000354 90r0Cr04         [24] 1128 	mov	dptr,#_y
      000357 E0               [24] 1129 	movx	a,@dptr
      000358 FC               [12] 1130 	mov	r4,a
      000359 A3               [24] 1131 	inc	dptr
      00035A E0               [24] 1132 	movx	a,@dptr
      00035B C4               [12] 1133 	swap	a
      00035C 23               [12] 1134 	rl	a
      00035D 54 E0            [12] 1135 	anl	a,#0xe0
      00035F CC               [12] 1136 	xch	a,r4
      000360 C4               [12] 1137 	swap	a
      000361 23               [12] 1138 	rl	a
      000362 CC               [12] 1139 	xch	a,r4
      000363 6C               [12] 1140 	xrl	a,r4
      000364 CC               [12] 1141 	xch	a,r4
      000365 54 E0            [12] 1142 	anl	a,#0xe0
      000367 CC               [12] 1143 	xch	a,r4
      000368 6C               [12] 1144 	xrl	a,r4
      000369 FD               [12] 1145 	mov	r5,a
      00036A 90r0Cr02         [24] 1146 	mov	dptr,#_x
      00036D E0               [24] 1147 	movx	a,@dptr
      00036E FA               [12] 1148 	mov	r2,a
      00036F A3               [24] 1149 	inc	dptr
      000370 E0               [24] 1150 	movx	a,@dptr
      000371 FB               [12] 1151 	mov	r3,a
      000372 EA               [12] 1152 	mov	a,r2
      000373 2C               [12] 1153 	add	a,r4
      000374 FC               [12] 1154 	mov	r4,a
      000375 EB               [12] 1155 	mov	a,r3
      000376 3D               [12] 1156 	addc	a,r5
      000377 FD               [12] 1157 	mov	r5,a
      000378 EC               [12] 1158 	mov	a,r4
      000379 24r02            [12] 1159 	add	a,#_u
      00037B F5 82            [12] 1160 	mov	dpl,a
      00037D ED               [12] 1161 	mov	a,r5
      00037E 34s04            [12] 1162 	addc	a,#(_u >> 8)
      000380 F5 83            [12] 1163 	mov	dph,a
      000382 E4               [12] 1164 	clr	a
      000383 F0               [24] 1165 	movx	@dptr,a
                                   1166 ;	life.c:133: j++;
      000384 90r0Cr0A         [24] 1167 	mov	dptr,#_j
      000387 E0               [24] 1168 	movx	a,@dptr
      000388 24 01            [12] 1169 	add	a,#0x01
      00038A F0               [24] 1170 	movx	@dptr,a
      00038B A3               [24] 1171 	inc	dptr
      00038C E0               [24] 1172 	movx	a,@dptr
      00038D 34 00            [12] 1173 	addc	a,#0x00
      00038F F0               [24] 1174 	movx	@dptr,a
      000390 80 4D            [24] 1175 	sjmp	00160$
      000392                       1176 00119$:
                                   1177 ;	life.c:134: } else if (c == (int)'1') {
      000392 BE 31 42         [24] 1178 	cjne	r6,#0x31,00117$
      000395 BF 00 3F         [24] 1179 	cjne	r7,#0x00,00117$
                                   1180 ;	life.c:135: u[A2D(W, y, x)] = 1;
      000398 90r0Cr04         [24] 1181 	mov	dptr,#_y
      00039B E0               [24] 1182 	movx	a,@dptr
      00039C FC               [12] 1183 	mov	r4,a
      00039D A3               [24] 1184 	inc	dptr
      00039E E0               [24] 1185 	movx	a,@dptr
      00039F C4               [12] 1186 	swap	a
      0003A0 23               [12] 1187 	rl	a
      0003A1 54 E0            [12] 1188 	anl	a,#0xe0
      0003A3 CC               [12] 1189 	xch	a,r4
      0003A4 C4               [12] 1190 	swap	a
      0003A5 23               [12] 1191 	rl	a
      0003A6 CC               [12] 1192 	xch	a,r4
      0003A7 6C               [12] 1193 	xrl	a,r4
      0003A8 CC               [12] 1194 	xch	a,r4
      0003A9 54 E0            [12] 1195 	anl	a,#0xe0
      0003AB CC               [12] 1196 	xch	a,r4
      0003AC 6C               [12] 1197 	xrl	a,r4
      0003AD FD               [12] 1198 	mov	r5,a
      0003AE 90r0Cr02         [24] 1199 	mov	dptr,#_x
      0003B1 E0               [24] 1200 	movx	a,@dptr
      0003B2 FA               [12] 1201 	mov	r2,a
      0003B3 A3               [24] 1202 	inc	dptr
      0003B4 E0               [24] 1203 	movx	a,@dptr
      0003B5 FB               [12] 1204 	mov	r3,a
      0003B6 EA               [12] 1205 	mov	a,r2
      0003B7 2C               [12] 1206 	add	a,r4
      0003B8 FC               [12] 1207 	mov	r4,a
      0003B9 EB               [12] 1208 	mov	a,r3
      0003BA 3D               [12] 1209 	addc	a,r5
      0003BB FD               [12] 1210 	mov	r5,a
      0003BC EC               [12] 1211 	mov	a,r4
      0003BD 24r02            [12] 1212 	add	a,#_u
      0003BF F5 82            [12] 1213 	mov	dpl,a
      0003C1 ED               [12] 1214 	mov	a,r5
      0003C2 34s04            [12] 1215 	addc	a,#(_u >> 8)
      0003C4 F5 83            [12] 1216 	mov	dph,a
      0003C6 74 01            [12] 1217 	mov	a,#0x01
      0003C8 F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	life.c:136: j++;
      0003C9 90r0Cr0A         [24] 1220 	mov	dptr,#_j
      0003CC E0               [24] 1221 	movx	a,@dptr
      0003CD 24 01            [12] 1222 	add	a,#0x01
      0003CF F0               [24] 1223 	movx	@dptr,a
      0003D0 A3               [24] 1224 	inc	dptr
      0003D1 E0               [24] 1225 	movx	a,@dptr
      0003D2 34 00            [12] 1226 	addc	a,#0x00
      0003D4 F0               [24] 1227 	movx	@dptr,a
      0003D5 80 08            [24] 1228 	sjmp	00160$
      0003D7                       1229 00117$:
                                   1230 ;	life.c:137: } else if (c == (int)'#') goto out;
      0003D7 BE 23 05         [24] 1231 	cjne	r6,#0x23,00373$
      0003DA BF 00 02         [24] 1232 	cjne	r7,#0x00,00373$
      0003DD 80 44            [24] 1233 	sjmp	00130$
      0003DF                       1234 00373$:
      0003DF                       1235 00160$:
                                   1236 ;	life.c:129: for (x = 0; x < W; x++) {
      0003DF 90r0Cr02         [24] 1237 	mov	dptr,#_x
      0003E2 E0               [24] 1238 	movx	a,@dptr
      0003E3 24 01            [12] 1239 	add	a,#0x01
      0003E5 F0               [24] 1240 	movx	@dptr,a
      0003E6 A3               [24] 1241 	inc	dptr
      0003E7 E0               [24] 1242 	movx	a,@dptr
      0003E8 34 00            [12] 1243 	addc	a,#0x00
      0003EA F0               [24] 1244 	movx	@dptr,a
      0003EB 90r0Cr02         [24] 1245 	mov	dptr,#_x
      0003EE E0               [24] 1246 	movx	a,@dptr
      0003EF FE               [12] 1247 	mov	r6,a
      0003F0 A3               [24] 1248 	inc	dptr
      0003F1 E0               [24] 1249 	movx	a,@dptr
      0003F2 FF               [12] 1250 	mov	r7,a
      0003F3 C3               [12] 1251 	clr	c
      0003F4 EE               [12] 1252 	mov	a,r6
      0003F5 94 20            [12] 1253 	subb	a,#0x20
      0003F7 EF               [12] 1254 	mov	a,r7
      0003F8 64 80            [12] 1255 	xrl	a,#0x80
      0003FA 94 80            [12] 1256 	subb	a,#0x80
      0003FC 50 03            [24] 1257 	jnc	00374$
      0003FE 02r03r3F         [24] 1258 	ljmp	00159$
      000401                       1259 00374$:
                                   1260 ;	life.c:128: for (y = 0; y < H; y++)
      000401 90r0Cr04         [24] 1261 	mov	dptr,#_y
      000404 E0               [24] 1262 	movx	a,@dptr
      000405 24 01            [12] 1263 	add	a,#0x01
      000407 F0               [24] 1264 	movx	@dptr,a
      000408 A3               [24] 1265 	inc	dptr
      000409 E0               [24] 1266 	movx	a,@dptr
      00040A 34 00            [12] 1267 	addc	a,#0x00
      00040C F0               [24] 1268 	movx	@dptr,a
      00040D 90r0Cr04         [24] 1269 	mov	dptr,#_y
      000410 E0               [24] 1270 	movx	a,@dptr
      000411 FE               [12] 1271 	mov	r6,a
      000412 A3               [24] 1272 	inc	dptr
      000413 E0               [24] 1273 	movx	a,@dptr
      000414 FF               [12] 1274 	mov	r7,a
      000415 C3               [12] 1275 	clr	c
      000416 EE               [12] 1276 	mov	a,r6
      000417 94 20            [12] 1277 	subb	a,#0x20
      000419 EF               [12] 1278 	mov	a,r7
      00041A 64 80            [12] 1279 	xrl	a,#0x80
      00041C 94 80            [12] 1280 	subb	a,#0x80
      00041E 50 03            [24] 1281 	jnc	00375$
      000420 02r03r38         [24] 1282 	ljmp	00161$
      000423                       1283 00375$:
                                   1284 ;	life.c:140: out:
      000423                       1285 00130$:
                                   1286 ;	life.c:141: if (c != (int)'#')
      000423 90r0Cr0C         [24] 1287 	mov	dptr,#_c
      000426 E0               [24] 1288 	movx	a,@dptr
      000427 FE               [12] 1289 	mov	r6,a
      000428 A3               [24] 1290 	inc	dptr
      000429 E0               [24] 1291 	movx	a,@dptr
      00042A FF               [12] 1292 	mov	r7,a
      00042B BE 23 05         [24] 1293 	cjne	r6,#0x23,00376$
      00042E BF 00 02         [24] 1294 	cjne	r7,#0x00,00376$
      000431 80 15            [24] 1295 	sjmp	00129$
      000433                       1296 00376$:
                                   1297 ;	life.c:142: while (1) {
      000433                       1298 00126$:
                                   1299 ;	life.c:143: c = getchar();
      000433 12r00r05         [24] 1300 	lcall	_getchar
      000436 AE 82            [24] 1301 	mov	r6,dpl
      000438 AF 83            [24] 1302 	mov	r7,dph
      00043A 90r0Cr0C         [24] 1303 	mov	dptr,#_c
      00043D EE               [12] 1304 	mov	a,r6
      00043E F0               [24] 1305 	movx	@dptr,a
      00043F EF               [12] 1306 	mov	a,r7
      000440 A3               [24] 1307 	inc	dptr
      000441 F0               [24] 1308 	movx	@dptr,a
                                   1309 ;	life.c:144: if (c == (int)'#') break;
      000442 BE 23 EE         [24] 1310 	cjne	r6,#0x23,00126$
      000445 BF 00 EB         [24] 1311 	cjne	r7,#0x00,00126$
      000448                       1312 00129$:
                                   1313 ;	life.c:146: print16x(j);
      000448 90r0Cr0A         [24] 1314 	mov	dptr,#_j
      00044B E0               [24] 1315 	movx	a,@dptr
      00044C FE               [12] 1316 	mov	r6,a
      00044D A3               [24] 1317 	inc	dptr
      00044E E0               [24] 1318 	movx	a,@dptr
                                   1319 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      00044F 8E 04            [24] 1320 	mov	ar4,r6
      000451 FD               [12] 1321 	mov	r5,a
      000452 C4               [12] 1322 	swap	a
      000453 54 0F            [12] 1323 	anl	a,#0x0f
      000455 30 E3 02         [24] 1324 	jnb	acc.3,00379$
      000458 44 F0            [12] 1325 	orl	a,#0xf0
      00045A                       1326 00379$:
      00045A FE               [12] 1327 	mov	r6,a
      00045B 33               [12] 1328 	rlc	a
      00045C 95 E0            [12] 1329 	subb	a,acc
      00045E 53 06 0F         [24] 1330 	anl	ar6,#0x0f
      000461 7F 00            [12] 1331 	mov	r7,#0x00
      000463 EE               [12] 1332 	mov	a,r6
      000464 24r00            [12] 1333 	add	a,#_digits
      000466 F5 82            [12] 1334 	mov	dpl,a
      000468 EF               [12] 1335 	mov	a,r7
      000469 34s00            [12] 1336 	addc	a,#(_digits >> 8)
      00046B F5 83            [12] 1337 	mov	dph,a
      00046D E4               [12] 1338 	clr	a
      00046E 93               [24] 1339 	movc	a,@a+dptr
      00046F FF               [12] 1340 	mov	r7,a
      000470 7E 00            [12] 1341 	mov	r6,#0x00
      000472 8F 82            [24] 1342 	mov	dpl,r7
      000474 8E 83            [24] 1343 	mov	dph,r6
      000476 12r00r00         [24] 1344 	lcall	_putchar
                                   1345 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000479 8D 07            [24] 1346 	mov	ar7,r5
      00047B 53 07 0F         [24] 1347 	anl	ar7,#0x0f
      00047E 7E 00            [12] 1348 	mov	r6,#0x00
      000480 EF               [12] 1349 	mov	a,r7
      000481 24r00            [12] 1350 	add	a,#_digits
      000483 F5 82            [12] 1351 	mov	dpl,a
      000485 EE               [12] 1352 	mov	a,r6
      000486 34s00            [12] 1353 	addc	a,#(_digits >> 8)
      000488 F5 83            [12] 1354 	mov	dph,a
      00048A E4               [12] 1355 	clr	a
      00048B 93               [24] 1356 	movc	a,@a+dptr
      00048C FF               [12] 1357 	mov	r7,a
      00048D 7E 00            [12] 1358 	mov	r6,#0x00
      00048F 8F 82            [24] 1359 	mov	dpl,r7
      000491 8E 83            [24] 1360 	mov	dph,r6
      000493 12r00r00         [24] 1361 	lcall	_putchar
                                   1362 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000496 8C 06            [24] 1363 	mov	ar6,r4
      000498 ED               [12] 1364 	mov	a,r5
      000499 C4               [12] 1365 	swap	a
      00049A CE               [12] 1366 	xch	a,r6
      00049B C4               [12] 1367 	swap	a
      00049C 54 0F            [12] 1368 	anl	a,#0x0f
      00049E 6E               [12] 1369 	xrl	a,r6
      00049F CE               [12] 1370 	xch	a,r6
      0004A0 54 0F            [12] 1371 	anl	a,#0x0f
      0004A2 CE               [12] 1372 	xch	a,r6
      0004A3 6E               [12] 1373 	xrl	a,r6
      0004A4 CE               [12] 1374 	xch	a,r6
      0004A5 30 E3 02         [24] 1375 	jnb	acc.3,00380$
      0004A8 44 F0            [12] 1376 	orl	a,#0xf0
      0004AA                       1377 00380$:
      0004AA 53 06 0F         [24] 1378 	anl	ar6,#0x0f
      0004AD 7F 00            [12] 1379 	mov	r7,#0x00
      0004AF EE               [12] 1380 	mov	a,r6
      0004B0 24r00            [12] 1381 	add	a,#_digits
      0004B2 F5 82            [12] 1382 	mov	dpl,a
      0004B4 EF               [12] 1383 	mov	a,r7
      0004B5 34s00            [12] 1384 	addc	a,#(_digits >> 8)
      0004B7 F5 83            [12] 1385 	mov	dph,a
      0004B9 E4               [12] 1386 	clr	a
      0004BA 93               [24] 1387 	movc	a,@a+dptr
      0004BB FF               [12] 1388 	mov	r7,a
      0004BC 7E 00            [12] 1389 	mov	r6,#0x00
      0004BE 8F 82            [24] 1390 	mov	dpl,r7
      0004C0 8E 83            [24] 1391 	mov	dph,r6
      0004C2 12r00r00         [24] 1392 	lcall	_putchar
                                   1393 ;	life.c:40: putchar(digits[a & 0xf]);
      0004C5 53 04 0F         [24] 1394 	anl	ar4,#0x0f
      0004C8 7D 00            [12] 1395 	mov	r5,#0x00
      0004CA EC               [12] 1396 	mov	a,r4
      0004CB 24r00            [12] 1397 	add	a,#_digits
      0004CD F5 82            [12] 1398 	mov	dpl,a
      0004CF ED               [12] 1399 	mov	a,r5
      0004D0 34s00            [12] 1400 	addc	a,#(_digits >> 8)
      0004D2 F5 83            [12] 1401 	mov	dph,a
      0004D4 E4               [12] 1402 	clr	a
      0004D5 93               [24] 1403 	movc	a,@a+dptr
      0004D6 FF               [12] 1404 	mov	r7,a
      0004D7 7E 00            [12] 1405 	mov	r6,#0x00
      0004D9 8F 82            [24] 1406 	mov	dpl,r7
      0004DB 8E 83            [24] 1407 	mov	dph,r6
      0004DD 12r00r00         [24] 1408 	lcall	_putchar
                                   1409 ;	life.c:147: printstr(">\r\n");
      0004E0 7Dr22            [12] 1410 	mov	r5,#___str_3
      0004E2 7Es00            [12] 1411 	mov	r6,#(___str_3 >> 8)
      0004E4 7F 80            [12] 1412 	mov	r7,#0x80
                                   1413 ;	life.c:48: return;
      0004E6                       1414 00164$:
                                   1415 ;	life.c:46: for (; *s; s++) putchar(*s);
      0004E6 8D 82            [24] 1416 	mov	dpl,r5
      0004E8 8E 83            [24] 1417 	mov	dph,r6
      0004EA 8F F0            [24] 1418 	mov	b,r7
      0004EC 12r00r00         [24] 1419 	lcall	__gptrget
      0004EF FC               [12] 1420 	mov	r4,a
      0004F0 60 10            [24] 1421 	jz	00133$
      0004F2 7B 00            [12] 1422 	mov	r3,#0x00
      0004F4 8C 82            [24] 1423 	mov	dpl,r4
      0004F6 8B 83            [24] 1424 	mov	dph,r3
      0004F8 12r00r00         [24] 1425 	lcall	_putchar
      0004FB 0D               [12] 1426 	inc	r5
                                   1427 ;	life.c:147: printstr(">\r\n");
      0004FC BD 00 E7         [24] 1428 	cjne	r5,#0x00,00164$
      0004FF 0E               [12] 1429 	inc	r6
      000500 80 E4            [24] 1430 	sjmp	00164$
      000502                       1431 00133$:
                                   1432 ;	life.c:194: show(0);
      000502 75 82 00         [24] 1433 	mov	dpl,#0x00
      000505 12r00r34         [24] 1434 	lcall	_show
                                   1435 ;	life.c:196: printstr("RDY\r\n");
      000508 7Dr34            [12] 1436 	mov	r5,#___str_5
      00050A 7Es00            [12] 1437 	mov	r6,#(___str_5 >> 8)
      00050C 7F 80            [12] 1438 	mov	r7,#0x80
                                   1439 ;	life.c:48: return;
      00050E                       1440 00167$:
                                   1441 ;	life.c:46: for (; *s; s++) putchar(*s);
      00050E 8D 82            [24] 1442 	mov	dpl,r5
      000510 8E 83            [24] 1443 	mov	dph,r6
      000512 8F F0            [24] 1444 	mov	b,r7
      000514 12r00r00         [24] 1445 	lcall	__gptrget
      000517 FC               [12] 1446 	mov	r4,a
      000518 60 10            [24] 1447 	jz	00136$
      00051A 7B 00            [12] 1448 	mov	r3,#0x00
      00051C 8C 82            [24] 1449 	mov	dpl,r4
      00051E 8B 83            [24] 1450 	mov	dph,r3
      000520 12r00r00         [24] 1451 	lcall	_putchar
      000523 0D               [12] 1452 	inc	r5
                                   1453 ;	life.c:196: printstr("RDY\r\n");
      000524 BD 00 E7         [24] 1454 	cjne	r5,#0x00,00167$
      000527 0E               [12] 1455 	inc	r6
      000528 80 E4            [24] 1456 	sjmp	00167$
      00052A                       1457 00136$:
                                   1458 ;	life.c:197: (void)getchar();
      00052A 12r00r05         [24] 1459 	lcall	_getchar
                                   1460 ;	life.c:75: generation[0] = 0;
      00052D 90r0Cr12         [24] 1461 	mov	dptr,#_generation
      000530 E4               [12] 1462 	clr	a
      000531 F0               [24] 1463 	movx	@dptr,a
      000532 A3               [24] 1464 	inc	dptr
      000533 F0               [24] 1465 	movx	@dptr,a
                                   1466 ;	life.c:76: generation[1] = 0;
      000534 90r0Cr14         [24] 1467 	mov	dptr,#(_generation + 0x0002)
      000537 F0               [24] 1468 	movx	@dptr,a
      000538 A3               [24] 1469 	inc	dptr
      000539 F0               [24] 1470 	movx	@dptr,a
                                   1471 ;	life.c:201: for (i1 = 0; !i0 && !i1; ) {
      00053A 90r00r01         [24] 1472 	mov	dptr,#_i1
      00053D F0               [24] 1473 	movx	@dptr,a
      00053E                       1474 00184$:
      00053E 90r00r00         [24] 1475 	mov	dptr,#_i0
      000541 E0               [24] 1476 	movx	a,@dptr
      000542 60 03            [24] 1477 	jz	00385$
      000544 02r08r89         [24] 1478 	ljmp	00104$
      000547                       1479 00385$:
      000547 90r00r01         [24] 1480 	mov	dptr,#_i1
      00054A E0               [24] 1481 	movx	a,@dptr
      00054B 60 03            [24] 1482 	jz	00386$
      00054D 02r08r89         [24] 1483 	ljmp	00104$
      000550                       1484 00386$:
                                   1485 ;	life.c:202: show(1);
      000550 75 82 01         [24] 1486 	mov	dpl,#0x01
      000553 12r00r34         [24] 1487 	lcall	_show
                                   1488 ;	life.c:155: fixed = 1;
      000556 90r0Cr10         [24] 1489 	mov	dptr,#_fixed
      000559 74 01            [12] 1490 	mov	a,#0x01
      00055B F0               [24] 1491 	movx	@dptr,a
                                   1492 ;	life.c:156: cycle2 = 1;
      00055C 90r0Cr11         [24] 1493 	mov	dptr,#_cycle2
      00055F F0               [24] 1494 	movx	@dptr,a
                                   1495 ;	life.c:157: bstep = 0;
      000560 90r0Cr0E         [24] 1496 	mov	dptr,#_bstep
      000563 E4               [12] 1497 	clr	a
      000564 F0               [24] 1498 	movx	@dptr,a
                                   1499 ;	life.c:159: for (y = 0; y < H; y++) {
      000565 90r0Cr04         [24] 1500 	mov	dptr,#_y
      000568 F0               [24] 1501 	movx	@dptr,a
      000569 A3               [24] 1502 	inc	dptr
      00056A F0               [24] 1503 	movx	@dptr,a
      00056B                       1504 00177$:
                                   1505 ;	life.c:160: putchar(busy[bstep]); putchar('\r');
      00056B 90r0Cr0E         [24] 1506 	mov	dptr,#_bstep
      00056E E0               [24] 1507 	movx	a,@dptr
      00056F 90r08rED         [24] 1508 	mov	dptr,#_busy
      000572 93               [24] 1509 	movc	a,@a+dptr
      000573 FF               [12] 1510 	mov	r7,a
      000574 7E 00            [12] 1511 	mov	r6,#0x00
      000576 8F 82            [24] 1512 	mov	dpl,r7
      000578 8E 83            [24] 1513 	mov	dph,r6
      00057A 12r00r00         [24] 1514 	lcall	_putchar
      00057D 90 00 0D         [24] 1515 	mov	dptr,#0x000d
      000580 12r00r00         [24] 1516 	lcall	_putchar
                                   1517 ;	life.c:161: bstep = (bstep + 1) & 3;
      000583 90r0Cr0E         [24] 1518 	mov	dptr,#_bstep
      000586 E0               [24] 1519 	movx	a,@dptr
      000587 FF               [12] 1520 	mov	r7,a
      000588 0F               [12] 1521 	inc	r7
      000589 74 03            [12] 1522 	mov	a,#0x03
      00058B 5F               [12] 1523 	anl	a,r7
      00058C F0               [24] 1524 	movx	@dptr,a
                                   1525 ;	life.c:162: for (x = 0; x < W; x++) {
      00058D 90r0Cr02         [24] 1526 	mov	dptr,#_x
      000590 E4               [12] 1527 	clr	a
      000591 F0               [24] 1528 	movx	@dptr,a
      000592 A3               [24] 1529 	inc	dptr
      000593 F0               [24] 1530 	movx	@dptr,a
      000594                       1531 00175$:
                                   1532 ;	life.c:163: n = -u[A2D(W, y, x)];
      000594 90r0Cr04         [24] 1533 	mov	dptr,#_y
      000597 E0               [24] 1534 	movx	a,@dptr
      000598 FE               [12] 1535 	mov	r6,a
      000599 A3               [24] 1536 	inc	dptr
      00059A E0               [24] 1537 	movx	a,@dptr
      00059B FF               [12] 1538 	mov	r7,a
      00059C 8E 04            [24] 1539 	mov	ar4,r6
      00059E C4               [12] 1540 	swap	a
      00059F 23               [12] 1541 	rl	a
      0005A0 54 E0            [12] 1542 	anl	a,#0xe0
      0005A2 CC               [12] 1543 	xch	a,r4
      0005A3 C4               [12] 1544 	swap	a
      0005A4 23               [12] 1545 	rl	a
      0005A5 CC               [12] 1546 	xch	a,r4
      0005A6 6C               [12] 1547 	xrl	a,r4
      0005A7 CC               [12] 1548 	xch	a,r4
      0005A8 54 E0            [12] 1549 	anl	a,#0xe0
      0005AA CC               [12] 1550 	xch	a,r4
      0005AB 6C               [12] 1551 	xrl	a,r4
      0005AC FD               [12] 1552 	mov	r5,a
      0005AD 90r0Cr02         [24] 1553 	mov	dptr,#_x
      0005B0 E0               [24] 1554 	movx	a,@dptr
      0005B1 FA               [12] 1555 	mov	r2,a
      0005B2 A3               [24] 1556 	inc	dptr
      0005B3 E0               [24] 1557 	movx	a,@dptr
      0005B4 FB               [12] 1558 	mov	r3,a
      0005B5 EA               [12] 1559 	mov	a,r2
      0005B6 2C               [12] 1560 	add	a,r4
      0005B7 FC               [12] 1561 	mov	r4,a
      0005B8 EB               [12] 1562 	mov	a,r3
      0005B9 3D               [12] 1563 	addc	a,r5
      0005BA FD               [12] 1564 	mov	r5,a
      0005BB EC               [12] 1565 	mov	a,r4
      0005BC 24r02            [12] 1566 	add	a,#_u
      0005BE F5 82            [12] 1567 	mov	dpl,a
      0005C0 ED               [12] 1568 	mov	a,r5
      0005C1 34s04            [12] 1569 	addc	a,#(_u >> 8)
      0005C3 F5 83            [12] 1570 	mov	dph,a
      0005C5 E0               [24] 1571 	movx	a,@dptr
      0005C6 FD               [12] 1572 	mov	r5,a
      0005C7 90r0Cr0F         [24] 1573 	mov	dptr,#_n
      0005CA C3               [12] 1574 	clr	c
      0005CB E4               [12] 1575 	clr	a
      0005CC 9D               [12] 1576 	subb	a,r5
      0005CD F0               [24] 1577 	movx	@dptr,a
                                   1578 ;	life.c:164: for (y1 = y - 1; y1 <= y + 1; y1++)
      0005CE 1E               [12] 1579 	dec	r6
      0005CF BE FF 01         [24] 1580 	cjne	r6,#0xff,00387$
      0005D2 1F               [12] 1581 	dec	r7
      0005D3                       1582 00387$:
      0005D3 90r0Cr08         [24] 1583 	mov	dptr,#_y1
      0005D6 EE               [12] 1584 	mov	a,r6
      0005D7 F0               [24] 1585 	movx	@dptr,a
      0005D8 EF               [12] 1586 	mov	a,r7
      0005D9 A3               [24] 1587 	inc	dptr
      0005DA F0               [24] 1588 	movx	@dptr,a
      0005DB                       1589 00173$:
      0005DB 90r0Cr04         [24] 1590 	mov	dptr,#_y
      0005DE E0               [24] 1591 	movx	a,@dptr
      0005DF FE               [12] 1592 	mov	r6,a
      0005E0 A3               [24] 1593 	inc	dptr
      0005E1 E0               [24] 1594 	movx	a,@dptr
      0005E2 FF               [12] 1595 	mov	r7,a
      0005E3 74 01            [12] 1596 	mov	a,#0x01
      0005E5 2E               [12] 1597 	add	a,r6
      0005E6 FC               [12] 1598 	mov	r4,a
      0005E7 E4               [12] 1599 	clr	a
      0005E8 3F               [12] 1600 	addc	a,r7
      0005E9 FD               [12] 1601 	mov	r5,a
      0005EA 90r0Cr08         [24] 1602 	mov	dptr,#_y1
      0005ED E0               [24] 1603 	movx	a,@dptr
      0005EE FA               [12] 1604 	mov	r2,a
      0005EF A3               [24] 1605 	inc	dptr
      0005F0 E0               [24] 1606 	movx	a,@dptr
      0005F1 FB               [12] 1607 	mov	r3,a
      0005F2 C3               [12] 1608 	clr	c
      0005F3 EC               [12] 1609 	mov	a,r4
      0005F4 9A               [12] 1610 	subb	a,r2
      0005F5 ED               [12] 1611 	mov	a,r5
      0005F6 64 80            [12] 1612 	xrl	a,#0x80
      0005F8 8B F0            [24] 1613 	mov	b,r3
      0005FA 63 F0 80         [24] 1614 	xrl	b,#0x80
      0005FD 95 F0            [12] 1615 	subb	a,b
      0005FF 50 03            [24] 1616 	jnc	00388$
      000601 02r06rE1         [24] 1617 	ljmp	00139$
      000604                       1618 00388$:
                                   1619 ;	life.c:165: for (x1 = x - 1; x1 <= x + 1; x1++)
      000604 90r0Cr02         [24] 1620 	mov	dptr,#_x
      000607 E0               [24] 1621 	movx	a,@dptr
      000608 FC               [12] 1622 	mov	r4,a
      000609 A3               [24] 1623 	inc	dptr
      00060A E0               [24] 1624 	movx	a,@dptr
      00060B FD               [12] 1625 	mov	r5,a
      00060C 1C               [12] 1626 	dec	r4
      00060D BC FF 01         [24] 1627 	cjne	r4,#0xff,00389$
      000610 1D               [12] 1628 	dec	r5
      000611                       1629 00389$:
      000611 90r0Cr06         [24] 1630 	mov	dptr,#_x1
      000614 EC               [12] 1631 	mov	a,r4
      000615 F0               [24] 1632 	movx	@dptr,a
      000616 ED               [12] 1633 	mov	a,r5
      000617 A3               [24] 1634 	inc	dptr
      000618 F0               [24] 1635 	movx	@dptr,a
      000619                       1636 00170$:
      000619 90r0Cr02         [24] 1637 	mov	dptr,#_x
      00061C E0               [24] 1638 	movx	a,@dptr
      00061D FC               [12] 1639 	mov	r4,a
      00061E A3               [24] 1640 	inc	dptr
      00061F E0               [24] 1641 	movx	a,@dptr
      000620 FD               [12] 1642 	mov	r5,a
      000621 0C               [12] 1643 	inc	r4
      000622 BC 00 01         [24] 1644 	cjne	r4,#0x00,00390$
      000625 0D               [12] 1645 	inc	r5
      000626                       1646 00390$:
      000626 90r0Cr06         [24] 1647 	mov	dptr,#_x1
      000629 E0               [24] 1648 	movx	a,@dptr
      00062A FA               [12] 1649 	mov	r2,a
      00062B A3               [24] 1650 	inc	dptr
      00062C E0               [24] 1651 	movx	a,@dptr
      00062D FB               [12] 1652 	mov	r3,a
      00062E C3               [12] 1653 	clr	c
      00062F EC               [12] 1654 	mov	a,r4
      000630 9A               [12] 1655 	subb	a,r2
      000631 ED               [12] 1656 	mov	a,r5
      000632 64 80            [12] 1657 	xrl	a,#0x80
      000634 8B F0            [24] 1658 	mov	b,r3
      000636 63 F0 80         [24] 1659 	xrl	b,#0x80
      000639 95 F0            [12] 1660 	subb	a,b
      00063B 50 03            [24] 1661 	jnc	00391$
      00063D 02r06rD2         [24] 1662 	ljmp	00174$
      000640                       1663 00391$:
                                   1664 ;	life.c:166: n += u[A2D(W, (y1 + H) % H, (x1 + W) % W)];
      000640 90r0Cr08         [24] 1665 	mov	dptr,#_y1
      000643 E0               [24] 1666 	movx	a,@dptr
      000644 FC               [12] 1667 	mov	r4,a
      000645 A3               [24] 1668 	inc	dptr
      000646 E0               [24] 1669 	movx	a,@dptr
      000647 FD               [12] 1670 	mov	r5,a
      000648 74 20            [12] 1671 	mov	a,#0x20
      00064A 2C               [12] 1672 	add	a,r4
      00064B FC               [12] 1673 	mov	r4,a
      00064C E4               [12] 1674 	clr	a
      00064D 3D               [12] 1675 	addc	a,r5
      00064E FD               [12] 1676 	mov	r5,a
      00064F C0 03            [24] 1677 	push	ar3
      000651 C0 02            [24] 1678 	push	ar2
      000653 74 20            [12] 1679 	mov	a,#0x20
      000655 C0 E0            [24] 1680 	push	acc
      000657 E4               [12] 1681 	clr	a
      000658 C0 E0            [24] 1682 	push	acc
      00065A 8C 82            [24] 1683 	mov	dpl,r4
      00065C 8D 83            [24] 1684 	mov	dph,r5
      00065E 12r00r00         [24] 1685 	lcall	__modsint
      000661 AC 82            [24] 1686 	mov	r4,dpl
      000663 AD 83            [24] 1687 	mov	r5,dph
      000665 15 81            [12] 1688 	dec	sp
      000667 15 81            [12] 1689 	dec	sp
      000669 D0 02            [24] 1690 	pop	ar2
      00066B D0 03            [24] 1691 	pop	ar3
      00066D 8C 07            [24] 1692 	mov	ar7,r4
      00066F ED               [12] 1693 	mov	a,r5
      000670 C4               [12] 1694 	swap	a
      000671 23               [12] 1695 	rl	a
      000672 54 E0            [12] 1696 	anl	a,#0xe0
      000674 CF               [12] 1697 	xch	a,r7
      000675 C4               [12] 1698 	swap	a
      000676 23               [12] 1699 	rl	a
      000677 CF               [12] 1700 	xch	a,r7
      000678 6F               [12] 1701 	xrl	a,r7
      000679 CF               [12] 1702 	xch	a,r7
      00067A 54 E0            [12] 1703 	anl	a,#0xe0
      00067C CF               [12] 1704 	xch	a,r7
      00067D 6F               [12] 1705 	xrl	a,r7
      00067E FE               [12] 1706 	mov	r6,a
      00067F 74 20            [12] 1707 	mov	a,#0x20
      000681 2A               [12] 1708 	add	a,r2
      000682 FC               [12] 1709 	mov	r4,a
      000683 E4               [12] 1710 	clr	a
      000684 3B               [12] 1711 	addc	a,r3
      000685 FD               [12] 1712 	mov	r5,a
      000686 C0 07            [24] 1713 	push	ar7
      000688 C0 06            [24] 1714 	push	ar6
      00068A C0 03            [24] 1715 	push	ar3
      00068C C0 02            [24] 1716 	push	ar2
      00068E 74 20            [12] 1717 	mov	a,#0x20
      000690 C0 E0            [24] 1718 	push	acc
      000692 E4               [12] 1719 	clr	a
      000693 C0 E0            [24] 1720 	push	acc
      000695 8C 82            [24] 1721 	mov	dpl,r4
      000697 8D 83            [24] 1722 	mov	dph,r5
      000699 12r00r00         [24] 1723 	lcall	__modsint
      00069C AC 82            [24] 1724 	mov	r4,dpl
      00069E AD 83            [24] 1725 	mov	r5,dph
      0006A0 15 81            [12] 1726 	dec	sp
      0006A2 15 81            [12] 1727 	dec	sp
      0006A4 D0 02            [24] 1728 	pop	ar2
      0006A6 D0 03            [24] 1729 	pop	ar3
      0006A8 D0 06            [24] 1730 	pop	ar6
      0006AA D0 07            [24] 1731 	pop	ar7
      0006AC EC               [12] 1732 	mov	a,r4
      0006AD 2F               [12] 1733 	add	a,r7
      0006AE FC               [12] 1734 	mov	r4,a
      0006AF ED               [12] 1735 	mov	a,r5
      0006B0 3E               [12] 1736 	addc	a,r6
      0006B1 FD               [12] 1737 	mov	r5,a
      0006B2 EC               [12] 1738 	mov	a,r4
      0006B3 24r02            [12] 1739 	add	a,#_u
      0006B5 F5 82            [12] 1740 	mov	dpl,a
      0006B7 ED               [12] 1741 	mov	a,r5
      0006B8 34s04            [12] 1742 	addc	a,#(_u >> 8)
      0006BA F5 83            [12] 1743 	mov	dph,a
      0006BC E0               [24] 1744 	movx	a,@dptr
      0006BD FD               [12] 1745 	mov	r5,a
      0006BE 90r0Cr0F         [24] 1746 	mov	dptr,#_n
      0006C1 E0               [24] 1747 	movx	a,@dptr
      0006C2 2D               [12] 1748 	add	a,r5
      0006C3 F0               [24] 1749 	movx	@dptr,a
                                   1750 ;	life.c:165: for (x1 = x - 1; x1 <= x + 1; x1++)
      0006C4 90r0Cr06         [24] 1751 	mov	dptr,#_x1
      0006C7 74 01            [12] 1752 	mov	a,#0x01
      0006C9 2A               [12] 1753 	add	a,r2
      0006CA F0               [24] 1754 	movx	@dptr,a
      0006CB E4               [12] 1755 	clr	a
      0006CC 3B               [12] 1756 	addc	a,r3
      0006CD A3               [24] 1757 	inc	dptr
      0006CE F0               [24] 1758 	movx	@dptr,a
      0006CF 02r06r19         [24] 1759 	ljmp	00170$
      0006D2                       1760 00174$:
                                   1761 ;	life.c:164: for (y1 = y - 1; y1 <= y + 1; y1++)
      0006D2 90r0Cr08         [24] 1762 	mov	dptr,#_y1
      0006D5 E0               [24] 1763 	movx	a,@dptr
      0006D6 24 01            [12] 1764 	add	a,#0x01
      0006D8 F0               [24] 1765 	movx	@dptr,a
      0006D9 A3               [24] 1766 	inc	dptr
      0006DA E0               [24] 1767 	movx	a,@dptr
      0006DB 34 00            [12] 1768 	addc	a,#0x00
      0006DD F0               [24] 1769 	movx	@dptr,a
      0006DE 02r05rDB         [24] 1770 	ljmp	00173$
      0006E1                       1771 00139$:
                                   1772 ;	life.c:168: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0006E1 EF               [12] 1773 	mov	a,r7
      0006E2 C4               [12] 1774 	swap	a
      0006E3 23               [12] 1775 	rl	a
      0006E4 54 E0            [12] 1776 	anl	a,#0xe0
      0006E6 CE               [12] 1777 	xch	a,r6
      0006E7 C4               [12] 1778 	swap	a
      0006E8 23               [12] 1779 	rl	a
      0006E9 CE               [12] 1780 	xch	a,r6
      0006EA 6E               [12] 1781 	xrl	a,r6
      0006EB CE               [12] 1782 	xch	a,r6
      0006EC 54 E0            [12] 1783 	anl	a,#0xe0
      0006EE CE               [12] 1784 	xch	a,r6
      0006EF 6E               [12] 1785 	xrl	a,r6
      0006F0 FF               [12] 1786 	mov	r7,a
      0006F1 90r0Cr02         [24] 1787 	mov	dptr,#_x
      0006F4 E0               [24] 1788 	movx	a,@dptr
      0006F5 FC               [12] 1789 	mov	r4,a
      0006F6 A3               [24] 1790 	inc	dptr
      0006F7 E0               [24] 1791 	movx	a,@dptr
      0006F8 FD               [12] 1792 	mov	r5,a
      0006F9 EC               [12] 1793 	mov	a,r4
      0006FA 2E               [12] 1794 	add	a,r6
      0006FB FA               [12] 1795 	mov	r2,a
      0006FC ED               [12] 1796 	mov	a,r5
      0006FD 3F               [12] 1797 	addc	a,r7
      0006FE FB               [12] 1798 	mov	r3,a
      0006FF EA               [12] 1799 	mov	a,r2
      000700 24r02            [12] 1800 	add	a,#_nu
      000702 FA               [12] 1801 	mov	r2,a
      000703 EB               [12] 1802 	mov	a,r3
      000704 34s08            [12] 1803 	addc	a,#(_nu >> 8)
      000706 FB               [12] 1804 	mov	r3,a
      000707 90r0Cr0F         [24] 1805 	mov	dptr,#_n
      00070A A8*00            [24] 1806 	mov	r0,_bp
      00070C 08               [12] 1807 	inc	r0
      00070D E0               [24] 1808 	movx	a,@dptr
      00070E F6               [12] 1809 	mov	@r0,a
      00070F A8*00            [24] 1810 	mov	r0,_bp
      000711 08               [12] 1811 	inc	r0
      000712 B6 03 02         [24] 1812 	cjne	@r0,#0x03,00392$
      000715 80 1F            [24] 1813 	sjmp	00197$
      000717                       1814 00392$:
      000717 A8*00            [24] 1815 	mov	r0,_bp
      000719 08               [12] 1816 	inc	r0
      00071A B6 02 15         [24] 1817 	cjne	@r0,#0x02,00196$
      00071D EC               [12] 1818 	mov	a,r4
      00071E 2E               [12] 1819 	add	a,r6
      00071F FE               [12] 1820 	mov	r6,a
      000720 ED               [12] 1821 	mov	a,r5
      000721 3F               [12] 1822 	addc	a,r7
      000722 FF               [12] 1823 	mov	r7,a
      000723 EE               [12] 1824 	mov	a,r6
      000724 24r02            [12] 1825 	add	a,#_u
      000726 FE               [12] 1826 	mov	r6,a
      000727 EF               [12] 1827 	mov	a,r7
      000728 34s04            [12] 1828 	addc	a,#(_u >> 8)
      00072A FF               [12] 1829 	mov	r7,a
      00072B 8E 82            [24] 1830 	mov	dpl,r6
      00072D 8F 83            [24] 1831 	mov	dph,r7
      00072F E0               [24] 1832 	movx	a,@dptr
      000730 70 04            [24] 1833 	jnz	00197$
      000732                       1834 00196$:
                                   1835 ;	assignBit
      000732 C2*00            [12] 1836 	clr	b0
      000734 80 02            [24] 1837 	sjmp	00198$
      000736                       1838 00197$:
                                   1839 ;	assignBit
      000736 D2*00            [12] 1840 	setb	b0
      000738                       1841 00198$:
      000738 A2*00            [12] 1842 	mov	c,b0
      00073A E4               [12] 1843 	clr	a
      00073B 33               [12] 1844 	rlc	a
      00073C 8A 82            [24] 1845 	mov	dpl,r2
      00073E 8B 83            [24] 1846 	mov	dph,r3
      000740 F0               [24] 1847 	movx	@dptr,a
                                   1848 ;	life.c:170: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      000741 90r0Cr04         [24] 1849 	mov	dptr,#_y
      000744 E0               [24] 1850 	movx	a,@dptr
      000745 FE               [12] 1851 	mov	r6,a
      000746 A3               [24] 1852 	inc	dptr
      000747 E0               [24] 1853 	movx	a,@dptr
      000748 C4               [12] 1854 	swap	a
      000749 23               [12] 1855 	rl	a
      00074A 54 E0            [12] 1856 	anl	a,#0xe0
      00074C CE               [12] 1857 	xch	a,r6
      00074D C4               [12] 1858 	swap	a
      00074E 23               [12] 1859 	rl	a
      00074F CE               [12] 1860 	xch	a,r6
      000750 6E               [12] 1861 	xrl	a,r6
      000751 CE               [12] 1862 	xch	a,r6
      000752 54 E0            [12] 1863 	anl	a,#0xe0
      000754 CE               [12] 1864 	xch	a,r6
      000755 6E               [12] 1865 	xrl	a,r6
      000756 FF               [12] 1866 	mov	r7,a
      000757 90r0Cr02         [24] 1867 	mov	dptr,#_x
      00075A E0               [24] 1868 	movx	a,@dptr
      00075B FC               [12] 1869 	mov	r4,a
      00075C A3               [24] 1870 	inc	dptr
      00075D E0               [24] 1871 	movx	a,@dptr
      00075E FD               [12] 1872 	mov	r5,a
      00075F EC               [12] 1873 	mov	a,r4
      000760 2E               [12] 1874 	add	a,r6
      000761 FE               [12] 1875 	mov	r6,a
      000762 ED               [12] 1876 	mov	a,r5
      000763 3F               [12] 1877 	addc	a,r7
      000764 FF               [12] 1878 	mov	r7,a
      000765 EE               [12] 1879 	mov	a,r6
      000766 24r02            [12] 1880 	add	a,#_pu
      000768 F5 82            [12] 1881 	mov	dpl,a
      00076A EF               [12] 1882 	mov	a,r7
      00076B 34s00            [12] 1883 	addc	a,#(_pu >> 8)
      00076D F5 83            [12] 1884 	mov	dph,a
      00076F E0               [24] 1885 	movx	a,@dptr
      000770 FD               [12] 1886 	mov	r5,a
      000771 EE               [12] 1887 	mov	a,r6
      000772 24r02            [12] 1888 	add	a,#_nu
      000774 F5 82            [12] 1889 	mov	dpl,a
      000776 EF               [12] 1890 	mov	a,r7
      000777 34s08            [12] 1891 	addc	a,#(_nu >> 8)
      000779 F5 83            [12] 1892 	mov	dph,a
      00077B E0               [24] 1893 	movx	a,@dptr
      00077C FF               [12] 1894 	mov	r7,a
      00077D ED               [12] 1895 	mov	a,r5
      00077E B5 07 02         [24] 1896 	cjne	a,ar7,00396$
      000781 80 05            [24] 1897 	sjmp	00141$
      000783                       1898 00396$:
      000783 90r0Cr11         [24] 1899 	mov	dptr,#_cycle2
      000786 E4               [12] 1900 	clr	a
      000787 F0               [24] 1901 	movx	@dptr,a
      000788                       1902 00141$:
                                   1903 ;	life.c:171: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      000788 90r0Cr04         [24] 1904 	mov	dptr,#_y
      00078B E0               [24] 1905 	movx	a,@dptr
      00078C FE               [12] 1906 	mov	r6,a
      00078D A3               [24] 1907 	inc	dptr
      00078E E0               [24] 1908 	movx	a,@dptr
      00078F C4               [12] 1909 	swap	a
      000790 23               [12] 1910 	rl	a
      000791 54 E0            [12] 1911 	anl	a,#0xe0
      000793 CE               [12] 1912 	xch	a,r6
      000794 C4               [12] 1913 	swap	a
      000795 23               [12] 1914 	rl	a
      000796 CE               [12] 1915 	xch	a,r6
      000797 6E               [12] 1916 	xrl	a,r6
      000798 CE               [12] 1917 	xch	a,r6
      000799 54 E0            [12] 1918 	anl	a,#0xe0
      00079B CE               [12] 1919 	xch	a,r6
      00079C 6E               [12] 1920 	xrl	a,r6
      00079D FF               [12] 1921 	mov	r7,a
      00079E 90r0Cr02         [24] 1922 	mov	dptr,#_x
      0007A1 E0               [24] 1923 	movx	a,@dptr
      0007A2 FC               [12] 1924 	mov	r4,a
      0007A3 A3               [24] 1925 	inc	dptr
      0007A4 E0               [24] 1926 	movx	a,@dptr
      0007A5 FD               [12] 1927 	mov	r5,a
      0007A6 EC               [12] 1928 	mov	a,r4
      0007A7 2E               [12] 1929 	add	a,r6
      0007A8 FE               [12] 1930 	mov	r6,a
      0007A9 ED               [12] 1931 	mov	a,r5
      0007AA 3F               [12] 1932 	addc	a,r7
      0007AB FF               [12] 1933 	mov	r7,a
      0007AC EE               [12] 1934 	mov	a,r6
      0007AD 24r02            [12] 1935 	add	a,#_u
      0007AF F5 82            [12] 1936 	mov	dpl,a
      0007B1 EF               [12] 1937 	mov	a,r7
      0007B2 34s04            [12] 1938 	addc	a,#(_u >> 8)
      0007B4 F5 83            [12] 1939 	mov	dph,a
      0007B6 E0               [24] 1940 	movx	a,@dptr
      0007B7 FD               [12] 1941 	mov	r5,a
      0007B8 EE               [12] 1942 	mov	a,r6
      0007B9 24r02            [12] 1943 	add	a,#_nu
      0007BB F5 82            [12] 1944 	mov	dpl,a
      0007BD EF               [12] 1945 	mov	a,r7
      0007BE 34s08            [12] 1946 	addc	a,#(_nu >> 8)
      0007C0 F5 83            [12] 1947 	mov	dph,a
      0007C2 E0               [24] 1948 	movx	a,@dptr
      0007C3 FF               [12] 1949 	mov	r7,a
      0007C4 ED               [12] 1950 	mov	a,r5
      0007C5 B5 07 02         [24] 1951 	cjne	a,ar7,00397$
      0007C8 80 05            [24] 1952 	sjmp	00176$
      0007CA                       1953 00397$:
      0007CA 90r0Cr10         [24] 1954 	mov	dptr,#_fixed
      0007CD E4               [12] 1955 	clr	a
      0007CE F0               [24] 1956 	movx	@dptr,a
      0007CF                       1957 00176$:
                                   1958 ;	life.c:162: for (x = 0; x < W; x++) {
      0007CF 90r0Cr02         [24] 1959 	mov	dptr,#_x
      0007D2 E0               [24] 1960 	movx	a,@dptr
      0007D3 24 01            [12] 1961 	add	a,#0x01
      0007D5 F0               [24] 1962 	movx	@dptr,a
      0007D6 A3               [24] 1963 	inc	dptr
      0007D7 E0               [24] 1964 	movx	a,@dptr
      0007D8 34 00            [12] 1965 	addc	a,#0x00
      0007DA F0               [24] 1966 	movx	@dptr,a
      0007DB 90r0Cr02         [24] 1967 	mov	dptr,#_x
      0007DE E0               [24] 1968 	movx	a,@dptr
      0007DF FE               [12] 1969 	mov	r6,a
      0007E0 A3               [24] 1970 	inc	dptr
      0007E1 E0               [24] 1971 	movx	a,@dptr
      0007E2 FF               [12] 1972 	mov	r7,a
      0007E3 C3               [12] 1973 	clr	c
      0007E4 EE               [12] 1974 	mov	a,r6
      0007E5 94 20            [12] 1975 	subb	a,#0x20
      0007E7 EF               [12] 1976 	mov	a,r7
      0007E8 64 80            [12] 1977 	xrl	a,#0x80
      0007EA 94 80            [12] 1978 	subb	a,#0x80
      0007EC 50 03            [24] 1979 	jnc	00398$
      0007EE 02r05r94         [24] 1980 	ljmp	00175$
      0007F1                       1981 00398$:
                                   1982 ;	life.c:159: for (y = 0; y < H; y++) {
      0007F1 90r0Cr04         [24] 1983 	mov	dptr,#_y
      0007F4 E0               [24] 1984 	movx	a,@dptr
      0007F5 24 01            [12] 1985 	add	a,#0x01
      0007F7 F0               [24] 1986 	movx	@dptr,a
      0007F8 A3               [24] 1987 	inc	dptr
      0007F9 E0               [24] 1988 	movx	a,@dptr
      0007FA 34 00            [12] 1989 	addc	a,#0x00
      0007FC F0               [24] 1990 	movx	@dptr,a
      0007FD 90r0Cr04         [24] 1991 	mov	dptr,#_y
      000800 E0               [24] 1992 	movx	a,@dptr
      000801 FE               [12] 1993 	mov	r6,a
      000802 A3               [24] 1994 	inc	dptr
      000803 E0               [24] 1995 	movx	a,@dptr
      000804 FF               [12] 1996 	mov	r7,a
      000805 C3               [12] 1997 	clr	c
      000806 EE               [12] 1998 	mov	a,r6
      000807 94 20            [12] 1999 	subb	a,#0x20
      000809 EF               [12] 2000 	mov	a,r7
      00080A 64 80            [12] 2001 	xrl	a,#0x80
      00080C 94 80            [12] 2002 	subb	a,#0x80
      00080E 50 03            [24] 2003 	jnc	00399$
      000810 02r05r6B         [24] 2004 	ljmp	00177$
      000813                       2005 00399$:
                                   2006 ;	life.c:175: memcpy(pu, u, sizeof (u));
      000813 E4               [12] 2007 	clr	a
      000814 C0 E0            [24] 2008 	push	acc
      000816 74 04            [12] 2009 	mov	a,#0x04
      000818 C0 E0            [24] 2010 	push	acc
      00081A 74r02            [12] 2011 	mov	a,#_u
      00081C C0 E0            [24] 2012 	push	acc
      00081E 74s04            [12] 2013 	mov	a,#(_u >> 8)
      000820 C0 E0            [24] 2014 	push	acc
      000822 E4               [12] 2015 	clr	a
      000823 C0 E0            [24] 2016 	push	acc
      000825 90r00r02         [24] 2017 	mov	dptr,#_pu
      000828 75 F0 00         [24] 2018 	mov	b,#0x00
      00082B 12r00r00         [24] 2019 	lcall	___memcpy
      00082E E5 81            [12] 2020 	mov	a,sp
      000830 24 FB            [12] 2021 	add	a,#0xfb
      000832 F5 81            [12] 2022 	mov	sp,a
                                   2023 ;	life.c:176: memcpy(u, nu, sizeof (nu));
      000834 E4               [12] 2024 	clr	a
      000835 C0 E0            [24] 2025 	push	acc
      000837 74 04            [12] 2026 	mov	a,#0x04
      000839 C0 E0            [24] 2027 	push	acc
      00083B 74r02            [12] 2028 	mov	a,#_nu
      00083D C0 E0            [24] 2029 	push	acc
      00083F 74s08            [12] 2030 	mov	a,#(_nu >> 8)
      000841 C0 E0            [24] 2031 	push	acc
      000843 E4               [12] 2032 	clr	a
      000844 C0 E0            [24] 2033 	push	acc
      000846 90r04r02         [24] 2034 	mov	dptr,#_u
      000849 75 F0 00         [24] 2035 	mov	b,#0x00
      00084C 12r00r00         [24] 2036 	lcall	___memcpy
      00084F E5 81            [12] 2037 	mov	a,sp
      000851 24 FB            [12] 2038 	add	a,#0xfb
      000853 F5 81            [12] 2039 	mov	sp,a
                                   2040 ;	life.c:204: if (fixed || cycle2) {
      000855 90r0Cr10         [24] 2041 	mov	dptr,#_fixed
      000858 E0               [24] 2042 	movx	a,@dptr
      000859 70 09            [24] 2043 	jnz	00101$
      00085B 90r0Cr11         [24] 2044 	mov	dptr,#_cycle2
      00085E E0               [24] 2045 	movx	a,@dptr
      00085F 70 03            [24] 2046 	jnz	00401$
      000861 02r05r3E         [24] 2047 	ljmp	00184$
      000864                       2048 00401$:
      000864                       2049 00101$:
                                   2050 ;	life.c:205: printstr("DONE\r\n");
      000864 7Dr3A            [12] 2051 	mov	r5,#___str_6
      000866 7Es00            [12] 2052 	mov	r6,#(___str_6 >> 8)
      000868 7F 80            [12] 2053 	mov	r7,#0x80
                                   2054 ;	life.c:48: return;
      00086A                       2055 00180$:
                                   2056 ;	life.c:46: for (; *s; s++) putchar(*s);
      00086A 8D 82            [24] 2057 	mov	dpl,r5
      00086C 8E 83            [24] 2058 	mov	dph,r6
      00086E 8F F0            [24] 2059 	mov	b,r7
      000870 12r00r00         [24] 2060 	lcall	__gptrget
      000873 FC               [12] 2061 	mov	r4,a
      000874 60 10            [24] 2062 	jz	00148$
      000876 7B 00            [12] 2063 	mov	r3,#0x00
      000878 8C 82            [24] 2064 	mov	dpl,r4
      00087A 8B 83            [24] 2065 	mov	dph,r3
      00087C 12r00r00         [24] 2066 	lcall	_putchar
      00087F 0D               [12] 2067 	inc	r5
                                   2068 ;	life.c:205: printstr("DONE\r\n");
      000880 BD 00 E7         [24] 2069 	cjne	r5,#0x00,00180$
      000883 0E               [12] 2070 	inc	r6
      000884 80 E4            [24] 2071 	sjmp	00180$
      000886                       2072 00148$:
                                   2073 ;	life.c:206: (void)getchar();
      000886 12r00r05         [24] 2074 	lcall	_getchar
                                   2075 ;	life.c:207: break;
      000889                       2076 00104$:
                                   2077 ;	life.c:211: if (i1) {
      000889 90r00r01         [24] 2078 	mov	dptr,#_i1
      00088C E0               [24] 2079 	movx	a,@dptr
      00088D 60 25            [24] 2080 	jz	00190$
                                   2081 ;	life.c:212: printstr("BREAK\r\n");
      00088F 7Dr41            [12] 2082 	mov	r5,#___str_7
      000891 7Es00            [12] 2083 	mov	r6,#(___str_7 >> 8)
      000893 7F 80            [12] 2084 	mov	r7,#0x80
                                   2085 ;	life.c:48: return;
      000895                       2086 00187$:
                                   2087 ;	life.c:46: for (; *s; s++) putchar(*s);
      000895 8D 82            [24] 2088 	mov	dpl,r5
      000897 8E 83            [24] 2089 	mov	dph,r6
      000899 8F F0            [24] 2090 	mov	b,r7
      00089B 12r00r00         [24] 2091 	lcall	__gptrget
      00089E FC               [12] 2092 	mov	r4,a
      00089F 60 10            [24] 2093 	jz	00150$
      0008A1 7B 00            [12] 2094 	mov	r3,#0x00
      0008A3 8C 82            [24] 2095 	mov	dpl,r4
      0008A5 8B 83            [24] 2096 	mov	dph,r3
      0008A7 12r00r00         [24] 2097 	lcall	_putchar
      0008AA 0D               [12] 2098 	inc	r5
                                   2099 ;	life.c:212: printstr("BREAK\r\n");
      0008AB BD 00 E7         [24] 2100 	cjne	r5,#0x00,00187$
      0008AE 0E               [12] 2101 	inc	r6
      0008AF 80 E4            [24] 2102 	sjmp	00187$
      0008B1                       2103 00150$:
                                   2104 ;	life.c:213: (void)getchar();
      0008B1 12r00r05         [24] 2105 	lcall	_getchar
      0008B4                       2106 00190$:
                                   2107 ;	life.c:188: for (i0 = 0; !i0; ) {
      0008B4 90r00r00         [24] 2108 	mov	dptr,#_i0
      0008B7 E0               [24] 2109 	movx	a,@dptr
      0008B8 70 03            [24] 2110 	jnz	00407$
      0008BA 02r02rB1         [24] 2111 	ljmp	00189$
      0008BD                       2112 00407$:
                                   2113 ;	life.c:217: EA = 0;
                                   2114 ;	assignBit
      0008BD C2 AF            [12] 2115 	clr	_EA
                                   2116 ;	life.c:219: printstr("TERM\r\n");
      0008BF 7Dr49            [12] 2117 	mov	r5,#___str_8
      0008C1 7Es00            [12] 2118 	mov	r6,#(___str_8 >> 8)
      0008C3 7F 80            [12] 2119 	mov	r7,#0x80
                                   2120 ;	life.c:48: return;
      0008C5                       2121 00192$:
                                   2122 ;	life.c:46: for (; *s; s++) putchar(*s);
      0008C5 8D 82            [24] 2123 	mov	dpl,r5
      0008C7 8E 83            [24] 2124 	mov	dph,r6
      0008C9 8F F0            [24] 2125 	mov	b,r7
      0008CB 12r00r00         [24] 2126 	lcall	__gptrget
      0008CE FC               [12] 2127 	mov	r4,a
      0008CF 60 10            [24] 2128 	jz	00152$
      0008D1 7B 00            [12] 2129 	mov	r3,#0x00
      0008D3 8C 82            [24] 2130 	mov	dpl,r4
      0008D5 8B 83            [24] 2131 	mov	dph,r3
      0008D7 12r00r00         [24] 2132 	lcall	_putchar
      0008DA 0D               [12] 2133 	inc	r5
                                   2134 ;	life.c:219: printstr("TERM\r\n");
      0008DB BD 00 E7         [24] 2135 	cjne	r5,#0x00,00192$
      0008DE 0E               [12] 2136 	inc	r6
      0008DF 80 E4            [24] 2137 	sjmp	00192$
      0008E1                       2138 00152$:
                                   2139 ;	life.c:220: (void)getchar();
      0008E1 12r00r05         [24] 2140 	lcall	_getchar
                                   2141 ;	life.c:224: __endasm;
      0008E4 02 00 00         [24] 2142 	ljmp	0
                                   2143 ;	life.c:225: }
      0008E7 85*00 81         [24] 2144 	mov	sp,_bp
      0008EA D0*00            [24] 2145 	pop	_bp
      0008EC 22               [24] 2146 	ret
                                   2147 	.area CSEG    (CODE)
                                   2148 	.area CONST   (CODE)
      000000                       2149 _digits:
      000000 30                    2150 	.db #0x30	; 48	'0'
      000001 31                    2151 	.db #0x31	; 49	'1'
      000002 32                    2152 	.db #0x32	; 50	'2'
      000003 33                    2153 	.db #0x33	; 51	'3'
      000004 34                    2154 	.db #0x34	; 52	'4'
      000005 35                    2155 	.db #0x35	; 53	'5'
      000006 36                    2156 	.db #0x36	; 54	'6'
      000007 37                    2157 	.db #0x37	; 55	'7'
      000008 38                    2158 	.db #0x38	; 56	'8'
      000009 39                    2159 	.db #0x39	; 57	'9'
      00000A 61                    2160 	.db #0x61	; 97	'a'
      00000B 62                    2161 	.db #0x62	; 98	'b'
      00000C 63                    2162 	.db #0x63	; 99	'c'
      00000D 64                    2163 	.db #0x64	; 100	'd'
      00000E 65                    2164 	.db #0x65	; 101	'e'
      00000F 66                    2165 	.db #0x66	; 102	'f'
                                   2166 	.area CONST   (CODE)
      000010                       2167 ___str_0:
      000010 1B                    2168 	.db 0x1b
      000011 5B 32 4A              2169 	.ascii "[2J"
      000014 1B                    2170 	.db 0x1b
      000015 5B 6D                 2171 	.ascii "[m"
      000017 00                    2172 	.db 0x00
                                   2173 	.area CSEG    (CODE)
                                   2174 	.area CONST   (CODE)
      000018                       2175 ___str_1:
      000018 0D                    2176 	.db 0x0d
      000019 0A                    2177 	.db 0x0a
      00001A 00                    2178 	.db 0x00
                                   2179 	.area CSEG    (CODE)
                                   2180 	.area CONST   (CODE)
      00001B                       2181 ___str_2:
      00001B 4C 4F 41 44 20 3C     2182 	.ascii "LOAD <"
      000021 00                    2183 	.db 0x00
                                   2184 	.area CSEG    (CODE)
                                   2185 	.area CONST   (CODE)
      000022                       2186 ___str_3:
      000022 3E                    2187 	.ascii ">"
      000023 0D                    2188 	.db 0x0d
      000024 0A                    2189 	.db 0x0a
      000025 00                    2190 	.db 0x00
                                   2191 	.area CSEG    (CODE)
      0008ED                       2192 _busy:
      0008ED 5C                    2193 	.db #0x5c	; 92
      0008EE 7C                    2194 	.db #0x7c	; 124
      0008EF 2F                    2195 	.db #0x2f	; 47
      0008F0 2D                    2196 	.db #0x2d	; 45
                                   2197 	.area CONST   (CODE)
      000026                       2198 ___str_4:
      000026 1B                    2199 	.db 0x1b
      000027 5B 32 4A              2200 	.ascii "[2J"
      00002A 1B                    2201 	.db 0x1b
      00002B 5B 6D 49 4E 49 54     2202 	.ascii "[mINIT"
      000031 0D                    2203 	.db 0x0d
      000032 0A                    2204 	.db 0x0a
      000033 00                    2205 	.db 0x00
                                   2206 	.area CSEG    (CODE)
                                   2207 	.area CONST   (CODE)
      000034                       2208 ___str_5:
      000034 52 44 59              2209 	.ascii "RDY"
      000037 0D                    2210 	.db 0x0d
      000038 0A                    2211 	.db 0x0a
      000039 00                    2212 	.db 0x00
                                   2213 	.area CSEG    (CODE)
                                   2214 	.area CONST   (CODE)
      00003A                       2215 ___str_6:
      00003A 44 4F 4E 45           2216 	.ascii "DONE"
      00003E 0D                    2217 	.db 0x0d
      00003F 0A                    2218 	.db 0x0a
      000040 00                    2219 	.db 0x00
                                   2220 	.area CSEG    (CODE)
                                   2221 	.area CONST   (CODE)
      000041                       2222 ___str_7:
      000041 42 52 45 41 4B        2223 	.ascii "BREAK"
      000046 0D                    2224 	.db 0x0d
      000047 0A                    2225 	.db 0x0a
      000048 00                    2226 	.db 0x00
                                   2227 	.area CSEG    (CODE)
                                   2228 	.area CONST   (CODE)
      000049                       2229 ___str_8:
      000049 54 45 52 4D           2230 	.ascii "TERM"
      00004D 0D                    2231 	.db 0x0d
      00004E 0A                    2232 	.db 0x0a
      00004F 00                    2233 	.db 0x00
                                   2234 	.area CSEG    (CODE)
                                   2235 	.area XINIT   (CODE)
                                   2236 	.area CABS    (ABS,CODE)
