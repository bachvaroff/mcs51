                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print32x
                                     16 	.globl _print16x
                                     17 	.globl _printstr
                                     18 	.globl _getchar_poll
                                     19 	.globl _getchar
                                     20 	.globl _putchar
                                     21 	.globl _toupper
                                     22 	.globl ___memcpy
                                     23 	.globl _memset
                                     24 	.globl _srand
                                     25 	.globl _rand
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable bit register bank
                                    291 ;--------------------------------------------------------
                                    292 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        293 bits:
      000000                        294 	.ds 1
                           008000   295 	b0 = bits[0]
                           008100   296 	b1 = bits[1]
                           008200   297 	b2 = bits[2]
                           008300   298 	b3 = bits[3]
                           008400   299 	b4 = bits[4]
                           008500   300 	b5 = bits[5]
                           008600   301 	b6 = bits[6]
                           008700   302 	b7 = bits[7]
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 ;--------------------------------------------------------
                                    311 ; Stack segment in internal ram 
                                    312 ;--------------------------------------------------------
                                    313 	.area	SSEG
      000000                        314 __start__stack:
      000000                        315 	.ds	1
                                    316 
                                    317 ;--------------------------------------------------------
                                    318 ; indirectly addressable internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area ISEG    (DATA)
      000000                        321 _i0:
      000000                        322 	.ds 1
      000001                        323 _i1:
      000001                        324 	.ds 1
      000002                        325 _OE76:
      000002                        326 	.ds 1
      000003                        327 _x:
      000003                        328 	.ds 2
      000005                        329 _y:
      000005                        330 	.ds 2
      000007                        331 _n:
      000007                        332 	.ds 1
      000008                        333 _fixed:
      000008                        334 	.ds 1
      000009                        335 _cycle2:
      000009                        336 	.ds 1
      00000A                        337 _gen:
      00000A                        338 	.ds 4
      00000E                        339 _genc2:
      00000E                        340 	.ds 4
      000012                        341 _c2set:
      000012                        342 	.ds 1
      000013                        343 _pruni:
      000013                        344 	.ds 1
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
                           00E000   362 _RND	=	0xe000
                           00F006   363 _OEreg	=	0xf006
      000000                        364 _iu:
      000000                        365 	.ds 9216
      002400                        366 _pu:
      002400                        367 	.ds 9216
      004800                        368 _u:
      004800                        369 	.ds 9216
      006C00                        370 _nu:
      006C00                        371 	.ds 9216
                                    372 ;--------------------------------------------------------
                                    373 ; absolute external ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XABS    (ABS,XDATA)
                                    376 ;--------------------------------------------------------
                                    377 ; external initialized ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XISEG   (XDATA)
                                    380 	.area HOME    (CODE)
                                    381 	.area GSINIT0 (CODE)
                                    382 	.area GSINIT1 (CODE)
                                    383 	.area GSINIT2 (CODE)
                                    384 	.area GSINIT3 (CODE)
                                    385 	.area GSINIT4 (CODE)
                                    386 	.area GSINIT5 (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area CSEG    (CODE)
                                    390 ;--------------------------------------------------------
                                    391 ; interrupt vector 
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
      000000                        394 __interrupt_vect:
      000000 02r00r00         [24]  395 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  396 	ljmp	_int0
      000006                        397 	.ds	5
      00000B 32               [24]  398 	reti
      00000C                        399 	.ds	7
      000013 02r00r0C         [24]  400 	ljmp	_int1
                                    401 ;--------------------------------------------------------
                                    402 ; global & static initialisations
                                    403 ;--------------------------------------------------------
                                    404 	.area HOME    (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.area GSFINAL (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.globl __sdcc_gsinit_startup
                                    409 	.globl __sdcc_program_startup
                                    410 	.globl __start__stack
                                    411 	.globl __mcs51_genXINIT
                                    412 	.globl __mcs51_genXRAMCLEAR
                                    413 	.globl __mcs51_genRAMCLEAR
                                    414 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  415 	ljmp	__sdcc_program_startup
                                    416 ;--------------------------------------------------------
                                    417 ; Home
                                    418 ;--------------------------------------------------------
                                    419 	.area HOME    (CODE)
                                    420 	.area HOME    (CODE)
      000016                        421 __sdcc_program_startup:
      000016 02r01r2E         [24]  422 	ljmp	_main
                                    423 ;	return from main will return to caller
                                    424 ;--------------------------------------------------------
                                    425 ; code
                                    426 ;--------------------------------------------------------
                                    427 	.area CSEG    (CODE)
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 'int0'
                                    430 ;------------------------------------------------------------
                                    431 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    432 ;	-----------------------------------------
                                    433 ;	 function int0
                                    434 ;	-----------------------------------------
      000000                        435 _int0:
                           00000F   436 	ar7 = 0x0f
                           00000E   437 	ar6 = 0x0e
                           00000D   438 	ar5 = 0x0d
                           00000C   439 	ar4 = 0x0c
                           00000B   440 	ar3 = 0x0b
                           00000A   441 	ar2 = 0x0a
                           000009   442 	ar1 = 0x09
                           000008   443 	ar0 = 0x08
      000000 C0 D0            [24]  444 	push	psw
      000002 75 D0 08         [24]  445 	mov	psw,#0x08
                                    446 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  447 	mov	r0,#_i0
      000007 76 01            [12]  448 	mov	@r0,#0x01
                                    449 ;	life.c:15: }
      000009 D0 D0            [24]  450 	pop	psw
      00000B 32               [24]  451 	reti
                                    452 ;	eliminated unneeded push/pop dpl
                                    453 ;	eliminated unneeded push/pop dph
                                    454 ;	eliminated unneeded push/pop b
                                    455 ;	eliminated unneeded push/pop acc
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'int1'
                                    458 ;------------------------------------------------------------
                                    459 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    460 ;	-----------------------------------------
                                    461 ;	 function int1
                                    462 ;	-----------------------------------------
      00000C                        463 _int1:
      00000C C0 D0            [24]  464 	push	psw
      00000E 75 D0 08         [24]  465 	mov	psw,#0x08
                                    466 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  467 	mov	r0,#_i1
      000013 76 01            [12]  468 	mov	@r0,#0x01
                                    469 ;	life.c:19: }
      000015 D0 D0            [24]  470 	pop	psw
      000017 32               [24]  471 	reti
                                    472 ;	eliminated unneeded push/pop dpl
                                    473 ;	eliminated unneeded push/pop dph
                                    474 ;	eliminated unneeded push/pop b
                                    475 ;	eliminated unneeded push/pop acc
                                    476 ;------------------------------------------------------------
                                    477 ;Allocation info for local variables in function 'flashOE'
                                    478 ;------------------------------------------------------------
                                    479 ;	life.c:29: static void flashOE(void) {
                                    480 ;	-----------------------------------------
                                    481 ;	 function flashOE
                                    482 ;	-----------------------------------------
      000018                        483 _flashOE:
                           000007   484 	ar7 = 0x07
                           000006   485 	ar6 = 0x06
                           000005   486 	ar5 = 0x05
                           000004   487 	ar4 = 0x04
                           000003   488 	ar3 = 0x03
                           000002   489 	ar2 = 0x02
                           000001   490 	ar1 = 0x01
                           000000   491 	ar0 = 0x00
                                    492 ;	life.c:30: OEreg = OE76;
      000018 78r02            [12]  493 	mov	r0,#_OE76
      00001A 90 F0 06         [24]  494 	mov	dptr,#_OEreg
      00001D E6               [12]  495 	mov	a,@r0
      00001E F0               [24]  496 	movx	@dptr,a
                                    497 ;	life.c:32: return;
                                    498 ;	life.c:33: }
      00001F 22               [24]  499 	ret
                                    500 ;------------------------------------------------------------
                                    501 ;Allocation info for local variables in function 'show'
                                    502 ;------------------------------------------------------------
                                    503 ;universe                  Allocated to stack - _bp -5
                                    504 ;prflags                   Allocated to registers r7 
                                    505 ;------------------------------------------------------------
                                    506 ;	life.c:67: void show(char prflags, char *universe) {
                                    507 ;	-----------------------------------------
                                    508 ;	 function show
                                    509 ;	-----------------------------------------
      000020                        510 _show:
      000020 C0*00            [24]  511 	push	_bp
      000022 85 81*00         [24]  512 	mov	_bp,sp
                                    513 ;	life.c:68: if (prflags & PRCLR) printstr("\033[2J");
      000025 E5 82            [12]  514 	mov	a,dpl
      000027 FF               [12]  515 	mov	r7,a
      000028 30 E0 0D         [24]  516 	jnb	acc.0,00102$
      00002B 90r00r00         [24]  517 	mov	dptr,#___str_0
      00002E 75 F0 80         [24]  518 	mov	b,#0x80
      000031 C0 07            [24]  519 	push	ar7
      000033 12r00r00         [24]  520 	lcall	_printstr
      000036 D0 07            [24]  521 	pop	ar7
      000038                        522 00102$:
                                    523 ;	life.c:69: if (prflags & PRHDR) {
      000038 EF               [12]  524 	mov	a,r7
      000039 30 E1 4A         [24]  525 	jnb	acc.1,00106$
                                    526 ;	life.c:70: printstr("GEN ");
      00003C 90r00r05         [24]  527 	mov	dptr,#___str_1
      00003F 75 F0 80         [24]  528 	mov	b,#0x80
      000042 C0 07            [24]  529 	push	ar7
      000044 12r00r00         [24]  530 	lcall	_printstr
                                    531 ;	life.c:71: print32x(gen);
      000047 78r0A            [12]  532 	mov	r0,#_gen
      000049 86 82            [24]  533 	mov	dpl,@r0
      00004B 08               [12]  534 	inc	r0
      00004C 86 83            [24]  535 	mov	dph,@r0
      00004E 08               [12]  536 	inc	r0
      00004F 86 F0            [24]  537 	mov	b,@r0
      000051 08               [12]  538 	inc	r0
      000052 E6               [12]  539 	mov	a,@r0
      000053 12r00r00         [24]  540 	lcall	_print32x
      000056 D0 07            [24]  541 	pop	ar7
                                    542 ;	life.c:72: if (c2set) {
      000058 78r12            [12]  543 	mov	r0,#_c2set
      00005A E6               [12]  544 	mov	a,@r0
      00005B 60 1C            [24]  545 	jz	00104$
                                    546 ;	life.c:73: printstr(" CYCLE2 ");
      00005D 90r00r0A         [24]  547 	mov	dptr,#___str_2
      000060 75 F0 80         [24]  548 	mov	b,#0x80
      000063 C0 07            [24]  549 	push	ar7
      000065 12r00r00         [24]  550 	lcall	_printstr
                                    551 ;	life.c:74: print32x(genc2);
      000068 78r0E            [12]  552 	mov	r0,#_genc2
      00006A 86 82            [24]  553 	mov	dpl,@r0
      00006C 08               [12]  554 	inc	r0
      00006D 86 83            [24]  555 	mov	dph,@r0
      00006F 08               [12]  556 	inc	r0
      000070 86 F0            [24]  557 	mov	b,@r0
      000072 08               [12]  558 	inc	r0
      000073 E6               [12]  559 	mov	a,@r0
      000074 12r00r00         [24]  560 	lcall	_print32x
      000077 D0 07            [24]  561 	pop	ar7
      000079                        562 00104$:
                                    563 ;	life.c:76: printstr("\r\n");
      000079 90r00r13         [24]  564 	mov	dptr,#___str_3
      00007C 75 F0 80         [24]  565 	mov	b,#0x80
      00007F C0 07            [24]  566 	push	ar7
      000081 12r00r00         [24]  567 	lcall	_printstr
      000084 D0 07            [24]  568 	pop	ar7
      000086                        569 00106$:
                                    570 ;	life.c:78: if (prflags & PRUNI) {
      000086 EF               [12]  571 	mov	a,r7
      000087 20 E2 03         [24]  572 	jb	acc.2,00159$
      00008A 02r01r2B         [24]  573 	ljmp	00113$
      00008D                        574 00159$:
                                    575 ;	life.c:79: printstr("\033[?25l");
      00008D 90r00r16         [24]  576 	mov	dptr,#___str_4
      000090 75 F0 80         [24]  577 	mov	b,#0x80
      000093 12r00r00         [24]  578 	lcall	_printstr
                                    579 ;	life.c:80: for (x = 0; x < W; x++) {
      000096 78r03            [12]  580 	mov	r0,#_x
      000098 E4               [12]  581 	clr	a
      000099 F6               [12]  582 	mov	@r0,a
      00009A 08               [12]  583 	inc	r0
      00009B F6               [12]  584 	mov	@r0,a
      00009C                        585 00116$:
                                    586 ;	life.c:81: for (y = 0; y < H; y++)
      00009C 78r05            [12]  587 	mov	r0,#_y
      00009E E4               [12]  588 	clr	a
      00009F F6               [12]  589 	mov	@r0,a
      0000A0 08               [12]  590 	inc	r0
      0000A1 F6               [12]  591 	mov	@r0,a
      0000A2                        592 00114$:
                                    593 ;	life.c:82: if (universe[A2D(W, y, x)]) putchar((int)'1');
      0000A2 78r05            [12]  594 	mov	r0,#_y
      0000A4 E6               [12]  595 	mov	a,@r0
      0000A5 C0 E0            [24]  596 	push	acc
      0000A7 08               [12]  597 	inc	r0
      0000A8 E6               [12]  598 	mov	a,@r0
      0000A9 C0 E0            [24]  599 	push	acc
      0000AB 90 00 30         [24]  600 	mov	dptr,#0x0030
      0000AE 12r00r00         [24]  601 	lcall	__mulint
      0000B1 AE 82            [24]  602 	mov	r6,dpl
      0000B3 AF 83            [24]  603 	mov	r7,dph
      0000B5 15 81            [12]  604 	dec	sp
      0000B7 15 81            [12]  605 	dec	sp
      0000B9 78r03            [12]  606 	mov	r0,#_x
      0000BB E6               [12]  607 	mov	a,@r0
      0000BC 2E               [12]  608 	add	a,r6
      0000BD FE               [12]  609 	mov	r6,a
      0000BE 08               [12]  610 	inc	r0
      0000BF E6               [12]  611 	mov	a,@r0
      0000C0 3F               [12]  612 	addc	a,r7
      0000C1 FF               [12]  613 	mov	r7,a
      0000C2 E5*00            [12]  614 	mov	a,_bp
      0000C4 24 FB            [12]  615 	add	a,#0xfb
      0000C6 F8               [12]  616 	mov	r0,a
      0000C7 EE               [12]  617 	mov	a,r6
      0000C8 26               [12]  618 	add	a,@r0
      0000C9 FE               [12]  619 	mov	r6,a
      0000CA EF               [12]  620 	mov	a,r7
      0000CB 08               [12]  621 	inc	r0
      0000CC 36               [12]  622 	addc	a,@r0
      0000CD FF               [12]  623 	mov	r7,a
      0000CE 08               [12]  624 	inc	r0
      0000CF 86 05            [24]  625 	mov	ar5,@r0
      0000D1 8E 82            [24]  626 	mov	dpl,r6
      0000D3 8F 83            [24]  627 	mov	dph,r7
      0000D5 8D F0            [24]  628 	mov	b,r5
      0000D7 12r00r00         [24]  629 	lcall	__gptrget
      0000DA 60 08            [24]  630 	jz	00108$
      0000DC 90 00 31         [24]  631 	mov	dptr,#0x0031
      0000DF 12r00r00         [24]  632 	lcall	_putchar
      0000E2 80 06            [24]  633 	sjmp	00115$
      0000E4                        634 00108$:
                                    635 ;	life.c:83: else putchar((int)'0');
      0000E4 90 00 30         [24]  636 	mov	dptr,#0x0030
      0000E7 12r00r00         [24]  637 	lcall	_putchar
      0000EA                        638 00115$:
                                    639 ;	life.c:81: for (y = 0; y < H; y++)
      0000EA 78r05            [12]  640 	mov	r0,#_y
      0000EC 06               [12]  641 	inc	@r0
      0000ED B6 00 02         [24]  642 	cjne	@r0,#0x00,00161$
      0000F0 08               [12]  643 	inc	r0
      0000F1 06               [12]  644 	inc	@r0
      0000F2                        645 00161$:
      0000F2 78r05            [12]  646 	mov	r0,#_y
      0000F4 C3               [12]  647 	clr	c
      0000F5 E6               [12]  648 	mov	a,@r0
      0000F6 94 C0            [12]  649 	subb	a,#0xc0
      0000F8 08               [12]  650 	inc	r0
      0000F9 E6               [12]  651 	mov	a,@r0
      0000FA 64 80            [12]  652 	xrl	a,#0x80
      0000FC 94 80            [12]  653 	subb	a,#0x80
      0000FE 40 A2            [24]  654 	jc	00114$
                                    655 ;	life.c:84: printstr("\r\n");
      000100 90r00r13         [24]  656 	mov	dptr,#___str_3
      000103 75 F0 80         [24]  657 	mov	b,#0x80
      000106 12r00r00         [24]  658 	lcall	_printstr
                                    659 ;	life.c:80: for (x = 0; x < W; x++) {
      000109 78r03            [12]  660 	mov	r0,#_x
      00010B 06               [12]  661 	inc	@r0
      00010C B6 00 02         [24]  662 	cjne	@r0,#0x00,00163$
      00010F 08               [12]  663 	inc	r0
      000110 06               [12]  664 	inc	@r0
      000111                        665 00163$:
      000111 78r03            [12]  666 	mov	r0,#_x
      000113 C3               [12]  667 	clr	c
      000114 E6               [12]  668 	mov	a,@r0
      000115 94 30            [12]  669 	subb	a,#0x30
      000117 08               [12]  670 	inc	r0
      000118 E6               [12]  671 	mov	a,@r0
      000119 64 80            [12]  672 	xrl	a,#0x80
      00011B 94 80            [12]  673 	subb	a,#0x80
      00011D 50 03            [24]  674 	jnc	00164$
      00011F 02r00r9C         [24]  675 	ljmp	00116$
      000122                        676 00164$:
                                    677 ;	life.c:86: printstr("\033[?25h");
      000122 90r00r1D         [24]  678 	mov	dptr,#___str_5
      000125 75 F0 80         [24]  679 	mov	b,#0x80
      000128 12r00r00         [24]  680 	lcall	_printstr
      00012B                        681 00113$:
                                    682 ;	life.c:89: return;
                                    683 ;	life.c:90: }
      00012B D0*00            [24]  684 	pop	_bp
      00012D 22               [24]  685 	ret
                                    686 ;------------------------------------------------------------
                                    687 ;Allocation info for local variables in function 'main'
                                    688 ;------------------------------------------------------------
                                    689 ;c                         Allocated to registers r6 r7 
                                    690 ;nbits                     Allocated to registers r4 r5 
                                    691 ;c                         Allocated to stack - _bp +10
                                    692 ;sloc0                     Allocated to stack - _bp +1
                                    693 ;sloc1                     Allocated to stack - _bp +2
                                    694 ;sloc2                     Allocated to stack - _bp +4
                                    695 ;sloc3                     Allocated to stack - _bp +6
                                    696 ;sloc4                     Allocated to stack - _bp +8
                                    697 ;------------------------------------------------------------
                                    698 ;	life.c:194: void main(void) {
                                    699 ;	-----------------------------------------
                                    700 ;	 function main
                                    701 ;	-----------------------------------------
      00012E                        702 _main:
      00012E C0*00            [24]  703 	push	_bp
      000130 E5 81            [12]  704 	mov	a,sp
      000132 F5*00            [12]  705 	mov	_bp,a
      000134 24 0B            [12]  706 	add	a,#0x0b
      000136 F5 81            [12]  707 	mov	sp,a
                                    708 ;	life.c:197: IT0 = 1;
                                    709 ;	assignBit
      000138 D2 88            [12]  710 	setb	_IT0
                                    711 ;	life.c:198: IT1 = 1;
                                    712 ;	assignBit
      00013A D2 8A            [12]  713 	setb	_IT1
                                    714 ;	life.c:199: EX0 = 1;
                                    715 ;	assignBit
      00013C D2 A8            [12]  716 	setb	_EX0
                                    717 ;	life.c:200: EX1 = 1;
                                    718 ;	assignBit
      00013E D2 AA            [12]  719 	setb	_EX1
                                    720 ;	life.c:201: EA = 1;	
                                    721 ;	assignBit
      000140 D2 AF            [12]  722 	setb	_EA
                                    723 ;	life.c:202: P1_7 = 0;
                                    724 ;	assignBit
      000142 C2 97            [12]  725 	clr	_P1_7
                                    726 ;	life.c:207: __endasm;
      000144 00               [12]  727 	nop
      000145 00               [12]  728 	nop
      000146 00               [12]  729 	nop
                                    730 ;	life.c:209: srand(RND);
      000147 90 E0 00         [24]  731 	mov	dptr,#_RND
      00014A E0               [24]  732 	movx	a,@dptr
      00014B FE               [12]  733 	mov	r6,a
      00014C A3               [24]  734 	inc	dptr
      00014D E0               [24]  735 	movx	a,@dptr
      00014E FF               [12]  736 	mov	r7,a
      00014F 8E 82            [24]  737 	mov	dpl,r6
      000151 8F 83            [24]  738 	mov	dph,r7
      000153 12r00r00         [24]  739 	lcall	_srand
                                    740 ;	life.c:211: OE76 = OE76_0;
      000156 78r02            [12]  741 	mov	r0,#_OE76
      000158 76 3F            [12]  742 	mov	@r0,#0x3f
                                    743 ;	life.c:212: flashOE();
      00015A 12r00r18         [24]  744 	lcall	_flashOE
                                    745 ;	life.c:49: gen = 0ul;
      00015D 78r0A            [12]  746 	mov	r0,#_gen
      00015F E4               [12]  747 	clr	a
      000160 F6               [12]  748 	mov	@r0,a
      000161 08               [12]  749 	inc	r0
      000162 F6               [12]  750 	mov	@r0,a
      000163 08               [12]  751 	inc	r0
      000164 F6               [12]  752 	mov	@r0,a
      000165 08               [12]  753 	inc	r0
      000166 F6               [12]  754 	mov	@r0,a
                                    755 ;	life.c:50: genc2 = 0ul;
      000167 78r0E            [12]  756 	mov	r0,#_genc2
      000169 F6               [12]  757 	mov	@r0,a
      00016A 08               [12]  758 	inc	r0
      00016B F6               [12]  759 	mov	@r0,a
      00016C 08               [12]  760 	inc	r0
      00016D F6               [12]  761 	mov	@r0,a
      00016E 08               [12]  762 	inc	r0
      00016F F6               [12]  763 	mov	@r0,a
                                    764 ;	life.c:51: c2set = 0;
      000170 78r12            [12]  765 	mov	r0,#_c2set
      000172 76 00            [12]  766 	mov	@r0,#0x00
                                    767 ;	life.c:215: pruni = 1;
      000174 78r13            [12]  768 	mov	r0,#_pruni
      000176 76 01            [12]  769 	mov	@r0,#0x01
                                    770 ;	life.c:217: printstr("\033[?25h\033[m");
      000178 90r00r3E         [24]  771 	mov	dptr,#___str_9
      00017B 75 F0 80         [24]  772 	mov	b,#0x80
      00017E 12r00r00         [24]  773 	lcall	_printstr
                                    774 ;	life.c:219: for (i0 = 0; !i0; ) {
      000181 78r00            [12]  775 	mov	r0,#_i0
      000183 76 00            [12]  776 	mov	@r0,#0x00
                                    777 ;	life.c:220: while (1) {
      000185                        778 00127$:
                                    779 ;	life.c:221: printstr("LIFE I L R O P S U");
      000185 90r00r48         [24]  780 	mov	dptr,#___str_10
      000188 75 F0 80         [24]  781 	mov	b,#0x80
      00018B 12r00r00         [24]  782 	lcall	_printstr
                                    783 ;	life.c:222: putchar(pruni ? (int)'1' : (int)'0');
      00018E 78r13            [12]  784 	mov	r0,#_pruni
      000190 E6               [12]  785 	mov	a,@r0
      000191 60 06            [24]  786 	jz	00239$
      000193 7E 31            [12]  787 	mov	r6,#0x31
      000195 7F 00            [12]  788 	mov	r7,#0x00
      000197 80 04            [24]  789 	sjmp	00240$
      000199                        790 00239$:
      000199 7E 30            [12]  791 	mov	r6,#0x30
      00019B 7F 00            [12]  792 	mov	r7,#0x00
      00019D                        793 00240$:
      00019D 8E 82            [24]  794 	mov	dpl,r6
      00019F 8F 83            [24]  795 	mov	dph,r7
      0001A1 12r00r00         [24]  796 	lcall	_putchar
                                    797 ;	life.c:223: printstr(" B T\r\n");
      0001A4 90r00r5B         [24]  798 	mov	dptr,#___str_11
      0001A7 75 F0 80         [24]  799 	mov	b,#0x80
      0001AA 12r00r00         [24]  800 	lcall	_printstr
                                    801 ;	life.c:224: c = toupper(getchar());
      0001AD 12r00r00         [24]  802 	lcall	_getchar
      0001B0 12r00r00         [24]  803 	lcall	_toupper
      0001B3 AE 82            [24]  804 	mov	r6,dpl
      0001B5 AF 83            [24]  805 	mov	r7,dph
                                    806 ;	life.c:225: if (i0 || (c == (int)'T')) goto term;
      0001B7 78r00            [12]  807 	mov	r0,#_i0
      0001B9 E6               [12]  808 	mov	a,@r0
      0001BA 60 03            [24]  809 	jz	00458$
      0001BC 02r09r97         [24]  810 	ljmp	00154$
      0001BF                        811 00458$:
      0001BF BE 54 06         [24]  812 	cjne	r6,#0x54,00459$
      0001C2 BF 00 03         [24]  813 	cjne	r7,#0x00,00459$
      0001C5 02r09r97         [24]  814 	ljmp	00154$
      0001C8                        815 00459$:
                                    816 ;	life.c:226: else if ((c == (int)'I') || (c == (int)'L') || (c == (int)'R')) {
      0001C8 BE 49 05         [24]  817 	cjne	r6,#0x49,00460$
      0001CB BF 00 02         [24]  818 	cjne	r7,#0x00,00460$
      0001CE 80 13            [24]  819 	sjmp	00117$
      0001D0                        820 00460$:
      0001D0 BE 4C 05         [24]  821 	cjne	r6,#0x4c,00461$
      0001D3 BF 00 02         [24]  822 	cjne	r7,#0x00,00461$
      0001D6 80 0B            [24]  823 	sjmp	00117$
      0001D8                        824 00461$:
      0001D8 BE 52 05         [24]  825 	cjne	r6,#0x52,00462$
      0001DB BF 00 02         [24]  826 	cjne	r7,#0x00,00462$
      0001DE 80 03            [24]  827 	sjmp	00463$
      0001E0                        828 00462$:
      0001E0 02r04r0B         [24]  829 	ljmp	00118$
      0001E3                        830 00463$:
      0001E3                        831 00117$:
                                    832 ;	life.c:227: if (c == (int)'L') loadiu();
      0001E3 BE 4C 05         [24]  833 	cjne	r6,#0x4c,00464$
      0001E6 BF 00 02         [24]  834 	cjne	r7,#0x00,00464$
      0001E9 80 03            [24]  835 	sjmp	00465$
      0001EB                        836 00464$:
      0001EB 02r03r0F         [24]  837 	ljmp	00104$
      0001EE                        838 00465$:
                                    839 ;	life.c:102: printstr("LOAD 0 1 ~ # <");
      0001EE 90r00r24         [24]  840 	mov	dptr,#___str_6
      0001F1 75 F0 80         [24]  841 	mov	b,#0x80
      0001F4 12r00r00         [24]  842 	lcall	_printstr
                                    843 ;	life.c:104: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0001F7 7C 00            [12]  844 	mov	r4,#0x00
      0001F9 7D 00            [12]  845 	mov	r5,#0x00
      0001FB 78r05            [12]  846 	mov	r0,#_y
      0001FD E4               [12]  847 	clr	a
      0001FE F6               [12]  848 	mov	@r0,a
      0001FF 08               [12]  849 	inc	r0
      000200 F6               [12]  850 	mov	@r0,a
      000201                        851 00221$:
      000201 78r05            [12]  852 	mov	r0,#_y
      000203 C3               [12]  853 	clr	c
      000204 08               [12]  854 	inc	r0
      000205 E6               [12]  855 	mov	a,@r0
      000206 64 80            [12]  856 	xrl	a,#0x80
      000208 94 A4            [12]  857 	subb	a,#0xa4
      00020A 40 03            [24]  858 	jc	00466$
      00020C 02r02rCA         [24]  859 	ljmp	00181$
      00020F                        860 00466$:
                                    861 ;	life.c:105: for (x = 0; x < W; x++) {
      00020F 78r03            [12]  862 	mov	r0,#_x
      000211 E4               [12]  863 	clr	a
      000212 F6               [12]  864 	mov	@r0,a
      000213 08               [12]  865 	inc	r0
      000214 F6               [12]  866 	mov	@r0,a
                                    867 ;	life.c:106: while (1) {
      000215                        868 00168$:
                                    869 ;	life.c:107: c = getchar();
      000215 C0 05            [24]  870 	push	ar5
      000217 C0 04            [24]  871 	push	ar4
      000219 12r00r00         [24]  872 	lcall	_getchar
      00021C AA 82            [24]  873 	mov	r2,dpl
      00021E AB 83            [24]  874 	mov	r3,dph
      000220 D0 04            [24]  875 	pop	ar4
      000222 D0 05            [24]  876 	pop	ar5
      000224 E5*00            [12]  877 	mov	a,_bp
      000226 24 0A            [12]  878 	add	a,#0x0a
      000228 F8               [12]  879 	mov	r0,a
      000229 A6 02            [24]  880 	mov	@r0,ar2
      00022B 08               [12]  881 	inc	r0
      00022C A6 03            [24]  882 	mov	@r0,ar3
                                    883 ;	life.c:108: if (c == (int)'0') {
      00022E E5*00            [12]  884 	mov	a,_bp
      000230 24 0A            [12]  885 	add	a,#0x0a
      000232 F8               [12]  886 	mov	r0,a
      000233 B6 30 23         [24]  887 	cjne	@r0,#0x30,00166$
      000236 08               [12]  888 	inc	r0
      000237 B6 00 1F         [24]  889 	cjne	@r0,#0x00,00166$
                                    890 ;	life.c:109: iu[y + x] = 0;
      00023A 78r05            [12]  891 	mov	r0,#_y
      00023C 79r03            [12]  892 	mov	r1,#_x
      00023E E7               [12]  893 	mov	a,@r1
      00023F 26               [12]  894 	add	a,@r0
      000240 FA               [12]  895 	mov	r2,a
      000241 09               [12]  896 	inc	r1
      000242 E7               [12]  897 	mov	a,@r1
      000243 08               [12]  898 	inc	r0
      000244 36               [12]  899 	addc	a,@r0
      000245 FB               [12]  900 	mov	r3,a
      000246 EA               [12]  901 	mov	a,r2
      000247 24r00            [12]  902 	add	a,#_iu
      000249 F5 82            [12]  903 	mov	dpl,a
      00024B EB               [12]  904 	mov	a,r3
      00024C 34s00            [12]  905 	addc	a,#(_iu >> 8)
      00024E F5 83            [12]  906 	mov	dph,a
      000250 E4               [12]  907 	clr	a
      000251 F0               [24]  908 	movx	@dptr,a
                                    909 ;	life.c:110: nbits++;
      000252 0C               [12]  910 	inc	r4
                                    911 ;	life.c:111: break;
      000253 BC 00 4E         [24]  912 	cjne	r4,#0x00,00171$
      000256 0D               [12]  913 	inc	r5
      000257 80 4B            [24]  914 	sjmp	00171$
      000259                        915 00166$:
                                    916 ;	life.c:112: } else if (c == (int)'1') {
      000259 E5*00            [12]  917 	mov	a,_bp
      00025B 24 0A            [12]  918 	add	a,#0x0a
      00025D F8               [12]  919 	mov	r0,a
      00025E B6 31 24         [24]  920 	cjne	@r0,#0x31,00164$
      000261 08               [12]  921 	inc	r0
      000262 B6 00 20         [24]  922 	cjne	@r0,#0x00,00164$
                                    923 ;	life.c:113: iu[y + x] = 1;
      000265 78r05            [12]  924 	mov	r0,#_y
      000267 79r03            [12]  925 	mov	r1,#_x
      000269 E7               [12]  926 	mov	a,@r1
      00026A 26               [12]  927 	add	a,@r0
      00026B FA               [12]  928 	mov	r2,a
      00026C 09               [12]  929 	inc	r1
      00026D E7               [12]  930 	mov	a,@r1
      00026E 08               [12]  931 	inc	r0
      00026F 36               [12]  932 	addc	a,@r0
      000270 FB               [12]  933 	mov	r3,a
      000271 EA               [12]  934 	mov	a,r2
      000272 24r00            [12]  935 	add	a,#_iu
      000274 F5 82            [12]  936 	mov	dpl,a
      000276 EB               [12]  937 	mov	a,r3
      000277 34s00            [12]  938 	addc	a,#(_iu >> 8)
      000279 F5 83            [12]  939 	mov	dph,a
      00027B 74 01            [12]  940 	mov	a,#0x01
      00027D F0               [24]  941 	movx	@dptr,a
                                    942 ;	life.c:114: nbits++;
      00027E 0C               [12]  943 	inc	r4
                                    944 ;	life.c:115: break;
      00027F BC 00 22         [24]  945 	cjne	r4,#0x00,00171$
      000282 0D               [12]  946 	inc	r5
      000283 80 1F            [24]  947 	sjmp	00171$
      000285                        948 00164$:
                                    949 ;	life.c:116: } else if (c == (int)'~') goto br_inner;
      000285 E5*00            [12]  950 	mov	a,_bp
      000287 24 0A            [12]  951 	add	a,#0x0a
      000289 F8               [12]  952 	mov	r0,a
      00028A B6 7E 06         [24]  953 	cjne	@r0,#0x7e,00473$
      00028D 08               [12]  954 	inc	r0
      00028E B6 00 02         [24]  955 	cjne	@r0,#0x00,00473$
      000291 80 2A            [24]  956 	sjmp	00222$
      000293                        957 00473$:
                                    958 ;	life.c:117: else if (c == (int)'#') goto out;
      000293 E5*00            [12]  959 	mov	a,_bp
      000295 24 0A            [12]  960 	add	a,#0x0a
      000297 F8               [12]  961 	mov	r0,a
      000298 B6 23 06         [24]  962 	cjne	@r0,#0x23,00474$
      00029B 08               [12]  963 	inc	r0
      00029C B6 00 02         [24]  964 	cjne	@r0,#0x00,00474$
      00029F 80 29            [24]  965 	sjmp	00181$
      0002A1                        966 00474$:
      0002A1 02r02r15         [24]  967 	ljmp	00168$
                                    968 ;	life.c:121: break;
      0002A4                        969 00171$:
                                    970 ;	life.c:105: for (x = 0; x < W; x++) {
      0002A4 78r03            [12]  971 	mov	r0,#_x
      0002A6 06               [12]  972 	inc	@r0
      0002A7 B6 00 02         [24]  973 	cjne	@r0,#0x00,00475$
      0002AA 08               [12]  974 	inc	r0
      0002AB 06               [12]  975 	inc	@r0
      0002AC                        976 00475$:
      0002AC 78r03            [12]  977 	mov	r0,#_x
      0002AE C3               [12]  978 	clr	c
      0002AF E6               [12]  979 	mov	a,@r0
      0002B0 94 30            [12]  980 	subb	a,#0x30
      0002B2 08               [12]  981 	inc	r0
      0002B3 E6               [12]  982 	mov	a,@r0
      0002B4 64 80            [12]  983 	xrl	a,#0x80
      0002B6 94 80            [12]  984 	subb	a,#0x80
      0002B8 50 03            [24]  985 	jnc	00476$
      0002BA 02r02r15         [24]  986 	ljmp	00168$
      0002BD                        987 00476$:
      0002BD                        988 00222$:
                                    989 ;	life.c:104: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0002BD 78r05            [12]  990 	mov	r0,#_y
      0002BF 74 30            [12]  991 	mov	a,#0x30
      0002C1 26               [12]  992 	add	a,@r0
      0002C2 F6               [12]  993 	mov	@r0,a
      0002C3 E4               [12]  994 	clr	a
      0002C4 08               [12]  995 	inc	r0
      0002C5 36               [12]  996 	addc	a,@r0
      0002C6 F6               [12]  997 	mov	@r0,a
      0002C7 02r02r01         [24]  998 	ljmp	00221$
                                    999 ;	life.c:125: out:
      0002CA                       1000 00181$:
                                   1001 ;	life.c:126: if (c != (int)'#')
      0002CA E5*00            [12] 1002 	mov	a,_bp
      0002CC 24 0A            [12] 1003 	add	a,#0x0a
      0002CE F8               [12] 1004 	mov	r0,a
      0002CF B6 23 06         [24] 1005 	cjne	@r0,#0x23,00477$
      0002D2 08               [12] 1006 	inc	r0
      0002D3 B6 00 02         [24] 1007 	cjne	@r0,#0x00,00477$
      0002D6 80 25            [24] 1008 	sjmp	00180$
      0002D8                       1009 00477$:
                                   1010 ;	life.c:127: while (1) {
      0002D8                       1011 00177$:
                                   1012 ;	life.c:128: c = getchar();
      0002D8 C0 05            [24] 1013 	push	ar5
      0002DA C0 04            [24] 1014 	push	ar4
      0002DC 12r00r00         [24] 1015 	lcall	_getchar
      0002DF AA 82            [24] 1016 	mov	r2,dpl
      0002E1 AB 83            [24] 1017 	mov	r3,dph
      0002E3 D0 04            [24] 1018 	pop	ar4
      0002E5 D0 05            [24] 1019 	pop	ar5
      0002E7 E5*00            [12] 1020 	mov	a,_bp
      0002E9 24 0A            [12] 1021 	add	a,#0x0a
      0002EB F8               [12] 1022 	mov	r0,a
      0002EC A6 02            [24] 1023 	mov	@r0,ar2
      0002EE 08               [12] 1024 	inc	r0
      0002EF A6 03            [24] 1025 	mov	@r0,ar3
                                   1026 ;	life.c:129: if (c == (int)'#') break;
      0002F1 E5*00            [12] 1027 	mov	a,_bp
      0002F3 24 0A            [12] 1028 	add	a,#0x0a
      0002F5 F8               [12] 1029 	mov	r0,a
      0002F6 B6 23 DF         [24] 1030 	cjne	@r0,#0x23,00177$
      0002F9 08               [12] 1031 	inc	r0
      0002FA B6 00 DB         [24] 1032 	cjne	@r0,#0x00,00177$
      0002FD                       1033 00180$:
                                   1034 ;	life.c:131: print16x(nbits);
      0002FD 8C 82            [24] 1035 	mov	dpl,r4
      0002FF 8D 83            [24] 1036 	mov	dph,r5
      000301 12r00r00         [24] 1037 	lcall	_print16x
                                   1038 ;	life.c:132: printstr(">\r\n");
      000304 90r00r33         [24] 1039 	mov	dptr,#___str_7
      000307 75 F0 80         [24] 1040 	mov	b,#0x80
      00030A 12r00r00         [24] 1041 	lcall	_printstr
                                   1042 ;	life.c:227: if (c == (int)'L') loadiu();
      00030D 80 79            [24] 1043 	sjmp	00105$
      00030F                       1044 00104$:
                                   1045 ;	life.c:228: else if (c == (int)'R') loadriu();
      00030F BE 52 76         [24] 1046 	cjne	r6,#0x52,00105$
      000312 BF 00 73         [24] 1047 	cjne	r7,#0x00,00105$
                                   1048 ;	life.c:138: printstr("RANDOM");
      000315 90r00r37         [24] 1049 	mov	dptr,#___str_8
      000318 75 F0 80         [24] 1050 	mov	b,#0x80
      00031B 12r00r00         [24] 1051 	lcall	_printstr
                                   1052 ;	life.c:140: for (y = 0; y < (H * W); y += W)
      00031E 78r05            [12] 1053 	mov	r0,#_y
      000320 E4               [12] 1054 	clr	a
      000321 F6               [12] 1055 	mov	@r0,a
      000322 08               [12] 1056 	inc	r0
      000323 F6               [12] 1057 	mov	@r0,a
      000324                       1058 00225$:
                                   1059 ;	life.c:141: for (x = 0; x < W; x++)
      000324 78r03            [12] 1060 	mov	r0,#_x
      000326 E4               [12] 1061 	clr	a
      000327 F6               [12] 1062 	mov	@r0,a
      000328 08               [12] 1063 	inc	r0
      000329 F6               [12] 1064 	mov	@r0,a
      00032A                       1065 00223$:
                                   1066 ;	life.c:142: iu[y + x] = rand() & 1;
      00032A 78r05            [12] 1067 	mov	r0,#_y
      00032C 79r03            [12] 1068 	mov	r1,#_x
      00032E E7               [12] 1069 	mov	a,@r1
      00032F 26               [12] 1070 	add	a,@r0
      000330 FC               [12] 1071 	mov	r4,a
      000331 09               [12] 1072 	inc	r1
      000332 E7               [12] 1073 	mov	a,@r1
      000333 08               [12] 1074 	inc	r0
      000334 36               [12] 1075 	addc	a,@r0
      000335 FD               [12] 1076 	mov	r5,a
      000336 EC               [12] 1077 	mov	a,r4
      000337 24r00            [12] 1078 	add	a,#_iu
      000339 FC               [12] 1079 	mov	r4,a
      00033A ED               [12] 1080 	mov	a,r5
      00033B 34s00            [12] 1081 	addc	a,#(_iu >> 8)
      00033D FD               [12] 1082 	mov	r5,a
      00033E C0 05            [24] 1083 	push	ar5
      000340 C0 04            [24] 1084 	push	ar4
      000342 12r00r00         [24] 1085 	lcall	_rand
      000345 AA 82            [24] 1086 	mov	r2,dpl
      000347 D0 04            [24] 1087 	pop	ar4
      000349 D0 05            [24] 1088 	pop	ar5
      00034B 53 02 01         [24] 1089 	anl	ar2,#0x01
      00034E 8C 82            [24] 1090 	mov	dpl,r4
      000350 8D 83            [24] 1091 	mov	dph,r5
      000352 EA               [12] 1092 	mov	a,r2
      000353 F0               [24] 1093 	movx	@dptr,a
                                   1094 ;	life.c:141: for (x = 0; x < W; x++)
      000354 78r03            [12] 1095 	mov	r0,#_x
      000356 06               [12] 1096 	inc	@r0
      000357 B6 00 02         [24] 1097 	cjne	@r0,#0x00,00482$
      00035A 08               [12] 1098 	inc	r0
      00035B 06               [12] 1099 	inc	@r0
      00035C                       1100 00482$:
      00035C 78r03            [12] 1101 	mov	r0,#_x
      00035E C3               [12] 1102 	clr	c
      00035F E6               [12] 1103 	mov	a,@r0
      000360 94 30            [12] 1104 	subb	a,#0x30
      000362 08               [12] 1105 	inc	r0
      000363 E6               [12] 1106 	mov	a,@r0
      000364 64 80            [12] 1107 	xrl	a,#0x80
      000366 94 80            [12] 1108 	subb	a,#0x80
      000368 40 C0            [24] 1109 	jc	00223$
                                   1110 ;	life.c:140: for (y = 0; y < (H * W); y += W)
      00036A 78r05            [12] 1111 	mov	r0,#_y
      00036C 74 30            [12] 1112 	mov	a,#0x30
      00036E 26               [12] 1113 	add	a,@r0
      00036F F6               [12] 1114 	mov	@r0,a
      000370 E4               [12] 1115 	clr	a
      000371 08               [12] 1116 	inc	r0
      000372 36               [12] 1117 	addc	a,@r0
      000373 F6               [12] 1118 	mov	@r0,a
      000374 78r05            [12] 1119 	mov	r0,#_y
      000376 C3               [12] 1120 	clr	c
      000377 08               [12] 1121 	inc	r0
      000378 E6               [12] 1122 	mov	a,@r0
      000379 64 80            [12] 1123 	xrl	a,#0x80
      00037B 94 A4            [12] 1124 	subb	a,#0xa4
      00037D 40 A5            [24] 1125 	jc	00225$
                                   1126 ;	life.c:144: printstr("\r\n");
      00037F 90r00r13         [24] 1127 	mov	dptr,#___str_3
      000382 75 F0 80         [24] 1128 	mov	b,#0x80
      000385 12r00r00         [24] 1129 	lcall	_printstr
                                   1130 ;	life.c:228: else if (c == (int)'R') loadriu();
      000388                       1131 00105$:
                                   1132 ;	life.c:93: memset(u, 0, sizeof (u));
      000388 E4               [12] 1133 	clr	a
      000389 C0 E0            [24] 1134 	push	acc
      00038B 74 24            [12] 1135 	mov	a,#0x24
      00038D C0 E0            [24] 1136 	push	acc
      00038F E4               [12] 1137 	clr	a
      000390 C0 E0            [24] 1138 	push	acc
      000392 90r48r00         [24] 1139 	mov	dptr,#_u
      000395 75 F0 00         [24] 1140 	mov	b,#0x00
      000398 12r00r00         [24] 1141 	lcall	_memset
      00039B 15 81            [12] 1142 	dec	sp
      00039D 15 81            [12] 1143 	dec	sp
      00039F 15 81            [12] 1144 	dec	sp
                                   1145 ;	life.c:94: memset(pu, 0, sizeof (pu));
      0003A1 E4               [12] 1146 	clr	a
      0003A2 C0 E0            [24] 1147 	push	acc
      0003A4 74 24            [12] 1148 	mov	a,#0x24
      0003A6 C0 E0            [24] 1149 	push	acc
      0003A8 E4               [12] 1150 	clr	a
      0003A9 C0 E0            [24] 1151 	push	acc
      0003AB 90r24r00         [24] 1152 	mov	dptr,#_pu
      0003AE 75 F0 00         [24] 1153 	mov	b,#0x00
      0003B1 12r00r00         [24] 1154 	lcall	_memset
      0003B4 15 81            [12] 1155 	dec	sp
      0003B6 15 81            [12] 1156 	dec	sp
      0003B8 15 81            [12] 1157 	dec	sp
                                   1158 ;	life.c:49: gen = 0ul;
      0003BA 78r0A            [12] 1159 	mov	r0,#_gen
      0003BC E4               [12] 1160 	clr	a
      0003BD F6               [12] 1161 	mov	@r0,a
      0003BE 08               [12] 1162 	inc	r0
      0003BF F6               [12] 1163 	mov	@r0,a
      0003C0 08               [12] 1164 	inc	r0
      0003C1 F6               [12] 1165 	mov	@r0,a
      0003C2 08               [12] 1166 	inc	r0
      0003C3 F6               [12] 1167 	mov	@r0,a
                                   1168 ;	life.c:50: genc2 = 0ul;
      0003C4 78r0E            [12] 1169 	mov	r0,#_genc2
      0003C6 F6               [12] 1170 	mov	@r0,a
      0003C7 08               [12] 1171 	inc	r0
      0003C8 F6               [12] 1172 	mov	@r0,a
      0003C9 08               [12] 1173 	inc	r0
      0003CA F6               [12] 1174 	mov	@r0,a
      0003CB 08               [12] 1175 	inc	r0
      0003CC F6               [12] 1176 	mov	@r0,a
                                   1177 ;	life.c:51: c2set = 0;
      0003CD 78r12            [12] 1178 	mov	r0,#_c2set
      0003CF 76 00            [12] 1179 	mov	@r0,#0x00
                                   1180 ;	life.c:231: memcpy(u, iu, sizeof (iu));
      0003D1 C0 E0            [24] 1181 	push	acc
      0003D3 74 24            [12] 1182 	mov	a,#0x24
      0003D5 C0 E0            [24] 1183 	push	acc
      0003D7 74r00            [12] 1184 	mov	a,#_iu
      0003D9 C0 E0            [24] 1185 	push	acc
      0003DB 74s00            [12] 1186 	mov	a,#(_iu >> 8)
      0003DD C0 E0            [24] 1187 	push	acc
      0003DF E4               [12] 1188 	clr	a
      0003E0 C0 E0            [24] 1189 	push	acc
      0003E2 90r48r00         [24] 1190 	mov	dptr,#_u
      0003E5 75 F0 00         [24] 1191 	mov	b,#0x00
      0003E8 12r00r00         [24] 1192 	lcall	___memcpy
      0003EB E5 81            [12] 1193 	mov	a,sp
      0003ED 24 FB            [12] 1194 	add	a,#0xfb
      0003EF F5 81            [12] 1195 	mov	sp,a
                                   1196 ;	life.c:232: show(PRUNI, u);
      0003F1 74r00            [12] 1197 	mov	a,#_u
      0003F3 C0 E0            [24] 1198 	push	acc
      0003F5 74s48            [12] 1199 	mov	a,#(_u >> 8)
      0003F7 C0 E0            [24] 1200 	push	acc
      0003F9 E4               [12] 1201 	clr	a
      0003FA C0 E0            [24] 1202 	push	acc
      0003FC 75 82 04         [24] 1203 	mov	dpl,#0x04
      0003FF 12r00r20         [24] 1204 	lcall	_show
      000402 15 81            [12] 1205 	dec	sp
      000404 15 81            [12] 1206 	dec	sp
      000406 15 81            [12] 1207 	dec	sp
      000408 02r01r85         [24] 1208 	ljmp	00127$
      00040B                       1209 00118$:
                                   1210 ;	life.c:233: } else if (c == (int)'O') show(PRUNI, iu);
      00040B BE 4F 1D         [24] 1211 	cjne	r6,#0x4f,00115$
      00040E BF 00 1A         [24] 1212 	cjne	r7,#0x00,00115$
      000411 74r00            [12] 1213 	mov	a,#_iu
      000413 C0 E0            [24] 1214 	push	acc
      000415 74s00            [12] 1215 	mov	a,#(_iu >> 8)
      000417 C0 E0            [24] 1216 	push	acc
      000419 E4               [12] 1217 	clr	a
      00041A C0 E0            [24] 1218 	push	acc
      00041C 75 82 04         [24] 1219 	mov	dpl,#0x04
      00041F 12r00r20         [24] 1220 	lcall	_show
      000422 15 81            [12] 1221 	dec	sp
      000424 15 81            [12] 1222 	dec	sp
      000426 15 81            [12] 1223 	dec	sp
      000428 02r01r85         [24] 1224 	ljmp	00127$
      00042B                       1225 00115$:
                                   1226 ;	life.c:234: else if (c == (int)'P') show(PRHDR | PRUNI, u);
      00042B BE 50 1D         [24] 1227 	cjne	r6,#0x50,00112$
      00042E BF 00 1A         [24] 1228 	cjne	r7,#0x00,00112$
      000431 74r00            [12] 1229 	mov	a,#_u
      000433 C0 E0            [24] 1230 	push	acc
      000435 74s48            [12] 1231 	mov	a,#(_u >> 8)
      000437 C0 E0            [24] 1232 	push	acc
      000439 E4               [12] 1233 	clr	a
      00043A C0 E0            [24] 1234 	push	acc
      00043C 75 82 06         [24] 1235 	mov	dpl,#0x06
      00043F 12r00r20         [24] 1236 	lcall	_show
      000442 15 81            [12] 1237 	dec	sp
      000444 15 81            [12] 1238 	dec	sp
      000446 15 81            [12] 1239 	dec	sp
      000448 02r01r85         [24] 1240 	ljmp	00127$
      00044B                       1241 00112$:
                                   1242 ;	life.c:235: else if (c == (int)'U') pruni = !pruni;
      00044B BE 55 13         [24] 1243 	cjne	r6,#0x55,00109$
      00044E BF 00 10         [24] 1244 	cjne	r7,#0x00,00109$
      000451 78r13            [12] 1245 	mov	r0,#_pruni
      000453 E6               [12] 1246 	mov	a,@r0
      000454 B4 01 00         [24] 1247 	cjne	a,#0x01,00491$
      000457                       1248 00491$:
      000457 92*00            [24] 1249 	mov	b0,c
      000459 78r13            [12] 1250 	mov	r0,#_pruni
      00045B E4               [12] 1251 	clr	a
      00045C 33               [12] 1252 	rlc	a
      00045D F6               [12] 1253 	mov	@r0,a
      00045E 02r01r85         [24] 1254 	ljmp	00127$
      000461                       1255 00109$:
                                   1256 ;	life.c:236: else if (c == (int)'S') break;
      000461 BE 53 05         [24] 1257 	cjne	r6,#0x53,00492$
      000464 BF 00 02         [24] 1258 	cjne	r7,#0x00,00492$
      000467 80 03            [24] 1259 	sjmp	00493$
      000469                       1260 00492$:
      000469 02r01r85         [24] 1261 	ljmp	00127$
      00046C                       1262 00493$:
                                   1263 ;	life.c:239: for (i1 = 0; !i0 && !i1; ) {
      00046C 78r01            [12] 1264 	mov	r0,#_i1
      00046E 76 00            [12] 1265 	mov	@r0,#0x00
      000470                       1266 00233$:
      000470 78r00            [12] 1267 	mov	r0,#_i0
      000472 E6               [12] 1268 	mov	a,@r0
      000473 60 03            [24] 1269 	jz	00494$
      000475 02r09r6A         [24] 1270 	ljmp	00150$
      000478                       1271 00494$:
      000478 78r01            [12] 1272 	mov	r0,#_i1
      00047A E6               [12] 1273 	mov	a,@r0
      00047B 60 03            [24] 1274 	jz	00495$
      00047D 02r09r6A         [24] 1275 	ljmp	00150$
      000480                       1276 00495$:
                                   1277 ;	life.c:240: if (pruni) show(PRCLR | PRHDR | PRUNI, u);
      000480 78r13            [12] 1278 	mov	r0,#_pruni
      000482 E6               [12] 1279 	mov	a,@r0
      000483 60 19            [24] 1280 	jz	00130$
      000485 74r00            [12] 1281 	mov	a,#_u
      000487 C0 E0            [24] 1282 	push	acc
      000489 74s48            [12] 1283 	mov	a,#(_u >> 8)
      00048B C0 E0            [24] 1284 	push	acc
      00048D E4               [12] 1285 	clr	a
      00048E C0 E0            [24] 1286 	push	acc
      000490 75 82 07         [24] 1287 	mov	dpl,#0x07
      000493 12r00r20         [24] 1288 	lcall	_show
      000496 15 81            [12] 1289 	dec	sp
      000498 15 81            [12] 1290 	dec	sp
      00049A 15 81            [12] 1291 	dec	sp
      00049C 80 17            [24] 1292 	sjmp	00131$
      00049E                       1293 00130$:
                                   1294 ;	life.c:241: else show(PRHDR, u);
      00049E 74r00            [12] 1295 	mov	a,#_u
      0004A0 C0 E0            [24] 1296 	push	acc
      0004A2 74s48            [12] 1297 	mov	a,#(_u >> 8)
      0004A4 C0 E0            [24] 1298 	push	acc
      0004A6 E4               [12] 1299 	clr	a
      0004A7 C0 E0            [24] 1300 	push	acc
      0004A9 75 82 02         [24] 1301 	mov	dpl,#0x02
      0004AC 12r00r20         [24] 1302 	lcall	_show
      0004AF 15 81            [12] 1303 	dec	sp
      0004B1 15 81            [12] 1304 	dec	sp
      0004B3 15 81            [12] 1305 	dec	sp
      0004B5                       1306 00131$:
                                   1307 ;	life.c:57: gen++;
      0004B5 78r0A            [12] 1308 	mov	r0,#_gen
      0004B7 06               [12] 1309 	inc	@r0
      0004B8 B6 00 0C         [24] 1310 	cjne	@r0,#0x00,00497$
      0004BB 08               [12] 1311 	inc	r0
      0004BC 06               [12] 1312 	inc	@r0
      0004BD B6 00 07         [24] 1313 	cjne	@r0,#0x00,00497$
      0004C0 08               [12] 1314 	inc	r0
      0004C1 06               [12] 1315 	inc	@r0
      0004C2 B6 00 02         [24] 1316 	cjne	@r0,#0x00,00497$
      0004C5 08               [12] 1317 	inc	r0
      0004C6 06               [12] 1318 	inc	@r0
      0004C7                       1319 00497$:
                                   1320 ;	life.c:150: fixed = 0;
      0004C7 78r08            [12] 1321 	mov	r0,#_fixed
      0004C9 76 00            [12] 1322 	mov	@r0,#0x00
                                   1323 ;	life.c:151: cycle2 = 0;
      0004CB 78r09            [12] 1324 	mov	r0,#_cycle2
      0004CD 76 00            [12] 1325 	mov	@r0,#0x00
                                   1326 ;	life.c:153: OE76 = OE76_0;
      0004CF 78r02            [12] 1327 	mov	r0,#_OE76
      0004D1 76 3F            [12] 1328 	mov	@r0,#0x3f
                                   1329 ;	life.c:154: flashOE();
      0004D3 12r00r18         [24] 1330 	lcall	_flashOE
                                   1331 ;	life.c:156: for (y = 0; y < H; y++) {
      0004D6 78r05            [12] 1332 	mov	r0,#_y
      0004D8 E4               [12] 1333 	clr	a
      0004D9 F6               [12] 1334 	mov	@r0,a
      0004DA 08               [12] 1335 	inc	r0
      0004DB F6               [12] 1336 	mov	@r0,a
      0004DC                       1337 00229$:
                                   1338 ;	life.c:157: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      0004DC 78r05            [12] 1339 	mov	r0,#_y
      0004DE 86 07            [24] 1340 	mov	ar7,@r0
      0004E0 53 07 03         [24] 1341 	anl	ar7,#0x03
      0004E3 EF               [12] 1342 	mov	a,r7
      0004E4 03               [12] 1343 	rr	a
      0004E5 03               [12] 1344 	rr	a
      0004E6 54 C0            [12] 1345 	anl	a,#0xc0
      0004E8 FF               [12] 1346 	mov	r7,a
      0004E9 78r02            [12] 1347 	mov	r0,#_OE76
      0004EB 74 3F            [12] 1348 	mov	a,#0x3f
      0004ED 4F               [12] 1349 	orl	a,r7
      0004EE F6               [12] 1350 	mov	@r0,a
                                   1351 ;	life.c:158: flashOE();
      0004EF 12r00r18         [24] 1352 	lcall	_flashOE
                                   1353 ;	life.c:159: for (x = 0; x < W; x++) {
      0004F2 78r03            [12] 1354 	mov	r0,#_x
      0004F4 E4               [12] 1355 	clr	a
      0004F5 F6               [12] 1356 	mov	@r0,a
      0004F6 08               [12] 1357 	inc	r0
      0004F7 F6               [12] 1358 	mov	@r0,a
      0004F8                       1359 00227$:
                                   1360 ;	life.c:160: n = -u[A2D(W, y, x)];
      0004F8 78r05            [12] 1361 	mov	r0,#_y
      0004FA E6               [12] 1362 	mov	a,@r0
      0004FB C0 E0            [24] 1363 	push	acc
      0004FD 08               [12] 1364 	inc	r0
      0004FE E6               [12] 1365 	mov	a,@r0
      0004FF C0 E0            [24] 1366 	push	acc
      000501 90 00 30         [24] 1367 	mov	dptr,#0x0030
      000504 12r00r00         [24] 1368 	lcall	__mulint
      000507 C8               [12] 1369 	xch	a,r0
      000508 E5*00            [12] 1370 	mov	a,_bp
      00050A 24 04            [12] 1371 	add	a,#0x04
      00050C C8               [12] 1372 	xch	a,r0
      00050D A6 82            [24] 1373 	mov	@r0,dpl
      00050F 08               [12] 1374 	inc	r0
      000510 A6 83            [24] 1375 	mov	@r0,dph
      000512 15 81            [12] 1376 	dec	sp
      000514 15 81            [12] 1377 	dec	sp
      000516 E5*00            [12] 1378 	mov	a,_bp
      000518 24 04            [12] 1379 	add	a,#0x04
      00051A F8               [12] 1380 	mov	r0,a
      00051B 79r03            [12] 1381 	mov	r1,#_x
      00051D E7               [12] 1382 	mov	a,@r1
      00051E 26               [12] 1383 	add	a,@r0
      00051F C0 E0            [24] 1384 	push	acc
      000521 09               [12] 1385 	inc	r1
      000522 E7               [12] 1386 	mov	a,@r1
      000523 08               [12] 1387 	inc	r0
      000524 36               [12] 1388 	addc	a,@r0
      000525 C0 E0            [24] 1389 	push	acc
      000527 E5*00            [12] 1390 	mov	a,_bp
      000529 24 03            [12] 1391 	add	a,#0x03
      00052B F8               [12] 1392 	mov	r0,a
      00052C D0 E0            [24] 1393 	pop	acc
      00052E F6               [12] 1394 	mov	@r0,a
      00052F 18               [12] 1395 	dec	r0
      000530 D0 E0            [24] 1396 	pop	acc
      000532 F6               [12] 1397 	mov	@r0,a
      000533 A8*00            [24] 1398 	mov	r0,_bp
      000535 08               [12] 1399 	inc	r0
      000536 08               [12] 1400 	inc	r0
      000537 E6               [12] 1401 	mov	a,@r0
      000538 24r00            [12] 1402 	add	a,#_u
      00053A F5 82            [12] 1403 	mov	dpl,a
      00053C 08               [12] 1404 	inc	r0
      00053D E6               [12] 1405 	mov	a,@r0
      00053E 34s48            [12] 1406 	addc	a,#(_u >> 8)
      000540 F5 83            [12] 1407 	mov	dph,a
      000542 E0               [24] 1408 	movx	a,@dptr
      000543 FB               [12] 1409 	mov	r3,a
      000544 A8*00            [24] 1410 	mov	r0,_bp
      000546 08               [12] 1411 	inc	r0
      000547 C3               [12] 1412 	clr	c
      000548 E4               [12] 1413 	clr	a
      000549 9B               [12] 1414 	subb	a,r3
      00054A F6               [12] 1415 	mov	@r0,a
                                   1416 ;	life.c:165: UPDN(-1, -1);
      00054B 78r05            [12] 1417 	mov	r0,#_y
      00054D 74 BF            [12] 1418 	mov	a,#0xbf
      00054F 26               [12] 1419 	add	a,@r0
      000550 FA               [12] 1420 	mov	r2,a
      000551 E4               [12] 1421 	clr	a
      000552 08               [12] 1422 	inc	r0
      000553 36               [12] 1423 	addc	a,@r0
      000554 FB               [12] 1424 	mov	r3,a
      000555 74 C0            [12] 1425 	mov	a,#0xc0
      000557 C0 E0            [24] 1426 	push	acc
      000559 E4               [12] 1427 	clr	a
      00055A C0 E0            [24] 1428 	push	acc
      00055C 8A 82            [24] 1429 	mov	dpl,r2
      00055E 8B 83            [24] 1430 	mov	dph,r3
      000560 12r00r00         [24] 1431 	lcall	__modsint
      000563 AA 82            [24] 1432 	mov	r2,dpl
      000565 AB 83            [24] 1433 	mov	r3,dph
      000567 15 81            [12] 1434 	dec	sp
      000569 15 81            [12] 1435 	dec	sp
      00056B C0 02            [24] 1436 	push	ar2
      00056D C0 03            [24] 1437 	push	ar3
      00056F 90 00 30         [24] 1438 	mov	dptr,#0x0030
      000572 12r00r00         [24] 1439 	lcall	__mulint
      000575 AA 82            [24] 1440 	mov	r2,dpl
      000577 AB 83            [24] 1441 	mov	r3,dph
      000579 15 81            [12] 1442 	dec	sp
      00057B 15 81            [12] 1443 	dec	sp
      00057D 78r03            [12] 1444 	mov	r0,#_x
      00057F 74 2F            [12] 1445 	mov	a,#0x2f
      000581 26               [12] 1446 	add	a,@r0
      000582 FC               [12] 1447 	mov	r4,a
      000583 E4               [12] 1448 	clr	a
      000584 08               [12] 1449 	inc	r0
      000585 36               [12] 1450 	addc	a,@r0
      000586 FD               [12] 1451 	mov	r5,a
      000587 C0 03            [24] 1452 	push	ar3
      000589 C0 02            [24] 1453 	push	ar2
      00058B 74 30            [12] 1454 	mov	a,#0x30
      00058D C0 E0            [24] 1455 	push	acc
      00058F E4               [12] 1456 	clr	a
      000590 C0 E0            [24] 1457 	push	acc
      000592 8C 82            [24] 1458 	mov	dpl,r4
      000594 8D 83            [24] 1459 	mov	dph,r5
      000596 12r00r00         [24] 1460 	lcall	__modsint
      000599 AC 82            [24] 1461 	mov	r4,dpl
      00059B AD 83            [24] 1462 	mov	r5,dph
      00059D 15 81            [12] 1463 	dec	sp
      00059F 15 81            [12] 1464 	dec	sp
      0005A1 D0 02            [24] 1465 	pop	ar2
      0005A3 D0 03            [24] 1466 	pop	ar3
      0005A5 EC               [12] 1467 	mov	a,r4
      0005A6 2A               [12] 1468 	add	a,r2
      0005A7 FE               [12] 1469 	mov	r6,a
      0005A8 ED               [12] 1470 	mov	a,r5
      0005A9 3B               [12] 1471 	addc	a,r3
      0005AA FF               [12] 1472 	mov	r7,a
      0005AB EE               [12] 1473 	mov	a,r6
      0005AC 24r00            [12] 1474 	add	a,#_u
      0005AE F5 82            [12] 1475 	mov	dpl,a
      0005B0 EF               [12] 1476 	mov	a,r7
      0005B1 34s48            [12] 1477 	addc	a,#(_u >> 8)
      0005B3 F5 83            [12] 1478 	mov	dph,a
      0005B5 E0               [24] 1479 	movx	a,@dptr
      0005B6 FF               [12] 1480 	mov	r7,a
      0005B7 A8*00            [24] 1481 	mov	r0,_bp
      0005B9 08               [12] 1482 	inc	r0
      0005BA EF               [12] 1483 	mov	a,r7
      0005BB 26               [12] 1484 	add	a,@r0
      0005BC F6               [12] 1485 	mov	@r0,a
                                   1486 ;	life.c:166: UPDN(-1, 0);
      0005BD 78r03            [12] 1487 	mov	r0,#_x
      0005BF 74 30            [12] 1488 	mov	a,#0x30
      0005C1 26               [12] 1489 	add	a,@r0
      0005C2 FE               [12] 1490 	mov	r6,a
      0005C3 E4               [12] 1491 	clr	a
      0005C4 08               [12] 1492 	inc	r0
      0005C5 36               [12] 1493 	addc	a,@r0
      0005C6 FF               [12] 1494 	mov	r7,a
      0005C7 C0 05            [24] 1495 	push	ar5
      0005C9 C0 04            [24] 1496 	push	ar4
      0005CB C0 03            [24] 1497 	push	ar3
      0005CD C0 02            [24] 1498 	push	ar2
      0005CF 74 30            [12] 1499 	mov	a,#0x30
      0005D1 C0 E0            [24] 1500 	push	acc
      0005D3 E4               [12] 1501 	clr	a
      0005D4 C0 E0            [24] 1502 	push	acc
      0005D6 8E 82            [24] 1503 	mov	dpl,r6
      0005D8 8F 83            [24] 1504 	mov	dph,r7
      0005DA 12r00r00         [24] 1505 	lcall	__modsint
      0005DD C8               [12] 1506 	xch	a,r0
      0005DE E5*00            [12] 1507 	mov	a,_bp
      0005E0 24 06            [12] 1508 	add	a,#0x06
      0005E2 C8               [12] 1509 	xch	a,r0
      0005E3 A6 82            [24] 1510 	mov	@r0,dpl
      0005E5 08               [12] 1511 	inc	r0
      0005E6 A6 83            [24] 1512 	mov	@r0,dph
      0005E8 15 81            [12] 1513 	dec	sp
      0005EA 15 81            [12] 1514 	dec	sp
      0005EC D0 02            [24] 1515 	pop	ar2
      0005EE D0 03            [24] 1516 	pop	ar3
      0005F0 E5*00            [12] 1517 	mov	a,_bp
      0005F2 24 06            [12] 1518 	add	a,#0x06
      0005F4 F8               [12] 1519 	mov	r0,a
      0005F5 E6               [12] 1520 	mov	a,@r0
      0005F6 2A               [12] 1521 	add	a,r2
      0005F7 FE               [12] 1522 	mov	r6,a
      0005F8 08               [12] 1523 	inc	r0
      0005F9 E6               [12] 1524 	mov	a,@r0
      0005FA 3B               [12] 1525 	addc	a,r3
      0005FB FF               [12] 1526 	mov	r7,a
      0005FC EE               [12] 1527 	mov	a,r6
      0005FD 24r00            [12] 1528 	add	a,#_u
      0005FF F5 82            [12] 1529 	mov	dpl,a
      000601 EF               [12] 1530 	mov	a,r7
      000602 34s48            [12] 1531 	addc	a,#(_u >> 8)
      000604 F5 83            [12] 1532 	mov	dph,a
      000606 E0               [24] 1533 	movx	a,@dptr
      000607 FF               [12] 1534 	mov	r7,a
      000608 A8*00            [24] 1535 	mov	r0,_bp
      00060A 08               [12] 1536 	inc	r0
      00060B EF               [12] 1537 	mov	a,r7
      00060C 26               [12] 1538 	add	a,@r0
      00060D F6               [12] 1539 	mov	@r0,a
                                   1540 ;	life.c:167: UPDN(-1, 1);
      00060E 78r03            [12] 1541 	mov	r0,#_x
      000610 74 31            [12] 1542 	mov	a,#0x31
      000612 26               [12] 1543 	add	a,@r0
      000613 FE               [12] 1544 	mov	r6,a
      000614 E4               [12] 1545 	clr	a
      000615 08               [12] 1546 	inc	r0
      000616 36               [12] 1547 	addc	a,@r0
      000617 FF               [12] 1548 	mov	r7,a
      000618 C0 03            [24] 1549 	push	ar3
      00061A C0 02            [24] 1550 	push	ar2
      00061C 74 30            [12] 1551 	mov	a,#0x30
      00061E C0 E0            [24] 1552 	push	acc
      000620 E4               [12] 1553 	clr	a
      000621 C0 E0            [24] 1554 	push	acc
      000623 8E 82            [24] 1555 	mov	dpl,r6
      000625 8F 83            [24] 1556 	mov	dph,r7
      000627 12r00r00         [24] 1557 	lcall	__modsint
      00062A AE 82            [24] 1558 	mov	r6,dpl
      00062C AF 83            [24] 1559 	mov	r7,dph
      00062E 15 81            [12] 1560 	dec	sp
      000630 15 81            [12] 1561 	dec	sp
      000632 D0 02            [24] 1562 	pop	ar2
      000634 D0 03            [24] 1563 	pop	ar3
      000636 D0 04            [24] 1564 	pop	ar4
      000638 D0 05            [24] 1565 	pop	ar5
      00063A EE               [12] 1566 	mov	a,r6
      00063B 2A               [12] 1567 	add	a,r2
      00063C FA               [12] 1568 	mov	r2,a
      00063D EF               [12] 1569 	mov	a,r7
      00063E 3B               [12] 1570 	addc	a,r3
      00063F FB               [12] 1571 	mov	r3,a
      000640 EA               [12] 1572 	mov	a,r2
      000641 24r00            [12] 1573 	add	a,#_u
      000643 F5 82            [12] 1574 	mov	dpl,a
      000645 EB               [12] 1575 	mov	a,r3
      000646 34s48            [12] 1576 	addc	a,#(_u >> 8)
      000648 F5 83            [12] 1577 	mov	dph,a
      00064A E0               [24] 1578 	movx	a,@dptr
      00064B FB               [12] 1579 	mov	r3,a
      00064C A8*00            [24] 1580 	mov	r0,_bp
      00064E 08               [12] 1581 	inc	r0
      00064F EB               [12] 1582 	mov	a,r3
      000650 26               [12] 1583 	add	a,@r0
      000651 F6               [12] 1584 	mov	@r0,a
                                   1585 ;	life.c:168: UPDN(0, -1);
      000652 78r05            [12] 1586 	mov	r0,#_y
      000654 74 C0            [12] 1587 	mov	a,#0xc0
      000656 26               [12] 1588 	add	a,@r0
      000657 FA               [12] 1589 	mov	r2,a
      000658 E4               [12] 1590 	clr	a
      000659 08               [12] 1591 	inc	r0
      00065A 36               [12] 1592 	addc	a,@r0
      00065B FB               [12] 1593 	mov	r3,a
      00065C C0 07            [24] 1594 	push	ar7
      00065E C0 06            [24] 1595 	push	ar6
      000660 C0 05            [24] 1596 	push	ar5
      000662 C0 04            [24] 1597 	push	ar4
      000664 74 C0            [12] 1598 	mov	a,#0xc0
      000666 C0 E0            [24] 1599 	push	acc
      000668 E4               [12] 1600 	clr	a
      000669 C0 E0            [24] 1601 	push	acc
      00066B 8A 82            [24] 1602 	mov	dpl,r2
      00066D 8B 83            [24] 1603 	mov	dph,r3
      00066F 12r00r00         [24] 1604 	lcall	__modsint
      000672 AA 82            [24] 1605 	mov	r2,dpl
      000674 AB 83            [24] 1606 	mov	r3,dph
      000676 15 81            [12] 1607 	dec	sp
      000678 15 81            [12] 1608 	dec	sp
      00067A C0 02            [24] 1609 	push	ar2
      00067C C0 03            [24] 1610 	push	ar3
      00067E 90 00 30         [24] 1611 	mov	dptr,#0x0030
      000681 12r00r00         [24] 1612 	lcall	__mulint
      000684 C8               [12] 1613 	xch	a,r0
      000685 E5*00            [12] 1614 	mov	a,_bp
      000687 24 08            [12] 1615 	add	a,#0x08
      000689 C8               [12] 1616 	xch	a,r0
      00068A A6 82            [24] 1617 	mov	@r0,dpl
      00068C 08               [12] 1618 	inc	r0
      00068D A6 83            [24] 1619 	mov	@r0,dph
      00068F 15 81            [12] 1620 	dec	sp
      000691 15 81            [12] 1621 	dec	sp
      000693 D0 04            [24] 1622 	pop	ar4
      000695 D0 05            [24] 1623 	pop	ar5
      000697 D0 06            [24] 1624 	pop	ar6
      000699 D0 07            [24] 1625 	pop	ar7
      00069B E5*00            [12] 1626 	mov	a,_bp
      00069D 24 08            [12] 1627 	add	a,#0x08
      00069F F8               [12] 1628 	mov	r0,a
      0006A0 EC               [12] 1629 	mov	a,r4
      0006A1 26               [12] 1630 	add	a,@r0
      0006A2 FA               [12] 1631 	mov	r2,a
      0006A3 ED               [12] 1632 	mov	a,r5
      0006A4 08               [12] 1633 	inc	r0
      0006A5 36               [12] 1634 	addc	a,@r0
      0006A6 FB               [12] 1635 	mov	r3,a
      0006A7 EA               [12] 1636 	mov	a,r2
      0006A8 24r00            [12] 1637 	add	a,#_u
      0006AA F5 82            [12] 1638 	mov	dpl,a
      0006AC EB               [12] 1639 	mov	a,r3
      0006AD 34s48            [12] 1640 	addc	a,#(_u >> 8)
      0006AF F5 83            [12] 1641 	mov	dph,a
      0006B1 E0               [24] 1642 	movx	a,@dptr
      0006B2 FB               [12] 1643 	mov	r3,a
      0006B3 A8*00            [24] 1644 	mov	r0,_bp
      0006B5 08               [12] 1645 	inc	r0
      0006B6 EB               [12] 1646 	mov	a,r3
      0006B7 26               [12] 1647 	add	a,@r0
      0006B8 F6               [12] 1648 	mov	@r0,a
                                   1649 ;	life.c:169: UPDN(0, 0);
      0006B9 E5*00            [12] 1650 	mov	a,_bp
      0006BB 24 08            [12] 1651 	add	a,#0x08
      0006BD F8               [12] 1652 	mov	r0,a
      0006BE E5*00            [12] 1653 	mov	a,_bp
      0006C0 24 06            [12] 1654 	add	a,#0x06
      0006C2 F9               [12] 1655 	mov	r1,a
      0006C3 E7               [12] 1656 	mov	a,@r1
      0006C4 26               [12] 1657 	add	a,@r0
      0006C5 FA               [12] 1658 	mov	r2,a
      0006C6 09               [12] 1659 	inc	r1
      0006C7 E7               [12] 1660 	mov	a,@r1
      0006C8 08               [12] 1661 	inc	r0
      0006C9 36               [12] 1662 	addc	a,@r0
      0006CA FB               [12] 1663 	mov	r3,a
      0006CB EA               [12] 1664 	mov	a,r2
      0006CC 24r00            [12] 1665 	add	a,#_u
      0006CE F5 82            [12] 1666 	mov	dpl,a
      0006D0 EB               [12] 1667 	mov	a,r3
      0006D1 34s48            [12] 1668 	addc	a,#(_u >> 8)
      0006D3 F5 83            [12] 1669 	mov	dph,a
      0006D5 E0               [24] 1670 	movx	a,@dptr
      0006D6 FB               [12] 1671 	mov	r3,a
      0006D7 A8*00            [24] 1672 	mov	r0,_bp
      0006D9 08               [12] 1673 	inc	r0
      0006DA EB               [12] 1674 	mov	a,r3
      0006DB 26               [12] 1675 	add	a,@r0
      0006DC F6               [12] 1676 	mov	@r0,a
                                   1677 ;	life.c:170: UPDN(0, 1);
      0006DD E5*00            [12] 1678 	mov	a,_bp
      0006DF 24 08            [12] 1679 	add	a,#0x08
      0006E1 F8               [12] 1680 	mov	r0,a
      0006E2 EE               [12] 1681 	mov	a,r6
      0006E3 26               [12] 1682 	add	a,@r0
      0006E4 FA               [12] 1683 	mov	r2,a
      0006E5 EF               [12] 1684 	mov	a,r7
      0006E6 08               [12] 1685 	inc	r0
      0006E7 36               [12] 1686 	addc	a,@r0
      0006E8 FB               [12] 1687 	mov	r3,a
      0006E9 EA               [12] 1688 	mov	a,r2
      0006EA 24r00            [12] 1689 	add	a,#_u
      0006EC F5 82            [12] 1690 	mov	dpl,a
      0006EE EB               [12] 1691 	mov	a,r3
      0006EF 34s48            [12] 1692 	addc	a,#(_u >> 8)
      0006F1 F5 83            [12] 1693 	mov	dph,a
      0006F3 E0               [24] 1694 	movx	a,@dptr
      0006F4 FB               [12] 1695 	mov	r3,a
      0006F5 A8*00            [24] 1696 	mov	r0,_bp
      0006F7 08               [12] 1697 	inc	r0
      0006F8 E5*00            [12] 1698 	mov	a,_bp
      0006FA 24 08            [12] 1699 	add	a,#0x08
      0006FC F9               [12] 1700 	mov	r1,a
      0006FD EB               [12] 1701 	mov	a,r3
      0006FE 26               [12] 1702 	add	a,@r0
      0006FF F7               [12] 1703 	mov	@r1,a
                                   1704 ;	life.c:171: UPDN(1, -1);
      000700 78r05            [12] 1705 	mov	r0,#_y
      000702 74 C1            [12] 1706 	mov	a,#0xc1
      000704 26               [12] 1707 	add	a,@r0
      000705 FA               [12] 1708 	mov	r2,a
      000706 E4               [12] 1709 	clr	a
      000707 08               [12] 1710 	inc	r0
      000708 36               [12] 1711 	addc	a,@r0
      000709 FB               [12] 1712 	mov	r3,a
      00070A C0 07            [24] 1713 	push	ar7
      00070C C0 06            [24] 1714 	push	ar6
      00070E C0 05            [24] 1715 	push	ar5
      000710 C0 04            [24] 1716 	push	ar4
      000712 74 C0            [12] 1717 	mov	a,#0xc0
      000714 C0 E0            [24] 1718 	push	acc
      000716 E4               [12] 1719 	clr	a
      000717 C0 E0            [24] 1720 	push	acc
      000719 8A 82            [24] 1721 	mov	dpl,r2
      00071B 8B 83            [24] 1722 	mov	dph,r3
      00071D 12r00r00         [24] 1723 	lcall	__modsint
      000720 AA 82            [24] 1724 	mov	r2,dpl
      000722 AB 83            [24] 1725 	mov	r3,dph
      000724 15 81            [12] 1726 	dec	sp
      000726 15 81            [12] 1727 	dec	sp
      000728 C0 02            [24] 1728 	push	ar2
      00072A C0 03            [24] 1729 	push	ar3
      00072C 90 00 30         [24] 1730 	mov	dptr,#0x0030
      00072F 12r00r00         [24] 1731 	lcall	__mulint
      000732 AA 82            [24] 1732 	mov	r2,dpl
      000734 AB 83            [24] 1733 	mov	r3,dph
      000736 15 81            [12] 1734 	dec	sp
      000738 15 81            [12] 1735 	dec	sp
      00073A D0 04            [24] 1736 	pop	ar4
      00073C D0 05            [24] 1737 	pop	ar5
      00073E D0 06            [24] 1738 	pop	ar6
      000740 D0 07            [24] 1739 	pop	ar7
      000742 EC               [12] 1740 	mov	a,r4
      000743 2A               [12] 1741 	add	a,r2
      000744 FC               [12] 1742 	mov	r4,a
      000745 ED               [12] 1743 	mov	a,r5
      000746 3B               [12] 1744 	addc	a,r3
      000747 FD               [12] 1745 	mov	r5,a
      000748 EC               [12] 1746 	mov	a,r4
      000749 24r00            [12] 1747 	add	a,#_u
      00074B F5 82            [12] 1748 	mov	dpl,a
      00074D ED               [12] 1749 	mov	a,r5
      00074E 34s48            [12] 1750 	addc	a,#(_u >> 8)
      000750 F5 83            [12] 1751 	mov	dph,a
      000752 E0               [24] 1752 	movx	a,@dptr
      000753 FD               [12] 1753 	mov	r5,a
      000754 E5*00            [12] 1754 	mov	a,_bp
      000756 24 08            [12] 1755 	add	a,#0x08
      000758 F8               [12] 1756 	mov	r0,a
      000759 E5*00            [12] 1757 	mov	a,_bp
      00075B 24 08            [12] 1758 	add	a,#0x08
      00075D F9               [12] 1759 	mov	r1,a
      00075E ED               [12] 1760 	mov	a,r5
      00075F 26               [12] 1761 	add	a,@r0
      000760 F7               [12] 1762 	mov	@r1,a
                                   1763 ;	life.c:172: UPDN(1, 0);
      000761 E5*00            [12] 1764 	mov	a,_bp
      000763 24 06            [12] 1765 	add	a,#0x06
      000765 F8               [12] 1766 	mov	r0,a
      000766 E6               [12] 1767 	mov	a,@r0
      000767 2A               [12] 1768 	add	a,r2
      000768 FC               [12] 1769 	mov	r4,a
      000769 08               [12] 1770 	inc	r0
      00076A E6               [12] 1771 	mov	a,@r0
      00076B 3B               [12] 1772 	addc	a,r3
      00076C FD               [12] 1773 	mov	r5,a
      00076D EC               [12] 1774 	mov	a,r4
      00076E 24r00            [12] 1775 	add	a,#_u
      000770 F5 82            [12] 1776 	mov	dpl,a
      000772 ED               [12] 1777 	mov	a,r5
      000773 34s48            [12] 1778 	addc	a,#(_u >> 8)
      000775 F5 83            [12] 1779 	mov	dph,a
      000777 E0               [24] 1780 	movx	a,@dptr
      000778 FD               [12] 1781 	mov	r5,a
      000779 E5*00            [12] 1782 	mov	a,_bp
      00077B 24 08            [12] 1783 	add	a,#0x08
      00077D F8               [12] 1784 	mov	r0,a
      00077E ED               [12] 1785 	mov	a,r5
      00077F 26               [12] 1786 	add	a,@r0
      000780 FD               [12] 1787 	mov	r5,a
                                   1788 ;	life.c:173: UPDN(1, 1);
      000781 EE               [12] 1789 	mov	a,r6
      000782 2A               [12] 1790 	add	a,r2
      000783 FE               [12] 1791 	mov	r6,a
      000784 EF               [12] 1792 	mov	a,r7
      000785 3B               [12] 1793 	addc	a,r3
      000786 FF               [12] 1794 	mov	r7,a
      000787 EE               [12] 1795 	mov	a,r6
      000788 24r00            [12] 1796 	add	a,#_u
      00078A F5 82            [12] 1797 	mov	dpl,a
      00078C EF               [12] 1798 	mov	a,r7
      00078D 34s48            [12] 1799 	addc	a,#(_u >> 8)
      00078F F5 83            [12] 1800 	mov	dph,a
      000791 E0               [24] 1801 	movx	a,@dptr
      000792 2D               [12] 1802 	add	a,r5
      000793 FF               [12] 1803 	mov	r7,a
      000794 78r07            [12] 1804 	mov	r0,#_n
      000796 A6 07            [24] 1805 	mov	@r0,ar7
                                   1806 ;	life.c:176: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000798 A8*00            [24] 1807 	mov	r0,_bp
      00079A 08               [12] 1808 	inc	r0
      00079B 08               [12] 1809 	inc	r0
      00079C E6               [12] 1810 	mov	a,@r0
      00079D 24r00            [12] 1811 	add	a,#_nu
      00079F FD               [12] 1812 	mov	r5,a
      0007A0 08               [12] 1813 	inc	r0
      0007A1 E6               [12] 1814 	mov	a,@r0
      0007A2 34s6C            [12] 1815 	addc	a,#(_nu >> 8)
      0007A4 FE               [12] 1816 	mov	r6,a
      0007A5 BF 03 02         [24] 1817 	cjne	r7,#0x03,00498$
      0007A8 80 25            [24] 1818 	sjmp	00242$
      0007AA                       1819 00498$:
      0007AA BF 02 1E         [24] 1820 	cjne	r7,#0x02,00241$
      0007AD E5*00            [12] 1821 	mov	a,_bp
      0007AF 24 04            [12] 1822 	add	a,#0x04
      0007B1 F8               [12] 1823 	mov	r0,a
      0007B2 79r03            [12] 1824 	mov	r1,#_x
      0007B4 E7               [12] 1825 	mov	a,@r1
      0007B5 26               [12] 1826 	add	a,@r0
      0007B6 FC               [12] 1827 	mov	r4,a
      0007B7 09               [12] 1828 	inc	r1
      0007B8 E7               [12] 1829 	mov	a,@r1
      0007B9 08               [12] 1830 	inc	r0
      0007BA 36               [12] 1831 	addc	a,@r0
      0007BB FF               [12] 1832 	mov	r7,a
      0007BC EC               [12] 1833 	mov	a,r4
      0007BD 24r00            [12] 1834 	add	a,#_u
      0007BF FC               [12] 1835 	mov	r4,a
      0007C0 EF               [12] 1836 	mov	a,r7
      0007C1 34s48            [12] 1837 	addc	a,#(_u >> 8)
      0007C3 FF               [12] 1838 	mov	r7,a
      0007C4 8C 82            [24] 1839 	mov	dpl,r4
      0007C6 8F 83            [24] 1840 	mov	dph,r7
      0007C8 E0               [24] 1841 	movx	a,@dptr
      0007C9 70 04            [24] 1842 	jnz	00242$
      0007CB                       1843 00241$:
                                   1844 ;	assignBit
      0007CB C2*00            [12] 1845 	clr	b0
      0007CD 80 02            [24] 1846 	sjmp	00243$
      0007CF                       1847 00242$:
                                   1848 ;	assignBit
      0007CF D2*00            [12] 1849 	setb	b0
      0007D1                       1850 00243$:
      0007D1 A2*00            [12] 1851 	mov	c,b0
      0007D3 E4               [12] 1852 	clr	a
      0007D4 33               [12] 1853 	rlc	a
      0007D5 8D 82            [24] 1854 	mov	dpl,r5
      0007D7 8E 83            [24] 1855 	mov	dph,r6
      0007D9 F0               [24] 1856 	movx	@dptr,a
                                   1857 ;	life.c:177: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0007DA 78r05            [12] 1858 	mov	r0,#_y
      0007DC E6               [12] 1859 	mov	a,@r0
      0007DD C0 E0            [24] 1860 	push	acc
      0007DF 08               [12] 1861 	inc	r0
      0007E0 E6               [12] 1862 	mov	a,@r0
      0007E1 C0 E0            [24] 1863 	push	acc
      0007E3 90 00 30         [24] 1864 	mov	dptr,#0x0030
      0007E6 12r00r00         [24] 1865 	lcall	__mulint
      0007E9 AE 82            [24] 1866 	mov	r6,dpl
      0007EB AF 83            [24] 1867 	mov	r7,dph
      0007ED 15 81            [12] 1868 	dec	sp
      0007EF 15 81            [12] 1869 	dec	sp
      0007F1 78r03            [12] 1870 	mov	r0,#_x
      0007F3 E6               [12] 1871 	mov	a,@r0
      0007F4 2E               [12] 1872 	add	a,r6
      0007F5 FE               [12] 1873 	mov	r6,a
      0007F6 08               [12] 1874 	inc	r0
      0007F7 E6               [12] 1875 	mov	a,@r0
      0007F8 3F               [12] 1876 	addc	a,r7
      0007F9 FF               [12] 1877 	mov	r7,a
      0007FA EE               [12] 1878 	mov	a,r6
      0007FB 24r00            [12] 1879 	add	a,#_pu
      0007FD F5 82            [12] 1880 	mov	dpl,a
      0007FF EF               [12] 1881 	mov	a,r7
      000800 34s24            [12] 1882 	addc	a,#(_pu >> 8)
      000802 F5 83            [12] 1883 	mov	dph,a
      000804 E0               [24] 1884 	movx	a,@dptr
      000805 FD               [12] 1885 	mov	r5,a
      000806 EE               [12] 1886 	mov	a,r6
      000807 24r00            [12] 1887 	add	a,#_nu
      000809 F5 82            [12] 1888 	mov	dpl,a
      00080B EF               [12] 1889 	mov	a,r7
      00080C 34s6C            [12] 1890 	addc	a,#(_nu >> 8)
      00080E F5 83            [12] 1891 	mov	dph,a
      000810 E0               [24] 1892 	movx	a,@dptr
      000811 FC               [12] 1893 	mov	r4,a
      000812 6D               [12] 1894 	xrl	a,r5
      000813 78r09            [12] 1895 	mov	r0,#_cycle2
      000815 46               [12] 1896 	orl	a,@r0
      000816 F6               [12] 1897 	mov	@r0,a
                                   1898 ;	life.c:178: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000817 EE               [12] 1899 	mov	a,r6
      000818 24r00            [12] 1900 	add	a,#_u
      00081A F5 82            [12] 1901 	mov	dpl,a
      00081C EF               [12] 1902 	mov	a,r7
      00081D 34s48            [12] 1903 	addc	a,#(_u >> 8)
      00081F F5 83            [12] 1904 	mov	dph,a
      000821 E0               [24] 1905 	movx	a,@dptr
      000822 FF               [12] 1906 	mov	r7,a
      000823 EC               [12] 1907 	mov	a,r4
      000824 6F               [12] 1908 	xrl	a,r7
      000825 78r08            [12] 1909 	mov	r0,#_fixed
      000827 46               [12] 1910 	orl	a,@r0
      000828 F6               [12] 1911 	mov	@r0,a
                                   1912 ;	life.c:159: for (x = 0; x < W; x++) {
      000829 78r03            [12] 1913 	mov	r0,#_x
      00082B 06               [12] 1914 	inc	@r0
      00082C B6 00 02         [24] 1915 	cjne	@r0,#0x00,00502$
      00082F 08               [12] 1916 	inc	r0
      000830 06               [12] 1917 	inc	@r0
      000831                       1918 00502$:
      000831 78r03            [12] 1919 	mov	r0,#_x
      000833 C3               [12] 1920 	clr	c
      000834 E6               [12] 1921 	mov	a,@r0
      000835 94 30            [12] 1922 	subb	a,#0x30
      000837 08               [12] 1923 	inc	r0
      000838 E6               [12] 1924 	mov	a,@r0
      000839 64 80            [12] 1925 	xrl	a,#0x80
      00083B 94 80            [12] 1926 	subb	a,#0x80
      00083D 50 03            [24] 1927 	jnc	00503$
      00083F 02r04rF8         [24] 1928 	ljmp	00227$
      000842                       1929 00503$:
                                   1930 ;	life.c:156: for (y = 0; y < H; y++) {
      000842 78r05            [12] 1931 	mov	r0,#_y
      000844 06               [12] 1932 	inc	@r0
      000845 B6 00 02         [24] 1933 	cjne	@r0,#0x00,00504$
      000848 08               [12] 1934 	inc	r0
      000849 06               [12] 1935 	inc	@r0
      00084A                       1936 00504$:
      00084A 78r05            [12] 1937 	mov	r0,#_y
      00084C C3               [12] 1938 	clr	c
      00084D E6               [12] 1939 	mov	a,@r0
      00084E 94 C0            [12] 1940 	subb	a,#0xc0
      000850 08               [12] 1941 	inc	r0
      000851 E6               [12] 1942 	mov	a,@r0
      000852 64 80            [12] 1943 	xrl	a,#0x80
      000854 94 80            [12] 1944 	subb	a,#0x80
      000856 50 03            [24] 1945 	jnc	00505$
      000858 02r04rDC         [24] 1946 	ljmp	00229$
      00085B                       1947 00505$:
                                   1948 ;	life.c:182: OE76 = OE76_0;
      00085B 78r02            [12] 1949 	mov	r0,#_OE76
      00085D 76 3F            [12] 1950 	mov	@r0,#0x3f
                                   1951 ;	life.c:183: flashOE();
      00085F 12r00r18         [24] 1952 	lcall	_flashOE
                                   1953 ;	life.c:185: cycle2 = !cycle2;
      000862 78r09            [12] 1954 	mov	r0,#_cycle2
      000864 E6               [12] 1955 	mov	a,@r0
      000865 B4 01 00         [24] 1956 	cjne	a,#0x01,00506$
      000868                       1957 00506$:
      000868 92*00            [24] 1958 	mov	b0,c
      00086A 78r09            [12] 1959 	mov	r0,#_cycle2
      00086C E4               [12] 1960 	clr	a
      00086D 33               [12] 1961 	rlc	a
      00086E F6               [12] 1962 	mov	@r0,a
                                   1963 ;	life.c:186: fixed = !fixed;
      00086F 78r08            [12] 1964 	mov	r0,#_fixed
      000871 E6               [12] 1965 	mov	a,@r0
      000872 B4 01 00         [24] 1966 	cjne	a,#0x01,00507$
      000875                       1967 00507$:
      000875 92*00            [24] 1968 	mov	b0,c
      000877 78r08            [12] 1969 	mov	r0,#_fixed
      000879 E4               [12] 1970 	clr	a
      00087A 33               [12] 1971 	rlc	a
      00087B F6               [12] 1972 	mov	@r0,a
                                   1973 ;	life.c:188: memcpy(pu, u, sizeof (u));
      00087C E4               [12] 1974 	clr	a
      00087D C0 E0            [24] 1975 	push	acc
      00087F 74 24            [12] 1976 	mov	a,#0x24
      000881 C0 E0            [24] 1977 	push	acc
      000883 74r00            [12] 1978 	mov	a,#_u
      000885 C0 E0            [24] 1979 	push	acc
      000887 74s48            [12] 1980 	mov	a,#(_u >> 8)
      000889 C0 E0            [24] 1981 	push	acc
      00088B E4               [12] 1982 	clr	a
      00088C C0 E0            [24] 1983 	push	acc
      00088E 90r24r00         [24] 1984 	mov	dptr,#_pu
      000891 75 F0 00         [24] 1985 	mov	b,#0x00
      000894 12r00r00         [24] 1986 	lcall	___memcpy
      000897 E5 81            [12] 1987 	mov	a,sp
      000899 24 FB            [12] 1988 	add	a,#0xfb
      00089B F5 81            [12] 1989 	mov	sp,a
                                   1990 ;	life.c:189: memcpy(u, nu, sizeof (nu));
      00089D E4               [12] 1991 	clr	a
      00089E C0 E0            [24] 1992 	push	acc
      0008A0 74 24            [12] 1993 	mov	a,#0x24
      0008A2 C0 E0            [24] 1994 	push	acc
      0008A4 74r00            [12] 1995 	mov	a,#_nu
      0008A6 C0 E0            [24] 1996 	push	acc
      0008A8 74s6C            [12] 1997 	mov	a,#(_nu >> 8)
      0008AA C0 E0            [24] 1998 	push	acc
      0008AC E4               [12] 1999 	clr	a
      0008AD C0 E0            [24] 2000 	push	acc
      0008AF 90r48r00         [24] 2001 	mov	dptr,#_u
      0008B2 75 F0 00         [24] 2002 	mov	b,#0x00
      0008B5 12r00r00         [24] 2003 	lcall	___memcpy
      0008B8 E5 81            [12] 2004 	mov	a,sp
      0008BA 24 FB            [12] 2005 	add	a,#0xfb
      0008BC F5 81            [12] 2006 	mov	sp,a
                                   2007 ;	life.c:244: if (fixed || cycle2) {
      0008BE 78r08            [12] 2008 	mov	r0,#_fixed
      0008C0 E6               [12] 2009 	mov	a,@r0
      0008C1 70 05            [24] 2010 	jnz	00137$
      0008C3 78r09            [12] 2011 	mov	r0,#_cycle2
      0008C5 E6               [12] 2012 	mov	a,@r0
      0008C6 60 4A            [24] 2013 	jz	00138$
      0008C8                       2014 00137$:
                                   2015 ;	life.c:245: if (fixed) {
      0008C8 78r08            [12] 2016 	mov	r0,#_fixed
      0008CA E6               [12] 2017 	mov	a,@r0
      0008CB 60 22            [24] 2018 	jz	00135$
                                   2019 ;	life.c:246: printstr("FIXED AT ");
      0008CD 90r00r62         [24] 2020 	mov	dptr,#___str_12
      0008D0 75 F0 80         [24] 2021 	mov	b,#0x80
      0008D3 12r00r00         [24] 2022 	lcall	_printstr
                                   2023 ;	life.c:247: show(PRHDR, u);
      0008D6 74r00            [12] 2024 	mov	a,#_u
      0008D8 C0 E0            [24] 2025 	push	acc
      0008DA 74s48            [12] 2026 	mov	a,#(_u >> 8)
      0008DC C0 E0            [24] 2027 	push	acc
      0008DE E4               [12] 2028 	clr	a
      0008DF C0 E0            [24] 2029 	push	acc
      0008E1 75 82 02         [24] 2030 	mov	dpl,#0x02
      0008E4 12r00r20         [24] 2031 	lcall	_show
      0008E7 15 81            [12] 2032 	dec	sp
      0008E9 15 81            [12] 2033 	dec	sp
      0008EB 15 81            [12] 2034 	dec	sp
                                   2035 ;	life.c:248: break;
      0008ED 80 7B            [24] 2036 	sjmp	00150$
      0008EF                       2037 00135$:
                                   2038 ;	life.c:249: } else if (!c2set) {
      0008EF 78r12            [12] 2039 	mov	r0,#_c2set
      0008F1 E6               [12] 2040 	mov	a,@r0
      0008F2 70 1E            [24] 2041 	jnz	00138$
                                   2042 ;	life.c:250: genc2 = gen;
      0008F4 78r0A            [12] 2043 	mov	r0,#_gen
      0008F6 86 04            [24] 2044 	mov	ar4,@r0
      0008F8 08               [12] 2045 	inc	r0
      0008F9 86 05            [24] 2046 	mov	ar5,@r0
      0008FB 08               [12] 2047 	inc	r0
      0008FC 86 06            [24] 2048 	mov	ar6,@r0
      0008FE 08               [12] 2049 	inc	r0
      0008FF 86 07            [24] 2050 	mov	ar7,@r0
      000901 78r0E            [12] 2051 	mov	r0,#_genc2
      000903 A6 04            [24] 2052 	mov	@r0,ar4
      000905 08               [12] 2053 	inc	r0
      000906 A6 05            [24] 2054 	mov	@r0,ar5
      000908 08               [12] 2055 	inc	r0
      000909 A6 06            [24] 2056 	mov	@r0,ar6
      00090B 08               [12] 2057 	inc	r0
      00090C A6 07            [24] 2058 	mov	@r0,ar7
                                   2059 ;	life.c:251: c2set = 1;
      00090E 78r12            [12] 2060 	mov	r0,#_c2set
      000910 76 01            [12] 2061 	mov	@r0,#0x01
      000912                       2062 00138$:
                                   2063 ;	life.c:255: c = getchar_poll();
      000912 12r00r00         [24] 2064 	lcall	_getchar_poll
      000915 AE 82            [24] 2065 	mov	r6,dpl
      000917 AF 83            [24] 2066 	mov	r7,dph
                                   2067 ;	life.c:256: if (c > 0) {
      000919 C3               [12] 2068 	clr	c
      00091A E4               [12] 2069 	clr	a
      00091B 9E               [12] 2070 	subb	a,r6
      00091C 74 80            [12] 2071 	mov	a,#(0x00 ^ 0x80)
      00091E 8F F0            [24] 2072 	mov	b,r7
      000920 63 F0 80         [24] 2073 	xrl	b,#0x80
      000923 95 F0            [12] 2074 	subb	a,b
      000925 40 03            [24] 2075 	jc	00512$
      000927 02r04r70         [24] 2076 	ljmp	00233$
      00092A                       2077 00512$:
                                   2078 ;	life.c:257: c = toupper(c);
      00092A 8E 82            [24] 2079 	mov	dpl,r6
      00092C 8F 83            [24] 2080 	mov	dph,r7
      00092E 12r00r00         [24] 2081 	lcall	_toupper
      000931 AE 82            [24] 2082 	mov	r6,dpl
      000933 AF 83            [24] 2083 	mov	r7,dph
                                   2084 ;	life.c:258: if (c == (int)'U') pruni = !pruni;
      000935 BE 55 13         [24] 2085 	cjne	r6,#0x55,00146$
      000938 BF 00 10         [24] 2086 	cjne	r7,#0x00,00146$
      00093B 78r13            [12] 2087 	mov	r0,#_pruni
      00093D E6               [12] 2088 	mov	a,@r0
      00093E B4 01 00         [24] 2089 	cjne	a,#0x01,00515$
      000941                       2090 00515$:
      000941 92*00            [24] 2091 	mov	b0,c
      000943 78r13            [12] 2092 	mov	r0,#_pruni
      000945 E4               [12] 2093 	clr	a
      000946 33               [12] 2094 	rlc	a
      000947 F6               [12] 2095 	mov	@r0,a
      000948 02r04r70         [24] 2096 	ljmp	00233$
      00094B                       2097 00146$:
                                   2098 ;	life.c:259: else if (c == (int)'T') i0 = 1;
      00094B BE 54 0A         [24] 2099 	cjne	r6,#0x54,00143$
      00094E BF 00 07         [24] 2100 	cjne	r7,#0x00,00143$
      000951 78r00            [12] 2101 	mov	r0,#_i0
      000953 76 01            [12] 2102 	mov	@r0,#0x01
      000955 02r04r70         [24] 2103 	ljmp	00233$
      000958                       2104 00143$:
                                   2105 ;	life.c:260: else if (c == (int)'B') i1 = 1;
      000958 BE 42 05         [24] 2106 	cjne	r6,#0x42,00518$
      00095B BF 00 02         [24] 2107 	cjne	r7,#0x00,00518$
      00095E 80 03            [24] 2108 	sjmp	00519$
      000960                       2109 00518$:
      000960 02r04r70         [24] 2110 	ljmp	00233$
      000963                       2111 00519$:
      000963 78r01            [12] 2112 	mov	r0,#_i1
      000965 76 01            [12] 2113 	mov	@r0,#0x01
      000967 02r04r70         [24] 2114 	ljmp	00233$
      00096A                       2115 00150$:
                                   2116 ;	life.c:264: if (i1) {
      00096A 78r01            [12] 2117 	mov	r0,#_i1
      00096C E6               [12] 2118 	mov	a,@r0
      00096D 60 20            [24] 2119 	jz	00236$
                                   2120 ;	life.c:265: printstr("BREAK AT ");
      00096F 90r00r6C         [24] 2121 	mov	dptr,#___str_13
      000972 75 F0 80         [24] 2122 	mov	b,#0x80
      000975 12r00r00         [24] 2123 	lcall	_printstr
                                   2124 ;	life.c:266: show(PRHDR, u);
      000978 74r00            [12] 2125 	mov	a,#_u
      00097A C0 E0            [24] 2126 	push	acc
      00097C 74s48            [12] 2127 	mov	a,#(_u >> 8)
      00097E C0 E0            [24] 2128 	push	acc
      000980 E4               [12] 2129 	clr	a
      000981 C0 E0            [24] 2130 	push	acc
      000983 75 82 02         [24] 2131 	mov	dpl,#0x02
      000986 12r00r20         [24] 2132 	lcall	_show
      000989 15 81            [12] 2133 	dec	sp
      00098B 15 81            [12] 2134 	dec	sp
      00098D 15 81            [12] 2135 	dec	sp
      00098F                       2136 00236$:
                                   2137 ;	life.c:219: for (i0 = 0; !i0; ) {
      00098F 78r00            [12] 2138 	mov	r0,#_i0
      000991 E6               [12] 2139 	mov	a,@r0
      000992 70 03            [24] 2140 	jnz	00521$
      000994 02r01r85         [24] 2141 	ljmp	00127$
      000997                       2142 00521$:
                                   2143 ;	life.c:270: term:
      000997                       2144 00154$:
                                   2145 ;	life.c:271: EA = 0;
                                   2146 ;	assignBit
      000997 C2 AF            [12] 2147 	clr	_EA
                                   2148 ;	life.c:272: printstr("TERM\r\n");
      000999 90r00r76         [24] 2149 	mov	dptr,#___str_14
      00099C 75 F0 80         [24] 2150 	mov	b,#0x80
      00099F 12r00r00         [24] 2151 	lcall	_printstr
                                   2152 ;	life.c:274: PCON |= 2;
      0009A2 43 87 02         [24] 2153 	orl	_PCON,#0x02
                                   2154 ;	life.c:276: return;
                                   2155 ;	life.c:277: }
      0009A5 85*00 81         [24] 2156 	mov	sp,_bp
      0009A8 D0*00            [24] 2157 	pop	_bp
      0009AA 22               [24] 2158 	ret
                                   2159 	.area CSEG    (CODE)
                                   2160 	.area CONST   (CODE)
                                   2161 	.area CONST   (CODE)
      000000                       2162 ___str_0:
      000000 1B                    2163 	.db 0x1b
      000001 5B 32 4A              2164 	.ascii "[2J"
      000004 00                    2165 	.db 0x00
                                   2166 	.area CSEG    (CODE)
                                   2167 	.area CONST   (CODE)
      000005                       2168 ___str_1:
      000005 47 45 4E 20           2169 	.ascii "GEN "
      000009 00                    2170 	.db 0x00
                                   2171 	.area CSEG    (CODE)
                                   2172 	.area CONST   (CODE)
      00000A                       2173 ___str_2:
      00000A 20 43 59 43 4C 45 32  2174 	.ascii " CYCLE2 "
             20
      000012 00                    2175 	.db 0x00
                                   2176 	.area CSEG    (CODE)
                                   2177 	.area CONST   (CODE)
      000013                       2178 ___str_3:
      000013 0D                    2179 	.db 0x0d
      000014 0A                    2180 	.db 0x0a
      000015 00                    2181 	.db 0x00
                                   2182 	.area CSEG    (CODE)
                                   2183 	.area CONST   (CODE)
      000016                       2184 ___str_4:
      000016 1B                    2185 	.db 0x1b
      000017 5B 3F 32 35 6C        2186 	.ascii "[?25l"
      00001C 00                    2187 	.db 0x00
                                   2188 	.area CSEG    (CODE)
                                   2189 	.area CONST   (CODE)
      00001D                       2190 ___str_5:
      00001D 1B                    2191 	.db 0x1b
      00001E 5B 3F 32 35 68        2192 	.ascii "[?25h"
      000023 00                    2193 	.db 0x00
                                   2194 	.area CSEG    (CODE)
                                   2195 	.area CONST   (CODE)
      000024                       2196 ___str_6:
      000024 4C 4F 41 44 20 30 20  2197 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000032 00                    2198 	.db 0x00
                                   2199 	.area CSEG    (CODE)
                                   2200 	.area CONST   (CODE)
      000033                       2201 ___str_7:
      000033 3E                    2202 	.ascii ">"
      000034 0D                    2203 	.db 0x0d
      000035 0A                    2204 	.db 0x0a
      000036 00                    2205 	.db 0x00
                                   2206 	.area CSEG    (CODE)
                                   2207 	.area CONST   (CODE)
      000037                       2208 ___str_8:
      000037 52 41 4E 44 4F 4D     2209 	.ascii "RANDOM"
      00003D 00                    2210 	.db 0x00
                                   2211 	.area CSEG    (CODE)
                                   2212 	.area CONST   (CODE)
      00003E                       2213 ___str_9:
      00003E 1B                    2214 	.db 0x1b
      00003F 5B 3F 32 35 68        2215 	.ascii "[?25h"
      000044 1B                    2216 	.db 0x1b
      000045 5B 6D                 2217 	.ascii "[m"
      000047 00                    2218 	.db 0x00
                                   2219 	.area CSEG    (CODE)
                                   2220 	.area CONST   (CODE)
      000048                       2221 ___str_10:
      000048 4C 49 46 45 20 49 20  2222 	.ascii "LIFE I L R O P S U"
             4C 20 52 20 4F 20 50
             20 53 20 55
      00005A 00                    2223 	.db 0x00
                                   2224 	.area CSEG    (CODE)
                                   2225 	.area CONST   (CODE)
      00005B                       2226 ___str_11:
      00005B 20 42 20 54           2227 	.ascii " B T"
      00005F 0D                    2228 	.db 0x0d
      000060 0A                    2229 	.db 0x0a
      000061 00                    2230 	.db 0x00
                                   2231 	.area CSEG    (CODE)
                                   2232 	.area CONST   (CODE)
      000062                       2233 ___str_12:
      000062 46 49 58 45 44 20 41  2234 	.ascii "FIXED AT "
             54 20
      00006B 00                    2235 	.db 0x00
                                   2236 	.area CSEG    (CODE)
                                   2237 	.area CONST   (CODE)
      00006C                       2238 ___str_13:
      00006C 42 52 45 41 4B 20 41  2239 	.ascii "BREAK AT "
             54 20
      000075 00                    2240 	.db 0x00
                                   2241 	.area CSEG    (CODE)
                                   2242 	.area CONST   (CODE)
      000076                       2243 ___str_14:
      000076 54 45 52 4D           2244 	.ascii "TERM"
      00007A 0D                    2245 	.db 0x0d
      00007B 0A                    2246 	.db 0x0a
      00007C 00                    2247 	.db 0x00
                                   2248 	.area CSEG    (CODE)
                                   2249 	.area XINIT   (CODE)
                                   2250 	.area CABS    (ABS,CODE)
