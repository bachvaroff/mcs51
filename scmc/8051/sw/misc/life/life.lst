                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _generation
                                    143 	.globl _cycle2
                                    144 	.globl _fixed
                                    145 	.globl _n
                                    146 	.globl _bstep
                                    147 	.globl _c
                                    148 	.globl _j
                                    149 	.globl _y1
                                    150 	.globl _x1
                                    151 	.globl _y
                                    152 	.globl _x
                                    153 	.globl _nu
                                    154 	.globl _u
                                    155 	.globl _pu
                                    156 	.globl _i1
                                    157 	.globl _i0
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 1
      000001                        349 _i1::
      000001                        350 	.ds 1
      000002                        351 _pu::
      000002                        352 	.ds 1024
      000402                        353 _u::
      000402                        354 	.ds 1024
      000802                        355 _nu::
      000802                        356 	.ds 1024
      000C02                        357 _x::
      000C02                        358 	.ds 2
      000C04                        359 _y::
      000C04                        360 	.ds 2
      000C06                        361 _x1::
      000C06                        362 	.ds 2
      000C08                        363 _y1::
      000C08                        364 	.ds 2
      000C0A                        365 _j::
      000C0A                        366 	.ds 2
      000C0C                        367 _c::
      000C0C                        368 	.ds 2
      000C0E                        369 _bstep::
      000C0E                        370 	.ds 1
      000C0F                        371 _n::
      000C0F                        372 	.ds 1
      000C10                        373 _fixed::
      000C10                        374 	.ds 1
      000C11                        375 _cycle2::
      000C11                        376 	.ds 1
      000C12                        377 _generation::
      000C12                        378 	.ds 4
                                    379 ;--------------------------------------------------------
                                    380 ; absolute external ram data
                                    381 ;--------------------------------------------------------
                                    382 	.area XABS    (ABS,XDATA)
                                    383 ;--------------------------------------------------------
                                    384 ; external initialized ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area XISEG   (XDATA)
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT0 (CODE)
                                    389 	.area GSINIT1 (CODE)
                                    390 	.area GSINIT2 (CODE)
                                    391 	.area GSINIT3 (CODE)
                                    392 	.area GSINIT4 (CODE)
                                    393 	.area GSINIT5 (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.area GSFINAL (CODE)
                                    396 	.area CSEG    (CODE)
                                    397 ;--------------------------------------------------------
                                    398 ; interrupt vector 
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
      000000                        401 __interrupt_vect:
      000000 02r00r00         [24]  402 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  403 	ljmp	_int0
      000006                        404 	.ds	5
      00000B 32               [24]  405 	reti
      00000C                        406 	.ds	7
      000013 02r00r21         [24]  407 	ljmp	_int1
                                    408 ;--------------------------------------------------------
                                    409 ; global & static initialisations
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area GSINIT  (CODE)
                                    413 	.area GSFINAL (CODE)
                                    414 	.area GSINIT  (CODE)
                                    415 	.globl __sdcc_gsinit_startup
                                    416 	.globl __sdcc_program_startup
                                    417 	.globl __start__stack
                                    418 	.globl __mcs51_genXINIT
                                    419 	.globl __mcs51_genXRAMCLEAR
                                    420 	.globl __mcs51_genRAMCLEAR
                                    421 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  422 	ljmp	__sdcc_program_startup
                                    423 ;--------------------------------------------------------
                                    424 ; Home
                                    425 ;--------------------------------------------------------
                                    426 	.area HOME    (CODE)
                                    427 	.area HOME    (CODE)
      000016                        428 __sdcc_program_startup:
      000016 02r02r99         [24]  429 	ljmp	_main
                                    430 ;	return from main will return to caller
                                    431 ;--------------------------------------------------------
                                    432 ; code
                                    433 ;--------------------------------------------------------
                                    434 	.area CSEG    (CODE)
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'putchar'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers 
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:7: int putchar(int c) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function putchar
                                    443 ;	-----------------------------------------
      000000                        444 _putchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:12: __endasm;
      000000 E5 82            [12]  447 	mov	a, dpl
      000002 02 00 30         [24]  448 	ljmp	0x0030
                                    449 ;	life.c:13: }
                                    450 ;	naked function: no epilogue.
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'getchar'
                                    453 ;------------------------------------------------------------
                                    454 ;	life.c:15: int getchar(void) __naked {
                                    455 ;	-----------------------------------------
                                    456 ;	 function getchar
                                    457 ;	-----------------------------------------
      000005                        458 _getchar:
                                    459 ;	naked function: no prologue.
                                    460 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  461 	lcall	0x0032
      000008 F5 82            [12]  462 	mov	dpl, a
      00000A 75 83 00         [24]  463 	mov	dph, #0
      00000D 22               [24]  464 	ret
                                    465 ;	life.c:22: }
                                    466 ;	naked function: no epilogue.
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:65: void int0(void) __interrupt 0 __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000E                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000E C0 E0            [24]  483 	push	acc
      000010 C0 82            [24]  484 	push	dpl
      000012 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  487 	mov	dptr,#_i0
      000017 74 01            [12]  488 	mov	a,#0x01
      000019 F0               [24]  489 	movx	@dptr,a
                                    490 ;	life.c:67: }
      00001A D0 83            [24]  491 	pop	dph
      00001C D0 82            [24]  492 	pop	dpl
      00001E D0 E0            [24]  493 	pop	acc
      000020 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop psw
                                    497 ;	eliminated unneeded push/pop b
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int1'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:69: void int1(void) __interrupt 2 __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int1
                                    504 ;	-----------------------------------------
      000021                        505 _int1:
      000021 C0 E0            [24]  506 	push	acc
      000023 C0 82            [24]  507 	push	dpl
      000025 C0 83            [24]  508 	push	dph
                                    509 ;	life.c:70: i1 = 1;
      000027 90r00r01         [24]  510 	mov	dptr,#_i1
      00002A 74 01            [12]  511 	mov	a,#0x01
      00002C F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:71: }
      00002D D0 83            [24]  514 	pop	dph
      00002F D0 82            [24]  515 	pop	dpl
      000031 D0 E0            [24]  516 	pop	acc
      000033 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;hdr                       Allocated to registers r7 
                                    525 ;__1966080005              Allocated to registers 
                                    526 ;s                         Allocated to registers r5 r6 r7 
                                    527 ;__1310720001              Allocated to registers r6 r7 
                                    528 ;a                         Allocated to registers 
                                    529 ;__1310720003              Allocated to registers r6 r7 
                                    530 ;a                         Allocated to registers 
                                    531 ;__1966080008              Allocated to registers 
                                    532 ;s                         Allocated to registers r5 r6 r7 
                                    533 ;__2621440011              Allocated to registers 
                                    534 ;s                         Allocated to registers r5 r6 r7 
                                    535 ;------------------------------------------------------------
                                    536 ;	life.c:94: void show(char hdr) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function show
                                    539 ;	-----------------------------------------
      000034                        540 _show:
                           000007   541 	ar7 = 0x07
                           000006   542 	ar6 = 0x06
                           000005   543 	ar5 = 0x05
                           000004   544 	ar4 = 0x04
                           000003   545 	ar3 = 0x03
                           000002   546 	ar2 = 0x02
                           000001   547 	ar1 = 0x01
                           000000   548 	ar0 = 0x00
                                    549 ;	life.c:95: if (hdr) {
      000034 E5 82            [12]  550 	mov	a,dpl
      000036 FF               [12]  551 	mov	r7,a
      000037 70 03            [24]  552 	jnz	00190$
      000039 02r01rDA         [24]  553 	ljmp	00102$
      00003C                        554 00190$:
                                    555 ;	life.c:96: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  556 	mov	r5,#___str_0
      00003E 7Es00            [12]  557 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  558 	mov	r7,#0x80
                                    559 ;	life.c:48: return;
      000042                        560 00121$:
                                    561 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  562 	mov	dpl,r5
      000044 8E 83            [24]  563 	mov	dph,r6
      000046 8F F0            [24]  564 	mov	b,r7
      000048 12r00r00         [24]  565 	lcall	__gptrget
      00004B FC               [12]  566 	mov	r4,a
      00004C 60 10            [24]  567 	jz	00109$
      00004E 7B 00            [12]  568 	mov	r3,#0x00
      000050 8C 82            [24]  569 	mov	dpl,r4
      000052 8B 83            [24]  570 	mov	dph,r3
      000054 12r00r00         [24]  571 	lcall	_putchar
      000057 0D               [12]  572 	inc	r5
                                    573 ;	life.c:96: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  574 	cjne	r5,#0x00,00121$
      00005B 0E               [12]  575 	inc	r6
      00005C 80 E4            [24]  576 	sjmp	00121$
      00005E                        577 00109$:
                                    578 ;	life.c:88: print16x(generation[1]);
      00005E 90r0Cr14         [24]  579 	mov	dptr,#(_generation + 0x0002)
      000061 E0               [24]  580 	movx	a,@dptr
      000062 FE               [12]  581 	mov	r6,a
      000063 A3               [24]  582 	inc	dptr
      000064 E0               [24]  583 	movx	a,@dptr
                                    584 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000065 FF               [12]  585 	mov	r7,a
      000066 C4               [12]  586 	swap	a
      000067 54 0F            [12]  587 	anl	a,#0x0f
      000069 30 E3 02         [24]  588 	jnb	acc.3,00193$
      00006C 44 F0            [12]  589 	orl	a,#0xf0
      00006E                        590 00193$:
      00006E FC               [12]  591 	mov	r4,a
      00006F 33               [12]  592 	rlc	a
      000070 95 E0            [12]  593 	subb	a,acc
      000072 53 04 0F         [24]  594 	anl	ar4,#0x0f
      000075 7D 00            [12]  595 	mov	r5,#0x00
      000077 EC               [12]  596 	mov	a,r4
      000078 24r00            [12]  597 	add	a,#_digits
      00007A F5 82            [12]  598 	mov	dpl,a
      00007C ED               [12]  599 	mov	a,r5
      00007D 34s00            [12]  600 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  601 	mov	dph,a
      000081 E4               [12]  602 	clr	a
      000082 93               [24]  603 	movc	a,@a+dptr
      000083 FD               [12]  604 	mov	r5,a
      000084 7C 00            [12]  605 	mov	r4,#0x00
      000086 8D 82            [24]  606 	mov	dpl,r5
      000088 8C 83            [24]  607 	mov	dph,r4
      00008A 12r00r00         [24]  608 	lcall	_putchar
                                    609 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 05            [24]  610 	mov	ar5,r7
      00008F 53 05 0F         [24]  611 	anl	ar5,#0x0f
      000092 7C 00            [12]  612 	mov	r4,#0x00
      000094 ED               [12]  613 	mov	a,r5
      000095 24r00            [12]  614 	add	a,#_digits
      000097 F5 82            [12]  615 	mov	dpl,a
      000099 EC               [12]  616 	mov	a,r4
      00009A 34s00            [12]  617 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  618 	mov	dph,a
      00009E E4               [12]  619 	clr	a
      00009F 93               [24]  620 	movc	a,@a+dptr
      0000A0 FD               [12]  621 	mov	r5,a
      0000A1 7C 00            [12]  622 	mov	r4,#0x00
      0000A3 8D 82            [24]  623 	mov	dpl,r5
      0000A5 8C 83            [24]  624 	mov	dph,r4
      0000A7 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8E 04            [24]  627 	mov	ar4,r6
      0000AC EF               [12]  628 	mov	a,r7
      0000AD C4               [12]  629 	swap	a
      0000AE CC               [12]  630 	xch	a,r4
      0000AF C4               [12]  631 	swap	a
      0000B0 54 0F            [12]  632 	anl	a,#0x0f
      0000B2 6C               [12]  633 	xrl	a,r4
      0000B3 CC               [12]  634 	xch	a,r4
      0000B4 54 0F            [12]  635 	anl	a,#0x0f
      0000B6 CC               [12]  636 	xch	a,r4
      0000B7 6C               [12]  637 	xrl	a,r4
      0000B8 CC               [12]  638 	xch	a,r4
      0000B9 30 E3 02         [24]  639 	jnb	acc.3,00194$
      0000BC 44 F0            [12]  640 	orl	a,#0xf0
      0000BE                        641 00194$:
      0000BE 53 04 0F         [24]  642 	anl	ar4,#0x0f
      0000C1 7D 00            [12]  643 	mov	r5,#0x00
      0000C3 EC               [12]  644 	mov	a,r4
      0000C4 24r00            [12]  645 	add	a,#_digits
      0000C6 F5 82            [12]  646 	mov	dpl,a
      0000C8 ED               [12]  647 	mov	a,r5
      0000C9 34s00            [12]  648 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  649 	mov	dph,a
      0000CD E4               [12]  650 	clr	a
      0000CE 93               [24]  651 	movc	a,@a+dptr
      0000CF FD               [12]  652 	mov	r5,a
      0000D0 7C 00            [12]  653 	mov	r4,#0x00
      0000D2 8D 82            [24]  654 	mov	dpl,r5
      0000D4 8C 83            [24]  655 	mov	dph,r4
      0000D6 12r00r00         [24]  656 	lcall	_putchar
                                    657 ;	life.c:40: putchar(digits[a & 0xf]);
      0000D9 53 06 0F         [24]  658 	anl	ar6,#0x0f
      0000DC 7F 00            [12]  659 	mov	r7,#0x00
      0000DE EE               [12]  660 	mov	a,r6
      0000DF 24r00            [12]  661 	add	a,#_digits
      0000E1 F5 82            [12]  662 	mov	dpl,a
      0000E3 EF               [12]  663 	mov	a,r7
      0000E4 34s00            [12]  664 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  665 	mov	dph,a
      0000E8 E4               [12]  666 	clr	a
      0000E9 93               [24]  667 	movc	a,@a+dptr
      0000EA FF               [12]  668 	mov	r7,a
      0000EB 7E 00            [12]  669 	mov	r6,#0x00
      0000ED 8F 82            [24]  670 	mov	dpl,r7
      0000EF 8E 83            [24]  671 	mov	dph,r6
      0000F1 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:89: print16x(generation[0]);
      0000F4 90r0Cr12         [24]  674 	mov	dptr,#_generation
      0000F7 E0               [24]  675 	movx	a,@dptr
      0000F8 FE               [12]  676 	mov	r6,a
      0000F9 A3               [24]  677 	inc	dptr
      0000FA E0               [24]  678 	movx	a,@dptr
                                    679 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000FB FF               [12]  680 	mov	r7,a
      0000FC C4               [12]  681 	swap	a
      0000FD 54 0F            [12]  682 	anl	a,#0x0f
      0000FF 30 E3 02         [24]  683 	jnb	acc.3,00195$
      000102 44 F0            [12]  684 	orl	a,#0xf0
      000104                        685 00195$:
      000104 FC               [12]  686 	mov	r4,a
      000105 33               [12]  687 	rlc	a
      000106 95 E0            [12]  688 	subb	a,acc
      000108 53 04 0F         [24]  689 	anl	ar4,#0x0f
      00010B 7D 00            [12]  690 	mov	r5,#0x00
      00010D EC               [12]  691 	mov	a,r4
      00010E 24r00            [12]  692 	add	a,#_digits
      000110 F5 82            [12]  693 	mov	dpl,a
      000112 ED               [12]  694 	mov	a,r5
      000113 34s00            [12]  695 	addc	a,#(_digits >> 8)
      000115 F5 83            [12]  696 	mov	dph,a
      000117 E4               [12]  697 	clr	a
      000118 93               [24]  698 	movc	a,@a+dptr
      000119 FD               [12]  699 	mov	r5,a
      00011A 7C 00            [12]  700 	mov	r4,#0x00
      00011C 8D 82            [24]  701 	mov	dpl,r5
      00011E 8C 83            [24]  702 	mov	dph,r4
      000120 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000123 8F 05            [24]  705 	mov	ar5,r7
      000125 53 05 0F         [24]  706 	anl	ar5,#0x0f
      000128 7C 00            [12]  707 	mov	r4,#0x00
      00012A ED               [12]  708 	mov	a,r5
      00012B 24r00            [12]  709 	add	a,#_digits
      00012D F5 82            [12]  710 	mov	dpl,a
      00012F EC               [12]  711 	mov	a,r4
      000130 34s00            [12]  712 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  713 	mov	dph,a
      000134 E4               [12]  714 	clr	a
      000135 93               [24]  715 	movc	a,@a+dptr
      000136 FD               [12]  716 	mov	r5,a
      000137 7C 00            [12]  717 	mov	r4,#0x00
      000139 8D 82            [24]  718 	mov	dpl,r5
      00013B 8C 83            [24]  719 	mov	dph,r4
      00013D 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000140 8E 04            [24]  722 	mov	ar4,r6
      000142 EF               [12]  723 	mov	a,r7
      000143 C4               [12]  724 	swap	a
      000144 CC               [12]  725 	xch	a,r4
      000145 C4               [12]  726 	swap	a
      000146 54 0F            [12]  727 	anl	a,#0x0f
      000148 6C               [12]  728 	xrl	a,r4
      000149 CC               [12]  729 	xch	a,r4
      00014A 54 0F            [12]  730 	anl	a,#0x0f
      00014C CC               [12]  731 	xch	a,r4
      00014D 6C               [12]  732 	xrl	a,r4
      00014E CC               [12]  733 	xch	a,r4
      00014F 30 E3 02         [24]  734 	jnb	acc.3,00196$
      000152 44 F0            [12]  735 	orl	a,#0xf0
      000154                        736 00196$:
      000154 53 04 0F         [24]  737 	anl	ar4,#0x0f
      000157 7D 00            [12]  738 	mov	r5,#0x00
      000159 EC               [12]  739 	mov	a,r4
      00015A 24r00            [12]  740 	add	a,#_digits
      00015C F5 82            [12]  741 	mov	dpl,a
      00015E ED               [12]  742 	mov	a,r5
      00015F 34s00            [12]  743 	addc	a,#(_digits >> 8)
      000161 F5 83            [12]  744 	mov	dph,a
      000163 E4               [12]  745 	clr	a
      000164 93               [24]  746 	movc	a,@a+dptr
      000165 FD               [12]  747 	mov	r5,a
      000166 7C 00            [12]  748 	mov	r4,#0x00
      000168 8D 82            [24]  749 	mov	dpl,r5
      00016A 8C 83            [24]  750 	mov	dph,r4
      00016C 12r00r00         [24]  751 	lcall	_putchar
                                    752 ;	life.c:40: putchar(digits[a & 0xf]);
      00016F 53 06 0F         [24]  753 	anl	ar6,#0x0f
      000172 7F 00            [12]  754 	mov	r7,#0x00
      000174 EE               [12]  755 	mov	a,r6
      000175 24r00            [12]  756 	add	a,#_digits
      000177 F5 82            [12]  757 	mov	dpl,a
      000179 EF               [12]  758 	mov	a,r7
      00017A 34s00            [12]  759 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  760 	mov	dph,a
      00017E E4               [12]  761 	clr	a
      00017F 93               [24]  762 	movc	a,@a+dptr
      000180 FF               [12]  763 	mov	r7,a
      000181 7E 00            [12]  764 	mov	r6,#0x00
      000183 8F 82            [24]  765 	mov	dpl,r7
      000185 8E 83            [24]  766 	mov	dph,r6
      000187 12r00r00         [24]  767 	lcall	_putchar
                                    768 ;	life.c:98: printstr("\r\n");
      00018A 7Dr18            [12]  769 	mov	r5,#___str_1
      00018C 7Es00            [12]  770 	mov	r6,#(___str_1 >> 8)
      00018E 7F 80            [12]  771 	mov	r7,#0x80
                                    772 ;	life.c:48: return;
      000190                        773 00124$:
                                    774 ;	life.c:46: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  775 	mov	dpl,r5
      000192 8E 83            [24]  776 	mov	dph,r6
      000194 8F F0            [24]  777 	mov	b,r7
      000196 12r00r00         [24]  778 	lcall	__gptrget
      000199 FC               [12]  779 	mov	r4,a
      00019A 60 10            [24]  780 	jz	00114$
      00019C 7B 00            [12]  781 	mov	r3,#0x00
      00019E 8C 82            [24]  782 	mov	dpl,r4
      0001A0 8B 83            [24]  783 	mov	dph,r3
      0001A2 12r00r00         [24]  784 	lcall	_putchar
      0001A5 0D               [12]  785 	inc	r5
                                    786 ;	life.c:98: printstr("\r\n");
      0001A6 BD 00 E7         [24]  787 	cjne	r5,#0x00,00124$
      0001A9 0E               [12]  788 	inc	r6
      0001AA 80 E4            [24]  789 	sjmp	00124$
      0001AC                        790 00114$:
                                    791 ;	life.c:81: generation[0]++;
      0001AC 90r0Cr12         [24]  792 	mov	dptr,#_generation
      0001AF E0               [24]  793 	movx	a,@dptr
      0001B0 FE               [12]  794 	mov	r6,a
      0001B1 A3               [24]  795 	inc	dptr
      0001B2 E0               [24]  796 	movx	a,@dptr
      0001B3 FF               [12]  797 	mov	r7,a
      0001B4 0E               [12]  798 	inc	r6
      0001B5 BE 00 01         [24]  799 	cjne	r6,#0x00,00199$
      0001B8 0F               [12]  800 	inc	r7
      0001B9                        801 00199$:
      0001B9 90r0Cr12         [24]  802 	mov	dptr,#_generation
      0001BC EE               [12]  803 	mov	a,r6
      0001BD F0               [24]  804 	movx	@dptr,a
      0001BE EF               [12]  805 	mov	a,r7
      0001BF A3               [24]  806 	inc	dptr
      0001C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	life.c:82: if (!generation[0]) generation[1]++;
      0001C1 EE               [12]  809 	mov	a,r6
      0001C2 4F               [12]  810 	orl	a,r7
      0001C3 70 15            [24]  811 	jnz	00102$
      0001C5 90r0Cr14         [24]  812 	mov	dptr,#(_generation + 0x0002)
      0001C8 E0               [24]  813 	movx	a,@dptr
      0001C9 FE               [12]  814 	mov	r6,a
      0001CA A3               [24]  815 	inc	dptr
      0001CB E0               [24]  816 	movx	a,@dptr
      0001CC FF               [12]  817 	mov	r7,a
      0001CD 0E               [12]  818 	inc	r6
      0001CE BE 00 01         [24]  819 	cjne	r6,#0x00,00201$
      0001D1 0F               [12]  820 	inc	r7
      0001D2                        821 00201$:
      0001D2 90r0Cr14         [24]  822 	mov	dptr,#(_generation + 0x0002)
      0001D5 EE               [12]  823 	mov	a,r6
      0001D6 F0               [24]  824 	movx	@dptr,a
      0001D7 EF               [12]  825 	mov	a,r7
      0001D8 A3               [24]  826 	inc	dptr
      0001D9 F0               [24]  827 	movx	@dptr,a
                                    828 ;	life.c:99: updategen();
      0001DA                        829 00102$:
                                    830 ;	life.c:102: for (x = 0; x < W; x++) {
      0001DA 90r0Cr02         [24]  831 	mov	dptr,#_x
      0001DD E4               [12]  832 	clr	a
      0001DE F0               [24]  833 	movx	@dptr,a
      0001DF A3               [24]  834 	inc	dptr
      0001E0 F0               [24]  835 	movx	@dptr,a
      0001E1                        836 00131$:
                                    837 ;	life.c:103: for (y = 0; y < H; y++)
      0001E1 90r0Cr04         [24]  838 	mov	dptr,#_y
      0001E4 E4               [12]  839 	clr	a
      0001E5 F0               [24]  840 	movx	@dptr,a
      0001E6 A3               [24]  841 	inc	dptr
      0001E7 F0               [24]  842 	movx	@dptr,a
      0001E8                        843 00126$:
                                    844 ;	life.c:104: if (u[A2D(W, y, x)]) {
      0001E8 90r0Cr04         [24]  845 	mov	dptr,#_y
      0001EB E0               [24]  846 	movx	a,@dptr
      0001EC FE               [12]  847 	mov	r6,a
      0001ED A3               [24]  848 	inc	dptr
      0001EE E0               [24]  849 	movx	a,@dptr
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CE               [12]  853 	xch	a,r6
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CE               [12]  856 	xch	a,r6
      0001F7 6E               [12]  857 	xrl	a,r6
      0001F8 CE               [12]  858 	xch	a,r6
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CE               [12]  860 	xch	a,r6
      0001FC 6E               [12]  861 	xrl	a,r6
      0001FD FF               [12]  862 	mov	r7,a
      0001FE 90r0Cr02         [24]  863 	mov	dptr,#_x
      000201 E0               [24]  864 	movx	a,@dptr
      000202 FC               [12]  865 	mov	r4,a
      000203 A3               [24]  866 	inc	dptr
      000204 E0               [24]  867 	movx	a,@dptr
      000205 FD               [12]  868 	mov	r5,a
      000206 EC               [12]  869 	mov	a,r4
      000207 2E               [12]  870 	add	a,r6
      000208 FE               [12]  871 	mov	r6,a
      000209 ED               [12]  872 	mov	a,r5
      00020A 3F               [12]  873 	addc	a,r7
      00020B FF               [12]  874 	mov	r7,a
      00020C EE               [12]  875 	mov	a,r6
      00020D 24r02            [12]  876 	add	a,#_u
      00020F FE               [12]  877 	mov	r6,a
      000210 EF               [12]  878 	mov	a,r7
      000211 34s04            [12]  879 	addc	a,#(_u >> 8)
      000213 FF               [12]  880 	mov	r7,a
      000214 8E 82            [24]  881 	mov	dpl,r6
      000216 8F 83            [24]  882 	mov	dph,r7
      000218 E0               [24]  883 	movx	a,@dptr
      000219 60 0E            [24]  884 	jz	00104$
                                    885 ;	life.c:105: putchar('['); putchar(']');
      00021B 90 00 5B         [24]  886 	mov	dptr,#0x005b
      00021E 12r00r00         [24]  887 	lcall	_putchar
      000221 90 00 5D         [24]  888 	mov	dptr,#0x005d
      000224 12r00r00         [24]  889 	lcall	_putchar
      000227 80 0C            [24]  890 	sjmp	00127$
      000229                        891 00104$:
                                    892 ;	life.c:107: putchar('#'); putchar('#');
      000229 90 00 23         [24]  893 	mov	dptr,#0x0023
      00022C 12r00r00         [24]  894 	lcall	_putchar
      00022F 90 00 23         [24]  895 	mov	dptr,#0x0023
      000232 12r00r00         [24]  896 	lcall	_putchar
      000235                        897 00127$:
                                    898 ;	life.c:103: for (y = 0; y < H; y++)
      000235 90r0Cr04         [24]  899 	mov	dptr,#_y
      000238 E0               [24]  900 	movx	a,@dptr
      000239 24 01            [12]  901 	add	a,#0x01
      00023B F0               [24]  902 	movx	@dptr,a
      00023C A3               [24]  903 	inc	dptr
      00023D E0               [24]  904 	movx	a,@dptr
      00023E 34 00            [12]  905 	addc	a,#0x00
      000240 F0               [24]  906 	movx	@dptr,a
      000241 90r0Cr04         [24]  907 	mov	dptr,#_y
      000244 E0               [24]  908 	movx	a,@dptr
      000245 FE               [12]  909 	mov	r6,a
      000246 A3               [24]  910 	inc	dptr
      000247 E0               [24]  911 	movx	a,@dptr
      000248 FF               [12]  912 	mov	r7,a
      000249 C3               [12]  913 	clr	c
      00024A EE               [12]  914 	mov	a,r6
      00024B 94 20            [12]  915 	subb	a,#0x20
      00024D EF               [12]  916 	mov	a,r7
      00024E 64 80            [12]  917 	xrl	a,#0x80
      000250 94 80            [12]  918 	subb	a,#0x80
      000252 40 94            [24]  919 	jc	00126$
                                    920 ;	life.c:109: printstr("\r\n");
      000254 7Dr18            [12]  921 	mov	r5,#___str_1
      000256 7Es00            [12]  922 	mov	r6,#(___str_1 >> 8)
      000258 7F 80            [12]  923 	mov	r7,#0x80
                                    924 ;	life.c:48: return;
      00025A                        925 00129$:
                                    926 ;	life.c:46: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  927 	mov	dpl,r5
      00025C 8E 83            [24]  928 	mov	dph,r6
      00025E 8F F0            [24]  929 	mov	b,r7
      000260 12r00r00         [24]  930 	lcall	__gptrget
      000263 FC               [12]  931 	mov	r4,a
      000264 60 10            [24]  932 	jz	00119$
      000266 7B 00            [12]  933 	mov	r3,#0x00
      000268 8C 82            [24]  934 	mov	dpl,r4
      00026A 8B 83            [24]  935 	mov	dph,r3
      00026C 12r00r00         [24]  936 	lcall	_putchar
      00026F 0D               [12]  937 	inc	r5
                                    938 ;	life.c:109: printstr("\r\n");
      000270 BD 00 E7         [24]  939 	cjne	r5,#0x00,00129$
      000273 0E               [12]  940 	inc	r6
      000274 80 E4            [24]  941 	sjmp	00129$
      000276                        942 00119$:
                                    943 ;	life.c:102: for (x = 0; x < W; x++) {
      000276 90r0Cr02         [24]  944 	mov	dptr,#_x
      000279 E0               [24]  945 	movx	a,@dptr
      00027A 24 01            [12]  946 	add	a,#0x01
      00027C F0               [24]  947 	movx	@dptr,a
      00027D A3               [24]  948 	inc	dptr
      00027E E0               [24]  949 	movx	a,@dptr
      00027F 34 00            [12]  950 	addc	a,#0x00
      000281 F0               [24]  951 	movx	@dptr,a
      000282 90r0Cr02         [24]  952 	mov	dptr,#_x
      000285 E0               [24]  953 	movx	a,@dptr
      000286 FE               [12]  954 	mov	r6,a
      000287 A3               [24]  955 	inc	dptr
      000288 E0               [24]  956 	movx	a,@dptr
      000289 FF               [12]  957 	mov	r7,a
      00028A C3               [12]  958 	clr	c
      00028B EE               [12]  959 	mov	a,r6
      00028C 94 20            [12]  960 	subb	a,#0x20
      00028E EF               [12]  961 	mov	a,r7
      00028F 64 80            [12]  962 	xrl	a,#0x80
      000291 94 80            [12]  963 	subb	a,#0x80
      000293 50 03            [24]  964 	jnc	00206$
      000295 02r01rE1         [24]  965 	ljmp	00131$
      000298                        966 00206$:
                                    967 ;	life.c:112: return;
                                    968 ;	life.c:113: }
      000298 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'main'
                                    972 ;------------------------------------------------------------
                                    973 ;__2621440020              Allocated to registers 
                                    974 ;s                         Allocated to registers r5 r6 r7 
                                    975 ;__1310720013              Allocated to registers 
                                    976 ;s                         Allocated to registers r5 r6 r7 
                                    977 ;__1310720015              Allocated to registers r6 r7 
                                    978 ;a                         Allocated to registers r4 r5 
                                    979 ;__1310720017              Allocated to registers 
                                    980 ;s                         Allocated to registers r5 r6 r7 
                                    981 ;__2621440023              Allocated to registers 
                                    982 ;s                         Allocated to registers r5 r6 r7 
                                    983 ;__4587520027              Allocated to registers 
                                    984 ;s                         Allocated to registers r5 r6 r7 
                                    985 ;__3276800029              Allocated to registers 
                                    986 ;s                         Allocated to registers r5 r6 r7 
                                    987 ;__1310720031              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;sloc0                     Allocated to stack - _bp +1
                                    990 ;sloc1                     Allocated to stack - _bp +3
                                    991 ;sloc2                     Allocated to stack - _bp +5
                                    992 ;sloc3                     Allocated to stack - _bp +6
                                    993 ;sloc4                     Allocated to stack - _bp +8
                                    994 ;sloc5                     Allocated to stack - _bp +10
                                    995 ;sloc6                     Allocated to stack - _bp +12
                                    996 ;sloc7                     Allocated to stack - _bp +14
                                    997 ;------------------------------------------------------------
                                    998 ;	life.c:196: void main(void) {
                                    999 ;	-----------------------------------------
                                   1000 ;	 function main
                                   1001 ;	-----------------------------------------
      000299                       1002 _main:
      000299 C0*00            [24] 1003 	push	_bp
      00029B E5 81            [12] 1004 	mov	a,sp
      00029D F5*00            [12] 1005 	mov	_bp,a
      00029F 24 0F            [12] 1006 	add	a,#0x0f
      0002A1 F5 81            [12] 1007 	mov	sp,a
                                   1008 ;	life.c:197: IT0 = 1;
                                   1009 ;	assignBit
      0002A3 D2 88            [12] 1010 	setb	_IT0
                                   1011 ;	life.c:198: IT1 = 1;
                                   1012 ;	assignBit
      0002A5 D2 8A            [12] 1013 	setb	_IT1
                                   1014 ;	life.c:199: EX0 = 1;
                                   1015 ;	assignBit
      0002A7 D2 A8            [12] 1016 	setb	_EX0
                                   1017 ;	life.c:200: EX1 = 1;
                                   1018 ;	assignBit
      0002A9 D2 AA            [12] 1019 	setb	_EX1
                                   1020 ;	life.c:201: EA = 1;
                                   1021 ;	assignBit
      0002AB D2 AF            [12] 1022 	setb	_EA
                                   1023 ;	life.c:203: for (i0 = 0; !i0; ) {
      0002AD 90r00r00         [24] 1024 	mov	dptr,#_i0
      0002B0 E4               [12] 1025 	clr	a
      0002B1 F0               [24] 1026 	movx	@dptr,a
      0002B2                       1027 00181$:
                                   1028 ;	life.c:116: memset(u, 0, sizeof (u));
      0002B2 E4               [12] 1029 	clr	a
      0002B3 C0 E0            [24] 1030 	push	acc
      0002B5 74 04            [12] 1031 	mov	a,#0x04
      0002B7 C0 E0            [24] 1032 	push	acc
      0002B9 E4               [12] 1033 	clr	a
      0002BA C0 E0            [24] 1034 	push	acc
      0002BC 90r04r02         [24] 1035 	mov	dptr,#_u
      0002BF 75 F0 00         [24] 1036 	mov	b,#0x00
      0002C2 12r00r00         [24] 1037 	lcall	_memset
      0002C5 15 81            [12] 1038 	dec	sp
      0002C7 15 81            [12] 1039 	dec	sp
      0002C9 15 81            [12] 1040 	dec	sp
                                   1041 ;	life.c:117: memset(pu, 0, sizeof (pu));
      0002CB E4               [12] 1042 	clr	a
      0002CC C0 E0            [24] 1043 	push	acc
      0002CE 74 04            [12] 1044 	mov	a,#0x04
      0002D0 C0 E0            [24] 1045 	push	acc
      0002D2 E4               [12] 1046 	clr	a
      0002D3 C0 E0            [24] 1047 	push	acc
      0002D5 90r00r02         [24] 1048 	mov	dptr,#_pu
      0002D8 75 F0 00         [24] 1049 	mov	b,#0x00
      0002DB 12r00r00         [24] 1050 	lcall	_memset
      0002DE 15 81            [12] 1051 	dec	sp
      0002E0 15 81            [12] 1052 	dec	sp
      0002E2 15 81            [12] 1053 	dec	sp
                                   1054 ;	life.c:205: printstr("\033[2J\033[mINIT\r\n");
      0002E4 7Dr26            [12] 1055 	mov	r5,#___str_4
      0002E6 7Es00            [12] 1056 	mov	r6,#(___str_4 >> 8)
      0002E8 7F 80            [12] 1057 	mov	r7,#0x80
                                   1058 ;	life.c:48: return;
      0002EA                       1059 00152$:
                                   1060 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002EA 8D 82            [24] 1061 	mov	dpl,r5
      0002EC 8E 83            [24] 1062 	mov	dph,r6
      0002EE 8F F0            [24] 1063 	mov	b,r7
      0002F0 12r00r00         [24] 1064 	lcall	__gptrget
      0002F3 FC               [12] 1065 	mov	r4,a
      0002F4 60 10            [24] 1066 	jz	00110$
      0002F6 7B 00            [12] 1067 	mov	r3,#0x00
      0002F8 8C 82            [24] 1068 	mov	dpl,r4
      0002FA 8B 83            [24] 1069 	mov	dph,r3
      0002FC 12r00r00         [24] 1070 	lcall	_putchar
      0002FF 0D               [12] 1071 	inc	r5
                                   1072 ;	life.c:205: printstr("\033[2J\033[mINIT\r\n");
      000300 BD 00 E7         [24] 1073 	cjne	r5,#0x00,00152$
      000303 0E               [12] 1074 	inc	r6
      000304 80 E4            [24] 1075 	sjmp	00152$
      000306                       1076 00110$:
                                   1077 ;	life.c:206: (void)getchar();
      000306 12r00r05         [24] 1078 	lcall	_getchar
                                   1079 ;	life.c:123: j = 0;
      000309 90r0Cr0A         [24] 1080 	mov	dptr,#_j
      00030C E4               [12] 1081 	clr	a
      00030D F0               [24] 1082 	movx	@dptr,a
      00030E A3               [24] 1083 	inc	dptr
      00030F F0               [24] 1084 	movx	@dptr,a
                                   1085 ;	life.c:125: printstr("LOAD <");
      000310 7Dr1B            [12] 1086 	mov	r5,#___str_2
      000312 7Es00            [12] 1087 	mov	r6,#(___str_2 >> 8)
      000314 7F 80            [12] 1088 	mov	r7,#0x80
                                   1089 ;	life.c:48: return;
      000316                       1090 00155$:
                                   1091 ;	life.c:46: for (; *s; s++) putchar(*s);
      000316 8D 82            [24] 1092 	mov	dpl,r5
      000318 8E 83            [24] 1093 	mov	dph,r6
      00031A 8F F0            [24] 1094 	mov	b,r7
      00031C 12r00r00         [24] 1095 	lcall	__gptrget
      00031F FC               [12] 1096 	mov	r4,a
      000320 60 10            [24] 1097 	jz	00112$
      000322 7B 00            [12] 1098 	mov	r3,#0x00
      000324 8C 82            [24] 1099 	mov	dpl,r4
      000326 8B 83            [24] 1100 	mov	dph,r3
      000328 12r00r00         [24] 1101 	lcall	_putchar
      00032B 0D               [12] 1102 	inc	r5
                                   1103 ;	life.c:125: printstr("LOAD <");
      00032C BD 00 E7         [24] 1104 	cjne	r5,#0x00,00155$
      00032F 0E               [12] 1105 	inc	r6
      000330 80 E4            [24] 1106 	sjmp	00155$
      000332                       1107 00112$:
                                   1108 ;	life.c:127: for (y = 0; y < H; y++)
      000332 90r0Cr04         [24] 1109 	mov	dptr,#_y
      000335 E4               [12] 1110 	clr	a
      000336 F0               [24] 1111 	movx	@dptr,a
      000337 A3               [24] 1112 	inc	dptr
      000338 F0               [24] 1113 	movx	@dptr,a
      000339                       1114 00159$:
                                   1115 ;	life.c:128: for (x = 0; x < W; x++) {
      000339 90r0Cr02         [24] 1116 	mov	dptr,#_x
      00033C E4               [12] 1117 	clr	a
      00033D F0               [24] 1118 	movx	@dptr,a
      00033E A3               [24] 1119 	inc	dptr
      00033F F0               [24] 1120 	movx	@dptr,a
      000340                       1121 00157$:
                                   1122 ;	life.c:129: c = getchar();
      000340 12r00r05         [24] 1123 	lcall	_getchar
      000343 AE 82            [24] 1124 	mov	r6,dpl
      000345 AF 83            [24] 1125 	mov	r7,dph
      000347 90r0Cr0C         [24] 1126 	mov	dptr,#_c
      00034A EE               [12] 1127 	mov	a,r6
      00034B F0               [24] 1128 	movx	@dptr,a
      00034C EF               [12] 1129 	mov	a,r7
      00034D A3               [24] 1130 	inc	dptr
      00034E F0               [24] 1131 	movx	@dptr,a
                                   1132 ;	life.c:130: if (c == (int)'0') {
      00034F BE 30 41         [24] 1133 	cjne	r6,#0x30,00119$
      000352 BF 00 3E         [24] 1134 	cjne	r7,#0x00,00119$
                                   1135 ;	life.c:131: u[A2D(W, y, x)] = 0;
      000355 90r0Cr04         [24] 1136 	mov	dptr,#_y
      000358 E0               [24] 1137 	movx	a,@dptr
      000359 FC               [12] 1138 	mov	r4,a
      00035A A3               [24] 1139 	inc	dptr
      00035B E0               [24] 1140 	movx	a,@dptr
      00035C C4               [12] 1141 	swap	a
      00035D 23               [12] 1142 	rl	a
      00035E 54 E0            [12] 1143 	anl	a,#0xe0
      000360 CC               [12] 1144 	xch	a,r4
      000361 C4               [12] 1145 	swap	a
      000362 23               [12] 1146 	rl	a
      000363 CC               [12] 1147 	xch	a,r4
      000364 6C               [12] 1148 	xrl	a,r4
      000365 CC               [12] 1149 	xch	a,r4
      000366 54 E0            [12] 1150 	anl	a,#0xe0
      000368 CC               [12] 1151 	xch	a,r4
      000369 6C               [12] 1152 	xrl	a,r4
      00036A FD               [12] 1153 	mov	r5,a
      00036B 90r0Cr02         [24] 1154 	mov	dptr,#_x
      00036E E0               [24] 1155 	movx	a,@dptr
      00036F FA               [12] 1156 	mov	r2,a
      000370 A3               [24] 1157 	inc	dptr
      000371 E0               [24] 1158 	movx	a,@dptr
      000372 FB               [12] 1159 	mov	r3,a
      000373 EA               [12] 1160 	mov	a,r2
      000374 2C               [12] 1161 	add	a,r4
      000375 FC               [12] 1162 	mov	r4,a
      000376 EB               [12] 1163 	mov	a,r3
      000377 3D               [12] 1164 	addc	a,r5
      000378 FD               [12] 1165 	mov	r5,a
      000379 EC               [12] 1166 	mov	a,r4
      00037A 24r02            [12] 1167 	add	a,#_u
      00037C F5 82            [12] 1168 	mov	dpl,a
      00037E ED               [12] 1169 	mov	a,r5
      00037F 34s04            [12] 1170 	addc	a,#(_u >> 8)
      000381 F5 83            [12] 1171 	mov	dph,a
      000383 E4               [12] 1172 	clr	a
      000384 F0               [24] 1173 	movx	@dptr,a
                                   1174 ;	life.c:132: j++;
      000385 90r0Cr0A         [24] 1175 	mov	dptr,#_j
      000388 E0               [24] 1176 	movx	a,@dptr
      000389 24 01            [12] 1177 	add	a,#0x01
      00038B F0               [24] 1178 	movx	@dptr,a
      00038C A3               [24] 1179 	inc	dptr
      00038D E0               [24] 1180 	movx	a,@dptr
      00038E 34 00            [12] 1181 	addc	a,#0x00
      000390 F0               [24] 1182 	movx	@dptr,a
      000391 80 4D            [24] 1183 	sjmp	00158$
      000393                       1184 00119$:
                                   1185 ;	life.c:133: } else if (c == (int)'1') {
      000393 BE 31 42         [24] 1186 	cjne	r6,#0x31,00117$
      000396 BF 00 3F         [24] 1187 	cjne	r7,#0x00,00117$
                                   1188 ;	life.c:134: u[A2D(W, y, x)] = 1;
      000399 90r0Cr04         [24] 1189 	mov	dptr,#_y
      00039C E0               [24] 1190 	movx	a,@dptr
      00039D FC               [12] 1191 	mov	r4,a
      00039E A3               [24] 1192 	inc	dptr
      00039F E0               [24] 1193 	movx	a,@dptr
      0003A0 C4               [12] 1194 	swap	a
      0003A1 23               [12] 1195 	rl	a
      0003A2 54 E0            [12] 1196 	anl	a,#0xe0
      0003A4 CC               [12] 1197 	xch	a,r4
      0003A5 C4               [12] 1198 	swap	a
      0003A6 23               [12] 1199 	rl	a
      0003A7 CC               [12] 1200 	xch	a,r4
      0003A8 6C               [12] 1201 	xrl	a,r4
      0003A9 CC               [12] 1202 	xch	a,r4
      0003AA 54 E0            [12] 1203 	anl	a,#0xe0
      0003AC CC               [12] 1204 	xch	a,r4
      0003AD 6C               [12] 1205 	xrl	a,r4
      0003AE FD               [12] 1206 	mov	r5,a
      0003AF 90r0Cr02         [24] 1207 	mov	dptr,#_x
      0003B2 E0               [24] 1208 	movx	a,@dptr
      0003B3 FA               [12] 1209 	mov	r2,a
      0003B4 A3               [24] 1210 	inc	dptr
      0003B5 E0               [24] 1211 	movx	a,@dptr
      0003B6 FB               [12] 1212 	mov	r3,a
      0003B7 EA               [12] 1213 	mov	a,r2
      0003B8 2C               [12] 1214 	add	a,r4
      0003B9 FC               [12] 1215 	mov	r4,a
      0003BA EB               [12] 1216 	mov	a,r3
      0003BB 3D               [12] 1217 	addc	a,r5
      0003BC FD               [12] 1218 	mov	r5,a
      0003BD EC               [12] 1219 	mov	a,r4
      0003BE 24r02            [12] 1220 	add	a,#_u
      0003C0 F5 82            [12] 1221 	mov	dpl,a
      0003C2 ED               [12] 1222 	mov	a,r5
      0003C3 34s04            [12] 1223 	addc	a,#(_u >> 8)
      0003C5 F5 83            [12] 1224 	mov	dph,a
      0003C7 74 01            [12] 1225 	mov	a,#0x01
      0003C9 F0               [24] 1226 	movx	@dptr,a
                                   1227 ;	life.c:135: j++;
      0003CA 90r0Cr0A         [24] 1228 	mov	dptr,#_j
      0003CD E0               [24] 1229 	movx	a,@dptr
      0003CE 24 01            [12] 1230 	add	a,#0x01
      0003D0 F0               [24] 1231 	movx	@dptr,a
      0003D1 A3               [24] 1232 	inc	dptr
      0003D2 E0               [24] 1233 	movx	a,@dptr
      0003D3 34 00            [12] 1234 	addc	a,#0x00
      0003D5 F0               [24] 1235 	movx	@dptr,a
      0003D6 80 08            [24] 1236 	sjmp	00158$
      0003D8                       1237 00117$:
                                   1238 ;	life.c:136: } else if (c == (int)'#') goto out;
      0003D8 BE 23 05         [24] 1239 	cjne	r6,#0x23,00349$
      0003DB BF 00 02         [24] 1240 	cjne	r7,#0x00,00349$
      0003DE 80 44            [24] 1241 	sjmp	00130$
      0003E0                       1242 00349$:
      0003E0                       1243 00158$:
                                   1244 ;	life.c:128: for (x = 0; x < W; x++) {
      0003E0 90r0Cr02         [24] 1245 	mov	dptr,#_x
      0003E3 E0               [24] 1246 	movx	a,@dptr
      0003E4 24 01            [12] 1247 	add	a,#0x01
      0003E6 F0               [24] 1248 	movx	@dptr,a
      0003E7 A3               [24] 1249 	inc	dptr
      0003E8 E0               [24] 1250 	movx	a,@dptr
      0003E9 34 00            [12] 1251 	addc	a,#0x00
      0003EB F0               [24] 1252 	movx	@dptr,a
      0003EC 90r0Cr02         [24] 1253 	mov	dptr,#_x
      0003EF E0               [24] 1254 	movx	a,@dptr
      0003F0 FE               [12] 1255 	mov	r6,a
      0003F1 A3               [24] 1256 	inc	dptr
      0003F2 E0               [24] 1257 	movx	a,@dptr
      0003F3 FF               [12] 1258 	mov	r7,a
      0003F4 C3               [12] 1259 	clr	c
      0003F5 EE               [12] 1260 	mov	a,r6
      0003F6 94 20            [12] 1261 	subb	a,#0x20
      0003F8 EF               [12] 1262 	mov	a,r7
      0003F9 64 80            [12] 1263 	xrl	a,#0x80
      0003FB 94 80            [12] 1264 	subb	a,#0x80
      0003FD 50 03            [24] 1265 	jnc	00350$
      0003FF 02r03r40         [24] 1266 	ljmp	00157$
      000402                       1267 00350$:
                                   1268 ;	life.c:127: for (y = 0; y < H; y++)
      000402 90r0Cr04         [24] 1269 	mov	dptr,#_y
      000405 E0               [24] 1270 	movx	a,@dptr
      000406 24 01            [12] 1271 	add	a,#0x01
      000408 F0               [24] 1272 	movx	@dptr,a
      000409 A3               [24] 1273 	inc	dptr
      00040A E0               [24] 1274 	movx	a,@dptr
      00040B 34 00            [12] 1275 	addc	a,#0x00
      00040D F0               [24] 1276 	movx	@dptr,a
      00040E 90r0Cr04         [24] 1277 	mov	dptr,#_y
      000411 E0               [24] 1278 	movx	a,@dptr
      000412 FE               [12] 1279 	mov	r6,a
      000413 A3               [24] 1280 	inc	dptr
      000414 E0               [24] 1281 	movx	a,@dptr
      000415 FF               [12] 1282 	mov	r7,a
      000416 C3               [12] 1283 	clr	c
      000417 EE               [12] 1284 	mov	a,r6
      000418 94 20            [12] 1285 	subb	a,#0x20
      00041A EF               [12] 1286 	mov	a,r7
      00041B 64 80            [12] 1287 	xrl	a,#0x80
      00041D 94 80            [12] 1288 	subb	a,#0x80
      00041F 50 03            [24] 1289 	jnc	00351$
      000421 02r03r39         [24] 1290 	ljmp	00159$
      000424                       1291 00351$:
                                   1292 ;	life.c:139: out:
      000424                       1293 00130$:
                                   1294 ;	life.c:140: if (c != (int)'#')
      000424 90r0Cr0C         [24] 1295 	mov	dptr,#_c
      000427 E0               [24] 1296 	movx	a,@dptr
      000428 FE               [12] 1297 	mov	r6,a
      000429 A3               [24] 1298 	inc	dptr
      00042A E0               [24] 1299 	movx	a,@dptr
      00042B FF               [12] 1300 	mov	r7,a
      00042C BE 23 05         [24] 1301 	cjne	r6,#0x23,00352$
      00042F BF 00 02         [24] 1302 	cjne	r7,#0x00,00352$
      000432 80 15            [24] 1303 	sjmp	00129$
      000434                       1304 00352$:
                                   1305 ;	life.c:141: while (1) {
      000434                       1306 00126$:
                                   1307 ;	life.c:142: c = getchar();
      000434 12r00r05         [24] 1308 	lcall	_getchar
      000437 AE 82            [24] 1309 	mov	r6,dpl
      000439 AF 83            [24] 1310 	mov	r7,dph
      00043B 90r0Cr0C         [24] 1311 	mov	dptr,#_c
      00043E EE               [12] 1312 	mov	a,r6
      00043F F0               [24] 1313 	movx	@dptr,a
      000440 EF               [12] 1314 	mov	a,r7
      000441 A3               [24] 1315 	inc	dptr
      000442 F0               [24] 1316 	movx	@dptr,a
                                   1317 ;	life.c:143: if (c == (int)'#') break;
      000443 BE 23 EE         [24] 1318 	cjne	r6,#0x23,00126$
      000446 BF 00 EB         [24] 1319 	cjne	r7,#0x00,00126$
      000449                       1320 00129$:
                                   1321 ;	life.c:145: print16x(j);
      000449 90r0Cr0A         [24] 1322 	mov	dptr,#_j
      00044C E0               [24] 1323 	movx	a,@dptr
      00044D FE               [12] 1324 	mov	r6,a
      00044E A3               [24] 1325 	inc	dptr
      00044F E0               [24] 1326 	movx	a,@dptr
                                   1327 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000450 8E 04            [24] 1328 	mov	ar4,r6
      000452 FD               [12] 1329 	mov	r5,a
      000453 C4               [12] 1330 	swap	a
      000454 54 0F            [12] 1331 	anl	a,#0x0f
      000456 30 E3 02         [24] 1332 	jnb	acc.3,00355$
      000459 44 F0            [12] 1333 	orl	a,#0xf0
      00045B                       1334 00355$:
      00045B FE               [12] 1335 	mov	r6,a
      00045C 33               [12] 1336 	rlc	a
      00045D 95 E0            [12] 1337 	subb	a,acc
      00045F 53 06 0F         [24] 1338 	anl	ar6,#0x0f
      000462 7F 00            [12] 1339 	mov	r7,#0x00
      000464 EE               [12] 1340 	mov	a,r6
      000465 24r00            [12] 1341 	add	a,#_digits
      000467 F5 82            [12] 1342 	mov	dpl,a
      000469 EF               [12] 1343 	mov	a,r7
      00046A 34s00            [12] 1344 	addc	a,#(_digits >> 8)
      00046C F5 83            [12] 1345 	mov	dph,a
      00046E E4               [12] 1346 	clr	a
      00046F 93               [24] 1347 	movc	a,@a+dptr
      000470 FF               [12] 1348 	mov	r7,a
      000471 7E 00            [12] 1349 	mov	r6,#0x00
      000473 8F 82            [24] 1350 	mov	dpl,r7
      000475 8E 83            [24] 1351 	mov	dph,r6
      000477 12r00r00         [24] 1352 	lcall	_putchar
                                   1353 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00047A 8D 07            [24] 1354 	mov	ar7,r5
      00047C 53 07 0F         [24] 1355 	anl	ar7,#0x0f
      00047F 7E 00            [12] 1356 	mov	r6,#0x00
      000481 EF               [12] 1357 	mov	a,r7
      000482 24r00            [12] 1358 	add	a,#_digits
      000484 F5 82            [12] 1359 	mov	dpl,a
      000486 EE               [12] 1360 	mov	a,r6
      000487 34s00            [12] 1361 	addc	a,#(_digits >> 8)
      000489 F5 83            [12] 1362 	mov	dph,a
      00048B E4               [12] 1363 	clr	a
      00048C 93               [24] 1364 	movc	a,@a+dptr
      00048D FF               [12] 1365 	mov	r7,a
      00048E 7E 00            [12] 1366 	mov	r6,#0x00
      000490 8F 82            [24] 1367 	mov	dpl,r7
      000492 8E 83            [24] 1368 	mov	dph,r6
      000494 12r00r00         [24] 1369 	lcall	_putchar
                                   1370 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000497 8C 06            [24] 1371 	mov	ar6,r4
      000499 ED               [12] 1372 	mov	a,r5
      00049A C4               [12] 1373 	swap	a
      00049B CE               [12] 1374 	xch	a,r6
      00049C C4               [12] 1375 	swap	a
      00049D 54 0F            [12] 1376 	anl	a,#0x0f
      00049F 6E               [12] 1377 	xrl	a,r6
      0004A0 CE               [12] 1378 	xch	a,r6
      0004A1 54 0F            [12] 1379 	anl	a,#0x0f
      0004A3 CE               [12] 1380 	xch	a,r6
      0004A4 6E               [12] 1381 	xrl	a,r6
      0004A5 CE               [12] 1382 	xch	a,r6
      0004A6 30 E3 02         [24] 1383 	jnb	acc.3,00356$
      0004A9 44 F0            [12] 1384 	orl	a,#0xf0
      0004AB                       1385 00356$:
      0004AB 53 06 0F         [24] 1386 	anl	ar6,#0x0f
      0004AE 7F 00            [12] 1387 	mov	r7,#0x00
      0004B0 EE               [12] 1388 	mov	a,r6
      0004B1 24r00            [12] 1389 	add	a,#_digits
      0004B3 F5 82            [12] 1390 	mov	dpl,a
      0004B5 EF               [12] 1391 	mov	a,r7
      0004B6 34s00            [12] 1392 	addc	a,#(_digits >> 8)
      0004B8 F5 83            [12] 1393 	mov	dph,a
      0004BA E4               [12] 1394 	clr	a
      0004BB 93               [24] 1395 	movc	a,@a+dptr
      0004BC FF               [12] 1396 	mov	r7,a
      0004BD 7E 00            [12] 1397 	mov	r6,#0x00
      0004BF 8F 82            [24] 1398 	mov	dpl,r7
      0004C1 8E 83            [24] 1399 	mov	dph,r6
      0004C3 12r00r00         [24] 1400 	lcall	_putchar
                                   1401 ;	life.c:40: putchar(digits[a & 0xf]);
      0004C6 53 04 0F         [24] 1402 	anl	ar4,#0x0f
      0004C9 7D 00            [12] 1403 	mov	r5,#0x00
      0004CB EC               [12] 1404 	mov	a,r4
      0004CC 24r00            [12] 1405 	add	a,#_digits
      0004CE F5 82            [12] 1406 	mov	dpl,a
      0004D0 ED               [12] 1407 	mov	a,r5
      0004D1 34s00            [12] 1408 	addc	a,#(_digits >> 8)
      0004D3 F5 83            [12] 1409 	mov	dph,a
      0004D5 E4               [12] 1410 	clr	a
      0004D6 93               [24] 1411 	movc	a,@a+dptr
      0004D7 FF               [12] 1412 	mov	r7,a
      0004D8 7E 00            [12] 1413 	mov	r6,#0x00
      0004DA 8F 82            [24] 1414 	mov	dpl,r7
      0004DC 8E 83            [24] 1415 	mov	dph,r6
      0004DE 12r00r00         [24] 1416 	lcall	_putchar
                                   1417 ;	life.c:146: printstr(">\r\n");
      0004E1 7Dr22            [12] 1418 	mov	r5,#___str_3
      0004E3 7Es00            [12] 1419 	mov	r6,#(___str_3 >> 8)
      0004E5 7F 80            [12] 1420 	mov	r7,#0x80
                                   1421 ;	life.c:48: return;
      0004E7                       1422 00162$:
                                   1423 ;	life.c:46: for (; *s; s++) putchar(*s);
      0004E7 8D 82            [24] 1424 	mov	dpl,r5
      0004E9 8E 83            [24] 1425 	mov	dph,r6
      0004EB 8F F0            [24] 1426 	mov	b,r7
      0004ED 12r00r00         [24] 1427 	lcall	__gptrget
      0004F0 FC               [12] 1428 	mov	r4,a
      0004F1 60 10            [24] 1429 	jz	00133$
      0004F3 7B 00            [12] 1430 	mov	r3,#0x00
      0004F5 8C 82            [24] 1431 	mov	dpl,r4
      0004F7 8B 83            [24] 1432 	mov	dph,r3
      0004F9 12r00r00         [24] 1433 	lcall	_putchar
      0004FC 0D               [12] 1434 	inc	r5
                                   1435 ;	life.c:146: printstr(">\r\n");
      0004FD BD 00 E7         [24] 1436 	cjne	r5,#0x00,00162$
      000500 0E               [12] 1437 	inc	r6
      000501 80 E4            [24] 1438 	sjmp	00162$
      000503                       1439 00133$:
                                   1440 ;	life.c:209: show(0);
      000503 75 82 00         [24] 1441 	mov	dpl,#0x00
      000506 12r00r34         [24] 1442 	lcall	_show
                                   1443 ;	life.c:211: printstr("RDY\r\n");
      000509 7Dr34            [12] 1444 	mov	r5,#___str_5
      00050B 7Es00            [12] 1445 	mov	r6,#(___str_5 >> 8)
      00050D 7F 80            [12] 1446 	mov	r7,#0x80
                                   1447 ;	life.c:48: return;
      00050F                       1448 00165$:
                                   1449 ;	life.c:46: for (; *s; s++) putchar(*s);
      00050F 8D 82            [24] 1450 	mov	dpl,r5
      000511 8E 83            [24] 1451 	mov	dph,r6
      000513 8F F0            [24] 1452 	mov	b,r7
      000515 12r00r00         [24] 1453 	lcall	__gptrget
      000518 FC               [12] 1454 	mov	r4,a
      000519 60 10            [24] 1455 	jz	00136$
      00051B 7B 00            [12] 1456 	mov	r3,#0x00
      00051D 8C 82            [24] 1457 	mov	dpl,r4
      00051F 8B 83            [24] 1458 	mov	dph,r3
      000521 12r00r00         [24] 1459 	lcall	_putchar
      000524 0D               [12] 1460 	inc	r5
                                   1461 ;	life.c:211: printstr("RDY\r\n");
      000525 BD 00 E7         [24] 1462 	cjne	r5,#0x00,00165$
      000528 0E               [12] 1463 	inc	r6
      000529 80 E4            [24] 1464 	sjmp	00165$
      00052B                       1465 00136$:
                                   1466 ;	life.c:212: (void)getchar();
      00052B 12r00r05         [24] 1467 	lcall	_getchar
                                   1468 ;	life.c:74: generation[0] = 0;
      00052E 90r0Cr12         [24] 1469 	mov	dptr,#_generation
      000531 E4               [12] 1470 	clr	a
      000532 F0               [24] 1471 	movx	@dptr,a
      000533 A3               [24] 1472 	inc	dptr
      000534 F0               [24] 1473 	movx	@dptr,a
                                   1474 ;	life.c:75: generation[1] = 0;
      000535 90r0Cr14         [24] 1475 	mov	dptr,#(_generation + 0x0002)
      000538 F0               [24] 1476 	movx	@dptr,a
      000539 A3               [24] 1477 	inc	dptr
      00053A F0               [24] 1478 	movx	@dptr,a
                                   1479 ;	life.c:216: for (i1 = 0; !i0 && !i1; ) {
      00053B 90r00r01         [24] 1480 	mov	dptr,#_i1
      00053E F0               [24] 1481 	movx	@dptr,a
      00053F                       1482 00176$:
      00053F 90r00r00         [24] 1483 	mov	dptr,#_i0
      000542 E0               [24] 1484 	movx	a,@dptr
      000543 60 03            [24] 1485 	jz	00361$
      000545 02r0Ar1A         [24] 1486 	ljmp	00104$
      000548                       1487 00361$:
      000548 90r00r01         [24] 1488 	mov	dptr,#_i1
      00054B E0               [24] 1489 	movx	a,@dptr
      00054C 60 03            [24] 1490 	jz	00362$
      00054E 02r0Ar1A         [24] 1491 	ljmp	00104$
      000551                       1492 00362$:
                                   1493 ;	life.c:217: show(1);
      000551 75 82 01         [24] 1494 	mov	dpl,#0x01
      000554 12r00r34         [24] 1495 	lcall	_show
                                   1496 ;	life.c:154: fixed = 1;
      000557 90r0Cr10         [24] 1497 	mov	dptr,#_fixed
      00055A 74 01            [12] 1498 	mov	a,#0x01
      00055C F0               [24] 1499 	movx	@dptr,a
                                   1500 ;	life.c:155: cycle2 = 1;
      00055D 90r0Cr11         [24] 1501 	mov	dptr,#_cycle2
      000560 F0               [24] 1502 	movx	@dptr,a
                                   1503 ;	life.c:156: bstep = 0;
      000561 90r0Cr0E         [24] 1504 	mov	dptr,#_bstep
      000564 E4               [12] 1505 	clr	a
      000565 F0               [24] 1506 	movx	@dptr,a
                                   1507 ;	life.c:158: for (y = 0; y < H; y++) {
      000566 90r0Cr04         [24] 1508 	mov	dptr,#_y
      000569 F0               [24] 1509 	movx	@dptr,a
      00056A A3               [24] 1510 	inc	dptr
      00056B F0               [24] 1511 	movx	@dptr,a
      00056C                       1512 00169$:
                                   1513 ;	life.c:159: putchar(busy[bstep]); putchar('\r');
      00056C 90r0Cr0E         [24] 1514 	mov	dptr,#_bstep
      00056F E0               [24] 1515 	movx	a,@dptr
      000570 90r0Ar7E         [24] 1516 	mov	dptr,#_busy
      000573 93               [24] 1517 	movc	a,@a+dptr
      000574 FF               [12] 1518 	mov	r7,a
      000575 7E 00            [12] 1519 	mov	r6,#0x00
      000577 8F 82            [24] 1520 	mov	dpl,r7
      000579 8E 83            [24] 1521 	mov	dph,r6
      00057B 12r00r00         [24] 1522 	lcall	_putchar
      00057E 90 00 0D         [24] 1523 	mov	dptr,#0x000d
      000581 12r00r00         [24] 1524 	lcall	_putchar
                                   1525 ;	life.c:160: bstep = (bstep + 1) & 3;
      000584 90r0Cr0E         [24] 1526 	mov	dptr,#_bstep
      000587 E0               [24] 1527 	movx	a,@dptr
      000588 FF               [12] 1528 	mov	r7,a
      000589 0F               [12] 1529 	inc	r7
      00058A 74 03            [12] 1530 	mov	a,#0x03
      00058C 5F               [12] 1531 	anl	a,r7
      00058D F0               [24] 1532 	movx	@dptr,a
                                   1533 ;	life.c:161: for (x = 0; x < W; x++) {
      00058E 90r0Cr02         [24] 1534 	mov	dptr,#_x
      000591 E4               [12] 1535 	clr	a
      000592 F0               [24] 1536 	movx	@dptr,a
      000593 A3               [24] 1537 	inc	dptr
      000594 F0               [24] 1538 	movx	@dptr,a
      000595                       1539 00167$:
                                   1540 ;	life.c:162: n = -u[A2D(W, y, x)];
      000595 90r0Cr04         [24] 1541 	mov	dptr,#_y
      000598 E0               [24] 1542 	movx	a,@dptr
      000599 FE               [12] 1543 	mov	r6,a
      00059A A3               [24] 1544 	inc	dptr
      00059B E0               [24] 1545 	movx	a,@dptr
      00059C FF               [12] 1546 	mov	r7,a
      00059D A8*00            [24] 1547 	mov	r0,_bp
      00059F 08               [12] 1548 	inc	r0
      0005A0 A6 06            [24] 1549 	mov	@r0,ar6
      0005A2 EF               [12] 1550 	mov	a,r7
      0005A3 C4               [12] 1551 	swap	a
      0005A4 23               [12] 1552 	rl	a
      0005A5 54 E0            [12] 1553 	anl	a,#0xe0
      0005A7 C6               [12] 1554 	xch	a,@r0
      0005A8 C4               [12] 1555 	swap	a
      0005A9 23               [12] 1556 	rl	a
      0005AA C6               [12] 1557 	xch	a,@r0
      0005AB 66               [12] 1558 	xrl	a,@r0
      0005AC C6               [12] 1559 	xch	a,@r0
      0005AD 54 E0            [12] 1560 	anl	a,#0xe0
      0005AF C6               [12] 1561 	xch	a,@r0
      0005B0 66               [12] 1562 	xrl	a,@r0
      0005B1 08               [12] 1563 	inc	r0
      0005B2 F6               [12] 1564 	mov	@r0,a
      0005B3 90r0Cr02         [24] 1565 	mov	dptr,#_x
      0005B6 E0               [24] 1566 	movx	a,@dptr
      0005B7 FA               [12] 1567 	mov	r2,a
      0005B8 A3               [24] 1568 	inc	dptr
      0005B9 E0               [24] 1569 	movx	a,@dptr
      0005BA FB               [12] 1570 	mov	r3,a
      0005BB A8*00            [24] 1571 	mov	r0,_bp
      0005BD 08               [12] 1572 	inc	r0
      0005BE E5*00            [12] 1573 	mov	a,_bp
      0005C0 24 03            [12] 1574 	add	a,#0x03
      0005C2 F9               [12] 1575 	mov	r1,a
      0005C3 EA               [12] 1576 	mov	a,r2
      0005C4 26               [12] 1577 	add	a,@r0
      0005C5 F7               [12] 1578 	mov	@r1,a
      0005C6 EB               [12] 1579 	mov	a,r3
      0005C7 08               [12] 1580 	inc	r0
      0005C8 36               [12] 1581 	addc	a,@r0
      0005C9 09               [12] 1582 	inc	r1
      0005CA F7               [12] 1583 	mov	@r1,a
      0005CB E5*00            [12] 1584 	mov	a,_bp
      0005CD 24 03            [12] 1585 	add	a,#0x03
      0005CF F8               [12] 1586 	mov	r0,a
      0005D0 E6               [12] 1587 	mov	a,@r0
      0005D1 24r02            [12] 1588 	add	a,#_u
      0005D3 F5 82            [12] 1589 	mov	dpl,a
      0005D5 08               [12] 1590 	inc	r0
      0005D6 E6               [12] 1591 	mov	a,@r0
      0005D7 34s04            [12] 1592 	addc	a,#(_u >> 8)
      0005D9 F5 83            [12] 1593 	mov	dph,a
      0005DB E0               [24] 1594 	movx	a,@dptr
      0005DC FD               [12] 1595 	mov	r5,a
      0005DD E5*00            [12] 1596 	mov	a,_bp
      0005DF 24 05            [12] 1597 	add	a,#0x05
      0005E1 F8               [12] 1598 	mov	r0,a
      0005E2 C3               [12] 1599 	clr	c
      0005E3 E4               [12] 1600 	clr	a
      0005E4 9D               [12] 1601 	subb	a,r5
      0005E5 F6               [12] 1602 	mov	@r0,a
                                   1603 ;	life.c:165: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0005E6 74 1F            [12] 1604 	mov	a,#0x1f
      0005E8 2E               [12] 1605 	add	a,r6
      0005E9 FC               [12] 1606 	mov	r4,a
      0005EA E4               [12] 1607 	clr	a
      0005EB 3F               [12] 1608 	addc	a,r7
      0005EC FD               [12] 1609 	mov	r5,a
      0005ED C0 07            [24] 1610 	push	ar7
      0005EF C0 06            [24] 1611 	push	ar6
      0005F1 C0 03            [24] 1612 	push	ar3
      0005F3 C0 02            [24] 1613 	push	ar2
      0005F5 74 20            [12] 1614 	mov	a,#0x20
      0005F7 C0 E0            [24] 1615 	push	acc
      0005F9 E4               [12] 1616 	clr	a
      0005FA C0 E0            [24] 1617 	push	acc
      0005FC 8C 82            [24] 1618 	mov	dpl,r4
      0005FE 8D 83            [24] 1619 	mov	dph,r5
      000600 12r00r00         [24] 1620 	lcall	__modsint
      000603 AC 82            [24] 1621 	mov	r4,dpl
      000605 AD 83            [24] 1622 	mov	r5,dph
      000607 15 81            [12] 1623 	dec	sp
      000609 15 81            [12] 1624 	dec	sp
      00060B D0 02            [24] 1625 	pop	ar2
      00060D D0 03            [24] 1626 	pop	ar3
      00060F E5*00            [12] 1627 	mov	a,_bp
      000611 24 06            [12] 1628 	add	a,#0x06
      000613 F8               [12] 1629 	mov	r0,a
      000614 A6 04            [24] 1630 	mov	@r0,ar4
      000616 ED               [12] 1631 	mov	a,r5
      000617 C4               [12] 1632 	swap	a
      000618 23               [12] 1633 	rl	a
      000619 54 E0            [12] 1634 	anl	a,#0xe0
      00061B C6               [12] 1635 	xch	a,@r0
      00061C C4               [12] 1636 	swap	a
      00061D 23               [12] 1637 	rl	a
      00061E C6               [12] 1638 	xch	a,@r0
      00061F 66               [12] 1639 	xrl	a,@r0
      000620 C6               [12] 1640 	xch	a,@r0
      000621 54 E0            [12] 1641 	anl	a,#0xe0
      000623 C6               [12] 1642 	xch	a,@r0
      000624 66               [12] 1643 	xrl	a,@r0
      000625 08               [12] 1644 	inc	r0
      000626 F6               [12] 1645 	mov	@r0,a
      000627 74 1F            [12] 1646 	mov	a,#0x1f
      000629 2A               [12] 1647 	add	a,r2
      00062A FC               [12] 1648 	mov	r4,a
      00062B E4               [12] 1649 	clr	a
      00062C 3B               [12] 1650 	addc	a,r3
      00062D FD               [12] 1651 	mov	r5,a
      00062E C0 03            [24] 1652 	push	ar3
      000630 C0 02            [24] 1653 	push	ar2
      000632 74 20            [12] 1654 	mov	a,#0x20
      000634 C0 E0            [24] 1655 	push	acc
      000636 E4               [12] 1656 	clr	a
      000637 C0 E0            [24] 1657 	push	acc
      000639 8C 82            [24] 1658 	mov	dpl,r4
      00063B 8D 83            [24] 1659 	mov	dph,r5
      00063D 12r00r00         [24] 1660 	lcall	__modsint
      000640 C8               [12] 1661 	xch	a,r0
      000641 E5*00            [12] 1662 	mov	a,_bp
      000643 24 08            [12] 1663 	add	a,#0x08
      000645 C8               [12] 1664 	xch	a,r0
      000646 A6 82            [24] 1665 	mov	@r0,dpl
      000648 08               [12] 1666 	inc	r0
      000649 A6 83            [24] 1667 	mov	@r0,dph
      00064B 15 81            [12] 1668 	dec	sp
      00064D 15 81            [12] 1669 	dec	sp
      00064F D0 02            [24] 1670 	pop	ar2
      000651 D0 03            [24] 1671 	pop	ar3
      000653 E5*00            [12] 1672 	mov	a,_bp
      000655 24 06            [12] 1673 	add	a,#0x06
      000657 F8               [12] 1674 	mov	r0,a
      000658 E5*00            [12] 1675 	mov	a,_bp
      00065A 24 08            [12] 1676 	add	a,#0x08
      00065C F9               [12] 1677 	mov	r1,a
      00065D E7               [12] 1678 	mov	a,@r1
      00065E 26               [12] 1679 	add	a,@r0
      00065F FC               [12] 1680 	mov	r4,a
      000660 09               [12] 1681 	inc	r1
      000661 E7               [12] 1682 	mov	a,@r1
      000662 08               [12] 1683 	inc	r0
      000663 36               [12] 1684 	addc	a,@r0
      000664 FD               [12] 1685 	mov	r5,a
      000665 EC               [12] 1686 	mov	a,r4
      000666 24r02            [12] 1687 	add	a,#_u
      000668 F5 82            [12] 1688 	mov	dpl,a
      00066A ED               [12] 1689 	mov	a,r5
      00066B 34s04            [12] 1690 	addc	a,#(_u >> 8)
      00066D F5 83            [12] 1691 	mov	dph,a
      00066F E0               [24] 1692 	movx	a,@dptr
      000670 FD               [12] 1693 	mov	r5,a
      000671 E5*00            [12] 1694 	mov	a,_bp
      000673 24 05            [12] 1695 	add	a,#0x05
      000675 F8               [12] 1696 	mov	r0,a
      000676 ED               [12] 1697 	mov	a,r5
      000677 26               [12] 1698 	add	a,@r0
      000678 F6               [12] 1699 	mov	@r0,a
                                   1700 ;	life.c:167: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000679 74 20            [12] 1701 	mov	a,#0x20
      00067B 2A               [12] 1702 	add	a,r2
      00067C FC               [12] 1703 	mov	r4,a
      00067D E4               [12] 1704 	clr	a
      00067E 3B               [12] 1705 	addc	a,r3
      00067F FD               [12] 1706 	mov	r5,a
      000680 C0 03            [24] 1707 	push	ar3
      000682 C0 02            [24] 1708 	push	ar2
      000684 74 20            [12] 1709 	mov	a,#0x20
      000686 C0 E0            [24] 1710 	push	acc
      000688 E4               [12] 1711 	clr	a
      000689 C0 E0            [24] 1712 	push	acc
      00068B 8C 82            [24] 1713 	mov	dpl,r4
      00068D 8D 83            [24] 1714 	mov	dph,r5
      00068F 12r00r00         [24] 1715 	lcall	__modsint
      000692 C8               [12] 1716 	xch	a,r0
      000693 E5*00            [12] 1717 	mov	a,_bp
      000695 24 0A            [12] 1718 	add	a,#0x0a
      000697 C8               [12] 1719 	xch	a,r0
      000698 A6 82            [24] 1720 	mov	@r0,dpl
      00069A 08               [12] 1721 	inc	r0
      00069B A6 83            [24] 1722 	mov	@r0,dph
      00069D 15 81            [12] 1723 	dec	sp
      00069F 15 81            [12] 1724 	dec	sp
      0006A1 D0 02            [24] 1725 	pop	ar2
      0006A3 D0 03            [24] 1726 	pop	ar3
      0006A5 E5*00            [12] 1727 	mov	a,_bp
      0006A7 24 06            [12] 1728 	add	a,#0x06
      0006A9 F8               [12] 1729 	mov	r0,a
      0006AA E5*00            [12] 1730 	mov	a,_bp
      0006AC 24 0A            [12] 1731 	add	a,#0x0a
      0006AE F9               [12] 1732 	mov	r1,a
      0006AF E7               [12] 1733 	mov	a,@r1
      0006B0 26               [12] 1734 	add	a,@r0
      0006B1 FC               [12] 1735 	mov	r4,a
      0006B2 09               [12] 1736 	inc	r1
      0006B3 E7               [12] 1737 	mov	a,@r1
      0006B4 08               [12] 1738 	inc	r0
      0006B5 36               [12] 1739 	addc	a,@r0
      0006B6 FD               [12] 1740 	mov	r5,a
      0006B7 EC               [12] 1741 	mov	a,r4
      0006B8 24r02            [12] 1742 	add	a,#_u
      0006BA F5 82            [12] 1743 	mov	dpl,a
      0006BC ED               [12] 1744 	mov	a,r5
      0006BD 34s04            [12] 1745 	addc	a,#(_u >> 8)
      0006BF F5 83            [12] 1746 	mov	dph,a
      0006C1 E0               [24] 1747 	movx	a,@dptr
      0006C2 FD               [12] 1748 	mov	r5,a
      0006C3 E5*00            [12] 1749 	mov	a,_bp
      0006C5 24 05            [12] 1750 	add	a,#0x05
      0006C7 F8               [12] 1751 	mov	r0,a
      0006C8 ED               [12] 1752 	mov	a,r5
      0006C9 26               [12] 1753 	add	a,@r0
      0006CA F6               [12] 1754 	mov	@r0,a
                                   1755 ;	life.c:169: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006CB 74 21            [12] 1756 	mov	a,#0x21
      0006CD 2A               [12] 1757 	add	a,r2
      0006CE FC               [12] 1758 	mov	r4,a
      0006CF E4               [12] 1759 	clr	a
      0006D0 3B               [12] 1760 	addc	a,r3
      0006D1 FD               [12] 1761 	mov	r5,a
      0006D2 C0 03            [24] 1762 	push	ar3
      0006D4 C0 02            [24] 1763 	push	ar2
      0006D6 74 20            [12] 1764 	mov	a,#0x20
      0006D8 C0 E0            [24] 1765 	push	acc
      0006DA E4               [12] 1766 	clr	a
      0006DB C0 E0            [24] 1767 	push	acc
      0006DD 8C 82            [24] 1768 	mov	dpl,r4
      0006DF 8D 83            [24] 1769 	mov	dph,r5
      0006E1 12r00r00         [24] 1770 	lcall	__modsint
      0006E4 C8               [12] 1771 	xch	a,r0
      0006E5 E5*00            [12] 1772 	mov	a,_bp
      0006E7 24 0C            [12] 1773 	add	a,#0x0c
      0006E9 C8               [12] 1774 	xch	a,r0
      0006EA A6 82            [24] 1775 	mov	@r0,dpl
      0006EC 08               [12] 1776 	inc	r0
      0006ED A6 83            [24] 1777 	mov	@r0,dph
      0006EF 15 81            [12] 1778 	dec	sp
      0006F1 15 81            [12] 1779 	dec	sp
      0006F3 D0 02            [24] 1780 	pop	ar2
      0006F5 D0 03            [24] 1781 	pop	ar3
      0006F7 D0 06            [24] 1782 	pop	ar6
      0006F9 D0 07            [24] 1783 	pop	ar7
      0006FB E5*00            [12] 1784 	mov	a,_bp
      0006FD 24 06            [12] 1785 	add	a,#0x06
      0006FF F8               [12] 1786 	mov	r0,a
      000700 E5*00            [12] 1787 	mov	a,_bp
      000702 24 0C            [12] 1788 	add	a,#0x0c
      000704 F9               [12] 1789 	mov	r1,a
      000705 E7               [12] 1790 	mov	a,@r1
      000706 26               [12] 1791 	add	a,@r0
      000707 FC               [12] 1792 	mov	r4,a
      000708 09               [12] 1793 	inc	r1
      000709 E7               [12] 1794 	mov	a,@r1
      00070A 08               [12] 1795 	inc	r0
      00070B 36               [12] 1796 	addc	a,@r0
      00070C FD               [12] 1797 	mov	r5,a
      00070D EC               [12] 1798 	mov	a,r4
      00070E 24r02            [12] 1799 	add	a,#_u
      000710 F5 82            [12] 1800 	mov	dpl,a
      000712 ED               [12] 1801 	mov	a,r5
      000713 34s04            [12] 1802 	addc	a,#(_u >> 8)
      000715 F5 83            [12] 1803 	mov	dph,a
      000717 E0               [24] 1804 	movx	a,@dptr
      000718 FD               [12] 1805 	mov	r5,a
      000719 E5*00            [12] 1806 	mov	a,_bp
      00071B 24 05            [12] 1807 	add	a,#0x05
      00071D F8               [12] 1808 	mov	r0,a
      00071E E5*00            [12] 1809 	mov	a,_bp
      000720 24 06            [12] 1810 	add	a,#0x06
      000722 F9               [12] 1811 	mov	r1,a
      000723 ED               [12] 1812 	mov	a,r5
      000724 26               [12] 1813 	add	a,@r0
      000725 F7               [12] 1814 	mov	@r1,a
                                   1815 ;	life.c:171: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000726 74 20            [12] 1816 	mov	a,#0x20
      000728 2E               [12] 1817 	add	a,r6
      000729 FC               [12] 1818 	mov	r4,a
      00072A E4               [12] 1819 	clr	a
      00072B 3F               [12] 1820 	addc	a,r7
      00072C FD               [12] 1821 	mov	r5,a
      00072D C0 07            [24] 1822 	push	ar7
      00072F C0 06            [24] 1823 	push	ar6
      000731 C0 03            [24] 1824 	push	ar3
      000733 C0 02            [24] 1825 	push	ar2
      000735 74 20            [12] 1826 	mov	a,#0x20
      000737 C0 E0            [24] 1827 	push	acc
      000739 E4               [12] 1828 	clr	a
      00073A C0 E0            [24] 1829 	push	acc
      00073C 8C 82            [24] 1830 	mov	dpl,r4
      00073E 8D 83            [24] 1831 	mov	dph,r5
      000740 12r00r00         [24] 1832 	lcall	__modsint
      000743 AC 82            [24] 1833 	mov	r4,dpl
      000745 AD 83            [24] 1834 	mov	r5,dph
      000747 15 81            [12] 1835 	dec	sp
      000749 15 81            [12] 1836 	dec	sp
      00074B D0 02            [24] 1837 	pop	ar2
      00074D D0 03            [24] 1838 	pop	ar3
      00074F D0 06            [24] 1839 	pop	ar6
      000751 D0 07            [24] 1840 	pop	ar7
      000753 E5*00            [12] 1841 	mov	a,_bp
      000755 24 0E            [12] 1842 	add	a,#0x0e
      000757 F8               [12] 1843 	mov	r0,a
      000758 A6 04            [24] 1844 	mov	@r0,ar4
      00075A ED               [12] 1845 	mov	a,r5
      00075B C4               [12] 1846 	swap	a
      00075C 23               [12] 1847 	rl	a
      00075D 54 E0            [12] 1848 	anl	a,#0xe0
      00075F C6               [12] 1849 	xch	a,@r0
      000760 C4               [12] 1850 	swap	a
      000761 23               [12] 1851 	rl	a
      000762 C6               [12] 1852 	xch	a,@r0
      000763 66               [12] 1853 	xrl	a,@r0
      000764 C6               [12] 1854 	xch	a,@r0
      000765 54 E0            [12] 1855 	anl	a,#0xe0
      000767 C6               [12] 1856 	xch	a,@r0
      000768 66               [12] 1857 	xrl	a,@r0
      000769 08               [12] 1858 	inc	r0
      00076A F6               [12] 1859 	mov	@r0,a
      00076B E5*00            [12] 1860 	mov	a,_bp
      00076D 24 0E            [12] 1861 	add	a,#0x0e
      00076F F8               [12] 1862 	mov	r0,a
      000770 E5*00            [12] 1863 	mov	a,_bp
      000772 24 08            [12] 1864 	add	a,#0x08
      000774 F9               [12] 1865 	mov	r1,a
      000775 E7               [12] 1866 	mov	a,@r1
      000776 26               [12] 1867 	add	a,@r0
      000777 FC               [12] 1868 	mov	r4,a
      000778 09               [12] 1869 	inc	r1
      000779 E7               [12] 1870 	mov	a,@r1
      00077A 08               [12] 1871 	inc	r0
      00077B 36               [12] 1872 	addc	a,@r0
      00077C FD               [12] 1873 	mov	r5,a
      00077D EC               [12] 1874 	mov	a,r4
      00077E 24r02            [12] 1875 	add	a,#_u
      000780 F5 82            [12] 1876 	mov	dpl,a
      000782 ED               [12] 1877 	mov	a,r5
      000783 34s04            [12] 1878 	addc	a,#(_u >> 8)
      000785 F5 83            [12] 1879 	mov	dph,a
      000787 E0               [24] 1880 	movx	a,@dptr
      000788 FD               [12] 1881 	mov	r5,a
      000789 E5*00            [12] 1882 	mov	a,_bp
      00078B 24 06            [12] 1883 	add	a,#0x06
      00078D F8               [12] 1884 	mov	r0,a
      00078E E5*00            [12] 1885 	mov	a,_bp
      000790 24 06            [12] 1886 	add	a,#0x06
      000792 F9               [12] 1887 	mov	r1,a
      000793 ED               [12] 1888 	mov	a,r5
      000794 26               [12] 1889 	add	a,@r0
      000795 F7               [12] 1890 	mov	@r1,a
                                   1891 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000796 E5*00            [12] 1892 	mov	a,_bp
      000798 24 0E            [12] 1893 	add	a,#0x0e
      00079A F8               [12] 1894 	mov	r0,a
      00079B E5*00            [12] 1895 	mov	a,_bp
      00079D 24 0A            [12] 1896 	add	a,#0x0a
      00079F F9               [12] 1897 	mov	r1,a
      0007A0 E7               [12] 1898 	mov	a,@r1
      0007A1 26               [12] 1899 	add	a,@r0
      0007A2 FC               [12] 1900 	mov	r4,a
      0007A3 09               [12] 1901 	inc	r1
      0007A4 E7               [12] 1902 	mov	a,@r1
      0007A5 08               [12] 1903 	inc	r0
      0007A6 36               [12] 1904 	addc	a,@r0
      0007A7 FD               [12] 1905 	mov	r5,a
      0007A8 EC               [12] 1906 	mov	a,r4
      0007A9 24r02            [12] 1907 	add	a,#_u
      0007AB F5 82            [12] 1908 	mov	dpl,a
      0007AD ED               [12] 1909 	mov	a,r5
      0007AE 34s04            [12] 1910 	addc	a,#(_u >> 8)
      0007B0 F5 83            [12] 1911 	mov	dph,a
      0007B2 E0               [24] 1912 	movx	a,@dptr
      0007B3 FD               [12] 1913 	mov	r5,a
      0007B4 E5*00            [12] 1914 	mov	a,_bp
      0007B6 24 06            [12] 1915 	add	a,#0x06
      0007B8 F8               [12] 1916 	mov	r0,a
      0007B9 E5*00            [12] 1917 	mov	a,_bp
      0007BB 24 06            [12] 1918 	add	a,#0x06
      0007BD F9               [12] 1919 	mov	r1,a
      0007BE ED               [12] 1920 	mov	a,r5
      0007BF 26               [12] 1921 	add	a,@r0
      0007C0 F7               [12] 1922 	mov	@r1,a
                                   1923 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007C1 E5*00            [12] 1924 	mov	a,_bp
      0007C3 24 0E            [12] 1925 	add	a,#0x0e
      0007C5 F8               [12] 1926 	mov	r0,a
      0007C6 E5*00            [12] 1927 	mov	a,_bp
      0007C8 24 0C            [12] 1928 	add	a,#0x0c
      0007CA F9               [12] 1929 	mov	r1,a
      0007CB E7               [12] 1930 	mov	a,@r1
      0007CC 26               [12] 1931 	add	a,@r0
      0007CD FC               [12] 1932 	mov	r4,a
      0007CE 09               [12] 1933 	inc	r1
      0007CF E7               [12] 1934 	mov	a,@r1
      0007D0 08               [12] 1935 	inc	r0
      0007D1 36               [12] 1936 	addc	a,@r0
      0007D2 FD               [12] 1937 	mov	r5,a
      0007D3 EC               [12] 1938 	mov	a,r4
      0007D4 24r02            [12] 1939 	add	a,#_u
      0007D6 F5 82            [12] 1940 	mov	dpl,a
      0007D8 ED               [12] 1941 	mov	a,r5
      0007D9 34s04            [12] 1942 	addc	a,#(_u >> 8)
      0007DB F5 83            [12] 1943 	mov	dph,a
      0007DD E0               [24] 1944 	movx	a,@dptr
      0007DE FD               [12] 1945 	mov	r5,a
      0007DF E5*00            [12] 1946 	mov	a,_bp
      0007E1 24 06            [12] 1947 	add	a,#0x06
      0007E3 F8               [12] 1948 	mov	r0,a
      0007E4 E5*00            [12] 1949 	mov	a,_bp
      0007E6 24 0E            [12] 1950 	add	a,#0x0e
      0007E8 F9               [12] 1951 	mov	r1,a
      0007E9 ED               [12] 1952 	mov	a,r5
      0007EA 26               [12] 1953 	add	a,@r0
      0007EB F7               [12] 1954 	mov	@r1,a
                                   1955 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007EC 74 21            [12] 1956 	mov	a,#0x21
      0007EE 2E               [12] 1957 	add	a,r6
      0007EF FE               [12] 1958 	mov	r6,a
      0007F0 E4               [12] 1959 	clr	a
      0007F1 3F               [12] 1960 	addc	a,r7
      0007F2 FF               [12] 1961 	mov	r7,a
      0007F3 C0 03            [24] 1962 	push	ar3
      0007F5 C0 02            [24] 1963 	push	ar2
      0007F7 74 20            [12] 1964 	mov	a,#0x20
      0007F9 C0 E0            [24] 1965 	push	acc
      0007FB E4               [12] 1966 	clr	a
      0007FC C0 E0            [24] 1967 	push	acc
      0007FE 8E 82            [24] 1968 	mov	dpl,r6
      000800 8F 83            [24] 1969 	mov	dph,r7
      000802 12r00r00         [24] 1970 	lcall	__modsint
      000805 AE 82            [24] 1971 	mov	r6,dpl
      000807 AF 83            [24] 1972 	mov	r7,dph
      000809 15 81            [12] 1973 	dec	sp
      00080B 15 81            [12] 1974 	dec	sp
      00080D D0 02            [24] 1975 	pop	ar2
      00080F D0 03            [24] 1976 	pop	ar3
      000811 EF               [12] 1977 	mov	a,r7
      000812 C4               [12] 1978 	swap	a
      000813 23               [12] 1979 	rl	a
      000814 54 E0            [12] 1980 	anl	a,#0xe0
      000816 CE               [12] 1981 	xch	a,r6
      000817 C4               [12] 1982 	swap	a
      000818 23               [12] 1983 	rl	a
      000819 CE               [12] 1984 	xch	a,r6
      00081A 6E               [12] 1985 	xrl	a,r6
      00081B CE               [12] 1986 	xch	a,r6
      00081C 54 E0            [12] 1987 	anl	a,#0xe0
      00081E CE               [12] 1988 	xch	a,r6
      00081F 6E               [12] 1989 	xrl	a,r6
      000820 FF               [12] 1990 	mov	r7,a
      000821 E5*00            [12] 1991 	mov	a,_bp
      000823 24 08            [12] 1992 	add	a,#0x08
      000825 F8               [12] 1993 	mov	r0,a
      000826 E6               [12] 1994 	mov	a,@r0
      000827 2E               [12] 1995 	add	a,r6
      000828 FC               [12] 1996 	mov	r4,a
      000829 08               [12] 1997 	inc	r0
      00082A E6               [12] 1998 	mov	a,@r0
      00082B 3F               [12] 1999 	addc	a,r7
      00082C FD               [12] 2000 	mov	r5,a
      00082D EC               [12] 2001 	mov	a,r4
      00082E 24r02            [12] 2002 	add	a,#_u
      000830 F5 82            [12] 2003 	mov	dpl,a
      000832 ED               [12] 2004 	mov	a,r5
      000833 34s04            [12] 2005 	addc	a,#(_u >> 8)
      000835 F5 83            [12] 2006 	mov	dph,a
      000837 E0               [24] 2007 	movx	a,@dptr
      000838 FD               [12] 2008 	mov	r5,a
      000839 E5*00            [12] 2009 	mov	a,_bp
      00083B 24 0E            [12] 2010 	add	a,#0x0e
      00083D F8               [12] 2011 	mov	r0,a
      00083E E5*00            [12] 2012 	mov	a,_bp
      000840 24 0E            [12] 2013 	add	a,#0x0e
      000842 F9               [12] 2014 	mov	r1,a
      000843 ED               [12] 2015 	mov	a,r5
      000844 26               [12] 2016 	add	a,@r0
      000845 F7               [12] 2017 	mov	@r1,a
                                   2018 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000846 E5*00            [12] 2019 	mov	a,_bp
      000848 24 0A            [12] 2020 	add	a,#0x0a
      00084A F8               [12] 2021 	mov	r0,a
      00084B E6               [12] 2022 	mov	a,@r0
      00084C 2E               [12] 2023 	add	a,r6
      00084D FC               [12] 2024 	mov	r4,a
      00084E 08               [12] 2025 	inc	r0
      00084F E6               [12] 2026 	mov	a,@r0
      000850 3F               [12] 2027 	addc	a,r7
      000851 FD               [12] 2028 	mov	r5,a
      000852 EC               [12] 2029 	mov	a,r4
      000853 24r02            [12] 2030 	add	a,#_u
      000855 F5 82            [12] 2031 	mov	dpl,a
      000857 ED               [12] 2032 	mov	a,r5
      000858 34s04            [12] 2033 	addc	a,#(_u >> 8)
      00085A F5 83            [12] 2034 	mov	dph,a
      00085C E0               [24] 2035 	movx	a,@dptr
      00085D FD               [12] 2036 	mov	r5,a
      00085E E5*00            [12] 2037 	mov	a,_bp
      000860 24 0E            [12] 2038 	add	a,#0x0e
      000862 F8               [12] 2039 	mov	r0,a
      000863 ED               [12] 2040 	mov	a,r5
      000864 26               [12] 2041 	add	a,@r0
      000865 FD               [12] 2042 	mov	r5,a
                                   2043 ;	life.c:180: y1 = 1; x1 = 1;
      000866 90r0Cr08         [24] 2044 	mov	dptr,#_y1
      000869 74 01            [12] 2045 	mov	a,#0x01
      00086B F0               [24] 2046 	movx	@dptr,a
      00086C E4               [12] 2047 	clr	a
      00086D A3               [24] 2048 	inc	dptr
      00086E F0               [24] 2049 	movx	@dptr,a
      00086F 90r0Cr06         [24] 2050 	mov	dptr,#_x1
      000872 04               [12] 2051 	inc	a
      000873 F0               [24] 2052 	movx	@dptr,a
      000874 E4               [12] 2053 	clr	a
      000875 A3               [24] 2054 	inc	dptr
      000876 F0               [24] 2055 	movx	@dptr,a
                                   2056 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000877 E5*00            [12] 2057 	mov	a,_bp
      000879 24 0C            [12] 2058 	add	a,#0x0c
      00087B F8               [12] 2059 	mov	r0,a
      00087C E6               [12] 2060 	mov	a,@r0
      00087D 2E               [12] 2061 	add	a,r6
      00087E FE               [12] 2062 	mov	r6,a
      00087F 08               [12] 2063 	inc	r0
      000880 E6               [12] 2064 	mov	a,@r0
      000881 3F               [12] 2065 	addc	a,r7
      000882 FF               [12] 2066 	mov	r7,a
      000883 EE               [12] 2067 	mov	a,r6
      000884 24r02            [12] 2068 	add	a,#_u
      000886 F5 82            [12] 2069 	mov	dpl,a
      000888 EF               [12] 2070 	mov	a,r7
      000889 34s04            [12] 2071 	addc	a,#(_u >> 8)
      00088B F5 83            [12] 2072 	mov	dph,a
      00088D E0               [24] 2073 	movx	a,@dptr
      00088E 2D               [12] 2074 	add	a,r5
      00088F FF               [12] 2075 	mov	r7,a
      000890 90r0Cr0F         [24] 2076 	mov	dptr,#_n
      000893 F0               [24] 2077 	movx	@dptr,a
                                   2078 ;	life.c:183: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000894 E5*00            [12] 2079 	mov	a,_bp
      000896 24 03            [12] 2080 	add	a,#0x03
      000898 F8               [12] 2081 	mov	r0,a
      000899 E6               [12] 2082 	mov	a,@r0
      00089A 24r02            [12] 2083 	add	a,#_nu
      00089C FD               [12] 2084 	mov	r5,a
      00089D 08               [12] 2085 	inc	r0
      00089E E6               [12] 2086 	mov	a,@r0
      00089F 34s08            [12] 2087 	addc	a,#(_nu >> 8)
      0008A1 FE               [12] 2088 	mov	r6,a
      0008A2 BF 03 02         [24] 2089 	cjne	r7,#0x03,00363$
      0008A5 80 20            [24] 2090 	sjmp	00189$
      0008A7                       2091 00363$:
      0008A7 BF 02 19         [24] 2092 	cjne	r7,#0x02,00188$
      0008AA A8*00            [24] 2093 	mov	r0,_bp
      0008AC 08               [12] 2094 	inc	r0
      0008AD EA               [12] 2095 	mov	a,r2
      0008AE 26               [12] 2096 	add	a,@r0
      0008AF FA               [12] 2097 	mov	r2,a
      0008B0 EB               [12] 2098 	mov	a,r3
      0008B1 08               [12] 2099 	inc	r0
      0008B2 36               [12] 2100 	addc	a,@r0
      0008B3 FB               [12] 2101 	mov	r3,a
      0008B4 EA               [12] 2102 	mov	a,r2
      0008B5 24r02            [12] 2103 	add	a,#_u
      0008B7 FA               [12] 2104 	mov	r2,a
      0008B8 EB               [12] 2105 	mov	a,r3
      0008B9 34s04            [12] 2106 	addc	a,#(_u >> 8)
      0008BB FB               [12] 2107 	mov	r3,a
      0008BC 8A 82            [24] 2108 	mov	dpl,r2
      0008BE 8B 83            [24] 2109 	mov	dph,r3
      0008C0 E0               [24] 2110 	movx	a,@dptr
      0008C1 70 04            [24] 2111 	jnz	00189$
      0008C3                       2112 00188$:
                                   2113 ;	assignBit
      0008C3 C2*00            [12] 2114 	clr	b0
      0008C5 80 02            [24] 2115 	sjmp	00190$
      0008C7                       2116 00189$:
                                   2117 ;	assignBit
      0008C7 D2*00            [12] 2118 	setb	b0
      0008C9                       2119 00190$:
      0008C9 A2*00            [12] 2120 	mov	c,b0
      0008CB E4               [12] 2121 	clr	a
      0008CC 33               [12] 2122 	rlc	a
      0008CD 8D 82            [24] 2123 	mov	dpl,r5
      0008CF 8E 83            [24] 2124 	mov	dph,r6
      0008D1 F0               [24] 2125 	movx	@dptr,a
                                   2126 ;	life.c:185: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      0008D2 90r0Cr04         [24] 2127 	mov	dptr,#_y
      0008D5 E0               [24] 2128 	movx	a,@dptr
      0008D6 FE               [12] 2129 	mov	r6,a
      0008D7 A3               [24] 2130 	inc	dptr
      0008D8 E0               [24] 2131 	movx	a,@dptr
      0008D9 C4               [12] 2132 	swap	a
      0008DA 23               [12] 2133 	rl	a
      0008DB 54 E0            [12] 2134 	anl	a,#0xe0
      0008DD CE               [12] 2135 	xch	a,r6
      0008DE C4               [12] 2136 	swap	a
      0008DF 23               [12] 2137 	rl	a
      0008E0 CE               [12] 2138 	xch	a,r6
      0008E1 6E               [12] 2139 	xrl	a,r6
      0008E2 CE               [12] 2140 	xch	a,r6
      0008E3 54 E0            [12] 2141 	anl	a,#0xe0
      0008E5 CE               [12] 2142 	xch	a,r6
      0008E6 6E               [12] 2143 	xrl	a,r6
      0008E7 FF               [12] 2144 	mov	r7,a
      0008E8 90r0Cr02         [24] 2145 	mov	dptr,#_x
      0008EB E0               [24] 2146 	movx	a,@dptr
      0008EC FC               [12] 2147 	mov	r4,a
      0008ED A3               [24] 2148 	inc	dptr
      0008EE E0               [24] 2149 	movx	a,@dptr
      0008EF FD               [12] 2150 	mov	r5,a
      0008F0 EC               [12] 2151 	mov	a,r4
      0008F1 2E               [12] 2152 	add	a,r6
      0008F2 FE               [12] 2153 	mov	r6,a
      0008F3 ED               [12] 2154 	mov	a,r5
      0008F4 3F               [12] 2155 	addc	a,r7
      0008F5 FF               [12] 2156 	mov	r7,a
      0008F6 EE               [12] 2157 	mov	a,r6
      0008F7 24r02            [12] 2158 	add	a,#_pu
      0008F9 F5 82            [12] 2159 	mov	dpl,a
      0008FB EF               [12] 2160 	mov	a,r7
      0008FC 34s00            [12] 2161 	addc	a,#(_pu >> 8)
      0008FE F5 83            [12] 2162 	mov	dph,a
      000900 E0               [24] 2163 	movx	a,@dptr
      000901 FD               [12] 2164 	mov	r5,a
      000902 EE               [12] 2165 	mov	a,r6
      000903 24r02            [12] 2166 	add	a,#_nu
      000905 F5 82            [12] 2167 	mov	dpl,a
      000907 EF               [12] 2168 	mov	a,r7
      000908 34s08            [12] 2169 	addc	a,#(_nu >> 8)
      00090A F5 83            [12] 2170 	mov	dph,a
      00090C E0               [24] 2171 	movx	a,@dptr
      00090D FF               [12] 2172 	mov	r7,a
      00090E ED               [12] 2173 	mov	a,r5
      00090F B5 07 02         [24] 2174 	cjne	a,ar7,00367$
      000912 80 05            [24] 2175 	sjmp	00139$
      000914                       2176 00367$:
      000914 90r0Cr11         [24] 2177 	mov	dptr,#_cycle2
      000917 E4               [12] 2178 	clr	a
      000918 F0               [24] 2179 	movx	@dptr,a
      000919                       2180 00139$:
                                   2181 ;	life.c:186: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      000919 90r0Cr04         [24] 2182 	mov	dptr,#_y
      00091C E0               [24] 2183 	movx	a,@dptr
      00091D FE               [12] 2184 	mov	r6,a
      00091E A3               [24] 2185 	inc	dptr
      00091F E0               [24] 2186 	movx	a,@dptr
      000920 C4               [12] 2187 	swap	a
      000921 23               [12] 2188 	rl	a
      000922 54 E0            [12] 2189 	anl	a,#0xe0
      000924 CE               [12] 2190 	xch	a,r6
      000925 C4               [12] 2191 	swap	a
      000926 23               [12] 2192 	rl	a
      000927 CE               [12] 2193 	xch	a,r6
      000928 6E               [12] 2194 	xrl	a,r6
      000929 CE               [12] 2195 	xch	a,r6
      00092A 54 E0            [12] 2196 	anl	a,#0xe0
      00092C CE               [12] 2197 	xch	a,r6
      00092D 6E               [12] 2198 	xrl	a,r6
      00092E FF               [12] 2199 	mov	r7,a
      00092F 90r0Cr02         [24] 2200 	mov	dptr,#_x
      000932 E0               [24] 2201 	movx	a,@dptr
      000933 FC               [12] 2202 	mov	r4,a
      000934 A3               [24] 2203 	inc	dptr
      000935 E0               [24] 2204 	movx	a,@dptr
      000936 FD               [12] 2205 	mov	r5,a
      000937 EC               [12] 2206 	mov	a,r4
      000938 2E               [12] 2207 	add	a,r6
      000939 FE               [12] 2208 	mov	r6,a
      00093A ED               [12] 2209 	mov	a,r5
      00093B 3F               [12] 2210 	addc	a,r7
      00093C FF               [12] 2211 	mov	r7,a
      00093D EE               [12] 2212 	mov	a,r6
      00093E 24r02            [12] 2213 	add	a,#_u
      000940 F5 82            [12] 2214 	mov	dpl,a
      000942 EF               [12] 2215 	mov	a,r7
      000943 34s04            [12] 2216 	addc	a,#(_u >> 8)
      000945 F5 83            [12] 2217 	mov	dph,a
      000947 E0               [24] 2218 	movx	a,@dptr
      000948 FD               [12] 2219 	mov	r5,a
      000949 EE               [12] 2220 	mov	a,r6
      00094A 24r02            [12] 2221 	add	a,#_nu
      00094C F5 82            [12] 2222 	mov	dpl,a
      00094E EF               [12] 2223 	mov	a,r7
      00094F 34s08            [12] 2224 	addc	a,#(_nu >> 8)
      000951 F5 83            [12] 2225 	mov	dph,a
      000953 E0               [24] 2226 	movx	a,@dptr
      000954 FF               [12] 2227 	mov	r7,a
      000955 ED               [12] 2228 	mov	a,r5
      000956 B5 07 02         [24] 2229 	cjne	a,ar7,00368$
      000959 80 05            [24] 2230 	sjmp	00168$
      00095B                       2231 00368$:
      00095B 90r0Cr10         [24] 2232 	mov	dptr,#_fixed
      00095E E4               [12] 2233 	clr	a
      00095F F0               [24] 2234 	movx	@dptr,a
      000960                       2235 00168$:
                                   2236 ;	life.c:161: for (x = 0; x < W; x++) {
      000960 90r0Cr02         [24] 2237 	mov	dptr,#_x
      000963 E0               [24] 2238 	movx	a,@dptr
      000964 24 01            [12] 2239 	add	a,#0x01
      000966 F0               [24] 2240 	movx	@dptr,a
      000967 A3               [24] 2241 	inc	dptr
      000968 E0               [24] 2242 	movx	a,@dptr
      000969 34 00            [12] 2243 	addc	a,#0x00
      00096B F0               [24] 2244 	movx	@dptr,a
      00096C 90r0Cr02         [24] 2245 	mov	dptr,#_x
      00096F E0               [24] 2246 	movx	a,@dptr
      000970 FE               [12] 2247 	mov	r6,a
      000971 A3               [24] 2248 	inc	dptr
      000972 E0               [24] 2249 	movx	a,@dptr
      000973 FF               [12] 2250 	mov	r7,a
      000974 C3               [12] 2251 	clr	c
      000975 EE               [12] 2252 	mov	a,r6
      000976 94 20            [12] 2253 	subb	a,#0x20
      000978 EF               [12] 2254 	mov	a,r7
      000979 64 80            [12] 2255 	xrl	a,#0x80
      00097B 94 80            [12] 2256 	subb	a,#0x80
      00097D 50 03            [24] 2257 	jnc	00369$
      00097F 02r05r95         [24] 2258 	ljmp	00167$
      000982                       2259 00369$:
                                   2260 ;	life.c:158: for (y = 0; y < H; y++) {
      000982 90r0Cr04         [24] 2261 	mov	dptr,#_y
      000985 E0               [24] 2262 	movx	a,@dptr
      000986 24 01            [12] 2263 	add	a,#0x01
      000988 F0               [24] 2264 	movx	@dptr,a
      000989 A3               [24] 2265 	inc	dptr
      00098A E0               [24] 2266 	movx	a,@dptr
      00098B 34 00            [12] 2267 	addc	a,#0x00
      00098D F0               [24] 2268 	movx	@dptr,a
      00098E 90r0Cr04         [24] 2269 	mov	dptr,#_y
      000991 E0               [24] 2270 	movx	a,@dptr
      000992 FE               [12] 2271 	mov	r6,a
      000993 A3               [24] 2272 	inc	dptr
      000994 E0               [24] 2273 	movx	a,@dptr
      000995 FF               [12] 2274 	mov	r7,a
      000996 C3               [12] 2275 	clr	c
      000997 EE               [12] 2276 	mov	a,r6
      000998 94 20            [12] 2277 	subb	a,#0x20
      00099A EF               [12] 2278 	mov	a,r7
      00099B 64 80            [12] 2279 	xrl	a,#0x80
      00099D 94 80            [12] 2280 	subb	a,#0x80
      00099F 50 03            [24] 2281 	jnc	00370$
      0009A1 02r05r6C         [24] 2282 	ljmp	00169$
      0009A4                       2283 00370$:
                                   2284 ;	life.c:190: memcpy(pu, u, sizeof (u));
      0009A4 E4               [12] 2285 	clr	a
      0009A5 C0 E0            [24] 2286 	push	acc
      0009A7 74 04            [12] 2287 	mov	a,#0x04
      0009A9 C0 E0            [24] 2288 	push	acc
      0009AB 74r02            [12] 2289 	mov	a,#_u
      0009AD C0 E0            [24] 2290 	push	acc
      0009AF 74s04            [12] 2291 	mov	a,#(_u >> 8)
      0009B1 C0 E0            [24] 2292 	push	acc
      0009B3 E4               [12] 2293 	clr	a
      0009B4 C0 E0            [24] 2294 	push	acc
      0009B6 90r00r02         [24] 2295 	mov	dptr,#_pu
      0009B9 75 F0 00         [24] 2296 	mov	b,#0x00
      0009BC 12r00r00         [24] 2297 	lcall	___memcpy
      0009BF E5 81            [12] 2298 	mov	a,sp
      0009C1 24 FB            [12] 2299 	add	a,#0xfb
      0009C3 F5 81            [12] 2300 	mov	sp,a
                                   2301 ;	life.c:191: memcpy(u, nu, sizeof (nu));
      0009C5 E4               [12] 2302 	clr	a
      0009C6 C0 E0            [24] 2303 	push	acc
      0009C8 74 04            [12] 2304 	mov	a,#0x04
      0009CA C0 E0            [24] 2305 	push	acc
      0009CC 74r02            [12] 2306 	mov	a,#_nu
      0009CE C0 E0            [24] 2307 	push	acc
      0009D0 74s08            [12] 2308 	mov	a,#(_nu >> 8)
      0009D2 C0 E0            [24] 2309 	push	acc
      0009D4 E4               [12] 2310 	clr	a
      0009D5 C0 E0            [24] 2311 	push	acc
      0009D7 90r04r02         [24] 2312 	mov	dptr,#_u
      0009DA 75 F0 00         [24] 2313 	mov	b,#0x00
      0009DD 12r00r00         [24] 2314 	lcall	___memcpy
      0009E0 E5 81            [12] 2315 	mov	a,sp
      0009E2 24 FB            [12] 2316 	add	a,#0xfb
      0009E4 F5 81            [12] 2317 	mov	sp,a
                                   2318 ;	life.c:219: if (fixed || cycle2) {
      0009E6 90r0Cr10         [24] 2319 	mov	dptr,#_fixed
      0009E9 E0               [24] 2320 	movx	a,@dptr
      0009EA 70 09            [24] 2321 	jnz	00101$
      0009EC 90r0Cr11         [24] 2322 	mov	dptr,#_cycle2
      0009EF E0               [24] 2323 	movx	a,@dptr
      0009F0 70 03            [24] 2324 	jnz	00372$
      0009F2 02r05r3F         [24] 2325 	ljmp	00176$
      0009F5                       2326 00372$:
      0009F5                       2327 00101$:
                                   2328 ;	life.c:220: printstr("DONE\r\n");
      0009F5 7Dr3A            [12] 2329 	mov	r5,#___str_6
      0009F7 7Es00            [12] 2330 	mov	r6,#(___str_6 >> 8)
      0009F9 7F 80            [12] 2331 	mov	r7,#0x80
                                   2332 ;	life.c:48: return;
      0009FB                       2333 00172$:
                                   2334 ;	life.c:46: for (; *s; s++) putchar(*s);
      0009FB 8D 82            [24] 2335 	mov	dpl,r5
      0009FD 8E 83            [24] 2336 	mov	dph,r6
      0009FF 8F F0            [24] 2337 	mov	b,r7
      000A01 12r00r00         [24] 2338 	lcall	__gptrget
      000A04 FC               [12] 2339 	mov	r4,a
      000A05 60 10            [24] 2340 	jz	00146$
      000A07 7B 00            [12] 2341 	mov	r3,#0x00
      000A09 8C 82            [24] 2342 	mov	dpl,r4
      000A0B 8B 83            [24] 2343 	mov	dph,r3
      000A0D 12r00r00         [24] 2344 	lcall	_putchar
      000A10 0D               [12] 2345 	inc	r5
                                   2346 ;	life.c:220: printstr("DONE\r\n");
      000A11 BD 00 E7         [24] 2347 	cjne	r5,#0x00,00172$
      000A14 0E               [12] 2348 	inc	r6
      000A15 80 E4            [24] 2349 	sjmp	00172$
      000A17                       2350 00146$:
                                   2351 ;	life.c:221: (void)getchar();
      000A17 12r00r05         [24] 2352 	lcall	_getchar
                                   2353 ;	life.c:222: break;
      000A1A                       2354 00104$:
                                   2355 ;	life.c:226: if (i1) {
      000A1A 90r00r01         [24] 2356 	mov	dptr,#_i1
      000A1D E0               [24] 2357 	movx	a,@dptr
      000A1E 60 25            [24] 2358 	jz	00182$
                                   2359 ;	life.c:227: printstr("BREAK\r\n");
      000A20 7Dr41            [12] 2360 	mov	r5,#___str_7
      000A22 7Es00            [12] 2361 	mov	r6,#(___str_7 >> 8)
      000A24 7F 80            [12] 2362 	mov	r7,#0x80
                                   2363 ;	life.c:48: return;
      000A26                       2364 00179$:
                                   2365 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A26 8D 82            [24] 2366 	mov	dpl,r5
      000A28 8E 83            [24] 2367 	mov	dph,r6
      000A2A 8F F0            [24] 2368 	mov	b,r7
      000A2C 12r00r00         [24] 2369 	lcall	__gptrget
      000A2F FC               [12] 2370 	mov	r4,a
      000A30 60 10            [24] 2371 	jz	00148$
      000A32 7B 00            [12] 2372 	mov	r3,#0x00
      000A34 8C 82            [24] 2373 	mov	dpl,r4
      000A36 8B 83            [24] 2374 	mov	dph,r3
      000A38 12r00r00         [24] 2375 	lcall	_putchar
      000A3B 0D               [12] 2376 	inc	r5
                                   2377 ;	life.c:227: printstr("BREAK\r\n");
      000A3C BD 00 E7         [24] 2378 	cjne	r5,#0x00,00179$
      000A3F 0E               [12] 2379 	inc	r6
      000A40 80 E4            [24] 2380 	sjmp	00179$
      000A42                       2381 00148$:
                                   2382 ;	life.c:228: (void)getchar();
      000A42 12r00r05         [24] 2383 	lcall	_getchar
      000A45                       2384 00182$:
                                   2385 ;	life.c:203: for (i0 = 0; !i0; ) {
      000A45 90r00r00         [24] 2386 	mov	dptr,#_i0
      000A48 E0               [24] 2387 	movx	a,@dptr
      000A49 70 03            [24] 2388 	jnz	00378$
      000A4B 02r02rB2         [24] 2389 	ljmp	00181$
      000A4E                       2390 00378$:
                                   2391 ;	life.c:232: EA = 0;
                                   2392 ;	assignBit
      000A4E C2 AF            [12] 2393 	clr	_EA
                                   2394 ;	life.c:234: printstr("TERM\r\n");
      000A50 7Dr49            [12] 2395 	mov	r5,#___str_8
      000A52 7Es00            [12] 2396 	mov	r6,#(___str_8 >> 8)
      000A54 7F 80            [12] 2397 	mov	r7,#0x80
                                   2398 ;	life.c:48: return;
      000A56                       2399 00184$:
                                   2400 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A56 8D 82            [24] 2401 	mov	dpl,r5
      000A58 8E 83            [24] 2402 	mov	dph,r6
      000A5A 8F F0            [24] 2403 	mov	b,r7
      000A5C 12r00r00         [24] 2404 	lcall	__gptrget
      000A5F FC               [12] 2405 	mov	r4,a
      000A60 60 10            [24] 2406 	jz	00150$
      000A62 7B 00            [12] 2407 	mov	r3,#0x00
      000A64 8C 82            [24] 2408 	mov	dpl,r4
      000A66 8B 83            [24] 2409 	mov	dph,r3
      000A68 12r00r00         [24] 2410 	lcall	_putchar
      000A6B 0D               [12] 2411 	inc	r5
                                   2412 ;	life.c:234: printstr("TERM\r\n");
      000A6C BD 00 E7         [24] 2413 	cjne	r5,#0x00,00184$
      000A6F 0E               [12] 2414 	inc	r6
      000A70 80 E4            [24] 2415 	sjmp	00184$
      000A72                       2416 00150$:
                                   2417 ;	life.c:235: (void)getchar();
      000A72 12r00r05         [24] 2418 	lcall	_getchar
                                   2419 ;	life.c:239: __endasm;
      000A75 02 00 00         [24] 2420 	ljmp	0
                                   2421 ;	life.c:240: }
      000A78 85*00 81         [24] 2422 	mov	sp,_bp
      000A7B D0*00            [24] 2423 	pop	_bp
      000A7D 22               [24] 2424 	ret
                                   2425 	.area CSEG    (CODE)
                                   2426 	.area CONST   (CODE)
      000000                       2427 _digits:
      000000 30                    2428 	.db #0x30	; 48	'0'
      000001 31                    2429 	.db #0x31	; 49	'1'
      000002 32                    2430 	.db #0x32	; 50	'2'
      000003 33                    2431 	.db #0x33	; 51	'3'
      000004 34                    2432 	.db #0x34	; 52	'4'
      000005 35                    2433 	.db #0x35	; 53	'5'
      000006 36                    2434 	.db #0x36	; 54	'6'
      000007 37                    2435 	.db #0x37	; 55	'7'
      000008 38                    2436 	.db #0x38	; 56	'8'
      000009 39                    2437 	.db #0x39	; 57	'9'
      00000A 61                    2438 	.db #0x61	; 97	'a'
      00000B 62                    2439 	.db #0x62	; 98	'b'
      00000C 63                    2440 	.db #0x63	; 99	'c'
      00000D 64                    2441 	.db #0x64	; 100	'd'
      00000E 65                    2442 	.db #0x65	; 101	'e'
      00000F 66                    2443 	.db #0x66	; 102	'f'
                                   2444 	.area CONST   (CODE)
      000010                       2445 ___str_0:
      000010 1B                    2446 	.db 0x1b
      000011 5B 32 4A              2447 	.ascii "[2J"
      000014 1B                    2448 	.db 0x1b
      000015 5B 6D                 2449 	.ascii "[m"
      000017 00                    2450 	.db 0x00
                                   2451 	.area CSEG    (CODE)
                                   2452 	.area CONST   (CODE)
      000018                       2453 ___str_1:
      000018 0D                    2454 	.db 0x0d
      000019 0A                    2455 	.db 0x0a
      00001A 00                    2456 	.db 0x00
                                   2457 	.area CSEG    (CODE)
                                   2458 	.area CONST   (CODE)
      00001B                       2459 ___str_2:
      00001B 4C 4F 41 44 20 3C     2460 	.ascii "LOAD <"
      000021 00                    2461 	.db 0x00
                                   2462 	.area CSEG    (CODE)
                                   2463 	.area CONST   (CODE)
      000022                       2464 ___str_3:
      000022 3E                    2465 	.ascii ">"
      000023 0D                    2466 	.db 0x0d
      000024 0A                    2467 	.db 0x0a
      000025 00                    2468 	.db 0x00
                                   2469 	.area CSEG    (CODE)
      000A7E                       2470 _busy:
      000A7E 5C                    2471 	.db #0x5c	; 92
      000A7F 7C                    2472 	.db #0x7c	; 124
      000A80 2F                    2473 	.db #0x2f	; 47
      000A81 2D                    2474 	.db #0x2d	; 45
                                   2475 	.area CONST   (CODE)
      000026                       2476 ___str_4:
      000026 1B                    2477 	.db 0x1b
      000027 5B 32 4A              2478 	.ascii "[2J"
      00002A 1B                    2479 	.db 0x1b
      00002B 5B 6D 49 4E 49 54     2480 	.ascii "[mINIT"
      000031 0D                    2481 	.db 0x0d
      000032 0A                    2482 	.db 0x0a
      000033 00                    2483 	.db 0x00
                                   2484 	.area CSEG    (CODE)
                                   2485 	.area CONST   (CODE)
      000034                       2486 ___str_5:
      000034 52 44 59              2487 	.ascii "RDY"
      000037 0D                    2488 	.db 0x0d
      000038 0A                    2489 	.db 0x0a
      000039 00                    2490 	.db 0x00
                                   2491 	.area CSEG    (CODE)
                                   2492 	.area CONST   (CODE)
      00003A                       2493 ___str_6:
      00003A 44 4F 4E 45           2494 	.ascii "DONE"
      00003E 0D                    2495 	.db 0x0d
      00003F 0A                    2496 	.db 0x0a
      000040 00                    2497 	.db 0x00
                                   2498 	.area CSEG    (CODE)
                                   2499 	.area CONST   (CODE)
      000041                       2500 ___str_7:
      000041 42 52 45 41 4B        2501 	.ascii "BREAK"
      000046 0D                    2502 	.db 0x0d
      000047 0A                    2503 	.db 0x0a
      000048 00                    2504 	.db 0x00
                                   2505 	.area CSEG    (CODE)
                                   2506 	.area CONST   (CODE)
      000049                       2507 ___str_8:
      000049 54 45 52 4D           2508 	.ascii "TERM"
      00004D 0D                    2509 	.db 0x0d
      00004E 0A                    2510 	.db 0x0a
      00004F 00                    2511 	.db 0x00
                                   2512 	.area CSEG    (CODE)
                                   2513 	.area XINIT   (CODE)
                                   2514 	.area CABS    (ABS,CODE)
