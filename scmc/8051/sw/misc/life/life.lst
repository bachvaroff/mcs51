                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _generation
                                    143 	.globl _cycle2
                                    144 	.globl _fixed
                                    145 	.globl _n
                                    146 	.globl _bstep
                                    147 	.globl _c
                                    148 	.globl _j
                                    149 	.globl _y1
                                    150 	.globl _x1
                                    151 	.globl _y
                                    152 	.globl _x
                                    153 	.globl _nu
                                    154 	.globl _u
                                    155 	.globl _pu
                                    156 	.globl _i1
                                    157 	.globl _i0
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 1
      000001                        349 _i1::
      000001                        350 	.ds 1
      000002                        351 _pu::
      000002                        352 	.ds 1024
      000402                        353 _u::
      000402                        354 	.ds 1024
      000802                        355 _nu::
      000802                        356 	.ds 1024
      000C02                        357 _x::
      000C02                        358 	.ds 2
      000C04                        359 _y::
      000C04                        360 	.ds 2
      000C06                        361 _x1::
      000C06                        362 	.ds 2
      000C08                        363 _y1::
      000C08                        364 	.ds 2
      000C0A                        365 _j::
      000C0A                        366 	.ds 2
      000C0C                        367 _c::
      000C0C                        368 	.ds 2
      000C0E                        369 _bstep::
      000C0E                        370 	.ds 1
      000C0F                        371 _n::
      000C0F                        372 	.ds 1
      000C10                        373 _fixed::
      000C10                        374 	.ds 1
      000C11                        375 _cycle2::
      000C11                        376 	.ds 1
      000C12                        377 _generation::
      000C12                        378 	.ds 4
                                    379 ;--------------------------------------------------------
                                    380 ; absolute external ram data
                                    381 ;--------------------------------------------------------
                                    382 	.area XABS    (ABS,XDATA)
                                    383 ;--------------------------------------------------------
                                    384 ; external initialized ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area XISEG   (XDATA)
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT0 (CODE)
                                    389 	.area GSINIT1 (CODE)
                                    390 	.area GSINIT2 (CODE)
                                    391 	.area GSINIT3 (CODE)
                                    392 	.area GSINIT4 (CODE)
                                    393 	.area GSINIT5 (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.area GSFINAL (CODE)
                                    396 	.area CSEG    (CODE)
                                    397 ;--------------------------------------------------------
                                    398 ; interrupt vector 
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
      000000                        401 __interrupt_vect:
      000000 02r00r00         [24]  402 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  403 	ljmp	_int0
      000006                        404 	.ds	5
      00000B 32               [24]  405 	reti
      00000C                        406 	.ds	7
      000013 02r00r21         [24]  407 	ljmp	_int1
                                    408 ;--------------------------------------------------------
                                    409 ; global & static initialisations
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area GSINIT  (CODE)
                                    413 	.area GSFINAL (CODE)
                                    414 	.area GSINIT  (CODE)
                                    415 	.globl __sdcc_gsinit_startup
                                    416 	.globl __sdcc_program_startup
                                    417 	.globl __start__stack
                                    418 	.globl __mcs51_genXINIT
                                    419 	.globl __mcs51_genXRAMCLEAR
                                    420 	.globl __mcs51_genRAMCLEAR
                                    421 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  422 	ljmp	__sdcc_program_startup
                                    423 ;--------------------------------------------------------
                                    424 ; Home
                                    425 ;--------------------------------------------------------
                                    426 	.area HOME    (CODE)
                                    427 	.area HOME    (CODE)
      000016                        428 __sdcc_program_startup:
      000016 02r02r99         [24]  429 	ljmp	_main
                                    430 ;	return from main will return to caller
                                    431 ;--------------------------------------------------------
                                    432 ; code
                                    433 ;--------------------------------------------------------
                                    434 	.area CSEG    (CODE)
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'putchar'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers 
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:7: int putchar(int c) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function putchar
                                    443 ;	-----------------------------------------
      000000                        444 _putchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:12: __endasm;
      000000 E5 82            [12]  447 	mov	a, dpl
      000002 02 00 30         [24]  448 	ljmp	0x0030
                                    449 ;	life.c:13: }
                                    450 ;	naked function: no epilogue.
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'getchar'
                                    453 ;------------------------------------------------------------
                                    454 ;	life.c:15: int getchar(void) __naked {
                                    455 ;	-----------------------------------------
                                    456 ;	 function getchar
                                    457 ;	-----------------------------------------
      000005                        458 _getchar:
                                    459 ;	naked function: no prologue.
                                    460 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  461 	lcall	0x0032
      000008 F5 82            [12]  462 	mov	dpl, a
      00000A 75 83 00         [24]  463 	mov	dph, #0
      00000D 22               [24]  464 	ret
                                    465 ;	life.c:22: }
                                    466 ;	naked function: no epilogue.
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:65: void int0(void) __interrupt 0 __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000E                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000E C0 E0            [24]  483 	push	acc
      000010 C0 82            [24]  484 	push	dpl
      000012 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  487 	mov	dptr,#_i0
      000017 74 01            [12]  488 	mov	a,#0x01
      000019 F0               [24]  489 	movx	@dptr,a
                                    490 ;	life.c:67: }
      00001A D0 83            [24]  491 	pop	dph
      00001C D0 82            [24]  492 	pop	dpl
      00001E D0 E0            [24]  493 	pop	acc
      000020 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop psw
                                    497 ;	eliminated unneeded push/pop b
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int1'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:69: void int1(void) __interrupt 2 __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int1
                                    504 ;	-----------------------------------------
      000021                        505 _int1:
      000021 C0 E0            [24]  506 	push	acc
      000023 C0 82            [24]  507 	push	dpl
      000025 C0 83            [24]  508 	push	dph
                                    509 ;	life.c:70: i1 = 1;
      000027 90r00r01         [24]  510 	mov	dptr,#_i1
      00002A 74 01            [12]  511 	mov	a,#0x01
      00002C F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:71: }
      00002D D0 83            [24]  514 	pop	dph
      00002F D0 82            [24]  515 	pop	dpl
      000031 D0 E0            [24]  516 	pop	acc
      000033 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;hdr                       Allocated to registers r7 
                                    525 ;__1966080005              Allocated to registers 
                                    526 ;s                         Allocated to registers r5 r6 r7 
                                    527 ;__1310720001              Allocated to registers r6 r7 
                                    528 ;a                         Allocated to registers 
                                    529 ;__1310720003              Allocated to registers r6 r7 
                                    530 ;a                         Allocated to registers 
                                    531 ;__1966080008              Allocated to registers 
                                    532 ;s                         Allocated to registers r5 r6 r7 
                                    533 ;__2621440011              Allocated to registers 
                                    534 ;s                         Allocated to registers r5 r6 r7 
                                    535 ;------------------------------------------------------------
                                    536 ;	life.c:94: void show(char hdr) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function show
                                    539 ;	-----------------------------------------
      000034                        540 _show:
                           000007   541 	ar7 = 0x07
                           000006   542 	ar6 = 0x06
                           000005   543 	ar5 = 0x05
                           000004   544 	ar4 = 0x04
                           000003   545 	ar3 = 0x03
                           000002   546 	ar2 = 0x02
                           000001   547 	ar1 = 0x01
                           000000   548 	ar0 = 0x00
                                    549 ;	life.c:95: if (hdr) {
      000034 E5 82            [12]  550 	mov	a,dpl
      000036 FF               [12]  551 	mov	r7,a
      000037 70 03            [24]  552 	jnz	00190$
      000039 02r01rDA         [24]  553 	ljmp	00102$
      00003C                        554 00190$:
                                    555 ;	life.c:96: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  556 	mov	r5,#___str_0
      00003E 7Es00            [12]  557 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  558 	mov	r7,#0x80
                                    559 ;	life.c:48: return;
      000042                        560 00121$:
                                    561 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  562 	mov	dpl,r5
      000044 8E 83            [24]  563 	mov	dph,r6
      000046 8F F0            [24]  564 	mov	b,r7
      000048 12r00r00         [24]  565 	lcall	__gptrget
      00004B FC               [12]  566 	mov	r4,a
      00004C 60 10            [24]  567 	jz	00109$
      00004E 7B 00            [12]  568 	mov	r3,#0x00
      000050 8C 82            [24]  569 	mov	dpl,r4
      000052 8B 83            [24]  570 	mov	dph,r3
      000054 12r00r00         [24]  571 	lcall	_putchar
      000057 0D               [12]  572 	inc	r5
                                    573 ;	life.c:96: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  574 	cjne	r5,#0x00,00121$
      00005B 0E               [12]  575 	inc	r6
      00005C 80 E4            [24]  576 	sjmp	00121$
      00005E                        577 00109$:
                                    578 ;	life.c:88: print16x(generation[1]);
      00005E 90r0Cr14         [24]  579 	mov	dptr,#(_generation + 0x0002)
      000061 E0               [24]  580 	movx	a,@dptr
      000062 FE               [12]  581 	mov	r6,a
      000063 A3               [24]  582 	inc	dptr
      000064 E0               [24]  583 	movx	a,@dptr
                                    584 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000065 FF               [12]  585 	mov	r7,a
      000066 C4               [12]  586 	swap	a
      000067 54 0F            [12]  587 	anl	a,#0x0f
      000069 30 E3 02         [24]  588 	jnb	acc.3,00193$
      00006C 44 F0            [12]  589 	orl	a,#0xf0
      00006E                        590 00193$:
      00006E FC               [12]  591 	mov	r4,a
      00006F 33               [12]  592 	rlc	a
      000070 95 E0            [12]  593 	subb	a,acc
      000072 53 04 0F         [24]  594 	anl	ar4,#0x0f
      000075 7D 00            [12]  595 	mov	r5,#0x00
      000077 EC               [12]  596 	mov	a,r4
      000078 24r00            [12]  597 	add	a,#_digits
      00007A F5 82            [12]  598 	mov	dpl,a
      00007C ED               [12]  599 	mov	a,r5
      00007D 34s00            [12]  600 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  601 	mov	dph,a
      000081 E4               [12]  602 	clr	a
      000082 93               [24]  603 	movc	a,@a+dptr
      000083 FD               [12]  604 	mov	r5,a
      000084 7C 00            [12]  605 	mov	r4,#0x00
      000086 8D 82            [24]  606 	mov	dpl,r5
      000088 8C 83            [24]  607 	mov	dph,r4
      00008A 12r00r00         [24]  608 	lcall	_putchar
                                    609 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 05            [24]  610 	mov	ar5,r7
      00008F 53 05 0F         [24]  611 	anl	ar5,#0x0f
      000092 7C 00            [12]  612 	mov	r4,#0x00
      000094 ED               [12]  613 	mov	a,r5
      000095 24r00            [12]  614 	add	a,#_digits
      000097 F5 82            [12]  615 	mov	dpl,a
      000099 EC               [12]  616 	mov	a,r4
      00009A 34s00            [12]  617 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  618 	mov	dph,a
      00009E E4               [12]  619 	clr	a
      00009F 93               [24]  620 	movc	a,@a+dptr
      0000A0 FD               [12]  621 	mov	r5,a
      0000A1 7C 00            [12]  622 	mov	r4,#0x00
      0000A3 8D 82            [24]  623 	mov	dpl,r5
      0000A5 8C 83            [24]  624 	mov	dph,r4
      0000A7 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8E 04            [24]  627 	mov	ar4,r6
      0000AC EF               [12]  628 	mov	a,r7
      0000AD C4               [12]  629 	swap	a
      0000AE CC               [12]  630 	xch	a,r4
      0000AF C4               [12]  631 	swap	a
      0000B0 54 0F            [12]  632 	anl	a,#0x0f
      0000B2 6C               [12]  633 	xrl	a,r4
      0000B3 CC               [12]  634 	xch	a,r4
      0000B4 54 0F            [12]  635 	anl	a,#0x0f
      0000B6 CC               [12]  636 	xch	a,r4
      0000B7 6C               [12]  637 	xrl	a,r4
      0000B8 CC               [12]  638 	xch	a,r4
      0000B9 30 E3 02         [24]  639 	jnb	acc.3,00194$
      0000BC 44 F0            [12]  640 	orl	a,#0xf0
      0000BE                        641 00194$:
      0000BE 53 04 0F         [24]  642 	anl	ar4,#0x0f
      0000C1 7D 00            [12]  643 	mov	r5,#0x00
      0000C3 EC               [12]  644 	mov	a,r4
      0000C4 24r00            [12]  645 	add	a,#_digits
      0000C6 F5 82            [12]  646 	mov	dpl,a
      0000C8 ED               [12]  647 	mov	a,r5
      0000C9 34s00            [12]  648 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  649 	mov	dph,a
      0000CD E4               [12]  650 	clr	a
      0000CE 93               [24]  651 	movc	a,@a+dptr
      0000CF FD               [12]  652 	mov	r5,a
      0000D0 7C 00            [12]  653 	mov	r4,#0x00
      0000D2 8D 82            [24]  654 	mov	dpl,r5
      0000D4 8C 83            [24]  655 	mov	dph,r4
      0000D6 12r00r00         [24]  656 	lcall	_putchar
                                    657 ;	life.c:40: putchar(digits[a & 0xf]);
      0000D9 53 06 0F         [24]  658 	anl	ar6,#0x0f
      0000DC 7F 00            [12]  659 	mov	r7,#0x00
      0000DE EE               [12]  660 	mov	a,r6
      0000DF 24r00            [12]  661 	add	a,#_digits
      0000E1 F5 82            [12]  662 	mov	dpl,a
      0000E3 EF               [12]  663 	mov	a,r7
      0000E4 34s00            [12]  664 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  665 	mov	dph,a
      0000E8 E4               [12]  666 	clr	a
      0000E9 93               [24]  667 	movc	a,@a+dptr
      0000EA FF               [12]  668 	mov	r7,a
      0000EB 7E 00            [12]  669 	mov	r6,#0x00
      0000ED 8F 82            [24]  670 	mov	dpl,r7
      0000EF 8E 83            [24]  671 	mov	dph,r6
      0000F1 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:89: print16x(generation[0]);
      0000F4 90r0Cr12         [24]  674 	mov	dptr,#_generation
      0000F7 E0               [24]  675 	movx	a,@dptr
      0000F8 FE               [12]  676 	mov	r6,a
      0000F9 A3               [24]  677 	inc	dptr
      0000FA E0               [24]  678 	movx	a,@dptr
                                    679 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000FB FF               [12]  680 	mov	r7,a
      0000FC C4               [12]  681 	swap	a
      0000FD 54 0F            [12]  682 	anl	a,#0x0f
      0000FF 30 E3 02         [24]  683 	jnb	acc.3,00195$
      000102 44 F0            [12]  684 	orl	a,#0xf0
      000104                        685 00195$:
      000104 FC               [12]  686 	mov	r4,a
      000105 33               [12]  687 	rlc	a
      000106 95 E0            [12]  688 	subb	a,acc
      000108 53 04 0F         [24]  689 	anl	ar4,#0x0f
      00010B 7D 00            [12]  690 	mov	r5,#0x00
      00010D EC               [12]  691 	mov	a,r4
      00010E 24r00            [12]  692 	add	a,#_digits
      000110 F5 82            [12]  693 	mov	dpl,a
      000112 ED               [12]  694 	mov	a,r5
      000113 34s00            [12]  695 	addc	a,#(_digits >> 8)
      000115 F5 83            [12]  696 	mov	dph,a
      000117 E4               [12]  697 	clr	a
      000118 93               [24]  698 	movc	a,@a+dptr
      000119 FD               [12]  699 	mov	r5,a
      00011A 7C 00            [12]  700 	mov	r4,#0x00
      00011C 8D 82            [24]  701 	mov	dpl,r5
      00011E 8C 83            [24]  702 	mov	dph,r4
      000120 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000123 8F 05            [24]  705 	mov	ar5,r7
      000125 53 05 0F         [24]  706 	anl	ar5,#0x0f
      000128 7C 00            [12]  707 	mov	r4,#0x00
      00012A ED               [12]  708 	mov	a,r5
      00012B 24r00            [12]  709 	add	a,#_digits
      00012D F5 82            [12]  710 	mov	dpl,a
      00012F EC               [12]  711 	mov	a,r4
      000130 34s00            [12]  712 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  713 	mov	dph,a
      000134 E4               [12]  714 	clr	a
      000135 93               [24]  715 	movc	a,@a+dptr
      000136 FD               [12]  716 	mov	r5,a
      000137 7C 00            [12]  717 	mov	r4,#0x00
      000139 8D 82            [24]  718 	mov	dpl,r5
      00013B 8C 83            [24]  719 	mov	dph,r4
      00013D 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000140 8E 04            [24]  722 	mov	ar4,r6
      000142 EF               [12]  723 	mov	a,r7
      000143 C4               [12]  724 	swap	a
      000144 CC               [12]  725 	xch	a,r4
      000145 C4               [12]  726 	swap	a
      000146 54 0F            [12]  727 	anl	a,#0x0f
      000148 6C               [12]  728 	xrl	a,r4
      000149 CC               [12]  729 	xch	a,r4
      00014A 54 0F            [12]  730 	anl	a,#0x0f
      00014C CC               [12]  731 	xch	a,r4
      00014D 6C               [12]  732 	xrl	a,r4
      00014E CC               [12]  733 	xch	a,r4
      00014F 30 E3 02         [24]  734 	jnb	acc.3,00196$
      000152 44 F0            [12]  735 	orl	a,#0xf0
      000154                        736 00196$:
      000154 53 04 0F         [24]  737 	anl	ar4,#0x0f
      000157 7D 00            [12]  738 	mov	r5,#0x00
      000159 EC               [12]  739 	mov	a,r4
      00015A 24r00            [12]  740 	add	a,#_digits
      00015C F5 82            [12]  741 	mov	dpl,a
      00015E ED               [12]  742 	mov	a,r5
      00015F 34s00            [12]  743 	addc	a,#(_digits >> 8)
      000161 F5 83            [12]  744 	mov	dph,a
      000163 E4               [12]  745 	clr	a
      000164 93               [24]  746 	movc	a,@a+dptr
      000165 FD               [12]  747 	mov	r5,a
      000166 7C 00            [12]  748 	mov	r4,#0x00
      000168 8D 82            [24]  749 	mov	dpl,r5
      00016A 8C 83            [24]  750 	mov	dph,r4
      00016C 12r00r00         [24]  751 	lcall	_putchar
                                    752 ;	life.c:40: putchar(digits[a & 0xf]);
      00016F 53 06 0F         [24]  753 	anl	ar6,#0x0f
      000172 7F 00            [12]  754 	mov	r7,#0x00
      000174 EE               [12]  755 	mov	a,r6
      000175 24r00            [12]  756 	add	a,#_digits
      000177 F5 82            [12]  757 	mov	dpl,a
      000179 EF               [12]  758 	mov	a,r7
      00017A 34s00            [12]  759 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  760 	mov	dph,a
      00017E E4               [12]  761 	clr	a
      00017F 93               [24]  762 	movc	a,@a+dptr
      000180 FF               [12]  763 	mov	r7,a
      000181 7E 00            [12]  764 	mov	r6,#0x00
      000183 8F 82            [24]  765 	mov	dpl,r7
      000185 8E 83            [24]  766 	mov	dph,r6
      000187 12r00r00         [24]  767 	lcall	_putchar
                                    768 ;	life.c:98: printstr("\r\n");
      00018A 7Dr18            [12]  769 	mov	r5,#___str_1
      00018C 7Es00            [12]  770 	mov	r6,#(___str_1 >> 8)
      00018E 7F 80            [12]  771 	mov	r7,#0x80
                                    772 ;	life.c:48: return;
      000190                        773 00124$:
                                    774 ;	life.c:46: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  775 	mov	dpl,r5
      000192 8E 83            [24]  776 	mov	dph,r6
      000194 8F F0            [24]  777 	mov	b,r7
      000196 12r00r00         [24]  778 	lcall	__gptrget
      000199 FC               [12]  779 	mov	r4,a
      00019A 60 10            [24]  780 	jz	00114$
      00019C 7B 00            [12]  781 	mov	r3,#0x00
      00019E 8C 82            [24]  782 	mov	dpl,r4
      0001A0 8B 83            [24]  783 	mov	dph,r3
      0001A2 12r00r00         [24]  784 	lcall	_putchar
      0001A5 0D               [12]  785 	inc	r5
                                    786 ;	life.c:98: printstr("\r\n");
      0001A6 BD 00 E7         [24]  787 	cjne	r5,#0x00,00124$
      0001A9 0E               [12]  788 	inc	r6
      0001AA 80 E4            [24]  789 	sjmp	00124$
      0001AC                        790 00114$:
                                    791 ;	life.c:81: generation[0]++;
      0001AC 90r0Cr12         [24]  792 	mov	dptr,#_generation
      0001AF E0               [24]  793 	movx	a,@dptr
      0001B0 FE               [12]  794 	mov	r6,a
      0001B1 A3               [24]  795 	inc	dptr
      0001B2 E0               [24]  796 	movx	a,@dptr
      0001B3 FF               [12]  797 	mov	r7,a
      0001B4 0E               [12]  798 	inc	r6
      0001B5 BE 00 01         [24]  799 	cjne	r6,#0x00,00199$
      0001B8 0F               [12]  800 	inc	r7
      0001B9                        801 00199$:
      0001B9 90r0Cr12         [24]  802 	mov	dptr,#_generation
      0001BC EE               [12]  803 	mov	a,r6
      0001BD F0               [24]  804 	movx	@dptr,a
      0001BE EF               [12]  805 	mov	a,r7
      0001BF A3               [24]  806 	inc	dptr
      0001C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	life.c:82: if (!generation[0]) generation[1]++;
      0001C1 EE               [12]  809 	mov	a,r6
      0001C2 4F               [12]  810 	orl	a,r7
      0001C3 70 15            [24]  811 	jnz	00102$
      0001C5 90r0Cr14         [24]  812 	mov	dptr,#(_generation + 0x0002)
      0001C8 E0               [24]  813 	movx	a,@dptr
      0001C9 FE               [12]  814 	mov	r6,a
      0001CA A3               [24]  815 	inc	dptr
      0001CB E0               [24]  816 	movx	a,@dptr
      0001CC FF               [12]  817 	mov	r7,a
      0001CD 0E               [12]  818 	inc	r6
      0001CE BE 00 01         [24]  819 	cjne	r6,#0x00,00201$
      0001D1 0F               [12]  820 	inc	r7
      0001D2                        821 00201$:
      0001D2 90r0Cr14         [24]  822 	mov	dptr,#(_generation + 0x0002)
      0001D5 EE               [12]  823 	mov	a,r6
      0001D6 F0               [24]  824 	movx	@dptr,a
      0001D7 EF               [12]  825 	mov	a,r7
      0001D8 A3               [24]  826 	inc	dptr
      0001D9 F0               [24]  827 	movx	@dptr,a
                                    828 ;	life.c:99: updategen();
      0001DA                        829 00102$:
                                    830 ;	life.c:102: for (x = 0; x < W; x++) {
      0001DA 90r0Cr02         [24]  831 	mov	dptr,#_x
      0001DD E4               [12]  832 	clr	a
      0001DE F0               [24]  833 	movx	@dptr,a
      0001DF A3               [24]  834 	inc	dptr
      0001E0 F0               [24]  835 	movx	@dptr,a
      0001E1                        836 00131$:
                                    837 ;	life.c:103: for (y = 0; y < H; y++)
      0001E1 90r0Cr04         [24]  838 	mov	dptr,#_y
      0001E4 E4               [12]  839 	clr	a
      0001E5 F0               [24]  840 	movx	@dptr,a
      0001E6 A3               [24]  841 	inc	dptr
      0001E7 F0               [24]  842 	movx	@dptr,a
      0001E8                        843 00126$:
                                    844 ;	life.c:104: if (u[A2D(W, y, x)]) {
      0001E8 90r0Cr04         [24]  845 	mov	dptr,#_y
      0001EB E0               [24]  846 	movx	a,@dptr
      0001EC FE               [12]  847 	mov	r6,a
      0001ED A3               [24]  848 	inc	dptr
      0001EE E0               [24]  849 	movx	a,@dptr
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CE               [12]  853 	xch	a,r6
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CE               [12]  856 	xch	a,r6
      0001F7 6E               [12]  857 	xrl	a,r6
      0001F8 CE               [12]  858 	xch	a,r6
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CE               [12]  860 	xch	a,r6
      0001FC 6E               [12]  861 	xrl	a,r6
      0001FD FF               [12]  862 	mov	r7,a
      0001FE 90r0Cr02         [24]  863 	mov	dptr,#_x
      000201 E0               [24]  864 	movx	a,@dptr
      000202 FC               [12]  865 	mov	r4,a
      000203 A3               [24]  866 	inc	dptr
      000204 E0               [24]  867 	movx	a,@dptr
      000205 FD               [12]  868 	mov	r5,a
      000206 EC               [12]  869 	mov	a,r4
      000207 2E               [12]  870 	add	a,r6
      000208 FE               [12]  871 	mov	r6,a
      000209 ED               [12]  872 	mov	a,r5
      00020A 3F               [12]  873 	addc	a,r7
      00020B FF               [12]  874 	mov	r7,a
      00020C EE               [12]  875 	mov	a,r6
      00020D 24r02            [12]  876 	add	a,#_u
      00020F FE               [12]  877 	mov	r6,a
      000210 EF               [12]  878 	mov	a,r7
      000211 34s04            [12]  879 	addc	a,#(_u >> 8)
      000213 FF               [12]  880 	mov	r7,a
      000214 8E 82            [24]  881 	mov	dpl,r6
      000216 8F 83            [24]  882 	mov	dph,r7
      000218 E0               [24]  883 	movx	a,@dptr
      000219 60 0E            [24]  884 	jz	00104$
                                    885 ;	life.c:105: putchar('['); putchar(']');
      00021B 90 00 5B         [24]  886 	mov	dptr,#0x005b
      00021E 12r00r00         [24]  887 	lcall	_putchar
      000221 90 00 5D         [24]  888 	mov	dptr,#0x005d
      000224 12r00r00         [24]  889 	lcall	_putchar
      000227 80 0C            [24]  890 	sjmp	00127$
      000229                        891 00104$:
                                    892 ;	life.c:107: putchar('#'); putchar('#');
      000229 90 00 23         [24]  893 	mov	dptr,#0x0023
      00022C 12r00r00         [24]  894 	lcall	_putchar
      00022F 90 00 23         [24]  895 	mov	dptr,#0x0023
      000232 12r00r00         [24]  896 	lcall	_putchar
      000235                        897 00127$:
                                    898 ;	life.c:103: for (y = 0; y < H; y++)
      000235 90r0Cr04         [24]  899 	mov	dptr,#_y
      000238 E0               [24]  900 	movx	a,@dptr
      000239 24 01            [12]  901 	add	a,#0x01
      00023B F0               [24]  902 	movx	@dptr,a
      00023C A3               [24]  903 	inc	dptr
      00023D E0               [24]  904 	movx	a,@dptr
      00023E 34 00            [12]  905 	addc	a,#0x00
      000240 F0               [24]  906 	movx	@dptr,a
      000241 90r0Cr04         [24]  907 	mov	dptr,#_y
      000244 E0               [24]  908 	movx	a,@dptr
      000245 FE               [12]  909 	mov	r6,a
      000246 A3               [24]  910 	inc	dptr
      000247 E0               [24]  911 	movx	a,@dptr
      000248 FF               [12]  912 	mov	r7,a
      000249 C3               [12]  913 	clr	c
      00024A EE               [12]  914 	mov	a,r6
      00024B 94 20            [12]  915 	subb	a,#0x20
      00024D EF               [12]  916 	mov	a,r7
      00024E 64 80            [12]  917 	xrl	a,#0x80
      000250 94 80            [12]  918 	subb	a,#0x80
      000252 40 94            [24]  919 	jc	00126$
                                    920 ;	life.c:109: printstr("\r\n");
      000254 7Dr18            [12]  921 	mov	r5,#___str_1
      000256 7Es00            [12]  922 	mov	r6,#(___str_1 >> 8)
      000258 7F 80            [12]  923 	mov	r7,#0x80
                                    924 ;	life.c:48: return;
      00025A                        925 00129$:
                                    926 ;	life.c:46: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  927 	mov	dpl,r5
      00025C 8E 83            [24]  928 	mov	dph,r6
      00025E 8F F0            [24]  929 	mov	b,r7
      000260 12r00r00         [24]  930 	lcall	__gptrget
      000263 FC               [12]  931 	mov	r4,a
      000264 60 10            [24]  932 	jz	00119$
      000266 7B 00            [12]  933 	mov	r3,#0x00
      000268 8C 82            [24]  934 	mov	dpl,r4
      00026A 8B 83            [24]  935 	mov	dph,r3
      00026C 12r00r00         [24]  936 	lcall	_putchar
      00026F 0D               [12]  937 	inc	r5
                                    938 ;	life.c:109: printstr("\r\n");
      000270 BD 00 E7         [24]  939 	cjne	r5,#0x00,00129$
      000273 0E               [12]  940 	inc	r6
      000274 80 E4            [24]  941 	sjmp	00129$
      000276                        942 00119$:
                                    943 ;	life.c:102: for (x = 0; x < W; x++) {
      000276 90r0Cr02         [24]  944 	mov	dptr,#_x
      000279 E0               [24]  945 	movx	a,@dptr
      00027A 24 01            [12]  946 	add	a,#0x01
      00027C F0               [24]  947 	movx	@dptr,a
      00027D A3               [24]  948 	inc	dptr
      00027E E0               [24]  949 	movx	a,@dptr
      00027F 34 00            [12]  950 	addc	a,#0x00
      000281 F0               [24]  951 	movx	@dptr,a
      000282 90r0Cr02         [24]  952 	mov	dptr,#_x
      000285 E0               [24]  953 	movx	a,@dptr
      000286 FE               [12]  954 	mov	r6,a
      000287 A3               [24]  955 	inc	dptr
      000288 E0               [24]  956 	movx	a,@dptr
      000289 FF               [12]  957 	mov	r7,a
      00028A C3               [12]  958 	clr	c
      00028B EE               [12]  959 	mov	a,r6
      00028C 94 20            [12]  960 	subb	a,#0x20
      00028E EF               [12]  961 	mov	a,r7
      00028F 64 80            [12]  962 	xrl	a,#0x80
      000291 94 80            [12]  963 	subb	a,#0x80
      000293 50 03            [24]  964 	jnc	00206$
      000295 02r01rE1         [24]  965 	ljmp	00131$
      000298                        966 00206$:
                                    967 ;	life.c:112: return;
                                    968 ;	life.c:113: }
      000298 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'main'
                                    972 ;------------------------------------------------------------
                                    973 ;__2621440020              Allocated to registers 
                                    974 ;s                         Allocated to registers r5 r6 r7 
                                    975 ;__1310720013              Allocated to registers 
                                    976 ;s                         Allocated to registers r5 r6 r7 
                                    977 ;__1310720015              Allocated to registers r6 r7 
                                    978 ;a                         Allocated to registers r4 r5 
                                    979 ;__1310720017              Allocated to registers 
                                    980 ;s                         Allocated to registers r5 r6 r7 
                                    981 ;__2621440023              Allocated to registers 
                                    982 ;s                         Allocated to registers r5 r6 r7 
                                    983 ;__4587520027              Allocated to registers 
                                    984 ;s                         Allocated to registers r5 r6 r7 
                                    985 ;__3276800029              Allocated to registers 
                                    986 ;s                         Allocated to registers r5 r6 r7 
                                    987 ;__1310720031              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;sloc0                     Allocated to stack - _bp +1
                                    990 ;sloc1                     Allocated to stack - _bp +3
                                    991 ;sloc2                     Allocated to stack - _bp +5
                                    992 ;sloc3                     Allocated to stack - _bp +6
                                    993 ;sloc4                     Allocated to stack - _bp +8
                                    994 ;sloc5                     Allocated to stack - _bp +10
                                    995 ;sloc6                     Allocated to stack - _bp +12
                                    996 ;sloc7                     Allocated to stack - _bp +14
                                    997 ;------------------------------------------------------------
                                    998 ;	life.c:196: void main(void) {
                                    999 ;	-----------------------------------------
                                   1000 ;	 function main
                                   1001 ;	-----------------------------------------
      000299                       1002 _main:
      000299 C0*00            [24] 1003 	push	_bp
      00029B E5 81            [12] 1004 	mov	a,sp
      00029D F5*00            [12] 1005 	mov	_bp,a
      00029F 24 0F            [12] 1006 	add	a,#0x0f
      0002A1 F5 81            [12] 1007 	mov	sp,a
                                   1008 ;	life.c:197: IT0 = 1;
                                   1009 ;	assignBit
      0002A3 D2 88            [12] 1010 	setb	_IT0
                                   1011 ;	life.c:198: IT1 = 1;
                                   1012 ;	assignBit
      0002A5 D2 8A            [12] 1013 	setb	_IT1
                                   1014 ;	life.c:199: EX0 = 1;
                                   1015 ;	assignBit
      0002A7 D2 A8            [12] 1016 	setb	_EX0
                                   1017 ;	life.c:200: EX1 = 1;
                                   1018 ;	assignBit
      0002A9 D2 AA            [12] 1019 	setb	_EX1
                                   1020 ;	life.c:201: EA = 1;
                                   1021 ;	assignBit
      0002AB D2 AF            [12] 1022 	setb	_EA
                                   1023 ;	life.c:203: for (i0 = 0; !i0; ) {
      0002AD 90r00r00         [24] 1024 	mov	dptr,#_i0
      0002B0 E4               [12] 1025 	clr	a
      0002B1 F0               [24] 1026 	movx	@dptr,a
      0002B2 90r00r01         [24] 1027 	mov	dptr,#_i1
      0002B5 F0               [24] 1028 	movx	@dptr,a
      0002B6                       1029 00186$:
                                   1030 ;	life.c:116: memset(u, 0, sizeof (u));
      0002B6 E4               [12] 1031 	clr	a
      0002B7 C0 E0            [24] 1032 	push	acc
      0002B9 74 04            [12] 1033 	mov	a,#0x04
      0002BB C0 E0            [24] 1034 	push	acc
      0002BD E4               [12] 1035 	clr	a
      0002BE C0 E0            [24] 1036 	push	acc
      0002C0 90r04r02         [24] 1037 	mov	dptr,#_u
      0002C3 75 F0 00         [24] 1038 	mov	b,#0x00
      0002C6 12r00r00         [24] 1039 	lcall	_memset
      0002C9 15 81            [12] 1040 	dec	sp
      0002CB 15 81            [12] 1041 	dec	sp
      0002CD 15 81            [12] 1042 	dec	sp
                                   1043 ;	life.c:117: memset(pu, 0, sizeof (pu));
      0002CF E4               [12] 1044 	clr	a
      0002D0 C0 E0            [24] 1045 	push	acc
      0002D2 74 04            [12] 1046 	mov	a,#0x04
      0002D4 C0 E0            [24] 1047 	push	acc
      0002D6 E4               [12] 1048 	clr	a
      0002D7 C0 E0            [24] 1049 	push	acc
      0002D9 90r00r02         [24] 1050 	mov	dptr,#_pu
      0002DC 75 F0 00         [24] 1051 	mov	b,#0x00
      0002DF 12r00r00         [24] 1052 	lcall	_memset
      0002E2 15 81            [12] 1053 	dec	sp
      0002E4 15 81            [12] 1054 	dec	sp
      0002E6 15 81            [12] 1055 	dec	sp
                                   1056 ;	life.c:205: printstr("\033[2J\033[mINIT\r\n");
      0002E8 7Dr26            [12] 1057 	mov	r5,#___str_4
      0002EA 7Es00            [12] 1058 	mov	r6,#(___str_4 >> 8)
      0002EC 7F 80            [12] 1059 	mov	r7,#0x80
                                   1060 ;	life.c:48: return;
      0002EE                       1061 00157$:
                                   1062 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002EE 8D 82            [24] 1063 	mov	dpl,r5
      0002F0 8E 83            [24] 1064 	mov	dph,r6
      0002F2 8F F0            [24] 1065 	mov	b,r7
      0002F4 12r00r00         [24] 1066 	lcall	__gptrget
      0002F7 FC               [12] 1067 	mov	r4,a
      0002F8 60 10            [24] 1068 	jz	00115$
      0002FA 7B 00            [12] 1069 	mov	r3,#0x00
      0002FC 8C 82            [24] 1070 	mov	dpl,r4
      0002FE 8B 83            [24] 1071 	mov	dph,r3
      000300 12r00r00         [24] 1072 	lcall	_putchar
      000303 0D               [12] 1073 	inc	r5
                                   1074 ;	life.c:205: printstr("\033[2J\033[mINIT\r\n");
      000304 BD 00 E7         [24] 1075 	cjne	r5,#0x00,00157$
      000307 0E               [12] 1076 	inc	r6
      000308 80 E4            [24] 1077 	sjmp	00157$
      00030A                       1078 00115$:
                                   1079 ;	life.c:206: (void)getchar();
      00030A 12r00r05         [24] 1080 	lcall	_getchar
                                   1081 ;	life.c:123: j = 0;
      00030D 90r0Cr0A         [24] 1082 	mov	dptr,#_j
      000310 E4               [12] 1083 	clr	a
      000311 F0               [24] 1084 	movx	@dptr,a
      000312 A3               [24] 1085 	inc	dptr
      000313 F0               [24] 1086 	movx	@dptr,a
                                   1087 ;	life.c:125: printstr("LOAD <");
      000314 7Dr1B            [12] 1088 	mov	r5,#___str_2
      000316 7Es00            [12] 1089 	mov	r6,#(___str_2 >> 8)
      000318 7F 80            [12] 1090 	mov	r7,#0x80
                                   1091 ;	life.c:48: return;
      00031A                       1092 00160$:
                                   1093 ;	life.c:46: for (; *s; s++) putchar(*s);
      00031A 8D 82            [24] 1094 	mov	dpl,r5
      00031C 8E 83            [24] 1095 	mov	dph,r6
      00031E 8F F0            [24] 1096 	mov	b,r7
      000320 12r00r00         [24] 1097 	lcall	__gptrget
      000323 FC               [12] 1098 	mov	r4,a
      000324 60 10            [24] 1099 	jz	00117$
      000326 7B 00            [12] 1100 	mov	r3,#0x00
      000328 8C 82            [24] 1101 	mov	dpl,r4
      00032A 8B 83            [24] 1102 	mov	dph,r3
      00032C 12r00r00         [24] 1103 	lcall	_putchar
      00032F 0D               [12] 1104 	inc	r5
                                   1105 ;	life.c:125: printstr("LOAD <");
      000330 BD 00 E7         [24] 1106 	cjne	r5,#0x00,00160$
      000333 0E               [12] 1107 	inc	r6
      000334 80 E4            [24] 1108 	sjmp	00160$
      000336                       1109 00117$:
                                   1110 ;	life.c:127: for (y = 0; y < H; y++)
      000336 90r0Cr04         [24] 1111 	mov	dptr,#_y
      000339 E4               [12] 1112 	clr	a
      00033A F0               [24] 1113 	movx	@dptr,a
      00033B A3               [24] 1114 	inc	dptr
      00033C F0               [24] 1115 	movx	@dptr,a
      00033D                       1116 00164$:
                                   1117 ;	life.c:128: for (x = 0; x < W; x++) {
      00033D 90r0Cr02         [24] 1118 	mov	dptr,#_x
      000340 E4               [12] 1119 	clr	a
      000341 F0               [24] 1120 	movx	@dptr,a
      000342 A3               [24] 1121 	inc	dptr
      000343 F0               [24] 1122 	movx	@dptr,a
      000344                       1123 00162$:
                                   1124 ;	life.c:129: c = getchar();
      000344 12r00r05         [24] 1125 	lcall	_getchar
      000347 AE 82            [24] 1126 	mov	r6,dpl
      000349 AF 83            [24] 1127 	mov	r7,dph
      00034B 90r0Cr0C         [24] 1128 	mov	dptr,#_c
      00034E EE               [12] 1129 	mov	a,r6
      00034F F0               [24] 1130 	movx	@dptr,a
      000350 EF               [12] 1131 	mov	a,r7
      000351 A3               [24] 1132 	inc	dptr
      000352 F0               [24] 1133 	movx	@dptr,a
                                   1134 ;	life.c:130: if (c == (int)'0') {
      000353 BE 30 41         [24] 1135 	cjne	r6,#0x30,00124$
      000356 BF 00 3E         [24] 1136 	cjne	r7,#0x00,00124$
                                   1137 ;	life.c:131: u[A2D(W, y, x)] = 0;
      000359 90r0Cr04         [24] 1138 	mov	dptr,#_y
      00035C E0               [24] 1139 	movx	a,@dptr
      00035D FC               [12] 1140 	mov	r4,a
      00035E A3               [24] 1141 	inc	dptr
      00035F E0               [24] 1142 	movx	a,@dptr
      000360 C4               [12] 1143 	swap	a
      000361 23               [12] 1144 	rl	a
      000362 54 E0            [12] 1145 	anl	a,#0xe0
      000364 CC               [12] 1146 	xch	a,r4
      000365 C4               [12] 1147 	swap	a
      000366 23               [12] 1148 	rl	a
      000367 CC               [12] 1149 	xch	a,r4
      000368 6C               [12] 1150 	xrl	a,r4
      000369 CC               [12] 1151 	xch	a,r4
      00036A 54 E0            [12] 1152 	anl	a,#0xe0
      00036C CC               [12] 1153 	xch	a,r4
      00036D 6C               [12] 1154 	xrl	a,r4
      00036E FD               [12] 1155 	mov	r5,a
      00036F 90r0Cr02         [24] 1156 	mov	dptr,#_x
      000372 E0               [24] 1157 	movx	a,@dptr
      000373 FA               [12] 1158 	mov	r2,a
      000374 A3               [24] 1159 	inc	dptr
      000375 E0               [24] 1160 	movx	a,@dptr
      000376 FB               [12] 1161 	mov	r3,a
      000377 EA               [12] 1162 	mov	a,r2
      000378 2C               [12] 1163 	add	a,r4
      000379 FC               [12] 1164 	mov	r4,a
      00037A EB               [12] 1165 	mov	a,r3
      00037B 3D               [12] 1166 	addc	a,r5
      00037C FD               [12] 1167 	mov	r5,a
      00037D EC               [12] 1168 	mov	a,r4
      00037E 24r02            [12] 1169 	add	a,#_u
      000380 F5 82            [12] 1170 	mov	dpl,a
      000382 ED               [12] 1171 	mov	a,r5
      000383 34s04            [12] 1172 	addc	a,#(_u >> 8)
      000385 F5 83            [12] 1173 	mov	dph,a
      000387 E4               [12] 1174 	clr	a
      000388 F0               [24] 1175 	movx	@dptr,a
                                   1176 ;	life.c:132: j++;
      000389 90r0Cr0A         [24] 1177 	mov	dptr,#_j
      00038C E0               [24] 1178 	movx	a,@dptr
      00038D 24 01            [12] 1179 	add	a,#0x01
      00038F F0               [24] 1180 	movx	@dptr,a
      000390 A3               [24] 1181 	inc	dptr
      000391 E0               [24] 1182 	movx	a,@dptr
      000392 34 00            [12] 1183 	addc	a,#0x00
      000394 F0               [24] 1184 	movx	@dptr,a
      000395 80 4D            [24] 1185 	sjmp	00163$
      000397                       1186 00124$:
                                   1187 ;	life.c:133: } else if (c == (int)'1') {
      000397 BE 31 42         [24] 1188 	cjne	r6,#0x31,00122$
      00039A BF 00 3F         [24] 1189 	cjne	r7,#0x00,00122$
                                   1190 ;	life.c:134: u[A2D(W, y, x)] = 1;
      00039D 90r0Cr04         [24] 1191 	mov	dptr,#_y
      0003A0 E0               [24] 1192 	movx	a,@dptr
      0003A1 FC               [12] 1193 	mov	r4,a
      0003A2 A3               [24] 1194 	inc	dptr
      0003A3 E0               [24] 1195 	movx	a,@dptr
      0003A4 C4               [12] 1196 	swap	a
      0003A5 23               [12] 1197 	rl	a
      0003A6 54 E0            [12] 1198 	anl	a,#0xe0
      0003A8 CC               [12] 1199 	xch	a,r4
      0003A9 C4               [12] 1200 	swap	a
      0003AA 23               [12] 1201 	rl	a
      0003AB CC               [12] 1202 	xch	a,r4
      0003AC 6C               [12] 1203 	xrl	a,r4
      0003AD CC               [12] 1204 	xch	a,r4
      0003AE 54 E0            [12] 1205 	anl	a,#0xe0
      0003B0 CC               [12] 1206 	xch	a,r4
      0003B1 6C               [12] 1207 	xrl	a,r4
      0003B2 FD               [12] 1208 	mov	r5,a
      0003B3 90r0Cr02         [24] 1209 	mov	dptr,#_x
      0003B6 E0               [24] 1210 	movx	a,@dptr
      0003B7 FA               [12] 1211 	mov	r2,a
      0003B8 A3               [24] 1212 	inc	dptr
      0003B9 E0               [24] 1213 	movx	a,@dptr
      0003BA FB               [12] 1214 	mov	r3,a
      0003BB EA               [12] 1215 	mov	a,r2
      0003BC 2C               [12] 1216 	add	a,r4
      0003BD FC               [12] 1217 	mov	r4,a
      0003BE EB               [12] 1218 	mov	a,r3
      0003BF 3D               [12] 1219 	addc	a,r5
      0003C0 FD               [12] 1220 	mov	r5,a
      0003C1 EC               [12] 1221 	mov	a,r4
      0003C2 24r02            [12] 1222 	add	a,#_u
      0003C4 F5 82            [12] 1223 	mov	dpl,a
      0003C6 ED               [12] 1224 	mov	a,r5
      0003C7 34s04            [12] 1225 	addc	a,#(_u >> 8)
      0003C9 F5 83            [12] 1226 	mov	dph,a
      0003CB 74 01            [12] 1227 	mov	a,#0x01
      0003CD F0               [24] 1228 	movx	@dptr,a
                                   1229 ;	life.c:135: j++;
      0003CE 90r0Cr0A         [24] 1230 	mov	dptr,#_j
      0003D1 E0               [24] 1231 	movx	a,@dptr
      0003D2 24 01            [12] 1232 	add	a,#0x01
      0003D4 F0               [24] 1233 	movx	@dptr,a
      0003D5 A3               [24] 1234 	inc	dptr
      0003D6 E0               [24] 1235 	movx	a,@dptr
      0003D7 34 00            [12] 1236 	addc	a,#0x00
      0003D9 F0               [24] 1237 	movx	@dptr,a
      0003DA 80 08            [24] 1238 	sjmp	00163$
      0003DC                       1239 00122$:
                                   1240 ;	life.c:136: } else if (c == (int)'#') goto out;
      0003DC BE 23 05         [24] 1241 	cjne	r6,#0x23,00359$
      0003DF BF 00 02         [24] 1242 	cjne	r7,#0x00,00359$
      0003E2 80 44            [24] 1243 	sjmp	00135$
      0003E4                       1244 00359$:
      0003E4                       1245 00163$:
                                   1246 ;	life.c:128: for (x = 0; x < W; x++) {
      0003E4 90r0Cr02         [24] 1247 	mov	dptr,#_x
      0003E7 E0               [24] 1248 	movx	a,@dptr
      0003E8 24 01            [12] 1249 	add	a,#0x01
      0003EA F0               [24] 1250 	movx	@dptr,a
      0003EB A3               [24] 1251 	inc	dptr
      0003EC E0               [24] 1252 	movx	a,@dptr
      0003ED 34 00            [12] 1253 	addc	a,#0x00
      0003EF F0               [24] 1254 	movx	@dptr,a
      0003F0 90r0Cr02         [24] 1255 	mov	dptr,#_x
      0003F3 E0               [24] 1256 	movx	a,@dptr
      0003F4 FE               [12] 1257 	mov	r6,a
      0003F5 A3               [24] 1258 	inc	dptr
      0003F6 E0               [24] 1259 	movx	a,@dptr
      0003F7 FF               [12] 1260 	mov	r7,a
      0003F8 C3               [12] 1261 	clr	c
      0003F9 EE               [12] 1262 	mov	a,r6
      0003FA 94 20            [12] 1263 	subb	a,#0x20
      0003FC EF               [12] 1264 	mov	a,r7
      0003FD 64 80            [12] 1265 	xrl	a,#0x80
      0003FF 94 80            [12] 1266 	subb	a,#0x80
      000401 50 03            [24] 1267 	jnc	00360$
      000403 02r03r44         [24] 1268 	ljmp	00162$
      000406                       1269 00360$:
                                   1270 ;	life.c:127: for (y = 0; y < H; y++)
      000406 90r0Cr04         [24] 1271 	mov	dptr,#_y
      000409 E0               [24] 1272 	movx	a,@dptr
      00040A 24 01            [12] 1273 	add	a,#0x01
      00040C F0               [24] 1274 	movx	@dptr,a
      00040D A3               [24] 1275 	inc	dptr
      00040E E0               [24] 1276 	movx	a,@dptr
      00040F 34 00            [12] 1277 	addc	a,#0x00
      000411 F0               [24] 1278 	movx	@dptr,a
      000412 90r0Cr04         [24] 1279 	mov	dptr,#_y
      000415 E0               [24] 1280 	movx	a,@dptr
      000416 FE               [12] 1281 	mov	r6,a
      000417 A3               [24] 1282 	inc	dptr
      000418 E0               [24] 1283 	movx	a,@dptr
      000419 FF               [12] 1284 	mov	r7,a
      00041A C3               [12] 1285 	clr	c
      00041B EE               [12] 1286 	mov	a,r6
      00041C 94 20            [12] 1287 	subb	a,#0x20
      00041E EF               [12] 1288 	mov	a,r7
      00041F 64 80            [12] 1289 	xrl	a,#0x80
      000421 94 80            [12] 1290 	subb	a,#0x80
      000423 50 03            [24] 1291 	jnc	00361$
      000425 02r03r3D         [24] 1292 	ljmp	00164$
      000428                       1293 00361$:
                                   1294 ;	life.c:139: out:
      000428                       1295 00135$:
                                   1296 ;	life.c:140: if (c != (int)'#')
      000428 90r0Cr0C         [24] 1297 	mov	dptr,#_c
      00042B E0               [24] 1298 	movx	a,@dptr
      00042C FE               [12] 1299 	mov	r6,a
      00042D A3               [24] 1300 	inc	dptr
      00042E E0               [24] 1301 	movx	a,@dptr
      00042F FF               [12] 1302 	mov	r7,a
      000430 BE 23 05         [24] 1303 	cjne	r6,#0x23,00362$
      000433 BF 00 02         [24] 1304 	cjne	r7,#0x00,00362$
      000436 80 15            [24] 1305 	sjmp	00134$
      000438                       1306 00362$:
                                   1307 ;	life.c:141: while (1) {
      000438                       1308 00131$:
                                   1309 ;	life.c:142: c = getchar();
      000438 12r00r05         [24] 1310 	lcall	_getchar
      00043B AE 82            [24] 1311 	mov	r6,dpl
      00043D AF 83            [24] 1312 	mov	r7,dph
      00043F 90r0Cr0C         [24] 1313 	mov	dptr,#_c
      000442 EE               [12] 1314 	mov	a,r6
      000443 F0               [24] 1315 	movx	@dptr,a
      000444 EF               [12] 1316 	mov	a,r7
      000445 A3               [24] 1317 	inc	dptr
      000446 F0               [24] 1318 	movx	@dptr,a
                                   1319 ;	life.c:143: if (c == (int)'#') break;
      000447 BE 23 EE         [24] 1320 	cjne	r6,#0x23,00131$
      00044A BF 00 EB         [24] 1321 	cjne	r7,#0x00,00131$
      00044D                       1322 00134$:
                                   1323 ;	life.c:145: print16x(j);
      00044D 90r0Cr0A         [24] 1324 	mov	dptr,#_j
      000450 E0               [24] 1325 	movx	a,@dptr
      000451 FE               [12] 1326 	mov	r6,a
      000452 A3               [24] 1327 	inc	dptr
      000453 E0               [24] 1328 	movx	a,@dptr
                                   1329 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000454 8E 04            [24] 1330 	mov	ar4,r6
      000456 FD               [12] 1331 	mov	r5,a
      000457 C4               [12] 1332 	swap	a
      000458 54 0F            [12] 1333 	anl	a,#0x0f
      00045A 30 E3 02         [24] 1334 	jnb	acc.3,00365$
      00045D 44 F0            [12] 1335 	orl	a,#0xf0
      00045F                       1336 00365$:
      00045F FE               [12] 1337 	mov	r6,a
      000460 33               [12] 1338 	rlc	a
      000461 95 E0            [12] 1339 	subb	a,acc
      000463 53 06 0F         [24] 1340 	anl	ar6,#0x0f
      000466 7F 00            [12] 1341 	mov	r7,#0x00
      000468 EE               [12] 1342 	mov	a,r6
      000469 24r00            [12] 1343 	add	a,#_digits
      00046B F5 82            [12] 1344 	mov	dpl,a
      00046D EF               [12] 1345 	mov	a,r7
      00046E 34s00            [12] 1346 	addc	a,#(_digits >> 8)
      000470 F5 83            [12] 1347 	mov	dph,a
      000472 E4               [12] 1348 	clr	a
      000473 93               [24] 1349 	movc	a,@a+dptr
      000474 FF               [12] 1350 	mov	r7,a
      000475 7E 00            [12] 1351 	mov	r6,#0x00
      000477 8F 82            [24] 1352 	mov	dpl,r7
      000479 8E 83            [24] 1353 	mov	dph,r6
      00047B 12r00r00         [24] 1354 	lcall	_putchar
                                   1355 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00047E 8D 07            [24] 1356 	mov	ar7,r5
      000480 53 07 0F         [24] 1357 	anl	ar7,#0x0f
      000483 7E 00            [12] 1358 	mov	r6,#0x00
      000485 EF               [12] 1359 	mov	a,r7
      000486 24r00            [12] 1360 	add	a,#_digits
      000488 F5 82            [12] 1361 	mov	dpl,a
      00048A EE               [12] 1362 	mov	a,r6
      00048B 34s00            [12] 1363 	addc	a,#(_digits >> 8)
      00048D F5 83            [12] 1364 	mov	dph,a
      00048F E4               [12] 1365 	clr	a
      000490 93               [24] 1366 	movc	a,@a+dptr
      000491 FF               [12] 1367 	mov	r7,a
      000492 7E 00            [12] 1368 	mov	r6,#0x00
      000494 8F 82            [24] 1369 	mov	dpl,r7
      000496 8E 83            [24] 1370 	mov	dph,r6
      000498 12r00r00         [24] 1371 	lcall	_putchar
                                   1372 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      00049B 8C 06            [24] 1373 	mov	ar6,r4
      00049D ED               [12] 1374 	mov	a,r5
      00049E C4               [12] 1375 	swap	a
      00049F CE               [12] 1376 	xch	a,r6
      0004A0 C4               [12] 1377 	swap	a
      0004A1 54 0F            [12] 1378 	anl	a,#0x0f
      0004A3 6E               [12] 1379 	xrl	a,r6
      0004A4 CE               [12] 1380 	xch	a,r6
      0004A5 54 0F            [12] 1381 	anl	a,#0x0f
      0004A7 CE               [12] 1382 	xch	a,r6
      0004A8 6E               [12] 1383 	xrl	a,r6
      0004A9 CE               [12] 1384 	xch	a,r6
      0004AA 30 E3 02         [24] 1385 	jnb	acc.3,00366$
      0004AD 44 F0            [12] 1386 	orl	a,#0xf0
      0004AF                       1387 00366$:
      0004AF 53 06 0F         [24] 1388 	anl	ar6,#0x0f
      0004B2 7F 00            [12] 1389 	mov	r7,#0x00
      0004B4 EE               [12] 1390 	mov	a,r6
      0004B5 24r00            [12] 1391 	add	a,#_digits
      0004B7 F5 82            [12] 1392 	mov	dpl,a
      0004B9 EF               [12] 1393 	mov	a,r7
      0004BA 34s00            [12] 1394 	addc	a,#(_digits >> 8)
      0004BC F5 83            [12] 1395 	mov	dph,a
      0004BE E4               [12] 1396 	clr	a
      0004BF 93               [24] 1397 	movc	a,@a+dptr
      0004C0 FF               [12] 1398 	mov	r7,a
      0004C1 7E 00            [12] 1399 	mov	r6,#0x00
      0004C3 8F 82            [24] 1400 	mov	dpl,r7
      0004C5 8E 83            [24] 1401 	mov	dph,r6
      0004C7 12r00r00         [24] 1402 	lcall	_putchar
                                   1403 ;	life.c:40: putchar(digits[a & 0xf]);
      0004CA 53 04 0F         [24] 1404 	anl	ar4,#0x0f
      0004CD 7D 00            [12] 1405 	mov	r5,#0x00
      0004CF EC               [12] 1406 	mov	a,r4
      0004D0 24r00            [12] 1407 	add	a,#_digits
      0004D2 F5 82            [12] 1408 	mov	dpl,a
      0004D4 ED               [12] 1409 	mov	a,r5
      0004D5 34s00            [12] 1410 	addc	a,#(_digits >> 8)
      0004D7 F5 83            [12] 1411 	mov	dph,a
      0004D9 E4               [12] 1412 	clr	a
      0004DA 93               [24] 1413 	movc	a,@a+dptr
      0004DB FF               [12] 1414 	mov	r7,a
      0004DC 7E 00            [12] 1415 	mov	r6,#0x00
      0004DE 8F 82            [24] 1416 	mov	dpl,r7
      0004E0 8E 83            [24] 1417 	mov	dph,r6
      0004E2 12r00r00         [24] 1418 	lcall	_putchar
                                   1419 ;	life.c:146: printstr(">\r\n");
      0004E5 7Dr22            [12] 1420 	mov	r5,#___str_3
      0004E7 7Es00            [12] 1421 	mov	r6,#(___str_3 >> 8)
      0004E9 7F 80            [12] 1422 	mov	r7,#0x80
                                   1423 ;	life.c:48: return;
      0004EB                       1424 00167$:
                                   1425 ;	life.c:46: for (; *s; s++) putchar(*s);
      0004EB 8D 82            [24] 1426 	mov	dpl,r5
      0004ED 8E 83            [24] 1427 	mov	dph,r6
      0004EF 8F F0            [24] 1428 	mov	b,r7
      0004F1 12r00r00         [24] 1429 	lcall	__gptrget
      0004F4 FC               [12] 1430 	mov	r4,a
      0004F5 60 10            [24] 1431 	jz	00138$
      0004F7 7B 00            [12] 1432 	mov	r3,#0x00
      0004F9 8C 82            [24] 1433 	mov	dpl,r4
      0004FB 8B 83            [24] 1434 	mov	dph,r3
      0004FD 12r00r00         [24] 1435 	lcall	_putchar
      000500 0D               [12] 1436 	inc	r5
                                   1437 ;	life.c:146: printstr(">\r\n");
      000501 BD 00 E7         [24] 1438 	cjne	r5,#0x00,00167$
      000504 0E               [12] 1439 	inc	r6
      000505 80 E4            [24] 1440 	sjmp	00167$
      000507                       1441 00138$:
                                   1442 ;	life.c:209: show(0);
      000507 75 82 00         [24] 1443 	mov	dpl,#0x00
      00050A 12r00r34         [24] 1444 	lcall	_show
                                   1445 ;	life.c:211: printstr("READY\r\n");
      00050D 7Dr34            [12] 1446 	mov	r5,#___str_5
      00050F 7Es00            [12] 1447 	mov	r6,#(___str_5 >> 8)
      000511 7F 80            [12] 1448 	mov	r7,#0x80
                                   1449 ;	life.c:48: return;
      000513                       1450 00170$:
                                   1451 ;	life.c:46: for (; *s; s++) putchar(*s);
      000513 8D 82            [24] 1452 	mov	dpl,r5
      000515 8E 83            [24] 1453 	mov	dph,r6
      000517 8F F0            [24] 1454 	mov	b,r7
      000519 12r00r00         [24] 1455 	lcall	__gptrget
      00051C FC               [12] 1456 	mov	r4,a
      00051D 60 10            [24] 1457 	jz	00104$
      00051F 7B 00            [12] 1458 	mov	r3,#0x00
      000521 8C 82            [24] 1459 	mov	dpl,r4
      000523 8B 83            [24] 1460 	mov	dph,r3
      000525 12r00r00         [24] 1461 	lcall	_putchar
      000528 0D               [12] 1462 	inc	r5
                                   1463 ;	life.c:212: while (1) {
      000529 BD 00 E7         [24] 1464 	cjne	r5,#0x00,00170$
      00052C 0E               [12] 1465 	inc	r6
      00052D 80 E4            [24] 1466 	sjmp	00170$
      00052F                       1467 00104$:
                                   1468 ;	life.c:213: c = getchar();
      00052F 12r00r05         [24] 1469 	lcall	_getchar
      000532 AE 82            [24] 1470 	mov	r6,dpl
      000534 AF 83            [24] 1471 	mov	r7,dph
      000536 90r0Cr0C         [24] 1472 	mov	dptr,#_c
      000539 EE               [12] 1473 	mov	a,r6
      00053A F0               [24] 1474 	movx	@dptr,a
      00053B EF               [12] 1475 	mov	a,r7
      00053C A3               [24] 1476 	inc	dptr
      00053D F0               [24] 1477 	movx	@dptr,a
                                   1478 ;	life.c:214: if (c == (int)'S') break;
      00053E BE 53 EE         [24] 1479 	cjne	r6,#0x53,00104$
      000541 BF 00 EB         [24] 1480 	cjne	r7,#0x00,00104$
                                   1481 ;	life.c:74: generation[0] = 0;
      000544 90r0Cr12         [24] 1482 	mov	dptr,#_generation
      000547 E4               [12] 1483 	clr	a
      000548 F0               [24] 1484 	movx	@dptr,a
      000549 A3               [24] 1485 	inc	dptr
      00054A F0               [24] 1486 	movx	@dptr,a
                                   1487 ;	life.c:75: generation[1] = 0;
      00054B 90r0Cr14         [24] 1488 	mov	dptr,#(_generation + 0x0002)
      00054E F0               [24] 1489 	movx	@dptr,a
      00054F A3               [24] 1490 	inc	dptr
      000550 F0               [24] 1491 	movx	@dptr,a
                                   1492 ;	life.c:222: for (i1 = 0; !i0 && !i1; ) {
      000551                       1493 00181$:
      000551 90r00r00         [24] 1494 	mov	dptr,#_i0
      000554 E0               [24] 1495 	movx	a,@dptr
      000555 60 03            [24] 1496 	jz	00373$
      000557 02r0Ar23         [24] 1497 	ljmp	00109$
      00055A                       1498 00373$:
                                   1499 ;	life.c:223: show(1);
      00055A 75 82 01         [24] 1500 	mov	dpl,#0x01
      00055D 12r00r34         [24] 1501 	lcall	_show
                                   1502 ;	life.c:154: fixed = 1;
      000560 90r0Cr10         [24] 1503 	mov	dptr,#_fixed
      000563 74 01            [12] 1504 	mov	a,#0x01
      000565 F0               [24] 1505 	movx	@dptr,a
                                   1506 ;	life.c:155: cycle2 = 1;
      000566 90r0Cr11         [24] 1507 	mov	dptr,#_cycle2
      000569 F0               [24] 1508 	movx	@dptr,a
                                   1509 ;	life.c:156: bstep = 0;
      00056A 90r0Cr0E         [24] 1510 	mov	dptr,#_bstep
      00056D E4               [12] 1511 	clr	a
      00056E F0               [24] 1512 	movx	@dptr,a
                                   1513 ;	life.c:158: for (y = 0; y < H; y++) {
      00056F 90r0Cr04         [24] 1514 	mov	dptr,#_y
      000572 F0               [24] 1515 	movx	@dptr,a
      000573 A3               [24] 1516 	inc	dptr
      000574 F0               [24] 1517 	movx	@dptr,a
      000575                       1518 00174$:
                                   1519 ;	life.c:159: putchar(busy[bstep]); putchar('\r');
      000575 90r0Cr0E         [24] 1520 	mov	dptr,#_bstep
      000578 E0               [24] 1521 	movx	a,@dptr
      000579 90r0Ar87         [24] 1522 	mov	dptr,#_busy
      00057C 93               [24] 1523 	movc	a,@a+dptr
      00057D FF               [12] 1524 	mov	r7,a
      00057E 7E 00            [12] 1525 	mov	r6,#0x00
      000580 8F 82            [24] 1526 	mov	dpl,r7
      000582 8E 83            [24] 1527 	mov	dph,r6
      000584 12r00r00         [24] 1528 	lcall	_putchar
      000587 90 00 0D         [24] 1529 	mov	dptr,#0x000d
      00058A 12r00r00         [24] 1530 	lcall	_putchar
                                   1531 ;	life.c:160: bstep = (bstep + 1) & 3;
      00058D 90r0Cr0E         [24] 1532 	mov	dptr,#_bstep
      000590 E0               [24] 1533 	movx	a,@dptr
      000591 FF               [12] 1534 	mov	r7,a
      000592 0F               [12] 1535 	inc	r7
      000593 74 03            [12] 1536 	mov	a,#0x03
      000595 5F               [12] 1537 	anl	a,r7
      000596 F0               [24] 1538 	movx	@dptr,a
                                   1539 ;	life.c:161: for (x = 0; x < W; x++) {
      000597 90r0Cr02         [24] 1540 	mov	dptr,#_x
      00059A E4               [12] 1541 	clr	a
      00059B F0               [24] 1542 	movx	@dptr,a
      00059C A3               [24] 1543 	inc	dptr
      00059D F0               [24] 1544 	movx	@dptr,a
      00059E                       1545 00172$:
                                   1546 ;	life.c:162: n = -u[A2D(W, y, x)];
      00059E 90r0Cr04         [24] 1547 	mov	dptr,#_y
      0005A1 E0               [24] 1548 	movx	a,@dptr
      0005A2 FE               [12] 1549 	mov	r6,a
      0005A3 A3               [24] 1550 	inc	dptr
      0005A4 E0               [24] 1551 	movx	a,@dptr
      0005A5 FF               [12] 1552 	mov	r7,a
      0005A6 A8*00            [24] 1553 	mov	r0,_bp
      0005A8 08               [12] 1554 	inc	r0
      0005A9 A6 06            [24] 1555 	mov	@r0,ar6
      0005AB EF               [12] 1556 	mov	a,r7
      0005AC C4               [12] 1557 	swap	a
      0005AD 23               [12] 1558 	rl	a
      0005AE 54 E0            [12] 1559 	anl	a,#0xe0
      0005B0 C6               [12] 1560 	xch	a,@r0
      0005B1 C4               [12] 1561 	swap	a
      0005B2 23               [12] 1562 	rl	a
      0005B3 C6               [12] 1563 	xch	a,@r0
      0005B4 66               [12] 1564 	xrl	a,@r0
      0005B5 C6               [12] 1565 	xch	a,@r0
      0005B6 54 E0            [12] 1566 	anl	a,#0xe0
      0005B8 C6               [12] 1567 	xch	a,@r0
      0005B9 66               [12] 1568 	xrl	a,@r0
      0005BA 08               [12] 1569 	inc	r0
      0005BB F6               [12] 1570 	mov	@r0,a
      0005BC 90r0Cr02         [24] 1571 	mov	dptr,#_x
      0005BF E0               [24] 1572 	movx	a,@dptr
      0005C0 FA               [12] 1573 	mov	r2,a
      0005C1 A3               [24] 1574 	inc	dptr
      0005C2 E0               [24] 1575 	movx	a,@dptr
      0005C3 FB               [12] 1576 	mov	r3,a
      0005C4 A8*00            [24] 1577 	mov	r0,_bp
      0005C6 08               [12] 1578 	inc	r0
      0005C7 E5*00            [12] 1579 	mov	a,_bp
      0005C9 24 03            [12] 1580 	add	a,#0x03
      0005CB F9               [12] 1581 	mov	r1,a
      0005CC EA               [12] 1582 	mov	a,r2
      0005CD 26               [12] 1583 	add	a,@r0
      0005CE F7               [12] 1584 	mov	@r1,a
      0005CF EB               [12] 1585 	mov	a,r3
      0005D0 08               [12] 1586 	inc	r0
      0005D1 36               [12] 1587 	addc	a,@r0
      0005D2 09               [12] 1588 	inc	r1
      0005D3 F7               [12] 1589 	mov	@r1,a
      0005D4 E5*00            [12] 1590 	mov	a,_bp
      0005D6 24 03            [12] 1591 	add	a,#0x03
      0005D8 F8               [12] 1592 	mov	r0,a
      0005D9 E6               [12] 1593 	mov	a,@r0
      0005DA 24r02            [12] 1594 	add	a,#_u
      0005DC F5 82            [12] 1595 	mov	dpl,a
      0005DE 08               [12] 1596 	inc	r0
      0005DF E6               [12] 1597 	mov	a,@r0
      0005E0 34s04            [12] 1598 	addc	a,#(_u >> 8)
      0005E2 F5 83            [12] 1599 	mov	dph,a
      0005E4 E0               [24] 1600 	movx	a,@dptr
      0005E5 FD               [12] 1601 	mov	r5,a
      0005E6 E5*00            [12] 1602 	mov	a,_bp
      0005E8 24 05            [12] 1603 	add	a,#0x05
      0005EA F8               [12] 1604 	mov	r0,a
      0005EB C3               [12] 1605 	clr	c
      0005EC E4               [12] 1606 	clr	a
      0005ED 9D               [12] 1607 	subb	a,r5
      0005EE F6               [12] 1608 	mov	@r0,a
                                   1609 ;	life.c:165: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0005EF 74 1F            [12] 1610 	mov	a,#0x1f
      0005F1 2E               [12] 1611 	add	a,r6
      0005F2 FC               [12] 1612 	mov	r4,a
      0005F3 E4               [12] 1613 	clr	a
      0005F4 3F               [12] 1614 	addc	a,r7
      0005F5 FD               [12] 1615 	mov	r5,a
      0005F6 C0 07            [24] 1616 	push	ar7
      0005F8 C0 06            [24] 1617 	push	ar6
      0005FA C0 03            [24] 1618 	push	ar3
      0005FC C0 02            [24] 1619 	push	ar2
      0005FE 74 20            [12] 1620 	mov	a,#0x20
      000600 C0 E0            [24] 1621 	push	acc
      000602 E4               [12] 1622 	clr	a
      000603 C0 E0            [24] 1623 	push	acc
      000605 8C 82            [24] 1624 	mov	dpl,r4
      000607 8D 83            [24] 1625 	mov	dph,r5
      000609 12r00r00         [24] 1626 	lcall	__modsint
      00060C AC 82            [24] 1627 	mov	r4,dpl
      00060E AD 83            [24] 1628 	mov	r5,dph
      000610 15 81            [12] 1629 	dec	sp
      000612 15 81            [12] 1630 	dec	sp
      000614 D0 02            [24] 1631 	pop	ar2
      000616 D0 03            [24] 1632 	pop	ar3
      000618 E5*00            [12] 1633 	mov	a,_bp
      00061A 24 06            [12] 1634 	add	a,#0x06
      00061C F8               [12] 1635 	mov	r0,a
      00061D A6 04            [24] 1636 	mov	@r0,ar4
      00061F ED               [12] 1637 	mov	a,r5
      000620 C4               [12] 1638 	swap	a
      000621 23               [12] 1639 	rl	a
      000622 54 E0            [12] 1640 	anl	a,#0xe0
      000624 C6               [12] 1641 	xch	a,@r0
      000625 C4               [12] 1642 	swap	a
      000626 23               [12] 1643 	rl	a
      000627 C6               [12] 1644 	xch	a,@r0
      000628 66               [12] 1645 	xrl	a,@r0
      000629 C6               [12] 1646 	xch	a,@r0
      00062A 54 E0            [12] 1647 	anl	a,#0xe0
      00062C C6               [12] 1648 	xch	a,@r0
      00062D 66               [12] 1649 	xrl	a,@r0
      00062E 08               [12] 1650 	inc	r0
      00062F F6               [12] 1651 	mov	@r0,a
      000630 74 1F            [12] 1652 	mov	a,#0x1f
      000632 2A               [12] 1653 	add	a,r2
      000633 FC               [12] 1654 	mov	r4,a
      000634 E4               [12] 1655 	clr	a
      000635 3B               [12] 1656 	addc	a,r3
      000636 FD               [12] 1657 	mov	r5,a
      000637 C0 03            [24] 1658 	push	ar3
      000639 C0 02            [24] 1659 	push	ar2
      00063B 74 20            [12] 1660 	mov	a,#0x20
      00063D C0 E0            [24] 1661 	push	acc
      00063F E4               [12] 1662 	clr	a
      000640 C0 E0            [24] 1663 	push	acc
      000642 8C 82            [24] 1664 	mov	dpl,r4
      000644 8D 83            [24] 1665 	mov	dph,r5
      000646 12r00r00         [24] 1666 	lcall	__modsint
      000649 C8               [12] 1667 	xch	a,r0
      00064A E5*00            [12] 1668 	mov	a,_bp
      00064C 24 08            [12] 1669 	add	a,#0x08
      00064E C8               [12] 1670 	xch	a,r0
      00064F A6 82            [24] 1671 	mov	@r0,dpl
      000651 08               [12] 1672 	inc	r0
      000652 A6 83            [24] 1673 	mov	@r0,dph
      000654 15 81            [12] 1674 	dec	sp
      000656 15 81            [12] 1675 	dec	sp
      000658 D0 02            [24] 1676 	pop	ar2
      00065A D0 03            [24] 1677 	pop	ar3
      00065C E5*00            [12] 1678 	mov	a,_bp
      00065E 24 06            [12] 1679 	add	a,#0x06
      000660 F8               [12] 1680 	mov	r0,a
      000661 E5*00            [12] 1681 	mov	a,_bp
      000663 24 08            [12] 1682 	add	a,#0x08
      000665 F9               [12] 1683 	mov	r1,a
      000666 E7               [12] 1684 	mov	a,@r1
      000667 26               [12] 1685 	add	a,@r0
      000668 FC               [12] 1686 	mov	r4,a
      000669 09               [12] 1687 	inc	r1
      00066A E7               [12] 1688 	mov	a,@r1
      00066B 08               [12] 1689 	inc	r0
      00066C 36               [12] 1690 	addc	a,@r0
      00066D FD               [12] 1691 	mov	r5,a
      00066E EC               [12] 1692 	mov	a,r4
      00066F 24r02            [12] 1693 	add	a,#_u
      000671 F5 82            [12] 1694 	mov	dpl,a
      000673 ED               [12] 1695 	mov	a,r5
      000674 34s04            [12] 1696 	addc	a,#(_u >> 8)
      000676 F5 83            [12] 1697 	mov	dph,a
      000678 E0               [24] 1698 	movx	a,@dptr
      000679 FD               [12] 1699 	mov	r5,a
      00067A E5*00            [12] 1700 	mov	a,_bp
      00067C 24 05            [12] 1701 	add	a,#0x05
      00067E F8               [12] 1702 	mov	r0,a
      00067F ED               [12] 1703 	mov	a,r5
      000680 26               [12] 1704 	add	a,@r0
      000681 F6               [12] 1705 	mov	@r0,a
                                   1706 ;	life.c:167: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000682 74 20            [12] 1707 	mov	a,#0x20
      000684 2A               [12] 1708 	add	a,r2
      000685 FC               [12] 1709 	mov	r4,a
      000686 E4               [12] 1710 	clr	a
      000687 3B               [12] 1711 	addc	a,r3
      000688 FD               [12] 1712 	mov	r5,a
      000689 C0 03            [24] 1713 	push	ar3
      00068B C0 02            [24] 1714 	push	ar2
      00068D 74 20            [12] 1715 	mov	a,#0x20
      00068F C0 E0            [24] 1716 	push	acc
      000691 E4               [12] 1717 	clr	a
      000692 C0 E0            [24] 1718 	push	acc
      000694 8C 82            [24] 1719 	mov	dpl,r4
      000696 8D 83            [24] 1720 	mov	dph,r5
      000698 12r00r00         [24] 1721 	lcall	__modsint
      00069B C8               [12] 1722 	xch	a,r0
      00069C E5*00            [12] 1723 	mov	a,_bp
      00069E 24 0A            [12] 1724 	add	a,#0x0a
      0006A0 C8               [12] 1725 	xch	a,r0
      0006A1 A6 82            [24] 1726 	mov	@r0,dpl
      0006A3 08               [12] 1727 	inc	r0
      0006A4 A6 83            [24] 1728 	mov	@r0,dph
      0006A6 15 81            [12] 1729 	dec	sp
      0006A8 15 81            [12] 1730 	dec	sp
      0006AA D0 02            [24] 1731 	pop	ar2
      0006AC D0 03            [24] 1732 	pop	ar3
      0006AE E5*00            [12] 1733 	mov	a,_bp
      0006B0 24 06            [12] 1734 	add	a,#0x06
      0006B2 F8               [12] 1735 	mov	r0,a
      0006B3 E5*00            [12] 1736 	mov	a,_bp
      0006B5 24 0A            [12] 1737 	add	a,#0x0a
      0006B7 F9               [12] 1738 	mov	r1,a
      0006B8 E7               [12] 1739 	mov	a,@r1
      0006B9 26               [12] 1740 	add	a,@r0
      0006BA FC               [12] 1741 	mov	r4,a
      0006BB 09               [12] 1742 	inc	r1
      0006BC E7               [12] 1743 	mov	a,@r1
      0006BD 08               [12] 1744 	inc	r0
      0006BE 36               [12] 1745 	addc	a,@r0
      0006BF FD               [12] 1746 	mov	r5,a
      0006C0 EC               [12] 1747 	mov	a,r4
      0006C1 24r02            [12] 1748 	add	a,#_u
      0006C3 F5 82            [12] 1749 	mov	dpl,a
      0006C5 ED               [12] 1750 	mov	a,r5
      0006C6 34s04            [12] 1751 	addc	a,#(_u >> 8)
      0006C8 F5 83            [12] 1752 	mov	dph,a
      0006CA E0               [24] 1753 	movx	a,@dptr
      0006CB FD               [12] 1754 	mov	r5,a
      0006CC E5*00            [12] 1755 	mov	a,_bp
      0006CE 24 05            [12] 1756 	add	a,#0x05
      0006D0 F8               [12] 1757 	mov	r0,a
      0006D1 ED               [12] 1758 	mov	a,r5
      0006D2 26               [12] 1759 	add	a,@r0
      0006D3 F6               [12] 1760 	mov	@r0,a
                                   1761 ;	life.c:169: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006D4 74 21            [12] 1762 	mov	a,#0x21
      0006D6 2A               [12] 1763 	add	a,r2
      0006D7 FC               [12] 1764 	mov	r4,a
      0006D8 E4               [12] 1765 	clr	a
      0006D9 3B               [12] 1766 	addc	a,r3
      0006DA FD               [12] 1767 	mov	r5,a
      0006DB C0 03            [24] 1768 	push	ar3
      0006DD C0 02            [24] 1769 	push	ar2
      0006DF 74 20            [12] 1770 	mov	a,#0x20
      0006E1 C0 E0            [24] 1771 	push	acc
      0006E3 E4               [12] 1772 	clr	a
      0006E4 C0 E0            [24] 1773 	push	acc
      0006E6 8C 82            [24] 1774 	mov	dpl,r4
      0006E8 8D 83            [24] 1775 	mov	dph,r5
      0006EA 12r00r00         [24] 1776 	lcall	__modsint
      0006ED C8               [12] 1777 	xch	a,r0
      0006EE E5*00            [12] 1778 	mov	a,_bp
      0006F0 24 0C            [12] 1779 	add	a,#0x0c
      0006F2 C8               [12] 1780 	xch	a,r0
      0006F3 A6 82            [24] 1781 	mov	@r0,dpl
      0006F5 08               [12] 1782 	inc	r0
      0006F6 A6 83            [24] 1783 	mov	@r0,dph
      0006F8 15 81            [12] 1784 	dec	sp
      0006FA 15 81            [12] 1785 	dec	sp
      0006FC D0 02            [24] 1786 	pop	ar2
      0006FE D0 03            [24] 1787 	pop	ar3
      000700 D0 06            [24] 1788 	pop	ar6
      000702 D0 07            [24] 1789 	pop	ar7
      000704 E5*00            [12] 1790 	mov	a,_bp
      000706 24 06            [12] 1791 	add	a,#0x06
      000708 F8               [12] 1792 	mov	r0,a
      000709 E5*00            [12] 1793 	mov	a,_bp
      00070B 24 0C            [12] 1794 	add	a,#0x0c
      00070D F9               [12] 1795 	mov	r1,a
      00070E E7               [12] 1796 	mov	a,@r1
      00070F 26               [12] 1797 	add	a,@r0
      000710 FC               [12] 1798 	mov	r4,a
      000711 09               [12] 1799 	inc	r1
      000712 E7               [12] 1800 	mov	a,@r1
      000713 08               [12] 1801 	inc	r0
      000714 36               [12] 1802 	addc	a,@r0
      000715 FD               [12] 1803 	mov	r5,a
      000716 EC               [12] 1804 	mov	a,r4
      000717 24r02            [12] 1805 	add	a,#_u
      000719 F5 82            [12] 1806 	mov	dpl,a
      00071B ED               [12] 1807 	mov	a,r5
      00071C 34s04            [12] 1808 	addc	a,#(_u >> 8)
      00071E F5 83            [12] 1809 	mov	dph,a
      000720 E0               [24] 1810 	movx	a,@dptr
      000721 FD               [12] 1811 	mov	r5,a
      000722 E5*00            [12] 1812 	mov	a,_bp
      000724 24 05            [12] 1813 	add	a,#0x05
      000726 F8               [12] 1814 	mov	r0,a
      000727 E5*00            [12] 1815 	mov	a,_bp
      000729 24 06            [12] 1816 	add	a,#0x06
      00072B F9               [12] 1817 	mov	r1,a
      00072C ED               [12] 1818 	mov	a,r5
      00072D 26               [12] 1819 	add	a,@r0
      00072E F7               [12] 1820 	mov	@r1,a
                                   1821 ;	life.c:171: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00072F 74 20            [12] 1822 	mov	a,#0x20
      000731 2E               [12] 1823 	add	a,r6
      000732 FC               [12] 1824 	mov	r4,a
      000733 E4               [12] 1825 	clr	a
      000734 3F               [12] 1826 	addc	a,r7
      000735 FD               [12] 1827 	mov	r5,a
      000736 C0 07            [24] 1828 	push	ar7
      000738 C0 06            [24] 1829 	push	ar6
      00073A C0 03            [24] 1830 	push	ar3
      00073C C0 02            [24] 1831 	push	ar2
      00073E 74 20            [12] 1832 	mov	a,#0x20
      000740 C0 E0            [24] 1833 	push	acc
      000742 E4               [12] 1834 	clr	a
      000743 C0 E0            [24] 1835 	push	acc
      000745 8C 82            [24] 1836 	mov	dpl,r4
      000747 8D 83            [24] 1837 	mov	dph,r5
      000749 12r00r00         [24] 1838 	lcall	__modsint
      00074C AC 82            [24] 1839 	mov	r4,dpl
      00074E AD 83            [24] 1840 	mov	r5,dph
      000750 15 81            [12] 1841 	dec	sp
      000752 15 81            [12] 1842 	dec	sp
      000754 D0 02            [24] 1843 	pop	ar2
      000756 D0 03            [24] 1844 	pop	ar3
      000758 D0 06            [24] 1845 	pop	ar6
      00075A D0 07            [24] 1846 	pop	ar7
      00075C E5*00            [12] 1847 	mov	a,_bp
      00075E 24 0E            [12] 1848 	add	a,#0x0e
      000760 F8               [12] 1849 	mov	r0,a
      000761 A6 04            [24] 1850 	mov	@r0,ar4
      000763 ED               [12] 1851 	mov	a,r5
      000764 C4               [12] 1852 	swap	a
      000765 23               [12] 1853 	rl	a
      000766 54 E0            [12] 1854 	anl	a,#0xe0
      000768 C6               [12] 1855 	xch	a,@r0
      000769 C4               [12] 1856 	swap	a
      00076A 23               [12] 1857 	rl	a
      00076B C6               [12] 1858 	xch	a,@r0
      00076C 66               [12] 1859 	xrl	a,@r0
      00076D C6               [12] 1860 	xch	a,@r0
      00076E 54 E0            [12] 1861 	anl	a,#0xe0
      000770 C6               [12] 1862 	xch	a,@r0
      000771 66               [12] 1863 	xrl	a,@r0
      000772 08               [12] 1864 	inc	r0
      000773 F6               [12] 1865 	mov	@r0,a
      000774 E5*00            [12] 1866 	mov	a,_bp
      000776 24 0E            [12] 1867 	add	a,#0x0e
      000778 F8               [12] 1868 	mov	r0,a
      000779 E5*00            [12] 1869 	mov	a,_bp
      00077B 24 08            [12] 1870 	add	a,#0x08
      00077D F9               [12] 1871 	mov	r1,a
      00077E E7               [12] 1872 	mov	a,@r1
      00077F 26               [12] 1873 	add	a,@r0
      000780 FC               [12] 1874 	mov	r4,a
      000781 09               [12] 1875 	inc	r1
      000782 E7               [12] 1876 	mov	a,@r1
      000783 08               [12] 1877 	inc	r0
      000784 36               [12] 1878 	addc	a,@r0
      000785 FD               [12] 1879 	mov	r5,a
      000786 EC               [12] 1880 	mov	a,r4
      000787 24r02            [12] 1881 	add	a,#_u
      000789 F5 82            [12] 1882 	mov	dpl,a
      00078B ED               [12] 1883 	mov	a,r5
      00078C 34s04            [12] 1884 	addc	a,#(_u >> 8)
      00078E F5 83            [12] 1885 	mov	dph,a
      000790 E0               [24] 1886 	movx	a,@dptr
      000791 FD               [12] 1887 	mov	r5,a
      000792 E5*00            [12] 1888 	mov	a,_bp
      000794 24 06            [12] 1889 	add	a,#0x06
      000796 F8               [12] 1890 	mov	r0,a
      000797 E5*00            [12] 1891 	mov	a,_bp
      000799 24 06            [12] 1892 	add	a,#0x06
      00079B F9               [12] 1893 	mov	r1,a
      00079C ED               [12] 1894 	mov	a,r5
      00079D 26               [12] 1895 	add	a,@r0
      00079E F7               [12] 1896 	mov	@r1,a
                                   1897 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00079F E5*00            [12] 1898 	mov	a,_bp
      0007A1 24 0E            [12] 1899 	add	a,#0x0e
      0007A3 F8               [12] 1900 	mov	r0,a
      0007A4 E5*00            [12] 1901 	mov	a,_bp
      0007A6 24 0A            [12] 1902 	add	a,#0x0a
      0007A8 F9               [12] 1903 	mov	r1,a
      0007A9 E7               [12] 1904 	mov	a,@r1
      0007AA 26               [12] 1905 	add	a,@r0
      0007AB FC               [12] 1906 	mov	r4,a
      0007AC 09               [12] 1907 	inc	r1
      0007AD E7               [12] 1908 	mov	a,@r1
      0007AE 08               [12] 1909 	inc	r0
      0007AF 36               [12] 1910 	addc	a,@r0
      0007B0 FD               [12] 1911 	mov	r5,a
      0007B1 EC               [12] 1912 	mov	a,r4
      0007B2 24r02            [12] 1913 	add	a,#_u
      0007B4 F5 82            [12] 1914 	mov	dpl,a
      0007B6 ED               [12] 1915 	mov	a,r5
      0007B7 34s04            [12] 1916 	addc	a,#(_u >> 8)
      0007B9 F5 83            [12] 1917 	mov	dph,a
      0007BB E0               [24] 1918 	movx	a,@dptr
      0007BC FD               [12] 1919 	mov	r5,a
      0007BD E5*00            [12] 1920 	mov	a,_bp
      0007BF 24 06            [12] 1921 	add	a,#0x06
      0007C1 F8               [12] 1922 	mov	r0,a
      0007C2 E5*00            [12] 1923 	mov	a,_bp
      0007C4 24 06            [12] 1924 	add	a,#0x06
      0007C6 F9               [12] 1925 	mov	r1,a
      0007C7 ED               [12] 1926 	mov	a,r5
      0007C8 26               [12] 1927 	add	a,@r0
      0007C9 F7               [12] 1928 	mov	@r1,a
                                   1929 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007CA E5*00            [12] 1930 	mov	a,_bp
      0007CC 24 0E            [12] 1931 	add	a,#0x0e
      0007CE F8               [12] 1932 	mov	r0,a
      0007CF E5*00            [12] 1933 	mov	a,_bp
      0007D1 24 0C            [12] 1934 	add	a,#0x0c
      0007D3 F9               [12] 1935 	mov	r1,a
      0007D4 E7               [12] 1936 	mov	a,@r1
      0007D5 26               [12] 1937 	add	a,@r0
      0007D6 FC               [12] 1938 	mov	r4,a
      0007D7 09               [12] 1939 	inc	r1
      0007D8 E7               [12] 1940 	mov	a,@r1
      0007D9 08               [12] 1941 	inc	r0
      0007DA 36               [12] 1942 	addc	a,@r0
      0007DB FD               [12] 1943 	mov	r5,a
      0007DC EC               [12] 1944 	mov	a,r4
      0007DD 24r02            [12] 1945 	add	a,#_u
      0007DF F5 82            [12] 1946 	mov	dpl,a
      0007E1 ED               [12] 1947 	mov	a,r5
      0007E2 34s04            [12] 1948 	addc	a,#(_u >> 8)
      0007E4 F5 83            [12] 1949 	mov	dph,a
      0007E6 E0               [24] 1950 	movx	a,@dptr
      0007E7 FD               [12] 1951 	mov	r5,a
      0007E8 E5*00            [12] 1952 	mov	a,_bp
      0007EA 24 06            [12] 1953 	add	a,#0x06
      0007EC F8               [12] 1954 	mov	r0,a
      0007ED E5*00            [12] 1955 	mov	a,_bp
      0007EF 24 0E            [12] 1956 	add	a,#0x0e
      0007F1 F9               [12] 1957 	mov	r1,a
      0007F2 ED               [12] 1958 	mov	a,r5
      0007F3 26               [12] 1959 	add	a,@r0
      0007F4 F7               [12] 1960 	mov	@r1,a
                                   1961 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007F5 74 21            [12] 1962 	mov	a,#0x21
      0007F7 2E               [12] 1963 	add	a,r6
      0007F8 FE               [12] 1964 	mov	r6,a
      0007F9 E4               [12] 1965 	clr	a
      0007FA 3F               [12] 1966 	addc	a,r7
      0007FB FF               [12] 1967 	mov	r7,a
      0007FC C0 03            [24] 1968 	push	ar3
      0007FE C0 02            [24] 1969 	push	ar2
      000800 74 20            [12] 1970 	mov	a,#0x20
      000802 C0 E0            [24] 1971 	push	acc
      000804 E4               [12] 1972 	clr	a
      000805 C0 E0            [24] 1973 	push	acc
      000807 8E 82            [24] 1974 	mov	dpl,r6
      000809 8F 83            [24] 1975 	mov	dph,r7
      00080B 12r00r00         [24] 1976 	lcall	__modsint
      00080E AE 82            [24] 1977 	mov	r6,dpl
      000810 AF 83            [24] 1978 	mov	r7,dph
      000812 15 81            [12] 1979 	dec	sp
      000814 15 81            [12] 1980 	dec	sp
      000816 D0 02            [24] 1981 	pop	ar2
      000818 D0 03            [24] 1982 	pop	ar3
      00081A EF               [12] 1983 	mov	a,r7
      00081B C4               [12] 1984 	swap	a
      00081C 23               [12] 1985 	rl	a
      00081D 54 E0            [12] 1986 	anl	a,#0xe0
      00081F CE               [12] 1987 	xch	a,r6
      000820 C4               [12] 1988 	swap	a
      000821 23               [12] 1989 	rl	a
      000822 CE               [12] 1990 	xch	a,r6
      000823 6E               [12] 1991 	xrl	a,r6
      000824 CE               [12] 1992 	xch	a,r6
      000825 54 E0            [12] 1993 	anl	a,#0xe0
      000827 CE               [12] 1994 	xch	a,r6
      000828 6E               [12] 1995 	xrl	a,r6
      000829 FF               [12] 1996 	mov	r7,a
      00082A E5*00            [12] 1997 	mov	a,_bp
      00082C 24 08            [12] 1998 	add	a,#0x08
      00082E F8               [12] 1999 	mov	r0,a
      00082F E6               [12] 2000 	mov	a,@r0
      000830 2E               [12] 2001 	add	a,r6
      000831 FC               [12] 2002 	mov	r4,a
      000832 08               [12] 2003 	inc	r0
      000833 E6               [12] 2004 	mov	a,@r0
      000834 3F               [12] 2005 	addc	a,r7
      000835 FD               [12] 2006 	mov	r5,a
      000836 EC               [12] 2007 	mov	a,r4
      000837 24r02            [12] 2008 	add	a,#_u
      000839 F5 82            [12] 2009 	mov	dpl,a
      00083B ED               [12] 2010 	mov	a,r5
      00083C 34s04            [12] 2011 	addc	a,#(_u >> 8)
      00083E F5 83            [12] 2012 	mov	dph,a
      000840 E0               [24] 2013 	movx	a,@dptr
      000841 FD               [12] 2014 	mov	r5,a
      000842 E5*00            [12] 2015 	mov	a,_bp
      000844 24 0E            [12] 2016 	add	a,#0x0e
      000846 F8               [12] 2017 	mov	r0,a
      000847 E5*00            [12] 2018 	mov	a,_bp
      000849 24 0E            [12] 2019 	add	a,#0x0e
      00084B F9               [12] 2020 	mov	r1,a
      00084C ED               [12] 2021 	mov	a,r5
      00084D 26               [12] 2022 	add	a,@r0
      00084E F7               [12] 2023 	mov	@r1,a
                                   2024 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00084F E5*00            [12] 2025 	mov	a,_bp
      000851 24 0A            [12] 2026 	add	a,#0x0a
      000853 F8               [12] 2027 	mov	r0,a
      000854 E6               [12] 2028 	mov	a,@r0
      000855 2E               [12] 2029 	add	a,r6
      000856 FC               [12] 2030 	mov	r4,a
      000857 08               [12] 2031 	inc	r0
      000858 E6               [12] 2032 	mov	a,@r0
      000859 3F               [12] 2033 	addc	a,r7
      00085A FD               [12] 2034 	mov	r5,a
      00085B EC               [12] 2035 	mov	a,r4
      00085C 24r02            [12] 2036 	add	a,#_u
      00085E F5 82            [12] 2037 	mov	dpl,a
      000860 ED               [12] 2038 	mov	a,r5
      000861 34s04            [12] 2039 	addc	a,#(_u >> 8)
      000863 F5 83            [12] 2040 	mov	dph,a
      000865 E0               [24] 2041 	movx	a,@dptr
      000866 FD               [12] 2042 	mov	r5,a
      000867 E5*00            [12] 2043 	mov	a,_bp
      000869 24 0E            [12] 2044 	add	a,#0x0e
      00086B F8               [12] 2045 	mov	r0,a
      00086C ED               [12] 2046 	mov	a,r5
      00086D 26               [12] 2047 	add	a,@r0
      00086E FD               [12] 2048 	mov	r5,a
                                   2049 ;	life.c:180: y1 = 1; x1 = 1;
      00086F 90r0Cr08         [24] 2050 	mov	dptr,#_y1
      000872 74 01            [12] 2051 	mov	a,#0x01
      000874 F0               [24] 2052 	movx	@dptr,a
      000875 E4               [12] 2053 	clr	a
      000876 A3               [24] 2054 	inc	dptr
      000877 F0               [24] 2055 	movx	@dptr,a
      000878 90r0Cr06         [24] 2056 	mov	dptr,#_x1
      00087B 04               [12] 2057 	inc	a
      00087C F0               [24] 2058 	movx	@dptr,a
      00087D E4               [12] 2059 	clr	a
      00087E A3               [24] 2060 	inc	dptr
      00087F F0               [24] 2061 	movx	@dptr,a
                                   2062 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000880 E5*00            [12] 2063 	mov	a,_bp
      000882 24 0C            [12] 2064 	add	a,#0x0c
      000884 F8               [12] 2065 	mov	r0,a
      000885 E6               [12] 2066 	mov	a,@r0
      000886 2E               [12] 2067 	add	a,r6
      000887 FE               [12] 2068 	mov	r6,a
      000888 08               [12] 2069 	inc	r0
      000889 E6               [12] 2070 	mov	a,@r0
      00088A 3F               [12] 2071 	addc	a,r7
      00088B FF               [12] 2072 	mov	r7,a
      00088C EE               [12] 2073 	mov	a,r6
      00088D 24r02            [12] 2074 	add	a,#_u
      00088F F5 82            [12] 2075 	mov	dpl,a
      000891 EF               [12] 2076 	mov	a,r7
      000892 34s04            [12] 2077 	addc	a,#(_u >> 8)
      000894 F5 83            [12] 2078 	mov	dph,a
      000896 E0               [24] 2079 	movx	a,@dptr
      000897 2D               [12] 2080 	add	a,r5
      000898 FF               [12] 2081 	mov	r7,a
      000899 90r0Cr0F         [24] 2082 	mov	dptr,#_n
      00089C F0               [24] 2083 	movx	@dptr,a
                                   2084 ;	life.c:183: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      00089D E5*00            [12] 2085 	mov	a,_bp
      00089F 24 03            [12] 2086 	add	a,#0x03
      0008A1 F8               [12] 2087 	mov	r0,a
      0008A2 E6               [12] 2088 	mov	a,@r0
      0008A3 24r02            [12] 2089 	add	a,#_nu
      0008A5 FD               [12] 2090 	mov	r5,a
      0008A6 08               [12] 2091 	inc	r0
      0008A7 E6               [12] 2092 	mov	a,@r0
      0008A8 34s08            [12] 2093 	addc	a,#(_nu >> 8)
      0008AA FE               [12] 2094 	mov	r6,a
      0008AB BF 03 02         [24] 2095 	cjne	r7,#0x03,00374$
      0008AE 80 20            [24] 2096 	sjmp	00194$
      0008B0                       2097 00374$:
      0008B0 BF 02 19         [24] 2098 	cjne	r7,#0x02,00193$
      0008B3 A8*00            [24] 2099 	mov	r0,_bp
      0008B5 08               [12] 2100 	inc	r0
      0008B6 EA               [12] 2101 	mov	a,r2
      0008B7 26               [12] 2102 	add	a,@r0
      0008B8 FA               [12] 2103 	mov	r2,a
      0008B9 EB               [12] 2104 	mov	a,r3
      0008BA 08               [12] 2105 	inc	r0
      0008BB 36               [12] 2106 	addc	a,@r0
      0008BC FB               [12] 2107 	mov	r3,a
      0008BD EA               [12] 2108 	mov	a,r2
      0008BE 24r02            [12] 2109 	add	a,#_u
      0008C0 FA               [12] 2110 	mov	r2,a
      0008C1 EB               [12] 2111 	mov	a,r3
      0008C2 34s04            [12] 2112 	addc	a,#(_u >> 8)
      0008C4 FB               [12] 2113 	mov	r3,a
      0008C5 8A 82            [24] 2114 	mov	dpl,r2
      0008C7 8B 83            [24] 2115 	mov	dph,r3
      0008C9 E0               [24] 2116 	movx	a,@dptr
      0008CA 70 04            [24] 2117 	jnz	00194$
      0008CC                       2118 00193$:
                                   2119 ;	assignBit
      0008CC C2*00            [12] 2120 	clr	b0
      0008CE 80 02            [24] 2121 	sjmp	00195$
      0008D0                       2122 00194$:
                                   2123 ;	assignBit
      0008D0 D2*00            [12] 2124 	setb	b0
      0008D2                       2125 00195$:
      0008D2 A2*00            [12] 2126 	mov	c,b0
      0008D4 E4               [12] 2127 	clr	a
      0008D5 33               [12] 2128 	rlc	a
      0008D6 8D 82            [24] 2129 	mov	dpl,r5
      0008D8 8E 83            [24] 2130 	mov	dph,r6
      0008DA F0               [24] 2131 	movx	@dptr,a
                                   2132 ;	life.c:185: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      0008DB 90r0Cr04         [24] 2133 	mov	dptr,#_y
      0008DE E0               [24] 2134 	movx	a,@dptr
      0008DF FE               [12] 2135 	mov	r6,a
      0008E0 A3               [24] 2136 	inc	dptr
      0008E1 E0               [24] 2137 	movx	a,@dptr
      0008E2 C4               [12] 2138 	swap	a
      0008E3 23               [12] 2139 	rl	a
      0008E4 54 E0            [12] 2140 	anl	a,#0xe0
      0008E6 CE               [12] 2141 	xch	a,r6
      0008E7 C4               [12] 2142 	swap	a
      0008E8 23               [12] 2143 	rl	a
      0008E9 CE               [12] 2144 	xch	a,r6
      0008EA 6E               [12] 2145 	xrl	a,r6
      0008EB CE               [12] 2146 	xch	a,r6
      0008EC 54 E0            [12] 2147 	anl	a,#0xe0
      0008EE CE               [12] 2148 	xch	a,r6
      0008EF 6E               [12] 2149 	xrl	a,r6
      0008F0 FF               [12] 2150 	mov	r7,a
      0008F1 90r0Cr02         [24] 2151 	mov	dptr,#_x
      0008F4 E0               [24] 2152 	movx	a,@dptr
      0008F5 FC               [12] 2153 	mov	r4,a
      0008F6 A3               [24] 2154 	inc	dptr
      0008F7 E0               [24] 2155 	movx	a,@dptr
      0008F8 FD               [12] 2156 	mov	r5,a
      0008F9 EC               [12] 2157 	mov	a,r4
      0008FA 2E               [12] 2158 	add	a,r6
      0008FB FE               [12] 2159 	mov	r6,a
      0008FC ED               [12] 2160 	mov	a,r5
      0008FD 3F               [12] 2161 	addc	a,r7
      0008FE FF               [12] 2162 	mov	r7,a
      0008FF EE               [12] 2163 	mov	a,r6
      000900 24r02            [12] 2164 	add	a,#_pu
      000902 F5 82            [12] 2165 	mov	dpl,a
      000904 EF               [12] 2166 	mov	a,r7
      000905 34s00            [12] 2167 	addc	a,#(_pu >> 8)
      000907 F5 83            [12] 2168 	mov	dph,a
      000909 E0               [24] 2169 	movx	a,@dptr
      00090A FD               [12] 2170 	mov	r5,a
      00090B EE               [12] 2171 	mov	a,r6
      00090C 24r02            [12] 2172 	add	a,#_nu
      00090E F5 82            [12] 2173 	mov	dpl,a
      000910 EF               [12] 2174 	mov	a,r7
      000911 34s08            [12] 2175 	addc	a,#(_nu >> 8)
      000913 F5 83            [12] 2176 	mov	dph,a
      000915 E0               [24] 2177 	movx	a,@dptr
      000916 FF               [12] 2178 	mov	r7,a
      000917 ED               [12] 2179 	mov	a,r5
      000918 B5 07 02         [24] 2180 	cjne	a,ar7,00378$
      00091B 80 05            [24] 2181 	sjmp	00144$
      00091D                       2182 00378$:
      00091D 90r0Cr11         [24] 2183 	mov	dptr,#_cycle2
      000920 E4               [12] 2184 	clr	a
      000921 F0               [24] 2185 	movx	@dptr,a
      000922                       2186 00144$:
                                   2187 ;	life.c:186: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      000922 90r0Cr04         [24] 2188 	mov	dptr,#_y
      000925 E0               [24] 2189 	movx	a,@dptr
      000926 FE               [12] 2190 	mov	r6,a
      000927 A3               [24] 2191 	inc	dptr
      000928 E0               [24] 2192 	movx	a,@dptr
      000929 C4               [12] 2193 	swap	a
      00092A 23               [12] 2194 	rl	a
      00092B 54 E0            [12] 2195 	anl	a,#0xe0
      00092D CE               [12] 2196 	xch	a,r6
      00092E C4               [12] 2197 	swap	a
      00092F 23               [12] 2198 	rl	a
      000930 CE               [12] 2199 	xch	a,r6
      000931 6E               [12] 2200 	xrl	a,r6
      000932 CE               [12] 2201 	xch	a,r6
      000933 54 E0            [12] 2202 	anl	a,#0xe0
      000935 CE               [12] 2203 	xch	a,r6
      000936 6E               [12] 2204 	xrl	a,r6
      000937 FF               [12] 2205 	mov	r7,a
      000938 90r0Cr02         [24] 2206 	mov	dptr,#_x
      00093B E0               [24] 2207 	movx	a,@dptr
      00093C FC               [12] 2208 	mov	r4,a
      00093D A3               [24] 2209 	inc	dptr
      00093E E0               [24] 2210 	movx	a,@dptr
      00093F FD               [12] 2211 	mov	r5,a
      000940 EC               [12] 2212 	mov	a,r4
      000941 2E               [12] 2213 	add	a,r6
      000942 FE               [12] 2214 	mov	r6,a
      000943 ED               [12] 2215 	mov	a,r5
      000944 3F               [12] 2216 	addc	a,r7
      000945 FF               [12] 2217 	mov	r7,a
      000946 EE               [12] 2218 	mov	a,r6
      000947 24r02            [12] 2219 	add	a,#_u
      000949 F5 82            [12] 2220 	mov	dpl,a
      00094B EF               [12] 2221 	mov	a,r7
      00094C 34s04            [12] 2222 	addc	a,#(_u >> 8)
      00094E F5 83            [12] 2223 	mov	dph,a
      000950 E0               [24] 2224 	movx	a,@dptr
      000951 FD               [12] 2225 	mov	r5,a
      000952 EE               [12] 2226 	mov	a,r6
      000953 24r02            [12] 2227 	add	a,#_nu
      000955 F5 82            [12] 2228 	mov	dpl,a
      000957 EF               [12] 2229 	mov	a,r7
      000958 34s08            [12] 2230 	addc	a,#(_nu >> 8)
      00095A F5 83            [12] 2231 	mov	dph,a
      00095C E0               [24] 2232 	movx	a,@dptr
      00095D FF               [12] 2233 	mov	r7,a
      00095E ED               [12] 2234 	mov	a,r5
      00095F B5 07 02         [24] 2235 	cjne	a,ar7,00379$
      000962 80 05            [24] 2236 	sjmp	00173$
      000964                       2237 00379$:
      000964 90r0Cr10         [24] 2238 	mov	dptr,#_fixed
      000967 E4               [12] 2239 	clr	a
      000968 F0               [24] 2240 	movx	@dptr,a
      000969                       2241 00173$:
                                   2242 ;	life.c:161: for (x = 0; x < W; x++) {
      000969 90r0Cr02         [24] 2243 	mov	dptr,#_x
      00096C E0               [24] 2244 	movx	a,@dptr
      00096D 24 01            [12] 2245 	add	a,#0x01
      00096F F0               [24] 2246 	movx	@dptr,a
      000970 A3               [24] 2247 	inc	dptr
      000971 E0               [24] 2248 	movx	a,@dptr
      000972 34 00            [12] 2249 	addc	a,#0x00
      000974 F0               [24] 2250 	movx	@dptr,a
      000975 90r0Cr02         [24] 2251 	mov	dptr,#_x
      000978 E0               [24] 2252 	movx	a,@dptr
      000979 FE               [12] 2253 	mov	r6,a
      00097A A3               [24] 2254 	inc	dptr
      00097B E0               [24] 2255 	movx	a,@dptr
      00097C FF               [12] 2256 	mov	r7,a
      00097D C3               [12] 2257 	clr	c
      00097E EE               [12] 2258 	mov	a,r6
      00097F 94 20            [12] 2259 	subb	a,#0x20
      000981 EF               [12] 2260 	mov	a,r7
      000982 64 80            [12] 2261 	xrl	a,#0x80
      000984 94 80            [12] 2262 	subb	a,#0x80
      000986 50 03            [24] 2263 	jnc	00380$
      000988 02r05r9E         [24] 2264 	ljmp	00172$
      00098B                       2265 00380$:
                                   2266 ;	life.c:158: for (y = 0; y < H; y++) {
      00098B 90r0Cr04         [24] 2267 	mov	dptr,#_y
      00098E E0               [24] 2268 	movx	a,@dptr
      00098F 24 01            [12] 2269 	add	a,#0x01
      000991 F0               [24] 2270 	movx	@dptr,a
      000992 A3               [24] 2271 	inc	dptr
      000993 E0               [24] 2272 	movx	a,@dptr
      000994 34 00            [12] 2273 	addc	a,#0x00
      000996 F0               [24] 2274 	movx	@dptr,a
      000997 90r0Cr04         [24] 2275 	mov	dptr,#_y
      00099A E0               [24] 2276 	movx	a,@dptr
      00099B FE               [12] 2277 	mov	r6,a
      00099C A3               [24] 2278 	inc	dptr
      00099D E0               [24] 2279 	movx	a,@dptr
      00099E FF               [12] 2280 	mov	r7,a
      00099F C3               [12] 2281 	clr	c
      0009A0 EE               [12] 2282 	mov	a,r6
      0009A1 94 20            [12] 2283 	subb	a,#0x20
      0009A3 EF               [12] 2284 	mov	a,r7
      0009A4 64 80            [12] 2285 	xrl	a,#0x80
      0009A6 94 80            [12] 2286 	subb	a,#0x80
      0009A8 50 03            [24] 2287 	jnc	00381$
      0009AA 02r05r75         [24] 2288 	ljmp	00174$
      0009AD                       2289 00381$:
                                   2290 ;	life.c:190: memcpy(pu, u, sizeof (u));
      0009AD E4               [12] 2291 	clr	a
      0009AE C0 E0            [24] 2292 	push	acc
      0009B0 74 04            [12] 2293 	mov	a,#0x04
      0009B2 C0 E0            [24] 2294 	push	acc
      0009B4 74r02            [12] 2295 	mov	a,#_u
      0009B6 C0 E0            [24] 2296 	push	acc
      0009B8 74s04            [12] 2297 	mov	a,#(_u >> 8)
      0009BA C0 E0            [24] 2298 	push	acc
      0009BC E4               [12] 2299 	clr	a
      0009BD C0 E0            [24] 2300 	push	acc
      0009BF 90r00r02         [24] 2301 	mov	dptr,#_pu
      0009C2 75 F0 00         [24] 2302 	mov	b,#0x00
      0009C5 12r00r00         [24] 2303 	lcall	___memcpy
      0009C8 E5 81            [12] 2304 	mov	a,sp
      0009CA 24 FB            [12] 2305 	add	a,#0xfb
      0009CC F5 81            [12] 2306 	mov	sp,a
                                   2307 ;	life.c:191: memcpy(u, nu, sizeof (nu));
      0009CE E4               [12] 2308 	clr	a
      0009CF C0 E0            [24] 2309 	push	acc
      0009D1 74 04            [12] 2310 	mov	a,#0x04
      0009D3 C0 E0            [24] 2311 	push	acc
      0009D5 74r02            [12] 2312 	mov	a,#_nu
      0009D7 C0 E0            [24] 2313 	push	acc
      0009D9 74s08            [12] 2314 	mov	a,#(_nu >> 8)
      0009DB C0 E0            [24] 2315 	push	acc
      0009DD E4               [12] 2316 	clr	a
      0009DE C0 E0            [24] 2317 	push	acc
      0009E0 90r04r02         [24] 2318 	mov	dptr,#_u
      0009E3 75 F0 00         [24] 2319 	mov	b,#0x00
      0009E6 12r00r00         [24] 2320 	lcall	___memcpy
      0009E9 E5 81            [12] 2321 	mov	a,sp
      0009EB 24 FB            [12] 2322 	add	a,#0xfb
      0009ED F5 81            [12] 2323 	mov	sp,a
                                   2324 ;	life.c:225: if (fixed || cycle2) {
      0009EF 90r0Cr10         [24] 2325 	mov	dptr,#_fixed
      0009F2 E0               [24] 2326 	movx	a,@dptr
      0009F3 70 09            [24] 2327 	jnz	00106$
      0009F5 90r0Cr11         [24] 2328 	mov	dptr,#_cycle2
      0009F8 E0               [24] 2329 	movx	a,@dptr
      0009F9 70 03            [24] 2330 	jnz	00383$
      0009FB 02r05r51         [24] 2331 	ljmp	00181$
      0009FE                       2332 00383$:
      0009FE                       2333 00106$:
                                   2334 ;	life.c:226: printstr("DONE\r\n");
      0009FE 7Dr3C            [12] 2335 	mov	r5,#___str_6
      000A00 7Es00            [12] 2336 	mov	r6,#(___str_6 >> 8)
      000A02 7F 80            [12] 2337 	mov	r7,#0x80
                                   2338 ;	life.c:48: return;
      000A04                       2339 00177$:
                                   2340 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A04 8D 82            [24] 2341 	mov	dpl,r5
      000A06 8E 83            [24] 2342 	mov	dph,r6
      000A08 8F F0            [24] 2343 	mov	b,r7
      000A0A 12r00r00         [24] 2344 	lcall	__gptrget
      000A0D FC               [12] 2345 	mov	r4,a
      000A0E 60 10            [24] 2346 	jz	00151$
      000A10 7B 00            [12] 2347 	mov	r3,#0x00
      000A12 8C 82            [24] 2348 	mov	dpl,r4
      000A14 8B 83            [24] 2349 	mov	dph,r3
      000A16 12r00r00         [24] 2350 	lcall	_putchar
      000A19 0D               [12] 2351 	inc	r5
                                   2352 ;	life.c:226: printstr("DONE\r\n");
      000A1A BD 00 E7         [24] 2353 	cjne	r5,#0x00,00177$
      000A1D 0E               [12] 2354 	inc	r6
      000A1E 80 E4            [24] 2355 	sjmp	00177$
      000A20                       2356 00151$:
                                   2357 ;	life.c:227: (void)getchar();
      000A20 12r00r05         [24] 2358 	lcall	_getchar
                                   2359 ;	life.c:228: break;
      000A23                       2360 00109$:
                                   2361 ;	life.c:232: if (i1) {
      000A23 90r00r01         [24] 2362 	mov	dptr,#_i1
      000A26 E0               [24] 2363 	movx	a,@dptr
      000A27 60 25            [24] 2364 	jz	00187$
                                   2365 ;	life.c:233: printstr("BREAK\r\n");
      000A29 7Dr43            [12] 2366 	mov	r5,#___str_7
      000A2B 7Es00            [12] 2367 	mov	r6,#(___str_7 >> 8)
      000A2D 7F 80            [12] 2368 	mov	r7,#0x80
                                   2369 ;	life.c:48: return;
      000A2F                       2370 00184$:
                                   2371 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A2F 8D 82            [24] 2372 	mov	dpl,r5
      000A31 8E 83            [24] 2373 	mov	dph,r6
      000A33 8F F0            [24] 2374 	mov	b,r7
      000A35 12r00r00         [24] 2375 	lcall	__gptrget
      000A38 FC               [12] 2376 	mov	r4,a
      000A39 60 10            [24] 2377 	jz	00153$
      000A3B 7B 00            [12] 2378 	mov	r3,#0x00
      000A3D 8C 82            [24] 2379 	mov	dpl,r4
      000A3F 8B 83            [24] 2380 	mov	dph,r3
      000A41 12r00r00         [24] 2381 	lcall	_putchar
      000A44 0D               [12] 2382 	inc	r5
                                   2383 ;	life.c:233: printstr("BREAK\r\n");
      000A45 BD 00 E7         [24] 2384 	cjne	r5,#0x00,00184$
      000A48 0E               [12] 2385 	inc	r6
      000A49 80 E4            [24] 2386 	sjmp	00184$
      000A4B                       2387 00153$:
                                   2388 ;	life.c:234: (void)getchar();
      000A4B 12r00r05         [24] 2389 	lcall	_getchar
      000A4E                       2390 00187$:
                                   2391 ;	life.c:203: for (i0 = 0; !i0; ) {
      000A4E 90r00r00         [24] 2392 	mov	dptr,#_i0
      000A51 E0               [24] 2393 	movx	a,@dptr
      000A52 70 03            [24] 2394 	jnz	00389$
      000A54 02r02rB6         [24] 2395 	ljmp	00186$
      000A57                       2396 00389$:
                                   2397 ;	life.c:238: EA = 0;
                                   2398 ;	assignBit
      000A57 C2 AF            [12] 2399 	clr	_EA
                                   2400 ;	life.c:240: printstr("TERM\r\n");
      000A59 7Dr4B            [12] 2401 	mov	r5,#___str_8
      000A5B 7Es00            [12] 2402 	mov	r6,#(___str_8 >> 8)
      000A5D 7F 80            [12] 2403 	mov	r7,#0x80
                                   2404 ;	life.c:48: return;
      000A5F                       2405 00189$:
                                   2406 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A5F 8D 82            [24] 2407 	mov	dpl,r5
      000A61 8E 83            [24] 2408 	mov	dph,r6
      000A63 8F F0            [24] 2409 	mov	b,r7
      000A65 12r00r00         [24] 2410 	lcall	__gptrget
      000A68 FC               [12] 2411 	mov	r4,a
      000A69 60 10            [24] 2412 	jz	00155$
      000A6B 7B 00            [12] 2413 	mov	r3,#0x00
      000A6D 8C 82            [24] 2414 	mov	dpl,r4
      000A6F 8B 83            [24] 2415 	mov	dph,r3
      000A71 12r00r00         [24] 2416 	lcall	_putchar
      000A74 0D               [12] 2417 	inc	r5
                                   2418 ;	life.c:240: printstr("TERM\r\n");
      000A75 BD 00 E7         [24] 2419 	cjne	r5,#0x00,00189$
      000A78 0E               [12] 2420 	inc	r6
      000A79 80 E4            [24] 2421 	sjmp	00189$
      000A7B                       2422 00155$:
                                   2423 ;	life.c:241: (void)getchar();
      000A7B 12r00r05         [24] 2424 	lcall	_getchar
                                   2425 ;	life.c:245: __endasm;
      000A7E 02 00 00         [24] 2426 	ljmp	0
                                   2427 ;	life.c:246: }
      000A81 85*00 81         [24] 2428 	mov	sp,_bp
      000A84 D0*00            [24] 2429 	pop	_bp
      000A86 22               [24] 2430 	ret
                                   2431 	.area CSEG    (CODE)
                                   2432 	.area CONST   (CODE)
      000000                       2433 _digits:
      000000 30                    2434 	.db #0x30	; 48	'0'
      000001 31                    2435 	.db #0x31	; 49	'1'
      000002 32                    2436 	.db #0x32	; 50	'2'
      000003 33                    2437 	.db #0x33	; 51	'3'
      000004 34                    2438 	.db #0x34	; 52	'4'
      000005 35                    2439 	.db #0x35	; 53	'5'
      000006 36                    2440 	.db #0x36	; 54	'6'
      000007 37                    2441 	.db #0x37	; 55	'7'
      000008 38                    2442 	.db #0x38	; 56	'8'
      000009 39                    2443 	.db #0x39	; 57	'9'
      00000A 61                    2444 	.db #0x61	; 97	'a'
      00000B 62                    2445 	.db #0x62	; 98	'b'
      00000C 63                    2446 	.db #0x63	; 99	'c'
      00000D 64                    2447 	.db #0x64	; 100	'd'
      00000E 65                    2448 	.db #0x65	; 101	'e'
      00000F 66                    2449 	.db #0x66	; 102	'f'
                                   2450 	.area CONST   (CODE)
      000010                       2451 ___str_0:
      000010 1B                    2452 	.db 0x1b
      000011 5B 32 4A              2453 	.ascii "[2J"
      000014 1B                    2454 	.db 0x1b
      000015 5B 6D                 2455 	.ascii "[m"
      000017 00                    2456 	.db 0x00
                                   2457 	.area CSEG    (CODE)
                                   2458 	.area CONST   (CODE)
      000018                       2459 ___str_1:
      000018 0D                    2460 	.db 0x0d
      000019 0A                    2461 	.db 0x0a
      00001A 00                    2462 	.db 0x00
                                   2463 	.area CSEG    (CODE)
                                   2464 	.area CONST   (CODE)
      00001B                       2465 ___str_2:
      00001B 4C 4F 41 44 20 3C     2466 	.ascii "LOAD <"
      000021 00                    2467 	.db 0x00
                                   2468 	.area CSEG    (CODE)
                                   2469 	.area CONST   (CODE)
      000022                       2470 ___str_3:
      000022 3E                    2471 	.ascii ">"
      000023 0D                    2472 	.db 0x0d
      000024 0A                    2473 	.db 0x0a
      000025 00                    2474 	.db 0x00
                                   2475 	.area CSEG    (CODE)
      000A87                       2476 _busy:
      000A87 5C                    2477 	.db #0x5c	; 92
      000A88 7C                    2478 	.db #0x7c	; 124
      000A89 2F                    2479 	.db #0x2f	; 47
      000A8A 2D                    2480 	.db #0x2d	; 45
                                   2481 	.area CONST   (CODE)
      000026                       2482 ___str_4:
      000026 1B                    2483 	.db 0x1b
      000027 5B 32 4A              2484 	.ascii "[2J"
      00002A 1B                    2485 	.db 0x1b
      00002B 5B 6D 49 4E 49 54     2486 	.ascii "[mINIT"
      000031 0D                    2487 	.db 0x0d
      000032 0A                    2488 	.db 0x0a
      000033 00                    2489 	.db 0x00
                                   2490 	.area CSEG    (CODE)
                                   2491 	.area CONST   (CODE)
      000034                       2492 ___str_5:
      000034 52 45 41 44 59        2493 	.ascii "READY"
      000039 0D                    2494 	.db 0x0d
      00003A 0A                    2495 	.db 0x0a
      00003B 00                    2496 	.db 0x00
                                   2497 	.area CSEG    (CODE)
                                   2498 	.area CONST   (CODE)
      00003C                       2499 ___str_6:
      00003C 44 4F 4E 45           2500 	.ascii "DONE"
      000040 0D                    2501 	.db 0x0d
      000041 0A                    2502 	.db 0x0a
      000042 00                    2503 	.db 0x00
                                   2504 	.area CSEG    (CODE)
                                   2505 	.area CONST   (CODE)
      000043                       2506 ___str_7:
      000043 42 52 45 41 4B        2507 	.ascii "BREAK"
      000048 0D                    2508 	.db 0x0d
      000049 0A                    2509 	.db 0x0a
      00004A 00                    2510 	.db 0x00
                                   2511 	.area CSEG    (CODE)
                                   2512 	.area CONST   (CODE)
      00004B                       2513 ___str_8:
      00004B 54 45 52 4D           2514 	.ascii "TERM"
      00004F 0D                    2515 	.db 0x0d
      000050 0A                    2516 	.db 0x0a
      000051 00                    2517 	.db 0x00
                                   2518 	.area CSEG    (CODE)
                                   2519 	.area XINIT   (CODE)
                                   2520 	.area CABS    (ABS,CODE)
