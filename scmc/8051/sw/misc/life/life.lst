                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable bit register bank
                                    284 ;--------------------------------------------------------
                                    285 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        286 bits:
      000000                        287 	.ds 1
                           008000   288 	b0 = bits[0]
                           008100   289 	b1 = bits[1]
                           008200   290 	b2 = bits[2]
                           008300   291 	b3 = bits[3]
                           008400   292 	b4 = bits[4]
                           008500   293 	b5 = bits[5]
                           008600   294 	b6 = bits[6]
                           008700   295 	b7 = bits[7]
                                    296 ;--------------------------------------------------------
                                    297 ; internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area DSEG    (DATA)
                                    300 ;--------------------------------------------------------
                                    301 ; overlayable items in internal ram 
                                    302 ;--------------------------------------------------------
                                    303 ;--------------------------------------------------------
                                    304 ; Stack segment in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 	.area	SSEG
      000000                        307 __start__stack:
      000000                        308 	.ds	1
                                    309 
                                    310 ;--------------------------------------------------------
                                    311 ; indirectly addressable internal ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area ISEG    (DATA)
      000000                        314 _digits:
      000000                        315 	.ds 16
      000010                        316 _i0:
      000010                        317 	.ds 1
      000011                        318 _i1:
      000011                        319 	.ds 1
      000012                        320 _x:
      000012                        321 	.ds 2
      000014                        322 _y:
      000014                        323 	.ds 2
      000016                        324 _j:
      000016                        325 	.ds 2
      000018                        326 _c:
      000018                        327 	.ds 2
      00001A                        328 _bstep:
      00001A                        329 	.ds 1
      00001B                        330 _n:
      00001B                        331 	.ds 1
      00001C                        332 _fixed:
      00001C                        333 	.ds 1
      00001D                        334 _cycle2:
      00001D                        335 	.ds 1
      00001E                        336 _x1:
      00001E                        337 	.ds 2
      000020                        338 _y1:
      000020                        339 	.ds 2
      000022                        340 _generation:
      000022                        341 	.ds 4
      000026                        342 _busy:
      000026                        343 	.ds 4
                                    344 ;--------------------------------------------------------
                                    345 ; absolute internal ram data
                                    346 ;--------------------------------------------------------
                                    347 	.area IABS    (ABS,DATA)
                                    348 	.area IABS    (ABS,DATA)
                                    349 ;--------------------------------------------------------
                                    350 ; bit data
                                    351 ;--------------------------------------------------------
                                    352 	.area BSEG    (BIT)
                                    353 ;--------------------------------------------------------
                                    354 ; paged external ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area PSEG    (PAG,XDATA)
                                    357 ;--------------------------------------------------------
                                    358 ; external ram data
                                    359 ;--------------------------------------------------------
                                    360 	.area XSEG    (XDATA)
      000000                        361 _pu:
      000000                        362 	.ds 2048
      000800                        363 _u:
      000800                        364 	.ds 2048
      001000                        365 _nu:
      001000                        366 	.ds 2048
                                    367 ;--------------------------------------------------------
                                    368 ; absolute external ram data
                                    369 ;--------------------------------------------------------
                                    370 	.area XABS    (ABS,XDATA)
                                    371 ;--------------------------------------------------------
                                    372 ; external initialized ram data
                                    373 ;--------------------------------------------------------
                                    374 	.area XISEG   (XDATA)
                                    375 	.area HOME    (CODE)
                                    376 	.area GSINIT0 (CODE)
                                    377 	.area GSINIT1 (CODE)
                                    378 	.area GSINIT2 (CODE)
                                    379 	.area GSINIT3 (CODE)
                                    380 	.area GSINIT4 (CODE)
                                    381 	.area GSINIT5 (CODE)
                                    382 	.area GSINIT  (CODE)
                                    383 	.area GSFINAL (CODE)
                                    384 	.area CSEG    (CODE)
                                    385 ;--------------------------------------------------------
                                    386 ; interrupt vector 
                                    387 ;--------------------------------------------------------
                                    388 	.area HOME    (CODE)
      000000                        389 __interrupt_vect:
      000000 02r00r00         [24]  390 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  391 	ljmp	_int0
      000006                        392 	.ds	5
      00000B 32               [24]  393 	reti
      00000C                        394 	.ds	7
      000013 02r00r1A         [24]  395 	ljmp	_int1
                                    396 ;--------------------------------------------------------
                                    397 ; global & static initialisations
                                    398 ;--------------------------------------------------------
                                    399 	.area HOME    (CODE)
                                    400 	.area GSINIT  (CODE)
                                    401 	.area GSFINAL (CODE)
                                    402 	.area GSINIT  (CODE)
                                    403 	.globl __sdcc_gsinit_startup
                                    404 	.globl __sdcc_program_startup
                                    405 	.globl __start__stack
                                    406 	.globl __mcs51_genXINIT
                                    407 	.globl __mcs51_genXRAMCLEAR
                                    408 	.globl __mcs51_genRAMCLEAR
                                    409 ;	life.c:24: __idata static const char digits[16] = {
      000000 78r00            [12]  410 	mov	r0,#_digits
      000002 76 30            [12]  411 	mov	@r0,#0x30
      000004 78r01            [12]  412 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  413 	mov	@r0,#0x31
      000008 78r02            [12]  414 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  415 	mov	@r0,#0x32
      00000C 78r03            [12]  416 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  417 	mov	@r0,#0x33
      000010 78r04            [12]  418 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  419 	mov	@r0,#0x34
      000014 78r05            [12]  420 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  421 	mov	@r0,#0x35
      000018 78r06            [12]  422 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  423 	mov	@r0,#0x36
      00001C 78r07            [12]  424 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  425 	mov	@r0,#0x37
      000020 78r08            [12]  426 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  427 	mov	@r0,#0x38
      000024 78r09            [12]  428 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  429 	mov	@r0,#0x39
      000028 78r0A            [12]  430 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  431 	mov	@r0,#0x41
      00002C 78r0B            [12]  432 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  433 	mov	@r0,#0x42
      000030 78r0C            [12]  434 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  435 	mov	@r0,#0x43
      000034 78r0D            [12]  436 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  437 	mov	@r0,#0x44
      000038 78r0E            [12]  438 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  439 	mov	@r0,#0x45
      00003C 78r0F            [12]  440 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  441 	mov	@r0,#0x46
                                    442 ;	life.c:152: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000040 78r26            [12]  443 	mov	r0,#_busy
      000042 76 5C            [12]  444 	mov	@r0,#0x5c
      000044 78r27            [12]  445 	mov	r0,#(_busy + 0x0001)
      000046 76 7C            [12]  446 	mov	@r0,#0x7c
      000048 78r28            [12]  447 	mov	r0,#(_busy + 0x0002)
      00004A 76 2F            [12]  448 	mov	@r0,#0x2f
      00004C 78r29            [12]  449 	mov	r0,#(_busy + 0x0003)
      00004E 76 2D            [12]  450 	mov	@r0,#0x2d
                                    451 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  452 	ljmp	__sdcc_program_startup
                                    453 ;--------------------------------------------------------
                                    454 ; Home
                                    455 ;--------------------------------------------------------
                                    456 	.area HOME    (CODE)
                                    457 	.area HOME    (CODE)
      000016                        458 __sdcc_program_startup:
      000016 02r02r23         [24]  459 	ljmp	_main
                                    460 ;	return from main will return to caller
                                    461 ;--------------------------------------------------------
                                    462 ; code
                                    463 ;--------------------------------------------------------
                                    464 	.area CSEG    (CODE)
                                    465 ;------------------------------------------------------------
                                    466 ;Allocation info for local variables in function 'putchar'
                                    467 ;------------------------------------------------------------
                                    468 ;c                         Allocated to registers 
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:7: int putchar(int c) __naked {
                                    471 ;	-----------------------------------------
                                    472 ;	 function putchar
                                    473 ;	-----------------------------------------
      000000                        474 _putchar:
                                    475 ;	naked function: no prologue.
                                    476 ;	life.c:12: __endasm;
      000000 E5 82            [12]  477 	mov	a, dpl
      000002 02 00 30         [24]  478 	ljmp	0x0030
                                    479 ;	life.c:13: }
                                    480 ;	naked function: no epilogue.
                                    481 ;------------------------------------------------------------
                                    482 ;Allocation info for local variables in function 'getchar'
                                    483 ;------------------------------------------------------------
                                    484 ;	life.c:15: int getchar(void) __naked {
                                    485 ;	-----------------------------------------
                                    486 ;	 function getchar
                                    487 ;	-----------------------------------------
      000005                        488 _getchar:
                                    489 ;	naked function: no prologue.
                                    490 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  491 	lcall	0x0032
      000008 F5 82            [12]  492 	mov	dpl, a
      00000A 75 83 00         [24]  493 	mov	dph, #0
      00000D 22               [24]  494 	ret
                                    495 ;	life.c:22: }
                                    496 ;	naked function: no epilogue.
                                    497 ;------------------------------------------------------------
                                    498 ;Allocation info for local variables in function 'int0'
                                    499 ;------------------------------------------------------------
                                    500 ;	life.c:53: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    501 ;	-----------------------------------------
                                    502 ;	 function int0
                                    503 ;	-----------------------------------------
      00000E                        504 _int0:
                           00000F   505 	ar7 = 0x0f
                           00000E   506 	ar6 = 0x0e
                           00000D   507 	ar5 = 0x0d
                           00000C   508 	ar4 = 0x0c
                           00000B   509 	ar3 = 0x0b
                           00000A   510 	ar2 = 0x0a
                           000009   511 	ar1 = 0x09
                           000008   512 	ar0 = 0x08
      00000E C0 D0            [24]  513 	push	psw
      000010 75 D0 08         [24]  514 	mov	psw,#0x08
                                    515 ;	life.c:54: i0 = 1;
      000013 78r10            [12]  516 	mov	r0,#_i0
      000015 76 01            [12]  517 	mov	@r0,#0x01
                                    518 ;	life.c:55: }
      000017 D0 D0            [24]  519 	pop	psw
      000019 32               [24]  520 	reti
                                    521 ;	eliminated unneeded push/pop dpl
                                    522 ;	eliminated unneeded push/pop dph
                                    523 ;	eliminated unneeded push/pop b
                                    524 ;	eliminated unneeded push/pop acc
                                    525 ;------------------------------------------------------------
                                    526 ;Allocation info for local variables in function 'int1'
                                    527 ;------------------------------------------------------------
                                    528 ;	life.c:57: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    529 ;	-----------------------------------------
                                    530 ;	 function int1
                                    531 ;	-----------------------------------------
      00001A                        532 _int1:
      00001A C0 D0            [24]  533 	push	psw
      00001C 75 D0 08         [24]  534 	mov	psw,#0x08
                                    535 ;	life.c:58: i1 = 1;
      00001F 78r11            [12]  536 	mov	r0,#_i1
      000021 76 01            [12]  537 	mov	@r0,#0x01
                                    538 ;	life.c:59: }
      000023 D0 D0            [24]  539 	pop	psw
      000025 32               [24]  540 	reti
                                    541 ;	eliminated unneeded push/pop dpl
                                    542 ;	eliminated unneeded push/pop dph
                                    543 ;	eliminated unneeded push/pop b
                                    544 ;	eliminated unneeded push/pop acc
                                    545 ;------------------------------------------------------------
                                    546 ;Allocation info for local variables in function 'show'
                                    547 ;------------------------------------------------------------
                                    548 ;hdr                       Allocated to registers r7 
                                    549 ;__1966080005              Allocated to registers 
                                    550 ;s                         Allocated to registers r5 r6 r7 
                                    551 ;__1310720001              Allocated to registers r6 r7 
                                    552 ;a                         Allocated to registers 
                                    553 ;__1310720003              Allocated to registers r6 r7 
                                    554 ;a                         Allocated to registers 
                                    555 ;__1966080008              Allocated to registers 
                                    556 ;s                         Allocated to registers r5 r6 r7 
                                    557 ;__2621440011              Allocated to registers 
                                    558 ;s                         Allocated to registers r5 r6 r7 
                                    559 ;------------------------------------------------------------
                                    560 ;	life.c:95: void show(char hdr) {
                                    561 ;	-----------------------------------------
                                    562 ;	 function show
                                    563 ;	-----------------------------------------
      000026                        564 _show:
                           000007   565 	ar7 = 0x07
                           000006   566 	ar6 = 0x06
                           000005   567 	ar5 = 0x05
                           000004   568 	ar4 = 0x04
                           000003   569 	ar3 = 0x03
                           000002   570 	ar2 = 0x02
                           000001   571 	ar1 = 0x01
                           000000   572 	ar0 = 0x00
                                    573 ;	life.c:96: if (hdr) {
      000026 E5 82            [12]  574 	mov	a,dpl
      000028 FF               [12]  575 	mov	r7,a
      000029 70 03            [24]  576 	jnz	00190$
      00002B 02r01r7E         [24]  577 	ljmp	00102$
      00002E                        578 00190$:
                                    579 ;	life.c:97: printstr("\033[2J\033[m");
      00002E 7Dr00            [12]  580 	mov	r5,#___str_0
      000030 7Es00            [12]  581 	mov	r6,#(___str_0 >> 8)
      000032 7F 80            [12]  582 	mov	r7,#0x80
                                    583 ;	life.c:48: return;
      000034                        584 00121$:
                                    585 ;	life.c:46: for (; *s; s++) putchar(*s);
      000034 8D 82            [24]  586 	mov	dpl,r5
      000036 8E 83            [24]  587 	mov	dph,r6
      000038 8F F0            [24]  588 	mov	b,r7
      00003A 12r00r00         [24]  589 	lcall	__gptrget
      00003D FC               [12]  590 	mov	r4,a
      00003E 60 10            [24]  591 	jz	00109$
      000040 7B 00            [12]  592 	mov	r3,#0x00
      000042 8C 82            [24]  593 	mov	dpl,r4
      000044 8B 83            [24]  594 	mov	dph,r3
      000046 12r00r00         [24]  595 	lcall	_putchar
      000049 0D               [12]  596 	inc	r5
                                    597 ;	life.c:97: printstr("\033[2J\033[m");
      00004A BD 00 E7         [24]  598 	cjne	r5,#0x00,00121$
      00004D 0E               [12]  599 	inc	r6
      00004E 80 E4            [24]  600 	sjmp	00121$
      000050                        601 00109$:
                                    602 ;	life.c:89: print16x(generation[1]);
      000050 78r24            [12]  603 	mov	r0,#(_generation + 0x0002)
      000052 86 06            [24]  604 	mov	ar6,@r0
      000054 08               [12]  605 	inc	r0
                                    606 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000055 E6               [12]  607 	mov	a,@r0
      000056 FF               [12]  608 	mov	r7,a
      000057 C4               [12]  609 	swap	a
      000058 54 0F            [12]  610 	anl	a,#0x0f
      00005A 30 E3 02         [24]  611 	jnb	acc.3,00193$
      00005D 44 F0            [12]  612 	orl	a,#0xf0
      00005F                        613 00193$:
      00005F FC               [12]  614 	mov	r4,a
      000060 33               [12]  615 	rlc	a
      000061 95 E0            [12]  616 	subb	a,acc
      000063 53 04 0F         [24]  617 	anl	ar4,#0x0f
      000066 EC               [12]  618 	mov	a,r4
      000067 24r00            [12]  619 	add	a,#_digits
      000069 F9               [12]  620 	mov	r1,a
      00006A 87 05            [24]  621 	mov	ar5,@r1
      00006C 7C 00            [12]  622 	mov	r4,#0x00
      00006E 8D 82            [24]  623 	mov	dpl,r5
      000070 8C 83            [24]  624 	mov	dph,r4
      000072 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000075 8F 05            [24]  627 	mov	ar5,r7
      000077 53 05 0F         [24]  628 	anl	ar5,#0x0f
      00007A ED               [12]  629 	mov	a,r5
      00007B 24r00            [12]  630 	add	a,#_digits
      00007D F9               [12]  631 	mov	r1,a
      00007E 87 05            [24]  632 	mov	ar5,@r1
      000080 7C 00            [12]  633 	mov	r4,#0x00
      000082 8D 82            [24]  634 	mov	dpl,r5
      000084 8C 83            [24]  635 	mov	dph,r4
      000086 12r00r00         [24]  636 	lcall	_putchar
                                    637 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000089 8E 04            [24]  638 	mov	ar4,r6
      00008B EF               [12]  639 	mov	a,r7
      00008C C4               [12]  640 	swap	a
      00008D CC               [12]  641 	xch	a,r4
      00008E C4               [12]  642 	swap	a
      00008F 54 0F            [12]  643 	anl	a,#0x0f
      000091 6C               [12]  644 	xrl	a,r4
      000092 CC               [12]  645 	xch	a,r4
      000093 54 0F            [12]  646 	anl	a,#0x0f
      000095 CC               [12]  647 	xch	a,r4
      000096 6C               [12]  648 	xrl	a,r4
      000097 CC               [12]  649 	xch	a,r4
      000098 30 E3 02         [24]  650 	jnb	acc.3,00194$
      00009B 44 F0            [12]  651 	orl	a,#0xf0
      00009D                        652 00194$:
      00009D 53 04 0F         [24]  653 	anl	ar4,#0x0f
      0000A0 EC               [12]  654 	mov	a,r4
      0000A1 24r00            [12]  655 	add	a,#_digits
      0000A3 F9               [12]  656 	mov	r1,a
      0000A4 87 05            [24]  657 	mov	ar5,@r1
      0000A6 7C 00            [12]  658 	mov	r4,#0x00
      0000A8 8D 82            [24]  659 	mov	dpl,r5
      0000AA 8C 83            [24]  660 	mov	dph,r4
      0000AC 12r00r00         [24]  661 	lcall	_putchar
                                    662 ;	life.c:40: putchar(digits[a & 0xf]);
      0000AF 53 06 0F         [24]  663 	anl	ar6,#0x0f
      0000B2 EE               [12]  664 	mov	a,r6
      0000B3 24r00            [12]  665 	add	a,#_digits
      0000B5 F9               [12]  666 	mov	r1,a
      0000B6 87 07            [24]  667 	mov	ar7,@r1
      0000B8 7E 00            [12]  668 	mov	r6,#0x00
      0000BA 8F 82            [24]  669 	mov	dpl,r7
      0000BC 8E 83            [24]  670 	mov	dph,r6
      0000BE 12r00r00         [24]  671 	lcall	_putchar
                                    672 ;	life.c:90: print16x(generation[0]);
      0000C1 78r22            [12]  673 	mov	r0,#_generation
      0000C3 86 06            [24]  674 	mov	ar6,@r0
      0000C5 08               [12]  675 	inc	r0
                                    676 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000C6 E6               [12]  677 	mov	a,@r0
      0000C7 FF               [12]  678 	mov	r7,a
      0000C8 C4               [12]  679 	swap	a
      0000C9 54 0F            [12]  680 	anl	a,#0x0f
      0000CB 30 E3 02         [24]  681 	jnb	acc.3,00195$
      0000CE 44 F0            [12]  682 	orl	a,#0xf0
      0000D0                        683 00195$:
      0000D0 FC               [12]  684 	mov	r4,a
      0000D1 33               [12]  685 	rlc	a
      0000D2 95 E0            [12]  686 	subb	a,acc
      0000D4 53 04 0F         [24]  687 	anl	ar4,#0x0f
      0000D7 EC               [12]  688 	mov	a,r4
      0000D8 24r00            [12]  689 	add	a,#_digits
      0000DA F9               [12]  690 	mov	r1,a
      0000DB 87 05            [24]  691 	mov	ar5,@r1
      0000DD 7C 00            [12]  692 	mov	r4,#0x00
      0000DF 8D 82            [24]  693 	mov	dpl,r5
      0000E1 8C 83            [24]  694 	mov	dph,r4
      0000E3 12r00r00         [24]  695 	lcall	_putchar
                                    696 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      0000E6 8F 05            [24]  697 	mov	ar5,r7
      0000E8 53 05 0F         [24]  698 	anl	ar5,#0x0f
      0000EB ED               [12]  699 	mov	a,r5
      0000EC 24r00            [12]  700 	add	a,#_digits
      0000EE F9               [12]  701 	mov	r1,a
      0000EF 87 05            [24]  702 	mov	ar5,@r1
      0000F1 7C 00            [12]  703 	mov	r4,#0x00
      0000F3 8D 82            [24]  704 	mov	dpl,r5
      0000F5 8C 83            [24]  705 	mov	dph,r4
      0000F7 12r00r00         [24]  706 	lcall	_putchar
                                    707 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000FA 8E 04            [24]  708 	mov	ar4,r6
      0000FC EF               [12]  709 	mov	a,r7
      0000FD C4               [12]  710 	swap	a
      0000FE CC               [12]  711 	xch	a,r4
      0000FF C4               [12]  712 	swap	a
      000100 54 0F            [12]  713 	anl	a,#0x0f
      000102 6C               [12]  714 	xrl	a,r4
      000103 CC               [12]  715 	xch	a,r4
      000104 54 0F            [12]  716 	anl	a,#0x0f
      000106 CC               [12]  717 	xch	a,r4
      000107 6C               [12]  718 	xrl	a,r4
      000108 CC               [12]  719 	xch	a,r4
      000109 30 E3 02         [24]  720 	jnb	acc.3,00196$
      00010C 44 F0            [12]  721 	orl	a,#0xf0
      00010E                        722 00196$:
      00010E 53 04 0F         [24]  723 	anl	ar4,#0x0f
      000111 EC               [12]  724 	mov	a,r4
      000112 24r00            [12]  725 	add	a,#_digits
      000114 F9               [12]  726 	mov	r1,a
      000115 87 05            [24]  727 	mov	ar5,@r1
      000117 7C 00            [12]  728 	mov	r4,#0x00
      000119 8D 82            [24]  729 	mov	dpl,r5
      00011B 8C 83            [24]  730 	mov	dph,r4
      00011D 12r00r00         [24]  731 	lcall	_putchar
                                    732 ;	life.c:40: putchar(digits[a & 0xf]);
      000120 53 06 0F         [24]  733 	anl	ar6,#0x0f
      000123 EE               [12]  734 	mov	a,r6
      000124 24r00            [12]  735 	add	a,#_digits
      000126 F9               [12]  736 	mov	r1,a
      000127 87 07            [24]  737 	mov	ar7,@r1
      000129 7E 00            [12]  738 	mov	r6,#0x00
      00012B 8F 82            [24]  739 	mov	dpl,r7
      00012D 8E 83            [24]  740 	mov	dph,r6
      00012F 12r00r00         [24]  741 	lcall	_putchar
                                    742 ;	life.c:99: printstr("\r\n");
      000132 7Dr08            [12]  743 	mov	r5,#___str_1
      000134 7Es00            [12]  744 	mov	r6,#(___str_1 >> 8)
      000136 7F 80            [12]  745 	mov	r7,#0x80
                                    746 ;	life.c:48: return;
      000138                        747 00124$:
                                    748 ;	life.c:46: for (; *s; s++) putchar(*s);
      000138 8D 82            [24]  749 	mov	dpl,r5
      00013A 8E 83            [24]  750 	mov	dph,r6
      00013C 8F F0            [24]  751 	mov	b,r7
      00013E 12r00r00         [24]  752 	lcall	__gptrget
      000141 FC               [12]  753 	mov	r4,a
      000142 60 10            [24]  754 	jz	00114$
      000144 7B 00            [12]  755 	mov	r3,#0x00
      000146 8C 82            [24]  756 	mov	dpl,r4
      000148 8B 83            [24]  757 	mov	dph,r3
      00014A 12r00r00         [24]  758 	lcall	_putchar
      00014D 0D               [12]  759 	inc	r5
                                    760 ;	life.c:99: printstr("\r\n");
      00014E BD 00 E7         [24]  761 	cjne	r5,#0x00,00124$
      000151 0E               [12]  762 	inc	r6
      000152 80 E4            [24]  763 	sjmp	00124$
      000154                        764 00114$:
                                    765 ;	life.c:82: generation[0]++;
      000154 78r22            [12]  766 	mov	r0,#_generation
      000156 86 06            [24]  767 	mov	ar6,@r0
      000158 08               [12]  768 	inc	r0
      000159 86 07            [24]  769 	mov	ar7,@r0
      00015B 0E               [12]  770 	inc	r6
      00015C BE 00 01         [24]  771 	cjne	r6,#0x00,00199$
      00015F 0F               [12]  772 	inc	r7
      000160                        773 00199$:
      000160 78r22            [12]  774 	mov	r0,#_generation
      000162 A6 06            [24]  775 	mov	@r0,ar6
      000164 08               [12]  776 	inc	r0
      000165 A6 07            [24]  777 	mov	@r0,ar7
                                    778 ;	life.c:83: if (!generation[0]) generation[1]++;
      000167 EE               [12]  779 	mov	a,r6
      000168 4F               [12]  780 	orl	a,r7
      000169 70 13            [24]  781 	jnz	00102$
      00016B 78r24            [12]  782 	mov	r0,#(_generation + 0x0002)
      00016D 86 06            [24]  783 	mov	ar6,@r0
      00016F 08               [12]  784 	inc	r0
      000170 86 07            [24]  785 	mov	ar7,@r0
      000172 0E               [12]  786 	inc	r6
      000173 BE 00 01         [24]  787 	cjne	r6,#0x00,00201$
      000176 0F               [12]  788 	inc	r7
      000177                        789 00201$:
      000177 78r24            [12]  790 	mov	r0,#(_generation + 0x0002)
      000179 A6 06            [24]  791 	mov	@r0,ar6
      00017B 08               [12]  792 	inc	r0
      00017C A6 07            [24]  793 	mov	@r0,ar7
                                    794 ;	life.c:100: updategen();
      00017E                        795 00102$:
                                    796 ;	life.c:103: for (x = 0; x < W; x++) {
      00017E 78r12            [12]  797 	mov	r0,#_x
      000180 E4               [12]  798 	clr	a
      000181 F6               [12]  799 	mov	@r0,a
      000182 08               [12]  800 	inc	r0
      000183 F6               [12]  801 	mov	@r0,a
      000184                        802 00131$:
                                    803 ;	life.c:104: for (y = 0; y < H; y++)
      000184 78r14            [12]  804 	mov	r0,#_y
      000186 E4               [12]  805 	clr	a
      000187 F6               [12]  806 	mov	@r0,a
      000188 08               [12]  807 	inc	r0
      000189 F6               [12]  808 	mov	@r0,a
      00018A                        809 00126$:
                                    810 ;	life.c:105: if (u[A2D(W, y, x)]) {
      00018A 78r14            [12]  811 	mov	r0,#_y
      00018C 86 06            [24]  812 	mov	ar6,@r0
      00018E 08               [12]  813 	inc	r0
      00018F E6               [12]  814 	mov	a,@r0
      000190 C4               [12]  815 	swap	a
      000191 23               [12]  816 	rl	a
      000192 54 E0            [12]  817 	anl	a,#0xe0
      000194 CE               [12]  818 	xch	a,r6
      000195 C4               [12]  819 	swap	a
      000196 23               [12]  820 	rl	a
      000197 CE               [12]  821 	xch	a,r6
      000198 6E               [12]  822 	xrl	a,r6
      000199 CE               [12]  823 	xch	a,r6
      00019A 54 E0            [12]  824 	anl	a,#0xe0
      00019C CE               [12]  825 	xch	a,r6
      00019D 6E               [12]  826 	xrl	a,r6
      00019E FF               [12]  827 	mov	r7,a
      00019F 78r12            [12]  828 	mov	r0,#_x
      0001A1 E6               [12]  829 	mov	a,@r0
      0001A2 2E               [12]  830 	add	a,r6
      0001A3 FE               [12]  831 	mov	r6,a
      0001A4 08               [12]  832 	inc	r0
      0001A5 E6               [12]  833 	mov	a,@r0
      0001A6 3F               [12]  834 	addc	a,r7
      0001A7 FF               [12]  835 	mov	r7,a
      0001A8 EE               [12]  836 	mov	a,r6
      0001A9 24r00            [12]  837 	add	a,#_u
      0001AB FE               [12]  838 	mov	r6,a
      0001AC EF               [12]  839 	mov	a,r7
      0001AD 34s08            [12]  840 	addc	a,#(_u >> 8)
      0001AF FF               [12]  841 	mov	r7,a
      0001B0 8E 82            [24]  842 	mov	dpl,r6
      0001B2 8F 83            [24]  843 	mov	dph,r7
      0001B4 E0               [24]  844 	movx	a,@dptr
      0001B5 60 0E            [24]  845 	jz	00104$
                                    846 ;	life.c:106: putchar('['); putchar(']');
      0001B7 90 00 5B         [24]  847 	mov	dptr,#0x005b
      0001BA 12r00r00         [24]  848 	lcall	_putchar
      0001BD 90 00 5D         [24]  849 	mov	dptr,#0x005d
      0001C0 12r00r00         [24]  850 	lcall	_putchar
      0001C3 80 0C            [24]  851 	sjmp	00127$
      0001C5                        852 00104$:
                                    853 ;	life.c:108: putchar('#'); putchar('#');
      0001C5 90 00 23         [24]  854 	mov	dptr,#0x0023
      0001C8 12r00r00         [24]  855 	lcall	_putchar
      0001CB 90 00 23         [24]  856 	mov	dptr,#0x0023
      0001CE 12r00r00         [24]  857 	lcall	_putchar
      0001D1                        858 00127$:
                                    859 ;	life.c:104: for (y = 0; y < H; y++)
      0001D1 78r14            [12]  860 	mov	r0,#_y
      0001D3 06               [12]  861 	inc	@r0
      0001D4 B6 00 02         [24]  862 	cjne	@r0,#0x00,00203$
      0001D7 08               [12]  863 	inc	r0
      0001D8 06               [12]  864 	inc	@r0
      0001D9                        865 00203$:
      0001D9 78r14            [12]  866 	mov	r0,#_y
      0001DB C3               [12]  867 	clr	c
      0001DC E6               [12]  868 	mov	a,@r0
      0001DD 94 40            [12]  869 	subb	a,#0x40
      0001DF 08               [12]  870 	inc	r0
      0001E0 E6               [12]  871 	mov	a,@r0
      0001E1 64 80            [12]  872 	xrl	a,#0x80
      0001E3 94 80            [12]  873 	subb	a,#0x80
      0001E5 40 A3            [24]  874 	jc	00126$
                                    875 ;	life.c:110: printstr("\r\n");
      0001E7 7Dr08            [12]  876 	mov	r5,#___str_1
      0001E9 7Es00            [12]  877 	mov	r6,#(___str_1 >> 8)
      0001EB 7F 80            [12]  878 	mov	r7,#0x80
                                    879 ;	life.c:48: return;
      0001ED                        880 00129$:
                                    881 ;	life.c:46: for (; *s; s++) putchar(*s);
      0001ED 8D 82            [24]  882 	mov	dpl,r5
      0001EF 8E 83            [24]  883 	mov	dph,r6
      0001F1 8F F0            [24]  884 	mov	b,r7
      0001F3 12r00r00         [24]  885 	lcall	__gptrget
      0001F6 FC               [12]  886 	mov	r4,a
      0001F7 60 10            [24]  887 	jz	00119$
      0001F9 7B 00            [12]  888 	mov	r3,#0x00
      0001FB 8C 82            [24]  889 	mov	dpl,r4
      0001FD 8B 83            [24]  890 	mov	dph,r3
      0001FF 12r00r00         [24]  891 	lcall	_putchar
      000202 0D               [12]  892 	inc	r5
                                    893 ;	life.c:110: printstr("\r\n");
      000203 BD 00 E7         [24]  894 	cjne	r5,#0x00,00129$
      000206 0E               [12]  895 	inc	r6
      000207 80 E4            [24]  896 	sjmp	00129$
      000209                        897 00119$:
                                    898 ;	life.c:103: for (x = 0; x < W; x++) {
      000209 78r12            [12]  899 	mov	r0,#_x
      00020B 06               [12]  900 	inc	@r0
      00020C B6 00 02         [24]  901 	cjne	@r0,#0x00,00207$
      00020F 08               [12]  902 	inc	r0
      000210 06               [12]  903 	inc	@r0
      000211                        904 00207$:
      000211 78r12            [12]  905 	mov	r0,#_x
      000213 C3               [12]  906 	clr	c
      000214 E6               [12]  907 	mov	a,@r0
      000215 94 20            [12]  908 	subb	a,#0x20
      000217 08               [12]  909 	inc	r0
      000218 E6               [12]  910 	mov	a,@r0
      000219 64 80            [12]  911 	xrl	a,#0x80
      00021B 94 80            [12]  912 	subb	a,#0x80
      00021D 50 03            [24]  913 	jnc	00208$
      00021F 02r01r84         [24]  914 	ljmp	00131$
      000222                        915 00208$:
                                    916 ;	life.c:113: return;
                                    917 ;	life.c:114: }
      000222 22               [24]  918 	ret
                                    919 ;------------------------------------------------------------
                                    920 ;Allocation info for local variables in function 'main'
                                    921 ;------------------------------------------------------------
                                    922 ;__2621440019              Allocated to registers 
                                    923 ;s                         Allocated to registers r5 r6 r7 
                                    924 ;__1310720013              Allocated to registers 
                                    925 ;s                         Allocated to registers r5 r6 r7 
                                    926 ;__1310720015              Allocated to registers r6 r7 
                                    927 ;a                         Allocated to registers r4 r5 
                                    928 ;__1310720017              Allocated to registers 
                                    929 ;s                         Allocated to registers r5 r6 r7 
                                    930 ;__2621440023              Allocated to registers 
                                    931 ;s                         Allocated to registers r5 r6 r7 
                                    932 ;__4587520027              Allocated to registers 
                                    933 ;s                         Allocated to registers r5 r6 r7 
                                    934 ;__3276800029              Allocated to registers 
                                    935 ;s                         Allocated to registers r5 r6 r7 
                                    936 ;__1310720031              Allocated to registers 
                                    937 ;s                         Allocated to registers r5 r6 r7 
                                    938 ;sloc0                     Allocated to stack - _bp +1
                                    939 ;sloc1                     Allocated to stack - _bp +2
                                    940 ;sloc2                     Allocated to stack - _bp +4
                                    941 ;sloc3                     Allocated to stack - _bp +6
                                    942 ;sloc4                     Allocated to stack - _bp +8
                                    943 ;sloc5                     Allocated to stack - _bp +10
                                    944 ;sloc6                     Allocated to stack - _bp +12
                                    945 ;------------------------------------------------------------
                                    946 ;	life.c:199: void main(void) {
                                    947 ;	-----------------------------------------
                                    948 ;	 function main
                                    949 ;	-----------------------------------------
      000223                        950 _main:
      000223 C0*00            [24]  951 	push	_bp
      000225 E5 81            [12]  952 	mov	a,sp
      000227 F5*00            [12]  953 	mov	_bp,a
      000229 24 0D            [12]  954 	add	a,#0x0d
      00022B F5 81            [12]  955 	mov	sp,a
                                    956 ;	life.c:200: IT0 = 1;
                                    957 ;	assignBit
      00022D D2 88            [12]  958 	setb	_IT0
                                    959 ;	life.c:201: IT1 = 1;
                                    960 ;	assignBit
      00022F D2 8A            [12]  961 	setb	_IT1
                                    962 ;	life.c:202: EX0 = 1;
                                    963 ;	assignBit
      000231 D2 A8            [12]  964 	setb	_EX0
                                    965 ;	life.c:203: EX1 = 1;
                                    966 ;	assignBit
      000233 D2 AA            [12]  967 	setb	_EX1
                                    968 ;	life.c:204: EA = 1;
                                    969 ;	assignBit
      000235 D2 AF            [12]  970 	setb	_EA
                                    971 ;	life.c:206: for (i0 = 0; !i0; ) {		
      000237 78r10            [12]  972 	mov	r0,#_i0
      000239 76 00            [12]  973 	mov	@r0,#0x00
      00023B                        974 00197$:
                                    975 ;	life.c:207: printstr("\033[2J\033[mINIT\r\n");
      00023B 7Dr16            [12]  976 	mov	r5,#___str_4
      00023D 7Es00            [12]  977 	mov	r6,#(___str_4 >> 8)
      00023F 7F 80            [12]  978 	mov	r7,#0x80
                                    979 ;	life.c:48: return;
      000241                        980 00168$:
                                    981 ;	life.c:46: for (; *s; s++) putchar(*s);
      000241 8D 82            [24]  982 	mov	dpl,r5
      000243 8E 83            [24]  983 	mov	dph,r6
      000245 8F F0            [24]  984 	mov	b,r7
      000247 12r00r00         [24]  985 	lcall	__gptrget
      00024A FC               [12]  986 	mov	r4,a
      00024B 60 10            [24]  987 	jz	00107$
      00024D 7B 00            [12]  988 	mov	r3,#0x00
      00024F 8C 82            [24]  989 	mov	dpl,r4
      000251 8B 83            [24]  990 	mov	dph,r3
      000253 12r00r00         [24]  991 	lcall	_putchar
      000256 0D               [12]  992 	inc	r5
                                    993 ;	life.c:208: while (1) {
      000257 BD 00 E7         [24]  994 	cjne	r5,#0x00,00168$
      00025A 0E               [12]  995 	inc	r6
      00025B 80 E4            [24]  996 	sjmp	00168$
      00025D                        997 00107$:
                                    998 ;	life.c:209: c = getchar();
      00025D 12r00r05         [24]  999 	lcall	_getchar
      000260 AE 82            [24] 1000 	mov	r6,dpl
      000262 AF 83            [24] 1001 	mov	r7,dph
      000264 78r18            [12] 1002 	mov	r0,#_c
      000266 A6 06            [24] 1003 	mov	@r0,ar6
      000268 08               [12] 1004 	inc	r0
      000269 A6 07            [24] 1005 	mov	@r0,ar7
                                   1006 ;	life.c:210: if (i0 || (c == (int)'T')) goto terminate;
      00026B 78r10            [12] 1007 	mov	r0,#_i0
      00026D E6               [12] 1008 	mov	a,@r0
      00026E 60 03            [24] 1009 	jz	00386$
      000270 02r09r70         [24] 1010 	ljmp	00127$
      000273                       1011 00386$:
      000273 BE 54 06         [24] 1012 	cjne	r6,#0x54,00387$
      000276 BF 00 03         [24] 1013 	cjne	r7,#0x00,00387$
      000279 02r09r70         [24] 1014 	ljmp	00127$
      00027C                       1015 00387$:
                                   1016 ;	life.c:211: if (c == (int)'L') break;
      00027C BE 4C DE         [24] 1017 	cjne	r6,#0x4c,00107$
      00027F BF 00 DB         [24] 1018 	cjne	r7,#0x00,00107$
                                   1019 ;	life.c:214: reload:
      000282                       1020 00109$:
                                   1021 ;	life.c:117: memset(u, 0, sizeof (u));
      000282 E4               [12] 1022 	clr	a
      000283 C0 E0            [24] 1023 	push	acc
      000285 74 08            [12] 1024 	mov	a,#0x08
      000287 C0 E0            [24] 1025 	push	acc
      000289 E4               [12] 1026 	clr	a
      00028A C0 E0            [24] 1027 	push	acc
      00028C 90r08r00         [24] 1028 	mov	dptr,#_u
      00028F 75 F0 00         [24] 1029 	mov	b,#0x00
      000292 12r00r00         [24] 1030 	lcall	_memset
      000295 15 81            [12] 1031 	dec	sp
      000297 15 81            [12] 1032 	dec	sp
      000299 15 81            [12] 1033 	dec	sp
                                   1034 ;	life.c:118: memset(pu, 0, sizeof (pu));
      00029B E4               [12] 1035 	clr	a
      00029C C0 E0            [24] 1036 	push	acc
      00029E 74 08            [12] 1037 	mov	a,#0x08
      0002A0 C0 E0            [24] 1038 	push	acc
      0002A2 E4               [12] 1039 	clr	a
      0002A3 C0 E0            [24] 1040 	push	acc
      0002A5 90r00r00         [24] 1041 	mov	dptr,#_pu
      0002A8 75 F0 00         [24] 1042 	mov	b,#0x00
      0002AB 12r00r00         [24] 1043 	lcall	_memset
      0002AE 15 81            [12] 1044 	dec	sp
      0002B0 15 81            [12] 1045 	dec	sp
      0002B2 15 81            [12] 1046 	dec	sp
                                   1047 ;	life.c:124: j = 0;
      0002B4 78r16            [12] 1048 	mov	r0,#_j
      0002B6 E4               [12] 1049 	clr	a
      0002B7 F6               [12] 1050 	mov	@r0,a
      0002B8 08               [12] 1051 	inc	r0
      0002B9 F6               [12] 1052 	mov	@r0,a
                                   1053 ;	life.c:126: printstr("LOAD <");
      0002BA 7Dr0B            [12] 1054 	mov	r5,#___str_2
      0002BC 7Es00            [12] 1055 	mov	r6,#(___str_2 >> 8)
      0002BE 7F 80            [12] 1056 	mov	r7,#0x80
                                   1057 ;	life.c:48: return;
      0002C0                       1058 00171$:
                                   1059 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002C0 8D 82            [24] 1060 	mov	dpl,r5
      0002C2 8E 83            [24] 1061 	mov	dph,r6
      0002C4 8F F0            [24] 1062 	mov	b,r7
      0002C6 12r00r00         [24] 1063 	lcall	__gptrget
      0002C9 FC               [12] 1064 	mov	r4,a
      0002CA 60 10            [24] 1065 	jz	00132$
      0002CC 7B 00            [12] 1066 	mov	r3,#0x00
      0002CE 8C 82            [24] 1067 	mov	dpl,r4
      0002D0 8B 83            [24] 1068 	mov	dph,r3
      0002D2 12r00r00         [24] 1069 	lcall	_putchar
      0002D5 0D               [12] 1070 	inc	r5
                                   1071 ;	life.c:126: printstr("LOAD <");
      0002D6 BD 00 E7         [24] 1072 	cjne	r5,#0x00,00171$
      0002D9 0E               [12] 1073 	inc	r6
      0002DA 80 E4            [24] 1074 	sjmp	00171$
      0002DC                       1075 00132$:
                                   1076 ;	life.c:128: for (y = 0; y < H; y++)
      0002DC 78r14            [12] 1077 	mov	r0,#_y
      0002DE E4               [12] 1078 	clr	a
      0002DF F6               [12] 1079 	mov	@r0,a
      0002E0 08               [12] 1080 	inc	r0
      0002E1 F6               [12] 1081 	mov	@r0,a
      0002E2                       1082 00175$:
                                   1083 ;	life.c:129: for (x = 0; x < W; x++) {
      0002E2 78r12            [12] 1084 	mov	r0,#_x
      0002E4 E4               [12] 1085 	clr	a
      0002E5 F6               [12] 1086 	mov	@r0,a
      0002E6 08               [12] 1087 	inc	r0
      0002E7 F6               [12] 1088 	mov	@r0,a
      0002E8                       1089 00173$:
                                   1090 ;	life.c:130: c = getchar();
      0002E8 12r00r05         [24] 1091 	lcall	_getchar
      0002EB AE 82            [24] 1092 	mov	r6,dpl
      0002ED AF 83            [24] 1093 	mov	r7,dph
      0002EF 78r18            [12] 1094 	mov	r0,#_c
      0002F1 A6 06            [24] 1095 	mov	@r0,ar6
      0002F3 08               [12] 1096 	inc	r0
      0002F4 A6 07            [24] 1097 	mov	@r0,ar7
                                   1098 ;	life.c:131: if (c == (int)'0') {
      0002F6 BE 30 37         [24] 1099 	cjne	r6,#0x30,00139$
      0002F9 BF 00 34         [24] 1100 	cjne	r7,#0x00,00139$
                                   1101 ;	life.c:132: u[A2D(W, y, x)] = 0;
      0002FC 78r14            [12] 1102 	mov	r0,#_y
      0002FE 86 04            [24] 1103 	mov	ar4,@r0
      000300 08               [12] 1104 	inc	r0
      000301 E6               [12] 1105 	mov	a,@r0
      000302 C4               [12] 1106 	swap	a
      000303 23               [12] 1107 	rl	a
      000304 54 E0            [12] 1108 	anl	a,#0xe0
      000306 CC               [12] 1109 	xch	a,r4
      000307 C4               [12] 1110 	swap	a
      000308 23               [12] 1111 	rl	a
      000309 CC               [12] 1112 	xch	a,r4
      00030A 6C               [12] 1113 	xrl	a,r4
      00030B CC               [12] 1114 	xch	a,r4
      00030C 54 E0            [12] 1115 	anl	a,#0xe0
      00030E CC               [12] 1116 	xch	a,r4
      00030F 6C               [12] 1117 	xrl	a,r4
      000310 FD               [12] 1118 	mov	r5,a
      000311 78r12            [12] 1119 	mov	r0,#_x
      000313 E6               [12] 1120 	mov	a,@r0
      000314 2C               [12] 1121 	add	a,r4
      000315 FC               [12] 1122 	mov	r4,a
      000316 08               [12] 1123 	inc	r0
      000317 E6               [12] 1124 	mov	a,@r0
      000318 3D               [12] 1125 	addc	a,r5
      000319 FD               [12] 1126 	mov	r5,a
      00031A EC               [12] 1127 	mov	a,r4
      00031B 24r00            [12] 1128 	add	a,#_u
      00031D F5 82            [12] 1129 	mov	dpl,a
      00031F ED               [12] 1130 	mov	a,r5
      000320 34s08            [12] 1131 	addc	a,#(_u >> 8)
      000322 F5 83            [12] 1132 	mov	dph,a
      000324 E4               [12] 1133 	clr	a
      000325 F0               [24] 1134 	movx	@dptr,a
                                   1135 ;	life.c:133: j++;
      000326 78r16            [12] 1136 	mov	r0,#_j
      000328 06               [12] 1137 	inc	@r0
      000329 B6 00 02         [24] 1138 	cjne	@r0,#0x00,00394$
      00032C 08               [12] 1139 	inc	r0
      00032D 06               [12] 1140 	inc	@r0
      00032E                       1141 00394$:
      00032E 80 43            [24] 1142 	sjmp	00174$
      000330                       1143 00139$:
                                   1144 ;	life.c:134: } else if (c == (int)'1') {
      000330 BE 31 38         [24] 1145 	cjne	r6,#0x31,00137$
      000333 BF 00 35         [24] 1146 	cjne	r7,#0x00,00137$
                                   1147 ;	life.c:135: u[A2D(W, y, x)] = 1;
      000336 78r14            [12] 1148 	mov	r0,#_y
      000338 86 04            [24] 1149 	mov	ar4,@r0
      00033A 08               [12] 1150 	inc	r0
      00033B E6               [12] 1151 	mov	a,@r0
      00033C C4               [12] 1152 	swap	a
      00033D 23               [12] 1153 	rl	a
      00033E 54 E0            [12] 1154 	anl	a,#0xe0
      000340 CC               [12] 1155 	xch	a,r4
      000341 C4               [12] 1156 	swap	a
      000342 23               [12] 1157 	rl	a
      000343 CC               [12] 1158 	xch	a,r4
      000344 6C               [12] 1159 	xrl	a,r4
      000345 CC               [12] 1160 	xch	a,r4
      000346 54 E0            [12] 1161 	anl	a,#0xe0
      000348 CC               [12] 1162 	xch	a,r4
      000349 6C               [12] 1163 	xrl	a,r4
      00034A FD               [12] 1164 	mov	r5,a
      00034B 78r12            [12] 1165 	mov	r0,#_x
      00034D E6               [12] 1166 	mov	a,@r0
      00034E 2C               [12] 1167 	add	a,r4
      00034F FC               [12] 1168 	mov	r4,a
      000350 08               [12] 1169 	inc	r0
      000351 E6               [12] 1170 	mov	a,@r0
      000352 3D               [12] 1171 	addc	a,r5
      000353 FD               [12] 1172 	mov	r5,a
      000354 EC               [12] 1173 	mov	a,r4
      000355 24r00            [12] 1174 	add	a,#_u
      000357 F5 82            [12] 1175 	mov	dpl,a
      000359 ED               [12] 1176 	mov	a,r5
      00035A 34s08            [12] 1177 	addc	a,#(_u >> 8)
      00035C F5 83            [12] 1178 	mov	dph,a
      00035E 74 01            [12] 1179 	mov	a,#0x01
      000360 F0               [24] 1180 	movx	@dptr,a
                                   1181 ;	life.c:136: j++;
      000361 78r16            [12] 1182 	mov	r0,#_j
      000363 06               [12] 1183 	inc	@r0
      000364 B6 00 02         [24] 1184 	cjne	@r0,#0x00,00397$
      000367 08               [12] 1185 	inc	r0
      000368 06               [12] 1186 	inc	@r0
      000369                       1187 00397$:
      000369 80 08            [24] 1188 	sjmp	00174$
      00036B                       1189 00137$:
                                   1190 ;	life.c:137: } else if (c == (int)'#') goto out;
      00036B BE 23 05         [24] 1191 	cjne	r6,#0x23,00398$
      00036E BF 00 02         [24] 1192 	cjne	r7,#0x00,00398$
      000371 80 32            [24] 1193 	sjmp	00150$
      000373                       1194 00398$:
      000373                       1195 00174$:
                                   1196 ;	life.c:129: for (x = 0; x < W; x++) {
      000373 78r12            [12] 1197 	mov	r0,#_x
      000375 06               [12] 1198 	inc	@r0
      000376 B6 00 02         [24] 1199 	cjne	@r0,#0x00,00399$
      000379 08               [12] 1200 	inc	r0
      00037A 06               [12] 1201 	inc	@r0
      00037B                       1202 00399$:
      00037B 78r12            [12] 1203 	mov	r0,#_x
      00037D C3               [12] 1204 	clr	c
      00037E E6               [12] 1205 	mov	a,@r0
      00037F 94 20            [12] 1206 	subb	a,#0x20
      000381 08               [12] 1207 	inc	r0
      000382 E6               [12] 1208 	mov	a,@r0
      000383 64 80            [12] 1209 	xrl	a,#0x80
      000385 94 80            [12] 1210 	subb	a,#0x80
      000387 50 03            [24] 1211 	jnc	00400$
      000389 02r02rE8         [24] 1212 	ljmp	00173$
      00038C                       1213 00400$:
                                   1214 ;	life.c:128: for (y = 0; y < H; y++)
      00038C 78r14            [12] 1215 	mov	r0,#_y
      00038E 06               [12] 1216 	inc	@r0
      00038F B6 00 02         [24] 1217 	cjne	@r0,#0x00,00401$
      000392 08               [12] 1218 	inc	r0
      000393 06               [12] 1219 	inc	@r0
      000394                       1220 00401$:
      000394 78r14            [12] 1221 	mov	r0,#_y
      000396 C3               [12] 1222 	clr	c
      000397 E6               [12] 1223 	mov	a,@r0
      000398 94 40            [12] 1224 	subb	a,#0x40
      00039A 08               [12] 1225 	inc	r0
      00039B E6               [12] 1226 	mov	a,@r0
      00039C 64 80            [12] 1227 	xrl	a,#0x80
      00039E 94 80            [12] 1228 	subb	a,#0x80
      0003A0 50 03            [24] 1229 	jnc	00402$
      0003A2 02r02rE2         [24] 1230 	ljmp	00175$
      0003A5                       1231 00402$:
                                   1232 ;	life.c:140: out:
      0003A5                       1233 00150$:
                                   1234 ;	life.c:141: if (c != (int)'#')
      0003A5 BE 23 05         [24] 1235 	cjne	r6,#0x23,00403$
      0003A8 BF 00 02         [24] 1236 	cjne	r7,#0x00,00403$
      0003AB 80 14            [24] 1237 	sjmp	00149$
      0003AD                       1238 00403$:
                                   1239 ;	life.c:142: while (1) {
      0003AD                       1240 00146$:
                                   1241 ;	life.c:143: c = getchar();
      0003AD 12r00r05         [24] 1242 	lcall	_getchar
      0003B0 AE 82            [24] 1243 	mov	r6,dpl
      0003B2 AF 83            [24] 1244 	mov	r7,dph
      0003B4 78r18            [12] 1245 	mov	r0,#_c
      0003B6 A6 06            [24] 1246 	mov	@r0,ar6
      0003B8 08               [12] 1247 	inc	r0
      0003B9 A6 07            [24] 1248 	mov	@r0,ar7
                                   1249 ;	life.c:144: if (c == (int)'#') break;
      0003BB BE 23 EF         [24] 1250 	cjne	r6,#0x23,00146$
      0003BE BF 00 EC         [24] 1251 	cjne	r7,#0x00,00146$
      0003C1                       1252 00149$:
                                   1253 ;	life.c:146: print16x(j);
      0003C1 78r16            [12] 1254 	mov	r0,#_j
      0003C3 86 06            [24] 1255 	mov	ar6,@r0
      0003C5 08               [12] 1256 	inc	r0
      0003C6 86 07            [24] 1257 	mov	ar7,@r0
      0003C8 8E 04            [24] 1258 	mov	ar4,r6
                                   1259 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0003CA EF               [12] 1260 	mov	a,r7
      0003CB FD               [12] 1261 	mov	r5,a
      0003CC C4               [12] 1262 	swap	a
      0003CD 54 0F            [12] 1263 	anl	a,#0x0f
      0003CF 30 E3 02         [24] 1264 	jnb	acc.3,00406$
      0003D2 44 F0            [12] 1265 	orl	a,#0xf0
      0003D4                       1266 00406$:
      0003D4 FE               [12] 1267 	mov	r6,a
      0003D5 33               [12] 1268 	rlc	a
      0003D6 95 E0            [12] 1269 	subb	a,acc
      0003D8 53 06 0F         [24] 1270 	anl	ar6,#0x0f
      0003DB EE               [12] 1271 	mov	a,r6
      0003DC 24r00            [12] 1272 	add	a,#_digits
      0003DE F9               [12] 1273 	mov	r1,a
      0003DF 87 07            [24] 1274 	mov	ar7,@r1
      0003E1 7E 00            [12] 1275 	mov	r6,#0x00
      0003E3 8F 82            [24] 1276 	mov	dpl,r7
      0003E5 8E 83            [24] 1277 	mov	dph,r6
      0003E7 12r00r00         [24] 1278 	lcall	_putchar
                                   1279 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      0003EA 8D 07            [24] 1280 	mov	ar7,r5
      0003EC 53 07 0F         [24] 1281 	anl	ar7,#0x0f
      0003EF EF               [12] 1282 	mov	a,r7
      0003F0 24r00            [12] 1283 	add	a,#_digits
      0003F2 F9               [12] 1284 	mov	r1,a
      0003F3 87 07            [24] 1285 	mov	ar7,@r1
      0003F5 7E 00            [12] 1286 	mov	r6,#0x00
      0003F7 8F 82            [24] 1287 	mov	dpl,r7
      0003F9 8E 83            [24] 1288 	mov	dph,r6
      0003FB 12r00r00         [24] 1289 	lcall	_putchar
                                   1290 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0003FE 8C 06            [24] 1291 	mov	ar6,r4
      000400 ED               [12] 1292 	mov	a,r5
      000401 C4               [12] 1293 	swap	a
      000402 CE               [12] 1294 	xch	a,r6
      000403 C4               [12] 1295 	swap	a
      000404 54 0F            [12] 1296 	anl	a,#0x0f
      000406 6E               [12] 1297 	xrl	a,r6
      000407 CE               [12] 1298 	xch	a,r6
      000408 54 0F            [12] 1299 	anl	a,#0x0f
      00040A CE               [12] 1300 	xch	a,r6
      00040B 6E               [12] 1301 	xrl	a,r6
      00040C CE               [12] 1302 	xch	a,r6
      00040D 30 E3 02         [24] 1303 	jnb	acc.3,00407$
      000410 44 F0            [12] 1304 	orl	a,#0xf0
      000412                       1305 00407$:
      000412 53 06 0F         [24] 1306 	anl	ar6,#0x0f
      000415 EE               [12] 1307 	mov	a,r6
      000416 24r00            [12] 1308 	add	a,#_digits
      000418 F9               [12] 1309 	mov	r1,a
      000419 87 07            [24] 1310 	mov	ar7,@r1
      00041B 7E 00            [12] 1311 	mov	r6,#0x00
      00041D 8F 82            [24] 1312 	mov	dpl,r7
      00041F 8E 83            [24] 1313 	mov	dph,r6
      000421 12r00r00         [24] 1314 	lcall	_putchar
                                   1315 ;	life.c:40: putchar(digits[a & 0xf]);
      000424 53 04 0F         [24] 1316 	anl	ar4,#0x0f
      000427 EC               [12] 1317 	mov	a,r4
      000428 24r00            [12] 1318 	add	a,#_digits
      00042A F9               [12] 1319 	mov	r1,a
      00042B 87 07            [24] 1320 	mov	ar7,@r1
      00042D 7E 00            [12] 1321 	mov	r6,#0x00
      00042F 8F 82            [24] 1322 	mov	dpl,r7
      000431 8E 83            [24] 1323 	mov	dph,r6
      000433 12r00r00         [24] 1324 	lcall	_putchar
                                   1325 ;	life.c:147: printstr(">\r\n");
      000436 7Dr12            [12] 1326 	mov	r5,#___str_3
      000438 7Es00            [12] 1327 	mov	r6,#(___str_3 >> 8)
      00043A 7F 80            [12] 1328 	mov	r7,#0x80
                                   1329 ;	life.c:48: return;
      00043C                       1330 00178$:
                                   1331 ;	life.c:46: for (; *s; s++) putchar(*s);
      00043C 8D 82            [24] 1332 	mov	dpl,r5
      00043E 8E 83            [24] 1333 	mov	dph,r6
      000440 8F F0            [24] 1334 	mov	b,r7
      000442 12r00r00         [24] 1335 	lcall	__gptrget
      000445 FC               [12] 1336 	mov	r4,a
      000446 60 10            [24] 1337 	jz	00153$
      000448 7B 00            [12] 1338 	mov	r3,#0x00
      00044A 8C 82            [24] 1339 	mov	dpl,r4
      00044C 8B 83            [24] 1340 	mov	dph,r3
      00044E 12r00r00         [24] 1341 	lcall	_putchar
      000451 0D               [12] 1342 	inc	r5
                                   1343 ;	life.c:147: printstr(">\r\n");
      000452 BD 00 E7         [24] 1344 	cjne	r5,#0x00,00178$
      000455 0E               [12] 1345 	inc	r6
      000456 80 E4            [24] 1346 	sjmp	00178$
      000458                       1347 00153$:
                                   1348 ;	life.c:217: show(0);
      000458 75 82 00         [24] 1349 	mov	dpl,#0x00
      00045B 12r00r26         [24] 1350 	lcall	_show
                                   1351 ;	life.c:219: printstr("READY\r\n");
      00045E 7Dr24            [12] 1352 	mov	r5,#___str_5
      000460 7Es00            [12] 1353 	mov	r6,#(___str_5 >> 8)
      000462 7F 80            [12] 1354 	mov	r7,#0x80
                                   1355 ;	life.c:48: return;
      000464                       1356 00181$:
                                   1357 ;	life.c:46: for (; *s; s++) putchar(*s);
      000464 8D 82            [24] 1358 	mov	dpl,r5
      000466 8E 83            [24] 1359 	mov	dph,r6
      000468 8F F0            [24] 1360 	mov	b,r7
      00046A 12r00r00         [24] 1361 	lcall	__gptrget
      00046D FC               [12] 1362 	mov	r4,a
      00046E 60 10            [24] 1363 	jz	00118$
      000470 7B 00            [12] 1364 	mov	r3,#0x00
      000472 8C 82            [24] 1365 	mov	dpl,r4
      000474 8B 83            [24] 1366 	mov	dph,r3
      000476 12r00r00         [24] 1367 	lcall	_putchar
      000479 0D               [12] 1368 	inc	r5
                                   1369 ;	life.c:220: while (1) {
      00047A BD 00 E7         [24] 1370 	cjne	r5,#0x00,00181$
      00047D 0E               [12] 1371 	inc	r6
      00047E 80 E4            [24] 1372 	sjmp	00181$
      000480                       1373 00118$:
                                   1374 ;	life.c:221: c = getchar();
      000480 12r00r05         [24] 1375 	lcall	_getchar
      000483 AE 82            [24] 1376 	mov	r6,dpl
      000485 AF 83            [24] 1377 	mov	r7,dph
      000487 78r18            [12] 1378 	mov	r0,#_c
      000489 A6 06            [24] 1379 	mov	@r0,ar6
      00048B 08               [12] 1380 	inc	r0
      00048C A6 07            [24] 1381 	mov	@r0,ar7
                                   1382 ;	life.c:222: if (i0 || (c == (int)'T')) goto terminate;
      00048E 78r10            [12] 1383 	mov	r0,#_i0
      000490 E6               [12] 1384 	mov	a,@r0
      000491 60 03            [24] 1385 	jz	00412$
      000493 02r09r70         [24] 1386 	ljmp	00127$
      000496                       1387 00412$:
      000496 BE 54 06         [24] 1388 	cjne	r6,#0x54,00413$
      000499 BF 00 03         [24] 1389 	cjne	r7,#0x00,00413$
      00049C 02r09r70         [24] 1390 	ljmp	00127$
      00049F                       1391 00413$:
                                   1392 ;	life.c:223: if (c == (int)'L') goto reload;
      00049F BE 4C 06         [24] 1393 	cjne	r6,#0x4c,00414$
      0004A2 BF 00 03         [24] 1394 	cjne	r7,#0x00,00414$
      0004A5 02r02r82         [24] 1395 	ljmp	00109$
      0004A8                       1396 00414$:
                                   1397 ;	life.c:224: if (c == (int)'S') break;
      0004A8 BE 53 D5         [24] 1398 	cjne	r6,#0x53,00118$
      0004AB BF 00 D2         [24] 1399 	cjne	r7,#0x00,00118$
                                   1400 ;	life.c:75: generation[0] = 0;
      0004AE 78r22            [12] 1401 	mov	r0,#_generation
      0004B0 76 00            [12] 1402 	mov	@r0,#0x00
      0004B2 08               [12] 1403 	inc	r0
      0004B3 76 00            [12] 1404 	mov	@r0,#0x00
                                   1405 ;	life.c:76: generation[1] = 0;
      0004B5 78r24            [12] 1406 	mov	r0,#(_generation + 0x0002)
      0004B7 76 00            [12] 1407 	mov	@r0,#0x00
      0004B9 08               [12] 1408 	inc	r0
      0004BA 76 00            [12] 1409 	mov	@r0,#0x00
                                   1410 ;	life.c:229: for (i1 = 0; !i0 && !i1; ) {
      0004BC 78r11            [12] 1411 	mov	r0,#_i1
      0004BE 76 00            [12] 1412 	mov	@r0,#0x00
      0004C0                       1413 00192$:
      0004C0 78r10            [12] 1414 	mov	r0,#_i0
      0004C2 E6               [12] 1415 	mov	a,@r0
      0004C3 60 03            [24] 1416 	jz	00417$
      0004C5 02r09r3E         [24] 1417 	ljmp	00123$
      0004C8                       1418 00417$:
      0004C8 78r11            [12] 1419 	mov	r0,#_i1
      0004CA E6               [12] 1420 	mov	a,@r0
      0004CB 60 03            [24] 1421 	jz	00418$
      0004CD 02r09r3E         [24] 1422 	ljmp	00123$
      0004D0                       1423 00418$:
                                   1424 ;	life.c:230: show(1);
      0004D0 75 82 01         [24] 1425 	mov	dpl,#0x01
      0004D3 12r00r26         [24] 1426 	lcall	_show
                                   1427 ;	life.c:155: fixed = 0;
      0004D6 78r1C            [12] 1428 	mov	r0,#_fixed
      0004D8 76 00            [12] 1429 	mov	@r0,#0x00
                                   1430 ;	life.c:156: cycle2 = 0;
      0004DA 78r1D            [12] 1431 	mov	r0,#_cycle2
      0004DC 76 00            [12] 1432 	mov	@r0,#0x00
                                   1433 ;	life.c:157: bstep = 0;
      0004DE 78r1A            [12] 1434 	mov	r0,#_bstep
      0004E0 76 00            [12] 1435 	mov	@r0,#0x00
                                   1436 ;	life.c:159: for (y = 0; y < H; y++) {
      0004E2 78r14            [12] 1437 	mov	r0,#_y
      0004E4 E4               [12] 1438 	clr	a
      0004E5 F6               [12] 1439 	mov	@r0,a
      0004E6 08               [12] 1440 	inc	r0
      0004E7 F6               [12] 1441 	mov	@r0,a
      0004E8                       1442 00185$:
                                   1443 ;	life.c:160: putchar(busy[bstep]); putchar('\r');
      0004E8 78r1A            [12] 1444 	mov	r0,#_bstep
      0004EA E6               [12] 1445 	mov	a,@r0
      0004EB 24r26            [12] 1446 	add	a,#_busy
      0004ED F9               [12] 1447 	mov	r1,a
      0004EE 87 07            [24] 1448 	mov	ar7,@r1
      0004F0 7E 00            [12] 1449 	mov	r6,#0x00
      0004F2 8F 82            [24] 1450 	mov	dpl,r7
      0004F4 8E 83            [24] 1451 	mov	dph,r6
      0004F6 12r00r00         [24] 1452 	lcall	_putchar
      0004F9 90 00 0D         [24] 1453 	mov	dptr,#0x000d
      0004FC 12r00r00         [24] 1454 	lcall	_putchar
                                   1455 ;	life.c:161: bstep = (bstep + 1) & 3;
      0004FF 78r1A            [12] 1456 	mov	r0,#_bstep
      000501 86 07            [24] 1457 	mov	ar7,@r0
      000503 0F               [12] 1458 	inc	r7
      000504 78r1A            [12] 1459 	mov	r0,#_bstep
      000506 74 03            [12] 1460 	mov	a,#0x03
      000508 5F               [12] 1461 	anl	a,r7
      000509 F6               [12] 1462 	mov	@r0,a
                                   1463 ;	life.c:162: for (x = 0; x < W; x++) {
      00050A 78r12            [12] 1464 	mov	r0,#_x
      00050C E4               [12] 1465 	clr	a
      00050D F6               [12] 1466 	mov	@r0,a
      00050E 08               [12] 1467 	inc	r0
      00050F F6               [12] 1468 	mov	@r0,a
      000510                       1469 00183$:
                                   1470 ;	life.c:163: n = -u[A2D(W, y, x)];
      000510 78r14            [12] 1471 	mov	r0,#_y
      000512 E5*00            [12] 1472 	mov	a,_bp
      000514 24 04            [12] 1473 	add	a,#0x04
      000516 F9               [12] 1474 	mov	r1,a
      000517 E6               [12] 1475 	mov	a,@r0
      000518 F7               [12] 1476 	mov	@r1,a
      000519 08               [12] 1477 	inc	r0
      00051A E6               [12] 1478 	mov	a,@r0
      00051B C4               [12] 1479 	swap	a
      00051C 23               [12] 1480 	rl	a
      00051D 54 E0            [12] 1481 	anl	a,#0xe0
      00051F C7               [12] 1482 	xch	a,@r1
      000520 C4               [12] 1483 	swap	a
      000521 23               [12] 1484 	rl	a
      000522 C7               [12] 1485 	xch	a,@r1
      000523 67               [12] 1486 	xrl	a,@r1
      000524 C7               [12] 1487 	xch	a,@r1
      000525 54 E0            [12] 1488 	anl	a,#0xe0
      000527 C7               [12] 1489 	xch	a,@r1
      000528 67               [12] 1490 	xrl	a,@r1
      000529 09               [12] 1491 	inc	r1
      00052A F7               [12] 1492 	mov	@r1,a
      00052B E5*00            [12] 1493 	mov	a,_bp
      00052D 24 04            [12] 1494 	add	a,#0x04
      00052F F8               [12] 1495 	mov	r0,a
      000530 79r12            [12] 1496 	mov	r1,#_x
      000532 E7               [12] 1497 	mov	a,@r1
      000533 26               [12] 1498 	add	a,@r0
      000534 C0 E0            [24] 1499 	push	acc
      000536 09               [12] 1500 	inc	r1
      000537 E7               [12] 1501 	mov	a,@r1
      000538 08               [12] 1502 	inc	r0
      000539 36               [12] 1503 	addc	a,@r0
      00053A C0 E0            [24] 1504 	push	acc
      00053C E5*00            [12] 1505 	mov	a,_bp
      00053E 24 03            [12] 1506 	add	a,#0x03
      000540 F8               [12] 1507 	mov	r0,a
      000541 D0 E0            [24] 1508 	pop	acc
      000543 F6               [12] 1509 	mov	@r0,a
      000544 18               [12] 1510 	dec	r0
      000545 D0 E0            [24] 1511 	pop	acc
      000547 F6               [12] 1512 	mov	@r0,a
      000548 A8*00            [24] 1513 	mov	r0,_bp
      00054A 08               [12] 1514 	inc	r0
      00054B 08               [12] 1515 	inc	r0
      00054C E6               [12] 1516 	mov	a,@r0
      00054D 24r00            [12] 1517 	add	a,#_u
      00054F F5 82            [12] 1518 	mov	dpl,a
      000551 08               [12] 1519 	inc	r0
      000552 E6               [12] 1520 	mov	a,@r0
      000553 34s08            [12] 1521 	addc	a,#(_u >> 8)
      000555 F5 83            [12] 1522 	mov	dph,a
      000557 E0               [24] 1523 	movx	a,@dptr
      000558 FB               [12] 1524 	mov	r3,a
      000559 A8*00            [24] 1525 	mov	r0,_bp
      00055B 08               [12] 1526 	inc	r0
      00055C C3               [12] 1527 	clr	c
      00055D E4               [12] 1528 	clr	a
      00055E 9B               [12] 1529 	subb	a,r3
      00055F F6               [12] 1530 	mov	@r0,a
                                   1531 ;	life.c:166: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000560 78r14            [12] 1532 	mov	r0,#_y
      000562 74 FF            [12] 1533 	mov	a,#0xff
      000564 26               [12] 1534 	add	a,@r0
      000565 FA               [12] 1535 	mov	r2,a
      000566 74 FF            [12] 1536 	mov	a,#0xff
      000568 08               [12] 1537 	inc	r0
      000569 36               [12] 1538 	addc	a,@r0
      00056A FB               [12] 1539 	mov	r3,a
      00056B 74 40            [12] 1540 	mov	a,#0x40
      00056D 2A               [12] 1541 	add	a,r2
      00056E FA               [12] 1542 	mov	r2,a
      00056F E4               [12] 1543 	clr	a
      000570 3B               [12] 1544 	addc	a,r3
      000571 FB               [12] 1545 	mov	r3,a
      000572 74 40            [12] 1546 	mov	a,#0x40
      000574 C0 E0            [24] 1547 	push	acc
      000576 E4               [12] 1548 	clr	a
      000577 C0 E0            [24] 1549 	push	acc
      000579 8A 82            [24] 1550 	mov	dpl,r2
      00057B 8B 83            [24] 1551 	mov	dph,r3
      00057D 12r00r00         [24] 1552 	lcall	__modsint
      000580 AA 82            [24] 1553 	mov	r2,dpl
      000582 AB 83            [24] 1554 	mov	r3,dph
      000584 15 81            [12] 1555 	dec	sp
      000586 15 81            [12] 1556 	dec	sp
      000588 EB               [12] 1557 	mov	a,r3
      000589 C4               [12] 1558 	swap	a
      00058A 23               [12] 1559 	rl	a
      00058B 54 E0            [12] 1560 	anl	a,#0xe0
      00058D CA               [12] 1561 	xch	a,r2
      00058E C4               [12] 1562 	swap	a
      00058F 23               [12] 1563 	rl	a
      000590 CA               [12] 1564 	xch	a,r2
      000591 6A               [12] 1565 	xrl	a,r2
      000592 CA               [12] 1566 	xch	a,r2
      000593 54 E0            [12] 1567 	anl	a,#0xe0
      000595 CA               [12] 1568 	xch	a,r2
      000596 6A               [12] 1569 	xrl	a,r2
      000597 FB               [12] 1570 	mov	r3,a
      000598 78r12            [12] 1571 	mov	r0,#_x
      00059A 74 FF            [12] 1572 	mov	a,#0xff
      00059C 26               [12] 1573 	add	a,@r0
      00059D FC               [12] 1574 	mov	r4,a
      00059E 74 FF            [12] 1575 	mov	a,#0xff
      0005A0 08               [12] 1576 	inc	r0
      0005A1 36               [12] 1577 	addc	a,@r0
      0005A2 FD               [12] 1578 	mov	r5,a
      0005A3 74 20            [12] 1579 	mov	a,#0x20
      0005A5 2C               [12] 1580 	add	a,r4
      0005A6 FC               [12] 1581 	mov	r4,a
      0005A7 E4               [12] 1582 	clr	a
      0005A8 3D               [12] 1583 	addc	a,r5
      0005A9 FD               [12] 1584 	mov	r5,a
      0005AA C0 03            [24] 1585 	push	ar3
      0005AC C0 02            [24] 1586 	push	ar2
      0005AE 74 20            [12] 1587 	mov	a,#0x20
      0005B0 C0 E0            [24] 1588 	push	acc
      0005B2 E4               [12] 1589 	clr	a
      0005B3 C0 E0            [24] 1590 	push	acc
      0005B5 8C 82            [24] 1591 	mov	dpl,r4
      0005B7 8D 83            [24] 1592 	mov	dph,r5
      0005B9 12r00r00         [24] 1593 	lcall	__modsint
      0005BC AC 82            [24] 1594 	mov	r4,dpl
      0005BE AD 83            [24] 1595 	mov	r5,dph
      0005C0 15 81            [12] 1596 	dec	sp
      0005C2 15 81            [12] 1597 	dec	sp
      0005C4 D0 02            [24] 1598 	pop	ar2
      0005C6 D0 03            [24] 1599 	pop	ar3
      0005C8 EC               [12] 1600 	mov	a,r4
      0005C9 2A               [12] 1601 	add	a,r2
      0005CA FE               [12] 1602 	mov	r6,a
      0005CB ED               [12] 1603 	mov	a,r5
      0005CC 3B               [12] 1604 	addc	a,r3
      0005CD FF               [12] 1605 	mov	r7,a
      0005CE EE               [12] 1606 	mov	a,r6
      0005CF 24r00            [12] 1607 	add	a,#_u
      0005D1 F5 82            [12] 1608 	mov	dpl,a
      0005D3 EF               [12] 1609 	mov	a,r7
      0005D4 34s08            [12] 1610 	addc	a,#(_u >> 8)
      0005D6 F5 83            [12] 1611 	mov	dph,a
      0005D8 E0               [24] 1612 	movx	a,@dptr
      0005D9 FF               [12] 1613 	mov	r7,a
      0005DA A8*00            [24] 1614 	mov	r0,_bp
      0005DC 08               [12] 1615 	inc	r0
      0005DD EF               [12] 1616 	mov	a,r7
      0005DE 26               [12] 1617 	add	a,@r0
      0005DF F6               [12] 1618 	mov	@r0,a
                                   1619 ;	life.c:168: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0005E0 78r12            [12] 1620 	mov	r0,#_x
      0005E2 E5*00            [12] 1621 	mov	a,_bp
      0005E4 24 06            [12] 1622 	add	a,#0x06
      0005E6 F9               [12] 1623 	mov	r1,a
      0005E7 E6               [12] 1624 	mov	a,@r0
      0005E8 F7               [12] 1625 	mov	@r1,a
      0005E9 08               [12] 1626 	inc	r0
      0005EA 09               [12] 1627 	inc	r1
      0005EB E6               [12] 1628 	mov	a,@r0
      0005EC F7               [12] 1629 	mov	@r1,a
      0005ED E5*00            [12] 1630 	mov	a,_bp
      0005EF 24 06            [12] 1631 	add	a,#0x06
      0005F1 F8               [12] 1632 	mov	r0,a
      0005F2 74 20            [12] 1633 	mov	a,#0x20
      0005F4 26               [12] 1634 	add	a,@r0
      0005F5 FE               [12] 1635 	mov	r6,a
      0005F6 E4               [12] 1636 	clr	a
      0005F7 08               [12] 1637 	inc	r0
      0005F8 36               [12] 1638 	addc	a,@r0
      0005F9 FF               [12] 1639 	mov	r7,a
      0005FA C0 05            [24] 1640 	push	ar5
      0005FC C0 04            [24] 1641 	push	ar4
      0005FE C0 03            [24] 1642 	push	ar3
      000600 C0 02            [24] 1643 	push	ar2
      000602 74 20            [12] 1644 	mov	a,#0x20
      000604 C0 E0            [24] 1645 	push	acc
      000606 E4               [12] 1646 	clr	a
      000607 C0 E0            [24] 1647 	push	acc
      000609 8E 82            [24] 1648 	mov	dpl,r6
      00060B 8F 83            [24] 1649 	mov	dph,r7
      00060D 12r00r00         [24] 1650 	lcall	__modsint
      000610 C8               [12] 1651 	xch	a,r0
      000611 E5*00            [12] 1652 	mov	a,_bp
      000613 24 08            [12] 1653 	add	a,#0x08
      000615 C8               [12] 1654 	xch	a,r0
      000616 A6 82            [24] 1655 	mov	@r0,dpl
      000618 08               [12] 1656 	inc	r0
      000619 A6 83            [24] 1657 	mov	@r0,dph
      00061B 15 81            [12] 1658 	dec	sp
      00061D 15 81            [12] 1659 	dec	sp
      00061F D0 02            [24] 1660 	pop	ar2
      000621 D0 03            [24] 1661 	pop	ar3
      000623 E5*00            [12] 1662 	mov	a,_bp
      000625 24 08            [12] 1663 	add	a,#0x08
      000627 F8               [12] 1664 	mov	r0,a
      000628 E6               [12] 1665 	mov	a,@r0
      000629 2A               [12] 1666 	add	a,r2
      00062A FE               [12] 1667 	mov	r6,a
      00062B 08               [12] 1668 	inc	r0
      00062C E6               [12] 1669 	mov	a,@r0
      00062D 3B               [12] 1670 	addc	a,r3
      00062E FF               [12] 1671 	mov	r7,a
      00062F EE               [12] 1672 	mov	a,r6
      000630 24r00            [12] 1673 	add	a,#_u
      000632 F5 82            [12] 1674 	mov	dpl,a
      000634 EF               [12] 1675 	mov	a,r7
      000635 34s08            [12] 1676 	addc	a,#(_u >> 8)
      000637 F5 83            [12] 1677 	mov	dph,a
      000639 E0               [24] 1678 	movx	a,@dptr
      00063A FF               [12] 1679 	mov	r7,a
      00063B A8*00            [24] 1680 	mov	r0,_bp
      00063D 08               [12] 1681 	inc	r0
      00063E EF               [12] 1682 	mov	a,r7
      00063F 26               [12] 1683 	add	a,@r0
      000640 F6               [12] 1684 	mov	@r0,a
                                   1685 ;	life.c:170: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000641 E5*00            [12] 1686 	mov	a,_bp
      000643 24 06            [12] 1687 	add	a,#0x06
      000645 F8               [12] 1688 	mov	r0,a
      000646 74 21            [12] 1689 	mov	a,#0x21
      000648 26               [12] 1690 	add	a,@r0
      000649 FE               [12] 1691 	mov	r6,a
      00064A E4               [12] 1692 	clr	a
      00064B 08               [12] 1693 	inc	r0
      00064C 36               [12] 1694 	addc	a,@r0
      00064D FF               [12] 1695 	mov	r7,a
      00064E C0 03            [24] 1696 	push	ar3
      000650 C0 02            [24] 1697 	push	ar2
      000652 74 20            [12] 1698 	mov	a,#0x20
      000654 C0 E0            [24] 1699 	push	acc
      000656 E4               [12] 1700 	clr	a
      000657 C0 E0            [24] 1701 	push	acc
      000659 8E 82            [24] 1702 	mov	dpl,r6
      00065B 8F 83            [24] 1703 	mov	dph,r7
      00065D 12r00r00         [24] 1704 	lcall	__modsint
      000660 AE 82            [24] 1705 	mov	r6,dpl
      000662 AF 83            [24] 1706 	mov	r7,dph
      000664 15 81            [12] 1707 	dec	sp
      000666 15 81            [12] 1708 	dec	sp
      000668 D0 02            [24] 1709 	pop	ar2
      00066A D0 03            [24] 1710 	pop	ar3
      00066C D0 04            [24] 1711 	pop	ar4
      00066E D0 05            [24] 1712 	pop	ar5
      000670 EE               [12] 1713 	mov	a,r6
      000671 2A               [12] 1714 	add	a,r2
      000672 FA               [12] 1715 	mov	r2,a
      000673 EF               [12] 1716 	mov	a,r7
      000674 3B               [12] 1717 	addc	a,r3
      000675 FB               [12] 1718 	mov	r3,a
      000676 EA               [12] 1719 	mov	a,r2
      000677 24r00            [12] 1720 	add	a,#_u
      000679 F5 82            [12] 1721 	mov	dpl,a
      00067B EB               [12] 1722 	mov	a,r3
      00067C 34s08            [12] 1723 	addc	a,#(_u >> 8)
      00067E F5 83            [12] 1724 	mov	dph,a
      000680 E0               [24] 1725 	movx	a,@dptr
      000681 FB               [12] 1726 	mov	r3,a
      000682 A8*00            [24] 1727 	mov	r0,_bp
      000684 08               [12] 1728 	inc	r0
      000685 EB               [12] 1729 	mov	a,r3
      000686 26               [12] 1730 	add	a,@r0
      000687 F6               [12] 1731 	mov	@r0,a
                                   1732 ;	life.c:172: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000688 78r14            [12] 1733 	mov	r0,#_y
      00068A E5*00            [12] 1734 	mov	a,_bp
      00068C 24 0A            [12] 1735 	add	a,#0x0a
      00068E F9               [12] 1736 	mov	r1,a
      00068F E6               [12] 1737 	mov	a,@r0
      000690 F7               [12] 1738 	mov	@r1,a
      000691 08               [12] 1739 	inc	r0
      000692 09               [12] 1740 	inc	r1
      000693 E6               [12] 1741 	mov	a,@r0
      000694 F7               [12] 1742 	mov	@r1,a
      000695 E5*00            [12] 1743 	mov	a,_bp
      000697 24 0A            [12] 1744 	add	a,#0x0a
      000699 F8               [12] 1745 	mov	r0,a
      00069A 74 40            [12] 1746 	mov	a,#0x40
      00069C 26               [12] 1747 	add	a,@r0
      00069D FA               [12] 1748 	mov	r2,a
      00069E E4               [12] 1749 	clr	a
      00069F 08               [12] 1750 	inc	r0
      0006A0 36               [12] 1751 	addc	a,@r0
      0006A1 FB               [12] 1752 	mov	r3,a
      0006A2 C0 07            [24] 1753 	push	ar7
      0006A4 C0 06            [24] 1754 	push	ar6
      0006A6 C0 05            [24] 1755 	push	ar5
      0006A8 C0 04            [24] 1756 	push	ar4
      0006AA 74 40            [12] 1757 	mov	a,#0x40
      0006AC C0 E0            [24] 1758 	push	acc
      0006AE E4               [12] 1759 	clr	a
      0006AF C0 E0            [24] 1760 	push	acc
      0006B1 8A 82            [24] 1761 	mov	dpl,r2
      0006B3 8B 83            [24] 1762 	mov	dph,r3
      0006B5 12r00r00         [24] 1763 	lcall	__modsint
      0006B8 AA 82            [24] 1764 	mov	r2,dpl
      0006BA AB 83            [24] 1765 	mov	r3,dph
      0006BC 15 81            [12] 1766 	dec	sp
      0006BE 15 81            [12] 1767 	dec	sp
      0006C0 D0 04            [24] 1768 	pop	ar4
      0006C2 D0 05            [24] 1769 	pop	ar5
      0006C4 D0 06            [24] 1770 	pop	ar6
      0006C6 D0 07            [24] 1771 	pop	ar7
      0006C8 E5*00            [12] 1772 	mov	a,_bp
      0006CA 24 0C            [12] 1773 	add	a,#0x0c
      0006CC F8               [12] 1774 	mov	r0,a
      0006CD A6 02            [24] 1775 	mov	@r0,ar2
      0006CF EB               [12] 1776 	mov	a,r3
      0006D0 C4               [12] 1777 	swap	a
      0006D1 23               [12] 1778 	rl	a
      0006D2 54 E0            [12] 1779 	anl	a,#0xe0
      0006D4 C6               [12] 1780 	xch	a,@r0
      0006D5 C4               [12] 1781 	swap	a
      0006D6 23               [12] 1782 	rl	a
      0006D7 C6               [12] 1783 	xch	a,@r0
      0006D8 66               [12] 1784 	xrl	a,@r0
      0006D9 C6               [12] 1785 	xch	a,@r0
      0006DA 54 E0            [12] 1786 	anl	a,#0xe0
      0006DC C6               [12] 1787 	xch	a,@r0
      0006DD 66               [12] 1788 	xrl	a,@r0
      0006DE 08               [12] 1789 	inc	r0
      0006DF F6               [12] 1790 	mov	@r0,a
      0006E0 E5*00            [12] 1791 	mov	a,_bp
      0006E2 24 0C            [12] 1792 	add	a,#0x0c
      0006E4 F8               [12] 1793 	mov	r0,a
      0006E5 EC               [12] 1794 	mov	a,r4
      0006E6 26               [12] 1795 	add	a,@r0
      0006E7 FA               [12] 1796 	mov	r2,a
      0006E8 ED               [12] 1797 	mov	a,r5
      0006E9 08               [12] 1798 	inc	r0
      0006EA 36               [12] 1799 	addc	a,@r0
      0006EB FB               [12] 1800 	mov	r3,a
      0006EC EA               [12] 1801 	mov	a,r2
      0006ED 24r00            [12] 1802 	add	a,#_u
      0006EF F5 82            [12] 1803 	mov	dpl,a
      0006F1 EB               [12] 1804 	mov	a,r3
      0006F2 34s08            [12] 1805 	addc	a,#(_u >> 8)
      0006F4 F5 83            [12] 1806 	mov	dph,a
      0006F6 E0               [24] 1807 	movx	a,@dptr
      0006F7 FB               [12] 1808 	mov	r3,a
      0006F8 A8*00            [24] 1809 	mov	r0,_bp
      0006FA 08               [12] 1810 	inc	r0
      0006FB EB               [12] 1811 	mov	a,r3
      0006FC 26               [12] 1812 	add	a,@r0
      0006FD F6               [12] 1813 	mov	@r0,a
                                   1814 ;	life.c:174: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006FE E5*00            [12] 1815 	mov	a,_bp
      000700 24 0C            [12] 1816 	add	a,#0x0c
      000702 F8               [12] 1817 	mov	r0,a
      000703 E5*00            [12] 1818 	mov	a,_bp
      000705 24 08            [12] 1819 	add	a,#0x08
      000707 F9               [12] 1820 	mov	r1,a
      000708 E7               [12] 1821 	mov	a,@r1
      000709 26               [12] 1822 	add	a,@r0
      00070A FA               [12] 1823 	mov	r2,a
      00070B 09               [12] 1824 	inc	r1
      00070C E7               [12] 1825 	mov	a,@r1
      00070D 08               [12] 1826 	inc	r0
      00070E 36               [12] 1827 	addc	a,@r0
      00070F FB               [12] 1828 	mov	r3,a
      000710 EA               [12] 1829 	mov	a,r2
      000711 24r00            [12] 1830 	add	a,#_u
      000713 F5 82            [12] 1831 	mov	dpl,a
      000715 EB               [12] 1832 	mov	a,r3
      000716 34s08            [12] 1833 	addc	a,#(_u >> 8)
      000718 F5 83            [12] 1834 	mov	dph,a
      00071A E0               [24] 1835 	movx	a,@dptr
      00071B FB               [12] 1836 	mov	r3,a
      00071C A8*00            [24] 1837 	mov	r0,_bp
      00071E 08               [12] 1838 	inc	r0
      00071F EB               [12] 1839 	mov	a,r3
      000720 26               [12] 1840 	add	a,@r0
      000721 F6               [12] 1841 	mov	@r0,a
                                   1842 ;	life.c:176: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000722 E5*00            [12] 1843 	mov	a,_bp
      000724 24 0C            [12] 1844 	add	a,#0x0c
      000726 F8               [12] 1845 	mov	r0,a
      000727 EE               [12] 1846 	mov	a,r6
      000728 26               [12] 1847 	add	a,@r0
      000729 FA               [12] 1848 	mov	r2,a
      00072A EF               [12] 1849 	mov	a,r7
      00072B 08               [12] 1850 	inc	r0
      00072C 36               [12] 1851 	addc	a,@r0
      00072D FB               [12] 1852 	mov	r3,a
      00072E EA               [12] 1853 	mov	a,r2
      00072F 24r00            [12] 1854 	add	a,#_u
      000731 F5 82            [12] 1855 	mov	dpl,a
      000733 EB               [12] 1856 	mov	a,r3
      000734 34s08            [12] 1857 	addc	a,#(_u >> 8)
      000736 F5 83            [12] 1858 	mov	dph,a
      000738 E0               [24] 1859 	movx	a,@dptr
      000739 FB               [12] 1860 	mov	r3,a
      00073A A8*00            [24] 1861 	mov	r0,_bp
      00073C 08               [12] 1862 	inc	r0
      00073D E5*00            [12] 1863 	mov	a,_bp
      00073F 24 0C            [12] 1864 	add	a,#0x0c
      000741 F9               [12] 1865 	mov	r1,a
      000742 EB               [12] 1866 	mov	a,r3
      000743 26               [12] 1867 	add	a,@r0
      000744 F7               [12] 1868 	mov	@r1,a
                                   1869 ;	life.c:178: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000745 E5*00            [12] 1870 	mov	a,_bp
      000747 24 0A            [12] 1871 	add	a,#0x0a
      000749 F8               [12] 1872 	mov	r0,a
      00074A 74 41            [12] 1873 	mov	a,#0x41
      00074C 26               [12] 1874 	add	a,@r0
      00074D FA               [12] 1875 	mov	r2,a
      00074E E4               [12] 1876 	clr	a
      00074F 08               [12] 1877 	inc	r0
      000750 36               [12] 1878 	addc	a,@r0
      000751 FB               [12] 1879 	mov	r3,a
      000752 C0 07            [24] 1880 	push	ar7
      000754 C0 06            [24] 1881 	push	ar6
      000756 C0 05            [24] 1882 	push	ar5
      000758 C0 04            [24] 1883 	push	ar4
      00075A 74 40            [12] 1884 	mov	a,#0x40
      00075C C0 E0            [24] 1885 	push	acc
      00075E E4               [12] 1886 	clr	a
      00075F C0 E0            [24] 1887 	push	acc
      000761 8A 82            [24] 1888 	mov	dpl,r2
      000763 8B 83            [24] 1889 	mov	dph,r3
      000765 12r00r00         [24] 1890 	lcall	__modsint
      000768 AA 82            [24] 1891 	mov	r2,dpl
      00076A AB 83            [24] 1892 	mov	r3,dph
      00076C 15 81            [12] 1893 	dec	sp
      00076E 15 81            [12] 1894 	dec	sp
      000770 D0 04            [24] 1895 	pop	ar4
      000772 D0 05            [24] 1896 	pop	ar5
      000774 D0 06            [24] 1897 	pop	ar6
      000776 D0 07            [24] 1898 	pop	ar7
      000778 EB               [12] 1899 	mov	a,r3
      000779 C4               [12] 1900 	swap	a
      00077A 23               [12] 1901 	rl	a
      00077B 54 E0            [12] 1902 	anl	a,#0xe0
      00077D CA               [12] 1903 	xch	a,r2
      00077E C4               [12] 1904 	swap	a
      00077F 23               [12] 1905 	rl	a
      000780 CA               [12] 1906 	xch	a,r2
      000781 6A               [12] 1907 	xrl	a,r2
      000782 CA               [12] 1908 	xch	a,r2
      000783 54 E0            [12] 1909 	anl	a,#0xe0
      000785 CA               [12] 1910 	xch	a,r2
      000786 6A               [12] 1911 	xrl	a,r2
      000787 FB               [12] 1912 	mov	r3,a
      000788 EC               [12] 1913 	mov	a,r4
      000789 2A               [12] 1914 	add	a,r2
      00078A FC               [12] 1915 	mov	r4,a
      00078B ED               [12] 1916 	mov	a,r5
      00078C 3B               [12] 1917 	addc	a,r3
      00078D FD               [12] 1918 	mov	r5,a
      00078E EC               [12] 1919 	mov	a,r4
      00078F 24r00            [12] 1920 	add	a,#_u
      000791 F5 82            [12] 1921 	mov	dpl,a
      000793 ED               [12] 1922 	mov	a,r5
      000794 34s08            [12] 1923 	addc	a,#(_u >> 8)
      000796 F5 83            [12] 1924 	mov	dph,a
      000798 E0               [24] 1925 	movx	a,@dptr
      000799 FD               [12] 1926 	mov	r5,a
      00079A E5*00            [12] 1927 	mov	a,_bp
      00079C 24 0C            [12] 1928 	add	a,#0x0c
      00079E F8               [12] 1929 	mov	r0,a
      00079F E5*00            [12] 1930 	mov	a,_bp
      0007A1 24 0C            [12] 1931 	add	a,#0x0c
      0007A3 F9               [12] 1932 	mov	r1,a
      0007A4 ED               [12] 1933 	mov	a,r5
      0007A5 26               [12] 1934 	add	a,@r0
      0007A6 F7               [12] 1935 	mov	@r1,a
                                   1936 ;	life.c:180: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007A7 E5*00            [12] 1937 	mov	a,_bp
      0007A9 24 08            [12] 1938 	add	a,#0x08
      0007AB F8               [12] 1939 	mov	r0,a
      0007AC E6               [12] 1940 	mov	a,@r0
      0007AD 2A               [12] 1941 	add	a,r2
      0007AE FC               [12] 1942 	mov	r4,a
      0007AF 08               [12] 1943 	inc	r0
      0007B0 E6               [12] 1944 	mov	a,@r0
      0007B1 3B               [12] 1945 	addc	a,r3
      0007B2 FD               [12] 1946 	mov	r5,a
      0007B3 EC               [12] 1947 	mov	a,r4
      0007B4 24r00            [12] 1948 	add	a,#_u
      0007B6 F5 82            [12] 1949 	mov	dpl,a
      0007B8 ED               [12] 1950 	mov	a,r5
      0007B9 34s08            [12] 1951 	addc	a,#(_u >> 8)
      0007BB F5 83            [12] 1952 	mov	dph,a
      0007BD E0               [24] 1953 	movx	a,@dptr
      0007BE FD               [12] 1954 	mov	r5,a
      0007BF E5*00            [12] 1955 	mov	a,_bp
      0007C1 24 0C            [12] 1956 	add	a,#0x0c
      0007C3 F8               [12] 1957 	mov	r0,a
      0007C4 ED               [12] 1958 	mov	a,r5
      0007C5 26               [12] 1959 	add	a,@r0
      0007C6 FD               [12] 1960 	mov	r5,a
                                   1961 ;	life.c:181: y1 = 1; x1 = 1;
      0007C7 78r20            [12] 1962 	mov	r0,#_y1
      0007C9 76 01            [12] 1963 	mov	@r0,#0x01
      0007CB 08               [12] 1964 	inc	r0
      0007CC 76 00            [12] 1965 	mov	@r0,#0x00
      0007CE 78r1E            [12] 1966 	mov	r0,#_x1
      0007D0 76 01            [12] 1967 	mov	@r0,#0x01
      0007D2 08               [12] 1968 	inc	r0
      0007D3 76 00            [12] 1969 	mov	@r0,#0x00
                                   1970 ;	life.c:182: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007D5 EE               [12] 1971 	mov	a,r6
      0007D6 2A               [12] 1972 	add	a,r2
      0007D7 FE               [12] 1973 	mov	r6,a
      0007D8 EF               [12] 1974 	mov	a,r7
      0007D9 3B               [12] 1975 	addc	a,r3
      0007DA FF               [12] 1976 	mov	r7,a
      0007DB EE               [12] 1977 	mov	a,r6
      0007DC 24r00            [12] 1978 	add	a,#_u
      0007DE F5 82            [12] 1979 	mov	dpl,a
      0007E0 EF               [12] 1980 	mov	a,r7
      0007E1 34s08            [12] 1981 	addc	a,#(_u >> 8)
      0007E3 F5 83            [12] 1982 	mov	dph,a
      0007E5 E0               [24] 1983 	movx	a,@dptr
      0007E6 2D               [12] 1984 	add	a,r5
      0007E7 FF               [12] 1985 	mov	r7,a
      0007E8 78r1B            [12] 1986 	mov	r0,#_n
      0007EA A6 07            [24] 1987 	mov	@r0,ar7
                                   1988 ;	life.c:184: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007EC A8*00            [24] 1989 	mov	r0,_bp
      0007EE 08               [12] 1990 	inc	r0
      0007EF 08               [12] 1991 	inc	r0
      0007F0 E6               [12] 1992 	mov	a,@r0
      0007F1 24r00            [12] 1993 	add	a,#_nu
      0007F3 FD               [12] 1994 	mov	r5,a
      0007F4 08               [12] 1995 	inc	r0
      0007F5 E6               [12] 1996 	mov	a,@r0
      0007F6 34s10            [12] 1997 	addc	a,#(_nu >> 8)
      0007F8 FE               [12] 1998 	mov	r6,a
      0007F9 BF 03 02         [24] 1999 	cjne	r7,#0x03,00419$
      0007FC 80 28            [24] 2000 	sjmp	00205$
      0007FE                       2001 00419$:
      0007FE BF 02 21         [24] 2002 	cjne	r7,#0x02,00204$
      000801 E5*00            [12] 2003 	mov	a,_bp
      000803 24 04            [12] 2004 	add	a,#0x04
      000805 F8               [12] 2005 	mov	r0,a
      000806 E5*00            [12] 2006 	mov	a,_bp
      000808 24 06            [12] 2007 	add	a,#0x06
      00080A F9               [12] 2008 	mov	r1,a
      00080B E7               [12] 2009 	mov	a,@r1
      00080C 26               [12] 2010 	add	a,@r0
      00080D FC               [12] 2011 	mov	r4,a
      00080E 09               [12] 2012 	inc	r1
      00080F E7               [12] 2013 	mov	a,@r1
      000810 08               [12] 2014 	inc	r0
      000811 36               [12] 2015 	addc	a,@r0
      000812 FF               [12] 2016 	mov	r7,a
      000813 EC               [12] 2017 	mov	a,r4
      000814 24r00            [12] 2018 	add	a,#_u
      000816 FC               [12] 2019 	mov	r4,a
      000817 EF               [12] 2020 	mov	a,r7
      000818 34s08            [12] 2021 	addc	a,#(_u >> 8)
      00081A FF               [12] 2022 	mov	r7,a
      00081B 8C 82            [24] 2023 	mov	dpl,r4
      00081D 8F 83            [24] 2024 	mov	dph,r7
      00081F E0               [24] 2025 	movx	a,@dptr
      000820 70 04            [24] 2026 	jnz	00205$
      000822                       2027 00204$:
                                   2028 ;	assignBit
      000822 C2*00            [12] 2029 	clr	b0
      000824 80 02            [24] 2030 	sjmp	00206$
      000826                       2031 00205$:
                                   2032 ;	assignBit
      000826 D2*00            [12] 2033 	setb	b0
      000828                       2034 00206$:
      000828 A2*00            [12] 2035 	mov	c,b0
      00082A E4               [12] 2036 	clr	a
      00082B 33               [12] 2037 	rlc	a
      00082C 8D 82            [24] 2038 	mov	dpl,r5
      00082E 8E 83            [24] 2039 	mov	dph,r6
      000830 F0               [24] 2040 	movx	@dptr,a
                                   2041 ;	life.c:185: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000831 78r14            [12] 2042 	mov	r0,#_y
      000833 86 06            [24] 2043 	mov	ar6,@r0
      000835 08               [12] 2044 	inc	r0
      000836 E6               [12] 2045 	mov	a,@r0
      000837 C4               [12] 2046 	swap	a
      000838 23               [12] 2047 	rl	a
      000839 54 E0            [12] 2048 	anl	a,#0xe0
      00083B CE               [12] 2049 	xch	a,r6
      00083C C4               [12] 2050 	swap	a
      00083D 23               [12] 2051 	rl	a
      00083E CE               [12] 2052 	xch	a,r6
      00083F 6E               [12] 2053 	xrl	a,r6
      000840 CE               [12] 2054 	xch	a,r6
      000841 54 E0            [12] 2055 	anl	a,#0xe0
      000843 CE               [12] 2056 	xch	a,r6
      000844 6E               [12] 2057 	xrl	a,r6
      000845 FF               [12] 2058 	mov	r7,a
      000846 78r12            [12] 2059 	mov	r0,#_x
      000848 E6               [12] 2060 	mov	a,@r0
      000849 2E               [12] 2061 	add	a,r6
      00084A FE               [12] 2062 	mov	r6,a
      00084B 08               [12] 2063 	inc	r0
      00084C E6               [12] 2064 	mov	a,@r0
      00084D 3F               [12] 2065 	addc	a,r7
      00084E FF               [12] 2066 	mov	r7,a
      00084F EE               [12] 2067 	mov	a,r6
      000850 24r00            [12] 2068 	add	a,#_pu
      000852 F5 82            [12] 2069 	mov	dpl,a
      000854 EF               [12] 2070 	mov	a,r7
      000855 34s00            [12] 2071 	addc	a,#(_pu >> 8)
      000857 F5 83            [12] 2072 	mov	dph,a
      000859 E0               [24] 2073 	movx	a,@dptr
      00085A FD               [12] 2074 	mov	r5,a
      00085B EE               [12] 2075 	mov	a,r6
      00085C 24r00            [12] 2076 	add	a,#_nu
      00085E F5 82            [12] 2077 	mov	dpl,a
      000860 EF               [12] 2078 	mov	a,r7
      000861 34s10            [12] 2079 	addc	a,#(_nu >> 8)
      000863 F5 83            [12] 2080 	mov	dph,a
      000865 E0               [24] 2081 	movx	a,@dptr
      000866 FC               [12] 2082 	mov	r4,a
      000867 6D               [12] 2083 	xrl	a,r5
      000868 78r1D            [12] 2084 	mov	r0,#_cycle2
      00086A 46               [12] 2085 	orl	a,@r0
      00086B F6               [12] 2086 	mov	@r0,a
                                   2087 ;	life.c:186: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00086C EE               [12] 2088 	mov	a,r6
      00086D 24r00            [12] 2089 	add	a,#_u
      00086F F5 82            [12] 2090 	mov	dpl,a
      000871 EF               [12] 2091 	mov	a,r7
      000872 34s08            [12] 2092 	addc	a,#(_u >> 8)
      000874 F5 83            [12] 2093 	mov	dph,a
      000876 E0               [24] 2094 	movx	a,@dptr
      000877 FF               [12] 2095 	mov	r7,a
      000878 EC               [12] 2096 	mov	a,r4
      000879 6F               [12] 2097 	xrl	a,r7
      00087A 78r1C            [12] 2098 	mov	r0,#_fixed
      00087C 46               [12] 2099 	orl	a,@r0
      00087D F6               [12] 2100 	mov	@r0,a
                                   2101 ;	life.c:162: for (x = 0; x < W; x++) {
      00087E 78r12            [12] 2102 	mov	r0,#_x
      000880 06               [12] 2103 	inc	@r0
      000881 B6 00 02         [24] 2104 	cjne	@r0,#0x00,00423$
      000884 08               [12] 2105 	inc	r0
      000885 06               [12] 2106 	inc	@r0
      000886                       2107 00423$:
      000886 78r12            [12] 2108 	mov	r0,#_x
      000888 C3               [12] 2109 	clr	c
      000889 E6               [12] 2110 	mov	a,@r0
      00088A 94 20            [12] 2111 	subb	a,#0x20
      00088C 08               [12] 2112 	inc	r0
      00088D E6               [12] 2113 	mov	a,@r0
      00088E 64 80            [12] 2114 	xrl	a,#0x80
      000890 94 80            [12] 2115 	subb	a,#0x80
      000892 50 03            [24] 2116 	jnc	00424$
      000894 02r05r10         [24] 2117 	ljmp	00183$
      000897                       2118 00424$:
                                   2119 ;	life.c:159: for (y = 0; y < H; y++) {
      000897 78r14            [12] 2120 	mov	r0,#_y
      000899 06               [12] 2121 	inc	@r0
      00089A B6 00 02         [24] 2122 	cjne	@r0,#0x00,00425$
      00089D 08               [12] 2123 	inc	r0
      00089E 06               [12] 2124 	inc	@r0
      00089F                       2125 00425$:
      00089F 78r14            [12] 2126 	mov	r0,#_y
      0008A1 C3               [12] 2127 	clr	c
      0008A2 E6               [12] 2128 	mov	a,@r0
      0008A3 94 40            [12] 2129 	subb	a,#0x40
      0008A5 08               [12] 2130 	inc	r0
      0008A6 E6               [12] 2131 	mov	a,@r0
      0008A7 64 80            [12] 2132 	xrl	a,#0x80
      0008A9 94 80            [12] 2133 	subb	a,#0x80
      0008AB 50 03            [24] 2134 	jnc	00426$
      0008AD 02r04rE8         [24] 2135 	ljmp	00185$
      0008B0                       2136 00426$:
                                   2137 ;	life.c:190: cycle2 = !cycle2;
      0008B0 78r1D            [12] 2138 	mov	r0,#_cycle2
      0008B2 E6               [12] 2139 	mov	a,@r0
      0008B3 B4 01 00         [24] 2140 	cjne	a,#0x01,00427$
      0008B6                       2141 00427$:
      0008B6 92*00            [24] 2142 	mov	b0,c
      0008B8 78r1D            [12] 2143 	mov	r0,#_cycle2
      0008BA E4               [12] 2144 	clr	a
      0008BB 33               [12] 2145 	rlc	a
      0008BC F6               [12] 2146 	mov	@r0,a
                                   2147 ;	life.c:191: fixed = !fixed;
      0008BD 78r1C            [12] 2148 	mov	r0,#_fixed
      0008BF E6               [12] 2149 	mov	a,@r0
      0008C0 B4 01 00         [24] 2150 	cjne	a,#0x01,00428$
      0008C3                       2151 00428$:
      0008C3 92*00            [24] 2152 	mov	b0,c
      0008C5 78r1C            [12] 2153 	mov	r0,#_fixed
      0008C7 E4               [12] 2154 	clr	a
      0008C8 33               [12] 2155 	rlc	a
      0008C9 F6               [12] 2156 	mov	@r0,a
                                   2157 ;	life.c:193: memcpy(pu, u, sizeof (u));
      0008CA E4               [12] 2158 	clr	a
      0008CB C0 E0            [24] 2159 	push	acc
      0008CD 74 08            [12] 2160 	mov	a,#0x08
      0008CF C0 E0            [24] 2161 	push	acc
      0008D1 74r00            [12] 2162 	mov	a,#_u
      0008D3 C0 E0            [24] 2163 	push	acc
      0008D5 74s08            [12] 2164 	mov	a,#(_u >> 8)
      0008D7 C0 E0            [24] 2165 	push	acc
      0008D9 E4               [12] 2166 	clr	a
      0008DA C0 E0            [24] 2167 	push	acc
      0008DC 90r00r00         [24] 2168 	mov	dptr,#_pu
      0008DF 75 F0 00         [24] 2169 	mov	b,#0x00
      0008E2 12r00r00         [24] 2170 	lcall	___memcpy
      0008E5 E5 81            [12] 2171 	mov	a,sp
      0008E7 24 FB            [12] 2172 	add	a,#0xfb
      0008E9 F5 81            [12] 2173 	mov	sp,a
                                   2174 ;	life.c:194: memcpy(u, nu, sizeof (nu));
      0008EB E4               [12] 2175 	clr	a
      0008EC C0 E0            [24] 2176 	push	acc
      0008EE 74 08            [12] 2177 	mov	a,#0x08
      0008F0 C0 E0            [24] 2178 	push	acc
      0008F2 74r00            [12] 2179 	mov	a,#_nu
      0008F4 C0 E0            [24] 2180 	push	acc
      0008F6 74s10            [12] 2181 	mov	a,#(_nu >> 8)
      0008F8 C0 E0            [24] 2182 	push	acc
      0008FA E4               [12] 2183 	clr	a
      0008FB C0 E0            [24] 2184 	push	acc
      0008FD 90r08r00         [24] 2185 	mov	dptr,#_u
      000900 75 F0 00         [24] 2186 	mov	b,#0x00
      000903 12r00r00         [24] 2187 	lcall	___memcpy
      000906 E5 81            [12] 2188 	mov	a,sp
      000908 24 FB            [12] 2189 	add	a,#0xfb
      00090A F5 81            [12] 2190 	mov	sp,a
                                   2191 ;	life.c:232: if (fixed || cycle2) {
      00090C 78r1C            [12] 2192 	mov	r0,#_fixed
      00090E E6               [12] 2193 	mov	a,@r0
      00090F 70 08            [24] 2194 	jnz	00120$
      000911 78r1D            [12] 2195 	mov	r0,#_cycle2
      000913 E6               [12] 2196 	mov	a,@r0
      000914 70 03            [24] 2197 	jnz	00430$
      000916 02r04rC0         [24] 2198 	ljmp	00192$
      000919                       2199 00430$:
      000919                       2200 00120$:
                                   2201 ;	life.c:233: printstr("DONE\r\n");
      000919 7Dr2C            [12] 2202 	mov	r5,#___str_6
      00091B 7Es00            [12] 2203 	mov	r6,#(___str_6 >> 8)
      00091D 7F 80            [12] 2204 	mov	r7,#0x80
                                   2205 ;	life.c:48: return;
      00091F                       2206 00188$:
                                   2207 ;	life.c:46: for (; *s; s++) putchar(*s);
      00091F 8D 82            [24] 2208 	mov	dpl,r5
      000921 8E 83            [24] 2209 	mov	dph,r6
      000923 8F F0            [24] 2210 	mov	b,r7
      000925 12r00r00         [24] 2211 	lcall	__gptrget
      000928 FC               [12] 2212 	mov	r4,a
      000929 60 10            [24] 2213 	jz	00162$
      00092B 7B 00            [12] 2214 	mov	r3,#0x00
      00092D 8C 82            [24] 2215 	mov	dpl,r4
      00092F 8B 83            [24] 2216 	mov	dph,r3
      000931 12r00r00         [24] 2217 	lcall	_putchar
      000934 0D               [12] 2218 	inc	r5
                                   2219 ;	life.c:233: printstr("DONE\r\n");
      000935 BD 00 E7         [24] 2220 	cjne	r5,#0x00,00188$
      000938 0E               [12] 2221 	inc	r6
      000939 80 E4            [24] 2222 	sjmp	00188$
      00093B                       2223 00162$:
                                   2224 ;	life.c:234: (void)getchar();
      00093B 12r00r05         [24] 2225 	lcall	_getchar
                                   2226 ;	life.c:235: break;
      00093E                       2227 00123$:
                                   2228 ;	life.c:239: if (i1) {
      00093E 78r11            [12] 2229 	mov	r0,#_i1
      000940 E6               [12] 2230 	mov	a,@r0
      000941 60 25            [24] 2231 	jz	00198$
                                   2232 ;	life.c:240: printstr("BREAK\r\n");
      000943 7Dr33            [12] 2233 	mov	r5,#___str_7
      000945 7Es00            [12] 2234 	mov	r6,#(___str_7 >> 8)
      000947 7F 80            [12] 2235 	mov	r7,#0x80
                                   2236 ;	life.c:48: return;
      000949                       2237 00195$:
                                   2238 ;	life.c:46: for (; *s; s++) putchar(*s);
      000949 8D 82            [24] 2239 	mov	dpl,r5
      00094B 8E 83            [24] 2240 	mov	dph,r6
      00094D 8F F0            [24] 2241 	mov	b,r7
      00094F 12r00r00         [24] 2242 	lcall	__gptrget
      000952 FC               [12] 2243 	mov	r4,a
      000953 60 10            [24] 2244 	jz	00164$
      000955 7B 00            [12] 2245 	mov	r3,#0x00
      000957 8C 82            [24] 2246 	mov	dpl,r4
      000959 8B 83            [24] 2247 	mov	dph,r3
      00095B 12r00r00         [24] 2248 	lcall	_putchar
      00095E 0D               [12] 2249 	inc	r5
                                   2250 ;	life.c:240: printstr("BREAK\r\n");
      00095F BD 00 E7         [24] 2251 	cjne	r5,#0x00,00195$
      000962 0E               [12] 2252 	inc	r6
      000963 80 E4            [24] 2253 	sjmp	00195$
      000965                       2254 00164$:
                                   2255 ;	life.c:241: (void)getchar();
      000965 12r00r05         [24] 2256 	lcall	_getchar
      000968                       2257 00198$:
                                   2258 ;	life.c:206: for (i0 = 0; !i0; ) {		
      000968 78r10            [12] 2259 	mov	r0,#_i0
      00096A E6               [12] 2260 	mov	a,@r0
      00096B 70 03            [24] 2261 	jnz	00436$
      00096D 02r02r3B         [24] 2262 	ljmp	00197$
      000970                       2263 00436$:
                                   2264 ;	life.c:245: terminate:
      000970                       2265 00127$:
                                   2266 ;	life.c:246: EA = 0;
                                   2267 ;	assignBit
      000970 C2 AF            [12] 2268 	clr	_EA
                                   2269 ;	life.c:247: printstr("TERM\r\n");
      000972 7Dr3B            [12] 2270 	mov	r5,#___str_8
      000974 7Es00            [12] 2271 	mov	r6,#(___str_8 >> 8)
      000976 7F 80            [12] 2272 	mov	r7,#0x80
                                   2273 ;	life.c:48: return;
      000978                       2274 00200$:
                                   2275 ;	life.c:46: for (; *s; s++) putchar(*s);
      000978 8D 82            [24] 2276 	mov	dpl,r5
      00097A 8E 83            [24] 2277 	mov	dph,r6
      00097C 8F F0            [24] 2278 	mov	b,r7
      00097E 12r00r00         [24] 2279 	lcall	__gptrget
      000981 FC               [12] 2280 	mov	r4,a
      000982 60 10            [24] 2281 	jz	00166$
      000984 7B 00            [12] 2282 	mov	r3,#0x00
      000986 8C 82            [24] 2283 	mov	dpl,r4
      000988 8B 83            [24] 2284 	mov	dph,r3
      00098A 12r00r00         [24] 2285 	lcall	_putchar
      00098D 0D               [12] 2286 	inc	r5
                                   2287 ;	life.c:247: printstr("TERM\r\n");
      00098E BD 00 E7         [24] 2288 	cjne	r5,#0x00,00200$
      000991 0E               [12] 2289 	inc	r6
      000992 80 E4            [24] 2290 	sjmp	00200$
      000994                       2291 00166$:
                                   2292 ;	life.c:248: (void)getchar();
      000994 12r00r05         [24] 2293 	lcall	_getchar
                                   2294 ;	life.c:252: __endasm;
      000997 02 00 00         [24] 2295 	ljmp	0
                                   2296 ;	life.c:253: }
      00099A 85*00 81         [24] 2297 	mov	sp,_bp
      00099D D0*00            [24] 2298 	pop	_bp
      00099F 22               [24] 2299 	ret
                                   2300 	.area CSEG    (CODE)
                                   2301 	.area CONST   (CODE)
                                   2302 	.area CONST   (CODE)
      000000                       2303 ___str_0:
      000000 1B                    2304 	.db 0x1b
      000001 5B 32 4A              2305 	.ascii "[2J"
      000004 1B                    2306 	.db 0x1b
      000005 5B 6D                 2307 	.ascii "[m"
      000007 00                    2308 	.db 0x00
                                   2309 	.area CSEG    (CODE)
                                   2310 	.area CONST   (CODE)
      000008                       2311 ___str_1:
      000008 0D                    2312 	.db 0x0d
      000009 0A                    2313 	.db 0x0a
      00000A 00                    2314 	.db 0x00
                                   2315 	.area CSEG    (CODE)
                                   2316 	.area CONST   (CODE)
      00000B                       2317 ___str_2:
      00000B 4C 4F 41 44 20 3C     2318 	.ascii "LOAD <"
      000011 00                    2319 	.db 0x00
                                   2320 	.area CSEG    (CODE)
                                   2321 	.area CONST   (CODE)
      000012                       2322 ___str_3:
      000012 3E                    2323 	.ascii ">"
      000013 0D                    2324 	.db 0x0d
      000014 0A                    2325 	.db 0x0a
      000015 00                    2326 	.db 0x00
                                   2327 	.area CSEG    (CODE)
                                   2328 	.area CONST   (CODE)
      000016                       2329 ___str_4:
      000016 1B                    2330 	.db 0x1b
      000017 5B 32 4A              2331 	.ascii "[2J"
      00001A 1B                    2332 	.db 0x1b
      00001B 5B 6D 49 4E 49 54     2333 	.ascii "[mINIT"
      000021 0D                    2334 	.db 0x0d
      000022 0A                    2335 	.db 0x0a
      000023 00                    2336 	.db 0x00
                                   2337 	.area CSEG    (CODE)
                                   2338 	.area CONST   (CODE)
      000024                       2339 ___str_5:
      000024 52 45 41 44 59        2340 	.ascii "READY"
      000029 0D                    2341 	.db 0x0d
      00002A 0A                    2342 	.db 0x0a
      00002B 00                    2343 	.db 0x00
                                   2344 	.area CSEG    (CODE)
                                   2345 	.area CONST   (CODE)
      00002C                       2346 ___str_6:
      00002C 44 4F 4E 45           2347 	.ascii "DONE"
      000030 0D                    2348 	.db 0x0d
      000031 0A                    2349 	.db 0x0a
      000032 00                    2350 	.db 0x00
                                   2351 	.area CSEG    (CODE)
                                   2352 	.area CONST   (CODE)
      000033                       2353 ___str_7:
      000033 42 52 45 41 4B        2354 	.ascii "BREAK"
      000038 0D                    2355 	.db 0x0d
      000039 0A                    2356 	.db 0x0a
      00003A 00                    2357 	.db 0x00
                                   2358 	.area CSEG    (CODE)
                                   2359 	.area CONST   (CODE)
      00003B                       2360 ___str_8:
      00003B 54 45 52 4D           2361 	.ascii "TERM"
      00003F 0D                    2362 	.db 0x0d
      000040 0A                    2363 	.db 0x0a
      000041 00                    2364 	.db 0x00
                                   2365 	.area CSEG    (CODE)
                                   2366 	.area XINIT   (CODE)
                                   2367 	.area CABS    (ABS,CODE)
