                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _evolve
                                     13 	.globl _show
                                     14 	.globl _int1
                                     15 	.globl _int0
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _c
                                    141 	.globl _fixed
                                    142 	.globl _population
                                    143 	.globl _n
                                    144 	.globl _y1
                                    145 	.globl _x1
                                    146 	.globl _y
                                    147 	.globl _x
                                    148 	.globl _nu
                                    149 	.globl _u
                                    150 	.globl _i1
                                    151 	.globl _i0
                                    152 	.globl _putchar
                                    153 	.globl _getchar
                                    154 ;--------------------------------------------------------
                                    155 ; special function registers
                                    156 ;--------------------------------------------------------
                                    157 	.area RSEG    (ABS,DATA)
      000000                        158 	.org 0x0000
                           000080   159 _P0	=	0x0080
                           000081   160 _SP	=	0x0081
                           000082   161 _DPL	=	0x0082
                           000083   162 _DPH	=	0x0083
                           000087   163 _PCON	=	0x0087
                           000088   164 _TCON	=	0x0088
                           000089   165 _TMOD	=	0x0089
                           00008A   166 _TL0	=	0x008a
                           00008B   167 _TL1	=	0x008b
                           00008C   168 _TH0	=	0x008c
                           00008D   169 _TH1	=	0x008d
                           000090   170 _P1	=	0x0090
                           000098   171 _SCON	=	0x0098
                           000099   172 _SBUF	=	0x0099
                           0000A0   173 _P2	=	0x00a0
                           0000A8   174 _IE	=	0x00a8
                           0000B0   175 _P3	=	0x00b0
                           0000B8   176 _IP	=	0x00b8
                           0000C8   177 _T2CON	=	0x00c8
                           0000C9   178 _T2MOD	=	0x00c9
                           0000CA   179 _RCAP2L	=	0x00ca
                           0000CB   180 _RCAP2H	=	0x00cb
                           0000CC   181 _TL2	=	0x00cc
                           0000CD   182 _TH2	=	0x00cd
                           0000D0   183 _PSW	=	0x00d0
                           0000E0   184 _ACC	=	0x00e0
                           0000E0   185 _A	=	0x00e0
                           0000F0   186 _B	=	0x00f0
                                    187 ;--------------------------------------------------------
                                    188 ; special function bits
                                    189 ;--------------------------------------------------------
                                    190 	.area RSEG    (ABS,DATA)
      000000                        191 	.org 0x0000
                           000080   192 _P0_0	=	0x0080
                           000081   193 _P0_1	=	0x0081
                           000082   194 _P0_2	=	0x0082
                           000083   195 _P0_3	=	0x0083
                           000084   196 _P0_4	=	0x0084
                           000085   197 _P0_5	=	0x0085
                           000086   198 _P0_6	=	0x0086
                           000087   199 _P0_7	=	0x0087
                           000088   200 _IT0	=	0x0088
                           000089   201 _IE0	=	0x0089
                           00008A   202 _IT1	=	0x008a
                           00008B   203 _IE1	=	0x008b
                           00008C   204 _TR0	=	0x008c
                           00008D   205 _TF0	=	0x008d
                           00008E   206 _TR1	=	0x008e
                           00008F   207 _TF1	=	0x008f
                           000090   208 _P1_0	=	0x0090
                           000091   209 _P1_1	=	0x0091
                           000092   210 _P1_2	=	0x0092
                           000093   211 _P1_3	=	0x0093
                           000094   212 _P1_4	=	0x0094
                           000095   213 _P1_5	=	0x0095
                           000096   214 _P1_6	=	0x0096
                           000097   215 _P1_7	=	0x0097
                           000090   216 _T2	=	0x0090
                           000091   217 _T2EX	=	0x0091
                           000098   218 _RI	=	0x0098
                           000099   219 _TI	=	0x0099
                           00009A   220 _RB8	=	0x009a
                           00009B   221 _TB8	=	0x009b
                           00009C   222 _REN	=	0x009c
                           00009D   223 _SM2	=	0x009d
                           00009E   224 _SM1	=	0x009e
                           00009F   225 _SM0	=	0x009f
                           0000A0   226 _P2_0	=	0x00a0
                           0000A1   227 _P2_1	=	0x00a1
                           0000A2   228 _P2_2	=	0x00a2
                           0000A3   229 _P2_3	=	0x00a3
                           0000A4   230 _P2_4	=	0x00a4
                           0000A5   231 _P2_5	=	0x00a5
                           0000A6   232 _P2_6	=	0x00a6
                           0000A7   233 _P2_7	=	0x00a7
                           0000A8   234 _EX0	=	0x00a8
                           0000A9   235 _ET0	=	0x00a9
                           0000AA   236 _EX1	=	0x00aa
                           0000AB   237 _ET1	=	0x00ab
                           0000AC   238 _ES	=	0x00ac
                           0000AD   239 _ET2	=	0x00ad
                           0000AF   240 _EA	=	0x00af
                           0000B0   241 _P3_0	=	0x00b0
                           0000B1   242 _P3_1	=	0x00b1
                           0000B2   243 _P3_2	=	0x00b2
                           0000B3   244 _P3_3	=	0x00b3
                           0000B4   245 _P3_4	=	0x00b4
                           0000B5   246 _P3_5	=	0x00b5
                           0000B6   247 _P3_6	=	0x00b6
                           0000B7   248 _P3_7	=	0x00b7
                           0000B0   249 _RXD	=	0x00b0
                           0000B1   250 _TXD	=	0x00b1
                           0000B2   251 _INT0	=	0x00b2
                           0000B3   252 _INT1	=	0x00b3
                           0000B4   253 _T0	=	0x00b4
                           0000B5   254 _T1	=	0x00b5
                           0000B6   255 _WR	=	0x00b6
                           0000B7   256 _RD	=	0x00b7
                           0000B8   257 _PX0	=	0x00b8
                           0000B9   258 _PT0	=	0x00b9
                           0000BA   259 _PX1	=	0x00ba
                           0000BB   260 _PT1	=	0x00bb
                           0000BC   261 _PS	=	0x00bc
                           0000BD   262 _PT2	=	0x00bd
                           0000C8   263 _T2CON_0	=	0x00c8
                           0000C9   264 _T2CON_1	=	0x00c9
                           0000CA   265 _T2CON_2	=	0x00ca
                           0000CB   266 _T2CON_3	=	0x00cb
                           0000CC   267 _T2CON_4	=	0x00cc
                           0000CD   268 _T2CON_5	=	0x00cd
                           0000CE   269 _T2CON_6	=	0x00ce
                           0000CF   270 _T2CON_7	=	0x00cf
                           0000C8   271 _CP_RL2	=	0x00c8
                           0000C9   272 _C_T2	=	0x00c9
                           0000CA   273 _TR2	=	0x00ca
                           0000CB   274 _EXEN2	=	0x00cb
                           0000CC   275 _TCLK	=	0x00cc
                           0000CD   276 _RCLK	=	0x00cd
                           0000CE   277 _EXF2	=	0x00ce
                           0000CF   278 _TF2	=	0x00cf
                           0000D0   279 _P	=	0x00d0
                           0000D1   280 _FL	=	0x00d1
                           0000D2   281 _OV	=	0x00d2
                           0000D3   282 _RS0	=	0x00d3
                           0000D4   283 _RS1	=	0x00d4
                           0000D5   284 _F0	=	0x00d5
                           0000D6   285 _AC	=	0x00d6
                           0000D7   286 _CY	=	0x00d7
                                    287 ;--------------------------------------------------------
                                    288 ; overlayable register banks
                                    289 ;--------------------------------------------------------
                                    290 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        291 	.ds 8
                                    292 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        293 	.ds 8
                                    294 ;--------------------------------------------------------
                                    295 ; overlayable bit register bank
                                    296 ;--------------------------------------------------------
                                    297 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        298 bits:
      000000                        299 	.ds 1
                           008000   300 	b0 = bits[0]
                           008100   301 	b1 = bits[1]
                           008200   302 	b2 = bits[2]
                           008300   303 	b3 = bits[3]
                           008400   304 	b4 = bits[4]
                           008500   305 	b5 = bits[5]
                           008600   306 	b6 = bits[6]
                           008700   307 	b7 = bits[7]
                                    308 ;--------------------------------------------------------
                                    309 ; internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area DSEG    (DATA)
                                    312 ;--------------------------------------------------------
                                    313 ; overlayable items in internal ram 
                                    314 ;--------------------------------------------------------
                                    315 ;--------------------------------------------------------
                                    316 ; Stack segment in internal ram 
                                    317 ;--------------------------------------------------------
                                    318 	.area	SSEG
      000000                        319 __start__stack:
      000000                        320 	.ds	1
                                    321 
                                    322 ;--------------------------------------------------------
                                    323 ; indirectly addressable internal ram data
                                    324 ;--------------------------------------------------------
                                    325 	.area ISEG    (DATA)
                                    326 ;--------------------------------------------------------
                                    327 ; absolute internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area IABS    (ABS,DATA)
                                    330 	.area IABS    (ABS,DATA)
                                    331 ;--------------------------------------------------------
                                    332 ; bit data
                                    333 ;--------------------------------------------------------
                                    334 	.area BSEG    (BIT)
                                    335 ;--------------------------------------------------------
                                    336 ; paged external ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area PSEG    (PAG,XDATA)
                                    339 ;--------------------------------------------------------
                                    340 ; external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area XSEG    (XDATA)
      000000                        343 _i0::
      000000                        344 	.ds 2
      000002                        345 _i1::
      000002                        346 	.ds 2
      000004                        347 _u::
      000004                        348 	.ds 1024
      000404                        349 _nu::
      000404                        350 	.ds 1024
      000804                        351 _x::
      000804                        352 	.ds 2
      000806                        353 _y::
      000806                        354 	.ds 2
      000808                        355 _x1::
      000808                        356 	.ds 2
      00080A                        357 _y1::
      00080A                        358 	.ds 2
      00080C                        359 _n::
      00080C                        360 	.ds 2
      00080E                        361 _population::
      00080E                        362 	.ds 2
      000810                        363 _fixed::
      000810                        364 	.ds 2
      000812                        365 _c::
      000812                        366 	.ds 2
                                    367 ;--------------------------------------------------------
                                    368 ; absolute external ram data
                                    369 ;--------------------------------------------------------
                                    370 	.area XABS    (ABS,XDATA)
                                    371 ;--------------------------------------------------------
                                    372 ; external initialized ram data
                                    373 ;--------------------------------------------------------
                                    374 	.area XISEG   (XDATA)
                                    375 	.area HOME    (CODE)
                                    376 	.area GSINIT0 (CODE)
                                    377 	.area GSINIT1 (CODE)
                                    378 	.area GSINIT2 (CODE)
                                    379 	.area GSINIT3 (CODE)
                                    380 	.area GSINIT4 (CODE)
                                    381 	.area GSINIT5 (CODE)
                                    382 	.area GSINIT  (CODE)
                                    383 	.area GSFINAL (CODE)
                                    384 	.area CSEG    (CODE)
                                    385 ;--------------------------------------------------------
                                    386 ; interrupt vector 
                                    387 ;--------------------------------------------------------
                                    388 	.area HOME    (CODE)
      000000                        389 __interrupt_vect:
      000000 02r00r00         [24]  390 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0D         [24]  391 	ljmp	_int0
      000006                        392 	.ds	5
      00000B 32               [24]  393 	reti
      00000C                        394 	.ds	7
      000013 02r00r23         [24]  395 	ljmp	_int1
                                    396 ;--------------------------------------------------------
                                    397 ; global & static initialisations
                                    398 ;--------------------------------------------------------
                                    399 	.area HOME    (CODE)
                                    400 	.area GSINIT  (CODE)
                                    401 	.area GSFINAL (CODE)
                                    402 	.area GSINIT  (CODE)
                                    403 	.globl __sdcc_gsinit_startup
                                    404 	.globl __sdcc_program_startup
                                    405 	.globl __start__stack
                                    406 	.globl __mcs51_genXINIT
                                    407 	.globl __mcs51_genXRAMCLEAR
                                    408 	.globl __mcs51_genRAMCLEAR
                                    409 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  410 	ljmp	__sdcc_program_startup
                                    411 ;--------------------------------------------------------
                                    412 ; Home
                                    413 ;--------------------------------------------------------
                                    414 	.area HOME    (CODE)
                                    415 	.area HOME    (CODE)
      000016                        416 __sdcc_program_startup:
      000016 02r04r17         [24]  417 	ljmp	_main
                                    418 ;	return from main will return to caller
                                    419 ;--------------------------------------------------------
                                    420 ; code
                                    421 ;--------------------------------------------------------
                                    422 	.area CSEG    (CODE)
                                    423 ;------------------------------------------------------------
                                    424 ;Allocation info for local variables in function 'putchar'
                                    425 ;------------------------------------------------------------
                                    426 ;c                         Allocated to registers 
                                    427 ;------------------------------------------------------------
                                    428 ;	life.c:7: int putchar(int c) __naked {
                                    429 ;	-----------------------------------------
                                    430 ;	 function putchar
                                    431 ;	-----------------------------------------
      000000                        432 _putchar:
                                    433 ;	naked function: no prologue.
                                    434 ;	life.c:12: __endasm;
      000000 E5 82            [12]  435 	mov	a, dpl
      000002 02 00 30         [24]  436 	ljmp	0x0030
                                    437 ;	life.c:13: }
                                    438 ;	naked function: no epilogue.
                                    439 ;------------------------------------------------------------
                                    440 ;Allocation info for local variables in function 'getchar'
                                    441 ;------------------------------------------------------------
                                    442 ;	life.c:15: int getchar(void) {
                                    443 ;	-----------------------------------------
                                    444 ;	 function getchar
                                    445 ;	-----------------------------------------
      000005                        446 _getchar:
                           000007   447 	ar7 = 0x07
                           000006   448 	ar6 = 0x06
                           000005   449 	ar5 = 0x05
                           000004   450 	ar4 = 0x04
                           000003   451 	ar3 = 0x03
                           000002   452 	ar2 = 0x02
                           000001   453 	ar1 = 0x01
                           000000   454 	ar0 = 0x00
                                    455 ;	life.c:20: __endasm;
      000005 12 00 32         [24]  456 	lcall	0x0032
      000008 C2 83            [12]  457 	clr	dph
      00000A F5 82            [12]  458 	mov	dpl, a
                                    459 ;	life.c:21: }
      00000C 22               [24]  460 	ret
                                    461 ;------------------------------------------------------------
                                    462 ;Allocation info for local variables in function 'int0'
                                    463 ;------------------------------------------------------------
                                    464 ;	life.c:32: void int0(void) __interrupt 0 __using 1 {
                                    465 ;	-----------------------------------------
                                    466 ;	 function int0
                                    467 ;	-----------------------------------------
      00000D                        468 _int0:
                           00000F   469 	ar7 = 0x0f
                           00000E   470 	ar6 = 0x0e
                           00000D   471 	ar5 = 0x0d
                           00000C   472 	ar4 = 0x0c
                           00000B   473 	ar3 = 0x0b
                           00000A   474 	ar2 = 0x0a
                           000009   475 	ar1 = 0x09
                           000008   476 	ar0 = 0x08
      00000D C0 E0            [24]  477 	push	acc
      00000F C0 82            [24]  478 	push	dpl
      000011 C0 83            [24]  479 	push	dph
                                    480 ;	life.c:33: i0 = 1;
      000013 90r00r00         [24]  481 	mov	dptr,#_i0
      000016 74 01            [12]  482 	mov	a,#0x01
      000018 F0               [24]  483 	movx	@dptr,a
      000019 E4               [12]  484 	clr	a
      00001A A3               [24]  485 	inc	dptr
      00001B F0               [24]  486 	movx	@dptr,a
                                    487 ;	life.c:34: }
      00001C D0 83            [24]  488 	pop	dph
      00001E D0 82            [24]  489 	pop	dpl
      000020 D0 E0            [24]  490 	pop	acc
      000022 32               [24]  491 	reti
                                    492 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    493 ;	eliminated unneeded push/pop psw
                                    494 ;	eliminated unneeded push/pop b
                                    495 ;------------------------------------------------------------
                                    496 ;Allocation info for local variables in function 'int1'
                                    497 ;------------------------------------------------------------
                                    498 ;	life.c:37: void int1(void) __interrupt 2 __using 1 {
                                    499 ;	-----------------------------------------
                                    500 ;	 function int1
                                    501 ;	-----------------------------------------
      000023                        502 _int1:
      000023 C0 E0            [24]  503 	push	acc
      000025 C0 82            [24]  504 	push	dpl
      000027 C0 83            [24]  505 	push	dph
                                    506 ;	life.c:38: i1 = 1;
      000029 90r00r02         [24]  507 	mov	dptr,#_i1
      00002C 74 01            [12]  508 	mov	a,#0x01
      00002E F0               [24]  509 	movx	@dptr,a
      00002F E4               [12]  510 	clr	a
      000030 A3               [24]  511 	inc	dptr
      000031 F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:39: }
      000032 D0 83            [24]  514 	pop	dph
      000034 D0 82            [24]  515 	pop	dpl
      000036 D0 E0            [24]  516 	pop	acc
      000038 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;	life.c:41: void show(void) {
                                    525 ;	-----------------------------------------
                                    526 ;	 function show
                                    527 ;	-----------------------------------------
      000039                        528 _show:
                           000007   529 	ar7 = 0x07
                           000006   530 	ar6 = 0x06
                           000005   531 	ar5 = 0x05
                           000004   532 	ar4 = 0x04
                           000003   533 	ar3 = 0x03
                           000002   534 	ar2 = 0x02
                           000001   535 	ar1 = 0x01
                           000000   536 	ar0 = 0x00
                                    537 ;	life.c:42: printf("\033[2J\033[m%04x\r\n", population);
      000039 90r08r0E         [24]  538 	mov	dptr,#_population
      00003C E0               [24]  539 	movx	a,@dptr
      00003D C0 E0            [24]  540 	push	acc
      00003F A3               [24]  541 	inc	dptr
      000040 E0               [24]  542 	movx	a,@dptr
      000041 C0 E0            [24]  543 	push	acc
      000043 74r00            [12]  544 	mov	a,#___str_0
      000045 C0 E0            [24]  545 	push	acc
      000047 74s00            [12]  546 	mov	a,#(___str_0 >> 8)
      000049 C0 E0            [24]  547 	push	acc
      00004B 74 80            [12]  548 	mov	a,#0x80
      00004D C0 E0            [24]  549 	push	acc
      00004F 12r00r00         [24]  550 	lcall	_printf
      000052 E5 81            [12]  551 	mov	a,sp
      000054 24 FB            [12]  552 	add	a,#0xfb
      000056 F5 81            [12]  553 	mov	sp,a
                                    554 ;	life.c:43: population++;
      000058 90r08r0E         [24]  555 	mov	dptr,#_population
      00005B E0               [24]  556 	movx	a,@dptr
      00005C 24 01            [12]  557 	add	a,#0x01
      00005E F0               [24]  558 	movx	@dptr,a
      00005F A3               [24]  559 	inc	dptr
      000060 E0               [24]  560 	movx	a,@dptr
      000061 34 00            [12]  561 	addc	a,#0x00
      000063 F0               [24]  562 	movx	@dptr,a
                                    563 ;	life.c:45: for (y = 0; y < H; y++) {
      000064 90r08r06         [24]  564 	mov	dptr,#_y
      000067 E4               [12]  565 	clr	a
      000068 F0               [24]  566 	movx	@dptr,a
      000069 A3               [24]  567 	inc	dptr
      00006A F0               [24]  568 	movx	@dptr,a
      00006B                        569 00108$:
                                    570 ;	life.c:46: for (x = 0; x < W; x++)
      00006B 90r08r04         [24]  571 	mov	dptr,#_x
      00006E E4               [12]  572 	clr	a
      00006F F0               [24]  573 	movx	@dptr,a
      000070 A3               [24]  574 	inc	dptr
      000071 F0               [24]  575 	movx	@dptr,a
      000072                        576 00106$:
                                    577 ;	life.c:47: if (u[y][x]) printf("\033[01m[]\033[m");
      000072 90r08r06         [24]  578 	mov	dptr,#_y
      000075 E0               [24]  579 	movx	a,@dptr
      000076 FE               [12]  580 	mov	r6,a
      000077 A3               [24]  581 	inc	dptr
      000078 E0               [24]  582 	movx	a,@dptr
      000079 C4               [12]  583 	swap	a
      00007A 23               [12]  584 	rl	a
      00007B 54 E0            [12]  585 	anl	a,#0xe0
      00007D CE               [12]  586 	xch	a,r6
      00007E C4               [12]  587 	swap	a
      00007F 23               [12]  588 	rl	a
      000080 CE               [12]  589 	xch	a,r6
      000081 6E               [12]  590 	xrl	a,r6
      000082 CE               [12]  591 	xch	a,r6
      000083 54 E0            [12]  592 	anl	a,#0xe0
      000085 CE               [12]  593 	xch	a,r6
      000086 6E               [12]  594 	xrl	a,r6
      000087 FF               [12]  595 	mov	r7,a
      000088 EE               [12]  596 	mov	a,r6
      000089 24r04            [12]  597 	add	a,#_u
      00008B FE               [12]  598 	mov	r6,a
      00008C EF               [12]  599 	mov	a,r7
      00008D 34s00            [12]  600 	addc	a,#(_u >> 8)
      00008F FF               [12]  601 	mov	r7,a
      000090 90r08r04         [24]  602 	mov	dptr,#_x
      000093 E0               [24]  603 	movx	a,@dptr
      000094 FC               [12]  604 	mov	r4,a
      000095 A3               [24]  605 	inc	dptr
      000096 E0               [24]  606 	movx	a,@dptr
      000097 FD               [12]  607 	mov	r5,a
      000098 EC               [12]  608 	mov	a,r4
      000099 2E               [12]  609 	add	a,r6
      00009A FE               [12]  610 	mov	r6,a
      00009B ED               [12]  611 	mov	a,r5
      00009C 3F               [12]  612 	addc	a,r7
      00009D FF               [12]  613 	mov	r7,a
      00009E 8E 82            [24]  614 	mov	dpl,r6
      0000A0 8F 83            [24]  615 	mov	dph,r7
      0000A2 E0               [24]  616 	movx	a,@dptr
      0000A3 60 17            [24]  617 	jz	00102$
      0000A5 74r0E            [12]  618 	mov	a,#___str_1
      0000A7 C0 E0            [24]  619 	push	acc
      0000A9 74s00            [12]  620 	mov	a,#(___str_1 >> 8)
      0000AB C0 E0            [24]  621 	push	acc
      0000AD 74 80            [12]  622 	mov	a,#0x80
      0000AF C0 E0            [24]  623 	push	acc
      0000B1 12r00r00         [24]  624 	lcall	_printf
      0000B4 15 81            [12]  625 	dec	sp
      0000B6 15 81            [12]  626 	dec	sp
      0000B8 15 81            [12]  627 	dec	sp
      0000BA 80 15            [24]  628 	sjmp	00107$
      0000BC                        629 00102$:
                                    630 ;	life.c:48: else printf("  ");
      0000BC 74r19            [12]  631 	mov	a,#___str_2
      0000BE C0 E0            [24]  632 	push	acc
      0000C0 74s00            [12]  633 	mov	a,#(___str_2 >> 8)
      0000C2 C0 E0            [24]  634 	push	acc
      0000C4 74 80            [12]  635 	mov	a,#0x80
      0000C6 C0 E0            [24]  636 	push	acc
      0000C8 12r00r00         [24]  637 	lcall	_printf
      0000CB 15 81            [12]  638 	dec	sp
      0000CD 15 81            [12]  639 	dec	sp
      0000CF 15 81            [12]  640 	dec	sp
      0000D1                        641 00107$:
                                    642 ;	life.c:46: for (x = 0; x < W; x++)
      0000D1 90r08r04         [24]  643 	mov	dptr,#_x
      0000D4 E0               [24]  644 	movx	a,@dptr
      0000D5 24 01            [12]  645 	add	a,#0x01
      0000D7 F0               [24]  646 	movx	@dptr,a
      0000D8 A3               [24]  647 	inc	dptr
      0000D9 E0               [24]  648 	movx	a,@dptr
      0000DA 34 00            [12]  649 	addc	a,#0x00
      0000DC F0               [24]  650 	movx	@dptr,a
      0000DD 90r08r04         [24]  651 	mov	dptr,#_x
      0000E0 E0               [24]  652 	movx	a,@dptr
      0000E1 FE               [12]  653 	mov	r6,a
      0000E2 A3               [24]  654 	inc	dptr
      0000E3 E0               [24]  655 	movx	a,@dptr
      0000E4 FF               [12]  656 	mov	r7,a
      0000E5 C3               [12]  657 	clr	c
      0000E6 EE               [12]  658 	mov	a,r6
      0000E7 94 20            [12]  659 	subb	a,#0x20
      0000E9 EF               [12]  660 	mov	a,r7
      0000EA 64 80            [12]  661 	xrl	a,#0x80
      0000EC 94 80            [12]  662 	subb	a,#0x80
      0000EE 50 03            [24]  663 	jnc	00133$
      0000F0 02r00r72         [24]  664 	ljmp	00106$
      0000F3                        665 00133$:
                                    666 ;	life.c:49: printf("\r\n");
      0000F3 74r1C            [12]  667 	mov	a,#___str_3
      0000F5 C0 E0            [24]  668 	push	acc
      0000F7 74s00            [12]  669 	mov	a,#(___str_3 >> 8)
      0000F9 C0 E0            [24]  670 	push	acc
      0000FB 74 80            [12]  671 	mov	a,#0x80
      0000FD C0 E0            [24]  672 	push	acc
      0000FF 12r00r00         [24]  673 	lcall	_printf
      000102 15 81            [12]  674 	dec	sp
      000104 15 81            [12]  675 	dec	sp
      000106 15 81            [12]  676 	dec	sp
                                    677 ;	life.c:45: for (y = 0; y < H; y++) {
      000108 90r08r06         [24]  678 	mov	dptr,#_y
      00010B E0               [24]  679 	movx	a,@dptr
      00010C 24 01            [12]  680 	add	a,#0x01
      00010E F0               [24]  681 	movx	@dptr,a
      00010F A3               [24]  682 	inc	dptr
      000110 E0               [24]  683 	movx	a,@dptr
      000111 34 00            [12]  684 	addc	a,#0x00
      000113 F0               [24]  685 	movx	@dptr,a
      000114 90r08r06         [24]  686 	mov	dptr,#_y
      000117 E0               [24]  687 	movx	a,@dptr
      000118 FE               [12]  688 	mov	r6,a
      000119 A3               [24]  689 	inc	dptr
      00011A E0               [24]  690 	movx	a,@dptr
      00011B FF               [12]  691 	mov	r7,a
      00011C C3               [12]  692 	clr	c
      00011D EE               [12]  693 	mov	a,r6
      00011E 94 20            [12]  694 	subb	a,#0x20
      000120 EF               [12]  695 	mov	a,r7
      000121 64 80            [12]  696 	xrl	a,#0x80
      000123 94 80            [12]  697 	subb	a,#0x80
      000125 50 03            [24]  698 	jnc	00134$
      000127 02r00r6B         [24]  699 	ljmp	00108$
      00012A                        700 00134$:
                                    701 ;	life.c:52: return;
                                    702 ;	life.c:53: }
      00012A 22               [24]  703 	ret
                                    704 ;------------------------------------------------------------
                                    705 ;Allocation info for local variables in function 'evolve'
                                    706 ;------------------------------------------------------------
                                    707 ;	life.c:55: void evolve(void) {
                                    708 ;	-----------------------------------------
                                    709 ;	 function evolve
                                    710 ;	-----------------------------------------
      00012B                        711 _evolve:
                                    712 ;	life.c:56: fixed = 1;
      00012B 90r08r10         [24]  713 	mov	dptr,#_fixed
      00012E 74 01            [12]  714 	mov	a,#0x01
      000130 F0               [24]  715 	movx	@dptr,a
      000131 E4               [12]  716 	clr	a
      000132 A3               [24]  717 	inc	dptr
      000133 F0               [24]  718 	movx	@dptr,a
                                    719 ;	life.c:58: for (y = 0; y < H; y++) {
      000134 90r08r06         [24]  720 	mov	dptr,#_y
      000137 F0               [24]  721 	movx	@dptr,a
      000138 A3               [24]  722 	inc	dptr
      000139 F0               [24]  723 	movx	@dptr,a
      00013A                        724 00121$:
                                    725 ;	life.c:59: for (x = 0; x < W; x++) {
      00013A 90r08r04         [24]  726 	mov	dptr,#_x
      00013D E4               [12]  727 	clr	a
      00013E F0               [24]  728 	movx	@dptr,a
      00013F A3               [24]  729 	inc	dptr
      000140 F0               [24]  730 	movx	@dptr,a
      000141                        731 00119$:
                                    732 ;	life.c:60: n = 0;
      000141 90r08r0C         [24]  733 	mov	dptr,#_n
      000144 E4               [12]  734 	clr	a
      000145 F0               [24]  735 	movx	@dptr,a
      000146 A3               [24]  736 	inc	dptr
      000147 F0               [24]  737 	movx	@dptr,a
                                    738 ;	life.c:61: for (y1 = y - 1; y1 <= y + 1; y1++)
      000148 90r08r06         [24]  739 	mov	dptr,#_y
      00014B E0               [24]  740 	movx	a,@dptr
      00014C FE               [12]  741 	mov	r6,a
      00014D A3               [24]  742 	inc	dptr
      00014E E0               [24]  743 	movx	a,@dptr
      00014F FF               [12]  744 	mov	r7,a
      000150 1E               [12]  745 	dec	r6
      000151 BE FF 01         [24]  746 	cjne	r6,#0xff,00203$
      000154 1F               [12]  747 	dec	r7
      000155                        748 00203$:
      000155 90r08r0A         [24]  749 	mov	dptr,#_y1
      000158 EE               [12]  750 	mov	a,r6
      000159 F0               [24]  751 	movx	@dptr,a
      00015A EF               [12]  752 	mov	a,r7
      00015B A3               [24]  753 	inc	dptr
      00015C F0               [24]  754 	movx	@dptr,a
      00015D                        755 00117$:
      00015D 90r08r06         [24]  756 	mov	dptr,#_y
      000160 E0               [24]  757 	movx	a,@dptr
      000161 FE               [12]  758 	mov	r6,a
      000162 A3               [24]  759 	inc	dptr
      000163 E0               [24]  760 	movx	a,@dptr
      000164 FF               [12]  761 	mov	r7,a
      000165 74 01            [12]  762 	mov	a,#0x01
      000167 2E               [12]  763 	add	a,r6
      000168 FC               [12]  764 	mov	r4,a
      000169 E4               [12]  765 	clr	a
      00016A 3F               [12]  766 	addc	a,r7
      00016B FD               [12]  767 	mov	r5,a
      00016C 90r08r0A         [24]  768 	mov	dptr,#_y1
      00016F E0               [24]  769 	movx	a,@dptr
      000170 FA               [12]  770 	mov	r2,a
      000171 A3               [24]  771 	inc	dptr
      000172 E0               [24]  772 	movx	a,@dptr
      000173 FB               [12]  773 	mov	r3,a
      000174 C3               [12]  774 	clr	c
      000175 EC               [12]  775 	mov	a,r4
      000176 9A               [12]  776 	subb	a,r2
      000177 ED               [12]  777 	mov	a,r5
      000178 64 80            [12]  778 	xrl	a,#0x80
      00017A 8B F0            [24]  779 	mov	b,r3
      00017C 63 F0 80         [24]  780 	xrl	b,#0x80
      00017F 95 F0            [12]  781 	subb	a,b
      000181 50 03            [24]  782 	jnc	00204$
      000183 02r02r63         [24]  783 	ljmp	00104$
      000186                        784 00204$:
                                    785 ;	life.c:62: for (x1 = x - 1; x1 <= x + 1; x1++)
      000186 90r08r04         [24]  786 	mov	dptr,#_x
      000189 E0               [24]  787 	movx	a,@dptr
      00018A FC               [12]  788 	mov	r4,a
      00018B A3               [24]  789 	inc	dptr
      00018C E0               [24]  790 	movx	a,@dptr
      00018D FD               [12]  791 	mov	r5,a
      00018E 1C               [12]  792 	dec	r4
      00018F BC FF 01         [24]  793 	cjne	r4,#0xff,00205$
      000192 1D               [12]  794 	dec	r5
      000193                        795 00205$:
      000193 90r08r08         [24]  796 	mov	dptr,#_x1
      000196 EC               [12]  797 	mov	a,r4
      000197 F0               [24]  798 	movx	@dptr,a
      000198 ED               [12]  799 	mov	a,r5
      000199 A3               [24]  800 	inc	dptr
      00019A F0               [24]  801 	movx	@dptr,a
      00019B                        802 00114$:
      00019B 90r08r04         [24]  803 	mov	dptr,#_x
      00019E E0               [24]  804 	movx	a,@dptr
      00019F FC               [12]  805 	mov	r4,a
      0001A0 A3               [24]  806 	inc	dptr
      0001A1 E0               [24]  807 	movx	a,@dptr
      0001A2 FD               [12]  808 	mov	r5,a
      0001A3 0C               [12]  809 	inc	r4
      0001A4 BC 00 01         [24]  810 	cjne	r4,#0x00,00206$
      0001A7 0D               [12]  811 	inc	r5
      0001A8                        812 00206$:
      0001A8 90r08r08         [24]  813 	mov	dptr,#_x1
      0001AB E0               [24]  814 	movx	a,@dptr
      0001AC FA               [12]  815 	mov	r2,a
      0001AD A3               [24]  816 	inc	dptr
      0001AE E0               [24]  817 	movx	a,@dptr
      0001AF FB               [12]  818 	mov	r3,a
      0001B0 C3               [12]  819 	clr	c
      0001B1 EC               [12]  820 	mov	a,r4
      0001B2 9A               [12]  821 	subb	a,r2
      0001B3 ED               [12]  822 	mov	a,r5
      0001B4 64 80            [12]  823 	xrl	a,#0x80
      0001B6 8B F0            [24]  824 	mov	b,r3
      0001B8 63 F0 80         [24]  825 	xrl	b,#0x80
      0001BB 95 F0            [12]  826 	subb	a,b
      0001BD 50 03            [24]  827 	jnc	00207$
      0001BF 02r02r54         [24]  828 	ljmp	00118$
      0001C2                        829 00207$:
                                    830 ;	life.c:63: if (u[(y1 + H) % H][(x1 + W) % W])
      0001C2 90r08r0A         [24]  831 	mov	dptr,#_y1
      0001C5 E0               [24]  832 	movx	a,@dptr
      0001C6 FC               [12]  833 	mov	r4,a
      0001C7 A3               [24]  834 	inc	dptr
      0001C8 E0               [24]  835 	movx	a,@dptr
      0001C9 FD               [12]  836 	mov	r5,a
      0001CA 74 20            [12]  837 	mov	a,#0x20
      0001CC 2C               [12]  838 	add	a,r4
      0001CD FC               [12]  839 	mov	r4,a
      0001CE E4               [12]  840 	clr	a
      0001CF 3D               [12]  841 	addc	a,r5
      0001D0 FD               [12]  842 	mov	r5,a
      0001D1 C0 03            [24]  843 	push	ar3
      0001D3 C0 02            [24]  844 	push	ar2
      0001D5 74 20            [12]  845 	mov	a,#0x20
      0001D7 C0 E0            [24]  846 	push	acc
      0001D9 E4               [12]  847 	clr	a
      0001DA C0 E0            [24]  848 	push	acc
      0001DC 8C 82            [24]  849 	mov	dpl,r4
      0001DE 8D 83            [24]  850 	mov	dph,r5
      0001E0 12r00r00         [24]  851 	lcall	__modsint
      0001E3 AC 82            [24]  852 	mov	r4,dpl
      0001E5 AD 83            [24]  853 	mov	r5,dph
      0001E7 15 81            [12]  854 	dec	sp
      0001E9 15 81            [12]  855 	dec	sp
      0001EB D0 02            [24]  856 	pop	ar2
      0001ED D0 03            [24]  857 	pop	ar3
      0001EF ED               [12]  858 	mov	a,r5
      0001F0 C4               [12]  859 	swap	a
      0001F1 23               [12]  860 	rl	a
      0001F2 54 E0            [12]  861 	anl	a,#0xe0
      0001F4 CC               [12]  862 	xch	a,r4
      0001F5 C4               [12]  863 	swap	a
      0001F6 23               [12]  864 	rl	a
      0001F7 CC               [12]  865 	xch	a,r4
      0001F8 6C               [12]  866 	xrl	a,r4
      0001F9 CC               [12]  867 	xch	a,r4
      0001FA 54 E0            [12]  868 	anl	a,#0xe0
      0001FC CC               [12]  869 	xch	a,r4
      0001FD 6C               [12]  870 	xrl	a,r4
      0001FE FD               [12]  871 	mov	r5,a
      0001FF EC               [12]  872 	mov	a,r4
      000200 24r04            [12]  873 	add	a,#_u
      000202 FC               [12]  874 	mov	r4,a
      000203 ED               [12]  875 	mov	a,r5
      000204 34s00            [12]  876 	addc	a,#(_u >> 8)
      000206 FD               [12]  877 	mov	r5,a
      000207 74 20            [12]  878 	mov	a,#0x20
      000209 2A               [12]  879 	add	a,r2
      00020A FA               [12]  880 	mov	r2,a
      00020B E4               [12]  881 	clr	a
      00020C 3B               [12]  882 	addc	a,r3
      00020D FB               [12]  883 	mov	r3,a
      00020E C0 05            [24]  884 	push	ar5
      000210 C0 04            [24]  885 	push	ar4
      000212 74 20            [12]  886 	mov	a,#0x20
      000214 C0 E0            [24]  887 	push	acc
      000216 E4               [12]  888 	clr	a
      000217 C0 E0            [24]  889 	push	acc
      000219 8A 82            [24]  890 	mov	dpl,r2
      00021B 8B 83            [24]  891 	mov	dph,r3
      00021D 12r00r00         [24]  892 	lcall	__modsint
      000220 AA 82            [24]  893 	mov	r2,dpl
      000222 AB 83            [24]  894 	mov	r3,dph
      000224 15 81            [12]  895 	dec	sp
      000226 15 81            [12]  896 	dec	sp
      000228 D0 04            [24]  897 	pop	ar4
      00022A D0 05            [24]  898 	pop	ar5
      00022C EA               [12]  899 	mov	a,r2
      00022D 2C               [12]  900 	add	a,r4
      00022E FC               [12]  901 	mov	r4,a
      00022F EB               [12]  902 	mov	a,r3
      000230 3D               [12]  903 	addc	a,r5
      000231 FD               [12]  904 	mov	r5,a
      000232 8C 82            [24]  905 	mov	dpl,r4
      000234 8D 83            [24]  906 	mov	dph,r5
      000236 E0               [24]  907 	movx	a,@dptr
      000237 60 0C            [24]  908 	jz	00115$
                                    909 ;	life.c:64: n++;
      000239 90r08r0C         [24]  910 	mov	dptr,#_n
      00023C E0               [24]  911 	movx	a,@dptr
      00023D 24 01            [12]  912 	add	a,#0x01
      00023F F0               [24]  913 	movx	@dptr,a
      000240 A3               [24]  914 	inc	dptr
      000241 E0               [24]  915 	movx	a,@dptr
      000242 34 00            [12]  916 	addc	a,#0x00
      000244 F0               [24]  917 	movx	@dptr,a
      000245                        918 00115$:
                                    919 ;	life.c:62: for (x1 = x - 1; x1 <= x + 1; x1++)
      000245 90r08r08         [24]  920 	mov	dptr,#_x1
      000248 E0               [24]  921 	movx	a,@dptr
      000249 24 01            [12]  922 	add	a,#0x01
      00024B F0               [24]  923 	movx	@dptr,a
      00024C A3               [24]  924 	inc	dptr
      00024D E0               [24]  925 	movx	a,@dptr
      00024E 34 00            [12]  926 	addc	a,#0x00
      000250 F0               [24]  927 	movx	@dptr,a
      000251 02r01r9B         [24]  928 	ljmp	00114$
      000254                        929 00118$:
                                    930 ;	life.c:61: for (y1 = y - 1; y1 <= y + 1; y1++)
      000254 90r08r0A         [24]  931 	mov	dptr,#_y1
      000257 E0               [24]  932 	movx	a,@dptr
      000258 24 01            [12]  933 	add	a,#0x01
      00025A F0               [24]  934 	movx	@dptr,a
      00025B A3               [24]  935 	inc	dptr
      00025C E0               [24]  936 	movx	a,@dptr
      00025D 34 00            [12]  937 	addc	a,#0x00
      00025F F0               [24]  938 	movx	@dptr,a
      000260 02r01r5D         [24]  939 	ljmp	00117$
      000263                        940 00104$:
                                    941 ;	life.c:66: if (u[y][x]) n--;
      000263 EF               [12]  942 	mov	a,r7
      000264 C4               [12]  943 	swap	a
      000265 23               [12]  944 	rl	a
      000266 54 E0            [12]  945 	anl	a,#0xe0
      000268 CE               [12]  946 	xch	a,r6
      000269 C4               [12]  947 	swap	a
      00026A 23               [12]  948 	rl	a
      00026B CE               [12]  949 	xch	a,r6
      00026C 6E               [12]  950 	xrl	a,r6
      00026D CE               [12]  951 	xch	a,r6
      00026E 54 E0            [12]  952 	anl	a,#0xe0
      000270 CE               [12]  953 	xch	a,r6
      000271 6E               [12]  954 	xrl	a,r6
      000272 FF               [12]  955 	mov	r7,a
      000273 EE               [12]  956 	mov	a,r6
      000274 24r04            [12]  957 	add	a,#_u
      000276 FE               [12]  958 	mov	r6,a
      000277 EF               [12]  959 	mov	a,r7
      000278 34s00            [12]  960 	addc	a,#(_u >> 8)
      00027A FF               [12]  961 	mov	r7,a
      00027B 90r08r04         [24]  962 	mov	dptr,#_x
      00027E E0               [24]  963 	movx	a,@dptr
      00027F FC               [12]  964 	mov	r4,a
      000280 A3               [24]  965 	inc	dptr
      000281 E0               [24]  966 	movx	a,@dptr
      000282 FD               [12]  967 	mov	r5,a
      000283 EC               [12]  968 	mov	a,r4
      000284 2E               [12]  969 	add	a,r6
      000285 FE               [12]  970 	mov	r6,a
      000286 ED               [12]  971 	mov	a,r5
      000287 3F               [12]  972 	addc	a,r7
      000288 FF               [12]  973 	mov	r7,a
      000289 8E 82            [24]  974 	mov	dpl,r6
      00028B 8F 83            [24]  975 	mov	dph,r7
      00028D E0               [24]  976 	movx	a,@dptr
      00028E 60 14            [24]  977 	jz	00106$
      000290 90r08r0C         [24]  978 	mov	dptr,#_n
      000293 E0               [24]  979 	movx	a,@dptr
      000294 24 FF            [12]  980 	add	a,#0xff
      000296 FE               [12]  981 	mov	r6,a
      000297 A3               [24]  982 	inc	dptr
      000298 E0               [24]  983 	movx	a,@dptr
      000299 34 FF            [12]  984 	addc	a,#0xff
      00029B FF               [12]  985 	mov	r7,a
      00029C 90r08r0C         [24]  986 	mov	dptr,#_n
      00029F EE               [12]  987 	mov	a,r6
      0002A0 F0               [24]  988 	movx	@dptr,a
      0002A1 EF               [12]  989 	mov	a,r7
      0002A2 A3               [24]  990 	inc	dptr
      0002A3 F0               [24]  991 	movx	@dptr,a
      0002A4                        992 00106$:
                                    993 ;	life.c:67: nu[y][x] = (n == 3 || (n == 2 && u[y][x]));
      0002A4 90r08r06         [24]  994 	mov	dptr,#_y
      0002A7 E0               [24]  995 	movx	a,@dptr
      0002A8 FE               [12]  996 	mov	r6,a
      0002A9 A3               [24]  997 	inc	dptr
      0002AA E0               [24]  998 	movx	a,@dptr
      0002AB C4               [12]  999 	swap	a
      0002AC 23               [12] 1000 	rl	a
      0002AD 54 E0            [12] 1001 	anl	a,#0xe0
      0002AF CE               [12] 1002 	xch	a,r6
      0002B0 C4               [12] 1003 	swap	a
      0002B1 23               [12] 1004 	rl	a
      0002B2 CE               [12] 1005 	xch	a,r6
      0002B3 6E               [12] 1006 	xrl	a,r6
      0002B4 CE               [12] 1007 	xch	a,r6
      0002B5 54 E0            [12] 1008 	anl	a,#0xe0
      0002B7 CE               [12] 1009 	xch	a,r6
      0002B8 6E               [12] 1010 	xrl	a,r6
      0002B9 FF               [12] 1011 	mov	r7,a
      0002BA EE               [12] 1012 	mov	a,r6
      0002BB 24r04            [12] 1013 	add	a,#_nu
      0002BD FC               [12] 1014 	mov	r4,a
      0002BE EF               [12] 1015 	mov	a,r7
      0002BF 34s04            [12] 1016 	addc	a,#(_nu >> 8)
      0002C1 FD               [12] 1017 	mov	r5,a
      0002C2 90r08r04         [24] 1018 	mov	dptr,#_x
      0002C5 E0               [24] 1019 	movx	a,@dptr
      0002C6 FA               [12] 1020 	mov	r2,a
      0002C7 A3               [24] 1021 	inc	dptr
      0002C8 E0               [24] 1022 	movx	a,@dptr
      0002C9 FB               [12] 1023 	mov	r3,a
      0002CA EA               [12] 1024 	mov	a,r2
      0002CB 2C               [12] 1025 	add	a,r4
      0002CC FC               [12] 1026 	mov	r4,a
      0002CD EB               [12] 1027 	mov	a,r3
      0002CE 3D               [12] 1028 	addc	a,r5
      0002CF FD               [12] 1029 	mov	r5,a
      0002D0 90r08r0C         [24] 1030 	mov	dptr,#_n
      0002D3 E0               [24] 1031 	movx	a,@dptr
      0002D4 F8               [12] 1032 	mov	r0,a
      0002D5 A3               [24] 1033 	inc	dptr
      0002D6 E0               [24] 1034 	movx	a,@dptr
      0002D7 F9               [12] 1035 	mov	r1,a
      0002D8 B8 03 05         [24] 1036 	cjne	r0,#0x03,00210$
      0002DB B9 00 02         [24] 1037 	cjne	r1,#0x00,00210$
      0002DE 80 1F            [24] 1038 	sjmp	00130$
      0002E0                       1039 00210$:
      0002E0 B8 02 18         [24] 1040 	cjne	r0,#0x02,00129$
      0002E3 B9 00 15         [24] 1041 	cjne	r1,#0x00,00129$
      0002E6 EE               [12] 1042 	mov	a,r6
      0002E7 24r04            [12] 1043 	add	a,#_u
      0002E9 FE               [12] 1044 	mov	r6,a
      0002EA EF               [12] 1045 	mov	a,r7
      0002EB 34s00            [12] 1046 	addc	a,#(_u >> 8)
      0002ED FF               [12] 1047 	mov	r7,a
      0002EE EA               [12] 1048 	mov	a,r2
      0002EF 2E               [12] 1049 	add	a,r6
      0002F0 FA               [12] 1050 	mov	r2,a
      0002F1 EB               [12] 1051 	mov	a,r3
      0002F2 3F               [12] 1052 	addc	a,r7
      0002F3 FB               [12] 1053 	mov	r3,a
      0002F4 8A 82            [24] 1054 	mov	dpl,r2
      0002F6 8B 83            [24] 1055 	mov	dph,r3
      0002F8 E0               [24] 1056 	movx	a,@dptr
      0002F9 70 04            [24] 1057 	jnz	00130$
      0002FB                       1058 00129$:
                                   1059 ;	assignBit
      0002FB C2*00            [12] 1060 	clr	b0
      0002FD 80 02            [24] 1061 	sjmp	00131$
      0002FF                       1062 00130$:
                                   1063 ;	assignBit
      0002FF D2*00            [12] 1064 	setb	b0
      000301                       1065 00131$:
      000301 A2*00            [12] 1066 	mov	c,b0
      000303 E4               [12] 1067 	clr	a
      000304 33               [12] 1068 	rlc	a
      000305 8C 82            [24] 1069 	mov	dpl,r4
      000307 8D 83            [24] 1070 	mov	dph,r5
      000309 F0               [24] 1071 	movx	@dptr,a
                                   1072 ;	life.c:59: for (x = 0; x < W; x++) {
      00030A 90r08r04         [24] 1073 	mov	dptr,#_x
      00030D E0               [24] 1074 	movx	a,@dptr
      00030E 24 01            [12] 1075 	add	a,#0x01
      000310 F0               [24] 1076 	movx	@dptr,a
      000311 A3               [24] 1077 	inc	dptr
      000312 E0               [24] 1078 	movx	a,@dptr
      000313 34 00            [12] 1079 	addc	a,#0x00
      000315 F0               [24] 1080 	movx	@dptr,a
      000316 90r08r04         [24] 1081 	mov	dptr,#_x
      000319 E0               [24] 1082 	movx	a,@dptr
      00031A FE               [12] 1083 	mov	r6,a
      00031B A3               [24] 1084 	inc	dptr
      00031C E0               [24] 1085 	movx	a,@dptr
      00031D FF               [12] 1086 	mov	r7,a
      00031E C3               [12] 1087 	clr	c
      00031F EE               [12] 1088 	mov	a,r6
      000320 94 20            [12] 1089 	subb	a,#0x20
      000322 EF               [12] 1090 	mov	a,r7
      000323 64 80            [12] 1091 	xrl	a,#0x80
      000325 94 80            [12] 1092 	subb	a,#0x80
      000327 50 03            [24] 1093 	jnc	00214$
      000329 02r01r41         [24] 1094 	ljmp	00119$
      00032C                       1095 00214$:
                                   1096 ;	life.c:58: for (y = 0; y < H; y++) {
      00032C 90r08r06         [24] 1097 	mov	dptr,#_y
      00032F E0               [24] 1098 	movx	a,@dptr
      000330 24 01            [12] 1099 	add	a,#0x01
      000332 F0               [24] 1100 	movx	@dptr,a
      000333 A3               [24] 1101 	inc	dptr
      000334 E0               [24] 1102 	movx	a,@dptr
      000335 34 00            [12] 1103 	addc	a,#0x00
      000337 F0               [24] 1104 	movx	@dptr,a
      000338 90r08r06         [24] 1105 	mov	dptr,#_y
      00033B E0               [24] 1106 	movx	a,@dptr
      00033C FE               [12] 1107 	mov	r6,a
      00033D A3               [24] 1108 	inc	dptr
      00033E E0               [24] 1109 	movx	a,@dptr
      00033F FF               [12] 1110 	mov	r7,a
      000340 C3               [12] 1111 	clr	c
      000341 EE               [12] 1112 	mov	a,r6
      000342 94 20            [12] 1113 	subb	a,#0x20
      000344 EF               [12] 1114 	mov	a,r7
      000345 64 80            [12] 1115 	xrl	a,#0x80
      000347 94 80            [12] 1116 	subb	a,#0x80
      000349 50 03            [24] 1117 	jnc	00215$
      00034B 02r01r3A         [24] 1118 	ljmp	00121$
      00034E                       1119 00215$:
                                   1120 ;	life.c:71: for (y = 0; y < H; y++)
      00034E 90r08r06         [24] 1121 	mov	dptr,#_y
      000351 E4               [12] 1122 	clr	a
      000352 F0               [24] 1123 	movx	@dptr,a
      000353 A3               [24] 1124 	inc	dptr
      000354 F0               [24] 1125 	movx	@dptr,a
      000355                       1126 00125$:
                                   1127 ;	life.c:72: for (x = 0; x < W; x++)
      000355 90r08r04         [24] 1128 	mov	dptr,#_x
      000358 E4               [12] 1129 	clr	a
      000359 F0               [24] 1130 	movx	@dptr,a
      00035A A3               [24] 1131 	inc	dptr
      00035B F0               [24] 1132 	movx	@dptr,a
      00035C                       1133 00123$:
                                   1134 ;	life.c:73: if (u[y][x] != nu[y][x]) {
      00035C 90r08r06         [24] 1135 	mov	dptr,#_y
      00035F E0               [24] 1136 	movx	a,@dptr
      000360 FE               [12] 1137 	mov	r6,a
      000361 A3               [24] 1138 	inc	dptr
      000362 E0               [24] 1139 	movx	a,@dptr
      000363 C4               [12] 1140 	swap	a
      000364 23               [12] 1141 	rl	a
      000365 54 E0            [12] 1142 	anl	a,#0xe0
      000367 CE               [12] 1143 	xch	a,r6
      000368 C4               [12] 1144 	swap	a
      000369 23               [12] 1145 	rl	a
      00036A CE               [12] 1146 	xch	a,r6
      00036B 6E               [12] 1147 	xrl	a,r6
      00036C CE               [12] 1148 	xch	a,r6
      00036D 54 E0            [12] 1149 	anl	a,#0xe0
      00036F CE               [12] 1150 	xch	a,r6
      000370 6E               [12] 1151 	xrl	a,r6
      000371 FF               [12] 1152 	mov	r7,a
      000372 EE               [12] 1153 	mov	a,r6
      000373 24r04            [12] 1154 	add	a,#_u
      000375 FC               [12] 1155 	mov	r4,a
      000376 EF               [12] 1156 	mov	a,r7
      000377 34s00            [12] 1157 	addc	a,#(_u >> 8)
      000379 FD               [12] 1158 	mov	r5,a
      00037A 90r08r04         [24] 1159 	mov	dptr,#_x
      00037D E0               [24] 1160 	movx	a,@dptr
      00037E FA               [12] 1161 	mov	r2,a
      00037F A3               [24] 1162 	inc	dptr
      000380 E0               [24] 1163 	movx	a,@dptr
      000381 FB               [12] 1164 	mov	r3,a
      000382 EA               [12] 1165 	mov	a,r2
      000383 2C               [12] 1166 	add	a,r4
      000384 F5 82            [12] 1167 	mov	dpl,a
      000386 EB               [12] 1168 	mov	a,r3
      000387 3D               [12] 1169 	addc	a,r5
      000388 F5 83            [12] 1170 	mov	dph,a
      00038A EE               [12] 1171 	mov	a,r6
      00038B 24r04            [12] 1172 	add	a,#_nu
      00038D FC               [12] 1173 	mov	r4,a
      00038E EF               [12] 1174 	mov	a,r7
      00038F 34s04            [12] 1175 	addc	a,#(_nu >> 8)
      000391 FD               [12] 1176 	mov	r5,a
      000392 EA               [12] 1177 	mov	a,r2
      000393 2C               [12] 1178 	add	a,r4
      000394 FC               [12] 1179 	mov	r4,a
      000395 EB               [12] 1180 	mov	a,r3
      000396 3D               [12] 1181 	addc	a,r5
      000397 FD               [12] 1182 	mov	r5,a
      000398 E0               [24] 1183 	movx	a,@dptr
      000399 F9               [12] 1184 	mov	r1,a
      00039A 8C 82            [24] 1185 	mov	dpl,r4
      00039C 8D 83            [24] 1186 	mov	dph,r5
      00039E E0               [24] 1187 	movx	a,@dptr
      00039F FC               [12] 1188 	mov	r4,a
      0003A0 E9               [12] 1189 	mov	a,r1
      0003A1 B5 04 02         [24] 1190 	cjne	a,ar4,00216$
      0003A4 80 2C            [24] 1191 	sjmp	00124$
      0003A6                       1192 00216$:
                                   1193 ;	life.c:74: u[y][x] = nu[y][x];
      0003A6 EE               [12] 1194 	mov	a,r6
      0003A7 24r04            [12] 1195 	add	a,#_u
      0003A9 FC               [12] 1196 	mov	r4,a
      0003AA EF               [12] 1197 	mov	a,r7
      0003AB 34s00            [12] 1198 	addc	a,#(_u >> 8)
      0003AD FD               [12] 1199 	mov	r5,a
      0003AE EA               [12] 1200 	mov	a,r2
      0003AF 2C               [12] 1201 	add	a,r4
      0003B0 FC               [12] 1202 	mov	r4,a
      0003B1 EB               [12] 1203 	mov	a,r3
      0003B2 3D               [12] 1204 	addc	a,r5
      0003B3 FD               [12] 1205 	mov	r5,a
      0003B4 EE               [12] 1206 	mov	a,r6
      0003B5 24r04            [12] 1207 	add	a,#_nu
      0003B7 FE               [12] 1208 	mov	r6,a
      0003B8 EF               [12] 1209 	mov	a,r7
      0003B9 34s04            [12] 1210 	addc	a,#(_nu >> 8)
      0003BB FF               [12] 1211 	mov	r7,a
      0003BC EA               [12] 1212 	mov	a,r2
      0003BD 2E               [12] 1213 	add	a,r6
      0003BE F5 82            [12] 1214 	mov	dpl,a
      0003C0 EB               [12] 1215 	mov	a,r3
      0003C1 3F               [12] 1216 	addc	a,r7
      0003C2 F5 83            [12] 1217 	mov	dph,a
      0003C4 E0               [24] 1218 	movx	a,@dptr
      0003C5 FF               [12] 1219 	mov	r7,a
      0003C6 8C 82            [24] 1220 	mov	dpl,r4
      0003C8 8D 83            [24] 1221 	mov	dph,r5
      0003CA F0               [24] 1222 	movx	@dptr,a
                                   1223 ;	life.c:75: fixed = 0;
      0003CB 90r08r10         [24] 1224 	mov	dptr,#_fixed
      0003CE E4               [12] 1225 	clr	a
      0003CF F0               [24] 1226 	movx	@dptr,a
      0003D0 A3               [24] 1227 	inc	dptr
      0003D1 F0               [24] 1228 	movx	@dptr,a
      0003D2                       1229 00124$:
                                   1230 ;	life.c:72: for (x = 0; x < W; x++)
      0003D2 90r08r04         [24] 1231 	mov	dptr,#_x
      0003D5 E0               [24] 1232 	movx	a,@dptr
      0003D6 24 01            [12] 1233 	add	a,#0x01
      0003D8 F0               [24] 1234 	movx	@dptr,a
      0003D9 A3               [24] 1235 	inc	dptr
      0003DA E0               [24] 1236 	movx	a,@dptr
      0003DB 34 00            [12] 1237 	addc	a,#0x00
      0003DD F0               [24] 1238 	movx	@dptr,a
      0003DE 90r08r04         [24] 1239 	mov	dptr,#_x
      0003E1 E0               [24] 1240 	movx	a,@dptr
      0003E2 FE               [12] 1241 	mov	r6,a
      0003E3 A3               [24] 1242 	inc	dptr
      0003E4 E0               [24] 1243 	movx	a,@dptr
      0003E5 FF               [12] 1244 	mov	r7,a
      0003E6 C3               [12] 1245 	clr	c
      0003E7 EE               [12] 1246 	mov	a,r6
      0003E8 94 20            [12] 1247 	subb	a,#0x20
      0003EA EF               [12] 1248 	mov	a,r7
      0003EB 64 80            [12] 1249 	xrl	a,#0x80
      0003ED 94 80            [12] 1250 	subb	a,#0x80
      0003EF 50 03            [24] 1251 	jnc	00217$
      0003F1 02r03r5C         [24] 1252 	ljmp	00123$
      0003F4                       1253 00217$:
                                   1254 ;	life.c:71: for (y = 0; y < H; y++)
      0003F4 90r08r06         [24] 1255 	mov	dptr,#_y
      0003F7 E0               [24] 1256 	movx	a,@dptr
      0003F8 24 01            [12] 1257 	add	a,#0x01
      0003FA F0               [24] 1258 	movx	@dptr,a
      0003FB A3               [24] 1259 	inc	dptr
      0003FC E0               [24] 1260 	movx	a,@dptr
      0003FD 34 00            [12] 1261 	addc	a,#0x00
      0003FF F0               [24] 1262 	movx	@dptr,a
      000400 90r08r06         [24] 1263 	mov	dptr,#_y
      000403 E0               [24] 1264 	movx	a,@dptr
      000404 FE               [12] 1265 	mov	r6,a
      000405 A3               [24] 1266 	inc	dptr
      000406 E0               [24] 1267 	movx	a,@dptr
      000407 FF               [12] 1268 	mov	r7,a
      000408 C3               [12] 1269 	clr	c
      000409 EE               [12] 1270 	mov	a,r6
      00040A 94 20            [12] 1271 	subb	a,#0x20
      00040C EF               [12] 1272 	mov	a,r7
      00040D 64 80            [12] 1273 	xrl	a,#0x80
      00040F 94 80            [12] 1274 	subb	a,#0x80
      000411 50 03            [24] 1275 	jnc	00218$
      000413 02r03r55         [24] 1276 	ljmp	00125$
      000416                       1277 00218$:
                                   1278 ;	life.c:78: return;
                                   1279 ;	life.c:79: }
      000416 22               [24] 1280 	ret
                                   1281 ;------------------------------------------------------------
                                   1282 ;Allocation info for local variables in function 'main'
                                   1283 ;------------------------------------------------------------
                                   1284 ;	life.c:81: void main(void) {
                                   1285 ;	-----------------------------------------
                                   1286 ;	 function main
                                   1287 ;	-----------------------------------------
      000417                       1288 _main:
                                   1289 ;	life.c:82: i0 = i1 = 0;
      000417 90r00r02         [24] 1290 	mov	dptr,#_i1
      00041A E4               [12] 1291 	clr	a
      00041B F0               [24] 1292 	movx	@dptr,a
      00041C A3               [24] 1293 	inc	dptr
      00041D F0               [24] 1294 	movx	@dptr,a
      00041E 90r00r00         [24] 1295 	mov	dptr,#_i0
      000421 F0               [24] 1296 	movx	@dptr,a
      000422 A3               [24] 1297 	inc	dptr
      000423 F0               [24] 1298 	movx	@dptr,a
                                   1299 ;	life.c:84: IT0 = 1;
                                   1300 ;	assignBit
      000424 D2 88            [12] 1301 	setb	_IT0
                                   1302 ;	life.c:85: IT1 = 1;
                                   1303 ;	assignBit
      000426 D2 8A            [12] 1304 	setb	_IT1
                                   1305 ;	life.c:86: EX0 = 1;
                                   1306 ;	assignBit
      000428 D2 A8            [12] 1307 	setb	_EX0
                                   1308 ;	life.c:87: EX1 = 1;
                                   1309 ;	assignBit
      00042A D2 AA            [12] 1310 	setb	_EX1
                                   1311 ;	life.c:88: EA = 1;
                                   1312 ;	assignBit
      00042C D2 AF            [12] 1313 	setb	_EA
                                   1314 ;	life.c:90: while (!i0) {
      00042E                       1315 00111$:
      00042E 90r00r00         [24] 1316 	mov	dptr,#_i0
      000431 E0               [24] 1317 	movx	a,@dptr
      000432 F5 F0            [12] 1318 	mov	b,a
      000434 A3               [24] 1319 	inc	dptr
      000435 E0               [24] 1320 	movx	a,@dptr
      000436 45 F0            [12] 1321 	orl	a,b
      000438 60 03            [24] 1322 	jz	00164$
      00043A 02r05r74         [24] 1323 	ljmp	00113$
      00043D                       1324 00164$:
                                   1325 ;	life.c:91: printf("\033[2J\033[mINIT\n\r");
      00043D 74r1F            [12] 1326 	mov	a,#___str_4
      00043F C0 E0            [24] 1327 	push	acc
      000441 74s00            [12] 1328 	mov	a,#(___str_4 >> 8)
      000443 C0 E0            [24] 1329 	push	acc
      000445 74 80            [12] 1330 	mov	a,#0x80
      000447 C0 E0            [24] 1331 	push	acc
      000449 12r00r00         [24] 1332 	lcall	_printf
      00044C 15 81            [12] 1333 	dec	sp
      00044E 15 81            [12] 1334 	dec	sp
      000450 15 81            [12] 1335 	dec	sp
                                   1336 ;	life.c:92: for (y = 0; y < H; y++)
      000452 90r08r06         [24] 1337 	mov	dptr,#_y
      000455 E4               [12] 1338 	clr	a
      000456 F0               [24] 1339 	movx	@dptr,a
      000457 A3               [24] 1340 	inc	dptr
      000458 F0               [24] 1341 	movx	@dptr,a
      000459                       1342 00116$:
                                   1343 ;	life.c:93: for (x = 0; x < W; x++) {
      000459 90r08r04         [24] 1344 	mov	dptr,#_x
      00045C E4               [12] 1345 	clr	a
      00045D F0               [24] 1346 	movx	@dptr,a
      00045E A3               [24] 1347 	inc	dptr
      00045F F0               [24] 1348 	movx	@dptr,a
      000460                       1349 00114$:
                                   1350 ;	life.c:94: c = getchar();
      000460 12r00r05         [24] 1351 	lcall	_getchar
      000463 AE 82            [24] 1352 	mov	r6,dpl
      000465 AF 83            [24] 1353 	mov	r7,dph
      000467 90r08r12         [24] 1354 	mov	dptr,#_c
      00046A EE               [12] 1355 	mov	a,r6
      00046B F0               [24] 1356 	movx	@dptr,a
      00046C EF               [12] 1357 	mov	a,r7
      00046D A3               [24] 1358 	inc	dptr
      00046E F0               [24] 1359 	movx	@dptr,a
                                   1360 ;	life.c:95: u[y][x] = c & 1;
      00046F 90r08r06         [24] 1361 	mov	dptr,#_y
      000472 E0               [24] 1362 	movx	a,@dptr
      000473 FC               [12] 1363 	mov	r4,a
      000474 A3               [24] 1364 	inc	dptr
      000475 E0               [24] 1365 	movx	a,@dptr
      000476 C4               [12] 1366 	swap	a
      000477 23               [12] 1367 	rl	a
      000478 54 E0            [12] 1368 	anl	a,#0xe0
      00047A CC               [12] 1369 	xch	a,r4
      00047B C4               [12] 1370 	swap	a
      00047C 23               [12] 1371 	rl	a
      00047D CC               [12] 1372 	xch	a,r4
      00047E 6C               [12] 1373 	xrl	a,r4
      00047F CC               [12] 1374 	xch	a,r4
      000480 54 E0            [12] 1375 	anl	a,#0xe0
      000482 CC               [12] 1376 	xch	a,r4
      000483 6C               [12] 1377 	xrl	a,r4
      000484 FD               [12] 1378 	mov	r5,a
      000485 EC               [12] 1379 	mov	a,r4
      000486 24r04            [12] 1380 	add	a,#_u
      000488 FC               [12] 1381 	mov	r4,a
      000489 ED               [12] 1382 	mov	a,r5
      00048A 34s00            [12] 1383 	addc	a,#(_u >> 8)
      00048C FD               [12] 1384 	mov	r5,a
      00048D 90r08r04         [24] 1385 	mov	dptr,#_x
      000490 E0               [24] 1386 	movx	a,@dptr
      000491 FA               [12] 1387 	mov	r2,a
      000492 A3               [24] 1388 	inc	dptr
      000493 E0               [24] 1389 	movx	a,@dptr
      000494 FB               [12] 1390 	mov	r3,a
      000495 EA               [12] 1391 	mov	a,r2
      000496 2C               [12] 1392 	add	a,r4
      000497 F5 82            [12] 1393 	mov	dpl,a
      000499 EB               [12] 1394 	mov	a,r3
      00049A 3D               [12] 1395 	addc	a,r5
      00049B F5 83            [12] 1396 	mov	dph,a
      00049D 53 06 01         [24] 1397 	anl	ar6,#0x01
      0004A0 EE               [12] 1398 	mov	a,r6
      0004A1 F0               [24] 1399 	movx	@dptr,a
                                   1400 ;	life.c:93: for (x = 0; x < W; x++) {
      0004A2 90r08r04         [24] 1401 	mov	dptr,#_x
      0004A5 E0               [24] 1402 	movx	a,@dptr
      0004A6 24 01            [12] 1403 	add	a,#0x01
      0004A8 F0               [24] 1404 	movx	@dptr,a
      0004A9 A3               [24] 1405 	inc	dptr
      0004AA E0               [24] 1406 	movx	a,@dptr
      0004AB 34 00            [12] 1407 	addc	a,#0x00
      0004AD F0               [24] 1408 	movx	@dptr,a
      0004AE 90r08r04         [24] 1409 	mov	dptr,#_x
      0004B1 E0               [24] 1410 	movx	a,@dptr
      0004B2 FE               [12] 1411 	mov	r6,a
      0004B3 A3               [24] 1412 	inc	dptr
      0004B4 E0               [24] 1413 	movx	a,@dptr
      0004B5 FF               [12] 1414 	mov	r7,a
      0004B6 C3               [12] 1415 	clr	c
      0004B7 EE               [12] 1416 	mov	a,r6
      0004B8 94 20            [12] 1417 	subb	a,#0x20
      0004BA EF               [12] 1418 	mov	a,r7
      0004BB 64 80            [12] 1419 	xrl	a,#0x80
      0004BD 94 80            [12] 1420 	subb	a,#0x80
      0004BF 40 9F            [24] 1421 	jc	00114$
                                   1422 ;	life.c:92: for (y = 0; y < H; y++)
      0004C1 90r08r06         [24] 1423 	mov	dptr,#_y
      0004C4 E0               [24] 1424 	movx	a,@dptr
      0004C5 24 01            [12] 1425 	add	a,#0x01
      0004C7 F0               [24] 1426 	movx	@dptr,a
      0004C8 A3               [24] 1427 	inc	dptr
      0004C9 E0               [24] 1428 	movx	a,@dptr
      0004CA 34 00            [12] 1429 	addc	a,#0x00
      0004CC F0               [24] 1430 	movx	@dptr,a
      0004CD 90r08r06         [24] 1431 	mov	dptr,#_y
      0004D0 E0               [24] 1432 	movx	a,@dptr
      0004D1 FE               [12] 1433 	mov	r6,a
      0004D2 A3               [24] 1434 	inc	dptr
      0004D3 E0               [24] 1435 	movx	a,@dptr
      0004D4 FF               [12] 1436 	mov	r7,a
      0004D5 C3               [12] 1437 	clr	c
      0004D6 EE               [12] 1438 	mov	a,r6
      0004D7 94 20            [12] 1439 	subb	a,#0x20
      0004D9 EF               [12] 1440 	mov	a,r7
      0004DA 64 80            [12] 1441 	xrl	a,#0x80
      0004DC 94 80            [12] 1442 	subb	a,#0x80
      0004DE 50 03            [24] 1443 	jnc	00166$
      0004E0 02r04r59         [24] 1444 	ljmp	00116$
      0004E3                       1445 00166$:
                                   1446 ;	life.c:97: printf("RDY\n\r");
      0004E3 74r2D            [12] 1447 	mov	a,#___str_5
      0004E5 C0 E0            [24] 1448 	push	acc
      0004E7 74s00            [12] 1449 	mov	a,#(___str_5 >> 8)
      0004E9 C0 E0            [24] 1450 	push	acc
      0004EB 74 80            [12] 1451 	mov	a,#0x80
      0004ED C0 E0            [24] 1452 	push	acc
      0004EF 12r00r00         [24] 1453 	lcall	_printf
      0004F2 15 81            [12] 1454 	dec	sp
      0004F4 15 81            [12] 1455 	dec	sp
      0004F6 15 81            [12] 1456 	dec	sp
                                   1457 ;	life.c:98: (void)getchar();
      0004F8 12r00r05         [24] 1458 	lcall	_getchar
                                   1459 ;	life.c:100: population = 0;
      0004FB 90r08r0E         [24] 1460 	mov	dptr,#_population
      0004FE E4               [12] 1461 	clr	a
      0004FF F0               [24] 1462 	movx	@dptr,a
      000500 A3               [24] 1463 	inc	dptr
      000501 F0               [24] 1464 	movx	@dptr,a
                                   1465 ;	life.c:102: i1 = 0;
      000502 90r00r02         [24] 1466 	mov	dptr,#_i1
      000505 F0               [24] 1467 	movx	@dptr,a
      000506 A3               [24] 1468 	inc	dptr
      000507 F0               [24] 1469 	movx	@dptr,a
                                   1470 ;	life.c:103: while (!i0 && !i1) {
      000508                       1471 00106$:
      000508 90r00r00         [24] 1472 	mov	dptr,#_i0
      00050B E0               [24] 1473 	movx	a,@dptr
      00050C F5 F0            [12] 1474 	mov	b,a
      00050E A3               [24] 1475 	inc	dptr
      00050F E0               [24] 1476 	movx	a,@dptr
      000510 45 F0            [12] 1477 	orl	a,b
      000512 70 36            [24] 1478 	jnz	00108$
      000514 90r00r02         [24] 1479 	mov	dptr,#_i1
      000517 E0               [24] 1480 	movx	a,@dptr
      000518 F5 F0            [12] 1481 	mov	b,a
      00051A A3               [24] 1482 	inc	dptr
      00051B E0               [24] 1483 	movx	a,@dptr
      00051C 45 F0            [12] 1484 	orl	a,b
      00051E 70 2A            [24] 1485 	jnz	00108$
                                   1486 ;	life.c:104: show();
      000520 12r00r39         [24] 1487 	lcall	_show
                                   1488 ;	life.c:105: evolve();
      000523 12r01r2B         [24] 1489 	lcall	_evolve
                                   1490 ;	life.c:106: if (fixed) {
      000526 90r08r10         [24] 1491 	mov	dptr,#_fixed
      000529 E0               [24] 1492 	movx	a,@dptr
      00052A F5 F0            [12] 1493 	mov	b,a
      00052C A3               [24] 1494 	inc	dptr
      00052D E0               [24] 1495 	movx	a,@dptr
      00052E 45 F0            [12] 1496 	orl	a,b
      000530 60 D6            [24] 1497 	jz	00106$
                                   1498 ;	life.c:107: printf("DONE\n\r");
      000532 74r33            [12] 1499 	mov	a,#___str_6
      000534 C0 E0            [24] 1500 	push	acc
      000536 74s00            [12] 1501 	mov	a,#(___str_6 >> 8)
      000538 C0 E0            [24] 1502 	push	acc
      00053A 74 80            [12] 1503 	mov	a,#0x80
      00053C C0 E0            [24] 1504 	push	acc
      00053E 12r00r00         [24] 1505 	lcall	_printf
      000541 15 81            [12] 1506 	dec	sp
      000543 15 81            [12] 1507 	dec	sp
      000545 15 81            [12] 1508 	dec	sp
                                   1509 ;	life.c:108: (void)getchar();
      000547 12r00r05         [24] 1510 	lcall	_getchar
                                   1511 ;	life.c:109: break;
      00054A                       1512 00108$:
                                   1513 ;	life.c:112: if (i1) {
      00054A 90r00r02         [24] 1514 	mov	dptr,#_i1
      00054D E0               [24] 1515 	movx	a,@dptr
      00054E F5 F0            [12] 1516 	mov	b,a
      000550 A3               [24] 1517 	inc	dptr
      000551 E0               [24] 1518 	movx	a,@dptr
      000552 45 F0            [12] 1519 	orl	a,b
      000554 70 03            [24] 1520 	jnz	00170$
      000556 02r04r2E         [24] 1521 	ljmp	00111$
      000559                       1522 00170$:
                                   1523 ;	life.c:113: printf("BREAK\n\r");
      000559 74r3A            [12] 1524 	mov	a,#___str_7
      00055B C0 E0            [24] 1525 	push	acc
      00055D 74s00            [12] 1526 	mov	a,#(___str_7 >> 8)
      00055F C0 E0            [24] 1527 	push	acc
      000561 74 80            [12] 1528 	mov	a,#0x80
      000563 C0 E0            [24] 1529 	push	acc
      000565 12r00r00         [24] 1530 	lcall	_printf
      000568 15 81            [12] 1531 	dec	sp
      00056A 15 81            [12] 1532 	dec	sp
      00056C 15 81            [12] 1533 	dec	sp
                                   1534 ;	life.c:114: (void)getchar();
      00056E 12r00r05         [24] 1535 	lcall	_getchar
      000571 02r04r2E         [24] 1536 	ljmp	00111$
      000574                       1537 00113$:
                                   1538 ;	life.c:118: EA = 0;
                                   1539 ;	assignBit
      000574 C2 AF            [12] 1540 	clr	_EA
                                   1541 ;	life.c:120: printf("TERM\n\r");
      000576 74r42            [12] 1542 	mov	a,#___str_8
      000578 C0 E0            [24] 1543 	push	acc
      00057A 74s00            [12] 1544 	mov	a,#(___str_8 >> 8)
      00057C C0 E0            [24] 1545 	push	acc
      00057E 74 80            [12] 1546 	mov	a,#0x80
      000580 C0 E0            [24] 1547 	push	acc
      000582 12r00r00         [24] 1548 	lcall	_printf
      000585 15 81            [12] 1549 	dec	sp
      000587 15 81            [12] 1550 	dec	sp
      000589 15 81            [12] 1551 	dec	sp
                                   1552 ;	life.c:121: (void)getchar();
      00058B 12r00r05         [24] 1553 	lcall	_getchar
                                   1554 ;	life.c:125: __endasm;
      00058E 02 00 00         [24] 1555 	ljmp	0
                                   1556 ;	life.c:126: }
      000591 22               [24] 1557 	ret
                                   1558 	.area CSEG    (CODE)
                                   1559 	.area CONST   (CODE)
                                   1560 	.area CONST   (CODE)
      000000                       1561 ___str_0:
      000000 1B                    1562 	.db 0x1b
      000001 5B 32 4A              1563 	.ascii "[2J"
      000004 1B                    1564 	.db 0x1b
      000005 5B 6D 25 30 34 78     1565 	.ascii "[m%04x"
      00000B 0D                    1566 	.db 0x0d
      00000C 0A                    1567 	.db 0x0a
      00000D 00                    1568 	.db 0x00
                                   1569 	.area CSEG    (CODE)
                                   1570 	.area CONST   (CODE)
      00000E                       1571 ___str_1:
      00000E 1B                    1572 	.db 0x1b
      00000F 5B 30 31 6D 5B 5D     1573 	.ascii "[01m[]"
      000015 1B                    1574 	.db 0x1b
      000016 5B 6D                 1575 	.ascii "[m"
      000018 00                    1576 	.db 0x00
                                   1577 	.area CSEG    (CODE)
                                   1578 	.area CONST   (CODE)
      000019                       1579 ___str_2:
      000019 20 20                 1580 	.ascii "  "
      00001B 00                    1581 	.db 0x00
                                   1582 	.area CSEG    (CODE)
                                   1583 	.area CONST   (CODE)
      00001C                       1584 ___str_3:
      00001C 0D                    1585 	.db 0x0d
      00001D 0A                    1586 	.db 0x0a
      00001E 00                    1587 	.db 0x00
                                   1588 	.area CSEG    (CODE)
                                   1589 	.area CONST   (CODE)
      00001F                       1590 ___str_4:
      00001F 1B                    1591 	.db 0x1b
      000020 5B 32 4A              1592 	.ascii "[2J"
      000023 1B                    1593 	.db 0x1b
      000024 5B 6D 49 4E 49 54     1594 	.ascii "[mINIT"
      00002A 0A                    1595 	.db 0x0a
      00002B 0D                    1596 	.db 0x0d
      00002C 00                    1597 	.db 0x00
                                   1598 	.area CSEG    (CODE)
                                   1599 	.area CONST   (CODE)
      00002D                       1600 ___str_5:
      00002D 52 44 59              1601 	.ascii "RDY"
      000030 0A                    1602 	.db 0x0a
      000031 0D                    1603 	.db 0x0d
      000032 00                    1604 	.db 0x00
                                   1605 	.area CSEG    (CODE)
                                   1606 	.area CONST   (CODE)
      000033                       1607 ___str_6:
      000033 44 4F 4E 45           1608 	.ascii "DONE"
      000037 0A                    1609 	.db 0x0a
      000038 0D                    1610 	.db 0x0d
      000039 00                    1611 	.db 0x00
                                   1612 	.area CSEG    (CODE)
                                   1613 	.area CONST   (CODE)
      00003A                       1614 ___str_7:
      00003A 42 52 45 41 4B        1615 	.ascii "BREAK"
      00003F 0A                    1616 	.db 0x0a
      000040 0D                    1617 	.db 0x0d
      000041 00                    1618 	.db 0x00
                                   1619 	.area CSEG    (CODE)
                                   1620 	.area CONST   (CODE)
      000042                       1621 ___str_8:
      000042 54 45 52 4D           1622 	.ascii "TERM"
      000046 0A                    1623 	.db 0x0a
      000047 0D                    1624 	.db 0x0d
      000048 00                    1625 	.db 0x00
                                   1626 	.area CSEG    (CODE)
                                   1627 	.area XINIT   (CODE)
                                   1628 	.area CABS    (ABS,CODE)
