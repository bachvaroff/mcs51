                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _generation
                                    143 	.globl _cycle2
                                    144 	.globl _fixed
                                    145 	.globl _n
                                    146 	.globl _bstep
                                    147 	.globl _c
                                    148 	.globl _j
                                    149 	.globl _y1
                                    150 	.globl _x1
                                    151 	.globl _y
                                    152 	.globl _x
                                    153 	.globl _nu
                                    154 	.globl _u
                                    155 	.globl _pu
                                    156 	.globl _i1
                                    157 	.globl _i0
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 1
      000001                        349 _i1::
      000001                        350 	.ds 1
      000002                        351 _pu::
      000002                        352 	.ds 1024
      000402                        353 _u::
      000402                        354 	.ds 1024
      000802                        355 _nu::
      000802                        356 	.ds 1024
      000C02                        357 _x::
      000C02                        358 	.ds 2
      000C04                        359 _y::
      000C04                        360 	.ds 2
      000C06                        361 _x1::
      000C06                        362 	.ds 2
      000C08                        363 _y1::
      000C08                        364 	.ds 2
      000C0A                        365 _j::
      000C0A                        366 	.ds 2
      000C0C                        367 _c::
      000C0C                        368 	.ds 2
      000C0E                        369 _bstep::
      000C0E                        370 	.ds 1
      000C0F                        371 _n::
      000C0F                        372 	.ds 1
      000C10                        373 _fixed::
      000C10                        374 	.ds 1
      000C11                        375 _cycle2::
      000C11                        376 	.ds 1
      000C12                        377 _generation::
      000C12                        378 	.ds 4
                                    379 ;--------------------------------------------------------
                                    380 ; absolute external ram data
                                    381 ;--------------------------------------------------------
                                    382 	.area XABS    (ABS,XDATA)
                                    383 ;--------------------------------------------------------
                                    384 ; external initialized ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area XISEG   (XDATA)
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT0 (CODE)
                                    389 	.area GSINIT1 (CODE)
                                    390 	.area GSINIT2 (CODE)
                                    391 	.area GSINIT3 (CODE)
                                    392 	.area GSINIT4 (CODE)
                                    393 	.area GSINIT5 (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.area GSFINAL (CODE)
                                    396 	.area CSEG    (CODE)
                                    397 ;--------------------------------------------------------
                                    398 ; interrupt vector 
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
      000000                        401 __interrupt_vect:
      000000 02r00r00         [24]  402 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  403 	ljmp	_int0
      000006                        404 	.ds	5
      00000B 32               [24]  405 	reti
      00000C                        406 	.ds	7
      000013 02r00r21         [24]  407 	ljmp	_int1
                                    408 ;--------------------------------------------------------
                                    409 ; global & static initialisations
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area GSINIT  (CODE)
                                    413 	.area GSFINAL (CODE)
                                    414 	.area GSINIT  (CODE)
                                    415 	.globl __sdcc_gsinit_startup
                                    416 	.globl __sdcc_program_startup
                                    417 	.globl __start__stack
                                    418 	.globl __mcs51_genXINIT
                                    419 	.globl __mcs51_genXRAMCLEAR
                                    420 	.globl __mcs51_genRAMCLEAR
                                    421 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  422 	ljmp	__sdcc_program_startup
                                    423 ;--------------------------------------------------------
                                    424 ; Home
                                    425 ;--------------------------------------------------------
                                    426 	.area HOME    (CODE)
                                    427 	.area HOME    (CODE)
      000016                        428 __sdcc_program_startup:
      000016 02r02r99         [24]  429 	ljmp	_main
                                    430 ;	return from main will return to caller
                                    431 ;--------------------------------------------------------
                                    432 ; code
                                    433 ;--------------------------------------------------------
                                    434 	.area CSEG    (CODE)
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'putchar'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers 
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:7: int putchar(int c) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function putchar
                                    443 ;	-----------------------------------------
      000000                        444 _putchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:12: __endasm;
      000000 E5 82            [12]  447 	mov	a, dpl
      000002 02 00 30         [24]  448 	ljmp	0x0030
                                    449 ;	life.c:13: }
                                    450 ;	naked function: no epilogue.
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'getchar'
                                    453 ;------------------------------------------------------------
                                    454 ;	life.c:15: int getchar(void) __naked {
                                    455 ;	-----------------------------------------
                                    456 ;	 function getchar
                                    457 ;	-----------------------------------------
      000005                        458 _getchar:
                                    459 ;	naked function: no prologue.
                                    460 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  461 	lcall	0x0032
      000008 F5 82            [12]  462 	mov	dpl, a
      00000A 75 83 00         [24]  463 	mov	dph, #0
      00000D 22               [24]  464 	ret
                                    465 ;	life.c:22: }
                                    466 ;	naked function: no epilogue.
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:65: void int0(void) __interrupt 0 __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000E                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000E C0 E0            [24]  483 	push	acc
      000010 C0 82            [24]  484 	push	dpl
      000012 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  487 	mov	dptr,#_i0
      000017 74 01            [12]  488 	mov	a,#0x01
      000019 F0               [24]  489 	movx	@dptr,a
                                    490 ;	life.c:67: }
      00001A D0 83            [24]  491 	pop	dph
      00001C D0 82            [24]  492 	pop	dpl
      00001E D0 E0            [24]  493 	pop	acc
      000020 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop psw
                                    497 ;	eliminated unneeded push/pop b
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int1'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:69: void int1(void) __interrupt 2 __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int1
                                    504 ;	-----------------------------------------
      000021                        505 _int1:
      000021 C0 E0            [24]  506 	push	acc
      000023 C0 82            [24]  507 	push	dpl
      000025 C0 83            [24]  508 	push	dph
                                    509 ;	life.c:70: i1 = 1;
      000027 90r00r01         [24]  510 	mov	dptr,#_i1
      00002A 74 01            [12]  511 	mov	a,#0x01
      00002C F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:71: }
      00002D D0 83            [24]  514 	pop	dph
      00002F D0 82            [24]  515 	pop	dpl
      000031 D0 E0            [24]  516 	pop	acc
      000033 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;hdr                       Allocated to registers r7 
                                    525 ;__1966080005              Allocated to registers 
                                    526 ;s                         Allocated to registers r5 r6 r7 
                                    527 ;__1310720001              Allocated to registers r6 r7 
                                    528 ;a                         Allocated to registers 
                                    529 ;__1310720003              Allocated to registers r6 r7 
                                    530 ;a                         Allocated to registers 
                                    531 ;__1966080008              Allocated to registers 
                                    532 ;s                         Allocated to registers r5 r6 r7 
                                    533 ;__2621440011              Allocated to registers 
                                    534 ;s                         Allocated to registers r5 r6 r7 
                                    535 ;------------------------------------------------------------
                                    536 ;	life.c:94: void show(char hdr) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function show
                                    539 ;	-----------------------------------------
      000034                        540 _show:
                           000007   541 	ar7 = 0x07
                           000006   542 	ar6 = 0x06
                           000005   543 	ar5 = 0x05
                           000004   544 	ar4 = 0x04
                           000003   545 	ar3 = 0x03
                           000002   546 	ar2 = 0x02
                           000001   547 	ar1 = 0x01
                           000000   548 	ar0 = 0x00
                                    549 ;	life.c:95: if (hdr) {
      000034 E5 82            [12]  550 	mov	a,dpl
      000036 FF               [12]  551 	mov	r7,a
      000037 70 03            [24]  552 	jnz	00190$
      000039 02r01rDA         [24]  553 	ljmp	00102$
      00003C                        554 00190$:
                                    555 ;	life.c:96: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  556 	mov	r5,#___str_0
      00003E 7Es00            [12]  557 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  558 	mov	r7,#0x80
                                    559 ;	life.c:48: return;
      000042                        560 00121$:
                                    561 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  562 	mov	dpl,r5
      000044 8E 83            [24]  563 	mov	dph,r6
      000046 8F F0            [24]  564 	mov	b,r7
      000048 12r00r00         [24]  565 	lcall	__gptrget
      00004B FC               [12]  566 	mov	r4,a
      00004C 60 10            [24]  567 	jz	00109$
      00004E 7B 00            [12]  568 	mov	r3,#0x00
      000050 8C 82            [24]  569 	mov	dpl,r4
      000052 8B 83            [24]  570 	mov	dph,r3
      000054 12r00r00         [24]  571 	lcall	_putchar
      000057 0D               [12]  572 	inc	r5
                                    573 ;	life.c:96: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  574 	cjne	r5,#0x00,00121$
      00005B 0E               [12]  575 	inc	r6
      00005C 80 E4            [24]  576 	sjmp	00121$
      00005E                        577 00109$:
                                    578 ;	life.c:88: print16x(generation[1]);
      00005E 90r0Cr14         [24]  579 	mov	dptr,#(_generation + 0x0002)
      000061 E0               [24]  580 	movx	a,@dptr
      000062 FE               [12]  581 	mov	r6,a
      000063 A3               [24]  582 	inc	dptr
      000064 E0               [24]  583 	movx	a,@dptr
                                    584 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000065 FF               [12]  585 	mov	r7,a
      000066 C4               [12]  586 	swap	a
      000067 54 0F            [12]  587 	anl	a,#0x0f
      000069 30 E3 02         [24]  588 	jnb	acc.3,00193$
      00006C 44 F0            [12]  589 	orl	a,#0xf0
      00006E                        590 00193$:
      00006E FC               [12]  591 	mov	r4,a
      00006F 33               [12]  592 	rlc	a
      000070 95 E0            [12]  593 	subb	a,acc
      000072 53 04 0F         [24]  594 	anl	ar4,#0x0f
      000075 7D 00            [12]  595 	mov	r5,#0x00
      000077 EC               [12]  596 	mov	a,r4
      000078 24r00            [12]  597 	add	a,#_digits
      00007A F5 82            [12]  598 	mov	dpl,a
      00007C ED               [12]  599 	mov	a,r5
      00007D 34s00            [12]  600 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  601 	mov	dph,a
      000081 E4               [12]  602 	clr	a
      000082 93               [24]  603 	movc	a,@a+dptr
      000083 FD               [12]  604 	mov	r5,a
      000084 7C 00            [12]  605 	mov	r4,#0x00
      000086 8D 82            [24]  606 	mov	dpl,r5
      000088 8C 83            [24]  607 	mov	dph,r4
      00008A 12r00r00         [24]  608 	lcall	_putchar
                                    609 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 05            [24]  610 	mov	ar5,r7
      00008F 53 05 0F         [24]  611 	anl	ar5,#0x0f
      000092 7C 00            [12]  612 	mov	r4,#0x00
      000094 ED               [12]  613 	mov	a,r5
      000095 24r00            [12]  614 	add	a,#_digits
      000097 F5 82            [12]  615 	mov	dpl,a
      000099 EC               [12]  616 	mov	a,r4
      00009A 34s00            [12]  617 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  618 	mov	dph,a
      00009E E4               [12]  619 	clr	a
      00009F 93               [24]  620 	movc	a,@a+dptr
      0000A0 FD               [12]  621 	mov	r5,a
      0000A1 7C 00            [12]  622 	mov	r4,#0x00
      0000A3 8D 82            [24]  623 	mov	dpl,r5
      0000A5 8C 83            [24]  624 	mov	dph,r4
      0000A7 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8E 04            [24]  627 	mov	ar4,r6
      0000AC EF               [12]  628 	mov	a,r7
      0000AD C4               [12]  629 	swap	a
      0000AE CC               [12]  630 	xch	a,r4
      0000AF C4               [12]  631 	swap	a
      0000B0 54 0F            [12]  632 	anl	a,#0x0f
      0000B2 6C               [12]  633 	xrl	a,r4
      0000B3 CC               [12]  634 	xch	a,r4
      0000B4 54 0F            [12]  635 	anl	a,#0x0f
      0000B6 CC               [12]  636 	xch	a,r4
      0000B7 6C               [12]  637 	xrl	a,r4
      0000B8 CC               [12]  638 	xch	a,r4
      0000B9 30 E3 02         [24]  639 	jnb	acc.3,00194$
      0000BC 44 F0            [12]  640 	orl	a,#0xf0
      0000BE                        641 00194$:
      0000BE 53 04 0F         [24]  642 	anl	ar4,#0x0f
      0000C1 7D 00            [12]  643 	mov	r5,#0x00
      0000C3 EC               [12]  644 	mov	a,r4
      0000C4 24r00            [12]  645 	add	a,#_digits
      0000C6 F5 82            [12]  646 	mov	dpl,a
      0000C8 ED               [12]  647 	mov	a,r5
      0000C9 34s00            [12]  648 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  649 	mov	dph,a
      0000CD E4               [12]  650 	clr	a
      0000CE 93               [24]  651 	movc	a,@a+dptr
      0000CF FD               [12]  652 	mov	r5,a
      0000D0 7C 00            [12]  653 	mov	r4,#0x00
      0000D2 8D 82            [24]  654 	mov	dpl,r5
      0000D4 8C 83            [24]  655 	mov	dph,r4
      0000D6 12r00r00         [24]  656 	lcall	_putchar
                                    657 ;	life.c:40: putchar(digits[a & 0xf]);
      0000D9 53 06 0F         [24]  658 	anl	ar6,#0x0f
      0000DC 7F 00            [12]  659 	mov	r7,#0x00
      0000DE EE               [12]  660 	mov	a,r6
      0000DF 24r00            [12]  661 	add	a,#_digits
      0000E1 F5 82            [12]  662 	mov	dpl,a
      0000E3 EF               [12]  663 	mov	a,r7
      0000E4 34s00            [12]  664 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  665 	mov	dph,a
      0000E8 E4               [12]  666 	clr	a
      0000E9 93               [24]  667 	movc	a,@a+dptr
      0000EA FF               [12]  668 	mov	r7,a
      0000EB 7E 00            [12]  669 	mov	r6,#0x00
      0000ED 8F 82            [24]  670 	mov	dpl,r7
      0000EF 8E 83            [24]  671 	mov	dph,r6
      0000F1 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:89: print16x(generation[0]);
      0000F4 90r0Cr12         [24]  674 	mov	dptr,#_generation
      0000F7 E0               [24]  675 	movx	a,@dptr
      0000F8 FE               [12]  676 	mov	r6,a
      0000F9 A3               [24]  677 	inc	dptr
      0000FA E0               [24]  678 	movx	a,@dptr
                                    679 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000FB FF               [12]  680 	mov	r7,a
      0000FC C4               [12]  681 	swap	a
      0000FD 54 0F            [12]  682 	anl	a,#0x0f
      0000FF 30 E3 02         [24]  683 	jnb	acc.3,00195$
      000102 44 F0            [12]  684 	orl	a,#0xf0
      000104                        685 00195$:
      000104 FC               [12]  686 	mov	r4,a
      000105 33               [12]  687 	rlc	a
      000106 95 E0            [12]  688 	subb	a,acc
      000108 53 04 0F         [24]  689 	anl	ar4,#0x0f
      00010B 7D 00            [12]  690 	mov	r5,#0x00
      00010D EC               [12]  691 	mov	a,r4
      00010E 24r00            [12]  692 	add	a,#_digits
      000110 F5 82            [12]  693 	mov	dpl,a
      000112 ED               [12]  694 	mov	a,r5
      000113 34s00            [12]  695 	addc	a,#(_digits >> 8)
      000115 F5 83            [12]  696 	mov	dph,a
      000117 E4               [12]  697 	clr	a
      000118 93               [24]  698 	movc	a,@a+dptr
      000119 FD               [12]  699 	mov	r5,a
      00011A 7C 00            [12]  700 	mov	r4,#0x00
      00011C 8D 82            [24]  701 	mov	dpl,r5
      00011E 8C 83            [24]  702 	mov	dph,r4
      000120 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000123 8F 05            [24]  705 	mov	ar5,r7
      000125 53 05 0F         [24]  706 	anl	ar5,#0x0f
      000128 7C 00            [12]  707 	mov	r4,#0x00
      00012A ED               [12]  708 	mov	a,r5
      00012B 24r00            [12]  709 	add	a,#_digits
      00012D F5 82            [12]  710 	mov	dpl,a
      00012F EC               [12]  711 	mov	a,r4
      000130 34s00            [12]  712 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  713 	mov	dph,a
      000134 E4               [12]  714 	clr	a
      000135 93               [24]  715 	movc	a,@a+dptr
      000136 FD               [12]  716 	mov	r5,a
      000137 7C 00            [12]  717 	mov	r4,#0x00
      000139 8D 82            [24]  718 	mov	dpl,r5
      00013B 8C 83            [24]  719 	mov	dph,r4
      00013D 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000140 8E 04            [24]  722 	mov	ar4,r6
      000142 EF               [12]  723 	mov	a,r7
      000143 C4               [12]  724 	swap	a
      000144 CC               [12]  725 	xch	a,r4
      000145 C4               [12]  726 	swap	a
      000146 54 0F            [12]  727 	anl	a,#0x0f
      000148 6C               [12]  728 	xrl	a,r4
      000149 CC               [12]  729 	xch	a,r4
      00014A 54 0F            [12]  730 	anl	a,#0x0f
      00014C CC               [12]  731 	xch	a,r4
      00014D 6C               [12]  732 	xrl	a,r4
      00014E CC               [12]  733 	xch	a,r4
      00014F 30 E3 02         [24]  734 	jnb	acc.3,00196$
      000152 44 F0            [12]  735 	orl	a,#0xf0
      000154                        736 00196$:
      000154 53 04 0F         [24]  737 	anl	ar4,#0x0f
      000157 7D 00            [12]  738 	mov	r5,#0x00
      000159 EC               [12]  739 	mov	a,r4
      00015A 24r00            [12]  740 	add	a,#_digits
      00015C F5 82            [12]  741 	mov	dpl,a
      00015E ED               [12]  742 	mov	a,r5
      00015F 34s00            [12]  743 	addc	a,#(_digits >> 8)
      000161 F5 83            [12]  744 	mov	dph,a
      000163 E4               [12]  745 	clr	a
      000164 93               [24]  746 	movc	a,@a+dptr
      000165 FD               [12]  747 	mov	r5,a
      000166 7C 00            [12]  748 	mov	r4,#0x00
      000168 8D 82            [24]  749 	mov	dpl,r5
      00016A 8C 83            [24]  750 	mov	dph,r4
      00016C 12r00r00         [24]  751 	lcall	_putchar
                                    752 ;	life.c:40: putchar(digits[a & 0xf]);
      00016F 53 06 0F         [24]  753 	anl	ar6,#0x0f
      000172 7F 00            [12]  754 	mov	r7,#0x00
      000174 EE               [12]  755 	mov	a,r6
      000175 24r00            [12]  756 	add	a,#_digits
      000177 F5 82            [12]  757 	mov	dpl,a
      000179 EF               [12]  758 	mov	a,r7
      00017A 34s00            [12]  759 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  760 	mov	dph,a
      00017E E4               [12]  761 	clr	a
      00017F 93               [24]  762 	movc	a,@a+dptr
      000180 FF               [12]  763 	mov	r7,a
      000181 7E 00            [12]  764 	mov	r6,#0x00
      000183 8F 82            [24]  765 	mov	dpl,r7
      000185 8E 83            [24]  766 	mov	dph,r6
      000187 12r00r00         [24]  767 	lcall	_putchar
                                    768 ;	life.c:98: printstr("\r\n");
      00018A 7Dr18            [12]  769 	mov	r5,#___str_1
      00018C 7Es00            [12]  770 	mov	r6,#(___str_1 >> 8)
      00018E 7F 80            [12]  771 	mov	r7,#0x80
                                    772 ;	life.c:48: return;
      000190                        773 00124$:
                                    774 ;	life.c:46: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  775 	mov	dpl,r5
      000192 8E 83            [24]  776 	mov	dph,r6
      000194 8F F0            [24]  777 	mov	b,r7
      000196 12r00r00         [24]  778 	lcall	__gptrget
      000199 FC               [12]  779 	mov	r4,a
      00019A 60 10            [24]  780 	jz	00114$
      00019C 7B 00            [12]  781 	mov	r3,#0x00
      00019E 8C 82            [24]  782 	mov	dpl,r4
      0001A0 8B 83            [24]  783 	mov	dph,r3
      0001A2 12r00r00         [24]  784 	lcall	_putchar
      0001A5 0D               [12]  785 	inc	r5
                                    786 ;	life.c:98: printstr("\r\n");
      0001A6 BD 00 E7         [24]  787 	cjne	r5,#0x00,00124$
      0001A9 0E               [12]  788 	inc	r6
      0001AA 80 E4            [24]  789 	sjmp	00124$
      0001AC                        790 00114$:
                                    791 ;	life.c:81: generation[0]++;
      0001AC 90r0Cr12         [24]  792 	mov	dptr,#_generation
      0001AF E0               [24]  793 	movx	a,@dptr
      0001B0 FE               [12]  794 	mov	r6,a
      0001B1 A3               [24]  795 	inc	dptr
      0001B2 E0               [24]  796 	movx	a,@dptr
      0001B3 FF               [12]  797 	mov	r7,a
      0001B4 0E               [12]  798 	inc	r6
      0001B5 BE 00 01         [24]  799 	cjne	r6,#0x00,00199$
      0001B8 0F               [12]  800 	inc	r7
      0001B9                        801 00199$:
      0001B9 90r0Cr12         [24]  802 	mov	dptr,#_generation
      0001BC EE               [12]  803 	mov	a,r6
      0001BD F0               [24]  804 	movx	@dptr,a
      0001BE EF               [12]  805 	mov	a,r7
      0001BF A3               [24]  806 	inc	dptr
      0001C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	life.c:82: if (!generation[0]) generation[1]++;
      0001C1 EE               [12]  809 	mov	a,r6
      0001C2 4F               [12]  810 	orl	a,r7
      0001C3 70 15            [24]  811 	jnz	00102$
      0001C5 90r0Cr14         [24]  812 	mov	dptr,#(_generation + 0x0002)
      0001C8 E0               [24]  813 	movx	a,@dptr
      0001C9 FE               [12]  814 	mov	r6,a
      0001CA A3               [24]  815 	inc	dptr
      0001CB E0               [24]  816 	movx	a,@dptr
      0001CC FF               [12]  817 	mov	r7,a
      0001CD 0E               [12]  818 	inc	r6
      0001CE BE 00 01         [24]  819 	cjne	r6,#0x00,00201$
      0001D1 0F               [12]  820 	inc	r7
      0001D2                        821 00201$:
      0001D2 90r0Cr14         [24]  822 	mov	dptr,#(_generation + 0x0002)
      0001D5 EE               [12]  823 	mov	a,r6
      0001D6 F0               [24]  824 	movx	@dptr,a
      0001D7 EF               [12]  825 	mov	a,r7
      0001D8 A3               [24]  826 	inc	dptr
      0001D9 F0               [24]  827 	movx	@dptr,a
                                    828 ;	life.c:99: updategen();
      0001DA                        829 00102$:
                                    830 ;	life.c:102: for (x = 0; x < W; x++) {
      0001DA 90r0Cr02         [24]  831 	mov	dptr,#_x
      0001DD E4               [12]  832 	clr	a
      0001DE F0               [24]  833 	movx	@dptr,a
      0001DF A3               [24]  834 	inc	dptr
      0001E0 F0               [24]  835 	movx	@dptr,a
      0001E1                        836 00131$:
                                    837 ;	life.c:103: for (y = 0; y < H; y++)
      0001E1 90r0Cr04         [24]  838 	mov	dptr,#_y
      0001E4 E4               [12]  839 	clr	a
      0001E5 F0               [24]  840 	movx	@dptr,a
      0001E6 A3               [24]  841 	inc	dptr
      0001E7 F0               [24]  842 	movx	@dptr,a
      0001E8                        843 00126$:
                                    844 ;	life.c:104: if (u[A2D(W, y, x)]) {
      0001E8 90r0Cr04         [24]  845 	mov	dptr,#_y
      0001EB E0               [24]  846 	movx	a,@dptr
      0001EC FE               [12]  847 	mov	r6,a
      0001ED A3               [24]  848 	inc	dptr
      0001EE E0               [24]  849 	movx	a,@dptr
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CE               [12]  853 	xch	a,r6
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CE               [12]  856 	xch	a,r6
      0001F7 6E               [12]  857 	xrl	a,r6
      0001F8 CE               [12]  858 	xch	a,r6
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CE               [12]  860 	xch	a,r6
      0001FC 6E               [12]  861 	xrl	a,r6
      0001FD FF               [12]  862 	mov	r7,a
      0001FE 90r0Cr02         [24]  863 	mov	dptr,#_x
      000201 E0               [24]  864 	movx	a,@dptr
      000202 FC               [12]  865 	mov	r4,a
      000203 A3               [24]  866 	inc	dptr
      000204 E0               [24]  867 	movx	a,@dptr
      000205 FD               [12]  868 	mov	r5,a
      000206 EC               [12]  869 	mov	a,r4
      000207 2E               [12]  870 	add	a,r6
      000208 FE               [12]  871 	mov	r6,a
      000209 ED               [12]  872 	mov	a,r5
      00020A 3F               [12]  873 	addc	a,r7
      00020B FF               [12]  874 	mov	r7,a
      00020C EE               [12]  875 	mov	a,r6
      00020D 24r02            [12]  876 	add	a,#_u
      00020F FE               [12]  877 	mov	r6,a
      000210 EF               [12]  878 	mov	a,r7
      000211 34s04            [12]  879 	addc	a,#(_u >> 8)
      000213 FF               [12]  880 	mov	r7,a
      000214 8E 82            [24]  881 	mov	dpl,r6
      000216 8F 83            [24]  882 	mov	dph,r7
      000218 E0               [24]  883 	movx	a,@dptr
      000219 60 0E            [24]  884 	jz	00104$
                                    885 ;	life.c:105: putchar('['); putchar(']');
      00021B 90 00 5B         [24]  886 	mov	dptr,#0x005b
      00021E 12r00r00         [24]  887 	lcall	_putchar
      000221 90 00 5D         [24]  888 	mov	dptr,#0x005d
      000224 12r00r00         [24]  889 	lcall	_putchar
      000227 80 0C            [24]  890 	sjmp	00127$
      000229                        891 00104$:
                                    892 ;	life.c:107: putchar('#'); putchar('#');
      000229 90 00 23         [24]  893 	mov	dptr,#0x0023
      00022C 12r00r00         [24]  894 	lcall	_putchar
      00022F 90 00 23         [24]  895 	mov	dptr,#0x0023
      000232 12r00r00         [24]  896 	lcall	_putchar
      000235                        897 00127$:
                                    898 ;	life.c:103: for (y = 0; y < H; y++)
      000235 90r0Cr04         [24]  899 	mov	dptr,#_y
      000238 E0               [24]  900 	movx	a,@dptr
      000239 24 01            [12]  901 	add	a,#0x01
      00023B F0               [24]  902 	movx	@dptr,a
      00023C A3               [24]  903 	inc	dptr
      00023D E0               [24]  904 	movx	a,@dptr
      00023E 34 00            [12]  905 	addc	a,#0x00
      000240 F0               [24]  906 	movx	@dptr,a
      000241 90r0Cr04         [24]  907 	mov	dptr,#_y
      000244 E0               [24]  908 	movx	a,@dptr
      000245 FE               [12]  909 	mov	r6,a
      000246 A3               [24]  910 	inc	dptr
      000247 E0               [24]  911 	movx	a,@dptr
      000248 FF               [12]  912 	mov	r7,a
      000249 C3               [12]  913 	clr	c
      00024A EE               [12]  914 	mov	a,r6
      00024B 94 20            [12]  915 	subb	a,#0x20
      00024D EF               [12]  916 	mov	a,r7
      00024E 64 80            [12]  917 	xrl	a,#0x80
      000250 94 80            [12]  918 	subb	a,#0x80
      000252 40 94            [24]  919 	jc	00126$
                                    920 ;	life.c:109: printstr("\r\n");
      000254 7Dr18            [12]  921 	mov	r5,#___str_1
      000256 7Es00            [12]  922 	mov	r6,#(___str_1 >> 8)
      000258 7F 80            [12]  923 	mov	r7,#0x80
                                    924 ;	life.c:48: return;
      00025A                        925 00129$:
                                    926 ;	life.c:46: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  927 	mov	dpl,r5
      00025C 8E 83            [24]  928 	mov	dph,r6
      00025E 8F F0            [24]  929 	mov	b,r7
      000260 12r00r00         [24]  930 	lcall	__gptrget
      000263 FC               [12]  931 	mov	r4,a
      000264 60 10            [24]  932 	jz	00119$
      000266 7B 00            [12]  933 	mov	r3,#0x00
      000268 8C 82            [24]  934 	mov	dpl,r4
      00026A 8B 83            [24]  935 	mov	dph,r3
      00026C 12r00r00         [24]  936 	lcall	_putchar
      00026F 0D               [12]  937 	inc	r5
                                    938 ;	life.c:109: printstr("\r\n");
      000270 BD 00 E7         [24]  939 	cjne	r5,#0x00,00129$
      000273 0E               [12]  940 	inc	r6
      000274 80 E4            [24]  941 	sjmp	00129$
      000276                        942 00119$:
                                    943 ;	life.c:102: for (x = 0; x < W; x++) {
      000276 90r0Cr02         [24]  944 	mov	dptr,#_x
      000279 E0               [24]  945 	movx	a,@dptr
      00027A 24 01            [12]  946 	add	a,#0x01
      00027C F0               [24]  947 	movx	@dptr,a
      00027D A3               [24]  948 	inc	dptr
      00027E E0               [24]  949 	movx	a,@dptr
      00027F 34 00            [12]  950 	addc	a,#0x00
      000281 F0               [24]  951 	movx	@dptr,a
      000282 90r0Cr02         [24]  952 	mov	dptr,#_x
      000285 E0               [24]  953 	movx	a,@dptr
      000286 FE               [12]  954 	mov	r6,a
      000287 A3               [24]  955 	inc	dptr
      000288 E0               [24]  956 	movx	a,@dptr
      000289 FF               [12]  957 	mov	r7,a
      00028A C3               [12]  958 	clr	c
      00028B EE               [12]  959 	mov	a,r6
      00028C 94 20            [12]  960 	subb	a,#0x20
      00028E EF               [12]  961 	mov	a,r7
      00028F 64 80            [12]  962 	xrl	a,#0x80
      000291 94 80            [12]  963 	subb	a,#0x80
      000293 50 03            [24]  964 	jnc	00206$
      000295 02r01rE1         [24]  965 	ljmp	00131$
      000298                        966 00206$:
                                    967 ;	life.c:112: return;
                                    968 ;	life.c:113: }
      000298 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'main'
                                    972 ;------------------------------------------------------------
                                    973 ;__2621440020              Allocated to registers 
                                    974 ;s                         Allocated to registers r5 r6 r7 
                                    975 ;__1310720013              Allocated to registers 
                                    976 ;s                         Allocated to registers r5 r6 r7 
                                    977 ;__1310720015              Allocated to registers r6 r7 
                                    978 ;a                         Allocated to registers r4 r5 
                                    979 ;__1310720017              Allocated to registers 
                                    980 ;s                         Allocated to registers r5 r6 r7 
                                    981 ;__2621440023              Allocated to registers 
                                    982 ;s                         Allocated to registers r5 r6 r7 
                                    983 ;__2621440025              Allocated to registers 
                                    984 ;s                         Allocated to registers r5 r6 r7 
                                    985 ;__4587520029              Allocated to registers 
                                    986 ;s                         Allocated to registers r5 r6 r7 
                                    987 ;__3276800031              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;__1310720033              Allocated to registers 
                                    990 ;s                         Allocated to registers r5 r6 r7 
                                    991 ;sloc0                     Allocated to stack - _bp +1
                                    992 ;sloc1                     Allocated to stack - _bp +3
                                    993 ;sloc2                     Allocated to stack - _bp +5
                                    994 ;sloc3                     Allocated to stack - _bp +6
                                    995 ;sloc4                     Allocated to stack - _bp +8
                                    996 ;sloc5                     Allocated to stack - _bp +10
                                    997 ;sloc6                     Allocated to stack - _bp +12
                                    998 ;sloc7                     Allocated to stack - _bp +14
                                    999 ;------------------------------------------------------------
                                   1000 ;	life.c:196: void main(void) {
                                   1001 ;	-----------------------------------------
                                   1002 ;	 function main
                                   1003 ;	-----------------------------------------
      000299                       1004 _main:
      000299 C0*00            [24] 1005 	push	_bp
      00029B E5 81            [12] 1006 	mov	a,sp
      00029D F5*00            [12] 1007 	mov	_bp,a
      00029F 24 0F            [12] 1008 	add	a,#0x0f
      0002A1 F5 81            [12] 1009 	mov	sp,a
                                   1010 ;	life.c:197: IT0 = 1;
                                   1011 ;	assignBit
      0002A3 D2 88            [12] 1012 	setb	_IT0
                                   1013 ;	life.c:198: IT1 = 1;
                                   1014 ;	assignBit
      0002A5 D2 8A            [12] 1015 	setb	_IT1
                                   1016 ;	life.c:199: EX0 = 1;
                                   1017 ;	assignBit
      0002A7 D2 A8            [12] 1018 	setb	_EX0
                                   1019 ;	life.c:200: EX1 = 1;
                                   1020 ;	assignBit
      0002A9 D2 AA            [12] 1021 	setb	_EX1
                                   1022 ;	life.c:201: EA = 1;
                                   1023 ;	assignBit
      0002AB D2 AF            [12] 1024 	setb	_EA
                                   1025 ;	life.c:203: for (i0 = 0; !i0; ) {
      0002AD 90r00r00         [24] 1026 	mov	dptr,#_i0
      0002B0 E4               [12] 1027 	clr	a
      0002B1 F0               [24] 1028 	movx	@dptr,a
      0002B2                       1029 00191$:
                                   1030 ;	life.c:116: memset(u, 0, sizeof (u));
      0002B2 E4               [12] 1031 	clr	a
      0002B3 C0 E0            [24] 1032 	push	acc
      0002B5 74 04            [12] 1033 	mov	a,#0x04
      0002B7 C0 E0            [24] 1034 	push	acc
      0002B9 E4               [12] 1035 	clr	a
      0002BA C0 E0            [24] 1036 	push	acc
      0002BC 90r04r02         [24] 1037 	mov	dptr,#_u
      0002BF 75 F0 00         [24] 1038 	mov	b,#0x00
      0002C2 12r00r00         [24] 1039 	lcall	_memset
      0002C5 15 81            [12] 1040 	dec	sp
      0002C7 15 81            [12] 1041 	dec	sp
      0002C9 15 81            [12] 1042 	dec	sp
                                   1043 ;	life.c:117: memset(pu, 0, sizeof (pu));
      0002CB E4               [12] 1044 	clr	a
      0002CC C0 E0            [24] 1045 	push	acc
      0002CE 74 04            [12] 1046 	mov	a,#0x04
      0002D0 C0 E0            [24] 1047 	push	acc
      0002D2 E4               [12] 1048 	clr	a
      0002D3 C0 E0            [24] 1049 	push	acc
      0002D5 90r00r02         [24] 1050 	mov	dptr,#_pu
      0002D8 75 F0 00         [24] 1051 	mov	b,#0x00
      0002DB 12r00r00         [24] 1052 	lcall	_memset
      0002DE 15 81            [12] 1053 	dec	sp
      0002E0 15 81            [12] 1054 	dec	sp
      0002E2 15 81            [12] 1055 	dec	sp
                                   1056 ;	life.c:205: printstr("\033[2J\033[mINIT\r\n");
      0002E4 7Dr26            [12] 1057 	mov	r5,#___str_4
      0002E6 7Es00            [12] 1058 	mov	r6,#(___str_4 >> 8)
      0002E8 7F 80            [12] 1059 	mov	r7,#0x80
                                   1060 ;	life.c:48: return;
      0002EA                       1061 00159$:
                                   1062 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002EA 8D 82            [24] 1063 	mov	dpl,r5
      0002EC 8E 83            [24] 1064 	mov	dph,r6
      0002EE 8F F0            [24] 1065 	mov	b,r7
      0002F0 12r00r00         [24] 1066 	lcall	__gptrget
      0002F3 FC               [12] 1067 	mov	r4,a
      0002F4 60 10            [24] 1068 	jz	00115$
      0002F6 7B 00            [12] 1069 	mov	r3,#0x00
      0002F8 8C 82            [24] 1070 	mov	dpl,r4
      0002FA 8B 83            [24] 1071 	mov	dph,r3
      0002FC 12r00r00         [24] 1072 	lcall	_putchar
      0002FF 0D               [12] 1073 	inc	r5
                                   1074 ;	life.c:205: printstr("\033[2J\033[mINIT\r\n");
      000300 BD 00 E7         [24] 1075 	cjne	r5,#0x00,00159$
      000303 0E               [12] 1076 	inc	r6
      000304 80 E4            [24] 1077 	sjmp	00159$
      000306                       1078 00115$:
                                   1079 ;	life.c:206: (void)getchar();
      000306 12r00r05         [24] 1080 	lcall	_getchar
                                   1081 ;	life.c:123: j = 0;
      000309 90r0Cr0A         [24] 1082 	mov	dptr,#_j
      00030C E4               [12] 1083 	clr	a
      00030D F0               [24] 1084 	movx	@dptr,a
      00030E A3               [24] 1085 	inc	dptr
      00030F F0               [24] 1086 	movx	@dptr,a
                                   1087 ;	life.c:125: printstr("LOAD <");
      000310 7Dr1B            [12] 1088 	mov	r5,#___str_2
      000312 7Es00            [12] 1089 	mov	r6,#(___str_2 >> 8)
      000314 7F 80            [12] 1090 	mov	r7,#0x80
                                   1091 ;	life.c:48: return;
      000316                       1092 00162$:
                                   1093 ;	life.c:46: for (; *s; s++) putchar(*s);
      000316 8D 82            [24] 1094 	mov	dpl,r5
      000318 8E 83            [24] 1095 	mov	dph,r6
      00031A 8F F0            [24] 1096 	mov	b,r7
      00031C 12r00r00         [24] 1097 	lcall	__gptrget
      00031F FC               [12] 1098 	mov	r4,a
      000320 60 10            [24] 1099 	jz	00117$
      000322 7B 00            [12] 1100 	mov	r3,#0x00
      000324 8C 82            [24] 1101 	mov	dpl,r4
      000326 8B 83            [24] 1102 	mov	dph,r3
      000328 12r00r00         [24] 1103 	lcall	_putchar
      00032B 0D               [12] 1104 	inc	r5
                                   1105 ;	life.c:125: printstr("LOAD <");
      00032C BD 00 E7         [24] 1106 	cjne	r5,#0x00,00162$
      00032F 0E               [12] 1107 	inc	r6
      000330 80 E4            [24] 1108 	sjmp	00162$
      000332                       1109 00117$:
                                   1110 ;	life.c:127: for (y = 0; y < H; y++)
      000332 90r0Cr04         [24] 1111 	mov	dptr,#_y
      000335 E4               [12] 1112 	clr	a
      000336 F0               [24] 1113 	movx	@dptr,a
      000337 A3               [24] 1114 	inc	dptr
      000338 F0               [24] 1115 	movx	@dptr,a
      000339                       1116 00166$:
                                   1117 ;	life.c:128: for (x = 0; x < W; x++) {
      000339 90r0Cr02         [24] 1118 	mov	dptr,#_x
      00033C E4               [12] 1119 	clr	a
      00033D F0               [24] 1120 	movx	@dptr,a
      00033E A3               [24] 1121 	inc	dptr
      00033F F0               [24] 1122 	movx	@dptr,a
      000340                       1123 00164$:
                                   1124 ;	life.c:129: c = getchar();
      000340 12r00r05         [24] 1125 	lcall	_getchar
      000343 AE 82            [24] 1126 	mov	r6,dpl
      000345 AF 83            [24] 1127 	mov	r7,dph
      000347 90r0Cr0C         [24] 1128 	mov	dptr,#_c
      00034A EE               [12] 1129 	mov	a,r6
      00034B F0               [24] 1130 	movx	@dptr,a
      00034C EF               [12] 1131 	mov	a,r7
      00034D A3               [24] 1132 	inc	dptr
      00034E F0               [24] 1133 	movx	@dptr,a
                                   1134 ;	life.c:130: if (c == (int)'0') {
      00034F BE 30 41         [24] 1135 	cjne	r6,#0x30,00124$
      000352 BF 00 3E         [24] 1136 	cjne	r7,#0x00,00124$
                                   1137 ;	life.c:131: u[A2D(W, y, x)] = 0;
      000355 90r0Cr04         [24] 1138 	mov	dptr,#_y
      000358 E0               [24] 1139 	movx	a,@dptr
      000359 FC               [12] 1140 	mov	r4,a
      00035A A3               [24] 1141 	inc	dptr
      00035B E0               [24] 1142 	movx	a,@dptr
      00035C C4               [12] 1143 	swap	a
      00035D 23               [12] 1144 	rl	a
      00035E 54 E0            [12] 1145 	anl	a,#0xe0
      000360 CC               [12] 1146 	xch	a,r4
      000361 C4               [12] 1147 	swap	a
      000362 23               [12] 1148 	rl	a
      000363 CC               [12] 1149 	xch	a,r4
      000364 6C               [12] 1150 	xrl	a,r4
      000365 CC               [12] 1151 	xch	a,r4
      000366 54 E0            [12] 1152 	anl	a,#0xe0
      000368 CC               [12] 1153 	xch	a,r4
      000369 6C               [12] 1154 	xrl	a,r4
      00036A FD               [12] 1155 	mov	r5,a
      00036B 90r0Cr02         [24] 1156 	mov	dptr,#_x
      00036E E0               [24] 1157 	movx	a,@dptr
      00036F FA               [12] 1158 	mov	r2,a
      000370 A3               [24] 1159 	inc	dptr
      000371 E0               [24] 1160 	movx	a,@dptr
      000372 FB               [12] 1161 	mov	r3,a
      000373 EA               [12] 1162 	mov	a,r2
      000374 2C               [12] 1163 	add	a,r4
      000375 FC               [12] 1164 	mov	r4,a
      000376 EB               [12] 1165 	mov	a,r3
      000377 3D               [12] 1166 	addc	a,r5
      000378 FD               [12] 1167 	mov	r5,a
      000379 EC               [12] 1168 	mov	a,r4
      00037A 24r02            [12] 1169 	add	a,#_u
      00037C F5 82            [12] 1170 	mov	dpl,a
      00037E ED               [12] 1171 	mov	a,r5
      00037F 34s04            [12] 1172 	addc	a,#(_u >> 8)
      000381 F5 83            [12] 1173 	mov	dph,a
      000383 E4               [12] 1174 	clr	a
      000384 F0               [24] 1175 	movx	@dptr,a
                                   1176 ;	life.c:132: j++;
      000385 90r0Cr0A         [24] 1177 	mov	dptr,#_j
      000388 E0               [24] 1178 	movx	a,@dptr
      000389 24 01            [12] 1179 	add	a,#0x01
      00038B F0               [24] 1180 	movx	@dptr,a
      00038C A3               [24] 1181 	inc	dptr
      00038D E0               [24] 1182 	movx	a,@dptr
      00038E 34 00            [12] 1183 	addc	a,#0x00
      000390 F0               [24] 1184 	movx	@dptr,a
      000391 80 4D            [24] 1185 	sjmp	00165$
      000393                       1186 00124$:
                                   1187 ;	life.c:133: } else if (c == (int)'1') {
      000393 BE 31 42         [24] 1188 	cjne	r6,#0x31,00122$
      000396 BF 00 3F         [24] 1189 	cjne	r7,#0x00,00122$
                                   1190 ;	life.c:134: u[A2D(W, y, x)] = 1;
      000399 90r0Cr04         [24] 1191 	mov	dptr,#_y
      00039C E0               [24] 1192 	movx	a,@dptr
      00039D FC               [12] 1193 	mov	r4,a
      00039E A3               [24] 1194 	inc	dptr
      00039F E0               [24] 1195 	movx	a,@dptr
      0003A0 C4               [12] 1196 	swap	a
      0003A1 23               [12] 1197 	rl	a
      0003A2 54 E0            [12] 1198 	anl	a,#0xe0
      0003A4 CC               [12] 1199 	xch	a,r4
      0003A5 C4               [12] 1200 	swap	a
      0003A6 23               [12] 1201 	rl	a
      0003A7 CC               [12] 1202 	xch	a,r4
      0003A8 6C               [12] 1203 	xrl	a,r4
      0003A9 CC               [12] 1204 	xch	a,r4
      0003AA 54 E0            [12] 1205 	anl	a,#0xe0
      0003AC CC               [12] 1206 	xch	a,r4
      0003AD 6C               [12] 1207 	xrl	a,r4
      0003AE FD               [12] 1208 	mov	r5,a
      0003AF 90r0Cr02         [24] 1209 	mov	dptr,#_x
      0003B2 E0               [24] 1210 	movx	a,@dptr
      0003B3 FA               [12] 1211 	mov	r2,a
      0003B4 A3               [24] 1212 	inc	dptr
      0003B5 E0               [24] 1213 	movx	a,@dptr
      0003B6 FB               [12] 1214 	mov	r3,a
      0003B7 EA               [12] 1215 	mov	a,r2
      0003B8 2C               [12] 1216 	add	a,r4
      0003B9 FC               [12] 1217 	mov	r4,a
      0003BA EB               [12] 1218 	mov	a,r3
      0003BB 3D               [12] 1219 	addc	a,r5
      0003BC FD               [12] 1220 	mov	r5,a
      0003BD EC               [12] 1221 	mov	a,r4
      0003BE 24r02            [12] 1222 	add	a,#_u
      0003C0 F5 82            [12] 1223 	mov	dpl,a
      0003C2 ED               [12] 1224 	mov	a,r5
      0003C3 34s04            [12] 1225 	addc	a,#(_u >> 8)
      0003C5 F5 83            [12] 1226 	mov	dph,a
      0003C7 74 01            [12] 1227 	mov	a,#0x01
      0003C9 F0               [24] 1228 	movx	@dptr,a
                                   1229 ;	life.c:135: j++;
      0003CA 90r0Cr0A         [24] 1230 	mov	dptr,#_j
      0003CD E0               [24] 1231 	movx	a,@dptr
      0003CE 24 01            [12] 1232 	add	a,#0x01
      0003D0 F0               [24] 1233 	movx	@dptr,a
      0003D1 A3               [24] 1234 	inc	dptr
      0003D2 E0               [24] 1235 	movx	a,@dptr
      0003D3 34 00            [12] 1236 	addc	a,#0x00
      0003D5 F0               [24] 1237 	movx	@dptr,a
      0003D6 80 08            [24] 1238 	sjmp	00165$
      0003D8                       1239 00122$:
                                   1240 ;	life.c:136: } else if (c == (int)'#') goto out;
      0003D8 BE 23 05         [24] 1241 	cjne	r6,#0x23,00376$
      0003DB BF 00 02         [24] 1242 	cjne	r7,#0x00,00376$
      0003DE 80 44            [24] 1243 	sjmp	00135$
      0003E0                       1244 00376$:
      0003E0                       1245 00165$:
                                   1246 ;	life.c:128: for (x = 0; x < W; x++) {
      0003E0 90r0Cr02         [24] 1247 	mov	dptr,#_x
      0003E3 E0               [24] 1248 	movx	a,@dptr
      0003E4 24 01            [12] 1249 	add	a,#0x01
      0003E6 F0               [24] 1250 	movx	@dptr,a
      0003E7 A3               [24] 1251 	inc	dptr
      0003E8 E0               [24] 1252 	movx	a,@dptr
      0003E9 34 00            [12] 1253 	addc	a,#0x00
      0003EB F0               [24] 1254 	movx	@dptr,a
      0003EC 90r0Cr02         [24] 1255 	mov	dptr,#_x
      0003EF E0               [24] 1256 	movx	a,@dptr
      0003F0 FE               [12] 1257 	mov	r6,a
      0003F1 A3               [24] 1258 	inc	dptr
      0003F2 E0               [24] 1259 	movx	a,@dptr
      0003F3 FF               [12] 1260 	mov	r7,a
      0003F4 C3               [12] 1261 	clr	c
      0003F5 EE               [12] 1262 	mov	a,r6
      0003F6 94 20            [12] 1263 	subb	a,#0x20
      0003F8 EF               [12] 1264 	mov	a,r7
      0003F9 64 80            [12] 1265 	xrl	a,#0x80
      0003FB 94 80            [12] 1266 	subb	a,#0x80
      0003FD 50 03            [24] 1267 	jnc	00377$
      0003FF 02r03r40         [24] 1268 	ljmp	00164$
      000402                       1269 00377$:
                                   1270 ;	life.c:127: for (y = 0; y < H; y++)
      000402 90r0Cr04         [24] 1271 	mov	dptr,#_y
      000405 E0               [24] 1272 	movx	a,@dptr
      000406 24 01            [12] 1273 	add	a,#0x01
      000408 F0               [24] 1274 	movx	@dptr,a
      000409 A3               [24] 1275 	inc	dptr
      00040A E0               [24] 1276 	movx	a,@dptr
      00040B 34 00            [12] 1277 	addc	a,#0x00
      00040D F0               [24] 1278 	movx	@dptr,a
      00040E 90r0Cr04         [24] 1279 	mov	dptr,#_y
      000411 E0               [24] 1280 	movx	a,@dptr
      000412 FE               [12] 1281 	mov	r6,a
      000413 A3               [24] 1282 	inc	dptr
      000414 E0               [24] 1283 	movx	a,@dptr
      000415 FF               [12] 1284 	mov	r7,a
      000416 C3               [12] 1285 	clr	c
      000417 EE               [12] 1286 	mov	a,r6
      000418 94 20            [12] 1287 	subb	a,#0x20
      00041A EF               [12] 1288 	mov	a,r7
      00041B 64 80            [12] 1289 	xrl	a,#0x80
      00041D 94 80            [12] 1290 	subb	a,#0x80
      00041F 50 03            [24] 1291 	jnc	00378$
      000421 02r03r39         [24] 1292 	ljmp	00166$
      000424                       1293 00378$:
                                   1294 ;	life.c:139: out:
      000424                       1295 00135$:
                                   1296 ;	life.c:140: if (c != (int)'#')
      000424 90r0Cr0C         [24] 1297 	mov	dptr,#_c
      000427 E0               [24] 1298 	movx	a,@dptr
      000428 FE               [12] 1299 	mov	r6,a
      000429 A3               [24] 1300 	inc	dptr
      00042A E0               [24] 1301 	movx	a,@dptr
      00042B FF               [12] 1302 	mov	r7,a
      00042C BE 23 05         [24] 1303 	cjne	r6,#0x23,00379$
      00042F BF 00 02         [24] 1304 	cjne	r7,#0x00,00379$
      000432 80 15            [24] 1305 	sjmp	00134$
      000434                       1306 00379$:
                                   1307 ;	life.c:141: while (1) {
      000434                       1308 00131$:
                                   1309 ;	life.c:142: c = getchar();
      000434 12r00r05         [24] 1310 	lcall	_getchar
      000437 AE 82            [24] 1311 	mov	r6,dpl
      000439 AF 83            [24] 1312 	mov	r7,dph
      00043B 90r0Cr0C         [24] 1313 	mov	dptr,#_c
      00043E EE               [12] 1314 	mov	a,r6
      00043F F0               [24] 1315 	movx	@dptr,a
      000440 EF               [12] 1316 	mov	a,r7
      000441 A3               [24] 1317 	inc	dptr
      000442 F0               [24] 1318 	movx	@dptr,a
                                   1319 ;	life.c:143: if (c == (int)'#') break;
      000443 BE 23 EE         [24] 1320 	cjne	r6,#0x23,00131$
      000446 BF 00 EB         [24] 1321 	cjne	r7,#0x00,00131$
      000449                       1322 00134$:
                                   1323 ;	life.c:145: print16x(j);
      000449 90r0Cr0A         [24] 1324 	mov	dptr,#_j
      00044C E0               [24] 1325 	movx	a,@dptr
      00044D FE               [12] 1326 	mov	r6,a
      00044E A3               [24] 1327 	inc	dptr
      00044F E0               [24] 1328 	movx	a,@dptr
                                   1329 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000450 8E 04            [24] 1330 	mov	ar4,r6
      000452 FD               [12] 1331 	mov	r5,a
      000453 C4               [12] 1332 	swap	a
      000454 54 0F            [12] 1333 	anl	a,#0x0f
      000456 30 E3 02         [24] 1334 	jnb	acc.3,00382$
      000459 44 F0            [12] 1335 	orl	a,#0xf0
      00045B                       1336 00382$:
      00045B FE               [12] 1337 	mov	r6,a
      00045C 33               [12] 1338 	rlc	a
      00045D 95 E0            [12] 1339 	subb	a,acc
      00045F 53 06 0F         [24] 1340 	anl	ar6,#0x0f
      000462 7F 00            [12] 1341 	mov	r7,#0x00
      000464 EE               [12] 1342 	mov	a,r6
      000465 24r00            [12] 1343 	add	a,#_digits
      000467 F5 82            [12] 1344 	mov	dpl,a
      000469 EF               [12] 1345 	mov	a,r7
      00046A 34s00            [12] 1346 	addc	a,#(_digits >> 8)
      00046C F5 83            [12] 1347 	mov	dph,a
      00046E E4               [12] 1348 	clr	a
      00046F 93               [24] 1349 	movc	a,@a+dptr
      000470 FF               [12] 1350 	mov	r7,a
      000471 7E 00            [12] 1351 	mov	r6,#0x00
      000473 8F 82            [24] 1352 	mov	dpl,r7
      000475 8E 83            [24] 1353 	mov	dph,r6
      000477 12r00r00         [24] 1354 	lcall	_putchar
                                   1355 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00047A 8D 07            [24] 1356 	mov	ar7,r5
      00047C 53 07 0F         [24] 1357 	anl	ar7,#0x0f
      00047F 7E 00            [12] 1358 	mov	r6,#0x00
      000481 EF               [12] 1359 	mov	a,r7
      000482 24r00            [12] 1360 	add	a,#_digits
      000484 F5 82            [12] 1361 	mov	dpl,a
      000486 EE               [12] 1362 	mov	a,r6
      000487 34s00            [12] 1363 	addc	a,#(_digits >> 8)
      000489 F5 83            [12] 1364 	mov	dph,a
      00048B E4               [12] 1365 	clr	a
      00048C 93               [24] 1366 	movc	a,@a+dptr
      00048D FF               [12] 1367 	mov	r7,a
      00048E 7E 00            [12] 1368 	mov	r6,#0x00
      000490 8F 82            [24] 1369 	mov	dpl,r7
      000492 8E 83            [24] 1370 	mov	dph,r6
      000494 12r00r00         [24] 1371 	lcall	_putchar
                                   1372 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000497 8C 06            [24] 1373 	mov	ar6,r4
      000499 ED               [12] 1374 	mov	a,r5
      00049A C4               [12] 1375 	swap	a
      00049B CE               [12] 1376 	xch	a,r6
      00049C C4               [12] 1377 	swap	a
      00049D 54 0F            [12] 1378 	anl	a,#0x0f
      00049F 6E               [12] 1379 	xrl	a,r6
      0004A0 CE               [12] 1380 	xch	a,r6
      0004A1 54 0F            [12] 1381 	anl	a,#0x0f
      0004A3 CE               [12] 1382 	xch	a,r6
      0004A4 6E               [12] 1383 	xrl	a,r6
      0004A5 CE               [12] 1384 	xch	a,r6
      0004A6 30 E3 02         [24] 1385 	jnb	acc.3,00383$
      0004A9 44 F0            [12] 1386 	orl	a,#0xf0
      0004AB                       1387 00383$:
      0004AB 53 06 0F         [24] 1388 	anl	ar6,#0x0f
      0004AE 7F 00            [12] 1389 	mov	r7,#0x00
      0004B0 EE               [12] 1390 	mov	a,r6
      0004B1 24r00            [12] 1391 	add	a,#_digits
      0004B3 F5 82            [12] 1392 	mov	dpl,a
      0004B5 EF               [12] 1393 	mov	a,r7
      0004B6 34s00            [12] 1394 	addc	a,#(_digits >> 8)
      0004B8 F5 83            [12] 1395 	mov	dph,a
      0004BA E4               [12] 1396 	clr	a
      0004BB 93               [24] 1397 	movc	a,@a+dptr
      0004BC FF               [12] 1398 	mov	r7,a
      0004BD 7E 00            [12] 1399 	mov	r6,#0x00
      0004BF 8F 82            [24] 1400 	mov	dpl,r7
      0004C1 8E 83            [24] 1401 	mov	dph,r6
      0004C3 12r00r00         [24] 1402 	lcall	_putchar
                                   1403 ;	life.c:40: putchar(digits[a & 0xf]);
      0004C6 53 04 0F         [24] 1404 	anl	ar4,#0x0f
      0004C9 7D 00            [12] 1405 	mov	r5,#0x00
      0004CB EC               [12] 1406 	mov	a,r4
      0004CC 24r00            [12] 1407 	add	a,#_digits
      0004CE F5 82            [12] 1408 	mov	dpl,a
      0004D0 ED               [12] 1409 	mov	a,r5
      0004D1 34s00            [12] 1410 	addc	a,#(_digits >> 8)
      0004D3 F5 83            [12] 1411 	mov	dph,a
      0004D5 E4               [12] 1412 	clr	a
      0004D6 93               [24] 1413 	movc	a,@a+dptr
      0004D7 FF               [12] 1414 	mov	r7,a
      0004D8 7E 00            [12] 1415 	mov	r6,#0x00
      0004DA 8F 82            [24] 1416 	mov	dpl,r7
      0004DC 8E 83            [24] 1417 	mov	dph,r6
      0004DE 12r00r00         [24] 1418 	lcall	_putchar
                                   1419 ;	life.c:146: printstr(">\r\n");
      0004E1 7Dr22            [12] 1420 	mov	r5,#___str_3
      0004E3 7Es00            [12] 1421 	mov	r6,#(___str_3 >> 8)
      0004E5 7F 80            [12] 1422 	mov	r7,#0x80
                                   1423 ;	life.c:48: return;
      0004E7                       1424 00169$:
                                   1425 ;	life.c:46: for (; *s; s++) putchar(*s);
      0004E7 8D 82            [24] 1426 	mov	dpl,r5
      0004E9 8E 83            [24] 1427 	mov	dph,r6
      0004EB 8F F0            [24] 1428 	mov	b,r7
      0004ED 12r00r00         [24] 1429 	lcall	__gptrget
      0004F0 FC               [12] 1430 	mov	r4,a
      0004F1 60 10            [24] 1431 	jz	00138$
      0004F3 7B 00            [12] 1432 	mov	r3,#0x00
      0004F5 8C 82            [24] 1433 	mov	dpl,r4
      0004F7 8B 83            [24] 1434 	mov	dph,r3
      0004F9 12r00r00         [24] 1435 	lcall	_putchar
      0004FC 0D               [12] 1436 	inc	r5
                                   1437 ;	life.c:146: printstr(">\r\n");
      0004FD BD 00 E7         [24] 1438 	cjne	r5,#0x00,00169$
      000500 0E               [12] 1439 	inc	r6
      000501 80 E4            [24] 1440 	sjmp	00169$
      000503                       1441 00138$:
                                   1442 ;	life.c:209: show(0);
      000503 75 82 00         [24] 1443 	mov	dpl,#0x00
      000506 12r00r34         [24] 1444 	lcall	_show
                                   1445 ;	life.c:211: printstr("READY\r\n");
      000509 7Dr34            [12] 1446 	mov	r5,#___str_5
      00050B 7Es00            [12] 1447 	mov	r6,#(___str_5 >> 8)
      00050D 7F 80            [12] 1448 	mov	r7,#0x80
                                   1449 ;	life.c:48: return;
      00050F                       1450 00172$:
                                   1451 ;	life.c:46: for (; *s; s++) putchar(*s);
      00050F 8D 82            [24] 1452 	mov	dpl,r5
      000511 8E 83            [24] 1453 	mov	dph,r6
      000513 8F F0            [24] 1454 	mov	b,r7
      000515 12r00r00         [24] 1455 	lcall	__gptrget
      000518 FC               [12] 1456 	mov	r4,a
      000519 60 10            [24] 1457 	jz	00104$
      00051B 7B 00            [12] 1458 	mov	r3,#0x00
      00051D 8C 82            [24] 1459 	mov	dpl,r4
      00051F 8B 83            [24] 1460 	mov	dph,r3
      000521 12r00r00         [24] 1461 	lcall	_putchar
      000524 0D               [12] 1462 	inc	r5
                                   1463 ;	life.c:212: while (1) {
      000525 BD 00 E7         [24] 1464 	cjne	r5,#0x00,00172$
      000528 0E               [12] 1465 	inc	r6
      000529 80 E4            [24] 1466 	sjmp	00172$
      00052B                       1467 00104$:
                                   1468 ;	life.c:213: c = getchar();
      00052B 12r00r05         [24] 1469 	lcall	_getchar
      00052E AE 82            [24] 1470 	mov	r6,dpl
      000530 AF 83            [24] 1471 	mov	r7,dph
      000532 90r0Cr0C         [24] 1472 	mov	dptr,#_c
      000535 EE               [12] 1473 	mov	a,r6
      000536 F0               [24] 1474 	movx	@dptr,a
      000537 EF               [12] 1475 	mov	a,r7
      000538 A3               [24] 1476 	inc	dptr
      000539 F0               [24] 1477 	movx	@dptr,a
                                   1478 ;	life.c:214: if (c == (int)'S') break;
      00053A BE 53 EE         [24] 1479 	cjne	r6,#0x53,00104$
      00053D BF 00 EB         [24] 1480 	cjne	r7,#0x00,00104$
                                   1481 ;	life.c:216: printstr("START\r\n");
      000540 7Dr3C            [12] 1482 	mov	r5,#___str_6
      000542 7Es00            [12] 1483 	mov	r6,#(___str_6 >> 8)
      000544 7F 80            [12] 1484 	mov	r7,#0x80
                                   1485 ;	life.c:48: return;
      000546                       1486 00175$:
                                   1487 ;	life.c:46: for (; *s; s++) putchar(*s);
      000546 8D 82            [24] 1488 	mov	dpl,r5
      000548 8E 83            [24] 1489 	mov	dph,r6
      00054A 8F F0            [24] 1490 	mov	b,r7
      00054C 12r00r00         [24] 1491 	lcall	__gptrget
      00054F FC               [12] 1492 	mov	r4,a
      000550 60 10            [24] 1493 	jz	00143$
      000552 7B 00            [12] 1494 	mov	r3,#0x00
      000554 8C 82            [24] 1495 	mov	dpl,r4
      000556 8B 83            [24] 1496 	mov	dph,r3
      000558 12r00r00         [24] 1497 	lcall	_putchar
      00055B 0D               [12] 1498 	inc	r5
                                   1499 ;	life.c:216: printstr("START\r\n");
      00055C BD 00 E7         [24] 1500 	cjne	r5,#0x00,00175$
      00055F 0E               [12] 1501 	inc	r6
      000560 80 E4            [24] 1502 	sjmp	00175$
      000562                       1503 00143$:
                                   1504 ;	life.c:74: generation[0] = 0;
      000562 90r0Cr12         [24] 1505 	mov	dptr,#_generation
      000565 E4               [12] 1506 	clr	a
      000566 F0               [24] 1507 	movx	@dptr,a
      000567 A3               [24] 1508 	inc	dptr
      000568 F0               [24] 1509 	movx	@dptr,a
                                   1510 ;	life.c:75: generation[1] = 0;
      000569 90r0Cr14         [24] 1511 	mov	dptr,#(_generation + 0x0002)
      00056C F0               [24] 1512 	movx	@dptr,a
      00056D A3               [24] 1513 	inc	dptr
      00056E F0               [24] 1514 	movx	@dptr,a
                                   1515 ;	life.c:220: for (i1 = 0; !i0 && !i1; ) {
      00056F 90r00r01         [24] 1516 	mov	dptr,#_i1
      000572 F0               [24] 1517 	movx	@dptr,a
      000573                       1518 00186$:
      000573 90r00r00         [24] 1519 	mov	dptr,#_i0
      000576 E0               [24] 1520 	movx	a,@dptr
      000577 60 03            [24] 1521 	jz	00392$
      000579 02r0Ar4E         [24] 1522 	ljmp	00109$
      00057C                       1523 00392$:
      00057C 90r00r01         [24] 1524 	mov	dptr,#_i1
      00057F E0               [24] 1525 	movx	a,@dptr
      000580 60 03            [24] 1526 	jz	00393$
      000582 02r0Ar4E         [24] 1527 	ljmp	00109$
      000585                       1528 00393$:
                                   1529 ;	life.c:221: show(1);
      000585 75 82 01         [24] 1530 	mov	dpl,#0x01
      000588 12r00r34         [24] 1531 	lcall	_show
                                   1532 ;	life.c:154: fixed = 1;
      00058B 90r0Cr10         [24] 1533 	mov	dptr,#_fixed
      00058E 74 01            [12] 1534 	mov	a,#0x01
      000590 F0               [24] 1535 	movx	@dptr,a
                                   1536 ;	life.c:155: cycle2 = 1;
      000591 90r0Cr11         [24] 1537 	mov	dptr,#_cycle2
      000594 F0               [24] 1538 	movx	@dptr,a
                                   1539 ;	life.c:156: bstep = 0;
      000595 90r0Cr0E         [24] 1540 	mov	dptr,#_bstep
      000598 E4               [12] 1541 	clr	a
      000599 F0               [24] 1542 	movx	@dptr,a
                                   1543 ;	life.c:158: for (y = 0; y < H; y++) {
      00059A 90r0Cr04         [24] 1544 	mov	dptr,#_y
      00059D F0               [24] 1545 	movx	@dptr,a
      00059E A3               [24] 1546 	inc	dptr
      00059F F0               [24] 1547 	movx	@dptr,a
      0005A0                       1548 00179$:
                                   1549 ;	life.c:159: putchar(busy[bstep]); putchar('\r');
      0005A0 90r0Cr0E         [24] 1550 	mov	dptr,#_bstep
      0005A3 E0               [24] 1551 	movx	a,@dptr
      0005A4 90r0ArB2         [24] 1552 	mov	dptr,#_busy
      0005A7 93               [24] 1553 	movc	a,@a+dptr
      0005A8 FF               [12] 1554 	mov	r7,a
      0005A9 7E 00            [12] 1555 	mov	r6,#0x00
      0005AB 8F 82            [24] 1556 	mov	dpl,r7
      0005AD 8E 83            [24] 1557 	mov	dph,r6
      0005AF 12r00r00         [24] 1558 	lcall	_putchar
      0005B2 90 00 0D         [24] 1559 	mov	dptr,#0x000d
      0005B5 12r00r00         [24] 1560 	lcall	_putchar
                                   1561 ;	life.c:160: bstep = (bstep + 1) & 3;
      0005B8 90r0Cr0E         [24] 1562 	mov	dptr,#_bstep
      0005BB E0               [24] 1563 	movx	a,@dptr
      0005BC FF               [12] 1564 	mov	r7,a
      0005BD 0F               [12] 1565 	inc	r7
      0005BE 74 03            [12] 1566 	mov	a,#0x03
      0005C0 5F               [12] 1567 	anl	a,r7
      0005C1 F0               [24] 1568 	movx	@dptr,a
                                   1569 ;	life.c:161: for (x = 0; x < W; x++) {
      0005C2 90r0Cr02         [24] 1570 	mov	dptr,#_x
      0005C5 E4               [12] 1571 	clr	a
      0005C6 F0               [24] 1572 	movx	@dptr,a
      0005C7 A3               [24] 1573 	inc	dptr
      0005C8 F0               [24] 1574 	movx	@dptr,a
      0005C9                       1575 00177$:
                                   1576 ;	life.c:162: n = -u[A2D(W, y, x)];
      0005C9 90r0Cr04         [24] 1577 	mov	dptr,#_y
      0005CC E0               [24] 1578 	movx	a,@dptr
      0005CD FE               [12] 1579 	mov	r6,a
      0005CE A3               [24] 1580 	inc	dptr
      0005CF E0               [24] 1581 	movx	a,@dptr
      0005D0 FF               [12] 1582 	mov	r7,a
      0005D1 A8*00            [24] 1583 	mov	r0,_bp
      0005D3 08               [12] 1584 	inc	r0
      0005D4 A6 06            [24] 1585 	mov	@r0,ar6
      0005D6 EF               [12] 1586 	mov	a,r7
      0005D7 C4               [12] 1587 	swap	a
      0005D8 23               [12] 1588 	rl	a
      0005D9 54 E0            [12] 1589 	anl	a,#0xe0
      0005DB C6               [12] 1590 	xch	a,@r0
      0005DC C4               [12] 1591 	swap	a
      0005DD 23               [12] 1592 	rl	a
      0005DE C6               [12] 1593 	xch	a,@r0
      0005DF 66               [12] 1594 	xrl	a,@r0
      0005E0 C6               [12] 1595 	xch	a,@r0
      0005E1 54 E0            [12] 1596 	anl	a,#0xe0
      0005E3 C6               [12] 1597 	xch	a,@r0
      0005E4 66               [12] 1598 	xrl	a,@r0
      0005E5 08               [12] 1599 	inc	r0
      0005E6 F6               [12] 1600 	mov	@r0,a
      0005E7 90r0Cr02         [24] 1601 	mov	dptr,#_x
      0005EA E0               [24] 1602 	movx	a,@dptr
      0005EB FA               [12] 1603 	mov	r2,a
      0005EC A3               [24] 1604 	inc	dptr
      0005ED E0               [24] 1605 	movx	a,@dptr
      0005EE FB               [12] 1606 	mov	r3,a
      0005EF A8*00            [24] 1607 	mov	r0,_bp
      0005F1 08               [12] 1608 	inc	r0
      0005F2 E5*00            [12] 1609 	mov	a,_bp
      0005F4 24 03            [12] 1610 	add	a,#0x03
      0005F6 F9               [12] 1611 	mov	r1,a
      0005F7 EA               [12] 1612 	mov	a,r2
      0005F8 26               [12] 1613 	add	a,@r0
      0005F9 F7               [12] 1614 	mov	@r1,a
      0005FA EB               [12] 1615 	mov	a,r3
      0005FB 08               [12] 1616 	inc	r0
      0005FC 36               [12] 1617 	addc	a,@r0
      0005FD 09               [12] 1618 	inc	r1
      0005FE F7               [12] 1619 	mov	@r1,a
      0005FF E5*00            [12] 1620 	mov	a,_bp
      000601 24 03            [12] 1621 	add	a,#0x03
      000603 F8               [12] 1622 	mov	r0,a
      000604 E6               [12] 1623 	mov	a,@r0
      000605 24r02            [12] 1624 	add	a,#_u
      000607 F5 82            [12] 1625 	mov	dpl,a
      000609 08               [12] 1626 	inc	r0
      00060A E6               [12] 1627 	mov	a,@r0
      00060B 34s04            [12] 1628 	addc	a,#(_u >> 8)
      00060D F5 83            [12] 1629 	mov	dph,a
      00060F E0               [24] 1630 	movx	a,@dptr
      000610 FD               [12] 1631 	mov	r5,a
      000611 E5*00            [12] 1632 	mov	a,_bp
      000613 24 05            [12] 1633 	add	a,#0x05
      000615 F8               [12] 1634 	mov	r0,a
      000616 C3               [12] 1635 	clr	c
      000617 E4               [12] 1636 	clr	a
      000618 9D               [12] 1637 	subb	a,r5
      000619 F6               [12] 1638 	mov	@r0,a
                                   1639 ;	life.c:165: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00061A 74 1F            [12] 1640 	mov	a,#0x1f
      00061C 2E               [12] 1641 	add	a,r6
      00061D FC               [12] 1642 	mov	r4,a
      00061E E4               [12] 1643 	clr	a
      00061F 3F               [12] 1644 	addc	a,r7
      000620 FD               [12] 1645 	mov	r5,a
      000621 C0 07            [24] 1646 	push	ar7
      000623 C0 06            [24] 1647 	push	ar6
      000625 C0 03            [24] 1648 	push	ar3
      000627 C0 02            [24] 1649 	push	ar2
      000629 74 20            [12] 1650 	mov	a,#0x20
      00062B C0 E0            [24] 1651 	push	acc
      00062D E4               [12] 1652 	clr	a
      00062E C0 E0            [24] 1653 	push	acc
      000630 8C 82            [24] 1654 	mov	dpl,r4
      000632 8D 83            [24] 1655 	mov	dph,r5
      000634 12r00r00         [24] 1656 	lcall	__modsint
      000637 AC 82            [24] 1657 	mov	r4,dpl
      000639 AD 83            [24] 1658 	mov	r5,dph
      00063B 15 81            [12] 1659 	dec	sp
      00063D 15 81            [12] 1660 	dec	sp
      00063F D0 02            [24] 1661 	pop	ar2
      000641 D0 03            [24] 1662 	pop	ar3
      000643 E5*00            [12] 1663 	mov	a,_bp
      000645 24 06            [12] 1664 	add	a,#0x06
      000647 F8               [12] 1665 	mov	r0,a
      000648 A6 04            [24] 1666 	mov	@r0,ar4
      00064A ED               [12] 1667 	mov	a,r5
      00064B C4               [12] 1668 	swap	a
      00064C 23               [12] 1669 	rl	a
      00064D 54 E0            [12] 1670 	anl	a,#0xe0
      00064F C6               [12] 1671 	xch	a,@r0
      000650 C4               [12] 1672 	swap	a
      000651 23               [12] 1673 	rl	a
      000652 C6               [12] 1674 	xch	a,@r0
      000653 66               [12] 1675 	xrl	a,@r0
      000654 C6               [12] 1676 	xch	a,@r0
      000655 54 E0            [12] 1677 	anl	a,#0xe0
      000657 C6               [12] 1678 	xch	a,@r0
      000658 66               [12] 1679 	xrl	a,@r0
      000659 08               [12] 1680 	inc	r0
      00065A F6               [12] 1681 	mov	@r0,a
      00065B 74 1F            [12] 1682 	mov	a,#0x1f
      00065D 2A               [12] 1683 	add	a,r2
      00065E FC               [12] 1684 	mov	r4,a
      00065F E4               [12] 1685 	clr	a
      000660 3B               [12] 1686 	addc	a,r3
      000661 FD               [12] 1687 	mov	r5,a
      000662 C0 03            [24] 1688 	push	ar3
      000664 C0 02            [24] 1689 	push	ar2
      000666 74 20            [12] 1690 	mov	a,#0x20
      000668 C0 E0            [24] 1691 	push	acc
      00066A E4               [12] 1692 	clr	a
      00066B C0 E0            [24] 1693 	push	acc
      00066D 8C 82            [24] 1694 	mov	dpl,r4
      00066F 8D 83            [24] 1695 	mov	dph,r5
      000671 12r00r00         [24] 1696 	lcall	__modsint
      000674 C8               [12] 1697 	xch	a,r0
      000675 E5*00            [12] 1698 	mov	a,_bp
      000677 24 08            [12] 1699 	add	a,#0x08
      000679 C8               [12] 1700 	xch	a,r0
      00067A A6 82            [24] 1701 	mov	@r0,dpl
      00067C 08               [12] 1702 	inc	r0
      00067D A6 83            [24] 1703 	mov	@r0,dph
      00067F 15 81            [12] 1704 	dec	sp
      000681 15 81            [12] 1705 	dec	sp
      000683 D0 02            [24] 1706 	pop	ar2
      000685 D0 03            [24] 1707 	pop	ar3
      000687 E5*00            [12] 1708 	mov	a,_bp
      000689 24 06            [12] 1709 	add	a,#0x06
      00068B F8               [12] 1710 	mov	r0,a
      00068C E5*00            [12] 1711 	mov	a,_bp
      00068E 24 08            [12] 1712 	add	a,#0x08
      000690 F9               [12] 1713 	mov	r1,a
      000691 E7               [12] 1714 	mov	a,@r1
      000692 26               [12] 1715 	add	a,@r0
      000693 FC               [12] 1716 	mov	r4,a
      000694 09               [12] 1717 	inc	r1
      000695 E7               [12] 1718 	mov	a,@r1
      000696 08               [12] 1719 	inc	r0
      000697 36               [12] 1720 	addc	a,@r0
      000698 FD               [12] 1721 	mov	r5,a
      000699 EC               [12] 1722 	mov	a,r4
      00069A 24r02            [12] 1723 	add	a,#_u
      00069C F5 82            [12] 1724 	mov	dpl,a
      00069E ED               [12] 1725 	mov	a,r5
      00069F 34s04            [12] 1726 	addc	a,#(_u >> 8)
      0006A1 F5 83            [12] 1727 	mov	dph,a
      0006A3 E0               [24] 1728 	movx	a,@dptr
      0006A4 FD               [12] 1729 	mov	r5,a
      0006A5 E5*00            [12] 1730 	mov	a,_bp
      0006A7 24 05            [12] 1731 	add	a,#0x05
      0006A9 F8               [12] 1732 	mov	r0,a
      0006AA ED               [12] 1733 	mov	a,r5
      0006AB 26               [12] 1734 	add	a,@r0
      0006AC F6               [12] 1735 	mov	@r0,a
                                   1736 ;	life.c:167: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006AD 74 20            [12] 1737 	mov	a,#0x20
      0006AF 2A               [12] 1738 	add	a,r2
      0006B0 FC               [12] 1739 	mov	r4,a
      0006B1 E4               [12] 1740 	clr	a
      0006B2 3B               [12] 1741 	addc	a,r3
      0006B3 FD               [12] 1742 	mov	r5,a
      0006B4 C0 03            [24] 1743 	push	ar3
      0006B6 C0 02            [24] 1744 	push	ar2
      0006B8 74 20            [12] 1745 	mov	a,#0x20
      0006BA C0 E0            [24] 1746 	push	acc
      0006BC E4               [12] 1747 	clr	a
      0006BD C0 E0            [24] 1748 	push	acc
      0006BF 8C 82            [24] 1749 	mov	dpl,r4
      0006C1 8D 83            [24] 1750 	mov	dph,r5
      0006C3 12r00r00         [24] 1751 	lcall	__modsint
      0006C6 C8               [12] 1752 	xch	a,r0
      0006C7 E5*00            [12] 1753 	mov	a,_bp
      0006C9 24 0A            [12] 1754 	add	a,#0x0a
      0006CB C8               [12] 1755 	xch	a,r0
      0006CC A6 82            [24] 1756 	mov	@r0,dpl
      0006CE 08               [12] 1757 	inc	r0
      0006CF A6 83            [24] 1758 	mov	@r0,dph
      0006D1 15 81            [12] 1759 	dec	sp
      0006D3 15 81            [12] 1760 	dec	sp
      0006D5 D0 02            [24] 1761 	pop	ar2
      0006D7 D0 03            [24] 1762 	pop	ar3
      0006D9 E5*00            [12] 1763 	mov	a,_bp
      0006DB 24 06            [12] 1764 	add	a,#0x06
      0006DD F8               [12] 1765 	mov	r0,a
      0006DE E5*00            [12] 1766 	mov	a,_bp
      0006E0 24 0A            [12] 1767 	add	a,#0x0a
      0006E2 F9               [12] 1768 	mov	r1,a
      0006E3 E7               [12] 1769 	mov	a,@r1
      0006E4 26               [12] 1770 	add	a,@r0
      0006E5 FC               [12] 1771 	mov	r4,a
      0006E6 09               [12] 1772 	inc	r1
      0006E7 E7               [12] 1773 	mov	a,@r1
      0006E8 08               [12] 1774 	inc	r0
      0006E9 36               [12] 1775 	addc	a,@r0
      0006EA FD               [12] 1776 	mov	r5,a
      0006EB EC               [12] 1777 	mov	a,r4
      0006EC 24r02            [12] 1778 	add	a,#_u
      0006EE F5 82            [12] 1779 	mov	dpl,a
      0006F0 ED               [12] 1780 	mov	a,r5
      0006F1 34s04            [12] 1781 	addc	a,#(_u >> 8)
      0006F3 F5 83            [12] 1782 	mov	dph,a
      0006F5 E0               [24] 1783 	movx	a,@dptr
      0006F6 FD               [12] 1784 	mov	r5,a
      0006F7 E5*00            [12] 1785 	mov	a,_bp
      0006F9 24 05            [12] 1786 	add	a,#0x05
      0006FB F8               [12] 1787 	mov	r0,a
      0006FC ED               [12] 1788 	mov	a,r5
      0006FD 26               [12] 1789 	add	a,@r0
      0006FE F6               [12] 1790 	mov	@r0,a
                                   1791 ;	life.c:169: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006FF 74 21            [12] 1792 	mov	a,#0x21
      000701 2A               [12] 1793 	add	a,r2
      000702 FC               [12] 1794 	mov	r4,a
      000703 E4               [12] 1795 	clr	a
      000704 3B               [12] 1796 	addc	a,r3
      000705 FD               [12] 1797 	mov	r5,a
      000706 C0 03            [24] 1798 	push	ar3
      000708 C0 02            [24] 1799 	push	ar2
      00070A 74 20            [12] 1800 	mov	a,#0x20
      00070C C0 E0            [24] 1801 	push	acc
      00070E E4               [12] 1802 	clr	a
      00070F C0 E0            [24] 1803 	push	acc
      000711 8C 82            [24] 1804 	mov	dpl,r4
      000713 8D 83            [24] 1805 	mov	dph,r5
      000715 12r00r00         [24] 1806 	lcall	__modsint
      000718 C8               [12] 1807 	xch	a,r0
      000719 E5*00            [12] 1808 	mov	a,_bp
      00071B 24 0C            [12] 1809 	add	a,#0x0c
      00071D C8               [12] 1810 	xch	a,r0
      00071E A6 82            [24] 1811 	mov	@r0,dpl
      000720 08               [12] 1812 	inc	r0
      000721 A6 83            [24] 1813 	mov	@r0,dph
      000723 15 81            [12] 1814 	dec	sp
      000725 15 81            [12] 1815 	dec	sp
      000727 D0 02            [24] 1816 	pop	ar2
      000729 D0 03            [24] 1817 	pop	ar3
      00072B D0 06            [24] 1818 	pop	ar6
      00072D D0 07            [24] 1819 	pop	ar7
      00072F E5*00            [12] 1820 	mov	a,_bp
      000731 24 06            [12] 1821 	add	a,#0x06
      000733 F8               [12] 1822 	mov	r0,a
      000734 E5*00            [12] 1823 	mov	a,_bp
      000736 24 0C            [12] 1824 	add	a,#0x0c
      000738 F9               [12] 1825 	mov	r1,a
      000739 E7               [12] 1826 	mov	a,@r1
      00073A 26               [12] 1827 	add	a,@r0
      00073B FC               [12] 1828 	mov	r4,a
      00073C 09               [12] 1829 	inc	r1
      00073D E7               [12] 1830 	mov	a,@r1
      00073E 08               [12] 1831 	inc	r0
      00073F 36               [12] 1832 	addc	a,@r0
      000740 FD               [12] 1833 	mov	r5,a
      000741 EC               [12] 1834 	mov	a,r4
      000742 24r02            [12] 1835 	add	a,#_u
      000744 F5 82            [12] 1836 	mov	dpl,a
      000746 ED               [12] 1837 	mov	a,r5
      000747 34s04            [12] 1838 	addc	a,#(_u >> 8)
      000749 F5 83            [12] 1839 	mov	dph,a
      00074B E0               [24] 1840 	movx	a,@dptr
      00074C FD               [12] 1841 	mov	r5,a
      00074D E5*00            [12] 1842 	mov	a,_bp
      00074F 24 05            [12] 1843 	add	a,#0x05
      000751 F8               [12] 1844 	mov	r0,a
      000752 E5*00            [12] 1845 	mov	a,_bp
      000754 24 06            [12] 1846 	add	a,#0x06
      000756 F9               [12] 1847 	mov	r1,a
      000757 ED               [12] 1848 	mov	a,r5
      000758 26               [12] 1849 	add	a,@r0
      000759 F7               [12] 1850 	mov	@r1,a
                                   1851 ;	life.c:171: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00075A 74 20            [12] 1852 	mov	a,#0x20
      00075C 2E               [12] 1853 	add	a,r6
      00075D FC               [12] 1854 	mov	r4,a
      00075E E4               [12] 1855 	clr	a
      00075F 3F               [12] 1856 	addc	a,r7
      000760 FD               [12] 1857 	mov	r5,a
      000761 C0 07            [24] 1858 	push	ar7
      000763 C0 06            [24] 1859 	push	ar6
      000765 C0 03            [24] 1860 	push	ar3
      000767 C0 02            [24] 1861 	push	ar2
      000769 74 20            [12] 1862 	mov	a,#0x20
      00076B C0 E0            [24] 1863 	push	acc
      00076D E4               [12] 1864 	clr	a
      00076E C0 E0            [24] 1865 	push	acc
      000770 8C 82            [24] 1866 	mov	dpl,r4
      000772 8D 83            [24] 1867 	mov	dph,r5
      000774 12r00r00         [24] 1868 	lcall	__modsint
      000777 AC 82            [24] 1869 	mov	r4,dpl
      000779 AD 83            [24] 1870 	mov	r5,dph
      00077B 15 81            [12] 1871 	dec	sp
      00077D 15 81            [12] 1872 	dec	sp
      00077F D0 02            [24] 1873 	pop	ar2
      000781 D0 03            [24] 1874 	pop	ar3
      000783 D0 06            [24] 1875 	pop	ar6
      000785 D0 07            [24] 1876 	pop	ar7
      000787 E5*00            [12] 1877 	mov	a,_bp
      000789 24 0E            [12] 1878 	add	a,#0x0e
      00078B F8               [12] 1879 	mov	r0,a
      00078C A6 04            [24] 1880 	mov	@r0,ar4
      00078E ED               [12] 1881 	mov	a,r5
      00078F C4               [12] 1882 	swap	a
      000790 23               [12] 1883 	rl	a
      000791 54 E0            [12] 1884 	anl	a,#0xe0
      000793 C6               [12] 1885 	xch	a,@r0
      000794 C4               [12] 1886 	swap	a
      000795 23               [12] 1887 	rl	a
      000796 C6               [12] 1888 	xch	a,@r0
      000797 66               [12] 1889 	xrl	a,@r0
      000798 C6               [12] 1890 	xch	a,@r0
      000799 54 E0            [12] 1891 	anl	a,#0xe0
      00079B C6               [12] 1892 	xch	a,@r0
      00079C 66               [12] 1893 	xrl	a,@r0
      00079D 08               [12] 1894 	inc	r0
      00079E F6               [12] 1895 	mov	@r0,a
      00079F E5*00            [12] 1896 	mov	a,_bp
      0007A1 24 0E            [12] 1897 	add	a,#0x0e
      0007A3 F8               [12] 1898 	mov	r0,a
      0007A4 E5*00            [12] 1899 	mov	a,_bp
      0007A6 24 08            [12] 1900 	add	a,#0x08
      0007A8 F9               [12] 1901 	mov	r1,a
      0007A9 E7               [12] 1902 	mov	a,@r1
      0007AA 26               [12] 1903 	add	a,@r0
      0007AB FC               [12] 1904 	mov	r4,a
      0007AC 09               [12] 1905 	inc	r1
      0007AD E7               [12] 1906 	mov	a,@r1
      0007AE 08               [12] 1907 	inc	r0
      0007AF 36               [12] 1908 	addc	a,@r0
      0007B0 FD               [12] 1909 	mov	r5,a
      0007B1 EC               [12] 1910 	mov	a,r4
      0007B2 24r02            [12] 1911 	add	a,#_u
      0007B4 F5 82            [12] 1912 	mov	dpl,a
      0007B6 ED               [12] 1913 	mov	a,r5
      0007B7 34s04            [12] 1914 	addc	a,#(_u >> 8)
      0007B9 F5 83            [12] 1915 	mov	dph,a
      0007BB E0               [24] 1916 	movx	a,@dptr
      0007BC FD               [12] 1917 	mov	r5,a
      0007BD E5*00            [12] 1918 	mov	a,_bp
      0007BF 24 06            [12] 1919 	add	a,#0x06
      0007C1 F8               [12] 1920 	mov	r0,a
      0007C2 E5*00            [12] 1921 	mov	a,_bp
      0007C4 24 06            [12] 1922 	add	a,#0x06
      0007C6 F9               [12] 1923 	mov	r1,a
      0007C7 ED               [12] 1924 	mov	a,r5
      0007C8 26               [12] 1925 	add	a,@r0
      0007C9 F7               [12] 1926 	mov	@r1,a
                                   1927 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007CA E5*00            [12] 1928 	mov	a,_bp
      0007CC 24 0E            [12] 1929 	add	a,#0x0e
      0007CE F8               [12] 1930 	mov	r0,a
      0007CF E5*00            [12] 1931 	mov	a,_bp
      0007D1 24 0A            [12] 1932 	add	a,#0x0a
      0007D3 F9               [12] 1933 	mov	r1,a
      0007D4 E7               [12] 1934 	mov	a,@r1
      0007D5 26               [12] 1935 	add	a,@r0
      0007D6 FC               [12] 1936 	mov	r4,a
      0007D7 09               [12] 1937 	inc	r1
      0007D8 E7               [12] 1938 	mov	a,@r1
      0007D9 08               [12] 1939 	inc	r0
      0007DA 36               [12] 1940 	addc	a,@r0
      0007DB FD               [12] 1941 	mov	r5,a
      0007DC EC               [12] 1942 	mov	a,r4
      0007DD 24r02            [12] 1943 	add	a,#_u
      0007DF F5 82            [12] 1944 	mov	dpl,a
      0007E1 ED               [12] 1945 	mov	a,r5
      0007E2 34s04            [12] 1946 	addc	a,#(_u >> 8)
      0007E4 F5 83            [12] 1947 	mov	dph,a
      0007E6 E0               [24] 1948 	movx	a,@dptr
      0007E7 FD               [12] 1949 	mov	r5,a
      0007E8 E5*00            [12] 1950 	mov	a,_bp
      0007EA 24 06            [12] 1951 	add	a,#0x06
      0007EC F8               [12] 1952 	mov	r0,a
      0007ED E5*00            [12] 1953 	mov	a,_bp
      0007EF 24 06            [12] 1954 	add	a,#0x06
      0007F1 F9               [12] 1955 	mov	r1,a
      0007F2 ED               [12] 1956 	mov	a,r5
      0007F3 26               [12] 1957 	add	a,@r0
      0007F4 F7               [12] 1958 	mov	@r1,a
                                   1959 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007F5 E5*00            [12] 1960 	mov	a,_bp
      0007F7 24 0E            [12] 1961 	add	a,#0x0e
      0007F9 F8               [12] 1962 	mov	r0,a
      0007FA E5*00            [12] 1963 	mov	a,_bp
      0007FC 24 0C            [12] 1964 	add	a,#0x0c
      0007FE F9               [12] 1965 	mov	r1,a
      0007FF E7               [12] 1966 	mov	a,@r1
      000800 26               [12] 1967 	add	a,@r0
      000801 FC               [12] 1968 	mov	r4,a
      000802 09               [12] 1969 	inc	r1
      000803 E7               [12] 1970 	mov	a,@r1
      000804 08               [12] 1971 	inc	r0
      000805 36               [12] 1972 	addc	a,@r0
      000806 FD               [12] 1973 	mov	r5,a
      000807 EC               [12] 1974 	mov	a,r4
      000808 24r02            [12] 1975 	add	a,#_u
      00080A F5 82            [12] 1976 	mov	dpl,a
      00080C ED               [12] 1977 	mov	a,r5
      00080D 34s04            [12] 1978 	addc	a,#(_u >> 8)
      00080F F5 83            [12] 1979 	mov	dph,a
      000811 E0               [24] 1980 	movx	a,@dptr
      000812 FD               [12] 1981 	mov	r5,a
      000813 E5*00            [12] 1982 	mov	a,_bp
      000815 24 06            [12] 1983 	add	a,#0x06
      000817 F8               [12] 1984 	mov	r0,a
      000818 E5*00            [12] 1985 	mov	a,_bp
      00081A 24 0E            [12] 1986 	add	a,#0x0e
      00081C F9               [12] 1987 	mov	r1,a
      00081D ED               [12] 1988 	mov	a,r5
      00081E 26               [12] 1989 	add	a,@r0
      00081F F7               [12] 1990 	mov	@r1,a
                                   1991 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000820 74 21            [12] 1992 	mov	a,#0x21
      000822 2E               [12] 1993 	add	a,r6
      000823 FE               [12] 1994 	mov	r6,a
      000824 E4               [12] 1995 	clr	a
      000825 3F               [12] 1996 	addc	a,r7
      000826 FF               [12] 1997 	mov	r7,a
      000827 C0 03            [24] 1998 	push	ar3
      000829 C0 02            [24] 1999 	push	ar2
      00082B 74 20            [12] 2000 	mov	a,#0x20
      00082D C0 E0            [24] 2001 	push	acc
      00082F E4               [12] 2002 	clr	a
      000830 C0 E0            [24] 2003 	push	acc
      000832 8E 82            [24] 2004 	mov	dpl,r6
      000834 8F 83            [24] 2005 	mov	dph,r7
      000836 12r00r00         [24] 2006 	lcall	__modsint
      000839 AE 82            [24] 2007 	mov	r6,dpl
      00083B AF 83            [24] 2008 	mov	r7,dph
      00083D 15 81            [12] 2009 	dec	sp
      00083F 15 81            [12] 2010 	dec	sp
      000841 D0 02            [24] 2011 	pop	ar2
      000843 D0 03            [24] 2012 	pop	ar3
      000845 EF               [12] 2013 	mov	a,r7
      000846 C4               [12] 2014 	swap	a
      000847 23               [12] 2015 	rl	a
      000848 54 E0            [12] 2016 	anl	a,#0xe0
      00084A CE               [12] 2017 	xch	a,r6
      00084B C4               [12] 2018 	swap	a
      00084C 23               [12] 2019 	rl	a
      00084D CE               [12] 2020 	xch	a,r6
      00084E 6E               [12] 2021 	xrl	a,r6
      00084F CE               [12] 2022 	xch	a,r6
      000850 54 E0            [12] 2023 	anl	a,#0xe0
      000852 CE               [12] 2024 	xch	a,r6
      000853 6E               [12] 2025 	xrl	a,r6
      000854 FF               [12] 2026 	mov	r7,a
      000855 E5*00            [12] 2027 	mov	a,_bp
      000857 24 08            [12] 2028 	add	a,#0x08
      000859 F8               [12] 2029 	mov	r0,a
      00085A E6               [12] 2030 	mov	a,@r0
      00085B 2E               [12] 2031 	add	a,r6
      00085C FC               [12] 2032 	mov	r4,a
      00085D 08               [12] 2033 	inc	r0
      00085E E6               [12] 2034 	mov	a,@r0
      00085F 3F               [12] 2035 	addc	a,r7
      000860 FD               [12] 2036 	mov	r5,a
      000861 EC               [12] 2037 	mov	a,r4
      000862 24r02            [12] 2038 	add	a,#_u
      000864 F5 82            [12] 2039 	mov	dpl,a
      000866 ED               [12] 2040 	mov	a,r5
      000867 34s04            [12] 2041 	addc	a,#(_u >> 8)
      000869 F5 83            [12] 2042 	mov	dph,a
      00086B E0               [24] 2043 	movx	a,@dptr
      00086C FD               [12] 2044 	mov	r5,a
      00086D E5*00            [12] 2045 	mov	a,_bp
      00086F 24 0E            [12] 2046 	add	a,#0x0e
      000871 F8               [12] 2047 	mov	r0,a
      000872 E5*00            [12] 2048 	mov	a,_bp
      000874 24 0E            [12] 2049 	add	a,#0x0e
      000876 F9               [12] 2050 	mov	r1,a
      000877 ED               [12] 2051 	mov	a,r5
      000878 26               [12] 2052 	add	a,@r0
      000879 F7               [12] 2053 	mov	@r1,a
                                   2054 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00087A E5*00            [12] 2055 	mov	a,_bp
      00087C 24 0A            [12] 2056 	add	a,#0x0a
      00087E F8               [12] 2057 	mov	r0,a
      00087F E6               [12] 2058 	mov	a,@r0
      000880 2E               [12] 2059 	add	a,r6
      000881 FC               [12] 2060 	mov	r4,a
      000882 08               [12] 2061 	inc	r0
      000883 E6               [12] 2062 	mov	a,@r0
      000884 3F               [12] 2063 	addc	a,r7
      000885 FD               [12] 2064 	mov	r5,a
      000886 EC               [12] 2065 	mov	a,r4
      000887 24r02            [12] 2066 	add	a,#_u
      000889 F5 82            [12] 2067 	mov	dpl,a
      00088B ED               [12] 2068 	mov	a,r5
      00088C 34s04            [12] 2069 	addc	a,#(_u >> 8)
      00088E F5 83            [12] 2070 	mov	dph,a
      000890 E0               [24] 2071 	movx	a,@dptr
      000891 FD               [12] 2072 	mov	r5,a
      000892 E5*00            [12] 2073 	mov	a,_bp
      000894 24 0E            [12] 2074 	add	a,#0x0e
      000896 F8               [12] 2075 	mov	r0,a
      000897 ED               [12] 2076 	mov	a,r5
      000898 26               [12] 2077 	add	a,@r0
      000899 FD               [12] 2078 	mov	r5,a
                                   2079 ;	life.c:180: y1 = 1; x1 = 1;
      00089A 90r0Cr08         [24] 2080 	mov	dptr,#_y1
      00089D 74 01            [12] 2081 	mov	a,#0x01
      00089F F0               [24] 2082 	movx	@dptr,a
      0008A0 E4               [12] 2083 	clr	a
      0008A1 A3               [24] 2084 	inc	dptr
      0008A2 F0               [24] 2085 	movx	@dptr,a
      0008A3 90r0Cr06         [24] 2086 	mov	dptr,#_x1
      0008A6 04               [12] 2087 	inc	a
      0008A7 F0               [24] 2088 	movx	@dptr,a
      0008A8 E4               [12] 2089 	clr	a
      0008A9 A3               [24] 2090 	inc	dptr
      0008AA F0               [24] 2091 	movx	@dptr,a
                                   2092 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008AB E5*00            [12] 2093 	mov	a,_bp
      0008AD 24 0C            [12] 2094 	add	a,#0x0c
      0008AF F8               [12] 2095 	mov	r0,a
      0008B0 E6               [12] 2096 	mov	a,@r0
      0008B1 2E               [12] 2097 	add	a,r6
      0008B2 FE               [12] 2098 	mov	r6,a
      0008B3 08               [12] 2099 	inc	r0
      0008B4 E6               [12] 2100 	mov	a,@r0
      0008B5 3F               [12] 2101 	addc	a,r7
      0008B6 FF               [12] 2102 	mov	r7,a
      0008B7 EE               [12] 2103 	mov	a,r6
      0008B8 24r02            [12] 2104 	add	a,#_u
      0008BA F5 82            [12] 2105 	mov	dpl,a
      0008BC EF               [12] 2106 	mov	a,r7
      0008BD 34s04            [12] 2107 	addc	a,#(_u >> 8)
      0008BF F5 83            [12] 2108 	mov	dph,a
      0008C1 E0               [24] 2109 	movx	a,@dptr
      0008C2 2D               [12] 2110 	add	a,r5
      0008C3 FF               [12] 2111 	mov	r7,a
      0008C4 90r0Cr0F         [24] 2112 	mov	dptr,#_n
      0008C7 F0               [24] 2113 	movx	@dptr,a
                                   2114 ;	life.c:183: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008C8 E5*00            [12] 2115 	mov	a,_bp
      0008CA 24 03            [12] 2116 	add	a,#0x03
      0008CC F8               [12] 2117 	mov	r0,a
      0008CD E6               [12] 2118 	mov	a,@r0
      0008CE 24r02            [12] 2119 	add	a,#_nu
      0008D0 FD               [12] 2120 	mov	r5,a
      0008D1 08               [12] 2121 	inc	r0
      0008D2 E6               [12] 2122 	mov	a,@r0
      0008D3 34s08            [12] 2123 	addc	a,#(_nu >> 8)
      0008D5 FE               [12] 2124 	mov	r6,a
      0008D6 BF 03 02         [24] 2125 	cjne	r7,#0x03,00394$
      0008D9 80 20            [24] 2126 	sjmp	00199$
      0008DB                       2127 00394$:
      0008DB BF 02 19         [24] 2128 	cjne	r7,#0x02,00198$
      0008DE A8*00            [24] 2129 	mov	r0,_bp
      0008E0 08               [12] 2130 	inc	r0
      0008E1 EA               [12] 2131 	mov	a,r2
      0008E2 26               [12] 2132 	add	a,@r0
      0008E3 FA               [12] 2133 	mov	r2,a
      0008E4 EB               [12] 2134 	mov	a,r3
      0008E5 08               [12] 2135 	inc	r0
      0008E6 36               [12] 2136 	addc	a,@r0
      0008E7 FB               [12] 2137 	mov	r3,a
      0008E8 EA               [12] 2138 	mov	a,r2
      0008E9 24r02            [12] 2139 	add	a,#_u
      0008EB FA               [12] 2140 	mov	r2,a
      0008EC EB               [12] 2141 	mov	a,r3
      0008ED 34s04            [12] 2142 	addc	a,#(_u >> 8)
      0008EF FB               [12] 2143 	mov	r3,a
      0008F0 8A 82            [24] 2144 	mov	dpl,r2
      0008F2 8B 83            [24] 2145 	mov	dph,r3
      0008F4 E0               [24] 2146 	movx	a,@dptr
      0008F5 70 04            [24] 2147 	jnz	00199$
      0008F7                       2148 00198$:
                                   2149 ;	assignBit
      0008F7 C2*00            [12] 2150 	clr	b0
      0008F9 80 02            [24] 2151 	sjmp	00200$
      0008FB                       2152 00199$:
                                   2153 ;	assignBit
      0008FB D2*00            [12] 2154 	setb	b0
      0008FD                       2155 00200$:
      0008FD A2*00            [12] 2156 	mov	c,b0
      0008FF E4               [12] 2157 	clr	a
      000900 33               [12] 2158 	rlc	a
      000901 8D 82            [24] 2159 	mov	dpl,r5
      000903 8E 83            [24] 2160 	mov	dph,r6
      000905 F0               [24] 2161 	movx	@dptr,a
                                   2162 ;	life.c:185: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      000906 90r0Cr04         [24] 2163 	mov	dptr,#_y
      000909 E0               [24] 2164 	movx	a,@dptr
      00090A FE               [12] 2165 	mov	r6,a
      00090B A3               [24] 2166 	inc	dptr
      00090C E0               [24] 2167 	movx	a,@dptr
      00090D C4               [12] 2168 	swap	a
      00090E 23               [12] 2169 	rl	a
      00090F 54 E0            [12] 2170 	anl	a,#0xe0
      000911 CE               [12] 2171 	xch	a,r6
      000912 C4               [12] 2172 	swap	a
      000913 23               [12] 2173 	rl	a
      000914 CE               [12] 2174 	xch	a,r6
      000915 6E               [12] 2175 	xrl	a,r6
      000916 CE               [12] 2176 	xch	a,r6
      000917 54 E0            [12] 2177 	anl	a,#0xe0
      000919 CE               [12] 2178 	xch	a,r6
      00091A 6E               [12] 2179 	xrl	a,r6
      00091B FF               [12] 2180 	mov	r7,a
      00091C 90r0Cr02         [24] 2181 	mov	dptr,#_x
      00091F E0               [24] 2182 	movx	a,@dptr
      000920 FC               [12] 2183 	mov	r4,a
      000921 A3               [24] 2184 	inc	dptr
      000922 E0               [24] 2185 	movx	a,@dptr
      000923 FD               [12] 2186 	mov	r5,a
      000924 EC               [12] 2187 	mov	a,r4
      000925 2E               [12] 2188 	add	a,r6
      000926 FE               [12] 2189 	mov	r6,a
      000927 ED               [12] 2190 	mov	a,r5
      000928 3F               [12] 2191 	addc	a,r7
      000929 FF               [12] 2192 	mov	r7,a
      00092A EE               [12] 2193 	mov	a,r6
      00092B 24r02            [12] 2194 	add	a,#_pu
      00092D F5 82            [12] 2195 	mov	dpl,a
      00092F EF               [12] 2196 	mov	a,r7
      000930 34s00            [12] 2197 	addc	a,#(_pu >> 8)
      000932 F5 83            [12] 2198 	mov	dph,a
      000934 E0               [24] 2199 	movx	a,@dptr
      000935 FD               [12] 2200 	mov	r5,a
      000936 EE               [12] 2201 	mov	a,r6
      000937 24r02            [12] 2202 	add	a,#_nu
      000939 F5 82            [12] 2203 	mov	dpl,a
      00093B EF               [12] 2204 	mov	a,r7
      00093C 34s08            [12] 2205 	addc	a,#(_nu >> 8)
      00093E F5 83            [12] 2206 	mov	dph,a
      000940 E0               [24] 2207 	movx	a,@dptr
      000941 FF               [12] 2208 	mov	r7,a
      000942 ED               [12] 2209 	mov	a,r5
      000943 B5 07 02         [24] 2210 	cjne	a,ar7,00398$
      000946 80 05            [24] 2211 	sjmp	00146$
      000948                       2212 00398$:
      000948 90r0Cr11         [24] 2213 	mov	dptr,#_cycle2
      00094B E4               [12] 2214 	clr	a
      00094C F0               [24] 2215 	movx	@dptr,a
      00094D                       2216 00146$:
                                   2217 ;	life.c:186: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      00094D 90r0Cr04         [24] 2218 	mov	dptr,#_y
      000950 E0               [24] 2219 	movx	a,@dptr
      000951 FE               [12] 2220 	mov	r6,a
      000952 A3               [24] 2221 	inc	dptr
      000953 E0               [24] 2222 	movx	a,@dptr
      000954 C4               [12] 2223 	swap	a
      000955 23               [12] 2224 	rl	a
      000956 54 E0            [12] 2225 	anl	a,#0xe0
      000958 CE               [12] 2226 	xch	a,r6
      000959 C4               [12] 2227 	swap	a
      00095A 23               [12] 2228 	rl	a
      00095B CE               [12] 2229 	xch	a,r6
      00095C 6E               [12] 2230 	xrl	a,r6
      00095D CE               [12] 2231 	xch	a,r6
      00095E 54 E0            [12] 2232 	anl	a,#0xe0
      000960 CE               [12] 2233 	xch	a,r6
      000961 6E               [12] 2234 	xrl	a,r6
      000962 FF               [12] 2235 	mov	r7,a
      000963 90r0Cr02         [24] 2236 	mov	dptr,#_x
      000966 E0               [24] 2237 	movx	a,@dptr
      000967 FC               [12] 2238 	mov	r4,a
      000968 A3               [24] 2239 	inc	dptr
      000969 E0               [24] 2240 	movx	a,@dptr
      00096A FD               [12] 2241 	mov	r5,a
      00096B EC               [12] 2242 	mov	a,r4
      00096C 2E               [12] 2243 	add	a,r6
      00096D FE               [12] 2244 	mov	r6,a
      00096E ED               [12] 2245 	mov	a,r5
      00096F 3F               [12] 2246 	addc	a,r7
      000970 FF               [12] 2247 	mov	r7,a
      000971 EE               [12] 2248 	mov	a,r6
      000972 24r02            [12] 2249 	add	a,#_u
      000974 F5 82            [12] 2250 	mov	dpl,a
      000976 EF               [12] 2251 	mov	a,r7
      000977 34s04            [12] 2252 	addc	a,#(_u >> 8)
      000979 F5 83            [12] 2253 	mov	dph,a
      00097B E0               [24] 2254 	movx	a,@dptr
      00097C FD               [12] 2255 	mov	r5,a
      00097D EE               [12] 2256 	mov	a,r6
      00097E 24r02            [12] 2257 	add	a,#_nu
      000980 F5 82            [12] 2258 	mov	dpl,a
      000982 EF               [12] 2259 	mov	a,r7
      000983 34s08            [12] 2260 	addc	a,#(_nu >> 8)
      000985 F5 83            [12] 2261 	mov	dph,a
      000987 E0               [24] 2262 	movx	a,@dptr
      000988 FF               [12] 2263 	mov	r7,a
      000989 ED               [12] 2264 	mov	a,r5
      00098A B5 07 02         [24] 2265 	cjne	a,ar7,00399$
      00098D 80 05            [24] 2266 	sjmp	00178$
      00098F                       2267 00399$:
      00098F 90r0Cr10         [24] 2268 	mov	dptr,#_fixed
      000992 E4               [12] 2269 	clr	a
      000993 F0               [24] 2270 	movx	@dptr,a
      000994                       2271 00178$:
                                   2272 ;	life.c:161: for (x = 0; x < W; x++) {
      000994 90r0Cr02         [24] 2273 	mov	dptr,#_x
      000997 E0               [24] 2274 	movx	a,@dptr
      000998 24 01            [12] 2275 	add	a,#0x01
      00099A F0               [24] 2276 	movx	@dptr,a
      00099B A3               [24] 2277 	inc	dptr
      00099C E0               [24] 2278 	movx	a,@dptr
      00099D 34 00            [12] 2279 	addc	a,#0x00
      00099F F0               [24] 2280 	movx	@dptr,a
      0009A0 90r0Cr02         [24] 2281 	mov	dptr,#_x
      0009A3 E0               [24] 2282 	movx	a,@dptr
      0009A4 FE               [12] 2283 	mov	r6,a
      0009A5 A3               [24] 2284 	inc	dptr
      0009A6 E0               [24] 2285 	movx	a,@dptr
      0009A7 FF               [12] 2286 	mov	r7,a
      0009A8 C3               [12] 2287 	clr	c
      0009A9 EE               [12] 2288 	mov	a,r6
      0009AA 94 20            [12] 2289 	subb	a,#0x20
      0009AC EF               [12] 2290 	mov	a,r7
      0009AD 64 80            [12] 2291 	xrl	a,#0x80
      0009AF 94 80            [12] 2292 	subb	a,#0x80
      0009B1 50 03            [24] 2293 	jnc	00400$
      0009B3 02r05rC9         [24] 2294 	ljmp	00177$
      0009B6                       2295 00400$:
                                   2296 ;	life.c:158: for (y = 0; y < H; y++) {
      0009B6 90r0Cr04         [24] 2297 	mov	dptr,#_y
      0009B9 E0               [24] 2298 	movx	a,@dptr
      0009BA 24 01            [12] 2299 	add	a,#0x01
      0009BC F0               [24] 2300 	movx	@dptr,a
      0009BD A3               [24] 2301 	inc	dptr
      0009BE E0               [24] 2302 	movx	a,@dptr
      0009BF 34 00            [12] 2303 	addc	a,#0x00
      0009C1 F0               [24] 2304 	movx	@dptr,a
      0009C2 90r0Cr04         [24] 2305 	mov	dptr,#_y
      0009C5 E0               [24] 2306 	movx	a,@dptr
      0009C6 FE               [12] 2307 	mov	r6,a
      0009C7 A3               [24] 2308 	inc	dptr
      0009C8 E0               [24] 2309 	movx	a,@dptr
      0009C9 FF               [12] 2310 	mov	r7,a
      0009CA C3               [12] 2311 	clr	c
      0009CB EE               [12] 2312 	mov	a,r6
      0009CC 94 20            [12] 2313 	subb	a,#0x20
      0009CE EF               [12] 2314 	mov	a,r7
      0009CF 64 80            [12] 2315 	xrl	a,#0x80
      0009D1 94 80            [12] 2316 	subb	a,#0x80
      0009D3 50 03            [24] 2317 	jnc	00401$
      0009D5 02r05rA0         [24] 2318 	ljmp	00179$
      0009D8                       2319 00401$:
                                   2320 ;	life.c:190: memcpy(pu, u, sizeof (u));
      0009D8 E4               [12] 2321 	clr	a
      0009D9 C0 E0            [24] 2322 	push	acc
      0009DB 74 04            [12] 2323 	mov	a,#0x04
      0009DD C0 E0            [24] 2324 	push	acc
      0009DF 74r02            [12] 2325 	mov	a,#_u
      0009E1 C0 E0            [24] 2326 	push	acc
      0009E3 74s04            [12] 2327 	mov	a,#(_u >> 8)
      0009E5 C0 E0            [24] 2328 	push	acc
      0009E7 E4               [12] 2329 	clr	a
      0009E8 C0 E0            [24] 2330 	push	acc
      0009EA 90r00r02         [24] 2331 	mov	dptr,#_pu
      0009ED 75 F0 00         [24] 2332 	mov	b,#0x00
      0009F0 12r00r00         [24] 2333 	lcall	___memcpy
      0009F3 E5 81            [12] 2334 	mov	a,sp
      0009F5 24 FB            [12] 2335 	add	a,#0xfb
      0009F7 F5 81            [12] 2336 	mov	sp,a
                                   2337 ;	life.c:191: memcpy(u, nu, sizeof (nu));
      0009F9 E4               [12] 2338 	clr	a
      0009FA C0 E0            [24] 2339 	push	acc
      0009FC 74 04            [12] 2340 	mov	a,#0x04
      0009FE C0 E0            [24] 2341 	push	acc
      000A00 74r02            [12] 2342 	mov	a,#_nu
      000A02 C0 E0            [24] 2343 	push	acc
      000A04 74s08            [12] 2344 	mov	a,#(_nu >> 8)
      000A06 C0 E0            [24] 2345 	push	acc
      000A08 E4               [12] 2346 	clr	a
      000A09 C0 E0            [24] 2347 	push	acc
      000A0B 90r04r02         [24] 2348 	mov	dptr,#_u
      000A0E 75 F0 00         [24] 2349 	mov	b,#0x00
      000A11 12r00r00         [24] 2350 	lcall	___memcpy
      000A14 E5 81            [12] 2351 	mov	a,sp
      000A16 24 FB            [12] 2352 	add	a,#0xfb
      000A18 F5 81            [12] 2353 	mov	sp,a
                                   2354 ;	life.c:223: if (fixed || cycle2) {
      000A1A 90r0Cr10         [24] 2355 	mov	dptr,#_fixed
      000A1D E0               [24] 2356 	movx	a,@dptr
      000A1E 70 09            [24] 2357 	jnz	00106$
      000A20 90r0Cr11         [24] 2358 	mov	dptr,#_cycle2
      000A23 E0               [24] 2359 	movx	a,@dptr
      000A24 70 03            [24] 2360 	jnz	00403$
      000A26 02r05r73         [24] 2361 	ljmp	00186$
      000A29                       2362 00403$:
      000A29                       2363 00106$:
                                   2364 ;	life.c:224: printstr("DONE\r\n");
      000A29 7Dr44            [12] 2365 	mov	r5,#___str_7
      000A2B 7Es00            [12] 2366 	mov	r6,#(___str_7 >> 8)
      000A2D 7F 80            [12] 2367 	mov	r7,#0x80
                                   2368 ;	life.c:48: return;
      000A2F                       2369 00182$:
                                   2370 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A2F 8D 82            [24] 2371 	mov	dpl,r5
      000A31 8E 83            [24] 2372 	mov	dph,r6
      000A33 8F F0            [24] 2373 	mov	b,r7
      000A35 12r00r00         [24] 2374 	lcall	__gptrget
      000A38 FC               [12] 2375 	mov	r4,a
      000A39 60 10            [24] 2376 	jz	00153$
      000A3B 7B 00            [12] 2377 	mov	r3,#0x00
      000A3D 8C 82            [24] 2378 	mov	dpl,r4
      000A3F 8B 83            [24] 2379 	mov	dph,r3
      000A41 12r00r00         [24] 2380 	lcall	_putchar
      000A44 0D               [12] 2381 	inc	r5
                                   2382 ;	life.c:224: printstr("DONE\r\n");
      000A45 BD 00 E7         [24] 2383 	cjne	r5,#0x00,00182$
      000A48 0E               [12] 2384 	inc	r6
      000A49 80 E4            [24] 2385 	sjmp	00182$
      000A4B                       2386 00153$:
                                   2387 ;	life.c:225: (void)getchar();
      000A4B 12r00r05         [24] 2388 	lcall	_getchar
                                   2389 ;	life.c:226: break;
      000A4E                       2390 00109$:
                                   2391 ;	life.c:230: if (i1) {
      000A4E 90r00r01         [24] 2392 	mov	dptr,#_i1
      000A51 E0               [24] 2393 	movx	a,@dptr
      000A52 60 25            [24] 2394 	jz	00192$
                                   2395 ;	life.c:231: printstr("BREAK\r\n");
      000A54 7Dr4B            [12] 2396 	mov	r5,#___str_8
      000A56 7Es00            [12] 2397 	mov	r6,#(___str_8 >> 8)
      000A58 7F 80            [12] 2398 	mov	r7,#0x80
                                   2399 ;	life.c:48: return;
      000A5A                       2400 00189$:
                                   2401 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A5A 8D 82            [24] 2402 	mov	dpl,r5
      000A5C 8E 83            [24] 2403 	mov	dph,r6
      000A5E 8F F0            [24] 2404 	mov	b,r7
      000A60 12r00r00         [24] 2405 	lcall	__gptrget
      000A63 FC               [12] 2406 	mov	r4,a
      000A64 60 10            [24] 2407 	jz	00155$
      000A66 7B 00            [12] 2408 	mov	r3,#0x00
      000A68 8C 82            [24] 2409 	mov	dpl,r4
      000A6A 8B 83            [24] 2410 	mov	dph,r3
      000A6C 12r00r00         [24] 2411 	lcall	_putchar
      000A6F 0D               [12] 2412 	inc	r5
                                   2413 ;	life.c:231: printstr("BREAK\r\n");
      000A70 BD 00 E7         [24] 2414 	cjne	r5,#0x00,00189$
      000A73 0E               [12] 2415 	inc	r6
      000A74 80 E4            [24] 2416 	sjmp	00189$
      000A76                       2417 00155$:
                                   2418 ;	life.c:232: (void)getchar();
      000A76 12r00r05         [24] 2419 	lcall	_getchar
      000A79                       2420 00192$:
                                   2421 ;	life.c:203: for (i0 = 0; !i0; ) {
      000A79 90r00r00         [24] 2422 	mov	dptr,#_i0
      000A7C E0               [24] 2423 	movx	a,@dptr
      000A7D 70 03            [24] 2424 	jnz	00409$
      000A7F 02r02rB2         [24] 2425 	ljmp	00191$
      000A82                       2426 00409$:
                                   2427 ;	life.c:236: EA = 0;
                                   2428 ;	assignBit
      000A82 C2 AF            [12] 2429 	clr	_EA
                                   2430 ;	life.c:238: printstr("TERM\r\n");
      000A84 7Dr53            [12] 2431 	mov	r5,#___str_9
      000A86 7Es00            [12] 2432 	mov	r6,#(___str_9 >> 8)
      000A88 7F 80            [12] 2433 	mov	r7,#0x80
                                   2434 ;	life.c:48: return;
      000A8A                       2435 00194$:
                                   2436 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A8A 8D 82            [24] 2437 	mov	dpl,r5
      000A8C 8E 83            [24] 2438 	mov	dph,r6
      000A8E 8F F0            [24] 2439 	mov	b,r7
      000A90 12r00r00         [24] 2440 	lcall	__gptrget
      000A93 FC               [12] 2441 	mov	r4,a
      000A94 60 10            [24] 2442 	jz	00157$
      000A96 7B 00            [12] 2443 	mov	r3,#0x00
      000A98 8C 82            [24] 2444 	mov	dpl,r4
      000A9A 8B 83            [24] 2445 	mov	dph,r3
      000A9C 12r00r00         [24] 2446 	lcall	_putchar
      000A9F 0D               [12] 2447 	inc	r5
                                   2448 ;	life.c:238: printstr("TERM\r\n");
      000AA0 BD 00 E7         [24] 2449 	cjne	r5,#0x00,00194$
      000AA3 0E               [12] 2450 	inc	r6
      000AA4 80 E4            [24] 2451 	sjmp	00194$
      000AA6                       2452 00157$:
                                   2453 ;	life.c:239: (void)getchar();
      000AA6 12r00r05         [24] 2454 	lcall	_getchar
                                   2455 ;	life.c:243: __endasm;
      000AA9 02 00 00         [24] 2456 	ljmp	0
                                   2457 ;	life.c:244: }
      000AAC 85*00 81         [24] 2458 	mov	sp,_bp
      000AAF D0*00            [24] 2459 	pop	_bp
      000AB1 22               [24] 2460 	ret
                                   2461 	.area CSEG    (CODE)
                                   2462 	.area CONST   (CODE)
      000000                       2463 _digits:
      000000 30                    2464 	.db #0x30	; 48	'0'
      000001 31                    2465 	.db #0x31	; 49	'1'
      000002 32                    2466 	.db #0x32	; 50	'2'
      000003 33                    2467 	.db #0x33	; 51	'3'
      000004 34                    2468 	.db #0x34	; 52	'4'
      000005 35                    2469 	.db #0x35	; 53	'5'
      000006 36                    2470 	.db #0x36	; 54	'6'
      000007 37                    2471 	.db #0x37	; 55	'7'
      000008 38                    2472 	.db #0x38	; 56	'8'
      000009 39                    2473 	.db #0x39	; 57	'9'
      00000A 61                    2474 	.db #0x61	; 97	'a'
      00000B 62                    2475 	.db #0x62	; 98	'b'
      00000C 63                    2476 	.db #0x63	; 99	'c'
      00000D 64                    2477 	.db #0x64	; 100	'd'
      00000E 65                    2478 	.db #0x65	; 101	'e'
      00000F 66                    2479 	.db #0x66	; 102	'f'
                                   2480 	.area CONST   (CODE)
      000010                       2481 ___str_0:
      000010 1B                    2482 	.db 0x1b
      000011 5B 32 4A              2483 	.ascii "[2J"
      000014 1B                    2484 	.db 0x1b
      000015 5B 6D                 2485 	.ascii "[m"
      000017 00                    2486 	.db 0x00
                                   2487 	.area CSEG    (CODE)
                                   2488 	.area CONST   (CODE)
      000018                       2489 ___str_1:
      000018 0D                    2490 	.db 0x0d
      000019 0A                    2491 	.db 0x0a
      00001A 00                    2492 	.db 0x00
                                   2493 	.area CSEG    (CODE)
                                   2494 	.area CONST   (CODE)
      00001B                       2495 ___str_2:
      00001B 4C 4F 41 44 20 3C     2496 	.ascii "LOAD <"
      000021 00                    2497 	.db 0x00
                                   2498 	.area CSEG    (CODE)
                                   2499 	.area CONST   (CODE)
      000022                       2500 ___str_3:
      000022 3E                    2501 	.ascii ">"
      000023 0D                    2502 	.db 0x0d
      000024 0A                    2503 	.db 0x0a
      000025 00                    2504 	.db 0x00
                                   2505 	.area CSEG    (CODE)
      000AB2                       2506 _busy:
      000AB2 5C                    2507 	.db #0x5c	; 92
      000AB3 7C                    2508 	.db #0x7c	; 124
      000AB4 2F                    2509 	.db #0x2f	; 47
      000AB5 2D                    2510 	.db #0x2d	; 45
                                   2511 	.area CONST   (CODE)
      000026                       2512 ___str_4:
      000026 1B                    2513 	.db 0x1b
      000027 5B 32 4A              2514 	.ascii "[2J"
      00002A 1B                    2515 	.db 0x1b
      00002B 5B 6D 49 4E 49 54     2516 	.ascii "[mINIT"
      000031 0D                    2517 	.db 0x0d
      000032 0A                    2518 	.db 0x0a
      000033 00                    2519 	.db 0x00
                                   2520 	.area CSEG    (CODE)
                                   2521 	.area CONST   (CODE)
      000034                       2522 ___str_5:
      000034 52 45 41 44 59        2523 	.ascii "READY"
      000039 0D                    2524 	.db 0x0d
      00003A 0A                    2525 	.db 0x0a
      00003B 00                    2526 	.db 0x00
                                   2527 	.area CSEG    (CODE)
                                   2528 	.area CONST   (CODE)
      00003C                       2529 ___str_6:
      00003C 53 54 41 52 54        2530 	.ascii "START"
      000041 0D                    2531 	.db 0x0d
      000042 0A                    2532 	.db 0x0a
      000043 00                    2533 	.db 0x00
                                   2534 	.area CSEG    (CODE)
                                   2535 	.area CONST   (CODE)
      000044                       2536 ___str_7:
      000044 44 4F 4E 45           2537 	.ascii "DONE"
      000048 0D                    2538 	.db 0x0d
      000049 0A                    2539 	.db 0x0a
      00004A 00                    2540 	.db 0x00
                                   2541 	.area CSEG    (CODE)
                                   2542 	.area CONST   (CODE)
      00004B                       2543 ___str_8:
      00004B 42 52 45 41 4B        2544 	.ascii "BREAK"
      000050 0D                    2545 	.db 0x0d
      000051 0A                    2546 	.db 0x0a
      000052 00                    2547 	.db 0x00
                                   2548 	.area CSEG    (CODE)
                                   2549 	.area CONST   (CODE)
      000053                       2550 ___str_9:
      000053 54 45 52 4D           2551 	.ascii "TERM"
      000057 0D                    2552 	.db 0x0d
      000058 0A                    2553 	.db 0x0a
      000059 00                    2554 	.db 0x00
                                   2555 	.area CSEG    (CODE)
                                   2556 	.area XINIT   (CODE)
                                   2557 	.area CABS    (ABS,CODE)
