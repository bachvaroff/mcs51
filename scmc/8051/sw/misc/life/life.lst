                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print32x
                                     16 	.globl _print16x
                                     17 	.globl _printstr
                                     18 	.globl _getchar_poll
                                     19 	.globl _getchar
                                     20 	.globl _putchar
                                     21 	.globl _toupper
                                     22 	.globl ___memcpy
                                     23 	.globl _memset
                                     24 	.globl _srand
                                     25 	.globl _rand
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable bit register bank
                                    291 ;--------------------------------------------------------
                                    292 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        293 bits:
      000000                        294 	.ds 1
                           008000   295 	b0 = bits[0]
                           008100   296 	b1 = bits[1]
                           008200   297 	b2 = bits[2]
                           008300   298 	b3 = bits[3]
                           008400   299 	b4 = bits[4]
                           008500   300 	b5 = bits[5]
                           008600   301 	b6 = bits[6]
                           008700   302 	b7 = bits[7]
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 ;--------------------------------------------------------
                                    311 ; Stack segment in internal ram 
                                    312 ;--------------------------------------------------------
                                    313 	.area	SSEG
      000000                        314 __start__stack:
      000000                        315 	.ds	1
                                    316 
                                    317 ;--------------------------------------------------------
                                    318 ; indirectly addressable internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area ISEG    (DATA)
      000000                        321 _i0:
      000000                        322 	.ds 1
      000001                        323 _i1:
      000001                        324 	.ds 1
      000002                        325 _OE76:
      000002                        326 	.ds 1
      000003                        327 _x:
      000003                        328 	.ds 2
      000005                        329 _y:
      000005                        330 	.ds 2
      000007                        331 _n:
      000007                        332 	.ds 1
      000008                        333 _fixed:
      000008                        334 	.ds 1
      000009                        335 _cycle2:
      000009                        336 	.ds 1
      00000A                        337 _gen:
      00000A                        338 	.ds 4
      00000E                        339 _genc2:
      00000E                        340 	.ds 4
      000012                        341 _c2set:
      000012                        342 	.ds 1
      000013                        343 _pruni:
      000013                        344 	.ds 1
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
                           008000   362 _RND	=	0x8000
                           00F006   363 _OEreg	=	0xf006
      000000                        364 _iu:
      000000                        365 	.ds 9216
      002400                        366 _pu:
      002400                        367 	.ds 9216
      004800                        368 _u:
      004800                        369 	.ds 9216
      006C00                        370 _nu:
      006C00                        371 	.ds 9216
                                    372 ;--------------------------------------------------------
                                    373 ; absolute external ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XABS    (ABS,XDATA)
                                    376 ;--------------------------------------------------------
                                    377 ; external initialized ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XISEG   (XDATA)
                                    380 	.area HOME    (CODE)
                                    381 	.area GSINIT0 (CODE)
                                    382 	.area GSINIT1 (CODE)
                                    383 	.area GSINIT2 (CODE)
                                    384 	.area GSINIT3 (CODE)
                                    385 	.area GSINIT4 (CODE)
                                    386 	.area GSINIT5 (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area CSEG    (CODE)
                                    390 ;--------------------------------------------------------
                                    391 ; interrupt vector 
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
      000000                        394 __interrupt_vect:
      000000 02r00r00         [24]  395 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  396 	ljmp	_int0
      000006                        397 	.ds	5
      00000B 32               [24]  398 	reti
      00000C                        399 	.ds	7
      000013 02r00r0C         [24]  400 	ljmp	_int1
                                    401 ;--------------------------------------------------------
                                    402 ; global & static initialisations
                                    403 ;--------------------------------------------------------
                                    404 	.area HOME    (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.area GSFINAL (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.globl __sdcc_gsinit_startup
                                    409 	.globl __sdcc_program_startup
                                    410 	.globl __start__stack
                                    411 	.globl __mcs51_genXINIT
                                    412 	.globl __mcs51_genXRAMCLEAR
                                    413 	.globl __mcs51_genRAMCLEAR
                                    414 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  415 	ljmp	__sdcc_program_startup
                                    416 ;--------------------------------------------------------
                                    417 ; Home
                                    418 ;--------------------------------------------------------
                                    419 	.area HOME    (CODE)
                                    420 	.area HOME    (CODE)
      000016                        421 __sdcc_program_startup:
      000016 02r01r38         [24]  422 	ljmp	_main
                                    423 ;	return from main will return to caller
                                    424 ;--------------------------------------------------------
                                    425 ; code
                                    426 ;--------------------------------------------------------
                                    427 	.area CSEG    (CODE)
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 'int0'
                                    430 ;------------------------------------------------------------
                                    431 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    432 ;	-----------------------------------------
                                    433 ;	 function int0
                                    434 ;	-----------------------------------------
      000000                        435 _int0:
                           00000F   436 	ar7 = 0x0f
                           00000E   437 	ar6 = 0x0e
                           00000D   438 	ar5 = 0x0d
                           00000C   439 	ar4 = 0x0c
                           00000B   440 	ar3 = 0x0b
                           00000A   441 	ar2 = 0x0a
                           000009   442 	ar1 = 0x09
                           000008   443 	ar0 = 0x08
      000000 C0 D0            [24]  444 	push	psw
      000002 75 D0 08         [24]  445 	mov	psw,#0x08
                                    446 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  447 	mov	r0,#_i0
      000007 76 01            [12]  448 	mov	@r0,#0x01
                                    449 ;	life.c:15: }
      000009 D0 D0            [24]  450 	pop	psw
      00000B 32               [24]  451 	reti
                                    452 ;	eliminated unneeded push/pop dpl
                                    453 ;	eliminated unneeded push/pop dph
                                    454 ;	eliminated unneeded push/pop b
                                    455 ;	eliminated unneeded push/pop acc
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'int1'
                                    458 ;------------------------------------------------------------
                                    459 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    460 ;	-----------------------------------------
                                    461 ;	 function int1
                                    462 ;	-----------------------------------------
      00000C                        463 _int1:
      00000C C0 D0            [24]  464 	push	psw
      00000E 75 D0 08         [24]  465 	mov	psw,#0x08
                                    466 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  467 	mov	r0,#_i1
      000013 76 01            [12]  468 	mov	@r0,#0x01
                                    469 ;	life.c:19: }
      000015 D0 D0            [24]  470 	pop	psw
      000017 32               [24]  471 	reti
                                    472 ;	eliminated unneeded push/pop dpl
                                    473 ;	eliminated unneeded push/pop dph
                                    474 ;	eliminated unneeded push/pop b
                                    475 ;	eliminated unneeded push/pop acc
                                    476 ;------------------------------------------------------------
                                    477 ;Allocation info for local variables in function 'flashOE'
                                    478 ;------------------------------------------------------------
                                    479 ;	life.c:29: static void flashOE(void) {
                                    480 ;	-----------------------------------------
                                    481 ;	 function flashOE
                                    482 ;	-----------------------------------------
      000018                        483 _flashOE:
                           000007   484 	ar7 = 0x07
                           000006   485 	ar6 = 0x06
                           000005   486 	ar5 = 0x05
                           000004   487 	ar4 = 0x04
                           000003   488 	ar3 = 0x03
                           000002   489 	ar2 = 0x02
                           000001   490 	ar1 = 0x01
                           000000   491 	ar0 = 0x00
                                    492 ;	life.c:30: P1_7 = 0;
                                    493 ;	assignBit
      000018 C2 97            [12]  494 	clr	_P1_7
                                    495 ;	life.c:35: __endasm;
      00001A 00               [12]  496 	nop
      00001B 00               [12]  497 	nop
      00001C 00               [12]  498 	nop
                                    499 ;	life.c:36: OEreg = OE76;
      00001D 78r02            [12]  500 	mov	r0,#_OE76
      00001F 90 F0 06         [24]  501 	mov	dptr,#_OEreg
      000022 E6               [12]  502 	mov	a,@r0
      000023 F0               [24]  503 	movx	@dptr,a
                                    504 ;	life.c:37: P1_7 = 1;
                                    505 ;	assignBit
      000024 D2 97            [12]  506 	setb	_P1_7
                                    507 ;	life.c:42: __endasm;
      000026 00               [12]  508 	nop
      000027 00               [12]  509 	nop
      000028 00               [12]  510 	nop
                                    511 ;	life.c:44: return;
                                    512 ;	life.c:45: }
      000029 22               [24]  513 	ret
                                    514 ;------------------------------------------------------------
                                    515 ;Allocation info for local variables in function 'show'
                                    516 ;------------------------------------------------------------
                                    517 ;universe                  Allocated to stack - _bp -5
                                    518 ;prflags                   Allocated to registers r7 
                                    519 ;------------------------------------------------------------
                                    520 ;	life.c:79: void show(char prflags, char *universe) {
                                    521 ;	-----------------------------------------
                                    522 ;	 function show
                                    523 ;	-----------------------------------------
      00002A                        524 _show:
      00002A C0*00            [24]  525 	push	_bp
      00002C 85 81*00         [24]  526 	mov	_bp,sp
                                    527 ;	life.c:80: if (prflags & PRCLR) printstr("\033[2J");
      00002F E5 82            [12]  528 	mov	a,dpl
      000031 FF               [12]  529 	mov	r7,a
      000032 30 E0 0D         [24]  530 	jnb	acc.0,00102$
      000035 90r00r00         [24]  531 	mov	dptr,#___str_0
      000038 75 F0 80         [24]  532 	mov	b,#0x80
      00003B C0 07            [24]  533 	push	ar7
      00003D 12r00r00         [24]  534 	lcall	_printstr
      000040 D0 07            [24]  535 	pop	ar7
      000042                        536 00102$:
                                    537 ;	life.c:81: if (prflags & PRHDR) {
      000042 EF               [12]  538 	mov	a,r7
      000043 30 E1 4A         [24]  539 	jnb	acc.1,00106$
                                    540 ;	life.c:82: printstr("GEN ");
      000046 90r00r05         [24]  541 	mov	dptr,#___str_1
      000049 75 F0 80         [24]  542 	mov	b,#0x80
      00004C C0 07            [24]  543 	push	ar7
      00004E 12r00r00         [24]  544 	lcall	_printstr
                                    545 ;	life.c:83: print32x(gen);
      000051 78r0A            [12]  546 	mov	r0,#_gen
      000053 86 82            [24]  547 	mov	dpl,@r0
      000055 08               [12]  548 	inc	r0
      000056 86 83            [24]  549 	mov	dph,@r0
      000058 08               [12]  550 	inc	r0
      000059 86 F0            [24]  551 	mov	b,@r0
      00005B 08               [12]  552 	inc	r0
      00005C E6               [12]  553 	mov	a,@r0
      00005D 12r00r00         [24]  554 	lcall	_print32x
      000060 D0 07            [24]  555 	pop	ar7
                                    556 ;	life.c:84: if (c2set) {
      000062 78r12            [12]  557 	mov	r0,#_c2set
      000064 E6               [12]  558 	mov	a,@r0
      000065 60 1C            [24]  559 	jz	00104$
                                    560 ;	life.c:85: printstr(" CYCLE2 ");
      000067 90r00r0A         [24]  561 	mov	dptr,#___str_2
      00006A 75 F0 80         [24]  562 	mov	b,#0x80
      00006D C0 07            [24]  563 	push	ar7
      00006F 12r00r00         [24]  564 	lcall	_printstr
                                    565 ;	life.c:86: print32x(genc2);
      000072 78r0E            [12]  566 	mov	r0,#_genc2
      000074 86 82            [24]  567 	mov	dpl,@r0
      000076 08               [12]  568 	inc	r0
      000077 86 83            [24]  569 	mov	dph,@r0
      000079 08               [12]  570 	inc	r0
      00007A 86 F0            [24]  571 	mov	b,@r0
      00007C 08               [12]  572 	inc	r0
      00007D E6               [12]  573 	mov	a,@r0
      00007E 12r00r00         [24]  574 	lcall	_print32x
      000081 D0 07            [24]  575 	pop	ar7
      000083                        576 00104$:
                                    577 ;	life.c:88: printstr("\r\n");
      000083 90r00r13         [24]  578 	mov	dptr,#___str_3
      000086 75 F0 80         [24]  579 	mov	b,#0x80
      000089 C0 07            [24]  580 	push	ar7
      00008B 12r00r00         [24]  581 	lcall	_printstr
      00008E D0 07            [24]  582 	pop	ar7
      000090                        583 00106$:
                                    584 ;	life.c:90: if (prflags & PRUNI) {
      000090 EF               [12]  585 	mov	a,r7
      000091 20 E2 03         [24]  586 	jb	acc.2,00159$
      000094 02r01r35         [24]  587 	ljmp	00113$
      000097                        588 00159$:
                                    589 ;	life.c:91: printstr("\033[?25l");
      000097 90r00r16         [24]  590 	mov	dptr,#___str_4
      00009A 75 F0 80         [24]  591 	mov	b,#0x80
      00009D 12r00r00         [24]  592 	lcall	_printstr
                                    593 ;	life.c:92: for (x = 0; x < W; x++) {
      0000A0 78r03            [12]  594 	mov	r0,#_x
      0000A2 E4               [12]  595 	clr	a
      0000A3 F6               [12]  596 	mov	@r0,a
      0000A4 08               [12]  597 	inc	r0
      0000A5 F6               [12]  598 	mov	@r0,a
      0000A6                        599 00116$:
                                    600 ;	life.c:93: for (y = 0; y < H; y++)
      0000A6 78r05            [12]  601 	mov	r0,#_y
      0000A8 E4               [12]  602 	clr	a
      0000A9 F6               [12]  603 	mov	@r0,a
      0000AA 08               [12]  604 	inc	r0
      0000AB F6               [12]  605 	mov	@r0,a
      0000AC                        606 00114$:
                                    607 ;	life.c:94: if (universe[A2D(W, y, x)]) putchar((int)'1');
      0000AC 78r05            [12]  608 	mov	r0,#_y
      0000AE E6               [12]  609 	mov	a,@r0
      0000AF C0 E0            [24]  610 	push	acc
      0000B1 08               [12]  611 	inc	r0
      0000B2 E6               [12]  612 	mov	a,@r0
      0000B3 C0 E0            [24]  613 	push	acc
      0000B5 90 00 30         [24]  614 	mov	dptr,#0x0030
      0000B8 12r00r00         [24]  615 	lcall	__mulint
      0000BB AE 82            [24]  616 	mov	r6,dpl
      0000BD AF 83            [24]  617 	mov	r7,dph
      0000BF 15 81            [12]  618 	dec	sp
      0000C1 15 81            [12]  619 	dec	sp
      0000C3 78r03            [12]  620 	mov	r0,#_x
      0000C5 E6               [12]  621 	mov	a,@r0
      0000C6 2E               [12]  622 	add	a,r6
      0000C7 FE               [12]  623 	mov	r6,a
      0000C8 08               [12]  624 	inc	r0
      0000C9 E6               [12]  625 	mov	a,@r0
      0000CA 3F               [12]  626 	addc	a,r7
      0000CB FF               [12]  627 	mov	r7,a
      0000CC E5*00            [12]  628 	mov	a,_bp
      0000CE 24 FB            [12]  629 	add	a,#0xfb
      0000D0 F8               [12]  630 	mov	r0,a
      0000D1 EE               [12]  631 	mov	a,r6
      0000D2 26               [12]  632 	add	a,@r0
      0000D3 FE               [12]  633 	mov	r6,a
      0000D4 EF               [12]  634 	mov	a,r7
      0000D5 08               [12]  635 	inc	r0
      0000D6 36               [12]  636 	addc	a,@r0
      0000D7 FF               [12]  637 	mov	r7,a
      0000D8 08               [12]  638 	inc	r0
      0000D9 86 05            [24]  639 	mov	ar5,@r0
      0000DB 8E 82            [24]  640 	mov	dpl,r6
      0000DD 8F 83            [24]  641 	mov	dph,r7
      0000DF 8D F0            [24]  642 	mov	b,r5
      0000E1 12r00r00         [24]  643 	lcall	__gptrget
      0000E4 60 08            [24]  644 	jz	00108$
      0000E6 90 00 31         [24]  645 	mov	dptr,#0x0031
      0000E9 12r00r00         [24]  646 	lcall	_putchar
      0000EC 80 06            [24]  647 	sjmp	00115$
      0000EE                        648 00108$:
                                    649 ;	life.c:95: else putchar((int)'0');
      0000EE 90 00 30         [24]  650 	mov	dptr,#0x0030
      0000F1 12r00r00         [24]  651 	lcall	_putchar
      0000F4                        652 00115$:
                                    653 ;	life.c:93: for (y = 0; y < H; y++)
      0000F4 78r05            [12]  654 	mov	r0,#_y
      0000F6 06               [12]  655 	inc	@r0
      0000F7 B6 00 02         [24]  656 	cjne	@r0,#0x00,00161$
      0000FA 08               [12]  657 	inc	r0
      0000FB 06               [12]  658 	inc	@r0
      0000FC                        659 00161$:
      0000FC 78r05            [12]  660 	mov	r0,#_y
      0000FE C3               [12]  661 	clr	c
      0000FF E6               [12]  662 	mov	a,@r0
      000100 94 C0            [12]  663 	subb	a,#0xc0
      000102 08               [12]  664 	inc	r0
      000103 E6               [12]  665 	mov	a,@r0
      000104 64 80            [12]  666 	xrl	a,#0x80
      000106 94 80            [12]  667 	subb	a,#0x80
      000108 40 A2            [24]  668 	jc	00114$
                                    669 ;	life.c:96: printstr("\r\n");
      00010A 90r00r13         [24]  670 	mov	dptr,#___str_3
      00010D 75 F0 80         [24]  671 	mov	b,#0x80
      000110 12r00r00         [24]  672 	lcall	_printstr
                                    673 ;	life.c:92: for (x = 0; x < W; x++) {
      000113 78r03            [12]  674 	mov	r0,#_x
      000115 06               [12]  675 	inc	@r0
      000116 B6 00 02         [24]  676 	cjne	@r0,#0x00,00163$
      000119 08               [12]  677 	inc	r0
      00011A 06               [12]  678 	inc	@r0
      00011B                        679 00163$:
      00011B 78r03            [12]  680 	mov	r0,#_x
      00011D C3               [12]  681 	clr	c
      00011E E6               [12]  682 	mov	a,@r0
      00011F 94 30            [12]  683 	subb	a,#0x30
      000121 08               [12]  684 	inc	r0
      000122 E6               [12]  685 	mov	a,@r0
      000123 64 80            [12]  686 	xrl	a,#0x80
      000125 94 80            [12]  687 	subb	a,#0x80
      000127 50 03            [24]  688 	jnc	00164$
      000129 02r00rA6         [24]  689 	ljmp	00116$
      00012C                        690 00164$:
                                    691 ;	life.c:98: printstr("\033[?25h");
      00012C 90r00r1D         [24]  692 	mov	dptr,#___str_5
      00012F 75 F0 80         [24]  693 	mov	b,#0x80
      000132 12r00r00         [24]  694 	lcall	_printstr
      000135                        695 00113$:
                                    696 ;	life.c:101: return;
                                    697 ;	life.c:102: }
      000135 D0*00            [24]  698 	pop	_bp
      000137 22               [24]  699 	ret
                                    700 ;------------------------------------------------------------
                                    701 ;Allocation info for local variables in function 'main'
                                    702 ;------------------------------------------------------------
                                    703 ;c                         Allocated to registers r6 r7 
                                    704 ;nbits                     Allocated to registers r4 r5 
                                    705 ;c                         Allocated to stack - _bp +10
                                    706 ;sloc0                     Allocated to stack - _bp +1
                                    707 ;sloc1                     Allocated to stack - _bp +2
                                    708 ;sloc2                     Allocated to stack - _bp +4
                                    709 ;sloc3                     Allocated to stack - _bp +6
                                    710 ;sloc4                     Allocated to stack - _bp +8
                                    711 ;------------------------------------------------------------
                                    712 ;	life.c:206: void main(void) {
                                    713 ;	-----------------------------------------
                                    714 ;	 function main
                                    715 ;	-----------------------------------------
      000138                        716 _main:
      000138 C0*00            [24]  717 	push	_bp
      00013A E5 81            [12]  718 	mov	a,sp
      00013C F5*00            [12]  719 	mov	_bp,a
      00013E 24 0B            [12]  720 	add	a,#0x0b
      000140 F5 81            [12]  721 	mov	sp,a
                                    722 ;	life.c:209: IT0 = 1;
                                    723 ;	assignBit
      000142 D2 88            [12]  724 	setb	_IT0
                                    725 ;	life.c:210: IT1 = 1;
                                    726 ;	assignBit
      000144 D2 8A            [12]  727 	setb	_IT1
                                    728 ;	life.c:211: EX0 = 1;
                                    729 ;	assignBit
      000146 D2 A8            [12]  730 	setb	_EX0
                                    731 ;	life.c:212: EX1 = 1;
                                    732 ;	assignBit
      000148 D2 AA            [12]  733 	setb	_EX1
                                    734 ;	life.c:213: EA = 1;	
                                    735 ;	assignBit
      00014A D2 AF            [12]  736 	setb	_EA
                                    737 ;	life.c:214: P1_7 = 1;
                                    738 ;	assignBit
      00014C D2 97            [12]  739 	setb	_P1_7
                                    740 ;	life.c:219: __endasm;
      00014E 00               [12]  741 	nop
      00014F 00               [12]  742 	nop
      000150 00               [12]  743 	nop
                                    744 ;	life.c:221: srand(RND);
      000151 90 80 00         [24]  745 	mov	dptr,#_RND
      000154 E0               [24]  746 	movx	a,@dptr
      000155 FE               [12]  747 	mov	r6,a
      000156 A3               [24]  748 	inc	dptr
      000157 E0               [24]  749 	movx	a,@dptr
      000158 FF               [12]  750 	mov	r7,a
      000159 8E 82            [24]  751 	mov	dpl,r6
      00015B 8F 83            [24]  752 	mov	dph,r7
      00015D 12r00r00         [24]  753 	lcall	_srand
                                    754 ;	life.c:223: OE76 = OE76_0;
      000160 78r02            [12]  755 	mov	r0,#_OE76
      000162 76 3F            [12]  756 	mov	@r0,#0x3f
                                    757 ;	life.c:224: flashOE();
      000164 12r00r18         [24]  758 	lcall	_flashOE
                                    759 ;	life.c:61: gen = 0ul;
      000167 78r0A            [12]  760 	mov	r0,#_gen
      000169 E4               [12]  761 	clr	a
      00016A F6               [12]  762 	mov	@r0,a
      00016B 08               [12]  763 	inc	r0
      00016C F6               [12]  764 	mov	@r0,a
      00016D 08               [12]  765 	inc	r0
      00016E F6               [12]  766 	mov	@r0,a
      00016F 08               [12]  767 	inc	r0
      000170 F6               [12]  768 	mov	@r0,a
                                    769 ;	life.c:62: genc2 = 0ul;
      000171 78r0E            [12]  770 	mov	r0,#_genc2
      000173 F6               [12]  771 	mov	@r0,a
      000174 08               [12]  772 	inc	r0
      000175 F6               [12]  773 	mov	@r0,a
      000176 08               [12]  774 	inc	r0
      000177 F6               [12]  775 	mov	@r0,a
      000178 08               [12]  776 	inc	r0
      000179 F6               [12]  777 	mov	@r0,a
                                    778 ;	life.c:63: c2set = 0;
      00017A 78r12            [12]  779 	mov	r0,#_c2set
      00017C 76 00            [12]  780 	mov	@r0,#0x00
                                    781 ;	life.c:228: printstr("\033[?25h\033[m");
      00017E 90r00r3E         [24]  782 	mov	dptr,#___str_9
      000181 75 F0 80         [24]  783 	mov	b,#0x80
      000184 12r00r00         [24]  784 	lcall	_printstr
                                    785 ;	life.c:230: for (i0 = 0; !i0; ) {
      000187 78r00            [12]  786 	mov	r0,#_i0
      000189 76 00            [12]  787 	mov	@r0,#0x00
      00018B                        788 00236$:
                                    789 ;	life.c:231: pruni = 1;
      00018B 78r13            [12]  790 	mov	r0,#_pruni
      00018D 76 01            [12]  791 	mov	@r0,#0x01
                                    792 ;	life.c:232: while (1) {
      00018F                        793 00127$:
                                    794 ;	life.c:233: printstr("LIFE I L R O P S U B T\r\n");
      00018F 90r00r48         [24]  795 	mov	dptr,#___str_10
      000192 75 F0 80         [24]  796 	mov	b,#0x80
      000195 12r00r00         [24]  797 	lcall	_printstr
                                    798 ;	life.c:234: c = toupper(getchar());
      000198 12r00r00         [24]  799 	lcall	_getchar
      00019B 12r00r00         [24]  800 	lcall	_toupper
      00019E AE 82            [24]  801 	mov	r6,dpl
      0001A0 AF 83            [24]  802 	mov	r7,dph
                                    803 ;	life.c:235: if (i0 || (c == (int)'T')) goto term;
      0001A2 78r00            [12]  804 	mov	r0,#_i0
      0001A4 E6               [12]  805 	mov	a,@r0
      0001A5 60 03            [24]  806 	jz	00463$
      0001A7 02r09r93         [24]  807 	ljmp	00154$
      0001AA                        808 00463$:
      0001AA BE 54 06         [24]  809 	cjne	r6,#0x54,00464$
      0001AD BF 00 03         [24]  810 	cjne	r7,#0x00,00464$
      0001B0 02r09r93         [24]  811 	ljmp	00154$
      0001B3                        812 00464$:
                                    813 ;	life.c:236: else if ((c == (int)'I') || (c == (int)'L') || (c == (int)'R')) {
      0001B3 BE 49 05         [24]  814 	cjne	r6,#0x49,00465$
      0001B6 BF 00 02         [24]  815 	cjne	r7,#0x00,00465$
      0001B9 80 13            [24]  816 	sjmp	00117$
      0001BB                        817 00465$:
      0001BB BE 4C 05         [24]  818 	cjne	r6,#0x4c,00466$
      0001BE BF 00 02         [24]  819 	cjne	r7,#0x00,00466$
      0001C1 80 0B            [24]  820 	sjmp	00117$
      0001C3                        821 00466$:
      0001C3 BE 52 05         [24]  822 	cjne	r6,#0x52,00467$
      0001C6 BF 00 02         [24]  823 	cjne	r7,#0x00,00467$
      0001C9 80 03            [24]  824 	sjmp	00468$
      0001CB                        825 00467$:
      0001CB 02r03rF6         [24]  826 	ljmp	00118$
      0001CE                        827 00468$:
      0001CE                        828 00117$:
                                    829 ;	life.c:237: if (c == (int)'L') loadiu();
      0001CE BE 4C 05         [24]  830 	cjne	r6,#0x4c,00469$
      0001D1 BF 00 02         [24]  831 	cjne	r7,#0x00,00469$
      0001D4 80 03            [24]  832 	sjmp	00470$
      0001D6                        833 00469$:
      0001D6 02r02rFA         [24]  834 	ljmp	00104$
      0001D9                        835 00470$:
                                    836 ;	life.c:114: printstr("LOAD 0 1 ~ # <");
      0001D9 90r00r24         [24]  837 	mov	dptr,#___str_6
      0001DC 75 F0 80         [24]  838 	mov	b,#0x80
      0001DF 12r00r00         [24]  839 	lcall	_printstr
                                    840 ;	life.c:116: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0001E2 7C 00            [12]  841 	mov	r4,#0x00
      0001E4 7D 00            [12]  842 	mov	r5,#0x00
      0001E6 78r05            [12]  843 	mov	r0,#_y
      0001E8 E4               [12]  844 	clr	a
      0001E9 F6               [12]  845 	mov	@r0,a
      0001EA 08               [12]  846 	inc	r0
      0001EB F6               [12]  847 	mov	@r0,a
      0001EC                        848 00222$:
      0001EC 78r05            [12]  849 	mov	r0,#_y
      0001EE C3               [12]  850 	clr	c
      0001EF 08               [12]  851 	inc	r0
      0001F0 E6               [12]  852 	mov	a,@r0
      0001F1 64 80            [12]  853 	xrl	a,#0x80
      0001F3 94 A4            [12]  854 	subb	a,#0xa4
      0001F5 40 03            [24]  855 	jc	00471$
      0001F7 02r02rB5         [24]  856 	ljmp	00181$
      0001FA                        857 00471$:
                                    858 ;	life.c:117: for (x = 0; x < W; x++) {
      0001FA 78r03            [12]  859 	mov	r0,#_x
      0001FC E4               [12]  860 	clr	a
      0001FD F6               [12]  861 	mov	@r0,a
      0001FE 08               [12]  862 	inc	r0
      0001FF F6               [12]  863 	mov	@r0,a
                                    864 ;	life.c:118: while (1) {
      000200                        865 00168$:
                                    866 ;	life.c:119: c = getchar();
      000200 C0 05            [24]  867 	push	ar5
      000202 C0 04            [24]  868 	push	ar4
      000204 12r00r00         [24]  869 	lcall	_getchar
      000207 AA 82            [24]  870 	mov	r2,dpl
      000209 AB 83            [24]  871 	mov	r3,dph
      00020B D0 04            [24]  872 	pop	ar4
      00020D D0 05            [24]  873 	pop	ar5
      00020F E5*00            [12]  874 	mov	a,_bp
      000211 24 0A            [12]  875 	add	a,#0x0a
      000213 F8               [12]  876 	mov	r0,a
      000214 A6 02            [24]  877 	mov	@r0,ar2
      000216 08               [12]  878 	inc	r0
      000217 A6 03            [24]  879 	mov	@r0,ar3
                                    880 ;	life.c:120: if (c == (int)'0') {
      000219 E5*00            [12]  881 	mov	a,_bp
      00021B 24 0A            [12]  882 	add	a,#0x0a
      00021D F8               [12]  883 	mov	r0,a
      00021E B6 30 23         [24]  884 	cjne	@r0,#0x30,00166$
      000221 08               [12]  885 	inc	r0
      000222 B6 00 1F         [24]  886 	cjne	@r0,#0x00,00166$
                                    887 ;	life.c:121: iu[y + x] = 0;
      000225 78r05            [12]  888 	mov	r0,#_y
      000227 79r03            [12]  889 	mov	r1,#_x
      000229 E7               [12]  890 	mov	a,@r1
      00022A 26               [12]  891 	add	a,@r0
      00022B FA               [12]  892 	mov	r2,a
      00022C 09               [12]  893 	inc	r1
      00022D E7               [12]  894 	mov	a,@r1
      00022E 08               [12]  895 	inc	r0
      00022F 36               [12]  896 	addc	a,@r0
      000230 FB               [12]  897 	mov	r3,a
      000231 EA               [12]  898 	mov	a,r2
      000232 24r00            [12]  899 	add	a,#_iu
      000234 F5 82            [12]  900 	mov	dpl,a
      000236 EB               [12]  901 	mov	a,r3
      000237 34s00            [12]  902 	addc	a,#(_iu >> 8)
      000239 F5 83            [12]  903 	mov	dph,a
      00023B E4               [12]  904 	clr	a
      00023C F0               [24]  905 	movx	@dptr,a
                                    906 ;	life.c:122: nbits++;
      00023D 0C               [12]  907 	inc	r4
                                    908 ;	life.c:123: break;
      00023E BC 00 4E         [24]  909 	cjne	r4,#0x00,00171$
      000241 0D               [12]  910 	inc	r5
      000242 80 4B            [24]  911 	sjmp	00171$
      000244                        912 00166$:
                                    913 ;	life.c:124: } else if (c == (int)'1') {
      000244 E5*00            [12]  914 	mov	a,_bp
      000246 24 0A            [12]  915 	add	a,#0x0a
      000248 F8               [12]  916 	mov	r0,a
      000249 B6 31 24         [24]  917 	cjne	@r0,#0x31,00164$
      00024C 08               [12]  918 	inc	r0
      00024D B6 00 20         [24]  919 	cjne	@r0,#0x00,00164$
                                    920 ;	life.c:125: iu[y + x] = 1;
      000250 78r05            [12]  921 	mov	r0,#_y
      000252 79r03            [12]  922 	mov	r1,#_x
      000254 E7               [12]  923 	mov	a,@r1
      000255 26               [12]  924 	add	a,@r0
      000256 FA               [12]  925 	mov	r2,a
      000257 09               [12]  926 	inc	r1
      000258 E7               [12]  927 	mov	a,@r1
      000259 08               [12]  928 	inc	r0
      00025A 36               [12]  929 	addc	a,@r0
      00025B FB               [12]  930 	mov	r3,a
      00025C EA               [12]  931 	mov	a,r2
      00025D 24r00            [12]  932 	add	a,#_iu
      00025F F5 82            [12]  933 	mov	dpl,a
      000261 EB               [12]  934 	mov	a,r3
      000262 34s00            [12]  935 	addc	a,#(_iu >> 8)
      000264 F5 83            [12]  936 	mov	dph,a
      000266 74 01            [12]  937 	mov	a,#0x01
      000268 F0               [24]  938 	movx	@dptr,a
                                    939 ;	life.c:126: nbits++;
      000269 0C               [12]  940 	inc	r4
                                    941 ;	life.c:127: break;
      00026A BC 00 22         [24]  942 	cjne	r4,#0x00,00171$
      00026D 0D               [12]  943 	inc	r5
      00026E 80 1F            [24]  944 	sjmp	00171$
      000270                        945 00164$:
                                    946 ;	life.c:128: } else if (c == (int)'~') goto br_inner;
      000270 E5*00            [12]  947 	mov	a,_bp
      000272 24 0A            [12]  948 	add	a,#0x0a
      000274 F8               [12]  949 	mov	r0,a
      000275 B6 7E 06         [24]  950 	cjne	@r0,#0x7e,00478$
      000278 08               [12]  951 	inc	r0
      000279 B6 00 02         [24]  952 	cjne	@r0,#0x00,00478$
      00027C 80 2A            [24]  953 	sjmp	00223$
      00027E                        954 00478$:
                                    955 ;	life.c:129: else if (c == (int)'#') goto out;
      00027E E5*00            [12]  956 	mov	a,_bp
      000280 24 0A            [12]  957 	add	a,#0x0a
      000282 F8               [12]  958 	mov	r0,a
      000283 B6 23 06         [24]  959 	cjne	@r0,#0x23,00479$
      000286 08               [12]  960 	inc	r0
      000287 B6 00 02         [24]  961 	cjne	@r0,#0x00,00479$
      00028A 80 29            [24]  962 	sjmp	00181$
      00028C                        963 00479$:
      00028C 02r02r00         [24]  964 	ljmp	00168$
                                    965 ;	life.c:133: break;
      00028F                        966 00171$:
                                    967 ;	life.c:117: for (x = 0; x < W; x++) {
      00028F 78r03            [12]  968 	mov	r0,#_x
      000291 06               [12]  969 	inc	@r0
      000292 B6 00 02         [24]  970 	cjne	@r0,#0x00,00480$
      000295 08               [12]  971 	inc	r0
      000296 06               [12]  972 	inc	@r0
      000297                        973 00480$:
      000297 78r03            [12]  974 	mov	r0,#_x
      000299 C3               [12]  975 	clr	c
      00029A E6               [12]  976 	mov	a,@r0
      00029B 94 30            [12]  977 	subb	a,#0x30
      00029D 08               [12]  978 	inc	r0
      00029E E6               [12]  979 	mov	a,@r0
      00029F 64 80            [12]  980 	xrl	a,#0x80
      0002A1 94 80            [12]  981 	subb	a,#0x80
      0002A3 50 03            [24]  982 	jnc	00481$
      0002A5 02r02r00         [24]  983 	ljmp	00168$
      0002A8                        984 00481$:
      0002A8                        985 00223$:
                                    986 ;	life.c:116: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0002A8 78r05            [12]  987 	mov	r0,#_y
      0002AA 74 30            [12]  988 	mov	a,#0x30
      0002AC 26               [12]  989 	add	a,@r0
      0002AD F6               [12]  990 	mov	@r0,a
      0002AE E4               [12]  991 	clr	a
      0002AF 08               [12]  992 	inc	r0
      0002B0 36               [12]  993 	addc	a,@r0
      0002B1 F6               [12]  994 	mov	@r0,a
      0002B2 02r01rEC         [24]  995 	ljmp	00222$
                                    996 ;	life.c:137: out:
      0002B5                        997 00181$:
                                    998 ;	life.c:138: if (c != (int)'#')
      0002B5 E5*00            [12]  999 	mov	a,_bp
      0002B7 24 0A            [12] 1000 	add	a,#0x0a
      0002B9 F8               [12] 1001 	mov	r0,a
      0002BA B6 23 06         [24] 1002 	cjne	@r0,#0x23,00482$
      0002BD 08               [12] 1003 	inc	r0
      0002BE B6 00 02         [24] 1004 	cjne	@r0,#0x00,00482$
      0002C1 80 25            [24] 1005 	sjmp	00180$
      0002C3                       1006 00482$:
                                   1007 ;	life.c:139: while (1) {
      0002C3                       1008 00177$:
                                   1009 ;	life.c:140: c = getchar();
      0002C3 C0 05            [24] 1010 	push	ar5
      0002C5 C0 04            [24] 1011 	push	ar4
      0002C7 12r00r00         [24] 1012 	lcall	_getchar
      0002CA AA 82            [24] 1013 	mov	r2,dpl
      0002CC AB 83            [24] 1014 	mov	r3,dph
      0002CE D0 04            [24] 1015 	pop	ar4
      0002D0 D0 05            [24] 1016 	pop	ar5
      0002D2 E5*00            [12] 1017 	mov	a,_bp
      0002D4 24 0A            [12] 1018 	add	a,#0x0a
      0002D6 F8               [12] 1019 	mov	r0,a
      0002D7 A6 02            [24] 1020 	mov	@r0,ar2
      0002D9 08               [12] 1021 	inc	r0
      0002DA A6 03            [24] 1022 	mov	@r0,ar3
                                   1023 ;	life.c:141: if (c == (int)'#') break;
      0002DC E5*00            [12] 1024 	mov	a,_bp
      0002DE 24 0A            [12] 1025 	add	a,#0x0a
      0002E0 F8               [12] 1026 	mov	r0,a
      0002E1 B6 23 DF         [24] 1027 	cjne	@r0,#0x23,00177$
      0002E4 08               [12] 1028 	inc	r0
      0002E5 B6 00 DB         [24] 1029 	cjne	@r0,#0x00,00177$
      0002E8                       1030 00180$:
                                   1031 ;	life.c:143: print16x(nbits);
      0002E8 8C 82            [24] 1032 	mov	dpl,r4
      0002EA 8D 83            [24] 1033 	mov	dph,r5
      0002EC 12r00r00         [24] 1034 	lcall	_print16x
                                   1035 ;	life.c:144: printstr(">\r\n");
      0002EF 90r00r33         [24] 1036 	mov	dptr,#___str_7
      0002F2 75 F0 80         [24] 1037 	mov	b,#0x80
      0002F5 12r00r00         [24] 1038 	lcall	_printstr
                                   1039 ;	life.c:237: if (c == (int)'L') loadiu();
      0002F8 80 79            [24] 1040 	sjmp	00105$
      0002FA                       1041 00104$:
                                   1042 ;	life.c:238: else if (c == (int)'R') loadriu();
      0002FA BE 52 76         [24] 1043 	cjne	r6,#0x52,00105$
      0002FD BF 00 73         [24] 1044 	cjne	r7,#0x00,00105$
                                   1045 ;	life.c:150: printstr("RANDOM");
      000300 90r00r37         [24] 1046 	mov	dptr,#___str_8
      000303 75 F0 80         [24] 1047 	mov	b,#0x80
      000306 12r00r00         [24] 1048 	lcall	_printstr
                                   1049 ;	life.c:152: for (y = 0; y < (H * W); y += W)
      000309 78r05            [12] 1050 	mov	r0,#_y
      00030B E4               [12] 1051 	clr	a
      00030C F6               [12] 1052 	mov	@r0,a
      00030D 08               [12] 1053 	inc	r0
      00030E F6               [12] 1054 	mov	@r0,a
      00030F                       1055 00226$:
                                   1056 ;	life.c:153: for (x = 0; x < W; x++)
      00030F 78r03            [12] 1057 	mov	r0,#_x
      000311 E4               [12] 1058 	clr	a
      000312 F6               [12] 1059 	mov	@r0,a
      000313 08               [12] 1060 	inc	r0
      000314 F6               [12] 1061 	mov	@r0,a
      000315                       1062 00224$:
                                   1063 ;	life.c:154: iu[y + x] = rand() & 1;
      000315 78r05            [12] 1064 	mov	r0,#_y
      000317 79r03            [12] 1065 	mov	r1,#_x
      000319 E7               [12] 1066 	mov	a,@r1
      00031A 26               [12] 1067 	add	a,@r0
      00031B FC               [12] 1068 	mov	r4,a
      00031C 09               [12] 1069 	inc	r1
      00031D E7               [12] 1070 	mov	a,@r1
      00031E 08               [12] 1071 	inc	r0
      00031F 36               [12] 1072 	addc	a,@r0
      000320 FD               [12] 1073 	mov	r5,a
      000321 EC               [12] 1074 	mov	a,r4
      000322 24r00            [12] 1075 	add	a,#_iu
      000324 FC               [12] 1076 	mov	r4,a
      000325 ED               [12] 1077 	mov	a,r5
      000326 34s00            [12] 1078 	addc	a,#(_iu >> 8)
      000328 FD               [12] 1079 	mov	r5,a
      000329 C0 05            [24] 1080 	push	ar5
      00032B C0 04            [24] 1081 	push	ar4
      00032D 12r00r00         [24] 1082 	lcall	_rand
      000330 AA 82            [24] 1083 	mov	r2,dpl
      000332 D0 04            [24] 1084 	pop	ar4
      000334 D0 05            [24] 1085 	pop	ar5
      000336 53 02 01         [24] 1086 	anl	ar2,#0x01
      000339 8C 82            [24] 1087 	mov	dpl,r4
      00033B 8D 83            [24] 1088 	mov	dph,r5
      00033D EA               [12] 1089 	mov	a,r2
      00033E F0               [24] 1090 	movx	@dptr,a
                                   1091 ;	life.c:153: for (x = 0; x < W; x++)
      00033F 78r03            [12] 1092 	mov	r0,#_x
      000341 06               [12] 1093 	inc	@r0
      000342 B6 00 02         [24] 1094 	cjne	@r0,#0x00,00487$
      000345 08               [12] 1095 	inc	r0
      000346 06               [12] 1096 	inc	@r0
      000347                       1097 00487$:
      000347 78r03            [12] 1098 	mov	r0,#_x
      000349 C3               [12] 1099 	clr	c
      00034A E6               [12] 1100 	mov	a,@r0
      00034B 94 30            [12] 1101 	subb	a,#0x30
      00034D 08               [12] 1102 	inc	r0
      00034E E6               [12] 1103 	mov	a,@r0
      00034F 64 80            [12] 1104 	xrl	a,#0x80
      000351 94 80            [12] 1105 	subb	a,#0x80
      000353 40 C0            [24] 1106 	jc	00224$
                                   1107 ;	life.c:152: for (y = 0; y < (H * W); y += W)
      000355 78r05            [12] 1108 	mov	r0,#_y
      000357 74 30            [12] 1109 	mov	a,#0x30
      000359 26               [12] 1110 	add	a,@r0
      00035A F6               [12] 1111 	mov	@r0,a
      00035B E4               [12] 1112 	clr	a
      00035C 08               [12] 1113 	inc	r0
      00035D 36               [12] 1114 	addc	a,@r0
      00035E F6               [12] 1115 	mov	@r0,a
      00035F 78r05            [12] 1116 	mov	r0,#_y
      000361 C3               [12] 1117 	clr	c
      000362 08               [12] 1118 	inc	r0
      000363 E6               [12] 1119 	mov	a,@r0
      000364 64 80            [12] 1120 	xrl	a,#0x80
      000366 94 A4            [12] 1121 	subb	a,#0xa4
      000368 40 A5            [24] 1122 	jc	00226$
                                   1123 ;	life.c:156: printstr("\r\n");
      00036A 90r00r13         [24] 1124 	mov	dptr,#___str_3
      00036D 75 F0 80         [24] 1125 	mov	b,#0x80
      000370 12r00r00         [24] 1126 	lcall	_printstr
                                   1127 ;	life.c:238: else if (c == (int)'R') loadriu();
      000373                       1128 00105$:
                                   1129 ;	life.c:105: memset(u, 0, sizeof (u));
      000373 E4               [12] 1130 	clr	a
      000374 C0 E0            [24] 1131 	push	acc
      000376 74 24            [12] 1132 	mov	a,#0x24
      000378 C0 E0            [24] 1133 	push	acc
      00037A E4               [12] 1134 	clr	a
      00037B C0 E0            [24] 1135 	push	acc
      00037D 90r48r00         [24] 1136 	mov	dptr,#_u
      000380 75 F0 00         [24] 1137 	mov	b,#0x00
      000383 12r00r00         [24] 1138 	lcall	_memset
      000386 15 81            [12] 1139 	dec	sp
      000388 15 81            [12] 1140 	dec	sp
      00038A 15 81            [12] 1141 	dec	sp
                                   1142 ;	life.c:106: memset(pu, 0, sizeof (pu));
      00038C E4               [12] 1143 	clr	a
      00038D C0 E0            [24] 1144 	push	acc
      00038F 74 24            [12] 1145 	mov	a,#0x24
      000391 C0 E0            [24] 1146 	push	acc
      000393 E4               [12] 1147 	clr	a
      000394 C0 E0            [24] 1148 	push	acc
      000396 90r24r00         [24] 1149 	mov	dptr,#_pu
      000399 75 F0 00         [24] 1150 	mov	b,#0x00
      00039C 12r00r00         [24] 1151 	lcall	_memset
      00039F 15 81            [12] 1152 	dec	sp
      0003A1 15 81            [12] 1153 	dec	sp
      0003A3 15 81            [12] 1154 	dec	sp
                                   1155 ;	life.c:61: gen = 0ul;
      0003A5 78r0A            [12] 1156 	mov	r0,#_gen
      0003A7 E4               [12] 1157 	clr	a
      0003A8 F6               [12] 1158 	mov	@r0,a
      0003A9 08               [12] 1159 	inc	r0
      0003AA F6               [12] 1160 	mov	@r0,a
      0003AB 08               [12] 1161 	inc	r0
      0003AC F6               [12] 1162 	mov	@r0,a
      0003AD 08               [12] 1163 	inc	r0
      0003AE F6               [12] 1164 	mov	@r0,a
                                   1165 ;	life.c:62: genc2 = 0ul;
      0003AF 78r0E            [12] 1166 	mov	r0,#_genc2
      0003B1 F6               [12] 1167 	mov	@r0,a
      0003B2 08               [12] 1168 	inc	r0
      0003B3 F6               [12] 1169 	mov	@r0,a
      0003B4 08               [12] 1170 	inc	r0
      0003B5 F6               [12] 1171 	mov	@r0,a
      0003B6 08               [12] 1172 	inc	r0
      0003B7 F6               [12] 1173 	mov	@r0,a
                                   1174 ;	life.c:63: c2set = 0;
      0003B8 78r12            [12] 1175 	mov	r0,#_c2set
      0003BA 76 00            [12] 1176 	mov	@r0,#0x00
                                   1177 ;	life.c:241: memcpy(u, iu, sizeof (iu));
      0003BC C0 E0            [24] 1178 	push	acc
      0003BE 74 24            [12] 1179 	mov	a,#0x24
      0003C0 C0 E0            [24] 1180 	push	acc
      0003C2 74r00            [12] 1181 	mov	a,#_iu
      0003C4 C0 E0            [24] 1182 	push	acc
      0003C6 74s00            [12] 1183 	mov	a,#(_iu >> 8)
      0003C8 C0 E0            [24] 1184 	push	acc
      0003CA E4               [12] 1185 	clr	a
      0003CB C0 E0            [24] 1186 	push	acc
      0003CD 90r48r00         [24] 1187 	mov	dptr,#_u
      0003D0 75 F0 00         [24] 1188 	mov	b,#0x00
      0003D3 12r00r00         [24] 1189 	lcall	___memcpy
      0003D6 E5 81            [12] 1190 	mov	a,sp
      0003D8 24 FB            [12] 1191 	add	a,#0xfb
      0003DA F5 81            [12] 1192 	mov	sp,a
                                   1193 ;	life.c:242: show(PRUNI, u);
      0003DC 74r00            [12] 1194 	mov	a,#_u
      0003DE C0 E0            [24] 1195 	push	acc
      0003E0 74s48            [12] 1196 	mov	a,#(_u >> 8)
      0003E2 C0 E0            [24] 1197 	push	acc
      0003E4 E4               [12] 1198 	clr	a
      0003E5 C0 E0            [24] 1199 	push	acc
      0003E7 75 82 04         [24] 1200 	mov	dpl,#0x04
      0003EA 12r00r2A         [24] 1201 	lcall	_show
      0003ED 15 81            [12] 1202 	dec	sp
      0003EF 15 81            [12] 1203 	dec	sp
      0003F1 15 81            [12] 1204 	dec	sp
      0003F3 02r01r8F         [24] 1205 	ljmp	00127$
      0003F6                       1206 00118$:
                                   1207 ;	life.c:243: } else if (c == (int)'O') show(PRUNI, iu);
      0003F6 BE 4F 1D         [24] 1208 	cjne	r6,#0x4f,00115$
      0003F9 BF 00 1A         [24] 1209 	cjne	r7,#0x00,00115$
      0003FC 74r00            [12] 1210 	mov	a,#_iu
      0003FE C0 E0            [24] 1211 	push	acc
      000400 74s00            [12] 1212 	mov	a,#(_iu >> 8)
      000402 C0 E0            [24] 1213 	push	acc
      000404 E4               [12] 1214 	clr	a
      000405 C0 E0            [24] 1215 	push	acc
      000407 75 82 04         [24] 1216 	mov	dpl,#0x04
      00040A 12r00r2A         [24] 1217 	lcall	_show
      00040D 15 81            [12] 1218 	dec	sp
      00040F 15 81            [12] 1219 	dec	sp
      000411 15 81            [12] 1220 	dec	sp
      000413 02r01r8F         [24] 1221 	ljmp	00127$
      000416                       1222 00115$:
                                   1223 ;	life.c:244: else if (c == (int)'P') show(PRHDR | PRUNI, u);
      000416 BE 50 1D         [24] 1224 	cjne	r6,#0x50,00112$
      000419 BF 00 1A         [24] 1225 	cjne	r7,#0x00,00112$
      00041C 74r00            [12] 1226 	mov	a,#_u
      00041E C0 E0            [24] 1227 	push	acc
      000420 74s48            [12] 1228 	mov	a,#(_u >> 8)
      000422 C0 E0            [24] 1229 	push	acc
      000424 E4               [12] 1230 	clr	a
      000425 C0 E0            [24] 1231 	push	acc
      000427 75 82 06         [24] 1232 	mov	dpl,#0x06
      00042A 12r00r2A         [24] 1233 	lcall	_show
      00042D 15 81            [12] 1234 	dec	sp
      00042F 15 81            [12] 1235 	dec	sp
      000431 15 81            [12] 1236 	dec	sp
      000433 02r01r8F         [24] 1237 	ljmp	00127$
      000436                       1238 00112$:
                                   1239 ;	life.c:245: else if (c == (int)'U') {
      000436 BE 55 3B         [24] 1240 	cjne	r6,#0x55,00109$
      000439 BF 00 38         [24] 1241 	cjne	r7,#0x00,00109$
                                   1242 ;	life.c:246: pruni = !pruni;
      00043C 78r13            [12] 1243 	mov	r0,#_pruni
      00043E E6               [12] 1244 	mov	a,@r0
      00043F B4 01 00         [24] 1245 	cjne	a,#0x01,00496$
      000442                       1246 00496$:
      000442 92*00            [24] 1247 	mov	b0,c
      000444 78r13            [12] 1248 	mov	r0,#_pruni
      000446 E4               [12] 1249 	clr	a
      000447 33               [12] 1250 	rlc	a
      000448 F6               [12] 1251 	mov	@r0,a
                                   1252 ;	life.c:247: printstr("U");
      000449 90r00r61         [24] 1253 	mov	dptr,#___str_11
      00044C 75 F0 80         [24] 1254 	mov	b,#0x80
      00044F 12r00r00         [24] 1255 	lcall	_printstr
                                   1256 ;	life.c:248: putchar(pruni ? (int)'1' : (int)'0');
      000452 78r13            [12] 1257 	mov	r0,#_pruni
      000454 E6               [12] 1258 	mov	a,@r0
      000455 60 06            [24] 1259 	jz	00240$
      000457 7C 31            [12] 1260 	mov	r4,#0x31
      000459 7D 00            [12] 1261 	mov	r5,#0x00
      00045B 80 04            [24] 1262 	sjmp	00241$
      00045D                       1263 00240$:
      00045D 7C 30            [12] 1264 	mov	r4,#0x30
      00045F 7D 00            [12] 1265 	mov	r5,#0x00
      000461                       1266 00241$:
      000461 8C 82            [24] 1267 	mov	dpl,r4
      000463 8D 83            [24] 1268 	mov	dph,r5
      000465 12r00r00         [24] 1269 	lcall	_putchar
                                   1270 ;	life.c:249: printstr("\r\n");
      000468 90r00r13         [24] 1271 	mov	dptr,#___str_3
      00046B 75 F0 80         [24] 1272 	mov	b,#0x80
      00046E 12r00r00         [24] 1273 	lcall	_printstr
      000471 02r01r8F         [24] 1274 	ljmp	00127$
      000474                       1275 00109$:
                                   1276 ;	life.c:250: } else if (c == (int)'S') break;
      000474 BE 53 05         [24] 1277 	cjne	r6,#0x53,00498$
      000477 BF 00 02         [24] 1278 	cjne	r7,#0x00,00498$
      00047A 80 03            [24] 1279 	sjmp	00499$
      00047C                       1280 00498$:
      00047C 02r01r8F         [24] 1281 	ljmp	00127$
      00047F                       1282 00499$:
                                   1283 ;	life.c:61: gen = 0ul;
      00047F 78r0A            [12] 1284 	mov	r0,#_gen
      000481 E4               [12] 1285 	clr	a
      000482 F6               [12] 1286 	mov	@r0,a
      000483 08               [12] 1287 	inc	r0
      000484 F6               [12] 1288 	mov	@r0,a
      000485 08               [12] 1289 	inc	r0
      000486 F6               [12] 1290 	mov	@r0,a
      000487 08               [12] 1291 	inc	r0
      000488 F6               [12] 1292 	mov	@r0,a
                                   1293 ;	life.c:62: genc2 = 0ul;
      000489 78r0E            [12] 1294 	mov	r0,#_genc2
      00048B F6               [12] 1295 	mov	@r0,a
      00048C 08               [12] 1296 	inc	r0
      00048D F6               [12] 1297 	mov	@r0,a
      00048E 08               [12] 1298 	inc	r0
      00048F F6               [12] 1299 	mov	@r0,a
      000490 08               [12] 1300 	inc	r0
      000491 F6               [12] 1301 	mov	@r0,a
                                   1302 ;	life.c:63: c2set = 0;
      000492 78r12            [12] 1303 	mov	r0,#_c2set
      000494 76 00            [12] 1304 	mov	@r0,#0x00
                                   1305 ;	life.c:255: for (i1 = 0; !i0 && !i1; ) {
      000496 78r01            [12] 1306 	mov	r0,#_i1
      000498 76 00            [12] 1307 	mov	@r0,#0x00
      00049A                       1308 00234$:
      00049A 78r00            [12] 1309 	mov	r0,#_i0
      00049C E6               [12] 1310 	mov	a,@r0
      00049D 60 03            [24] 1311 	jz	00500$
      00049F 02r09r7D         [24] 1312 	ljmp	00150$
      0004A2                       1313 00500$:
      0004A2 78r01            [12] 1314 	mov	r0,#_i1
      0004A4 E6               [12] 1315 	mov	a,@r0
      0004A5 60 03            [24] 1316 	jz	00501$
      0004A7 02r09r7D         [24] 1317 	ljmp	00150$
      0004AA                       1318 00501$:
                                   1319 ;	life.c:256: if (pruni) show(PRCLR | PRHDR | PRUNI, u);
      0004AA 78r13            [12] 1320 	mov	r0,#_pruni
      0004AC E6               [12] 1321 	mov	a,@r0
      0004AD 60 19            [24] 1322 	jz	00130$
      0004AF 74r00            [12] 1323 	mov	a,#_u
      0004B1 C0 E0            [24] 1324 	push	acc
      0004B3 74s48            [12] 1325 	mov	a,#(_u >> 8)
      0004B5 C0 E0            [24] 1326 	push	acc
      0004B7 E4               [12] 1327 	clr	a
      0004B8 C0 E0            [24] 1328 	push	acc
      0004BA 75 82 07         [24] 1329 	mov	dpl,#0x07
      0004BD 12r00r2A         [24] 1330 	lcall	_show
      0004C0 15 81            [12] 1331 	dec	sp
      0004C2 15 81            [12] 1332 	dec	sp
      0004C4 15 81            [12] 1333 	dec	sp
      0004C6 80 17            [24] 1334 	sjmp	00131$
      0004C8                       1335 00130$:
                                   1336 ;	life.c:257: else show(PRHDR, u);
      0004C8 74r00            [12] 1337 	mov	a,#_u
      0004CA C0 E0            [24] 1338 	push	acc
      0004CC 74s48            [12] 1339 	mov	a,#(_u >> 8)
      0004CE C0 E0            [24] 1340 	push	acc
      0004D0 E4               [12] 1341 	clr	a
      0004D1 C0 E0            [24] 1342 	push	acc
      0004D3 75 82 02         [24] 1343 	mov	dpl,#0x02
      0004D6 12r00r2A         [24] 1344 	lcall	_show
      0004D9 15 81            [12] 1345 	dec	sp
      0004DB 15 81            [12] 1346 	dec	sp
      0004DD 15 81            [12] 1347 	dec	sp
      0004DF                       1348 00131$:
                                   1349 ;	life.c:69: gen++;
      0004DF 78r0A            [12] 1350 	mov	r0,#_gen
      0004E1 06               [12] 1351 	inc	@r0
      0004E2 B6 00 0C         [24] 1352 	cjne	@r0,#0x00,00503$
      0004E5 08               [12] 1353 	inc	r0
      0004E6 06               [12] 1354 	inc	@r0
      0004E7 B6 00 07         [24] 1355 	cjne	@r0,#0x00,00503$
      0004EA 08               [12] 1356 	inc	r0
      0004EB 06               [12] 1357 	inc	@r0
      0004EC B6 00 02         [24] 1358 	cjne	@r0,#0x00,00503$
      0004EF 08               [12] 1359 	inc	r0
      0004F0 06               [12] 1360 	inc	@r0
      0004F1                       1361 00503$:
                                   1362 ;	life.c:162: fixed = 0;
      0004F1 78r08            [12] 1363 	mov	r0,#_fixed
      0004F3 76 00            [12] 1364 	mov	@r0,#0x00
                                   1365 ;	life.c:163: cycle2 = 0;
      0004F5 78r09            [12] 1366 	mov	r0,#_cycle2
      0004F7 76 00            [12] 1367 	mov	@r0,#0x00
                                   1368 ;	life.c:165: OE76 = OE76_0;
      0004F9 78r02            [12] 1369 	mov	r0,#_OE76
      0004FB 76 3F            [12] 1370 	mov	@r0,#0x3f
                                   1371 ;	life.c:166: flashOE();
      0004FD 12r00r18         [24] 1372 	lcall	_flashOE
                                   1373 ;	life.c:168: for (y = 0; y < H; y++) {
      000500 78r05            [12] 1374 	mov	r0,#_y
      000502 E4               [12] 1375 	clr	a
      000503 F6               [12] 1376 	mov	@r0,a
      000504 08               [12] 1377 	inc	r0
      000505 F6               [12] 1378 	mov	@r0,a
      000506                       1379 00230$:
                                   1380 ;	life.c:169: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000506 78r05            [12] 1381 	mov	r0,#_y
      000508 86 07            [24] 1382 	mov	ar7,@r0
      00050A 53 07 03         [24] 1383 	anl	ar7,#0x03
      00050D EF               [12] 1384 	mov	a,r7
      00050E 03               [12] 1385 	rr	a
      00050F 03               [12] 1386 	rr	a
      000510 54 C0            [12] 1387 	anl	a,#0xc0
      000512 FF               [12] 1388 	mov	r7,a
      000513 78r02            [12] 1389 	mov	r0,#_OE76
      000515 74 3F            [12] 1390 	mov	a,#0x3f
      000517 4F               [12] 1391 	orl	a,r7
      000518 F6               [12] 1392 	mov	@r0,a
                                   1393 ;	life.c:170: flashOE();
      000519 12r00r18         [24] 1394 	lcall	_flashOE
                                   1395 ;	life.c:171: for (x = 0; x < W; x++) {
      00051C 78r03            [12] 1396 	mov	r0,#_x
      00051E E4               [12] 1397 	clr	a
      00051F F6               [12] 1398 	mov	@r0,a
      000520 08               [12] 1399 	inc	r0
      000521 F6               [12] 1400 	mov	@r0,a
      000522                       1401 00228$:
                                   1402 ;	life.c:172: n = -u[A2D(W, y, x)];
      000522 78r05            [12] 1403 	mov	r0,#_y
      000524 E6               [12] 1404 	mov	a,@r0
      000525 C0 E0            [24] 1405 	push	acc
      000527 08               [12] 1406 	inc	r0
      000528 E6               [12] 1407 	mov	a,@r0
      000529 C0 E0            [24] 1408 	push	acc
      00052B 90 00 30         [24] 1409 	mov	dptr,#0x0030
      00052E 12r00r00         [24] 1410 	lcall	__mulint
      000531 C8               [12] 1411 	xch	a,r0
      000532 E5*00            [12] 1412 	mov	a,_bp
      000534 24 04            [12] 1413 	add	a,#0x04
      000536 C8               [12] 1414 	xch	a,r0
      000537 A6 82            [24] 1415 	mov	@r0,dpl
      000539 08               [12] 1416 	inc	r0
      00053A A6 83            [24] 1417 	mov	@r0,dph
      00053C 15 81            [12] 1418 	dec	sp
      00053E 15 81            [12] 1419 	dec	sp
      000540 E5*00            [12] 1420 	mov	a,_bp
      000542 24 04            [12] 1421 	add	a,#0x04
      000544 F8               [12] 1422 	mov	r0,a
      000545 79r03            [12] 1423 	mov	r1,#_x
      000547 E7               [12] 1424 	mov	a,@r1
      000548 26               [12] 1425 	add	a,@r0
      000549 C0 E0            [24] 1426 	push	acc
      00054B 09               [12] 1427 	inc	r1
      00054C E7               [12] 1428 	mov	a,@r1
      00054D 08               [12] 1429 	inc	r0
      00054E 36               [12] 1430 	addc	a,@r0
      00054F C0 E0            [24] 1431 	push	acc
      000551 E5*00            [12] 1432 	mov	a,_bp
      000553 24 03            [12] 1433 	add	a,#0x03
      000555 F8               [12] 1434 	mov	r0,a
      000556 D0 E0            [24] 1435 	pop	acc
      000558 F6               [12] 1436 	mov	@r0,a
      000559 18               [12] 1437 	dec	r0
      00055A D0 E0            [24] 1438 	pop	acc
      00055C F6               [12] 1439 	mov	@r0,a
      00055D A8*00            [24] 1440 	mov	r0,_bp
      00055F 08               [12] 1441 	inc	r0
      000560 08               [12] 1442 	inc	r0
      000561 E6               [12] 1443 	mov	a,@r0
      000562 24r00            [12] 1444 	add	a,#_u
      000564 F5 82            [12] 1445 	mov	dpl,a
      000566 08               [12] 1446 	inc	r0
      000567 E6               [12] 1447 	mov	a,@r0
      000568 34s48            [12] 1448 	addc	a,#(_u >> 8)
      00056A F5 83            [12] 1449 	mov	dph,a
      00056C E0               [24] 1450 	movx	a,@dptr
      00056D FB               [12] 1451 	mov	r3,a
      00056E A8*00            [24] 1452 	mov	r0,_bp
      000570 08               [12] 1453 	inc	r0
      000571 C3               [12] 1454 	clr	c
      000572 E4               [12] 1455 	clr	a
      000573 9B               [12] 1456 	subb	a,r3
      000574 F6               [12] 1457 	mov	@r0,a
                                   1458 ;	life.c:177: UPDN(-1, -1);
      000575 78r05            [12] 1459 	mov	r0,#_y
      000577 74 BF            [12] 1460 	mov	a,#0xbf
      000579 26               [12] 1461 	add	a,@r0
      00057A FA               [12] 1462 	mov	r2,a
      00057B E4               [12] 1463 	clr	a
      00057C 08               [12] 1464 	inc	r0
      00057D 36               [12] 1465 	addc	a,@r0
      00057E FB               [12] 1466 	mov	r3,a
      00057F 74 C0            [12] 1467 	mov	a,#0xc0
      000581 C0 E0            [24] 1468 	push	acc
      000583 E4               [12] 1469 	clr	a
      000584 C0 E0            [24] 1470 	push	acc
      000586 8A 82            [24] 1471 	mov	dpl,r2
      000588 8B 83            [24] 1472 	mov	dph,r3
      00058A 12r00r00         [24] 1473 	lcall	__modsint
      00058D AA 82            [24] 1474 	mov	r2,dpl
      00058F AB 83            [24] 1475 	mov	r3,dph
      000591 15 81            [12] 1476 	dec	sp
      000593 15 81            [12] 1477 	dec	sp
      000595 C0 02            [24] 1478 	push	ar2
      000597 C0 03            [24] 1479 	push	ar3
      000599 90 00 30         [24] 1480 	mov	dptr,#0x0030
      00059C 12r00r00         [24] 1481 	lcall	__mulint
      00059F AA 82            [24] 1482 	mov	r2,dpl
      0005A1 AB 83            [24] 1483 	mov	r3,dph
      0005A3 15 81            [12] 1484 	dec	sp
      0005A5 15 81            [12] 1485 	dec	sp
      0005A7 78r03            [12] 1486 	mov	r0,#_x
      0005A9 74 2F            [12] 1487 	mov	a,#0x2f
      0005AB 26               [12] 1488 	add	a,@r0
      0005AC FC               [12] 1489 	mov	r4,a
      0005AD E4               [12] 1490 	clr	a
      0005AE 08               [12] 1491 	inc	r0
      0005AF 36               [12] 1492 	addc	a,@r0
      0005B0 FD               [12] 1493 	mov	r5,a
      0005B1 C0 03            [24] 1494 	push	ar3
      0005B3 C0 02            [24] 1495 	push	ar2
      0005B5 74 30            [12] 1496 	mov	a,#0x30
      0005B7 C0 E0            [24] 1497 	push	acc
      0005B9 E4               [12] 1498 	clr	a
      0005BA C0 E0            [24] 1499 	push	acc
      0005BC 8C 82            [24] 1500 	mov	dpl,r4
      0005BE 8D 83            [24] 1501 	mov	dph,r5
      0005C0 12r00r00         [24] 1502 	lcall	__modsint
      0005C3 AC 82            [24] 1503 	mov	r4,dpl
      0005C5 AD 83            [24] 1504 	mov	r5,dph
      0005C7 15 81            [12] 1505 	dec	sp
      0005C9 15 81            [12] 1506 	dec	sp
      0005CB D0 02            [24] 1507 	pop	ar2
      0005CD D0 03            [24] 1508 	pop	ar3
      0005CF EC               [12] 1509 	mov	a,r4
      0005D0 2A               [12] 1510 	add	a,r2
      0005D1 FE               [12] 1511 	mov	r6,a
      0005D2 ED               [12] 1512 	mov	a,r5
      0005D3 3B               [12] 1513 	addc	a,r3
      0005D4 FF               [12] 1514 	mov	r7,a
      0005D5 EE               [12] 1515 	mov	a,r6
      0005D6 24r00            [12] 1516 	add	a,#_u
      0005D8 F5 82            [12] 1517 	mov	dpl,a
      0005DA EF               [12] 1518 	mov	a,r7
      0005DB 34s48            [12] 1519 	addc	a,#(_u >> 8)
      0005DD F5 83            [12] 1520 	mov	dph,a
      0005DF E0               [24] 1521 	movx	a,@dptr
      0005E0 FF               [12] 1522 	mov	r7,a
      0005E1 A8*00            [24] 1523 	mov	r0,_bp
      0005E3 08               [12] 1524 	inc	r0
      0005E4 EF               [12] 1525 	mov	a,r7
      0005E5 26               [12] 1526 	add	a,@r0
      0005E6 F6               [12] 1527 	mov	@r0,a
                                   1528 ;	life.c:178: UPDN(-1, 0);
      0005E7 78r03            [12] 1529 	mov	r0,#_x
      0005E9 74 30            [12] 1530 	mov	a,#0x30
      0005EB 26               [12] 1531 	add	a,@r0
      0005EC FE               [12] 1532 	mov	r6,a
      0005ED E4               [12] 1533 	clr	a
      0005EE 08               [12] 1534 	inc	r0
      0005EF 36               [12] 1535 	addc	a,@r0
      0005F0 FF               [12] 1536 	mov	r7,a
      0005F1 C0 05            [24] 1537 	push	ar5
      0005F3 C0 04            [24] 1538 	push	ar4
      0005F5 C0 03            [24] 1539 	push	ar3
      0005F7 C0 02            [24] 1540 	push	ar2
      0005F9 74 30            [12] 1541 	mov	a,#0x30
      0005FB C0 E0            [24] 1542 	push	acc
      0005FD E4               [12] 1543 	clr	a
      0005FE C0 E0            [24] 1544 	push	acc
      000600 8E 82            [24] 1545 	mov	dpl,r6
      000602 8F 83            [24] 1546 	mov	dph,r7
      000604 12r00r00         [24] 1547 	lcall	__modsint
      000607 C8               [12] 1548 	xch	a,r0
      000608 E5*00            [12] 1549 	mov	a,_bp
      00060A 24 06            [12] 1550 	add	a,#0x06
      00060C C8               [12] 1551 	xch	a,r0
      00060D A6 82            [24] 1552 	mov	@r0,dpl
      00060F 08               [12] 1553 	inc	r0
      000610 A6 83            [24] 1554 	mov	@r0,dph
      000612 15 81            [12] 1555 	dec	sp
      000614 15 81            [12] 1556 	dec	sp
      000616 D0 02            [24] 1557 	pop	ar2
      000618 D0 03            [24] 1558 	pop	ar3
      00061A E5*00            [12] 1559 	mov	a,_bp
      00061C 24 06            [12] 1560 	add	a,#0x06
      00061E F8               [12] 1561 	mov	r0,a
      00061F E6               [12] 1562 	mov	a,@r0
      000620 2A               [12] 1563 	add	a,r2
      000621 FE               [12] 1564 	mov	r6,a
      000622 08               [12] 1565 	inc	r0
      000623 E6               [12] 1566 	mov	a,@r0
      000624 3B               [12] 1567 	addc	a,r3
      000625 FF               [12] 1568 	mov	r7,a
      000626 EE               [12] 1569 	mov	a,r6
      000627 24r00            [12] 1570 	add	a,#_u
      000629 F5 82            [12] 1571 	mov	dpl,a
      00062B EF               [12] 1572 	mov	a,r7
      00062C 34s48            [12] 1573 	addc	a,#(_u >> 8)
      00062E F5 83            [12] 1574 	mov	dph,a
      000630 E0               [24] 1575 	movx	a,@dptr
      000631 FF               [12] 1576 	mov	r7,a
      000632 A8*00            [24] 1577 	mov	r0,_bp
      000634 08               [12] 1578 	inc	r0
      000635 EF               [12] 1579 	mov	a,r7
      000636 26               [12] 1580 	add	a,@r0
      000637 F6               [12] 1581 	mov	@r0,a
                                   1582 ;	life.c:179: UPDN(-1, 1);
      000638 78r03            [12] 1583 	mov	r0,#_x
      00063A 74 31            [12] 1584 	mov	a,#0x31
      00063C 26               [12] 1585 	add	a,@r0
      00063D FE               [12] 1586 	mov	r6,a
      00063E E4               [12] 1587 	clr	a
      00063F 08               [12] 1588 	inc	r0
      000640 36               [12] 1589 	addc	a,@r0
      000641 FF               [12] 1590 	mov	r7,a
      000642 C0 03            [24] 1591 	push	ar3
      000644 C0 02            [24] 1592 	push	ar2
      000646 74 30            [12] 1593 	mov	a,#0x30
      000648 C0 E0            [24] 1594 	push	acc
      00064A E4               [12] 1595 	clr	a
      00064B C0 E0            [24] 1596 	push	acc
      00064D 8E 82            [24] 1597 	mov	dpl,r6
      00064F 8F 83            [24] 1598 	mov	dph,r7
      000651 12r00r00         [24] 1599 	lcall	__modsint
      000654 AE 82            [24] 1600 	mov	r6,dpl
      000656 AF 83            [24] 1601 	mov	r7,dph
      000658 15 81            [12] 1602 	dec	sp
      00065A 15 81            [12] 1603 	dec	sp
      00065C D0 02            [24] 1604 	pop	ar2
      00065E D0 03            [24] 1605 	pop	ar3
      000660 D0 04            [24] 1606 	pop	ar4
      000662 D0 05            [24] 1607 	pop	ar5
      000664 EE               [12] 1608 	mov	a,r6
      000665 2A               [12] 1609 	add	a,r2
      000666 FA               [12] 1610 	mov	r2,a
      000667 EF               [12] 1611 	mov	a,r7
      000668 3B               [12] 1612 	addc	a,r3
      000669 FB               [12] 1613 	mov	r3,a
      00066A EA               [12] 1614 	mov	a,r2
      00066B 24r00            [12] 1615 	add	a,#_u
      00066D F5 82            [12] 1616 	mov	dpl,a
      00066F EB               [12] 1617 	mov	a,r3
      000670 34s48            [12] 1618 	addc	a,#(_u >> 8)
      000672 F5 83            [12] 1619 	mov	dph,a
      000674 E0               [24] 1620 	movx	a,@dptr
      000675 FB               [12] 1621 	mov	r3,a
      000676 A8*00            [24] 1622 	mov	r0,_bp
      000678 08               [12] 1623 	inc	r0
      000679 EB               [12] 1624 	mov	a,r3
      00067A 26               [12] 1625 	add	a,@r0
      00067B F6               [12] 1626 	mov	@r0,a
                                   1627 ;	life.c:180: UPDN(0, -1);
      00067C 78r05            [12] 1628 	mov	r0,#_y
      00067E 74 C0            [12] 1629 	mov	a,#0xc0
      000680 26               [12] 1630 	add	a,@r0
      000681 FA               [12] 1631 	mov	r2,a
      000682 E4               [12] 1632 	clr	a
      000683 08               [12] 1633 	inc	r0
      000684 36               [12] 1634 	addc	a,@r0
      000685 FB               [12] 1635 	mov	r3,a
      000686 C0 07            [24] 1636 	push	ar7
      000688 C0 06            [24] 1637 	push	ar6
      00068A C0 05            [24] 1638 	push	ar5
      00068C C0 04            [24] 1639 	push	ar4
      00068E 74 C0            [12] 1640 	mov	a,#0xc0
      000690 C0 E0            [24] 1641 	push	acc
      000692 E4               [12] 1642 	clr	a
      000693 C0 E0            [24] 1643 	push	acc
      000695 8A 82            [24] 1644 	mov	dpl,r2
      000697 8B 83            [24] 1645 	mov	dph,r3
      000699 12r00r00         [24] 1646 	lcall	__modsint
      00069C AA 82            [24] 1647 	mov	r2,dpl
      00069E AB 83            [24] 1648 	mov	r3,dph
      0006A0 15 81            [12] 1649 	dec	sp
      0006A2 15 81            [12] 1650 	dec	sp
      0006A4 C0 02            [24] 1651 	push	ar2
      0006A6 C0 03            [24] 1652 	push	ar3
      0006A8 90 00 30         [24] 1653 	mov	dptr,#0x0030
      0006AB 12r00r00         [24] 1654 	lcall	__mulint
      0006AE C8               [12] 1655 	xch	a,r0
      0006AF E5*00            [12] 1656 	mov	a,_bp
      0006B1 24 08            [12] 1657 	add	a,#0x08
      0006B3 C8               [12] 1658 	xch	a,r0
      0006B4 A6 82            [24] 1659 	mov	@r0,dpl
      0006B6 08               [12] 1660 	inc	r0
      0006B7 A6 83            [24] 1661 	mov	@r0,dph
      0006B9 15 81            [12] 1662 	dec	sp
      0006BB 15 81            [12] 1663 	dec	sp
      0006BD D0 04            [24] 1664 	pop	ar4
      0006BF D0 05            [24] 1665 	pop	ar5
      0006C1 D0 06            [24] 1666 	pop	ar6
      0006C3 D0 07            [24] 1667 	pop	ar7
      0006C5 E5*00            [12] 1668 	mov	a,_bp
      0006C7 24 08            [12] 1669 	add	a,#0x08
      0006C9 F8               [12] 1670 	mov	r0,a
      0006CA EC               [12] 1671 	mov	a,r4
      0006CB 26               [12] 1672 	add	a,@r0
      0006CC FA               [12] 1673 	mov	r2,a
      0006CD ED               [12] 1674 	mov	a,r5
      0006CE 08               [12] 1675 	inc	r0
      0006CF 36               [12] 1676 	addc	a,@r0
      0006D0 FB               [12] 1677 	mov	r3,a
      0006D1 EA               [12] 1678 	mov	a,r2
      0006D2 24r00            [12] 1679 	add	a,#_u
      0006D4 F5 82            [12] 1680 	mov	dpl,a
      0006D6 EB               [12] 1681 	mov	a,r3
      0006D7 34s48            [12] 1682 	addc	a,#(_u >> 8)
      0006D9 F5 83            [12] 1683 	mov	dph,a
      0006DB E0               [24] 1684 	movx	a,@dptr
      0006DC FB               [12] 1685 	mov	r3,a
      0006DD A8*00            [24] 1686 	mov	r0,_bp
      0006DF 08               [12] 1687 	inc	r0
      0006E0 EB               [12] 1688 	mov	a,r3
      0006E1 26               [12] 1689 	add	a,@r0
      0006E2 F6               [12] 1690 	mov	@r0,a
                                   1691 ;	life.c:181: UPDN(0, 0);
      0006E3 E5*00            [12] 1692 	mov	a,_bp
      0006E5 24 08            [12] 1693 	add	a,#0x08
      0006E7 F8               [12] 1694 	mov	r0,a
      0006E8 E5*00            [12] 1695 	mov	a,_bp
      0006EA 24 06            [12] 1696 	add	a,#0x06
      0006EC F9               [12] 1697 	mov	r1,a
      0006ED E7               [12] 1698 	mov	a,@r1
      0006EE 26               [12] 1699 	add	a,@r0
      0006EF FA               [12] 1700 	mov	r2,a
      0006F0 09               [12] 1701 	inc	r1
      0006F1 E7               [12] 1702 	mov	a,@r1
      0006F2 08               [12] 1703 	inc	r0
      0006F3 36               [12] 1704 	addc	a,@r0
      0006F4 FB               [12] 1705 	mov	r3,a
      0006F5 EA               [12] 1706 	mov	a,r2
      0006F6 24r00            [12] 1707 	add	a,#_u
      0006F8 F5 82            [12] 1708 	mov	dpl,a
      0006FA EB               [12] 1709 	mov	a,r3
      0006FB 34s48            [12] 1710 	addc	a,#(_u >> 8)
      0006FD F5 83            [12] 1711 	mov	dph,a
      0006FF E0               [24] 1712 	movx	a,@dptr
      000700 FB               [12] 1713 	mov	r3,a
      000701 A8*00            [24] 1714 	mov	r0,_bp
      000703 08               [12] 1715 	inc	r0
      000704 EB               [12] 1716 	mov	a,r3
      000705 26               [12] 1717 	add	a,@r0
      000706 F6               [12] 1718 	mov	@r0,a
                                   1719 ;	life.c:182: UPDN(0, 1);
      000707 E5*00            [12] 1720 	mov	a,_bp
      000709 24 08            [12] 1721 	add	a,#0x08
      00070B F8               [12] 1722 	mov	r0,a
      00070C EE               [12] 1723 	mov	a,r6
      00070D 26               [12] 1724 	add	a,@r0
      00070E FA               [12] 1725 	mov	r2,a
      00070F EF               [12] 1726 	mov	a,r7
      000710 08               [12] 1727 	inc	r0
      000711 36               [12] 1728 	addc	a,@r0
      000712 FB               [12] 1729 	mov	r3,a
      000713 EA               [12] 1730 	mov	a,r2
      000714 24r00            [12] 1731 	add	a,#_u
      000716 F5 82            [12] 1732 	mov	dpl,a
      000718 EB               [12] 1733 	mov	a,r3
      000719 34s48            [12] 1734 	addc	a,#(_u >> 8)
      00071B F5 83            [12] 1735 	mov	dph,a
      00071D E0               [24] 1736 	movx	a,@dptr
      00071E FB               [12] 1737 	mov	r3,a
      00071F A8*00            [24] 1738 	mov	r0,_bp
      000721 08               [12] 1739 	inc	r0
      000722 E5*00            [12] 1740 	mov	a,_bp
      000724 24 08            [12] 1741 	add	a,#0x08
      000726 F9               [12] 1742 	mov	r1,a
      000727 EB               [12] 1743 	mov	a,r3
      000728 26               [12] 1744 	add	a,@r0
      000729 F7               [12] 1745 	mov	@r1,a
                                   1746 ;	life.c:183: UPDN(1, -1);
      00072A 78r05            [12] 1747 	mov	r0,#_y
      00072C 74 C1            [12] 1748 	mov	a,#0xc1
      00072E 26               [12] 1749 	add	a,@r0
      00072F FA               [12] 1750 	mov	r2,a
      000730 E4               [12] 1751 	clr	a
      000731 08               [12] 1752 	inc	r0
      000732 36               [12] 1753 	addc	a,@r0
      000733 FB               [12] 1754 	mov	r3,a
      000734 C0 07            [24] 1755 	push	ar7
      000736 C0 06            [24] 1756 	push	ar6
      000738 C0 05            [24] 1757 	push	ar5
      00073A C0 04            [24] 1758 	push	ar4
      00073C 74 C0            [12] 1759 	mov	a,#0xc0
      00073E C0 E0            [24] 1760 	push	acc
      000740 E4               [12] 1761 	clr	a
      000741 C0 E0            [24] 1762 	push	acc
      000743 8A 82            [24] 1763 	mov	dpl,r2
      000745 8B 83            [24] 1764 	mov	dph,r3
      000747 12r00r00         [24] 1765 	lcall	__modsint
      00074A AA 82            [24] 1766 	mov	r2,dpl
      00074C AB 83            [24] 1767 	mov	r3,dph
      00074E 15 81            [12] 1768 	dec	sp
      000750 15 81            [12] 1769 	dec	sp
      000752 C0 02            [24] 1770 	push	ar2
      000754 C0 03            [24] 1771 	push	ar3
      000756 90 00 30         [24] 1772 	mov	dptr,#0x0030
      000759 12r00r00         [24] 1773 	lcall	__mulint
      00075C AA 82            [24] 1774 	mov	r2,dpl
      00075E AB 83            [24] 1775 	mov	r3,dph
      000760 15 81            [12] 1776 	dec	sp
      000762 15 81            [12] 1777 	dec	sp
      000764 D0 04            [24] 1778 	pop	ar4
      000766 D0 05            [24] 1779 	pop	ar5
      000768 D0 06            [24] 1780 	pop	ar6
      00076A D0 07            [24] 1781 	pop	ar7
      00076C EC               [12] 1782 	mov	a,r4
      00076D 2A               [12] 1783 	add	a,r2
      00076E FC               [12] 1784 	mov	r4,a
      00076F ED               [12] 1785 	mov	a,r5
      000770 3B               [12] 1786 	addc	a,r3
      000771 FD               [12] 1787 	mov	r5,a
      000772 EC               [12] 1788 	mov	a,r4
      000773 24r00            [12] 1789 	add	a,#_u
      000775 F5 82            [12] 1790 	mov	dpl,a
      000777 ED               [12] 1791 	mov	a,r5
      000778 34s48            [12] 1792 	addc	a,#(_u >> 8)
      00077A F5 83            [12] 1793 	mov	dph,a
      00077C E0               [24] 1794 	movx	a,@dptr
      00077D FD               [12] 1795 	mov	r5,a
      00077E E5*00            [12] 1796 	mov	a,_bp
      000780 24 08            [12] 1797 	add	a,#0x08
      000782 F8               [12] 1798 	mov	r0,a
      000783 E5*00            [12] 1799 	mov	a,_bp
      000785 24 08            [12] 1800 	add	a,#0x08
      000787 F9               [12] 1801 	mov	r1,a
      000788 ED               [12] 1802 	mov	a,r5
      000789 26               [12] 1803 	add	a,@r0
      00078A F7               [12] 1804 	mov	@r1,a
                                   1805 ;	life.c:184: UPDN(1, 0);
      00078B E5*00            [12] 1806 	mov	a,_bp
      00078D 24 06            [12] 1807 	add	a,#0x06
      00078F F8               [12] 1808 	mov	r0,a
      000790 E6               [12] 1809 	mov	a,@r0
      000791 2A               [12] 1810 	add	a,r2
      000792 FC               [12] 1811 	mov	r4,a
      000793 08               [12] 1812 	inc	r0
      000794 E6               [12] 1813 	mov	a,@r0
      000795 3B               [12] 1814 	addc	a,r3
      000796 FD               [12] 1815 	mov	r5,a
      000797 EC               [12] 1816 	mov	a,r4
      000798 24r00            [12] 1817 	add	a,#_u
      00079A F5 82            [12] 1818 	mov	dpl,a
      00079C ED               [12] 1819 	mov	a,r5
      00079D 34s48            [12] 1820 	addc	a,#(_u >> 8)
      00079F F5 83            [12] 1821 	mov	dph,a
      0007A1 E0               [24] 1822 	movx	a,@dptr
      0007A2 FD               [12] 1823 	mov	r5,a
      0007A3 E5*00            [12] 1824 	mov	a,_bp
      0007A5 24 08            [12] 1825 	add	a,#0x08
      0007A7 F8               [12] 1826 	mov	r0,a
      0007A8 ED               [12] 1827 	mov	a,r5
      0007A9 26               [12] 1828 	add	a,@r0
      0007AA FD               [12] 1829 	mov	r5,a
                                   1830 ;	life.c:185: UPDN(1, 1);
      0007AB EE               [12] 1831 	mov	a,r6
      0007AC 2A               [12] 1832 	add	a,r2
      0007AD FE               [12] 1833 	mov	r6,a
      0007AE EF               [12] 1834 	mov	a,r7
      0007AF 3B               [12] 1835 	addc	a,r3
      0007B0 FF               [12] 1836 	mov	r7,a
      0007B1 EE               [12] 1837 	mov	a,r6
      0007B2 24r00            [12] 1838 	add	a,#_u
      0007B4 F5 82            [12] 1839 	mov	dpl,a
      0007B6 EF               [12] 1840 	mov	a,r7
      0007B7 34s48            [12] 1841 	addc	a,#(_u >> 8)
      0007B9 F5 83            [12] 1842 	mov	dph,a
      0007BB E0               [24] 1843 	movx	a,@dptr
      0007BC 2D               [12] 1844 	add	a,r5
      0007BD FF               [12] 1845 	mov	r7,a
      0007BE 78r07            [12] 1846 	mov	r0,#_n
      0007C0 A6 07            [24] 1847 	mov	@r0,ar7
                                   1848 ;	life.c:188: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007C2 A8*00            [24] 1849 	mov	r0,_bp
      0007C4 08               [12] 1850 	inc	r0
      0007C5 08               [12] 1851 	inc	r0
      0007C6 E6               [12] 1852 	mov	a,@r0
      0007C7 24r00            [12] 1853 	add	a,#_nu
      0007C9 FD               [12] 1854 	mov	r5,a
      0007CA 08               [12] 1855 	inc	r0
      0007CB E6               [12] 1856 	mov	a,@r0
      0007CC 34s6C            [12] 1857 	addc	a,#(_nu >> 8)
      0007CE FE               [12] 1858 	mov	r6,a
      0007CF BF 03 02         [24] 1859 	cjne	r7,#0x03,00504$
      0007D2 80 25            [24] 1860 	sjmp	00243$
      0007D4                       1861 00504$:
      0007D4 BF 02 1E         [24] 1862 	cjne	r7,#0x02,00242$
      0007D7 E5*00            [12] 1863 	mov	a,_bp
      0007D9 24 04            [12] 1864 	add	a,#0x04
      0007DB F8               [12] 1865 	mov	r0,a
      0007DC 79r03            [12] 1866 	mov	r1,#_x
      0007DE E7               [12] 1867 	mov	a,@r1
      0007DF 26               [12] 1868 	add	a,@r0
      0007E0 FC               [12] 1869 	mov	r4,a
      0007E1 09               [12] 1870 	inc	r1
      0007E2 E7               [12] 1871 	mov	a,@r1
      0007E3 08               [12] 1872 	inc	r0
      0007E4 36               [12] 1873 	addc	a,@r0
      0007E5 FF               [12] 1874 	mov	r7,a
      0007E6 EC               [12] 1875 	mov	a,r4
      0007E7 24r00            [12] 1876 	add	a,#_u
      0007E9 FC               [12] 1877 	mov	r4,a
      0007EA EF               [12] 1878 	mov	a,r7
      0007EB 34s48            [12] 1879 	addc	a,#(_u >> 8)
      0007ED FF               [12] 1880 	mov	r7,a
      0007EE 8C 82            [24] 1881 	mov	dpl,r4
      0007F0 8F 83            [24] 1882 	mov	dph,r7
      0007F2 E0               [24] 1883 	movx	a,@dptr
      0007F3 70 04            [24] 1884 	jnz	00243$
      0007F5                       1885 00242$:
                                   1886 ;	assignBit
      0007F5 C2*00            [12] 1887 	clr	b0
      0007F7 80 02            [24] 1888 	sjmp	00244$
      0007F9                       1889 00243$:
                                   1890 ;	assignBit
      0007F9 D2*00            [12] 1891 	setb	b0
      0007FB                       1892 00244$:
      0007FB A2*00            [12] 1893 	mov	c,b0
      0007FD E4               [12] 1894 	clr	a
      0007FE 33               [12] 1895 	rlc	a
      0007FF 8D 82            [24] 1896 	mov	dpl,r5
      000801 8E 83            [24] 1897 	mov	dph,r6
      000803 F0               [24] 1898 	movx	@dptr,a
                                   1899 ;	life.c:189: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000804 78r05            [12] 1900 	mov	r0,#_y
      000806 E6               [12] 1901 	mov	a,@r0
      000807 C0 E0            [24] 1902 	push	acc
      000809 08               [12] 1903 	inc	r0
      00080A E6               [12] 1904 	mov	a,@r0
      00080B C0 E0            [24] 1905 	push	acc
      00080D 90 00 30         [24] 1906 	mov	dptr,#0x0030
      000810 12r00r00         [24] 1907 	lcall	__mulint
      000813 AE 82            [24] 1908 	mov	r6,dpl
      000815 AF 83            [24] 1909 	mov	r7,dph
      000817 15 81            [12] 1910 	dec	sp
      000819 15 81            [12] 1911 	dec	sp
      00081B 78r03            [12] 1912 	mov	r0,#_x
      00081D E6               [12] 1913 	mov	a,@r0
      00081E 2E               [12] 1914 	add	a,r6
      00081F FE               [12] 1915 	mov	r6,a
      000820 08               [12] 1916 	inc	r0
      000821 E6               [12] 1917 	mov	a,@r0
      000822 3F               [12] 1918 	addc	a,r7
      000823 FF               [12] 1919 	mov	r7,a
      000824 EE               [12] 1920 	mov	a,r6
      000825 24r00            [12] 1921 	add	a,#_pu
      000827 F5 82            [12] 1922 	mov	dpl,a
      000829 EF               [12] 1923 	mov	a,r7
      00082A 34s24            [12] 1924 	addc	a,#(_pu >> 8)
      00082C F5 83            [12] 1925 	mov	dph,a
      00082E E0               [24] 1926 	movx	a,@dptr
      00082F FD               [12] 1927 	mov	r5,a
      000830 EE               [12] 1928 	mov	a,r6
      000831 24r00            [12] 1929 	add	a,#_nu
      000833 F5 82            [12] 1930 	mov	dpl,a
      000835 EF               [12] 1931 	mov	a,r7
      000836 34s6C            [12] 1932 	addc	a,#(_nu >> 8)
      000838 F5 83            [12] 1933 	mov	dph,a
      00083A E0               [24] 1934 	movx	a,@dptr
      00083B FC               [12] 1935 	mov	r4,a
      00083C 6D               [12] 1936 	xrl	a,r5
      00083D 78r09            [12] 1937 	mov	r0,#_cycle2
      00083F 46               [12] 1938 	orl	a,@r0
      000840 F6               [12] 1939 	mov	@r0,a
                                   1940 ;	life.c:190: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000841 EE               [12] 1941 	mov	a,r6
      000842 24r00            [12] 1942 	add	a,#_u
      000844 F5 82            [12] 1943 	mov	dpl,a
      000846 EF               [12] 1944 	mov	a,r7
      000847 34s48            [12] 1945 	addc	a,#(_u >> 8)
      000849 F5 83            [12] 1946 	mov	dph,a
      00084B E0               [24] 1947 	movx	a,@dptr
      00084C FF               [12] 1948 	mov	r7,a
      00084D EC               [12] 1949 	mov	a,r4
      00084E 6F               [12] 1950 	xrl	a,r7
      00084F 78r08            [12] 1951 	mov	r0,#_fixed
      000851 46               [12] 1952 	orl	a,@r0
      000852 F6               [12] 1953 	mov	@r0,a
                                   1954 ;	life.c:171: for (x = 0; x < W; x++) {
      000853 78r03            [12] 1955 	mov	r0,#_x
      000855 06               [12] 1956 	inc	@r0
      000856 B6 00 02         [24] 1957 	cjne	@r0,#0x00,00508$
      000859 08               [12] 1958 	inc	r0
      00085A 06               [12] 1959 	inc	@r0
      00085B                       1960 00508$:
      00085B 78r03            [12] 1961 	mov	r0,#_x
      00085D C3               [12] 1962 	clr	c
      00085E E6               [12] 1963 	mov	a,@r0
      00085F 94 30            [12] 1964 	subb	a,#0x30
      000861 08               [12] 1965 	inc	r0
      000862 E6               [12] 1966 	mov	a,@r0
      000863 64 80            [12] 1967 	xrl	a,#0x80
      000865 94 80            [12] 1968 	subb	a,#0x80
      000867 50 03            [24] 1969 	jnc	00509$
      000869 02r05r22         [24] 1970 	ljmp	00228$
      00086C                       1971 00509$:
                                   1972 ;	life.c:168: for (y = 0; y < H; y++) {
      00086C 78r05            [12] 1973 	mov	r0,#_y
      00086E 06               [12] 1974 	inc	@r0
      00086F B6 00 02         [24] 1975 	cjne	@r0,#0x00,00510$
      000872 08               [12] 1976 	inc	r0
      000873 06               [12] 1977 	inc	@r0
      000874                       1978 00510$:
      000874 78r05            [12] 1979 	mov	r0,#_y
      000876 C3               [12] 1980 	clr	c
      000877 E6               [12] 1981 	mov	a,@r0
      000878 94 C0            [12] 1982 	subb	a,#0xc0
      00087A 08               [12] 1983 	inc	r0
      00087B E6               [12] 1984 	mov	a,@r0
      00087C 64 80            [12] 1985 	xrl	a,#0x80
      00087E 94 80            [12] 1986 	subb	a,#0x80
      000880 50 03            [24] 1987 	jnc	00511$
      000882 02r05r06         [24] 1988 	ljmp	00230$
      000885                       1989 00511$:
                                   1990 ;	life.c:194: OE76 = OE76_0;
      000885 78r02            [12] 1991 	mov	r0,#_OE76
      000887 76 3F            [12] 1992 	mov	@r0,#0x3f
                                   1993 ;	life.c:195: flashOE();
      000889 12r00r18         [24] 1994 	lcall	_flashOE
                                   1995 ;	life.c:197: cycle2 = !cycle2;
      00088C 78r09            [12] 1996 	mov	r0,#_cycle2
      00088E E6               [12] 1997 	mov	a,@r0
      00088F B4 01 00         [24] 1998 	cjne	a,#0x01,00512$
      000892                       1999 00512$:
      000892 92*00            [24] 2000 	mov	b0,c
      000894 78r09            [12] 2001 	mov	r0,#_cycle2
      000896 E4               [12] 2002 	clr	a
      000897 33               [12] 2003 	rlc	a
      000898 F6               [12] 2004 	mov	@r0,a
                                   2005 ;	life.c:198: fixed = !fixed;
      000899 78r08            [12] 2006 	mov	r0,#_fixed
      00089B E6               [12] 2007 	mov	a,@r0
      00089C B4 01 00         [24] 2008 	cjne	a,#0x01,00513$
      00089F                       2009 00513$:
      00089F 92*00            [24] 2010 	mov	b0,c
      0008A1 78r08            [12] 2011 	mov	r0,#_fixed
      0008A3 E4               [12] 2012 	clr	a
      0008A4 33               [12] 2013 	rlc	a
      0008A5 F6               [12] 2014 	mov	@r0,a
                                   2015 ;	life.c:200: memcpy(pu, u, sizeof (u));
      0008A6 E4               [12] 2016 	clr	a
      0008A7 C0 E0            [24] 2017 	push	acc
      0008A9 74 24            [12] 2018 	mov	a,#0x24
      0008AB C0 E0            [24] 2019 	push	acc
      0008AD 74r00            [12] 2020 	mov	a,#_u
      0008AF C0 E0            [24] 2021 	push	acc
      0008B1 74s48            [12] 2022 	mov	a,#(_u >> 8)
      0008B3 C0 E0            [24] 2023 	push	acc
      0008B5 E4               [12] 2024 	clr	a
      0008B6 C0 E0            [24] 2025 	push	acc
      0008B8 90r24r00         [24] 2026 	mov	dptr,#_pu
      0008BB 75 F0 00         [24] 2027 	mov	b,#0x00
      0008BE 12r00r00         [24] 2028 	lcall	___memcpy
      0008C1 E5 81            [12] 2029 	mov	a,sp
      0008C3 24 FB            [12] 2030 	add	a,#0xfb
      0008C5 F5 81            [12] 2031 	mov	sp,a
                                   2032 ;	life.c:201: memcpy(u, nu, sizeof (nu));
      0008C7 E4               [12] 2033 	clr	a
      0008C8 C0 E0            [24] 2034 	push	acc
      0008CA 74 24            [12] 2035 	mov	a,#0x24
      0008CC C0 E0            [24] 2036 	push	acc
      0008CE 74r00            [12] 2037 	mov	a,#_nu
      0008D0 C0 E0            [24] 2038 	push	acc
      0008D2 74s6C            [12] 2039 	mov	a,#(_nu >> 8)
      0008D4 C0 E0            [24] 2040 	push	acc
      0008D6 E4               [12] 2041 	clr	a
      0008D7 C0 E0            [24] 2042 	push	acc
      0008D9 90r48r00         [24] 2043 	mov	dptr,#_u
      0008DC 75 F0 00         [24] 2044 	mov	b,#0x00
      0008DF 12r00r00         [24] 2045 	lcall	___memcpy
      0008E2 E5 81            [12] 2046 	mov	a,sp
      0008E4 24 FB            [12] 2047 	add	a,#0xfb
      0008E6 F5 81            [12] 2048 	mov	sp,a
                                   2049 ;	life.c:260: if (fixed || cycle2) {
      0008E8 78r08            [12] 2050 	mov	r0,#_fixed
      0008EA E6               [12] 2051 	mov	a,@r0
      0008EB 70 05            [24] 2052 	jnz	00137$
      0008ED 78r09            [12] 2053 	mov	r0,#_cycle2
      0008EF E6               [12] 2054 	mov	a,@r0
      0008F0 60 33            [24] 2055 	jz	00138$
      0008F2                       2056 00137$:
                                   2057 ;	life.c:261: if (fixed) {
      0008F2 78r08            [12] 2058 	mov	r0,#_fixed
      0008F4 E6               [12] 2059 	mov	a,@r0
      0008F5 60 0B            [24] 2060 	jz	00135$
                                   2061 ;	life.c:262: printstr("FIXED\r\n");
      0008F7 90r00r63         [24] 2062 	mov	dptr,#___str_12
      0008FA 75 F0 80         [24] 2063 	mov	b,#0x80
      0008FD 12r00r00         [24] 2064 	lcall	_printstr
                                   2065 ;	life.c:263: break;
      000900 80 7B            [24] 2066 	sjmp	00150$
      000902                       2067 00135$:
                                   2068 ;	life.c:264: } else if (!c2set) {
      000902 78r12            [12] 2069 	mov	r0,#_c2set
      000904 E6               [12] 2070 	mov	a,@r0
      000905 70 1E            [24] 2071 	jnz	00138$
                                   2072 ;	life.c:265: genc2 = gen;
      000907 78r0A            [12] 2073 	mov	r0,#_gen
      000909 86 04            [24] 2074 	mov	ar4,@r0
      00090B 08               [12] 2075 	inc	r0
      00090C 86 05            [24] 2076 	mov	ar5,@r0
      00090E 08               [12] 2077 	inc	r0
      00090F 86 06            [24] 2078 	mov	ar6,@r0
      000911 08               [12] 2079 	inc	r0
      000912 86 07            [24] 2080 	mov	ar7,@r0
      000914 78r0E            [12] 2081 	mov	r0,#_genc2
      000916 A6 04            [24] 2082 	mov	@r0,ar4
      000918 08               [12] 2083 	inc	r0
      000919 A6 05            [24] 2084 	mov	@r0,ar5
      00091B 08               [12] 2085 	inc	r0
      00091C A6 06            [24] 2086 	mov	@r0,ar6
      00091E 08               [12] 2087 	inc	r0
      00091F A6 07            [24] 2088 	mov	@r0,ar7
                                   2089 ;	life.c:266: c2set = 1;
      000921 78r12            [12] 2090 	mov	r0,#_c2set
      000923 76 01            [12] 2091 	mov	@r0,#0x01
      000925                       2092 00138$:
                                   2093 ;	life.c:270: c = getchar_poll();
      000925 12r00r00         [24] 2094 	lcall	_getchar_poll
      000928 AE 82            [24] 2095 	mov	r6,dpl
      00092A AF 83            [24] 2096 	mov	r7,dph
                                   2097 ;	life.c:271: if (c > 0) {
      00092C C3               [12] 2098 	clr	c
      00092D E4               [12] 2099 	clr	a
      00092E 9E               [12] 2100 	subb	a,r6
      00092F 74 80            [12] 2101 	mov	a,#(0x00 ^ 0x80)
      000931 8F F0            [24] 2102 	mov	b,r7
      000933 63 F0 80         [24] 2103 	xrl	b,#0x80
      000936 95 F0            [12] 2104 	subb	a,b
      000938 40 03            [24] 2105 	jc	00518$
      00093A 02r04r9A         [24] 2106 	ljmp	00234$
      00093D                       2107 00518$:
                                   2108 ;	life.c:272: c = toupper(c);
      00093D 8E 82            [24] 2109 	mov	dpl,r6
      00093F 8F 83            [24] 2110 	mov	dph,r7
      000941 12r00r00         [24] 2111 	lcall	_toupper
      000944 AE 82            [24] 2112 	mov	r6,dpl
      000946 AF 83            [24] 2113 	mov	r7,dph
                                   2114 ;	life.c:273: if (c == (int)'U') pruni = !pruni;
      000948 BE 55 13         [24] 2115 	cjne	r6,#0x55,00146$
      00094B BF 00 10         [24] 2116 	cjne	r7,#0x00,00146$
      00094E 78r13            [12] 2117 	mov	r0,#_pruni
      000950 E6               [12] 2118 	mov	a,@r0
      000951 B4 01 00         [24] 2119 	cjne	a,#0x01,00521$
      000954                       2120 00521$:
      000954 92*00            [24] 2121 	mov	b0,c
      000956 78r13            [12] 2122 	mov	r0,#_pruni
      000958 E4               [12] 2123 	clr	a
      000959 33               [12] 2124 	rlc	a
      00095A F6               [12] 2125 	mov	@r0,a
      00095B 02r04r9A         [24] 2126 	ljmp	00234$
      00095E                       2127 00146$:
                                   2128 ;	life.c:274: else if (c == (int)'T') i0 = 1;
      00095E BE 54 0A         [24] 2129 	cjne	r6,#0x54,00143$
      000961 BF 00 07         [24] 2130 	cjne	r7,#0x00,00143$
      000964 78r00            [12] 2131 	mov	r0,#_i0
      000966 76 01            [12] 2132 	mov	@r0,#0x01
      000968 02r04r9A         [24] 2133 	ljmp	00234$
      00096B                       2134 00143$:
                                   2135 ;	life.c:275: else if (c == (int)'B') i1 = 1;
      00096B BE 42 05         [24] 2136 	cjne	r6,#0x42,00524$
      00096E BF 00 02         [24] 2137 	cjne	r7,#0x00,00524$
      000971 80 03            [24] 2138 	sjmp	00525$
      000973                       2139 00524$:
      000973 02r04r9A         [24] 2140 	ljmp	00234$
      000976                       2141 00525$:
      000976 78r01            [12] 2142 	mov	r0,#_i1
      000978 76 01            [12] 2143 	mov	@r0,#0x01
      00097A 02r04r9A         [24] 2144 	ljmp	00234$
      00097D                       2145 00150$:
                                   2146 ;	life.c:279: if (i1) printstr("BREAK\r\n");
      00097D 78r01            [12] 2147 	mov	r0,#_i1
      00097F E6               [12] 2148 	mov	a,@r0
      000980 60 09            [24] 2149 	jz	00237$
      000982 90r00r6B         [24] 2150 	mov	dptr,#___str_13
      000985 75 F0 80         [24] 2151 	mov	b,#0x80
      000988 12r00r00         [24] 2152 	lcall	_printstr
      00098B                       2153 00237$:
                                   2154 ;	life.c:230: for (i0 = 0; !i0; ) {
      00098B 78r00            [12] 2155 	mov	r0,#_i0
      00098D E6               [12] 2156 	mov	a,@r0
      00098E 70 03            [24] 2157 	jnz	00527$
      000990 02r01r8B         [24] 2158 	ljmp	00236$
      000993                       2159 00527$:
                                   2160 ;	life.c:282: term:
      000993                       2161 00154$:
                                   2162 ;	life.c:283: EA = 0;
                                   2163 ;	assignBit
      000993 C2 AF            [12] 2164 	clr	_EA
                                   2165 ;	life.c:284: printstr("TERM\r\n");
      000995 90r00r73         [24] 2166 	mov	dptr,#___str_14
      000998 75 F0 80         [24] 2167 	mov	b,#0x80
      00099B 12r00r00         [24] 2168 	lcall	_printstr
                                   2169 ;	life.c:286: PCON |= 2;
      00099E 43 87 02         [24] 2170 	orl	_PCON,#0x02
                                   2171 ;	life.c:288: return;
                                   2172 ;	life.c:289: }
      0009A1 85*00 81         [24] 2173 	mov	sp,_bp
      0009A4 D0*00            [24] 2174 	pop	_bp
      0009A6 22               [24] 2175 	ret
                                   2176 	.area CSEG    (CODE)
                                   2177 	.area CONST   (CODE)
                                   2178 	.area CONST   (CODE)
      000000                       2179 ___str_0:
      000000 1B                    2180 	.db 0x1b
      000001 5B 32 4A              2181 	.ascii "[2J"
      000004 00                    2182 	.db 0x00
                                   2183 	.area CSEG    (CODE)
                                   2184 	.area CONST   (CODE)
      000005                       2185 ___str_1:
      000005 47 45 4E 20           2186 	.ascii "GEN "
      000009 00                    2187 	.db 0x00
                                   2188 	.area CSEG    (CODE)
                                   2189 	.area CONST   (CODE)
      00000A                       2190 ___str_2:
      00000A 20 43 59 43 4C 45 32  2191 	.ascii " CYCLE2 "
             20
      000012 00                    2192 	.db 0x00
                                   2193 	.area CSEG    (CODE)
                                   2194 	.area CONST   (CODE)
      000013                       2195 ___str_3:
      000013 0D                    2196 	.db 0x0d
      000014 0A                    2197 	.db 0x0a
      000015 00                    2198 	.db 0x00
                                   2199 	.area CSEG    (CODE)
                                   2200 	.area CONST   (CODE)
      000016                       2201 ___str_4:
      000016 1B                    2202 	.db 0x1b
      000017 5B 3F 32 35 6C        2203 	.ascii "[?25l"
      00001C 00                    2204 	.db 0x00
                                   2205 	.area CSEG    (CODE)
                                   2206 	.area CONST   (CODE)
      00001D                       2207 ___str_5:
      00001D 1B                    2208 	.db 0x1b
      00001E 5B 3F 32 35 68        2209 	.ascii "[?25h"
      000023 00                    2210 	.db 0x00
                                   2211 	.area CSEG    (CODE)
                                   2212 	.area CONST   (CODE)
      000024                       2213 ___str_6:
      000024 4C 4F 41 44 20 30 20  2214 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000032 00                    2215 	.db 0x00
                                   2216 	.area CSEG    (CODE)
                                   2217 	.area CONST   (CODE)
      000033                       2218 ___str_7:
      000033 3E                    2219 	.ascii ">"
      000034 0D                    2220 	.db 0x0d
      000035 0A                    2221 	.db 0x0a
      000036 00                    2222 	.db 0x00
                                   2223 	.area CSEG    (CODE)
                                   2224 	.area CONST   (CODE)
      000037                       2225 ___str_8:
      000037 52 41 4E 44 4F 4D     2226 	.ascii "RANDOM"
      00003D 00                    2227 	.db 0x00
                                   2228 	.area CSEG    (CODE)
                                   2229 	.area CONST   (CODE)
      00003E                       2230 ___str_9:
      00003E 1B                    2231 	.db 0x1b
      00003F 5B 3F 32 35 68        2232 	.ascii "[?25h"
      000044 1B                    2233 	.db 0x1b
      000045 5B 6D                 2234 	.ascii "[m"
      000047 00                    2235 	.db 0x00
                                   2236 	.area CSEG    (CODE)
                                   2237 	.area CONST   (CODE)
      000048                       2238 ___str_10:
      000048 4C 49 46 45 20 49 20  2239 	.ascii "LIFE I L R O P S U B T"
             4C 20 52 20 4F 20 50
             20 53 20 55 20 42 20
             54
      00005E 0D                    2240 	.db 0x0d
      00005F 0A                    2241 	.db 0x0a
      000060 00                    2242 	.db 0x00
                                   2243 	.area CSEG    (CODE)
                                   2244 	.area CONST   (CODE)
      000061                       2245 ___str_11:
      000061 55                    2246 	.ascii "U"
      000062 00                    2247 	.db 0x00
                                   2248 	.area CSEG    (CODE)
                                   2249 	.area CONST   (CODE)
      000063                       2250 ___str_12:
      000063 46 49 58 45 44        2251 	.ascii "FIXED"
      000068 0D                    2252 	.db 0x0d
      000069 0A                    2253 	.db 0x0a
      00006A 00                    2254 	.db 0x00
                                   2255 	.area CSEG    (CODE)
                                   2256 	.area CONST   (CODE)
      00006B                       2257 ___str_13:
      00006B 42 52 45 41 4B        2258 	.ascii "BREAK"
      000070 0D                    2259 	.db 0x0d
      000071 0A                    2260 	.db 0x0a
      000072 00                    2261 	.db 0x00
                                   2262 	.area CSEG    (CODE)
                                   2263 	.area CONST   (CODE)
      000073                       2264 ___str_14:
      000073 54 45 52 4D           2265 	.ascii "TERM"
      000077 0D                    2266 	.db 0x0d
      000078 0A                    2267 	.db 0x0a
      000079 00                    2268 	.db 0x00
                                   2269 	.area CSEG    (CODE)
                                   2270 	.area XINIT   (CODE)
                                   2271 	.area CABS    (ABS,CODE)
