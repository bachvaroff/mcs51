                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _srand
                                     21 	.globl _rand
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _FL
                                     29 	.globl _P
                                     30 	.globl _TF2
                                     31 	.globl _EXF2
                                     32 	.globl _RCLK
                                     33 	.globl _TCLK
                                     34 	.globl _EXEN2
                                     35 	.globl _TR2
                                     36 	.globl _C_T2
                                     37 	.globl _CP_RL2
                                     38 	.globl _T2CON_7
                                     39 	.globl _T2CON_6
                                     40 	.globl _T2CON_5
                                     41 	.globl _T2CON_4
                                     42 	.globl _T2CON_3
                                     43 	.globl _T2CON_2
                                     44 	.globl _T2CON_1
                                     45 	.globl _T2CON_0
                                     46 	.globl _PT2
                                     47 	.globl _PS
                                     48 	.globl _PT1
                                     49 	.globl _PX1
                                     50 	.globl _PT0
                                     51 	.globl _PX0
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _EA
                                     69 	.globl _ET2
                                     70 	.globl _ES
                                     71 	.globl _ET1
                                     72 	.globl _EX1
                                     73 	.globl _ET0
                                     74 	.globl _EX0
                                     75 	.globl _P2_7
                                     76 	.globl _P2_6
                                     77 	.globl _P2_5
                                     78 	.globl _P2_4
                                     79 	.globl _P2_3
                                     80 	.globl _P2_2
                                     81 	.globl _P2_1
                                     82 	.globl _P2_0
                                     83 	.globl _SM0
                                     84 	.globl _SM1
                                     85 	.globl _SM2
                                     86 	.globl _REN
                                     87 	.globl _TB8
                                     88 	.globl _RB8
                                     89 	.globl _TI
                                     90 	.globl _RI
                                     91 	.globl _T2EX
                                     92 	.globl _T2
                                     93 	.globl _P1_7
                                     94 	.globl _P1_6
                                     95 	.globl _P1_5
                                     96 	.globl _P1_4
                                     97 	.globl _P1_3
                                     98 	.globl _P1_2
                                     99 	.globl _P1_1
                                    100 	.globl _P1_0
                                    101 	.globl _TF1
                                    102 	.globl _TR1
                                    103 	.globl _TF0
                                    104 	.globl _TR0
                                    105 	.globl _IE1
                                    106 	.globl _IT1
                                    107 	.globl _IE0
                                    108 	.globl _IT0
                                    109 	.globl _P0_7
                                    110 	.globl _P0_6
                                    111 	.globl _P0_5
                                    112 	.globl _P0_4
                                    113 	.globl _P0_3
                                    114 	.globl _P0_2
                                    115 	.globl _P0_1
                                    116 	.globl _P0_0
                                    117 	.globl _B
                                    118 	.globl _A
                                    119 	.globl _ACC
                                    120 	.globl _PSW
                                    121 	.globl _TH2
                                    122 	.globl _TL2
                                    123 	.globl _RCAP2H
                                    124 	.globl _RCAP2L
                                    125 	.globl _T2MOD
                                    126 	.globl _T2CON
                                    127 	.globl _IP
                                    128 	.globl _P3
                                    129 	.globl _IE
                                    130 	.globl _P2
                                    131 	.globl _SBUF
                                    132 	.globl _SCON
                                    133 	.globl _P1
                                    134 	.globl _TH1
                                    135 	.globl _TH0
                                    136 	.globl _TL1
                                    137 	.globl _TL0
                                    138 	.globl _TMOD
                                    139 	.globl _TCON
                                    140 	.globl _PCON
                                    141 	.globl _DPH
                                    142 	.globl _DPL
                                    143 	.globl _SP
                                    144 	.globl _P0
                                    145 ;--------------------------------------------------------
                                    146 ; special function registers
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0	=	0x0080
                           000081   151 _SP	=	0x0081
                           000082   152 _DPL	=	0x0082
                           000083   153 _DPH	=	0x0083
                           000087   154 _PCON	=	0x0087
                           000088   155 _TCON	=	0x0088
                           000089   156 _TMOD	=	0x0089
                           00008A   157 _TL0	=	0x008a
                           00008B   158 _TL1	=	0x008b
                           00008C   159 _TH0	=	0x008c
                           00008D   160 _TH1	=	0x008d
                           000090   161 _P1	=	0x0090
                           000098   162 _SCON	=	0x0098
                           000099   163 _SBUF	=	0x0099
                           0000A0   164 _P2	=	0x00a0
                           0000A8   165 _IE	=	0x00a8
                           0000B0   166 _P3	=	0x00b0
                           0000B8   167 _IP	=	0x00b8
                           0000C8   168 _T2CON	=	0x00c8
                           0000C9   169 _T2MOD	=	0x00c9
                           0000CA   170 _RCAP2L	=	0x00ca
                           0000CB   171 _RCAP2H	=	0x00cb
                           0000CC   172 _TL2	=	0x00cc
                           0000CD   173 _TH2	=	0x00cd
                           0000D0   174 _PSW	=	0x00d0
                           0000E0   175 _ACC	=	0x00e0
                           0000E0   176 _A	=	0x00e0
                           0000F0   177 _B	=	0x00f0
                                    178 ;--------------------------------------------------------
                                    179 ; special function bits
                                    180 ;--------------------------------------------------------
                                    181 	.area RSEG    (ABS,DATA)
      000000                        182 	.org 0x0000
                           000080   183 _P0_0	=	0x0080
                           000081   184 _P0_1	=	0x0081
                           000082   185 _P0_2	=	0x0082
                           000083   186 _P0_3	=	0x0083
                           000084   187 _P0_4	=	0x0084
                           000085   188 _P0_5	=	0x0085
                           000086   189 _P0_6	=	0x0086
                           000087   190 _P0_7	=	0x0087
                           000088   191 _IT0	=	0x0088
                           000089   192 _IE0	=	0x0089
                           00008A   193 _IT1	=	0x008a
                           00008B   194 _IE1	=	0x008b
                           00008C   195 _TR0	=	0x008c
                           00008D   196 _TF0	=	0x008d
                           00008E   197 _TR1	=	0x008e
                           00008F   198 _TF1	=	0x008f
                           000090   199 _P1_0	=	0x0090
                           000091   200 _P1_1	=	0x0091
                           000092   201 _P1_2	=	0x0092
                           000093   202 _P1_3	=	0x0093
                           000094   203 _P1_4	=	0x0094
                           000095   204 _P1_5	=	0x0095
                           000096   205 _P1_6	=	0x0096
                           000097   206 _P1_7	=	0x0097
                           000090   207 _T2	=	0x0090
                           000091   208 _T2EX	=	0x0091
                           000098   209 _RI	=	0x0098
                           000099   210 _TI	=	0x0099
                           00009A   211 _RB8	=	0x009a
                           00009B   212 _TB8	=	0x009b
                           00009C   213 _REN	=	0x009c
                           00009D   214 _SM2	=	0x009d
                           00009E   215 _SM1	=	0x009e
                           00009F   216 _SM0	=	0x009f
                           0000A0   217 _P2_0	=	0x00a0
                           0000A1   218 _P2_1	=	0x00a1
                           0000A2   219 _P2_2	=	0x00a2
                           0000A3   220 _P2_3	=	0x00a3
                           0000A4   221 _P2_4	=	0x00a4
                           0000A5   222 _P2_5	=	0x00a5
                           0000A6   223 _P2_6	=	0x00a6
                           0000A7   224 _P2_7	=	0x00a7
                           0000A8   225 _EX0	=	0x00a8
                           0000A9   226 _ET0	=	0x00a9
                           0000AA   227 _EX1	=	0x00aa
                           0000AB   228 _ET1	=	0x00ab
                           0000AC   229 _ES	=	0x00ac
                           0000AD   230 _ET2	=	0x00ad
                           0000AF   231 _EA	=	0x00af
                           0000B0   232 _P3_0	=	0x00b0
                           0000B1   233 _P3_1	=	0x00b1
                           0000B2   234 _P3_2	=	0x00b2
                           0000B3   235 _P3_3	=	0x00b3
                           0000B4   236 _P3_4	=	0x00b4
                           0000B5   237 _P3_5	=	0x00b5
                           0000B6   238 _P3_6	=	0x00b6
                           0000B7   239 _P3_7	=	0x00b7
                           0000B0   240 _RXD	=	0x00b0
                           0000B1   241 _TXD	=	0x00b1
                           0000B2   242 _INT0	=	0x00b2
                           0000B3   243 _INT1	=	0x00b3
                           0000B4   244 _T0	=	0x00b4
                           0000B5   245 _T1	=	0x00b5
                           0000B6   246 _WR	=	0x00b6
                           0000B7   247 _RD	=	0x00b7
                           0000B8   248 _PX0	=	0x00b8
                           0000B9   249 _PT0	=	0x00b9
                           0000BA   250 _PX1	=	0x00ba
                           0000BB   251 _PT1	=	0x00bb
                           0000BC   252 _PS	=	0x00bc
                           0000BD   253 _PT2	=	0x00bd
                           0000C8   254 _T2CON_0	=	0x00c8
                           0000C9   255 _T2CON_1	=	0x00c9
                           0000CA   256 _T2CON_2	=	0x00ca
                           0000CB   257 _T2CON_3	=	0x00cb
                           0000CC   258 _T2CON_4	=	0x00cc
                           0000CD   259 _T2CON_5	=	0x00cd
                           0000CE   260 _T2CON_6	=	0x00ce
                           0000CF   261 _T2CON_7	=	0x00cf
                           0000C8   262 _CP_RL2	=	0x00c8
                           0000C9   263 _C_T2	=	0x00c9
                           0000CA   264 _TR2	=	0x00ca
                           0000CB   265 _EXEN2	=	0x00cb
                           0000CC   266 _TCLK	=	0x00cc
                           0000CD   267 _RCLK	=	0x00cd
                           0000CE   268 _EXF2	=	0x00ce
                           0000CF   269 _TF2	=	0x00cf
                           0000D0   270 _P	=	0x00d0
                           0000D1   271 _FL	=	0x00d1
                           0000D2   272 _OV	=	0x00d2
                           0000D3   273 _RS0	=	0x00d3
                           0000D4   274 _RS1	=	0x00d4
                           0000D5   275 _F0	=	0x00d5
                           0000D6   276 _AC	=	0x00d6
                           0000D7   277 _CY	=	0x00d7
                                    278 ;--------------------------------------------------------
                                    279 ; overlayable register banks
                                    280 ;--------------------------------------------------------
                                    281 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        284 	.ds 8
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable bit register bank
                                    287 ;--------------------------------------------------------
                                    288 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        289 bits:
      000000                        290 	.ds 1
                           008000   291 	b0 = bits[0]
                           008100   292 	b1 = bits[1]
                           008200   293 	b2 = bits[2]
                           008300   294 	b3 = bits[3]
                           008400   295 	b4 = bits[4]
                           008500   296 	b5 = bits[5]
                           008600   297 	b6 = bits[6]
                           008700   298 	b7 = bits[7]
                                    299 ;--------------------------------------------------------
                                    300 ; internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area DSEG    (DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable items in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 ;--------------------------------------------------------
                                    307 ; Stack segment in internal ram 
                                    308 ;--------------------------------------------------------
                                    309 	.area	SSEG
      000000                        310 __start__stack:
      000000                        311 	.ds	1
                                    312 
                                    313 ;--------------------------------------------------------
                                    314 ; indirectly addressable internal ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area ISEG    (DATA)
      000000                        317 _digits:
      000000                        318 	.ds 16
      000010                        319 _i0:
      000010                        320 	.ds 1
      000011                        321 _i1:
      000011                        322 	.ds 1
      000012                        323 _x:
      000012                        324 	.ds 2
      000014                        325 _y:
      000014                        326 	.ds 2
      000016                        327 _j:
      000016                        328 	.ds 2
      000018                        329 _c:
      000018                        330 	.ds 2
      00001A                        331 _bstep:
      00001A                        332 	.ds 1
      00001B                        333 _n:
      00001B                        334 	.ds 1
      00001C                        335 _fixed:
      00001C                        336 	.ds 1
      00001D                        337 _cycle2:
      00001D                        338 	.ds 1
      00001E                        339 _x1:
      00001E                        340 	.ds 2
      000020                        341 _y1:
      000020                        342 	.ds 2
      000022                        343 _generation:
      000022                        344 	.ds 4
      000026                        345 _busy:
      000026                        346 	.ds 4
                                    347 ;--------------------------------------------------------
                                    348 ; absolute internal ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area IABS    (ABS,DATA)
                                    351 	.area IABS    (ABS,DATA)
                                    352 ;--------------------------------------------------------
                                    353 ; bit data
                                    354 ;--------------------------------------------------------
                                    355 	.area BSEG    (BIT)
                                    356 ;--------------------------------------------------------
                                    357 ; paged external ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area PSEG    (PAG,XDATA)
                                    360 ;--------------------------------------------------------
                                    361 ; external ram data
                                    362 ;--------------------------------------------------------
                                    363 	.area XSEG    (XDATA)
      000000                        364 _iu:
      000000                        365 	.ds 9216
      002400                        366 _pu:
      002400                        367 	.ds 9216
      004800                        368 _u:
      004800                        369 	.ds 9216
      006C00                        370 _nu:
      006C00                        371 	.ds 9216
      009000                        372 _main_R_65536_165:
      009000                        373 	.ds 2
                                    374 ;--------------------------------------------------------
                                    375 ; absolute external ram data
                                    376 ;--------------------------------------------------------
                                    377 	.area XABS    (ABS,XDATA)
                                    378 ;--------------------------------------------------------
                                    379 ; external initialized ram data
                                    380 ;--------------------------------------------------------
                                    381 	.area XISEG   (XDATA)
                                    382 	.area HOME    (CODE)
                                    383 	.area GSINIT0 (CODE)
                                    384 	.area GSINIT1 (CODE)
                                    385 	.area GSINIT2 (CODE)
                                    386 	.area GSINIT3 (CODE)
                                    387 	.area GSINIT4 (CODE)
                                    388 	.area GSINIT5 (CODE)
                                    389 	.area GSINIT  (CODE)
                                    390 	.area GSFINAL (CODE)
                                    391 	.area CSEG    (CODE)
                                    392 ;--------------------------------------------------------
                                    393 ; interrupt vector 
                                    394 ;--------------------------------------------------------
                                    395 	.area HOME    (CODE)
      000000                        396 __interrupt_vect:
      000000 02r00r00         [24]  397 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  398 	ljmp	_int0
      000006                        399 	.ds	5
      00000B 32               [24]  400 	reti
      00000C                        401 	.ds	7
      000013 02r00r1A         [24]  402 	ljmp	_int1
                                    403 ;--------------------------------------------------------
                                    404 ; global & static initialisations
                                    405 ;--------------------------------------------------------
                                    406 	.area HOME    (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.area GSFINAL (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.globl __sdcc_gsinit_startup
                                    411 	.globl __sdcc_program_startup
                                    412 	.globl __start__stack
                                    413 	.globl __mcs51_genXINIT
                                    414 	.globl __mcs51_genXRAMCLEAR
                                    415 	.globl __mcs51_genRAMCLEAR
                                    416 ;------------------------------------------------------------
                                    417 ;Allocation info for local variables in function 'main'
                                    418 ;------------------------------------------------------------
                                    419 ;__2621440023              Allocated to registers 
                                    420 ;s                         Allocated to registers r5 r6 r7 
                                    421 ;__1310720013              Allocated to registers 
                                    422 ;s                         Allocated to registers r5 r6 r7 
                                    423 ;__1310720015              Allocated to registers r6 r7 
                                    424 ;a                         Allocated to registers r4 r5 
                                    425 ;__1310720017              Allocated to registers 
                                    426 ;s                         Allocated to registers r5 r6 r7 
                                    427 ;__1310720019              Allocated to registers 
                                    428 ;s                         Allocated to registers r5 r6 r7 
                                    429 ;__1310720021              Allocated to registers 
                                    430 ;s                         Allocated to registers r5 r6 r7 
                                    431 ;__2621440028              Allocated to registers 
                                    432 ;s                         Allocated to registers r5 r6 r7 
                                    433 ;__4587520032              Allocated to registers 
                                    434 ;s                         Allocated to registers r5 r6 r7 
                                    435 ;__4587520034              Allocated to registers 
                                    436 ;s                         Allocated to registers r5 r6 r7 
                                    437 ;__4587520036              Allocated to registers 
                                    438 ;s                         Allocated to registers r5 r6 r7 
                                    439 ;__3276800038              Allocated to registers 
                                    440 ;s                         Allocated to registers r5 r6 r7 
                                    441 ;__1310720040              Allocated to registers 
                                    442 ;s                         Allocated to registers r5 r6 r7 
                                    443 ;sloc0                     Allocated to stack - _bp +1
                                    444 ;sloc1                     Allocated to stack - _bp +2
                                    445 ;sloc2                     Allocated to stack - _bp +4
                                    446 ;sloc3                     Allocated to stack - _bp +6
                                    447 ;sloc4                     Allocated to stack - _bp +8
                                    448 ;sloc5                     Allocated to stack - _bp +10
                                    449 ;sloc6                     Allocated to stack - _bp +12
                                    450 ;R                         Allocated with name '_main_R_65536_165'
                                    451 ;------------------------------------------------------------
                                    452 ;	life.c:222: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90r90r00         [24]  453 	mov	dptr,#_main_R_65536_165
      000003 74 FE            [12]  454 	mov	a,#0xfe
      000005 F0               [24]  455 	movx	@dptr,a
      000006 04               [12]  456 	inc	a
      000007 A3               [24]  457 	inc	dptr
      000008 F0               [24]  458 	movx	@dptr,a
                                    459 ;	life.c:26: __idata static const char digits[16] = {
      000009 78r00            [12]  460 	mov	r0,#_digits
      00000B 76 30            [12]  461 	mov	@r0,#0x30
      00000D 78r01            [12]  462 	mov	r0,#(_digits + 0x0001)
      00000F 76 31            [12]  463 	mov	@r0,#0x31
      000011 78r02            [12]  464 	mov	r0,#(_digits + 0x0002)
      000013 76 32            [12]  465 	mov	@r0,#0x32
      000015 78r03            [12]  466 	mov	r0,#(_digits + 0x0003)
      000017 76 33            [12]  467 	mov	@r0,#0x33
      000019 78r04            [12]  468 	mov	r0,#(_digits + 0x0004)
      00001B 76 34            [12]  469 	mov	@r0,#0x34
      00001D 78r05            [12]  470 	mov	r0,#(_digits + 0x0005)
      00001F 76 35            [12]  471 	mov	@r0,#0x35
      000021 78r06            [12]  472 	mov	r0,#(_digits + 0x0006)
      000023 76 36            [12]  473 	mov	@r0,#0x36
      000025 78r07            [12]  474 	mov	r0,#(_digits + 0x0007)
      000027 76 37            [12]  475 	mov	@r0,#0x37
      000029 78r08            [12]  476 	mov	r0,#(_digits + 0x0008)
      00002B 76 38            [12]  477 	mov	@r0,#0x38
      00002D 78r09            [12]  478 	mov	r0,#(_digits + 0x0009)
      00002F 76 39            [12]  479 	mov	@r0,#0x39
      000031 78r0A            [12]  480 	mov	r0,#(_digits + 0x000a)
      000033 76 41            [12]  481 	mov	@r0,#0x41
      000035 78r0B            [12]  482 	mov	r0,#(_digits + 0x000b)
      000037 76 42            [12]  483 	mov	@r0,#0x42
      000039 78r0C            [12]  484 	mov	r0,#(_digits + 0x000c)
      00003B 76 43            [12]  485 	mov	@r0,#0x43
      00003D 78r0D            [12]  486 	mov	r0,#(_digits + 0x000d)
      00003F 76 44            [12]  487 	mov	@r0,#0x44
      000041 78r0E            [12]  488 	mov	r0,#(_digits + 0x000e)
      000043 76 45            [12]  489 	mov	@r0,#0x45
      000045 78r0F            [12]  490 	mov	r0,#(_digits + 0x000f)
      000047 76 46            [12]  491 	mov	@r0,#0x46
                                    492 ;	life.c:174: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000049 78r26            [12]  493 	mov	r0,#_busy
      00004B 76 5C            [12]  494 	mov	@r0,#0x5c
      00004D 78r27            [12]  495 	mov	r0,#(_busy + 0x0001)
      00004F 76 7C            [12]  496 	mov	@r0,#0x7c
      000051 78r28            [12]  497 	mov	r0,#(_busy + 0x0002)
      000053 76 2F            [12]  498 	mov	@r0,#0x2f
      000055 78r29            [12]  499 	mov	r0,#(_busy + 0x0003)
      000057 76 2D            [12]  500 	mov	@r0,#0x2d
                                    501 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  502 	ljmp	__sdcc_program_startup
                                    503 ;--------------------------------------------------------
                                    504 ; Home
                                    505 ;--------------------------------------------------------
                                    506 	.area HOME    (CODE)
                                    507 	.area HOME    (CODE)
      000016                        508 __sdcc_program_startup:
      000016 02r02r19         [24]  509 	ljmp	_main
                                    510 ;	return from main will return to caller
                                    511 ;--------------------------------------------------------
                                    512 ; code
                                    513 ;--------------------------------------------------------
                                    514 	.area CSEG    (CODE)
                                    515 ;------------------------------------------------------------
                                    516 ;Allocation info for local variables in function 'putchar'
                                    517 ;------------------------------------------------------------
                                    518 ;c                         Allocated to registers 
                                    519 ;------------------------------------------------------------
                                    520 ;	life.c:9: int putchar(int c) __naked {
                                    521 ;	-----------------------------------------
                                    522 ;	 function putchar
                                    523 ;	-----------------------------------------
      000000                        524 _putchar:
                                    525 ;	naked function: no prologue.
                                    526 ;	life.c:14: __endasm;
      000000 E5 82            [12]  527 	mov	a, dpl
      000002 02 00 30         [24]  528 	ljmp	0x0030
                                    529 ;	life.c:15: }
                                    530 ;	naked function: no epilogue.
                                    531 ;------------------------------------------------------------
                                    532 ;Allocation info for local variables in function 'getchar'
                                    533 ;------------------------------------------------------------
                                    534 ;	life.c:17: int getchar(void) __naked {
                                    535 ;	-----------------------------------------
                                    536 ;	 function getchar
                                    537 ;	-----------------------------------------
      000005                        538 _getchar:
                                    539 ;	naked function: no prologue.
                                    540 ;	life.c:23: __endasm;
      000005 12 00 32         [24]  541 	lcall	0x0032
      000008 F5 82            [12]  542 	mov	dpl, a
      00000A 75 83 00         [24]  543 	mov	dph, #0
      00000D 22               [24]  544 	ret
                                    545 ;	life.c:24: }
                                    546 ;	naked function: no epilogue.
                                    547 ;------------------------------------------------------------
                                    548 ;Allocation info for local variables in function 'int0'
                                    549 ;------------------------------------------------------------
                                    550 ;	life.c:55: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    551 ;	-----------------------------------------
                                    552 ;	 function int0
                                    553 ;	-----------------------------------------
      00000E                        554 _int0:
                           00000F   555 	ar7 = 0x0f
                           00000E   556 	ar6 = 0x0e
                           00000D   557 	ar5 = 0x0d
                           00000C   558 	ar4 = 0x0c
                           00000B   559 	ar3 = 0x0b
                           00000A   560 	ar2 = 0x0a
                           000009   561 	ar1 = 0x09
                           000008   562 	ar0 = 0x08
      00000E C0 D0            [24]  563 	push	psw
      000010 75 D0 08         [24]  564 	mov	psw,#0x08
                                    565 ;	life.c:56: i0 = 1;
      000013 78r10            [12]  566 	mov	r0,#_i0
      000015 76 01            [12]  567 	mov	@r0,#0x01
                                    568 ;	life.c:57: }
      000017 D0 D0            [24]  569 	pop	psw
      000019 32               [24]  570 	reti
                                    571 ;	eliminated unneeded push/pop dpl
                                    572 ;	eliminated unneeded push/pop dph
                                    573 ;	eliminated unneeded push/pop b
                                    574 ;	eliminated unneeded push/pop acc
                                    575 ;------------------------------------------------------------
                                    576 ;Allocation info for local variables in function 'int1'
                                    577 ;------------------------------------------------------------
                                    578 ;	life.c:59: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    579 ;	-----------------------------------------
                                    580 ;	 function int1
                                    581 ;	-----------------------------------------
      00001A                        582 _int1:
      00001A C0 D0            [24]  583 	push	psw
      00001C 75 D0 08         [24]  584 	mov	psw,#0x08
                                    585 ;	life.c:60: i1 = 1;
      00001F 78r11            [12]  586 	mov	r0,#_i1
      000021 76 01            [12]  587 	mov	@r0,#0x01
                                    588 ;	life.c:61: }
      000023 D0 D0            [24]  589 	pop	psw
      000025 32               [24]  590 	reti
                                    591 ;	eliminated unneeded push/pop dpl
                                    592 ;	eliminated unneeded push/pop dph
                                    593 ;	eliminated unneeded push/pop b
                                    594 ;	eliminated unneeded push/pop acc
                                    595 ;------------------------------------------------------------
                                    596 ;Allocation info for local variables in function 'show'
                                    597 ;------------------------------------------------------------
                                    598 ;hdr                       Allocated to registers r7 
                                    599 ;__1966080005              Allocated to registers 
                                    600 ;s                         Allocated to registers r5 r6 r7 
                                    601 ;__1310720001              Allocated to registers r6 r7 
                                    602 ;a                         Allocated to registers 
                                    603 ;__1310720003              Allocated to registers r6 r7 
                                    604 ;a                         Allocated to registers 
                                    605 ;__1966080008              Allocated to registers 
                                    606 ;s                         Allocated to registers r5 r6 r7 
                                    607 ;__2621440011              Allocated to registers 
                                    608 ;s                         Allocated to registers r5 r6 r7 
                                    609 ;------------------------------------------------------------
                                    610 ;	life.c:97: void show(char hdr) {
                                    611 ;	-----------------------------------------
                                    612 ;	 function show
                                    613 ;	-----------------------------------------
      000026                        614 _show:
                           000007   615 	ar7 = 0x07
                           000006   616 	ar6 = 0x06
                           000005   617 	ar5 = 0x05
                           000004   618 	ar4 = 0x04
                           000003   619 	ar3 = 0x03
                           000002   620 	ar2 = 0x02
                           000001   621 	ar1 = 0x01
                           000000   622 	ar0 = 0x00
                                    623 ;	life.c:98: if (hdr) {
      000026 E5 82            [12]  624 	mov	a,dpl
      000028 FF               [12]  625 	mov	r7,a
      000029 70 03            [24]  626 	jnz	00190$
      00002B 02r01r7E         [24]  627 	ljmp	00102$
      00002E                        628 00190$:
                                    629 ;	life.c:99: printstr("\033[2J\033[mGEN ");
      00002E 7Dr00            [12]  630 	mov	r5,#___str_0
      000030 7Es00            [12]  631 	mov	r6,#(___str_0 >> 8)
      000032 7F 80            [12]  632 	mov	r7,#0x80
                                    633 ;	life.c:50: return;
      000034                        634 00121$:
                                    635 ;	life.c:48: for (; *s; s++) putchar(*s);
      000034 8D 82            [24]  636 	mov	dpl,r5
      000036 8E 83            [24]  637 	mov	dph,r6
      000038 8F F0            [24]  638 	mov	b,r7
      00003A 12r00r00         [24]  639 	lcall	__gptrget
      00003D FC               [12]  640 	mov	r4,a
      00003E 60 10            [24]  641 	jz	00109$
      000040 7B 00            [12]  642 	mov	r3,#0x00
      000042 8C 82            [24]  643 	mov	dpl,r4
      000044 8B 83            [24]  644 	mov	dph,r3
      000046 12r00r00         [24]  645 	lcall	_putchar
      000049 0D               [12]  646 	inc	r5
                                    647 ;	life.c:99: printstr("\033[2J\033[mGEN ");
      00004A BD 00 E7         [24]  648 	cjne	r5,#0x00,00121$
      00004D 0E               [12]  649 	inc	r6
      00004E 80 E4            [24]  650 	sjmp	00121$
      000050                        651 00109$:
                                    652 ;	life.c:91: print16x(generation[1]);
      000050 78r24            [12]  653 	mov	r0,#(_generation + 0x0002)
      000052 86 06            [24]  654 	mov	ar6,@r0
      000054 08               [12]  655 	inc	r0
                                    656 ;	life.c:39: putchar(digits[(a >> 12) & 0xf]);
      000055 E6               [12]  657 	mov	a,@r0
      000056 FF               [12]  658 	mov	r7,a
      000057 C4               [12]  659 	swap	a
      000058 54 0F            [12]  660 	anl	a,#0x0f
      00005A 30 E3 02         [24]  661 	jnb	acc.3,00193$
      00005D 44 F0            [12]  662 	orl	a,#0xf0
      00005F                        663 00193$:
      00005F FC               [12]  664 	mov	r4,a
      000060 33               [12]  665 	rlc	a
      000061 95 E0            [12]  666 	subb	a,acc
      000063 53 04 0F         [24]  667 	anl	ar4,#0x0f
      000066 EC               [12]  668 	mov	a,r4
      000067 24r00            [12]  669 	add	a,#_digits
      000069 F9               [12]  670 	mov	r1,a
      00006A 87 05            [24]  671 	mov	ar5,@r1
      00006C 7C 00            [12]  672 	mov	r4,#0x00
      00006E 8D 82            [24]  673 	mov	dpl,r5
      000070 8C 83            [24]  674 	mov	dph,r4
      000072 12r00r00         [24]  675 	lcall	_putchar
                                    676 ;	life.c:40: putchar(digits[(a >> 8) & 0xf]);
      000075 8F 05            [24]  677 	mov	ar5,r7
      000077 53 05 0F         [24]  678 	anl	ar5,#0x0f
      00007A ED               [12]  679 	mov	a,r5
      00007B 24r00            [12]  680 	add	a,#_digits
      00007D F9               [12]  681 	mov	r1,a
      00007E 87 05            [24]  682 	mov	ar5,@r1
      000080 7C 00            [12]  683 	mov	r4,#0x00
      000082 8D 82            [24]  684 	mov	dpl,r5
      000084 8C 83            [24]  685 	mov	dph,r4
      000086 12r00r00         [24]  686 	lcall	_putchar
                                    687 ;	life.c:41: putchar(digits[(a >> 4) & 0xf]);
      000089 8E 04            [24]  688 	mov	ar4,r6
      00008B EF               [12]  689 	mov	a,r7
      00008C C4               [12]  690 	swap	a
      00008D CC               [12]  691 	xch	a,r4
      00008E C4               [12]  692 	swap	a
      00008F 54 0F            [12]  693 	anl	a,#0x0f
      000091 6C               [12]  694 	xrl	a,r4
      000092 CC               [12]  695 	xch	a,r4
      000093 54 0F            [12]  696 	anl	a,#0x0f
      000095 CC               [12]  697 	xch	a,r4
      000096 6C               [12]  698 	xrl	a,r4
      000097 CC               [12]  699 	xch	a,r4
      000098 30 E3 02         [24]  700 	jnb	acc.3,00194$
      00009B 44 F0            [12]  701 	orl	a,#0xf0
      00009D                        702 00194$:
      00009D 53 04 0F         [24]  703 	anl	ar4,#0x0f
      0000A0 EC               [12]  704 	mov	a,r4
      0000A1 24r00            [12]  705 	add	a,#_digits
      0000A3 F9               [12]  706 	mov	r1,a
      0000A4 87 05            [24]  707 	mov	ar5,@r1
      0000A6 7C 00            [12]  708 	mov	r4,#0x00
      0000A8 8D 82            [24]  709 	mov	dpl,r5
      0000AA 8C 83            [24]  710 	mov	dph,r4
      0000AC 12r00r00         [24]  711 	lcall	_putchar
                                    712 ;	life.c:42: putchar(digits[a & 0xf]);
      0000AF 53 06 0F         [24]  713 	anl	ar6,#0x0f
      0000B2 EE               [12]  714 	mov	a,r6
      0000B3 24r00            [12]  715 	add	a,#_digits
      0000B5 F9               [12]  716 	mov	r1,a
      0000B6 87 07            [24]  717 	mov	ar7,@r1
      0000B8 7E 00            [12]  718 	mov	r6,#0x00
      0000BA 8F 82            [24]  719 	mov	dpl,r7
      0000BC 8E 83            [24]  720 	mov	dph,r6
      0000BE 12r00r00         [24]  721 	lcall	_putchar
                                    722 ;	life.c:92: print16x(generation[0]);
      0000C1 78r22            [12]  723 	mov	r0,#_generation
      0000C3 86 06            [24]  724 	mov	ar6,@r0
      0000C5 08               [12]  725 	inc	r0
                                    726 ;	life.c:39: putchar(digits[(a >> 12) & 0xf]);
      0000C6 E6               [12]  727 	mov	a,@r0
      0000C7 FF               [12]  728 	mov	r7,a
      0000C8 C4               [12]  729 	swap	a
      0000C9 54 0F            [12]  730 	anl	a,#0x0f
      0000CB 30 E3 02         [24]  731 	jnb	acc.3,00195$
      0000CE 44 F0            [12]  732 	orl	a,#0xf0
      0000D0                        733 00195$:
      0000D0 FC               [12]  734 	mov	r4,a
      0000D1 33               [12]  735 	rlc	a
      0000D2 95 E0            [12]  736 	subb	a,acc
      0000D4 53 04 0F         [24]  737 	anl	ar4,#0x0f
      0000D7 EC               [12]  738 	mov	a,r4
      0000D8 24r00            [12]  739 	add	a,#_digits
      0000DA F9               [12]  740 	mov	r1,a
      0000DB 87 05            [24]  741 	mov	ar5,@r1
      0000DD 7C 00            [12]  742 	mov	r4,#0x00
      0000DF 8D 82            [24]  743 	mov	dpl,r5
      0000E1 8C 83            [24]  744 	mov	dph,r4
      0000E3 12r00r00         [24]  745 	lcall	_putchar
                                    746 ;	life.c:40: putchar(digits[(a >> 8) & 0xf]);
      0000E6 8F 05            [24]  747 	mov	ar5,r7
      0000E8 53 05 0F         [24]  748 	anl	ar5,#0x0f
      0000EB ED               [12]  749 	mov	a,r5
      0000EC 24r00            [12]  750 	add	a,#_digits
      0000EE F9               [12]  751 	mov	r1,a
      0000EF 87 05            [24]  752 	mov	ar5,@r1
      0000F1 7C 00            [12]  753 	mov	r4,#0x00
      0000F3 8D 82            [24]  754 	mov	dpl,r5
      0000F5 8C 83            [24]  755 	mov	dph,r4
      0000F7 12r00r00         [24]  756 	lcall	_putchar
                                    757 ;	life.c:41: putchar(digits[(a >> 4) & 0xf]);
      0000FA 8E 04            [24]  758 	mov	ar4,r6
      0000FC EF               [12]  759 	mov	a,r7
      0000FD C4               [12]  760 	swap	a
      0000FE CC               [12]  761 	xch	a,r4
      0000FF C4               [12]  762 	swap	a
      000100 54 0F            [12]  763 	anl	a,#0x0f
      000102 6C               [12]  764 	xrl	a,r4
      000103 CC               [12]  765 	xch	a,r4
      000104 54 0F            [12]  766 	anl	a,#0x0f
      000106 CC               [12]  767 	xch	a,r4
      000107 6C               [12]  768 	xrl	a,r4
      000108 CC               [12]  769 	xch	a,r4
      000109 30 E3 02         [24]  770 	jnb	acc.3,00196$
      00010C 44 F0            [12]  771 	orl	a,#0xf0
      00010E                        772 00196$:
      00010E 53 04 0F         [24]  773 	anl	ar4,#0x0f
      000111 EC               [12]  774 	mov	a,r4
      000112 24r00            [12]  775 	add	a,#_digits
      000114 F9               [12]  776 	mov	r1,a
      000115 87 05            [24]  777 	mov	ar5,@r1
      000117 7C 00            [12]  778 	mov	r4,#0x00
      000119 8D 82            [24]  779 	mov	dpl,r5
      00011B 8C 83            [24]  780 	mov	dph,r4
      00011D 12r00r00         [24]  781 	lcall	_putchar
                                    782 ;	life.c:42: putchar(digits[a & 0xf]);
      000120 53 06 0F         [24]  783 	anl	ar6,#0x0f
      000123 EE               [12]  784 	mov	a,r6
      000124 24r00            [12]  785 	add	a,#_digits
      000126 F9               [12]  786 	mov	r1,a
      000127 87 07            [24]  787 	mov	ar7,@r1
      000129 7E 00            [12]  788 	mov	r6,#0x00
      00012B 8F 82            [24]  789 	mov	dpl,r7
      00012D 8E 83            [24]  790 	mov	dph,r6
      00012F 12r00r00         [24]  791 	lcall	_putchar
                                    792 ;	life.c:101: printstr("\r\n");
      000132 7Dr0C            [12]  793 	mov	r5,#___str_1
      000134 7Es00            [12]  794 	mov	r6,#(___str_1 >> 8)
      000136 7F 80            [12]  795 	mov	r7,#0x80
                                    796 ;	life.c:50: return;
      000138                        797 00124$:
                                    798 ;	life.c:48: for (; *s; s++) putchar(*s);
      000138 8D 82            [24]  799 	mov	dpl,r5
      00013A 8E 83            [24]  800 	mov	dph,r6
      00013C 8F F0            [24]  801 	mov	b,r7
      00013E 12r00r00         [24]  802 	lcall	__gptrget
      000141 FC               [12]  803 	mov	r4,a
      000142 60 10            [24]  804 	jz	00114$
      000144 7B 00            [12]  805 	mov	r3,#0x00
      000146 8C 82            [24]  806 	mov	dpl,r4
      000148 8B 83            [24]  807 	mov	dph,r3
      00014A 12r00r00         [24]  808 	lcall	_putchar
      00014D 0D               [12]  809 	inc	r5
                                    810 ;	life.c:101: printstr("\r\n");
      00014E BD 00 E7         [24]  811 	cjne	r5,#0x00,00124$
      000151 0E               [12]  812 	inc	r6
      000152 80 E4            [24]  813 	sjmp	00124$
      000154                        814 00114$:
                                    815 ;	life.c:84: generation[0]++;
      000154 78r22            [12]  816 	mov	r0,#_generation
      000156 86 06            [24]  817 	mov	ar6,@r0
      000158 08               [12]  818 	inc	r0
      000159 86 07            [24]  819 	mov	ar7,@r0
      00015B 0E               [12]  820 	inc	r6
      00015C BE 00 01         [24]  821 	cjne	r6,#0x00,00199$
      00015F 0F               [12]  822 	inc	r7
      000160                        823 00199$:
      000160 78r22            [12]  824 	mov	r0,#_generation
      000162 A6 06            [24]  825 	mov	@r0,ar6
      000164 08               [12]  826 	inc	r0
      000165 A6 07            [24]  827 	mov	@r0,ar7
                                    828 ;	life.c:85: if (!generation[0]) generation[1]++;
      000167 EE               [12]  829 	mov	a,r6
      000168 4F               [12]  830 	orl	a,r7
      000169 70 13            [24]  831 	jnz	00102$
      00016B 78r24            [12]  832 	mov	r0,#(_generation + 0x0002)
      00016D 86 06            [24]  833 	mov	ar6,@r0
      00016F 08               [12]  834 	inc	r0
      000170 86 07            [24]  835 	mov	ar7,@r0
      000172 0E               [12]  836 	inc	r6
      000173 BE 00 01         [24]  837 	cjne	r6,#0x00,00201$
      000176 0F               [12]  838 	inc	r7
      000177                        839 00201$:
      000177 78r24            [12]  840 	mov	r0,#(_generation + 0x0002)
      000179 A6 06            [24]  841 	mov	@r0,ar6
      00017B 08               [12]  842 	inc	r0
      00017C A6 07            [24]  843 	mov	@r0,ar7
                                    844 ;	life.c:102: updategen();
      00017E                        845 00102$:
                                    846 ;	life.c:105: for (x = 0; x < W; x++) {
      00017E 78r12            [12]  847 	mov	r0,#_x
      000180 E4               [12]  848 	clr	a
      000181 F6               [12]  849 	mov	@r0,a
      000182 08               [12]  850 	inc	r0
      000183 F6               [12]  851 	mov	@r0,a
      000184                        852 00131$:
                                    853 ;	life.c:106: for (y = 0; y < H; y++)
      000184 78r14            [12]  854 	mov	r0,#_y
      000186 E4               [12]  855 	clr	a
      000187 F6               [12]  856 	mov	@r0,a
      000188 08               [12]  857 	inc	r0
      000189 F6               [12]  858 	mov	@r0,a
      00018A                        859 00126$:
                                    860 ;	life.c:107: if (u[A2D(W, y, x)]) putchar('1');
      00018A 78r14            [12]  861 	mov	r0,#_y
      00018C E6               [12]  862 	mov	a,@r0
      00018D C0 E0            [24]  863 	push	acc
      00018F 08               [12]  864 	inc	r0
      000190 E6               [12]  865 	mov	a,@r0
      000191 C0 E0            [24]  866 	push	acc
      000193 90 00 30         [24]  867 	mov	dptr,#0x0030
      000196 12r00r00         [24]  868 	lcall	__mulint
      000199 AE 82            [24]  869 	mov	r6,dpl
      00019B AF 83            [24]  870 	mov	r7,dph
      00019D 15 81            [12]  871 	dec	sp
      00019F 15 81            [12]  872 	dec	sp
      0001A1 78r12            [12]  873 	mov	r0,#_x
      0001A3 E6               [12]  874 	mov	a,@r0
      0001A4 2E               [12]  875 	add	a,r6
      0001A5 FE               [12]  876 	mov	r6,a
      0001A6 08               [12]  877 	inc	r0
      0001A7 E6               [12]  878 	mov	a,@r0
      0001A8 3F               [12]  879 	addc	a,r7
      0001A9 FF               [12]  880 	mov	r7,a
      0001AA EE               [12]  881 	mov	a,r6
      0001AB 24r00            [12]  882 	add	a,#_u
      0001AD FE               [12]  883 	mov	r6,a
      0001AE EF               [12]  884 	mov	a,r7
      0001AF 34s48            [12]  885 	addc	a,#(_u >> 8)
      0001B1 FF               [12]  886 	mov	r7,a
      0001B2 8E 82            [24]  887 	mov	dpl,r6
      0001B4 8F 83            [24]  888 	mov	dph,r7
      0001B6 E0               [24]  889 	movx	a,@dptr
      0001B7 60 08            [24]  890 	jz	00104$
      0001B9 90 00 31         [24]  891 	mov	dptr,#0x0031
      0001BC 12r00r00         [24]  892 	lcall	_putchar
      0001BF 80 06            [24]  893 	sjmp	00127$
      0001C1                        894 00104$:
                                    895 ;	life.c:108: else putchar('0');
      0001C1 90 00 30         [24]  896 	mov	dptr,#0x0030
      0001C4 12r00r00         [24]  897 	lcall	_putchar
      0001C7                        898 00127$:
                                    899 ;	life.c:106: for (y = 0; y < H; y++)
      0001C7 78r14            [12]  900 	mov	r0,#_y
      0001C9 06               [12]  901 	inc	@r0
      0001CA B6 00 02         [24]  902 	cjne	@r0,#0x00,00203$
      0001CD 08               [12]  903 	inc	r0
      0001CE 06               [12]  904 	inc	@r0
      0001CF                        905 00203$:
      0001CF 78r14            [12]  906 	mov	r0,#_y
      0001D1 C3               [12]  907 	clr	c
      0001D2 E6               [12]  908 	mov	a,@r0
      0001D3 94 C0            [12]  909 	subb	a,#0xc0
      0001D5 08               [12]  910 	inc	r0
      0001D6 E6               [12]  911 	mov	a,@r0
      0001D7 64 80            [12]  912 	xrl	a,#0x80
      0001D9 94 80            [12]  913 	subb	a,#0x80
      0001DB 40 AD            [24]  914 	jc	00126$
                                    915 ;	life.c:109: printstr("\r\n");
      0001DD 7Dr0C            [12]  916 	mov	r5,#___str_1
      0001DF 7Es00            [12]  917 	mov	r6,#(___str_1 >> 8)
      0001E1 7F 80            [12]  918 	mov	r7,#0x80
                                    919 ;	life.c:50: return;
      0001E3                        920 00129$:
                                    921 ;	life.c:48: for (; *s; s++) putchar(*s);
      0001E3 8D 82            [24]  922 	mov	dpl,r5
      0001E5 8E 83            [24]  923 	mov	dph,r6
      0001E7 8F F0            [24]  924 	mov	b,r7
      0001E9 12r00r00         [24]  925 	lcall	__gptrget
      0001EC FC               [12]  926 	mov	r4,a
      0001ED 60 10            [24]  927 	jz	00119$
      0001EF 7B 00            [12]  928 	mov	r3,#0x00
      0001F1 8C 82            [24]  929 	mov	dpl,r4
      0001F3 8B 83            [24]  930 	mov	dph,r3
      0001F5 12r00r00         [24]  931 	lcall	_putchar
      0001F8 0D               [12]  932 	inc	r5
                                    933 ;	life.c:109: printstr("\r\n");
      0001F9 BD 00 E7         [24]  934 	cjne	r5,#0x00,00129$
      0001FC 0E               [12]  935 	inc	r6
      0001FD 80 E4            [24]  936 	sjmp	00129$
      0001FF                        937 00119$:
                                    938 ;	life.c:105: for (x = 0; x < W; x++) {
      0001FF 78r12            [12]  939 	mov	r0,#_x
      000201 06               [12]  940 	inc	@r0
      000202 B6 00 02         [24]  941 	cjne	@r0,#0x00,00207$
      000205 08               [12]  942 	inc	r0
      000206 06               [12]  943 	inc	@r0
      000207                        944 00207$:
      000207 78r12            [12]  945 	mov	r0,#_x
      000209 C3               [12]  946 	clr	c
      00020A E6               [12]  947 	mov	a,@r0
      00020B 94 30            [12]  948 	subb	a,#0x30
      00020D 08               [12]  949 	inc	r0
      00020E E6               [12]  950 	mov	a,@r0
      00020F 64 80            [12]  951 	xrl	a,#0x80
      000211 94 80            [12]  952 	subb	a,#0x80
      000213 50 03            [24]  953 	jnc	00208$
      000215 02r01r84         [24]  954 	ljmp	00131$
      000218                        955 00208$:
                                    956 ;	life.c:112: return;
                                    957 ;	life.c:113: }
      000218 22               [24]  958 	ret
                                    959 ;------------------------------------------------------------
                                    960 ;Allocation info for local variables in function 'main'
                                    961 ;------------------------------------------------------------
                                    962 ;__2621440023              Allocated to registers 
                                    963 ;s                         Allocated to registers r5 r6 r7 
                                    964 ;__1310720013              Allocated to registers 
                                    965 ;s                         Allocated to registers r5 r6 r7 
                                    966 ;__1310720015              Allocated to registers r6 r7 
                                    967 ;a                         Allocated to registers r4 r5 
                                    968 ;__1310720017              Allocated to registers 
                                    969 ;s                         Allocated to registers r5 r6 r7 
                                    970 ;__1310720019              Allocated to registers 
                                    971 ;s                         Allocated to registers r5 r6 r7 
                                    972 ;__1310720021              Allocated to registers 
                                    973 ;s                         Allocated to registers r5 r6 r7 
                                    974 ;__2621440028              Allocated to registers 
                                    975 ;s                         Allocated to registers r5 r6 r7 
                                    976 ;__4587520032              Allocated to registers 
                                    977 ;s                         Allocated to registers r5 r6 r7 
                                    978 ;__4587520034              Allocated to registers 
                                    979 ;s                         Allocated to registers r5 r6 r7 
                                    980 ;__4587520036              Allocated to registers 
                                    981 ;s                         Allocated to registers r5 r6 r7 
                                    982 ;__3276800038              Allocated to registers 
                                    983 ;s                         Allocated to registers r5 r6 r7 
                                    984 ;__1310720040              Allocated to registers 
                                    985 ;s                         Allocated to registers r5 r6 r7 
                                    986 ;sloc0                     Allocated to stack - _bp +1
                                    987 ;sloc1                     Allocated to stack - _bp +2
                                    988 ;sloc2                     Allocated to stack - _bp +4
                                    989 ;sloc3                     Allocated to stack - _bp +6
                                    990 ;sloc4                     Allocated to stack - _bp +8
                                    991 ;sloc5                     Allocated to stack - _bp +10
                                    992 ;sloc6                     Allocated to stack - _bp +12
                                    993 ;R                         Allocated with name '_main_R_65536_165'
                                    994 ;------------------------------------------------------------
                                    995 ;	life.c:221: void main(void) {
                                    996 ;	-----------------------------------------
                                    997 ;	 function main
                                    998 ;	-----------------------------------------
      000219                        999 _main:
      000219 C0*00            [24] 1000 	push	_bp
      00021B E5 81            [12] 1001 	mov	a,sp
      00021D F5*00            [12] 1002 	mov	_bp,a
      00021F 24 0D            [12] 1003 	add	a,#0x0d
      000221 F5 81            [12] 1004 	mov	sp,a
                                   1005 ;	life.c:224: srand(*R);
      000223 90r90r00         [24] 1006 	mov	dptr,#_main_R_65536_165
      000226 E0               [24] 1007 	movx	a,@dptr
      000227 FE               [12] 1008 	mov	r6,a
      000228 A3               [24] 1009 	inc	dptr
      000229 E0               [24] 1010 	movx	a,@dptr
      00022A FF               [12] 1011 	mov	r7,a
      00022B 8E 82            [24] 1012 	mov	dpl,r6
      00022D 8F 83            [24] 1013 	mov	dph,r7
      00022F E0               [24] 1014 	movx	a,@dptr
      000230 FE               [12] 1015 	mov	r6,a
      000231 A3               [24] 1016 	inc	dptr
      000232 E0               [24] 1017 	movx	a,@dptr
      000233 FF               [12] 1018 	mov	r7,a
      000234 8E 82            [24] 1019 	mov	dpl,r6
      000236 8F 83            [24] 1020 	mov	dph,r7
      000238 12r00r00         [24] 1021 	lcall	_srand
                                   1022 ;	life.c:226: IT0 = 1;
                                   1023 ;	assignBit
      00023B D2 88            [12] 1024 	setb	_IT0
                                   1025 ;	life.c:227: IT1 = 1;
                                   1026 ;	assignBit
      00023D D2 8A            [12] 1027 	setb	_IT1
                                   1028 ;	life.c:228: EX0 = 1;
                                   1029 ;	assignBit
      00023F D2 A8            [12] 1030 	setb	_EX0
                                   1031 ;	life.c:229: EX1 = 1;
                                   1032 ;	assignBit
      000241 D2 AA            [12] 1033 	setb	_EX1
                                   1034 ;	life.c:230: EA = 1;
                                   1035 ;	assignBit
      000243 D2 AF            [12] 1036 	setb	_EA
                                   1037 ;	life.c:232: for (i0 = 0; !i0; ) {	
      000245 78r10            [12] 1038 	mov	r0,#_i0
      000247 76 00            [12] 1039 	mov	@r0,#0x00
      000249                       1040 00246$:
                                   1041 ;	life.c:233: printstr("\033[2J\033[?25l\033[mLIFE INIT T L R P\r\n");
      000249 7Dr29            [12] 1042 	mov	r5,#___str_5
      00024B 7Es00            [12] 1043 	mov	r6,#(___str_5 >> 8)
      00024D 7F 80            [12] 1044 	mov	r7,#0x80
                                   1045 ;	life.c:50: return;
      00024F                       1046 00202$:
                                   1047 ;	life.c:48: for (; *s; s++) putchar(*s);
      00024F 8D 82            [24] 1048 	mov	dpl,r5
      000251 8E 83            [24] 1049 	mov	dph,r6
      000253 8F F0            [24] 1050 	mov	b,r7
      000255 12r00r00         [24] 1051 	lcall	__gptrget
      000258 FC               [12] 1052 	mov	r4,a
      000259 60 10            [24] 1053 	jz	00110$
      00025B 7B 00            [12] 1054 	mov	r3,#0x00
      00025D 8C 82            [24] 1055 	mov	dpl,r4
      00025F 8B 83            [24] 1056 	mov	dph,r3
      000261 12r00r00         [24] 1057 	lcall	_putchar
      000264 0D               [12] 1058 	inc	r5
                                   1059 ;	life.c:234: while (1) {
      000265 BD 00 E7         [24] 1060 	cjne	r5,#0x00,00202$
      000268 0E               [12] 1061 	inc	r6
      000269 80 E4            [24] 1062 	sjmp	00202$
      00026B                       1063 00110$:
                                   1064 ;	life.c:235: c = toupper(getchar());
      00026B 12r00r05         [24] 1065 	lcall	_getchar
      00026E 12r00r00         [24] 1066 	lcall	_toupper
      000271 AE 82            [24] 1067 	mov	r6,dpl
      000273 AF 83            [24] 1068 	mov	r7,dph
      000275 78r18            [12] 1069 	mov	r0,#_c
      000277 A6 06            [24] 1070 	mov	@r0,ar6
      000279 08               [12] 1071 	inc	r0
      00027A A6 07            [24] 1072 	mov	@r0,ar7
                                   1073 ;	life.c:236: if (i0 || (c == (int)'T')) goto terminate;
      00027C 78r10            [12] 1074 	mov	r0,#_i0
      00027E E6               [12] 1075 	mov	a,@r0
      00027F 60 03            [24] 1076 	jz	00516$
      000281 02r0ArC7         [24] 1077 	ljmp	00142$
      000284                       1078 00516$:
      000284 BE 54 06         [24] 1079 	cjne	r6,#0x54,00517$
      000287 BF 00 03         [24] 1080 	cjne	r7,#0x00,00517$
      00028A 02r0ArC7         [24] 1081 	ljmp	00142$
      00028D                       1082 00517$:
                                   1083 ;	life.c:237: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      00028D BE 4C 05         [24] 1084 	cjne	r6,#0x4c,00518$
      000290 BF 00 02         [24] 1085 	cjne	r7,#0x00,00518$
      000293 80 0E            [24] 1086 	sjmp	00291$
      000295                       1087 00518$:
      000295 BE 52 05         [24] 1088 	cjne	r6,#0x52,00519$
      000298 BF 00 02         [24] 1089 	cjne	r7,#0x00,00519$
      00029B 80 06            [24] 1090 	sjmp	00291$
      00029D                       1091 00519$:
      00029D BE 50 CB         [24] 1092 	cjne	r6,#0x50,00110$
      0002A0 BF 00 C8         [24] 1093 	cjne	r7,#0x00,00110$
                                   1094 ;	life.c:240: reload:
      0002A3                       1095 00291$:
      0002A3                       1096 00112$:
                                   1097 ;	life.c:116: memset(u, 0, sizeof (u));
      0002A3 E4               [12] 1098 	clr	a
      0002A4 C0 E0            [24] 1099 	push	acc
      0002A6 74 24            [12] 1100 	mov	a,#0x24
      0002A8 C0 E0            [24] 1101 	push	acc
      0002AA E4               [12] 1102 	clr	a
      0002AB C0 E0            [24] 1103 	push	acc
      0002AD 90r48r00         [24] 1104 	mov	dptr,#_u
      0002B0 75 F0 00         [24] 1105 	mov	b,#0x00
      0002B3 12r00r00         [24] 1106 	lcall	_memset
      0002B6 15 81            [12] 1107 	dec	sp
      0002B8 15 81            [12] 1108 	dec	sp
      0002BA 15 81            [12] 1109 	dec	sp
                                   1110 ;	life.c:117: memset(pu, 0, sizeof (pu));
      0002BC E4               [12] 1111 	clr	a
      0002BD C0 E0            [24] 1112 	push	acc
      0002BF 74 24            [12] 1113 	mov	a,#0x24
      0002C1 C0 E0            [24] 1114 	push	acc
      0002C3 E4               [12] 1115 	clr	a
      0002C4 C0 E0            [24] 1116 	push	acc
      0002C6 90r24r00         [24] 1117 	mov	dptr,#_pu
      0002C9 75 F0 00         [24] 1118 	mov	b,#0x00
      0002CC 12r00r00         [24] 1119 	lcall	_memset
      0002CF 15 81            [12] 1120 	dec	sp
      0002D1 15 81            [12] 1121 	dec	sp
      0002D3 15 81            [12] 1122 	dec	sp
                                   1123 ;	life.c:242: if (c == (int)'L') loadiu();
      0002D5 78r18            [12] 1124 	mov	r0,#_c
      0002D7 B6 4C 06         [24] 1125 	cjne	@r0,#0x4c,00522$
      0002DA 08               [12] 1126 	inc	r0
      0002DB B6 00 02         [24] 1127 	cjne	@r0,#0x00,00522$
      0002DE 80 03            [24] 1128 	sjmp	00523$
      0002E0                       1129 00522$:
      0002E0 02r04r6D         [24] 1130 	ljmp	00116$
      0002E3                       1131 00523$:
                                   1132 ;	life.c:123: j = 0;
      0002E3 78r16            [12] 1133 	mov	r0,#_j
      0002E5 E4               [12] 1134 	clr	a
      0002E6 F6               [12] 1135 	mov	@r0,a
      0002E7 08               [12] 1136 	inc	r0
      0002E8 F6               [12] 1137 	mov	@r0,a
                                   1138 ;	life.c:125: printstr("LOAD 0 1 ~ # <");
      0002E9 7Dr0F            [12] 1139 	mov	r5,#___str_2
      0002EB 7Es00            [12] 1140 	mov	r6,#(___str_2 >> 8)
      0002ED 7F 80            [12] 1141 	mov	r7,#0x80
                                   1142 ;	life.c:50: return;
      0002EF                       1143 00205$:
                                   1144 ;	life.c:48: for (; *s; s++) putchar(*s);
      0002EF 8D 82            [24] 1145 	mov	dpl,r5
      0002F1 8E 83            [24] 1146 	mov	dph,r6
      0002F3 8F F0            [24] 1147 	mov	b,r7
      0002F5 12r00r00         [24] 1148 	lcall	__gptrget
      0002F8 FC               [12] 1149 	mov	r4,a
      0002F9 60 10            [24] 1150 	jz	00147$
      0002FB 7B 00            [12] 1151 	mov	r3,#0x00
      0002FD 8C 82            [24] 1152 	mov	dpl,r4
      0002FF 8B 83            [24] 1153 	mov	dph,r3
      000301 12r00r00         [24] 1154 	lcall	_putchar
      000304 0D               [12] 1155 	inc	r5
                                   1156 ;	life.c:125: printstr("LOAD 0 1 ~ # <");
      000305 BD 00 E7         [24] 1157 	cjne	r5,#0x00,00205$
      000308 0E               [12] 1158 	inc	r6
      000309 80 E4            [24] 1159 	sjmp	00205$
      00030B                       1160 00147$:
                                   1161 ;	life.c:127: for (y = 0; y < (H * W); y += W) {
      00030B 78r14            [12] 1162 	mov	r0,#_y
      00030D E4               [12] 1163 	clr	a
      00030E F6               [12] 1164 	mov	@r0,a
      00030F 08               [12] 1165 	inc	r0
      000310 F6               [12] 1166 	mov	@r0,a
      000311                       1167 00208$:
                                   1168 ;	life.c:128: for (x = 0; x < W; x++) {
      000311 78r12            [12] 1169 	mov	r0,#_x
      000313 E4               [12] 1170 	clr	a
      000314 F6               [12] 1171 	mov	@r0,a
      000315 08               [12] 1172 	inc	r0
      000316 F6               [12] 1173 	mov	@r0,a
                                   1174 ;	life.c:129: while (1) {
      000317                       1175 00160$:
                                   1176 ;	life.c:130: c = getchar();
      000317 12r00r05         [24] 1177 	lcall	_getchar
      00031A AE 82            [24] 1178 	mov	r6,dpl
      00031C AF 83            [24] 1179 	mov	r7,dph
      00031E 78r18            [12] 1180 	mov	r0,#_c
      000320 A6 06            [24] 1181 	mov	@r0,ar6
      000322 08               [12] 1182 	inc	r0
      000323 A6 07            [24] 1183 	mov	@r0,ar7
                                   1184 ;	life.c:131: if (c == (int)'0') {
      000325 BE 30 25         [24] 1185 	cjne	r6,#0x30,00158$
      000328 BF 00 22         [24] 1186 	cjne	r7,#0x00,00158$
                                   1187 ;	life.c:132: iu[y + x] = 0;
      00032B 78r14            [12] 1188 	mov	r0,#_y
      00032D 79r12            [12] 1189 	mov	r1,#_x
      00032F E7               [12] 1190 	mov	a,@r1
      000330 26               [12] 1191 	add	a,@r0
      000331 FC               [12] 1192 	mov	r4,a
      000332 09               [12] 1193 	inc	r1
      000333 E7               [12] 1194 	mov	a,@r1
      000334 08               [12] 1195 	inc	r0
      000335 36               [12] 1196 	addc	a,@r0
      000336 FD               [12] 1197 	mov	r5,a
      000337 EC               [12] 1198 	mov	a,r4
      000338 24r00            [12] 1199 	add	a,#_iu
      00033A F5 82            [12] 1200 	mov	dpl,a
      00033C ED               [12] 1201 	mov	a,r5
      00033D 34s00            [12] 1202 	addc	a,#(_iu >> 8)
      00033F F5 83            [12] 1203 	mov	dph,a
      000341 E4               [12] 1204 	clr	a
      000342 F0               [24] 1205 	movx	@dptr,a
                                   1206 ;	life.c:133: j++;
      000343 78r16            [12] 1207 	mov	r0,#_j
      000345 06               [12] 1208 	inc	@r0
      000346 B6 00 02         [24] 1209 	cjne	@r0,#0x00,00528$
      000349 08               [12] 1210 	inc	r0
      00034A 06               [12] 1211 	inc	@r0
      00034B                       1212 00528$:
                                   1213 ;	life.c:134: break;
      00034B 80 39            [24] 1214 	sjmp	00163$
      00034D                       1215 00158$:
                                   1216 ;	life.c:135: } else if (c == (int)'1') {
      00034D BE 31 26         [24] 1217 	cjne	r6,#0x31,00156$
      000350 BF 00 23         [24] 1218 	cjne	r7,#0x00,00156$
                                   1219 ;	life.c:136: iu[y + x] = 1;
      000353 78r14            [12] 1220 	mov	r0,#_y
      000355 79r12            [12] 1221 	mov	r1,#_x
      000357 E7               [12] 1222 	mov	a,@r1
      000358 26               [12] 1223 	add	a,@r0
      000359 FC               [12] 1224 	mov	r4,a
      00035A 09               [12] 1225 	inc	r1
      00035B E7               [12] 1226 	mov	a,@r1
      00035C 08               [12] 1227 	inc	r0
      00035D 36               [12] 1228 	addc	a,@r0
      00035E FD               [12] 1229 	mov	r5,a
      00035F EC               [12] 1230 	mov	a,r4
      000360 24r00            [12] 1231 	add	a,#_iu
      000362 F5 82            [12] 1232 	mov	dpl,a
      000364 ED               [12] 1233 	mov	a,r5
      000365 34s00            [12] 1234 	addc	a,#(_iu >> 8)
      000367 F5 83            [12] 1235 	mov	dph,a
      000369 74 01            [12] 1236 	mov	a,#0x01
      00036B F0               [24] 1237 	movx	@dptr,a
                                   1238 ;	life.c:137: j++;
      00036C 78r16            [12] 1239 	mov	r0,#_j
      00036E 06               [12] 1240 	inc	@r0
      00036F B6 00 02         [24] 1241 	cjne	@r0,#0x00,00531$
      000372 08               [12] 1242 	inc	r0
      000373 06               [12] 1243 	inc	@r0
      000374                       1244 00531$:
                                   1245 ;	life.c:138: break;
      000374 80 10            [24] 1246 	sjmp	00163$
      000376                       1247 00156$:
                                   1248 ;	life.c:139: } else if (c == (int)'~') goto br_inner;
      000376 BE 7E 05         [24] 1249 	cjne	r6,#0x7e,00532$
      000379 BF 00 02         [24] 1250 	cjne	r7,#0x00,00532$
      00037C 80 21            [24] 1251 	sjmp	00209$
      00037E                       1252 00532$:
                                   1253 ;	life.c:140: else if (c == (int)'#') goto out;
                                   1254 ;	life.c:144: break;
      00037E BE 23 96         [24] 1255 	cjne	r6,#0x23,00160$
      000381 BF 00 93         [24] 1256 	cjne	r7,#0x00,00160$
      000384 80 31            [24] 1257 	sjmp	00173$
      000386                       1258 00163$:
                                   1259 ;	life.c:128: for (x = 0; x < W; x++) {
      000386 78r12            [12] 1260 	mov	r0,#_x
      000388 06               [12] 1261 	inc	@r0
      000389 B6 00 02         [24] 1262 	cjne	@r0,#0x00,00534$
      00038C 08               [12] 1263 	inc	r0
      00038D 06               [12] 1264 	inc	@r0
      00038E                       1265 00534$:
      00038E 78r12            [12] 1266 	mov	r0,#_x
      000390 C3               [12] 1267 	clr	c
      000391 E6               [12] 1268 	mov	a,@r0
      000392 94 30            [12] 1269 	subb	a,#0x30
      000394 08               [12] 1270 	inc	r0
      000395 E6               [12] 1271 	mov	a,@r0
      000396 64 80            [12] 1272 	xrl	a,#0x80
      000398 94 80            [12] 1273 	subb	a,#0x80
      00039A 50 03            [24] 1274 	jnc	00535$
      00039C 02r03r17         [24] 1275 	ljmp	00160$
      00039F                       1276 00535$:
      00039F                       1277 00209$:
                                   1278 ;	life.c:127: for (y = 0; y < (H * W); y += W) {
      00039F 78r14            [12] 1279 	mov	r0,#_y
      0003A1 74 30            [12] 1280 	mov	a,#0x30
      0003A3 26               [12] 1281 	add	a,@r0
      0003A4 F6               [12] 1282 	mov	@r0,a
      0003A5 E4               [12] 1283 	clr	a
      0003A6 08               [12] 1284 	inc	r0
      0003A7 36               [12] 1285 	addc	a,@r0
      0003A8 F6               [12] 1286 	mov	@r0,a
      0003A9 78r14            [12] 1287 	mov	r0,#_y
      0003AB C3               [12] 1288 	clr	c
      0003AC 08               [12] 1289 	inc	r0
      0003AD E6               [12] 1290 	mov	a,@r0
      0003AE 64 80            [12] 1291 	xrl	a,#0x80
      0003B0 94 A4            [12] 1292 	subb	a,#0xa4
      0003B2 50 03            [24] 1293 	jnc	00536$
      0003B4 02r03r11         [24] 1294 	ljmp	00208$
      0003B7                       1295 00536$:
                                   1296 ;	life.c:148: out:
      0003B7                       1297 00173$:
                                   1298 ;	life.c:149: if (c != (int)'#')
      0003B7 BE 23 05         [24] 1299 	cjne	r6,#0x23,00537$
      0003BA BF 00 02         [24] 1300 	cjne	r7,#0x00,00537$
      0003BD 80 14            [24] 1301 	sjmp	00172$
      0003BF                       1302 00537$:
                                   1303 ;	life.c:150: while (1) {
      0003BF                       1304 00169$:
                                   1305 ;	life.c:151: c = getchar();
      0003BF 12r00r05         [24] 1306 	lcall	_getchar
      0003C2 AE 82            [24] 1307 	mov	r6,dpl
      0003C4 AF 83            [24] 1308 	mov	r7,dph
      0003C6 78r18            [12] 1309 	mov	r0,#_c
      0003C8 A6 06            [24] 1310 	mov	@r0,ar6
      0003CA 08               [12] 1311 	inc	r0
      0003CB A6 07            [24] 1312 	mov	@r0,ar7
                                   1313 ;	life.c:152: if (c == (int)'#') break;
      0003CD BE 23 EF         [24] 1314 	cjne	r6,#0x23,00169$
      0003D0 BF 00 EC         [24] 1315 	cjne	r7,#0x00,00169$
      0003D3                       1316 00172$:
                                   1317 ;	life.c:154: print16x(j);
      0003D3 78r16            [12] 1318 	mov	r0,#_j
      0003D5 86 06            [24] 1319 	mov	ar6,@r0
      0003D7 08               [12] 1320 	inc	r0
      0003D8 86 07            [24] 1321 	mov	ar7,@r0
      0003DA 8E 04            [24] 1322 	mov	ar4,r6
                                   1323 ;	life.c:39: putchar(digits[(a >> 12) & 0xf]);
      0003DC EF               [12] 1324 	mov	a,r7
      0003DD FD               [12] 1325 	mov	r5,a
      0003DE C4               [12] 1326 	swap	a
      0003DF 54 0F            [12] 1327 	anl	a,#0x0f
      0003E1 30 E3 02         [24] 1328 	jnb	acc.3,00540$
      0003E4 44 F0            [12] 1329 	orl	a,#0xf0
      0003E6                       1330 00540$:
      0003E6 FE               [12] 1331 	mov	r6,a
      0003E7 33               [12] 1332 	rlc	a
      0003E8 95 E0            [12] 1333 	subb	a,acc
      0003EA 53 06 0F         [24] 1334 	anl	ar6,#0x0f
      0003ED EE               [12] 1335 	mov	a,r6
      0003EE 24r00            [12] 1336 	add	a,#_digits
      0003F0 F9               [12] 1337 	mov	r1,a
      0003F1 87 07            [24] 1338 	mov	ar7,@r1
      0003F3 7E 00            [12] 1339 	mov	r6,#0x00
      0003F5 8F 82            [24] 1340 	mov	dpl,r7
      0003F7 8E 83            [24] 1341 	mov	dph,r6
      0003F9 12r00r00         [24] 1342 	lcall	_putchar
                                   1343 ;	life.c:40: putchar(digits[(a >> 8) & 0xf]);
      0003FC 8D 07            [24] 1344 	mov	ar7,r5
      0003FE 53 07 0F         [24] 1345 	anl	ar7,#0x0f
      000401 EF               [12] 1346 	mov	a,r7
      000402 24r00            [12] 1347 	add	a,#_digits
      000404 F9               [12] 1348 	mov	r1,a
      000405 87 07            [24] 1349 	mov	ar7,@r1
      000407 7E 00            [12] 1350 	mov	r6,#0x00
      000409 8F 82            [24] 1351 	mov	dpl,r7
      00040B 8E 83            [24] 1352 	mov	dph,r6
      00040D 12r00r00         [24] 1353 	lcall	_putchar
                                   1354 ;	life.c:41: putchar(digits[(a >> 4) & 0xf]);
      000410 8C 06            [24] 1355 	mov	ar6,r4
      000412 ED               [12] 1356 	mov	a,r5
      000413 C4               [12] 1357 	swap	a
      000414 CE               [12] 1358 	xch	a,r6
      000415 C4               [12] 1359 	swap	a
      000416 54 0F            [12] 1360 	anl	a,#0x0f
      000418 6E               [12] 1361 	xrl	a,r6
      000419 CE               [12] 1362 	xch	a,r6
      00041A 54 0F            [12] 1363 	anl	a,#0x0f
      00041C CE               [12] 1364 	xch	a,r6
      00041D 6E               [12] 1365 	xrl	a,r6
      00041E CE               [12] 1366 	xch	a,r6
      00041F 30 E3 02         [24] 1367 	jnb	acc.3,00541$
      000422 44 F0            [12] 1368 	orl	a,#0xf0
      000424                       1369 00541$:
      000424 53 06 0F         [24] 1370 	anl	ar6,#0x0f
      000427 EE               [12] 1371 	mov	a,r6
      000428 24r00            [12] 1372 	add	a,#_digits
      00042A F9               [12] 1373 	mov	r1,a
      00042B 87 07            [24] 1374 	mov	ar7,@r1
      00042D 7E 00            [12] 1375 	mov	r6,#0x00
      00042F 8F 82            [24] 1376 	mov	dpl,r7
      000431 8E 83            [24] 1377 	mov	dph,r6
      000433 12r00r00         [24] 1378 	lcall	_putchar
                                   1379 ;	life.c:42: putchar(digits[a & 0xf]);
      000436 53 04 0F         [24] 1380 	anl	ar4,#0x0f
      000439 EC               [12] 1381 	mov	a,r4
      00043A 24r00            [12] 1382 	add	a,#_digits
      00043C F9               [12] 1383 	mov	r1,a
      00043D 87 07            [24] 1384 	mov	ar7,@r1
      00043F 7E 00            [12] 1385 	mov	r6,#0x00
      000441 8F 82            [24] 1386 	mov	dpl,r7
      000443 8E 83            [24] 1387 	mov	dph,r6
      000445 12r00r00         [24] 1388 	lcall	_putchar
                                   1389 ;	life.c:155: printstr(">\r\n");
      000448 7Dr1E            [12] 1390 	mov	r5,#___str_3
      00044A 7Es00            [12] 1391 	mov	r6,#(___str_3 >> 8)
      00044C 7F 80            [12] 1392 	mov	r7,#0x80
                                   1393 ;	life.c:50: return;
      00044E                       1394 00211$:
                                   1395 ;	life.c:48: for (; *s; s++) putchar(*s);
      00044E 8D 82            [24] 1396 	mov	dpl,r5
      000450 8E 83            [24] 1397 	mov	dph,r6
      000452 8F F0            [24] 1398 	mov	b,r7
      000454 12r00r00         [24] 1399 	lcall	__gptrget
      000457 FC               [12] 1400 	mov	r4,a
      000458 70 03            [24] 1401 	jnz	00542$
      00045A 02r05r26         [24] 1402 	ljmp	00117$
      00045D                       1403 00542$:
      00045D 7B 00            [12] 1404 	mov	r3,#0x00
      00045F 8C 82            [24] 1405 	mov	dpl,r4
      000461 8B 83            [24] 1406 	mov	dph,r3
      000463 12r00r00         [24] 1407 	lcall	_putchar
      000466 0D               [12] 1408 	inc	r5
                                   1409 ;	life.c:242: if (c == (int)'L') loadiu();
      000467 BD 00 E4         [24] 1410 	cjne	r5,#0x00,00211$
      00046A 0E               [12] 1411 	inc	r6
      00046B 80 E1            [24] 1412 	sjmp	00211$
      00046D                       1413 00116$:
                                   1414 ;	life.c:243: else if (c == (int)'R') loadriu();
      00046D 78r18            [12] 1415 	mov	r0,#_c
      00046F B6 52 06         [24] 1416 	cjne	@r0,#0x52,00544$
      000472 08               [12] 1417 	inc	r0
      000473 B6 00 02         [24] 1418 	cjne	@r0,#0x00,00544$
      000476 80 03            [24] 1419 	sjmp	00545$
      000478                       1420 00544$:
      000478 02r05r26         [24] 1421 	ljmp	00117$
      00047B                       1422 00545$:
                                   1423 ;	life.c:161: j = 0;
      00047B 78r16            [12] 1424 	mov	r0,#_j
      00047D E4               [12] 1425 	clr	a
      00047E F6               [12] 1426 	mov	@r0,a
      00047F 08               [12] 1427 	inc	r0
      000480 F6               [12] 1428 	mov	@r0,a
                                   1429 ;	life.c:163: printstr("RANDOM");
      000481 7Dr22            [12] 1430 	mov	r5,#___str_4
      000483 7Es00            [12] 1431 	mov	r6,#(___str_4 >> 8)
      000485 7F 80            [12] 1432 	mov	r7,#0x80
                                   1433 ;	life.c:50: return;
      000487                       1434 00214$:
                                   1435 ;	life.c:48: for (; *s; s++) putchar(*s);
      000487 8D 82            [24] 1436 	mov	dpl,r5
      000489 8E 83            [24] 1437 	mov	dph,r6
      00048B 8F F0            [24] 1438 	mov	b,r7
      00048D 12r00r00         [24] 1439 	lcall	__gptrget
      000490 FC               [12] 1440 	mov	r4,a
      000491 60 10            [24] 1441 	jz	00179$
      000493 7B 00            [12] 1442 	mov	r3,#0x00
      000495 8C 82            [24] 1443 	mov	dpl,r4
      000497 8B 83            [24] 1444 	mov	dph,r3
      000499 12r00r00         [24] 1445 	lcall	_putchar
      00049C 0D               [12] 1446 	inc	r5
                                   1447 ;	life.c:163: printstr("RANDOM");
      00049D BD 00 E7         [24] 1448 	cjne	r5,#0x00,00214$
      0004A0 0E               [12] 1449 	inc	r6
      0004A1 80 E4            [24] 1450 	sjmp	00214$
      0004A3                       1451 00179$:
                                   1452 ;	life.c:165: for (y = 0; y < (H * W); y += W)
      0004A3 78r14            [12] 1453 	mov	r0,#_y
      0004A5 E4               [12] 1454 	clr	a
      0004A6 F6               [12] 1455 	mov	@r0,a
      0004A7 08               [12] 1456 	inc	r0
      0004A8 F6               [12] 1457 	mov	@r0,a
      0004A9                       1458 00218$:
                                   1459 ;	life.c:166: for (x = 0; x < W; x++)
      0004A9 78r12            [12] 1460 	mov	r0,#_x
      0004AB E4               [12] 1461 	clr	a
      0004AC F6               [12] 1462 	mov	@r0,a
      0004AD 08               [12] 1463 	inc	r0
      0004AE F6               [12] 1464 	mov	@r0,a
      0004AF                       1465 00216$:
                                   1466 ;	life.c:167: iu[y + x] = rand() & 1;
      0004AF 78r14            [12] 1467 	mov	r0,#_y
      0004B1 79r12            [12] 1468 	mov	r1,#_x
      0004B3 E7               [12] 1469 	mov	a,@r1
      0004B4 26               [12] 1470 	add	a,@r0
      0004B5 FE               [12] 1471 	mov	r6,a
      0004B6 09               [12] 1472 	inc	r1
      0004B7 E7               [12] 1473 	mov	a,@r1
      0004B8 08               [12] 1474 	inc	r0
      0004B9 36               [12] 1475 	addc	a,@r0
      0004BA FF               [12] 1476 	mov	r7,a
      0004BB EE               [12] 1477 	mov	a,r6
      0004BC 24r00            [12] 1478 	add	a,#_iu
      0004BE FE               [12] 1479 	mov	r6,a
      0004BF EF               [12] 1480 	mov	a,r7
      0004C0 34s00            [12] 1481 	addc	a,#(_iu >> 8)
      0004C2 FF               [12] 1482 	mov	r7,a
      0004C3 C0 07            [24] 1483 	push	ar7
      0004C5 C0 06            [24] 1484 	push	ar6
      0004C7 12r00r00         [24] 1485 	lcall	_rand
      0004CA AC 82            [24] 1486 	mov	r4,dpl
      0004CC D0 06            [24] 1487 	pop	ar6
      0004CE D0 07            [24] 1488 	pop	ar7
      0004D0 53 04 01         [24] 1489 	anl	ar4,#0x01
      0004D3 8E 82            [24] 1490 	mov	dpl,r6
      0004D5 8F 83            [24] 1491 	mov	dph,r7
      0004D7 EC               [12] 1492 	mov	a,r4
      0004D8 F0               [24] 1493 	movx	@dptr,a
                                   1494 ;	life.c:166: for (x = 0; x < W; x++)
      0004D9 78r12            [12] 1495 	mov	r0,#_x
      0004DB 06               [12] 1496 	inc	@r0
      0004DC B6 00 02         [24] 1497 	cjne	@r0,#0x00,00548$
      0004DF 08               [12] 1498 	inc	r0
      0004E0 06               [12] 1499 	inc	@r0
      0004E1                       1500 00548$:
      0004E1 78r12            [12] 1501 	mov	r0,#_x
      0004E3 C3               [12] 1502 	clr	c
      0004E4 E6               [12] 1503 	mov	a,@r0
      0004E5 94 30            [12] 1504 	subb	a,#0x30
      0004E7 08               [12] 1505 	inc	r0
      0004E8 E6               [12] 1506 	mov	a,@r0
      0004E9 64 80            [12] 1507 	xrl	a,#0x80
      0004EB 94 80            [12] 1508 	subb	a,#0x80
      0004ED 40 C0            [24] 1509 	jc	00216$
                                   1510 ;	life.c:165: for (y = 0; y < (H * W); y += W)
      0004EF 78r14            [12] 1511 	mov	r0,#_y
      0004F1 74 30            [12] 1512 	mov	a,#0x30
      0004F3 26               [12] 1513 	add	a,@r0
      0004F4 F6               [12] 1514 	mov	@r0,a
      0004F5 E4               [12] 1515 	clr	a
      0004F6 08               [12] 1516 	inc	r0
      0004F7 36               [12] 1517 	addc	a,@r0
      0004F8 F6               [12] 1518 	mov	@r0,a
      0004F9 78r14            [12] 1519 	mov	r0,#_y
      0004FB C3               [12] 1520 	clr	c
      0004FC 08               [12] 1521 	inc	r0
      0004FD E6               [12] 1522 	mov	a,@r0
      0004FE 64 80            [12] 1523 	xrl	a,#0x80
      000500 94 A4            [12] 1524 	subb	a,#0xa4
      000502 40 A5            [24] 1525 	jc	00218$
                                   1526 ;	life.c:169: printstr("\r\n");
      000504 7Dr0C            [12] 1527 	mov	r5,#___str_1
      000506 7Es00            [12] 1528 	mov	r6,#(___str_1 >> 8)
      000508 7F 80            [12] 1529 	mov	r7,#0x80
                                   1530 ;	life.c:50: return;
      00050A                       1531 00221$:
                                   1532 ;	life.c:48: for (; *s; s++) putchar(*s);
      00050A 8D 82            [24] 1533 	mov	dpl,r5
      00050C 8E 83            [24] 1534 	mov	dph,r6
      00050E 8F F0            [24] 1535 	mov	b,r7
      000510 12r00r00         [24] 1536 	lcall	__gptrget
      000513 FC               [12] 1537 	mov	r4,a
      000514 60 10            [24] 1538 	jz	00117$
      000516 7B 00            [12] 1539 	mov	r3,#0x00
      000518 8C 82            [24] 1540 	mov	dpl,r4
      00051A 8B 83            [24] 1541 	mov	dph,r3
      00051C 12r00r00         [24] 1542 	lcall	_putchar
      00051F 0D               [12] 1543 	inc	r5
                                   1544 ;	life.c:243: else if (c == (int)'R') loadriu();
      000520 BD 00 E7         [24] 1545 	cjne	r5,#0x00,00221$
      000523 0E               [12] 1546 	inc	r6
      000524 80 E4            [24] 1547 	sjmp	00221$
      000526                       1548 00117$:
                                   1549 ;	life.c:244: memcpy(u, iu, sizeof (iu));
      000526 E4               [12] 1550 	clr	a
      000527 C0 E0            [24] 1551 	push	acc
      000529 74 24            [12] 1552 	mov	a,#0x24
      00052B C0 E0            [24] 1553 	push	acc
      00052D 74r00            [12] 1554 	mov	a,#_iu
      00052F C0 E0            [24] 1555 	push	acc
      000531 74s00            [12] 1556 	mov	a,#(_iu >> 8)
      000533 C0 E0            [24] 1557 	push	acc
      000535 E4               [12] 1558 	clr	a
      000536 C0 E0            [24] 1559 	push	acc
      000538 90r48r00         [24] 1560 	mov	dptr,#_u
      00053B 75 F0 00         [24] 1561 	mov	b,#0x00
      00053E 12r00r00         [24] 1562 	lcall	___memcpy
      000541 E5 81            [12] 1563 	mov	a,sp
      000543 24 FB            [12] 1564 	add	a,#0xfb
      000545 F5 81            [12] 1565 	mov	sp,a
                                   1566 ;	life.c:245: show(0);
      000547 75 82 00         [24] 1567 	mov	dpl,#0x00
      00054A 12r00r26         [24] 1568 	lcall	_show
                                   1569 ;	life.c:247: printstr("READY T L R P S\r\n");
      00054D 7Dr4A            [12] 1570 	mov	r5,#___str_6
      00054F 7Es00            [12] 1571 	mov	r6,#(___str_6 >> 8)
      000551 7F 80            [12] 1572 	mov	r7,#0x80
                                   1573 ;	life.c:50: return;
      000553                       1574 00224$:
                                   1575 ;	life.c:48: for (; *s; s++) putchar(*s);
      000553 8D 82            [24] 1576 	mov	dpl,r5
      000555 8E 83            [24] 1577 	mov	dph,r6
      000557 8F F0            [24] 1578 	mov	b,r7
      000559 12r00r00         [24] 1579 	lcall	__gptrget
      00055C FC               [12] 1580 	mov	r4,a
      00055D 60 10            [24] 1581 	jz	00130$
      00055F 7B 00            [12] 1582 	mov	r3,#0x00
      000561 8C 82            [24] 1583 	mov	dpl,r4
      000563 8B 83            [24] 1584 	mov	dph,r3
      000565 12r00r00         [24] 1585 	lcall	_putchar
      000568 0D               [12] 1586 	inc	r5
                                   1587 ;	life.c:248: while (1) {
      000569 BD 00 E7         [24] 1588 	cjne	r5,#0x00,00224$
      00056C 0E               [12] 1589 	inc	r6
      00056D 80 E4            [24] 1590 	sjmp	00224$
      00056F                       1591 00130$:
                                   1592 ;	life.c:249: c = toupper(getchar());
      00056F 12r00r05         [24] 1593 	lcall	_getchar
      000572 12r00r00         [24] 1594 	lcall	_toupper
      000575 AE 82            [24] 1595 	mov	r6,dpl
      000577 AF 83            [24] 1596 	mov	r7,dph
      000579 78r18            [12] 1597 	mov	r0,#_c
      00057B A6 06            [24] 1598 	mov	@r0,ar6
      00057D 08               [12] 1599 	inc	r0
      00057E A6 07            [24] 1600 	mov	@r0,ar7
                                   1601 ;	life.c:250: if (i0 || (c == (int)'T')) goto terminate;
      000580 78r10            [12] 1602 	mov	r0,#_i0
      000582 E6               [12] 1603 	mov	a,@r0
      000583 60 03            [24] 1604 	jz	00555$
      000585 02r0ArC7         [24] 1605 	ljmp	00142$
      000588                       1606 00555$:
      000588 BE 54 06         [24] 1607 	cjne	r6,#0x54,00556$
      00058B BF 00 03         [24] 1608 	cjne	r7,#0x00,00556$
      00058E 02r0ArC7         [24] 1609 	ljmp	00142$
      000591                       1610 00556$:
                                   1611 ;	life.c:251: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      000591 BE 4C 06         [24] 1612 	cjne	r6,#0x4c,00557$
      000594 BF 00 03         [24] 1613 	cjne	r7,#0x00,00557$
      000597 02r02rA3         [24] 1614 	ljmp	00112$
      00059A                       1615 00557$:
      00059A BE 52 06         [24] 1616 	cjne	r6,#0x52,00558$
      00059D BF 00 03         [24] 1617 	cjne	r7,#0x00,00558$
      0005A0 02r02rA3         [24] 1618 	ljmp	00112$
      0005A3                       1619 00558$:
      0005A3 BE 50 06         [24] 1620 	cjne	r6,#0x50,00559$
      0005A6 BF 00 03         [24] 1621 	cjne	r7,#0x00,00559$
      0005A9 02r02rA3         [24] 1622 	ljmp	00112$
      0005AC                       1623 00559$:
                                   1624 ;	life.c:252: else if (c == (int)'S') break;
      0005AC BE 53 C0         [24] 1625 	cjne	r6,#0x53,00130$
      0005AF BF 00 BD         [24] 1626 	cjne	r7,#0x00,00130$
                                   1627 ;	life.c:77: generation[0] = 0;
      0005B2 78r22            [12] 1628 	mov	r0,#_generation
      0005B4 76 00            [12] 1629 	mov	@r0,#0x00
      0005B6 08               [12] 1630 	inc	r0
      0005B7 76 00            [12] 1631 	mov	@r0,#0x00
                                   1632 ;	life.c:78: generation[1] = 0;
      0005B9 78r24            [12] 1633 	mov	r0,#(_generation + 0x0002)
      0005BB 76 00            [12] 1634 	mov	@r0,#0x00
      0005BD 08               [12] 1635 	inc	r0
      0005BE 76 00            [12] 1636 	mov	@r0,#0x00
                                   1637 ;	life.c:257: for (i1 = 0; !i0 && !i1; ) {
      0005C0 78r11            [12] 1638 	mov	r0,#_i1
      0005C2 76 00            [12] 1639 	mov	@r0,#0x00
      0005C4                       1640 00241$:
      0005C4 78r10            [12] 1641 	mov	r0,#_i0
      0005C6 E6               [12] 1642 	mov	a,@r0
      0005C7 60 03            [24] 1643 	jz	00562$
      0005C9 02r0Ar95         [24] 1644 	ljmp	00138$
      0005CC                       1645 00562$:
      0005CC 78r11            [12] 1646 	mov	r0,#_i1
      0005CE E6               [12] 1647 	mov	a,@r0
      0005CF 60 03            [24] 1648 	jz	00563$
      0005D1 02r0Ar95         [24] 1649 	ljmp	00138$
      0005D4                       1650 00563$:
                                   1651 ;	life.c:258: show(1);
      0005D4 75 82 01         [24] 1652 	mov	dpl,#0x01
      0005D7 12r00r26         [24] 1653 	lcall	_show
                                   1654 ;	life.c:177: fixed = 0;
      0005DA 78r1C            [12] 1655 	mov	r0,#_fixed
      0005DC 76 00            [12] 1656 	mov	@r0,#0x00
                                   1657 ;	life.c:178: cycle2 = 0;
      0005DE 78r1D            [12] 1658 	mov	r0,#_cycle2
      0005E0 76 00            [12] 1659 	mov	@r0,#0x00
                                   1660 ;	life.c:179: bstep = 0;
      0005E2 78r1A            [12] 1661 	mov	r0,#_bstep
      0005E4 76 00            [12] 1662 	mov	@r0,#0x00
                                   1663 ;	life.c:181: for (y = 0; y < H; y++) {
      0005E6 78r14            [12] 1664 	mov	r0,#_y
      0005E8 E4               [12] 1665 	clr	a
      0005E9 F6               [12] 1666 	mov	@r0,a
      0005EA 08               [12] 1667 	inc	r0
      0005EB F6               [12] 1668 	mov	@r0,a
      0005EC                       1669 00228$:
                                   1670 ;	life.c:182: putchar(busy[bstep]); putchar('\r');
      0005EC 78r1A            [12] 1671 	mov	r0,#_bstep
      0005EE E6               [12] 1672 	mov	a,@r0
      0005EF 24r26            [12] 1673 	add	a,#_busy
      0005F1 F9               [12] 1674 	mov	r1,a
      0005F2 87 07            [24] 1675 	mov	ar7,@r1
      0005F4 7E 00            [12] 1676 	mov	r6,#0x00
      0005F6 8F 82            [24] 1677 	mov	dpl,r7
      0005F8 8E 83            [24] 1678 	mov	dph,r6
      0005FA 12r00r00         [24] 1679 	lcall	_putchar
      0005FD 90 00 0D         [24] 1680 	mov	dptr,#0x000d
      000600 12r00r00         [24] 1681 	lcall	_putchar
                                   1682 ;	life.c:183: bstep = (bstep + 1) & 3;
      000603 78r1A            [12] 1683 	mov	r0,#_bstep
      000605 86 07            [24] 1684 	mov	ar7,@r0
      000607 0F               [12] 1685 	inc	r7
      000608 78r1A            [12] 1686 	mov	r0,#_bstep
      00060A 74 03            [12] 1687 	mov	a,#0x03
      00060C 5F               [12] 1688 	anl	a,r7
      00060D F6               [12] 1689 	mov	@r0,a
                                   1690 ;	life.c:184: for (x = 0; x < W; x++) {
      00060E 78r12            [12] 1691 	mov	r0,#_x
      000610 E4               [12] 1692 	clr	a
      000611 F6               [12] 1693 	mov	@r0,a
      000612 08               [12] 1694 	inc	r0
      000613 F6               [12] 1695 	mov	@r0,a
      000614                       1696 00226$:
                                   1697 ;	life.c:185: n = -u[A2D(W, y, x)];
      000614 78r14            [12] 1698 	mov	r0,#_y
      000616 E6               [12] 1699 	mov	a,@r0
      000617 C0 E0            [24] 1700 	push	acc
      000619 08               [12] 1701 	inc	r0
      00061A E6               [12] 1702 	mov	a,@r0
      00061B C0 E0            [24] 1703 	push	acc
      00061D 90 00 30         [24] 1704 	mov	dptr,#0x0030
      000620 12r00r00         [24] 1705 	lcall	__mulint
      000623 C8               [12] 1706 	xch	a,r0
      000624 E5*00            [12] 1707 	mov	a,_bp
      000626 24 04            [12] 1708 	add	a,#0x04
      000628 C8               [12] 1709 	xch	a,r0
      000629 A6 82            [24] 1710 	mov	@r0,dpl
      00062B 08               [12] 1711 	inc	r0
      00062C A6 83            [24] 1712 	mov	@r0,dph
      00062E 15 81            [12] 1713 	dec	sp
      000630 15 81            [12] 1714 	dec	sp
      000632 E5*00            [12] 1715 	mov	a,_bp
      000634 24 04            [12] 1716 	add	a,#0x04
      000636 F8               [12] 1717 	mov	r0,a
      000637 79r12            [12] 1718 	mov	r1,#_x
      000639 E7               [12] 1719 	mov	a,@r1
      00063A 26               [12] 1720 	add	a,@r0
      00063B C0 E0            [24] 1721 	push	acc
      00063D 09               [12] 1722 	inc	r1
      00063E E7               [12] 1723 	mov	a,@r1
      00063F 08               [12] 1724 	inc	r0
      000640 36               [12] 1725 	addc	a,@r0
      000641 C0 E0            [24] 1726 	push	acc
      000643 E5*00            [12] 1727 	mov	a,_bp
      000645 24 03            [12] 1728 	add	a,#0x03
      000647 F8               [12] 1729 	mov	r0,a
      000648 D0 E0            [24] 1730 	pop	acc
      00064A F6               [12] 1731 	mov	@r0,a
      00064B 18               [12] 1732 	dec	r0
      00064C D0 E0            [24] 1733 	pop	acc
      00064E F6               [12] 1734 	mov	@r0,a
      00064F A8*00            [24] 1735 	mov	r0,_bp
      000651 08               [12] 1736 	inc	r0
      000652 08               [12] 1737 	inc	r0
      000653 E6               [12] 1738 	mov	a,@r0
      000654 24r00            [12] 1739 	add	a,#_u
      000656 F5 82            [12] 1740 	mov	dpl,a
      000658 08               [12] 1741 	inc	r0
      000659 E6               [12] 1742 	mov	a,@r0
      00065A 34s48            [12] 1743 	addc	a,#(_u >> 8)
      00065C F5 83            [12] 1744 	mov	dph,a
      00065E E0               [24] 1745 	movx	a,@dptr
      00065F FB               [12] 1746 	mov	r3,a
      000660 A8*00            [24] 1747 	mov	r0,_bp
      000662 08               [12] 1748 	inc	r0
      000663 C3               [12] 1749 	clr	c
      000664 E4               [12] 1750 	clr	a
      000665 9B               [12] 1751 	subb	a,r3
      000666 F6               [12] 1752 	mov	@r0,a
                                   1753 ;	life.c:188: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000667 78r14            [12] 1754 	mov	r0,#_y
      000669 74 FF            [12] 1755 	mov	a,#0xff
      00066B 26               [12] 1756 	add	a,@r0
      00066C FA               [12] 1757 	mov	r2,a
      00066D 74 FF            [12] 1758 	mov	a,#0xff
      00066F 08               [12] 1759 	inc	r0
      000670 36               [12] 1760 	addc	a,@r0
      000671 FB               [12] 1761 	mov	r3,a
      000672 74 C0            [12] 1762 	mov	a,#0xc0
      000674 2A               [12] 1763 	add	a,r2
      000675 FA               [12] 1764 	mov	r2,a
      000676 E4               [12] 1765 	clr	a
      000677 3B               [12] 1766 	addc	a,r3
      000678 FB               [12] 1767 	mov	r3,a
      000679 74 C0            [12] 1768 	mov	a,#0xc0
      00067B C0 E0            [24] 1769 	push	acc
      00067D E4               [12] 1770 	clr	a
      00067E C0 E0            [24] 1771 	push	acc
      000680 8A 82            [24] 1772 	mov	dpl,r2
      000682 8B 83            [24] 1773 	mov	dph,r3
      000684 12r00r00         [24] 1774 	lcall	__modsint
      000687 AA 82            [24] 1775 	mov	r2,dpl
      000689 AB 83            [24] 1776 	mov	r3,dph
      00068B 15 81            [12] 1777 	dec	sp
      00068D 15 81            [12] 1778 	dec	sp
      00068F C0 02            [24] 1779 	push	ar2
      000691 C0 03            [24] 1780 	push	ar3
      000693 90 00 30         [24] 1781 	mov	dptr,#0x0030
      000696 12r00r00         [24] 1782 	lcall	__mulint
      000699 AA 82            [24] 1783 	mov	r2,dpl
      00069B AB 83            [24] 1784 	mov	r3,dph
      00069D 15 81            [12] 1785 	dec	sp
      00069F 15 81            [12] 1786 	dec	sp
      0006A1 78r12            [12] 1787 	mov	r0,#_x
      0006A3 74 FF            [12] 1788 	mov	a,#0xff
      0006A5 26               [12] 1789 	add	a,@r0
      0006A6 FC               [12] 1790 	mov	r4,a
      0006A7 74 FF            [12] 1791 	mov	a,#0xff
      0006A9 08               [12] 1792 	inc	r0
      0006AA 36               [12] 1793 	addc	a,@r0
      0006AB FD               [12] 1794 	mov	r5,a
      0006AC 74 30            [12] 1795 	mov	a,#0x30
      0006AE 2C               [12] 1796 	add	a,r4
      0006AF FC               [12] 1797 	mov	r4,a
      0006B0 E4               [12] 1798 	clr	a
      0006B1 3D               [12] 1799 	addc	a,r5
      0006B2 FD               [12] 1800 	mov	r5,a
      0006B3 C0 03            [24] 1801 	push	ar3
      0006B5 C0 02            [24] 1802 	push	ar2
      0006B7 74 30            [12] 1803 	mov	a,#0x30
      0006B9 C0 E0            [24] 1804 	push	acc
      0006BB E4               [12] 1805 	clr	a
      0006BC C0 E0            [24] 1806 	push	acc
      0006BE 8C 82            [24] 1807 	mov	dpl,r4
      0006C0 8D 83            [24] 1808 	mov	dph,r5
      0006C2 12r00r00         [24] 1809 	lcall	__modsint
      0006C5 AC 82            [24] 1810 	mov	r4,dpl
      0006C7 AD 83            [24] 1811 	mov	r5,dph
      0006C9 15 81            [12] 1812 	dec	sp
      0006CB 15 81            [12] 1813 	dec	sp
      0006CD D0 02            [24] 1814 	pop	ar2
      0006CF D0 03            [24] 1815 	pop	ar3
      0006D1 EC               [12] 1816 	mov	a,r4
      0006D2 2A               [12] 1817 	add	a,r2
      0006D3 FE               [12] 1818 	mov	r6,a
      0006D4 ED               [12] 1819 	mov	a,r5
      0006D5 3B               [12] 1820 	addc	a,r3
      0006D6 FF               [12] 1821 	mov	r7,a
      0006D7 EE               [12] 1822 	mov	a,r6
      0006D8 24r00            [12] 1823 	add	a,#_u
      0006DA F5 82            [12] 1824 	mov	dpl,a
      0006DC EF               [12] 1825 	mov	a,r7
      0006DD 34s48            [12] 1826 	addc	a,#(_u >> 8)
      0006DF F5 83            [12] 1827 	mov	dph,a
      0006E1 E0               [24] 1828 	movx	a,@dptr
      0006E2 FF               [12] 1829 	mov	r7,a
      0006E3 A8*00            [24] 1830 	mov	r0,_bp
      0006E5 08               [12] 1831 	inc	r0
      0006E6 EF               [12] 1832 	mov	a,r7
      0006E7 26               [12] 1833 	add	a,@r0
      0006E8 F6               [12] 1834 	mov	@r0,a
                                   1835 ;	life.c:190: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006E9 78r12            [12] 1836 	mov	r0,#_x
      0006EB E5*00            [12] 1837 	mov	a,_bp
      0006ED 24 06            [12] 1838 	add	a,#0x06
      0006EF F9               [12] 1839 	mov	r1,a
      0006F0 E6               [12] 1840 	mov	a,@r0
      0006F1 F7               [12] 1841 	mov	@r1,a
      0006F2 08               [12] 1842 	inc	r0
      0006F3 09               [12] 1843 	inc	r1
      0006F4 E6               [12] 1844 	mov	a,@r0
      0006F5 F7               [12] 1845 	mov	@r1,a
      0006F6 E5*00            [12] 1846 	mov	a,_bp
      0006F8 24 06            [12] 1847 	add	a,#0x06
      0006FA F8               [12] 1848 	mov	r0,a
      0006FB 74 30            [12] 1849 	mov	a,#0x30
      0006FD 26               [12] 1850 	add	a,@r0
      0006FE FE               [12] 1851 	mov	r6,a
      0006FF E4               [12] 1852 	clr	a
      000700 08               [12] 1853 	inc	r0
      000701 36               [12] 1854 	addc	a,@r0
      000702 FF               [12] 1855 	mov	r7,a
      000703 C0 05            [24] 1856 	push	ar5
      000705 C0 04            [24] 1857 	push	ar4
      000707 C0 03            [24] 1858 	push	ar3
      000709 C0 02            [24] 1859 	push	ar2
      00070B 74 30            [12] 1860 	mov	a,#0x30
      00070D C0 E0            [24] 1861 	push	acc
      00070F E4               [12] 1862 	clr	a
      000710 C0 E0            [24] 1863 	push	acc
      000712 8E 82            [24] 1864 	mov	dpl,r6
      000714 8F 83            [24] 1865 	mov	dph,r7
      000716 12r00r00         [24] 1866 	lcall	__modsint
      000719 C8               [12] 1867 	xch	a,r0
      00071A E5*00            [12] 1868 	mov	a,_bp
      00071C 24 08            [12] 1869 	add	a,#0x08
      00071E C8               [12] 1870 	xch	a,r0
      00071F A6 82            [24] 1871 	mov	@r0,dpl
      000721 08               [12] 1872 	inc	r0
      000722 A6 83            [24] 1873 	mov	@r0,dph
      000724 15 81            [12] 1874 	dec	sp
      000726 15 81            [12] 1875 	dec	sp
      000728 D0 02            [24] 1876 	pop	ar2
      00072A D0 03            [24] 1877 	pop	ar3
      00072C E5*00            [12] 1878 	mov	a,_bp
      00072E 24 08            [12] 1879 	add	a,#0x08
      000730 F8               [12] 1880 	mov	r0,a
      000731 E6               [12] 1881 	mov	a,@r0
      000732 2A               [12] 1882 	add	a,r2
      000733 FE               [12] 1883 	mov	r6,a
      000734 08               [12] 1884 	inc	r0
      000735 E6               [12] 1885 	mov	a,@r0
      000736 3B               [12] 1886 	addc	a,r3
      000737 FF               [12] 1887 	mov	r7,a
      000738 EE               [12] 1888 	mov	a,r6
      000739 24r00            [12] 1889 	add	a,#_u
      00073B F5 82            [12] 1890 	mov	dpl,a
      00073D EF               [12] 1891 	mov	a,r7
      00073E 34s48            [12] 1892 	addc	a,#(_u >> 8)
      000740 F5 83            [12] 1893 	mov	dph,a
      000742 E0               [24] 1894 	movx	a,@dptr
      000743 FF               [12] 1895 	mov	r7,a
      000744 A8*00            [24] 1896 	mov	r0,_bp
      000746 08               [12] 1897 	inc	r0
      000747 EF               [12] 1898 	mov	a,r7
      000748 26               [12] 1899 	add	a,@r0
      000749 F6               [12] 1900 	mov	@r0,a
                                   1901 ;	life.c:192: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00074A E5*00            [12] 1902 	mov	a,_bp
      00074C 24 06            [12] 1903 	add	a,#0x06
      00074E F8               [12] 1904 	mov	r0,a
      00074F 74 31            [12] 1905 	mov	a,#0x31
      000751 26               [12] 1906 	add	a,@r0
      000752 FE               [12] 1907 	mov	r6,a
      000753 E4               [12] 1908 	clr	a
      000754 08               [12] 1909 	inc	r0
      000755 36               [12] 1910 	addc	a,@r0
      000756 FF               [12] 1911 	mov	r7,a
      000757 C0 03            [24] 1912 	push	ar3
      000759 C0 02            [24] 1913 	push	ar2
      00075B 74 30            [12] 1914 	mov	a,#0x30
      00075D C0 E0            [24] 1915 	push	acc
      00075F E4               [12] 1916 	clr	a
      000760 C0 E0            [24] 1917 	push	acc
      000762 8E 82            [24] 1918 	mov	dpl,r6
      000764 8F 83            [24] 1919 	mov	dph,r7
      000766 12r00r00         [24] 1920 	lcall	__modsint
      000769 AE 82            [24] 1921 	mov	r6,dpl
      00076B AF 83            [24] 1922 	mov	r7,dph
      00076D 15 81            [12] 1923 	dec	sp
      00076F 15 81            [12] 1924 	dec	sp
      000771 D0 02            [24] 1925 	pop	ar2
      000773 D0 03            [24] 1926 	pop	ar3
      000775 D0 04            [24] 1927 	pop	ar4
      000777 D0 05            [24] 1928 	pop	ar5
      000779 EE               [12] 1929 	mov	a,r6
      00077A 2A               [12] 1930 	add	a,r2
      00077B FA               [12] 1931 	mov	r2,a
      00077C EF               [12] 1932 	mov	a,r7
      00077D 3B               [12] 1933 	addc	a,r3
      00077E FB               [12] 1934 	mov	r3,a
      00077F EA               [12] 1935 	mov	a,r2
      000780 24r00            [12] 1936 	add	a,#_u
      000782 F5 82            [12] 1937 	mov	dpl,a
      000784 EB               [12] 1938 	mov	a,r3
      000785 34s48            [12] 1939 	addc	a,#(_u >> 8)
      000787 F5 83            [12] 1940 	mov	dph,a
      000789 E0               [24] 1941 	movx	a,@dptr
      00078A FB               [12] 1942 	mov	r3,a
      00078B A8*00            [24] 1943 	mov	r0,_bp
      00078D 08               [12] 1944 	inc	r0
      00078E EB               [12] 1945 	mov	a,r3
      00078F 26               [12] 1946 	add	a,@r0
      000790 F6               [12] 1947 	mov	@r0,a
                                   1948 ;	life.c:194: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000791 78r14            [12] 1949 	mov	r0,#_y
      000793 E5*00            [12] 1950 	mov	a,_bp
      000795 24 0A            [12] 1951 	add	a,#0x0a
      000797 F9               [12] 1952 	mov	r1,a
      000798 E6               [12] 1953 	mov	a,@r0
      000799 F7               [12] 1954 	mov	@r1,a
      00079A 08               [12] 1955 	inc	r0
      00079B 09               [12] 1956 	inc	r1
      00079C E6               [12] 1957 	mov	a,@r0
      00079D F7               [12] 1958 	mov	@r1,a
      00079E E5*00            [12] 1959 	mov	a,_bp
      0007A0 24 0A            [12] 1960 	add	a,#0x0a
      0007A2 F8               [12] 1961 	mov	r0,a
      0007A3 74 C0            [12] 1962 	mov	a,#0xc0
      0007A5 26               [12] 1963 	add	a,@r0
      0007A6 FA               [12] 1964 	mov	r2,a
      0007A7 E4               [12] 1965 	clr	a
      0007A8 08               [12] 1966 	inc	r0
      0007A9 36               [12] 1967 	addc	a,@r0
      0007AA FB               [12] 1968 	mov	r3,a
      0007AB C0 07            [24] 1969 	push	ar7
      0007AD C0 06            [24] 1970 	push	ar6
      0007AF C0 05            [24] 1971 	push	ar5
      0007B1 C0 04            [24] 1972 	push	ar4
      0007B3 74 C0            [12] 1973 	mov	a,#0xc0
      0007B5 C0 E0            [24] 1974 	push	acc
      0007B7 E4               [12] 1975 	clr	a
      0007B8 C0 E0            [24] 1976 	push	acc
      0007BA 8A 82            [24] 1977 	mov	dpl,r2
      0007BC 8B 83            [24] 1978 	mov	dph,r3
      0007BE 12r00r00         [24] 1979 	lcall	__modsint
      0007C1 AA 82            [24] 1980 	mov	r2,dpl
      0007C3 AB 83            [24] 1981 	mov	r3,dph
      0007C5 15 81            [12] 1982 	dec	sp
      0007C7 15 81            [12] 1983 	dec	sp
      0007C9 C0 02            [24] 1984 	push	ar2
      0007CB C0 03            [24] 1985 	push	ar3
      0007CD 90 00 30         [24] 1986 	mov	dptr,#0x0030
      0007D0 12r00r00         [24] 1987 	lcall	__mulint
      0007D3 C8               [12] 1988 	xch	a,r0
      0007D4 E5*00            [12] 1989 	mov	a,_bp
      0007D6 24 0C            [12] 1990 	add	a,#0x0c
      0007D8 C8               [12] 1991 	xch	a,r0
      0007D9 A6 82            [24] 1992 	mov	@r0,dpl
      0007DB 08               [12] 1993 	inc	r0
      0007DC A6 83            [24] 1994 	mov	@r0,dph
      0007DE 15 81            [12] 1995 	dec	sp
      0007E0 15 81            [12] 1996 	dec	sp
      0007E2 D0 04            [24] 1997 	pop	ar4
      0007E4 D0 05            [24] 1998 	pop	ar5
      0007E6 D0 06            [24] 1999 	pop	ar6
      0007E8 D0 07            [24] 2000 	pop	ar7
      0007EA E5*00            [12] 2001 	mov	a,_bp
      0007EC 24 0C            [12] 2002 	add	a,#0x0c
      0007EE F8               [12] 2003 	mov	r0,a
      0007EF EC               [12] 2004 	mov	a,r4
      0007F0 26               [12] 2005 	add	a,@r0
      0007F1 FA               [12] 2006 	mov	r2,a
      0007F2 ED               [12] 2007 	mov	a,r5
      0007F3 08               [12] 2008 	inc	r0
      0007F4 36               [12] 2009 	addc	a,@r0
      0007F5 FB               [12] 2010 	mov	r3,a
      0007F6 EA               [12] 2011 	mov	a,r2
      0007F7 24r00            [12] 2012 	add	a,#_u
      0007F9 F5 82            [12] 2013 	mov	dpl,a
      0007FB EB               [12] 2014 	mov	a,r3
      0007FC 34s48            [12] 2015 	addc	a,#(_u >> 8)
      0007FE F5 83            [12] 2016 	mov	dph,a
      000800 E0               [24] 2017 	movx	a,@dptr
      000801 FB               [12] 2018 	mov	r3,a
      000802 A8*00            [24] 2019 	mov	r0,_bp
      000804 08               [12] 2020 	inc	r0
      000805 EB               [12] 2021 	mov	a,r3
      000806 26               [12] 2022 	add	a,@r0
      000807 F6               [12] 2023 	mov	@r0,a
                                   2024 ;	life.c:196: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000808 E5*00            [12] 2025 	mov	a,_bp
      00080A 24 0C            [12] 2026 	add	a,#0x0c
      00080C F8               [12] 2027 	mov	r0,a
      00080D E5*00            [12] 2028 	mov	a,_bp
      00080F 24 08            [12] 2029 	add	a,#0x08
      000811 F9               [12] 2030 	mov	r1,a
      000812 E7               [12] 2031 	mov	a,@r1
      000813 26               [12] 2032 	add	a,@r0
      000814 FA               [12] 2033 	mov	r2,a
      000815 09               [12] 2034 	inc	r1
      000816 E7               [12] 2035 	mov	a,@r1
      000817 08               [12] 2036 	inc	r0
      000818 36               [12] 2037 	addc	a,@r0
      000819 FB               [12] 2038 	mov	r3,a
      00081A EA               [12] 2039 	mov	a,r2
      00081B 24r00            [12] 2040 	add	a,#_u
      00081D F5 82            [12] 2041 	mov	dpl,a
      00081F EB               [12] 2042 	mov	a,r3
      000820 34s48            [12] 2043 	addc	a,#(_u >> 8)
      000822 F5 83            [12] 2044 	mov	dph,a
      000824 E0               [24] 2045 	movx	a,@dptr
      000825 FB               [12] 2046 	mov	r3,a
      000826 A8*00            [24] 2047 	mov	r0,_bp
      000828 08               [12] 2048 	inc	r0
      000829 EB               [12] 2049 	mov	a,r3
      00082A 26               [12] 2050 	add	a,@r0
      00082B F6               [12] 2051 	mov	@r0,a
                                   2052 ;	life.c:198: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00082C E5*00            [12] 2053 	mov	a,_bp
      00082E 24 0C            [12] 2054 	add	a,#0x0c
      000830 F8               [12] 2055 	mov	r0,a
      000831 EE               [12] 2056 	mov	a,r6
      000832 26               [12] 2057 	add	a,@r0
      000833 FA               [12] 2058 	mov	r2,a
      000834 EF               [12] 2059 	mov	a,r7
      000835 08               [12] 2060 	inc	r0
      000836 36               [12] 2061 	addc	a,@r0
      000837 FB               [12] 2062 	mov	r3,a
      000838 EA               [12] 2063 	mov	a,r2
      000839 24r00            [12] 2064 	add	a,#_u
      00083B F5 82            [12] 2065 	mov	dpl,a
      00083D EB               [12] 2066 	mov	a,r3
      00083E 34s48            [12] 2067 	addc	a,#(_u >> 8)
      000840 F5 83            [12] 2068 	mov	dph,a
      000842 E0               [24] 2069 	movx	a,@dptr
      000843 FB               [12] 2070 	mov	r3,a
      000844 A8*00            [24] 2071 	mov	r0,_bp
      000846 08               [12] 2072 	inc	r0
      000847 E5*00            [12] 2073 	mov	a,_bp
      000849 24 0C            [12] 2074 	add	a,#0x0c
      00084B F9               [12] 2075 	mov	r1,a
      00084C EB               [12] 2076 	mov	a,r3
      00084D 26               [12] 2077 	add	a,@r0
      00084E F7               [12] 2078 	mov	@r1,a
                                   2079 ;	life.c:200: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00084F E5*00            [12] 2080 	mov	a,_bp
      000851 24 0A            [12] 2081 	add	a,#0x0a
      000853 F8               [12] 2082 	mov	r0,a
      000854 74 C1            [12] 2083 	mov	a,#0xc1
      000856 26               [12] 2084 	add	a,@r0
      000857 FA               [12] 2085 	mov	r2,a
      000858 E4               [12] 2086 	clr	a
      000859 08               [12] 2087 	inc	r0
      00085A 36               [12] 2088 	addc	a,@r0
      00085B FB               [12] 2089 	mov	r3,a
      00085C C0 07            [24] 2090 	push	ar7
      00085E C0 06            [24] 2091 	push	ar6
      000860 C0 05            [24] 2092 	push	ar5
      000862 C0 04            [24] 2093 	push	ar4
      000864 74 C0            [12] 2094 	mov	a,#0xc0
      000866 C0 E0            [24] 2095 	push	acc
      000868 E4               [12] 2096 	clr	a
      000869 C0 E0            [24] 2097 	push	acc
      00086B 8A 82            [24] 2098 	mov	dpl,r2
      00086D 8B 83            [24] 2099 	mov	dph,r3
      00086F 12r00r00         [24] 2100 	lcall	__modsint
      000872 AA 82            [24] 2101 	mov	r2,dpl
      000874 AB 83            [24] 2102 	mov	r3,dph
      000876 15 81            [12] 2103 	dec	sp
      000878 15 81            [12] 2104 	dec	sp
      00087A C0 02            [24] 2105 	push	ar2
      00087C C0 03            [24] 2106 	push	ar3
      00087E 90 00 30         [24] 2107 	mov	dptr,#0x0030
      000881 12r00r00         [24] 2108 	lcall	__mulint
      000884 AA 82            [24] 2109 	mov	r2,dpl
      000886 AB 83            [24] 2110 	mov	r3,dph
      000888 15 81            [12] 2111 	dec	sp
      00088A 15 81            [12] 2112 	dec	sp
      00088C D0 04            [24] 2113 	pop	ar4
      00088E D0 05            [24] 2114 	pop	ar5
      000890 D0 06            [24] 2115 	pop	ar6
      000892 D0 07            [24] 2116 	pop	ar7
      000894 EC               [12] 2117 	mov	a,r4
      000895 2A               [12] 2118 	add	a,r2
      000896 FC               [12] 2119 	mov	r4,a
      000897 ED               [12] 2120 	mov	a,r5
      000898 3B               [12] 2121 	addc	a,r3
      000899 FD               [12] 2122 	mov	r5,a
      00089A EC               [12] 2123 	mov	a,r4
      00089B 24r00            [12] 2124 	add	a,#_u
      00089D F5 82            [12] 2125 	mov	dpl,a
      00089F ED               [12] 2126 	mov	a,r5
      0008A0 34s48            [12] 2127 	addc	a,#(_u >> 8)
      0008A2 F5 83            [12] 2128 	mov	dph,a
      0008A4 E0               [24] 2129 	movx	a,@dptr
      0008A5 FD               [12] 2130 	mov	r5,a
      0008A6 E5*00            [12] 2131 	mov	a,_bp
      0008A8 24 0C            [12] 2132 	add	a,#0x0c
      0008AA F8               [12] 2133 	mov	r0,a
      0008AB E5*00            [12] 2134 	mov	a,_bp
      0008AD 24 0C            [12] 2135 	add	a,#0x0c
      0008AF F9               [12] 2136 	mov	r1,a
      0008B0 ED               [12] 2137 	mov	a,r5
      0008B1 26               [12] 2138 	add	a,@r0
      0008B2 F7               [12] 2139 	mov	@r1,a
                                   2140 ;	life.c:202: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008B3 E5*00            [12] 2141 	mov	a,_bp
      0008B5 24 08            [12] 2142 	add	a,#0x08
      0008B7 F8               [12] 2143 	mov	r0,a
      0008B8 E6               [12] 2144 	mov	a,@r0
      0008B9 2A               [12] 2145 	add	a,r2
      0008BA FC               [12] 2146 	mov	r4,a
      0008BB 08               [12] 2147 	inc	r0
      0008BC E6               [12] 2148 	mov	a,@r0
      0008BD 3B               [12] 2149 	addc	a,r3
      0008BE FD               [12] 2150 	mov	r5,a
      0008BF EC               [12] 2151 	mov	a,r4
      0008C0 24r00            [12] 2152 	add	a,#_u
      0008C2 F5 82            [12] 2153 	mov	dpl,a
      0008C4 ED               [12] 2154 	mov	a,r5
      0008C5 34s48            [12] 2155 	addc	a,#(_u >> 8)
      0008C7 F5 83            [12] 2156 	mov	dph,a
      0008C9 E0               [24] 2157 	movx	a,@dptr
      0008CA FD               [12] 2158 	mov	r5,a
      0008CB E5*00            [12] 2159 	mov	a,_bp
      0008CD 24 0C            [12] 2160 	add	a,#0x0c
      0008CF F8               [12] 2161 	mov	r0,a
      0008D0 ED               [12] 2162 	mov	a,r5
      0008D1 26               [12] 2163 	add	a,@r0
      0008D2 FD               [12] 2164 	mov	r5,a
                                   2165 ;	life.c:203: y1 = 1; x1 = 1;
      0008D3 78r20            [12] 2166 	mov	r0,#_y1
      0008D5 76 01            [12] 2167 	mov	@r0,#0x01
      0008D7 08               [12] 2168 	inc	r0
      0008D8 76 00            [12] 2169 	mov	@r0,#0x00
      0008DA 78r1E            [12] 2170 	mov	r0,#_x1
      0008DC 76 01            [12] 2171 	mov	@r0,#0x01
      0008DE 08               [12] 2172 	inc	r0
      0008DF 76 00            [12] 2173 	mov	@r0,#0x00
                                   2174 ;	life.c:204: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008E1 EE               [12] 2175 	mov	a,r6
      0008E2 2A               [12] 2176 	add	a,r2
      0008E3 FE               [12] 2177 	mov	r6,a
      0008E4 EF               [12] 2178 	mov	a,r7
      0008E5 3B               [12] 2179 	addc	a,r3
      0008E6 FF               [12] 2180 	mov	r7,a
      0008E7 EE               [12] 2181 	mov	a,r6
      0008E8 24r00            [12] 2182 	add	a,#_u
      0008EA F5 82            [12] 2183 	mov	dpl,a
      0008EC EF               [12] 2184 	mov	a,r7
      0008ED 34s48            [12] 2185 	addc	a,#(_u >> 8)
      0008EF F5 83            [12] 2186 	mov	dph,a
      0008F1 E0               [24] 2187 	movx	a,@dptr
      0008F2 2D               [12] 2188 	add	a,r5
      0008F3 FF               [12] 2189 	mov	r7,a
      0008F4 78r1B            [12] 2190 	mov	r0,#_n
      0008F6 A6 07            [24] 2191 	mov	@r0,ar7
                                   2192 ;	life.c:206: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008F8 A8*00            [24] 2193 	mov	r0,_bp
      0008FA 08               [12] 2194 	inc	r0
      0008FB 08               [12] 2195 	inc	r0
      0008FC E6               [12] 2196 	mov	a,@r0
      0008FD 24r00            [12] 2197 	add	a,#_nu
      0008FF FD               [12] 2198 	mov	r5,a
      000900 08               [12] 2199 	inc	r0
      000901 E6               [12] 2200 	mov	a,@r0
      000902 34s6C            [12] 2201 	addc	a,#(_nu >> 8)
      000904 FE               [12] 2202 	mov	r6,a
      000905 BF 03 02         [24] 2203 	cjne	r7,#0x03,00564$
      000908 80 28            [24] 2204 	sjmp	00254$
      00090A                       2205 00564$:
      00090A BF 02 21         [24] 2206 	cjne	r7,#0x02,00253$
      00090D E5*00            [12] 2207 	mov	a,_bp
      00090F 24 04            [12] 2208 	add	a,#0x04
      000911 F8               [12] 2209 	mov	r0,a
      000912 E5*00            [12] 2210 	mov	a,_bp
      000914 24 06            [12] 2211 	add	a,#0x06
      000916 F9               [12] 2212 	mov	r1,a
      000917 E7               [12] 2213 	mov	a,@r1
      000918 26               [12] 2214 	add	a,@r0
      000919 FC               [12] 2215 	mov	r4,a
      00091A 09               [12] 2216 	inc	r1
      00091B E7               [12] 2217 	mov	a,@r1
      00091C 08               [12] 2218 	inc	r0
      00091D 36               [12] 2219 	addc	a,@r0
      00091E FF               [12] 2220 	mov	r7,a
      00091F EC               [12] 2221 	mov	a,r4
      000920 24r00            [12] 2222 	add	a,#_u
      000922 FC               [12] 2223 	mov	r4,a
      000923 EF               [12] 2224 	mov	a,r7
      000924 34s48            [12] 2225 	addc	a,#(_u >> 8)
      000926 FF               [12] 2226 	mov	r7,a
      000927 8C 82            [24] 2227 	mov	dpl,r4
      000929 8F 83            [24] 2228 	mov	dph,r7
      00092B E0               [24] 2229 	movx	a,@dptr
      00092C 70 04            [24] 2230 	jnz	00254$
      00092E                       2231 00253$:
                                   2232 ;	assignBit
      00092E C2*00            [12] 2233 	clr	b0
      000930 80 02            [24] 2234 	sjmp	00255$
      000932                       2235 00254$:
                                   2236 ;	assignBit
      000932 D2*00            [12] 2237 	setb	b0
      000934                       2238 00255$:
      000934 A2*00            [12] 2239 	mov	c,b0
      000936 E4               [12] 2240 	clr	a
      000937 33               [12] 2241 	rlc	a
      000938 8D 82            [24] 2242 	mov	dpl,r5
      00093A 8E 83            [24] 2243 	mov	dph,r6
      00093C F0               [24] 2244 	movx	@dptr,a
                                   2245 ;	life.c:207: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00093D 78r14            [12] 2246 	mov	r0,#_y
      00093F E6               [12] 2247 	mov	a,@r0
      000940 C0 E0            [24] 2248 	push	acc
      000942 08               [12] 2249 	inc	r0
      000943 E6               [12] 2250 	mov	a,@r0
      000944 C0 E0            [24] 2251 	push	acc
      000946 90 00 30         [24] 2252 	mov	dptr,#0x0030
      000949 12r00r00         [24] 2253 	lcall	__mulint
      00094C AE 82            [24] 2254 	mov	r6,dpl
      00094E AF 83            [24] 2255 	mov	r7,dph
      000950 15 81            [12] 2256 	dec	sp
      000952 15 81            [12] 2257 	dec	sp
      000954 78r12            [12] 2258 	mov	r0,#_x
      000956 E6               [12] 2259 	mov	a,@r0
      000957 2E               [12] 2260 	add	a,r6
      000958 FE               [12] 2261 	mov	r6,a
      000959 08               [12] 2262 	inc	r0
      00095A E6               [12] 2263 	mov	a,@r0
      00095B 3F               [12] 2264 	addc	a,r7
      00095C FF               [12] 2265 	mov	r7,a
      00095D EE               [12] 2266 	mov	a,r6
      00095E 24r00            [12] 2267 	add	a,#_pu
      000960 F5 82            [12] 2268 	mov	dpl,a
      000962 EF               [12] 2269 	mov	a,r7
      000963 34s24            [12] 2270 	addc	a,#(_pu >> 8)
      000965 F5 83            [12] 2271 	mov	dph,a
      000967 E0               [24] 2272 	movx	a,@dptr
      000968 FD               [12] 2273 	mov	r5,a
      000969 EE               [12] 2274 	mov	a,r6
      00096A 24r00            [12] 2275 	add	a,#_nu
      00096C F5 82            [12] 2276 	mov	dpl,a
      00096E EF               [12] 2277 	mov	a,r7
      00096F 34s6C            [12] 2278 	addc	a,#(_nu >> 8)
      000971 F5 83            [12] 2279 	mov	dph,a
      000973 E0               [24] 2280 	movx	a,@dptr
      000974 FC               [12] 2281 	mov	r4,a
      000975 6D               [12] 2282 	xrl	a,r5
      000976 78r1D            [12] 2283 	mov	r0,#_cycle2
      000978 46               [12] 2284 	orl	a,@r0
      000979 F6               [12] 2285 	mov	@r0,a
                                   2286 ;	life.c:208: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00097A EE               [12] 2287 	mov	a,r6
      00097B 24r00            [12] 2288 	add	a,#_u
      00097D F5 82            [12] 2289 	mov	dpl,a
      00097F EF               [12] 2290 	mov	a,r7
      000980 34s48            [12] 2291 	addc	a,#(_u >> 8)
      000982 F5 83            [12] 2292 	mov	dph,a
      000984 E0               [24] 2293 	movx	a,@dptr
      000985 FF               [12] 2294 	mov	r7,a
      000986 EC               [12] 2295 	mov	a,r4
      000987 6F               [12] 2296 	xrl	a,r7
      000988 78r1C            [12] 2297 	mov	r0,#_fixed
      00098A 46               [12] 2298 	orl	a,@r0
      00098B F6               [12] 2299 	mov	@r0,a
                                   2300 ;	life.c:184: for (x = 0; x < W; x++) {
      00098C 78r12            [12] 2301 	mov	r0,#_x
      00098E 06               [12] 2302 	inc	@r0
      00098F B6 00 02         [24] 2303 	cjne	@r0,#0x00,00568$
      000992 08               [12] 2304 	inc	r0
      000993 06               [12] 2305 	inc	@r0
      000994                       2306 00568$:
      000994 78r12            [12] 2307 	mov	r0,#_x
      000996 C3               [12] 2308 	clr	c
      000997 E6               [12] 2309 	mov	a,@r0
      000998 94 30            [12] 2310 	subb	a,#0x30
      00099A 08               [12] 2311 	inc	r0
      00099B E6               [12] 2312 	mov	a,@r0
      00099C 64 80            [12] 2313 	xrl	a,#0x80
      00099E 94 80            [12] 2314 	subb	a,#0x80
      0009A0 50 03            [24] 2315 	jnc	00569$
      0009A2 02r06r14         [24] 2316 	ljmp	00226$
      0009A5                       2317 00569$:
                                   2318 ;	life.c:181: for (y = 0; y < H; y++) {
      0009A5 78r14            [12] 2319 	mov	r0,#_y
      0009A7 06               [12] 2320 	inc	@r0
      0009A8 B6 00 02         [24] 2321 	cjne	@r0,#0x00,00570$
      0009AB 08               [12] 2322 	inc	r0
      0009AC 06               [12] 2323 	inc	@r0
      0009AD                       2324 00570$:
      0009AD 78r14            [12] 2325 	mov	r0,#_y
      0009AF C3               [12] 2326 	clr	c
      0009B0 E6               [12] 2327 	mov	a,@r0
      0009B1 94 C0            [12] 2328 	subb	a,#0xc0
      0009B3 08               [12] 2329 	inc	r0
      0009B4 E6               [12] 2330 	mov	a,@r0
      0009B5 64 80            [12] 2331 	xrl	a,#0x80
      0009B7 94 80            [12] 2332 	subb	a,#0x80
      0009B9 50 03            [24] 2333 	jnc	00571$
      0009BB 02r05rEC         [24] 2334 	ljmp	00228$
      0009BE                       2335 00571$:
                                   2336 ;	life.c:212: cycle2 = !cycle2;
      0009BE 78r1D            [12] 2337 	mov	r0,#_cycle2
      0009C0 E6               [12] 2338 	mov	a,@r0
      0009C1 B4 01 00         [24] 2339 	cjne	a,#0x01,00572$
      0009C4                       2340 00572$:
      0009C4 92*00            [24] 2341 	mov	b0,c
      0009C6 78r1D            [12] 2342 	mov	r0,#_cycle2
      0009C8 E4               [12] 2343 	clr	a
      0009C9 33               [12] 2344 	rlc	a
      0009CA F6               [12] 2345 	mov	@r0,a
                                   2346 ;	life.c:213: fixed = !fixed;
      0009CB 78r1C            [12] 2347 	mov	r0,#_fixed
      0009CD E6               [12] 2348 	mov	a,@r0
      0009CE B4 01 00         [24] 2349 	cjne	a,#0x01,00573$
      0009D1                       2350 00573$:
      0009D1 92*00            [24] 2351 	mov	b0,c
      0009D3 78r1C            [12] 2352 	mov	r0,#_fixed
      0009D5 E4               [12] 2353 	clr	a
      0009D6 33               [12] 2354 	rlc	a
      0009D7 F6               [12] 2355 	mov	@r0,a
                                   2356 ;	life.c:215: memcpy(pu, u, sizeof (u));
      0009D8 E4               [12] 2357 	clr	a
      0009D9 C0 E0            [24] 2358 	push	acc
      0009DB 74 24            [12] 2359 	mov	a,#0x24
      0009DD C0 E0            [24] 2360 	push	acc
      0009DF 74r00            [12] 2361 	mov	a,#_u
      0009E1 C0 E0            [24] 2362 	push	acc
      0009E3 74s48            [12] 2363 	mov	a,#(_u >> 8)
      0009E5 C0 E0            [24] 2364 	push	acc
      0009E7 E4               [12] 2365 	clr	a
      0009E8 C0 E0            [24] 2366 	push	acc
      0009EA 90r24r00         [24] 2367 	mov	dptr,#_pu
      0009ED 75 F0 00         [24] 2368 	mov	b,#0x00
      0009F0 12r00r00         [24] 2369 	lcall	___memcpy
      0009F3 E5 81            [12] 2370 	mov	a,sp
      0009F5 24 FB            [12] 2371 	add	a,#0xfb
      0009F7 F5 81            [12] 2372 	mov	sp,a
                                   2373 ;	life.c:216: memcpy(u, nu, sizeof (nu));
      0009F9 E4               [12] 2374 	clr	a
      0009FA C0 E0            [24] 2375 	push	acc
      0009FC 74 24            [12] 2376 	mov	a,#0x24
      0009FE C0 E0            [24] 2377 	push	acc
      000A00 74r00            [12] 2378 	mov	a,#_nu
      000A02 C0 E0            [24] 2379 	push	acc
      000A04 74s6C            [12] 2380 	mov	a,#(_nu >> 8)
      000A06 C0 E0            [24] 2381 	push	acc
      000A08 E4               [12] 2382 	clr	a
      000A09 C0 E0            [24] 2383 	push	acc
      000A0B 90r48r00         [24] 2384 	mov	dptr,#_u
      000A0E 75 F0 00         [24] 2385 	mov	b,#0x00
      000A11 12r00r00         [24] 2386 	lcall	___memcpy
      000A14 E5 81            [12] 2387 	mov	a,sp
      000A16 24 FB            [12] 2388 	add	a,#0xfb
      000A18 F5 81            [12] 2389 	mov	sp,a
                                   2390 ;	life.c:260: if (fixed || cycle2) {
      000A1A 78r1C            [12] 2391 	mov	r0,#_fixed
      000A1C E6               [12] 2392 	mov	a,@r0
      000A1D 70 08            [24] 2393 	jnz	00135$
      000A1F 78r1D            [12] 2394 	mov	r0,#_cycle2
      000A21 E6               [12] 2395 	mov	a,@r0
      000A22 70 03            [24] 2396 	jnz	00575$
      000A24 02r05rC4         [24] 2397 	ljmp	00241$
      000A27                       2398 00575$:
      000A27                       2399 00135$:
                                   2400 ;	life.c:261: printstr("DONE ");
      000A27 7Dr5C            [12] 2401 	mov	r5,#___str_7
      000A29 7Es00            [12] 2402 	mov	r6,#(___str_7 >> 8)
      000A2B 7F 80            [12] 2403 	mov	r7,#0x80
                                   2404 ;	life.c:50: return;
      000A2D                       2405 00231$:
                                   2406 ;	life.c:48: for (; *s; s++) putchar(*s);
      000A2D 8D 82            [24] 2407 	mov	dpl,r5
      000A2F 8E 83            [24] 2408 	mov	dph,r6
      000A31 8F F0            [24] 2409 	mov	b,r7
      000A33 12r00r00         [24] 2410 	lcall	__gptrget
      000A36 FC               [12] 2411 	mov	r4,a
      000A37 60 10            [24] 2412 	jz	00192$
      000A39 7B 00            [12] 2413 	mov	r3,#0x00
      000A3B 8C 82            [24] 2414 	mov	dpl,r4
      000A3D 8B 83            [24] 2415 	mov	dph,r3
      000A3F 12r00r00         [24] 2416 	lcall	_putchar
      000A42 0D               [12] 2417 	inc	r5
                                   2418 ;	life.c:261: printstr("DONE ");
      000A43 BD 00 E7         [24] 2419 	cjne	r5,#0x00,00231$
      000A46 0E               [12] 2420 	inc	r6
      000A47 80 E4            [24] 2421 	sjmp	00231$
      000A49                       2422 00192$:
                                   2423 ;	life.c:262: if (fixed) printstr("FIXED\r\n");
      000A49 78r1C            [12] 2424 	mov	r0,#_fixed
      000A4B E6               [12] 2425 	mov	a,@r0
      000A4C 60 22            [24] 2426 	jz	00133$
      000A4E 7Dr62            [12] 2427 	mov	r5,#___str_8
      000A50 7Es00            [12] 2428 	mov	r6,#(___str_8 >> 8)
      000A52 7F 80            [12] 2429 	mov	r7,#0x80
                                   2430 ;	life.c:50: return;
      000A54                       2431 00234$:
                                   2432 ;	life.c:48: for (; *s; s++) putchar(*s);
      000A54 8D 82            [24] 2433 	mov	dpl,r5
      000A56 8E 83            [24] 2434 	mov	dph,r6
      000A58 8F F0            [24] 2435 	mov	b,r7
      000A5A 12r00r00         [24] 2436 	lcall	__gptrget
      000A5D FC               [12] 2437 	mov	r4,a
      000A5E 60 32            [24] 2438 	jz	00134$
      000A60 7B 00            [12] 2439 	mov	r3,#0x00
      000A62 8C 82            [24] 2440 	mov	dpl,r4
      000A64 8B 83            [24] 2441 	mov	dph,r3
      000A66 12r00r00         [24] 2442 	lcall	_putchar
      000A69 0D               [12] 2443 	inc	r5
                                   2444 ;	life.c:262: if (fixed) printstr("FIXED\r\n");
      000A6A BD 00 E7         [24] 2445 	cjne	r5,#0x00,00234$
      000A6D 0E               [12] 2446 	inc	r6
      000A6E 80 E4            [24] 2447 	sjmp	00234$
      000A70                       2448 00133$:
                                   2449 ;	life.c:263: else printstr("CYCLE2\r\n");
      000A70 7Dr6A            [12] 2450 	mov	r5,#___str_9
      000A72 7Es00            [12] 2451 	mov	r6,#(___str_9 >> 8)
      000A74 7F 80            [12] 2452 	mov	r7,#0x80
                                   2453 ;	life.c:50: return;
      000A76                       2454 00237$:
                                   2455 ;	life.c:48: for (; *s; s++) putchar(*s);
      000A76 8D 82            [24] 2456 	mov	dpl,r5
      000A78 8E 83            [24] 2457 	mov	dph,r6
      000A7A 8F F0            [24] 2458 	mov	b,r7
      000A7C 12r00r00         [24] 2459 	lcall	__gptrget
      000A7F FC               [12] 2460 	mov	r4,a
      000A80 60 10            [24] 2461 	jz	00134$
      000A82 7B 00            [12] 2462 	mov	r3,#0x00
      000A84 8C 82            [24] 2463 	mov	dpl,r4
      000A86 8B 83            [24] 2464 	mov	dph,r3
      000A88 12r00r00         [24] 2465 	lcall	_putchar
      000A8B 0D               [12] 2466 	inc	r5
                                   2467 ;	life.c:263: else printstr("CYCLE2\r\n");
      000A8C BD 00 E7         [24] 2468 	cjne	r5,#0x00,00237$
      000A8F 0E               [12] 2469 	inc	r6
      000A90 80 E4            [24] 2470 	sjmp	00237$
      000A92                       2471 00134$:
                                   2472 ;	life.c:264: (void)getchar();
      000A92 12r00r05         [24] 2473 	lcall	_getchar
                                   2474 ;	life.c:265: break;
      000A95                       2475 00138$:
                                   2476 ;	life.c:269: if (i1) {
      000A95 78r11            [12] 2477 	mov	r0,#_i1
      000A97 E6               [12] 2478 	mov	a,@r0
      000A98 60 25            [24] 2479 	jz	00247$
                                   2480 ;	life.c:270: printstr("BREAK\r\n");
      000A9A 7Dr73            [12] 2481 	mov	r5,#___str_10
      000A9C 7Es00            [12] 2482 	mov	r6,#(___str_10 >> 8)
      000A9E 7F 80            [12] 2483 	mov	r7,#0x80
                                   2484 ;	life.c:50: return;
      000AA0                       2485 00244$:
                                   2486 ;	life.c:48: for (; *s; s++) putchar(*s);
      000AA0 8D 82            [24] 2487 	mov	dpl,r5
      000AA2 8E 83            [24] 2488 	mov	dph,r6
      000AA4 8F F0            [24] 2489 	mov	b,r7
      000AA6 12r00r00         [24] 2490 	lcall	__gptrget
      000AA9 FC               [12] 2491 	mov	r4,a
      000AAA 60 10            [24] 2492 	jz	00198$
      000AAC 7B 00            [12] 2493 	mov	r3,#0x00
      000AAE 8C 82            [24] 2494 	mov	dpl,r4
      000AB0 8B 83            [24] 2495 	mov	dph,r3
      000AB2 12r00r00         [24] 2496 	lcall	_putchar
      000AB5 0D               [12] 2497 	inc	r5
                                   2498 ;	life.c:270: printstr("BREAK\r\n");
      000AB6 BD 00 E7         [24] 2499 	cjne	r5,#0x00,00244$
      000AB9 0E               [12] 2500 	inc	r6
      000ABA 80 E4            [24] 2501 	sjmp	00244$
      000ABC                       2502 00198$:
                                   2503 ;	life.c:271: (void)getchar();
      000ABC 12r00r05         [24] 2504 	lcall	_getchar
      000ABF                       2505 00247$:
                                   2506 ;	life.c:232: for (i0 = 0; !i0; ) {	
      000ABF 78r10            [12] 2507 	mov	r0,#_i0
      000AC1 E6               [12] 2508 	mov	a,@r0
      000AC2 70 03            [24] 2509 	jnz	00586$
      000AC4 02r02r49         [24] 2510 	ljmp	00246$
      000AC7                       2511 00586$:
                                   2512 ;	life.c:275: terminate:
      000AC7                       2513 00142$:
                                   2514 ;	life.c:276: EA = 0;
                                   2515 ;	assignBit
      000AC7 C2 AF            [12] 2516 	clr	_EA
                                   2517 ;	life.c:277: printstr("TERM\r\n");
      000AC9 7Dr7B            [12] 2518 	mov	r5,#___str_11
      000ACB 7Es00            [12] 2519 	mov	r6,#(___str_11 >> 8)
      000ACD 7F 80            [12] 2520 	mov	r7,#0x80
                                   2521 ;	life.c:50: return;
      000ACF                       2522 00249$:
                                   2523 ;	life.c:48: for (; *s; s++) putchar(*s);
      000ACF 8D 82            [24] 2524 	mov	dpl,r5
      000AD1 8E 83            [24] 2525 	mov	dph,r6
      000AD3 8F F0            [24] 2526 	mov	b,r7
      000AD5 12r00r00         [24] 2527 	lcall	__gptrget
      000AD8 FC               [12] 2528 	mov	r4,a
      000AD9 60 10            [24] 2529 	jz	00200$
      000ADB 7B 00            [12] 2530 	mov	r3,#0x00
      000ADD 8C 82            [24] 2531 	mov	dpl,r4
      000ADF 8B 83            [24] 2532 	mov	dph,r3
      000AE1 12r00r00         [24] 2533 	lcall	_putchar
      000AE4 0D               [12] 2534 	inc	r5
                                   2535 ;	life.c:277: printstr("TERM\r\n");
      000AE5 BD 00 E7         [24] 2536 	cjne	r5,#0x00,00249$
      000AE8 0E               [12] 2537 	inc	r6
      000AE9 80 E4            [24] 2538 	sjmp	00249$
      000AEB                       2539 00200$:
                                   2540 ;	life.c:278: (void)getchar();
      000AEB 12r00r05         [24] 2541 	lcall	_getchar
                                   2542 ;	life.c:282: __endasm;
      000AEE 02 00 00         [24] 2543 	ljmp	0
                                   2544 ;	life.c:283: }
      000AF1 85*00 81         [24] 2545 	mov	sp,_bp
      000AF4 D0*00            [24] 2546 	pop	_bp
      000AF6 22               [24] 2547 	ret
                                   2548 	.area CSEG    (CODE)
                                   2549 	.area CONST   (CODE)
                                   2550 	.area CONST   (CODE)
      000000                       2551 ___str_0:
      000000 1B                    2552 	.db 0x1b
      000001 5B 32 4A              2553 	.ascii "[2J"
      000004 1B                    2554 	.db 0x1b
      000005 5B 6D 47 45 4E 20     2555 	.ascii "[mGEN "
      00000B 00                    2556 	.db 0x00
                                   2557 	.area CSEG    (CODE)
                                   2558 	.area CONST   (CODE)
      00000C                       2559 ___str_1:
      00000C 0D                    2560 	.db 0x0d
      00000D 0A                    2561 	.db 0x0a
      00000E 00                    2562 	.db 0x00
                                   2563 	.area CSEG    (CODE)
                                   2564 	.area CONST   (CODE)
      00000F                       2565 ___str_2:
      00000F 4C 4F 41 44 20 30 20  2566 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00001D 00                    2567 	.db 0x00
                                   2568 	.area CSEG    (CODE)
                                   2569 	.area CONST   (CODE)
      00001E                       2570 ___str_3:
      00001E 3E                    2571 	.ascii ">"
      00001F 0D                    2572 	.db 0x0d
      000020 0A                    2573 	.db 0x0a
      000021 00                    2574 	.db 0x00
                                   2575 	.area CSEG    (CODE)
                                   2576 	.area CONST   (CODE)
      000022                       2577 ___str_4:
      000022 52 41 4E 44 4F 4D     2578 	.ascii "RANDOM"
      000028 00                    2579 	.db 0x00
                                   2580 	.area CSEG    (CODE)
                                   2581 	.area CONST   (CODE)
      000029                       2582 ___str_5:
      000029 1B                    2583 	.db 0x1b
      00002A 5B 32 4A              2584 	.ascii "[2J"
      00002D 1B                    2585 	.db 0x1b
      00002E 5B 3F 32 35 6C        2586 	.ascii "[?25l"
      000033 1B                    2587 	.db 0x1b
      000034 5B 6D 4C 49 46 45 20  2588 	.ascii "[mLIFE INIT T L R P"
             49 4E 49 54 20 54 20
             4C 20 52 20 50
      000047 0D                    2589 	.db 0x0d
      000048 0A                    2590 	.db 0x0a
      000049 00                    2591 	.db 0x00
                                   2592 	.area CSEG    (CODE)
                                   2593 	.area CONST   (CODE)
      00004A                       2594 ___str_6:
      00004A 52 45 41 44 59 20 54  2595 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000059 0D                    2596 	.db 0x0d
      00005A 0A                    2597 	.db 0x0a
      00005B 00                    2598 	.db 0x00
                                   2599 	.area CSEG    (CODE)
                                   2600 	.area CONST   (CODE)
      00005C                       2601 ___str_7:
      00005C 44 4F 4E 45 20        2602 	.ascii "DONE "
      000061 00                    2603 	.db 0x00
                                   2604 	.area CSEG    (CODE)
                                   2605 	.area CONST   (CODE)
      000062                       2606 ___str_8:
      000062 46 49 58 45 44        2607 	.ascii "FIXED"
      000067 0D                    2608 	.db 0x0d
      000068 0A                    2609 	.db 0x0a
      000069 00                    2610 	.db 0x00
                                   2611 	.area CSEG    (CODE)
                                   2612 	.area CONST   (CODE)
      00006A                       2613 ___str_9:
      00006A 43 59 43 4C 45 32     2614 	.ascii "CYCLE2"
      000070 0D                    2615 	.db 0x0d
      000071 0A                    2616 	.db 0x0a
      000072 00                    2617 	.db 0x00
                                   2618 	.area CSEG    (CODE)
                                   2619 	.area CONST   (CODE)
      000073                       2620 ___str_10:
      000073 42 52 45 41 4B        2621 	.ascii "BREAK"
      000078 0D                    2622 	.db 0x0d
      000079 0A                    2623 	.db 0x0a
      00007A 00                    2624 	.db 0x00
                                   2625 	.area CSEG    (CODE)
                                   2626 	.area CONST   (CODE)
      00007B                       2627 ___str_11:
      00007B 54 45 52 4D           2628 	.ascii "TERM"
      00007F 0D                    2629 	.db 0x0d
      000080 0A                    2630 	.db 0x0a
      000081 00                    2631 	.db 0x00
                                   2632 	.area CSEG    (CODE)
                                   2633 	.area XINIT   (CODE)
                                   2634 	.area CABS    (ABS,CODE)
