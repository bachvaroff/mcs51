                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _evolveu
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print32x
                                     16 	.globl _print16x
                                     17 	.globl _printstr
                                     18 	.globl _getchar_poll
                                     19 	.globl _getchar
                                     20 	.globl _putchar
                                     21 	.globl _toupper
                                     22 	.globl ___memcpy
                                     23 	.globl _memset
                                     24 	.globl _srand
                                     25 	.globl _rand
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable bit register bank
                                    291 ;--------------------------------------------------------
                                    292 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        293 bits:
      000000                        294 	.ds 1
                           008000   295 	b0 = bits[0]
                           008100   296 	b1 = bits[1]
                           008200   297 	b2 = bits[2]
                           008300   298 	b3 = bits[3]
                           008400   299 	b4 = bits[4]
                           008500   300 	b5 = bits[5]
                           008600   301 	b6 = bits[6]
                           008700   302 	b7 = bits[7]
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 ;--------------------------------------------------------
                                    311 ; Stack segment in internal ram 
                                    312 ;--------------------------------------------------------
                                    313 	.area	SSEG
      000000                        314 __start__stack:
      000000                        315 	.ds	1
                                    316 
                                    317 ;--------------------------------------------------------
                                    318 ; indirectly addressable internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area ISEG    (DATA)
      000000                        321 _i0:
      000000                        322 	.ds 1
      000001                        323 _i1:
      000001                        324 	.ds 1
      000002                        325 _OE76:
      000002                        326 	.ds 1
      000003                        327 _gen:
      000003                        328 	.ds 4
      000007                        329 _genc2:
      000007                        330 	.ds 4
      00000B                        331 _genfx:
      00000B                        332 	.ds 4
      00000F                        333 _c2set:
      00000F                        334 	.ds 1
      000010                        335 _fxset:
      000010                        336 	.ds 1
      000011                        337 _pruni:
      000011                        338 	.ds 1
      000012                        339 _fixed:
      000012                        340 	.ds 1
      000013                        341 _cycle2:
      000013                        342 	.ds 1
                                    343 ;--------------------------------------------------------
                                    344 ; absolute internal ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area IABS    (ABS,DATA)
                                    347 	.area IABS    (ABS,DATA)
                                    348 ;--------------------------------------------------------
                                    349 ; bit data
                                    350 ;--------------------------------------------------------
                                    351 	.area BSEG    (BIT)
                                    352 ;--------------------------------------------------------
                                    353 ; paged external ram data
                                    354 ;--------------------------------------------------------
                                    355 	.area PSEG    (PAG,XDATA)
                                    356 ;--------------------------------------------------------
                                    357 ; external ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area XSEG    (XDATA)
                           00E000   360 _RND	=	0xe000
                           00F006   361 _OEreg	=	0xf006
      000000                        362 _iu:
      000000                        363 	.ds 9216
      002400                        364 _pu:
      002400                        365 	.ds 9216
      004800                        366 _u:
      004800                        367 	.ds 9216
      006C00                        368 _nu:
      006C00                        369 	.ds 9216
                                    370 ;--------------------------------------------------------
                                    371 ; absolute external ram data
                                    372 ;--------------------------------------------------------
                                    373 	.area XABS    (ABS,XDATA)
                                    374 ;--------------------------------------------------------
                                    375 ; external initialized ram data
                                    376 ;--------------------------------------------------------
                                    377 	.area XISEG   (XDATA)
                                    378 	.area HOME    (CODE)
                                    379 	.area GSINIT0 (CODE)
                                    380 	.area GSINIT1 (CODE)
                                    381 	.area GSINIT2 (CODE)
                                    382 	.area GSINIT3 (CODE)
                                    383 	.area GSINIT4 (CODE)
                                    384 	.area GSINIT5 (CODE)
                                    385 	.area GSINIT  (CODE)
                                    386 	.area GSFINAL (CODE)
                                    387 	.area CSEG    (CODE)
                                    388 ;--------------------------------------------------------
                                    389 ; interrupt vector 
                                    390 ;--------------------------------------------------------
                                    391 	.area HOME    (CODE)
      000000                        392 __interrupt_vect:
      000000 02r00r00         [24]  393 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  394 	ljmp	_int0
      000006                        395 	.ds	5
      00000B 32               [24]  396 	reti
      00000C                        397 	.ds	7
      000013 02r00r0C         [24]  398 	ljmp	_int1
                                    399 ;--------------------------------------------------------
                                    400 ; global & static initialisations
                                    401 ;--------------------------------------------------------
                                    402 	.area HOME    (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.area GSFINAL (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.globl __sdcc_gsinit_startup
                                    407 	.globl __sdcc_program_startup
                                    408 	.globl __start__stack
                                    409 	.globl __mcs51_genXINIT
                                    410 	.globl __mcs51_genXRAMCLEAR
                                    411 	.globl __mcs51_genRAMCLEAR
                                    412 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  413 	ljmp	__sdcc_program_startup
                                    414 ;--------------------------------------------------------
                                    415 ; Home
                                    416 ;--------------------------------------------------------
                                    417 	.area HOME    (CODE)
                                    418 	.area HOME    (CODE)
      000016                        419 __sdcc_program_startup:
      000016 02r07rDE         [24]  420 	ljmp	_main
                                    421 ;	return from main will return to caller
                                    422 ;--------------------------------------------------------
                                    423 ; code
                                    424 ;--------------------------------------------------------
                                    425 	.area CSEG    (CODE)
                                    426 ;------------------------------------------------------------
                                    427 ;Allocation info for local variables in function 'int0'
                                    428 ;------------------------------------------------------------
                                    429 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    430 ;	-----------------------------------------
                                    431 ;	 function int0
                                    432 ;	-----------------------------------------
      000000                        433 _int0:
                           00000F   434 	ar7 = 0x0f
                           00000E   435 	ar6 = 0x0e
                           00000D   436 	ar5 = 0x0d
                           00000C   437 	ar4 = 0x0c
                           00000B   438 	ar3 = 0x0b
                           00000A   439 	ar2 = 0x0a
                           000009   440 	ar1 = 0x09
                           000008   441 	ar0 = 0x08
      000000 C0 D0            [24]  442 	push	psw
      000002 75 D0 08         [24]  443 	mov	psw,#0x08
                                    444 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  445 	mov	r0,#_i0
      000007 76 01            [12]  446 	mov	@r0,#0x01
                                    447 ;	life.c:15: }
      000009 D0 D0            [24]  448 	pop	psw
      00000B 32               [24]  449 	reti
                                    450 ;	eliminated unneeded push/pop dpl
                                    451 ;	eliminated unneeded push/pop dph
                                    452 ;	eliminated unneeded push/pop b
                                    453 ;	eliminated unneeded push/pop acc
                                    454 ;------------------------------------------------------------
                                    455 ;Allocation info for local variables in function 'int1'
                                    456 ;------------------------------------------------------------
                                    457 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    458 ;	-----------------------------------------
                                    459 ;	 function int1
                                    460 ;	-----------------------------------------
      00000C                        461 _int1:
      00000C C0 D0            [24]  462 	push	psw
      00000E 75 D0 08         [24]  463 	mov	psw,#0x08
                                    464 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  465 	mov	r0,#_i1
      000013 76 01            [12]  466 	mov	@r0,#0x01
                                    467 ;	life.c:19: }
      000015 D0 D0            [24]  468 	pop	psw
      000017 32               [24]  469 	reti
                                    470 ;	eliminated unneeded push/pop dpl
                                    471 ;	eliminated unneeded push/pop dph
                                    472 ;	eliminated unneeded push/pop b
                                    473 ;	eliminated unneeded push/pop acc
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'initu'
                                    476 ;------------------------------------------------------------
                                    477 ;	life.c:91: static void initu(void) {
                                    478 ;	-----------------------------------------
                                    479 ;	 function initu
                                    480 ;	-----------------------------------------
      000018                        481 _initu:
                           000007   482 	ar7 = 0x07
                           000006   483 	ar6 = 0x06
                           000005   484 	ar5 = 0x05
                           000004   485 	ar4 = 0x04
                           000003   486 	ar3 = 0x03
                           000002   487 	ar2 = 0x02
                           000001   488 	ar1 = 0x01
                           000000   489 	ar0 = 0x00
                                    490 ;	life.c:92: memcpy(u, iu, sizeof (iu));
      000018 E4               [12]  491 	clr	a
      000019 C0 E0            [24]  492 	push	acc
      00001B 74 24            [12]  493 	mov	a,#0x24
      00001D C0 E0            [24]  494 	push	acc
      00001F 74r00            [12]  495 	mov	a,#_iu
      000021 C0 E0            [24]  496 	push	acc
      000023 74s00            [12]  497 	mov	a,#(_iu >> 8)
      000025 C0 E0            [24]  498 	push	acc
      000027 E4               [12]  499 	clr	a
      000028 C0 E0            [24]  500 	push	acc
      00002A 90r48r00         [24]  501 	mov	dptr,#_u
      00002D 75 F0 00         [24]  502 	mov	b,#0x00
      000030 12r00r00         [24]  503 	lcall	___memcpy
      000033 E5 81            [12]  504 	mov	a,sp
      000035 24 FB            [12]  505 	add	a,#0xfb
      000037 F5 81            [12]  506 	mov	sp,a
                                    507 ;	life.c:93: memset(pu, 0, sizeof (pu));
      000039 E4               [12]  508 	clr	a
      00003A C0 E0            [24]  509 	push	acc
      00003C 74 24            [12]  510 	mov	a,#0x24
      00003E C0 E0            [24]  511 	push	acc
      000040 E4               [12]  512 	clr	a
      000041 C0 E0            [24]  513 	push	acc
      000043 90r24r00         [24]  514 	mov	dptr,#_pu
      000046 75 F0 00         [24]  515 	mov	b,#0x00
      000049 12r00r00         [24]  516 	lcall	_memset
      00004C 15 81            [12]  517 	dec	sp
      00004E 15 81            [12]  518 	dec	sp
      000050 15 81            [12]  519 	dec	sp
                                    520 ;	life.c:43: gen = 0ul;
      000052 78r03            [12]  521 	mov	r0,#_gen
      000054 E4               [12]  522 	clr	a
      000055 F6               [12]  523 	mov	@r0,a
      000056 08               [12]  524 	inc	r0
      000057 F6               [12]  525 	mov	@r0,a
      000058 08               [12]  526 	inc	r0
      000059 F6               [12]  527 	mov	@r0,a
      00005A 08               [12]  528 	inc	r0
      00005B F6               [12]  529 	mov	@r0,a
                                    530 ;	life.c:44: genc2 = 0ul;
      00005C 78r07            [12]  531 	mov	r0,#_genc2
      00005E F6               [12]  532 	mov	@r0,a
      00005F 08               [12]  533 	inc	r0
      000060 F6               [12]  534 	mov	@r0,a
      000061 08               [12]  535 	inc	r0
      000062 F6               [12]  536 	mov	@r0,a
      000063 08               [12]  537 	inc	r0
      000064 F6               [12]  538 	mov	@r0,a
                                    539 ;	life.c:45: genfx = 0ul;
      000065 78r0B            [12]  540 	mov	r0,#_genfx
      000067 F6               [12]  541 	mov	@r0,a
      000068 08               [12]  542 	inc	r0
      000069 F6               [12]  543 	mov	@r0,a
      00006A 08               [12]  544 	inc	r0
      00006B F6               [12]  545 	mov	@r0,a
      00006C 08               [12]  546 	inc	r0
      00006D F6               [12]  547 	mov	@r0,a
                                    548 ;	life.c:46: c2set = 0;
      00006E 78r0F            [12]  549 	mov	r0,#_c2set
      000070 76 00            [12]  550 	mov	@r0,#0x00
                                    551 ;	life.c:47: fxset = 0;
      000072 78r10            [12]  552 	mov	r0,#_fxset
      000074 76 00            [12]  553 	mov	@r0,#0x00
                                    554 ;	life.c:96: return;
                                    555 ;	life.c:97: }
      000076 22               [24]  556 	ret
                                    557 ;------------------------------------------------------------
                                    558 ;Allocation info for local variables in function 'showu'
                                    559 ;------------------------------------------------------------
                                    560 ;universe                  Allocated to stack - _bp -5
                                    561 ;prflags                   Allocated to registers r7 
                                    562 ;x                         Allocated to stack - _bp +1
                                    563 ;y                         Allocated to registers r4 r5 
                                    564 ;------------------------------------------------------------
                                    565 ;	life.c:104: static void showu(char prflags, char *universe) {
                                    566 ;	-----------------------------------------
                                    567 ;	 function showu
                                    568 ;	-----------------------------------------
      000077                        569 _showu:
      000077 C0*00            [24]  570 	push	_bp
      000079 85 81*00         [24]  571 	mov	_bp,sp
      00007C 05 81            [12]  572 	inc	sp
      00007E 05 81            [12]  573 	inc	sp
                                    574 ;	life.c:107: if (prflags & PRCLR) printstr("\033[2J");
      000080 E5 82            [12]  575 	mov	a,dpl
      000082 FF               [12]  576 	mov	r7,a
      000083 30 E0 0D         [24]  577 	jnb	acc.0,00102$
      000086 90r00r00         [24]  578 	mov	dptr,#___str_0
      000089 75 F0 80         [24]  579 	mov	b,#0x80
      00008C C0 07            [24]  580 	push	ar7
      00008E 12r00r00         [24]  581 	lcall	_printstr
      000091 D0 07            [24]  582 	pop	ar7
      000093                        583 00102$:
                                    584 ;	life.c:108: if (prflags & PRHDR) {
      000093 EF               [12]  585 	mov	a,r7
      000094 30 E1 6B         [24]  586 	jnb	acc.1,00108$
                                    587 ;	life.c:109: printstr("GEN ");
      000097 90r00r05         [24]  588 	mov	dptr,#___str_1
      00009A 75 F0 80         [24]  589 	mov	b,#0x80
      00009D C0 07            [24]  590 	push	ar7
      00009F 12r00r00         [24]  591 	lcall	_printstr
                                    592 ;	life.c:110: print32x(gen);
      0000A2 78r03            [12]  593 	mov	r0,#_gen
      0000A4 86 82            [24]  594 	mov	dpl,@r0
      0000A6 08               [12]  595 	inc	r0
      0000A7 86 83            [24]  596 	mov	dph,@r0
      0000A9 08               [12]  597 	inc	r0
      0000AA 86 F0            [24]  598 	mov	b,@r0
      0000AC 08               [12]  599 	inc	r0
      0000AD E6               [12]  600 	mov	a,@r0
      0000AE 12r00r00         [24]  601 	lcall	_print32x
      0000B1 D0 07            [24]  602 	pop	ar7
                                    603 ;	life.c:111: if (c2set) {
      0000B3 78r0F            [12]  604 	mov	r0,#_c2set
      0000B5 E6               [12]  605 	mov	a,@r0
      0000B6 60 1C            [24]  606 	jz	00104$
                                    607 ;	life.c:112: printstr(" CYCLE2 ");
      0000B8 90r00r0A         [24]  608 	mov	dptr,#___str_2
      0000BB 75 F0 80         [24]  609 	mov	b,#0x80
      0000BE C0 07            [24]  610 	push	ar7
      0000C0 12r00r00         [24]  611 	lcall	_printstr
                                    612 ;	life.c:113: print32x(genc2);
      0000C3 78r07            [12]  613 	mov	r0,#_genc2
      0000C5 86 82            [24]  614 	mov	dpl,@r0
      0000C7 08               [12]  615 	inc	r0
      0000C8 86 83            [24]  616 	mov	dph,@r0
      0000CA 08               [12]  617 	inc	r0
      0000CB 86 F0            [24]  618 	mov	b,@r0
      0000CD 08               [12]  619 	inc	r0
      0000CE E6               [12]  620 	mov	a,@r0
      0000CF 12r00r00         [24]  621 	lcall	_print32x
      0000D2 D0 07            [24]  622 	pop	ar7
      0000D4                        623 00104$:
                                    624 ;	life.c:115: if (fxset) {
      0000D4 78r10            [12]  625 	mov	r0,#_fxset
      0000D6 E6               [12]  626 	mov	a,@r0
      0000D7 60 1C            [24]  627 	jz	00106$
                                    628 ;	life.c:116: printstr(" FIXED ");
      0000D9 90r00r13         [24]  629 	mov	dptr,#___str_3
      0000DC 75 F0 80         [24]  630 	mov	b,#0x80
      0000DF C0 07            [24]  631 	push	ar7
      0000E1 12r00r00         [24]  632 	lcall	_printstr
                                    633 ;	life.c:117: print32x(genfx);
      0000E4 78r0B            [12]  634 	mov	r0,#_genfx
      0000E6 86 82            [24]  635 	mov	dpl,@r0
      0000E8 08               [12]  636 	inc	r0
      0000E9 86 83            [24]  637 	mov	dph,@r0
      0000EB 08               [12]  638 	inc	r0
      0000EC 86 F0            [24]  639 	mov	b,@r0
      0000EE 08               [12]  640 	inc	r0
      0000EF E6               [12]  641 	mov	a,@r0
      0000F0 12r00r00         [24]  642 	lcall	_print32x
      0000F3 D0 07            [24]  643 	pop	ar7
      0000F5                        644 00106$:
                                    645 ;	life.c:119: printstr("\r\n");
      0000F5 90r00r1B         [24]  646 	mov	dptr,#___str_4
      0000F8 75 F0 80         [24]  647 	mov	b,#0x80
      0000FB C0 07            [24]  648 	push	ar7
      0000FD 12r00r00         [24]  649 	lcall	_printstr
      000100 D0 07            [24]  650 	pop	ar7
      000102                        651 00108$:
                                    652 ;	life.c:121: if (prflags & PRUNI) {
      000102 EF               [12]  653 	mov	a,r7
      000103 20 E2 03         [24]  654 	jb	acc.2,00168$
      000106 02r01rBF         [24]  655 	ljmp	00115$
      000109                        656 00168$:
                                    657 ;	life.c:122: printstr("\033[?25l");
      000109 90r00r1E         [24]  658 	mov	dptr,#___str_5
      00010C 75 F0 80         [24]  659 	mov	b,#0x80
      00010F 12r00r00         [24]  660 	lcall	_printstr
                                    661 ;	life.c:123: for (x = 0; x < W; x++) {
      000112 A8*00            [24]  662 	mov	r0,_bp
      000114 08               [12]  663 	inc	r0
      000115 E4               [12]  664 	clr	a
      000116 F6               [12]  665 	mov	@r0,a
      000117 08               [12]  666 	inc	r0
      000118 F6               [12]  667 	mov	@r0,a
                                    668 ;	life.c:124: for (y = 0; y < H; y++)
      000119                        669 00128$:
      000119 7C 00            [12]  670 	mov	r4,#0x00
      00011B 7D 00            [12]  671 	mov	r5,#0x00
      00011D 7A 00            [12]  672 	mov	r2,#0x00
      00011F 7B 00            [12]  673 	mov	r3,#0x00
      000121                        674 00116$:
                                    675 ;	life.c:125: if (universe[A2D(W, y, x)]) putchar((int)'1');
      000121 C0 04            [24]  676 	push	ar4
      000123 C0 05            [24]  677 	push	ar5
      000125 A8*00            [24]  678 	mov	r0,_bp
      000127 08               [12]  679 	inc	r0
      000128 E6               [12]  680 	mov	a,@r0
      000129 2A               [12]  681 	add	a,r2
      00012A FC               [12]  682 	mov	r4,a
      00012B 08               [12]  683 	inc	r0
      00012C E6               [12]  684 	mov	a,@r0
      00012D 3B               [12]  685 	addc	a,r3
      00012E FD               [12]  686 	mov	r5,a
      00012F E5*00            [12]  687 	mov	a,_bp
      000131 24 FB            [12]  688 	add	a,#0xfb
      000133 F8               [12]  689 	mov	r0,a
      000134 EC               [12]  690 	mov	a,r4
      000135 26               [12]  691 	add	a,@r0
      000136 FC               [12]  692 	mov	r4,a
      000137 ED               [12]  693 	mov	a,r5
      000138 08               [12]  694 	inc	r0
      000139 36               [12]  695 	addc	a,@r0
      00013A FD               [12]  696 	mov	r5,a
      00013B 08               [12]  697 	inc	r0
      00013C 86 07            [24]  698 	mov	ar7,@r0
      00013E 8C 82            [24]  699 	mov	dpl,r4
      000140 8D 83            [24]  700 	mov	dph,r5
      000142 8F F0            [24]  701 	mov	b,r7
      000144 12r00r00         [24]  702 	lcall	__gptrget
      000147 D0 05            [24]  703 	pop	ar5
      000149 D0 04            [24]  704 	pop	ar4
      00014B 60 18            [24]  705 	jz	00110$
      00014D 90 00 31         [24]  706 	mov	dptr,#0x0031
      000150 C0 05            [24]  707 	push	ar5
      000152 C0 04            [24]  708 	push	ar4
      000154 C0 03            [24]  709 	push	ar3
      000156 C0 02            [24]  710 	push	ar2
      000158 12r00r00         [24]  711 	lcall	_putchar
      00015B D0 02            [24]  712 	pop	ar2
      00015D D0 03            [24]  713 	pop	ar3
      00015F D0 04            [24]  714 	pop	ar4
      000161 D0 05            [24]  715 	pop	ar5
      000163 80 16            [24]  716 	sjmp	00117$
      000165                        717 00110$:
                                    718 ;	life.c:126: else putchar((int)'0');
      000165 90 00 30         [24]  719 	mov	dptr,#0x0030
      000168 C0 05            [24]  720 	push	ar5
      00016A C0 04            [24]  721 	push	ar4
      00016C C0 03            [24]  722 	push	ar3
      00016E C0 02            [24]  723 	push	ar2
      000170 12r00r00         [24]  724 	lcall	_putchar
      000173 D0 02            [24]  725 	pop	ar2
      000175 D0 03            [24]  726 	pop	ar3
      000177 D0 04            [24]  727 	pop	ar4
      000179 D0 05            [24]  728 	pop	ar5
      00017B                        729 00117$:
                                    730 ;	life.c:124: for (y = 0; y < H; y++)
      00017B 74 30            [12]  731 	mov	a,#0x30
      00017D 2A               [12]  732 	add	a,r2
      00017E FA               [12]  733 	mov	r2,a
      00017F E4               [12]  734 	clr	a
      000180 3B               [12]  735 	addc	a,r3
      000181 FB               [12]  736 	mov	r3,a
      000182 0C               [12]  737 	inc	r4
      000183 BC 00 01         [24]  738 	cjne	r4,#0x00,00170$
      000186 0D               [12]  739 	inc	r5
      000187                        740 00170$:
      000187 C3               [12]  741 	clr	c
      000188 EC               [12]  742 	mov	a,r4
      000189 94 C0            [12]  743 	subb	a,#0xc0
      00018B ED               [12]  744 	mov	a,r5
      00018C 64 80            [12]  745 	xrl	a,#0x80
      00018E 94 80            [12]  746 	subb	a,#0x80
      000190 40 8F            [24]  747 	jc	00116$
                                    748 ;	life.c:127: printstr("\r\n");
      000192 90r00r1B         [24]  749 	mov	dptr,#___str_4
      000195 75 F0 80         [24]  750 	mov	b,#0x80
      000198 12r00r00         [24]  751 	lcall	_printstr
                                    752 ;	life.c:123: for (x = 0; x < W; x++) {
      00019B A8*00            [24]  753 	mov	r0,_bp
      00019D 08               [12]  754 	inc	r0
      00019E 06               [12]  755 	inc	@r0
      00019F B6 00 02         [24]  756 	cjne	@r0,#0x00,00172$
      0001A2 08               [12]  757 	inc	r0
      0001A3 06               [12]  758 	inc	@r0
      0001A4                        759 00172$:
      0001A4 A8*00            [24]  760 	mov	r0,_bp
      0001A6 08               [12]  761 	inc	r0
      0001A7 C3               [12]  762 	clr	c
      0001A8 E6               [12]  763 	mov	a,@r0
      0001A9 94 30            [12]  764 	subb	a,#0x30
      0001AB 08               [12]  765 	inc	r0
      0001AC E6               [12]  766 	mov	a,@r0
      0001AD 64 80            [12]  767 	xrl	a,#0x80
      0001AF 94 80            [12]  768 	subb	a,#0x80
      0001B1 50 03            [24]  769 	jnc	00173$
      0001B3 02r01r19         [24]  770 	ljmp	00128$
      0001B6                        771 00173$:
                                    772 ;	life.c:129: printstr("\033[?25h");
      0001B6 90r00r25         [24]  773 	mov	dptr,#___str_6
      0001B9 75 F0 80         [24]  774 	mov	b,#0x80
      0001BC 12r00r00         [24]  775 	lcall	_printstr
      0001BF                        776 00115$:
                                    777 ;	life.c:132: return;
                                    778 ;	life.c:133: }
      0001BF 85*00 81         [24]  779 	mov	sp,_bp
      0001C2 D0*00            [24]  780 	pop	_bp
      0001C4 22               [24]  781 	ret
                                    782 ;------------------------------------------------------------
                                    783 ;Allocation info for local variables in function 'loadiu'
                                    784 ;------------------------------------------------------------
                                    785 ;x                         Allocated to registers r2 r3 
                                    786 ;y                         Allocated to registers r4 r5 
                                    787 ;nbits                     Allocated to stack - _bp +3
                                    788 ;c                         Allocated to registers r6 r7 
                                    789 ;sloc0                     Allocated to stack - _bp +1
                                    790 ;------------------------------------------------------------
                                    791 ;	life.c:135: static void loadiu(void) {
                                    792 ;	-----------------------------------------
                                    793 ;	 function loadiu
                                    794 ;	-----------------------------------------
      0001C5                        795 _loadiu:
      0001C5 C0*00            [24]  796 	push	_bp
      0001C7 E5 81            [12]  797 	mov	a,sp
      0001C9 F5*00            [12]  798 	mov	_bp,a
      0001CB 24 04            [12]  799 	add	a,#0x04
      0001CD F5 81            [12]  800 	mov	sp,a
                                    801 ;	life.c:139: memset(iu, 0, sizeof (iu));
      0001CF E4               [12]  802 	clr	a
      0001D0 C0 E0            [24]  803 	push	acc
      0001D2 74 24            [12]  804 	mov	a,#0x24
      0001D4 C0 E0            [24]  805 	push	acc
      0001D6 E4               [12]  806 	clr	a
      0001D7 C0 E0            [24]  807 	push	acc
      0001D9 90r00r00         [24]  808 	mov	dptr,#_iu
      0001DC 75 F0 00         [24]  809 	mov	b,#0x00
      0001DF 12r00r00         [24]  810 	lcall	_memset
      0001E2 15 81            [12]  811 	dec	sp
      0001E4 15 81            [12]  812 	dec	sp
      0001E6 15 81            [12]  813 	dec	sp
                                    814 ;	life.c:141: printstr("LOAD 0 1 ~ # <");
      0001E8 90r00r2C         [24]  815 	mov	dptr,#___str_7
      0001EB 75 F0 80         [24]  816 	mov	b,#0x80
      0001EE 12r00r00         [24]  817 	lcall	_printstr
                                    818 ;	life.c:143: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0001F1 E5*00            [12]  819 	mov	a,_bp
      0001F3 24 03            [12]  820 	add	a,#0x03
      0001F5 F8               [12]  821 	mov	r0,a
      0001F6 E4               [12]  822 	clr	a
      0001F7 F6               [12]  823 	mov	@r0,a
      0001F8 08               [12]  824 	inc	r0
      0001F9 F6               [12]  825 	mov	@r0,a
      0001FA 7C 00            [12]  826 	mov	r4,#0x00
      0001FC 7D 00            [12]  827 	mov	r5,#0x00
      0001FE                        828 00129$:
      0001FE C3               [12]  829 	clr	c
      0001FF ED               [12]  830 	mov	a,r5
      000200 64 80            [12]  831 	xrl	a,#0x80
      000202 94 A4            [12]  832 	subb	a,#0xa4
      000204 40 03            [24]  833 	jc	00174$
      000206 02r02rB3         [24]  834 	ljmp	00119$
      000209                        835 00174$:
                                    836 ;	life.c:145: while (1) {
      000209 7A 00            [12]  837 	mov	r2,#0x00
      00020B 7B 00            [12]  838 	mov	r3,#0x00
      00020D                        839 00113$:
                                    840 ;	life.c:146: c = getchar();
      00020D C0 05            [24]  841 	push	ar5
      00020F C0 04            [24]  842 	push	ar4
      000211 C0 03            [24]  843 	push	ar3
      000213 C0 02            [24]  844 	push	ar2
      000215 12r00r00         [24]  845 	lcall	_getchar
      000218 A8*00            [24]  846 	mov	r0,_bp
      00021A 08               [12]  847 	inc	r0
      00021B A6 82            [24]  848 	mov	@r0,dpl
      00021D 08               [12]  849 	inc	r0
      00021E A6 83            [24]  850 	mov	@r0,dph
      000220 D0 02            [24]  851 	pop	ar2
      000222 D0 03            [24]  852 	pop	ar3
      000224 D0 04            [24]  853 	pop	ar4
      000226 D0 05            [24]  854 	pop	ar5
                                    855 ;	life.c:147: if (c == (int)'0') {
      000228 A8*00            [24]  856 	mov	r0,_bp
      00022A 08               [12]  857 	inc	r0
      00022B B6 30 23         [24]  858 	cjne	@r0,#0x30,00110$
      00022E 08               [12]  859 	inc	r0
      00022F B6 00 1F         [24]  860 	cjne	@r0,#0x00,00110$
                                    861 ;	life.c:148: iu[y + x] = 0;
      000232 EA               [12]  862 	mov	a,r2
      000233 2C               [12]  863 	add	a,r4
      000234 FE               [12]  864 	mov	r6,a
      000235 EB               [12]  865 	mov	a,r3
      000236 3D               [12]  866 	addc	a,r5
      000237 FF               [12]  867 	mov	r7,a
      000238 EE               [12]  868 	mov	a,r6
      000239 24r00            [12]  869 	add	a,#_iu
      00023B F5 82            [12]  870 	mov	dpl,a
      00023D EF               [12]  871 	mov	a,r7
      00023E 34s00            [12]  872 	addc	a,#(_iu >> 8)
      000240 F5 83            [12]  873 	mov	dph,a
      000242 E4               [12]  874 	clr	a
      000243 F0               [24]  875 	movx	@dptr,a
                                    876 ;	life.c:149: nbits++;
      000244 E5*00            [12]  877 	mov	a,_bp
      000246 24 03            [12]  878 	add	a,#0x03
      000248 F8               [12]  879 	mov	r0,a
      000249 06               [12]  880 	inc	@r0
      00024A B6 00 02         [24]  881 	cjne	@r0,#0x00,00177$
      00024D 08               [12]  882 	inc	r0
      00024E 06               [12]  883 	inc	@r0
      00024F                        884 00177$:
                                    885 ;	life.c:150: break;
      00024F 80 45            [24]  886 	sjmp	00116$
      000251                        887 00110$:
                                    888 ;	life.c:151: } else if (c == (int)'1') {
      000251 A8*00            [24]  889 	mov	r0,_bp
      000253 08               [12]  890 	inc	r0
      000254 B6 31 24         [24]  891 	cjne	@r0,#0x31,00107$
      000257 08               [12]  892 	inc	r0
      000258 B6 00 20         [24]  893 	cjne	@r0,#0x00,00107$
                                    894 ;	life.c:152: iu[y + x] = 1;
      00025B EA               [12]  895 	mov	a,r2
      00025C 2C               [12]  896 	add	a,r4
      00025D FE               [12]  897 	mov	r6,a
      00025E EB               [12]  898 	mov	a,r3
      00025F 3D               [12]  899 	addc	a,r5
      000260 FF               [12]  900 	mov	r7,a
      000261 EE               [12]  901 	mov	a,r6
      000262 24r00            [12]  902 	add	a,#_iu
      000264 F5 82            [12]  903 	mov	dpl,a
      000266 EF               [12]  904 	mov	a,r7
      000267 34s00            [12]  905 	addc	a,#(_iu >> 8)
      000269 F5 83            [12]  906 	mov	dph,a
      00026B 74 01            [12]  907 	mov	a,#0x01
      00026D F0               [24]  908 	movx	@dptr,a
                                    909 ;	life.c:153: nbits++;
      00026E E5*00            [12]  910 	mov	a,_bp
      000270 24 03            [12]  911 	add	a,#0x03
      000272 F8               [12]  912 	mov	r0,a
      000273 06               [12]  913 	inc	@r0
      000274 B6 00 02         [24]  914 	cjne	@r0,#0x00,00180$
      000277 08               [12]  915 	inc	r0
      000278 06               [12]  916 	inc	@r0
      000279                        917 00180$:
                                    918 ;	life.c:154: break;
      000279 80 1B            [24]  919 	sjmp	00116$
      00027B                        920 00107$:
                                    921 ;	life.c:155: } else if (c == (int)'~') goto br_inner;
      00027B A8*00            [24]  922 	mov	r0,_bp
      00027D 08               [12]  923 	inc	r0
      00027E B6 7E 06         [24]  924 	cjne	@r0,#0x7e,00181$
      000281 08               [12]  925 	inc	r0
      000282 B6 00 02         [24]  926 	cjne	@r0,#0x00,00181$
      000285 80 22            [24]  927 	sjmp	00130$
      000287                        928 00181$:
                                    929 ;	life.c:156: else if (c == (int)'#') goto out;
      000287 A8*00            [24]  930 	mov	r0,_bp
      000289 08               [12]  931 	inc	r0
      00028A B6 23 06         [24]  932 	cjne	@r0,#0x23,00182$
      00028D 08               [12]  933 	inc	r0
      00028E B6 00 02         [24]  934 	cjne	@r0,#0x00,00182$
      000291 80 20            [24]  935 	sjmp	00119$
      000293                        936 00182$:
      000293 02r02r0D         [24]  937 	ljmp	00113$
                                    938 ;	life.c:160: break;
      000296                        939 00116$:
                                    940 ;	life.c:144: for (x = 0; x < W; x++) {
      000296 0A               [12]  941 	inc	r2
      000297 BA 00 01         [24]  942 	cjne	r2,#0x00,00183$
      00029A 0B               [12]  943 	inc	r3
      00029B                        944 00183$:
      00029B C3               [12]  945 	clr	c
      00029C EA               [12]  946 	mov	a,r2
      00029D 94 30            [12]  947 	subb	a,#0x30
      00029F EB               [12]  948 	mov	a,r3
      0002A0 64 80            [12]  949 	xrl	a,#0x80
      0002A2 94 80            [12]  950 	subb	a,#0x80
      0002A4 50 03            [24]  951 	jnc	00184$
      0002A6 02r02r0D         [24]  952 	ljmp	00113$
      0002A9                        953 00184$:
      0002A9                        954 00130$:
                                    955 ;	life.c:143: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0002A9 74 30            [12]  956 	mov	a,#0x30
      0002AB 2C               [12]  957 	add	a,r4
      0002AC FC               [12]  958 	mov	r4,a
      0002AD E4               [12]  959 	clr	a
      0002AE 3D               [12]  960 	addc	a,r5
      0002AF FD               [12]  961 	mov	r5,a
      0002B0 02r01rFE         [24]  962 	ljmp	00129$
                                    963 ;	life.c:164: out:
      0002B3                        964 00119$:
                                    965 ;	life.c:165: if (c != (int)'#')
      0002B3 A8*00            [24]  966 	mov	r0,_bp
      0002B5 08               [12]  967 	inc	r0
      0002B6 B6 23 06         [24]  968 	cjne	@r0,#0x23,00185$
      0002B9 08               [12]  969 	inc	r0
      0002BA B6 00 02         [24]  970 	cjne	@r0,#0x00,00185$
      0002BD 80 0D            [24]  971 	sjmp	00126$
      0002BF                        972 00185$:
                                    973 ;	life.c:166: while (1) {
      0002BF                        974 00123$:
                                    975 ;	life.c:167: c = getchar();
      0002BF 12r00r00         [24]  976 	lcall	_getchar
      0002C2 AE 82            [24]  977 	mov	r6,dpl
      0002C4 AF 83            [24]  978 	mov	r7,dph
                                    979 ;	life.c:168: if (c == (int)'#') break;
      0002C6 BE 23 F6         [24]  980 	cjne	r6,#0x23,00123$
      0002C9 BF 00 F3         [24]  981 	cjne	r7,#0x00,00123$
      0002CC                        982 00126$:
                                    983 ;	life.c:170: print16x(nbits);
      0002CC E5*00            [12]  984 	mov	a,_bp
      0002CE 24 03            [12]  985 	add	a,#0x03
      0002D0 F8               [12]  986 	mov	r0,a
      0002D1 86 82            [24]  987 	mov	dpl,@r0
      0002D3 08               [12]  988 	inc	r0
      0002D4 86 83            [24]  989 	mov	dph,@r0
      0002D6 12r00r00         [24]  990 	lcall	_print16x
                                    991 ;	life.c:171: printstr(">\r\n");
      0002D9 90r00r3B         [24]  992 	mov	dptr,#___str_8
      0002DC 75 F0 80         [24]  993 	mov	b,#0x80
      0002DF 12r00r00         [24]  994 	lcall	_printstr
                                    995 ;	life.c:173: return;
                                    996 ;	life.c:174: }
      0002E2 85*00 81         [24]  997 	mov	sp,_bp
      0002E5 D0*00            [24]  998 	pop	_bp
      0002E7 22               [24]  999 	ret
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'loadriu'
                                   1002 ;------------------------------------------------------------
                                   1003 ;x                         Allocated to registers r4 r5 
                                   1004 ;y                         Allocated to registers r6 r7 
                                   1005 ;------------------------------------------------------------
                                   1006 ;	life.c:176: static void loadriu(void) {
                                   1007 ;	-----------------------------------------
                                   1008 ;	 function loadriu
                                   1009 ;	-----------------------------------------
      0002E8                       1010 _loadriu:
                                   1011 ;	life.c:179: printstr("RANDOM");
      0002E8 90r00r3F         [24] 1012 	mov	dptr,#___str_9
      0002EB 75 F0 80         [24] 1013 	mov	b,#0x80
      0002EE 12r00r00         [24] 1014 	lcall	_printstr
                                   1015 ;	life.c:181: for (y = 0; y < (H * W); y += W)
      0002F1 7E 00            [12] 1016 	mov	r6,#0x00
      0002F3 7F 00            [12] 1017 	mov	r7,#0x00
                                   1018 ;	life.c:182: for (x = 0; x < W; x++)
      0002F5                       1019 00109$:
      0002F5 7C 00            [12] 1020 	mov	r4,#0x00
      0002F7 7D 00            [12] 1021 	mov	r5,#0x00
      0002F9                       1022 00103$:
                                   1023 ;	life.c:183: iu[y + x] = rand() & 1;
      0002F9 EC               [12] 1024 	mov	a,r4
      0002FA 2E               [12] 1025 	add	a,r6
      0002FB FA               [12] 1026 	mov	r2,a
      0002FC ED               [12] 1027 	mov	a,r5
      0002FD 3F               [12] 1028 	addc	a,r7
      0002FE FB               [12] 1029 	mov	r3,a
      0002FF EA               [12] 1030 	mov	a,r2
      000300 24r00            [12] 1031 	add	a,#_iu
      000302 FA               [12] 1032 	mov	r2,a
      000303 EB               [12] 1033 	mov	a,r3
      000304 34s00            [12] 1034 	addc	a,#(_iu >> 8)
      000306 FB               [12] 1035 	mov	r3,a
      000307 C0 07            [24] 1036 	push	ar7
      000309 C0 06            [24] 1037 	push	ar6
      00030B C0 05            [24] 1038 	push	ar5
      00030D C0 04            [24] 1039 	push	ar4
      00030F C0 03            [24] 1040 	push	ar3
      000311 C0 02            [24] 1041 	push	ar2
      000313 12r00r00         [24] 1042 	lcall	_rand
      000316 A8 82            [24] 1043 	mov	r0,dpl
      000318 D0 02            [24] 1044 	pop	ar2
      00031A D0 03            [24] 1045 	pop	ar3
      00031C D0 04            [24] 1046 	pop	ar4
      00031E D0 05            [24] 1047 	pop	ar5
      000320 D0 06            [24] 1048 	pop	ar6
      000322 D0 07            [24] 1049 	pop	ar7
      000324 53 00 01         [24] 1050 	anl	ar0,#0x01
      000327 8A 82            [24] 1051 	mov	dpl,r2
      000329 8B 83            [24] 1052 	mov	dph,r3
      00032B E8               [12] 1053 	mov	a,r0
      00032C F0               [24] 1054 	movx	@dptr,a
                                   1055 ;	life.c:182: for (x = 0; x < W; x++)
      00032D 0C               [12] 1056 	inc	r4
      00032E BC 00 01         [24] 1057 	cjne	r4,#0x00,00127$
      000331 0D               [12] 1058 	inc	r5
      000332                       1059 00127$:
      000332 C3               [12] 1060 	clr	c
      000333 EC               [12] 1061 	mov	a,r4
      000334 94 30            [12] 1062 	subb	a,#0x30
      000336 ED               [12] 1063 	mov	a,r5
      000337 64 80            [12] 1064 	xrl	a,#0x80
      000339 94 80            [12] 1065 	subb	a,#0x80
      00033B 40 BC            [24] 1066 	jc	00103$
                                   1067 ;	life.c:181: for (y = 0; y < (H * W); y += W)
      00033D 74 30            [12] 1068 	mov	a,#0x30
      00033F 2E               [12] 1069 	add	a,r6
      000340 FE               [12] 1070 	mov	r6,a
      000341 E4               [12] 1071 	clr	a
      000342 3F               [12] 1072 	addc	a,r7
      000343 FF               [12] 1073 	mov	r7,a
      000344 C3               [12] 1074 	clr	c
      000345 64 80            [12] 1075 	xrl	a,#0x80
      000347 94 A4            [12] 1076 	subb	a,#0xa4
      000349 40 AA            [24] 1077 	jc	00109$
                                   1078 ;	life.c:185: printstr("\r\n");
      00034B 90r00r1B         [24] 1079 	mov	dptr,#___str_4
      00034E 75 F0 80         [24] 1080 	mov	b,#0x80
                                   1081 ;	life.c:187: return;
                                   1082 ;	life.c:188: }
      000351 02r00r00         [24] 1083 	ljmp	_printstr
                                   1084 ;------------------------------------------------------------
                                   1085 ;Allocation info for local variables in function 'evolveu'
                                   1086 ;------------------------------------------------------------
                                   1087 ;x                         Allocated to stack - _bp +15
                                   1088 ;y                         Allocated to stack - _bp +17
                                   1089 ;n                         Allocated to registers 
                                   1090 ;sloc0                     Allocated to stack - _bp +1
                                   1091 ;sloc1                     Allocated to stack - _bp +3
                                   1092 ;sloc2                     Allocated to stack - _bp +5
                                   1093 ;sloc3                     Allocated to stack - _bp +7
                                   1094 ;sloc4                     Allocated to stack - _bp +9
                                   1095 ;sloc5                     Allocated to stack - _bp +11
                                   1096 ;sloc6                     Allocated to stack - _bp +13
                                   1097 ;------------------------------------------------------------
                                   1098 ;	life.c:190: void evolveu(void) {
                                   1099 ;	-----------------------------------------
                                   1100 ;	 function evolveu
                                   1101 ;	-----------------------------------------
      000354                       1102 _evolveu:
      000354 C0*00            [24] 1103 	push	_bp
      000356 E5 81            [12] 1104 	mov	a,sp
      000358 F5*00            [12] 1105 	mov	_bp,a
      00035A 24 12            [12] 1106 	add	a,#0x12
      00035C F5 81            [12] 1107 	mov	sp,a
                                   1108 ;	life.c:194: fixed = 0;
      00035E 78r12            [12] 1109 	mov	r0,#_fixed
      000360 76 00            [12] 1110 	mov	@r0,#0x00
                                   1111 ;	life.c:195: cycle2 = 0;
      000362 78r13            [12] 1112 	mov	r0,#_cycle2
      000364 76 00            [12] 1113 	mov	@r0,#0x00
                                   1114 ;	life.c:197: OE76 = OE76_0;
      000366 78r02            [12] 1115 	mov	r0,#_OE76
      000368 76 3F            [12] 1116 	mov	@r0,#0x3f
                                   1117 ;	life.c:30: OEreg = OE76;
      00036A 90 F0 06         [24] 1118 	mov	dptr,#_OEreg
      00036D 74 3F            [12] 1119 	mov	a,#0x3f
      00036F F0               [24] 1120 	movx	@dptr,a
                                   1121 ;	life.c:200: for (y = 0; y < H; y++) {
      000370 E5*00            [12] 1122 	mov	a,_bp
      000372 24 11            [12] 1123 	add	a,#0x11
      000374 F8               [12] 1124 	mov	r0,a
      000375 E4               [12] 1125 	clr	a
      000376 F6               [12] 1126 	mov	@r0,a
      000377 08               [12] 1127 	inc	r0
      000378 F6               [12] 1128 	mov	@r0,a
      000379 E4               [12] 1129 	clr	a
      00037A FC               [12] 1130 	mov	r4,a
      00037B FD               [12] 1131 	mov	r5,a
      00037C E5*00            [12] 1132 	mov	a,_bp
      00037E 24 0B            [12] 1133 	add	a,#0x0b
      000380 F8               [12] 1134 	mov	r0,a
      000381 E4               [12] 1135 	clr	a
      000382 F6               [12] 1136 	mov	@r0,a
      000383 08               [12] 1137 	inc	r0
      000384 F6               [12] 1138 	mov	@r0,a
      000385                       1139 00135$:
                                   1140 ;	life.c:201: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000385 C0 04            [24] 1141 	push	ar4
      000387 C0 05            [24] 1142 	push	ar5
      000389 E5*00            [12] 1143 	mov	a,_bp
      00038B 24 11            [12] 1144 	add	a,#0x11
      00038D F8               [12] 1145 	mov	r0,a
      00038E 86 05            [24] 1146 	mov	ar5,@r0
      000390 53 05 03         [24] 1147 	anl	ar5,#0x03
      000393 ED               [12] 1148 	mov	a,r5
      000394 03               [12] 1149 	rr	a
      000395 03               [12] 1150 	rr	a
      000396 54 C0            [12] 1151 	anl	a,#0xc0
      000398 FD               [12] 1152 	mov	r5,a
      000399 43 05 3F         [24] 1153 	orl	ar5,#0x3f
      00039C 78r02            [12] 1154 	mov	r0,#_OE76
      00039E A6 05            [24] 1155 	mov	@r0,ar5
                                   1156 ;	life.c:30: OEreg = OE76;
      0003A0 90 F0 06         [24] 1157 	mov	dptr,#_OEreg
      0003A3 ED               [12] 1158 	mov	a,r5
      0003A4 F0               [24] 1159 	movx	@dptr,a
                                   1160 ;	life.c:203: for (x = 0; x < W; x++) {
      0003A5 E5*00            [12] 1161 	mov	a,_bp
      0003A7 24 11            [12] 1162 	add	a,#0x11
      0003A9 F8               [12] 1163 	mov	r0,a
      0003AA 74 BF            [12] 1164 	mov	a,#0xbf
      0003AC 26               [12] 1165 	add	a,@r0
      0003AD FC               [12] 1166 	mov	r4,a
      0003AE E4               [12] 1167 	clr	a
      0003AF 08               [12] 1168 	inc	r0
      0003B0 36               [12] 1169 	addc	a,@r0
      0003B1 FD               [12] 1170 	mov	r5,a
      0003B2 74 C0            [12] 1171 	mov	a,#0xc0
      0003B4 C0 E0            [24] 1172 	push	acc
      0003B6 E4               [12] 1173 	clr	a
      0003B7 C0 E0            [24] 1174 	push	acc
      0003B9 8C 82            [24] 1175 	mov	dpl,r4
      0003BB 8D 83            [24] 1176 	mov	dph,r5
      0003BD 12r00r00         [24] 1177 	lcall	__modsint
      0003C0 AC 82            [24] 1178 	mov	r4,dpl
      0003C2 AD 83            [24] 1179 	mov	r5,dph
      0003C4 15 81            [12] 1180 	dec	sp
      0003C6 15 81            [12] 1181 	dec	sp
      0003C8 C0 05            [24] 1182 	push	ar5
      0003CA C0 04            [24] 1183 	push	ar4
      0003CC C0 04            [24] 1184 	push	ar4
      0003CE C0 05            [24] 1185 	push	ar5
      0003D0 90 00 30         [24] 1186 	mov	dptr,#0x0030
      0003D3 12r00r00         [24] 1187 	lcall	__mulint
      0003D6 A8*00            [24] 1188 	mov	r0,_bp
      0003D8 08               [12] 1189 	inc	r0
      0003D9 A6 82            [24] 1190 	mov	@r0,dpl
      0003DB 08               [12] 1191 	inc	r0
      0003DC A6 83            [24] 1192 	mov	@r0,dph
      0003DE 15 81            [12] 1193 	dec	sp
      0003E0 15 81            [12] 1194 	dec	sp
      0003E2 D0 04            [24] 1195 	pop	ar4
      0003E4 D0 05            [24] 1196 	pop	ar5
      0003E6 E5*00            [12] 1197 	mov	a,_bp
      0003E8 24 11            [12] 1198 	add	a,#0x11
      0003EA F8               [12] 1199 	mov	r0,a
      0003EB 74 C0            [12] 1200 	mov	a,#0xc0
      0003ED 26               [12] 1201 	add	a,@r0
      0003EE FC               [12] 1202 	mov	r4,a
      0003EF E4               [12] 1203 	clr	a
      0003F0 08               [12] 1204 	inc	r0
      0003F1 36               [12] 1205 	addc	a,@r0
      0003F2 FD               [12] 1206 	mov	r5,a
      0003F3 74 C0            [12] 1207 	mov	a,#0xc0
      0003F5 C0 E0            [24] 1208 	push	acc
      0003F7 E4               [12] 1209 	clr	a
      0003F8 C0 E0            [24] 1210 	push	acc
      0003FA 8C 82            [24] 1211 	mov	dpl,r4
      0003FC 8D 83            [24] 1212 	mov	dph,r5
      0003FE 12r00r00         [24] 1213 	lcall	__modsint
      000401 AC 82            [24] 1214 	mov	r4,dpl
      000403 AD 83            [24] 1215 	mov	r5,dph
      000405 15 81            [12] 1216 	dec	sp
      000407 15 81            [12] 1217 	dec	sp
      000409 C0 05            [24] 1218 	push	ar5
      00040B C0 04            [24] 1219 	push	ar4
      00040D C0 04            [24] 1220 	push	ar4
      00040F C0 05            [24] 1221 	push	ar5
      000411 90 00 30         [24] 1222 	mov	dptr,#0x0030
      000414 12r00r00         [24] 1223 	lcall	__mulint
      000417 A8*00            [24] 1224 	mov	r0,_bp
      000419 08               [12] 1225 	inc	r0
      00041A 08               [12] 1226 	inc	r0
      00041B 08               [12] 1227 	inc	r0
      00041C A6 82            [24] 1228 	mov	@r0,dpl
      00041E 08               [12] 1229 	inc	r0
      00041F A6 83            [24] 1230 	mov	@r0,dph
      000421 15 81            [12] 1231 	dec	sp
      000423 15 81            [12] 1232 	dec	sp
      000425 D0 04            [24] 1233 	pop	ar4
      000427 D0 05            [24] 1234 	pop	ar5
      000429 E5*00            [12] 1235 	mov	a,_bp
      00042B 24 11            [12] 1236 	add	a,#0x11
      00042D F8               [12] 1237 	mov	r0,a
      00042E 74 C1            [12] 1238 	mov	a,#0xc1
      000430 26               [12] 1239 	add	a,@r0
      000431 FC               [12] 1240 	mov	r4,a
      000432 E4               [12] 1241 	clr	a
      000433 08               [12] 1242 	inc	r0
      000434 36               [12] 1243 	addc	a,@r0
      000435 FD               [12] 1244 	mov	r5,a
      000436 74 C0            [12] 1245 	mov	a,#0xc0
      000438 C0 E0            [24] 1246 	push	acc
      00043A E4               [12] 1247 	clr	a
      00043B C0 E0            [24] 1248 	push	acc
      00043D 8C 82            [24] 1249 	mov	dpl,r4
      00043F 8D 83            [24] 1250 	mov	dph,r5
      000441 12r00r00         [24] 1251 	lcall	__modsint
      000444 AC 82            [24] 1252 	mov	r4,dpl
      000446 AD 83            [24] 1253 	mov	r5,dph
      000448 15 81            [12] 1254 	dec	sp
      00044A 15 81            [12] 1255 	dec	sp
      00044C C0 05            [24] 1256 	push	ar5
      00044E C0 04            [24] 1257 	push	ar4
      000450 C0 04            [24] 1258 	push	ar4
      000452 C0 05            [24] 1259 	push	ar5
      000454 90 00 30         [24] 1260 	mov	dptr,#0x0030
      000457 12r00r00         [24] 1261 	lcall	__mulint
      00045A C8               [12] 1262 	xch	a,r0
      00045B E5*00            [12] 1263 	mov	a,_bp
      00045D 24 05            [12] 1264 	add	a,#0x05
      00045F C8               [12] 1265 	xch	a,r0
      000460 A6 82            [24] 1266 	mov	@r0,dpl
      000462 08               [12] 1267 	inc	r0
      000463 A6 83            [24] 1268 	mov	@r0,dph
      000465 15 81            [12] 1269 	dec	sp
      000467 15 81            [12] 1270 	dec	sp
      000469 D0 04            [24] 1271 	pop	ar4
      00046B D0 05            [24] 1272 	pop	ar5
      00046D E5*00            [12] 1273 	mov	a,_bp
      00046F 24 0F            [12] 1274 	add	a,#0x0f
      000471 F8               [12] 1275 	mov	r0,a
      000472 E4               [12] 1276 	clr	a
      000473 F6               [12] 1277 	mov	@r0,a
      000474 08               [12] 1278 	inc	r0
      000475 F6               [12] 1279 	mov	@r0,a
                                   1280 ;	life.c:235: return;
      000476 D0 05            [24] 1281 	pop	ar5
      000478 D0 04            [24] 1282 	pop	ar4
                                   1283 ;	life.c:203: for (x = 0; x < W; x++) {
      00047A                       1284 00133$:
                                   1285 ;	life.c:204: n = -u[A2D(W, y, x)];
      00047A C0 04            [24] 1286 	push	ar4
      00047C C0 05            [24] 1287 	push	ar5
      00047E E5*00            [12] 1288 	mov	a,_bp
      000480 24 0B            [12] 1289 	add	a,#0x0b
      000482 F8               [12] 1290 	mov	r0,a
      000483 E5*00            [12] 1291 	mov	a,_bp
      000485 24 0F            [12] 1292 	add	a,#0x0f
      000487 F9               [12] 1293 	mov	r1,a
      000488 E7               [12] 1294 	mov	a,@r1
      000489 26               [12] 1295 	add	a,@r0
      00048A C0 E0            [24] 1296 	push	acc
      00048C 09               [12] 1297 	inc	r1
      00048D E7               [12] 1298 	mov	a,@r1
      00048E 08               [12] 1299 	inc	r0
      00048F 36               [12] 1300 	addc	a,@r0
      000490 C0 E0            [24] 1301 	push	acc
      000492 E5*00            [12] 1302 	mov	a,_bp
      000494 24 0A            [12] 1303 	add	a,#0x0a
      000496 F8               [12] 1304 	mov	r0,a
      000497 D0 E0            [24] 1305 	pop	acc
      000499 F6               [12] 1306 	mov	@r0,a
      00049A 18               [12] 1307 	dec	r0
      00049B D0 E0            [24] 1308 	pop	acc
      00049D F6               [12] 1309 	mov	@r0,a
      00049E E5*00            [12] 1310 	mov	a,_bp
      0004A0 24 09            [12] 1311 	add	a,#0x09
      0004A2 F8               [12] 1312 	mov	r0,a
      0004A3 E6               [12] 1313 	mov	a,@r0
      0004A4 24r00            [12] 1314 	add	a,#_u
      0004A6 F5 82            [12] 1315 	mov	dpl,a
      0004A8 08               [12] 1316 	inc	r0
      0004A9 E6               [12] 1317 	mov	a,@r0
      0004AA 34s48            [12] 1318 	addc	a,#(_u >> 8)
      0004AC F5 83            [12] 1319 	mov	dph,a
      0004AE E0               [24] 1320 	movx	a,@dptr
      0004AF FF               [12] 1321 	mov	r7,a
      0004B0 7E 00            [12] 1322 	mov	r6,#0x00
      0004B2 C3               [12] 1323 	clr	c
      0004B3 E4               [12] 1324 	clr	a
      0004B4 9F               [12] 1325 	subb	a,r7
      0004B5 FB               [12] 1326 	mov	r3,a
      0004B6 E4               [12] 1327 	clr	a
      0004B7 9E               [12] 1328 	subb	a,r6
      0004B8 FA               [12] 1329 	mov	r2,a
                                   1330 ;	life.c:209: UPDN(-1, -1);
      0004B9 E5*00            [12] 1331 	mov	a,_bp
      0004BB 24 0F            [12] 1332 	add	a,#0x0f
      0004BD F8               [12] 1333 	mov	r0,a
      0004BE 74 2F            [12] 1334 	mov	a,#0x2f
      0004C0 26               [12] 1335 	add	a,@r0
      0004C1 FE               [12] 1336 	mov	r6,a
      0004C2 E4               [12] 1337 	clr	a
      0004C3 08               [12] 1338 	inc	r0
      0004C4 36               [12] 1339 	addc	a,@r0
      0004C5 FF               [12] 1340 	mov	r7,a
      0004C6 C0 05            [24] 1341 	push	ar5
      0004C8 C0 04            [24] 1342 	push	ar4
      0004CA C0 03            [24] 1343 	push	ar3
      0004CC C0 02            [24] 1344 	push	ar2
      0004CE 74 30            [12] 1345 	mov	a,#0x30
      0004D0 C0 E0            [24] 1346 	push	acc
      0004D2 E4               [12] 1347 	clr	a
      0004D3 C0 E0            [24] 1348 	push	acc
      0004D5 8E 82            [24] 1349 	mov	dpl,r6
      0004D7 8F 83            [24] 1350 	mov	dph,r7
      0004D9 12r00r00         [24] 1351 	lcall	__modsint
      0004DC AE 82            [24] 1352 	mov	r6,dpl
      0004DE AF 83            [24] 1353 	mov	r7,dph
      0004E0 15 81            [12] 1354 	dec	sp
      0004E2 15 81            [12] 1355 	dec	sp
      0004E4 D0 02            [24] 1356 	pop	ar2
      0004E6 D0 03            [24] 1357 	pop	ar3
      0004E8 D0 04            [24] 1358 	pop	ar4
      0004EA D0 05            [24] 1359 	pop	ar5
      0004EC A8*00            [24] 1360 	mov	r0,_bp
      0004EE 08               [12] 1361 	inc	r0
      0004EF EE               [12] 1362 	mov	a,r6
      0004F0 26               [12] 1363 	add	a,@r0
      0004F1 FC               [12] 1364 	mov	r4,a
      0004F2 EF               [12] 1365 	mov	a,r7
      0004F3 08               [12] 1366 	inc	r0
      0004F4 36               [12] 1367 	addc	a,@r0
      0004F5 FD               [12] 1368 	mov	r5,a
      0004F6 EC               [12] 1369 	mov	a,r4
      0004F7 24r00            [12] 1370 	add	a,#_u
      0004F9 F5 82            [12] 1371 	mov	dpl,a
      0004FB ED               [12] 1372 	mov	a,r5
      0004FC 34s48            [12] 1373 	addc	a,#(_u >> 8)
      0004FE F5 83            [12] 1374 	mov	dph,a
      000500 E0               [24] 1375 	movx	a,@dptr
      000501 FD               [12] 1376 	mov	r5,a
      000502 7C 00            [12] 1377 	mov	r4,#0x00
      000504 E5*00            [12] 1378 	mov	a,_bp
      000506 24 07            [12] 1379 	add	a,#0x07
      000508 F8               [12] 1380 	mov	r0,a
      000509 ED               [12] 1381 	mov	a,r5
      00050A 2B               [12] 1382 	add	a,r3
      00050B F6               [12] 1383 	mov	@r0,a
      00050C EC               [12] 1384 	mov	a,r4
      00050D 3A               [12] 1385 	addc	a,r2
      00050E 08               [12] 1386 	inc	r0
      00050F F6               [12] 1387 	mov	@r0,a
                                   1388 ;	life.c:210: UPDN(-1, 0);
      000510 E5*00            [12] 1389 	mov	a,_bp
      000512 24 0F            [12] 1390 	add	a,#0x0f
      000514 F8               [12] 1391 	mov	r0,a
      000515 74 30            [12] 1392 	mov	a,#0x30
      000517 26               [12] 1393 	add	a,@r0
      000518 FC               [12] 1394 	mov	r4,a
      000519 E4               [12] 1395 	clr	a
      00051A 08               [12] 1396 	inc	r0
      00051B 36               [12] 1397 	addc	a,@r0
      00051C FD               [12] 1398 	mov	r5,a
      00051D C0 07            [24] 1399 	push	ar7
      00051F C0 06            [24] 1400 	push	ar6
      000521 74 30            [12] 1401 	mov	a,#0x30
      000523 C0 E0            [24] 1402 	push	acc
      000525 E4               [12] 1403 	clr	a
      000526 C0 E0            [24] 1404 	push	acc
      000528 8C 82            [24] 1405 	mov	dpl,r4
      00052A 8D 83            [24] 1406 	mov	dph,r5
      00052C 12r00r00         [24] 1407 	lcall	__modsint
      00052F AC 82            [24] 1408 	mov	r4,dpl
      000531 AD 83            [24] 1409 	mov	r5,dph
      000533 15 81            [12] 1410 	dec	sp
      000535 15 81            [12] 1411 	dec	sp
      000537 A8*00            [24] 1412 	mov	r0,_bp
      000539 08               [12] 1413 	inc	r0
      00053A EC               [12] 1414 	mov	a,r4
      00053B 26               [12] 1415 	add	a,@r0
      00053C FA               [12] 1416 	mov	r2,a
      00053D ED               [12] 1417 	mov	a,r5
      00053E 08               [12] 1418 	inc	r0
      00053F 36               [12] 1419 	addc	a,@r0
      000540 FB               [12] 1420 	mov	r3,a
      000541 EA               [12] 1421 	mov	a,r2
      000542 24r00            [12] 1422 	add	a,#_u
      000544 F5 82            [12] 1423 	mov	dpl,a
      000546 EB               [12] 1424 	mov	a,r3
      000547 34s48            [12] 1425 	addc	a,#(_u >> 8)
      000549 F5 83            [12] 1426 	mov	dph,a
      00054B E0               [24] 1427 	movx	a,@dptr
      00054C FB               [12] 1428 	mov	r3,a
      00054D 7A 00            [12] 1429 	mov	r2,#0x00
      00054F E5*00            [12] 1430 	mov	a,_bp
      000551 24 07            [12] 1431 	add	a,#0x07
      000553 F8               [12] 1432 	mov	r0,a
      000554 EB               [12] 1433 	mov	a,r3
      000555 26               [12] 1434 	add	a,@r0
      000556 F6               [12] 1435 	mov	@r0,a
      000557 EA               [12] 1436 	mov	a,r2
      000558 08               [12] 1437 	inc	r0
      000559 36               [12] 1438 	addc	a,@r0
      00055A F6               [12] 1439 	mov	@r0,a
                                   1440 ;	life.c:211: UPDN(-1, 1);
      00055B E5*00            [12] 1441 	mov	a,_bp
      00055D 24 0F            [12] 1442 	add	a,#0x0f
      00055F F8               [12] 1443 	mov	r0,a
      000560 74 31            [12] 1444 	mov	a,#0x31
      000562 26               [12] 1445 	add	a,@r0
      000563 FA               [12] 1446 	mov	r2,a
      000564 E4               [12] 1447 	clr	a
      000565 08               [12] 1448 	inc	r0
      000566 36               [12] 1449 	addc	a,@r0
      000567 FB               [12] 1450 	mov	r3,a
      000568 C0 05            [24] 1451 	push	ar5
      00056A C0 04            [24] 1452 	push	ar4
      00056C 74 30            [12] 1453 	mov	a,#0x30
      00056E C0 E0            [24] 1454 	push	acc
      000570 E4               [12] 1455 	clr	a
      000571 C0 E0            [24] 1456 	push	acc
      000573 8A 82            [24] 1457 	mov	dpl,r2
      000575 8B 83            [24] 1458 	mov	dph,r3
      000577 12r00r00         [24] 1459 	lcall	__modsint
      00057A C8               [12] 1460 	xch	a,r0
      00057B E5*00            [12] 1461 	mov	a,_bp
      00057D 24 0D            [12] 1462 	add	a,#0x0d
      00057F C8               [12] 1463 	xch	a,r0
      000580 A6 82            [24] 1464 	mov	@r0,dpl
      000582 08               [12] 1465 	inc	r0
      000583 A6 83            [24] 1466 	mov	@r0,dph
      000585 15 81            [12] 1467 	dec	sp
      000587 15 81            [12] 1468 	dec	sp
      000589 D0 04            [24] 1469 	pop	ar4
      00058B D0 05            [24] 1470 	pop	ar5
      00058D D0 06            [24] 1471 	pop	ar6
      00058F D0 07            [24] 1472 	pop	ar7
      000591 A8*00            [24] 1473 	mov	r0,_bp
      000593 08               [12] 1474 	inc	r0
      000594 E5*00            [12] 1475 	mov	a,_bp
      000596 24 0D            [12] 1476 	add	a,#0x0d
      000598 F9               [12] 1477 	mov	r1,a
      000599 E7               [12] 1478 	mov	a,@r1
      00059A 26               [12] 1479 	add	a,@r0
      00059B FA               [12] 1480 	mov	r2,a
      00059C 09               [12] 1481 	inc	r1
      00059D E7               [12] 1482 	mov	a,@r1
      00059E 08               [12] 1483 	inc	r0
      00059F 36               [12] 1484 	addc	a,@r0
      0005A0 FB               [12] 1485 	mov	r3,a
      0005A1 EA               [12] 1486 	mov	a,r2
      0005A2 24r00            [12] 1487 	add	a,#_u
      0005A4 F5 82            [12] 1488 	mov	dpl,a
      0005A6 EB               [12] 1489 	mov	a,r3
      0005A7 34s48            [12] 1490 	addc	a,#(_u >> 8)
      0005A9 F5 83            [12] 1491 	mov	dph,a
      0005AB E0               [24] 1492 	movx	a,@dptr
      0005AC FB               [12] 1493 	mov	r3,a
      0005AD 7A 00            [12] 1494 	mov	r2,#0x00
      0005AF E5*00            [12] 1495 	mov	a,_bp
      0005B1 24 07            [12] 1496 	add	a,#0x07
      0005B3 F8               [12] 1497 	mov	r0,a
      0005B4 EB               [12] 1498 	mov	a,r3
      0005B5 26               [12] 1499 	add	a,@r0
      0005B6 F6               [12] 1500 	mov	@r0,a
      0005B7 EA               [12] 1501 	mov	a,r2
      0005B8 08               [12] 1502 	inc	r0
      0005B9 36               [12] 1503 	addc	a,@r0
      0005BA F6               [12] 1504 	mov	@r0,a
                                   1505 ;	life.c:212: UPDN(0, -1);
      0005BB E5*00            [12] 1506 	mov	a,_bp
      0005BD 24 03            [12] 1507 	add	a,#0x03
      0005BF F8               [12] 1508 	mov	r0,a
      0005C0 EE               [12] 1509 	mov	a,r6
      0005C1 26               [12] 1510 	add	a,@r0
      0005C2 FA               [12] 1511 	mov	r2,a
      0005C3 EF               [12] 1512 	mov	a,r7
      0005C4 08               [12] 1513 	inc	r0
      0005C5 36               [12] 1514 	addc	a,@r0
      0005C6 FB               [12] 1515 	mov	r3,a
      0005C7 EA               [12] 1516 	mov	a,r2
      0005C8 24r00            [12] 1517 	add	a,#_u
      0005CA F5 82            [12] 1518 	mov	dpl,a
      0005CC EB               [12] 1519 	mov	a,r3
      0005CD 34s48            [12] 1520 	addc	a,#(_u >> 8)
      0005CF F5 83            [12] 1521 	mov	dph,a
      0005D1 E0               [24] 1522 	movx	a,@dptr
      0005D2 FB               [12] 1523 	mov	r3,a
      0005D3 7A 00            [12] 1524 	mov	r2,#0x00
      0005D5 E5*00            [12] 1525 	mov	a,_bp
      0005D7 24 07            [12] 1526 	add	a,#0x07
      0005D9 F8               [12] 1527 	mov	r0,a
      0005DA EB               [12] 1528 	mov	a,r3
      0005DB 26               [12] 1529 	add	a,@r0
      0005DC F6               [12] 1530 	mov	@r0,a
      0005DD EA               [12] 1531 	mov	a,r2
      0005DE 08               [12] 1532 	inc	r0
      0005DF 36               [12] 1533 	addc	a,@r0
      0005E0 F6               [12] 1534 	mov	@r0,a
                                   1535 ;	life.c:213: UPDN(0, 0);
      0005E1 E5*00            [12] 1536 	mov	a,_bp
      0005E3 24 03            [12] 1537 	add	a,#0x03
      0005E5 F8               [12] 1538 	mov	r0,a
      0005E6 EC               [12] 1539 	mov	a,r4
      0005E7 26               [12] 1540 	add	a,@r0
      0005E8 FA               [12] 1541 	mov	r2,a
      0005E9 ED               [12] 1542 	mov	a,r5
      0005EA 08               [12] 1543 	inc	r0
      0005EB 36               [12] 1544 	addc	a,@r0
      0005EC FB               [12] 1545 	mov	r3,a
      0005ED EA               [12] 1546 	mov	a,r2
      0005EE 24r00            [12] 1547 	add	a,#_u
      0005F0 F5 82            [12] 1548 	mov	dpl,a
      0005F2 EB               [12] 1549 	mov	a,r3
      0005F3 34s48            [12] 1550 	addc	a,#(_u >> 8)
      0005F5 F5 83            [12] 1551 	mov	dph,a
      0005F7 E0               [24] 1552 	movx	a,@dptr
      0005F8 FB               [12] 1553 	mov	r3,a
      0005F9 7A 00            [12] 1554 	mov	r2,#0x00
      0005FB E5*00            [12] 1555 	mov	a,_bp
      0005FD 24 07            [12] 1556 	add	a,#0x07
      0005FF F8               [12] 1557 	mov	r0,a
      000600 EB               [12] 1558 	mov	a,r3
      000601 26               [12] 1559 	add	a,@r0
      000602 F6               [12] 1560 	mov	@r0,a
      000603 EA               [12] 1561 	mov	a,r2
      000604 08               [12] 1562 	inc	r0
      000605 36               [12] 1563 	addc	a,@r0
      000606 F6               [12] 1564 	mov	@r0,a
                                   1565 ;	life.c:214: UPDN(0, 1);
      000607 E5*00            [12] 1566 	mov	a,_bp
      000609 24 03            [12] 1567 	add	a,#0x03
      00060B F8               [12] 1568 	mov	r0,a
      00060C E5*00            [12] 1569 	mov	a,_bp
      00060E 24 0D            [12] 1570 	add	a,#0x0d
      000610 F9               [12] 1571 	mov	r1,a
      000611 E7               [12] 1572 	mov	a,@r1
      000612 26               [12] 1573 	add	a,@r0
      000613 FA               [12] 1574 	mov	r2,a
      000614 09               [12] 1575 	inc	r1
      000615 E7               [12] 1576 	mov	a,@r1
      000616 08               [12] 1577 	inc	r0
      000617 36               [12] 1578 	addc	a,@r0
      000618 FB               [12] 1579 	mov	r3,a
      000619 EA               [12] 1580 	mov	a,r2
      00061A 24r00            [12] 1581 	add	a,#_u
      00061C F5 82            [12] 1582 	mov	dpl,a
      00061E EB               [12] 1583 	mov	a,r3
      00061F 34s48            [12] 1584 	addc	a,#(_u >> 8)
      000621 F5 83            [12] 1585 	mov	dph,a
      000623 E0               [24] 1586 	movx	a,@dptr
      000624 FB               [12] 1587 	mov	r3,a
      000625 7A 00            [12] 1588 	mov	r2,#0x00
      000627 E5*00            [12] 1589 	mov	a,_bp
      000629 24 07            [12] 1590 	add	a,#0x07
      00062B F8               [12] 1591 	mov	r0,a
      00062C EB               [12] 1592 	mov	a,r3
      00062D 26               [12] 1593 	add	a,@r0
      00062E FB               [12] 1594 	mov	r3,a
      00062F EA               [12] 1595 	mov	a,r2
      000630 08               [12] 1596 	inc	r0
      000631 36               [12] 1597 	addc	a,@r0
      000632 FA               [12] 1598 	mov	r2,a
                                   1599 ;	life.c:215: UPDN(1, -1);
      000633 E5*00            [12] 1600 	mov	a,_bp
      000635 24 05            [12] 1601 	add	a,#0x05
      000637 F8               [12] 1602 	mov	r0,a
      000638 EE               [12] 1603 	mov	a,r6
      000639 26               [12] 1604 	add	a,@r0
      00063A FE               [12] 1605 	mov	r6,a
      00063B EF               [12] 1606 	mov	a,r7
      00063C 08               [12] 1607 	inc	r0
      00063D 36               [12] 1608 	addc	a,@r0
      00063E FF               [12] 1609 	mov	r7,a
      00063F EE               [12] 1610 	mov	a,r6
      000640 24r00            [12] 1611 	add	a,#_u
      000642 F5 82            [12] 1612 	mov	dpl,a
      000644 EF               [12] 1613 	mov	a,r7
      000645 34s48            [12] 1614 	addc	a,#(_u >> 8)
      000647 F5 83            [12] 1615 	mov	dph,a
      000649 E0               [24] 1616 	movx	a,@dptr
      00064A 7E 00            [12] 1617 	mov	r6,#0x00
      00064C 2B               [12] 1618 	add	a,r3
      00064D FF               [12] 1619 	mov	r7,a
      00064E EE               [12] 1620 	mov	a,r6
      00064F 3A               [12] 1621 	addc	a,r2
      000650 FE               [12] 1622 	mov	r6,a
                                   1623 ;	life.c:216: UPDN(1, 0);
      000651 E5*00            [12] 1624 	mov	a,_bp
      000653 24 05            [12] 1625 	add	a,#0x05
      000655 F8               [12] 1626 	mov	r0,a
      000656 EC               [12] 1627 	mov	a,r4
      000657 26               [12] 1628 	add	a,@r0
      000658 FC               [12] 1629 	mov	r4,a
      000659 ED               [12] 1630 	mov	a,r5
      00065A 08               [12] 1631 	inc	r0
      00065B 36               [12] 1632 	addc	a,@r0
      00065C FD               [12] 1633 	mov	r5,a
      00065D EC               [12] 1634 	mov	a,r4
      00065E 24r00            [12] 1635 	add	a,#_u
      000660 F5 82            [12] 1636 	mov	dpl,a
      000662 ED               [12] 1637 	mov	a,r5
      000663 34s48            [12] 1638 	addc	a,#(_u >> 8)
      000665 F5 83            [12] 1639 	mov	dph,a
      000667 E0               [24] 1640 	movx	a,@dptr
      000668 7C 00            [12] 1641 	mov	r4,#0x00
      00066A 2F               [12] 1642 	add	a,r7
      00066B FD               [12] 1643 	mov	r5,a
      00066C EC               [12] 1644 	mov	a,r4
      00066D 3E               [12] 1645 	addc	a,r6
      00066E FC               [12] 1646 	mov	r4,a
                                   1647 ;	life.c:217: UPDN(1, 1);
      00066F E5*00            [12] 1648 	mov	a,_bp
      000671 24 05            [12] 1649 	add	a,#0x05
      000673 F8               [12] 1650 	mov	r0,a
      000674 E5*00            [12] 1651 	mov	a,_bp
      000676 24 0D            [12] 1652 	add	a,#0x0d
      000678 F9               [12] 1653 	mov	r1,a
      000679 E7               [12] 1654 	mov	a,@r1
      00067A 26               [12] 1655 	add	a,@r0
      00067B FE               [12] 1656 	mov	r6,a
      00067C 09               [12] 1657 	inc	r1
      00067D E7               [12] 1658 	mov	a,@r1
      00067E 08               [12] 1659 	inc	r0
      00067F 36               [12] 1660 	addc	a,@r0
      000680 FF               [12] 1661 	mov	r7,a
      000681 EE               [12] 1662 	mov	a,r6
      000682 24r00            [12] 1663 	add	a,#_u
      000684 F5 82            [12] 1664 	mov	dpl,a
      000686 EF               [12] 1665 	mov	a,r7
      000687 34s48            [12] 1666 	addc	a,#(_u >> 8)
      000689 F5 83            [12] 1667 	mov	dph,a
      00068B E0               [24] 1668 	movx	a,@dptr
      00068C 7E 00            [12] 1669 	mov	r6,#0x00
      00068E 2D               [12] 1670 	add	a,r5
      00068F FF               [12] 1671 	mov	r7,a
      000690 EE               [12] 1672 	mov	a,r6
      000691 3C               [12] 1673 	addc	a,r4
      000692 FE               [12] 1674 	mov	r6,a
                                   1675 ;	life.c:220: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000693 E5*00            [12] 1676 	mov	a,_bp
      000695 24 09            [12] 1677 	add	a,#0x09
      000697 F8               [12] 1678 	mov	r0,a
      000698 E6               [12] 1679 	mov	a,@r0
      000699 24r00            [12] 1680 	add	a,#_nu
      00069B FB               [12] 1681 	mov	r3,a
      00069C 08               [12] 1682 	inc	r0
      00069D E6               [12] 1683 	mov	a,@r0
      00069E 34s6C            [12] 1684 	addc	a,#(_nu >> 8)
      0006A0 FA               [12] 1685 	mov	r2,a
      0006A1 BF 03 09         [24] 1686 	cjne	r7,#0x03,00177$
      0006A4 BE 00 06         [24] 1687 	cjne	r6,#0x00,00177$
      0006A7 D0 05            [24] 1688 	pop	ar5
      0006A9 D0 04            [24] 1689 	pop	ar4
      0006AB 80 2F            [24] 1690 	sjmp	00140$
      0006AD                       1691 00177$:
      0006AD D0 05            [24] 1692 	pop	ar5
      0006AF D0 04            [24] 1693 	pop	ar4
      0006B1 BF 02 24         [24] 1694 	cjne	r7,#0x02,00139$
      0006B4 BE 00 21         [24] 1695 	cjne	r6,#0x00,00139$
      0006B7 E5*00            [12] 1696 	mov	a,_bp
      0006B9 24 0B            [12] 1697 	add	a,#0x0b
      0006BB F8               [12] 1698 	mov	r0,a
      0006BC E5*00            [12] 1699 	mov	a,_bp
      0006BE 24 0F            [12] 1700 	add	a,#0x0f
      0006C0 F9               [12] 1701 	mov	r1,a
      0006C1 E7               [12] 1702 	mov	a,@r1
      0006C2 26               [12] 1703 	add	a,@r0
      0006C3 FE               [12] 1704 	mov	r6,a
      0006C4 09               [12] 1705 	inc	r1
      0006C5 E7               [12] 1706 	mov	a,@r1
      0006C6 08               [12] 1707 	inc	r0
      0006C7 36               [12] 1708 	addc	a,@r0
      0006C8 FF               [12] 1709 	mov	r7,a
      0006C9 EE               [12] 1710 	mov	a,r6
      0006CA 24r00            [12] 1711 	add	a,#_u
      0006CC FE               [12] 1712 	mov	r6,a
      0006CD EF               [12] 1713 	mov	a,r7
      0006CE 34s48            [12] 1714 	addc	a,#(_u >> 8)
      0006D0 FF               [12] 1715 	mov	r7,a
      0006D1 8E 82            [24] 1716 	mov	dpl,r6
      0006D3 8F 83            [24] 1717 	mov	dph,r7
      0006D5 E0               [24] 1718 	movx	a,@dptr
      0006D6 70 04            [24] 1719 	jnz	00140$
      0006D8                       1720 00139$:
                                   1721 ;	assignBit
      0006D8 C2*00            [12] 1722 	clr	b0
      0006DA 80 02            [24] 1723 	sjmp	00141$
      0006DC                       1724 00140$:
                                   1725 ;	assignBit
      0006DC D2*00            [12] 1726 	setb	b0
      0006DE                       1727 00141$:
      0006DE A2*00            [12] 1728 	mov	c,b0
      0006E0 E4               [12] 1729 	clr	a
      0006E1 33               [12] 1730 	rlc	a
      0006E2 8B 82            [24] 1731 	mov	dpl,r3
      0006E4 8A 83            [24] 1732 	mov	dph,r2
      0006E6 F0               [24] 1733 	movx	@dptr,a
                                   1734 ;	life.c:221: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0006E7 E5*00            [12] 1735 	mov	a,_bp
      0006E9 24 0F            [12] 1736 	add	a,#0x0f
      0006EB F8               [12] 1737 	mov	r0,a
      0006EC E6               [12] 1738 	mov	a,@r0
      0006ED 2C               [12] 1739 	add	a,r4
      0006EE FE               [12] 1740 	mov	r6,a
      0006EF 08               [12] 1741 	inc	r0
      0006F0 E6               [12] 1742 	mov	a,@r0
      0006F1 3D               [12] 1743 	addc	a,r5
      0006F2 FF               [12] 1744 	mov	r7,a
      0006F3 EE               [12] 1745 	mov	a,r6
      0006F4 24r00            [12] 1746 	add	a,#_pu
      0006F6 F5 82            [12] 1747 	mov	dpl,a
      0006F8 EF               [12] 1748 	mov	a,r7
      0006F9 34s24            [12] 1749 	addc	a,#(_pu >> 8)
      0006FB F5 83            [12] 1750 	mov	dph,a
      0006FD E0               [24] 1751 	movx	a,@dptr
      0006FE FB               [12] 1752 	mov	r3,a
      0006FF EE               [12] 1753 	mov	a,r6
      000700 24r00            [12] 1754 	add	a,#_nu
      000702 F5 82            [12] 1755 	mov	dpl,a
      000704 EF               [12] 1756 	mov	a,r7
      000705 34s6C            [12] 1757 	addc	a,#(_nu >> 8)
      000707 F5 83            [12] 1758 	mov	dph,a
      000709 E0               [24] 1759 	movx	a,@dptr
      00070A FA               [12] 1760 	mov	r2,a
      00070B 6B               [12] 1761 	xrl	a,r3
      00070C 78r13            [12] 1762 	mov	r0,#_cycle2
      00070E 46               [12] 1763 	orl	a,@r0
      00070F F6               [12] 1764 	mov	@r0,a
                                   1765 ;	life.c:222: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000710 EE               [12] 1766 	mov	a,r6
      000711 24r00            [12] 1767 	add	a,#_u
      000713 F5 82            [12] 1768 	mov	dpl,a
      000715 EF               [12] 1769 	mov	a,r7
      000716 34s48            [12] 1770 	addc	a,#(_u >> 8)
      000718 F5 83            [12] 1771 	mov	dph,a
      00071A E0               [24] 1772 	movx	a,@dptr
      00071B FF               [12] 1773 	mov	r7,a
      00071C EA               [12] 1774 	mov	a,r2
      00071D 6F               [12] 1775 	xrl	a,r7
      00071E 78r12            [12] 1776 	mov	r0,#_fixed
      000720 46               [12] 1777 	orl	a,@r0
      000721 F6               [12] 1778 	mov	@r0,a
                                   1779 ;	life.c:203: for (x = 0; x < W; x++) {
      000722 E5*00            [12] 1780 	mov	a,_bp
      000724 24 0F            [12] 1781 	add	a,#0x0f
      000726 F8               [12] 1782 	mov	r0,a
      000727 06               [12] 1783 	inc	@r0
      000728 B6 00 02         [24] 1784 	cjne	@r0,#0x00,00181$
      00072B 08               [12] 1785 	inc	r0
      00072C 06               [12] 1786 	inc	@r0
      00072D                       1787 00181$:
      00072D E5*00            [12] 1788 	mov	a,_bp
      00072F 24 0F            [12] 1789 	add	a,#0x0f
      000731 F8               [12] 1790 	mov	r0,a
      000732 C3               [12] 1791 	clr	c
      000733 E6               [12] 1792 	mov	a,@r0
      000734 94 30            [12] 1793 	subb	a,#0x30
      000736 08               [12] 1794 	inc	r0
      000737 E6               [12] 1795 	mov	a,@r0
      000738 64 80            [12] 1796 	xrl	a,#0x80
      00073A 94 80            [12] 1797 	subb	a,#0x80
      00073C 50 03            [24] 1798 	jnc	00182$
      00073E 02r04r7A         [24] 1799 	ljmp	00133$
      000741                       1800 00182$:
                                   1801 ;	life.c:200: for (y = 0; y < H; y++) {
      000741 74 30            [12] 1802 	mov	a,#0x30
      000743 2C               [12] 1803 	add	a,r4
      000744 FC               [12] 1804 	mov	r4,a
      000745 E4               [12] 1805 	clr	a
      000746 3D               [12] 1806 	addc	a,r5
      000747 FD               [12] 1807 	mov	r5,a
      000748 E5*00            [12] 1808 	mov	a,_bp
      00074A 24 0B            [12] 1809 	add	a,#0x0b
      00074C F8               [12] 1810 	mov	r0,a
      00074D 74 30            [12] 1811 	mov	a,#0x30
      00074F 26               [12] 1812 	add	a,@r0
      000750 F6               [12] 1813 	mov	@r0,a
      000751 E4               [12] 1814 	clr	a
      000752 08               [12] 1815 	inc	r0
      000753 36               [12] 1816 	addc	a,@r0
      000754 F6               [12] 1817 	mov	@r0,a
      000755 E5*00            [12] 1818 	mov	a,_bp
      000757 24 11            [12] 1819 	add	a,#0x11
      000759 F8               [12] 1820 	mov	r0,a
      00075A 06               [12] 1821 	inc	@r0
      00075B B6 00 02         [24] 1822 	cjne	@r0,#0x00,00183$
      00075E 08               [12] 1823 	inc	r0
      00075F 06               [12] 1824 	inc	@r0
      000760                       1825 00183$:
      000760 E5*00            [12] 1826 	mov	a,_bp
      000762 24 11            [12] 1827 	add	a,#0x11
      000764 F8               [12] 1828 	mov	r0,a
      000765 C3               [12] 1829 	clr	c
      000766 E6               [12] 1830 	mov	a,@r0
      000767 94 C0            [12] 1831 	subb	a,#0xc0
      000769 08               [12] 1832 	inc	r0
      00076A E6               [12] 1833 	mov	a,@r0
      00076B 64 80            [12] 1834 	xrl	a,#0x80
      00076D 94 80            [12] 1835 	subb	a,#0x80
      00076F 50 03            [24] 1836 	jnc	00184$
      000771 02r03r85         [24] 1837 	ljmp	00135$
      000774                       1838 00184$:
                                   1839 ;	life.c:226: OE76 = OE76_0;
      000774 78r02            [12] 1840 	mov	r0,#_OE76
      000776 76 3F            [12] 1841 	mov	@r0,#0x3f
                                   1842 ;	life.c:30: OEreg = OE76;
      000778 90 F0 06         [24] 1843 	mov	dptr,#_OEreg
      00077B 74 3F            [12] 1844 	mov	a,#0x3f
      00077D F0               [24] 1845 	movx	@dptr,a
                                   1846 ;	life.c:229: cycle2 = !cycle2;
      00077E 78r13            [12] 1847 	mov	r0,#_cycle2
      000780 E6               [12] 1848 	mov	a,@r0
      000781 B4 01 00         [24] 1849 	cjne	a,#0x01,00185$
      000784                       1850 00185$:
      000784 92*00            [24] 1851 	mov	b0,c
      000786 78r13            [12] 1852 	mov	r0,#_cycle2
      000788 E4               [12] 1853 	clr	a
      000789 33               [12] 1854 	rlc	a
      00078A F6               [12] 1855 	mov	@r0,a
                                   1856 ;	life.c:230: fixed = !fixed;
      00078B 78r12            [12] 1857 	mov	r0,#_fixed
      00078D E6               [12] 1858 	mov	a,@r0
      00078E B4 01 00         [24] 1859 	cjne	a,#0x01,00186$
      000791                       1860 00186$:
      000791 92*00            [24] 1861 	mov	b0,c
      000793 78r12            [12] 1862 	mov	r0,#_fixed
      000795 E4               [12] 1863 	clr	a
      000796 33               [12] 1864 	rlc	a
      000797 F6               [12] 1865 	mov	@r0,a
                                   1866 ;	life.c:232: memcpy(pu, u, sizeof (u));
      000798 E4               [12] 1867 	clr	a
      000799 C0 E0            [24] 1868 	push	acc
      00079B 74 24            [12] 1869 	mov	a,#0x24
      00079D C0 E0            [24] 1870 	push	acc
      00079F 74r00            [12] 1871 	mov	a,#_u
      0007A1 C0 E0            [24] 1872 	push	acc
      0007A3 74s48            [12] 1873 	mov	a,#(_u >> 8)
      0007A5 C0 E0            [24] 1874 	push	acc
      0007A7 E4               [12] 1875 	clr	a
      0007A8 C0 E0            [24] 1876 	push	acc
      0007AA 90r24r00         [24] 1877 	mov	dptr,#_pu
      0007AD 75 F0 00         [24] 1878 	mov	b,#0x00
      0007B0 12r00r00         [24] 1879 	lcall	___memcpy
      0007B3 E5 81            [12] 1880 	mov	a,sp
      0007B5 24 FB            [12] 1881 	add	a,#0xfb
      0007B7 F5 81            [12] 1882 	mov	sp,a
                                   1883 ;	life.c:233: memcpy(u, nu, sizeof (nu));
      0007B9 E4               [12] 1884 	clr	a
      0007BA C0 E0            [24] 1885 	push	acc
      0007BC 74 24            [12] 1886 	mov	a,#0x24
      0007BE C0 E0            [24] 1887 	push	acc
      0007C0 74r00            [12] 1888 	mov	a,#_nu
      0007C2 C0 E0            [24] 1889 	push	acc
      0007C4 74s6C            [12] 1890 	mov	a,#(_nu >> 8)
      0007C6 C0 E0            [24] 1891 	push	acc
      0007C8 E4               [12] 1892 	clr	a
      0007C9 C0 E0            [24] 1893 	push	acc
      0007CB 90r48r00         [24] 1894 	mov	dptr,#_u
      0007CE 75 F0 00         [24] 1895 	mov	b,#0x00
      0007D1 12r00r00         [24] 1896 	lcall	___memcpy
      0007D4 E5 81            [12] 1897 	mov	a,sp
      0007D6 24 FB            [12] 1898 	add	a,#0xfb
                                   1899 ;	life.c:235: return;
                                   1900 ;	life.c:236: }
      0007D8 85*00 81         [24] 1901 	mov	sp,_bp
      0007DB D0*00            [24] 1902 	pop	_bp
      0007DD 22               [24] 1903 	ret
                                   1904 ;------------------------------------------------------------
                                   1905 ;Allocation info for local variables in function 'main'
                                   1906 ;------------------------------------------------------------
                                   1907 ;c                         Allocated to registers r6 r7 
                                   1908 ;__3932160007              Allocated to registers 
                                   1909 ;__4587520011              Allocated to registers 
                                   1910 ;------------------------------------------------------------
                                   1911 ;	life.c:238: void main(void) {
                                   1912 ;	-----------------------------------------
                                   1913 ;	 function main
                                   1914 ;	-----------------------------------------
      0007DE                       1915 _main:
                                   1916 ;	life.c:241: IT0 = 1;
                                   1917 ;	assignBit
      0007DE D2 88            [12] 1918 	setb	_IT0
                                   1919 ;	life.c:242: IT1 = 1;
                                   1920 ;	assignBit
      0007E0 D2 8A            [12] 1921 	setb	_IT1
                                   1922 ;	life.c:243: EX0 = 1;
                                   1923 ;	assignBit
      0007E2 D2 A8            [12] 1924 	setb	_EX0
                                   1925 ;	life.c:244: EX1 = 1;
                                   1926 ;	assignBit
      0007E4 D2 AA            [12] 1927 	setb	_EX1
                                   1928 ;	life.c:245: EA = 1;
                                   1929 ;	assignBit
      0007E6 D2 AF            [12] 1930 	setb	_EA
                                   1931 ;	life.c:246: P1_7 = 0;
                                   1932 ;	assignBit
      0007E8 C2 97            [12] 1933 	clr	_P1_7
                                   1934 ;	life.c:251: __endasm;
      0007EA 00               [12] 1935 	nop
      0007EB 00               [12] 1936 	nop
      0007EC 00               [12] 1937 	nop
                                   1938 ;	life.c:253: srand(RND);
      0007ED 90 E0 00         [24] 1939 	mov	dptr,#_RND
      0007F0 E0               [24] 1940 	movx	a,@dptr
      0007F1 FE               [12] 1941 	mov	r6,a
      0007F2 A3               [24] 1942 	inc	dptr
      0007F3 E0               [24] 1943 	movx	a,@dptr
      0007F4 FF               [12] 1944 	mov	r7,a
      0007F5 8E 82            [24] 1945 	mov	dpl,r6
      0007F7 8F 83            [24] 1946 	mov	dph,r7
      0007F9 12r00r00         [24] 1947 	lcall	_srand
                                   1948 ;	life.c:255: OE76 = OE76_0;
      0007FC 78r02            [12] 1949 	mov	r0,#_OE76
      0007FE 76 3F            [12] 1950 	mov	@r0,#0x3f
                                   1951 ;	life.c:30: OEreg = OE76;
      000800 90 F0 06         [24] 1952 	mov	dptr,#_OEreg
      000803 74 3F            [12] 1953 	mov	a,#0x3f
      000805 F0               [24] 1954 	movx	@dptr,a
                                   1955 ;	life.c:43: gen = 0ul;
      000806 78r03            [12] 1956 	mov	r0,#_gen
      000808 E4               [12] 1957 	clr	a
      000809 F6               [12] 1958 	mov	@r0,a
      00080A 08               [12] 1959 	inc	r0
      00080B F6               [12] 1960 	mov	@r0,a
      00080C 08               [12] 1961 	inc	r0
      00080D F6               [12] 1962 	mov	@r0,a
      00080E 08               [12] 1963 	inc	r0
      00080F F6               [12] 1964 	mov	@r0,a
                                   1965 ;	life.c:44: genc2 = 0ul;
      000810 78r07            [12] 1966 	mov	r0,#_genc2
      000812 F6               [12] 1967 	mov	@r0,a
      000813 08               [12] 1968 	inc	r0
      000814 F6               [12] 1969 	mov	@r0,a
      000815 08               [12] 1970 	inc	r0
      000816 F6               [12] 1971 	mov	@r0,a
      000817 08               [12] 1972 	inc	r0
      000818 F6               [12] 1973 	mov	@r0,a
                                   1974 ;	life.c:45: genfx = 0ul;
      000819 78r0B            [12] 1975 	mov	r0,#_genfx
      00081B F6               [12] 1976 	mov	@r0,a
      00081C 08               [12] 1977 	inc	r0
      00081D F6               [12] 1978 	mov	@r0,a
      00081E 08               [12] 1979 	inc	r0
      00081F F6               [12] 1980 	mov	@r0,a
      000820 08               [12] 1981 	inc	r0
      000821 F6               [12] 1982 	mov	@r0,a
                                   1983 ;	life.c:46: c2set = 0;
      000822 78r0F            [12] 1984 	mov	r0,#_c2set
      000824 76 00            [12] 1985 	mov	@r0,#0x00
                                   1986 ;	life.c:47: fxset = 0;
      000826 78r10            [12] 1987 	mov	r0,#_fxset
      000828 76 00            [12] 1988 	mov	@r0,#0x00
                                   1989 ;	life.c:259: pruni = 0;
      00082A 78r11            [12] 1990 	mov	r0,#_pruni
      00082C 76 00            [12] 1991 	mov	@r0,#0x00
                                   1992 ;	life.c:261: printstr("\033[?25h\033[m");
      00082E 90r00r46         [24] 1993 	mov	dptr,#___str_10
      000831 75 F0 80         [24] 1994 	mov	b,#0x80
      000834 12r00r00         [24] 1995 	lcall	_printstr
                                   1996 ;	life.c:263: for (i0 = 0; !i0; ) {
      000837 78r00            [12] 1997 	mov	r0,#_i0
      000839 76 00            [12] 1998 	mov	@r0,#0x00
                                   1999 ;	life.c:264: while (1) {
      00083B                       2000 00127$:
                                   2001 ;	life.c:265: printstr("LIFE I L R O P S U");
      00083B 90r00r50         [24] 2002 	mov	dptr,#___str_11
      00083E 75 F0 80         [24] 2003 	mov	b,#0x80
      000841 12r00r00         [24] 2004 	lcall	_printstr
                                   2005 ;	life.c:266: putchar(pruni ? (int)'1' : (int)'0');
      000844 78r11            [12] 2006 	mov	r0,#_pruni
      000846 E6               [12] 2007 	mov	a,@r0
      000847 60 06            [24] 2008 	jz	00170$
      000849 7E 31            [12] 2009 	mov	r6,#0x31
      00084B 7F 00            [12] 2010 	mov	r7,#0x00
      00084D 80 04            [24] 2011 	sjmp	00171$
      00084F                       2012 00170$:
      00084F 7E 30            [12] 2013 	mov	r6,#0x30
      000851 7F 00            [12] 2014 	mov	r7,#0x00
      000853                       2015 00171$:
      000853 8E 82            [24] 2016 	mov	dpl,r6
      000855 8F 83            [24] 2017 	mov	dph,r7
      000857 12r00r00         [24] 2018 	lcall	_putchar
                                   2019 ;	life.c:267: printstr(" B T\r\n");
      00085A 90r00r63         [24] 2020 	mov	dptr,#___str_12
      00085D 75 F0 80         [24] 2021 	mov	b,#0x80
      000860 12r00r00         [24] 2022 	lcall	_printstr
                                   2023 ;	life.c:268: c = toupper(getchar());
      000863 12r00r00         [24] 2024 	lcall	_getchar
      000866 12r00r00         [24] 2025 	lcall	_toupper
      000869 AE 82            [24] 2026 	mov	r6,dpl
      00086B AF 83            [24] 2027 	mov	r7,dph
                                   2028 ;	life.c:269: if (i0 || (c == (int)'T')) goto term;
      00086D 78r00            [12] 2029 	mov	r0,#_i0
      00086F E6               [12] 2030 	mov	a,@r0
      000870 60 03            [24] 2031 	jz	00298$
      000872 02r0Ar9F         [24] 2032 	ljmp	00154$
      000875                       2033 00298$:
      000875 BE 54 06         [24] 2034 	cjne	r6,#0x54,00299$
      000878 BF 00 03         [24] 2035 	cjne	r7,#0x00,00299$
      00087B 02r0Ar9F         [24] 2036 	ljmp	00154$
      00087E                       2037 00299$:
                                   2038 ;	life.c:270: else if ((c == (int)'I') || (c == (int)'L') || (c == (int)'R')) {
      00087E BE 49 05         [24] 2039 	cjne	r6,#0x49,00300$
      000881 BF 00 02         [24] 2040 	cjne	r7,#0x00,00300$
      000884 80 0E            [24] 2041 	sjmp	00117$
      000886                       2042 00300$:
      000886 BE 4C 05         [24] 2043 	cjne	r6,#0x4c,00301$
      000889 BF 00 02         [24] 2044 	cjne	r7,#0x00,00301$
      00088C 80 06            [24] 2045 	sjmp	00117$
      00088E                       2046 00301$:
      00088E BE 52 34         [24] 2047 	cjne	r6,#0x52,00118$
      000891 BF 00 31         [24] 2048 	cjne	r7,#0x00,00118$
      000894                       2049 00117$:
                                   2050 ;	life.c:271: if (c == (int)'L') loadiu();
      000894 BE 4C 08         [24] 2051 	cjne	r6,#0x4c,00104$
      000897 BF 00 05         [24] 2052 	cjne	r7,#0x00,00104$
      00089A 12r01rC5         [24] 2053 	lcall	_loadiu
      00089D 80 09            [24] 2054 	sjmp	00105$
      00089F                       2055 00104$:
                                   2056 ;	life.c:272: else if (c == (int)'R') loadriu();
      00089F BE 52 06         [24] 2057 	cjne	r6,#0x52,00105$
      0008A2 BF 00 03         [24] 2058 	cjne	r7,#0x00,00105$
      0008A5 12r02rE8         [24] 2059 	lcall	_loadriu
      0008A8                       2060 00105$:
                                   2061 ;	life.c:273: initu();
      0008A8 12r00r18         [24] 2062 	lcall	_initu
                                   2063 ;	life.c:274: showu(PRUNI, u);
      0008AB 74r00            [12] 2064 	mov	a,#_u
      0008AD C0 E0            [24] 2065 	push	acc
      0008AF 74s48            [12] 2066 	mov	a,#(_u >> 8)
      0008B1 C0 E0            [24] 2067 	push	acc
      0008B3 E4               [12] 2068 	clr	a
      0008B4 C0 E0            [24] 2069 	push	acc
      0008B6 75 82 04         [24] 2070 	mov	dpl,#0x04
      0008B9 12r00r77         [24] 2071 	lcall	_showu
      0008BC 15 81            [12] 2072 	dec	sp
      0008BE 15 81            [12] 2073 	dec	sp
      0008C0 15 81            [12] 2074 	dec	sp
      0008C2 02r08r3B         [24] 2075 	ljmp	00127$
      0008C5                       2076 00118$:
                                   2077 ;	life.c:275: } else if (c == (int)'O') showu(PRUNI, iu);
      0008C5 BE 4F 1D         [24] 2078 	cjne	r6,#0x4f,00115$
      0008C8 BF 00 1A         [24] 2079 	cjne	r7,#0x00,00115$
      0008CB 74r00            [12] 2080 	mov	a,#_iu
      0008CD C0 E0            [24] 2081 	push	acc
      0008CF 74s00            [12] 2082 	mov	a,#(_iu >> 8)
      0008D1 C0 E0            [24] 2083 	push	acc
      0008D3 E4               [12] 2084 	clr	a
      0008D4 C0 E0            [24] 2085 	push	acc
      0008D6 75 82 04         [24] 2086 	mov	dpl,#0x04
      0008D9 12r00r77         [24] 2087 	lcall	_showu
      0008DC 15 81            [12] 2088 	dec	sp
      0008DE 15 81            [12] 2089 	dec	sp
      0008E0 15 81            [12] 2090 	dec	sp
      0008E2 02r08r3B         [24] 2091 	ljmp	00127$
      0008E5                       2092 00115$:
                                   2093 ;	life.c:276: else if (c == (int)'P') showu(PRHDR | PRUNI, u);
      0008E5 BE 50 1D         [24] 2094 	cjne	r6,#0x50,00112$
      0008E8 BF 00 1A         [24] 2095 	cjne	r7,#0x00,00112$
      0008EB 74r00            [12] 2096 	mov	a,#_u
      0008ED C0 E0            [24] 2097 	push	acc
      0008EF 74s48            [12] 2098 	mov	a,#(_u >> 8)
      0008F1 C0 E0            [24] 2099 	push	acc
      0008F3 E4               [12] 2100 	clr	a
      0008F4 C0 E0            [24] 2101 	push	acc
      0008F6 75 82 06         [24] 2102 	mov	dpl,#0x06
      0008F9 12r00r77         [24] 2103 	lcall	_showu
      0008FC 15 81            [12] 2104 	dec	sp
      0008FE 15 81            [12] 2105 	dec	sp
      000900 15 81            [12] 2106 	dec	sp
      000902 02r08r3B         [24] 2107 	ljmp	00127$
      000905                       2108 00112$:
                                   2109 ;	life.c:277: else if (c == (int)'U') pruni = !pruni;
      000905 BE 55 13         [24] 2110 	cjne	r6,#0x55,00109$
      000908 BF 00 10         [24] 2111 	cjne	r7,#0x00,00109$
      00090B 78r11            [12] 2112 	mov	r0,#_pruni
      00090D E6               [12] 2113 	mov	a,@r0
      00090E B4 01 00         [24] 2114 	cjne	a,#0x01,00314$
      000911                       2115 00314$:
      000911 92*00            [24] 2116 	mov	b0,c
      000913 78r11            [12] 2117 	mov	r0,#_pruni
      000915 E4               [12] 2118 	clr	a
      000916 33               [12] 2119 	rlc	a
      000917 F6               [12] 2120 	mov	@r0,a
      000918 02r08r3B         [24] 2121 	ljmp	00127$
      00091B                       2122 00109$:
                                   2123 ;	life.c:278: else if (c == (int)'S') break;
      00091B BE 53 05         [24] 2124 	cjne	r6,#0x53,00315$
      00091E BF 00 02         [24] 2125 	cjne	r7,#0x00,00315$
      000921 80 03            [24] 2126 	sjmp	00316$
      000923                       2127 00315$:
      000923 02r08r3B         [24] 2128 	ljmp	00127$
      000926                       2129 00316$:
                                   2130 ;	life.c:281: for (i1 = 0; !i0 && !i1; ) {
      000926 78r01            [12] 2131 	mov	r0,#_i1
      000928 76 00            [12] 2132 	mov	@r0,#0x00
      00092A                       2133 00164$:
      00092A 78r00            [12] 2134 	mov	r0,#_i0
      00092C E6               [12] 2135 	mov	a,@r0
      00092D 60 03            [24] 2136 	jz	00317$
      00092F 02r0Ar72         [24] 2137 	ljmp	00150$
      000932                       2138 00317$:
      000932 78r01            [12] 2139 	mov	r0,#_i1
      000934 E6               [12] 2140 	mov	a,@r0
      000935 60 03            [24] 2141 	jz	00318$
      000937 02r0Ar72         [24] 2142 	ljmp	00150$
      00093A                       2143 00318$:
                                   2144 ;	life.c:282: if (fxu()) {
      00093A 78r10            [12] 2145 	mov	r0,#_fxset
      00093C E6               [12] 2146 	mov	a,@r0
      00093D 60 23            [24] 2147 	jz	00130$
                                   2148 ;	life.c:283: printstr("FIXED AT ");
      00093F 90r00r6A         [24] 2149 	mov	dptr,#___str_13
      000942 75 F0 80         [24] 2150 	mov	b,#0x80
      000945 12r00r00         [24] 2151 	lcall	_printstr
                                   2152 ;	life.c:284: showu(PRHDR, u);
      000948 74r00            [12] 2153 	mov	a,#_u
      00094A C0 E0            [24] 2154 	push	acc
      00094C 74s48            [12] 2155 	mov	a,#(_u >> 8)
      00094E C0 E0            [24] 2156 	push	acc
      000950 E4               [12] 2157 	clr	a
      000951 C0 E0            [24] 2158 	push	acc
      000953 75 82 02         [24] 2159 	mov	dpl,#0x02
      000956 12r00r77         [24] 2160 	lcall	_showu
      000959 15 81            [12] 2161 	dec	sp
      00095B 15 81            [12] 2162 	dec	sp
      00095D 15 81            [12] 2163 	dec	sp
                                   2164 ;	life.c:285: break;
      00095F 02r0Ar72         [24] 2165 	ljmp	00150$
      000962                       2166 00130$:
                                   2167 ;	life.c:287: if (pruni) showu(PRCLR | PRHDR | PRUNI, u);
      000962 78r11            [12] 2168 	mov	r0,#_pruni
      000964 E6               [12] 2169 	mov	a,@r0
      000965 60 19            [24] 2170 	jz	00132$
      000967 74r00            [12] 2171 	mov	a,#_u
      000969 C0 E0            [24] 2172 	push	acc
      00096B 74s48            [12] 2173 	mov	a,#(_u >> 8)
      00096D C0 E0            [24] 2174 	push	acc
      00096F E4               [12] 2175 	clr	a
      000970 C0 E0            [24] 2176 	push	acc
      000972 75 82 07         [24] 2177 	mov	dpl,#0x07
      000975 12r00r77         [24] 2178 	lcall	_showu
      000978 15 81            [12] 2179 	dec	sp
      00097A 15 81            [12] 2180 	dec	sp
      00097C 15 81            [12] 2181 	dec	sp
      00097E 80 17            [24] 2182 	sjmp	00133$
      000980                       2183 00132$:
                                   2184 ;	life.c:288: else showu(PRHDR, u);
      000980 74r00            [12] 2185 	mov	a,#_u
      000982 C0 E0            [24] 2186 	push	acc
      000984 74s48            [12] 2187 	mov	a,#(_u >> 8)
      000986 C0 E0            [24] 2188 	push	acc
      000988 E4               [12] 2189 	clr	a
      000989 C0 E0            [24] 2190 	push	acc
      00098B 75 82 02         [24] 2191 	mov	dpl,#0x02
      00098E 12r00r77         [24] 2192 	lcall	_showu
      000991 15 81            [12] 2193 	dec	sp
      000993 15 81            [12] 2194 	dec	sp
      000995 15 81            [12] 2195 	dec	sp
      000997                       2196 00133$:
                                   2197 ;	life.c:53: gen++;
      000997 78r03            [12] 2198 	mov	r0,#_gen
      000999 06               [12] 2199 	inc	@r0
      00099A B6 00 0C         [24] 2200 	cjne	@r0,#0x00,00321$
      00099D 08               [12] 2201 	inc	r0
      00099E 06               [12] 2202 	inc	@r0
      00099F B6 00 07         [24] 2203 	cjne	@r0,#0x00,00321$
      0009A2 08               [12] 2204 	inc	r0
      0009A3 06               [12] 2205 	inc	@r0
      0009A4 B6 00 02         [24] 2206 	cjne	@r0,#0x00,00321$
      0009A7 08               [12] 2207 	inc	r0
      0009A8 06               [12] 2208 	inc	@r0
      0009A9                       2209 00321$:
                                   2210 ;	life.c:290: evolveu();
      0009A9 12r03r54         [24] 2211 	lcall	_evolveu
                                   2212 ;	life.c:291: if (fixed) {
      0009AC 78r12            [12] 2213 	mov	r0,#_fixed
      0009AE E6               [12] 2214 	mov	a,@r0
      0009AF 60 41            [24] 2215 	jz	00135$
                                   2216 ;	life.c:59: genfx = gen;
      0009B1 78r03            [12] 2217 	mov	r0,#_gen
      0009B3 86 04            [24] 2218 	mov	ar4,@r0
      0009B5 08               [12] 2219 	inc	r0
      0009B6 86 05            [24] 2220 	mov	ar5,@r0
      0009B8 08               [12] 2221 	inc	r0
      0009B9 86 06            [24] 2222 	mov	ar6,@r0
      0009BB 08               [12] 2223 	inc	r0
      0009BC 86 07            [24] 2224 	mov	ar7,@r0
      0009BE 78r0B            [12] 2225 	mov	r0,#_genfx
      0009C0 A6 04            [24] 2226 	mov	@r0,ar4
      0009C2 08               [12] 2227 	inc	r0
      0009C3 A6 05            [24] 2228 	mov	@r0,ar5
      0009C5 08               [12] 2229 	inc	r0
      0009C6 A6 06            [24] 2230 	mov	@r0,ar6
      0009C8 08               [12] 2231 	inc	r0
      0009C9 A6 07            [24] 2232 	mov	@r0,ar7
                                   2233 ;	life.c:60: fxset = 1;
      0009CB 78r10            [12] 2234 	mov	r0,#_fxset
      0009CD 76 01            [12] 2235 	mov	@r0,#0x01
                                   2236 ;	life.c:293: printstr("FIXED AT ");
      0009CF 90r00r6A         [24] 2237 	mov	dptr,#___str_13
      0009D2 75 F0 80         [24] 2238 	mov	b,#0x80
      0009D5 12r00r00         [24] 2239 	lcall	_printstr
                                   2240 ;	life.c:294: showu(PRHDR, u);
      0009D8 74r00            [12] 2241 	mov	a,#_u
      0009DA C0 E0            [24] 2242 	push	acc
      0009DC 74s48            [12] 2243 	mov	a,#(_u >> 8)
      0009DE C0 E0            [24] 2244 	push	acc
      0009E0 E4               [12] 2245 	clr	a
      0009E1 C0 E0            [24] 2246 	push	acc
      0009E3 75 82 02         [24] 2247 	mov	dpl,#0x02
      0009E6 12r00r77         [24] 2248 	lcall	_showu
      0009E9 15 81            [12] 2249 	dec	sp
      0009EB 15 81            [12] 2250 	dec	sp
      0009ED 15 81            [12] 2251 	dec	sp
                                   2252 ;	life.c:295: break;
      0009EF 02r0Ar72         [24] 2253 	ljmp	00150$
      0009F2                       2254 00135$:
                                   2255 ;	life.c:297: if (cycle2) {
      0009F2 78r13            [12] 2256 	mov	r0,#_cycle2
      0009F4 E6               [12] 2257 	mov	a,@r0
      0009F5 60 23            [24] 2258 	jz	00139$
                                   2259 ;	life.c:298: if (!c2u()) updatec2();
      0009F7 78r0F            [12] 2260 	mov	r0,#_c2set
      0009F9 E6               [12] 2261 	mov	a,@r0
      0009FA 70 1E            [24] 2262 	jnz	00139$
                                   2263 ;	life.c:66: genc2 = gen;
      0009FC 78r03            [12] 2264 	mov	r0,#_gen
      0009FE 86 04            [24] 2265 	mov	ar4,@r0
      000A00 08               [12] 2266 	inc	r0
      000A01 86 05            [24] 2267 	mov	ar5,@r0
      000A03 08               [12] 2268 	inc	r0
      000A04 86 06            [24] 2269 	mov	ar6,@r0
      000A06 08               [12] 2270 	inc	r0
      000A07 86 07            [24] 2271 	mov	ar7,@r0
      000A09 78r07            [12] 2272 	mov	r0,#_genc2
      000A0B A6 04            [24] 2273 	mov	@r0,ar4
      000A0D 08               [12] 2274 	inc	r0
      000A0E A6 05            [24] 2275 	mov	@r0,ar5
      000A10 08               [12] 2276 	inc	r0
      000A11 A6 06            [24] 2277 	mov	@r0,ar6
      000A13 08               [12] 2278 	inc	r0
      000A14 A6 07            [24] 2279 	mov	@r0,ar7
                                   2280 ;	life.c:67: c2set = 1;
      000A16 78r0F            [12] 2281 	mov	r0,#_c2set
      000A18 76 01            [12] 2282 	mov	@r0,#0x01
                                   2283 ;	life.c:298: if (!c2u()) updatec2();
      000A1A                       2284 00139$:
                                   2285 ;	life.c:301: c = getchar_poll();
      000A1A 12r00r00         [24] 2286 	lcall	_getchar_poll
      000A1D AE 82            [24] 2287 	mov	r6,dpl
      000A1F AF 83            [24] 2288 	mov	r7,dph
                                   2289 ;	life.c:302: if (c > 0) {
      000A21 C3               [12] 2290 	clr	c
      000A22 E4               [12] 2291 	clr	a
      000A23 9E               [12] 2292 	subb	a,r6
      000A24 74 80            [12] 2293 	mov	a,#(0x00 ^ 0x80)
      000A26 8F F0            [24] 2294 	mov	b,r7
      000A28 63 F0 80         [24] 2295 	xrl	b,#0x80
      000A2B 95 F0            [12] 2296 	subb	a,b
      000A2D 40 03            [24] 2297 	jc	00325$
      000A2F 02r09r2A         [24] 2298 	ljmp	00164$
      000A32                       2299 00325$:
                                   2300 ;	life.c:303: c = toupper(c);
      000A32 8E 82            [24] 2301 	mov	dpl,r6
      000A34 8F 83            [24] 2302 	mov	dph,r7
      000A36 12r00r00         [24] 2303 	lcall	_toupper
      000A39 AE 82            [24] 2304 	mov	r6,dpl
      000A3B AF 83            [24] 2305 	mov	r7,dph
                                   2306 ;	life.c:304: if (c == (int)'U') pruni = !pruni;
      000A3D BE 55 13         [24] 2307 	cjne	r6,#0x55,00146$
      000A40 BF 00 10         [24] 2308 	cjne	r7,#0x00,00146$
      000A43 78r11            [12] 2309 	mov	r0,#_pruni
      000A45 E6               [12] 2310 	mov	a,@r0
      000A46 B4 01 00         [24] 2311 	cjne	a,#0x01,00328$
      000A49                       2312 00328$:
      000A49 92*00            [24] 2313 	mov	b0,c
      000A4B 78r11            [12] 2314 	mov	r0,#_pruni
      000A4D E4               [12] 2315 	clr	a
      000A4E 33               [12] 2316 	rlc	a
      000A4F F6               [12] 2317 	mov	@r0,a
      000A50 02r09r2A         [24] 2318 	ljmp	00164$
      000A53                       2319 00146$:
                                   2320 ;	life.c:305: else if (c == (int)'T') i0 = 1;
      000A53 BE 54 0A         [24] 2321 	cjne	r6,#0x54,00143$
      000A56 BF 00 07         [24] 2322 	cjne	r7,#0x00,00143$
      000A59 78r00            [12] 2323 	mov	r0,#_i0
      000A5B 76 01            [12] 2324 	mov	@r0,#0x01
      000A5D 02r09r2A         [24] 2325 	ljmp	00164$
      000A60                       2326 00143$:
                                   2327 ;	life.c:306: else if (c == (int)'B') i1 = 1;
      000A60 BE 42 05         [24] 2328 	cjne	r6,#0x42,00331$
      000A63 BF 00 02         [24] 2329 	cjne	r7,#0x00,00331$
      000A66 80 03            [24] 2330 	sjmp	00332$
      000A68                       2331 00331$:
      000A68 02r09r2A         [24] 2332 	ljmp	00164$
      000A6B                       2333 00332$:
      000A6B 78r01            [12] 2334 	mov	r0,#_i1
      000A6D 76 01            [12] 2335 	mov	@r0,#0x01
      000A6F 02r09r2A         [24] 2336 	ljmp	00164$
      000A72                       2337 00150$:
                                   2338 ;	life.c:310: if (i1) {
      000A72 78r01            [12] 2339 	mov	r0,#_i1
      000A74 E6               [12] 2340 	mov	a,@r0
      000A75 60 20            [24] 2341 	jz	00167$
                                   2342 ;	life.c:311: printstr("BREAK AT ");
      000A77 90r00r74         [24] 2343 	mov	dptr,#___str_14
      000A7A 75 F0 80         [24] 2344 	mov	b,#0x80
      000A7D 12r00r00         [24] 2345 	lcall	_printstr
                                   2346 ;	life.c:312: showu(PRHDR, u);
      000A80 74r00            [12] 2347 	mov	a,#_u
      000A82 C0 E0            [24] 2348 	push	acc
      000A84 74s48            [12] 2349 	mov	a,#(_u >> 8)
      000A86 C0 E0            [24] 2350 	push	acc
      000A88 E4               [12] 2351 	clr	a
      000A89 C0 E0            [24] 2352 	push	acc
      000A8B 75 82 02         [24] 2353 	mov	dpl,#0x02
      000A8E 12r00r77         [24] 2354 	lcall	_showu
      000A91 15 81            [12] 2355 	dec	sp
      000A93 15 81            [12] 2356 	dec	sp
      000A95 15 81            [12] 2357 	dec	sp
      000A97                       2358 00167$:
                                   2359 ;	life.c:263: for (i0 = 0; !i0; ) {
      000A97 78r00            [12] 2360 	mov	r0,#_i0
      000A99 E6               [12] 2361 	mov	a,@r0
      000A9A 70 03            [24] 2362 	jnz	00334$
      000A9C 02r08r3B         [24] 2363 	ljmp	00127$
      000A9F                       2364 00334$:
                                   2365 ;	life.c:316: term:
      000A9F                       2366 00154$:
                                   2367 ;	life.c:317: EA = 0;
                                   2368 ;	assignBit
      000A9F C2 AF            [12] 2369 	clr	_EA
                                   2370 ;	life.c:318: printstr("TERM\r\n");
      000AA1 90r00r7E         [24] 2371 	mov	dptr,#___str_15
      000AA4 75 F0 80         [24] 2372 	mov	b,#0x80
      000AA7 12r00r00         [24] 2373 	lcall	_printstr
                                   2374 ;	life.c:320: PCON |= 2;
      000AAA 43 87 02         [24] 2375 	orl	_PCON,#0x02
                                   2376 ;	life.c:322: return;
                                   2377 ;	life.c:323: }
      000AAD 22               [24] 2378 	ret
                                   2379 	.area CSEG    (CODE)
                                   2380 	.area CONST   (CODE)
                                   2381 	.area CONST   (CODE)
      000000                       2382 ___str_0:
      000000 1B                    2383 	.db 0x1b
      000001 5B 32 4A              2384 	.ascii "[2J"
      000004 00                    2385 	.db 0x00
                                   2386 	.area CSEG    (CODE)
                                   2387 	.area CONST   (CODE)
      000005                       2388 ___str_1:
      000005 47 45 4E 20           2389 	.ascii "GEN "
      000009 00                    2390 	.db 0x00
                                   2391 	.area CSEG    (CODE)
                                   2392 	.area CONST   (CODE)
      00000A                       2393 ___str_2:
      00000A 20 43 59 43 4C 45 32  2394 	.ascii " CYCLE2 "
             20
      000012 00                    2395 	.db 0x00
                                   2396 	.area CSEG    (CODE)
                                   2397 	.area CONST   (CODE)
      000013                       2398 ___str_3:
      000013 20 46 49 58 45 44 20  2399 	.ascii " FIXED "
      00001A 00                    2400 	.db 0x00
                                   2401 	.area CSEG    (CODE)
                                   2402 	.area CONST   (CODE)
      00001B                       2403 ___str_4:
      00001B 0D                    2404 	.db 0x0d
      00001C 0A                    2405 	.db 0x0a
      00001D 00                    2406 	.db 0x00
                                   2407 	.area CSEG    (CODE)
                                   2408 	.area CONST   (CODE)
      00001E                       2409 ___str_5:
      00001E 1B                    2410 	.db 0x1b
      00001F 5B 3F 32 35 6C        2411 	.ascii "[?25l"
      000024 00                    2412 	.db 0x00
                                   2413 	.area CSEG    (CODE)
                                   2414 	.area CONST   (CODE)
      000025                       2415 ___str_6:
      000025 1B                    2416 	.db 0x1b
      000026 5B 3F 32 35 68        2417 	.ascii "[?25h"
      00002B 00                    2418 	.db 0x00
                                   2419 	.area CSEG    (CODE)
                                   2420 	.area CONST   (CODE)
      00002C                       2421 ___str_7:
      00002C 4C 4F 41 44 20 30 20  2422 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00003A 00                    2423 	.db 0x00
                                   2424 	.area CSEG    (CODE)
                                   2425 	.area CONST   (CODE)
      00003B                       2426 ___str_8:
      00003B 3E                    2427 	.ascii ">"
      00003C 0D                    2428 	.db 0x0d
      00003D 0A                    2429 	.db 0x0a
      00003E 00                    2430 	.db 0x00
                                   2431 	.area CSEG    (CODE)
                                   2432 	.area CONST   (CODE)
      00003F                       2433 ___str_9:
      00003F 52 41 4E 44 4F 4D     2434 	.ascii "RANDOM"
      000045 00                    2435 	.db 0x00
                                   2436 	.area CSEG    (CODE)
                                   2437 	.area CONST   (CODE)
      000046                       2438 ___str_10:
      000046 1B                    2439 	.db 0x1b
      000047 5B 3F 32 35 68        2440 	.ascii "[?25h"
      00004C 1B                    2441 	.db 0x1b
      00004D 5B 6D                 2442 	.ascii "[m"
      00004F 00                    2443 	.db 0x00
                                   2444 	.area CSEG    (CODE)
                                   2445 	.area CONST   (CODE)
      000050                       2446 ___str_11:
      000050 4C 49 46 45 20 49 20  2447 	.ascii "LIFE I L R O P S U"
             4C 20 52 20 4F 20 50
             20 53 20 55
      000062 00                    2448 	.db 0x00
                                   2449 	.area CSEG    (CODE)
                                   2450 	.area CONST   (CODE)
      000063                       2451 ___str_12:
      000063 20 42 20 54           2452 	.ascii " B T"
      000067 0D                    2453 	.db 0x0d
      000068 0A                    2454 	.db 0x0a
      000069 00                    2455 	.db 0x00
                                   2456 	.area CSEG    (CODE)
                                   2457 	.area CONST   (CODE)
      00006A                       2458 ___str_13:
      00006A 46 49 58 45 44 20 41  2459 	.ascii "FIXED AT "
             54 20
      000073 00                    2460 	.db 0x00
                                   2461 	.area CSEG    (CODE)
                                   2462 	.area CONST   (CODE)
      000074                       2463 ___str_14:
      000074 42 52 45 41 4B 20 41  2464 	.ascii "BREAK AT "
             54 20
      00007D 00                    2465 	.db 0x00
                                   2466 	.area CSEG    (CODE)
                                   2467 	.area CONST   (CODE)
      00007E                       2468 ___str_15:
      00007E 54 45 52 4D           2469 	.ascii "TERM"
      000082 0D                    2470 	.db 0x0d
      000083 0A                    2471 	.db 0x0a
      000084 00                    2472 	.db 0x00
                                   2473 	.area CSEG    (CODE)
                                   2474 	.area XINIT   (CODE)
                                   2475 	.area CABS    (ABS,CODE)
