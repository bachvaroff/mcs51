                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _generation
                                    143 	.globl _cycle2
                                    144 	.globl _fixed
                                    145 	.globl _n
                                    146 	.globl _bstep
                                    147 	.globl _c
                                    148 	.globl _j
                                    149 	.globl _y1
                                    150 	.globl _x1
                                    151 	.globl _y
                                    152 	.globl _x
                                    153 	.globl _nu
                                    154 	.globl _u
                                    155 	.globl _pu
                                    156 	.globl _i1
                                    157 	.globl _i0
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 1
      000001                        349 _i1::
      000001                        350 	.ds 1
      000002                        351 _pu::
      000002                        352 	.ds 1024
      000402                        353 _u::
      000402                        354 	.ds 1024
      000802                        355 _nu::
      000802                        356 	.ds 1024
      000C02                        357 _x::
      000C02                        358 	.ds 2
      000C04                        359 _y::
      000C04                        360 	.ds 2
      000C06                        361 _x1::
      000C06                        362 	.ds 2
      000C08                        363 _y1::
      000C08                        364 	.ds 2
      000C0A                        365 _j::
      000C0A                        366 	.ds 2
      000C0C                        367 _c::
      000C0C                        368 	.ds 2
      000C0E                        369 _bstep::
      000C0E                        370 	.ds 1
      000C0F                        371 _n::
      000C0F                        372 	.ds 1
      000C10                        373 _fixed::
      000C10                        374 	.ds 1
      000C11                        375 _cycle2::
      000C11                        376 	.ds 1
      000C12                        377 _generation::
      000C12                        378 	.ds 4
                                    379 ;--------------------------------------------------------
                                    380 ; absolute external ram data
                                    381 ;--------------------------------------------------------
                                    382 	.area XABS    (ABS,XDATA)
                                    383 ;--------------------------------------------------------
                                    384 ; external initialized ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area XISEG   (XDATA)
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT0 (CODE)
                                    389 	.area GSINIT1 (CODE)
                                    390 	.area GSINIT2 (CODE)
                                    391 	.area GSINIT3 (CODE)
                                    392 	.area GSINIT4 (CODE)
                                    393 	.area GSINIT5 (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.area GSFINAL (CODE)
                                    396 	.area CSEG    (CODE)
                                    397 ;--------------------------------------------------------
                                    398 ; interrupt vector 
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
      000000                        401 __interrupt_vect:
      000000 02r00r00         [24]  402 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  403 	ljmp	_int0
      000006                        404 	.ds	5
      00000B 32               [24]  405 	reti
      00000C                        406 	.ds	7
      000013 02r00r21         [24]  407 	ljmp	_int1
                                    408 ;--------------------------------------------------------
                                    409 ; global & static initialisations
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area GSINIT  (CODE)
                                    413 	.area GSFINAL (CODE)
                                    414 	.area GSINIT  (CODE)
                                    415 	.globl __sdcc_gsinit_startup
                                    416 	.globl __sdcc_program_startup
                                    417 	.globl __start__stack
                                    418 	.globl __mcs51_genXINIT
                                    419 	.globl __mcs51_genXRAMCLEAR
                                    420 	.globl __mcs51_genRAMCLEAR
                                    421 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  422 	ljmp	__sdcc_program_startup
                                    423 ;--------------------------------------------------------
                                    424 ; Home
                                    425 ;--------------------------------------------------------
                                    426 	.area HOME    (CODE)
                                    427 	.area HOME    (CODE)
      000016                        428 __sdcc_program_startup:
      000016 02r02r99         [24]  429 	ljmp	_main
                                    430 ;	return from main will return to caller
                                    431 ;--------------------------------------------------------
                                    432 ; code
                                    433 ;--------------------------------------------------------
                                    434 	.area CSEG    (CODE)
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'putchar'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers 
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:7: int putchar(int c) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function putchar
                                    443 ;	-----------------------------------------
      000000                        444 _putchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:12: __endasm;
      000000 E5 82            [12]  447 	mov	a, dpl
      000002 02 00 30         [24]  448 	ljmp	0x0030
                                    449 ;	life.c:13: }
                                    450 ;	naked function: no epilogue.
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'getchar'
                                    453 ;------------------------------------------------------------
                                    454 ;	life.c:15: int getchar(void) __naked {
                                    455 ;	-----------------------------------------
                                    456 ;	 function getchar
                                    457 ;	-----------------------------------------
      000005                        458 _getchar:
                                    459 ;	naked function: no prologue.
                                    460 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  461 	lcall	0x0032
      000008 F5 82            [12]  462 	mov	dpl, a
      00000A 75 83 00         [24]  463 	mov	dph, #0
      00000D 22               [24]  464 	ret
                                    465 ;	life.c:22: }
                                    466 ;	naked function: no epilogue.
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:65: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000E                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000E C0 E0            [24]  483 	push	acc
      000010 C0 82            [24]  484 	push	dpl
      000012 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  487 	mov	dptr,#_i0
      000017 74 01            [12]  488 	mov	a,#0x01
      000019 F0               [24]  489 	movx	@dptr,a
                                    490 ;	life.c:67: }
      00001A D0 83            [24]  491 	pop	dph
      00001C D0 82            [24]  492 	pop	dpl
      00001E D0 E0            [24]  493 	pop	acc
      000020 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop psw
                                    497 ;	eliminated unneeded push/pop b
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int1'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:69: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int1
                                    504 ;	-----------------------------------------
      000021                        505 _int1:
      000021 C0 E0            [24]  506 	push	acc
      000023 C0 82            [24]  507 	push	dpl
      000025 C0 83            [24]  508 	push	dph
                                    509 ;	life.c:70: i1 = 1;
      000027 90r00r01         [24]  510 	mov	dptr,#_i1
      00002A 74 01            [12]  511 	mov	a,#0x01
      00002C F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:71: }
      00002D D0 83            [24]  514 	pop	dph
      00002F D0 82            [24]  515 	pop	dpl
      000031 D0 E0            [24]  516 	pop	acc
      000033 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;hdr                       Allocated to registers r7 
                                    525 ;__1966080005              Allocated to registers 
                                    526 ;s                         Allocated to registers r5 r6 r7 
                                    527 ;__1310720001              Allocated to registers r6 r7 
                                    528 ;a                         Allocated to registers 
                                    529 ;__1310720003              Allocated to registers r6 r7 
                                    530 ;a                         Allocated to registers 
                                    531 ;__1966080008              Allocated to registers 
                                    532 ;s                         Allocated to registers r5 r6 r7 
                                    533 ;__2621440011              Allocated to registers 
                                    534 ;s                         Allocated to registers r5 r6 r7 
                                    535 ;------------------------------------------------------------
                                    536 ;	life.c:94: void show(char hdr) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function show
                                    539 ;	-----------------------------------------
      000034                        540 _show:
                           000007   541 	ar7 = 0x07
                           000006   542 	ar6 = 0x06
                           000005   543 	ar5 = 0x05
                           000004   544 	ar4 = 0x04
                           000003   545 	ar3 = 0x03
                           000002   546 	ar2 = 0x02
                           000001   547 	ar1 = 0x01
                           000000   548 	ar0 = 0x00
                                    549 ;	life.c:95: if (hdr) {
      000034 E5 82            [12]  550 	mov	a,dpl
      000036 FF               [12]  551 	mov	r7,a
      000037 70 03            [24]  552 	jnz	00190$
      000039 02r01rDA         [24]  553 	ljmp	00102$
      00003C                        554 00190$:
                                    555 ;	life.c:96: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  556 	mov	r5,#___str_0
      00003E 7Es00            [12]  557 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  558 	mov	r7,#0x80
                                    559 ;	life.c:48: return;
      000042                        560 00121$:
                                    561 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  562 	mov	dpl,r5
      000044 8E 83            [24]  563 	mov	dph,r6
      000046 8F F0            [24]  564 	mov	b,r7
      000048 12r00r00         [24]  565 	lcall	__gptrget
      00004B FC               [12]  566 	mov	r4,a
      00004C 60 10            [24]  567 	jz	00109$
      00004E 7B 00            [12]  568 	mov	r3,#0x00
      000050 8C 82            [24]  569 	mov	dpl,r4
      000052 8B 83            [24]  570 	mov	dph,r3
      000054 12r00r00         [24]  571 	lcall	_putchar
      000057 0D               [12]  572 	inc	r5
                                    573 ;	life.c:96: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  574 	cjne	r5,#0x00,00121$
      00005B 0E               [12]  575 	inc	r6
      00005C 80 E4            [24]  576 	sjmp	00121$
      00005E                        577 00109$:
                                    578 ;	life.c:88: print16x(generation[1]);
      00005E 90r0Cr14         [24]  579 	mov	dptr,#(_generation + 0x0002)
      000061 E0               [24]  580 	movx	a,@dptr
      000062 FE               [12]  581 	mov	r6,a
      000063 A3               [24]  582 	inc	dptr
      000064 E0               [24]  583 	movx	a,@dptr
                                    584 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000065 FF               [12]  585 	mov	r7,a
      000066 C4               [12]  586 	swap	a
      000067 54 0F            [12]  587 	anl	a,#0x0f
      000069 30 E3 02         [24]  588 	jnb	acc.3,00193$
      00006C 44 F0            [12]  589 	orl	a,#0xf0
      00006E                        590 00193$:
      00006E FC               [12]  591 	mov	r4,a
      00006F 33               [12]  592 	rlc	a
      000070 95 E0            [12]  593 	subb	a,acc
      000072 53 04 0F         [24]  594 	anl	ar4,#0x0f
      000075 7D 00            [12]  595 	mov	r5,#0x00
      000077 EC               [12]  596 	mov	a,r4
      000078 24r00            [12]  597 	add	a,#_digits
      00007A F5 82            [12]  598 	mov	dpl,a
      00007C ED               [12]  599 	mov	a,r5
      00007D 34s00            [12]  600 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  601 	mov	dph,a
      000081 E4               [12]  602 	clr	a
      000082 93               [24]  603 	movc	a,@a+dptr
      000083 FD               [12]  604 	mov	r5,a
      000084 7C 00            [12]  605 	mov	r4,#0x00
      000086 8D 82            [24]  606 	mov	dpl,r5
      000088 8C 83            [24]  607 	mov	dph,r4
      00008A 12r00r00         [24]  608 	lcall	_putchar
                                    609 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 05            [24]  610 	mov	ar5,r7
      00008F 53 05 0F         [24]  611 	anl	ar5,#0x0f
      000092 7C 00            [12]  612 	mov	r4,#0x00
      000094 ED               [12]  613 	mov	a,r5
      000095 24r00            [12]  614 	add	a,#_digits
      000097 F5 82            [12]  615 	mov	dpl,a
      000099 EC               [12]  616 	mov	a,r4
      00009A 34s00            [12]  617 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  618 	mov	dph,a
      00009E E4               [12]  619 	clr	a
      00009F 93               [24]  620 	movc	a,@a+dptr
      0000A0 FD               [12]  621 	mov	r5,a
      0000A1 7C 00            [12]  622 	mov	r4,#0x00
      0000A3 8D 82            [24]  623 	mov	dpl,r5
      0000A5 8C 83            [24]  624 	mov	dph,r4
      0000A7 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8E 04            [24]  627 	mov	ar4,r6
      0000AC EF               [12]  628 	mov	a,r7
      0000AD C4               [12]  629 	swap	a
      0000AE CC               [12]  630 	xch	a,r4
      0000AF C4               [12]  631 	swap	a
      0000B0 54 0F            [12]  632 	anl	a,#0x0f
      0000B2 6C               [12]  633 	xrl	a,r4
      0000B3 CC               [12]  634 	xch	a,r4
      0000B4 54 0F            [12]  635 	anl	a,#0x0f
      0000B6 CC               [12]  636 	xch	a,r4
      0000B7 6C               [12]  637 	xrl	a,r4
      0000B8 CC               [12]  638 	xch	a,r4
      0000B9 30 E3 02         [24]  639 	jnb	acc.3,00194$
      0000BC 44 F0            [12]  640 	orl	a,#0xf0
      0000BE                        641 00194$:
      0000BE 53 04 0F         [24]  642 	anl	ar4,#0x0f
      0000C1 7D 00            [12]  643 	mov	r5,#0x00
      0000C3 EC               [12]  644 	mov	a,r4
      0000C4 24r00            [12]  645 	add	a,#_digits
      0000C6 F5 82            [12]  646 	mov	dpl,a
      0000C8 ED               [12]  647 	mov	a,r5
      0000C9 34s00            [12]  648 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  649 	mov	dph,a
      0000CD E4               [12]  650 	clr	a
      0000CE 93               [24]  651 	movc	a,@a+dptr
      0000CF FD               [12]  652 	mov	r5,a
      0000D0 7C 00            [12]  653 	mov	r4,#0x00
      0000D2 8D 82            [24]  654 	mov	dpl,r5
      0000D4 8C 83            [24]  655 	mov	dph,r4
      0000D6 12r00r00         [24]  656 	lcall	_putchar
                                    657 ;	life.c:40: putchar(digits[a & 0xf]);
      0000D9 53 06 0F         [24]  658 	anl	ar6,#0x0f
      0000DC 7F 00            [12]  659 	mov	r7,#0x00
      0000DE EE               [12]  660 	mov	a,r6
      0000DF 24r00            [12]  661 	add	a,#_digits
      0000E1 F5 82            [12]  662 	mov	dpl,a
      0000E3 EF               [12]  663 	mov	a,r7
      0000E4 34s00            [12]  664 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  665 	mov	dph,a
      0000E8 E4               [12]  666 	clr	a
      0000E9 93               [24]  667 	movc	a,@a+dptr
      0000EA FF               [12]  668 	mov	r7,a
      0000EB 7E 00            [12]  669 	mov	r6,#0x00
      0000ED 8F 82            [24]  670 	mov	dpl,r7
      0000EF 8E 83            [24]  671 	mov	dph,r6
      0000F1 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:89: print16x(generation[0]);
      0000F4 90r0Cr12         [24]  674 	mov	dptr,#_generation
      0000F7 E0               [24]  675 	movx	a,@dptr
      0000F8 FE               [12]  676 	mov	r6,a
      0000F9 A3               [24]  677 	inc	dptr
      0000FA E0               [24]  678 	movx	a,@dptr
                                    679 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000FB FF               [12]  680 	mov	r7,a
      0000FC C4               [12]  681 	swap	a
      0000FD 54 0F            [12]  682 	anl	a,#0x0f
      0000FF 30 E3 02         [24]  683 	jnb	acc.3,00195$
      000102 44 F0            [12]  684 	orl	a,#0xf0
      000104                        685 00195$:
      000104 FC               [12]  686 	mov	r4,a
      000105 33               [12]  687 	rlc	a
      000106 95 E0            [12]  688 	subb	a,acc
      000108 53 04 0F         [24]  689 	anl	ar4,#0x0f
      00010B 7D 00            [12]  690 	mov	r5,#0x00
      00010D EC               [12]  691 	mov	a,r4
      00010E 24r00            [12]  692 	add	a,#_digits
      000110 F5 82            [12]  693 	mov	dpl,a
      000112 ED               [12]  694 	mov	a,r5
      000113 34s00            [12]  695 	addc	a,#(_digits >> 8)
      000115 F5 83            [12]  696 	mov	dph,a
      000117 E4               [12]  697 	clr	a
      000118 93               [24]  698 	movc	a,@a+dptr
      000119 FD               [12]  699 	mov	r5,a
      00011A 7C 00            [12]  700 	mov	r4,#0x00
      00011C 8D 82            [24]  701 	mov	dpl,r5
      00011E 8C 83            [24]  702 	mov	dph,r4
      000120 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000123 8F 05            [24]  705 	mov	ar5,r7
      000125 53 05 0F         [24]  706 	anl	ar5,#0x0f
      000128 7C 00            [12]  707 	mov	r4,#0x00
      00012A ED               [12]  708 	mov	a,r5
      00012B 24r00            [12]  709 	add	a,#_digits
      00012D F5 82            [12]  710 	mov	dpl,a
      00012F EC               [12]  711 	mov	a,r4
      000130 34s00            [12]  712 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  713 	mov	dph,a
      000134 E4               [12]  714 	clr	a
      000135 93               [24]  715 	movc	a,@a+dptr
      000136 FD               [12]  716 	mov	r5,a
      000137 7C 00            [12]  717 	mov	r4,#0x00
      000139 8D 82            [24]  718 	mov	dpl,r5
      00013B 8C 83            [24]  719 	mov	dph,r4
      00013D 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000140 8E 04            [24]  722 	mov	ar4,r6
      000142 EF               [12]  723 	mov	a,r7
      000143 C4               [12]  724 	swap	a
      000144 CC               [12]  725 	xch	a,r4
      000145 C4               [12]  726 	swap	a
      000146 54 0F            [12]  727 	anl	a,#0x0f
      000148 6C               [12]  728 	xrl	a,r4
      000149 CC               [12]  729 	xch	a,r4
      00014A 54 0F            [12]  730 	anl	a,#0x0f
      00014C CC               [12]  731 	xch	a,r4
      00014D 6C               [12]  732 	xrl	a,r4
      00014E CC               [12]  733 	xch	a,r4
      00014F 30 E3 02         [24]  734 	jnb	acc.3,00196$
      000152 44 F0            [12]  735 	orl	a,#0xf0
      000154                        736 00196$:
      000154 53 04 0F         [24]  737 	anl	ar4,#0x0f
      000157 7D 00            [12]  738 	mov	r5,#0x00
      000159 EC               [12]  739 	mov	a,r4
      00015A 24r00            [12]  740 	add	a,#_digits
      00015C F5 82            [12]  741 	mov	dpl,a
      00015E ED               [12]  742 	mov	a,r5
      00015F 34s00            [12]  743 	addc	a,#(_digits >> 8)
      000161 F5 83            [12]  744 	mov	dph,a
      000163 E4               [12]  745 	clr	a
      000164 93               [24]  746 	movc	a,@a+dptr
      000165 FD               [12]  747 	mov	r5,a
      000166 7C 00            [12]  748 	mov	r4,#0x00
      000168 8D 82            [24]  749 	mov	dpl,r5
      00016A 8C 83            [24]  750 	mov	dph,r4
      00016C 12r00r00         [24]  751 	lcall	_putchar
                                    752 ;	life.c:40: putchar(digits[a & 0xf]);
      00016F 53 06 0F         [24]  753 	anl	ar6,#0x0f
      000172 7F 00            [12]  754 	mov	r7,#0x00
      000174 EE               [12]  755 	mov	a,r6
      000175 24r00            [12]  756 	add	a,#_digits
      000177 F5 82            [12]  757 	mov	dpl,a
      000179 EF               [12]  758 	mov	a,r7
      00017A 34s00            [12]  759 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  760 	mov	dph,a
      00017E E4               [12]  761 	clr	a
      00017F 93               [24]  762 	movc	a,@a+dptr
      000180 FF               [12]  763 	mov	r7,a
      000181 7E 00            [12]  764 	mov	r6,#0x00
      000183 8F 82            [24]  765 	mov	dpl,r7
      000185 8E 83            [24]  766 	mov	dph,r6
      000187 12r00r00         [24]  767 	lcall	_putchar
                                    768 ;	life.c:98: printstr("\r\n");
      00018A 7Dr18            [12]  769 	mov	r5,#___str_1
      00018C 7Es00            [12]  770 	mov	r6,#(___str_1 >> 8)
      00018E 7F 80            [12]  771 	mov	r7,#0x80
                                    772 ;	life.c:48: return;
      000190                        773 00124$:
                                    774 ;	life.c:46: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  775 	mov	dpl,r5
      000192 8E 83            [24]  776 	mov	dph,r6
      000194 8F F0            [24]  777 	mov	b,r7
      000196 12r00r00         [24]  778 	lcall	__gptrget
      000199 FC               [12]  779 	mov	r4,a
      00019A 60 10            [24]  780 	jz	00114$
      00019C 7B 00            [12]  781 	mov	r3,#0x00
      00019E 8C 82            [24]  782 	mov	dpl,r4
      0001A0 8B 83            [24]  783 	mov	dph,r3
      0001A2 12r00r00         [24]  784 	lcall	_putchar
      0001A5 0D               [12]  785 	inc	r5
                                    786 ;	life.c:98: printstr("\r\n");
      0001A6 BD 00 E7         [24]  787 	cjne	r5,#0x00,00124$
      0001A9 0E               [12]  788 	inc	r6
      0001AA 80 E4            [24]  789 	sjmp	00124$
      0001AC                        790 00114$:
                                    791 ;	life.c:81: generation[0]++;
      0001AC 90r0Cr12         [24]  792 	mov	dptr,#_generation
      0001AF E0               [24]  793 	movx	a,@dptr
      0001B0 FE               [12]  794 	mov	r6,a
      0001B1 A3               [24]  795 	inc	dptr
      0001B2 E0               [24]  796 	movx	a,@dptr
      0001B3 FF               [12]  797 	mov	r7,a
      0001B4 0E               [12]  798 	inc	r6
      0001B5 BE 00 01         [24]  799 	cjne	r6,#0x00,00199$
      0001B8 0F               [12]  800 	inc	r7
      0001B9                        801 00199$:
      0001B9 90r0Cr12         [24]  802 	mov	dptr,#_generation
      0001BC EE               [12]  803 	mov	a,r6
      0001BD F0               [24]  804 	movx	@dptr,a
      0001BE EF               [12]  805 	mov	a,r7
      0001BF A3               [24]  806 	inc	dptr
      0001C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	life.c:82: if (!generation[0]) generation[1]++;
      0001C1 EE               [12]  809 	mov	a,r6
      0001C2 4F               [12]  810 	orl	a,r7
      0001C3 70 15            [24]  811 	jnz	00102$
      0001C5 90r0Cr14         [24]  812 	mov	dptr,#(_generation + 0x0002)
      0001C8 E0               [24]  813 	movx	a,@dptr
      0001C9 FE               [12]  814 	mov	r6,a
      0001CA A3               [24]  815 	inc	dptr
      0001CB E0               [24]  816 	movx	a,@dptr
      0001CC FF               [12]  817 	mov	r7,a
      0001CD 0E               [12]  818 	inc	r6
      0001CE BE 00 01         [24]  819 	cjne	r6,#0x00,00201$
      0001D1 0F               [12]  820 	inc	r7
      0001D2                        821 00201$:
      0001D2 90r0Cr14         [24]  822 	mov	dptr,#(_generation + 0x0002)
      0001D5 EE               [12]  823 	mov	a,r6
      0001D6 F0               [24]  824 	movx	@dptr,a
      0001D7 EF               [12]  825 	mov	a,r7
      0001D8 A3               [24]  826 	inc	dptr
      0001D9 F0               [24]  827 	movx	@dptr,a
                                    828 ;	life.c:99: updategen();
      0001DA                        829 00102$:
                                    830 ;	life.c:102: for (x = 0; x < W; x++) {
      0001DA 90r0Cr02         [24]  831 	mov	dptr,#_x
      0001DD E4               [12]  832 	clr	a
      0001DE F0               [24]  833 	movx	@dptr,a
      0001DF A3               [24]  834 	inc	dptr
      0001E0 F0               [24]  835 	movx	@dptr,a
      0001E1                        836 00131$:
                                    837 ;	life.c:103: for (y = 0; y < H; y++)
      0001E1 90r0Cr04         [24]  838 	mov	dptr,#_y
      0001E4 E4               [12]  839 	clr	a
      0001E5 F0               [24]  840 	movx	@dptr,a
      0001E6 A3               [24]  841 	inc	dptr
      0001E7 F0               [24]  842 	movx	@dptr,a
      0001E8                        843 00126$:
                                    844 ;	life.c:104: if (u[A2D(W, y, x)]) {
      0001E8 90r0Cr04         [24]  845 	mov	dptr,#_y
      0001EB E0               [24]  846 	movx	a,@dptr
      0001EC FE               [12]  847 	mov	r6,a
      0001ED A3               [24]  848 	inc	dptr
      0001EE E0               [24]  849 	movx	a,@dptr
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CE               [12]  853 	xch	a,r6
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CE               [12]  856 	xch	a,r6
      0001F7 6E               [12]  857 	xrl	a,r6
      0001F8 CE               [12]  858 	xch	a,r6
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CE               [12]  860 	xch	a,r6
      0001FC 6E               [12]  861 	xrl	a,r6
      0001FD FF               [12]  862 	mov	r7,a
      0001FE 90r0Cr02         [24]  863 	mov	dptr,#_x
      000201 E0               [24]  864 	movx	a,@dptr
      000202 FC               [12]  865 	mov	r4,a
      000203 A3               [24]  866 	inc	dptr
      000204 E0               [24]  867 	movx	a,@dptr
      000205 FD               [12]  868 	mov	r5,a
      000206 EC               [12]  869 	mov	a,r4
      000207 2E               [12]  870 	add	a,r6
      000208 FE               [12]  871 	mov	r6,a
      000209 ED               [12]  872 	mov	a,r5
      00020A 3F               [12]  873 	addc	a,r7
      00020B FF               [12]  874 	mov	r7,a
      00020C EE               [12]  875 	mov	a,r6
      00020D 24r02            [12]  876 	add	a,#_u
      00020F FE               [12]  877 	mov	r6,a
      000210 EF               [12]  878 	mov	a,r7
      000211 34s04            [12]  879 	addc	a,#(_u >> 8)
      000213 FF               [12]  880 	mov	r7,a
      000214 8E 82            [24]  881 	mov	dpl,r6
      000216 8F 83            [24]  882 	mov	dph,r7
      000218 E0               [24]  883 	movx	a,@dptr
      000219 60 0E            [24]  884 	jz	00104$
                                    885 ;	life.c:105: putchar('['); putchar(']');
      00021B 90 00 5B         [24]  886 	mov	dptr,#0x005b
      00021E 12r00r00         [24]  887 	lcall	_putchar
      000221 90 00 5D         [24]  888 	mov	dptr,#0x005d
      000224 12r00r00         [24]  889 	lcall	_putchar
      000227 80 0C            [24]  890 	sjmp	00127$
      000229                        891 00104$:
                                    892 ;	life.c:107: putchar('#'); putchar('#');
      000229 90 00 23         [24]  893 	mov	dptr,#0x0023
      00022C 12r00r00         [24]  894 	lcall	_putchar
      00022F 90 00 23         [24]  895 	mov	dptr,#0x0023
      000232 12r00r00         [24]  896 	lcall	_putchar
      000235                        897 00127$:
                                    898 ;	life.c:103: for (y = 0; y < H; y++)
      000235 90r0Cr04         [24]  899 	mov	dptr,#_y
      000238 E0               [24]  900 	movx	a,@dptr
      000239 24 01            [12]  901 	add	a,#0x01
      00023B F0               [24]  902 	movx	@dptr,a
      00023C A3               [24]  903 	inc	dptr
      00023D E0               [24]  904 	movx	a,@dptr
      00023E 34 00            [12]  905 	addc	a,#0x00
      000240 F0               [24]  906 	movx	@dptr,a
      000241 90r0Cr04         [24]  907 	mov	dptr,#_y
      000244 E0               [24]  908 	movx	a,@dptr
      000245 FE               [12]  909 	mov	r6,a
      000246 A3               [24]  910 	inc	dptr
      000247 E0               [24]  911 	movx	a,@dptr
      000248 FF               [12]  912 	mov	r7,a
      000249 C3               [12]  913 	clr	c
      00024A EE               [12]  914 	mov	a,r6
      00024B 94 20            [12]  915 	subb	a,#0x20
      00024D EF               [12]  916 	mov	a,r7
      00024E 64 80            [12]  917 	xrl	a,#0x80
      000250 94 80            [12]  918 	subb	a,#0x80
      000252 40 94            [24]  919 	jc	00126$
                                    920 ;	life.c:109: printstr("\r\n");
      000254 7Dr18            [12]  921 	mov	r5,#___str_1
      000256 7Es00            [12]  922 	mov	r6,#(___str_1 >> 8)
      000258 7F 80            [12]  923 	mov	r7,#0x80
                                    924 ;	life.c:48: return;
      00025A                        925 00129$:
                                    926 ;	life.c:46: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  927 	mov	dpl,r5
      00025C 8E 83            [24]  928 	mov	dph,r6
      00025E 8F F0            [24]  929 	mov	b,r7
      000260 12r00r00         [24]  930 	lcall	__gptrget
      000263 FC               [12]  931 	mov	r4,a
      000264 60 10            [24]  932 	jz	00119$
      000266 7B 00            [12]  933 	mov	r3,#0x00
      000268 8C 82            [24]  934 	mov	dpl,r4
      00026A 8B 83            [24]  935 	mov	dph,r3
      00026C 12r00r00         [24]  936 	lcall	_putchar
      00026F 0D               [12]  937 	inc	r5
                                    938 ;	life.c:109: printstr("\r\n");
      000270 BD 00 E7         [24]  939 	cjne	r5,#0x00,00129$
      000273 0E               [12]  940 	inc	r6
      000274 80 E4            [24]  941 	sjmp	00129$
      000276                        942 00119$:
                                    943 ;	life.c:102: for (x = 0; x < W; x++) {
      000276 90r0Cr02         [24]  944 	mov	dptr,#_x
      000279 E0               [24]  945 	movx	a,@dptr
      00027A 24 01            [12]  946 	add	a,#0x01
      00027C F0               [24]  947 	movx	@dptr,a
      00027D A3               [24]  948 	inc	dptr
      00027E E0               [24]  949 	movx	a,@dptr
      00027F 34 00            [12]  950 	addc	a,#0x00
      000281 F0               [24]  951 	movx	@dptr,a
      000282 90r0Cr02         [24]  952 	mov	dptr,#_x
      000285 E0               [24]  953 	movx	a,@dptr
      000286 FE               [12]  954 	mov	r6,a
      000287 A3               [24]  955 	inc	dptr
      000288 E0               [24]  956 	movx	a,@dptr
      000289 FF               [12]  957 	mov	r7,a
      00028A C3               [12]  958 	clr	c
      00028B EE               [12]  959 	mov	a,r6
      00028C 94 20            [12]  960 	subb	a,#0x20
      00028E EF               [12]  961 	mov	a,r7
      00028F 64 80            [12]  962 	xrl	a,#0x80
      000291 94 80            [12]  963 	subb	a,#0x80
      000293 50 03            [24]  964 	jnc	00206$
      000295 02r01rE1         [24]  965 	ljmp	00131$
      000298                        966 00206$:
                                    967 ;	life.c:112: return;
                                    968 ;	life.c:113: }
      000298 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'main'
                                    972 ;------------------------------------------------------------
                                    973 ;__2621440019              Allocated to registers 
                                    974 ;s                         Allocated to registers r5 r6 r7 
                                    975 ;__1310720013              Allocated to registers 
                                    976 ;s                         Allocated to registers r5 r6 r7 
                                    977 ;__1310720015              Allocated to registers r6 r7 
                                    978 ;a                         Allocated to registers r4 r5 
                                    979 ;__1310720017              Allocated to registers 
                                    980 ;s                         Allocated to registers r5 r6 r7 
                                    981 ;__2621440023              Allocated to registers 
                                    982 ;s                         Allocated to registers r5 r6 r7 
                                    983 ;__4587520027              Allocated to registers 
                                    984 ;s                         Allocated to registers r5 r6 r7 
                                    985 ;__3276800029              Allocated to registers 
                                    986 ;s                         Allocated to registers r5 r6 r7 
                                    987 ;__1310720031              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;sloc0                     Allocated to stack - _bp +1
                                    990 ;sloc1                     Allocated to stack - _bp +3
                                    991 ;sloc2                     Allocated to stack - _bp +5
                                    992 ;sloc3                     Allocated to stack - _bp +6
                                    993 ;sloc4                     Allocated to stack - _bp +8
                                    994 ;sloc5                     Allocated to stack - _bp +10
                                    995 ;sloc6                     Allocated to stack - _bp +12
                                    996 ;sloc7                     Allocated to stack - _bp +14
                                    997 ;------------------------------------------------------------
                                    998 ;	life.c:196: void main(void) {
                                    999 ;	-----------------------------------------
                                   1000 ;	 function main
                                   1001 ;	-----------------------------------------
      000299                       1002 _main:
      000299 C0*00            [24] 1003 	push	_bp
      00029B E5 81            [12] 1004 	mov	a,sp
      00029D F5*00            [12] 1005 	mov	_bp,a
      00029F 24 0F            [12] 1006 	add	a,#0x0f
      0002A1 F5 81            [12] 1007 	mov	sp,a
                                   1008 ;	life.c:197: IT0 = 1;
                                   1009 ;	assignBit
      0002A3 D2 88            [12] 1010 	setb	_IT0
                                   1011 ;	life.c:198: IT1 = 1;
                                   1012 ;	assignBit
      0002A5 D2 8A            [12] 1013 	setb	_IT1
                                   1014 ;	life.c:199: EX0 = 1;
                                   1015 ;	assignBit
      0002A7 D2 A8            [12] 1016 	setb	_EX0
                                   1017 ;	life.c:200: EX1 = 1;
                                   1018 ;	assignBit
      0002A9 D2 AA            [12] 1019 	setb	_EX1
                                   1020 ;	life.c:201: EA = 1;
                                   1021 ;	assignBit
      0002AB D2 AF            [12] 1022 	setb	_EA
                                   1023 ;	life.c:203: for (i0 = 0; !i0; ) {		
      0002AD 90r00r00         [24] 1024 	mov	dptr,#_i0
      0002B0 E4               [12] 1025 	clr	a
      0002B1 F0               [24] 1026 	movx	@dptr,a
      0002B2                       1027 00201$:
                                   1028 ;	life.c:204: printstr("\033[2J\033[mINIT\r\n");
      0002B2 7Dr26            [12] 1029 	mov	r5,#___str_4
      0002B4 7Es00            [12] 1030 	mov	r6,#(___str_4 >> 8)
      0002B6 7F 80            [12] 1031 	mov	r7,#0x80
                                   1032 ;	life.c:48: return;
      0002B8                       1033 00172$:
                                   1034 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002B8 8D 82            [24] 1035 	mov	dpl,r5
      0002BA 8E 83            [24] 1036 	mov	dph,r6
      0002BC 8F F0            [24] 1037 	mov	b,r7
      0002BE 12r00r00         [24] 1038 	lcall	__gptrget
      0002C1 FC               [12] 1039 	mov	r4,a
      0002C2 60 10            [24] 1040 	jz	00107$
      0002C4 7B 00            [12] 1041 	mov	r3,#0x00
      0002C6 8C 82            [24] 1042 	mov	dpl,r4
      0002C8 8B 83            [24] 1043 	mov	dph,r3
      0002CA 12r00r00         [24] 1044 	lcall	_putchar
      0002CD 0D               [12] 1045 	inc	r5
                                   1046 ;	life.c:205: while (1) {
      0002CE BD 00 E7         [24] 1047 	cjne	r5,#0x00,00172$
      0002D1 0E               [12] 1048 	inc	r6
      0002D2 80 E4            [24] 1049 	sjmp	00172$
      0002D4                       1050 00107$:
                                   1051 ;	life.c:206: c = getchar();
      0002D4 12r00r05         [24] 1052 	lcall	_getchar
      0002D7 AE 82            [24] 1053 	mov	r6,dpl
      0002D9 AF 83            [24] 1054 	mov	r7,dph
      0002DB 90r0Cr0C         [24] 1055 	mov	dptr,#_c
      0002DE EE               [12] 1056 	mov	a,r6
      0002DF F0               [24] 1057 	movx	@dptr,a
      0002E0 EF               [12] 1058 	mov	a,r7
      0002E1 A3               [24] 1059 	inc	dptr
      0002E2 F0               [24] 1060 	movx	@dptr,a
                                   1061 ;	life.c:207: if (i0 || (c == (int)'T')) goto terminate;
      0002E3 90r00r00         [24] 1062 	mov	dptr,#_i0
      0002E6 E0               [24] 1063 	movx	a,@dptr
      0002E7 60 03            [24] 1064 	jz	00398$
      0002E9 02r0Ar9F         [24] 1065 	ljmp	00127$
      0002EC                       1066 00398$:
      0002EC BE 54 06         [24] 1067 	cjne	r6,#0x54,00399$
      0002EF BF 00 03         [24] 1068 	cjne	r7,#0x00,00399$
      0002F2 02r0Ar9F         [24] 1069 	ljmp	00127$
      0002F5                       1070 00399$:
                                   1071 ;	life.c:208: if (c == (int)'L') break;
      0002F5 BE 4C DC         [24] 1072 	cjne	r6,#0x4c,00107$
      0002F8 BF 00 D9         [24] 1073 	cjne	r7,#0x00,00107$
                                   1074 ;	life.c:211: reload:
      0002FB                       1075 00109$:
                                   1076 ;	life.c:116: memset(u, 0, sizeof (u));
      0002FB E4               [12] 1077 	clr	a
      0002FC C0 E0            [24] 1078 	push	acc
      0002FE 74 04            [12] 1079 	mov	a,#0x04
      000300 C0 E0            [24] 1080 	push	acc
      000302 E4               [12] 1081 	clr	a
      000303 C0 E0            [24] 1082 	push	acc
      000305 90r04r02         [24] 1083 	mov	dptr,#_u
      000308 75 F0 00         [24] 1084 	mov	b,#0x00
      00030B 12r00r00         [24] 1085 	lcall	_memset
      00030E 15 81            [12] 1086 	dec	sp
      000310 15 81            [12] 1087 	dec	sp
      000312 15 81            [12] 1088 	dec	sp
                                   1089 ;	life.c:117: memset(pu, 0, sizeof (pu));
      000314 E4               [12] 1090 	clr	a
      000315 C0 E0            [24] 1091 	push	acc
      000317 74 04            [12] 1092 	mov	a,#0x04
      000319 C0 E0            [24] 1093 	push	acc
      00031B E4               [12] 1094 	clr	a
      00031C C0 E0            [24] 1095 	push	acc
      00031E 90r00r02         [24] 1096 	mov	dptr,#_pu
      000321 75 F0 00         [24] 1097 	mov	b,#0x00
      000324 12r00r00         [24] 1098 	lcall	_memset
      000327 15 81            [12] 1099 	dec	sp
      000329 15 81            [12] 1100 	dec	sp
      00032B 15 81            [12] 1101 	dec	sp
                                   1102 ;	life.c:123: j = 0;
      00032D 90r0Cr0A         [24] 1103 	mov	dptr,#_j
      000330 E4               [12] 1104 	clr	a
      000331 F0               [24] 1105 	movx	@dptr,a
      000332 A3               [24] 1106 	inc	dptr
      000333 F0               [24] 1107 	movx	@dptr,a
                                   1108 ;	life.c:125: printstr("LOAD <");
      000334 7Dr1B            [12] 1109 	mov	r5,#___str_2
      000336 7Es00            [12] 1110 	mov	r6,#(___str_2 >> 8)
      000338 7F 80            [12] 1111 	mov	r7,#0x80
                                   1112 ;	life.c:48: return;
      00033A                       1113 00175$:
                                   1114 ;	life.c:46: for (; *s; s++) putchar(*s);
      00033A 8D 82            [24] 1115 	mov	dpl,r5
      00033C 8E 83            [24] 1116 	mov	dph,r6
      00033E 8F F0            [24] 1117 	mov	b,r7
      000340 12r00r00         [24] 1118 	lcall	__gptrget
      000343 FC               [12] 1119 	mov	r4,a
      000344 60 10            [24] 1120 	jz	00132$
      000346 7B 00            [12] 1121 	mov	r3,#0x00
      000348 8C 82            [24] 1122 	mov	dpl,r4
      00034A 8B 83            [24] 1123 	mov	dph,r3
      00034C 12r00r00         [24] 1124 	lcall	_putchar
      00034F 0D               [12] 1125 	inc	r5
                                   1126 ;	life.c:125: printstr("LOAD <");
      000350 BD 00 E7         [24] 1127 	cjne	r5,#0x00,00175$
      000353 0E               [12] 1128 	inc	r6
      000354 80 E4            [24] 1129 	sjmp	00175$
      000356                       1130 00132$:
                                   1131 ;	life.c:127: for (y = 0; y < H; y++)
      000356 90r0Cr04         [24] 1132 	mov	dptr,#_y
      000359 E4               [12] 1133 	clr	a
      00035A F0               [24] 1134 	movx	@dptr,a
      00035B A3               [24] 1135 	inc	dptr
      00035C F0               [24] 1136 	movx	@dptr,a
      00035D                       1137 00179$:
                                   1138 ;	life.c:128: for (x = 0; x < W; x++) {
      00035D 90r0Cr02         [24] 1139 	mov	dptr,#_x
      000360 E4               [12] 1140 	clr	a
      000361 F0               [24] 1141 	movx	@dptr,a
      000362 A3               [24] 1142 	inc	dptr
      000363 F0               [24] 1143 	movx	@dptr,a
      000364                       1144 00177$:
                                   1145 ;	life.c:129: c = getchar();
      000364 12r00r05         [24] 1146 	lcall	_getchar
      000367 AE 82            [24] 1147 	mov	r6,dpl
      000369 AF 83            [24] 1148 	mov	r7,dph
      00036B 90r0Cr0C         [24] 1149 	mov	dptr,#_c
      00036E EE               [12] 1150 	mov	a,r6
      00036F F0               [24] 1151 	movx	@dptr,a
      000370 EF               [12] 1152 	mov	a,r7
      000371 A3               [24] 1153 	inc	dptr
      000372 F0               [24] 1154 	movx	@dptr,a
                                   1155 ;	life.c:130: if (c == (int)'0') {
      000373 BE 30 41         [24] 1156 	cjne	r6,#0x30,00139$
      000376 BF 00 3E         [24] 1157 	cjne	r7,#0x00,00139$
                                   1158 ;	life.c:131: u[A2D(W, y, x)] = 0;
      000379 90r0Cr04         [24] 1159 	mov	dptr,#_y
      00037C E0               [24] 1160 	movx	a,@dptr
      00037D FC               [12] 1161 	mov	r4,a
      00037E A3               [24] 1162 	inc	dptr
      00037F E0               [24] 1163 	movx	a,@dptr
      000380 C4               [12] 1164 	swap	a
      000381 23               [12] 1165 	rl	a
      000382 54 E0            [12] 1166 	anl	a,#0xe0
      000384 CC               [12] 1167 	xch	a,r4
      000385 C4               [12] 1168 	swap	a
      000386 23               [12] 1169 	rl	a
      000387 CC               [12] 1170 	xch	a,r4
      000388 6C               [12] 1171 	xrl	a,r4
      000389 CC               [12] 1172 	xch	a,r4
      00038A 54 E0            [12] 1173 	anl	a,#0xe0
      00038C CC               [12] 1174 	xch	a,r4
      00038D 6C               [12] 1175 	xrl	a,r4
      00038E FD               [12] 1176 	mov	r5,a
      00038F 90r0Cr02         [24] 1177 	mov	dptr,#_x
      000392 E0               [24] 1178 	movx	a,@dptr
      000393 FA               [12] 1179 	mov	r2,a
      000394 A3               [24] 1180 	inc	dptr
      000395 E0               [24] 1181 	movx	a,@dptr
      000396 FB               [12] 1182 	mov	r3,a
      000397 EA               [12] 1183 	mov	a,r2
      000398 2C               [12] 1184 	add	a,r4
      000399 FC               [12] 1185 	mov	r4,a
      00039A EB               [12] 1186 	mov	a,r3
      00039B 3D               [12] 1187 	addc	a,r5
      00039C FD               [12] 1188 	mov	r5,a
      00039D EC               [12] 1189 	mov	a,r4
      00039E 24r02            [12] 1190 	add	a,#_u
      0003A0 F5 82            [12] 1191 	mov	dpl,a
      0003A2 ED               [12] 1192 	mov	a,r5
      0003A3 34s04            [12] 1193 	addc	a,#(_u >> 8)
      0003A5 F5 83            [12] 1194 	mov	dph,a
      0003A7 E4               [12] 1195 	clr	a
      0003A8 F0               [24] 1196 	movx	@dptr,a
                                   1197 ;	life.c:132: j++;
      0003A9 90r0Cr0A         [24] 1198 	mov	dptr,#_j
      0003AC E0               [24] 1199 	movx	a,@dptr
      0003AD 24 01            [12] 1200 	add	a,#0x01
      0003AF F0               [24] 1201 	movx	@dptr,a
      0003B0 A3               [24] 1202 	inc	dptr
      0003B1 E0               [24] 1203 	movx	a,@dptr
      0003B2 34 00            [12] 1204 	addc	a,#0x00
      0003B4 F0               [24] 1205 	movx	@dptr,a
      0003B5 80 4D            [24] 1206 	sjmp	00178$
      0003B7                       1207 00139$:
                                   1208 ;	life.c:133: } else if (c == (int)'1') {
      0003B7 BE 31 42         [24] 1209 	cjne	r6,#0x31,00137$
      0003BA BF 00 3F         [24] 1210 	cjne	r7,#0x00,00137$
                                   1211 ;	life.c:134: u[A2D(W, y, x)] = 1;
      0003BD 90r0Cr04         [24] 1212 	mov	dptr,#_y
      0003C0 E0               [24] 1213 	movx	a,@dptr
      0003C1 FC               [12] 1214 	mov	r4,a
      0003C2 A3               [24] 1215 	inc	dptr
      0003C3 E0               [24] 1216 	movx	a,@dptr
      0003C4 C4               [12] 1217 	swap	a
      0003C5 23               [12] 1218 	rl	a
      0003C6 54 E0            [12] 1219 	anl	a,#0xe0
      0003C8 CC               [12] 1220 	xch	a,r4
      0003C9 C4               [12] 1221 	swap	a
      0003CA 23               [12] 1222 	rl	a
      0003CB CC               [12] 1223 	xch	a,r4
      0003CC 6C               [12] 1224 	xrl	a,r4
      0003CD CC               [12] 1225 	xch	a,r4
      0003CE 54 E0            [12] 1226 	anl	a,#0xe0
      0003D0 CC               [12] 1227 	xch	a,r4
      0003D1 6C               [12] 1228 	xrl	a,r4
      0003D2 FD               [12] 1229 	mov	r5,a
      0003D3 90r0Cr02         [24] 1230 	mov	dptr,#_x
      0003D6 E0               [24] 1231 	movx	a,@dptr
      0003D7 FA               [12] 1232 	mov	r2,a
      0003D8 A3               [24] 1233 	inc	dptr
      0003D9 E0               [24] 1234 	movx	a,@dptr
      0003DA FB               [12] 1235 	mov	r3,a
      0003DB EA               [12] 1236 	mov	a,r2
      0003DC 2C               [12] 1237 	add	a,r4
      0003DD FC               [12] 1238 	mov	r4,a
      0003DE EB               [12] 1239 	mov	a,r3
      0003DF 3D               [12] 1240 	addc	a,r5
      0003E0 FD               [12] 1241 	mov	r5,a
      0003E1 EC               [12] 1242 	mov	a,r4
      0003E2 24r02            [12] 1243 	add	a,#_u
      0003E4 F5 82            [12] 1244 	mov	dpl,a
      0003E6 ED               [12] 1245 	mov	a,r5
      0003E7 34s04            [12] 1246 	addc	a,#(_u >> 8)
      0003E9 F5 83            [12] 1247 	mov	dph,a
      0003EB 74 01            [12] 1248 	mov	a,#0x01
      0003ED F0               [24] 1249 	movx	@dptr,a
                                   1250 ;	life.c:135: j++;
      0003EE 90r0Cr0A         [24] 1251 	mov	dptr,#_j
      0003F1 E0               [24] 1252 	movx	a,@dptr
      0003F2 24 01            [12] 1253 	add	a,#0x01
      0003F4 F0               [24] 1254 	movx	@dptr,a
      0003F5 A3               [24] 1255 	inc	dptr
      0003F6 E0               [24] 1256 	movx	a,@dptr
      0003F7 34 00            [12] 1257 	addc	a,#0x00
      0003F9 F0               [24] 1258 	movx	@dptr,a
      0003FA 80 08            [24] 1259 	sjmp	00178$
      0003FC                       1260 00137$:
                                   1261 ;	life.c:136: } else if (c == (int)'#') goto out;
      0003FC BE 23 05         [24] 1262 	cjne	r6,#0x23,00408$
      0003FF BF 00 02         [24] 1263 	cjne	r7,#0x00,00408$
      000402 80 44            [24] 1264 	sjmp	00150$
      000404                       1265 00408$:
      000404                       1266 00178$:
                                   1267 ;	life.c:128: for (x = 0; x < W; x++) {
      000404 90r0Cr02         [24] 1268 	mov	dptr,#_x
      000407 E0               [24] 1269 	movx	a,@dptr
      000408 24 01            [12] 1270 	add	a,#0x01
      00040A F0               [24] 1271 	movx	@dptr,a
      00040B A3               [24] 1272 	inc	dptr
      00040C E0               [24] 1273 	movx	a,@dptr
      00040D 34 00            [12] 1274 	addc	a,#0x00
      00040F F0               [24] 1275 	movx	@dptr,a
      000410 90r0Cr02         [24] 1276 	mov	dptr,#_x
      000413 E0               [24] 1277 	movx	a,@dptr
      000414 FE               [12] 1278 	mov	r6,a
      000415 A3               [24] 1279 	inc	dptr
      000416 E0               [24] 1280 	movx	a,@dptr
      000417 FF               [12] 1281 	mov	r7,a
      000418 C3               [12] 1282 	clr	c
      000419 EE               [12] 1283 	mov	a,r6
      00041A 94 20            [12] 1284 	subb	a,#0x20
      00041C EF               [12] 1285 	mov	a,r7
      00041D 64 80            [12] 1286 	xrl	a,#0x80
      00041F 94 80            [12] 1287 	subb	a,#0x80
      000421 50 03            [24] 1288 	jnc	00409$
      000423 02r03r64         [24] 1289 	ljmp	00177$
      000426                       1290 00409$:
                                   1291 ;	life.c:127: for (y = 0; y < H; y++)
      000426 90r0Cr04         [24] 1292 	mov	dptr,#_y
      000429 E0               [24] 1293 	movx	a,@dptr
      00042A 24 01            [12] 1294 	add	a,#0x01
      00042C F0               [24] 1295 	movx	@dptr,a
      00042D A3               [24] 1296 	inc	dptr
      00042E E0               [24] 1297 	movx	a,@dptr
      00042F 34 00            [12] 1298 	addc	a,#0x00
      000431 F0               [24] 1299 	movx	@dptr,a
      000432 90r0Cr04         [24] 1300 	mov	dptr,#_y
      000435 E0               [24] 1301 	movx	a,@dptr
      000436 FE               [12] 1302 	mov	r6,a
      000437 A3               [24] 1303 	inc	dptr
      000438 E0               [24] 1304 	movx	a,@dptr
      000439 FF               [12] 1305 	mov	r7,a
      00043A C3               [12] 1306 	clr	c
      00043B EE               [12] 1307 	mov	a,r6
      00043C 94 20            [12] 1308 	subb	a,#0x20
      00043E EF               [12] 1309 	mov	a,r7
      00043F 64 80            [12] 1310 	xrl	a,#0x80
      000441 94 80            [12] 1311 	subb	a,#0x80
      000443 50 03            [24] 1312 	jnc	00410$
      000445 02r03r5D         [24] 1313 	ljmp	00179$
      000448                       1314 00410$:
                                   1315 ;	life.c:139: out:
      000448                       1316 00150$:
                                   1317 ;	life.c:140: if (c != (int)'#')
      000448 90r0Cr0C         [24] 1318 	mov	dptr,#_c
      00044B E0               [24] 1319 	movx	a,@dptr
      00044C FE               [12] 1320 	mov	r6,a
      00044D A3               [24] 1321 	inc	dptr
      00044E E0               [24] 1322 	movx	a,@dptr
      00044F FF               [12] 1323 	mov	r7,a
      000450 BE 23 05         [24] 1324 	cjne	r6,#0x23,00411$
      000453 BF 00 02         [24] 1325 	cjne	r7,#0x00,00411$
      000456 80 15            [24] 1326 	sjmp	00149$
      000458                       1327 00411$:
                                   1328 ;	life.c:141: while (1) {
      000458                       1329 00146$:
                                   1330 ;	life.c:142: c = getchar();
      000458 12r00r05         [24] 1331 	lcall	_getchar
      00045B AE 82            [24] 1332 	mov	r6,dpl
      00045D AF 83            [24] 1333 	mov	r7,dph
      00045F 90r0Cr0C         [24] 1334 	mov	dptr,#_c
      000462 EE               [12] 1335 	mov	a,r6
      000463 F0               [24] 1336 	movx	@dptr,a
      000464 EF               [12] 1337 	mov	a,r7
      000465 A3               [24] 1338 	inc	dptr
      000466 F0               [24] 1339 	movx	@dptr,a
                                   1340 ;	life.c:143: if (c == (int)'#') break;
      000467 BE 23 EE         [24] 1341 	cjne	r6,#0x23,00146$
      00046A BF 00 EB         [24] 1342 	cjne	r7,#0x00,00146$
      00046D                       1343 00149$:
                                   1344 ;	life.c:145: print16x(j);
      00046D 90r0Cr0A         [24] 1345 	mov	dptr,#_j
      000470 E0               [24] 1346 	movx	a,@dptr
      000471 FE               [12] 1347 	mov	r6,a
      000472 A3               [24] 1348 	inc	dptr
      000473 E0               [24] 1349 	movx	a,@dptr
                                   1350 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000474 8E 04            [24] 1351 	mov	ar4,r6
      000476 FD               [12] 1352 	mov	r5,a
      000477 C4               [12] 1353 	swap	a
      000478 54 0F            [12] 1354 	anl	a,#0x0f
      00047A 30 E3 02         [24] 1355 	jnb	acc.3,00414$
      00047D 44 F0            [12] 1356 	orl	a,#0xf0
      00047F                       1357 00414$:
      00047F FE               [12] 1358 	mov	r6,a
      000480 33               [12] 1359 	rlc	a
      000481 95 E0            [12] 1360 	subb	a,acc
      000483 53 06 0F         [24] 1361 	anl	ar6,#0x0f
      000486 7F 00            [12] 1362 	mov	r7,#0x00
      000488 EE               [12] 1363 	mov	a,r6
      000489 24r00            [12] 1364 	add	a,#_digits
      00048B F5 82            [12] 1365 	mov	dpl,a
      00048D EF               [12] 1366 	mov	a,r7
      00048E 34s00            [12] 1367 	addc	a,#(_digits >> 8)
      000490 F5 83            [12] 1368 	mov	dph,a
      000492 E4               [12] 1369 	clr	a
      000493 93               [24] 1370 	movc	a,@a+dptr
      000494 FF               [12] 1371 	mov	r7,a
      000495 7E 00            [12] 1372 	mov	r6,#0x00
      000497 8F 82            [24] 1373 	mov	dpl,r7
      000499 8E 83            [24] 1374 	mov	dph,r6
      00049B 12r00r00         [24] 1375 	lcall	_putchar
                                   1376 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00049E 8D 07            [24] 1377 	mov	ar7,r5
      0004A0 53 07 0F         [24] 1378 	anl	ar7,#0x0f
      0004A3 7E 00            [12] 1379 	mov	r6,#0x00
      0004A5 EF               [12] 1380 	mov	a,r7
      0004A6 24r00            [12] 1381 	add	a,#_digits
      0004A8 F5 82            [12] 1382 	mov	dpl,a
      0004AA EE               [12] 1383 	mov	a,r6
      0004AB 34s00            [12] 1384 	addc	a,#(_digits >> 8)
      0004AD F5 83            [12] 1385 	mov	dph,a
      0004AF E4               [12] 1386 	clr	a
      0004B0 93               [24] 1387 	movc	a,@a+dptr
      0004B1 FF               [12] 1388 	mov	r7,a
      0004B2 7E 00            [12] 1389 	mov	r6,#0x00
      0004B4 8F 82            [24] 1390 	mov	dpl,r7
      0004B6 8E 83            [24] 1391 	mov	dph,r6
      0004B8 12r00r00         [24] 1392 	lcall	_putchar
                                   1393 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0004BB 8C 06            [24] 1394 	mov	ar6,r4
      0004BD ED               [12] 1395 	mov	a,r5
      0004BE C4               [12] 1396 	swap	a
      0004BF CE               [12] 1397 	xch	a,r6
      0004C0 C4               [12] 1398 	swap	a
      0004C1 54 0F            [12] 1399 	anl	a,#0x0f
      0004C3 6E               [12] 1400 	xrl	a,r6
      0004C4 CE               [12] 1401 	xch	a,r6
      0004C5 54 0F            [12] 1402 	anl	a,#0x0f
      0004C7 CE               [12] 1403 	xch	a,r6
      0004C8 6E               [12] 1404 	xrl	a,r6
      0004C9 CE               [12] 1405 	xch	a,r6
      0004CA 30 E3 02         [24] 1406 	jnb	acc.3,00415$
      0004CD 44 F0            [12] 1407 	orl	a,#0xf0
      0004CF                       1408 00415$:
      0004CF 53 06 0F         [24] 1409 	anl	ar6,#0x0f
      0004D2 7F 00            [12] 1410 	mov	r7,#0x00
      0004D4 EE               [12] 1411 	mov	a,r6
      0004D5 24r00            [12] 1412 	add	a,#_digits
      0004D7 F5 82            [12] 1413 	mov	dpl,a
      0004D9 EF               [12] 1414 	mov	a,r7
      0004DA 34s00            [12] 1415 	addc	a,#(_digits >> 8)
      0004DC F5 83            [12] 1416 	mov	dph,a
      0004DE E4               [12] 1417 	clr	a
      0004DF 93               [24] 1418 	movc	a,@a+dptr
      0004E0 FF               [12] 1419 	mov	r7,a
      0004E1 7E 00            [12] 1420 	mov	r6,#0x00
      0004E3 8F 82            [24] 1421 	mov	dpl,r7
      0004E5 8E 83            [24] 1422 	mov	dph,r6
      0004E7 12r00r00         [24] 1423 	lcall	_putchar
                                   1424 ;	life.c:40: putchar(digits[a & 0xf]);
      0004EA 53 04 0F         [24] 1425 	anl	ar4,#0x0f
      0004ED 7D 00            [12] 1426 	mov	r5,#0x00
      0004EF EC               [12] 1427 	mov	a,r4
      0004F0 24r00            [12] 1428 	add	a,#_digits
      0004F2 F5 82            [12] 1429 	mov	dpl,a
      0004F4 ED               [12] 1430 	mov	a,r5
      0004F5 34s00            [12] 1431 	addc	a,#(_digits >> 8)
      0004F7 F5 83            [12] 1432 	mov	dph,a
      0004F9 E4               [12] 1433 	clr	a
      0004FA 93               [24] 1434 	movc	a,@a+dptr
      0004FB FF               [12] 1435 	mov	r7,a
      0004FC 7E 00            [12] 1436 	mov	r6,#0x00
      0004FE 8F 82            [24] 1437 	mov	dpl,r7
      000500 8E 83            [24] 1438 	mov	dph,r6
      000502 12r00r00         [24] 1439 	lcall	_putchar
                                   1440 ;	life.c:146: printstr(">\r\n");
      000505 7Dr22            [12] 1441 	mov	r5,#___str_3
      000507 7Es00            [12] 1442 	mov	r6,#(___str_3 >> 8)
      000509 7F 80            [12] 1443 	mov	r7,#0x80
                                   1444 ;	life.c:48: return;
      00050B                       1445 00182$:
                                   1446 ;	life.c:46: for (; *s; s++) putchar(*s);
      00050B 8D 82            [24] 1447 	mov	dpl,r5
      00050D 8E 83            [24] 1448 	mov	dph,r6
      00050F 8F F0            [24] 1449 	mov	b,r7
      000511 12r00r00         [24] 1450 	lcall	__gptrget
      000514 FC               [12] 1451 	mov	r4,a
      000515 60 10            [24] 1452 	jz	00153$
      000517 7B 00            [12] 1453 	mov	r3,#0x00
      000519 8C 82            [24] 1454 	mov	dpl,r4
      00051B 8B 83            [24] 1455 	mov	dph,r3
      00051D 12r00r00         [24] 1456 	lcall	_putchar
      000520 0D               [12] 1457 	inc	r5
                                   1458 ;	life.c:146: printstr(">\r\n");
      000521 BD 00 E7         [24] 1459 	cjne	r5,#0x00,00182$
      000524 0E               [12] 1460 	inc	r6
      000525 80 E4            [24] 1461 	sjmp	00182$
      000527                       1462 00153$:
                                   1463 ;	life.c:214: show(0);
      000527 75 82 00         [24] 1464 	mov	dpl,#0x00
      00052A 12r00r34         [24] 1465 	lcall	_show
                                   1466 ;	life.c:216: printstr("READY\r\n");
      00052D 7Dr34            [12] 1467 	mov	r5,#___str_5
      00052F 7Es00            [12] 1468 	mov	r6,#(___str_5 >> 8)
      000531 7F 80            [12] 1469 	mov	r7,#0x80
                                   1470 ;	life.c:48: return;
      000533                       1471 00185$:
                                   1472 ;	life.c:46: for (; *s; s++) putchar(*s);
      000533 8D 82            [24] 1473 	mov	dpl,r5
      000535 8E 83            [24] 1474 	mov	dph,r6
      000537 8F F0            [24] 1475 	mov	b,r7
      000539 12r00r00         [24] 1476 	lcall	__gptrget
      00053C FC               [12] 1477 	mov	r4,a
      00053D 60 10            [24] 1478 	jz	00118$
      00053F 7B 00            [12] 1479 	mov	r3,#0x00
      000541 8C 82            [24] 1480 	mov	dpl,r4
      000543 8B 83            [24] 1481 	mov	dph,r3
      000545 12r00r00         [24] 1482 	lcall	_putchar
      000548 0D               [12] 1483 	inc	r5
                                   1484 ;	life.c:217: while (1) {
      000549 BD 00 E7         [24] 1485 	cjne	r5,#0x00,00185$
      00054C 0E               [12] 1486 	inc	r6
      00054D 80 E4            [24] 1487 	sjmp	00185$
      00054F                       1488 00118$:
                                   1489 ;	life.c:218: c = getchar();
      00054F 12r00r05         [24] 1490 	lcall	_getchar
      000552 AE 82            [24] 1491 	mov	r6,dpl
      000554 AF 83            [24] 1492 	mov	r7,dph
      000556 90r0Cr0C         [24] 1493 	mov	dptr,#_c
      000559 EE               [12] 1494 	mov	a,r6
      00055A F0               [24] 1495 	movx	@dptr,a
      00055B EF               [12] 1496 	mov	a,r7
      00055C A3               [24] 1497 	inc	dptr
      00055D F0               [24] 1498 	movx	@dptr,a
                                   1499 ;	life.c:219: if (i0 || (c == (int)'T')) goto terminate;
      00055E 90r00r00         [24] 1500 	mov	dptr,#_i0
      000561 E0               [24] 1501 	movx	a,@dptr
      000562 60 03            [24] 1502 	jz	00420$
      000564 02r0Ar9F         [24] 1503 	ljmp	00127$
      000567                       1504 00420$:
      000567 BE 54 06         [24] 1505 	cjne	r6,#0x54,00421$
      00056A BF 00 03         [24] 1506 	cjne	r7,#0x00,00421$
      00056D 02r0Ar9F         [24] 1507 	ljmp	00127$
      000570                       1508 00421$:
                                   1509 ;	life.c:220: if (c == (int)'L') goto reload;
      000570 BE 4C 06         [24] 1510 	cjne	r6,#0x4c,00422$
      000573 BF 00 03         [24] 1511 	cjne	r7,#0x00,00422$
      000576 02r02rFB         [24] 1512 	ljmp	00109$
      000579                       1513 00422$:
                                   1514 ;	life.c:221: if (c == (int)'S') break;
      000579 BE 53 D3         [24] 1515 	cjne	r6,#0x53,00118$
      00057C BF 00 D0         [24] 1516 	cjne	r7,#0x00,00118$
                                   1517 ;	life.c:74: generation[0] = 0;
      00057F 90r0Cr12         [24] 1518 	mov	dptr,#_generation
      000582 E4               [12] 1519 	clr	a
      000583 F0               [24] 1520 	movx	@dptr,a
      000584 A3               [24] 1521 	inc	dptr
      000585 F0               [24] 1522 	movx	@dptr,a
                                   1523 ;	life.c:75: generation[1] = 0;
      000586 90r0Cr14         [24] 1524 	mov	dptr,#(_generation + 0x0002)
      000589 F0               [24] 1525 	movx	@dptr,a
      00058A A3               [24] 1526 	inc	dptr
      00058B F0               [24] 1527 	movx	@dptr,a
                                   1528 ;	life.c:226: for (i1 = 0; !i0 && !i1; ) {
      00058C 90r00r01         [24] 1529 	mov	dptr,#_i1
      00058F F0               [24] 1530 	movx	@dptr,a
      000590                       1531 00196$:
      000590 90r00r00         [24] 1532 	mov	dptr,#_i0
      000593 E0               [24] 1533 	movx	a,@dptr
      000594 60 03            [24] 1534 	jz	00425$
      000596 02r0Ar6B         [24] 1535 	ljmp	00123$
      000599                       1536 00425$:
      000599 90r00r01         [24] 1537 	mov	dptr,#_i1
      00059C E0               [24] 1538 	movx	a,@dptr
      00059D 60 03            [24] 1539 	jz	00426$
      00059F 02r0Ar6B         [24] 1540 	ljmp	00123$
      0005A2                       1541 00426$:
                                   1542 ;	life.c:227: show(1);
      0005A2 75 82 01         [24] 1543 	mov	dpl,#0x01
      0005A5 12r00r34         [24] 1544 	lcall	_show
                                   1545 ;	life.c:154: fixed = 1;
      0005A8 90r0Cr10         [24] 1546 	mov	dptr,#_fixed
      0005AB 74 01            [12] 1547 	mov	a,#0x01
      0005AD F0               [24] 1548 	movx	@dptr,a
                                   1549 ;	life.c:155: cycle2 = 1;
      0005AE 90r0Cr11         [24] 1550 	mov	dptr,#_cycle2
      0005B1 F0               [24] 1551 	movx	@dptr,a
                                   1552 ;	life.c:156: bstep = 0;
      0005B2 90r0Cr0E         [24] 1553 	mov	dptr,#_bstep
      0005B5 E4               [12] 1554 	clr	a
      0005B6 F0               [24] 1555 	movx	@dptr,a
                                   1556 ;	life.c:158: for (y = 0; y < H; y++) {
      0005B7 90r0Cr04         [24] 1557 	mov	dptr,#_y
      0005BA F0               [24] 1558 	movx	@dptr,a
      0005BB A3               [24] 1559 	inc	dptr
      0005BC F0               [24] 1560 	movx	@dptr,a
      0005BD                       1561 00189$:
                                   1562 ;	life.c:159: putchar(busy[bstep]); putchar('\r');
      0005BD 90r0Cr0E         [24] 1563 	mov	dptr,#_bstep
      0005C0 E0               [24] 1564 	movx	a,@dptr
      0005C1 90r0ArCF         [24] 1565 	mov	dptr,#_busy
      0005C4 93               [24] 1566 	movc	a,@a+dptr
      0005C5 FF               [12] 1567 	mov	r7,a
      0005C6 7E 00            [12] 1568 	mov	r6,#0x00
      0005C8 8F 82            [24] 1569 	mov	dpl,r7
      0005CA 8E 83            [24] 1570 	mov	dph,r6
      0005CC 12r00r00         [24] 1571 	lcall	_putchar
      0005CF 90 00 0D         [24] 1572 	mov	dptr,#0x000d
      0005D2 12r00r00         [24] 1573 	lcall	_putchar
                                   1574 ;	life.c:160: bstep = (bstep + 1) & 3;
      0005D5 90r0Cr0E         [24] 1575 	mov	dptr,#_bstep
      0005D8 E0               [24] 1576 	movx	a,@dptr
      0005D9 FF               [12] 1577 	mov	r7,a
      0005DA 0F               [12] 1578 	inc	r7
      0005DB 74 03            [12] 1579 	mov	a,#0x03
      0005DD 5F               [12] 1580 	anl	a,r7
      0005DE F0               [24] 1581 	movx	@dptr,a
                                   1582 ;	life.c:161: for (x = 0; x < W; x++) {
      0005DF 90r0Cr02         [24] 1583 	mov	dptr,#_x
      0005E2 E4               [12] 1584 	clr	a
      0005E3 F0               [24] 1585 	movx	@dptr,a
      0005E4 A3               [24] 1586 	inc	dptr
      0005E5 F0               [24] 1587 	movx	@dptr,a
      0005E6                       1588 00187$:
                                   1589 ;	life.c:162: n = -u[A2D(W, y, x)];
      0005E6 90r0Cr04         [24] 1590 	mov	dptr,#_y
      0005E9 E0               [24] 1591 	movx	a,@dptr
      0005EA FE               [12] 1592 	mov	r6,a
      0005EB A3               [24] 1593 	inc	dptr
      0005EC E0               [24] 1594 	movx	a,@dptr
      0005ED FF               [12] 1595 	mov	r7,a
      0005EE A8*00            [24] 1596 	mov	r0,_bp
      0005F0 08               [12] 1597 	inc	r0
      0005F1 A6 06            [24] 1598 	mov	@r0,ar6
      0005F3 EF               [12] 1599 	mov	a,r7
      0005F4 C4               [12] 1600 	swap	a
      0005F5 23               [12] 1601 	rl	a
      0005F6 54 E0            [12] 1602 	anl	a,#0xe0
      0005F8 C6               [12] 1603 	xch	a,@r0
      0005F9 C4               [12] 1604 	swap	a
      0005FA 23               [12] 1605 	rl	a
      0005FB C6               [12] 1606 	xch	a,@r0
      0005FC 66               [12] 1607 	xrl	a,@r0
      0005FD C6               [12] 1608 	xch	a,@r0
      0005FE 54 E0            [12] 1609 	anl	a,#0xe0
      000600 C6               [12] 1610 	xch	a,@r0
      000601 66               [12] 1611 	xrl	a,@r0
      000602 08               [12] 1612 	inc	r0
      000603 F6               [12] 1613 	mov	@r0,a
      000604 90r0Cr02         [24] 1614 	mov	dptr,#_x
      000607 E0               [24] 1615 	movx	a,@dptr
      000608 FA               [12] 1616 	mov	r2,a
      000609 A3               [24] 1617 	inc	dptr
      00060A E0               [24] 1618 	movx	a,@dptr
      00060B FB               [12] 1619 	mov	r3,a
      00060C A8*00            [24] 1620 	mov	r0,_bp
      00060E 08               [12] 1621 	inc	r0
      00060F E5*00            [12] 1622 	mov	a,_bp
      000611 24 03            [12] 1623 	add	a,#0x03
      000613 F9               [12] 1624 	mov	r1,a
      000614 EA               [12] 1625 	mov	a,r2
      000615 26               [12] 1626 	add	a,@r0
      000616 F7               [12] 1627 	mov	@r1,a
      000617 EB               [12] 1628 	mov	a,r3
      000618 08               [12] 1629 	inc	r0
      000619 36               [12] 1630 	addc	a,@r0
      00061A 09               [12] 1631 	inc	r1
      00061B F7               [12] 1632 	mov	@r1,a
      00061C E5*00            [12] 1633 	mov	a,_bp
      00061E 24 03            [12] 1634 	add	a,#0x03
      000620 F8               [12] 1635 	mov	r0,a
      000621 E6               [12] 1636 	mov	a,@r0
      000622 24r02            [12] 1637 	add	a,#_u
      000624 F5 82            [12] 1638 	mov	dpl,a
      000626 08               [12] 1639 	inc	r0
      000627 E6               [12] 1640 	mov	a,@r0
      000628 34s04            [12] 1641 	addc	a,#(_u >> 8)
      00062A F5 83            [12] 1642 	mov	dph,a
      00062C E0               [24] 1643 	movx	a,@dptr
      00062D FD               [12] 1644 	mov	r5,a
      00062E E5*00            [12] 1645 	mov	a,_bp
      000630 24 05            [12] 1646 	add	a,#0x05
      000632 F8               [12] 1647 	mov	r0,a
      000633 C3               [12] 1648 	clr	c
      000634 E4               [12] 1649 	clr	a
      000635 9D               [12] 1650 	subb	a,r5
      000636 F6               [12] 1651 	mov	@r0,a
                                   1652 ;	life.c:165: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000637 74 1F            [12] 1653 	mov	a,#0x1f
      000639 2E               [12] 1654 	add	a,r6
      00063A FC               [12] 1655 	mov	r4,a
      00063B E4               [12] 1656 	clr	a
      00063C 3F               [12] 1657 	addc	a,r7
      00063D FD               [12] 1658 	mov	r5,a
      00063E C0 07            [24] 1659 	push	ar7
      000640 C0 06            [24] 1660 	push	ar6
      000642 C0 03            [24] 1661 	push	ar3
      000644 C0 02            [24] 1662 	push	ar2
      000646 74 20            [12] 1663 	mov	a,#0x20
      000648 C0 E0            [24] 1664 	push	acc
      00064A E4               [12] 1665 	clr	a
      00064B C0 E0            [24] 1666 	push	acc
      00064D 8C 82            [24] 1667 	mov	dpl,r4
      00064F 8D 83            [24] 1668 	mov	dph,r5
      000651 12r00r00         [24] 1669 	lcall	__modsint
      000654 AC 82            [24] 1670 	mov	r4,dpl
      000656 AD 83            [24] 1671 	mov	r5,dph
      000658 15 81            [12] 1672 	dec	sp
      00065A 15 81            [12] 1673 	dec	sp
      00065C D0 02            [24] 1674 	pop	ar2
      00065E D0 03            [24] 1675 	pop	ar3
      000660 E5*00            [12] 1676 	mov	a,_bp
      000662 24 06            [12] 1677 	add	a,#0x06
      000664 F8               [12] 1678 	mov	r0,a
      000665 A6 04            [24] 1679 	mov	@r0,ar4
      000667 ED               [12] 1680 	mov	a,r5
      000668 C4               [12] 1681 	swap	a
      000669 23               [12] 1682 	rl	a
      00066A 54 E0            [12] 1683 	anl	a,#0xe0
      00066C C6               [12] 1684 	xch	a,@r0
      00066D C4               [12] 1685 	swap	a
      00066E 23               [12] 1686 	rl	a
      00066F C6               [12] 1687 	xch	a,@r0
      000670 66               [12] 1688 	xrl	a,@r0
      000671 C6               [12] 1689 	xch	a,@r0
      000672 54 E0            [12] 1690 	anl	a,#0xe0
      000674 C6               [12] 1691 	xch	a,@r0
      000675 66               [12] 1692 	xrl	a,@r0
      000676 08               [12] 1693 	inc	r0
      000677 F6               [12] 1694 	mov	@r0,a
      000678 74 1F            [12] 1695 	mov	a,#0x1f
      00067A 2A               [12] 1696 	add	a,r2
      00067B FC               [12] 1697 	mov	r4,a
      00067C E4               [12] 1698 	clr	a
      00067D 3B               [12] 1699 	addc	a,r3
      00067E FD               [12] 1700 	mov	r5,a
      00067F C0 03            [24] 1701 	push	ar3
      000681 C0 02            [24] 1702 	push	ar2
      000683 74 20            [12] 1703 	mov	a,#0x20
      000685 C0 E0            [24] 1704 	push	acc
      000687 E4               [12] 1705 	clr	a
      000688 C0 E0            [24] 1706 	push	acc
      00068A 8C 82            [24] 1707 	mov	dpl,r4
      00068C 8D 83            [24] 1708 	mov	dph,r5
      00068E 12r00r00         [24] 1709 	lcall	__modsint
      000691 C8               [12] 1710 	xch	a,r0
      000692 E5*00            [12] 1711 	mov	a,_bp
      000694 24 08            [12] 1712 	add	a,#0x08
      000696 C8               [12] 1713 	xch	a,r0
      000697 A6 82            [24] 1714 	mov	@r0,dpl
      000699 08               [12] 1715 	inc	r0
      00069A A6 83            [24] 1716 	mov	@r0,dph
      00069C 15 81            [12] 1717 	dec	sp
      00069E 15 81            [12] 1718 	dec	sp
      0006A0 D0 02            [24] 1719 	pop	ar2
      0006A2 D0 03            [24] 1720 	pop	ar3
      0006A4 E5*00            [12] 1721 	mov	a,_bp
      0006A6 24 06            [12] 1722 	add	a,#0x06
      0006A8 F8               [12] 1723 	mov	r0,a
      0006A9 E5*00            [12] 1724 	mov	a,_bp
      0006AB 24 08            [12] 1725 	add	a,#0x08
      0006AD F9               [12] 1726 	mov	r1,a
      0006AE E7               [12] 1727 	mov	a,@r1
      0006AF 26               [12] 1728 	add	a,@r0
      0006B0 FC               [12] 1729 	mov	r4,a
      0006B1 09               [12] 1730 	inc	r1
      0006B2 E7               [12] 1731 	mov	a,@r1
      0006B3 08               [12] 1732 	inc	r0
      0006B4 36               [12] 1733 	addc	a,@r0
      0006B5 FD               [12] 1734 	mov	r5,a
      0006B6 EC               [12] 1735 	mov	a,r4
      0006B7 24r02            [12] 1736 	add	a,#_u
      0006B9 F5 82            [12] 1737 	mov	dpl,a
      0006BB ED               [12] 1738 	mov	a,r5
      0006BC 34s04            [12] 1739 	addc	a,#(_u >> 8)
      0006BE F5 83            [12] 1740 	mov	dph,a
      0006C0 E0               [24] 1741 	movx	a,@dptr
      0006C1 FD               [12] 1742 	mov	r5,a
      0006C2 E5*00            [12] 1743 	mov	a,_bp
      0006C4 24 05            [12] 1744 	add	a,#0x05
      0006C6 F8               [12] 1745 	mov	r0,a
      0006C7 ED               [12] 1746 	mov	a,r5
      0006C8 26               [12] 1747 	add	a,@r0
      0006C9 F6               [12] 1748 	mov	@r0,a
                                   1749 ;	life.c:167: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006CA 74 20            [12] 1750 	mov	a,#0x20
      0006CC 2A               [12] 1751 	add	a,r2
      0006CD FC               [12] 1752 	mov	r4,a
      0006CE E4               [12] 1753 	clr	a
      0006CF 3B               [12] 1754 	addc	a,r3
      0006D0 FD               [12] 1755 	mov	r5,a
      0006D1 C0 03            [24] 1756 	push	ar3
      0006D3 C0 02            [24] 1757 	push	ar2
      0006D5 74 20            [12] 1758 	mov	a,#0x20
      0006D7 C0 E0            [24] 1759 	push	acc
      0006D9 E4               [12] 1760 	clr	a
      0006DA C0 E0            [24] 1761 	push	acc
      0006DC 8C 82            [24] 1762 	mov	dpl,r4
      0006DE 8D 83            [24] 1763 	mov	dph,r5
      0006E0 12r00r00         [24] 1764 	lcall	__modsint
      0006E3 C8               [12] 1765 	xch	a,r0
      0006E4 E5*00            [12] 1766 	mov	a,_bp
      0006E6 24 0A            [12] 1767 	add	a,#0x0a
      0006E8 C8               [12] 1768 	xch	a,r0
      0006E9 A6 82            [24] 1769 	mov	@r0,dpl
      0006EB 08               [12] 1770 	inc	r0
      0006EC A6 83            [24] 1771 	mov	@r0,dph
      0006EE 15 81            [12] 1772 	dec	sp
      0006F0 15 81            [12] 1773 	dec	sp
      0006F2 D0 02            [24] 1774 	pop	ar2
      0006F4 D0 03            [24] 1775 	pop	ar3
      0006F6 E5*00            [12] 1776 	mov	a,_bp
      0006F8 24 06            [12] 1777 	add	a,#0x06
      0006FA F8               [12] 1778 	mov	r0,a
      0006FB E5*00            [12] 1779 	mov	a,_bp
      0006FD 24 0A            [12] 1780 	add	a,#0x0a
      0006FF F9               [12] 1781 	mov	r1,a
      000700 E7               [12] 1782 	mov	a,@r1
      000701 26               [12] 1783 	add	a,@r0
      000702 FC               [12] 1784 	mov	r4,a
      000703 09               [12] 1785 	inc	r1
      000704 E7               [12] 1786 	mov	a,@r1
      000705 08               [12] 1787 	inc	r0
      000706 36               [12] 1788 	addc	a,@r0
      000707 FD               [12] 1789 	mov	r5,a
      000708 EC               [12] 1790 	mov	a,r4
      000709 24r02            [12] 1791 	add	a,#_u
      00070B F5 82            [12] 1792 	mov	dpl,a
      00070D ED               [12] 1793 	mov	a,r5
      00070E 34s04            [12] 1794 	addc	a,#(_u >> 8)
      000710 F5 83            [12] 1795 	mov	dph,a
      000712 E0               [24] 1796 	movx	a,@dptr
      000713 FD               [12] 1797 	mov	r5,a
      000714 E5*00            [12] 1798 	mov	a,_bp
      000716 24 05            [12] 1799 	add	a,#0x05
      000718 F8               [12] 1800 	mov	r0,a
      000719 ED               [12] 1801 	mov	a,r5
      00071A 26               [12] 1802 	add	a,@r0
      00071B F6               [12] 1803 	mov	@r0,a
                                   1804 ;	life.c:169: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00071C 74 21            [12] 1805 	mov	a,#0x21
      00071E 2A               [12] 1806 	add	a,r2
      00071F FC               [12] 1807 	mov	r4,a
      000720 E4               [12] 1808 	clr	a
      000721 3B               [12] 1809 	addc	a,r3
      000722 FD               [12] 1810 	mov	r5,a
      000723 C0 03            [24] 1811 	push	ar3
      000725 C0 02            [24] 1812 	push	ar2
      000727 74 20            [12] 1813 	mov	a,#0x20
      000729 C0 E0            [24] 1814 	push	acc
      00072B E4               [12] 1815 	clr	a
      00072C C0 E0            [24] 1816 	push	acc
      00072E 8C 82            [24] 1817 	mov	dpl,r4
      000730 8D 83            [24] 1818 	mov	dph,r5
      000732 12r00r00         [24] 1819 	lcall	__modsint
      000735 C8               [12] 1820 	xch	a,r0
      000736 E5*00            [12] 1821 	mov	a,_bp
      000738 24 0C            [12] 1822 	add	a,#0x0c
      00073A C8               [12] 1823 	xch	a,r0
      00073B A6 82            [24] 1824 	mov	@r0,dpl
      00073D 08               [12] 1825 	inc	r0
      00073E A6 83            [24] 1826 	mov	@r0,dph
      000740 15 81            [12] 1827 	dec	sp
      000742 15 81            [12] 1828 	dec	sp
      000744 D0 02            [24] 1829 	pop	ar2
      000746 D0 03            [24] 1830 	pop	ar3
      000748 D0 06            [24] 1831 	pop	ar6
      00074A D0 07            [24] 1832 	pop	ar7
      00074C E5*00            [12] 1833 	mov	a,_bp
      00074E 24 06            [12] 1834 	add	a,#0x06
      000750 F8               [12] 1835 	mov	r0,a
      000751 E5*00            [12] 1836 	mov	a,_bp
      000753 24 0C            [12] 1837 	add	a,#0x0c
      000755 F9               [12] 1838 	mov	r1,a
      000756 E7               [12] 1839 	mov	a,@r1
      000757 26               [12] 1840 	add	a,@r0
      000758 FC               [12] 1841 	mov	r4,a
      000759 09               [12] 1842 	inc	r1
      00075A E7               [12] 1843 	mov	a,@r1
      00075B 08               [12] 1844 	inc	r0
      00075C 36               [12] 1845 	addc	a,@r0
      00075D FD               [12] 1846 	mov	r5,a
      00075E EC               [12] 1847 	mov	a,r4
      00075F 24r02            [12] 1848 	add	a,#_u
      000761 F5 82            [12] 1849 	mov	dpl,a
      000763 ED               [12] 1850 	mov	a,r5
      000764 34s04            [12] 1851 	addc	a,#(_u >> 8)
      000766 F5 83            [12] 1852 	mov	dph,a
      000768 E0               [24] 1853 	movx	a,@dptr
      000769 FD               [12] 1854 	mov	r5,a
      00076A E5*00            [12] 1855 	mov	a,_bp
      00076C 24 05            [12] 1856 	add	a,#0x05
      00076E F8               [12] 1857 	mov	r0,a
      00076F E5*00            [12] 1858 	mov	a,_bp
      000771 24 06            [12] 1859 	add	a,#0x06
      000773 F9               [12] 1860 	mov	r1,a
      000774 ED               [12] 1861 	mov	a,r5
      000775 26               [12] 1862 	add	a,@r0
      000776 F7               [12] 1863 	mov	@r1,a
                                   1864 ;	life.c:171: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000777 74 20            [12] 1865 	mov	a,#0x20
      000779 2E               [12] 1866 	add	a,r6
      00077A FC               [12] 1867 	mov	r4,a
      00077B E4               [12] 1868 	clr	a
      00077C 3F               [12] 1869 	addc	a,r7
      00077D FD               [12] 1870 	mov	r5,a
      00077E C0 07            [24] 1871 	push	ar7
      000780 C0 06            [24] 1872 	push	ar6
      000782 C0 03            [24] 1873 	push	ar3
      000784 C0 02            [24] 1874 	push	ar2
      000786 74 20            [12] 1875 	mov	a,#0x20
      000788 C0 E0            [24] 1876 	push	acc
      00078A E4               [12] 1877 	clr	a
      00078B C0 E0            [24] 1878 	push	acc
      00078D 8C 82            [24] 1879 	mov	dpl,r4
      00078F 8D 83            [24] 1880 	mov	dph,r5
      000791 12r00r00         [24] 1881 	lcall	__modsint
      000794 AC 82            [24] 1882 	mov	r4,dpl
      000796 AD 83            [24] 1883 	mov	r5,dph
      000798 15 81            [12] 1884 	dec	sp
      00079A 15 81            [12] 1885 	dec	sp
      00079C D0 02            [24] 1886 	pop	ar2
      00079E D0 03            [24] 1887 	pop	ar3
      0007A0 D0 06            [24] 1888 	pop	ar6
      0007A2 D0 07            [24] 1889 	pop	ar7
      0007A4 E5*00            [12] 1890 	mov	a,_bp
      0007A6 24 0E            [12] 1891 	add	a,#0x0e
      0007A8 F8               [12] 1892 	mov	r0,a
      0007A9 A6 04            [24] 1893 	mov	@r0,ar4
      0007AB ED               [12] 1894 	mov	a,r5
      0007AC C4               [12] 1895 	swap	a
      0007AD 23               [12] 1896 	rl	a
      0007AE 54 E0            [12] 1897 	anl	a,#0xe0
      0007B0 C6               [12] 1898 	xch	a,@r0
      0007B1 C4               [12] 1899 	swap	a
      0007B2 23               [12] 1900 	rl	a
      0007B3 C6               [12] 1901 	xch	a,@r0
      0007B4 66               [12] 1902 	xrl	a,@r0
      0007B5 C6               [12] 1903 	xch	a,@r0
      0007B6 54 E0            [12] 1904 	anl	a,#0xe0
      0007B8 C6               [12] 1905 	xch	a,@r0
      0007B9 66               [12] 1906 	xrl	a,@r0
      0007BA 08               [12] 1907 	inc	r0
      0007BB F6               [12] 1908 	mov	@r0,a
      0007BC E5*00            [12] 1909 	mov	a,_bp
      0007BE 24 0E            [12] 1910 	add	a,#0x0e
      0007C0 F8               [12] 1911 	mov	r0,a
      0007C1 E5*00            [12] 1912 	mov	a,_bp
      0007C3 24 08            [12] 1913 	add	a,#0x08
      0007C5 F9               [12] 1914 	mov	r1,a
      0007C6 E7               [12] 1915 	mov	a,@r1
      0007C7 26               [12] 1916 	add	a,@r0
      0007C8 FC               [12] 1917 	mov	r4,a
      0007C9 09               [12] 1918 	inc	r1
      0007CA E7               [12] 1919 	mov	a,@r1
      0007CB 08               [12] 1920 	inc	r0
      0007CC 36               [12] 1921 	addc	a,@r0
      0007CD FD               [12] 1922 	mov	r5,a
      0007CE EC               [12] 1923 	mov	a,r4
      0007CF 24r02            [12] 1924 	add	a,#_u
      0007D1 F5 82            [12] 1925 	mov	dpl,a
      0007D3 ED               [12] 1926 	mov	a,r5
      0007D4 34s04            [12] 1927 	addc	a,#(_u >> 8)
      0007D6 F5 83            [12] 1928 	mov	dph,a
      0007D8 E0               [24] 1929 	movx	a,@dptr
      0007D9 FD               [12] 1930 	mov	r5,a
      0007DA E5*00            [12] 1931 	mov	a,_bp
      0007DC 24 06            [12] 1932 	add	a,#0x06
      0007DE F8               [12] 1933 	mov	r0,a
      0007DF E5*00            [12] 1934 	mov	a,_bp
      0007E1 24 06            [12] 1935 	add	a,#0x06
      0007E3 F9               [12] 1936 	mov	r1,a
      0007E4 ED               [12] 1937 	mov	a,r5
      0007E5 26               [12] 1938 	add	a,@r0
      0007E6 F7               [12] 1939 	mov	@r1,a
                                   1940 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007E7 E5*00            [12] 1941 	mov	a,_bp
      0007E9 24 0E            [12] 1942 	add	a,#0x0e
      0007EB F8               [12] 1943 	mov	r0,a
      0007EC E5*00            [12] 1944 	mov	a,_bp
      0007EE 24 0A            [12] 1945 	add	a,#0x0a
      0007F0 F9               [12] 1946 	mov	r1,a
      0007F1 E7               [12] 1947 	mov	a,@r1
      0007F2 26               [12] 1948 	add	a,@r0
      0007F3 FC               [12] 1949 	mov	r4,a
      0007F4 09               [12] 1950 	inc	r1
      0007F5 E7               [12] 1951 	mov	a,@r1
      0007F6 08               [12] 1952 	inc	r0
      0007F7 36               [12] 1953 	addc	a,@r0
      0007F8 FD               [12] 1954 	mov	r5,a
      0007F9 EC               [12] 1955 	mov	a,r4
      0007FA 24r02            [12] 1956 	add	a,#_u
      0007FC F5 82            [12] 1957 	mov	dpl,a
      0007FE ED               [12] 1958 	mov	a,r5
      0007FF 34s04            [12] 1959 	addc	a,#(_u >> 8)
      000801 F5 83            [12] 1960 	mov	dph,a
      000803 E0               [24] 1961 	movx	a,@dptr
      000804 FD               [12] 1962 	mov	r5,a
      000805 E5*00            [12] 1963 	mov	a,_bp
      000807 24 06            [12] 1964 	add	a,#0x06
      000809 F8               [12] 1965 	mov	r0,a
      00080A E5*00            [12] 1966 	mov	a,_bp
      00080C 24 06            [12] 1967 	add	a,#0x06
      00080E F9               [12] 1968 	mov	r1,a
      00080F ED               [12] 1969 	mov	a,r5
      000810 26               [12] 1970 	add	a,@r0
      000811 F7               [12] 1971 	mov	@r1,a
                                   1972 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000812 E5*00            [12] 1973 	mov	a,_bp
      000814 24 0E            [12] 1974 	add	a,#0x0e
      000816 F8               [12] 1975 	mov	r0,a
      000817 E5*00            [12] 1976 	mov	a,_bp
      000819 24 0C            [12] 1977 	add	a,#0x0c
      00081B F9               [12] 1978 	mov	r1,a
      00081C E7               [12] 1979 	mov	a,@r1
      00081D 26               [12] 1980 	add	a,@r0
      00081E FC               [12] 1981 	mov	r4,a
      00081F 09               [12] 1982 	inc	r1
      000820 E7               [12] 1983 	mov	a,@r1
      000821 08               [12] 1984 	inc	r0
      000822 36               [12] 1985 	addc	a,@r0
      000823 FD               [12] 1986 	mov	r5,a
      000824 EC               [12] 1987 	mov	a,r4
      000825 24r02            [12] 1988 	add	a,#_u
      000827 F5 82            [12] 1989 	mov	dpl,a
      000829 ED               [12] 1990 	mov	a,r5
      00082A 34s04            [12] 1991 	addc	a,#(_u >> 8)
      00082C F5 83            [12] 1992 	mov	dph,a
      00082E E0               [24] 1993 	movx	a,@dptr
      00082F FD               [12] 1994 	mov	r5,a
      000830 E5*00            [12] 1995 	mov	a,_bp
      000832 24 06            [12] 1996 	add	a,#0x06
      000834 F8               [12] 1997 	mov	r0,a
      000835 E5*00            [12] 1998 	mov	a,_bp
      000837 24 0E            [12] 1999 	add	a,#0x0e
      000839 F9               [12] 2000 	mov	r1,a
      00083A ED               [12] 2001 	mov	a,r5
      00083B 26               [12] 2002 	add	a,@r0
      00083C F7               [12] 2003 	mov	@r1,a
                                   2004 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00083D 74 21            [12] 2005 	mov	a,#0x21
      00083F 2E               [12] 2006 	add	a,r6
      000840 FE               [12] 2007 	mov	r6,a
      000841 E4               [12] 2008 	clr	a
      000842 3F               [12] 2009 	addc	a,r7
      000843 FF               [12] 2010 	mov	r7,a
      000844 C0 03            [24] 2011 	push	ar3
      000846 C0 02            [24] 2012 	push	ar2
      000848 74 20            [12] 2013 	mov	a,#0x20
      00084A C0 E0            [24] 2014 	push	acc
      00084C E4               [12] 2015 	clr	a
      00084D C0 E0            [24] 2016 	push	acc
      00084F 8E 82            [24] 2017 	mov	dpl,r6
      000851 8F 83            [24] 2018 	mov	dph,r7
      000853 12r00r00         [24] 2019 	lcall	__modsint
      000856 AE 82            [24] 2020 	mov	r6,dpl
      000858 AF 83            [24] 2021 	mov	r7,dph
      00085A 15 81            [12] 2022 	dec	sp
      00085C 15 81            [12] 2023 	dec	sp
      00085E D0 02            [24] 2024 	pop	ar2
      000860 D0 03            [24] 2025 	pop	ar3
      000862 EF               [12] 2026 	mov	a,r7
      000863 C4               [12] 2027 	swap	a
      000864 23               [12] 2028 	rl	a
      000865 54 E0            [12] 2029 	anl	a,#0xe0
      000867 CE               [12] 2030 	xch	a,r6
      000868 C4               [12] 2031 	swap	a
      000869 23               [12] 2032 	rl	a
      00086A CE               [12] 2033 	xch	a,r6
      00086B 6E               [12] 2034 	xrl	a,r6
      00086C CE               [12] 2035 	xch	a,r6
      00086D 54 E0            [12] 2036 	anl	a,#0xe0
      00086F CE               [12] 2037 	xch	a,r6
      000870 6E               [12] 2038 	xrl	a,r6
      000871 FF               [12] 2039 	mov	r7,a
      000872 E5*00            [12] 2040 	mov	a,_bp
      000874 24 08            [12] 2041 	add	a,#0x08
      000876 F8               [12] 2042 	mov	r0,a
      000877 E6               [12] 2043 	mov	a,@r0
      000878 2E               [12] 2044 	add	a,r6
      000879 FC               [12] 2045 	mov	r4,a
      00087A 08               [12] 2046 	inc	r0
      00087B E6               [12] 2047 	mov	a,@r0
      00087C 3F               [12] 2048 	addc	a,r7
      00087D FD               [12] 2049 	mov	r5,a
      00087E EC               [12] 2050 	mov	a,r4
      00087F 24r02            [12] 2051 	add	a,#_u
      000881 F5 82            [12] 2052 	mov	dpl,a
      000883 ED               [12] 2053 	mov	a,r5
      000884 34s04            [12] 2054 	addc	a,#(_u >> 8)
      000886 F5 83            [12] 2055 	mov	dph,a
      000888 E0               [24] 2056 	movx	a,@dptr
      000889 FD               [12] 2057 	mov	r5,a
      00088A E5*00            [12] 2058 	mov	a,_bp
      00088C 24 0E            [12] 2059 	add	a,#0x0e
      00088E F8               [12] 2060 	mov	r0,a
      00088F E5*00            [12] 2061 	mov	a,_bp
      000891 24 0E            [12] 2062 	add	a,#0x0e
      000893 F9               [12] 2063 	mov	r1,a
      000894 ED               [12] 2064 	mov	a,r5
      000895 26               [12] 2065 	add	a,@r0
      000896 F7               [12] 2066 	mov	@r1,a
                                   2067 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000897 E5*00            [12] 2068 	mov	a,_bp
      000899 24 0A            [12] 2069 	add	a,#0x0a
      00089B F8               [12] 2070 	mov	r0,a
      00089C E6               [12] 2071 	mov	a,@r0
      00089D 2E               [12] 2072 	add	a,r6
      00089E FC               [12] 2073 	mov	r4,a
      00089F 08               [12] 2074 	inc	r0
      0008A0 E6               [12] 2075 	mov	a,@r0
      0008A1 3F               [12] 2076 	addc	a,r7
      0008A2 FD               [12] 2077 	mov	r5,a
      0008A3 EC               [12] 2078 	mov	a,r4
      0008A4 24r02            [12] 2079 	add	a,#_u
      0008A6 F5 82            [12] 2080 	mov	dpl,a
      0008A8 ED               [12] 2081 	mov	a,r5
      0008A9 34s04            [12] 2082 	addc	a,#(_u >> 8)
      0008AB F5 83            [12] 2083 	mov	dph,a
      0008AD E0               [24] 2084 	movx	a,@dptr
      0008AE FD               [12] 2085 	mov	r5,a
      0008AF E5*00            [12] 2086 	mov	a,_bp
      0008B1 24 0E            [12] 2087 	add	a,#0x0e
      0008B3 F8               [12] 2088 	mov	r0,a
      0008B4 ED               [12] 2089 	mov	a,r5
      0008B5 26               [12] 2090 	add	a,@r0
      0008B6 FD               [12] 2091 	mov	r5,a
                                   2092 ;	life.c:180: y1 = 1; x1 = 1;
      0008B7 90r0Cr08         [24] 2093 	mov	dptr,#_y1
      0008BA 74 01            [12] 2094 	mov	a,#0x01
      0008BC F0               [24] 2095 	movx	@dptr,a
      0008BD E4               [12] 2096 	clr	a
      0008BE A3               [24] 2097 	inc	dptr
      0008BF F0               [24] 2098 	movx	@dptr,a
      0008C0 90r0Cr06         [24] 2099 	mov	dptr,#_x1
      0008C3 04               [12] 2100 	inc	a
      0008C4 F0               [24] 2101 	movx	@dptr,a
      0008C5 E4               [12] 2102 	clr	a
      0008C6 A3               [24] 2103 	inc	dptr
      0008C7 F0               [24] 2104 	movx	@dptr,a
                                   2105 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008C8 E5*00            [12] 2106 	mov	a,_bp
      0008CA 24 0C            [12] 2107 	add	a,#0x0c
      0008CC F8               [12] 2108 	mov	r0,a
      0008CD E6               [12] 2109 	mov	a,@r0
      0008CE 2E               [12] 2110 	add	a,r6
      0008CF FE               [12] 2111 	mov	r6,a
      0008D0 08               [12] 2112 	inc	r0
      0008D1 E6               [12] 2113 	mov	a,@r0
      0008D2 3F               [12] 2114 	addc	a,r7
      0008D3 FF               [12] 2115 	mov	r7,a
      0008D4 EE               [12] 2116 	mov	a,r6
      0008D5 24r02            [12] 2117 	add	a,#_u
      0008D7 F5 82            [12] 2118 	mov	dpl,a
      0008D9 EF               [12] 2119 	mov	a,r7
      0008DA 34s04            [12] 2120 	addc	a,#(_u >> 8)
      0008DC F5 83            [12] 2121 	mov	dph,a
      0008DE E0               [24] 2122 	movx	a,@dptr
      0008DF 2D               [12] 2123 	add	a,r5
      0008E0 FF               [12] 2124 	mov	r7,a
      0008E1 90r0Cr0F         [24] 2125 	mov	dptr,#_n
      0008E4 F0               [24] 2126 	movx	@dptr,a
                                   2127 ;	life.c:183: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008E5 E5*00            [12] 2128 	mov	a,_bp
      0008E7 24 03            [12] 2129 	add	a,#0x03
      0008E9 F8               [12] 2130 	mov	r0,a
      0008EA E6               [12] 2131 	mov	a,@r0
      0008EB 24r02            [12] 2132 	add	a,#_nu
      0008ED FD               [12] 2133 	mov	r5,a
      0008EE 08               [12] 2134 	inc	r0
      0008EF E6               [12] 2135 	mov	a,@r0
      0008F0 34s08            [12] 2136 	addc	a,#(_nu >> 8)
      0008F2 FE               [12] 2137 	mov	r6,a
      0008F3 BF 03 02         [24] 2138 	cjne	r7,#0x03,00427$
      0008F6 80 20            [24] 2139 	sjmp	00209$
      0008F8                       2140 00427$:
      0008F8 BF 02 19         [24] 2141 	cjne	r7,#0x02,00208$
      0008FB A8*00            [24] 2142 	mov	r0,_bp
      0008FD 08               [12] 2143 	inc	r0
      0008FE EA               [12] 2144 	mov	a,r2
      0008FF 26               [12] 2145 	add	a,@r0
      000900 FA               [12] 2146 	mov	r2,a
      000901 EB               [12] 2147 	mov	a,r3
      000902 08               [12] 2148 	inc	r0
      000903 36               [12] 2149 	addc	a,@r0
      000904 FB               [12] 2150 	mov	r3,a
      000905 EA               [12] 2151 	mov	a,r2
      000906 24r02            [12] 2152 	add	a,#_u
      000908 FA               [12] 2153 	mov	r2,a
      000909 EB               [12] 2154 	mov	a,r3
      00090A 34s04            [12] 2155 	addc	a,#(_u >> 8)
      00090C FB               [12] 2156 	mov	r3,a
      00090D 8A 82            [24] 2157 	mov	dpl,r2
      00090F 8B 83            [24] 2158 	mov	dph,r3
      000911 E0               [24] 2159 	movx	a,@dptr
      000912 70 04            [24] 2160 	jnz	00209$
      000914                       2161 00208$:
                                   2162 ;	assignBit
      000914 C2*00            [12] 2163 	clr	b0
      000916 80 02            [24] 2164 	sjmp	00210$
      000918                       2165 00209$:
                                   2166 ;	assignBit
      000918 D2*00            [12] 2167 	setb	b0
      00091A                       2168 00210$:
      00091A A2*00            [12] 2169 	mov	c,b0
      00091C E4               [12] 2170 	clr	a
      00091D 33               [12] 2171 	rlc	a
      00091E 8D 82            [24] 2172 	mov	dpl,r5
      000920 8E 83            [24] 2173 	mov	dph,r6
      000922 F0               [24] 2174 	movx	@dptr,a
                                   2175 ;	life.c:185: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      000923 90r0Cr04         [24] 2176 	mov	dptr,#_y
      000926 E0               [24] 2177 	movx	a,@dptr
      000927 FE               [12] 2178 	mov	r6,a
      000928 A3               [24] 2179 	inc	dptr
      000929 E0               [24] 2180 	movx	a,@dptr
      00092A C4               [12] 2181 	swap	a
      00092B 23               [12] 2182 	rl	a
      00092C 54 E0            [12] 2183 	anl	a,#0xe0
      00092E CE               [12] 2184 	xch	a,r6
      00092F C4               [12] 2185 	swap	a
      000930 23               [12] 2186 	rl	a
      000931 CE               [12] 2187 	xch	a,r6
      000932 6E               [12] 2188 	xrl	a,r6
      000933 CE               [12] 2189 	xch	a,r6
      000934 54 E0            [12] 2190 	anl	a,#0xe0
      000936 CE               [12] 2191 	xch	a,r6
      000937 6E               [12] 2192 	xrl	a,r6
      000938 FF               [12] 2193 	mov	r7,a
      000939 90r0Cr02         [24] 2194 	mov	dptr,#_x
      00093C E0               [24] 2195 	movx	a,@dptr
      00093D FC               [12] 2196 	mov	r4,a
      00093E A3               [24] 2197 	inc	dptr
      00093F E0               [24] 2198 	movx	a,@dptr
      000940 FD               [12] 2199 	mov	r5,a
      000941 EC               [12] 2200 	mov	a,r4
      000942 2E               [12] 2201 	add	a,r6
      000943 FE               [12] 2202 	mov	r6,a
      000944 ED               [12] 2203 	mov	a,r5
      000945 3F               [12] 2204 	addc	a,r7
      000946 FF               [12] 2205 	mov	r7,a
      000947 EE               [12] 2206 	mov	a,r6
      000948 24r02            [12] 2207 	add	a,#_pu
      00094A F5 82            [12] 2208 	mov	dpl,a
      00094C EF               [12] 2209 	mov	a,r7
      00094D 34s00            [12] 2210 	addc	a,#(_pu >> 8)
      00094F F5 83            [12] 2211 	mov	dph,a
      000951 E0               [24] 2212 	movx	a,@dptr
      000952 FD               [12] 2213 	mov	r5,a
      000953 EE               [12] 2214 	mov	a,r6
      000954 24r02            [12] 2215 	add	a,#_nu
      000956 F5 82            [12] 2216 	mov	dpl,a
      000958 EF               [12] 2217 	mov	a,r7
      000959 34s08            [12] 2218 	addc	a,#(_nu >> 8)
      00095B F5 83            [12] 2219 	mov	dph,a
      00095D E0               [24] 2220 	movx	a,@dptr
      00095E FF               [12] 2221 	mov	r7,a
      00095F ED               [12] 2222 	mov	a,r5
      000960 B5 07 02         [24] 2223 	cjne	a,ar7,00431$
      000963 80 05            [24] 2224 	sjmp	00159$
      000965                       2225 00431$:
      000965 90r0Cr11         [24] 2226 	mov	dptr,#_cycle2
      000968 E4               [12] 2227 	clr	a
      000969 F0               [24] 2228 	movx	@dptr,a
      00096A                       2229 00159$:
                                   2230 ;	life.c:186: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      00096A 90r0Cr04         [24] 2231 	mov	dptr,#_y
      00096D E0               [24] 2232 	movx	a,@dptr
      00096E FE               [12] 2233 	mov	r6,a
      00096F A3               [24] 2234 	inc	dptr
      000970 E0               [24] 2235 	movx	a,@dptr
      000971 C4               [12] 2236 	swap	a
      000972 23               [12] 2237 	rl	a
      000973 54 E0            [12] 2238 	anl	a,#0xe0
      000975 CE               [12] 2239 	xch	a,r6
      000976 C4               [12] 2240 	swap	a
      000977 23               [12] 2241 	rl	a
      000978 CE               [12] 2242 	xch	a,r6
      000979 6E               [12] 2243 	xrl	a,r6
      00097A CE               [12] 2244 	xch	a,r6
      00097B 54 E0            [12] 2245 	anl	a,#0xe0
      00097D CE               [12] 2246 	xch	a,r6
      00097E 6E               [12] 2247 	xrl	a,r6
      00097F FF               [12] 2248 	mov	r7,a
      000980 90r0Cr02         [24] 2249 	mov	dptr,#_x
      000983 E0               [24] 2250 	movx	a,@dptr
      000984 FC               [12] 2251 	mov	r4,a
      000985 A3               [24] 2252 	inc	dptr
      000986 E0               [24] 2253 	movx	a,@dptr
      000987 FD               [12] 2254 	mov	r5,a
      000988 EC               [12] 2255 	mov	a,r4
      000989 2E               [12] 2256 	add	a,r6
      00098A FE               [12] 2257 	mov	r6,a
      00098B ED               [12] 2258 	mov	a,r5
      00098C 3F               [12] 2259 	addc	a,r7
      00098D FF               [12] 2260 	mov	r7,a
      00098E EE               [12] 2261 	mov	a,r6
      00098F 24r02            [12] 2262 	add	a,#_u
      000991 F5 82            [12] 2263 	mov	dpl,a
      000993 EF               [12] 2264 	mov	a,r7
      000994 34s04            [12] 2265 	addc	a,#(_u >> 8)
      000996 F5 83            [12] 2266 	mov	dph,a
      000998 E0               [24] 2267 	movx	a,@dptr
      000999 FD               [12] 2268 	mov	r5,a
      00099A EE               [12] 2269 	mov	a,r6
      00099B 24r02            [12] 2270 	add	a,#_nu
      00099D F5 82            [12] 2271 	mov	dpl,a
      00099F EF               [12] 2272 	mov	a,r7
      0009A0 34s08            [12] 2273 	addc	a,#(_nu >> 8)
      0009A2 F5 83            [12] 2274 	mov	dph,a
      0009A4 E0               [24] 2275 	movx	a,@dptr
      0009A5 FF               [12] 2276 	mov	r7,a
      0009A6 ED               [12] 2277 	mov	a,r5
      0009A7 B5 07 02         [24] 2278 	cjne	a,ar7,00432$
      0009AA 80 05            [24] 2279 	sjmp	00188$
      0009AC                       2280 00432$:
      0009AC 90r0Cr10         [24] 2281 	mov	dptr,#_fixed
      0009AF E4               [12] 2282 	clr	a
      0009B0 F0               [24] 2283 	movx	@dptr,a
      0009B1                       2284 00188$:
                                   2285 ;	life.c:161: for (x = 0; x < W; x++) {
      0009B1 90r0Cr02         [24] 2286 	mov	dptr,#_x
      0009B4 E0               [24] 2287 	movx	a,@dptr
      0009B5 24 01            [12] 2288 	add	a,#0x01
      0009B7 F0               [24] 2289 	movx	@dptr,a
      0009B8 A3               [24] 2290 	inc	dptr
      0009B9 E0               [24] 2291 	movx	a,@dptr
      0009BA 34 00            [12] 2292 	addc	a,#0x00
      0009BC F0               [24] 2293 	movx	@dptr,a
      0009BD 90r0Cr02         [24] 2294 	mov	dptr,#_x
      0009C0 E0               [24] 2295 	movx	a,@dptr
      0009C1 FE               [12] 2296 	mov	r6,a
      0009C2 A3               [24] 2297 	inc	dptr
      0009C3 E0               [24] 2298 	movx	a,@dptr
      0009C4 FF               [12] 2299 	mov	r7,a
      0009C5 C3               [12] 2300 	clr	c
      0009C6 EE               [12] 2301 	mov	a,r6
      0009C7 94 20            [12] 2302 	subb	a,#0x20
      0009C9 EF               [12] 2303 	mov	a,r7
      0009CA 64 80            [12] 2304 	xrl	a,#0x80
      0009CC 94 80            [12] 2305 	subb	a,#0x80
      0009CE 50 03            [24] 2306 	jnc	00433$
      0009D0 02r05rE6         [24] 2307 	ljmp	00187$
      0009D3                       2308 00433$:
                                   2309 ;	life.c:158: for (y = 0; y < H; y++) {
      0009D3 90r0Cr04         [24] 2310 	mov	dptr,#_y
      0009D6 E0               [24] 2311 	movx	a,@dptr
      0009D7 24 01            [12] 2312 	add	a,#0x01
      0009D9 F0               [24] 2313 	movx	@dptr,a
      0009DA A3               [24] 2314 	inc	dptr
      0009DB E0               [24] 2315 	movx	a,@dptr
      0009DC 34 00            [12] 2316 	addc	a,#0x00
      0009DE F0               [24] 2317 	movx	@dptr,a
      0009DF 90r0Cr04         [24] 2318 	mov	dptr,#_y
      0009E2 E0               [24] 2319 	movx	a,@dptr
      0009E3 FE               [12] 2320 	mov	r6,a
      0009E4 A3               [24] 2321 	inc	dptr
      0009E5 E0               [24] 2322 	movx	a,@dptr
      0009E6 FF               [12] 2323 	mov	r7,a
      0009E7 C3               [12] 2324 	clr	c
      0009E8 EE               [12] 2325 	mov	a,r6
      0009E9 94 20            [12] 2326 	subb	a,#0x20
      0009EB EF               [12] 2327 	mov	a,r7
      0009EC 64 80            [12] 2328 	xrl	a,#0x80
      0009EE 94 80            [12] 2329 	subb	a,#0x80
      0009F0 50 03            [24] 2330 	jnc	00434$
      0009F2 02r05rBD         [24] 2331 	ljmp	00189$
      0009F5                       2332 00434$:
                                   2333 ;	life.c:190: memcpy(pu, u, sizeof (u));
      0009F5 E4               [12] 2334 	clr	a
      0009F6 C0 E0            [24] 2335 	push	acc
      0009F8 74 04            [12] 2336 	mov	a,#0x04
      0009FA C0 E0            [24] 2337 	push	acc
      0009FC 74r02            [12] 2338 	mov	a,#_u
      0009FE C0 E0            [24] 2339 	push	acc
      000A00 74s04            [12] 2340 	mov	a,#(_u >> 8)
      000A02 C0 E0            [24] 2341 	push	acc
      000A04 E4               [12] 2342 	clr	a
      000A05 C0 E0            [24] 2343 	push	acc
      000A07 90r00r02         [24] 2344 	mov	dptr,#_pu
      000A0A 75 F0 00         [24] 2345 	mov	b,#0x00
      000A0D 12r00r00         [24] 2346 	lcall	___memcpy
      000A10 E5 81            [12] 2347 	mov	a,sp
      000A12 24 FB            [12] 2348 	add	a,#0xfb
      000A14 F5 81            [12] 2349 	mov	sp,a
                                   2350 ;	life.c:191: memcpy(u, nu, sizeof (nu));
      000A16 E4               [12] 2351 	clr	a
      000A17 C0 E0            [24] 2352 	push	acc
      000A19 74 04            [12] 2353 	mov	a,#0x04
      000A1B C0 E0            [24] 2354 	push	acc
      000A1D 74r02            [12] 2355 	mov	a,#_nu
      000A1F C0 E0            [24] 2356 	push	acc
      000A21 74s08            [12] 2357 	mov	a,#(_nu >> 8)
      000A23 C0 E0            [24] 2358 	push	acc
      000A25 E4               [12] 2359 	clr	a
      000A26 C0 E0            [24] 2360 	push	acc
      000A28 90r04r02         [24] 2361 	mov	dptr,#_u
      000A2B 75 F0 00         [24] 2362 	mov	b,#0x00
      000A2E 12r00r00         [24] 2363 	lcall	___memcpy
      000A31 E5 81            [12] 2364 	mov	a,sp
      000A33 24 FB            [12] 2365 	add	a,#0xfb
      000A35 F5 81            [12] 2366 	mov	sp,a
                                   2367 ;	life.c:229: if (fixed || cycle2) {
      000A37 90r0Cr10         [24] 2368 	mov	dptr,#_fixed
      000A3A E0               [24] 2369 	movx	a,@dptr
      000A3B 70 09            [24] 2370 	jnz	00120$
      000A3D 90r0Cr11         [24] 2371 	mov	dptr,#_cycle2
      000A40 E0               [24] 2372 	movx	a,@dptr
      000A41 70 03            [24] 2373 	jnz	00436$
      000A43 02r05r90         [24] 2374 	ljmp	00196$
      000A46                       2375 00436$:
      000A46                       2376 00120$:
                                   2377 ;	life.c:230: printstr("DONE\r\n");
      000A46 7Dr3C            [12] 2378 	mov	r5,#___str_6
      000A48 7Es00            [12] 2379 	mov	r6,#(___str_6 >> 8)
      000A4A 7F 80            [12] 2380 	mov	r7,#0x80
                                   2381 ;	life.c:48: return;
      000A4C                       2382 00192$:
                                   2383 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A4C 8D 82            [24] 2384 	mov	dpl,r5
      000A4E 8E 83            [24] 2385 	mov	dph,r6
      000A50 8F F0            [24] 2386 	mov	b,r7
      000A52 12r00r00         [24] 2387 	lcall	__gptrget
      000A55 FC               [12] 2388 	mov	r4,a
      000A56 60 10            [24] 2389 	jz	00166$
      000A58 7B 00            [12] 2390 	mov	r3,#0x00
      000A5A 8C 82            [24] 2391 	mov	dpl,r4
      000A5C 8B 83            [24] 2392 	mov	dph,r3
      000A5E 12r00r00         [24] 2393 	lcall	_putchar
      000A61 0D               [12] 2394 	inc	r5
                                   2395 ;	life.c:230: printstr("DONE\r\n");
      000A62 BD 00 E7         [24] 2396 	cjne	r5,#0x00,00192$
      000A65 0E               [12] 2397 	inc	r6
      000A66 80 E4            [24] 2398 	sjmp	00192$
      000A68                       2399 00166$:
                                   2400 ;	life.c:231: (void)getchar();
      000A68 12r00r05         [24] 2401 	lcall	_getchar
                                   2402 ;	life.c:232: break;
      000A6B                       2403 00123$:
                                   2404 ;	life.c:236: if (i1) {
      000A6B 90r00r01         [24] 2405 	mov	dptr,#_i1
      000A6E E0               [24] 2406 	movx	a,@dptr
      000A6F 60 25            [24] 2407 	jz	00202$
                                   2408 ;	life.c:237: printstr("BREAK\r\n");
      000A71 7Dr43            [12] 2409 	mov	r5,#___str_7
      000A73 7Es00            [12] 2410 	mov	r6,#(___str_7 >> 8)
      000A75 7F 80            [12] 2411 	mov	r7,#0x80
                                   2412 ;	life.c:48: return;
      000A77                       2413 00199$:
                                   2414 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A77 8D 82            [24] 2415 	mov	dpl,r5
      000A79 8E 83            [24] 2416 	mov	dph,r6
      000A7B 8F F0            [24] 2417 	mov	b,r7
      000A7D 12r00r00         [24] 2418 	lcall	__gptrget
      000A80 FC               [12] 2419 	mov	r4,a
      000A81 60 10            [24] 2420 	jz	00168$
      000A83 7B 00            [12] 2421 	mov	r3,#0x00
      000A85 8C 82            [24] 2422 	mov	dpl,r4
      000A87 8B 83            [24] 2423 	mov	dph,r3
      000A89 12r00r00         [24] 2424 	lcall	_putchar
      000A8C 0D               [12] 2425 	inc	r5
                                   2426 ;	life.c:237: printstr("BREAK\r\n");
      000A8D BD 00 E7         [24] 2427 	cjne	r5,#0x00,00199$
      000A90 0E               [12] 2428 	inc	r6
      000A91 80 E4            [24] 2429 	sjmp	00199$
      000A93                       2430 00168$:
                                   2431 ;	life.c:238: (void)getchar();
      000A93 12r00r05         [24] 2432 	lcall	_getchar
      000A96                       2433 00202$:
                                   2434 ;	life.c:203: for (i0 = 0; !i0; ) {		
      000A96 90r00r00         [24] 2435 	mov	dptr,#_i0
      000A99 E0               [24] 2436 	movx	a,@dptr
      000A9A 70 03            [24] 2437 	jnz	00442$
      000A9C 02r02rB2         [24] 2438 	ljmp	00201$
      000A9F                       2439 00442$:
                                   2440 ;	life.c:242: terminate:
      000A9F                       2441 00127$:
                                   2442 ;	life.c:243: EA = 0;
                                   2443 ;	assignBit
      000A9F C2 AF            [12] 2444 	clr	_EA
                                   2445 ;	life.c:244: printstr("TERM\r\n");
      000AA1 7Dr4B            [12] 2446 	mov	r5,#___str_8
      000AA3 7Es00            [12] 2447 	mov	r6,#(___str_8 >> 8)
      000AA5 7F 80            [12] 2448 	mov	r7,#0x80
                                   2449 ;	life.c:48: return;
      000AA7                       2450 00204$:
                                   2451 ;	life.c:46: for (; *s; s++) putchar(*s);
      000AA7 8D 82            [24] 2452 	mov	dpl,r5
      000AA9 8E 83            [24] 2453 	mov	dph,r6
      000AAB 8F F0            [24] 2454 	mov	b,r7
      000AAD 12r00r00         [24] 2455 	lcall	__gptrget
      000AB0 FC               [12] 2456 	mov	r4,a
      000AB1 60 10            [24] 2457 	jz	00170$
      000AB3 7B 00            [12] 2458 	mov	r3,#0x00
      000AB5 8C 82            [24] 2459 	mov	dpl,r4
      000AB7 8B 83            [24] 2460 	mov	dph,r3
      000AB9 12r00r00         [24] 2461 	lcall	_putchar
      000ABC 0D               [12] 2462 	inc	r5
                                   2463 ;	life.c:244: printstr("TERM\r\n");
      000ABD BD 00 E7         [24] 2464 	cjne	r5,#0x00,00204$
      000AC0 0E               [12] 2465 	inc	r6
      000AC1 80 E4            [24] 2466 	sjmp	00204$
      000AC3                       2467 00170$:
                                   2468 ;	life.c:245: (void)getchar();
      000AC3 12r00r05         [24] 2469 	lcall	_getchar
                                   2470 ;	life.c:249: __endasm;
      000AC6 02 00 00         [24] 2471 	ljmp	0
                                   2472 ;	life.c:250: }
      000AC9 85*00 81         [24] 2473 	mov	sp,_bp
      000ACC D0*00            [24] 2474 	pop	_bp
      000ACE 22               [24] 2475 	ret
                                   2476 	.area CSEG    (CODE)
                                   2477 	.area CONST   (CODE)
      000000                       2478 _digits:
      000000 30                    2479 	.db #0x30	; 48	'0'
      000001 31                    2480 	.db #0x31	; 49	'1'
      000002 32                    2481 	.db #0x32	; 50	'2'
      000003 33                    2482 	.db #0x33	; 51	'3'
      000004 34                    2483 	.db #0x34	; 52	'4'
      000005 35                    2484 	.db #0x35	; 53	'5'
      000006 36                    2485 	.db #0x36	; 54	'6'
      000007 37                    2486 	.db #0x37	; 55	'7'
      000008 38                    2487 	.db #0x38	; 56	'8'
      000009 39                    2488 	.db #0x39	; 57	'9'
      00000A 61                    2489 	.db #0x61	; 97	'a'
      00000B 62                    2490 	.db #0x62	; 98	'b'
      00000C 63                    2491 	.db #0x63	; 99	'c'
      00000D 64                    2492 	.db #0x64	; 100	'd'
      00000E 65                    2493 	.db #0x65	; 101	'e'
      00000F 66                    2494 	.db #0x66	; 102	'f'
                                   2495 	.area CONST   (CODE)
      000010                       2496 ___str_0:
      000010 1B                    2497 	.db 0x1b
      000011 5B 32 4A              2498 	.ascii "[2J"
      000014 1B                    2499 	.db 0x1b
      000015 5B 6D                 2500 	.ascii "[m"
      000017 00                    2501 	.db 0x00
                                   2502 	.area CSEG    (CODE)
                                   2503 	.area CONST   (CODE)
      000018                       2504 ___str_1:
      000018 0D                    2505 	.db 0x0d
      000019 0A                    2506 	.db 0x0a
      00001A 00                    2507 	.db 0x00
                                   2508 	.area CSEG    (CODE)
                                   2509 	.area CONST   (CODE)
      00001B                       2510 ___str_2:
      00001B 4C 4F 41 44 20 3C     2511 	.ascii "LOAD <"
      000021 00                    2512 	.db 0x00
                                   2513 	.area CSEG    (CODE)
                                   2514 	.area CONST   (CODE)
      000022                       2515 ___str_3:
      000022 3E                    2516 	.ascii ">"
      000023 0D                    2517 	.db 0x0d
      000024 0A                    2518 	.db 0x0a
      000025 00                    2519 	.db 0x00
                                   2520 	.area CSEG    (CODE)
      000ACF                       2521 _busy:
      000ACF 5C                    2522 	.db #0x5c	; 92
      000AD0 7C                    2523 	.db #0x7c	; 124
      000AD1 2F                    2524 	.db #0x2f	; 47
      000AD2 2D                    2525 	.db #0x2d	; 45
                                   2526 	.area CONST   (CODE)
      000026                       2527 ___str_4:
      000026 1B                    2528 	.db 0x1b
      000027 5B 32 4A              2529 	.ascii "[2J"
      00002A 1B                    2530 	.db 0x1b
      00002B 5B 6D 49 4E 49 54     2531 	.ascii "[mINIT"
      000031 0D                    2532 	.db 0x0d
      000032 0A                    2533 	.db 0x0a
      000033 00                    2534 	.db 0x00
                                   2535 	.area CSEG    (CODE)
                                   2536 	.area CONST   (CODE)
      000034                       2537 ___str_5:
      000034 52 45 41 44 59        2538 	.ascii "READY"
      000039 0D                    2539 	.db 0x0d
      00003A 0A                    2540 	.db 0x0a
      00003B 00                    2541 	.db 0x00
                                   2542 	.area CSEG    (CODE)
                                   2543 	.area CONST   (CODE)
      00003C                       2544 ___str_6:
      00003C 44 4F 4E 45           2545 	.ascii "DONE"
      000040 0D                    2546 	.db 0x0d
      000041 0A                    2547 	.db 0x0a
      000042 00                    2548 	.db 0x00
                                   2549 	.area CSEG    (CODE)
                                   2550 	.area CONST   (CODE)
      000043                       2551 ___str_7:
      000043 42 52 45 41 4B        2552 	.ascii "BREAK"
      000048 0D                    2553 	.db 0x0d
      000049 0A                    2554 	.db 0x0a
      00004A 00                    2555 	.db 0x00
                                   2556 	.area CSEG    (CODE)
                                   2557 	.area CONST   (CODE)
      00004B                       2558 ___str_8:
      00004B 54 45 52 4D           2559 	.ascii "TERM"
      00004F 0D                    2560 	.db 0x0d
      000050 0A                    2561 	.db 0x0a
      000051 00                    2562 	.db 0x00
                                   2563 	.area CSEG    (CODE)
                                   2564 	.area XINIT   (CODE)
                                   2565 	.area CABS    (ABS,CODE)
