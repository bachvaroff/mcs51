                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _FL
                                     27 	.globl _P
                                     28 	.globl _TF2
                                     29 	.globl _EXF2
                                     30 	.globl _RCLK
                                     31 	.globl _TCLK
                                     32 	.globl _EXEN2
                                     33 	.globl _TR2
                                     34 	.globl _C_T2
                                     35 	.globl _CP_RL2
                                     36 	.globl _T2CON_7
                                     37 	.globl _T2CON_6
                                     38 	.globl _T2CON_5
                                     39 	.globl _T2CON_4
                                     40 	.globl _T2CON_3
                                     41 	.globl _T2CON_2
                                     42 	.globl _T2CON_1
                                     43 	.globl _T2CON_0
                                     44 	.globl _PT2
                                     45 	.globl _PS
                                     46 	.globl _PT1
                                     47 	.globl _PX1
                                     48 	.globl _PT0
                                     49 	.globl _PX0
                                     50 	.globl _RD
                                     51 	.globl _WR
                                     52 	.globl _T1
                                     53 	.globl _T0
                                     54 	.globl _INT1
                                     55 	.globl _INT0
                                     56 	.globl _TXD
                                     57 	.globl _RXD
                                     58 	.globl _P3_7
                                     59 	.globl _P3_6
                                     60 	.globl _P3_5
                                     61 	.globl _P3_4
                                     62 	.globl _P3_3
                                     63 	.globl _P3_2
                                     64 	.globl _P3_1
                                     65 	.globl _P3_0
                                     66 	.globl _EA
                                     67 	.globl _ET2
                                     68 	.globl _ES
                                     69 	.globl _ET1
                                     70 	.globl _EX1
                                     71 	.globl _ET0
                                     72 	.globl _EX0
                                     73 	.globl _P2_7
                                     74 	.globl _P2_6
                                     75 	.globl _P2_5
                                     76 	.globl _P2_4
                                     77 	.globl _P2_3
                                     78 	.globl _P2_2
                                     79 	.globl _P2_1
                                     80 	.globl _P2_0
                                     81 	.globl _SM0
                                     82 	.globl _SM1
                                     83 	.globl _SM2
                                     84 	.globl _REN
                                     85 	.globl _TB8
                                     86 	.globl _RB8
                                     87 	.globl _TI
                                     88 	.globl _RI
                                     89 	.globl _T2EX
                                     90 	.globl _T2
                                     91 	.globl _P1_7
                                     92 	.globl _P1_6
                                     93 	.globl _P1_5
                                     94 	.globl _P1_4
                                     95 	.globl _P1_3
                                     96 	.globl _P1_2
                                     97 	.globl _P1_1
                                     98 	.globl _P1_0
                                     99 	.globl _TF1
                                    100 	.globl _TR1
                                    101 	.globl _TF0
                                    102 	.globl _TR0
                                    103 	.globl _IE1
                                    104 	.globl _IT1
                                    105 	.globl _IE0
                                    106 	.globl _IT0
                                    107 	.globl _P0_7
                                    108 	.globl _P0_6
                                    109 	.globl _P0_5
                                    110 	.globl _P0_4
                                    111 	.globl _P0_3
                                    112 	.globl _P0_2
                                    113 	.globl _P0_1
                                    114 	.globl _P0_0
                                    115 	.globl _B
                                    116 	.globl _A
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _TH2
                                    120 	.globl _TL2
                                    121 	.globl _RCAP2H
                                    122 	.globl _RCAP2L
                                    123 	.globl _T2MOD
                                    124 	.globl _T2CON
                                    125 	.globl _IP
                                    126 	.globl _P3
                                    127 	.globl _IE
                                    128 	.globl _P2
                                    129 	.globl _SBUF
                                    130 	.globl _SCON
                                    131 	.globl _P1
                                    132 	.globl _TH1
                                    133 	.globl _TH0
                                    134 	.globl _TL1
                                    135 	.globl _TL0
                                    136 	.globl _TMOD
                                    137 	.globl _TCON
                                    138 	.globl _PCON
                                    139 	.globl _DPH
                                    140 	.globl _DPL
                                    141 	.globl _SP
                                    142 	.globl _P0
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000C8   166 _T2CON	=	0x00c8
                           0000C9   167 _T2MOD	=	0x00c9
                           0000CA   168 _RCAP2L	=	0x00ca
                           0000CB   169 _RCAP2H	=	0x00cb
                           0000CC   170 _TL2	=	0x00cc
                           0000CD   171 _TH2	=	0x00cd
                           0000D0   172 _PSW	=	0x00d0
                           0000E0   173 _ACC	=	0x00e0
                           0000E0   174 _A	=	0x00e0
                           0000F0   175 _B	=	0x00f0
                                    176 ;--------------------------------------------------------
                                    177 ; special function bits
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0_0	=	0x0080
                           000081   182 _P0_1	=	0x0081
                           000082   183 _P0_2	=	0x0082
                           000083   184 _P0_3	=	0x0083
                           000084   185 _P0_4	=	0x0084
                           000085   186 _P0_5	=	0x0085
                           000086   187 _P0_6	=	0x0086
                           000087   188 _P0_7	=	0x0087
                           000088   189 _IT0	=	0x0088
                           000089   190 _IE0	=	0x0089
                           00008A   191 _IT1	=	0x008a
                           00008B   192 _IE1	=	0x008b
                           00008C   193 _TR0	=	0x008c
                           00008D   194 _TF0	=	0x008d
                           00008E   195 _TR1	=	0x008e
                           00008F   196 _TF1	=	0x008f
                           000090   197 _P1_0	=	0x0090
                           000091   198 _P1_1	=	0x0091
                           000092   199 _P1_2	=	0x0092
                           000093   200 _P1_3	=	0x0093
                           000094   201 _P1_4	=	0x0094
                           000095   202 _P1_5	=	0x0095
                           000096   203 _P1_6	=	0x0096
                           000097   204 _P1_7	=	0x0097
                           000090   205 _T2	=	0x0090
                           000091   206 _T2EX	=	0x0091
                           000098   207 _RI	=	0x0098
                           000099   208 _TI	=	0x0099
                           00009A   209 _RB8	=	0x009a
                           00009B   210 _TB8	=	0x009b
                           00009C   211 _REN	=	0x009c
                           00009D   212 _SM2	=	0x009d
                           00009E   213 _SM1	=	0x009e
                           00009F   214 _SM0	=	0x009f
                           0000A0   215 _P2_0	=	0x00a0
                           0000A1   216 _P2_1	=	0x00a1
                           0000A2   217 _P2_2	=	0x00a2
                           0000A3   218 _P2_3	=	0x00a3
                           0000A4   219 _P2_4	=	0x00a4
                           0000A5   220 _P2_5	=	0x00a5
                           0000A6   221 _P2_6	=	0x00a6
                           0000A7   222 _P2_7	=	0x00a7
                           0000A8   223 _EX0	=	0x00a8
                           0000A9   224 _ET0	=	0x00a9
                           0000AA   225 _EX1	=	0x00aa
                           0000AB   226 _ET1	=	0x00ab
                           0000AC   227 _ES	=	0x00ac
                           0000AD   228 _ET2	=	0x00ad
                           0000AF   229 _EA	=	0x00af
                           0000B0   230 _P3_0	=	0x00b0
                           0000B1   231 _P3_1	=	0x00b1
                           0000B2   232 _P3_2	=	0x00b2
                           0000B3   233 _P3_3	=	0x00b3
                           0000B4   234 _P3_4	=	0x00b4
                           0000B5   235 _P3_5	=	0x00b5
                           0000B6   236 _P3_6	=	0x00b6
                           0000B7   237 _P3_7	=	0x00b7
                           0000B0   238 _RXD	=	0x00b0
                           0000B1   239 _TXD	=	0x00b1
                           0000B2   240 _INT0	=	0x00b2
                           0000B3   241 _INT1	=	0x00b3
                           0000B4   242 _T0	=	0x00b4
                           0000B5   243 _T1	=	0x00b5
                           0000B6   244 _WR	=	0x00b6
                           0000B7   245 _RD	=	0x00b7
                           0000B8   246 _PX0	=	0x00b8
                           0000B9   247 _PT0	=	0x00b9
                           0000BA   248 _PX1	=	0x00ba
                           0000BB   249 _PT1	=	0x00bb
                           0000BC   250 _PS	=	0x00bc
                           0000BD   251 _PT2	=	0x00bd
                           0000C8   252 _T2CON_0	=	0x00c8
                           0000C9   253 _T2CON_1	=	0x00c9
                           0000CA   254 _T2CON_2	=	0x00ca
                           0000CB   255 _T2CON_3	=	0x00cb
                           0000CC   256 _T2CON_4	=	0x00cc
                           0000CD   257 _T2CON_5	=	0x00cd
                           0000CE   258 _T2CON_6	=	0x00ce
                           0000CF   259 _T2CON_7	=	0x00cf
                           0000C8   260 _CP_RL2	=	0x00c8
                           0000C9   261 _C_T2	=	0x00c9
                           0000CA   262 _TR2	=	0x00ca
                           0000CB   263 _EXEN2	=	0x00cb
                           0000CC   264 _TCLK	=	0x00cc
                           0000CD   265 _RCLK	=	0x00cd
                           0000CE   266 _EXF2	=	0x00ce
                           0000CF   267 _TF2	=	0x00cf
                           0000D0   268 _P	=	0x00d0
                           0000D1   269 _FL	=	0x00d1
                           0000D2   270 _OV	=	0x00d2
                           0000D3   271 _RS0	=	0x00d3
                           0000D4   272 _RS1	=	0x00d4
                           0000D5   273 _F0	=	0x00d5
                           0000D6   274 _AC	=	0x00d6
                           0000D7   275 _CY	=	0x00d7
                                    276 ;--------------------------------------------------------
                                    277 ; overlayable register banks
                                    278 ;--------------------------------------------------------
                                    279 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        280 	.ds 8
                                    281 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable bit register bank
                                    285 ;--------------------------------------------------------
                                    286 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        287 bits:
      000000                        288 	.ds 1
                           008000   289 	b0 = bits[0]
                           008100   290 	b1 = bits[1]
                           008200   291 	b2 = bits[2]
                           008300   292 	b3 = bits[3]
                           008400   293 	b4 = bits[4]
                           008500   294 	b5 = bits[5]
                           008600   295 	b6 = bits[6]
                           008700   296 	b7 = bits[7]
                                    297 ;--------------------------------------------------------
                                    298 ; internal ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area DSEG    (DATA)
                                    301 ;--------------------------------------------------------
                                    302 ; overlayable items in internal ram 
                                    303 ;--------------------------------------------------------
                                    304 ;--------------------------------------------------------
                                    305 ; Stack segment in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 	.area	SSEG
      000000                        308 __start__stack:
      000000                        309 	.ds	1
                                    310 
                                    311 ;--------------------------------------------------------
                                    312 ; indirectly addressable internal ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area ISEG    (DATA)
      000000                        315 _digits:
      000000                        316 	.ds 16
      000010                        317 _i0:
      000010                        318 	.ds 1
      000011                        319 _i1:
      000011                        320 	.ds 1
      000012                        321 _x:
      000012                        322 	.ds 2
      000014                        323 _y:
      000014                        324 	.ds 2
      000016                        325 _j:
      000016                        326 	.ds 2
      000018                        327 _c:
      000018                        328 	.ds 2
      00001A                        329 _bstep:
      00001A                        330 	.ds 1
      00001B                        331 _n:
      00001B                        332 	.ds 1
      00001C                        333 _fixed:
      00001C                        334 	.ds 1
      00001D                        335 _cycle2:
      00001D                        336 	.ds 1
      00001E                        337 _x1:
      00001E                        338 	.ds 2
      000020                        339 _y1:
      000020                        340 	.ds 2
      000022                        341 _generation:
      000022                        342 	.ds 4
      000026                        343 _busy:
      000026                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
      000000                        362 _pu:
      000000                        363 	.ds 2048
      000800                        364 _u:
      000800                        365 	.ds 2048
      001000                        366 _nu:
      001000                        367 	.ds 2048
                                    368 ;--------------------------------------------------------
                                    369 ; absolute external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XABS    (ABS,XDATA)
                                    372 ;--------------------------------------------------------
                                    373 ; external initialized ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XISEG   (XDATA)
                                    376 	.area HOME    (CODE)
                                    377 	.area GSINIT0 (CODE)
                                    378 	.area GSINIT1 (CODE)
                                    379 	.area GSINIT2 (CODE)
                                    380 	.area GSINIT3 (CODE)
                                    381 	.area GSINIT4 (CODE)
                                    382 	.area GSINIT5 (CODE)
                                    383 	.area GSINIT  (CODE)
                                    384 	.area GSFINAL (CODE)
                                    385 	.area CSEG    (CODE)
                                    386 ;--------------------------------------------------------
                                    387 ; interrupt vector 
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
      000000                        390 __interrupt_vect:
      000000 02r00r00         [24]  391 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  392 	ljmp	_int0
      000006                        393 	.ds	5
      00000B 32               [24]  394 	reti
      00000C                        395 	.ds	7
      000013 02r00r1A         [24]  396 	ljmp	_int1
                                    397 ;--------------------------------------------------------
                                    398 ; global & static initialisations
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
                                    401 	.area GSINIT  (CODE)
                                    402 	.area GSFINAL (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.globl __sdcc_gsinit_startup
                                    405 	.globl __sdcc_program_startup
                                    406 	.globl __start__stack
                                    407 	.globl __mcs51_genXINIT
                                    408 	.globl __mcs51_genXRAMCLEAR
                                    409 	.globl __mcs51_genRAMCLEAR
                                    410 ;	life.c:25: __idata static const char digits[16] = {
      000000 78r00            [12]  411 	mov	r0,#_digits
      000002 76 30            [12]  412 	mov	@r0,#0x30
      000004 78r01            [12]  413 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  414 	mov	@r0,#0x31
      000008 78r02            [12]  415 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  416 	mov	@r0,#0x32
      00000C 78r03            [12]  417 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  418 	mov	@r0,#0x33
      000010 78r04            [12]  419 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  420 	mov	@r0,#0x34
      000014 78r05            [12]  421 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  422 	mov	@r0,#0x35
      000018 78r06            [12]  423 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  424 	mov	@r0,#0x36
      00001C 78r07            [12]  425 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  426 	mov	@r0,#0x37
      000020 78r08            [12]  427 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  428 	mov	@r0,#0x38
      000024 78r09            [12]  429 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  430 	mov	@r0,#0x39
      000028 78r0A            [12]  431 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  432 	mov	@r0,#0x41
      00002C 78r0B            [12]  433 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  434 	mov	@r0,#0x42
      000030 78r0C            [12]  435 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  436 	mov	@r0,#0x43
      000034 78r0D            [12]  437 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  438 	mov	@r0,#0x44
      000038 78r0E            [12]  439 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  440 	mov	@r0,#0x45
      00003C 78r0F            [12]  441 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  442 	mov	@r0,#0x46
                                    443 ;	life.c:162: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000040 78r26            [12]  444 	mov	r0,#_busy
      000042 76 5C            [12]  445 	mov	@r0,#0x5c
      000044 78r27            [12]  446 	mov	r0,#(_busy + 0x0001)
      000046 76 7C            [12]  447 	mov	@r0,#0x7c
      000048 78r28            [12]  448 	mov	r0,#(_busy + 0x0002)
      00004A 76 2F            [12]  449 	mov	@r0,#0x2f
      00004C 78r29            [12]  450 	mov	r0,#(_busy + 0x0003)
      00004E 76 2D            [12]  451 	mov	@r0,#0x2d
                                    452 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  453 	ljmp	__sdcc_program_startup
                                    454 ;--------------------------------------------------------
                                    455 ; Home
                                    456 ;--------------------------------------------------------
                                    457 	.area HOME    (CODE)
                                    458 	.area HOME    (CODE)
      000016                        459 __sdcc_program_startup:
      000016 02r02r23         [24]  460 	ljmp	_main
                                    461 ;	return from main will return to caller
                                    462 ;--------------------------------------------------------
                                    463 ; code
                                    464 ;--------------------------------------------------------
                                    465 	.area CSEG    (CODE)
                                    466 ;------------------------------------------------------------
                                    467 ;Allocation info for local variables in function 'putchar'
                                    468 ;------------------------------------------------------------
                                    469 ;c                         Allocated to registers 
                                    470 ;------------------------------------------------------------
                                    471 ;	life.c:8: int putchar(int c) __naked {
                                    472 ;	-----------------------------------------
                                    473 ;	 function putchar
                                    474 ;	-----------------------------------------
      000000                        475 _putchar:
                                    476 ;	naked function: no prologue.
                                    477 ;	life.c:13: __endasm;
      000000 E5 82            [12]  478 	mov	a, dpl
      000002 02 00 30         [24]  479 	ljmp	0x0030
                                    480 ;	life.c:14: }
                                    481 ;	naked function: no epilogue.
                                    482 ;------------------------------------------------------------
                                    483 ;Allocation info for local variables in function 'getchar'
                                    484 ;------------------------------------------------------------
                                    485 ;	life.c:16: int getchar(void) __naked {
                                    486 ;	-----------------------------------------
                                    487 ;	 function getchar
                                    488 ;	-----------------------------------------
      000005                        489 _getchar:
                                    490 ;	naked function: no prologue.
                                    491 ;	life.c:22: __endasm;
      000005 12 00 32         [24]  492 	lcall	0x0032
      000008 F5 82            [12]  493 	mov	dpl, a
      00000A 75 83 00         [24]  494 	mov	dph, #0
      00000D 22               [24]  495 	ret
                                    496 ;	life.c:23: }
                                    497 ;	naked function: no epilogue.
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int0'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:54: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int0
                                    504 ;	-----------------------------------------
      00000E                        505 _int0:
                           00000F   506 	ar7 = 0x0f
                           00000E   507 	ar6 = 0x0e
                           00000D   508 	ar5 = 0x0d
                           00000C   509 	ar4 = 0x0c
                           00000B   510 	ar3 = 0x0b
                           00000A   511 	ar2 = 0x0a
                           000009   512 	ar1 = 0x09
                           000008   513 	ar0 = 0x08
      00000E C0 D0            [24]  514 	push	psw
      000010 75 D0 08         [24]  515 	mov	psw,#0x08
                                    516 ;	life.c:55: i0 = 1;
      000013 78r10            [12]  517 	mov	r0,#_i0
      000015 76 01            [12]  518 	mov	@r0,#0x01
                                    519 ;	life.c:56: }
      000017 D0 D0            [24]  520 	pop	psw
      000019 32               [24]  521 	reti
                                    522 ;	eliminated unneeded push/pop dpl
                                    523 ;	eliminated unneeded push/pop dph
                                    524 ;	eliminated unneeded push/pop b
                                    525 ;	eliminated unneeded push/pop acc
                                    526 ;------------------------------------------------------------
                                    527 ;Allocation info for local variables in function 'int1'
                                    528 ;------------------------------------------------------------
                                    529 ;	life.c:58: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    530 ;	-----------------------------------------
                                    531 ;	 function int1
                                    532 ;	-----------------------------------------
      00001A                        533 _int1:
      00001A C0 D0            [24]  534 	push	psw
      00001C 75 D0 08         [24]  535 	mov	psw,#0x08
                                    536 ;	life.c:59: i1 = 1;
      00001F 78r11            [12]  537 	mov	r0,#_i1
      000021 76 01            [12]  538 	mov	@r0,#0x01
                                    539 ;	life.c:60: }
      000023 D0 D0            [24]  540 	pop	psw
      000025 32               [24]  541 	reti
                                    542 ;	eliminated unneeded push/pop dpl
                                    543 ;	eliminated unneeded push/pop dph
                                    544 ;	eliminated unneeded push/pop b
                                    545 ;	eliminated unneeded push/pop acc
                                    546 ;------------------------------------------------------------
                                    547 ;Allocation info for local variables in function 'show'
                                    548 ;------------------------------------------------------------
                                    549 ;hdr                       Allocated to registers r7 
                                    550 ;__1966080005              Allocated to registers 
                                    551 ;s                         Allocated to registers r5 r6 r7 
                                    552 ;__1310720001              Allocated to registers r6 r7 
                                    553 ;a                         Allocated to registers 
                                    554 ;__1310720003              Allocated to registers r6 r7 
                                    555 ;a                         Allocated to registers 
                                    556 ;__1966080008              Allocated to registers 
                                    557 ;s                         Allocated to registers r5 r6 r7 
                                    558 ;__2621440011              Allocated to registers 
                                    559 ;s                         Allocated to registers r5 r6 r7 
                                    560 ;------------------------------------------------------------
                                    561 ;	life.c:96: void show(char hdr) {
                                    562 ;	-----------------------------------------
                                    563 ;	 function show
                                    564 ;	-----------------------------------------
      000026                        565 _show:
                           000007   566 	ar7 = 0x07
                           000006   567 	ar6 = 0x06
                           000005   568 	ar5 = 0x05
                           000004   569 	ar4 = 0x04
                           000003   570 	ar3 = 0x03
                           000002   571 	ar2 = 0x02
                           000001   572 	ar1 = 0x01
                           000000   573 	ar0 = 0x00
                                    574 ;	life.c:97: if (hdr) {
      000026 E5 82            [12]  575 	mov	a,dpl
      000028 FF               [12]  576 	mov	r7,a
      000029 70 03            [24]  577 	jnz	00190$
      00002B 02r01r7E         [24]  578 	ljmp	00102$
      00002E                        579 00190$:
                                    580 ;	life.c:98: printstr("\033[2J\033[m");
      00002E 7Dr00            [12]  581 	mov	r5,#___str_0
      000030 7Es00            [12]  582 	mov	r6,#(___str_0 >> 8)
      000032 7F 80            [12]  583 	mov	r7,#0x80
                                    584 ;	life.c:49: return;
      000034                        585 00121$:
                                    586 ;	life.c:47: for (; *s; s++) putchar(*s);
      000034 8D 82            [24]  587 	mov	dpl,r5
      000036 8E 83            [24]  588 	mov	dph,r6
      000038 8F F0            [24]  589 	mov	b,r7
      00003A 12r00r00         [24]  590 	lcall	__gptrget
      00003D FC               [12]  591 	mov	r4,a
      00003E 60 10            [24]  592 	jz	00109$
      000040 7B 00            [12]  593 	mov	r3,#0x00
      000042 8C 82            [24]  594 	mov	dpl,r4
      000044 8B 83            [24]  595 	mov	dph,r3
      000046 12r00r00         [24]  596 	lcall	_putchar
      000049 0D               [12]  597 	inc	r5
                                    598 ;	life.c:98: printstr("\033[2J\033[m");
      00004A BD 00 E7         [24]  599 	cjne	r5,#0x00,00121$
      00004D 0E               [12]  600 	inc	r6
      00004E 80 E4            [24]  601 	sjmp	00121$
      000050                        602 00109$:
                                    603 ;	life.c:90: print16x(generation[1]);
      000050 78r24            [12]  604 	mov	r0,#(_generation + 0x0002)
      000052 86 06            [24]  605 	mov	ar6,@r0
      000054 08               [12]  606 	inc	r0
                                    607 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      000055 E6               [12]  608 	mov	a,@r0
      000056 FF               [12]  609 	mov	r7,a
      000057 C4               [12]  610 	swap	a
      000058 54 0F            [12]  611 	anl	a,#0x0f
      00005A 30 E3 02         [24]  612 	jnb	acc.3,00193$
      00005D 44 F0            [12]  613 	orl	a,#0xf0
      00005F                        614 00193$:
      00005F FC               [12]  615 	mov	r4,a
      000060 33               [12]  616 	rlc	a
      000061 95 E0            [12]  617 	subb	a,acc
      000063 53 04 0F         [24]  618 	anl	ar4,#0x0f
      000066 EC               [12]  619 	mov	a,r4
      000067 24r00            [12]  620 	add	a,#_digits
      000069 F9               [12]  621 	mov	r1,a
      00006A 87 05            [24]  622 	mov	ar5,@r1
      00006C 7C 00            [12]  623 	mov	r4,#0x00
      00006E 8D 82            [24]  624 	mov	dpl,r5
      000070 8C 83            [24]  625 	mov	dph,r4
      000072 12r00r00         [24]  626 	lcall	_putchar
                                    627 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      000075 8F 05            [24]  628 	mov	ar5,r7
      000077 53 05 0F         [24]  629 	anl	ar5,#0x0f
      00007A ED               [12]  630 	mov	a,r5
      00007B 24r00            [12]  631 	add	a,#_digits
      00007D F9               [12]  632 	mov	r1,a
      00007E 87 05            [24]  633 	mov	ar5,@r1
      000080 7C 00            [12]  634 	mov	r4,#0x00
      000082 8D 82            [24]  635 	mov	dpl,r5
      000084 8C 83            [24]  636 	mov	dph,r4
      000086 12r00r00         [24]  637 	lcall	_putchar
                                    638 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      000089 8E 04            [24]  639 	mov	ar4,r6
      00008B EF               [12]  640 	mov	a,r7
      00008C C4               [12]  641 	swap	a
      00008D CC               [12]  642 	xch	a,r4
      00008E C4               [12]  643 	swap	a
      00008F 54 0F            [12]  644 	anl	a,#0x0f
      000091 6C               [12]  645 	xrl	a,r4
      000092 CC               [12]  646 	xch	a,r4
      000093 54 0F            [12]  647 	anl	a,#0x0f
      000095 CC               [12]  648 	xch	a,r4
      000096 6C               [12]  649 	xrl	a,r4
      000097 CC               [12]  650 	xch	a,r4
      000098 30 E3 02         [24]  651 	jnb	acc.3,00194$
      00009B 44 F0            [12]  652 	orl	a,#0xf0
      00009D                        653 00194$:
      00009D 53 04 0F         [24]  654 	anl	ar4,#0x0f
      0000A0 EC               [12]  655 	mov	a,r4
      0000A1 24r00            [12]  656 	add	a,#_digits
      0000A3 F9               [12]  657 	mov	r1,a
      0000A4 87 05            [24]  658 	mov	ar5,@r1
      0000A6 7C 00            [12]  659 	mov	r4,#0x00
      0000A8 8D 82            [24]  660 	mov	dpl,r5
      0000AA 8C 83            [24]  661 	mov	dph,r4
      0000AC 12r00r00         [24]  662 	lcall	_putchar
                                    663 ;	life.c:41: putchar(digits[a & 0xf]);
      0000AF 53 06 0F         [24]  664 	anl	ar6,#0x0f
      0000B2 EE               [12]  665 	mov	a,r6
      0000B3 24r00            [12]  666 	add	a,#_digits
      0000B5 F9               [12]  667 	mov	r1,a
      0000B6 87 07            [24]  668 	mov	ar7,@r1
      0000B8 7E 00            [12]  669 	mov	r6,#0x00
      0000BA 8F 82            [24]  670 	mov	dpl,r7
      0000BC 8E 83            [24]  671 	mov	dph,r6
      0000BE 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:91: print16x(generation[0]);
      0000C1 78r22            [12]  674 	mov	r0,#_generation
      0000C3 86 06            [24]  675 	mov	ar6,@r0
      0000C5 08               [12]  676 	inc	r0
                                    677 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      0000C6 E6               [12]  678 	mov	a,@r0
      0000C7 FF               [12]  679 	mov	r7,a
      0000C8 C4               [12]  680 	swap	a
      0000C9 54 0F            [12]  681 	anl	a,#0x0f
      0000CB 30 E3 02         [24]  682 	jnb	acc.3,00195$
      0000CE 44 F0            [12]  683 	orl	a,#0xf0
      0000D0                        684 00195$:
      0000D0 FC               [12]  685 	mov	r4,a
      0000D1 33               [12]  686 	rlc	a
      0000D2 95 E0            [12]  687 	subb	a,acc
      0000D4 53 04 0F         [24]  688 	anl	ar4,#0x0f
      0000D7 EC               [12]  689 	mov	a,r4
      0000D8 24r00            [12]  690 	add	a,#_digits
      0000DA F9               [12]  691 	mov	r1,a
      0000DB 87 05            [24]  692 	mov	ar5,@r1
      0000DD 7C 00            [12]  693 	mov	r4,#0x00
      0000DF 8D 82            [24]  694 	mov	dpl,r5
      0000E1 8C 83            [24]  695 	mov	dph,r4
      0000E3 12r00r00         [24]  696 	lcall	_putchar
                                    697 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      0000E6 8F 05            [24]  698 	mov	ar5,r7
      0000E8 53 05 0F         [24]  699 	anl	ar5,#0x0f
      0000EB ED               [12]  700 	mov	a,r5
      0000EC 24r00            [12]  701 	add	a,#_digits
      0000EE F9               [12]  702 	mov	r1,a
      0000EF 87 05            [24]  703 	mov	ar5,@r1
      0000F1 7C 00            [12]  704 	mov	r4,#0x00
      0000F3 8D 82            [24]  705 	mov	dpl,r5
      0000F5 8C 83            [24]  706 	mov	dph,r4
      0000F7 12r00r00         [24]  707 	lcall	_putchar
                                    708 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      0000FA 8E 04            [24]  709 	mov	ar4,r6
      0000FC EF               [12]  710 	mov	a,r7
      0000FD C4               [12]  711 	swap	a
      0000FE CC               [12]  712 	xch	a,r4
      0000FF C4               [12]  713 	swap	a
      000100 54 0F            [12]  714 	anl	a,#0x0f
      000102 6C               [12]  715 	xrl	a,r4
      000103 CC               [12]  716 	xch	a,r4
      000104 54 0F            [12]  717 	anl	a,#0x0f
      000106 CC               [12]  718 	xch	a,r4
      000107 6C               [12]  719 	xrl	a,r4
      000108 CC               [12]  720 	xch	a,r4
      000109 30 E3 02         [24]  721 	jnb	acc.3,00196$
      00010C 44 F0            [12]  722 	orl	a,#0xf0
      00010E                        723 00196$:
      00010E 53 04 0F         [24]  724 	anl	ar4,#0x0f
      000111 EC               [12]  725 	mov	a,r4
      000112 24r00            [12]  726 	add	a,#_digits
      000114 F9               [12]  727 	mov	r1,a
      000115 87 05            [24]  728 	mov	ar5,@r1
      000117 7C 00            [12]  729 	mov	r4,#0x00
      000119 8D 82            [24]  730 	mov	dpl,r5
      00011B 8C 83            [24]  731 	mov	dph,r4
      00011D 12r00r00         [24]  732 	lcall	_putchar
                                    733 ;	life.c:41: putchar(digits[a & 0xf]);
      000120 53 06 0F         [24]  734 	anl	ar6,#0x0f
      000123 EE               [12]  735 	mov	a,r6
      000124 24r00            [12]  736 	add	a,#_digits
      000126 F9               [12]  737 	mov	r1,a
      000127 87 07            [24]  738 	mov	ar7,@r1
      000129 7E 00            [12]  739 	mov	r6,#0x00
      00012B 8F 82            [24]  740 	mov	dpl,r7
      00012D 8E 83            [24]  741 	mov	dph,r6
      00012F 12r00r00         [24]  742 	lcall	_putchar
                                    743 ;	life.c:100: printstr("\r\n");
      000132 7Dr08            [12]  744 	mov	r5,#___str_1
      000134 7Es00            [12]  745 	mov	r6,#(___str_1 >> 8)
      000136 7F 80            [12]  746 	mov	r7,#0x80
                                    747 ;	life.c:49: return;
      000138                        748 00124$:
                                    749 ;	life.c:47: for (; *s; s++) putchar(*s);
      000138 8D 82            [24]  750 	mov	dpl,r5
      00013A 8E 83            [24]  751 	mov	dph,r6
      00013C 8F F0            [24]  752 	mov	b,r7
      00013E 12r00r00         [24]  753 	lcall	__gptrget
      000141 FC               [12]  754 	mov	r4,a
      000142 60 10            [24]  755 	jz	00114$
      000144 7B 00            [12]  756 	mov	r3,#0x00
      000146 8C 82            [24]  757 	mov	dpl,r4
      000148 8B 83            [24]  758 	mov	dph,r3
      00014A 12r00r00         [24]  759 	lcall	_putchar
      00014D 0D               [12]  760 	inc	r5
                                    761 ;	life.c:100: printstr("\r\n");
      00014E BD 00 E7         [24]  762 	cjne	r5,#0x00,00124$
      000151 0E               [12]  763 	inc	r6
      000152 80 E4            [24]  764 	sjmp	00124$
      000154                        765 00114$:
                                    766 ;	life.c:83: generation[0]++;
      000154 78r22            [12]  767 	mov	r0,#_generation
      000156 86 06            [24]  768 	mov	ar6,@r0
      000158 08               [12]  769 	inc	r0
      000159 86 07            [24]  770 	mov	ar7,@r0
      00015B 0E               [12]  771 	inc	r6
      00015C BE 00 01         [24]  772 	cjne	r6,#0x00,00199$
      00015F 0F               [12]  773 	inc	r7
      000160                        774 00199$:
      000160 78r22            [12]  775 	mov	r0,#_generation
      000162 A6 06            [24]  776 	mov	@r0,ar6
      000164 08               [12]  777 	inc	r0
      000165 A6 07            [24]  778 	mov	@r0,ar7
                                    779 ;	life.c:84: if (!generation[0]) generation[1]++;
      000167 EE               [12]  780 	mov	a,r6
      000168 4F               [12]  781 	orl	a,r7
      000169 70 13            [24]  782 	jnz	00102$
      00016B 78r24            [12]  783 	mov	r0,#(_generation + 0x0002)
      00016D 86 06            [24]  784 	mov	ar6,@r0
      00016F 08               [12]  785 	inc	r0
      000170 86 07            [24]  786 	mov	ar7,@r0
      000172 0E               [12]  787 	inc	r6
      000173 BE 00 01         [24]  788 	cjne	r6,#0x00,00201$
      000176 0F               [12]  789 	inc	r7
      000177                        790 00201$:
      000177 78r24            [12]  791 	mov	r0,#(_generation + 0x0002)
      000179 A6 06            [24]  792 	mov	@r0,ar6
      00017B 08               [12]  793 	inc	r0
      00017C A6 07            [24]  794 	mov	@r0,ar7
                                    795 ;	life.c:101: updategen();
      00017E                        796 00102$:
                                    797 ;	life.c:104: for (x = 0; x < W; x++) {
      00017E 78r12            [12]  798 	mov	r0,#_x
      000180 E4               [12]  799 	clr	a
      000181 F6               [12]  800 	mov	@r0,a
      000182 08               [12]  801 	inc	r0
      000183 F6               [12]  802 	mov	@r0,a
      000184                        803 00131$:
                                    804 ;	life.c:105: for (y = 0; y < H; y++)
      000184 78r14            [12]  805 	mov	r0,#_y
      000186 E4               [12]  806 	clr	a
      000187 F6               [12]  807 	mov	@r0,a
      000188 08               [12]  808 	inc	r0
      000189 F6               [12]  809 	mov	@r0,a
      00018A                        810 00126$:
                                    811 ;	life.c:106: if (u[A2D(W, y, x)]) {
      00018A 78r14            [12]  812 	mov	r0,#_y
      00018C 86 06            [24]  813 	mov	ar6,@r0
      00018E 08               [12]  814 	inc	r0
      00018F E6               [12]  815 	mov	a,@r0
      000190 C4               [12]  816 	swap	a
      000191 23               [12]  817 	rl	a
      000192 54 E0            [12]  818 	anl	a,#0xe0
      000194 CE               [12]  819 	xch	a,r6
      000195 C4               [12]  820 	swap	a
      000196 23               [12]  821 	rl	a
      000197 CE               [12]  822 	xch	a,r6
      000198 6E               [12]  823 	xrl	a,r6
      000199 CE               [12]  824 	xch	a,r6
      00019A 54 E0            [12]  825 	anl	a,#0xe0
      00019C CE               [12]  826 	xch	a,r6
      00019D 6E               [12]  827 	xrl	a,r6
      00019E FF               [12]  828 	mov	r7,a
      00019F 78r12            [12]  829 	mov	r0,#_x
      0001A1 E6               [12]  830 	mov	a,@r0
      0001A2 2E               [12]  831 	add	a,r6
      0001A3 FE               [12]  832 	mov	r6,a
      0001A4 08               [12]  833 	inc	r0
      0001A5 E6               [12]  834 	mov	a,@r0
      0001A6 3F               [12]  835 	addc	a,r7
      0001A7 FF               [12]  836 	mov	r7,a
      0001A8 EE               [12]  837 	mov	a,r6
      0001A9 24r00            [12]  838 	add	a,#_u
      0001AB FE               [12]  839 	mov	r6,a
      0001AC EF               [12]  840 	mov	a,r7
      0001AD 34s08            [12]  841 	addc	a,#(_u >> 8)
      0001AF FF               [12]  842 	mov	r7,a
      0001B0 8E 82            [24]  843 	mov	dpl,r6
      0001B2 8F 83            [24]  844 	mov	dph,r7
      0001B4 E0               [24]  845 	movx	a,@dptr
      0001B5 60 0E            [24]  846 	jz	00104$
                                    847 ;	life.c:107: putchar('['); putchar(']');
      0001B7 90 00 5B         [24]  848 	mov	dptr,#0x005b
      0001BA 12r00r00         [24]  849 	lcall	_putchar
      0001BD 90 00 5D         [24]  850 	mov	dptr,#0x005d
      0001C0 12r00r00         [24]  851 	lcall	_putchar
      0001C3 80 0C            [24]  852 	sjmp	00127$
      0001C5                        853 00104$:
                                    854 ;	life.c:109: putchar('#'); putchar('#');
      0001C5 90 00 23         [24]  855 	mov	dptr,#0x0023
      0001C8 12r00r00         [24]  856 	lcall	_putchar
      0001CB 90 00 23         [24]  857 	mov	dptr,#0x0023
      0001CE 12r00r00         [24]  858 	lcall	_putchar
      0001D1                        859 00127$:
                                    860 ;	life.c:105: for (y = 0; y < H; y++)
      0001D1 78r14            [12]  861 	mov	r0,#_y
      0001D3 06               [12]  862 	inc	@r0
      0001D4 B6 00 02         [24]  863 	cjne	@r0,#0x00,00203$
      0001D7 08               [12]  864 	inc	r0
      0001D8 06               [12]  865 	inc	@r0
      0001D9                        866 00203$:
      0001D9 78r14            [12]  867 	mov	r0,#_y
      0001DB C3               [12]  868 	clr	c
      0001DC E6               [12]  869 	mov	a,@r0
      0001DD 94 40            [12]  870 	subb	a,#0x40
      0001DF 08               [12]  871 	inc	r0
      0001E0 E6               [12]  872 	mov	a,@r0
      0001E1 64 80            [12]  873 	xrl	a,#0x80
      0001E3 94 80            [12]  874 	subb	a,#0x80
      0001E5 40 A3            [24]  875 	jc	00126$
                                    876 ;	life.c:111: printstr("\r\n");
      0001E7 7Dr08            [12]  877 	mov	r5,#___str_1
      0001E9 7Es00            [12]  878 	mov	r6,#(___str_1 >> 8)
      0001EB 7F 80            [12]  879 	mov	r7,#0x80
                                    880 ;	life.c:49: return;
      0001ED                        881 00129$:
                                    882 ;	life.c:47: for (; *s; s++) putchar(*s);
      0001ED 8D 82            [24]  883 	mov	dpl,r5
      0001EF 8E 83            [24]  884 	mov	dph,r6
      0001F1 8F F0            [24]  885 	mov	b,r7
      0001F3 12r00r00         [24]  886 	lcall	__gptrget
      0001F6 FC               [12]  887 	mov	r4,a
      0001F7 60 10            [24]  888 	jz	00119$
      0001F9 7B 00            [12]  889 	mov	r3,#0x00
      0001FB 8C 82            [24]  890 	mov	dpl,r4
      0001FD 8B 83            [24]  891 	mov	dph,r3
      0001FF 12r00r00         [24]  892 	lcall	_putchar
      000202 0D               [12]  893 	inc	r5
                                    894 ;	life.c:111: printstr("\r\n");
      000203 BD 00 E7         [24]  895 	cjne	r5,#0x00,00129$
      000206 0E               [12]  896 	inc	r6
      000207 80 E4            [24]  897 	sjmp	00129$
      000209                        898 00119$:
                                    899 ;	life.c:104: for (x = 0; x < W; x++) {
      000209 78r12            [12]  900 	mov	r0,#_x
      00020B 06               [12]  901 	inc	@r0
      00020C B6 00 02         [24]  902 	cjne	@r0,#0x00,00207$
      00020F 08               [12]  903 	inc	r0
      000210 06               [12]  904 	inc	@r0
      000211                        905 00207$:
      000211 78r12            [12]  906 	mov	r0,#_x
      000213 C3               [12]  907 	clr	c
      000214 E6               [12]  908 	mov	a,@r0
      000215 94 20            [12]  909 	subb	a,#0x20
      000217 08               [12]  910 	inc	r0
      000218 E6               [12]  911 	mov	a,@r0
      000219 64 80            [12]  912 	xrl	a,#0x80
      00021B 94 80            [12]  913 	subb	a,#0x80
      00021D 50 03            [24]  914 	jnc	00208$
      00021F 02r01r84         [24]  915 	ljmp	00131$
      000222                        916 00208$:
                                    917 ;	life.c:114: return;
                                    918 ;	life.c:115: }
      000222 22               [24]  919 	ret
                                    920 ;------------------------------------------------------------
                                    921 ;Allocation info for local variables in function 'main'
                                    922 ;------------------------------------------------------------
                                    923 ;__2621440019              Allocated to registers 
                                    924 ;s                         Allocated to registers r5 r6 r7 
                                    925 ;__1310720013              Allocated to registers 
                                    926 ;s                         Allocated to registers r5 r6 r7 
                                    927 ;__1310720015              Allocated to registers r6 r7 
                                    928 ;a                         Allocated to registers r4 r5 
                                    929 ;__1310720017              Allocated to registers 
                                    930 ;s                         Allocated to registers r5 r6 r7 
                                    931 ;__2621440023              Allocated to registers 
                                    932 ;s                         Allocated to registers r5 r6 r7 
                                    933 ;__4587520027              Allocated to registers 
                                    934 ;s                         Allocated to registers r5 r6 r7 
                                    935 ;__4587520029              Allocated to registers 
                                    936 ;s                         Allocated to registers r5 r6 r7 
                                    937 ;__4587520031              Allocated to registers 
                                    938 ;s                         Allocated to registers r5 r6 r7 
                                    939 ;__3276800033              Allocated to registers 
                                    940 ;s                         Allocated to registers r5 r6 r7 
                                    941 ;__1310720035              Allocated to registers 
                                    942 ;s                         Allocated to registers r5 r6 r7 
                                    943 ;sloc0                     Allocated to stack - _bp +1
                                    944 ;sloc1                     Allocated to stack - _bp +3
                                    945 ;sloc2                     Allocated to stack - _bp +5
                                    946 ;sloc3                     Allocated to stack - _bp +7
                                    947 ;sloc4                     Allocated to stack - _bp +9
                                    948 ;sloc5                     Allocated to stack - _bp +11
                                    949 ;sloc6                     Allocated to stack - _bp +13
                                    950 ;------------------------------------------------------------
                                    951 ;	life.c:209: void main(void) {
                                    952 ;	-----------------------------------------
                                    953 ;	 function main
                                    954 ;	-----------------------------------------
      000223                        955 _main:
      000223 C0*00            [24]  956 	push	_bp
      000225 E5 81            [12]  957 	mov	a,sp
      000227 F5*00            [12]  958 	mov	_bp,a
      000229 24 0E            [12]  959 	add	a,#0x0e
      00022B F5 81            [12]  960 	mov	sp,a
                                    961 ;	life.c:210: IT0 = 1;
                                    962 ;	assignBit
      00022D D2 88            [12]  963 	setb	_IT0
                                    964 ;	life.c:211: IT1 = 1;
                                    965 ;	assignBit
      00022F D2 8A            [12]  966 	setb	_IT1
                                    967 ;	life.c:212: EX0 = 1;
                                    968 ;	assignBit
      000231 D2 A8            [12]  969 	setb	_EX0
                                    970 ;	life.c:213: EX1 = 1;
                                    971 ;	assignBit
      000233 D2 AA            [12]  972 	setb	_EX1
                                    973 ;	life.c:214: EA = 1;
                                    974 ;	assignBit
      000235 D2 AF            [12]  975 	setb	_EA
                                    976 ;	life.c:216: for (i0 = 0; !i0; ) {		
      000237 78r10            [12]  977 	mov	r0,#_i0
      000239 76 00            [12]  978 	mov	@r0,#0x00
      00023B                        979 00220$:
                                    980 ;	life.c:217: printstr("\033[2J\033[mLIFE INIT\r\n");
      00023B 7Dr16            [12]  981 	mov	r5,#___str_4
      00023D 7Es00            [12]  982 	mov	r6,#(___str_4 >> 8)
      00023F 7F 80            [12]  983 	mov	r7,#0x80
                                    984 ;	life.c:49: return;
      000241                        985 00186$:
                                    986 ;	life.c:47: for (; *s; s++) putchar(*s);
      000241 8D 82            [24]  987 	mov	dpl,r5
      000243 8E 83            [24]  988 	mov	dph,r6
      000245 8F F0            [24]  989 	mov	b,r7
      000247 12r00r00         [24]  990 	lcall	__gptrget
      00024A FC               [12]  991 	mov	r4,a
      00024B 60 10            [24]  992 	jz	00108$
      00024D 7B 00            [12]  993 	mov	r3,#0x00
      00024F 8C 82            [24]  994 	mov	dpl,r4
      000251 8B 83            [24]  995 	mov	dph,r3
      000253 12r00r00         [24]  996 	lcall	_putchar
      000256 0D               [12]  997 	inc	r5
                                    998 ;	life.c:218: while (1) {
      000257 BD 00 E7         [24]  999 	cjne	r5,#0x00,00186$
      00025A 0E               [12] 1000 	inc	r6
      00025B 80 E4            [24] 1001 	sjmp	00186$
      00025D                       1002 00108$:
                                   1003 ;	life.c:219: c = toupper(getchar());
      00025D 12r00r05         [24] 1004 	lcall	_getchar
      000260 12r00r00         [24] 1005 	lcall	_toupper
      000263 AE 82            [24] 1006 	mov	r6,dpl
      000265 AF 83            [24] 1007 	mov	r7,dph
      000267 78r18            [12] 1008 	mov	r0,#_c
      000269 A6 06            [24] 1009 	mov	@r0,ar6
      00026B 08               [12] 1010 	inc	r0
      00026C A6 07            [24] 1011 	mov	@r0,ar7
                                   1012 ;	life.c:220: if (i0 || (c == (int)'T')) goto terminate;
      00026E 78r10            [12] 1013 	mov	r0,#_i0
      000270 E6               [12] 1014 	mov	a,@r0
      000271 60 03            [24] 1015 	jz	00435$
      000273 02r09rC4         [24] 1016 	ljmp	00133$
      000276                       1017 00435$:
      000276 BE 54 06         [24] 1018 	cjne	r6,#0x54,00436$
      000279 BF 00 03         [24] 1019 	cjne	r7,#0x00,00436$
      00027C 02r09rC4         [24] 1020 	ljmp	00133$
      00027F                       1021 00436$:
                                   1022 ;	life.c:221: else if (c == (int)'L') break;
      00027F BE 4C DB         [24] 1023 	cjne	r6,#0x4c,00108$
      000282 BF 00 D8         [24] 1024 	cjne	r7,#0x00,00108$
                                   1025 ;	life.c:224: reload:
      000285                       1026 00110$:
                                   1027 ;	life.c:118: memset(u, 0, sizeof (u));
      000285 E4               [12] 1028 	clr	a
      000286 C0 E0            [24] 1029 	push	acc
      000288 74 08            [12] 1030 	mov	a,#0x08
      00028A C0 E0            [24] 1031 	push	acc
      00028C E4               [12] 1032 	clr	a
      00028D C0 E0            [24] 1033 	push	acc
      00028F 90r08r00         [24] 1034 	mov	dptr,#_u
      000292 75 F0 00         [24] 1035 	mov	b,#0x00
      000295 12r00r00         [24] 1036 	lcall	_memset
      000298 15 81            [12] 1037 	dec	sp
      00029A 15 81            [12] 1038 	dec	sp
      00029C 15 81            [12] 1039 	dec	sp
                                   1040 ;	life.c:119: memset(pu, 0, sizeof (pu));
      00029E E4               [12] 1041 	clr	a
      00029F C0 E0            [24] 1042 	push	acc
      0002A1 74 08            [12] 1043 	mov	a,#0x08
      0002A3 C0 E0            [24] 1044 	push	acc
      0002A5 E4               [12] 1045 	clr	a
      0002A6 C0 E0            [24] 1046 	push	acc
      0002A8 90r00r00         [24] 1047 	mov	dptr,#_pu
      0002AB 75 F0 00         [24] 1048 	mov	b,#0x00
      0002AE 12r00r00         [24] 1049 	lcall	_memset
      0002B1 15 81            [12] 1050 	dec	sp
      0002B3 15 81            [12] 1051 	dec	sp
      0002B5 15 81            [12] 1052 	dec	sp
                                   1053 ;	life.c:125: j = 0;
      0002B7 78r16            [12] 1054 	mov	r0,#_j
      0002B9 E4               [12] 1055 	clr	a
      0002BA F6               [12] 1056 	mov	@r0,a
      0002BB 08               [12] 1057 	inc	r0
      0002BC F6               [12] 1058 	mov	@r0,a
                                   1059 ;	life.c:127: printstr("LOAD <");
      0002BD 7Dr0B            [12] 1060 	mov	r5,#___str_2
      0002BF 7Es00            [12] 1061 	mov	r6,#(___str_2 >> 8)
      0002C1 7F 80            [12] 1062 	mov	r7,#0x80
                                   1063 ;	life.c:49: return;
      0002C3                       1064 00189$:
                                   1065 ;	life.c:47: for (; *s; s++) putchar(*s);
      0002C3 8D 82            [24] 1066 	mov	dpl,r5
      0002C5 8E 83            [24] 1067 	mov	dph,r6
      0002C7 8F F0            [24] 1068 	mov	b,r7
      0002C9 12r00r00         [24] 1069 	lcall	__gptrget
      0002CC FC               [12] 1070 	mov	r4,a
      0002CD 60 10            [24] 1071 	jz	00138$
      0002CF 7B 00            [12] 1072 	mov	r3,#0x00
      0002D1 8C 82            [24] 1073 	mov	dpl,r4
      0002D3 8B 83            [24] 1074 	mov	dph,r3
      0002D5 12r00r00         [24] 1075 	lcall	_putchar
      0002D8 0D               [12] 1076 	inc	r5
                                   1077 ;	life.c:127: printstr("LOAD <");
      0002D9 BD 00 E7         [24] 1078 	cjne	r5,#0x00,00189$
      0002DC 0E               [12] 1079 	inc	r6
      0002DD 80 E4            [24] 1080 	sjmp	00189$
      0002DF                       1081 00138$:
                                   1082 ;	life.c:129: for (y = 0; y < H; y++) {
      0002DF 78r14            [12] 1083 	mov	r0,#_y
      0002E1 E4               [12] 1084 	clr	a
      0002E2 F6               [12] 1085 	mov	@r0,a
      0002E3 08               [12] 1086 	inc	r0
      0002E4 F6               [12] 1087 	mov	@r0,a
      0002E5                       1088 00192$:
                                   1089 ;	life.c:130: for (x = 0; x < W; x++) {
      0002E5 78r12            [12] 1090 	mov	r0,#_x
      0002E7 E4               [12] 1091 	clr	a
      0002E8 F6               [12] 1092 	mov	@r0,a
      0002E9 08               [12] 1093 	inc	r0
      0002EA F6               [12] 1094 	mov	@r0,a
                                   1095 ;	life.c:131: while (1) {
      0002EB                       1096 00151$:
                                   1097 ;	life.c:132: c = toupper(getchar());
      0002EB 12r00r05         [24] 1098 	lcall	_getchar
      0002EE 12r00r00         [24] 1099 	lcall	_toupper
      0002F1 AE 82            [24] 1100 	mov	r6,dpl
      0002F3 AF 83            [24] 1101 	mov	r7,dph
      0002F5 78r18            [12] 1102 	mov	r0,#_c
      0002F7 A6 06            [24] 1103 	mov	@r0,ar6
      0002F9 08               [12] 1104 	inc	r0
      0002FA A6 07            [24] 1105 	mov	@r0,ar7
                                   1106 ;	life.c:133: if (c == (int)'0') {
      0002FC BE 30 37         [24] 1107 	cjne	r6,#0x30,00149$
      0002FF BF 00 34         [24] 1108 	cjne	r7,#0x00,00149$
                                   1109 ;	life.c:134: u[A2D(W, y, x)] = 0;
      000302 78r14            [12] 1110 	mov	r0,#_y
      000304 86 04            [24] 1111 	mov	ar4,@r0
      000306 08               [12] 1112 	inc	r0
      000307 E6               [12] 1113 	mov	a,@r0
      000308 C4               [12] 1114 	swap	a
      000309 23               [12] 1115 	rl	a
      00030A 54 E0            [12] 1116 	anl	a,#0xe0
      00030C CC               [12] 1117 	xch	a,r4
      00030D C4               [12] 1118 	swap	a
      00030E 23               [12] 1119 	rl	a
      00030F CC               [12] 1120 	xch	a,r4
      000310 6C               [12] 1121 	xrl	a,r4
      000311 CC               [12] 1122 	xch	a,r4
      000312 54 E0            [12] 1123 	anl	a,#0xe0
      000314 CC               [12] 1124 	xch	a,r4
      000315 6C               [12] 1125 	xrl	a,r4
      000316 FD               [12] 1126 	mov	r5,a
      000317 78r12            [12] 1127 	mov	r0,#_x
      000319 E6               [12] 1128 	mov	a,@r0
      00031A 2C               [12] 1129 	add	a,r4
      00031B FC               [12] 1130 	mov	r4,a
      00031C 08               [12] 1131 	inc	r0
      00031D E6               [12] 1132 	mov	a,@r0
      00031E 3D               [12] 1133 	addc	a,r5
      00031F FD               [12] 1134 	mov	r5,a
      000320 EC               [12] 1135 	mov	a,r4
      000321 24r00            [12] 1136 	add	a,#_u
      000323 F5 82            [12] 1137 	mov	dpl,a
      000325 ED               [12] 1138 	mov	a,r5
      000326 34s08            [12] 1139 	addc	a,#(_u >> 8)
      000328 F5 83            [12] 1140 	mov	dph,a
      00032A E4               [12] 1141 	clr	a
      00032B F0               [24] 1142 	movx	@dptr,a
                                   1143 ;	life.c:135: j++;
      00032C 78r16            [12] 1144 	mov	r0,#_j
      00032E 06               [12] 1145 	inc	@r0
      00032F B6 00 02         [24] 1146 	cjne	@r0,#0x00,00443$
      000332 08               [12] 1147 	inc	r0
      000333 06               [12] 1148 	inc	@r0
      000334                       1149 00443$:
                                   1150 ;	life.c:136: break;
      000334 80 4E            [24] 1151 	sjmp	00154$
      000336                       1152 00149$:
                                   1153 ;	life.c:137: } else if (c == (int)'1') {
      000336 BE 31 38         [24] 1154 	cjne	r6,#0x31,00147$
      000339 BF 00 35         [24] 1155 	cjne	r7,#0x00,00147$
                                   1156 ;	life.c:138: u[A2D(W, y, x)] = 1;
      00033C 78r14            [12] 1157 	mov	r0,#_y
      00033E 86 04            [24] 1158 	mov	ar4,@r0
      000340 08               [12] 1159 	inc	r0
      000341 E6               [12] 1160 	mov	a,@r0
      000342 C4               [12] 1161 	swap	a
      000343 23               [12] 1162 	rl	a
      000344 54 E0            [12] 1163 	anl	a,#0xe0
      000346 CC               [12] 1164 	xch	a,r4
      000347 C4               [12] 1165 	swap	a
      000348 23               [12] 1166 	rl	a
      000349 CC               [12] 1167 	xch	a,r4
      00034A 6C               [12] 1168 	xrl	a,r4
      00034B CC               [12] 1169 	xch	a,r4
      00034C 54 E0            [12] 1170 	anl	a,#0xe0
      00034E CC               [12] 1171 	xch	a,r4
      00034F 6C               [12] 1172 	xrl	a,r4
      000350 FD               [12] 1173 	mov	r5,a
      000351 78r12            [12] 1174 	mov	r0,#_x
      000353 E6               [12] 1175 	mov	a,@r0
      000354 2C               [12] 1176 	add	a,r4
      000355 FC               [12] 1177 	mov	r4,a
      000356 08               [12] 1178 	inc	r0
      000357 E6               [12] 1179 	mov	a,@r0
      000358 3D               [12] 1180 	addc	a,r5
      000359 FD               [12] 1181 	mov	r5,a
      00035A EC               [12] 1182 	mov	a,r4
      00035B 24r00            [12] 1183 	add	a,#_u
      00035D F5 82            [12] 1184 	mov	dpl,a
      00035F ED               [12] 1185 	mov	a,r5
      000360 34s08            [12] 1186 	addc	a,#(_u >> 8)
      000362 F5 83            [12] 1187 	mov	dph,a
      000364 74 01            [12] 1188 	mov	a,#0x01
      000366 F0               [24] 1189 	movx	@dptr,a
                                   1190 ;	life.c:139: j++;
      000367 78r16            [12] 1191 	mov	r0,#_j
      000369 06               [12] 1192 	inc	@r0
      00036A B6 00 02         [24] 1193 	cjne	@r0,#0x00,00446$
      00036D 08               [12] 1194 	inc	r0
      00036E 06               [12] 1195 	inc	@r0
      00036F                       1196 00446$:
                                   1197 ;	life.c:140: break;
      00036F 80 13            [24] 1198 	sjmp	00154$
      000371                       1199 00147$:
                                   1200 ;	life.c:141: } else if (c == (int)'S') goto br_inner;
      000371 BE 53 05         [24] 1201 	cjne	r6,#0x53,00447$
      000374 BF 00 02         [24] 1202 	cjne	r7,#0x00,00447$
      000377 80 24            [24] 1203 	sjmp	00193$
      000379                       1204 00447$:
                                   1205 ;	life.c:142: else if (c == (int)'#') goto out;
      000379 BE 23 05         [24] 1206 	cjne	r6,#0x23,00448$
      00037C BF 00 02         [24] 1207 	cjne	r7,#0x00,00448$
      00037F 80 35            [24] 1208 	sjmp	00164$
      000381                       1209 00448$:
      000381 02r02rEB         [24] 1210 	ljmp	00151$
                                   1211 ;	life.c:146: break;
      000384                       1212 00154$:
                                   1213 ;	life.c:130: for (x = 0; x < W; x++) {
      000384 78r12            [12] 1214 	mov	r0,#_x
      000386 06               [12] 1215 	inc	@r0
      000387 B6 00 02         [24] 1216 	cjne	@r0,#0x00,00449$
      00038A 08               [12] 1217 	inc	r0
      00038B 06               [12] 1218 	inc	@r0
      00038C                       1219 00449$:
      00038C 78r12            [12] 1220 	mov	r0,#_x
      00038E C3               [12] 1221 	clr	c
      00038F E6               [12] 1222 	mov	a,@r0
      000390 94 20            [12] 1223 	subb	a,#0x20
      000392 08               [12] 1224 	inc	r0
      000393 E6               [12] 1225 	mov	a,@r0
      000394 64 80            [12] 1226 	xrl	a,#0x80
      000396 94 80            [12] 1227 	subb	a,#0x80
      000398 50 03            [24] 1228 	jnc	00450$
      00039A 02r02rEB         [24] 1229 	ljmp	00151$
      00039D                       1230 00450$:
      00039D                       1231 00193$:
                                   1232 ;	life.c:129: for (y = 0; y < H; y++) {
      00039D 78r14            [12] 1233 	mov	r0,#_y
      00039F 06               [12] 1234 	inc	@r0
      0003A0 B6 00 02         [24] 1235 	cjne	@r0,#0x00,00451$
      0003A3 08               [12] 1236 	inc	r0
      0003A4 06               [12] 1237 	inc	@r0
      0003A5                       1238 00451$:
      0003A5 78r14            [12] 1239 	mov	r0,#_y
      0003A7 C3               [12] 1240 	clr	c
      0003A8 E6               [12] 1241 	mov	a,@r0
      0003A9 94 40            [12] 1242 	subb	a,#0x40
      0003AB 08               [12] 1243 	inc	r0
      0003AC E6               [12] 1244 	mov	a,@r0
      0003AD 64 80            [12] 1245 	xrl	a,#0x80
      0003AF 94 80            [12] 1246 	subb	a,#0x80
      0003B1 50 03            [24] 1247 	jnc	00452$
      0003B3 02r02rE5         [24] 1248 	ljmp	00192$
      0003B6                       1249 00452$:
                                   1250 ;	life.c:150: out:
      0003B6                       1251 00164$:
                                   1252 ;	life.c:151: if (c != (int)'#')
      0003B6 BE 23 05         [24] 1253 	cjne	r6,#0x23,00453$
      0003B9 BF 00 02         [24] 1254 	cjne	r7,#0x00,00453$
      0003BC 80 14            [24] 1255 	sjmp	00163$
      0003BE                       1256 00453$:
                                   1257 ;	life.c:152: while (1) {
      0003BE                       1258 00160$:
                                   1259 ;	life.c:153: c = getchar();
      0003BE 12r00r05         [24] 1260 	lcall	_getchar
      0003C1 AE 82            [24] 1261 	mov	r6,dpl
      0003C3 AF 83            [24] 1262 	mov	r7,dph
      0003C5 78r18            [12] 1263 	mov	r0,#_c
      0003C7 A6 06            [24] 1264 	mov	@r0,ar6
      0003C9 08               [12] 1265 	inc	r0
      0003CA A6 07            [24] 1266 	mov	@r0,ar7
                                   1267 ;	life.c:154: if (c == (int)'#') break;
      0003CC BE 23 EF         [24] 1268 	cjne	r6,#0x23,00160$
      0003CF BF 00 EC         [24] 1269 	cjne	r7,#0x00,00160$
      0003D2                       1270 00163$:
                                   1271 ;	life.c:156: print16x(j);
      0003D2 78r16            [12] 1272 	mov	r0,#_j
      0003D4 86 06            [24] 1273 	mov	ar6,@r0
      0003D6 08               [12] 1274 	inc	r0
      0003D7 86 07            [24] 1275 	mov	ar7,@r0
      0003D9 8E 04            [24] 1276 	mov	ar4,r6
                                   1277 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      0003DB EF               [12] 1278 	mov	a,r7
      0003DC FD               [12] 1279 	mov	r5,a
      0003DD C4               [12] 1280 	swap	a
      0003DE 54 0F            [12] 1281 	anl	a,#0x0f
      0003E0 30 E3 02         [24] 1282 	jnb	acc.3,00456$
      0003E3 44 F0            [12] 1283 	orl	a,#0xf0
      0003E5                       1284 00456$:
      0003E5 FE               [12] 1285 	mov	r6,a
      0003E6 33               [12] 1286 	rlc	a
      0003E7 95 E0            [12] 1287 	subb	a,acc
      0003E9 53 06 0F         [24] 1288 	anl	ar6,#0x0f
      0003EC EE               [12] 1289 	mov	a,r6
      0003ED 24r00            [12] 1290 	add	a,#_digits
      0003EF F9               [12] 1291 	mov	r1,a
      0003F0 87 07            [24] 1292 	mov	ar7,@r1
      0003F2 7E 00            [12] 1293 	mov	r6,#0x00
      0003F4 8F 82            [24] 1294 	mov	dpl,r7
      0003F6 8E 83            [24] 1295 	mov	dph,r6
      0003F8 12r00r00         [24] 1296 	lcall	_putchar
                                   1297 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      0003FB 8D 07            [24] 1298 	mov	ar7,r5
      0003FD 53 07 0F         [24] 1299 	anl	ar7,#0x0f
      000400 EF               [12] 1300 	mov	a,r7
      000401 24r00            [12] 1301 	add	a,#_digits
      000403 F9               [12] 1302 	mov	r1,a
      000404 87 07            [24] 1303 	mov	ar7,@r1
      000406 7E 00            [12] 1304 	mov	r6,#0x00
      000408 8F 82            [24] 1305 	mov	dpl,r7
      00040A 8E 83            [24] 1306 	mov	dph,r6
      00040C 12r00r00         [24] 1307 	lcall	_putchar
                                   1308 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      00040F 8C 06            [24] 1309 	mov	ar6,r4
      000411 ED               [12] 1310 	mov	a,r5
      000412 C4               [12] 1311 	swap	a
      000413 CE               [12] 1312 	xch	a,r6
      000414 C4               [12] 1313 	swap	a
      000415 54 0F            [12] 1314 	anl	a,#0x0f
      000417 6E               [12] 1315 	xrl	a,r6
      000418 CE               [12] 1316 	xch	a,r6
      000419 54 0F            [12] 1317 	anl	a,#0x0f
      00041B CE               [12] 1318 	xch	a,r6
      00041C 6E               [12] 1319 	xrl	a,r6
      00041D CE               [12] 1320 	xch	a,r6
      00041E 30 E3 02         [24] 1321 	jnb	acc.3,00457$
      000421 44 F0            [12] 1322 	orl	a,#0xf0
      000423                       1323 00457$:
      000423 53 06 0F         [24] 1324 	anl	ar6,#0x0f
      000426 EE               [12] 1325 	mov	a,r6
      000427 24r00            [12] 1326 	add	a,#_digits
      000429 F9               [12] 1327 	mov	r1,a
      00042A 87 07            [24] 1328 	mov	ar7,@r1
      00042C 7E 00            [12] 1329 	mov	r6,#0x00
      00042E 8F 82            [24] 1330 	mov	dpl,r7
      000430 8E 83            [24] 1331 	mov	dph,r6
      000432 12r00r00         [24] 1332 	lcall	_putchar
                                   1333 ;	life.c:41: putchar(digits[a & 0xf]);
      000435 53 04 0F         [24] 1334 	anl	ar4,#0x0f
      000438 EC               [12] 1335 	mov	a,r4
      000439 24r00            [12] 1336 	add	a,#_digits
      00043B F9               [12] 1337 	mov	r1,a
      00043C 87 07            [24] 1338 	mov	ar7,@r1
      00043E 7E 00            [12] 1339 	mov	r6,#0x00
      000440 8F 82            [24] 1340 	mov	dpl,r7
      000442 8E 83            [24] 1341 	mov	dph,r6
      000444 12r00r00         [24] 1342 	lcall	_putchar
                                   1343 ;	life.c:157: printstr(">\r\n");
      000447 7Dr12            [12] 1344 	mov	r5,#___str_3
      000449 7Es00            [12] 1345 	mov	r6,#(___str_3 >> 8)
      00044B 7F 80            [12] 1346 	mov	r7,#0x80
                                   1347 ;	life.c:49: return;
      00044D                       1348 00195$:
                                   1349 ;	life.c:47: for (; *s; s++) putchar(*s);
      00044D 8D 82            [24] 1350 	mov	dpl,r5
      00044F 8E 83            [24] 1351 	mov	dph,r6
      000451 8F F0            [24] 1352 	mov	b,r7
      000453 12r00r00         [24] 1353 	lcall	__gptrget
      000456 FC               [12] 1354 	mov	r4,a
      000457 60 10            [24] 1355 	jz	00167$
      000459 7B 00            [12] 1356 	mov	r3,#0x00
      00045B 8C 82            [24] 1357 	mov	dpl,r4
      00045D 8B 83            [24] 1358 	mov	dph,r3
      00045F 12r00r00         [24] 1359 	lcall	_putchar
      000462 0D               [12] 1360 	inc	r5
                                   1361 ;	life.c:157: printstr(">\r\n");
      000463 BD 00 E7         [24] 1362 	cjne	r5,#0x00,00195$
      000466 0E               [12] 1363 	inc	r6
      000467 80 E4            [24] 1364 	sjmp	00195$
      000469                       1365 00167$:
                                   1366 ;	life.c:227: show(0);
      000469 75 82 00         [24] 1367 	mov	dpl,#0x00
      00046C 12r00r26         [24] 1368 	lcall	_show
                                   1369 ;	life.c:229: printstr("READY\r\n");
      00046F 7Dr29            [12] 1370 	mov	r5,#___str_5
      000471 7Es00            [12] 1371 	mov	r6,#(___str_5 >> 8)
      000473 7F 80            [12] 1372 	mov	r7,#0x80
                                   1373 ;	life.c:49: return;
      000475                       1374 00198$:
                                   1375 ;	life.c:47: for (; *s; s++) putchar(*s);
      000475 8D 82            [24] 1376 	mov	dpl,r5
      000477 8E 83            [24] 1377 	mov	dph,r6
      000479 8F F0            [24] 1378 	mov	b,r7
      00047B 12r00r00         [24] 1379 	lcall	__gptrget
      00047E FC               [12] 1380 	mov	r4,a
      00047F 60 10            [24] 1381 	jz	00121$
      000481 7B 00            [12] 1382 	mov	r3,#0x00
      000483 8C 82            [24] 1383 	mov	dpl,r4
      000485 8B 83            [24] 1384 	mov	dph,r3
      000487 12r00r00         [24] 1385 	lcall	_putchar
      00048A 0D               [12] 1386 	inc	r5
                                   1387 ;	life.c:230: while (1) {
      00048B BD 00 E7         [24] 1388 	cjne	r5,#0x00,00198$
      00048E 0E               [12] 1389 	inc	r6
      00048F 80 E4            [24] 1390 	sjmp	00198$
      000491                       1391 00121$:
                                   1392 ;	life.c:231: c = toupper(getchar());
      000491 12r00r05         [24] 1393 	lcall	_getchar
      000494 12r00r00         [24] 1394 	lcall	_toupper
      000497 AE 82            [24] 1395 	mov	r6,dpl
      000499 AF 83            [24] 1396 	mov	r7,dph
      00049B 78r18            [12] 1397 	mov	r0,#_c
      00049D A6 06            [24] 1398 	mov	@r0,ar6
      00049F 08               [12] 1399 	inc	r0
      0004A0 A6 07            [24] 1400 	mov	@r0,ar7
                                   1401 ;	life.c:232: if (i0 || (c == (int)'T')) goto terminate;
      0004A2 78r10            [12] 1402 	mov	r0,#_i0
      0004A4 E6               [12] 1403 	mov	a,@r0
      0004A5 60 03            [24] 1404 	jz	00462$
      0004A7 02r09rC4         [24] 1405 	ljmp	00133$
      0004AA                       1406 00462$:
      0004AA BE 54 06         [24] 1407 	cjne	r6,#0x54,00463$
      0004AD BF 00 03         [24] 1408 	cjne	r7,#0x00,00463$
      0004B0 02r09rC4         [24] 1409 	ljmp	00133$
      0004B3                       1410 00463$:
                                   1411 ;	life.c:233: else if (c == (int)'L') goto reload;
      0004B3 BE 4C 06         [24] 1412 	cjne	r6,#0x4c,00464$
      0004B6 BF 00 03         [24] 1413 	cjne	r7,#0x00,00464$
      0004B9 02r02r85         [24] 1414 	ljmp	00110$
      0004BC                       1415 00464$:
                                   1416 ;	life.c:234: else if (c == (int)'S') break;
      0004BC BE 53 D2         [24] 1417 	cjne	r6,#0x53,00121$
      0004BF BF 00 CF         [24] 1418 	cjne	r7,#0x00,00121$
                                   1419 ;	life.c:76: generation[0] = 0;
      0004C2 78r22            [12] 1420 	mov	r0,#_generation
      0004C4 76 00            [12] 1421 	mov	@r0,#0x00
      0004C6 08               [12] 1422 	inc	r0
      0004C7 76 00            [12] 1423 	mov	@r0,#0x00
                                   1424 ;	life.c:77: generation[1] = 0;
      0004C9 78r24            [12] 1425 	mov	r0,#(_generation + 0x0002)
      0004CB 76 00            [12] 1426 	mov	@r0,#0x00
      0004CD 08               [12] 1427 	inc	r0
      0004CE 76 00            [12] 1428 	mov	@r0,#0x00
                                   1429 ;	life.c:239: for (i1 = 0; !i0 && !i1; ) {
      0004D0 78r11            [12] 1430 	mov	r0,#_i1
      0004D2 76 00            [12] 1431 	mov	@r0,#0x00
      0004D4                       1432 00215$:
      0004D4 78r10            [12] 1433 	mov	r0,#_i0
      0004D6 E6               [12] 1434 	mov	a,@r0
      0004D7 60 03            [24] 1435 	jz	00467$
      0004D9 02r09r92         [24] 1436 	ljmp	00129$
      0004DC                       1437 00467$:
      0004DC 78r11            [12] 1438 	mov	r0,#_i1
      0004DE E6               [12] 1439 	mov	a,@r0
      0004DF 60 03            [24] 1440 	jz	00468$
      0004E1 02r09r92         [24] 1441 	ljmp	00129$
      0004E4                       1442 00468$:
                                   1443 ;	life.c:240: show(1);
      0004E4 75 82 01         [24] 1444 	mov	dpl,#0x01
      0004E7 12r00r26         [24] 1445 	lcall	_show
                                   1446 ;	life.c:165: fixed = 0;
      0004EA 78r1C            [12] 1447 	mov	r0,#_fixed
      0004EC 76 00            [12] 1448 	mov	@r0,#0x00
                                   1449 ;	life.c:166: cycle2 = 0;
      0004EE 78r1D            [12] 1450 	mov	r0,#_cycle2
      0004F0 76 00            [12] 1451 	mov	@r0,#0x00
                                   1452 ;	life.c:167: bstep = 0;
      0004F2 78r1A            [12] 1453 	mov	r0,#_bstep
      0004F4 76 00            [12] 1454 	mov	@r0,#0x00
                                   1455 ;	life.c:169: for (y = 0; y < H; y++) {
      0004F6 78r14            [12] 1456 	mov	r0,#_y
      0004F8 E4               [12] 1457 	clr	a
      0004F9 F6               [12] 1458 	mov	@r0,a
      0004FA 08               [12] 1459 	inc	r0
      0004FB F6               [12] 1460 	mov	@r0,a
      0004FC                       1461 00202$:
                                   1462 ;	life.c:170: putchar(busy[bstep]); putchar('\r');
      0004FC 78r1A            [12] 1463 	mov	r0,#_bstep
      0004FE E6               [12] 1464 	mov	a,@r0
      0004FF 24r26            [12] 1465 	add	a,#_busy
      000501 F9               [12] 1466 	mov	r1,a
      000502 87 07            [24] 1467 	mov	ar7,@r1
      000504 7E 00            [12] 1468 	mov	r6,#0x00
      000506 8F 82            [24] 1469 	mov	dpl,r7
      000508 8E 83            [24] 1470 	mov	dph,r6
      00050A 12r00r00         [24] 1471 	lcall	_putchar
      00050D 90 00 0D         [24] 1472 	mov	dptr,#0x000d
      000510 12r00r00         [24] 1473 	lcall	_putchar
                                   1474 ;	life.c:171: bstep = (bstep + 1) & 3;
      000513 78r1A            [12] 1475 	mov	r0,#_bstep
      000515 86 07            [24] 1476 	mov	ar7,@r0
      000517 0F               [12] 1477 	inc	r7
      000518 78r1A            [12] 1478 	mov	r0,#_bstep
      00051A 74 03            [12] 1479 	mov	a,#0x03
      00051C 5F               [12] 1480 	anl	a,r7
      00051D F6               [12] 1481 	mov	@r0,a
                                   1482 ;	life.c:172: for (x = 0; x < W; x++) {
      00051E 78r12            [12] 1483 	mov	r0,#_x
      000520 E4               [12] 1484 	clr	a
      000521 F6               [12] 1485 	mov	@r0,a
      000522 08               [12] 1486 	inc	r0
      000523 F6               [12] 1487 	mov	@r0,a
      000524                       1488 00200$:
                                   1489 ;	life.c:173: n = -u[A2D(W, y, x)];
      000524 78r14            [12] 1490 	mov	r0,#_y
      000526 E5*00            [12] 1491 	mov	a,_bp
      000528 24 03            [12] 1492 	add	a,#0x03
      00052A F9               [12] 1493 	mov	r1,a
      00052B E6               [12] 1494 	mov	a,@r0
      00052C F7               [12] 1495 	mov	@r1,a
      00052D 08               [12] 1496 	inc	r0
      00052E E6               [12] 1497 	mov	a,@r0
      00052F C4               [12] 1498 	swap	a
      000530 23               [12] 1499 	rl	a
      000531 54 E0            [12] 1500 	anl	a,#0xe0
      000533 C7               [12] 1501 	xch	a,@r1
      000534 C4               [12] 1502 	swap	a
      000535 23               [12] 1503 	rl	a
      000536 C7               [12] 1504 	xch	a,@r1
      000537 67               [12] 1505 	xrl	a,@r1
      000538 C7               [12] 1506 	xch	a,@r1
      000539 54 E0            [12] 1507 	anl	a,#0xe0
      00053B C7               [12] 1508 	xch	a,@r1
      00053C 67               [12] 1509 	xrl	a,@r1
      00053D 09               [12] 1510 	inc	r1
      00053E F7               [12] 1511 	mov	@r1,a
      00053F E5*00            [12] 1512 	mov	a,_bp
      000541 24 03            [12] 1513 	add	a,#0x03
      000543 F8               [12] 1514 	mov	r0,a
      000544 79r12            [12] 1515 	mov	r1,#_x
      000546 E7               [12] 1516 	mov	a,@r1
      000547 26               [12] 1517 	add	a,@r0
      000548 C0 E0            [24] 1518 	push	acc
      00054A 09               [12] 1519 	inc	r1
      00054B E7               [12] 1520 	mov	a,@r1
      00054C 08               [12] 1521 	inc	r0
      00054D 36               [12] 1522 	addc	a,@r0
      00054E C0 E0            [24] 1523 	push	acc
      000550 A8*00            [24] 1524 	mov	r0,_bp
      000552 08               [12] 1525 	inc	r0
      000553 08               [12] 1526 	inc	r0
      000554 D0 E0            [24] 1527 	pop	acc
      000556 F6               [12] 1528 	mov	@r0,a
      000557 18               [12] 1529 	dec	r0
      000558 D0 E0            [24] 1530 	pop	acc
      00055A F6               [12] 1531 	mov	@r0,a
      00055B A8*00            [24] 1532 	mov	r0,_bp
      00055D 08               [12] 1533 	inc	r0
      00055E E6               [12] 1534 	mov	a,@r0
      00055F 24r00            [12] 1535 	add	a,#_u
      000561 F5 82            [12] 1536 	mov	dpl,a
      000563 08               [12] 1537 	inc	r0
      000564 E6               [12] 1538 	mov	a,@r0
      000565 34s08            [12] 1539 	addc	a,#(_u >> 8)
      000567 F5 83            [12] 1540 	mov	dph,a
      000569 E0               [24] 1541 	movx	a,@dptr
      00056A FB               [12] 1542 	mov	r3,a
      00056B C3               [12] 1543 	clr	c
      00056C E4               [12] 1544 	clr	a
      00056D 9B               [12] 1545 	subb	a,r3
      00056E FB               [12] 1546 	mov	r3,a
                                   1547 ;	life.c:176: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00056F 78r14            [12] 1548 	mov	r0,#_y
      000571 74 FF            [12] 1549 	mov	a,#0xff
      000573 26               [12] 1550 	add	a,@r0
      000574 FA               [12] 1551 	mov	r2,a
      000575 74 FF            [12] 1552 	mov	a,#0xff
      000577 08               [12] 1553 	inc	r0
      000578 36               [12] 1554 	addc	a,@r0
      000579 FD               [12] 1555 	mov	r5,a
      00057A 74 40            [12] 1556 	mov	a,#0x40
      00057C 2A               [12] 1557 	add	a,r2
      00057D FA               [12] 1558 	mov	r2,a
      00057E E4               [12] 1559 	clr	a
      00057F 3D               [12] 1560 	addc	a,r5
      000580 FD               [12] 1561 	mov	r5,a
      000581 C0 03            [24] 1562 	push	ar3
      000583 74 40            [12] 1563 	mov	a,#0x40
      000585 C0 E0            [24] 1564 	push	acc
      000587 E4               [12] 1565 	clr	a
      000588 C0 E0            [24] 1566 	push	acc
      00058A 8A 82            [24] 1567 	mov	dpl,r2
      00058C 8D 83            [24] 1568 	mov	dph,r5
      00058E 12r00r00         [24] 1569 	lcall	__modsint
      000591 AC 82            [24] 1570 	mov	r4,dpl
      000593 AD 83            [24] 1571 	mov	r5,dph
      000595 15 81            [12] 1572 	dec	sp
      000597 15 81            [12] 1573 	dec	sp
      000599 D0 03            [24] 1574 	pop	ar3
      00059B ED               [12] 1575 	mov	a,r5
      00059C C4               [12] 1576 	swap	a
      00059D 23               [12] 1577 	rl	a
      00059E 54 E0            [12] 1578 	anl	a,#0xe0
      0005A0 CC               [12] 1579 	xch	a,r4
      0005A1 C4               [12] 1580 	swap	a
      0005A2 23               [12] 1581 	rl	a
      0005A3 CC               [12] 1582 	xch	a,r4
      0005A4 6C               [12] 1583 	xrl	a,r4
      0005A5 CC               [12] 1584 	xch	a,r4
      0005A6 54 E0            [12] 1585 	anl	a,#0xe0
      0005A8 CC               [12] 1586 	xch	a,r4
      0005A9 6C               [12] 1587 	xrl	a,r4
      0005AA FD               [12] 1588 	mov	r5,a
      0005AB 78r12            [12] 1589 	mov	r0,#_x
      0005AD 74 FF            [12] 1590 	mov	a,#0xff
      0005AF 26               [12] 1591 	add	a,@r0
      0005B0 FA               [12] 1592 	mov	r2,a
      0005B1 74 FF            [12] 1593 	mov	a,#0xff
      0005B3 08               [12] 1594 	inc	r0
      0005B4 36               [12] 1595 	addc	a,@r0
      0005B5 FF               [12] 1596 	mov	r7,a
      0005B6 74 20            [12] 1597 	mov	a,#0x20
      0005B8 2A               [12] 1598 	add	a,r2
      0005B9 FA               [12] 1599 	mov	r2,a
      0005BA E4               [12] 1600 	clr	a
      0005BB 3F               [12] 1601 	addc	a,r7
      0005BC FF               [12] 1602 	mov	r7,a
      0005BD C0 05            [24] 1603 	push	ar5
      0005BF C0 04            [24] 1604 	push	ar4
      0005C1 C0 03            [24] 1605 	push	ar3
      0005C3 74 20            [12] 1606 	mov	a,#0x20
      0005C5 C0 E0            [24] 1607 	push	acc
      0005C7 E4               [12] 1608 	clr	a
      0005C8 C0 E0            [24] 1609 	push	acc
      0005CA 8A 82            [24] 1610 	mov	dpl,r2
      0005CC 8F 83            [24] 1611 	mov	dph,r7
      0005CE 12r00r00         [24] 1612 	lcall	__modsint
      0005D1 C8               [12] 1613 	xch	a,r0
      0005D2 E5*00            [12] 1614 	mov	a,_bp
      0005D4 24 05            [12] 1615 	add	a,#0x05
      0005D6 C8               [12] 1616 	xch	a,r0
      0005D7 A6 82            [24] 1617 	mov	@r0,dpl
      0005D9 08               [12] 1618 	inc	r0
      0005DA A6 83            [24] 1619 	mov	@r0,dph
      0005DC 15 81            [12] 1620 	dec	sp
      0005DE 15 81            [12] 1621 	dec	sp
      0005E0 D0 03            [24] 1622 	pop	ar3
      0005E2 D0 04            [24] 1623 	pop	ar4
      0005E4 D0 05            [24] 1624 	pop	ar5
      0005E6 E5*00            [12] 1625 	mov	a,_bp
      0005E8 24 05            [12] 1626 	add	a,#0x05
      0005EA F8               [12] 1627 	mov	r0,a
      0005EB E6               [12] 1628 	mov	a,@r0
      0005EC 2C               [12] 1629 	add	a,r4
      0005ED FA               [12] 1630 	mov	r2,a
      0005EE 08               [12] 1631 	inc	r0
      0005EF E6               [12] 1632 	mov	a,@r0
      0005F0 3D               [12] 1633 	addc	a,r5
      0005F1 FF               [12] 1634 	mov	r7,a
      0005F2 EA               [12] 1635 	mov	a,r2
      0005F3 24r00            [12] 1636 	add	a,#_u
      0005F5 F5 82            [12] 1637 	mov	dpl,a
      0005F7 EF               [12] 1638 	mov	a,r7
      0005F8 34s08            [12] 1639 	addc	a,#(_u >> 8)
      0005FA F5 83            [12] 1640 	mov	dph,a
      0005FC E0               [24] 1641 	movx	a,@dptr
      0005FD 2B               [12] 1642 	add	a,r3
      0005FE FB               [12] 1643 	mov	r3,a
                                   1644 ;	life.c:178: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0005FF 78r12            [12] 1645 	mov	r0,#_x
      000601 E5*00            [12] 1646 	mov	a,_bp
      000603 24 07            [12] 1647 	add	a,#0x07
      000605 F9               [12] 1648 	mov	r1,a
      000606 E6               [12] 1649 	mov	a,@r0
      000607 F7               [12] 1650 	mov	@r1,a
      000608 08               [12] 1651 	inc	r0
      000609 09               [12] 1652 	inc	r1
      00060A E6               [12] 1653 	mov	a,@r0
      00060B F7               [12] 1654 	mov	@r1,a
      00060C E5*00            [12] 1655 	mov	a,_bp
      00060E 24 07            [12] 1656 	add	a,#0x07
      000610 F8               [12] 1657 	mov	r0,a
      000611 74 20            [12] 1658 	mov	a,#0x20
      000613 26               [12] 1659 	add	a,@r0
      000614 FA               [12] 1660 	mov	r2,a
      000615 E4               [12] 1661 	clr	a
      000616 08               [12] 1662 	inc	r0
      000617 36               [12] 1663 	addc	a,@r0
      000618 FF               [12] 1664 	mov	r7,a
      000619 C0 05            [24] 1665 	push	ar5
      00061B C0 04            [24] 1666 	push	ar4
      00061D C0 03            [24] 1667 	push	ar3
      00061F 74 20            [12] 1668 	mov	a,#0x20
      000621 C0 E0            [24] 1669 	push	acc
      000623 E4               [12] 1670 	clr	a
      000624 C0 E0            [24] 1671 	push	acc
      000626 8A 82            [24] 1672 	mov	dpl,r2
      000628 8F 83            [24] 1673 	mov	dph,r7
      00062A 12r00r00         [24] 1674 	lcall	__modsint
      00062D C8               [12] 1675 	xch	a,r0
      00062E E5*00            [12] 1676 	mov	a,_bp
      000630 24 09            [12] 1677 	add	a,#0x09
      000632 C8               [12] 1678 	xch	a,r0
      000633 A6 82            [24] 1679 	mov	@r0,dpl
      000635 08               [12] 1680 	inc	r0
      000636 A6 83            [24] 1681 	mov	@r0,dph
      000638 15 81            [12] 1682 	dec	sp
      00063A 15 81            [12] 1683 	dec	sp
      00063C D0 03            [24] 1684 	pop	ar3
      00063E D0 04            [24] 1685 	pop	ar4
      000640 D0 05            [24] 1686 	pop	ar5
      000642 E5*00            [12] 1687 	mov	a,_bp
      000644 24 09            [12] 1688 	add	a,#0x09
      000646 F8               [12] 1689 	mov	r0,a
      000647 E6               [12] 1690 	mov	a,@r0
      000648 2C               [12] 1691 	add	a,r4
      000649 FA               [12] 1692 	mov	r2,a
      00064A 08               [12] 1693 	inc	r0
      00064B E6               [12] 1694 	mov	a,@r0
      00064C 3D               [12] 1695 	addc	a,r5
      00064D FF               [12] 1696 	mov	r7,a
      00064E EA               [12] 1697 	mov	a,r2
      00064F 24r00            [12] 1698 	add	a,#_u
      000651 F5 82            [12] 1699 	mov	dpl,a
      000653 EF               [12] 1700 	mov	a,r7
      000654 34s08            [12] 1701 	addc	a,#(_u >> 8)
      000656 F5 83            [12] 1702 	mov	dph,a
      000658 E0               [24] 1703 	movx	a,@dptr
      000659 2B               [12] 1704 	add	a,r3
      00065A FB               [12] 1705 	mov	r3,a
                                   1706 ;	life.c:180: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00065B E5*00            [12] 1707 	mov	a,_bp
      00065D 24 07            [12] 1708 	add	a,#0x07
      00065F F8               [12] 1709 	mov	r0,a
      000660 74 21            [12] 1710 	mov	a,#0x21
      000662 26               [12] 1711 	add	a,@r0
      000663 FE               [12] 1712 	mov	r6,a
      000664 E4               [12] 1713 	clr	a
      000665 08               [12] 1714 	inc	r0
      000666 36               [12] 1715 	addc	a,@r0
      000667 FF               [12] 1716 	mov	r7,a
      000668 C0 05            [24] 1717 	push	ar5
      00066A C0 04            [24] 1718 	push	ar4
      00066C C0 03            [24] 1719 	push	ar3
      00066E 74 20            [12] 1720 	mov	a,#0x20
      000670 C0 E0            [24] 1721 	push	acc
      000672 E4               [12] 1722 	clr	a
      000673 C0 E0            [24] 1723 	push	acc
      000675 8E 82            [24] 1724 	mov	dpl,r6
      000677 8F 83            [24] 1725 	mov	dph,r7
      000679 12r00r00         [24] 1726 	lcall	__modsint
      00067C AE 82            [24] 1727 	mov	r6,dpl
      00067E AF 83            [24] 1728 	mov	r7,dph
      000680 15 81            [12] 1729 	dec	sp
      000682 15 81            [12] 1730 	dec	sp
      000684 D0 03            [24] 1731 	pop	ar3
      000686 D0 04            [24] 1732 	pop	ar4
      000688 D0 05            [24] 1733 	pop	ar5
      00068A EE               [12] 1734 	mov	a,r6
      00068B 2C               [12] 1735 	add	a,r4
      00068C FC               [12] 1736 	mov	r4,a
      00068D EF               [12] 1737 	mov	a,r7
      00068E 3D               [12] 1738 	addc	a,r5
      00068F FD               [12] 1739 	mov	r5,a
      000690 EC               [12] 1740 	mov	a,r4
      000691 24r00            [12] 1741 	add	a,#_u
      000693 F5 82            [12] 1742 	mov	dpl,a
      000695 ED               [12] 1743 	mov	a,r5
      000696 34s08            [12] 1744 	addc	a,#(_u >> 8)
      000698 F5 83            [12] 1745 	mov	dph,a
      00069A E0               [24] 1746 	movx	a,@dptr
      00069B 2B               [12] 1747 	add	a,r3
      00069C FB               [12] 1748 	mov	r3,a
                                   1749 ;	life.c:182: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00069D 78r14            [12] 1750 	mov	r0,#_y
      00069F E5*00            [12] 1751 	mov	a,_bp
      0006A1 24 0B            [12] 1752 	add	a,#0x0b
      0006A3 F9               [12] 1753 	mov	r1,a
      0006A4 E6               [12] 1754 	mov	a,@r0
      0006A5 F7               [12] 1755 	mov	@r1,a
      0006A6 08               [12] 1756 	inc	r0
      0006A7 09               [12] 1757 	inc	r1
      0006A8 E6               [12] 1758 	mov	a,@r0
      0006A9 F7               [12] 1759 	mov	@r1,a
      0006AA E5*00            [12] 1760 	mov	a,_bp
      0006AC 24 0B            [12] 1761 	add	a,#0x0b
      0006AE F8               [12] 1762 	mov	r0,a
      0006AF 74 40            [12] 1763 	mov	a,#0x40
      0006B1 26               [12] 1764 	add	a,@r0
      0006B2 FA               [12] 1765 	mov	r2,a
      0006B3 E4               [12] 1766 	clr	a
      0006B4 08               [12] 1767 	inc	r0
      0006B5 36               [12] 1768 	addc	a,@r0
      0006B6 FD               [12] 1769 	mov	r5,a
      0006B7 C0 07            [24] 1770 	push	ar7
      0006B9 C0 06            [24] 1771 	push	ar6
      0006BB C0 03            [24] 1772 	push	ar3
      0006BD 74 40            [12] 1773 	mov	a,#0x40
      0006BF C0 E0            [24] 1774 	push	acc
      0006C1 E4               [12] 1775 	clr	a
      0006C2 C0 E0            [24] 1776 	push	acc
      0006C4 8A 82            [24] 1777 	mov	dpl,r2
      0006C6 8D 83            [24] 1778 	mov	dph,r5
      0006C8 12r00r00         [24] 1779 	lcall	__modsint
      0006CB AC 82            [24] 1780 	mov	r4,dpl
      0006CD AD 83            [24] 1781 	mov	r5,dph
      0006CF 15 81            [12] 1782 	dec	sp
      0006D1 15 81            [12] 1783 	dec	sp
      0006D3 D0 03            [24] 1784 	pop	ar3
      0006D5 D0 06            [24] 1785 	pop	ar6
      0006D7 D0 07            [24] 1786 	pop	ar7
      0006D9 E5*00            [12] 1787 	mov	a,_bp
      0006DB 24 0D            [12] 1788 	add	a,#0x0d
      0006DD F8               [12] 1789 	mov	r0,a
      0006DE A6 04            [24] 1790 	mov	@r0,ar4
      0006E0 ED               [12] 1791 	mov	a,r5
      0006E1 C4               [12] 1792 	swap	a
      0006E2 23               [12] 1793 	rl	a
      0006E3 54 E0            [12] 1794 	anl	a,#0xe0
      0006E5 C6               [12] 1795 	xch	a,@r0
      0006E6 C4               [12] 1796 	swap	a
      0006E7 23               [12] 1797 	rl	a
      0006E8 C6               [12] 1798 	xch	a,@r0
      0006E9 66               [12] 1799 	xrl	a,@r0
      0006EA C6               [12] 1800 	xch	a,@r0
      0006EB 54 E0            [12] 1801 	anl	a,#0xe0
      0006ED C6               [12] 1802 	xch	a,@r0
      0006EE 66               [12] 1803 	xrl	a,@r0
      0006EF 08               [12] 1804 	inc	r0
      0006F0 F6               [12] 1805 	mov	@r0,a
      0006F1 E5*00            [12] 1806 	mov	a,_bp
      0006F3 24 0D            [12] 1807 	add	a,#0x0d
      0006F5 F8               [12] 1808 	mov	r0,a
      0006F6 E5*00            [12] 1809 	mov	a,_bp
      0006F8 24 05            [12] 1810 	add	a,#0x05
      0006FA F9               [12] 1811 	mov	r1,a
      0006FB E7               [12] 1812 	mov	a,@r1
      0006FC 26               [12] 1813 	add	a,@r0
      0006FD FA               [12] 1814 	mov	r2,a
      0006FE 09               [12] 1815 	inc	r1
      0006FF E7               [12] 1816 	mov	a,@r1
      000700 08               [12] 1817 	inc	r0
      000701 36               [12] 1818 	addc	a,@r0
      000702 FD               [12] 1819 	mov	r5,a
      000703 EA               [12] 1820 	mov	a,r2
      000704 24r00            [12] 1821 	add	a,#_u
      000706 F5 82            [12] 1822 	mov	dpl,a
      000708 ED               [12] 1823 	mov	a,r5
      000709 34s08            [12] 1824 	addc	a,#(_u >> 8)
      00070B F5 83            [12] 1825 	mov	dph,a
      00070D E0               [24] 1826 	movx	a,@dptr
      00070E 2B               [12] 1827 	add	a,r3
      00070F FB               [12] 1828 	mov	r3,a
                                   1829 ;	life.c:184: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000710 E5*00            [12] 1830 	mov	a,_bp
      000712 24 0D            [12] 1831 	add	a,#0x0d
      000714 F8               [12] 1832 	mov	r0,a
      000715 E5*00            [12] 1833 	mov	a,_bp
      000717 24 09            [12] 1834 	add	a,#0x09
      000719 F9               [12] 1835 	mov	r1,a
      00071A E7               [12] 1836 	mov	a,@r1
      00071B 26               [12] 1837 	add	a,@r0
      00071C FC               [12] 1838 	mov	r4,a
      00071D 09               [12] 1839 	inc	r1
      00071E E7               [12] 1840 	mov	a,@r1
      00071F 08               [12] 1841 	inc	r0
      000720 36               [12] 1842 	addc	a,@r0
      000721 FD               [12] 1843 	mov	r5,a
      000722 EC               [12] 1844 	mov	a,r4
      000723 24r00            [12] 1845 	add	a,#_u
      000725 F5 82            [12] 1846 	mov	dpl,a
      000727 ED               [12] 1847 	mov	a,r5
      000728 34s08            [12] 1848 	addc	a,#(_u >> 8)
      00072A F5 83            [12] 1849 	mov	dph,a
      00072C E0               [24] 1850 	movx	a,@dptr
      00072D 2B               [12] 1851 	add	a,r3
      00072E FB               [12] 1852 	mov	r3,a
                                   1853 ;	life.c:186: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00072F E5*00            [12] 1854 	mov	a,_bp
      000731 24 0D            [12] 1855 	add	a,#0x0d
      000733 F8               [12] 1856 	mov	r0,a
      000734 EE               [12] 1857 	mov	a,r6
      000735 26               [12] 1858 	add	a,@r0
      000736 FC               [12] 1859 	mov	r4,a
      000737 EF               [12] 1860 	mov	a,r7
      000738 08               [12] 1861 	inc	r0
      000739 36               [12] 1862 	addc	a,@r0
      00073A FD               [12] 1863 	mov	r5,a
      00073B EC               [12] 1864 	mov	a,r4
      00073C 24r00            [12] 1865 	add	a,#_u
      00073E F5 82            [12] 1866 	mov	dpl,a
      000740 ED               [12] 1867 	mov	a,r5
      000741 34s08            [12] 1868 	addc	a,#(_u >> 8)
      000743 F5 83            [12] 1869 	mov	dph,a
      000745 E0               [24] 1870 	movx	a,@dptr
      000746 2B               [12] 1871 	add	a,r3
      000747 FB               [12] 1872 	mov	r3,a
                                   1873 ;	life.c:188: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000748 E5*00            [12] 1874 	mov	a,_bp
      00074A 24 0B            [12] 1875 	add	a,#0x0b
      00074C F8               [12] 1876 	mov	r0,a
      00074D 74 41            [12] 1877 	mov	a,#0x41
      00074F 26               [12] 1878 	add	a,@r0
      000750 FC               [12] 1879 	mov	r4,a
      000751 E4               [12] 1880 	clr	a
      000752 08               [12] 1881 	inc	r0
      000753 36               [12] 1882 	addc	a,@r0
      000754 FD               [12] 1883 	mov	r5,a
      000755 C0 07            [24] 1884 	push	ar7
      000757 C0 06            [24] 1885 	push	ar6
      000759 C0 03            [24] 1886 	push	ar3
      00075B 74 40            [12] 1887 	mov	a,#0x40
      00075D C0 E0            [24] 1888 	push	acc
      00075F E4               [12] 1889 	clr	a
      000760 C0 E0            [24] 1890 	push	acc
      000762 8C 82            [24] 1891 	mov	dpl,r4
      000764 8D 83            [24] 1892 	mov	dph,r5
      000766 12r00r00         [24] 1893 	lcall	__modsint
      000769 AC 82            [24] 1894 	mov	r4,dpl
      00076B AD 83            [24] 1895 	mov	r5,dph
      00076D 15 81            [12] 1896 	dec	sp
      00076F 15 81            [12] 1897 	dec	sp
      000771 D0 03            [24] 1898 	pop	ar3
      000773 D0 06            [24] 1899 	pop	ar6
      000775 D0 07            [24] 1900 	pop	ar7
      000777 E5*00            [12] 1901 	mov	a,_bp
      000779 24 0D            [12] 1902 	add	a,#0x0d
      00077B F8               [12] 1903 	mov	r0,a
      00077C A6 04            [24] 1904 	mov	@r0,ar4
      00077E ED               [12] 1905 	mov	a,r5
      00077F C4               [12] 1906 	swap	a
      000780 23               [12] 1907 	rl	a
      000781 54 E0            [12] 1908 	anl	a,#0xe0
      000783 C6               [12] 1909 	xch	a,@r0
      000784 C4               [12] 1910 	swap	a
      000785 23               [12] 1911 	rl	a
      000786 C6               [12] 1912 	xch	a,@r0
      000787 66               [12] 1913 	xrl	a,@r0
      000788 C6               [12] 1914 	xch	a,@r0
      000789 54 E0            [12] 1915 	anl	a,#0xe0
      00078B C6               [12] 1916 	xch	a,@r0
      00078C 66               [12] 1917 	xrl	a,@r0
      00078D 08               [12] 1918 	inc	r0
      00078E F6               [12] 1919 	mov	@r0,a
      00078F E5*00            [12] 1920 	mov	a,_bp
      000791 24 0D            [12] 1921 	add	a,#0x0d
      000793 F8               [12] 1922 	mov	r0,a
      000794 E5*00            [12] 1923 	mov	a,_bp
      000796 24 05            [12] 1924 	add	a,#0x05
      000798 F9               [12] 1925 	mov	r1,a
      000799 E7               [12] 1926 	mov	a,@r1
      00079A 26               [12] 1927 	add	a,@r0
      00079B FA               [12] 1928 	mov	r2,a
      00079C 09               [12] 1929 	inc	r1
      00079D E7               [12] 1930 	mov	a,@r1
      00079E 08               [12] 1931 	inc	r0
      00079F 36               [12] 1932 	addc	a,@r0
      0007A0 FD               [12] 1933 	mov	r5,a
      0007A1 EA               [12] 1934 	mov	a,r2
      0007A2 24r00            [12] 1935 	add	a,#_u
      0007A4 F5 82            [12] 1936 	mov	dpl,a
      0007A6 ED               [12] 1937 	mov	a,r5
      0007A7 34s08            [12] 1938 	addc	a,#(_u >> 8)
      0007A9 F5 83            [12] 1939 	mov	dph,a
      0007AB E0               [24] 1940 	movx	a,@dptr
      0007AC 2B               [12] 1941 	add	a,r3
      0007AD FB               [12] 1942 	mov	r3,a
                                   1943 ;	life.c:190: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007AE E5*00            [12] 1944 	mov	a,_bp
      0007B0 24 0D            [12] 1945 	add	a,#0x0d
      0007B2 F8               [12] 1946 	mov	r0,a
      0007B3 E5*00            [12] 1947 	mov	a,_bp
      0007B5 24 09            [12] 1948 	add	a,#0x09
      0007B7 F9               [12] 1949 	mov	r1,a
      0007B8 E7               [12] 1950 	mov	a,@r1
      0007B9 26               [12] 1951 	add	a,@r0
      0007BA FC               [12] 1952 	mov	r4,a
      0007BB 09               [12] 1953 	inc	r1
      0007BC E7               [12] 1954 	mov	a,@r1
      0007BD 08               [12] 1955 	inc	r0
      0007BE 36               [12] 1956 	addc	a,@r0
      0007BF FD               [12] 1957 	mov	r5,a
      0007C0 EC               [12] 1958 	mov	a,r4
      0007C1 24r00            [12] 1959 	add	a,#_u
      0007C3 F5 82            [12] 1960 	mov	dpl,a
      0007C5 ED               [12] 1961 	mov	a,r5
      0007C6 34s08            [12] 1962 	addc	a,#(_u >> 8)
      0007C8 F5 83            [12] 1963 	mov	dph,a
      0007CA E0               [24] 1964 	movx	a,@dptr
      0007CB 2B               [12] 1965 	add	a,r3
      0007CC FB               [12] 1966 	mov	r3,a
                                   1967 ;	life.c:191: y1 = 1; x1 = 1;
      0007CD 78r20            [12] 1968 	mov	r0,#_y1
      0007CF 76 01            [12] 1969 	mov	@r0,#0x01
      0007D1 08               [12] 1970 	inc	r0
      0007D2 76 00            [12] 1971 	mov	@r0,#0x00
      0007D4 78r1E            [12] 1972 	mov	r0,#_x1
      0007D6 76 01            [12] 1973 	mov	@r0,#0x01
      0007D8 08               [12] 1974 	inc	r0
      0007D9 76 00            [12] 1975 	mov	@r0,#0x00
                                   1976 ;	life.c:192: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007DB E5*00            [12] 1977 	mov	a,_bp
      0007DD 24 0D            [12] 1978 	add	a,#0x0d
      0007DF F8               [12] 1979 	mov	r0,a
      0007E0 EE               [12] 1980 	mov	a,r6
      0007E1 26               [12] 1981 	add	a,@r0
      0007E2 FE               [12] 1982 	mov	r6,a
      0007E3 EF               [12] 1983 	mov	a,r7
      0007E4 08               [12] 1984 	inc	r0
      0007E5 36               [12] 1985 	addc	a,@r0
      0007E6 FF               [12] 1986 	mov	r7,a
      0007E7 EE               [12] 1987 	mov	a,r6
      0007E8 24r00            [12] 1988 	add	a,#_u
      0007EA F5 82            [12] 1989 	mov	dpl,a
      0007EC EF               [12] 1990 	mov	a,r7
      0007ED 34s08            [12] 1991 	addc	a,#(_u >> 8)
      0007EF F5 83            [12] 1992 	mov	dph,a
      0007F1 E0               [24] 1993 	movx	a,@dptr
      0007F2 2B               [12] 1994 	add	a,r3
      0007F3 FF               [12] 1995 	mov	r7,a
      0007F4 78r1B            [12] 1996 	mov	r0,#_n
      0007F6 A6 07            [24] 1997 	mov	@r0,ar7
                                   1998 ;	life.c:194: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007F8 A8*00            [24] 1999 	mov	r0,_bp
      0007FA 08               [12] 2000 	inc	r0
      0007FB E6               [12] 2001 	mov	a,@r0
      0007FC 24r00            [12] 2002 	add	a,#_nu
      0007FE FD               [12] 2003 	mov	r5,a
      0007FF 08               [12] 2004 	inc	r0
      000800 E6               [12] 2005 	mov	a,@r0
      000801 34s10            [12] 2006 	addc	a,#(_nu >> 8)
      000803 FE               [12] 2007 	mov	r6,a
      000804 BF 03 02         [24] 2008 	cjne	r7,#0x03,00469$
      000807 80 28            [24] 2009 	sjmp	00228$
      000809                       2010 00469$:
      000809 BF 02 21         [24] 2011 	cjne	r7,#0x02,00227$
      00080C E5*00            [12] 2012 	mov	a,_bp
      00080E 24 03            [12] 2013 	add	a,#0x03
      000810 F8               [12] 2014 	mov	r0,a
      000811 E5*00            [12] 2015 	mov	a,_bp
      000813 24 07            [12] 2016 	add	a,#0x07
      000815 F9               [12] 2017 	mov	r1,a
      000816 E7               [12] 2018 	mov	a,@r1
      000817 26               [12] 2019 	add	a,@r0
      000818 FC               [12] 2020 	mov	r4,a
      000819 09               [12] 2021 	inc	r1
      00081A E7               [12] 2022 	mov	a,@r1
      00081B 08               [12] 2023 	inc	r0
      00081C 36               [12] 2024 	addc	a,@r0
      00081D FF               [12] 2025 	mov	r7,a
      00081E EC               [12] 2026 	mov	a,r4
      00081F 24r00            [12] 2027 	add	a,#_u
      000821 FC               [12] 2028 	mov	r4,a
      000822 EF               [12] 2029 	mov	a,r7
      000823 34s08            [12] 2030 	addc	a,#(_u >> 8)
      000825 FF               [12] 2031 	mov	r7,a
      000826 8C 82            [24] 2032 	mov	dpl,r4
      000828 8F 83            [24] 2033 	mov	dph,r7
      00082A E0               [24] 2034 	movx	a,@dptr
      00082B 70 04            [24] 2035 	jnz	00228$
      00082D                       2036 00227$:
                                   2037 ;	assignBit
      00082D C2*00            [12] 2038 	clr	b0
      00082F 80 02            [24] 2039 	sjmp	00229$
      000831                       2040 00228$:
                                   2041 ;	assignBit
      000831 D2*00            [12] 2042 	setb	b0
      000833                       2043 00229$:
      000833 A2*00            [12] 2044 	mov	c,b0
      000835 E4               [12] 2045 	clr	a
      000836 33               [12] 2046 	rlc	a
      000837 8D 82            [24] 2047 	mov	dpl,r5
      000839 8E 83            [24] 2048 	mov	dph,r6
      00083B F0               [24] 2049 	movx	@dptr,a
                                   2050 ;	life.c:195: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00083C 78r14            [12] 2051 	mov	r0,#_y
      00083E 86 06            [24] 2052 	mov	ar6,@r0
      000840 08               [12] 2053 	inc	r0
      000841 E6               [12] 2054 	mov	a,@r0
      000842 C4               [12] 2055 	swap	a
      000843 23               [12] 2056 	rl	a
      000844 54 E0            [12] 2057 	anl	a,#0xe0
      000846 CE               [12] 2058 	xch	a,r6
      000847 C4               [12] 2059 	swap	a
      000848 23               [12] 2060 	rl	a
      000849 CE               [12] 2061 	xch	a,r6
      00084A 6E               [12] 2062 	xrl	a,r6
      00084B CE               [12] 2063 	xch	a,r6
      00084C 54 E0            [12] 2064 	anl	a,#0xe0
      00084E CE               [12] 2065 	xch	a,r6
      00084F 6E               [12] 2066 	xrl	a,r6
      000850 FF               [12] 2067 	mov	r7,a
      000851 78r12            [12] 2068 	mov	r0,#_x
      000853 E6               [12] 2069 	mov	a,@r0
      000854 2E               [12] 2070 	add	a,r6
      000855 FE               [12] 2071 	mov	r6,a
      000856 08               [12] 2072 	inc	r0
      000857 E6               [12] 2073 	mov	a,@r0
      000858 3F               [12] 2074 	addc	a,r7
      000859 FF               [12] 2075 	mov	r7,a
      00085A EE               [12] 2076 	mov	a,r6
      00085B 24r00            [12] 2077 	add	a,#_pu
      00085D F5 82            [12] 2078 	mov	dpl,a
      00085F EF               [12] 2079 	mov	a,r7
      000860 34s00            [12] 2080 	addc	a,#(_pu >> 8)
      000862 F5 83            [12] 2081 	mov	dph,a
      000864 E0               [24] 2082 	movx	a,@dptr
      000865 FD               [12] 2083 	mov	r5,a
      000866 EE               [12] 2084 	mov	a,r6
      000867 24r00            [12] 2085 	add	a,#_nu
      000869 F5 82            [12] 2086 	mov	dpl,a
      00086B EF               [12] 2087 	mov	a,r7
      00086C 34s10            [12] 2088 	addc	a,#(_nu >> 8)
      00086E F5 83            [12] 2089 	mov	dph,a
      000870 E0               [24] 2090 	movx	a,@dptr
      000871 FC               [12] 2091 	mov	r4,a
      000872 6D               [12] 2092 	xrl	a,r5
      000873 78r1D            [12] 2093 	mov	r0,#_cycle2
      000875 46               [12] 2094 	orl	a,@r0
      000876 F6               [12] 2095 	mov	@r0,a
                                   2096 ;	life.c:196: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000877 EE               [12] 2097 	mov	a,r6
      000878 24r00            [12] 2098 	add	a,#_u
      00087A F5 82            [12] 2099 	mov	dpl,a
      00087C EF               [12] 2100 	mov	a,r7
      00087D 34s08            [12] 2101 	addc	a,#(_u >> 8)
      00087F F5 83            [12] 2102 	mov	dph,a
      000881 E0               [24] 2103 	movx	a,@dptr
      000882 FF               [12] 2104 	mov	r7,a
      000883 EC               [12] 2105 	mov	a,r4
      000884 6F               [12] 2106 	xrl	a,r7
      000885 78r1C            [12] 2107 	mov	r0,#_fixed
      000887 46               [12] 2108 	orl	a,@r0
      000888 F6               [12] 2109 	mov	@r0,a
                                   2110 ;	life.c:172: for (x = 0; x < W; x++) {
      000889 78r12            [12] 2111 	mov	r0,#_x
      00088B 06               [12] 2112 	inc	@r0
      00088C B6 00 02         [24] 2113 	cjne	@r0,#0x00,00473$
      00088F 08               [12] 2114 	inc	r0
      000890 06               [12] 2115 	inc	@r0
      000891                       2116 00473$:
      000891 78r12            [12] 2117 	mov	r0,#_x
      000893 C3               [12] 2118 	clr	c
      000894 E6               [12] 2119 	mov	a,@r0
      000895 94 20            [12] 2120 	subb	a,#0x20
      000897 08               [12] 2121 	inc	r0
      000898 E6               [12] 2122 	mov	a,@r0
      000899 64 80            [12] 2123 	xrl	a,#0x80
      00089B 94 80            [12] 2124 	subb	a,#0x80
      00089D 50 03            [24] 2125 	jnc	00474$
      00089F 02r05r24         [24] 2126 	ljmp	00200$
      0008A2                       2127 00474$:
                                   2128 ;	life.c:169: for (y = 0; y < H; y++) {
      0008A2 78r14            [12] 2129 	mov	r0,#_y
      0008A4 06               [12] 2130 	inc	@r0
      0008A5 B6 00 02         [24] 2131 	cjne	@r0,#0x00,00475$
      0008A8 08               [12] 2132 	inc	r0
      0008A9 06               [12] 2133 	inc	@r0
      0008AA                       2134 00475$:
      0008AA 78r14            [12] 2135 	mov	r0,#_y
      0008AC C3               [12] 2136 	clr	c
      0008AD E6               [12] 2137 	mov	a,@r0
      0008AE 94 40            [12] 2138 	subb	a,#0x40
      0008B0 08               [12] 2139 	inc	r0
      0008B1 E6               [12] 2140 	mov	a,@r0
      0008B2 64 80            [12] 2141 	xrl	a,#0x80
      0008B4 94 80            [12] 2142 	subb	a,#0x80
      0008B6 50 03            [24] 2143 	jnc	00476$
      0008B8 02r04rFC         [24] 2144 	ljmp	00202$
      0008BB                       2145 00476$:
                                   2146 ;	life.c:200: cycle2 = !cycle2;
      0008BB 78r1D            [12] 2147 	mov	r0,#_cycle2
      0008BD E6               [12] 2148 	mov	a,@r0
      0008BE B4 01 00         [24] 2149 	cjne	a,#0x01,00477$
      0008C1                       2150 00477$:
      0008C1 92*00            [24] 2151 	mov	b0,c
      0008C3 78r1D            [12] 2152 	mov	r0,#_cycle2
      0008C5 E4               [12] 2153 	clr	a
      0008C6 33               [12] 2154 	rlc	a
      0008C7 F6               [12] 2155 	mov	@r0,a
                                   2156 ;	life.c:201: fixed = !fixed;
      0008C8 78r1C            [12] 2157 	mov	r0,#_fixed
      0008CA E6               [12] 2158 	mov	a,@r0
      0008CB B4 01 00         [24] 2159 	cjne	a,#0x01,00478$
      0008CE                       2160 00478$:
      0008CE 92*00            [24] 2161 	mov	b0,c
      0008D0 78r1C            [12] 2162 	mov	r0,#_fixed
      0008D2 E4               [12] 2163 	clr	a
      0008D3 33               [12] 2164 	rlc	a
      0008D4 F6               [12] 2165 	mov	@r0,a
                                   2166 ;	life.c:203: memcpy(pu, u, sizeof (u));
      0008D5 E4               [12] 2167 	clr	a
      0008D6 C0 E0            [24] 2168 	push	acc
      0008D8 74 08            [12] 2169 	mov	a,#0x08
      0008DA C0 E0            [24] 2170 	push	acc
      0008DC 74r00            [12] 2171 	mov	a,#_u
      0008DE C0 E0            [24] 2172 	push	acc
      0008E0 74s08            [12] 2173 	mov	a,#(_u >> 8)
      0008E2 C0 E0            [24] 2174 	push	acc
      0008E4 E4               [12] 2175 	clr	a
      0008E5 C0 E0            [24] 2176 	push	acc
      0008E7 90r00r00         [24] 2177 	mov	dptr,#_pu
      0008EA 75 F0 00         [24] 2178 	mov	b,#0x00
      0008ED 12r00r00         [24] 2179 	lcall	___memcpy
      0008F0 E5 81            [12] 2180 	mov	a,sp
      0008F2 24 FB            [12] 2181 	add	a,#0xfb
      0008F4 F5 81            [12] 2182 	mov	sp,a
                                   2183 ;	life.c:204: memcpy(u, nu, sizeof (nu));
      0008F6 E4               [12] 2184 	clr	a
      0008F7 C0 E0            [24] 2185 	push	acc
      0008F9 74 08            [12] 2186 	mov	a,#0x08
      0008FB C0 E0            [24] 2187 	push	acc
      0008FD 74r00            [12] 2188 	mov	a,#_nu
      0008FF C0 E0            [24] 2189 	push	acc
      000901 74s10            [12] 2190 	mov	a,#(_nu >> 8)
      000903 C0 E0            [24] 2191 	push	acc
      000905 E4               [12] 2192 	clr	a
      000906 C0 E0            [24] 2193 	push	acc
      000908 90r08r00         [24] 2194 	mov	dptr,#_u
      00090B 75 F0 00         [24] 2195 	mov	b,#0x00
      00090E 12r00r00         [24] 2196 	lcall	___memcpy
      000911 E5 81            [12] 2197 	mov	a,sp
      000913 24 FB            [12] 2198 	add	a,#0xfb
      000915 F5 81            [12] 2199 	mov	sp,a
                                   2200 ;	life.c:242: if (fixed || cycle2) {
      000917 78r1C            [12] 2201 	mov	r0,#_fixed
      000919 E6               [12] 2202 	mov	a,@r0
      00091A 70 08            [24] 2203 	jnz	00126$
      00091C 78r1D            [12] 2204 	mov	r0,#_cycle2
      00091E E6               [12] 2205 	mov	a,@r0
      00091F 70 03            [24] 2206 	jnz	00480$
      000921 02r04rD4         [24] 2207 	ljmp	00215$
      000924                       2208 00480$:
      000924                       2209 00126$:
                                   2210 ;	life.c:243: printstr("DONE ");
      000924 7Dr31            [12] 2211 	mov	r5,#___str_6
      000926 7Es00            [12] 2212 	mov	r6,#(___str_6 >> 8)
      000928 7F 80            [12] 2213 	mov	r7,#0x80
                                   2214 ;	life.c:49: return;
      00092A                       2215 00205$:
                                   2216 ;	life.c:47: for (; *s; s++) putchar(*s);
      00092A 8D 82            [24] 2217 	mov	dpl,r5
      00092C 8E 83            [24] 2218 	mov	dph,r6
      00092E 8F F0            [24] 2219 	mov	b,r7
      000930 12r00r00         [24] 2220 	lcall	__gptrget
      000933 FC               [12] 2221 	mov	r4,a
      000934 60 10            [24] 2222 	jz	00176$
      000936 7B 00            [12] 2223 	mov	r3,#0x00
      000938 8C 82            [24] 2224 	mov	dpl,r4
      00093A 8B 83            [24] 2225 	mov	dph,r3
      00093C 12r00r00         [24] 2226 	lcall	_putchar
      00093F 0D               [12] 2227 	inc	r5
                                   2228 ;	life.c:243: printstr("DONE ");
      000940 BD 00 E7         [24] 2229 	cjne	r5,#0x00,00205$
      000943 0E               [12] 2230 	inc	r6
      000944 80 E4            [24] 2231 	sjmp	00205$
      000946                       2232 00176$:
                                   2233 ;	life.c:244: if (fixed) printstr("FIXED\r\n");
      000946 78r1C            [12] 2234 	mov	r0,#_fixed
      000948 E6               [12] 2235 	mov	a,@r0
      000949 60 22            [24] 2236 	jz	00124$
      00094B 7Dr37            [12] 2237 	mov	r5,#___str_7
      00094D 7Es00            [12] 2238 	mov	r6,#(___str_7 >> 8)
      00094F 7F 80            [12] 2239 	mov	r7,#0x80
                                   2240 ;	life.c:49: return;
      000951                       2241 00208$:
                                   2242 ;	life.c:47: for (; *s; s++) putchar(*s);
      000951 8D 82            [24] 2243 	mov	dpl,r5
      000953 8E 83            [24] 2244 	mov	dph,r6
      000955 8F F0            [24] 2245 	mov	b,r7
      000957 12r00r00         [24] 2246 	lcall	__gptrget
      00095A FC               [12] 2247 	mov	r4,a
      00095B 60 32            [24] 2248 	jz	00125$
      00095D 7B 00            [12] 2249 	mov	r3,#0x00
      00095F 8C 82            [24] 2250 	mov	dpl,r4
      000961 8B 83            [24] 2251 	mov	dph,r3
      000963 12r00r00         [24] 2252 	lcall	_putchar
      000966 0D               [12] 2253 	inc	r5
                                   2254 ;	life.c:244: if (fixed) printstr("FIXED\r\n");
      000967 BD 00 E7         [24] 2255 	cjne	r5,#0x00,00208$
      00096A 0E               [12] 2256 	inc	r6
      00096B 80 E4            [24] 2257 	sjmp	00208$
      00096D                       2258 00124$:
                                   2259 ;	life.c:245: else printstr("CYCLE2\r\n");
      00096D 7Dr3F            [12] 2260 	mov	r5,#___str_8
      00096F 7Es00            [12] 2261 	mov	r6,#(___str_8 >> 8)
      000971 7F 80            [12] 2262 	mov	r7,#0x80
                                   2263 ;	life.c:49: return;
      000973                       2264 00211$:
                                   2265 ;	life.c:47: for (; *s; s++) putchar(*s);
      000973 8D 82            [24] 2266 	mov	dpl,r5
      000975 8E 83            [24] 2267 	mov	dph,r6
      000977 8F F0            [24] 2268 	mov	b,r7
      000979 12r00r00         [24] 2269 	lcall	__gptrget
      00097C FC               [12] 2270 	mov	r4,a
      00097D 60 10            [24] 2271 	jz	00125$
      00097F 7B 00            [12] 2272 	mov	r3,#0x00
      000981 8C 82            [24] 2273 	mov	dpl,r4
      000983 8B 83            [24] 2274 	mov	dph,r3
      000985 12r00r00         [24] 2275 	lcall	_putchar
      000988 0D               [12] 2276 	inc	r5
                                   2277 ;	life.c:245: else printstr("CYCLE2\r\n");
      000989 BD 00 E7         [24] 2278 	cjne	r5,#0x00,00211$
      00098C 0E               [12] 2279 	inc	r6
      00098D 80 E4            [24] 2280 	sjmp	00211$
      00098F                       2281 00125$:
                                   2282 ;	life.c:246: (void)getchar();
      00098F 12r00r05         [24] 2283 	lcall	_getchar
                                   2284 ;	life.c:247: break;
      000992                       2285 00129$:
                                   2286 ;	life.c:251: if (i1) {
      000992 78r11            [12] 2287 	mov	r0,#_i1
      000994 E6               [12] 2288 	mov	a,@r0
      000995 60 25            [24] 2289 	jz	00221$
                                   2290 ;	life.c:252: printstr("BREAK\r\n");
      000997 7Dr48            [12] 2291 	mov	r5,#___str_9
      000999 7Es00            [12] 2292 	mov	r6,#(___str_9 >> 8)
      00099B 7F 80            [12] 2293 	mov	r7,#0x80
                                   2294 ;	life.c:49: return;
      00099D                       2295 00218$:
                                   2296 ;	life.c:47: for (; *s; s++) putchar(*s);
      00099D 8D 82            [24] 2297 	mov	dpl,r5
      00099F 8E 83            [24] 2298 	mov	dph,r6
      0009A1 8F F0            [24] 2299 	mov	b,r7
      0009A3 12r00r00         [24] 2300 	lcall	__gptrget
      0009A6 FC               [12] 2301 	mov	r4,a
      0009A7 60 10            [24] 2302 	jz	00182$
      0009A9 7B 00            [12] 2303 	mov	r3,#0x00
      0009AB 8C 82            [24] 2304 	mov	dpl,r4
      0009AD 8B 83            [24] 2305 	mov	dph,r3
      0009AF 12r00r00         [24] 2306 	lcall	_putchar
      0009B2 0D               [12] 2307 	inc	r5
                                   2308 ;	life.c:252: printstr("BREAK\r\n");
      0009B3 BD 00 E7         [24] 2309 	cjne	r5,#0x00,00218$
      0009B6 0E               [12] 2310 	inc	r6
      0009B7 80 E4            [24] 2311 	sjmp	00218$
      0009B9                       2312 00182$:
                                   2313 ;	life.c:253: (void)getchar();
      0009B9 12r00r05         [24] 2314 	lcall	_getchar
      0009BC                       2315 00221$:
                                   2316 ;	life.c:216: for (i0 = 0; !i0; ) {		
      0009BC 78r10            [12] 2317 	mov	r0,#_i0
      0009BE E6               [12] 2318 	mov	a,@r0
      0009BF 70 03            [24] 2319 	jnz	00491$
      0009C1 02r02r3B         [24] 2320 	ljmp	00220$
      0009C4                       2321 00491$:
                                   2322 ;	life.c:257: terminate:
      0009C4                       2323 00133$:
                                   2324 ;	life.c:258: EA = 0;
                                   2325 ;	assignBit
      0009C4 C2 AF            [12] 2326 	clr	_EA
                                   2327 ;	life.c:259: printstr("TERM\r\n");
      0009C6 7Dr50            [12] 2328 	mov	r5,#___str_10
      0009C8 7Es00            [12] 2329 	mov	r6,#(___str_10 >> 8)
      0009CA 7F 80            [12] 2330 	mov	r7,#0x80
                                   2331 ;	life.c:49: return;
      0009CC                       2332 00223$:
                                   2333 ;	life.c:47: for (; *s; s++) putchar(*s);
      0009CC 8D 82            [24] 2334 	mov	dpl,r5
      0009CE 8E 83            [24] 2335 	mov	dph,r6
      0009D0 8F F0            [24] 2336 	mov	b,r7
      0009D2 12r00r00         [24] 2337 	lcall	__gptrget
      0009D5 FC               [12] 2338 	mov	r4,a
      0009D6 60 10            [24] 2339 	jz	00184$
      0009D8 7B 00            [12] 2340 	mov	r3,#0x00
      0009DA 8C 82            [24] 2341 	mov	dpl,r4
      0009DC 8B 83            [24] 2342 	mov	dph,r3
      0009DE 12r00r00         [24] 2343 	lcall	_putchar
      0009E1 0D               [12] 2344 	inc	r5
                                   2345 ;	life.c:259: printstr("TERM\r\n");
      0009E2 BD 00 E7         [24] 2346 	cjne	r5,#0x00,00223$
      0009E5 0E               [12] 2347 	inc	r6
      0009E6 80 E4            [24] 2348 	sjmp	00223$
      0009E8                       2349 00184$:
                                   2350 ;	life.c:260: (void)getchar();
      0009E8 12r00r05         [24] 2351 	lcall	_getchar
                                   2352 ;	life.c:264: __endasm;
      0009EB 02 00 00         [24] 2353 	ljmp	0
                                   2354 ;	life.c:265: }
      0009EE 85*00 81         [24] 2355 	mov	sp,_bp
      0009F1 D0*00            [24] 2356 	pop	_bp
      0009F3 22               [24] 2357 	ret
                                   2358 	.area CSEG    (CODE)
                                   2359 	.area CONST   (CODE)
                                   2360 	.area CONST   (CODE)
      000000                       2361 ___str_0:
      000000 1B                    2362 	.db 0x1b
      000001 5B 32 4A              2363 	.ascii "[2J"
      000004 1B                    2364 	.db 0x1b
      000005 5B 6D                 2365 	.ascii "[m"
      000007 00                    2366 	.db 0x00
                                   2367 	.area CSEG    (CODE)
                                   2368 	.area CONST   (CODE)
      000008                       2369 ___str_1:
      000008 0D                    2370 	.db 0x0d
      000009 0A                    2371 	.db 0x0a
      00000A 00                    2372 	.db 0x00
                                   2373 	.area CSEG    (CODE)
                                   2374 	.area CONST   (CODE)
      00000B                       2375 ___str_2:
      00000B 4C 4F 41 44 20 3C     2376 	.ascii "LOAD <"
      000011 00                    2377 	.db 0x00
                                   2378 	.area CSEG    (CODE)
                                   2379 	.area CONST   (CODE)
      000012                       2380 ___str_3:
      000012 3E                    2381 	.ascii ">"
      000013 0D                    2382 	.db 0x0d
      000014 0A                    2383 	.db 0x0a
      000015 00                    2384 	.db 0x00
                                   2385 	.area CSEG    (CODE)
                                   2386 	.area CONST   (CODE)
      000016                       2387 ___str_4:
      000016 1B                    2388 	.db 0x1b
      000017 5B 32 4A              2389 	.ascii "[2J"
      00001A 1B                    2390 	.db 0x1b
      00001B 5B 6D 4C 49 46 45 20  2391 	.ascii "[mLIFE INIT"
             49 4E 49 54
      000026 0D                    2392 	.db 0x0d
      000027 0A                    2393 	.db 0x0a
      000028 00                    2394 	.db 0x00
                                   2395 	.area CSEG    (CODE)
                                   2396 	.area CONST   (CODE)
      000029                       2397 ___str_5:
      000029 52 45 41 44 59        2398 	.ascii "READY"
      00002E 0D                    2399 	.db 0x0d
      00002F 0A                    2400 	.db 0x0a
      000030 00                    2401 	.db 0x00
                                   2402 	.area CSEG    (CODE)
                                   2403 	.area CONST   (CODE)
      000031                       2404 ___str_6:
      000031 44 4F 4E 45 20        2405 	.ascii "DONE "
      000036 00                    2406 	.db 0x00
                                   2407 	.area CSEG    (CODE)
                                   2408 	.area CONST   (CODE)
      000037                       2409 ___str_7:
      000037 46 49 58 45 44        2410 	.ascii "FIXED"
      00003C 0D                    2411 	.db 0x0d
      00003D 0A                    2412 	.db 0x0a
      00003E 00                    2413 	.db 0x00
                                   2414 	.area CSEG    (CODE)
                                   2415 	.area CONST   (CODE)
      00003F                       2416 ___str_8:
      00003F 43 59 43 4C 45 32     2417 	.ascii "CYCLE2"
      000045 0D                    2418 	.db 0x0d
      000046 0A                    2419 	.db 0x0a
      000047 00                    2420 	.db 0x00
                                   2421 	.area CSEG    (CODE)
                                   2422 	.area CONST   (CODE)
      000048                       2423 ___str_9:
      000048 42 52 45 41 4B        2424 	.ascii "BREAK"
      00004D 0D                    2425 	.db 0x0d
      00004E 0A                    2426 	.db 0x0a
      00004F 00                    2427 	.db 0x00
                                   2428 	.area CSEG    (CODE)
                                   2429 	.area CONST   (CODE)
      000050                       2430 ___str_10:
      000050 54 45 52 4D           2431 	.ascii "TERM"
      000054 0D                    2432 	.db 0x0d
      000055 0A                    2433 	.db 0x0a
      000056 00                    2434 	.db 0x00
                                   2435 	.area CSEG    (CODE)
                                   2436 	.area XINIT   (CODE)
                                   2437 	.area CABS    (ABS,CODE)
