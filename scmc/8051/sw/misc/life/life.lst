                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int1
                                     13 	.globl _int0
                                     14 	.globl _printf
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _FL
                                     22 	.globl _P
                                     23 	.globl _TF2
                                     24 	.globl _EXF2
                                     25 	.globl _RCLK
                                     26 	.globl _TCLK
                                     27 	.globl _EXEN2
                                     28 	.globl _TR2
                                     29 	.globl _C_T2
                                     30 	.globl _CP_RL2
                                     31 	.globl _T2CON_7
                                     32 	.globl _T2CON_6
                                     33 	.globl _T2CON_5
                                     34 	.globl _T2CON_4
                                     35 	.globl _T2CON_3
                                     36 	.globl _T2CON_2
                                     37 	.globl _T2CON_1
                                     38 	.globl _T2CON_0
                                     39 	.globl _PT2
                                     40 	.globl _PS
                                     41 	.globl _PT1
                                     42 	.globl _PX1
                                     43 	.globl _PT0
                                     44 	.globl _PX0
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _EA
                                     62 	.globl _ET2
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _T2EX
                                     85 	.globl _T2
                                     86 	.globl _P1_7
                                     87 	.globl _P1_6
                                     88 	.globl _P1_5
                                     89 	.globl _P1_4
                                     90 	.globl _P1_3
                                     91 	.globl _P1_2
                                     92 	.globl _P1_1
                                     93 	.globl _P1_0
                                     94 	.globl _TF1
                                     95 	.globl _TR1
                                     96 	.globl _TF0
                                     97 	.globl _TR0
                                     98 	.globl _IE1
                                     99 	.globl _IT1
                                    100 	.globl _IE0
                                    101 	.globl _IT0
                                    102 	.globl _P0_7
                                    103 	.globl _P0_6
                                    104 	.globl _P0_5
                                    105 	.globl _P0_4
                                    106 	.globl _P0_3
                                    107 	.globl _P0_2
                                    108 	.globl _P0_1
                                    109 	.globl _P0_0
                                    110 	.globl _B
                                    111 	.globl _A
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _TH2
                                    115 	.globl _TL2
                                    116 	.globl _RCAP2H
                                    117 	.globl _RCAP2L
                                    118 	.globl _T2MOD
                                    119 	.globl _T2CON
                                    120 	.globl _IP
                                    121 	.globl _P3
                                    122 	.globl _IE
                                    123 	.globl _P2
                                    124 	.globl _SBUF
                                    125 	.globl _SCON
                                    126 	.globl _P1
                                    127 	.globl _TH1
                                    128 	.globl _TH0
                                    129 	.globl _TL1
                                    130 	.globl _TL0
                                    131 	.globl _TMOD
                                    132 	.globl _TCON
                                    133 	.globl _PCON
                                    134 	.globl _DPH
                                    135 	.globl _DPL
                                    136 	.globl _SP
                                    137 	.globl _P0
                                    138 	.globl _c
                                    139 	.globl _cycle2
                                    140 	.globl _fixed
                                    141 	.globl _j
                                    142 	.globl _generation
                                    143 	.globl _n
                                    144 	.globl _y1
                                    145 	.globl _x1
                                    146 	.globl _y
                                    147 	.globl _x
                                    148 	.globl _nu
                                    149 	.globl _u
                                    150 	.globl _pu
                                    151 	.globl _i1
                                    152 	.globl _i0
                                    153 	.globl _putchar
                                    154 	.globl _getchar
                                    155 ;--------------------------------------------------------
                                    156 ; special function registers
                                    157 ;--------------------------------------------------------
                                    158 	.area RSEG    (ABS,DATA)
      000000                        159 	.org 0x0000
                           000080   160 _P0	=	0x0080
                           000081   161 _SP	=	0x0081
                           000082   162 _DPL	=	0x0082
                           000083   163 _DPH	=	0x0083
                           000087   164 _PCON	=	0x0087
                           000088   165 _TCON	=	0x0088
                           000089   166 _TMOD	=	0x0089
                           00008A   167 _TL0	=	0x008a
                           00008B   168 _TL1	=	0x008b
                           00008C   169 _TH0	=	0x008c
                           00008D   170 _TH1	=	0x008d
                           000090   171 _P1	=	0x0090
                           000098   172 _SCON	=	0x0098
                           000099   173 _SBUF	=	0x0099
                           0000A0   174 _P2	=	0x00a0
                           0000A8   175 _IE	=	0x00a8
                           0000B0   176 _P3	=	0x00b0
                           0000B8   177 _IP	=	0x00b8
                           0000C8   178 _T2CON	=	0x00c8
                           0000C9   179 _T2MOD	=	0x00c9
                           0000CA   180 _RCAP2L	=	0x00ca
                           0000CB   181 _RCAP2H	=	0x00cb
                           0000CC   182 _TL2	=	0x00cc
                           0000CD   183 _TH2	=	0x00cd
                           0000D0   184 _PSW	=	0x00d0
                           0000E0   185 _ACC	=	0x00e0
                           0000E0   186 _A	=	0x00e0
                           0000F0   187 _B	=	0x00f0
                                    188 ;--------------------------------------------------------
                                    189 ; special function bits
                                    190 ;--------------------------------------------------------
                                    191 	.area RSEG    (ABS,DATA)
      000000                        192 	.org 0x0000
                           000080   193 _P0_0	=	0x0080
                           000081   194 _P0_1	=	0x0081
                           000082   195 _P0_2	=	0x0082
                           000083   196 _P0_3	=	0x0083
                           000084   197 _P0_4	=	0x0084
                           000085   198 _P0_5	=	0x0085
                           000086   199 _P0_6	=	0x0086
                           000087   200 _P0_7	=	0x0087
                           000088   201 _IT0	=	0x0088
                           000089   202 _IE0	=	0x0089
                           00008A   203 _IT1	=	0x008a
                           00008B   204 _IE1	=	0x008b
                           00008C   205 _TR0	=	0x008c
                           00008D   206 _TF0	=	0x008d
                           00008E   207 _TR1	=	0x008e
                           00008F   208 _TF1	=	0x008f
                           000090   209 _P1_0	=	0x0090
                           000091   210 _P1_1	=	0x0091
                           000092   211 _P1_2	=	0x0092
                           000093   212 _P1_3	=	0x0093
                           000094   213 _P1_4	=	0x0094
                           000095   214 _P1_5	=	0x0095
                           000096   215 _P1_6	=	0x0096
                           000097   216 _P1_7	=	0x0097
                           000090   217 _T2	=	0x0090
                           000091   218 _T2EX	=	0x0091
                           000098   219 _RI	=	0x0098
                           000099   220 _TI	=	0x0099
                           00009A   221 _RB8	=	0x009a
                           00009B   222 _TB8	=	0x009b
                           00009C   223 _REN	=	0x009c
                           00009D   224 _SM2	=	0x009d
                           00009E   225 _SM1	=	0x009e
                           00009F   226 _SM0	=	0x009f
                           0000A0   227 _P2_0	=	0x00a0
                           0000A1   228 _P2_1	=	0x00a1
                           0000A2   229 _P2_2	=	0x00a2
                           0000A3   230 _P2_3	=	0x00a3
                           0000A4   231 _P2_4	=	0x00a4
                           0000A5   232 _P2_5	=	0x00a5
                           0000A6   233 _P2_6	=	0x00a6
                           0000A7   234 _P2_7	=	0x00a7
                           0000A8   235 _EX0	=	0x00a8
                           0000A9   236 _ET0	=	0x00a9
                           0000AA   237 _EX1	=	0x00aa
                           0000AB   238 _ET1	=	0x00ab
                           0000AC   239 _ES	=	0x00ac
                           0000AD   240 _ET2	=	0x00ad
                           0000AF   241 _EA	=	0x00af
                           0000B0   242 _P3_0	=	0x00b0
                           0000B1   243 _P3_1	=	0x00b1
                           0000B2   244 _P3_2	=	0x00b2
                           0000B3   245 _P3_3	=	0x00b3
                           0000B4   246 _P3_4	=	0x00b4
                           0000B5   247 _P3_5	=	0x00b5
                           0000B6   248 _P3_6	=	0x00b6
                           0000B7   249 _P3_7	=	0x00b7
                           0000B0   250 _RXD	=	0x00b0
                           0000B1   251 _TXD	=	0x00b1
                           0000B2   252 _INT0	=	0x00b2
                           0000B3   253 _INT1	=	0x00b3
                           0000B4   254 _T0	=	0x00b4
                           0000B5   255 _T1	=	0x00b5
                           0000B6   256 _WR	=	0x00b6
                           0000B7   257 _RD	=	0x00b7
                           0000B8   258 _PX0	=	0x00b8
                           0000B9   259 _PT0	=	0x00b9
                           0000BA   260 _PX1	=	0x00ba
                           0000BB   261 _PT1	=	0x00bb
                           0000BC   262 _PS	=	0x00bc
                           0000BD   263 _PT2	=	0x00bd
                           0000C8   264 _T2CON_0	=	0x00c8
                           0000C9   265 _T2CON_1	=	0x00c9
                           0000CA   266 _T2CON_2	=	0x00ca
                           0000CB   267 _T2CON_3	=	0x00cb
                           0000CC   268 _T2CON_4	=	0x00cc
                           0000CD   269 _T2CON_5	=	0x00cd
                           0000CE   270 _T2CON_6	=	0x00ce
                           0000CF   271 _T2CON_7	=	0x00cf
                           0000C8   272 _CP_RL2	=	0x00c8
                           0000C9   273 _C_T2	=	0x00c9
                           0000CA   274 _TR2	=	0x00ca
                           0000CB   275 _EXEN2	=	0x00cb
                           0000CC   276 _TCLK	=	0x00cc
                           0000CD   277 _RCLK	=	0x00cd
                           0000CE   278 _EXF2	=	0x00ce
                           0000CF   279 _TF2	=	0x00cf
                           0000D0   280 _P	=	0x00d0
                           0000D1   281 _FL	=	0x00d1
                           0000D2   282 _OV	=	0x00d2
                           0000D3   283 _RS0	=	0x00d3
                           0000D4   284 _RS1	=	0x00d4
                           0000D5   285 _F0	=	0x00d5
                           0000D6   286 _AC	=	0x00d6
                           0000D7   287 _CY	=	0x00d7
                                    288 ;--------------------------------------------------------
                                    289 ; overlayable register banks
                                    290 ;--------------------------------------------------------
                                    291 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        292 	.ds 8
                                    293 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        294 	.ds 8
                                    295 ;--------------------------------------------------------
                                    296 ; overlayable bit register bank
                                    297 ;--------------------------------------------------------
                                    298 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        299 bits:
      000000                        300 	.ds 1
                           008000   301 	b0 = bits[0]
                           008100   302 	b1 = bits[1]
                           008200   303 	b2 = bits[2]
                           008300   304 	b3 = bits[3]
                           008400   305 	b4 = bits[4]
                           008500   306 	b5 = bits[5]
                           008600   307 	b6 = bits[6]
                           008700   308 	b7 = bits[7]
                                    309 ;--------------------------------------------------------
                                    310 ; internal ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area DSEG    (DATA)
                                    313 ;--------------------------------------------------------
                                    314 ; overlayable items in internal ram 
                                    315 ;--------------------------------------------------------
                                    316 ;--------------------------------------------------------
                                    317 ; Stack segment in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 	.area	SSEG
      000000                        320 __start__stack:
      000000                        321 	.ds	1
                                    322 
                                    323 ;--------------------------------------------------------
                                    324 ; indirectly addressable internal ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area ISEG    (DATA)
                                    327 ;--------------------------------------------------------
                                    328 ; absolute internal ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area IABS    (ABS,DATA)
                                    331 	.area IABS    (ABS,DATA)
                                    332 ;--------------------------------------------------------
                                    333 ; bit data
                                    334 ;--------------------------------------------------------
                                    335 	.area BSEG    (BIT)
                                    336 ;--------------------------------------------------------
                                    337 ; paged external ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area PSEG    (PAG,XDATA)
                                    340 ;--------------------------------------------------------
                                    341 ; external ram data
                                    342 ;--------------------------------------------------------
                                    343 	.area XSEG    (XDATA)
      000000                        344 _i0::
      000000                        345 	.ds 2
      000002                        346 _i1::
      000002                        347 	.ds 2
      000004                        348 _pu::
      000004                        349 	.ds 1024
      000404                        350 _u::
      000404                        351 	.ds 1024
      000804                        352 _nu::
      000804                        353 	.ds 1024
      000C04                        354 _x::
      000C04                        355 	.ds 2
      000C06                        356 _y::
      000C06                        357 	.ds 2
      000C08                        358 _x1::
      000C08                        359 	.ds 2
      000C0A                        360 _y1::
      000C0A                        361 	.ds 2
      000C0C                        362 _n::
      000C0C                        363 	.ds 2
      000C0E                        364 _generation::
      000C0E                        365 	.ds 8
      000C16                        366 _j::
      000C16                        367 	.ds 2
      000C18                        368 _fixed::
      000C18                        369 	.ds 2
      000C1A                        370 _cycle2::
      000C1A                        371 	.ds 2
      000C1C                        372 _c::
      000C1C                        373 	.ds 2
                                    374 ;--------------------------------------------------------
                                    375 ; absolute external ram data
                                    376 ;--------------------------------------------------------
                                    377 	.area XABS    (ABS,XDATA)
                                    378 ;--------------------------------------------------------
                                    379 ; external initialized ram data
                                    380 ;--------------------------------------------------------
                                    381 	.area XISEG   (XDATA)
                                    382 	.area HOME    (CODE)
                                    383 	.area GSINIT0 (CODE)
                                    384 	.area GSINIT1 (CODE)
                                    385 	.area GSINIT2 (CODE)
                                    386 	.area GSINIT3 (CODE)
                                    387 	.area GSINIT4 (CODE)
                                    388 	.area GSINIT5 (CODE)
                                    389 	.area GSINIT  (CODE)
                                    390 	.area GSFINAL (CODE)
                                    391 	.area CSEG    (CODE)
                                    392 ;--------------------------------------------------------
                                    393 ; interrupt vector 
                                    394 ;--------------------------------------------------------
                                    395 	.area HOME    (CODE)
      000000                        396 __interrupt_vect:
      000000 02r00r00         [24]  397 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0D         [24]  398 	ljmp	_int0
      000006                        399 	.ds	5
      00000B 32               [24]  400 	reti
      00000C                        401 	.ds	7
      000013 02r00r23         [24]  402 	ljmp	_int1
                                    403 ;--------------------------------------------------------
                                    404 ; global & static initialisations
                                    405 ;--------------------------------------------------------
                                    406 	.area HOME    (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.area GSFINAL (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.globl __sdcc_gsinit_startup
                                    411 	.globl __sdcc_program_startup
                                    412 	.globl __start__stack
                                    413 	.globl __mcs51_genXINIT
                                    414 	.globl __mcs51_genXRAMCLEAR
                                    415 	.globl __mcs51_genRAMCLEAR
                                    416 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  417 	ljmp	__sdcc_program_startup
                                    418 ;--------------------------------------------------------
                                    419 ; Home
                                    420 ;--------------------------------------------------------
                                    421 	.area HOME    (CODE)
                                    422 	.area HOME    (CODE)
      000016                        423 __sdcc_program_startup:
      000016 02r00r39         [24]  424 	ljmp	_main
                                    425 ;	return from main will return to caller
                                    426 ;--------------------------------------------------------
                                    427 ; code
                                    428 ;--------------------------------------------------------
                                    429 	.area CSEG    (CODE)
                                    430 ;------------------------------------------------------------
                                    431 ;Allocation info for local variables in function 'putchar'
                                    432 ;------------------------------------------------------------
                                    433 ;c                         Allocated to registers 
                                    434 ;------------------------------------------------------------
                                    435 ;	life.c:7: int putchar(int c) __naked {
                                    436 ;	-----------------------------------------
                                    437 ;	 function putchar
                                    438 ;	-----------------------------------------
      000000                        439 _putchar:
                                    440 ;	naked function: no prologue.
                                    441 ;	life.c:12: __endasm;
      000000 E5 82            [12]  442 	mov	a, dpl
      000002 02 00 30         [24]  443 	ljmp	0x0030
                                    444 ;	life.c:13: }
                                    445 ;	naked function: no epilogue.
                                    446 ;------------------------------------------------------------
                                    447 ;Allocation info for local variables in function 'getchar'
                                    448 ;------------------------------------------------------------
                                    449 ;	life.c:15: int getchar(void) {
                                    450 ;	-----------------------------------------
                                    451 ;	 function getchar
                                    452 ;	-----------------------------------------
      000005                        453 _getchar:
                           000007   454 	ar7 = 0x07
                           000006   455 	ar6 = 0x06
                           000005   456 	ar5 = 0x05
                           000004   457 	ar4 = 0x04
                           000003   458 	ar3 = 0x03
                           000002   459 	ar2 = 0x02
                           000001   460 	ar1 = 0x01
                           000000   461 	ar0 = 0x00
                                    462 ;	life.c:20: __endasm;
      000005 12 00 32         [24]  463 	lcall	0x0032
      000008 C2 83            [12]  464 	clr	dph
      00000A F5 82            [12]  465 	mov	dpl, a
                                    466 ;	life.c:21: }
      00000C 22               [24]  467 	ret
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'int0'
                                    470 ;------------------------------------------------------------
                                    471 ;	life.c:32: void int0(void) __interrupt 0 __using 1 {
                                    472 ;	-----------------------------------------
                                    473 ;	 function int0
                                    474 ;	-----------------------------------------
      00000D                        475 _int0:
                           00000F   476 	ar7 = 0x0f
                           00000E   477 	ar6 = 0x0e
                           00000D   478 	ar5 = 0x0d
                           00000C   479 	ar4 = 0x0c
                           00000B   480 	ar3 = 0x0b
                           00000A   481 	ar2 = 0x0a
                           000009   482 	ar1 = 0x09
                           000008   483 	ar0 = 0x08
      00000D C0 E0            [24]  484 	push	acc
      00000F C0 82            [24]  485 	push	dpl
      000011 C0 83            [24]  486 	push	dph
                                    487 ;	life.c:33: i0 = 1;
      000013 90r00r00         [24]  488 	mov	dptr,#_i0
      000016 74 01            [12]  489 	mov	a,#0x01
      000018 F0               [24]  490 	movx	@dptr,a
      000019 E4               [12]  491 	clr	a
      00001A A3               [24]  492 	inc	dptr
      00001B F0               [24]  493 	movx	@dptr,a
                                    494 ;	life.c:34: }
      00001C D0 83            [24]  495 	pop	dph
      00001E D0 82            [24]  496 	pop	dpl
      000020 D0 E0            [24]  497 	pop	acc
      000022 32               [24]  498 	reti
                                    499 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    500 ;	eliminated unneeded push/pop psw
                                    501 ;	eliminated unneeded push/pop b
                                    502 ;------------------------------------------------------------
                                    503 ;Allocation info for local variables in function 'int1'
                                    504 ;------------------------------------------------------------
                                    505 ;	life.c:37: void int1(void) __interrupt 2 __using 1 {
                                    506 ;	-----------------------------------------
                                    507 ;	 function int1
                                    508 ;	-----------------------------------------
      000023                        509 _int1:
      000023 C0 E0            [24]  510 	push	acc
      000025 C0 82            [24]  511 	push	dpl
      000027 C0 83            [24]  512 	push	dph
                                    513 ;	life.c:38: i1 = 1;
      000029 90r00r02         [24]  514 	mov	dptr,#_i1
      00002C 74 01            [12]  515 	mov	a,#0x01
      00002E F0               [24]  516 	movx	@dptr,a
      00002F E4               [12]  517 	clr	a
      000030 A3               [24]  518 	inc	dptr
      000031 F0               [24]  519 	movx	@dptr,a
                                    520 ;	life.c:39: }
      000032 D0 83            [24]  521 	pop	dph
      000034 D0 82            [24]  522 	pop	dpl
      000036 D0 E0            [24]  523 	pop	acc
      000038 32               [24]  524 	reti
                                    525 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    526 ;	eliminated unneeded push/pop psw
                                    527 ;	eliminated unneeded push/pop b
                                    528 ;------------------------------------------------------------
                                    529 ;Allocation info for local variables in function 'main'
                                    530 ;------------------------------------------------------------
                                    531 ;	life.c:116: void main(void) {
                                    532 ;	-----------------------------------------
                                    533 ;	 function main
                                    534 ;	-----------------------------------------
      000039                        535 _main:
                           000007   536 	ar7 = 0x07
                           000006   537 	ar6 = 0x06
                           000005   538 	ar5 = 0x05
                           000004   539 	ar4 = 0x04
                           000003   540 	ar3 = 0x03
                           000002   541 	ar2 = 0x02
                           000001   542 	ar1 = 0x01
                           000000   543 	ar0 = 0x00
                                    544 ;	life.c:117: i0 = i1 = 0;
      000039 90r00r02         [24]  545 	mov	dptr,#_i1
      00003C E4               [12]  546 	clr	a
      00003D F0               [24]  547 	movx	@dptr,a
      00003E A3               [24]  548 	inc	dptr
      00003F F0               [24]  549 	movx	@dptr,a
      000040 90r00r00         [24]  550 	mov	dptr,#_i0
      000043 F0               [24]  551 	movx	@dptr,a
      000044 A3               [24]  552 	inc	dptr
      000045 F0               [24]  553 	movx	@dptr,a
                                    554 ;	life.c:119: IT0 = 1;
                                    555 ;	assignBit
      000046 D2 88            [12]  556 	setb	_IT0
                                    557 ;	life.c:120: IT1 = 1;
                                    558 ;	assignBit
      000048 D2 8A            [12]  559 	setb	_IT1
                                    560 ;	life.c:121: EX0 = 1;
                                    561 ;	assignBit
      00004A D2 A8            [12]  562 	setb	_EX0
                                    563 ;	life.c:122: EX1 = 1;
                                    564 ;	assignBit
      00004C D2 AA            [12]  565 	setb	_EX1
                                    566 ;	life.c:123: EA = 1;
                                    567 ;	assignBit
      00004E D2 AF            [12]  568 	setb	_EA
                                    569 ;	life.c:125: while (!i0) {
      000050                        570 00112$:
      000050 90r00r00         [24]  571 	mov	dptr,#_i0
      000053 E0               [24]  572 	movx	a,@dptr
      000054 F5 F0            [12]  573 	mov	b,a
      000056 A3               [24]  574 	inc	dptr
      000057 E0               [24]  575 	movx	a,@dptr
      000058 45 F0            [12]  576 	orl	a,b
      00005A 60 03            [24]  577 	jz	00368$
      00005C 02r07rA9         [24]  578 	ljmp	00114$
      00005F                        579 00368$:
                                    580 ;	life.c:126: printf("\033[2J\033[mINIT\n\r");
      00005F 74r1E            [12]  581 	mov	a,#___str_5
      000061 C0 E0            [24]  582 	push	acc
      000063 74s00            [12]  583 	mov	a,#(___str_5 >> 8)
      000065 C0 E0            [24]  584 	push	acc
      000067 74 80            [12]  585 	mov	a,#0x80
      000069 C0 E0            [24]  586 	push	acc
      00006B 12r00r00         [24]  587 	lcall	_printf
      00006E 15 81            [12]  588 	dec	sp
      000070 15 81            [12]  589 	dec	sp
      000072 15 81            [12]  590 	dec	sp
                                    591 ;	life.c:127: for (y = 0; y < H; y++)
      000074 90r0Cr06         [24]  592 	mov	dptr,#_y
      000077 E4               [12]  593 	clr	a
      000078 F0               [24]  594 	movx	@dptr,a
      000079 A3               [24]  595 	inc	dptr
      00007A F0               [24]  596 	movx	@dptr,a
      00007B                        597 00150$:
                                    598 ;	life.c:128: for (x = 0; x < W; x++) {
      00007B 90r0Cr04         [24]  599 	mov	dptr,#_x
      00007E E4               [12]  600 	clr	a
      00007F F0               [24]  601 	movx	@dptr,a
      000080 A3               [24]  602 	inc	dptr
      000081 F0               [24]  603 	movx	@dptr,a
      000082                        604 00148$:
                                    605 ;	life.c:129: c = getchar();
      000082 12r00r05         [24]  606 	lcall	_getchar
      000085 AE 82            [24]  607 	mov	r6,dpl
      000087 AF 83            [24]  608 	mov	r7,dph
      000089 90r0Cr1C         [24]  609 	mov	dptr,#_c
      00008C EE               [12]  610 	mov	a,r6
      00008D F0               [24]  611 	movx	@dptr,a
      00008E EF               [12]  612 	mov	a,r7
      00008F A3               [24]  613 	inc	dptr
      000090 F0               [24]  614 	movx	@dptr,a
                                    615 ;	life.c:130: u[y][x] = c & 1;
      000091 90r0Cr06         [24]  616 	mov	dptr,#_y
      000094 E0               [24]  617 	movx	a,@dptr
      000095 FC               [12]  618 	mov	r4,a
      000096 A3               [24]  619 	inc	dptr
      000097 E0               [24]  620 	movx	a,@dptr
      000098 C4               [12]  621 	swap	a
      000099 23               [12]  622 	rl	a
      00009A 54 E0            [12]  623 	anl	a,#0xe0
      00009C CC               [12]  624 	xch	a,r4
      00009D C4               [12]  625 	swap	a
      00009E 23               [12]  626 	rl	a
      00009F CC               [12]  627 	xch	a,r4
      0000A0 6C               [12]  628 	xrl	a,r4
      0000A1 CC               [12]  629 	xch	a,r4
      0000A2 54 E0            [12]  630 	anl	a,#0xe0
      0000A4 CC               [12]  631 	xch	a,r4
      0000A5 6C               [12]  632 	xrl	a,r4
      0000A6 FD               [12]  633 	mov	r5,a
      0000A7 EC               [12]  634 	mov	a,r4
      0000A8 24r04            [12]  635 	add	a,#_u
      0000AA FC               [12]  636 	mov	r4,a
      0000AB ED               [12]  637 	mov	a,r5
      0000AC 34s04            [12]  638 	addc	a,#(_u >> 8)
      0000AE FD               [12]  639 	mov	r5,a
      0000AF 90r0Cr04         [24]  640 	mov	dptr,#_x
      0000B2 E0               [24]  641 	movx	a,@dptr
      0000B3 FA               [12]  642 	mov	r2,a
      0000B4 A3               [24]  643 	inc	dptr
      0000B5 E0               [24]  644 	movx	a,@dptr
      0000B6 FB               [12]  645 	mov	r3,a
      0000B7 EA               [12]  646 	mov	a,r2
      0000B8 2C               [12]  647 	add	a,r4
      0000B9 F5 82            [12]  648 	mov	dpl,a
      0000BB EB               [12]  649 	mov	a,r3
      0000BC 3D               [12]  650 	addc	a,r5
      0000BD F5 83            [12]  651 	mov	dph,a
      0000BF 53 06 01         [24]  652 	anl	ar6,#0x01
      0000C2 EE               [12]  653 	mov	a,r6
      0000C3 F0               [24]  654 	movx	@dptr,a
                                    655 ;	life.c:128: for (x = 0; x < W; x++) {
      0000C4 90r0Cr04         [24]  656 	mov	dptr,#_x
      0000C7 E0               [24]  657 	movx	a,@dptr
      0000C8 24 01            [12]  658 	add	a,#0x01
      0000CA F0               [24]  659 	movx	@dptr,a
      0000CB A3               [24]  660 	inc	dptr
      0000CC E0               [24]  661 	movx	a,@dptr
      0000CD 34 00            [12]  662 	addc	a,#0x00
      0000CF F0               [24]  663 	movx	@dptr,a
      0000D0 90r0Cr04         [24]  664 	mov	dptr,#_x
      0000D3 E0               [24]  665 	movx	a,@dptr
      0000D4 FE               [12]  666 	mov	r6,a
      0000D5 A3               [24]  667 	inc	dptr
      0000D6 E0               [24]  668 	movx	a,@dptr
      0000D7 FF               [12]  669 	mov	r7,a
      0000D8 C3               [12]  670 	clr	c
      0000D9 EE               [12]  671 	mov	a,r6
      0000DA 94 20            [12]  672 	subb	a,#0x20
      0000DC EF               [12]  673 	mov	a,r7
      0000DD 64 80            [12]  674 	xrl	a,#0x80
      0000DF 94 80            [12]  675 	subb	a,#0x80
      0000E1 40 9F            [24]  676 	jc	00148$
                                    677 ;	life.c:127: for (y = 0; y < H; y++)
      0000E3 90r0Cr06         [24]  678 	mov	dptr,#_y
      0000E6 E0               [24]  679 	movx	a,@dptr
      0000E7 24 01            [12]  680 	add	a,#0x01
      0000E9 F0               [24]  681 	movx	@dptr,a
      0000EA A3               [24]  682 	inc	dptr
      0000EB E0               [24]  683 	movx	a,@dptr
      0000EC 34 00            [12]  684 	addc	a,#0x00
      0000EE F0               [24]  685 	movx	@dptr,a
      0000EF 90r0Cr06         [24]  686 	mov	dptr,#_y
      0000F2 E0               [24]  687 	movx	a,@dptr
      0000F3 FE               [12]  688 	mov	r6,a
      0000F4 A3               [24]  689 	inc	dptr
      0000F5 E0               [24]  690 	movx	a,@dptr
      0000F6 FF               [12]  691 	mov	r7,a
      0000F7 C3               [12]  692 	clr	c
      0000F8 EE               [12]  693 	mov	a,r6
      0000F9 94 20            [12]  694 	subb	a,#0x20
      0000FB EF               [12]  695 	mov	a,r7
      0000FC 64 80            [12]  696 	xrl	a,#0x80
      0000FE 94 80            [12]  697 	subb	a,#0x80
      000100 50 03            [24]  698 	jnc	00370$
      000102 02r00r7B         [24]  699 	ljmp	00150$
      000105                        700 00370$:
                                    701 ;	life.c:132: printf("RDY\n\r");
      000105 74r2C            [12]  702 	mov	a,#___str_6
      000107 C0 E0            [24]  703 	push	acc
      000109 74s00            [12]  704 	mov	a,#(___str_6 >> 8)
      00010B C0 E0            [24]  705 	push	acc
      00010D 74 80            [12]  706 	mov	a,#0x80
      00010F C0 E0            [24]  707 	push	acc
      000111 12r00r00         [24]  708 	lcall	_printf
      000114 15 81            [12]  709 	dec	sp
      000116 15 81            [12]  710 	dec	sp
      000118 15 81            [12]  711 	dec	sp
                                    712 ;	life.c:133: (void)getchar();
      00011A 12r00r05         [24]  713 	lcall	_getchar
                                    714 ;	life.c:42: for (j = 0; j < 4; j++)
      00011D 90r0Cr16         [24]  715 	mov	dptr,#_j
      000120 E4               [12]  716 	clr	a
      000121 F0               [24]  717 	movx	@dptr,a
      000122 A3               [24]  718 	inc	dptr
      000123 F0               [24]  719 	movx	@dptr,a
      000124                        720 00152$:
                                    721 ;	life.c:43: generation[j] = 0;
      000124 90r0Cr16         [24]  722 	mov	dptr,#_j
      000127 E0               [24]  723 	movx	a,@dptr
      000128 FE               [12]  724 	mov	r6,a
      000129 A3               [24]  725 	inc	dptr
      00012A E0               [24]  726 	movx	a,@dptr
      00012B FF               [12]  727 	mov	r7,a
      00012C EE               [12]  728 	mov	a,r6
      00012D 2E               [12]  729 	add	a,r6
      00012E FE               [12]  730 	mov	r6,a
      00012F EF               [12]  731 	mov	a,r7
      000130 33               [12]  732 	rlc	a
      000131 FF               [12]  733 	mov	r7,a
      000132 EE               [12]  734 	mov	a,r6
      000133 24r0E            [12]  735 	add	a,#_generation
      000135 F5 82            [12]  736 	mov	dpl,a
      000137 EF               [12]  737 	mov	a,r7
      000138 34s0C            [12]  738 	addc	a,#(_generation >> 8)
      00013A F5 83            [12]  739 	mov	dph,a
      00013C E4               [12]  740 	clr	a
      00013D F0               [24]  741 	movx	@dptr,a
      00013E A3               [24]  742 	inc	dptr
      00013F F0               [24]  743 	movx	@dptr,a
                                    744 ;	life.c:42: for (j = 0; j < 4; j++)
      000140 90r0Cr16         [24]  745 	mov	dptr,#_j
      000143 E0               [24]  746 	movx	a,@dptr
      000144 24 01            [12]  747 	add	a,#0x01
      000146 F0               [24]  748 	movx	@dptr,a
      000147 A3               [24]  749 	inc	dptr
      000148 E0               [24]  750 	movx	a,@dptr
      000149 34 00            [12]  751 	addc	a,#0x00
      00014B F0               [24]  752 	movx	@dptr,a
      00014C 90r0Cr16         [24]  753 	mov	dptr,#_j
      00014F E0               [24]  754 	movx	a,@dptr
      000150 FE               [12]  755 	mov	r6,a
      000151 A3               [24]  756 	inc	dptr
      000152 E0               [24]  757 	movx	a,@dptr
      000153 FF               [12]  758 	mov	r7,a
      000154 C3               [12]  759 	clr	c
      000155 EE               [12]  760 	mov	a,r6
      000156 94 04            [12]  761 	subb	a,#0x04
      000158 EF               [12]  762 	mov	a,r7
      000159 64 80            [12]  763 	xrl	a,#0x80
      00015B 94 80            [12]  764 	subb	a,#0x80
      00015D 40 C5            [24]  765 	jc	00152$
                                    766 ;	life.c:137: i1 = 0;
      00015F 90r00r02         [24]  767 	mov	dptr,#_i1
      000162 E4               [12]  768 	clr	a
      000163 F0               [24]  769 	movx	@dptr,a
      000164 A3               [24]  770 	inc	dptr
      000165 F0               [24]  771 	movx	@dptr,a
                                    772 ;	life.c:138: while (!i0 && !i1) {
      000166                        773 00107$:
      000166 90r00r00         [24]  774 	mov	dptr,#_i0
      000169 E0               [24]  775 	movx	a,@dptr
      00016A F5 F0            [12]  776 	mov	b,a
      00016C A3               [24]  777 	inc	dptr
      00016D E0               [24]  778 	movx	a,@dptr
      00016E 45 F0            [12]  779 	orl	a,b
      000170 60 03            [24]  780 	jz	00372$
      000172 02r07r7F         [24]  781 	ljmp	00109$
      000175                        782 00372$:
      000175 90r00r02         [24]  783 	mov	dptr,#_i1
      000178 E0               [24]  784 	movx	a,@dptr
      000179 F5 F0            [12]  785 	mov	b,a
      00017B A3               [24]  786 	inc	dptr
      00017C E0               [24]  787 	movx	a,@dptr
      00017D 45 F0            [12]  788 	orl	a,b
      00017F 60 03            [24]  789 	jz	00373$
      000181 02r07r7F         [24]  790 	ljmp	00109$
      000184                        791 00373$:
                                    792 ;	life.c:67: printf("\033[2J\033[m");
      000184 74r05            [12]  793 	mov	a,#___str_1
      000186 C0 E0            [24]  794 	push	acc
      000188 74s00            [12]  795 	mov	a,#(___str_1 >> 8)
      00018A C0 E0            [24]  796 	push	acc
      00018C 74 80            [12]  797 	mov	a,#0x80
      00018E C0 E0            [24]  798 	push	acc
      000190 12r00r00         [24]  799 	lcall	_printf
      000193 15 81            [12]  800 	dec	sp
      000195 15 81            [12]  801 	dec	sp
      000197 15 81            [12]  802 	dec	sp
                                    803 ;	life.c:58: for (j = 0; j < 4; j++) {
      000199 90r0Cr16         [24]  804 	mov	dptr,#_j
      00019C E4               [12]  805 	clr	a
      00019D F0               [24]  806 	movx	@dptr,a
      00019E A3               [24]  807 	inc	dptr
      00019F F0               [24]  808 	movx	@dptr,a
      0001A0                        809 00154$:
                                    810 ;	life.c:59: printf("%04x", generation[3 - j]);
      0001A0 90r0Cr16         [24]  811 	mov	dptr,#_j
      0001A3 E0               [24]  812 	movx	a,@dptr
      0001A4 FE               [12]  813 	mov	r6,a
      0001A5 A3               [24]  814 	inc	dptr
      0001A6 E0               [24]  815 	movx	a,@dptr
      0001A7 74 03            [12]  816 	mov	a,#0x03
      0001A9 C3               [12]  817 	clr	c
      0001AA 9E               [12]  818 	subb	a,r6
      0001AB FE               [12]  819 	mov	r6,a
      0001AC C2 D5            [12]  820 	clr	F0
      0001AE 75 F0 02         [24]  821 	mov	b,#0x02
      0001B1 EE               [12]  822 	mov	a,r6
      0001B2 30 E7 04         [24]  823 	jnb	acc.7,00374$
      0001B5 B2 D5            [12]  824 	cpl	F0
      0001B7 F4               [12]  825 	cpl	a
      0001B8 04               [12]  826 	inc	a
      0001B9                        827 00374$:
      0001B9 A4               [48]  828 	mul	ab
      0001BA 30 D5 0A         [24]  829 	jnb	F0,00375$
      0001BD F4               [12]  830 	cpl	a
      0001BE 24 01            [12]  831 	add	a,#0x01
      0001C0 C5 F0            [12]  832 	xch	a,b
      0001C2 F4               [12]  833 	cpl	a
      0001C3 34 00            [12]  834 	addc	a,#0x00
      0001C5 C5 F0            [12]  835 	xch	a,b
      0001C7                        836 00375$:
      0001C7 24r0E            [12]  837 	add	a,#_generation
      0001C9 F5 82            [12]  838 	mov	dpl,a
      0001CB 74s0C            [12]  839 	mov	a,#(_generation >> 8)
      0001CD 35 F0            [12]  840 	addc	a,b
      0001CF F5 83            [12]  841 	mov	dph,a
      0001D1 E0               [24]  842 	movx	a,@dptr
      0001D2 FE               [12]  843 	mov	r6,a
      0001D3 A3               [24]  844 	inc	dptr
      0001D4 E0               [24]  845 	movx	a,@dptr
      0001D5 FF               [12]  846 	mov	r7,a
      0001D6 C0 06            [24]  847 	push	ar6
      0001D8 C0 07            [24]  848 	push	ar7
      0001DA 74r00            [12]  849 	mov	a,#___str_0
      0001DC C0 E0            [24]  850 	push	acc
      0001DE 74s00            [12]  851 	mov	a,#(___str_0 >> 8)
      0001E0 C0 E0            [24]  852 	push	acc
      0001E2 74 80            [12]  853 	mov	a,#0x80
      0001E4 C0 E0            [24]  854 	push	acc
      0001E6 12r00r00         [24]  855 	lcall	_printf
      0001E9 E5 81            [12]  856 	mov	a,sp
      0001EB 24 FB            [12]  857 	add	a,#0xfb
      0001ED F5 81            [12]  858 	mov	sp,a
                                    859 ;	life.c:60: if (j < 3) putchar(' ');
      0001EF 90r0Cr16         [24]  860 	mov	dptr,#_j
      0001F2 E0               [24]  861 	movx	a,@dptr
      0001F3 FE               [12]  862 	mov	r6,a
      0001F4 A3               [24]  863 	inc	dptr
      0001F5 E0               [24]  864 	movx	a,@dptr
      0001F6 FF               [12]  865 	mov	r7,a
      0001F7 C3               [12]  866 	clr	c
      0001F8 EE               [12]  867 	mov	a,r6
      0001F9 94 03            [12]  868 	subb	a,#0x03
      0001FB EF               [12]  869 	mov	a,r7
      0001FC 64 80            [12]  870 	xrl	a,#0x80
      0001FE 94 80            [12]  871 	subb	a,#0x80
      000200 50 06            [24]  872 	jnc	00155$
      000202 90 00 20         [24]  873 	mov	dptr,#0x0020
      000205 12r00r00         [24]  874 	lcall	_putchar
      000208                        875 00155$:
                                    876 ;	life.c:58: for (j = 0; j < 4; j++) {
      000208 90r0Cr16         [24]  877 	mov	dptr,#_j
      00020B E0               [24]  878 	movx	a,@dptr
      00020C 24 01            [12]  879 	add	a,#0x01
      00020E F0               [24]  880 	movx	@dptr,a
      00020F A3               [24]  881 	inc	dptr
      000210 E0               [24]  882 	movx	a,@dptr
      000211 34 00            [12]  883 	addc	a,#0x00
      000213 F0               [24]  884 	movx	@dptr,a
      000214 90r0Cr16         [24]  885 	mov	dptr,#_j
      000217 E0               [24]  886 	movx	a,@dptr
      000218 FE               [12]  887 	mov	r6,a
      000219 A3               [24]  888 	inc	dptr
      00021A E0               [24]  889 	movx	a,@dptr
      00021B FF               [12]  890 	mov	r7,a
      00021C C3               [12]  891 	clr	c
      00021D EE               [12]  892 	mov	a,r6
      00021E 94 04            [12]  893 	subb	a,#0x04
      000220 EF               [12]  894 	mov	a,r7
      000221 64 80            [12]  895 	xrl	a,#0x80
      000223 94 80            [12]  896 	subb	a,#0x80
      000225 50 03            [24]  897 	jnc	00377$
      000227 02r01rA0         [24]  898 	ljmp	00154$
      00022A                        899 00377$:
                                    900 ;	life.c:69: printf("\r\n");
      00022A 74r0D            [12]  901 	mov	a,#___str_2
      00022C C0 E0            [24]  902 	push	acc
      00022E 74s00            [12]  903 	mov	a,#(___str_2 >> 8)
      000230 C0 E0            [24]  904 	push	acc
      000232 74 80            [12]  905 	mov	a,#0x80
      000234 C0 E0            [24]  906 	push	acc
      000236 12r00r00         [24]  907 	lcall	_printf
      000239 15 81            [12]  908 	dec	sp
      00023B 15 81            [12]  909 	dec	sp
      00023D 15 81            [12]  910 	dec	sp
                                    911 ;	life.c:49: for (j = 0; j < 4; j++) {
      00023F 90r0Cr16         [24]  912 	mov	dptr,#_j
      000242 E4               [12]  913 	clr	a
      000243 F0               [24]  914 	movx	@dptr,a
      000244 A3               [24]  915 	inc	dptr
      000245 F0               [24]  916 	movx	@dptr,a
      000246                        917 00156$:
                                    918 ;	life.c:50: generation[j]++;
      000246 90r0Cr16         [24]  919 	mov	dptr,#_j
      000249 E0               [24]  920 	movx	a,@dptr
      00024A FE               [12]  921 	mov	r6,a
      00024B A3               [24]  922 	inc	dptr
      00024C E0               [24]  923 	movx	a,@dptr
      00024D FF               [12]  924 	mov	r7,a
      00024E EE               [12]  925 	mov	a,r6
      00024F 2E               [12]  926 	add	a,r6
      000250 FE               [12]  927 	mov	r6,a
      000251 EF               [12]  928 	mov	a,r7
      000252 33               [12]  929 	rlc	a
      000253 FF               [12]  930 	mov	r7,a
      000254 EE               [12]  931 	mov	a,r6
      000255 24r0E            [12]  932 	add	a,#_generation
      000257 FE               [12]  933 	mov	r6,a
      000258 EF               [12]  934 	mov	a,r7
      000259 34s0C            [12]  935 	addc	a,#(_generation >> 8)
      00025B FF               [12]  936 	mov	r7,a
      00025C 8E 82            [24]  937 	mov	dpl,r6
      00025E 8F 83            [24]  938 	mov	dph,r7
      000260 E0               [24]  939 	movx	a,@dptr
      000261 FC               [12]  940 	mov	r4,a
      000262 A3               [24]  941 	inc	dptr
      000263 E0               [24]  942 	movx	a,@dptr
      000264 FD               [12]  943 	mov	r5,a
      000265 0C               [12]  944 	inc	r4
      000266 BC 00 01         [24]  945 	cjne	r4,#0x00,00378$
      000269 0D               [12]  946 	inc	r5
      00026A                        947 00378$:
      00026A 8E 82            [24]  948 	mov	dpl,r6
      00026C 8F 83            [24]  949 	mov	dph,r7
      00026E EC               [12]  950 	mov	a,r4
      00026F F0               [24]  951 	movx	@dptr,a
      000270 ED               [12]  952 	mov	a,r5
      000271 A3               [24]  953 	inc	dptr
      000272 F0               [24]  954 	movx	@dptr,a
                                    955 ;	life.c:51: if (generation[j]) break;
      000273 90r0Cr16         [24]  956 	mov	dptr,#_j
      000276 E0               [24]  957 	movx	a,@dptr
      000277 FE               [12]  958 	mov	r6,a
      000278 A3               [24]  959 	inc	dptr
      000279 E0               [24]  960 	movx	a,@dptr
      00027A FF               [12]  961 	mov	r7,a
      00027B EE               [12]  962 	mov	a,r6
      00027C 2E               [12]  963 	add	a,r6
      00027D FC               [12]  964 	mov	r4,a
      00027E EF               [12]  965 	mov	a,r7
      00027F 33               [12]  966 	rlc	a
      000280 FD               [12]  967 	mov	r5,a
      000281 EC               [12]  968 	mov	a,r4
      000282 24r0E            [12]  969 	add	a,#_generation
      000284 F5 82            [12]  970 	mov	dpl,a
      000286 ED               [12]  971 	mov	a,r5
      000287 34s0C            [12]  972 	addc	a,#(_generation >> 8)
      000289 F5 83            [12]  973 	mov	dph,a
      00028B E0               [24]  974 	movx	a,@dptr
      00028C FC               [12]  975 	mov	r4,a
      00028D A3               [24]  976 	inc	dptr
      00028E E0               [24]  977 	movx	a,@dptr
      00028F FD               [12]  978 	mov	r5,a
      000290 4C               [12]  979 	orl	a,r4
      000291 70 1E            [24]  980 	jnz	00124$
                                    981 ;	life.c:49: for (j = 0; j < 4; j++) {
      000293 90r0Cr16         [24]  982 	mov	dptr,#_j
      000296 74 01            [12]  983 	mov	a,#0x01
      000298 2E               [12]  984 	add	a,r6
      000299 F0               [24]  985 	movx	@dptr,a
      00029A E4               [12]  986 	clr	a
      00029B 3F               [12]  987 	addc	a,r7
      00029C A3               [24]  988 	inc	dptr
      00029D F0               [24]  989 	movx	@dptr,a
      00029E 90r0Cr16         [24]  990 	mov	dptr,#_j
      0002A1 E0               [24]  991 	movx	a,@dptr
      0002A2 FE               [12]  992 	mov	r6,a
      0002A3 A3               [24]  993 	inc	dptr
      0002A4 E0               [24]  994 	movx	a,@dptr
      0002A5 FF               [12]  995 	mov	r7,a
      0002A6 C3               [12]  996 	clr	c
      0002A7 EE               [12]  997 	mov	a,r6
      0002A8 94 04            [12]  998 	subb	a,#0x04
      0002AA EF               [12]  999 	mov	a,r7
      0002AB 64 80            [12] 1000 	xrl	a,#0x80
      0002AD 94 80            [12] 1001 	subb	a,#0x80
      0002AF 40 95            [24] 1002 	jc	00156$
                                   1003 ;	life.c:70: updategen();
      0002B1                       1004 00124$:
                                   1005 ;	life.c:72: for (x = 0; x < W; x++) {
      0002B1 90r0Cr04         [24] 1006 	mov	dptr,#_x
      0002B4 E4               [12] 1007 	clr	a
      0002B5 F0               [24] 1008 	movx	@dptr,a
      0002B6 A3               [24] 1009 	inc	dptr
      0002B7 F0               [24] 1010 	movx	@dptr,a
      0002B8                       1011 00160$:
                                   1012 ;	life.c:73: for (y = 0; y < H; y++)
      0002B8 90r0Cr06         [24] 1013 	mov	dptr,#_y
      0002BB E4               [12] 1014 	clr	a
      0002BC F0               [24] 1015 	movx	@dptr,a
      0002BD A3               [24] 1016 	inc	dptr
      0002BE F0               [24] 1017 	movx	@dptr,a
      0002BF                       1018 00158$:
                                   1019 ;	life.c:74: if (u[y][x]) printf("\033[01m[]\033[m");
      0002BF 90r0Cr06         [24] 1020 	mov	dptr,#_y
      0002C2 E0               [24] 1021 	movx	a,@dptr
      0002C3 FE               [12] 1022 	mov	r6,a
      0002C4 A3               [24] 1023 	inc	dptr
      0002C5 E0               [24] 1024 	movx	a,@dptr
      0002C6 C4               [12] 1025 	swap	a
      0002C7 23               [12] 1026 	rl	a
      0002C8 54 E0            [12] 1027 	anl	a,#0xe0
      0002CA CE               [12] 1028 	xch	a,r6
      0002CB C4               [12] 1029 	swap	a
      0002CC 23               [12] 1030 	rl	a
      0002CD CE               [12] 1031 	xch	a,r6
      0002CE 6E               [12] 1032 	xrl	a,r6
      0002CF CE               [12] 1033 	xch	a,r6
      0002D0 54 E0            [12] 1034 	anl	a,#0xe0
      0002D2 CE               [12] 1035 	xch	a,r6
      0002D3 6E               [12] 1036 	xrl	a,r6
      0002D4 FF               [12] 1037 	mov	r7,a
      0002D5 EE               [12] 1038 	mov	a,r6
      0002D6 24r04            [12] 1039 	add	a,#_u
      0002D8 FE               [12] 1040 	mov	r6,a
      0002D9 EF               [12] 1041 	mov	a,r7
      0002DA 34s04            [12] 1042 	addc	a,#(_u >> 8)
      0002DC FF               [12] 1043 	mov	r7,a
      0002DD 90r0Cr04         [24] 1044 	mov	dptr,#_x
      0002E0 E0               [24] 1045 	movx	a,@dptr
      0002E1 FC               [12] 1046 	mov	r4,a
      0002E2 A3               [24] 1047 	inc	dptr
      0002E3 E0               [24] 1048 	movx	a,@dptr
      0002E4 FD               [12] 1049 	mov	r5,a
      0002E5 EC               [12] 1050 	mov	a,r4
      0002E6 2E               [12] 1051 	add	a,r6
      0002E7 FE               [12] 1052 	mov	r6,a
      0002E8 ED               [12] 1053 	mov	a,r5
      0002E9 3F               [12] 1054 	addc	a,r7
      0002EA FF               [12] 1055 	mov	r7,a
      0002EB 8E 82            [24] 1056 	mov	dpl,r6
      0002ED 8F 83            [24] 1057 	mov	dph,r7
      0002EF E0               [24] 1058 	movx	a,@dptr
      0002F0 60 17            [24] 1059 	jz	00126$
      0002F2 74r10            [12] 1060 	mov	a,#___str_3
      0002F4 C0 E0            [24] 1061 	push	acc
      0002F6 74s00            [12] 1062 	mov	a,#(___str_3 >> 8)
      0002F8 C0 E0            [24] 1063 	push	acc
      0002FA 74 80            [12] 1064 	mov	a,#0x80
      0002FC C0 E0            [24] 1065 	push	acc
      0002FE 12r00r00         [24] 1066 	lcall	_printf
      000301 15 81            [12] 1067 	dec	sp
      000303 15 81            [12] 1068 	dec	sp
      000305 15 81            [12] 1069 	dec	sp
      000307 80 15            [24] 1070 	sjmp	00159$
      000309                       1071 00126$:
                                   1072 ;	life.c:75: else printf("--");
      000309 74r1B            [12] 1073 	mov	a,#___str_4
      00030B C0 E0            [24] 1074 	push	acc
      00030D 74s00            [12] 1075 	mov	a,#(___str_4 >> 8)
      00030F C0 E0            [24] 1076 	push	acc
      000311 74 80            [12] 1077 	mov	a,#0x80
      000313 C0 E0            [24] 1078 	push	acc
      000315 12r00r00         [24] 1079 	lcall	_printf
      000318 15 81            [12] 1080 	dec	sp
      00031A 15 81            [12] 1081 	dec	sp
      00031C 15 81            [12] 1082 	dec	sp
      00031E                       1083 00159$:
                                   1084 ;	life.c:73: for (y = 0; y < H; y++)
      00031E 90r0Cr06         [24] 1085 	mov	dptr,#_y
      000321 E0               [24] 1086 	movx	a,@dptr
      000322 24 01            [12] 1087 	add	a,#0x01
      000324 F0               [24] 1088 	movx	@dptr,a
      000325 A3               [24] 1089 	inc	dptr
      000326 E0               [24] 1090 	movx	a,@dptr
      000327 34 00            [12] 1091 	addc	a,#0x00
      000329 F0               [24] 1092 	movx	@dptr,a
      00032A 90r0Cr06         [24] 1093 	mov	dptr,#_y
      00032D E0               [24] 1094 	movx	a,@dptr
      00032E FE               [12] 1095 	mov	r6,a
      00032F A3               [24] 1096 	inc	dptr
      000330 E0               [24] 1097 	movx	a,@dptr
      000331 FF               [12] 1098 	mov	r7,a
      000332 C3               [12] 1099 	clr	c
      000333 EE               [12] 1100 	mov	a,r6
      000334 94 20            [12] 1101 	subb	a,#0x20
      000336 EF               [12] 1102 	mov	a,r7
      000337 64 80            [12] 1103 	xrl	a,#0x80
      000339 94 80            [12] 1104 	subb	a,#0x80
      00033B 50 03            [24] 1105 	jnc	00382$
      00033D 02r02rBF         [24] 1106 	ljmp	00158$
      000340                       1107 00382$:
                                   1108 ;	life.c:76: printf("\r\n");
      000340 74r0D            [12] 1109 	mov	a,#___str_2
      000342 C0 E0            [24] 1110 	push	acc
      000344 74s00            [12] 1111 	mov	a,#(___str_2 >> 8)
      000346 C0 E0            [24] 1112 	push	acc
      000348 74 80            [12] 1113 	mov	a,#0x80
      00034A C0 E0            [24] 1114 	push	acc
      00034C 12r00r00         [24] 1115 	lcall	_printf
      00034F 15 81            [12] 1116 	dec	sp
      000351 15 81            [12] 1117 	dec	sp
      000353 15 81            [12] 1118 	dec	sp
                                   1119 ;	life.c:72: for (x = 0; x < W; x++) {
      000355 90r0Cr04         [24] 1120 	mov	dptr,#_x
      000358 E0               [24] 1121 	movx	a,@dptr
      000359 24 01            [12] 1122 	add	a,#0x01
      00035B F0               [24] 1123 	movx	@dptr,a
      00035C A3               [24] 1124 	inc	dptr
      00035D E0               [24] 1125 	movx	a,@dptr
      00035E 34 00            [12] 1126 	addc	a,#0x00
      000360 F0               [24] 1127 	movx	@dptr,a
      000361 90r0Cr04         [24] 1128 	mov	dptr,#_x
      000364 E0               [24] 1129 	movx	a,@dptr
      000365 FE               [12] 1130 	mov	r6,a
      000366 A3               [24] 1131 	inc	dptr
      000367 E0               [24] 1132 	movx	a,@dptr
      000368 FF               [12] 1133 	mov	r7,a
      000369 C3               [12] 1134 	clr	c
      00036A EE               [12] 1135 	mov	a,r6
      00036B 94 20            [12] 1136 	subb	a,#0x20
      00036D EF               [12] 1137 	mov	a,r7
      00036E 64 80            [12] 1138 	xrl	a,#0x80
      000370 94 80            [12] 1139 	subb	a,#0x80
      000372 50 03            [24] 1140 	jnc	00383$
      000374 02r02rB8         [24] 1141 	ljmp	00160$
      000377                       1142 00383$:
                                   1143 ;	life.c:83: fixed = 1;
      000377 90r0Cr18         [24] 1144 	mov	dptr,#_fixed
      00037A 74 01            [12] 1145 	mov	a,#0x01
      00037C F0               [24] 1146 	movx	@dptr,a
      00037D E4               [12] 1147 	clr	a
      00037E A3               [24] 1148 	inc	dptr
      00037F F0               [24] 1149 	movx	@dptr,a
                                   1150 ;	life.c:84: cycle2 = 1;
      000380 90r0Cr1A         [24] 1151 	mov	dptr,#_cycle2
      000383 04               [12] 1152 	inc	a
      000384 F0               [24] 1153 	movx	@dptr,a
      000385 E4               [12] 1154 	clr	a
      000386 A3               [24] 1155 	inc	dptr
      000387 F0               [24] 1156 	movx	@dptr,a
                                   1157 ;	life.c:86: for (y = 0; y < H; y++)
      000388 90r0Cr06         [24] 1158 	mov	dptr,#_y
      00038B F0               [24] 1159 	movx	@dptr,a
      00038C A3               [24] 1160 	inc	dptr
      00038D F0               [24] 1161 	movx	@dptr,a
      00038E                       1162 00164$:
                                   1163 ;	life.c:87: for (x = 0; x < W; x++)
      00038E 90r0Cr04         [24] 1164 	mov	dptr,#_x
      000391 E4               [12] 1165 	clr	a
      000392 F0               [24] 1166 	movx	@dptr,a
      000393 A3               [24] 1167 	inc	dptr
      000394 F0               [24] 1168 	movx	@dptr,a
      000395                       1169 00162$:
                                   1170 ;	life.c:88: pu[y][x] = u[y][x];
      000395 90r0Cr06         [24] 1171 	mov	dptr,#_y
      000398 E0               [24] 1172 	movx	a,@dptr
      000399 FE               [12] 1173 	mov	r6,a
      00039A A3               [24] 1174 	inc	dptr
      00039B E0               [24] 1175 	movx	a,@dptr
      00039C C4               [12] 1176 	swap	a
      00039D 23               [12] 1177 	rl	a
      00039E 54 E0            [12] 1178 	anl	a,#0xe0
      0003A0 CE               [12] 1179 	xch	a,r6
      0003A1 C4               [12] 1180 	swap	a
      0003A2 23               [12] 1181 	rl	a
      0003A3 CE               [12] 1182 	xch	a,r6
      0003A4 6E               [12] 1183 	xrl	a,r6
      0003A5 CE               [12] 1184 	xch	a,r6
      0003A6 54 E0            [12] 1185 	anl	a,#0xe0
      0003A8 CE               [12] 1186 	xch	a,r6
      0003A9 6E               [12] 1187 	xrl	a,r6
      0003AA FF               [12] 1188 	mov	r7,a
      0003AB EE               [12] 1189 	mov	a,r6
      0003AC 24r04            [12] 1190 	add	a,#_pu
      0003AE FC               [12] 1191 	mov	r4,a
      0003AF EF               [12] 1192 	mov	a,r7
      0003B0 34s00            [12] 1193 	addc	a,#(_pu >> 8)
      0003B2 FD               [12] 1194 	mov	r5,a
      0003B3 90r0Cr04         [24] 1195 	mov	dptr,#_x
      0003B6 E0               [24] 1196 	movx	a,@dptr
      0003B7 FA               [12] 1197 	mov	r2,a
      0003B8 A3               [24] 1198 	inc	dptr
      0003B9 E0               [24] 1199 	movx	a,@dptr
      0003BA FB               [12] 1200 	mov	r3,a
      0003BB EA               [12] 1201 	mov	a,r2
      0003BC 2C               [12] 1202 	add	a,r4
      0003BD FC               [12] 1203 	mov	r4,a
      0003BE EB               [12] 1204 	mov	a,r3
      0003BF 3D               [12] 1205 	addc	a,r5
      0003C0 FD               [12] 1206 	mov	r5,a
      0003C1 EE               [12] 1207 	mov	a,r6
      0003C2 24r04            [12] 1208 	add	a,#_u
      0003C4 FE               [12] 1209 	mov	r6,a
      0003C5 EF               [12] 1210 	mov	a,r7
      0003C6 34s04            [12] 1211 	addc	a,#(_u >> 8)
      0003C8 FF               [12] 1212 	mov	r7,a
      0003C9 EA               [12] 1213 	mov	a,r2
      0003CA 2E               [12] 1214 	add	a,r6
      0003CB F5 82            [12] 1215 	mov	dpl,a
      0003CD EB               [12] 1216 	mov	a,r3
      0003CE 3F               [12] 1217 	addc	a,r7
      0003CF F5 83            [12] 1218 	mov	dph,a
      0003D1 E0               [24] 1219 	movx	a,@dptr
      0003D2 8C 82            [24] 1220 	mov	dpl,r4
      0003D4 8D 83            [24] 1221 	mov	dph,r5
      0003D6 F0               [24] 1222 	movx	@dptr,a
                                   1223 ;	life.c:87: for (x = 0; x < W; x++)
      0003D7 90r0Cr04         [24] 1224 	mov	dptr,#_x
      0003DA E0               [24] 1225 	movx	a,@dptr
      0003DB 24 01            [12] 1226 	add	a,#0x01
      0003DD F0               [24] 1227 	movx	@dptr,a
      0003DE A3               [24] 1228 	inc	dptr
      0003DF E0               [24] 1229 	movx	a,@dptr
      0003E0 34 00            [12] 1230 	addc	a,#0x00
      0003E2 F0               [24] 1231 	movx	@dptr,a
      0003E3 90r0Cr04         [24] 1232 	mov	dptr,#_x
      0003E6 E0               [24] 1233 	movx	a,@dptr
      0003E7 FE               [12] 1234 	mov	r6,a
      0003E8 A3               [24] 1235 	inc	dptr
      0003E9 E0               [24] 1236 	movx	a,@dptr
      0003EA FF               [12] 1237 	mov	r7,a
      0003EB C3               [12] 1238 	clr	c
      0003EC EE               [12] 1239 	mov	a,r6
      0003ED 94 20            [12] 1240 	subb	a,#0x20
      0003EF EF               [12] 1241 	mov	a,r7
      0003F0 64 80            [12] 1242 	xrl	a,#0x80
      0003F2 94 80            [12] 1243 	subb	a,#0x80
      0003F4 40 9F            [24] 1244 	jc	00162$
                                   1245 ;	life.c:86: for (y = 0; y < H; y++)
      0003F6 90r0Cr06         [24] 1246 	mov	dptr,#_y
      0003F9 E0               [24] 1247 	movx	a,@dptr
      0003FA 24 01            [12] 1248 	add	a,#0x01
      0003FC F0               [24] 1249 	movx	@dptr,a
      0003FD A3               [24] 1250 	inc	dptr
      0003FE E0               [24] 1251 	movx	a,@dptr
      0003FF 34 00            [12] 1252 	addc	a,#0x00
      000401 F0               [24] 1253 	movx	@dptr,a
      000402 90r0Cr06         [24] 1254 	mov	dptr,#_y
      000405 E0               [24] 1255 	movx	a,@dptr
      000406 FE               [12] 1256 	mov	r6,a
      000407 A3               [24] 1257 	inc	dptr
      000408 E0               [24] 1258 	movx	a,@dptr
      000409 FF               [12] 1259 	mov	r7,a
      00040A C3               [12] 1260 	clr	c
      00040B EE               [12] 1261 	mov	a,r6
      00040C 94 20            [12] 1262 	subb	a,#0x20
      00040E EF               [12] 1263 	mov	a,r7
      00040F 64 80            [12] 1264 	xrl	a,#0x80
      000411 94 80            [12] 1265 	subb	a,#0x80
      000413 50 03            [24] 1266 	jnc	00385$
      000415 02r03r8E         [24] 1267 	ljmp	00164$
      000418                       1268 00385$:
                                   1269 ;	life.c:90: for (y = 0; y < H; y++) {
      000418 90r0Cr06         [24] 1270 	mov	dptr,#_y
      00041B E4               [12] 1271 	clr	a
      00041C F0               [24] 1272 	movx	@dptr,a
      00041D A3               [24] 1273 	inc	dptr
      00041E F0               [24] 1274 	movx	@dptr,a
      00041F                       1275 00174$:
                                   1276 ;	life.c:91: for (x = 0; x < W; x++) {
      00041F 90r0Cr04         [24] 1277 	mov	dptr,#_x
      000422 E4               [12] 1278 	clr	a
      000423 F0               [24] 1279 	movx	@dptr,a
      000424 A3               [24] 1280 	inc	dptr
      000425 F0               [24] 1281 	movx	@dptr,a
      000426                       1282 00172$:
                                   1283 ;	life.c:92: n = 0;
      000426 90r0Cr0C         [24] 1284 	mov	dptr,#_n
      000429 E4               [12] 1285 	clr	a
      00042A F0               [24] 1286 	movx	@dptr,a
      00042B A3               [24] 1287 	inc	dptr
      00042C F0               [24] 1288 	movx	@dptr,a
                                   1289 ;	life.c:93: for (y1 = y - 1; y1 <= y + 1; y1++)
      00042D 90r0Cr06         [24] 1290 	mov	dptr,#_y
      000430 E0               [24] 1291 	movx	a,@dptr
      000431 FE               [12] 1292 	mov	r6,a
      000432 A3               [24] 1293 	inc	dptr
      000433 E0               [24] 1294 	movx	a,@dptr
      000434 FF               [12] 1295 	mov	r7,a
      000435 1E               [12] 1296 	dec	r6
      000436 BE FF 01         [24] 1297 	cjne	r6,#0xff,00386$
      000439 1F               [12] 1298 	dec	r7
      00043A                       1299 00386$:
      00043A 90r0Cr0A         [24] 1300 	mov	dptr,#_y1
      00043D EE               [12] 1301 	mov	a,r6
      00043E F0               [24] 1302 	movx	@dptr,a
      00043F EF               [12] 1303 	mov	a,r7
      000440 A3               [24] 1304 	inc	dptr
      000441 F0               [24] 1305 	movx	@dptr,a
      000442                       1306 00170$:
      000442 90r0Cr06         [24] 1307 	mov	dptr,#_y
      000445 E0               [24] 1308 	movx	a,@dptr
      000446 FE               [12] 1309 	mov	r6,a
      000447 A3               [24] 1310 	inc	dptr
      000448 E0               [24] 1311 	movx	a,@dptr
      000449 FF               [12] 1312 	mov	r7,a
      00044A 74 01            [12] 1313 	mov	a,#0x01
      00044C 2E               [12] 1314 	add	a,r6
      00044D FC               [12] 1315 	mov	r4,a
      00044E E4               [12] 1316 	clr	a
      00044F 3F               [12] 1317 	addc	a,r7
      000450 FD               [12] 1318 	mov	r5,a
      000451 90r0Cr0A         [24] 1319 	mov	dptr,#_y1
      000454 E0               [24] 1320 	movx	a,@dptr
      000455 FA               [12] 1321 	mov	r2,a
      000456 A3               [24] 1322 	inc	dptr
      000457 E0               [24] 1323 	movx	a,@dptr
      000458 FB               [12] 1324 	mov	r3,a
      000459 C3               [12] 1325 	clr	c
      00045A EC               [12] 1326 	mov	a,r4
      00045B 9A               [12] 1327 	subb	a,r2
      00045C ED               [12] 1328 	mov	a,r5
      00045D 64 80            [12] 1329 	xrl	a,#0x80
      00045F 8B F0            [24] 1330 	mov	b,r3
      000461 63 F0 80         [24] 1331 	xrl	b,#0x80
      000464 95 F0            [12] 1332 	subb	a,b
      000466 50 03            [24] 1333 	jnc	00387$
      000468 02r05r48         [24] 1334 	ljmp	00136$
      00046B                       1335 00387$:
                                   1336 ;	life.c:94: for (x1 = x - 1; x1 <= x + 1; x1++)
      00046B 90r0Cr04         [24] 1337 	mov	dptr,#_x
      00046E E0               [24] 1338 	movx	a,@dptr
      00046F FC               [12] 1339 	mov	r4,a
      000470 A3               [24] 1340 	inc	dptr
      000471 E0               [24] 1341 	movx	a,@dptr
      000472 FD               [12] 1342 	mov	r5,a
      000473 1C               [12] 1343 	dec	r4
      000474 BC FF 01         [24] 1344 	cjne	r4,#0xff,00388$
      000477 1D               [12] 1345 	dec	r5
      000478                       1346 00388$:
      000478 90r0Cr08         [24] 1347 	mov	dptr,#_x1
      00047B EC               [12] 1348 	mov	a,r4
      00047C F0               [24] 1349 	movx	@dptr,a
      00047D ED               [12] 1350 	mov	a,r5
      00047E A3               [24] 1351 	inc	dptr
      00047F F0               [24] 1352 	movx	@dptr,a
      000480                       1353 00167$:
      000480 90r0Cr04         [24] 1354 	mov	dptr,#_x
      000483 E0               [24] 1355 	movx	a,@dptr
      000484 FC               [12] 1356 	mov	r4,a
      000485 A3               [24] 1357 	inc	dptr
      000486 E0               [24] 1358 	movx	a,@dptr
      000487 FD               [12] 1359 	mov	r5,a
      000488 0C               [12] 1360 	inc	r4
      000489 BC 00 01         [24] 1361 	cjne	r4,#0x00,00389$
      00048C 0D               [12] 1362 	inc	r5
      00048D                       1363 00389$:
      00048D 90r0Cr08         [24] 1364 	mov	dptr,#_x1
      000490 E0               [24] 1365 	movx	a,@dptr
      000491 FA               [12] 1366 	mov	r2,a
      000492 A3               [24] 1367 	inc	dptr
      000493 E0               [24] 1368 	movx	a,@dptr
      000494 FB               [12] 1369 	mov	r3,a
      000495 C3               [12] 1370 	clr	c
      000496 EC               [12] 1371 	mov	a,r4
      000497 9A               [12] 1372 	subb	a,r2
      000498 ED               [12] 1373 	mov	a,r5
      000499 64 80            [12] 1374 	xrl	a,#0x80
      00049B 8B F0            [24] 1375 	mov	b,r3
      00049D 63 F0 80         [24] 1376 	xrl	b,#0x80
      0004A0 95 F0            [12] 1377 	subb	a,b
      0004A2 50 03            [24] 1378 	jnc	00390$
      0004A4 02r05r39         [24] 1379 	ljmp	00171$
      0004A7                       1380 00390$:
                                   1381 ;	life.c:95: if (u[(y1 + H) % H][(x1 + W) % W])
      0004A7 90r0Cr0A         [24] 1382 	mov	dptr,#_y1
      0004AA E0               [24] 1383 	movx	a,@dptr
      0004AB FC               [12] 1384 	mov	r4,a
      0004AC A3               [24] 1385 	inc	dptr
      0004AD E0               [24] 1386 	movx	a,@dptr
      0004AE FD               [12] 1387 	mov	r5,a
      0004AF 74 20            [12] 1388 	mov	a,#0x20
      0004B1 2C               [12] 1389 	add	a,r4
      0004B2 FC               [12] 1390 	mov	r4,a
      0004B3 E4               [12] 1391 	clr	a
      0004B4 3D               [12] 1392 	addc	a,r5
      0004B5 FD               [12] 1393 	mov	r5,a
      0004B6 C0 03            [24] 1394 	push	ar3
      0004B8 C0 02            [24] 1395 	push	ar2
      0004BA 74 20            [12] 1396 	mov	a,#0x20
      0004BC C0 E0            [24] 1397 	push	acc
      0004BE E4               [12] 1398 	clr	a
      0004BF C0 E0            [24] 1399 	push	acc
      0004C1 8C 82            [24] 1400 	mov	dpl,r4
      0004C3 8D 83            [24] 1401 	mov	dph,r5
      0004C5 12r00r00         [24] 1402 	lcall	__modsint
      0004C8 AC 82            [24] 1403 	mov	r4,dpl
      0004CA AD 83            [24] 1404 	mov	r5,dph
      0004CC 15 81            [12] 1405 	dec	sp
      0004CE 15 81            [12] 1406 	dec	sp
      0004D0 D0 02            [24] 1407 	pop	ar2
      0004D2 D0 03            [24] 1408 	pop	ar3
      0004D4 ED               [12] 1409 	mov	a,r5
      0004D5 C4               [12] 1410 	swap	a
      0004D6 23               [12] 1411 	rl	a
      0004D7 54 E0            [12] 1412 	anl	a,#0xe0
      0004D9 CC               [12] 1413 	xch	a,r4
      0004DA C4               [12] 1414 	swap	a
      0004DB 23               [12] 1415 	rl	a
      0004DC CC               [12] 1416 	xch	a,r4
      0004DD 6C               [12] 1417 	xrl	a,r4
      0004DE CC               [12] 1418 	xch	a,r4
      0004DF 54 E0            [12] 1419 	anl	a,#0xe0
      0004E1 CC               [12] 1420 	xch	a,r4
      0004E2 6C               [12] 1421 	xrl	a,r4
      0004E3 FD               [12] 1422 	mov	r5,a
      0004E4 EC               [12] 1423 	mov	a,r4
      0004E5 24r04            [12] 1424 	add	a,#_u
      0004E7 FC               [12] 1425 	mov	r4,a
      0004E8 ED               [12] 1426 	mov	a,r5
      0004E9 34s04            [12] 1427 	addc	a,#(_u >> 8)
      0004EB FD               [12] 1428 	mov	r5,a
      0004EC 74 20            [12] 1429 	mov	a,#0x20
      0004EE 2A               [12] 1430 	add	a,r2
      0004EF FA               [12] 1431 	mov	r2,a
      0004F0 E4               [12] 1432 	clr	a
      0004F1 3B               [12] 1433 	addc	a,r3
      0004F2 FB               [12] 1434 	mov	r3,a
      0004F3 C0 05            [24] 1435 	push	ar5
      0004F5 C0 04            [24] 1436 	push	ar4
      0004F7 74 20            [12] 1437 	mov	a,#0x20
      0004F9 C0 E0            [24] 1438 	push	acc
      0004FB E4               [12] 1439 	clr	a
      0004FC C0 E0            [24] 1440 	push	acc
      0004FE 8A 82            [24] 1441 	mov	dpl,r2
      000500 8B 83            [24] 1442 	mov	dph,r3
      000502 12r00r00         [24] 1443 	lcall	__modsint
      000505 AA 82            [24] 1444 	mov	r2,dpl
      000507 AB 83            [24] 1445 	mov	r3,dph
      000509 15 81            [12] 1446 	dec	sp
      00050B 15 81            [12] 1447 	dec	sp
      00050D D0 04            [24] 1448 	pop	ar4
      00050F D0 05            [24] 1449 	pop	ar5
      000511 EA               [12] 1450 	mov	a,r2
      000512 2C               [12] 1451 	add	a,r4
      000513 FC               [12] 1452 	mov	r4,a
      000514 EB               [12] 1453 	mov	a,r3
      000515 3D               [12] 1454 	addc	a,r5
      000516 FD               [12] 1455 	mov	r5,a
      000517 8C 82            [24] 1456 	mov	dpl,r4
      000519 8D 83            [24] 1457 	mov	dph,r5
      00051B E0               [24] 1458 	movx	a,@dptr
      00051C 60 0C            [24] 1459 	jz	00168$
                                   1460 ;	life.c:96: n++;
      00051E 90r0Cr0C         [24] 1461 	mov	dptr,#_n
      000521 E0               [24] 1462 	movx	a,@dptr
      000522 24 01            [12] 1463 	add	a,#0x01
      000524 F0               [24] 1464 	movx	@dptr,a
      000525 A3               [24] 1465 	inc	dptr
      000526 E0               [24] 1466 	movx	a,@dptr
      000527 34 00            [12] 1467 	addc	a,#0x00
      000529 F0               [24] 1468 	movx	@dptr,a
      00052A                       1469 00168$:
                                   1470 ;	life.c:94: for (x1 = x - 1; x1 <= x + 1; x1++)
      00052A 90r0Cr08         [24] 1471 	mov	dptr,#_x1
      00052D E0               [24] 1472 	movx	a,@dptr
      00052E 24 01            [12] 1473 	add	a,#0x01
      000530 F0               [24] 1474 	movx	@dptr,a
      000531 A3               [24] 1475 	inc	dptr
      000532 E0               [24] 1476 	movx	a,@dptr
      000533 34 00            [12] 1477 	addc	a,#0x00
      000535 F0               [24] 1478 	movx	@dptr,a
      000536 02r04r80         [24] 1479 	ljmp	00167$
      000539                       1480 00171$:
                                   1481 ;	life.c:93: for (y1 = y - 1; y1 <= y + 1; y1++)
      000539 90r0Cr0A         [24] 1482 	mov	dptr,#_y1
      00053C E0               [24] 1483 	movx	a,@dptr
      00053D 24 01            [12] 1484 	add	a,#0x01
      00053F F0               [24] 1485 	movx	@dptr,a
      000540 A3               [24] 1486 	inc	dptr
      000541 E0               [24] 1487 	movx	a,@dptr
      000542 34 00            [12] 1488 	addc	a,#0x00
      000544 F0               [24] 1489 	movx	@dptr,a
      000545 02r04r42         [24] 1490 	ljmp	00170$
      000548                       1491 00136$:
                                   1492 ;	life.c:98: if (u[y][x]) n--;
      000548 EF               [12] 1493 	mov	a,r7
      000549 C4               [12] 1494 	swap	a
      00054A 23               [12] 1495 	rl	a
      00054B 54 E0            [12] 1496 	anl	a,#0xe0
      00054D CE               [12] 1497 	xch	a,r6
      00054E C4               [12] 1498 	swap	a
      00054F 23               [12] 1499 	rl	a
      000550 CE               [12] 1500 	xch	a,r6
      000551 6E               [12] 1501 	xrl	a,r6
      000552 CE               [12] 1502 	xch	a,r6
      000553 54 E0            [12] 1503 	anl	a,#0xe0
      000555 CE               [12] 1504 	xch	a,r6
      000556 6E               [12] 1505 	xrl	a,r6
      000557 FF               [12] 1506 	mov	r7,a
      000558 EE               [12] 1507 	mov	a,r6
      000559 24r04            [12] 1508 	add	a,#_u
      00055B FE               [12] 1509 	mov	r6,a
      00055C EF               [12] 1510 	mov	a,r7
      00055D 34s04            [12] 1511 	addc	a,#(_u >> 8)
      00055F FF               [12] 1512 	mov	r7,a
      000560 90r0Cr04         [24] 1513 	mov	dptr,#_x
      000563 E0               [24] 1514 	movx	a,@dptr
      000564 FC               [12] 1515 	mov	r4,a
      000565 A3               [24] 1516 	inc	dptr
      000566 E0               [24] 1517 	movx	a,@dptr
      000567 FD               [12] 1518 	mov	r5,a
      000568 EC               [12] 1519 	mov	a,r4
      000569 2E               [12] 1520 	add	a,r6
      00056A FE               [12] 1521 	mov	r6,a
      00056B ED               [12] 1522 	mov	a,r5
      00056C 3F               [12] 1523 	addc	a,r7
      00056D FF               [12] 1524 	mov	r7,a
      00056E 8E 82            [24] 1525 	mov	dpl,r6
      000570 8F 83            [24] 1526 	mov	dph,r7
      000572 E0               [24] 1527 	movx	a,@dptr
      000573 60 14            [24] 1528 	jz	00138$
      000575 90r0Cr0C         [24] 1529 	mov	dptr,#_n
      000578 E0               [24] 1530 	movx	a,@dptr
      000579 24 FF            [12] 1531 	add	a,#0xff
      00057B FE               [12] 1532 	mov	r6,a
      00057C A3               [24] 1533 	inc	dptr
      00057D E0               [24] 1534 	movx	a,@dptr
      00057E 34 FF            [12] 1535 	addc	a,#0xff
      000580 FF               [12] 1536 	mov	r7,a
      000581 90r0Cr0C         [24] 1537 	mov	dptr,#_n
      000584 EE               [12] 1538 	mov	a,r6
      000585 F0               [24] 1539 	movx	@dptr,a
      000586 EF               [12] 1540 	mov	a,r7
      000587 A3               [24] 1541 	inc	dptr
      000588 F0               [24] 1542 	movx	@dptr,a
      000589                       1543 00138$:
                                   1544 ;	life.c:99: nu[y][x] = (n == 3 || (n == 2 && u[y][x]));
      000589 90r0Cr06         [24] 1545 	mov	dptr,#_y
      00058C E0               [24] 1546 	movx	a,@dptr
      00058D FE               [12] 1547 	mov	r6,a
      00058E A3               [24] 1548 	inc	dptr
      00058F E0               [24] 1549 	movx	a,@dptr
      000590 C4               [12] 1550 	swap	a
      000591 23               [12] 1551 	rl	a
      000592 54 E0            [12] 1552 	anl	a,#0xe0
      000594 CE               [12] 1553 	xch	a,r6
      000595 C4               [12] 1554 	swap	a
      000596 23               [12] 1555 	rl	a
      000597 CE               [12] 1556 	xch	a,r6
      000598 6E               [12] 1557 	xrl	a,r6
      000599 CE               [12] 1558 	xch	a,r6
      00059A 54 E0            [12] 1559 	anl	a,#0xe0
      00059C CE               [12] 1560 	xch	a,r6
      00059D 6E               [12] 1561 	xrl	a,r6
      00059E FF               [12] 1562 	mov	r7,a
      00059F EE               [12] 1563 	mov	a,r6
      0005A0 24r04            [12] 1564 	add	a,#_nu
      0005A2 FC               [12] 1565 	mov	r4,a
      0005A3 EF               [12] 1566 	mov	a,r7
      0005A4 34s08            [12] 1567 	addc	a,#(_nu >> 8)
      0005A6 FD               [12] 1568 	mov	r5,a
      0005A7 90r0Cr04         [24] 1569 	mov	dptr,#_x
      0005AA E0               [24] 1570 	movx	a,@dptr
      0005AB FA               [12] 1571 	mov	r2,a
      0005AC A3               [24] 1572 	inc	dptr
      0005AD E0               [24] 1573 	movx	a,@dptr
      0005AE FB               [12] 1574 	mov	r3,a
      0005AF EA               [12] 1575 	mov	a,r2
      0005B0 2C               [12] 1576 	add	a,r4
      0005B1 FC               [12] 1577 	mov	r4,a
      0005B2 EB               [12] 1578 	mov	a,r3
      0005B3 3D               [12] 1579 	addc	a,r5
      0005B4 FD               [12] 1580 	mov	r5,a
      0005B5 90r0Cr0C         [24] 1581 	mov	dptr,#_n
      0005B8 E0               [24] 1582 	movx	a,@dptr
      0005B9 F8               [12] 1583 	mov	r0,a
      0005BA A3               [24] 1584 	inc	dptr
      0005BB E0               [24] 1585 	movx	a,@dptr
      0005BC F9               [12] 1586 	mov	r1,a
      0005BD B8 03 05         [24] 1587 	cjne	r0,#0x03,00393$
      0005C0 B9 00 02         [24] 1588 	cjne	r1,#0x00,00393$
      0005C3 80 1F            [24] 1589 	sjmp	00183$
      0005C5                       1590 00393$:
      0005C5 B8 02 18         [24] 1591 	cjne	r0,#0x02,00182$
      0005C8 B9 00 15         [24] 1592 	cjne	r1,#0x00,00182$
      0005CB EE               [12] 1593 	mov	a,r6
      0005CC 24r04            [12] 1594 	add	a,#_u
      0005CE FE               [12] 1595 	mov	r6,a
      0005CF EF               [12] 1596 	mov	a,r7
      0005D0 34s04            [12] 1597 	addc	a,#(_u >> 8)
      0005D2 FF               [12] 1598 	mov	r7,a
      0005D3 EA               [12] 1599 	mov	a,r2
      0005D4 2E               [12] 1600 	add	a,r6
      0005D5 FA               [12] 1601 	mov	r2,a
      0005D6 EB               [12] 1602 	mov	a,r3
      0005D7 3F               [12] 1603 	addc	a,r7
      0005D8 FB               [12] 1604 	mov	r3,a
      0005D9 8A 82            [24] 1605 	mov	dpl,r2
      0005DB 8B 83            [24] 1606 	mov	dph,r3
      0005DD E0               [24] 1607 	movx	a,@dptr
      0005DE 70 04            [24] 1608 	jnz	00183$
      0005E0                       1609 00182$:
                                   1610 ;	assignBit
      0005E0 C2*00            [12] 1611 	clr	b0
      0005E2 80 02            [24] 1612 	sjmp	00184$
      0005E4                       1613 00183$:
                                   1614 ;	assignBit
      0005E4 D2*00            [12] 1615 	setb	b0
      0005E6                       1616 00184$:
      0005E6 A2*00            [12] 1617 	mov	c,b0
      0005E8 E4               [12] 1618 	clr	a
      0005E9 33               [12] 1619 	rlc	a
      0005EA 8C 82            [24] 1620 	mov	dpl,r4
      0005EC 8D 83            [24] 1621 	mov	dph,r5
      0005EE F0               [24] 1622 	movx	@dptr,a
                                   1623 ;	life.c:91: for (x = 0; x < W; x++) {
      0005EF 90r0Cr04         [24] 1624 	mov	dptr,#_x
      0005F2 E0               [24] 1625 	movx	a,@dptr
      0005F3 24 01            [12] 1626 	add	a,#0x01
      0005F5 F0               [24] 1627 	movx	@dptr,a
      0005F6 A3               [24] 1628 	inc	dptr
      0005F7 E0               [24] 1629 	movx	a,@dptr
      0005F8 34 00            [12] 1630 	addc	a,#0x00
      0005FA F0               [24] 1631 	movx	@dptr,a
      0005FB 90r0Cr04         [24] 1632 	mov	dptr,#_x
      0005FE E0               [24] 1633 	movx	a,@dptr
      0005FF FE               [12] 1634 	mov	r6,a
      000600 A3               [24] 1635 	inc	dptr
      000601 E0               [24] 1636 	movx	a,@dptr
      000602 FF               [12] 1637 	mov	r7,a
      000603 C3               [12] 1638 	clr	c
      000604 EE               [12] 1639 	mov	a,r6
      000605 94 20            [12] 1640 	subb	a,#0x20
      000607 EF               [12] 1641 	mov	a,r7
      000608 64 80            [12] 1642 	xrl	a,#0x80
      00060A 94 80            [12] 1643 	subb	a,#0x80
      00060C 50 03            [24] 1644 	jnc	00397$
      00060E 02r04r26         [24] 1645 	ljmp	00172$
      000611                       1646 00397$:
                                   1647 ;	life.c:90: for (y = 0; y < H; y++) {
      000611 90r0Cr06         [24] 1648 	mov	dptr,#_y
      000614 E0               [24] 1649 	movx	a,@dptr
      000615 24 01            [12] 1650 	add	a,#0x01
      000617 F0               [24] 1651 	movx	@dptr,a
      000618 A3               [24] 1652 	inc	dptr
      000619 E0               [24] 1653 	movx	a,@dptr
      00061A 34 00            [12] 1654 	addc	a,#0x00
      00061C F0               [24] 1655 	movx	@dptr,a
      00061D 90r0Cr06         [24] 1656 	mov	dptr,#_y
      000620 E0               [24] 1657 	movx	a,@dptr
      000621 FE               [12] 1658 	mov	r6,a
      000622 A3               [24] 1659 	inc	dptr
      000623 E0               [24] 1660 	movx	a,@dptr
      000624 FF               [12] 1661 	mov	r7,a
      000625 C3               [12] 1662 	clr	c
      000626 EE               [12] 1663 	mov	a,r6
      000627 94 20            [12] 1664 	subb	a,#0x20
      000629 EF               [12] 1665 	mov	a,r7
      00062A 64 80            [12] 1666 	xrl	a,#0x80
      00062C 94 80            [12] 1667 	subb	a,#0x80
      00062E 50 03            [24] 1668 	jnc	00398$
      000630 02r04r1F         [24] 1669 	ljmp	00174$
      000633                       1670 00398$:
                                   1671 ;	life.c:103: for (y = 0; y < H; y++)
      000633 90r0Cr06         [24] 1672 	mov	dptr,#_y
      000636 E4               [12] 1673 	clr	a
      000637 F0               [24] 1674 	movx	@dptr,a
      000638 A3               [24] 1675 	inc	dptr
      000639 F0               [24] 1676 	movx	@dptr,a
      00063A                       1677 00178$:
                                   1678 ;	life.c:104: for (x = 0; x < W; x++) {
      00063A 90r0Cr04         [24] 1679 	mov	dptr,#_x
      00063D E4               [12] 1680 	clr	a
      00063E F0               [24] 1681 	movx	@dptr,a
      00063F A3               [24] 1682 	inc	dptr
      000640 F0               [24] 1683 	movx	@dptr,a
      000641                       1684 00176$:
                                   1685 ;	life.c:105: if (pu[y][x] != nu[y][x])
      000641 90r0Cr06         [24] 1686 	mov	dptr,#_y
      000644 E0               [24] 1687 	movx	a,@dptr
      000645 FE               [12] 1688 	mov	r6,a
      000646 A3               [24] 1689 	inc	dptr
      000647 E0               [24] 1690 	movx	a,@dptr
      000648 C4               [12] 1691 	swap	a
      000649 23               [12] 1692 	rl	a
      00064A 54 E0            [12] 1693 	anl	a,#0xe0
      00064C CE               [12] 1694 	xch	a,r6
      00064D C4               [12] 1695 	swap	a
      00064E 23               [12] 1696 	rl	a
      00064F CE               [12] 1697 	xch	a,r6
      000650 6E               [12] 1698 	xrl	a,r6
      000651 CE               [12] 1699 	xch	a,r6
      000652 54 E0            [12] 1700 	anl	a,#0xe0
      000654 CE               [12] 1701 	xch	a,r6
      000655 6E               [12] 1702 	xrl	a,r6
      000656 FF               [12] 1703 	mov	r7,a
      000657 EE               [12] 1704 	mov	a,r6
      000658 24r04            [12] 1705 	add	a,#_pu
      00065A FC               [12] 1706 	mov	r4,a
      00065B EF               [12] 1707 	mov	a,r7
      00065C 34s00            [12] 1708 	addc	a,#(_pu >> 8)
      00065E FD               [12] 1709 	mov	r5,a
      00065F 90r0Cr04         [24] 1710 	mov	dptr,#_x
      000662 E0               [24] 1711 	movx	a,@dptr
      000663 FA               [12] 1712 	mov	r2,a
      000664 A3               [24] 1713 	inc	dptr
      000665 E0               [24] 1714 	movx	a,@dptr
      000666 FB               [12] 1715 	mov	r3,a
      000667 EA               [12] 1716 	mov	a,r2
      000668 2C               [12] 1717 	add	a,r4
      000669 F5 82            [12] 1718 	mov	dpl,a
      00066B EB               [12] 1719 	mov	a,r3
      00066C 3D               [12] 1720 	addc	a,r5
      00066D F5 83            [12] 1721 	mov	dph,a
      00066F EE               [12] 1722 	mov	a,r6
      000670 24r04            [12] 1723 	add	a,#_nu
      000672 FE               [12] 1724 	mov	r6,a
      000673 EF               [12] 1725 	mov	a,r7
      000674 34s08            [12] 1726 	addc	a,#(_nu >> 8)
      000676 FF               [12] 1727 	mov	r7,a
      000677 EA               [12] 1728 	mov	a,r2
      000678 2E               [12] 1729 	add	a,r6
      000679 FA               [12] 1730 	mov	r2,a
      00067A EB               [12] 1731 	mov	a,r3
      00067B 3F               [12] 1732 	addc	a,r7
      00067C FB               [12] 1733 	mov	r3,a
      00067D E0               [24] 1734 	movx	a,@dptr
      00067E FF               [12] 1735 	mov	r7,a
      00067F 8A 82            [24] 1736 	mov	dpl,r2
      000681 8B 83            [24] 1737 	mov	dph,r3
      000683 E0               [24] 1738 	movx	a,@dptr
      000684 FA               [12] 1739 	mov	r2,a
      000685 EF               [12] 1740 	mov	a,r7
      000686 B5 02 02         [24] 1741 	cjne	a,ar2,00399$
      000689 80 07            [24] 1742 	sjmp	00142$
      00068B                       1743 00399$:
                                   1744 ;	life.c:106: cycle2 = 0;
      00068B 90r0Cr1A         [24] 1745 	mov	dptr,#_cycle2
      00068E E4               [12] 1746 	clr	a
      00068F F0               [24] 1747 	movx	@dptr,a
      000690 A3               [24] 1748 	inc	dptr
      000691 F0               [24] 1749 	movx	@dptr,a
      000692                       1750 00142$:
                                   1751 ;	life.c:107: if (u[y][x] != nu[y][x]) {
      000692 90r0Cr06         [24] 1752 	mov	dptr,#_y
      000695 E0               [24] 1753 	movx	a,@dptr
      000696 FE               [12] 1754 	mov	r6,a
      000697 A3               [24] 1755 	inc	dptr
      000698 E0               [24] 1756 	movx	a,@dptr
      000699 C4               [12] 1757 	swap	a
      00069A 23               [12] 1758 	rl	a
      00069B 54 E0            [12] 1759 	anl	a,#0xe0
      00069D CE               [12] 1760 	xch	a,r6
      00069E C4               [12] 1761 	swap	a
      00069F 23               [12] 1762 	rl	a
      0006A0 CE               [12] 1763 	xch	a,r6
      0006A1 6E               [12] 1764 	xrl	a,r6
      0006A2 CE               [12] 1765 	xch	a,r6
      0006A3 54 E0            [12] 1766 	anl	a,#0xe0
      0006A5 CE               [12] 1767 	xch	a,r6
      0006A6 6E               [12] 1768 	xrl	a,r6
      0006A7 FF               [12] 1769 	mov	r7,a
      0006A8 EE               [12] 1770 	mov	a,r6
      0006A9 24r04            [12] 1771 	add	a,#_u
      0006AB FC               [12] 1772 	mov	r4,a
      0006AC EF               [12] 1773 	mov	a,r7
      0006AD 34s04            [12] 1774 	addc	a,#(_u >> 8)
      0006AF FD               [12] 1775 	mov	r5,a
      0006B0 90r0Cr04         [24] 1776 	mov	dptr,#_x
      0006B3 E0               [24] 1777 	movx	a,@dptr
      0006B4 FA               [12] 1778 	mov	r2,a
      0006B5 A3               [24] 1779 	inc	dptr
      0006B6 E0               [24] 1780 	movx	a,@dptr
      0006B7 FB               [12] 1781 	mov	r3,a
      0006B8 EA               [12] 1782 	mov	a,r2
      0006B9 2C               [12] 1783 	add	a,r4
      0006BA F5 82            [12] 1784 	mov	dpl,a
      0006BC EB               [12] 1785 	mov	a,r3
      0006BD 3D               [12] 1786 	addc	a,r5
      0006BE F5 83            [12] 1787 	mov	dph,a
      0006C0 EE               [12] 1788 	mov	a,r6
      0006C1 24r04            [12] 1789 	add	a,#_nu
      0006C3 FC               [12] 1790 	mov	r4,a
      0006C4 EF               [12] 1791 	mov	a,r7
      0006C5 34s08            [12] 1792 	addc	a,#(_nu >> 8)
      0006C7 FD               [12] 1793 	mov	r5,a
      0006C8 EA               [12] 1794 	mov	a,r2
      0006C9 2C               [12] 1795 	add	a,r4
      0006CA FC               [12] 1796 	mov	r4,a
      0006CB EB               [12] 1797 	mov	a,r3
      0006CC 3D               [12] 1798 	addc	a,r5
      0006CD FD               [12] 1799 	mov	r5,a
      0006CE E0               [24] 1800 	movx	a,@dptr
      0006CF F9               [12] 1801 	mov	r1,a
      0006D0 8C 82            [24] 1802 	mov	dpl,r4
      0006D2 8D 83            [24] 1803 	mov	dph,r5
      0006D4 E0               [24] 1804 	movx	a,@dptr
      0006D5 FC               [12] 1805 	mov	r4,a
      0006D6 E9               [12] 1806 	mov	a,r1
      0006D7 B5 04 02         [24] 1807 	cjne	a,ar4,00400$
      0006DA 80 2C            [24] 1808 	sjmp	00177$
      0006DC                       1809 00400$:
                                   1810 ;	life.c:108: u[y][x] = nu[y][x];
      0006DC EE               [12] 1811 	mov	a,r6
      0006DD 24r04            [12] 1812 	add	a,#_u
      0006DF FC               [12] 1813 	mov	r4,a
      0006E0 EF               [12] 1814 	mov	a,r7
      0006E1 34s04            [12] 1815 	addc	a,#(_u >> 8)
      0006E3 FD               [12] 1816 	mov	r5,a
      0006E4 EA               [12] 1817 	mov	a,r2
      0006E5 2C               [12] 1818 	add	a,r4
      0006E6 FC               [12] 1819 	mov	r4,a
      0006E7 EB               [12] 1820 	mov	a,r3
      0006E8 3D               [12] 1821 	addc	a,r5
      0006E9 FD               [12] 1822 	mov	r5,a
      0006EA EE               [12] 1823 	mov	a,r6
      0006EB 24r04            [12] 1824 	add	a,#_nu
      0006ED FE               [12] 1825 	mov	r6,a
      0006EE EF               [12] 1826 	mov	a,r7
      0006EF 34s08            [12] 1827 	addc	a,#(_nu >> 8)
      0006F1 FF               [12] 1828 	mov	r7,a
      0006F2 EA               [12] 1829 	mov	a,r2
      0006F3 2E               [12] 1830 	add	a,r6
      0006F4 F5 82            [12] 1831 	mov	dpl,a
      0006F6 EB               [12] 1832 	mov	a,r3
      0006F7 3F               [12] 1833 	addc	a,r7
      0006F8 F5 83            [12] 1834 	mov	dph,a
      0006FA E0               [24] 1835 	movx	a,@dptr
      0006FB FF               [12] 1836 	mov	r7,a
      0006FC 8C 82            [24] 1837 	mov	dpl,r4
      0006FE 8D 83            [24] 1838 	mov	dph,r5
      000700 F0               [24] 1839 	movx	@dptr,a
                                   1840 ;	life.c:109: fixed = 0;
      000701 90r0Cr18         [24] 1841 	mov	dptr,#_fixed
      000704 E4               [12] 1842 	clr	a
      000705 F0               [24] 1843 	movx	@dptr,a
      000706 A3               [24] 1844 	inc	dptr
      000707 F0               [24] 1845 	movx	@dptr,a
      000708                       1846 00177$:
                                   1847 ;	life.c:104: for (x = 0; x < W; x++) {
      000708 90r0Cr04         [24] 1848 	mov	dptr,#_x
      00070B E0               [24] 1849 	movx	a,@dptr
      00070C 24 01            [12] 1850 	add	a,#0x01
      00070E F0               [24] 1851 	movx	@dptr,a
      00070F A3               [24] 1852 	inc	dptr
      000710 E0               [24] 1853 	movx	a,@dptr
      000711 34 00            [12] 1854 	addc	a,#0x00
      000713 F0               [24] 1855 	movx	@dptr,a
      000714 90r0Cr04         [24] 1856 	mov	dptr,#_x
      000717 E0               [24] 1857 	movx	a,@dptr
      000718 FE               [12] 1858 	mov	r6,a
      000719 A3               [24] 1859 	inc	dptr
      00071A E0               [24] 1860 	movx	a,@dptr
      00071B FF               [12] 1861 	mov	r7,a
      00071C C3               [12] 1862 	clr	c
      00071D EE               [12] 1863 	mov	a,r6
      00071E 94 20            [12] 1864 	subb	a,#0x20
      000720 EF               [12] 1865 	mov	a,r7
      000721 64 80            [12] 1866 	xrl	a,#0x80
      000723 94 80            [12] 1867 	subb	a,#0x80
      000725 50 03            [24] 1868 	jnc	00401$
      000727 02r06r41         [24] 1869 	ljmp	00176$
      00072A                       1870 00401$:
                                   1871 ;	life.c:103: for (y = 0; y < H; y++)
      00072A 90r0Cr06         [24] 1872 	mov	dptr,#_y
      00072D E0               [24] 1873 	movx	a,@dptr
      00072E 24 01            [12] 1874 	add	a,#0x01
      000730 F0               [24] 1875 	movx	@dptr,a
      000731 A3               [24] 1876 	inc	dptr
      000732 E0               [24] 1877 	movx	a,@dptr
      000733 34 00            [12] 1878 	addc	a,#0x00
      000735 F0               [24] 1879 	movx	@dptr,a
      000736 90r0Cr06         [24] 1880 	mov	dptr,#_y
      000739 E0               [24] 1881 	movx	a,@dptr
      00073A FE               [12] 1882 	mov	r6,a
      00073B A3               [24] 1883 	inc	dptr
      00073C E0               [24] 1884 	movx	a,@dptr
      00073D FF               [12] 1885 	mov	r7,a
      00073E C3               [12] 1886 	clr	c
      00073F EE               [12] 1887 	mov	a,r6
      000740 94 20            [12] 1888 	subb	a,#0x20
      000742 EF               [12] 1889 	mov	a,r7
      000743 64 80            [12] 1890 	xrl	a,#0x80
      000745 94 80            [12] 1891 	subb	a,#0x80
      000747 50 03            [24] 1892 	jnc	00402$
      000749 02r06r3A         [24] 1893 	ljmp	00178$
      00074C                       1894 00402$:
                                   1895 ;	life.c:141: if (fixed || cycle2) {
      00074C 90r0Cr18         [24] 1896 	mov	dptr,#_fixed
      00074F E0               [24] 1897 	movx	a,@dptr
      000750 F5 F0            [12] 1898 	mov	b,a
      000752 A3               [24] 1899 	inc	dptr
      000753 E0               [24] 1900 	movx	a,@dptr
      000754 45 F0            [12] 1901 	orl	a,b
      000756 70 0F            [24] 1902 	jnz	00103$
      000758 90r0Cr1A         [24] 1903 	mov	dptr,#_cycle2
      00075B E0               [24] 1904 	movx	a,@dptr
      00075C F5 F0            [12] 1905 	mov	b,a
      00075E A3               [24] 1906 	inc	dptr
      00075F E0               [24] 1907 	movx	a,@dptr
      000760 45 F0            [12] 1908 	orl	a,b
      000762 70 03            [24] 1909 	jnz	00404$
      000764 02r01r66         [24] 1910 	ljmp	00107$
      000767                       1911 00404$:
      000767                       1912 00103$:
                                   1913 ;	life.c:142: printf("DONE\n\r");
      000767 74r32            [12] 1914 	mov	a,#___str_7
      000769 C0 E0            [24] 1915 	push	acc
      00076B 74s00            [12] 1916 	mov	a,#(___str_7 >> 8)
      00076D C0 E0            [24] 1917 	push	acc
      00076F 74 80            [12] 1918 	mov	a,#0x80
      000771 C0 E0            [24] 1919 	push	acc
      000773 12r00r00         [24] 1920 	lcall	_printf
      000776 15 81            [12] 1921 	dec	sp
      000778 15 81            [12] 1922 	dec	sp
      00077A 15 81            [12] 1923 	dec	sp
                                   1924 ;	life.c:143: (void)getchar();
      00077C 12r00r05         [24] 1925 	lcall	_getchar
                                   1926 ;	life.c:144: break;
      00077F                       1927 00109$:
                                   1928 ;	life.c:147: if (i1) {
      00077F 90r00r02         [24] 1929 	mov	dptr,#_i1
      000782 E0               [24] 1930 	movx	a,@dptr
      000783 F5 F0            [12] 1931 	mov	b,a
      000785 A3               [24] 1932 	inc	dptr
      000786 E0               [24] 1933 	movx	a,@dptr
      000787 45 F0            [12] 1934 	orl	a,b
      000789 70 03            [24] 1935 	jnz	00405$
      00078B 02r00r50         [24] 1936 	ljmp	00112$
      00078E                       1937 00405$:
                                   1938 ;	life.c:148: printf("BREAK\n\r");
      00078E 74r39            [12] 1939 	mov	a,#___str_8
      000790 C0 E0            [24] 1940 	push	acc
      000792 74s00            [12] 1941 	mov	a,#(___str_8 >> 8)
      000794 C0 E0            [24] 1942 	push	acc
      000796 74 80            [12] 1943 	mov	a,#0x80
      000798 C0 E0            [24] 1944 	push	acc
      00079A 12r00r00         [24] 1945 	lcall	_printf
      00079D 15 81            [12] 1946 	dec	sp
      00079F 15 81            [12] 1947 	dec	sp
      0007A1 15 81            [12] 1948 	dec	sp
                                   1949 ;	life.c:149: (void)getchar();
      0007A3 12r00r05         [24] 1950 	lcall	_getchar
      0007A6 02r00r50         [24] 1951 	ljmp	00112$
      0007A9                       1952 00114$:
                                   1953 ;	life.c:153: EA = 0;
                                   1954 ;	assignBit
      0007A9 C2 AF            [12] 1955 	clr	_EA
                                   1956 ;	life.c:155: printf("TERM\n\r");
      0007AB 74r41            [12] 1957 	mov	a,#___str_9
      0007AD C0 E0            [24] 1958 	push	acc
      0007AF 74s00            [12] 1959 	mov	a,#(___str_9 >> 8)
      0007B1 C0 E0            [24] 1960 	push	acc
      0007B3 74 80            [12] 1961 	mov	a,#0x80
      0007B5 C0 E0            [24] 1962 	push	acc
      0007B7 12r00r00         [24] 1963 	lcall	_printf
      0007BA 15 81            [12] 1964 	dec	sp
      0007BC 15 81            [12] 1965 	dec	sp
      0007BE 15 81            [12] 1966 	dec	sp
                                   1967 ;	life.c:156: (void)getchar();
      0007C0 12r00r05         [24] 1968 	lcall	_getchar
                                   1969 ;	life.c:160: __endasm;
      0007C3 02 00 00         [24] 1970 	ljmp	0
                                   1971 ;	life.c:161: }
      0007C6 22               [24] 1972 	ret
                                   1973 	.area CSEG    (CODE)
                                   1974 	.area CONST   (CODE)
                                   1975 	.area CONST   (CODE)
      000000                       1976 ___str_0:
      000000 25 30 34 78           1977 	.ascii "%04x"
      000004 00                    1978 	.db 0x00
                                   1979 	.area CSEG    (CODE)
                                   1980 	.area CONST   (CODE)
      000005                       1981 ___str_1:
      000005 1B                    1982 	.db 0x1b
      000006 5B 32 4A              1983 	.ascii "[2J"
      000009 1B                    1984 	.db 0x1b
      00000A 5B 6D                 1985 	.ascii "[m"
      00000C 00                    1986 	.db 0x00
                                   1987 	.area CSEG    (CODE)
                                   1988 	.area CONST   (CODE)
      00000D                       1989 ___str_2:
      00000D 0D                    1990 	.db 0x0d
      00000E 0A                    1991 	.db 0x0a
      00000F 00                    1992 	.db 0x00
                                   1993 	.area CSEG    (CODE)
                                   1994 	.area CONST   (CODE)
      000010                       1995 ___str_3:
      000010 1B                    1996 	.db 0x1b
      000011 5B 30 31 6D 5B 5D     1997 	.ascii "[01m[]"
      000017 1B                    1998 	.db 0x1b
      000018 5B 6D                 1999 	.ascii "[m"
      00001A 00                    2000 	.db 0x00
                                   2001 	.area CSEG    (CODE)
                                   2002 	.area CONST   (CODE)
      00001B                       2003 ___str_4:
      00001B 2D 2D                 2004 	.ascii "--"
      00001D 00                    2005 	.db 0x00
                                   2006 	.area CSEG    (CODE)
                                   2007 	.area CONST   (CODE)
      00001E                       2008 ___str_5:
      00001E 1B                    2009 	.db 0x1b
      00001F 5B 32 4A              2010 	.ascii "[2J"
      000022 1B                    2011 	.db 0x1b
      000023 5B 6D 49 4E 49 54     2012 	.ascii "[mINIT"
      000029 0A                    2013 	.db 0x0a
      00002A 0D                    2014 	.db 0x0d
      00002B 00                    2015 	.db 0x00
                                   2016 	.area CSEG    (CODE)
                                   2017 	.area CONST   (CODE)
      00002C                       2018 ___str_6:
      00002C 52 44 59              2019 	.ascii "RDY"
      00002F 0A                    2020 	.db 0x0a
      000030 0D                    2021 	.db 0x0d
      000031 00                    2022 	.db 0x00
                                   2023 	.area CSEG    (CODE)
                                   2024 	.area CONST   (CODE)
      000032                       2025 ___str_7:
      000032 44 4F 4E 45           2026 	.ascii "DONE"
      000036 0A                    2027 	.db 0x0a
      000037 0D                    2028 	.db 0x0d
      000038 00                    2029 	.db 0x00
                                   2030 	.area CSEG    (CODE)
                                   2031 	.area CONST   (CODE)
      000039                       2032 ___str_8:
      000039 42 52 45 41 4B        2033 	.ascii "BREAK"
      00003E 0A                    2034 	.db 0x0a
      00003F 0D                    2035 	.db 0x0d
      000040 00                    2036 	.db 0x00
                                   2037 	.area CSEG    (CODE)
                                   2038 	.area CONST   (CODE)
      000041                       2039 ___str_9:
      000041 54 45 52 4D           2040 	.ascii "TERM"
      000045 0A                    2041 	.db 0x0a
      000046 0D                    2042 	.db 0x0d
      000047 00                    2043 	.db 0x00
                                   2044 	.area CSEG    (CODE)
                                   2045 	.area XINIT   (CODE)
                                   2046 	.area CABS    (ABS,CODE)
