                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar_poll
                                     16 	.globl _getchar
                                     17 	.globl _putchar
                                     18 	.globl _toupper
                                     19 	.globl ___memcpy
                                     20 	.globl _memset
                                     21 	.globl _srand
                                     22 	.globl _rand
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000C8   169 _T2CON	=	0x00c8
                           0000C9   170 _T2MOD	=	0x00c9
                           0000CA   171 _RCAP2L	=	0x00ca
                           0000CB   172 _RCAP2H	=	0x00cb
                           0000CC   173 _TL2	=	0x00cc
                           0000CD   174 _TH2	=	0x00cd
                           0000D0   175 _PSW	=	0x00d0
                           0000E0   176 _ACC	=	0x00e0
                           0000E0   177 _A	=	0x00e0
                           0000F0   178 _B	=	0x00f0
                                    179 ;--------------------------------------------------------
                                    180 ; special function bits
                                    181 ;--------------------------------------------------------
                                    182 	.area RSEG    (ABS,DATA)
      000000                        183 	.org 0x0000
                           000080   184 _P0_0	=	0x0080
                           000081   185 _P0_1	=	0x0081
                           000082   186 _P0_2	=	0x0082
                           000083   187 _P0_3	=	0x0083
                           000084   188 _P0_4	=	0x0084
                           000085   189 _P0_5	=	0x0085
                           000086   190 _P0_6	=	0x0086
                           000087   191 _P0_7	=	0x0087
                           000088   192 _IT0	=	0x0088
                           000089   193 _IE0	=	0x0089
                           00008A   194 _IT1	=	0x008a
                           00008B   195 _IE1	=	0x008b
                           00008C   196 _TR0	=	0x008c
                           00008D   197 _TF0	=	0x008d
                           00008E   198 _TR1	=	0x008e
                           00008F   199 _TF1	=	0x008f
                           000090   200 _P1_0	=	0x0090
                           000091   201 _P1_1	=	0x0091
                           000092   202 _P1_2	=	0x0092
                           000093   203 _P1_3	=	0x0093
                           000094   204 _P1_4	=	0x0094
                           000095   205 _P1_5	=	0x0095
                           000096   206 _P1_6	=	0x0096
                           000097   207 _P1_7	=	0x0097
                           000090   208 _T2	=	0x0090
                           000091   209 _T2EX	=	0x0091
                           000098   210 _RI	=	0x0098
                           000099   211 _TI	=	0x0099
                           00009A   212 _RB8	=	0x009a
                           00009B   213 _TB8	=	0x009b
                           00009C   214 _REN	=	0x009c
                           00009D   215 _SM2	=	0x009d
                           00009E   216 _SM1	=	0x009e
                           00009F   217 _SM0	=	0x009f
                           0000A0   218 _P2_0	=	0x00a0
                           0000A1   219 _P2_1	=	0x00a1
                           0000A2   220 _P2_2	=	0x00a2
                           0000A3   221 _P2_3	=	0x00a3
                           0000A4   222 _P2_4	=	0x00a4
                           0000A5   223 _P2_5	=	0x00a5
                           0000A6   224 _P2_6	=	0x00a6
                           0000A7   225 _P2_7	=	0x00a7
                           0000A8   226 _EX0	=	0x00a8
                           0000A9   227 _ET0	=	0x00a9
                           0000AA   228 _EX1	=	0x00aa
                           0000AB   229 _ET1	=	0x00ab
                           0000AC   230 _ES	=	0x00ac
                           0000AD   231 _ET2	=	0x00ad
                           0000AF   232 _EA	=	0x00af
                           0000B0   233 _P3_0	=	0x00b0
                           0000B1   234 _P3_1	=	0x00b1
                           0000B2   235 _P3_2	=	0x00b2
                           0000B3   236 _P3_3	=	0x00b3
                           0000B4   237 _P3_4	=	0x00b4
                           0000B5   238 _P3_5	=	0x00b5
                           0000B6   239 _P3_6	=	0x00b6
                           0000B7   240 _P3_7	=	0x00b7
                           0000B0   241 _RXD	=	0x00b0
                           0000B1   242 _TXD	=	0x00b1
                           0000B2   243 _INT0	=	0x00b2
                           0000B3   244 _INT1	=	0x00b3
                           0000B4   245 _T0	=	0x00b4
                           0000B5   246 _T1	=	0x00b5
                           0000B6   247 _WR	=	0x00b6
                           0000B7   248 _RD	=	0x00b7
                           0000B8   249 _PX0	=	0x00b8
                           0000B9   250 _PT0	=	0x00b9
                           0000BA   251 _PX1	=	0x00ba
                           0000BB   252 _PT1	=	0x00bb
                           0000BC   253 _PS	=	0x00bc
                           0000BD   254 _PT2	=	0x00bd
                           0000C8   255 _T2CON_0	=	0x00c8
                           0000C9   256 _T2CON_1	=	0x00c9
                           0000CA   257 _T2CON_2	=	0x00ca
                           0000CB   258 _T2CON_3	=	0x00cb
                           0000CC   259 _T2CON_4	=	0x00cc
                           0000CD   260 _T2CON_5	=	0x00cd
                           0000CE   261 _T2CON_6	=	0x00ce
                           0000CF   262 _T2CON_7	=	0x00cf
                           0000C8   263 _CP_RL2	=	0x00c8
                           0000C9   264 _C_T2	=	0x00c9
                           0000CA   265 _TR2	=	0x00ca
                           0000CB   266 _EXEN2	=	0x00cb
                           0000CC   267 _TCLK	=	0x00cc
                           0000CD   268 _RCLK	=	0x00cd
                           0000CE   269 _EXF2	=	0x00ce
                           0000CF   270 _TF2	=	0x00cf
                           0000D0   271 _P	=	0x00d0
                           0000D1   272 _FL	=	0x00d1
                           0000D2   273 _OV	=	0x00d2
                           0000D3   274 _RS0	=	0x00d3
                           0000D4   275 _RS1	=	0x00d4
                           0000D5   276 _F0	=	0x00d5
                           0000D6   277 _AC	=	0x00d6
                           0000D7   278 _CY	=	0x00d7
                                    279 ;--------------------------------------------------------
                                    280 ; overlayable register banks
                                    281 ;--------------------------------------------------------
                                    282 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        283 	.ds 8
                                    284 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable bit register bank
                                    288 ;--------------------------------------------------------
                                    289 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        290 bits:
      000000                        291 	.ds 1
                           008000   292 	b0 = bits[0]
                           008100   293 	b1 = bits[1]
                           008200   294 	b2 = bits[2]
                           008300   295 	b3 = bits[3]
                           008400   296 	b4 = bits[4]
                           008500   297 	b5 = bits[5]
                           008600   298 	b6 = bits[6]
                           008700   299 	b7 = bits[7]
                                    300 ;--------------------------------------------------------
                                    301 ; internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area DSEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; overlayable items in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 ;--------------------------------------------------------
                                    308 ; Stack segment in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 	.area	SSEG
      000000                        311 __start__stack:
      000000                        312 	.ds	1
                                    313 
                                    314 ;--------------------------------------------------------
                                    315 ; indirectly addressable internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area ISEG    (DATA)
      000000                        318 _digits:
      000000                        319 	.ds 16
      000010                        320 _i0:
      000010                        321 	.ds 1
      000011                        322 _i1:
      000011                        323 	.ds 1
      000012                        324 _OE76:
      000012                        325 	.ds 1
      000013                        326 _x:
      000013                        327 	.ds 2
      000015                        328 _y:
      000015                        329 	.ds 2
      000017                        330 _j:
      000017                        331 	.ds 2
      000019                        332 _c:
      000019                        333 	.ds 2
      00001B                        334 _n:
      00001B                        335 	.ds 1
      00001C                        336 _fixed:
      00001C                        337 	.ds 1
      00001D                        338 _cycle2:
      00001D                        339 	.ds 1
      00001E                        340 _dx:
      00001E                        341 	.ds 2
      000020                        342 _dy:
      000020                        343 	.ds 2
      000022                        344 _generation:
      000022                        345 	.ds 4
                                    346 ;--------------------------------------------------------
                                    347 ; absolute internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area IABS    (ABS,DATA)
                                    350 	.area IABS    (ABS,DATA)
                                    351 ;--------------------------------------------------------
                                    352 ; bit data
                                    353 ;--------------------------------------------------------
                                    354 	.area BSEG    (BIT)
                                    355 ;--------------------------------------------------------
                                    356 ; paged external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area PSEG    (PAG,XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XSEG    (XDATA)
                           008000   363 _RND	=	0x8000
                           00F006   364 _OEreg	=	0xf006
      000000                        365 _iu:
      000000                        366 	.ds 9216
      002400                        367 _pu:
      002400                        368 	.ds 9216
      004800                        369 _u:
      004800                        370 	.ds 9216
      006C00                        371 _nu:
      006C00                        372 	.ds 9216
                                    373 ;--------------------------------------------------------
                                    374 ; absolute external ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XABS    (ABS,XDATA)
                                    377 ;--------------------------------------------------------
                                    378 ; external initialized ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area XISEG   (XDATA)
                                    381 	.area HOME    (CODE)
                                    382 	.area GSINIT0 (CODE)
                                    383 	.area GSINIT1 (CODE)
                                    384 	.area GSINIT2 (CODE)
                                    385 	.area GSINIT3 (CODE)
                                    386 	.area GSINIT4 (CODE)
                                    387 	.area GSINIT5 (CODE)
                                    388 	.area GSINIT  (CODE)
                                    389 	.area GSFINAL (CODE)
                                    390 	.area CSEG    (CODE)
                                    391 ;--------------------------------------------------------
                                    392 ; interrupt vector 
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
      000000                        395 __interrupt_vect:
      000000 02r00r00         [24]  396 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  397 	ljmp	_int0
      000006                        398 	.ds	5
      00000B 32               [24]  399 	reti
      00000C                        400 	.ds	7
      000013 02r00r0C         [24]  401 	ljmp	_int1
                                    402 ;--------------------------------------------------------
                                    403 ; global & static initialisations
                                    404 ;--------------------------------------------------------
                                    405 	.area HOME    (CODE)
                                    406 	.area GSINIT  (CODE)
                                    407 	.area GSFINAL (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.globl __sdcc_gsinit_startup
                                    410 	.globl __sdcc_program_startup
                                    411 	.globl __start__stack
                                    412 	.globl __mcs51_genXINIT
                                    413 	.globl __mcs51_genXRAMCLEAR
                                    414 	.globl __mcs51_genRAMCLEAR
                                    415 ;	life.c:11: __idata static const char digits[16] = {
      000000 78r00            [12]  416 	mov	r0,#_digits
      000002 76 30            [12]  417 	mov	@r0,#0x30
      000004 78r01            [12]  418 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  419 	mov	@r0,#0x31
      000008 78r02            [12]  420 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  421 	mov	@r0,#0x32
      00000C 78r03            [12]  422 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  423 	mov	@r0,#0x33
      000010 78r04            [12]  424 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  425 	mov	@r0,#0x34
      000014 78r05            [12]  426 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  427 	mov	@r0,#0x35
      000018 78r06            [12]  428 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  429 	mov	@r0,#0x36
      00001C 78r07            [12]  430 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  431 	mov	@r0,#0x37
      000020 78r08            [12]  432 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  433 	mov	@r0,#0x38
      000024 78r09            [12]  434 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  435 	mov	@r0,#0x39
      000028 78r0A            [12]  436 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  437 	mov	@r0,#0x41
      00002C 78r0B            [12]  438 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  439 	mov	@r0,#0x42
      000030 78r0C            [12]  440 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  441 	mov	@r0,#0x43
      000034 78r0D            [12]  442 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  443 	mov	@r0,#0x44
      000038 78r0E            [12]  444 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  445 	mov	@r0,#0x45
      00003C 78r0F            [12]  446 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  447 	mov	@r0,#0x46
                                    448 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  449 	ljmp	__sdcc_program_startup
                                    450 ;--------------------------------------------------------
                                    451 ; Home
                                    452 ;--------------------------------------------------------
                                    453 	.area HOME    (CODE)
                                    454 	.area HOME    (CODE)
      000016                        455 __sdcc_program_startup:
      000016 02r02rB7         [24]  456 	ljmp	_main
                                    457 ;	return from main will return to caller
                                    458 ;--------------------------------------------------------
                                    459 ; code
                                    460 ;--------------------------------------------------------
                                    461 	.area CSEG    (CODE)
                                    462 ;------------------------------------------------------------
                                    463 ;Allocation info for local variables in function 'int0'
                                    464 ;------------------------------------------------------------
                                    465 ;	life.c:40: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    466 ;	-----------------------------------------
                                    467 ;	 function int0
                                    468 ;	-----------------------------------------
      000000                        469 _int0:
                           00000F   470 	ar7 = 0x0f
                           00000E   471 	ar6 = 0x0e
                           00000D   472 	ar5 = 0x0d
                           00000C   473 	ar4 = 0x0c
                           00000B   474 	ar3 = 0x0b
                           00000A   475 	ar2 = 0x0a
                           000009   476 	ar1 = 0x09
                           000008   477 	ar0 = 0x08
      000000 C0 D0            [24]  478 	push	psw
      000002 75 D0 08         [24]  479 	mov	psw,#0x08
                                    480 ;	life.c:41: i0 = 1;
      000005 78r10            [12]  481 	mov	r0,#_i0
      000007 76 01            [12]  482 	mov	@r0,#0x01
                                    483 ;	life.c:42: }
      000009 D0 D0            [24]  484 	pop	psw
      00000B 32               [24]  485 	reti
                                    486 ;	eliminated unneeded push/pop dpl
                                    487 ;	eliminated unneeded push/pop dph
                                    488 ;	eliminated unneeded push/pop b
                                    489 ;	eliminated unneeded push/pop acc
                                    490 ;------------------------------------------------------------
                                    491 ;Allocation info for local variables in function 'int1'
                                    492 ;------------------------------------------------------------
                                    493 ;	life.c:44: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    494 ;	-----------------------------------------
                                    495 ;	 function int1
                                    496 ;	-----------------------------------------
      00000C                        497 _int1:
      00000C C0 D0            [24]  498 	push	psw
      00000E 75 D0 08         [24]  499 	mov	psw,#0x08
                                    500 ;	life.c:45: i1 = 1;
      000011 78r11            [12]  501 	mov	r0,#_i1
      000013 76 01            [12]  502 	mov	@r0,#0x01
                                    503 ;	life.c:46: }
      000015 D0 D0            [24]  504 	pop	psw
      000017 32               [24]  505 	reti
                                    506 ;	eliminated unneeded push/pop dpl
                                    507 ;	eliminated unneeded push/pop dph
                                    508 ;	eliminated unneeded push/pop b
                                    509 ;	eliminated unneeded push/pop acc
                                    510 ;------------------------------------------------------------
                                    511 ;Allocation info for local variables in function 'flashOE'
                                    512 ;------------------------------------------------------------
                                    513 ;	life.c:56: static void flashOE(void) {
                                    514 ;	-----------------------------------------
                                    515 ;	 function flashOE
                                    516 ;	-----------------------------------------
      000018                        517 _flashOE:
                           000007   518 	ar7 = 0x07
                           000006   519 	ar6 = 0x06
                           000005   520 	ar5 = 0x05
                           000004   521 	ar4 = 0x04
                           000003   522 	ar3 = 0x03
                           000002   523 	ar2 = 0x02
                           000001   524 	ar1 = 0x01
                           000000   525 	ar0 = 0x00
                                    526 ;	life.c:57: P1_7 = 0;
                                    527 ;	assignBit
      000018 C2 97            [12]  528 	clr	_P1_7
                                    529 ;	life.c:62: __endasm;
      00001A 00               [12]  530 	nop
      00001B 00               [12]  531 	nop
      00001C 00               [12]  532 	nop
                                    533 ;	life.c:63: OEreg = OE76;
      00001D 78r12            [12]  534 	mov	r0,#_OE76
      00001F 90 F0 06         [24]  535 	mov	dptr,#_OEreg
      000022 E6               [12]  536 	mov	a,@r0
      000023 F0               [24]  537 	movx	@dptr,a
                                    538 ;	life.c:64: P1_7 = 1;
                                    539 ;	assignBit
      000024 D2 97            [12]  540 	setb	_P1_7
                                    541 ;	life.c:69: __endasm;
      000026 00               [12]  542 	nop
      000027 00               [12]  543 	nop
      000028 00               [12]  544 	nop
                                    545 ;	life.c:71: return;
                                    546 ;	life.c:72: }
      000029 22               [24]  547 	ret
                                    548 ;------------------------------------------------------------
                                    549 ;Allocation info for local variables in function 'show'
                                    550 ;------------------------------------------------------------
                                    551 ;hdr                       Allocated to registers r7 
                                    552 ;__1310720005              Allocated to registers 
                                    553 ;s                         Allocated to registers r4 r5 r6 
                                    554 ;__1966080007              Allocated to registers 
                                    555 ;s                         Allocated to registers r5 r6 r7 
                                    556 ;__1310720001              Allocated to registers r6 r7 
                                    557 ;a                         Allocated to registers 
                                    558 ;__1310720003              Allocated to registers r6 r7 
                                    559 ;a                         Allocated to registers 
                                    560 ;__1966080010              Allocated to registers 
                                    561 ;s                         Allocated to registers r5 r6 r7 
                                    562 ;__2621440013              Allocated to registers 
                                    563 ;s                         Allocated to registers r5 r6 r7 
                                    564 ;__1310720015              Allocated to registers 
                                    565 ;s                         Allocated to registers r5 r6 r7 
                                    566 ;------------------------------------------------------------
                                    567 ;	life.c:108: void show(char hdr) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function show
                                    570 ;	-----------------------------------------
      00002A                        571 _show:
      00002A AF 82            [24]  572 	mov	r7,dpl
                                    573 ;	life.c:109: printstr("\033[?25l");
      00002C 7Cr00            [12]  574 	mov	r4,#___str_0
      00002E 7Ds00            [12]  575 	mov	r5,#(___str_0 >> 8)
      000030 7E 80            [12]  576 	mov	r6,#0x80
                                    577 ;	life.c:35: return;
      000032                        578 00125$:
                                    579 ;	life.c:33: for (; *s; s++) putchar(*s);
      000032 8C 82            [24]  580 	mov	dpl,r4
      000034 8D 83            [24]  581 	mov	dph,r5
      000036 8E F0            [24]  582 	mov	b,r6
      000038 12r00r00         [24]  583 	lcall	__gptrget
      00003B FB               [12]  584 	mov	r3,a
      00003C 60 20            [24]  585 	jz	00109$
      00003E 7A 00            [12]  586 	mov	r2,#0x00
      000040 8B 82            [24]  587 	mov	dpl,r3
      000042 8A 83            [24]  588 	mov	dph,r2
      000044 C0 07            [24]  589 	push	ar7
      000046 C0 06            [24]  590 	push	ar6
      000048 C0 05            [24]  591 	push	ar5
      00004A C0 04            [24]  592 	push	ar4
      00004C 12r00r00         [24]  593 	lcall	_putchar
      00004F D0 04            [24]  594 	pop	ar4
      000051 D0 05            [24]  595 	pop	ar5
      000053 D0 06            [24]  596 	pop	ar6
      000055 D0 07            [24]  597 	pop	ar7
      000057 0C               [12]  598 	inc	r4
                                    599 ;	life.c:109: printstr("\033[?25l");
      000058 BC 00 D7         [24]  600 	cjne	r4,#0x00,00125$
      00005B 0D               [12]  601 	inc	r5
      00005C 80 D4            [24]  602 	sjmp	00125$
      00005E                        603 00109$:
                                    604 ;	life.c:111: if (hdr) {
      00005E EF               [12]  605 	mov	a,r7
      00005F 70 03            [24]  606 	jnz	00220$
      000061 02r01rE2         [24]  607 	ljmp	00102$
      000064                        608 00220$:
                                    609 ;	life.c:112: printstr("\033[2JGEN ");
      000064 7Dr07            [12]  610 	mov	r5,#___str_1
      000066 7Es00            [12]  611 	mov	r6,#(___str_1 >> 8)
      000068 7F 80            [12]  612 	mov	r7,#0x80
                                    613 ;	life.c:35: return;
      00006A                        614 00128$:
                                    615 ;	life.c:33: for (; *s; s++) putchar(*s);
      00006A 8D 82            [24]  616 	mov	dpl,r5
      00006C 8E 83            [24]  617 	mov	dph,r6
      00006E 8F F0            [24]  618 	mov	b,r7
      000070 12r00r00         [24]  619 	lcall	__gptrget
      000073 FC               [12]  620 	mov	r4,a
      000074 60 1C            [24]  621 	jz	00111$
      000076 7B 00            [12]  622 	mov	r3,#0x00
      000078 8C 82            [24]  623 	mov	dpl,r4
      00007A 8B 83            [24]  624 	mov	dph,r3
      00007C C0 07            [24]  625 	push	ar7
      00007E C0 06            [24]  626 	push	ar6
      000080 C0 05            [24]  627 	push	ar5
      000082 12r00r00         [24]  628 	lcall	_putchar
      000085 D0 05            [24]  629 	pop	ar5
      000087 D0 06            [24]  630 	pop	ar6
      000089 D0 07            [24]  631 	pop	ar7
      00008B 0D               [12]  632 	inc	r5
                                    633 ;	life.c:112: printstr("\033[2JGEN ");
      00008C BD 00 DB         [24]  634 	cjne	r5,#0x00,00128$
      00008F 0E               [12]  635 	inc	r6
      000090 80 D8            [24]  636 	sjmp	00128$
      000092                        637 00111$:
                                    638 ;	life.c:102: print16x(generation[1]);
      000092 78r24            [12]  639 	mov	r0,#(_generation + 0x0002)
      000094 86 06            [24]  640 	mov	ar6,@r0
      000096 08               [12]  641 	inc	r0
                                    642 ;	life.c:24: putchar(digits[(a >> 12) & 0xf]);
      000097 E6               [12]  643 	mov	a,@r0
      000098 FF               [12]  644 	mov	r7,a
      000099 C4               [12]  645 	swap	a
      00009A 54 0F            [12]  646 	anl	a,#0x0f
      00009C FC               [12]  647 	mov	r4,a
      00009D 53 04 0F         [24]  648 	anl	ar4,#0x0f
      0000A0 EC               [12]  649 	mov	a,r4
      0000A1 24r00            [12]  650 	add	a,#_digits
      0000A3 F9               [12]  651 	mov	r1,a
      0000A4 87 05            [24]  652 	mov	ar5,@r1
      0000A6 7C 00            [12]  653 	mov	r4,#0x00
      0000A8 8D 82            [24]  654 	mov	dpl,r5
      0000AA 8C 83            [24]  655 	mov	dph,r4
      0000AC C0 07            [24]  656 	push	ar7
      0000AE C0 06            [24]  657 	push	ar6
      0000B0 12r00r00         [24]  658 	lcall	_putchar
      0000B3 D0 06            [24]  659 	pop	ar6
      0000B5 D0 07            [24]  660 	pop	ar7
                                    661 ;	life.c:25: putchar(digits[(a >> 8) & 0xf]);
      0000B7 8F 05            [24]  662 	mov	ar5,r7
      0000B9 53 05 0F         [24]  663 	anl	ar5,#0x0f
      0000BC ED               [12]  664 	mov	a,r5
      0000BD 24r00            [12]  665 	add	a,#_digits
      0000BF F9               [12]  666 	mov	r1,a
      0000C0 87 05            [24]  667 	mov	ar5,@r1
      0000C2 7C 00            [12]  668 	mov	r4,#0x00
      0000C4 8D 82            [24]  669 	mov	dpl,r5
      0000C6 8C 83            [24]  670 	mov	dph,r4
      0000C8 C0 07            [24]  671 	push	ar7
      0000CA C0 06            [24]  672 	push	ar6
      0000CC 12r00r00         [24]  673 	lcall	_putchar
      0000CF D0 06            [24]  674 	pop	ar6
      0000D1 D0 07            [24]  675 	pop	ar7
                                    676 ;	life.c:26: putchar(digits[(a >> 4) & 0xf]);
      0000D3 8E 04            [24]  677 	mov	ar4,r6
      0000D5 EF               [12]  678 	mov	a,r7
      0000D6 C4               [12]  679 	swap	a
      0000D7 CC               [12]  680 	xch	a,r4
      0000D8 C4               [12]  681 	swap	a
      0000D9 54 0F            [12]  682 	anl	a,#0x0f
      0000DB 6C               [12]  683 	xrl	a,r4
      0000DC CC               [12]  684 	xch	a,r4
      0000DD 54 0F            [12]  685 	anl	a,#0x0f
      0000DF CC               [12]  686 	xch	a,r4
      0000E0 6C               [12]  687 	xrl	a,r4
      0000E1 CC               [12]  688 	xch	a,r4
      0000E2 53 04 0F         [24]  689 	anl	ar4,#0x0f
      0000E5 EC               [12]  690 	mov	a,r4
      0000E6 24r00            [12]  691 	add	a,#_digits
      0000E8 F9               [12]  692 	mov	r1,a
      0000E9 87 05            [24]  693 	mov	ar5,@r1
      0000EB 7C 00            [12]  694 	mov	r4,#0x00
      0000ED 8D 82            [24]  695 	mov	dpl,r5
      0000EF 8C 83            [24]  696 	mov	dph,r4
      0000F1 C0 07            [24]  697 	push	ar7
      0000F3 C0 06            [24]  698 	push	ar6
      0000F5 12r00r00         [24]  699 	lcall	_putchar
      0000F8 D0 06            [24]  700 	pop	ar6
      0000FA D0 07            [24]  701 	pop	ar7
                                    702 ;	life.c:27: putchar(digits[a & 0xf]);
      0000FC 53 06 0F         [24]  703 	anl	ar6,#0x0f
      0000FF EE               [12]  704 	mov	a,r6
      000100 24r00            [12]  705 	add	a,#_digits
      000102 F9               [12]  706 	mov	r1,a
      000103 87 07            [24]  707 	mov	ar7,@r1
      000105 7E 00            [12]  708 	mov	r6,#0x00
      000107 8F 82            [24]  709 	mov	dpl,r7
      000109 8E 83            [24]  710 	mov	dph,r6
      00010B 12r00r00         [24]  711 	lcall	_putchar
                                    712 ;	life.c:103: print16x(generation[0]);
      00010E 78r22            [12]  713 	mov	r0,#_generation
      000110 86 06            [24]  714 	mov	ar6,@r0
      000112 08               [12]  715 	inc	r0
                                    716 ;	life.c:24: putchar(digits[(a >> 12) & 0xf]);
      000113 E6               [12]  717 	mov	a,@r0
      000114 FF               [12]  718 	mov	r7,a
      000115 C4               [12]  719 	swap	a
      000116 54 0F            [12]  720 	anl	a,#0x0f
      000118 FC               [12]  721 	mov	r4,a
      000119 53 04 0F         [24]  722 	anl	ar4,#0x0f
      00011C EC               [12]  723 	mov	a,r4
      00011D 24r00            [12]  724 	add	a,#_digits
      00011F F9               [12]  725 	mov	r1,a
      000120 87 05            [24]  726 	mov	ar5,@r1
      000122 7C 00            [12]  727 	mov	r4,#0x00
      000124 8D 82            [24]  728 	mov	dpl,r5
      000126 8C 83            [24]  729 	mov	dph,r4
      000128 C0 07            [24]  730 	push	ar7
      00012A C0 06            [24]  731 	push	ar6
      00012C 12r00r00         [24]  732 	lcall	_putchar
      00012F D0 06            [24]  733 	pop	ar6
      000131 D0 07            [24]  734 	pop	ar7
                                    735 ;	life.c:25: putchar(digits[(a >> 8) & 0xf]);
      000133 8F 05            [24]  736 	mov	ar5,r7
      000135 53 05 0F         [24]  737 	anl	ar5,#0x0f
      000138 ED               [12]  738 	mov	a,r5
      000139 24r00            [12]  739 	add	a,#_digits
      00013B F9               [12]  740 	mov	r1,a
      00013C 87 05            [24]  741 	mov	ar5,@r1
      00013E 7C 00            [12]  742 	mov	r4,#0x00
      000140 8D 82            [24]  743 	mov	dpl,r5
      000142 8C 83            [24]  744 	mov	dph,r4
      000144 C0 07            [24]  745 	push	ar7
      000146 C0 06            [24]  746 	push	ar6
      000148 12r00r00         [24]  747 	lcall	_putchar
      00014B D0 06            [24]  748 	pop	ar6
      00014D D0 07            [24]  749 	pop	ar7
                                    750 ;	life.c:26: putchar(digits[(a >> 4) & 0xf]);
      00014F 8E 04            [24]  751 	mov	ar4,r6
      000151 EF               [12]  752 	mov	a,r7
      000152 C4               [12]  753 	swap	a
      000153 CC               [12]  754 	xch	a,r4
      000154 C4               [12]  755 	swap	a
      000155 54 0F            [12]  756 	anl	a,#0x0f
      000157 6C               [12]  757 	xrl	a,r4
      000158 CC               [12]  758 	xch	a,r4
      000159 54 0F            [12]  759 	anl	a,#0x0f
      00015B CC               [12]  760 	xch	a,r4
      00015C 6C               [12]  761 	xrl	a,r4
      00015D CC               [12]  762 	xch	a,r4
      00015E 53 04 0F         [24]  763 	anl	ar4,#0x0f
      000161 EC               [12]  764 	mov	a,r4
      000162 24r00            [12]  765 	add	a,#_digits
      000164 F9               [12]  766 	mov	r1,a
      000165 87 05            [24]  767 	mov	ar5,@r1
      000167 7C 00            [12]  768 	mov	r4,#0x00
      000169 8D 82            [24]  769 	mov	dpl,r5
      00016B 8C 83            [24]  770 	mov	dph,r4
      00016D C0 07            [24]  771 	push	ar7
      00016F C0 06            [24]  772 	push	ar6
      000171 12r00r00         [24]  773 	lcall	_putchar
      000174 D0 06            [24]  774 	pop	ar6
      000176 D0 07            [24]  775 	pop	ar7
                                    776 ;	life.c:27: putchar(digits[a & 0xf]);
      000178 53 06 0F         [24]  777 	anl	ar6,#0x0f
      00017B EE               [12]  778 	mov	a,r6
      00017C 24r00            [12]  779 	add	a,#_digits
      00017E F9               [12]  780 	mov	r1,a
      00017F 87 07            [24]  781 	mov	ar7,@r1
      000181 7E 00            [12]  782 	mov	r6,#0x00
      000183 8F 82            [24]  783 	mov	dpl,r7
      000185 8E 83            [24]  784 	mov	dph,r6
      000187 12r00r00         [24]  785 	lcall	_putchar
                                    786 ;	life.c:114: printstr("\r\n");
      00018A 7Dr10            [12]  787 	mov	r5,#___str_2
      00018C 7Es00            [12]  788 	mov	r6,#(___str_2 >> 8)
      00018E 7F 80            [12]  789 	mov	r7,#0x80
                                    790 ;	life.c:35: return;
      000190                        791 00131$:
                                    792 ;	life.c:33: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  793 	mov	dpl,r5
      000192 8E 83            [24]  794 	mov	dph,r6
      000194 8F F0            [24]  795 	mov	b,r7
      000196 12r00r00         [24]  796 	lcall	__gptrget
      000199 FC               [12]  797 	mov	r4,a
      00019A 60 1C            [24]  798 	jz	00116$
      00019C 7B 00            [12]  799 	mov	r3,#0x00
      00019E 8C 82            [24]  800 	mov	dpl,r4
      0001A0 8B 83            [24]  801 	mov	dph,r3
      0001A2 C0 07            [24]  802 	push	ar7
      0001A4 C0 06            [24]  803 	push	ar6
      0001A6 C0 05            [24]  804 	push	ar5
      0001A8 12r00r00         [24]  805 	lcall	_putchar
      0001AB D0 05            [24]  806 	pop	ar5
      0001AD D0 06            [24]  807 	pop	ar6
      0001AF D0 07            [24]  808 	pop	ar7
      0001B1 0D               [12]  809 	inc	r5
                                    810 ;	life.c:114: printstr("\r\n");
      0001B2 BD 00 DB         [24]  811 	cjne	r5,#0x00,00131$
      0001B5 0E               [12]  812 	inc	r6
      0001B6 80 D8            [24]  813 	sjmp	00131$
      0001B8                        814 00116$:
                                    815 ;	life.c:95: generation[0]++;
      0001B8 78r22            [12]  816 	mov	r0,#_generation
      0001BA 86 06            [24]  817 	mov	ar6,@r0
      0001BC 08               [12]  818 	inc	r0
      0001BD 86 07            [24]  819 	mov	ar7,@r0
      0001BF 0E               [12]  820 	inc	r6
      0001C0 BE 00 01         [24]  821 	cjne	r6,#0x00,00225$
      0001C3 0F               [12]  822 	inc	r7
      0001C4                        823 00225$:
      0001C4 78r22            [12]  824 	mov	r0,#_generation
      0001C6 A6 06            [24]  825 	mov	@r0,ar6
      0001C8 08               [12]  826 	inc	r0
      0001C9 A6 07            [24]  827 	mov	@r0,ar7
                                    828 ;	life.c:96: if (!generation[0]) generation[1]++;
      0001CB EE               [12]  829 	mov	a,r6
      0001CC 4F               [12]  830 	orl	a,r7
      0001CD 70 13            [24]  831 	jnz	00102$
      0001CF 78r24            [12]  832 	mov	r0,#(_generation + 0x0002)
      0001D1 86 06            [24]  833 	mov	ar6,@r0
      0001D3 08               [12]  834 	inc	r0
      0001D4 86 07            [24]  835 	mov	ar7,@r0
      0001D6 0E               [12]  836 	inc	r6
      0001D7 BE 00 01         [24]  837 	cjne	r6,#0x00,00227$
      0001DA 0F               [12]  838 	inc	r7
      0001DB                        839 00227$:
      0001DB 78r24            [12]  840 	mov	r0,#(_generation + 0x0002)
      0001DD A6 06            [24]  841 	mov	@r0,ar6
      0001DF 08               [12]  842 	inc	r0
      0001E0 A6 07            [24]  843 	mov	@r0,ar7
                                    844 ;	life.c:115: updategen();
      0001E2                        845 00102$:
                                    846 ;	life.c:118: for (x = 0; x < W; x++) {
      0001E2 78r13            [12]  847 	mov	r0,#_x
      0001E4 E4               [12]  848 	clr	a
      0001E5 F6               [12]  849 	mov	@r0,a
      0001E6 08               [12]  850 	inc	r0
      0001E7 F6               [12]  851 	mov	@r0,a
      0001E8                        852 00138$:
                                    853 ;	life.c:119: for (y = 0; y < H; y++)
      0001E8 78r15            [12]  854 	mov	r0,#_y
      0001EA E4               [12]  855 	clr	a
      0001EB F6               [12]  856 	mov	@r0,a
      0001EC 08               [12]  857 	inc	r0
      0001ED F6               [12]  858 	mov	@r0,a
      0001EE                        859 00133$:
                                    860 ;	life.c:120: if (u[A2D(W, y, x)]) putchar('1');
      0001EE 78r15            [12]  861 	mov	r0,#_y
      0001F0 E6               [12]  862 	mov	a,@r0
      0001F1 C0 E0            [24]  863 	push	acc
      0001F3 08               [12]  864 	inc	r0
      0001F4 E6               [12]  865 	mov	a,@r0
      0001F5 C0 E0            [24]  866 	push	acc
      0001F7 90 00 30         [24]  867 	mov	dptr,#0x0030
      0001FA 12r00r00         [24]  868 	lcall	__mulint
      0001FD AE 82            [24]  869 	mov	r6,dpl
      0001FF AF 83            [24]  870 	mov	r7,dph
      000201 15 81            [12]  871 	dec	sp
      000203 15 81            [12]  872 	dec	sp
      000205 78r13            [12]  873 	mov	r0,#_x
      000207 E6               [12]  874 	mov	a,@r0
      000208 2E               [12]  875 	add	a,r6
      000209 FE               [12]  876 	mov	r6,a
      00020A 08               [12]  877 	inc	r0
      00020B E6               [12]  878 	mov	a,@r0
      00020C 3F               [12]  879 	addc	a,r7
      00020D FF               [12]  880 	mov	r7,a
      00020E EE               [12]  881 	mov	a,r6
      00020F 24r00            [12]  882 	add	a,#_u
      000211 FE               [12]  883 	mov	r6,a
      000212 EF               [12]  884 	mov	a,r7
      000213 34s48            [12]  885 	addc	a,#(_u >> 8)
      000215 FF               [12]  886 	mov	r7,a
      000216 8E 82            [24]  887 	mov	dpl,r6
      000218 8F 83            [24]  888 	mov	dph,r7
      00021A E0               [24]  889 	movx	a,@dptr
      00021B 60 08            [24]  890 	jz	00104$
      00021D 90 00 31         [24]  891 	mov	dptr,#0x0031
      000220 12r00r00         [24]  892 	lcall	_putchar
      000223 80 06            [24]  893 	sjmp	00134$
      000225                        894 00104$:
                                    895 ;	life.c:121: else putchar('0');
      000225 90 00 30         [24]  896 	mov	dptr,#0x0030
      000228 12r00r00         [24]  897 	lcall	_putchar
      00022B                        898 00134$:
                                    899 ;	life.c:119: for (y = 0; y < H; y++)
      00022B 78r15            [12]  900 	mov	r0,#_y
      00022D 06               [12]  901 	inc	@r0
      00022E B6 00 02         [24]  902 	cjne	@r0,#0x00,00229$
      000231 08               [12]  903 	inc	r0
      000232 06               [12]  904 	inc	@r0
      000233                        905 00229$:
      000233 78r15            [12]  906 	mov	r0,#_y
      000235 C3               [12]  907 	clr	c
      000236 E6               [12]  908 	mov	a,@r0
      000237 94 C0            [12]  909 	subb	a,#0xc0
      000239 08               [12]  910 	inc	r0
      00023A E6               [12]  911 	mov	a,@r0
      00023B 64 80            [12]  912 	xrl	a,#0x80
      00023D 94 80            [12]  913 	subb	a,#0x80
      00023F 40 AD            [24]  914 	jc	00133$
                                    915 ;	life.c:122: printstr("\r\n");
      000241 7Dr10            [12]  916 	mov	r5,#___str_2
      000243 7Es00            [12]  917 	mov	r6,#(___str_2 >> 8)
      000245 7F 80            [12]  918 	mov	r7,#0x80
                                    919 ;	life.c:35: return;
      000247                        920 00136$:
                                    921 ;	life.c:33: for (; *s; s++) putchar(*s);
      000247 8D 82            [24]  922 	mov	dpl,r5
      000249 8E 83            [24]  923 	mov	dph,r6
      00024B 8F F0            [24]  924 	mov	b,r7
      00024D 12r00r00         [24]  925 	lcall	__gptrget
      000250 FC               [12]  926 	mov	r4,a
      000251 60 1C            [24]  927 	jz	00121$
      000253 7B 00            [12]  928 	mov	r3,#0x00
      000255 8C 82            [24]  929 	mov	dpl,r4
      000257 8B 83            [24]  930 	mov	dph,r3
      000259 C0 07            [24]  931 	push	ar7
      00025B C0 06            [24]  932 	push	ar6
      00025D C0 05            [24]  933 	push	ar5
      00025F 12r00r00         [24]  934 	lcall	_putchar
      000262 D0 05            [24]  935 	pop	ar5
      000264 D0 06            [24]  936 	pop	ar6
      000266 D0 07            [24]  937 	pop	ar7
      000268 0D               [12]  938 	inc	r5
                                    939 ;	life.c:122: printstr("\r\n");
      000269 BD 00 DB         [24]  940 	cjne	r5,#0x00,00136$
      00026C 0E               [12]  941 	inc	r6
      00026D 80 D8            [24]  942 	sjmp	00136$
      00026F                        943 00121$:
                                    944 ;	life.c:118: for (x = 0; x < W; x++) {
      00026F 78r13            [12]  945 	mov	r0,#_x
      000271 06               [12]  946 	inc	@r0
      000272 B6 00 02         [24]  947 	cjne	@r0,#0x00,00233$
      000275 08               [12]  948 	inc	r0
      000276 06               [12]  949 	inc	@r0
      000277                        950 00233$:
      000277 78r13            [12]  951 	mov	r0,#_x
      000279 C3               [12]  952 	clr	c
      00027A E6               [12]  953 	mov	a,@r0
      00027B 94 30            [12]  954 	subb	a,#0x30
      00027D 08               [12]  955 	inc	r0
      00027E E6               [12]  956 	mov	a,@r0
      00027F 64 80            [12]  957 	xrl	a,#0x80
      000281 94 80            [12]  958 	subb	a,#0x80
      000283 50 03            [24]  959 	jnc	00234$
      000285 02r01rE8         [24]  960 	ljmp	00138$
      000288                        961 00234$:
                                    962 ;	life.c:125: printstr("\033[?25h");
      000288 7Dr13            [12]  963 	mov	r5,#___str_3
      00028A 7Es00            [12]  964 	mov	r6,#(___str_3 >> 8)
      00028C 7F 80            [12]  965 	mov	r7,#0x80
                                    966 ;	life.c:35: return;
      00028E                        967 00141$:
                                    968 ;	life.c:33: for (; *s; s++) putchar(*s);
      00028E 8D 82            [24]  969 	mov	dpl,r5
      000290 8E 83            [24]  970 	mov	dph,r6
      000292 8F F0            [24]  971 	mov	b,r7
      000294 12r00r00         [24]  972 	lcall	__gptrget
      000297 FC               [12]  973 	mov	r4,a
      000298 60 1C            [24]  974 	jz	00123$
      00029A 7B 00            [12]  975 	mov	r3,#0x00
      00029C 8C 82            [24]  976 	mov	dpl,r4
      00029E 8B 83            [24]  977 	mov	dph,r3
      0002A0 C0 07            [24]  978 	push	ar7
      0002A2 C0 06            [24]  979 	push	ar6
      0002A4 C0 05            [24]  980 	push	ar5
      0002A6 12r00r00         [24]  981 	lcall	_putchar
      0002A9 D0 05            [24]  982 	pop	ar5
      0002AB D0 06            [24]  983 	pop	ar6
      0002AD D0 07            [24]  984 	pop	ar7
      0002AF 0D               [12]  985 	inc	r5
                                    986 ;	life.c:125: printstr("\033[?25h");
      0002B0 BD 00 DB         [24]  987 	cjne	r5,#0x00,00141$
      0002B3 0E               [12]  988 	inc	r6
      0002B4 80 D8            [24]  989 	sjmp	00141$
      0002B6                        990 00123$:
                                    991 ;	life.c:127: return;
                                    992 ;	life.c:128: }
      0002B6 22               [24]  993 	ret
                                    994 ;------------------------------------------------------------
                                    995 ;Allocation info for local variables in function 'main'
                                    996 ;------------------------------------------------------------
                                    997 ;__1310720027              Allocated to registers 
                                    998 ;s                         Allocated to registers r5 r6 r7 
                                    999 ;__2621440029              Allocated to registers 
                                   1000 ;s                         Allocated to registers r5 r6 r7 
                                   1001 ;__1310720017              Allocated to registers 
                                   1002 ;s                         Allocated to registers r5 r6 r7 
                                   1003 ;__1310720019              Allocated to registers r6 r7 
                                   1004 ;a                         Allocated to registers r4 r5 
                                   1005 ;__1310720021              Allocated to registers 
                                   1006 ;s                         Allocated to registers r5 r6 r7 
                                   1007 ;__1310720023              Allocated to registers 
                                   1008 ;s                         Allocated to registers r5 r6 r7 
                                   1009 ;__1310720025              Allocated to registers 
                                   1010 ;s                         Allocated to registers r5 r6 r7 
                                   1011 ;__2621440034              Allocated to registers 
                                   1012 ;s                         Allocated to registers r5 r6 r7 
                                   1013 ;__4587520038              Allocated to registers 
                                   1014 ;s                         Allocated to registers r5 r6 r7 
                                   1015 ;__4587520040              Allocated to registers 
                                   1016 ;s                         Allocated to registers r5 r6 r7 
                                   1017 ;__4587520042              Allocated to registers 
                                   1018 ;s                         Allocated to registers r5 r6 r7 
                                   1019 ;__3276800044              Allocated to registers 
                                   1020 ;s                         Allocated to registers r5 r6 r7 
                                   1021 ;__1310720046              Allocated to registers 
                                   1022 ;s                         Allocated to registers r5 r6 r7 
                                   1023 ;sloc0                     Allocated to stack - _bp +1
                                   1024 ;sloc1                     Allocated to stack - _bp +2
                                   1025 ;sloc2                     Allocated to stack - _bp +4
                                   1026 ;sloc3                     Allocated to stack - _bp +6
                                   1027 ;sloc4                     Allocated to stack - _bp +8
                                   1028 ;sloc5                     Allocated to stack - _bp +10
                                   1029 ;sloc6                     Allocated to stack - _bp +12
                                   1030 ;------------------------------------------------------------
                                   1031 ;	life.c:236: void main(void) {
                                   1032 ;	-----------------------------------------
                                   1033 ;	 function main
                                   1034 ;	-----------------------------------------
      0002B7                       1035 _main:
      0002B7 C0*00            [24] 1036 	push	_bp
      0002B9 E5 81            [12] 1037 	mov	a,sp
      0002BB F5*00            [12] 1038 	mov	_bp,a
      0002BD 24 0D            [12] 1039 	add	a,#0x0d
      0002BF F5 81            [12] 1040 	mov	sp,a
                                   1041 ;	life.c:237: IT0 = 1;
                                   1042 ;	assignBit
      0002C1 D2 88            [12] 1043 	setb	_IT0
                                   1044 ;	life.c:238: IT1 = 1;
                                   1045 ;	assignBit
      0002C3 D2 8A            [12] 1046 	setb	_IT1
                                   1047 ;	life.c:239: EX0 = 1;
                                   1048 ;	assignBit
      0002C5 D2 A8            [12] 1049 	setb	_EX0
                                   1050 ;	life.c:240: EX1 = 1;
                                   1051 ;	assignBit
      0002C7 D2 AA            [12] 1052 	setb	_EX1
                                   1053 ;	life.c:241: EA = 1;	
                                   1054 ;	assignBit
      0002C9 D2 AF            [12] 1055 	setb	_EA
                                   1056 ;	life.c:242: P1_7 = 1;
                                   1057 ;	assignBit
      0002CB D2 97            [12] 1058 	setb	_P1_7
                                   1059 ;	life.c:247: __endasm;
      0002CD 00               [12] 1060 	nop
      0002CE 00               [12] 1061 	nop
      0002CF 00               [12] 1062 	nop
                                   1063 ;	life.c:249: srand(RND);
      0002D0 90 80 00         [24] 1064 	mov	dptr,#_RND
      0002D3 E0               [24] 1065 	movx	a,@dptr
      0002D4 FE               [12] 1066 	mov	r6,a
      0002D5 A3               [24] 1067 	inc	dptr
      0002D6 E0               [24] 1068 	movx	a,@dptr
      0002D7 FF               [12] 1069 	mov	r7,a
      0002D8 8E 82            [24] 1070 	mov	dpl,r6
      0002DA 8F 83            [24] 1071 	mov	dph,r7
      0002DC 12r00r00         [24] 1072 	lcall	_srand
                                   1073 ;	life.c:251: OE76 = OE76_0;
      0002DF 78r12            [12] 1074 	mov	r0,#_OE76
      0002E1 76 3F            [12] 1075 	mov	@r0,#0x3f
                                   1076 ;	life.c:252: flashOE();
      0002E3 12r00r18         [24] 1077 	lcall	_flashOE
                                   1078 ;	life.c:254: printstr("\033[?25h\033[m");
      0002E6 7Dr34            [12] 1079 	mov	r5,#___str_7
      0002E8 7Es00            [12] 1080 	mov	r6,#(___str_7 >> 8)
      0002EA 7F 80            [12] 1081 	mov	r7,#0x80
                                   1082 ;	life.c:35: return;
      0002EC                       1083 00238$:
                                   1084 ;	life.c:33: for (; *s; s++) putchar(*s);
      0002EC 8D 82            [24] 1085 	mov	dpl,r5
      0002EE 8E 83            [24] 1086 	mov	dph,r6
      0002F0 8F F0            [24] 1087 	mov	b,r7
      0002F2 12r00r00         [24] 1088 	lcall	__gptrget
      0002F5 FC               [12] 1089 	mov	r4,a
      0002F6 60 1C            [24] 1090 	jz	00151$
      0002F8 7B 00            [12] 1091 	mov	r3,#0x00
      0002FA 8C 82            [24] 1092 	mov	dpl,r4
      0002FC 8B 83            [24] 1093 	mov	dph,r3
      0002FE C0 07            [24] 1094 	push	ar7
      000300 C0 06            [24] 1095 	push	ar6
      000302 C0 05            [24] 1096 	push	ar5
      000304 12r00r00         [24] 1097 	lcall	_putchar
      000307 D0 05            [24] 1098 	pop	ar5
      000309 D0 06            [24] 1099 	pop	ar6
      00030B D0 07            [24] 1100 	pop	ar7
      00030D 0D               [12] 1101 	inc	r5
                                   1102 ;	life.c:254: printstr("\033[?25h\033[m");
      00030E BD 00 DB         [24] 1103 	cjne	r5,#0x00,00238$
      000311 0E               [12] 1104 	inc	r6
      000312 80 D8            [24] 1105 	sjmp	00238$
      000314                       1106 00151$:
                                   1107 ;	life.c:256: for (i0 = 0; !i0; ) {	
      000314 78r10            [12] 1108 	mov	r0,#_i0
      000316 76 00            [12] 1109 	mov	@r0,#0x00
      000318                       1110 00285$:
                                   1111 ;	life.c:257: printstr("LIFE INIT T L R P\r\n");
      000318 7Dr3E            [12] 1112 	mov	r5,#___str_8
      00031A 7Es00            [12] 1113 	mov	r6,#(___str_8 >> 8)
      00031C 7F 80            [12] 1114 	mov	r7,#0x80
                                   1115 ;	life.c:35: return;
      00031E                       1116 00241$:
                                   1117 ;	life.c:33: for (; *s; s++) putchar(*s);
      00031E 8D 82            [24] 1118 	mov	dpl,r5
      000320 8E 83            [24] 1119 	mov	dph,r6
      000322 8F F0            [24] 1120 	mov	b,r7
      000324 12r00r00         [24] 1121 	lcall	__gptrget
      000327 FC               [12] 1122 	mov	r4,a
      000328 60 1C            [24] 1123 	jz	00110$
      00032A 7B 00            [12] 1124 	mov	r3,#0x00
      00032C 8C 82            [24] 1125 	mov	dpl,r4
      00032E 8B 83            [24] 1126 	mov	dph,r3
      000330 C0 07            [24] 1127 	push	ar7
      000332 C0 06            [24] 1128 	push	ar6
      000334 C0 05            [24] 1129 	push	ar5
      000336 12r00r00         [24] 1130 	lcall	_putchar
      000339 D0 05            [24] 1131 	pop	ar5
      00033B D0 06            [24] 1132 	pop	ar6
      00033D D0 07            [24] 1133 	pop	ar7
      00033F 0D               [12] 1134 	inc	r5
                                   1135 ;	life.c:258: while (1) {
      000340 BD 00 DB         [24] 1136 	cjne	r5,#0x00,00241$
      000343 0E               [12] 1137 	inc	r6
      000344 80 D8            [24] 1138 	sjmp	00241$
      000346                       1139 00110$:
                                   1140 ;	life.c:259: c = toupper(getchar());
      000346 12r00r00         [24] 1141 	lcall	_getchar
      000349 12r00r00         [24] 1142 	lcall	_toupper
      00034C AE 82            [24] 1143 	mov	r6,dpl
      00034E AF 83            [24] 1144 	mov	r7,dph
      000350 78r19            [12] 1145 	mov	r0,#_c
      000352 A6 06            [24] 1146 	mov	@r0,ar6
      000354 08               [12] 1147 	inc	r0
      000355 A6 07            [24] 1148 	mov	@r0,ar7
                                   1149 ;	life.c:260: if (i0 || (c == (int)'T')) goto term;
      000357 78r10            [12] 1150 	mov	r0,#_i0
      000359 E6               [12] 1151 	mov	a,@r0
      00035A 60 03            [24] 1152 	jz	00578$
      00035C 02r0Cr64         [24] 1153 	ljmp	00149$
      00035F                       1154 00578$:
      00035F BE 54 06         [24] 1155 	cjne	r6,#0x54,00579$
      000362 BF 00 03         [24] 1156 	cjne	r7,#0x00,00579$
      000365 02r0Cr64         [24] 1157 	ljmp	00149$
      000368                       1158 00579$:
                                   1159 ;	life.c:261: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      000368 BE 4C 05         [24] 1160 	cjne	r6,#0x4c,00580$
      00036B BF 00 02         [24] 1161 	cjne	r7,#0x00,00580$
      00036E 80 0E            [24] 1162 	sjmp	00332$
      000370                       1163 00580$:
      000370 BE 52 05         [24] 1164 	cjne	r6,#0x52,00581$
      000373 BF 00 02         [24] 1165 	cjne	r7,#0x00,00581$
      000376 80 06            [24] 1166 	sjmp	00332$
      000378                       1167 00581$:
      000378 BE 50 CB         [24] 1168 	cjne	r6,#0x50,00110$
      00037B BF 00 C8         [24] 1169 	cjne	r7,#0x00,00110$
                                   1170 ;	life.c:264: reload:
      00037E                       1171 00332$:
      00037E                       1172 00112$:
                                   1173 ;	life.c:131: memset(u, 0, sizeof (u));
      00037E E4               [12] 1174 	clr	a
      00037F C0 E0            [24] 1175 	push	acc
      000381 74 24            [12] 1176 	mov	a,#0x24
      000383 C0 E0            [24] 1177 	push	acc
      000385 E4               [12] 1178 	clr	a
      000386 C0 E0            [24] 1179 	push	acc
      000388 90r48r00         [24] 1180 	mov	dptr,#_u
      00038B 75 F0 00         [24] 1181 	mov	b,#0x00
      00038E 12r00r00         [24] 1182 	lcall	_memset
      000391 15 81            [12] 1183 	dec	sp
      000393 15 81            [12] 1184 	dec	sp
      000395 15 81            [12] 1185 	dec	sp
                                   1186 ;	life.c:132: memset(pu, 0, sizeof (pu));
      000397 E4               [12] 1187 	clr	a
      000398 C0 E0            [24] 1188 	push	acc
      00039A 74 24            [12] 1189 	mov	a,#0x24
      00039C C0 E0            [24] 1190 	push	acc
      00039E E4               [12] 1191 	clr	a
      00039F C0 E0            [24] 1192 	push	acc
      0003A1 90r24r00         [24] 1193 	mov	dptr,#_pu
      0003A4 75 F0 00         [24] 1194 	mov	b,#0x00
      0003A7 12r00r00         [24] 1195 	lcall	_memset
      0003AA 15 81            [12] 1196 	dec	sp
      0003AC 15 81            [12] 1197 	dec	sp
      0003AE 15 81            [12] 1198 	dec	sp
                                   1199 ;	life.c:266: if (c == (int)'L') loadiu();
      0003B0 78r19            [12] 1200 	mov	r0,#_c
      0003B2 B6 4C 06         [24] 1201 	cjne	@r0,#0x4c,00584$
      0003B5 08               [12] 1202 	inc	r0
      0003B6 B6 00 02         [24] 1203 	cjne	@r0,#0x00,00584$
      0003B9 80 03            [24] 1204 	sjmp	00585$
      0003BB                       1205 00584$:
      0003BB 02r05r66         [24] 1206 	ljmp	00116$
      0003BE                       1207 00585$:
                                   1208 ;	life.c:138: j = 0;
      0003BE 78r17            [12] 1209 	mov	r0,#_j
      0003C0 E4               [12] 1210 	clr	a
      0003C1 F6               [12] 1211 	mov	@r0,a
      0003C2 08               [12] 1212 	inc	r0
      0003C3 F6               [12] 1213 	mov	@r0,a
                                   1214 ;	life.c:140: printstr("LOAD 0 1 ~ # <");
      0003C4 7Dr1A            [12] 1215 	mov	r5,#___str_4
      0003C6 7Es00            [12] 1216 	mov	r6,#(___str_4 >> 8)
      0003C8 7F 80            [12] 1217 	mov	r7,#0x80
                                   1218 ;	life.c:35: return;
      0003CA                       1219 00244$:
                                   1220 ;	life.c:33: for (; *s; s++) putchar(*s);
      0003CA 8D 82            [24] 1221 	mov	dpl,r5
      0003CC 8E 83            [24] 1222 	mov	dph,r6
      0003CE 8F F0            [24] 1223 	mov	b,r7
      0003D0 12r00r00         [24] 1224 	lcall	__gptrget
      0003D3 FC               [12] 1225 	mov	r4,a
      0003D4 60 1C            [24] 1226 	jz	00156$
      0003D6 7B 00            [12] 1227 	mov	r3,#0x00
      0003D8 8C 82            [24] 1228 	mov	dpl,r4
      0003DA 8B 83            [24] 1229 	mov	dph,r3
      0003DC C0 07            [24] 1230 	push	ar7
      0003DE C0 06            [24] 1231 	push	ar6
      0003E0 C0 05            [24] 1232 	push	ar5
      0003E2 12r00r00         [24] 1233 	lcall	_putchar
      0003E5 D0 05            [24] 1234 	pop	ar5
      0003E7 D0 06            [24] 1235 	pop	ar6
      0003E9 D0 07            [24] 1236 	pop	ar7
      0003EB 0D               [12] 1237 	inc	r5
                                   1238 ;	life.c:140: printstr("LOAD 0 1 ~ # <");
      0003EC BD 00 DB         [24] 1239 	cjne	r5,#0x00,00244$
      0003EF 0E               [12] 1240 	inc	r6
      0003F0 80 D8            [24] 1241 	sjmp	00244$
      0003F2                       1242 00156$:
                                   1243 ;	life.c:142: for (y = 0; y < (H * W); y += W) {
      0003F2 78r15            [12] 1244 	mov	r0,#_y
      0003F4 E4               [12] 1245 	clr	a
      0003F5 F6               [12] 1246 	mov	@r0,a
      0003F6 08               [12] 1247 	inc	r0
      0003F7 F6               [12] 1248 	mov	@r0,a
      0003F8                       1249 00247$:
                                   1250 ;	life.c:143: for (x = 0; x < W; x++) {
      0003F8 78r13            [12] 1251 	mov	r0,#_x
      0003FA E4               [12] 1252 	clr	a
      0003FB F6               [12] 1253 	mov	@r0,a
      0003FC 08               [12] 1254 	inc	r0
      0003FD F6               [12] 1255 	mov	@r0,a
                                   1256 ;	life.c:144: while (1) {
      0003FE                       1257 00169$:
                                   1258 ;	life.c:145: c = getchar();
      0003FE 12r00r00         [24] 1259 	lcall	_getchar
      000401 AE 82            [24] 1260 	mov	r6,dpl
      000403 AF 83            [24] 1261 	mov	r7,dph
      000405 78r19            [12] 1262 	mov	r0,#_c
      000407 A6 06            [24] 1263 	mov	@r0,ar6
      000409 08               [12] 1264 	inc	r0
      00040A A6 07            [24] 1265 	mov	@r0,ar7
                                   1266 ;	life.c:146: if (c == (int)'0') {
      00040C BE 30 25         [24] 1267 	cjne	r6,#0x30,00167$
      00040F BF 00 22         [24] 1268 	cjne	r7,#0x00,00167$
                                   1269 ;	life.c:147: iu[y + x] = 0;
      000412 78r15            [12] 1270 	mov	r0,#_y
      000414 79r13            [12] 1271 	mov	r1,#_x
      000416 E7               [12] 1272 	mov	a,@r1
      000417 26               [12] 1273 	add	a,@r0
      000418 FC               [12] 1274 	mov	r4,a
      000419 09               [12] 1275 	inc	r1
      00041A E7               [12] 1276 	mov	a,@r1
      00041B 08               [12] 1277 	inc	r0
      00041C 36               [12] 1278 	addc	a,@r0
      00041D FD               [12] 1279 	mov	r5,a
      00041E EC               [12] 1280 	mov	a,r4
      00041F 24r00            [12] 1281 	add	a,#_iu
      000421 F5 82            [12] 1282 	mov	dpl,a
      000423 ED               [12] 1283 	mov	a,r5
      000424 34s00            [12] 1284 	addc	a,#(_iu >> 8)
      000426 F5 83            [12] 1285 	mov	dph,a
      000428 E4               [12] 1286 	clr	a
      000429 F0               [24] 1287 	movx	@dptr,a
                                   1288 ;	life.c:148: j++;
      00042A 78r17            [12] 1289 	mov	r0,#_j
      00042C 06               [12] 1290 	inc	@r0
      00042D B6 00 02         [24] 1291 	cjne	@r0,#0x00,00590$
      000430 08               [12] 1292 	inc	r0
      000431 06               [12] 1293 	inc	@r0
      000432                       1294 00590$:
                                   1295 ;	life.c:149: break;
      000432 80 39            [24] 1296 	sjmp	00172$
      000434                       1297 00167$:
                                   1298 ;	life.c:150: } else if (c == (int)'1') {
      000434 BE 31 26         [24] 1299 	cjne	r6,#0x31,00165$
      000437 BF 00 23         [24] 1300 	cjne	r7,#0x00,00165$
                                   1301 ;	life.c:151: iu[y + x] = 1;
      00043A 78r15            [12] 1302 	mov	r0,#_y
      00043C 79r13            [12] 1303 	mov	r1,#_x
      00043E E7               [12] 1304 	mov	a,@r1
      00043F 26               [12] 1305 	add	a,@r0
      000440 FC               [12] 1306 	mov	r4,a
      000441 09               [12] 1307 	inc	r1
      000442 E7               [12] 1308 	mov	a,@r1
      000443 08               [12] 1309 	inc	r0
      000444 36               [12] 1310 	addc	a,@r0
      000445 FD               [12] 1311 	mov	r5,a
      000446 EC               [12] 1312 	mov	a,r4
      000447 24r00            [12] 1313 	add	a,#_iu
      000449 F5 82            [12] 1314 	mov	dpl,a
      00044B ED               [12] 1315 	mov	a,r5
      00044C 34s00            [12] 1316 	addc	a,#(_iu >> 8)
      00044E F5 83            [12] 1317 	mov	dph,a
      000450 74 01            [12] 1318 	mov	a,#0x01
      000452 F0               [24] 1319 	movx	@dptr,a
                                   1320 ;	life.c:152: j++;
      000453 78r17            [12] 1321 	mov	r0,#_j
      000455 06               [12] 1322 	inc	@r0
      000456 B6 00 02         [24] 1323 	cjne	@r0,#0x00,00593$
      000459 08               [12] 1324 	inc	r0
      00045A 06               [12] 1325 	inc	@r0
      00045B                       1326 00593$:
                                   1327 ;	life.c:153: break;
      00045B 80 10            [24] 1328 	sjmp	00172$
      00045D                       1329 00165$:
                                   1330 ;	life.c:154: } else if (c == (int)'~') goto br_inner;
      00045D BE 7E 05         [24] 1331 	cjne	r6,#0x7e,00594$
      000460 BF 00 02         [24] 1332 	cjne	r7,#0x00,00594$
      000463 80 21            [24] 1333 	sjmp	00248$
      000465                       1334 00594$:
                                   1335 ;	life.c:155: else if (c == (int)'#') goto out;
                                   1336 ;	life.c:159: break;
      000465 BE 23 96         [24] 1337 	cjne	r6,#0x23,00169$
      000468 BF 00 93         [24] 1338 	cjne	r7,#0x00,00169$
      00046B 80 31            [24] 1339 	sjmp	00182$
      00046D                       1340 00172$:
                                   1341 ;	life.c:143: for (x = 0; x < W; x++) {
      00046D 78r13            [12] 1342 	mov	r0,#_x
      00046F 06               [12] 1343 	inc	@r0
      000470 B6 00 02         [24] 1344 	cjne	@r0,#0x00,00596$
      000473 08               [12] 1345 	inc	r0
      000474 06               [12] 1346 	inc	@r0
      000475                       1347 00596$:
      000475 78r13            [12] 1348 	mov	r0,#_x
      000477 C3               [12] 1349 	clr	c
      000478 E6               [12] 1350 	mov	a,@r0
      000479 94 30            [12] 1351 	subb	a,#0x30
      00047B 08               [12] 1352 	inc	r0
      00047C E6               [12] 1353 	mov	a,@r0
      00047D 64 80            [12] 1354 	xrl	a,#0x80
      00047F 94 80            [12] 1355 	subb	a,#0x80
      000481 50 03            [24] 1356 	jnc	00597$
      000483 02r03rFE         [24] 1357 	ljmp	00169$
      000486                       1358 00597$:
      000486                       1359 00248$:
                                   1360 ;	life.c:142: for (y = 0; y < (H * W); y += W) {
      000486 78r15            [12] 1361 	mov	r0,#_y
      000488 74 30            [12] 1362 	mov	a,#0x30
      00048A 26               [12] 1363 	add	a,@r0
      00048B F6               [12] 1364 	mov	@r0,a
      00048C E4               [12] 1365 	clr	a
      00048D 08               [12] 1366 	inc	r0
      00048E 36               [12] 1367 	addc	a,@r0
      00048F F6               [12] 1368 	mov	@r0,a
      000490 78r15            [12] 1369 	mov	r0,#_y
      000492 C3               [12] 1370 	clr	c
      000493 08               [12] 1371 	inc	r0
      000494 E6               [12] 1372 	mov	a,@r0
      000495 64 80            [12] 1373 	xrl	a,#0x80
      000497 94 A4            [12] 1374 	subb	a,#0xa4
      000499 50 03            [24] 1375 	jnc	00598$
      00049B 02r03rF8         [24] 1376 	ljmp	00247$
      00049E                       1377 00598$:
                                   1378 ;	life.c:163: out:
      00049E                       1379 00182$:
                                   1380 ;	life.c:164: if (c != (int)'#')
      00049E BE 23 05         [24] 1381 	cjne	r6,#0x23,00599$
      0004A1 BF 00 02         [24] 1382 	cjne	r7,#0x00,00599$
      0004A4 80 14            [24] 1383 	sjmp	00181$
      0004A6                       1384 00599$:
                                   1385 ;	life.c:165: while (1) {
      0004A6                       1386 00178$:
                                   1387 ;	life.c:166: c = getchar();
      0004A6 12r00r00         [24] 1388 	lcall	_getchar
      0004A9 AE 82            [24] 1389 	mov	r6,dpl
      0004AB AF 83            [24] 1390 	mov	r7,dph
      0004AD 78r19            [12] 1391 	mov	r0,#_c
      0004AF A6 06            [24] 1392 	mov	@r0,ar6
      0004B1 08               [12] 1393 	inc	r0
      0004B2 A6 07            [24] 1394 	mov	@r0,ar7
                                   1395 ;	life.c:167: if (c == (int)'#') break;
      0004B4 BE 23 EF         [24] 1396 	cjne	r6,#0x23,00178$
      0004B7 BF 00 EC         [24] 1397 	cjne	r7,#0x00,00178$
      0004BA                       1398 00181$:
                                   1399 ;	life.c:169: print16x(j);
      0004BA 78r17            [12] 1400 	mov	r0,#_j
      0004BC 86 06            [24] 1401 	mov	ar6,@r0
      0004BE 08               [12] 1402 	inc	r0
      0004BF 86 07            [24] 1403 	mov	ar7,@r0
      0004C1 8E 04            [24] 1404 	mov	ar4,r6
                                   1405 ;	life.c:24: putchar(digits[(a >> 12) & 0xf]);
      0004C3 EF               [12] 1406 	mov	a,r7
      0004C4 FD               [12] 1407 	mov	r5,a
      0004C5 C4               [12] 1408 	swap	a
      0004C6 54 0F            [12] 1409 	anl	a,#(0x0f&0x0f)
      0004C8 24r00            [12] 1410 	add	a,#_digits
      0004CA F9               [12] 1411 	mov	r1,a
      0004CB 87 07            [24] 1412 	mov	ar7,@r1
      0004CD 7E 00            [12] 1413 	mov	r6,#0x00
      0004CF 8F 82            [24] 1414 	mov	dpl,r7
      0004D1 8E 83            [24] 1415 	mov	dph,r6
      0004D3 C0 05            [24] 1416 	push	ar5
      0004D5 C0 04            [24] 1417 	push	ar4
      0004D7 12r00r00         [24] 1418 	lcall	_putchar
      0004DA D0 04            [24] 1419 	pop	ar4
      0004DC D0 05            [24] 1420 	pop	ar5
                                   1421 ;	life.c:25: putchar(digits[(a >> 8) & 0xf]);
      0004DE 8D 07            [24] 1422 	mov	ar7,r5
      0004E0 53 07 0F         [24] 1423 	anl	ar7,#0x0f
      0004E3 EF               [12] 1424 	mov	a,r7
      0004E4 24r00            [12] 1425 	add	a,#_digits
      0004E6 F9               [12] 1426 	mov	r1,a
      0004E7 87 07            [24] 1427 	mov	ar7,@r1
      0004E9 7E 00            [12] 1428 	mov	r6,#0x00
      0004EB 8F 82            [24] 1429 	mov	dpl,r7
      0004ED 8E 83            [24] 1430 	mov	dph,r6
      0004EF C0 05            [24] 1431 	push	ar5
      0004F1 C0 04            [24] 1432 	push	ar4
      0004F3 12r00r00         [24] 1433 	lcall	_putchar
      0004F6 D0 04            [24] 1434 	pop	ar4
      0004F8 D0 05            [24] 1435 	pop	ar5
                                   1436 ;	life.c:26: putchar(digits[(a >> 4) & 0xf]);
      0004FA 8C 06            [24] 1437 	mov	ar6,r4
      0004FC ED               [12] 1438 	mov	a,r5
      0004FD C4               [12] 1439 	swap	a
      0004FE CE               [12] 1440 	xch	a,r6
      0004FF C4               [12] 1441 	swap	a
      000500 54 0F            [12] 1442 	anl	a,#0x0f
      000502 6E               [12] 1443 	xrl	a,r6
      000503 CE               [12] 1444 	xch	a,r6
      000504 54 0F            [12] 1445 	anl	a,#0x0f
      000506 CE               [12] 1446 	xch	a,r6
      000507 6E               [12] 1447 	xrl	a,r6
      000508 CE               [12] 1448 	xch	a,r6
      000509 53 06 0F         [24] 1449 	anl	ar6,#0x0f
      00050C EE               [12] 1450 	mov	a,r6
      00050D 24r00            [12] 1451 	add	a,#_digits
      00050F F9               [12] 1452 	mov	r1,a
      000510 87 07            [24] 1453 	mov	ar7,@r1
      000512 7E 00            [12] 1454 	mov	r6,#0x00
      000514 8F 82            [24] 1455 	mov	dpl,r7
      000516 8E 83            [24] 1456 	mov	dph,r6
      000518 C0 05            [24] 1457 	push	ar5
      00051A C0 04            [24] 1458 	push	ar4
      00051C 12r00r00         [24] 1459 	lcall	_putchar
      00051F D0 04            [24] 1460 	pop	ar4
      000521 D0 05            [24] 1461 	pop	ar5
                                   1462 ;	life.c:27: putchar(digits[a & 0xf]);
      000523 53 04 0F         [24] 1463 	anl	ar4,#0x0f
      000526 EC               [12] 1464 	mov	a,r4
      000527 24r00            [12] 1465 	add	a,#_digits
      000529 F9               [12] 1466 	mov	r1,a
      00052A 87 07            [24] 1467 	mov	ar7,@r1
      00052C 7E 00            [12] 1468 	mov	r6,#0x00
      00052E 8F 82            [24] 1469 	mov	dpl,r7
      000530 8E 83            [24] 1470 	mov	dph,r6
      000532 12r00r00         [24] 1471 	lcall	_putchar
                                   1472 ;	life.c:170: printstr(">\r\n");
      000535 7Dr29            [12] 1473 	mov	r5,#___str_5
      000537 7Es00            [12] 1474 	mov	r6,#(___str_5 >> 8)
      000539 7F 80            [12] 1475 	mov	r7,#0x80
                                   1476 ;	life.c:35: return;
      00053B                       1477 00250$:
                                   1478 ;	life.c:33: for (; *s; s++) putchar(*s);
      00053B 8D 82            [24] 1479 	mov	dpl,r5
      00053D 8E 83            [24] 1480 	mov	dph,r6
      00053F 8F F0            [24] 1481 	mov	b,r7
      000541 12r00r00         [24] 1482 	lcall	__gptrget
      000544 FC               [12] 1483 	mov	r4,a
      000545 70 03            [24] 1484 	jnz	00602$
      000547 02r06r37         [24] 1485 	ljmp	00117$
      00054A                       1486 00602$:
      00054A 7B 00            [12] 1487 	mov	r3,#0x00
      00054C 8C 82            [24] 1488 	mov	dpl,r4
      00054E 8B 83            [24] 1489 	mov	dph,r3
      000550 C0 07            [24] 1490 	push	ar7
      000552 C0 06            [24] 1491 	push	ar6
      000554 C0 05            [24] 1492 	push	ar5
      000556 12r00r00         [24] 1493 	lcall	_putchar
      000559 D0 05            [24] 1494 	pop	ar5
      00055B D0 06            [24] 1495 	pop	ar6
      00055D D0 07            [24] 1496 	pop	ar7
      00055F 0D               [12] 1497 	inc	r5
                                   1498 ;	life.c:266: if (c == (int)'L') loadiu();
      000560 BD 00 D8         [24] 1499 	cjne	r5,#0x00,00250$
      000563 0E               [12] 1500 	inc	r6
      000564 80 D5            [24] 1501 	sjmp	00250$
      000566                       1502 00116$:
                                   1503 ;	life.c:267: else if (c == (int)'R') loadriu();
      000566 78r19            [12] 1504 	mov	r0,#_c
      000568 B6 52 06         [24] 1505 	cjne	@r0,#0x52,00604$
      00056B 08               [12] 1506 	inc	r0
      00056C B6 00 02         [24] 1507 	cjne	@r0,#0x00,00604$
      00056F 80 03            [24] 1508 	sjmp	00605$
      000571                       1509 00604$:
      000571 02r06r37         [24] 1510 	ljmp	00117$
      000574                       1511 00605$:
                                   1512 ;	life.c:176: j = 0;
      000574 78r17            [12] 1513 	mov	r0,#_j
      000576 E4               [12] 1514 	clr	a
      000577 F6               [12] 1515 	mov	@r0,a
      000578 08               [12] 1516 	inc	r0
      000579 F6               [12] 1517 	mov	@r0,a
                                   1518 ;	life.c:178: printstr("RANDOM");
      00057A 7Dr2D            [12] 1519 	mov	r5,#___str_6
      00057C 7Es00            [12] 1520 	mov	r6,#(___str_6 >> 8)
      00057E 7F 80            [12] 1521 	mov	r7,#0x80
                                   1522 ;	life.c:35: return;
      000580                       1523 00253$:
                                   1524 ;	life.c:33: for (; *s; s++) putchar(*s);
      000580 8D 82            [24] 1525 	mov	dpl,r5
      000582 8E 83            [24] 1526 	mov	dph,r6
      000584 8F F0            [24] 1527 	mov	b,r7
      000586 12r00r00         [24] 1528 	lcall	__gptrget
      000589 FC               [12] 1529 	mov	r4,a
      00058A 60 1C            [24] 1530 	jz	00188$
      00058C 7B 00            [12] 1531 	mov	r3,#0x00
      00058E 8C 82            [24] 1532 	mov	dpl,r4
      000590 8B 83            [24] 1533 	mov	dph,r3
      000592 C0 07            [24] 1534 	push	ar7
      000594 C0 06            [24] 1535 	push	ar6
      000596 C0 05            [24] 1536 	push	ar5
      000598 12r00r00         [24] 1537 	lcall	_putchar
      00059B D0 05            [24] 1538 	pop	ar5
      00059D D0 06            [24] 1539 	pop	ar6
      00059F D0 07            [24] 1540 	pop	ar7
      0005A1 0D               [12] 1541 	inc	r5
                                   1542 ;	life.c:178: printstr("RANDOM");
      0005A2 BD 00 DB         [24] 1543 	cjne	r5,#0x00,00253$
      0005A5 0E               [12] 1544 	inc	r6
      0005A6 80 D8            [24] 1545 	sjmp	00253$
      0005A8                       1546 00188$:
                                   1547 ;	life.c:180: for (y = 0; y < (H * W); y += W)
      0005A8 78r15            [12] 1548 	mov	r0,#_y
      0005AA E4               [12] 1549 	clr	a
      0005AB F6               [12] 1550 	mov	@r0,a
      0005AC 08               [12] 1551 	inc	r0
      0005AD F6               [12] 1552 	mov	@r0,a
      0005AE                       1553 00257$:
                                   1554 ;	life.c:181: for (x = 0; x < W; x++)
      0005AE 78r13            [12] 1555 	mov	r0,#_x
      0005B0 E4               [12] 1556 	clr	a
      0005B1 F6               [12] 1557 	mov	@r0,a
      0005B2 08               [12] 1558 	inc	r0
      0005B3 F6               [12] 1559 	mov	@r0,a
      0005B4                       1560 00255$:
                                   1561 ;	life.c:182: iu[y + x] = rand() & 1;
      0005B4 78r15            [12] 1562 	mov	r0,#_y
      0005B6 79r13            [12] 1563 	mov	r1,#_x
      0005B8 E7               [12] 1564 	mov	a,@r1
      0005B9 26               [12] 1565 	add	a,@r0
      0005BA FE               [12] 1566 	mov	r6,a
      0005BB 09               [12] 1567 	inc	r1
      0005BC E7               [12] 1568 	mov	a,@r1
      0005BD 08               [12] 1569 	inc	r0
      0005BE 36               [12] 1570 	addc	a,@r0
      0005BF FF               [12] 1571 	mov	r7,a
      0005C0 EE               [12] 1572 	mov	a,r6
      0005C1 24r00            [12] 1573 	add	a,#_iu
      0005C3 FE               [12] 1574 	mov	r6,a
      0005C4 EF               [12] 1575 	mov	a,r7
      0005C5 34s00            [12] 1576 	addc	a,#(_iu >> 8)
      0005C7 FF               [12] 1577 	mov	r7,a
      0005C8 C0 07            [24] 1578 	push	ar7
      0005CA C0 06            [24] 1579 	push	ar6
      0005CC 12r00r00         [24] 1580 	lcall	_rand
      0005CF AC 82            [24] 1581 	mov	r4,dpl
      0005D1 D0 06            [24] 1582 	pop	ar6
      0005D3 D0 07            [24] 1583 	pop	ar7
      0005D5 53 04 01         [24] 1584 	anl	ar4,#0x01
      0005D8 8E 82            [24] 1585 	mov	dpl,r6
      0005DA 8F 83            [24] 1586 	mov	dph,r7
      0005DC EC               [12] 1587 	mov	a,r4
      0005DD F0               [24] 1588 	movx	@dptr,a
                                   1589 ;	life.c:181: for (x = 0; x < W; x++)
      0005DE 78r13            [12] 1590 	mov	r0,#_x
      0005E0 06               [12] 1591 	inc	@r0
      0005E1 B6 00 02         [24] 1592 	cjne	@r0,#0x00,00608$
      0005E4 08               [12] 1593 	inc	r0
      0005E5 06               [12] 1594 	inc	@r0
      0005E6                       1595 00608$:
      0005E6 78r13            [12] 1596 	mov	r0,#_x
      0005E8 C3               [12] 1597 	clr	c
      0005E9 E6               [12] 1598 	mov	a,@r0
      0005EA 94 30            [12] 1599 	subb	a,#0x30
      0005EC 08               [12] 1600 	inc	r0
      0005ED E6               [12] 1601 	mov	a,@r0
      0005EE 64 80            [12] 1602 	xrl	a,#0x80
      0005F0 94 80            [12] 1603 	subb	a,#0x80
      0005F2 40 C0            [24] 1604 	jc	00255$
                                   1605 ;	life.c:180: for (y = 0; y < (H * W); y += W)
      0005F4 78r15            [12] 1606 	mov	r0,#_y
      0005F6 74 30            [12] 1607 	mov	a,#0x30
      0005F8 26               [12] 1608 	add	a,@r0
      0005F9 F6               [12] 1609 	mov	@r0,a
      0005FA E4               [12] 1610 	clr	a
      0005FB 08               [12] 1611 	inc	r0
      0005FC 36               [12] 1612 	addc	a,@r0
      0005FD F6               [12] 1613 	mov	@r0,a
      0005FE 78r15            [12] 1614 	mov	r0,#_y
      000600 C3               [12] 1615 	clr	c
      000601 08               [12] 1616 	inc	r0
      000602 E6               [12] 1617 	mov	a,@r0
      000603 64 80            [12] 1618 	xrl	a,#0x80
      000605 94 A4            [12] 1619 	subb	a,#0xa4
      000607 40 A5            [24] 1620 	jc	00257$
                                   1621 ;	life.c:184: printstr("\r\n");
      000609 7Dr10            [12] 1622 	mov	r5,#___str_2
      00060B 7Es00            [12] 1623 	mov	r6,#(___str_2 >> 8)
      00060D 7F 80            [12] 1624 	mov	r7,#0x80
                                   1625 ;	life.c:35: return;
      00060F                       1626 00260$:
                                   1627 ;	life.c:33: for (; *s; s++) putchar(*s);
      00060F 8D 82            [24] 1628 	mov	dpl,r5
      000611 8E 83            [24] 1629 	mov	dph,r6
      000613 8F F0            [24] 1630 	mov	b,r7
      000615 12r00r00         [24] 1631 	lcall	__gptrget
      000618 FC               [12] 1632 	mov	r4,a
      000619 60 1C            [24] 1633 	jz	00117$
      00061B 7B 00            [12] 1634 	mov	r3,#0x00
      00061D 8C 82            [24] 1635 	mov	dpl,r4
      00061F 8B 83            [24] 1636 	mov	dph,r3
      000621 C0 07            [24] 1637 	push	ar7
      000623 C0 06            [24] 1638 	push	ar6
      000625 C0 05            [24] 1639 	push	ar5
      000627 12r00r00         [24] 1640 	lcall	_putchar
      00062A D0 05            [24] 1641 	pop	ar5
      00062C D0 06            [24] 1642 	pop	ar6
      00062E D0 07            [24] 1643 	pop	ar7
      000630 0D               [12] 1644 	inc	r5
                                   1645 ;	life.c:267: else if (c == (int)'R') loadriu();
      000631 BD 00 DB         [24] 1646 	cjne	r5,#0x00,00260$
      000634 0E               [12] 1647 	inc	r6
      000635 80 D8            [24] 1648 	sjmp	00260$
      000637                       1649 00117$:
                                   1650 ;	life.c:268: memcpy(u, iu, sizeof (iu));
      000637 E4               [12] 1651 	clr	a
      000638 C0 E0            [24] 1652 	push	acc
      00063A 74 24            [12] 1653 	mov	a,#0x24
      00063C C0 E0            [24] 1654 	push	acc
      00063E 74r00            [12] 1655 	mov	a,#_iu
      000640 C0 E0            [24] 1656 	push	acc
      000642 74s00            [12] 1657 	mov	a,#(_iu >> 8)
      000644 C0 E0            [24] 1658 	push	acc
      000646 E4               [12] 1659 	clr	a
      000647 C0 E0            [24] 1660 	push	acc
      000649 90r48r00         [24] 1661 	mov	dptr,#_u
      00064C 75 F0 00         [24] 1662 	mov	b,#0x00
      00064F 12r00r00         [24] 1663 	lcall	___memcpy
      000652 E5 81            [12] 1664 	mov	a,sp
      000654 24 FB            [12] 1665 	add	a,#0xfb
      000656 F5 81            [12] 1666 	mov	sp,a
                                   1667 ;	life.c:269: show(0);
      000658 75 82 00         [24] 1668 	mov	dpl,#0x00
      00065B 12r00r2A         [24] 1669 	lcall	_show
                                   1670 ;	life.c:271: printstr("READY T L R P S\r\n");
      00065E 7Dr52            [12] 1671 	mov	r5,#___str_9
      000660 7Es00            [12] 1672 	mov	r6,#(___str_9 >> 8)
      000662 7F 80            [12] 1673 	mov	r7,#0x80
                                   1674 ;	life.c:35: return;
      000664                       1675 00263$:
                                   1676 ;	life.c:33: for (; *s; s++) putchar(*s);
      000664 8D 82            [24] 1677 	mov	dpl,r5
      000666 8E 83            [24] 1678 	mov	dph,r6
      000668 8F F0            [24] 1679 	mov	b,r7
      00066A 12r00r00         [24] 1680 	lcall	__gptrget
      00066D FC               [12] 1681 	mov	r4,a
      00066E 60 1C            [24] 1682 	jz	00130$
      000670 7B 00            [12] 1683 	mov	r3,#0x00
      000672 8C 82            [24] 1684 	mov	dpl,r4
      000674 8B 83            [24] 1685 	mov	dph,r3
      000676 C0 07            [24] 1686 	push	ar7
      000678 C0 06            [24] 1687 	push	ar6
      00067A C0 05            [24] 1688 	push	ar5
      00067C 12r00r00         [24] 1689 	lcall	_putchar
      00067F D0 05            [24] 1690 	pop	ar5
      000681 D0 06            [24] 1691 	pop	ar6
      000683 D0 07            [24] 1692 	pop	ar7
      000685 0D               [12] 1693 	inc	r5
                                   1694 ;	life.c:272: while (1) {
      000686 BD 00 DB         [24] 1695 	cjne	r5,#0x00,00263$
      000689 0E               [12] 1696 	inc	r6
      00068A 80 D8            [24] 1697 	sjmp	00263$
      00068C                       1698 00130$:
                                   1699 ;	life.c:273: c = toupper(getchar());
      00068C 12r00r00         [24] 1700 	lcall	_getchar
      00068F 12r00r00         [24] 1701 	lcall	_toupper
      000692 AE 82            [24] 1702 	mov	r6,dpl
      000694 AF 83            [24] 1703 	mov	r7,dph
      000696 78r19            [12] 1704 	mov	r0,#_c
      000698 A6 06            [24] 1705 	mov	@r0,ar6
      00069A 08               [12] 1706 	inc	r0
      00069B A6 07            [24] 1707 	mov	@r0,ar7
                                   1708 ;	life.c:274: if (i0 || (c == (int)'T')) goto term;
      00069D 78r10            [12] 1709 	mov	r0,#_i0
      00069F E6               [12] 1710 	mov	a,@r0
      0006A0 60 03            [24] 1711 	jz	00615$
      0006A2 02r0Cr64         [24] 1712 	ljmp	00149$
      0006A5                       1713 00615$:
      0006A5 BE 54 06         [24] 1714 	cjne	r6,#0x54,00616$
      0006A8 BF 00 03         [24] 1715 	cjne	r7,#0x00,00616$
      0006AB 02r0Cr64         [24] 1716 	ljmp	00149$
      0006AE                       1717 00616$:
                                   1718 ;	life.c:275: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      0006AE BE 4C 06         [24] 1719 	cjne	r6,#0x4c,00617$
      0006B1 BF 00 03         [24] 1720 	cjne	r7,#0x00,00617$
      0006B4 02r03r7E         [24] 1721 	ljmp	00112$
      0006B7                       1722 00617$:
      0006B7 BE 52 06         [24] 1723 	cjne	r6,#0x52,00618$
      0006BA BF 00 03         [24] 1724 	cjne	r7,#0x00,00618$
      0006BD 02r03r7E         [24] 1725 	ljmp	00112$
      0006C0                       1726 00618$:
      0006C0 BE 50 06         [24] 1727 	cjne	r6,#0x50,00619$
      0006C3 BF 00 03         [24] 1728 	cjne	r7,#0x00,00619$
      0006C6 02r03r7E         [24] 1729 	ljmp	00112$
      0006C9                       1730 00619$:
                                   1731 ;	life.c:276: else if (c == (int)'S') break;
      0006C9 BE 53 C0         [24] 1732 	cjne	r6,#0x53,00130$
      0006CC BF 00 BD         [24] 1733 	cjne	r7,#0x00,00130$
                                   1734 ;	life.c:88: generation[0] = 0u;
      0006CF 78r22            [12] 1735 	mov	r0,#_generation
      0006D1 76 00            [12] 1736 	mov	@r0,#0x00
      0006D3 08               [12] 1737 	inc	r0
      0006D4 76 00            [12] 1738 	mov	@r0,#0x00
                                   1739 ;	life.c:89: generation[1] = 0u;
      0006D6 78r24            [12] 1740 	mov	r0,#(_generation + 0x0002)
      0006D8 76 00            [12] 1741 	mov	@r0,#0x00
      0006DA 08               [12] 1742 	inc	r0
      0006DB 76 00            [12] 1743 	mov	@r0,#0x00
                                   1744 ;	life.c:281: for (i1 = 0; !i0 && !i1; ) {
      0006DD 78r11            [12] 1745 	mov	r0,#_i1
      0006DF 76 00            [12] 1746 	mov	@r0,#0x00
      0006E1                       1747 00280$:
      0006E1 78r10            [12] 1748 	mov	r0,#_i0
      0006E3 E6               [12] 1749 	mov	a,@r0
      0006E4 60 03            [24] 1750 	jz	00622$
      0006E6 02r0Cr26         [24] 1751 	ljmp	00145$
      0006E9                       1752 00622$:
      0006E9 78r11            [12] 1753 	mov	r0,#_i1
      0006EB E6               [12] 1754 	mov	a,@r0
      0006EC 60 03            [24] 1755 	jz	00623$
      0006EE 02r0Cr26         [24] 1756 	ljmp	00145$
      0006F1                       1757 00623$:
                                   1758 ;	life.c:282: show(1);
      0006F1 75 82 01         [24] 1759 	mov	dpl,#0x01
      0006F4 12r00r2A         [24] 1760 	lcall	_show
                                   1761 ;	life.c:190: fixed = 0;
      0006F7 78r1C            [12] 1762 	mov	r0,#_fixed
      0006F9 76 00            [12] 1763 	mov	@r0,#0x00
                                   1764 ;	life.c:191: cycle2 = 0;
      0006FB 78r1D            [12] 1765 	mov	r0,#_cycle2
      0006FD 76 00            [12] 1766 	mov	@r0,#0x00
                                   1767 ;	life.c:193: OE76 = OE76_0;
      0006FF 78r12            [12] 1768 	mov	r0,#_OE76
      000701 76 3F            [12] 1769 	mov	@r0,#0x3f
                                   1770 ;	life.c:194: flashOE();
      000703 12r00r18         [24] 1771 	lcall	_flashOE
                                   1772 ;	life.c:196: for (y = 0; y < H; y++) {
      000706 78r15            [12] 1773 	mov	r0,#_y
      000708 E4               [12] 1774 	clr	a
      000709 F6               [12] 1775 	mov	@r0,a
      00070A 08               [12] 1776 	inc	r0
      00070B F6               [12] 1777 	mov	@r0,a
      00070C                       1778 00267$:
                                   1779 ;	life.c:197: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      00070C 78r15            [12] 1780 	mov	r0,#_y
      00070E 86 07            [24] 1781 	mov	ar7,@r0
      000710 53 07 03         [24] 1782 	anl	ar7,#0x03
      000713 EF               [12] 1783 	mov	a,r7
      000714 03               [12] 1784 	rr	a
      000715 03               [12] 1785 	rr	a
      000716 54 C0            [12] 1786 	anl	a,#0xc0
      000718 FF               [12] 1787 	mov	r7,a
      000719 78r12            [12] 1788 	mov	r0,#_OE76
      00071B 74 3F            [12] 1789 	mov	a,#0x3f
      00071D 4F               [12] 1790 	orl	a,r7
      00071E F6               [12] 1791 	mov	@r0,a
                                   1792 ;	life.c:198: flashOE();
      00071F 12r00r18         [24] 1793 	lcall	_flashOE
                                   1794 ;	life.c:199: for (x = 0; x < W; x++) {
      000722 78r13            [12] 1795 	mov	r0,#_x
      000724 E4               [12] 1796 	clr	a
      000725 F6               [12] 1797 	mov	@r0,a
      000726 08               [12] 1798 	inc	r0
      000727 F6               [12] 1799 	mov	@r0,a
      000728                       1800 00265$:
                                   1801 ;	life.c:200: n = -u[A2D(W, y, x)];
      000728 78r15            [12] 1802 	mov	r0,#_y
      00072A E6               [12] 1803 	mov	a,@r0
      00072B C0 E0            [24] 1804 	push	acc
      00072D 08               [12] 1805 	inc	r0
      00072E E6               [12] 1806 	mov	a,@r0
      00072F C0 E0            [24] 1807 	push	acc
      000731 90 00 30         [24] 1808 	mov	dptr,#0x0030
      000734 12r00r00         [24] 1809 	lcall	__mulint
      000737 C8               [12] 1810 	xch	a,r0
      000738 E5*00            [12] 1811 	mov	a,_bp
      00073A 24 04            [12] 1812 	add	a,#0x04
      00073C C8               [12] 1813 	xch	a,r0
      00073D A6 82            [24] 1814 	mov	@r0,dpl
      00073F 08               [12] 1815 	inc	r0
      000740 A6 83            [24] 1816 	mov	@r0,dph
      000742 15 81            [12] 1817 	dec	sp
      000744 15 81            [12] 1818 	dec	sp
      000746 E5*00            [12] 1819 	mov	a,_bp
      000748 24 04            [12] 1820 	add	a,#0x04
      00074A F8               [12] 1821 	mov	r0,a
      00074B 79r13            [12] 1822 	mov	r1,#_x
      00074D E7               [12] 1823 	mov	a,@r1
      00074E 26               [12] 1824 	add	a,@r0
      00074F C0 E0            [24] 1825 	push	acc
      000751 09               [12] 1826 	inc	r1
      000752 E7               [12] 1827 	mov	a,@r1
      000753 08               [12] 1828 	inc	r0
      000754 36               [12] 1829 	addc	a,@r0
      000755 C0 E0            [24] 1830 	push	acc
      000757 E5*00            [12] 1831 	mov	a,_bp
      000759 24 03            [12] 1832 	add	a,#0x03
      00075B F8               [12] 1833 	mov	r0,a
      00075C D0 E0            [24] 1834 	pop	acc
      00075E F6               [12] 1835 	mov	@r0,a
      00075F 18               [12] 1836 	dec	r0
      000760 D0 E0            [24] 1837 	pop	acc
      000762 F6               [12] 1838 	mov	@r0,a
      000763 A8*00            [24] 1839 	mov	r0,_bp
      000765 08               [12] 1840 	inc	r0
      000766 08               [12] 1841 	inc	r0
      000767 E6               [12] 1842 	mov	a,@r0
      000768 24r00            [12] 1843 	add	a,#_u
      00076A F5 82            [12] 1844 	mov	dpl,a
      00076C 08               [12] 1845 	inc	r0
      00076D E6               [12] 1846 	mov	a,@r0
      00076E 34s48            [12] 1847 	addc	a,#(_u >> 8)
      000770 F5 83            [12] 1848 	mov	dph,a
      000772 E0               [24] 1849 	movx	a,@dptr
      000773 FB               [12] 1850 	mov	r3,a
      000774 A8*00            [24] 1851 	mov	r0,_bp
      000776 08               [12] 1852 	inc	r0
      000777 C3               [12] 1853 	clr	c
      000778 E4               [12] 1854 	clr	a
      000779 9B               [12] 1855 	subb	a,r3
      00077A F6               [12] 1856 	mov	@r0,a
                                   1857 ;	life.c:207: UPDN(-1, -1);
      00077B 78r15            [12] 1858 	mov	r0,#_y
      00077D 74 FF            [12] 1859 	mov	a,#0xff
      00077F 26               [12] 1860 	add	a,@r0
      000780 FA               [12] 1861 	mov	r2,a
      000781 74 FF            [12] 1862 	mov	a,#0xff
      000783 08               [12] 1863 	inc	r0
      000784 36               [12] 1864 	addc	a,@r0
      000785 FB               [12] 1865 	mov	r3,a
      000786 74 C0            [12] 1866 	mov	a,#0xc0
      000788 2A               [12] 1867 	add	a,r2
      000789 FA               [12] 1868 	mov	r2,a
      00078A E4               [12] 1869 	clr	a
      00078B 3B               [12] 1870 	addc	a,r3
      00078C FB               [12] 1871 	mov	r3,a
      00078D 74 C0            [12] 1872 	mov	a,#0xc0
      00078F C0 E0            [24] 1873 	push	acc
      000791 E4               [12] 1874 	clr	a
      000792 C0 E0            [24] 1875 	push	acc
      000794 8A 82            [24] 1876 	mov	dpl,r2
      000796 8B 83            [24] 1877 	mov	dph,r3
      000798 12r00r00         [24] 1878 	lcall	__modsint
      00079B AA 82            [24] 1879 	mov	r2,dpl
      00079D AB 83            [24] 1880 	mov	r3,dph
      00079F 15 81            [12] 1881 	dec	sp
      0007A1 15 81            [12] 1882 	dec	sp
      0007A3 C0 02            [24] 1883 	push	ar2
      0007A5 C0 03            [24] 1884 	push	ar3
      0007A7 90 00 30         [24] 1885 	mov	dptr,#0x0030
      0007AA 12r00r00         [24] 1886 	lcall	__mulint
      0007AD AA 82            [24] 1887 	mov	r2,dpl
      0007AF AB 83            [24] 1888 	mov	r3,dph
      0007B1 15 81            [12] 1889 	dec	sp
      0007B3 15 81            [12] 1890 	dec	sp
      0007B5 78r13            [12] 1891 	mov	r0,#_x
      0007B7 74 FF            [12] 1892 	mov	a,#0xff
      0007B9 26               [12] 1893 	add	a,@r0
      0007BA FC               [12] 1894 	mov	r4,a
      0007BB 74 FF            [12] 1895 	mov	a,#0xff
      0007BD 08               [12] 1896 	inc	r0
      0007BE 36               [12] 1897 	addc	a,@r0
      0007BF FD               [12] 1898 	mov	r5,a
      0007C0 74 30            [12] 1899 	mov	a,#0x30
      0007C2 2C               [12] 1900 	add	a,r4
      0007C3 FC               [12] 1901 	mov	r4,a
      0007C4 E4               [12] 1902 	clr	a
      0007C5 3D               [12] 1903 	addc	a,r5
      0007C6 FD               [12] 1904 	mov	r5,a
      0007C7 C0 03            [24] 1905 	push	ar3
      0007C9 C0 02            [24] 1906 	push	ar2
      0007CB 74 30            [12] 1907 	mov	a,#0x30
      0007CD C0 E0            [24] 1908 	push	acc
      0007CF E4               [12] 1909 	clr	a
      0007D0 C0 E0            [24] 1910 	push	acc
      0007D2 8C 82            [24] 1911 	mov	dpl,r4
      0007D4 8D 83            [24] 1912 	mov	dph,r5
      0007D6 12r00r00         [24] 1913 	lcall	__modsint
      0007D9 AC 82            [24] 1914 	mov	r4,dpl
      0007DB AD 83            [24] 1915 	mov	r5,dph
      0007DD 15 81            [12] 1916 	dec	sp
      0007DF 15 81            [12] 1917 	dec	sp
      0007E1 D0 02            [24] 1918 	pop	ar2
      0007E3 D0 03            [24] 1919 	pop	ar3
      0007E5 EC               [12] 1920 	mov	a,r4
      0007E6 2A               [12] 1921 	add	a,r2
      0007E7 FE               [12] 1922 	mov	r6,a
      0007E8 ED               [12] 1923 	mov	a,r5
      0007E9 3B               [12] 1924 	addc	a,r3
      0007EA FF               [12] 1925 	mov	r7,a
      0007EB EE               [12] 1926 	mov	a,r6
      0007EC 24r00            [12] 1927 	add	a,#_u
      0007EE F5 82            [12] 1928 	mov	dpl,a
      0007F0 EF               [12] 1929 	mov	a,r7
      0007F1 34s48            [12] 1930 	addc	a,#(_u >> 8)
      0007F3 F5 83            [12] 1931 	mov	dph,a
      0007F5 E0               [24] 1932 	movx	a,@dptr
      0007F6 FF               [12] 1933 	mov	r7,a
      0007F7 A8*00            [24] 1934 	mov	r0,_bp
      0007F9 08               [12] 1935 	inc	r0
      0007FA EF               [12] 1936 	mov	a,r7
      0007FB 26               [12] 1937 	add	a,@r0
      0007FC F6               [12] 1938 	mov	@r0,a
                                   1939 ;	life.c:208: UPDN(-1, 0);
      0007FD 78r13            [12] 1940 	mov	r0,#_x
      0007FF E5*00            [12] 1941 	mov	a,_bp
      000801 24 06            [12] 1942 	add	a,#0x06
      000803 F9               [12] 1943 	mov	r1,a
      000804 E6               [12] 1944 	mov	a,@r0
      000805 F7               [12] 1945 	mov	@r1,a
      000806 08               [12] 1946 	inc	r0
      000807 09               [12] 1947 	inc	r1
      000808 E6               [12] 1948 	mov	a,@r0
      000809 F7               [12] 1949 	mov	@r1,a
      00080A E5*00            [12] 1950 	mov	a,_bp
      00080C 24 06            [12] 1951 	add	a,#0x06
      00080E F8               [12] 1952 	mov	r0,a
      00080F 74 30            [12] 1953 	mov	a,#0x30
      000811 26               [12] 1954 	add	a,@r0
      000812 FE               [12] 1955 	mov	r6,a
      000813 E4               [12] 1956 	clr	a
      000814 08               [12] 1957 	inc	r0
      000815 36               [12] 1958 	addc	a,@r0
      000816 FF               [12] 1959 	mov	r7,a
      000817 C0 05            [24] 1960 	push	ar5
      000819 C0 04            [24] 1961 	push	ar4
      00081B C0 03            [24] 1962 	push	ar3
      00081D C0 02            [24] 1963 	push	ar2
      00081F 74 30            [12] 1964 	mov	a,#0x30
      000821 C0 E0            [24] 1965 	push	acc
      000823 E4               [12] 1966 	clr	a
      000824 C0 E0            [24] 1967 	push	acc
      000826 8E 82            [24] 1968 	mov	dpl,r6
      000828 8F 83            [24] 1969 	mov	dph,r7
      00082A 12r00r00         [24] 1970 	lcall	__modsint
      00082D C8               [12] 1971 	xch	a,r0
      00082E E5*00            [12] 1972 	mov	a,_bp
      000830 24 08            [12] 1973 	add	a,#0x08
      000832 C8               [12] 1974 	xch	a,r0
      000833 A6 82            [24] 1975 	mov	@r0,dpl
      000835 08               [12] 1976 	inc	r0
      000836 A6 83            [24] 1977 	mov	@r0,dph
      000838 15 81            [12] 1978 	dec	sp
      00083A 15 81            [12] 1979 	dec	sp
      00083C D0 02            [24] 1980 	pop	ar2
      00083E D0 03            [24] 1981 	pop	ar3
      000840 E5*00            [12] 1982 	mov	a,_bp
      000842 24 08            [12] 1983 	add	a,#0x08
      000844 F8               [12] 1984 	mov	r0,a
      000845 E6               [12] 1985 	mov	a,@r0
      000846 2A               [12] 1986 	add	a,r2
      000847 FE               [12] 1987 	mov	r6,a
      000848 08               [12] 1988 	inc	r0
      000849 E6               [12] 1989 	mov	a,@r0
      00084A 3B               [12] 1990 	addc	a,r3
      00084B FF               [12] 1991 	mov	r7,a
      00084C EE               [12] 1992 	mov	a,r6
      00084D 24r00            [12] 1993 	add	a,#_u
      00084F F5 82            [12] 1994 	mov	dpl,a
      000851 EF               [12] 1995 	mov	a,r7
      000852 34s48            [12] 1996 	addc	a,#(_u >> 8)
      000854 F5 83            [12] 1997 	mov	dph,a
      000856 E0               [24] 1998 	movx	a,@dptr
      000857 FF               [12] 1999 	mov	r7,a
      000858 A8*00            [24] 2000 	mov	r0,_bp
      00085A 08               [12] 2001 	inc	r0
      00085B EF               [12] 2002 	mov	a,r7
      00085C 26               [12] 2003 	add	a,@r0
      00085D F6               [12] 2004 	mov	@r0,a
                                   2005 ;	life.c:209: UPDN(-1, 1);
      00085E E5*00            [12] 2006 	mov	a,_bp
      000860 24 06            [12] 2007 	add	a,#0x06
      000862 F8               [12] 2008 	mov	r0,a
      000863 74 31            [12] 2009 	mov	a,#0x31
      000865 26               [12] 2010 	add	a,@r0
      000866 FE               [12] 2011 	mov	r6,a
      000867 E4               [12] 2012 	clr	a
      000868 08               [12] 2013 	inc	r0
      000869 36               [12] 2014 	addc	a,@r0
      00086A FF               [12] 2015 	mov	r7,a
      00086B C0 03            [24] 2016 	push	ar3
      00086D C0 02            [24] 2017 	push	ar2
      00086F 74 30            [12] 2018 	mov	a,#0x30
      000871 C0 E0            [24] 2019 	push	acc
      000873 E4               [12] 2020 	clr	a
      000874 C0 E0            [24] 2021 	push	acc
      000876 8E 82            [24] 2022 	mov	dpl,r6
      000878 8F 83            [24] 2023 	mov	dph,r7
      00087A 12r00r00         [24] 2024 	lcall	__modsint
      00087D AE 82            [24] 2025 	mov	r6,dpl
      00087F AF 83            [24] 2026 	mov	r7,dph
      000881 15 81            [12] 2027 	dec	sp
      000883 15 81            [12] 2028 	dec	sp
      000885 D0 02            [24] 2029 	pop	ar2
      000887 D0 03            [24] 2030 	pop	ar3
      000889 D0 04            [24] 2031 	pop	ar4
      00088B D0 05            [24] 2032 	pop	ar5
      00088D EE               [12] 2033 	mov	a,r6
      00088E 2A               [12] 2034 	add	a,r2
      00088F FA               [12] 2035 	mov	r2,a
      000890 EF               [12] 2036 	mov	a,r7
      000891 3B               [12] 2037 	addc	a,r3
      000892 FB               [12] 2038 	mov	r3,a
      000893 EA               [12] 2039 	mov	a,r2
      000894 24r00            [12] 2040 	add	a,#_u
      000896 F5 82            [12] 2041 	mov	dpl,a
      000898 EB               [12] 2042 	mov	a,r3
      000899 34s48            [12] 2043 	addc	a,#(_u >> 8)
      00089B F5 83            [12] 2044 	mov	dph,a
      00089D E0               [24] 2045 	movx	a,@dptr
      00089E FB               [12] 2046 	mov	r3,a
      00089F A8*00            [24] 2047 	mov	r0,_bp
      0008A1 08               [12] 2048 	inc	r0
      0008A2 EB               [12] 2049 	mov	a,r3
      0008A3 26               [12] 2050 	add	a,@r0
      0008A4 F6               [12] 2051 	mov	@r0,a
                                   2052 ;	life.c:210: UPDN(0, -1);
      0008A5 78r15            [12] 2053 	mov	r0,#_y
      0008A7 E5*00            [12] 2054 	mov	a,_bp
      0008A9 24 0A            [12] 2055 	add	a,#0x0a
      0008AB F9               [12] 2056 	mov	r1,a
      0008AC E6               [12] 2057 	mov	a,@r0
      0008AD F7               [12] 2058 	mov	@r1,a
      0008AE 08               [12] 2059 	inc	r0
      0008AF 09               [12] 2060 	inc	r1
      0008B0 E6               [12] 2061 	mov	a,@r0
      0008B1 F7               [12] 2062 	mov	@r1,a
      0008B2 E5*00            [12] 2063 	mov	a,_bp
      0008B4 24 0A            [12] 2064 	add	a,#0x0a
      0008B6 F8               [12] 2065 	mov	r0,a
      0008B7 74 C0            [12] 2066 	mov	a,#0xc0
      0008B9 26               [12] 2067 	add	a,@r0
      0008BA FA               [12] 2068 	mov	r2,a
      0008BB E4               [12] 2069 	clr	a
      0008BC 08               [12] 2070 	inc	r0
      0008BD 36               [12] 2071 	addc	a,@r0
      0008BE FB               [12] 2072 	mov	r3,a
      0008BF C0 07            [24] 2073 	push	ar7
      0008C1 C0 06            [24] 2074 	push	ar6
      0008C3 C0 05            [24] 2075 	push	ar5
      0008C5 C0 04            [24] 2076 	push	ar4
      0008C7 74 C0            [12] 2077 	mov	a,#0xc0
      0008C9 C0 E0            [24] 2078 	push	acc
      0008CB E4               [12] 2079 	clr	a
      0008CC C0 E0            [24] 2080 	push	acc
      0008CE 8A 82            [24] 2081 	mov	dpl,r2
      0008D0 8B 83            [24] 2082 	mov	dph,r3
      0008D2 12r00r00         [24] 2083 	lcall	__modsint
      0008D5 AA 82            [24] 2084 	mov	r2,dpl
      0008D7 AB 83            [24] 2085 	mov	r3,dph
      0008D9 15 81            [12] 2086 	dec	sp
      0008DB 15 81            [12] 2087 	dec	sp
      0008DD C0 02            [24] 2088 	push	ar2
      0008DF C0 03            [24] 2089 	push	ar3
      0008E1 90 00 30         [24] 2090 	mov	dptr,#0x0030
      0008E4 12r00r00         [24] 2091 	lcall	__mulint
      0008E7 C8               [12] 2092 	xch	a,r0
      0008E8 E5*00            [12] 2093 	mov	a,_bp
      0008EA 24 0C            [12] 2094 	add	a,#0x0c
      0008EC C8               [12] 2095 	xch	a,r0
      0008ED A6 82            [24] 2096 	mov	@r0,dpl
      0008EF 08               [12] 2097 	inc	r0
      0008F0 A6 83            [24] 2098 	mov	@r0,dph
      0008F2 15 81            [12] 2099 	dec	sp
      0008F4 15 81            [12] 2100 	dec	sp
      0008F6 D0 04            [24] 2101 	pop	ar4
      0008F8 D0 05            [24] 2102 	pop	ar5
      0008FA D0 06            [24] 2103 	pop	ar6
      0008FC D0 07            [24] 2104 	pop	ar7
      0008FE E5*00            [12] 2105 	mov	a,_bp
      000900 24 0C            [12] 2106 	add	a,#0x0c
      000902 F8               [12] 2107 	mov	r0,a
      000903 EC               [12] 2108 	mov	a,r4
      000904 26               [12] 2109 	add	a,@r0
      000905 FA               [12] 2110 	mov	r2,a
      000906 ED               [12] 2111 	mov	a,r5
      000907 08               [12] 2112 	inc	r0
      000908 36               [12] 2113 	addc	a,@r0
      000909 FB               [12] 2114 	mov	r3,a
      00090A EA               [12] 2115 	mov	a,r2
      00090B 24r00            [12] 2116 	add	a,#_u
      00090D F5 82            [12] 2117 	mov	dpl,a
      00090F EB               [12] 2118 	mov	a,r3
      000910 34s48            [12] 2119 	addc	a,#(_u >> 8)
      000912 F5 83            [12] 2120 	mov	dph,a
      000914 E0               [24] 2121 	movx	a,@dptr
      000915 FB               [12] 2122 	mov	r3,a
      000916 A8*00            [24] 2123 	mov	r0,_bp
      000918 08               [12] 2124 	inc	r0
      000919 EB               [12] 2125 	mov	a,r3
      00091A 26               [12] 2126 	add	a,@r0
      00091B F6               [12] 2127 	mov	@r0,a
                                   2128 ;	life.c:211: UPDN(0, 0);
      00091C E5*00            [12] 2129 	mov	a,_bp
      00091E 24 0C            [12] 2130 	add	a,#0x0c
      000920 F8               [12] 2131 	mov	r0,a
      000921 E5*00            [12] 2132 	mov	a,_bp
      000923 24 08            [12] 2133 	add	a,#0x08
      000925 F9               [12] 2134 	mov	r1,a
      000926 E7               [12] 2135 	mov	a,@r1
      000927 26               [12] 2136 	add	a,@r0
      000928 FA               [12] 2137 	mov	r2,a
      000929 09               [12] 2138 	inc	r1
      00092A E7               [12] 2139 	mov	a,@r1
      00092B 08               [12] 2140 	inc	r0
      00092C 36               [12] 2141 	addc	a,@r0
      00092D FB               [12] 2142 	mov	r3,a
      00092E EA               [12] 2143 	mov	a,r2
      00092F 24r00            [12] 2144 	add	a,#_u
      000931 F5 82            [12] 2145 	mov	dpl,a
      000933 EB               [12] 2146 	mov	a,r3
      000934 34s48            [12] 2147 	addc	a,#(_u >> 8)
      000936 F5 83            [12] 2148 	mov	dph,a
      000938 E0               [24] 2149 	movx	a,@dptr
      000939 FB               [12] 2150 	mov	r3,a
      00093A A8*00            [24] 2151 	mov	r0,_bp
      00093C 08               [12] 2152 	inc	r0
      00093D EB               [12] 2153 	mov	a,r3
      00093E 26               [12] 2154 	add	a,@r0
      00093F F6               [12] 2155 	mov	@r0,a
                                   2156 ;	life.c:212: UPDN(0, 1);
      000940 E5*00            [12] 2157 	mov	a,_bp
      000942 24 0C            [12] 2158 	add	a,#0x0c
      000944 F8               [12] 2159 	mov	r0,a
      000945 EE               [12] 2160 	mov	a,r6
      000946 26               [12] 2161 	add	a,@r0
      000947 FA               [12] 2162 	mov	r2,a
      000948 EF               [12] 2163 	mov	a,r7
      000949 08               [12] 2164 	inc	r0
      00094A 36               [12] 2165 	addc	a,@r0
      00094B FB               [12] 2166 	mov	r3,a
      00094C EA               [12] 2167 	mov	a,r2
      00094D 24r00            [12] 2168 	add	a,#_u
      00094F F5 82            [12] 2169 	mov	dpl,a
      000951 EB               [12] 2170 	mov	a,r3
      000952 34s48            [12] 2171 	addc	a,#(_u >> 8)
      000954 F5 83            [12] 2172 	mov	dph,a
      000956 E0               [24] 2173 	movx	a,@dptr
      000957 FB               [12] 2174 	mov	r3,a
      000958 A8*00            [24] 2175 	mov	r0,_bp
      00095A 08               [12] 2176 	inc	r0
      00095B E5*00            [12] 2177 	mov	a,_bp
      00095D 24 0C            [12] 2178 	add	a,#0x0c
      00095F F9               [12] 2179 	mov	r1,a
      000960 EB               [12] 2180 	mov	a,r3
      000961 26               [12] 2181 	add	a,@r0
      000962 F7               [12] 2182 	mov	@r1,a
                                   2183 ;	life.c:213: UPDN(1, -1);
      000963 E5*00            [12] 2184 	mov	a,_bp
      000965 24 0A            [12] 2185 	add	a,#0x0a
      000967 F8               [12] 2186 	mov	r0,a
      000968 74 C1            [12] 2187 	mov	a,#0xc1
      00096A 26               [12] 2188 	add	a,@r0
      00096B FA               [12] 2189 	mov	r2,a
      00096C E4               [12] 2190 	clr	a
      00096D 08               [12] 2191 	inc	r0
      00096E 36               [12] 2192 	addc	a,@r0
      00096F FB               [12] 2193 	mov	r3,a
      000970 C0 07            [24] 2194 	push	ar7
      000972 C0 06            [24] 2195 	push	ar6
      000974 C0 05            [24] 2196 	push	ar5
      000976 C0 04            [24] 2197 	push	ar4
      000978 74 C0            [12] 2198 	mov	a,#0xc0
      00097A C0 E0            [24] 2199 	push	acc
      00097C E4               [12] 2200 	clr	a
      00097D C0 E0            [24] 2201 	push	acc
      00097F 8A 82            [24] 2202 	mov	dpl,r2
      000981 8B 83            [24] 2203 	mov	dph,r3
      000983 12r00r00         [24] 2204 	lcall	__modsint
      000986 AA 82            [24] 2205 	mov	r2,dpl
      000988 AB 83            [24] 2206 	mov	r3,dph
      00098A 15 81            [12] 2207 	dec	sp
      00098C 15 81            [12] 2208 	dec	sp
      00098E C0 02            [24] 2209 	push	ar2
      000990 C0 03            [24] 2210 	push	ar3
      000992 90 00 30         [24] 2211 	mov	dptr,#0x0030
      000995 12r00r00         [24] 2212 	lcall	__mulint
      000998 AA 82            [24] 2213 	mov	r2,dpl
      00099A AB 83            [24] 2214 	mov	r3,dph
      00099C 15 81            [12] 2215 	dec	sp
      00099E 15 81            [12] 2216 	dec	sp
      0009A0 D0 04            [24] 2217 	pop	ar4
      0009A2 D0 05            [24] 2218 	pop	ar5
      0009A4 D0 06            [24] 2219 	pop	ar6
      0009A6 D0 07            [24] 2220 	pop	ar7
      0009A8 EC               [12] 2221 	mov	a,r4
      0009A9 2A               [12] 2222 	add	a,r2
      0009AA FC               [12] 2223 	mov	r4,a
      0009AB ED               [12] 2224 	mov	a,r5
      0009AC 3B               [12] 2225 	addc	a,r3
      0009AD FD               [12] 2226 	mov	r5,a
      0009AE EC               [12] 2227 	mov	a,r4
      0009AF 24r00            [12] 2228 	add	a,#_u
      0009B1 F5 82            [12] 2229 	mov	dpl,a
      0009B3 ED               [12] 2230 	mov	a,r5
      0009B4 34s48            [12] 2231 	addc	a,#(_u >> 8)
      0009B6 F5 83            [12] 2232 	mov	dph,a
      0009B8 E0               [24] 2233 	movx	a,@dptr
      0009B9 FD               [12] 2234 	mov	r5,a
      0009BA E5*00            [12] 2235 	mov	a,_bp
      0009BC 24 0C            [12] 2236 	add	a,#0x0c
      0009BE F8               [12] 2237 	mov	r0,a
      0009BF E5*00            [12] 2238 	mov	a,_bp
      0009C1 24 0C            [12] 2239 	add	a,#0x0c
      0009C3 F9               [12] 2240 	mov	r1,a
      0009C4 ED               [12] 2241 	mov	a,r5
      0009C5 26               [12] 2242 	add	a,@r0
      0009C6 F7               [12] 2243 	mov	@r1,a
                                   2244 ;	life.c:214: UPDN(1, 0);
      0009C7 E5*00            [12] 2245 	mov	a,_bp
      0009C9 24 08            [12] 2246 	add	a,#0x08
      0009CB F8               [12] 2247 	mov	r0,a
      0009CC E6               [12] 2248 	mov	a,@r0
      0009CD 2A               [12] 2249 	add	a,r2
      0009CE FC               [12] 2250 	mov	r4,a
      0009CF 08               [12] 2251 	inc	r0
      0009D0 E6               [12] 2252 	mov	a,@r0
      0009D1 3B               [12] 2253 	addc	a,r3
      0009D2 FD               [12] 2254 	mov	r5,a
      0009D3 EC               [12] 2255 	mov	a,r4
      0009D4 24r00            [12] 2256 	add	a,#_u
      0009D6 F5 82            [12] 2257 	mov	dpl,a
      0009D8 ED               [12] 2258 	mov	a,r5
      0009D9 34s48            [12] 2259 	addc	a,#(_u >> 8)
      0009DB F5 83            [12] 2260 	mov	dph,a
      0009DD E0               [24] 2261 	movx	a,@dptr
      0009DE FD               [12] 2262 	mov	r5,a
      0009DF E5*00            [12] 2263 	mov	a,_bp
      0009E1 24 0C            [12] 2264 	add	a,#0x0c
      0009E3 F8               [12] 2265 	mov	r0,a
      0009E4 ED               [12] 2266 	mov	a,r5
      0009E5 26               [12] 2267 	add	a,@r0
      0009E6 FD               [12] 2268 	mov	r5,a
                                   2269 ;	life.c:215: UPDN(1, 1);
      0009E7 78r20            [12] 2270 	mov	r0,#_dy
      0009E9 76 01            [12] 2271 	mov	@r0,#0x01
      0009EB 08               [12] 2272 	inc	r0
      0009EC 76 00            [12] 2273 	mov	@r0,#0x00
      0009EE 78r1E            [12] 2274 	mov	r0,#_dx
      0009F0 76 01            [12] 2275 	mov	@r0,#0x01
      0009F2 08               [12] 2276 	inc	r0
      0009F3 76 00            [12] 2277 	mov	@r0,#0x00
      0009F5 EE               [12] 2278 	mov	a,r6
      0009F6 2A               [12] 2279 	add	a,r2
      0009F7 FE               [12] 2280 	mov	r6,a
      0009F8 EF               [12] 2281 	mov	a,r7
      0009F9 3B               [12] 2282 	addc	a,r3
      0009FA FF               [12] 2283 	mov	r7,a
      0009FB EE               [12] 2284 	mov	a,r6
      0009FC 24r00            [12] 2285 	add	a,#_u
      0009FE F5 82            [12] 2286 	mov	dpl,a
      000A00 EF               [12] 2287 	mov	a,r7
      000A01 34s48            [12] 2288 	addc	a,#(_u >> 8)
      000A03 F5 83            [12] 2289 	mov	dph,a
      000A05 E0               [24] 2290 	movx	a,@dptr
      000A06 2D               [12] 2291 	add	a,r5
      000A07 FF               [12] 2292 	mov	r7,a
      000A08 78r1B            [12] 2293 	mov	r0,#_n
      000A0A A6 07            [24] 2294 	mov	@r0,ar7
                                   2295 ;	life.c:218: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000A0C A8*00            [24] 2296 	mov	r0,_bp
      000A0E 08               [12] 2297 	inc	r0
      000A0F 08               [12] 2298 	inc	r0
      000A10 E6               [12] 2299 	mov	a,@r0
      000A11 24r00            [12] 2300 	add	a,#_nu
      000A13 FD               [12] 2301 	mov	r5,a
      000A14 08               [12] 2302 	inc	r0
      000A15 E6               [12] 2303 	mov	a,@r0
      000A16 34s6C            [12] 2304 	addc	a,#(_nu >> 8)
      000A18 FE               [12] 2305 	mov	r6,a
      000A19 BF 03 02         [24] 2306 	cjne	r7,#0x03,00624$
      000A1C 80 28            [24] 2307 	sjmp	00293$
      000A1E                       2308 00624$:
      000A1E BF 02 21         [24] 2309 	cjne	r7,#0x02,00292$
      000A21 E5*00            [12] 2310 	mov	a,_bp
      000A23 24 04            [12] 2311 	add	a,#0x04
      000A25 F8               [12] 2312 	mov	r0,a
      000A26 E5*00            [12] 2313 	mov	a,_bp
      000A28 24 06            [12] 2314 	add	a,#0x06
      000A2A F9               [12] 2315 	mov	r1,a
      000A2B E7               [12] 2316 	mov	a,@r1
      000A2C 26               [12] 2317 	add	a,@r0
      000A2D FC               [12] 2318 	mov	r4,a
      000A2E 09               [12] 2319 	inc	r1
      000A2F E7               [12] 2320 	mov	a,@r1
      000A30 08               [12] 2321 	inc	r0
      000A31 36               [12] 2322 	addc	a,@r0
      000A32 FF               [12] 2323 	mov	r7,a
      000A33 EC               [12] 2324 	mov	a,r4
      000A34 24r00            [12] 2325 	add	a,#_u
      000A36 FC               [12] 2326 	mov	r4,a
      000A37 EF               [12] 2327 	mov	a,r7
      000A38 34s48            [12] 2328 	addc	a,#(_u >> 8)
      000A3A FF               [12] 2329 	mov	r7,a
      000A3B 8C 82            [24] 2330 	mov	dpl,r4
      000A3D 8F 83            [24] 2331 	mov	dph,r7
      000A3F E0               [24] 2332 	movx	a,@dptr
      000A40 70 04            [24] 2333 	jnz	00293$
      000A42                       2334 00292$:
                                   2335 ;	assignBit
      000A42 C2*00            [12] 2336 	clr	b0
      000A44 80 02            [24] 2337 	sjmp	00294$
      000A46                       2338 00293$:
                                   2339 ;	assignBit
      000A46 D2*00            [12] 2340 	setb	b0
      000A48                       2341 00294$:
      000A48 A2*00            [12] 2342 	mov	c,b0
      000A4A E4               [12] 2343 	clr	a
      000A4B 33               [12] 2344 	rlc	a
      000A4C 8D 82            [24] 2345 	mov	dpl,r5
      000A4E 8E 83            [24] 2346 	mov	dph,r6
      000A50 F0               [24] 2347 	movx	@dptr,a
                                   2348 ;	life.c:219: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000A51 78r15            [12] 2349 	mov	r0,#_y
      000A53 E6               [12] 2350 	mov	a,@r0
      000A54 C0 E0            [24] 2351 	push	acc
      000A56 08               [12] 2352 	inc	r0
      000A57 E6               [12] 2353 	mov	a,@r0
      000A58 C0 E0            [24] 2354 	push	acc
      000A5A 90 00 30         [24] 2355 	mov	dptr,#0x0030
      000A5D 12r00r00         [24] 2356 	lcall	__mulint
      000A60 AE 82            [24] 2357 	mov	r6,dpl
      000A62 AF 83            [24] 2358 	mov	r7,dph
      000A64 15 81            [12] 2359 	dec	sp
      000A66 15 81            [12] 2360 	dec	sp
      000A68 78r13            [12] 2361 	mov	r0,#_x
      000A6A E6               [12] 2362 	mov	a,@r0
      000A6B 2E               [12] 2363 	add	a,r6
      000A6C FE               [12] 2364 	mov	r6,a
      000A6D 08               [12] 2365 	inc	r0
      000A6E E6               [12] 2366 	mov	a,@r0
      000A6F 3F               [12] 2367 	addc	a,r7
      000A70 FF               [12] 2368 	mov	r7,a
      000A71 EE               [12] 2369 	mov	a,r6
      000A72 24r00            [12] 2370 	add	a,#_pu
      000A74 F5 82            [12] 2371 	mov	dpl,a
      000A76 EF               [12] 2372 	mov	a,r7
      000A77 34s24            [12] 2373 	addc	a,#(_pu >> 8)
      000A79 F5 83            [12] 2374 	mov	dph,a
      000A7B E0               [24] 2375 	movx	a,@dptr
      000A7C FD               [12] 2376 	mov	r5,a
      000A7D EE               [12] 2377 	mov	a,r6
      000A7E 24r00            [12] 2378 	add	a,#_nu
      000A80 F5 82            [12] 2379 	mov	dpl,a
      000A82 EF               [12] 2380 	mov	a,r7
      000A83 34s6C            [12] 2381 	addc	a,#(_nu >> 8)
      000A85 F5 83            [12] 2382 	mov	dph,a
      000A87 E0               [24] 2383 	movx	a,@dptr
      000A88 FC               [12] 2384 	mov	r4,a
      000A89 6D               [12] 2385 	xrl	a,r5
      000A8A 78r1D            [12] 2386 	mov	r0,#_cycle2
      000A8C 46               [12] 2387 	orl	a,@r0
      000A8D F6               [12] 2388 	mov	@r0,a
                                   2389 ;	life.c:220: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000A8E EE               [12] 2390 	mov	a,r6
      000A8F 24r00            [12] 2391 	add	a,#_u
      000A91 F5 82            [12] 2392 	mov	dpl,a
      000A93 EF               [12] 2393 	mov	a,r7
      000A94 34s48            [12] 2394 	addc	a,#(_u >> 8)
      000A96 F5 83            [12] 2395 	mov	dph,a
      000A98 E0               [24] 2396 	movx	a,@dptr
      000A99 FF               [12] 2397 	mov	r7,a
      000A9A EC               [12] 2398 	mov	a,r4
      000A9B 6F               [12] 2399 	xrl	a,r7
      000A9C 78r1C            [12] 2400 	mov	r0,#_fixed
      000A9E 46               [12] 2401 	orl	a,@r0
      000A9F F6               [12] 2402 	mov	@r0,a
                                   2403 ;	life.c:199: for (x = 0; x < W; x++) {
      000AA0 78r13            [12] 2404 	mov	r0,#_x
      000AA2 06               [12] 2405 	inc	@r0
      000AA3 B6 00 02         [24] 2406 	cjne	@r0,#0x00,00628$
      000AA6 08               [12] 2407 	inc	r0
      000AA7 06               [12] 2408 	inc	@r0
      000AA8                       2409 00628$:
      000AA8 78r13            [12] 2410 	mov	r0,#_x
      000AAA C3               [12] 2411 	clr	c
      000AAB E6               [12] 2412 	mov	a,@r0
      000AAC 94 30            [12] 2413 	subb	a,#0x30
      000AAE 08               [12] 2414 	inc	r0
      000AAF E6               [12] 2415 	mov	a,@r0
      000AB0 64 80            [12] 2416 	xrl	a,#0x80
      000AB2 94 80            [12] 2417 	subb	a,#0x80
      000AB4 50 03            [24] 2418 	jnc	00629$
      000AB6 02r07r28         [24] 2419 	ljmp	00265$
      000AB9                       2420 00629$:
                                   2421 ;	life.c:196: for (y = 0; y < H; y++) {
      000AB9 78r15            [12] 2422 	mov	r0,#_y
      000ABB 06               [12] 2423 	inc	@r0
      000ABC B6 00 02         [24] 2424 	cjne	@r0,#0x00,00630$
      000ABF 08               [12] 2425 	inc	r0
      000AC0 06               [12] 2426 	inc	@r0
      000AC1                       2427 00630$:
      000AC1 78r15            [12] 2428 	mov	r0,#_y
      000AC3 C3               [12] 2429 	clr	c
      000AC4 E6               [12] 2430 	mov	a,@r0
      000AC5 94 C0            [12] 2431 	subb	a,#0xc0
      000AC7 08               [12] 2432 	inc	r0
      000AC8 E6               [12] 2433 	mov	a,@r0
      000AC9 64 80            [12] 2434 	xrl	a,#0x80
      000ACB 94 80            [12] 2435 	subb	a,#0x80
      000ACD 50 03            [24] 2436 	jnc	00631$
      000ACF 02r07r0C         [24] 2437 	ljmp	00267$
      000AD2                       2438 00631$:
                                   2439 ;	life.c:224: OE76 = OE76_0;
      000AD2 78r12            [12] 2440 	mov	r0,#_OE76
      000AD4 76 3F            [12] 2441 	mov	@r0,#0x3f
                                   2442 ;	life.c:225: flashOE();
      000AD6 12r00r18         [24] 2443 	lcall	_flashOE
                                   2444 ;	life.c:227: cycle2 = !cycle2;
      000AD9 78r1D            [12] 2445 	mov	r0,#_cycle2
      000ADB E6               [12] 2446 	mov	a,@r0
      000ADC B4 01 00         [24] 2447 	cjne	a,#0x01,00632$
      000ADF                       2448 00632$:
      000ADF 92*00            [24] 2449 	mov	b0,c
      000AE1 78r1D            [12] 2450 	mov	r0,#_cycle2
      000AE3 E4               [12] 2451 	clr	a
      000AE4 33               [12] 2452 	rlc	a
      000AE5 F6               [12] 2453 	mov	@r0,a
                                   2454 ;	life.c:228: fixed = !fixed;
      000AE6 78r1C            [12] 2455 	mov	r0,#_fixed
      000AE8 E6               [12] 2456 	mov	a,@r0
      000AE9 B4 01 00         [24] 2457 	cjne	a,#0x01,00633$
      000AEC                       2458 00633$:
      000AEC 92*00            [24] 2459 	mov	b0,c
      000AEE 78r1C            [12] 2460 	mov	r0,#_fixed
      000AF0 E4               [12] 2461 	clr	a
      000AF1 33               [12] 2462 	rlc	a
      000AF2 F6               [12] 2463 	mov	@r0,a
                                   2464 ;	life.c:230: memcpy(pu, u, sizeof (u));
      000AF3 E4               [12] 2465 	clr	a
      000AF4 C0 E0            [24] 2466 	push	acc
      000AF6 74 24            [12] 2467 	mov	a,#0x24
      000AF8 C0 E0            [24] 2468 	push	acc
      000AFA 74r00            [12] 2469 	mov	a,#_u
      000AFC C0 E0            [24] 2470 	push	acc
      000AFE 74s48            [12] 2471 	mov	a,#(_u >> 8)
      000B00 C0 E0            [24] 2472 	push	acc
      000B02 E4               [12] 2473 	clr	a
      000B03 C0 E0            [24] 2474 	push	acc
      000B05 90r24r00         [24] 2475 	mov	dptr,#_pu
      000B08 75 F0 00         [24] 2476 	mov	b,#0x00
      000B0B 12r00r00         [24] 2477 	lcall	___memcpy
      000B0E E5 81            [12] 2478 	mov	a,sp
      000B10 24 FB            [12] 2479 	add	a,#0xfb
      000B12 F5 81            [12] 2480 	mov	sp,a
                                   2481 ;	life.c:231: memcpy(u, nu, sizeof (nu));
      000B14 E4               [12] 2482 	clr	a
      000B15 C0 E0            [24] 2483 	push	acc
      000B17 74 24            [12] 2484 	mov	a,#0x24
      000B19 C0 E0            [24] 2485 	push	acc
      000B1B 74r00            [12] 2486 	mov	a,#_nu
      000B1D C0 E0            [24] 2487 	push	acc
      000B1F 74s6C            [12] 2488 	mov	a,#(_nu >> 8)
      000B21 C0 E0            [24] 2489 	push	acc
      000B23 E4               [12] 2490 	clr	a
      000B24 C0 E0            [24] 2491 	push	acc
      000B26 90r48r00         [24] 2492 	mov	dptr,#_u
      000B29 75 F0 00         [24] 2493 	mov	b,#0x00
      000B2C 12r00r00         [24] 2494 	lcall	___memcpy
      000B2F E5 81            [12] 2495 	mov	a,sp
      000B31 24 FB            [12] 2496 	add	a,#0xfb
      000B33 F5 81            [12] 2497 	mov	sp,a
                                   2498 ;	life.c:285: if (fixed || cycle2) {
      000B35 78r1C            [12] 2499 	mov	r0,#_fixed
      000B37 E6               [12] 2500 	mov	a,@r0
      000B38 70 08            [24] 2501 	jnz	00135$
      000B3A 78r1D            [12] 2502 	mov	r0,#_cycle2
      000B3C E6               [12] 2503 	mov	a,@r0
      000B3D 70 03            [24] 2504 	jnz	00635$
      000B3F 02r0BrD6         [24] 2505 	ljmp	00136$
      000B42                       2506 00635$:
      000B42                       2507 00135$:
                                   2508 ;	life.c:286: printstr("DONE ");
      000B42 7Dr64            [12] 2509 	mov	r5,#___str_10
      000B44 7Es00            [12] 2510 	mov	r6,#(___str_10 >> 8)
      000B46 7F 80            [12] 2511 	mov	r7,#0x80
                                   2512 ;	life.c:35: return;
      000B48                       2513 00270$:
                                   2514 ;	life.c:33: for (; *s; s++) putchar(*s);
      000B48 8D 82            [24] 2515 	mov	dpl,r5
      000B4A 8E 83            [24] 2516 	mov	dph,r6
      000B4C 8F F0            [24] 2517 	mov	b,r7
      000B4E 12r00r00         [24] 2518 	lcall	__gptrget
      000B51 FC               [12] 2519 	mov	r4,a
      000B52 60 1C            [24] 2520 	jz	00228$
      000B54 7B 00            [12] 2521 	mov	r3,#0x00
      000B56 8C 82            [24] 2522 	mov	dpl,r4
      000B58 8B 83            [24] 2523 	mov	dph,r3
      000B5A C0 07            [24] 2524 	push	ar7
      000B5C C0 06            [24] 2525 	push	ar6
      000B5E C0 05            [24] 2526 	push	ar5
      000B60 12r00r00         [24] 2527 	lcall	_putchar
      000B63 D0 05            [24] 2528 	pop	ar5
      000B65 D0 06            [24] 2529 	pop	ar6
      000B67 D0 07            [24] 2530 	pop	ar7
      000B69 0D               [12] 2531 	inc	r5
                                   2532 ;	life.c:286: printstr("DONE ");
      000B6A BD 00 DB         [24] 2533 	cjne	r5,#0x00,00270$
      000B6D 0E               [12] 2534 	inc	r6
      000B6E 80 D8            [24] 2535 	sjmp	00270$
      000B70                       2536 00228$:
                                   2537 ;	life.c:287: if (fixed) printstr("FIXED\r\n");
      000B70 78r1C            [12] 2538 	mov	r0,#_fixed
      000B72 E6               [12] 2539 	mov	a,@r0
      000B73 60 2E            [24] 2540 	jz	00133$
      000B75 7Dr6A            [12] 2541 	mov	r5,#___str_11
      000B77 7Es00            [12] 2542 	mov	r6,#(___str_11 >> 8)
      000B79 7F 80            [12] 2543 	mov	r7,#0x80
                                   2544 ;	life.c:35: return;
      000B7B                       2545 00273$:
                                   2546 ;	life.c:33: for (; *s; s++) putchar(*s);
      000B7B 8D 82            [24] 2547 	mov	dpl,r5
      000B7D 8E 83            [24] 2548 	mov	dph,r6
      000B7F 8F F0            [24] 2549 	mov	b,r7
      000B81 12r00r00         [24] 2550 	lcall	__gptrget
      000B84 FC               [12] 2551 	mov	r4,a
      000B85 60 4A            [24] 2552 	jz	00134$
      000B87 7B 00            [12] 2553 	mov	r3,#0x00
      000B89 8C 82            [24] 2554 	mov	dpl,r4
      000B8B 8B 83            [24] 2555 	mov	dph,r3
      000B8D C0 07            [24] 2556 	push	ar7
      000B8F C0 06            [24] 2557 	push	ar6
      000B91 C0 05            [24] 2558 	push	ar5
      000B93 12r00r00         [24] 2559 	lcall	_putchar
      000B96 D0 05            [24] 2560 	pop	ar5
      000B98 D0 06            [24] 2561 	pop	ar6
      000B9A D0 07            [24] 2562 	pop	ar7
      000B9C 0D               [12] 2563 	inc	r5
                                   2564 ;	life.c:287: if (fixed) printstr("FIXED\r\n");
      000B9D BD 00 DB         [24] 2565 	cjne	r5,#0x00,00273$
      000BA0 0E               [12] 2566 	inc	r6
      000BA1 80 D8            [24] 2567 	sjmp	00273$
      000BA3                       2568 00133$:
                                   2569 ;	life.c:288: else printstr("CYCLE2\r\n");
      000BA3 7Dr72            [12] 2570 	mov	r5,#___str_12
      000BA5 7Es00            [12] 2571 	mov	r6,#(___str_12 >> 8)
      000BA7 7F 80            [12] 2572 	mov	r7,#0x80
                                   2573 ;	life.c:35: return;
      000BA9                       2574 00276$:
                                   2575 ;	life.c:33: for (; *s; s++) putchar(*s);
      000BA9 8D 82            [24] 2576 	mov	dpl,r5
      000BAB 8E 83            [24] 2577 	mov	dph,r6
      000BAD 8F F0            [24] 2578 	mov	b,r7
      000BAF 12r00r00         [24] 2579 	lcall	__gptrget
      000BB2 FC               [12] 2580 	mov	r4,a
      000BB3 60 1C            [24] 2581 	jz	00134$
      000BB5 7B 00            [12] 2582 	mov	r3,#0x00
      000BB7 8C 82            [24] 2583 	mov	dpl,r4
      000BB9 8B 83            [24] 2584 	mov	dph,r3
      000BBB C0 07            [24] 2585 	push	ar7
      000BBD C0 06            [24] 2586 	push	ar6
      000BBF C0 05            [24] 2587 	push	ar5
      000BC1 12r00r00         [24] 2588 	lcall	_putchar
      000BC4 D0 05            [24] 2589 	pop	ar5
      000BC6 D0 06            [24] 2590 	pop	ar6
      000BC8 D0 07            [24] 2591 	pop	ar7
      000BCA 0D               [12] 2592 	inc	r5
                                   2593 ;	life.c:288: else printstr("CYCLE2\r\n");
      000BCB BD 00 DB         [24] 2594 	cjne	r5,#0x00,00276$
      000BCE 0E               [12] 2595 	inc	r6
      000BCF 80 D8            [24] 2596 	sjmp	00276$
      000BD1                       2597 00134$:
                                   2598 ;	life.c:289: (void)getchar();
      000BD1 12r00r00         [24] 2599 	lcall	_getchar
                                   2600 ;	life.c:290: break;
      000BD4 80 50            [24] 2601 	sjmp	00145$
      000BD6                       2602 00136$:
                                   2603 ;	life.c:293: c = getchar_poll();
      000BD6 12r00r00         [24] 2604 	lcall	_getchar_poll
      000BD9 AE 82            [24] 2605 	mov	r6,dpl
      000BDB AF 83            [24] 2606 	mov	r7,dph
      000BDD 78r19            [12] 2607 	mov	r0,#_c
      000BDF A6 06            [24] 2608 	mov	@r0,ar6
      000BE1 08               [12] 2609 	inc	r0
      000BE2 A6 07            [24] 2610 	mov	@r0,ar7
                                   2611 ;	life.c:294: if (c > 0) {
      000BE4 C3               [12] 2612 	clr	c
      000BE5 E4               [12] 2613 	clr	a
      000BE6 9E               [12] 2614 	subb	a,r6
      000BE7 74 80            [12] 2615 	mov	a,#(0x00 ^ 0x80)
      000BE9 8F F0            [24] 2616 	mov	b,r7
      000BEB 63 F0 80         [24] 2617 	xrl	b,#0x80
      000BEE 95 F0            [12] 2618 	subb	a,b
      000BF0 40 03            [24] 2619 	jc	00643$
      000BF2 02r06rE1         [24] 2620 	ljmp	00280$
      000BF5                       2621 00643$:
                                   2622 ;	life.c:295: c = toupper(c);
      000BF5 8E 82            [24] 2623 	mov	dpl,r6
      000BF7 8F 83            [24] 2624 	mov	dph,r7
      000BF9 12r00r00         [24] 2625 	lcall	_toupper
      000BFC AE 82            [24] 2626 	mov	r6,dpl
      000BFE AF 83            [24] 2627 	mov	r7,dph
      000C00 78r19            [12] 2628 	mov	r0,#_c
      000C02 A6 06            [24] 2629 	mov	@r0,ar6
      000C04 08               [12] 2630 	inc	r0
      000C05 A6 07            [24] 2631 	mov	@r0,ar7
                                   2632 ;	life.c:296: if (c == (int)'T') i0 = 1;
      000C07 BE 54 0A         [24] 2633 	cjne	r6,#0x54,00141$
      000C0A BF 00 07         [24] 2634 	cjne	r7,#0x00,00141$
      000C0D 78r10            [12] 2635 	mov	r0,#_i0
      000C0F 76 01            [12] 2636 	mov	@r0,#0x01
      000C11 02r06rE1         [24] 2637 	ljmp	00280$
      000C14                       2638 00141$:
                                   2639 ;	life.c:297: else if (c == (int)'B') i1 = 1;
      000C14 BE 42 05         [24] 2640 	cjne	r6,#0x42,00646$
      000C17 BF 00 02         [24] 2641 	cjne	r7,#0x00,00646$
      000C1A 80 03            [24] 2642 	sjmp	00647$
      000C1C                       2643 00646$:
      000C1C 02r06rE1         [24] 2644 	ljmp	00280$
      000C1F                       2645 00647$:
      000C1F 78r11            [12] 2646 	mov	r0,#_i1
      000C21 76 01            [12] 2647 	mov	@r0,#0x01
      000C23 02r06rE1         [24] 2648 	ljmp	00280$
      000C26                       2649 00145$:
                                   2650 ;	life.c:301: if (i1) {
      000C26 78r11            [12] 2651 	mov	r0,#_i1
      000C28 E6               [12] 2652 	mov	a,@r0
      000C29 60 31            [24] 2653 	jz	00286$
                                   2654 ;	life.c:302: printstr("BREAK\r\n");
      000C2B 7Dr7B            [12] 2655 	mov	r5,#___str_13
      000C2D 7Es00            [12] 2656 	mov	r6,#(___str_13 >> 8)
      000C2F 7F 80            [12] 2657 	mov	r7,#0x80
                                   2658 ;	life.c:35: return;
      000C31                       2659 00283$:
                                   2660 ;	life.c:33: for (; *s; s++) putchar(*s);
      000C31 8D 82            [24] 2661 	mov	dpl,r5
      000C33 8E 83            [24] 2662 	mov	dph,r6
      000C35 8F F0            [24] 2663 	mov	b,r7
      000C37 12r00r00         [24] 2664 	lcall	__gptrget
      000C3A FC               [12] 2665 	mov	r4,a
      000C3B 60 1C            [24] 2666 	jz	00234$
      000C3D 7B 00            [12] 2667 	mov	r3,#0x00
      000C3F 8C 82            [24] 2668 	mov	dpl,r4
      000C41 8B 83            [24] 2669 	mov	dph,r3
      000C43 C0 07            [24] 2670 	push	ar7
      000C45 C0 06            [24] 2671 	push	ar6
      000C47 C0 05            [24] 2672 	push	ar5
      000C49 12r00r00         [24] 2673 	lcall	_putchar
      000C4C D0 05            [24] 2674 	pop	ar5
      000C4E D0 06            [24] 2675 	pop	ar6
      000C50 D0 07            [24] 2676 	pop	ar7
      000C52 0D               [12] 2677 	inc	r5
                                   2678 ;	life.c:302: printstr("BREAK\r\n");
      000C53 BD 00 DB         [24] 2679 	cjne	r5,#0x00,00283$
      000C56 0E               [12] 2680 	inc	r6
      000C57 80 D8            [24] 2681 	sjmp	00283$
      000C59                       2682 00234$:
                                   2683 ;	life.c:303: (void)getchar();
      000C59 12r00r00         [24] 2684 	lcall	_getchar
      000C5C                       2685 00286$:
                                   2686 ;	life.c:256: for (i0 = 0; !i0; ) {	
      000C5C 78r10            [12] 2687 	mov	r0,#_i0
      000C5E E6               [12] 2688 	mov	a,@r0
      000C5F 70 03            [24] 2689 	jnz	00651$
      000C61 02r03r18         [24] 2690 	ljmp	00285$
      000C64                       2691 00651$:
                                   2692 ;	life.c:307: term:
      000C64                       2693 00149$:
                                   2694 ;	life.c:308: EA = 0;
                                   2695 ;	assignBit
      000C64 C2 AF            [12] 2696 	clr	_EA
                                   2697 ;	life.c:309: printstr("TERM\r\n");
      000C66 7Dr83            [12] 2698 	mov	r5,#___str_14
      000C68 7Es00            [12] 2699 	mov	r6,#(___str_14 >> 8)
      000C6A 7F 80            [12] 2700 	mov	r7,#0x80
                                   2701 ;	life.c:35: return;
      000C6C                       2702 00288$:
                                   2703 ;	life.c:33: for (; *s; s++) putchar(*s);
      000C6C 8D 82            [24] 2704 	mov	dpl,r5
      000C6E 8E 83            [24] 2705 	mov	dph,r6
      000C70 8F F0            [24] 2706 	mov	b,r7
      000C72 12r00r00         [24] 2707 	lcall	__gptrget
      000C75 FC               [12] 2708 	mov	r4,a
      000C76 60 1C            [24] 2709 	jz	00236$
      000C78 7B 00            [12] 2710 	mov	r3,#0x00
      000C7A 8C 82            [24] 2711 	mov	dpl,r4
      000C7C 8B 83            [24] 2712 	mov	dph,r3
      000C7E C0 07            [24] 2713 	push	ar7
      000C80 C0 06            [24] 2714 	push	ar6
      000C82 C0 05            [24] 2715 	push	ar5
      000C84 12r00r00         [24] 2716 	lcall	_putchar
      000C87 D0 05            [24] 2717 	pop	ar5
      000C89 D0 06            [24] 2718 	pop	ar6
      000C8B D0 07            [24] 2719 	pop	ar7
      000C8D 0D               [12] 2720 	inc	r5
                                   2721 ;	life.c:309: printstr("TERM\r\n");
      000C8E BD 00 DB         [24] 2722 	cjne	r5,#0x00,00288$
      000C91 0E               [12] 2723 	inc	r6
      000C92 80 D8            [24] 2724 	sjmp	00288$
      000C94                       2725 00236$:
                                   2726 ;	life.c:310: (void)getchar();
      000C94 12r00r00         [24] 2727 	lcall	_getchar
                                   2728 ;	life.c:312: PCON |= 2;
      000C97 43 87 02         [24] 2729 	orl	_PCON,#0x02
                                   2730 ;	life.c:314: return;
                                   2731 ;	life.c:315: }
      000C9A 85*00 81         [24] 2732 	mov	sp,_bp
      000C9D D0*00            [24] 2733 	pop	_bp
      000C9F 22               [24] 2734 	ret
                                   2735 	.area CSEG    (CODE)
                                   2736 	.area CONST   (CODE)
                                   2737 	.area CONST   (CODE)
      000000                       2738 ___str_0:
      000000 1B                    2739 	.db 0x1b
      000001 5B 3F 32 35 6C        2740 	.ascii "[?25l"
      000006 00                    2741 	.db 0x00
                                   2742 	.area CSEG    (CODE)
                                   2743 	.area CONST   (CODE)
      000007                       2744 ___str_1:
      000007 1B                    2745 	.db 0x1b
      000008 5B 32 4A 47 45 4E 20  2746 	.ascii "[2JGEN "
      00000F 00                    2747 	.db 0x00
                                   2748 	.area CSEG    (CODE)
                                   2749 	.area CONST   (CODE)
      000010                       2750 ___str_2:
      000010 0D                    2751 	.db 0x0d
      000011 0A                    2752 	.db 0x0a
      000012 00                    2753 	.db 0x00
                                   2754 	.area CSEG    (CODE)
                                   2755 	.area CONST   (CODE)
      000013                       2756 ___str_3:
      000013 1B                    2757 	.db 0x1b
      000014 5B 3F 32 35 68        2758 	.ascii "[?25h"
      000019 00                    2759 	.db 0x00
                                   2760 	.area CSEG    (CODE)
                                   2761 	.area CONST   (CODE)
      00001A                       2762 ___str_4:
      00001A 4C 4F 41 44 20 30 20  2763 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000028 00                    2764 	.db 0x00
                                   2765 	.area CSEG    (CODE)
                                   2766 	.area CONST   (CODE)
      000029                       2767 ___str_5:
      000029 3E                    2768 	.ascii ">"
      00002A 0D                    2769 	.db 0x0d
      00002B 0A                    2770 	.db 0x0a
      00002C 00                    2771 	.db 0x00
                                   2772 	.area CSEG    (CODE)
                                   2773 	.area CONST   (CODE)
      00002D                       2774 ___str_6:
      00002D 52 41 4E 44 4F 4D     2775 	.ascii "RANDOM"
      000033 00                    2776 	.db 0x00
                                   2777 	.area CSEG    (CODE)
                                   2778 	.area CONST   (CODE)
      000034                       2779 ___str_7:
      000034 1B                    2780 	.db 0x1b
      000035 5B 3F 32 35 68        2781 	.ascii "[?25h"
      00003A 1B                    2782 	.db 0x1b
      00003B 5B 6D                 2783 	.ascii "[m"
      00003D 00                    2784 	.db 0x00
                                   2785 	.area CSEG    (CODE)
                                   2786 	.area CONST   (CODE)
      00003E                       2787 ___str_8:
      00003E 4C 49 46 45 20 49 4E  2788 	.ascii "LIFE INIT T L R P"
             49 54 20 54 20 4C 20
             52 20 50
      00004F 0D                    2789 	.db 0x0d
      000050 0A                    2790 	.db 0x0a
      000051 00                    2791 	.db 0x00
                                   2792 	.area CSEG    (CODE)
                                   2793 	.area CONST   (CODE)
      000052                       2794 ___str_9:
      000052 52 45 41 44 59 20 54  2795 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000061 0D                    2796 	.db 0x0d
      000062 0A                    2797 	.db 0x0a
      000063 00                    2798 	.db 0x00
                                   2799 	.area CSEG    (CODE)
                                   2800 	.area CONST   (CODE)
      000064                       2801 ___str_10:
      000064 44 4F 4E 45 20        2802 	.ascii "DONE "
      000069 00                    2803 	.db 0x00
                                   2804 	.area CSEG    (CODE)
                                   2805 	.area CONST   (CODE)
      00006A                       2806 ___str_11:
      00006A 46 49 58 45 44        2807 	.ascii "FIXED"
      00006F 0D                    2808 	.db 0x0d
      000070 0A                    2809 	.db 0x0a
      000071 00                    2810 	.db 0x00
                                   2811 	.area CSEG    (CODE)
                                   2812 	.area CONST   (CODE)
      000072                       2813 ___str_12:
      000072 43 59 43 4C 45 32     2814 	.ascii "CYCLE2"
      000078 0D                    2815 	.db 0x0d
      000079 0A                    2816 	.db 0x0a
      00007A 00                    2817 	.db 0x00
                                   2818 	.area CSEG    (CODE)
                                   2819 	.area CONST   (CODE)
      00007B                       2820 ___str_13:
      00007B 42 52 45 41 4B        2821 	.ascii "BREAK"
      000080 0D                    2822 	.db 0x0d
      000081 0A                    2823 	.db 0x0a
      000082 00                    2824 	.db 0x00
                                   2825 	.area CSEG    (CODE)
                                   2826 	.area CONST   (CODE)
      000083                       2827 ___str_14:
      000083 54 45 52 4D           2828 	.ascii "TERM"
      000087 0D                    2829 	.db 0x0d
      000088 0A                    2830 	.db 0x0a
      000089 00                    2831 	.db 0x00
                                   2832 	.area CSEG    (CODE)
                                   2833 	.area XINIT   (CODE)
                                   2834 	.area CABS    (ABS,CODE)
