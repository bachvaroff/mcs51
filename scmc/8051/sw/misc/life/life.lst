                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _srand
                                     21 	.globl _rand
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _FL
                                     29 	.globl _P
                                     30 	.globl _TF2
                                     31 	.globl _EXF2
                                     32 	.globl _RCLK
                                     33 	.globl _TCLK
                                     34 	.globl _EXEN2
                                     35 	.globl _TR2
                                     36 	.globl _C_T2
                                     37 	.globl _CP_RL2
                                     38 	.globl _T2CON_7
                                     39 	.globl _T2CON_6
                                     40 	.globl _T2CON_5
                                     41 	.globl _T2CON_4
                                     42 	.globl _T2CON_3
                                     43 	.globl _T2CON_2
                                     44 	.globl _T2CON_1
                                     45 	.globl _T2CON_0
                                     46 	.globl _PT2
                                     47 	.globl _PS
                                     48 	.globl _PT1
                                     49 	.globl _PX1
                                     50 	.globl _PT0
                                     51 	.globl _PX0
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _EA
                                     69 	.globl _ET2
                                     70 	.globl _ES
                                     71 	.globl _ET1
                                     72 	.globl _EX1
                                     73 	.globl _ET0
                                     74 	.globl _EX0
                                     75 	.globl _P2_7
                                     76 	.globl _P2_6
                                     77 	.globl _P2_5
                                     78 	.globl _P2_4
                                     79 	.globl _P2_3
                                     80 	.globl _P2_2
                                     81 	.globl _P2_1
                                     82 	.globl _P2_0
                                     83 	.globl _SM0
                                     84 	.globl _SM1
                                     85 	.globl _SM2
                                     86 	.globl _REN
                                     87 	.globl _TB8
                                     88 	.globl _RB8
                                     89 	.globl _TI
                                     90 	.globl _RI
                                     91 	.globl _T2EX
                                     92 	.globl _T2
                                     93 	.globl _P1_7
                                     94 	.globl _P1_6
                                     95 	.globl _P1_5
                                     96 	.globl _P1_4
                                     97 	.globl _P1_3
                                     98 	.globl _P1_2
                                     99 	.globl _P1_1
                                    100 	.globl _P1_0
                                    101 	.globl _TF1
                                    102 	.globl _TR1
                                    103 	.globl _TF0
                                    104 	.globl _TR0
                                    105 	.globl _IE1
                                    106 	.globl _IT1
                                    107 	.globl _IE0
                                    108 	.globl _IT0
                                    109 	.globl _P0_7
                                    110 	.globl _P0_6
                                    111 	.globl _P0_5
                                    112 	.globl _P0_4
                                    113 	.globl _P0_3
                                    114 	.globl _P0_2
                                    115 	.globl _P0_1
                                    116 	.globl _P0_0
                                    117 	.globl _B
                                    118 	.globl _A
                                    119 	.globl _ACC
                                    120 	.globl _PSW
                                    121 	.globl _TH2
                                    122 	.globl _TL2
                                    123 	.globl _RCAP2H
                                    124 	.globl _RCAP2L
                                    125 	.globl _T2MOD
                                    126 	.globl _T2CON
                                    127 	.globl _IP
                                    128 	.globl _P3
                                    129 	.globl _IE
                                    130 	.globl _P2
                                    131 	.globl _SBUF
                                    132 	.globl _SCON
                                    133 	.globl _P1
                                    134 	.globl _TH1
                                    135 	.globl _TH0
                                    136 	.globl _TL1
                                    137 	.globl _TL0
                                    138 	.globl _TMOD
                                    139 	.globl _TCON
                                    140 	.globl _PCON
                                    141 	.globl _DPH
                                    142 	.globl _DPL
                                    143 	.globl _SP
                                    144 	.globl _P0
                                    145 ;--------------------------------------------------------
                                    146 ; special function registers
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0	=	0x0080
                           000081   151 _SP	=	0x0081
                           000082   152 _DPL	=	0x0082
                           000083   153 _DPH	=	0x0083
                           000087   154 _PCON	=	0x0087
                           000088   155 _TCON	=	0x0088
                           000089   156 _TMOD	=	0x0089
                           00008A   157 _TL0	=	0x008a
                           00008B   158 _TL1	=	0x008b
                           00008C   159 _TH0	=	0x008c
                           00008D   160 _TH1	=	0x008d
                           000090   161 _P1	=	0x0090
                           000098   162 _SCON	=	0x0098
                           000099   163 _SBUF	=	0x0099
                           0000A0   164 _P2	=	0x00a0
                           0000A8   165 _IE	=	0x00a8
                           0000B0   166 _P3	=	0x00b0
                           0000B8   167 _IP	=	0x00b8
                           0000C8   168 _T2CON	=	0x00c8
                           0000C9   169 _T2MOD	=	0x00c9
                           0000CA   170 _RCAP2L	=	0x00ca
                           0000CB   171 _RCAP2H	=	0x00cb
                           0000CC   172 _TL2	=	0x00cc
                           0000CD   173 _TH2	=	0x00cd
                           0000D0   174 _PSW	=	0x00d0
                           0000E0   175 _ACC	=	0x00e0
                           0000E0   176 _A	=	0x00e0
                           0000F0   177 _B	=	0x00f0
                                    178 ;--------------------------------------------------------
                                    179 ; special function bits
                                    180 ;--------------------------------------------------------
                                    181 	.area RSEG    (ABS,DATA)
      000000                        182 	.org 0x0000
                           000080   183 _P0_0	=	0x0080
                           000081   184 _P0_1	=	0x0081
                           000082   185 _P0_2	=	0x0082
                           000083   186 _P0_3	=	0x0083
                           000084   187 _P0_4	=	0x0084
                           000085   188 _P0_5	=	0x0085
                           000086   189 _P0_6	=	0x0086
                           000087   190 _P0_7	=	0x0087
                           000088   191 _IT0	=	0x0088
                           000089   192 _IE0	=	0x0089
                           00008A   193 _IT1	=	0x008a
                           00008B   194 _IE1	=	0x008b
                           00008C   195 _TR0	=	0x008c
                           00008D   196 _TF0	=	0x008d
                           00008E   197 _TR1	=	0x008e
                           00008F   198 _TF1	=	0x008f
                           000090   199 _P1_0	=	0x0090
                           000091   200 _P1_1	=	0x0091
                           000092   201 _P1_2	=	0x0092
                           000093   202 _P1_3	=	0x0093
                           000094   203 _P1_4	=	0x0094
                           000095   204 _P1_5	=	0x0095
                           000096   205 _P1_6	=	0x0096
                           000097   206 _P1_7	=	0x0097
                           000090   207 _T2	=	0x0090
                           000091   208 _T2EX	=	0x0091
                           000098   209 _RI	=	0x0098
                           000099   210 _TI	=	0x0099
                           00009A   211 _RB8	=	0x009a
                           00009B   212 _TB8	=	0x009b
                           00009C   213 _REN	=	0x009c
                           00009D   214 _SM2	=	0x009d
                           00009E   215 _SM1	=	0x009e
                           00009F   216 _SM0	=	0x009f
                           0000A0   217 _P2_0	=	0x00a0
                           0000A1   218 _P2_1	=	0x00a1
                           0000A2   219 _P2_2	=	0x00a2
                           0000A3   220 _P2_3	=	0x00a3
                           0000A4   221 _P2_4	=	0x00a4
                           0000A5   222 _P2_5	=	0x00a5
                           0000A6   223 _P2_6	=	0x00a6
                           0000A7   224 _P2_7	=	0x00a7
                           0000A8   225 _EX0	=	0x00a8
                           0000A9   226 _ET0	=	0x00a9
                           0000AA   227 _EX1	=	0x00aa
                           0000AB   228 _ET1	=	0x00ab
                           0000AC   229 _ES	=	0x00ac
                           0000AD   230 _ET2	=	0x00ad
                           0000AF   231 _EA	=	0x00af
                           0000B0   232 _P3_0	=	0x00b0
                           0000B1   233 _P3_1	=	0x00b1
                           0000B2   234 _P3_2	=	0x00b2
                           0000B3   235 _P3_3	=	0x00b3
                           0000B4   236 _P3_4	=	0x00b4
                           0000B5   237 _P3_5	=	0x00b5
                           0000B6   238 _P3_6	=	0x00b6
                           0000B7   239 _P3_7	=	0x00b7
                           0000B0   240 _RXD	=	0x00b0
                           0000B1   241 _TXD	=	0x00b1
                           0000B2   242 _INT0	=	0x00b2
                           0000B3   243 _INT1	=	0x00b3
                           0000B4   244 _T0	=	0x00b4
                           0000B5   245 _T1	=	0x00b5
                           0000B6   246 _WR	=	0x00b6
                           0000B7   247 _RD	=	0x00b7
                           0000B8   248 _PX0	=	0x00b8
                           0000B9   249 _PT0	=	0x00b9
                           0000BA   250 _PX1	=	0x00ba
                           0000BB   251 _PT1	=	0x00bb
                           0000BC   252 _PS	=	0x00bc
                           0000BD   253 _PT2	=	0x00bd
                           0000C8   254 _T2CON_0	=	0x00c8
                           0000C9   255 _T2CON_1	=	0x00c9
                           0000CA   256 _T2CON_2	=	0x00ca
                           0000CB   257 _T2CON_3	=	0x00cb
                           0000CC   258 _T2CON_4	=	0x00cc
                           0000CD   259 _T2CON_5	=	0x00cd
                           0000CE   260 _T2CON_6	=	0x00ce
                           0000CF   261 _T2CON_7	=	0x00cf
                           0000C8   262 _CP_RL2	=	0x00c8
                           0000C9   263 _C_T2	=	0x00c9
                           0000CA   264 _TR2	=	0x00ca
                           0000CB   265 _EXEN2	=	0x00cb
                           0000CC   266 _TCLK	=	0x00cc
                           0000CD   267 _RCLK	=	0x00cd
                           0000CE   268 _EXF2	=	0x00ce
                           0000CF   269 _TF2	=	0x00cf
                           0000D0   270 _P	=	0x00d0
                           0000D1   271 _FL	=	0x00d1
                           0000D2   272 _OV	=	0x00d2
                           0000D3   273 _RS0	=	0x00d3
                           0000D4   274 _RS1	=	0x00d4
                           0000D5   275 _F0	=	0x00d5
                           0000D6   276 _AC	=	0x00d6
                           0000D7   277 _CY	=	0x00d7
                                    278 ;--------------------------------------------------------
                                    279 ; overlayable register banks
                                    280 ;--------------------------------------------------------
                                    281 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        284 	.ds 8
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable bit register bank
                                    287 ;--------------------------------------------------------
                                    288 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        289 bits:
      000000                        290 	.ds 1
                           008000   291 	b0 = bits[0]
                           008100   292 	b1 = bits[1]
                           008200   293 	b2 = bits[2]
                           008300   294 	b3 = bits[3]
                           008400   295 	b4 = bits[4]
                           008500   296 	b5 = bits[5]
                           008600   297 	b6 = bits[6]
                           008700   298 	b7 = bits[7]
                                    299 ;--------------------------------------------------------
                                    300 ; internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area DSEG    (DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable items in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 ;--------------------------------------------------------
                                    307 ; Stack segment in internal ram 
                                    308 ;--------------------------------------------------------
                                    309 	.area	SSEG
      000000                        310 __start__stack:
      000000                        311 	.ds	1
                                    312 
                                    313 ;--------------------------------------------------------
                                    314 ; indirectly addressable internal ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area ISEG    (DATA)
      000000                        317 _digits:
      000000                        318 	.ds 16
      000010                        319 _i0:
      000010                        320 	.ds 1
      000011                        321 _i1:
      000011                        322 	.ds 1
      000012                        323 _OE76:
      000012                        324 	.ds 1
      000013                        325 _x:
      000013                        326 	.ds 2
      000015                        327 _y:
      000015                        328 	.ds 2
      000017                        329 _j:
      000017                        330 	.ds 2
      000019                        331 _c:
      000019                        332 	.ds 2
      00001B                        333 _n:
      00001B                        334 	.ds 1
      00001C                        335 _fixed:
      00001C                        336 	.ds 1
      00001D                        337 _cycle2:
      00001D                        338 	.ds 1
      00001E                        339 _x1:
      00001E                        340 	.ds 2
      000020                        341 _y1:
      000020                        342 	.ds 2
      000022                        343 _generation:
      000022                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
                           00FFFE   362 _RND	=	0xfffe
                           00F006   363 _OEreg	=	0xf006
      000000                        364 _iu:
      000000                        365 	.ds 9216
      002400                        366 _pu:
      002400                        367 	.ds 9216
      004800                        368 _u:
      004800                        369 	.ds 9216
      006C00                        370 _nu:
      006C00                        371 	.ds 9216
                                    372 ;--------------------------------------------------------
                                    373 ; absolute external ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XABS    (ABS,XDATA)
                                    376 ;--------------------------------------------------------
                                    377 ; external initialized ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XISEG   (XDATA)
                                    380 	.area HOME    (CODE)
                                    381 	.area GSINIT0 (CODE)
                                    382 	.area GSINIT1 (CODE)
                                    383 	.area GSINIT2 (CODE)
                                    384 	.area GSINIT3 (CODE)
                                    385 	.area GSINIT4 (CODE)
                                    386 	.area GSINIT5 (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area CSEG    (CODE)
                                    390 ;--------------------------------------------------------
                                    391 ; interrupt vector 
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
      000000                        394 __interrupt_vect:
      000000 02r00r00         [24]  395 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  396 	ljmp	_int0
      000006                        397 	.ds	5
      00000B 32               [24]  398 	reti
      00000C                        399 	.ds	7
      000013 02r00r1A         [24]  400 	ljmp	_int1
                                    401 ;--------------------------------------------------------
                                    402 ; global & static initialisations
                                    403 ;--------------------------------------------------------
                                    404 	.area HOME    (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.area GSFINAL (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.globl __sdcc_gsinit_startup
                                    409 	.globl __sdcc_program_startup
                                    410 	.globl __start__stack
                                    411 	.globl __mcs51_genXINIT
                                    412 	.globl __mcs51_genXRAMCLEAR
                                    413 	.globl __mcs51_genRAMCLEAR
                                    414 ;	life.c:29: __idata static const char digits[16] = {
      000000 78r00            [12]  415 	mov	r0,#_digits
      000002 76 30            [12]  416 	mov	@r0,#0x30
      000004 78r01            [12]  417 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  418 	mov	@r0,#0x31
      000008 78r02            [12]  419 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  420 	mov	@r0,#0x32
      00000C 78r03            [12]  421 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  422 	mov	@r0,#0x33
      000010 78r04            [12]  423 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  424 	mov	@r0,#0x34
      000014 78r05            [12]  425 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  426 	mov	@r0,#0x35
      000018 78r06            [12]  427 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  428 	mov	@r0,#0x36
      00001C 78r07            [12]  429 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  430 	mov	@r0,#0x37
      000020 78r08            [12]  431 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  432 	mov	@r0,#0x38
      000024 78r09            [12]  433 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  434 	mov	@r0,#0x39
      000028 78r0A            [12]  435 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  436 	mov	@r0,#0x41
      00002C 78r0B            [12]  437 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  438 	mov	@r0,#0x42
      000030 78r0C            [12]  439 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  440 	mov	@r0,#0x43
      000034 78r0D            [12]  441 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  442 	mov	@r0,#0x44
      000038 78r0E            [12]  443 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  444 	mov	@r0,#0x45
      00003C 78r0F            [12]  445 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  446 	mov	@r0,#0x46
                                    447 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  448 	ljmp	__sdcc_program_startup
                                    449 ;--------------------------------------------------------
                                    450 ; Home
                                    451 ;--------------------------------------------------------
                                    452 	.area HOME    (CODE)
                                    453 	.area HOME    (CODE)
      000016                        454 __sdcc_program_startup:
      000016 02r02r2C         [24]  455 	ljmp	_main
                                    456 ;	return from main will return to caller
                                    457 ;--------------------------------------------------------
                                    458 ; code
                                    459 ;--------------------------------------------------------
                                    460 	.area CSEG    (CODE)
                                    461 ;------------------------------------------------------------
                                    462 ;Allocation info for local variables in function 'putchar'
                                    463 ;------------------------------------------------------------
                                    464 ;c                         Allocated to registers 
                                    465 ;------------------------------------------------------------
                                    466 ;	life.c:10: int putchar(int c) __naked {
                                    467 ;	-----------------------------------------
                                    468 ;	 function putchar
                                    469 ;	-----------------------------------------
      000000                        470 _putchar:
                                    471 ;	naked function: no prologue.
                                    472 ;	life.c:15: __endasm;
      000000 E5 82            [12]  473 	mov	a, dpl
      000002 02 00 30         [24]  474 	ljmp	0x0030
                                    475 ;	life.c:16: }
                                    476 ;	naked function: no epilogue.
                                    477 ;------------------------------------------------------------
                                    478 ;Allocation info for local variables in function 'getchar'
                                    479 ;------------------------------------------------------------
                                    480 ;	life.c:18: int getchar(void) __naked {
                                    481 ;	-----------------------------------------
                                    482 ;	 function getchar
                                    483 ;	-----------------------------------------
      000005                        484 _getchar:
                                    485 ;	naked function: no prologue.
                                    486 ;	life.c:24: __endasm;
      000005 12 00 32         [24]  487 	lcall	0x0032
      000008 F5 82            [12]  488 	mov	dpl, a
      00000A 75 83 00         [24]  489 	mov	dph, #0
      00000D 22               [24]  490 	ret
                                    491 ;	life.c:25: }
                                    492 ;	naked function: no epilogue.
                                    493 ;------------------------------------------------------------
                                    494 ;Allocation info for local variables in function 'int0'
                                    495 ;------------------------------------------------------------
                                    496 ;	life.c:58: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    497 ;	-----------------------------------------
                                    498 ;	 function int0
                                    499 ;	-----------------------------------------
      00000E                        500 _int0:
                           00000F   501 	ar7 = 0x0f
                           00000E   502 	ar6 = 0x0e
                           00000D   503 	ar5 = 0x0d
                           00000C   504 	ar4 = 0x0c
                           00000B   505 	ar3 = 0x0b
                           00000A   506 	ar2 = 0x0a
                           000009   507 	ar1 = 0x09
                           000008   508 	ar0 = 0x08
      00000E C0 D0            [24]  509 	push	psw
      000010 75 D0 08         [24]  510 	mov	psw,#0x08
                                    511 ;	life.c:59: i0 = 1;
      000013 78r10            [12]  512 	mov	r0,#_i0
      000015 76 01            [12]  513 	mov	@r0,#0x01
                                    514 ;	life.c:60: }
      000017 D0 D0            [24]  515 	pop	psw
      000019 32               [24]  516 	reti
                                    517 ;	eliminated unneeded push/pop dpl
                                    518 ;	eliminated unneeded push/pop dph
                                    519 ;	eliminated unneeded push/pop b
                                    520 ;	eliminated unneeded push/pop acc
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'int1'
                                    523 ;------------------------------------------------------------
                                    524 ;	life.c:62: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    525 ;	-----------------------------------------
                                    526 ;	 function int1
                                    527 ;	-----------------------------------------
      00001A                        528 _int1:
      00001A C0 D0            [24]  529 	push	psw
      00001C 75 D0 08         [24]  530 	mov	psw,#0x08
                                    531 ;	life.c:63: i1 = 1;
      00001F 78r11            [12]  532 	mov	r0,#_i1
      000021 76 01            [12]  533 	mov	@r0,#0x01
                                    534 ;	life.c:64: }
      000023 D0 D0            [24]  535 	pop	psw
      000025 32               [24]  536 	reti
                                    537 ;	eliminated unneeded push/pop dpl
                                    538 ;	eliminated unneeded push/pop dph
                                    539 ;	eliminated unneeded push/pop b
                                    540 ;	eliminated unneeded push/pop acc
                                    541 ;------------------------------------------------------------
                                    542 ;Allocation info for local variables in function 'flashOE'
                                    543 ;------------------------------------------------------------
                                    544 ;	life.c:74: static void flashOE(void) {
                                    545 ;	-----------------------------------------
                                    546 ;	 function flashOE
                                    547 ;	-----------------------------------------
      000026                        548 _flashOE:
                           000007   549 	ar7 = 0x07
                           000006   550 	ar6 = 0x06
                           000005   551 	ar5 = 0x05
                           000004   552 	ar4 = 0x04
                           000003   553 	ar3 = 0x03
                           000002   554 	ar2 = 0x02
                           000001   555 	ar1 = 0x01
                           000000   556 	ar0 = 0x00
                                    557 ;	life.c:75: P1_7 = 0;
                                    558 ;	assignBit
      000026 C2 97            [12]  559 	clr	_P1_7
                                    560 ;	life.c:76: OEreg = OE76;
      000028 78r12            [12]  561 	mov	r0,#_OE76
      00002A 90 F0 06         [24]  562 	mov	dptr,#_OEreg
      00002D E6               [12]  563 	mov	a,@r0
      00002E F0               [24]  564 	movx	@dptr,a
                                    565 ;	life.c:77: P1_7 = 1;
                                    566 ;	assignBit
      00002F D2 97            [12]  567 	setb	_P1_7
                                    568 ;	life.c:79: return;
                                    569 ;	life.c:80: }
      000031 22               [24]  570 	ret
                                    571 ;------------------------------------------------------------
                                    572 ;Allocation info for local variables in function 'show'
                                    573 ;------------------------------------------------------------
                                    574 ;hdr                       Allocated to registers r7 
                                    575 ;__1966080005              Allocated to registers 
                                    576 ;s                         Allocated to registers r5 r6 r7 
                                    577 ;__1310720001              Allocated to registers r6 r7 
                                    578 ;a                         Allocated to registers 
                                    579 ;__1310720003              Allocated to registers r6 r7 
                                    580 ;a                         Allocated to registers 
                                    581 ;__1966080008              Allocated to registers 
                                    582 ;s                         Allocated to registers r5 r6 r7 
                                    583 ;__2621440011              Allocated to registers 
                                    584 ;s                         Allocated to registers r5 r6 r7 
                                    585 ;------------------------------------------------------------
                                    586 ;	life.c:116: void show(char hdr) {
                                    587 ;	-----------------------------------------
                                    588 ;	 function show
                                    589 ;	-----------------------------------------
      000032                        590 _show:
                                    591 ;	life.c:117: if (hdr) {
      000032 E5 82            [12]  592 	mov	a,dpl
      000034 FF               [12]  593 	mov	r7,a
      000035 70 03            [24]  594 	jnz	00190$
      000037 02r01r91         [24]  595 	ljmp	00102$
      00003A                        596 00190$:
                                    597 ;	life.c:118: OE76 = OE76_0;
      00003A 78r12            [12]  598 	mov	r0,#_OE76
      00003C 76 3F            [12]  599 	mov	@r0,#0x3f
                                    600 ;	life.c:119: flashOE();
      00003E 12r00r26         [24]  601 	lcall	_flashOE
                                    602 ;	life.c:120: printstr("\033[2J\033[mGEN ");
      000041 7Dr00            [12]  603 	mov	r5,#___str_0
      000043 7Es00            [12]  604 	mov	r6,#(___str_0 >> 8)
      000045 7F 80            [12]  605 	mov	r7,#0x80
                                    606 ;	life.c:53: return;
      000047                        607 00121$:
                                    608 ;	life.c:51: for (; *s; s++) putchar(*s);
      000047 8D 82            [24]  609 	mov	dpl,r5
      000049 8E 83            [24]  610 	mov	dph,r6
      00004B 8F F0            [24]  611 	mov	b,r7
      00004D 12r00r00         [24]  612 	lcall	__gptrget
      000050 FC               [12]  613 	mov	r4,a
      000051 60 10            [24]  614 	jz	00109$
      000053 7B 00            [12]  615 	mov	r3,#0x00
      000055 8C 82            [24]  616 	mov	dpl,r4
      000057 8B 83            [24]  617 	mov	dph,r3
      000059 12r00r00         [24]  618 	lcall	_putchar
      00005C 0D               [12]  619 	inc	r5
                                    620 ;	life.c:120: printstr("\033[2J\033[mGEN ");
      00005D BD 00 E7         [24]  621 	cjne	r5,#0x00,00121$
      000060 0E               [12]  622 	inc	r6
      000061 80 E4            [24]  623 	sjmp	00121$
      000063                        624 00109$:
                                    625 ;	life.c:110: print16x(generation[1]);
      000063 78r24            [12]  626 	mov	r0,#(_generation + 0x0002)
      000065 86 06            [24]  627 	mov	ar6,@r0
      000067 08               [12]  628 	inc	r0
                                    629 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      000068 E6               [12]  630 	mov	a,@r0
      000069 FF               [12]  631 	mov	r7,a
      00006A C4               [12]  632 	swap	a
      00006B 54 0F            [12]  633 	anl	a,#0x0f
      00006D 30 E3 02         [24]  634 	jnb	acc.3,00193$
      000070 44 F0            [12]  635 	orl	a,#0xf0
      000072                        636 00193$:
      000072 FC               [12]  637 	mov	r4,a
      000073 33               [12]  638 	rlc	a
      000074 95 E0            [12]  639 	subb	a,acc
      000076 53 04 0F         [24]  640 	anl	ar4,#0x0f
      000079 EC               [12]  641 	mov	a,r4
      00007A 24r00            [12]  642 	add	a,#_digits
      00007C F9               [12]  643 	mov	r1,a
      00007D 87 05            [24]  644 	mov	ar5,@r1
      00007F 7C 00            [12]  645 	mov	r4,#0x00
      000081 8D 82            [24]  646 	mov	dpl,r5
      000083 8C 83            [24]  647 	mov	dph,r4
      000085 12r00r00         [24]  648 	lcall	_putchar
                                    649 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      000088 8F 05            [24]  650 	mov	ar5,r7
      00008A 53 05 0F         [24]  651 	anl	ar5,#0x0f
      00008D ED               [12]  652 	mov	a,r5
      00008E 24r00            [12]  653 	add	a,#_digits
      000090 F9               [12]  654 	mov	r1,a
      000091 87 05            [24]  655 	mov	ar5,@r1
      000093 7C 00            [12]  656 	mov	r4,#0x00
      000095 8D 82            [24]  657 	mov	dpl,r5
      000097 8C 83            [24]  658 	mov	dph,r4
      000099 12r00r00         [24]  659 	lcall	_putchar
                                    660 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      00009C 8E 04            [24]  661 	mov	ar4,r6
      00009E EF               [12]  662 	mov	a,r7
      00009F C4               [12]  663 	swap	a
      0000A0 CC               [12]  664 	xch	a,r4
      0000A1 C4               [12]  665 	swap	a
      0000A2 54 0F            [12]  666 	anl	a,#0x0f
      0000A4 6C               [12]  667 	xrl	a,r4
      0000A5 CC               [12]  668 	xch	a,r4
      0000A6 54 0F            [12]  669 	anl	a,#0x0f
      0000A8 CC               [12]  670 	xch	a,r4
      0000A9 6C               [12]  671 	xrl	a,r4
      0000AA CC               [12]  672 	xch	a,r4
      0000AB 30 E3 02         [24]  673 	jnb	acc.3,00194$
      0000AE 44 F0            [12]  674 	orl	a,#0xf0
      0000B0                        675 00194$:
      0000B0 53 04 0F         [24]  676 	anl	ar4,#0x0f
      0000B3 EC               [12]  677 	mov	a,r4
      0000B4 24r00            [12]  678 	add	a,#_digits
      0000B6 F9               [12]  679 	mov	r1,a
      0000B7 87 05            [24]  680 	mov	ar5,@r1
      0000B9 7C 00            [12]  681 	mov	r4,#0x00
      0000BB 8D 82            [24]  682 	mov	dpl,r5
      0000BD 8C 83            [24]  683 	mov	dph,r4
      0000BF 12r00r00         [24]  684 	lcall	_putchar
                                    685 ;	life.c:45: putchar(digits[a & 0xf]);
      0000C2 53 06 0F         [24]  686 	anl	ar6,#0x0f
      0000C5 EE               [12]  687 	mov	a,r6
      0000C6 24r00            [12]  688 	add	a,#_digits
      0000C8 F9               [12]  689 	mov	r1,a
      0000C9 87 07            [24]  690 	mov	ar7,@r1
      0000CB 7E 00            [12]  691 	mov	r6,#0x00
      0000CD 8F 82            [24]  692 	mov	dpl,r7
      0000CF 8E 83            [24]  693 	mov	dph,r6
      0000D1 12r00r00         [24]  694 	lcall	_putchar
                                    695 ;	life.c:111: print16x(generation[0]);
      0000D4 78r22            [12]  696 	mov	r0,#_generation
      0000D6 86 06            [24]  697 	mov	ar6,@r0
      0000D8 08               [12]  698 	inc	r0
                                    699 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      0000D9 E6               [12]  700 	mov	a,@r0
      0000DA FF               [12]  701 	mov	r7,a
      0000DB C4               [12]  702 	swap	a
      0000DC 54 0F            [12]  703 	anl	a,#0x0f
      0000DE 30 E3 02         [24]  704 	jnb	acc.3,00195$
      0000E1 44 F0            [12]  705 	orl	a,#0xf0
      0000E3                        706 00195$:
      0000E3 FC               [12]  707 	mov	r4,a
      0000E4 33               [12]  708 	rlc	a
      0000E5 95 E0            [12]  709 	subb	a,acc
      0000E7 53 04 0F         [24]  710 	anl	ar4,#0x0f
      0000EA EC               [12]  711 	mov	a,r4
      0000EB 24r00            [12]  712 	add	a,#_digits
      0000ED F9               [12]  713 	mov	r1,a
      0000EE 87 05            [24]  714 	mov	ar5,@r1
      0000F0 7C 00            [12]  715 	mov	r4,#0x00
      0000F2 8D 82            [24]  716 	mov	dpl,r5
      0000F4 8C 83            [24]  717 	mov	dph,r4
      0000F6 12r00r00         [24]  718 	lcall	_putchar
                                    719 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      0000F9 8F 05            [24]  720 	mov	ar5,r7
      0000FB 53 05 0F         [24]  721 	anl	ar5,#0x0f
      0000FE ED               [12]  722 	mov	a,r5
      0000FF 24r00            [12]  723 	add	a,#_digits
      000101 F9               [12]  724 	mov	r1,a
      000102 87 05            [24]  725 	mov	ar5,@r1
      000104 7C 00            [12]  726 	mov	r4,#0x00
      000106 8D 82            [24]  727 	mov	dpl,r5
      000108 8C 83            [24]  728 	mov	dph,r4
      00010A 12r00r00         [24]  729 	lcall	_putchar
                                    730 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      00010D 8E 04            [24]  731 	mov	ar4,r6
      00010F EF               [12]  732 	mov	a,r7
      000110 C4               [12]  733 	swap	a
      000111 CC               [12]  734 	xch	a,r4
      000112 C4               [12]  735 	swap	a
      000113 54 0F            [12]  736 	anl	a,#0x0f
      000115 6C               [12]  737 	xrl	a,r4
      000116 CC               [12]  738 	xch	a,r4
      000117 54 0F            [12]  739 	anl	a,#0x0f
      000119 CC               [12]  740 	xch	a,r4
      00011A 6C               [12]  741 	xrl	a,r4
      00011B CC               [12]  742 	xch	a,r4
      00011C 30 E3 02         [24]  743 	jnb	acc.3,00196$
      00011F 44 F0            [12]  744 	orl	a,#0xf0
      000121                        745 00196$:
      000121 53 04 0F         [24]  746 	anl	ar4,#0x0f
      000124 EC               [12]  747 	mov	a,r4
      000125 24r00            [12]  748 	add	a,#_digits
      000127 F9               [12]  749 	mov	r1,a
      000128 87 05            [24]  750 	mov	ar5,@r1
      00012A 7C 00            [12]  751 	mov	r4,#0x00
      00012C 8D 82            [24]  752 	mov	dpl,r5
      00012E 8C 83            [24]  753 	mov	dph,r4
      000130 12r00r00         [24]  754 	lcall	_putchar
                                    755 ;	life.c:45: putchar(digits[a & 0xf]);
      000133 53 06 0F         [24]  756 	anl	ar6,#0x0f
      000136 EE               [12]  757 	mov	a,r6
      000137 24r00            [12]  758 	add	a,#_digits
      000139 F9               [12]  759 	mov	r1,a
      00013A 87 07            [24]  760 	mov	ar7,@r1
      00013C 7E 00            [12]  761 	mov	r6,#0x00
      00013E 8F 82            [24]  762 	mov	dpl,r7
      000140 8E 83            [24]  763 	mov	dph,r6
      000142 12r00r00         [24]  764 	lcall	_putchar
                                    765 ;	life.c:122: printstr("\r\n");
      000145 7Dr0C            [12]  766 	mov	r5,#___str_1
      000147 7Es00            [12]  767 	mov	r6,#(___str_1 >> 8)
      000149 7F 80            [12]  768 	mov	r7,#0x80
                                    769 ;	life.c:53: return;
      00014B                        770 00124$:
                                    771 ;	life.c:51: for (; *s; s++) putchar(*s);
      00014B 8D 82            [24]  772 	mov	dpl,r5
      00014D 8E 83            [24]  773 	mov	dph,r6
      00014F 8F F0            [24]  774 	mov	b,r7
      000151 12r00r00         [24]  775 	lcall	__gptrget
      000154 FC               [12]  776 	mov	r4,a
      000155 60 10            [24]  777 	jz	00114$
      000157 7B 00            [12]  778 	mov	r3,#0x00
      000159 8C 82            [24]  779 	mov	dpl,r4
      00015B 8B 83            [24]  780 	mov	dph,r3
      00015D 12r00r00         [24]  781 	lcall	_putchar
      000160 0D               [12]  782 	inc	r5
                                    783 ;	life.c:122: printstr("\r\n");
      000161 BD 00 E7         [24]  784 	cjne	r5,#0x00,00124$
      000164 0E               [12]  785 	inc	r6
      000165 80 E4            [24]  786 	sjmp	00124$
      000167                        787 00114$:
                                    788 ;	life.c:103: generation[0]++;
      000167 78r22            [12]  789 	mov	r0,#_generation
      000169 86 06            [24]  790 	mov	ar6,@r0
      00016B 08               [12]  791 	inc	r0
      00016C 86 07            [24]  792 	mov	ar7,@r0
      00016E 0E               [12]  793 	inc	r6
      00016F BE 00 01         [24]  794 	cjne	r6,#0x00,00199$
      000172 0F               [12]  795 	inc	r7
      000173                        796 00199$:
      000173 78r22            [12]  797 	mov	r0,#_generation
      000175 A6 06            [24]  798 	mov	@r0,ar6
      000177 08               [12]  799 	inc	r0
      000178 A6 07            [24]  800 	mov	@r0,ar7
                                    801 ;	life.c:104: if (!generation[0]) generation[1]++;
      00017A EE               [12]  802 	mov	a,r6
      00017B 4F               [12]  803 	orl	a,r7
      00017C 70 13            [24]  804 	jnz	00102$
      00017E 78r24            [12]  805 	mov	r0,#(_generation + 0x0002)
      000180 86 06            [24]  806 	mov	ar6,@r0
      000182 08               [12]  807 	inc	r0
      000183 86 07            [24]  808 	mov	ar7,@r0
      000185 0E               [12]  809 	inc	r6
      000186 BE 00 01         [24]  810 	cjne	r6,#0x00,00201$
      000189 0F               [12]  811 	inc	r7
      00018A                        812 00201$:
      00018A 78r24            [12]  813 	mov	r0,#(_generation + 0x0002)
      00018C A6 06            [24]  814 	mov	@r0,ar6
      00018E 08               [12]  815 	inc	r0
      00018F A6 07            [24]  816 	mov	@r0,ar7
                                    817 ;	life.c:123: updategen();
      000191                        818 00102$:
                                    819 ;	life.c:126: for (x = 0; x < W; x++) {
      000191 78r13            [12]  820 	mov	r0,#_x
      000193 E4               [12]  821 	clr	a
      000194 F6               [12]  822 	mov	@r0,a
      000195 08               [12]  823 	inc	r0
      000196 F6               [12]  824 	mov	@r0,a
      000197                        825 00131$:
                                    826 ;	life.c:127: for (y = 0; y < H; y++)
      000197 78r15            [12]  827 	mov	r0,#_y
      000199 E4               [12]  828 	clr	a
      00019A F6               [12]  829 	mov	@r0,a
      00019B 08               [12]  830 	inc	r0
      00019C F6               [12]  831 	mov	@r0,a
      00019D                        832 00126$:
                                    833 ;	life.c:128: if (u[A2D(W, y, x)]) putchar('1');
      00019D 78r15            [12]  834 	mov	r0,#_y
      00019F E6               [12]  835 	mov	a,@r0
      0001A0 C0 E0            [24]  836 	push	acc
      0001A2 08               [12]  837 	inc	r0
      0001A3 E6               [12]  838 	mov	a,@r0
      0001A4 C0 E0            [24]  839 	push	acc
      0001A6 90 00 30         [24]  840 	mov	dptr,#0x0030
      0001A9 12r00r00         [24]  841 	lcall	__mulint
      0001AC AE 82            [24]  842 	mov	r6,dpl
      0001AE AF 83            [24]  843 	mov	r7,dph
      0001B0 15 81            [12]  844 	dec	sp
      0001B2 15 81            [12]  845 	dec	sp
      0001B4 78r13            [12]  846 	mov	r0,#_x
      0001B6 E6               [12]  847 	mov	a,@r0
      0001B7 2E               [12]  848 	add	a,r6
      0001B8 FE               [12]  849 	mov	r6,a
      0001B9 08               [12]  850 	inc	r0
      0001BA E6               [12]  851 	mov	a,@r0
      0001BB 3F               [12]  852 	addc	a,r7
      0001BC FF               [12]  853 	mov	r7,a
      0001BD EE               [12]  854 	mov	a,r6
      0001BE 24r00            [12]  855 	add	a,#_u
      0001C0 FE               [12]  856 	mov	r6,a
      0001C1 EF               [12]  857 	mov	a,r7
      0001C2 34s48            [12]  858 	addc	a,#(_u >> 8)
      0001C4 FF               [12]  859 	mov	r7,a
      0001C5 8E 82            [24]  860 	mov	dpl,r6
      0001C7 8F 83            [24]  861 	mov	dph,r7
      0001C9 E0               [24]  862 	movx	a,@dptr
      0001CA 60 08            [24]  863 	jz	00104$
      0001CC 90 00 31         [24]  864 	mov	dptr,#0x0031
      0001CF 12r00r00         [24]  865 	lcall	_putchar
      0001D2 80 06            [24]  866 	sjmp	00127$
      0001D4                        867 00104$:
                                    868 ;	life.c:129: else putchar('0');
      0001D4 90 00 30         [24]  869 	mov	dptr,#0x0030
      0001D7 12r00r00         [24]  870 	lcall	_putchar
      0001DA                        871 00127$:
                                    872 ;	life.c:127: for (y = 0; y < H; y++)
      0001DA 78r15            [12]  873 	mov	r0,#_y
      0001DC 06               [12]  874 	inc	@r0
      0001DD B6 00 02         [24]  875 	cjne	@r0,#0x00,00203$
      0001E0 08               [12]  876 	inc	r0
      0001E1 06               [12]  877 	inc	@r0
      0001E2                        878 00203$:
      0001E2 78r15            [12]  879 	mov	r0,#_y
      0001E4 C3               [12]  880 	clr	c
      0001E5 E6               [12]  881 	mov	a,@r0
      0001E6 94 C0            [12]  882 	subb	a,#0xc0
      0001E8 08               [12]  883 	inc	r0
      0001E9 E6               [12]  884 	mov	a,@r0
      0001EA 64 80            [12]  885 	xrl	a,#0x80
      0001EC 94 80            [12]  886 	subb	a,#0x80
      0001EE 40 AD            [24]  887 	jc	00126$
                                    888 ;	life.c:130: printstr("\r\n");
      0001F0 7Dr0C            [12]  889 	mov	r5,#___str_1
      0001F2 7Es00            [12]  890 	mov	r6,#(___str_1 >> 8)
      0001F4 7F 80            [12]  891 	mov	r7,#0x80
                                    892 ;	life.c:53: return;
      0001F6                        893 00129$:
                                    894 ;	life.c:51: for (; *s; s++) putchar(*s);
      0001F6 8D 82            [24]  895 	mov	dpl,r5
      0001F8 8E 83            [24]  896 	mov	dph,r6
      0001FA 8F F0            [24]  897 	mov	b,r7
      0001FC 12r00r00         [24]  898 	lcall	__gptrget
      0001FF FC               [12]  899 	mov	r4,a
      000200 60 10            [24]  900 	jz	00119$
      000202 7B 00            [12]  901 	mov	r3,#0x00
      000204 8C 82            [24]  902 	mov	dpl,r4
      000206 8B 83            [24]  903 	mov	dph,r3
      000208 12r00r00         [24]  904 	lcall	_putchar
      00020B 0D               [12]  905 	inc	r5
                                    906 ;	life.c:130: printstr("\r\n");
      00020C BD 00 E7         [24]  907 	cjne	r5,#0x00,00129$
      00020F 0E               [12]  908 	inc	r6
      000210 80 E4            [24]  909 	sjmp	00129$
      000212                        910 00119$:
                                    911 ;	life.c:126: for (x = 0; x < W; x++) {
      000212 78r13            [12]  912 	mov	r0,#_x
      000214 06               [12]  913 	inc	@r0
      000215 B6 00 02         [24]  914 	cjne	@r0,#0x00,00207$
      000218 08               [12]  915 	inc	r0
      000219 06               [12]  916 	inc	@r0
      00021A                        917 00207$:
      00021A 78r13            [12]  918 	mov	r0,#_x
      00021C C3               [12]  919 	clr	c
      00021D E6               [12]  920 	mov	a,@r0
      00021E 94 30            [12]  921 	subb	a,#0x30
      000220 08               [12]  922 	inc	r0
      000221 E6               [12]  923 	mov	a,@r0
      000222 64 80            [12]  924 	xrl	a,#0x80
      000224 94 80            [12]  925 	subb	a,#0x80
      000226 50 03            [24]  926 	jnc	00208$
      000228 02r01r97         [24]  927 	ljmp	00131$
      00022B                        928 00208$:
                                    929 ;	life.c:133: return;
                                    930 ;	life.c:134: }
      00022B 22               [24]  931 	ret
                                    932 ;------------------------------------------------------------
                                    933 ;Allocation info for local variables in function 'main'
                                    934 ;------------------------------------------------------------
                                    935 ;__2621440023              Allocated to registers 
                                    936 ;s                         Allocated to registers r5 r6 r7 
                                    937 ;__1310720013              Allocated to registers 
                                    938 ;s                         Allocated to registers r5 r6 r7 
                                    939 ;__1310720015              Allocated to registers r6 r7 
                                    940 ;a                         Allocated to registers r4 r5 
                                    941 ;__1310720017              Allocated to registers 
                                    942 ;s                         Allocated to registers r5 r6 r7 
                                    943 ;__1310720019              Allocated to registers 
                                    944 ;s                         Allocated to registers r5 r6 r7 
                                    945 ;__1310720021              Allocated to registers 
                                    946 ;s                         Allocated to registers r5 r6 r7 
                                    947 ;__2621440028              Allocated to registers 
                                    948 ;s                         Allocated to registers r5 r6 r7 
                                    949 ;__4587520032              Allocated to registers 
                                    950 ;s                         Allocated to registers r5 r6 r7 
                                    951 ;__4587520034              Allocated to registers 
                                    952 ;s                         Allocated to registers r5 r6 r7 
                                    953 ;__4587520036              Allocated to registers 
                                    954 ;s                         Allocated to registers r5 r6 r7 
                                    955 ;__3276800038              Allocated to registers 
                                    956 ;s                         Allocated to registers r5 r6 r7 
                                    957 ;__1310720040              Allocated to registers 
                                    958 ;s                         Allocated to registers r5 r6 r7 
                                    959 ;sloc0                     Allocated to stack - _bp +1
                                    960 ;sloc1                     Allocated to stack - _bp +2
                                    961 ;sloc2                     Allocated to stack - _bp +4
                                    962 ;sloc3                     Allocated to stack - _bp +6
                                    963 ;sloc4                     Allocated to stack - _bp +8
                                    964 ;sloc5                     Allocated to stack - _bp +10
                                    965 ;sloc6                     Allocated to stack - _bp +12
                                    966 ;------------------------------------------------------------
                                    967 ;	life.c:239: void main(void) {
                                    968 ;	-----------------------------------------
                                    969 ;	 function main
                                    970 ;	-----------------------------------------
      00022C                        971 _main:
      00022C C0*00            [24]  972 	push	_bp
      00022E E5 81            [12]  973 	mov	a,sp
      000230 F5*00            [12]  974 	mov	_bp,a
      000232 24 0D            [12]  975 	add	a,#0x0d
      000234 F5 81            [12]  976 	mov	sp,a
                                    977 ;	life.c:240: IT0 = 1;
                                    978 ;	assignBit
      000236 D2 88            [12]  979 	setb	_IT0
                                    980 ;	life.c:241: IT1 = 1;
                                    981 ;	assignBit
      000238 D2 8A            [12]  982 	setb	_IT1
                                    983 ;	life.c:242: EX0 = 1;
                                    984 ;	assignBit
      00023A D2 A8            [12]  985 	setb	_EX0
                                    986 ;	life.c:243: EX1 = 1;
                                    987 ;	assignBit
      00023C D2 AA            [12]  988 	setb	_EX1
                                    989 ;	life.c:244: EA = 1;	
                                    990 ;	assignBit
      00023E D2 AF            [12]  991 	setb	_EA
                                    992 ;	life.c:245: P1_7 = 1;
                                    993 ;	assignBit
      000240 D2 97            [12]  994 	setb	_P1_7
                                    995 ;	life.c:247: srand(RND);
      000242 90 FF FE         [24]  996 	mov	dptr,#_RND
      000245 E0               [24]  997 	movx	a,@dptr
      000246 FE               [12]  998 	mov	r6,a
      000247 A3               [24]  999 	inc	dptr
      000248 E0               [24] 1000 	movx	a,@dptr
      000249 FF               [12] 1001 	mov	r7,a
      00024A 8E 82            [24] 1002 	mov	dpl,r6
      00024C 8F 83            [24] 1003 	mov	dph,r7
      00024E 12r00r00         [24] 1004 	lcall	_srand
                                   1005 ;	life.c:249: OE76 = OE76_0;
      000251 78r12            [12] 1006 	mov	r0,#_OE76
      000253 76 3F            [12] 1007 	mov	@r0,#0x3f
                                   1008 ;	life.c:250: flashOE();
      000255 12r00r26         [24] 1009 	lcall	_flashOE
                                   1010 ;	life.c:252: for (i0 = 0; !i0; ) {	
      000258 78r10            [12] 1011 	mov	r0,#_i0
      00025A 76 00            [12] 1012 	mov	@r0,#0x00
      00025C                       1013 00246$:
                                   1014 ;	life.c:253: printstr("\033[2J\033[?25l\033[mLIFE INIT T L R P\r\n");
      00025C 7Dr29            [12] 1015 	mov	r5,#___str_5
      00025E 7Es00            [12] 1016 	mov	r6,#(___str_5 >> 8)
      000260 7F 80            [12] 1017 	mov	r7,#0x80
                                   1018 ;	life.c:53: return;
      000262                       1019 00202$:
                                   1020 ;	life.c:51: for (; *s; s++) putchar(*s);
      000262 8D 82            [24] 1021 	mov	dpl,r5
      000264 8E 83            [24] 1022 	mov	dph,r6
      000266 8F F0            [24] 1023 	mov	b,r7
      000268 12r00r00         [24] 1024 	lcall	__gptrget
      00026B FC               [12] 1025 	mov	r4,a
      00026C 60 10            [24] 1026 	jz	00110$
      00026E 7B 00            [12] 1027 	mov	r3,#0x00
      000270 8C 82            [24] 1028 	mov	dpl,r4
      000272 8B 83            [24] 1029 	mov	dph,r3
      000274 12r00r00         [24] 1030 	lcall	_putchar
      000277 0D               [12] 1031 	inc	r5
                                   1032 ;	life.c:254: while (1) {
      000278 BD 00 E7         [24] 1033 	cjne	r5,#0x00,00202$
      00027B 0E               [12] 1034 	inc	r6
      00027C 80 E4            [24] 1035 	sjmp	00202$
      00027E                       1036 00110$:
                                   1037 ;	life.c:255: c = toupper(getchar());
      00027E 12r00r05         [24] 1038 	lcall	_getchar
      000281 12r00r00         [24] 1039 	lcall	_toupper
      000284 AE 82            [24] 1040 	mov	r6,dpl
      000286 AF 83            [24] 1041 	mov	r7,dph
      000288 78r19            [12] 1042 	mov	r0,#_c
      00028A A6 06            [24] 1043 	mov	@r0,ar6
      00028C 08               [12] 1044 	inc	r0
      00028D A6 07            [24] 1045 	mov	@r0,ar7
                                   1046 ;	life.c:256: if (i0 || (c == (int)'T')) goto terminate;
      00028F 78r10            [12] 1047 	mov	r0,#_i0
      000291 E6               [12] 1048 	mov	a,@r0
      000292 60 03            [24] 1049 	jz	00516$
      000294 02r0ArD8         [24] 1050 	ljmp	00142$
      000297                       1051 00516$:
      000297 BE 54 06         [24] 1052 	cjne	r6,#0x54,00517$
      00029A BF 00 03         [24] 1053 	cjne	r7,#0x00,00517$
      00029D 02r0ArD8         [24] 1054 	ljmp	00142$
      0002A0                       1055 00517$:
                                   1056 ;	life.c:257: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      0002A0 BE 4C 05         [24] 1057 	cjne	r6,#0x4c,00518$
      0002A3 BF 00 02         [24] 1058 	cjne	r7,#0x00,00518$
      0002A6 80 0E            [24] 1059 	sjmp	00291$
      0002A8                       1060 00518$:
      0002A8 BE 52 05         [24] 1061 	cjne	r6,#0x52,00519$
      0002AB BF 00 02         [24] 1062 	cjne	r7,#0x00,00519$
      0002AE 80 06            [24] 1063 	sjmp	00291$
      0002B0                       1064 00519$:
      0002B0 BE 50 CB         [24] 1065 	cjne	r6,#0x50,00110$
      0002B3 BF 00 C8         [24] 1066 	cjne	r7,#0x00,00110$
                                   1067 ;	life.c:260: reload:
      0002B6                       1068 00291$:
      0002B6                       1069 00112$:
                                   1070 ;	life.c:137: memset(u, 0, sizeof (u));
      0002B6 E4               [12] 1071 	clr	a
      0002B7 C0 E0            [24] 1072 	push	acc
      0002B9 74 24            [12] 1073 	mov	a,#0x24
      0002BB C0 E0            [24] 1074 	push	acc
      0002BD E4               [12] 1075 	clr	a
      0002BE C0 E0            [24] 1076 	push	acc
      0002C0 90r48r00         [24] 1077 	mov	dptr,#_u
      0002C3 75 F0 00         [24] 1078 	mov	b,#0x00
      0002C6 12r00r00         [24] 1079 	lcall	_memset
      0002C9 15 81            [12] 1080 	dec	sp
      0002CB 15 81            [12] 1081 	dec	sp
      0002CD 15 81            [12] 1082 	dec	sp
                                   1083 ;	life.c:138: memset(pu, 0, sizeof (pu));
      0002CF E4               [12] 1084 	clr	a
      0002D0 C0 E0            [24] 1085 	push	acc
      0002D2 74 24            [12] 1086 	mov	a,#0x24
      0002D4 C0 E0            [24] 1087 	push	acc
      0002D6 E4               [12] 1088 	clr	a
      0002D7 C0 E0            [24] 1089 	push	acc
      0002D9 90r24r00         [24] 1090 	mov	dptr,#_pu
      0002DC 75 F0 00         [24] 1091 	mov	b,#0x00
      0002DF 12r00r00         [24] 1092 	lcall	_memset
      0002E2 15 81            [12] 1093 	dec	sp
      0002E4 15 81            [12] 1094 	dec	sp
      0002E6 15 81            [12] 1095 	dec	sp
                                   1096 ;	life.c:262: if (c == (int)'L') loadiu();
      0002E8 78r19            [12] 1097 	mov	r0,#_c
      0002EA B6 4C 06         [24] 1098 	cjne	@r0,#0x4c,00522$
      0002ED 08               [12] 1099 	inc	r0
      0002EE B6 00 02         [24] 1100 	cjne	@r0,#0x00,00522$
      0002F1 80 03            [24] 1101 	sjmp	00523$
      0002F3                       1102 00522$:
      0002F3 02r04r80         [24] 1103 	ljmp	00116$
      0002F6                       1104 00523$:
                                   1105 ;	life.c:144: j = 0;
      0002F6 78r17            [12] 1106 	mov	r0,#_j
      0002F8 E4               [12] 1107 	clr	a
      0002F9 F6               [12] 1108 	mov	@r0,a
      0002FA 08               [12] 1109 	inc	r0
      0002FB F6               [12] 1110 	mov	@r0,a
                                   1111 ;	life.c:146: printstr("LOAD 0 1 ~ # <");
      0002FC 7Dr0F            [12] 1112 	mov	r5,#___str_2
      0002FE 7Es00            [12] 1113 	mov	r6,#(___str_2 >> 8)
      000300 7F 80            [12] 1114 	mov	r7,#0x80
                                   1115 ;	life.c:53: return;
      000302                       1116 00205$:
                                   1117 ;	life.c:51: for (; *s; s++) putchar(*s);
      000302 8D 82            [24] 1118 	mov	dpl,r5
      000304 8E 83            [24] 1119 	mov	dph,r6
      000306 8F F0            [24] 1120 	mov	b,r7
      000308 12r00r00         [24] 1121 	lcall	__gptrget
      00030B FC               [12] 1122 	mov	r4,a
      00030C 60 10            [24] 1123 	jz	00147$
      00030E 7B 00            [12] 1124 	mov	r3,#0x00
      000310 8C 82            [24] 1125 	mov	dpl,r4
      000312 8B 83            [24] 1126 	mov	dph,r3
      000314 12r00r00         [24] 1127 	lcall	_putchar
      000317 0D               [12] 1128 	inc	r5
                                   1129 ;	life.c:146: printstr("LOAD 0 1 ~ # <");
      000318 BD 00 E7         [24] 1130 	cjne	r5,#0x00,00205$
      00031B 0E               [12] 1131 	inc	r6
      00031C 80 E4            [24] 1132 	sjmp	00205$
      00031E                       1133 00147$:
                                   1134 ;	life.c:148: for (y = 0; y < (H * W); y += W) {
      00031E 78r15            [12] 1135 	mov	r0,#_y
      000320 E4               [12] 1136 	clr	a
      000321 F6               [12] 1137 	mov	@r0,a
      000322 08               [12] 1138 	inc	r0
      000323 F6               [12] 1139 	mov	@r0,a
      000324                       1140 00208$:
                                   1141 ;	life.c:149: for (x = 0; x < W; x++) {
      000324 78r13            [12] 1142 	mov	r0,#_x
      000326 E4               [12] 1143 	clr	a
      000327 F6               [12] 1144 	mov	@r0,a
      000328 08               [12] 1145 	inc	r0
      000329 F6               [12] 1146 	mov	@r0,a
                                   1147 ;	life.c:150: while (1) {
      00032A                       1148 00160$:
                                   1149 ;	life.c:151: c = getchar();
      00032A 12r00r05         [24] 1150 	lcall	_getchar
      00032D AE 82            [24] 1151 	mov	r6,dpl
      00032F AF 83            [24] 1152 	mov	r7,dph
      000331 78r19            [12] 1153 	mov	r0,#_c
      000333 A6 06            [24] 1154 	mov	@r0,ar6
      000335 08               [12] 1155 	inc	r0
      000336 A6 07            [24] 1156 	mov	@r0,ar7
                                   1157 ;	life.c:152: if (c == (int)'0') {
      000338 BE 30 25         [24] 1158 	cjne	r6,#0x30,00158$
      00033B BF 00 22         [24] 1159 	cjne	r7,#0x00,00158$
                                   1160 ;	life.c:153: iu[y + x] = 0;
      00033E 78r15            [12] 1161 	mov	r0,#_y
      000340 79r13            [12] 1162 	mov	r1,#_x
      000342 E7               [12] 1163 	mov	a,@r1
      000343 26               [12] 1164 	add	a,@r0
      000344 FC               [12] 1165 	mov	r4,a
      000345 09               [12] 1166 	inc	r1
      000346 E7               [12] 1167 	mov	a,@r1
      000347 08               [12] 1168 	inc	r0
      000348 36               [12] 1169 	addc	a,@r0
      000349 FD               [12] 1170 	mov	r5,a
      00034A EC               [12] 1171 	mov	a,r4
      00034B 24r00            [12] 1172 	add	a,#_iu
      00034D F5 82            [12] 1173 	mov	dpl,a
      00034F ED               [12] 1174 	mov	a,r5
      000350 34s00            [12] 1175 	addc	a,#(_iu >> 8)
      000352 F5 83            [12] 1176 	mov	dph,a
      000354 E4               [12] 1177 	clr	a
      000355 F0               [24] 1178 	movx	@dptr,a
                                   1179 ;	life.c:154: j++;
      000356 78r17            [12] 1180 	mov	r0,#_j
      000358 06               [12] 1181 	inc	@r0
      000359 B6 00 02         [24] 1182 	cjne	@r0,#0x00,00528$
      00035C 08               [12] 1183 	inc	r0
      00035D 06               [12] 1184 	inc	@r0
      00035E                       1185 00528$:
                                   1186 ;	life.c:155: break;
      00035E 80 39            [24] 1187 	sjmp	00163$
      000360                       1188 00158$:
                                   1189 ;	life.c:156: } else if (c == (int)'1') {
      000360 BE 31 26         [24] 1190 	cjne	r6,#0x31,00156$
      000363 BF 00 23         [24] 1191 	cjne	r7,#0x00,00156$
                                   1192 ;	life.c:157: iu[y + x] = 1;
      000366 78r15            [12] 1193 	mov	r0,#_y
      000368 79r13            [12] 1194 	mov	r1,#_x
      00036A E7               [12] 1195 	mov	a,@r1
      00036B 26               [12] 1196 	add	a,@r0
      00036C FC               [12] 1197 	mov	r4,a
      00036D 09               [12] 1198 	inc	r1
      00036E E7               [12] 1199 	mov	a,@r1
      00036F 08               [12] 1200 	inc	r0
      000370 36               [12] 1201 	addc	a,@r0
      000371 FD               [12] 1202 	mov	r5,a
      000372 EC               [12] 1203 	mov	a,r4
      000373 24r00            [12] 1204 	add	a,#_iu
      000375 F5 82            [12] 1205 	mov	dpl,a
      000377 ED               [12] 1206 	mov	a,r5
      000378 34s00            [12] 1207 	addc	a,#(_iu >> 8)
      00037A F5 83            [12] 1208 	mov	dph,a
      00037C 74 01            [12] 1209 	mov	a,#0x01
      00037E F0               [24] 1210 	movx	@dptr,a
                                   1211 ;	life.c:158: j++;
      00037F 78r17            [12] 1212 	mov	r0,#_j
      000381 06               [12] 1213 	inc	@r0
      000382 B6 00 02         [24] 1214 	cjne	@r0,#0x00,00531$
      000385 08               [12] 1215 	inc	r0
      000386 06               [12] 1216 	inc	@r0
      000387                       1217 00531$:
                                   1218 ;	life.c:159: break;
      000387 80 10            [24] 1219 	sjmp	00163$
      000389                       1220 00156$:
                                   1221 ;	life.c:160: } else if (c == (int)'~') goto br_inner;
      000389 BE 7E 05         [24] 1222 	cjne	r6,#0x7e,00532$
      00038C BF 00 02         [24] 1223 	cjne	r7,#0x00,00532$
      00038F 80 21            [24] 1224 	sjmp	00209$
      000391                       1225 00532$:
                                   1226 ;	life.c:161: else if (c == (int)'#') goto out;
                                   1227 ;	life.c:165: break;
      000391 BE 23 96         [24] 1228 	cjne	r6,#0x23,00160$
      000394 BF 00 93         [24] 1229 	cjne	r7,#0x00,00160$
      000397 80 31            [24] 1230 	sjmp	00173$
      000399                       1231 00163$:
                                   1232 ;	life.c:149: for (x = 0; x < W; x++) {
      000399 78r13            [12] 1233 	mov	r0,#_x
      00039B 06               [12] 1234 	inc	@r0
      00039C B6 00 02         [24] 1235 	cjne	@r0,#0x00,00534$
      00039F 08               [12] 1236 	inc	r0
      0003A0 06               [12] 1237 	inc	@r0
      0003A1                       1238 00534$:
      0003A1 78r13            [12] 1239 	mov	r0,#_x
      0003A3 C3               [12] 1240 	clr	c
      0003A4 E6               [12] 1241 	mov	a,@r0
      0003A5 94 30            [12] 1242 	subb	a,#0x30
      0003A7 08               [12] 1243 	inc	r0
      0003A8 E6               [12] 1244 	mov	a,@r0
      0003A9 64 80            [12] 1245 	xrl	a,#0x80
      0003AB 94 80            [12] 1246 	subb	a,#0x80
      0003AD 50 03            [24] 1247 	jnc	00535$
      0003AF 02r03r2A         [24] 1248 	ljmp	00160$
      0003B2                       1249 00535$:
      0003B2                       1250 00209$:
                                   1251 ;	life.c:148: for (y = 0; y < (H * W); y += W) {
      0003B2 78r15            [12] 1252 	mov	r0,#_y
      0003B4 74 30            [12] 1253 	mov	a,#0x30
      0003B6 26               [12] 1254 	add	a,@r0
      0003B7 F6               [12] 1255 	mov	@r0,a
      0003B8 E4               [12] 1256 	clr	a
      0003B9 08               [12] 1257 	inc	r0
      0003BA 36               [12] 1258 	addc	a,@r0
      0003BB F6               [12] 1259 	mov	@r0,a
      0003BC 78r15            [12] 1260 	mov	r0,#_y
      0003BE C3               [12] 1261 	clr	c
      0003BF 08               [12] 1262 	inc	r0
      0003C0 E6               [12] 1263 	mov	a,@r0
      0003C1 64 80            [12] 1264 	xrl	a,#0x80
      0003C3 94 A4            [12] 1265 	subb	a,#0xa4
      0003C5 50 03            [24] 1266 	jnc	00536$
      0003C7 02r03r24         [24] 1267 	ljmp	00208$
      0003CA                       1268 00536$:
                                   1269 ;	life.c:169: out:
      0003CA                       1270 00173$:
                                   1271 ;	life.c:170: if (c != (int)'#')
      0003CA BE 23 05         [24] 1272 	cjne	r6,#0x23,00537$
      0003CD BF 00 02         [24] 1273 	cjne	r7,#0x00,00537$
      0003D0 80 14            [24] 1274 	sjmp	00172$
      0003D2                       1275 00537$:
                                   1276 ;	life.c:171: while (1) {
      0003D2                       1277 00169$:
                                   1278 ;	life.c:172: c = getchar();
      0003D2 12r00r05         [24] 1279 	lcall	_getchar
      0003D5 AE 82            [24] 1280 	mov	r6,dpl
      0003D7 AF 83            [24] 1281 	mov	r7,dph
      0003D9 78r19            [12] 1282 	mov	r0,#_c
      0003DB A6 06            [24] 1283 	mov	@r0,ar6
      0003DD 08               [12] 1284 	inc	r0
      0003DE A6 07            [24] 1285 	mov	@r0,ar7
                                   1286 ;	life.c:173: if (c == (int)'#') break;
      0003E0 BE 23 EF         [24] 1287 	cjne	r6,#0x23,00169$
      0003E3 BF 00 EC         [24] 1288 	cjne	r7,#0x00,00169$
      0003E6                       1289 00172$:
                                   1290 ;	life.c:175: print16x(j);
      0003E6 78r17            [12] 1291 	mov	r0,#_j
      0003E8 86 06            [24] 1292 	mov	ar6,@r0
      0003EA 08               [12] 1293 	inc	r0
      0003EB 86 07            [24] 1294 	mov	ar7,@r0
      0003ED 8E 04            [24] 1295 	mov	ar4,r6
                                   1296 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      0003EF EF               [12] 1297 	mov	a,r7
      0003F0 FD               [12] 1298 	mov	r5,a
      0003F1 C4               [12] 1299 	swap	a
      0003F2 54 0F            [12] 1300 	anl	a,#0x0f
      0003F4 30 E3 02         [24] 1301 	jnb	acc.3,00540$
      0003F7 44 F0            [12] 1302 	orl	a,#0xf0
      0003F9                       1303 00540$:
      0003F9 FE               [12] 1304 	mov	r6,a
      0003FA 33               [12] 1305 	rlc	a
      0003FB 95 E0            [12] 1306 	subb	a,acc
      0003FD 53 06 0F         [24] 1307 	anl	ar6,#0x0f
      000400 EE               [12] 1308 	mov	a,r6
      000401 24r00            [12] 1309 	add	a,#_digits
      000403 F9               [12] 1310 	mov	r1,a
      000404 87 07            [24] 1311 	mov	ar7,@r1
      000406 7E 00            [12] 1312 	mov	r6,#0x00
      000408 8F 82            [24] 1313 	mov	dpl,r7
      00040A 8E 83            [24] 1314 	mov	dph,r6
      00040C 12r00r00         [24] 1315 	lcall	_putchar
                                   1316 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      00040F 8D 07            [24] 1317 	mov	ar7,r5
      000411 53 07 0F         [24] 1318 	anl	ar7,#0x0f
      000414 EF               [12] 1319 	mov	a,r7
      000415 24r00            [12] 1320 	add	a,#_digits
      000417 F9               [12] 1321 	mov	r1,a
      000418 87 07            [24] 1322 	mov	ar7,@r1
      00041A 7E 00            [12] 1323 	mov	r6,#0x00
      00041C 8F 82            [24] 1324 	mov	dpl,r7
      00041E 8E 83            [24] 1325 	mov	dph,r6
      000420 12r00r00         [24] 1326 	lcall	_putchar
                                   1327 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      000423 8C 06            [24] 1328 	mov	ar6,r4
      000425 ED               [12] 1329 	mov	a,r5
      000426 C4               [12] 1330 	swap	a
      000427 CE               [12] 1331 	xch	a,r6
      000428 C4               [12] 1332 	swap	a
      000429 54 0F            [12] 1333 	anl	a,#0x0f
      00042B 6E               [12] 1334 	xrl	a,r6
      00042C CE               [12] 1335 	xch	a,r6
      00042D 54 0F            [12] 1336 	anl	a,#0x0f
      00042F CE               [12] 1337 	xch	a,r6
      000430 6E               [12] 1338 	xrl	a,r6
      000431 CE               [12] 1339 	xch	a,r6
      000432 30 E3 02         [24] 1340 	jnb	acc.3,00541$
      000435 44 F0            [12] 1341 	orl	a,#0xf0
      000437                       1342 00541$:
      000437 53 06 0F         [24] 1343 	anl	ar6,#0x0f
      00043A EE               [12] 1344 	mov	a,r6
      00043B 24r00            [12] 1345 	add	a,#_digits
      00043D F9               [12] 1346 	mov	r1,a
      00043E 87 07            [24] 1347 	mov	ar7,@r1
      000440 7E 00            [12] 1348 	mov	r6,#0x00
      000442 8F 82            [24] 1349 	mov	dpl,r7
      000444 8E 83            [24] 1350 	mov	dph,r6
      000446 12r00r00         [24] 1351 	lcall	_putchar
                                   1352 ;	life.c:45: putchar(digits[a & 0xf]);
      000449 53 04 0F         [24] 1353 	anl	ar4,#0x0f
      00044C EC               [12] 1354 	mov	a,r4
      00044D 24r00            [12] 1355 	add	a,#_digits
      00044F F9               [12] 1356 	mov	r1,a
      000450 87 07            [24] 1357 	mov	ar7,@r1
      000452 7E 00            [12] 1358 	mov	r6,#0x00
      000454 8F 82            [24] 1359 	mov	dpl,r7
      000456 8E 83            [24] 1360 	mov	dph,r6
      000458 12r00r00         [24] 1361 	lcall	_putchar
                                   1362 ;	life.c:176: printstr(">\r\n");
      00045B 7Dr1E            [12] 1363 	mov	r5,#___str_3
      00045D 7Es00            [12] 1364 	mov	r6,#(___str_3 >> 8)
      00045F 7F 80            [12] 1365 	mov	r7,#0x80
                                   1366 ;	life.c:53: return;
      000461                       1367 00211$:
                                   1368 ;	life.c:51: for (; *s; s++) putchar(*s);
      000461 8D 82            [24] 1369 	mov	dpl,r5
      000463 8E 83            [24] 1370 	mov	dph,r6
      000465 8F F0            [24] 1371 	mov	b,r7
      000467 12r00r00         [24] 1372 	lcall	__gptrget
      00046A FC               [12] 1373 	mov	r4,a
      00046B 70 03            [24] 1374 	jnz	00542$
      00046D 02r05r39         [24] 1375 	ljmp	00117$
      000470                       1376 00542$:
      000470 7B 00            [12] 1377 	mov	r3,#0x00
      000472 8C 82            [24] 1378 	mov	dpl,r4
      000474 8B 83            [24] 1379 	mov	dph,r3
      000476 12r00r00         [24] 1380 	lcall	_putchar
      000479 0D               [12] 1381 	inc	r5
                                   1382 ;	life.c:262: if (c == (int)'L') loadiu();
      00047A BD 00 E4         [24] 1383 	cjne	r5,#0x00,00211$
      00047D 0E               [12] 1384 	inc	r6
      00047E 80 E1            [24] 1385 	sjmp	00211$
      000480                       1386 00116$:
                                   1387 ;	life.c:263: else if (c == (int)'R') loadriu();
      000480 78r19            [12] 1388 	mov	r0,#_c
      000482 B6 52 06         [24] 1389 	cjne	@r0,#0x52,00544$
      000485 08               [12] 1390 	inc	r0
      000486 B6 00 02         [24] 1391 	cjne	@r0,#0x00,00544$
      000489 80 03            [24] 1392 	sjmp	00545$
      00048B                       1393 00544$:
      00048B 02r05r39         [24] 1394 	ljmp	00117$
      00048E                       1395 00545$:
                                   1396 ;	life.c:182: j = 0;
      00048E 78r17            [12] 1397 	mov	r0,#_j
      000490 E4               [12] 1398 	clr	a
      000491 F6               [12] 1399 	mov	@r0,a
      000492 08               [12] 1400 	inc	r0
      000493 F6               [12] 1401 	mov	@r0,a
                                   1402 ;	life.c:184: printstr("RANDOM");
      000494 7Dr22            [12] 1403 	mov	r5,#___str_4
      000496 7Es00            [12] 1404 	mov	r6,#(___str_4 >> 8)
      000498 7F 80            [12] 1405 	mov	r7,#0x80
                                   1406 ;	life.c:53: return;
      00049A                       1407 00214$:
                                   1408 ;	life.c:51: for (; *s; s++) putchar(*s);
      00049A 8D 82            [24] 1409 	mov	dpl,r5
      00049C 8E 83            [24] 1410 	mov	dph,r6
      00049E 8F F0            [24] 1411 	mov	b,r7
      0004A0 12r00r00         [24] 1412 	lcall	__gptrget
      0004A3 FC               [12] 1413 	mov	r4,a
      0004A4 60 10            [24] 1414 	jz	00179$
      0004A6 7B 00            [12] 1415 	mov	r3,#0x00
      0004A8 8C 82            [24] 1416 	mov	dpl,r4
      0004AA 8B 83            [24] 1417 	mov	dph,r3
      0004AC 12r00r00         [24] 1418 	lcall	_putchar
      0004AF 0D               [12] 1419 	inc	r5
                                   1420 ;	life.c:184: printstr("RANDOM");
      0004B0 BD 00 E7         [24] 1421 	cjne	r5,#0x00,00214$
      0004B3 0E               [12] 1422 	inc	r6
      0004B4 80 E4            [24] 1423 	sjmp	00214$
      0004B6                       1424 00179$:
                                   1425 ;	life.c:186: for (y = 0; y < (H * W); y += W)
      0004B6 78r15            [12] 1426 	mov	r0,#_y
      0004B8 E4               [12] 1427 	clr	a
      0004B9 F6               [12] 1428 	mov	@r0,a
      0004BA 08               [12] 1429 	inc	r0
      0004BB F6               [12] 1430 	mov	@r0,a
      0004BC                       1431 00218$:
                                   1432 ;	life.c:187: for (x = 0; x < W; x++)
      0004BC 78r13            [12] 1433 	mov	r0,#_x
      0004BE E4               [12] 1434 	clr	a
      0004BF F6               [12] 1435 	mov	@r0,a
      0004C0 08               [12] 1436 	inc	r0
      0004C1 F6               [12] 1437 	mov	@r0,a
      0004C2                       1438 00216$:
                                   1439 ;	life.c:188: iu[y + x] = rand() & 1;
      0004C2 78r15            [12] 1440 	mov	r0,#_y
      0004C4 79r13            [12] 1441 	mov	r1,#_x
      0004C6 E7               [12] 1442 	mov	a,@r1
      0004C7 26               [12] 1443 	add	a,@r0
      0004C8 FE               [12] 1444 	mov	r6,a
      0004C9 09               [12] 1445 	inc	r1
      0004CA E7               [12] 1446 	mov	a,@r1
      0004CB 08               [12] 1447 	inc	r0
      0004CC 36               [12] 1448 	addc	a,@r0
      0004CD FF               [12] 1449 	mov	r7,a
      0004CE EE               [12] 1450 	mov	a,r6
      0004CF 24r00            [12] 1451 	add	a,#_iu
      0004D1 FE               [12] 1452 	mov	r6,a
      0004D2 EF               [12] 1453 	mov	a,r7
      0004D3 34s00            [12] 1454 	addc	a,#(_iu >> 8)
      0004D5 FF               [12] 1455 	mov	r7,a
      0004D6 C0 07            [24] 1456 	push	ar7
      0004D8 C0 06            [24] 1457 	push	ar6
      0004DA 12r00r00         [24] 1458 	lcall	_rand
      0004DD AC 82            [24] 1459 	mov	r4,dpl
      0004DF D0 06            [24] 1460 	pop	ar6
      0004E1 D0 07            [24] 1461 	pop	ar7
      0004E3 53 04 01         [24] 1462 	anl	ar4,#0x01
      0004E6 8E 82            [24] 1463 	mov	dpl,r6
      0004E8 8F 83            [24] 1464 	mov	dph,r7
      0004EA EC               [12] 1465 	mov	a,r4
      0004EB F0               [24] 1466 	movx	@dptr,a
                                   1467 ;	life.c:187: for (x = 0; x < W; x++)
      0004EC 78r13            [12] 1468 	mov	r0,#_x
      0004EE 06               [12] 1469 	inc	@r0
      0004EF B6 00 02         [24] 1470 	cjne	@r0,#0x00,00548$
      0004F2 08               [12] 1471 	inc	r0
      0004F3 06               [12] 1472 	inc	@r0
      0004F4                       1473 00548$:
      0004F4 78r13            [12] 1474 	mov	r0,#_x
      0004F6 C3               [12] 1475 	clr	c
      0004F7 E6               [12] 1476 	mov	a,@r0
      0004F8 94 30            [12] 1477 	subb	a,#0x30
      0004FA 08               [12] 1478 	inc	r0
      0004FB E6               [12] 1479 	mov	a,@r0
      0004FC 64 80            [12] 1480 	xrl	a,#0x80
      0004FE 94 80            [12] 1481 	subb	a,#0x80
      000500 40 C0            [24] 1482 	jc	00216$
                                   1483 ;	life.c:186: for (y = 0; y < (H * W); y += W)
      000502 78r15            [12] 1484 	mov	r0,#_y
      000504 74 30            [12] 1485 	mov	a,#0x30
      000506 26               [12] 1486 	add	a,@r0
      000507 F6               [12] 1487 	mov	@r0,a
      000508 E4               [12] 1488 	clr	a
      000509 08               [12] 1489 	inc	r0
      00050A 36               [12] 1490 	addc	a,@r0
      00050B F6               [12] 1491 	mov	@r0,a
      00050C 78r15            [12] 1492 	mov	r0,#_y
      00050E C3               [12] 1493 	clr	c
      00050F 08               [12] 1494 	inc	r0
      000510 E6               [12] 1495 	mov	a,@r0
      000511 64 80            [12] 1496 	xrl	a,#0x80
      000513 94 A4            [12] 1497 	subb	a,#0xa4
      000515 40 A5            [24] 1498 	jc	00218$
                                   1499 ;	life.c:190: printstr("\r\n");
      000517 7Dr0C            [12] 1500 	mov	r5,#___str_1
      000519 7Es00            [12] 1501 	mov	r6,#(___str_1 >> 8)
      00051B 7F 80            [12] 1502 	mov	r7,#0x80
                                   1503 ;	life.c:53: return;
      00051D                       1504 00221$:
                                   1505 ;	life.c:51: for (; *s; s++) putchar(*s);
      00051D 8D 82            [24] 1506 	mov	dpl,r5
      00051F 8E 83            [24] 1507 	mov	dph,r6
      000521 8F F0            [24] 1508 	mov	b,r7
      000523 12r00r00         [24] 1509 	lcall	__gptrget
      000526 FC               [12] 1510 	mov	r4,a
      000527 60 10            [24] 1511 	jz	00117$
      000529 7B 00            [12] 1512 	mov	r3,#0x00
      00052B 8C 82            [24] 1513 	mov	dpl,r4
      00052D 8B 83            [24] 1514 	mov	dph,r3
      00052F 12r00r00         [24] 1515 	lcall	_putchar
      000532 0D               [12] 1516 	inc	r5
                                   1517 ;	life.c:263: else if (c == (int)'R') loadriu();
      000533 BD 00 E7         [24] 1518 	cjne	r5,#0x00,00221$
      000536 0E               [12] 1519 	inc	r6
      000537 80 E4            [24] 1520 	sjmp	00221$
      000539                       1521 00117$:
                                   1522 ;	life.c:264: memcpy(u, iu, sizeof (iu));
      000539 E4               [12] 1523 	clr	a
      00053A C0 E0            [24] 1524 	push	acc
      00053C 74 24            [12] 1525 	mov	a,#0x24
      00053E C0 E0            [24] 1526 	push	acc
      000540 74r00            [12] 1527 	mov	a,#_iu
      000542 C0 E0            [24] 1528 	push	acc
      000544 74s00            [12] 1529 	mov	a,#(_iu >> 8)
      000546 C0 E0            [24] 1530 	push	acc
      000548 E4               [12] 1531 	clr	a
      000549 C0 E0            [24] 1532 	push	acc
      00054B 90r48r00         [24] 1533 	mov	dptr,#_u
      00054E 75 F0 00         [24] 1534 	mov	b,#0x00
      000551 12r00r00         [24] 1535 	lcall	___memcpy
      000554 E5 81            [12] 1536 	mov	a,sp
      000556 24 FB            [12] 1537 	add	a,#0xfb
      000558 F5 81            [12] 1538 	mov	sp,a
                                   1539 ;	life.c:265: show(0);
      00055A 75 82 00         [24] 1540 	mov	dpl,#0x00
      00055D 12r00r32         [24] 1541 	lcall	_show
                                   1542 ;	life.c:267: printstr("READY T L R P S\r\n");
      000560 7Dr4A            [12] 1543 	mov	r5,#___str_6
      000562 7Es00            [12] 1544 	mov	r6,#(___str_6 >> 8)
      000564 7F 80            [12] 1545 	mov	r7,#0x80
                                   1546 ;	life.c:53: return;
      000566                       1547 00224$:
                                   1548 ;	life.c:51: for (; *s; s++) putchar(*s);
      000566 8D 82            [24] 1549 	mov	dpl,r5
      000568 8E 83            [24] 1550 	mov	dph,r6
      00056A 8F F0            [24] 1551 	mov	b,r7
      00056C 12r00r00         [24] 1552 	lcall	__gptrget
      00056F FC               [12] 1553 	mov	r4,a
      000570 60 10            [24] 1554 	jz	00130$
      000572 7B 00            [12] 1555 	mov	r3,#0x00
      000574 8C 82            [24] 1556 	mov	dpl,r4
      000576 8B 83            [24] 1557 	mov	dph,r3
      000578 12r00r00         [24] 1558 	lcall	_putchar
      00057B 0D               [12] 1559 	inc	r5
                                   1560 ;	life.c:268: while (1) {
      00057C BD 00 E7         [24] 1561 	cjne	r5,#0x00,00224$
      00057F 0E               [12] 1562 	inc	r6
      000580 80 E4            [24] 1563 	sjmp	00224$
      000582                       1564 00130$:
                                   1565 ;	life.c:269: c = toupper(getchar());
      000582 12r00r05         [24] 1566 	lcall	_getchar
      000585 12r00r00         [24] 1567 	lcall	_toupper
      000588 AE 82            [24] 1568 	mov	r6,dpl
      00058A AF 83            [24] 1569 	mov	r7,dph
      00058C 78r19            [12] 1570 	mov	r0,#_c
      00058E A6 06            [24] 1571 	mov	@r0,ar6
      000590 08               [12] 1572 	inc	r0
      000591 A6 07            [24] 1573 	mov	@r0,ar7
                                   1574 ;	life.c:270: if (i0 || (c == (int)'T')) goto terminate;
      000593 78r10            [12] 1575 	mov	r0,#_i0
      000595 E6               [12] 1576 	mov	a,@r0
      000596 60 03            [24] 1577 	jz	00555$
      000598 02r0ArD8         [24] 1578 	ljmp	00142$
      00059B                       1579 00555$:
      00059B BE 54 06         [24] 1580 	cjne	r6,#0x54,00556$
      00059E BF 00 03         [24] 1581 	cjne	r7,#0x00,00556$
      0005A1 02r0ArD8         [24] 1582 	ljmp	00142$
      0005A4                       1583 00556$:
                                   1584 ;	life.c:271: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      0005A4 BE 4C 06         [24] 1585 	cjne	r6,#0x4c,00557$
      0005A7 BF 00 03         [24] 1586 	cjne	r7,#0x00,00557$
      0005AA 02r02rB6         [24] 1587 	ljmp	00112$
      0005AD                       1588 00557$:
      0005AD BE 52 06         [24] 1589 	cjne	r6,#0x52,00558$
      0005B0 BF 00 03         [24] 1590 	cjne	r7,#0x00,00558$
      0005B3 02r02rB6         [24] 1591 	ljmp	00112$
      0005B6                       1592 00558$:
      0005B6 BE 50 06         [24] 1593 	cjne	r6,#0x50,00559$
      0005B9 BF 00 03         [24] 1594 	cjne	r7,#0x00,00559$
      0005BC 02r02rB6         [24] 1595 	ljmp	00112$
      0005BF                       1596 00559$:
                                   1597 ;	life.c:272: else if (c == (int)'S') break;
      0005BF BE 53 C0         [24] 1598 	cjne	r6,#0x53,00130$
      0005C2 BF 00 BD         [24] 1599 	cjne	r7,#0x00,00130$
                                   1600 ;	life.c:96: generation[0] = 0;
      0005C5 78r22            [12] 1601 	mov	r0,#_generation
      0005C7 76 00            [12] 1602 	mov	@r0,#0x00
      0005C9 08               [12] 1603 	inc	r0
      0005CA 76 00            [12] 1604 	mov	@r0,#0x00
                                   1605 ;	life.c:97: generation[1] = 0;
      0005CC 78r24            [12] 1606 	mov	r0,#(_generation + 0x0002)
      0005CE 76 00            [12] 1607 	mov	@r0,#0x00
      0005D0 08               [12] 1608 	inc	r0
      0005D1 76 00            [12] 1609 	mov	@r0,#0x00
                                   1610 ;	life.c:277: for (i1 = 0; !i0 && !i1; ) {
      0005D3 78r11            [12] 1611 	mov	r0,#_i1
      0005D5 76 00            [12] 1612 	mov	@r0,#0x00
      0005D7                       1613 00241$:
      0005D7 78r10            [12] 1614 	mov	r0,#_i0
      0005D9 E6               [12] 1615 	mov	a,@r0
      0005DA 60 03            [24] 1616 	jz	00562$
      0005DC 02r0Ar9F         [24] 1617 	ljmp	00138$
      0005DF                       1618 00562$:
      0005DF 78r11            [12] 1619 	mov	r0,#_i1
      0005E1 E6               [12] 1620 	mov	a,@r0
      0005E2 60 03            [24] 1621 	jz	00563$
      0005E4 02r0Ar9F         [24] 1622 	ljmp	00138$
      0005E7                       1623 00563$:
                                   1624 ;	life.c:278: show(1);
      0005E7 75 82 01         [24] 1625 	mov	dpl,#0x01
      0005EA 12r00r32         [24] 1626 	lcall	_show
                                   1627 ;	life.c:196: fixed = 0;
      0005ED 78r1C            [12] 1628 	mov	r0,#_fixed
      0005EF 76 00            [12] 1629 	mov	@r0,#0x00
                                   1630 ;	life.c:197: cycle2 = 0;
      0005F1 78r1D            [12] 1631 	mov	r0,#_cycle2
      0005F3 76 00            [12] 1632 	mov	@r0,#0x00
                                   1633 ;	life.c:199: for (y = 0; y < H; y++) {
      0005F5 78r15            [12] 1634 	mov	r0,#_y
      0005F7 E4               [12] 1635 	clr	a
      0005F8 F6               [12] 1636 	mov	@r0,a
      0005F9 08               [12] 1637 	inc	r0
      0005FA F6               [12] 1638 	mov	@r0,a
      0005FB                       1639 00228$:
                                   1640 ;	life.c:200: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      0005FB 78r15            [12] 1641 	mov	r0,#_y
      0005FD 86 07            [24] 1642 	mov	ar7,@r0
      0005FF 53 07 03         [24] 1643 	anl	ar7,#0x03
      000602 EF               [12] 1644 	mov	a,r7
      000603 03               [12] 1645 	rr	a
      000604 03               [12] 1646 	rr	a
      000605 54 C0            [12] 1647 	anl	a,#0xc0
      000607 FF               [12] 1648 	mov	r7,a
      000608 78r12            [12] 1649 	mov	r0,#_OE76
      00060A 74 3F            [12] 1650 	mov	a,#0x3f
      00060C 4F               [12] 1651 	orl	a,r7
      00060D F6               [12] 1652 	mov	@r0,a
                                   1653 ;	life.c:201: flashOE();
      00060E 12r00r26         [24] 1654 	lcall	_flashOE
                                   1655 ;	life.c:202: for (x = 0; x < W; x++) {
      000611 78r13            [12] 1656 	mov	r0,#_x
      000613 E4               [12] 1657 	clr	a
      000614 F6               [12] 1658 	mov	@r0,a
      000615 08               [12] 1659 	inc	r0
      000616 F6               [12] 1660 	mov	@r0,a
      000617                       1661 00226$:
                                   1662 ;	life.c:203: n = -u[A2D(W, y, x)];
      000617 78r15            [12] 1663 	mov	r0,#_y
      000619 E6               [12] 1664 	mov	a,@r0
      00061A C0 E0            [24] 1665 	push	acc
      00061C 08               [12] 1666 	inc	r0
      00061D E6               [12] 1667 	mov	a,@r0
      00061E C0 E0            [24] 1668 	push	acc
      000620 90 00 30         [24] 1669 	mov	dptr,#0x0030
      000623 12r00r00         [24] 1670 	lcall	__mulint
      000626 C8               [12] 1671 	xch	a,r0
      000627 E5*00            [12] 1672 	mov	a,_bp
      000629 24 04            [12] 1673 	add	a,#0x04
      00062B C8               [12] 1674 	xch	a,r0
      00062C A6 82            [24] 1675 	mov	@r0,dpl
      00062E 08               [12] 1676 	inc	r0
      00062F A6 83            [24] 1677 	mov	@r0,dph
      000631 15 81            [12] 1678 	dec	sp
      000633 15 81            [12] 1679 	dec	sp
      000635 E5*00            [12] 1680 	mov	a,_bp
      000637 24 04            [12] 1681 	add	a,#0x04
      000639 F8               [12] 1682 	mov	r0,a
      00063A 79r13            [12] 1683 	mov	r1,#_x
      00063C E7               [12] 1684 	mov	a,@r1
      00063D 26               [12] 1685 	add	a,@r0
      00063E C0 E0            [24] 1686 	push	acc
      000640 09               [12] 1687 	inc	r1
      000641 E7               [12] 1688 	mov	a,@r1
      000642 08               [12] 1689 	inc	r0
      000643 36               [12] 1690 	addc	a,@r0
      000644 C0 E0            [24] 1691 	push	acc
      000646 E5*00            [12] 1692 	mov	a,_bp
      000648 24 03            [12] 1693 	add	a,#0x03
      00064A F8               [12] 1694 	mov	r0,a
      00064B D0 E0            [24] 1695 	pop	acc
      00064D F6               [12] 1696 	mov	@r0,a
      00064E 18               [12] 1697 	dec	r0
      00064F D0 E0            [24] 1698 	pop	acc
      000651 F6               [12] 1699 	mov	@r0,a
      000652 A8*00            [24] 1700 	mov	r0,_bp
      000654 08               [12] 1701 	inc	r0
      000655 08               [12] 1702 	inc	r0
      000656 E6               [12] 1703 	mov	a,@r0
      000657 24r00            [12] 1704 	add	a,#_u
      000659 F5 82            [12] 1705 	mov	dpl,a
      00065B 08               [12] 1706 	inc	r0
      00065C E6               [12] 1707 	mov	a,@r0
      00065D 34s48            [12] 1708 	addc	a,#(_u >> 8)
      00065F F5 83            [12] 1709 	mov	dph,a
      000661 E0               [24] 1710 	movx	a,@dptr
      000662 FB               [12] 1711 	mov	r3,a
      000663 A8*00            [24] 1712 	mov	r0,_bp
      000665 08               [12] 1713 	inc	r0
      000666 C3               [12] 1714 	clr	c
      000667 E4               [12] 1715 	clr	a
      000668 9B               [12] 1716 	subb	a,r3
      000669 F6               [12] 1717 	mov	@r0,a
                                   1718 ;	life.c:206: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00066A 78r15            [12] 1719 	mov	r0,#_y
      00066C 74 FF            [12] 1720 	mov	a,#0xff
      00066E 26               [12] 1721 	add	a,@r0
      00066F FA               [12] 1722 	mov	r2,a
      000670 74 FF            [12] 1723 	mov	a,#0xff
      000672 08               [12] 1724 	inc	r0
      000673 36               [12] 1725 	addc	a,@r0
      000674 FB               [12] 1726 	mov	r3,a
      000675 74 C0            [12] 1727 	mov	a,#0xc0
      000677 2A               [12] 1728 	add	a,r2
      000678 FA               [12] 1729 	mov	r2,a
      000679 E4               [12] 1730 	clr	a
      00067A 3B               [12] 1731 	addc	a,r3
      00067B FB               [12] 1732 	mov	r3,a
      00067C 74 C0            [12] 1733 	mov	a,#0xc0
      00067E C0 E0            [24] 1734 	push	acc
      000680 E4               [12] 1735 	clr	a
      000681 C0 E0            [24] 1736 	push	acc
      000683 8A 82            [24] 1737 	mov	dpl,r2
      000685 8B 83            [24] 1738 	mov	dph,r3
      000687 12r00r00         [24] 1739 	lcall	__modsint
      00068A AA 82            [24] 1740 	mov	r2,dpl
      00068C AB 83            [24] 1741 	mov	r3,dph
      00068E 15 81            [12] 1742 	dec	sp
      000690 15 81            [12] 1743 	dec	sp
      000692 C0 02            [24] 1744 	push	ar2
      000694 C0 03            [24] 1745 	push	ar3
      000696 90 00 30         [24] 1746 	mov	dptr,#0x0030
      000699 12r00r00         [24] 1747 	lcall	__mulint
      00069C AA 82            [24] 1748 	mov	r2,dpl
      00069E AB 83            [24] 1749 	mov	r3,dph
      0006A0 15 81            [12] 1750 	dec	sp
      0006A2 15 81            [12] 1751 	dec	sp
      0006A4 78r13            [12] 1752 	mov	r0,#_x
      0006A6 74 FF            [12] 1753 	mov	a,#0xff
      0006A8 26               [12] 1754 	add	a,@r0
      0006A9 FC               [12] 1755 	mov	r4,a
      0006AA 74 FF            [12] 1756 	mov	a,#0xff
      0006AC 08               [12] 1757 	inc	r0
      0006AD 36               [12] 1758 	addc	a,@r0
      0006AE FD               [12] 1759 	mov	r5,a
      0006AF 74 30            [12] 1760 	mov	a,#0x30
      0006B1 2C               [12] 1761 	add	a,r4
      0006B2 FC               [12] 1762 	mov	r4,a
      0006B3 E4               [12] 1763 	clr	a
      0006B4 3D               [12] 1764 	addc	a,r5
      0006B5 FD               [12] 1765 	mov	r5,a
      0006B6 C0 03            [24] 1766 	push	ar3
      0006B8 C0 02            [24] 1767 	push	ar2
      0006BA 74 30            [12] 1768 	mov	a,#0x30
      0006BC C0 E0            [24] 1769 	push	acc
      0006BE E4               [12] 1770 	clr	a
      0006BF C0 E0            [24] 1771 	push	acc
      0006C1 8C 82            [24] 1772 	mov	dpl,r4
      0006C3 8D 83            [24] 1773 	mov	dph,r5
      0006C5 12r00r00         [24] 1774 	lcall	__modsint
      0006C8 AC 82            [24] 1775 	mov	r4,dpl
      0006CA AD 83            [24] 1776 	mov	r5,dph
      0006CC 15 81            [12] 1777 	dec	sp
      0006CE 15 81            [12] 1778 	dec	sp
      0006D0 D0 02            [24] 1779 	pop	ar2
      0006D2 D0 03            [24] 1780 	pop	ar3
      0006D4 EC               [12] 1781 	mov	a,r4
      0006D5 2A               [12] 1782 	add	a,r2
      0006D6 FE               [12] 1783 	mov	r6,a
      0006D7 ED               [12] 1784 	mov	a,r5
      0006D8 3B               [12] 1785 	addc	a,r3
      0006D9 FF               [12] 1786 	mov	r7,a
      0006DA EE               [12] 1787 	mov	a,r6
      0006DB 24r00            [12] 1788 	add	a,#_u
      0006DD F5 82            [12] 1789 	mov	dpl,a
      0006DF EF               [12] 1790 	mov	a,r7
      0006E0 34s48            [12] 1791 	addc	a,#(_u >> 8)
      0006E2 F5 83            [12] 1792 	mov	dph,a
      0006E4 E0               [24] 1793 	movx	a,@dptr
      0006E5 FF               [12] 1794 	mov	r7,a
      0006E6 A8*00            [24] 1795 	mov	r0,_bp
      0006E8 08               [12] 1796 	inc	r0
      0006E9 EF               [12] 1797 	mov	a,r7
      0006EA 26               [12] 1798 	add	a,@r0
      0006EB F6               [12] 1799 	mov	@r0,a
                                   1800 ;	life.c:208: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006EC 78r13            [12] 1801 	mov	r0,#_x
      0006EE E5*00            [12] 1802 	mov	a,_bp
      0006F0 24 06            [12] 1803 	add	a,#0x06
      0006F2 F9               [12] 1804 	mov	r1,a
      0006F3 E6               [12] 1805 	mov	a,@r0
      0006F4 F7               [12] 1806 	mov	@r1,a
      0006F5 08               [12] 1807 	inc	r0
      0006F6 09               [12] 1808 	inc	r1
      0006F7 E6               [12] 1809 	mov	a,@r0
      0006F8 F7               [12] 1810 	mov	@r1,a
      0006F9 E5*00            [12] 1811 	mov	a,_bp
      0006FB 24 06            [12] 1812 	add	a,#0x06
      0006FD F8               [12] 1813 	mov	r0,a
      0006FE 74 30            [12] 1814 	mov	a,#0x30
      000700 26               [12] 1815 	add	a,@r0
      000701 FE               [12] 1816 	mov	r6,a
      000702 E4               [12] 1817 	clr	a
      000703 08               [12] 1818 	inc	r0
      000704 36               [12] 1819 	addc	a,@r0
      000705 FF               [12] 1820 	mov	r7,a
      000706 C0 05            [24] 1821 	push	ar5
      000708 C0 04            [24] 1822 	push	ar4
      00070A C0 03            [24] 1823 	push	ar3
      00070C C0 02            [24] 1824 	push	ar2
      00070E 74 30            [12] 1825 	mov	a,#0x30
      000710 C0 E0            [24] 1826 	push	acc
      000712 E4               [12] 1827 	clr	a
      000713 C0 E0            [24] 1828 	push	acc
      000715 8E 82            [24] 1829 	mov	dpl,r6
      000717 8F 83            [24] 1830 	mov	dph,r7
      000719 12r00r00         [24] 1831 	lcall	__modsint
      00071C C8               [12] 1832 	xch	a,r0
      00071D E5*00            [12] 1833 	mov	a,_bp
      00071F 24 08            [12] 1834 	add	a,#0x08
      000721 C8               [12] 1835 	xch	a,r0
      000722 A6 82            [24] 1836 	mov	@r0,dpl
      000724 08               [12] 1837 	inc	r0
      000725 A6 83            [24] 1838 	mov	@r0,dph
      000727 15 81            [12] 1839 	dec	sp
      000729 15 81            [12] 1840 	dec	sp
      00072B D0 02            [24] 1841 	pop	ar2
      00072D D0 03            [24] 1842 	pop	ar3
      00072F E5*00            [12] 1843 	mov	a,_bp
      000731 24 08            [12] 1844 	add	a,#0x08
      000733 F8               [12] 1845 	mov	r0,a
      000734 E6               [12] 1846 	mov	a,@r0
      000735 2A               [12] 1847 	add	a,r2
      000736 FE               [12] 1848 	mov	r6,a
      000737 08               [12] 1849 	inc	r0
      000738 E6               [12] 1850 	mov	a,@r0
      000739 3B               [12] 1851 	addc	a,r3
      00073A FF               [12] 1852 	mov	r7,a
      00073B EE               [12] 1853 	mov	a,r6
      00073C 24r00            [12] 1854 	add	a,#_u
      00073E F5 82            [12] 1855 	mov	dpl,a
      000740 EF               [12] 1856 	mov	a,r7
      000741 34s48            [12] 1857 	addc	a,#(_u >> 8)
      000743 F5 83            [12] 1858 	mov	dph,a
      000745 E0               [24] 1859 	movx	a,@dptr
      000746 FF               [12] 1860 	mov	r7,a
      000747 A8*00            [24] 1861 	mov	r0,_bp
      000749 08               [12] 1862 	inc	r0
      00074A EF               [12] 1863 	mov	a,r7
      00074B 26               [12] 1864 	add	a,@r0
      00074C F6               [12] 1865 	mov	@r0,a
                                   1866 ;	life.c:210: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00074D E5*00            [12] 1867 	mov	a,_bp
      00074F 24 06            [12] 1868 	add	a,#0x06
      000751 F8               [12] 1869 	mov	r0,a
      000752 74 31            [12] 1870 	mov	a,#0x31
      000754 26               [12] 1871 	add	a,@r0
      000755 FE               [12] 1872 	mov	r6,a
      000756 E4               [12] 1873 	clr	a
      000757 08               [12] 1874 	inc	r0
      000758 36               [12] 1875 	addc	a,@r0
      000759 FF               [12] 1876 	mov	r7,a
      00075A C0 03            [24] 1877 	push	ar3
      00075C C0 02            [24] 1878 	push	ar2
      00075E 74 30            [12] 1879 	mov	a,#0x30
      000760 C0 E0            [24] 1880 	push	acc
      000762 E4               [12] 1881 	clr	a
      000763 C0 E0            [24] 1882 	push	acc
      000765 8E 82            [24] 1883 	mov	dpl,r6
      000767 8F 83            [24] 1884 	mov	dph,r7
      000769 12r00r00         [24] 1885 	lcall	__modsint
      00076C AE 82            [24] 1886 	mov	r6,dpl
      00076E AF 83            [24] 1887 	mov	r7,dph
      000770 15 81            [12] 1888 	dec	sp
      000772 15 81            [12] 1889 	dec	sp
      000774 D0 02            [24] 1890 	pop	ar2
      000776 D0 03            [24] 1891 	pop	ar3
      000778 D0 04            [24] 1892 	pop	ar4
      00077A D0 05            [24] 1893 	pop	ar5
      00077C EE               [12] 1894 	mov	a,r6
      00077D 2A               [12] 1895 	add	a,r2
      00077E FA               [12] 1896 	mov	r2,a
      00077F EF               [12] 1897 	mov	a,r7
      000780 3B               [12] 1898 	addc	a,r3
      000781 FB               [12] 1899 	mov	r3,a
      000782 EA               [12] 1900 	mov	a,r2
      000783 24r00            [12] 1901 	add	a,#_u
      000785 F5 82            [12] 1902 	mov	dpl,a
      000787 EB               [12] 1903 	mov	a,r3
      000788 34s48            [12] 1904 	addc	a,#(_u >> 8)
      00078A F5 83            [12] 1905 	mov	dph,a
      00078C E0               [24] 1906 	movx	a,@dptr
      00078D FB               [12] 1907 	mov	r3,a
      00078E A8*00            [24] 1908 	mov	r0,_bp
      000790 08               [12] 1909 	inc	r0
      000791 EB               [12] 1910 	mov	a,r3
      000792 26               [12] 1911 	add	a,@r0
      000793 F6               [12] 1912 	mov	@r0,a
                                   1913 ;	life.c:212: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000794 78r15            [12] 1914 	mov	r0,#_y
      000796 E5*00            [12] 1915 	mov	a,_bp
      000798 24 0A            [12] 1916 	add	a,#0x0a
      00079A F9               [12] 1917 	mov	r1,a
      00079B E6               [12] 1918 	mov	a,@r0
      00079C F7               [12] 1919 	mov	@r1,a
      00079D 08               [12] 1920 	inc	r0
      00079E 09               [12] 1921 	inc	r1
      00079F E6               [12] 1922 	mov	a,@r0
      0007A0 F7               [12] 1923 	mov	@r1,a
      0007A1 E5*00            [12] 1924 	mov	a,_bp
      0007A3 24 0A            [12] 1925 	add	a,#0x0a
      0007A5 F8               [12] 1926 	mov	r0,a
      0007A6 74 C0            [12] 1927 	mov	a,#0xc0
      0007A8 26               [12] 1928 	add	a,@r0
      0007A9 FA               [12] 1929 	mov	r2,a
      0007AA E4               [12] 1930 	clr	a
      0007AB 08               [12] 1931 	inc	r0
      0007AC 36               [12] 1932 	addc	a,@r0
      0007AD FB               [12] 1933 	mov	r3,a
      0007AE C0 07            [24] 1934 	push	ar7
      0007B0 C0 06            [24] 1935 	push	ar6
      0007B2 C0 05            [24] 1936 	push	ar5
      0007B4 C0 04            [24] 1937 	push	ar4
      0007B6 74 C0            [12] 1938 	mov	a,#0xc0
      0007B8 C0 E0            [24] 1939 	push	acc
      0007BA E4               [12] 1940 	clr	a
      0007BB C0 E0            [24] 1941 	push	acc
      0007BD 8A 82            [24] 1942 	mov	dpl,r2
      0007BF 8B 83            [24] 1943 	mov	dph,r3
      0007C1 12r00r00         [24] 1944 	lcall	__modsint
      0007C4 AA 82            [24] 1945 	mov	r2,dpl
      0007C6 AB 83            [24] 1946 	mov	r3,dph
      0007C8 15 81            [12] 1947 	dec	sp
      0007CA 15 81            [12] 1948 	dec	sp
      0007CC C0 02            [24] 1949 	push	ar2
      0007CE C0 03            [24] 1950 	push	ar3
      0007D0 90 00 30         [24] 1951 	mov	dptr,#0x0030
      0007D3 12r00r00         [24] 1952 	lcall	__mulint
      0007D6 C8               [12] 1953 	xch	a,r0
      0007D7 E5*00            [12] 1954 	mov	a,_bp
      0007D9 24 0C            [12] 1955 	add	a,#0x0c
      0007DB C8               [12] 1956 	xch	a,r0
      0007DC A6 82            [24] 1957 	mov	@r0,dpl
      0007DE 08               [12] 1958 	inc	r0
      0007DF A6 83            [24] 1959 	mov	@r0,dph
      0007E1 15 81            [12] 1960 	dec	sp
      0007E3 15 81            [12] 1961 	dec	sp
      0007E5 D0 04            [24] 1962 	pop	ar4
      0007E7 D0 05            [24] 1963 	pop	ar5
      0007E9 D0 06            [24] 1964 	pop	ar6
      0007EB D0 07            [24] 1965 	pop	ar7
      0007ED E5*00            [12] 1966 	mov	a,_bp
      0007EF 24 0C            [12] 1967 	add	a,#0x0c
      0007F1 F8               [12] 1968 	mov	r0,a
      0007F2 EC               [12] 1969 	mov	a,r4
      0007F3 26               [12] 1970 	add	a,@r0
      0007F4 FA               [12] 1971 	mov	r2,a
      0007F5 ED               [12] 1972 	mov	a,r5
      0007F6 08               [12] 1973 	inc	r0
      0007F7 36               [12] 1974 	addc	a,@r0
      0007F8 FB               [12] 1975 	mov	r3,a
      0007F9 EA               [12] 1976 	mov	a,r2
      0007FA 24r00            [12] 1977 	add	a,#_u
      0007FC F5 82            [12] 1978 	mov	dpl,a
      0007FE EB               [12] 1979 	mov	a,r3
      0007FF 34s48            [12] 1980 	addc	a,#(_u >> 8)
      000801 F5 83            [12] 1981 	mov	dph,a
      000803 E0               [24] 1982 	movx	a,@dptr
      000804 FB               [12] 1983 	mov	r3,a
      000805 A8*00            [24] 1984 	mov	r0,_bp
      000807 08               [12] 1985 	inc	r0
      000808 EB               [12] 1986 	mov	a,r3
      000809 26               [12] 1987 	add	a,@r0
      00080A F6               [12] 1988 	mov	@r0,a
                                   1989 ;	life.c:214: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00080B E5*00            [12] 1990 	mov	a,_bp
      00080D 24 0C            [12] 1991 	add	a,#0x0c
      00080F F8               [12] 1992 	mov	r0,a
      000810 E5*00            [12] 1993 	mov	a,_bp
      000812 24 08            [12] 1994 	add	a,#0x08
      000814 F9               [12] 1995 	mov	r1,a
      000815 E7               [12] 1996 	mov	a,@r1
      000816 26               [12] 1997 	add	a,@r0
      000817 FA               [12] 1998 	mov	r2,a
      000818 09               [12] 1999 	inc	r1
      000819 E7               [12] 2000 	mov	a,@r1
      00081A 08               [12] 2001 	inc	r0
      00081B 36               [12] 2002 	addc	a,@r0
      00081C FB               [12] 2003 	mov	r3,a
      00081D EA               [12] 2004 	mov	a,r2
      00081E 24r00            [12] 2005 	add	a,#_u
      000820 F5 82            [12] 2006 	mov	dpl,a
      000822 EB               [12] 2007 	mov	a,r3
      000823 34s48            [12] 2008 	addc	a,#(_u >> 8)
      000825 F5 83            [12] 2009 	mov	dph,a
      000827 E0               [24] 2010 	movx	a,@dptr
      000828 FB               [12] 2011 	mov	r3,a
      000829 A8*00            [24] 2012 	mov	r0,_bp
      00082B 08               [12] 2013 	inc	r0
      00082C EB               [12] 2014 	mov	a,r3
      00082D 26               [12] 2015 	add	a,@r0
      00082E F6               [12] 2016 	mov	@r0,a
                                   2017 ;	life.c:216: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00082F E5*00            [12] 2018 	mov	a,_bp
      000831 24 0C            [12] 2019 	add	a,#0x0c
      000833 F8               [12] 2020 	mov	r0,a
      000834 EE               [12] 2021 	mov	a,r6
      000835 26               [12] 2022 	add	a,@r0
      000836 FA               [12] 2023 	mov	r2,a
      000837 EF               [12] 2024 	mov	a,r7
      000838 08               [12] 2025 	inc	r0
      000839 36               [12] 2026 	addc	a,@r0
      00083A FB               [12] 2027 	mov	r3,a
      00083B EA               [12] 2028 	mov	a,r2
      00083C 24r00            [12] 2029 	add	a,#_u
      00083E F5 82            [12] 2030 	mov	dpl,a
      000840 EB               [12] 2031 	mov	a,r3
      000841 34s48            [12] 2032 	addc	a,#(_u >> 8)
      000843 F5 83            [12] 2033 	mov	dph,a
      000845 E0               [24] 2034 	movx	a,@dptr
      000846 FB               [12] 2035 	mov	r3,a
      000847 A8*00            [24] 2036 	mov	r0,_bp
      000849 08               [12] 2037 	inc	r0
      00084A E5*00            [12] 2038 	mov	a,_bp
      00084C 24 0C            [12] 2039 	add	a,#0x0c
      00084E F9               [12] 2040 	mov	r1,a
      00084F EB               [12] 2041 	mov	a,r3
      000850 26               [12] 2042 	add	a,@r0
      000851 F7               [12] 2043 	mov	@r1,a
                                   2044 ;	life.c:218: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000852 E5*00            [12] 2045 	mov	a,_bp
      000854 24 0A            [12] 2046 	add	a,#0x0a
      000856 F8               [12] 2047 	mov	r0,a
      000857 74 C1            [12] 2048 	mov	a,#0xc1
      000859 26               [12] 2049 	add	a,@r0
      00085A FA               [12] 2050 	mov	r2,a
      00085B E4               [12] 2051 	clr	a
      00085C 08               [12] 2052 	inc	r0
      00085D 36               [12] 2053 	addc	a,@r0
      00085E FB               [12] 2054 	mov	r3,a
      00085F C0 07            [24] 2055 	push	ar7
      000861 C0 06            [24] 2056 	push	ar6
      000863 C0 05            [24] 2057 	push	ar5
      000865 C0 04            [24] 2058 	push	ar4
      000867 74 C0            [12] 2059 	mov	a,#0xc0
      000869 C0 E0            [24] 2060 	push	acc
      00086B E4               [12] 2061 	clr	a
      00086C C0 E0            [24] 2062 	push	acc
      00086E 8A 82            [24] 2063 	mov	dpl,r2
      000870 8B 83            [24] 2064 	mov	dph,r3
      000872 12r00r00         [24] 2065 	lcall	__modsint
      000875 AA 82            [24] 2066 	mov	r2,dpl
      000877 AB 83            [24] 2067 	mov	r3,dph
      000879 15 81            [12] 2068 	dec	sp
      00087B 15 81            [12] 2069 	dec	sp
      00087D C0 02            [24] 2070 	push	ar2
      00087F C0 03            [24] 2071 	push	ar3
      000881 90 00 30         [24] 2072 	mov	dptr,#0x0030
      000884 12r00r00         [24] 2073 	lcall	__mulint
      000887 AA 82            [24] 2074 	mov	r2,dpl
      000889 AB 83            [24] 2075 	mov	r3,dph
      00088B 15 81            [12] 2076 	dec	sp
      00088D 15 81            [12] 2077 	dec	sp
      00088F D0 04            [24] 2078 	pop	ar4
      000891 D0 05            [24] 2079 	pop	ar5
      000893 D0 06            [24] 2080 	pop	ar6
      000895 D0 07            [24] 2081 	pop	ar7
      000897 EC               [12] 2082 	mov	a,r4
      000898 2A               [12] 2083 	add	a,r2
      000899 FC               [12] 2084 	mov	r4,a
      00089A ED               [12] 2085 	mov	a,r5
      00089B 3B               [12] 2086 	addc	a,r3
      00089C FD               [12] 2087 	mov	r5,a
      00089D EC               [12] 2088 	mov	a,r4
      00089E 24r00            [12] 2089 	add	a,#_u
      0008A0 F5 82            [12] 2090 	mov	dpl,a
      0008A2 ED               [12] 2091 	mov	a,r5
      0008A3 34s48            [12] 2092 	addc	a,#(_u >> 8)
      0008A5 F5 83            [12] 2093 	mov	dph,a
      0008A7 E0               [24] 2094 	movx	a,@dptr
      0008A8 FD               [12] 2095 	mov	r5,a
      0008A9 E5*00            [12] 2096 	mov	a,_bp
      0008AB 24 0C            [12] 2097 	add	a,#0x0c
      0008AD F8               [12] 2098 	mov	r0,a
      0008AE E5*00            [12] 2099 	mov	a,_bp
      0008B0 24 0C            [12] 2100 	add	a,#0x0c
      0008B2 F9               [12] 2101 	mov	r1,a
      0008B3 ED               [12] 2102 	mov	a,r5
      0008B4 26               [12] 2103 	add	a,@r0
      0008B5 F7               [12] 2104 	mov	@r1,a
                                   2105 ;	life.c:220: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008B6 E5*00            [12] 2106 	mov	a,_bp
      0008B8 24 08            [12] 2107 	add	a,#0x08
      0008BA F8               [12] 2108 	mov	r0,a
      0008BB E6               [12] 2109 	mov	a,@r0
      0008BC 2A               [12] 2110 	add	a,r2
      0008BD FC               [12] 2111 	mov	r4,a
      0008BE 08               [12] 2112 	inc	r0
      0008BF E6               [12] 2113 	mov	a,@r0
      0008C0 3B               [12] 2114 	addc	a,r3
      0008C1 FD               [12] 2115 	mov	r5,a
      0008C2 EC               [12] 2116 	mov	a,r4
      0008C3 24r00            [12] 2117 	add	a,#_u
      0008C5 F5 82            [12] 2118 	mov	dpl,a
      0008C7 ED               [12] 2119 	mov	a,r5
      0008C8 34s48            [12] 2120 	addc	a,#(_u >> 8)
      0008CA F5 83            [12] 2121 	mov	dph,a
      0008CC E0               [24] 2122 	movx	a,@dptr
      0008CD FD               [12] 2123 	mov	r5,a
      0008CE E5*00            [12] 2124 	mov	a,_bp
      0008D0 24 0C            [12] 2125 	add	a,#0x0c
      0008D2 F8               [12] 2126 	mov	r0,a
      0008D3 ED               [12] 2127 	mov	a,r5
      0008D4 26               [12] 2128 	add	a,@r0
      0008D5 FD               [12] 2129 	mov	r5,a
                                   2130 ;	life.c:221: y1 = 1; x1 = 1;
      0008D6 78r20            [12] 2131 	mov	r0,#_y1
      0008D8 76 01            [12] 2132 	mov	@r0,#0x01
      0008DA 08               [12] 2133 	inc	r0
      0008DB 76 00            [12] 2134 	mov	@r0,#0x00
      0008DD 78r1E            [12] 2135 	mov	r0,#_x1
      0008DF 76 01            [12] 2136 	mov	@r0,#0x01
      0008E1 08               [12] 2137 	inc	r0
      0008E2 76 00            [12] 2138 	mov	@r0,#0x00
                                   2139 ;	life.c:222: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008E4 EE               [12] 2140 	mov	a,r6
      0008E5 2A               [12] 2141 	add	a,r2
      0008E6 FE               [12] 2142 	mov	r6,a
      0008E7 EF               [12] 2143 	mov	a,r7
      0008E8 3B               [12] 2144 	addc	a,r3
      0008E9 FF               [12] 2145 	mov	r7,a
      0008EA EE               [12] 2146 	mov	a,r6
      0008EB 24r00            [12] 2147 	add	a,#_u
      0008ED F5 82            [12] 2148 	mov	dpl,a
      0008EF EF               [12] 2149 	mov	a,r7
      0008F0 34s48            [12] 2150 	addc	a,#(_u >> 8)
      0008F2 F5 83            [12] 2151 	mov	dph,a
      0008F4 E0               [24] 2152 	movx	a,@dptr
      0008F5 2D               [12] 2153 	add	a,r5
      0008F6 FF               [12] 2154 	mov	r7,a
      0008F7 78r1B            [12] 2155 	mov	r0,#_n
      0008F9 A6 07            [24] 2156 	mov	@r0,ar7
                                   2157 ;	life.c:224: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008FB A8*00            [24] 2158 	mov	r0,_bp
      0008FD 08               [12] 2159 	inc	r0
      0008FE 08               [12] 2160 	inc	r0
      0008FF E6               [12] 2161 	mov	a,@r0
      000900 24r00            [12] 2162 	add	a,#_nu
      000902 FD               [12] 2163 	mov	r5,a
      000903 08               [12] 2164 	inc	r0
      000904 E6               [12] 2165 	mov	a,@r0
      000905 34s6C            [12] 2166 	addc	a,#(_nu >> 8)
      000907 FE               [12] 2167 	mov	r6,a
      000908 BF 03 02         [24] 2168 	cjne	r7,#0x03,00564$
      00090B 80 28            [24] 2169 	sjmp	00254$
      00090D                       2170 00564$:
      00090D BF 02 21         [24] 2171 	cjne	r7,#0x02,00253$
      000910 E5*00            [12] 2172 	mov	a,_bp
      000912 24 04            [12] 2173 	add	a,#0x04
      000914 F8               [12] 2174 	mov	r0,a
      000915 E5*00            [12] 2175 	mov	a,_bp
      000917 24 06            [12] 2176 	add	a,#0x06
      000919 F9               [12] 2177 	mov	r1,a
      00091A E7               [12] 2178 	mov	a,@r1
      00091B 26               [12] 2179 	add	a,@r0
      00091C FC               [12] 2180 	mov	r4,a
      00091D 09               [12] 2181 	inc	r1
      00091E E7               [12] 2182 	mov	a,@r1
      00091F 08               [12] 2183 	inc	r0
      000920 36               [12] 2184 	addc	a,@r0
      000921 FF               [12] 2185 	mov	r7,a
      000922 EC               [12] 2186 	mov	a,r4
      000923 24r00            [12] 2187 	add	a,#_u
      000925 FC               [12] 2188 	mov	r4,a
      000926 EF               [12] 2189 	mov	a,r7
      000927 34s48            [12] 2190 	addc	a,#(_u >> 8)
      000929 FF               [12] 2191 	mov	r7,a
      00092A 8C 82            [24] 2192 	mov	dpl,r4
      00092C 8F 83            [24] 2193 	mov	dph,r7
      00092E E0               [24] 2194 	movx	a,@dptr
      00092F 70 04            [24] 2195 	jnz	00254$
      000931                       2196 00253$:
                                   2197 ;	assignBit
      000931 C2*00            [12] 2198 	clr	b0
      000933 80 02            [24] 2199 	sjmp	00255$
      000935                       2200 00254$:
                                   2201 ;	assignBit
      000935 D2*00            [12] 2202 	setb	b0
      000937                       2203 00255$:
      000937 A2*00            [12] 2204 	mov	c,b0
      000939 E4               [12] 2205 	clr	a
      00093A 33               [12] 2206 	rlc	a
      00093B 8D 82            [24] 2207 	mov	dpl,r5
      00093D 8E 83            [24] 2208 	mov	dph,r6
      00093F F0               [24] 2209 	movx	@dptr,a
                                   2210 ;	life.c:225: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000940 78r15            [12] 2211 	mov	r0,#_y
      000942 E6               [12] 2212 	mov	a,@r0
      000943 C0 E0            [24] 2213 	push	acc
      000945 08               [12] 2214 	inc	r0
      000946 E6               [12] 2215 	mov	a,@r0
      000947 C0 E0            [24] 2216 	push	acc
      000949 90 00 30         [24] 2217 	mov	dptr,#0x0030
      00094C 12r00r00         [24] 2218 	lcall	__mulint
      00094F AE 82            [24] 2219 	mov	r6,dpl
      000951 AF 83            [24] 2220 	mov	r7,dph
      000953 15 81            [12] 2221 	dec	sp
      000955 15 81            [12] 2222 	dec	sp
      000957 78r13            [12] 2223 	mov	r0,#_x
      000959 E6               [12] 2224 	mov	a,@r0
      00095A 2E               [12] 2225 	add	a,r6
      00095B FE               [12] 2226 	mov	r6,a
      00095C 08               [12] 2227 	inc	r0
      00095D E6               [12] 2228 	mov	a,@r0
      00095E 3F               [12] 2229 	addc	a,r7
      00095F FF               [12] 2230 	mov	r7,a
      000960 EE               [12] 2231 	mov	a,r6
      000961 24r00            [12] 2232 	add	a,#_pu
      000963 F5 82            [12] 2233 	mov	dpl,a
      000965 EF               [12] 2234 	mov	a,r7
      000966 34s24            [12] 2235 	addc	a,#(_pu >> 8)
      000968 F5 83            [12] 2236 	mov	dph,a
      00096A E0               [24] 2237 	movx	a,@dptr
      00096B FD               [12] 2238 	mov	r5,a
      00096C EE               [12] 2239 	mov	a,r6
      00096D 24r00            [12] 2240 	add	a,#_nu
      00096F F5 82            [12] 2241 	mov	dpl,a
      000971 EF               [12] 2242 	mov	a,r7
      000972 34s6C            [12] 2243 	addc	a,#(_nu >> 8)
      000974 F5 83            [12] 2244 	mov	dph,a
      000976 E0               [24] 2245 	movx	a,@dptr
      000977 FC               [12] 2246 	mov	r4,a
      000978 6D               [12] 2247 	xrl	a,r5
      000979 78r1D            [12] 2248 	mov	r0,#_cycle2
      00097B 46               [12] 2249 	orl	a,@r0
      00097C F6               [12] 2250 	mov	@r0,a
                                   2251 ;	life.c:226: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00097D EE               [12] 2252 	mov	a,r6
      00097E 24r00            [12] 2253 	add	a,#_u
      000980 F5 82            [12] 2254 	mov	dpl,a
      000982 EF               [12] 2255 	mov	a,r7
      000983 34s48            [12] 2256 	addc	a,#(_u >> 8)
      000985 F5 83            [12] 2257 	mov	dph,a
      000987 E0               [24] 2258 	movx	a,@dptr
      000988 FF               [12] 2259 	mov	r7,a
      000989 EC               [12] 2260 	mov	a,r4
      00098A 6F               [12] 2261 	xrl	a,r7
      00098B 78r1C            [12] 2262 	mov	r0,#_fixed
      00098D 46               [12] 2263 	orl	a,@r0
      00098E F6               [12] 2264 	mov	@r0,a
                                   2265 ;	life.c:202: for (x = 0; x < W; x++) {
      00098F 78r13            [12] 2266 	mov	r0,#_x
      000991 06               [12] 2267 	inc	@r0
      000992 B6 00 02         [24] 2268 	cjne	@r0,#0x00,00568$
      000995 08               [12] 2269 	inc	r0
      000996 06               [12] 2270 	inc	@r0
      000997                       2271 00568$:
      000997 78r13            [12] 2272 	mov	r0,#_x
      000999 C3               [12] 2273 	clr	c
      00099A E6               [12] 2274 	mov	a,@r0
      00099B 94 30            [12] 2275 	subb	a,#0x30
      00099D 08               [12] 2276 	inc	r0
      00099E E6               [12] 2277 	mov	a,@r0
      00099F 64 80            [12] 2278 	xrl	a,#0x80
      0009A1 94 80            [12] 2279 	subb	a,#0x80
      0009A3 50 03            [24] 2280 	jnc	00569$
      0009A5 02r06r17         [24] 2281 	ljmp	00226$
      0009A8                       2282 00569$:
                                   2283 ;	life.c:199: for (y = 0; y < H; y++) {
      0009A8 78r15            [12] 2284 	mov	r0,#_y
      0009AA 06               [12] 2285 	inc	@r0
      0009AB B6 00 02         [24] 2286 	cjne	@r0,#0x00,00570$
      0009AE 08               [12] 2287 	inc	r0
      0009AF 06               [12] 2288 	inc	@r0
      0009B0                       2289 00570$:
      0009B0 78r15            [12] 2290 	mov	r0,#_y
      0009B2 C3               [12] 2291 	clr	c
      0009B3 E6               [12] 2292 	mov	a,@r0
      0009B4 94 C0            [12] 2293 	subb	a,#0xc0
      0009B6 08               [12] 2294 	inc	r0
      0009B7 E6               [12] 2295 	mov	a,@r0
      0009B8 64 80            [12] 2296 	xrl	a,#0x80
      0009BA 94 80            [12] 2297 	subb	a,#0x80
      0009BC 50 03            [24] 2298 	jnc	00571$
      0009BE 02r05rFB         [24] 2299 	ljmp	00228$
      0009C1                       2300 00571$:
                                   2301 ;	life.c:230: cycle2 = !cycle2;
      0009C1 78r1D            [12] 2302 	mov	r0,#_cycle2
      0009C3 E6               [12] 2303 	mov	a,@r0
      0009C4 B4 01 00         [24] 2304 	cjne	a,#0x01,00572$
      0009C7                       2305 00572$:
      0009C7 92*00            [24] 2306 	mov	b0,c
      0009C9 78r1D            [12] 2307 	mov	r0,#_cycle2
      0009CB E4               [12] 2308 	clr	a
      0009CC 33               [12] 2309 	rlc	a
      0009CD F6               [12] 2310 	mov	@r0,a
                                   2311 ;	life.c:231: fixed = !fixed;
      0009CE 78r1C            [12] 2312 	mov	r0,#_fixed
      0009D0 E6               [12] 2313 	mov	a,@r0
      0009D1 B4 01 00         [24] 2314 	cjne	a,#0x01,00573$
      0009D4                       2315 00573$:
      0009D4 92*00            [24] 2316 	mov	b0,c
      0009D6 78r1C            [12] 2317 	mov	r0,#_fixed
      0009D8 E4               [12] 2318 	clr	a
      0009D9 33               [12] 2319 	rlc	a
      0009DA F6               [12] 2320 	mov	@r0,a
                                   2321 ;	life.c:233: memcpy(pu, u, sizeof (u));
      0009DB E4               [12] 2322 	clr	a
      0009DC C0 E0            [24] 2323 	push	acc
      0009DE 74 24            [12] 2324 	mov	a,#0x24
      0009E0 C0 E0            [24] 2325 	push	acc
      0009E2 74r00            [12] 2326 	mov	a,#_u
      0009E4 C0 E0            [24] 2327 	push	acc
      0009E6 74s48            [12] 2328 	mov	a,#(_u >> 8)
      0009E8 C0 E0            [24] 2329 	push	acc
      0009EA E4               [12] 2330 	clr	a
      0009EB C0 E0            [24] 2331 	push	acc
      0009ED 90r24r00         [24] 2332 	mov	dptr,#_pu
      0009F0 75 F0 00         [24] 2333 	mov	b,#0x00
      0009F3 12r00r00         [24] 2334 	lcall	___memcpy
      0009F6 E5 81            [12] 2335 	mov	a,sp
      0009F8 24 FB            [12] 2336 	add	a,#0xfb
      0009FA F5 81            [12] 2337 	mov	sp,a
                                   2338 ;	life.c:234: memcpy(u, nu, sizeof (nu));
      0009FC E4               [12] 2339 	clr	a
      0009FD C0 E0            [24] 2340 	push	acc
      0009FF 74 24            [12] 2341 	mov	a,#0x24
      000A01 C0 E0            [24] 2342 	push	acc
      000A03 74r00            [12] 2343 	mov	a,#_nu
      000A05 C0 E0            [24] 2344 	push	acc
      000A07 74s6C            [12] 2345 	mov	a,#(_nu >> 8)
      000A09 C0 E0            [24] 2346 	push	acc
      000A0B E4               [12] 2347 	clr	a
      000A0C C0 E0            [24] 2348 	push	acc
      000A0E 90r48r00         [24] 2349 	mov	dptr,#_u
      000A11 75 F0 00         [24] 2350 	mov	b,#0x00
      000A14 12r00r00         [24] 2351 	lcall	___memcpy
      000A17 E5 81            [12] 2352 	mov	a,sp
      000A19 24 FB            [12] 2353 	add	a,#0xfb
      000A1B F5 81            [12] 2354 	mov	sp,a
                                   2355 ;	life.c:280: if (fixed || cycle2) {
      000A1D 78r1C            [12] 2356 	mov	r0,#_fixed
      000A1F E6               [12] 2357 	mov	a,@r0
      000A20 70 08            [24] 2358 	jnz	00135$
      000A22 78r1D            [12] 2359 	mov	r0,#_cycle2
      000A24 E6               [12] 2360 	mov	a,@r0
      000A25 70 03            [24] 2361 	jnz	00575$
      000A27 02r05rD7         [24] 2362 	ljmp	00241$
      000A2A                       2363 00575$:
      000A2A                       2364 00135$:
                                   2365 ;	life.c:281: printstr("DONE ");
      000A2A 7Dr5C            [12] 2366 	mov	r5,#___str_7
      000A2C 7Es00            [12] 2367 	mov	r6,#(___str_7 >> 8)
      000A2E 7F 80            [12] 2368 	mov	r7,#0x80
                                   2369 ;	life.c:53: return;
      000A30                       2370 00231$:
                                   2371 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A30 8D 82            [24] 2372 	mov	dpl,r5
      000A32 8E 83            [24] 2373 	mov	dph,r6
      000A34 8F F0            [24] 2374 	mov	b,r7
      000A36 12r00r00         [24] 2375 	lcall	__gptrget
      000A39 FC               [12] 2376 	mov	r4,a
      000A3A 60 10            [24] 2377 	jz	00192$
      000A3C 7B 00            [12] 2378 	mov	r3,#0x00
      000A3E 8C 82            [24] 2379 	mov	dpl,r4
      000A40 8B 83            [24] 2380 	mov	dph,r3
      000A42 12r00r00         [24] 2381 	lcall	_putchar
      000A45 0D               [12] 2382 	inc	r5
                                   2383 ;	life.c:281: printstr("DONE ");
      000A46 BD 00 E7         [24] 2384 	cjne	r5,#0x00,00231$
      000A49 0E               [12] 2385 	inc	r6
      000A4A 80 E4            [24] 2386 	sjmp	00231$
      000A4C                       2387 00192$:
                                   2388 ;	life.c:282: OE76 = OE76_0;
      000A4C 78r12            [12] 2389 	mov	r0,#_OE76
      000A4E 76 3F            [12] 2390 	mov	@r0,#0x3f
                                   2391 ;	life.c:283: flashOE();
      000A50 12r00r26         [24] 2392 	lcall	_flashOE
                                   2393 ;	life.c:284: if (fixed) printstr("FIXED\r\n");
      000A53 78r1C            [12] 2394 	mov	r0,#_fixed
      000A55 E6               [12] 2395 	mov	a,@r0
      000A56 60 22            [24] 2396 	jz	00133$
      000A58 7Dr62            [12] 2397 	mov	r5,#___str_8
      000A5A 7Es00            [12] 2398 	mov	r6,#(___str_8 >> 8)
      000A5C 7F 80            [12] 2399 	mov	r7,#0x80
                                   2400 ;	life.c:53: return;
      000A5E                       2401 00234$:
                                   2402 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A5E 8D 82            [24] 2403 	mov	dpl,r5
      000A60 8E 83            [24] 2404 	mov	dph,r6
      000A62 8F F0            [24] 2405 	mov	b,r7
      000A64 12r00r00         [24] 2406 	lcall	__gptrget
      000A67 FC               [12] 2407 	mov	r4,a
      000A68 60 32            [24] 2408 	jz	00134$
      000A6A 7B 00            [12] 2409 	mov	r3,#0x00
      000A6C 8C 82            [24] 2410 	mov	dpl,r4
      000A6E 8B 83            [24] 2411 	mov	dph,r3
      000A70 12r00r00         [24] 2412 	lcall	_putchar
      000A73 0D               [12] 2413 	inc	r5
                                   2414 ;	life.c:284: if (fixed) printstr("FIXED\r\n");
      000A74 BD 00 E7         [24] 2415 	cjne	r5,#0x00,00234$
      000A77 0E               [12] 2416 	inc	r6
      000A78 80 E4            [24] 2417 	sjmp	00234$
      000A7A                       2418 00133$:
                                   2419 ;	life.c:285: else printstr("CYCLE2\r\n");
      000A7A 7Dr6A            [12] 2420 	mov	r5,#___str_9
      000A7C 7Es00            [12] 2421 	mov	r6,#(___str_9 >> 8)
      000A7E 7F 80            [12] 2422 	mov	r7,#0x80
                                   2423 ;	life.c:53: return;
      000A80                       2424 00237$:
                                   2425 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A80 8D 82            [24] 2426 	mov	dpl,r5
      000A82 8E 83            [24] 2427 	mov	dph,r6
      000A84 8F F0            [24] 2428 	mov	b,r7
      000A86 12r00r00         [24] 2429 	lcall	__gptrget
      000A89 FC               [12] 2430 	mov	r4,a
      000A8A 60 10            [24] 2431 	jz	00134$
      000A8C 7B 00            [12] 2432 	mov	r3,#0x00
      000A8E 8C 82            [24] 2433 	mov	dpl,r4
      000A90 8B 83            [24] 2434 	mov	dph,r3
      000A92 12r00r00         [24] 2435 	lcall	_putchar
      000A95 0D               [12] 2436 	inc	r5
                                   2437 ;	life.c:285: else printstr("CYCLE2\r\n");
      000A96 BD 00 E7         [24] 2438 	cjne	r5,#0x00,00237$
      000A99 0E               [12] 2439 	inc	r6
      000A9A 80 E4            [24] 2440 	sjmp	00237$
      000A9C                       2441 00134$:
                                   2442 ;	life.c:286: (void)getchar();
      000A9C 12r00r05         [24] 2443 	lcall	_getchar
                                   2444 ;	life.c:287: break;
      000A9F                       2445 00138$:
                                   2446 ;	life.c:291: if (i1) {
      000A9F 78r11            [12] 2447 	mov	r0,#_i1
      000AA1 E6               [12] 2448 	mov	a,@r0
      000AA2 60 2C            [24] 2449 	jz	00247$
                                   2450 ;	life.c:292: printstr("BREAK\r\n");
      000AA4 7Dr73            [12] 2451 	mov	r5,#___str_10
      000AA6 7Es00            [12] 2452 	mov	r6,#(___str_10 >> 8)
      000AA8 7F 80            [12] 2453 	mov	r7,#0x80
                                   2454 ;	life.c:53: return;
      000AAA                       2455 00244$:
                                   2456 ;	life.c:51: for (; *s; s++) putchar(*s);
      000AAA 8D 82            [24] 2457 	mov	dpl,r5
      000AAC 8E 83            [24] 2458 	mov	dph,r6
      000AAE 8F F0            [24] 2459 	mov	b,r7
      000AB0 12r00r00         [24] 2460 	lcall	__gptrget
      000AB3 FC               [12] 2461 	mov	r4,a
      000AB4 60 10            [24] 2462 	jz	00198$
      000AB6 7B 00            [12] 2463 	mov	r3,#0x00
      000AB8 8C 82            [24] 2464 	mov	dpl,r4
      000ABA 8B 83            [24] 2465 	mov	dph,r3
      000ABC 12r00r00         [24] 2466 	lcall	_putchar
      000ABF 0D               [12] 2467 	inc	r5
                                   2468 ;	life.c:292: printstr("BREAK\r\n");
      000AC0 BD 00 E7         [24] 2469 	cjne	r5,#0x00,00244$
      000AC3 0E               [12] 2470 	inc	r6
      000AC4 80 E4            [24] 2471 	sjmp	00244$
      000AC6                       2472 00198$:
                                   2473 ;	life.c:293: OE76 = OE76_0;
      000AC6 78r12            [12] 2474 	mov	r0,#_OE76
      000AC8 76 3F            [12] 2475 	mov	@r0,#0x3f
                                   2476 ;	life.c:294: flashOE();
      000ACA 12r00r26         [24] 2477 	lcall	_flashOE
                                   2478 ;	life.c:295: (void)getchar();
      000ACD 12r00r05         [24] 2479 	lcall	_getchar
      000AD0                       2480 00247$:
                                   2481 ;	life.c:252: for (i0 = 0; !i0; ) {	
      000AD0 78r10            [12] 2482 	mov	r0,#_i0
      000AD2 E6               [12] 2483 	mov	a,@r0
      000AD3 70 03            [24] 2484 	jnz	00586$
      000AD5 02r02r5C         [24] 2485 	ljmp	00246$
      000AD8                       2486 00586$:
                                   2487 ;	life.c:299: terminate:
      000AD8                       2488 00142$:
                                   2489 ;	life.c:300: EA = 0;
                                   2490 ;	assignBit
      000AD8 C2 AF            [12] 2491 	clr	_EA
                                   2492 ;	life.c:301: printstr("TERM\r\n");
      000ADA 7Dr7B            [12] 2493 	mov	r5,#___str_11
      000ADC 7Es00            [12] 2494 	mov	r6,#(___str_11 >> 8)
      000ADE 7F 80            [12] 2495 	mov	r7,#0x80
                                   2496 ;	life.c:53: return;
      000AE0                       2497 00249$:
                                   2498 ;	life.c:51: for (; *s; s++) putchar(*s);
      000AE0 8D 82            [24] 2499 	mov	dpl,r5
      000AE2 8E 83            [24] 2500 	mov	dph,r6
      000AE4 8F F0            [24] 2501 	mov	b,r7
      000AE6 12r00r00         [24] 2502 	lcall	__gptrget
      000AE9 FC               [12] 2503 	mov	r4,a
      000AEA 60 10            [24] 2504 	jz	00200$
      000AEC 7B 00            [12] 2505 	mov	r3,#0x00
      000AEE 8C 82            [24] 2506 	mov	dpl,r4
      000AF0 8B 83            [24] 2507 	mov	dph,r3
      000AF2 12r00r00         [24] 2508 	lcall	_putchar
      000AF5 0D               [12] 2509 	inc	r5
                                   2510 ;	life.c:301: printstr("TERM\r\n");
      000AF6 BD 00 E7         [24] 2511 	cjne	r5,#0x00,00249$
      000AF9 0E               [12] 2512 	inc	r6
      000AFA 80 E4            [24] 2513 	sjmp	00249$
      000AFC                       2514 00200$:
                                   2515 ;	life.c:302: (void)getchar();
      000AFC 12r00r05         [24] 2516 	lcall	_getchar
                                   2517 ;	life.c:306: __endasm;
      000AFF 02 00 00         [24] 2518 	ljmp	0
                                   2519 ;	life.c:307: }
      000B02 85*00 81         [24] 2520 	mov	sp,_bp
      000B05 D0*00            [24] 2521 	pop	_bp
      000B07 22               [24] 2522 	ret
                                   2523 	.area CSEG    (CODE)
                                   2524 	.area CONST   (CODE)
                                   2525 	.area CONST   (CODE)
      000000                       2526 ___str_0:
      000000 1B                    2527 	.db 0x1b
      000001 5B 32 4A              2528 	.ascii "[2J"
      000004 1B                    2529 	.db 0x1b
      000005 5B 6D 47 45 4E 20     2530 	.ascii "[mGEN "
      00000B 00                    2531 	.db 0x00
                                   2532 	.area CSEG    (CODE)
                                   2533 	.area CONST   (CODE)
      00000C                       2534 ___str_1:
      00000C 0D                    2535 	.db 0x0d
      00000D 0A                    2536 	.db 0x0a
      00000E 00                    2537 	.db 0x00
                                   2538 	.area CSEG    (CODE)
                                   2539 	.area CONST   (CODE)
      00000F                       2540 ___str_2:
      00000F 4C 4F 41 44 20 30 20  2541 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00001D 00                    2542 	.db 0x00
                                   2543 	.area CSEG    (CODE)
                                   2544 	.area CONST   (CODE)
      00001E                       2545 ___str_3:
      00001E 3E                    2546 	.ascii ">"
      00001F 0D                    2547 	.db 0x0d
      000020 0A                    2548 	.db 0x0a
      000021 00                    2549 	.db 0x00
                                   2550 	.area CSEG    (CODE)
                                   2551 	.area CONST   (CODE)
      000022                       2552 ___str_4:
      000022 52 41 4E 44 4F 4D     2553 	.ascii "RANDOM"
      000028 00                    2554 	.db 0x00
                                   2555 	.area CSEG    (CODE)
                                   2556 	.area CONST   (CODE)
      000029                       2557 ___str_5:
      000029 1B                    2558 	.db 0x1b
      00002A 5B 32 4A              2559 	.ascii "[2J"
      00002D 1B                    2560 	.db 0x1b
      00002E 5B 3F 32 35 6C        2561 	.ascii "[?25l"
      000033 1B                    2562 	.db 0x1b
      000034 5B 6D 4C 49 46 45 20  2563 	.ascii "[mLIFE INIT T L R P"
             49 4E 49 54 20 54 20
             4C 20 52 20 50
      000047 0D                    2564 	.db 0x0d
      000048 0A                    2565 	.db 0x0a
      000049 00                    2566 	.db 0x00
                                   2567 	.area CSEG    (CODE)
                                   2568 	.area CONST   (CODE)
      00004A                       2569 ___str_6:
      00004A 52 45 41 44 59 20 54  2570 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000059 0D                    2571 	.db 0x0d
      00005A 0A                    2572 	.db 0x0a
      00005B 00                    2573 	.db 0x00
                                   2574 	.area CSEG    (CODE)
                                   2575 	.area CONST   (CODE)
      00005C                       2576 ___str_7:
      00005C 44 4F 4E 45 20        2577 	.ascii "DONE "
      000061 00                    2578 	.db 0x00
                                   2579 	.area CSEG    (CODE)
                                   2580 	.area CONST   (CODE)
      000062                       2581 ___str_8:
      000062 46 49 58 45 44        2582 	.ascii "FIXED"
      000067 0D                    2583 	.db 0x0d
      000068 0A                    2584 	.db 0x0a
      000069 00                    2585 	.db 0x00
                                   2586 	.area CSEG    (CODE)
                                   2587 	.area CONST   (CODE)
      00006A                       2588 ___str_9:
      00006A 43 59 43 4C 45 32     2589 	.ascii "CYCLE2"
      000070 0D                    2590 	.db 0x0d
      000071 0A                    2591 	.db 0x0a
      000072 00                    2592 	.db 0x00
                                   2593 	.area CSEG    (CODE)
                                   2594 	.area CONST   (CODE)
      000073                       2595 ___str_10:
      000073 42 52 45 41 4B        2596 	.ascii "BREAK"
      000078 0D                    2597 	.db 0x0d
      000079 0A                    2598 	.db 0x0a
      00007A 00                    2599 	.db 0x00
                                   2600 	.area CSEG    (CODE)
                                   2601 	.area CONST   (CODE)
      00007B                       2602 ___str_11:
      00007B 54 45 52 4D           2603 	.ascii "TERM"
      00007F 0D                    2604 	.db 0x0d
      000080 0A                    2605 	.db 0x0a
      000081 00                    2606 	.db 0x00
                                   2607 	.area CSEG    (CODE)
                                   2608 	.area XINIT   (CODE)
                                   2609 	.area CABS    (ABS,CODE)
