                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _evolve
                                     13 	.globl _show
                                     14 	.globl _printgen
                                     15 	.globl _updategen
                                     16 	.globl _cleargen
                                     17 	.globl _int1
                                     18 	.globl _int0
                                     19 	.globl _printf
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _FL
                                     27 	.globl _P
                                     28 	.globl _TF2
                                     29 	.globl _EXF2
                                     30 	.globl _RCLK
                                     31 	.globl _TCLK
                                     32 	.globl _EXEN2
                                     33 	.globl _TR2
                                     34 	.globl _C_T2
                                     35 	.globl _CP_RL2
                                     36 	.globl _T2CON_7
                                     37 	.globl _T2CON_6
                                     38 	.globl _T2CON_5
                                     39 	.globl _T2CON_4
                                     40 	.globl _T2CON_3
                                     41 	.globl _T2CON_2
                                     42 	.globl _T2CON_1
                                     43 	.globl _T2CON_0
                                     44 	.globl _PT2
                                     45 	.globl _PS
                                     46 	.globl _PT1
                                     47 	.globl _PX1
                                     48 	.globl _PT0
                                     49 	.globl _PX0
                                     50 	.globl _RD
                                     51 	.globl _WR
                                     52 	.globl _T1
                                     53 	.globl _T0
                                     54 	.globl _INT1
                                     55 	.globl _INT0
                                     56 	.globl _TXD
                                     57 	.globl _RXD
                                     58 	.globl _P3_7
                                     59 	.globl _P3_6
                                     60 	.globl _P3_5
                                     61 	.globl _P3_4
                                     62 	.globl _P3_3
                                     63 	.globl _P3_2
                                     64 	.globl _P3_1
                                     65 	.globl _P3_0
                                     66 	.globl _EA
                                     67 	.globl _ET2
                                     68 	.globl _ES
                                     69 	.globl _ET1
                                     70 	.globl _EX1
                                     71 	.globl _ET0
                                     72 	.globl _EX0
                                     73 	.globl _P2_7
                                     74 	.globl _P2_6
                                     75 	.globl _P2_5
                                     76 	.globl _P2_4
                                     77 	.globl _P2_3
                                     78 	.globl _P2_2
                                     79 	.globl _P2_1
                                     80 	.globl _P2_0
                                     81 	.globl _SM0
                                     82 	.globl _SM1
                                     83 	.globl _SM2
                                     84 	.globl _REN
                                     85 	.globl _TB8
                                     86 	.globl _RB8
                                     87 	.globl _TI
                                     88 	.globl _RI
                                     89 	.globl _T2EX
                                     90 	.globl _T2
                                     91 	.globl _P1_7
                                     92 	.globl _P1_6
                                     93 	.globl _P1_5
                                     94 	.globl _P1_4
                                     95 	.globl _P1_3
                                     96 	.globl _P1_2
                                     97 	.globl _P1_1
                                     98 	.globl _P1_0
                                     99 	.globl _TF1
                                    100 	.globl _TR1
                                    101 	.globl _TF0
                                    102 	.globl _TR0
                                    103 	.globl _IE1
                                    104 	.globl _IT1
                                    105 	.globl _IE0
                                    106 	.globl _IT0
                                    107 	.globl _P0_7
                                    108 	.globl _P0_6
                                    109 	.globl _P0_5
                                    110 	.globl _P0_4
                                    111 	.globl _P0_3
                                    112 	.globl _P0_2
                                    113 	.globl _P0_1
                                    114 	.globl _P0_0
                                    115 	.globl _B
                                    116 	.globl _A
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _TH2
                                    120 	.globl _TL2
                                    121 	.globl _RCAP2H
                                    122 	.globl _RCAP2L
                                    123 	.globl _T2MOD
                                    124 	.globl _T2CON
                                    125 	.globl _IP
                                    126 	.globl _P3
                                    127 	.globl _IE
                                    128 	.globl _P2
                                    129 	.globl _SBUF
                                    130 	.globl _SCON
                                    131 	.globl _P1
                                    132 	.globl _TH1
                                    133 	.globl _TH0
                                    134 	.globl _TL1
                                    135 	.globl _TL0
                                    136 	.globl _TMOD
                                    137 	.globl _TCON
                                    138 	.globl _PCON
                                    139 	.globl _DPH
                                    140 	.globl _DPL
                                    141 	.globl _SP
                                    142 	.globl _P0
                                    143 	.globl _c
                                    144 	.globl _fixed
                                    145 	.globl _j
                                    146 	.globl _generation
                                    147 	.globl _n
                                    148 	.globl _y1
                                    149 	.globl _x1
                                    150 	.globl _y
                                    151 	.globl _x
                                    152 	.globl _nu
                                    153 	.globl _u
                                    154 	.globl _i1
                                    155 	.globl _i0
                                    156 	.globl _putchar
                                    157 	.globl _getchar
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 2
      000002                        349 _i1::
      000002                        350 	.ds 2
      000004                        351 _u::
      000004                        352 	.ds 1024
      000404                        353 _nu::
      000404                        354 	.ds 1024
      000804                        355 _x::
      000804                        356 	.ds 2
      000806                        357 _y::
      000806                        358 	.ds 2
      000808                        359 _x1::
      000808                        360 	.ds 2
      00080A                        361 _y1::
      00080A                        362 	.ds 2
      00080C                        363 _n::
      00080C                        364 	.ds 2
      00080E                        365 _generation::
      00080E                        366 	.ds 8
      000816                        367 _j::
      000816                        368 	.ds 2
      000818                        369 _fixed::
      000818                        370 	.ds 2
      00081A                        371 _c::
      00081A                        372 	.ds 2
                                    373 ;--------------------------------------------------------
                                    374 ; absolute external ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XABS    (ABS,XDATA)
                                    377 ;--------------------------------------------------------
                                    378 ; external initialized ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area XISEG   (XDATA)
                                    381 	.area HOME    (CODE)
                                    382 	.area GSINIT0 (CODE)
                                    383 	.area GSINIT1 (CODE)
                                    384 	.area GSINIT2 (CODE)
                                    385 	.area GSINIT3 (CODE)
                                    386 	.area GSINIT4 (CODE)
                                    387 	.area GSINIT5 (CODE)
                                    388 	.area GSINIT  (CODE)
                                    389 	.area GSFINAL (CODE)
                                    390 	.area CSEG    (CODE)
                                    391 ;--------------------------------------------------------
                                    392 ; interrupt vector 
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
      000000                        395 __interrupt_vect:
      000000 02r00r00         [24]  396 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0D         [24]  397 	ljmp	_int0
      000006                        398 	.ds	5
      00000B 32               [24]  399 	reti
      00000C                        400 	.ds	7
      000013 02r00r23         [24]  401 	ljmp	_int1
                                    402 ;--------------------------------------------------------
                                    403 ; global & static initialisations
                                    404 ;--------------------------------------------------------
                                    405 	.area HOME    (CODE)
                                    406 	.area GSINIT  (CODE)
                                    407 	.area GSFINAL (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.globl __sdcc_gsinit_startup
                                    410 	.globl __sdcc_program_startup
                                    411 	.globl __start__stack
                                    412 	.globl __mcs51_genXINIT
                                    413 	.globl __mcs51_genXRAMCLEAR
                                    414 	.globl __mcs51_genRAMCLEAR
                                    415 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  416 	ljmp	__sdcc_program_startup
                                    417 ;--------------------------------------------------------
                                    418 ; Home
                                    419 ;--------------------------------------------------------
                                    420 	.area HOME    (CODE)
                                    421 	.area HOME    (CODE)
      000016                        422 __sdcc_program_startup:
      000016 02r05r63         [24]  423 	ljmp	_main
                                    424 ;	return from main will return to caller
                                    425 ;--------------------------------------------------------
                                    426 ; code
                                    427 ;--------------------------------------------------------
                                    428 	.area CSEG    (CODE)
                                    429 ;------------------------------------------------------------
                                    430 ;Allocation info for local variables in function 'putchar'
                                    431 ;------------------------------------------------------------
                                    432 ;c                         Allocated to registers 
                                    433 ;------------------------------------------------------------
                                    434 ;	life.c:7: int putchar(int c) __naked {
                                    435 ;	-----------------------------------------
                                    436 ;	 function putchar
                                    437 ;	-----------------------------------------
      000000                        438 _putchar:
                                    439 ;	naked function: no prologue.
                                    440 ;	life.c:12: __endasm;
      000000 E5 82            [12]  441 	mov	a, dpl
      000002 02 00 30         [24]  442 	ljmp	0x0030
                                    443 ;	life.c:13: }
                                    444 ;	naked function: no epilogue.
                                    445 ;------------------------------------------------------------
                                    446 ;Allocation info for local variables in function 'getchar'
                                    447 ;------------------------------------------------------------
                                    448 ;	life.c:15: int getchar(void) {
                                    449 ;	-----------------------------------------
                                    450 ;	 function getchar
                                    451 ;	-----------------------------------------
      000005                        452 _getchar:
                           000007   453 	ar7 = 0x07
                           000006   454 	ar6 = 0x06
                           000005   455 	ar5 = 0x05
                           000004   456 	ar4 = 0x04
                           000003   457 	ar3 = 0x03
                           000002   458 	ar2 = 0x02
                           000001   459 	ar1 = 0x01
                           000000   460 	ar0 = 0x00
                                    461 ;	life.c:20: __endasm;
      000005 12 00 32         [24]  462 	lcall	0x0032
      000008 C2 83            [12]  463 	clr	dph
      00000A F5 82            [12]  464 	mov	dpl, a
                                    465 ;	life.c:21: }
      00000C 22               [24]  466 	ret
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:32: void int0(void) __interrupt 0 __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000D                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000D C0 E0            [24]  483 	push	acc
      00000F C0 82            [24]  484 	push	dpl
      000011 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:33: i0 = 1;
      000013 90r00r00         [24]  487 	mov	dptr,#_i0
      000016 74 01            [12]  488 	mov	a,#0x01
      000018 F0               [24]  489 	movx	@dptr,a
      000019 E4               [12]  490 	clr	a
      00001A A3               [24]  491 	inc	dptr
      00001B F0               [24]  492 	movx	@dptr,a
                                    493 ;	life.c:34: }
      00001C D0 83            [24]  494 	pop	dph
      00001E D0 82            [24]  495 	pop	dpl
      000020 D0 E0            [24]  496 	pop	acc
      000022 32               [24]  497 	reti
                                    498 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    499 ;	eliminated unneeded push/pop psw
                                    500 ;	eliminated unneeded push/pop b
                                    501 ;------------------------------------------------------------
                                    502 ;Allocation info for local variables in function 'int1'
                                    503 ;------------------------------------------------------------
                                    504 ;	life.c:37: void int1(void) __interrupt 2 __using 1 {
                                    505 ;	-----------------------------------------
                                    506 ;	 function int1
                                    507 ;	-----------------------------------------
      000023                        508 _int1:
      000023 C0 E0            [24]  509 	push	acc
      000025 C0 82            [24]  510 	push	dpl
      000027 C0 83            [24]  511 	push	dph
                                    512 ;	life.c:38: i1 = 1;
      000029 90r00r02         [24]  513 	mov	dptr,#_i1
      00002C 74 01            [12]  514 	mov	a,#0x01
      00002E F0               [24]  515 	movx	@dptr,a
      00002F E4               [12]  516 	clr	a
      000030 A3               [24]  517 	inc	dptr
      000031 F0               [24]  518 	movx	@dptr,a
                                    519 ;	life.c:39: }
      000032 D0 83            [24]  520 	pop	dph
      000034 D0 82            [24]  521 	pop	dpl
      000036 D0 E0            [24]  522 	pop	acc
      000038 32               [24]  523 	reti
                                    524 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    525 ;	eliminated unneeded push/pop psw
                                    526 ;	eliminated unneeded push/pop b
                                    527 ;------------------------------------------------------------
                                    528 ;Allocation info for local variables in function 'cleargen'
                                    529 ;------------------------------------------------------------
                                    530 ;	life.c:41: void cleargen(void) {	
                                    531 ;	-----------------------------------------
                                    532 ;	 function cleargen
                                    533 ;	-----------------------------------------
      000039                        534 _cleargen:
                           000007   535 	ar7 = 0x07
                           000006   536 	ar6 = 0x06
                           000005   537 	ar5 = 0x05
                           000004   538 	ar4 = 0x04
                           000003   539 	ar3 = 0x03
                           000002   540 	ar2 = 0x02
                           000001   541 	ar1 = 0x01
                           000000   542 	ar0 = 0x00
                                    543 ;	life.c:42: for (j = 0; j < 4; j++)
      000039 90r08r16         [24]  544 	mov	dptr,#_j
      00003C E4               [12]  545 	clr	a
      00003D F0               [24]  546 	movx	@dptr,a
      00003E A3               [24]  547 	inc	dptr
      00003F F0               [24]  548 	movx	@dptr,a
      000040                        549 00102$:
                                    550 ;	life.c:43: generation[j] = 0;
      000040 90r08r16         [24]  551 	mov	dptr,#_j
      000043 E0               [24]  552 	movx	a,@dptr
      000044 FE               [12]  553 	mov	r6,a
      000045 A3               [24]  554 	inc	dptr
      000046 E0               [24]  555 	movx	a,@dptr
      000047 FF               [12]  556 	mov	r7,a
      000048 EE               [12]  557 	mov	a,r6
      000049 2E               [12]  558 	add	a,r6
      00004A FE               [12]  559 	mov	r6,a
      00004B EF               [12]  560 	mov	a,r7
      00004C 33               [12]  561 	rlc	a
      00004D FF               [12]  562 	mov	r7,a
      00004E EE               [12]  563 	mov	a,r6
      00004F 24r0E            [12]  564 	add	a,#_generation
      000051 F5 82            [12]  565 	mov	dpl,a
      000053 EF               [12]  566 	mov	a,r7
      000054 34s08            [12]  567 	addc	a,#(_generation >> 8)
      000056 F5 83            [12]  568 	mov	dph,a
      000058 E4               [12]  569 	clr	a
      000059 F0               [24]  570 	movx	@dptr,a
      00005A A3               [24]  571 	inc	dptr
      00005B F0               [24]  572 	movx	@dptr,a
                                    573 ;	life.c:42: for (j = 0; j < 4; j++)
      00005C 90r08r16         [24]  574 	mov	dptr,#_j
      00005F E0               [24]  575 	movx	a,@dptr
      000060 24 01            [12]  576 	add	a,#0x01
      000062 F0               [24]  577 	movx	@dptr,a
      000063 A3               [24]  578 	inc	dptr
      000064 E0               [24]  579 	movx	a,@dptr
      000065 34 00            [12]  580 	addc	a,#0x00
      000067 F0               [24]  581 	movx	@dptr,a
      000068 90r08r16         [24]  582 	mov	dptr,#_j
      00006B E0               [24]  583 	movx	a,@dptr
      00006C FE               [12]  584 	mov	r6,a
      00006D A3               [24]  585 	inc	dptr
      00006E E0               [24]  586 	movx	a,@dptr
      00006F FF               [12]  587 	mov	r7,a
      000070 C3               [12]  588 	clr	c
      000071 EE               [12]  589 	mov	a,r6
      000072 94 04            [12]  590 	subb	a,#0x04
      000074 EF               [12]  591 	mov	a,r7
      000075 64 80            [12]  592 	xrl	a,#0x80
      000077 94 80            [12]  593 	subb	a,#0x80
      000079 40 C5            [24]  594 	jc	00102$
                                    595 ;	life.c:45: return;
                                    596 ;	life.c:46: }
      00007B 22               [24]  597 	ret
                                    598 ;------------------------------------------------------------
                                    599 ;Allocation info for local variables in function 'updategen'
                                    600 ;------------------------------------------------------------
                                    601 ;	life.c:48: void updategen(void) {	
                                    602 ;	-----------------------------------------
                                    603 ;	 function updategen
                                    604 ;	-----------------------------------------
      00007C                        605 _updategen:
                                    606 ;	life.c:49: for (j = 0; j < 4; j++) {
      00007C 90r08r16         [24]  607 	mov	dptr,#_j
      00007F E4               [12]  608 	clr	a
      000080 F0               [24]  609 	movx	@dptr,a
      000081 A3               [24]  610 	inc	dptr
      000082 F0               [24]  611 	movx	@dptr,a
      000083                        612 00104$:
                                    613 ;	life.c:50: generation[j]++;
      000083 90r08r16         [24]  614 	mov	dptr,#_j
      000086 E0               [24]  615 	movx	a,@dptr
      000087 FE               [12]  616 	mov	r6,a
      000088 A3               [24]  617 	inc	dptr
      000089 E0               [24]  618 	movx	a,@dptr
      00008A FF               [12]  619 	mov	r7,a
      00008B EE               [12]  620 	mov	a,r6
      00008C 2E               [12]  621 	add	a,r6
      00008D FE               [12]  622 	mov	r6,a
      00008E EF               [12]  623 	mov	a,r7
      00008F 33               [12]  624 	rlc	a
      000090 FF               [12]  625 	mov	r7,a
      000091 EE               [12]  626 	mov	a,r6
      000092 24r0E            [12]  627 	add	a,#_generation
      000094 FE               [12]  628 	mov	r6,a
      000095 EF               [12]  629 	mov	a,r7
      000096 34s08            [12]  630 	addc	a,#(_generation >> 8)
      000098 FF               [12]  631 	mov	r7,a
      000099 8E 82            [24]  632 	mov	dpl,r6
      00009B 8F 83            [24]  633 	mov	dph,r7
      00009D E0               [24]  634 	movx	a,@dptr
      00009E FC               [12]  635 	mov	r4,a
      00009F A3               [24]  636 	inc	dptr
      0000A0 E0               [24]  637 	movx	a,@dptr
      0000A1 FD               [12]  638 	mov	r5,a
      0000A2 0C               [12]  639 	inc	r4
      0000A3 BC 00 01         [24]  640 	cjne	r4,#0x00,00116$
      0000A6 0D               [12]  641 	inc	r5
      0000A7                        642 00116$:
      0000A7 8E 82            [24]  643 	mov	dpl,r6
      0000A9 8F 83            [24]  644 	mov	dph,r7
      0000AB EC               [12]  645 	mov	a,r4
      0000AC F0               [24]  646 	movx	@dptr,a
      0000AD ED               [12]  647 	mov	a,r5
      0000AE A3               [24]  648 	inc	dptr
      0000AF F0               [24]  649 	movx	@dptr,a
                                    650 ;	life.c:51: if (generation[j]) break;
      0000B0 90r08r16         [24]  651 	mov	dptr,#_j
      0000B3 E0               [24]  652 	movx	a,@dptr
      0000B4 FE               [12]  653 	mov	r6,a
      0000B5 A3               [24]  654 	inc	dptr
      0000B6 E0               [24]  655 	movx	a,@dptr
      0000B7 FF               [12]  656 	mov	r7,a
      0000B8 EE               [12]  657 	mov	a,r6
      0000B9 2E               [12]  658 	add	a,r6
      0000BA FC               [12]  659 	mov	r4,a
      0000BB EF               [12]  660 	mov	a,r7
      0000BC 33               [12]  661 	rlc	a
      0000BD FD               [12]  662 	mov	r5,a
      0000BE EC               [12]  663 	mov	a,r4
      0000BF 24r0E            [12]  664 	add	a,#_generation
      0000C1 F5 82            [12]  665 	mov	dpl,a
      0000C3 ED               [12]  666 	mov	a,r5
      0000C4 34s08            [12]  667 	addc	a,#(_generation >> 8)
      0000C6 F5 83            [12]  668 	mov	dph,a
      0000C8 E0               [24]  669 	movx	a,@dptr
      0000C9 FC               [12]  670 	mov	r4,a
      0000CA A3               [24]  671 	inc	dptr
      0000CB E0               [24]  672 	movx	a,@dptr
      0000CC 4C               [12]  673 	orl	a,r4
      0000CD 70 1E            [24]  674 	jnz	00103$
                                    675 ;	life.c:49: for (j = 0; j < 4; j++) {
      0000CF 90r08r16         [24]  676 	mov	dptr,#_j
      0000D2 74 01            [12]  677 	mov	a,#0x01
      0000D4 2E               [12]  678 	add	a,r6
      0000D5 F0               [24]  679 	movx	@dptr,a
      0000D6 E4               [12]  680 	clr	a
      0000D7 3F               [12]  681 	addc	a,r7
      0000D8 A3               [24]  682 	inc	dptr
      0000D9 F0               [24]  683 	movx	@dptr,a
      0000DA 90r08r16         [24]  684 	mov	dptr,#_j
      0000DD E0               [24]  685 	movx	a,@dptr
      0000DE FE               [12]  686 	mov	r6,a
      0000DF A3               [24]  687 	inc	dptr
      0000E0 E0               [24]  688 	movx	a,@dptr
      0000E1 FF               [12]  689 	mov	r7,a
      0000E2 C3               [12]  690 	clr	c
      0000E3 EE               [12]  691 	mov	a,r6
      0000E4 94 04            [12]  692 	subb	a,#0x04
      0000E6 EF               [12]  693 	mov	a,r7
      0000E7 64 80            [12]  694 	xrl	a,#0x80
      0000E9 94 80            [12]  695 	subb	a,#0x80
      0000EB 40 96            [24]  696 	jc	00104$
      0000ED                        697 00103$:
                                    698 ;	life.c:54: return;
                                    699 ;	life.c:55: }
      0000ED 22               [24]  700 	ret
                                    701 ;------------------------------------------------------------
                                    702 ;Allocation info for local variables in function 'printgen'
                                    703 ;------------------------------------------------------------
                                    704 ;	life.c:57: void printgen(void) {
                                    705 ;	-----------------------------------------
                                    706 ;	 function printgen
                                    707 ;	-----------------------------------------
      0000EE                        708 _printgen:
                                    709 ;	life.c:58: for (j = 0; j < 4; j++) {
      0000EE 90r08r16         [24]  710 	mov	dptr,#_j
      0000F1 E4               [12]  711 	clr	a
      0000F2 F0               [24]  712 	movx	@dptr,a
      0000F3 A3               [24]  713 	inc	dptr
      0000F4 F0               [24]  714 	movx	@dptr,a
      0000F5                        715 00104$:
                                    716 ;	life.c:59: printf("%04x", generation[3 - j]);
      0000F5 90r08r16         [24]  717 	mov	dptr,#_j
      0000F8 E0               [24]  718 	movx	a,@dptr
      0000F9 FE               [12]  719 	mov	r6,a
      0000FA A3               [24]  720 	inc	dptr
      0000FB E0               [24]  721 	movx	a,@dptr
      0000FC 74 03            [12]  722 	mov	a,#0x03
      0000FE C3               [12]  723 	clr	c
      0000FF 9E               [12]  724 	subb	a,r6
      000100 FE               [12]  725 	mov	r6,a
      000101 C2 D5            [12]  726 	clr	F0
      000103 75 F0 02         [24]  727 	mov	b,#0x02
      000106 EE               [12]  728 	mov	a,r6
      000107 30 E7 04         [24]  729 	jnb	acc.7,00116$
      00010A B2 D5            [12]  730 	cpl	F0
      00010C F4               [12]  731 	cpl	a
      00010D 04               [12]  732 	inc	a
      00010E                        733 00116$:
      00010E A4               [48]  734 	mul	ab
      00010F 30 D5 0A         [24]  735 	jnb	F0,00117$
      000112 F4               [12]  736 	cpl	a
      000113 24 01            [12]  737 	add	a,#0x01
      000115 C5 F0            [12]  738 	xch	a,b
      000117 F4               [12]  739 	cpl	a
      000118 34 00            [12]  740 	addc	a,#0x00
      00011A C5 F0            [12]  741 	xch	a,b
      00011C                        742 00117$:
      00011C 24r0E            [12]  743 	add	a,#_generation
      00011E F5 82            [12]  744 	mov	dpl,a
      000120 74s08            [12]  745 	mov	a,#(_generation >> 8)
      000122 35 F0            [12]  746 	addc	a,b
      000124 F5 83            [12]  747 	mov	dph,a
      000126 E0               [24]  748 	movx	a,@dptr
      000127 FE               [12]  749 	mov	r6,a
      000128 A3               [24]  750 	inc	dptr
      000129 E0               [24]  751 	movx	a,@dptr
      00012A FF               [12]  752 	mov	r7,a
      00012B C0 06            [24]  753 	push	ar6
      00012D C0 07            [24]  754 	push	ar7
      00012F 74r00            [12]  755 	mov	a,#___str_0
      000131 C0 E0            [24]  756 	push	acc
      000133 74s00            [12]  757 	mov	a,#(___str_0 >> 8)
      000135 C0 E0            [24]  758 	push	acc
      000137 74 80            [12]  759 	mov	a,#0x80
      000139 C0 E0            [24]  760 	push	acc
      00013B 12r00r00         [24]  761 	lcall	_printf
      00013E E5 81            [12]  762 	mov	a,sp
      000140 24 FB            [12]  763 	add	a,#0xfb
      000142 F5 81            [12]  764 	mov	sp,a
                                    765 ;	life.c:60: if (j < 3) putchar(' ');
      000144 90r08r16         [24]  766 	mov	dptr,#_j
      000147 E0               [24]  767 	movx	a,@dptr
      000148 FE               [12]  768 	mov	r6,a
      000149 A3               [24]  769 	inc	dptr
      00014A E0               [24]  770 	movx	a,@dptr
      00014B FF               [12]  771 	mov	r7,a
      00014C C3               [12]  772 	clr	c
      00014D EE               [12]  773 	mov	a,r6
      00014E 94 03            [12]  774 	subb	a,#0x03
      000150 EF               [12]  775 	mov	a,r7
      000151 64 80            [12]  776 	xrl	a,#0x80
      000153 94 80            [12]  777 	subb	a,#0x80
      000155 50 06            [24]  778 	jnc	00105$
      000157 90 00 20         [24]  779 	mov	dptr,#0x0020
      00015A 12r00r00         [24]  780 	lcall	_putchar
      00015D                        781 00105$:
                                    782 ;	life.c:58: for (j = 0; j < 4; j++) {
      00015D 90r08r16         [24]  783 	mov	dptr,#_j
      000160 E0               [24]  784 	movx	a,@dptr
      000161 24 01            [12]  785 	add	a,#0x01
      000163 F0               [24]  786 	movx	@dptr,a
      000164 A3               [24]  787 	inc	dptr
      000165 E0               [24]  788 	movx	a,@dptr
      000166 34 00            [12]  789 	addc	a,#0x00
      000168 F0               [24]  790 	movx	@dptr,a
      000169 90r08r16         [24]  791 	mov	dptr,#_j
      00016C E0               [24]  792 	movx	a,@dptr
      00016D FE               [12]  793 	mov	r6,a
      00016E A3               [24]  794 	inc	dptr
      00016F E0               [24]  795 	movx	a,@dptr
      000170 FF               [12]  796 	mov	r7,a
      000171 C3               [12]  797 	clr	c
      000172 EE               [12]  798 	mov	a,r6
      000173 94 04            [12]  799 	subb	a,#0x04
      000175 EF               [12]  800 	mov	a,r7
      000176 64 80            [12]  801 	xrl	a,#0x80
      000178 94 80            [12]  802 	subb	a,#0x80
      00017A 50 03            [24]  803 	jnc	00119$
      00017C 02r00rF5         [24]  804 	ljmp	00104$
      00017F                        805 00119$:
                                    806 ;	life.c:62: }
      00017F 22               [24]  807 	ret
                                    808 ;------------------------------------------------------------
                                    809 ;Allocation info for local variables in function 'show'
                                    810 ;------------------------------------------------------------
                                    811 ;	life.c:64: void show(void) {
                                    812 ;	-----------------------------------------
                                    813 ;	 function show
                                    814 ;	-----------------------------------------
      000180                        815 _show:
                                    816 ;	life.c:65: printf("\033[2J\033[m");
      000180 74r05            [12]  817 	mov	a,#___str_1
      000182 C0 E0            [24]  818 	push	acc
      000184 74s00            [12]  819 	mov	a,#(___str_1 >> 8)
      000186 C0 E0            [24]  820 	push	acc
      000188 74 80            [12]  821 	mov	a,#0x80
      00018A C0 E0            [24]  822 	push	acc
      00018C 12r00r00         [24]  823 	lcall	_printf
      00018F 15 81            [12]  824 	dec	sp
      000191 15 81            [12]  825 	dec	sp
      000193 15 81            [12]  826 	dec	sp
                                    827 ;	life.c:66: printgen();
      000195 12r00rEE         [24]  828 	lcall	_printgen
                                    829 ;	life.c:67: printf("\r\n");
      000198 74r0D            [12]  830 	mov	a,#___str_2
      00019A C0 E0            [24]  831 	push	acc
      00019C 74s00            [12]  832 	mov	a,#(___str_2 >> 8)
      00019E C0 E0            [24]  833 	push	acc
      0001A0 74 80            [12]  834 	mov	a,#0x80
      0001A2 C0 E0            [24]  835 	push	acc
      0001A4 12r00r00         [24]  836 	lcall	_printf
      0001A7 15 81            [12]  837 	dec	sp
      0001A9 15 81            [12]  838 	dec	sp
      0001AB 15 81            [12]  839 	dec	sp
                                    840 ;	life.c:68: updategen();
      0001AD 12r00r7C         [24]  841 	lcall	_updategen
                                    842 ;	life.c:70: for (y = 0; y < H; y++) {
      0001B0 90r08r06         [24]  843 	mov	dptr,#_y
      0001B3 E4               [12]  844 	clr	a
      0001B4 F0               [24]  845 	movx	@dptr,a
      0001B5 A3               [24]  846 	inc	dptr
      0001B6 F0               [24]  847 	movx	@dptr,a
      0001B7                        848 00108$:
                                    849 ;	life.c:71: for (x = 0; x < W; x++)
      0001B7 90r08r04         [24]  850 	mov	dptr,#_x
      0001BA E4               [12]  851 	clr	a
      0001BB F0               [24]  852 	movx	@dptr,a
      0001BC A3               [24]  853 	inc	dptr
      0001BD F0               [24]  854 	movx	@dptr,a
      0001BE                        855 00106$:
                                    856 ;	life.c:72: if (u[y][x]) printf("\033[01m[]\033[m");
      0001BE 90r08r06         [24]  857 	mov	dptr,#_y
      0001C1 E0               [24]  858 	movx	a,@dptr
      0001C2 FE               [12]  859 	mov	r6,a
      0001C3 A3               [24]  860 	inc	dptr
      0001C4 E0               [24]  861 	movx	a,@dptr
      0001C5 C4               [12]  862 	swap	a
      0001C6 23               [12]  863 	rl	a
      0001C7 54 E0            [12]  864 	anl	a,#0xe0
      0001C9 CE               [12]  865 	xch	a,r6
      0001CA C4               [12]  866 	swap	a
      0001CB 23               [12]  867 	rl	a
      0001CC CE               [12]  868 	xch	a,r6
      0001CD 6E               [12]  869 	xrl	a,r6
      0001CE CE               [12]  870 	xch	a,r6
      0001CF 54 E0            [12]  871 	anl	a,#0xe0
      0001D1 CE               [12]  872 	xch	a,r6
      0001D2 6E               [12]  873 	xrl	a,r6
      0001D3 FF               [12]  874 	mov	r7,a
      0001D4 EE               [12]  875 	mov	a,r6
      0001D5 24r04            [12]  876 	add	a,#_u
      0001D7 FE               [12]  877 	mov	r6,a
      0001D8 EF               [12]  878 	mov	a,r7
      0001D9 34s00            [12]  879 	addc	a,#(_u >> 8)
      0001DB FF               [12]  880 	mov	r7,a
      0001DC 90r08r04         [24]  881 	mov	dptr,#_x
      0001DF E0               [24]  882 	movx	a,@dptr
      0001E0 FC               [12]  883 	mov	r4,a
      0001E1 A3               [24]  884 	inc	dptr
      0001E2 E0               [24]  885 	movx	a,@dptr
      0001E3 FD               [12]  886 	mov	r5,a
      0001E4 EC               [12]  887 	mov	a,r4
      0001E5 2E               [12]  888 	add	a,r6
      0001E6 FE               [12]  889 	mov	r6,a
      0001E7 ED               [12]  890 	mov	a,r5
      0001E8 3F               [12]  891 	addc	a,r7
      0001E9 FF               [12]  892 	mov	r7,a
      0001EA 8E 82            [24]  893 	mov	dpl,r6
      0001EC 8F 83            [24]  894 	mov	dph,r7
      0001EE E0               [24]  895 	movx	a,@dptr
      0001EF 60 17            [24]  896 	jz	00102$
      0001F1 74r10            [12]  897 	mov	a,#___str_3
      0001F3 C0 E0            [24]  898 	push	acc
      0001F5 74s00            [12]  899 	mov	a,#(___str_3 >> 8)
      0001F7 C0 E0            [24]  900 	push	acc
      0001F9 74 80            [12]  901 	mov	a,#0x80
      0001FB C0 E0            [24]  902 	push	acc
      0001FD 12r00r00         [24]  903 	lcall	_printf
      000200 15 81            [12]  904 	dec	sp
      000202 15 81            [12]  905 	dec	sp
      000204 15 81            [12]  906 	dec	sp
      000206 80 15            [24]  907 	sjmp	00107$
      000208                        908 00102$:
                                    909 ;	life.c:73: else printf("--");
      000208 74r1B            [12]  910 	mov	a,#___str_4
      00020A C0 E0            [24]  911 	push	acc
      00020C 74s00            [12]  912 	mov	a,#(___str_4 >> 8)
      00020E C0 E0            [24]  913 	push	acc
      000210 74 80            [12]  914 	mov	a,#0x80
      000212 C0 E0            [24]  915 	push	acc
      000214 12r00r00         [24]  916 	lcall	_printf
      000217 15 81            [12]  917 	dec	sp
      000219 15 81            [12]  918 	dec	sp
      00021B 15 81            [12]  919 	dec	sp
      00021D                        920 00107$:
                                    921 ;	life.c:71: for (x = 0; x < W; x++)
      00021D 90r08r04         [24]  922 	mov	dptr,#_x
      000220 E0               [24]  923 	movx	a,@dptr
      000221 24 01            [12]  924 	add	a,#0x01
      000223 F0               [24]  925 	movx	@dptr,a
      000224 A3               [24]  926 	inc	dptr
      000225 E0               [24]  927 	movx	a,@dptr
      000226 34 00            [12]  928 	addc	a,#0x00
      000228 F0               [24]  929 	movx	@dptr,a
      000229 90r08r04         [24]  930 	mov	dptr,#_x
      00022C E0               [24]  931 	movx	a,@dptr
      00022D FE               [12]  932 	mov	r6,a
      00022E A3               [24]  933 	inc	dptr
      00022F E0               [24]  934 	movx	a,@dptr
      000230 FF               [12]  935 	mov	r7,a
      000231 C3               [12]  936 	clr	c
      000232 EE               [12]  937 	mov	a,r6
      000233 94 20            [12]  938 	subb	a,#0x20
      000235 EF               [12]  939 	mov	a,r7
      000236 64 80            [12]  940 	xrl	a,#0x80
      000238 94 80            [12]  941 	subb	a,#0x80
      00023A 50 03            [24]  942 	jnc	00133$
      00023C 02r01rBE         [24]  943 	ljmp	00106$
      00023F                        944 00133$:
                                    945 ;	life.c:74: printf("\r\n");
      00023F 74r0D            [12]  946 	mov	a,#___str_2
      000241 C0 E0            [24]  947 	push	acc
      000243 74s00            [12]  948 	mov	a,#(___str_2 >> 8)
      000245 C0 E0            [24]  949 	push	acc
      000247 74 80            [12]  950 	mov	a,#0x80
      000249 C0 E0            [24]  951 	push	acc
      00024B 12r00r00         [24]  952 	lcall	_printf
      00024E 15 81            [12]  953 	dec	sp
      000250 15 81            [12]  954 	dec	sp
      000252 15 81            [12]  955 	dec	sp
                                    956 ;	life.c:70: for (y = 0; y < H; y++) {
      000254 90r08r06         [24]  957 	mov	dptr,#_y
      000257 E0               [24]  958 	movx	a,@dptr
      000258 24 01            [12]  959 	add	a,#0x01
      00025A F0               [24]  960 	movx	@dptr,a
      00025B A3               [24]  961 	inc	dptr
      00025C E0               [24]  962 	movx	a,@dptr
      00025D 34 00            [12]  963 	addc	a,#0x00
      00025F F0               [24]  964 	movx	@dptr,a
      000260 90r08r06         [24]  965 	mov	dptr,#_y
      000263 E0               [24]  966 	movx	a,@dptr
      000264 FE               [12]  967 	mov	r6,a
      000265 A3               [24]  968 	inc	dptr
      000266 E0               [24]  969 	movx	a,@dptr
      000267 FF               [12]  970 	mov	r7,a
      000268 C3               [12]  971 	clr	c
      000269 EE               [12]  972 	mov	a,r6
      00026A 94 20            [12]  973 	subb	a,#0x20
      00026C EF               [12]  974 	mov	a,r7
      00026D 64 80            [12]  975 	xrl	a,#0x80
      00026F 94 80            [12]  976 	subb	a,#0x80
      000271 50 03            [24]  977 	jnc	00134$
      000273 02r01rB7         [24]  978 	ljmp	00108$
      000276                        979 00134$:
                                    980 ;	life.c:77: return;
                                    981 ;	life.c:78: }
      000276 22               [24]  982 	ret
                                    983 ;------------------------------------------------------------
                                    984 ;Allocation info for local variables in function 'evolve'
                                    985 ;------------------------------------------------------------
                                    986 ;	life.c:80: void evolve(void) {
                                    987 ;	-----------------------------------------
                                    988 ;	 function evolve
                                    989 ;	-----------------------------------------
      000277                        990 _evolve:
                                    991 ;	life.c:81: fixed = 1;
      000277 90r08r18         [24]  992 	mov	dptr,#_fixed
      00027A 74 01            [12]  993 	mov	a,#0x01
      00027C F0               [24]  994 	movx	@dptr,a
      00027D E4               [12]  995 	clr	a
      00027E A3               [24]  996 	inc	dptr
      00027F F0               [24]  997 	movx	@dptr,a
                                    998 ;	life.c:83: for (y = 0; y < H; y++) {
      000280 90r08r06         [24]  999 	mov	dptr,#_y
      000283 F0               [24] 1000 	movx	@dptr,a
      000284 A3               [24] 1001 	inc	dptr
      000285 F0               [24] 1002 	movx	@dptr,a
      000286                       1003 00121$:
                                   1004 ;	life.c:84: for (x = 0; x < W; x++) {
      000286 90r08r04         [24] 1005 	mov	dptr,#_x
      000289 E4               [12] 1006 	clr	a
      00028A F0               [24] 1007 	movx	@dptr,a
      00028B A3               [24] 1008 	inc	dptr
      00028C F0               [24] 1009 	movx	@dptr,a
      00028D                       1010 00119$:
                                   1011 ;	life.c:85: n = 0;
      00028D 90r08r0C         [24] 1012 	mov	dptr,#_n
      000290 E4               [12] 1013 	clr	a
      000291 F0               [24] 1014 	movx	@dptr,a
      000292 A3               [24] 1015 	inc	dptr
      000293 F0               [24] 1016 	movx	@dptr,a
                                   1017 ;	life.c:86: for (y1 = y - 1; y1 <= y + 1; y1++)
      000294 90r08r06         [24] 1018 	mov	dptr,#_y
      000297 E0               [24] 1019 	movx	a,@dptr
      000298 FE               [12] 1020 	mov	r6,a
      000299 A3               [24] 1021 	inc	dptr
      00029A E0               [24] 1022 	movx	a,@dptr
      00029B FF               [12] 1023 	mov	r7,a
      00029C 1E               [12] 1024 	dec	r6
      00029D BE FF 01         [24] 1025 	cjne	r6,#0xff,00203$
      0002A0 1F               [12] 1026 	dec	r7
      0002A1                       1027 00203$:
      0002A1 90r08r0A         [24] 1028 	mov	dptr,#_y1
      0002A4 EE               [12] 1029 	mov	a,r6
      0002A5 F0               [24] 1030 	movx	@dptr,a
      0002A6 EF               [12] 1031 	mov	a,r7
      0002A7 A3               [24] 1032 	inc	dptr
      0002A8 F0               [24] 1033 	movx	@dptr,a
      0002A9                       1034 00117$:
      0002A9 90r08r06         [24] 1035 	mov	dptr,#_y
      0002AC E0               [24] 1036 	movx	a,@dptr
      0002AD FE               [12] 1037 	mov	r6,a
      0002AE A3               [24] 1038 	inc	dptr
      0002AF E0               [24] 1039 	movx	a,@dptr
      0002B0 FF               [12] 1040 	mov	r7,a
      0002B1 74 01            [12] 1041 	mov	a,#0x01
      0002B3 2E               [12] 1042 	add	a,r6
      0002B4 FC               [12] 1043 	mov	r4,a
      0002B5 E4               [12] 1044 	clr	a
      0002B6 3F               [12] 1045 	addc	a,r7
      0002B7 FD               [12] 1046 	mov	r5,a
      0002B8 90r08r0A         [24] 1047 	mov	dptr,#_y1
      0002BB E0               [24] 1048 	movx	a,@dptr
      0002BC FA               [12] 1049 	mov	r2,a
      0002BD A3               [24] 1050 	inc	dptr
      0002BE E0               [24] 1051 	movx	a,@dptr
      0002BF FB               [12] 1052 	mov	r3,a
      0002C0 C3               [12] 1053 	clr	c
      0002C1 EC               [12] 1054 	mov	a,r4
      0002C2 9A               [12] 1055 	subb	a,r2
      0002C3 ED               [12] 1056 	mov	a,r5
      0002C4 64 80            [12] 1057 	xrl	a,#0x80
      0002C6 8B F0            [24] 1058 	mov	b,r3
      0002C8 63 F0 80         [24] 1059 	xrl	b,#0x80
      0002CB 95 F0            [12] 1060 	subb	a,b
      0002CD 50 03            [24] 1061 	jnc	00204$
      0002CF 02r03rAF         [24] 1062 	ljmp	00104$
      0002D2                       1063 00204$:
                                   1064 ;	life.c:87: for (x1 = x - 1; x1 <= x + 1; x1++)
      0002D2 90r08r04         [24] 1065 	mov	dptr,#_x
      0002D5 E0               [24] 1066 	movx	a,@dptr
      0002D6 FC               [12] 1067 	mov	r4,a
      0002D7 A3               [24] 1068 	inc	dptr
      0002D8 E0               [24] 1069 	movx	a,@dptr
      0002D9 FD               [12] 1070 	mov	r5,a
      0002DA 1C               [12] 1071 	dec	r4
      0002DB BC FF 01         [24] 1072 	cjne	r4,#0xff,00205$
      0002DE 1D               [12] 1073 	dec	r5
      0002DF                       1074 00205$:
      0002DF 90r08r08         [24] 1075 	mov	dptr,#_x1
      0002E2 EC               [12] 1076 	mov	a,r4
      0002E3 F0               [24] 1077 	movx	@dptr,a
      0002E4 ED               [12] 1078 	mov	a,r5
      0002E5 A3               [24] 1079 	inc	dptr
      0002E6 F0               [24] 1080 	movx	@dptr,a
      0002E7                       1081 00114$:
      0002E7 90r08r04         [24] 1082 	mov	dptr,#_x
      0002EA E0               [24] 1083 	movx	a,@dptr
      0002EB FC               [12] 1084 	mov	r4,a
      0002EC A3               [24] 1085 	inc	dptr
      0002ED E0               [24] 1086 	movx	a,@dptr
      0002EE FD               [12] 1087 	mov	r5,a
      0002EF 0C               [12] 1088 	inc	r4
      0002F0 BC 00 01         [24] 1089 	cjne	r4,#0x00,00206$
      0002F3 0D               [12] 1090 	inc	r5
      0002F4                       1091 00206$:
      0002F4 90r08r08         [24] 1092 	mov	dptr,#_x1
      0002F7 E0               [24] 1093 	movx	a,@dptr
      0002F8 FA               [12] 1094 	mov	r2,a
      0002F9 A3               [24] 1095 	inc	dptr
      0002FA E0               [24] 1096 	movx	a,@dptr
      0002FB FB               [12] 1097 	mov	r3,a
      0002FC C3               [12] 1098 	clr	c
      0002FD EC               [12] 1099 	mov	a,r4
      0002FE 9A               [12] 1100 	subb	a,r2
      0002FF ED               [12] 1101 	mov	a,r5
      000300 64 80            [12] 1102 	xrl	a,#0x80
      000302 8B F0            [24] 1103 	mov	b,r3
      000304 63 F0 80         [24] 1104 	xrl	b,#0x80
      000307 95 F0            [12] 1105 	subb	a,b
      000309 50 03            [24] 1106 	jnc	00207$
      00030B 02r03rA0         [24] 1107 	ljmp	00118$
      00030E                       1108 00207$:
                                   1109 ;	life.c:88: if (u[(y1 + H) % H][(x1 + W) % W])
      00030E 90r08r0A         [24] 1110 	mov	dptr,#_y1
      000311 E0               [24] 1111 	movx	a,@dptr
      000312 FC               [12] 1112 	mov	r4,a
      000313 A3               [24] 1113 	inc	dptr
      000314 E0               [24] 1114 	movx	a,@dptr
      000315 FD               [12] 1115 	mov	r5,a
      000316 74 20            [12] 1116 	mov	a,#0x20
      000318 2C               [12] 1117 	add	a,r4
      000319 FC               [12] 1118 	mov	r4,a
      00031A E4               [12] 1119 	clr	a
      00031B 3D               [12] 1120 	addc	a,r5
      00031C FD               [12] 1121 	mov	r5,a
      00031D C0 03            [24] 1122 	push	ar3
      00031F C0 02            [24] 1123 	push	ar2
      000321 74 20            [12] 1124 	mov	a,#0x20
      000323 C0 E0            [24] 1125 	push	acc
      000325 E4               [12] 1126 	clr	a
      000326 C0 E0            [24] 1127 	push	acc
      000328 8C 82            [24] 1128 	mov	dpl,r4
      00032A 8D 83            [24] 1129 	mov	dph,r5
      00032C 12r00r00         [24] 1130 	lcall	__modsint
      00032F AC 82            [24] 1131 	mov	r4,dpl
      000331 AD 83            [24] 1132 	mov	r5,dph
      000333 15 81            [12] 1133 	dec	sp
      000335 15 81            [12] 1134 	dec	sp
      000337 D0 02            [24] 1135 	pop	ar2
      000339 D0 03            [24] 1136 	pop	ar3
      00033B ED               [12] 1137 	mov	a,r5
      00033C C4               [12] 1138 	swap	a
      00033D 23               [12] 1139 	rl	a
      00033E 54 E0            [12] 1140 	anl	a,#0xe0
      000340 CC               [12] 1141 	xch	a,r4
      000341 C4               [12] 1142 	swap	a
      000342 23               [12] 1143 	rl	a
      000343 CC               [12] 1144 	xch	a,r4
      000344 6C               [12] 1145 	xrl	a,r4
      000345 CC               [12] 1146 	xch	a,r4
      000346 54 E0            [12] 1147 	anl	a,#0xe0
      000348 CC               [12] 1148 	xch	a,r4
      000349 6C               [12] 1149 	xrl	a,r4
      00034A FD               [12] 1150 	mov	r5,a
      00034B EC               [12] 1151 	mov	a,r4
      00034C 24r04            [12] 1152 	add	a,#_u
      00034E FC               [12] 1153 	mov	r4,a
      00034F ED               [12] 1154 	mov	a,r5
      000350 34s00            [12] 1155 	addc	a,#(_u >> 8)
      000352 FD               [12] 1156 	mov	r5,a
      000353 74 20            [12] 1157 	mov	a,#0x20
      000355 2A               [12] 1158 	add	a,r2
      000356 FA               [12] 1159 	mov	r2,a
      000357 E4               [12] 1160 	clr	a
      000358 3B               [12] 1161 	addc	a,r3
      000359 FB               [12] 1162 	mov	r3,a
      00035A C0 05            [24] 1163 	push	ar5
      00035C C0 04            [24] 1164 	push	ar4
      00035E 74 20            [12] 1165 	mov	a,#0x20
      000360 C0 E0            [24] 1166 	push	acc
      000362 E4               [12] 1167 	clr	a
      000363 C0 E0            [24] 1168 	push	acc
      000365 8A 82            [24] 1169 	mov	dpl,r2
      000367 8B 83            [24] 1170 	mov	dph,r3
      000369 12r00r00         [24] 1171 	lcall	__modsint
      00036C AA 82            [24] 1172 	mov	r2,dpl
      00036E AB 83            [24] 1173 	mov	r3,dph
      000370 15 81            [12] 1174 	dec	sp
      000372 15 81            [12] 1175 	dec	sp
      000374 D0 04            [24] 1176 	pop	ar4
      000376 D0 05            [24] 1177 	pop	ar5
      000378 EA               [12] 1178 	mov	a,r2
      000379 2C               [12] 1179 	add	a,r4
      00037A FC               [12] 1180 	mov	r4,a
      00037B EB               [12] 1181 	mov	a,r3
      00037C 3D               [12] 1182 	addc	a,r5
      00037D FD               [12] 1183 	mov	r5,a
      00037E 8C 82            [24] 1184 	mov	dpl,r4
      000380 8D 83            [24] 1185 	mov	dph,r5
      000382 E0               [24] 1186 	movx	a,@dptr
      000383 60 0C            [24] 1187 	jz	00115$
                                   1188 ;	life.c:89: n++;
      000385 90r08r0C         [24] 1189 	mov	dptr,#_n
      000388 E0               [24] 1190 	movx	a,@dptr
      000389 24 01            [12] 1191 	add	a,#0x01
      00038B F0               [24] 1192 	movx	@dptr,a
      00038C A3               [24] 1193 	inc	dptr
      00038D E0               [24] 1194 	movx	a,@dptr
      00038E 34 00            [12] 1195 	addc	a,#0x00
      000390 F0               [24] 1196 	movx	@dptr,a
      000391                       1197 00115$:
                                   1198 ;	life.c:87: for (x1 = x - 1; x1 <= x + 1; x1++)
      000391 90r08r08         [24] 1199 	mov	dptr,#_x1
      000394 E0               [24] 1200 	movx	a,@dptr
      000395 24 01            [12] 1201 	add	a,#0x01
      000397 F0               [24] 1202 	movx	@dptr,a
      000398 A3               [24] 1203 	inc	dptr
      000399 E0               [24] 1204 	movx	a,@dptr
      00039A 34 00            [12] 1205 	addc	a,#0x00
      00039C F0               [24] 1206 	movx	@dptr,a
      00039D 02r02rE7         [24] 1207 	ljmp	00114$
      0003A0                       1208 00118$:
                                   1209 ;	life.c:86: for (y1 = y - 1; y1 <= y + 1; y1++)
      0003A0 90r08r0A         [24] 1210 	mov	dptr,#_y1
      0003A3 E0               [24] 1211 	movx	a,@dptr
      0003A4 24 01            [12] 1212 	add	a,#0x01
      0003A6 F0               [24] 1213 	movx	@dptr,a
      0003A7 A3               [24] 1214 	inc	dptr
      0003A8 E0               [24] 1215 	movx	a,@dptr
      0003A9 34 00            [12] 1216 	addc	a,#0x00
      0003AB F0               [24] 1217 	movx	@dptr,a
      0003AC 02r02rA9         [24] 1218 	ljmp	00117$
      0003AF                       1219 00104$:
                                   1220 ;	life.c:91: if (u[y][x]) n--;
      0003AF EF               [12] 1221 	mov	a,r7
      0003B0 C4               [12] 1222 	swap	a
      0003B1 23               [12] 1223 	rl	a
      0003B2 54 E0            [12] 1224 	anl	a,#0xe0
      0003B4 CE               [12] 1225 	xch	a,r6
      0003B5 C4               [12] 1226 	swap	a
      0003B6 23               [12] 1227 	rl	a
      0003B7 CE               [12] 1228 	xch	a,r6
      0003B8 6E               [12] 1229 	xrl	a,r6
      0003B9 CE               [12] 1230 	xch	a,r6
      0003BA 54 E0            [12] 1231 	anl	a,#0xe0
      0003BC CE               [12] 1232 	xch	a,r6
      0003BD 6E               [12] 1233 	xrl	a,r6
      0003BE FF               [12] 1234 	mov	r7,a
      0003BF EE               [12] 1235 	mov	a,r6
      0003C0 24r04            [12] 1236 	add	a,#_u
      0003C2 FE               [12] 1237 	mov	r6,a
      0003C3 EF               [12] 1238 	mov	a,r7
      0003C4 34s00            [12] 1239 	addc	a,#(_u >> 8)
      0003C6 FF               [12] 1240 	mov	r7,a
      0003C7 90r08r04         [24] 1241 	mov	dptr,#_x
      0003CA E0               [24] 1242 	movx	a,@dptr
      0003CB FC               [12] 1243 	mov	r4,a
      0003CC A3               [24] 1244 	inc	dptr
      0003CD E0               [24] 1245 	movx	a,@dptr
      0003CE FD               [12] 1246 	mov	r5,a
      0003CF EC               [12] 1247 	mov	a,r4
      0003D0 2E               [12] 1248 	add	a,r6
      0003D1 FE               [12] 1249 	mov	r6,a
      0003D2 ED               [12] 1250 	mov	a,r5
      0003D3 3F               [12] 1251 	addc	a,r7
      0003D4 FF               [12] 1252 	mov	r7,a
      0003D5 8E 82            [24] 1253 	mov	dpl,r6
      0003D7 8F 83            [24] 1254 	mov	dph,r7
      0003D9 E0               [24] 1255 	movx	a,@dptr
      0003DA 60 14            [24] 1256 	jz	00106$
      0003DC 90r08r0C         [24] 1257 	mov	dptr,#_n
      0003DF E0               [24] 1258 	movx	a,@dptr
      0003E0 24 FF            [12] 1259 	add	a,#0xff
      0003E2 FE               [12] 1260 	mov	r6,a
      0003E3 A3               [24] 1261 	inc	dptr
      0003E4 E0               [24] 1262 	movx	a,@dptr
      0003E5 34 FF            [12] 1263 	addc	a,#0xff
      0003E7 FF               [12] 1264 	mov	r7,a
      0003E8 90r08r0C         [24] 1265 	mov	dptr,#_n
      0003EB EE               [12] 1266 	mov	a,r6
      0003EC F0               [24] 1267 	movx	@dptr,a
      0003ED EF               [12] 1268 	mov	a,r7
      0003EE A3               [24] 1269 	inc	dptr
      0003EF F0               [24] 1270 	movx	@dptr,a
      0003F0                       1271 00106$:
                                   1272 ;	life.c:92: nu[y][x] = (n == 3 || (n == 2 && u[y][x]));
      0003F0 90r08r06         [24] 1273 	mov	dptr,#_y
      0003F3 E0               [24] 1274 	movx	a,@dptr
      0003F4 FE               [12] 1275 	mov	r6,a
      0003F5 A3               [24] 1276 	inc	dptr
      0003F6 E0               [24] 1277 	movx	a,@dptr
      0003F7 C4               [12] 1278 	swap	a
      0003F8 23               [12] 1279 	rl	a
      0003F9 54 E0            [12] 1280 	anl	a,#0xe0
      0003FB CE               [12] 1281 	xch	a,r6
      0003FC C4               [12] 1282 	swap	a
      0003FD 23               [12] 1283 	rl	a
      0003FE CE               [12] 1284 	xch	a,r6
      0003FF 6E               [12] 1285 	xrl	a,r6
      000400 CE               [12] 1286 	xch	a,r6
      000401 54 E0            [12] 1287 	anl	a,#0xe0
      000403 CE               [12] 1288 	xch	a,r6
      000404 6E               [12] 1289 	xrl	a,r6
      000405 FF               [12] 1290 	mov	r7,a
      000406 EE               [12] 1291 	mov	a,r6
      000407 24r04            [12] 1292 	add	a,#_nu
      000409 FC               [12] 1293 	mov	r4,a
      00040A EF               [12] 1294 	mov	a,r7
      00040B 34s04            [12] 1295 	addc	a,#(_nu >> 8)
      00040D FD               [12] 1296 	mov	r5,a
      00040E 90r08r04         [24] 1297 	mov	dptr,#_x
      000411 E0               [24] 1298 	movx	a,@dptr
      000412 FA               [12] 1299 	mov	r2,a
      000413 A3               [24] 1300 	inc	dptr
      000414 E0               [24] 1301 	movx	a,@dptr
      000415 FB               [12] 1302 	mov	r3,a
      000416 EA               [12] 1303 	mov	a,r2
      000417 2C               [12] 1304 	add	a,r4
      000418 FC               [12] 1305 	mov	r4,a
      000419 EB               [12] 1306 	mov	a,r3
      00041A 3D               [12] 1307 	addc	a,r5
      00041B FD               [12] 1308 	mov	r5,a
      00041C 90r08r0C         [24] 1309 	mov	dptr,#_n
      00041F E0               [24] 1310 	movx	a,@dptr
      000420 F8               [12] 1311 	mov	r0,a
      000421 A3               [24] 1312 	inc	dptr
      000422 E0               [24] 1313 	movx	a,@dptr
      000423 F9               [12] 1314 	mov	r1,a
      000424 B8 03 05         [24] 1315 	cjne	r0,#0x03,00210$
      000427 B9 00 02         [24] 1316 	cjne	r1,#0x00,00210$
      00042A 80 1F            [24] 1317 	sjmp	00130$
      00042C                       1318 00210$:
      00042C B8 02 18         [24] 1319 	cjne	r0,#0x02,00129$
      00042F B9 00 15         [24] 1320 	cjne	r1,#0x00,00129$
      000432 EE               [12] 1321 	mov	a,r6
      000433 24r04            [12] 1322 	add	a,#_u
      000435 FE               [12] 1323 	mov	r6,a
      000436 EF               [12] 1324 	mov	a,r7
      000437 34s00            [12] 1325 	addc	a,#(_u >> 8)
      000439 FF               [12] 1326 	mov	r7,a
      00043A EA               [12] 1327 	mov	a,r2
      00043B 2E               [12] 1328 	add	a,r6
      00043C FA               [12] 1329 	mov	r2,a
      00043D EB               [12] 1330 	mov	a,r3
      00043E 3F               [12] 1331 	addc	a,r7
      00043F FB               [12] 1332 	mov	r3,a
      000440 8A 82            [24] 1333 	mov	dpl,r2
      000442 8B 83            [24] 1334 	mov	dph,r3
      000444 E0               [24] 1335 	movx	a,@dptr
      000445 70 04            [24] 1336 	jnz	00130$
      000447                       1337 00129$:
                                   1338 ;	assignBit
      000447 C2*00            [12] 1339 	clr	b0
      000449 80 02            [24] 1340 	sjmp	00131$
      00044B                       1341 00130$:
                                   1342 ;	assignBit
      00044B D2*00            [12] 1343 	setb	b0
      00044D                       1344 00131$:
      00044D A2*00            [12] 1345 	mov	c,b0
      00044F E4               [12] 1346 	clr	a
      000450 33               [12] 1347 	rlc	a
      000451 8C 82            [24] 1348 	mov	dpl,r4
      000453 8D 83            [24] 1349 	mov	dph,r5
      000455 F0               [24] 1350 	movx	@dptr,a
                                   1351 ;	life.c:84: for (x = 0; x < W; x++) {
      000456 90r08r04         [24] 1352 	mov	dptr,#_x
      000459 E0               [24] 1353 	movx	a,@dptr
      00045A 24 01            [12] 1354 	add	a,#0x01
      00045C F0               [24] 1355 	movx	@dptr,a
      00045D A3               [24] 1356 	inc	dptr
      00045E E0               [24] 1357 	movx	a,@dptr
      00045F 34 00            [12] 1358 	addc	a,#0x00
      000461 F0               [24] 1359 	movx	@dptr,a
      000462 90r08r04         [24] 1360 	mov	dptr,#_x
      000465 E0               [24] 1361 	movx	a,@dptr
      000466 FE               [12] 1362 	mov	r6,a
      000467 A3               [24] 1363 	inc	dptr
      000468 E0               [24] 1364 	movx	a,@dptr
      000469 FF               [12] 1365 	mov	r7,a
      00046A C3               [12] 1366 	clr	c
      00046B EE               [12] 1367 	mov	a,r6
      00046C 94 20            [12] 1368 	subb	a,#0x20
      00046E EF               [12] 1369 	mov	a,r7
      00046F 64 80            [12] 1370 	xrl	a,#0x80
      000471 94 80            [12] 1371 	subb	a,#0x80
      000473 50 03            [24] 1372 	jnc	00214$
      000475 02r02r8D         [24] 1373 	ljmp	00119$
      000478                       1374 00214$:
                                   1375 ;	life.c:83: for (y = 0; y < H; y++) {
      000478 90r08r06         [24] 1376 	mov	dptr,#_y
      00047B E0               [24] 1377 	movx	a,@dptr
      00047C 24 01            [12] 1378 	add	a,#0x01
      00047E F0               [24] 1379 	movx	@dptr,a
      00047F A3               [24] 1380 	inc	dptr
      000480 E0               [24] 1381 	movx	a,@dptr
      000481 34 00            [12] 1382 	addc	a,#0x00
      000483 F0               [24] 1383 	movx	@dptr,a
      000484 90r08r06         [24] 1384 	mov	dptr,#_y
      000487 E0               [24] 1385 	movx	a,@dptr
      000488 FE               [12] 1386 	mov	r6,a
      000489 A3               [24] 1387 	inc	dptr
      00048A E0               [24] 1388 	movx	a,@dptr
      00048B FF               [12] 1389 	mov	r7,a
      00048C C3               [12] 1390 	clr	c
      00048D EE               [12] 1391 	mov	a,r6
      00048E 94 20            [12] 1392 	subb	a,#0x20
      000490 EF               [12] 1393 	mov	a,r7
      000491 64 80            [12] 1394 	xrl	a,#0x80
      000493 94 80            [12] 1395 	subb	a,#0x80
      000495 50 03            [24] 1396 	jnc	00215$
      000497 02r02r86         [24] 1397 	ljmp	00121$
      00049A                       1398 00215$:
                                   1399 ;	life.c:96: for (y = 0; y < H; y++)
      00049A 90r08r06         [24] 1400 	mov	dptr,#_y
      00049D E4               [12] 1401 	clr	a
      00049E F0               [24] 1402 	movx	@dptr,a
      00049F A3               [24] 1403 	inc	dptr
      0004A0 F0               [24] 1404 	movx	@dptr,a
      0004A1                       1405 00125$:
                                   1406 ;	life.c:97: for (x = 0; x < W; x++)
      0004A1 90r08r04         [24] 1407 	mov	dptr,#_x
      0004A4 E4               [12] 1408 	clr	a
      0004A5 F0               [24] 1409 	movx	@dptr,a
      0004A6 A3               [24] 1410 	inc	dptr
      0004A7 F0               [24] 1411 	movx	@dptr,a
      0004A8                       1412 00123$:
                                   1413 ;	life.c:98: if (u[y][x] != nu[y][x]) {
      0004A8 90r08r06         [24] 1414 	mov	dptr,#_y
      0004AB E0               [24] 1415 	movx	a,@dptr
      0004AC FE               [12] 1416 	mov	r6,a
      0004AD A3               [24] 1417 	inc	dptr
      0004AE E0               [24] 1418 	movx	a,@dptr
      0004AF C4               [12] 1419 	swap	a
      0004B0 23               [12] 1420 	rl	a
      0004B1 54 E0            [12] 1421 	anl	a,#0xe0
      0004B3 CE               [12] 1422 	xch	a,r6
      0004B4 C4               [12] 1423 	swap	a
      0004B5 23               [12] 1424 	rl	a
      0004B6 CE               [12] 1425 	xch	a,r6
      0004B7 6E               [12] 1426 	xrl	a,r6
      0004B8 CE               [12] 1427 	xch	a,r6
      0004B9 54 E0            [12] 1428 	anl	a,#0xe0
      0004BB CE               [12] 1429 	xch	a,r6
      0004BC 6E               [12] 1430 	xrl	a,r6
      0004BD FF               [12] 1431 	mov	r7,a
      0004BE EE               [12] 1432 	mov	a,r6
      0004BF 24r04            [12] 1433 	add	a,#_u
      0004C1 FC               [12] 1434 	mov	r4,a
      0004C2 EF               [12] 1435 	mov	a,r7
      0004C3 34s00            [12] 1436 	addc	a,#(_u >> 8)
      0004C5 FD               [12] 1437 	mov	r5,a
      0004C6 90r08r04         [24] 1438 	mov	dptr,#_x
      0004C9 E0               [24] 1439 	movx	a,@dptr
      0004CA FA               [12] 1440 	mov	r2,a
      0004CB A3               [24] 1441 	inc	dptr
      0004CC E0               [24] 1442 	movx	a,@dptr
      0004CD FB               [12] 1443 	mov	r3,a
      0004CE EA               [12] 1444 	mov	a,r2
      0004CF 2C               [12] 1445 	add	a,r4
      0004D0 F5 82            [12] 1446 	mov	dpl,a
      0004D2 EB               [12] 1447 	mov	a,r3
      0004D3 3D               [12] 1448 	addc	a,r5
      0004D4 F5 83            [12] 1449 	mov	dph,a
      0004D6 EE               [12] 1450 	mov	a,r6
      0004D7 24r04            [12] 1451 	add	a,#_nu
      0004D9 FC               [12] 1452 	mov	r4,a
      0004DA EF               [12] 1453 	mov	a,r7
      0004DB 34s04            [12] 1454 	addc	a,#(_nu >> 8)
      0004DD FD               [12] 1455 	mov	r5,a
      0004DE EA               [12] 1456 	mov	a,r2
      0004DF 2C               [12] 1457 	add	a,r4
      0004E0 FC               [12] 1458 	mov	r4,a
      0004E1 EB               [12] 1459 	mov	a,r3
      0004E2 3D               [12] 1460 	addc	a,r5
      0004E3 FD               [12] 1461 	mov	r5,a
      0004E4 E0               [24] 1462 	movx	a,@dptr
      0004E5 F9               [12] 1463 	mov	r1,a
      0004E6 8C 82            [24] 1464 	mov	dpl,r4
      0004E8 8D 83            [24] 1465 	mov	dph,r5
      0004EA E0               [24] 1466 	movx	a,@dptr
      0004EB FC               [12] 1467 	mov	r4,a
      0004EC E9               [12] 1468 	mov	a,r1
      0004ED B5 04 02         [24] 1469 	cjne	a,ar4,00216$
      0004F0 80 2C            [24] 1470 	sjmp	00124$
      0004F2                       1471 00216$:
                                   1472 ;	life.c:99: u[y][x] = nu[y][x];
      0004F2 EE               [12] 1473 	mov	a,r6
      0004F3 24r04            [12] 1474 	add	a,#_u
      0004F5 FC               [12] 1475 	mov	r4,a
      0004F6 EF               [12] 1476 	mov	a,r7
      0004F7 34s00            [12] 1477 	addc	a,#(_u >> 8)
      0004F9 FD               [12] 1478 	mov	r5,a
      0004FA EA               [12] 1479 	mov	a,r2
      0004FB 2C               [12] 1480 	add	a,r4
      0004FC FC               [12] 1481 	mov	r4,a
      0004FD EB               [12] 1482 	mov	a,r3
      0004FE 3D               [12] 1483 	addc	a,r5
      0004FF FD               [12] 1484 	mov	r5,a
      000500 EE               [12] 1485 	mov	a,r6
      000501 24r04            [12] 1486 	add	a,#_nu
      000503 FE               [12] 1487 	mov	r6,a
      000504 EF               [12] 1488 	mov	a,r7
      000505 34s04            [12] 1489 	addc	a,#(_nu >> 8)
      000507 FF               [12] 1490 	mov	r7,a
      000508 EA               [12] 1491 	mov	a,r2
      000509 2E               [12] 1492 	add	a,r6
      00050A F5 82            [12] 1493 	mov	dpl,a
      00050C EB               [12] 1494 	mov	a,r3
      00050D 3F               [12] 1495 	addc	a,r7
      00050E F5 83            [12] 1496 	mov	dph,a
      000510 E0               [24] 1497 	movx	a,@dptr
      000511 FF               [12] 1498 	mov	r7,a
      000512 8C 82            [24] 1499 	mov	dpl,r4
      000514 8D 83            [24] 1500 	mov	dph,r5
      000516 F0               [24] 1501 	movx	@dptr,a
                                   1502 ;	life.c:100: fixed = 0;
      000517 90r08r18         [24] 1503 	mov	dptr,#_fixed
      00051A E4               [12] 1504 	clr	a
      00051B F0               [24] 1505 	movx	@dptr,a
      00051C A3               [24] 1506 	inc	dptr
      00051D F0               [24] 1507 	movx	@dptr,a
      00051E                       1508 00124$:
                                   1509 ;	life.c:97: for (x = 0; x < W; x++)
      00051E 90r08r04         [24] 1510 	mov	dptr,#_x
      000521 E0               [24] 1511 	movx	a,@dptr
      000522 24 01            [12] 1512 	add	a,#0x01
      000524 F0               [24] 1513 	movx	@dptr,a
      000525 A3               [24] 1514 	inc	dptr
      000526 E0               [24] 1515 	movx	a,@dptr
      000527 34 00            [12] 1516 	addc	a,#0x00
      000529 F0               [24] 1517 	movx	@dptr,a
      00052A 90r08r04         [24] 1518 	mov	dptr,#_x
      00052D E0               [24] 1519 	movx	a,@dptr
      00052E FE               [12] 1520 	mov	r6,a
      00052F A3               [24] 1521 	inc	dptr
      000530 E0               [24] 1522 	movx	a,@dptr
      000531 FF               [12] 1523 	mov	r7,a
      000532 C3               [12] 1524 	clr	c
      000533 EE               [12] 1525 	mov	a,r6
      000534 94 20            [12] 1526 	subb	a,#0x20
      000536 EF               [12] 1527 	mov	a,r7
      000537 64 80            [12] 1528 	xrl	a,#0x80
      000539 94 80            [12] 1529 	subb	a,#0x80
      00053B 50 03            [24] 1530 	jnc	00217$
      00053D 02r04rA8         [24] 1531 	ljmp	00123$
      000540                       1532 00217$:
                                   1533 ;	life.c:96: for (y = 0; y < H; y++)
      000540 90r08r06         [24] 1534 	mov	dptr,#_y
      000543 E0               [24] 1535 	movx	a,@dptr
      000544 24 01            [12] 1536 	add	a,#0x01
      000546 F0               [24] 1537 	movx	@dptr,a
      000547 A3               [24] 1538 	inc	dptr
      000548 E0               [24] 1539 	movx	a,@dptr
      000549 34 00            [12] 1540 	addc	a,#0x00
      00054B F0               [24] 1541 	movx	@dptr,a
      00054C 90r08r06         [24] 1542 	mov	dptr,#_y
      00054F E0               [24] 1543 	movx	a,@dptr
      000550 FE               [12] 1544 	mov	r6,a
      000551 A3               [24] 1545 	inc	dptr
      000552 E0               [24] 1546 	movx	a,@dptr
      000553 FF               [12] 1547 	mov	r7,a
      000554 C3               [12] 1548 	clr	c
      000555 EE               [12] 1549 	mov	a,r6
      000556 94 20            [12] 1550 	subb	a,#0x20
      000558 EF               [12] 1551 	mov	a,r7
      000559 64 80            [12] 1552 	xrl	a,#0x80
      00055B 94 80            [12] 1553 	subb	a,#0x80
      00055D 50 03            [24] 1554 	jnc	00218$
      00055F 02r04rA1         [24] 1555 	ljmp	00125$
      000562                       1556 00218$:
                                   1557 ;	life.c:103: return;
                                   1558 ;	life.c:104: }
      000562 22               [24] 1559 	ret
                                   1560 ;------------------------------------------------------------
                                   1561 ;Allocation info for local variables in function 'main'
                                   1562 ;------------------------------------------------------------
                                   1563 ;	life.c:106: void main(void) {
                                   1564 ;	-----------------------------------------
                                   1565 ;	 function main
                                   1566 ;	-----------------------------------------
      000563                       1567 _main:
                                   1568 ;	life.c:107: i0 = i1 = 0;
      000563 90r00r02         [24] 1569 	mov	dptr,#_i1
      000566 E4               [12] 1570 	clr	a
      000567 F0               [24] 1571 	movx	@dptr,a
      000568 A3               [24] 1572 	inc	dptr
      000569 F0               [24] 1573 	movx	@dptr,a
      00056A 90r00r00         [24] 1574 	mov	dptr,#_i0
      00056D F0               [24] 1575 	movx	@dptr,a
      00056E A3               [24] 1576 	inc	dptr
      00056F F0               [24] 1577 	movx	@dptr,a
                                   1578 ;	life.c:109: IT0 = 1;
                                   1579 ;	assignBit
      000570 D2 88            [12] 1580 	setb	_IT0
                                   1581 ;	life.c:110: IT1 = 1;
                                   1582 ;	assignBit
      000572 D2 8A            [12] 1583 	setb	_IT1
                                   1584 ;	life.c:111: EX0 = 1;
                                   1585 ;	assignBit
      000574 D2 A8            [12] 1586 	setb	_EX0
                                   1587 ;	life.c:112: EX1 = 1;
                                   1588 ;	assignBit
      000576 D2 AA            [12] 1589 	setb	_EX1
                                   1590 ;	life.c:113: EA = 1;
                                   1591 ;	assignBit
      000578 D2 AF            [12] 1592 	setb	_EA
                                   1593 ;	life.c:115: while (!i0) {
      00057A                       1594 00112$:
      00057A 90r00r00         [24] 1595 	mov	dptr,#_i0
      00057D E0               [24] 1596 	movx	a,@dptr
      00057E F5 F0            [12] 1597 	mov	b,a
      000580 A3               [24] 1598 	inc	dptr
      000581 E0               [24] 1599 	movx	a,@dptr
      000582 45 F0            [12] 1600 	orl	a,b
      000584 60 03            [24] 1601 	jz	00175$
      000586 02r06rFC         [24] 1602 	ljmp	00114$
      000589                       1603 00175$:
                                   1604 ;	life.c:116: printf("\033[2J\033[mINIT\n\r");
      000589 74r1E            [12] 1605 	mov	a,#___str_5
      00058B C0 E0            [24] 1606 	push	acc
      00058D 74s00            [12] 1607 	mov	a,#(___str_5 >> 8)
      00058F C0 E0            [24] 1608 	push	acc
      000591 74 80            [12] 1609 	mov	a,#0x80
      000593 C0 E0            [24] 1610 	push	acc
      000595 12r00r00         [24] 1611 	lcall	_printf
      000598 15 81            [12] 1612 	dec	sp
      00059A 15 81            [12] 1613 	dec	sp
      00059C 15 81            [12] 1614 	dec	sp
                                   1615 ;	life.c:117: for (y = 0; y < H; y++)
      00059E 90r08r06         [24] 1616 	mov	dptr,#_y
      0005A1 E4               [12] 1617 	clr	a
      0005A2 F0               [24] 1618 	movx	@dptr,a
      0005A3 A3               [24] 1619 	inc	dptr
      0005A4 F0               [24] 1620 	movx	@dptr,a
      0005A5                       1621 00117$:
                                   1622 ;	life.c:118: for (x = 0; x < W; x++) {
      0005A5 90r08r04         [24] 1623 	mov	dptr,#_x
      0005A8 E4               [12] 1624 	clr	a
      0005A9 F0               [24] 1625 	movx	@dptr,a
      0005AA A3               [24] 1626 	inc	dptr
      0005AB F0               [24] 1627 	movx	@dptr,a
      0005AC                       1628 00115$:
                                   1629 ;	life.c:119: c = getchar();
      0005AC 12r00r05         [24] 1630 	lcall	_getchar
      0005AF AE 82            [24] 1631 	mov	r6,dpl
      0005B1 AF 83            [24] 1632 	mov	r7,dph
      0005B3 90r08r1A         [24] 1633 	mov	dptr,#_c
      0005B6 EE               [12] 1634 	mov	a,r6
      0005B7 F0               [24] 1635 	movx	@dptr,a
      0005B8 EF               [12] 1636 	mov	a,r7
      0005B9 A3               [24] 1637 	inc	dptr
      0005BA F0               [24] 1638 	movx	@dptr,a
                                   1639 ;	life.c:120: u[y][x] = c & 1;
      0005BB 90r08r06         [24] 1640 	mov	dptr,#_y
      0005BE E0               [24] 1641 	movx	a,@dptr
      0005BF FC               [12] 1642 	mov	r4,a
      0005C0 A3               [24] 1643 	inc	dptr
      0005C1 E0               [24] 1644 	movx	a,@dptr
      0005C2 C4               [12] 1645 	swap	a
      0005C3 23               [12] 1646 	rl	a
      0005C4 54 E0            [12] 1647 	anl	a,#0xe0
      0005C6 CC               [12] 1648 	xch	a,r4
      0005C7 C4               [12] 1649 	swap	a
      0005C8 23               [12] 1650 	rl	a
      0005C9 CC               [12] 1651 	xch	a,r4
      0005CA 6C               [12] 1652 	xrl	a,r4
      0005CB CC               [12] 1653 	xch	a,r4
      0005CC 54 E0            [12] 1654 	anl	a,#0xe0
      0005CE CC               [12] 1655 	xch	a,r4
      0005CF 6C               [12] 1656 	xrl	a,r4
      0005D0 FD               [12] 1657 	mov	r5,a
      0005D1 EC               [12] 1658 	mov	a,r4
      0005D2 24r04            [12] 1659 	add	a,#_u
      0005D4 FC               [12] 1660 	mov	r4,a
      0005D5 ED               [12] 1661 	mov	a,r5
      0005D6 34s00            [12] 1662 	addc	a,#(_u >> 8)
      0005D8 FD               [12] 1663 	mov	r5,a
      0005D9 90r08r04         [24] 1664 	mov	dptr,#_x
      0005DC E0               [24] 1665 	movx	a,@dptr
      0005DD FA               [12] 1666 	mov	r2,a
      0005DE A3               [24] 1667 	inc	dptr
      0005DF E0               [24] 1668 	movx	a,@dptr
      0005E0 FB               [12] 1669 	mov	r3,a
      0005E1 EA               [12] 1670 	mov	a,r2
      0005E2 2C               [12] 1671 	add	a,r4
      0005E3 F5 82            [12] 1672 	mov	dpl,a
      0005E5 EB               [12] 1673 	mov	a,r3
      0005E6 3D               [12] 1674 	addc	a,r5
      0005E7 F5 83            [12] 1675 	mov	dph,a
      0005E9 53 06 01         [24] 1676 	anl	ar6,#0x01
      0005EC EE               [12] 1677 	mov	a,r6
      0005ED F0               [24] 1678 	movx	@dptr,a
                                   1679 ;	life.c:118: for (x = 0; x < W; x++) {
      0005EE 90r08r04         [24] 1680 	mov	dptr,#_x
      0005F1 E0               [24] 1681 	movx	a,@dptr
      0005F2 24 01            [12] 1682 	add	a,#0x01
      0005F4 F0               [24] 1683 	movx	@dptr,a
      0005F5 A3               [24] 1684 	inc	dptr
      0005F6 E0               [24] 1685 	movx	a,@dptr
      0005F7 34 00            [12] 1686 	addc	a,#0x00
      0005F9 F0               [24] 1687 	movx	@dptr,a
      0005FA 90r08r04         [24] 1688 	mov	dptr,#_x
      0005FD E0               [24] 1689 	movx	a,@dptr
      0005FE FE               [12] 1690 	mov	r6,a
      0005FF A3               [24] 1691 	inc	dptr
      000600 E0               [24] 1692 	movx	a,@dptr
      000601 FF               [12] 1693 	mov	r7,a
      000602 C3               [12] 1694 	clr	c
      000603 EE               [12] 1695 	mov	a,r6
      000604 94 20            [12] 1696 	subb	a,#0x20
      000606 EF               [12] 1697 	mov	a,r7
      000607 64 80            [12] 1698 	xrl	a,#0x80
      000609 94 80            [12] 1699 	subb	a,#0x80
      00060B 40 9F            [24] 1700 	jc	00115$
                                   1701 ;	life.c:117: for (y = 0; y < H; y++)
      00060D 90r08r06         [24] 1702 	mov	dptr,#_y
      000610 E0               [24] 1703 	movx	a,@dptr
      000611 24 01            [12] 1704 	add	a,#0x01
      000613 F0               [24] 1705 	movx	@dptr,a
      000614 A3               [24] 1706 	inc	dptr
      000615 E0               [24] 1707 	movx	a,@dptr
      000616 34 00            [12] 1708 	addc	a,#0x00
      000618 F0               [24] 1709 	movx	@dptr,a
      000619 90r08r06         [24] 1710 	mov	dptr,#_y
      00061C E0               [24] 1711 	movx	a,@dptr
      00061D FE               [12] 1712 	mov	r6,a
      00061E A3               [24] 1713 	inc	dptr
      00061F E0               [24] 1714 	movx	a,@dptr
      000620 FF               [12] 1715 	mov	r7,a
      000621 C3               [12] 1716 	clr	c
      000622 EE               [12] 1717 	mov	a,r6
      000623 94 20            [12] 1718 	subb	a,#0x20
      000625 EF               [12] 1719 	mov	a,r7
      000626 64 80            [12] 1720 	xrl	a,#0x80
      000628 94 80            [12] 1721 	subb	a,#0x80
      00062A 50 03            [24] 1722 	jnc	00177$
      00062C 02r05rA5         [24] 1723 	ljmp	00117$
      00062F                       1724 00177$:
                                   1725 ;	life.c:122: printf("RDY\n\r");
      00062F 74r2C            [12] 1726 	mov	a,#___str_6
      000631 C0 E0            [24] 1727 	push	acc
      000633 74s00            [12] 1728 	mov	a,#(___str_6 >> 8)
      000635 C0 E0            [24] 1729 	push	acc
      000637 74 80            [12] 1730 	mov	a,#0x80
      000639 C0 E0            [24] 1731 	push	acc
      00063B 12r00r00         [24] 1732 	lcall	_printf
      00063E 15 81            [12] 1733 	dec	sp
      000640 15 81            [12] 1734 	dec	sp
      000642 15 81            [12] 1735 	dec	sp
                                   1736 ;	life.c:123: (void)getchar();
      000644 12r00r05         [24] 1737 	lcall	_getchar
                                   1738 ;	life.c:125: for (x = 0; x < 4; x++)
      000647 90r08r04         [24] 1739 	mov	dptr,#_x
      00064A E4               [12] 1740 	clr	a
      00064B F0               [24] 1741 	movx	@dptr,a
      00064C A3               [24] 1742 	inc	dptr
      00064D F0               [24] 1743 	movx	@dptr,a
      00064E                       1744 00119$:
                                   1745 ;	life.c:126: generation[x] = 0;
      00064E 90r08r04         [24] 1746 	mov	dptr,#_x
      000651 E0               [24] 1747 	movx	a,@dptr
      000652 FE               [12] 1748 	mov	r6,a
      000653 A3               [24] 1749 	inc	dptr
      000654 E0               [24] 1750 	movx	a,@dptr
      000655 FF               [12] 1751 	mov	r7,a
      000656 EE               [12] 1752 	mov	a,r6
      000657 2E               [12] 1753 	add	a,r6
      000658 FE               [12] 1754 	mov	r6,a
      000659 EF               [12] 1755 	mov	a,r7
      00065A 33               [12] 1756 	rlc	a
      00065B FF               [12] 1757 	mov	r7,a
      00065C EE               [12] 1758 	mov	a,r6
      00065D 24r0E            [12] 1759 	add	a,#_generation
      00065F F5 82            [12] 1760 	mov	dpl,a
      000661 EF               [12] 1761 	mov	a,r7
      000662 34s08            [12] 1762 	addc	a,#(_generation >> 8)
      000664 F5 83            [12] 1763 	mov	dph,a
      000666 E4               [12] 1764 	clr	a
      000667 F0               [24] 1765 	movx	@dptr,a
      000668 A3               [24] 1766 	inc	dptr
      000669 F0               [24] 1767 	movx	@dptr,a
                                   1768 ;	life.c:125: for (x = 0; x < 4; x++)
      00066A 90r08r04         [24] 1769 	mov	dptr,#_x
      00066D E0               [24] 1770 	movx	a,@dptr
      00066E 24 01            [12] 1771 	add	a,#0x01
      000670 F0               [24] 1772 	movx	@dptr,a
      000671 A3               [24] 1773 	inc	dptr
      000672 E0               [24] 1774 	movx	a,@dptr
      000673 34 00            [12] 1775 	addc	a,#0x00
      000675 F0               [24] 1776 	movx	@dptr,a
      000676 90r08r04         [24] 1777 	mov	dptr,#_x
      000679 E0               [24] 1778 	movx	a,@dptr
      00067A FE               [12] 1779 	mov	r6,a
      00067B A3               [24] 1780 	inc	dptr
      00067C E0               [24] 1781 	movx	a,@dptr
      00067D FF               [12] 1782 	mov	r7,a
      00067E C3               [12] 1783 	clr	c
      00067F EE               [12] 1784 	mov	a,r6
      000680 94 04            [12] 1785 	subb	a,#0x04
      000682 EF               [12] 1786 	mov	a,r7
      000683 64 80            [12] 1787 	xrl	a,#0x80
      000685 94 80            [12] 1788 	subb	a,#0x80
      000687 40 C5            [24] 1789 	jc	00119$
                                   1790 ;	life.c:128: i1 = 0;
      000689 90r00r02         [24] 1791 	mov	dptr,#_i1
      00068C E4               [12] 1792 	clr	a
      00068D F0               [24] 1793 	movx	@dptr,a
      00068E A3               [24] 1794 	inc	dptr
      00068F F0               [24] 1795 	movx	@dptr,a
                                   1796 ;	life.c:129: while (!i0 && !i1) {
      000690                       1797 00107$:
      000690 90r00r00         [24] 1798 	mov	dptr,#_i0
      000693 E0               [24] 1799 	movx	a,@dptr
      000694 F5 F0            [12] 1800 	mov	b,a
      000696 A3               [24] 1801 	inc	dptr
      000697 E0               [24] 1802 	movx	a,@dptr
      000698 45 F0            [12] 1803 	orl	a,b
      00069A 70 36            [24] 1804 	jnz	00109$
      00069C 90r00r02         [24] 1805 	mov	dptr,#_i1
      00069F E0               [24] 1806 	movx	a,@dptr
      0006A0 F5 F0            [12] 1807 	mov	b,a
      0006A2 A3               [24] 1808 	inc	dptr
      0006A3 E0               [24] 1809 	movx	a,@dptr
      0006A4 45 F0            [12] 1810 	orl	a,b
      0006A6 70 2A            [24] 1811 	jnz	00109$
                                   1812 ;	life.c:130: show();
      0006A8 12r01r80         [24] 1813 	lcall	_show
                                   1814 ;	life.c:131: evolve();
      0006AB 12r02r77         [24] 1815 	lcall	_evolve
                                   1816 ;	life.c:132: if (fixed) {
      0006AE 90r08r18         [24] 1817 	mov	dptr,#_fixed
      0006B1 E0               [24] 1818 	movx	a,@dptr
      0006B2 F5 F0            [12] 1819 	mov	b,a
      0006B4 A3               [24] 1820 	inc	dptr
      0006B5 E0               [24] 1821 	movx	a,@dptr
      0006B6 45 F0            [12] 1822 	orl	a,b
      0006B8 60 D6            [24] 1823 	jz	00107$
                                   1824 ;	life.c:133: printf("DONE\n\r");
      0006BA 74r32            [12] 1825 	mov	a,#___str_7
      0006BC C0 E0            [24] 1826 	push	acc
      0006BE 74s00            [12] 1827 	mov	a,#(___str_7 >> 8)
      0006C0 C0 E0            [24] 1828 	push	acc
      0006C2 74 80            [12] 1829 	mov	a,#0x80
      0006C4 C0 E0            [24] 1830 	push	acc
      0006C6 12r00r00         [24] 1831 	lcall	_printf
      0006C9 15 81            [12] 1832 	dec	sp
      0006CB 15 81            [12] 1833 	dec	sp
      0006CD 15 81            [12] 1834 	dec	sp
                                   1835 ;	life.c:134: (void)getchar();
      0006CF 12r00r05         [24] 1836 	lcall	_getchar
                                   1837 ;	life.c:135: break;
      0006D2                       1838 00109$:
                                   1839 ;	life.c:138: if (i1) {
      0006D2 90r00r02         [24] 1840 	mov	dptr,#_i1
      0006D5 E0               [24] 1841 	movx	a,@dptr
      0006D6 F5 F0            [12] 1842 	mov	b,a
      0006D8 A3               [24] 1843 	inc	dptr
      0006D9 E0               [24] 1844 	movx	a,@dptr
      0006DA 45 F0            [12] 1845 	orl	a,b
      0006DC 70 03            [24] 1846 	jnz	00182$
      0006DE 02r05r7A         [24] 1847 	ljmp	00112$
      0006E1                       1848 00182$:
                                   1849 ;	life.c:139: printf("BREAK\n\r");
      0006E1 74r39            [12] 1850 	mov	a,#___str_8
      0006E3 C0 E0            [24] 1851 	push	acc
      0006E5 74s00            [12] 1852 	mov	a,#(___str_8 >> 8)
      0006E7 C0 E0            [24] 1853 	push	acc
      0006E9 74 80            [12] 1854 	mov	a,#0x80
      0006EB C0 E0            [24] 1855 	push	acc
      0006ED 12r00r00         [24] 1856 	lcall	_printf
      0006F0 15 81            [12] 1857 	dec	sp
      0006F2 15 81            [12] 1858 	dec	sp
      0006F4 15 81            [12] 1859 	dec	sp
                                   1860 ;	life.c:140: (void)getchar();
      0006F6 12r00r05         [24] 1861 	lcall	_getchar
      0006F9 02r05r7A         [24] 1862 	ljmp	00112$
      0006FC                       1863 00114$:
                                   1864 ;	life.c:144: EA = 0;
                                   1865 ;	assignBit
      0006FC C2 AF            [12] 1866 	clr	_EA
                                   1867 ;	life.c:146: printf("TERM\n\r");
      0006FE 74r41            [12] 1868 	mov	a,#___str_9
      000700 C0 E0            [24] 1869 	push	acc
      000702 74s00            [12] 1870 	mov	a,#(___str_9 >> 8)
      000704 C0 E0            [24] 1871 	push	acc
      000706 74 80            [12] 1872 	mov	a,#0x80
      000708 C0 E0            [24] 1873 	push	acc
      00070A 12r00r00         [24] 1874 	lcall	_printf
      00070D 15 81            [12] 1875 	dec	sp
      00070F 15 81            [12] 1876 	dec	sp
      000711 15 81            [12] 1877 	dec	sp
                                   1878 ;	life.c:147: (void)getchar();
      000713 12r00r05         [24] 1879 	lcall	_getchar
                                   1880 ;	life.c:151: __endasm;
      000716 02 00 00         [24] 1881 	ljmp	0
                                   1882 ;	life.c:152: }
      000719 22               [24] 1883 	ret
                                   1884 	.area CSEG    (CODE)
                                   1885 	.area CONST   (CODE)
                                   1886 	.area CONST   (CODE)
      000000                       1887 ___str_0:
      000000 25 30 34 78           1888 	.ascii "%04x"
      000004 00                    1889 	.db 0x00
                                   1890 	.area CSEG    (CODE)
                                   1891 	.area CONST   (CODE)
      000005                       1892 ___str_1:
      000005 1B                    1893 	.db 0x1b
      000006 5B 32 4A              1894 	.ascii "[2J"
      000009 1B                    1895 	.db 0x1b
      00000A 5B 6D                 1896 	.ascii "[m"
      00000C 00                    1897 	.db 0x00
                                   1898 	.area CSEG    (CODE)
                                   1899 	.area CONST   (CODE)
      00000D                       1900 ___str_2:
      00000D 0D                    1901 	.db 0x0d
      00000E 0A                    1902 	.db 0x0a
      00000F 00                    1903 	.db 0x00
                                   1904 	.area CSEG    (CODE)
                                   1905 	.area CONST   (CODE)
      000010                       1906 ___str_3:
      000010 1B                    1907 	.db 0x1b
      000011 5B 30 31 6D 5B 5D     1908 	.ascii "[01m[]"
      000017 1B                    1909 	.db 0x1b
      000018 5B 6D                 1910 	.ascii "[m"
      00001A 00                    1911 	.db 0x00
                                   1912 	.area CSEG    (CODE)
                                   1913 	.area CONST   (CODE)
      00001B                       1914 ___str_4:
      00001B 2D 2D                 1915 	.ascii "--"
      00001D 00                    1916 	.db 0x00
                                   1917 	.area CSEG    (CODE)
                                   1918 	.area CONST   (CODE)
      00001E                       1919 ___str_5:
      00001E 1B                    1920 	.db 0x1b
      00001F 5B 32 4A              1921 	.ascii "[2J"
      000022 1B                    1922 	.db 0x1b
      000023 5B 6D 49 4E 49 54     1923 	.ascii "[mINIT"
      000029 0A                    1924 	.db 0x0a
      00002A 0D                    1925 	.db 0x0d
      00002B 00                    1926 	.db 0x00
                                   1927 	.area CSEG    (CODE)
                                   1928 	.area CONST   (CODE)
      00002C                       1929 ___str_6:
      00002C 52 44 59              1930 	.ascii "RDY"
      00002F 0A                    1931 	.db 0x0a
      000030 0D                    1932 	.db 0x0d
      000031 00                    1933 	.db 0x00
                                   1934 	.area CSEG    (CODE)
                                   1935 	.area CONST   (CODE)
      000032                       1936 ___str_7:
      000032 44 4F 4E 45           1937 	.ascii "DONE"
      000036 0A                    1938 	.db 0x0a
      000037 0D                    1939 	.db 0x0d
      000038 00                    1940 	.db 0x00
                                   1941 	.area CSEG    (CODE)
                                   1942 	.area CONST   (CODE)
      000039                       1943 ___str_8:
      000039 42 52 45 41 4B        1944 	.ascii "BREAK"
      00003E 0A                    1945 	.db 0x0a
      00003F 0D                    1946 	.db 0x0d
      000040 00                    1947 	.db 0x00
                                   1948 	.area CSEG    (CODE)
                                   1949 	.area CONST   (CODE)
      000041                       1950 ___str_9:
      000041 54 45 52 4D           1951 	.ascii "TERM"
      000045 0A                    1952 	.db 0x0a
      000046 0D                    1953 	.db 0x0d
      000047 00                    1954 	.db 0x00
                                   1955 	.area CSEG    (CODE)
                                   1956 	.area XINIT   (CODE)
                                   1957 	.area CABS    (ABS,CODE)
