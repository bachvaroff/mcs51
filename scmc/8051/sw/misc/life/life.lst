                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _showu
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print32x
                                     16 	.globl _print16x
                                     17 	.globl _printstr
                                     18 	.globl _getchar_poll
                                     19 	.globl _getchar
                                     20 	.globl _putchar
                                     21 	.globl _toupper
                                     22 	.globl ___memcpy
                                     23 	.globl _memset
                                     24 	.globl _srand
                                     25 	.globl _rand
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable bit register bank
                                    291 ;--------------------------------------------------------
                                    292 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        293 bits:
      000000                        294 	.ds 1
                           008000   295 	b0 = bits[0]
                           008100   296 	b1 = bits[1]
                           008200   297 	b2 = bits[2]
                           008300   298 	b3 = bits[3]
                           008400   299 	b4 = bits[4]
                           008500   300 	b5 = bits[5]
                           008600   301 	b6 = bits[6]
                           008700   302 	b7 = bits[7]
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 ;--------------------------------------------------------
                                    311 ; Stack segment in internal ram 
                                    312 ;--------------------------------------------------------
                                    313 	.area	SSEG
      000000                        314 __start__stack:
      000000                        315 	.ds	1
                                    316 
                                    317 ;--------------------------------------------------------
                                    318 ; indirectly addressable internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area ISEG    (DATA)
      000000                        321 _i0:
      000000                        322 	.ds 1
      000001                        323 _i1:
      000001                        324 	.ds 1
      000002                        325 _OE76:
      000002                        326 	.ds 1
      000003                        327 _x:
      000003                        328 	.ds 2
      000005                        329 _y:
      000005                        330 	.ds 2
      000007                        331 _n:
      000007                        332 	.ds 1
      000008                        333 _fixed:
      000008                        334 	.ds 1
      000009                        335 _cycle2:
      000009                        336 	.ds 1
      00000A                        337 _gen:
      00000A                        338 	.ds 4
      00000E                        339 _genc2:
      00000E                        340 	.ds 4
      000012                        341 _genfx:
      000012                        342 	.ds 4
      000016                        343 _c2set:
      000016                        344 	.ds 1
      000017                        345 _fxset:
      000017                        346 	.ds 1
      000018                        347 _pruni:
      000018                        348 	.ds 1
                                    349 ;--------------------------------------------------------
                                    350 ; absolute internal ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area IABS    (ABS,DATA)
                                    353 	.area IABS    (ABS,DATA)
                                    354 ;--------------------------------------------------------
                                    355 ; bit data
                                    356 ;--------------------------------------------------------
                                    357 	.area BSEG    (BIT)
                                    358 ;--------------------------------------------------------
                                    359 ; paged external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area PSEG    (PAG,XDATA)
                                    362 ;--------------------------------------------------------
                                    363 ; external ram data
                                    364 ;--------------------------------------------------------
                                    365 	.area XSEG    (XDATA)
                           00E000   366 _RND	=	0xe000
                           00F006   367 _OEreg	=	0xf006
      000000                        368 _iu:
      000000                        369 	.ds 9216
      002400                        370 _pu:
      002400                        371 	.ds 9216
      004800                        372 _u:
      004800                        373 	.ds 9216
      006C00                        374 _nu:
      006C00                        375 	.ds 9216
                                    376 ;--------------------------------------------------------
                                    377 ; absolute external ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XABS    (ABS,XDATA)
                                    380 ;--------------------------------------------------------
                                    381 ; external initialized ram data
                                    382 ;--------------------------------------------------------
                                    383 	.area XISEG   (XDATA)
                                    384 	.area HOME    (CODE)
                                    385 	.area GSINIT0 (CODE)
                                    386 	.area GSINIT1 (CODE)
                                    387 	.area GSINIT2 (CODE)
                                    388 	.area GSINIT3 (CODE)
                                    389 	.area GSINIT4 (CODE)
                                    390 	.area GSINIT5 (CODE)
                                    391 	.area GSINIT  (CODE)
                                    392 	.area GSFINAL (CODE)
                                    393 	.area CSEG    (CODE)
                                    394 ;--------------------------------------------------------
                                    395 ; interrupt vector 
                                    396 ;--------------------------------------------------------
                                    397 	.area HOME    (CODE)
      000000                        398 __interrupt_vect:
      000000 02r00r00         [24]  399 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  400 	ljmp	_int0
      000006                        401 	.ds	5
      00000B 32               [24]  402 	reti
      00000C                        403 	.ds	7
      000013 02r00r0C         [24]  404 	ljmp	_int1
                                    405 ;--------------------------------------------------------
                                    406 ; global & static initialisations
                                    407 ;--------------------------------------------------------
                                    408 	.area HOME    (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.area GSFINAL (CODE)
                                    411 	.area GSINIT  (CODE)
                                    412 	.globl __sdcc_gsinit_startup
                                    413 	.globl __sdcc_program_startup
                                    414 	.globl __start__stack
                                    415 	.globl __mcs51_genXINIT
                                    416 	.globl __mcs51_genXRAMCLEAR
                                    417 	.globl __mcs51_genRAMCLEAR
                                    418 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  419 	ljmp	__sdcc_program_startup
                                    420 ;--------------------------------------------------------
                                    421 ; Home
                                    422 ;--------------------------------------------------------
                                    423 	.area HOME    (CODE)
                                    424 	.area HOME    (CODE)
      000016                        425 __sdcc_program_startup:
      000016 02r01r4F         [24]  426 	ljmp	_main
                                    427 ;	return from main will return to caller
                                    428 ;--------------------------------------------------------
                                    429 ; code
                                    430 ;--------------------------------------------------------
                                    431 	.area CSEG    (CODE)
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'int0'
                                    434 ;------------------------------------------------------------
                                    435 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    436 ;	-----------------------------------------
                                    437 ;	 function int0
                                    438 ;	-----------------------------------------
      000000                        439 _int0:
                           00000F   440 	ar7 = 0x0f
                           00000E   441 	ar6 = 0x0e
                           00000D   442 	ar5 = 0x0d
                           00000C   443 	ar4 = 0x0c
                           00000B   444 	ar3 = 0x0b
                           00000A   445 	ar2 = 0x0a
                           000009   446 	ar1 = 0x09
                           000008   447 	ar0 = 0x08
      000000 C0 D0            [24]  448 	push	psw
      000002 75 D0 08         [24]  449 	mov	psw,#0x08
                                    450 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  451 	mov	r0,#_i0
      000007 76 01            [12]  452 	mov	@r0,#0x01
                                    453 ;	life.c:15: }
      000009 D0 D0            [24]  454 	pop	psw
      00000B 32               [24]  455 	reti
                                    456 ;	eliminated unneeded push/pop dpl
                                    457 ;	eliminated unneeded push/pop dph
                                    458 ;	eliminated unneeded push/pop b
                                    459 ;	eliminated unneeded push/pop acc
                                    460 ;------------------------------------------------------------
                                    461 ;Allocation info for local variables in function 'int1'
                                    462 ;------------------------------------------------------------
                                    463 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    464 ;	-----------------------------------------
                                    465 ;	 function int1
                                    466 ;	-----------------------------------------
      00000C                        467 _int1:
      00000C C0 D0            [24]  468 	push	psw
      00000E 75 D0 08         [24]  469 	mov	psw,#0x08
                                    470 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  471 	mov	r0,#_i1
      000013 76 01            [12]  472 	mov	@r0,#0x01
                                    473 ;	life.c:19: }
      000015 D0 D0            [24]  474 	pop	psw
      000017 32               [24]  475 	reti
                                    476 ;	eliminated unneeded push/pop dpl
                                    477 ;	eliminated unneeded push/pop dph
                                    478 ;	eliminated unneeded push/pop b
                                    479 ;	eliminated unneeded push/pop acc
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'flashOE'
                                    482 ;------------------------------------------------------------
                                    483 ;	life.c:29: static void flashOE(void) {
                                    484 ;	-----------------------------------------
                                    485 ;	 function flashOE
                                    486 ;	-----------------------------------------
      000018                        487 _flashOE:
                           000007   488 	ar7 = 0x07
                           000006   489 	ar6 = 0x06
                           000005   490 	ar5 = 0x05
                           000004   491 	ar4 = 0x04
                           000003   492 	ar3 = 0x03
                           000002   493 	ar2 = 0x02
                           000001   494 	ar1 = 0x01
                           000000   495 	ar0 = 0x00
                                    496 ;	life.c:30: OEreg = OE76;
      000018 78r02            [12]  497 	mov	r0,#_OE76
      00001A 90 F0 06         [24]  498 	mov	dptr,#_OEreg
      00001D E6               [12]  499 	mov	a,@r0
      00001E F0               [24]  500 	movx	@dptr,a
                                    501 ;	life.c:32: return;
                                    502 ;	life.c:33: }
      00001F 22               [24]  503 	ret
                                    504 ;------------------------------------------------------------
                                    505 ;Allocation info for local variables in function 'showu'
                                    506 ;------------------------------------------------------------
                                    507 ;universe                  Allocated to stack - _bp -5
                                    508 ;prflags                   Allocated to registers r7 
                                    509 ;------------------------------------------------------------
                                    510 ;	life.c:93: void showu(char prflags, char *universe) {
                                    511 ;	-----------------------------------------
                                    512 ;	 function showu
                                    513 ;	-----------------------------------------
      000020                        514 _showu:
      000020 C0*00            [24]  515 	push	_bp
      000022 85 81*00         [24]  516 	mov	_bp,sp
                                    517 ;	life.c:94: if (prflags & PRCLR) printstr("\033[2J");
      000025 E5 82            [12]  518 	mov	a,dpl
      000027 FF               [12]  519 	mov	r7,a
      000028 30 E0 0D         [24]  520 	jnb	acc.0,00102$
      00002B 90r00r00         [24]  521 	mov	dptr,#___str_0
      00002E 75 F0 80         [24]  522 	mov	b,#0x80
      000031 C0 07            [24]  523 	push	ar7
      000033 12r00r00         [24]  524 	lcall	_printstr
      000036 D0 07            [24]  525 	pop	ar7
      000038                        526 00102$:
                                    527 ;	life.c:95: if (prflags & PRHDR) {
      000038 EF               [12]  528 	mov	a,r7
      000039 30 E1 6B         [24]  529 	jnb	acc.1,00108$
                                    530 ;	life.c:96: printstr("GEN ");
      00003C 90r00r05         [24]  531 	mov	dptr,#___str_1
      00003F 75 F0 80         [24]  532 	mov	b,#0x80
      000042 C0 07            [24]  533 	push	ar7
      000044 12r00r00         [24]  534 	lcall	_printstr
                                    535 ;	life.c:97: print32x(gen);
      000047 78r0A            [12]  536 	mov	r0,#_gen
      000049 86 82            [24]  537 	mov	dpl,@r0
      00004B 08               [12]  538 	inc	r0
      00004C 86 83            [24]  539 	mov	dph,@r0
      00004E 08               [12]  540 	inc	r0
      00004F 86 F0            [24]  541 	mov	b,@r0
      000051 08               [12]  542 	inc	r0
      000052 E6               [12]  543 	mov	a,@r0
      000053 12r00r00         [24]  544 	lcall	_print32x
      000056 D0 07            [24]  545 	pop	ar7
                                    546 ;	life.c:98: if (c2set) {
      000058 78r16            [12]  547 	mov	r0,#_c2set
      00005A E6               [12]  548 	mov	a,@r0
      00005B 60 1C            [24]  549 	jz	00104$
                                    550 ;	life.c:99: printstr(" CYCLE2 ");
      00005D 90r00r0A         [24]  551 	mov	dptr,#___str_2
      000060 75 F0 80         [24]  552 	mov	b,#0x80
      000063 C0 07            [24]  553 	push	ar7
      000065 12r00r00         [24]  554 	lcall	_printstr
                                    555 ;	life.c:100: print32x(genc2);
      000068 78r0E            [12]  556 	mov	r0,#_genc2
      00006A 86 82            [24]  557 	mov	dpl,@r0
      00006C 08               [12]  558 	inc	r0
      00006D 86 83            [24]  559 	mov	dph,@r0
      00006F 08               [12]  560 	inc	r0
      000070 86 F0            [24]  561 	mov	b,@r0
      000072 08               [12]  562 	inc	r0
      000073 E6               [12]  563 	mov	a,@r0
      000074 12r00r00         [24]  564 	lcall	_print32x
      000077 D0 07            [24]  565 	pop	ar7
      000079                        566 00104$:
                                    567 ;	life.c:102: if (fxset) {
      000079 78r17            [12]  568 	mov	r0,#_fxset
      00007B E6               [12]  569 	mov	a,@r0
      00007C 60 1C            [24]  570 	jz	00106$
                                    571 ;	life.c:103: printstr(" FIXED ");
      00007E 90r00r13         [24]  572 	mov	dptr,#___str_3
      000081 75 F0 80         [24]  573 	mov	b,#0x80
      000084 C0 07            [24]  574 	push	ar7
      000086 12r00r00         [24]  575 	lcall	_printstr
                                    576 ;	life.c:104: print32x(genfx);
      000089 78r12            [12]  577 	mov	r0,#_genfx
      00008B 86 82            [24]  578 	mov	dpl,@r0
      00008D 08               [12]  579 	inc	r0
      00008E 86 83            [24]  580 	mov	dph,@r0
      000090 08               [12]  581 	inc	r0
      000091 86 F0            [24]  582 	mov	b,@r0
      000093 08               [12]  583 	inc	r0
      000094 E6               [12]  584 	mov	a,@r0
      000095 12r00r00         [24]  585 	lcall	_print32x
      000098 D0 07            [24]  586 	pop	ar7
      00009A                        587 00106$:
                                    588 ;	life.c:106: printstr("\r\n");
      00009A 90r00r1B         [24]  589 	mov	dptr,#___str_4
      00009D 75 F0 80         [24]  590 	mov	b,#0x80
      0000A0 C0 07            [24]  591 	push	ar7
      0000A2 12r00r00         [24]  592 	lcall	_printstr
      0000A5 D0 07            [24]  593 	pop	ar7
      0000A7                        594 00108$:
                                    595 ;	life.c:108: if (prflags & PRUNI) {
      0000A7 EF               [12]  596 	mov	a,r7
      0000A8 20 E2 03         [24]  597 	jb	acc.2,00166$
      0000AB 02r01r4C         [24]  598 	ljmp	00115$
      0000AE                        599 00166$:
                                    600 ;	life.c:109: printstr("\033[?25l");
      0000AE 90r00r1E         [24]  601 	mov	dptr,#___str_5
      0000B1 75 F0 80         [24]  602 	mov	b,#0x80
      0000B4 12r00r00         [24]  603 	lcall	_printstr
                                    604 ;	life.c:110: for (x = 0; x < W; x++) {
      0000B7 78r03            [12]  605 	mov	r0,#_x
      0000B9 E4               [12]  606 	clr	a
      0000BA F6               [12]  607 	mov	@r0,a
      0000BB 08               [12]  608 	inc	r0
      0000BC F6               [12]  609 	mov	@r0,a
      0000BD                        610 00118$:
                                    611 ;	life.c:111: for (y = 0; y < H; y++)
      0000BD 78r05            [12]  612 	mov	r0,#_y
      0000BF E4               [12]  613 	clr	a
      0000C0 F6               [12]  614 	mov	@r0,a
      0000C1 08               [12]  615 	inc	r0
      0000C2 F6               [12]  616 	mov	@r0,a
      0000C3                        617 00116$:
                                    618 ;	life.c:112: if (universe[A2D(W, y, x)]) putchar((int)'1');
      0000C3 78r05            [12]  619 	mov	r0,#_y
      0000C5 E6               [12]  620 	mov	a,@r0
      0000C6 C0 E0            [24]  621 	push	acc
      0000C8 08               [12]  622 	inc	r0
      0000C9 E6               [12]  623 	mov	a,@r0
      0000CA C0 E0            [24]  624 	push	acc
      0000CC 90 00 30         [24]  625 	mov	dptr,#0x0030
      0000CF 12r00r00         [24]  626 	lcall	__mulint
      0000D2 AE 82            [24]  627 	mov	r6,dpl
      0000D4 AF 83            [24]  628 	mov	r7,dph
      0000D6 15 81            [12]  629 	dec	sp
      0000D8 15 81            [12]  630 	dec	sp
      0000DA 78r03            [12]  631 	mov	r0,#_x
      0000DC E6               [12]  632 	mov	a,@r0
      0000DD 2E               [12]  633 	add	a,r6
      0000DE FE               [12]  634 	mov	r6,a
      0000DF 08               [12]  635 	inc	r0
      0000E0 E6               [12]  636 	mov	a,@r0
      0000E1 3F               [12]  637 	addc	a,r7
      0000E2 FF               [12]  638 	mov	r7,a
      0000E3 E5*00            [12]  639 	mov	a,_bp
      0000E5 24 FB            [12]  640 	add	a,#0xfb
      0000E7 F8               [12]  641 	mov	r0,a
      0000E8 EE               [12]  642 	mov	a,r6
      0000E9 26               [12]  643 	add	a,@r0
      0000EA FE               [12]  644 	mov	r6,a
      0000EB EF               [12]  645 	mov	a,r7
      0000EC 08               [12]  646 	inc	r0
      0000ED 36               [12]  647 	addc	a,@r0
      0000EE FF               [12]  648 	mov	r7,a
      0000EF 08               [12]  649 	inc	r0
      0000F0 86 05            [24]  650 	mov	ar5,@r0
      0000F2 8E 82            [24]  651 	mov	dpl,r6
      0000F4 8F 83            [24]  652 	mov	dph,r7
      0000F6 8D F0            [24]  653 	mov	b,r5
      0000F8 12r00r00         [24]  654 	lcall	__gptrget
      0000FB 60 08            [24]  655 	jz	00110$
      0000FD 90 00 31         [24]  656 	mov	dptr,#0x0031
      000100 12r00r00         [24]  657 	lcall	_putchar
      000103 80 06            [24]  658 	sjmp	00117$
      000105                        659 00110$:
                                    660 ;	life.c:113: else putchar((int)'0');
      000105 90 00 30         [24]  661 	mov	dptr,#0x0030
      000108 12r00r00         [24]  662 	lcall	_putchar
      00010B                        663 00117$:
                                    664 ;	life.c:111: for (y = 0; y < H; y++)
      00010B 78r05            [12]  665 	mov	r0,#_y
      00010D 06               [12]  666 	inc	@r0
      00010E B6 00 02         [24]  667 	cjne	@r0,#0x00,00168$
      000111 08               [12]  668 	inc	r0
      000112 06               [12]  669 	inc	@r0
      000113                        670 00168$:
      000113 78r05            [12]  671 	mov	r0,#_y
      000115 C3               [12]  672 	clr	c
      000116 E6               [12]  673 	mov	a,@r0
      000117 94 C0            [12]  674 	subb	a,#0xc0
      000119 08               [12]  675 	inc	r0
      00011A E6               [12]  676 	mov	a,@r0
      00011B 64 80            [12]  677 	xrl	a,#0x80
      00011D 94 80            [12]  678 	subb	a,#0x80
      00011F 40 A2            [24]  679 	jc	00116$
                                    680 ;	life.c:114: printstr("\r\n");
      000121 90r00r1B         [24]  681 	mov	dptr,#___str_4
      000124 75 F0 80         [24]  682 	mov	b,#0x80
      000127 12r00r00         [24]  683 	lcall	_printstr
                                    684 ;	life.c:110: for (x = 0; x < W; x++) {
      00012A 78r03            [12]  685 	mov	r0,#_x
      00012C 06               [12]  686 	inc	@r0
      00012D B6 00 02         [24]  687 	cjne	@r0,#0x00,00170$
      000130 08               [12]  688 	inc	r0
      000131 06               [12]  689 	inc	@r0
      000132                        690 00170$:
      000132 78r03            [12]  691 	mov	r0,#_x
      000134 C3               [12]  692 	clr	c
      000135 E6               [12]  693 	mov	a,@r0
      000136 94 30            [12]  694 	subb	a,#0x30
      000138 08               [12]  695 	inc	r0
      000139 E6               [12]  696 	mov	a,@r0
      00013A 64 80            [12]  697 	xrl	a,#0x80
      00013C 94 80            [12]  698 	subb	a,#0x80
      00013E 50 03            [24]  699 	jnc	00171$
      000140 02r00rBD         [24]  700 	ljmp	00118$
      000143                        701 00171$:
                                    702 ;	life.c:116: printstr("\033[?25h");
      000143 90r00r25         [24]  703 	mov	dptr,#___str_6
      000146 75 F0 80         [24]  704 	mov	b,#0x80
      000149 12r00r00         [24]  705 	lcall	_printstr
      00014C                        706 00115$:
                                    707 ;	life.c:119: return;
                                    708 ;	life.c:120: }
      00014C D0*00            [24]  709 	pop	_bp
      00014E 22               [24]  710 	ret
                                    711 ;------------------------------------------------------------
                                    712 ;Allocation info for local variables in function 'main'
                                    713 ;------------------------------------------------------------
                                    714 ;c                         Allocated to registers r6 r7 
                                    715 ;nbits                     Allocated to registers r4 r5 
                                    716 ;c                         Allocated to stack - _bp +10
                                    717 ;__3932160006              Allocated to registers 
                                    718 ;__4587520011              Allocated to registers 
                                    719 ;sloc0                     Allocated to stack - _bp +1
                                    720 ;sloc1                     Allocated to stack - _bp +2
                                    721 ;sloc2                     Allocated to stack - _bp +4
                                    722 ;sloc3                     Allocated to stack - _bp +6
                                    723 ;sloc4                     Allocated to stack - _bp +8
                                    724 ;------------------------------------------------------------
                                    725 ;	life.c:227: void main(void) {
                                    726 ;	-----------------------------------------
                                    727 ;	 function main
                                    728 ;	-----------------------------------------
      00014F                        729 _main:
      00014F C0*00            [24]  730 	push	_bp
      000151 E5 81            [12]  731 	mov	a,sp
      000153 F5*00            [12]  732 	mov	_bp,a
      000155 24 0B            [12]  733 	add	a,#0x0b
      000157 F5 81            [12]  734 	mov	sp,a
                                    735 ;	life.c:230: IT0 = 1;
                                    736 ;	assignBit
      000159 D2 88            [12]  737 	setb	_IT0
                                    738 ;	life.c:231: IT1 = 1;
                                    739 ;	assignBit
      00015B D2 8A            [12]  740 	setb	_IT1
                                    741 ;	life.c:232: EX0 = 1;
                                    742 ;	assignBit
      00015D D2 A8            [12]  743 	setb	_EX0
                                    744 ;	life.c:233: EX1 = 1;
                                    745 ;	assignBit
      00015F D2 AA            [12]  746 	setb	_EX1
                                    747 ;	life.c:234: EA = 1;
                                    748 ;	assignBit
      000161 D2 AF            [12]  749 	setb	_EA
                                    750 ;	life.c:235: P1_7 = 0;
                                    751 ;	assignBit
      000163 C2 97            [12]  752 	clr	_P1_7
                                    753 ;	life.c:240: __endasm;
      000165 00               [12]  754 	nop
      000166 00               [12]  755 	nop
      000167 00               [12]  756 	nop
                                    757 ;	life.c:242: srand(RND);
      000168 90 E0 00         [24]  758 	mov	dptr,#_RND
      00016B E0               [24]  759 	movx	a,@dptr
      00016C FE               [12]  760 	mov	r6,a
      00016D A3               [24]  761 	inc	dptr
      00016E E0               [24]  762 	movx	a,@dptr
      00016F FF               [12]  763 	mov	r7,a
      000170 8E 82            [24]  764 	mov	dpl,r6
      000172 8F 83            [24]  765 	mov	dph,r7
      000174 12r00r00         [24]  766 	lcall	_srand
                                    767 ;	life.c:244: OE76 = OE76_0;
      000177 78r02            [12]  768 	mov	r0,#_OE76
      000179 76 3F            [12]  769 	mov	@r0,#0x3f
                                    770 ;	life.c:245: flashOE();
      00017B 12r00r18         [24]  771 	lcall	_flashOE
                                    772 ;	life.c:51: gen = 0ul;
      00017E 78r0A            [12]  773 	mov	r0,#_gen
      000180 E4               [12]  774 	clr	a
      000181 F6               [12]  775 	mov	@r0,a
      000182 08               [12]  776 	inc	r0
      000183 F6               [12]  777 	mov	@r0,a
      000184 08               [12]  778 	inc	r0
      000185 F6               [12]  779 	mov	@r0,a
      000186 08               [12]  780 	inc	r0
      000187 F6               [12]  781 	mov	@r0,a
                                    782 ;	life.c:52: genc2 = 0ul;
      000188 78r0E            [12]  783 	mov	r0,#_genc2
      00018A F6               [12]  784 	mov	@r0,a
      00018B 08               [12]  785 	inc	r0
      00018C F6               [12]  786 	mov	@r0,a
      00018D 08               [12]  787 	inc	r0
      00018E F6               [12]  788 	mov	@r0,a
      00018F 08               [12]  789 	inc	r0
      000190 F6               [12]  790 	mov	@r0,a
                                    791 ;	life.c:53: genfx = 0ul;
      000191 78r12            [12]  792 	mov	r0,#_genfx
      000193 F6               [12]  793 	mov	@r0,a
      000194 08               [12]  794 	inc	r0
      000195 F6               [12]  795 	mov	@r0,a
      000196 08               [12]  796 	inc	r0
      000197 F6               [12]  797 	mov	@r0,a
      000198 08               [12]  798 	inc	r0
      000199 F6               [12]  799 	mov	@r0,a
                                    800 ;	life.c:54: c2set = 0;
      00019A 78r16            [12]  801 	mov	r0,#_c2set
      00019C 76 00            [12]  802 	mov	@r0,#0x00
                                    803 ;	life.c:55: fxset = 0;
      00019E 78r17            [12]  804 	mov	r0,#_fxset
      0001A0 76 00            [12]  805 	mov	@r0,#0x00
                                    806 ;	life.c:248: pruni = 0;
      0001A2 78r18            [12]  807 	mov	r0,#_pruni
      0001A4 76 00            [12]  808 	mov	@r0,#0x00
                                    809 ;	life.c:250: printstr("\033[?25h\033[m");
      0001A6 90r00r46         [24]  810 	mov	dptr,#___str_10
      0001A9 75 F0 80         [24]  811 	mov	b,#0x80
      0001AC 12r00r00         [24]  812 	lcall	_printstr
                                    813 ;	life.c:252: for (i0 = 0; !i0; ) {
      0001AF 78r00            [12]  814 	mov	r0,#_i0
      0001B1 76 00            [12]  815 	mov	@r0,#0x00
                                    816 ;	life.c:253: while (1) {
      0001B3                        817 00127$:
                                    818 ;	life.c:254: printstr("LIFE I L R O P S U");
      0001B3 90r00r50         [24]  819 	mov	dptr,#___str_11
      0001B6 75 F0 80         [24]  820 	mov	b,#0x80
      0001B9 12r00r00         [24]  821 	lcall	_printstr
                                    822 ;	life.c:255: putchar(pruni ? (int)'1' : (int)'0');
      0001BC 78r18            [12]  823 	mov	r0,#_pruni
      0001BE E6               [12]  824 	mov	a,@r0
      0001BF 60 06            [24]  825 	jz	00243$
      0001C1 7E 31            [12]  826 	mov	r6,#0x31
      0001C3 7F 00            [12]  827 	mov	r7,#0x00
      0001C5 80 04            [24]  828 	sjmp	00244$
      0001C7                        829 00243$:
      0001C7 7E 30            [12]  830 	mov	r6,#0x30
      0001C9 7F 00            [12]  831 	mov	r7,#0x00
      0001CB                        832 00244$:
      0001CB 8E 82            [24]  833 	mov	dpl,r6
      0001CD 8F 83            [24]  834 	mov	dph,r7
      0001CF 12r00r00         [24]  835 	lcall	_putchar
                                    836 ;	life.c:256: printstr(" B T\r\n");
      0001D2 90r00r63         [24]  837 	mov	dptr,#___str_12
      0001D5 75 F0 80         [24]  838 	mov	b,#0x80
      0001D8 12r00r00         [24]  839 	lcall	_printstr
                                    840 ;	life.c:257: c = toupper(getchar());
      0001DB 12r00r00         [24]  841 	lcall	_getchar
      0001DE 12r00r00         [24]  842 	lcall	_toupper
      0001E1 AE 82            [24]  843 	mov	r6,dpl
      0001E3 AF 83            [24]  844 	mov	r7,dph
                                    845 ;	life.c:258: if (i0 || (c == (int)'T')) goto term;
      0001E5 78r00            [12]  846 	mov	r0,#_i0
      0001E7 E6               [12]  847 	mov	a,@r0
      0001E8 60 03            [24]  848 	jz	00467$
      0001EA 02r0Ar15         [24]  849 	ljmp	00154$
      0001ED                        850 00467$:
      0001ED BE 54 06         [24]  851 	cjne	r6,#0x54,00468$
      0001F0 BF 00 03         [24]  852 	cjne	r7,#0x00,00468$
      0001F3 02r0Ar15         [24]  853 	ljmp	00154$
      0001F6                        854 00468$:
                                    855 ;	life.c:259: else if ((c == (int)'I') || (c == (int)'L') || (c == (int)'R')) {
      0001F6 BE 49 05         [24]  856 	cjne	r6,#0x49,00469$
      0001F9 BF 00 02         [24]  857 	cjne	r7,#0x00,00469$
      0001FC 80 13            [24]  858 	sjmp	00117$
      0001FE                        859 00469$:
      0001FE BE 4C 05         [24]  860 	cjne	r6,#0x4c,00470$
      000201 BF 00 02         [24]  861 	cjne	r7,#0x00,00470$
      000204 80 0B            [24]  862 	sjmp	00117$
      000206                        863 00470$:
      000206 BE 52 05         [24]  864 	cjne	r6,#0x52,00471$
      000209 BF 00 02         [24]  865 	cjne	r7,#0x00,00471$
      00020C 80 03            [24]  866 	sjmp	00472$
      00020E                        867 00471$:
      00020E 02r04r47         [24]  868 	ljmp	00118$
      000211                        869 00472$:
      000211                        870 00117$:
                                    871 ;	life.c:260: if (c == (int)'L') loadiu();
      000211 BE 4C 05         [24]  872 	cjne	r6,#0x4c,00473$
      000214 BF 00 02         [24]  873 	cjne	r7,#0x00,00473$
      000217 80 03            [24]  874 	sjmp	00474$
      000219                        875 00473$:
      000219 02r03r56         [24]  876 	ljmp	00104$
      00021C                        877 00474$:
                                    878 ;	life.c:133: memset(iu, 0, sizeof (iu));
      00021C E4               [12]  879 	clr	a
      00021D C0 E0            [24]  880 	push	acc
      00021F 74 24            [12]  881 	mov	a,#0x24
      000221 C0 E0            [24]  882 	push	acc
      000223 E4               [12]  883 	clr	a
      000224 C0 E0            [24]  884 	push	acc
      000226 90r00r00         [24]  885 	mov	dptr,#_iu
      000229 75 F0 00         [24]  886 	mov	b,#0x00
      00022C 12r00r00         [24]  887 	lcall	_memset
      00022F 15 81            [12]  888 	dec	sp
      000231 15 81            [12]  889 	dec	sp
      000233 15 81            [12]  890 	dec	sp
                                    891 ;	life.c:135: printstr("LOAD 0 1 ~ # <");
      000235 90r00r2C         [24]  892 	mov	dptr,#___str_7
      000238 75 F0 80         [24]  893 	mov	b,#0x80
      00023B 12r00r00         [24]  894 	lcall	_printstr
                                    895 ;	life.c:137: for (nbits = 0, y = 0; y < (H * W); y += W) {
      00023E 7C 00            [12]  896 	mov	r4,#0x00
      000240 7D 00            [12]  897 	mov	r5,#0x00
      000242 78r05            [12]  898 	mov	r0,#_y
      000244 E4               [12]  899 	clr	a
      000245 F6               [12]  900 	mov	@r0,a
      000246 08               [12]  901 	inc	r0
      000247 F6               [12]  902 	mov	@r0,a
      000248                        903 00225$:
      000248 78r05            [12]  904 	mov	r0,#_y
      00024A C3               [12]  905 	clr	c
      00024B 08               [12]  906 	inc	r0
      00024C E6               [12]  907 	mov	a,@r0
      00024D 64 80            [12]  908 	xrl	a,#0x80
      00024F 94 A4            [12]  909 	subb	a,#0xa4
      000251 40 03            [24]  910 	jc	00475$
      000253 02r03r11         [24]  911 	ljmp	00181$
      000256                        912 00475$:
                                    913 ;	life.c:138: for (x = 0; x < W; x++) {
      000256 78r03            [12]  914 	mov	r0,#_x
      000258 E4               [12]  915 	clr	a
      000259 F6               [12]  916 	mov	@r0,a
      00025A 08               [12]  917 	inc	r0
      00025B F6               [12]  918 	mov	@r0,a
                                    919 ;	life.c:139: while (1) {
      00025C                        920 00168$:
                                    921 ;	life.c:140: c = getchar();
      00025C C0 05            [24]  922 	push	ar5
      00025E C0 04            [24]  923 	push	ar4
      000260 12r00r00         [24]  924 	lcall	_getchar
      000263 AA 82            [24]  925 	mov	r2,dpl
      000265 AB 83            [24]  926 	mov	r3,dph
      000267 D0 04            [24]  927 	pop	ar4
      000269 D0 05            [24]  928 	pop	ar5
      00026B E5*00            [12]  929 	mov	a,_bp
      00026D 24 0A            [12]  930 	add	a,#0x0a
      00026F F8               [12]  931 	mov	r0,a
      000270 A6 02            [24]  932 	mov	@r0,ar2
      000272 08               [12]  933 	inc	r0
      000273 A6 03            [24]  934 	mov	@r0,ar3
                                    935 ;	life.c:141: if (c == (int)'0') {
      000275 E5*00            [12]  936 	mov	a,_bp
      000277 24 0A            [12]  937 	add	a,#0x0a
      000279 F8               [12]  938 	mov	r0,a
      00027A B6 30 23         [24]  939 	cjne	@r0,#0x30,00166$
      00027D 08               [12]  940 	inc	r0
      00027E B6 00 1F         [24]  941 	cjne	@r0,#0x00,00166$
                                    942 ;	life.c:142: iu[y + x] = 0;
      000281 78r05            [12]  943 	mov	r0,#_y
      000283 79r03            [12]  944 	mov	r1,#_x
      000285 E7               [12]  945 	mov	a,@r1
      000286 26               [12]  946 	add	a,@r0
      000287 FA               [12]  947 	mov	r2,a
      000288 09               [12]  948 	inc	r1
      000289 E7               [12]  949 	mov	a,@r1
      00028A 08               [12]  950 	inc	r0
      00028B 36               [12]  951 	addc	a,@r0
      00028C FB               [12]  952 	mov	r3,a
      00028D EA               [12]  953 	mov	a,r2
      00028E 24r00            [12]  954 	add	a,#_iu
      000290 F5 82            [12]  955 	mov	dpl,a
      000292 EB               [12]  956 	mov	a,r3
      000293 34s00            [12]  957 	addc	a,#(_iu >> 8)
      000295 F5 83            [12]  958 	mov	dph,a
      000297 E4               [12]  959 	clr	a
      000298 F0               [24]  960 	movx	@dptr,a
                                    961 ;	life.c:143: nbits++;
      000299 0C               [12]  962 	inc	r4
                                    963 ;	life.c:144: break;
      00029A BC 00 4E         [24]  964 	cjne	r4,#0x00,00171$
      00029D 0D               [12]  965 	inc	r5
      00029E 80 4B            [24]  966 	sjmp	00171$
      0002A0                        967 00166$:
                                    968 ;	life.c:145: } else if (c == (int)'1') {
      0002A0 E5*00            [12]  969 	mov	a,_bp
      0002A2 24 0A            [12]  970 	add	a,#0x0a
      0002A4 F8               [12]  971 	mov	r0,a
      0002A5 B6 31 24         [24]  972 	cjne	@r0,#0x31,00164$
      0002A8 08               [12]  973 	inc	r0
      0002A9 B6 00 20         [24]  974 	cjne	@r0,#0x00,00164$
                                    975 ;	life.c:146: iu[y + x] = 1;
      0002AC 78r05            [12]  976 	mov	r0,#_y
      0002AE 79r03            [12]  977 	mov	r1,#_x
      0002B0 E7               [12]  978 	mov	a,@r1
      0002B1 26               [12]  979 	add	a,@r0
      0002B2 FA               [12]  980 	mov	r2,a
      0002B3 09               [12]  981 	inc	r1
      0002B4 E7               [12]  982 	mov	a,@r1
      0002B5 08               [12]  983 	inc	r0
      0002B6 36               [12]  984 	addc	a,@r0
      0002B7 FB               [12]  985 	mov	r3,a
      0002B8 EA               [12]  986 	mov	a,r2
      0002B9 24r00            [12]  987 	add	a,#_iu
      0002BB F5 82            [12]  988 	mov	dpl,a
      0002BD EB               [12]  989 	mov	a,r3
      0002BE 34s00            [12]  990 	addc	a,#(_iu >> 8)
      0002C0 F5 83            [12]  991 	mov	dph,a
      0002C2 74 01            [12]  992 	mov	a,#0x01
      0002C4 F0               [24]  993 	movx	@dptr,a
                                    994 ;	life.c:147: nbits++;
      0002C5 0C               [12]  995 	inc	r4
                                    996 ;	life.c:148: break;
      0002C6 BC 00 22         [24]  997 	cjne	r4,#0x00,00171$
      0002C9 0D               [12]  998 	inc	r5
      0002CA 80 1F            [24]  999 	sjmp	00171$
      0002CC                       1000 00164$:
                                   1001 ;	life.c:149: } else if (c == (int)'~') goto br_inner;
      0002CC E5*00            [12] 1002 	mov	a,_bp
      0002CE 24 0A            [12] 1003 	add	a,#0x0a
      0002D0 F8               [12] 1004 	mov	r0,a
      0002D1 B6 7E 06         [24] 1005 	cjne	@r0,#0x7e,00482$
      0002D4 08               [12] 1006 	inc	r0
      0002D5 B6 00 02         [24] 1007 	cjne	@r0,#0x00,00482$
      0002D8 80 2A            [24] 1008 	sjmp	00226$
      0002DA                       1009 00482$:
                                   1010 ;	life.c:150: else if (c == (int)'#') goto out;
      0002DA E5*00            [12] 1011 	mov	a,_bp
      0002DC 24 0A            [12] 1012 	add	a,#0x0a
      0002DE F8               [12] 1013 	mov	r0,a
      0002DF B6 23 06         [24] 1014 	cjne	@r0,#0x23,00483$
      0002E2 08               [12] 1015 	inc	r0
      0002E3 B6 00 02         [24] 1016 	cjne	@r0,#0x00,00483$
      0002E6 80 29            [24] 1017 	sjmp	00181$
      0002E8                       1018 00483$:
      0002E8 02r02r5C         [24] 1019 	ljmp	00168$
                                   1020 ;	life.c:154: break;
      0002EB                       1021 00171$:
                                   1022 ;	life.c:138: for (x = 0; x < W; x++) {
      0002EB 78r03            [12] 1023 	mov	r0,#_x
      0002ED 06               [12] 1024 	inc	@r0
      0002EE B6 00 02         [24] 1025 	cjne	@r0,#0x00,00484$
      0002F1 08               [12] 1026 	inc	r0
      0002F2 06               [12] 1027 	inc	@r0
      0002F3                       1028 00484$:
      0002F3 78r03            [12] 1029 	mov	r0,#_x
      0002F5 C3               [12] 1030 	clr	c
      0002F6 E6               [12] 1031 	mov	a,@r0
      0002F7 94 30            [12] 1032 	subb	a,#0x30
      0002F9 08               [12] 1033 	inc	r0
      0002FA E6               [12] 1034 	mov	a,@r0
      0002FB 64 80            [12] 1035 	xrl	a,#0x80
      0002FD 94 80            [12] 1036 	subb	a,#0x80
      0002FF 50 03            [24] 1037 	jnc	00485$
      000301 02r02r5C         [24] 1038 	ljmp	00168$
      000304                       1039 00485$:
      000304                       1040 00226$:
                                   1041 ;	life.c:137: for (nbits = 0, y = 0; y < (H * W); y += W) {
      000304 78r05            [12] 1042 	mov	r0,#_y
      000306 74 30            [12] 1043 	mov	a,#0x30
      000308 26               [12] 1044 	add	a,@r0
      000309 F6               [12] 1045 	mov	@r0,a
      00030A E4               [12] 1046 	clr	a
      00030B 08               [12] 1047 	inc	r0
      00030C 36               [12] 1048 	addc	a,@r0
      00030D F6               [12] 1049 	mov	@r0,a
      00030E 02r02r48         [24] 1050 	ljmp	00225$
                                   1051 ;	life.c:158: out:
      000311                       1052 00181$:
                                   1053 ;	life.c:159: if (c != (int)'#')
      000311 E5*00            [12] 1054 	mov	a,_bp
      000313 24 0A            [12] 1055 	add	a,#0x0a
      000315 F8               [12] 1056 	mov	r0,a
      000316 B6 23 06         [24] 1057 	cjne	@r0,#0x23,00486$
      000319 08               [12] 1058 	inc	r0
      00031A B6 00 02         [24] 1059 	cjne	@r0,#0x00,00486$
      00031D 80 25            [24] 1060 	sjmp	00180$
      00031F                       1061 00486$:
                                   1062 ;	life.c:160: while (1) {
      00031F                       1063 00177$:
                                   1064 ;	life.c:161: c = getchar();
      00031F C0 05            [24] 1065 	push	ar5
      000321 C0 04            [24] 1066 	push	ar4
      000323 12r00r00         [24] 1067 	lcall	_getchar
      000326 AA 82            [24] 1068 	mov	r2,dpl
      000328 AB 83            [24] 1069 	mov	r3,dph
      00032A D0 04            [24] 1070 	pop	ar4
      00032C D0 05            [24] 1071 	pop	ar5
      00032E E5*00            [12] 1072 	mov	a,_bp
      000330 24 0A            [12] 1073 	add	a,#0x0a
      000332 F8               [12] 1074 	mov	r0,a
      000333 A6 02            [24] 1075 	mov	@r0,ar2
      000335 08               [12] 1076 	inc	r0
      000336 A6 03            [24] 1077 	mov	@r0,ar3
                                   1078 ;	life.c:162: if (c == (int)'#') break;
      000338 E5*00            [12] 1079 	mov	a,_bp
      00033A 24 0A            [12] 1080 	add	a,#0x0a
      00033C F8               [12] 1081 	mov	r0,a
      00033D B6 23 DF         [24] 1082 	cjne	@r0,#0x23,00177$
      000340 08               [12] 1083 	inc	r0
      000341 B6 00 DB         [24] 1084 	cjne	@r0,#0x00,00177$
      000344                       1085 00180$:
                                   1086 ;	life.c:164: print16x(nbits);
      000344 8C 82            [24] 1087 	mov	dpl,r4
      000346 8D 83            [24] 1088 	mov	dph,r5
      000348 12r00r00         [24] 1089 	lcall	_print16x
                                   1090 ;	life.c:165: printstr(">\r\n");
      00034B 90r00r3B         [24] 1091 	mov	dptr,#___str_8
      00034E 75 F0 80         [24] 1092 	mov	b,#0x80
      000351 12r00r00         [24] 1093 	lcall	_printstr
                                   1094 ;	life.c:260: if (c == (int)'L') loadiu();
      000354 80 79            [24] 1095 	sjmp	00105$
      000356                       1096 00104$:
                                   1097 ;	life.c:261: else if (c == (int)'R') loadriu();
      000356 BE 52 76         [24] 1098 	cjne	r6,#0x52,00105$
      000359 BF 00 73         [24] 1099 	cjne	r7,#0x00,00105$
                                   1100 ;	life.c:171: printstr("RANDOM");
      00035C 90r00r3F         [24] 1101 	mov	dptr,#___str_9
      00035F 75 F0 80         [24] 1102 	mov	b,#0x80
      000362 12r00r00         [24] 1103 	lcall	_printstr
                                   1104 ;	life.c:173: for (y = 0; y < (H * W); y += W)
      000365 78r05            [12] 1105 	mov	r0,#_y
      000367 E4               [12] 1106 	clr	a
      000368 F6               [12] 1107 	mov	@r0,a
      000369 08               [12] 1108 	inc	r0
      00036A F6               [12] 1109 	mov	@r0,a
      00036B                       1110 00229$:
                                   1111 ;	life.c:174: for (x = 0; x < W; x++)
      00036B 78r03            [12] 1112 	mov	r0,#_x
      00036D E4               [12] 1113 	clr	a
      00036E F6               [12] 1114 	mov	@r0,a
      00036F 08               [12] 1115 	inc	r0
      000370 F6               [12] 1116 	mov	@r0,a
      000371                       1117 00227$:
                                   1118 ;	life.c:175: iu[y + x] = rand() & 1;
      000371 78r05            [12] 1119 	mov	r0,#_y
      000373 79r03            [12] 1120 	mov	r1,#_x
      000375 E7               [12] 1121 	mov	a,@r1
      000376 26               [12] 1122 	add	a,@r0
      000377 FC               [12] 1123 	mov	r4,a
      000378 09               [12] 1124 	inc	r1
      000379 E7               [12] 1125 	mov	a,@r1
      00037A 08               [12] 1126 	inc	r0
      00037B 36               [12] 1127 	addc	a,@r0
      00037C FD               [12] 1128 	mov	r5,a
      00037D EC               [12] 1129 	mov	a,r4
      00037E 24r00            [12] 1130 	add	a,#_iu
      000380 FC               [12] 1131 	mov	r4,a
      000381 ED               [12] 1132 	mov	a,r5
      000382 34s00            [12] 1133 	addc	a,#(_iu >> 8)
      000384 FD               [12] 1134 	mov	r5,a
      000385 C0 05            [24] 1135 	push	ar5
      000387 C0 04            [24] 1136 	push	ar4
      000389 12r00r00         [24] 1137 	lcall	_rand
      00038C AA 82            [24] 1138 	mov	r2,dpl
      00038E D0 04            [24] 1139 	pop	ar4
      000390 D0 05            [24] 1140 	pop	ar5
      000392 53 02 01         [24] 1141 	anl	ar2,#0x01
      000395 8C 82            [24] 1142 	mov	dpl,r4
      000397 8D 83            [24] 1143 	mov	dph,r5
      000399 EA               [12] 1144 	mov	a,r2
      00039A F0               [24] 1145 	movx	@dptr,a
                                   1146 ;	life.c:174: for (x = 0; x < W; x++)
      00039B 78r03            [12] 1147 	mov	r0,#_x
      00039D 06               [12] 1148 	inc	@r0
      00039E B6 00 02         [24] 1149 	cjne	@r0,#0x00,00491$
      0003A1 08               [12] 1150 	inc	r0
      0003A2 06               [12] 1151 	inc	@r0
      0003A3                       1152 00491$:
      0003A3 78r03            [12] 1153 	mov	r0,#_x
      0003A5 C3               [12] 1154 	clr	c
      0003A6 E6               [12] 1155 	mov	a,@r0
      0003A7 94 30            [12] 1156 	subb	a,#0x30
      0003A9 08               [12] 1157 	inc	r0
      0003AA E6               [12] 1158 	mov	a,@r0
      0003AB 64 80            [12] 1159 	xrl	a,#0x80
      0003AD 94 80            [12] 1160 	subb	a,#0x80
      0003AF 40 C0            [24] 1161 	jc	00227$
                                   1162 ;	life.c:173: for (y = 0; y < (H * W); y += W)
      0003B1 78r05            [12] 1163 	mov	r0,#_y
      0003B3 74 30            [12] 1164 	mov	a,#0x30
      0003B5 26               [12] 1165 	add	a,@r0
      0003B6 F6               [12] 1166 	mov	@r0,a
      0003B7 E4               [12] 1167 	clr	a
      0003B8 08               [12] 1168 	inc	r0
      0003B9 36               [12] 1169 	addc	a,@r0
      0003BA F6               [12] 1170 	mov	@r0,a
      0003BB 78r05            [12] 1171 	mov	r0,#_y
      0003BD C3               [12] 1172 	clr	c
      0003BE 08               [12] 1173 	inc	r0
      0003BF E6               [12] 1174 	mov	a,@r0
      0003C0 64 80            [12] 1175 	xrl	a,#0x80
      0003C2 94 A4            [12] 1176 	subb	a,#0xa4
      0003C4 40 A5            [24] 1177 	jc	00229$
                                   1178 ;	life.c:177: printstr("\r\n");
      0003C6 90r00r1B         [24] 1179 	mov	dptr,#___str_4
      0003C9 75 F0 80         [24] 1180 	mov	b,#0x80
      0003CC 12r00r00         [24] 1181 	lcall	_printstr
                                   1182 ;	life.c:261: else if (c == (int)'R') loadriu();
      0003CF                       1183 00105$:
                                   1184 ;	life.c:123: memcpy(u, iu, sizeof (iu));
      0003CF E4               [12] 1185 	clr	a
      0003D0 C0 E0            [24] 1186 	push	acc
      0003D2 74 24            [12] 1187 	mov	a,#0x24
      0003D4 C0 E0            [24] 1188 	push	acc
      0003D6 74r00            [12] 1189 	mov	a,#_iu
      0003D8 C0 E0            [24] 1190 	push	acc
      0003DA 74s00            [12] 1191 	mov	a,#(_iu >> 8)
      0003DC C0 E0            [24] 1192 	push	acc
      0003DE E4               [12] 1193 	clr	a
      0003DF C0 E0            [24] 1194 	push	acc
      0003E1 90r48r00         [24] 1195 	mov	dptr,#_u
      0003E4 75 F0 00         [24] 1196 	mov	b,#0x00
      0003E7 12r00r00         [24] 1197 	lcall	___memcpy
      0003EA E5 81            [12] 1198 	mov	a,sp
      0003EC 24 FB            [12] 1199 	add	a,#0xfb
      0003EE F5 81            [12] 1200 	mov	sp,a
                                   1201 ;	life.c:124: memset(pu, 0, sizeof (pu));
      0003F0 E4               [12] 1202 	clr	a
      0003F1 C0 E0            [24] 1203 	push	acc
      0003F3 74 24            [12] 1204 	mov	a,#0x24
      0003F5 C0 E0            [24] 1205 	push	acc
      0003F7 E4               [12] 1206 	clr	a
      0003F8 C0 E0            [24] 1207 	push	acc
      0003FA 90r24r00         [24] 1208 	mov	dptr,#_pu
      0003FD 75 F0 00         [24] 1209 	mov	b,#0x00
      000400 12r00r00         [24] 1210 	lcall	_memset
      000403 15 81            [12] 1211 	dec	sp
      000405 15 81            [12] 1212 	dec	sp
      000407 15 81            [12] 1213 	dec	sp
                                   1214 ;	life.c:51: gen = 0ul;
      000409 78r0A            [12] 1215 	mov	r0,#_gen
      00040B E4               [12] 1216 	clr	a
      00040C F6               [12] 1217 	mov	@r0,a
      00040D 08               [12] 1218 	inc	r0
      00040E F6               [12] 1219 	mov	@r0,a
      00040F 08               [12] 1220 	inc	r0
      000410 F6               [12] 1221 	mov	@r0,a
      000411 08               [12] 1222 	inc	r0
      000412 F6               [12] 1223 	mov	@r0,a
                                   1224 ;	life.c:52: genc2 = 0ul;
      000413 78r0E            [12] 1225 	mov	r0,#_genc2
      000415 F6               [12] 1226 	mov	@r0,a
      000416 08               [12] 1227 	inc	r0
      000417 F6               [12] 1228 	mov	@r0,a
      000418 08               [12] 1229 	inc	r0
      000419 F6               [12] 1230 	mov	@r0,a
      00041A 08               [12] 1231 	inc	r0
      00041B F6               [12] 1232 	mov	@r0,a
                                   1233 ;	life.c:53: genfx = 0ul;
      00041C 78r12            [12] 1234 	mov	r0,#_genfx
      00041E F6               [12] 1235 	mov	@r0,a
      00041F 08               [12] 1236 	inc	r0
      000420 F6               [12] 1237 	mov	@r0,a
      000421 08               [12] 1238 	inc	r0
      000422 F6               [12] 1239 	mov	@r0,a
      000423 08               [12] 1240 	inc	r0
      000424 F6               [12] 1241 	mov	@r0,a
                                   1242 ;	life.c:54: c2set = 0;
      000425 78r16            [12] 1243 	mov	r0,#_c2set
      000427 76 00            [12] 1244 	mov	@r0,#0x00
                                   1245 ;	life.c:55: fxset = 0;
      000429 78r17            [12] 1246 	mov	r0,#_fxset
      00042B 76 00            [12] 1247 	mov	@r0,#0x00
                                   1248 ;	life.c:263: showu(PRUNI, u);
      00042D 74r00            [12] 1249 	mov	a,#_u
      00042F C0 E0            [24] 1250 	push	acc
      000431 74s48            [12] 1251 	mov	a,#(_u >> 8)
      000433 C0 E0            [24] 1252 	push	acc
      000435 E4               [12] 1253 	clr	a
      000436 C0 E0            [24] 1254 	push	acc
      000438 75 82 04         [24] 1255 	mov	dpl,#0x04
      00043B 12r00r20         [24] 1256 	lcall	_showu
      00043E 15 81            [12] 1257 	dec	sp
      000440 15 81            [12] 1258 	dec	sp
      000442 15 81            [12] 1259 	dec	sp
      000444 02r01rB3         [24] 1260 	ljmp	00127$
      000447                       1261 00118$:
                                   1262 ;	life.c:264: } else if (c == (int)'O') showu(PRUNI, iu);
      000447 BE 4F 1D         [24] 1263 	cjne	r6,#0x4f,00115$
      00044A BF 00 1A         [24] 1264 	cjne	r7,#0x00,00115$
      00044D 74r00            [12] 1265 	mov	a,#_iu
      00044F C0 E0            [24] 1266 	push	acc
      000451 74s00            [12] 1267 	mov	a,#(_iu >> 8)
      000453 C0 E0            [24] 1268 	push	acc
      000455 E4               [12] 1269 	clr	a
      000456 C0 E0            [24] 1270 	push	acc
      000458 75 82 04         [24] 1271 	mov	dpl,#0x04
      00045B 12r00r20         [24] 1272 	lcall	_showu
      00045E 15 81            [12] 1273 	dec	sp
      000460 15 81            [12] 1274 	dec	sp
      000462 15 81            [12] 1275 	dec	sp
      000464 02r01rB3         [24] 1276 	ljmp	00127$
      000467                       1277 00115$:
                                   1278 ;	life.c:265: else if (c == (int)'P') showu(PRHDR | PRUNI, u);
      000467 BE 50 1D         [24] 1279 	cjne	r6,#0x50,00112$
      00046A BF 00 1A         [24] 1280 	cjne	r7,#0x00,00112$
      00046D 74r00            [12] 1281 	mov	a,#_u
      00046F C0 E0            [24] 1282 	push	acc
      000471 74s48            [12] 1283 	mov	a,#(_u >> 8)
      000473 C0 E0            [24] 1284 	push	acc
      000475 E4               [12] 1285 	clr	a
      000476 C0 E0            [24] 1286 	push	acc
      000478 75 82 06         [24] 1287 	mov	dpl,#0x06
      00047B 12r00r20         [24] 1288 	lcall	_showu
      00047E 15 81            [12] 1289 	dec	sp
      000480 15 81            [12] 1290 	dec	sp
      000482 15 81            [12] 1291 	dec	sp
      000484 02r01rB3         [24] 1292 	ljmp	00127$
      000487                       1293 00112$:
                                   1294 ;	life.c:266: else if (c == (int)'U') pruni = !pruni;
      000487 BE 55 13         [24] 1295 	cjne	r6,#0x55,00109$
      00048A BF 00 10         [24] 1296 	cjne	r7,#0x00,00109$
      00048D 78r18            [12] 1297 	mov	r0,#_pruni
      00048F E6               [12] 1298 	mov	a,@r0
      000490 B4 01 00         [24] 1299 	cjne	a,#0x01,00500$
      000493                       1300 00500$:
      000493 92*00            [24] 1301 	mov	b0,c
      000495 78r18            [12] 1302 	mov	r0,#_pruni
      000497 E4               [12] 1303 	clr	a
      000498 33               [12] 1304 	rlc	a
      000499 F6               [12] 1305 	mov	@r0,a
      00049A 02r01rB3         [24] 1306 	ljmp	00127$
      00049D                       1307 00109$:
                                   1308 ;	life.c:267: else if (c == (int)'S') break;
      00049D BE 53 05         [24] 1309 	cjne	r6,#0x53,00501$
      0004A0 BF 00 02         [24] 1310 	cjne	r7,#0x00,00501$
      0004A3 80 03            [24] 1311 	sjmp	00502$
      0004A5                       1312 00501$:
      0004A5 02r01rB3         [24] 1313 	ljmp	00127$
      0004A8                       1314 00502$:
                                   1315 ;	life.c:270: for (i1 = 0; !i0 && !i1; ) {
      0004A8 78r01            [12] 1316 	mov	r0,#_i1
      0004AA 76 00            [12] 1317 	mov	@r0,#0x00
      0004AC                       1318 00237$:
      0004AC 78r00            [12] 1319 	mov	r0,#_i0
      0004AE E6               [12] 1320 	mov	a,@r0
      0004AF 60 03            [24] 1321 	jz	00503$
      0004B1 02r09rE8         [24] 1322 	ljmp	00150$
      0004B4                       1323 00503$:
      0004B4 78r01            [12] 1324 	mov	r0,#_i1
      0004B6 E6               [12] 1325 	mov	a,@r0
      0004B7 60 03            [24] 1326 	jz	00504$
      0004B9 02r09rE8         [24] 1327 	ljmp	00150$
      0004BC                       1328 00504$:
                                   1329 ;	life.c:271: if (fxu()) {
      0004BC 78r17            [12] 1330 	mov	r0,#_fxset
      0004BE E6               [12] 1331 	mov	a,@r0
      0004BF 60 23            [24] 1332 	jz	00130$
                                   1333 ;	life.c:272: printstr("FIXED AT ");
      0004C1 90r00r6A         [24] 1334 	mov	dptr,#___str_13
      0004C4 75 F0 80         [24] 1335 	mov	b,#0x80
      0004C7 12r00r00         [24] 1336 	lcall	_printstr
                                   1337 ;	life.c:273: showu(PRHDR, u);
      0004CA 74r00            [12] 1338 	mov	a,#_u
      0004CC C0 E0            [24] 1339 	push	acc
      0004CE 74s48            [12] 1340 	mov	a,#(_u >> 8)
      0004D0 C0 E0            [24] 1341 	push	acc
      0004D2 E4               [12] 1342 	clr	a
      0004D3 C0 E0            [24] 1343 	push	acc
      0004D5 75 82 02         [24] 1344 	mov	dpl,#0x02
      0004D8 12r00r20         [24] 1345 	lcall	_showu
      0004DB 15 81            [12] 1346 	dec	sp
      0004DD 15 81            [12] 1347 	dec	sp
      0004DF 15 81            [12] 1348 	dec	sp
                                   1349 ;	life.c:274: break;
      0004E1 02r09rE8         [24] 1350 	ljmp	00150$
      0004E4                       1351 00130$:
                                   1352 ;	life.c:276: if (pruni) showu(PRCLR | PRHDR | PRUNI, u);
      0004E4 78r18            [12] 1353 	mov	r0,#_pruni
      0004E6 E6               [12] 1354 	mov	a,@r0
      0004E7 60 19            [24] 1355 	jz	00132$
      0004E9 74r00            [12] 1356 	mov	a,#_u
      0004EB C0 E0            [24] 1357 	push	acc
      0004ED 74s48            [12] 1358 	mov	a,#(_u >> 8)
      0004EF C0 E0            [24] 1359 	push	acc
      0004F1 E4               [12] 1360 	clr	a
      0004F2 C0 E0            [24] 1361 	push	acc
      0004F4 75 82 07         [24] 1362 	mov	dpl,#0x07
      0004F7 12r00r20         [24] 1363 	lcall	_showu
      0004FA 15 81            [12] 1364 	dec	sp
      0004FC 15 81            [12] 1365 	dec	sp
      0004FE 15 81            [12] 1366 	dec	sp
      000500 80 17            [24] 1367 	sjmp	00133$
      000502                       1368 00132$:
                                   1369 ;	life.c:277: else showu(PRHDR, u);
      000502 74r00            [12] 1370 	mov	a,#_u
      000504 C0 E0            [24] 1371 	push	acc
      000506 74s48            [12] 1372 	mov	a,#(_u >> 8)
      000508 C0 E0            [24] 1373 	push	acc
      00050A E4               [12] 1374 	clr	a
      00050B C0 E0            [24] 1375 	push	acc
      00050D 75 82 02         [24] 1376 	mov	dpl,#0x02
      000510 12r00r20         [24] 1377 	lcall	_showu
      000513 15 81            [12] 1378 	dec	sp
      000515 15 81            [12] 1379 	dec	sp
      000517 15 81            [12] 1380 	dec	sp
      000519                       1381 00133$:
                                   1382 ;	life.c:61: gen++;
      000519 78r0A            [12] 1383 	mov	r0,#_gen
      00051B 06               [12] 1384 	inc	@r0
      00051C B6 00 0C         [24] 1385 	cjne	@r0,#0x00,00507$
      00051F 08               [12] 1386 	inc	r0
      000520 06               [12] 1387 	inc	@r0
      000521 B6 00 07         [24] 1388 	cjne	@r0,#0x00,00507$
      000524 08               [12] 1389 	inc	r0
      000525 06               [12] 1390 	inc	@r0
      000526 B6 00 02         [24] 1391 	cjne	@r0,#0x00,00507$
      000529 08               [12] 1392 	inc	r0
      00052A 06               [12] 1393 	inc	@r0
      00052B                       1394 00507$:
                                   1395 ;	life.c:183: fixed = 0;
      00052B 78r08            [12] 1396 	mov	r0,#_fixed
      00052D 76 00            [12] 1397 	mov	@r0,#0x00
                                   1398 ;	life.c:184: cycle2 = 0;
      00052F 78r09            [12] 1399 	mov	r0,#_cycle2
      000531 76 00            [12] 1400 	mov	@r0,#0x00
                                   1401 ;	life.c:186: OE76 = OE76_0;
      000533 78r02            [12] 1402 	mov	r0,#_OE76
      000535 76 3F            [12] 1403 	mov	@r0,#0x3f
                                   1404 ;	life.c:187: flashOE();
      000537 12r00r18         [24] 1405 	lcall	_flashOE
                                   1406 ;	life.c:189: for (y = 0; y < H; y++) {
      00053A 78r05            [12] 1407 	mov	r0,#_y
      00053C E4               [12] 1408 	clr	a
      00053D F6               [12] 1409 	mov	@r0,a
      00053E 08               [12] 1410 	inc	r0
      00053F F6               [12] 1411 	mov	@r0,a
      000540                       1412 00233$:
                                   1413 ;	life.c:190: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000540 78r05            [12] 1414 	mov	r0,#_y
      000542 86 07            [24] 1415 	mov	ar7,@r0
      000544 53 07 03         [24] 1416 	anl	ar7,#0x03
      000547 EF               [12] 1417 	mov	a,r7
      000548 03               [12] 1418 	rr	a
      000549 03               [12] 1419 	rr	a
      00054A 54 C0            [12] 1420 	anl	a,#0xc0
      00054C FF               [12] 1421 	mov	r7,a
      00054D 78r02            [12] 1422 	mov	r0,#_OE76
      00054F 74 3F            [12] 1423 	mov	a,#0x3f
      000551 4F               [12] 1424 	orl	a,r7
      000552 F6               [12] 1425 	mov	@r0,a
                                   1426 ;	life.c:191: flashOE();
      000553 12r00r18         [24] 1427 	lcall	_flashOE
                                   1428 ;	life.c:192: for (x = 0; x < W; x++) {
      000556 78r03            [12] 1429 	mov	r0,#_x
      000558 E4               [12] 1430 	clr	a
      000559 F6               [12] 1431 	mov	@r0,a
      00055A 08               [12] 1432 	inc	r0
      00055B F6               [12] 1433 	mov	@r0,a
      00055C                       1434 00231$:
                                   1435 ;	life.c:193: n = -u[A2D(W, y, x)];
      00055C 78r05            [12] 1436 	mov	r0,#_y
      00055E E6               [12] 1437 	mov	a,@r0
      00055F C0 E0            [24] 1438 	push	acc
      000561 08               [12] 1439 	inc	r0
      000562 E6               [12] 1440 	mov	a,@r0
      000563 C0 E0            [24] 1441 	push	acc
      000565 90 00 30         [24] 1442 	mov	dptr,#0x0030
      000568 12r00r00         [24] 1443 	lcall	__mulint
      00056B C8               [12] 1444 	xch	a,r0
      00056C E5*00            [12] 1445 	mov	a,_bp
      00056E 24 04            [12] 1446 	add	a,#0x04
      000570 C8               [12] 1447 	xch	a,r0
      000571 A6 82            [24] 1448 	mov	@r0,dpl
      000573 08               [12] 1449 	inc	r0
      000574 A6 83            [24] 1450 	mov	@r0,dph
      000576 15 81            [12] 1451 	dec	sp
      000578 15 81            [12] 1452 	dec	sp
      00057A E5*00            [12] 1453 	mov	a,_bp
      00057C 24 04            [12] 1454 	add	a,#0x04
      00057E F8               [12] 1455 	mov	r0,a
      00057F 79r03            [12] 1456 	mov	r1,#_x
      000581 E7               [12] 1457 	mov	a,@r1
      000582 26               [12] 1458 	add	a,@r0
      000583 C0 E0            [24] 1459 	push	acc
      000585 09               [12] 1460 	inc	r1
      000586 E7               [12] 1461 	mov	a,@r1
      000587 08               [12] 1462 	inc	r0
      000588 36               [12] 1463 	addc	a,@r0
      000589 C0 E0            [24] 1464 	push	acc
      00058B E5*00            [12] 1465 	mov	a,_bp
      00058D 24 03            [12] 1466 	add	a,#0x03
      00058F F8               [12] 1467 	mov	r0,a
      000590 D0 E0            [24] 1468 	pop	acc
      000592 F6               [12] 1469 	mov	@r0,a
      000593 18               [12] 1470 	dec	r0
      000594 D0 E0            [24] 1471 	pop	acc
      000596 F6               [12] 1472 	mov	@r0,a
      000597 A8*00            [24] 1473 	mov	r0,_bp
      000599 08               [12] 1474 	inc	r0
      00059A 08               [12] 1475 	inc	r0
      00059B E6               [12] 1476 	mov	a,@r0
      00059C 24r00            [12] 1477 	add	a,#_u
      00059E F5 82            [12] 1478 	mov	dpl,a
      0005A0 08               [12] 1479 	inc	r0
      0005A1 E6               [12] 1480 	mov	a,@r0
      0005A2 34s48            [12] 1481 	addc	a,#(_u >> 8)
      0005A4 F5 83            [12] 1482 	mov	dph,a
      0005A6 E0               [24] 1483 	movx	a,@dptr
      0005A7 FB               [12] 1484 	mov	r3,a
      0005A8 A8*00            [24] 1485 	mov	r0,_bp
      0005AA 08               [12] 1486 	inc	r0
      0005AB C3               [12] 1487 	clr	c
      0005AC E4               [12] 1488 	clr	a
      0005AD 9B               [12] 1489 	subb	a,r3
      0005AE F6               [12] 1490 	mov	@r0,a
                                   1491 ;	life.c:198: UPDN(-1, -1);
      0005AF 78r05            [12] 1492 	mov	r0,#_y
      0005B1 74 BF            [12] 1493 	mov	a,#0xbf
      0005B3 26               [12] 1494 	add	a,@r0
      0005B4 FA               [12] 1495 	mov	r2,a
      0005B5 E4               [12] 1496 	clr	a
      0005B6 08               [12] 1497 	inc	r0
      0005B7 36               [12] 1498 	addc	a,@r0
      0005B8 FB               [12] 1499 	mov	r3,a
      0005B9 74 C0            [12] 1500 	mov	a,#0xc0
      0005BB C0 E0            [24] 1501 	push	acc
      0005BD E4               [12] 1502 	clr	a
      0005BE C0 E0            [24] 1503 	push	acc
      0005C0 8A 82            [24] 1504 	mov	dpl,r2
      0005C2 8B 83            [24] 1505 	mov	dph,r3
      0005C4 12r00r00         [24] 1506 	lcall	__modsint
      0005C7 AA 82            [24] 1507 	mov	r2,dpl
      0005C9 AB 83            [24] 1508 	mov	r3,dph
      0005CB 15 81            [12] 1509 	dec	sp
      0005CD 15 81            [12] 1510 	dec	sp
      0005CF C0 02            [24] 1511 	push	ar2
      0005D1 C0 03            [24] 1512 	push	ar3
      0005D3 90 00 30         [24] 1513 	mov	dptr,#0x0030
      0005D6 12r00r00         [24] 1514 	lcall	__mulint
      0005D9 AA 82            [24] 1515 	mov	r2,dpl
      0005DB AB 83            [24] 1516 	mov	r3,dph
      0005DD 15 81            [12] 1517 	dec	sp
      0005DF 15 81            [12] 1518 	dec	sp
      0005E1 78r03            [12] 1519 	mov	r0,#_x
      0005E3 74 2F            [12] 1520 	mov	a,#0x2f
      0005E5 26               [12] 1521 	add	a,@r0
      0005E6 FC               [12] 1522 	mov	r4,a
      0005E7 E4               [12] 1523 	clr	a
      0005E8 08               [12] 1524 	inc	r0
      0005E9 36               [12] 1525 	addc	a,@r0
      0005EA FD               [12] 1526 	mov	r5,a
      0005EB C0 03            [24] 1527 	push	ar3
      0005ED C0 02            [24] 1528 	push	ar2
      0005EF 74 30            [12] 1529 	mov	a,#0x30
      0005F1 C0 E0            [24] 1530 	push	acc
      0005F3 E4               [12] 1531 	clr	a
      0005F4 C0 E0            [24] 1532 	push	acc
      0005F6 8C 82            [24] 1533 	mov	dpl,r4
      0005F8 8D 83            [24] 1534 	mov	dph,r5
      0005FA 12r00r00         [24] 1535 	lcall	__modsint
      0005FD AC 82            [24] 1536 	mov	r4,dpl
      0005FF AD 83            [24] 1537 	mov	r5,dph
      000601 15 81            [12] 1538 	dec	sp
      000603 15 81            [12] 1539 	dec	sp
      000605 D0 02            [24] 1540 	pop	ar2
      000607 D0 03            [24] 1541 	pop	ar3
      000609 EC               [12] 1542 	mov	a,r4
      00060A 2A               [12] 1543 	add	a,r2
      00060B FE               [12] 1544 	mov	r6,a
      00060C ED               [12] 1545 	mov	a,r5
      00060D 3B               [12] 1546 	addc	a,r3
      00060E FF               [12] 1547 	mov	r7,a
      00060F EE               [12] 1548 	mov	a,r6
      000610 24r00            [12] 1549 	add	a,#_u
      000612 F5 82            [12] 1550 	mov	dpl,a
      000614 EF               [12] 1551 	mov	a,r7
      000615 34s48            [12] 1552 	addc	a,#(_u >> 8)
      000617 F5 83            [12] 1553 	mov	dph,a
      000619 E0               [24] 1554 	movx	a,@dptr
      00061A FF               [12] 1555 	mov	r7,a
      00061B A8*00            [24] 1556 	mov	r0,_bp
      00061D 08               [12] 1557 	inc	r0
      00061E EF               [12] 1558 	mov	a,r7
      00061F 26               [12] 1559 	add	a,@r0
      000620 F6               [12] 1560 	mov	@r0,a
                                   1561 ;	life.c:199: UPDN(-1, 0);
      000621 78r03            [12] 1562 	mov	r0,#_x
      000623 74 30            [12] 1563 	mov	a,#0x30
      000625 26               [12] 1564 	add	a,@r0
      000626 FE               [12] 1565 	mov	r6,a
      000627 E4               [12] 1566 	clr	a
      000628 08               [12] 1567 	inc	r0
      000629 36               [12] 1568 	addc	a,@r0
      00062A FF               [12] 1569 	mov	r7,a
      00062B C0 05            [24] 1570 	push	ar5
      00062D C0 04            [24] 1571 	push	ar4
      00062F C0 03            [24] 1572 	push	ar3
      000631 C0 02            [24] 1573 	push	ar2
      000633 74 30            [12] 1574 	mov	a,#0x30
      000635 C0 E0            [24] 1575 	push	acc
      000637 E4               [12] 1576 	clr	a
      000638 C0 E0            [24] 1577 	push	acc
      00063A 8E 82            [24] 1578 	mov	dpl,r6
      00063C 8F 83            [24] 1579 	mov	dph,r7
      00063E 12r00r00         [24] 1580 	lcall	__modsint
      000641 C8               [12] 1581 	xch	a,r0
      000642 E5*00            [12] 1582 	mov	a,_bp
      000644 24 06            [12] 1583 	add	a,#0x06
      000646 C8               [12] 1584 	xch	a,r0
      000647 A6 82            [24] 1585 	mov	@r0,dpl
      000649 08               [12] 1586 	inc	r0
      00064A A6 83            [24] 1587 	mov	@r0,dph
      00064C 15 81            [12] 1588 	dec	sp
      00064E 15 81            [12] 1589 	dec	sp
      000650 D0 02            [24] 1590 	pop	ar2
      000652 D0 03            [24] 1591 	pop	ar3
      000654 E5*00            [12] 1592 	mov	a,_bp
      000656 24 06            [12] 1593 	add	a,#0x06
      000658 F8               [12] 1594 	mov	r0,a
      000659 E6               [12] 1595 	mov	a,@r0
      00065A 2A               [12] 1596 	add	a,r2
      00065B FE               [12] 1597 	mov	r6,a
      00065C 08               [12] 1598 	inc	r0
      00065D E6               [12] 1599 	mov	a,@r0
      00065E 3B               [12] 1600 	addc	a,r3
      00065F FF               [12] 1601 	mov	r7,a
      000660 EE               [12] 1602 	mov	a,r6
      000661 24r00            [12] 1603 	add	a,#_u
      000663 F5 82            [12] 1604 	mov	dpl,a
      000665 EF               [12] 1605 	mov	a,r7
      000666 34s48            [12] 1606 	addc	a,#(_u >> 8)
      000668 F5 83            [12] 1607 	mov	dph,a
      00066A E0               [24] 1608 	movx	a,@dptr
      00066B FF               [12] 1609 	mov	r7,a
      00066C A8*00            [24] 1610 	mov	r0,_bp
      00066E 08               [12] 1611 	inc	r0
      00066F EF               [12] 1612 	mov	a,r7
      000670 26               [12] 1613 	add	a,@r0
      000671 F6               [12] 1614 	mov	@r0,a
                                   1615 ;	life.c:200: UPDN(-1, 1);
      000672 78r03            [12] 1616 	mov	r0,#_x
      000674 74 31            [12] 1617 	mov	a,#0x31
      000676 26               [12] 1618 	add	a,@r0
      000677 FE               [12] 1619 	mov	r6,a
      000678 E4               [12] 1620 	clr	a
      000679 08               [12] 1621 	inc	r0
      00067A 36               [12] 1622 	addc	a,@r0
      00067B FF               [12] 1623 	mov	r7,a
      00067C C0 03            [24] 1624 	push	ar3
      00067E C0 02            [24] 1625 	push	ar2
      000680 74 30            [12] 1626 	mov	a,#0x30
      000682 C0 E0            [24] 1627 	push	acc
      000684 E4               [12] 1628 	clr	a
      000685 C0 E0            [24] 1629 	push	acc
      000687 8E 82            [24] 1630 	mov	dpl,r6
      000689 8F 83            [24] 1631 	mov	dph,r7
      00068B 12r00r00         [24] 1632 	lcall	__modsint
      00068E AE 82            [24] 1633 	mov	r6,dpl
      000690 AF 83            [24] 1634 	mov	r7,dph
      000692 15 81            [12] 1635 	dec	sp
      000694 15 81            [12] 1636 	dec	sp
      000696 D0 02            [24] 1637 	pop	ar2
      000698 D0 03            [24] 1638 	pop	ar3
      00069A D0 04            [24] 1639 	pop	ar4
      00069C D0 05            [24] 1640 	pop	ar5
      00069E EE               [12] 1641 	mov	a,r6
      00069F 2A               [12] 1642 	add	a,r2
      0006A0 FA               [12] 1643 	mov	r2,a
      0006A1 EF               [12] 1644 	mov	a,r7
      0006A2 3B               [12] 1645 	addc	a,r3
      0006A3 FB               [12] 1646 	mov	r3,a
      0006A4 EA               [12] 1647 	mov	a,r2
      0006A5 24r00            [12] 1648 	add	a,#_u
      0006A7 F5 82            [12] 1649 	mov	dpl,a
      0006A9 EB               [12] 1650 	mov	a,r3
      0006AA 34s48            [12] 1651 	addc	a,#(_u >> 8)
      0006AC F5 83            [12] 1652 	mov	dph,a
      0006AE E0               [24] 1653 	movx	a,@dptr
      0006AF FB               [12] 1654 	mov	r3,a
      0006B0 A8*00            [24] 1655 	mov	r0,_bp
      0006B2 08               [12] 1656 	inc	r0
      0006B3 EB               [12] 1657 	mov	a,r3
      0006B4 26               [12] 1658 	add	a,@r0
      0006B5 F6               [12] 1659 	mov	@r0,a
                                   1660 ;	life.c:201: UPDN(0, -1);
      0006B6 78r05            [12] 1661 	mov	r0,#_y
      0006B8 74 C0            [12] 1662 	mov	a,#0xc0
      0006BA 26               [12] 1663 	add	a,@r0
      0006BB FA               [12] 1664 	mov	r2,a
      0006BC E4               [12] 1665 	clr	a
      0006BD 08               [12] 1666 	inc	r0
      0006BE 36               [12] 1667 	addc	a,@r0
      0006BF FB               [12] 1668 	mov	r3,a
      0006C0 C0 07            [24] 1669 	push	ar7
      0006C2 C0 06            [24] 1670 	push	ar6
      0006C4 C0 05            [24] 1671 	push	ar5
      0006C6 C0 04            [24] 1672 	push	ar4
      0006C8 74 C0            [12] 1673 	mov	a,#0xc0
      0006CA C0 E0            [24] 1674 	push	acc
      0006CC E4               [12] 1675 	clr	a
      0006CD C0 E0            [24] 1676 	push	acc
      0006CF 8A 82            [24] 1677 	mov	dpl,r2
      0006D1 8B 83            [24] 1678 	mov	dph,r3
      0006D3 12r00r00         [24] 1679 	lcall	__modsint
      0006D6 AA 82            [24] 1680 	mov	r2,dpl
      0006D8 AB 83            [24] 1681 	mov	r3,dph
      0006DA 15 81            [12] 1682 	dec	sp
      0006DC 15 81            [12] 1683 	dec	sp
      0006DE C0 02            [24] 1684 	push	ar2
      0006E0 C0 03            [24] 1685 	push	ar3
      0006E2 90 00 30         [24] 1686 	mov	dptr,#0x0030
      0006E5 12r00r00         [24] 1687 	lcall	__mulint
      0006E8 C8               [12] 1688 	xch	a,r0
      0006E9 E5*00            [12] 1689 	mov	a,_bp
      0006EB 24 08            [12] 1690 	add	a,#0x08
      0006ED C8               [12] 1691 	xch	a,r0
      0006EE A6 82            [24] 1692 	mov	@r0,dpl
      0006F0 08               [12] 1693 	inc	r0
      0006F1 A6 83            [24] 1694 	mov	@r0,dph
      0006F3 15 81            [12] 1695 	dec	sp
      0006F5 15 81            [12] 1696 	dec	sp
      0006F7 D0 04            [24] 1697 	pop	ar4
      0006F9 D0 05            [24] 1698 	pop	ar5
      0006FB D0 06            [24] 1699 	pop	ar6
      0006FD D0 07            [24] 1700 	pop	ar7
      0006FF E5*00            [12] 1701 	mov	a,_bp
      000701 24 08            [12] 1702 	add	a,#0x08
      000703 F8               [12] 1703 	mov	r0,a
      000704 EC               [12] 1704 	mov	a,r4
      000705 26               [12] 1705 	add	a,@r0
      000706 FA               [12] 1706 	mov	r2,a
      000707 ED               [12] 1707 	mov	a,r5
      000708 08               [12] 1708 	inc	r0
      000709 36               [12] 1709 	addc	a,@r0
      00070A FB               [12] 1710 	mov	r3,a
      00070B EA               [12] 1711 	mov	a,r2
      00070C 24r00            [12] 1712 	add	a,#_u
      00070E F5 82            [12] 1713 	mov	dpl,a
      000710 EB               [12] 1714 	mov	a,r3
      000711 34s48            [12] 1715 	addc	a,#(_u >> 8)
      000713 F5 83            [12] 1716 	mov	dph,a
      000715 E0               [24] 1717 	movx	a,@dptr
      000716 FB               [12] 1718 	mov	r3,a
      000717 A8*00            [24] 1719 	mov	r0,_bp
      000719 08               [12] 1720 	inc	r0
      00071A EB               [12] 1721 	mov	a,r3
      00071B 26               [12] 1722 	add	a,@r0
      00071C F6               [12] 1723 	mov	@r0,a
                                   1724 ;	life.c:202: UPDN(0, 0);
      00071D E5*00            [12] 1725 	mov	a,_bp
      00071F 24 08            [12] 1726 	add	a,#0x08
      000721 F8               [12] 1727 	mov	r0,a
      000722 E5*00            [12] 1728 	mov	a,_bp
      000724 24 06            [12] 1729 	add	a,#0x06
      000726 F9               [12] 1730 	mov	r1,a
      000727 E7               [12] 1731 	mov	a,@r1
      000728 26               [12] 1732 	add	a,@r0
      000729 FA               [12] 1733 	mov	r2,a
      00072A 09               [12] 1734 	inc	r1
      00072B E7               [12] 1735 	mov	a,@r1
      00072C 08               [12] 1736 	inc	r0
      00072D 36               [12] 1737 	addc	a,@r0
      00072E FB               [12] 1738 	mov	r3,a
      00072F EA               [12] 1739 	mov	a,r2
      000730 24r00            [12] 1740 	add	a,#_u
      000732 F5 82            [12] 1741 	mov	dpl,a
      000734 EB               [12] 1742 	mov	a,r3
      000735 34s48            [12] 1743 	addc	a,#(_u >> 8)
      000737 F5 83            [12] 1744 	mov	dph,a
      000739 E0               [24] 1745 	movx	a,@dptr
      00073A FB               [12] 1746 	mov	r3,a
      00073B A8*00            [24] 1747 	mov	r0,_bp
      00073D 08               [12] 1748 	inc	r0
      00073E EB               [12] 1749 	mov	a,r3
      00073F 26               [12] 1750 	add	a,@r0
      000740 F6               [12] 1751 	mov	@r0,a
                                   1752 ;	life.c:203: UPDN(0, 1);
      000741 E5*00            [12] 1753 	mov	a,_bp
      000743 24 08            [12] 1754 	add	a,#0x08
      000745 F8               [12] 1755 	mov	r0,a
      000746 EE               [12] 1756 	mov	a,r6
      000747 26               [12] 1757 	add	a,@r0
      000748 FA               [12] 1758 	mov	r2,a
      000749 EF               [12] 1759 	mov	a,r7
      00074A 08               [12] 1760 	inc	r0
      00074B 36               [12] 1761 	addc	a,@r0
      00074C FB               [12] 1762 	mov	r3,a
      00074D EA               [12] 1763 	mov	a,r2
      00074E 24r00            [12] 1764 	add	a,#_u
      000750 F5 82            [12] 1765 	mov	dpl,a
      000752 EB               [12] 1766 	mov	a,r3
      000753 34s48            [12] 1767 	addc	a,#(_u >> 8)
      000755 F5 83            [12] 1768 	mov	dph,a
      000757 E0               [24] 1769 	movx	a,@dptr
      000758 FB               [12] 1770 	mov	r3,a
      000759 A8*00            [24] 1771 	mov	r0,_bp
      00075B 08               [12] 1772 	inc	r0
      00075C E5*00            [12] 1773 	mov	a,_bp
      00075E 24 08            [12] 1774 	add	a,#0x08
      000760 F9               [12] 1775 	mov	r1,a
      000761 EB               [12] 1776 	mov	a,r3
      000762 26               [12] 1777 	add	a,@r0
      000763 F7               [12] 1778 	mov	@r1,a
                                   1779 ;	life.c:204: UPDN(1, -1);
      000764 78r05            [12] 1780 	mov	r0,#_y
      000766 74 C1            [12] 1781 	mov	a,#0xc1
      000768 26               [12] 1782 	add	a,@r0
      000769 FA               [12] 1783 	mov	r2,a
      00076A E4               [12] 1784 	clr	a
      00076B 08               [12] 1785 	inc	r0
      00076C 36               [12] 1786 	addc	a,@r0
      00076D FB               [12] 1787 	mov	r3,a
      00076E C0 07            [24] 1788 	push	ar7
      000770 C0 06            [24] 1789 	push	ar6
      000772 C0 05            [24] 1790 	push	ar5
      000774 C0 04            [24] 1791 	push	ar4
      000776 74 C0            [12] 1792 	mov	a,#0xc0
      000778 C0 E0            [24] 1793 	push	acc
      00077A E4               [12] 1794 	clr	a
      00077B C0 E0            [24] 1795 	push	acc
      00077D 8A 82            [24] 1796 	mov	dpl,r2
      00077F 8B 83            [24] 1797 	mov	dph,r3
      000781 12r00r00         [24] 1798 	lcall	__modsint
      000784 AA 82            [24] 1799 	mov	r2,dpl
      000786 AB 83            [24] 1800 	mov	r3,dph
      000788 15 81            [12] 1801 	dec	sp
      00078A 15 81            [12] 1802 	dec	sp
      00078C C0 02            [24] 1803 	push	ar2
      00078E C0 03            [24] 1804 	push	ar3
      000790 90 00 30         [24] 1805 	mov	dptr,#0x0030
      000793 12r00r00         [24] 1806 	lcall	__mulint
      000796 AA 82            [24] 1807 	mov	r2,dpl
      000798 AB 83            [24] 1808 	mov	r3,dph
      00079A 15 81            [12] 1809 	dec	sp
      00079C 15 81            [12] 1810 	dec	sp
      00079E D0 04            [24] 1811 	pop	ar4
      0007A0 D0 05            [24] 1812 	pop	ar5
      0007A2 D0 06            [24] 1813 	pop	ar6
      0007A4 D0 07            [24] 1814 	pop	ar7
      0007A6 EC               [12] 1815 	mov	a,r4
      0007A7 2A               [12] 1816 	add	a,r2
      0007A8 FC               [12] 1817 	mov	r4,a
      0007A9 ED               [12] 1818 	mov	a,r5
      0007AA 3B               [12] 1819 	addc	a,r3
      0007AB FD               [12] 1820 	mov	r5,a
      0007AC EC               [12] 1821 	mov	a,r4
      0007AD 24r00            [12] 1822 	add	a,#_u
      0007AF F5 82            [12] 1823 	mov	dpl,a
      0007B1 ED               [12] 1824 	mov	a,r5
      0007B2 34s48            [12] 1825 	addc	a,#(_u >> 8)
      0007B4 F5 83            [12] 1826 	mov	dph,a
      0007B6 E0               [24] 1827 	movx	a,@dptr
      0007B7 FD               [12] 1828 	mov	r5,a
      0007B8 E5*00            [12] 1829 	mov	a,_bp
      0007BA 24 08            [12] 1830 	add	a,#0x08
      0007BC F8               [12] 1831 	mov	r0,a
      0007BD E5*00            [12] 1832 	mov	a,_bp
      0007BF 24 08            [12] 1833 	add	a,#0x08
      0007C1 F9               [12] 1834 	mov	r1,a
      0007C2 ED               [12] 1835 	mov	a,r5
      0007C3 26               [12] 1836 	add	a,@r0
      0007C4 F7               [12] 1837 	mov	@r1,a
                                   1838 ;	life.c:205: UPDN(1, 0);
      0007C5 E5*00            [12] 1839 	mov	a,_bp
      0007C7 24 06            [12] 1840 	add	a,#0x06
      0007C9 F8               [12] 1841 	mov	r0,a
      0007CA E6               [12] 1842 	mov	a,@r0
      0007CB 2A               [12] 1843 	add	a,r2
      0007CC FC               [12] 1844 	mov	r4,a
      0007CD 08               [12] 1845 	inc	r0
      0007CE E6               [12] 1846 	mov	a,@r0
      0007CF 3B               [12] 1847 	addc	a,r3
      0007D0 FD               [12] 1848 	mov	r5,a
      0007D1 EC               [12] 1849 	mov	a,r4
      0007D2 24r00            [12] 1850 	add	a,#_u
      0007D4 F5 82            [12] 1851 	mov	dpl,a
      0007D6 ED               [12] 1852 	mov	a,r5
      0007D7 34s48            [12] 1853 	addc	a,#(_u >> 8)
      0007D9 F5 83            [12] 1854 	mov	dph,a
      0007DB E0               [24] 1855 	movx	a,@dptr
      0007DC FD               [12] 1856 	mov	r5,a
      0007DD E5*00            [12] 1857 	mov	a,_bp
      0007DF 24 08            [12] 1858 	add	a,#0x08
      0007E1 F8               [12] 1859 	mov	r0,a
      0007E2 ED               [12] 1860 	mov	a,r5
      0007E3 26               [12] 1861 	add	a,@r0
      0007E4 FD               [12] 1862 	mov	r5,a
                                   1863 ;	life.c:206: UPDN(1, 1);
      0007E5 EE               [12] 1864 	mov	a,r6
      0007E6 2A               [12] 1865 	add	a,r2
      0007E7 FE               [12] 1866 	mov	r6,a
      0007E8 EF               [12] 1867 	mov	a,r7
      0007E9 3B               [12] 1868 	addc	a,r3
      0007EA FF               [12] 1869 	mov	r7,a
      0007EB EE               [12] 1870 	mov	a,r6
      0007EC 24r00            [12] 1871 	add	a,#_u
      0007EE F5 82            [12] 1872 	mov	dpl,a
      0007F0 EF               [12] 1873 	mov	a,r7
      0007F1 34s48            [12] 1874 	addc	a,#(_u >> 8)
      0007F3 F5 83            [12] 1875 	mov	dph,a
      0007F5 E0               [24] 1876 	movx	a,@dptr
      0007F6 2D               [12] 1877 	add	a,r5
      0007F7 FF               [12] 1878 	mov	r7,a
      0007F8 78r07            [12] 1879 	mov	r0,#_n
      0007FA A6 07            [24] 1880 	mov	@r0,ar7
                                   1881 ;	life.c:209: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007FC A8*00            [24] 1882 	mov	r0,_bp
      0007FE 08               [12] 1883 	inc	r0
      0007FF 08               [12] 1884 	inc	r0
      000800 E6               [12] 1885 	mov	a,@r0
      000801 24r00            [12] 1886 	add	a,#_nu
      000803 FD               [12] 1887 	mov	r5,a
      000804 08               [12] 1888 	inc	r0
      000805 E6               [12] 1889 	mov	a,@r0
      000806 34s6C            [12] 1890 	addc	a,#(_nu >> 8)
      000808 FE               [12] 1891 	mov	r6,a
      000809 BF 03 02         [24] 1892 	cjne	r7,#0x03,00508$
      00080C 80 25            [24] 1893 	sjmp	00246$
      00080E                       1894 00508$:
      00080E BF 02 1E         [24] 1895 	cjne	r7,#0x02,00245$
      000811 E5*00            [12] 1896 	mov	a,_bp
      000813 24 04            [12] 1897 	add	a,#0x04
      000815 F8               [12] 1898 	mov	r0,a
      000816 79r03            [12] 1899 	mov	r1,#_x
      000818 E7               [12] 1900 	mov	a,@r1
      000819 26               [12] 1901 	add	a,@r0
      00081A FC               [12] 1902 	mov	r4,a
      00081B 09               [12] 1903 	inc	r1
      00081C E7               [12] 1904 	mov	a,@r1
      00081D 08               [12] 1905 	inc	r0
      00081E 36               [12] 1906 	addc	a,@r0
      00081F FF               [12] 1907 	mov	r7,a
      000820 EC               [12] 1908 	mov	a,r4
      000821 24r00            [12] 1909 	add	a,#_u
      000823 FC               [12] 1910 	mov	r4,a
      000824 EF               [12] 1911 	mov	a,r7
      000825 34s48            [12] 1912 	addc	a,#(_u >> 8)
      000827 FF               [12] 1913 	mov	r7,a
      000828 8C 82            [24] 1914 	mov	dpl,r4
      00082A 8F 83            [24] 1915 	mov	dph,r7
      00082C E0               [24] 1916 	movx	a,@dptr
      00082D 70 04            [24] 1917 	jnz	00246$
      00082F                       1918 00245$:
                                   1919 ;	assignBit
      00082F C2*00            [12] 1920 	clr	b0
      000831 80 02            [24] 1921 	sjmp	00247$
      000833                       1922 00246$:
                                   1923 ;	assignBit
      000833 D2*00            [12] 1924 	setb	b0
      000835                       1925 00247$:
      000835 A2*00            [12] 1926 	mov	c,b0
      000837 E4               [12] 1927 	clr	a
      000838 33               [12] 1928 	rlc	a
      000839 8D 82            [24] 1929 	mov	dpl,r5
      00083B 8E 83            [24] 1930 	mov	dph,r6
      00083D F0               [24] 1931 	movx	@dptr,a
                                   1932 ;	life.c:210: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00083E 78r05            [12] 1933 	mov	r0,#_y
      000840 E6               [12] 1934 	mov	a,@r0
      000841 C0 E0            [24] 1935 	push	acc
      000843 08               [12] 1936 	inc	r0
      000844 E6               [12] 1937 	mov	a,@r0
      000845 C0 E0            [24] 1938 	push	acc
      000847 90 00 30         [24] 1939 	mov	dptr,#0x0030
      00084A 12r00r00         [24] 1940 	lcall	__mulint
      00084D AE 82            [24] 1941 	mov	r6,dpl
      00084F AF 83            [24] 1942 	mov	r7,dph
      000851 15 81            [12] 1943 	dec	sp
      000853 15 81            [12] 1944 	dec	sp
      000855 78r03            [12] 1945 	mov	r0,#_x
      000857 E6               [12] 1946 	mov	a,@r0
      000858 2E               [12] 1947 	add	a,r6
      000859 FE               [12] 1948 	mov	r6,a
      00085A 08               [12] 1949 	inc	r0
      00085B E6               [12] 1950 	mov	a,@r0
      00085C 3F               [12] 1951 	addc	a,r7
      00085D FF               [12] 1952 	mov	r7,a
      00085E EE               [12] 1953 	mov	a,r6
      00085F 24r00            [12] 1954 	add	a,#_pu
      000861 F5 82            [12] 1955 	mov	dpl,a
      000863 EF               [12] 1956 	mov	a,r7
      000864 34s24            [12] 1957 	addc	a,#(_pu >> 8)
      000866 F5 83            [12] 1958 	mov	dph,a
      000868 E0               [24] 1959 	movx	a,@dptr
      000869 FD               [12] 1960 	mov	r5,a
      00086A EE               [12] 1961 	mov	a,r6
      00086B 24r00            [12] 1962 	add	a,#_nu
      00086D F5 82            [12] 1963 	mov	dpl,a
      00086F EF               [12] 1964 	mov	a,r7
      000870 34s6C            [12] 1965 	addc	a,#(_nu >> 8)
      000872 F5 83            [12] 1966 	mov	dph,a
      000874 E0               [24] 1967 	movx	a,@dptr
      000875 FC               [12] 1968 	mov	r4,a
      000876 6D               [12] 1969 	xrl	a,r5
      000877 78r09            [12] 1970 	mov	r0,#_cycle2
      000879 46               [12] 1971 	orl	a,@r0
      00087A F6               [12] 1972 	mov	@r0,a
                                   1973 ;	life.c:211: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00087B EE               [12] 1974 	mov	a,r6
      00087C 24r00            [12] 1975 	add	a,#_u
      00087E F5 82            [12] 1976 	mov	dpl,a
      000880 EF               [12] 1977 	mov	a,r7
      000881 34s48            [12] 1978 	addc	a,#(_u >> 8)
      000883 F5 83            [12] 1979 	mov	dph,a
      000885 E0               [24] 1980 	movx	a,@dptr
      000886 FF               [12] 1981 	mov	r7,a
      000887 EC               [12] 1982 	mov	a,r4
      000888 6F               [12] 1983 	xrl	a,r7
      000889 78r08            [12] 1984 	mov	r0,#_fixed
      00088B 46               [12] 1985 	orl	a,@r0
      00088C F6               [12] 1986 	mov	@r0,a
                                   1987 ;	life.c:192: for (x = 0; x < W; x++) {
      00088D 78r03            [12] 1988 	mov	r0,#_x
      00088F 06               [12] 1989 	inc	@r0
      000890 B6 00 02         [24] 1990 	cjne	@r0,#0x00,00512$
      000893 08               [12] 1991 	inc	r0
      000894 06               [12] 1992 	inc	@r0
      000895                       1993 00512$:
      000895 78r03            [12] 1994 	mov	r0,#_x
      000897 C3               [12] 1995 	clr	c
      000898 E6               [12] 1996 	mov	a,@r0
      000899 94 30            [12] 1997 	subb	a,#0x30
      00089B 08               [12] 1998 	inc	r0
      00089C E6               [12] 1999 	mov	a,@r0
      00089D 64 80            [12] 2000 	xrl	a,#0x80
      00089F 94 80            [12] 2001 	subb	a,#0x80
      0008A1 50 03            [24] 2002 	jnc	00513$
      0008A3 02r05r5C         [24] 2003 	ljmp	00231$
      0008A6                       2004 00513$:
                                   2005 ;	life.c:189: for (y = 0; y < H; y++) {
      0008A6 78r05            [12] 2006 	mov	r0,#_y
      0008A8 06               [12] 2007 	inc	@r0
      0008A9 B6 00 02         [24] 2008 	cjne	@r0,#0x00,00514$
      0008AC 08               [12] 2009 	inc	r0
      0008AD 06               [12] 2010 	inc	@r0
      0008AE                       2011 00514$:
      0008AE 78r05            [12] 2012 	mov	r0,#_y
      0008B0 C3               [12] 2013 	clr	c
      0008B1 E6               [12] 2014 	mov	a,@r0
      0008B2 94 C0            [12] 2015 	subb	a,#0xc0
      0008B4 08               [12] 2016 	inc	r0
      0008B5 E6               [12] 2017 	mov	a,@r0
      0008B6 64 80            [12] 2018 	xrl	a,#0x80
      0008B8 94 80            [12] 2019 	subb	a,#0x80
      0008BA 50 03            [24] 2020 	jnc	00515$
      0008BC 02r05r40         [24] 2021 	ljmp	00233$
      0008BF                       2022 00515$:
                                   2023 ;	life.c:215: OE76 = OE76_0;
      0008BF 78r02            [12] 2024 	mov	r0,#_OE76
      0008C1 76 3F            [12] 2025 	mov	@r0,#0x3f
                                   2026 ;	life.c:216: flashOE();
      0008C3 12r00r18         [24] 2027 	lcall	_flashOE
                                   2028 ;	life.c:218: cycle2 = !cycle2;
      0008C6 78r09            [12] 2029 	mov	r0,#_cycle2
      0008C8 E6               [12] 2030 	mov	a,@r0
      0008C9 B4 01 00         [24] 2031 	cjne	a,#0x01,00516$
      0008CC                       2032 00516$:
      0008CC 92*00            [24] 2033 	mov	b0,c
      0008CE 78r09            [12] 2034 	mov	r0,#_cycle2
      0008D0 E4               [12] 2035 	clr	a
      0008D1 33               [12] 2036 	rlc	a
      0008D2 F6               [12] 2037 	mov	@r0,a
                                   2038 ;	life.c:219: fixed = !fixed;
      0008D3 78r08            [12] 2039 	mov	r0,#_fixed
      0008D5 E6               [12] 2040 	mov	a,@r0
      0008D6 B4 01 00         [24] 2041 	cjne	a,#0x01,00517$
      0008D9                       2042 00517$:
      0008D9 92*00            [24] 2043 	mov	b0,c
      0008DB 78r08            [12] 2044 	mov	r0,#_fixed
      0008DD E4               [12] 2045 	clr	a
      0008DE 33               [12] 2046 	rlc	a
      0008DF F6               [12] 2047 	mov	@r0,a
                                   2048 ;	life.c:221: memcpy(pu, u, sizeof (u));
      0008E0 E4               [12] 2049 	clr	a
      0008E1 C0 E0            [24] 2050 	push	acc
      0008E3 74 24            [12] 2051 	mov	a,#0x24
      0008E5 C0 E0            [24] 2052 	push	acc
      0008E7 74r00            [12] 2053 	mov	a,#_u
      0008E9 C0 E0            [24] 2054 	push	acc
      0008EB 74s48            [12] 2055 	mov	a,#(_u >> 8)
      0008ED C0 E0            [24] 2056 	push	acc
      0008EF E4               [12] 2057 	clr	a
      0008F0 C0 E0            [24] 2058 	push	acc
      0008F2 90r24r00         [24] 2059 	mov	dptr,#_pu
      0008F5 75 F0 00         [24] 2060 	mov	b,#0x00
      0008F8 12r00r00         [24] 2061 	lcall	___memcpy
      0008FB E5 81            [12] 2062 	mov	a,sp
      0008FD 24 FB            [12] 2063 	add	a,#0xfb
      0008FF F5 81            [12] 2064 	mov	sp,a
                                   2065 ;	life.c:222: memcpy(u, nu, sizeof (nu));
      000901 E4               [12] 2066 	clr	a
      000902 C0 E0            [24] 2067 	push	acc
      000904 74 24            [12] 2068 	mov	a,#0x24
      000906 C0 E0            [24] 2069 	push	acc
      000908 74r00            [12] 2070 	mov	a,#_nu
      00090A C0 E0            [24] 2071 	push	acc
      00090C 74s6C            [12] 2072 	mov	a,#(_nu >> 8)
      00090E C0 E0            [24] 2073 	push	acc
      000910 E4               [12] 2074 	clr	a
      000911 C0 E0            [24] 2075 	push	acc
      000913 90r48r00         [24] 2076 	mov	dptr,#_u
      000916 75 F0 00         [24] 2077 	mov	b,#0x00
      000919 12r00r00         [24] 2078 	lcall	___memcpy
      00091C E5 81            [12] 2079 	mov	a,sp
      00091E 24 FB            [12] 2080 	add	a,#0xfb
      000920 F5 81            [12] 2081 	mov	sp,a
                                   2082 ;	life.c:280: if (fixed) {
      000922 78r08            [12] 2083 	mov	r0,#_fixed
      000924 E6               [12] 2084 	mov	a,@r0
      000925 60 41            [24] 2085 	jz	00135$
                                   2086 ;	life.c:67: genfx = gen;
      000927 78r0A            [12] 2087 	mov	r0,#_gen
      000929 86 04            [24] 2088 	mov	ar4,@r0
      00092B 08               [12] 2089 	inc	r0
      00092C 86 05            [24] 2090 	mov	ar5,@r0
      00092E 08               [12] 2091 	inc	r0
      00092F 86 06            [24] 2092 	mov	ar6,@r0
      000931 08               [12] 2093 	inc	r0
      000932 86 07            [24] 2094 	mov	ar7,@r0
      000934 78r12            [12] 2095 	mov	r0,#_genfx
      000936 A6 04            [24] 2096 	mov	@r0,ar4
      000938 08               [12] 2097 	inc	r0
      000939 A6 05            [24] 2098 	mov	@r0,ar5
      00093B 08               [12] 2099 	inc	r0
      00093C A6 06            [24] 2100 	mov	@r0,ar6
      00093E 08               [12] 2101 	inc	r0
      00093F A6 07            [24] 2102 	mov	@r0,ar7
                                   2103 ;	life.c:68: fxset = 1;
      000941 78r17            [12] 2104 	mov	r0,#_fxset
      000943 76 01            [12] 2105 	mov	@r0,#0x01
                                   2106 ;	life.c:282: printstr("FIXED AT ");
      000945 90r00r6A         [24] 2107 	mov	dptr,#___str_13
      000948 75 F0 80         [24] 2108 	mov	b,#0x80
      00094B 12r00r00         [24] 2109 	lcall	_printstr
                                   2110 ;	life.c:283: showu(PRHDR, u);
      00094E 74r00            [12] 2111 	mov	a,#_u
      000950 C0 E0            [24] 2112 	push	acc
      000952 74s48            [12] 2113 	mov	a,#(_u >> 8)
      000954 C0 E0            [24] 2114 	push	acc
      000956 E4               [12] 2115 	clr	a
      000957 C0 E0            [24] 2116 	push	acc
      000959 75 82 02         [24] 2117 	mov	dpl,#0x02
      00095C 12r00r20         [24] 2118 	lcall	_showu
      00095F 15 81            [12] 2119 	dec	sp
      000961 15 81            [12] 2120 	dec	sp
      000963 15 81            [12] 2121 	dec	sp
                                   2122 ;	life.c:284: break;
      000965 02r09rE8         [24] 2123 	ljmp	00150$
      000968                       2124 00135$:
                                   2125 ;	life.c:286: if (cycle2) {
      000968 78r09            [12] 2126 	mov	r0,#_cycle2
      00096A E6               [12] 2127 	mov	a,@r0
      00096B 60 23            [24] 2128 	jz	00139$
                                   2129 ;	life.c:287: if (!c2u()) updatec2();
      00096D 78r16            [12] 2130 	mov	r0,#_c2set
      00096F E6               [12] 2131 	mov	a,@r0
      000970 70 1E            [24] 2132 	jnz	00139$
                                   2133 ;	life.c:74: genc2 = gen;
      000972 78r0A            [12] 2134 	mov	r0,#_gen
      000974 86 04            [24] 2135 	mov	ar4,@r0
      000976 08               [12] 2136 	inc	r0
      000977 86 05            [24] 2137 	mov	ar5,@r0
      000979 08               [12] 2138 	inc	r0
      00097A 86 06            [24] 2139 	mov	ar6,@r0
      00097C 08               [12] 2140 	inc	r0
      00097D 86 07            [24] 2141 	mov	ar7,@r0
      00097F 78r0E            [12] 2142 	mov	r0,#_genc2
      000981 A6 04            [24] 2143 	mov	@r0,ar4
      000983 08               [12] 2144 	inc	r0
      000984 A6 05            [24] 2145 	mov	@r0,ar5
      000986 08               [12] 2146 	inc	r0
      000987 A6 06            [24] 2147 	mov	@r0,ar6
      000989 08               [12] 2148 	inc	r0
      00098A A6 07            [24] 2149 	mov	@r0,ar7
                                   2150 ;	life.c:75: c2set = 1;
      00098C 78r16            [12] 2151 	mov	r0,#_c2set
      00098E 76 01            [12] 2152 	mov	@r0,#0x01
                                   2153 ;	life.c:287: if (!c2u()) updatec2();
      000990                       2154 00139$:
                                   2155 ;	life.c:290: c = getchar_poll();
      000990 12r00r00         [24] 2156 	lcall	_getchar_poll
      000993 AE 82            [24] 2157 	mov	r6,dpl
      000995 AF 83            [24] 2158 	mov	r7,dph
                                   2159 ;	life.c:291: if (c > 0) {
      000997 C3               [12] 2160 	clr	c
      000998 E4               [12] 2161 	clr	a
      000999 9E               [12] 2162 	subb	a,r6
      00099A 74 80            [12] 2163 	mov	a,#(0x00 ^ 0x80)
      00099C 8F F0            [24] 2164 	mov	b,r7
      00099E 63 F0 80         [24] 2165 	xrl	b,#0x80
      0009A1 95 F0            [12] 2166 	subb	a,b
      0009A3 40 03            [24] 2167 	jc	00521$
      0009A5 02r04rAC         [24] 2168 	ljmp	00237$
      0009A8                       2169 00521$:
                                   2170 ;	life.c:292: c = toupper(c);
      0009A8 8E 82            [24] 2171 	mov	dpl,r6
      0009AA 8F 83            [24] 2172 	mov	dph,r7
      0009AC 12r00r00         [24] 2173 	lcall	_toupper
      0009AF AE 82            [24] 2174 	mov	r6,dpl
      0009B1 AF 83            [24] 2175 	mov	r7,dph
                                   2176 ;	life.c:293: if (c == (int)'U') pruni = !pruni;
      0009B3 BE 55 13         [24] 2177 	cjne	r6,#0x55,00146$
      0009B6 BF 00 10         [24] 2178 	cjne	r7,#0x00,00146$
      0009B9 78r18            [12] 2179 	mov	r0,#_pruni
      0009BB E6               [12] 2180 	mov	a,@r0
      0009BC B4 01 00         [24] 2181 	cjne	a,#0x01,00524$
      0009BF                       2182 00524$:
      0009BF 92*00            [24] 2183 	mov	b0,c
      0009C1 78r18            [12] 2184 	mov	r0,#_pruni
      0009C3 E4               [12] 2185 	clr	a
      0009C4 33               [12] 2186 	rlc	a
      0009C5 F6               [12] 2187 	mov	@r0,a
      0009C6 02r04rAC         [24] 2188 	ljmp	00237$
      0009C9                       2189 00146$:
                                   2190 ;	life.c:294: else if (c == (int)'T') i0 = 1;
      0009C9 BE 54 0A         [24] 2191 	cjne	r6,#0x54,00143$
      0009CC BF 00 07         [24] 2192 	cjne	r7,#0x00,00143$
      0009CF 78r00            [12] 2193 	mov	r0,#_i0
      0009D1 76 01            [12] 2194 	mov	@r0,#0x01
      0009D3 02r04rAC         [24] 2195 	ljmp	00237$
      0009D6                       2196 00143$:
                                   2197 ;	life.c:295: else if (c == (int)'B') i1 = 1;
      0009D6 BE 42 05         [24] 2198 	cjne	r6,#0x42,00527$
      0009D9 BF 00 02         [24] 2199 	cjne	r7,#0x00,00527$
      0009DC 80 03            [24] 2200 	sjmp	00528$
      0009DE                       2201 00527$:
      0009DE 02r04rAC         [24] 2202 	ljmp	00237$
      0009E1                       2203 00528$:
      0009E1 78r01            [12] 2204 	mov	r0,#_i1
      0009E3 76 01            [12] 2205 	mov	@r0,#0x01
      0009E5 02r04rAC         [24] 2206 	ljmp	00237$
      0009E8                       2207 00150$:
                                   2208 ;	life.c:299: if (i1) {
      0009E8 78r01            [12] 2209 	mov	r0,#_i1
      0009EA E6               [12] 2210 	mov	a,@r0
      0009EB 60 20            [24] 2211 	jz	00240$
                                   2212 ;	life.c:300: printstr("BREAK AT ");
      0009ED 90r00r74         [24] 2213 	mov	dptr,#___str_14
      0009F0 75 F0 80         [24] 2214 	mov	b,#0x80
      0009F3 12r00r00         [24] 2215 	lcall	_printstr
                                   2216 ;	life.c:301: showu(PRHDR, u);
      0009F6 74r00            [12] 2217 	mov	a,#_u
      0009F8 C0 E0            [24] 2218 	push	acc
      0009FA 74s48            [12] 2219 	mov	a,#(_u >> 8)
      0009FC C0 E0            [24] 2220 	push	acc
      0009FE E4               [12] 2221 	clr	a
      0009FF C0 E0            [24] 2222 	push	acc
      000A01 75 82 02         [24] 2223 	mov	dpl,#0x02
      000A04 12r00r20         [24] 2224 	lcall	_showu
      000A07 15 81            [12] 2225 	dec	sp
      000A09 15 81            [12] 2226 	dec	sp
      000A0B 15 81            [12] 2227 	dec	sp
      000A0D                       2228 00240$:
                                   2229 ;	life.c:252: for (i0 = 0; !i0; ) {
      000A0D 78r00            [12] 2230 	mov	r0,#_i0
      000A0F E6               [12] 2231 	mov	a,@r0
      000A10 70 03            [24] 2232 	jnz	00530$
      000A12 02r01rB3         [24] 2233 	ljmp	00127$
      000A15                       2234 00530$:
                                   2235 ;	life.c:305: term:
      000A15                       2236 00154$:
                                   2237 ;	life.c:306: EA = 0;
                                   2238 ;	assignBit
      000A15 C2 AF            [12] 2239 	clr	_EA
                                   2240 ;	life.c:307: printstr("TERM\r\n");
      000A17 90r00r7E         [24] 2241 	mov	dptr,#___str_15
      000A1A 75 F0 80         [24] 2242 	mov	b,#0x80
      000A1D 12r00r00         [24] 2243 	lcall	_printstr
                                   2244 ;	life.c:309: PCON |= 2;
      000A20 43 87 02         [24] 2245 	orl	_PCON,#0x02
                                   2246 ;	life.c:311: return;
                                   2247 ;	life.c:312: }
      000A23 85*00 81         [24] 2248 	mov	sp,_bp
      000A26 D0*00            [24] 2249 	pop	_bp
      000A28 22               [24] 2250 	ret
                                   2251 	.area CSEG    (CODE)
                                   2252 	.area CONST   (CODE)
                                   2253 	.area CONST   (CODE)
      000000                       2254 ___str_0:
      000000 1B                    2255 	.db 0x1b
      000001 5B 32 4A              2256 	.ascii "[2J"
      000004 00                    2257 	.db 0x00
                                   2258 	.area CSEG    (CODE)
                                   2259 	.area CONST   (CODE)
      000005                       2260 ___str_1:
      000005 47 45 4E 20           2261 	.ascii "GEN "
      000009 00                    2262 	.db 0x00
                                   2263 	.area CSEG    (CODE)
                                   2264 	.area CONST   (CODE)
      00000A                       2265 ___str_2:
      00000A 20 43 59 43 4C 45 32  2266 	.ascii " CYCLE2 "
             20
      000012 00                    2267 	.db 0x00
                                   2268 	.area CSEG    (CODE)
                                   2269 	.area CONST   (CODE)
      000013                       2270 ___str_3:
      000013 20 46 49 58 45 44 20  2271 	.ascii " FIXED "
      00001A 00                    2272 	.db 0x00
                                   2273 	.area CSEG    (CODE)
                                   2274 	.area CONST   (CODE)
      00001B                       2275 ___str_4:
      00001B 0D                    2276 	.db 0x0d
      00001C 0A                    2277 	.db 0x0a
      00001D 00                    2278 	.db 0x00
                                   2279 	.area CSEG    (CODE)
                                   2280 	.area CONST   (CODE)
      00001E                       2281 ___str_5:
      00001E 1B                    2282 	.db 0x1b
      00001F 5B 3F 32 35 6C        2283 	.ascii "[?25l"
      000024 00                    2284 	.db 0x00
                                   2285 	.area CSEG    (CODE)
                                   2286 	.area CONST   (CODE)
      000025                       2287 ___str_6:
      000025 1B                    2288 	.db 0x1b
      000026 5B 3F 32 35 68        2289 	.ascii "[?25h"
      00002B 00                    2290 	.db 0x00
                                   2291 	.area CSEG    (CODE)
                                   2292 	.area CONST   (CODE)
      00002C                       2293 ___str_7:
      00002C 4C 4F 41 44 20 30 20  2294 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00003A 00                    2295 	.db 0x00
                                   2296 	.area CSEG    (CODE)
                                   2297 	.area CONST   (CODE)
      00003B                       2298 ___str_8:
      00003B 3E                    2299 	.ascii ">"
      00003C 0D                    2300 	.db 0x0d
      00003D 0A                    2301 	.db 0x0a
      00003E 00                    2302 	.db 0x00
                                   2303 	.area CSEG    (CODE)
                                   2304 	.area CONST   (CODE)
      00003F                       2305 ___str_9:
      00003F 52 41 4E 44 4F 4D     2306 	.ascii "RANDOM"
      000045 00                    2307 	.db 0x00
                                   2308 	.area CSEG    (CODE)
                                   2309 	.area CONST   (CODE)
      000046                       2310 ___str_10:
      000046 1B                    2311 	.db 0x1b
      000047 5B 3F 32 35 68        2312 	.ascii "[?25h"
      00004C 1B                    2313 	.db 0x1b
      00004D 5B 6D                 2314 	.ascii "[m"
      00004F 00                    2315 	.db 0x00
                                   2316 	.area CSEG    (CODE)
                                   2317 	.area CONST   (CODE)
      000050                       2318 ___str_11:
      000050 4C 49 46 45 20 49 20  2319 	.ascii "LIFE I L R O P S U"
             4C 20 52 20 4F 20 50
             20 53 20 55
      000062 00                    2320 	.db 0x00
                                   2321 	.area CSEG    (CODE)
                                   2322 	.area CONST   (CODE)
      000063                       2323 ___str_12:
      000063 20 42 20 54           2324 	.ascii " B T"
      000067 0D                    2325 	.db 0x0d
      000068 0A                    2326 	.db 0x0a
      000069 00                    2327 	.db 0x00
                                   2328 	.area CSEG    (CODE)
                                   2329 	.area CONST   (CODE)
      00006A                       2330 ___str_13:
      00006A 46 49 58 45 44 20 41  2331 	.ascii "FIXED AT "
             54 20
      000073 00                    2332 	.db 0x00
                                   2333 	.area CSEG    (CODE)
                                   2334 	.area CONST   (CODE)
      000074                       2335 ___str_14:
      000074 42 52 45 41 4B 20 41  2336 	.ascii "BREAK AT "
             54 20
      00007D 00                    2337 	.db 0x00
                                   2338 	.area CSEG    (CODE)
                                   2339 	.area CONST   (CODE)
      00007E                       2340 ___str_15:
      00007E 54 45 52 4D           2341 	.ascii "TERM"
      000082 0D                    2342 	.db 0x0d
      000083 0A                    2343 	.db 0x0a
      000084 00                    2344 	.db 0x00
                                   2345 	.area CSEG    (CODE)
                                   2346 	.area XINIT   (CODE)
                                   2347 	.area CABS    (ABS,CODE)
