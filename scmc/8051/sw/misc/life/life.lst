                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _generation
                                    143 	.globl _cycle2
                                    144 	.globl _fixed
                                    145 	.globl _n
                                    146 	.globl _bstep
                                    147 	.globl _c
                                    148 	.globl _j
                                    149 	.globl _y1
                                    150 	.globl _x1
                                    151 	.globl _y
                                    152 	.globl _x
                                    153 	.globl _nu
                                    154 	.globl _u
                                    155 	.globl _pu
                                    156 	.globl _i1
                                    157 	.globl _i0
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 1
      000001                        349 _i1::
      000001                        350 	.ds 1
      000002                        351 _pu::
      000002                        352 	.ds 2048
      000802                        353 _u::
      000802                        354 	.ds 2048
      001002                        355 _nu::
      001002                        356 	.ds 2048
      001802                        357 _x::
      001802                        358 	.ds 2
      001804                        359 _y::
      001804                        360 	.ds 2
      001806                        361 _x1::
      001806                        362 	.ds 2
      001808                        363 _y1::
      001808                        364 	.ds 2
      00180A                        365 _j::
      00180A                        366 	.ds 2
      00180C                        367 _c::
      00180C                        368 	.ds 2
      00180E                        369 _bstep::
      00180E                        370 	.ds 1
      00180F                        371 _n::
      00180F                        372 	.ds 1
      001810                        373 _fixed::
      001810                        374 	.ds 1
      001811                        375 _cycle2::
      001811                        376 	.ds 1
      001812                        377 _generation::
      001812                        378 	.ds 4
                                    379 ;--------------------------------------------------------
                                    380 ; absolute external ram data
                                    381 ;--------------------------------------------------------
                                    382 	.area XABS    (ABS,XDATA)
                                    383 ;--------------------------------------------------------
                                    384 ; external initialized ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area XISEG   (XDATA)
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT0 (CODE)
                                    389 	.area GSINIT1 (CODE)
                                    390 	.area GSINIT2 (CODE)
                                    391 	.area GSINIT3 (CODE)
                                    392 	.area GSINIT4 (CODE)
                                    393 	.area GSINIT5 (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.area GSFINAL (CODE)
                                    396 	.area CSEG    (CODE)
                                    397 ;--------------------------------------------------------
                                    398 ; interrupt vector 
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
      000000                        401 __interrupt_vect:
      000000 02r00r00         [24]  402 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  403 	ljmp	_int0
      000006                        404 	.ds	5
      00000B 32               [24]  405 	reti
      00000C                        406 	.ds	7
      000013 02r00r21         [24]  407 	ljmp	_int1
                                    408 ;--------------------------------------------------------
                                    409 ; global & static initialisations
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area GSINIT  (CODE)
                                    413 	.area GSFINAL (CODE)
                                    414 	.area GSINIT  (CODE)
                                    415 	.globl __sdcc_gsinit_startup
                                    416 	.globl __sdcc_program_startup
                                    417 	.globl __start__stack
                                    418 	.globl __mcs51_genXINIT
                                    419 	.globl __mcs51_genXRAMCLEAR
                                    420 	.globl __mcs51_genRAMCLEAR
                                    421 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  422 	ljmp	__sdcc_program_startup
                                    423 ;--------------------------------------------------------
                                    424 ; Home
                                    425 ;--------------------------------------------------------
                                    426 	.area HOME    (CODE)
                                    427 	.area HOME    (CODE)
      000016                        428 __sdcc_program_startup:
      000016 02r02r99         [24]  429 	ljmp	_main
                                    430 ;	return from main will return to caller
                                    431 ;--------------------------------------------------------
                                    432 ; code
                                    433 ;--------------------------------------------------------
                                    434 	.area CSEG    (CODE)
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'putchar'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers 
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:7: int putchar(int c) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function putchar
                                    443 ;	-----------------------------------------
      000000                        444 _putchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:12: __endasm;
      000000 E5 82            [12]  447 	mov	a, dpl
      000002 02 00 30         [24]  448 	ljmp	0x0030
                                    449 ;	life.c:13: }
                                    450 ;	naked function: no epilogue.
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'getchar'
                                    453 ;------------------------------------------------------------
                                    454 ;	life.c:15: int getchar(void) __naked {
                                    455 ;	-----------------------------------------
                                    456 ;	 function getchar
                                    457 ;	-----------------------------------------
      000005                        458 _getchar:
                                    459 ;	naked function: no prologue.
                                    460 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  461 	lcall	0x0032
      000008 F5 82            [12]  462 	mov	dpl, a
      00000A 75 83 00         [24]  463 	mov	dph, #0
      00000D 22               [24]  464 	ret
                                    465 ;	life.c:22: }
                                    466 ;	naked function: no epilogue.
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:65: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000E                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000E C0 E0            [24]  483 	push	acc
      000010 C0 82            [24]  484 	push	dpl
      000012 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  487 	mov	dptr,#_i0
      000017 74 01            [12]  488 	mov	a,#0x01
      000019 F0               [24]  489 	movx	@dptr,a
                                    490 ;	life.c:67: }
      00001A D0 83            [24]  491 	pop	dph
      00001C D0 82            [24]  492 	pop	dpl
      00001E D0 E0            [24]  493 	pop	acc
      000020 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop psw
                                    497 ;	eliminated unneeded push/pop b
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int1'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:69: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int1
                                    504 ;	-----------------------------------------
      000021                        505 _int1:
      000021 C0 E0            [24]  506 	push	acc
      000023 C0 82            [24]  507 	push	dpl
      000025 C0 83            [24]  508 	push	dph
                                    509 ;	life.c:70: i1 = 1;
      000027 90r00r01         [24]  510 	mov	dptr,#_i1
      00002A 74 01            [12]  511 	mov	a,#0x01
      00002C F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:71: }
      00002D D0 83            [24]  514 	pop	dph
      00002F D0 82            [24]  515 	pop	dpl
      000031 D0 E0            [24]  516 	pop	acc
      000033 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;hdr                       Allocated to registers r7 
                                    525 ;__1966080005              Allocated to registers 
                                    526 ;s                         Allocated to registers r5 r6 r7 
                                    527 ;__1310720001              Allocated to registers r6 r7 
                                    528 ;a                         Allocated to registers 
                                    529 ;__1310720003              Allocated to registers r6 r7 
                                    530 ;a                         Allocated to registers 
                                    531 ;__1966080008              Allocated to registers 
                                    532 ;s                         Allocated to registers r5 r6 r7 
                                    533 ;__2621440011              Allocated to registers 
                                    534 ;s                         Allocated to registers r5 r6 r7 
                                    535 ;------------------------------------------------------------
                                    536 ;	life.c:94: void show(char hdr) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function show
                                    539 ;	-----------------------------------------
      000034                        540 _show:
                           000007   541 	ar7 = 0x07
                           000006   542 	ar6 = 0x06
                           000005   543 	ar5 = 0x05
                           000004   544 	ar4 = 0x04
                           000003   545 	ar3 = 0x03
                           000002   546 	ar2 = 0x02
                           000001   547 	ar1 = 0x01
                           000000   548 	ar0 = 0x00
                                    549 ;	life.c:95: if (hdr) {
      000034 E5 82            [12]  550 	mov	a,dpl
      000036 FF               [12]  551 	mov	r7,a
      000037 70 03            [24]  552 	jnz	00190$
      000039 02r01rDA         [24]  553 	ljmp	00102$
      00003C                        554 00190$:
                                    555 ;	life.c:96: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  556 	mov	r5,#___str_0
      00003E 7Es00            [12]  557 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  558 	mov	r7,#0x80
                                    559 ;	life.c:48: return;
      000042                        560 00121$:
                                    561 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  562 	mov	dpl,r5
      000044 8E 83            [24]  563 	mov	dph,r6
      000046 8F F0            [24]  564 	mov	b,r7
      000048 12r00r00         [24]  565 	lcall	__gptrget
      00004B FC               [12]  566 	mov	r4,a
      00004C 60 10            [24]  567 	jz	00109$
      00004E 7B 00            [12]  568 	mov	r3,#0x00
      000050 8C 82            [24]  569 	mov	dpl,r4
      000052 8B 83            [24]  570 	mov	dph,r3
      000054 12r00r00         [24]  571 	lcall	_putchar
      000057 0D               [12]  572 	inc	r5
                                    573 ;	life.c:96: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  574 	cjne	r5,#0x00,00121$
      00005B 0E               [12]  575 	inc	r6
      00005C 80 E4            [24]  576 	sjmp	00121$
      00005E                        577 00109$:
                                    578 ;	life.c:88: print16x(generation[1]);
      00005E 90r18r14         [24]  579 	mov	dptr,#(_generation + 0x0002)
      000061 E0               [24]  580 	movx	a,@dptr
      000062 FE               [12]  581 	mov	r6,a
      000063 A3               [24]  582 	inc	dptr
      000064 E0               [24]  583 	movx	a,@dptr
                                    584 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000065 FF               [12]  585 	mov	r7,a
      000066 C4               [12]  586 	swap	a
      000067 54 0F            [12]  587 	anl	a,#0x0f
      000069 30 E3 02         [24]  588 	jnb	acc.3,00193$
      00006C 44 F0            [12]  589 	orl	a,#0xf0
      00006E                        590 00193$:
      00006E FC               [12]  591 	mov	r4,a
      00006F 33               [12]  592 	rlc	a
      000070 95 E0            [12]  593 	subb	a,acc
      000072 53 04 0F         [24]  594 	anl	ar4,#0x0f
      000075 7D 00            [12]  595 	mov	r5,#0x00
      000077 EC               [12]  596 	mov	a,r4
      000078 24r00            [12]  597 	add	a,#_digits
      00007A F5 82            [12]  598 	mov	dpl,a
      00007C ED               [12]  599 	mov	a,r5
      00007D 34s00            [12]  600 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  601 	mov	dph,a
      000081 E4               [12]  602 	clr	a
      000082 93               [24]  603 	movc	a,@a+dptr
      000083 FD               [12]  604 	mov	r5,a
      000084 7C 00            [12]  605 	mov	r4,#0x00
      000086 8D 82            [24]  606 	mov	dpl,r5
      000088 8C 83            [24]  607 	mov	dph,r4
      00008A 12r00r00         [24]  608 	lcall	_putchar
                                    609 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 05            [24]  610 	mov	ar5,r7
      00008F 53 05 0F         [24]  611 	anl	ar5,#0x0f
      000092 7C 00            [12]  612 	mov	r4,#0x00
      000094 ED               [12]  613 	mov	a,r5
      000095 24r00            [12]  614 	add	a,#_digits
      000097 F5 82            [12]  615 	mov	dpl,a
      000099 EC               [12]  616 	mov	a,r4
      00009A 34s00            [12]  617 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  618 	mov	dph,a
      00009E E4               [12]  619 	clr	a
      00009F 93               [24]  620 	movc	a,@a+dptr
      0000A0 FD               [12]  621 	mov	r5,a
      0000A1 7C 00            [12]  622 	mov	r4,#0x00
      0000A3 8D 82            [24]  623 	mov	dpl,r5
      0000A5 8C 83            [24]  624 	mov	dph,r4
      0000A7 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8E 04            [24]  627 	mov	ar4,r6
      0000AC EF               [12]  628 	mov	a,r7
      0000AD C4               [12]  629 	swap	a
      0000AE CC               [12]  630 	xch	a,r4
      0000AF C4               [12]  631 	swap	a
      0000B0 54 0F            [12]  632 	anl	a,#0x0f
      0000B2 6C               [12]  633 	xrl	a,r4
      0000B3 CC               [12]  634 	xch	a,r4
      0000B4 54 0F            [12]  635 	anl	a,#0x0f
      0000B6 CC               [12]  636 	xch	a,r4
      0000B7 6C               [12]  637 	xrl	a,r4
      0000B8 CC               [12]  638 	xch	a,r4
      0000B9 30 E3 02         [24]  639 	jnb	acc.3,00194$
      0000BC 44 F0            [12]  640 	orl	a,#0xf0
      0000BE                        641 00194$:
      0000BE 53 04 0F         [24]  642 	anl	ar4,#0x0f
      0000C1 7D 00            [12]  643 	mov	r5,#0x00
      0000C3 EC               [12]  644 	mov	a,r4
      0000C4 24r00            [12]  645 	add	a,#_digits
      0000C6 F5 82            [12]  646 	mov	dpl,a
      0000C8 ED               [12]  647 	mov	a,r5
      0000C9 34s00            [12]  648 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  649 	mov	dph,a
      0000CD E4               [12]  650 	clr	a
      0000CE 93               [24]  651 	movc	a,@a+dptr
      0000CF FD               [12]  652 	mov	r5,a
      0000D0 7C 00            [12]  653 	mov	r4,#0x00
      0000D2 8D 82            [24]  654 	mov	dpl,r5
      0000D4 8C 83            [24]  655 	mov	dph,r4
      0000D6 12r00r00         [24]  656 	lcall	_putchar
                                    657 ;	life.c:40: putchar(digits[a & 0xf]);
      0000D9 53 06 0F         [24]  658 	anl	ar6,#0x0f
      0000DC 7F 00            [12]  659 	mov	r7,#0x00
      0000DE EE               [12]  660 	mov	a,r6
      0000DF 24r00            [12]  661 	add	a,#_digits
      0000E1 F5 82            [12]  662 	mov	dpl,a
      0000E3 EF               [12]  663 	mov	a,r7
      0000E4 34s00            [12]  664 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  665 	mov	dph,a
      0000E8 E4               [12]  666 	clr	a
      0000E9 93               [24]  667 	movc	a,@a+dptr
      0000EA FF               [12]  668 	mov	r7,a
      0000EB 7E 00            [12]  669 	mov	r6,#0x00
      0000ED 8F 82            [24]  670 	mov	dpl,r7
      0000EF 8E 83            [24]  671 	mov	dph,r6
      0000F1 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:89: print16x(generation[0]);
      0000F4 90r18r12         [24]  674 	mov	dptr,#_generation
      0000F7 E0               [24]  675 	movx	a,@dptr
      0000F8 FE               [12]  676 	mov	r6,a
      0000F9 A3               [24]  677 	inc	dptr
      0000FA E0               [24]  678 	movx	a,@dptr
                                    679 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000FB FF               [12]  680 	mov	r7,a
      0000FC C4               [12]  681 	swap	a
      0000FD 54 0F            [12]  682 	anl	a,#0x0f
      0000FF 30 E3 02         [24]  683 	jnb	acc.3,00195$
      000102 44 F0            [12]  684 	orl	a,#0xf0
      000104                        685 00195$:
      000104 FC               [12]  686 	mov	r4,a
      000105 33               [12]  687 	rlc	a
      000106 95 E0            [12]  688 	subb	a,acc
      000108 53 04 0F         [24]  689 	anl	ar4,#0x0f
      00010B 7D 00            [12]  690 	mov	r5,#0x00
      00010D EC               [12]  691 	mov	a,r4
      00010E 24r00            [12]  692 	add	a,#_digits
      000110 F5 82            [12]  693 	mov	dpl,a
      000112 ED               [12]  694 	mov	a,r5
      000113 34s00            [12]  695 	addc	a,#(_digits >> 8)
      000115 F5 83            [12]  696 	mov	dph,a
      000117 E4               [12]  697 	clr	a
      000118 93               [24]  698 	movc	a,@a+dptr
      000119 FD               [12]  699 	mov	r5,a
      00011A 7C 00            [12]  700 	mov	r4,#0x00
      00011C 8D 82            [24]  701 	mov	dpl,r5
      00011E 8C 83            [24]  702 	mov	dph,r4
      000120 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000123 8F 05            [24]  705 	mov	ar5,r7
      000125 53 05 0F         [24]  706 	anl	ar5,#0x0f
      000128 7C 00            [12]  707 	mov	r4,#0x00
      00012A ED               [12]  708 	mov	a,r5
      00012B 24r00            [12]  709 	add	a,#_digits
      00012D F5 82            [12]  710 	mov	dpl,a
      00012F EC               [12]  711 	mov	a,r4
      000130 34s00            [12]  712 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  713 	mov	dph,a
      000134 E4               [12]  714 	clr	a
      000135 93               [24]  715 	movc	a,@a+dptr
      000136 FD               [12]  716 	mov	r5,a
      000137 7C 00            [12]  717 	mov	r4,#0x00
      000139 8D 82            [24]  718 	mov	dpl,r5
      00013B 8C 83            [24]  719 	mov	dph,r4
      00013D 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000140 8E 04            [24]  722 	mov	ar4,r6
      000142 EF               [12]  723 	mov	a,r7
      000143 C4               [12]  724 	swap	a
      000144 CC               [12]  725 	xch	a,r4
      000145 C4               [12]  726 	swap	a
      000146 54 0F            [12]  727 	anl	a,#0x0f
      000148 6C               [12]  728 	xrl	a,r4
      000149 CC               [12]  729 	xch	a,r4
      00014A 54 0F            [12]  730 	anl	a,#0x0f
      00014C CC               [12]  731 	xch	a,r4
      00014D 6C               [12]  732 	xrl	a,r4
      00014E CC               [12]  733 	xch	a,r4
      00014F 30 E3 02         [24]  734 	jnb	acc.3,00196$
      000152 44 F0            [12]  735 	orl	a,#0xf0
      000154                        736 00196$:
      000154 53 04 0F         [24]  737 	anl	ar4,#0x0f
      000157 7D 00            [12]  738 	mov	r5,#0x00
      000159 EC               [12]  739 	mov	a,r4
      00015A 24r00            [12]  740 	add	a,#_digits
      00015C F5 82            [12]  741 	mov	dpl,a
      00015E ED               [12]  742 	mov	a,r5
      00015F 34s00            [12]  743 	addc	a,#(_digits >> 8)
      000161 F5 83            [12]  744 	mov	dph,a
      000163 E4               [12]  745 	clr	a
      000164 93               [24]  746 	movc	a,@a+dptr
      000165 FD               [12]  747 	mov	r5,a
      000166 7C 00            [12]  748 	mov	r4,#0x00
      000168 8D 82            [24]  749 	mov	dpl,r5
      00016A 8C 83            [24]  750 	mov	dph,r4
      00016C 12r00r00         [24]  751 	lcall	_putchar
                                    752 ;	life.c:40: putchar(digits[a & 0xf]);
      00016F 53 06 0F         [24]  753 	anl	ar6,#0x0f
      000172 7F 00            [12]  754 	mov	r7,#0x00
      000174 EE               [12]  755 	mov	a,r6
      000175 24r00            [12]  756 	add	a,#_digits
      000177 F5 82            [12]  757 	mov	dpl,a
      000179 EF               [12]  758 	mov	a,r7
      00017A 34s00            [12]  759 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  760 	mov	dph,a
      00017E E4               [12]  761 	clr	a
      00017F 93               [24]  762 	movc	a,@a+dptr
      000180 FF               [12]  763 	mov	r7,a
      000181 7E 00            [12]  764 	mov	r6,#0x00
      000183 8F 82            [24]  765 	mov	dpl,r7
      000185 8E 83            [24]  766 	mov	dph,r6
      000187 12r00r00         [24]  767 	lcall	_putchar
                                    768 ;	life.c:98: printstr("\r\n");
      00018A 7Dr18            [12]  769 	mov	r5,#___str_1
      00018C 7Es00            [12]  770 	mov	r6,#(___str_1 >> 8)
      00018E 7F 80            [12]  771 	mov	r7,#0x80
                                    772 ;	life.c:48: return;
      000190                        773 00124$:
                                    774 ;	life.c:46: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  775 	mov	dpl,r5
      000192 8E 83            [24]  776 	mov	dph,r6
      000194 8F F0            [24]  777 	mov	b,r7
      000196 12r00r00         [24]  778 	lcall	__gptrget
      000199 FC               [12]  779 	mov	r4,a
      00019A 60 10            [24]  780 	jz	00114$
      00019C 7B 00            [12]  781 	mov	r3,#0x00
      00019E 8C 82            [24]  782 	mov	dpl,r4
      0001A0 8B 83            [24]  783 	mov	dph,r3
      0001A2 12r00r00         [24]  784 	lcall	_putchar
      0001A5 0D               [12]  785 	inc	r5
                                    786 ;	life.c:98: printstr("\r\n");
      0001A6 BD 00 E7         [24]  787 	cjne	r5,#0x00,00124$
      0001A9 0E               [12]  788 	inc	r6
      0001AA 80 E4            [24]  789 	sjmp	00124$
      0001AC                        790 00114$:
                                    791 ;	life.c:81: generation[0]++;
      0001AC 90r18r12         [24]  792 	mov	dptr,#_generation
      0001AF E0               [24]  793 	movx	a,@dptr
      0001B0 FE               [12]  794 	mov	r6,a
      0001B1 A3               [24]  795 	inc	dptr
      0001B2 E0               [24]  796 	movx	a,@dptr
      0001B3 FF               [12]  797 	mov	r7,a
      0001B4 0E               [12]  798 	inc	r6
      0001B5 BE 00 01         [24]  799 	cjne	r6,#0x00,00199$
      0001B8 0F               [12]  800 	inc	r7
      0001B9                        801 00199$:
      0001B9 90r18r12         [24]  802 	mov	dptr,#_generation
      0001BC EE               [12]  803 	mov	a,r6
      0001BD F0               [24]  804 	movx	@dptr,a
      0001BE EF               [12]  805 	mov	a,r7
      0001BF A3               [24]  806 	inc	dptr
      0001C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	life.c:82: if (!generation[0]) generation[1]++;
      0001C1 EE               [12]  809 	mov	a,r6
      0001C2 4F               [12]  810 	orl	a,r7
      0001C3 70 15            [24]  811 	jnz	00102$
      0001C5 90r18r14         [24]  812 	mov	dptr,#(_generation + 0x0002)
      0001C8 E0               [24]  813 	movx	a,@dptr
      0001C9 FE               [12]  814 	mov	r6,a
      0001CA A3               [24]  815 	inc	dptr
      0001CB E0               [24]  816 	movx	a,@dptr
      0001CC FF               [12]  817 	mov	r7,a
      0001CD 0E               [12]  818 	inc	r6
      0001CE BE 00 01         [24]  819 	cjne	r6,#0x00,00201$
      0001D1 0F               [12]  820 	inc	r7
      0001D2                        821 00201$:
      0001D2 90r18r14         [24]  822 	mov	dptr,#(_generation + 0x0002)
      0001D5 EE               [12]  823 	mov	a,r6
      0001D6 F0               [24]  824 	movx	@dptr,a
      0001D7 EF               [12]  825 	mov	a,r7
      0001D8 A3               [24]  826 	inc	dptr
      0001D9 F0               [24]  827 	movx	@dptr,a
                                    828 ;	life.c:99: updategen();
      0001DA                        829 00102$:
                                    830 ;	life.c:102: for (x = 0; x < W; x++) {
      0001DA 90r18r02         [24]  831 	mov	dptr,#_x
      0001DD E4               [12]  832 	clr	a
      0001DE F0               [24]  833 	movx	@dptr,a
      0001DF A3               [24]  834 	inc	dptr
      0001E0 F0               [24]  835 	movx	@dptr,a
      0001E1                        836 00131$:
                                    837 ;	life.c:103: for (y = 0; y < H; y++)
      0001E1 90r18r04         [24]  838 	mov	dptr,#_y
      0001E4 E4               [12]  839 	clr	a
      0001E5 F0               [24]  840 	movx	@dptr,a
      0001E6 A3               [24]  841 	inc	dptr
      0001E7 F0               [24]  842 	movx	@dptr,a
      0001E8                        843 00126$:
                                    844 ;	life.c:104: if (u[A2D(W, y, x)]) {
      0001E8 90r18r04         [24]  845 	mov	dptr,#_y
      0001EB E0               [24]  846 	movx	a,@dptr
      0001EC FE               [12]  847 	mov	r6,a
      0001ED A3               [24]  848 	inc	dptr
      0001EE E0               [24]  849 	movx	a,@dptr
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CE               [12]  853 	xch	a,r6
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CE               [12]  856 	xch	a,r6
      0001F7 6E               [12]  857 	xrl	a,r6
      0001F8 CE               [12]  858 	xch	a,r6
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CE               [12]  860 	xch	a,r6
      0001FC 6E               [12]  861 	xrl	a,r6
      0001FD FF               [12]  862 	mov	r7,a
      0001FE 90r18r02         [24]  863 	mov	dptr,#_x
      000201 E0               [24]  864 	movx	a,@dptr
      000202 FC               [12]  865 	mov	r4,a
      000203 A3               [24]  866 	inc	dptr
      000204 E0               [24]  867 	movx	a,@dptr
      000205 FD               [12]  868 	mov	r5,a
      000206 EC               [12]  869 	mov	a,r4
      000207 2E               [12]  870 	add	a,r6
      000208 FE               [12]  871 	mov	r6,a
      000209 ED               [12]  872 	mov	a,r5
      00020A 3F               [12]  873 	addc	a,r7
      00020B FF               [12]  874 	mov	r7,a
      00020C EE               [12]  875 	mov	a,r6
      00020D 24r02            [12]  876 	add	a,#_u
      00020F FE               [12]  877 	mov	r6,a
      000210 EF               [12]  878 	mov	a,r7
      000211 34s08            [12]  879 	addc	a,#(_u >> 8)
      000213 FF               [12]  880 	mov	r7,a
      000214 8E 82            [24]  881 	mov	dpl,r6
      000216 8F 83            [24]  882 	mov	dph,r7
      000218 E0               [24]  883 	movx	a,@dptr
      000219 60 0E            [24]  884 	jz	00104$
                                    885 ;	life.c:105: putchar('['); putchar(']');
      00021B 90 00 5B         [24]  886 	mov	dptr,#0x005b
      00021E 12r00r00         [24]  887 	lcall	_putchar
      000221 90 00 5D         [24]  888 	mov	dptr,#0x005d
      000224 12r00r00         [24]  889 	lcall	_putchar
      000227 80 0C            [24]  890 	sjmp	00127$
      000229                        891 00104$:
                                    892 ;	life.c:107: putchar('#'); putchar('#');
      000229 90 00 23         [24]  893 	mov	dptr,#0x0023
      00022C 12r00r00         [24]  894 	lcall	_putchar
      00022F 90 00 23         [24]  895 	mov	dptr,#0x0023
      000232 12r00r00         [24]  896 	lcall	_putchar
      000235                        897 00127$:
                                    898 ;	life.c:103: for (y = 0; y < H; y++)
      000235 90r18r04         [24]  899 	mov	dptr,#_y
      000238 E0               [24]  900 	movx	a,@dptr
      000239 24 01            [12]  901 	add	a,#0x01
      00023B F0               [24]  902 	movx	@dptr,a
      00023C A3               [24]  903 	inc	dptr
      00023D E0               [24]  904 	movx	a,@dptr
      00023E 34 00            [12]  905 	addc	a,#0x00
      000240 F0               [24]  906 	movx	@dptr,a
      000241 90r18r04         [24]  907 	mov	dptr,#_y
      000244 E0               [24]  908 	movx	a,@dptr
      000245 FE               [12]  909 	mov	r6,a
      000246 A3               [24]  910 	inc	dptr
      000247 E0               [24]  911 	movx	a,@dptr
      000248 FF               [12]  912 	mov	r7,a
      000249 C3               [12]  913 	clr	c
      00024A EE               [12]  914 	mov	a,r6
      00024B 94 40            [12]  915 	subb	a,#0x40
      00024D EF               [12]  916 	mov	a,r7
      00024E 64 80            [12]  917 	xrl	a,#0x80
      000250 94 80            [12]  918 	subb	a,#0x80
      000252 40 94            [24]  919 	jc	00126$
                                    920 ;	life.c:109: printstr("\r\n");
      000254 7Dr18            [12]  921 	mov	r5,#___str_1
      000256 7Es00            [12]  922 	mov	r6,#(___str_1 >> 8)
      000258 7F 80            [12]  923 	mov	r7,#0x80
                                    924 ;	life.c:48: return;
      00025A                        925 00129$:
                                    926 ;	life.c:46: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  927 	mov	dpl,r5
      00025C 8E 83            [24]  928 	mov	dph,r6
      00025E 8F F0            [24]  929 	mov	b,r7
      000260 12r00r00         [24]  930 	lcall	__gptrget
      000263 FC               [12]  931 	mov	r4,a
      000264 60 10            [24]  932 	jz	00119$
      000266 7B 00            [12]  933 	mov	r3,#0x00
      000268 8C 82            [24]  934 	mov	dpl,r4
      00026A 8B 83            [24]  935 	mov	dph,r3
      00026C 12r00r00         [24]  936 	lcall	_putchar
      00026F 0D               [12]  937 	inc	r5
                                    938 ;	life.c:109: printstr("\r\n");
      000270 BD 00 E7         [24]  939 	cjne	r5,#0x00,00129$
      000273 0E               [12]  940 	inc	r6
      000274 80 E4            [24]  941 	sjmp	00129$
      000276                        942 00119$:
                                    943 ;	life.c:102: for (x = 0; x < W; x++) {
      000276 90r18r02         [24]  944 	mov	dptr,#_x
      000279 E0               [24]  945 	movx	a,@dptr
      00027A 24 01            [12]  946 	add	a,#0x01
      00027C F0               [24]  947 	movx	@dptr,a
      00027D A3               [24]  948 	inc	dptr
      00027E E0               [24]  949 	movx	a,@dptr
      00027F 34 00            [12]  950 	addc	a,#0x00
      000281 F0               [24]  951 	movx	@dptr,a
      000282 90r18r02         [24]  952 	mov	dptr,#_x
      000285 E0               [24]  953 	movx	a,@dptr
      000286 FE               [12]  954 	mov	r6,a
      000287 A3               [24]  955 	inc	dptr
      000288 E0               [24]  956 	movx	a,@dptr
      000289 FF               [12]  957 	mov	r7,a
      00028A C3               [12]  958 	clr	c
      00028B EE               [12]  959 	mov	a,r6
      00028C 94 20            [12]  960 	subb	a,#0x20
      00028E EF               [12]  961 	mov	a,r7
      00028F 64 80            [12]  962 	xrl	a,#0x80
      000291 94 80            [12]  963 	subb	a,#0x80
      000293 50 03            [24]  964 	jnc	00206$
      000295 02r01rE1         [24]  965 	ljmp	00131$
      000298                        966 00206$:
                                    967 ;	life.c:112: return;
                                    968 ;	life.c:113: }
      000298 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'main'
                                    972 ;------------------------------------------------------------
                                    973 ;__2621440019              Allocated to registers 
                                    974 ;s                         Allocated to registers r5 r6 r7 
                                    975 ;__1310720013              Allocated to registers 
                                    976 ;s                         Allocated to registers r5 r6 r7 
                                    977 ;__1310720015              Allocated to registers r6 r7 
                                    978 ;a                         Allocated to registers r4 r5 
                                    979 ;__1310720017              Allocated to registers 
                                    980 ;s                         Allocated to registers r5 r6 r7 
                                    981 ;__2621440023              Allocated to registers 
                                    982 ;s                         Allocated to registers r5 r6 r7 
                                    983 ;__4587520027              Allocated to registers 
                                    984 ;s                         Allocated to registers r5 r6 r7 
                                    985 ;__3276800029              Allocated to registers 
                                    986 ;s                         Allocated to registers r5 r6 r7 
                                    987 ;__1310720031              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;sloc0                     Allocated to stack - _bp +1
                                    990 ;sloc1                     Allocated to stack - _bp +3
                                    991 ;sloc2                     Allocated to stack - _bp +5
                                    992 ;sloc3                     Allocated to stack - _bp +6
                                    993 ;sloc4                     Allocated to stack - _bp +8
                                    994 ;sloc5                     Allocated to stack - _bp +10
                                    995 ;sloc6                     Allocated to stack - _bp +12
                                    996 ;sloc7                     Allocated to stack - _bp +14
                                    997 ;------------------------------------------------------------
                                    998 ;	life.c:198: void main(void) {
                                    999 ;	-----------------------------------------
                                   1000 ;	 function main
                                   1001 ;	-----------------------------------------
      000299                       1002 _main:
      000299 C0*00            [24] 1003 	push	_bp
      00029B E5 81            [12] 1004 	mov	a,sp
      00029D F5*00            [12] 1005 	mov	_bp,a
      00029F 24 0F            [12] 1006 	add	a,#0x0f
      0002A1 F5 81            [12] 1007 	mov	sp,a
                                   1008 ;	life.c:199: IT0 = 1;
                                   1009 ;	assignBit
      0002A3 D2 88            [12] 1010 	setb	_IT0
                                   1011 ;	life.c:200: IT1 = 1;
                                   1012 ;	assignBit
      0002A5 D2 8A            [12] 1013 	setb	_IT1
                                   1014 ;	life.c:201: EX0 = 1;
                                   1015 ;	assignBit
      0002A7 D2 A8            [12] 1016 	setb	_EX0
                                   1017 ;	life.c:202: EX1 = 1;
                                   1018 ;	assignBit
      0002A9 D2 AA            [12] 1019 	setb	_EX1
                                   1020 ;	life.c:203: EA = 1;
                                   1021 ;	assignBit
      0002AB D2 AF            [12] 1022 	setb	_EA
                                   1023 ;	life.c:205: for (i0 = 0; !i0; ) {		
      0002AD 90r00r00         [24] 1024 	mov	dptr,#_i0
      0002B0 E4               [12] 1025 	clr	a
      0002B1 F0               [24] 1026 	movx	@dptr,a
      0002B2                       1027 00197$:
                                   1028 ;	life.c:206: printstr("\033[2J\033[mINIT\r\n");
      0002B2 7Dr26            [12] 1029 	mov	r5,#___str_4
      0002B4 7Es00            [12] 1030 	mov	r6,#(___str_4 >> 8)
      0002B6 7F 80            [12] 1031 	mov	r7,#0x80
                                   1032 ;	life.c:48: return;
      0002B8                       1033 00168$:
                                   1034 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002B8 8D 82            [24] 1035 	mov	dpl,r5
      0002BA 8E 83            [24] 1036 	mov	dph,r6
      0002BC 8F F0            [24] 1037 	mov	b,r7
      0002BE 12r00r00         [24] 1038 	lcall	__gptrget
      0002C1 FC               [12] 1039 	mov	r4,a
      0002C2 60 10            [24] 1040 	jz	00107$
      0002C4 7B 00            [12] 1041 	mov	r3,#0x00
      0002C6 8C 82            [24] 1042 	mov	dpl,r4
      0002C8 8B 83            [24] 1043 	mov	dph,r3
      0002CA 12r00r00         [24] 1044 	lcall	_putchar
      0002CD 0D               [12] 1045 	inc	r5
                                   1046 ;	life.c:207: while (1) {
      0002CE BD 00 E7         [24] 1047 	cjne	r5,#0x00,00168$
      0002D1 0E               [12] 1048 	inc	r6
      0002D2 80 E4            [24] 1049 	sjmp	00168$
      0002D4                       1050 00107$:
                                   1051 ;	life.c:208: c = getchar();
      0002D4 12r00r05         [24] 1052 	lcall	_getchar
      0002D7 AE 82            [24] 1053 	mov	r6,dpl
      0002D9 AF 83            [24] 1054 	mov	r7,dph
      0002DB 90r18r0C         [24] 1055 	mov	dptr,#_c
      0002DE EE               [12] 1056 	mov	a,r6
      0002DF F0               [24] 1057 	movx	@dptr,a
      0002E0 EF               [12] 1058 	mov	a,r7
      0002E1 A3               [24] 1059 	inc	dptr
      0002E2 F0               [24] 1060 	movx	@dptr,a
                                   1061 ;	life.c:209: if (i0 || (c == (int)'T')) goto terminate;
      0002E3 90r00r00         [24] 1062 	mov	dptr,#_i0
      0002E6 E0               [24] 1063 	movx	a,@dptr
      0002E7 60 03            [24] 1064 	jz	00386$
      0002E9 02r0ArB3         [24] 1065 	ljmp	00127$
      0002EC                       1066 00386$:
      0002EC BE 54 06         [24] 1067 	cjne	r6,#0x54,00387$
      0002EF BF 00 03         [24] 1068 	cjne	r7,#0x00,00387$
      0002F2 02r0ArB3         [24] 1069 	ljmp	00127$
      0002F5                       1070 00387$:
                                   1071 ;	life.c:210: if (c == (int)'L') break;
      0002F5 BE 4C DC         [24] 1072 	cjne	r6,#0x4c,00107$
      0002F8 BF 00 D9         [24] 1073 	cjne	r7,#0x00,00107$
                                   1074 ;	life.c:213: reload:
      0002FB                       1075 00109$:
                                   1076 ;	life.c:116: memset(u, 0, sizeof (u));
      0002FB E4               [12] 1077 	clr	a
      0002FC C0 E0            [24] 1078 	push	acc
      0002FE 74 08            [12] 1079 	mov	a,#0x08
      000300 C0 E0            [24] 1080 	push	acc
      000302 E4               [12] 1081 	clr	a
      000303 C0 E0            [24] 1082 	push	acc
      000305 90r08r02         [24] 1083 	mov	dptr,#_u
      000308 75 F0 00         [24] 1084 	mov	b,#0x00
      00030B 12r00r00         [24] 1085 	lcall	_memset
      00030E 15 81            [12] 1086 	dec	sp
      000310 15 81            [12] 1087 	dec	sp
      000312 15 81            [12] 1088 	dec	sp
                                   1089 ;	life.c:117: memset(pu, 0, sizeof (pu));
      000314 E4               [12] 1090 	clr	a
      000315 C0 E0            [24] 1091 	push	acc
      000317 74 08            [12] 1092 	mov	a,#0x08
      000319 C0 E0            [24] 1093 	push	acc
      00031B E4               [12] 1094 	clr	a
      00031C C0 E0            [24] 1095 	push	acc
      00031E 90r00r02         [24] 1096 	mov	dptr,#_pu
      000321 75 F0 00         [24] 1097 	mov	b,#0x00
      000324 12r00r00         [24] 1098 	lcall	_memset
      000327 15 81            [12] 1099 	dec	sp
      000329 15 81            [12] 1100 	dec	sp
      00032B 15 81            [12] 1101 	dec	sp
                                   1102 ;	life.c:123: j = 0;
      00032D 90r18r0A         [24] 1103 	mov	dptr,#_j
      000330 E4               [12] 1104 	clr	a
      000331 F0               [24] 1105 	movx	@dptr,a
      000332 A3               [24] 1106 	inc	dptr
      000333 F0               [24] 1107 	movx	@dptr,a
                                   1108 ;	life.c:125: printstr("LOAD <");
      000334 7Dr1B            [12] 1109 	mov	r5,#___str_2
      000336 7Es00            [12] 1110 	mov	r6,#(___str_2 >> 8)
      000338 7F 80            [12] 1111 	mov	r7,#0x80
                                   1112 ;	life.c:48: return;
      00033A                       1113 00171$:
                                   1114 ;	life.c:46: for (; *s; s++) putchar(*s);
      00033A 8D 82            [24] 1115 	mov	dpl,r5
      00033C 8E 83            [24] 1116 	mov	dph,r6
      00033E 8F F0            [24] 1117 	mov	b,r7
      000340 12r00r00         [24] 1118 	lcall	__gptrget
      000343 FC               [12] 1119 	mov	r4,a
      000344 60 10            [24] 1120 	jz	00132$
      000346 7B 00            [12] 1121 	mov	r3,#0x00
      000348 8C 82            [24] 1122 	mov	dpl,r4
      00034A 8B 83            [24] 1123 	mov	dph,r3
      00034C 12r00r00         [24] 1124 	lcall	_putchar
      00034F 0D               [12] 1125 	inc	r5
                                   1126 ;	life.c:125: printstr("LOAD <");
      000350 BD 00 E7         [24] 1127 	cjne	r5,#0x00,00171$
      000353 0E               [12] 1128 	inc	r6
      000354 80 E4            [24] 1129 	sjmp	00171$
      000356                       1130 00132$:
                                   1131 ;	life.c:127: for (y = 0; y < H; y++)
      000356 90r18r04         [24] 1132 	mov	dptr,#_y
      000359 E4               [12] 1133 	clr	a
      00035A F0               [24] 1134 	movx	@dptr,a
      00035B A3               [24] 1135 	inc	dptr
      00035C F0               [24] 1136 	movx	@dptr,a
      00035D                       1137 00175$:
                                   1138 ;	life.c:128: for (x = 0; x < W; x++) {
      00035D 90r18r02         [24] 1139 	mov	dptr,#_x
      000360 E4               [12] 1140 	clr	a
      000361 F0               [24] 1141 	movx	@dptr,a
      000362 A3               [24] 1142 	inc	dptr
      000363 F0               [24] 1143 	movx	@dptr,a
      000364                       1144 00173$:
                                   1145 ;	life.c:129: c = getchar();
      000364 12r00r05         [24] 1146 	lcall	_getchar
      000367 AE 82            [24] 1147 	mov	r6,dpl
      000369 AF 83            [24] 1148 	mov	r7,dph
      00036B 90r18r0C         [24] 1149 	mov	dptr,#_c
      00036E EE               [12] 1150 	mov	a,r6
      00036F F0               [24] 1151 	movx	@dptr,a
      000370 EF               [12] 1152 	mov	a,r7
      000371 A3               [24] 1153 	inc	dptr
      000372 F0               [24] 1154 	movx	@dptr,a
                                   1155 ;	life.c:130: if (c == (int)'0') {
      000373 BE 30 41         [24] 1156 	cjne	r6,#0x30,00139$
      000376 BF 00 3E         [24] 1157 	cjne	r7,#0x00,00139$
                                   1158 ;	life.c:131: u[A2D(W, y, x)] = 0;
      000379 90r18r04         [24] 1159 	mov	dptr,#_y
      00037C E0               [24] 1160 	movx	a,@dptr
      00037D FC               [12] 1161 	mov	r4,a
      00037E A3               [24] 1162 	inc	dptr
      00037F E0               [24] 1163 	movx	a,@dptr
      000380 C4               [12] 1164 	swap	a
      000381 23               [12] 1165 	rl	a
      000382 54 E0            [12] 1166 	anl	a,#0xe0
      000384 CC               [12] 1167 	xch	a,r4
      000385 C4               [12] 1168 	swap	a
      000386 23               [12] 1169 	rl	a
      000387 CC               [12] 1170 	xch	a,r4
      000388 6C               [12] 1171 	xrl	a,r4
      000389 CC               [12] 1172 	xch	a,r4
      00038A 54 E0            [12] 1173 	anl	a,#0xe0
      00038C CC               [12] 1174 	xch	a,r4
      00038D 6C               [12] 1175 	xrl	a,r4
      00038E FD               [12] 1176 	mov	r5,a
      00038F 90r18r02         [24] 1177 	mov	dptr,#_x
      000392 E0               [24] 1178 	movx	a,@dptr
      000393 FA               [12] 1179 	mov	r2,a
      000394 A3               [24] 1180 	inc	dptr
      000395 E0               [24] 1181 	movx	a,@dptr
      000396 FB               [12] 1182 	mov	r3,a
      000397 EA               [12] 1183 	mov	a,r2
      000398 2C               [12] 1184 	add	a,r4
      000399 FC               [12] 1185 	mov	r4,a
      00039A EB               [12] 1186 	mov	a,r3
      00039B 3D               [12] 1187 	addc	a,r5
      00039C FD               [12] 1188 	mov	r5,a
      00039D EC               [12] 1189 	mov	a,r4
      00039E 24r02            [12] 1190 	add	a,#_u
      0003A0 F5 82            [12] 1191 	mov	dpl,a
      0003A2 ED               [12] 1192 	mov	a,r5
      0003A3 34s08            [12] 1193 	addc	a,#(_u >> 8)
      0003A5 F5 83            [12] 1194 	mov	dph,a
      0003A7 E4               [12] 1195 	clr	a
      0003A8 F0               [24] 1196 	movx	@dptr,a
                                   1197 ;	life.c:132: j++;
      0003A9 90r18r0A         [24] 1198 	mov	dptr,#_j
      0003AC E0               [24] 1199 	movx	a,@dptr
      0003AD 24 01            [12] 1200 	add	a,#0x01
      0003AF F0               [24] 1201 	movx	@dptr,a
      0003B0 A3               [24] 1202 	inc	dptr
      0003B1 E0               [24] 1203 	movx	a,@dptr
      0003B2 34 00            [12] 1204 	addc	a,#0x00
      0003B4 F0               [24] 1205 	movx	@dptr,a
      0003B5 80 4D            [24] 1206 	sjmp	00174$
      0003B7                       1207 00139$:
                                   1208 ;	life.c:133: } else if (c == (int)'1') {
      0003B7 BE 31 42         [24] 1209 	cjne	r6,#0x31,00137$
      0003BA BF 00 3F         [24] 1210 	cjne	r7,#0x00,00137$
                                   1211 ;	life.c:134: u[A2D(W, y, x)] = 1;
      0003BD 90r18r04         [24] 1212 	mov	dptr,#_y
      0003C0 E0               [24] 1213 	movx	a,@dptr
      0003C1 FC               [12] 1214 	mov	r4,a
      0003C2 A3               [24] 1215 	inc	dptr
      0003C3 E0               [24] 1216 	movx	a,@dptr
      0003C4 C4               [12] 1217 	swap	a
      0003C5 23               [12] 1218 	rl	a
      0003C6 54 E0            [12] 1219 	anl	a,#0xe0
      0003C8 CC               [12] 1220 	xch	a,r4
      0003C9 C4               [12] 1221 	swap	a
      0003CA 23               [12] 1222 	rl	a
      0003CB CC               [12] 1223 	xch	a,r4
      0003CC 6C               [12] 1224 	xrl	a,r4
      0003CD CC               [12] 1225 	xch	a,r4
      0003CE 54 E0            [12] 1226 	anl	a,#0xe0
      0003D0 CC               [12] 1227 	xch	a,r4
      0003D1 6C               [12] 1228 	xrl	a,r4
      0003D2 FD               [12] 1229 	mov	r5,a
      0003D3 90r18r02         [24] 1230 	mov	dptr,#_x
      0003D6 E0               [24] 1231 	movx	a,@dptr
      0003D7 FA               [12] 1232 	mov	r2,a
      0003D8 A3               [24] 1233 	inc	dptr
      0003D9 E0               [24] 1234 	movx	a,@dptr
      0003DA FB               [12] 1235 	mov	r3,a
      0003DB EA               [12] 1236 	mov	a,r2
      0003DC 2C               [12] 1237 	add	a,r4
      0003DD FC               [12] 1238 	mov	r4,a
      0003DE EB               [12] 1239 	mov	a,r3
      0003DF 3D               [12] 1240 	addc	a,r5
      0003E0 FD               [12] 1241 	mov	r5,a
      0003E1 EC               [12] 1242 	mov	a,r4
      0003E2 24r02            [12] 1243 	add	a,#_u
      0003E4 F5 82            [12] 1244 	mov	dpl,a
      0003E6 ED               [12] 1245 	mov	a,r5
      0003E7 34s08            [12] 1246 	addc	a,#(_u >> 8)
      0003E9 F5 83            [12] 1247 	mov	dph,a
      0003EB 74 01            [12] 1248 	mov	a,#0x01
      0003ED F0               [24] 1249 	movx	@dptr,a
                                   1250 ;	life.c:135: j++;
      0003EE 90r18r0A         [24] 1251 	mov	dptr,#_j
      0003F1 E0               [24] 1252 	movx	a,@dptr
      0003F2 24 01            [12] 1253 	add	a,#0x01
      0003F4 F0               [24] 1254 	movx	@dptr,a
      0003F5 A3               [24] 1255 	inc	dptr
      0003F6 E0               [24] 1256 	movx	a,@dptr
      0003F7 34 00            [12] 1257 	addc	a,#0x00
      0003F9 F0               [24] 1258 	movx	@dptr,a
      0003FA 80 08            [24] 1259 	sjmp	00174$
      0003FC                       1260 00137$:
                                   1261 ;	life.c:136: } else if (c == (int)'#') goto out;
      0003FC BE 23 05         [24] 1262 	cjne	r6,#0x23,00396$
      0003FF BF 00 02         [24] 1263 	cjne	r7,#0x00,00396$
      000402 80 44            [24] 1264 	sjmp	00150$
      000404                       1265 00396$:
      000404                       1266 00174$:
                                   1267 ;	life.c:128: for (x = 0; x < W; x++) {
      000404 90r18r02         [24] 1268 	mov	dptr,#_x
      000407 E0               [24] 1269 	movx	a,@dptr
      000408 24 01            [12] 1270 	add	a,#0x01
      00040A F0               [24] 1271 	movx	@dptr,a
      00040B A3               [24] 1272 	inc	dptr
      00040C E0               [24] 1273 	movx	a,@dptr
      00040D 34 00            [12] 1274 	addc	a,#0x00
      00040F F0               [24] 1275 	movx	@dptr,a
      000410 90r18r02         [24] 1276 	mov	dptr,#_x
      000413 E0               [24] 1277 	movx	a,@dptr
      000414 FE               [12] 1278 	mov	r6,a
      000415 A3               [24] 1279 	inc	dptr
      000416 E0               [24] 1280 	movx	a,@dptr
      000417 FF               [12] 1281 	mov	r7,a
      000418 C3               [12] 1282 	clr	c
      000419 EE               [12] 1283 	mov	a,r6
      00041A 94 20            [12] 1284 	subb	a,#0x20
      00041C EF               [12] 1285 	mov	a,r7
      00041D 64 80            [12] 1286 	xrl	a,#0x80
      00041F 94 80            [12] 1287 	subb	a,#0x80
      000421 50 03            [24] 1288 	jnc	00397$
      000423 02r03r64         [24] 1289 	ljmp	00173$
      000426                       1290 00397$:
                                   1291 ;	life.c:127: for (y = 0; y < H; y++)
      000426 90r18r04         [24] 1292 	mov	dptr,#_y
      000429 E0               [24] 1293 	movx	a,@dptr
      00042A 24 01            [12] 1294 	add	a,#0x01
      00042C F0               [24] 1295 	movx	@dptr,a
      00042D A3               [24] 1296 	inc	dptr
      00042E E0               [24] 1297 	movx	a,@dptr
      00042F 34 00            [12] 1298 	addc	a,#0x00
      000431 F0               [24] 1299 	movx	@dptr,a
      000432 90r18r04         [24] 1300 	mov	dptr,#_y
      000435 E0               [24] 1301 	movx	a,@dptr
      000436 FE               [12] 1302 	mov	r6,a
      000437 A3               [24] 1303 	inc	dptr
      000438 E0               [24] 1304 	movx	a,@dptr
      000439 FF               [12] 1305 	mov	r7,a
      00043A C3               [12] 1306 	clr	c
      00043B EE               [12] 1307 	mov	a,r6
      00043C 94 40            [12] 1308 	subb	a,#0x40
      00043E EF               [12] 1309 	mov	a,r7
      00043F 64 80            [12] 1310 	xrl	a,#0x80
      000441 94 80            [12] 1311 	subb	a,#0x80
      000443 50 03            [24] 1312 	jnc	00398$
      000445 02r03r5D         [24] 1313 	ljmp	00175$
      000448                       1314 00398$:
                                   1315 ;	life.c:139: out:
      000448                       1316 00150$:
                                   1317 ;	life.c:140: if (c != (int)'#')
      000448 90r18r0C         [24] 1318 	mov	dptr,#_c
      00044B E0               [24] 1319 	movx	a,@dptr
      00044C FE               [12] 1320 	mov	r6,a
      00044D A3               [24] 1321 	inc	dptr
      00044E E0               [24] 1322 	movx	a,@dptr
      00044F FF               [12] 1323 	mov	r7,a
      000450 BE 23 05         [24] 1324 	cjne	r6,#0x23,00399$
      000453 BF 00 02         [24] 1325 	cjne	r7,#0x00,00399$
      000456 80 15            [24] 1326 	sjmp	00149$
      000458                       1327 00399$:
                                   1328 ;	life.c:141: while (1) {
      000458                       1329 00146$:
                                   1330 ;	life.c:142: c = getchar();
      000458 12r00r05         [24] 1331 	lcall	_getchar
      00045B AE 82            [24] 1332 	mov	r6,dpl
      00045D AF 83            [24] 1333 	mov	r7,dph
      00045F 90r18r0C         [24] 1334 	mov	dptr,#_c
      000462 EE               [12] 1335 	mov	a,r6
      000463 F0               [24] 1336 	movx	@dptr,a
      000464 EF               [12] 1337 	mov	a,r7
      000465 A3               [24] 1338 	inc	dptr
      000466 F0               [24] 1339 	movx	@dptr,a
                                   1340 ;	life.c:143: if (c == (int)'#') break;
      000467 BE 23 EE         [24] 1341 	cjne	r6,#0x23,00146$
      00046A BF 00 EB         [24] 1342 	cjne	r7,#0x00,00146$
      00046D                       1343 00149$:
                                   1344 ;	life.c:145: print16x(j);
      00046D 90r18r0A         [24] 1345 	mov	dptr,#_j
      000470 E0               [24] 1346 	movx	a,@dptr
      000471 FE               [12] 1347 	mov	r6,a
      000472 A3               [24] 1348 	inc	dptr
      000473 E0               [24] 1349 	movx	a,@dptr
                                   1350 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000474 8E 04            [24] 1351 	mov	ar4,r6
      000476 FD               [12] 1352 	mov	r5,a
      000477 C4               [12] 1353 	swap	a
      000478 54 0F            [12] 1354 	anl	a,#0x0f
      00047A 30 E3 02         [24] 1355 	jnb	acc.3,00402$
      00047D 44 F0            [12] 1356 	orl	a,#0xf0
      00047F                       1357 00402$:
      00047F FE               [12] 1358 	mov	r6,a
      000480 33               [12] 1359 	rlc	a
      000481 95 E0            [12] 1360 	subb	a,acc
      000483 53 06 0F         [24] 1361 	anl	ar6,#0x0f
      000486 7F 00            [12] 1362 	mov	r7,#0x00
      000488 EE               [12] 1363 	mov	a,r6
      000489 24r00            [12] 1364 	add	a,#_digits
      00048B F5 82            [12] 1365 	mov	dpl,a
      00048D EF               [12] 1366 	mov	a,r7
      00048E 34s00            [12] 1367 	addc	a,#(_digits >> 8)
      000490 F5 83            [12] 1368 	mov	dph,a
      000492 E4               [12] 1369 	clr	a
      000493 93               [24] 1370 	movc	a,@a+dptr
      000494 FF               [12] 1371 	mov	r7,a
      000495 7E 00            [12] 1372 	mov	r6,#0x00
      000497 8F 82            [24] 1373 	mov	dpl,r7
      000499 8E 83            [24] 1374 	mov	dph,r6
      00049B 12r00r00         [24] 1375 	lcall	_putchar
                                   1376 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00049E 8D 07            [24] 1377 	mov	ar7,r5
      0004A0 53 07 0F         [24] 1378 	anl	ar7,#0x0f
      0004A3 7E 00            [12] 1379 	mov	r6,#0x00
      0004A5 EF               [12] 1380 	mov	a,r7
      0004A6 24r00            [12] 1381 	add	a,#_digits
      0004A8 F5 82            [12] 1382 	mov	dpl,a
      0004AA EE               [12] 1383 	mov	a,r6
      0004AB 34s00            [12] 1384 	addc	a,#(_digits >> 8)
      0004AD F5 83            [12] 1385 	mov	dph,a
      0004AF E4               [12] 1386 	clr	a
      0004B0 93               [24] 1387 	movc	a,@a+dptr
      0004B1 FF               [12] 1388 	mov	r7,a
      0004B2 7E 00            [12] 1389 	mov	r6,#0x00
      0004B4 8F 82            [24] 1390 	mov	dpl,r7
      0004B6 8E 83            [24] 1391 	mov	dph,r6
      0004B8 12r00r00         [24] 1392 	lcall	_putchar
                                   1393 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0004BB 8C 06            [24] 1394 	mov	ar6,r4
      0004BD ED               [12] 1395 	mov	a,r5
      0004BE C4               [12] 1396 	swap	a
      0004BF CE               [12] 1397 	xch	a,r6
      0004C0 C4               [12] 1398 	swap	a
      0004C1 54 0F            [12] 1399 	anl	a,#0x0f
      0004C3 6E               [12] 1400 	xrl	a,r6
      0004C4 CE               [12] 1401 	xch	a,r6
      0004C5 54 0F            [12] 1402 	anl	a,#0x0f
      0004C7 CE               [12] 1403 	xch	a,r6
      0004C8 6E               [12] 1404 	xrl	a,r6
      0004C9 CE               [12] 1405 	xch	a,r6
      0004CA 30 E3 02         [24] 1406 	jnb	acc.3,00403$
      0004CD 44 F0            [12] 1407 	orl	a,#0xf0
      0004CF                       1408 00403$:
      0004CF 53 06 0F         [24] 1409 	anl	ar6,#0x0f
      0004D2 7F 00            [12] 1410 	mov	r7,#0x00
      0004D4 EE               [12] 1411 	mov	a,r6
      0004D5 24r00            [12] 1412 	add	a,#_digits
      0004D7 F5 82            [12] 1413 	mov	dpl,a
      0004D9 EF               [12] 1414 	mov	a,r7
      0004DA 34s00            [12] 1415 	addc	a,#(_digits >> 8)
      0004DC F5 83            [12] 1416 	mov	dph,a
      0004DE E4               [12] 1417 	clr	a
      0004DF 93               [24] 1418 	movc	a,@a+dptr
      0004E0 FF               [12] 1419 	mov	r7,a
      0004E1 7E 00            [12] 1420 	mov	r6,#0x00
      0004E3 8F 82            [24] 1421 	mov	dpl,r7
      0004E5 8E 83            [24] 1422 	mov	dph,r6
      0004E7 12r00r00         [24] 1423 	lcall	_putchar
                                   1424 ;	life.c:40: putchar(digits[a & 0xf]);
      0004EA 53 04 0F         [24] 1425 	anl	ar4,#0x0f
      0004ED 7D 00            [12] 1426 	mov	r5,#0x00
      0004EF EC               [12] 1427 	mov	a,r4
      0004F0 24r00            [12] 1428 	add	a,#_digits
      0004F2 F5 82            [12] 1429 	mov	dpl,a
      0004F4 ED               [12] 1430 	mov	a,r5
      0004F5 34s00            [12] 1431 	addc	a,#(_digits >> 8)
      0004F7 F5 83            [12] 1432 	mov	dph,a
      0004F9 E4               [12] 1433 	clr	a
      0004FA 93               [24] 1434 	movc	a,@a+dptr
      0004FB FF               [12] 1435 	mov	r7,a
      0004FC 7E 00            [12] 1436 	mov	r6,#0x00
      0004FE 8F 82            [24] 1437 	mov	dpl,r7
      000500 8E 83            [24] 1438 	mov	dph,r6
      000502 12r00r00         [24] 1439 	lcall	_putchar
                                   1440 ;	life.c:146: printstr(">\r\n");
      000505 7Dr22            [12] 1441 	mov	r5,#___str_3
      000507 7Es00            [12] 1442 	mov	r6,#(___str_3 >> 8)
      000509 7F 80            [12] 1443 	mov	r7,#0x80
                                   1444 ;	life.c:48: return;
      00050B                       1445 00178$:
                                   1446 ;	life.c:46: for (; *s; s++) putchar(*s);
      00050B 8D 82            [24] 1447 	mov	dpl,r5
      00050D 8E 83            [24] 1448 	mov	dph,r6
      00050F 8F F0            [24] 1449 	mov	b,r7
      000511 12r00r00         [24] 1450 	lcall	__gptrget
      000514 FC               [12] 1451 	mov	r4,a
      000515 60 10            [24] 1452 	jz	00153$
      000517 7B 00            [12] 1453 	mov	r3,#0x00
      000519 8C 82            [24] 1454 	mov	dpl,r4
      00051B 8B 83            [24] 1455 	mov	dph,r3
      00051D 12r00r00         [24] 1456 	lcall	_putchar
      000520 0D               [12] 1457 	inc	r5
                                   1458 ;	life.c:146: printstr(">\r\n");
      000521 BD 00 E7         [24] 1459 	cjne	r5,#0x00,00178$
      000524 0E               [12] 1460 	inc	r6
      000525 80 E4            [24] 1461 	sjmp	00178$
      000527                       1462 00153$:
                                   1463 ;	life.c:216: show(0);
      000527 75 82 00         [24] 1464 	mov	dpl,#0x00
      00052A 12r00r34         [24] 1465 	lcall	_show
                                   1466 ;	life.c:218: printstr("READY\r\n");
      00052D 7Dr34            [12] 1467 	mov	r5,#___str_5
      00052F 7Es00            [12] 1468 	mov	r6,#(___str_5 >> 8)
      000531 7F 80            [12] 1469 	mov	r7,#0x80
                                   1470 ;	life.c:48: return;
      000533                       1471 00181$:
                                   1472 ;	life.c:46: for (; *s; s++) putchar(*s);
      000533 8D 82            [24] 1473 	mov	dpl,r5
      000535 8E 83            [24] 1474 	mov	dph,r6
      000537 8F F0            [24] 1475 	mov	b,r7
      000539 12r00r00         [24] 1476 	lcall	__gptrget
      00053C FC               [12] 1477 	mov	r4,a
      00053D 60 10            [24] 1478 	jz	00118$
      00053F 7B 00            [12] 1479 	mov	r3,#0x00
      000541 8C 82            [24] 1480 	mov	dpl,r4
      000543 8B 83            [24] 1481 	mov	dph,r3
      000545 12r00r00         [24] 1482 	lcall	_putchar
      000548 0D               [12] 1483 	inc	r5
                                   1484 ;	life.c:219: while (1) {
      000549 BD 00 E7         [24] 1485 	cjne	r5,#0x00,00181$
      00054C 0E               [12] 1486 	inc	r6
      00054D 80 E4            [24] 1487 	sjmp	00181$
      00054F                       1488 00118$:
                                   1489 ;	life.c:220: c = getchar();
      00054F 12r00r05         [24] 1490 	lcall	_getchar
      000552 AE 82            [24] 1491 	mov	r6,dpl
      000554 AF 83            [24] 1492 	mov	r7,dph
      000556 90r18r0C         [24] 1493 	mov	dptr,#_c
      000559 EE               [12] 1494 	mov	a,r6
      00055A F0               [24] 1495 	movx	@dptr,a
      00055B EF               [12] 1496 	mov	a,r7
      00055C A3               [24] 1497 	inc	dptr
      00055D F0               [24] 1498 	movx	@dptr,a
                                   1499 ;	life.c:221: if (i0 || (c == (int)'T')) goto terminate;
      00055E 90r00r00         [24] 1500 	mov	dptr,#_i0
      000561 E0               [24] 1501 	movx	a,@dptr
      000562 60 03            [24] 1502 	jz	00408$
      000564 02r0ArB3         [24] 1503 	ljmp	00127$
      000567                       1504 00408$:
      000567 BE 54 06         [24] 1505 	cjne	r6,#0x54,00409$
      00056A BF 00 03         [24] 1506 	cjne	r7,#0x00,00409$
      00056D 02r0ArB3         [24] 1507 	ljmp	00127$
      000570                       1508 00409$:
                                   1509 ;	life.c:222: if (c == (int)'L') goto reload;
      000570 BE 4C 06         [24] 1510 	cjne	r6,#0x4c,00410$
      000573 BF 00 03         [24] 1511 	cjne	r7,#0x00,00410$
      000576 02r02rFB         [24] 1512 	ljmp	00109$
      000579                       1513 00410$:
                                   1514 ;	life.c:223: if (c == (int)'S') break;
      000579 BE 53 D3         [24] 1515 	cjne	r6,#0x53,00118$
      00057C BF 00 D0         [24] 1516 	cjne	r7,#0x00,00118$
                                   1517 ;	life.c:74: generation[0] = 0;
      00057F 90r18r12         [24] 1518 	mov	dptr,#_generation
      000582 E4               [12] 1519 	clr	a
      000583 F0               [24] 1520 	movx	@dptr,a
      000584 A3               [24] 1521 	inc	dptr
      000585 F0               [24] 1522 	movx	@dptr,a
                                   1523 ;	life.c:75: generation[1] = 0;
      000586 90r18r14         [24] 1524 	mov	dptr,#(_generation + 0x0002)
      000589 F0               [24] 1525 	movx	@dptr,a
      00058A A3               [24] 1526 	inc	dptr
      00058B F0               [24] 1527 	movx	@dptr,a
                                   1528 ;	life.c:228: for (i1 = 0; !i0 && !i1; ) {
      00058C 90r00r01         [24] 1529 	mov	dptr,#_i1
      00058F F0               [24] 1530 	movx	@dptr,a
      000590                       1531 00192$:
      000590 90r00r00         [24] 1532 	mov	dptr,#_i0
      000593 E0               [24] 1533 	movx	a,@dptr
      000594 60 03            [24] 1534 	jz	00413$
      000596 02r0Ar7F         [24] 1535 	ljmp	00123$
      000599                       1536 00413$:
      000599 90r00r01         [24] 1537 	mov	dptr,#_i1
      00059C E0               [24] 1538 	movx	a,@dptr
      00059D 60 03            [24] 1539 	jz	00414$
      00059F 02r0Ar7F         [24] 1540 	ljmp	00123$
      0005A2                       1541 00414$:
                                   1542 ;	life.c:229: show(1);
      0005A2 75 82 01         [24] 1543 	mov	dpl,#0x01
      0005A5 12r00r34         [24] 1544 	lcall	_show
                                   1545 ;	life.c:154: fixed = 0;
      0005A8 90r18r10         [24] 1546 	mov	dptr,#_fixed
      0005AB E4               [12] 1547 	clr	a
      0005AC F0               [24] 1548 	movx	@dptr,a
                                   1549 ;	life.c:155: cycle2 = 0;
      0005AD 90r18r11         [24] 1550 	mov	dptr,#_cycle2
      0005B0 F0               [24] 1551 	movx	@dptr,a
                                   1552 ;	life.c:156: bstep = 0;
      0005B1 90r18r0E         [24] 1553 	mov	dptr,#_bstep
      0005B4 F0               [24] 1554 	movx	@dptr,a
                                   1555 ;	life.c:158: for (y = 0; y < H; y++) {
      0005B5 90r18r04         [24] 1556 	mov	dptr,#_y
      0005B8 F0               [24] 1557 	movx	@dptr,a
      0005B9 A3               [24] 1558 	inc	dptr
      0005BA F0               [24] 1559 	movx	@dptr,a
      0005BB                       1560 00185$:
                                   1561 ;	life.c:159: putchar(busy[bstep]); putchar('\r');
      0005BB 90r18r0E         [24] 1562 	mov	dptr,#_bstep
      0005BE E0               [24] 1563 	movx	a,@dptr
      0005BF 90r0ArE3         [24] 1564 	mov	dptr,#_busy
      0005C2 93               [24] 1565 	movc	a,@a+dptr
      0005C3 FF               [12] 1566 	mov	r7,a
      0005C4 7E 00            [12] 1567 	mov	r6,#0x00
      0005C6 8F 82            [24] 1568 	mov	dpl,r7
      0005C8 8E 83            [24] 1569 	mov	dph,r6
      0005CA 12r00r00         [24] 1570 	lcall	_putchar
      0005CD 90 00 0D         [24] 1571 	mov	dptr,#0x000d
      0005D0 12r00r00         [24] 1572 	lcall	_putchar
                                   1573 ;	life.c:160: bstep = (bstep + 1) & 3;
      0005D3 90r18r0E         [24] 1574 	mov	dptr,#_bstep
      0005D6 E0               [24] 1575 	movx	a,@dptr
      0005D7 FF               [12] 1576 	mov	r7,a
      0005D8 0F               [12] 1577 	inc	r7
      0005D9 74 03            [12] 1578 	mov	a,#0x03
      0005DB 5F               [12] 1579 	anl	a,r7
      0005DC F0               [24] 1580 	movx	@dptr,a
                                   1581 ;	life.c:161: for (x = 0; x < W; x++) {
      0005DD 90r18r02         [24] 1582 	mov	dptr,#_x
      0005E0 E4               [12] 1583 	clr	a
      0005E1 F0               [24] 1584 	movx	@dptr,a
      0005E2 A3               [24] 1585 	inc	dptr
      0005E3 F0               [24] 1586 	movx	@dptr,a
      0005E4                       1587 00183$:
                                   1588 ;	life.c:162: n = -u[A2D(W, y, x)];
      0005E4 90r18r04         [24] 1589 	mov	dptr,#_y
      0005E7 E0               [24] 1590 	movx	a,@dptr
      0005E8 FE               [12] 1591 	mov	r6,a
      0005E9 A3               [24] 1592 	inc	dptr
      0005EA E0               [24] 1593 	movx	a,@dptr
      0005EB FF               [12] 1594 	mov	r7,a
      0005EC A8*00            [24] 1595 	mov	r0,_bp
      0005EE 08               [12] 1596 	inc	r0
      0005EF A6 06            [24] 1597 	mov	@r0,ar6
      0005F1 EF               [12] 1598 	mov	a,r7
      0005F2 C4               [12] 1599 	swap	a
      0005F3 23               [12] 1600 	rl	a
      0005F4 54 E0            [12] 1601 	anl	a,#0xe0
      0005F6 C6               [12] 1602 	xch	a,@r0
      0005F7 C4               [12] 1603 	swap	a
      0005F8 23               [12] 1604 	rl	a
      0005F9 C6               [12] 1605 	xch	a,@r0
      0005FA 66               [12] 1606 	xrl	a,@r0
      0005FB C6               [12] 1607 	xch	a,@r0
      0005FC 54 E0            [12] 1608 	anl	a,#0xe0
      0005FE C6               [12] 1609 	xch	a,@r0
      0005FF 66               [12] 1610 	xrl	a,@r0
      000600 08               [12] 1611 	inc	r0
      000601 F6               [12] 1612 	mov	@r0,a
      000602 90r18r02         [24] 1613 	mov	dptr,#_x
      000605 E0               [24] 1614 	movx	a,@dptr
      000606 FA               [12] 1615 	mov	r2,a
      000607 A3               [24] 1616 	inc	dptr
      000608 E0               [24] 1617 	movx	a,@dptr
      000609 FB               [12] 1618 	mov	r3,a
      00060A A8*00            [24] 1619 	mov	r0,_bp
      00060C 08               [12] 1620 	inc	r0
      00060D E5*00            [12] 1621 	mov	a,_bp
      00060F 24 03            [12] 1622 	add	a,#0x03
      000611 F9               [12] 1623 	mov	r1,a
      000612 EA               [12] 1624 	mov	a,r2
      000613 26               [12] 1625 	add	a,@r0
      000614 F7               [12] 1626 	mov	@r1,a
      000615 EB               [12] 1627 	mov	a,r3
      000616 08               [12] 1628 	inc	r0
      000617 36               [12] 1629 	addc	a,@r0
      000618 09               [12] 1630 	inc	r1
      000619 F7               [12] 1631 	mov	@r1,a
      00061A E5*00            [12] 1632 	mov	a,_bp
      00061C 24 03            [12] 1633 	add	a,#0x03
      00061E F8               [12] 1634 	mov	r0,a
      00061F E6               [12] 1635 	mov	a,@r0
      000620 24r02            [12] 1636 	add	a,#_u
      000622 F5 82            [12] 1637 	mov	dpl,a
      000624 08               [12] 1638 	inc	r0
      000625 E6               [12] 1639 	mov	a,@r0
      000626 34s08            [12] 1640 	addc	a,#(_u >> 8)
      000628 F5 83            [12] 1641 	mov	dph,a
      00062A E0               [24] 1642 	movx	a,@dptr
      00062B FD               [12] 1643 	mov	r5,a
      00062C E5*00            [12] 1644 	mov	a,_bp
      00062E 24 05            [12] 1645 	add	a,#0x05
      000630 F8               [12] 1646 	mov	r0,a
      000631 C3               [12] 1647 	clr	c
      000632 E4               [12] 1648 	clr	a
      000633 9D               [12] 1649 	subb	a,r5
      000634 F6               [12] 1650 	mov	@r0,a
                                   1651 ;	life.c:165: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000635 74 3F            [12] 1652 	mov	a,#0x3f
      000637 2E               [12] 1653 	add	a,r6
      000638 FC               [12] 1654 	mov	r4,a
      000639 E4               [12] 1655 	clr	a
      00063A 3F               [12] 1656 	addc	a,r7
      00063B FD               [12] 1657 	mov	r5,a
      00063C C0 07            [24] 1658 	push	ar7
      00063E C0 06            [24] 1659 	push	ar6
      000640 C0 03            [24] 1660 	push	ar3
      000642 C0 02            [24] 1661 	push	ar2
      000644 74 40            [12] 1662 	mov	a,#0x40
      000646 C0 E0            [24] 1663 	push	acc
      000648 E4               [12] 1664 	clr	a
      000649 C0 E0            [24] 1665 	push	acc
      00064B 8C 82            [24] 1666 	mov	dpl,r4
      00064D 8D 83            [24] 1667 	mov	dph,r5
      00064F 12r00r00         [24] 1668 	lcall	__modsint
      000652 AC 82            [24] 1669 	mov	r4,dpl
      000654 AD 83            [24] 1670 	mov	r5,dph
      000656 15 81            [12] 1671 	dec	sp
      000658 15 81            [12] 1672 	dec	sp
      00065A D0 02            [24] 1673 	pop	ar2
      00065C D0 03            [24] 1674 	pop	ar3
      00065E E5*00            [12] 1675 	mov	a,_bp
      000660 24 06            [12] 1676 	add	a,#0x06
      000662 F8               [12] 1677 	mov	r0,a
      000663 A6 04            [24] 1678 	mov	@r0,ar4
      000665 ED               [12] 1679 	mov	a,r5
      000666 C4               [12] 1680 	swap	a
      000667 23               [12] 1681 	rl	a
      000668 54 E0            [12] 1682 	anl	a,#0xe0
      00066A C6               [12] 1683 	xch	a,@r0
      00066B C4               [12] 1684 	swap	a
      00066C 23               [12] 1685 	rl	a
      00066D C6               [12] 1686 	xch	a,@r0
      00066E 66               [12] 1687 	xrl	a,@r0
      00066F C6               [12] 1688 	xch	a,@r0
      000670 54 E0            [12] 1689 	anl	a,#0xe0
      000672 C6               [12] 1690 	xch	a,@r0
      000673 66               [12] 1691 	xrl	a,@r0
      000674 08               [12] 1692 	inc	r0
      000675 F6               [12] 1693 	mov	@r0,a
      000676 74 1F            [12] 1694 	mov	a,#0x1f
      000678 2A               [12] 1695 	add	a,r2
      000679 FC               [12] 1696 	mov	r4,a
      00067A E4               [12] 1697 	clr	a
      00067B 3B               [12] 1698 	addc	a,r3
      00067C FD               [12] 1699 	mov	r5,a
      00067D C0 03            [24] 1700 	push	ar3
      00067F C0 02            [24] 1701 	push	ar2
      000681 74 20            [12] 1702 	mov	a,#0x20
      000683 C0 E0            [24] 1703 	push	acc
      000685 E4               [12] 1704 	clr	a
      000686 C0 E0            [24] 1705 	push	acc
      000688 8C 82            [24] 1706 	mov	dpl,r4
      00068A 8D 83            [24] 1707 	mov	dph,r5
      00068C 12r00r00         [24] 1708 	lcall	__modsint
      00068F C8               [12] 1709 	xch	a,r0
      000690 E5*00            [12] 1710 	mov	a,_bp
      000692 24 08            [12] 1711 	add	a,#0x08
      000694 C8               [12] 1712 	xch	a,r0
      000695 A6 82            [24] 1713 	mov	@r0,dpl
      000697 08               [12] 1714 	inc	r0
      000698 A6 83            [24] 1715 	mov	@r0,dph
      00069A 15 81            [12] 1716 	dec	sp
      00069C 15 81            [12] 1717 	dec	sp
      00069E D0 02            [24] 1718 	pop	ar2
      0006A0 D0 03            [24] 1719 	pop	ar3
      0006A2 E5*00            [12] 1720 	mov	a,_bp
      0006A4 24 06            [12] 1721 	add	a,#0x06
      0006A6 F8               [12] 1722 	mov	r0,a
      0006A7 E5*00            [12] 1723 	mov	a,_bp
      0006A9 24 08            [12] 1724 	add	a,#0x08
      0006AB F9               [12] 1725 	mov	r1,a
      0006AC E7               [12] 1726 	mov	a,@r1
      0006AD 26               [12] 1727 	add	a,@r0
      0006AE FC               [12] 1728 	mov	r4,a
      0006AF 09               [12] 1729 	inc	r1
      0006B0 E7               [12] 1730 	mov	a,@r1
      0006B1 08               [12] 1731 	inc	r0
      0006B2 36               [12] 1732 	addc	a,@r0
      0006B3 FD               [12] 1733 	mov	r5,a
      0006B4 EC               [12] 1734 	mov	a,r4
      0006B5 24r02            [12] 1735 	add	a,#_u
      0006B7 F5 82            [12] 1736 	mov	dpl,a
      0006B9 ED               [12] 1737 	mov	a,r5
      0006BA 34s08            [12] 1738 	addc	a,#(_u >> 8)
      0006BC F5 83            [12] 1739 	mov	dph,a
      0006BE E0               [24] 1740 	movx	a,@dptr
      0006BF FD               [12] 1741 	mov	r5,a
      0006C0 E5*00            [12] 1742 	mov	a,_bp
      0006C2 24 05            [12] 1743 	add	a,#0x05
      0006C4 F8               [12] 1744 	mov	r0,a
      0006C5 ED               [12] 1745 	mov	a,r5
      0006C6 26               [12] 1746 	add	a,@r0
      0006C7 F6               [12] 1747 	mov	@r0,a
                                   1748 ;	life.c:167: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006C8 74 20            [12] 1749 	mov	a,#0x20
      0006CA 2A               [12] 1750 	add	a,r2
      0006CB FC               [12] 1751 	mov	r4,a
      0006CC E4               [12] 1752 	clr	a
      0006CD 3B               [12] 1753 	addc	a,r3
      0006CE FD               [12] 1754 	mov	r5,a
      0006CF C0 03            [24] 1755 	push	ar3
      0006D1 C0 02            [24] 1756 	push	ar2
      0006D3 74 20            [12] 1757 	mov	a,#0x20
      0006D5 C0 E0            [24] 1758 	push	acc
      0006D7 E4               [12] 1759 	clr	a
      0006D8 C0 E0            [24] 1760 	push	acc
      0006DA 8C 82            [24] 1761 	mov	dpl,r4
      0006DC 8D 83            [24] 1762 	mov	dph,r5
      0006DE 12r00r00         [24] 1763 	lcall	__modsint
      0006E1 C8               [12] 1764 	xch	a,r0
      0006E2 E5*00            [12] 1765 	mov	a,_bp
      0006E4 24 0A            [12] 1766 	add	a,#0x0a
      0006E6 C8               [12] 1767 	xch	a,r0
      0006E7 A6 82            [24] 1768 	mov	@r0,dpl
      0006E9 08               [12] 1769 	inc	r0
      0006EA A6 83            [24] 1770 	mov	@r0,dph
      0006EC 15 81            [12] 1771 	dec	sp
      0006EE 15 81            [12] 1772 	dec	sp
      0006F0 D0 02            [24] 1773 	pop	ar2
      0006F2 D0 03            [24] 1774 	pop	ar3
      0006F4 E5*00            [12] 1775 	mov	a,_bp
      0006F6 24 06            [12] 1776 	add	a,#0x06
      0006F8 F8               [12] 1777 	mov	r0,a
      0006F9 E5*00            [12] 1778 	mov	a,_bp
      0006FB 24 0A            [12] 1779 	add	a,#0x0a
      0006FD F9               [12] 1780 	mov	r1,a
      0006FE E7               [12] 1781 	mov	a,@r1
      0006FF 26               [12] 1782 	add	a,@r0
      000700 FC               [12] 1783 	mov	r4,a
      000701 09               [12] 1784 	inc	r1
      000702 E7               [12] 1785 	mov	a,@r1
      000703 08               [12] 1786 	inc	r0
      000704 36               [12] 1787 	addc	a,@r0
      000705 FD               [12] 1788 	mov	r5,a
      000706 EC               [12] 1789 	mov	a,r4
      000707 24r02            [12] 1790 	add	a,#_u
      000709 F5 82            [12] 1791 	mov	dpl,a
      00070B ED               [12] 1792 	mov	a,r5
      00070C 34s08            [12] 1793 	addc	a,#(_u >> 8)
      00070E F5 83            [12] 1794 	mov	dph,a
      000710 E0               [24] 1795 	movx	a,@dptr
      000711 FD               [12] 1796 	mov	r5,a
      000712 E5*00            [12] 1797 	mov	a,_bp
      000714 24 05            [12] 1798 	add	a,#0x05
      000716 F8               [12] 1799 	mov	r0,a
      000717 ED               [12] 1800 	mov	a,r5
      000718 26               [12] 1801 	add	a,@r0
      000719 F6               [12] 1802 	mov	@r0,a
                                   1803 ;	life.c:169: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00071A 74 21            [12] 1804 	mov	a,#0x21
      00071C 2A               [12] 1805 	add	a,r2
      00071D FC               [12] 1806 	mov	r4,a
      00071E E4               [12] 1807 	clr	a
      00071F 3B               [12] 1808 	addc	a,r3
      000720 FD               [12] 1809 	mov	r5,a
      000721 C0 03            [24] 1810 	push	ar3
      000723 C0 02            [24] 1811 	push	ar2
      000725 74 20            [12] 1812 	mov	a,#0x20
      000727 C0 E0            [24] 1813 	push	acc
      000729 E4               [12] 1814 	clr	a
      00072A C0 E0            [24] 1815 	push	acc
      00072C 8C 82            [24] 1816 	mov	dpl,r4
      00072E 8D 83            [24] 1817 	mov	dph,r5
      000730 12r00r00         [24] 1818 	lcall	__modsint
      000733 C8               [12] 1819 	xch	a,r0
      000734 E5*00            [12] 1820 	mov	a,_bp
      000736 24 0C            [12] 1821 	add	a,#0x0c
      000738 C8               [12] 1822 	xch	a,r0
      000739 A6 82            [24] 1823 	mov	@r0,dpl
      00073B 08               [12] 1824 	inc	r0
      00073C A6 83            [24] 1825 	mov	@r0,dph
      00073E 15 81            [12] 1826 	dec	sp
      000740 15 81            [12] 1827 	dec	sp
      000742 D0 02            [24] 1828 	pop	ar2
      000744 D0 03            [24] 1829 	pop	ar3
      000746 D0 06            [24] 1830 	pop	ar6
      000748 D0 07            [24] 1831 	pop	ar7
      00074A E5*00            [12] 1832 	mov	a,_bp
      00074C 24 06            [12] 1833 	add	a,#0x06
      00074E F8               [12] 1834 	mov	r0,a
      00074F E5*00            [12] 1835 	mov	a,_bp
      000751 24 0C            [12] 1836 	add	a,#0x0c
      000753 F9               [12] 1837 	mov	r1,a
      000754 E7               [12] 1838 	mov	a,@r1
      000755 26               [12] 1839 	add	a,@r0
      000756 FC               [12] 1840 	mov	r4,a
      000757 09               [12] 1841 	inc	r1
      000758 E7               [12] 1842 	mov	a,@r1
      000759 08               [12] 1843 	inc	r0
      00075A 36               [12] 1844 	addc	a,@r0
      00075B FD               [12] 1845 	mov	r5,a
      00075C EC               [12] 1846 	mov	a,r4
      00075D 24r02            [12] 1847 	add	a,#_u
      00075F F5 82            [12] 1848 	mov	dpl,a
      000761 ED               [12] 1849 	mov	a,r5
      000762 34s08            [12] 1850 	addc	a,#(_u >> 8)
      000764 F5 83            [12] 1851 	mov	dph,a
      000766 E0               [24] 1852 	movx	a,@dptr
      000767 FD               [12] 1853 	mov	r5,a
      000768 E5*00            [12] 1854 	mov	a,_bp
      00076A 24 05            [12] 1855 	add	a,#0x05
      00076C F8               [12] 1856 	mov	r0,a
      00076D E5*00            [12] 1857 	mov	a,_bp
      00076F 24 06            [12] 1858 	add	a,#0x06
      000771 F9               [12] 1859 	mov	r1,a
      000772 ED               [12] 1860 	mov	a,r5
      000773 26               [12] 1861 	add	a,@r0
      000774 F7               [12] 1862 	mov	@r1,a
                                   1863 ;	life.c:171: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000775 74 40            [12] 1864 	mov	a,#0x40
      000777 2E               [12] 1865 	add	a,r6
      000778 FC               [12] 1866 	mov	r4,a
      000779 E4               [12] 1867 	clr	a
      00077A 3F               [12] 1868 	addc	a,r7
      00077B FD               [12] 1869 	mov	r5,a
      00077C C0 07            [24] 1870 	push	ar7
      00077E C0 06            [24] 1871 	push	ar6
      000780 C0 03            [24] 1872 	push	ar3
      000782 C0 02            [24] 1873 	push	ar2
      000784 74 40            [12] 1874 	mov	a,#0x40
      000786 C0 E0            [24] 1875 	push	acc
      000788 E4               [12] 1876 	clr	a
      000789 C0 E0            [24] 1877 	push	acc
      00078B 8C 82            [24] 1878 	mov	dpl,r4
      00078D 8D 83            [24] 1879 	mov	dph,r5
      00078F 12r00r00         [24] 1880 	lcall	__modsint
      000792 AC 82            [24] 1881 	mov	r4,dpl
      000794 AD 83            [24] 1882 	mov	r5,dph
      000796 15 81            [12] 1883 	dec	sp
      000798 15 81            [12] 1884 	dec	sp
      00079A D0 02            [24] 1885 	pop	ar2
      00079C D0 03            [24] 1886 	pop	ar3
      00079E D0 06            [24] 1887 	pop	ar6
      0007A0 D0 07            [24] 1888 	pop	ar7
      0007A2 E5*00            [12] 1889 	mov	a,_bp
      0007A4 24 0E            [12] 1890 	add	a,#0x0e
      0007A6 F8               [12] 1891 	mov	r0,a
      0007A7 A6 04            [24] 1892 	mov	@r0,ar4
      0007A9 ED               [12] 1893 	mov	a,r5
      0007AA C4               [12] 1894 	swap	a
      0007AB 23               [12] 1895 	rl	a
      0007AC 54 E0            [12] 1896 	anl	a,#0xe0
      0007AE C6               [12] 1897 	xch	a,@r0
      0007AF C4               [12] 1898 	swap	a
      0007B0 23               [12] 1899 	rl	a
      0007B1 C6               [12] 1900 	xch	a,@r0
      0007B2 66               [12] 1901 	xrl	a,@r0
      0007B3 C6               [12] 1902 	xch	a,@r0
      0007B4 54 E0            [12] 1903 	anl	a,#0xe0
      0007B6 C6               [12] 1904 	xch	a,@r0
      0007B7 66               [12] 1905 	xrl	a,@r0
      0007B8 08               [12] 1906 	inc	r0
      0007B9 F6               [12] 1907 	mov	@r0,a
      0007BA E5*00            [12] 1908 	mov	a,_bp
      0007BC 24 0E            [12] 1909 	add	a,#0x0e
      0007BE F8               [12] 1910 	mov	r0,a
      0007BF E5*00            [12] 1911 	mov	a,_bp
      0007C1 24 08            [12] 1912 	add	a,#0x08
      0007C3 F9               [12] 1913 	mov	r1,a
      0007C4 E7               [12] 1914 	mov	a,@r1
      0007C5 26               [12] 1915 	add	a,@r0
      0007C6 FC               [12] 1916 	mov	r4,a
      0007C7 09               [12] 1917 	inc	r1
      0007C8 E7               [12] 1918 	mov	a,@r1
      0007C9 08               [12] 1919 	inc	r0
      0007CA 36               [12] 1920 	addc	a,@r0
      0007CB FD               [12] 1921 	mov	r5,a
      0007CC EC               [12] 1922 	mov	a,r4
      0007CD 24r02            [12] 1923 	add	a,#_u
      0007CF F5 82            [12] 1924 	mov	dpl,a
      0007D1 ED               [12] 1925 	mov	a,r5
      0007D2 34s08            [12] 1926 	addc	a,#(_u >> 8)
      0007D4 F5 83            [12] 1927 	mov	dph,a
      0007D6 E0               [24] 1928 	movx	a,@dptr
      0007D7 FD               [12] 1929 	mov	r5,a
      0007D8 E5*00            [12] 1930 	mov	a,_bp
      0007DA 24 06            [12] 1931 	add	a,#0x06
      0007DC F8               [12] 1932 	mov	r0,a
      0007DD E5*00            [12] 1933 	mov	a,_bp
      0007DF 24 06            [12] 1934 	add	a,#0x06
      0007E1 F9               [12] 1935 	mov	r1,a
      0007E2 ED               [12] 1936 	mov	a,r5
      0007E3 26               [12] 1937 	add	a,@r0
      0007E4 F7               [12] 1938 	mov	@r1,a
                                   1939 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007E5 E5*00            [12] 1940 	mov	a,_bp
      0007E7 24 0E            [12] 1941 	add	a,#0x0e
      0007E9 F8               [12] 1942 	mov	r0,a
      0007EA E5*00            [12] 1943 	mov	a,_bp
      0007EC 24 0A            [12] 1944 	add	a,#0x0a
      0007EE F9               [12] 1945 	mov	r1,a
      0007EF E7               [12] 1946 	mov	a,@r1
      0007F0 26               [12] 1947 	add	a,@r0
      0007F1 FC               [12] 1948 	mov	r4,a
      0007F2 09               [12] 1949 	inc	r1
      0007F3 E7               [12] 1950 	mov	a,@r1
      0007F4 08               [12] 1951 	inc	r0
      0007F5 36               [12] 1952 	addc	a,@r0
      0007F6 FD               [12] 1953 	mov	r5,a
      0007F7 EC               [12] 1954 	mov	a,r4
      0007F8 24r02            [12] 1955 	add	a,#_u
      0007FA F5 82            [12] 1956 	mov	dpl,a
      0007FC ED               [12] 1957 	mov	a,r5
      0007FD 34s08            [12] 1958 	addc	a,#(_u >> 8)
      0007FF F5 83            [12] 1959 	mov	dph,a
      000801 E0               [24] 1960 	movx	a,@dptr
      000802 FD               [12] 1961 	mov	r5,a
      000803 E5*00            [12] 1962 	mov	a,_bp
      000805 24 06            [12] 1963 	add	a,#0x06
      000807 F8               [12] 1964 	mov	r0,a
      000808 E5*00            [12] 1965 	mov	a,_bp
      00080A 24 06            [12] 1966 	add	a,#0x06
      00080C F9               [12] 1967 	mov	r1,a
      00080D ED               [12] 1968 	mov	a,r5
      00080E 26               [12] 1969 	add	a,@r0
      00080F F7               [12] 1970 	mov	@r1,a
                                   1971 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000810 E5*00            [12] 1972 	mov	a,_bp
      000812 24 0E            [12] 1973 	add	a,#0x0e
      000814 F8               [12] 1974 	mov	r0,a
      000815 E5*00            [12] 1975 	mov	a,_bp
      000817 24 0C            [12] 1976 	add	a,#0x0c
      000819 F9               [12] 1977 	mov	r1,a
      00081A E7               [12] 1978 	mov	a,@r1
      00081B 26               [12] 1979 	add	a,@r0
      00081C FC               [12] 1980 	mov	r4,a
      00081D 09               [12] 1981 	inc	r1
      00081E E7               [12] 1982 	mov	a,@r1
      00081F 08               [12] 1983 	inc	r0
      000820 36               [12] 1984 	addc	a,@r0
      000821 FD               [12] 1985 	mov	r5,a
      000822 EC               [12] 1986 	mov	a,r4
      000823 24r02            [12] 1987 	add	a,#_u
      000825 F5 82            [12] 1988 	mov	dpl,a
      000827 ED               [12] 1989 	mov	a,r5
      000828 34s08            [12] 1990 	addc	a,#(_u >> 8)
      00082A F5 83            [12] 1991 	mov	dph,a
      00082C E0               [24] 1992 	movx	a,@dptr
      00082D FD               [12] 1993 	mov	r5,a
      00082E E5*00            [12] 1994 	mov	a,_bp
      000830 24 06            [12] 1995 	add	a,#0x06
      000832 F8               [12] 1996 	mov	r0,a
      000833 E5*00            [12] 1997 	mov	a,_bp
      000835 24 0E            [12] 1998 	add	a,#0x0e
      000837 F9               [12] 1999 	mov	r1,a
      000838 ED               [12] 2000 	mov	a,r5
      000839 26               [12] 2001 	add	a,@r0
      00083A F7               [12] 2002 	mov	@r1,a
                                   2003 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00083B 74 41            [12] 2004 	mov	a,#0x41
      00083D 2E               [12] 2005 	add	a,r6
      00083E FE               [12] 2006 	mov	r6,a
      00083F E4               [12] 2007 	clr	a
      000840 3F               [12] 2008 	addc	a,r7
      000841 FF               [12] 2009 	mov	r7,a
      000842 C0 03            [24] 2010 	push	ar3
      000844 C0 02            [24] 2011 	push	ar2
      000846 74 40            [12] 2012 	mov	a,#0x40
      000848 C0 E0            [24] 2013 	push	acc
      00084A E4               [12] 2014 	clr	a
      00084B C0 E0            [24] 2015 	push	acc
      00084D 8E 82            [24] 2016 	mov	dpl,r6
      00084F 8F 83            [24] 2017 	mov	dph,r7
      000851 12r00r00         [24] 2018 	lcall	__modsint
      000854 AE 82            [24] 2019 	mov	r6,dpl
      000856 AF 83            [24] 2020 	mov	r7,dph
      000858 15 81            [12] 2021 	dec	sp
      00085A 15 81            [12] 2022 	dec	sp
      00085C D0 02            [24] 2023 	pop	ar2
      00085E D0 03            [24] 2024 	pop	ar3
      000860 EF               [12] 2025 	mov	a,r7
      000861 C4               [12] 2026 	swap	a
      000862 23               [12] 2027 	rl	a
      000863 54 E0            [12] 2028 	anl	a,#0xe0
      000865 CE               [12] 2029 	xch	a,r6
      000866 C4               [12] 2030 	swap	a
      000867 23               [12] 2031 	rl	a
      000868 CE               [12] 2032 	xch	a,r6
      000869 6E               [12] 2033 	xrl	a,r6
      00086A CE               [12] 2034 	xch	a,r6
      00086B 54 E0            [12] 2035 	anl	a,#0xe0
      00086D CE               [12] 2036 	xch	a,r6
      00086E 6E               [12] 2037 	xrl	a,r6
      00086F FF               [12] 2038 	mov	r7,a
      000870 E5*00            [12] 2039 	mov	a,_bp
      000872 24 08            [12] 2040 	add	a,#0x08
      000874 F8               [12] 2041 	mov	r0,a
      000875 E6               [12] 2042 	mov	a,@r0
      000876 2E               [12] 2043 	add	a,r6
      000877 FC               [12] 2044 	mov	r4,a
      000878 08               [12] 2045 	inc	r0
      000879 E6               [12] 2046 	mov	a,@r0
      00087A 3F               [12] 2047 	addc	a,r7
      00087B FD               [12] 2048 	mov	r5,a
      00087C EC               [12] 2049 	mov	a,r4
      00087D 24r02            [12] 2050 	add	a,#_u
      00087F F5 82            [12] 2051 	mov	dpl,a
      000881 ED               [12] 2052 	mov	a,r5
      000882 34s08            [12] 2053 	addc	a,#(_u >> 8)
      000884 F5 83            [12] 2054 	mov	dph,a
      000886 E0               [24] 2055 	movx	a,@dptr
      000887 FD               [12] 2056 	mov	r5,a
      000888 E5*00            [12] 2057 	mov	a,_bp
      00088A 24 0E            [12] 2058 	add	a,#0x0e
      00088C F8               [12] 2059 	mov	r0,a
      00088D E5*00            [12] 2060 	mov	a,_bp
      00088F 24 0E            [12] 2061 	add	a,#0x0e
      000891 F9               [12] 2062 	mov	r1,a
      000892 ED               [12] 2063 	mov	a,r5
      000893 26               [12] 2064 	add	a,@r0
      000894 F7               [12] 2065 	mov	@r1,a
                                   2066 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000895 E5*00            [12] 2067 	mov	a,_bp
      000897 24 0A            [12] 2068 	add	a,#0x0a
      000899 F8               [12] 2069 	mov	r0,a
      00089A E6               [12] 2070 	mov	a,@r0
      00089B 2E               [12] 2071 	add	a,r6
      00089C FC               [12] 2072 	mov	r4,a
      00089D 08               [12] 2073 	inc	r0
      00089E E6               [12] 2074 	mov	a,@r0
      00089F 3F               [12] 2075 	addc	a,r7
      0008A0 FD               [12] 2076 	mov	r5,a
      0008A1 EC               [12] 2077 	mov	a,r4
      0008A2 24r02            [12] 2078 	add	a,#_u
      0008A4 F5 82            [12] 2079 	mov	dpl,a
      0008A6 ED               [12] 2080 	mov	a,r5
      0008A7 34s08            [12] 2081 	addc	a,#(_u >> 8)
      0008A9 F5 83            [12] 2082 	mov	dph,a
      0008AB E0               [24] 2083 	movx	a,@dptr
      0008AC FD               [12] 2084 	mov	r5,a
      0008AD E5*00            [12] 2085 	mov	a,_bp
      0008AF 24 0E            [12] 2086 	add	a,#0x0e
      0008B1 F8               [12] 2087 	mov	r0,a
      0008B2 ED               [12] 2088 	mov	a,r5
      0008B3 26               [12] 2089 	add	a,@r0
      0008B4 FD               [12] 2090 	mov	r5,a
                                   2091 ;	life.c:180: y1 = 1; x1 = 1;
      0008B5 90r18r08         [24] 2092 	mov	dptr,#_y1
      0008B8 74 01            [12] 2093 	mov	a,#0x01
      0008BA F0               [24] 2094 	movx	@dptr,a
      0008BB E4               [12] 2095 	clr	a
      0008BC A3               [24] 2096 	inc	dptr
      0008BD F0               [24] 2097 	movx	@dptr,a
      0008BE 90r18r06         [24] 2098 	mov	dptr,#_x1
      0008C1 04               [12] 2099 	inc	a
      0008C2 F0               [24] 2100 	movx	@dptr,a
      0008C3 E4               [12] 2101 	clr	a
      0008C4 A3               [24] 2102 	inc	dptr
      0008C5 F0               [24] 2103 	movx	@dptr,a
                                   2104 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008C6 E5*00            [12] 2105 	mov	a,_bp
      0008C8 24 0C            [12] 2106 	add	a,#0x0c
      0008CA F8               [12] 2107 	mov	r0,a
      0008CB E6               [12] 2108 	mov	a,@r0
      0008CC 2E               [12] 2109 	add	a,r6
      0008CD FE               [12] 2110 	mov	r6,a
      0008CE 08               [12] 2111 	inc	r0
      0008CF E6               [12] 2112 	mov	a,@r0
      0008D0 3F               [12] 2113 	addc	a,r7
      0008D1 FF               [12] 2114 	mov	r7,a
      0008D2 EE               [12] 2115 	mov	a,r6
      0008D3 24r02            [12] 2116 	add	a,#_u
      0008D5 F5 82            [12] 2117 	mov	dpl,a
      0008D7 EF               [12] 2118 	mov	a,r7
      0008D8 34s08            [12] 2119 	addc	a,#(_u >> 8)
      0008DA F5 83            [12] 2120 	mov	dph,a
      0008DC E0               [24] 2121 	movx	a,@dptr
      0008DD 2D               [12] 2122 	add	a,r5
      0008DE FF               [12] 2123 	mov	r7,a
      0008DF 90r18r0F         [24] 2124 	mov	dptr,#_n
      0008E2 F0               [24] 2125 	movx	@dptr,a
                                   2126 ;	life.c:183: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008E3 E5*00            [12] 2127 	mov	a,_bp
      0008E5 24 03            [12] 2128 	add	a,#0x03
      0008E7 F8               [12] 2129 	mov	r0,a
      0008E8 E6               [12] 2130 	mov	a,@r0
      0008E9 24r02            [12] 2131 	add	a,#_nu
      0008EB FD               [12] 2132 	mov	r5,a
      0008EC 08               [12] 2133 	inc	r0
      0008ED E6               [12] 2134 	mov	a,@r0
      0008EE 34s10            [12] 2135 	addc	a,#(_nu >> 8)
      0008F0 FE               [12] 2136 	mov	r6,a
      0008F1 BF 03 02         [24] 2137 	cjne	r7,#0x03,00415$
      0008F4 80 20            [24] 2138 	sjmp	00205$
      0008F6                       2139 00415$:
      0008F6 BF 02 19         [24] 2140 	cjne	r7,#0x02,00204$
      0008F9 A8*00            [24] 2141 	mov	r0,_bp
      0008FB 08               [12] 2142 	inc	r0
      0008FC EA               [12] 2143 	mov	a,r2
      0008FD 26               [12] 2144 	add	a,@r0
      0008FE FA               [12] 2145 	mov	r2,a
      0008FF EB               [12] 2146 	mov	a,r3
      000900 08               [12] 2147 	inc	r0
      000901 36               [12] 2148 	addc	a,@r0
      000902 FB               [12] 2149 	mov	r3,a
      000903 EA               [12] 2150 	mov	a,r2
      000904 24r02            [12] 2151 	add	a,#_u
      000906 FA               [12] 2152 	mov	r2,a
      000907 EB               [12] 2153 	mov	a,r3
      000908 34s08            [12] 2154 	addc	a,#(_u >> 8)
      00090A FB               [12] 2155 	mov	r3,a
      00090B 8A 82            [24] 2156 	mov	dpl,r2
      00090D 8B 83            [24] 2157 	mov	dph,r3
      00090F E0               [24] 2158 	movx	a,@dptr
      000910 70 04            [24] 2159 	jnz	00205$
      000912                       2160 00204$:
                                   2161 ;	assignBit
      000912 C2*00            [12] 2162 	clr	b0
      000914 80 02            [24] 2163 	sjmp	00206$
      000916                       2164 00205$:
                                   2165 ;	assignBit
      000916 D2*00            [12] 2166 	setb	b0
      000918                       2167 00206$:
      000918 A2*00            [12] 2168 	mov	c,b0
      00091A E4               [12] 2169 	clr	a
      00091B 33               [12] 2170 	rlc	a
      00091C 8D 82            [24] 2171 	mov	dpl,r5
      00091E 8E 83            [24] 2172 	mov	dph,r6
      000920 F0               [24] 2173 	movx	@dptr,a
                                   2174 ;	life.c:184: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000921 90r18r04         [24] 2175 	mov	dptr,#_y
      000924 E5*00            [12] 2176 	mov	a,_bp
      000926 24 0E            [12] 2177 	add	a,#0x0e
      000928 F8               [12] 2178 	mov	r0,a
      000929 E0               [24] 2179 	movx	a,@dptr
      00092A F6               [12] 2180 	mov	@r0,a
      00092B A3               [24] 2181 	inc	dptr
      00092C E0               [24] 2182 	movx	a,@dptr
      00092D 08               [12] 2183 	inc	r0
      00092E F6               [12] 2184 	mov	@r0,a
      00092F E5*00            [12] 2185 	mov	a,_bp
      000931 24 0E            [12] 2186 	add	a,#0x0e
      000933 F8               [12] 2187 	mov	r0,a
      000934 86 04            [24] 2188 	mov	ar4,@r0
      000936 08               [12] 2189 	inc	r0
      000937 E6               [12] 2190 	mov	a,@r0
      000938 C4               [12] 2191 	swap	a
      000939 23               [12] 2192 	rl	a
      00093A 54 E0            [12] 2193 	anl	a,#0xe0
      00093C CC               [12] 2194 	xch	a,r4
      00093D C4               [12] 2195 	swap	a
      00093E 23               [12] 2196 	rl	a
      00093F CC               [12] 2197 	xch	a,r4
      000940 6C               [12] 2198 	xrl	a,r4
      000941 CC               [12] 2199 	xch	a,r4
      000942 54 E0            [12] 2200 	anl	a,#0xe0
      000944 CC               [12] 2201 	xch	a,r4
      000945 6C               [12] 2202 	xrl	a,r4
      000946 FD               [12] 2203 	mov	r5,a
      000947 90r18r02         [24] 2204 	mov	dptr,#_x
      00094A E0               [24] 2205 	movx	a,@dptr
      00094B FA               [12] 2206 	mov	r2,a
      00094C A3               [24] 2207 	inc	dptr
      00094D E0               [24] 2208 	movx	a,@dptr
      00094E FB               [12] 2209 	mov	r3,a
      00094F EA               [12] 2210 	mov	a,r2
      000950 2C               [12] 2211 	add	a,r4
      000951 FC               [12] 2212 	mov	r4,a
      000952 EB               [12] 2213 	mov	a,r3
      000953 3D               [12] 2214 	addc	a,r5
      000954 FD               [12] 2215 	mov	r5,a
      000955 EC               [12] 2216 	mov	a,r4
      000956 24r02            [12] 2217 	add	a,#_pu
      000958 F5 82            [12] 2218 	mov	dpl,a
      00095A ED               [12] 2219 	mov	a,r5
      00095B 34s00            [12] 2220 	addc	a,#(_pu >> 8)
      00095D F5 83            [12] 2221 	mov	dph,a
      00095F E0               [24] 2222 	movx	a,@dptr
      000960 FE               [12] 2223 	mov	r6,a
      000961 E5*00            [12] 2224 	mov	a,_bp
      000963 24 0A            [12] 2225 	add	a,#0x0a
      000965 F8               [12] 2226 	mov	r0,a
      000966 EC               [12] 2227 	mov	a,r4
      000967 24r02            [12] 2228 	add	a,#_nu
      000969 F6               [12] 2229 	mov	@r0,a
      00096A ED               [12] 2230 	mov	a,r5
      00096B 34s10            [12] 2231 	addc	a,#(_nu >> 8)
      00096D 08               [12] 2232 	inc	r0
      00096E F6               [12] 2233 	mov	@r0,a
      00096F E5*00            [12] 2234 	mov	a,_bp
      000971 24 0A            [12] 2235 	add	a,#0x0a
      000973 F8               [12] 2236 	mov	r0,a
      000974 86 82            [24] 2237 	mov	dpl,@r0
      000976 08               [12] 2238 	inc	r0
      000977 86 83            [24] 2239 	mov	dph,@r0
      000979 E0               [24] 2240 	movx	a,@dptr
      00097A FF               [12] 2241 	mov	r7,a
      00097B EE               [12] 2242 	mov	a,r6
      00097C 62 07            [12] 2243 	xrl	ar7,a
      00097E 90r18r11         [24] 2244 	mov	dptr,#_cycle2
      000981 E0               [24] 2245 	movx	a,@dptr
      000982 4F               [12] 2246 	orl	a,r7
      000983 F0               [24] 2247 	movx	@dptr,a
                                   2248 ;	life.c:185: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000984 EC               [12] 2249 	mov	a,r4
      000985 24r02            [12] 2250 	add	a,#_u
      000987 F5 82            [12] 2251 	mov	dpl,a
      000989 ED               [12] 2252 	mov	a,r5
      00098A 34s08            [12] 2253 	addc	a,#(_u >> 8)
      00098C F5 83            [12] 2254 	mov	dph,a
      00098E E0               [24] 2255 	movx	a,@dptr
      00098F FF               [12] 2256 	mov	r7,a
      000990 E5*00            [12] 2257 	mov	a,_bp
      000992 24 0A            [12] 2258 	add	a,#0x0a
      000994 F8               [12] 2259 	mov	r0,a
      000995 86 82            [24] 2260 	mov	dpl,@r0
      000997 08               [12] 2261 	inc	r0
      000998 86 83            [24] 2262 	mov	dph,@r0
      00099A E0               [24] 2263 	movx	a,@dptr
      00099B 62 07            [12] 2264 	xrl	ar7,a
      00099D 90r18r10         [24] 2265 	mov	dptr,#_fixed
      0009A0 E0               [24] 2266 	movx	a,@dptr
      0009A1 4F               [12] 2267 	orl	a,r7
      0009A2 F0               [24] 2268 	movx	@dptr,a
                                   2269 ;	life.c:161: for (x = 0; x < W; x++) {
      0009A3 90r18r02         [24] 2270 	mov	dptr,#_x
      0009A6 74 01            [12] 2271 	mov	a,#0x01
      0009A8 2A               [12] 2272 	add	a,r2
      0009A9 F0               [24] 2273 	movx	@dptr,a
      0009AA E4               [12] 2274 	clr	a
      0009AB 3B               [12] 2275 	addc	a,r3
      0009AC A3               [24] 2276 	inc	dptr
      0009AD F0               [24] 2277 	movx	@dptr,a
      0009AE 90r18r02         [24] 2278 	mov	dptr,#_x
      0009B1 E0               [24] 2279 	movx	a,@dptr
      0009B2 FE               [12] 2280 	mov	r6,a
      0009B3 A3               [24] 2281 	inc	dptr
      0009B4 E0               [24] 2282 	movx	a,@dptr
      0009B5 FF               [12] 2283 	mov	r7,a
      0009B6 C3               [12] 2284 	clr	c
      0009B7 EE               [12] 2285 	mov	a,r6
      0009B8 94 20            [12] 2286 	subb	a,#0x20
      0009BA EF               [12] 2287 	mov	a,r7
      0009BB 64 80            [12] 2288 	xrl	a,#0x80
      0009BD 94 80            [12] 2289 	subb	a,#0x80
      0009BF 50 03            [24] 2290 	jnc	00419$
      0009C1 02r05rE4         [24] 2291 	ljmp	00183$
      0009C4                       2292 00419$:
                                   2293 ;	life.c:158: for (y = 0; y < H; y++) {
      0009C4 E5*00            [12] 2294 	mov	a,_bp
      0009C6 24 0E            [12] 2295 	add	a,#0x0e
      0009C8 F8               [12] 2296 	mov	r0,a
      0009C9 90r18r04         [24] 2297 	mov	dptr,#_y
      0009CC 74 01            [12] 2298 	mov	a,#0x01
      0009CE 26               [12] 2299 	add	a,@r0
      0009CF F0               [24] 2300 	movx	@dptr,a
      0009D0 E4               [12] 2301 	clr	a
      0009D1 08               [12] 2302 	inc	r0
      0009D2 36               [12] 2303 	addc	a,@r0
      0009D3 A3               [24] 2304 	inc	dptr
      0009D4 F0               [24] 2305 	movx	@dptr,a
      0009D5 90r18r04         [24] 2306 	mov	dptr,#_y
      0009D8 E0               [24] 2307 	movx	a,@dptr
      0009D9 FE               [12] 2308 	mov	r6,a
      0009DA A3               [24] 2309 	inc	dptr
      0009DB E0               [24] 2310 	movx	a,@dptr
      0009DC FF               [12] 2311 	mov	r7,a
      0009DD C3               [12] 2312 	clr	c
      0009DE EE               [12] 2313 	mov	a,r6
      0009DF 94 40            [12] 2314 	subb	a,#0x40
      0009E1 EF               [12] 2315 	mov	a,r7
      0009E2 64 80            [12] 2316 	xrl	a,#0x80
      0009E4 94 80            [12] 2317 	subb	a,#0x80
      0009E6 50 03            [24] 2318 	jnc	00420$
      0009E8 02r05rBB         [24] 2319 	ljmp	00185$
      0009EB                       2320 00420$:
                                   2321 ;	life.c:189: cycle2 = !cycle2;
      0009EB 90r18r11         [24] 2322 	mov	dptr,#_cycle2
      0009EE E0               [24] 2323 	movx	a,@dptr
      0009EF B4 01 00         [24] 2324 	cjne	a,#0x01,00421$
      0009F2                       2325 00421$:
      0009F2 92*00            [24] 2326 	mov	b0,c
      0009F4 90r18r11         [24] 2327 	mov	dptr,#_cycle2
      0009F7 E4               [12] 2328 	clr	a
      0009F8 33               [12] 2329 	rlc	a
      0009F9 F0               [24] 2330 	movx	@dptr,a
                                   2331 ;	life.c:190: fixed = !fixed;
      0009FA 90r18r10         [24] 2332 	mov	dptr,#_fixed
      0009FD E0               [24] 2333 	movx	a,@dptr
      0009FE B4 01 00         [24] 2334 	cjne	a,#0x01,00422$
      000A01                       2335 00422$:
      000A01 92*00            [24] 2336 	mov	b0,c
      000A03 90r18r10         [24] 2337 	mov	dptr,#_fixed
      000A06 E4               [12] 2338 	clr	a
      000A07 33               [12] 2339 	rlc	a
      000A08 F0               [24] 2340 	movx	@dptr,a
                                   2341 ;	life.c:192: memcpy(pu, u, sizeof (u));
      000A09 E4               [12] 2342 	clr	a
      000A0A C0 E0            [24] 2343 	push	acc
      000A0C 74 08            [12] 2344 	mov	a,#0x08
      000A0E C0 E0            [24] 2345 	push	acc
      000A10 74r02            [12] 2346 	mov	a,#_u
      000A12 C0 E0            [24] 2347 	push	acc
      000A14 74s08            [12] 2348 	mov	a,#(_u >> 8)
      000A16 C0 E0            [24] 2349 	push	acc
      000A18 E4               [12] 2350 	clr	a
      000A19 C0 E0            [24] 2351 	push	acc
      000A1B 90r00r02         [24] 2352 	mov	dptr,#_pu
      000A1E 75 F0 00         [24] 2353 	mov	b,#0x00
      000A21 12r00r00         [24] 2354 	lcall	___memcpy
      000A24 E5 81            [12] 2355 	mov	a,sp
      000A26 24 FB            [12] 2356 	add	a,#0xfb
      000A28 F5 81            [12] 2357 	mov	sp,a
                                   2358 ;	life.c:193: memcpy(u, nu, sizeof (nu));
      000A2A E4               [12] 2359 	clr	a
      000A2B C0 E0            [24] 2360 	push	acc
      000A2D 74 08            [12] 2361 	mov	a,#0x08
      000A2F C0 E0            [24] 2362 	push	acc
      000A31 74r02            [12] 2363 	mov	a,#_nu
      000A33 C0 E0            [24] 2364 	push	acc
      000A35 74s10            [12] 2365 	mov	a,#(_nu >> 8)
      000A37 C0 E0            [24] 2366 	push	acc
      000A39 E4               [12] 2367 	clr	a
      000A3A C0 E0            [24] 2368 	push	acc
      000A3C 90r08r02         [24] 2369 	mov	dptr,#_u
      000A3F 75 F0 00         [24] 2370 	mov	b,#0x00
      000A42 12r00r00         [24] 2371 	lcall	___memcpy
      000A45 E5 81            [12] 2372 	mov	a,sp
      000A47 24 FB            [12] 2373 	add	a,#0xfb
      000A49 F5 81            [12] 2374 	mov	sp,a
                                   2375 ;	life.c:231: if (fixed || cycle2) {
      000A4B 90r18r10         [24] 2376 	mov	dptr,#_fixed
      000A4E E0               [24] 2377 	movx	a,@dptr
      000A4F 70 09            [24] 2378 	jnz	00120$
      000A51 90r18r11         [24] 2379 	mov	dptr,#_cycle2
      000A54 E0               [24] 2380 	movx	a,@dptr
      000A55 70 03            [24] 2381 	jnz	00424$
      000A57 02r05r90         [24] 2382 	ljmp	00192$
      000A5A                       2383 00424$:
      000A5A                       2384 00120$:
                                   2385 ;	life.c:232: printstr("DONE\r\n");
      000A5A 7Dr3C            [12] 2386 	mov	r5,#___str_6
      000A5C 7Es00            [12] 2387 	mov	r6,#(___str_6 >> 8)
      000A5E 7F 80            [12] 2388 	mov	r7,#0x80
                                   2389 ;	life.c:48: return;
      000A60                       2390 00188$:
                                   2391 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A60 8D 82            [24] 2392 	mov	dpl,r5
      000A62 8E 83            [24] 2393 	mov	dph,r6
      000A64 8F F0            [24] 2394 	mov	b,r7
      000A66 12r00r00         [24] 2395 	lcall	__gptrget
      000A69 FC               [12] 2396 	mov	r4,a
      000A6A 60 10            [24] 2397 	jz	00162$
      000A6C 7B 00            [12] 2398 	mov	r3,#0x00
      000A6E 8C 82            [24] 2399 	mov	dpl,r4
      000A70 8B 83            [24] 2400 	mov	dph,r3
      000A72 12r00r00         [24] 2401 	lcall	_putchar
      000A75 0D               [12] 2402 	inc	r5
                                   2403 ;	life.c:232: printstr("DONE\r\n");
      000A76 BD 00 E7         [24] 2404 	cjne	r5,#0x00,00188$
      000A79 0E               [12] 2405 	inc	r6
      000A7A 80 E4            [24] 2406 	sjmp	00188$
      000A7C                       2407 00162$:
                                   2408 ;	life.c:233: (void)getchar();
      000A7C 12r00r05         [24] 2409 	lcall	_getchar
                                   2410 ;	life.c:234: break;
      000A7F                       2411 00123$:
                                   2412 ;	life.c:238: if (i1) {
      000A7F 90r00r01         [24] 2413 	mov	dptr,#_i1
      000A82 E0               [24] 2414 	movx	a,@dptr
      000A83 60 25            [24] 2415 	jz	00198$
                                   2416 ;	life.c:239: printstr("BREAK\r\n");
      000A85 7Dr43            [12] 2417 	mov	r5,#___str_7
      000A87 7Es00            [12] 2418 	mov	r6,#(___str_7 >> 8)
      000A89 7F 80            [12] 2419 	mov	r7,#0x80
                                   2420 ;	life.c:48: return;
      000A8B                       2421 00195$:
                                   2422 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A8B 8D 82            [24] 2423 	mov	dpl,r5
      000A8D 8E 83            [24] 2424 	mov	dph,r6
      000A8F 8F F0            [24] 2425 	mov	b,r7
      000A91 12r00r00         [24] 2426 	lcall	__gptrget
      000A94 FC               [12] 2427 	mov	r4,a
      000A95 60 10            [24] 2428 	jz	00164$
      000A97 7B 00            [12] 2429 	mov	r3,#0x00
      000A99 8C 82            [24] 2430 	mov	dpl,r4
      000A9B 8B 83            [24] 2431 	mov	dph,r3
      000A9D 12r00r00         [24] 2432 	lcall	_putchar
      000AA0 0D               [12] 2433 	inc	r5
                                   2434 ;	life.c:239: printstr("BREAK\r\n");
      000AA1 BD 00 E7         [24] 2435 	cjne	r5,#0x00,00195$
      000AA4 0E               [12] 2436 	inc	r6
      000AA5 80 E4            [24] 2437 	sjmp	00195$
      000AA7                       2438 00164$:
                                   2439 ;	life.c:240: (void)getchar();
      000AA7 12r00r05         [24] 2440 	lcall	_getchar
      000AAA                       2441 00198$:
                                   2442 ;	life.c:205: for (i0 = 0; !i0; ) {		
      000AAA 90r00r00         [24] 2443 	mov	dptr,#_i0
      000AAD E0               [24] 2444 	movx	a,@dptr
      000AAE 70 03            [24] 2445 	jnz	00430$
      000AB0 02r02rB2         [24] 2446 	ljmp	00197$
      000AB3                       2447 00430$:
                                   2448 ;	life.c:244: terminate:
      000AB3                       2449 00127$:
                                   2450 ;	life.c:245: EA = 0;
                                   2451 ;	assignBit
      000AB3 C2 AF            [12] 2452 	clr	_EA
                                   2453 ;	life.c:246: printstr("TERM\r\n");
      000AB5 7Dr4B            [12] 2454 	mov	r5,#___str_8
      000AB7 7Es00            [12] 2455 	mov	r6,#(___str_8 >> 8)
      000AB9 7F 80            [12] 2456 	mov	r7,#0x80
                                   2457 ;	life.c:48: return;
      000ABB                       2458 00200$:
                                   2459 ;	life.c:46: for (; *s; s++) putchar(*s);
      000ABB 8D 82            [24] 2460 	mov	dpl,r5
      000ABD 8E 83            [24] 2461 	mov	dph,r6
      000ABF 8F F0            [24] 2462 	mov	b,r7
      000AC1 12r00r00         [24] 2463 	lcall	__gptrget
      000AC4 FC               [12] 2464 	mov	r4,a
      000AC5 60 10            [24] 2465 	jz	00166$
      000AC7 7B 00            [12] 2466 	mov	r3,#0x00
      000AC9 8C 82            [24] 2467 	mov	dpl,r4
      000ACB 8B 83            [24] 2468 	mov	dph,r3
      000ACD 12r00r00         [24] 2469 	lcall	_putchar
      000AD0 0D               [12] 2470 	inc	r5
                                   2471 ;	life.c:246: printstr("TERM\r\n");
      000AD1 BD 00 E7         [24] 2472 	cjne	r5,#0x00,00200$
      000AD4 0E               [12] 2473 	inc	r6
      000AD5 80 E4            [24] 2474 	sjmp	00200$
      000AD7                       2475 00166$:
                                   2476 ;	life.c:247: (void)getchar();
      000AD7 12r00r05         [24] 2477 	lcall	_getchar
                                   2478 ;	life.c:251: __endasm;
      000ADA 02 00 00         [24] 2479 	ljmp	0
                                   2480 ;	life.c:252: }
      000ADD 85*00 81         [24] 2481 	mov	sp,_bp
      000AE0 D0*00            [24] 2482 	pop	_bp
      000AE2 22               [24] 2483 	ret
                                   2484 	.area CSEG    (CODE)
                                   2485 	.area CONST   (CODE)
      000000                       2486 _digits:
      000000 30                    2487 	.db #0x30	; 48	'0'
      000001 31                    2488 	.db #0x31	; 49	'1'
      000002 32                    2489 	.db #0x32	; 50	'2'
      000003 33                    2490 	.db #0x33	; 51	'3'
      000004 34                    2491 	.db #0x34	; 52	'4'
      000005 35                    2492 	.db #0x35	; 53	'5'
      000006 36                    2493 	.db #0x36	; 54	'6'
      000007 37                    2494 	.db #0x37	; 55	'7'
      000008 38                    2495 	.db #0x38	; 56	'8'
      000009 39                    2496 	.db #0x39	; 57	'9'
      00000A 61                    2497 	.db #0x61	; 97	'a'
      00000B 62                    2498 	.db #0x62	; 98	'b'
      00000C 63                    2499 	.db #0x63	; 99	'c'
      00000D 64                    2500 	.db #0x64	; 100	'd'
      00000E 65                    2501 	.db #0x65	; 101	'e'
      00000F 66                    2502 	.db #0x66	; 102	'f'
                                   2503 	.area CONST   (CODE)
      000010                       2504 ___str_0:
      000010 1B                    2505 	.db 0x1b
      000011 5B 32 4A              2506 	.ascii "[2J"
      000014 1B                    2507 	.db 0x1b
      000015 5B 6D                 2508 	.ascii "[m"
      000017 00                    2509 	.db 0x00
                                   2510 	.area CSEG    (CODE)
                                   2511 	.area CONST   (CODE)
      000018                       2512 ___str_1:
      000018 0D                    2513 	.db 0x0d
      000019 0A                    2514 	.db 0x0a
      00001A 00                    2515 	.db 0x00
                                   2516 	.area CSEG    (CODE)
                                   2517 	.area CONST   (CODE)
      00001B                       2518 ___str_2:
      00001B 4C 4F 41 44 20 3C     2519 	.ascii "LOAD <"
      000021 00                    2520 	.db 0x00
                                   2521 	.area CSEG    (CODE)
                                   2522 	.area CONST   (CODE)
      000022                       2523 ___str_3:
      000022 3E                    2524 	.ascii ">"
      000023 0D                    2525 	.db 0x0d
      000024 0A                    2526 	.db 0x0a
      000025 00                    2527 	.db 0x00
                                   2528 	.area CSEG    (CODE)
      000AE3                       2529 _busy:
      000AE3 5C                    2530 	.db #0x5c	; 92
      000AE4 7C                    2531 	.db #0x7c	; 124
      000AE5 2F                    2532 	.db #0x2f	; 47
      000AE6 2D                    2533 	.db #0x2d	; 45
                                   2534 	.area CONST   (CODE)
      000026                       2535 ___str_4:
      000026 1B                    2536 	.db 0x1b
      000027 5B 32 4A              2537 	.ascii "[2J"
      00002A 1B                    2538 	.db 0x1b
      00002B 5B 6D 49 4E 49 54     2539 	.ascii "[mINIT"
      000031 0D                    2540 	.db 0x0d
      000032 0A                    2541 	.db 0x0a
      000033 00                    2542 	.db 0x00
                                   2543 	.area CSEG    (CODE)
                                   2544 	.area CONST   (CODE)
      000034                       2545 ___str_5:
      000034 52 45 41 44 59        2546 	.ascii "READY"
      000039 0D                    2547 	.db 0x0d
      00003A 0A                    2548 	.db 0x0a
      00003B 00                    2549 	.db 0x00
                                   2550 	.area CSEG    (CODE)
                                   2551 	.area CONST   (CODE)
      00003C                       2552 ___str_6:
      00003C 44 4F 4E 45           2553 	.ascii "DONE"
      000040 0D                    2554 	.db 0x0d
      000041 0A                    2555 	.db 0x0a
      000042 00                    2556 	.db 0x00
                                   2557 	.area CSEG    (CODE)
                                   2558 	.area CONST   (CODE)
      000043                       2559 ___str_7:
      000043 42 52 45 41 4B        2560 	.ascii "BREAK"
      000048 0D                    2561 	.db 0x0d
      000049 0A                    2562 	.db 0x0a
      00004A 00                    2563 	.db 0x00
                                   2564 	.area CSEG    (CODE)
                                   2565 	.area CONST   (CODE)
      00004B                       2566 ___str_8:
      00004B 54 45 52 4D           2567 	.ascii "TERM"
      00004F 0D                    2568 	.db 0x0d
      000050 0A                    2569 	.db 0x0a
      000051 00                    2570 	.db 0x00
                                   2571 	.area CSEG    (CODE)
                                   2572 	.area XINIT   (CODE)
                                   2573 	.area CABS    (ABS,CODE)
