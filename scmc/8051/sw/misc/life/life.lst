                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _c
                                    143 	.globl _j
                                    144 	.globl _cycle2
                                    145 	.globl _fixed
                                    146 	.globl _generation
                                    147 	.globl _n
                                    148 	.globl _y1
                                    149 	.globl _x1
                                    150 	.globl _y
                                    151 	.globl _x
                                    152 	.globl _nu
                                    153 	.globl _u
                                    154 	.globl _pu
                                    155 	.globl _i1
                                    156 	.globl _i0
                                    157 ;--------------------------------------------------------
                                    158 ; special function registers
                                    159 ;--------------------------------------------------------
                                    160 	.area RSEG    (ABS,DATA)
      000000                        161 	.org 0x0000
                           000080   162 _P0	=	0x0080
                           000081   163 _SP	=	0x0081
                           000082   164 _DPL	=	0x0082
                           000083   165 _DPH	=	0x0083
                           000087   166 _PCON	=	0x0087
                           000088   167 _TCON	=	0x0088
                           000089   168 _TMOD	=	0x0089
                           00008A   169 _TL0	=	0x008a
                           00008B   170 _TL1	=	0x008b
                           00008C   171 _TH0	=	0x008c
                           00008D   172 _TH1	=	0x008d
                           000090   173 _P1	=	0x0090
                           000098   174 _SCON	=	0x0098
                           000099   175 _SBUF	=	0x0099
                           0000A0   176 _P2	=	0x00a0
                           0000A8   177 _IE	=	0x00a8
                           0000B0   178 _P3	=	0x00b0
                           0000B8   179 _IP	=	0x00b8
                           0000C8   180 _T2CON	=	0x00c8
                           0000C9   181 _T2MOD	=	0x00c9
                           0000CA   182 _RCAP2L	=	0x00ca
                           0000CB   183 _RCAP2H	=	0x00cb
                           0000CC   184 _TL2	=	0x00cc
                           0000CD   185 _TH2	=	0x00cd
                           0000D0   186 _PSW	=	0x00d0
                           0000E0   187 _ACC	=	0x00e0
                           0000E0   188 _A	=	0x00e0
                           0000F0   189 _B	=	0x00f0
                                    190 ;--------------------------------------------------------
                                    191 ; special function bits
                                    192 ;--------------------------------------------------------
                                    193 	.area RSEG    (ABS,DATA)
      000000                        194 	.org 0x0000
                           000080   195 _P0_0	=	0x0080
                           000081   196 _P0_1	=	0x0081
                           000082   197 _P0_2	=	0x0082
                           000083   198 _P0_3	=	0x0083
                           000084   199 _P0_4	=	0x0084
                           000085   200 _P0_5	=	0x0085
                           000086   201 _P0_6	=	0x0086
                           000087   202 _P0_7	=	0x0087
                           000088   203 _IT0	=	0x0088
                           000089   204 _IE0	=	0x0089
                           00008A   205 _IT1	=	0x008a
                           00008B   206 _IE1	=	0x008b
                           00008C   207 _TR0	=	0x008c
                           00008D   208 _TF0	=	0x008d
                           00008E   209 _TR1	=	0x008e
                           00008F   210 _TF1	=	0x008f
                           000090   211 _P1_0	=	0x0090
                           000091   212 _P1_1	=	0x0091
                           000092   213 _P1_2	=	0x0092
                           000093   214 _P1_3	=	0x0093
                           000094   215 _P1_4	=	0x0094
                           000095   216 _P1_5	=	0x0095
                           000096   217 _P1_6	=	0x0096
                           000097   218 _P1_7	=	0x0097
                           000090   219 _T2	=	0x0090
                           000091   220 _T2EX	=	0x0091
                           000098   221 _RI	=	0x0098
                           000099   222 _TI	=	0x0099
                           00009A   223 _RB8	=	0x009a
                           00009B   224 _TB8	=	0x009b
                           00009C   225 _REN	=	0x009c
                           00009D   226 _SM2	=	0x009d
                           00009E   227 _SM1	=	0x009e
                           00009F   228 _SM0	=	0x009f
                           0000A0   229 _P2_0	=	0x00a0
                           0000A1   230 _P2_1	=	0x00a1
                           0000A2   231 _P2_2	=	0x00a2
                           0000A3   232 _P2_3	=	0x00a3
                           0000A4   233 _P2_4	=	0x00a4
                           0000A5   234 _P2_5	=	0x00a5
                           0000A6   235 _P2_6	=	0x00a6
                           0000A7   236 _P2_7	=	0x00a7
                           0000A8   237 _EX0	=	0x00a8
                           0000A9   238 _ET0	=	0x00a9
                           0000AA   239 _EX1	=	0x00aa
                           0000AB   240 _ET1	=	0x00ab
                           0000AC   241 _ES	=	0x00ac
                           0000AD   242 _ET2	=	0x00ad
                           0000AF   243 _EA	=	0x00af
                           0000B0   244 _P3_0	=	0x00b0
                           0000B1   245 _P3_1	=	0x00b1
                           0000B2   246 _P3_2	=	0x00b2
                           0000B3   247 _P3_3	=	0x00b3
                           0000B4   248 _P3_4	=	0x00b4
                           0000B5   249 _P3_5	=	0x00b5
                           0000B6   250 _P3_6	=	0x00b6
                           0000B7   251 _P3_7	=	0x00b7
                           0000B0   252 _RXD	=	0x00b0
                           0000B1   253 _TXD	=	0x00b1
                           0000B2   254 _INT0	=	0x00b2
                           0000B3   255 _INT1	=	0x00b3
                           0000B4   256 _T0	=	0x00b4
                           0000B5   257 _T1	=	0x00b5
                           0000B6   258 _WR	=	0x00b6
                           0000B7   259 _RD	=	0x00b7
                           0000B8   260 _PX0	=	0x00b8
                           0000B9   261 _PT0	=	0x00b9
                           0000BA   262 _PX1	=	0x00ba
                           0000BB   263 _PT1	=	0x00bb
                           0000BC   264 _PS	=	0x00bc
                           0000BD   265 _PT2	=	0x00bd
                           0000C8   266 _T2CON_0	=	0x00c8
                           0000C9   267 _T2CON_1	=	0x00c9
                           0000CA   268 _T2CON_2	=	0x00ca
                           0000CB   269 _T2CON_3	=	0x00cb
                           0000CC   270 _T2CON_4	=	0x00cc
                           0000CD   271 _T2CON_5	=	0x00cd
                           0000CE   272 _T2CON_6	=	0x00ce
                           0000CF   273 _T2CON_7	=	0x00cf
                           0000C8   274 _CP_RL2	=	0x00c8
                           0000C9   275 _C_T2	=	0x00c9
                           0000CA   276 _TR2	=	0x00ca
                           0000CB   277 _EXEN2	=	0x00cb
                           0000CC   278 _TCLK	=	0x00cc
                           0000CD   279 _RCLK	=	0x00cd
                           0000CE   280 _EXF2	=	0x00ce
                           0000CF   281 _TF2	=	0x00cf
                           0000D0   282 _P	=	0x00d0
                           0000D1   283 _FL	=	0x00d1
                           0000D2   284 _OV	=	0x00d2
                           0000D3   285 _RS0	=	0x00d3
                           0000D4   286 _RS1	=	0x00d4
                           0000D5   287 _F0	=	0x00d5
                           0000D6   288 _AC	=	0x00d6
                           0000D7   289 _CY	=	0x00d7
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable register banks
                                    292 ;--------------------------------------------------------
                                    293 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        294 	.ds 8
                                    295 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        296 	.ds 8
                                    297 ;--------------------------------------------------------
                                    298 ; overlayable bit register bank
                                    299 ;--------------------------------------------------------
                                    300 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        301 bits:
      000000                        302 	.ds 1
                           008000   303 	b0 = bits[0]
                           008100   304 	b1 = bits[1]
                           008200   305 	b2 = bits[2]
                           008300   306 	b3 = bits[3]
                           008400   307 	b4 = bits[4]
                           008500   308 	b5 = bits[5]
                           008600   309 	b6 = bits[6]
                           008700   310 	b7 = bits[7]
                                    311 ;--------------------------------------------------------
                                    312 ; internal ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area DSEG    (DATA)
                                    315 ;--------------------------------------------------------
                                    316 ; overlayable items in internal ram 
                                    317 ;--------------------------------------------------------
                                    318 ;--------------------------------------------------------
                                    319 ; Stack segment in internal ram 
                                    320 ;--------------------------------------------------------
                                    321 	.area	SSEG
      000000                        322 __start__stack:
      000000                        323 	.ds	1
                                    324 
                                    325 ;--------------------------------------------------------
                                    326 ; indirectly addressable internal ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area ISEG    (DATA)
                                    329 ;--------------------------------------------------------
                                    330 ; absolute internal ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area IABS    (ABS,DATA)
                                    333 	.area IABS    (ABS,DATA)
                                    334 ;--------------------------------------------------------
                                    335 ; bit data
                                    336 ;--------------------------------------------------------
                                    337 	.area BSEG    (BIT)
                                    338 ;--------------------------------------------------------
                                    339 ; paged external ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area PSEG    (PAG,XDATA)
                                    342 ;--------------------------------------------------------
                                    343 ; external ram data
                                    344 ;--------------------------------------------------------
                                    345 	.area XSEG    (XDATA)
      000000                        346 _i0::
      000000                        347 	.ds 1
      000001                        348 _i1::
      000001                        349 	.ds 1
      000002                        350 _pu::
      000002                        351 	.ds 1024
      000402                        352 _u::
      000402                        353 	.ds 1024
      000802                        354 _nu::
      000802                        355 	.ds 1024
      000C02                        356 _x::
      000C02                        357 	.ds 2
      000C04                        358 _y::
      000C04                        359 	.ds 2
      000C06                        360 _x1::
      000C06                        361 	.ds 2
      000C08                        362 _y1::
      000C08                        363 	.ds 2
      000C0A                        364 _n::
      000C0A                        365 	.ds 1
      000C0B                        366 _generation::
      000C0B                        367 	.ds 8
      000C13                        368 _fixed::
      000C13                        369 	.ds 1
      000C14                        370 _cycle2::
      000C14                        371 	.ds 1
      000C15                        372 _j::
      000C15                        373 	.ds 2
      000C17                        374 _c::
      000C17                        375 	.ds 2
                                    376 ;--------------------------------------------------------
                                    377 ; absolute external ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XABS    (ABS,XDATA)
                                    380 ;--------------------------------------------------------
                                    381 ; external initialized ram data
                                    382 ;--------------------------------------------------------
                                    383 	.area XISEG   (XDATA)
                                    384 	.area HOME    (CODE)
                                    385 	.area GSINIT0 (CODE)
                                    386 	.area GSINIT1 (CODE)
                                    387 	.area GSINIT2 (CODE)
                                    388 	.area GSINIT3 (CODE)
                                    389 	.area GSINIT4 (CODE)
                                    390 	.area GSINIT5 (CODE)
                                    391 	.area GSINIT  (CODE)
                                    392 	.area GSFINAL (CODE)
                                    393 	.area CSEG    (CODE)
                                    394 ;--------------------------------------------------------
                                    395 ; interrupt vector 
                                    396 ;--------------------------------------------------------
                                    397 	.area HOME    (CODE)
      000000                        398 __interrupt_vect:
      000000 02r00r00         [24]  399 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  400 	ljmp	_int0
      000006                        401 	.ds	5
      00000B 32               [24]  402 	reti
      00000C                        403 	.ds	7
      000013 02r00r21         [24]  404 	ljmp	_int1
                                    405 ;--------------------------------------------------------
                                    406 ; global & static initialisations
                                    407 ;--------------------------------------------------------
                                    408 	.area HOME    (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.area GSFINAL (CODE)
                                    411 	.area GSINIT  (CODE)
                                    412 	.globl __sdcc_gsinit_startup
                                    413 	.globl __sdcc_program_startup
                                    414 	.globl __start__stack
                                    415 	.globl __mcs51_genXINIT
                                    416 	.globl __mcs51_genXRAMCLEAR
                                    417 	.globl __mcs51_genRAMCLEAR
                                    418 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  419 	ljmp	__sdcc_program_startup
                                    420 ;--------------------------------------------------------
                                    421 ; Home
                                    422 ;--------------------------------------------------------
                                    423 	.area HOME    (CODE)
                                    424 	.area HOME    (CODE)
      000016                        425 __sdcc_program_startup:
      000016 02r02rE8         [24]  426 	ljmp	_main
                                    427 ;	return from main will return to caller
                                    428 ;--------------------------------------------------------
                                    429 ; code
                                    430 ;--------------------------------------------------------
                                    431 	.area CSEG    (CODE)
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'putchar'
                                    434 ;------------------------------------------------------------
                                    435 ;c                         Allocated to registers 
                                    436 ;------------------------------------------------------------
                                    437 ;	life.c:7: int putchar(int c) __naked {
                                    438 ;	-----------------------------------------
                                    439 ;	 function putchar
                                    440 ;	-----------------------------------------
      000000                        441 _putchar:
                                    442 ;	naked function: no prologue.
                                    443 ;	life.c:12: __endasm;
      000000 E5 82            [12]  444 	mov	a, dpl
      000002 02 00 30         [24]  445 	ljmp	0x0030
                                    446 ;	life.c:13: }
                                    447 ;	naked function: no epilogue.
                                    448 ;------------------------------------------------------------
                                    449 ;Allocation info for local variables in function 'getchar'
                                    450 ;------------------------------------------------------------
                                    451 ;	life.c:15: int getchar(void) __naked {
                                    452 ;	-----------------------------------------
                                    453 ;	 function getchar
                                    454 ;	-----------------------------------------
      000005                        455 _getchar:
                                    456 ;	naked function: no prologue.
                                    457 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  458 	lcall	0x0032
      000008 F5 82            [12]  459 	mov	dpl, a
      00000A 75 83 00         [24]  460 	mov	dph, #0
      00000D 22               [24]  461 	ret
                                    462 ;	life.c:22: }
                                    463 ;	naked function: no epilogue.
                                    464 ;------------------------------------------------------------
                                    465 ;Allocation info for local variables in function 'int0'
                                    466 ;------------------------------------------------------------
                                    467 ;	life.c:64: void int0(void) __interrupt 0 __using 1 {
                                    468 ;	-----------------------------------------
                                    469 ;	 function int0
                                    470 ;	-----------------------------------------
      00000E                        471 _int0:
                           00000F   472 	ar7 = 0x0f
                           00000E   473 	ar6 = 0x0e
                           00000D   474 	ar5 = 0x0d
                           00000C   475 	ar4 = 0x0c
                           00000B   476 	ar3 = 0x0b
                           00000A   477 	ar2 = 0x0a
                           000009   478 	ar1 = 0x09
                           000008   479 	ar0 = 0x08
      00000E C0 E0            [24]  480 	push	acc
      000010 C0 82            [24]  481 	push	dpl
      000012 C0 83            [24]  482 	push	dph
                                    483 ;	life.c:65: i0 = 1;
      000014 90r00r00         [24]  484 	mov	dptr,#_i0
      000017 74 01            [12]  485 	mov	a,#0x01
      000019 F0               [24]  486 	movx	@dptr,a
                                    487 ;	life.c:66: }
      00001A D0 83            [24]  488 	pop	dph
      00001C D0 82            [24]  489 	pop	dpl
      00001E D0 E0            [24]  490 	pop	acc
      000020 32               [24]  491 	reti
                                    492 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    493 ;	eliminated unneeded push/pop psw
                                    494 ;	eliminated unneeded push/pop b
                                    495 ;------------------------------------------------------------
                                    496 ;Allocation info for local variables in function 'int1'
                                    497 ;------------------------------------------------------------
                                    498 ;	life.c:69: void int1(void) __interrupt 2 __using 1 {
                                    499 ;	-----------------------------------------
                                    500 ;	 function int1
                                    501 ;	-----------------------------------------
      000021                        502 _int1:
      000021 C0 E0            [24]  503 	push	acc
      000023 C0 82            [24]  504 	push	dpl
      000025 C0 83            [24]  505 	push	dph
                                    506 ;	life.c:70: i1 = 1;
      000027 90r00r01         [24]  507 	mov	dptr,#_i1
      00002A 74 01            [12]  508 	mov	a,#0x01
      00002C F0               [24]  509 	movx	@dptr,a
                                    510 ;	life.c:71: }
      00002D D0 83            [24]  511 	pop	dph
      00002F D0 82            [24]  512 	pop	dpl
      000031 D0 E0            [24]  513 	pop	acc
      000033 32               [24]  514 	reti
                                    515 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    516 ;	eliminated unneeded push/pop psw
                                    517 ;	eliminated unneeded push/pop b
                                    518 ;------------------------------------------------------------
                                    519 ;Allocation info for local variables in function 'show'
                                    520 ;------------------------------------------------------------
                                    521 ;hdr                       Allocated to registers r7 
                                    522 ;__1966080003              Allocated to registers 
                                    523 ;s                         Allocated to registers r5 r6 r7 
                                    524 ;__2621440001              Allocated to registers r6 r7 
                                    525 ;a                         Allocated to registers r4 r5 
                                    526 ;__1966080006              Allocated to registers 
                                    527 ;s                         Allocated to registers r5 r6 r7 
                                    528 ;__3276800009              Allocated to registers 
                                    529 ;s                         Allocated to registers r5 r6 r7 
                                    530 ;__3276800011              Allocated to registers 
                                    531 ;s                         Allocated to registers r5 r6 r7 
                                    532 ;__2621440013              Allocated to registers 
                                    533 ;s                         Allocated to registers r5 r6 r7 
                                    534 ;------------------------------------------------------------
                                    535 ;	life.c:98: void show(char hdr) {
                                    536 ;	-----------------------------------------
                                    537 ;	 function show
                                    538 ;	-----------------------------------------
      000034                        539 _show:
                           000007   540 	ar7 = 0x07
                           000006   541 	ar6 = 0x06
                           000005   542 	ar5 = 0x05
                           000004   543 	ar4 = 0x04
                           000003   544 	ar3 = 0x03
                           000002   545 	ar2 = 0x02
                           000001   546 	ar1 = 0x01
                           000000   547 	ar0 = 0x00
                                    548 ;	life.c:99: if (hdr) {
      000034 E5 82            [12]  549 	mov	a,dpl
      000036 FF               [12]  550 	mov	r7,a
      000037 70 03            [24]  551 	jnz	00241$
      000039 02r01rFC         [24]  552 	ljmp	00102$
      00003C                        553 00241$:
                                    554 ;	life.c:100: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  555 	mov	r5,#___str_0
      00003E 7Es00            [12]  556 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  557 	mov	r7,#0x80
                                    558 ;	life.c:48: return;
      000042                        559 00128$:
                                    560 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  561 	mov	dpl,r5
      000044 8E 83            [24]  562 	mov	dph,r6
      000046 8F F0            [24]  563 	mov	b,r7
      000048 12r00r00         [24]  564 	lcall	__gptrget
      00004B FC               [12]  565 	mov	r4,a
      00004C 60 10            [24]  566 	jz	00109$
      00004E 7B 00            [12]  567 	mov	r3,#0x00
      000050 8C 82            [24]  568 	mov	dpl,r4
      000052 8B 83            [24]  569 	mov	dph,r3
      000054 12r00r00         [24]  570 	lcall	_putchar
      000057 0D               [12]  571 	inc	r5
                                    572 ;	life.c:100: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  573 	cjne	r5,#0x00,00128$
      00005B 0E               [12]  574 	inc	r6
      00005C 80 E4            [24]  575 	sjmp	00128$
      00005E                        576 00109$:
                                    577 ;	life.c:90: for (j = 0; j < 4; j++) {
      00005E 90r0Cr15         [24]  578 	mov	dptr,#_j
      000061 E4               [12]  579 	clr	a
      000062 F0               [24]  580 	movx	@dptr,a
      000063 A3               [24]  581 	inc	dptr
      000064 F0               [24]  582 	movx	@dptr,a
      000065                        583 00130$:
                                    584 ;	life.c:91: print16x(generation[3 - j]);
      000065 90r0Cr15         [24]  585 	mov	dptr,#_j
      000068 E0               [24]  586 	movx	a,@dptr
      000069 FE               [12]  587 	mov	r6,a
      00006A A3               [24]  588 	inc	dptr
      00006B E0               [24]  589 	movx	a,@dptr
      00006C 74 03            [12]  590 	mov	a,#0x03
      00006E C3               [12]  591 	clr	c
      00006F 9E               [12]  592 	subb	a,r6
      000070 FE               [12]  593 	mov	r6,a
      000071 C2 D5            [12]  594 	clr	F0
      000073 75 F0 02         [24]  595 	mov	b,#0x02
      000076 EE               [12]  596 	mov	a,r6
      000077 30 E7 04         [24]  597 	jnb	acc.7,00244$
      00007A B2 D5            [12]  598 	cpl	F0
      00007C F4               [12]  599 	cpl	a
      00007D 04               [12]  600 	inc	a
      00007E                        601 00244$:
      00007E A4               [48]  602 	mul	ab
      00007F 30 D5 0A         [24]  603 	jnb	F0,00245$
      000082 F4               [12]  604 	cpl	a
      000083 24 01            [12]  605 	add	a,#0x01
      000085 C5 F0            [12]  606 	xch	a,b
      000087 F4               [12]  607 	cpl	a
      000088 34 00            [12]  608 	addc	a,#0x00
      00008A C5 F0            [12]  609 	xch	a,b
      00008C                        610 00245$:
      00008C 24r0B            [12]  611 	add	a,#_generation
      00008E F5 82            [12]  612 	mov	dpl,a
      000090 74s0C            [12]  613 	mov	a,#(_generation >> 8)
      000092 35 F0            [12]  614 	addc	a,b
      000094 F5 83            [12]  615 	mov	dph,a
      000096 E0               [24]  616 	movx	a,@dptr
      000097 FE               [12]  617 	mov	r6,a
      000098 A3               [24]  618 	inc	dptr
      000099 E0               [24]  619 	movx	a,@dptr
      00009A FF               [12]  620 	mov	r7,a
      00009B 8E 04            [24]  621 	mov	ar4,r6
                                    622 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      00009D EF               [12]  623 	mov	a,r7
      00009E FD               [12]  624 	mov	r5,a
      00009F C4               [12]  625 	swap	a
      0000A0 54 0F            [12]  626 	anl	a,#0x0f
      0000A2 30 E3 02         [24]  627 	jnb	acc.3,00246$
      0000A5 44 F0            [12]  628 	orl	a,#0xf0
      0000A7                        629 00246$:
      0000A7 FE               [12]  630 	mov	r6,a
      0000A8 33               [12]  631 	rlc	a
      0000A9 95 E0            [12]  632 	subb	a,acc
      0000AB 53 06 0F         [24]  633 	anl	ar6,#0x0f
      0000AE 7F 00            [12]  634 	mov	r7,#0x00
      0000B0 EE               [12]  635 	mov	a,r6
      0000B1 24r00            [12]  636 	add	a,#_digits
      0000B3 F5 82            [12]  637 	mov	dpl,a
      0000B5 EF               [12]  638 	mov	a,r7
      0000B6 34s00            [12]  639 	addc	a,#(_digits >> 8)
      0000B8 F5 83            [12]  640 	mov	dph,a
      0000BA E4               [12]  641 	clr	a
      0000BB 93               [24]  642 	movc	a,@a+dptr
      0000BC FF               [12]  643 	mov	r7,a
      0000BD 7E 00            [12]  644 	mov	r6,#0x00
      0000BF 8F 82            [24]  645 	mov	dpl,r7
      0000C1 8E 83            [24]  646 	mov	dph,r6
      0000C3 12r00r00         [24]  647 	lcall	_putchar
                                    648 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      0000C6 8D 07            [24]  649 	mov	ar7,r5
      0000C8 53 07 0F         [24]  650 	anl	ar7,#0x0f
      0000CB 7E 00            [12]  651 	mov	r6,#0x00
      0000CD EF               [12]  652 	mov	a,r7
      0000CE 24r00            [12]  653 	add	a,#_digits
      0000D0 F5 82            [12]  654 	mov	dpl,a
      0000D2 EE               [12]  655 	mov	a,r6
      0000D3 34s00            [12]  656 	addc	a,#(_digits >> 8)
      0000D5 F5 83            [12]  657 	mov	dph,a
      0000D7 E4               [12]  658 	clr	a
      0000D8 93               [24]  659 	movc	a,@a+dptr
      0000D9 FF               [12]  660 	mov	r7,a
      0000DA 7E 00            [12]  661 	mov	r6,#0x00
      0000DC 8F 82            [24]  662 	mov	dpl,r7
      0000DE 8E 83            [24]  663 	mov	dph,r6
      0000E0 12r00r00         [24]  664 	lcall	_putchar
                                    665 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000E3 8C 06            [24]  666 	mov	ar6,r4
      0000E5 ED               [12]  667 	mov	a,r5
      0000E6 C4               [12]  668 	swap	a
      0000E7 CE               [12]  669 	xch	a,r6
      0000E8 C4               [12]  670 	swap	a
      0000E9 54 0F            [12]  671 	anl	a,#0x0f
      0000EB 6E               [12]  672 	xrl	a,r6
      0000EC CE               [12]  673 	xch	a,r6
      0000ED 54 0F            [12]  674 	anl	a,#0x0f
      0000EF CE               [12]  675 	xch	a,r6
      0000F0 6E               [12]  676 	xrl	a,r6
      0000F1 CE               [12]  677 	xch	a,r6
      0000F2 30 E3 02         [24]  678 	jnb	acc.3,00247$
      0000F5 44 F0            [12]  679 	orl	a,#0xf0
      0000F7                        680 00247$:
      0000F7 53 06 0F         [24]  681 	anl	ar6,#0x0f
      0000FA 7F 00            [12]  682 	mov	r7,#0x00
      0000FC EE               [12]  683 	mov	a,r6
      0000FD 24r00            [12]  684 	add	a,#_digits
      0000FF F5 82            [12]  685 	mov	dpl,a
      000101 EF               [12]  686 	mov	a,r7
      000102 34s00            [12]  687 	addc	a,#(_digits >> 8)
      000104 F5 83            [12]  688 	mov	dph,a
      000106 E4               [12]  689 	clr	a
      000107 93               [24]  690 	movc	a,@a+dptr
      000108 FF               [12]  691 	mov	r7,a
      000109 7E 00            [12]  692 	mov	r6,#0x00
      00010B 8F 82            [24]  693 	mov	dpl,r7
      00010D 8E 83            [24]  694 	mov	dph,r6
      00010F 12r00r00         [24]  695 	lcall	_putchar
                                    696 ;	life.c:40: putchar(digits[a & 0xf]);
      000112 53 04 0F         [24]  697 	anl	ar4,#0x0f
      000115 7D 00            [12]  698 	mov	r5,#0x00
      000117 EC               [12]  699 	mov	a,r4
      000118 24r00            [12]  700 	add	a,#_digits
      00011A F5 82            [12]  701 	mov	dpl,a
      00011C ED               [12]  702 	mov	a,r5
      00011D 34s00            [12]  703 	addc	a,#(_digits >> 8)
      00011F F5 83            [12]  704 	mov	dph,a
      000121 E4               [12]  705 	clr	a
      000122 93               [24]  706 	movc	a,@a+dptr
      000123 FF               [12]  707 	mov	r7,a
      000124 7E 00            [12]  708 	mov	r6,#0x00
      000126 8F 82            [24]  709 	mov	dpl,r7
      000128 8E 83            [24]  710 	mov	dph,r6
      00012A 12r00r00         [24]  711 	lcall	_putchar
                                    712 ;	life.c:92: if (j < 3) putchar(' ');
      00012D 90r0Cr15         [24]  713 	mov	dptr,#_j
      000130 E0               [24]  714 	movx	a,@dptr
      000131 FE               [12]  715 	mov	r6,a
      000132 A3               [24]  716 	inc	dptr
      000133 E0               [24]  717 	movx	a,@dptr
      000134 FF               [12]  718 	mov	r7,a
      000135 C3               [12]  719 	clr	c
      000136 EE               [12]  720 	mov	a,r6
      000137 94 03            [12]  721 	subb	a,#0x03
      000139 EF               [12]  722 	mov	a,r7
      00013A 64 80            [12]  723 	xrl	a,#0x80
      00013C 94 80            [12]  724 	subb	a,#0x80
      00013E 50 06            [24]  725 	jnc	00131$
      000140 90 00 20         [24]  726 	mov	dptr,#0x0020
      000143 12r00r00         [24]  727 	lcall	_putchar
      000146                        728 00131$:
                                    729 ;	life.c:90: for (j = 0; j < 4; j++) {
      000146 90r0Cr15         [24]  730 	mov	dptr,#_j
      000149 E0               [24]  731 	movx	a,@dptr
      00014A 24 01            [12]  732 	add	a,#0x01
      00014C F0               [24]  733 	movx	@dptr,a
      00014D A3               [24]  734 	inc	dptr
      00014E E0               [24]  735 	movx	a,@dptr
      00014F 34 00            [12]  736 	addc	a,#0x00
      000151 F0               [24]  737 	movx	@dptr,a
      000152 90r0Cr15         [24]  738 	mov	dptr,#_j
      000155 E0               [24]  739 	movx	a,@dptr
      000156 FE               [12]  740 	mov	r6,a
      000157 A3               [24]  741 	inc	dptr
      000158 E0               [24]  742 	movx	a,@dptr
      000159 FF               [12]  743 	mov	r7,a
      00015A C3               [12]  744 	clr	c
      00015B EE               [12]  745 	mov	a,r6
      00015C 94 04            [12]  746 	subb	a,#0x04
      00015E EF               [12]  747 	mov	a,r7
      00015F 64 80            [12]  748 	xrl	a,#0x80
      000161 94 80            [12]  749 	subb	a,#0x80
      000163 50 03            [24]  750 	jnc	00249$
      000165 02r00r65         [24]  751 	ljmp	00130$
      000168                        752 00249$:
                                    753 ;	life.c:102: printstr("\r\n");
      000168 7Dr18            [12]  754 	mov	r5,#___str_1
      00016A 7Es00            [12]  755 	mov	r6,#(___str_1 >> 8)
      00016C 7F 80            [12]  756 	mov	r7,#0x80
                                    757 ;	life.c:48: return;
      00016E                        758 00133$:
                                    759 ;	life.c:46: for (; *s; s++) putchar(*s);
      00016E 8D 82            [24]  760 	mov	dpl,r5
      000170 8E 83            [24]  761 	mov	dph,r6
      000172 8F F0            [24]  762 	mov	b,r7
      000174 12r00r00         [24]  763 	lcall	__gptrget
      000177 FC               [12]  764 	mov	r4,a
      000178 60 10            [24]  765 	jz	00116$
      00017A 7B 00            [12]  766 	mov	r3,#0x00
      00017C 8C 82            [24]  767 	mov	dpl,r4
      00017E 8B 83            [24]  768 	mov	dph,r3
      000180 12r00r00         [24]  769 	lcall	_putchar
      000183 0D               [12]  770 	inc	r5
                                    771 ;	life.c:102: printstr("\r\n");
      000184 BD 00 E7         [24]  772 	cjne	r5,#0x00,00133$
      000187 0E               [12]  773 	inc	r6
      000188 80 E4            [24]  774 	sjmp	00133$
      00018A                        775 00116$:
                                    776 ;	life.c:81: for (j = 0; j < 4; j++) {
      00018A 90r0Cr15         [24]  777 	mov	dptr,#_j
      00018D E4               [12]  778 	clr	a
      00018E F0               [24]  779 	movx	@dptr,a
      00018F A3               [24]  780 	inc	dptr
      000190 F0               [24]  781 	movx	@dptr,a
      000191                        782 00135$:
                                    783 ;	life.c:82: generation[j]++;
      000191 90r0Cr15         [24]  784 	mov	dptr,#_j
      000194 E0               [24]  785 	movx	a,@dptr
      000195 FE               [12]  786 	mov	r6,a
      000196 A3               [24]  787 	inc	dptr
      000197 E0               [24]  788 	movx	a,@dptr
      000198 FF               [12]  789 	mov	r7,a
      000199 EE               [12]  790 	mov	a,r6
      00019A 2E               [12]  791 	add	a,r6
      00019B FE               [12]  792 	mov	r6,a
      00019C EF               [12]  793 	mov	a,r7
      00019D 33               [12]  794 	rlc	a
      00019E FF               [12]  795 	mov	r7,a
      00019F EE               [12]  796 	mov	a,r6
      0001A0 24r0B            [12]  797 	add	a,#_generation
      0001A2 FE               [12]  798 	mov	r6,a
      0001A3 EF               [12]  799 	mov	a,r7
      0001A4 34s0C            [12]  800 	addc	a,#(_generation >> 8)
      0001A6 FF               [12]  801 	mov	r7,a
      0001A7 8E 82            [24]  802 	mov	dpl,r6
      0001A9 8F 83            [24]  803 	mov	dph,r7
      0001AB E0               [24]  804 	movx	a,@dptr
      0001AC FC               [12]  805 	mov	r4,a
      0001AD A3               [24]  806 	inc	dptr
      0001AE E0               [24]  807 	movx	a,@dptr
      0001AF FD               [12]  808 	mov	r5,a
      0001B0 0C               [12]  809 	inc	r4
      0001B1 BC 00 01         [24]  810 	cjne	r4,#0x00,00252$
      0001B4 0D               [12]  811 	inc	r5
      0001B5                        812 00252$:
      0001B5 8E 82            [24]  813 	mov	dpl,r6
      0001B7 8F 83            [24]  814 	mov	dph,r7
      0001B9 EC               [12]  815 	mov	a,r4
      0001BA F0               [24]  816 	movx	@dptr,a
      0001BB ED               [12]  817 	mov	a,r5
      0001BC A3               [24]  818 	inc	dptr
      0001BD F0               [24]  819 	movx	@dptr,a
                                    820 ;	life.c:83: if (generation[j]) break;
      0001BE 90r0Cr15         [24]  821 	mov	dptr,#_j
      0001C1 E0               [24]  822 	movx	a,@dptr
      0001C2 FE               [12]  823 	mov	r6,a
      0001C3 A3               [24]  824 	inc	dptr
      0001C4 E0               [24]  825 	movx	a,@dptr
      0001C5 FF               [12]  826 	mov	r7,a
      0001C6 EE               [12]  827 	mov	a,r6
      0001C7 2E               [12]  828 	add	a,r6
      0001C8 FC               [12]  829 	mov	r4,a
      0001C9 EF               [12]  830 	mov	a,r7
      0001CA 33               [12]  831 	rlc	a
      0001CB FD               [12]  832 	mov	r5,a
      0001CC EC               [12]  833 	mov	a,r4
      0001CD 24r0B            [12]  834 	add	a,#_generation
      0001CF F5 82            [12]  835 	mov	dpl,a
      0001D1 ED               [12]  836 	mov	a,r5
      0001D2 34s0C            [12]  837 	addc	a,#(_generation >> 8)
      0001D4 F5 83            [12]  838 	mov	dph,a
      0001D6 E0               [24]  839 	movx	a,@dptr
      0001D7 FC               [12]  840 	mov	r4,a
      0001D8 A3               [24]  841 	inc	dptr
      0001D9 E0               [24]  842 	movx	a,@dptr
      0001DA FD               [12]  843 	mov	r5,a
      0001DB 4C               [12]  844 	orl	a,r4
      0001DC 70 1E            [24]  845 	jnz	00102$
                                    846 ;	life.c:81: for (j = 0; j < 4; j++) {
      0001DE 90r0Cr15         [24]  847 	mov	dptr,#_j
      0001E1 74 01            [12]  848 	mov	a,#0x01
      0001E3 2E               [12]  849 	add	a,r6
      0001E4 F0               [24]  850 	movx	@dptr,a
      0001E5 E4               [12]  851 	clr	a
      0001E6 3F               [12]  852 	addc	a,r7
      0001E7 A3               [24]  853 	inc	dptr
      0001E8 F0               [24]  854 	movx	@dptr,a
      0001E9 90r0Cr15         [24]  855 	mov	dptr,#_j
      0001EC E0               [24]  856 	movx	a,@dptr
      0001ED FE               [12]  857 	mov	r6,a
      0001EE A3               [24]  858 	inc	dptr
      0001EF E0               [24]  859 	movx	a,@dptr
      0001F0 FF               [12]  860 	mov	r7,a
      0001F1 C3               [12]  861 	clr	c
      0001F2 EE               [12]  862 	mov	a,r6
      0001F3 94 04            [12]  863 	subb	a,#0x04
      0001F5 EF               [12]  864 	mov	a,r7
      0001F6 64 80            [12]  865 	xrl	a,#0x80
      0001F8 94 80            [12]  866 	subb	a,#0x80
      0001FA 40 95            [24]  867 	jc	00135$
                                    868 ;	life.c:103: updategen();
      0001FC                        869 00102$:
                                    870 ;	life.c:106: for (x = 0; x < W; x++) {
      0001FC 90r0Cr02         [24]  871 	mov	dptr,#_x
      0001FF E4               [12]  872 	clr	a
      000200 F0               [24]  873 	movx	@dptr,a
      000201 A3               [24]  874 	inc	dptr
      000202 F0               [24]  875 	movx	@dptr,a
      000203                        876 00148$:
                                    877 ;	life.c:107: for (y = 0; y < H; y++)
      000203 90r0Cr04         [24]  878 	mov	dptr,#_y
      000206 E4               [12]  879 	clr	a
      000207 F0               [24]  880 	movx	@dptr,a
      000208 A3               [24]  881 	inc	dptr
      000209 F0               [24]  882 	movx	@dptr,a
      00020A                        883 00143$:
                                    884 ;	life.c:108: if (u[A2D(W, y, x)]) printstr("[]");
      00020A 90r0Cr04         [24]  885 	mov	dptr,#_y
      00020D E0               [24]  886 	movx	a,@dptr
      00020E FE               [12]  887 	mov	r6,a
      00020F A3               [24]  888 	inc	dptr
      000210 E0               [24]  889 	movx	a,@dptr
      000211 C4               [12]  890 	swap	a
      000212 23               [12]  891 	rl	a
      000213 54 E0            [12]  892 	anl	a,#0xe0
      000215 CE               [12]  893 	xch	a,r6
      000216 C4               [12]  894 	swap	a
      000217 23               [12]  895 	rl	a
      000218 CE               [12]  896 	xch	a,r6
      000219 6E               [12]  897 	xrl	a,r6
      00021A CE               [12]  898 	xch	a,r6
      00021B 54 E0            [12]  899 	anl	a,#0xe0
      00021D CE               [12]  900 	xch	a,r6
      00021E 6E               [12]  901 	xrl	a,r6
      00021F FF               [12]  902 	mov	r7,a
      000220 90r0Cr02         [24]  903 	mov	dptr,#_x
      000223 E0               [24]  904 	movx	a,@dptr
      000224 FC               [12]  905 	mov	r4,a
      000225 A3               [24]  906 	inc	dptr
      000226 E0               [24]  907 	movx	a,@dptr
      000227 FD               [12]  908 	mov	r5,a
      000228 EC               [12]  909 	mov	a,r4
      000229 2E               [12]  910 	add	a,r6
      00022A FE               [12]  911 	mov	r6,a
      00022B ED               [12]  912 	mov	a,r5
      00022C 3F               [12]  913 	addc	a,r7
      00022D FF               [12]  914 	mov	r7,a
      00022E EE               [12]  915 	mov	a,r6
      00022F 24r02            [12]  916 	add	a,#_u
      000231 FE               [12]  917 	mov	r6,a
      000232 EF               [12]  918 	mov	a,r7
      000233 34s04            [12]  919 	addc	a,#(_u >> 8)
      000235 FF               [12]  920 	mov	r7,a
      000236 8E 82            [24]  921 	mov	dpl,r6
      000238 8F 83            [24]  922 	mov	dph,r7
      00023A E0               [24]  923 	movx	a,@dptr
      00023B 60 22            [24]  924 	jz	00104$
      00023D 7Dr1B            [12]  925 	mov	r5,#___str_2
      00023F 7Es00            [12]  926 	mov	r6,#(___str_2 >> 8)
      000241 7F 80            [12]  927 	mov	r7,#0x80
                                    928 ;	life.c:48: return;
      000243                        929 00138$:
                                    930 ;	life.c:46: for (; *s; s++) putchar(*s);
      000243 8D 82            [24]  931 	mov	dpl,r5
      000245 8E 83            [24]  932 	mov	dph,r6
      000247 8F F0            [24]  933 	mov	b,r7
      000249 12r00r00         [24]  934 	lcall	__gptrget
      00024C FC               [12]  935 	mov	r4,a
      00024D 60 32            [24]  936 	jz	00144$
      00024F 7B 00            [12]  937 	mov	r3,#0x00
      000251 8C 82            [24]  938 	mov	dpl,r4
      000253 8B 83            [24]  939 	mov	dph,r3
      000255 12r00r00         [24]  940 	lcall	_putchar
      000258 0D               [12]  941 	inc	r5
                                    942 ;	life.c:108: if (u[A2D(W, y, x)]) printstr("[]");
      000259 BD 00 E7         [24]  943 	cjne	r5,#0x00,00138$
      00025C 0E               [12]  944 	inc	r6
      00025D 80 E4            [24]  945 	sjmp	00138$
      00025F                        946 00104$:
                                    947 ;	life.c:109: else printstr("##");
      00025F 7Dr1E            [12]  948 	mov	r5,#___str_3
      000261 7Es00            [12]  949 	mov	r6,#(___str_3 >> 8)
      000263 7F 80            [12]  950 	mov	r7,#0x80
                                    951 ;	life.c:48: return;
      000265                        952 00141$:
                                    953 ;	life.c:46: for (; *s; s++) putchar(*s);
      000265 8D 82            [24]  954 	mov	dpl,r5
      000267 8E 83            [24]  955 	mov	dph,r6
      000269 8F F0            [24]  956 	mov	b,r7
      00026B 12r00r00         [24]  957 	lcall	__gptrget
      00026E FC               [12]  958 	mov	r4,a
      00026F 60 10            [24]  959 	jz	00144$
      000271 7B 00            [12]  960 	mov	r3,#0x00
      000273 8C 82            [24]  961 	mov	dpl,r4
      000275 8B 83            [24]  962 	mov	dph,r3
      000277 12r00r00         [24]  963 	lcall	_putchar
      00027A 0D               [12]  964 	inc	r5
                                    965 ;	life.c:109: else printstr("##");
      00027B BD 00 E7         [24]  966 	cjne	r5,#0x00,00141$
      00027E 0E               [12]  967 	inc	r6
      00027F 80 E4            [24]  968 	sjmp	00141$
      000281                        969 00144$:
                                    970 ;	life.c:107: for (y = 0; y < H; y++)
      000281 90r0Cr04         [24]  971 	mov	dptr,#_y
      000284 E0               [24]  972 	movx	a,@dptr
      000285 24 01            [12]  973 	add	a,#0x01
      000287 F0               [24]  974 	movx	@dptr,a
      000288 A3               [24]  975 	inc	dptr
      000289 E0               [24]  976 	movx	a,@dptr
      00028A 34 00            [12]  977 	addc	a,#0x00
      00028C F0               [24]  978 	movx	@dptr,a
      00028D 90r0Cr04         [24]  979 	mov	dptr,#_y
      000290 E0               [24]  980 	movx	a,@dptr
      000291 FE               [12]  981 	mov	r6,a
      000292 A3               [24]  982 	inc	dptr
      000293 E0               [24]  983 	movx	a,@dptr
      000294 FF               [12]  984 	mov	r7,a
      000295 C3               [12]  985 	clr	c
      000296 EE               [12]  986 	mov	a,r6
      000297 94 20            [12]  987 	subb	a,#0x20
      000299 EF               [12]  988 	mov	a,r7
      00029A 64 80            [12]  989 	xrl	a,#0x80
      00029C 94 80            [12]  990 	subb	a,#0x80
      00029E 50 03            [24]  991 	jnc	00260$
      0002A0 02r02r0A         [24]  992 	ljmp	00143$
      0002A3                        993 00260$:
                                    994 ;	life.c:110: printstr("\r\n");
      0002A3 7Dr18            [12]  995 	mov	r5,#___str_1
      0002A5 7Es00            [12]  996 	mov	r6,#(___str_1 >> 8)
      0002A7 7F 80            [12]  997 	mov	r7,#0x80
                                    998 ;	life.c:48: return;
      0002A9                        999 00146$:
                                   1000 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002A9 8D 82            [24] 1001 	mov	dpl,r5
      0002AB 8E 83            [24] 1002 	mov	dph,r6
      0002AD 8F F0            [24] 1003 	mov	b,r7
      0002AF 12r00r00         [24] 1004 	lcall	__gptrget
      0002B2 FC               [12] 1005 	mov	r4,a
      0002B3 60 10            [24] 1006 	jz	00126$
      0002B5 7B 00            [12] 1007 	mov	r3,#0x00
      0002B7 8C 82            [24] 1008 	mov	dpl,r4
      0002B9 8B 83            [24] 1009 	mov	dph,r3
      0002BB 12r00r00         [24] 1010 	lcall	_putchar
      0002BE 0D               [12] 1011 	inc	r5
                                   1012 ;	life.c:110: printstr("\r\n");
      0002BF BD 00 E7         [24] 1013 	cjne	r5,#0x00,00146$
      0002C2 0E               [12] 1014 	inc	r6
      0002C3 80 E4            [24] 1015 	sjmp	00146$
      0002C5                       1016 00126$:
                                   1017 ;	life.c:106: for (x = 0; x < W; x++) {
      0002C5 90r0Cr02         [24] 1018 	mov	dptr,#_x
      0002C8 E0               [24] 1019 	movx	a,@dptr
      0002C9 24 01            [12] 1020 	add	a,#0x01
      0002CB F0               [24] 1021 	movx	@dptr,a
      0002CC A3               [24] 1022 	inc	dptr
      0002CD E0               [24] 1023 	movx	a,@dptr
      0002CE 34 00            [12] 1024 	addc	a,#0x00
      0002D0 F0               [24] 1025 	movx	@dptr,a
      0002D1 90r0Cr02         [24] 1026 	mov	dptr,#_x
      0002D4 E0               [24] 1027 	movx	a,@dptr
      0002D5 FE               [12] 1028 	mov	r6,a
      0002D6 A3               [24] 1029 	inc	dptr
      0002D7 E0               [24] 1030 	movx	a,@dptr
      0002D8 FF               [12] 1031 	mov	r7,a
      0002D9 C3               [12] 1032 	clr	c
      0002DA EE               [12] 1033 	mov	a,r6
      0002DB 94 20            [12] 1034 	subb	a,#0x20
      0002DD EF               [12] 1035 	mov	a,r7
      0002DE 64 80            [12] 1036 	xrl	a,#0x80
      0002E0 94 80            [12] 1037 	subb	a,#0x80
      0002E2 50 03            [24] 1038 	jnc	00263$
      0002E4 02r02r03         [24] 1039 	ljmp	00148$
      0002E7                       1040 00263$:
                                   1041 ;	life.c:113: return;
                                   1042 ;	life.c:114: }
      0002E7 22               [24] 1043 	ret
                                   1044 ;------------------------------------------------------------
                                   1045 ;Allocation info for local variables in function 'main'
                                   1046 ;------------------------------------------------------------
                                   1047 ;__2621440020              Allocated to registers 
                                   1048 ;s                         Allocated to registers r5 r6 r7 
                                   1049 ;__2621440022              Allocated to registers 
                                   1050 ;s                         Allocated to registers r5 r6 r7 
                                   1051 ;__1310720015              Allocated to registers r6 r7 
                                   1052 ;a                         Allocated to registers r4 r5 
                                   1053 ;__1310720017              Allocated to registers 
                                   1054 ;s                         Allocated to registers r5 r6 r7 
                                   1055 ;__2621440025              Allocated to registers 
                                   1056 ;s                         Allocated to registers r5 r6 r7 
                                   1057 ;__4587520029              Allocated to registers 
                                   1058 ;s                         Allocated to registers r5 r6 r7 
                                   1059 ;__3276800031              Allocated to registers 
                                   1060 ;s                         Allocated to registers r5 r6 r7 
                                   1061 ;__1310720033              Allocated to registers 
                                   1062 ;s                         Allocated to registers r5 r6 r7 
                                   1063 ;sloc0                     Allocated to stack - _bp +1
                                   1064 ;------------------------------------------------------------
                                   1065 ;	life.c:180: void main(void) {
                                   1066 ;	-----------------------------------------
                                   1067 ;	 function main
                                   1068 ;	-----------------------------------------
      0002E8                       1069 _main:
      0002E8 C0*00            [24] 1070 	push	_bp
      0002EA 85 81*00         [24] 1071 	mov	_bp,sp
      0002ED 05 81            [12] 1072 	inc	sp
                                   1073 ;	life.c:181: IT0 = 1;
                                   1074 ;	assignBit
      0002EF D2 88            [12] 1075 	setb	_IT0
                                   1076 ;	life.c:182: IT1 = 1;
                                   1077 ;	assignBit
      0002F1 D2 8A            [12] 1078 	setb	_IT1
                                   1079 ;	life.c:183: EX0 = 1;
                                   1080 ;	assignBit
      0002F3 D2 A8            [12] 1081 	setb	_EX0
                                   1082 ;	life.c:184: EX1 = 1;
                                   1083 ;	assignBit
      0002F5 D2 AA            [12] 1084 	setb	_EX1
                                   1085 ;	life.c:185: EA = 1;
                                   1086 ;	assignBit
      0002F7 D2 AF            [12] 1087 	setb	_EA
                                   1088 ;	life.c:187: for (i0 = 0; !i0; ) {
      0002F9 90r00r00         [24] 1089 	mov	dptr,#_i0
      0002FC E4               [12] 1090 	clr	a
      0002FD F0               [24] 1091 	movx	@dptr,a
      0002FE 90r00r01         [24] 1092 	mov	dptr,#_i1
      000301 F0               [24] 1093 	movx	@dptr,a
      000302                       1094 00202$:
                                   1095 ;	life.c:117: memset(u, 0, sizeof (u));
      000302 E4               [12] 1096 	clr	a
      000303 C0 E0            [24] 1097 	push	acc
      000305 74 04            [12] 1098 	mov	a,#0x04
      000307 C0 E0            [24] 1099 	push	acc
      000309 E4               [12] 1100 	clr	a
      00030A C0 E0            [24] 1101 	push	acc
      00030C 90r04r02         [24] 1102 	mov	dptr,#_u
      00030F 75 F0 00         [24] 1103 	mov	b,#0x00
      000312 12r00r00         [24] 1104 	lcall	_memset
      000315 15 81            [12] 1105 	dec	sp
      000317 15 81            [12] 1106 	dec	sp
      000319 15 81            [12] 1107 	dec	sp
                                   1108 ;	life.c:118: memset(pu, 0, sizeof (pu));
      00031B E4               [12] 1109 	clr	a
      00031C C0 E0            [24] 1110 	push	acc
      00031E 74 04            [12] 1111 	mov	a,#0x04
      000320 C0 E0            [24] 1112 	push	acc
      000322 E4               [12] 1113 	clr	a
      000323 C0 E0            [24] 1114 	push	acc
      000325 90r00r02         [24] 1115 	mov	dptr,#_pu
      000328 75 F0 00         [24] 1116 	mov	b,#0x00
      00032B 12r00r00         [24] 1117 	lcall	_memset
      00032E 15 81            [12] 1118 	dec	sp
      000330 15 81            [12] 1119 	dec	sp
      000332 15 81            [12] 1120 	dec	sp
                                   1121 ;	life.c:189: printstr("\033[2J\033[mINIT\r\n");
      000334 7Dr25            [12] 1122 	mov	r5,#___str_5
      000336 7Es00            [12] 1123 	mov	r6,#(___str_5 >> 8)
      000338 7F 80            [12] 1124 	mov	r7,#0x80
                                   1125 ;	life.c:48: return;
      00033A                       1126 00161$:
                                   1127 ;	life.c:46: for (; *s; s++) putchar(*s);
      00033A 8D 82            [24] 1128 	mov	dpl,r5
      00033C 8E 83            [24] 1129 	mov	dph,r6
      00033E 8F F0            [24] 1130 	mov	b,r7
      000340 12r00r00         [24] 1131 	lcall	__gptrget
      000343 FC               [12] 1132 	mov	r4,a
      000344 60 10            [24] 1133 	jz	00110$
      000346 7B 00            [12] 1134 	mov	r3,#0x00
      000348 8C 82            [24] 1135 	mov	dpl,r4
      00034A 8B 83            [24] 1136 	mov	dph,r3
      00034C 12r00r00         [24] 1137 	lcall	_putchar
      00034F 0D               [12] 1138 	inc	r5
                                   1139 ;	life.c:189: printstr("\033[2J\033[mINIT\r\n");
      000350 BD 00 E7         [24] 1140 	cjne	r5,#0x00,00161$
      000353 0E               [12] 1141 	inc	r6
      000354 80 E4            [24] 1142 	sjmp	00161$
      000356                       1143 00110$:
                                   1144 ;	life.c:190: (void)getchar();
      000356 12r00r05         [24] 1145 	lcall	_getchar
                                   1146 ;	life.c:192: printstr("LOAD\r\n");
      000359 7Dr33            [12] 1147 	mov	r5,#___str_6
      00035B 7Es00            [12] 1148 	mov	r6,#(___str_6 >> 8)
      00035D 7F 80            [12] 1149 	mov	r7,#0x80
                                   1150 ;	life.c:48: return;
      00035F                       1151 00164$:
                                   1152 ;	life.c:46: for (; *s; s++) putchar(*s);
      00035F 8D 82            [24] 1153 	mov	dpl,r5
      000361 8E 83            [24] 1154 	mov	dph,r6
      000363 8F F0            [24] 1155 	mov	b,r7
      000365 12r00r00         [24] 1156 	lcall	__gptrget
      000368 FC               [12] 1157 	mov	r4,a
      000369 60 10            [24] 1158 	jz	00112$
      00036B 7B 00            [12] 1159 	mov	r3,#0x00
      00036D 8C 82            [24] 1160 	mov	dpl,r4
      00036F 8B 83            [24] 1161 	mov	dph,r3
      000371 12r00r00         [24] 1162 	lcall	_putchar
      000374 0D               [12] 1163 	inc	r5
                                   1164 ;	life.c:192: printstr("LOAD\r\n");
      000375 BD 00 E7         [24] 1165 	cjne	r5,#0x00,00164$
      000378 0E               [12] 1166 	inc	r6
      000379 80 E4            [24] 1167 	sjmp	00164$
      00037B                       1168 00112$:
                                   1169 ;	life.c:193: (void)getchar();
      00037B 12r00r05         [24] 1170 	lcall	_getchar
                                   1171 ;	life.c:124: j = 0;
      00037E 90r0Cr15         [24] 1172 	mov	dptr,#_j
      000381 E4               [12] 1173 	clr	a
      000382 F0               [24] 1174 	movx	@dptr,a
      000383 A3               [24] 1175 	inc	dptr
      000384 F0               [24] 1176 	movx	@dptr,a
                                   1177 ;	life.c:126: putchar('<');
      000385 90 00 3C         [24] 1178 	mov	dptr,#0x003c
      000388 12r00r00         [24] 1179 	lcall	_putchar
                                   1180 ;	life.c:128: for (y = 0; y < H; y++)
      00038B 90r0Cr04         [24] 1181 	mov	dptr,#_y
      00038E E4               [12] 1182 	clr	a
      00038F F0               [24] 1183 	movx	@dptr,a
      000390 A3               [24] 1184 	inc	dptr
      000391 F0               [24] 1185 	movx	@dptr,a
      000392                       1186 00168$:
                                   1187 ;	life.c:129: for (x = 0; x < W; x++) {
      000392 90r0Cr02         [24] 1188 	mov	dptr,#_x
      000395 E4               [12] 1189 	clr	a
      000396 F0               [24] 1190 	movx	@dptr,a
      000397 A3               [24] 1191 	inc	dptr
      000398 F0               [24] 1192 	movx	@dptr,a
      000399                       1193 00166$:
                                   1194 ;	life.c:130: c = getchar();
      000399 12r00r05         [24] 1195 	lcall	_getchar
      00039C AE 82            [24] 1196 	mov	r6,dpl
      00039E AF 83            [24] 1197 	mov	r7,dph
      0003A0 90r0Cr17         [24] 1198 	mov	dptr,#_c
      0003A3 EE               [12] 1199 	mov	a,r6
      0003A4 F0               [24] 1200 	movx	@dptr,a
      0003A5 EF               [12] 1201 	mov	a,r7
      0003A6 A3               [24] 1202 	inc	dptr
      0003A7 F0               [24] 1203 	movx	@dptr,a
                                   1204 ;	life.c:131: if (c == (int)'0') {
      0003A8 BE 30 41         [24] 1205 	cjne	r6,#0x30,00119$
      0003AB BF 00 3E         [24] 1206 	cjne	r7,#0x00,00119$
                                   1207 ;	life.c:132: u[A2D(W, y, x)] = 0;
      0003AE 90r0Cr04         [24] 1208 	mov	dptr,#_y
      0003B1 E0               [24] 1209 	movx	a,@dptr
      0003B2 FC               [12] 1210 	mov	r4,a
      0003B3 A3               [24] 1211 	inc	dptr
      0003B4 E0               [24] 1212 	movx	a,@dptr
      0003B5 C4               [12] 1213 	swap	a
      0003B6 23               [12] 1214 	rl	a
      0003B7 54 E0            [12] 1215 	anl	a,#0xe0
      0003B9 CC               [12] 1216 	xch	a,r4
      0003BA C4               [12] 1217 	swap	a
      0003BB 23               [12] 1218 	rl	a
      0003BC CC               [12] 1219 	xch	a,r4
      0003BD 6C               [12] 1220 	xrl	a,r4
      0003BE CC               [12] 1221 	xch	a,r4
      0003BF 54 E0            [12] 1222 	anl	a,#0xe0
      0003C1 CC               [12] 1223 	xch	a,r4
      0003C2 6C               [12] 1224 	xrl	a,r4
      0003C3 FD               [12] 1225 	mov	r5,a
      0003C4 90r0Cr02         [24] 1226 	mov	dptr,#_x
      0003C7 E0               [24] 1227 	movx	a,@dptr
      0003C8 FA               [12] 1228 	mov	r2,a
      0003C9 A3               [24] 1229 	inc	dptr
      0003CA E0               [24] 1230 	movx	a,@dptr
      0003CB FB               [12] 1231 	mov	r3,a
      0003CC EA               [12] 1232 	mov	a,r2
      0003CD 2C               [12] 1233 	add	a,r4
      0003CE FC               [12] 1234 	mov	r4,a
      0003CF EB               [12] 1235 	mov	a,r3
      0003D0 3D               [12] 1236 	addc	a,r5
      0003D1 FD               [12] 1237 	mov	r5,a
      0003D2 EC               [12] 1238 	mov	a,r4
      0003D3 24r02            [12] 1239 	add	a,#_u
      0003D5 F5 82            [12] 1240 	mov	dpl,a
      0003D7 ED               [12] 1241 	mov	a,r5
      0003D8 34s04            [12] 1242 	addc	a,#(_u >> 8)
      0003DA F5 83            [12] 1243 	mov	dph,a
      0003DC E4               [12] 1244 	clr	a
      0003DD F0               [24] 1245 	movx	@dptr,a
                                   1246 ;	life.c:133: j++;
      0003DE 90r0Cr15         [24] 1247 	mov	dptr,#_j
      0003E1 E0               [24] 1248 	movx	a,@dptr
      0003E2 24 01            [12] 1249 	add	a,#0x01
      0003E4 F0               [24] 1250 	movx	@dptr,a
      0003E5 A3               [24] 1251 	inc	dptr
      0003E6 E0               [24] 1252 	movx	a,@dptr
      0003E7 34 00            [12] 1253 	addc	a,#0x00
      0003E9 F0               [24] 1254 	movx	@dptr,a
      0003EA 80 4D            [24] 1255 	sjmp	00167$
      0003EC                       1256 00119$:
                                   1257 ;	life.c:134: } else if (c == (int)'1') {
      0003EC BE 31 42         [24] 1258 	cjne	r6,#0x31,00117$
      0003EF BF 00 3F         [24] 1259 	cjne	r7,#0x00,00117$
                                   1260 ;	life.c:135: u[A2D(W, y, x)] = 1;
      0003F2 90r0Cr04         [24] 1261 	mov	dptr,#_y
      0003F5 E0               [24] 1262 	movx	a,@dptr
      0003F6 FC               [12] 1263 	mov	r4,a
      0003F7 A3               [24] 1264 	inc	dptr
      0003F8 E0               [24] 1265 	movx	a,@dptr
      0003F9 C4               [12] 1266 	swap	a
      0003FA 23               [12] 1267 	rl	a
      0003FB 54 E0            [12] 1268 	anl	a,#0xe0
      0003FD CC               [12] 1269 	xch	a,r4
      0003FE C4               [12] 1270 	swap	a
      0003FF 23               [12] 1271 	rl	a
      000400 CC               [12] 1272 	xch	a,r4
      000401 6C               [12] 1273 	xrl	a,r4
      000402 CC               [12] 1274 	xch	a,r4
      000403 54 E0            [12] 1275 	anl	a,#0xe0
      000405 CC               [12] 1276 	xch	a,r4
      000406 6C               [12] 1277 	xrl	a,r4
      000407 FD               [12] 1278 	mov	r5,a
      000408 90r0Cr02         [24] 1279 	mov	dptr,#_x
      00040B E0               [24] 1280 	movx	a,@dptr
      00040C FA               [12] 1281 	mov	r2,a
      00040D A3               [24] 1282 	inc	dptr
      00040E E0               [24] 1283 	movx	a,@dptr
      00040F FB               [12] 1284 	mov	r3,a
      000410 EA               [12] 1285 	mov	a,r2
      000411 2C               [12] 1286 	add	a,r4
      000412 FC               [12] 1287 	mov	r4,a
      000413 EB               [12] 1288 	mov	a,r3
      000414 3D               [12] 1289 	addc	a,r5
      000415 FD               [12] 1290 	mov	r5,a
      000416 EC               [12] 1291 	mov	a,r4
      000417 24r02            [12] 1292 	add	a,#_u
      000419 F5 82            [12] 1293 	mov	dpl,a
      00041B ED               [12] 1294 	mov	a,r5
      00041C 34s04            [12] 1295 	addc	a,#(_u >> 8)
      00041E F5 83            [12] 1296 	mov	dph,a
      000420 74 01            [12] 1297 	mov	a,#0x01
      000422 F0               [24] 1298 	movx	@dptr,a
                                   1299 ;	life.c:136: j++;
      000423 90r0Cr15         [24] 1300 	mov	dptr,#_j
      000426 E0               [24] 1301 	movx	a,@dptr
      000427 24 01            [12] 1302 	add	a,#0x01
      000429 F0               [24] 1303 	movx	@dptr,a
      00042A A3               [24] 1304 	inc	dptr
      00042B E0               [24] 1305 	movx	a,@dptr
      00042C 34 00            [12] 1306 	addc	a,#0x00
      00042E F0               [24] 1307 	movx	@dptr,a
      00042F 80 08            [24] 1308 	sjmp	00167$
      000431                       1309 00117$:
                                   1310 ;	life.c:137: } else if (c == (int)'#') goto out;
      000431 BE 23 05         [24] 1311 	cjne	r6,#0x23,00415$
      000434 BF 00 02         [24] 1312 	cjne	r7,#0x00,00415$
      000437 80 44            [24] 1313 	sjmp	00130$
      000439                       1314 00415$:
      000439                       1315 00167$:
                                   1316 ;	life.c:129: for (x = 0; x < W; x++) {
      000439 90r0Cr02         [24] 1317 	mov	dptr,#_x
      00043C E0               [24] 1318 	movx	a,@dptr
      00043D 24 01            [12] 1319 	add	a,#0x01
      00043F F0               [24] 1320 	movx	@dptr,a
      000440 A3               [24] 1321 	inc	dptr
      000441 E0               [24] 1322 	movx	a,@dptr
      000442 34 00            [12] 1323 	addc	a,#0x00
      000444 F0               [24] 1324 	movx	@dptr,a
      000445 90r0Cr02         [24] 1325 	mov	dptr,#_x
      000448 E0               [24] 1326 	movx	a,@dptr
      000449 FE               [12] 1327 	mov	r6,a
      00044A A3               [24] 1328 	inc	dptr
      00044B E0               [24] 1329 	movx	a,@dptr
      00044C FF               [12] 1330 	mov	r7,a
      00044D C3               [12] 1331 	clr	c
      00044E EE               [12] 1332 	mov	a,r6
      00044F 94 20            [12] 1333 	subb	a,#0x20
      000451 EF               [12] 1334 	mov	a,r7
      000452 64 80            [12] 1335 	xrl	a,#0x80
      000454 94 80            [12] 1336 	subb	a,#0x80
      000456 50 03            [24] 1337 	jnc	00416$
      000458 02r03r99         [24] 1338 	ljmp	00166$
      00045B                       1339 00416$:
                                   1340 ;	life.c:128: for (y = 0; y < H; y++)
      00045B 90r0Cr04         [24] 1341 	mov	dptr,#_y
      00045E E0               [24] 1342 	movx	a,@dptr
      00045F 24 01            [12] 1343 	add	a,#0x01
      000461 F0               [24] 1344 	movx	@dptr,a
      000462 A3               [24] 1345 	inc	dptr
      000463 E0               [24] 1346 	movx	a,@dptr
      000464 34 00            [12] 1347 	addc	a,#0x00
      000466 F0               [24] 1348 	movx	@dptr,a
      000467 90r0Cr04         [24] 1349 	mov	dptr,#_y
      00046A E0               [24] 1350 	movx	a,@dptr
      00046B FE               [12] 1351 	mov	r6,a
      00046C A3               [24] 1352 	inc	dptr
      00046D E0               [24] 1353 	movx	a,@dptr
      00046E FF               [12] 1354 	mov	r7,a
      00046F C3               [12] 1355 	clr	c
      000470 EE               [12] 1356 	mov	a,r6
      000471 94 20            [12] 1357 	subb	a,#0x20
      000473 EF               [12] 1358 	mov	a,r7
      000474 64 80            [12] 1359 	xrl	a,#0x80
      000476 94 80            [12] 1360 	subb	a,#0x80
      000478 50 03            [24] 1361 	jnc	00417$
      00047A 02r03r92         [24] 1362 	ljmp	00168$
      00047D                       1363 00417$:
                                   1364 ;	life.c:140: out:
      00047D                       1365 00130$:
                                   1366 ;	life.c:141: if (c != (int)'#')
      00047D 90r0Cr17         [24] 1367 	mov	dptr,#_c
      000480 E0               [24] 1368 	movx	a,@dptr
      000481 FE               [12] 1369 	mov	r6,a
      000482 A3               [24] 1370 	inc	dptr
      000483 E0               [24] 1371 	movx	a,@dptr
      000484 FF               [12] 1372 	mov	r7,a
      000485 BE 23 05         [24] 1373 	cjne	r6,#0x23,00418$
      000488 BF 00 02         [24] 1374 	cjne	r7,#0x00,00418$
      00048B 80 15            [24] 1375 	sjmp	00129$
      00048D                       1376 00418$:
                                   1377 ;	life.c:142: while (1) {
      00048D                       1378 00126$:
                                   1379 ;	life.c:143: c = getchar();
      00048D 12r00r05         [24] 1380 	lcall	_getchar
      000490 AE 82            [24] 1381 	mov	r6,dpl
      000492 AF 83            [24] 1382 	mov	r7,dph
      000494 90r0Cr17         [24] 1383 	mov	dptr,#_c
      000497 EE               [12] 1384 	mov	a,r6
      000498 F0               [24] 1385 	movx	@dptr,a
      000499 EF               [12] 1386 	mov	a,r7
      00049A A3               [24] 1387 	inc	dptr
      00049B F0               [24] 1388 	movx	@dptr,a
                                   1389 ;	life.c:144: if (c == (int)'#') break;
      00049C BE 23 EE         [24] 1390 	cjne	r6,#0x23,00126$
      00049F BF 00 EB         [24] 1391 	cjne	r7,#0x00,00126$
      0004A2                       1392 00129$:
                                   1393 ;	life.c:146: print16x(j);
      0004A2 90r0Cr15         [24] 1394 	mov	dptr,#_j
      0004A5 E0               [24] 1395 	movx	a,@dptr
      0004A6 FE               [12] 1396 	mov	r6,a
      0004A7 A3               [24] 1397 	inc	dptr
      0004A8 E0               [24] 1398 	movx	a,@dptr
      0004A9 FF               [12] 1399 	mov	r7,a
      0004AA 8E 04            [24] 1400 	mov	ar4,r6
                                   1401 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0004AC EF               [12] 1402 	mov	a,r7
      0004AD FD               [12] 1403 	mov	r5,a
      0004AE C4               [12] 1404 	swap	a
      0004AF 54 0F            [12] 1405 	anl	a,#0x0f
      0004B1 30 E3 02         [24] 1406 	jnb	acc.3,00421$
      0004B4 44 F0            [12] 1407 	orl	a,#0xf0
      0004B6                       1408 00421$:
      0004B6 FE               [12] 1409 	mov	r6,a
      0004B7 33               [12] 1410 	rlc	a
      0004B8 95 E0            [12] 1411 	subb	a,acc
      0004BA 53 06 0F         [24] 1412 	anl	ar6,#0x0f
      0004BD 7F 00            [12] 1413 	mov	r7,#0x00
      0004BF EE               [12] 1414 	mov	a,r6
      0004C0 24r00            [12] 1415 	add	a,#_digits
      0004C2 F5 82            [12] 1416 	mov	dpl,a
      0004C4 EF               [12] 1417 	mov	a,r7
      0004C5 34s00            [12] 1418 	addc	a,#(_digits >> 8)
      0004C7 F5 83            [12] 1419 	mov	dph,a
      0004C9 E4               [12] 1420 	clr	a
      0004CA 93               [24] 1421 	movc	a,@a+dptr
      0004CB FF               [12] 1422 	mov	r7,a
      0004CC 7E 00            [12] 1423 	mov	r6,#0x00
      0004CE 8F 82            [24] 1424 	mov	dpl,r7
      0004D0 8E 83            [24] 1425 	mov	dph,r6
      0004D2 12r00r00         [24] 1426 	lcall	_putchar
                                   1427 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      0004D5 8D 07            [24] 1428 	mov	ar7,r5
      0004D7 53 07 0F         [24] 1429 	anl	ar7,#0x0f
      0004DA 7E 00            [12] 1430 	mov	r6,#0x00
      0004DC EF               [12] 1431 	mov	a,r7
      0004DD 24r00            [12] 1432 	add	a,#_digits
      0004DF F5 82            [12] 1433 	mov	dpl,a
      0004E1 EE               [12] 1434 	mov	a,r6
      0004E2 34s00            [12] 1435 	addc	a,#(_digits >> 8)
      0004E4 F5 83            [12] 1436 	mov	dph,a
      0004E6 E4               [12] 1437 	clr	a
      0004E7 93               [24] 1438 	movc	a,@a+dptr
      0004E8 FF               [12] 1439 	mov	r7,a
      0004E9 7E 00            [12] 1440 	mov	r6,#0x00
      0004EB 8F 82            [24] 1441 	mov	dpl,r7
      0004ED 8E 83            [24] 1442 	mov	dph,r6
      0004EF 12r00r00         [24] 1443 	lcall	_putchar
                                   1444 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0004F2 8C 06            [24] 1445 	mov	ar6,r4
      0004F4 ED               [12] 1446 	mov	a,r5
      0004F5 C4               [12] 1447 	swap	a
      0004F6 CE               [12] 1448 	xch	a,r6
      0004F7 C4               [12] 1449 	swap	a
      0004F8 54 0F            [12] 1450 	anl	a,#0x0f
      0004FA 6E               [12] 1451 	xrl	a,r6
      0004FB CE               [12] 1452 	xch	a,r6
      0004FC 54 0F            [12] 1453 	anl	a,#0x0f
      0004FE CE               [12] 1454 	xch	a,r6
      0004FF 6E               [12] 1455 	xrl	a,r6
      000500 CE               [12] 1456 	xch	a,r6
      000501 30 E3 02         [24] 1457 	jnb	acc.3,00422$
      000504 44 F0            [12] 1458 	orl	a,#0xf0
      000506                       1459 00422$:
      000506 53 06 0F         [24] 1460 	anl	ar6,#0x0f
      000509 7F 00            [12] 1461 	mov	r7,#0x00
      00050B EE               [12] 1462 	mov	a,r6
      00050C 24r00            [12] 1463 	add	a,#_digits
      00050E F5 82            [12] 1464 	mov	dpl,a
      000510 EF               [12] 1465 	mov	a,r7
      000511 34s00            [12] 1466 	addc	a,#(_digits >> 8)
      000513 F5 83            [12] 1467 	mov	dph,a
      000515 E4               [12] 1468 	clr	a
      000516 93               [24] 1469 	movc	a,@a+dptr
      000517 FF               [12] 1470 	mov	r7,a
      000518 7E 00            [12] 1471 	mov	r6,#0x00
      00051A 8F 82            [24] 1472 	mov	dpl,r7
      00051C 8E 83            [24] 1473 	mov	dph,r6
      00051E 12r00r00         [24] 1474 	lcall	_putchar
                                   1475 ;	life.c:40: putchar(digits[a & 0xf]);
      000521 53 04 0F         [24] 1476 	anl	ar4,#0x0f
      000524 7D 00            [12] 1477 	mov	r5,#0x00
      000526 EC               [12] 1478 	mov	a,r4
      000527 24r00            [12] 1479 	add	a,#_digits
      000529 F5 82            [12] 1480 	mov	dpl,a
      00052B ED               [12] 1481 	mov	a,r5
      00052C 34s00            [12] 1482 	addc	a,#(_digits >> 8)
      00052E F5 83            [12] 1483 	mov	dph,a
      000530 E4               [12] 1484 	clr	a
      000531 93               [24] 1485 	movc	a,@a+dptr
      000532 FF               [12] 1486 	mov	r7,a
      000533 7E 00            [12] 1487 	mov	r6,#0x00
      000535 8F 82            [24] 1488 	mov	dpl,r7
      000537 8E 83            [24] 1489 	mov	dph,r6
      000539 12r00r00         [24] 1490 	lcall	_putchar
                                   1491 ;	life.c:147: printstr(">\r\n");
      00053C 7Dr21            [12] 1492 	mov	r5,#___str_4
      00053E 7Es00            [12] 1493 	mov	r6,#(___str_4 >> 8)
      000540 7F 80            [12] 1494 	mov	r7,#0x80
                                   1495 ;	life.c:48: return;
      000542                       1496 00171$:
                                   1497 ;	life.c:46: for (; *s; s++) putchar(*s);
      000542 8D 82            [24] 1498 	mov	dpl,r5
      000544 8E 83            [24] 1499 	mov	dph,r6
      000546 8F F0            [24] 1500 	mov	b,r7
      000548 12r00r00         [24] 1501 	lcall	__gptrget
      00054B FC               [12] 1502 	mov	r4,a
      00054C 60 10            [24] 1503 	jz	00133$
      00054E 7B 00            [12] 1504 	mov	r3,#0x00
      000550 8C 82            [24] 1505 	mov	dpl,r4
      000552 8B 83            [24] 1506 	mov	dph,r3
      000554 12r00r00         [24] 1507 	lcall	_putchar
      000557 0D               [12] 1508 	inc	r5
                                   1509 ;	life.c:147: printstr(">\r\n");
      000558 BD 00 E7         [24] 1510 	cjne	r5,#0x00,00171$
      00055B 0E               [12] 1511 	inc	r6
      00055C 80 E4            [24] 1512 	sjmp	00171$
      00055E                       1513 00133$:
                                   1514 ;	life.c:196: show(0);
      00055E 75 82 00         [24] 1515 	mov	dpl,#0x00
      000561 12r00r34         [24] 1516 	lcall	_show
                                   1517 ;	life.c:198: printstr("RDY\r\n");
      000564 7Dr3A            [12] 1518 	mov	r5,#___str_7
      000566 7Es00            [12] 1519 	mov	r6,#(___str_7 >> 8)
      000568 7F 80            [12] 1520 	mov	r7,#0x80
                                   1521 ;	life.c:48: return;
      00056A                       1522 00174$:
                                   1523 ;	life.c:46: for (; *s; s++) putchar(*s);
      00056A 8D 82            [24] 1524 	mov	dpl,r5
      00056C 8E 83            [24] 1525 	mov	dph,r6
      00056E 8F F0            [24] 1526 	mov	b,r7
      000570 12r00r00         [24] 1527 	lcall	__gptrget
      000573 FC               [12] 1528 	mov	r4,a
      000574 60 10            [24] 1529 	jz	00136$
      000576 7B 00            [12] 1530 	mov	r3,#0x00
      000578 8C 82            [24] 1531 	mov	dpl,r4
      00057A 8B 83            [24] 1532 	mov	dph,r3
      00057C 12r00r00         [24] 1533 	lcall	_putchar
      00057F 0D               [12] 1534 	inc	r5
                                   1535 ;	life.c:198: printstr("RDY\r\n");
      000580 BD 00 E7         [24] 1536 	cjne	r5,#0x00,00174$
      000583 0E               [12] 1537 	inc	r6
      000584 80 E4            [24] 1538 	sjmp	00174$
      000586                       1539 00136$:
                                   1540 ;	life.c:199: (void)getchar();
      000586 12r00r05         [24] 1541 	lcall	_getchar
                                   1542 ;	life.c:74: for (j = 0; j < 4; j++)
      000589 90r0Cr15         [24] 1543 	mov	dptr,#_j
      00058C E4               [12] 1544 	clr	a
      00058D F0               [24] 1545 	movx	@dptr,a
      00058E A3               [24] 1546 	inc	dptr
      00058F F0               [24] 1547 	movx	@dptr,a
      000590                       1548 00176$:
                                   1549 ;	life.c:75: generation[j] = 0;
      000590 90r0Cr15         [24] 1550 	mov	dptr,#_j
      000593 E0               [24] 1551 	movx	a,@dptr
      000594 FE               [12] 1552 	mov	r6,a
      000595 A3               [24] 1553 	inc	dptr
      000596 E0               [24] 1554 	movx	a,@dptr
      000597 FF               [12] 1555 	mov	r7,a
      000598 EE               [12] 1556 	mov	a,r6
      000599 2E               [12] 1557 	add	a,r6
      00059A FE               [12] 1558 	mov	r6,a
      00059B EF               [12] 1559 	mov	a,r7
      00059C 33               [12] 1560 	rlc	a
      00059D FF               [12] 1561 	mov	r7,a
      00059E EE               [12] 1562 	mov	a,r6
      00059F 24r0B            [12] 1563 	add	a,#_generation
      0005A1 F5 82            [12] 1564 	mov	dpl,a
      0005A3 EF               [12] 1565 	mov	a,r7
      0005A4 34s0C            [12] 1566 	addc	a,#(_generation >> 8)
      0005A6 F5 83            [12] 1567 	mov	dph,a
      0005A8 E4               [12] 1568 	clr	a
      0005A9 F0               [24] 1569 	movx	@dptr,a
      0005AA A3               [24] 1570 	inc	dptr
      0005AB F0               [24] 1571 	movx	@dptr,a
                                   1572 ;	life.c:74: for (j = 0; j < 4; j++)
      0005AC 90r0Cr15         [24] 1573 	mov	dptr,#_j
      0005AF E0               [24] 1574 	movx	a,@dptr
      0005B0 24 01            [12] 1575 	add	a,#0x01
      0005B2 F0               [24] 1576 	movx	@dptr,a
      0005B3 A3               [24] 1577 	inc	dptr
      0005B4 E0               [24] 1578 	movx	a,@dptr
      0005B5 34 00            [12] 1579 	addc	a,#0x00
      0005B7 F0               [24] 1580 	movx	@dptr,a
      0005B8 90r0Cr15         [24] 1581 	mov	dptr,#_j
      0005BB E0               [24] 1582 	movx	a,@dptr
      0005BC FE               [12] 1583 	mov	r6,a
      0005BD A3               [24] 1584 	inc	dptr
      0005BE E0               [24] 1585 	movx	a,@dptr
      0005BF FF               [12] 1586 	mov	r7,a
      0005C0 C3               [12] 1587 	clr	c
      0005C1 EE               [12] 1588 	mov	a,r6
      0005C2 94 04            [12] 1589 	subb	a,#0x04
      0005C4 EF               [12] 1590 	mov	a,r7
      0005C5 64 80            [12] 1591 	xrl	a,#0x80
      0005C7 94 80            [12] 1592 	subb	a,#0x80
      0005C9 40 C5            [24] 1593 	jc	00176$
                                   1594 ;	life.c:203: for (i1 = 0; !i0 && !i1; ) {
      0005CB                       1595 00197$:
      0005CB 90r00r00         [24] 1596 	mov	dptr,#_i0
      0005CE E0               [24] 1597 	movx	a,@dptr
      0005CF 60 03            [24] 1598 	jz	00428$
      0005D1 02r09r40         [24] 1599 	ljmp	00104$
      0005D4                       1600 00428$:
                                   1601 ;	life.c:204: show(1);
      0005D4 75 82 01         [24] 1602 	mov	dpl,#0x01
      0005D7 12r00r34         [24] 1603 	lcall	_show
                                   1604 ;	life.c:153: fixed = 1;
      0005DA 90r0Cr13         [24] 1605 	mov	dptr,#_fixed
      0005DD 74 01            [12] 1606 	mov	a,#0x01
      0005DF F0               [24] 1607 	movx	@dptr,a
                                   1608 ;	life.c:154: cycle2 = 1;
      0005E0 90r0Cr14         [24] 1609 	mov	dptr,#_cycle2
      0005E3 F0               [24] 1610 	movx	@dptr,a
                                   1611 ;	life.c:156: for (y = 0; y < H; y++) {
      0005E4 90r0Cr04         [24] 1612 	mov	dptr,#_y
      0005E7 E4               [12] 1613 	clr	a
      0005E8 F0               [24] 1614 	movx	@dptr,a
      0005E9 A3               [24] 1615 	inc	dptr
      0005EA F0               [24] 1616 	movx	@dptr,a
      0005EB                       1617 00186$:
                                   1618 ;	life.c:157: for (x = 0; x < W; x++) {
      0005EB 90r0Cr02         [24] 1619 	mov	dptr,#_x
      0005EE E4               [12] 1620 	clr	a
      0005EF F0               [24] 1621 	movx	@dptr,a
      0005F0 A3               [24] 1622 	inc	dptr
      0005F1 F0               [24] 1623 	movx	@dptr,a
      0005F2                       1624 00184$:
                                   1625 ;	life.c:158: n = 0;
      0005F2 90r0Cr0A         [24] 1626 	mov	dptr,#_n
      0005F5 E4               [12] 1627 	clr	a
      0005F6 F0               [24] 1628 	movx	@dptr,a
                                   1629 ;	life.c:159: for (y1 = y - 1; y1 <= y + 1; y1++)
      0005F7 90r0Cr04         [24] 1630 	mov	dptr,#_y
      0005FA E0               [24] 1631 	movx	a,@dptr
      0005FB FE               [12] 1632 	mov	r6,a
      0005FC A3               [24] 1633 	inc	dptr
      0005FD E0               [24] 1634 	movx	a,@dptr
      0005FE FF               [12] 1635 	mov	r7,a
      0005FF 1E               [12] 1636 	dec	r6
      000600 BE FF 01         [24] 1637 	cjne	r6,#0xff,00429$
      000603 1F               [12] 1638 	dec	r7
      000604                       1639 00429$:
      000604 90r0Cr08         [24] 1640 	mov	dptr,#_y1
      000607 EE               [12] 1641 	mov	a,r6
      000608 F0               [24] 1642 	movx	@dptr,a
      000609 EF               [12] 1643 	mov	a,r7
      00060A A3               [24] 1644 	inc	dptr
      00060B F0               [24] 1645 	movx	@dptr,a
      00060C                       1646 00182$:
      00060C 90r0Cr04         [24] 1647 	mov	dptr,#_y
      00060F E0               [24] 1648 	movx	a,@dptr
      000610 FE               [12] 1649 	mov	r6,a
      000611 A3               [24] 1650 	inc	dptr
      000612 E0               [24] 1651 	movx	a,@dptr
      000613 FF               [12] 1652 	mov	r7,a
      000614 74 01            [12] 1653 	mov	a,#0x01
      000616 2E               [12] 1654 	add	a,r6
      000617 FC               [12] 1655 	mov	r4,a
      000618 E4               [12] 1656 	clr	a
      000619 3F               [12] 1657 	addc	a,r7
      00061A FD               [12] 1658 	mov	r5,a
      00061B 90r0Cr08         [24] 1659 	mov	dptr,#_y1
      00061E E0               [24] 1660 	movx	a,@dptr
      00061F FA               [12] 1661 	mov	r2,a
      000620 A3               [24] 1662 	inc	dptr
      000621 E0               [24] 1663 	movx	a,@dptr
      000622 FB               [12] 1664 	mov	r3,a
      000623 C3               [12] 1665 	clr	c
      000624 EC               [12] 1666 	mov	a,r4
      000625 9A               [12] 1667 	subb	a,r2
      000626 ED               [12] 1668 	mov	a,r5
      000627 64 80            [12] 1669 	xrl	a,#0x80
      000629 8B F0            [24] 1670 	mov	b,r3
      00062B 63 F0 80         [24] 1671 	xrl	b,#0x80
      00062E 95 F0            [12] 1672 	subb	a,b
      000630 50 03            [24] 1673 	jnc	00430$
      000632 02r07r0D         [24] 1674 	ljmp	00142$
      000635                       1675 00430$:
                                   1676 ;	life.c:160: for (x1 = x - 1; x1 <= x + 1; x1++)
      000635 90r0Cr02         [24] 1677 	mov	dptr,#_x
      000638 E0               [24] 1678 	movx	a,@dptr
      000639 FC               [12] 1679 	mov	r4,a
      00063A A3               [24] 1680 	inc	dptr
      00063B E0               [24] 1681 	movx	a,@dptr
      00063C FD               [12] 1682 	mov	r5,a
      00063D 1C               [12] 1683 	dec	r4
      00063E BC FF 01         [24] 1684 	cjne	r4,#0xff,00431$
      000641 1D               [12] 1685 	dec	r5
      000642                       1686 00431$:
      000642 90r0Cr06         [24] 1687 	mov	dptr,#_x1
      000645 EC               [12] 1688 	mov	a,r4
      000646 F0               [24] 1689 	movx	@dptr,a
      000647 ED               [12] 1690 	mov	a,r5
      000648 A3               [24] 1691 	inc	dptr
      000649 F0               [24] 1692 	movx	@dptr,a
      00064A                       1693 00179$:
      00064A 90r0Cr02         [24] 1694 	mov	dptr,#_x
      00064D E0               [24] 1695 	movx	a,@dptr
      00064E FC               [12] 1696 	mov	r4,a
      00064F A3               [24] 1697 	inc	dptr
      000650 E0               [24] 1698 	movx	a,@dptr
      000651 FD               [12] 1699 	mov	r5,a
      000652 0C               [12] 1700 	inc	r4
      000653 BC 00 01         [24] 1701 	cjne	r4,#0x00,00432$
      000656 0D               [12] 1702 	inc	r5
      000657                       1703 00432$:
      000657 90r0Cr06         [24] 1704 	mov	dptr,#_x1
      00065A E0               [24] 1705 	movx	a,@dptr
      00065B FA               [12] 1706 	mov	r2,a
      00065C A3               [24] 1707 	inc	dptr
      00065D E0               [24] 1708 	movx	a,@dptr
      00065E FB               [12] 1709 	mov	r3,a
      00065F C3               [12] 1710 	clr	c
      000660 EC               [12] 1711 	mov	a,r4
      000661 9A               [12] 1712 	subb	a,r2
      000662 ED               [12] 1713 	mov	a,r5
      000663 64 80            [12] 1714 	xrl	a,#0x80
      000665 8B F0            [24] 1715 	mov	b,r3
      000667 63 F0 80         [24] 1716 	xrl	b,#0x80
      00066A 95 F0            [12] 1717 	subb	a,b
      00066C 50 03            [24] 1718 	jnc	00433$
      00066E 02r06rFE         [24] 1719 	ljmp	00183$
      000671                       1720 00433$:
                                   1721 ;	life.c:161: if (u[A2D(W, (y1 + H) % H, (x1 + W) % W)]) n++;
      000671 90r0Cr08         [24] 1722 	mov	dptr,#_y1
      000674 E0               [24] 1723 	movx	a,@dptr
      000675 FC               [12] 1724 	mov	r4,a
      000676 A3               [24] 1725 	inc	dptr
      000677 E0               [24] 1726 	movx	a,@dptr
      000678 FD               [12] 1727 	mov	r5,a
      000679 74 20            [12] 1728 	mov	a,#0x20
      00067B 2C               [12] 1729 	add	a,r4
      00067C FC               [12] 1730 	mov	r4,a
      00067D E4               [12] 1731 	clr	a
      00067E 3D               [12] 1732 	addc	a,r5
      00067F FD               [12] 1733 	mov	r5,a
      000680 C0 03            [24] 1734 	push	ar3
      000682 C0 02            [24] 1735 	push	ar2
      000684 74 20            [12] 1736 	mov	a,#0x20
      000686 C0 E0            [24] 1737 	push	acc
      000688 E4               [12] 1738 	clr	a
      000689 C0 E0            [24] 1739 	push	acc
      00068B 8C 82            [24] 1740 	mov	dpl,r4
      00068D 8D 83            [24] 1741 	mov	dph,r5
      00068F 12r00r00         [24] 1742 	lcall	__modsint
      000692 AC 82            [24] 1743 	mov	r4,dpl
      000694 AD 83            [24] 1744 	mov	r5,dph
      000696 15 81            [12] 1745 	dec	sp
      000698 15 81            [12] 1746 	dec	sp
      00069A D0 02            [24] 1747 	pop	ar2
      00069C D0 03            [24] 1748 	pop	ar3
      00069E ED               [12] 1749 	mov	a,r5
      00069F C4               [12] 1750 	swap	a
      0006A0 23               [12] 1751 	rl	a
      0006A1 54 E0            [12] 1752 	anl	a,#0xe0
      0006A3 CC               [12] 1753 	xch	a,r4
      0006A4 C4               [12] 1754 	swap	a
      0006A5 23               [12] 1755 	rl	a
      0006A6 CC               [12] 1756 	xch	a,r4
      0006A7 6C               [12] 1757 	xrl	a,r4
      0006A8 CC               [12] 1758 	xch	a,r4
      0006A9 54 E0            [12] 1759 	anl	a,#0xe0
      0006AB CC               [12] 1760 	xch	a,r4
      0006AC 6C               [12] 1761 	xrl	a,r4
      0006AD FD               [12] 1762 	mov	r5,a
      0006AE 74 20            [12] 1763 	mov	a,#0x20
      0006B0 2A               [12] 1764 	add	a,r2
      0006B1 FA               [12] 1765 	mov	r2,a
      0006B2 E4               [12] 1766 	clr	a
      0006B3 3B               [12] 1767 	addc	a,r3
      0006B4 FB               [12] 1768 	mov	r3,a
      0006B5 C0 05            [24] 1769 	push	ar5
      0006B7 C0 04            [24] 1770 	push	ar4
      0006B9 74 20            [12] 1771 	mov	a,#0x20
      0006BB C0 E0            [24] 1772 	push	acc
      0006BD E4               [12] 1773 	clr	a
      0006BE C0 E0            [24] 1774 	push	acc
      0006C0 8A 82            [24] 1775 	mov	dpl,r2
      0006C2 8B 83            [24] 1776 	mov	dph,r3
      0006C4 12r00r00         [24] 1777 	lcall	__modsint
      0006C7 AA 82            [24] 1778 	mov	r2,dpl
      0006C9 AB 83            [24] 1779 	mov	r3,dph
      0006CB 15 81            [12] 1780 	dec	sp
      0006CD 15 81            [12] 1781 	dec	sp
      0006CF D0 04            [24] 1782 	pop	ar4
      0006D1 D0 05            [24] 1783 	pop	ar5
      0006D3 EA               [12] 1784 	mov	a,r2
      0006D4 2C               [12] 1785 	add	a,r4
      0006D5 FC               [12] 1786 	mov	r4,a
      0006D6 EB               [12] 1787 	mov	a,r3
      0006D7 3D               [12] 1788 	addc	a,r5
      0006D8 FD               [12] 1789 	mov	r5,a
      0006D9 EC               [12] 1790 	mov	a,r4
      0006DA 24r02            [12] 1791 	add	a,#_u
      0006DC FC               [12] 1792 	mov	r4,a
      0006DD ED               [12] 1793 	mov	a,r5
      0006DE 34s04            [12] 1794 	addc	a,#(_u >> 8)
      0006E0 FD               [12] 1795 	mov	r5,a
      0006E1 8C 82            [24] 1796 	mov	dpl,r4
      0006E3 8D 83            [24] 1797 	mov	dph,r5
      0006E5 E0               [24] 1798 	movx	a,@dptr
      0006E6 60 07            [24] 1799 	jz	00180$
      0006E8 90r0Cr0A         [24] 1800 	mov	dptr,#_n
      0006EB E0               [24] 1801 	movx	a,@dptr
      0006EC 24 01            [12] 1802 	add	a,#0x01
      0006EE F0               [24] 1803 	movx	@dptr,a
      0006EF                       1804 00180$:
                                   1805 ;	life.c:160: for (x1 = x - 1; x1 <= x + 1; x1++)
      0006EF 90r0Cr06         [24] 1806 	mov	dptr,#_x1
      0006F2 E0               [24] 1807 	movx	a,@dptr
      0006F3 24 01            [12] 1808 	add	a,#0x01
      0006F5 F0               [24] 1809 	movx	@dptr,a
      0006F6 A3               [24] 1810 	inc	dptr
      0006F7 E0               [24] 1811 	movx	a,@dptr
      0006F8 34 00            [12] 1812 	addc	a,#0x00
      0006FA F0               [24] 1813 	movx	@dptr,a
      0006FB 02r06r4A         [24] 1814 	ljmp	00179$
      0006FE                       1815 00183$:
                                   1816 ;	life.c:159: for (y1 = y - 1; y1 <= y + 1; y1++)
      0006FE 90r0Cr08         [24] 1817 	mov	dptr,#_y1
      000701 E0               [24] 1818 	movx	a,@dptr
      000702 24 01            [12] 1819 	add	a,#0x01
      000704 F0               [24] 1820 	movx	@dptr,a
      000705 A3               [24] 1821 	inc	dptr
      000706 E0               [24] 1822 	movx	a,@dptr
      000707 34 00            [12] 1823 	addc	a,#0x00
      000709 F0               [24] 1824 	movx	@dptr,a
      00070A 02r06r0C         [24] 1825 	ljmp	00182$
      00070D                       1826 00142$:
                                   1827 ;	life.c:163: if (u[A2D(W, y, x)]) n--;
      00070D EF               [12] 1828 	mov	a,r7
      00070E C4               [12] 1829 	swap	a
      00070F 23               [12] 1830 	rl	a
      000710 54 E0            [12] 1831 	anl	a,#0xe0
      000712 CE               [12] 1832 	xch	a,r6
      000713 C4               [12] 1833 	swap	a
      000714 23               [12] 1834 	rl	a
      000715 CE               [12] 1835 	xch	a,r6
      000716 6E               [12] 1836 	xrl	a,r6
      000717 CE               [12] 1837 	xch	a,r6
      000718 54 E0            [12] 1838 	anl	a,#0xe0
      00071A CE               [12] 1839 	xch	a,r6
      00071B 6E               [12] 1840 	xrl	a,r6
      00071C FF               [12] 1841 	mov	r7,a
      00071D 90r0Cr02         [24] 1842 	mov	dptr,#_x
      000720 E0               [24] 1843 	movx	a,@dptr
      000721 FC               [12] 1844 	mov	r4,a
      000722 A3               [24] 1845 	inc	dptr
      000723 E0               [24] 1846 	movx	a,@dptr
      000724 FD               [12] 1847 	mov	r5,a
      000725 EC               [12] 1848 	mov	a,r4
      000726 2E               [12] 1849 	add	a,r6
      000727 FE               [12] 1850 	mov	r6,a
      000728 ED               [12] 1851 	mov	a,r5
      000729 3F               [12] 1852 	addc	a,r7
      00072A FF               [12] 1853 	mov	r7,a
      00072B EE               [12] 1854 	mov	a,r6
      00072C 24r02            [12] 1855 	add	a,#_u
      00072E FE               [12] 1856 	mov	r6,a
      00072F EF               [12] 1857 	mov	a,r7
      000730 34s04            [12] 1858 	addc	a,#(_u >> 8)
      000732 FF               [12] 1859 	mov	r7,a
      000733 8E 82            [24] 1860 	mov	dpl,r6
      000735 8F 83            [24] 1861 	mov	dph,r7
      000737 E0               [24] 1862 	movx	a,@dptr
      000738 60 06            [24] 1863 	jz	00144$
      00073A 90r0Cr0A         [24] 1864 	mov	dptr,#_n
      00073D E0               [24] 1865 	movx	a,@dptr
      00073E 14               [12] 1866 	dec	a
      00073F F0               [24] 1867 	movx	@dptr,a
      000740                       1868 00144$:
                                   1869 ;	life.c:164: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000740 90r0Cr04         [24] 1870 	mov	dptr,#_y
      000743 E0               [24] 1871 	movx	a,@dptr
      000744 FE               [12] 1872 	mov	r6,a
      000745 A3               [24] 1873 	inc	dptr
      000746 E0               [24] 1874 	movx	a,@dptr
      000747 C4               [12] 1875 	swap	a
      000748 23               [12] 1876 	rl	a
      000749 54 E0            [12] 1877 	anl	a,#0xe0
      00074B CE               [12] 1878 	xch	a,r6
      00074C C4               [12] 1879 	swap	a
      00074D 23               [12] 1880 	rl	a
      00074E CE               [12] 1881 	xch	a,r6
      00074F 6E               [12] 1882 	xrl	a,r6
      000750 CE               [12] 1883 	xch	a,r6
      000751 54 E0            [12] 1884 	anl	a,#0xe0
      000753 CE               [12] 1885 	xch	a,r6
      000754 6E               [12] 1886 	xrl	a,r6
      000755 FF               [12] 1887 	mov	r7,a
      000756 90r0Cr02         [24] 1888 	mov	dptr,#_x
      000759 E0               [24] 1889 	movx	a,@dptr
      00075A FC               [12] 1890 	mov	r4,a
      00075B A3               [24] 1891 	inc	dptr
      00075C E0               [24] 1892 	movx	a,@dptr
      00075D FD               [12] 1893 	mov	r5,a
      00075E EC               [12] 1894 	mov	a,r4
      00075F 2E               [12] 1895 	add	a,r6
      000760 FA               [12] 1896 	mov	r2,a
      000761 ED               [12] 1897 	mov	a,r5
      000762 3F               [12] 1898 	addc	a,r7
      000763 FB               [12] 1899 	mov	r3,a
      000764 EA               [12] 1900 	mov	a,r2
      000765 24r02            [12] 1901 	add	a,#_nu
      000767 FA               [12] 1902 	mov	r2,a
      000768 EB               [12] 1903 	mov	a,r3
      000769 34s08            [12] 1904 	addc	a,#(_nu >> 8)
      00076B FB               [12] 1905 	mov	r3,a
      00076C 90r0Cr0A         [24] 1906 	mov	dptr,#_n
      00076F A8*00            [24] 1907 	mov	r0,_bp
      000771 08               [12] 1908 	inc	r0
      000772 E0               [24] 1909 	movx	a,@dptr
      000773 F6               [12] 1910 	mov	@r0,a
      000774 A8*00            [24] 1911 	mov	r0,_bp
      000776 08               [12] 1912 	inc	r0
      000777 B6 03 02         [24] 1913 	cjne	@r0,#0x03,00436$
      00077A 80 1F            [24] 1914 	sjmp	00210$
      00077C                       1915 00436$:
      00077C A8*00            [24] 1916 	mov	r0,_bp
      00077E 08               [12] 1917 	inc	r0
      00077F B6 02 15         [24] 1918 	cjne	@r0,#0x02,00209$
      000782 EC               [12] 1919 	mov	a,r4
      000783 2E               [12] 1920 	add	a,r6
      000784 FE               [12] 1921 	mov	r6,a
      000785 ED               [12] 1922 	mov	a,r5
      000786 3F               [12] 1923 	addc	a,r7
      000787 FF               [12] 1924 	mov	r7,a
      000788 EE               [12] 1925 	mov	a,r6
      000789 24r02            [12] 1926 	add	a,#_u
      00078B FE               [12] 1927 	mov	r6,a
      00078C EF               [12] 1928 	mov	a,r7
      00078D 34s04            [12] 1929 	addc	a,#(_u >> 8)
      00078F FF               [12] 1930 	mov	r7,a
      000790 8E 82            [24] 1931 	mov	dpl,r6
      000792 8F 83            [24] 1932 	mov	dph,r7
      000794 E0               [24] 1933 	movx	a,@dptr
      000795 70 04            [24] 1934 	jnz	00210$
      000797                       1935 00209$:
                                   1936 ;	assignBit
      000797 C2*00            [12] 1937 	clr	b0
      000799 80 02            [24] 1938 	sjmp	00211$
      00079B                       1939 00210$:
                                   1940 ;	assignBit
      00079B D2*00            [12] 1941 	setb	b0
      00079D                       1942 00211$:
      00079D A2*00            [12] 1943 	mov	c,b0
      00079F E4               [12] 1944 	clr	a
      0007A0 33               [12] 1945 	rlc	a
      0007A1 8A 82            [24] 1946 	mov	dpl,r2
      0007A3 8B 83            [24] 1947 	mov	dph,r3
      0007A5 F0               [24] 1948 	movx	@dptr,a
                                   1949 ;	life.c:157: for (x = 0; x < W; x++) {
      0007A6 90r0Cr02         [24] 1950 	mov	dptr,#_x
      0007A9 E0               [24] 1951 	movx	a,@dptr
      0007AA 24 01            [12] 1952 	add	a,#0x01
      0007AC F0               [24] 1953 	movx	@dptr,a
      0007AD A3               [24] 1954 	inc	dptr
      0007AE E0               [24] 1955 	movx	a,@dptr
      0007AF 34 00            [12] 1956 	addc	a,#0x00
      0007B1 F0               [24] 1957 	movx	@dptr,a
      0007B2 90r0Cr02         [24] 1958 	mov	dptr,#_x
      0007B5 E0               [24] 1959 	movx	a,@dptr
      0007B6 FE               [12] 1960 	mov	r6,a
      0007B7 A3               [24] 1961 	inc	dptr
      0007B8 E0               [24] 1962 	movx	a,@dptr
      0007B9 FF               [12] 1963 	mov	r7,a
      0007BA C3               [12] 1964 	clr	c
      0007BB EE               [12] 1965 	mov	a,r6
      0007BC 94 20            [12] 1966 	subb	a,#0x20
      0007BE EF               [12] 1967 	mov	a,r7
      0007BF 64 80            [12] 1968 	xrl	a,#0x80
      0007C1 94 80            [12] 1969 	subb	a,#0x80
      0007C3 50 03            [24] 1970 	jnc	00440$
      0007C5 02r05rF2         [24] 1971 	ljmp	00184$
      0007C8                       1972 00440$:
                                   1973 ;	life.c:156: for (y = 0; y < H; y++) {
      0007C8 90r0Cr04         [24] 1974 	mov	dptr,#_y
      0007CB E0               [24] 1975 	movx	a,@dptr
      0007CC 24 01            [12] 1976 	add	a,#0x01
      0007CE F0               [24] 1977 	movx	@dptr,a
      0007CF A3               [24] 1978 	inc	dptr
      0007D0 E0               [24] 1979 	movx	a,@dptr
      0007D1 34 00            [12] 1980 	addc	a,#0x00
      0007D3 F0               [24] 1981 	movx	@dptr,a
      0007D4 90r0Cr04         [24] 1982 	mov	dptr,#_y
      0007D7 E0               [24] 1983 	movx	a,@dptr
      0007D8 FE               [12] 1984 	mov	r6,a
      0007D9 A3               [24] 1985 	inc	dptr
      0007DA E0               [24] 1986 	movx	a,@dptr
      0007DB FF               [12] 1987 	mov	r7,a
      0007DC C3               [12] 1988 	clr	c
      0007DD EE               [12] 1989 	mov	a,r6
      0007DE 94 20            [12] 1990 	subb	a,#0x20
      0007E0 EF               [12] 1991 	mov	a,r7
      0007E1 64 80            [12] 1992 	xrl	a,#0x80
      0007E3 94 80            [12] 1993 	subb	a,#0x80
      0007E5 50 03            [24] 1994 	jnc	00441$
      0007E7 02r05rEB         [24] 1995 	ljmp	00186$
      0007EA                       1996 00441$:
                                   1997 ;	life.c:168: for (y = 0; y < H; y++)
      0007EA 90r0Cr04         [24] 1998 	mov	dptr,#_y
      0007ED E4               [12] 1999 	clr	a
      0007EE F0               [24] 2000 	movx	@dptr,a
      0007EF A3               [24] 2001 	inc	dptr
      0007F0 F0               [24] 2002 	movx	@dptr,a
      0007F1                       2003 00190$:
                                   2004 ;	life.c:169: for (x = 0; x < W; x++) {
      0007F1 90r0Cr02         [24] 2005 	mov	dptr,#_x
      0007F4 E4               [12] 2006 	clr	a
      0007F5 F0               [24] 2007 	movx	@dptr,a
      0007F6 A3               [24] 2008 	inc	dptr
      0007F7 F0               [24] 2009 	movx	@dptr,a
      0007F8                       2010 00188$:
                                   2011 ;	life.c:170: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      0007F8 90r0Cr04         [24] 2012 	mov	dptr,#_y
      0007FB E0               [24] 2013 	movx	a,@dptr
      0007FC FE               [12] 2014 	mov	r6,a
      0007FD A3               [24] 2015 	inc	dptr
      0007FE E0               [24] 2016 	movx	a,@dptr
      0007FF C4               [12] 2017 	swap	a
      000800 23               [12] 2018 	rl	a
      000801 54 E0            [12] 2019 	anl	a,#0xe0
      000803 CE               [12] 2020 	xch	a,r6
      000804 C4               [12] 2021 	swap	a
      000805 23               [12] 2022 	rl	a
      000806 CE               [12] 2023 	xch	a,r6
      000807 6E               [12] 2024 	xrl	a,r6
      000808 CE               [12] 2025 	xch	a,r6
      000809 54 E0            [12] 2026 	anl	a,#0xe0
      00080B CE               [12] 2027 	xch	a,r6
      00080C 6E               [12] 2028 	xrl	a,r6
      00080D FF               [12] 2029 	mov	r7,a
      00080E 90r0Cr02         [24] 2030 	mov	dptr,#_x
      000811 E0               [24] 2031 	movx	a,@dptr
      000812 FC               [12] 2032 	mov	r4,a
      000813 A3               [24] 2033 	inc	dptr
      000814 E0               [24] 2034 	movx	a,@dptr
      000815 FD               [12] 2035 	mov	r5,a
      000816 EC               [12] 2036 	mov	a,r4
      000817 2E               [12] 2037 	add	a,r6
      000818 FE               [12] 2038 	mov	r6,a
      000819 ED               [12] 2039 	mov	a,r5
      00081A 3F               [12] 2040 	addc	a,r7
      00081B FF               [12] 2041 	mov	r7,a
      00081C EE               [12] 2042 	mov	a,r6
      00081D 24r02            [12] 2043 	add	a,#_pu
      00081F F5 82            [12] 2044 	mov	dpl,a
      000821 EF               [12] 2045 	mov	a,r7
      000822 34s00            [12] 2046 	addc	a,#(_pu >> 8)
      000824 F5 83            [12] 2047 	mov	dph,a
      000826 E0               [24] 2048 	movx	a,@dptr
      000827 FD               [12] 2049 	mov	r5,a
      000828 EE               [12] 2050 	mov	a,r6
      000829 24r02            [12] 2051 	add	a,#_nu
      00082B F5 82            [12] 2052 	mov	dpl,a
      00082D EF               [12] 2053 	mov	a,r7
      00082E 34s08            [12] 2054 	addc	a,#(_nu >> 8)
      000830 F5 83            [12] 2055 	mov	dph,a
      000832 E0               [24] 2056 	movx	a,@dptr
      000833 FF               [12] 2057 	mov	r7,a
      000834 ED               [12] 2058 	mov	a,r5
      000835 B5 07 02         [24] 2059 	cjne	a,ar7,00442$
      000838 80 05            [24] 2060 	sjmp	00148$
      00083A                       2061 00442$:
      00083A 90r0Cr14         [24] 2062 	mov	dptr,#_cycle2
      00083D E4               [12] 2063 	clr	a
      00083E F0               [24] 2064 	movx	@dptr,a
      00083F                       2065 00148$:
                                   2066 ;	life.c:171: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      00083F 90r0Cr04         [24] 2067 	mov	dptr,#_y
      000842 E0               [24] 2068 	movx	a,@dptr
      000843 FE               [12] 2069 	mov	r6,a
      000844 A3               [24] 2070 	inc	dptr
      000845 E0               [24] 2071 	movx	a,@dptr
      000846 C4               [12] 2072 	swap	a
      000847 23               [12] 2073 	rl	a
      000848 54 E0            [12] 2074 	anl	a,#0xe0
      00084A CE               [12] 2075 	xch	a,r6
      00084B C4               [12] 2076 	swap	a
      00084C 23               [12] 2077 	rl	a
      00084D CE               [12] 2078 	xch	a,r6
      00084E 6E               [12] 2079 	xrl	a,r6
      00084F CE               [12] 2080 	xch	a,r6
      000850 54 E0            [12] 2081 	anl	a,#0xe0
      000852 CE               [12] 2082 	xch	a,r6
      000853 6E               [12] 2083 	xrl	a,r6
      000854 FF               [12] 2084 	mov	r7,a
      000855 90r0Cr02         [24] 2085 	mov	dptr,#_x
      000858 E0               [24] 2086 	movx	a,@dptr
      000859 FC               [12] 2087 	mov	r4,a
      00085A A3               [24] 2088 	inc	dptr
      00085B E0               [24] 2089 	movx	a,@dptr
      00085C FD               [12] 2090 	mov	r5,a
      00085D EC               [12] 2091 	mov	a,r4
      00085E 2E               [12] 2092 	add	a,r6
      00085F FE               [12] 2093 	mov	r6,a
      000860 ED               [12] 2094 	mov	a,r5
      000861 3F               [12] 2095 	addc	a,r7
      000862 FF               [12] 2096 	mov	r7,a
      000863 EE               [12] 2097 	mov	a,r6
      000864 24r02            [12] 2098 	add	a,#_u
      000866 F5 82            [12] 2099 	mov	dpl,a
      000868 EF               [12] 2100 	mov	a,r7
      000869 34s04            [12] 2101 	addc	a,#(_u >> 8)
      00086B F5 83            [12] 2102 	mov	dph,a
      00086D E0               [24] 2103 	movx	a,@dptr
      00086E FD               [12] 2104 	mov	r5,a
      00086F EE               [12] 2105 	mov	a,r6
      000870 24r02            [12] 2106 	add	a,#_nu
      000872 F5 82            [12] 2107 	mov	dpl,a
      000874 EF               [12] 2108 	mov	a,r7
      000875 34s08            [12] 2109 	addc	a,#(_nu >> 8)
      000877 F5 83            [12] 2110 	mov	dph,a
      000879 E0               [24] 2111 	movx	a,@dptr
      00087A FF               [12] 2112 	mov	r7,a
      00087B ED               [12] 2113 	mov	a,r5
      00087C B5 07 02         [24] 2114 	cjne	a,ar7,00443$
      00087F 80 05            [24] 2115 	sjmp	00189$
      000881                       2116 00443$:
      000881 90r0Cr13         [24] 2117 	mov	dptr,#_fixed
      000884 E4               [12] 2118 	clr	a
      000885 F0               [24] 2119 	movx	@dptr,a
      000886                       2120 00189$:
                                   2121 ;	life.c:169: for (x = 0; x < W; x++) {
      000886 90r0Cr02         [24] 2122 	mov	dptr,#_x
      000889 E0               [24] 2123 	movx	a,@dptr
      00088A 24 01            [12] 2124 	add	a,#0x01
      00088C F0               [24] 2125 	movx	@dptr,a
      00088D A3               [24] 2126 	inc	dptr
      00088E E0               [24] 2127 	movx	a,@dptr
      00088F 34 00            [12] 2128 	addc	a,#0x00
      000891 F0               [24] 2129 	movx	@dptr,a
      000892 90r0Cr02         [24] 2130 	mov	dptr,#_x
      000895 E0               [24] 2131 	movx	a,@dptr
      000896 FE               [12] 2132 	mov	r6,a
      000897 A3               [24] 2133 	inc	dptr
      000898 E0               [24] 2134 	movx	a,@dptr
      000899 FF               [12] 2135 	mov	r7,a
      00089A C3               [12] 2136 	clr	c
      00089B EE               [12] 2137 	mov	a,r6
      00089C 94 20            [12] 2138 	subb	a,#0x20
      00089E EF               [12] 2139 	mov	a,r7
      00089F 64 80            [12] 2140 	xrl	a,#0x80
      0008A1 94 80            [12] 2141 	subb	a,#0x80
      0008A3 50 03            [24] 2142 	jnc	00444$
      0008A5 02r07rF8         [24] 2143 	ljmp	00188$
      0008A8                       2144 00444$:
                                   2145 ;	life.c:168: for (y = 0; y < H; y++)
      0008A8 90r0Cr04         [24] 2146 	mov	dptr,#_y
      0008AB E0               [24] 2147 	movx	a,@dptr
      0008AC 24 01            [12] 2148 	add	a,#0x01
      0008AE F0               [24] 2149 	movx	@dptr,a
      0008AF A3               [24] 2150 	inc	dptr
      0008B0 E0               [24] 2151 	movx	a,@dptr
      0008B1 34 00            [12] 2152 	addc	a,#0x00
      0008B3 F0               [24] 2153 	movx	@dptr,a
      0008B4 90r0Cr04         [24] 2154 	mov	dptr,#_y
      0008B7 E0               [24] 2155 	movx	a,@dptr
      0008B8 FE               [12] 2156 	mov	r6,a
      0008B9 A3               [24] 2157 	inc	dptr
      0008BA E0               [24] 2158 	movx	a,@dptr
      0008BB FF               [12] 2159 	mov	r7,a
      0008BC C3               [12] 2160 	clr	c
      0008BD EE               [12] 2161 	mov	a,r6
      0008BE 94 20            [12] 2162 	subb	a,#0x20
      0008C0 EF               [12] 2163 	mov	a,r7
      0008C1 64 80            [12] 2164 	xrl	a,#0x80
      0008C3 94 80            [12] 2165 	subb	a,#0x80
      0008C5 50 03            [24] 2166 	jnc	00445$
      0008C7 02r07rF1         [24] 2167 	ljmp	00190$
      0008CA                       2168 00445$:
                                   2169 ;	life.c:174: memcpy(pu, u, sizeof (u));
      0008CA E4               [12] 2170 	clr	a
      0008CB C0 E0            [24] 2171 	push	acc
      0008CD 74 04            [12] 2172 	mov	a,#0x04
      0008CF C0 E0            [24] 2173 	push	acc
      0008D1 74r02            [12] 2174 	mov	a,#_u
      0008D3 C0 E0            [24] 2175 	push	acc
      0008D5 74s04            [12] 2176 	mov	a,#(_u >> 8)
      0008D7 C0 E0            [24] 2177 	push	acc
      0008D9 E4               [12] 2178 	clr	a
      0008DA C0 E0            [24] 2179 	push	acc
      0008DC 90r00r02         [24] 2180 	mov	dptr,#_pu
      0008DF 75 F0 00         [24] 2181 	mov	b,#0x00
      0008E2 12r00r00         [24] 2182 	lcall	___memcpy
      0008E5 E5 81            [12] 2183 	mov	a,sp
      0008E7 24 FB            [12] 2184 	add	a,#0xfb
      0008E9 F5 81            [12] 2185 	mov	sp,a
                                   2186 ;	life.c:175: memcpy(u, nu, sizeof (nu));
      0008EB E4               [12] 2187 	clr	a
      0008EC C0 E0            [24] 2188 	push	acc
      0008EE 74 04            [12] 2189 	mov	a,#0x04
      0008F0 C0 E0            [24] 2190 	push	acc
      0008F2 74r02            [12] 2191 	mov	a,#_nu
      0008F4 C0 E0            [24] 2192 	push	acc
      0008F6 74s08            [12] 2193 	mov	a,#(_nu >> 8)
      0008F8 C0 E0            [24] 2194 	push	acc
      0008FA E4               [12] 2195 	clr	a
      0008FB C0 E0            [24] 2196 	push	acc
      0008FD 90r04r02         [24] 2197 	mov	dptr,#_u
      000900 75 F0 00         [24] 2198 	mov	b,#0x00
      000903 12r00r00         [24] 2199 	lcall	___memcpy
      000906 E5 81            [12] 2200 	mov	a,sp
      000908 24 FB            [12] 2201 	add	a,#0xfb
      00090A F5 81            [12] 2202 	mov	sp,a
                                   2203 ;	life.c:206: if (fixed || cycle2) {
      00090C 90r0Cr13         [24] 2204 	mov	dptr,#_fixed
      00090F E0               [24] 2205 	movx	a,@dptr
      000910 70 09            [24] 2206 	jnz	00101$
      000912 90r0Cr14         [24] 2207 	mov	dptr,#_cycle2
      000915 E0               [24] 2208 	movx	a,@dptr
      000916 70 03            [24] 2209 	jnz	00447$
      000918 02r05rCB         [24] 2210 	ljmp	00197$
      00091B                       2211 00447$:
      00091B                       2212 00101$:
                                   2213 ;	life.c:207: printstr("DONE\r\n");
      00091B 7Dr40            [12] 2214 	mov	r5,#___str_8
      00091D 7Es00            [12] 2215 	mov	r6,#(___str_8 >> 8)
      00091F 7F 80            [12] 2216 	mov	r7,#0x80
                                   2217 ;	life.c:48: return;
      000921                       2218 00193$:
                                   2219 ;	life.c:46: for (; *s; s++) putchar(*s);
      000921 8D 82            [24] 2220 	mov	dpl,r5
      000923 8E 83            [24] 2221 	mov	dph,r6
      000925 8F F0            [24] 2222 	mov	b,r7
      000927 12r00r00         [24] 2223 	lcall	__gptrget
      00092A FC               [12] 2224 	mov	r4,a
      00092B 60 10            [24] 2225 	jz	00155$
      00092D 7B 00            [12] 2226 	mov	r3,#0x00
      00092F 8C 82            [24] 2227 	mov	dpl,r4
      000931 8B 83            [24] 2228 	mov	dph,r3
      000933 12r00r00         [24] 2229 	lcall	_putchar
      000936 0D               [12] 2230 	inc	r5
                                   2231 ;	life.c:207: printstr("DONE\r\n");
      000937 BD 00 E7         [24] 2232 	cjne	r5,#0x00,00193$
      00093A 0E               [12] 2233 	inc	r6
      00093B 80 E4            [24] 2234 	sjmp	00193$
      00093D                       2235 00155$:
                                   2236 ;	life.c:208: (void)getchar();
      00093D 12r00r05         [24] 2237 	lcall	_getchar
                                   2238 ;	life.c:209: break;
      000940                       2239 00104$:
                                   2240 ;	life.c:213: if (i1) {
      000940 90r00r01         [24] 2241 	mov	dptr,#_i1
      000943 E0               [24] 2242 	movx	a,@dptr
      000944 60 25            [24] 2243 	jz	00203$
                                   2244 ;	life.c:214: printstr("BREAK\r\n");
      000946 7Dr47            [12] 2245 	mov	r5,#___str_9
      000948 7Es00            [12] 2246 	mov	r6,#(___str_9 >> 8)
      00094A 7F 80            [12] 2247 	mov	r7,#0x80
                                   2248 ;	life.c:48: return;
      00094C                       2249 00200$:
                                   2250 ;	life.c:46: for (; *s; s++) putchar(*s);
      00094C 8D 82            [24] 2251 	mov	dpl,r5
      00094E 8E 83            [24] 2252 	mov	dph,r6
      000950 8F F0            [24] 2253 	mov	b,r7
      000952 12r00r00         [24] 2254 	lcall	__gptrget
      000955 FC               [12] 2255 	mov	r4,a
      000956 60 10            [24] 2256 	jz	00157$
      000958 7B 00            [12] 2257 	mov	r3,#0x00
      00095A 8C 82            [24] 2258 	mov	dpl,r4
      00095C 8B 83            [24] 2259 	mov	dph,r3
      00095E 12r00r00         [24] 2260 	lcall	_putchar
      000961 0D               [12] 2261 	inc	r5
                                   2262 ;	life.c:214: printstr("BREAK\r\n");
      000962 BD 00 E7         [24] 2263 	cjne	r5,#0x00,00200$
      000965 0E               [12] 2264 	inc	r6
      000966 80 E4            [24] 2265 	sjmp	00200$
      000968                       2266 00157$:
                                   2267 ;	life.c:215: (void)getchar();
      000968 12r00r05         [24] 2268 	lcall	_getchar
      00096B                       2269 00203$:
                                   2270 ;	life.c:187: for (i0 = 0; !i0; ) {
      00096B 90r00r00         [24] 2271 	mov	dptr,#_i0
      00096E E0               [24] 2272 	movx	a,@dptr
      00096F 70 03            [24] 2273 	jnz	00453$
      000971 02r03r02         [24] 2274 	ljmp	00202$
      000974                       2275 00453$:
                                   2276 ;	life.c:219: EA = 0;
                                   2277 ;	assignBit
      000974 C2 AF            [12] 2278 	clr	_EA
                                   2279 ;	life.c:221: printstr("TERM\r\n");
      000976 7Dr4F            [12] 2280 	mov	r5,#___str_10
      000978 7Es00            [12] 2281 	mov	r6,#(___str_10 >> 8)
      00097A 7F 80            [12] 2282 	mov	r7,#0x80
                                   2283 ;	life.c:48: return;
      00097C                       2284 00205$:
                                   2285 ;	life.c:46: for (; *s; s++) putchar(*s);
      00097C 8D 82            [24] 2286 	mov	dpl,r5
      00097E 8E 83            [24] 2287 	mov	dph,r6
      000980 8F F0            [24] 2288 	mov	b,r7
      000982 12r00r00         [24] 2289 	lcall	__gptrget
      000985 FC               [12] 2290 	mov	r4,a
      000986 60 10            [24] 2291 	jz	00159$
      000988 7B 00            [12] 2292 	mov	r3,#0x00
      00098A 8C 82            [24] 2293 	mov	dpl,r4
      00098C 8B 83            [24] 2294 	mov	dph,r3
      00098E 12r00r00         [24] 2295 	lcall	_putchar
      000991 0D               [12] 2296 	inc	r5
                                   2297 ;	life.c:221: printstr("TERM\r\n");
      000992 BD 00 E7         [24] 2298 	cjne	r5,#0x00,00205$
      000995 0E               [12] 2299 	inc	r6
      000996 80 E4            [24] 2300 	sjmp	00205$
      000998                       2301 00159$:
                                   2302 ;	life.c:222: (void)getchar();
      000998 12r00r05         [24] 2303 	lcall	_getchar
                                   2304 ;	life.c:226: __endasm;
      00099B 02 00 00         [24] 2305 	ljmp	0
                                   2306 ;	life.c:227: }
      00099E 15 81            [12] 2307 	dec	sp
      0009A0 D0*00            [24] 2308 	pop	_bp
      0009A2 22               [24] 2309 	ret
                                   2310 	.area CSEG    (CODE)
                                   2311 	.area CONST   (CODE)
      000000                       2312 _digits:
      000000 30                    2313 	.db #0x30	; 48	'0'
      000001 31                    2314 	.db #0x31	; 49	'1'
      000002 32                    2315 	.db #0x32	; 50	'2'
      000003 33                    2316 	.db #0x33	; 51	'3'
      000004 34                    2317 	.db #0x34	; 52	'4'
      000005 35                    2318 	.db #0x35	; 53	'5'
      000006 36                    2319 	.db #0x36	; 54	'6'
      000007 37                    2320 	.db #0x37	; 55	'7'
      000008 38                    2321 	.db #0x38	; 56	'8'
      000009 39                    2322 	.db #0x39	; 57	'9'
      00000A 61                    2323 	.db #0x61	; 97	'a'
      00000B 62                    2324 	.db #0x62	; 98	'b'
      00000C 63                    2325 	.db #0x63	; 99	'c'
      00000D 64                    2326 	.db #0x64	; 100	'd'
      00000E 65                    2327 	.db #0x65	; 101	'e'
      00000F 66                    2328 	.db #0x66	; 102	'f'
                                   2329 	.area CONST   (CODE)
      000010                       2330 ___str_0:
      000010 1B                    2331 	.db 0x1b
      000011 5B 32 4A              2332 	.ascii "[2J"
      000014 1B                    2333 	.db 0x1b
      000015 5B 6D                 2334 	.ascii "[m"
      000017 00                    2335 	.db 0x00
                                   2336 	.area CSEG    (CODE)
                                   2337 	.area CONST   (CODE)
      000018                       2338 ___str_1:
      000018 0D                    2339 	.db 0x0d
      000019 0A                    2340 	.db 0x0a
      00001A 00                    2341 	.db 0x00
                                   2342 	.area CSEG    (CODE)
                                   2343 	.area CONST   (CODE)
      00001B                       2344 ___str_2:
      00001B 5B 5D                 2345 	.ascii "[]"
      00001D 00                    2346 	.db 0x00
                                   2347 	.area CSEG    (CODE)
                                   2348 	.area CONST   (CODE)
      00001E                       2349 ___str_3:
      00001E 23 23                 2350 	.ascii "##"
      000020 00                    2351 	.db 0x00
                                   2352 	.area CSEG    (CODE)
                                   2353 	.area CONST   (CODE)
      000021                       2354 ___str_4:
      000021 3E                    2355 	.ascii ">"
      000022 0D                    2356 	.db 0x0d
      000023 0A                    2357 	.db 0x0a
      000024 00                    2358 	.db 0x00
                                   2359 	.area CSEG    (CODE)
                                   2360 	.area CONST   (CODE)
      000025                       2361 ___str_5:
      000025 1B                    2362 	.db 0x1b
      000026 5B 32 4A              2363 	.ascii "[2J"
      000029 1B                    2364 	.db 0x1b
      00002A 5B 6D 49 4E 49 54     2365 	.ascii "[mINIT"
      000030 0D                    2366 	.db 0x0d
      000031 0A                    2367 	.db 0x0a
      000032 00                    2368 	.db 0x00
                                   2369 	.area CSEG    (CODE)
                                   2370 	.area CONST   (CODE)
      000033                       2371 ___str_6:
      000033 4C 4F 41 44           2372 	.ascii "LOAD"
      000037 0D                    2373 	.db 0x0d
      000038 0A                    2374 	.db 0x0a
      000039 00                    2375 	.db 0x00
                                   2376 	.area CSEG    (CODE)
                                   2377 	.area CONST   (CODE)
      00003A                       2378 ___str_7:
      00003A 52 44 59              2379 	.ascii "RDY"
      00003D 0D                    2380 	.db 0x0d
      00003E 0A                    2381 	.db 0x0a
      00003F 00                    2382 	.db 0x00
                                   2383 	.area CSEG    (CODE)
                                   2384 	.area CONST   (CODE)
      000040                       2385 ___str_8:
      000040 44 4F 4E 45           2386 	.ascii "DONE"
      000044 0D                    2387 	.db 0x0d
      000045 0A                    2388 	.db 0x0a
      000046 00                    2389 	.db 0x00
                                   2390 	.area CSEG    (CODE)
                                   2391 	.area CONST   (CODE)
      000047                       2392 ___str_9:
      000047 42 52 45 41 4B        2393 	.ascii "BREAK"
      00004C 0D                    2394 	.db 0x0d
      00004D 0A                    2395 	.db 0x0a
      00004E 00                    2396 	.db 0x00
                                   2397 	.area CSEG    (CODE)
                                   2398 	.area CONST   (CODE)
      00004F                       2399 ___str_10:
      00004F 54 45 52 4D           2400 	.ascii "TERM"
      000053 0D                    2401 	.db 0x0d
      000054 0A                    2402 	.db 0x0a
      000055 00                    2403 	.db 0x00
                                   2404 	.area CSEG    (CODE)
                                   2405 	.area XINIT   (CODE)
                                   2406 	.area CABS    (ABS,CODE)
