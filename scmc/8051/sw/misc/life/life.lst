                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int1
                                     13 	.globl _int0
                                     14 	.globl _printf
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _FL
                                     22 	.globl _P
                                     23 	.globl _TF2
                                     24 	.globl _EXF2
                                     25 	.globl _RCLK
                                     26 	.globl _TCLK
                                     27 	.globl _EXEN2
                                     28 	.globl _TR2
                                     29 	.globl _C_T2
                                     30 	.globl _CP_RL2
                                     31 	.globl _T2CON_7
                                     32 	.globl _T2CON_6
                                     33 	.globl _T2CON_5
                                     34 	.globl _T2CON_4
                                     35 	.globl _T2CON_3
                                     36 	.globl _T2CON_2
                                     37 	.globl _T2CON_1
                                     38 	.globl _T2CON_0
                                     39 	.globl _PT2
                                     40 	.globl _PS
                                     41 	.globl _PT1
                                     42 	.globl _PX1
                                     43 	.globl _PT0
                                     44 	.globl _PX0
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _EA
                                     62 	.globl _ET2
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _T2EX
                                     85 	.globl _T2
                                     86 	.globl _P1_7
                                     87 	.globl _P1_6
                                     88 	.globl _P1_5
                                     89 	.globl _P1_4
                                     90 	.globl _P1_3
                                     91 	.globl _P1_2
                                     92 	.globl _P1_1
                                     93 	.globl _P1_0
                                     94 	.globl _TF1
                                     95 	.globl _TR1
                                     96 	.globl _TF0
                                     97 	.globl _TR0
                                     98 	.globl _IE1
                                     99 	.globl _IT1
                                    100 	.globl _IE0
                                    101 	.globl _IT0
                                    102 	.globl _P0_7
                                    103 	.globl _P0_6
                                    104 	.globl _P0_5
                                    105 	.globl _P0_4
                                    106 	.globl _P0_3
                                    107 	.globl _P0_2
                                    108 	.globl _P0_1
                                    109 	.globl _P0_0
                                    110 	.globl _B
                                    111 	.globl _A
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _TH2
                                    115 	.globl _TL2
                                    116 	.globl _RCAP2H
                                    117 	.globl _RCAP2L
                                    118 	.globl _T2MOD
                                    119 	.globl _T2CON
                                    120 	.globl _IP
                                    121 	.globl _P3
                                    122 	.globl _IE
                                    123 	.globl _P2
                                    124 	.globl _SBUF
                                    125 	.globl _SCON
                                    126 	.globl _P1
                                    127 	.globl _TH1
                                    128 	.globl _TH0
                                    129 	.globl _TL1
                                    130 	.globl _TL0
                                    131 	.globl _TMOD
                                    132 	.globl _TCON
                                    133 	.globl _PCON
                                    134 	.globl _DPH
                                    135 	.globl _DPL
                                    136 	.globl _SP
                                    137 	.globl _P0
                                    138 	.globl _c
                                    139 	.globl _fixed
                                    140 	.globl _j
                                    141 	.globl _generation
                                    142 	.globl _n
                                    143 	.globl _y1
                                    144 	.globl _x1
                                    145 	.globl _y
                                    146 	.globl _x
                                    147 	.globl _nu
                                    148 	.globl _u
                                    149 	.globl _i1
                                    150 	.globl _i0
                                    151 	.globl _putchar
                                    152 	.globl _getchar
                                    153 ;--------------------------------------------------------
                                    154 ; special function registers
                                    155 ;--------------------------------------------------------
                                    156 	.area RSEG    (ABS,DATA)
      000000                        157 	.org 0x0000
                           000080   158 _P0	=	0x0080
                           000081   159 _SP	=	0x0081
                           000082   160 _DPL	=	0x0082
                           000083   161 _DPH	=	0x0083
                           000087   162 _PCON	=	0x0087
                           000088   163 _TCON	=	0x0088
                           000089   164 _TMOD	=	0x0089
                           00008A   165 _TL0	=	0x008a
                           00008B   166 _TL1	=	0x008b
                           00008C   167 _TH0	=	0x008c
                           00008D   168 _TH1	=	0x008d
                           000090   169 _P1	=	0x0090
                           000098   170 _SCON	=	0x0098
                           000099   171 _SBUF	=	0x0099
                           0000A0   172 _P2	=	0x00a0
                           0000A8   173 _IE	=	0x00a8
                           0000B0   174 _P3	=	0x00b0
                           0000B8   175 _IP	=	0x00b8
                           0000C8   176 _T2CON	=	0x00c8
                           0000C9   177 _T2MOD	=	0x00c9
                           0000CA   178 _RCAP2L	=	0x00ca
                           0000CB   179 _RCAP2H	=	0x00cb
                           0000CC   180 _TL2	=	0x00cc
                           0000CD   181 _TH2	=	0x00cd
                           0000D0   182 _PSW	=	0x00d0
                           0000E0   183 _ACC	=	0x00e0
                           0000E0   184 _A	=	0x00e0
                           0000F0   185 _B	=	0x00f0
                                    186 ;--------------------------------------------------------
                                    187 ; special function bits
                                    188 ;--------------------------------------------------------
                                    189 	.area RSEG    (ABS,DATA)
      000000                        190 	.org 0x0000
                           000080   191 _P0_0	=	0x0080
                           000081   192 _P0_1	=	0x0081
                           000082   193 _P0_2	=	0x0082
                           000083   194 _P0_3	=	0x0083
                           000084   195 _P0_4	=	0x0084
                           000085   196 _P0_5	=	0x0085
                           000086   197 _P0_6	=	0x0086
                           000087   198 _P0_7	=	0x0087
                           000088   199 _IT0	=	0x0088
                           000089   200 _IE0	=	0x0089
                           00008A   201 _IT1	=	0x008a
                           00008B   202 _IE1	=	0x008b
                           00008C   203 _TR0	=	0x008c
                           00008D   204 _TF0	=	0x008d
                           00008E   205 _TR1	=	0x008e
                           00008F   206 _TF1	=	0x008f
                           000090   207 _P1_0	=	0x0090
                           000091   208 _P1_1	=	0x0091
                           000092   209 _P1_2	=	0x0092
                           000093   210 _P1_3	=	0x0093
                           000094   211 _P1_4	=	0x0094
                           000095   212 _P1_5	=	0x0095
                           000096   213 _P1_6	=	0x0096
                           000097   214 _P1_7	=	0x0097
                           000090   215 _T2	=	0x0090
                           000091   216 _T2EX	=	0x0091
                           000098   217 _RI	=	0x0098
                           000099   218 _TI	=	0x0099
                           00009A   219 _RB8	=	0x009a
                           00009B   220 _TB8	=	0x009b
                           00009C   221 _REN	=	0x009c
                           00009D   222 _SM2	=	0x009d
                           00009E   223 _SM1	=	0x009e
                           00009F   224 _SM0	=	0x009f
                           0000A0   225 _P2_0	=	0x00a0
                           0000A1   226 _P2_1	=	0x00a1
                           0000A2   227 _P2_2	=	0x00a2
                           0000A3   228 _P2_3	=	0x00a3
                           0000A4   229 _P2_4	=	0x00a4
                           0000A5   230 _P2_5	=	0x00a5
                           0000A6   231 _P2_6	=	0x00a6
                           0000A7   232 _P2_7	=	0x00a7
                           0000A8   233 _EX0	=	0x00a8
                           0000A9   234 _ET0	=	0x00a9
                           0000AA   235 _EX1	=	0x00aa
                           0000AB   236 _ET1	=	0x00ab
                           0000AC   237 _ES	=	0x00ac
                           0000AD   238 _ET2	=	0x00ad
                           0000AF   239 _EA	=	0x00af
                           0000B0   240 _P3_0	=	0x00b0
                           0000B1   241 _P3_1	=	0x00b1
                           0000B2   242 _P3_2	=	0x00b2
                           0000B3   243 _P3_3	=	0x00b3
                           0000B4   244 _P3_4	=	0x00b4
                           0000B5   245 _P3_5	=	0x00b5
                           0000B6   246 _P3_6	=	0x00b6
                           0000B7   247 _P3_7	=	0x00b7
                           0000B0   248 _RXD	=	0x00b0
                           0000B1   249 _TXD	=	0x00b1
                           0000B2   250 _INT0	=	0x00b2
                           0000B3   251 _INT1	=	0x00b3
                           0000B4   252 _T0	=	0x00b4
                           0000B5   253 _T1	=	0x00b5
                           0000B6   254 _WR	=	0x00b6
                           0000B7   255 _RD	=	0x00b7
                           0000B8   256 _PX0	=	0x00b8
                           0000B9   257 _PT0	=	0x00b9
                           0000BA   258 _PX1	=	0x00ba
                           0000BB   259 _PT1	=	0x00bb
                           0000BC   260 _PS	=	0x00bc
                           0000BD   261 _PT2	=	0x00bd
                           0000C8   262 _T2CON_0	=	0x00c8
                           0000C9   263 _T2CON_1	=	0x00c9
                           0000CA   264 _T2CON_2	=	0x00ca
                           0000CB   265 _T2CON_3	=	0x00cb
                           0000CC   266 _T2CON_4	=	0x00cc
                           0000CD   267 _T2CON_5	=	0x00cd
                           0000CE   268 _T2CON_6	=	0x00ce
                           0000CF   269 _T2CON_7	=	0x00cf
                           0000C8   270 _CP_RL2	=	0x00c8
                           0000C9   271 _C_T2	=	0x00c9
                           0000CA   272 _TR2	=	0x00ca
                           0000CB   273 _EXEN2	=	0x00cb
                           0000CC   274 _TCLK	=	0x00cc
                           0000CD   275 _RCLK	=	0x00cd
                           0000CE   276 _EXF2	=	0x00ce
                           0000CF   277 _TF2	=	0x00cf
                           0000D0   278 _P	=	0x00d0
                           0000D1   279 _FL	=	0x00d1
                           0000D2   280 _OV	=	0x00d2
                           0000D3   281 _RS0	=	0x00d3
                           0000D4   282 _RS1	=	0x00d4
                           0000D5   283 _F0	=	0x00d5
                           0000D6   284 _AC	=	0x00d6
                           0000D7   285 _CY	=	0x00d7
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable register banks
                                    288 ;--------------------------------------------------------
                                    289 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        290 	.ds 8
                                    291 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        292 	.ds 8
                                    293 ;--------------------------------------------------------
                                    294 ; overlayable bit register bank
                                    295 ;--------------------------------------------------------
                                    296 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        297 bits:
      000000                        298 	.ds 1
                           008000   299 	b0 = bits[0]
                           008100   300 	b1 = bits[1]
                           008200   301 	b2 = bits[2]
                           008300   302 	b3 = bits[3]
                           008400   303 	b4 = bits[4]
                           008500   304 	b5 = bits[5]
                           008600   305 	b6 = bits[6]
                           008700   306 	b7 = bits[7]
                                    307 ;--------------------------------------------------------
                                    308 ; internal ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area DSEG    (DATA)
                                    311 ;--------------------------------------------------------
                                    312 ; overlayable items in internal ram 
                                    313 ;--------------------------------------------------------
                                    314 ;--------------------------------------------------------
                                    315 ; Stack segment in internal ram 
                                    316 ;--------------------------------------------------------
                                    317 	.area	SSEG
      000000                        318 __start__stack:
      000000                        319 	.ds	1
                                    320 
                                    321 ;--------------------------------------------------------
                                    322 ; indirectly addressable internal ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area ISEG    (DATA)
                                    325 ;--------------------------------------------------------
                                    326 ; absolute internal ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area IABS    (ABS,DATA)
                                    329 	.area IABS    (ABS,DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; bit data
                                    332 ;--------------------------------------------------------
                                    333 	.area BSEG    (BIT)
                                    334 ;--------------------------------------------------------
                                    335 ; paged external ram data
                                    336 ;--------------------------------------------------------
                                    337 	.area PSEG    (PAG,XDATA)
                                    338 ;--------------------------------------------------------
                                    339 ; external ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area XSEG    (XDATA)
      000000                        342 _i0::
      000000                        343 	.ds 2
      000002                        344 _i1::
      000002                        345 	.ds 2
      000004                        346 _u::
      000004                        347 	.ds 1024
      000404                        348 _nu::
      000404                        349 	.ds 1024
      000804                        350 _x::
      000804                        351 	.ds 2
      000806                        352 _y::
      000806                        353 	.ds 2
      000808                        354 _x1::
      000808                        355 	.ds 2
      00080A                        356 _y1::
      00080A                        357 	.ds 2
      00080C                        358 _n::
      00080C                        359 	.ds 2
      00080E                        360 _generation::
      00080E                        361 	.ds 8
      000816                        362 _j::
      000816                        363 	.ds 2
      000818                        364 _fixed::
      000818                        365 	.ds 2
      00081A                        366 _c::
      00081A                        367 	.ds 2
                                    368 ;--------------------------------------------------------
                                    369 ; absolute external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XABS    (ABS,XDATA)
                                    372 ;--------------------------------------------------------
                                    373 ; external initialized ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XISEG   (XDATA)
                                    376 	.area HOME    (CODE)
                                    377 	.area GSINIT0 (CODE)
                                    378 	.area GSINIT1 (CODE)
                                    379 	.area GSINIT2 (CODE)
                                    380 	.area GSINIT3 (CODE)
                                    381 	.area GSINIT4 (CODE)
                                    382 	.area GSINIT5 (CODE)
                                    383 	.area GSINIT  (CODE)
                                    384 	.area GSFINAL (CODE)
                                    385 	.area CSEG    (CODE)
                                    386 ;--------------------------------------------------------
                                    387 ; interrupt vector 
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
      000000                        390 __interrupt_vect:
      000000 02r00r00         [24]  391 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0D         [24]  392 	ljmp	_int0
      000006                        393 	.ds	5
      00000B 32               [24]  394 	reti
      00000C                        395 	.ds	7
      000013 02r00r23         [24]  396 	ljmp	_int1
                                    397 ;--------------------------------------------------------
                                    398 ; global & static initialisations
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
                                    401 	.area GSINIT  (CODE)
                                    402 	.area GSFINAL (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.globl __sdcc_gsinit_startup
                                    405 	.globl __sdcc_program_startup
                                    406 	.globl __start__stack
                                    407 	.globl __mcs51_genXINIT
                                    408 	.globl __mcs51_genXRAMCLEAR
                                    409 	.globl __mcs51_genRAMCLEAR
                                    410 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  411 	ljmp	__sdcc_program_startup
                                    412 ;--------------------------------------------------------
                                    413 ; Home
                                    414 ;--------------------------------------------------------
                                    415 	.area HOME    (CODE)
                                    416 	.area HOME    (CODE)
      000016                        417 __sdcc_program_startup:
      000016 02r00r39         [24]  418 	ljmp	_main
                                    419 ;	return from main will return to caller
                                    420 ;--------------------------------------------------------
                                    421 ; code
                                    422 ;--------------------------------------------------------
                                    423 	.area CSEG    (CODE)
                                    424 ;------------------------------------------------------------
                                    425 ;Allocation info for local variables in function 'putchar'
                                    426 ;------------------------------------------------------------
                                    427 ;c                         Allocated to registers 
                                    428 ;------------------------------------------------------------
                                    429 ;	life.c:7: int putchar(int c) __naked {
                                    430 ;	-----------------------------------------
                                    431 ;	 function putchar
                                    432 ;	-----------------------------------------
      000000                        433 _putchar:
                                    434 ;	naked function: no prologue.
                                    435 ;	life.c:12: __endasm;
      000000 E5 82            [12]  436 	mov	a, dpl
      000002 02 00 30         [24]  437 	ljmp	0x0030
                                    438 ;	life.c:13: }
                                    439 ;	naked function: no epilogue.
                                    440 ;------------------------------------------------------------
                                    441 ;Allocation info for local variables in function 'getchar'
                                    442 ;------------------------------------------------------------
                                    443 ;	life.c:15: int getchar(void) {
                                    444 ;	-----------------------------------------
                                    445 ;	 function getchar
                                    446 ;	-----------------------------------------
      000005                        447 _getchar:
                           000007   448 	ar7 = 0x07
                           000006   449 	ar6 = 0x06
                           000005   450 	ar5 = 0x05
                           000004   451 	ar4 = 0x04
                           000003   452 	ar3 = 0x03
                           000002   453 	ar2 = 0x02
                           000001   454 	ar1 = 0x01
                           000000   455 	ar0 = 0x00
                                    456 ;	life.c:20: __endasm;
      000005 12 00 32         [24]  457 	lcall	0x0032
      000008 C2 83            [12]  458 	clr	dph
      00000A F5 82            [12]  459 	mov	dpl, a
                                    460 ;	life.c:21: }
      00000C 22               [24]  461 	ret
                                    462 ;------------------------------------------------------------
                                    463 ;Allocation info for local variables in function 'int0'
                                    464 ;------------------------------------------------------------
                                    465 ;	life.c:32: void int0(void) __interrupt 0 __using 1 {
                                    466 ;	-----------------------------------------
                                    467 ;	 function int0
                                    468 ;	-----------------------------------------
      00000D                        469 _int0:
                           00000F   470 	ar7 = 0x0f
                           00000E   471 	ar6 = 0x0e
                           00000D   472 	ar5 = 0x0d
                           00000C   473 	ar4 = 0x0c
                           00000B   474 	ar3 = 0x0b
                           00000A   475 	ar2 = 0x0a
                           000009   476 	ar1 = 0x09
                           000008   477 	ar0 = 0x08
      00000D C0 E0            [24]  478 	push	acc
      00000F C0 82            [24]  479 	push	dpl
      000011 C0 83            [24]  480 	push	dph
                                    481 ;	life.c:33: i0 = 1;
      000013 90r00r00         [24]  482 	mov	dptr,#_i0
      000016 74 01            [12]  483 	mov	a,#0x01
      000018 F0               [24]  484 	movx	@dptr,a
      000019 E4               [12]  485 	clr	a
      00001A A3               [24]  486 	inc	dptr
      00001B F0               [24]  487 	movx	@dptr,a
                                    488 ;	life.c:34: }
      00001C D0 83            [24]  489 	pop	dph
      00001E D0 82            [24]  490 	pop	dpl
      000020 D0 E0            [24]  491 	pop	acc
      000022 32               [24]  492 	reti
                                    493 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    494 ;	eliminated unneeded push/pop psw
                                    495 ;	eliminated unneeded push/pop b
                                    496 ;------------------------------------------------------------
                                    497 ;Allocation info for local variables in function 'int1'
                                    498 ;------------------------------------------------------------
                                    499 ;	life.c:37: void int1(void) __interrupt 2 __using 1 {
                                    500 ;	-----------------------------------------
                                    501 ;	 function int1
                                    502 ;	-----------------------------------------
      000023                        503 _int1:
      000023 C0 E0            [24]  504 	push	acc
      000025 C0 82            [24]  505 	push	dpl
      000027 C0 83            [24]  506 	push	dph
                                    507 ;	life.c:38: i1 = 1;
      000029 90r00r02         [24]  508 	mov	dptr,#_i1
      00002C 74 01            [12]  509 	mov	a,#0x01
      00002E F0               [24]  510 	movx	@dptr,a
      00002F E4               [12]  511 	clr	a
      000030 A3               [24]  512 	inc	dptr
      000031 F0               [24]  513 	movx	@dptr,a
                                    514 ;	life.c:39: }
      000032 D0 83            [24]  515 	pop	dph
      000034 D0 82            [24]  516 	pop	dpl
      000036 D0 E0            [24]  517 	pop	acc
      000038 32               [24]  518 	reti
                                    519 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    520 ;	eliminated unneeded push/pop psw
                                    521 ;	eliminated unneeded push/pop b
                                    522 ;------------------------------------------------------------
                                    523 ;Allocation info for local variables in function 'main'
                                    524 ;------------------------------------------------------------
                                    525 ;	life.c:108: void main(void) {
                                    526 ;	-----------------------------------------
                                    527 ;	 function main
                                    528 ;	-----------------------------------------
      000039                        529 _main:
                           000007   530 	ar7 = 0x07
                           000006   531 	ar6 = 0x06
                           000005   532 	ar5 = 0x05
                           000004   533 	ar4 = 0x04
                           000003   534 	ar3 = 0x03
                           000002   535 	ar2 = 0x02
                           000001   536 	ar1 = 0x01
                           000000   537 	ar0 = 0x00
                                    538 ;	life.c:109: i0 = i1 = 0;
      000039 90r00r02         [24]  539 	mov	dptr,#_i1
      00003C E4               [12]  540 	clr	a
      00003D F0               [24]  541 	movx	@dptr,a
      00003E A3               [24]  542 	inc	dptr
      00003F F0               [24]  543 	movx	@dptr,a
      000040 90r00r00         [24]  544 	mov	dptr,#_i0
      000043 F0               [24]  545 	movx	@dptr,a
      000044 A3               [24]  546 	inc	dptr
      000045 F0               [24]  547 	movx	@dptr,a
                                    548 ;	life.c:111: IT0 = 1;
                                    549 ;	assignBit
      000046 D2 88            [12]  550 	setb	_IT0
                                    551 ;	life.c:112: IT1 = 1;
                                    552 ;	assignBit
      000048 D2 8A            [12]  553 	setb	_IT1
                                    554 ;	life.c:113: EX0 = 1;
                                    555 ;	assignBit
      00004A D2 A8            [12]  556 	setb	_EX0
                                    557 ;	life.c:114: EX1 = 1;
                                    558 ;	assignBit
      00004C D2 AA            [12]  559 	setb	_EX1
                                    560 ;	life.c:115: EA = 1;
                                    561 ;	assignBit
      00004E D2 AF            [12]  562 	setb	_EA
                                    563 ;	life.c:117: while (!i0) {
      000050                        564 00111$:
      000050 90r00r00         [24]  565 	mov	dptr,#_i0
      000053 E0               [24]  566 	movx	a,@dptr
      000054 F5 F0            [12]  567 	mov	b,a
      000056 A3               [24]  568 	inc	dptr
      000057 E0               [24]  569 	movx	a,@dptr
      000058 45 F0            [12]  570 	orl	a,b
      00005A 60 03            [24]  571 	jz	00339$
      00005C 02r06rB3         [24]  572 	ljmp	00113$
      00005F                        573 00339$:
                                    574 ;	life.c:118: printf("\033[2J\033[mINIT\n\r");
      00005F 74r1E            [12]  575 	mov	a,#___str_5
      000061 C0 E0            [24]  576 	push	acc
      000063 74s00            [12]  577 	mov	a,#(___str_5 >> 8)
      000065 C0 E0            [24]  578 	push	acc
      000067 74 80            [12]  579 	mov	a,#0x80
      000069 C0 E0            [24]  580 	push	acc
      00006B 12r00r00         [24]  581 	lcall	_printf
      00006E 15 81            [12]  582 	dec	sp
      000070 15 81            [12]  583 	dec	sp
      000072 15 81            [12]  584 	dec	sp
                                    585 ;	life.c:119: for (y = 0; y < H; y++)
      000074 90r08r06         [24]  586 	mov	dptr,#_y
      000077 E4               [12]  587 	clr	a
      000078 F0               [24]  588 	movx	@dptr,a
      000079 A3               [24]  589 	inc	dptr
      00007A F0               [24]  590 	movx	@dptr,a
      00007B                        591 00145$:
                                    592 ;	life.c:120: for (x = 0; x < W; x++) {
      00007B 90r08r04         [24]  593 	mov	dptr,#_x
      00007E E4               [12]  594 	clr	a
      00007F F0               [24]  595 	movx	@dptr,a
      000080 A3               [24]  596 	inc	dptr
      000081 F0               [24]  597 	movx	@dptr,a
      000082                        598 00143$:
                                    599 ;	life.c:121: c = getchar();
      000082 12r00r05         [24]  600 	lcall	_getchar
      000085 AE 82            [24]  601 	mov	r6,dpl
      000087 AF 83            [24]  602 	mov	r7,dph
      000089 90r08r1A         [24]  603 	mov	dptr,#_c
      00008C EE               [12]  604 	mov	a,r6
      00008D F0               [24]  605 	movx	@dptr,a
      00008E EF               [12]  606 	mov	a,r7
      00008F A3               [24]  607 	inc	dptr
      000090 F0               [24]  608 	movx	@dptr,a
                                    609 ;	life.c:122: u[y][x] = c & 1;
      000091 90r08r06         [24]  610 	mov	dptr,#_y
      000094 E0               [24]  611 	movx	a,@dptr
      000095 FC               [12]  612 	mov	r4,a
      000096 A3               [24]  613 	inc	dptr
      000097 E0               [24]  614 	movx	a,@dptr
      000098 C4               [12]  615 	swap	a
      000099 23               [12]  616 	rl	a
      00009A 54 E0            [12]  617 	anl	a,#0xe0
      00009C CC               [12]  618 	xch	a,r4
      00009D C4               [12]  619 	swap	a
      00009E 23               [12]  620 	rl	a
      00009F CC               [12]  621 	xch	a,r4
      0000A0 6C               [12]  622 	xrl	a,r4
      0000A1 CC               [12]  623 	xch	a,r4
      0000A2 54 E0            [12]  624 	anl	a,#0xe0
      0000A4 CC               [12]  625 	xch	a,r4
      0000A5 6C               [12]  626 	xrl	a,r4
      0000A6 FD               [12]  627 	mov	r5,a
      0000A7 EC               [12]  628 	mov	a,r4
      0000A8 24r04            [12]  629 	add	a,#_u
      0000AA FC               [12]  630 	mov	r4,a
      0000AB ED               [12]  631 	mov	a,r5
      0000AC 34s00            [12]  632 	addc	a,#(_u >> 8)
      0000AE FD               [12]  633 	mov	r5,a
      0000AF 90r08r04         [24]  634 	mov	dptr,#_x
      0000B2 E0               [24]  635 	movx	a,@dptr
      0000B3 FA               [12]  636 	mov	r2,a
      0000B4 A3               [24]  637 	inc	dptr
      0000B5 E0               [24]  638 	movx	a,@dptr
      0000B6 FB               [12]  639 	mov	r3,a
      0000B7 EA               [12]  640 	mov	a,r2
      0000B8 2C               [12]  641 	add	a,r4
      0000B9 F5 82            [12]  642 	mov	dpl,a
      0000BB EB               [12]  643 	mov	a,r3
      0000BC 3D               [12]  644 	addc	a,r5
      0000BD F5 83            [12]  645 	mov	dph,a
      0000BF 53 06 01         [24]  646 	anl	ar6,#0x01
      0000C2 EE               [12]  647 	mov	a,r6
      0000C3 F0               [24]  648 	movx	@dptr,a
                                    649 ;	life.c:120: for (x = 0; x < W; x++) {
      0000C4 90r08r04         [24]  650 	mov	dptr,#_x
      0000C7 E0               [24]  651 	movx	a,@dptr
      0000C8 24 01            [12]  652 	add	a,#0x01
      0000CA F0               [24]  653 	movx	@dptr,a
      0000CB A3               [24]  654 	inc	dptr
      0000CC E0               [24]  655 	movx	a,@dptr
      0000CD 34 00            [12]  656 	addc	a,#0x00
      0000CF F0               [24]  657 	movx	@dptr,a
      0000D0 90r08r04         [24]  658 	mov	dptr,#_x
      0000D3 E0               [24]  659 	movx	a,@dptr
      0000D4 FE               [12]  660 	mov	r6,a
      0000D5 A3               [24]  661 	inc	dptr
      0000D6 E0               [24]  662 	movx	a,@dptr
      0000D7 FF               [12]  663 	mov	r7,a
      0000D8 C3               [12]  664 	clr	c
      0000D9 EE               [12]  665 	mov	a,r6
      0000DA 94 20            [12]  666 	subb	a,#0x20
      0000DC EF               [12]  667 	mov	a,r7
      0000DD 64 80            [12]  668 	xrl	a,#0x80
      0000DF 94 80            [12]  669 	subb	a,#0x80
      0000E1 40 9F            [24]  670 	jc	00143$
                                    671 ;	life.c:119: for (y = 0; y < H; y++)
      0000E3 90r08r06         [24]  672 	mov	dptr,#_y
      0000E6 E0               [24]  673 	movx	a,@dptr
      0000E7 24 01            [12]  674 	add	a,#0x01
      0000E9 F0               [24]  675 	movx	@dptr,a
      0000EA A3               [24]  676 	inc	dptr
      0000EB E0               [24]  677 	movx	a,@dptr
      0000EC 34 00            [12]  678 	addc	a,#0x00
      0000EE F0               [24]  679 	movx	@dptr,a
      0000EF 90r08r06         [24]  680 	mov	dptr,#_y
      0000F2 E0               [24]  681 	movx	a,@dptr
      0000F3 FE               [12]  682 	mov	r6,a
      0000F4 A3               [24]  683 	inc	dptr
      0000F5 E0               [24]  684 	movx	a,@dptr
      0000F6 FF               [12]  685 	mov	r7,a
      0000F7 C3               [12]  686 	clr	c
      0000F8 EE               [12]  687 	mov	a,r6
      0000F9 94 20            [12]  688 	subb	a,#0x20
      0000FB EF               [12]  689 	mov	a,r7
      0000FC 64 80            [12]  690 	xrl	a,#0x80
      0000FE 94 80            [12]  691 	subb	a,#0x80
      000100 50 03            [24]  692 	jnc	00341$
      000102 02r00r7B         [24]  693 	ljmp	00145$
      000105                        694 00341$:
                                    695 ;	life.c:124: printf("RDY\n\r");
      000105 74r2C            [12]  696 	mov	a,#___str_6
      000107 C0 E0            [24]  697 	push	acc
      000109 74s00            [12]  698 	mov	a,#(___str_6 >> 8)
      00010B C0 E0            [24]  699 	push	acc
      00010D 74 80            [12]  700 	mov	a,#0x80
      00010F C0 E0            [24]  701 	push	acc
      000111 12r00r00         [24]  702 	lcall	_printf
      000114 15 81            [12]  703 	dec	sp
      000116 15 81            [12]  704 	dec	sp
      000118 15 81            [12]  705 	dec	sp
                                    706 ;	life.c:125: (void)getchar();
      00011A 12r00r05         [24]  707 	lcall	_getchar
                                    708 ;	life.c:42: for (j = 0; j < 4; j++)
      00011D 90r08r16         [24]  709 	mov	dptr,#_j
      000120 E4               [12]  710 	clr	a
      000121 F0               [24]  711 	movx	@dptr,a
      000122 A3               [24]  712 	inc	dptr
      000123 F0               [24]  713 	movx	@dptr,a
      000124                        714 00147$:
                                    715 ;	life.c:43: generation[j] = 0;
      000124 90r08r16         [24]  716 	mov	dptr,#_j
      000127 E0               [24]  717 	movx	a,@dptr
      000128 FE               [12]  718 	mov	r6,a
      000129 A3               [24]  719 	inc	dptr
      00012A E0               [24]  720 	movx	a,@dptr
      00012B FF               [12]  721 	mov	r7,a
      00012C EE               [12]  722 	mov	a,r6
      00012D 2E               [12]  723 	add	a,r6
      00012E FE               [12]  724 	mov	r6,a
      00012F EF               [12]  725 	mov	a,r7
      000130 33               [12]  726 	rlc	a
      000131 FF               [12]  727 	mov	r7,a
      000132 EE               [12]  728 	mov	a,r6
      000133 24r0E            [12]  729 	add	a,#_generation
      000135 F5 82            [12]  730 	mov	dpl,a
      000137 EF               [12]  731 	mov	a,r7
      000138 34s08            [12]  732 	addc	a,#(_generation >> 8)
      00013A F5 83            [12]  733 	mov	dph,a
      00013C E4               [12]  734 	clr	a
      00013D F0               [24]  735 	movx	@dptr,a
      00013E A3               [24]  736 	inc	dptr
      00013F F0               [24]  737 	movx	@dptr,a
                                    738 ;	life.c:42: for (j = 0; j < 4; j++)
      000140 90r08r16         [24]  739 	mov	dptr,#_j
      000143 E0               [24]  740 	movx	a,@dptr
      000144 24 01            [12]  741 	add	a,#0x01
      000146 F0               [24]  742 	movx	@dptr,a
      000147 A3               [24]  743 	inc	dptr
      000148 E0               [24]  744 	movx	a,@dptr
      000149 34 00            [12]  745 	addc	a,#0x00
      00014B F0               [24]  746 	movx	@dptr,a
      00014C 90r08r16         [24]  747 	mov	dptr,#_j
      00014F E0               [24]  748 	movx	a,@dptr
      000150 FE               [12]  749 	mov	r6,a
      000151 A3               [24]  750 	inc	dptr
      000152 E0               [24]  751 	movx	a,@dptr
      000153 FF               [12]  752 	mov	r7,a
      000154 C3               [12]  753 	clr	c
      000155 EE               [12]  754 	mov	a,r6
      000156 94 04            [12]  755 	subb	a,#0x04
      000158 EF               [12]  756 	mov	a,r7
      000159 64 80            [12]  757 	xrl	a,#0x80
      00015B 94 80            [12]  758 	subb	a,#0x80
      00015D 40 C5            [24]  759 	jc	00147$
                                    760 ;	life.c:129: i1 = 0;
      00015F 90r00r02         [24]  761 	mov	dptr,#_i1
      000162 E4               [12]  762 	clr	a
      000163 F0               [24]  763 	movx	@dptr,a
      000164 A3               [24]  764 	inc	dptr
      000165 F0               [24]  765 	movx	@dptr,a
                                    766 ;	life.c:130: while (!i0 && !i1) {
      000166                        767 00106$:
      000166 90r00r00         [24]  768 	mov	dptr,#_i0
      000169 E0               [24]  769 	movx	a,@dptr
      00016A F5 F0            [12]  770 	mov	b,a
      00016C A3               [24]  771 	inc	dptr
      00016D E0               [24]  772 	movx	a,@dptr
      00016E 45 F0            [12]  773 	orl	a,b
      000170 60 03            [24]  774 	jz	00343$
      000172 02r06r89         [24]  775 	ljmp	00108$
      000175                        776 00343$:
      000175 90r00r02         [24]  777 	mov	dptr,#_i1
      000178 E0               [24]  778 	movx	a,@dptr
      000179 F5 F0            [12]  779 	mov	b,a
      00017B A3               [24]  780 	inc	dptr
      00017C E0               [24]  781 	movx	a,@dptr
      00017D 45 F0            [12]  782 	orl	a,b
      00017F 60 03            [24]  783 	jz	00344$
      000181 02r06r89         [24]  784 	ljmp	00108$
      000184                        785 00344$:
                                    786 ;	life.c:67: printf("\033[2J\033[m");
      000184 74r05            [12]  787 	mov	a,#___str_1
      000186 C0 E0            [24]  788 	push	acc
      000188 74s00            [12]  789 	mov	a,#(___str_1 >> 8)
      00018A C0 E0            [24]  790 	push	acc
      00018C 74 80            [12]  791 	mov	a,#0x80
      00018E C0 E0            [24]  792 	push	acc
      000190 12r00r00         [24]  793 	lcall	_printf
      000193 15 81            [12]  794 	dec	sp
      000195 15 81            [12]  795 	dec	sp
      000197 15 81            [12]  796 	dec	sp
                                    797 ;	life.c:58: for (j = 0; j < 4; j++) {
      000199 90r08r16         [24]  798 	mov	dptr,#_j
      00019C E4               [12]  799 	clr	a
      00019D F0               [24]  800 	movx	@dptr,a
      00019E A3               [24]  801 	inc	dptr
      00019F F0               [24]  802 	movx	@dptr,a
      0001A0                        803 00149$:
                                    804 ;	life.c:59: printf("%04x", generation[3 - j]);
      0001A0 90r08r16         [24]  805 	mov	dptr,#_j
      0001A3 E0               [24]  806 	movx	a,@dptr
      0001A4 FE               [12]  807 	mov	r6,a
      0001A5 A3               [24]  808 	inc	dptr
      0001A6 E0               [24]  809 	movx	a,@dptr
      0001A7 74 03            [12]  810 	mov	a,#0x03
      0001A9 C3               [12]  811 	clr	c
      0001AA 9E               [12]  812 	subb	a,r6
      0001AB FE               [12]  813 	mov	r6,a
      0001AC C2 D5            [12]  814 	clr	F0
      0001AE 75 F0 02         [24]  815 	mov	b,#0x02
      0001B1 EE               [12]  816 	mov	a,r6
      0001B2 30 E7 04         [24]  817 	jnb	acc.7,00345$
      0001B5 B2 D5            [12]  818 	cpl	F0
      0001B7 F4               [12]  819 	cpl	a
      0001B8 04               [12]  820 	inc	a
      0001B9                        821 00345$:
      0001B9 A4               [48]  822 	mul	ab
      0001BA 30 D5 0A         [24]  823 	jnb	F0,00346$
      0001BD F4               [12]  824 	cpl	a
      0001BE 24 01            [12]  825 	add	a,#0x01
      0001C0 C5 F0            [12]  826 	xch	a,b
      0001C2 F4               [12]  827 	cpl	a
      0001C3 34 00            [12]  828 	addc	a,#0x00
      0001C5 C5 F0            [12]  829 	xch	a,b
      0001C7                        830 00346$:
      0001C7 24r0E            [12]  831 	add	a,#_generation
      0001C9 F5 82            [12]  832 	mov	dpl,a
      0001CB 74s08            [12]  833 	mov	a,#(_generation >> 8)
      0001CD 35 F0            [12]  834 	addc	a,b
      0001CF F5 83            [12]  835 	mov	dph,a
      0001D1 E0               [24]  836 	movx	a,@dptr
      0001D2 FE               [12]  837 	mov	r6,a
      0001D3 A3               [24]  838 	inc	dptr
      0001D4 E0               [24]  839 	movx	a,@dptr
      0001D5 FF               [12]  840 	mov	r7,a
      0001D6 C0 06            [24]  841 	push	ar6
      0001D8 C0 07            [24]  842 	push	ar7
      0001DA 74r00            [12]  843 	mov	a,#___str_0
      0001DC C0 E0            [24]  844 	push	acc
      0001DE 74s00            [12]  845 	mov	a,#(___str_0 >> 8)
      0001E0 C0 E0            [24]  846 	push	acc
      0001E2 74 80            [12]  847 	mov	a,#0x80
      0001E4 C0 E0            [24]  848 	push	acc
      0001E6 12r00r00         [24]  849 	lcall	_printf
      0001E9 E5 81            [12]  850 	mov	a,sp
      0001EB 24 FB            [12]  851 	add	a,#0xfb
      0001ED F5 81            [12]  852 	mov	sp,a
                                    853 ;	life.c:60: if (j < 3) putchar(' ');
      0001EF 90r08r16         [24]  854 	mov	dptr,#_j
      0001F2 E0               [24]  855 	movx	a,@dptr
      0001F3 FE               [12]  856 	mov	r6,a
      0001F4 A3               [24]  857 	inc	dptr
      0001F5 E0               [24]  858 	movx	a,@dptr
      0001F6 FF               [12]  859 	mov	r7,a
      0001F7 C3               [12]  860 	clr	c
      0001F8 EE               [12]  861 	mov	a,r6
      0001F9 94 03            [12]  862 	subb	a,#0x03
      0001FB EF               [12]  863 	mov	a,r7
      0001FC 64 80            [12]  864 	xrl	a,#0x80
      0001FE 94 80            [12]  865 	subb	a,#0x80
      000200 50 06            [24]  866 	jnc	00150$
      000202 90 00 20         [24]  867 	mov	dptr,#0x0020
      000205 12r00r00         [24]  868 	lcall	_putchar
      000208                        869 00150$:
                                    870 ;	life.c:58: for (j = 0; j < 4; j++) {
      000208 90r08r16         [24]  871 	mov	dptr,#_j
      00020B E0               [24]  872 	movx	a,@dptr
      00020C 24 01            [12]  873 	add	a,#0x01
      00020E F0               [24]  874 	movx	@dptr,a
      00020F A3               [24]  875 	inc	dptr
      000210 E0               [24]  876 	movx	a,@dptr
      000211 34 00            [12]  877 	addc	a,#0x00
      000213 F0               [24]  878 	movx	@dptr,a
      000214 90r08r16         [24]  879 	mov	dptr,#_j
      000217 E0               [24]  880 	movx	a,@dptr
      000218 FE               [12]  881 	mov	r6,a
      000219 A3               [24]  882 	inc	dptr
      00021A E0               [24]  883 	movx	a,@dptr
      00021B FF               [12]  884 	mov	r7,a
      00021C C3               [12]  885 	clr	c
      00021D EE               [12]  886 	mov	a,r6
      00021E 94 04            [12]  887 	subb	a,#0x04
      000220 EF               [12]  888 	mov	a,r7
      000221 64 80            [12]  889 	xrl	a,#0x80
      000223 94 80            [12]  890 	subb	a,#0x80
      000225 50 03            [24]  891 	jnc	00348$
      000227 02r01rA0         [24]  892 	ljmp	00149$
      00022A                        893 00348$:
                                    894 ;	life.c:69: printf("\r\n");
      00022A 74r0D            [12]  895 	mov	a,#___str_2
      00022C C0 E0            [24]  896 	push	acc
      00022E 74s00            [12]  897 	mov	a,#(___str_2 >> 8)
      000230 C0 E0            [24]  898 	push	acc
      000232 74 80            [12]  899 	mov	a,#0x80
      000234 C0 E0            [24]  900 	push	acc
      000236 12r00r00         [24]  901 	lcall	_printf
      000239 15 81            [12]  902 	dec	sp
      00023B 15 81            [12]  903 	dec	sp
      00023D 15 81            [12]  904 	dec	sp
                                    905 ;	life.c:49: for (j = 0; j < 4; j++) {
      00023F 90r08r16         [24]  906 	mov	dptr,#_j
      000242 E4               [12]  907 	clr	a
      000243 F0               [24]  908 	movx	@dptr,a
      000244 A3               [24]  909 	inc	dptr
      000245 F0               [24]  910 	movx	@dptr,a
      000246                        911 00151$:
                                    912 ;	life.c:50: generation[j]++;
      000246 90r08r16         [24]  913 	mov	dptr,#_j
      000249 E0               [24]  914 	movx	a,@dptr
      00024A FE               [12]  915 	mov	r6,a
      00024B A3               [24]  916 	inc	dptr
      00024C E0               [24]  917 	movx	a,@dptr
      00024D FF               [12]  918 	mov	r7,a
      00024E EE               [12]  919 	mov	a,r6
      00024F 2E               [12]  920 	add	a,r6
      000250 FE               [12]  921 	mov	r6,a
      000251 EF               [12]  922 	mov	a,r7
      000252 33               [12]  923 	rlc	a
      000253 FF               [12]  924 	mov	r7,a
      000254 EE               [12]  925 	mov	a,r6
      000255 24r0E            [12]  926 	add	a,#_generation
      000257 FE               [12]  927 	mov	r6,a
      000258 EF               [12]  928 	mov	a,r7
      000259 34s08            [12]  929 	addc	a,#(_generation >> 8)
      00025B FF               [12]  930 	mov	r7,a
      00025C 8E 82            [24]  931 	mov	dpl,r6
      00025E 8F 83            [24]  932 	mov	dph,r7
      000260 E0               [24]  933 	movx	a,@dptr
      000261 FC               [12]  934 	mov	r4,a
      000262 A3               [24]  935 	inc	dptr
      000263 E0               [24]  936 	movx	a,@dptr
      000264 FD               [12]  937 	mov	r5,a
      000265 0C               [12]  938 	inc	r4
      000266 BC 00 01         [24]  939 	cjne	r4,#0x00,00349$
      000269 0D               [12]  940 	inc	r5
      00026A                        941 00349$:
      00026A 8E 82            [24]  942 	mov	dpl,r6
      00026C 8F 83            [24]  943 	mov	dph,r7
      00026E EC               [12]  944 	mov	a,r4
      00026F F0               [24]  945 	movx	@dptr,a
      000270 ED               [12]  946 	mov	a,r5
      000271 A3               [24]  947 	inc	dptr
      000272 F0               [24]  948 	movx	@dptr,a
                                    949 ;	life.c:51: if (generation[j]) break;
      000273 90r08r16         [24]  950 	mov	dptr,#_j
      000276 E0               [24]  951 	movx	a,@dptr
      000277 FE               [12]  952 	mov	r6,a
      000278 A3               [24]  953 	inc	dptr
      000279 E0               [24]  954 	movx	a,@dptr
      00027A FF               [12]  955 	mov	r7,a
      00027B EE               [12]  956 	mov	a,r6
      00027C 2E               [12]  957 	add	a,r6
      00027D FC               [12]  958 	mov	r4,a
      00027E EF               [12]  959 	mov	a,r7
      00027F 33               [12]  960 	rlc	a
      000280 FD               [12]  961 	mov	r5,a
      000281 EC               [12]  962 	mov	a,r4
      000282 24r0E            [12]  963 	add	a,#_generation
      000284 F5 82            [12]  964 	mov	dpl,a
      000286 ED               [12]  965 	mov	a,r5
      000287 34s08            [12]  966 	addc	a,#(_generation >> 8)
      000289 F5 83            [12]  967 	mov	dph,a
      00028B E0               [24]  968 	movx	a,@dptr
      00028C FC               [12]  969 	mov	r4,a
      00028D A3               [24]  970 	inc	dptr
      00028E E0               [24]  971 	movx	a,@dptr
      00028F FD               [12]  972 	mov	r5,a
      000290 4C               [12]  973 	orl	a,r4
      000291 70 1E            [24]  974 	jnz	00123$
                                    975 ;	life.c:49: for (j = 0; j < 4; j++) {
      000293 90r08r16         [24]  976 	mov	dptr,#_j
      000296 74 01            [12]  977 	mov	a,#0x01
      000298 2E               [12]  978 	add	a,r6
      000299 F0               [24]  979 	movx	@dptr,a
      00029A E4               [12]  980 	clr	a
      00029B 3F               [12]  981 	addc	a,r7
      00029C A3               [24]  982 	inc	dptr
      00029D F0               [24]  983 	movx	@dptr,a
      00029E 90r08r16         [24]  984 	mov	dptr,#_j
      0002A1 E0               [24]  985 	movx	a,@dptr
      0002A2 FE               [12]  986 	mov	r6,a
      0002A3 A3               [24]  987 	inc	dptr
      0002A4 E0               [24]  988 	movx	a,@dptr
      0002A5 FF               [12]  989 	mov	r7,a
      0002A6 C3               [12]  990 	clr	c
      0002A7 EE               [12]  991 	mov	a,r6
      0002A8 94 04            [12]  992 	subb	a,#0x04
      0002AA EF               [12]  993 	mov	a,r7
      0002AB 64 80            [12]  994 	xrl	a,#0x80
      0002AD 94 80            [12]  995 	subb	a,#0x80
      0002AF 40 95            [24]  996 	jc	00151$
                                    997 ;	life.c:70: updategen();
      0002B1                        998 00123$:
                                    999 ;	life.c:72: for (x = 0; x < W; x++) {
      0002B1 90r08r04         [24] 1000 	mov	dptr,#_x
      0002B4 E4               [12] 1001 	clr	a
      0002B5 F0               [24] 1002 	movx	@dptr,a
      0002B6 A3               [24] 1003 	inc	dptr
      0002B7 F0               [24] 1004 	movx	@dptr,a
      0002B8                       1005 00155$:
                                   1006 ;	life.c:73: for (y = 0; y < H; y++)
      0002B8 90r08r06         [24] 1007 	mov	dptr,#_y
      0002BB E4               [12] 1008 	clr	a
      0002BC F0               [24] 1009 	movx	@dptr,a
      0002BD A3               [24] 1010 	inc	dptr
      0002BE F0               [24] 1011 	movx	@dptr,a
      0002BF                       1012 00153$:
                                   1013 ;	life.c:74: if (u[y][x]) printf("\033[01m[]\033[m");
      0002BF 90r08r06         [24] 1014 	mov	dptr,#_y
      0002C2 E0               [24] 1015 	movx	a,@dptr
      0002C3 FE               [12] 1016 	mov	r6,a
      0002C4 A3               [24] 1017 	inc	dptr
      0002C5 E0               [24] 1018 	movx	a,@dptr
      0002C6 C4               [12] 1019 	swap	a
      0002C7 23               [12] 1020 	rl	a
      0002C8 54 E0            [12] 1021 	anl	a,#0xe0
      0002CA CE               [12] 1022 	xch	a,r6
      0002CB C4               [12] 1023 	swap	a
      0002CC 23               [12] 1024 	rl	a
      0002CD CE               [12] 1025 	xch	a,r6
      0002CE 6E               [12] 1026 	xrl	a,r6
      0002CF CE               [12] 1027 	xch	a,r6
      0002D0 54 E0            [12] 1028 	anl	a,#0xe0
      0002D2 CE               [12] 1029 	xch	a,r6
      0002D3 6E               [12] 1030 	xrl	a,r6
      0002D4 FF               [12] 1031 	mov	r7,a
      0002D5 EE               [12] 1032 	mov	a,r6
      0002D6 24r04            [12] 1033 	add	a,#_u
      0002D8 FE               [12] 1034 	mov	r6,a
      0002D9 EF               [12] 1035 	mov	a,r7
      0002DA 34s00            [12] 1036 	addc	a,#(_u >> 8)
      0002DC FF               [12] 1037 	mov	r7,a
      0002DD 90r08r04         [24] 1038 	mov	dptr,#_x
      0002E0 E0               [24] 1039 	movx	a,@dptr
      0002E1 FC               [12] 1040 	mov	r4,a
      0002E2 A3               [24] 1041 	inc	dptr
      0002E3 E0               [24] 1042 	movx	a,@dptr
      0002E4 FD               [12] 1043 	mov	r5,a
      0002E5 EC               [12] 1044 	mov	a,r4
      0002E6 2E               [12] 1045 	add	a,r6
      0002E7 FE               [12] 1046 	mov	r6,a
      0002E8 ED               [12] 1047 	mov	a,r5
      0002E9 3F               [12] 1048 	addc	a,r7
      0002EA FF               [12] 1049 	mov	r7,a
      0002EB 8E 82            [24] 1050 	mov	dpl,r6
      0002ED 8F 83            [24] 1051 	mov	dph,r7
      0002EF E0               [24] 1052 	movx	a,@dptr
      0002F0 60 17            [24] 1053 	jz	00125$
      0002F2 74r10            [12] 1054 	mov	a,#___str_3
      0002F4 C0 E0            [24] 1055 	push	acc
      0002F6 74s00            [12] 1056 	mov	a,#(___str_3 >> 8)
      0002F8 C0 E0            [24] 1057 	push	acc
      0002FA 74 80            [12] 1058 	mov	a,#0x80
      0002FC C0 E0            [24] 1059 	push	acc
      0002FE 12r00r00         [24] 1060 	lcall	_printf
      000301 15 81            [12] 1061 	dec	sp
      000303 15 81            [12] 1062 	dec	sp
      000305 15 81            [12] 1063 	dec	sp
      000307 80 15            [24] 1064 	sjmp	00154$
      000309                       1065 00125$:
                                   1066 ;	life.c:75: else printf("--");
      000309 74r1B            [12] 1067 	mov	a,#___str_4
      00030B C0 E0            [24] 1068 	push	acc
      00030D 74s00            [12] 1069 	mov	a,#(___str_4 >> 8)
      00030F C0 E0            [24] 1070 	push	acc
      000311 74 80            [12] 1071 	mov	a,#0x80
      000313 C0 E0            [24] 1072 	push	acc
      000315 12r00r00         [24] 1073 	lcall	_printf
      000318 15 81            [12] 1074 	dec	sp
      00031A 15 81            [12] 1075 	dec	sp
      00031C 15 81            [12] 1076 	dec	sp
      00031E                       1077 00154$:
                                   1078 ;	life.c:73: for (y = 0; y < H; y++)
      00031E 90r08r06         [24] 1079 	mov	dptr,#_y
      000321 E0               [24] 1080 	movx	a,@dptr
      000322 24 01            [12] 1081 	add	a,#0x01
      000324 F0               [24] 1082 	movx	@dptr,a
      000325 A3               [24] 1083 	inc	dptr
      000326 E0               [24] 1084 	movx	a,@dptr
      000327 34 00            [12] 1085 	addc	a,#0x00
      000329 F0               [24] 1086 	movx	@dptr,a
      00032A 90r08r06         [24] 1087 	mov	dptr,#_y
      00032D E0               [24] 1088 	movx	a,@dptr
      00032E FE               [12] 1089 	mov	r6,a
      00032F A3               [24] 1090 	inc	dptr
      000330 E0               [24] 1091 	movx	a,@dptr
      000331 FF               [12] 1092 	mov	r7,a
      000332 C3               [12] 1093 	clr	c
      000333 EE               [12] 1094 	mov	a,r6
      000334 94 20            [12] 1095 	subb	a,#0x20
      000336 EF               [12] 1096 	mov	a,r7
      000337 64 80            [12] 1097 	xrl	a,#0x80
      000339 94 80            [12] 1098 	subb	a,#0x80
      00033B 50 03            [24] 1099 	jnc	00353$
      00033D 02r02rBF         [24] 1100 	ljmp	00153$
      000340                       1101 00353$:
                                   1102 ;	life.c:76: printf("\r\n");
      000340 74r0D            [12] 1103 	mov	a,#___str_2
      000342 C0 E0            [24] 1104 	push	acc
      000344 74s00            [12] 1105 	mov	a,#(___str_2 >> 8)
      000346 C0 E0            [24] 1106 	push	acc
      000348 74 80            [12] 1107 	mov	a,#0x80
      00034A C0 E0            [24] 1108 	push	acc
      00034C 12r00r00         [24] 1109 	lcall	_printf
      00034F 15 81            [12] 1110 	dec	sp
      000351 15 81            [12] 1111 	dec	sp
      000353 15 81            [12] 1112 	dec	sp
                                   1113 ;	life.c:72: for (x = 0; x < W; x++) {
      000355 90r08r04         [24] 1114 	mov	dptr,#_x
      000358 E0               [24] 1115 	movx	a,@dptr
      000359 24 01            [12] 1116 	add	a,#0x01
      00035B F0               [24] 1117 	movx	@dptr,a
      00035C A3               [24] 1118 	inc	dptr
      00035D E0               [24] 1119 	movx	a,@dptr
      00035E 34 00            [12] 1120 	addc	a,#0x00
      000360 F0               [24] 1121 	movx	@dptr,a
      000361 90r08r04         [24] 1122 	mov	dptr,#_x
      000364 E0               [24] 1123 	movx	a,@dptr
      000365 FE               [12] 1124 	mov	r6,a
      000366 A3               [24] 1125 	inc	dptr
      000367 E0               [24] 1126 	movx	a,@dptr
      000368 FF               [12] 1127 	mov	r7,a
      000369 C3               [12] 1128 	clr	c
      00036A EE               [12] 1129 	mov	a,r6
      00036B 94 20            [12] 1130 	subb	a,#0x20
      00036D EF               [12] 1131 	mov	a,r7
      00036E 64 80            [12] 1132 	xrl	a,#0x80
      000370 94 80            [12] 1133 	subb	a,#0x80
      000372 50 03            [24] 1134 	jnc	00354$
      000374 02r02rB8         [24] 1135 	ljmp	00155$
      000377                       1136 00354$:
                                   1137 ;	life.c:83: fixed = 1;
      000377 90r08r18         [24] 1138 	mov	dptr,#_fixed
      00037A 74 01            [12] 1139 	mov	a,#0x01
      00037C F0               [24] 1140 	movx	@dptr,a
      00037D E4               [12] 1141 	clr	a
      00037E A3               [24] 1142 	inc	dptr
      00037F F0               [24] 1143 	movx	@dptr,a
                                   1144 ;	life.c:85: for (y = 0; y < H; y++) {
      000380 90r08r06         [24] 1145 	mov	dptr,#_y
      000383 F0               [24] 1146 	movx	@dptr,a
      000384 A3               [24] 1147 	inc	dptr
      000385 F0               [24] 1148 	movx	@dptr,a
      000386                       1149 00165$:
                                   1150 ;	life.c:86: for (x = 0; x < W; x++) {
      000386 90r08r04         [24] 1151 	mov	dptr,#_x
      000389 E4               [12] 1152 	clr	a
      00038A F0               [24] 1153 	movx	@dptr,a
      00038B A3               [24] 1154 	inc	dptr
      00038C F0               [24] 1155 	movx	@dptr,a
      00038D                       1156 00163$:
                                   1157 ;	life.c:87: n = 0;
      00038D 90r08r0C         [24] 1158 	mov	dptr,#_n
      000390 E4               [12] 1159 	clr	a
      000391 F0               [24] 1160 	movx	@dptr,a
      000392 A3               [24] 1161 	inc	dptr
      000393 F0               [24] 1162 	movx	@dptr,a
                                   1163 ;	life.c:88: for (y1 = y - 1; y1 <= y + 1; y1++)
      000394 90r08r06         [24] 1164 	mov	dptr,#_y
      000397 E0               [24] 1165 	movx	a,@dptr
      000398 FE               [12] 1166 	mov	r6,a
      000399 A3               [24] 1167 	inc	dptr
      00039A E0               [24] 1168 	movx	a,@dptr
      00039B FF               [12] 1169 	mov	r7,a
      00039C 1E               [12] 1170 	dec	r6
      00039D BE FF 01         [24] 1171 	cjne	r6,#0xff,00355$
      0003A0 1F               [12] 1172 	dec	r7
      0003A1                       1173 00355$:
      0003A1 90r08r0A         [24] 1174 	mov	dptr,#_y1
      0003A4 EE               [12] 1175 	mov	a,r6
      0003A5 F0               [24] 1176 	movx	@dptr,a
      0003A6 EF               [12] 1177 	mov	a,r7
      0003A7 A3               [24] 1178 	inc	dptr
      0003A8 F0               [24] 1179 	movx	@dptr,a
      0003A9                       1180 00161$:
      0003A9 90r08r06         [24] 1181 	mov	dptr,#_y
      0003AC E0               [24] 1182 	movx	a,@dptr
      0003AD FE               [12] 1183 	mov	r6,a
      0003AE A3               [24] 1184 	inc	dptr
      0003AF E0               [24] 1185 	movx	a,@dptr
      0003B0 FF               [12] 1186 	mov	r7,a
      0003B1 74 01            [12] 1187 	mov	a,#0x01
      0003B3 2E               [12] 1188 	add	a,r6
      0003B4 FC               [12] 1189 	mov	r4,a
      0003B5 E4               [12] 1190 	clr	a
      0003B6 3F               [12] 1191 	addc	a,r7
      0003B7 FD               [12] 1192 	mov	r5,a
      0003B8 90r08r0A         [24] 1193 	mov	dptr,#_y1
      0003BB E0               [24] 1194 	movx	a,@dptr
      0003BC FA               [12] 1195 	mov	r2,a
      0003BD A3               [24] 1196 	inc	dptr
      0003BE E0               [24] 1197 	movx	a,@dptr
      0003BF FB               [12] 1198 	mov	r3,a
      0003C0 C3               [12] 1199 	clr	c
      0003C1 EC               [12] 1200 	mov	a,r4
      0003C2 9A               [12] 1201 	subb	a,r2
      0003C3 ED               [12] 1202 	mov	a,r5
      0003C4 64 80            [12] 1203 	xrl	a,#0x80
      0003C6 8B F0            [24] 1204 	mov	b,r3
      0003C8 63 F0 80         [24] 1205 	xrl	b,#0x80
      0003CB 95 F0            [12] 1206 	subb	a,b
      0003CD 50 03            [24] 1207 	jnc	00356$
      0003CF 02r04rAF         [24] 1208 	ljmp	00133$
      0003D2                       1209 00356$:
                                   1210 ;	life.c:89: for (x1 = x - 1; x1 <= x + 1; x1++)
      0003D2 90r08r04         [24] 1211 	mov	dptr,#_x
      0003D5 E0               [24] 1212 	movx	a,@dptr
      0003D6 FC               [12] 1213 	mov	r4,a
      0003D7 A3               [24] 1214 	inc	dptr
      0003D8 E0               [24] 1215 	movx	a,@dptr
      0003D9 FD               [12] 1216 	mov	r5,a
      0003DA 1C               [12] 1217 	dec	r4
      0003DB BC FF 01         [24] 1218 	cjne	r4,#0xff,00357$
      0003DE 1D               [12] 1219 	dec	r5
      0003DF                       1220 00357$:
      0003DF 90r08r08         [24] 1221 	mov	dptr,#_x1
      0003E2 EC               [12] 1222 	mov	a,r4
      0003E3 F0               [24] 1223 	movx	@dptr,a
      0003E4 ED               [12] 1224 	mov	a,r5
      0003E5 A3               [24] 1225 	inc	dptr
      0003E6 F0               [24] 1226 	movx	@dptr,a
      0003E7                       1227 00158$:
      0003E7 90r08r04         [24] 1228 	mov	dptr,#_x
      0003EA E0               [24] 1229 	movx	a,@dptr
      0003EB FC               [12] 1230 	mov	r4,a
      0003EC A3               [24] 1231 	inc	dptr
      0003ED E0               [24] 1232 	movx	a,@dptr
      0003EE FD               [12] 1233 	mov	r5,a
      0003EF 0C               [12] 1234 	inc	r4
      0003F0 BC 00 01         [24] 1235 	cjne	r4,#0x00,00358$
      0003F3 0D               [12] 1236 	inc	r5
      0003F4                       1237 00358$:
      0003F4 90r08r08         [24] 1238 	mov	dptr,#_x1
      0003F7 E0               [24] 1239 	movx	a,@dptr
      0003F8 FA               [12] 1240 	mov	r2,a
      0003F9 A3               [24] 1241 	inc	dptr
      0003FA E0               [24] 1242 	movx	a,@dptr
      0003FB FB               [12] 1243 	mov	r3,a
      0003FC C3               [12] 1244 	clr	c
      0003FD EC               [12] 1245 	mov	a,r4
      0003FE 9A               [12] 1246 	subb	a,r2
      0003FF ED               [12] 1247 	mov	a,r5
      000400 64 80            [12] 1248 	xrl	a,#0x80
      000402 8B F0            [24] 1249 	mov	b,r3
      000404 63 F0 80         [24] 1250 	xrl	b,#0x80
      000407 95 F0            [12] 1251 	subb	a,b
      000409 50 03            [24] 1252 	jnc	00359$
      00040B 02r04rA0         [24] 1253 	ljmp	00162$
      00040E                       1254 00359$:
                                   1255 ;	life.c:90: if (u[(y1 + H) % H][(x1 + W) % W])
      00040E 90r08r0A         [24] 1256 	mov	dptr,#_y1
      000411 E0               [24] 1257 	movx	a,@dptr
      000412 FC               [12] 1258 	mov	r4,a
      000413 A3               [24] 1259 	inc	dptr
      000414 E0               [24] 1260 	movx	a,@dptr
      000415 FD               [12] 1261 	mov	r5,a
      000416 74 20            [12] 1262 	mov	a,#0x20
      000418 2C               [12] 1263 	add	a,r4
      000419 FC               [12] 1264 	mov	r4,a
      00041A E4               [12] 1265 	clr	a
      00041B 3D               [12] 1266 	addc	a,r5
      00041C FD               [12] 1267 	mov	r5,a
      00041D C0 03            [24] 1268 	push	ar3
      00041F C0 02            [24] 1269 	push	ar2
      000421 74 20            [12] 1270 	mov	a,#0x20
      000423 C0 E0            [24] 1271 	push	acc
      000425 E4               [12] 1272 	clr	a
      000426 C0 E0            [24] 1273 	push	acc
      000428 8C 82            [24] 1274 	mov	dpl,r4
      00042A 8D 83            [24] 1275 	mov	dph,r5
      00042C 12r00r00         [24] 1276 	lcall	__modsint
      00042F AC 82            [24] 1277 	mov	r4,dpl
      000431 AD 83            [24] 1278 	mov	r5,dph
      000433 15 81            [12] 1279 	dec	sp
      000435 15 81            [12] 1280 	dec	sp
      000437 D0 02            [24] 1281 	pop	ar2
      000439 D0 03            [24] 1282 	pop	ar3
      00043B ED               [12] 1283 	mov	a,r5
      00043C C4               [12] 1284 	swap	a
      00043D 23               [12] 1285 	rl	a
      00043E 54 E0            [12] 1286 	anl	a,#0xe0
      000440 CC               [12] 1287 	xch	a,r4
      000441 C4               [12] 1288 	swap	a
      000442 23               [12] 1289 	rl	a
      000443 CC               [12] 1290 	xch	a,r4
      000444 6C               [12] 1291 	xrl	a,r4
      000445 CC               [12] 1292 	xch	a,r4
      000446 54 E0            [12] 1293 	anl	a,#0xe0
      000448 CC               [12] 1294 	xch	a,r4
      000449 6C               [12] 1295 	xrl	a,r4
      00044A FD               [12] 1296 	mov	r5,a
      00044B EC               [12] 1297 	mov	a,r4
      00044C 24r04            [12] 1298 	add	a,#_u
      00044E FC               [12] 1299 	mov	r4,a
      00044F ED               [12] 1300 	mov	a,r5
      000450 34s00            [12] 1301 	addc	a,#(_u >> 8)
      000452 FD               [12] 1302 	mov	r5,a
      000453 74 20            [12] 1303 	mov	a,#0x20
      000455 2A               [12] 1304 	add	a,r2
      000456 FA               [12] 1305 	mov	r2,a
      000457 E4               [12] 1306 	clr	a
      000458 3B               [12] 1307 	addc	a,r3
      000459 FB               [12] 1308 	mov	r3,a
      00045A C0 05            [24] 1309 	push	ar5
      00045C C0 04            [24] 1310 	push	ar4
      00045E 74 20            [12] 1311 	mov	a,#0x20
      000460 C0 E0            [24] 1312 	push	acc
      000462 E4               [12] 1313 	clr	a
      000463 C0 E0            [24] 1314 	push	acc
      000465 8A 82            [24] 1315 	mov	dpl,r2
      000467 8B 83            [24] 1316 	mov	dph,r3
      000469 12r00r00         [24] 1317 	lcall	__modsint
      00046C AA 82            [24] 1318 	mov	r2,dpl
      00046E AB 83            [24] 1319 	mov	r3,dph
      000470 15 81            [12] 1320 	dec	sp
      000472 15 81            [12] 1321 	dec	sp
      000474 D0 04            [24] 1322 	pop	ar4
      000476 D0 05            [24] 1323 	pop	ar5
      000478 EA               [12] 1324 	mov	a,r2
      000479 2C               [12] 1325 	add	a,r4
      00047A FC               [12] 1326 	mov	r4,a
      00047B EB               [12] 1327 	mov	a,r3
      00047C 3D               [12] 1328 	addc	a,r5
      00047D FD               [12] 1329 	mov	r5,a
      00047E 8C 82            [24] 1330 	mov	dpl,r4
      000480 8D 83            [24] 1331 	mov	dph,r5
      000482 E0               [24] 1332 	movx	a,@dptr
      000483 60 0C            [24] 1333 	jz	00159$
                                   1334 ;	life.c:91: n++;
      000485 90r08r0C         [24] 1335 	mov	dptr,#_n
      000488 E0               [24] 1336 	movx	a,@dptr
      000489 24 01            [12] 1337 	add	a,#0x01
      00048B F0               [24] 1338 	movx	@dptr,a
      00048C A3               [24] 1339 	inc	dptr
      00048D E0               [24] 1340 	movx	a,@dptr
      00048E 34 00            [12] 1341 	addc	a,#0x00
      000490 F0               [24] 1342 	movx	@dptr,a
      000491                       1343 00159$:
                                   1344 ;	life.c:89: for (x1 = x - 1; x1 <= x + 1; x1++)
      000491 90r08r08         [24] 1345 	mov	dptr,#_x1
      000494 E0               [24] 1346 	movx	a,@dptr
      000495 24 01            [12] 1347 	add	a,#0x01
      000497 F0               [24] 1348 	movx	@dptr,a
      000498 A3               [24] 1349 	inc	dptr
      000499 E0               [24] 1350 	movx	a,@dptr
      00049A 34 00            [12] 1351 	addc	a,#0x00
      00049C F0               [24] 1352 	movx	@dptr,a
      00049D 02r03rE7         [24] 1353 	ljmp	00158$
      0004A0                       1354 00162$:
                                   1355 ;	life.c:88: for (y1 = y - 1; y1 <= y + 1; y1++)
      0004A0 90r08r0A         [24] 1356 	mov	dptr,#_y1
      0004A3 E0               [24] 1357 	movx	a,@dptr
      0004A4 24 01            [12] 1358 	add	a,#0x01
      0004A6 F0               [24] 1359 	movx	@dptr,a
      0004A7 A3               [24] 1360 	inc	dptr
      0004A8 E0               [24] 1361 	movx	a,@dptr
      0004A9 34 00            [12] 1362 	addc	a,#0x00
      0004AB F0               [24] 1363 	movx	@dptr,a
      0004AC 02r03rA9         [24] 1364 	ljmp	00161$
      0004AF                       1365 00133$:
                                   1366 ;	life.c:93: if (u[y][x]) n--;
      0004AF EF               [12] 1367 	mov	a,r7
      0004B0 C4               [12] 1368 	swap	a
      0004B1 23               [12] 1369 	rl	a
      0004B2 54 E0            [12] 1370 	anl	a,#0xe0
      0004B4 CE               [12] 1371 	xch	a,r6
      0004B5 C4               [12] 1372 	swap	a
      0004B6 23               [12] 1373 	rl	a
      0004B7 CE               [12] 1374 	xch	a,r6
      0004B8 6E               [12] 1375 	xrl	a,r6
      0004B9 CE               [12] 1376 	xch	a,r6
      0004BA 54 E0            [12] 1377 	anl	a,#0xe0
      0004BC CE               [12] 1378 	xch	a,r6
      0004BD 6E               [12] 1379 	xrl	a,r6
      0004BE FF               [12] 1380 	mov	r7,a
      0004BF EE               [12] 1381 	mov	a,r6
      0004C0 24r04            [12] 1382 	add	a,#_u
      0004C2 FE               [12] 1383 	mov	r6,a
      0004C3 EF               [12] 1384 	mov	a,r7
      0004C4 34s00            [12] 1385 	addc	a,#(_u >> 8)
      0004C6 FF               [12] 1386 	mov	r7,a
      0004C7 90r08r04         [24] 1387 	mov	dptr,#_x
      0004CA E0               [24] 1388 	movx	a,@dptr
      0004CB FC               [12] 1389 	mov	r4,a
      0004CC A3               [24] 1390 	inc	dptr
      0004CD E0               [24] 1391 	movx	a,@dptr
      0004CE FD               [12] 1392 	mov	r5,a
      0004CF EC               [12] 1393 	mov	a,r4
      0004D0 2E               [12] 1394 	add	a,r6
      0004D1 FE               [12] 1395 	mov	r6,a
      0004D2 ED               [12] 1396 	mov	a,r5
      0004D3 3F               [12] 1397 	addc	a,r7
      0004D4 FF               [12] 1398 	mov	r7,a
      0004D5 8E 82            [24] 1399 	mov	dpl,r6
      0004D7 8F 83            [24] 1400 	mov	dph,r7
      0004D9 E0               [24] 1401 	movx	a,@dptr
      0004DA 60 14            [24] 1402 	jz	00135$
      0004DC 90r08r0C         [24] 1403 	mov	dptr,#_n
      0004DF E0               [24] 1404 	movx	a,@dptr
      0004E0 24 FF            [12] 1405 	add	a,#0xff
      0004E2 FE               [12] 1406 	mov	r6,a
      0004E3 A3               [24] 1407 	inc	dptr
      0004E4 E0               [24] 1408 	movx	a,@dptr
      0004E5 34 FF            [12] 1409 	addc	a,#0xff
      0004E7 FF               [12] 1410 	mov	r7,a
      0004E8 90r08r0C         [24] 1411 	mov	dptr,#_n
      0004EB EE               [12] 1412 	mov	a,r6
      0004EC F0               [24] 1413 	movx	@dptr,a
      0004ED EF               [12] 1414 	mov	a,r7
      0004EE A3               [24] 1415 	inc	dptr
      0004EF F0               [24] 1416 	movx	@dptr,a
      0004F0                       1417 00135$:
                                   1418 ;	life.c:94: nu[y][x] = (n == 3 || (n == 2 && u[y][x]));
      0004F0 90r08r06         [24] 1419 	mov	dptr,#_y
      0004F3 E0               [24] 1420 	movx	a,@dptr
      0004F4 FE               [12] 1421 	mov	r6,a
      0004F5 A3               [24] 1422 	inc	dptr
      0004F6 E0               [24] 1423 	movx	a,@dptr
      0004F7 C4               [12] 1424 	swap	a
      0004F8 23               [12] 1425 	rl	a
      0004F9 54 E0            [12] 1426 	anl	a,#0xe0
      0004FB CE               [12] 1427 	xch	a,r6
      0004FC C4               [12] 1428 	swap	a
      0004FD 23               [12] 1429 	rl	a
      0004FE CE               [12] 1430 	xch	a,r6
      0004FF 6E               [12] 1431 	xrl	a,r6
      000500 CE               [12] 1432 	xch	a,r6
      000501 54 E0            [12] 1433 	anl	a,#0xe0
      000503 CE               [12] 1434 	xch	a,r6
      000504 6E               [12] 1435 	xrl	a,r6
      000505 FF               [12] 1436 	mov	r7,a
      000506 EE               [12] 1437 	mov	a,r6
      000507 24r04            [12] 1438 	add	a,#_nu
      000509 FC               [12] 1439 	mov	r4,a
      00050A EF               [12] 1440 	mov	a,r7
      00050B 34s04            [12] 1441 	addc	a,#(_nu >> 8)
      00050D FD               [12] 1442 	mov	r5,a
      00050E 90r08r04         [24] 1443 	mov	dptr,#_x
      000511 E0               [24] 1444 	movx	a,@dptr
      000512 FA               [12] 1445 	mov	r2,a
      000513 A3               [24] 1446 	inc	dptr
      000514 E0               [24] 1447 	movx	a,@dptr
      000515 FB               [12] 1448 	mov	r3,a
      000516 EA               [12] 1449 	mov	a,r2
      000517 2C               [12] 1450 	add	a,r4
      000518 FC               [12] 1451 	mov	r4,a
      000519 EB               [12] 1452 	mov	a,r3
      00051A 3D               [12] 1453 	addc	a,r5
      00051B FD               [12] 1454 	mov	r5,a
      00051C 90r08r0C         [24] 1455 	mov	dptr,#_n
      00051F E0               [24] 1456 	movx	a,@dptr
      000520 F8               [12] 1457 	mov	r0,a
      000521 A3               [24] 1458 	inc	dptr
      000522 E0               [24] 1459 	movx	a,@dptr
      000523 F9               [12] 1460 	mov	r1,a
      000524 B8 03 05         [24] 1461 	cjne	r0,#0x03,00362$
      000527 B9 00 02         [24] 1462 	cjne	r1,#0x00,00362$
      00052A 80 1F            [24] 1463 	sjmp	00174$
      00052C                       1464 00362$:
      00052C B8 02 18         [24] 1465 	cjne	r0,#0x02,00173$
      00052F B9 00 15         [24] 1466 	cjne	r1,#0x00,00173$
      000532 EE               [12] 1467 	mov	a,r6
      000533 24r04            [12] 1468 	add	a,#_u
      000535 FE               [12] 1469 	mov	r6,a
      000536 EF               [12] 1470 	mov	a,r7
      000537 34s00            [12] 1471 	addc	a,#(_u >> 8)
      000539 FF               [12] 1472 	mov	r7,a
      00053A EA               [12] 1473 	mov	a,r2
      00053B 2E               [12] 1474 	add	a,r6
      00053C FA               [12] 1475 	mov	r2,a
      00053D EB               [12] 1476 	mov	a,r3
      00053E 3F               [12] 1477 	addc	a,r7
      00053F FB               [12] 1478 	mov	r3,a
      000540 8A 82            [24] 1479 	mov	dpl,r2
      000542 8B 83            [24] 1480 	mov	dph,r3
      000544 E0               [24] 1481 	movx	a,@dptr
      000545 70 04            [24] 1482 	jnz	00174$
      000547                       1483 00173$:
                                   1484 ;	assignBit
      000547 C2*00            [12] 1485 	clr	b0
      000549 80 02            [24] 1486 	sjmp	00175$
      00054B                       1487 00174$:
                                   1488 ;	assignBit
      00054B D2*00            [12] 1489 	setb	b0
      00054D                       1490 00175$:
      00054D A2*00            [12] 1491 	mov	c,b0
      00054F E4               [12] 1492 	clr	a
      000550 33               [12] 1493 	rlc	a
      000551 8C 82            [24] 1494 	mov	dpl,r4
      000553 8D 83            [24] 1495 	mov	dph,r5
      000555 F0               [24] 1496 	movx	@dptr,a
                                   1497 ;	life.c:86: for (x = 0; x < W; x++) {
      000556 90r08r04         [24] 1498 	mov	dptr,#_x
      000559 E0               [24] 1499 	movx	a,@dptr
      00055A 24 01            [12] 1500 	add	a,#0x01
      00055C F0               [24] 1501 	movx	@dptr,a
      00055D A3               [24] 1502 	inc	dptr
      00055E E0               [24] 1503 	movx	a,@dptr
      00055F 34 00            [12] 1504 	addc	a,#0x00
      000561 F0               [24] 1505 	movx	@dptr,a
      000562 90r08r04         [24] 1506 	mov	dptr,#_x
      000565 E0               [24] 1507 	movx	a,@dptr
      000566 FE               [12] 1508 	mov	r6,a
      000567 A3               [24] 1509 	inc	dptr
      000568 E0               [24] 1510 	movx	a,@dptr
      000569 FF               [12] 1511 	mov	r7,a
      00056A C3               [12] 1512 	clr	c
      00056B EE               [12] 1513 	mov	a,r6
      00056C 94 20            [12] 1514 	subb	a,#0x20
      00056E EF               [12] 1515 	mov	a,r7
      00056F 64 80            [12] 1516 	xrl	a,#0x80
      000571 94 80            [12] 1517 	subb	a,#0x80
      000573 50 03            [24] 1518 	jnc	00366$
      000575 02r03r8D         [24] 1519 	ljmp	00163$
      000578                       1520 00366$:
                                   1521 ;	life.c:85: for (y = 0; y < H; y++) {
      000578 90r08r06         [24] 1522 	mov	dptr,#_y
      00057B E0               [24] 1523 	movx	a,@dptr
      00057C 24 01            [12] 1524 	add	a,#0x01
      00057E F0               [24] 1525 	movx	@dptr,a
      00057F A3               [24] 1526 	inc	dptr
      000580 E0               [24] 1527 	movx	a,@dptr
      000581 34 00            [12] 1528 	addc	a,#0x00
      000583 F0               [24] 1529 	movx	@dptr,a
      000584 90r08r06         [24] 1530 	mov	dptr,#_y
      000587 E0               [24] 1531 	movx	a,@dptr
      000588 FE               [12] 1532 	mov	r6,a
      000589 A3               [24] 1533 	inc	dptr
      00058A E0               [24] 1534 	movx	a,@dptr
      00058B FF               [12] 1535 	mov	r7,a
      00058C C3               [12] 1536 	clr	c
      00058D EE               [12] 1537 	mov	a,r6
      00058E 94 20            [12] 1538 	subb	a,#0x20
      000590 EF               [12] 1539 	mov	a,r7
      000591 64 80            [12] 1540 	xrl	a,#0x80
      000593 94 80            [12] 1541 	subb	a,#0x80
      000595 50 03            [24] 1542 	jnc	00367$
      000597 02r03r86         [24] 1543 	ljmp	00165$
      00059A                       1544 00367$:
                                   1545 ;	life.c:98: for (y = 0; y < H; y++)
      00059A 90r08r06         [24] 1546 	mov	dptr,#_y
      00059D E4               [12] 1547 	clr	a
      00059E F0               [24] 1548 	movx	@dptr,a
      00059F A3               [24] 1549 	inc	dptr
      0005A0 F0               [24] 1550 	movx	@dptr,a
      0005A1                       1551 00169$:
                                   1552 ;	life.c:99: for (x = 0; x < W; x++)
      0005A1 90r08r04         [24] 1553 	mov	dptr,#_x
      0005A4 E4               [12] 1554 	clr	a
      0005A5 F0               [24] 1555 	movx	@dptr,a
      0005A6 A3               [24] 1556 	inc	dptr
      0005A7 F0               [24] 1557 	movx	@dptr,a
      0005A8                       1558 00167$:
                                   1559 ;	life.c:100: if (u[y][x] != nu[y][x]) {
      0005A8 90r08r06         [24] 1560 	mov	dptr,#_y
      0005AB E0               [24] 1561 	movx	a,@dptr
      0005AC FE               [12] 1562 	mov	r6,a
      0005AD A3               [24] 1563 	inc	dptr
      0005AE E0               [24] 1564 	movx	a,@dptr
      0005AF C4               [12] 1565 	swap	a
      0005B0 23               [12] 1566 	rl	a
      0005B1 54 E0            [12] 1567 	anl	a,#0xe0
      0005B3 CE               [12] 1568 	xch	a,r6
      0005B4 C4               [12] 1569 	swap	a
      0005B5 23               [12] 1570 	rl	a
      0005B6 CE               [12] 1571 	xch	a,r6
      0005B7 6E               [12] 1572 	xrl	a,r6
      0005B8 CE               [12] 1573 	xch	a,r6
      0005B9 54 E0            [12] 1574 	anl	a,#0xe0
      0005BB CE               [12] 1575 	xch	a,r6
      0005BC 6E               [12] 1576 	xrl	a,r6
      0005BD FF               [12] 1577 	mov	r7,a
      0005BE EE               [12] 1578 	mov	a,r6
      0005BF 24r04            [12] 1579 	add	a,#_u
      0005C1 FC               [12] 1580 	mov	r4,a
      0005C2 EF               [12] 1581 	mov	a,r7
      0005C3 34s00            [12] 1582 	addc	a,#(_u >> 8)
      0005C5 FD               [12] 1583 	mov	r5,a
      0005C6 90r08r04         [24] 1584 	mov	dptr,#_x
      0005C9 E0               [24] 1585 	movx	a,@dptr
      0005CA FA               [12] 1586 	mov	r2,a
      0005CB A3               [24] 1587 	inc	dptr
      0005CC E0               [24] 1588 	movx	a,@dptr
      0005CD FB               [12] 1589 	mov	r3,a
      0005CE EA               [12] 1590 	mov	a,r2
      0005CF 2C               [12] 1591 	add	a,r4
      0005D0 F5 82            [12] 1592 	mov	dpl,a
      0005D2 EB               [12] 1593 	mov	a,r3
      0005D3 3D               [12] 1594 	addc	a,r5
      0005D4 F5 83            [12] 1595 	mov	dph,a
      0005D6 EE               [12] 1596 	mov	a,r6
      0005D7 24r04            [12] 1597 	add	a,#_nu
      0005D9 FC               [12] 1598 	mov	r4,a
      0005DA EF               [12] 1599 	mov	a,r7
      0005DB 34s04            [12] 1600 	addc	a,#(_nu >> 8)
      0005DD FD               [12] 1601 	mov	r5,a
      0005DE EA               [12] 1602 	mov	a,r2
      0005DF 2C               [12] 1603 	add	a,r4
      0005E0 FC               [12] 1604 	mov	r4,a
      0005E1 EB               [12] 1605 	mov	a,r3
      0005E2 3D               [12] 1606 	addc	a,r5
      0005E3 FD               [12] 1607 	mov	r5,a
      0005E4 E0               [24] 1608 	movx	a,@dptr
      0005E5 F9               [12] 1609 	mov	r1,a
      0005E6 8C 82            [24] 1610 	mov	dpl,r4
      0005E8 8D 83            [24] 1611 	mov	dph,r5
      0005EA E0               [24] 1612 	movx	a,@dptr
      0005EB FC               [12] 1613 	mov	r4,a
      0005EC E9               [12] 1614 	mov	a,r1
      0005ED B5 04 02         [24] 1615 	cjne	a,ar4,00368$
      0005F0 80 2C            [24] 1616 	sjmp	00168$
      0005F2                       1617 00368$:
                                   1618 ;	life.c:101: u[y][x] = nu[y][x];
      0005F2 EE               [12] 1619 	mov	a,r6
      0005F3 24r04            [12] 1620 	add	a,#_u
      0005F5 FC               [12] 1621 	mov	r4,a
      0005F6 EF               [12] 1622 	mov	a,r7
      0005F7 34s00            [12] 1623 	addc	a,#(_u >> 8)
      0005F9 FD               [12] 1624 	mov	r5,a
      0005FA EA               [12] 1625 	mov	a,r2
      0005FB 2C               [12] 1626 	add	a,r4
      0005FC FC               [12] 1627 	mov	r4,a
      0005FD EB               [12] 1628 	mov	a,r3
      0005FE 3D               [12] 1629 	addc	a,r5
      0005FF FD               [12] 1630 	mov	r5,a
      000600 EE               [12] 1631 	mov	a,r6
      000601 24r04            [12] 1632 	add	a,#_nu
      000603 FE               [12] 1633 	mov	r6,a
      000604 EF               [12] 1634 	mov	a,r7
      000605 34s04            [12] 1635 	addc	a,#(_nu >> 8)
      000607 FF               [12] 1636 	mov	r7,a
      000608 EA               [12] 1637 	mov	a,r2
      000609 2E               [12] 1638 	add	a,r6
      00060A F5 82            [12] 1639 	mov	dpl,a
      00060C EB               [12] 1640 	mov	a,r3
      00060D 3F               [12] 1641 	addc	a,r7
      00060E F5 83            [12] 1642 	mov	dph,a
      000610 E0               [24] 1643 	movx	a,@dptr
      000611 FF               [12] 1644 	mov	r7,a
      000612 8C 82            [24] 1645 	mov	dpl,r4
      000614 8D 83            [24] 1646 	mov	dph,r5
      000616 F0               [24] 1647 	movx	@dptr,a
                                   1648 ;	life.c:102: fixed = 0;
      000617 90r08r18         [24] 1649 	mov	dptr,#_fixed
      00061A E4               [12] 1650 	clr	a
      00061B F0               [24] 1651 	movx	@dptr,a
      00061C A3               [24] 1652 	inc	dptr
      00061D F0               [24] 1653 	movx	@dptr,a
      00061E                       1654 00168$:
                                   1655 ;	life.c:99: for (x = 0; x < W; x++)
      00061E 90r08r04         [24] 1656 	mov	dptr,#_x
      000621 E0               [24] 1657 	movx	a,@dptr
      000622 24 01            [12] 1658 	add	a,#0x01
      000624 F0               [24] 1659 	movx	@dptr,a
      000625 A3               [24] 1660 	inc	dptr
      000626 E0               [24] 1661 	movx	a,@dptr
      000627 34 00            [12] 1662 	addc	a,#0x00
      000629 F0               [24] 1663 	movx	@dptr,a
      00062A 90r08r04         [24] 1664 	mov	dptr,#_x
      00062D E0               [24] 1665 	movx	a,@dptr
      00062E FE               [12] 1666 	mov	r6,a
      00062F A3               [24] 1667 	inc	dptr
      000630 E0               [24] 1668 	movx	a,@dptr
      000631 FF               [12] 1669 	mov	r7,a
      000632 C3               [12] 1670 	clr	c
      000633 EE               [12] 1671 	mov	a,r6
      000634 94 20            [12] 1672 	subb	a,#0x20
      000636 EF               [12] 1673 	mov	a,r7
      000637 64 80            [12] 1674 	xrl	a,#0x80
      000639 94 80            [12] 1675 	subb	a,#0x80
      00063B 50 03            [24] 1676 	jnc	00369$
      00063D 02r05rA8         [24] 1677 	ljmp	00167$
      000640                       1678 00369$:
                                   1679 ;	life.c:98: for (y = 0; y < H; y++)
      000640 90r08r06         [24] 1680 	mov	dptr,#_y
      000643 E0               [24] 1681 	movx	a,@dptr
      000644 24 01            [12] 1682 	add	a,#0x01
      000646 F0               [24] 1683 	movx	@dptr,a
      000647 A3               [24] 1684 	inc	dptr
      000648 E0               [24] 1685 	movx	a,@dptr
      000649 34 00            [12] 1686 	addc	a,#0x00
      00064B F0               [24] 1687 	movx	@dptr,a
      00064C 90r08r06         [24] 1688 	mov	dptr,#_y
      00064F E0               [24] 1689 	movx	a,@dptr
      000650 FE               [12] 1690 	mov	r6,a
      000651 A3               [24] 1691 	inc	dptr
      000652 E0               [24] 1692 	movx	a,@dptr
      000653 FF               [12] 1693 	mov	r7,a
      000654 C3               [12] 1694 	clr	c
      000655 EE               [12] 1695 	mov	a,r6
      000656 94 20            [12] 1696 	subb	a,#0x20
      000658 EF               [12] 1697 	mov	a,r7
      000659 64 80            [12] 1698 	xrl	a,#0x80
      00065B 94 80            [12] 1699 	subb	a,#0x80
      00065D 50 03            [24] 1700 	jnc	00370$
      00065F 02r05rA1         [24] 1701 	ljmp	00169$
      000662                       1702 00370$:
                                   1703 ;	life.c:133: if (fixed) {
      000662 90r08r18         [24] 1704 	mov	dptr,#_fixed
      000665 E0               [24] 1705 	movx	a,@dptr
      000666 F5 F0            [12] 1706 	mov	b,a
      000668 A3               [24] 1707 	inc	dptr
      000669 E0               [24] 1708 	movx	a,@dptr
      00066A 45 F0            [12] 1709 	orl	a,b
      00066C 70 03            [24] 1710 	jnz	00371$
      00066E 02r01r66         [24] 1711 	ljmp	00106$
      000671                       1712 00371$:
                                   1713 ;	life.c:134: printf("DONE\n\r");
      000671 74r32            [12] 1714 	mov	a,#___str_7
      000673 C0 E0            [24] 1715 	push	acc
      000675 74s00            [12] 1716 	mov	a,#(___str_7 >> 8)
      000677 C0 E0            [24] 1717 	push	acc
      000679 74 80            [12] 1718 	mov	a,#0x80
      00067B C0 E0            [24] 1719 	push	acc
      00067D 12r00r00         [24] 1720 	lcall	_printf
      000680 15 81            [12] 1721 	dec	sp
      000682 15 81            [12] 1722 	dec	sp
      000684 15 81            [12] 1723 	dec	sp
                                   1724 ;	life.c:135: (void)getchar();
      000686 12r00r05         [24] 1725 	lcall	_getchar
                                   1726 ;	life.c:136: break;
      000689                       1727 00108$:
                                   1728 ;	life.c:139: if (i1) {
      000689 90r00r02         [24] 1729 	mov	dptr,#_i1
      00068C E0               [24] 1730 	movx	a,@dptr
      00068D F5 F0            [12] 1731 	mov	b,a
      00068F A3               [24] 1732 	inc	dptr
      000690 E0               [24] 1733 	movx	a,@dptr
      000691 45 F0            [12] 1734 	orl	a,b
      000693 70 03            [24] 1735 	jnz	00372$
      000695 02r00r50         [24] 1736 	ljmp	00111$
      000698                       1737 00372$:
                                   1738 ;	life.c:140: printf("BREAK\n\r");
      000698 74r39            [12] 1739 	mov	a,#___str_8
      00069A C0 E0            [24] 1740 	push	acc
      00069C 74s00            [12] 1741 	mov	a,#(___str_8 >> 8)
      00069E C0 E0            [24] 1742 	push	acc
      0006A0 74 80            [12] 1743 	mov	a,#0x80
      0006A2 C0 E0            [24] 1744 	push	acc
      0006A4 12r00r00         [24] 1745 	lcall	_printf
      0006A7 15 81            [12] 1746 	dec	sp
      0006A9 15 81            [12] 1747 	dec	sp
      0006AB 15 81            [12] 1748 	dec	sp
                                   1749 ;	life.c:141: (void)getchar();
      0006AD 12r00r05         [24] 1750 	lcall	_getchar
      0006B0 02r00r50         [24] 1751 	ljmp	00111$
      0006B3                       1752 00113$:
                                   1753 ;	life.c:145: EA = 0;
                                   1754 ;	assignBit
      0006B3 C2 AF            [12] 1755 	clr	_EA
                                   1756 ;	life.c:147: printf("TERM\n\r");
      0006B5 74r41            [12] 1757 	mov	a,#___str_9
      0006B7 C0 E0            [24] 1758 	push	acc
      0006B9 74s00            [12] 1759 	mov	a,#(___str_9 >> 8)
      0006BB C0 E0            [24] 1760 	push	acc
      0006BD 74 80            [12] 1761 	mov	a,#0x80
      0006BF C0 E0            [24] 1762 	push	acc
      0006C1 12r00r00         [24] 1763 	lcall	_printf
      0006C4 15 81            [12] 1764 	dec	sp
      0006C6 15 81            [12] 1765 	dec	sp
      0006C8 15 81            [12] 1766 	dec	sp
                                   1767 ;	life.c:148: (void)getchar();
      0006CA 12r00r05         [24] 1768 	lcall	_getchar
                                   1769 ;	life.c:152: __endasm;
      0006CD 02 00 00         [24] 1770 	ljmp	0
                                   1771 ;	life.c:153: }
      0006D0 22               [24] 1772 	ret
                                   1773 	.area CSEG    (CODE)
                                   1774 	.area CONST   (CODE)
                                   1775 	.area CONST   (CODE)
      000000                       1776 ___str_0:
      000000 25 30 34 78           1777 	.ascii "%04x"
      000004 00                    1778 	.db 0x00
                                   1779 	.area CSEG    (CODE)
                                   1780 	.area CONST   (CODE)
      000005                       1781 ___str_1:
      000005 1B                    1782 	.db 0x1b
      000006 5B 32 4A              1783 	.ascii "[2J"
      000009 1B                    1784 	.db 0x1b
      00000A 5B 6D                 1785 	.ascii "[m"
      00000C 00                    1786 	.db 0x00
                                   1787 	.area CSEG    (CODE)
                                   1788 	.area CONST   (CODE)
      00000D                       1789 ___str_2:
      00000D 0D                    1790 	.db 0x0d
      00000E 0A                    1791 	.db 0x0a
      00000F 00                    1792 	.db 0x00
                                   1793 	.area CSEG    (CODE)
                                   1794 	.area CONST   (CODE)
      000010                       1795 ___str_3:
      000010 1B                    1796 	.db 0x1b
      000011 5B 30 31 6D 5B 5D     1797 	.ascii "[01m[]"
      000017 1B                    1798 	.db 0x1b
      000018 5B 6D                 1799 	.ascii "[m"
      00001A 00                    1800 	.db 0x00
                                   1801 	.area CSEG    (CODE)
                                   1802 	.area CONST   (CODE)
      00001B                       1803 ___str_4:
      00001B 2D 2D                 1804 	.ascii "--"
      00001D 00                    1805 	.db 0x00
                                   1806 	.area CSEG    (CODE)
                                   1807 	.area CONST   (CODE)
      00001E                       1808 ___str_5:
      00001E 1B                    1809 	.db 0x1b
      00001F 5B 32 4A              1810 	.ascii "[2J"
      000022 1B                    1811 	.db 0x1b
      000023 5B 6D 49 4E 49 54     1812 	.ascii "[mINIT"
      000029 0A                    1813 	.db 0x0a
      00002A 0D                    1814 	.db 0x0d
      00002B 00                    1815 	.db 0x00
                                   1816 	.area CSEG    (CODE)
                                   1817 	.area CONST   (CODE)
      00002C                       1818 ___str_6:
      00002C 52 44 59              1819 	.ascii "RDY"
      00002F 0A                    1820 	.db 0x0a
      000030 0D                    1821 	.db 0x0d
      000031 00                    1822 	.db 0x00
                                   1823 	.area CSEG    (CODE)
                                   1824 	.area CONST   (CODE)
      000032                       1825 ___str_7:
      000032 44 4F 4E 45           1826 	.ascii "DONE"
      000036 0A                    1827 	.db 0x0a
      000037 0D                    1828 	.db 0x0d
      000038 00                    1829 	.db 0x00
                                   1830 	.area CSEG    (CODE)
                                   1831 	.area CONST   (CODE)
      000039                       1832 ___str_8:
      000039 42 52 45 41 4B        1833 	.ascii "BREAK"
      00003E 0A                    1834 	.db 0x0a
      00003F 0D                    1835 	.db 0x0d
      000040 00                    1836 	.db 0x00
                                   1837 	.area CSEG    (CODE)
                                   1838 	.area CONST   (CODE)
      000041                       1839 ___str_9:
      000041 54 45 52 4D           1840 	.ascii "TERM"
      000045 0A                    1841 	.db 0x0a
      000046 0D                    1842 	.db 0x0d
      000047 00                    1843 	.db 0x00
                                   1844 	.area CSEG    (CODE)
                                   1845 	.area XINIT   (CODE)
                                   1846 	.area CABS    (ABS,CODE)
