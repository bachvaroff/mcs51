                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar_poll
                                     16 	.globl _getchar
                                     17 	.globl _putchar
                                     18 	.globl _toupper
                                     19 	.globl ___memcpy
                                     20 	.globl _memset
                                     21 	.globl _srand
                                     22 	.globl _rand
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000C8   169 _T2CON	=	0x00c8
                           0000C9   170 _T2MOD	=	0x00c9
                           0000CA   171 _RCAP2L	=	0x00ca
                           0000CB   172 _RCAP2H	=	0x00cb
                           0000CC   173 _TL2	=	0x00cc
                           0000CD   174 _TH2	=	0x00cd
                           0000D0   175 _PSW	=	0x00d0
                           0000E0   176 _ACC	=	0x00e0
                           0000E0   177 _A	=	0x00e0
                           0000F0   178 _B	=	0x00f0
                                    179 ;--------------------------------------------------------
                                    180 ; special function bits
                                    181 ;--------------------------------------------------------
                                    182 	.area RSEG    (ABS,DATA)
      000000                        183 	.org 0x0000
                           000080   184 _P0_0	=	0x0080
                           000081   185 _P0_1	=	0x0081
                           000082   186 _P0_2	=	0x0082
                           000083   187 _P0_3	=	0x0083
                           000084   188 _P0_4	=	0x0084
                           000085   189 _P0_5	=	0x0085
                           000086   190 _P0_6	=	0x0086
                           000087   191 _P0_7	=	0x0087
                           000088   192 _IT0	=	0x0088
                           000089   193 _IE0	=	0x0089
                           00008A   194 _IT1	=	0x008a
                           00008B   195 _IE1	=	0x008b
                           00008C   196 _TR0	=	0x008c
                           00008D   197 _TF0	=	0x008d
                           00008E   198 _TR1	=	0x008e
                           00008F   199 _TF1	=	0x008f
                           000090   200 _P1_0	=	0x0090
                           000091   201 _P1_1	=	0x0091
                           000092   202 _P1_2	=	0x0092
                           000093   203 _P1_3	=	0x0093
                           000094   204 _P1_4	=	0x0094
                           000095   205 _P1_5	=	0x0095
                           000096   206 _P1_6	=	0x0096
                           000097   207 _P1_7	=	0x0097
                           000090   208 _T2	=	0x0090
                           000091   209 _T2EX	=	0x0091
                           000098   210 _RI	=	0x0098
                           000099   211 _TI	=	0x0099
                           00009A   212 _RB8	=	0x009a
                           00009B   213 _TB8	=	0x009b
                           00009C   214 _REN	=	0x009c
                           00009D   215 _SM2	=	0x009d
                           00009E   216 _SM1	=	0x009e
                           00009F   217 _SM0	=	0x009f
                           0000A0   218 _P2_0	=	0x00a0
                           0000A1   219 _P2_1	=	0x00a1
                           0000A2   220 _P2_2	=	0x00a2
                           0000A3   221 _P2_3	=	0x00a3
                           0000A4   222 _P2_4	=	0x00a4
                           0000A5   223 _P2_5	=	0x00a5
                           0000A6   224 _P2_6	=	0x00a6
                           0000A7   225 _P2_7	=	0x00a7
                           0000A8   226 _EX0	=	0x00a8
                           0000A9   227 _ET0	=	0x00a9
                           0000AA   228 _EX1	=	0x00aa
                           0000AB   229 _ET1	=	0x00ab
                           0000AC   230 _ES	=	0x00ac
                           0000AD   231 _ET2	=	0x00ad
                           0000AF   232 _EA	=	0x00af
                           0000B0   233 _P3_0	=	0x00b0
                           0000B1   234 _P3_1	=	0x00b1
                           0000B2   235 _P3_2	=	0x00b2
                           0000B3   236 _P3_3	=	0x00b3
                           0000B4   237 _P3_4	=	0x00b4
                           0000B5   238 _P3_5	=	0x00b5
                           0000B6   239 _P3_6	=	0x00b6
                           0000B7   240 _P3_7	=	0x00b7
                           0000B0   241 _RXD	=	0x00b0
                           0000B1   242 _TXD	=	0x00b1
                           0000B2   243 _INT0	=	0x00b2
                           0000B3   244 _INT1	=	0x00b3
                           0000B4   245 _T0	=	0x00b4
                           0000B5   246 _T1	=	0x00b5
                           0000B6   247 _WR	=	0x00b6
                           0000B7   248 _RD	=	0x00b7
                           0000B8   249 _PX0	=	0x00b8
                           0000B9   250 _PT0	=	0x00b9
                           0000BA   251 _PX1	=	0x00ba
                           0000BB   252 _PT1	=	0x00bb
                           0000BC   253 _PS	=	0x00bc
                           0000BD   254 _PT2	=	0x00bd
                           0000C8   255 _T2CON_0	=	0x00c8
                           0000C9   256 _T2CON_1	=	0x00c9
                           0000CA   257 _T2CON_2	=	0x00ca
                           0000CB   258 _T2CON_3	=	0x00cb
                           0000CC   259 _T2CON_4	=	0x00cc
                           0000CD   260 _T2CON_5	=	0x00cd
                           0000CE   261 _T2CON_6	=	0x00ce
                           0000CF   262 _T2CON_7	=	0x00cf
                           0000C8   263 _CP_RL2	=	0x00c8
                           0000C9   264 _C_T2	=	0x00c9
                           0000CA   265 _TR2	=	0x00ca
                           0000CB   266 _EXEN2	=	0x00cb
                           0000CC   267 _TCLK	=	0x00cc
                           0000CD   268 _RCLK	=	0x00cd
                           0000CE   269 _EXF2	=	0x00ce
                           0000CF   270 _TF2	=	0x00cf
                           0000D0   271 _P	=	0x00d0
                           0000D1   272 _FL	=	0x00d1
                           0000D2   273 _OV	=	0x00d2
                           0000D3   274 _RS0	=	0x00d3
                           0000D4   275 _RS1	=	0x00d4
                           0000D5   276 _F0	=	0x00d5
                           0000D6   277 _AC	=	0x00d6
                           0000D7   278 _CY	=	0x00d7
                                    279 ;--------------------------------------------------------
                                    280 ; overlayable register banks
                                    281 ;--------------------------------------------------------
                                    282 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        283 	.ds 8
                                    284 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable bit register bank
                                    288 ;--------------------------------------------------------
                                    289 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        290 bits:
      000000                        291 	.ds 1
                           008000   292 	b0 = bits[0]
                           008100   293 	b1 = bits[1]
                           008200   294 	b2 = bits[2]
                           008300   295 	b3 = bits[3]
                           008400   296 	b4 = bits[4]
                           008500   297 	b5 = bits[5]
                           008600   298 	b6 = bits[6]
                           008700   299 	b7 = bits[7]
                                    300 ;--------------------------------------------------------
                                    301 ; internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area DSEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; overlayable items in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 ;--------------------------------------------------------
                                    308 ; Stack segment in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 	.area	SSEG
      000000                        311 __start__stack:
      000000                        312 	.ds	1
                                    313 
                                    314 ;--------------------------------------------------------
                                    315 ; indirectly addressable internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area ISEG    (DATA)
      000000                        318 _digits:
      000000                        319 	.ds 16
      000010                        320 _i0:
      000010                        321 	.ds 1
      000011                        322 _i1:
      000011                        323 	.ds 1
      000012                        324 _OE76:
      000012                        325 	.ds 1
      000013                        326 _x:
      000013                        327 	.ds 2
      000015                        328 _y:
      000015                        329 	.ds 2
      000017                        330 _j:
      000017                        331 	.ds 2
      000019                        332 _c:
      000019                        333 	.ds 2
      00001B                        334 _n:
      00001B                        335 	.ds 1
      00001C                        336 _fixed:
      00001C                        337 	.ds 1
      00001D                        338 _cycle2:
      00001D                        339 	.ds 1
      00001E                        340 _x1:
      00001E                        341 	.ds 2
      000020                        342 _y1:
      000020                        343 	.ds 2
      000022                        344 _generation:
      000022                        345 	.ds 4
                                    346 ;--------------------------------------------------------
                                    347 ; absolute internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area IABS    (ABS,DATA)
                                    350 	.area IABS    (ABS,DATA)
                                    351 ;--------------------------------------------------------
                                    352 ; bit data
                                    353 ;--------------------------------------------------------
                                    354 	.area BSEG    (BIT)
                                    355 ;--------------------------------------------------------
                                    356 ; paged external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area PSEG    (PAG,XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XSEG    (XDATA)
                           008000   363 _RND	=	0x8000
                           00F006   364 _OEreg	=	0xf006
      000000                        365 _iu:
      000000                        366 	.ds 9216
      002400                        367 _pu:
      002400                        368 	.ds 9216
      004800                        369 _u:
      004800                        370 	.ds 9216
      006C00                        371 _nu:
      006C00                        372 	.ds 9216
                                    373 ;--------------------------------------------------------
                                    374 ; absolute external ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XABS    (ABS,XDATA)
                                    377 ;--------------------------------------------------------
                                    378 ; external initialized ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area XISEG   (XDATA)
                                    381 	.area HOME    (CODE)
                                    382 	.area GSINIT0 (CODE)
                                    383 	.area GSINIT1 (CODE)
                                    384 	.area GSINIT2 (CODE)
                                    385 	.area GSINIT3 (CODE)
                                    386 	.area GSINIT4 (CODE)
                                    387 	.area GSINIT5 (CODE)
                                    388 	.area GSINIT  (CODE)
                                    389 	.area GSFINAL (CODE)
                                    390 	.area CSEG    (CODE)
                                    391 ;--------------------------------------------------------
                                    392 ; interrupt vector 
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
      000000                        395 __interrupt_vect:
      000000 02r00r00         [24]  396 	ljmp	__sdcc_gsinit_startup
      000003 02r00r22         [24]  397 	ljmp	_int0
      000006                        398 	.ds	5
      00000B 32               [24]  399 	reti
      00000C                        400 	.ds	7
      000013 02r00r2E         [24]  401 	ljmp	_int1
                                    402 ;--------------------------------------------------------
                                    403 ; global & static initialisations
                                    404 ;--------------------------------------------------------
                                    405 	.area HOME    (CODE)
                                    406 	.area GSINIT  (CODE)
                                    407 	.area GSFINAL (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.globl __sdcc_gsinit_startup
                                    410 	.globl __sdcc_program_startup
                                    411 	.globl __start__stack
                                    412 	.globl __mcs51_genXINIT
                                    413 	.globl __mcs51_genXRAMCLEAR
                                    414 	.globl __mcs51_genRAMCLEAR
                                    415 ;	life.c:44: __idata static const char digits[16] = {
      000000 78r00            [12]  416 	mov	r0,#_digits
      000002 76 30            [12]  417 	mov	@r0,#0x30
      000004 78r01            [12]  418 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  419 	mov	@r0,#0x31
      000008 78r02            [12]  420 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  421 	mov	@r0,#0x32
      00000C 78r03            [12]  422 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  423 	mov	@r0,#0x33
      000010 78r04            [12]  424 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  425 	mov	@r0,#0x34
      000014 78r05            [12]  426 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  427 	mov	@r0,#0x35
      000018 78r06            [12]  428 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  429 	mov	@r0,#0x36
      00001C 78r07            [12]  430 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  431 	mov	@r0,#0x37
      000020 78r08            [12]  432 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  433 	mov	@r0,#0x38
      000024 78r09            [12]  434 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  435 	mov	@r0,#0x39
      000028 78r0A            [12]  436 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  437 	mov	@r0,#0x41
      00002C 78r0B            [12]  438 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  439 	mov	@r0,#0x42
      000030 78r0C            [12]  440 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  441 	mov	@r0,#0x43
      000034 78r0D            [12]  442 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  443 	mov	@r0,#0x44
      000038 78r0E            [12]  444 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  445 	mov	@r0,#0x45
      00003C 78r0F            [12]  446 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  447 	mov	@r0,#0x46
                                    448 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  449 	ljmp	__sdcc_program_startup
                                    450 ;--------------------------------------------------------
                                    451 ; Home
                                    452 ;--------------------------------------------------------
                                    453 	.area HOME    (CODE)
                                    454 	.area HOME    (CODE)
      000016                        455 __sdcc_program_startup:
      000016 02r02r69         [24]  456 	ljmp	_main
                                    457 ;	return from main will return to caller
                                    458 ;--------------------------------------------------------
                                    459 ; code
                                    460 ;--------------------------------------------------------
                                    461 	.area CSEG    (CODE)
                                    462 ;------------------------------------------------------------
                                    463 ;Allocation info for local variables in function 'putchar'
                                    464 ;------------------------------------------------------------
                                    465 ;c                         Allocated to registers 
                                    466 ;------------------------------------------------------------
                                    467 ;	life.c:10: int putchar(int c) __naked {
                                    468 ;	-----------------------------------------
                                    469 ;	 function putchar
                                    470 ;	-----------------------------------------
      000000                        471 _putchar:
                                    472 ;	naked function: no prologue.
                                    473 ;	life.c:15: __endasm;
      000000 E5 82            [12]  474 	mov	a, dpl
      000002 02 00 30         [24]  475 	ljmp	0x0030
                                    476 ;	life.c:16: }
                                    477 ;	naked function: no epilogue.
                                    478 ;------------------------------------------------------------
                                    479 ;Allocation info for local variables in function 'getchar'
                                    480 ;------------------------------------------------------------
                                    481 ;	life.c:18: int getchar(void) __naked {
                                    482 ;	-----------------------------------------
                                    483 ;	 function getchar
                                    484 ;	-----------------------------------------
      000005                        485 _getchar:
                                    486 ;	naked function: no prologue.
                                    487 ;	life.c:24: __endasm;
      000005 12 00 32         [24]  488 	lcall	0x0032
      000008 F5 82            [12]  489 	mov	dpl, a
      00000A 75 83 00         [24]  490 	mov	dph, #0
      00000D 22               [24]  491 	ret
                                    492 ;	life.c:25: }
                                    493 ;	naked function: no epilogue.
                                    494 ;------------------------------------------------------------
                                    495 ;Allocation info for local variables in function 'getchar_poll'
                                    496 ;------------------------------------------------------------
                                    497 ;	life.c:27: int getchar_poll(void) __naked {
                                    498 ;	-----------------------------------------
                                    499 ;	 function getchar_poll
                                    500 ;	-----------------------------------------
      00000E                        501 _getchar_poll:
                                    502 ;	naked function: no prologue.
                                    503 ;	life.c:39: __endasm;
      00000E 74 FF            [12]  504 	mov	a, #0xff
      000010 F5 F0            [12]  505 	mov	b, a
      000012 30 98 07         [24]  506 	jnb	ri, nochar
      000015 C2 98            [12]  507 	clr	ri
      000017 E5 99            [12]  508 	mov	a, sbuf
      000019 75 F0 00         [24]  509 	mov	b, #0
      00001C                        510 	nochar:
      00001C F5 82            [12]  511 	mov	dpl, a
      00001E 85 F0 83         [24]  512 	mov	dph, b
      000021 22               [24]  513 	ret
                                    514 ;	life.c:40: }
                                    515 ;	naked function: no epilogue.
                                    516 ;------------------------------------------------------------
                                    517 ;Allocation info for local variables in function 'int0'
                                    518 ;------------------------------------------------------------
                                    519 ;	life.c:73: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    520 ;	-----------------------------------------
                                    521 ;	 function int0
                                    522 ;	-----------------------------------------
      000022                        523 _int0:
                           00000F   524 	ar7 = 0x0f
                           00000E   525 	ar6 = 0x0e
                           00000D   526 	ar5 = 0x0d
                           00000C   527 	ar4 = 0x0c
                           00000B   528 	ar3 = 0x0b
                           00000A   529 	ar2 = 0x0a
                           000009   530 	ar1 = 0x09
                           000008   531 	ar0 = 0x08
      000022 C0 D0            [24]  532 	push	psw
      000024 75 D0 08         [24]  533 	mov	psw,#0x08
                                    534 ;	life.c:74: i0 = 1;
      000027 78r10            [12]  535 	mov	r0,#_i0
      000029 76 01            [12]  536 	mov	@r0,#0x01
                                    537 ;	life.c:75: }
      00002B D0 D0            [24]  538 	pop	psw
      00002D 32               [24]  539 	reti
                                    540 ;	eliminated unneeded push/pop dpl
                                    541 ;	eliminated unneeded push/pop dph
                                    542 ;	eliminated unneeded push/pop b
                                    543 ;	eliminated unneeded push/pop acc
                                    544 ;------------------------------------------------------------
                                    545 ;Allocation info for local variables in function 'int1'
                                    546 ;------------------------------------------------------------
                                    547 ;	life.c:77: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    548 ;	-----------------------------------------
                                    549 ;	 function int1
                                    550 ;	-----------------------------------------
      00002E                        551 _int1:
      00002E C0 D0            [24]  552 	push	psw
      000030 75 D0 08         [24]  553 	mov	psw,#0x08
                                    554 ;	life.c:78: i1 = 1;
      000033 78r11            [12]  555 	mov	r0,#_i1
      000035 76 01            [12]  556 	mov	@r0,#0x01
                                    557 ;	life.c:79: }
      000037 D0 D0            [24]  558 	pop	psw
      000039 32               [24]  559 	reti
                                    560 ;	eliminated unneeded push/pop dpl
                                    561 ;	eliminated unneeded push/pop dph
                                    562 ;	eliminated unneeded push/pop b
                                    563 ;	eliminated unneeded push/pop acc
                                    564 ;------------------------------------------------------------
                                    565 ;Allocation info for local variables in function 'flashOE'
                                    566 ;------------------------------------------------------------
                                    567 ;	life.c:89: static void flashOE(void) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function flashOE
                                    570 ;	-----------------------------------------
      00003A                        571 _flashOE:
                           000007   572 	ar7 = 0x07
                           000006   573 	ar6 = 0x06
                           000005   574 	ar5 = 0x05
                           000004   575 	ar4 = 0x04
                           000003   576 	ar3 = 0x03
                           000002   577 	ar2 = 0x02
                           000001   578 	ar1 = 0x01
                           000000   579 	ar0 = 0x00
                                    580 ;	life.c:90: P1_7 = 0;
                                    581 ;	assignBit
      00003A C2 97            [12]  582 	clr	_P1_7
                                    583 ;	life.c:95: __endasm;
      00003C 00               [12]  584 	nop
      00003D 00               [12]  585 	nop
      00003E 00               [12]  586 	nop
                                    587 ;	life.c:96: OEreg = OE76;
      00003F 78r12            [12]  588 	mov	r0,#_OE76
      000041 90 F0 06         [24]  589 	mov	dptr,#_OEreg
      000044 E6               [12]  590 	mov	a,@r0
      000045 F0               [24]  591 	movx	@dptr,a
                                    592 ;	life.c:97: P1_7 = 1;
                                    593 ;	assignBit
      000046 D2 97            [12]  594 	setb	_P1_7
                                    595 ;	life.c:102: __endasm;
      000048 00               [12]  596 	nop
      000049 00               [12]  597 	nop
      00004A 00               [12]  598 	nop
                                    599 ;	life.c:104: return;
                                    600 ;	life.c:105: }
      00004B 22               [24]  601 	ret
                                    602 ;------------------------------------------------------------
                                    603 ;Allocation info for local variables in function 'show'
                                    604 ;------------------------------------------------------------
                                    605 ;hdr                       Allocated to registers r7 
                                    606 ;__1310720005              Allocated to registers 
                                    607 ;s                         Allocated to registers r4 r5 r6 
                                    608 ;__1966080007              Allocated to registers 
                                    609 ;s                         Allocated to registers r5 r6 r7 
                                    610 ;__1310720001              Allocated to registers r6 r7 
                                    611 ;a                         Allocated to registers 
                                    612 ;__1310720003              Allocated to registers r6 r7 
                                    613 ;a                         Allocated to registers 
                                    614 ;__1966080010              Allocated to registers 
                                    615 ;s                         Allocated to registers r5 r6 r7 
                                    616 ;__2621440013              Allocated to registers 
                                    617 ;s                         Allocated to registers r5 r6 r7 
                                    618 ;__1310720015              Allocated to registers 
                                    619 ;s                         Allocated to registers r5 r6 r7 
                                    620 ;------------------------------------------------------------
                                    621 ;	life.c:141: void show(char hdr) {
                                    622 ;	-----------------------------------------
                                    623 ;	 function show
                                    624 ;	-----------------------------------------
      00004C                        625 _show:
      00004C AF 82            [24]  626 	mov	r7,dpl
                                    627 ;	life.c:142: printstr("\033[?25l");
      00004E 7Cr00            [12]  628 	mov	r4,#___str_0
      000050 7Ds00            [12]  629 	mov	r5,#(___str_0 >> 8)
      000052 7E 80            [12]  630 	mov	r6,#0x80
                                    631 ;	life.c:68: return;
      000054                        632 00125$:
                                    633 ;	life.c:66: for (; *s; s++) putchar(*s);
      000054 8C 82            [24]  634 	mov	dpl,r4
      000056 8D 83            [24]  635 	mov	dph,r5
      000058 8E F0            [24]  636 	mov	b,r6
      00005A 12r00r00         [24]  637 	lcall	__gptrget
      00005D FB               [12]  638 	mov	r3,a
      00005E 60 10            [24]  639 	jz	00109$
      000060 7A 00            [12]  640 	mov	r2,#0x00
      000062 8B 82            [24]  641 	mov	dpl,r3
      000064 8A 83            [24]  642 	mov	dph,r2
      000066 12r00r00         [24]  643 	lcall	_putchar
      000069 0C               [12]  644 	inc	r4
                                    645 ;	life.c:142: printstr("\033[?25l");
      00006A BC 00 E7         [24]  646 	cjne	r4,#0x00,00125$
      00006D 0D               [12]  647 	inc	r5
      00006E 80 E4            [24]  648 	sjmp	00125$
      000070                        649 00109$:
                                    650 ;	life.c:144: if (hdr) {
      000070 EF               [12]  651 	mov	a,r7
      000071 70 03            [24]  652 	jnz	00220$
      000073 02r01rAC         [24]  653 	ljmp	00102$
      000076                        654 00220$:
                                    655 ;	life.c:145: printstr("\033[2JGEN ");
      000076 7Dr07            [12]  656 	mov	r5,#___str_1
      000078 7Es00            [12]  657 	mov	r6,#(___str_1 >> 8)
      00007A 7F 80            [12]  658 	mov	r7,#0x80
                                    659 ;	life.c:68: return;
      00007C                        660 00128$:
                                    661 ;	life.c:66: for (; *s; s++) putchar(*s);
      00007C 8D 82            [24]  662 	mov	dpl,r5
      00007E 8E 83            [24]  663 	mov	dph,r6
      000080 8F F0            [24]  664 	mov	b,r7
      000082 12r00r00         [24]  665 	lcall	__gptrget
      000085 FC               [12]  666 	mov	r4,a
      000086 60 10            [24]  667 	jz	00111$
      000088 7B 00            [12]  668 	mov	r3,#0x00
      00008A 8C 82            [24]  669 	mov	dpl,r4
      00008C 8B 83            [24]  670 	mov	dph,r3
      00008E 12r00r00         [24]  671 	lcall	_putchar
      000091 0D               [12]  672 	inc	r5
                                    673 ;	life.c:145: printstr("\033[2JGEN ");
      000092 BD 00 E7         [24]  674 	cjne	r5,#0x00,00128$
      000095 0E               [12]  675 	inc	r6
      000096 80 E4            [24]  676 	sjmp	00128$
      000098                        677 00111$:
                                    678 ;	life.c:135: print16x(generation[1]);
      000098 78r24            [12]  679 	mov	r0,#(_generation + 0x0002)
      00009A 86 06            [24]  680 	mov	ar6,@r0
      00009C 08               [12]  681 	inc	r0
                                    682 ;	life.c:57: putchar(digits[(a >> 12) & 0xf]);
      00009D E6               [12]  683 	mov	a,@r0
      00009E FF               [12]  684 	mov	r7,a
      00009F C4               [12]  685 	swap	a
      0000A0 54 0F            [12]  686 	anl	a,#0x0f
      0000A2 FC               [12]  687 	mov	r4,a
      0000A3 53 04 0F         [24]  688 	anl	ar4,#0x0f
      0000A6 EC               [12]  689 	mov	a,r4
      0000A7 24r00            [12]  690 	add	a,#_digits
      0000A9 F9               [12]  691 	mov	r1,a
      0000AA 87 05            [24]  692 	mov	ar5,@r1
      0000AC 7C 00            [12]  693 	mov	r4,#0x00
      0000AE 8D 82            [24]  694 	mov	dpl,r5
      0000B0 8C 83            [24]  695 	mov	dph,r4
      0000B2 12r00r00         [24]  696 	lcall	_putchar
                                    697 ;	life.c:58: putchar(digits[(a >> 8) & 0xf]);
      0000B5 8F 05            [24]  698 	mov	ar5,r7
      0000B7 53 05 0F         [24]  699 	anl	ar5,#0x0f
      0000BA ED               [12]  700 	mov	a,r5
      0000BB 24r00            [12]  701 	add	a,#_digits
      0000BD F9               [12]  702 	mov	r1,a
      0000BE 87 05            [24]  703 	mov	ar5,@r1
      0000C0 7C 00            [12]  704 	mov	r4,#0x00
      0000C2 8D 82            [24]  705 	mov	dpl,r5
      0000C4 8C 83            [24]  706 	mov	dph,r4
      0000C6 12r00r00         [24]  707 	lcall	_putchar
                                    708 ;	life.c:59: putchar(digits[(a >> 4) & 0xf]);
      0000C9 8E 04            [24]  709 	mov	ar4,r6
      0000CB EF               [12]  710 	mov	a,r7
      0000CC C4               [12]  711 	swap	a
      0000CD CC               [12]  712 	xch	a,r4
      0000CE C4               [12]  713 	swap	a
      0000CF 54 0F            [12]  714 	anl	a,#0x0f
      0000D1 6C               [12]  715 	xrl	a,r4
      0000D2 CC               [12]  716 	xch	a,r4
      0000D3 54 0F            [12]  717 	anl	a,#0x0f
      0000D5 CC               [12]  718 	xch	a,r4
      0000D6 6C               [12]  719 	xrl	a,r4
      0000D7 CC               [12]  720 	xch	a,r4
      0000D8 53 04 0F         [24]  721 	anl	ar4,#0x0f
      0000DB EC               [12]  722 	mov	a,r4
      0000DC 24r00            [12]  723 	add	a,#_digits
      0000DE F9               [12]  724 	mov	r1,a
      0000DF 87 05            [24]  725 	mov	ar5,@r1
      0000E1 7C 00            [12]  726 	mov	r4,#0x00
      0000E3 8D 82            [24]  727 	mov	dpl,r5
      0000E5 8C 83            [24]  728 	mov	dph,r4
      0000E7 12r00r00         [24]  729 	lcall	_putchar
                                    730 ;	life.c:60: putchar(digits[a & 0xf]);
      0000EA 53 06 0F         [24]  731 	anl	ar6,#0x0f
      0000ED EE               [12]  732 	mov	a,r6
      0000EE 24r00            [12]  733 	add	a,#_digits
      0000F0 F9               [12]  734 	mov	r1,a
      0000F1 87 07            [24]  735 	mov	ar7,@r1
      0000F3 7E 00            [12]  736 	mov	r6,#0x00
      0000F5 8F 82            [24]  737 	mov	dpl,r7
      0000F7 8E 83            [24]  738 	mov	dph,r6
      0000F9 12r00r00         [24]  739 	lcall	_putchar
                                    740 ;	life.c:136: print16x(generation[0]);
      0000FC 78r22            [12]  741 	mov	r0,#_generation
      0000FE 86 06            [24]  742 	mov	ar6,@r0
      000100 08               [12]  743 	inc	r0
                                    744 ;	life.c:57: putchar(digits[(a >> 12) & 0xf]);
      000101 E6               [12]  745 	mov	a,@r0
      000102 FF               [12]  746 	mov	r7,a
      000103 C4               [12]  747 	swap	a
      000104 54 0F            [12]  748 	anl	a,#0x0f
      000106 FC               [12]  749 	mov	r4,a
      000107 53 04 0F         [24]  750 	anl	ar4,#0x0f
      00010A EC               [12]  751 	mov	a,r4
      00010B 24r00            [12]  752 	add	a,#_digits
      00010D F9               [12]  753 	mov	r1,a
      00010E 87 05            [24]  754 	mov	ar5,@r1
      000110 7C 00            [12]  755 	mov	r4,#0x00
      000112 8D 82            [24]  756 	mov	dpl,r5
      000114 8C 83            [24]  757 	mov	dph,r4
      000116 12r00r00         [24]  758 	lcall	_putchar
                                    759 ;	life.c:58: putchar(digits[(a >> 8) & 0xf]);
      000119 8F 05            [24]  760 	mov	ar5,r7
      00011B 53 05 0F         [24]  761 	anl	ar5,#0x0f
      00011E ED               [12]  762 	mov	a,r5
      00011F 24r00            [12]  763 	add	a,#_digits
      000121 F9               [12]  764 	mov	r1,a
      000122 87 05            [24]  765 	mov	ar5,@r1
      000124 7C 00            [12]  766 	mov	r4,#0x00
      000126 8D 82            [24]  767 	mov	dpl,r5
      000128 8C 83            [24]  768 	mov	dph,r4
      00012A 12r00r00         [24]  769 	lcall	_putchar
                                    770 ;	life.c:59: putchar(digits[(a >> 4) & 0xf]);
      00012D 8E 04            [24]  771 	mov	ar4,r6
      00012F EF               [12]  772 	mov	a,r7
      000130 C4               [12]  773 	swap	a
      000131 CC               [12]  774 	xch	a,r4
      000132 C4               [12]  775 	swap	a
      000133 54 0F            [12]  776 	anl	a,#0x0f
      000135 6C               [12]  777 	xrl	a,r4
      000136 CC               [12]  778 	xch	a,r4
      000137 54 0F            [12]  779 	anl	a,#0x0f
      000139 CC               [12]  780 	xch	a,r4
      00013A 6C               [12]  781 	xrl	a,r4
      00013B CC               [12]  782 	xch	a,r4
      00013C 53 04 0F         [24]  783 	anl	ar4,#0x0f
      00013F EC               [12]  784 	mov	a,r4
      000140 24r00            [12]  785 	add	a,#_digits
      000142 F9               [12]  786 	mov	r1,a
      000143 87 05            [24]  787 	mov	ar5,@r1
      000145 7C 00            [12]  788 	mov	r4,#0x00
      000147 8D 82            [24]  789 	mov	dpl,r5
      000149 8C 83            [24]  790 	mov	dph,r4
      00014B 12r00r00         [24]  791 	lcall	_putchar
                                    792 ;	life.c:60: putchar(digits[a & 0xf]);
      00014E 53 06 0F         [24]  793 	anl	ar6,#0x0f
      000151 EE               [12]  794 	mov	a,r6
      000152 24r00            [12]  795 	add	a,#_digits
      000154 F9               [12]  796 	mov	r1,a
      000155 87 07            [24]  797 	mov	ar7,@r1
      000157 7E 00            [12]  798 	mov	r6,#0x00
      000159 8F 82            [24]  799 	mov	dpl,r7
      00015B 8E 83            [24]  800 	mov	dph,r6
      00015D 12r00r00         [24]  801 	lcall	_putchar
                                    802 ;	life.c:147: printstr("\r\n");
      000160 7Dr10            [12]  803 	mov	r5,#___str_2
      000162 7Es00            [12]  804 	mov	r6,#(___str_2 >> 8)
      000164 7F 80            [12]  805 	mov	r7,#0x80
                                    806 ;	life.c:68: return;
      000166                        807 00131$:
                                    808 ;	life.c:66: for (; *s; s++) putchar(*s);
      000166 8D 82            [24]  809 	mov	dpl,r5
      000168 8E 83            [24]  810 	mov	dph,r6
      00016A 8F F0            [24]  811 	mov	b,r7
      00016C 12r00r00         [24]  812 	lcall	__gptrget
      00016F FC               [12]  813 	mov	r4,a
      000170 60 10            [24]  814 	jz	00116$
      000172 7B 00            [12]  815 	mov	r3,#0x00
      000174 8C 82            [24]  816 	mov	dpl,r4
      000176 8B 83            [24]  817 	mov	dph,r3
      000178 12r00r00         [24]  818 	lcall	_putchar
      00017B 0D               [12]  819 	inc	r5
                                    820 ;	life.c:147: printstr("\r\n");
      00017C BD 00 E7         [24]  821 	cjne	r5,#0x00,00131$
      00017F 0E               [12]  822 	inc	r6
      000180 80 E4            [24]  823 	sjmp	00131$
      000182                        824 00116$:
                                    825 ;	life.c:128: generation[0]++;
      000182 78r22            [12]  826 	mov	r0,#_generation
      000184 86 06            [24]  827 	mov	ar6,@r0
      000186 08               [12]  828 	inc	r0
      000187 86 07            [24]  829 	mov	ar7,@r0
      000189 0E               [12]  830 	inc	r6
      00018A BE 00 01         [24]  831 	cjne	r6,#0x00,00225$
      00018D 0F               [12]  832 	inc	r7
      00018E                        833 00225$:
      00018E 78r22            [12]  834 	mov	r0,#_generation
      000190 A6 06            [24]  835 	mov	@r0,ar6
      000192 08               [12]  836 	inc	r0
      000193 A6 07            [24]  837 	mov	@r0,ar7
                                    838 ;	life.c:129: if (!generation[0]) generation[1]++;
      000195 EE               [12]  839 	mov	a,r6
      000196 4F               [12]  840 	orl	a,r7
      000197 70 13            [24]  841 	jnz	00102$
      000199 78r24            [12]  842 	mov	r0,#(_generation + 0x0002)
      00019B 86 06            [24]  843 	mov	ar6,@r0
      00019D 08               [12]  844 	inc	r0
      00019E 86 07            [24]  845 	mov	ar7,@r0
      0001A0 0E               [12]  846 	inc	r6
      0001A1 BE 00 01         [24]  847 	cjne	r6,#0x00,00227$
      0001A4 0F               [12]  848 	inc	r7
      0001A5                        849 00227$:
      0001A5 78r24            [12]  850 	mov	r0,#(_generation + 0x0002)
      0001A7 A6 06            [24]  851 	mov	@r0,ar6
      0001A9 08               [12]  852 	inc	r0
      0001AA A6 07            [24]  853 	mov	@r0,ar7
                                    854 ;	life.c:148: updategen();
      0001AC                        855 00102$:
                                    856 ;	life.c:151: for (x = 0; x < W; x++) {
      0001AC 78r13            [12]  857 	mov	r0,#_x
      0001AE E4               [12]  858 	clr	a
      0001AF F6               [12]  859 	mov	@r0,a
      0001B0 08               [12]  860 	inc	r0
      0001B1 F6               [12]  861 	mov	@r0,a
      0001B2                        862 00138$:
                                    863 ;	life.c:152: for (y = 0; y < H; y++)
      0001B2 78r15            [12]  864 	mov	r0,#_y
      0001B4 E4               [12]  865 	clr	a
      0001B5 F6               [12]  866 	mov	@r0,a
      0001B6 08               [12]  867 	inc	r0
      0001B7 F6               [12]  868 	mov	@r0,a
      0001B8                        869 00133$:
                                    870 ;	life.c:153: if (u[A2D(W, y, x)]) putchar('1');
      0001B8 78r15            [12]  871 	mov	r0,#_y
      0001BA E6               [12]  872 	mov	a,@r0
      0001BB C0 E0            [24]  873 	push	acc
      0001BD 08               [12]  874 	inc	r0
      0001BE E6               [12]  875 	mov	a,@r0
      0001BF C0 E0            [24]  876 	push	acc
      0001C1 90 00 30         [24]  877 	mov	dptr,#0x0030
      0001C4 12r00r00         [24]  878 	lcall	__mulint
      0001C7 AE 82            [24]  879 	mov	r6,dpl
      0001C9 AF 83            [24]  880 	mov	r7,dph
      0001CB 15 81            [12]  881 	dec	sp
      0001CD 15 81            [12]  882 	dec	sp
      0001CF 78r13            [12]  883 	mov	r0,#_x
      0001D1 E6               [12]  884 	mov	a,@r0
      0001D2 2E               [12]  885 	add	a,r6
      0001D3 FE               [12]  886 	mov	r6,a
      0001D4 08               [12]  887 	inc	r0
      0001D5 E6               [12]  888 	mov	a,@r0
      0001D6 3F               [12]  889 	addc	a,r7
      0001D7 FF               [12]  890 	mov	r7,a
      0001D8 EE               [12]  891 	mov	a,r6
      0001D9 24r00            [12]  892 	add	a,#_u
      0001DB FE               [12]  893 	mov	r6,a
      0001DC EF               [12]  894 	mov	a,r7
      0001DD 34s48            [12]  895 	addc	a,#(_u >> 8)
      0001DF FF               [12]  896 	mov	r7,a
      0001E0 8E 82            [24]  897 	mov	dpl,r6
      0001E2 8F 83            [24]  898 	mov	dph,r7
      0001E4 E0               [24]  899 	movx	a,@dptr
      0001E5 60 08            [24]  900 	jz	00104$
      0001E7 90 00 31         [24]  901 	mov	dptr,#0x0031
      0001EA 12r00r00         [24]  902 	lcall	_putchar
      0001ED 80 06            [24]  903 	sjmp	00134$
      0001EF                        904 00104$:
                                    905 ;	life.c:154: else putchar('0');
      0001EF 90 00 30         [24]  906 	mov	dptr,#0x0030
      0001F2 12r00r00         [24]  907 	lcall	_putchar
      0001F5                        908 00134$:
                                    909 ;	life.c:152: for (y = 0; y < H; y++)
      0001F5 78r15            [12]  910 	mov	r0,#_y
      0001F7 06               [12]  911 	inc	@r0
      0001F8 B6 00 02         [24]  912 	cjne	@r0,#0x00,00229$
      0001FB 08               [12]  913 	inc	r0
      0001FC 06               [12]  914 	inc	@r0
      0001FD                        915 00229$:
      0001FD 78r15            [12]  916 	mov	r0,#_y
      0001FF C3               [12]  917 	clr	c
      000200 E6               [12]  918 	mov	a,@r0
      000201 94 C0            [12]  919 	subb	a,#0xc0
      000203 08               [12]  920 	inc	r0
      000204 E6               [12]  921 	mov	a,@r0
      000205 64 80            [12]  922 	xrl	a,#0x80
      000207 94 80            [12]  923 	subb	a,#0x80
      000209 40 AD            [24]  924 	jc	00133$
                                    925 ;	life.c:155: printstr("\r\n");
      00020B 7Dr10            [12]  926 	mov	r5,#___str_2
      00020D 7Es00            [12]  927 	mov	r6,#(___str_2 >> 8)
      00020F 7F 80            [12]  928 	mov	r7,#0x80
                                    929 ;	life.c:68: return;
      000211                        930 00136$:
                                    931 ;	life.c:66: for (; *s; s++) putchar(*s);
      000211 8D 82            [24]  932 	mov	dpl,r5
      000213 8E 83            [24]  933 	mov	dph,r6
      000215 8F F0            [24]  934 	mov	b,r7
      000217 12r00r00         [24]  935 	lcall	__gptrget
      00021A FC               [12]  936 	mov	r4,a
      00021B 60 10            [24]  937 	jz	00121$
      00021D 7B 00            [12]  938 	mov	r3,#0x00
      00021F 8C 82            [24]  939 	mov	dpl,r4
      000221 8B 83            [24]  940 	mov	dph,r3
      000223 12r00r00         [24]  941 	lcall	_putchar
      000226 0D               [12]  942 	inc	r5
                                    943 ;	life.c:155: printstr("\r\n");
      000227 BD 00 E7         [24]  944 	cjne	r5,#0x00,00136$
      00022A 0E               [12]  945 	inc	r6
      00022B 80 E4            [24]  946 	sjmp	00136$
      00022D                        947 00121$:
                                    948 ;	life.c:151: for (x = 0; x < W; x++) {
      00022D 78r13            [12]  949 	mov	r0,#_x
      00022F 06               [12]  950 	inc	@r0
      000230 B6 00 02         [24]  951 	cjne	@r0,#0x00,00233$
      000233 08               [12]  952 	inc	r0
      000234 06               [12]  953 	inc	@r0
      000235                        954 00233$:
      000235 78r13            [12]  955 	mov	r0,#_x
      000237 C3               [12]  956 	clr	c
      000238 E6               [12]  957 	mov	a,@r0
      000239 94 30            [12]  958 	subb	a,#0x30
      00023B 08               [12]  959 	inc	r0
      00023C E6               [12]  960 	mov	a,@r0
      00023D 64 80            [12]  961 	xrl	a,#0x80
      00023F 94 80            [12]  962 	subb	a,#0x80
      000241 50 03            [24]  963 	jnc	00234$
      000243 02r01rB2         [24]  964 	ljmp	00138$
      000246                        965 00234$:
                                    966 ;	life.c:158: printstr("\033[?25h");
      000246 7Dr13            [12]  967 	mov	r5,#___str_3
      000248 7Es00            [12]  968 	mov	r6,#(___str_3 >> 8)
      00024A 7F 80            [12]  969 	mov	r7,#0x80
                                    970 ;	life.c:68: return;
      00024C                        971 00141$:
                                    972 ;	life.c:66: for (; *s; s++) putchar(*s);
      00024C 8D 82            [24]  973 	mov	dpl,r5
      00024E 8E 83            [24]  974 	mov	dph,r6
      000250 8F F0            [24]  975 	mov	b,r7
      000252 12r00r00         [24]  976 	lcall	__gptrget
      000255 FC               [12]  977 	mov	r4,a
      000256 60 10            [24]  978 	jz	00123$
      000258 7B 00            [12]  979 	mov	r3,#0x00
      00025A 8C 82            [24]  980 	mov	dpl,r4
      00025C 8B 83            [24]  981 	mov	dph,r3
      00025E 12r00r00         [24]  982 	lcall	_putchar
      000261 0D               [12]  983 	inc	r5
                                    984 ;	life.c:158: printstr("\033[?25h");
      000262 BD 00 E7         [24]  985 	cjne	r5,#0x00,00141$
      000265 0E               [12]  986 	inc	r6
      000266 80 E4            [24]  987 	sjmp	00141$
      000268                        988 00123$:
                                    989 ;	life.c:160: return;
                                    990 ;	life.c:161: }
      000268 22               [24]  991 	ret
                                    992 ;------------------------------------------------------------
                                    993 ;Allocation info for local variables in function 'main'
                                    994 ;------------------------------------------------------------
                                    995 ;__1310720027              Allocated to registers 
                                    996 ;s                         Allocated to registers r5 r6 r7 
                                    997 ;__2621440029              Allocated to registers 
                                    998 ;s                         Allocated to registers r5 r6 r7 
                                    999 ;__1310720017              Allocated to registers 
                                   1000 ;s                         Allocated to registers r5 r6 r7 
                                   1001 ;__1310720019              Allocated to registers r6 r7 
                                   1002 ;a                         Allocated to registers r4 r5 
                                   1003 ;__1310720021              Allocated to registers 
                                   1004 ;s                         Allocated to registers r5 r6 r7 
                                   1005 ;__1310720023              Allocated to registers 
                                   1006 ;s                         Allocated to registers r5 r6 r7 
                                   1007 ;__1310720025              Allocated to registers 
                                   1008 ;s                         Allocated to registers r5 r6 r7 
                                   1009 ;__2621440034              Allocated to registers 
                                   1010 ;s                         Allocated to registers r5 r6 r7 
                                   1011 ;__4587520038              Allocated to registers 
                                   1012 ;s                         Allocated to registers r5 r6 r7 
                                   1013 ;__4587520040              Allocated to registers 
                                   1014 ;s                         Allocated to registers r5 r6 r7 
                                   1015 ;__4587520042              Allocated to registers 
                                   1016 ;s                         Allocated to registers r5 r6 r7 
                                   1017 ;__3276800044              Allocated to registers 
                                   1018 ;s                         Allocated to registers r5 r6 r7 
                                   1019 ;__1310720046              Allocated to registers 
                                   1020 ;s                         Allocated to registers r5 r6 r7 
                                   1021 ;sloc0                     Allocated to stack - _bp +1
                                   1022 ;sloc1                     Allocated to stack - _bp +2
                                   1023 ;sloc2                     Allocated to stack - _bp +4
                                   1024 ;sloc3                     Allocated to stack - _bp +6
                                   1025 ;sloc4                     Allocated to stack - _bp +8
                                   1026 ;sloc5                     Allocated to stack - _bp +10
                                   1027 ;sloc6                     Allocated to stack - _bp +12
                                   1028 ;------------------------------------------------------------
                                   1029 ;	life.c:272: void main(void) {
                                   1030 ;	-----------------------------------------
                                   1031 ;	 function main
                                   1032 ;	-----------------------------------------
      000269                       1033 _main:
      000269 C0*00            [24] 1034 	push	_bp
      00026B E5 81            [12] 1035 	mov	a,sp
      00026D F5*00            [12] 1036 	mov	_bp,a
      00026F 24 0D            [12] 1037 	add	a,#0x0d
      000271 F5 81            [12] 1038 	mov	sp,a
                                   1039 ;	life.c:273: IT0 = 1;
                                   1040 ;	assignBit
      000273 D2 88            [12] 1041 	setb	_IT0
                                   1042 ;	life.c:274: IT1 = 1;
                                   1043 ;	assignBit
      000275 D2 8A            [12] 1044 	setb	_IT1
                                   1045 ;	life.c:275: EX0 = 1;
                                   1046 ;	assignBit
      000277 D2 A8            [12] 1047 	setb	_EX0
                                   1048 ;	life.c:276: EX1 = 1;
                                   1049 ;	assignBit
      000279 D2 AA            [12] 1050 	setb	_EX1
                                   1051 ;	life.c:277: EA = 1;	
                                   1052 ;	assignBit
      00027B D2 AF            [12] 1053 	setb	_EA
                                   1054 ;	life.c:278: P1_7 = 1;
                                   1055 ;	assignBit
      00027D D2 97            [12] 1056 	setb	_P1_7
                                   1057 ;	life.c:283: __endasm;
      00027F 00               [12] 1058 	nop
      000280 00               [12] 1059 	nop
      000281 00               [12] 1060 	nop
                                   1061 ;	life.c:285: srand(RND);
      000282 90 80 00         [24] 1062 	mov	dptr,#_RND
      000285 E0               [24] 1063 	movx	a,@dptr
      000286 FE               [12] 1064 	mov	r6,a
      000287 A3               [24] 1065 	inc	dptr
      000288 E0               [24] 1066 	movx	a,@dptr
      000289 FF               [12] 1067 	mov	r7,a
      00028A 8E 82            [24] 1068 	mov	dpl,r6
      00028C 8F 83            [24] 1069 	mov	dph,r7
      00028E 12r00r00         [24] 1070 	lcall	_srand
                                   1071 ;	life.c:287: OE76 = OE76_0;
      000291 78r12            [12] 1072 	mov	r0,#_OE76
      000293 76 3F            [12] 1073 	mov	@r0,#0x3f
                                   1074 ;	life.c:288: flashOE();
      000295 12r00r3A         [24] 1075 	lcall	_flashOE
                                   1076 ;	life.c:290: printstr("\033[?25h\033[m");
      000298 7Dr34            [12] 1077 	mov	r5,#___str_7
      00029A 7Es00            [12] 1078 	mov	r6,#(___str_7 >> 8)
      00029C 7F 80            [12] 1079 	mov	r7,#0x80
                                   1080 ;	life.c:68: return;
      00029E                       1081 00211$:
                                   1082 ;	life.c:66: for (; *s; s++) putchar(*s);
      00029E 8D 82            [24] 1083 	mov	dpl,r5
      0002A0 8E 83            [24] 1084 	mov	dph,r6
      0002A2 8F F0            [24] 1085 	mov	b,r7
      0002A4 12r00r00         [24] 1086 	lcall	__gptrget
      0002A7 FC               [12] 1087 	mov	r4,a
      0002A8 60 10            [24] 1088 	jz	00151$
      0002AA 7B 00            [12] 1089 	mov	r3,#0x00
      0002AC 8C 82            [24] 1090 	mov	dpl,r4
      0002AE 8B 83            [24] 1091 	mov	dph,r3
      0002B0 12r00r00         [24] 1092 	lcall	_putchar
      0002B3 0D               [12] 1093 	inc	r5
                                   1094 ;	life.c:290: printstr("\033[?25h\033[m");
      0002B4 BD 00 E7         [24] 1095 	cjne	r5,#0x00,00211$
      0002B7 0E               [12] 1096 	inc	r6
      0002B8 80 E4            [24] 1097 	sjmp	00211$
      0002BA                       1098 00151$:
                                   1099 ;	life.c:292: for (i0 = 0; !i0; ) {	
      0002BA 78r10            [12] 1100 	mov	r0,#_i0
      0002BC 76 00            [12] 1101 	mov	@r0,#0x00
      0002BE                       1102 00258$:
                                   1103 ;	life.c:293: printstr("LIFE INIT T L R P\r\n");
      0002BE 7Dr3E            [12] 1104 	mov	r5,#___str_8
      0002C0 7Es00            [12] 1105 	mov	r6,#(___str_8 >> 8)
      0002C2 7F 80            [12] 1106 	mov	r7,#0x80
                                   1107 ;	life.c:68: return;
      0002C4                       1108 00214$:
                                   1109 ;	life.c:66: for (; *s; s++) putchar(*s);
      0002C4 8D 82            [24] 1110 	mov	dpl,r5
      0002C6 8E 83            [24] 1111 	mov	dph,r6
      0002C8 8F F0            [24] 1112 	mov	b,r7
      0002CA 12r00r00         [24] 1113 	lcall	__gptrget
      0002CD FC               [12] 1114 	mov	r4,a
      0002CE 60 10            [24] 1115 	jz	00110$
      0002D0 7B 00            [12] 1116 	mov	r3,#0x00
      0002D2 8C 82            [24] 1117 	mov	dpl,r4
      0002D4 8B 83            [24] 1118 	mov	dph,r3
      0002D6 12r00r00         [24] 1119 	lcall	_putchar
      0002D9 0D               [12] 1120 	inc	r5
                                   1121 ;	life.c:294: while (1) {
      0002DA BD 00 E7         [24] 1122 	cjne	r5,#0x00,00214$
      0002DD 0E               [12] 1123 	inc	r6
      0002DE 80 E4            [24] 1124 	sjmp	00214$
      0002E0                       1125 00110$:
                                   1126 ;	life.c:295: c = toupper(getchar());
      0002E0 12r00r05         [24] 1127 	lcall	_getchar
      0002E3 12r00r00         [24] 1128 	lcall	_toupper
      0002E6 AE 82            [24] 1129 	mov	r6,dpl
      0002E8 AF 83            [24] 1130 	mov	r7,dph
      0002EA 78r19            [12] 1131 	mov	r0,#_c
      0002EC A6 06            [24] 1132 	mov	@r0,ar6
      0002EE 08               [12] 1133 	inc	r0
      0002EF A6 07            [24] 1134 	mov	@r0,ar7
                                   1135 ;	life.c:296: if (i0 || (c == (int)'T')) goto term;
      0002F1 78r10            [12] 1136 	mov	r0,#_i0
      0002F3 E6               [12] 1137 	mov	a,@r0
      0002F4 60 03            [24] 1138 	jz	00551$
      0002F6 02r0Br77         [24] 1139 	ljmp	00149$
      0002F9                       1140 00551$:
      0002F9 BE 54 06         [24] 1141 	cjne	r6,#0x54,00552$
      0002FC BF 00 03         [24] 1142 	cjne	r7,#0x00,00552$
      0002FF 02r0Br77         [24] 1143 	ljmp	00149$
      000302                       1144 00552$:
                                   1145 ;	life.c:297: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      000302 BE 4C 05         [24] 1146 	cjne	r6,#0x4c,00553$
      000305 BF 00 02         [24] 1147 	cjne	r7,#0x00,00553$
      000308 80 0E            [24] 1148 	sjmp	00305$
      00030A                       1149 00553$:
      00030A BE 52 05         [24] 1150 	cjne	r6,#0x52,00554$
      00030D BF 00 02         [24] 1151 	cjne	r7,#0x00,00554$
      000310 80 06            [24] 1152 	sjmp	00305$
      000312                       1153 00554$:
      000312 BE 50 CB         [24] 1154 	cjne	r6,#0x50,00110$
      000315 BF 00 C8         [24] 1155 	cjne	r7,#0x00,00110$
                                   1156 ;	life.c:300: reload:
      000318                       1157 00305$:
      000318                       1158 00112$:
                                   1159 ;	life.c:164: memset(u, 0, sizeof (u));
      000318 E4               [12] 1160 	clr	a
      000319 C0 E0            [24] 1161 	push	acc
      00031B 74 24            [12] 1162 	mov	a,#0x24
      00031D C0 E0            [24] 1163 	push	acc
      00031F E4               [12] 1164 	clr	a
      000320 C0 E0            [24] 1165 	push	acc
      000322 90r48r00         [24] 1166 	mov	dptr,#_u
      000325 75 F0 00         [24] 1167 	mov	b,#0x00
      000328 12r00r00         [24] 1168 	lcall	_memset
      00032B 15 81            [12] 1169 	dec	sp
      00032D 15 81            [12] 1170 	dec	sp
      00032F 15 81            [12] 1171 	dec	sp
                                   1172 ;	life.c:165: memset(pu, 0, sizeof (pu));
      000331 E4               [12] 1173 	clr	a
      000332 C0 E0            [24] 1174 	push	acc
      000334 74 24            [12] 1175 	mov	a,#0x24
      000336 C0 E0            [24] 1176 	push	acc
      000338 E4               [12] 1177 	clr	a
      000339 C0 E0            [24] 1178 	push	acc
      00033B 90r24r00         [24] 1179 	mov	dptr,#_pu
      00033E 75 F0 00         [24] 1180 	mov	b,#0x00
      000341 12r00r00         [24] 1181 	lcall	_memset
      000344 15 81            [12] 1182 	dec	sp
      000346 15 81            [12] 1183 	dec	sp
      000348 15 81            [12] 1184 	dec	sp
                                   1185 ;	life.c:302: if (c == (int)'L') loadiu();
      00034A 78r19            [12] 1186 	mov	r0,#_c
      00034C B6 4C 06         [24] 1187 	cjne	@r0,#0x4c,00557$
      00034F 08               [12] 1188 	inc	r0
      000350 B6 00 02         [24] 1189 	cjne	@r0,#0x00,00557$
      000353 80 03            [24] 1190 	sjmp	00558$
      000355                       1191 00557$:
      000355 02r04rD0         [24] 1192 	ljmp	00116$
      000358                       1193 00558$:
                                   1194 ;	life.c:171: j = 0;
      000358 78r17            [12] 1195 	mov	r0,#_j
      00035A E4               [12] 1196 	clr	a
      00035B F6               [12] 1197 	mov	@r0,a
      00035C 08               [12] 1198 	inc	r0
      00035D F6               [12] 1199 	mov	@r0,a
                                   1200 ;	life.c:173: printstr("LOAD 0 1 ~ # <");
      00035E 7Dr1A            [12] 1201 	mov	r5,#___str_4
      000360 7Es00            [12] 1202 	mov	r6,#(___str_4 >> 8)
      000362 7F 80            [12] 1203 	mov	r7,#0x80
                                   1204 ;	life.c:68: return;
      000364                       1205 00217$:
                                   1206 ;	life.c:66: for (; *s; s++) putchar(*s);
      000364 8D 82            [24] 1207 	mov	dpl,r5
      000366 8E 83            [24] 1208 	mov	dph,r6
      000368 8F F0            [24] 1209 	mov	b,r7
      00036A 12r00r00         [24] 1210 	lcall	__gptrget
      00036D FC               [12] 1211 	mov	r4,a
      00036E 60 10            [24] 1212 	jz	00156$
      000370 7B 00            [12] 1213 	mov	r3,#0x00
      000372 8C 82            [24] 1214 	mov	dpl,r4
      000374 8B 83            [24] 1215 	mov	dph,r3
      000376 12r00r00         [24] 1216 	lcall	_putchar
      000379 0D               [12] 1217 	inc	r5
                                   1218 ;	life.c:173: printstr("LOAD 0 1 ~ # <");
      00037A BD 00 E7         [24] 1219 	cjne	r5,#0x00,00217$
      00037D 0E               [12] 1220 	inc	r6
      00037E 80 E4            [24] 1221 	sjmp	00217$
      000380                       1222 00156$:
                                   1223 ;	life.c:175: for (y = 0; y < (H * W); y += W) {
      000380 78r15            [12] 1224 	mov	r0,#_y
      000382 E4               [12] 1225 	clr	a
      000383 F6               [12] 1226 	mov	@r0,a
      000384 08               [12] 1227 	inc	r0
      000385 F6               [12] 1228 	mov	@r0,a
      000386                       1229 00220$:
                                   1230 ;	life.c:176: for (x = 0; x < W; x++) {
      000386 78r13            [12] 1231 	mov	r0,#_x
      000388 E4               [12] 1232 	clr	a
      000389 F6               [12] 1233 	mov	@r0,a
      00038A 08               [12] 1234 	inc	r0
      00038B F6               [12] 1235 	mov	@r0,a
                                   1236 ;	life.c:177: while (1) {
      00038C                       1237 00169$:
                                   1238 ;	life.c:178: c = getchar();
      00038C 12r00r05         [24] 1239 	lcall	_getchar
      00038F AE 82            [24] 1240 	mov	r6,dpl
      000391 AF 83            [24] 1241 	mov	r7,dph
      000393 78r19            [12] 1242 	mov	r0,#_c
      000395 A6 06            [24] 1243 	mov	@r0,ar6
      000397 08               [12] 1244 	inc	r0
      000398 A6 07            [24] 1245 	mov	@r0,ar7
                                   1246 ;	life.c:179: if (c == (int)'0') {
      00039A BE 30 25         [24] 1247 	cjne	r6,#0x30,00167$
      00039D BF 00 22         [24] 1248 	cjne	r7,#0x00,00167$
                                   1249 ;	life.c:180: iu[y + x] = 0;
      0003A0 78r15            [12] 1250 	mov	r0,#_y
      0003A2 79r13            [12] 1251 	mov	r1,#_x
      0003A4 E7               [12] 1252 	mov	a,@r1
      0003A5 26               [12] 1253 	add	a,@r0
      0003A6 FC               [12] 1254 	mov	r4,a
      0003A7 09               [12] 1255 	inc	r1
      0003A8 E7               [12] 1256 	mov	a,@r1
      0003A9 08               [12] 1257 	inc	r0
      0003AA 36               [12] 1258 	addc	a,@r0
      0003AB FD               [12] 1259 	mov	r5,a
      0003AC EC               [12] 1260 	mov	a,r4
      0003AD 24r00            [12] 1261 	add	a,#_iu
      0003AF F5 82            [12] 1262 	mov	dpl,a
      0003B1 ED               [12] 1263 	mov	a,r5
      0003B2 34s00            [12] 1264 	addc	a,#(_iu >> 8)
      0003B4 F5 83            [12] 1265 	mov	dph,a
      0003B6 E4               [12] 1266 	clr	a
      0003B7 F0               [24] 1267 	movx	@dptr,a
                                   1268 ;	life.c:181: j++;
      0003B8 78r17            [12] 1269 	mov	r0,#_j
      0003BA 06               [12] 1270 	inc	@r0
      0003BB B6 00 02         [24] 1271 	cjne	@r0,#0x00,00563$
      0003BE 08               [12] 1272 	inc	r0
      0003BF 06               [12] 1273 	inc	@r0
      0003C0                       1274 00563$:
                                   1275 ;	life.c:182: break;
      0003C0 80 39            [24] 1276 	sjmp	00172$
      0003C2                       1277 00167$:
                                   1278 ;	life.c:183: } else if (c == (int)'1') {
      0003C2 BE 31 26         [24] 1279 	cjne	r6,#0x31,00165$
      0003C5 BF 00 23         [24] 1280 	cjne	r7,#0x00,00165$
                                   1281 ;	life.c:184: iu[y + x] = 1;
      0003C8 78r15            [12] 1282 	mov	r0,#_y
      0003CA 79r13            [12] 1283 	mov	r1,#_x
      0003CC E7               [12] 1284 	mov	a,@r1
      0003CD 26               [12] 1285 	add	a,@r0
      0003CE FC               [12] 1286 	mov	r4,a
      0003CF 09               [12] 1287 	inc	r1
      0003D0 E7               [12] 1288 	mov	a,@r1
      0003D1 08               [12] 1289 	inc	r0
      0003D2 36               [12] 1290 	addc	a,@r0
      0003D3 FD               [12] 1291 	mov	r5,a
      0003D4 EC               [12] 1292 	mov	a,r4
      0003D5 24r00            [12] 1293 	add	a,#_iu
      0003D7 F5 82            [12] 1294 	mov	dpl,a
      0003D9 ED               [12] 1295 	mov	a,r5
      0003DA 34s00            [12] 1296 	addc	a,#(_iu >> 8)
      0003DC F5 83            [12] 1297 	mov	dph,a
      0003DE 74 01            [12] 1298 	mov	a,#0x01
      0003E0 F0               [24] 1299 	movx	@dptr,a
                                   1300 ;	life.c:185: j++;
      0003E1 78r17            [12] 1301 	mov	r0,#_j
      0003E3 06               [12] 1302 	inc	@r0
      0003E4 B6 00 02         [24] 1303 	cjne	@r0,#0x00,00566$
      0003E7 08               [12] 1304 	inc	r0
      0003E8 06               [12] 1305 	inc	@r0
      0003E9                       1306 00566$:
                                   1307 ;	life.c:186: break;
      0003E9 80 10            [24] 1308 	sjmp	00172$
      0003EB                       1309 00165$:
                                   1310 ;	life.c:187: } else if (c == (int)'~') goto br_inner;
      0003EB BE 7E 05         [24] 1311 	cjne	r6,#0x7e,00567$
      0003EE BF 00 02         [24] 1312 	cjne	r7,#0x00,00567$
      0003F1 80 21            [24] 1313 	sjmp	00221$
      0003F3                       1314 00567$:
                                   1315 ;	life.c:188: else if (c == (int)'#') goto out;
                                   1316 ;	life.c:192: break;
      0003F3 BE 23 96         [24] 1317 	cjne	r6,#0x23,00169$
      0003F6 BF 00 93         [24] 1318 	cjne	r7,#0x00,00169$
      0003F9 80 31            [24] 1319 	sjmp	00182$
      0003FB                       1320 00172$:
                                   1321 ;	life.c:176: for (x = 0; x < W; x++) {
      0003FB 78r13            [12] 1322 	mov	r0,#_x
      0003FD 06               [12] 1323 	inc	@r0
      0003FE B6 00 02         [24] 1324 	cjne	@r0,#0x00,00569$
      000401 08               [12] 1325 	inc	r0
      000402 06               [12] 1326 	inc	@r0
      000403                       1327 00569$:
      000403 78r13            [12] 1328 	mov	r0,#_x
      000405 C3               [12] 1329 	clr	c
      000406 E6               [12] 1330 	mov	a,@r0
      000407 94 30            [12] 1331 	subb	a,#0x30
      000409 08               [12] 1332 	inc	r0
      00040A E6               [12] 1333 	mov	a,@r0
      00040B 64 80            [12] 1334 	xrl	a,#0x80
      00040D 94 80            [12] 1335 	subb	a,#0x80
      00040F 50 03            [24] 1336 	jnc	00570$
      000411 02r03r8C         [24] 1337 	ljmp	00169$
      000414                       1338 00570$:
      000414                       1339 00221$:
                                   1340 ;	life.c:175: for (y = 0; y < (H * W); y += W) {
      000414 78r15            [12] 1341 	mov	r0,#_y
      000416 74 30            [12] 1342 	mov	a,#0x30
      000418 26               [12] 1343 	add	a,@r0
      000419 F6               [12] 1344 	mov	@r0,a
      00041A E4               [12] 1345 	clr	a
      00041B 08               [12] 1346 	inc	r0
      00041C 36               [12] 1347 	addc	a,@r0
      00041D F6               [12] 1348 	mov	@r0,a
      00041E 78r15            [12] 1349 	mov	r0,#_y
      000420 C3               [12] 1350 	clr	c
      000421 08               [12] 1351 	inc	r0
      000422 E6               [12] 1352 	mov	a,@r0
      000423 64 80            [12] 1353 	xrl	a,#0x80
      000425 94 A4            [12] 1354 	subb	a,#0xa4
      000427 50 03            [24] 1355 	jnc	00571$
      000429 02r03r86         [24] 1356 	ljmp	00220$
      00042C                       1357 00571$:
                                   1358 ;	life.c:196: out:
      00042C                       1359 00182$:
                                   1360 ;	life.c:197: if (c != (int)'#')
      00042C BE 23 05         [24] 1361 	cjne	r6,#0x23,00572$
      00042F BF 00 02         [24] 1362 	cjne	r7,#0x00,00572$
      000432 80 14            [24] 1363 	sjmp	00181$
      000434                       1364 00572$:
                                   1365 ;	life.c:198: while (1) {
      000434                       1366 00178$:
                                   1367 ;	life.c:199: c = getchar();
      000434 12r00r05         [24] 1368 	lcall	_getchar
      000437 AE 82            [24] 1369 	mov	r6,dpl
      000439 AF 83            [24] 1370 	mov	r7,dph
      00043B 78r19            [12] 1371 	mov	r0,#_c
      00043D A6 06            [24] 1372 	mov	@r0,ar6
      00043F 08               [12] 1373 	inc	r0
      000440 A6 07            [24] 1374 	mov	@r0,ar7
                                   1375 ;	life.c:200: if (c == (int)'#') break;
      000442 BE 23 EF         [24] 1376 	cjne	r6,#0x23,00178$
      000445 BF 00 EC         [24] 1377 	cjne	r7,#0x00,00178$
      000448                       1378 00181$:
                                   1379 ;	life.c:202: print16x(j);
      000448 78r17            [12] 1380 	mov	r0,#_j
      00044A 86 06            [24] 1381 	mov	ar6,@r0
      00044C 08               [12] 1382 	inc	r0
      00044D 86 07            [24] 1383 	mov	ar7,@r0
      00044F 8E 04            [24] 1384 	mov	ar4,r6
                                   1385 ;	life.c:57: putchar(digits[(a >> 12) & 0xf]);
      000451 EF               [12] 1386 	mov	a,r7
      000452 FD               [12] 1387 	mov	r5,a
      000453 C4               [12] 1388 	swap	a
      000454 54 0F            [12] 1389 	anl	a,#(0x0f&0x0f)
      000456 24r00            [12] 1390 	add	a,#_digits
      000458 F9               [12] 1391 	mov	r1,a
      000459 87 07            [24] 1392 	mov	ar7,@r1
      00045B 7E 00            [12] 1393 	mov	r6,#0x00
      00045D 8F 82            [24] 1394 	mov	dpl,r7
      00045F 8E 83            [24] 1395 	mov	dph,r6
      000461 12r00r00         [24] 1396 	lcall	_putchar
                                   1397 ;	life.c:58: putchar(digits[(a >> 8) & 0xf]);
      000464 8D 07            [24] 1398 	mov	ar7,r5
      000466 53 07 0F         [24] 1399 	anl	ar7,#0x0f
      000469 EF               [12] 1400 	mov	a,r7
      00046A 24r00            [12] 1401 	add	a,#_digits
      00046C F9               [12] 1402 	mov	r1,a
      00046D 87 07            [24] 1403 	mov	ar7,@r1
      00046F 7E 00            [12] 1404 	mov	r6,#0x00
      000471 8F 82            [24] 1405 	mov	dpl,r7
      000473 8E 83            [24] 1406 	mov	dph,r6
      000475 12r00r00         [24] 1407 	lcall	_putchar
                                   1408 ;	life.c:59: putchar(digits[(a >> 4) & 0xf]);
      000478 8C 06            [24] 1409 	mov	ar6,r4
      00047A ED               [12] 1410 	mov	a,r5
      00047B C4               [12] 1411 	swap	a
      00047C CE               [12] 1412 	xch	a,r6
      00047D C4               [12] 1413 	swap	a
      00047E 54 0F            [12] 1414 	anl	a,#0x0f
      000480 6E               [12] 1415 	xrl	a,r6
      000481 CE               [12] 1416 	xch	a,r6
      000482 54 0F            [12] 1417 	anl	a,#0x0f
      000484 CE               [12] 1418 	xch	a,r6
      000485 6E               [12] 1419 	xrl	a,r6
      000486 CE               [12] 1420 	xch	a,r6
      000487 53 06 0F         [24] 1421 	anl	ar6,#0x0f
      00048A EE               [12] 1422 	mov	a,r6
      00048B 24r00            [12] 1423 	add	a,#_digits
      00048D F9               [12] 1424 	mov	r1,a
      00048E 87 07            [24] 1425 	mov	ar7,@r1
      000490 7E 00            [12] 1426 	mov	r6,#0x00
      000492 8F 82            [24] 1427 	mov	dpl,r7
      000494 8E 83            [24] 1428 	mov	dph,r6
      000496 12r00r00         [24] 1429 	lcall	_putchar
                                   1430 ;	life.c:60: putchar(digits[a & 0xf]);
      000499 53 04 0F         [24] 1431 	anl	ar4,#0x0f
      00049C EC               [12] 1432 	mov	a,r4
      00049D 24r00            [12] 1433 	add	a,#_digits
      00049F F9               [12] 1434 	mov	r1,a
      0004A0 87 07            [24] 1435 	mov	ar7,@r1
      0004A2 7E 00            [12] 1436 	mov	r6,#0x00
      0004A4 8F 82            [24] 1437 	mov	dpl,r7
      0004A6 8E 83            [24] 1438 	mov	dph,r6
      0004A8 12r00r00         [24] 1439 	lcall	_putchar
                                   1440 ;	life.c:203: printstr(">\r\n");
      0004AB 7Dr29            [12] 1441 	mov	r5,#___str_5
      0004AD 7Es00            [12] 1442 	mov	r6,#(___str_5 >> 8)
      0004AF 7F 80            [12] 1443 	mov	r7,#0x80
                                   1444 ;	life.c:68: return;
      0004B1                       1445 00223$:
                                   1446 ;	life.c:66: for (; *s; s++) putchar(*s);
      0004B1 8D 82            [24] 1447 	mov	dpl,r5
      0004B3 8E 83            [24] 1448 	mov	dph,r6
      0004B5 8F F0            [24] 1449 	mov	b,r7
      0004B7 12r00r00         [24] 1450 	lcall	__gptrget
      0004BA FC               [12] 1451 	mov	r4,a
      0004BB 70 03            [24] 1452 	jnz	00575$
      0004BD 02r05r89         [24] 1453 	ljmp	00117$
      0004C0                       1454 00575$:
      0004C0 7B 00            [12] 1455 	mov	r3,#0x00
      0004C2 8C 82            [24] 1456 	mov	dpl,r4
      0004C4 8B 83            [24] 1457 	mov	dph,r3
      0004C6 12r00r00         [24] 1458 	lcall	_putchar
      0004C9 0D               [12] 1459 	inc	r5
                                   1460 ;	life.c:302: if (c == (int)'L') loadiu();
      0004CA BD 00 E4         [24] 1461 	cjne	r5,#0x00,00223$
      0004CD 0E               [12] 1462 	inc	r6
      0004CE 80 E1            [24] 1463 	sjmp	00223$
      0004D0                       1464 00116$:
                                   1465 ;	life.c:303: else if (c == (int)'R') loadriu();
      0004D0 78r19            [12] 1466 	mov	r0,#_c
      0004D2 B6 52 06         [24] 1467 	cjne	@r0,#0x52,00577$
      0004D5 08               [12] 1468 	inc	r0
      0004D6 B6 00 02         [24] 1469 	cjne	@r0,#0x00,00577$
      0004D9 80 03            [24] 1470 	sjmp	00578$
      0004DB                       1471 00577$:
      0004DB 02r05r89         [24] 1472 	ljmp	00117$
      0004DE                       1473 00578$:
                                   1474 ;	life.c:209: j = 0;
      0004DE 78r17            [12] 1475 	mov	r0,#_j
      0004E0 E4               [12] 1476 	clr	a
      0004E1 F6               [12] 1477 	mov	@r0,a
      0004E2 08               [12] 1478 	inc	r0
      0004E3 F6               [12] 1479 	mov	@r0,a
                                   1480 ;	life.c:211: printstr("RANDOM");
      0004E4 7Dr2D            [12] 1481 	mov	r5,#___str_6
      0004E6 7Es00            [12] 1482 	mov	r6,#(___str_6 >> 8)
      0004E8 7F 80            [12] 1483 	mov	r7,#0x80
                                   1484 ;	life.c:68: return;
      0004EA                       1485 00226$:
                                   1486 ;	life.c:66: for (; *s; s++) putchar(*s);
      0004EA 8D 82            [24] 1487 	mov	dpl,r5
      0004EC 8E 83            [24] 1488 	mov	dph,r6
      0004EE 8F F0            [24] 1489 	mov	b,r7
      0004F0 12r00r00         [24] 1490 	lcall	__gptrget
      0004F3 FC               [12] 1491 	mov	r4,a
      0004F4 60 10            [24] 1492 	jz	00188$
      0004F6 7B 00            [12] 1493 	mov	r3,#0x00
      0004F8 8C 82            [24] 1494 	mov	dpl,r4
      0004FA 8B 83            [24] 1495 	mov	dph,r3
      0004FC 12r00r00         [24] 1496 	lcall	_putchar
      0004FF 0D               [12] 1497 	inc	r5
                                   1498 ;	life.c:211: printstr("RANDOM");
      000500 BD 00 E7         [24] 1499 	cjne	r5,#0x00,00226$
      000503 0E               [12] 1500 	inc	r6
      000504 80 E4            [24] 1501 	sjmp	00226$
      000506                       1502 00188$:
                                   1503 ;	life.c:213: for (y = 0; y < (H * W); y += W)
      000506 78r15            [12] 1504 	mov	r0,#_y
      000508 E4               [12] 1505 	clr	a
      000509 F6               [12] 1506 	mov	@r0,a
      00050A 08               [12] 1507 	inc	r0
      00050B F6               [12] 1508 	mov	@r0,a
      00050C                       1509 00230$:
                                   1510 ;	life.c:214: for (x = 0; x < W; x++)
      00050C 78r13            [12] 1511 	mov	r0,#_x
      00050E E4               [12] 1512 	clr	a
      00050F F6               [12] 1513 	mov	@r0,a
      000510 08               [12] 1514 	inc	r0
      000511 F6               [12] 1515 	mov	@r0,a
      000512                       1516 00228$:
                                   1517 ;	life.c:215: iu[y + x] = rand() & 1;
      000512 78r15            [12] 1518 	mov	r0,#_y
      000514 79r13            [12] 1519 	mov	r1,#_x
      000516 E7               [12] 1520 	mov	a,@r1
      000517 26               [12] 1521 	add	a,@r0
      000518 FE               [12] 1522 	mov	r6,a
      000519 09               [12] 1523 	inc	r1
      00051A E7               [12] 1524 	mov	a,@r1
      00051B 08               [12] 1525 	inc	r0
      00051C 36               [12] 1526 	addc	a,@r0
      00051D FF               [12] 1527 	mov	r7,a
      00051E EE               [12] 1528 	mov	a,r6
      00051F 24r00            [12] 1529 	add	a,#_iu
      000521 FE               [12] 1530 	mov	r6,a
      000522 EF               [12] 1531 	mov	a,r7
      000523 34s00            [12] 1532 	addc	a,#(_iu >> 8)
      000525 FF               [12] 1533 	mov	r7,a
      000526 C0 07            [24] 1534 	push	ar7
      000528 C0 06            [24] 1535 	push	ar6
      00052A 12r00r00         [24] 1536 	lcall	_rand
      00052D AC 82            [24] 1537 	mov	r4,dpl
      00052F D0 06            [24] 1538 	pop	ar6
      000531 D0 07            [24] 1539 	pop	ar7
      000533 53 04 01         [24] 1540 	anl	ar4,#0x01
      000536 8E 82            [24] 1541 	mov	dpl,r6
      000538 8F 83            [24] 1542 	mov	dph,r7
      00053A EC               [12] 1543 	mov	a,r4
      00053B F0               [24] 1544 	movx	@dptr,a
                                   1545 ;	life.c:214: for (x = 0; x < W; x++)
      00053C 78r13            [12] 1546 	mov	r0,#_x
      00053E 06               [12] 1547 	inc	@r0
      00053F B6 00 02         [24] 1548 	cjne	@r0,#0x00,00581$
      000542 08               [12] 1549 	inc	r0
      000543 06               [12] 1550 	inc	@r0
      000544                       1551 00581$:
      000544 78r13            [12] 1552 	mov	r0,#_x
      000546 C3               [12] 1553 	clr	c
      000547 E6               [12] 1554 	mov	a,@r0
      000548 94 30            [12] 1555 	subb	a,#0x30
      00054A 08               [12] 1556 	inc	r0
      00054B E6               [12] 1557 	mov	a,@r0
      00054C 64 80            [12] 1558 	xrl	a,#0x80
      00054E 94 80            [12] 1559 	subb	a,#0x80
      000550 40 C0            [24] 1560 	jc	00228$
                                   1561 ;	life.c:213: for (y = 0; y < (H * W); y += W)
      000552 78r15            [12] 1562 	mov	r0,#_y
      000554 74 30            [12] 1563 	mov	a,#0x30
      000556 26               [12] 1564 	add	a,@r0
      000557 F6               [12] 1565 	mov	@r0,a
      000558 E4               [12] 1566 	clr	a
      000559 08               [12] 1567 	inc	r0
      00055A 36               [12] 1568 	addc	a,@r0
      00055B F6               [12] 1569 	mov	@r0,a
      00055C 78r15            [12] 1570 	mov	r0,#_y
      00055E C3               [12] 1571 	clr	c
      00055F 08               [12] 1572 	inc	r0
      000560 E6               [12] 1573 	mov	a,@r0
      000561 64 80            [12] 1574 	xrl	a,#0x80
      000563 94 A4            [12] 1575 	subb	a,#0xa4
      000565 40 A5            [24] 1576 	jc	00230$
                                   1577 ;	life.c:217: printstr("\r\n");
      000567 7Dr10            [12] 1578 	mov	r5,#___str_2
      000569 7Es00            [12] 1579 	mov	r6,#(___str_2 >> 8)
      00056B 7F 80            [12] 1580 	mov	r7,#0x80
                                   1581 ;	life.c:68: return;
      00056D                       1582 00233$:
                                   1583 ;	life.c:66: for (; *s; s++) putchar(*s);
      00056D 8D 82            [24] 1584 	mov	dpl,r5
      00056F 8E 83            [24] 1585 	mov	dph,r6
      000571 8F F0            [24] 1586 	mov	b,r7
      000573 12r00r00         [24] 1587 	lcall	__gptrget
      000576 FC               [12] 1588 	mov	r4,a
      000577 60 10            [24] 1589 	jz	00117$
      000579 7B 00            [12] 1590 	mov	r3,#0x00
      00057B 8C 82            [24] 1591 	mov	dpl,r4
      00057D 8B 83            [24] 1592 	mov	dph,r3
      00057F 12r00r00         [24] 1593 	lcall	_putchar
      000582 0D               [12] 1594 	inc	r5
                                   1595 ;	life.c:303: else if (c == (int)'R') loadriu();
      000583 BD 00 E7         [24] 1596 	cjne	r5,#0x00,00233$
      000586 0E               [12] 1597 	inc	r6
      000587 80 E4            [24] 1598 	sjmp	00233$
      000589                       1599 00117$:
                                   1600 ;	life.c:304: memcpy(u, iu, sizeof (iu));
      000589 E4               [12] 1601 	clr	a
      00058A C0 E0            [24] 1602 	push	acc
      00058C 74 24            [12] 1603 	mov	a,#0x24
      00058E C0 E0            [24] 1604 	push	acc
      000590 74r00            [12] 1605 	mov	a,#_iu
      000592 C0 E0            [24] 1606 	push	acc
      000594 74s00            [12] 1607 	mov	a,#(_iu >> 8)
      000596 C0 E0            [24] 1608 	push	acc
      000598 E4               [12] 1609 	clr	a
      000599 C0 E0            [24] 1610 	push	acc
      00059B 90r48r00         [24] 1611 	mov	dptr,#_u
      00059E 75 F0 00         [24] 1612 	mov	b,#0x00
      0005A1 12r00r00         [24] 1613 	lcall	___memcpy
      0005A4 E5 81            [12] 1614 	mov	a,sp
      0005A6 24 FB            [12] 1615 	add	a,#0xfb
      0005A8 F5 81            [12] 1616 	mov	sp,a
                                   1617 ;	life.c:305: show(0);
      0005AA 75 82 00         [24] 1618 	mov	dpl,#0x00
      0005AD 12r00r4C         [24] 1619 	lcall	_show
                                   1620 ;	life.c:307: printstr("READY T L R P S\r\n");
      0005B0 7Dr52            [12] 1621 	mov	r5,#___str_9
      0005B2 7Es00            [12] 1622 	mov	r6,#(___str_9 >> 8)
      0005B4 7F 80            [12] 1623 	mov	r7,#0x80
                                   1624 ;	life.c:68: return;
      0005B6                       1625 00236$:
                                   1626 ;	life.c:66: for (; *s; s++) putchar(*s);
      0005B6 8D 82            [24] 1627 	mov	dpl,r5
      0005B8 8E 83            [24] 1628 	mov	dph,r6
      0005BA 8F F0            [24] 1629 	mov	b,r7
      0005BC 12r00r00         [24] 1630 	lcall	__gptrget
      0005BF FC               [12] 1631 	mov	r4,a
      0005C0 60 10            [24] 1632 	jz	00130$
      0005C2 7B 00            [12] 1633 	mov	r3,#0x00
      0005C4 8C 82            [24] 1634 	mov	dpl,r4
      0005C6 8B 83            [24] 1635 	mov	dph,r3
      0005C8 12r00r00         [24] 1636 	lcall	_putchar
      0005CB 0D               [12] 1637 	inc	r5
                                   1638 ;	life.c:308: while (1) {
      0005CC BD 00 E7         [24] 1639 	cjne	r5,#0x00,00236$
      0005CF 0E               [12] 1640 	inc	r6
      0005D0 80 E4            [24] 1641 	sjmp	00236$
      0005D2                       1642 00130$:
                                   1643 ;	life.c:309: c = toupper(getchar());
      0005D2 12r00r05         [24] 1644 	lcall	_getchar
      0005D5 12r00r00         [24] 1645 	lcall	_toupper
      0005D8 AE 82            [24] 1646 	mov	r6,dpl
      0005DA AF 83            [24] 1647 	mov	r7,dph
      0005DC 78r19            [12] 1648 	mov	r0,#_c
      0005DE A6 06            [24] 1649 	mov	@r0,ar6
      0005E0 08               [12] 1650 	inc	r0
      0005E1 A6 07            [24] 1651 	mov	@r0,ar7
                                   1652 ;	life.c:310: if (i0 || (c == (int)'T')) goto term;
      0005E3 78r10            [12] 1653 	mov	r0,#_i0
      0005E5 E6               [12] 1654 	mov	a,@r0
      0005E6 60 03            [24] 1655 	jz	00588$
      0005E8 02r0Br77         [24] 1656 	ljmp	00149$
      0005EB                       1657 00588$:
      0005EB BE 54 06         [24] 1658 	cjne	r6,#0x54,00589$
      0005EE BF 00 03         [24] 1659 	cjne	r7,#0x00,00589$
      0005F1 02r0Br77         [24] 1660 	ljmp	00149$
      0005F4                       1661 00589$:
                                   1662 ;	life.c:311: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      0005F4 BE 4C 06         [24] 1663 	cjne	r6,#0x4c,00590$
      0005F7 BF 00 03         [24] 1664 	cjne	r7,#0x00,00590$
      0005FA 02r03r18         [24] 1665 	ljmp	00112$
      0005FD                       1666 00590$:
      0005FD BE 52 06         [24] 1667 	cjne	r6,#0x52,00591$
      000600 BF 00 03         [24] 1668 	cjne	r7,#0x00,00591$
      000603 02r03r18         [24] 1669 	ljmp	00112$
      000606                       1670 00591$:
      000606 BE 50 06         [24] 1671 	cjne	r6,#0x50,00592$
      000609 BF 00 03         [24] 1672 	cjne	r7,#0x00,00592$
      00060C 02r03r18         [24] 1673 	ljmp	00112$
      00060F                       1674 00592$:
                                   1675 ;	life.c:312: else if (c == (int)'S') break;
      00060F BE 53 C0         [24] 1676 	cjne	r6,#0x53,00130$
      000612 BF 00 BD         [24] 1677 	cjne	r7,#0x00,00130$
                                   1678 ;	life.c:121: generation[0] = 0u;
      000615 78r22            [12] 1679 	mov	r0,#_generation
      000617 76 00            [12] 1680 	mov	@r0,#0x00
      000619 08               [12] 1681 	inc	r0
      00061A 76 00            [12] 1682 	mov	@r0,#0x00
                                   1683 ;	life.c:122: generation[1] = 0u;
      00061C 78r24            [12] 1684 	mov	r0,#(_generation + 0x0002)
      00061E 76 00            [12] 1685 	mov	@r0,#0x00
      000620 08               [12] 1686 	inc	r0
      000621 76 00            [12] 1687 	mov	@r0,#0x00
                                   1688 ;	life.c:317: for (i1 = 0; !i0 && !i1; ) {
      000623 78r11            [12] 1689 	mov	r0,#_i1
      000625 76 00            [12] 1690 	mov	@r0,#0x00
      000627                       1691 00253$:
      000627 78r10            [12] 1692 	mov	r0,#_i0
      000629 E6               [12] 1693 	mov	a,@r0
      00062A 60 03            [24] 1694 	jz	00595$
      00062C 02r0Br45         [24] 1695 	ljmp	00145$
      00062F                       1696 00595$:
      00062F 78r11            [12] 1697 	mov	r0,#_i1
      000631 E6               [12] 1698 	mov	a,@r0
      000632 60 03            [24] 1699 	jz	00596$
      000634 02r0Br45         [24] 1700 	ljmp	00145$
      000637                       1701 00596$:
                                   1702 ;	life.c:318: show(1);
      000637 75 82 01         [24] 1703 	mov	dpl,#0x01
      00063A 12r00r4C         [24] 1704 	lcall	_show
                                   1705 ;	life.c:223: fixed = 0;
      00063D 78r1C            [12] 1706 	mov	r0,#_fixed
      00063F 76 00            [12] 1707 	mov	@r0,#0x00
                                   1708 ;	life.c:224: cycle2 = 0;
      000641 78r1D            [12] 1709 	mov	r0,#_cycle2
      000643 76 00            [12] 1710 	mov	@r0,#0x00
                                   1711 ;	life.c:226: OE76 = OE76_0;
      000645 78r12            [12] 1712 	mov	r0,#_OE76
      000647 76 3F            [12] 1713 	mov	@r0,#0x3f
                                   1714 ;	life.c:227: flashOE();
      000649 12r00r3A         [24] 1715 	lcall	_flashOE
                                   1716 ;	life.c:229: for (y = 0; y < H; y++) {
      00064C 78r15            [12] 1717 	mov	r0,#_y
      00064E E4               [12] 1718 	clr	a
      00064F F6               [12] 1719 	mov	@r0,a
      000650 08               [12] 1720 	inc	r0
      000651 F6               [12] 1721 	mov	@r0,a
      000652                       1722 00240$:
                                   1723 ;	life.c:230: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000652 78r15            [12] 1724 	mov	r0,#_y
      000654 86 07            [24] 1725 	mov	ar7,@r0
      000656 53 07 03         [24] 1726 	anl	ar7,#0x03
      000659 EF               [12] 1727 	mov	a,r7
      00065A 03               [12] 1728 	rr	a
      00065B 03               [12] 1729 	rr	a
      00065C 54 C0            [12] 1730 	anl	a,#0xc0
      00065E FF               [12] 1731 	mov	r7,a
      00065F 78r12            [12] 1732 	mov	r0,#_OE76
      000661 74 3F            [12] 1733 	mov	a,#0x3f
      000663 4F               [12] 1734 	orl	a,r7
      000664 F6               [12] 1735 	mov	@r0,a
                                   1736 ;	life.c:231: flashOE();
      000665 12r00r3A         [24] 1737 	lcall	_flashOE
                                   1738 ;	life.c:232: for (x = 0; x < W; x++) {
      000668 78r13            [12] 1739 	mov	r0,#_x
      00066A E4               [12] 1740 	clr	a
      00066B F6               [12] 1741 	mov	@r0,a
      00066C 08               [12] 1742 	inc	r0
      00066D F6               [12] 1743 	mov	@r0,a
      00066E                       1744 00238$:
                                   1745 ;	life.c:233: n = -u[A2D(W, y, x)];
      00066E 78r15            [12] 1746 	mov	r0,#_y
      000670 E6               [12] 1747 	mov	a,@r0
      000671 C0 E0            [24] 1748 	push	acc
      000673 08               [12] 1749 	inc	r0
      000674 E6               [12] 1750 	mov	a,@r0
      000675 C0 E0            [24] 1751 	push	acc
      000677 90 00 30         [24] 1752 	mov	dptr,#0x0030
      00067A 12r00r00         [24] 1753 	lcall	__mulint
      00067D C8               [12] 1754 	xch	a,r0
      00067E E5*00            [12] 1755 	mov	a,_bp
      000680 24 04            [12] 1756 	add	a,#0x04
      000682 C8               [12] 1757 	xch	a,r0
      000683 A6 82            [24] 1758 	mov	@r0,dpl
      000685 08               [12] 1759 	inc	r0
      000686 A6 83            [24] 1760 	mov	@r0,dph
      000688 15 81            [12] 1761 	dec	sp
      00068A 15 81            [12] 1762 	dec	sp
      00068C E5*00            [12] 1763 	mov	a,_bp
      00068E 24 04            [12] 1764 	add	a,#0x04
      000690 F8               [12] 1765 	mov	r0,a
      000691 79r13            [12] 1766 	mov	r1,#_x
      000693 E7               [12] 1767 	mov	a,@r1
      000694 26               [12] 1768 	add	a,@r0
      000695 C0 E0            [24] 1769 	push	acc
      000697 09               [12] 1770 	inc	r1
      000698 E7               [12] 1771 	mov	a,@r1
      000699 08               [12] 1772 	inc	r0
      00069A 36               [12] 1773 	addc	a,@r0
      00069B C0 E0            [24] 1774 	push	acc
      00069D E5*00            [12] 1775 	mov	a,_bp
      00069F 24 03            [12] 1776 	add	a,#0x03
      0006A1 F8               [12] 1777 	mov	r0,a
      0006A2 D0 E0            [24] 1778 	pop	acc
      0006A4 F6               [12] 1779 	mov	@r0,a
      0006A5 18               [12] 1780 	dec	r0
      0006A6 D0 E0            [24] 1781 	pop	acc
      0006A8 F6               [12] 1782 	mov	@r0,a
      0006A9 A8*00            [24] 1783 	mov	r0,_bp
      0006AB 08               [12] 1784 	inc	r0
      0006AC 08               [12] 1785 	inc	r0
      0006AD E6               [12] 1786 	mov	a,@r0
      0006AE 24r00            [12] 1787 	add	a,#_u
      0006B0 F5 82            [12] 1788 	mov	dpl,a
      0006B2 08               [12] 1789 	inc	r0
      0006B3 E6               [12] 1790 	mov	a,@r0
      0006B4 34s48            [12] 1791 	addc	a,#(_u >> 8)
      0006B6 F5 83            [12] 1792 	mov	dph,a
      0006B8 E0               [24] 1793 	movx	a,@dptr
      0006B9 FB               [12] 1794 	mov	r3,a
      0006BA A8*00            [24] 1795 	mov	r0,_bp
      0006BC 08               [12] 1796 	inc	r0
      0006BD C3               [12] 1797 	clr	c
      0006BE E4               [12] 1798 	clr	a
      0006BF 9B               [12] 1799 	subb	a,r3
      0006C0 F6               [12] 1800 	mov	@r0,a
                                   1801 ;	life.c:236: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006C1 78r15            [12] 1802 	mov	r0,#_y
      0006C3 74 FF            [12] 1803 	mov	a,#0xff
      0006C5 26               [12] 1804 	add	a,@r0
      0006C6 FA               [12] 1805 	mov	r2,a
      0006C7 74 FF            [12] 1806 	mov	a,#0xff
      0006C9 08               [12] 1807 	inc	r0
      0006CA 36               [12] 1808 	addc	a,@r0
      0006CB FB               [12] 1809 	mov	r3,a
      0006CC 74 C0            [12] 1810 	mov	a,#0xc0
      0006CE 2A               [12] 1811 	add	a,r2
      0006CF FA               [12] 1812 	mov	r2,a
      0006D0 E4               [12] 1813 	clr	a
      0006D1 3B               [12] 1814 	addc	a,r3
      0006D2 FB               [12] 1815 	mov	r3,a
      0006D3 74 C0            [12] 1816 	mov	a,#0xc0
      0006D5 C0 E0            [24] 1817 	push	acc
      0006D7 E4               [12] 1818 	clr	a
      0006D8 C0 E0            [24] 1819 	push	acc
      0006DA 8A 82            [24] 1820 	mov	dpl,r2
      0006DC 8B 83            [24] 1821 	mov	dph,r3
      0006DE 12r00r00         [24] 1822 	lcall	__modsint
      0006E1 AA 82            [24] 1823 	mov	r2,dpl
      0006E3 AB 83            [24] 1824 	mov	r3,dph
      0006E5 15 81            [12] 1825 	dec	sp
      0006E7 15 81            [12] 1826 	dec	sp
      0006E9 C0 02            [24] 1827 	push	ar2
      0006EB C0 03            [24] 1828 	push	ar3
      0006ED 90 00 30         [24] 1829 	mov	dptr,#0x0030
      0006F0 12r00r00         [24] 1830 	lcall	__mulint
      0006F3 AA 82            [24] 1831 	mov	r2,dpl
      0006F5 AB 83            [24] 1832 	mov	r3,dph
      0006F7 15 81            [12] 1833 	dec	sp
      0006F9 15 81            [12] 1834 	dec	sp
      0006FB 78r13            [12] 1835 	mov	r0,#_x
      0006FD 74 FF            [12] 1836 	mov	a,#0xff
      0006FF 26               [12] 1837 	add	a,@r0
      000700 FC               [12] 1838 	mov	r4,a
      000701 74 FF            [12] 1839 	mov	a,#0xff
      000703 08               [12] 1840 	inc	r0
      000704 36               [12] 1841 	addc	a,@r0
      000705 FD               [12] 1842 	mov	r5,a
      000706 74 30            [12] 1843 	mov	a,#0x30
      000708 2C               [12] 1844 	add	a,r4
      000709 FC               [12] 1845 	mov	r4,a
      00070A E4               [12] 1846 	clr	a
      00070B 3D               [12] 1847 	addc	a,r5
      00070C FD               [12] 1848 	mov	r5,a
      00070D C0 03            [24] 1849 	push	ar3
      00070F C0 02            [24] 1850 	push	ar2
      000711 74 30            [12] 1851 	mov	a,#0x30
      000713 C0 E0            [24] 1852 	push	acc
      000715 E4               [12] 1853 	clr	a
      000716 C0 E0            [24] 1854 	push	acc
      000718 8C 82            [24] 1855 	mov	dpl,r4
      00071A 8D 83            [24] 1856 	mov	dph,r5
      00071C 12r00r00         [24] 1857 	lcall	__modsint
      00071F AC 82            [24] 1858 	mov	r4,dpl
      000721 AD 83            [24] 1859 	mov	r5,dph
      000723 15 81            [12] 1860 	dec	sp
      000725 15 81            [12] 1861 	dec	sp
      000727 D0 02            [24] 1862 	pop	ar2
      000729 D0 03            [24] 1863 	pop	ar3
      00072B EC               [12] 1864 	mov	a,r4
      00072C 2A               [12] 1865 	add	a,r2
      00072D FE               [12] 1866 	mov	r6,a
      00072E ED               [12] 1867 	mov	a,r5
      00072F 3B               [12] 1868 	addc	a,r3
      000730 FF               [12] 1869 	mov	r7,a
      000731 EE               [12] 1870 	mov	a,r6
      000732 24r00            [12] 1871 	add	a,#_u
      000734 F5 82            [12] 1872 	mov	dpl,a
      000736 EF               [12] 1873 	mov	a,r7
      000737 34s48            [12] 1874 	addc	a,#(_u >> 8)
      000739 F5 83            [12] 1875 	mov	dph,a
      00073B E0               [24] 1876 	movx	a,@dptr
      00073C FF               [12] 1877 	mov	r7,a
      00073D A8*00            [24] 1878 	mov	r0,_bp
      00073F 08               [12] 1879 	inc	r0
      000740 EF               [12] 1880 	mov	a,r7
      000741 26               [12] 1881 	add	a,@r0
      000742 F6               [12] 1882 	mov	@r0,a
                                   1883 ;	life.c:238: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000743 78r13            [12] 1884 	mov	r0,#_x
      000745 E5*00            [12] 1885 	mov	a,_bp
      000747 24 06            [12] 1886 	add	a,#0x06
      000749 F9               [12] 1887 	mov	r1,a
      00074A E6               [12] 1888 	mov	a,@r0
      00074B F7               [12] 1889 	mov	@r1,a
      00074C 08               [12] 1890 	inc	r0
      00074D 09               [12] 1891 	inc	r1
      00074E E6               [12] 1892 	mov	a,@r0
      00074F F7               [12] 1893 	mov	@r1,a
      000750 E5*00            [12] 1894 	mov	a,_bp
      000752 24 06            [12] 1895 	add	a,#0x06
      000754 F8               [12] 1896 	mov	r0,a
      000755 74 30            [12] 1897 	mov	a,#0x30
      000757 26               [12] 1898 	add	a,@r0
      000758 FE               [12] 1899 	mov	r6,a
      000759 E4               [12] 1900 	clr	a
      00075A 08               [12] 1901 	inc	r0
      00075B 36               [12] 1902 	addc	a,@r0
      00075C FF               [12] 1903 	mov	r7,a
      00075D C0 05            [24] 1904 	push	ar5
      00075F C0 04            [24] 1905 	push	ar4
      000761 C0 03            [24] 1906 	push	ar3
      000763 C0 02            [24] 1907 	push	ar2
      000765 74 30            [12] 1908 	mov	a,#0x30
      000767 C0 E0            [24] 1909 	push	acc
      000769 E4               [12] 1910 	clr	a
      00076A C0 E0            [24] 1911 	push	acc
      00076C 8E 82            [24] 1912 	mov	dpl,r6
      00076E 8F 83            [24] 1913 	mov	dph,r7
      000770 12r00r00         [24] 1914 	lcall	__modsint
      000773 C8               [12] 1915 	xch	a,r0
      000774 E5*00            [12] 1916 	mov	a,_bp
      000776 24 08            [12] 1917 	add	a,#0x08
      000778 C8               [12] 1918 	xch	a,r0
      000779 A6 82            [24] 1919 	mov	@r0,dpl
      00077B 08               [12] 1920 	inc	r0
      00077C A6 83            [24] 1921 	mov	@r0,dph
      00077E 15 81            [12] 1922 	dec	sp
      000780 15 81            [12] 1923 	dec	sp
      000782 D0 02            [24] 1924 	pop	ar2
      000784 D0 03            [24] 1925 	pop	ar3
      000786 E5*00            [12] 1926 	mov	a,_bp
      000788 24 08            [12] 1927 	add	a,#0x08
      00078A F8               [12] 1928 	mov	r0,a
      00078B E6               [12] 1929 	mov	a,@r0
      00078C 2A               [12] 1930 	add	a,r2
      00078D FE               [12] 1931 	mov	r6,a
      00078E 08               [12] 1932 	inc	r0
      00078F E6               [12] 1933 	mov	a,@r0
      000790 3B               [12] 1934 	addc	a,r3
      000791 FF               [12] 1935 	mov	r7,a
      000792 EE               [12] 1936 	mov	a,r6
      000793 24r00            [12] 1937 	add	a,#_u
      000795 F5 82            [12] 1938 	mov	dpl,a
      000797 EF               [12] 1939 	mov	a,r7
      000798 34s48            [12] 1940 	addc	a,#(_u >> 8)
      00079A F5 83            [12] 1941 	mov	dph,a
      00079C E0               [24] 1942 	movx	a,@dptr
      00079D FF               [12] 1943 	mov	r7,a
      00079E A8*00            [24] 1944 	mov	r0,_bp
      0007A0 08               [12] 1945 	inc	r0
      0007A1 EF               [12] 1946 	mov	a,r7
      0007A2 26               [12] 1947 	add	a,@r0
      0007A3 F6               [12] 1948 	mov	@r0,a
                                   1949 ;	life.c:240: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007A4 E5*00            [12] 1950 	mov	a,_bp
      0007A6 24 06            [12] 1951 	add	a,#0x06
      0007A8 F8               [12] 1952 	mov	r0,a
      0007A9 74 31            [12] 1953 	mov	a,#0x31
      0007AB 26               [12] 1954 	add	a,@r0
      0007AC FE               [12] 1955 	mov	r6,a
      0007AD E4               [12] 1956 	clr	a
      0007AE 08               [12] 1957 	inc	r0
      0007AF 36               [12] 1958 	addc	a,@r0
      0007B0 FF               [12] 1959 	mov	r7,a
      0007B1 C0 03            [24] 1960 	push	ar3
      0007B3 C0 02            [24] 1961 	push	ar2
      0007B5 74 30            [12] 1962 	mov	a,#0x30
      0007B7 C0 E0            [24] 1963 	push	acc
      0007B9 E4               [12] 1964 	clr	a
      0007BA C0 E0            [24] 1965 	push	acc
      0007BC 8E 82            [24] 1966 	mov	dpl,r6
      0007BE 8F 83            [24] 1967 	mov	dph,r7
      0007C0 12r00r00         [24] 1968 	lcall	__modsint
      0007C3 AE 82            [24] 1969 	mov	r6,dpl
      0007C5 AF 83            [24] 1970 	mov	r7,dph
      0007C7 15 81            [12] 1971 	dec	sp
      0007C9 15 81            [12] 1972 	dec	sp
      0007CB D0 02            [24] 1973 	pop	ar2
      0007CD D0 03            [24] 1974 	pop	ar3
      0007CF D0 04            [24] 1975 	pop	ar4
      0007D1 D0 05            [24] 1976 	pop	ar5
      0007D3 EE               [12] 1977 	mov	a,r6
      0007D4 2A               [12] 1978 	add	a,r2
      0007D5 FA               [12] 1979 	mov	r2,a
      0007D6 EF               [12] 1980 	mov	a,r7
      0007D7 3B               [12] 1981 	addc	a,r3
      0007D8 FB               [12] 1982 	mov	r3,a
      0007D9 EA               [12] 1983 	mov	a,r2
      0007DA 24r00            [12] 1984 	add	a,#_u
      0007DC F5 82            [12] 1985 	mov	dpl,a
      0007DE EB               [12] 1986 	mov	a,r3
      0007DF 34s48            [12] 1987 	addc	a,#(_u >> 8)
      0007E1 F5 83            [12] 1988 	mov	dph,a
      0007E3 E0               [24] 1989 	movx	a,@dptr
      0007E4 FB               [12] 1990 	mov	r3,a
      0007E5 A8*00            [24] 1991 	mov	r0,_bp
      0007E7 08               [12] 1992 	inc	r0
      0007E8 EB               [12] 1993 	mov	a,r3
      0007E9 26               [12] 1994 	add	a,@r0
      0007EA F6               [12] 1995 	mov	@r0,a
                                   1996 ;	life.c:242: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007EB 78r15            [12] 1997 	mov	r0,#_y
      0007ED E5*00            [12] 1998 	mov	a,_bp
      0007EF 24 0A            [12] 1999 	add	a,#0x0a
      0007F1 F9               [12] 2000 	mov	r1,a
      0007F2 E6               [12] 2001 	mov	a,@r0
      0007F3 F7               [12] 2002 	mov	@r1,a
      0007F4 08               [12] 2003 	inc	r0
      0007F5 09               [12] 2004 	inc	r1
      0007F6 E6               [12] 2005 	mov	a,@r0
      0007F7 F7               [12] 2006 	mov	@r1,a
      0007F8 E5*00            [12] 2007 	mov	a,_bp
      0007FA 24 0A            [12] 2008 	add	a,#0x0a
      0007FC F8               [12] 2009 	mov	r0,a
      0007FD 74 C0            [12] 2010 	mov	a,#0xc0
      0007FF 26               [12] 2011 	add	a,@r0
      000800 FA               [12] 2012 	mov	r2,a
      000801 E4               [12] 2013 	clr	a
      000802 08               [12] 2014 	inc	r0
      000803 36               [12] 2015 	addc	a,@r0
      000804 FB               [12] 2016 	mov	r3,a
      000805 C0 07            [24] 2017 	push	ar7
      000807 C0 06            [24] 2018 	push	ar6
      000809 C0 05            [24] 2019 	push	ar5
      00080B C0 04            [24] 2020 	push	ar4
      00080D 74 C0            [12] 2021 	mov	a,#0xc0
      00080F C0 E0            [24] 2022 	push	acc
      000811 E4               [12] 2023 	clr	a
      000812 C0 E0            [24] 2024 	push	acc
      000814 8A 82            [24] 2025 	mov	dpl,r2
      000816 8B 83            [24] 2026 	mov	dph,r3
      000818 12r00r00         [24] 2027 	lcall	__modsint
      00081B AA 82            [24] 2028 	mov	r2,dpl
      00081D AB 83            [24] 2029 	mov	r3,dph
      00081F 15 81            [12] 2030 	dec	sp
      000821 15 81            [12] 2031 	dec	sp
      000823 C0 02            [24] 2032 	push	ar2
      000825 C0 03            [24] 2033 	push	ar3
      000827 90 00 30         [24] 2034 	mov	dptr,#0x0030
      00082A 12r00r00         [24] 2035 	lcall	__mulint
      00082D C8               [12] 2036 	xch	a,r0
      00082E E5*00            [12] 2037 	mov	a,_bp
      000830 24 0C            [12] 2038 	add	a,#0x0c
      000832 C8               [12] 2039 	xch	a,r0
      000833 A6 82            [24] 2040 	mov	@r0,dpl
      000835 08               [12] 2041 	inc	r0
      000836 A6 83            [24] 2042 	mov	@r0,dph
      000838 15 81            [12] 2043 	dec	sp
      00083A 15 81            [12] 2044 	dec	sp
      00083C D0 04            [24] 2045 	pop	ar4
      00083E D0 05            [24] 2046 	pop	ar5
      000840 D0 06            [24] 2047 	pop	ar6
      000842 D0 07            [24] 2048 	pop	ar7
      000844 E5*00            [12] 2049 	mov	a,_bp
      000846 24 0C            [12] 2050 	add	a,#0x0c
      000848 F8               [12] 2051 	mov	r0,a
      000849 EC               [12] 2052 	mov	a,r4
      00084A 26               [12] 2053 	add	a,@r0
      00084B FA               [12] 2054 	mov	r2,a
      00084C ED               [12] 2055 	mov	a,r5
      00084D 08               [12] 2056 	inc	r0
      00084E 36               [12] 2057 	addc	a,@r0
      00084F FB               [12] 2058 	mov	r3,a
      000850 EA               [12] 2059 	mov	a,r2
      000851 24r00            [12] 2060 	add	a,#_u
      000853 F5 82            [12] 2061 	mov	dpl,a
      000855 EB               [12] 2062 	mov	a,r3
      000856 34s48            [12] 2063 	addc	a,#(_u >> 8)
      000858 F5 83            [12] 2064 	mov	dph,a
      00085A E0               [24] 2065 	movx	a,@dptr
      00085B FB               [12] 2066 	mov	r3,a
      00085C A8*00            [24] 2067 	mov	r0,_bp
      00085E 08               [12] 2068 	inc	r0
      00085F EB               [12] 2069 	mov	a,r3
      000860 26               [12] 2070 	add	a,@r0
      000861 F6               [12] 2071 	mov	@r0,a
                                   2072 ;	life.c:244: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000862 E5*00            [12] 2073 	mov	a,_bp
      000864 24 0C            [12] 2074 	add	a,#0x0c
      000866 F8               [12] 2075 	mov	r0,a
      000867 E5*00            [12] 2076 	mov	a,_bp
      000869 24 08            [12] 2077 	add	a,#0x08
      00086B F9               [12] 2078 	mov	r1,a
      00086C E7               [12] 2079 	mov	a,@r1
      00086D 26               [12] 2080 	add	a,@r0
      00086E FA               [12] 2081 	mov	r2,a
      00086F 09               [12] 2082 	inc	r1
      000870 E7               [12] 2083 	mov	a,@r1
      000871 08               [12] 2084 	inc	r0
      000872 36               [12] 2085 	addc	a,@r0
      000873 FB               [12] 2086 	mov	r3,a
      000874 EA               [12] 2087 	mov	a,r2
      000875 24r00            [12] 2088 	add	a,#_u
      000877 F5 82            [12] 2089 	mov	dpl,a
      000879 EB               [12] 2090 	mov	a,r3
      00087A 34s48            [12] 2091 	addc	a,#(_u >> 8)
      00087C F5 83            [12] 2092 	mov	dph,a
      00087E E0               [24] 2093 	movx	a,@dptr
      00087F FB               [12] 2094 	mov	r3,a
      000880 A8*00            [24] 2095 	mov	r0,_bp
      000882 08               [12] 2096 	inc	r0
      000883 EB               [12] 2097 	mov	a,r3
      000884 26               [12] 2098 	add	a,@r0
      000885 F6               [12] 2099 	mov	@r0,a
                                   2100 ;	life.c:246: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000886 E5*00            [12] 2101 	mov	a,_bp
      000888 24 0C            [12] 2102 	add	a,#0x0c
      00088A F8               [12] 2103 	mov	r0,a
      00088B EE               [12] 2104 	mov	a,r6
      00088C 26               [12] 2105 	add	a,@r0
      00088D FA               [12] 2106 	mov	r2,a
      00088E EF               [12] 2107 	mov	a,r7
      00088F 08               [12] 2108 	inc	r0
      000890 36               [12] 2109 	addc	a,@r0
      000891 FB               [12] 2110 	mov	r3,a
      000892 EA               [12] 2111 	mov	a,r2
      000893 24r00            [12] 2112 	add	a,#_u
      000895 F5 82            [12] 2113 	mov	dpl,a
      000897 EB               [12] 2114 	mov	a,r3
      000898 34s48            [12] 2115 	addc	a,#(_u >> 8)
      00089A F5 83            [12] 2116 	mov	dph,a
      00089C E0               [24] 2117 	movx	a,@dptr
      00089D FB               [12] 2118 	mov	r3,a
      00089E A8*00            [24] 2119 	mov	r0,_bp
      0008A0 08               [12] 2120 	inc	r0
      0008A1 E5*00            [12] 2121 	mov	a,_bp
      0008A3 24 0C            [12] 2122 	add	a,#0x0c
      0008A5 F9               [12] 2123 	mov	r1,a
      0008A6 EB               [12] 2124 	mov	a,r3
      0008A7 26               [12] 2125 	add	a,@r0
      0008A8 F7               [12] 2126 	mov	@r1,a
                                   2127 ;	life.c:248: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008A9 E5*00            [12] 2128 	mov	a,_bp
      0008AB 24 0A            [12] 2129 	add	a,#0x0a
      0008AD F8               [12] 2130 	mov	r0,a
      0008AE 74 C1            [12] 2131 	mov	a,#0xc1
      0008B0 26               [12] 2132 	add	a,@r0
      0008B1 FA               [12] 2133 	mov	r2,a
      0008B2 E4               [12] 2134 	clr	a
      0008B3 08               [12] 2135 	inc	r0
      0008B4 36               [12] 2136 	addc	a,@r0
      0008B5 FB               [12] 2137 	mov	r3,a
      0008B6 C0 07            [24] 2138 	push	ar7
      0008B8 C0 06            [24] 2139 	push	ar6
      0008BA C0 05            [24] 2140 	push	ar5
      0008BC C0 04            [24] 2141 	push	ar4
      0008BE 74 C0            [12] 2142 	mov	a,#0xc0
      0008C0 C0 E0            [24] 2143 	push	acc
      0008C2 E4               [12] 2144 	clr	a
      0008C3 C0 E0            [24] 2145 	push	acc
      0008C5 8A 82            [24] 2146 	mov	dpl,r2
      0008C7 8B 83            [24] 2147 	mov	dph,r3
      0008C9 12r00r00         [24] 2148 	lcall	__modsint
      0008CC AA 82            [24] 2149 	mov	r2,dpl
      0008CE AB 83            [24] 2150 	mov	r3,dph
      0008D0 15 81            [12] 2151 	dec	sp
      0008D2 15 81            [12] 2152 	dec	sp
      0008D4 C0 02            [24] 2153 	push	ar2
      0008D6 C0 03            [24] 2154 	push	ar3
      0008D8 90 00 30         [24] 2155 	mov	dptr,#0x0030
      0008DB 12r00r00         [24] 2156 	lcall	__mulint
      0008DE AA 82            [24] 2157 	mov	r2,dpl
      0008E0 AB 83            [24] 2158 	mov	r3,dph
      0008E2 15 81            [12] 2159 	dec	sp
      0008E4 15 81            [12] 2160 	dec	sp
      0008E6 D0 04            [24] 2161 	pop	ar4
      0008E8 D0 05            [24] 2162 	pop	ar5
      0008EA D0 06            [24] 2163 	pop	ar6
      0008EC D0 07            [24] 2164 	pop	ar7
      0008EE EC               [12] 2165 	mov	a,r4
      0008EF 2A               [12] 2166 	add	a,r2
      0008F0 FC               [12] 2167 	mov	r4,a
      0008F1 ED               [12] 2168 	mov	a,r5
      0008F2 3B               [12] 2169 	addc	a,r3
      0008F3 FD               [12] 2170 	mov	r5,a
      0008F4 EC               [12] 2171 	mov	a,r4
      0008F5 24r00            [12] 2172 	add	a,#_u
      0008F7 F5 82            [12] 2173 	mov	dpl,a
      0008F9 ED               [12] 2174 	mov	a,r5
      0008FA 34s48            [12] 2175 	addc	a,#(_u >> 8)
      0008FC F5 83            [12] 2176 	mov	dph,a
      0008FE E0               [24] 2177 	movx	a,@dptr
      0008FF FD               [12] 2178 	mov	r5,a
      000900 E5*00            [12] 2179 	mov	a,_bp
      000902 24 0C            [12] 2180 	add	a,#0x0c
      000904 F8               [12] 2181 	mov	r0,a
      000905 E5*00            [12] 2182 	mov	a,_bp
      000907 24 0C            [12] 2183 	add	a,#0x0c
      000909 F9               [12] 2184 	mov	r1,a
      00090A ED               [12] 2185 	mov	a,r5
      00090B 26               [12] 2186 	add	a,@r0
      00090C F7               [12] 2187 	mov	@r1,a
                                   2188 ;	life.c:250: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00090D E5*00            [12] 2189 	mov	a,_bp
      00090F 24 08            [12] 2190 	add	a,#0x08
      000911 F8               [12] 2191 	mov	r0,a
      000912 E6               [12] 2192 	mov	a,@r0
      000913 2A               [12] 2193 	add	a,r2
      000914 FC               [12] 2194 	mov	r4,a
      000915 08               [12] 2195 	inc	r0
      000916 E6               [12] 2196 	mov	a,@r0
      000917 3B               [12] 2197 	addc	a,r3
      000918 FD               [12] 2198 	mov	r5,a
      000919 EC               [12] 2199 	mov	a,r4
      00091A 24r00            [12] 2200 	add	a,#_u
      00091C F5 82            [12] 2201 	mov	dpl,a
      00091E ED               [12] 2202 	mov	a,r5
      00091F 34s48            [12] 2203 	addc	a,#(_u >> 8)
      000921 F5 83            [12] 2204 	mov	dph,a
      000923 E0               [24] 2205 	movx	a,@dptr
      000924 FD               [12] 2206 	mov	r5,a
      000925 E5*00            [12] 2207 	mov	a,_bp
      000927 24 0C            [12] 2208 	add	a,#0x0c
      000929 F8               [12] 2209 	mov	r0,a
      00092A ED               [12] 2210 	mov	a,r5
      00092B 26               [12] 2211 	add	a,@r0
      00092C FD               [12] 2212 	mov	r5,a
                                   2213 ;	life.c:251: y1 = 1; x1 = 1;
      00092D 78r20            [12] 2214 	mov	r0,#_y1
      00092F 76 01            [12] 2215 	mov	@r0,#0x01
      000931 08               [12] 2216 	inc	r0
      000932 76 00            [12] 2217 	mov	@r0,#0x00
      000934 78r1E            [12] 2218 	mov	r0,#_x1
      000936 76 01            [12] 2219 	mov	@r0,#0x01
      000938 08               [12] 2220 	inc	r0
      000939 76 00            [12] 2221 	mov	@r0,#0x00
                                   2222 ;	life.c:252: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00093B EE               [12] 2223 	mov	a,r6
      00093C 2A               [12] 2224 	add	a,r2
      00093D FE               [12] 2225 	mov	r6,a
      00093E EF               [12] 2226 	mov	a,r7
      00093F 3B               [12] 2227 	addc	a,r3
      000940 FF               [12] 2228 	mov	r7,a
      000941 EE               [12] 2229 	mov	a,r6
      000942 24r00            [12] 2230 	add	a,#_u
      000944 F5 82            [12] 2231 	mov	dpl,a
      000946 EF               [12] 2232 	mov	a,r7
      000947 34s48            [12] 2233 	addc	a,#(_u >> 8)
      000949 F5 83            [12] 2234 	mov	dph,a
      00094B E0               [24] 2235 	movx	a,@dptr
      00094C 2D               [12] 2236 	add	a,r5
      00094D FF               [12] 2237 	mov	r7,a
      00094E 78r1B            [12] 2238 	mov	r0,#_n
      000950 A6 07            [24] 2239 	mov	@r0,ar7
                                   2240 ;	life.c:254: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000952 A8*00            [24] 2241 	mov	r0,_bp
      000954 08               [12] 2242 	inc	r0
      000955 08               [12] 2243 	inc	r0
      000956 E6               [12] 2244 	mov	a,@r0
      000957 24r00            [12] 2245 	add	a,#_nu
      000959 FD               [12] 2246 	mov	r5,a
      00095A 08               [12] 2247 	inc	r0
      00095B E6               [12] 2248 	mov	a,@r0
      00095C 34s6C            [12] 2249 	addc	a,#(_nu >> 8)
      00095E FE               [12] 2250 	mov	r6,a
      00095F BF 03 02         [24] 2251 	cjne	r7,#0x03,00597$
      000962 80 28            [24] 2252 	sjmp	00266$
      000964                       2253 00597$:
      000964 BF 02 21         [24] 2254 	cjne	r7,#0x02,00265$
      000967 E5*00            [12] 2255 	mov	a,_bp
      000969 24 04            [12] 2256 	add	a,#0x04
      00096B F8               [12] 2257 	mov	r0,a
      00096C E5*00            [12] 2258 	mov	a,_bp
      00096E 24 06            [12] 2259 	add	a,#0x06
      000970 F9               [12] 2260 	mov	r1,a
      000971 E7               [12] 2261 	mov	a,@r1
      000972 26               [12] 2262 	add	a,@r0
      000973 FC               [12] 2263 	mov	r4,a
      000974 09               [12] 2264 	inc	r1
      000975 E7               [12] 2265 	mov	a,@r1
      000976 08               [12] 2266 	inc	r0
      000977 36               [12] 2267 	addc	a,@r0
      000978 FF               [12] 2268 	mov	r7,a
      000979 EC               [12] 2269 	mov	a,r4
      00097A 24r00            [12] 2270 	add	a,#_u
      00097C FC               [12] 2271 	mov	r4,a
      00097D EF               [12] 2272 	mov	a,r7
      00097E 34s48            [12] 2273 	addc	a,#(_u >> 8)
      000980 FF               [12] 2274 	mov	r7,a
      000981 8C 82            [24] 2275 	mov	dpl,r4
      000983 8F 83            [24] 2276 	mov	dph,r7
      000985 E0               [24] 2277 	movx	a,@dptr
      000986 70 04            [24] 2278 	jnz	00266$
      000988                       2279 00265$:
                                   2280 ;	assignBit
      000988 C2*00            [12] 2281 	clr	b0
      00098A 80 02            [24] 2282 	sjmp	00267$
      00098C                       2283 00266$:
                                   2284 ;	assignBit
      00098C D2*00            [12] 2285 	setb	b0
      00098E                       2286 00267$:
      00098E A2*00            [12] 2287 	mov	c,b0
      000990 E4               [12] 2288 	clr	a
      000991 33               [12] 2289 	rlc	a
      000992 8D 82            [24] 2290 	mov	dpl,r5
      000994 8E 83            [24] 2291 	mov	dph,r6
      000996 F0               [24] 2292 	movx	@dptr,a
                                   2293 ;	life.c:255: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000997 78r15            [12] 2294 	mov	r0,#_y
      000999 E6               [12] 2295 	mov	a,@r0
      00099A C0 E0            [24] 2296 	push	acc
      00099C 08               [12] 2297 	inc	r0
      00099D E6               [12] 2298 	mov	a,@r0
      00099E C0 E0            [24] 2299 	push	acc
      0009A0 90 00 30         [24] 2300 	mov	dptr,#0x0030
      0009A3 12r00r00         [24] 2301 	lcall	__mulint
      0009A6 AE 82            [24] 2302 	mov	r6,dpl
      0009A8 AF 83            [24] 2303 	mov	r7,dph
      0009AA 15 81            [12] 2304 	dec	sp
      0009AC 15 81            [12] 2305 	dec	sp
      0009AE 78r13            [12] 2306 	mov	r0,#_x
      0009B0 E6               [12] 2307 	mov	a,@r0
      0009B1 2E               [12] 2308 	add	a,r6
      0009B2 FE               [12] 2309 	mov	r6,a
      0009B3 08               [12] 2310 	inc	r0
      0009B4 E6               [12] 2311 	mov	a,@r0
      0009B5 3F               [12] 2312 	addc	a,r7
      0009B6 FF               [12] 2313 	mov	r7,a
      0009B7 EE               [12] 2314 	mov	a,r6
      0009B8 24r00            [12] 2315 	add	a,#_pu
      0009BA F5 82            [12] 2316 	mov	dpl,a
      0009BC EF               [12] 2317 	mov	a,r7
      0009BD 34s24            [12] 2318 	addc	a,#(_pu >> 8)
      0009BF F5 83            [12] 2319 	mov	dph,a
      0009C1 E0               [24] 2320 	movx	a,@dptr
      0009C2 FD               [12] 2321 	mov	r5,a
      0009C3 EE               [12] 2322 	mov	a,r6
      0009C4 24r00            [12] 2323 	add	a,#_nu
      0009C6 F5 82            [12] 2324 	mov	dpl,a
      0009C8 EF               [12] 2325 	mov	a,r7
      0009C9 34s6C            [12] 2326 	addc	a,#(_nu >> 8)
      0009CB F5 83            [12] 2327 	mov	dph,a
      0009CD E0               [24] 2328 	movx	a,@dptr
      0009CE FC               [12] 2329 	mov	r4,a
      0009CF 6D               [12] 2330 	xrl	a,r5
      0009D0 78r1D            [12] 2331 	mov	r0,#_cycle2
      0009D2 46               [12] 2332 	orl	a,@r0
      0009D3 F6               [12] 2333 	mov	@r0,a
                                   2334 ;	life.c:256: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0009D4 EE               [12] 2335 	mov	a,r6
      0009D5 24r00            [12] 2336 	add	a,#_u
      0009D7 F5 82            [12] 2337 	mov	dpl,a
      0009D9 EF               [12] 2338 	mov	a,r7
      0009DA 34s48            [12] 2339 	addc	a,#(_u >> 8)
      0009DC F5 83            [12] 2340 	mov	dph,a
      0009DE E0               [24] 2341 	movx	a,@dptr
      0009DF FF               [12] 2342 	mov	r7,a
      0009E0 EC               [12] 2343 	mov	a,r4
      0009E1 6F               [12] 2344 	xrl	a,r7
      0009E2 78r1C            [12] 2345 	mov	r0,#_fixed
      0009E4 46               [12] 2346 	orl	a,@r0
      0009E5 F6               [12] 2347 	mov	@r0,a
                                   2348 ;	life.c:232: for (x = 0; x < W; x++) {
      0009E6 78r13            [12] 2349 	mov	r0,#_x
      0009E8 06               [12] 2350 	inc	@r0
      0009E9 B6 00 02         [24] 2351 	cjne	@r0,#0x00,00601$
      0009EC 08               [12] 2352 	inc	r0
      0009ED 06               [12] 2353 	inc	@r0
      0009EE                       2354 00601$:
      0009EE 78r13            [12] 2355 	mov	r0,#_x
      0009F0 C3               [12] 2356 	clr	c
      0009F1 E6               [12] 2357 	mov	a,@r0
      0009F2 94 30            [12] 2358 	subb	a,#0x30
      0009F4 08               [12] 2359 	inc	r0
      0009F5 E6               [12] 2360 	mov	a,@r0
      0009F6 64 80            [12] 2361 	xrl	a,#0x80
      0009F8 94 80            [12] 2362 	subb	a,#0x80
      0009FA 50 03            [24] 2363 	jnc	00602$
      0009FC 02r06r6E         [24] 2364 	ljmp	00238$
      0009FF                       2365 00602$:
                                   2366 ;	life.c:229: for (y = 0; y < H; y++) {
      0009FF 78r15            [12] 2367 	mov	r0,#_y
      000A01 06               [12] 2368 	inc	@r0
      000A02 B6 00 02         [24] 2369 	cjne	@r0,#0x00,00603$
      000A05 08               [12] 2370 	inc	r0
      000A06 06               [12] 2371 	inc	@r0
      000A07                       2372 00603$:
      000A07 78r15            [12] 2373 	mov	r0,#_y
      000A09 C3               [12] 2374 	clr	c
      000A0A E6               [12] 2375 	mov	a,@r0
      000A0B 94 C0            [12] 2376 	subb	a,#0xc0
      000A0D 08               [12] 2377 	inc	r0
      000A0E E6               [12] 2378 	mov	a,@r0
      000A0F 64 80            [12] 2379 	xrl	a,#0x80
      000A11 94 80            [12] 2380 	subb	a,#0x80
      000A13 50 03            [24] 2381 	jnc	00604$
      000A15 02r06r52         [24] 2382 	ljmp	00240$
      000A18                       2383 00604$:
                                   2384 ;	life.c:260: OE76 = OE76_0;
      000A18 78r12            [12] 2385 	mov	r0,#_OE76
      000A1A 76 3F            [12] 2386 	mov	@r0,#0x3f
                                   2387 ;	life.c:261: flashOE();
      000A1C 12r00r3A         [24] 2388 	lcall	_flashOE
                                   2389 ;	life.c:263: cycle2 = !cycle2;
      000A1F 78r1D            [12] 2390 	mov	r0,#_cycle2
      000A21 E6               [12] 2391 	mov	a,@r0
      000A22 B4 01 00         [24] 2392 	cjne	a,#0x01,00605$
      000A25                       2393 00605$:
      000A25 92*00            [24] 2394 	mov	b0,c
      000A27 78r1D            [12] 2395 	mov	r0,#_cycle2
      000A29 E4               [12] 2396 	clr	a
      000A2A 33               [12] 2397 	rlc	a
      000A2B F6               [12] 2398 	mov	@r0,a
                                   2399 ;	life.c:264: fixed = !fixed;
      000A2C 78r1C            [12] 2400 	mov	r0,#_fixed
      000A2E E6               [12] 2401 	mov	a,@r0
      000A2F B4 01 00         [24] 2402 	cjne	a,#0x01,00606$
      000A32                       2403 00606$:
      000A32 92*00            [24] 2404 	mov	b0,c
      000A34 78r1C            [12] 2405 	mov	r0,#_fixed
      000A36 E4               [12] 2406 	clr	a
      000A37 33               [12] 2407 	rlc	a
      000A38 F6               [12] 2408 	mov	@r0,a
                                   2409 ;	life.c:266: memcpy(pu, u, sizeof (u));
      000A39 E4               [12] 2410 	clr	a
      000A3A C0 E0            [24] 2411 	push	acc
      000A3C 74 24            [12] 2412 	mov	a,#0x24
      000A3E C0 E0            [24] 2413 	push	acc
      000A40 74r00            [12] 2414 	mov	a,#_u
      000A42 C0 E0            [24] 2415 	push	acc
      000A44 74s48            [12] 2416 	mov	a,#(_u >> 8)
      000A46 C0 E0            [24] 2417 	push	acc
      000A48 E4               [12] 2418 	clr	a
      000A49 C0 E0            [24] 2419 	push	acc
      000A4B 90r24r00         [24] 2420 	mov	dptr,#_pu
      000A4E 75 F0 00         [24] 2421 	mov	b,#0x00
      000A51 12r00r00         [24] 2422 	lcall	___memcpy
      000A54 E5 81            [12] 2423 	mov	a,sp
      000A56 24 FB            [12] 2424 	add	a,#0xfb
      000A58 F5 81            [12] 2425 	mov	sp,a
                                   2426 ;	life.c:267: memcpy(u, nu, sizeof (nu));
      000A5A E4               [12] 2427 	clr	a
      000A5B C0 E0            [24] 2428 	push	acc
      000A5D 74 24            [12] 2429 	mov	a,#0x24
      000A5F C0 E0            [24] 2430 	push	acc
      000A61 74r00            [12] 2431 	mov	a,#_nu
      000A63 C0 E0            [24] 2432 	push	acc
      000A65 74s6C            [12] 2433 	mov	a,#(_nu >> 8)
      000A67 C0 E0            [24] 2434 	push	acc
      000A69 E4               [12] 2435 	clr	a
      000A6A C0 E0            [24] 2436 	push	acc
      000A6C 90r48r00         [24] 2437 	mov	dptr,#_u
      000A6F 75 F0 00         [24] 2438 	mov	b,#0x00
      000A72 12r00r00         [24] 2439 	lcall	___memcpy
      000A75 E5 81            [12] 2440 	mov	a,sp
      000A77 24 FB            [12] 2441 	add	a,#0xfb
      000A79 F5 81            [12] 2442 	mov	sp,a
                                   2443 ;	life.c:321: if (fixed || cycle2) {
      000A7B 78r1C            [12] 2444 	mov	r0,#_fixed
      000A7D E6               [12] 2445 	mov	a,@r0
      000A7E 70 05            [24] 2446 	jnz	00135$
      000A80 78r1D            [12] 2447 	mov	r0,#_cycle2
      000A82 E6               [12] 2448 	mov	a,@r0
      000A83 60 70            [24] 2449 	jz	00136$
      000A85                       2450 00135$:
                                   2451 ;	life.c:322: printstr("DONE ");
      000A85 7Dr64            [12] 2452 	mov	r5,#___str_10
      000A87 7Es00            [12] 2453 	mov	r6,#(___str_10 >> 8)
      000A89 7F 80            [12] 2454 	mov	r7,#0x80
                                   2455 ;	life.c:68: return;
      000A8B                       2456 00243$:
                                   2457 ;	life.c:66: for (; *s; s++) putchar(*s);
      000A8B 8D 82            [24] 2458 	mov	dpl,r5
      000A8D 8E 83            [24] 2459 	mov	dph,r6
      000A8F 8F F0            [24] 2460 	mov	b,r7
      000A91 12r00r00         [24] 2461 	lcall	__gptrget
      000A94 FC               [12] 2462 	mov	r4,a
      000A95 60 10            [24] 2463 	jz	00201$
      000A97 7B 00            [12] 2464 	mov	r3,#0x00
      000A99 8C 82            [24] 2465 	mov	dpl,r4
      000A9B 8B 83            [24] 2466 	mov	dph,r3
      000A9D 12r00r00         [24] 2467 	lcall	_putchar
      000AA0 0D               [12] 2468 	inc	r5
                                   2469 ;	life.c:322: printstr("DONE ");
      000AA1 BD 00 E7         [24] 2470 	cjne	r5,#0x00,00243$
      000AA4 0E               [12] 2471 	inc	r6
      000AA5 80 E4            [24] 2472 	sjmp	00243$
      000AA7                       2473 00201$:
                                   2474 ;	life.c:323: if (fixed) printstr("FIXED\r\n");
      000AA7 78r1C            [12] 2475 	mov	r0,#_fixed
      000AA9 E6               [12] 2476 	mov	a,@r0
      000AAA 60 22            [24] 2477 	jz	00133$
      000AAC 7Dr6A            [12] 2478 	mov	r5,#___str_11
      000AAE 7Es00            [12] 2479 	mov	r6,#(___str_11 >> 8)
      000AB0 7F 80            [12] 2480 	mov	r7,#0x80
                                   2481 ;	life.c:68: return;
      000AB2                       2482 00246$:
                                   2483 ;	life.c:66: for (; *s; s++) putchar(*s);
      000AB2 8D 82            [24] 2484 	mov	dpl,r5
      000AB4 8E 83            [24] 2485 	mov	dph,r6
      000AB6 8F F0            [24] 2486 	mov	b,r7
      000AB8 12r00r00         [24] 2487 	lcall	__gptrget
      000ABB FC               [12] 2488 	mov	r4,a
      000ABC 60 32            [24] 2489 	jz	00134$
      000ABE 7B 00            [12] 2490 	mov	r3,#0x00
      000AC0 8C 82            [24] 2491 	mov	dpl,r4
      000AC2 8B 83            [24] 2492 	mov	dph,r3
      000AC4 12r00r00         [24] 2493 	lcall	_putchar
      000AC7 0D               [12] 2494 	inc	r5
                                   2495 ;	life.c:323: if (fixed) printstr("FIXED\r\n");
      000AC8 BD 00 E7         [24] 2496 	cjne	r5,#0x00,00246$
      000ACB 0E               [12] 2497 	inc	r6
      000ACC 80 E4            [24] 2498 	sjmp	00246$
      000ACE                       2499 00133$:
                                   2500 ;	life.c:324: else printstr("CYCLE2\r\n");
      000ACE 7Dr72            [12] 2501 	mov	r5,#___str_12
      000AD0 7Es00            [12] 2502 	mov	r6,#(___str_12 >> 8)
      000AD2 7F 80            [12] 2503 	mov	r7,#0x80
                                   2504 ;	life.c:68: return;
      000AD4                       2505 00249$:
                                   2506 ;	life.c:66: for (; *s; s++) putchar(*s);
      000AD4 8D 82            [24] 2507 	mov	dpl,r5
      000AD6 8E 83            [24] 2508 	mov	dph,r6
      000AD8 8F F0            [24] 2509 	mov	b,r7
      000ADA 12r00r00         [24] 2510 	lcall	__gptrget
      000ADD FC               [12] 2511 	mov	r4,a
      000ADE 60 10            [24] 2512 	jz	00134$
      000AE0 7B 00            [12] 2513 	mov	r3,#0x00
      000AE2 8C 82            [24] 2514 	mov	dpl,r4
      000AE4 8B 83            [24] 2515 	mov	dph,r3
      000AE6 12r00r00         [24] 2516 	lcall	_putchar
      000AE9 0D               [12] 2517 	inc	r5
                                   2518 ;	life.c:324: else printstr("CYCLE2\r\n");
      000AEA BD 00 E7         [24] 2519 	cjne	r5,#0x00,00249$
      000AED 0E               [12] 2520 	inc	r6
      000AEE 80 E4            [24] 2521 	sjmp	00249$
      000AF0                       2522 00134$:
                                   2523 ;	life.c:325: (void)getchar();
      000AF0 12r00r05         [24] 2524 	lcall	_getchar
                                   2525 ;	life.c:326: break;
      000AF3 80 50            [24] 2526 	sjmp	00145$
      000AF5                       2527 00136$:
                                   2528 ;	life.c:329: c = getchar_poll();
      000AF5 12r00r0E         [24] 2529 	lcall	_getchar_poll
      000AF8 AE 82            [24] 2530 	mov	r6,dpl
      000AFA AF 83            [24] 2531 	mov	r7,dph
      000AFC 78r19            [12] 2532 	mov	r0,#_c
      000AFE A6 06            [24] 2533 	mov	@r0,ar6
      000B00 08               [12] 2534 	inc	r0
      000B01 A6 07            [24] 2535 	mov	@r0,ar7
                                   2536 ;	life.c:330: if (c > 0) {
      000B03 C3               [12] 2537 	clr	c
      000B04 E4               [12] 2538 	clr	a
      000B05 9E               [12] 2539 	subb	a,r6
      000B06 74 80            [12] 2540 	mov	a,#(0x00 ^ 0x80)
      000B08 8F F0            [24] 2541 	mov	b,r7
      000B0A 63 F0 80         [24] 2542 	xrl	b,#0x80
      000B0D 95 F0            [12] 2543 	subb	a,b
      000B0F 40 03            [24] 2544 	jc	00616$
      000B11 02r06r27         [24] 2545 	ljmp	00253$
      000B14                       2546 00616$:
                                   2547 ;	life.c:331: c = toupper(c);
      000B14 8E 82            [24] 2548 	mov	dpl,r6
      000B16 8F 83            [24] 2549 	mov	dph,r7
      000B18 12r00r00         [24] 2550 	lcall	_toupper
      000B1B AE 82            [24] 2551 	mov	r6,dpl
      000B1D AF 83            [24] 2552 	mov	r7,dph
      000B1F 78r19            [12] 2553 	mov	r0,#_c
      000B21 A6 06            [24] 2554 	mov	@r0,ar6
      000B23 08               [12] 2555 	inc	r0
      000B24 A6 07            [24] 2556 	mov	@r0,ar7
                                   2557 ;	life.c:332: if (c == (int)'T') i0 = 1;
      000B26 BE 54 0A         [24] 2558 	cjne	r6,#0x54,00141$
      000B29 BF 00 07         [24] 2559 	cjne	r7,#0x00,00141$
      000B2C 78r10            [12] 2560 	mov	r0,#_i0
      000B2E 76 01            [12] 2561 	mov	@r0,#0x01
      000B30 02r06r27         [24] 2562 	ljmp	00253$
      000B33                       2563 00141$:
                                   2564 ;	life.c:333: else if (c == (int)'B') i1 = 1;
      000B33 BE 42 05         [24] 2565 	cjne	r6,#0x42,00619$
      000B36 BF 00 02         [24] 2566 	cjne	r7,#0x00,00619$
      000B39 80 03            [24] 2567 	sjmp	00620$
      000B3B                       2568 00619$:
      000B3B 02r06r27         [24] 2569 	ljmp	00253$
      000B3E                       2570 00620$:
      000B3E 78r11            [12] 2571 	mov	r0,#_i1
      000B40 76 01            [12] 2572 	mov	@r0,#0x01
      000B42 02r06r27         [24] 2573 	ljmp	00253$
      000B45                       2574 00145$:
                                   2575 ;	life.c:337: if (i1) {
      000B45 78r11            [12] 2576 	mov	r0,#_i1
      000B47 E6               [12] 2577 	mov	a,@r0
      000B48 60 25            [24] 2578 	jz	00259$
                                   2579 ;	life.c:338: printstr("BREAK\r\n");
      000B4A 7Dr7B            [12] 2580 	mov	r5,#___str_13
      000B4C 7Es00            [12] 2581 	mov	r6,#(___str_13 >> 8)
      000B4E 7F 80            [12] 2582 	mov	r7,#0x80
                                   2583 ;	life.c:68: return;
      000B50                       2584 00256$:
                                   2585 ;	life.c:66: for (; *s; s++) putchar(*s);
      000B50 8D 82            [24] 2586 	mov	dpl,r5
      000B52 8E 83            [24] 2587 	mov	dph,r6
      000B54 8F F0            [24] 2588 	mov	b,r7
      000B56 12r00r00         [24] 2589 	lcall	__gptrget
      000B59 FC               [12] 2590 	mov	r4,a
      000B5A 60 10            [24] 2591 	jz	00207$
      000B5C 7B 00            [12] 2592 	mov	r3,#0x00
      000B5E 8C 82            [24] 2593 	mov	dpl,r4
      000B60 8B 83            [24] 2594 	mov	dph,r3
      000B62 12r00r00         [24] 2595 	lcall	_putchar
      000B65 0D               [12] 2596 	inc	r5
                                   2597 ;	life.c:338: printstr("BREAK\r\n");
      000B66 BD 00 E7         [24] 2598 	cjne	r5,#0x00,00256$
      000B69 0E               [12] 2599 	inc	r6
      000B6A 80 E4            [24] 2600 	sjmp	00256$
      000B6C                       2601 00207$:
                                   2602 ;	life.c:339: (void)getchar();
      000B6C 12r00r05         [24] 2603 	lcall	_getchar
      000B6F                       2604 00259$:
                                   2605 ;	life.c:292: for (i0 = 0; !i0; ) {	
      000B6F 78r10            [12] 2606 	mov	r0,#_i0
      000B71 E6               [12] 2607 	mov	a,@r0
      000B72 70 03            [24] 2608 	jnz	00624$
      000B74 02r02rBE         [24] 2609 	ljmp	00258$
      000B77                       2610 00624$:
                                   2611 ;	life.c:343: term:
      000B77                       2612 00149$:
                                   2613 ;	life.c:344: EA = 0;
                                   2614 ;	assignBit
      000B77 C2 AF            [12] 2615 	clr	_EA
                                   2616 ;	life.c:345: printstr("TERM\r\n");
      000B79 7Dr83            [12] 2617 	mov	r5,#___str_14
      000B7B 7Es00            [12] 2618 	mov	r6,#(___str_14 >> 8)
      000B7D 7F 80            [12] 2619 	mov	r7,#0x80
                                   2620 ;	life.c:68: return;
      000B7F                       2621 00261$:
                                   2622 ;	life.c:66: for (; *s; s++) putchar(*s);
      000B7F 8D 82            [24] 2623 	mov	dpl,r5
      000B81 8E 83            [24] 2624 	mov	dph,r6
      000B83 8F F0            [24] 2625 	mov	b,r7
      000B85 12r00r00         [24] 2626 	lcall	__gptrget
      000B88 FC               [12] 2627 	mov	r4,a
      000B89 60 10            [24] 2628 	jz	00209$
      000B8B 7B 00            [12] 2629 	mov	r3,#0x00
      000B8D 8C 82            [24] 2630 	mov	dpl,r4
      000B8F 8B 83            [24] 2631 	mov	dph,r3
      000B91 12r00r00         [24] 2632 	lcall	_putchar
      000B94 0D               [12] 2633 	inc	r5
                                   2634 ;	life.c:345: printstr("TERM\r\n");
      000B95 BD 00 E7         [24] 2635 	cjne	r5,#0x00,00261$
      000B98 0E               [12] 2636 	inc	r6
      000B99 80 E4            [24] 2637 	sjmp	00261$
      000B9B                       2638 00209$:
                                   2639 ;	life.c:346: (void)getchar();
      000B9B 12r00r05         [24] 2640 	lcall	_getchar
                                   2641 ;	life.c:348: PCON |= 2;
      000B9E 43 87 02         [24] 2642 	orl	_PCON,#0x02
                                   2643 ;	life.c:350: return;
                                   2644 ;	life.c:351: }
      000BA1 85*00 81         [24] 2645 	mov	sp,_bp
      000BA4 D0*00            [24] 2646 	pop	_bp
      000BA6 22               [24] 2647 	ret
                                   2648 	.area CSEG    (CODE)
                                   2649 	.area CONST   (CODE)
                                   2650 	.area CONST   (CODE)
      000000                       2651 ___str_0:
      000000 1B                    2652 	.db 0x1b
      000001 5B 3F 32 35 6C        2653 	.ascii "[?25l"
      000006 00                    2654 	.db 0x00
                                   2655 	.area CSEG    (CODE)
                                   2656 	.area CONST   (CODE)
      000007                       2657 ___str_1:
      000007 1B                    2658 	.db 0x1b
      000008 5B 32 4A 47 45 4E 20  2659 	.ascii "[2JGEN "
      00000F 00                    2660 	.db 0x00
                                   2661 	.area CSEG    (CODE)
                                   2662 	.area CONST   (CODE)
      000010                       2663 ___str_2:
      000010 0D                    2664 	.db 0x0d
      000011 0A                    2665 	.db 0x0a
      000012 00                    2666 	.db 0x00
                                   2667 	.area CSEG    (CODE)
                                   2668 	.area CONST   (CODE)
      000013                       2669 ___str_3:
      000013 1B                    2670 	.db 0x1b
      000014 5B 3F 32 35 68        2671 	.ascii "[?25h"
      000019 00                    2672 	.db 0x00
                                   2673 	.area CSEG    (CODE)
                                   2674 	.area CONST   (CODE)
      00001A                       2675 ___str_4:
      00001A 4C 4F 41 44 20 30 20  2676 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000028 00                    2677 	.db 0x00
                                   2678 	.area CSEG    (CODE)
                                   2679 	.area CONST   (CODE)
      000029                       2680 ___str_5:
      000029 3E                    2681 	.ascii ">"
      00002A 0D                    2682 	.db 0x0d
      00002B 0A                    2683 	.db 0x0a
      00002C 00                    2684 	.db 0x00
                                   2685 	.area CSEG    (CODE)
                                   2686 	.area CONST   (CODE)
      00002D                       2687 ___str_6:
      00002D 52 41 4E 44 4F 4D     2688 	.ascii "RANDOM"
      000033 00                    2689 	.db 0x00
                                   2690 	.area CSEG    (CODE)
                                   2691 	.area CONST   (CODE)
      000034                       2692 ___str_7:
      000034 1B                    2693 	.db 0x1b
      000035 5B 3F 32 35 68        2694 	.ascii "[?25h"
      00003A 1B                    2695 	.db 0x1b
      00003B 5B 6D                 2696 	.ascii "[m"
      00003D 00                    2697 	.db 0x00
                                   2698 	.area CSEG    (CODE)
                                   2699 	.area CONST   (CODE)
      00003E                       2700 ___str_8:
      00003E 4C 49 46 45 20 49 4E  2701 	.ascii "LIFE INIT T L R P"
             49 54 20 54 20 4C 20
             52 20 50
      00004F 0D                    2702 	.db 0x0d
      000050 0A                    2703 	.db 0x0a
      000051 00                    2704 	.db 0x00
                                   2705 	.area CSEG    (CODE)
                                   2706 	.area CONST   (CODE)
      000052                       2707 ___str_9:
      000052 52 45 41 44 59 20 54  2708 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000061 0D                    2709 	.db 0x0d
      000062 0A                    2710 	.db 0x0a
      000063 00                    2711 	.db 0x00
                                   2712 	.area CSEG    (CODE)
                                   2713 	.area CONST   (CODE)
      000064                       2714 ___str_10:
      000064 44 4F 4E 45 20        2715 	.ascii "DONE "
      000069 00                    2716 	.db 0x00
                                   2717 	.area CSEG    (CODE)
                                   2718 	.area CONST   (CODE)
      00006A                       2719 ___str_11:
      00006A 46 49 58 45 44        2720 	.ascii "FIXED"
      00006F 0D                    2721 	.db 0x0d
      000070 0A                    2722 	.db 0x0a
      000071 00                    2723 	.db 0x00
                                   2724 	.area CSEG    (CODE)
                                   2725 	.area CONST   (CODE)
      000072                       2726 ___str_12:
      000072 43 59 43 4C 45 32     2727 	.ascii "CYCLE2"
      000078 0D                    2728 	.db 0x0d
      000079 0A                    2729 	.db 0x0a
      00007A 00                    2730 	.db 0x00
                                   2731 	.area CSEG    (CODE)
                                   2732 	.area CONST   (CODE)
      00007B                       2733 ___str_13:
      00007B 42 52 45 41 4B        2734 	.ascii "BREAK"
      000080 0D                    2735 	.db 0x0d
      000081 0A                    2736 	.db 0x0a
      000082 00                    2737 	.db 0x00
                                   2738 	.area CSEG    (CODE)
                                   2739 	.area CONST   (CODE)
      000083                       2740 ___str_14:
      000083 54 45 52 4D           2741 	.ascii "TERM"
      000087 0D                    2742 	.db 0x0d
      000088 0A                    2743 	.db 0x0a
      000089 00                    2744 	.db 0x00
                                   2745 	.area CSEG    (CODE)
                                   2746 	.area XINIT   (CODE)
                                   2747 	.area CABS    (ABS,CODE)
