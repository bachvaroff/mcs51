                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _evolve
                                     13 	.globl _show
                                     14 	.globl _int1
                                     15 	.globl _int0
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _c
                                    141 	.globl _i1
                                    142 	.globl _i0
                                    143 	.globl _fixed
                                    144 	.globl _population
                                    145 	.globl _n
                                    146 	.globl _y1
                                    147 	.globl _x1
                                    148 	.globl _y
                                    149 	.globl _x
                                    150 	.globl _nu
                                    151 	.globl _u
                                    152 	.globl _putchar
                                    153 	.globl _getchar
                                    154 ;--------------------------------------------------------
                                    155 ; special function registers
                                    156 ;--------------------------------------------------------
                                    157 	.area RSEG    (ABS,DATA)
      000000                        158 	.org 0x0000
                           000080   159 _P0	=	0x0080
                           000081   160 _SP	=	0x0081
                           000082   161 _DPL	=	0x0082
                           000083   162 _DPH	=	0x0083
                           000087   163 _PCON	=	0x0087
                           000088   164 _TCON	=	0x0088
                           000089   165 _TMOD	=	0x0089
                           00008A   166 _TL0	=	0x008a
                           00008B   167 _TL1	=	0x008b
                           00008C   168 _TH0	=	0x008c
                           00008D   169 _TH1	=	0x008d
                           000090   170 _P1	=	0x0090
                           000098   171 _SCON	=	0x0098
                           000099   172 _SBUF	=	0x0099
                           0000A0   173 _P2	=	0x00a0
                           0000A8   174 _IE	=	0x00a8
                           0000B0   175 _P3	=	0x00b0
                           0000B8   176 _IP	=	0x00b8
                           0000C8   177 _T2CON	=	0x00c8
                           0000C9   178 _T2MOD	=	0x00c9
                           0000CA   179 _RCAP2L	=	0x00ca
                           0000CB   180 _RCAP2H	=	0x00cb
                           0000CC   181 _TL2	=	0x00cc
                           0000CD   182 _TH2	=	0x00cd
                           0000D0   183 _PSW	=	0x00d0
                           0000E0   184 _ACC	=	0x00e0
                           0000E0   185 _A	=	0x00e0
                           0000F0   186 _B	=	0x00f0
                                    187 ;--------------------------------------------------------
                                    188 ; special function bits
                                    189 ;--------------------------------------------------------
                                    190 	.area RSEG    (ABS,DATA)
      000000                        191 	.org 0x0000
                           000080   192 _P0_0	=	0x0080
                           000081   193 _P0_1	=	0x0081
                           000082   194 _P0_2	=	0x0082
                           000083   195 _P0_3	=	0x0083
                           000084   196 _P0_4	=	0x0084
                           000085   197 _P0_5	=	0x0085
                           000086   198 _P0_6	=	0x0086
                           000087   199 _P0_7	=	0x0087
                           000088   200 _IT0	=	0x0088
                           000089   201 _IE0	=	0x0089
                           00008A   202 _IT1	=	0x008a
                           00008B   203 _IE1	=	0x008b
                           00008C   204 _TR0	=	0x008c
                           00008D   205 _TF0	=	0x008d
                           00008E   206 _TR1	=	0x008e
                           00008F   207 _TF1	=	0x008f
                           000090   208 _P1_0	=	0x0090
                           000091   209 _P1_1	=	0x0091
                           000092   210 _P1_2	=	0x0092
                           000093   211 _P1_3	=	0x0093
                           000094   212 _P1_4	=	0x0094
                           000095   213 _P1_5	=	0x0095
                           000096   214 _P1_6	=	0x0096
                           000097   215 _P1_7	=	0x0097
                           000090   216 _T2	=	0x0090
                           000091   217 _T2EX	=	0x0091
                           000098   218 _RI	=	0x0098
                           000099   219 _TI	=	0x0099
                           00009A   220 _RB8	=	0x009a
                           00009B   221 _TB8	=	0x009b
                           00009C   222 _REN	=	0x009c
                           00009D   223 _SM2	=	0x009d
                           00009E   224 _SM1	=	0x009e
                           00009F   225 _SM0	=	0x009f
                           0000A0   226 _P2_0	=	0x00a0
                           0000A1   227 _P2_1	=	0x00a1
                           0000A2   228 _P2_2	=	0x00a2
                           0000A3   229 _P2_3	=	0x00a3
                           0000A4   230 _P2_4	=	0x00a4
                           0000A5   231 _P2_5	=	0x00a5
                           0000A6   232 _P2_6	=	0x00a6
                           0000A7   233 _P2_7	=	0x00a7
                           0000A8   234 _EX0	=	0x00a8
                           0000A9   235 _ET0	=	0x00a9
                           0000AA   236 _EX1	=	0x00aa
                           0000AB   237 _ET1	=	0x00ab
                           0000AC   238 _ES	=	0x00ac
                           0000AD   239 _ET2	=	0x00ad
                           0000AF   240 _EA	=	0x00af
                           0000B0   241 _P3_0	=	0x00b0
                           0000B1   242 _P3_1	=	0x00b1
                           0000B2   243 _P3_2	=	0x00b2
                           0000B3   244 _P3_3	=	0x00b3
                           0000B4   245 _P3_4	=	0x00b4
                           0000B5   246 _P3_5	=	0x00b5
                           0000B6   247 _P3_6	=	0x00b6
                           0000B7   248 _P3_7	=	0x00b7
                           0000B0   249 _RXD	=	0x00b0
                           0000B1   250 _TXD	=	0x00b1
                           0000B2   251 _INT0	=	0x00b2
                           0000B3   252 _INT1	=	0x00b3
                           0000B4   253 _T0	=	0x00b4
                           0000B5   254 _T1	=	0x00b5
                           0000B6   255 _WR	=	0x00b6
                           0000B7   256 _RD	=	0x00b7
                           0000B8   257 _PX0	=	0x00b8
                           0000B9   258 _PT0	=	0x00b9
                           0000BA   259 _PX1	=	0x00ba
                           0000BB   260 _PT1	=	0x00bb
                           0000BC   261 _PS	=	0x00bc
                           0000BD   262 _PT2	=	0x00bd
                           0000C8   263 _T2CON_0	=	0x00c8
                           0000C9   264 _T2CON_1	=	0x00c9
                           0000CA   265 _T2CON_2	=	0x00ca
                           0000CB   266 _T2CON_3	=	0x00cb
                           0000CC   267 _T2CON_4	=	0x00cc
                           0000CD   268 _T2CON_5	=	0x00cd
                           0000CE   269 _T2CON_6	=	0x00ce
                           0000CF   270 _T2CON_7	=	0x00cf
                           0000C8   271 _CP_RL2	=	0x00c8
                           0000C9   272 _C_T2	=	0x00c9
                           0000CA   273 _TR2	=	0x00ca
                           0000CB   274 _EXEN2	=	0x00cb
                           0000CC   275 _TCLK	=	0x00cc
                           0000CD   276 _RCLK	=	0x00cd
                           0000CE   277 _EXF2	=	0x00ce
                           0000CF   278 _TF2	=	0x00cf
                           0000D0   279 _P	=	0x00d0
                           0000D1   280 _FL	=	0x00d1
                           0000D2   281 _OV	=	0x00d2
                           0000D3   282 _RS0	=	0x00d3
                           0000D4   283 _RS1	=	0x00d4
                           0000D5   284 _F0	=	0x00d5
                           0000D6   285 _AC	=	0x00d6
                           0000D7   286 _CY	=	0x00d7
                                    287 ;--------------------------------------------------------
                                    288 ; overlayable register banks
                                    289 ;--------------------------------------------------------
                                    290 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        291 	.ds 8
                                    292 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        293 	.ds 8
                                    294 ;--------------------------------------------------------
                                    295 ; overlayable bit register bank
                                    296 ;--------------------------------------------------------
                                    297 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        298 bits:
      000000                        299 	.ds 1
                           008000   300 	b0 = bits[0]
                           008100   301 	b1 = bits[1]
                           008200   302 	b2 = bits[2]
                           008300   303 	b3 = bits[3]
                           008400   304 	b4 = bits[4]
                           008500   305 	b5 = bits[5]
                           008600   306 	b6 = bits[6]
                           008700   307 	b7 = bits[7]
                                    308 ;--------------------------------------------------------
                                    309 ; internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area DSEG    (DATA)
                                    312 ;--------------------------------------------------------
                                    313 ; overlayable items in internal ram 
                                    314 ;--------------------------------------------------------
                                    315 ;--------------------------------------------------------
                                    316 ; Stack segment in internal ram 
                                    317 ;--------------------------------------------------------
                                    318 	.area	SSEG
      000000                        319 __start__stack:
      000000                        320 	.ds	1
                                    321 
                                    322 ;--------------------------------------------------------
                                    323 ; indirectly addressable internal ram data
                                    324 ;--------------------------------------------------------
                                    325 	.area ISEG    (DATA)
                                    326 ;--------------------------------------------------------
                                    327 ; absolute internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area IABS    (ABS,DATA)
                                    330 	.area IABS    (ABS,DATA)
                                    331 ;--------------------------------------------------------
                                    332 ; bit data
                                    333 ;--------------------------------------------------------
                                    334 	.area BSEG    (BIT)
                                    335 ;--------------------------------------------------------
                                    336 ; paged external ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area PSEG    (PAG,XDATA)
                                    339 ;--------------------------------------------------------
                                    340 ; external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area XSEG    (XDATA)
      000000                        343 _u::
      000000                        344 	.ds 1024
      000400                        345 _nu::
      000400                        346 	.ds 1024
      000800                        347 _x::
      000800                        348 	.ds 2
      000802                        349 _y::
      000802                        350 	.ds 2
      000804                        351 _x1::
      000804                        352 	.ds 2
      000806                        353 _y1::
      000806                        354 	.ds 2
      000808                        355 _n::
      000808                        356 	.ds 2
      00080A                        357 _population::
      00080A                        358 	.ds 2
      00080C                        359 _fixed::
      00080C                        360 	.ds 2
      00080E                        361 _i0::
      00080E                        362 	.ds 2
      000810                        363 _i1::
      000810                        364 	.ds 2
      000812                        365 _c::
      000812                        366 	.ds 2
                                    367 ;--------------------------------------------------------
                                    368 ; absolute external ram data
                                    369 ;--------------------------------------------------------
                                    370 	.area XABS    (ABS,XDATA)
                                    371 ;--------------------------------------------------------
                                    372 ; external initialized ram data
                                    373 ;--------------------------------------------------------
                                    374 	.area XISEG   (XDATA)
                                    375 	.area HOME    (CODE)
                                    376 	.area GSINIT0 (CODE)
                                    377 	.area GSINIT1 (CODE)
                                    378 	.area GSINIT2 (CODE)
                                    379 	.area GSINIT3 (CODE)
                                    380 	.area GSINIT4 (CODE)
                                    381 	.area GSINIT5 (CODE)
                                    382 	.area GSINIT  (CODE)
                                    383 	.area GSFINAL (CODE)
                                    384 	.area CSEG    (CODE)
                                    385 ;--------------------------------------------------------
                                    386 ; interrupt vector 
                                    387 ;--------------------------------------------------------
                                    388 	.area HOME    (CODE)
      000000                        389 __interrupt_vect:
      000000 02r00r00         [24]  390 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0C         [24]  391 	ljmp	_int0
      000006                        392 	.ds	5
      00000B 02r00r22         [24]  393 	ljmp	_int1
                                    394 ;--------------------------------------------------------
                                    395 ; global & static initialisations
                                    396 ;--------------------------------------------------------
                                    397 	.area HOME    (CODE)
                                    398 	.area GSINIT  (CODE)
                                    399 	.area GSFINAL (CODE)
                                    400 	.area GSINIT  (CODE)
                                    401 	.globl __sdcc_gsinit_startup
                                    402 	.globl __sdcc_program_startup
                                    403 	.globl __start__stack
                                    404 	.globl __mcs51_genXINIT
                                    405 	.globl __mcs51_genXRAMCLEAR
                                    406 	.globl __mcs51_genRAMCLEAR
                                    407 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  408 	ljmp	__sdcc_program_startup
                                    409 ;--------------------------------------------------------
                                    410 ; Home
                                    411 ;--------------------------------------------------------
                                    412 	.area HOME    (CODE)
                                    413 	.area HOME    (CODE)
      00000E                        414 __sdcc_program_startup:
      00000E 02r04r16         [24]  415 	ljmp	_main
                                    416 ;	return from main will return to caller
                                    417 ;--------------------------------------------------------
                                    418 ; code
                                    419 ;--------------------------------------------------------
                                    420 	.area CSEG    (CODE)
                                    421 ;------------------------------------------------------------
                                    422 ;Allocation info for local variables in function 'putchar'
                                    423 ;------------------------------------------------------------
                                    424 ;c                         Allocated to registers 
                                    425 ;------------------------------------------------------------
                                    426 ;	life.c:7: int putchar(int c) __naked {
                                    427 ;	-----------------------------------------
                                    428 ;	 function putchar
                                    429 ;	-----------------------------------------
      000000                        430 _putchar:
                                    431 ;	naked function: no prologue.
                                    432 ;	life.c:12: __endasm;
      000000 E5 82            [12]  433 	mov	a, dpl
      000002 02 00 30         [24]  434 	ljmp	0x0030
                                    435 ;	life.c:13: }
                                    436 ;	naked function: no epilogue.
                                    437 ;------------------------------------------------------------
                                    438 ;Allocation info for local variables in function 'getchar'
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:15: int getchar(void) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function getchar
                                    443 ;	-----------------------------------------
      000005                        444 _getchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:20: __endasm;
      000005 12 00 32         [24]  447 	lcall	0x0032
      000008 C2 83            [12]  448 	clr	dph
      00000A F5 82            [12]  449 	mov	dpl, a
                                    450 ;	life.c:21: }
                                    451 ;	naked function: no epilogue.
                                    452 ;------------------------------------------------------------
                                    453 ;Allocation info for local variables in function 'int0'
                                    454 ;------------------------------------------------------------
                                    455 ;	life.c:32: void int0(void) __interrupt 0 __using 1 {
                                    456 ;	-----------------------------------------
                                    457 ;	 function int0
                                    458 ;	-----------------------------------------
      00000C                        459 _int0:
                           00000F   460 	ar7 = 0x0f
                           00000E   461 	ar6 = 0x0e
                           00000D   462 	ar5 = 0x0d
                           00000C   463 	ar4 = 0x0c
                           00000B   464 	ar3 = 0x0b
                           00000A   465 	ar2 = 0x0a
                           000009   466 	ar1 = 0x09
                           000008   467 	ar0 = 0x08
      00000C C0 E0            [24]  468 	push	acc
      00000E C0 82            [24]  469 	push	dpl
      000010 C0 83            [24]  470 	push	dph
                                    471 ;	life.c:33: i0 = 1;
      000012 90r08r0E         [24]  472 	mov	dptr,#_i0
      000015 74 01            [12]  473 	mov	a,#0x01
      000017 F0               [24]  474 	movx	@dptr,a
      000018 E4               [12]  475 	clr	a
      000019 A3               [24]  476 	inc	dptr
      00001A F0               [24]  477 	movx	@dptr,a
                                    478 ;	life.c:34: }
      00001B D0 83            [24]  479 	pop	dph
      00001D D0 82            [24]  480 	pop	dpl
      00001F D0 E0            [24]  481 	pop	acc
      000021 32               [24]  482 	reti
                                    483 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    484 ;	eliminated unneeded push/pop psw
                                    485 ;	eliminated unneeded push/pop b
                                    486 ;------------------------------------------------------------
                                    487 ;Allocation info for local variables in function 'int1'
                                    488 ;------------------------------------------------------------
                                    489 ;	life.c:36: void int1(void) __interrupt 1 __using 1 {
                                    490 ;	-----------------------------------------
                                    491 ;	 function int1
                                    492 ;	-----------------------------------------
      000022                        493 _int1:
      000022 C0 E0            [24]  494 	push	acc
      000024 C0 82            [24]  495 	push	dpl
      000026 C0 83            [24]  496 	push	dph
                                    497 ;	life.c:37: i1 = 1;
      000028 90r08r10         [24]  498 	mov	dptr,#_i1
      00002B 74 01            [12]  499 	mov	a,#0x01
      00002D F0               [24]  500 	movx	@dptr,a
      00002E E4               [12]  501 	clr	a
      00002F A3               [24]  502 	inc	dptr
      000030 F0               [24]  503 	movx	@dptr,a
                                    504 ;	life.c:38: }
      000031 D0 83            [24]  505 	pop	dph
      000033 D0 82            [24]  506 	pop	dpl
      000035 D0 E0            [24]  507 	pop	acc
      000037 32               [24]  508 	reti
                                    509 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    510 ;	eliminated unneeded push/pop psw
                                    511 ;	eliminated unneeded push/pop b
                                    512 ;------------------------------------------------------------
                                    513 ;Allocation info for local variables in function 'show'
                                    514 ;------------------------------------------------------------
                                    515 ;	life.c:40: void show(void) {
                                    516 ;	-----------------------------------------
                                    517 ;	 function show
                                    518 ;	-----------------------------------------
      000038                        519 _show:
                           000007   520 	ar7 = 0x07
                           000006   521 	ar6 = 0x06
                           000005   522 	ar5 = 0x05
                           000004   523 	ar4 = 0x04
                           000003   524 	ar3 = 0x03
                           000002   525 	ar2 = 0x02
                           000001   526 	ar1 = 0x01
                           000000   527 	ar0 = 0x00
                                    528 ;	life.c:41: printf("\033[2J\033[m%04x\r\n", population);
      000038 90r08r0A         [24]  529 	mov	dptr,#_population
      00003B E0               [24]  530 	movx	a,@dptr
      00003C C0 E0            [24]  531 	push	acc
      00003E A3               [24]  532 	inc	dptr
      00003F E0               [24]  533 	movx	a,@dptr
      000040 C0 E0            [24]  534 	push	acc
      000042 74r00            [12]  535 	mov	a,#___str_0
      000044 C0 E0            [24]  536 	push	acc
      000046 74s00            [12]  537 	mov	a,#(___str_0 >> 8)
      000048 C0 E0            [24]  538 	push	acc
      00004A 74 80            [12]  539 	mov	a,#0x80
      00004C C0 E0            [24]  540 	push	acc
      00004E 12r00r00         [24]  541 	lcall	_printf
      000051 E5 81            [12]  542 	mov	a,sp
      000053 24 FB            [12]  543 	add	a,#0xfb
      000055 F5 81            [12]  544 	mov	sp,a
                                    545 ;	life.c:42: population++;
      000057 90r08r0A         [24]  546 	mov	dptr,#_population
      00005A E0               [24]  547 	movx	a,@dptr
      00005B 24 01            [12]  548 	add	a,#0x01
      00005D F0               [24]  549 	movx	@dptr,a
      00005E A3               [24]  550 	inc	dptr
      00005F E0               [24]  551 	movx	a,@dptr
      000060 34 00            [12]  552 	addc	a,#0x00
      000062 F0               [24]  553 	movx	@dptr,a
                                    554 ;	life.c:44: for (y = 0; y < H; y++) {
      000063 90r08r02         [24]  555 	mov	dptr,#_y
      000066 E4               [12]  556 	clr	a
      000067 F0               [24]  557 	movx	@dptr,a
      000068 A3               [24]  558 	inc	dptr
      000069 F0               [24]  559 	movx	@dptr,a
      00006A                        560 00108$:
                                    561 ;	life.c:45: for (x = 0; x < W; x++)
      00006A 90r08r00         [24]  562 	mov	dptr,#_x
      00006D E4               [12]  563 	clr	a
      00006E F0               [24]  564 	movx	@dptr,a
      00006F A3               [24]  565 	inc	dptr
      000070 F0               [24]  566 	movx	@dptr,a
      000071                        567 00106$:
                                    568 ;	life.c:46: if (u[y][x]) printf("\033[01m[]\033[m");
      000071 90r08r02         [24]  569 	mov	dptr,#_y
      000074 E0               [24]  570 	movx	a,@dptr
      000075 FE               [12]  571 	mov	r6,a
      000076 A3               [24]  572 	inc	dptr
      000077 E0               [24]  573 	movx	a,@dptr
      000078 C4               [12]  574 	swap	a
      000079 23               [12]  575 	rl	a
      00007A 54 E0            [12]  576 	anl	a,#0xe0
      00007C CE               [12]  577 	xch	a,r6
      00007D C4               [12]  578 	swap	a
      00007E 23               [12]  579 	rl	a
      00007F CE               [12]  580 	xch	a,r6
      000080 6E               [12]  581 	xrl	a,r6
      000081 CE               [12]  582 	xch	a,r6
      000082 54 E0            [12]  583 	anl	a,#0xe0
      000084 CE               [12]  584 	xch	a,r6
      000085 6E               [12]  585 	xrl	a,r6
      000086 FF               [12]  586 	mov	r7,a
      000087 EE               [12]  587 	mov	a,r6
      000088 24r00            [12]  588 	add	a,#_u
      00008A FE               [12]  589 	mov	r6,a
      00008B EF               [12]  590 	mov	a,r7
      00008C 34s00            [12]  591 	addc	a,#(_u >> 8)
      00008E FF               [12]  592 	mov	r7,a
      00008F 90r08r00         [24]  593 	mov	dptr,#_x
      000092 E0               [24]  594 	movx	a,@dptr
      000093 FC               [12]  595 	mov	r4,a
      000094 A3               [24]  596 	inc	dptr
      000095 E0               [24]  597 	movx	a,@dptr
      000096 FD               [12]  598 	mov	r5,a
      000097 EC               [12]  599 	mov	a,r4
      000098 2E               [12]  600 	add	a,r6
      000099 FE               [12]  601 	mov	r6,a
      00009A ED               [12]  602 	mov	a,r5
      00009B 3F               [12]  603 	addc	a,r7
      00009C FF               [12]  604 	mov	r7,a
      00009D 8E 82            [24]  605 	mov	dpl,r6
      00009F 8F 83            [24]  606 	mov	dph,r7
      0000A1 E0               [24]  607 	movx	a,@dptr
      0000A2 60 17            [24]  608 	jz	00102$
      0000A4 74r0E            [12]  609 	mov	a,#___str_1
      0000A6 C0 E0            [24]  610 	push	acc
      0000A8 74s00            [12]  611 	mov	a,#(___str_1 >> 8)
      0000AA C0 E0            [24]  612 	push	acc
      0000AC 74 80            [12]  613 	mov	a,#0x80
      0000AE C0 E0            [24]  614 	push	acc
      0000B0 12r00r00         [24]  615 	lcall	_printf
      0000B3 15 81            [12]  616 	dec	sp
      0000B5 15 81            [12]  617 	dec	sp
      0000B7 15 81            [12]  618 	dec	sp
      0000B9 80 15            [24]  619 	sjmp	00107$
      0000BB                        620 00102$:
                                    621 ;	life.c:47: else printf("  ");
      0000BB 74r19            [12]  622 	mov	a,#___str_2
      0000BD C0 E0            [24]  623 	push	acc
      0000BF 74s00            [12]  624 	mov	a,#(___str_2 >> 8)
      0000C1 C0 E0            [24]  625 	push	acc
      0000C3 74 80            [12]  626 	mov	a,#0x80
      0000C5 C0 E0            [24]  627 	push	acc
      0000C7 12r00r00         [24]  628 	lcall	_printf
      0000CA 15 81            [12]  629 	dec	sp
      0000CC 15 81            [12]  630 	dec	sp
      0000CE 15 81            [12]  631 	dec	sp
      0000D0                        632 00107$:
                                    633 ;	life.c:45: for (x = 0; x < W; x++)
      0000D0 90r08r00         [24]  634 	mov	dptr,#_x
      0000D3 E0               [24]  635 	movx	a,@dptr
      0000D4 24 01            [12]  636 	add	a,#0x01
      0000D6 F0               [24]  637 	movx	@dptr,a
      0000D7 A3               [24]  638 	inc	dptr
      0000D8 E0               [24]  639 	movx	a,@dptr
      0000D9 34 00            [12]  640 	addc	a,#0x00
      0000DB F0               [24]  641 	movx	@dptr,a
      0000DC 90r08r00         [24]  642 	mov	dptr,#_x
      0000DF E0               [24]  643 	movx	a,@dptr
      0000E0 FE               [12]  644 	mov	r6,a
      0000E1 A3               [24]  645 	inc	dptr
      0000E2 E0               [24]  646 	movx	a,@dptr
      0000E3 FF               [12]  647 	mov	r7,a
      0000E4 C3               [12]  648 	clr	c
      0000E5 EE               [12]  649 	mov	a,r6
      0000E6 94 20            [12]  650 	subb	a,#0x20
      0000E8 EF               [12]  651 	mov	a,r7
      0000E9 64 80            [12]  652 	xrl	a,#0x80
      0000EB 94 80            [12]  653 	subb	a,#0x80
      0000ED 50 03            [24]  654 	jnc	00133$
      0000EF 02r00r71         [24]  655 	ljmp	00106$
      0000F2                        656 00133$:
                                    657 ;	life.c:48: printf("\r\n");
      0000F2 74r1C            [12]  658 	mov	a,#___str_3
      0000F4 C0 E0            [24]  659 	push	acc
      0000F6 74s00            [12]  660 	mov	a,#(___str_3 >> 8)
      0000F8 C0 E0            [24]  661 	push	acc
      0000FA 74 80            [12]  662 	mov	a,#0x80
      0000FC C0 E0            [24]  663 	push	acc
      0000FE 12r00r00         [24]  664 	lcall	_printf
      000101 15 81            [12]  665 	dec	sp
      000103 15 81            [12]  666 	dec	sp
      000105 15 81            [12]  667 	dec	sp
                                    668 ;	life.c:44: for (y = 0; y < H; y++) {
      000107 90r08r02         [24]  669 	mov	dptr,#_y
      00010A E0               [24]  670 	movx	a,@dptr
      00010B 24 01            [12]  671 	add	a,#0x01
      00010D F0               [24]  672 	movx	@dptr,a
      00010E A3               [24]  673 	inc	dptr
      00010F E0               [24]  674 	movx	a,@dptr
      000110 34 00            [12]  675 	addc	a,#0x00
      000112 F0               [24]  676 	movx	@dptr,a
      000113 90r08r02         [24]  677 	mov	dptr,#_y
      000116 E0               [24]  678 	movx	a,@dptr
      000117 FE               [12]  679 	mov	r6,a
      000118 A3               [24]  680 	inc	dptr
      000119 E0               [24]  681 	movx	a,@dptr
      00011A FF               [12]  682 	mov	r7,a
      00011B C3               [12]  683 	clr	c
      00011C EE               [12]  684 	mov	a,r6
      00011D 94 20            [12]  685 	subb	a,#0x20
      00011F EF               [12]  686 	mov	a,r7
      000120 64 80            [12]  687 	xrl	a,#0x80
      000122 94 80            [12]  688 	subb	a,#0x80
      000124 50 03            [24]  689 	jnc	00134$
      000126 02r00r6A         [24]  690 	ljmp	00108$
      000129                        691 00134$:
                                    692 ;	life.c:51: return;
                                    693 ;	life.c:52: }
      000129 22               [24]  694 	ret
                                    695 ;------------------------------------------------------------
                                    696 ;Allocation info for local variables in function 'evolve'
                                    697 ;------------------------------------------------------------
                                    698 ;	life.c:54: void evolve(void) {
                                    699 ;	-----------------------------------------
                                    700 ;	 function evolve
                                    701 ;	-----------------------------------------
      00012A                        702 _evolve:
                                    703 ;	life.c:55: fixed = 1;
      00012A 90r08r0C         [24]  704 	mov	dptr,#_fixed
      00012D 74 01            [12]  705 	mov	a,#0x01
      00012F F0               [24]  706 	movx	@dptr,a
      000130 E4               [12]  707 	clr	a
      000131 A3               [24]  708 	inc	dptr
      000132 F0               [24]  709 	movx	@dptr,a
                                    710 ;	life.c:57: for (y = 0; y < H; y++) {
      000133 90r08r02         [24]  711 	mov	dptr,#_y
      000136 F0               [24]  712 	movx	@dptr,a
      000137 A3               [24]  713 	inc	dptr
      000138 F0               [24]  714 	movx	@dptr,a
      000139                        715 00121$:
                                    716 ;	life.c:58: for (x = 0; x < W; x++) {
      000139 90r08r00         [24]  717 	mov	dptr,#_x
      00013C E4               [12]  718 	clr	a
      00013D F0               [24]  719 	movx	@dptr,a
      00013E A3               [24]  720 	inc	dptr
      00013F F0               [24]  721 	movx	@dptr,a
      000140                        722 00119$:
                                    723 ;	life.c:59: n = 0;
      000140 90r08r08         [24]  724 	mov	dptr,#_n
      000143 E4               [12]  725 	clr	a
      000144 F0               [24]  726 	movx	@dptr,a
      000145 A3               [24]  727 	inc	dptr
      000146 F0               [24]  728 	movx	@dptr,a
                                    729 ;	life.c:60: for (y1 = y - 1; y1 <= y + 1; y1++)
      000147 90r08r02         [24]  730 	mov	dptr,#_y
      00014A E0               [24]  731 	movx	a,@dptr
      00014B FE               [12]  732 	mov	r6,a
      00014C A3               [24]  733 	inc	dptr
      00014D E0               [24]  734 	movx	a,@dptr
      00014E FF               [12]  735 	mov	r7,a
      00014F 1E               [12]  736 	dec	r6
      000150 BE FF 01         [24]  737 	cjne	r6,#0xff,00203$
      000153 1F               [12]  738 	dec	r7
      000154                        739 00203$:
      000154 90r08r06         [24]  740 	mov	dptr,#_y1
      000157 EE               [12]  741 	mov	a,r6
      000158 F0               [24]  742 	movx	@dptr,a
      000159 EF               [12]  743 	mov	a,r7
      00015A A3               [24]  744 	inc	dptr
      00015B F0               [24]  745 	movx	@dptr,a
      00015C                        746 00117$:
      00015C 90r08r02         [24]  747 	mov	dptr,#_y
      00015F E0               [24]  748 	movx	a,@dptr
      000160 FE               [12]  749 	mov	r6,a
      000161 A3               [24]  750 	inc	dptr
      000162 E0               [24]  751 	movx	a,@dptr
      000163 FF               [12]  752 	mov	r7,a
      000164 74 01            [12]  753 	mov	a,#0x01
      000166 2E               [12]  754 	add	a,r6
      000167 FC               [12]  755 	mov	r4,a
      000168 E4               [12]  756 	clr	a
      000169 3F               [12]  757 	addc	a,r7
      00016A FD               [12]  758 	mov	r5,a
      00016B 90r08r06         [24]  759 	mov	dptr,#_y1
      00016E E0               [24]  760 	movx	a,@dptr
      00016F FA               [12]  761 	mov	r2,a
      000170 A3               [24]  762 	inc	dptr
      000171 E0               [24]  763 	movx	a,@dptr
      000172 FB               [12]  764 	mov	r3,a
      000173 C3               [12]  765 	clr	c
      000174 EC               [12]  766 	mov	a,r4
      000175 9A               [12]  767 	subb	a,r2
      000176 ED               [12]  768 	mov	a,r5
      000177 64 80            [12]  769 	xrl	a,#0x80
      000179 8B F0            [24]  770 	mov	b,r3
      00017B 63 F0 80         [24]  771 	xrl	b,#0x80
      00017E 95 F0            [12]  772 	subb	a,b
      000180 50 03            [24]  773 	jnc	00204$
      000182 02r02r62         [24]  774 	ljmp	00104$
      000185                        775 00204$:
                                    776 ;	life.c:61: for (x1 = x - 1; x1 <= x + 1; x1++)
      000185 90r08r00         [24]  777 	mov	dptr,#_x
      000188 E0               [24]  778 	movx	a,@dptr
      000189 FC               [12]  779 	mov	r4,a
      00018A A3               [24]  780 	inc	dptr
      00018B E0               [24]  781 	movx	a,@dptr
      00018C FD               [12]  782 	mov	r5,a
      00018D 1C               [12]  783 	dec	r4
      00018E BC FF 01         [24]  784 	cjne	r4,#0xff,00205$
      000191 1D               [12]  785 	dec	r5
      000192                        786 00205$:
      000192 90r08r04         [24]  787 	mov	dptr,#_x1
      000195 EC               [12]  788 	mov	a,r4
      000196 F0               [24]  789 	movx	@dptr,a
      000197 ED               [12]  790 	mov	a,r5
      000198 A3               [24]  791 	inc	dptr
      000199 F0               [24]  792 	movx	@dptr,a
      00019A                        793 00114$:
      00019A 90r08r00         [24]  794 	mov	dptr,#_x
      00019D E0               [24]  795 	movx	a,@dptr
      00019E FC               [12]  796 	mov	r4,a
      00019F A3               [24]  797 	inc	dptr
      0001A0 E0               [24]  798 	movx	a,@dptr
      0001A1 FD               [12]  799 	mov	r5,a
      0001A2 0C               [12]  800 	inc	r4
      0001A3 BC 00 01         [24]  801 	cjne	r4,#0x00,00206$
      0001A6 0D               [12]  802 	inc	r5
      0001A7                        803 00206$:
      0001A7 90r08r04         [24]  804 	mov	dptr,#_x1
      0001AA E0               [24]  805 	movx	a,@dptr
      0001AB FA               [12]  806 	mov	r2,a
      0001AC A3               [24]  807 	inc	dptr
      0001AD E0               [24]  808 	movx	a,@dptr
      0001AE FB               [12]  809 	mov	r3,a
      0001AF C3               [12]  810 	clr	c
      0001B0 EC               [12]  811 	mov	a,r4
      0001B1 9A               [12]  812 	subb	a,r2
      0001B2 ED               [12]  813 	mov	a,r5
      0001B3 64 80            [12]  814 	xrl	a,#0x80
      0001B5 8B F0            [24]  815 	mov	b,r3
      0001B7 63 F0 80         [24]  816 	xrl	b,#0x80
      0001BA 95 F0            [12]  817 	subb	a,b
      0001BC 50 03            [24]  818 	jnc	00207$
      0001BE 02r02r53         [24]  819 	ljmp	00118$
      0001C1                        820 00207$:
                                    821 ;	life.c:62: if (u[(y1 + H) % H][(x1 + W) % W])
      0001C1 90r08r06         [24]  822 	mov	dptr,#_y1
      0001C4 E0               [24]  823 	movx	a,@dptr
      0001C5 FC               [12]  824 	mov	r4,a
      0001C6 A3               [24]  825 	inc	dptr
      0001C7 E0               [24]  826 	movx	a,@dptr
      0001C8 FD               [12]  827 	mov	r5,a
      0001C9 74 20            [12]  828 	mov	a,#0x20
      0001CB 2C               [12]  829 	add	a,r4
      0001CC FC               [12]  830 	mov	r4,a
      0001CD E4               [12]  831 	clr	a
      0001CE 3D               [12]  832 	addc	a,r5
      0001CF FD               [12]  833 	mov	r5,a
      0001D0 C0 03            [24]  834 	push	ar3
      0001D2 C0 02            [24]  835 	push	ar2
      0001D4 74 20            [12]  836 	mov	a,#0x20
      0001D6 C0 E0            [24]  837 	push	acc
      0001D8 E4               [12]  838 	clr	a
      0001D9 C0 E0            [24]  839 	push	acc
      0001DB 8C 82            [24]  840 	mov	dpl,r4
      0001DD 8D 83            [24]  841 	mov	dph,r5
      0001DF 12r00r00         [24]  842 	lcall	__modsint
      0001E2 AC 82            [24]  843 	mov	r4,dpl
      0001E4 AD 83            [24]  844 	mov	r5,dph
      0001E6 15 81            [12]  845 	dec	sp
      0001E8 15 81            [12]  846 	dec	sp
      0001EA D0 02            [24]  847 	pop	ar2
      0001EC D0 03            [24]  848 	pop	ar3
      0001EE ED               [12]  849 	mov	a,r5
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CC               [12]  853 	xch	a,r4
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CC               [12]  856 	xch	a,r4
      0001F7 6C               [12]  857 	xrl	a,r4
      0001F8 CC               [12]  858 	xch	a,r4
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CC               [12]  860 	xch	a,r4
      0001FC 6C               [12]  861 	xrl	a,r4
      0001FD FD               [12]  862 	mov	r5,a
      0001FE EC               [12]  863 	mov	a,r4
      0001FF 24r00            [12]  864 	add	a,#_u
      000201 FC               [12]  865 	mov	r4,a
      000202 ED               [12]  866 	mov	a,r5
      000203 34s00            [12]  867 	addc	a,#(_u >> 8)
      000205 FD               [12]  868 	mov	r5,a
      000206 74 20            [12]  869 	mov	a,#0x20
      000208 2A               [12]  870 	add	a,r2
      000209 FA               [12]  871 	mov	r2,a
      00020A E4               [12]  872 	clr	a
      00020B 3B               [12]  873 	addc	a,r3
      00020C FB               [12]  874 	mov	r3,a
      00020D C0 05            [24]  875 	push	ar5
      00020F C0 04            [24]  876 	push	ar4
      000211 74 20            [12]  877 	mov	a,#0x20
      000213 C0 E0            [24]  878 	push	acc
      000215 E4               [12]  879 	clr	a
      000216 C0 E0            [24]  880 	push	acc
      000218 8A 82            [24]  881 	mov	dpl,r2
      00021A 8B 83            [24]  882 	mov	dph,r3
      00021C 12r00r00         [24]  883 	lcall	__modsint
      00021F AA 82            [24]  884 	mov	r2,dpl
      000221 AB 83            [24]  885 	mov	r3,dph
      000223 15 81            [12]  886 	dec	sp
      000225 15 81            [12]  887 	dec	sp
      000227 D0 04            [24]  888 	pop	ar4
      000229 D0 05            [24]  889 	pop	ar5
      00022B EA               [12]  890 	mov	a,r2
      00022C 2C               [12]  891 	add	a,r4
      00022D FC               [12]  892 	mov	r4,a
      00022E EB               [12]  893 	mov	a,r3
      00022F 3D               [12]  894 	addc	a,r5
      000230 FD               [12]  895 	mov	r5,a
      000231 8C 82            [24]  896 	mov	dpl,r4
      000233 8D 83            [24]  897 	mov	dph,r5
      000235 E0               [24]  898 	movx	a,@dptr
      000236 60 0C            [24]  899 	jz	00115$
                                    900 ;	life.c:63: n++;
      000238 90r08r08         [24]  901 	mov	dptr,#_n
      00023B E0               [24]  902 	movx	a,@dptr
      00023C 24 01            [12]  903 	add	a,#0x01
      00023E F0               [24]  904 	movx	@dptr,a
      00023F A3               [24]  905 	inc	dptr
      000240 E0               [24]  906 	movx	a,@dptr
      000241 34 00            [12]  907 	addc	a,#0x00
      000243 F0               [24]  908 	movx	@dptr,a
      000244                        909 00115$:
                                    910 ;	life.c:61: for (x1 = x - 1; x1 <= x + 1; x1++)
      000244 90r08r04         [24]  911 	mov	dptr,#_x1
      000247 E0               [24]  912 	movx	a,@dptr
      000248 24 01            [12]  913 	add	a,#0x01
      00024A F0               [24]  914 	movx	@dptr,a
      00024B A3               [24]  915 	inc	dptr
      00024C E0               [24]  916 	movx	a,@dptr
      00024D 34 00            [12]  917 	addc	a,#0x00
      00024F F0               [24]  918 	movx	@dptr,a
      000250 02r01r9A         [24]  919 	ljmp	00114$
      000253                        920 00118$:
                                    921 ;	life.c:60: for (y1 = y - 1; y1 <= y + 1; y1++)
      000253 90r08r06         [24]  922 	mov	dptr,#_y1
      000256 E0               [24]  923 	movx	a,@dptr
      000257 24 01            [12]  924 	add	a,#0x01
      000259 F0               [24]  925 	movx	@dptr,a
      00025A A3               [24]  926 	inc	dptr
      00025B E0               [24]  927 	movx	a,@dptr
      00025C 34 00            [12]  928 	addc	a,#0x00
      00025E F0               [24]  929 	movx	@dptr,a
      00025F 02r01r5C         [24]  930 	ljmp	00117$
      000262                        931 00104$:
                                    932 ;	life.c:65: if (u[y][x]) n--;
      000262 EF               [12]  933 	mov	a,r7
      000263 C4               [12]  934 	swap	a
      000264 23               [12]  935 	rl	a
      000265 54 E0            [12]  936 	anl	a,#0xe0
      000267 CE               [12]  937 	xch	a,r6
      000268 C4               [12]  938 	swap	a
      000269 23               [12]  939 	rl	a
      00026A CE               [12]  940 	xch	a,r6
      00026B 6E               [12]  941 	xrl	a,r6
      00026C CE               [12]  942 	xch	a,r6
      00026D 54 E0            [12]  943 	anl	a,#0xe0
      00026F CE               [12]  944 	xch	a,r6
      000270 6E               [12]  945 	xrl	a,r6
      000271 FF               [12]  946 	mov	r7,a
      000272 EE               [12]  947 	mov	a,r6
      000273 24r00            [12]  948 	add	a,#_u
      000275 FE               [12]  949 	mov	r6,a
      000276 EF               [12]  950 	mov	a,r7
      000277 34s00            [12]  951 	addc	a,#(_u >> 8)
      000279 FF               [12]  952 	mov	r7,a
      00027A 90r08r00         [24]  953 	mov	dptr,#_x
      00027D E0               [24]  954 	movx	a,@dptr
      00027E FC               [12]  955 	mov	r4,a
      00027F A3               [24]  956 	inc	dptr
      000280 E0               [24]  957 	movx	a,@dptr
      000281 FD               [12]  958 	mov	r5,a
      000282 EC               [12]  959 	mov	a,r4
      000283 2E               [12]  960 	add	a,r6
      000284 FE               [12]  961 	mov	r6,a
      000285 ED               [12]  962 	mov	a,r5
      000286 3F               [12]  963 	addc	a,r7
      000287 FF               [12]  964 	mov	r7,a
      000288 8E 82            [24]  965 	mov	dpl,r6
      00028A 8F 83            [24]  966 	mov	dph,r7
      00028C E0               [24]  967 	movx	a,@dptr
      00028D 60 14            [24]  968 	jz	00106$
      00028F 90r08r08         [24]  969 	mov	dptr,#_n
      000292 E0               [24]  970 	movx	a,@dptr
      000293 24 FF            [12]  971 	add	a,#0xff
      000295 FE               [12]  972 	mov	r6,a
      000296 A3               [24]  973 	inc	dptr
      000297 E0               [24]  974 	movx	a,@dptr
      000298 34 FF            [12]  975 	addc	a,#0xff
      00029A FF               [12]  976 	mov	r7,a
      00029B 90r08r08         [24]  977 	mov	dptr,#_n
      00029E EE               [12]  978 	mov	a,r6
      00029F F0               [24]  979 	movx	@dptr,a
      0002A0 EF               [12]  980 	mov	a,r7
      0002A1 A3               [24]  981 	inc	dptr
      0002A2 F0               [24]  982 	movx	@dptr,a
      0002A3                        983 00106$:
                                    984 ;	life.c:66: nu[y][x] = (n == 3 || (n == 2 && u[y][x]));
      0002A3 90r08r02         [24]  985 	mov	dptr,#_y
      0002A6 E0               [24]  986 	movx	a,@dptr
      0002A7 FE               [12]  987 	mov	r6,a
      0002A8 A3               [24]  988 	inc	dptr
      0002A9 E0               [24]  989 	movx	a,@dptr
      0002AA C4               [12]  990 	swap	a
      0002AB 23               [12]  991 	rl	a
      0002AC 54 E0            [12]  992 	anl	a,#0xe0
      0002AE CE               [12]  993 	xch	a,r6
      0002AF C4               [12]  994 	swap	a
      0002B0 23               [12]  995 	rl	a
      0002B1 CE               [12]  996 	xch	a,r6
      0002B2 6E               [12]  997 	xrl	a,r6
      0002B3 CE               [12]  998 	xch	a,r6
      0002B4 54 E0            [12]  999 	anl	a,#0xe0
      0002B6 CE               [12] 1000 	xch	a,r6
      0002B7 6E               [12] 1001 	xrl	a,r6
      0002B8 FF               [12] 1002 	mov	r7,a
      0002B9 EE               [12] 1003 	mov	a,r6
      0002BA 24r00            [12] 1004 	add	a,#_nu
      0002BC FC               [12] 1005 	mov	r4,a
      0002BD EF               [12] 1006 	mov	a,r7
      0002BE 34s04            [12] 1007 	addc	a,#(_nu >> 8)
      0002C0 FD               [12] 1008 	mov	r5,a
      0002C1 90r08r00         [24] 1009 	mov	dptr,#_x
      0002C4 E0               [24] 1010 	movx	a,@dptr
      0002C5 FA               [12] 1011 	mov	r2,a
      0002C6 A3               [24] 1012 	inc	dptr
      0002C7 E0               [24] 1013 	movx	a,@dptr
      0002C8 FB               [12] 1014 	mov	r3,a
      0002C9 EA               [12] 1015 	mov	a,r2
      0002CA 2C               [12] 1016 	add	a,r4
      0002CB FC               [12] 1017 	mov	r4,a
      0002CC EB               [12] 1018 	mov	a,r3
      0002CD 3D               [12] 1019 	addc	a,r5
      0002CE FD               [12] 1020 	mov	r5,a
      0002CF 90r08r08         [24] 1021 	mov	dptr,#_n
      0002D2 E0               [24] 1022 	movx	a,@dptr
      0002D3 F8               [12] 1023 	mov	r0,a
      0002D4 A3               [24] 1024 	inc	dptr
      0002D5 E0               [24] 1025 	movx	a,@dptr
      0002D6 F9               [12] 1026 	mov	r1,a
      0002D7 B8 03 05         [24] 1027 	cjne	r0,#0x03,00210$
      0002DA B9 00 02         [24] 1028 	cjne	r1,#0x00,00210$
      0002DD 80 1F            [24] 1029 	sjmp	00130$
      0002DF                       1030 00210$:
      0002DF B8 02 18         [24] 1031 	cjne	r0,#0x02,00129$
      0002E2 B9 00 15         [24] 1032 	cjne	r1,#0x00,00129$
      0002E5 EE               [12] 1033 	mov	a,r6
      0002E6 24r00            [12] 1034 	add	a,#_u
      0002E8 FE               [12] 1035 	mov	r6,a
      0002E9 EF               [12] 1036 	mov	a,r7
      0002EA 34s00            [12] 1037 	addc	a,#(_u >> 8)
      0002EC FF               [12] 1038 	mov	r7,a
      0002ED EA               [12] 1039 	mov	a,r2
      0002EE 2E               [12] 1040 	add	a,r6
      0002EF FA               [12] 1041 	mov	r2,a
      0002F0 EB               [12] 1042 	mov	a,r3
      0002F1 3F               [12] 1043 	addc	a,r7
      0002F2 FB               [12] 1044 	mov	r3,a
      0002F3 8A 82            [24] 1045 	mov	dpl,r2
      0002F5 8B 83            [24] 1046 	mov	dph,r3
      0002F7 E0               [24] 1047 	movx	a,@dptr
      0002F8 70 04            [24] 1048 	jnz	00130$
      0002FA                       1049 00129$:
                                   1050 ;	assignBit
      0002FA C2*00            [12] 1051 	clr	b0
      0002FC 80 02            [24] 1052 	sjmp	00131$
      0002FE                       1053 00130$:
                                   1054 ;	assignBit
      0002FE D2*00            [12] 1055 	setb	b0
      000300                       1056 00131$:
      000300 A2*00            [12] 1057 	mov	c,b0
      000302 E4               [12] 1058 	clr	a
      000303 33               [12] 1059 	rlc	a
      000304 8C 82            [24] 1060 	mov	dpl,r4
      000306 8D 83            [24] 1061 	mov	dph,r5
      000308 F0               [24] 1062 	movx	@dptr,a
                                   1063 ;	life.c:58: for (x = 0; x < W; x++) {
      000309 90r08r00         [24] 1064 	mov	dptr,#_x
      00030C E0               [24] 1065 	movx	a,@dptr
      00030D 24 01            [12] 1066 	add	a,#0x01
      00030F F0               [24] 1067 	movx	@dptr,a
      000310 A3               [24] 1068 	inc	dptr
      000311 E0               [24] 1069 	movx	a,@dptr
      000312 34 00            [12] 1070 	addc	a,#0x00
      000314 F0               [24] 1071 	movx	@dptr,a
      000315 90r08r00         [24] 1072 	mov	dptr,#_x
      000318 E0               [24] 1073 	movx	a,@dptr
      000319 FE               [12] 1074 	mov	r6,a
      00031A A3               [24] 1075 	inc	dptr
      00031B E0               [24] 1076 	movx	a,@dptr
      00031C FF               [12] 1077 	mov	r7,a
      00031D C3               [12] 1078 	clr	c
      00031E EE               [12] 1079 	mov	a,r6
      00031F 94 20            [12] 1080 	subb	a,#0x20
      000321 EF               [12] 1081 	mov	a,r7
      000322 64 80            [12] 1082 	xrl	a,#0x80
      000324 94 80            [12] 1083 	subb	a,#0x80
      000326 50 03            [24] 1084 	jnc	00214$
      000328 02r01r40         [24] 1085 	ljmp	00119$
      00032B                       1086 00214$:
                                   1087 ;	life.c:57: for (y = 0; y < H; y++) {
      00032B 90r08r02         [24] 1088 	mov	dptr,#_y
      00032E E0               [24] 1089 	movx	a,@dptr
      00032F 24 01            [12] 1090 	add	a,#0x01
      000331 F0               [24] 1091 	movx	@dptr,a
      000332 A3               [24] 1092 	inc	dptr
      000333 E0               [24] 1093 	movx	a,@dptr
      000334 34 00            [12] 1094 	addc	a,#0x00
      000336 F0               [24] 1095 	movx	@dptr,a
      000337 90r08r02         [24] 1096 	mov	dptr,#_y
      00033A E0               [24] 1097 	movx	a,@dptr
      00033B FE               [12] 1098 	mov	r6,a
      00033C A3               [24] 1099 	inc	dptr
      00033D E0               [24] 1100 	movx	a,@dptr
      00033E FF               [12] 1101 	mov	r7,a
      00033F C3               [12] 1102 	clr	c
      000340 EE               [12] 1103 	mov	a,r6
      000341 94 20            [12] 1104 	subb	a,#0x20
      000343 EF               [12] 1105 	mov	a,r7
      000344 64 80            [12] 1106 	xrl	a,#0x80
      000346 94 80            [12] 1107 	subb	a,#0x80
      000348 50 03            [24] 1108 	jnc	00215$
      00034A 02r01r39         [24] 1109 	ljmp	00121$
      00034D                       1110 00215$:
                                   1111 ;	life.c:70: for (y = 0; y < H; y++)
      00034D 90r08r02         [24] 1112 	mov	dptr,#_y
      000350 E4               [12] 1113 	clr	a
      000351 F0               [24] 1114 	movx	@dptr,a
      000352 A3               [24] 1115 	inc	dptr
      000353 F0               [24] 1116 	movx	@dptr,a
      000354                       1117 00125$:
                                   1118 ;	life.c:71: for (x = 0; x < W; x++)
      000354 90r08r00         [24] 1119 	mov	dptr,#_x
      000357 E4               [12] 1120 	clr	a
      000358 F0               [24] 1121 	movx	@dptr,a
      000359 A3               [24] 1122 	inc	dptr
      00035A F0               [24] 1123 	movx	@dptr,a
      00035B                       1124 00123$:
                                   1125 ;	life.c:72: if (u[y][x] != nu[y][x]) {
      00035B 90r08r02         [24] 1126 	mov	dptr,#_y
      00035E E0               [24] 1127 	movx	a,@dptr
      00035F FE               [12] 1128 	mov	r6,a
      000360 A3               [24] 1129 	inc	dptr
      000361 E0               [24] 1130 	movx	a,@dptr
      000362 C4               [12] 1131 	swap	a
      000363 23               [12] 1132 	rl	a
      000364 54 E0            [12] 1133 	anl	a,#0xe0
      000366 CE               [12] 1134 	xch	a,r6
      000367 C4               [12] 1135 	swap	a
      000368 23               [12] 1136 	rl	a
      000369 CE               [12] 1137 	xch	a,r6
      00036A 6E               [12] 1138 	xrl	a,r6
      00036B CE               [12] 1139 	xch	a,r6
      00036C 54 E0            [12] 1140 	anl	a,#0xe0
      00036E CE               [12] 1141 	xch	a,r6
      00036F 6E               [12] 1142 	xrl	a,r6
      000370 FF               [12] 1143 	mov	r7,a
      000371 EE               [12] 1144 	mov	a,r6
      000372 24r00            [12] 1145 	add	a,#_u
      000374 FC               [12] 1146 	mov	r4,a
      000375 EF               [12] 1147 	mov	a,r7
      000376 34s00            [12] 1148 	addc	a,#(_u >> 8)
      000378 FD               [12] 1149 	mov	r5,a
      000379 90r08r00         [24] 1150 	mov	dptr,#_x
      00037C E0               [24] 1151 	movx	a,@dptr
      00037D FA               [12] 1152 	mov	r2,a
      00037E A3               [24] 1153 	inc	dptr
      00037F E0               [24] 1154 	movx	a,@dptr
      000380 FB               [12] 1155 	mov	r3,a
      000381 EA               [12] 1156 	mov	a,r2
      000382 2C               [12] 1157 	add	a,r4
      000383 F5 82            [12] 1158 	mov	dpl,a
      000385 EB               [12] 1159 	mov	a,r3
      000386 3D               [12] 1160 	addc	a,r5
      000387 F5 83            [12] 1161 	mov	dph,a
      000389 EE               [12] 1162 	mov	a,r6
      00038A 24r00            [12] 1163 	add	a,#_nu
      00038C FC               [12] 1164 	mov	r4,a
      00038D EF               [12] 1165 	mov	a,r7
      00038E 34s04            [12] 1166 	addc	a,#(_nu >> 8)
      000390 FD               [12] 1167 	mov	r5,a
      000391 EA               [12] 1168 	mov	a,r2
      000392 2C               [12] 1169 	add	a,r4
      000393 FC               [12] 1170 	mov	r4,a
      000394 EB               [12] 1171 	mov	a,r3
      000395 3D               [12] 1172 	addc	a,r5
      000396 FD               [12] 1173 	mov	r5,a
      000397 E0               [24] 1174 	movx	a,@dptr
      000398 F9               [12] 1175 	mov	r1,a
      000399 8C 82            [24] 1176 	mov	dpl,r4
      00039B 8D 83            [24] 1177 	mov	dph,r5
      00039D E0               [24] 1178 	movx	a,@dptr
      00039E FC               [12] 1179 	mov	r4,a
      00039F E9               [12] 1180 	mov	a,r1
      0003A0 B5 04 02         [24] 1181 	cjne	a,ar4,00216$
      0003A3 80 2C            [24] 1182 	sjmp	00124$
      0003A5                       1183 00216$:
                                   1184 ;	life.c:73: u[y][x] = nu[y][x];
      0003A5 EE               [12] 1185 	mov	a,r6
      0003A6 24r00            [12] 1186 	add	a,#_u
      0003A8 FC               [12] 1187 	mov	r4,a
      0003A9 EF               [12] 1188 	mov	a,r7
      0003AA 34s00            [12] 1189 	addc	a,#(_u >> 8)
      0003AC FD               [12] 1190 	mov	r5,a
      0003AD EA               [12] 1191 	mov	a,r2
      0003AE 2C               [12] 1192 	add	a,r4
      0003AF FC               [12] 1193 	mov	r4,a
      0003B0 EB               [12] 1194 	mov	a,r3
      0003B1 3D               [12] 1195 	addc	a,r5
      0003B2 FD               [12] 1196 	mov	r5,a
      0003B3 EE               [12] 1197 	mov	a,r6
      0003B4 24r00            [12] 1198 	add	a,#_nu
      0003B6 FE               [12] 1199 	mov	r6,a
      0003B7 EF               [12] 1200 	mov	a,r7
      0003B8 34s04            [12] 1201 	addc	a,#(_nu >> 8)
      0003BA FF               [12] 1202 	mov	r7,a
      0003BB EA               [12] 1203 	mov	a,r2
      0003BC 2E               [12] 1204 	add	a,r6
      0003BD F5 82            [12] 1205 	mov	dpl,a
      0003BF EB               [12] 1206 	mov	a,r3
      0003C0 3F               [12] 1207 	addc	a,r7
      0003C1 F5 83            [12] 1208 	mov	dph,a
      0003C3 E0               [24] 1209 	movx	a,@dptr
      0003C4 FF               [12] 1210 	mov	r7,a
      0003C5 8C 82            [24] 1211 	mov	dpl,r4
      0003C7 8D 83            [24] 1212 	mov	dph,r5
      0003C9 F0               [24] 1213 	movx	@dptr,a
                                   1214 ;	life.c:74: fixed = 0;
      0003CA 90r08r0C         [24] 1215 	mov	dptr,#_fixed
      0003CD E4               [12] 1216 	clr	a
      0003CE F0               [24] 1217 	movx	@dptr,a
      0003CF A3               [24] 1218 	inc	dptr
      0003D0 F0               [24] 1219 	movx	@dptr,a
      0003D1                       1220 00124$:
                                   1221 ;	life.c:71: for (x = 0; x < W; x++)
      0003D1 90r08r00         [24] 1222 	mov	dptr,#_x
      0003D4 E0               [24] 1223 	movx	a,@dptr
      0003D5 24 01            [12] 1224 	add	a,#0x01
      0003D7 F0               [24] 1225 	movx	@dptr,a
      0003D8 A3               [24] 1226 	inc	dptr
      0003D9 E0               [24] 1227 	movx	a,@dptr
      0003DA 34 00            [12] 1228 	addc	a,#0x00
      0003DC F0               [24] 1229 	movx	@dptr,a
      0003DD 90r08r00         [24] 1230 	mov	dptr,#_x
      0003E0 E0               [24] 1231 	movx	a,@dptr
      0003E1 FE               [12] 1232 	mov	r6,a
      0003E2 A3               [24] 1233 	inc	dptr
      0003E3 E0               [24] 1234 	movx	a,@dptr
      0003E4 FF               [12] 1235 	mov	r7,a
      0003E5 C3               [12] 1236 	clr	c
      0003E6 EE               [12] 1237 	mov	a,r6
      0003E7 94 20            [12] 1238 	subb	a,#0x20
      0003E9 EF               [12] 1239 	mov	a,r7
      0003EA 64 80            [12] 1240 	xrl	a,#0x80
      0003EC 94 80            [12] 1241 	subb	a,#0x80
      0003EE 50 03            [24] 1242 	jnc	00217$
      0003F0 02r03r5B         [24] 1243 	ljmp	00123$
      0003F3                       1244 00217$:
                                   1245 ;	life.c:70: for (y = 0; y < H; y++)
      0003F3 90r08r02         [24] 1246 	mov	dptr,#_y
      0003F6 E0               [24] 1247 	movx	a,@dptr
      0003F7 24 01            [12] 1248 	add	a,#0x01
      0003F9 F0               [24] 1249 	movx	@dptr,a
      0003FA A3               [24] 1250 	inc	dptr
      0003FB E0               [24] 1251 	movx	a,@dptr
      0003FC 34 00            [12] 1252 	addc	a,#0x00
      0003FE F0               [24] 1253 	movx	@dptr,a
      0003FF 90r08r02         [24] 1254 	mov	dptr,#_y
      000402 E0               [24] 1255 	movx	a,@dptr
      000403 FE               [12] 1256 	mov	r6,a
      000404 A3               [24] 1257 	inc	dptr
      000405 E0               [24] 1258 	movx	a,@dptr
      000406 FF               [12] 1259 	mov	r7,a
      000407 C3               [12] 1260 	clr	c
      000408 EE               [12] 1261 	mov	a,r6
      000409 94 20            [12] 1262 	subb	a,#0x20
      00040B EF               [12] 1263 	mov	a,r7
      00040C 64 80            [12] 1264 	xrl	a,#0x80
      00040E 94 80            [12] 1265 	subb	a,#0x80
      000410 50 03            [24] 1266 	jnc	00218$
      000412 02r03r54         [24] 1267 	ljmp	00125$
      000415                       1268 00218$:
                                   1269 ;	life.c:77: return;
                                   1270 ;	life.c:78: }
      000415 22               [24] 1271 	ret
                                   1272 ;------------------------------------------------------------
                                   1273 ;Allocation info for local variables in function 'main'
                                   1274 ;------------------------------------------------------------
                                   1275 ;	life.c:80: void main(void) {
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function main
                                   1278 ;	-----------------------------------------
      000416                       1279 _main:
                                   1280 ;	life.c:81: i0 = i1 = 0;
      000416 90r08r10         [24] 1281 	mov	dptr,#_i1
      000419 E4               [12] 1282 	clr	a
      00041A F0               [24] 1283 	movx	@dptr,a
      00041B A3               [24] 1284 	inc	dptr
      00041C F0               [24] 1285 	movx	@dptr,a
      00041D 90r08r0E         [24] 1286 	mov	dptr,#_i0
      000420 F0               [24] 1287 	movx	@dptr,a
      000421 A3               [24] 1288 	inc	dptr
      000422 F0               [24] 1289 	movx	@dptr,a
                                   1290 ;	life.c:83: IT0 = 1;
                                   1291 ;	assignBit
      000423 D2 88            [12] 1292 	setb	_IT0
                                   1293 ;	life.c:84: EX0 = 1;
                                   1294 ;	assignBit
      000425 D2 A8            [12] 1295 	setb	_EX0
                                   1296 ;	life.c:86: IT1 = 1;
                                   1297 ;	assignBit
      000427 D2 8A            [12] 1298 	setb	_IT1
                                   1299 ;	life.c:87: EX1 = 1;
                                   1300 ;	assignBit
      000429 D2 AA            [12] 1301 	setb	_EX1
                                   1302 ;	life.c:89: EA = 1;
                                   1303 ;	assignBit
      00042B D2 AF            [12] 1304 	setb	_EA
                                   1305 ;	life.c:91: while (!i0) {
      00042D                       1306 00108$:
      00042D 90r08r0E         [24] 1307 	mov	dptr,#_i0
      000430 E0               [24] 1308 	movx	a,@dptr
      000431 F5 F0            [12] 1309 	mov	b,a
      000433 A3               [24] 1310 	inc	dptr
      000434 E0               [24] 1311 	movx	a,@dptr
      000435 45 F0            [12] 1312 	orl	a,b
      000437 60 03            [24] 1313 	jz	00153$
      000439 02r05r3D         [24] 1314 	ljmp	00110$
      00043C                       1315 00153$:
                                   1316 ;	life.c:92: printf("\033[2J\033[mINIT\n\r");
      00043C 74r1F            [12] 1317 	mov	a,#___str_4
      00043E C0 E0            [24] 1318 	push	acc
      000440 74s00            [12] 1319 	mov	a,#(___str_4 >> 8)
      000442 C0 E0            [24] 1320 	push	acc
      000444 74 80            [12] 1321 	mov	a,#0x80
      000446 C0 E0            [24] 1322 	push	acc
      000448 12r00r00         [24] 1323 	lcall	_printf
      00044B 15 81            [12] 1324 	dec	sp
      00044D 15 81            [12] 1325 	dec	sp
      00044F 15 81            [12] 1326 	dec	sp
                                   1327 ;	life.c:93: for (y = 0; y < H; y++)
      000451 90r08r02         [24] 1328 	mov	dptr,#_y
      000454 E4               [12] 1329 	clr	a
      000455 F0               [24] 1330 	movx	@dptr,a
      000456 A3               [24] 1331 	inc	dptr
      000457 F0               [24] 1332 	movx	@dptr,a
      000458                       1333 00113$:
                                   1334 ;	life.c:94: for (x = 0; x < W; x++) {
      000458 90r08r00         [24] 1335 	mov	dptr,#_x
      00045B E4               [12] 1336 	clr	a
      00045C F0               [24] 1337 	movx	@dptr,a
      00045D A3               [24] 1338 	inc	dptr
      00045E F0               [24] 1339 	movx	@dptr,a
      00045F                       1340 00111$:
                                   1341 ;	life.c:95: c = getchar();
      00045F 12r00r05         [24] 1342 	lcall	_getchar
      000462 AE 82            [24] 1343 	mov	r6,dpl
      000464 AF 83            [24] 1344 	mov	r7,dph
      000466 90r08r12         [24] 1345 	mov	dptr,#_c
      000469 EE               [12] 1346 	mov	a,r6
      00046A F0               [24] 1347 	movx	@dptr,a
      00046B EF               [12] 1348 	mov	a,r7
      00046C A3               [24] 1349 	inc	dptr
      00046D F0               [24] 1350 	movx	@dptr,a
                                   1351 ;	life.c:96: u[y][x] = c & 1;
      00046E 90r08r02         [24] 1352 	mov	dptr,#_y
      000471 E0               [24] 1353 	movx	a,@dptr
      000472 FC               [12] 1354 	mov	r4,a
      000473 A3               [24] 1355 	inc	dptr
      000474 E0               [24] 1356 	movx	a,@dptr
      000475 C4               [12] 1357 	swap	a
      000476 23               [12] 1358 	rl	a
      000477 54 E0            [12] 1359 	anl	a,#0xe0
      000479 CC               [12] 1360 	xch	a,r4
      00047A C4               [12] 1361 	swap	a
      00047B 23               [12] 1362 	rl	a
      00047C CC               [12] 1363 	xch	a,r4
      00047D 6C               [12] 1364 	xrl	a,r4
      00047E CC               [12] 1365 	xch	a,r4
      00047F 54 E0            [12] 1366 	anl	a,#0xe0
      000481 CC               [12] 1367 	xch	a,r4
      000482 6C               [12] 1368 	xrl	a,r4
      000483 FD               [12] 1369 	mov	r5,a
      000484 EC               [12] 1370 	mov	a,r4
      000485 24r00            [12] 1371 	add	a,#_u
      000487 FC               [12] 1372 	mov	r4,a
      000488 ED               [12] 1373 	mov	a,r5
      000489 34s00            [12] 1374 	addc	a,#(_u >> 8)
      00048B FD               [12] 1375 	mov	r5,a
      00048C 90r08r00         [24] 1376 	mov	dptr,#_x
      00048F E0               [24] 1377 	movx	a,@dptr
      000490 FA               [12] 1378 	mov	r2,a
      000491 A3               [24] 1379 	inc	dptr
      000492 E0               [24] 1380 	movx	a,@dptr
      000493 FB               [12] 1381 	mov	r3,a
      000494 EA               [12] 1382 	mov	a,r2
      000495 2C               [12] 1383 	add	a,r4
      000496 F5 82            [12] 1384 	mov	dpl,a
      000498 EB               [12] 1385 	mov	a,r3
      000499 3D               [12] 1386 	addc	a,r5
      00049A F5 83            [12] 1387 	mov	dph,a
      00049C 53 06 01         [24] 1388 	anl	ar6,#0x01
      00049F EE               [12] 1389 	mov	a,r6
      0004A0 F0               [24] 1390 	movx	@dptr,a
                                   1391 ;	life.c:94: for (x = 0; x < W; x++) {
      0004A1 90r08r00         [24] 1392 	mov	dptr,#_x
      0004A4 E0               [24] 1393 	movx	a,@dptr
      0004A5 24 01            [12] 1394 	add	a,#0x01
      0004A7 F0               [24] 1395 	movx	@dptr,a
      0004A8 A3               [24] 1396 	inc	dptr
      0004A9 E0               [24] 1397 	movx	a,@dptr
      0004AA 34 00            [12] 1398 	addc	a,#0x00
      0004AC F0               [24] 1399 	movx	@dptr,a
      0004AD 90r08r00         [24] 1400 	mov	dptr,#_x
      0004B0 E0               [24] 1401 	movx	a,@dptr
      0004B1 FE               [12] 1402 	mov	r6,a
      0004B2 A3               [24] 1403 	inc	dptr
      0004B3 E0               [24] 1404 	movx	a,@dptr
      0004B4 FF               [12] 1405 	mov	r7,a
      0004B5 C3               [12] 1406 	clr	c
      0004B6 EE               [12] 1407 	mov	a,r6
      0004B7 94 20            [12] 1408 	subb	a,#0x20
      0004B9 EF               [12] 1409 	mov	a,r7
      0004BA 64 80            [12] 1410 	xrl	a,#0x80
      0004BC 94 80            [12] 1411 	subb	a,#0x80
      0004BE 40 9F            [24] 1412 	jc	00111$
                                   1413 ;	life.c:93: for (y = 0; y < H; y++)
      0004C0 90r08r02         [24] 1414 	mov	dptr,#_y
      0004C3 E0               [24] 1415 	movx	a,@dptr
      0004C4 24 01            [12] 1416 	add	a,#0x01
      0004C6 F0               [24] 1417 	movx	@dptr,a
      0004C7 A3               [24] 1418 	inc	dptr
      0004C8 E0               [24] 1419 	movx	a,@dptr
      0004C9 34 00            [12] 1420 	addc	a,#0x00
      0004CB F0               [24] 1421 	movx	@dptr,a
      0004CC 90r08r02         [24] 1422 	mov	dptr,#_y
      0004CF E0               [24] 1423 	movx	a,@dptr
      0004D0 FE               [12] 1424 	mov	r6,a
      0004D1 A3               [24] 1425 	inc	dptr
      0004D2 E0               [24] 1426 	movx	a,@dptr
      0004D3 FF               [12] 1427 	mov	r7,a
      0004D4 C3               [12] 1428 	clr	c
      0004D5 EE               [12] 1429 	mov	a,r6
      0004D6 94 20            [12] 1430 	subb	a,#0x20
      0004D8 EF               [12] 1431 	mov	a,r7
      0004D9 64 80            [12] 1432 	xrl	a,#0x80
      0004DB 94 80            [12] 1433 	subb	a,#0x80
      0004DD 50 03            [24] 1434 	jnc	00155$
      0004DF 02r04r58         [24] 1435 	ljmp	00113$
      0004E2                       1436 00155$:
                                   1437 ;	life.c:98: printf("RDY\n\r");
      0004E2 74r2D            [12] 1438 	mov	a,#___str_5
      0004E4 C0 E0            [24] 1439 	push	acc
      0004E6 74s00            [12] 1440 	mov	a,#(___str_5 >> 8)
      0004E8 C0 E0            [24] 1441 	push	acc
      0004EA 74 80            [12] 1442 	mov	a,#0x80
      0004EC C0 E0            [24] 1443 	push	acc
      0004EE 12r00r00         [24] 1444 	lcall	_printf
      0004F1 15 81            [12] 1445 	dec	sp
      0004F3 15 81            [12] 1446 	dec	sp
      0004F5 15 81            [12] 1447 	dec	sp
                                   1448 ;	life.c:99: (void)getchar();
      0004F7 12r00r05         [24] 1449 	lcall	_getchar
                                   1450 ;	life.c:101: population = 0;
      0004FA 90r08r0A         [24] 1451 	mov	dptr,#_population
      0004FD E4               [12] 1452 	clr	a
      0004FE F0               [24] 1453 	movx	@dptr,a
      0004FF A3               [24] 1454 	inc	dptr
      000500 F0               [24] 1455 	movx	@dptr,a
                                   1456 ;	life.c:103: while (!i1) {
      000501                       1457 00105$:
      000501 90r08r10         [24] 1458 	mov	dptr,#_i1
      000504 E0               [24] 1459 	movx	a,@dptr
      000505 F5 F0            [12] 1460 	mov	b,a
      000507 A3               [24] 1461 	inc	dptr
      000508 E0               [24] 1462 	movx	a,@dptr
      000509 45 F0            [12] 1463 	orl	a,b
      00050B 60 03            [24] 1464 	jz	00156$
      00050D 02r04r2D         [24] 1465 	ljmp	00108$
      000510                       1466 00156$:
                                   1467 ;	life.c:104: show();
      000510 12r00r38         [24] 1468 	lcall	_show
                                   1469 ;	life.c:105: evolve();
      000513 12r01r2A         [24] 1470 	lcall	_evolve
                                   1471 ;	life.c:106: if (fixed) {
      000516 90r08r0C         [24] 1472 	mov	dptr,#_fixed
      000519 E0               [24] 1473 	movx	a,@dptr
      00051A F5 F0            [12] 1474 	mov	b,a
      00051C A3               [24] 1475 	inc	dptr
      00051D E0               [24] 1476 	movx	a,@dptr
      00051E 45 F0            [12] 1477 	orl	a,b
      000520 60 DF            [24] 1478 	jz	00105$
                                   1479 ;	life.c:107: printf("DONE\n\r");
      000522 74r33            [12] 1480 	mov	a,#___str_6
      000524 C0 E0            [24] 1481 	push	acc
      000526 74s00            [12] 1482 	mov	a,#(___str_6 >> 8)
      000528 C0 E0            [24] 1483 	push	acc
      00052A 74 80            [12] 1484 	mov	a,#0x80
      00052C C0 E0            [24] 1485 	push	acc
      00052E 12r00r00         [24] 1486 	lcall	_printf
      000531 15 81            [12] 1487 	dec	sp
      000533 15 81            [12] 1488 	dec	sp
      000535 15 81            [12] 1489 	dec	sp
                                   1490 ;	life.c:108: (void)getchar();
      000537 12r00r05         [24] 1491 	lcall	_getchar
                                   1492 ;	life.c:109: break;
      00053A 02r04r2D         [24] 1493 	ljmp	00108$
      00053D                       1494 00110$:
                                   1495 ;	life.c:114: EA = 0;
                                   1496 ;	assignBit
      00053D C2 AF            [12] 1497 	clr	_EA
                                   1498 ;	life.c:118: __endasm;
      00053F 02 00 00         [24] 1499 	ljmp	0
                                   1500 ;	life.c:119: }
      000542 22               [24] 1501 	ret
                                   1502 	.area CSEG    (CODE)
                                   1503 	.area CONST   (CODE)
                                   1504 	.area CONST   (CODE)
      000000                       1505 ___str_0:
      000000 1B                    1506 	.db 0x1b
      000001 5B 32 4A              1507 	.ascii "[2J"
      000004 1B                    1508 	.db 0x1b
      000005 5B 6D 25 30 34 78     1509 	.ascii "[m%04x"
      00000B 0D                    1510 	.db 0x0d
      00000C 0A                    1511 	.db 0x0a
      00000D 00                    1512 	.db 0x00
                                   1513 	.area CSEG    (CODE)
                                   1514 	.area CONST   (CODE)
      00000E                       1515 ___str_1:
      00000E 1B                    1516 	.db 0x1b
      00000F 5B 30 31 6D 5B 5D     1517 	.ascii "[01m[]"
      000015 1B                    1518 	.db 0x1b
      000016 5B 6D                 1519 	.ascii "[m"
      000018 00                    1520 	.db 0x00
                                   1521 	.area CSEG    (CODE)
                                   1522 	.area CONST   (CODE)
      000019                       1523 ___str_2:
      000019 20 20                 1524 	.ascii "  "
      00001B 00                    1525 	.db 0x00
                                   1526 	.area CSEG    (CODE)
                                   1527 	.area CONST   (CODE)
      00001C                       1528 ___str_3:
      00001C 0D                    1529 	.db 0x0d
      00001D 0A                    1530 	.db 0x0a
      00001E 00                    1531 	.db 0x00
                                   1532 	.area CSEG    (CODE)
                                   1533 	.area CONST   (CODE)
      00001F                       1534 ___str_4:
      00001F 1B                    1535 	.db 0x1b
      000020 5B 32 4A              1536 	.ascii "[2J"
      000023 1B                    1537 	.db 0x1b
      000024 5B 6D 49 4E 49 54     1538 	.ascii "[mINIT"
      00002A 0A                    1539 	.db 0x0a
      00002B 0D                    1540 	.db 0x0d
      00002C 00                    1541 	.db 0x00
                                   1542 	.area CSEG    (CODE)
                                   1543 	.area CONST   (CODE)
      00002D                       1544 ___str_5:
      00002D 52 44 59              1545 	.ascii "RDY"
      000030 0A                    1546 	.db 0x0a
      000031 0D                    1547 	.db 0x0d
      000032 00                    1548 	.db 0x00
                                   1549 	.area CSEG    (CODE)
                                   1550 	.area CONST   (CODE)
      000033                       1551 ___str_6:
      000033 44 4F 4E 45           1552 	.ascii "DONE"
      000037 0A                    1553 	.db 0x0a
      000038 0D                    1554 	.db 0x0d
      000039 00                    1555 	.db 0x00
                                   1556 	.area CSEG    (CODE)
                                   1557 	.area XINIT   (CODE)
                                   1558 	.area CABS    (ABS,CODE)
