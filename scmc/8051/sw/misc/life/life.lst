                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar_poll
                                     16 	.globl _getchar
                                     17 	.globl _putchar
                                     18 	.globl _toupper
                                     19 	.globl ___memcpy
                                     20 	.globl _memset
                                     21 	.globl _srand
                                     22 	.globl _rand
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000C8   169 _T2CON	=	0x00c8
                           0000C9   170 _T2MOD	=	0x00c9
                           0000CA   171 _RCAP2L	=	0x00ca
                           0000CB   172 _RCAP2H	=	0x00cb
                           0000CC   173 _TL2	=	0x00cc
                           0000CD   174 _TH2	=	0x00cd
                           0000D0   175 _PSW	=	0x00d0
                           0000E0   176 _ACC	=	0x00e0
                           0000E0   177 _A	=	0x00e0
                           0000F0   178 _B	=	0x00f0
                                    179 ;--------------------------------------------------------
                                    180 ; special function bits
                                    181 ;--------------------------------------------------------
                                    182 	.area RSEG    (ABS,DATA)
      000000                        183 	.org 0x0000
                           000080   184 _P0_0	=	0x0080
                           000081   185 _P0_1	=	0x0081
                           000082   186 _P0_2	=	0x0082
                           000083   187 _P0_3	=	0x0083
                           000084   188 _P0_4	=	0x0084
                           000085   189 _P0_5	=	0x0085
                           000086   190 _P0_6	=	0x0086
                           000087   191 _P0_7	=	0x0087
                           000088   192 _IT0	=	0x0088
                           000089   193 _IE0	=	0x0089
                           00008A   194 _IT1	=	0x008a
                           00008B   195 _IE1	=	0x008b
                           00008C   196 _TR0	=	0x008c
                           00008D   197 _TF0	=	0x008d
                           00008E   198 _TR1	=	0x008e
                           00008F   199 _TF1	=	0x008f
                           000090   200 _P1_0	=	0x0090
                           000091   201 _P1_1	=	0x0091
                           000092   202 _P1_2	=	0x0092
                           000093   203 _P1_3	=	0x0093
                           000094   204 _P1_4	=	0x0094
                           000095   205 _P1_5	=	0x0095
                           000096   206 _P1_6	=	0x0096
                           000097   207 _P1_7	=	0x0097
                           000090   208 _T2	=	0x0090
                           000091   209 _T2EX	=	0x0091
                           000098   210 _RI	=	0x0098
                           000099   211 _TI	=	0x0099
                           00009A   212 _RB8	=	0x009a
                           00009B   213 _TB8	=	0x009b
                           00009C   214 _REN	=	0x009c
                           00009D   215 _SM2	=	0x009d
                           00009E   216 _SM1	=	0x009e
                           00009F   217 _SM0	=	0x009f
                           0000A0   218 _P2_0	=	0x00a0
                           0000A1   219 _P2_1	=	0x00a1
                           0000A2   220 _P2_2	=	0x00a2
                           0000A3   221 _P2_3	=	0x00a3
                           0000A4   222 _P2_4	=	0x00a4
                           0000A5   223 _P2_5	=	0x00a5
                           0000A6   224 _P2_6	=	0x00a6
                           0000A7   225 _P2_7	=	0x00a7
                           0000A8   226 _EX0	=	0x00a8
                           0000A9   227 _ET0	=	0x00a9
                           0000AA   228 _EX1	=	0x00aa
                           0000AB   229 _ET1	=	0x00ab
                           0000AC   230 _ES	=	0x00ac
                           0000AD   231 _ET2	=	0x00ad
                           0000AF   232 _EA	=	0x00af
                           0000B0   233 _P3_0	=	0x00b0
                           0000B1   234 _P3_1	=	0x00b1
                           0000B2   235 _P3_2	=	0x00b2
                           0000B3   236 _P3_3	=	0x00b3
                           0000B4   237 _P3_4	=	0x00b4
                           0000B5   238 _P3_5	=	0x00b5
                           0000B6   239 _P3_6	=	0x00b6
                           0000B7   240 _P3_7	=	0x00b7
                           0000B0   241 _RXD	=	0x00b0
                           0000B1   242 _TXD	=	0x00b1
                           0000B2   243 _INT0	=	0x00b2
                           0000B3   244 _INT1	=	0x00b3
                           0000B4   245 _T0	=	0x00b4
                           0000B5   246 _T1	=	0x00b5
                           0000B6   247 _WR	=	0x00b6
                           0000B7   248 _RD	=	0x00b7
                           0000B8   249 _PX0	=	0x00b8
                           0000B9   250 _PT0	=	0x00b9
                           0000BA   251 _PX1	=	0x00ba
                           0000BB   252 _PT1	=	0x00bb
                           0000BC   253 _PS	=	0x00bc
                           0000BD   254 _PT2	=	0x00bd
                           0000C8   255 _T2CON_0	=	0x00c8
                           0000C9   256 _T2CON_1	=	0x00c9
                           0000CA   257 _T2CON_2	=	0x00ca
                           0000CB   258 _T2CON_3	=	0x00cb
                           0000CC   259 _T2CON_4	=	0x00cc
                           0000CD   260 _T2CON_5	=	0x00cd
                           0000CE   261 _T2CON_6	=	0x00ce
                           0000CF   262 _T2CON_7	=	0x00cf
                           0000C8   263 _CP_RL2	=	0x00c8
                           0000C9   264 _C_T2	=	0x00c9
                           0000CA   265 _TR2	=	0x00ca
                           0000CB   266 _EXEN2	=	0x00cb
                           0000CC   267 _TCLK	=	0x00cc
                           0000CD   268 _RCLK	=	0x00cd
                           0000CE   269 _EXF2	=	0x00ce
                           0000CF   270 _TF2	=	0x00cf
                           0000D0   271 _P	=	0x00d0
                           0000D1   272 _FL	=	0x00d1
                           0000D2   273 _OV	=	0x00d2
                           0000D3   274 _RS0	=	0x00d3
                           0000D4   275 _RS1	=	0x00d4
                           0000D5   276 _F0	=	0x00d5
                           0000D6   277 _AC	=	0x00d6
                           0000D7   278 _CY	=	0x00d7
                                    279 ;--------------------------------------------------------
                                    280 ; overlayable register banks
                                    281 ;--------------------------------------------------------
                                    282 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        283 	.ds 8
                                    284 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable bit register bank
                                    288 ;--------------------------------------------------------
                                    289 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        290 bits:
      000000                        291 	.ds 1
                           008000   292 	b0 = bits[0]
                           008100   293 	b1 = bits[1]
                           008200   294 	b2 = bits[2]
                           008300   295 	b3 = bits[3]
                           008400   296 	b4 = bits[4]
                           008500   297 	b5 = bits[5]
                           008600   298 	b6 = bits[6]
                           008700   299 	b7 = bits[7]
                                    300 ;--------------------------------------------------------
                                    301 ; internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area DSEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; overlayable items in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 ;--------------------------------------------------------
                                    308 ; Stack segment in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 	.area	SSEG
      000000                        311 __start__stack:
      000000                        312 	.ds	1
                                    313 
                                    314 ;--------------------------------------------------------
                                    315 ; indirectly addressable internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area ISEG    (DATA)
      000000                        318 _digits:
      000000                        319 	.ds 16
      000010                        320 _i0:
      000010                        321 	.ds 1
      000011                        322 _i1:
      000011                        323 	.ds 1
      000012                        324 _OE76:
      000012                        325 	.ds 1
      000013                        326 _x:
      000013                        327 	.ds 2
      000015                        328 _y:
      000015                        329 	.ds 2
      000017                        330 _j:
      000017                        331 	.ds 2
      000019                        332 _c:
      000019                        333 	.ds 2
      00001B                        334 _n:
      00001B                        335 	.ds 1
      00001C                        336 _fixed:
      00001C                        337 	.ds 1
      00001D                        338 _cycle2:
      00001D                        339 	.ds 1
      00001E                        340 _x1:
      00001E                        341 	.ds 2
      000020                        342 _y1:
      000020                        343 	.ds 2
      000022                        344 _generation:
      000022                        345 	.ds 4
                                    346 ;--------------------------------------------------------
                                    347 ; absolute internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area IABS    (ABS,DATA)
                                    350 	.area IABS    (ABS,DATA)
                                    351 ;--------------------------------------------------------
                                    352 ; bit data
                                    353 ;--------------------------------------------------------
                                    354 	.area BSEG    (BIT)
                                    355 ;--------------------------------------------------------
                                    356 ; paged external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area PSEG    (PAG,XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XSEG    (XDATA)
                           008000   363 _RND	=	0x8000
                           00F006   364 _OEreg	=	0xf006
      000000                        365 _iu:
      000000                        366 	.ds 9216
      002400                        367 _pu:
      002400                        368 	.ds 9216
      004800                        369 _u:
      004800                        370 	.ds 9216
      006C00                        371 _nu:
      006C00                        372 	.ds 9216
                                    373 ;--------------------------------------------------------
                                    374 ; absolute external ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XABS    (ABS,XDATA)
                                    377 ;--------------------------------------------------------
                                    378 ; external initialized ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area XISEG   (XDATA)
                                    381 	.area HOME    (CODE)
                                    382 	.area GSINIT0 (CODE)
                                    383 	.area GSINIT1 (CODE)
                                    384 	.area GSINIT2 (CODE)
                                    385 	.area GSINIT3 (CODE)
                                    386 	.area GSINIT4 (CODE)
                                    387 	.area GSINIT5 (CODE)
                                    388 	.area GSINIT  (CODE)
                                    389 	.area GSFINAL (CODE)
                                    390 	.area CSEG    (CODE)
                                    391 ;--------------------------------------------------------
                                    392 ; interrupt vector 
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
      000000                        395 __interrupt_vect:
      000000 02r00r00         [24]  396 	ljmp	__sdcc_gsinit_startup
      000003 02r00r30         [24]  397 	ljmp	_int0
      000006                        398 	.ds	5
      00000B 32               [24]  399 	reti
      00000C                        400 	.ds	7
      000013 02r00r3C         [24]  401 	ljmp	_int1
                                    402 ;--------------------------------------------------------
                                    403 ; global & static initialisations
                                    404 ;--------------------------------------------------------
                                    405 	.area HOME    (CODE)
                                    406 	.area GSINIT  (CODE)
                                    407 	.area GSFINAL (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.globl __sdcc_gsinit_startup
                                    410 	.globl __sdcc_program_startup
                                    411 	.globl __start__stack
                                    412 	.globl __mcs51_genXINIT
                                    413 	.globl __mcs51_genXRAMCLEAR
                                    414 	.globl __mcs51_genRAMCLEAR
                                    415 ;	life.c:49: __idata static const char digits[16] = {
      000000 78r00            [12]  416 	mov	r0,#_digits
      000002 76 30            [12]  417 	mov	@r0,#0x30
      000004 78r01            [12]  418 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  419 	mov	@r0,#0x31
      000008 78r02            [12]  420 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  421 	mov	@r0,#0x32
      00000C 78r03            [12]  422 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  423 	mov	@r0,#0x33
      000010 78r04            [12]  424 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  425 	mov	@r0,#0x34
      000014 78r05            [12]  426 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  427 	mov	@r0,#0x35
      000018 78r06            [12]  428 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  429 	mov	@r0,#0x36
      00001C 78r07            [12]  430 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  431 	mov	@r0,#0x37
      000020 78r08            [12]  432 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  433 	mov	@r0,#0x38
      000024 78r09            [12]  434 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  435 	mov	@r0,#0x39
      000028 78r0A            [12]  436 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  437 	mov	@r0,#0x41
      00002C 78r0B            [12]  438 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  439 	mov	@r0,#0x42
      000030 78r0C            [12]  440 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  441 	mov	@r0,#0x43
      000034 78r0D            [12]  442 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  443 	mov	@r0,#0x44
      000038 78r0E            [12]  444 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  445 	mov	@r0,#0x45
      00003C 78r0F            [12]  446 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  447 	mov	@r0,#0x46
                                    448 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  449 	ljmp	__sdcc_program_startup
                                    450 ;--------------------------------------------------------
                                    451 ; Home
                                    452 ;--------------------------------------------------------
                                    453 	.area HOME    (CODE)
                                    454 	.area HOME    (CODE)
      000016                        455 __sdcc_program_startup:
      000016 02r02r77         [24]  456 	ljmp	_main
                                    457 ;	return from main will return to caller
                                    458 ;--------------------------------------------------------
                                    459 ; code
                                    460 ;--------------------------------------------------------
                                    461 	.area CSEG    (CODE)
                                    462 ;------------------------------------------------------------
                                    463 ;Allocation info for local variables in function 'putchar'
                                    464 ;------------------------------------------------------------
                                    465 ;c                         Allocated to registers 
                                    466 ;------------------------------------------------------------
                                    467 ;	life.c:8: int putchar(int c) __naked {
                                    468 ;	-----------------------------------------
                                    469 ;	 function putchar
                                    470 ;	-----------------------------------------
      000000                        471 _putchar:
                                    472 ;	naked function: no prologue.
                                    473 ;	life.c:15: __endasm;
      000000 C0 E0            [24]  474 	push	acc
      000002 E5 82            [12]  475 	mov	a, dpl
      000004 12 00 3C         [24]  476 	lcall	0x003c
      000007 D0 E0            [24]  477 	pop	acc
                                    478 ;	life.c:16: }
                                    479 ;	naked function: no epilogue.
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'getchar'
                                    482 ;------------------------------------------------------------
                                    483 ;	life.c:18: int getchar(void) __naked {
                                    484 ;	-----------------------------------------
                                    485 ;	 function getchar
                                    486 ;	-----------------------------------------
      000009                        487 _getchar:
                                    488 ;	naked function: no prologue.
                                    489 ;	life.c:26: __endasm;
      000009 C0 E0            [24]  490 	push	acc
      00000B 12 00 36         [24]  491 	lcall	0x0036
      00000E F5 82            [12]  492 	mov	dpl, a
      000010 75 83 00         [24]  493 	mov	dph, #0
      000013 D0 E0            [24]  494 	pop	acc
      000015 22               [24]  495 	ret
                                    496 ;	life.c:27: }
                                    497 ;	naked function: no epilogue.
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'getchar_poll'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:29: int getchar_poll(void) __naked {
                                    502 ;	-----------------------------------------
                                    503 ;	 function getchar_poll
                                    504 ;	-----------------------------------------
      000016                        505 _getchar_poll:
                                    506 ;	naked function: no prologue.
                                    507 ;	life.c:44: __endasm;
      000016 C0 E0            [24]  508 	push	acc
      000018 C0 F0            [24]  509 	push	b
      00001A 74 FF            [12]  510 	mov	a, #0xff
      00001C F5 F0            [12]  511 	mov	b, a
      00001E 12 00 39         [24]  512 	lcall	0x0039
      000021 40 03            [24]  513 	jc	nochar
      000023 75 F0 00         [24]  514 	mov	b, #0x00
      000026                        515 	nochar:
      000026 F5 82            [12]  516 	mov	dpl, a
      000028 85 F0 83         [24]  517 	mov	dph, b
      00002B D0 F0            [24]  518 	pop	b
      00002D D0 E0            [24]  519 	pop	acc
      00002F 22               [24]  520 	ret
                                    521 ;	life.c:45: }
                                    522 ;	naked function: no epilogue.
                                    523 ;------------------------------------------------------------
                                    524 ;Allocation info for local variables in function 'int0'
                                    525 ;------------------------------------------------------------
                                    526 ;	life.c:78: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    527 ;	-----------------------------------------
                                    528 ;	 function int0
                                    529 ;	-----------------------------------------
      000030                        530 _int0:
                           00000F   531 	ar7 = 0x0f
                           00000E   532 	ar6 = 0x0e
                           00000D   533 	ar5 = 0x0d
                           00000C   534 	ar4 = 0x0c
                           00000B   535 	ar3 = 0x0b
                           00000A   536 	ar2 = 0x0a
                           000009   537 	ar1 = 0x09
                           000008   538 	ar0 = 0x08
      000030 C0 D0            [24]  539 	push	psw
      000032 75 D0 08         [24]  540 	mov	psw,#0x08
                                    541 ;	life.c:79: i0 = 1;
      000035 78r10            [12]  542 	mov	r0,#_i0
      000037 76 01            [12]  543 	mov	@r0,#0x01
                                    544 ;	life.c:80: }
      000039 D0 D0            [24]  545 	pop	psw
      00003B 32               [24]  546 	reti
                                    547 ;	eliminated unneeded push/pop dpl
                                    548 ;	eliminated unneeded push/pop dph
                                    549 ;	eliminated unneeded push/pop b
                                    550 ;	eliminated unneeded push/pop acc
                                    551 ;------------------------------------------------------------
                                    552 ;Allocation info for local variables in function 'int1'
                                    553 ;------------------------------------------------------------
                                    554 ;	life.c:82: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    555 ;	-----------------------------------------
                                    556 ;	 function int1
                                    557 ;	-----------------------------------------
      00003C                        558 _int1:
      00003C C0 D0            [24]  559 	push	psw
      00003E 75 D0 08         [24]  560 	mov	psw,#0x08
                                    561 ;	life.c:83: i1 = 1;
      000041 78r11            [12]  562 	mov	r0,#_i1
      000043 76 01            [12]  563 	mov	@r0,#0x01
                                    564 ;	life.c:84: }
      000045 D0 D0            [24]  565 	pop	psw
      000047 32               [24]  566 	reti
                                    567 ;	eliminated unneeded push/pop dpl
                                    568 ;	eliminated unneeded push/pop dph
                                    569 ;	eliminated unneeded push/pop b
                                    570 ;	eliminated unneeded push/pop acc
                                    571 ;------------------------------------------------------------
                                    572 ;Allocation info for local variables in function 'flashOE'
                                    573 ;------------------------------------------------------------
                                    574 ;	life.c:94: static void flashOE(void) {
                                    575 ;	-----------------------------------------
                                    576 ;	 function flashOE
                                    577 ;	-----------------------------------------
      000048                        578 _flashOE:
                           000007   579 	ar7 = 0x07
                           000006   580 	ar6 = 0x06
                           000005   581 	ar5 = 0x05
                           000004   582 	ar4 = 0x04
                           000003   583 	ar3 = 0x03
                           000002   584 	ar2 = 0x02
                           000001   585 	ar1 = 0x01
                           000000   586 	ar0 = 0x00
                                    587 ;	life.c:95: P1_7 = 0;
                                    588 ;	assignBit
      000048 C2 97            [12]  589 	clr	_P1_7
                                    590 ;	life.c:100: __endasm;
      00004A 00               [12]  591 	nop
      00004B 00               [12]  592 	nop
      00004C 00               [12]  593 	nop
                                    594 ;	life.c:101: OEreg = OE76;
      00004D 78r12            [12]  595 	mov	r0,#_OE76
      00004F 90 F0 06         [24]  596 	mov	dptr,#_OEreg
      000052 E6               [12]  597 	mov	a,@r0
      000053 F0               [24]  598 	movx	@dptr,a
                                    599 ;	life.c:102: P1_7 = 1;
                                    600 ;	assignBit
      000054 D2 97            [12]  601 	setb	_P1_7
                                    602 ;	life.c:107: __endasm;
      000056 00               [12]  603 	nop
      000057 00               [12]  604 	nop
      000058 00               [12]  605 	nop
                                    606 ;	life.c:109: return;
                                    607 ;	life.c:110: }
      000059 22               [24]  608 	ret
                                    609 ;------------------------------------------------------------
                                    610 ;Allocation info for local variables in function 'show'
                                    611 ;------------------------------------------------------------
                                    612 ;hdr                       Allocated to registers r7 
                                    613 ;__1310720005              Allocated to registers 
                                    614 ;s                         Allocated to registers r4 r5 r6 
                                    615 ;__1966080007              Allocated to registers 
                                    616 ;s                         Allocated to registers r5 r6 r7 
                                    617 ;__1310720001              Allocated to registers r6 r7 
                                    618 ;a                         Allocated to registers 
                                    619 ;__1310720003              Allocated to registers r6 r7 
                                    620 ;a                         Allocated to registers 
                                    621 ;__1966080010              Allocated to registers 
                                    622 ;s                         Allocated to registers r5 r6 r7 
                                    623 ;__2621440013              Allocated to registers 
                                    624 ;s                         Allocated to registers r5 r6 r7 
                                    625 ;__1310720015              Allocated to registers 
                                    626 ;s                         Allocated to registers r5 r6 r7 
                                    627 ;------------------------------------------------------------
                                    628 ;	life.c:146: void show(char hdr) {
                                    629 ;	-----------------------------------------
                                    630 ;	 function show
                                    631 ;	-----------------------------------------
      00005A                        632 _show:
      00005A AF 82            [24]  633 	mov	r7,dpl
                                    634 ;	life.c:147: printstr("\033[?25l");
      00005C 7Cr00            [12]  635 	mov	r4,#___str_0
      00005E 7Ds00            [12]  636 	mov	r5,#(___str_0 >> 8)
      000060 7E 80            [12]  637 	mov	r6,#0x80
                                    638 ;	life.c:73: return;
      000062                        639 00125$:
                                    640 ;	life.c:71: for (; *s; s++) putchar(*s);
      000062 8C 82            [24]  641 	mov	dpl,r4
      000064 8D 83            [24]  642 	mov	dph,r5
      000066 8E F0            [24]  643 	mov	b,r6
      000068 12r00r00         [24]  644 	lcall	__gptrget
      00006B FB               [12]  645 	mov	r3,a
      00006C 60 10            [24]  646 	jz	00109$
      00006E 7A 00            [12]  647 	mov	r2,#0x00
      000070 8B 82            [24]  648 	mov	dpl,r3
      000072 8A 83            [24]  649 	mov	dph,r2
      000074 12r00r00         [24]  650 	lcall	_putchar
      000077 0C               [12]  651 	inc	r4
                                    652 ;	life.c:147: printstr("\033[?25l");
      000078 BC 00 E7         [24]  653 	cjne	r4,#0x00,00125$
      00007B 0D               [12]  654 	inc	r5
      00007C 80 E4            [24]  655 	sjmp	00125$
      00007E                        656 00109$:
                                    657 ;	life.c:149: if (hdr) {
      00007E EF               [12]  658 	mov	a,r7
      00007F 70 03            [24]  659 	jnz	00220$
      000081 02r01rBA         [24]  660 	ljmp	00102$
      000084                        661 00220$:
                                    662 ;	life.c:150: printstr("\033[2JGEN ");
      000084 7Dr07            [12]  663 	mov	r5,#___str_1
      000086 7Es00            [12]  664 	mov	r6,#(___str_1 >> 8)
      000088 7F 80            [12]  665 	mov	r7,#0x80
                                    666 ;	life.c:73: return;
      00008A                        667 00128$:
                                    668 ;	life.c:71: for (; *s; s++) putchar(*s);
      00008A 8D 82            [24]  669 	mov	dpl,r5
      00008C 8E 83            [24]  670 	mov	dph,r6
      00008E 8F F0            [24]  671 	mov	b,r7
      000090 12r00r00         [24]  672 	lcall	__gptrget
      000093 FC               [12]  673 	mov	r4,a
      000094 60 10            [24]  674 	jz	00111$
      000096 7B 00            [12]  675 	mov	r3,#0x00
      000098 8C 82            [24]  676 	mov	dpl,r4
      00009A 8B 83            [24]  677 	mov	dph,r3
      00009C 12r00r00         [24]  678 	lcall	_putchar
      00009F 0D               [12]  679 	inc	r5
                                    680 ;	life.c:150: printstr("\033[2JGEN ");
      0000A0 BD 00 E7         [24]  681 	cjne	r5,#0x00,00128$
      0000A3 0E               [12]  682 	inc	r6
      0000A4 80 E4            [24]  683 	sjmp	00128$
      0000A6                        684 00111$:
                                    685 ;	life.c:140: print16x(generation[1]);
      0000A6 78r24            [12]  686 	mov	r0,#(_generation + 0x0002)
      0000A8 86 06            [24]  687 	mov	ar6,@r0
      0000AA 08               [12]  688 	inc	r0
                                    689 ;	life.c:62: putchar(digits[(a >> 12) & 0xf]);
      0000AB E6               [12]  690 	mov	a,@r0
      0000AC FF               [12]  691 	mov	r7,a
      0000AD C4               [12]  692 	swap	a
      0000AE 54 0F            [12]  693 	anl	a,#0x0f
      0000B0 FC               [12]  694 	mov	r4,a
      0000B1 53 04 0F         [24]  695 	anl	ar4,#0x0f
      0000B4 EC               [12]  696 	mov	a,r4
      0000B5 24r00            [12]  697 	add	a,#_digits
      0000B7 F9               [12]  698 	mov	r1,a
      0000B8 87 05            [24]  699 	mov	ar5,@r1
      0000BA 7C 00            [12]  700 	mov	r4,#0x00
      0000BC 8D 82            [24]  701 	mov	dpl,r5
      0000BE 8C 83            [24]  702 	mov	dph,r4
      0000C0 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:63: putchar(digits[(a >> 8) & 0xf]);
      0000C3 8F 05            [24]  705 	mov	ar5,r7
      0000C5 53 05 0F         [24]  706 	anl	ar5,#0x0f
      0000C8 ED               [12]  707 	mov	a,r5
      0000C9 24r00            [12]  708 	add	a,#_digits
      0000CB F9               [12]  709 	mov	r1,a
      0000CC 87 05            [24]  710 	mov	ar5,@r1
      0000CE 7C 00            [12]  711 	mov	r4,#0x00
      0000D0 8D 82            [24]  712 	mov	dpl,r5
      0000D2 8C 83            [24]  713 	mov	dph,r4
      0000D4 12r00r00         [24]  714 	lcall	_putchar
                                    715 ;	life.c:64: putchar(digits[(a >> 4) & 0xf]);
      0000D7 8E 04            [24]  716 	mov	ar4,r6
      0000D9 EF               [12]  717 	mov	a,r7
      0000DA C4               [12]  718 	swap	a
      0000DB CC               [12]  719 	xch	a,r4
      0000DC C4               [12]  720 	swap	a
      0000DD 54 0F            [12]  721 	anl	a,#0x0f
      0000DF 6C               [12]  722 	xrl	a,r4
      0000E0 CC               [12]  723 	xch	a,r4
      0000E1 54 0F            [12]  724 	anl	a,#0x0f
      0000E3 CC               [12]  725 	xch	a,r4
      0000E4 6C               [12]  726 	xrl	a,r4
      0000E5 CC               [12]  727 	xch	a,r4
      0000E6 53 04 0F         [24]  728 	anl	ar4,#0x0f
      0000E9 EC               [12]  729 	mov	a,r4
      0000EA 24r00            [12]  730 	add	a,#_digits
      0000EC F9               [12]  731 	mov	r1,a
      0000ED 87 05            [24]  732 	mov	ar5,@r1
      0000EF 7C 00            [12]  733 	mov	r4,#0x00
      0000F1 8D 82            [24]  734 	mov	dpl,r5
      0000F3 8C 83            [24]  735 	mov	dph,r4
      0000F5 12r00r00         [24]  736 	lcall	_putchar
                                    737 ;	life.c:65: putchar(digits[a & 0xf]);
      0000F8 53 06 0F         [24]  738 	anl	ar6,#0x0f
      0000FB EE               [12]  739 	mov	a,r6
      0000FC 24r00            [12]  740 	add	a,#_digits
      0000FE F9               [12]  741 	mov	r1,a
      0000FF 87 07            [24]  742 	mov	ar7,@r1
      000101 7E 00            [12]  743 	mov	r6,#0x00
      000103 8F 82            [24]  744 	mov	dpl,r7
      000105 8E 83            [24]  745 	mov	dph,r6
      000107 12r00r00         [24]  746 	lcall	_putchar
                                    747 ;	life.c:141: print16x(generation[0]);
      00010A 78r22            [12]  748 	mov	r0,#_generation
      00010C 86 06            [24]  749 	mov	ar6,@r0
      00010E 08               [12]  750 	inc	r0
                                    751 ;	life.c:62: putchar(digits[(a >> 12) & 0xf]);
      00010F E6               [12]  752 	mov	a,@r0
      000110 FF               [12]  753 	mov	r7,a
      000111 C4               [12]  754 	swap	a
      000112 54 0F            [12]  755 	anl	a,#0x0f
      000114 FC               [12]  756 	mov	r4,a
      000115 53 04 0F         [24]  757 	anl	ar4,#0x0f
      000118 EC               [12]  758 	mov	a,r4
      000119 24r00            [12]  759 	add	a,#_digits
      00011B F9               [12]  760 	mov	r1,a
      00011C 87 05            [24]  761 	mov	ar5,@r1
      00011E 7C 00            [12]  762 	mov	r4,#0x00
      000120 8D 82            [24]  763 	mov	dpl,r5
      000122 8C 83            [24]  764 	mov	dph,r4
      000124 12r00r00         [24]  765 	lcall	_putchar
                                    766 ;	life.c:63: putchar(digits[(a >> 8) & 0xf]);
      000127 8F 05            [24]  767 	mov	ar5,r7
      000129 53 05 0F         [24]  768 	anl	ar5,#0x0f
      00012C ED               [12]  769 	mov	a,r5
      00012D 24r00            [12]  770 	add	a,#_digits
      00012F F9               [12]  771 	mov	r1,a
      000130 87 05            [24]  772 	mov	ar5,@r1
      000132 7C 00            [12]  773 	mov	r4,#0x00
      000134 8D 82            [24]  774 	mov	dpl,r5
      000136 8C 83            [24]  775 	mov	dph,r4
      000138 12r00r00         [24]  776 	lcall	_putchar
                                    777 ;	life.c:64: putchar(digits[(a >> 4) & 0xf]);
      00013B 8E 04            [24]  778 	mov	ar4,r6
      00013D EF               [12]  779 	mov	a,r7
      00013E C4               [12]  780 	swap	a
      00013F CC               [12]  781 	xch	a,r4
      000140 C4               [12]  782 	swap	a
      000141 54 0F            [12]  783 	anl	a,#0x0f
      000143 6C               [12]  784 	xrl	a,r4
      000144 CC               [12]  785 	xch	a,r4
      000145 54 0F            [12]  786 	anl	a,#0x0f
      000147 CC               [12]  787 	xch	a,r4
      000148 6C               [12]  788 	xrl	a,r4
      000149 CC               [12]  789 	xch	a,r4
      00014A 53 04 0F         [24]  790 	anl	ar4,#0x0f
      00014D EC               [12]  791 	mov	a,r4
      00014E 24r00            [12]  792 	add	a,#_digits
      000150 F9               [12]  793 	mov	r1,a
      000151 87 05            [24]  794 	mov	ar5,@r1
      000153 7C 00            [12]  795 	mov	r4,#0x00
      000155 8D 82            [24]  796 	mov	dpl,r5
      000157 8C 83            [24]  797 	mov	dph,r4
      000159 12r00r00         [24]  798 	lcall	_putchar
                                    799 ;	life.c:65: putchar(digits[a & 0xf]);
      00015C 53 06 0F         [24]  800 	anl	ar6,#0x0f
      00015F EE               [12]  801 	mov	a,r6
      000160 24r00            [12]  802 	add	a,#_digits
      000162 F9               [12]  803 	mov	r1,a
      000163 87 07            [24]  804 	mov	ar7,@r1
      000165 7E 00            [12]  805 	mov	r6,#0x00
      000167 8F 82            [24]  806 	mov	dpl,r7
      000169 8E 83            [24]  807 	mov	dph,r6
      00016B 12r00r00         [24]  808 	lcall	_putchar
                                    809 ;	life.c:152: printstr("\r\n");
      00016E 7Dr10            [12]  810 	mov	r5,#___str_2
      000170 7Es00            [12]  811 	mov	r6,#(___str_2 >> 8)
      000172 7F 80            [12]  812 	mov	r7,#0x80
                                    813 ;	life.c:73: return;
      000174                        814 00131$:
                                    815 ;	life.c:71: for (; *s; s++) putchar(*s);
      000174 8D 82            [24]  816 	mov	dpl,r5
      000176 8E 83            [24]  817 	mov	dph,r6
      000178 8F F0            [24]  818 	mov	b,r7
      00017A 12r00r00         [24]  819 	lcall	__gptrget
      00017D FC               [12]  820 	mov	r4,a
      00017E 60 10            [24]  821 	jz	00116$
      000180 7B 00            [12]  822 	mov	r3,#0x00
      000182 8C 82            [24]  823 	mov	dpl,r4
      000184 8B 83            [24]  824 	mov	dph,r3
      000186 12r00r00         [24]  825 	lcall	_putchar
      000189 0D               [12]  826 	inc	r5
                                    827 ;	life.c:152: printstr("\r\n");
      00018A BD 00 E7         [24]  828 	cjne	r5,#0x00,00131$
      00018D 0E               [12]  829 	inc	r6
      00018E 80 E4            [24]  830 	sjmp	00131$
      000190                        831 00116$:
                                    832 ;	life.c:133: generation[0]++;
      000190 78r22            [12]  833 	mov	r0,#_generation
      000192 86 06            [24]  834 	mov	ar6,@r0
      000194 08               [12]  835 	inc	r0
      000195 86 07            [24]  836 	mov	ar7,@r0
      000197 0E               [12]  837 	inc	r6
      000198 BE 00 01         [24]  838 	cjne	r6,#0x00,00225$
      00019B 0F               [12]  839 	inc	r7
      00019C                        840 00225$:
      00019C 78r22            [12]  841 	mov	r0,#_generation
      00019E A6 06            [24]  842 	mov	@r0,ar6
      0001A0 08               [12]  843 	inc	r0
      0001A1 A6 07            [24]  844 	mov	@r0,ar7
                                    845 ;	life.c:134: if (!generation[0]) generation[1]++;
      0001A3 EE               [12]  846 	mov	a,r6
      0001A4 4F               [12]  847 	orl	a,r7
      0001A5 70 13            [24]  848 	jnz	00102$
      0001A7 78r24            [12]  849 	mov	r0,#(_generation + 0x0002)
      0001A9 86 06            [24]  850 	mov	ar6,@r0
      0001AB 08               [12]  851 	inc	r0
      0001AC 86 07            [24]  852 	mov	ar7,@r0
      0001AE 0E               [12]  853 	inc	r6
      0001AF BE 00 01         [24]  854 	cjne	r6,#0x00,00227$
      0001B2 0F               [12]  855 	inc	r7
      0001B3                        856 00227$:
      0001B3 78r24            [12]  857 	mov	r0,#(_generation + 0x0002)
      0001B5 A6 06            [24]  858 	mov	@r0,ar6
      0001B7 08               [12]  859 	inc	r0
      0001B8 A6 07            [24]  860 	mov	@r0,ar7
                                    861 ;	life.c:153: updategen();
      0001BA                        862 00102$:
                                    863 ;	life.c:156: for (x = 0; x < W; x++) {
      0001BA 78r13            [12]  864 	mov	r0,#_x
      0001BC E4               [12]  865 	clr	a
      0001BD F6               [12]  866 	mov	@r0,a
      0001BE 08               [12]  867 	inc	r0
      0001BF F6               [12]  868 	mov	@r0,a
      0001C0                        869 00138$:
                                    870 ;	life.c:157: for (y = 0; y < H; y++)
      0001C0 78r15            [12]  871 	mov	r0,#_y
      0001C2 E4               [12]  872 	clr	a
      0001C3 F6               [12]  873 	mov	@r0,a
      0001C4 08               [12]  874 	inc	r0
      0001C5 F6               [12]  875 	mov	@r0,a
      0001C6                        876 00133$:
                                    877 ;	life.c:158: if (u[A2D(W, y, x)]) putchar('1');
      0001C6 78r15            [12]  878 	mov	r0,#_y
      0001C8 E6               [12]  879 	mov	a,@r0
      0001C9 C0 E0            [24]  880 	push	acc
      0001CB 08               [12]  881 	inc	r0
      0001CC E6               [12]  882 	mov	a,@r0
      0001CD C0 E0            [24]  883 	push	acc
      0001CF 90 00 30         [24]  884 	mov	dptr,#0x0030
      0001D2 12r00r00         [24]  885 	lcall	__mulint
      0001D5 AE 82            [24]  886 	mov	r6,dpl
      0001D7 AF 83            [24]  887 	mov	r7,dph
      0001D9 15 81            [12]  888 	dec	sp
      0001DB 15 81            [12]  889 	dec	sp
      0001DD 78r13            [12]  890 	mov	r0,#_x
      0001DF E6               [12]  891 	mov	a,@r0
      0001E0 2E               [12]  892 	add	a,r6
      0001E1 FE               [12]  893 	mov	r6,a
      0001E2 08               [12]  894 	inc	r0
      0001E3 E6               [12]  895 	mov	a,@r0
      0001E4 3F               [12]  896 	addc	a,r7
      0001E5 FF               [12]  897 	mov	r7,a
      0001E6 EE               [12]  898 	mov	a,r6
      0001E7 24r00            [12]  899 	add	a,#_u
      0001E9 FE               [12]  900 	mov	r6,a
      0001EA EF               [12]  901 	mov	a,r7
      0001EB 34s48            [12]  902 	addc	a,#(_u >> 8)
      0001ED FF               [12]  903 	mov	r7,a
      0001EE 8E 82            [24]  904 	mov	dpl,r6
      0001F0 8F 83            [24]  905 	mov	dph,r7
      0001F2 E0               [24]  906 	movx	a,@dptr
      0001F3 60 08            [24]  907 	jz	00104$
      0001F5 90 00 31         [24]  908 	mov	dptr,#0x0031
      0001F8 12r00r00         [24]  909 	lcall	_putchar
      0001FB 80 06            [24]  910 	sjmp	00134$
      0001FD                        911 00104$:
                                    912 ;	life.c:159: else putchar('0');
      0001FD 90 00 30         [24]  913 	mov	dptr,#0x0030
      000200 12r00r00         [24]  914 	lcall	_putchar
      000203                        915 00134$:
                                    916 ;	life.c:157: for (y = 0; y < H; y++)
      000203 78r15            [12]  917 	mov	r0,#_y
      000205 06               [12]  918 	inc	@r0
      000206 B6 00 02         [24]  919 	cjne	@r0,#0x00,00229$
      000209 08               [12]  920 	inc	r0
      00020A 06               [12]  921 	inc	@r0
      00020B                        922 00229$:
      00020B 78r15            [12]  923 	mov	r0,#_y
      00020D C3               [12]  924 	clr	c
      00020E E6               [12]  925 	mov	a,@r0
      00020F 94 C0            [12]  926 	subb	a,#0xc0
      000211 08               [12]  927 	inc	r0
      000212 E6               [12]  928 	mov	a,@r0
      000213 64 80            [12]  929 	xrl	a,#0x80
      000215 94 80            [12]  930 	subb	a,#0x80
      000217 40 AD            [24]  931 	jc	00133$
                                    932 ;	life.c:160: printstr("\r\n");
      000219 7Dr10            [12]  933 	mov	r5,#___str_2
      00021B 7Es00            [12]  934 	mov	r6,#(___str_2 >> 8)
      00021D 7F 80            [12]  935 	mov	r7,#0x80
                                    936 ;	life.c:73: return;
      00021F                        937 00136$:
                                    938 ;	life.c:71: for (; *s; s++) putchar(*s);
      00021F 8D 82            [24]  939 	mov	dpl,r5
      000221 8E 83            [24]  940 	mov	dph,r6
      000223 8F F0            [24]  941 	mov	b,r7
      000225 12r00r00         [24]  942 	lcall	__gptrget
      000228 FC               [12]  943 	mov	r4,a
      000229 60 10            [24]  944 	jz	00121$
      00022B 7B 00            [12]  945 	mov	r3,#0x00
      00022D 8C 82            [24]  946 	mov	dpl,r4
      00022F 8B 83            [24]  947 	mov	dph,r3
      000231 12r00r00         [24]  948 	lcall	_putchar
      000234 0D               [12]  949 	inc	r5
                                    950 ;	life.c:160: printstr("\r\n");
      000235 BD 00 E7         [24]  951 	cjne	r5,#0x00,00136$
      000238 0E               [12]  952 	inc	r6
      000239 80 E4            [24]  953 	sjmp	00136$
      00023B                        954 00121$:
                                    955 ;	life.c:156: for (x = 0; x < W; x++) {
      00023B 78r13            [12]  956 	mov	r0,#_x
      00023D 06               [12]  957 	inc	@r0
      00023E B6 00 02         [24]  958 	cjne	@r0,#0x00,00233$
      000241 08               [12]  959 	inc	r0
      000242 06               [12]  960 	inc	@r0
      000243                        961 00233$:
      000243 78r13            [12]  962 	mov	r0,#_x
      000245 C3               [12]  963 	clr	c
      000246 E6               [12]  964 	mov	a,@r0
      000247 94 30            [12]  965 	subb	a,#0x30
      000249 08               [12]  966 	inc	r0
      00024A E6               [12]  967 	mov	a,@r0
      00024B 64 80            [12]  968 	xrl	a,#0x80
      00024D 94 80            [12]  969 	subb	a,#0x80
      00024F 50 03            [24]  970 	jnc	00234$
      000251 02r01rC0         [24]  971 	ljmp	00138$
      000254                        972 00234$:
                                    973 ;	life.c:163: printstr("\033[?25h");
      000254 7Dr13            [12]  974 	mov	r5,#___str_3
      000256 7Es00            [12]  975 	mov	r6,#(___str_3 >> 8)
      000258 7F 80            [12]  976 	mov	r7,#0x80
                                    977 ;	life.c:73: return;
      00025A                        978 00141$:
                                    979 ;	life.c:71: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  980 	mov	dpl,r5
      00025C 8E 83            [24]  981 	mov	dph,r6
      00025E 8F F0            [24]  982 	mov	b,r7
      000260 12r00r00         [24]  983 	lcall	__gptrget
      000263 FC               [12]  984 	mov	r4,a
      000264 60 10            [24]  985 	jz	00123$
      000266 7B 00            [12]  986 	mov	r3,#0x00
      000268 8C 82            [24]  987 	mov	dpl,r4
      00026A 8B 83            [24]  988 	mov	dph,r3
      00026C 12r00r00         [24]  989 	lcall	_putchar
      00026F 0D               [12]  990 	inc	r5
                                    991 ;	life.c:163: printstr("\033[?25h");
      000270 BD 00 E7         [24]  992 	cjne	r5,#0x00,00141$
      000273 0E               [12]  993 	inc	r6
      000274 80 E4            [24]  994 	sjmp	00141$
      000276                        995 00123$:
                                    996 ;	life.c:165: return;
                                    997 ;	life.c:166: }
      000276 22               [24]  998 	ret
                                    999 ;------------------------------------------------------------
                                   1000 ;Allocation info for local variables in function 'main'
                                   1001 ;------------------------------------------------------------
                                   1002 ;__1310720027              Allocated to registers 
                                   1003 ;s                         Allocated to registers r5 r6 r7 
                                   1004 ;__2621440029              Allocated to registers 
                                   1005 ;s                         Allocated to registers r5 r6 r7 
                                   1006 ;__1310720017              Allocated to registers 
                                   1007 ;s                         Allocated to registers r5 r6 r7 
                                   1008 ;__1310720019              Allocated to registers r6 r7 
                                   1009 ;a                         Allocated to registers r4 r5 
                                   1010 ;__1310720021              Allocated to registers 
                                   1011 ;s                         Allocated to registers r5 r6 r7 
                                   1012 ;__1310720023              Allocated to registers 
                                   1013 ;s                         Allocated to registers r5 r6 r7 
                                   1014 ;__1310720025              Allocated to registers 
                                   1015 ;s                         Allocated to registers r5 r6 r7 
                                   1016 ;__2621440034              Allocated to registers 
                                   1017 ;s                         Allocated to registers r5 r6 r7 
                                   1018 ;__4587520038              Allocated to registers 
                                   1019 ;s                         Allocated to registers r5 r6 r7 
                                   1020 ;__4587520040              Allocated to registers 
                                   1021 ;s                         Allocated to registers r5 r6 r7 
                                   1022 ;__4587520042              Allocated to registers 
                                   1023 ;s                         Allocated to registers r5 r6 r7 
                                   1024 ;__3276800044              Allocated to registers 
                                   1025 ;s                         Allocated to registers r5 r6 r7 
                                   1026 ;__1310720046              Allocated to registers 
                                   1027 ;s                         Allocated to registers r5 r6 r7 
                                   1028 ;sloc0                     Allocated to stack - _bp +1
                                   1029 ;sloc1                     Allocated to stack - _bp +2
                                   1030 ;sloc2                     Allocated to stack - _bp +4
                                   1031 ;sloc3                     Allocated to stack - _bp +6
                                   1032 ;sloc4                     Allocated to stack - _bp +8
                                   1033 ;sloc5                     Allocated to stack - _bp +10
                                   1034 ;sloc6                     Allocated to stack - _bp +12
                                   1035 ;------------------------------------------------------------
                                   1036 ;	life.c:277: void main(void) {
                                   1037 ;	-----------------------------------------
                                   1038 ;	 function main
                                   1039 ;	-----------------------------------------
      000277                       1040 _main:
      000277 C0*00            [24] 1041 	push	_bp
      000279 E5 81            [12] 1042 	mov	a,sp
      00027B F5*00            [12] 1043 	mov	_bp,a
      00027D 24 0D            [12] 1044 	add	a,#0x0d
      00027F F5 81            [12] 1045 	mov	sp,a
                                   1046 ;	life.c:278: IT0 = 1;
                                   1047 ;	assignBit
      000281 D2 88            [12] 1048 	setb	_IT0
                                   1049 ;	life.c:279: IT1 = 1;
                                   1050 ;	assignBit
      000283 D2 8A            [12] 1051 	setb	_IT1
                                   1052 ;	life.c:280: EX0 = 1;
                                   1053 ;	assignBit
      000285 D2 A8            [12] 1054 	setb	_EX0
                                   1055 ;	life.c:281: EX1 = 1;
                                   1056 ;	assignBit
      000287 D2 AA            [12] 1057 	setb	_EX1
                                   1058 ;	life.c:282: EA = 1;	
                                   1059 ;	assignBit
      000289 D2 AF            [12] 1060 	setb	_EA
                                   1061 ;	life.c:283: P1_7 = 1;
                                   1062 ;	assignBit
      00028B D2 97            [12] 1063 	setb	_P1_7
                                   1064 ;	life.c:288: __endasm;
      00028D 00               [12] 1065 	nop
      00028E 00               [12] 1066 	nop
      00028F 00               [12] 1067 	nop
                                   1068 ;	life.c:290: srand(RND);
      000290 90 80 00         [24] 1069 	mov	dptr,#_RND
      000293 E0               [24] 1070 	movx	a,@dptr
      000294 FE               [12] 1071 	mov	r6,a
      000295 A3               [24] 1072 	inc	dptr
      000296 E0               [24] 1073 	movx	a,@dptr
      000297 FF               [12] 1074 	mov	r7,a
      000298 8E 82            [24] 1075 	mov	dpl,r6
      00029A 8F 83            [24] 1076 	mov	dph,r7
      00029C 12r00r00         [24] 1077 	lcall	_srand
                                   1078 ;	life.c:292: OE76 = OE76_0;
      00029F 78r12            [12] 1079 	mov	r0,#_OE76
      0002A1 76 3F            [12] 1080 	mov	@r0,#0x3f
                                   1081 ;	life.c:293: flashOE();
      0002A3 12r00r48         [24] 1082 	lcall	_flashOE
                                   1083 ;	life.c:295: printstr("\033[?25h\033[m");
      0002A6 7Dr34            [12] 1084 	mov	r5,#___str_7
      0002A8 7Es00            [12] 1085 	mov	r6,#(___str_7 >> 8)
      0002AA 7F 80            [12] 1086 	mov	r7,#0x80
                                   1087 ;	life.c:73: return;
      0002AC                       1088 00211$:
                                   1089 ;	life.c:71: for (; *s; s++) putchar(*s);
      0002AC 8D 82            [24] 1090 	mov	dpl,r5
      0002AE 8E 83            [24] 1091 	mov	dph,r6
      0002B0 8F F0            [24] 1092 	mov	b,r7
      0002B2 12r00r00         [24] 1093 	lcall	__gptrget
      0002B5 FC               [12] 1094 	mov	r4,a
      0002B6 60 10            [24] 1095 	jz	00151$
      0002B8 7B 00            [12] 1096 	mov	r3,#0x00
      0002BA 8C 82            [24] 1097 	mov	dpl,r4
      0002BC 8B 83            [24] 1098 	mov	dph,r3
      0002BE 12r00r00         [24] 1099 	lcall	_putchar
      0002C1 0D               [12] 1100 	inc	r5
                                   1101 ;	life.c:295: printstr("\033[?25h\033[m");
      0002C2 BD 00 E7         [24] 1102 	cjne	r5,#0x00,00211$
      0002C5 0E               [12] 1103 	inc	r6
      0002C6 80 E4            [24] 1104 	sjmp	00211$
      0002C8                       1105 00151$:
                                   1106 ;	life.c:297: for (i0 = 0; !i0; ) {	
      0002C8 78r10            [12] 1107 	mov	r0,#_i0
      0002CA 76 00            [12] 1108 	mov	@r0,#0x00
      0002CC                       1109 00258$:
                                   1110 ;	life.c:298: printstr("LIFE INIT T L R P\r\n");
      0002CC 7Dr3E            [12] 1111 	mov	r5,#___str_8
      0002CE 7Es00            [12] 1112 	mov	r6,#(___str_8 >> 8)
      0002D0 7F 80            [12] 1113 	mov	r7,#0x80
                                   1114 ;	life.c:73: return;
      0002D2                       1115 00214$:
                                   1116 ;	life.c:71: for (; *s; s++) putchar(*s);
      0002D2 8D 82            [24] 1117 	mov	dpl,r5
      0002D4 8E 83            [24] 1118 	mov	dph,r6
      0002D6 8F F0            [24] 1119 	mov	b,r7
      0002D8 12r00r00         [24] 1120 	lcall	__gptrget
      0002DB FC               [12] 1121 	mov	r4,a
      0002DC 60 10            [24] 1122 	jz	00110$
      0002DE 7B 00            [12] 1123 	mov	r3,#0x00
      0002E0 8C 82            [24] 1124 	mov	dpl,r4
      0002E2 8B 83            [24] 1125 	mov	dph,r3
      0002E4 12r00r00         [24] 1126 	lcall	_putchar
      0002E7 0D               [12] 1127 	inc	r5
                                   1128 ;	life.c:299: while (1) {
      0002E8 BD 00 E7         [24] 1129 	cjne	r5,#0x00,00214$
      0002EB 0E               [12] 1130 	inc	r6
      0002EC 80 E4            [24] 1131 	sjmp	00214$
      0002EE                       1132 00110$:
                                   1133 ;	life.c:300: c = toupper(getchar());
      0002EE 12r00r09         [24] 1134 	lcall	_getchar
      0002F1 12r00r00         [24] 1135 	lcall	_toupper
      0002F4 AE 82            [24] 1136 	mov	r6,dpl
      0002F6 AF 83            [24] 1137 	mov	r7,dph
      0002F8 78r19            [12] 1138 	mov	r0,#_c
      0002FA A6 06            [24] 1139 	mov	@r0,ar6
      0002FC 08               [12] 1140 	inc	r0
      0002FD A6 07            [24] 1141 	mov	@r0,ar7
                                   1142 ;	life.c:301: if (i0 || (c == (int)'T')) goto term;
      0002FF 78r10            [12] 1143 	mov	r0,#_i0
      000301 E6               [12] 1144 	mov	a,@r0
      000302 60 03            [24] 1145 	jz	00551$
      000304 02r0Br85         [24] 1146 	ljmp	00149$
      000307                       1147 00551$:
      000307 BE 54 06         [24] 1148 	cjne	r6,#0x54,00552$
      00030A BF 00 03         [24] 1149 	cjne	r7,#0x00,00552$
      00030D 02r0Br85         [24] 1150 	ljmp	00149$
      000310                       1151 00552$:
                                   1152 ;	life.c:302: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      000310 BE 4C 05         [24] 1153 	cjne	r6,#0x4c,00553$
      000313 BF 00 02         [24] 1154 	cjne	r7,#0x00,00553$
      000316 80 0E            [24] 1155 	sjmp	00305$
      000318                       1156 00553$:
      000318 BE 52 05         [24] 1157 	cjne	r6,#0x52,00554$
      00031B BF 00 02         [24] 1158 	cjne	r7,#0x00,00554$
      00031E 80 06            [24] 1159 	sjmp	00305$
      000320                       1160 00554$:
      000320 BE 50 CB         [24] 1161 	cjne	r6,#0x50,00110$
      000323 BF 00 C8         [24] 1162 	cjne	r7,#0x00,00110$
                                   1163 ;	life.c:305: reload:
      000326                       1164 00305$:
      000326                       1165 00112$:
                                   1166 ;	life.c:169: memset(u, 0, sizeof (u));
      000326 E4               [12] 1167 	clr	a
      000327 C0 E0            [24] 1168 	push	acc
      000329 74 24            [12] 1169 	mov	a,#0x24
      00032B C0 E0            [24] 1170 	push	acc
      00032D E4               [12] 1171 	clr	a
      00032E C0 E0            [24] 1172 	push	acc
      000330 90r48r00         [24] 1173 	mov	dptr,#_u
      000333 75 F0 00         [24] 1174 	mov	b,#0x00
      000336 12r00r00         [24] 1175 	lcall	_memset
      000339 15 81            [12] 1176 	dec	sp
      00033B 15 81            [12] 1177 	dec	sp
      00033D 15 81            [12] 1178 	dec	sp
                                   1179 ;	life.c:170: memset(pu, 0, sizeof (pu));
      00033F E4               [12] 1180 	clr	a
      000340 C0 E0            [24] 1181 	push	acc
      000342 74 24            [12] 1182 	mov	a,#0x24
      000344 C0 E0            [24] 1183 	push	acc
      000346 E4               [12] 1184 	clr	a
      000347 C0 E0            [24] 1185 	push	acc
      000349 90r24r00         [24] 1186 	mov	dptr,#_pu
      00034C 75 F0 00         [24] 1187 	mov	b,#0x00
      00034F 12r00r00         [24] 1188 	lcall	_memset
      000352 15 81            [12] 1189 	dec	sp
      000354 15 81            [12] 1190 	dec	sp
      000356 15 81            [12] 1191 	dec	sp
                                   1192 ;	life.c:307: if (c == (int)'L') loadiu();
      000358 78r19            [12] 1193 	mov	r0,#_c
      00035A B6 4C 06         [24] 1194 	cjne	@r0,#0x4c,00557$
      00035D 08               [12] 1195 	inc	r0
      00035E B6 00 02         [24] 1196 	cjne	@r0,#0x00,00557$
      000361 80 03            [24] 1197 	sjmp	00558$
      000363                       1198 00557$:
      000363 02r04rDE         [24] 1199 	ljmp	00116$
      000366                       1200 00558$:
                                   1201 ;	life.c:176: j = 0;
      000366 78r17            [12] 1202 	mov	r0,#_j
      000368 E4               [12] 1203 	clr	a
      000369 F6               [12] 1204 	mov	@r0,a
      00036A 08               [12] 1205 	inc	r0
      00036B F6               [12] 1206 	mov	@r0,a
                                   1207 ;	life.c:178: printstr("LOAD 0 1 ~ # <");
      00036C 7Dr1A            [12] 1208 	mov	r5,#___str_4
      00036E 7Es00            [12] 1209 	mov	r6,#(___str_4 >> 8)
      000370 7F 80            [12] 1210 	mov	r7,#0x80
                                   1211 ;	life.c:73: return;
      000372                       1212 00217$:
                                   1213 ;	life.c:71: for (; *s; s++) putchar(*s);
      000372 8D 82            [24] 1214 	mov	dpl,r5
      000374 8E 83            [24] 1215 	mov	dph,r6
      000376 8F F0            [24] 1216 	mov	b,r7
      000378 12r00r00         [24] 1217 	lcall	__gptrget
      00037B FC               [12] 1218 	mov	r4,a
      00037C 60 10            [24] 1219 	jz	00156$
      00037E 7B 00            [12] 1220 	mov	r3,#0x00
      000380 8C 82            [24] 1221 	mov	dpl,r4
      000382 8B 83            [24] 1222 	mov	dph,r3
      000384 12r00r00         [24] 1223 	lcall	_putchar
      000387 0D               [12] 1224 	inc	r5
                                   1225 ;	life.c:178: printstr("LOAD 0 1 ~ # <");
      000388 BD 00 E7         [24] 1226 	cjne	r5,#0x00,00217$
      00038B 0E               [12] 1227 	inc	r6
      00038C 80 E4            [24] 1228 	sjmp	00217$
      00038E                       1229 00156$:
                                   1230 ;	life.c:180: for (y = 0; y < (H * W); y += W) {
      00038E 78r15            [12] 1231 	mov	r0,#_y
      000390 E4               [12] 1232 	clr	a
      000391 F6               [12] 1233 	mov	@r0,a
      000392 08               [12] 1234 	inc	r0
      000393 F6               [12] 1235 	mov	@r0,a
      000394                       1236 00220$:
                                   1237 ;	life.c:181: for (x = 0; x < W; x++) {
      000394 78r13            [12] 1238 	mov	r0,#_x
      000396 E4               [12] 1239 	clr	a
      000397 F6               [12] 1240 	mov	@r0,a
      000398 08               [12] 1241 	inc	r0
      000399 F6               [12] 1242 	mov	@r0,a
                                   1243 ;	life.c:182: while (1) {
      00039A                       1244 00169$:
                                   1245 ;	life.c:183: c = getchar();
      00039A 12r00r09         [24] 1246 	lcall	_getchar
      00039D AE 82            [24] 1247 	mov	r6,dpl
      00039F AF 83            [24] 1248 	mov	r7,dph
      0003A1 78r19            [12] 1249 	mov	r0,#_c
      0003A3 A6 06            [24] 1250 	mov	@r0,ar6
      0003A5 08               [12] 1251 	inc	r0
      0003A6 A6 07            [24] 1252 	mov	@r0,ar7
                                   1253 ;	life.c:184: if (c == (int)'0') {
      0003A8 BE 30 25         [24] 1254 	cjne	r6,#0x30,00167$
      0003AB BF 00 22         [24] 1255 	cjne	r7,#0x00,00167$
                                   1256 ;	life.c:185: iu[y + x] = 0;
      0003AE 78r15            [12] 1257 	mov	r0,#_y
      0003B0 79r13            [12] 1258 	mov	r1,#_x
      0003B2 E7               [12] 1259 	mov	a,@r1
      0003B3 26               [12] 1260 	add	a,@r0
      0003B4 FC               [12] 1261 	mov	r4,a
      0003B5 09               [12] 1262 	inc	r1
      0003B6 E7               [12] 1263 	mov	a,@r1
      0003B7 08               [12] 1264 	inc	r0
      0003B8 36               [12] 1265 	addc	a,@r0
      0003B9 FD               [12] 1266 	mov	r5,a
      0003BA EC               [12] 1267 	mov	a,r4
      0003BB 24r00            [12] 1268 	add	a,#_iu
      0003BD F5 82            [12] 1269 	mov	dpl,a
      0003BF ED               [12] 1270 	mov	a,r5
      0003C0 34s00            [12] 1271 	addc	a,#(_iu >> 8)
      0003C2 F5 83            [12] 1272 	mov	dph,a
      0003C4 E4               [12] 1273 	clr	a
      0003C5 F0               [24] 1274 	movx	@dptr,a
                                   1275 ;	life.c:186: j++;
      0003C6 78r17            [12] 1276 	mov	r0,#_j
      0003C8 06               [12] 1277 	inc	@r0
      0003C9 B6 00 02         [24] 1278 	cjne	@r0,#0x00,00563$
      0003CC 08               [12] 1279 	inc	r0
      0003CD 06               [12] 1280 	inc	@r0
      0003CE                       1281 00563$:
                                   1282 ;	life.c:187: break;
      0003CE 80 39            [24] 1283 	sjmp	00172$
      0003D0                       1284 00167$:
                                   1285 ;	life.c:188: } else if (c == (int)'1') {
      0003D0 BE 31 26         [24] 1286 	cjne	r6,#0x31,00165$
      0003D3 BF 00 23         [24] 1287 	cjne	r7,#0x00,00165$
                                   1288 ;	life.c:189: iu[y + x] = 1;
      0003D6 78r15            [12] 1289 	mov	r0,#_y
      0003D8 79r13            [12] 1290 	mov	r1,#_x
      0003DA E7               [12] 1291 	mov	a,@r1
      0003DB 26               [12] 1292 	add	a,@r0
      0003DC FC               [12] 1293 	mov	r4,a
      0003DD 09               [12] 1294 	inc	r1
      0003DE E7               [12] 1295 	mov	a,@r1
      0003DF 08               [12] 1296 	inc	r0
      0003E0 36               [12] 1297 	addc	a,@r0
      0003E1 FD               [12] 1298 	mov	r5,a
      0003E2 EC               [12] 1299 	mov	a,r4
      0003E3 24r00            [12] 1300 	add	a,#_iu
      0003E5 F5 82            [12] 1301 	mov	dpl,a
      0003E7 ED               [12] 1302 	mov	a,r5
      0003E8 34s00            [12] 1303 	addc	a,#(_iu >> 8)
      0003EA F5 83            [12] 1304 	mov	dph,a
      0003EC 74 01            [12] 1305 	mov	a,#0x01
      0003EE F0               [24] 1306 	movx	@dptr,a
                                   1307 ;	life.c:190: j++;
      0003EF 78r17            [12] 1308 	mov	r0,#_j
      0003F1 06               [12] 1309 	inc	@r0
      0003F2 B6 00 02         [24] 1310 	cjne	@r0,#0x00,00566$
      0003F5 08               [12] 1311 	inc	r0
      0003F6 06               [12] 1312 	inc	@r0
      0003F7                       1313 00566$:
                                   1314 ;	life.c:191: break;
      0003F7 80 10            [24] 1315 	sjmp	00172$
      0003F9                       1316 00165$:
                                   1317 ;	life.c:192: } else if (c == (int)'~') goto br_inner;
      0003F9 BE 7E 05         [24] 1318 	cjne	r6,#0x7e,00567$
      0003FC BF 00 02         [24] 1319 	cjne	r7,#0x00,00567$
      0003FF 80 21            [24] 1320 	sjmp	00221$
      000401                       1321 00567$:
                                   1322 ;	life.c:193: else if (c == (int)'#') goto out;
                                   1323 ;	life.c:197: break;
      000401 BE 23 96         [24] 1324 	cjne	r6,#0x23,00169$
      000404 BF 00 93         [24] 1325 	cjne	r7,#0x00,00169$
      000407 80 31            [24] 1326 	sjmp	00182$
      000409                       1327 00172$:
                                   1328 ;	life.c:181: for (x = 0; x < W; x++) {
      000409 78r13            [12] 1329 	mov	r0,#_x
      00040B 06               [12] 1330 	inc	@r0
      00040C B6 00 02         [24] 1331 	cjne	@r0,#0x00,00569$
      00040F 08               [12] 1332 	inc	r0
      000410 06               [12] 1333 	inc	@r0
      000411                       1334 00569$:
      000411 78r13            [12] 1335 	mov	r0,#_x
      000413 C3               [12] 1336 	clr	c
      000414 E6               [12] 1337 	mov	a,@r0
      000415 94 30            [12] 1338 	subb	a,#0x30
      000417 08               [12] 1339 	inc	r0
      000418 E6               [12] 1340 	mov	a,@r0
      000419 64 80            [12] 1341 	xrl	a,#0x80
      00041B 94 80            [12] 1342 	subb	a,#0x80
      00041D 50 03            [24] 1343 	jnc	00570$
      00041F 02r03r9A         [24] 1344 	ljmp	00169$
      000422                       1345 00570$:
      000422                       1346 00221$:
                                   1347 ;	life.c:180: for (y = 0; y < (H * W); y += W) {
      000422 78r15            [12] 1348 	mov	r0,#_y
      000424 74 30            [12] 1349 	mov	a,#0x30
      000426 26               [12] 1350 	add	a,@r0
      000427 F6               [12] 1351 	mov	@r0,a
      000428 E4               [12] 1352 	clr	a
      000429 08               [12] 1353 	inc	r0
      00042A 36               [12] 1354 	addc	a,@r0
      00042B F6               [12] 1355 	mov	@r0,a
      00042C 78r15            [12] 1356 	mov	r0,#_y
      00042E C3               [12] 1357 	clr	c
      00042F 08               [12] 1358 	inc	r0
      000430 E6               [12] 1359 	mov	a,@r0
      000431 64 80            [12] 1360 	xrl	a,#0x80
      000433 94 A4            [12] 1361 	subb	a,#0xa4
      000435 50 03            [24] 1362 	jnc	00571$
      000437 02r03r94         [24] 1363 	ljmp	00220$
      00043A                       1364 00571$:
                                   1365 ;	life.c:201: out:
      00043A                       1366 00182$:
                                   1367 ;	life.c:202: if (c != (int)'#')
      00043A BE 23 05         [24] 1368 	cjne	r6,#0x23,00572$
      00043D BF 00 02         [24] 1369 	cjne	r7,#0x00,00572$
      000440 80 14            [24] 1370 	sjmp	00181$
      000442                       1371 00572$:
                                   1372 ;	life.c:203: while (1) {
      000442                       1373 00178$:
                                   1374 ;	life.c:204: c = getchar();
      000442 12r00r09         [24] 1375 	lcall	_getchar
      000445 AE 82            [24] 1376 	mov	r6,dpl
      000447 AF 83            [24] 1377 	mov	r7,dph
      000449 78r19            [12] 1378 	mov	r0,#_c
      00044B A6 06            [24] 1379 	mov	@r0,ar6
      00044D 08               [12] 1380 	inc	r0
      00044E A6 07            [24] 1381 	mov	@r0,ar7
                                   1382 ;	life.c:205: if (c == (int)'#') break;
      000450 BE 23 EF         [24] 1383 	cjne	r6,#0x23,00178$
      000453 BF 00 EC         [24] 1384 	cjne	r7,#0x00,00178$
      000456                       1385 00181$:
                                   1386 ;	life.c:207: print16x(j);
      000456 78r17            [12] 1387 	mov	r0,#_j
      000458 86 06            [24] 1388 	mov	ar6,@r0
      00045A 08               [12] 1389 	inc	r0
      00045B 86 07            [24] 1390 	mov	ar7,@r0
      00045D 8E 04            [24] 1391 	mov	ar4,r6
                                   1392 ;	life.c:62: putchar(digits[(a >> 12) & 0xf]);
      00045F EF               [12] 1393 	mov	a,r7
      000460 FD               [12] 1394 	mov	r5,a
      000461 C4               [12] 1395 	swap	a
      000462 54 0F            [12] 1396 	anl	a,#(0x0f&0x0f)
      000464 24r00            [12] 1397 	add	a,#_digits
      000466 F9               [12] 1398 	mov	r1,a
      000467 87 07            [24] 1399 	mov	ar7,@r1
      000469 7E 00            [12] 1400 	mov	r6,#0x00
      00046B 8F 82            [24] 1401 	mov	dpl,r7
      00046D 8E 83            [24] 1402 	mov	dph,r6
      00046F 12r00r00         [24] 1403 	lcall	_putchar
                                   1404 ;	life.c:63: putchar(digits[(a >> 8) & 0xf]);
      000472 8D 07            [24] 1405 	mov	ar7,r5
      000474 53 07 0F         [24] 1406 	anl	ar7,#0x0f
      000477 EF               [12] 1407 	mov	a,r7
      000478 24r00            [12] 1408 	add	a,#_digits
      00047A F9               [12] 1409 	mov	r1,a
      00047B 87 07            [24] 1410 	mov	ar7,@r1
      00047D 7E 00            [12] 1411 	mov	r6,#0x00
      00047F 8F 82            [24] 1412 	mov	dpl,r7
      000481 8E 83            [24] 1413 	mov	dph,r6
      000483 12r00r00         [24] 1414 	lcall	_putchar
                                   1415 ;	life.c:64: putchar(digits[(a >> 4) & 0xf]);
      000486 8C 06            [24] 1416 	mov	ar6,r4
      000488 ED               [12] 1417 	mov	a,r5
      000489 C4               [12] 1418 	swap	a
      00048A CE               [12] 1419 	xch	a,r6
      00048B C4               [12] 1420 	swap	a
      00048C 54 0F            [12] 1421 	anl	a,#0x0f
      00048E 6E               [12] 1422 	xrl	a,r6
      00048F CE               [12] 1423 	xch	a,r6
      000490 54 0F            [12] 1424 	anl	a,#0x0f
      000492 CE               [12] 1425 	xch	a,r6
      000493 6E               [12] 1426 	xrl	a,r6
      000494 CE               [12] 1427 	xch	a,r6
      000495 53 06 0F         [24] 1428 	anl	ar6,#0x0f
      000498 EE               [12] 1429 	mov	a,r6
      000499 24r00            [12] 1430 	add	a,#_digits
      00049B F9               [12] 1431 	mov	r1,a
      00049C 87 07            [24] 1432 	mov	ar7,@r1
      00049E 7E 00            [12] 1433 	mov	r6,#0x00
      0004A0 8F 82            [24] 1434 	mov	dpl,r7
      0004A2 8E 83            [24] 1435 	mov	dph,r6
      0004A4 12r00r00         [24] 1436 	lcall	_putchar
                                   1437 ;	life.c:65: putchar(digits[a & 0xf]);
      0004A7 53 04 0F         [24] 1438 	anl	ar4,#0x0f
      0004AA EC               [12] 1439 	mov	a,r4
      0004AB 24r00            [12] 1440 	add	a,#_digits
      0004AD F9               [12] 1441 	mov	r1,a
      0004AE 87 07            [24] 1442 	mov	ar7,@r1
      0004B0 7E 00            [12] 1443 	mov	r6,#0x00
      0004B2 8F 82            [24] 1444 	mov	dpl,r7
      0004B4 8E 83            [24] 1445 	mov	dph,r6
      0004B6 12r00r00         [24] 1446 	lcall	_putchar
                                   1447 ;	life.c:208: printstr(">\r\n");
      0004B9 7Dr29            [12] 1448 	mov	r5,#___str_5
      0004BB 7Es00            [12] 1449 	mov	r6,#(___str_5 >> 8)
      0004BD 7F 80            [12] 1450 	mov	r7,#0x80
                                   1451 ;	life.c:73: return;
      0004BF                       1452 00223$:
                                   1453 ;	life.c:71: for (; *s; s++) putchar(*s);
      0004BF 8D 82            [24] 1454 	mov	dpl,r5
      0004C1 8E 83            [24] 1455 	mov	dph,r6
      0004C3 8F F0            [24] 1456 	mov	b,r7
      0004C5 12r00r00         [24] 1457 	lcall	__gptrget
      0004C8 FC               [12] 1458 	mov	r4,a
      0004C9 70 03            [24] 1459 	jnz	00575$
      0004CB 02r05r97         [24] 1460 	ljmp	00117$
      0004CE                       1461 00575$:
      0004CE 7B 00            [12] 1462 	mov	r3,#0x00
      0004D0 8C 82            [24] 1463 	mov	dpl,r4
      0004D2 8B 83            [24] 1464 	mov	dph,r3
      0004D4 12r00r00         [24] 1465 	lcall	_putchar
      0004D7 0D               [12] 1466 	inc	r5
                                   1467 ;	life.c:307: if (c == (int)'L') loadiu();
      0004D8 BD 00 E4         [24] 1468 	cjne	r5,#0x00,00223$
      0004DB 0E               [12] 1469 	inc	r6
      0004DC 80 E1            [24] 1470 	sjmp	00223$
      0004DE                       1471 00116$:
                                   1472 ;	life.c:308: else if (c == (int)'R') loadriu();
      0004DE 78r19            [12] 1473 	mov	r0,#_c
      0004E0 B6 52 06         [24] 1474 	cjne	@r0,#0x52,00577$
      0004E3 08               [12] 1475 	inc	r0
      0004E4 B6 00 02         [24] 1476 	cjne	@r0,#0x00,00577$
      0004E7 80 03            [24] 1477 	sjmp	00578$
      0004E9                       1478 00577$:
      0004E9 02r05r97         [24] 1479 	ljmp	00117$
      0004EC                       1480 00578$:
                                   1481 ;	life.c:214: j = 0;
      0004EC 78r17            [12] 1482 	mov	r0,#_j
      0004EE E4               [12] 1483 	clr	a
      0004EF F6               [12] 1484 	mov	@r0,a
      0004F0 08               [12] 1485 	inc	r0
      0004F1 F6               [12] 1486 	mov	@r0,a
                                   1487 ;	life.c:216: printstr("RANDOM");
      0004F2 7Dr2D            [12] 1488 	mov	r5,#___str_6
      0004F4 7Es00            [12] 1489 	mov	r6,#(___str_6 >> 8)
      0004F6 7F 80            [12] 1490 	mov	r7,#0x80
                                   1491 ;	life.c:73: return;
      0004F8                       1492 00226$:
                                   1493 ;	life.c:71: for (; *s; s++) putchar(*s);
      0004F8 8D 82            [24] 1494 	mov	dpl,r5
      0004FA 8E 83            [24] 1495 	mov	dph,r6
      0004FC 8F F0            [24] 1496 	mov	b,r7
      0004FE 12r00r00         [24] 1497 	lcall	__gptrget
      000501 FC               [12] 1498 	mov	r4,a
      000502 60 10            [24] 1499 	jz	00188$
      000504 7B 00            [12] 1500 	mov	r3,#0x00
      000506 8C 82            [24] 1501 	mov	dpl,r4
      000508 8B 83            [24] 1502 	mov	dph,r3
      00050A 12r00r00         [24] 1503 	lcall	_putchar
      00050D 0D               [12] 1504 	inc	r5
                                   1505 ;	life.c:216: printstr("RANDOM");
      00050E BD 00 E7         [24] 1506 	cjne	r5,#0x00,00226$
      000511 0E               [12] 1507 	inc	r6
      000512 80 E4            [24] 1508 	sjmp	00226$
      000514                       1509 00188$:
                                   1510 ;	life.c:218: for (y = 0; y < (H * W); y += W)
      000514 78r15            [12] 1511 	mov	r0,#_y
      000516 E4               [12] 1512 	clr	a
      000517 F6               [12] 1513 	mov	@r0,a
      000518 08               [12] 1514 	inc	r0
      000519 F6               [12] 1515 	mov	@r0,a
      00051A                       1516 00230$:
                                   1517 ;	life.c:219: for (x = 0; x < W; x++)
      00051A 78r13            [12] 1518 	mov	r0,#_x
      00051C E4               [12] 1519 	clr	a
      00051D F6               [12] 1520 	mov	@r0,a
      00051E 08               [12] 1521 	inc	r0
      00051F F6               [12] 1522 	mov	@r0,a
      000520                       1523 00228$:
                                   1524 ;	life.c:220: iu[y + x] = rand() & 1;
      000520 78r15            [12] 1525 	mov	r0,#_y
      000522 79r13            [12] 1526 	mov	r1,#_x
      000524 E7               [12] 1527 	mov	a,@r1
      000525 26               [12] 1528 	add	a,@r0
      000526 FE               [12] 1529 	mov	r6,a
      000527 09               [12] 1530 	inc	r1
      000528 E7               [12] 1531 	mov	a,@r1
      000529 08               [12] 1532 	inc	r0
      00052A 36               [12] 1533 	addc	a,@r0
      00052B FF               [12] 1534 	mov	r7,a
      00052C EE               [12] 1535 	mov	a,r6
      00052D 24r00            [12] 1536 	add	a,#_iu
      00052F FE               [12] 1537 	mov	r6,a
      000530 EF               [12] 1538 	mov	a,r7
      000531 34s00            [12] 1539 	addc	a,#(_iu >> 8)
      000533 FF               [12] 1540 	mov	r7,a
      000534 C0 07            [24] 1541 	push	ar7
      000536 C0 06            [24] 1542 	push	ar6
      000538 12r00r00         [24] 1543 	lcall	_rand
      00053B AC 82            [24] 1544 	mov	r4,dpl
      00053D D0 06            [24] 1545 	pop	ar6
      00053F D0 07            [24] 1546 	pop	ar7
      000541 53 04 01         [24] 1547 	anl	ar4,#0x01
      000544 8E 82            [24] 1548 	mov	dpl,r6
      000546 8F 83            [24] 1549 	mov	dph,r7
      000548 EC               [12] 1550 	mov	a,r4
      000549 F0               [24] 1551 	movx	@dptr,a
                                   1552 ;	life.c:219: for (x = 0; x < W; x++)
      00054A 78r13            [12] 1553 	mov	r0,#_x
      00054C 06               [12] 1554 	inc	@r0
      00054D B6 00 02         [24] 1555 	cjne	@r0,#0x00,00581$
      000550 08               [12] 1556 	inc	r0
      000551 06               [12] 1557 	inc	@r0
      000552                       1558 00581$:
      000552 78r13            [12] 1559 	mov	r0,#_x
      000554 C3               [12] 1560 	clr	c
      000555 E6               [12] 1561 	mov	a,@r0
      000556 94 30            [12] 1562 	subb	a,#0x30
      000558 08               [12] 1563 	inc	r0
      000559 E6               [12] 1564 	mov	a,@r0
      00055A 64 80            [12] 1565 	xrl	a,#0x80
      00055C 94 80            [12] 1566 	subb	a,#0x80
      00055E 40 C0            [24] 1567 	jc	00228$
                                   1568 ;	life.c:218: for (y = 0; y < (H * W); y += W)
      000560 78r15            [12] 1569 	mov	r0,#_y
      000562 74 30            [12] 1570 	mov	a,#0x30
      000564 26               [12] 1571 	add	a,@r0
      000565 F6               [12] 1572 	mov	@r0,a
      000566 E4               [12] 1573 	clr	a
      000567 08               [12] 1574 	inc	r0
      000568 36               [12] 1575 	addc	a,@r0
      000569 F6               [12] 1576 	mov	@r0,a
      00056A 78r15            [12] 1577 	mov	r0,#_y
      00056C C3               [12] 1578 	clr	c
      00056D 08               [12] 1579 	inc	r0
      00056E E6               [12] 1580 	mov	a,@r0
      00056F 64 80            [12] 1581 	xrl	a,#0x80
      000571 94 A4            [12] 1582 	subb	a,#0xa4
      000573 40 A5            [24] 1583 	jc	00230$
                                   1584 ;	life.c:222: printstr("\r\n");
      000575 7Dr10            [12] 1585 	mov	r5,#___str_2
      000577 7Es00            [12] 1586 	mov	r6,#(___str_2 >> 8)
      000579 7F 80            [12] 1587 	mov	r7,#0x80
                                   1588 ;	life.c:73: return;
      00057B                       1589 00233$:
                                   1590 ;	life.c:71: for (; *s; s++) putchar(*s);
      00057B 8D 82            [24] 1591 	mov	dpl,r5
      00057D 8E 83            [24] 1592 	mov	dph,r6
      00057F 8F F0            [24] 1593 	mov	b,r7
      000581 12r00r00         [24] 1594 	lcall	__gptrget
      000584 FC               [12] 1595 	mov	r4,a
      000585 60 10            [24] 1596 	jz	00117$
      000587 7B 00            [12] 1597 	mov	r3,#0x00
      000589 8C 82            [24] 1598 	mov	dpl,r4
      00058B 8B 83            [24] 1599 	mov	dph,r3
      00058D 12r00r00         [24] 1600 	lcall	_putchar
      000590 0D               [12] 1601 	inc	r5
                                   1602 ;	life.c:308: else if (c == (int)'R') loadriu();
      000591 BD 00 E7         [24] 1603 	cjne	r5,#0x00,00233$
      000594 0E               [12] 1604 	inc	r6
      000595 80 E4            [24] 1605 	sjmp	00233$
      000597                       1606 00117$:
                                   1607 ;	life.c:309: memcpy(u, iu, sizeof (iu));
      000597 E4               [12] 1608 	clr	a
      000598 C0 E0            [24] 1609 	push	acc
      00059A 74 24            [12] 1610 	mov	a,#0x24
      00059C C0 E0            [24] 1611 	push	acc
      00059E 74r00            [12] 1612 	mov	a,#_iu
      0005A0 C0 E0            [24] 1613 	push	acc
      0005A2 74s00            [12] 1614 	mov	a,#(_iu >> 8)
      0005A4 C0 E0            [24] 1615 	push	acc
      0005A6 E4               [12] 1616 	clr	a
      0005A7 C0 E0            [24] 1617 	push	acc
      0005A9 90r48r00         [24] 1618 	mov	dptr,#_u
      0005AC 75 F0 00         [24] 1619 	mov	b,#0x00
      0005AF 12r00r00         [24] 1620 	lcall	___memcpy
      0005B2 E5 81            [12] 1621 	mov	a,sp
      0005B4 24 FB            [12] 1622 	add	a,#0xfb
      0005B6 F5 81            [12] 1623 	mov	sp,a
                                   1624 ;	life.c:310: show(0);
      0005B8 75 82 00         [24] 1625 	mov	dpl,#0x00
      0005BB 12r00r5A         [24] 1626 	lcall	_show
                                   1627 ;	life.c:312: printstr("READY T L R P S\r\n");
      0005BE 7Dr52            [12] 1628 	mov	r5,#___str_9
      0005C0 7Es00            [12] 1629 	mov	r6,#(___str_9 >> 8)
      0005C2 7F 80            [12] 1630 	mov	r7,#0x80
                                   1631 ;	life.c:73: return;
      0005C4                       1632 00236$:
                                   1633 ;	life.c:71: for (; *s; s++) putchar(*s);
      0005C4 8D 82            [24] 1634 	mov	dpl,r5
      0005C6 8E 83            [24] 1635 	mov	dph,r6
      0005C8 8F F0            [24] 1636 	mov	b,r7
      0005CA 12r00r00         [24] 1637 	lcall	__gptrget
      0005CD FC               [12] 1638 	mov	r4,a
      0005CE 60 10            [24] 1639 	jz	00130$
      0005D0 7B 00            [12] 1640 	mov	r3,#0x00
      0005D2 8C 82            [24] 1641 	mov	dpl,r4
      0005D4 8B 83            [24] 1642 	mov	dph,r3
      0005D6 12r00r00         [24] 1643 	lcall	_putchar
      0005D9 0D               [12] 1644 	inc	r5
                                   1645 ;	life.c:313: while (1) {
      0005DA BD 00 E7         [24] 1646 	cjne	r5,#0x00,00236$
      0005DD 0E               [12] 1647 	inc	r6
      0005DE 80 E4            [24] 1648 	sjmp	00236$
      0005E0                       1649 00130$:
                                   1650 ;	life.c:314: c = toupper(getchar());
      0005E0 12r00r09         [24] 1651 	lcall	_getchar
      0005E3 12r00r00         [24] 1652 	lcall	_toupper
      0005E6 AE 82            [24] 1653 	mov	r6,dpl
      0005E8 AF 83            [24] 1654 	mov	r7,dph
      0005EA 78r19            [12] 1655 	mov	r0,#_c
      0005EC A6 06            [24] 1656 	mov	@r0,ar6
      0005EE 08               [12] 1657 	inc	r0
      0005EF A6 07            [24] 1658 	mov	@r0,ar7
                                   1659 ;	life.c:315: if (i0 || (c == (int)'T')) goto term;
      0005F1 78r10            [12] 1660 	mov	r0,#_i0
      0005F3 E6               [12] 1661 	mov	a,@r0
      0005F4 60 03            [24] 1662 	jz	00588$
      0005F6 02r0Br85         [24] 1663 	ljmp	00149$
      0005F9                       1664 00588$:
      0005F9 BE 54 06         [24] 1665 	cjne	r6,#0x54,00589$
      0005FC BF 00 03         [24] 1666 	cjne	r7,#0x00,00589$
      0005FF 02r0Br85         [24] 1667 	ljmp	00149$
      000602                       1668 00589$:
                                   1669 ;	life.c:316: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      000602 BE 4C 06         [24] 1670 	cjne	r6,#0x4c,00590$
      000605 BF 00 03         [24] 1671 	cjne	r7,#0x00,00590$
      000608 02r03r26         [24] 1672 	ljmp	00112$
      00060B                       1673 00590$:
      00060B BE 52 06         [24] 1674 	cjne	r6,#0x52,00591$
      00060E BF 00 03         [24] 1675 	cjne	r7,#0x00,00591$
      000611 02r03r26         [24] 1676 	ljmp	00112$
      000614                       1677 00591$:
      000614 BE 50 06         [24] 1678 	cjne	r6,#0x50,00592$
      000617 BF 00 03         [24] 1679 	cjne	r7,#0x00,00592$
      00061A 02r03r26         [24] 1680 	ljmp	00112$
      00061D                       1681 00592$:
                                   1682 ;	life.c:317: else if (c == (int)'S') break;
      00061D BE 53 C0         [24] 1683 	cjne	r6,#0x53,00130$
      000620 BF 00 BD         [24] 1684 	cjne	r7,#0x00,00130$
                                   1685 ;	life.c:126: generation[0] = 0u;
      000623 78r22            [12] 1686 	mov	r0,#_generation
      000625 76 00            [12] 1687 	mov	@r0,#0x00
      000627 08               [12] 1688 	inc	r0
      000628 76 00            [12] 1689 	mov	@r0,#0x00
                                   1690 ;	life.c:127: generation[1] = 0u;
      00062A 78r24            [12] 1691 	mov	r0,#(_generation + 0x0002)
      00062C 76 00            [12] 1692 	mov	@r0,#0x00
      00062E 08               [12] 1693 	inc	r0
      00062F 76 00            [12] 1694 	mov	@r0,#0x00
                                   1695 ;	life.c:322: for (i1 = 0; !i0 && !i1; ) {
      000631 78r11            [12] 1696 	mov	r0,#_i1
      000633 76 00            [12] 1697 	mov	@r0,#0x00
      000635                       1698 00253$:
      000635 78r10            [12] 1699 	mov	r0,#_i0
      000637 E6               [12] 1700 	mov	a,@r0
      000638 60 03            [24] 1701 	jz	00595$
      00063A 02r0Br53         [24] 1702 	ljmp	00145$
      00063D                       1703 00595$:
      00063D 78r11            [12] 1704 	mov	r0,#_i1
      00063F E6               [12] 1705 	mov	a,@r0
      000640 60 03            [24] 1706 	jz	00596$
      000642 02r0Br53         [24] 1707 	ljmp	00145$
      000645                       1708 00596$:
                                   1709 ;	life.c:323: show(1);
      000645 75 82 01         [24] 1710 	mov	dpl,#0x01
      000648 12r00r5A         [24] 1711 	lcall	_show
                                   1712 ;	life.c:228: fixed = 0;
      00064B 78r1C            [12] 1713 	mov	r0,#_fixed
      00064D 76 00            [12] 1714 	mov	@r0,#0x00
                                   1715 ;	life.c:229: cycle2 = 0;
      00064F 78r1D            [12] 1716 	mov	r0,#_cycle2
      000651 76 00            [12] 1717 	mov	@r0,#0x00
                                   1718 ;	life.c:231: OE76 = OE76_0;
      000653 78r12            [12] 1719 	mov	r0,#_OE76
      000655 76 3F            [12] 1720 	mov	@r0,#0x3f
                                   1721 ;	life.c:232: flashOE();
      000657 12r00r48         [24] 1722 	lcall	_flashOE
                                   1723 ;	life.c:234: for (y = 0; y < H; y++) {
      00065A 78r15            [12] 1724 	mov	r0,#_y
      00065C E4               [12] 1725 	clr	a
      00065D F6               [12] 1726 	mov	@r0,a
      00065E 08               [12] 1727 	inc	r0
      00065F F6               [12] 1728 	mov	@r0,a
      000660                       1729 00240$:
                                   1730 ;	life.c:235: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000660 78r15            [12] 1731 	mov	r0,#_y
      000662 86 07            [24] 1732 	mov	ar7,@r0
      000664 53 07 03         [24] 1733 	anl	ar7,#0x03
      000667 EF               [12] 1734 	mov	a,r7
      000668 03               [12] 1735 	rr	a
      000669 03               [12] 1736 	rr	a
      00066A 54 C0            [12] 1737 	anl	a,#0xc0
      00066C FF               [12] 1738 	mov	r7,a
      00066D 78r12            [12] 1739 	mov	r0,#_OE76
      00066F 74 3F            [12] 1740 	mov	a,#0x3f
      000671 4F               [12] 1741 	orl	a,r7
      000672 F6               [12] 1742 	mov	@r0,a
                                   1743 ;	life.c:236: flashOE();
      000673 12r00r48         [24] 1744 	lcall	_flashOE
                                   1745 ;	life.c:237: for (x = 0; x < W; x++) {
      000676 78r13            [12] 1746 	mov	r0,#_x
      000678 E4               [12] 1747 	clr	a
      000679 F6               [12] 1748 	mov	@r0,a
      00067A 08               [12] 1749 	inc	r0
      00067B F6               [12] 1750 	mov	@r0,a
      00067C                       1751 00238$:
                                   1752 ;	life.c:238: n = -u[A2D(W, y, x)];
      00067C 78r15            [12] 1753 	mov	r0,#_y
      00067E E6               [12] 1754 	mov	a,@r0
      00067F C0 E0            [24] 1755 	push	acc
      000681 08               [12] 1756 	inc	r0
      000682 E6               [12] 1757 	mov	a,@r0
      000683 C0 E0            [24] 1758 	push	acc
      000685 90 00 30         [24] 1759 	mov	dptr,#0x0030
      000688 12r00r00         [24] 1760 	lcall	__mulint
      00068B C8               [12] 1761 	xch	a,r0
      00068C E5*00            [12] 1762 	mov	a,_bp
      00068E 24 04            [12] 1763 	add	a,#0x04
      000690 C8               [12] 1764 	xch	a,r0
      000691 A6 82            [24] 1765 	mov	@r0,dpl
      000693 08               [12] 1766 	inc	r0
      000694 A6 83            [24] 1767 	mov	@r0,dph
      000696 15 81            [12] 1768 	dec	sp
      000698 15 81            [12] 1769 	dec	sp
      00069A E5*00            [12] 1770 	mov	a,_bp
      00069C 24 04            [12] 1771 	add	a,#0x04
      00069E F8               [12] 1772 	mov	r0,a
      00069F 79r13            [12] 1773 	mov	r1,#_x
      0006A1 E7               [12] 1774 	mov	a,@r1
      0006A2 26               [12] 1775 	add	a,@r0
      0006A3 C0 E0            [24] 1776 	push	acc
      0006A5 09               [12] 1777 	inc	r1
      0006A6 E7               [12] 1778 	mov	a,@r1
      0006A7 08               [12] 1779 	inc	r0
      0006A8 36               [12] 1780 	addc	a,@r0
      0006A9 C0 E0            [24] 1781 	push	acc
      0006AB E5*00            [12] 1782 	mov	a,_bp
      0006AD 24 03            [12] 1783 	add	a,#0x03
      0006AF F8               [12] 1784 	mov	r0,a
      0006B0 D0 E0            [24] 1785 	pop	acc
      0006B2 F6               [12] 1786 	mov	@r0,a
      0006B3 18               [12] 1787 	dec	r0
      0006B4 D0 E0            [24] 1788 	pop	acc
      0006B6 F6               [12] 1789 	mov	@r0,a
      0006B7 A8*00            [24] 1790 	mov	r0,_bp
      0006B9 08               [12] 1791 	inc	r0
      0006BA 08               [12] 1792 	inc	r0
      0006BB E6               [12] 1793 	mov	a,@r0
      0006BC 24r00            [12] 1794 	add	a,#_u
      0006BE F5 82            [12] 1795 	mov	dpl,a
      0006C0 08               [12] 1796 	inc	r0
      0006C1 E6               [12] 1797 	mov	a,@r0
      0006C2 34s48            [12] 1798 	addc	a,#(_u >> 8)
      0006C4 F5 83            [12] 1799 	mov	dph,a
      0006C6 E0               [24] 1800 	movx	a,@dptr
      0006C7 FB               [12] 1801 	mov	r3,a
      0006C8 A8*00            [24] 1802 	mov	r0,_bp
      0006CA 08               [12] 1803 	inc	r0
      0006CB C3               [12] 1804 	clr	c
      0006CC E4               [12] 1805 	clr	a
      0006CD 9B               [12] 1806 	subb	a,r3
      0006CE F6               [12] 1807 	mov	@r0,a
                                   1808 ;	life.c:241: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006CF 78r15            [12] 1809 	mov	r0,#_y
      0006D1 74 FF            [12] 1810 	mov	a,#0xff
      0006D3 26               [12] 1811 	add	a,@r0
      0006D4 FA               [12] 1812 	mov	r2,a
      0006D5 74 FF            [12] 1813 	mov	a,#0xff
      0006D7 08               [12] 1814 	inc	r0
      0006D8 36               [12] 1815 	addc	a,@r0
      0006D9 FB               [12] 1816 	mov	r3,a
      0006DA 74 C0            [12] 1817 	mov	a,#0xc0
      0006DC 2A               [12] 1818 	add	a,r2
      0006DD FA               [12] 1819 	mov	r2,a
      0006DE E4               [12] 1820 	clr	a
      0006DF 3B               [12] 1821 	addc	a,r3
      0006E0 FB               [12] 1822 	mov	r3,a
      0006E1 74 C0            [12] 1823 	mov	a,#0xc0
      0006E3 C0 E0            [24] 1824 	push	acc
      0006E5 E4               [12] 1825 	clr	a
      0006E6 C0 E0            [24] 1826 	push	acc
      0006E8 8A 82            [24] 1827 	mov	dpl,r2
      0006EA 8B 83            [24] 1828 	mov	dph,r3
      0006EC 12r00r00         [24] 1829 	lcall	__modsint
      0006EF AA 82            [24] 1830 	mov	r2,dpl
      0006F1 AB 83            [24] 1831 	mov	r3,dph
      0006F3 15 81            [12] 1832 	dec	sp
      0006F5 15 81            [12] 1833 	dec	sp
      0006F7 C0 02            [24] 1834 	push	ar2
      0006F9 C0 03            [24] 1835 	push	ar3
      0006FB 90 00 30         [24] 1836 	mov	dptr,#0x0030
      0006FE 12r00r00         [24] 1837 	lcall	__mulint
      000701 AA 82            [24] 1838 	mov	r2,dpl
      000703 AB 83            [24] 1839 	mov	r3,dph
      000705 15 81            [12] 1840 	dec	sp
      000707 15 81            [12] 1841 	dec	sp
      000709 78r13            [12] 1842 	mov	r0,#_x
      00070B 74 FF            [12] 1843 	mov	a,#0xff
      00070D 26               [12] 1844 	add	a,@r0
      00070E FC               [12] 1845 	mov	r4,a
      00070F 74 FF            [12] 1846 	mov	a,#0xff
      000711 08               [12] 1847 	inc	r0
      000712 36               [12] 1848 	addc	a,@r0
      000713 FD               [12] 1849 	mov	r5,a
      000714 74 30            [12] 1850 	mov	a,#0x30
      000716 2C               [12] 1851 	add	a,r4
      000717 FC               [12] 1852 	mov	r4,a
      000718 E4               [12] 1853 	clr	a
      000719 3D               [12] 1854 	addc	a,r5
      00071A FD               [12] 1855 	mov	r5,a
      00071B C0 03            [24] 1856 	push	ar3
      00071D C0 02            [24] 1857 	push	ar2
      00071F 74 30            [12] 1858 	mov	a,#0x30
      000721 C0 E0            [24] 1859 	push	acc
      000723 E4               [12] 1860 	clr	a
      000724 C0 E0            [24] 1861 	push	acc
      000726 8C 82            [24] 1862 	mov	dpl,r4
      000728 8D 83            [24] 1863 	mov	dph,r5
      00072A 12r00r00         [24] 1864 	lcall	__modsint
      00072D AC 82            [24] 1865 	mov	r4,dpl
      00072F AD 83            [24] 1866 	mov	r5,dph
      000731 15 81            [12] 1867 	dec	sp
      000733 15 81            [12] 1868 	dec	sp
      000735 D0 02            [24] 1869 	pop	ar2
      000737 D0 03            [24] 1870 	pop	ar3
      000739 EC               [12] 1871 	mov	a,r4
      00073A 2A               [12] 1872 	add	a,r2
      00073B FE               [12] 1873 	mov	r6,a
      00073C ED               [12] 1874 	mov	a,r5
      00073D 3B               [12] 1875 	addc	a,r3
      00073E FF               [12] 1876 	mov	r7,a
      00073F EE               [12] 1877 	mov	a,r6
      000740 24r00            [12] 1878 	add	a,#_u
      000742 F5 82            [12] 1879 	mov	dpl,a
      000744 EF               [12] 1880 	mov	a,r7
      000745 34s48            [12] 1881 	addc	a,#(_u >> 8)
      000747 F5 83            [12] 1882 	mov	dph,a
      000749 E0               [24] 1883 	movx	a,@dptr
      00074A FF               [12] 1884 	mov	r7,a
      00074B A8*00            [24] 1885 	mov	r0,_bp
      00074D 08               [12] 1886 	inc	r0
      00074E EF               [12] 1887 	mov	a,r7
      00074F 26               [12] 1888 	add	a,@r0
      000750 F6               [12] 1889 	mov	@r0,a
                                   1890 ;	life.c:243: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000751 78r13            [12] 1891 	mov	r0,#_x
      000753 E5*00            [12] 1892 	mov	a,_bp
      000755 24 06            [12] 1893 	add	a,#0x06
      000757 F9               [12] 1894 	mov	r1,a
      000758 E6               [12] 1895 	mov	a,@r0
      000759 F7               [12] 1896 	mov	@r1,a
      00075A 08               [12] 1897 	inc	r0
      00075B 09               [12] 1898 	inc	r1
      00075C E6               [12] 1899 	mov	a,@r0
      00075D F7               [12] 1900 	mov	@r1,a
      00075E E5*00            [12] 1901 	mov	a,_bp
      000760 24 06            [12] 1902 	add	a,#0x06
      000762 F8               [12] 1903 	mov	r0,a
      000763 74 30            [12] 1904 	mov	a,#0x30
      000765 26               [12] 1905 	add	a,@r0
      000766 FE               [12] 1906 	mov	r6,a
      000767 E4               [12] 1907 	clr	a
      000768 08               [12] 1908 	inc	r0
      000769 36               [12] 1909 	addc	a,@r0
      00076A FF               [12] 1910 	mov	r7,a
      00076B C0 05            [24] 1911 	push	ar5
      00076D C0 04            [24] 1912 	push	ar4
      00076F C0 03            [24] 1913 	push	ar3
      000771 C0 02            [24] 1914 	push	ar2
      000773 74 30            [12] 1915 	mov	a,#0x30
      000775 C0 E0            [24] 1916 	push	acc
      000777 E4               [12] 1917 	clr	a
      000778 C0 E0            [24] 1918 	push	acc
      00077A 8E 82            [24] 1919 	mov	dpl,r6
      00077C 8F 83            [24] 1920 	mov	dph,r7
      00077E 12r00r00         [24] 1921 	lcall	__modsint
      000781 C8               [12] 1922 	xch	a,r0
      000782 E5*00            [12] 1923 	mov	a,_bp
      000784 24 08            [12] 1924 	add	a,#0x08
      000786 C8               [12] 1925 	xch	a,r0
      000787 A6 82            [24] 1926 	mov	@r0,dpl
      000789 08               [12] 1927 	inc	r0
      00078A A6 83            [24] 1928 	mov	@r0,dph
      00078C 15 81            [12] 1929 	dec	sp
      00078E 15 81            [12] 1930 	dec	sp
      000790 D0 02            [24] 1931 	pop	ar2
      000792 D0 03            [24] 1932 	pop	ar3
      000794 E5*00            [12] 1933 	mov	a,_bp
      000796 24 08            [12] 1934 	add	a,#0x08
      000798 F8               [12] 1935 	mov	r0,a
      000799 E6               [12] 1936 	mov	a,@r0
      00079A 2A               [12] 1937 	add	a,r2
      00079B FE               [12] 1938 	mov	r6,a
      00079C 08               [12] 1939 	inc	r0
      00079D E6               [12] 1940 	mov	a,@r0
      00079E 3B               [12] 1941 	addc	a,r3
      00079F FF               [12] 1942 	mov	r7,a
      0007A0 EE               [12] 1943 	mov	a,r6
      0007A1 24r00            [12] 1944 	add	a,#_u
      0007A3 F5 82            [12] 1945 	mov	dpl,a
      0007A5 EF               [12] 1946 	mov	a,r7
      0007A6 34s48            [12] 1947 	addc	a,#(_u >> 8)
      0007A8 F5 83            [12] 1948 	mov	dph,a
      0007AA E0               [24] 1949 	movx	a,@dptr
      0007AB FF               [12] 1950 	mov	r7,a
      0007AC A8*00            [24] 1951 	mov	r0,_bp
      0007AE 08               [12] 1952 	inc	r0
      0007AF EF               [12] 1953 	mov	a,r7
      0007B0 26               [12] 1954 	add	a,@r0
      0007B1 F6               [12] 1955 	mov	@r0,a
                                   1956 ;	life.c:245: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007B2 E5*00            [12] 1957 	mov	a,_bp
      0007B4 24 06            [12] 1958 	add	a,#0x06
      0007B6 F8               [12] 1959 	mov	r0,a
      0007B7 74 31            [12] 1960 	mov	a,#0x31
      0007B9 26               [12] 1961 	add	a,@r0
      0007BA FE               [12] 1962 	mov	r6,a
      0007BB E4               [12] 1963 	clr	a
      0007BC 08               [12] 1964 	inc	r0
      0007BD 36               [12] 1965 	addc	a,@r0
      0007BE FF               [12] 1966 	mov	r7,a
      0007BF C0 03            [24] 1967 	push	ar3
      0007C1 C0 02            [24] 1968 	push	ar2
      0007C3 74 30            [12] 1969 	mov	a,#0x30
      0007C5 C0 E0            [24] 1970 	push	acc
      0007C7 E4               [12] 1971 	clr	a
      0007C8 C0 E0            [24] 1972 	push	acc
      0007CA 8E 82            [24] 1973 	mov	dpl,r6
      0007CC 8F 83            [24] 1974 	mov	dph,r7
      0007CE 12r00r00         [24] 1975 	lcall	__modsint
      0007D1 AE 82            [24] 1976 	mov	r6,dpl
      0007D3 AF 83            [24] 1977 	mov	r7,dph
      0007D5 15 81            [12] 1978 	dec	sp
      0007D7 15 81            [12] 1979 	dec	sp
      0007D9 D0 02            [24] 1980 	pop	ar2
      0007DB D0 03            [24] 1981 	pop	ar3
      0007DD D0 04            [24] 1982 	pop	ar4
      0007DF D0 05            [24] 1983 	pop	ar5
      0007E1 EE               [12] 1984 	mov	a,r6
      0007E2 2A               [12] 1985 	add	a,r2
      0007E3 FA               [12] 1986 	mov	r2,a
      0007E4 EF               [12] 1987 	mov	a,r7
      0007E5 3B               [12] 1988 	addc	a,r3
      0007E6 FB               [12] 1989 	mov	r3,a
      0007E7 EA               [12] 1990 	mov	a,r2
      0007E8 24r00            [12] 1991 	add	a,#_u
      0007EA F5 82            [12] 1992 	mov	dpl,a
      0007EC EB               [12] 1993 	mov	a,r3
      0007ED 34s48            [12] 1994 	addc	a,#(_u >> 8)
      0007EF F5 83            [12] 1995 	mov	dph,a
      0007F1 E0               [24] 1996 	movx	a,@dptr
      0007F2 FB               [12] 1997 	mov	r3,a
      0007F3 A8*00            [24] 1998 	mov	r0,_bp
      0007F5 08               [12] 1999 	inc	r0
      0007F6 EB               [12] 2000 	mov	a,r3
      0007F7 26               [12] 2001 	add	a,@r0
      0007F8 F6               [12] 2002 	mov	@r0,a
                                   2003 ;	life.c:247: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007F9 78r15            [12] 2004 	mov	r0,#_y
      0007FB E5*00            [12] 2005 	mov	a,_bp
      0007FD 24 0A            [12] 2006 	add	a,#0x0a
      0007FF F9               [12] 2007 	mov	r1,a
      000800 E6               [12] 2008 	mov	a,@r0
      000801 F7               [12] 2009 	mov	@r1,a
      000802 08               [12] 2010 	inc	r0
      000803 09               [12] 2011 	inc	r1
      000804 E6               [12] 2012 	mov	a,@r0
      000805 F7               [12] 2013 	mov	@r1,a
      000806 E5*00            [12] 2014 	mov	a,_bp
      000808 24 0A            [12] 2015 	add	a,#0x0a
      00080A F8               [12] 2016 	mov	r0,a
      00080B 74 C0            [12] 2017 	mov	a,#0xc0
      00080D 26               [12] 2018 	add	a,@r0
      00080E FA               [12] 2019 	mov	r2,a
      00080F E4               [12] 2020 	clr	a
      000810 08               [12] 2021 	inc	r0
      000811 36               [12] 2022 	addc	a,@r0
      000812 FB               [12] 2023 	mov	r3,a
      000813 C0 07            [24] 2024 	push	ar7
      000815 C0 06            [24] 2025 	push	ar6
      000817 C0 05            [24] 2026 	push	ar5
      000819 C0 04            [24] 2027 	push	ar4
      00081B 74 C0            [12] 2028 	mov	a,#0xc0
      00081D C0 E0            [24] 2029 	push	acc
      00081F E4               [12] 2030 	clr	a
      000820 C0 E0            [24] 2031 	push	acc
      000822 8A 82            [24] 2032 	mov	dpl,r2
      000824 8B 83            [24] 2033 	mov	dph,r3
      000826 12r00r00         [24] 2034 	lcall	__modsint
      000829 AA 82            [24] 2035 	mov	r2,dpl
      00082B AB 83            [24] 2036 	mov	r3,dph
      00082D 15 81            [12] 2037 	dec	sp
      00082F 15 81            [12] 2038 	dec	sp
      000831 C0 02            [24] 2039 	push	ar2
      000833 C0 03            [24] 2040 	push	ar3
      000835 90 00 30         [24] 2041 	mov	dptr,#0x0030
      000838 12r00r00         [24] 2042 	lcall	__mulint
      00083B C8               [12] 2043 	xch	a,r0
      00083C E5*00            [12] 2044 	mov	a,_bp
      00083E 24 0C            [12] 2045 	add	a,#0x0c
      000840 C8               [12] 2046 	xch	a,r0
      000841 A6 82            [24] 2047 	mov	@r0,dpl
      000843 08               [12] 2048 	inc	r0
      000844 A6 83            [24] 2049 	mov	@r0,dph
      000846 15 81            [12] 2050 	dec	sp
      000848 15 81            [12] 2051 	dec	sp
      00084A D0 04            [24] 2052 	pop	ar4
      00084C D0 05            [24] 2053 	pop	ar5
      00084E D0 06            [24] 2054 	pop	ar6
      000850 D0 07            [24] 2055 	pop	ar7
      000852 E5*00            [12] 2056 	mov	a,_bp
      000854 24 0C            [12] 2057 	add	a,#0x0c
      000856 F8               [12] 2058 	mov	r0,a
      000857 EC               [12] 2059 	mov	a,r4
      000858 26               [12] 2060 	add	a,@r0
      000859 FA               [12] 2061 	mov	r2,a
      00085A ED               [12] 2062 	mov	a,r5
      00085B 08               [12] 2063 	inc	r0
      00085C 36               [12] 2064 	addc	a,@r0
      00085D FB               [12] 2065 	mov	r3,a
      00085E EA               [12] 2066 	mov	a,r2
      00085F 24r00            [12] 2067 	add	a,#_u
      000861 F5 82            [12] 2068 	mov	dpl,a
      000863 EB               [12] 2069 	mov	a,r3
      000864 34s48            [12] 2070 	addc	a,#(_u >> 8)
      000866 F5 83            [12] 2071 	mov	dph,a
      000868 E0               [24] 2072 	movx	a,@dptr
      000869 FB               [12] 2073 	mov	r3,a
      00086A A8*00            [24] 2074 	mov	r0,_bp
      00086C 08               [12] 2075 	inc	r0
      00086D EB               [12] 2076 	mov	a,r3
      00086E 26               [12] 2077 	add	a,@r0
      00086F F6               [12] 2078 	mov	@r0,a
                                   2079 ;	life.c:249: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000870 E5*00            [12] 2080 	mov	a,_bp
      000872 24 0C            [12] 2081 	add	a,#0x0c
      000874 F8               [12] 2082 	mov	r0,a
      000875 E5*00            [12] 2083 	mov	a,_bp
      000877 24 08            [12] 2084 	add	a,#0x08
      000879 F9               [12] 2085 	mov	r1,a
      00087A E7               [12] 2086 	mov	a,@r1
      00087B 26               [12] 2087 	add	a,@r0
      00087C FA               [12] 2088 	mov	r2,a
      00087D 09               [12] 2089 	inc	r1
      00087E E7               [12] 2090 	mov	a,@r1
      00087F 08               [12] 2091 	inc	r0
      000880 36               [12] 2092 	addc	a,@r0
      000881 FB               [12] 2093 	mov	r3,a
      000882 EA               [12] 2094 	mov	a,r2
      000883 24r00            [12] 2095 	add	a,#_u
      000885 F5 82            [12] 2096 	mov	dpl,a
      000887 EB               [12] 2097 	mov	a,r3
      000888 34s48            [12] 2098 	addc	a,#(_u >> 8)
      00088A F5 83            [12] 2099 	mov	dph,a
      00088C E0               [24] 2100 	movx	a,@dptr
      00088D FB               [12] 2101 	mov	r3,a
      00088E A8*00            [24] 2102 	mov	r0,_bp
      000890 08               [12] 2103 	inc	r0
      000891 EB               [12] 2104 	mov	a,r3
      000892 26               [12] 2105 	add	a,@r0
      000893 F6               [12] 2106 	mov	@r0,a
                                   2107 ;	life.c:251: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000894 E5*00            [12] 2108 	mov	a,_bp
      000896 24 0C            [12] 2109 	add	a,#0x0c
      000898 F8               [12] 2110 	mov	r0,a
      000899 EE               [12] 2111 	mov	a,r6
      00089A 26               [12] 2112 	add	a,@r0
      00089B FA               [12] 2113 	mov	r2,a
      00089C EF               [12] 2114 	mov	a,r7
      00089D 08               [12] 2115 	inc	r0
      00089E 36               [12] 2116 	addc	a,@r0
      00089F FB               [12] 2117 	mov	r3,a
      0008A0 EA               [12] 2118 	mov	a,r2
      0008A1 24r00            [12] 2119 	add	a,#_u
      0008A3 F5 82            [12] 2120 	mov	dpl,a
      0008A5 EB               [12] 2121 	mov	a,r3
      0008A6 34s48            [12] 2122 	addc	a,#(_u >> 8)
      0008A8 F5 83            [12] 2123 	mov	dph,a
      0008AA E0               [24] 2124 	movx	a,@dptr
      0008AB FB               [12] 2125 	mov	r3,a
      0008AC A8*00            [24] 2126 	mov	r0,_bp
      0008AE 08               [12] 2127 	inc	r0
      0008AF E5*00            [12] 2128 	mov	a,_bp
      0008B1 24 0C            [12] 2129 	add	a,#0x0c
      0008B3 F9               [12] 2130 	mov	r1,a
      0008B4 EB               [12] 2131 	mov	a,r3
      0008B5 26               [12] 2132 	add	a,@r0
      0008B6 F7               [12] 2133 	mov	@r1,a
                                   2134 ;	life.c:253: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008B7 E5*00            [12] 2135 	mov	a,_bp
      0008B9 24 0A            [12] 2136 	add	a,#0x0a
      0008BB F8               [12] 2137 	mov	r0,a
      0008BC 74 C1            [12] 2138 	mov	a,#0xc1
      0008BE 26               [12] 2139 	add	a,@r0
      0008BF FA               [12] 2140 	mov	r2,a
      0008C0 E4               [12] 2141 	clr	a
      0008C1 08               [12] 2142 	inc	r0
      0008C2 36               [12] 2143 	addc	a,@r0
      0008C3 FB               [12] 2144 	mov	r3,a
      0008C4 C0 07            [24] 2145 	push	ar7
      0008C6 C0 06            [24] 2146 	push	ar6
      0008C8 C0 05            [24] 2147 	push	ar5
      0008CA C0 04            [24] 2148 	push	ar4
      0008CC 74 C0            [12] 2149 	mov	a,#0xc0
      0008CE C0 E0            [24] 2150 	push	acc
      0008D0 E4               [12] 2151 	clr	a
      0008D1 C0 E0            [24] 2152 	push	acc
      0008D3 8A 82            [24] 2153 	mov	dpl,r2
      0008D5 8B 83            [24] 2154 	mov	dph,r3
      0008D7 12r00r00         [24] 2155 	lcall	__modsint
      0008DA AA 82            [24] 2156 	mov	r2,dpl
      0008DC AB 83            [24] 2157 	mov	r3,dph
      0008DE 15 81            [12] 2158 	dec	sp
      0008E0 15 81            [12] 2159 	dec	sp
      0008E2 C0 02            [24] 2160 	push	ar2
      0008E4 C0 03            [24] 2161 	push	ar3
      0008E6 90 00 30         [24] 2162 	mov	dptr,#0x0030
      0008E9 12r00r00         [24] 2163 	lcall	__mulint
      0008EC AA 82            [24] 2164 	mov	r2,dpl
      0008EE AB 83            [24] 2165 	mov	r3,dph
      0008F0 15 81            [12] 2166 	dec	sp
      0008F2 15 81            [12] 2167 	dec	sp
      0008F4 D0 04            [24] 2168 	pop	ar4
      0008F6 D0 05            [24] 2169 	pop	ar5
      0008F8 D0 06            [24] 2170 	pop	ar6
      0008FA D0 07            [24] 2171 	pop	ar7
      0008FC EC               [12] 2172 	mov	a,r4
      0008FD 2A               [12] 2173 	add	a,r2
      0008FE FC               [12] 2174 	mov	r4,a
      0008FF ED               [12] 2175 	mov	a,r5
      000900 3B               [12] 2176 	addc	a,r3
      000901 FD               [12] 2177 	mov	r5,a
      000902 EC               [12] 2178 	mov	a,r4
      000903 24r00            [12] 2179 	add	a,#_u
      000905 F5 82            [12] 2180 	mov	dpl,a
      000907 ED               [12] 2181 	mov	a,r5
      000908 34s48            [12] 2182 	addc	a,#(_u >> 8)
      00090A F5 83            [12] 2183 	mov	dph,a
      00090C E0               [24] 2184 	movx	a,@dptr
      00090D FD               [12] 2185 	mov	r5,a
      00090E E5*00            [12] 2186 	mov	a,_bp
      000910 24 0C            [12] 2187 	add	a,#0x0c
      000912 F8               [12] 2188 	mov	r0,a
      000913 E5*00            [12] 2189 	mov	a,_bp
      000915 24 0C            [12] 2190 	add	a,#0x0c
      000917 F9               [12] 2191 	mov	r1,a
      000918 ED               [12] 2192 	mov	a,r5
      000919 26               [12] 2193 	add	a,@r0
      00091A F7               [12] 2194 	mov	@r1,a
                                   2195 ;	life.c:255: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00091B E5*00            [12] 2196 	mov	a,_bp
      00091D 24 08            [12] 2197 	add	a,#0x08
      00091F F8               [12] 2198 	mov	r0,a
      000920 E6               [12] 2199 	mov	a,@r0
      000921 2A               [12] 2200 	add	a,r2
      000922 FC               [12] 2201 	mov	r4,a
      000923 08               [12] 2202 	inc	r0
      000924 E6               [12] 2203 	mov	a,@r0
      000925 3B               [12] 2204 	addc	a,r3
      000926 FD               [12] 2205 	mov	r5,a
      000927 EC               [12] 2206 	mov	a,r4
      000928 24r00            [12] 2207 	add	a,#_u
      00092A F5 82            [12] 2208 	mov	dpl,a
      00092C ED               [12] 2209 	mov	a,r5
      00092D 34s48            [12] 2210 	addc	a,#(_u >> 8)
      00092F F5 83            [12] 2211 	mov	dph,a
      000931 E0               [24] 2212 	movx	a,@dptr
      000932 FD               [12] 2213 	mov	r5,a
      000933 E5*00            [12] 2214 	mov	a,_bp
      000935 24 0C            [12] 2215 	add	a,#0x0c
      000937 F8               [12] 2216 	mov	r0,a
      000938 ED               [12] 2217 	mov	a,r5
      000939 26               [12] 2218 	add	a,@r0
      00093A FD               [12] 2219 	mov	r5,a
                                   2220 ;	life.c:256: y1 = 1; x1 = 1;
      00093B 78r20            [12] 2221 	mov	r0,#_y1
      00093D 76 01            [12] 2222 	mov	@r0,#0x01
      00093F 08               [12] 2223 	inc	r0
      000940 76 00            [12] 2224 	mov	@r0,#0x00
      000942 78r1E            [12] 2225 	mov	r0,#_x1
      000944 76 01            [12] 2226 	mov	@r0,#0x01
      000946 08               [12] 2227 	inc	r0
      000947 76 00            [12] 2228 	mov	@r0,#0x00
                                   2229 ;	life.c:257: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000949 EE               [12] 2230 	mov	a,r6
      00094A 2A               [12] 2231 	add	a,r2
      00094B FE               [12] 2232 	mov	r6,a
      00094C EF               [12] 2233 	mov	a,r7
      00094D 3B               [12] 2234 	addc	a,r3
      00094E FF               [12] 2235 	mov	r7,a
      00094F EE               [12] 2236 	mov	a,r6
      000950 24r00            [12] 2237 	add	a,#_u
      000952 F5 82            [12] 2238 	mov	dpl,a
      000954 EF               [12] 2239 	mov	a,r7
      000955 34s48            [12] 2240 	addc	a,#(_u >> 8)
      000957 F5 83            [12] 2241 	mov	dph,a
      000959 E0               [24] 2242 	movx	a,@dptr
      00095A 2D               [12] 2243 	add	a,r5
      00095B FF               [12] 2244 	mov	r7,a
      00095C 78r1B            [12] 2245 	mov	r0,#_n
      00095E A6 07            [24] 2246 	mov	@r0,ar7
                                   2247 ;	life.c:259: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000960 A8*00            [24] 2248 	mov	r0,_bp
      000962 08               [12] 2249 	inc	r0
      000963 08               [12] 2250 	inc	r0
      000964 E6               [12] 2251 	mov	a,@r0
      000965 24r00            [12] 2252 	add	a,#_nu
      000967 FD               [12] 2253 	mov	r5,a
      000968 08               [12] 2254 	inc	r0
      000969 E6               [12] 2255 	mov	a,@r0
      00096A 34s6C            [12] 2256 	addc	a,#(_nu >> 8)
      00096C FE               [12] 2257 	mov	r6,a
      00096D BF 03 02         [24] 2258 	cjne	r7,#0x03,00597$
      000970 80 28            [24] 2259 	sjmp	00266$
      000972                       2260 00597$:
      000972 BF 02 21         [24] 2261 	cjne	r7,#0x02,00265$
      000975 E5*00            [12] 2262 	mov	a,_bp
      000977 24 04            [12] 2263 	add	a,#0x04
      000979 F8               [12] 2264 	mov	r0,a
      00097A E5*00            [12] 2265 	mov	a,_bp
      00097C 24 06            [12] 2266 	add	a,#0x06
      00097E F9               [12] 2267 	mov	r1,a
      00097F E7               [12] 2268 	mov	a,@r1
      000980 26               [12] 2269 	add	a,@r0
      000981 FC               [12] 2270 	mov	r4,a
      000982 09               [12] 2271 	inc	r1
      000983 E7               [12] 2272 	mov	a,@r1
      000984 08               [12] 2273 	inc	r0
      000985 36               [12] 2274 	addc	a,@r0
      000986 FF               [12] 2275 	mov	r7,a
      000987 EC               [12] 2276 	mov	a,r4
      000988 24r00            [12] 2277 	add	a,#_u
      00098A FC               [12] 2278 	mov	r4,a
      00098B EF               [12] 2279 	mov	a,r7
      00098C 34s48            [12] 2280 	addc	a,#(_u >> 8)
      00098E FF               [12] 2281 	mov	r7,a
      00098F 8C 82            [24] 2282 	mov	dpl,r4
      000991 8F 83            [24] 2283 	mov	dph,r7
      000993 E0               [24] 2284 	movx	a,@dptr
      000994 70 04            [24] 2285 	jnz	00266$
      000996                       2286 00265$:
                                   2287 ;	assignBit
      000996 C2*00            [12] 2288 	clr	b0
      000998 80 02            [24] 2289 	sjmp	00267$
      00099A                       2290 00266$:
                                   2291 ;	assignBit
      00099A D2*00            [12] 2292 	setb	b0
      00099C                       2293 00267$:
      00099C A2*00            [12] 2294 	mov	c,b0
      00099E E4               [12] 2295 	clr	a
      00099F 33               [12] 2296 	rlc	a
      0009A0 8D 82            [24] 2297 	mov	dpl,r5
      0009A2 8E 83            [24] 2298 	mov	dph,r6
      0009A4 F0               [24] 2299 	movx	@dptr,a
                                   2300 ;	life.c:260: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0009A5 78r15            [12] 2301 	mov	r0,#_y
      0009A7 E6               [12] 2302 	mov	a,@r0
      0009A8 C0 E0            [24] 2303 	push	acc
      0009AA 08               [12] 2304 	inc	r0
      0009AB E6               [12] 2305 	mov	a,@r0
      0009AC C0 E0            [24] 2306 	push	acc
      0009AE 90 00 30         [24] 2307 	mov	dptr,#0x0030
      0009B1 12r00r00         [24] 2308 	lcall	__mulint
      0009B4 AE 82            [24] 2309 	mov	r6,dpl
      0009B6 AF 83            [24] 2310 	mov	r7,dph
      0009B8 15 81            [12] 2311 	dec	sp
      0009BA 15 81            [12] 2312 	dec	sp
      0009BC 78r13            [12] 2313 	mov	r0,#_x
      0009BE E6               [12] 2314 	mov	a,@r0
      0009BF 2E               [12] 2315 	add	a,r6
      0009C0 FE               [12] 2316 	mov	r6,a
      0009C1 08               [12] 2317 	inc	r0
      0009C2 E6               [12] 2318 	mov	a,@r0
      0009C3 3F               [12] 2319 	addc	a,r7
      0009C4 FF               [12] 2320 	mov	r7,a
      0009C5 EE               [12] 2321 	mov	a,r6
      0009C6 24r00            [12] 2322 	add	a,#_pu
      0009C8 F5 82            [12] 2323 	mov	dpl,a
      0009CA EF               [12] 2324 	mov	a,r7
      0009CB 34s24            [12] 2325 	addc	a,#(_pu >> 8)
      0009CD F5 83            [12] 2326 	mov	dph,a
      0009CF E0               [24] 2327 	movx	a,@dptr
      0009D0 FD               [12] 2328 	mov	r5,a
      0009D1 EE               [12] 2329 	mov	a,r6
      0009D2 24r00            [12] 2330 	add	a,#_nu
      0009D4 F5 82            [12] 2331 	mov	dpl,a
      0009D6 EF               [12] 2332 	mov	a,r7
      0009D7 34s6C            [12] 2333 	addc	a,#(_nu >> 8)
      0009D9 F5 83            [12] 2334 	mov	dph,a
      0009DB E0               [24] 2335 	movx	a,@dptr
      0009DC FC               [12] 2336 	mov	r4,a
      0009DD 6D               [12] 2337 	xrl	a,r5
      0009DE 78r1D            [12] 2338 	mov	r0,#_cycle2
      0009E0 46               [12] 2339 	orl	a,@r0
      0009E1 F6               [12] 2340 	mov	@r0,a
                                   2341 ;	life.c:261: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0009E2 EE               [12] 2342 	mov	a,r6
      0009E3 24r00            [12] 2343 	add	a,#_u
      0009E5 F5 82            [12] 2344 	mov	dpl,a
      0009E7 EF               [12] 2345 	mov	a,r7
      0009E8 34s48            [12] 2346 	addc	a,#(_u >> 8)
      0009EA F5 83            [12] 2347 	mov	dph,a
      0009EC E0               [24] 2348 	movx	a,@dptr
      0009ED FF               [12] 2349 	mov	r7,a
      0009EE EC               [12] 2350 	mov	a,r4
      0009EF 6F               [12] 2351 	xrl	a,r7
      0009F0 78r1C            [12] 2352 	mov	r0,#_fixed
      0009F2 46               [12] 2353 	orl	a,@r0
      0009F3 F6               [12] 2354 	mov	@r0,a
                                   2355 ;	life.c:237: for (x = 0; x < W; x++) {
      0009F4 78r13            [12] 2356 	mov	r0,#_x
      0009F6 06               [12] 2357 	inc	@r0
      0009F7 B6 00 02         [24] 2358 	cjne	@r0,#0x00,00601$
      0009FA 08               [12] 2359 	inc	r0
      0009FB 06               [12] 2360 	inc	@r0
      0009FC                       2361 00601$:
      0009FC 78r13            [12] 2362 	mov	r0,#_x
      0009FE C3               [12] 2363 	clr	c
      0009FF E6               [12] 2364 	mov	a,@r0
      000A00 94 30            [12] 2365 	subb	a,#0x30
      000A02 08               [12] 2366 	inc	r0
      000A03 E6               [12] 2367 	mov	a,@r0
      000A04 64 80            [12] 2368 	xrl	a,#0x80
      000A06 94 80            [12] 2369 	subb	a,#0x80
      000A08 50 03            [24] 2370 	jnc	00602$
      000A0A 02r06r7C         [24] 2371 	ljmp	00238$
      000A0D                       2372 00602$:
                                   2373 ;	life.c:234: for (y = 0; y < H; y++) {
      000A0D 78r15            [12] 2374 	mov	r0,#_y
      000A0F 06               [12] 2375 	inc	@r0
      000A10 B6 00 02         [24] 2376 	cjne	@r0,#0x00,00603$
      000A13 08               [12] 2377 	inc	r0
      000A14 06               [12] 2378 	inc	@r0
      000A15                       2379 00603$:
      000A15 78r15            [12] 2380 	mov	r0,#_y
      000A17 C3               [12] 2381 	clr	c
      000A18 E6               [12] 2382 	mov	a,@r0
      000A19 94 C0            [12] 2383 	subb	a,#0xc0
      000A1B 08               [12] 2384 	inc	r0
      000A1C E6               [12] 2385 	mov	a,@r0
      000A1D 64 80            [12] 2386 	xrl	a,#0x80
      000A1F 94 80            [12] 2387 	subb	a,#0x80
      000A21 50 03            [24] 2388 	jnc	00604$
      000A23 02r06r60         [24] 2389 	ljmp	00240$
      000A26                       2390 00604$:
                                   2391 ;	life.c:265: OE76 = OE76_0;
      000A26 78r12            [12] 2392 	mov	r0,#_OE76
      000A28 76 3F            [12] 2393 	mov	@r0,#0x3f
                                   2394 ;	life.c:266: flashOE();
      000A2A 12r00r48         [24] 2395 	lcall	_flashOE
                                   2396 ;	life.c:268: cycle2 = !cycle2;
      000A2D 78r1D            [12] 2397 	mov	r0,#_cycle2
      000A2F E6               [12] 2398 	mov	a,@r0
      000A30 B4 01 00         [24] 2399 	cjne	a,#0x01,00605$
      000A33                       2400 00605$:
      000A33 92*00            [24] 2401 	mov	b0,c
      000A35 78r1D            [12] 2402 	mov	r0,#_cycle2
      000A37 E4               [12] 2403 	clr	a
      000A38 33               [12] 2404 	rlc	a
      000A39 F6               [12] 2405 	mov	@r0,a
                                   2406 ;	life.c:269: fixed = !fixed;
      000A3A 78r1C            [12] 2407 	mov	r0,#_fixed
      000A3C E6               [12] 2408 	mov	a,@r0
      000A3D B4 01 00         [24] 2409 	cjne	a,#0x01,00606$
      000A40                       2410 00606$:
      000A40 92*00            [24] 2411 	mov	b0,c
      000A42 78r1C            [12] 2412 	mov	r0,#_fixed
      000A44 E4               [12] 2413 	clr	a
      000A45 33               [12] 2414 	rlc	a
      000A46 F6               [12] 2415 	mov	@r0,a
                                   2416 ;	life.c:271: memcpy(pu, u, sizeof (u));
      000A47 E4               [12] 2417 	clr	a
      000A48 C0 E0            [24] 2418 	push	acc
      000A4A 74 24            [12] 2419 	mov	a,#0x24
      000A4C C0 E0            [24] 2420 	push	acc
      000A4E 74r00            [12] 2421 	mov	a,#_u
      000A50 C0 E0            [24] 2422 	push	acc
      000A52 74s48            [12] 2423 	mov	a,#(_u >> 8)
      000A54 C0 E0            [24] 2424 	push	acc
      000A56 E4               [12] 2425 	clr	a
      000A57 C0 E0            [24] 2426 	push	acc
      000A59 90r24r00         [24] 2427 	mov	dptr,#_pu
      000A5C 75 F0 00         [24] 2428 	mov	b,#0x00
      000A5F 12r00r00         [24] 2429 	lcall	___memcpy
      000A62 E5 81            [12] 2430 	mov	a,sp
      000A64 24 FB            [12] 2431 	add	a,#0xfb
      000A66 F5 81            [12] 2432 	mov	sp,a
                                   2433 ;	life.c:272: memcpy(u, nu, sizeof (nu));
      000A68 E4               [12] 2434 	clr	a
      000A69 C0 E0            [24] 2435 	push	acc
      000A6B 74 24            [12] 2436 	mov	a,#0x24
      000A6D C0 E0            [24] 2437 	push	acc
      000A6F 74r00            [12] 2438 	mov	a,#_nu
      000A71 C0 E0            [24] 2439 	push	acc
      000A73 74s6C            [12] 2440 	mov	a,#(_nu >> 8)
      000A75 C0 E0            [24] 2441 	push	acc
      000A77 E4               [12] 2442 	clr	a
      000A78 C0 E0            [24] 2443 	push	acc
      000A7A 90r48r00         [24] 2444 	mov	dptr,#_u
      000A7D 75 F0 00         [24] 2445 	mov	b,#0x00
      000A80 12r00r00         [24] 2446 	lcall	___memcpy
      000A83 E5 81            [12] 2447 	mov	a,sp
      000A85 24 FB            [12] 2448 	add	a,#0xfb
      000A87 F5 81            [12] 2449 	mov	sp,a
                                   2450 ;	life.c:326: if (fixed || cycle2) {
      000A89 78r1C            [12] 2451 	mov	r0,#_fixed
      000A8B E6               [12] 2452 	mov	a,@r0
      000A8C 70 05            [24] 2453 	jnz	00135$
      000A8E 78r1D            [12] 2454 	mov	r0,#_cycle2
      000A90 E6               [12] 2455 	mov	a,@r0
      000A91 60 70            [24] 2456 	jz	00136$
      000A93                       2457 00135$:
                                   2458 ;	life.c:327: printstr("DONE ");
      000A93 7Dr64            [12] 2459 	mov	r5,#___str_10
      000A95 7Es00            [12] 2460 	mov	r6,#(___str_10 >> 8)
      000A97 7F 80            [12] 2461 	mov	r7,#0x80
                                   2462 ;	life.c:73: return;
      000A99                       2463 00243$:
                                   2464 ;	life.c:71: for (; *s; s++) putchar(*s);
      000A99 8D 82            [24] 2465 	mov	dpl,r5
      000A9B 8E 83            [24] 2466 	mov	dph,r6
      000A9D 8F F0            [24] 2467 	mov	b,r7
      000A9F 12r00r00         [24] 2468 	lcall	__gptrget
      000AA2 FC               [12] 2469 	mov	r4,a
      000AA3 60 10            [24] 2470 	jz	00201$
      000AA5 7B 00            [12] 2471 	mov	r3,#0x00
      000AA7 8C 82            [24] 2472 	mov	dpl,r4
      000AA9 8B 83            [24] 2473 	mov	dph,r3
      000AAB 12r00r00         [24] 2474 	lcall	_putchar
      000AAE 0D               [12] 2475 	inc	r5
                                   2476 ;	life.c:327: printstr("DONE ");
      000AAF BD 00 E7         [24] 2477 	cjne	r5,#0x00,00243$
      000AB2 0E               [12] 2478 	inc	r6
      000AB3 80 E4            [24] 2479 	sjmp	00243$
      000AB5                       2480 00201$:
                                   2481 ;	life.c:328: if (fixed) printstr("FIXED\r\n");
      000AB5 78r1C            [12] 2482 	mov	r0,#_fixed
      000AB7 E6               [12] 2483 	mov	a,@r0
      000AB8 60 22            [24] 2484 	jz	00133$
      000ABA 7Dr6A            [12] 2485 	mov	r5,#___str_11
      000ABC 7Es00            [12] 2486 	mov	r6,#(___str_11 >> 8)
      000ABE 7F 80            [12] 2487 	mov	r7,#0x80
                                   2488 ;	life.c:73: return;
      000AC0                       2489 00246$:
                                   2490 ;	life.c:71: for (; *s; s++) putchar(*s);
      000AC0 8D 82            [24] 2491 	mov	dpl,r5
      000AC2 8E 83            [24] 2492 	mov	dph,r6
      000AC4 8F F0            [24] 2493 	mov	b,r7
      000AC6 12r00r00         [24] 2494 	lcall	__gptrget
      000AC9 FC               [12] 2495 	mov	r4,a
      000ACA 60 32            [24] 2496 	jz	00134$
      000ACC 7B 00            [12] 2497 	mov	r3,#0x00
      000ACE 8C 82            [24] 2498 	mov	dpl,r4
      000AD0 8B 83            [24] 2499 	mov	dph,r3
      000AD2 12r00r00         [24] 2500 	lcall	_putchar
      000AD5 0D               [12] 2501 	inc	r5
                                   2502 ;	life.c:328: if (fixed) printstr("FIXED\r\n");
      000AD6 BD 00 E7         [24] 2503 	cjne	r5,#0x00,00246$
      000AD9 0E               [12] 2504 	inc	r6
      000ADA 80 E4            [24] 2505 	sjmp	00246$
      000ADC                       2506 00133$:
                                   2507 ;	life.c:329: else printstr("CYCLE2\r\n");
      000ADC 7Dr72            [12] 2508 	mov	r5,#___str_12
      000ADE 7Es00            [12] 2509 	mov	r6,#(___str_12 >> 8)
      000AE0 7F 80            [12] 2510 	mov	r7,#0x80
                                   2511 ;	life.c:73: return;
      000AE2                       2512 00249$:
                                   2513 ;	life.c:71: for (; *s; s++) putchar(*s);
      000AE2 8D 82            [24] 2514 	mov	dpl,r5
      000AE4 8E 83            [24] 2515 	mov	dph,r6
      000AE6 8F F0            [24] 2516 	mov	b,r7
      000AE8 12r00r00         [24] 2517 	lcall	__gptrget
      000AEB FC               [12] 2518 	mov	r4,a
      000AEC 60 10            [24] 2519 	jz	00134$
      000AEE 7B 00            [12] 2520 	mov	r3,#0x00
      000AF0 8C 82            [24] 2521 	mov	dpl,r4
      000AF2 8B 83            [24] 2522 	mov	dph,r3
      000AF4 12r00r00         [24] 2523 	lcall	_putchar
      000AF7 0D               [12] 2524 	inc	r5
                                   2525 ;	life.c:329: else printstr("CYCLE2\r\n");
      000AF8 BD 00 E7         [24] 2526 	cjne	r5,#0x00,00249$
      000AFB 0E               [12] 2527 	inc	r6
      000AFC 80 E4            [24] 2528 	sjmp	00249$
      000AFE                       2529 00134$:
                                   2530 ;	life.c:330: (void)getchar();
      000AFE 12r00r09         [24] 2531 	lcall	_getchar
                                   2532 ;	life.c:331: break;
      000B01 80 50            [24] 2533 	sjmp	00145$
      000B03                       2534 00136$:
                                   2535 ;	life.c:334: c = getchar_poll();
      000B03 12r00r16         [24] 2536 	lcall	_getchar_poll
      000B06 AE 82            [24] 2537 	mov	r6,dpl
      000B08 AF 83            [24] 2538 	mov	r7,dph
      000B0A 78r19            [12] 2539 	mov	r0,#_c
      000B0C A6 06            [24] 2540 	mov	@r0,ar6
      000B0E 08               [12] 2541 	inc	r0
      000B0F A6 07            [24] 2542 	mov	@r0,ar7
                                   2543 ;	life.c:335: if (c > 0) {
      000B11 C3               [12] 2544 	clr	c
      000B12 E4               [12] 2545 	clr	a
      000B13 9E               [12] 2546 	subb	a,r6
      000B14 74 80            [12] 2547 	mov	a,#(0x00 ^ 0x80)
      000B16 8F F0            [24] 2548 	mov	b,r7
      000B18 63 F0 80         [24] 2549 	xrl	b,#0x80
      000B1B 95 F0            [12] 2550 	subb	a,b
      000B1D 40 03            [24] 2551 	jc	00616$
      000B1F 02r06r35         [24] 2552 	ljmp	00253$
      000B22                       2553 00616$:
                                   2554 ;	life.c:336: c = toupper(c);
      000B22 8E 82            [24] 2555 	mov	dpl,r6
      000B24 8F 83            [24] 2556 	mov	dph,r7
      000B26 12r00r00         [24] 2557 	lcall	_toupper
      000B29 AE 82            [24] 2558 	mov	r6,dpl
      000B2B AF 83            [24] 2559 	mov	r7,dph
      000B2D 78r19            [12] 2560 	mov	r0,#_c
      000B2F A6 06            [24] 2561 	mov	@r0,ar6
      000B31 08               [12] 2562 	inc	r0
      000B32 A6 07            [24] 2563 	mov	@r0,ar7
                                   2564 ;	life.c:337: if (c == (int)'T') i0 = 1;
      000B34 BE 54 0A         [24] 2565 	cjne	r6,#0x54,00141$
      000B37 BF 00 07         [24] 2566 	cjne	r7,#0x00,00141$
      000B3A 78r10            [12] 2567 	mov	r0,#_i0
      000B3C 76 01            [12] 2568 	mov	@r0,#0x01
      000B3E 02r06r35         [24] 2569 	ljmp	00253$
      000B41                       2570 00141$:
                                   2571 ;	life.c:338: else if (c == (int)'B') i1 = 1;
      000B41 BE 42 05         [24] 2572 	cjne	r6,#0x42,00619$
      000B44 BF 00 02         [24] 2573 	cjne	r7,#0x00,00619$
      000B47 80 03            [24] 2574 	sjmp	00620$
      000B49                       2575 00619$:
      000B49 02r06r35         [24] 2576 	ljmp	00253$
      000B4C                       2577 00620$:
      000B4C 78r11            [12] 2578 	mov	r0,#_i1
      000B4E 76 01            [12] 2579 	mov	@r0,#0x01
      000B50 02r06r35         [24] 2580 	ljmp	00253$
      000B53                       2581 00145$:
                                   2582 ;	life.c:342: if (i1) {
      000B53 78r11            [12] 2583 	mov	r0,#_i1
      000B55 E6               [12] 2584 	mov	a,@r0
      000B56 60 25            [24] 2585 	jz	00259$
                                   2586 ;	life.c:343: printstr("BREAK\r\n");
      000B58 7Dr7B            [12] 2587 	mov	r5,#___str_13
      000B5A 7Es00            [12] 2588 	mov	r6,#(___str_13 >> 8)
      000B5C 7F 80            [12] 2589 	mov	r7,#0x80
                                   2590 ;	life.c:73: return;
      000B5E                       2591 00256$:
                                   2592 ;	life.c:71: for (; *s; s++) putchar(*s);
      000B5E 8D 82            [24] 2593 	mov	dpl,r5
      000B60 8E 83            [24] 2594 	mov	dph,r6
      000B62 8F F0            [24] 2595 	mov	b,r7
      000B64 12r00r00         [24] 2596 	lcall	__gptrget
      000B67 FC               [12] 2597 	mov	r4,a
      000B68 60 10            [24] 2598 	jz	00207$
      000B6A 7B 00            [12] 2599 	mov	r3,#0x00
      000B6C 8C 82            [24] 2600 	mov	dpl,r4
      000B6E 8B 83            [24] 2601 	mov	dph,r3
      000B70 12r00r00         [24] 2602 	lcall	_putchar
      000B73 0D               [12] 2603 	inc	r5
                                   2604 ;	life.c:343: printstr("BREAK\r\n");
      000B74 BD 00 E7         [24] 2605 	cjne	r5,#0x00,00256$
      000B77 0E               [12] 2606 	inc	r6
      000B78 80 E4            [24] 2607 	sjmp	00256$
      000B7A                       2608 00207$:
                                   2609 ;	life.c:344: (void)getchar();
      000B7A 12r00r09         [24] 2610 	lcall	_getchar
      000B7D                       2611 00259$:
                                   2612 ;	life.c:297: for (i0 = 0; !i0; ) {	
      000B7D 78r10            [12] 2613 	mov	r0,#_i0
      000B7F E6               [12] 2614 	mov	a,@r0
      000B80 70 03            [24] 2615 	jnz	00624$
      000B82 02r02rCC         [24] 2616 	ljmp	00258$
      000B85                       2617 00624$:
                                   2618 ;	life.c:348: term:
      000B85                       2619 00149$:
                                   2620 ;	life.c:349: EA = 0;
                                   2621 ;	assignBit
      000B85 C2 AF            [12] 2622 	clr	_EA
                                   2623 ;	life.c:350: printstr("TERM\r\n");
      000B87 7Dr83            [12] 2624 	mov	r5,#___str_14
      000B89 7Es00            [12] 2625 	mov	r6,#(___str_14 >> 8)
      000B8B 7F 80            [12] 2626 	mov	r7,#0x80
                                   2627 ;	life.c:73: return;
      000B8D                       2628 00261$:
                                   2629 ;	life.c:71: for (; *s; s++) putchar(*s);
      000B8D 8D 82            [24] 2630 	mov	dpl,r5
      000B8F 8E 83            [24] 2631 	mov	dph,r6
      000B91 8F F0            [24] 2632 	mov	b,r7
      000B93 12r00r00         [24] 2633 	lcall	__gptrget
      000B96 FC               [12] 2634 	mov	r4,a
      000B97 60 10            [24] 2635 	jz	00209$
      000B99 7B 00            [12] 2636 	mov	r3,#0x00
      000B9B 8C 82            [24] 2637 	mov	dpl,r4
      000B9D 8B 83            [24] 2638 	mov	dph,r3
      000B9F 12r00r00         [24] 2639 	lcall	_putchar
      000BA2 0D               [12] 2640 	inc	r5
                                   2641 ;	life.c:350: printstr("TERM\r\n");
      000BA3 BD 00 E7         [24] 2642 	cjne	r5,#0x00,00261$
      000BA6 0E               [12] 2643 	inc	r6
      000BA7 80 E4            [24] 2644 	sjmp	00261$
      000BA9                       2645 00209$:
                                   2646 ;	life.c:351: (void)getchar();
      000BA9 12r00r09         [24] 2647 	lcall	_getchar
                                   2648 ;	life.c:353: PCON |= 2;
      000BAC 43 87 02         [24] 2649 	orl	_PCON,#0x02
                                   2650 ;	life.c:355: return;
                                   2651 ;	life.c:356: }
      000BAF 85*00 81         [24] 2652 	mov	sp,_bp
      000BB2 D0*00            [24] 2653 	pop	_bp
      000BB4 22               [24] 2654 	ret
                                   2655 	.area CSEG    (CODE)
                                   2656 	.area CONST   (CODE)
                                   2657 	.area CONST   (CODE)
      000000                       2658 ___str_0:
      000000 1B                    2659 	.db 0x1b
      000001 5B 3F 32 35 6C        2660 	.ascii "[?25l"
      000006 00                    2661 	.db 0x00
                                   2662 	.area CSEG    (CODE)
                                   2663 	.area CONST   (CODE)
      000007                       2664 ___str_1:
      000007 1B                    2665 	.db 0x1b
      000008 5B 32 4A 47 45 4E 20  2666 	.ascii "[2JGEN "
      00000F 00                    2667 	.db 0x00
                                   2668 	.area CSEG    (CODE)
                                   2669 	.area CONST   (CODE)
      000010                       2670 ___str_2:
      000010 0D                    2671 	.db 0x0d
      000011 0A                    2672 	.db 0x0a
      000012 00                    2673 	.db 0x00
                                   2674 	.area CSEG    (CODE)
                                   2675 	.area CONST   (CODE)
      000013                       2676 ___str_3:
      000013 1B                    2677 	.db 0x1b
      000014 5B 3F 32 35 68        2678 	.ascii "[?25h"
      000019 00                    2679 	.db 0x00
                                   2680 	.area CSEG    (CODE)
                                   2681 	.area CONST   (CODE)
      00001A                       2682 ___str_4:
      00001A 4C 4F 41 44 20 30 20  2683 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000028 00                    2684 	.db 0x00
                                   2685 	.area CSEG    (CODE)
                                   2686 	.area CONST   (CODE)
      000029                       2687 ___str_5:
      000029 3E                    2688 	.ascii ">"
      00002A 0D                    2689 	.db 0x0d
      00002B 0A                    2690 	.db 0x0a
      00002C 00                    2691 	.db 0x00
                                   2692 	.area CSEG    (CODE)
                                   2693 	.area CONST   (CODE)
      00002D                       2694 ___str_6:
      00002D 52 41 4E 44 4F 4D     2695 	.ascii "RANDOM"
      000033 00                    2696 	.db 0x00
                                   2697 	.area CSEG    (CODE)
                                   2698 	.area CONST   (CODE)
      000034                       2699 ___str_7:
      000034 1B                    2700 	.db 0x1b
      000035 5B 3F 32 35 68        2701 	.ascii "[?25h"
      00003A 1B                    2702 	.db 0x1b
      00003B 5B 6D                 2703 	.ascii "[m"
      00003D 00                    2704 	.db 0x00
                                   2705 	.area CSEG    (CODE)
                                   2706 	.area CONST   (CODE)
      00003E                       2707 ___str_8:
      00003E 4C 49 46 45 20 49 4E  2708 	.ascii "LIFE INIT T L R P"
             49 54 20 54 20 4C 20
             52 20 50
      00004F 0D                    2709 	.db 0x0d
      000050 0A                    2710 	.db 0x0a
      000051 00                    2711 	.db 0x00
                                   2712 	.area CSEG    (CODE)
                                   2713 	.area CONST   (CODE)
      000052                       2714 ___str_9:
      000052 52 45 41 44 59 20 54  2715 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000061 0D                    2716 	.db 0x0d
      000062 0A                    2717 	.db 0x0a
      000063 00                    2718 	.db 0x00
                                   2719 	.area CSEG    (CODE)
                                   2720 	.area CONST   (CODE)
      000064                       2721 ___str_10:
      000064 44 4F 4E 45 20        2722 	.ascii "DONE "
      000069 00                    2723 	.db 0x00
                                   2724 	.area CSEG    (CODE)
                                   2725 	.area CONST   (CODE)
      00006A                       2726 ___str_11:
      00006A 46 49 58 45 44        2727 	.ascii "FIXED"
      00006F 0D                    2728 	.db 0x0d
      000070 0A                    2729 	.db 0x0a
      000071 00                    2730 	.db 0x00
                                   2731 	.area CSEG    (CODE)
                                   2732 	.area CONST   (CODE)
      000072                       2733 ___str_12:
      000072 43 59 43 4C 45 32     2734 	.ascii "CYCLE2"
      000078 0D                    2735 	.db 0x0d
      000079 0A                    2736 	.db 0x0a
      00007A 00                    2737 	.db 0x00
                                   2738 	.area CSEG    (CODE)
                                   2739 	.area CONST   (CODE)
      00007B                       2740 ___str_13:
      00007B 42 52 45 41 4B        2741 	.ascii "BREAK"
      000080 0D                    2742 	.db 0x0d
      000081 0A                    2743 	.db 0x0a
      000082 00                    2744 	.db 0x00
                                   2745 	.area CSEG    (CODE)
                                   2746 	.area CONST   (CODE)
      000083                       2747 ___str_14:
      000083 54 45 52 4D           2748 	.ascii "TERM"
      000087 0D                    2749 	.db 0x0d
      000088 0A                    2750 	.db 0x0a
      000089 00                    2751 	.db 0x00
                                   2752 	.area CSEG    (CODE)
                                   2753 	.area XINIT   (CODE)
                                   2754 	.area CABS    (ABS,CODE)
