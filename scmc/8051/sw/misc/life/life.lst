                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _FL
                                     27 	.globl _P
                                     28 	.globl _TF2
                                     29 	.globl _EXF2
                                     30 	.globl _RCLK
                                     31 	.globl _TCLK
                                     32 	.globl _EXEN2
                                     33 	.globl _TR2
                                     34 	.globl _C_T2
                                     35 	.globl _CP_RL2
                                     36 	.globl _T2CON_7
                                     37 	.globl _T2CON_6
                                     38 	.globl _T2CON_5
                                     39 	.globl _T2CON_4
                                     40 	.globl _T2CON_3
                                     41 	.globl _T2CON_2
                                     42 	.globl _T2CON_1
                                     43 	.globl _T2CON_0
                                     44 	.globl _PT2
                                     45 	.globl _PS
                                     46 	.globl _PT1
                                     47 	.globl _PX1
                                     48 	.globl _PT0
                                     49 	.globl _PX0
                                     50 	.globl _RD
                                     51 	.globl _WR
                                     52 	.globl _T1
                                     53 	.globl _T0
                                     54 	.globl _INT1
                                     55 	.globl _INT0
                                     56 	.globl _TXD
                                     57 	.globl _RXD
                                     58 	.globl _P3_7
                                     59 	.globl _P3_6
                                     60 	.globl _P3_5
                                     61 	.globl _P3_4
                                     62 	.globl _P3_3
                                     63 	.globl _P3_2
                                     64 	.globl _P3_1
                                     65 	.globl _P3_0
                                     66 	.globl _EA
                                     67 	.globl _ET2
                                     68 	.globl _ES
                                     69 	.globl _ET1
                                     70 	.globl _EX1
                                     71 	.globl _ET0
                                     72 	.globl _EX0
                                     73 	.globl _P2_7
                                     74 	.globl _P2_6
                                     75 	.globl _P2_5
                                     76 	.globl _P2_4
                                     77 	.globl _P2_3
                                     78 	.globl _P2_2
                                     79 	.globl _P2_1
                                     80 	.globl _P2_0
                                     81 	.globl _SM0
                                     82 	.globl _SM1
                                     83 	.globl _SM2
                                     84 	.globl _REN
                                     85 	.globl _TB8
                                     86 	.globl _RB8
                                     87 	.globl _TI
                                     88 	.globl _RI
                                     89 	.globl _T2EX
                                     90 	.globl _T2
                                     91 	.globl _P1_7
                                     92 	.globl _P1_6
                                     93 	.globl _P1_5
                                     94 	.globl _P1_4
                                     95 	.globl _P1_3
                                     96 	.globl _P1_2
                                     97 	.globl _P1_1
                                     98 	.globl _P1_0
                                     99 	.globl _TF1
                                    100 	.globl _TR1
                                    101 	.globl _TF0
                                    102 	.globl _TR0
                                    103 	.globl _IE1
                                    104 	.globl _IT1
                                    105 	.globl _IE0
                                    106 	.globl _IT0
                                    107 	.globl _P0_7
                                    108 	.globl _P0_6
                                    109 	.globl _P0_5
                                    110 	.globl _P0_4
                                    111 	.globl _P0_3
                                    112 	.globl _P0_2
                                    113 	.globl _P0_1
                                    114 	.globl _P0_0
                                    115 	.globl _B
                                    116 	.globl _A
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _TH2
                                    120 	.globl _TL2
                                    121 	.globl _RCAP2H
                                    122 	.globl _RCAP2L
                                    123 	.globl _T2MOD
                                    124 	.globl _T2CON
                                    125 	.globl _IP
                                    126 	.globl _P3
                                    127 	.globl _IE
                                    128 	.globl _P2
                                    129 	.globl _SBUF
                                    130 	.globl _SCON
                                    131 	.globl _P1
                                    132 	.globl _TH1
                                    133 	.globl _TH0
                                    134 	.globl _TL1
                                    135 	.globl _TL0
                                    136 	.globl _TMOD
                                    137 	.globl _TCON
                                    138 	.globl _PCON
                                    139 	.globl _DPH
                                    140 	.globl _DPL
                                    141 	.globl _SP
                                    142 	.globl _P0
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000C8   166 _T2CON	=	0x00c8
                           0000C9   167 _T2MOD	=	0x00c9
                           0000CA   168 _RCAP2L	=	0x00ca
                           0000CB   169 _RCAP2H	=	0x00cb
                           0000CC   170 _TL2	=	0x00cc
                           0000CD   171 _TH2	=	0x00cd
                           0000D0   172 _PSW	=	0x00d0
                           0000E0   173 _ACC	=	0x00e0
                           0000E0   174 _A	=	0x00e0
                           0000F0   175 _B	=	0x00f0
                                    176 ;--------------------------------------------------------
                                    177 ; special function bits
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0_0	=	0x0080
                           000081   182 _P0_1	=	0x0081
                           000082   183 _P0_2	=	0x0082
                           000083   184 _P0_3	=	0x0083
                           000084   185 _P0_4	=	0x0084
                           000085   186 _P0_5	=	0x0085
                           000086   187 _P0_6	=	0x0086
                           000087   188 _P0_7	=	0x0087
                           000088   189 _IT0	=	0x0088
                           000089   190 _IE0	=	0x0089
                           00008A   191 _IT1	=	0x008a
                           00008B   192 _IE1	=	0x008b
                           00008C   193 _TR0	=	0x008c
                           00008D   194 _TF0	=	0x008d
                           00008E   195 _TR1	=	0x008e
                           00008F   196 _TF1	=	0x008f
                           000090   197 _P1_0	=	0x0090
                           000091   198 _P1_1	=	0x0091
                           000092   199 _P1_2	=	0x0092
                           000093   200 _P1_3	=	0x0093
                           000094   201 _P1_4	=	0x0094
                           000095   202 _P1_5	=	0x0095
                           000096   203 _P1_6	=	0x0096
                           000097   204 _P1_7	=	0x0097
                           000090   205 _T2	=	0x0090
                           000091   206 _T2EX	=	0x0091
                           000098   207 _RI	=	0x0098
                           000099   208 _TI	=	0x0099
                           00009A   209 _RB8	=	0x009a
                           00009B   210 _TB8	=	0x009b
                           00009C   211 _REN	=	0x009c
                           00009D   212 _SM2	=	0x009d
                           00009E   213 _SM1	=	0x009e
                           00009F   214 _SM0	=	0x009f
                           0000A0   215 _P2_0	=	0x00a0
                           0000A1   216 _P2_1	=	0x00a1
                           0000A2   217 _P2_2	=	0x00a2
                           0000A3   218 _P2_3	=	0x00a3
                           0000A4   219 _P2_4	=	0x00a4
                           0000A5   220 _P2_5	=	0x00a5
                           0000A6   221 _P2_6	=	0x00a6
                           0000A7   222 _P2_7	=	0x00a7
                           0000A8   223 _EX0	=	0x00a8
                           0000A9   224 _ET0	=	0x00a9
                           0000AA   225 _EX1	=	0x00aa
                           0000AB   226 _ET1	=	0x00ab
                           0000AC   227 _ES	=	0x00ac
                           0000AD   228 _ET2	=	0x00ad
                           0000AF   229 _EA	=	0x00af
                           0000B0   230 _P3_0	=	0x00b0
                           0000B1   231 _P3_1	=	0x00b1
                           0000B2   232 _P3_2	=	0x00b2
                           0000B3   233 _P3_3	=	0x00b3
                           0000B4   234 _P3_4	=	0x00b4
                           0000B5   235 _P3_5	=	0x00b5
                           0000B6   236 _P3_6	=	0x00b6
                           0000B7   237 _P3_7	=	0x00b7
                           0000B0   238 _RXD	=	0x00b0
                           0000B1   239 _TXD	=	0x00b1
                           0000B2   240 _INT0	=	0x00b2
                           0000B3   241 _INT1	=	0x00b3
                           0000B4   242 _T0	=	0x00b4
                           0000B5   243 _T1	=	0x00b5
                           0000B6   244 _WR	=	0x00b6
                           0000B7   245 _RD	=	0x00b7
                           0000B8   246 _PX0	=	0x00b8
                           0000B9   247 _PT0	=	0x00b9
                           0000BA   248 _PX1	=	0x00ba
                           0000BB   249 _PT1	=	0x00bb
                           0000BC   250 _PS	=	0x00bc
                           0000BD   251 _PT2	=	0x00bd
                           0000C8   252 _T2CON_0	=	0x00c8
                           0000C9   253 _T2CON_1	=	0x00c9
                           0000CA   254 _T2CON_2	=	0x00ca
                           0000CB   255 _T2CON_3	=	0x00cb
                           0000CC   256 _T2CON_4	=	0x00cc
                           0000CD   257 _T2CON_5	=	0x00cd
                           0000CE   258 _T2CON_6	=	0x00ce
                           0000CF   259 _T2CON_7	=	0x00cf
                           0000C8   260 _CP_RL2	=	0x00c8
                           0000C9   261 _C_T2	=	0x00c9
                           0000CA   262 _TR2	=	0x00ca
                           0000CB   263 _EXEN2	=	0x00cb
                           0000CC   264 _TCLK	=	0x00cc
                           0000CD   265 _RCLK	=	0x00cd
                           0000CE   266 _EXF2	=	0x00ce
                           0000CF   267 _TF2	=	0x00cf
                           0000D0   268 _P	=	0x00d0
                           0000D1   269 _FL	=	0x00d1
                           0000D2   270 _OV	=	0x00d2
                           0000D3   271 _RS0	=	0x00d3
                           0000D4   272 _RS1	=	0x00d4
                           0000D5   273 _F0	=	0x00d5
                           0000D6   274 _AC	=	0x00d6
                           0000D7   275 _CY	=	0x00d7
                                    276 ;--------------------------------------------------------
                                    277 ; overlayable register banks
                                    278 ;--------------------------------------------------------
                                    279 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        280 	.ds 8
                                    281 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable bit register bank
                                    285 ;--------------------------------------------------------
                                    286 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        287 bits:
      000000                        288 	.ds 1
                           008000   289 	b0 = bits[0]
                           008100   290 	b1 = bits[1]
                           008200   291 	b2 = bits[2]
                           008300   292 	b3 = bits[3]
                           008400   293 	b4 = bits[4]
                           008500   294 	b5 = bits[5]
                           008600   295 	b6 = bits[6]
                           008700   296 	b7 = bits[7]
                                    297 ;--------------------------------------------------------
                                    298 ; internal ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area DSEG    (DATA)
                                    301 ;--------------------------------------------------------
                                    302 ; overlayable items in internal ram 
                                    303 ;--------------------------------------------------------
                                    304 ;--------------------------------------------------------
                                    305 ; Stack segment in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 	.area	SSEG
      000000                        308 __start__stack:
      000000                        309 	.ds	1
                                    310 
                                    311 ;--------------------------------------------------------
                                    312 ; indirectly addressable internal ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area ISEG    (DATA)
      000000                        315 _digits:
      000000                        316 	.ds 16
      000010                        317 _i0:
      000010                        318 	.ds 1
      000011                        319 _i1:
      000011                        320 	.ds 1
      000012                        321 _x:
      000012                        322 	.ds 2
      000014                        323 _y:
      000014                        324 	.ds 2
      000016                        325 _j:
      000016                        326 	.ds 2
      000018                        327 _c:
      000018                        328 	.ds 2
      00001A                        329 _bstep:
      00001A                        330 	.ds 1
      00001B                        331 _n:
      00001B                        332 	.ds 1
      00001C                        333 _fixed:
      00001C                        334 	.ds 1
      00001D                        335 _cycle2:
      00001D                        336 	.ds 1
      00001E                        337 _x1:
      00001E                        338 	.ds 2
      000020                        339 _y1:
      000020                        340 	.ds 2
      000022                        341 _generation:
      000022                        342 	.ds 4
      000026                        343 _busy:
      000026                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
      000000                        362 _pu:
      000000                        363 	.ds 2048
      000800                        364 _u:
      000800                        365 	.ds 2048
      001000                        366 _nu:
      001000                        367 	.ds 2048
                                    368 ;--------------------------------------------------------
                                    369 ; absolute external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XABS    (ABS,XDATA)
                                    372 ;--------------------------------------------------------
                                    373 ; external initialized ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XISEG   (XDATA)
                                    376 	.area HOME    (CODE)
                                    377 	.area GSINIT0 (CODE)
                                    378 	.area GSINIT1 (CODE)
                                    379 	.area GSINIT2 (CODE)
                                    380 	.area GSINIT3 (CODE)
                                    381 	.area GSINIT4 (CODE)
                                    382 	.area GSINIT5 (CODE)
                                    383 	.area GSINIT  (CODE)
                                    384 	.area GSFINAL (CODE)
                                    385 	.area CSEG    (CODE)
                                    386 ;--------------------------------------------------------
                                    387 ; interrupt vector 
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
      000000                        390 __interrupt_vect:
      000000 02r00r00         [24]  391 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  392 	ljmp	_int0
      000006                        393 	.ds	5
      00000B 32               [24]  394 	reti
      00000C                        395 	.ds	7
      000013 02r00r1A         [24]  396 	ljmp	_int1
                                    397 ;--------------------------------------------------------
                                    398 ; global & static initialisations
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
                                    401 	.area GSINIT  (CODE)
                                    402 	.area GSFINAL (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.globl __sdcc_gsinit_startup
                                    405 	.globl __sdcc_program_startup
                                    406 	.globl __start__stack
                                    407 	.globl __mcs51_genXINIT
                                    408 	.globl __mcs51_genXRAMCLEAR
                                    409 	.globl __mcs51_genRAMCLEAR
                                    410 ;	life.c:25: __idata static const char digits[16] = {
      000000 78r00            [12]  411 	mov	r0,#_digits
      000002 76 30            [12]  412 	mov	@r0,#0x30
      000004 78r01            [12]  413 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  414 	mov	@r0,#0x31
      000008 78r02            [12]  415 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  416 	mov	@r0,#0x32
      00000C 78r03            [12]  417 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  418 	mov	@r0,#0x33
      000010 78r04            [12]  419 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  420 	mov	@r0,#0x34
      000014 78r05            [12]  421 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  422 	mov	@r0,#0x35
      000018 78r06            [12]  423 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  424 	mov	@r0,#0x36
      00001C 78r07            [12]  425 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  426 	mov	@r0,#0x37
      000020 78r08            [12]  427 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  428 	mov	@r0,#0x38
      000024 78r09            [12]  429 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  430 	mov	@r0,#0x39
      000028 78r0A            [12]  431 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  432 	mov	@r0,#0x41
      00002C 78r0B            [12]  433 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  434 	mov	@r0,#0x42
      000030 78r0C            [12]  435 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  436 	mov	@r0,#0x43
      000034 78r0D            [12]  437 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  438 	mov	@r0,#0x44
      000038 78r0E            [12]  439 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  440 	mov	@r0,#0x45
      00003C 78r0F            [12]  441 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  442 	mov	@r0,#0x46
                                    443 ;	life.c:153: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000040 78r26            [12]  444 	mov	r0,#_busy
      000042 76 5C            [12]  445 	mov	@r0,#0x5c
      000044 78r27            [12]  446 	mov	r0,#(_busy + 0x0001)
      000046 76 7C            [12]  447 	mov	@r0,#0x7c
      000048 78r28            [12]  448 	mov	r0,#(_busy + 0x0002)
      00004A 76 2F            [12]  449 	mov	@r0,#0x2f
      00004C 78r29            [12]  450 	mov	r0,#(_busy + 0x0003)
      00004E 76 2D            [12]  451 	mov	@r0,#0x2d
                                    452 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  453 	ljmp	__sdcc_program_startup
                                    454 ;--------------------------------------------------------
                                    455 ; Home
                                    456 ;--------------------------------------------------------
                                    457 	.area HOME    (CODE)
                                    458 	.area HOME    (CODE)
      000016                        459 __sdcc_program_startup:
      000016 02r02r23         [24]  460 	ljmp	_main
                                    461 ;	return from main will return to caller
                                    462 ;--------------------------------------------------------
                                    463 ; code
                                    464 ;--------------------------------------------------------
                                    465 	.area CSEG    (CODE)
                                    466 ;------------------------------------------------------------
                                    467 ;Allocation info for local variables in function 'putchar'
                                    468 ;------------------------------------------------------------
                                    469 ;c                         Allocated to registers 
                                    470 ;------------------------------------------------------------
                                    471 ;	life.c:8: int putchar(int c) __naked {
                                    472 ;	-----------------------------------------
                                    473 ;	 function putchar
                                    474 ;	-----------------------------------------
      000000                        475 _putchar:
                                    476 ;	naked function: no prologue.
                                    477 ;	life.c:13: __endasm;
      000000 E5 82            [12]  478 	mov	a, dpl
      000002 02 00 30         [24]  479 	ljmp	0x0030
                                    480 ;	life.c:14: }
                                    481 ;	naked function: no epilogue.
                                    482 ;------------------------------------------------------------
                                    483 ;Allocation info for local variables in function 'getchar'
                                    484 ;------------------------------------------------------------
                                    485 ;	life.c:16: int getchar(void) __naked {
                                    486 ;	-----------------------------------------
                                    487 ;	 function getchar
                                    488 ;	-----------------------------------------
      000005                        489 _getchar:
                                    490 ;	naked function: no prologue.
                                    491 ;	life.c:22: __endasm;
      000005 12 00 32         [24]  492 	lcall	0x0032
      000008 F5 82            [12]  493 	mov	dpl, a
      00000A 75 83 00         [24]  494 	mov	dph, #0
      00000D 22               [24]  495 	ret
                                    496 ;	life.c:23: }
                                    497 ;	naked function: no epilogue.
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int0'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:54: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int0
                                    504 ;	-----------------------------------------
      00000E                        505 _int0:
                           00000F   506 	ar7 = 0x0f
                           00000E   507 	ar6 = 0x0e
                           00000D   508 	ar5 = 0x0d
                           00000C   509 	ar4 = 0x0c
                           00000B   510 	ar3 = 0x0b
                           00000A   511 	ar2 = 0x0a
                           000009   512 	ar1 = 0x09
                           000008   513 	ar0 = 0x08
      00000E C0 D0            [24]  514 	push	psw
      000010 75 D0 08         [24]  515 	mov	psw,#0x08
                                    516 ;	life.c:55: i0 = 1;
      000013 78r10            [12]  517 	mov	r0,#_i0
      000015 76 01            [12]  518 	mov	@r0,#0x01
                                    519 ;	life.c:56: }
      000017 D0 D0            [24]  520 	pop	psw
      000019 32               [24]  521 	reti
                                    522 ;	eliminated unneeded push/pop dpl
                                    523 ;	eliminated unneeded push/pop dph
                                    524 ;	eliminated unneeded push/pop b
                                    525 ;	eliminated unneeded push/pop acc
                                    526 ;------------------------------------------------------------
                                    527 ;Allocation info for local variables in function 'int1'
                                    528 ;------------------------------------------------------------
                                    529 ;	life.c:58: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    530 ;	-----------------------------------------
                                    531 ;	 function int1
                                    532 ;	-----------------------------------------
      00001A                        533 _int1:
      00001A C0 D0            [24]  534 	push	psw
      00001C 75 D0 08         [24]  535 	mov	psw,#0x08
                                    536 ;	life.c:59: i1 = 1;
      00001F 78r11            [12]  537 	mov	r0,#_i1
      000021 76 01            [12]  538 	mov	@r0,#0x01
                                    539 ;	life.c:60: }
      000023 D0 D0            [24]  540 	pop	psw
      000025 32               [24]  541 	reti
                                    542 ;	eliminated unneeded push/pop dpl
                                    543 ;	eliminated unneeded push/pop dph
                                    544 ;	eliminated unneeded push/pop b
                                    545 ;	eliminated unneeded push/pop acc
                                    546 ;------------------------------------------------------------
                                    547 ;Allocation info for local variables in function 'show'
                                    548 ;------------------------------------------------------------
                                    549 ;hdr                       Allocated to registers r7 
                                    550 ;__1966080005              Allocated to registers 
                                    551 ;s                         Allocated to registers r5 r6 r7 
                                    552 ;__1310720001              Allocated to registers r6 r7 
                                    553 ;a                         Allocated to registers 
                                    554 ;__1310720003              Allocated to registers r6 r7 
                                    555 ;a                         Allocated to registers 
                                    556 ;__1966080008              Allocated to registers 
                                    557 ;s                         Allocated to registers r5 r6 r7 
                                    558 ;__2621440011              Allocated to registers 
                                    559 ;s                         Allocated to registers r5 r6 r7 
                                    560 ;------------------------------------------------------------
                                    561 ;	life.c:96: void show(char hdr) {
                                    562 ;	-----------------------------------------
                                    563 ;	 function show
                                    564 ;	-----------------------------------------
      000026                        565 _show:
                           000007   566 	ar7 = 0x07
                           000006   567 	ar6 = 0x06
                           000005   568 	ar5 = 0x05
                           000004   569 	ar4 = 0x04
                           000003   570 	ar3 = 0x03
                           000002   571 	ar2 = 0x02
                           000001   572 	ar1 = 0x01
                           000000   573 	ar0 = 0x00
                                    574 ;	life.c:97: if (hdr) {
      000026 E5 82            [12]  575 	mov	a,dpl
      000028 FF               [12]  576 	mov	r7,a
      000029 70 03            [24]  577 	jnz	00190$
      00002B 02r01r7E         [24]  578 	ljmp	00102$
      00002E                        579 00190$:
                                    580 ;	life.c:98: printstr("\033[2J\033[m");
      00002E 7Dr00            [12]  581 	mov	r5,#___str_0
      000030 7Es00            [12]  582 	mov	r6,#(___str_0 >> 8)
      000032 7F 80            [12]  583 	mov	r7,#0x80
                                    584 ;	life.c:49: return;
      000034                        585 00121$:
                                    586 ;	life.c:47: for (; *s; s++) putchar(*s);
      000034 8D 82            [24]  587 	mov	dpl,r5
      000036 8E 83            [24]  588 	mov	dph,r6
      000038 8F F0            [24]  589 	mov	b,r7
      00003A 12r00r00         [24]  590 	lcall	__gptrget
      00003D FC               [12]  591 	mov	r4,a
      00003E 60 10            [24]  592 	jz	00109$
      000040 7B 00            [12]  593 	mov	r3,#0x00
      000042 8C 82            [24]  594 	mov	dpl,r4
      000044 8B 83            [24]  595 	mov	dph,r3
      000046 12r00r00         [24]  596 	lcall	_putchar
      000049 0D               [12]  597 	inc	r5
                                    598 ;	life.c:98: printstr("\033[2J\033[m");
      00004A BD 00 E7         [24]  599 	cjne	r5,#0x00,00121$
      00004D 0E               [12]  600 	inc	r6
      00004E 80 E4            [24]  601 	sjmp	00121$
      000050                        602 00109$:
                                    603 ;	life.c:90: print16x(generation[1]);
      000050 78r24            [12]  604 	mov	r0,#(_generation + 0x0002)
      000052 86 06            [24]  605 	mov	ar6,@r0
      000054 08               [12]  606 	inc	r0
                                    607 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      000055 E6               [12]  608 	mov	a,@r0
      000056 FF               [12]  609 	mov	r7,a
      000057 C4               [12]  610 	swap	a
      000058 54 0F            [12]  611 	anl	a,#0x0f
      00005A 30 E3 02         [24]  612 	jnb	acc.3,00193$
      00005D 44 F0            [12]  613 	orl	a,#0xf0
      00005F                        614 00193$:
      00005F FC               [12]  615 	mov	r4,a
      000060 33               [12]  616 	rlc	a
      000061 95 E0            [12]  617 	subb	a,acc
      000063 53 04 0F         [24]  618 	anl	ar4,#0x0f
      000066 EC               [12]  619 	mov	a,r4
      000067 24r00            [12]  620 	add	a,#_digits
      000069 F9               [12]  621 	mov	r1,a
      00006A 87 05            [24]  622 	mov	ar5,@r1
      00006C 7C 00            [12]  623 	mov	r4,#0x00
      00006E 8D 82            [24]  624 	mov	dpl,r5
      000070 8C 83            [24]  625 	mov	dph,r4
      000072 12r00r00         [24]  626 	lcall	_putchar
                                    627 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      000075 8F 05            [24]  628 	mov	ar5,r7
      000077 53 05 0F         [24]  629 	anl	ar5,#0x0f
      00007A ED               [12]  630 	mov	a,r5
      00007B 24r00            [12]  631 	add	a,#_digits
      00007D F9               [12]  632 	mov	r1,a
      00007E 87 05            [24]  633 	mov	ar5,@r1
      000080 7C 00            [12]  634 	mov	r4,#0x00
      000082 8D 82            [24]  635 	mov	dpl,r5
      000084 8C 83            [24]  636 	mov	dph,r4
      000086 12r00r00         [24]  637 	lcall	_putchar
                                    638 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      000089 8E 04            [24]  639 	mov	ar4,r6
      00008B EF               [12]  640 	mov	a,r7
      00008C C4               [12]  641 	swap	a
      00008D CC               [12]  642 	xch	a,r4
      00008E C4               [12]  643 	swap	a
      00008F 54 0F            [12]  644 	anl	a,#0x0f
      000091 6C               [12]  645 	xrl	a,r4
      000092 CC               [12]  646 	xch	a,r4
      000093 54 0F            [12]  647 	anl	a,#0x0f
      000095 CC               [12]  648 	xch	a,r4
      000096 6C               [12]  649 	xrl	a,r4
      000097 CC               [12]  650 	xch	a,r4
      000098 30 E3 02         [24]  651 	jnb	acc.3,00194$
      00009B 44 F0            [12]  652 	orl	a,#0xf0
      00009D                        653 00194$:
      00009D 53 04 0F         [24]  654 	anl	ar4,#0x0f
      0000A0 EC               [12]  655 	mov	a,r4
      0000A1 24r00            [12]  656 	add	a,#_digits
      0000A3 F9               [12]  657 	mov	r1,a
      0000A4 87 05            [24]  658 	mov	ar5,@r1
      0000A6 7C 00            [12]  659 	mov	r4,#0x00
      0000A8 8D 82            [24]  660 	mov	dpl,r5
      0000AA 8C 83            [24]  661 	mov	dph,r4
      0000AC 12r00r00         [24]  662 	lcall	_putchar
                                    663 ;	life.c:41: putchar(digits[a & 0xf]);
      0000AF 53 06 0F         [24]  664 	anl	ar6,#0x0f
      0000B2 EE               [12]  665 	mov	a,r6
      0000B3 24r00            [12]  666 	add	a,#_digits
      0000B5 F9               [12]  667 	mov	r1,a
      0000B6 87 07            [24]  668 	mov	ar7,@r1
      0000B8 7E 00            [12]  669 	mov	r6,#0x00
      0000BA 8F 82            [24]  670 	mov	dpl,r7
      0000BC 8E 83            [24]  671 	mov	dph,r6
      0000BE 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:91: print16x(generation[0]);
      0000C1 78r22            [12]  674 	mov	r0,#_generation
      0000C3 86 06            [24]  675 	mov	ar6,@r0
      0000C5 08               [12]  676 	inc	r0
                                    677 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      0000C6 E6               [12]  678 	mov	a,@r0
      0000C7 FF               [12]  679 	mov	r7,a
      0000C8 C4               [12]  680 	swap	a
      0000C9 54 0F            [12]  681 	anl	a,#0x0f
      0000CB 30 E3 02         [24]  682 	jnb	acc.3,00195$
      0000CE 44 F0            [12]  683 	orl	a,#0xf0
      0000D0                        684 00195$:
      0000D0 FC               [12]  685 	mov	r4,a
      0000D1 33               [12]  686 	rlc	a
      0000D2 95 E0            [12]  687 	subb	a,acc
      0000D4 53 04 0F         [24]  688 	anl	ar4,#0x0f
      0000D7 EC               [12]  689 	mov	a,r4
      0000D8 24r00            [12]  690 	add	a,#_digits
      0000DA F9               [12]  691 	mov	r1,a
      0000DB 87 05            [24]  692 	mov	ar5,@r1
      0000DD 7C 00            [12]  693 	mov	r4,#0x00
      0000DF 8D 82            [24]  694 	mov	dpl,r5
      0000E1 8C 83            [24]  695 	mov	dph,r4
      0000E3 12r00r00         [24]  696 	lcall	_putchar
                                    697 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      0000E6 8F 05            [24]  698 	mov	ar5,r7
      0000E8 53 05 0F         [24]  699 	anl	ar5,#0x0f
      0000EB ED               [12]  700 	mov	a,r5
      0000EC 24r00            [12]  701 	add	a,#_digits
      0000EE F9               [12]  702 	mov	r1,a
      0000EF 87 05            [24]  703 	mov	ar5,@r1
      0000F1 7C 00            [12]  704 	mov	r4,#0x00
      0000F3 8D 82            [24]  705 	mov	dpl,r5
      0000F5 8C 83            [24]  706 	mov	dph,r4
      0000F7 12r00r00         [24]  707 	lcall	_putchar
                                    708 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      0000FA 8E 04            [24]  709 	mov	ar4,r6
      0000FC EF               [12]  710 	mov	a,r7
      0000FD C4               [12]  711 	swap	a
      0000FE CC               [12]  712 	xch	a,r4
      0000FF C4               [12]  713 	swap	a
      000100 54 0F            [12]  714 	anl	a,#0x0f
      000102 6C               [12]  715 	xrl	a,r4
      000103 CC               [12]  716 	xch	a,r4
      000104 54 0F            [12]  717 	anl	a,#0x0f
      000106 CC               [12]  718 	xch	a,r4
      000107 6C               [12]  719 	xrl	a,r4
      000108 CC               [12]  720 	xch	a,r4
      000109 30 E3 02         [24]  721 	jnb	acc.3,00196$
      00010C 44 F0            [12]  722 	orl	a,#0xf0
      00010E                        723 00196$:
      00010E 53 04 0F         [24]  724 	anl	ar4,#0x0f
      000111 EC               [12]  725 	mov	a,r4
      000112 24r00            [12]  726 	add	a,#_digits
      000114 F9               [12]  727 	mov	r1,a
      000115 87 05            [24]  728 	mov	ar5,@r1
      000117 7C 00            [12]  729 	mov	r4,#0x00
      000119 8D 82            [24]  730 	mov	dpl,r5
      00011B 8C 83            [24]  731 	mov	dph,r4
      00011D 12r00r00         [24]  732 	lcall	_putchar
                                    733 ;	life.c:41: putchar(digits[a & 0xf]);
      000120 53 06 0F         [24]  734 	anl	ar6,#0x0f
      000123 EE               [12]  735 	mov	a,r6
      000124 24r00            [12]  736 	add	a,#_digits
      000126 F9               [12]  737 	mov	r1,a
      000127 87 07            [24]  738 	mov	ar7,@r1
      000129 7E 00            [12]  739 	mov	r6,#0x00
      00012B 8F 82            [24]  740 	mov	dpl,r7
      00012D 8E 83            [24]  741 	mov	dph,r6
      00012F 12r00r00         [24]  742 	lcall	_putchar
                                    743 ;	life.c:100: printstr("\r\n");
      000132 7Dr08            [12]  744 	mov	r5,#___str_1
      000134 7Es00            [12]  745 	mov	r6,#(___str_1 >> 8)
      000136 7F 80            [12]  746 	mov	r7,#0x80
                                    747 ;	life.c:49: return;
      000138                        748 00124$:
                                    749 ;	life.c:47: for (; *s; s++) putchar(*s);
      000138 8D 82            [24]  750 	mov	dpl,r5
      00013A 8E 83            [24]  751 	mov	dph,r6
      00013C 8F F0            [24]  752 	mov	b,r7
      00013E 12r00r00         [24]  753 	lcall	__gptrget
      000141 FC               [12]  754 	mov	r4,a
      000142 60 10            [24]  755 	jz	00114$
      000144 7B 00            [12]  756 	mov	r3,#0x00
      000146 8C 82            [24]  757 	mov	dpl,r4
      000148 8B 83            [24]  758 	mov	dph,r3
      00014A 12r00r00         [24]  759 	lcall	_putchar
      00014D 0D               [12]  760 	inc	r5
                                    761 ;	life.c:100: printstr("\r\n");
      00014E BD 00 E7         [24]  762 	cjne	r5,#0x00,00124$
      000151 0E               [12]  763 	inc	r6
      000152 80 E4            [24]  764 	sjmp	00124$
      000154                        765 00114$:
                                    766 ;	life.c:83: generation[0]++;
      000154 78r22            [12]  767 	mov	r0,#_generation
      000156 86 06            [24]  768 	mov	ar6,@r0
      000158 08               [12]  769 	inc	r0
      000159 86 07            [24]  770 	mov	ar7,@r0
      00015B 0E               [12]  771 	inc	r6
      00015C BE 00 01         [24]  772 	cjne	r6,#0x00,00199$
      00015F 0F               [12]  773 	inc	r7
      000160                        774 00199$:
      000160 78r22            [12]  775 	mov	r0,#_generation
      000162 A6 06            [24]  776 	mov	@r0,ar6
      000164 08               [12]  777 	inc	r0
      000165 A6 07            [24]  778 	mov	@r0,ar7
                                    779 ;	life.c:84: if (!generation[0]) generation[1]++;
      000167 EE               [12]  780 	mov	a,r6
      000168 4F               [12]  781 	orl	a,r7
      000169 70 13            [24]  782 	jnz	00102$
      00016B 78r24            [12]  783 	mov	r0,#(_generation + 0x0002)
      00016D 86 06            [24]  784 	mov	ar6,@r0
      00016F 08               [12]  785 	inc	r0
      000170 86 07            [24]  786 	mov	ar7,@r0
      000172 0E               [12]  787 	inc	r6
      000173 BE 00 01         [24]  788 	cjne	r6,#0x00,00201$
      000176 0F               [12]  789 	inc	r7
      000177                        790 00201$:
      000177 78r24            [12]  791 	mov	r0,#(_generation + 0x0002)
      000179 A6 06            [24]  792 	mov	@r0,ar6
      00017B 08               [12]  793 	inc	r0
      00017C A6 07            [24]  794 	mov	@r0,ar7
                                    795 ;	life.c:101: updategen();
      00017E                        796 00102$:
                                    797 ;	life.c:104: for (x = 0; x < W; x++) {
      00017E 78r12            [12]  798 	mov	r0,#_x
      000180 E4               [12]  799 	clr	a
      000181 F6               [12]  800 	mov	@r0,a
      000182 08               [12]  801 	inc	r0
      000183 F6               [12]  802 	mov	@r0,a
      000184                        803 00131$:
                                    804 ;	life.c:105: for (y = 0; y < H; y++)
      000184 78r14            [12]  805 	mov	r0,#_y
      000186 E4               [12]  806 	clr	a
      000187 F6               [12]  807 	mov	@r0,a
      000188 08               [12]  808 	inc	r0
      000189 F6               [12]  809 	mov	@r0,a
      00018A                        810 00126$:
                                    811 ;	life.c:106: if (u[A2D(W, y, x)]) {
      00018A 78r14            [12]  812 	mov	r0,#_y
      00018C 86 06            [24]  813 	mov	ar6,@r0
      00018E 08               [12]  814 	inc	r0
      00018F E6               [12]  815 	mov	a,@r0
      000190 C4               [12]  816 	swap	a
      000191 23               [12]  817 	rl	a
      000192 54 E0            [12]  818 	anl	a,#0xe0
      000194 CE               [12]  819 	xch	a,r6
      000195 C4               [12]  820 	swap	a
      000196 23               [12]  821 	rl	a
      000197 CE               [12]  822 	xch	a,r6
      000198 6E               [12]  823 	xrl	a,r6
      000199 CE               [12]  824 	xch	a,r6
      00019A 54 E0            [12]  825 	anl	a,#0xe0
      00019C CE               [12]  826 	xch	a,r6
      00019D 6E               [12]  827 	xrl	a,r6
      00019E FF               [12]  828 	mov	r7,a
      00019F 78r12            [12]  829 	mov	r0,#_x
      0001A1 E6               [12]  830 	mov	a,@r0
      0001A2 2E               [12]  831 	add	a,r6
      0001A3 FE               [12]  832 	mov	r6,a
      0001A4 08               [12]  833 	inc	r0
      0001A5 E6               [12]  834 	mov	a,@r0
      0001A6 3F               [12]  835 	addc	a,r7
      0001A7 FF               [12]  836 	mov	r7,a
      0001A8 EE               [12]  837 	mov	a,r6
      0001A9 24r00            [12]  838 	add	a,#_u
      0001AB FE               [12]  839 	mov	r6,a
      0001AC EF               [12]  840 	mov	a,r7
      0001AD 34s08            [12]  841 	addc	a,#(_u >> 8)
      0001AF FF               [12]  842 	mov	r7,a
      0001B0 8E 82            [24]  843 	mov	dpl,r6
      0001B2 8F 83            [24]  844 	mov	dph,r7
      0001B4 E0               [24]  845 	movx	a,@dptr
      0001B5 60 0E            [24]  846 	jz	00104$
                                    847 ;	life.c:107: putchar('['); putchar(']');
      0001B7 90 00 5B         [24]  848 	mov	dptr,#0x005b
      0001BA 12r00r00         [24]  849 	lcall	_putchar
      0001BD 90 00 5D         [24]  850 	mov	dptr,#0x005d
      0001C0 12r00r00         [24]  851 	lcall	_putchar
      0001C3 80 0C            [24]  852 	sjmp	00127$
      0001C5                        853 00104$:
                                    854 ;	life.c:109: putchar('#'); putchar('#');
      0001C5 90 00 23         [24]  855 	mov	dptr,#0x0023
      0001C8 12r00r00         [24]  856 	lcall	_putchar
      0001CB 90 00 23         [24]  857 	mov	dptr,#0x0023
      0001CE 12r00r00         [24]  858 	lcall	_putchar
      0001D1                        859 00127$:
                                    860 ;	life.c:105: for (y = 0; y < H; y++)
      0001D1 78r14            [12]  861 	mov	r0,#_y
      0001D3 06               [12]  862 	inc	@r0
      0001D4 B6 00 02         [24]  863 	cjne	@r0,#0x00,00203$
      0001D7 08               [12]  864 	inc	r0
      0001D8 06               [12]  865 	inc	@r0
      0001D9                        866 00203$:
      0001D9 78r14            [12]  867 	mov	r0,#_y
      0001DB C3               [12]  868 	clr	c
      0001DC E6               [12]  869 	mov	a,@r0
      0001DD 94 40            [12]  870 	subb	a,#0x40
      0001DF 08               [12]  871 	inc	r0
      0001E0 E6               [12]  872 	mov	a,@r0
      0001E1 64 80            [12]  873 	xrl	a,#0x80
      0001E3 94 80            [12]  874 	subb	a,#0x80
      0001E5 40 A3            [24]  875 	jc	00126$
                                    876 ;	life.c:111: printstr("\r\n");
      0001E7 7Dr08            [12]  877 	mov	r5,#___str_1
      0001E9 7Es00            [12]  878 	mov	r6,#(___str_1 >> 8)
      0001EB 7F 80            [12]  879 	mov	r7,#0x80
                                    880 ;	life.c:49: return;
      0001ED                        881 00129$:
                                    882 ;	life.c:47: for (; *s; s++) putchar(*s);
      0001ED 8D 82            [24]  883 	mov	dpl,r5
      0001EF 8E 83            [24]  884 	mov	dph,r6
      0001F1 8F F0            [24]  885 	mov	b,r7
      0001F3 12r00r00         [24]  886 	lcall	__gptrget
      0001F6 FC               [12]  887 	mov	r4,a
      0001F7 60 10            [24]  888 	jz	00119$
      0001F9 7B 00            [12]  889 	mov	r3,#0x00
      0001FB 8C 82            [24]  890 	mov	dpl,r4
      0001FD 8B 83            [24]  891 	mov	dph,r3
      0001FF 12r00r00         [24]  892 	lcall	_putchar
      000202 0D               [12]  893 	inc	r5
                                    894 ;	life.c:111: printstr("\r\n");
      000203 BD 00 E7         [24]  895 	cjne	r5,#0x00,00129$
      000206 0E               [12]  896 	inc	r6
      000207 80 E4            [24]  897 	sjmp	00129$
      000209                        898 00119$:
                                    899 ;	life.c:104: for (x = 0; x < W; x++) {
      000209 78r12            [12]  900 	mov	r0,#_x
      00020B 06               [12]  901 	inc	@r0
      00020C B6 00 02         [24]  902 	cjne	@r0,#0x00,00207$
      00020F 08               [12]  903 	inc	r0
      000210 06               [12]  904 	inc	@r0
      000211                        905 00207$:
      000211 78r12            [12]  906 	mov	r0,#_x
      000213 C3               [12]  907 	clr	c
      000214 E6               [12]  908 	mov	a,@r0
      000215 94 20            [12]  909 	subb	a,#0x20
      000217 08               [12]  910 	inc	r0
      000218 E6               [12]  911 	mov	a,@r0
      000219 64 80            [12]  912 	xrl	a,#0x80
      00021B 94 80            [12]  913 	subb	a,#0x80
      00021D 50 03            [24]  914 	jnc	00208$
      00021F 02r01r84         [24]  915 	ljmp	00131$
      000222                        916 00208$:
                                    917 ;	life.c:114: return;
                                    918 ;	life.c:115: }
      000222 22               [24]  919 	ret
                                    920 ;------------------------------------------------------------
                                    921 ;Allocation info for local variables in function 'main'
                                    922 ;------------------------------------------------------------
                                    923 ;__2621440019              Allocated to registers 
                                    924 ;s                         Allocated to registers r5 r6 r7 
                                    925 ;__1310720013              Allocated to registers 
                                    926 ;s                         Allocated to registers r5 r6 r7 
                                    927 ;__1310720015              Allocated to registers r6 r7 
                                    928 ;a                         Allocated to registers r4 r5 
                                    929 ;__1310720017              Allocated to registers 
                                    930 ;s                         Allocated to registers r5 r6 r7 
                                    931 ;__2621440023              Allocated to registers 
                                    932 ;s                         Allocated to registers r5 r6 r7 
                                    933 ;__4587520027              Allocated to registers 
                                    934 ;s                         Allocated to registers r5 r6 r7 
                                    935 ;__4587520029              Allocated to registers 
                                    936 ;s                         Allocated to registers r5 r6 r7 
                                    937 ;__4587520031              Allocated to registers 
                                    938 ;s                         Allocated to registers r5 r6 r7 
                                    939 ;__3276800033              Allocated to registers 
                                    940 ;s                         Allocated to registers r5 r6 r7 
                                    941 ;__1310720035              Allocated to registers 
                                    942 ;s                         Allocated to registers r5 r6 r7 
                                    943 ;sloc0                     Allocated to stack - _bp +1
                                    944 ;sloc1                     Allocated to stack - _bp +3
                                    945 ;sloc2                     Allocated to stack - _bp +5
                                    946 ;sloc3                     Allocated to stack - _bp +7
                                    947 ;sloc4                     Allocated to stack - _bp +9
                                    948 ;sloc5                     Allocated to stack - _bp +11
                                    949 ;sloc6                     Allocated to stack - _bp +13
                                    950 ;------------------------------------------------------------
                                    951 ;	life.c:200: void main(void) {
                                    952 ;	-----------------------------------------
                                    953 ;	 function main
                                    954 ;	-----------------------------------------
      000223                        955 _main:
      000223 C0*00            [24]  956 	push	_bp
      000225 E5 81            [12]  957 	mov	a,sp
      000227 F5*00            [12]  958 	mov	_bp,a
      000229 24 0E            [12]  959 	add	a,#0x0e
      00022B F5 81            [12]  960 	mov	sp,a
                                    961 ;	life.c:201: IT0 = 1;
                                    962 ;	assignBit
      00022D D2 88            [12]  963 	setb	_IT0
                                    964 ;	life.c:202: IT1 = 1;
                                    965 ;	assignBit
      00022F D2 8A            [12]  966 	setb	_IT1
                                    967 ;	life.c:203: EX0 = 1;
                                    968 ;	assignBit
      000231 D2 A8            [12]  969 	setb	_EX0
                                    970 ;	life.c:204: EX1 = 1;
                                    971 ;	assignBit
      000233 D2 AA            [12]  972 	setb	_EX1
                                    973 ;	life.c:205: EA = 1;
                                    974 ;	assignBit
      000235 D2 AF            [12]  975 	setb	_EA
                                    976 ;	life.c:207: for (i0 = 0; !i0; ) {		
      000237 78r10            [12]  977 	mov	r0,#_i0
      000239 76 00            [12]  978 	mov	@r0,#0x00
      00023B                        979 00210$:
                                    980 ;	life.c:208: printstr("\033[2J\033[mINIT\r\n");
      00023B 7Dr16            [12]  981 	mov	r5,#___str_4
      00023D 7Es00            [12]  982 	mov	r6,#(___str_4 >> 8)
      00023F 7F 80            [12]  983 	mov	r7,#0x80
                                    984 ;	life.c:49: return;
      000241                        985 00175$:
                                    986 ;	life.c:47: for (; *s; s++) putchar(*s);
      000241 8D 82            [24]  987 	mov	dpl,r5
      000243 8E 83            [24]  988 	mov	dph,r6
      000245 8F F0            [24]  989 	mov	b,r7
      000247 12r00r00         [24]  990 	lcall	__gptrget
      00024A FC               [12]  991 	mov	r4,a
      00024B 60 10            [24]  992 	jz	00107$
      00024D 7B 00            [12]  993 	mov	r3,#0x00
      00024F 8C 82            [24]  994 	mov	dpl,r4
      000251 8B 83            [24]  995 	mov	dph,r3
      000253 12r00r00         [24]  996 	lcall	_putchar
      000256 0D               [12]  997 	inc	r5
                                    998 ;	life.c:209: while (1) {
      000257 BD 00 E7         [24]  999 	cjne	r5,#0x00,00175$
      00025A 0E               [12] 1000 	inc	r6
      00025B 80 E4            [24] 1001 	sjmp	00175$
      00025D                       1002 00107$:
                                   1003 ;	life.c:210: c = toupper(getchar());
      00025D 12r00r05         [24] 1004 	lcall	_getchar
      000260 12r00r00         [24] 1005 	lcall	_toupper
      000263 AE 82            [24] 1006 	mov	r6,dpl
      000265 AF 83            [24] 1007 	mov	r7,dph
      000267 78r18            [12] 1008 	mov	r0,#_c
      000269 A6 06            [24] 1009 	mov	@r0,ar6
      00026B 08               [12] 1010 	inc	r0
      00026C A6 07            [24] 1011 	mov	@r0,ar7
                                   1012 ;	life.c:211: if (i0 || (c == (int)'T')) goto terminate;
      00026E 78r10            [12] 1013 	mov	r0,#_i0
      000270 E6               [12] 1014 	mov	a,@r0
      000271 60 03            [24] 1015 	jz	00421$
      000273 02r09rB6         [24] 1016 	ljmp	00130$
      000276                       1017 00421$:
      000276 BE 54 06         [24] 1018 	cjne	r6,#0x54,00422$
      000279 BF 00 03         [24] 1019 	cjne	r7,#0x00,00422$
      00027C 02r09rB6         [24] 1020 	ljmp	00130$
      00027F                       1021 00422$:
                                   1022 ;	life.c:212: if (c == (int)'L') break;
      00027F BE 4C DB         [24] 1023 	cjne	r6,#0x4c,00107$
      000282 BF 00 D8         [24] 1024 	cjne	r7,#0x00,00107$
                                   1025 ;	life.c:215: reload:
      000285                       1026 00109$:
                                   1027 ;	life.c:118: memset(u, 0, sizeof (u));
      000285 E4               [12] 1028 	clr	a
      000286 C0 E0            [24] 1029 	push	acc
      000288 74 08            [12] 1030 	mov	a,#0x08
      00028A C0 E0            [24] 1031 	push	acc
      00028C E4               [12] 1032 	clr	a
      00028D C0 E0            [24] 1033 	push	acc
      00028F 90r08r00         [24] 1034 	mov	dptr,#_u
      000292 75 F0 00         [24] 1035 	mov	b,#0x00
      000295 12r00r00         [24] 1036 	lcall	_memset
      000298 15 81            [12] 1037 	dec	sp
      00029A 15 81            [12] 1038 	dec	sp
      00029C 15 81            [12] 1039 	dec	sp
                                   1040 ;	life.c:119: memset(pu, 0, sizeof (pu));
      00029E E4               [12] 1041 	clr	a
      00029F C0 E0            [24] 1042 	push	acc
      0002A1 74 08            [12] 1043 	mov	a,#0x08
      0002A3 C0 E0            [24] 1044 	push	acc
      0002A5 E4               [12] 1045 	clr	a
      0002A6 C0 E0            [24] 1046 	push	acc
      0002A8 90r00r00         [24] 1047 	mov	dptr,#_pu
      0002AB 75 F0 00         [24] 1048 	mov	b,#0x00
      0002AE 12r00r00         [24] 1049 	lcall	_memset
      0002B1 15 81            [12] 1050 	dec	sp
      0002B3 15 81            [12] 1051 	dec	sp
      0002B5 15 81            [12] 1052 	dec	sp
                                   1053 ;	life.c:125: j = 0;
      0002B7 78r16            [12] 1054 	mov	r0,#_j
      0002B9 E4               [12] 1055 	clr	a
      0002BA F6               [12] 1056 	mov	@r0,a
      0002BB 08               [12] 1057 	inc	r0
      0002BC F6               [12] 1058 	mov	@r0,a
                                   1059 ;	life.c:127: printstr("LOAD <");
      0002BD 7Dr0B            [12] 1060 	mov	r5,#___str_2
      0002BF 7Es00            [12] 1061 	mov	r6,#(___str_2 >> 8)
      0002C1 7F 80            [12] 1062 	mov	r7,#0x80
                                   1063 ;	life.c:49: return;
      0002C3                       1064 00178$:
                                   1065 ;	life.c:47: for (; *s; s++) putchar(*s);
      0002C3 8D 82            [24] 1066 	mov	dpl,r5
      0002C5 8E 83            [24] 1067 	mov	dph,r6
      0002C7 8F F0            [24] 1068 	mov	b,r7
      0002C9 12r00r00         [24] 1069 	lcall	__gptrget
      0002CC FC               [12] 1070 	mov	r4,a
      0002CD 60 10            [24] 1071 	jz	00135$
      0002CF 7B 00            [12] 1072 	mov	r3,#0x00
      0002D1 8C 82            [24] 1073 	mov	dpl,r4
      0002D3 8B 83            [24] 1074 	mov	dph,r3
      0002D5 12r00r00         [24] 1075 	lcall	_putchar
      0002D8 0D               [12] 1076 	inc	r5
                                   1077 ;	life.c:127: printstr("LOAD <");
      0002D9 BD 00 E7         [24] 1078 	cjne	r5,#0x00,00178$
      0002DC 0E               [12] 1079 	inc	r6
      0002DD 80 E4            [24] 1080 	sjmp	00178$
      0002DF                       1081 00135$:
                                   1082 ;	life.c:129: for (y = 0; y < H; y++)
      0002DF 78r14            [12] 1083 	mov	r0,#_y
      0002E1 E4               [12] 1084 	clr	a
      0002E2 F6               [12] 1085 	mov	@r0,a
      0002E3 08               [12] 1086 	inc	r0
      0002E4 F6               [12] 1087 	mov	@r0,a
      0002E5                       1088 00182$:
                                   1089 ;	life.c:130: for (x = 0; x < W; x++) {
      0002E5 78r12            [12] 1090 	mov	r0,#_x
      0002E7 E4               [12] 1091 	clr	a
      0002E8 F6               [12] 1092 	mov	@r0,a
      0002E9 08               [12] 1093 	inc	r0
      0002EA F6               [12] 1094 	mov	@r0,a
      0002EB                       1095 00180$:
                                   1096 ;	life.c:131: c = getchar();
      0002EB 12r00r05         [24] 1097 	lcall	_getchar
      0002EE AE 82            [24] 1098 	mov	r6,dpl
      0002F0 AF 83            [24] 1099 	mov	r7,dph
      0002F2 78r18            [12] 1100 	mov	r0,#_c
      0002F4 A6 06            [24] 1101 	mov	@r0,ar6
      0002F6 08               [12] 1102 	inc	r0
      0002F7 A6 07            [24] 1103 	mov	@r0,ar7
                                   1104 ;	life.c:132: if (c == (int)'0') {
      0002F9 BE 30 37         [24] 1105 	cjne	r6,#0x30,00142$
      0002FC BF 00 34         [24] 1106 	cjne	r7,#0x00,00142$
                                   1107 ;	life.c:133: u[A2D(W, y, x)] = 0;
      0002FF 78r14            [12] 1108 	mov	r0,#_y
      000301 86 04            [24] 1109 	mov	ar4,@r0
      000303 08               [12] 1110 	inc	r0
      000304 E6               [12] 1111 	mov	a,@r0
      000305 C4               [12] 1112 	swap	a
      000306 23               [12] 1113 	rl	a
      000307 54 E0            [12] 1114 	anl	a,#0xe0
      000309 CC               [12] 1115 	xch	a,r4
      00030A C4               [12] 1116 	swap	a
      00030B 23               [12] 1117 	rl	a
      00030C CC               [12] 1118 	xch	a,r4
      00030D 6C               [12] 1119 	xrl	a,r4
      00030E CC               [12] 1120 	xch	a,r4
      00030F 54 E0            [12] 1121 	anl	a,#0xe0
      000311 CC               [12] 1122 	xch	a,r4
      000312 6C               [12] 1123 	xrl	a,r4
      000313 FD               [12] 1124 	mov	r5,a
      000314 78r12            [12] 1125 	mov	r0,#_x
      000316 E6               [12] 1126 	mov	a,@r0
      000317 2C               [12] 1127 	add	a,r4
      000318 FC               [12] 1128 	mov	r4,a
      000319 08               [12] 1129 	inc	r0
      00031A E6               [12] 1130 	mov	a,@r0
      00031B 3D               [12] 1131 	addc	a,r5
      00031C FD               [12] 1132 	mov	r5,a
      00031D EC               [12] 1133 	mov	a,r4
      00031E 24r00            [12] 1134 	add	a,#_u
      000320 F5 82            [12] 1135 	mov	dpl,a
      000322 ED               [12] 1136 	mov	a,r5
      000323 34s08            [12] 1137 	addc	a,#(_u >> 8)
      000325 F5 83            [12] 1138 	mov	dph,a
      000327 E4               [12] 1139 	clr	a
      000328 F0               [24] 1140 	movx	@dptr,a
                                   1141 ;	life.c:134: j++;
      000329 78r16            [12] 1142 	mov	r0,#_j
      00032B 06               [12] 1143 	inc	@r0
      00032C B6 00 02         [24] 1144 	cjne	@r0,#0x00,00429$
      00032F 08               [12] 1145 	inc	r0
      000330 06               [12] 1146 	inc	@r0
      000331                       1147 00429$:
      000331 80 43            [24] 1148 	sjmp	00181$
      000333                       1149 00142$:
                                   1150 ;	life.c:135: } else if (c == (int)'1') {
      000333 BE 31 38         [24] 1151 	cjne	r6,#0x31,00140$
      000336 BF 00 35         [24] 1152 	cjne	r7,#0x00,00140$
                                   1153 ;	life.c:136: u[A2D(W, y, x)] = 1;
      000339 78r14            [12] 1154 	mov	r0,#_y
      00033B 86 04            [24] 1155 	mov	ar4,@r0
      00033D 08               [12] 1156 	inc	r0
      00033E E6               [12] 1157 	mov	a,@r0
      00033F C4               [12] 1158 	swap	a
      000340 23               [12] 1159 	rl	a
      000341 54 E0            [12] 1160 	anl	a,#0xe0
      000343 CC               [12] 1161 	xch	a,r4
      000344 C4               [12] 1162 	swap	a
      000345 23               [12] 1163 	rl	a
      000346 CC               [12] 1164 	xch	a,r4
      000347 6C               [12] 1165 	xrl	a,r4
      000348 CC               [12] 1166 	xch	a,r4
      000349 54 E0            [12] 1167 	anl	a,#0xe0
      00034B CC               [12] 1168 	xch	a,r4
      00034C 6C               [12] 1169 	xrl	a,r4
      00034D FD               [12] 1170 	mov	r5,a
      00034E 78r12            [12] 1171 	mov	r0,#_x
      000350 E6               [12] 1172 	mov	a,@r0
      000351 2C               [12] 1173 	add	a,r4
      000352 FC               [12] 1174 	mov	r4,a
      000353 08               [12] 1175 	inc	r0
      000354 E6               [12] 1176 	mov	a,@r0
      000355 3D               [12] 1177 	addc	a,r5
      000356 FD               [12] 1178 	mov	r5,a
      000357 EC               [12] 1179 	mov	a,r4
      000358 24r00            [12] 1180 	add	a,#_u
      00035A F5 82            [12] 1181 	mov	dpl,a
      00035C ED               [12] 1182 	mov	a,r5
      00035D 34s08            [12] 1183 	addc	a,#(_u >> 8)
      00035F F5 83            [12] 1184 	mov	dph,a
      000361 74 01            [12] 1185 	mov	a,#0x01
      000363 F0               [24] 1186 	movx	@dptr,a
                                   1187 ;	life.c:137: j++;
      000364 78r16            [12] 1188 	mov	r0,#_j
      000366 06               [12] 1189 	inc	@r0
      000367 B6 00 02         [24] 1190 	cjne	@r0,#0x00,00432$
      00036A 08               [12] 1191 	inc	r0
      00036B 06               [12] 1192 	inc	@r0
      00036C                       1193 00432$:
      00036C 80 08            [24] 1194 	sjmp	00181$
      00036E                       1195 00140$:
                                   1196 ;	life.c:138: } else if (c == (int)'#') goto out;
      00036E BE 23 05         [24] 1197 	cjne	r6,#0x23,00433$
      000371 BF 00 02         [24] 1198 	cjne	r7,#0x00,00433$
      000374 80 32            [24] 1199 	sjmp	00153$
      000376                       1200 00433$:
      000376                       1201 00181$:
                                   1202 ;	life.c:130: for (x = 0; x < W; x++) {
      000376 78r12            [12] 1203 	mov	r0,#_x
      000378 06               [12] 1204 	inc	@r0
      000379 B6 00 02         [24] 1205 	cjne	@r0,#0x00,00434$
      00037C 08               [12] 1206 	inc	r0
      00037D 06               [12] 1207 	inc	@r0
      00037E                       1208 00434$:
      00037E 78r12            [12] 1209 	mov	r0,#_x
      000380 C3               [12] 1210 	clr	c
      000381 E6               [12] 1211 	mov	a,@r0
      000382 94 20            [12] 1212 	subb	a,#0x20
      000384 08               [12] 1213 	inc	r0
      000385 E6               [12] 1214 	mov	a,@r0
      000386 64 80            [12] 1215 	xrl	a,#0x80
      000388 94 80            [12] 1216 	subb	a,#0x80
      00038A 50 03            [24] 1217 	jnc	00435$
      00038C 02r02rEB         [24] 1218 	ljmp	00180$
      00038F                       1219 00435$:
                                   1220 ;	life.c:129: for (y = 0; y < H; y++)
      00038F 78r14            [12] 1221 	mov	r0,#_y
      000391 06               [12] 1222 	inc	@r0
      000392 B6 00 02         [24] 1223 	cjne	@r0,#0x00,00436$
      000395 08               [12] 1224 	inc	r0
      000396 06               [12] 1225 	inc	@r0
      000397                       1226 00436$:
      000397 78r14            [12] 1227 	mov	r0,#_y
      000399 C3               [12] 1228 	clr	c
      00039A E6               [12] 1229 	mov	a,@r0
      00039B 94 40            [12] 1230 	subb	a,#0x40
      00039D 08               [12] 1231 	inc	r0
      00039E E6               [12] 1232 	mov	a,@r0
      00039F 64 80            [12] 1233 	xrl	a,#0x80
      0003A1 94 80            [12] 1234 	subb	a,#0x80
      0003A3 50 03            [24] 1235 	jnc	00437$
      0003A5 02r02rE5         [24] 1236 	ljmp	00182$
      0003A8                       1237 00437$:
                                   1238 ;	life.c:141: out:
      0003A8                       1239 00153$:
                                   1240 ;	life.c:142: if (c != (int)'#')
      0003A8 BE 23 05         [24] 1241 	cjne	r6,#0x23,00438$
      0003AB BF 00 02         [24] 1242 	cjne	r7,#0x00,00438$
      0003AE 80 14            [24] 1243 	sjmp	00152$
      0003B0                       1244 00438$:
                                   1245 ;	life.c:143: while (1) {
      0003B0                       1246 00149$:
                                   1247 ;	life.c:144: c = getchar();
      0003B0 12r00r05         [24] 1248 	lcall	_getchar
      0003B3 AE 82            [24] 1249 	mov	r6,dpl
      0003B5 AF 83            [24] 1250 	mov	r7,dph
      0003B7 78r18            [12] 1251 	mov	r0,#_c
      0003B9 A6 06            [24] 1252 	mov	@r0,ar6
      0003BB 08               [12] 1253 	inc	r0
      0003BC A6 07            [24] 1254 	mov	@r0,ar7
                                   1255 ;	life.c:145: if (c == (int)'#') break;
      0003BE BE 23 EF         [24] 1256 	cjne	r6,#0x23,00149$
      0003C1 BF 00 EC         [24] 1257 	cjne	r7,#0x00,00149$
      0003C4                       1258 00152$:
                                   1259 ;	life.c:147: print16x(j);
      0003C4 78r16            [12] 1260 	mov	r0,#_j
      0003C6 86 06            [24] 1261 	mov	ar6,@r0
      0003C8 08               [12] 1262 	inc	r0
      0003C9 86 07            [24] 1263 	mov	ar7,@r0
      0003CB 8E 04            [24] 1264 	mov	ar4,r6
                                   1265 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      0003CD EF               [12] 1266 	mov	a,r7
      0003CE FD               [12] 1267 	mov	r5,a
      0003CF C4               [12] 1268 	swap	a
      0003D0 54 0F            [12] 1269 	anl	a,#0x0f
      0003D2 30 E3 02         [24] 1270 	jnb	acc.3,00441$
      0003D5 44 F0            [12] 1271 	orl	a,#0xf0
      0003D7                       1272 00441$:
      0003D7 FE               [12] 1273 	mov	r6,a
      0003D8 33               [12] 1274 	rlc	a
      0003D9 95 E0            [12] 1275 	subb	a,acc
      0003DB 53 06 0F         [24] 1276 	anl	ar6,#0x0f
      0003DE EE               [12] 1277 	mov	a,r6
      0003DF 24r00            [12] 1278 	add	a,#_digits
      0003E1 F9               [12] 1279 	mov	r1,a
      0003E2 87 07            [24] 1280 	mov	ar7,@r1
      0003E4 7E 00            [12] 1281 	mov	r6,#0x00
      0003E6 8F 82            [24] 1282 	mov	dpl,r7
      0003E8 8E 83            [24] 1283 	mov	dph,r6
      0003EA 12r00r00         [24] 1284 	lcall	_putchar
                                   1285 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      0003ED 8D 07            [24] 1286 	mov	ar7,r5
      0003EF 53 07 0F         [24] 1287 	anl	ar7,#0x0f
      0003F2 EF               [12] 1288 	mov	a,r7
      0003F3 24r00            [12] 1289 	add	a,#_digits
      0003F5 F9               [12] 1290 	mov	r1,a
      0003F6 87 07            [24] 1291 	mov	ar7,@r1
      0003F8 7E 00            [12] 1292 	mov	r6,#0x00
      0003FA 8F 82            [24] 1293 	mov	dpl,r7
      0003FC 8E 83            [24] 1294 	mov	dph,r6
      0003FE 12r00r00         [24] 1295 	lcall	_putchar
                                   1296 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      000401 8C 06            [24] 1297 	mov	ar6,r4
      000403 ED               [12] 1298 	mov	a,r5
      000404 C4               [12] 1299 	swap	a
      000405 CE               [12] 1300 	xch	a,r6
      000406 C4               [12] 1301 	swap	a
      000407 54 0F            [12] 1302 	anl	a,#0x0f
      000409 6E               [12] 1303 	xrl	a,r6
      00040A CE               [12] 1304 	xch	a,r6
      00040B 54 0F            [12] 1305 	anl	a,#0x0f
      00040D CE               [12] 1306 	xch	a,r6
      00040E 6E               [12] 1307 	xrl	a,r6
      00040F CE               [12] 1308 	xch	a,r6
      000410 30 E3 02         [24] 1309 	jnb	acc.3,00442$
      000413 44 F0            [12] 1310 	orl	a,#0xf0
      000415                       1311 00442$:
      000415 53 06 0F         [24] 1312 	anl	ar6,#0x0f
      000418 EE               [12] 1313 	mov	a,r6
      000419 24r00            [12] 1314 	add	a,#_digits
      00041B F9               [12] 1315 	mov	r1,a
      00041C 87 07            [24] 1316 	mov	ar7,@r1
      00041E 7E 00            [12] 1317 	mov	r6,#0x00
      000420 8F 82            [24] 1318 	mov	dpl,r7
      000422 8E 83            [24] 1319 	mov	dph,r6
      000424 12r00r00         [24] 1320 	lcall	_putchar
                                   1321 ;	life.c:41: putchar(digits[a & 0xf]);
      000427 53 04 0F         [24] 1322 	anl	ar4,#0x0f
      00042A EC               [12] 1323 	mov	a,r4
      00042B 24r00            [12] 1324 	add	a,#_digits
      00042D F9               [12] 1325 	mov	r1,a
      00042E 87 07            [24] 1326 	mov	ar7,@r1
      000430 7E 00            [12] 1327 	mov	r6,#0x00
      000432 8F 82            [24] 1328 	mov	dpl,r7
      000434 8E 83            [24] 1329 	mov	dph,r6
      000436 12r00r00         [24] 1330 	lcall	_putchar
                                   1331 ;	life.c:148: printstr(">\r\n");
      000439 7Dr12            [12] 1332 	mov	r5,#___str_3
      00043B 7Es00            [12] 1333 	mov	r6,#(___str_3 >> 8)
      00043D 7F 80            [12] 1334 	mov	r7,#0x80
                                   1335 ;	life.c:49: return;
      00043F                       1336 00185$:
                                   1337 ;	life.c:47: for (; *s; s++) putchar(*s);
      00043F 8D 82            [24] 1338 	mov	dpl,r5
      000441 8E 83            [24] 1339 	mov	dph,r6
      000443 8F F0            [24] 1340 	mov	b,r7
      000445 12r00r00         [24] 1341 	lcall	__gptrget
      000448 FC               [12] 1342 	mov	r4,a
      000449 60 10            [24] 1343 	jz	00156$
      00044B 7B 00            [12] 1344 	mov	r3,#0x00
      00044D 8C 82            [24] 1345 	mov	dpl,r4
      00044F 8B 83            [24] 1346 	mov	dph,r3
      000451 12r00r00         [24] 1347 	lcall	_putchar
      000454 0D               [12] 1348 	inc	r5
                                   1349 ;	life.c:148: printstr(">\r\n");
      000455 BD 00 E7         [24] 1350 	cjne	r5,#0x00,00185$
      000458 0E               [12] 1351 	inc	r6
      000459 80 E4            [24] 1352 	sjmp	00185$
      00045B                       1353 00156$:
                                   1354 ;	life.c:218: show(0);
      00045B 75 82 00         [24] 1355 	mov	dpl,#0x00
      00045E 12r00r26         [24] 1356 	lcall	_show
                                   1357 ;	life.c:220: printstr("READY\r\n");
      000461 7Dr24            [12] 1358 	mov	r5,#___str_5
      000463 7Es00            [12] 1359 	mov	r6,#(___str_5 >> 8)
      000465 7F 80            [12] 1360 	mov	r7,#0x80
                                   1361 ;	life.c:49: return;
      000467                       1362 00188$:
                                   1363 ;	life.c:47: for (; *s; s++) putchar(*s);
      000467 8D 82            [24] 1364 	mov	dpl,r5
      000469 8E 83            [24] 1365 	mov	dph,r6
      00046B 8F F0            [24] 1366 	mov	b,r7
      00046D 12r00r00         [24] 1367 	lcall	__gptrget
      000470 FC               [12] 1368 	mov	r4,a
      000471 60 10            [24] 1369 	jz	00118$
      000473 7B 00            [12] 1370 	mov	r3,#0x00
      000475 8C 82            [24] 1371 	mov	dpl,r4
      000477 8B 83            [24] 1372 	mov	dph,r3
      000479 12r00r00         [24] 1373 	lcall	_putchar
      00047C 0D               [12] 1374 	inc	r5
                                   1375 ;	life.c:221: while (1) {
      00047D BD 00 E7         [24] 1376 	cjne	r5,#0x00,00188$
      000480 0E               [12] 1377 	inc	r6
      000481 80 E4            [24] 1378 	sjmp	00188$
      000483                       1379 00118$:
                                   1380 ;	life.c:222: c = toupper(getchar());
      000483 12r00r05         [24] 1381 	lcall	_getchar
      000486 12r00r00         [24] 1382 	lcall	_toupper
      000489 AE 82            [24] 1383 	mov	r6,dpl
      00048B AF 83            [24] 1384 	mov	r7,dph
      00048D 78r18            [12] 1385 	mov	r0,#_c
      00048F A6 06            [24] 1386 	mov	@r0,ar6
      000491 08               [12] 1387 	inc	r0
      000492 A6 07            [24] 1388 	mov	@r0,ar7
                                   1389 ;	life.c:223: if (i0 || (c == (int)'T')) goto terminate;
      000494 78r10            [12] 1390 	mov	r0,#_i0
      000496 E6               [12] 1391 	mov	a,@r0
      000497 60 03            [24] 1392 	jz	00447$
      000499 02r09rB6         [24] 1393 	ljmp	00130$
      00049C                       1394 00447$:
      00049C BE 54 06         [24] 1395 	cjne	r6,#0x54,00448$
      00049F BF 00 03         [24] 1396 	cjne	r7,#0x00,00448$
      0004A2 02r09rB6         [24] 1397 	ljmp	00130$
      0004A5                       1398 00448$:
                                   1399 ;	life.c:224: if (c == (int)'L') goto reload;
      0004A5 BE 4C 06         [24] 1400 	cjne	r6,#0x4c,00449$
      0004A8 BF 00 03         [24] 1401 	cjne	r7,#0x00,00449$
      0004AB 02r02r85         [24] 1402 	ljmp	00109$
      0004AE                       1403 00449$:
                                   1404 ;	life.c:225: if (c == (int)'S') break;
      0004AE BE 53 D2         [24] 1405 	cjne	r6,#0x53,00118$
      0004B1 BF 00 CF         [24] 1406 	cjne	r7,#0x00,00118$
                                   1407 ;	life.c:76: generation[0] = 0;
      0004B4 78r22            [12] 1408 	mov	r0,#_generation
      0004B6 76 00            [12] 1409 	mov	@r0,#0x00
      0004B8 08               [12] 1410 	inc	r0
      0004B9 76 00            [12] 1411 	mov	@r0,#0x00
                                   1412 ;	life.c:77: generation[1] = 0;
      0004BB 78r24            [12] 1413 	mov	r0,#(_generation + 0x0002)
      0004BD 76 00            [12] 1414 	mov	@r0,#0x00
      0004BF 08               [12] 1415 	inc	r0
      0004C0 76 00            [12] 1416 	mov	@r0,#0x00
                                   1417 ;	life.c:230: for (i1 = 0; !i0 && !i1; ) {
      0004C2 78r11            [12] 1418 	mov	r0,#_i1
      0004C4 76 00            [12] 1419 	mov	@r0,#0x00
      0004C6                       1420 00205$:
      0004C6 78r10            [12] 1421 	mov	r0,#_i0
      0004C8 E6               [12] 1422 	mov	a,@r0
      0004C9 60 03            [24] 1423 	jz	00452$
      0004CB 02r09r84         [24] 1424 	ljmp	00126$
      0004CE                       1425 00452$:
      0004CE 78r11            [12] 1426 	mov	r0,#_i1
      0004D0 E6               [12] 1427 	mov	a,@r0
      0004D1 60 03            [24] 1428 	jz	00453$
      0004D3 02r09r84         [24] 1429 	ljmp	00126$
      0004D6                       1430 00453$:
                                   1431 ;	life.c:231: show(1);
      0004D6 75 82 01         [24] 1432 	mov	dpl,#0x01
      0004D9 12r00r26         [24] 1433 	lcall	_show
                                   1434 ;	life.c:156: fixed = 0;
      0004DC 78r1C            [12] 1435 	mov	r0,#_fixed
      0004DE 76 00            [12] 1436 	mov	@r0,#0x00
                                   1437 ;	life.c:157: cycle2 = 0;
      0004E0 78r1D            [12] 1438 	mov	r0,#_cycle2
      0004E2 76 00            [12] 1439 	mov	@r0,#0x00
                                   1440 ;	life.c:158: bstep = 0;
      0004E4 78r1A            [12] 1441 	mov	r0,#_bstep
      0004E6 76 00            [12] 1442 	mov	@r0,#0x00
                                   1443 ;	life.c:160: for (y = 0; y < H; y++) {
      0004E8 78r14            [12] 1444 	mov	r0,#_y
      0004EA E4               [12] 1445 	clr	a
      0004EB F6               [12] 1446 	mov	@r0,a
      0004EC 08               [12] 1447 	inc	r0
      0004ED F6               [12] 1448 	mov	@r0,a
      0004EE                       1449 00192$:
                                   1450 ;	life.c:161: putchar(busy[bstep]); putchar('\r');
      0004EE 78r1A            [12] 1451 	mov	r0,#_bstep
      0004F0 E6               [12] 1452 	mov	a,@r0
      0004F1 24r26            [12] 1453 	add	a,#_busy
      0004F3 F9               [12] 1454 	mov	r1,a
      0004F4 87 07            [24] 1455 	mov	ar7,@r1
      0004F6 7E 00            [12] 1456 	mov	r6,#0x00
      0004F8 8F 82            [24] 1457 	mov	dpl,r7
      0004FA 8E 83            [24] 1458 	mov	dph,r6
      0004FC 12r00r00         [24] 1459 	lcall	_putchar
      0004FF 90 00 0D         [24] 1460 	mov	dptr,#0x000d
      000502 12r00r00         [24] 1461 	lcall	_putchar
                                   1462 ;	life.c:162: bstep = (bstep + 1) & 3;
      000505 78r1A            [12] 1463 	mov	r0,#_bstep
      000507 86 07            [24] 1464 	mov	ar7,@r0
      000509 0F               [12] 1465 	inc	r7
      00050A 78r1A            [12] 1466 	mov	r0,#_bstep
      00050C 74 03            [12] 1467 	mov	a,#0x03
      00050E 5F               [12] 1468 	anl	a,r7
      00050F F6               [12] 1469 	mov	@r0,a
                                   1470 ;	life.c:163: for (x = 0; x < W; x++) {
      000510 78r12            [12] 1471 	mov	r0,#_x
      000512 E4               [12] 1472 	clr	a
      000513 F6               [12] 1473 	mov	@r0,a
      000514 08               [12] 1474 	inc	r0
      000515 F6               [12] 1475 	mov	@r0,a
      000516                       1476 00190$:
                                   1477 ;	life.c:164: n = -u[A2D(W, y, x)];
      000516 78r14            [12] 1478 	mov	r0,#_y
      000518 E5*00            [12] 1479 	mov	a,_bp
      00051A 24 03            [12] 1480 	add	a,#0x03
      00051C F9               [12] 1481 	mov	r1,a
      00051D E6               [12] 1482 	mov	a,@r0
      00051E F7               [12] 1483 	mov	@r1,a
      00051F 08               [12] 1484 	inc	r0
      000520 E6               [12] 1485 	mov	a,@r0
      000521 C4               [12] 1486 	swap	a
      000522 23               [12] 1487 	rl	a
      000523 54 E0            [12] 1488 	anl	a,#0xe0
      000525 C7               [12] 1489 	xch	a,@r1
      000526 C4               [12] 1490 	swap	a
      000527 23               [12] 1491 	rl	a
      000528 C7               [12] 1492 	xch	a,@r1
      000529 67               [12] 1493 	xrl	a,@r1
      00052A C7               [12] 1494 	xch	a,@r1
      00052B 54 E0            [12] 1495 	anl	a,#0xe0
      00052D C7               [12] 1496 	xch	a,@r1
      00052E 67               [12] 1497 	xrl	a,@r1
      00052F 09               [12] 1498 	inc	r1
      000530 F7               [12] 1499 	mov	@r1,a
      000531 E5*00            [12] 1500 	mov	a,_bp
      000533 24 03            [12] 1501 	add	a,#0x03
      000535 F8               [12] 1502 	mov	r0,a
      000536 79r12            [12] 1503 	mov	r1,#_x
      000538 E7               [12] 1504 	mov	a,@r1
      000539 26               [12] 1505 	add	a,@r0
      00053A C0 E0            [24] 1506 	push	acc
      00053C 09               [12] 1507 	inc	r1
      00053D E7               [12] 1508 	mov	a,@r1
      00053E 08               [12] 1509 	inc	r0
      00053F 36               [12] 1510 	addc	a,@r0
      000540 C0 E0            [24] 1511 	push	acc
      000542 A8*00            [24] 1512 	mov	r0,_bp
      000544 08               [12] 1513 	inc	r0
      000545 08               [12] 1514 	inc	r0
      000546 D0 E0            [24] 1515 	pop	acc
      000548 F6               [12] 1516 	mov	@r0,a
      000549 18               [12] 1517 	dec	r0
      00054A D0 E0            [24] 1518 	pop	acc
      00054C F6               [12] 1519 	mov	@r0,a
      00054D A8*00            [24] 1520 	mov	r0,_bp
      00054F 08               [12] 1521 	inc	r0
      000550 E6               [12] 1522 	mov	a,@r0
      000551 24r00            [12] 1523 	add	a,#_u
      000553 F5 82            [12] 1524 	mov	dpl,a
      000555 08               [12] 1525 	inc	r0
      000556 E6               [12] 1526 	mov	a,@r0
      000557 34s08            [12] 1527 	addc	a,#(_u >> 8)
      000559 F5 83            [12] 1528 	mov	dph,a
      00055B E0               [24] 1529 	movx	a,@dptr
      00055C FB               [12] 1530 	mov	r3,a
      00055D C3               [12] 1531 	clr	c
      00055E E4               [12] 1532 	clr	a
      00055F 9B               [12] 1533 	subb	a,r3
      000560 FB               [12] 1534 	mov	r3,a
                                   1535 ;	life.c:167: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000561 78r14            [12] 1536 	mov	r0,#_y
      000563 74 FF            [12] 1537 	mov	a,#0xff
      000565 26               [12] 1538 	add	a,@r0
      000566 FA               [12] 1539 	mov	r2,a
      000567 74 FF            [12] 1540 	mov	a,#0xff
      000569 08               [12] 1541 	inc	r0
      00056A 36               [12] 1542 	addc	a,@r0
      00056B FD               [12] 1543 	mov	r5,a
      00056C 74 40            [12] 1544 	mov	a,#0x40
      00056E 2A               [12] 1545 	add	a,r2
      00056F FA               [12] 1546 	mov	r2,a
      000570 E4               [12] 1547 	clr	a
      000571 3D               [12] 1548 	addc	a,r5
      000572 FD               [12] 1549 	mov	r5,a
      000573 C0 03            [24] 1550 	push	ar3
      000575 74 40            [12] 1551 	mov	a,#0x40
      000577 C0 E0            [24] 1552 	push	acc
      000579 E4               [12] 1553 	clr	a
      00057A C0 E0            [24] 1554 	push	acc
      00057C 8A 82            [24] 1555 	mov	dpl,r2
      00057E 8D 83            [24] 1556 	mov	dph,r5
      000580 12r00r00         [24] 1557 	lcall	__modsint
      000583 AC 82            [24] 1558 	mov	r4,dpl
      000585 AD 83            [24] 1559 	mov	r5,dph
      000587 15 81            [12] 1560 	dec	sp
      000589 15 81            [12] 1561 	dec	sp
      00058B D0 03            [24] 1562 	pop	ar3
      00058D ED               [12] 1563 	mov	a,r5
      00058E C4               [12] 1564 	swap	a
      00058F 23               [12] 1565 	rl	a
      000590 54 E0            [12] 1566 	anl	a,#0xe0
      000592 CC               [12] 1567 	xch	a,r4
      000593 C4               [12] 1568 	swap	a
      000594 23               [12] 1569 	rl	a
      000595 CC               [12] 1570 	xch	a,r4
      000596 6C               [12] 1571 	xrl	a,r4
      000597 CC               [12] 1572 	xch	a,r4
      000598 54 E0            [12] 1573 	anl	a,#0xe0
      00059A CC               [12] 1574 	xch	a,r4
      00059B 6C               [12] 1575 	xrl	a,r4
      00059C FD               [12] 1576 	mov	r5,a
      00059D 78r12            [12] 1577 	mov	r0,#_x
      00059F 74 FF            [12] 1578 	mov	a,#0xff
      0005A1 26               [12] 1579 	add	a,@r0
      0005A2 FA               [12] 1580 	mov	r2,a
      0005A3 74 FF            [12] 1581 	mov	a,#0xff
      0005A5 08               [12] 1582 	inc	r0
      0005A6 36               [12] 1583 	addc	a,@r0
      0005A7 FF               [12] 1584 	mov	r7,a
      0005A8 74 20            [12] 1585 	mov	a,#0x20
      0005AA 2A               [12] 1586 	add	a,r2
      0005AB FA               [12] 1587 	mov	r2,a
      0005AC E4               [12] 1588 	clr	a
      0005AD 3F               [12] 1589 	addc	a,r7
      0005AE FF               [12] 1590 	mov	r7,a
      0005AF C0 05            [24] 1591 	push	ar5
      0005B1 C0 04            [24] 1592 	push	ar4
      0005B3 C0 03            [24] 1593 	push	ar3
      0005B5 74 20            [12] 1594 	mov	a,#0x20
      0005B7 C0 E0            [24] 1595 	push	acc
      0005B9 E4               [12] 1596 	clr	a
      0005BA C0 E0            [24] 1597 	push	acc
      0005BC 8A 82            [24] 1598 	mov	dpl,r2
      0005BE 8F 83            [24] 1599 	mov	dph,r7
      0005C0 12r00r00         [24] 1600 	lcall	__modsint
      0005C3 C8               [12] 1601 	xch	a,r0
      0005C4 E5*00            [12] 1602 	mov	a,_bp
      0005C6 24 05            [12] 1603 	add	a,#0x05
      0005C8 C8               [12] 1604 	xch	a,r0
      0005C9 A6 82            [24] 1605 	mov	@r0,dpl
      0005CB 08               [12] 1606 	inc	r0
      0005CC A6 83            [24] 1607 	mov	@r0,dph
      0005CE 15 81            [12] 1608 	dec	sp
      0005D0 15 81            [12] 1609 	dec	sp
      0005D2 D0 03            [24] 1610 	pop	ar3
      0005D4 D0 04            [24] 1611 	pop	ar4
      0005D6 D0 05            [24] 1612 	pop	ar5
      0005D8 E5*00            [12] 1613 	mov	a,_bp
      0005DA 24 05            [12] 1614 	add	a,#0x05
      0005DC F8               [12] 1615 	mov	r0,a
      0005DD E6               [12] 1616 	mov	a,@r0
      0005DE 2C               [12] 1617 	add	a,r4
      0005DF FA               [12] 1618 	mov	r2,a
      0005E0 08               [12] 1619 	inc	r0
      0005E1 E6               [12] 1620 	mov	a,@r0
      0005E2 3D               [12] 1621 	addc	a,r5
      0005E3 FF               [12] 1622 	mov	r7,a
      0005E4 EA               [12] 1623 	mov	a,r2
      0005E5 24r00            [12] 1624 	add	a,#_u
      0005E7 F5 82            [12] 1625 	mov	dpl,a
      0005E9 EF               [12] 1626 	mov	a,r7
      0005EA 34s08            [12] 1627 	addc	a,#(_u >> 8)
      0005EC F5 83            [12] 1628 	mov	dph,a
      0005EE E0               [24] 1629 	movx	a,@dptr
      0005EF 2B               [12] 1630 	add	a,r3
      0005F0 FB               [12] 1631 	mov	r3,a
                                   1632 ;	life.c:169: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0005F1 78r12            [12] 1633 	mov	r0,#_x
      0005F3 E5*00            [12] 1634 	mov	a,_bp
      0005F5 24 07            [12] 1635 	add	a,#0x07
      0005F7 F9               [12] 1636 	mov	r1,a
      0005F8 E6               [12] 1637 	mov	a,@r0
      0005F9 F7               [12] 1638 	mov	@r1,a
      0005FA 08               [12] 1639 	inc	r0
      0005FB 09               [12] 1640 	inc	r1
      0005FC E6               [12] 1641 	mov	a,@r0
      0005FD F7               [12] 1642 	mov	@r1,a
      0005FE E5*00            [12] 1643 	mov	a,_bp
      000600 24 07            [12] 1644 	add	a,#0x07
      000602 F8               [12] 1645 	mov	r0,a
      000603 74 20            [12] 1646 	mov	a,#0x20
      000605 26               [12] 1647 	add	a,@r0
      000606 FA               [12] 1648 	mov	r2,a
      000607 E4               [12] 1649 	clr	a
      000608 08               [12] 1650 	inc	r0
      000609 36               [12] 1651 	addc	a,@r0
      00060A FF               [12] 1652 	mov	r7,a
      00060B C0 05            [24] 1653 	push	ar5
      00060D C0 04            [24] 1654 	push	ar4
      00060F C0 03            [24] 1655 	push	ar3
      000611 74 20            [12] 1656 	mov	a,#0x20
      000613 C0 E0            [24] 1657 	push	acc
      000615 E4               [12] 1658 	clr	a
      000616 C0 E0            [24] 1659 	push	acc
      000618 8A 82            [24] 1660 	mov	dpl,r2
      00061A 8F 83            [24] 1661 	mov	dph,r7
      00061C 12r00r00         [24] 1662 	lcall	__modsint
      00061F C8               [12] 1663 	xch	a,r0
      000620 E5*00            [12] 1664 	mov	a,_bp
      000622 24 09            [12] 1665 	add	a,#0x09
      000624 C8               [12] 1666 	xch	a,r0
      000625 A6 82            [24] 1667 	mov	@r0,dpl
      000627 08               [12] 1668 	inc	r0
      000628 A6 83            [24] 1669 	mov	@r0,dph
      00062A 15 81            [12] 1670 	dec	sp
      00062C 15 81            [12] 1671 	dec	sp
      00062E D0 03            [24] 1672 	pop	ar3
      000630 D0 04            [24] 1673 	pop	ar4
      000632 D0 05            [24] 1674 	pop	ar5
      000634 E5*00            [12] 1675 	mov	a,_bp
      000636 24 09            [12] 1676 	add	a,#0x09
      000638 F8               [12] 1677 	mov	r0,a
      000639 E6               [12] 1678 	mov	a,@r0
      00063A 2C               [12] 1679 	add	a,r4
      00063B FA               [12] 1680 	mov	r2,a
      00063C 08               [12] 1681 	inc	r0
      00063D E6               [12] 1682 	mov	a,@r0
      00063E 3D               [12] 1683 	addc	a,r5
      00063F FF               [12] 1684 	mov	r7,a
      000640 EA               [12] 1685 	mov	a,r2
      000641 24r00            [12] 1686 	add	a,#_u
      000643 F5 82            [12] 1687 	mov	dpl,a
      000645 EF               [12] 1688 	mov	a,r7
      000646 34s08            [12] 1689 	addc	a,#(_u >> 8)
      000648 F5 83            [12] 1690 	mov	dph,a
      00064A E0               [24] 1691 	movx	a,@dptr
      00064B 2B               [12] 1692 	add	a,r3
      00064C FB               [12] 1693 	mov	r3,a
                                   1694 ;	life.c:171: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00064D E5*00            [12] 1695 	mov	a,_bp
      00064F 24 07            [12] 1696 	add	a,#0x07
      000651 F8               [12] 1697 	mov	r0,a
      000652 74 21            [12] 1698 	mov	a,#0x21
      000654 26               [12] 1699 	add	a,@r0
      000655 FE               [12] 1700 	mov	r6,a
      000656 E4               [12] 1701 	clr	a
      000657 08               [12] 1702 	inc	r0
      000658 36               [12] 1703 	addc	a,@r0
      000659 FF               [12] 1704 	mov	r7,a
      00065A C0 05            [24] 1705 	push	ar5
      00065C C0 04            [24] 1706 	push	ar4
      00065E C0 03            [24] 1707 	push	ar3
      000660 74 20            [12] 1708 	mov	a,#0x20
      000662 C0 E0            [24] 1709 	push	acc
      000664 E4               [12] 1710 	clr	a
      000665 C0 E0            [24] 1711 	push	acc
      000667 8E 82            [24] 1712 	mov	dpl,r6
      000669 8F 83            [24] 1713 	mov	dph,r7
      00066B 12r00r00         [24] 1714 	lcall	__modsint
      00066E AE 82            [24] 1715 	mov	r6,dpl
      000670 AF 83            [24] 1716 	mov	r7,dph
      000672 15 81            [12] 1717 	dec	sp
      000674 15 81            [12] 1718 	dec	sp
      000676 D0 03            [24] 1719 	pop	ar3
      000678 D0 04            [24] 1720 	pop	ar4
      00067A D0 05            [24] 1721 	pop	ar5
      00067C EE               [12] 1722 	mov	a,r6
      00067D 2C               [12] 1723 	add	a,r4
      00067E FC               [12] 1724 	mov	r4,a
      00067F EF               [12] 1725 	mov	a,r7
      000680 3D               [12] 1726 	addc	a,r5
      000681 FD               [12] 1727 	mov	r5,a
      000682 EC               [12] 1728 	mov	a,r4
      000683 24r00            [12] 1729 	add	a,#_u
      000685 F5 82            [12] 1730 	mov	dpl,a
      000687 ED               [12] 1731 	mov	a,r5
      000688 34s08            [12] 1732 	addc	a,#(_u >> 8)
      00068A F5 83            [12] 1733 	mov	dph,a
      00068C E0               [24] 1734 	movx	a,@dptr
      00068D 2B               [12] 1735 	add	a,r3
      00068E FB               [12] 1736 	mov	r3,a
                                   1737 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00068F 78r14            [12] 1738 	mov	r0,#_y
      000691 E5*00            [12] 1739 	mov	a,_bp
      000693 24 0B            [12] 1740 	add	a,#0x0b
      000695 F9               [12] 1741 	mov	r1,a
      000696 E6               [12] 1742 	mov	a,@r0
      000697 F7               [12] 1743 	mov	@r1,a
      000698 08               [12] 1744 	inc	r0
      000699 09               [12] 1745 	inc	r1
      00069A E6               [12] 1746 	mov	a,@r0
      00069B F7               [12] 1747 	mov	@r1,a
      00069C E5*00            [12] 1748 	mov	a,_bp
      00069E 24 0B            [12] 1749 	add	a,#0x0b
      0006A0 F8               [12] 1750 	mov	r0,a
      0006A1 74 40            [12] 1751 	mov	a,#0x40
      0006A3 26               [12] 1752 	add	a,@r0
      0006A4 FA               [12] 1753 	mov	r2,a
      0006A5 E4               [12] 1754 	clr	a
      0006A6 08               [12] 1755 	inc	r0
      0006A7 36               [12] 1756 	addc	a,@r0
      0006A8 FD               [12] 1757 	mov	r5,a
      0006A9 C0 07            [24] 1758 	push	ar7
      0006AB C0 06            [24] 1759 	push	ar6
      0006AD C0 03            [24] 1760 	push	ar3
      0006AF 74 40            [12] 1761 	mov	a,#0x40
      0006B1 C0 E0            [24] 1762 	push	acc
      0006B3 E4               [12] 1763 	clr	a
      0006B4 C0 E0            [24] 1764 	push	acc
      0006B6 8A 82            [24] 1765 	mov	dpl,r2
      0006B8 8D 83            [24] 1766 	mov	dph,r5
      0006BA 12r00r00         [24] 1767 	lcall	__modsint
      0006BD AC 82            [24] 1768 	mov	r4,dpl
      0006BF AD 83            [24] 1769 	mov	r5,dph
      0006C1 15 81            [12] 1770 	dec	sp
      0006C3 15 81            [12] 1771 	dec	sp
      0006C5 D0 03            [24] 1772 	pop	ar3
      0006C7 D0 06            [24] 1773 	pop	ar6
      0006C9 D0 07            [24] 1774 	pop	ar7
      0006CB E5*00            [12] 1775 	mov	a,_bp
      0006CD 24 0D            [12] 1776 	add	a,#0x0d
      0006CF F8               [12] 1777 	mov	r0,a
      0006D0 A6 04            [24] 1778 	mov	@r0,ar4
      0006D2 ED               [12] 1779 	mov	a,r5
      0006D3 C4               [12] 1780 	swap	a
      0006D4 23               [12] 1781 	rl	a
      0006D5 54 E0            [12] 1782 	anl	a,#0xe0
      0006D7 C6               [12] 1783 	xch	a,@r0
      0006D8 C4               [12] 1784 	swap	a
      0006D9 23               [12] 1785 	rl	a
      0006DA C6               [12] 1786 	xch	a,@r0
      0006DB 66               [12] 1787 	xrl	a,@r0
      0006DC C6               [12] 1788 	xch	a,@r0
      0006DD 54 E0            [12] 1789 	anl	a,#0xe0
      0006DF C6               [12] 1790 	xch	a,@r0
      0006E0 66               [12] 1791 	xrl	a,@r0
      0006E1 08               [12] 1792 	inc	r0
      0006E2 F6               [12] 1793 	mov	@r0,a
      0006E3 E5*00            [12] 1794 	mov	a,_bp
      0006E5 24 0D            [12] 1795 	add	a,#0x0d
      0006E7 F8               [12] 1796 	mov	r0,a
      0006E8 E5*00            [12] 1797 	mov	a,_bp
      0006EA 24 05            [12] 1798 	add	a,#0x05
      0006EC F9               [12] 1799 	mov	r1,a
      0006ED E7               [12] 1800 	mov	a,@r1
      0006EE 26               [12] 1801 	add	a,@r0
      0006EF FA               [12] 1802 	mov	r2,a
      0006F0 09               [12] 1803 	inc	r1
      0006F1 E7               [12] 1804 	mov	a,@r1
      0006F2 08               [12] 1805 	inc	r0
      0006F3 36               [12] 1806 	addc	a,@r0
      0006F4 FD               [12] 1807 	mov	r5,a
      0006F5 EA               [12] 1808 	mov	a,r2
      0006F6 24r00            [12] 1809 	add	a,#_u
      0006F8 F5 82            [12] 1810 	mov	dpl,a
      0006FA ED               [12] 1811 	mov	a,r5
      0006FB 34s08            [12] 1812 	addc	a,#(_u >> 8)
      0006FD F5 83            [12] 1813 	mov	dph,a
      0006FF E0               [24] 1814 	movx	a,@dptr
      000700 2B               [12] 1815 	add	a,r3
      000701 FB               [12] 1816 	mov	r3,a
                                   1817 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000702 E5*00            [12] 1818 	mov	a,_bp
      000704 24 0D            [12] 1819 	add	a,#0x0d
      000706 F8               [12] 1820 	mov	r0,a
      000707 E5*00            [12] 1821 	mov	a,_bp
      000709 24 09            [12] 1822 	add	a,#0x09
      00070B F9               [12] 1823 	mov	r1,a
      00070C E7               [12] 1824 	mov	a,@r1
      00070D 26               [12] 1825 	add	a,@r0
      00070E FC               [12] 1826 	mov	r4,a
      00070F 09               [12] 1827 	inc	r1
      000710 E7               [12] 1828 	mov	a,@r1
      000711 08               [12] 1829 	inc	r0
      000712 36               [12] 1830 	addc	a,@r0
      000713 FD               [12] 1831 	mov	r5,a
      000714 EC               [12] 1832 	mov	a,r4
      000715 24r00            [12] 1833 	add	a,#_u
      000717 F5 82            [12] 1834 	mov	dpl,a
      000719 ED               [12] 1835 	mov	a,r5
      00071A 34s08            [12] 1836 	addc	a,#(_u >> 8)
      00071C F5 83            [12] 1837 	mov	dph,a
      00071E E0               [24] 1838 	movx	a,@dptr
      00071F 2B               [12] 1839 	add	a,r3
      000720 FB               [12] 1840 	mov	r3,a
                                   1841 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000721 E5*00            [12] 1842 	mov	a,_bp
      000723 24 0D            [12] 1843 	add	a,#0x0d
      000725 F8               [12] 1844 	mov	r0,a
      000726 EE               [12] 1845 	mov	a,r6
      000727 26               [12] 1846 	add	a,@r0
      000728 FC               [12] 1847 	mov	r4,a
      000729 EF               [12] 1848 	mov	a,r7
      00072A 08               [12] 1849 	inc	r0
      00072B 36               [12] 1850 	addc	a,@r0
      00072C FD               [12] 1851 	mov	r5,a
      00072D EC               [12] 1852 	mov	a,r4
      00072E 24r00            [12] 1853 	add	a,#_u
      000730 F5 82            [12] 1854 	mov	dpl,a
      000732 ED               [12] 1855 	mov	a,r5
      000733 34s08            [12] 1856 	addc	a,#(_u >> 8)
      000735 F5 83            [12] 1857 	mov	dph,a
      000737 E0               [24] 1858 	movx	a,@dptr
      000738 2B               [12] 1859 	add	a,r3
      000739 FB               [12] 1860 	mov	r3,a
                                   1861 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00073A E5*00            [12] 1862 	mov	a,_bp
      00073C 24 0B            [12] 1863 	add	a,#0x0b
      00073E F8               [12] 1864 	mov	r0,a
      00073F 74 41            [12] 1865 	mov	a,#0x41
      000741 26               [12] 1866 	add	a,@r0
      000742 FC               [12] 1867 	mov	r4,a
      000743 E4               [12] 1868 	clr	a
      000744 08               [12] 1869 	inc	r0
      000745 36               [12] 1870 	addc	a,@r0
      000746 FD               [12] 1871 	mov	r5,a
      000747 C0 07            [24] 1872 	push	ar7
      000749 C0 06            [24] 1873 	push	ar6
      00074B C0 03            [24] 1874 	push	ar3
      00074D 74 40            [12] 1875 	mov	a,#0x40
      00074F C0 E0            [24] 1876 	push	acc
      000751 E4               [12] 1877 	clr	a
      000752 C0 E0            [24] 1878 	push	acc
      000754 8C 82            [24] 1879 	mov	dpl,r4
      000756 8D 83            [24] 1880 	mov	dph,r5
      000758 12r00r00         [24] 1881 	lcall	__modsint
      00075B AC 82            [24] 1882 	mov	r4,dpl
      00075D AD 83            [24] 1883 	mov	r5,dph
      00075F 15 81            [12] 1884 	dec	sp
      000761 15 81            [12] 1885 	dec	sp
      000763 D0 03            [24] 1886 	pop	ar3
      000765 D0 06            [24] 1887 	pop	ar6
      000767 D0 07            [24] 1888 	pop	ar7
      000769 E5*00            [12] 1889 	mov	a,_bp
      00076B 24 0D            [12] 1890 	add	a,#0x0d
      00076D F8               [12] 1891 	mov	r0,a
      00076E A6 04            [24] 1892 	mov	@r0,ar4
      000770 ED               [12] 1893 	mov	a,r5
      000771 C4               [12] 1894 	swap	a
      000772 23               [12] 1895 	rl	a
      000773 54 E0            [12] 1896 	anl	a,#0xe0
      000775 C6               [12] 1897 	xch	a,@r0
      000776 C4               [12] 1898 	swap	a
      000777 23               [12] 1899 	rl	a
      000778 C6               [12] 1900 	xch	a,@r0
      000779 66               [12] 1901 	xrl	a,@r0
      00077A C6               [12] 1902 	xch	a,@r0
      00077B 54 E0            [12] 1903 	anl	a,#0xe0
      00077D C6               [12] 1904 	xch	a,@r0
      00077E 66               [12] 1905 	xrl	a,@r0
      00077F 08               [12] 1906 	inc	r0
      000780 F6               [12] 1907 	mov	@r0,a
      000781 E5*00            [12] 1908 	mov	a,_bp
      000783 24 0D            [12] 1909 	add	a,#0x0d
      000785 F8               [12] 1910 	mov	r0,a
      000786 E5*00            [12] 1911 	mov	a,_bp
      000788 24 05            [12] 1912 	add	a,#0x05
      00078A F9               [12] 1913 	mov	r1,a
      00078B E7               [12] 1914 	mov	a,@r1
      00078C 26               [12] 1915 	add	a,@r0
      00078D FA               [12] 1916 	mov	r2,a
      00078E 09               [12] 1917 	inc	r1
      00078F E7               [12] 1918 	mov	a,@r1
      000790 08               [12] 1919 	inc	r0
      000791 36               [12] 1920 	addc	a,@r0
      000792 FD               [12] 1921 	mov	r5,a
      000793 EA               [12] 1922 	mov	a,r2
      000794 24r00            [12] 1923 	add	a,#_u
      000796 F5 82            [12] 1924 	mov	dpl,a
      000798 ED               [12] 1925 	mov	a,r5
      000799 34s08            [12] 1926 	addc	a,#(_u >> 8)
      00079B F5 83            [12] 1927 	mov	dph,a
      00079D E0               [24] 1928 	movx	a,@dptr
      00079E 2B               [12] 1929 	add	a,r3
      00079F FB               [12] 1930 	mov	r3,a
                                   1931 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007A0 E5*00            [12] 1932 	mov	a,_bp
      0007A2 24 0D            [12] 1933 	add	a,#0x0d
      0007A4 F8               [12] 1934 	mov	r0,a
      0007A5 E5*00            [12] 1935 	mov	a,_bp
      0007A7 24 09            [12] 1936 	add	a,#0x09
      0007A9 F9               [12] 1937 	mov	r1,a
      0007AA E7               [12] 1938 	mov	a,@r1
      0007AB 26               [12] 1939 	add	a,@r0
      0007AC FC               [12] 1940 	mov	r4,a
      0007AD 09               [12] 1941 	inc	r1
      0007AE E7               [12] 1942 	mov	a,@r1
      0007AF 08               [12] 1943 	inc	r0
      0007B0 36               [12] 1944 	addc	a,@r0
      0007B1 FD               [12] 1945 	mov	r5,a
      0007B2 EC               [12] 1946 	mov	a,r4
      0007B3 24r00            [12] 1947 	add	a,#_u
      0007B5 F5 82            [12] 1948 	mov	dpl,a
      0007B7 ED               [12] 1949 	mov	a,r5
      0007B8 34s08            [12] 1950 	addc	a,#(_u >> 8)
      0007BA F5 83            [12] 1951 	mov	dph,a
      0007BC E0               [24] 1952 	movx	a,@dptr
      0007BD 2B               [12] 1953 	add	a,r3
      0007BE FB               [12] 1954 	mov	r3,a
                                   1955 ;	life.c:182: y1 = 1; x1 = 1;
      0007BF 78r20            [12] 1956 	mov	r0,#_y1
      0007C1 76 01            [12] 1957 	mov	@r0,#0x01
      0007C3 08               [12] 1958 	inc	r0
      0007C4 76 00            [12] 1959 	mov	@r0,#0x00
      0007C6 78r1E            [12] 1960 	mov	r0,#_x1
      0007C8 76 01            [12] 1961 	mov	@r0,#0x01
      0007CA 08               [12] 1962 	inc	r0
      0007CB 76 00            [12] 1963 	mov	@r0,#0x00
                                   1964 ;	life.c:183: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007CD E5*00            [12] 1965 	mov	a,_bp
      0007CF 24 0D            [12] 1966 	add	a,#0x0d
      0007D1 F8               [12] 1967 	mov	r0,a
      0007D2 EE               [12] 1968 	mov	a,r6
      0007D3 26               [12] 1969 	add	a,@r0
      0007D4 FE               [12] 1970 	mov	r6,a
      0007D5 EF               [12] 1971 	mov	a,r7
      0007D6 08               [12] 1972 	inc	r0
      0007D7 36               [12] 1973 	addc	a,@r0
      0007D8 FF               [12] 1974 	mov	r7,a
      0007D9 EE               [12] 1975 	mov	a,r6
      0007DA 24r00            [12] 1976 	add	a,#_u
      0007DC F5 82            [12] 1977 	mov	dpl,a
      0007DE EF               [12] 1978 	mov	a,r7
      0007DF 34s08            [12] 1979 	addc	a,#(_u >> 8)
      0007E1 F5 83            [12] 1980 	mov	dph,a
      0007E3 E0               [24] 1981 	movx	a,@dptr
      0007E4 2B               [12] 1982 	add	a,r3
      0007E5 FF               [12] 1983 	mov	r7,a
      0007E6 78r1B            [12] 1984 	mov	r0,#_n
      0007E8 A6 07            [24] 1985 	mov	@r0,ar7
                                   1986 ;	life.c:185: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007EA A8*00            [24] 1987 	mov	r0,_bp
      0007EC 08               [12] 1988 	inc	r0
      0007ED E6               [12] 1989 	mov	a,@r0
      0007EE 24r00            [12] 1990 	add	a,#_nu
      0007F0 FD               [12] 1991 	mov	r5,a
      0007F1 08               [12] 1992 	inc	r0
      0007F2 E6               [12] 1993 	mov	a,@r0
      0007F3 34s10            [12] 1994 	addc	a,#(_nu >> 8)
      0007F5 FE               [12] 1995 	mov	r6,a
      0007F6 BF 03 02         [24] 1996 	cjne	r7,#0x03,00454$
      0007F9 80 28            [24] 1997 	sjmp	00218$
      0007FB                       1998 00454$:
      0007FB BF 02 21         [24] 1999 	cjne	r7,#0x02,00217$
      0007FE E5*00            [12] 2000 	mov	a,_bp
      000800 24 03            [12] 2001 	add	a,#0x03
      000802 F8               [12] 2002 	mov	r0,a
      000803 E5*00            [12] 2003 	mov	a,_bp
      000805 24 07            [12] 2004 	add	a,#0x07
      000807 F9               [12] 2005 	mov	r1,a
      000808 E7               [12] 2006 	mov	a,@r1
      000809 26               [12] 2007 	add	a,@r0
      00080A FC               [12] 2008 	mov	r4,a
      00080B 09               [12] 2009 	inc	r1
      00080C E7               [12] 2010 	mov	a,@r1
      00080D 08               [12] 2011 	inc	r0
      00080E 36               [12] 2012 	addc	a,@r0
      00080F FF               [12] 2013 	mov	r7,a
      000810 EC               [12] 2014 	mov	a,r4
      000811 24r00            [12] 2015 	add	a,#_u
      000813 FC               [12] 2016 	mov	r4,a
      000814 EF               [12] 2017 	mov	a,r7
      000815 34s08            [12] 2018 	addc	a,#(_u >> 8)
      000817 FF               [12] 2019 	mov	r7,a
      000818 8C 82            [24] 2020 	mov	dpl,r4
      00081A 8F 83            [24] 2021 	mov	dph,r7
      00081C E0               [24] 2022 	movx	a,@dptr
      00081D 70 04            [24] 2023 	jnz	00218$
      00081F                       2024 00217$:
                                   2025 ;	assignBit
      00081F C2*00            [12] 2026 	clr	b0
      000821 80 02            [24] 2027 	sjmp	00219$
      000823                       2028 00218$:
                                   2029 ;	assignBit
      000823 D2*00            [12] 2030 	setb	b0
      000825                       2031 00219$:
      000825 A2*00            [12] 2032 	mov	c,b0
      000827 E4               [12] 2033 	clr	a
      000828 33               [12] 2034 	rlc	a
      000829 8D 82            [24] 2035 	mov	dpl,r5
      00082B 8E 83            [24] 2036 	mov	dph,r6
      00082D F0               [24] 2037 	movx	@dptr,a
                                   2038 ;	life.c:186: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00082E 78r14            [12] 2039 	mov	r0,#_y
      000830 86 06            [24] 2040 	mov	ar6,@r0
      000832 08               [12] 2041 	inc	r0
      000833 E6               [12] 2042 	mov	a,@r0
      000834 C4               [12] 2043 	swap	a
      000835 23               [12] 2044 	rl	a
      000836 54 E0            [12] 2045 	anl	a,#0xe0
      000838 CE               [12] 2046 	xch	a,r6
      000839 C4               [12] 2047 	swap	a
      00083A 23               [12] 2048 	rl	a
      00083B CE               [12] 2049 	xch	a,r6
      00083C 6E               [12] 2050 	xrl	a,r6
      00083D CE               [12] 2051 	xch	a,r6
      00083E 54 E0            [12] 2052 	anl	a,#0xe0
      000840 CE               [12] 2053 	xch	a,r6
      000841 6E               [12] 2054 	xrl	a,r6
      000842 FF               [12] 2055 	mov	r7,a
      000843 78r12            [12] 2056 	mov	r0,#_x
      000845 E6               [12] 2057 	mov	a,@r0
      000846 2E               [12] 2058 	add	a,r6
      000847 FE               [12] 2059 	mov	r6,a
      000848 08               [12] 2060 	inc	r0
      000849 E6               [12] 2061 	mov	a,@r0
      00084A 3F               [12] 2062 	addc	a,r7
      00084B FF               [12] 2063 	mov	r7,a
      00084C EE               [12] 2064 	mov	a,r6
      00084D 24r00            [12] 2065 	add	a,#_pu
      00084F F5 82            [12] 2066 	mov	dpl,a
      000851 EF               [12] 2067 	mov	a,r7
      000852 34s00            [12] 2068 	addc	a,#(_pu >> 8)
      000854 F5 83            [12] 2069 	mov	dph,a
      000856 E0               [24] 2070 	movx	a,@dptr
      000857 FD               [12] 2071 	mov	r5,a
      000858 EE               [12] 2072 	mov	a,r6
      000859 24r00            [12] 2073 	add	a,#_nu
      00085B F5 82            [12] 2074 	mov	dpl,a
      00085D EF               [12] 2075 	mov	a,r7
      00085E 34s10            [12] 2076 	addc	a,#(_nu >> 8)
      000860 F5 83            [12] 2077 	mov	dph,a
      000862 E0               [24] 2078 	movx	a,@dptr
      000863 FC               [12] 2079 	mov	r4,a
      000864 6D               [12] 2080 	xrl	a,r5
      000865 78r1D            [12] 2081 	mov	r0,#_cycle2
      000867 46               [12] 2082 	orl	a,@r0
      000868 F6               [12] 2083 	mov	@r0,a
                                   2084 ;	life.c:187: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000869 EE               [12] 2085 	mov	a,r6
      00086A 24r00            [12] 2086 	add	a,#_u
      00086C F5 82            [12] 2087 	mov	dpl,a
      00086E EF               [12] 2088 	mov	a,r7
      00086F 34s08            [12] 2089 	addc	a,#(_u >> 8)
      000871 F5 83            [12] 2090 	mov	dph,a
      000873 E0               [24] 2091 	movx	a,@dptr
      000874 FF               [12] 2092 	mov	r7,a
      000875 EC               [12] 2093 	mov	a,r4
      000876 6F               [12] 2094 	xrl	a,r7
      000877 78r1C            [12] 2095 	mov	r0,#_fixed
      000879 46               [12] 2096 	orl	a,@r0
      00087A F6               [12] 2097 	mov	@r0,a
                                   2098 ;	life.c:163: for (x = 0; x < W; x++) {
      00087B 78r12            [12] 2099 	mov	r0,#_x
      00087D 06               [12] 2100 	inc	@r0
      00087E B6 00 02         [24] 2101 	cjne	@r0,#0x00,00458$
      000881 08               [12] 2102 	inc	r0
      000882 06               [12] 2103 	inc	@r0
      000883                       2104 00458$:
      000883 78r12            [12] 2105 	mov	r0,#_x
      000885 C3               [12] 2106 	clr	c
      000886 E6               [12] 2107 	mov	a,@r0
      000887 94 20            [12] 2108 	subb	a,#0x20
      000889 08               [12] 2109 	inc	r0
      00088A E6               [12] 2110 	mov	a,@r0
      00088B 64 80            [12] 2111 	xrl	a,#0x80
      00088D 94 80            [12] 2112 	subb	a,#0x80
      00088F 50 03            [24] 2113 	jnc	00459$
      000891 02r05r16         [24] 2114 	ljmp	00190$
      000894                       2115 00459$:
                                   2116 ;	life.c:160: for (y = 0; y < H; y++) {
      000894 78r14            [12] 2117 	mov	r0,#_y
      000896 06               [12] 2118 	inc	@r0
      000897 B6 00 02         [24] 2119 	cjne	@r0,#0x00,00460$
      00089A 08               [12] 2120 	inc	r0
      00089B 06               [12] 2121 	inc	@r0
      00089C                       2122 00460$:
      00089C 78r14            [12] 2123 	mov	r0,#_y
      00089E C3               [12] 2124 	clr	c
      00089F E6               [12] 2125 	mov	a,@r0
      0008A0 94 40            [12] 2126 	subb	a,#0x40
      0008A2 08               [12] 2127 	inc	r0
      0008A3 E6               [12] 2128 	mov	a,@r0
      0008A4 64 80            [12] 2129 	xrl	a,#0x80
      0008A6 94 80            [12] 2130 	subb	a,#0x80
      0008A8 50 03            [24] 2131 	jnc	00461$
      0008AA 02r04rEE         [24] 2132 	ljmp	00192$
      0008AD                       2133 00461$:
                                   2134 ;	life.c:191: cycle2 = !cycle2;
      0008AD 78r1D            [12] 2135 	mov	r0,#_cycle2
      0008AF E6               [12] 2136 	mov	a,@r0
      0008B0 B4 01 00         [24] 2137 	cjne	a,#0x01,00462$
      0008B3                       2138 00462$:
      0008B3 92*00            [24] 2139 	mov	b0,c
      0008B5 78r1D            [12] 2140 	mov	r0,#_cycle2
      0008B7 E4               [12] 2141 	clr	a
      0008B8 33               [12] 2142 	rlc	a
      0008B9 F6               [12] 2143 	mov	@r0,a
                                   2144 ;	life.c:192: fixed = !fixed;
      0008BA 78r1C            [12] 2145 	mov	r0,#_fixed
      0008BC E6               [12] 2146 	mov	a,@r0
      0008BD B4 01 00         [24] 2147 	cjne	a,#0x01,00463$
      0008C0                       2148 00463$:
      0008C0 92*00            [24] 2149 	mov	b0,c
      0008C2 78r1C            [12] 2150 	mov	r0,#_fixed
      0008C4 E4               [12] 2151 	clr	a
      0008C5 33               [12] 2152 	rlc	a
      0008C6 F6               [12] 2153 	mov	@r0,a
                                   2154 ;	life.c:194: memcpy(pu, u, sizeof (u));
      0008C7 E4               [12] 2155 	clr	a
      0008C8 C0 E0            [24] 2156 	push	acc
      0008CA 74 08            [12] 2157 	mov	a,#0x08
      0008CC C0 E0            [24] 2158 	push	acc
      0008CE 74r00            [12] 2159 	mov	a,#_u
      0008D0 C0 E0            [24] 2160 	push	acc
      0008D2 74s08            [12] 2161 	mov	a,#(_u >> 8)
      0008D4 C0 E0            [24] 2162 	push	acc
      0008D6 E4               [12] 2163 	clr	a
      0008D7 C0 E0            [24] 2164 	push	acc
      0008D9 90r00r00         [24] 2165 	mov	dptr,#_pu
      0008DC 75 F0 00         [24] 2166 	mov	b,#0x00
      0008DF 12r00r00         [24] 2167 	lcall	___memcpy
      0008E2 E5 81            [12] 2168 	mov	a,sp
      0008E4 24 FB            [12] 2169 	add	a,#0xfb
      0008E6 F5 81            [12] 2170 	mov	sp,a
                                   2171 ;	life.c:195: memcpy(u, nu, sizeof (nu));
      0008E8 E4               [12] 2172 	clr	a
      0008E9 C0 E0            [24] 2173 	push	acc
      0008EB 74 08            [12] 2174 	mov	a,#0x08
      0008ED C0 E0            [24] 2175 	push	acc
      0008EF 74r00            [12] 2176 	mov	a,#_nu
      0008F1 C0 E0            [24] 2177 	push	acc
      0008F3 74s10            [12] 2178 	mov	a,#(_nu >> 8)
      0008F5 C0 E0            [24] 2179 	push	acc
      0008F7 E4               [12] 2180 	clr	a
      0008F8 C0 E0            [24] 2181 	push	acc
      0008FA 90r08r00         [24] 2182 	mov	dptr,#_u
      0008FD 75 F0 00         [24] 2183 	mov	b,#0x00
      000900 12r00r00         [24] 2184 	lcall	___memcpy
      000903 E5 81            [12] 2185 	mov	a,sp
      000905 24 FB            [12] 2186 	add	a,#0xfb
      000907 F5 81            [12] 2187 	mov	sp,a
                                   2188 ;	life.c:233: if (fixed || cycle2) {
      000909 78r1C            [12] 2189 	mov	r0,#_fixed
      00090B E6               [12] 2190 	mov	a,@r0
      00090C 70 08            [24] 2191 	jnz	00123$
      00090E 78r1D            [12] 2192 	mov	r0,#_cycle2
      000910 E6               [12] 2193 	mov	a,@r0
      000911 70 03            [24] 2194 	jnz	00465$
      000913 02r04rC6         [24] 2195 	ljmp	00205$
      000916                       2196 00465$:
      000916                       2197 00123$:
                                   2198 ;	life.c:234: printstr("DONE ");
      000916 7Dr2C            [12] 2199 	mov	r5,#___str_6
      000918 7Es00            [12] 2200 	mov	r6,#(___str_6 >> 8)
      00091A 7F 80            [12] 2201 	mov	r7,#0x80
                                   2202 ;	life.c:49: return;
      00091C                       2203 00195$:
                                   2204 ;	life.c:47: for (; *s; s++) putchar(*s);
      00091C 8D 82            [24] 2205 	mov	dpl,r5
      00091E 8E 83            [24] 2206 	mov	dph,r6
      000920 8F F0            [24] 2207 	mov	b,r7
      000922 12r00r00         [24] 2208 	lcall	__gptrget
      000925 FC               [12] 2209 	mov	r4,a
      000926 60 10            [24] 2210 	jz	00165$
      000928 7B 00            [12] 2211 	mov	r3,#0x00
      00092A 8C 82            [24] 2212 	mov	dpl,r4
      00092C 8B 83            [24] 2213 	mov	dph,r3
      00092E 12r00r00         [24] 2214 	lcall	_putchar
      000931 0D               [12] 2215 	inc	r5
                                   2216 ;	life.c:234: printstr("DONE ");
      000932 BD 00 E7         [24] 2217 	cjne	r5,#0x00,00195$
      000935 0E               [12] 2218 	inc	r6
      000936 80 E4            [24] 2219 	sjmp	00195$
      000938                       2220 00165$:
                                   2221 ;	life.c:235: if (fixed) printstr("FIXED\r\n");
      000938 78r1C            [12] 2222 	mov	r0,#_fixed
      00093A E6               [12] 2223 	mov	a,@r0
      00093B 60 22            [24] 2224 	jz	00121$
      00093D 7Dr32            [12] 2225 	mov	r5,#___str_7
      00093F 7Es00            [12] 2226 	mov	r6,#(___str_7 >> 8)
      000941 7F 80            [12] 2227 	mov	r7,#0x80
                                   2228 ;	life.c:49: return;
      000943                       2229 00198$:
                                   2230 ;	life.c:47: for (; *s; s++) putchar(*s);
      000943 8D 82            [24] 2231 	mov	dpl,r5
      000945 8E 83            [24] 2232 	mov	dph,r6
      000947 8F F0            [24] 2233 	mov	b,r7
      000949 12r00r00         [24] 2234 	lcall	__gptrget
      00094C FC               [12] 2235 	mov	r4,a
      00094D 60 32            [24] 2236 	jz	00122$
      00094F 7B 00            [12] 2237 	mov	r3,#0x00
      000951 8C 82            [24] 2238 	mov	dpl,r4
      000953 8B 83            [24] 2239 	mov	dph,r3
      000955 12r00r00         [24] 2240 	lcall	_putchar
      000958 0D               [12] 2241 	inc	r5
                                   2242 ;	life.c:235: if (fixed) printstr("FIXED\r\n");
      000959 BD 00 E7         [24] 2243 	cjne	r5,#0x00,00198$
      00095C 0E               [12] 2244 	inc	r6
      00095D 80 E4            [24] 2245 	sjmp	00198$
      00095F                       2246 00121$:
                                   2247 ;	life.c:236: else printstr("CYCLE2\r\n");
      00095F 7Dr3A            [12] 2248 	mov	r5,#___str_8
      000961 7Es00            [12] 2249 	mov	r6,#(___str_8 >> 8)
      000963 7F 80            [12] 2250 	mov	r7,#0x80
                                   2251 ;	life.c:49: return;
      000965                       2252 00201$:
                                   2253 ;	life.c:47: for (; *s; s++) putchar(*s);
      000965 8D 82            [24] 2254 	mov	dpl,r5
      000967 8E 83            [24] 2255 	mov	dph,r6
      000969 8F F0            [24] 2256 	mov	b,r7
      00096B 12r00r00         [24] 2257 	lcall	__gptrget
      00096E FC               [12] 2258 	mov	r4,a
      00096F 60 10            [24] 2259 	jz	00122$
      000971 7B 00            [12] 2260 	mov	r3,#0x00
      000973 8C 82            [24] 2261 	mov	dpl,r4
      000975 8B 83            [24] 2262 	mov	dph,r3
      000977 12r00r00         [24] 2263 	lcall	_putchar
      00097A 0D               [12] 2264 	inc	r5
                                   2265 ;	life.c:236: else printstr("CYCLE2\r\n");
      00097B BD 00 E7         [24] 2266 	cjne	r5,#0x00,00201$
      00097E 0E               [12] 2267 	inc	r6
      00097F 80 E4            [24] 2268 	sjmp	00201$
      000981                       2269 00122$:
                                   2270 ;	life.c:237: (void)getchar();
      000981 12r00r05         [24] 2271 	lcall	_getchar
                                   2272 ;	life.c:238: break;
      000984                       2273 00126$:
                                   2274 ;	life.c:242: if (i1) {
      000984 78r11            [12] 2275 	mov	r0,#_i1
      000986 E6               [12] 2276 	mov	a,@r0
      000987 60 25            [24] 2277 	jz	00211$
                                   2278 ;	life.c:243: printstr("BREAK\r\n");
      000989 7Dr43            [12] 2279 	mov	r5,#___str_9
      00098B 7Es00            [12] 2280 	mov	r6,#(___str_9 >> 8)
      00098D 7F 80            [12] 2281 	mov	r7,#0x80
                                   2282 ;	life.c:49: return;
      00098F                       2283 00208$:
                                   2284 ;	life.c:47: for (; *s; s++) putchar(*s);
      00098F 8D 82            [24] 2285 	mov	dpl,r5
      000991 8E 83            [24] 2286 	mov	dph,r6
      000993 8F F0            [24] 2287 	mov	b,r7
      000995 12r00r00         [24] 2288 	lcall	__gptrget
      000998 FC               [12] 2289 	mov	r4,a
      000999 60 10            [24] 2290 	jz	00171$
      00099B 7B 00            [12] 2291 	mov	r3,#0x00
      00099D 8C 82            [24] 2292 	mov	dpl,r4
      00099F 8B 83            [24] 2293 	mov	dph,r3
      0009A1 12r00r00         [24] 2294 	lcall	_putchar
      0009A4 0D               [12] 2295 	inc	r5
                                   2296 ;	life.c:243: printstr("BREAK\r\n");
      0009A5 BD 00 E7         [24] 2297 	cjne	r5,#0x00,00208$
      0009A8 0E               [12] 2298 	inc	r6
      0009A9 80 E4            [24] 2299 	sjmp	00208$
      0009AB                       2300 00171$:
                                   2301 ;	life.c:244: (void)getchar();
      0009AB 12r00r05         [24] 2302 	lcall	_getchar
      0009AE                       2303 00211$:
                                   2304 ;	life.c:207: for (i0 = 0; !i0; ) {		
      0009AE 78r10            [12] 2305 	mov	r0,#_i0
      0009B0 E6               [12] 2306 	mov	a,@r0
      0009B1 70 03            [24] 2307 	jnz	00476$
      0009B3 02r02r3B         [24] 2308 	ljmp	00210$
      0009B6                       2309 00476$:
                                   2310 ;	life.c:248: terminate:
      0009B6                       2311 00130$:
                                   2312 ;	life.c:249: EA = 0;
                                   2313 ;	assignBit
      0009B6 C2 AF            [12] 2314 	clr	_EA
                                   2315 ;	life.c:250: printstr("TERM\r\n");
      0009B8 7Dr4B            [12] 2316 	mov	r5,#___str_10
      0009BA 7Es00            [12] 2317 	mov	r6,#(___str_10 >> 8)
      0009BC 7F 80            [12] 2318 	mov	r7,#0x80
                                   2319 ;	life.c:49: return;
      0009BE                       2320 00213$:
                                   2321 ;	life.c:47: for (; *s; s++) putchar(*s);
      0009BE 8D 82            [24] 2322 	mov	dpl,r5
      0009C0 8E 83            [24] 2323 	mov	dph,r6
      0009C2 8F F0            [24] 2324 	mov	b,r7
      0009C4 12r00r00         [24] 2325 	lcall	__gptrget
      0009C7 FC               [12] 2326 	mov	r4,a
      0009C8 60 10            [24] 2327 	jz	00173$
      0009CA 7B 00            [12] 2328 	mov	r3,#0x00
      0009CC 8C 82            [24] 2329 	mov	dpl,r4
      0009CE 8B 83            [24] 2330 	mov	dph,r3
      0009D0 12r00r00         [24] 2331 	lcall	_putchar
      0009D3 0D               [12] 2332 	inc	r5
                                   2333 ;	life.c:250: printstr("TERM\r\n");
      0009D4 BD 00 E7         [24] 2334 	cjne	r5,#0x00,00213$
      0009D7 0E               [12] 2335 	inc	r6
      0009D8 80 E4            [24] 2336 	sjmp	00213$
      0009DA                       2337 00173$:
                                   2338 ;	life.c:251: (void)getchar();
      0009DA 12r00r05         [24] 2339 	lcall	_getchar
                                   2340 ;	life.c:255: __endasm;
      0009DD 02 00 00         [24] 2341 	ljmp	0
                                   2342 ;	life.c:256: }
      0009E0 85*00 81         [24] 2343 	mov	sp,_bp
      0009E3 D0*00            [24] 2344 	pop	_bp
      0009E5 22               [24] 2345 	ret
                                   2346 	.area CSEG    (CODE)
                                   2347 	.area CONST   (CODE)
                                   2348 	.area CONST   (CODE)
      000000                       2349 ___str_0:
      000000 1B                    2350 	.db 0x1b
      000001 5B 32 4A              2351 	.ascii "[2J"
      000004 1B                    2352 	.db 0x1b
      000005 5B 6D                 2353 	.ascii "[m"
      000007 00                    2354 	.db 0x00
                                   2355 	.area CSEG    (CODE)
                                   2356 	.area CONST   (CODE)
      000008                       2357 ___str_1:
      000008 0D                    2358 	.db 0x0d
      000009 0A                    2359 	.db 0x0a
      00000A 00                    2360 	.db 0x00
                                   2361 	.area CSEG    (CODE)
                                   2362 	.area CONST   (CODE)
      00000B                       2363 ___str_2:
      00000B 4C 4F 41 44 20 3C     2364 	.ascii "LOAD <"
      000011 00                    2365 	.db 0x00
                                   2366 	.area CSEG    (CODE)
                                   2367 	.area CONST   (CODE)
      000012                       2368 ___str_3:
      000012 3E                    2369 	.ascii ">"
      000013 0D                    2370 	.db 0x0d
      000014 0A                    2371 	.db 0x0a
      000015 00                    2372 	.db 0x00
                                   2373 	.area CSEG    (CODE)
                                   2374 	.area CONST   (CODE)
      000016                       2375 ___str_4:
      000016 1B                    2376 	.db 0x1b
      000017 5B 32 4A              2377 	.ascii "[2J"
      00001A 1B                    2378 	.db 0x1b
      00001B 5B 6D 49 4E 49 54     2379 	.ascii "[mINIT"
      000021 0D                    2380 	.db 0x0d
      000022 0A                    2381 	.db 0x0a
      000023 00                    2382 	.db 0x00
                                   2383 	.area CSEG    (CODE)
                                   2384 	.area CONST   (CODE)
      000024                       2385 ___str_5:
      000024 52 45 41 44 59        2386 	.ascii "READY"
      000029 0D                    2387 	.db 0x0d
      00002A 0A                    2388 	.db 0x0a
      00002B 00                    2389 	.db 0x00
                                   2390 	.area CSEG    (CODE)
                                   2391 	.area CONST   (CODE)
      00002C                       2392 ___str_6:
      00002C 44 4F 4E 45 20        2393 	.ascii "DONE "
      000031 00                    2394 	.db 0x00
                                   2395 	.area CSEG    (CODE)
                                   2396 	.area CONST   (CODE)
      000032                       2397 ___str_7:
      000032 46 49 58 45 44        2398 	.ascii "FIXED"
      000037 0D                    2399 	.db 0x0d
      000038 0A                    2400 	.db 0x0a
      000039 00                    2401 	.db 0x00
                                   2402 	.area CSEG    (CODE)
                                   2403 	.area CONST   (CODE)
      00003A                       2404 ___str_8:
      00003A 43 59 43 4C 45 32     2405 	.ascii "CYCLE2"
      000040 0D                    2406 	.db 0x0d
      000041 0A                    2407 	.db 0x0a
      000042 00                    2408 	.db 0x00
                                   2409 	.area CSEG    (CODE)
                                   2410 	.area CONST   (CODE)
      000043                       2411 ___str_9:
      000043 42 52 45 41 4B        2412 	.ascii "BREAK"
      000048 0D                    2413 	.db 0x0d
      000049 0A                    2414 	.db 0x0a
      00004A 00                    2415 	.db 0x00
                                   2416 	.area CSEG    (CODE)
                                   2417 	.area CONST   (CODE)
      00004B                       2418 ___str_10:
      00004B 54 45 52 4D           2419 	.ascii "TERM"
      00004F 0D                    2420 	.db 0x0d
      000050 0A                    2421 	.db 0x0a
      000051 00                    2422 	.db 0x00
                                   2423 	.area CSEG    (CODE)
                                   2424 	.area XINIT   (CODE)
                                   2425 	.area CABS    (ABS,CODE)
