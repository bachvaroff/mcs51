                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _generation
                                    143 	.globl _cycle2
                                    144 	.globl _fixed
                                    145 	.globl _n
                                    146 	.globl _bstep
                                    147 	.globl _c
                                    148 	.globl _j
                                    149 	.globl _y1
                                    150 	.globl _x1
                                    151 	.globl _y
                                    152 	.globl _x
                                    153 	.globl _nu
                                    154 	.globl _u
                                    155 	.globl _pu
                                    156 	.globl _i1
                                    157 	.globl _i0
                                    158 ;--------------------------------------------------------
                                    159 ; special function registers
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 _P0	=	0x0080
                           000081   164 _SP	=	0x0081
                           000082   165 _DPL	=	0x0082
                           000083   166 _DPH	=	0x0083
                           000087   167 _PCON	=	0x0087
                           000088   168 _TCON	=	0x0088
                           000089   169 _TMOD	=	0x0089
                           00008A   170 _TL0	=	0x008a
                           00008B   171 _TL1	=	0x008b
                           00008C   172 _TH0	=	0x008c
                           00008D   173 _TH1	=	0x008d
                           000090   174 _P1	=	0x0090
                           000098   175 _SCON	=	0x0098
                           000099   176 _SBUF	=	0x0099
                           0000A0   177 _P2	=	0x00a0
                           0000A8   178 _IE	=	0x00a8
                           0000B0   179 _P3	=	0x00b0
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 _T2CON	=	0x00c8
                           0000C9   182 _T2MOD	=	0x00c9
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000E0   189 _A	=	0x00e0
                           0000F0   190 _B	=	0x00f0
                                    191 ;--------------------------------------------------------
                                    192 ; special function bits
                                    193 ;--------------------------------------------------------
                                    194 	.area RSEG    (ABS,DATA)
      000000                        195 	.org 0x0000
                           000080   196 _P0_0	=	0x0080
                           000081   197 _P0_1	=	0x0081
                           000082   198 _P0_2	=	0x0082
                           000083   199 _P0_3	=	0x0083
                           000084   200 _P0_4	=	0x0084
                           000085   201 _P0_5	=	0x0085
                           000086   202 _P0_6	=	0x0086
                           000087   203 _P0_7	=	0x0087
                           000088   204 _IT0	=	0x0088
                           000089   205 _IE0	=	0x0089
                           00008A   206 _IT1	=	0x008a
                           00008B   207 _IE1	=	0x008b
                           00008C   208 _TR0	=	0x008c
                           00008D   209 _TF0	=	0x008d
                           00008E   210 _TR1	=	0x008e
                           00008F   211 _TF1	=	0x008f
                           000090   212 _P1_0	=	0x0090
                           000091   213 _P1_1	=	0x0091
                           000092   214 _P1_2	=	0x0092
                           000093   215 _P1_3	=	0x0093
                           000094   216 _P1_4	=	0x0094
                           000095   217 _P1_5	=	0x0095
                           000096   218 _P1_6	=	0x0096
                           000097   219 _P1_7	=	0x0097
                           000090   220 _T2	=	0x0090
                           000091   221 _T2EX	=	0x0091
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AD   243 _ET2	=	0x00ad
                           0000AF   244 _EA	=	0x00af
                           0000B0   245 _P3_0	=	0x00b0
                           0000B1   246 _P3_1	=	0x00b1
                           0000B2   247 _P3_2	=	0x00b2
                           0000B3   248 _P3_3	=	0x00b3
                           0000B4   249 _P3_4	=	0x00b4
                           0000B5   250 _P3_5	=	0x00b5
                           0000B6   251 _P3_6	=	0x00b6
                           0000B7   252 _P3_7	=	0x00b7
                           0000B0   253 _RXD	=	0x00b0
                           0000B1   254 _TXD	=	0x00b1
                           0000B2   255 _INT0	=	0x00b2
                           0000B3   256 _INT1	=	0x00b3
                           0000B4   257 _T0	=	0x00b4
                           0000B5   258 _T1	=	0x00b5
                           0000B6   259 _WR	=	0x00b6
                           0000B7   260 _RD	=	0x00b7
                           0000B8   261 _PX0	=	0x00b8
                           0000B9   262 _PT0	=	0x00b9
                           0000BA   263 _PX1	=	0x00ba
                           0000BB   264 _PT1	=	0x00bb
                           0000BC   265 _PS	=	0x00bc
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _FL	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable register banks
                                    293 ;--------------------------------------------------------
                                    294 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        295 	.ds 8
                                    296 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        297 	.ds 8
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable bit register bank
                                    300 ;--------------------------------------------------------
                                    301 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        302 bits:
      000000                        303 	.ds 1
                           008000   304 	b0 = bits[0]
                           008100   305 	b1 = bits[1]
                           008200   306 	b2 = bits[2]
                           008300   307 	b3 = bits[3]
                           008400   308 	b4 = bits[4]
                           008500   309 	b5 = bits[5]
                           008600   310 	b6 = bits[6]
                           008700   311 	b7 = bits[7]
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable items in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
      000000                        347 _i0::
      000000                        348 	.ds 1
      000001                        349 _i1::
      000001                        350 	.ds 1
      000002                        351 _pu::
      000002                        352 	.ds 1024
      000402                        353 _u::
      000402                        354 	.ds 1024
      000802                        355 _nu::
      000802                        356 	.ds 1024
      000C02                        357 _x::
      000C02                        358 	.ds 2
      000C04                        359 _y::
      000C04                        360 	.ds 2
      000C06                        361 _x1::
      000C06                        362 	.ds 2
      000C08                        363 _y1::
      000C08                        364 	.ds 2
      000C0A                        365 _j::
      000C0A                        366 	.ds 2
      000C0C                        367 _c::
      000C0C                        368 	.ds 2
      000C0E                        369 _bstep::
      000C0E                        370 	.ds 1
      000C0F                        371 _n::
      000C0F                        372 	.ds 1
      000C10                        373 _fixed::
      000C10                        374 	.ds 1
      000C11                        375 _cycle2::
      000C11                        376 	.ds 1
      000C12                        377 _generation::
      000C12                        378 	.ds 4
                                    379 ;--------------------------------------------------------
                                    380 ; absolute external ram data
                                    381 ;--------------------------------------------------------
                                    382 	.area XABS    (ABS,XDATA)
                                    383 ;--------------------------------------------------------
                                    384 ; external initialized ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area XISEG   (XDATA)
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT0 (CODE)
                                    389 	.area GSINIT1 (CODE)
                                    390 	.area GSINIT2 (CODE)
                                    391 	.area GSINIT3 (CODE)
                                    392 	.area GSINIT4 (CODE)
                                    393 	.area GSINIT5 (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.area GSFINAL (CODE)
                                    396 	.area CSEG    (CODE)
                                    397 ;--------------------------------------------------------
                                    398 ; interrupt vector 
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
      000000                        401 __interrupt_vect:
      000000 02r00r00         [24]  402 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  403 	ljmp	_int0
      000006                        404 	.ds	5
      00000B 32               [24]  405 	reti
      00000C                        406 	.ds	7
      000013 02r00r21         [24]  407 	ljmp	_int1
                                    408 ;--------------------------------------------------------
                                    409 ; global & static initialisations
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area GSINIT  (CODE)
                                    413 	.area GSFINAL (CODE)
                                    414 	.area GSINIT  (CODE)
                                    415 	.globl __sdcc_gsinit_startup
                                    416 	.globl __sdcc_program_startup
                                    417 	.globl __start__stack
                                    418 	.globl __mcs51_genXINIT
                                    419 	.globl __mcs51_genXRAMCLEAR
                                    420 	.globl __mcs51_genRAMCLEAR
                                    421 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  422 	ljmp	__sdcc_program_startup
                                    423 ;--------------------------------------------------------
                                    424 ; Home
                                    425 ;--------------------------------------------------------
                                    426 	.area HOME    (CODE)
                                    427 	.area HOME    (CODE)
      000016                        428 __sdcc_program_startup:
      000016 02r02r99         [24]  429 	ljmp	_main
                                    430 ;	return from main will return to caller
                                    431 ;--------------------------------------------------------
                                    432 ; code
                                    433 ;--------------------------------------------------------
                                    434 	.area CSEG    (CODE)
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'putchar'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers 
                                    439 ;------------------------------------------------------------
                                    440 ;	life.c:7: int putchar(int c) __naked {
                                    441 ;	-----------------------------------------
                                    442 ;	 function putchar
                                    443 ;	-----------------------------------------
      000000                        444 _putchar:
                                    445 ;	naked function: no prologue.
                                    446 ;	life.c:12: __endasm;
      000000 E5 82            [12]  447 	mov	a, dpl
      000002 02 00 30         [24]  448 	ljmp	0x0030
                                    449 ;	life.c:13: }
                                    450 ;	naked function: no epilogue.
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'getchar'
                                    453 ;------------------------------------------------------------
                                    454 ;	life.c:15: int getchar(void) __naked {
                                    455 ;	-----------------------------------------
                                    456 ;	 function getchar
                                    457 ;	-----------------------------------------
      000005                        458 _getchar:
                                    459 ;	naked function: no prologue.
                                    460 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  461 	lcall	0x0032
      000008 F5 82            [12]  462 	mov	dpl, a
      00000A 75 83 00         [24]  463 	mov	dph, #0
      00000D 22               [24]  464 	ret
                                    465 ;	life.c:22: }
                                    466 ;	naked function: no epilogue.
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'int0'
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:65: void int0(void) __interrupt 0 __using 1 {
                                    471 ;	-----------------------------------------
                                    472 ;	 function int0
                                    473 ;	-----------------------------------------
      00000E                        474 _int0:
                           00000F   475 	ar7 = 0x0f
                           00000E   476 	ar6 = 0x0e
                           00000D   477 	ar5 = 0x0d
                           00000C   478 	ar4 = 0x0c
                           00000B   479 	ar3 = 0x0b
                           00000A   480 	ar2 = 0x0a
                           000009   481 	ar1 = 0x09
                           000008   482 	ar0 = 0x08
      00000E C0 E0            [24]  483 	push	acc
      000010 C0 82            [24]  484 	push	dpl
      000012 C0 83            [24]  485 	push	dph
                                    486 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  487 	mov	dptr,#_i0
      000017 74 01            [12]  488 	mov	a,#0x01
      000019 F0               [24]  489 	movx	@dptr,a
                                    490 ;	life.c:67: }
      00001A D0 83            [24]  491 	pop	dph
      00001C D0 82            [24]  492 	pop	dpl
      00001E D0 E0            [24]  493 	pop	acc
      000020 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop psw
                                    497 ;	eliminated unneeded push/pop b
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int1'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:69: void int1(void) __interrupt 2 __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int1
                                    504 ;	-----------------------------------------
      000021                        505 _int1:
      000021 C0 E0            [24]  506 	push	acc
      000023 C0 82            [24]  507 	push	dpl
      000025 C0 83            [24]  508 	push	dph
                                    509 ;	life.c:70: i1 = 1;
      000027 90r00r01         [24]  510 	mov	dptr,#_i1
      00002A 74 01            [12]  511 	mov	a,#0x01
      00002C F0               [24]  512 	movx	@dptr,a
                                    513 ;	life.c:71: }
      00002D D0 83            [24]  514 	pop	dph
      00002F D0 82            [24]  515 	pop	dpl
      000031 D0 E0            [24]  516 	pop	acc
      000033 32               [24]  517 	reti
                                    518 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    519 ;	eliminated unneeded push/pop psw
                                    520 ;	eliminated unneeded push/pop b
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'show'
                                    523 ;------------------------------------------------------------
                                    524 ;hdr                       Allocated to registers r7 
                                    525 ;__1966080005              Allocated to registers 
                                    526 ;s                         Allocated to registers r5 r6 r7 
                                    527 ;__1310720001              Allocated to registers r6 r7 
                                    528 ;a                         Allocated to registers 
                                    529 ;__1310720003              Allocated to registers r6 r7 
                                    530 ;a                         Allocated to registers 
                                    531 ;__1966080008              Allocated to registers 
                                    532 ;s                         Allocated to registers r5 r6 r7 
                                    533 ;__2621440011              Allocated to registers 
                                    534 ;s                         Allocated to registers r5 r6 r7 
                                    535 ;------------------------------------------------------------
                                    536 ;	life.c:94: void show(char hdr) {
                                    537 ;	-----------------------------------------
                                    538 ;	 function show
                                    539 ;	-----------------------------------------
      000034                        540 _show:
                           000007   541 	ar7 = 0x07
                           000006   542 	ar6 = 0x06
                           000005   543 	ar5 = 0x05
                           000004   544 	ar4 = 0x04
                           000003   545 	ar3 = 0x03
                           000002   546 	ar2 = 0x02
                           000001   547 	ar1 = 0x01
                           000000   548 	ar0 = 0x00
                                    549 ;	life.c:95: if (hdr) {
      000034 E5 82            [12]  550 	mov	a,dpl
      000036 FF               [12]  551 	mov	r7,a
      000037 70 03            [24]  552 	jnz	00190$
      000039 02r01rDA         [24]  553 	ljmp	00102$
      00003C                        554 00190$:
                                    555 ;	life.c:96: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  556 	mov	r5,#___str_0
      00003E 7Es00            [12]  557 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  558 	mov	r7,#0x80
                                    559 ;	life.c:48: return;
      000042                        560 00121$:
                                    561 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  562 	mov	dpl,r5
      000044 8E 83            [24]  563 	mov	dph,r6
      000046 8F F0            [24]  564 	mov	b,r7
      000048 12r00r00         [24]  565 	lcall	__gptrget
      00004B FC               [12]  566 	mov	r4,a
      00004C 60 10            [24]  567 	jz	00109$
      00004E 7B 00            [12]  568 	mov	r3,#0x00
      000050 8C 82            [24]  569 	mov	dpl,r4
      000052 8B 83            [24]  570 	mov	dph,r3
      000054 12r00r00         [24]  571 	lcall	_putchar
      000057 0D               [12]  572 	inc	r5
                                    573 ;	life.c:96: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  574 	cjne	r5,#0x00,00121$
      00005B 0E               [12]  575 	inc	r6
      00005C 80 E4            [24]  576 	sjmp	00121$
      00005E                        577 00109$:
                                    578 ;	life.c:88: print16x(generation[1]);
      00005E 90r0Cr14         [24]  579 	mov	dptr,#(_generation + 0x0002)
      000061 E0               [24]  580 	movx	a,@dptr
      000062 FE               [12]  581 	mov	r6,a
      000063 A3               [24]  582 	inc	dptr
      000064 E0               [24]  583 	movx	a,@dptr
                                    584 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000065 FF               [12]  585 	mov	r7,a
      000066 C4               [12]  586 	swap	a
      000067 54 0F            [12]  587 	anl	a,#0x0f
      000069 30 E3 02         [24]  588 	jnb	acc.3,00193$
      00006C 44 F0            [12]  589 	orl	a,#0xf0
      00006E                        590 00193$:
      00006E FC               [12]  591 	mov	r4,a
      00006F 33               [12]  592 	rlc	a
      000070 95 E0            [12]  593 	subb	a,acc
      000072 53 04 0F         [24]  594 	anl	ar4,#0x0f
      000075 7D 00            [12]  595 	mov	r5,#0x00
      000077 EC               [12]  596 	mov	a,r4
      000078 24r00            [12]  597 	add	a,#_digits
      00007A F5 82            [12]  598 	mov	dpl,a
      00007C ED               [12]  599 	mov	a,r5
      00007D 34s00            [12]  600 	addc	a,#(_digits >> 8)
      00007F F5 83            [12]  601 	mov	dph,a
      000081 E4               [12]  602 	clr	a
      000082 93               [24]  603 	movc	a,@a+dptr
      000083 FD               [12]  604 	mov	r5,a
      000084 7C 00            [12]  605 	mov	r4,#0x00
      000086 8D 82            [24]  606 	mov	dpl,r5
      000088 8C 83            [24]  607 	mov	dph,r4
      00008A 12r00r00         [24]  608 	lcall	_putchar
                                    609 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      00008D 8F 05            [24]  610 	mov	ar5,r7
      00008F 53 05 0F         [24]  611 	anl	ar5,#0x0f
      000092 7C 00            [12]  612 	mov	r4,#0x00
      000094 ED               [12]  613 	mov	a,r5
      000095 24r00            [12]  614 	add	a,#_digits
      000097 F5 82            [12]  615 	mov	dpl,a
      000099 EC               [12]  616 	mov	a,r4
      00009A 34s00            [12]  617 	addc	a,#(_digits >> 8)
      00009C F5 83            [12]  618 	mov	dph,a
      00009E E4               [12]  619 	clr	a
      00009F 93               [24]  620 	movc	a,@a+dptr
      0000A0 FD               [12]  621 	mov	r5,a
      0000A1 7C 00            [12]  622 	mov	r4,#0x00
      0000A3 8D 82            [24]  623 	mov	dpl,r5
      0000A5 8C 83            [24]  624 	mov	dph,r4
      0000A7 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000AA 8E 04            [24]  627 	mov	ar4,r6
      0000AC EF               [12]  628 	mov	a,r7
      0000AD C4               [12]  629 	swap	a
      0000AE CC               [12]  630 	xch	a,r4
      0000AF C4               [12]  631 	swap	a
      0000B0 54 0F            [12]  632 	anl	a,#0x0f
      0000B2 6C               [12]  633 	xrl	a,r4
      0000B3 CC               [12]  634 	xch	a,r4
      0000B4 54 0F            [12]  635 	anl	a,#0x0f
      0000B6 CC               [12]  636 	xch	a,r4
      0000B7 6C               [12]  637 	xrl	a,r4
      0000B8 CC               [12]  638 	xch	a,r4
      0000B9 30 E3 02         [24]  639 	jnb	acc.3,00194$
      0000BC 44 F0            [12]  640 	orl	a,#0xf0
      0000BE                        641 00194$:
      0000BE 53 04 0F         [24]  642 	anl	ar4,#0x0f
      0000C1 7D 00            [12]  643 	mov	r5,#0x00
      0000C3 EC               [12]  644 	mov	a,r4
      0000C4 24r00            [12]  645 	add	a,#_digits
      0000C6 F5 82            [12]  646 	mov	dpl,a
      0000C8 ED               [12]  647 	mov	a,r5
      0000C9 34s00            [12]  648 	addc	a,#(_digits >> 8)
      0000CB F5 83            [12]  649 	mov	dph,a
      0000CD E4               [12]  650 	clr	a
      0000CE 93               [24]  651 	movc	a,@a+dptr
      0000CF FD               [12]  652 	mov	r5,a
      0000D0 7C 00            [12]  653 	mov	r4,#0x00
      0000D2 8D 82            [24]  654 	mov	dpl,r5
      0000D4 8C 83            [24]  655 	mov	dph,r4
      0000D6 12r00r00         [24]  656 	lcall	_putchar
                                    657 ;	life.c:40: putchar(digits[a & 0xf]);
      0000D9 53 06 0F         [24]  658 	anl	ar6,#0x0f
      0000DC 7F 00            [12]  659 	mov	r7,#0x00
      0000DE EE               [12]  660 	mov	a,r6
      0000DF 24r00            [12]  661 	add	a,#_digits
      0000E1 F5 82            [12]  662 	mov	dpl,a
      0000E3 EF               [12]  663 	mov	a,r7
      0000E4 34s00            [12]  664 	addc	a,#(_digits >> 8)
      0000E6 F5 83            [12]  665 	mov	dph,a
      0000E8 E4               [12]  666 	clr	a
      0000E9 93               [24]  667 	movc	a,@a+dptr
      0000EA FF               [12]  668 	mov	r7,a
      0000EB 7E 00            [12]  669 	mov	r6,#0x00
      0000ED 8F 82            [24]  670 	mov	dpl,r7
      0000EF 8E 83            [24]  671 	mov	dph,r6
      0000F1 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:89: print16x(generation[0]);
      0000F4 90r0Cr12         [24]  674 	mov	dptr,#_generation
      0000F7 E0               [24]  675 	movx	a,@dptr
      0000F8 FE               [12]  676 	mov	r6,a
      0000F9 A3               [24]  677 	inc	dptr
      0000FA E0               [24]  678 	movx	a,@dptr
                                    679 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000FB FF               [12]  680 	mov	r7,a
      0000FC C4               [12]  681 	swap	a
      0000FD 54 0F            [12]  682 	anl	a,#0x0f
      0000FF 30 E3 02         [24]  683 	jnb	acc.3,00195$
      000102 44 F0            [12]  684 	orl	a,#0xf0
      000104                        685 00195$:
      000104 FC               [12]  686 	mov	r4,a
      000105 33               [12]  687 	rlc	a
      000106 95 E0            [12]  688 	subb	a,acc
      000108 53 04 0F         [24]  689 	anl	ar4,#0x0f
      00010B 7D 00            [12]  690 	mov	r5,#0x00
      00010D EC               [12]  691 	mov	a,r4
      00010E 24r00            [12]  692 	add	a,#_digits
      000110 F5 82            [12]  693 	mov	dpl,a
      000112 ED               [12]  694 	mov	a,r5
      000113 34s00            [12]  695 	addc	a,#(_digits >> 8)
      000115 F5 83            [12]  696 	mov	dph,a
      000117 E4               [12]  697 	clr	a
      000118 93               [24]  698 	movc	a,@a+dptr
      000119 FD               [12]  699 	mov	r5,a
      00011A 7C 00            [12]  700 	mov	r4,#0x00
      00011C 8D 82            [24]  701 	mov	dpl,r5
      00011E 8C 83            [24]  702 	mov	dph,r4
      000120 12r00r00         [24]  703 	lcall	_putchar
                                    704 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000123 8F 05            [24]  705 	mov	ar5,r7
      000125 53 05 0F         [24]  706 	anl	ar5,#0x0f
      000128 7C 00            [12]  707 	mov	r4,#0x00
      00012A ED               [12]  708 	mov	a,r5
      00012B 24r00            [12]  709 	add	a,#_digits
      00012D F5 82            [12]  710 	mov	dpl,a
      00012F EC               [12]  711 	mov	a,r4
      000130 34s00            [12]  712 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  713 	mov	dph,a
      000134 E4               [12]  714 	clr	a
      000135 93               [24]  715 	movc	a,@a+dptr
      000136 FD               [12]  716 	mov	r5,a
      000137 7C 00            [12]  717 	mov	r4,#0x00
      000139 8D 82            [24]  718 	mov	dpl,r5
      00013B 8C 83            [24]  719 	mov	dph,r4
      00013D 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000140 8E 04            [24]  722 	mov	ar4,r6
      000142 EF               [12]  723 	mov	a,r7
      000143 C4               [12]  724 	swap	a
      000144 CC               [12]  725 	xch	a,r4
      000145 C4               [12]  726 	swap	a
      000146 54 0F            [12]  727 	anl	a,#0x0f
      000148 6C               [12]  728 	xrl	a,r4
      000149 CC               [12]  729 	xch	a,r4
      00014A 54 0F            [12]  730 	anl	a,#0x0f
      00014C CC               [12]  731 	xch	a,r4
      00014D 6C               [12]  732 	xrl	a,r4
      00014E CC               [12]  733 	xch	a,r4
      00014F 30 E3 02         [24]  734 	jnb	acc.3,00196$
      000152 44 F0            [12]  735 	orl	a,#0xf0
      000154                        736 00196$:
      000154 53 04 0F         [24]  737 	anl	ar4,#0x0f
      000157 7D 00            [12]  738 	mov	r5,#0x00
      000159 EC               [12]  739 	mov	a,r4
      00015A 24r00            [12]  740 	add	a,#_digits
      00015C F5 82            [12]  741 	mov	dpl,a
      00015E ED               [12]  742 	mov	a,r5
      00015F 34s00            [12]  743 	addc	a,#(_digits >> 8)
      000161 F5 83            [12]  744 	mov	dph,a
      000163 E4               [12]  745 	clr	a
      000164 93               [24]  746 	movc	a,@a+dptr
      000165 FD               [12]  747 	mov	r5,a
      000166 7C 00            [12]  748 	mov	r4,#0x00
      000168 8D 82            [24]  749 	mov	dpl,r5
      00016A 8C 83            [24]  750 	mov	dph,r4
      00016C 12r00r00         [24]  751 	lcall	_putchar
                                    752 ;	life.c:40: putchar(digits[a & 0xf]);
      00016F 53 06 0F         [24]  753 	anl	ar6,#0x0f
      000172 7F 00            [12]  754 	mov	r7,#0x00
      000174 EE               [12]  755 	mov	a,r6
      000175 24r00            [12]  756 	add	a,#_digits
      000177 F5 82            [12]  757 	mov	dpl,a
      000179 EF               [12]  758 	mov	a,r7
      00017A 34s00            [12]  759 	addc	a,#(_digits >> 8)
      00017C F5 83            [12]  760 	mov	dph,a
      00017E E4               [12]  761 	clr	a
      00017F 93               [24]  762 	movc	a,@a+dptr
      000180 FF               [12]  763 	mov	r7,a
      000181 7E 00            [12]  764 	mov	r6,#0x00
      000183 8F 82            [24]  765 	mov	dpl,r7
      000185 8E 83            [24]  766 	mov	dph,r6
      000187 12r00r00         [24]  767 	lcall	_putchar
                                    768 ;	life.c:98: printstr("\r\n");
      00018A 7Dr18            [12]  769 	mov	r5,#___str_1
      00018C 7Es00            [12]  770 	mov	r6,#(___str_1 >> 8)
      00018E 7F 80            [12]  771 	mov	r7,#0x80
                                    772 ;	life.c:48: return;
      000190                        773 00124$:
                                    774 ;	life.c:46: for (; *s; s++) putchar(*s);
      000190 8D 82            [24]  775 	mov	dpl,r5
      000192 8E 83            [24]  776 	mov	dph,r6
      000194 8F F0            [24]  777 	mov	b,r7
      000196 12r00r00         [24]  778 	lcall	__gptrget
      000199 FC               [12]  779 	mov	r4,a
      00019A 60 10            [24]  780 	jz	00114$
      00019C 7B 00            [12]  781 	mov	r3,#0x00
      00019E 8C 82            [24]  782 	mov	dpl,r4
      0001A0 8B 83            [24]  783 	mov	dph,r3
      0001A2 12r00r00         [24]  784 	lcall	_putchar
      0001A5 0D               [12]  785 	inc	r5
                                    786 ;	life.c:98: printstr("\r\n");
      0001A6 BD 00 E7         [24]  787 	cjne	r5,#0x00,00124$
      0001A9 0E               [12]  788 	inc	r6
      0001AA 80 E4            [24]  789 	sjmp	00124$
      0001AC                        790 00114$:
                                    791 ;	life.c:81: generation[0]++;
      0001AC 90r0Cr12         [24]  792 	mov	dptr,#_generation
      0001AF E0               [24]  793 	movx	a,@dptr
      0001B0 FE               [12]  794 	mov	r6,a
      0001B1 A3               [24]  795 	inc	dptr
      0001B2 E0               [24]  796 	movx	a,@dptr
      0001B3 FF               [12]  797 	mov	r7,a
      0001B4 0E               [12]  798 	inc	r6
      0001B5 BE 00 01         [24]  799 	cjne	r6,#0x00,00199$
      0001B8 0F               [12]  800 	inc	r7
      0001B9                        801 00199$:
      0001B9 90r0Cr12         [24]  802 	mov	dptr,#_generation
      0001BC EE               [12]  803 	mov	a,r6
      0001BD F0               [24]  804 	movx	@dptr,a
      0001BE EF               [12]  805 	mov	a,r7
      0001BF A3               [24]  806 	inc	dptr
      0001C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	life.c:82: if (!generation[0]) generation[1]++;
      0001C1 EE               [12]  809 	mov	a,r6
      0001C2 4F               [12]  810 	orl	a,r7
      0001C3 70 15            [24]  811 	jnz	00102$
      0001C5 90r0Cr14         [24]  812 	mov	dptr,#(_generation + 0x0002)
      0001C8 E0               [24]  813 	movx	a,@dptr
      0001C9 FE               [12]  814 	mov	r6,a
      0001CA A3               [24]  815 	inc	dptr
      0001CB E0               [24]  816 	movx	a,@dptr
      0001CC FF               [12]  817 	mov	r7,a
      0001CD 0E               [12]  818 	inc	r6
      0001CE BE 00 01         [24]  819 	cjne	r6,#0x00,00201$
      0001D1 0F               [12]  820 	inc	r7
      0001D2                        821 00201$:
      0001D2 90r0Cr14         [24]  822 	mov	dptr,#(_generation + 0x0002)
      0001D5 EE               [12]  823 	mov	a,r6
      0001D6 F0               [24]  824 	movx	@dptr,a
      0001D7 EF               [12]  825 	mov	a,r7
      0001D8 A3               [24]  826 	inc	dptr
      0001D9 F0               [24]  827 	movx	@dptr,a
                                    828 ;	life.c:99: updategen();
      0001DA                        829 00102$:
                                    830 ;	life.c:102: for (x = 0; x < W; x++) {
      0001DA 90r0Cr02         [24]  831 	mov	dptr,#_x
      0001DD E4               [12]  832 	clr	a
      0001DE F0               [24]  833 	movx	@dptr,a
      0001DF A3               [24]  834 	inc	dptr
      0001E0 F0               [24]  835 	movx	@dptr,a
      0001E1                        836 00131$:
                                    837 ;	life.c:103: for (y = 0; y < H; y++)
      0001E1 90r0Cr04         [24]  838 	mov	dptr,#_y
      0001E4 E4               [12]  839 	clr	a
      0001E5 F0               [24]  840 	movx	@dptr,a
      0001E6 A3               [24]  841 	inc	dptr
      0001E7 F0               [24]  842 	movx	@dptr,a
      0001E8                        843 00126$:
                                    844 ;	life.c:104: if (u[A2D(W, y, x)]) {
      0001E8 90r0Cr04         [24]  845 	mov	dptr,#_y
      0001EB E0               [24]  846 	movx	a,@dptr
      0001EC FE               [12]  847 	mov	r6,a
      0001ED A3               [24]  848 	inc	dptr
      0001EE E0               [24]  849 	movx	a,@dptr
      0001EF C4               [12]  850 	swap	a
      0001F0 23               [12]  851 	rl	a
      0001F1 54 E0            [12]  852 	anl	a,#0xe0
      0001F3 CE               [12]  853 	xch	a,r6
      0001F4 C4               [12]  854 	swap	a
      0001F5 23               [12]  855 	rl	a
      0001F6 CE               [12]  856 	xch	a,r6
      0001F7 6E               [12]  857 	xrl	a,r6
      0001F8 CE               [12]  858 	xch	a,r6
      0001F9 54 E0            [12]  859 	anl	a,#0xe0
      0001FB CE               [12]  860 	xch	a,r6
      0001FC 6E               [12]  861 	xrl	a,r6
      0001FD FF               [12]  862 	mov	r7,a
      0001FE 90r0Cr02         [24]  863 	mov	dptr,#_x
      000201 E0               [24]  864 	movx	a,@dptr
      000202 FC               [12]  865 	mov	r4,a
      000203 A3               [24]  866 	inc	dptr
      000204 E0               [24]  867 	movx	a,@dptr
      000205 FD               [12]  868 	mov	r5,a
      000206 EC               [12]  869 	mov	a,r4
      000207 2E               [12]  870 	add	a,r6
      000208 FE               [12]  871 	mov	r6,a
      000209 ED               [12]  872 	mov	a,r5
      00020A 3F               [12]  873 	addc	a,r7
      00020B FF               [12]  874 	mov	r7,a
      00020C EE               [12]  875 	mov	a,r6
      00020D 24r02            [12]  876 	add	a,#_u
      00020F FE               [12]  877 	mov	r6,a
      000210 EF               [12]  878 	mov	a,r7
      000211 34s04            [12]  879 	addc	a,#(_u >> 8)
      000213 FF               [12]  880 	mov	r7,a
      000214 8E 82            [24]  881 	mov	dpl,r6
      000216 8F 83            [24]  882 	mov	dph,r7
      000218 E0               [24]  883 	movx	a,@dptr
      000219 60 0E            [24]  884 	jz	00104$
                                    885 ;	life.c:105: putchar('['); putchar(']');
      00021B 90 00 5B         [24]  886 	mov	dptr,#0x005b
      00021E 12r00r00         [24]  887 	lcall	_putchar
      000221 90 00 5D         [24]  888 	mov	dptr,#0x005d
      000224 12r00r00         [24]  889 	lcall	_putchar
      000227 80 0C            [24]  890 	sjmp	00127$
      000229                        891 00104$:
                                    892 ;	life.c:107: putchar('#'); putchar('#');
      000229 90 00 23         [24]  893 	mov	dptr,#0x0023
      00022C 12r00r00         [24]  894 	lcall	_putchar
      00022F 90 00 23         [24]  895 	mov	dptr,#0x0023
      000232 12r00r00         [24]  896 	lcall	_putchar
      000235                        897 00127$:
                                    898 ;	life.c:103: for (y = 0; y < H; y++)
      000235 90r0Cr04         [24]  899 	mov	dptr,#_y
      000238 E0               [24]  900 	movx	a,@dptr
      000239 24 01            [12]  901 	add	a,#0x01
      00023B F0               [24]  902 	movx	@dptr,a
      00023C A3               [24]  903 	inc	dptr
      00023D E0               [24]  904 	movx	a,@dptr
      00023E 34 00            [12]  905 	addc	a,#0x00
      000240 F0               [24]  906 	movx	@dptr,a
      000241 90r0Cr04         [24]  907 	mov	dptr,#_y
      000244 E0               [24]  908 	movx	a,@dptr
      000245 FE               [12]  909 	mov	r6,a
      000246 A3               [24]  910 	inc	dptr
      000247 E0               [24]  911 	movx	a,@dptr
      000248 FF               [12]  912 	mov	r7,a
      000249 C3               [12]  913 	clr	c
      00024A EE               [12]  914 	mov	a,r6
      00024B 94 20            [12]  915 	subb	a,#0x20
      00024D EF               [12]  916 	mov	a,r7
      00024E 64 80            [12]  917 	xrl	a,#0x80
      000250 94 80            [12]  918 	subb	a,#0x80
      000252 40 94            [24]  919 	jc	00126$
                                    920 ;	life.c:109: printstr("\r\n");
      000254 7Dr18            [12]  921 	mov	r5,#___str_1
      000256 7Es00            [12]  922 	mov	r6,#(___str_1 >> 8)
      000258 7F 80            [12]  923 	mov	r7,#0x80
                                    924 ;	life.c:48: return;
      00025A                        925 00129$:
                                    926 ;	life.c:46: for (; *s; s++) putchar(*s);
      00025A 8D 82            [24]  927 	mov	dpl,r5
      00025C 8E 83            [24]  928 	mov	dph,r6
      00025E 8F F0            [24]  929 	mov	b,r7
      000260 12r00r00         [24]  930 	lcall	__gptrget
      000263 FC               [12]  931 	mov	r4,a
      000264 60 10            [24]  932 	jz	00119$
      000266 7B 00            [12]  933 	mov	r3,#0x00
      000268 8C 82            [24]  934 	mov	dpl,r4
      00026A 8B 83            [24]  935 	mov	dph,r3
      00026C 12r00r00         [24]  936 	lcall	_putchar
      00026F 0D               [12]  937 	inc	r5
                                    938 ;	life.c:109: printstr("\r\n");
      000270 BD 00 E7         [24]  939 	cjne	r5,#0x00,00129$
      000273 0E               [12]  940 	inc	r6
      000274 80 E4            [24]  941 	sjmp	00129$
      000276                        942 00119$:
                                    943 ;	life.c:102: for (x = 0; x < W; x++) {
      000276 90r0Cr02         [24]  944 	mov	dptr,#_x
      000279 E0               [24]  945 	movx	a,@dptr
      00027A 24 01            [12]  946 	add	a,#0x01
      00027C F0               [24]  947 	movx	@dptr,a
      00027D A3               [24]  948 	inc	dptr
      00027E E0               [24]  949 	movx	a,@dptr
      00027F 34 00            [12]  950 	addc	a,#0x00
      000281 F0               [24]  951 	movx	@dptr,a
      000282 90r0Cr02         [24]  952 	mov	dptr,#_x
      000285 E0               [24]  953 	movx	a,@dptr
      000286 FE               [12]  954 	mov	r6,a
      000287 A3               [24]  955 	inc	dptr
      000288 E0               [24]  956 	movx	a,@dptr
      000289 FF               [12]  957 	mov	r7,a
      00028A C3               [12]  958 	clr	c
      00028B EE               [12]  959 	mov	a,r6
      00028C 94 20            [12]  960 	subb	a,#0x20
      00028E EF               [12]  961 	mov	a,r7
      00028F 64 80            [12]  962 	xrl	a,#0x80
      000291 94 80            [12]  963 	subb	a,#0x80
      000293 50 03            [24]  964 	jnc	00206$
      000295 02r01rE1         [24]  965 	ljmp	00131$
      000298                        966 00206$:
                                    967 ;	life.c:112: return;
                                    968 ;	life.c:113: }
      000298 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'main'
                                    972 ;------------------------------------------------------------
                                    973 ;__2621440020              Allocated to registers 
                                    974 ;s                         Allocated to registers r5 r6 r7 
                                    975 ;__1310720013              Allocated to registers 
                                    976 ;s                         Allocated to registers r5 r6 r7 
                                    977 ;__1310720015              Allocated to registers r6 r7 
                                    978 ;a                         Allocated to registers r4 r5 
                                    979 ;__1310720017              Allocated to registers 
                                    980 ;s                         Allocated to registers r5 r6 r7 
                                    981 ;__2621440023              Allocated to registers 
                                    982 ;s                         Allocated to registers r5 r6 r7 
                                    983 ;__4587520027              Allocated to registers 
                                    984 ;s                         Allocated to registers r5 r6 r7 
                                    985 ;__3276800029              Allocated to registers 
                                    986 ;s                         Allocated to registers r5 r6 r7 
                                    987 ;__1310720031              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;sloc0                     Allocated to stack - _bp +1
                                    990 ;sloc1                     Allocated to stack - _bp +3
                                    991 ;sloc2                     Allocated to stack - _bp +5
                                    992 ;sloc3                     Allocated to stack - _bp +6
                                    993 ;sloc4                     Allocated to stack - _bp +8
                                    994 ;sloc5                     Allocated to stack - _bp +10
                                    995 ;sloc6                     Allocated to stack - _bp +12
                                    996 ;sloc7                     Allocated to stack - _bp +14
                                    997 ;------------------------------------------------------------
                                    998 ;	life.c:196: void main(void) {
                                    999 ;	-----------------------------------------
                                   1000 ;	 function main
                                   1001 ;	-----------------------------------------
      000299                       1002 _main:
      000299 C0*00            [24] 1003 	push	_bp
      00029B E5 81            [12] 1004 	mov	a,sp
      00029D F5*00            [12] 1005 	mov	_bp,a
      00029F 24 0F            [12] 1006 	add	a,#0x0f
      0002A1 F5 81            [12] 1007 	mov	sp,a
                                   1008 ;	life.c:197: IT0 = 1;
                                   1009 ;	assignBit
      0002A3 D2 88            [12] 1010 	setb	_IT0
                                   1011 ;	life.c:198: IT1 = 1;
                                   1012 ;	assignBit
      0002A5 D2 8A            [12] 1013 	setb	_IT1
                                   1014 ;	life.c:199: EX0 = 1;
                                   1015 ;	assignBit
      0002A7 D2 A8            [12] 1016 	setb	_EX0
                                   1017 ;	life.c:200: EX1 = 1;
                                   1018 ;	assignBit
      0002A9 D2 AA            [12] 1019 	setb	_EX1
                                   1020 ;	life.c:201: EA = 1;
                                   1021 ;	assignBit
      0002AB D2 AF            [12] 1022 	setb	_EA
                                   1023 ;	life.c:203: for (i0 = 0; !i0; ) {
      0002AD 90r00r00         [24] 1024 	mov	dptr,#_i0
      0002B0 E4               [12] 1025 	clr	a
      0002B1 F0               [24] 1026 	movx	@dptr,a
      0002B2 90r00r01         [24] 1027 	mov	dptr,#_i1
      0002B5 F0               [24] 1028 	movx	@dptr,a
      0002B6                       1029 00191$:
                                   1030 ;	life.c:116: memset(u, 0, sizeof (u));
      0002B6 E4               [12] 1031 	clr	a
      0002B7 C0 E0            [24] 1032 	push	acc
      0002B9 74 04            [12] 1033 	mov	a,#0x04
      0002BB C0 E0            [24] 1034 	push	acc
      0002BD E4               [12] 1035 	clr	a
      0002BE C0 E0            [24] 1036 	push	acc
      0002C0 90r04r02         [24] 1037 	mov	dptr,#_u
      0002C3 75 F0 00         [24] 1038 	mov	b,#0x00
      0002C6 12r00r00         [24] 1039 	lcall	_memset
      0002C9 15 81            [12] 1040 	dec	sp
      0002CB 15 81            [12] 1041 	dec	sp
      0002CD 15 81            [12] 1042 	dec	sp
                                   1043 ;	life.c:117: memset(pu, 0, sizeof (pu));
      0002CF E4               [12] 1044 	clr	a
      0002D0 C0 E0            [24] 1045 	push	acc
      0002D2 74 04            [12] 1046 	mov	a,#0x04
      0002D4 C0 E0            [24] 1047 	push	acc
      0002D6 E4               [12] 1048 	clr	a
      0002D7 C0 E0            [24] 1049 	push	acc
      0002D9 90r00r02         [24] 1050 	mov	dptr,#_pu
      0002DC 75 F0 00         [24] 1051 	mov	b,#0x00
      0002DF 12r00r00         [24] 1052 	lcall	_memset
      0002E2 15 81            [12] 1053 	dec	sp
      0002E4 15 81            [12] 1054 	dec	sp
      0002E6 15 81            [12] 1055 	dec	sp
                                   1056 ;	life.c:206: printstr("\033[2J\033[mINIT\r\n");
      0002E8 7Dr26            [12] 1057 	mov	r5,#___str_4
      0002EA 7Es00            [12] 1058 	mov	r6,#(___str_4 >> 8)
      0002EC 7F 80            [12] 1059 	mov	r7,#0x80
                                   1060 ;	life.c:48: return;
      0002EE                       1061 00162$:
                                   1062 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002EE 8D 82            [24] 1063 	mov	dpl,r5
      0002F0 8E 83            [24] 1064 	mov	dph,r6
      0002F2 8F F0            [24] 1065 	mov	b,r7
      0002F4 12r00r00         [24] 1066 	lcall	__gptrget
      0002F7 FC               [12] 1067 	mov	r4,a
      0002F8 60 10            [24] 1068 	jz	00104$
      0002FA 7B 00            [12] 1069 	mov	r3,#0x00
      0002FC 8C 82            [24] 1070 	mov	dpl,r4
      0002FE 8B 83            [24] 1071 	mov	dph,r3
      000300 12r00r00         [24] 1072 	lcall	_putchar
      000303 0D               [12] 1073 	inc	r5
                                   1074 ;	life.c:207: while (1) {
      000304 BD 00 E7         [24] 1075 	cjne	r5,#0x00,00162$
      000307 0E               [12] 1076 	inc	r6
      000308 80 E4            [24] 1077 	sjmp	00162$
      00030A                       1078 00104$:
                                   1079 ;	life.c:208: c = getchar();
      00030A 12r00r05         [24] 1080 	lcall	_getchar
      00030D AE 82            [24] 1081 	mov	r6,dpl
      00030F AF 83            [24] 1082 	mov	r7,dph
      000311 90r0Cr0C         [24] 1083 	mov	dptr,#_c
      000314 EE               [12] 1084 	mov	a,r6
      000315 F0               [24] 1085 	movx	@dptr,a
      000316 EF               [12] 1086 	mov	a,r7
      000317 A3               [24] 1087 	inc	dptr
      000318 F0               [24] 1088 	movx	@dptr,a
                                   1089 ;	life.c:209: if (c == (int)'L') break;
      000319 BE 4C EE         [24] 1090 	cjne	r6,#0x4c,00104$
      00031C BF 00 EB         [24] 1091 	cjne	r7,#0x00,00104$
                                   1092 ;	life.c:123: j = 0;
      00031F 90r0Cr0A         [24] 1093 	mov	dptr,#_j
      000322 E4               [12] 1094 	clr	a
      000323 F0               [24] 1095 	movx	@dptr,a
      000324 A3               [24] 1096 	inc	dptr
      000325 F0               [24] 1097 	movx	@dptr,a
                                   1098 ;	life.c:125: printstr("LOAD <");
      000326 7Dr1B            [12] 1099 	mov	r5,#___str_2
      000328 7Es00            [12] 1100 	mov	r6,#(___str_2 >> 8)
      00032A 7F 80            [12] 1101 	mov	r7,#0x80
                                   1102 ;	life.c:48: return;
      00032C                       1103 00165$:
                                   1104 ;	life.c:46: for (; *s; s++) putchar(*s);
      00032C 8D 82            [24] 1105 	mov	dpl,r5
      00032E 8E 83            [24] 1106 	mov	dph,r6
      000330 8F F0            [24] 1107 	mov	b,r7
      000332 12r00r00         [24] 1108 	lcall	__gptrget
      000335 FC               [12] 1109 	mov	r4,a
      000336 60 10            [24] 1110 	jz	00122$
      000338 7B 00            [12] 1111 	mov	r3,#0x00
      00033A 8C 82            [24] 1112 	mov	dpl,r4
      00033C 8B 83            [24] 1113 	mov	dph,r3
      00033E 12r00r00         [24] 1114 	lcall	_putchar
      000341 0D               [12] 1115 	inc	r5
                                   1116 ;	life.c:125: printstr("LOAD <");
      000342 BD 00 E7         [24] 1117 	cjne	r5,#0x00,00165$
      000345 0E               [12] 1118 	inc	r6
      000346 80 E4            [24] 1119 	sjmp	00165$
      000348                       1120 00122$:
                                   1121 ;	life.c:127: for (y = 0; y < H; y++)
      000348 90r0Cr04         [24] 1122 	mov	dptr,#_y
      00034B E4               [12] 1123 	clr	a
      00034C F0               [24] 1124 	movx	@dptr,a
      00034D A3               [24] 1125 	inc	dptr
      00034E F0               [24] 1126 	movx	@dptr,a
      00034F                       1127 00169$:
                                   1128 ;	life.c:128: for (x = 0; x < W; x++) {
      00034F 90r0Cr02         [24] 1129 	mov	dptr,#_x
      000352 E4               [12] 1130 	clr	a
      000353 F0               [24] 1131 	movx	@dptr,a
      000354 A3               [24] 1132 	inc	dptr
      000355 F0               [24] 1133 	movx	@dptr,a
      000356                       1134 00167$:
                                   1135 ;	life.c:129: c = getchar();
      000356 12r00r05         [24] 1136 	lcall	_getchar
      000359 AE 82            [24] 1137 	mov	r6,dpl
      00035B AF 83            [24] 1138 	mov	r7,dph
      00035D 90r0Cr0C         [24] 1139 	mov	dptr,#_c
      000360 EE               [12] 1140 	mov	a,r6
      000361 F0               [24] 1141 	movx	@dptr,a
      000362 EF               [12] 1142 	mov	a,r7
      000363 A3               [24] 1143 	inc	dptr
      000364 F0               [24] 1144 	movx	@dptr,a
                                   1145 ;	life.c:130: if (c == (int)'0') {
      000365 BE 30 41         [24] 1146 	cjne	r6,#0x30,00129$
      000368 BF 00 3E         [24] 1147 	cjne	r7,#0x00,00129$
                                   1148 ;	life.c:131: u[A2D(W, y, x)] = 0;
      00036B 90r0Cr04         [24] 1149 	mov	dptr,#_y
      00036E E0               [24] 1150 	movx	a,@dptr
      00036F FC               [12] 1151 	mov	r4,a
      000370 A3               [24] 1152 	inc	dptr
      000371 E0               [24] 1153 	movx	a,@dptr
      000372 C4               [12] 1154 	swap	a
      000373 23               [12] 1155 	rl	a
      000374 54 E0            [12] 1156 	anl	a,#0xe0
      000376 CC               [12] 1157 	xch	a,r4
      000377 C4               [12] 1158 	swap	a
      000378 23               [12] 1159 	rl	a
      000379 CC               [12] 1160 	xch	a,r4
      00037A 6C               [12] 1161 	xrl	a,r4
      00037B CC               [12] 1162 	xch	a,r4
      00037C 54 E0            [12] 1163 	anl	a,#0xe0
      00037E CC               [12] 1164 	xch	a,r4
      00037F 6C               [12] 1165 	xrl	a,r4
      000380 FD               [12] 1166 	mov	r5,a
      000381 90r0Cr02         [24] 1167 	mov	dptr,#_x
      000384 E0               [24] 1168 	movx	a,@dptr
      000385 FA               [12] 1169 	mov	r2,a
      000386 A3               [24] 1170 	inc	dptr
      000387 E0               [24] 1171 	movx	a,@dptr
      000388 FB               [12] 1172 	mov	r3,a
      000389 EA               [12] 1173 	mov	a,r2
      00038A 2C               [12] 1174 	add	a,r4
      00038B FC               [12] 1175 	mov	r4,a
      00038C EB               [12] 1176 	mov	a,r3
      00038D 3D               [12] 1177 	addc	a,r5
      00038E FD               [12] 1178 	mov	r5,a
      00038F EC               [12] 1179 	mov	a,r4
      000390 24r02            [12] 1180 	add	a,#_u
      000392 F5 82            [12] 1181 	mov	dpl,a
      000394 ED               [12] 1182 	mov	a,r5
      000395 34s04            [12] 1183 	addc	a,#(_u >> 8)
      000397 F5 83            [12] 1184 	mov	dph,a
      000399 E4               [12] 1185 	clr	a
      00039A F0               [24] 1186 	movx	@dptr,a
                                   1187 ;	life.c:132: j++;
      00039B 90r0Cr0A         [24] 1188 	mov	dptr,#_j
      00039E E0               [24] 1189 	movx	a,@dptr
      00039F 24 01            [12] 1190 	add	a,#0x01
      0003A1 F0               [24] 1191 	movx	@dptr,a
      0003A2 A3               [24] 1192 	inc	dptr
      0003A3 E0               [24] 1193 	movx	a,@dptr
      0003A4 34 00            [12] 1194 	addc	a,#0x00
      0003A6 F0               [24] 1195 	movx	@dptr,a
      0003A7 80 4D            [24] 1196 	sjmp	00168$
      0003A9                       1197 00129$:
                                   1198 ;	life.c:133: } else if (c == (int)'1') {
      0003A9 BE 31 42         [24] 1199 	cjne	r6,#0x31,00127$
      0003AC BF 00 3F         [24] 1200 	cjne	r7,#0x00,00127$
                                   1201 ;	life.c:134: u[A2D(W, y, x)] = 1;
      0003AF 90r0Cr04         [24] 1202 	mov	dptr,#_y
      0003B2 E0               [24] 1203 	movx	a,@dptr
      0003B3 FC               [12] 1204 	mov	r4,a
      0003B4 A3               [24] 1205 	inc	dptr
      0003B5 E0               [24] 1206 	movx	a,@dptr
      0003B6 C4               [12] 1207 	swap	a
      0003B7 23               [12] 1208 	rl	a
      0003B8 54 E0            [12] 1209 	anl	a,#0xe0
      0003BA CC               [12] 1210 	xch	a,r4
      0003BB C4               [12] 1211 	swap	a
      0003BC 23               [12] 1212 	rl	a
      0003BD CC               [12] 1213 	xch	a,r4
      0003BE 6C               [12] 1214 	xrl	a,r4
      0003BF CC               [12] 1215 	xch	a,r4
      0003C0 54 E0            [12] 1216 	anl	a,#0xe0
      0003C2 CC               [12] 1217 	xch	a,r4
      0003C3 6C               [12] 1218 	xrl	a,r4
      0003C4 FD               [12] 1219 	mov	r5,a
      0003C5 90r0Cr02         [24] 1220 	mov	dptr,#_x
      0003C8 E0               [24] 1221 	movx	a,@dptr
      0003C9 FA               [12] 1222 	mov	r2,a
      0003CA A3               [24] 1223 	inc	dptr
      0003CB E0               [24] 1224 	movx	a,@dptr
      0003CC FB               [12] 1225 	mov	r3,a
      0003CD EA               [12] 1226 	mov	a,r2
      0003CE 2C               [12] 1227 	add	a,r4
      0003CF FC               [12] 1228 	mov	r4,a
      0003D0 EB               [12] 1229 	mov	a,r3
      0003D1 3D               [12] 1230 	addc	a,r5
      0003D2 FD               [12] 1231 	mov	r5,a
      0003D3 EC               [12] 1232 	mov	a,r4
      0003D4 24r02            [12] 1233 	add	a,#_u
      0003D6 F5 82            [12] 1234 	mov	dpl,a
      0003D8 ED               [12] 1235 	mov	a,r5
      0003D9 34s04            [12] 1236 	addc	a,#(_u >> 8)
      0003DB F5 83            [12] 1237 	mov	dph,a
      0003DD 74 01            [12] 1238 	mov	a,#0x01
      0003DF F0               [24] 1239 	movx	@dptr,a
                                   1240 ;	life.c:135: j++;
      0003E0 90r0Cr0A         [24] 1241 	mov	dptr,#_j
      0003E3 E0               [24] 1242 	movx	a,@dptr
      0003E4 24 01            [12] 1243 	add	a,#0x01
      0003E6 F0               [24] 1244 	movx	@dptr,a
      0003E7 A3               [24] 1245 	inc	dptr
      0003E8 E0               [24] 1246 	movx	a,@dptr
      0003E9 34 00            [12] 1247 	addc	a,#0x00
      0003EB F0               [24] 1248 	movx	@dptr,a
      0003EC 80 08            [24] 1249 	sjmp	00168$
      0003EE                       1250 00127$:
                                   1251 ;	life.c:136: } else if (c == (int)'#') goto out;
      0003EE BE 23 05         [24] 1252 	cjne	r6,#0x23,00374$
      0003F1 BF 00 02         [24] 1253 	cjne	r7,#0x00,00374$
      0003F4 80 44            [24] 1254 	sjmp	00140$
      0003F6                       1255 00374$:
      0003F6                       1256 00168$:
                                   1257 ;	life.c:128: for (x = 0; x < W; x++) {
      0003F6 90r0Cr02         [24] 1258 	mov	dptr,#_x
      0003F9 E0               [24] 1259 	movx	a,@dptr
      0003FA 24 01            [12] 1260 	add	a,#0x01
      0003FC F0               [24] 1261 	movx	@dptr,a
      0003FD A3               [24] 1262 	inc	dptr
      0003FE E0               [24] 1263 	movx	a,@dptr
      0003FF 34 00            [12] 1264 	addc	a,#0x00
      000401 F0               [24] 1265 	movx	@dptr,a
      000402 90r0Cr02         [24] 1266 	mov	dptr,#_x
      000405 E0               [24] 1267 	movx	a,@dptr
      000406 FE               [12] 1268 	mov	r6,a
      000407 A3               [24] 1269 	inc	dptr
      000408 E0               [24] 1270 	movx	a,@dptr
      000409 FF               [12] 1271 	mov	r7,a
      00040A C3               [12] 1272 	clr	c
      00040B EE               [12] 1273 	mov	a,r6
      00040C 94 20            [12] 1274 	subb	a,#0x20
      00040E EF               [12] 1275 	mov	a,r7
      00040F 64 80            [12] 1276 	xrl	a,#0x80
      000411 94 80            [12] 1277 	subb	a,#0x80
      000413 50 03            [24] 1278 	jnc	00375$
      000415 02r03r56         [24] 1279 	ljmp	00167$
      000418                       1280 00375$:
                                   1281 ;	life.c:127: for (y = 0; y < H; y++)
      000418 90r0Cr04         [24] 1282 	mov	dptr,#_y
      00041B E0               [24] 1283 	movx	a,@dptr
      00041C 24 01            [12] 1284 	add	a,#0x01
      00041E F0               [24] 1285 	movx	@dptr,a
      00041F A3               [24] 1286 	inc	dptr
      000420 E0               [24] 1287 	movx	a,@dptr
      000421 34 00            [12] 1288 	addc	a,#0x00
      000423 F0               [24] 1289 	movx	@dptr,a
      000424 90r0Cr04         [24] 1290 	mov	dptr,#_y
      000427 E0               [24] 1291 	movx	a,@dptr
      000428 FE               [12] 1292 	mov	r6,a
      000429 A3               [24] 1293 	inc	dptr
      00042A E0               [24] 1294 	movx	a,@dptr
      00042B FF               [12] 1295 	mov	r7,a
      00042C C3               [12] 1296 	clr	c
      00042D EE               [12] 1297 	mov	a,r6
      00042E 94 20            [12] 1298 	subb	a,#0x20
      000430 EF               [12] 1299 	mov	a,r7
      000431 64 80            [12] 1300 	xrl	a,#0x80
      000433 94 80            [12] 1301 	subb	a,#0x80
      000435 50 03            [24] 1302 	jnc	00376$
      000437 02r03r4F         [24] 1303 	ljmp	00169$
      00043A                       1304 00376$:
                                   1305 ;	life.c:139: out:
      00043A                       1306 00140$:
                                   1307 ;	life.c:140: if (c != (int)'#')
      00043A 90r0Cr0C         [24] 1308 	mov	dptr,#_c
      00043D E0               [24] 1309 	movx	a,@dptr
      00043E FE               [12] 1310 	mov	r6,a
      00043F A3               [24] 1311 	inc	dptr
      000440 E0               [24] 1312 	movx	a,@dptr
      000441 FF               [12] 1313 	mov	r7,a
      000442 BE 23 05         [24] 1314 	cjne	r6,#0x23,00377$
      000445 BF 00 02         [24] 1315 	cjne	r7,#0x00,00377$
      000448 80 15            [24] 1316 	sjmp	00139$
      00044A                       1317 00377$:
                                   1318 ;	life.c:141: while (1) {
      00044A                       1319 00136$:
                                   1320 ;	life.c:142: c = getchar();
      00044A 12r00r05         [24] 1321 	lcall	_getchar
      00044D AE 82            [24] 1322 	mov	r6,dpl
      00044F AF 83            [24] 1323 	mov	r7,dph
      000451 90r0Cr0C         [24] 1324 	mov	dptr,#_c
      000454 EE               [12] 1325 	mov	a,r6
      000455 F0               [24] 1326 	movx	@dptr,a
      000456 EF               [12] 1327 	mov	a,r7
      000457 A3               [24] 1328 	inc	dptr
      000458 F0               [24] 1329 	movx	@dptr,a
                                   1330 ;	life.c:143: if (c == (int)'#') break;
      000459 BE 23 EE         [24] 1331 	cjne	r6,#0x23,00136$
      00045C BF 00 EB         [24] 1332 	cjne	r7,#0x00,00136$
      00045F                       1333 00139$:
                                   1334 ;	life.c:145: print16x(j);
      00045F 90r0Cr0A         [24] 1335 	mov	dptr,#_j
      000462 E0               [24] 1336 	movx	a,@dptr
      000463 FE               [12] 1337 	mov	r6,a
      000464 A3               [24] 1338 	inc	dptr
      000465 E0               [24] 1339 	movx	a,@dptr
                                   1340 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000466 8E 04            [24] 1341 	mov	ar4,r6
      000468 FD               [12] 1342 	mov	r5,a
      000469 C4               [12] 1343 	swap	a
      00046A 54 0F            [12] 1344 	anl	a,#0x0f
      00046C 30 E3 02         [24] 1345 	jnb	acc.3,00380$
      00046F 44 F0            [12] 1346 	orl	a,#0xf0
      000471                       1347 00380$:
      000471 FE               [12] 1348 	mov	r6,a
      000472 33               [12] 1349 	rlc	a
      000473 95 E0            [12] 1350 	subb	a,acc
      000475 53 06 0F         [24] 1351 	anl	ar6,#0x0f
      000478 7F 00            [12] 1352 	mov	r7,#0x00
      00047A EE               [12] 1353 	mov	a,r6
      00047B 24r00            [12] 1354 	add	a,#_digits
      00047D F5 82            [12] 1355 	mov	dpl,a
      00047F EF               [12] 1356 	mov	a,r7
      000480 34s00            [12] 1357 	addc	a,#(_digits >> 8)
      000482 F5 83            [12] 1358 	mov	dph,a
      000484 E4               [12] 1359 	clr	a
      000485 93               [24] 1360 	movc	a,@a+dptr
      000486 FF               [12] 1361 	mov	r7,a
      000487 7E 00            [12] 1362 	mov	r6,#0x00
      000489 8F 82            [24] 1363 	mov	dpl,r7
      00048B 8E 83            [24] 1364 	mov	dph,r6
      00048D 12r00r00         [24] 1365 	lcall	_putchar
                                   1366 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000490 8D 07            [24] 1367 	mov	ar7,r5
      000492 53 07 0F         [24] 1368 	anl	ar7,#0x0f
      000495 7E 00            [12] 1369 	mov	r6,#0x00
      000497 EF               [12] 1370 	mov	a,r7
      000498 24r00            [12] 1371 	add	a,#_digits
      00049A F5 82            [12] 1372 	mov	dpl,a
      00049C EE               [12] 1373 	mov	a,r6
      00049D 34s00            [12] 1374 	addc	a,#(_digits >> 8)
      00049F F5 83            [12] 1375 	mov	dph,a
      0004A1 E4               [12] 1376 	clr	a
      0004A2 93               [24] 1377 	movc	a,@a+dptr
      0004A3 FF               [12] 1378 	mov	r7,a
      0004A4 7E 00            [12] 1379 	mov	r6,#0x00
      0004A6 8F 82            [24] 1380 	mov	dpl,r7
      0004A8 8E 83            [24] 1381 	mov	dph,r6
      0004AA 12r00r00         [24] 1382 	lcall	_putchar
                                   1383 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0004AD 8C 06            [24] 1384 	mov	ar6,r4
      0004AF ED               [12] 1385 	mov	a,r5
      0004B0 C4               [12] 1386 	swap	a
      0004B1 CE               [12] 1387 	xch	a,r6
      0004B2 C4               [12] 1388 	swap	a
      0004B3 54 0F            [12] 1389 	anl	a,#0x0f
      0004B5 6E               [12] 1390 	xrl	a,r6
      0004B6 CE               [12] 1391 	xch	a,r6
      0004B7 54 0F            [12] 1392 	anl	a,#0x0f
      0004B9 CE               [12] 1393 	xch	a,r6
      0004BA 6E               [12] 1394 	xrl	a,r6
      0004BB CE               [12] 1395 	xch	a,r6
      0004BC 30 E3 02         [24] 1396 	jnb	acc.3,00381$
      0004BF 44 F0            [12] 1397 	orl	a,#0xf0
      0004C1                       1398 00381$:
      0004C1 53 06 0F         [24] 1399 	anl	ar6,#0x0f
      0004C4 7F 00            [12] 1400 	mov	r7,#0x00
      0004C6 EE               [12] 1401 	mov	a,r6
      0004C7 24r00            [12] 1402 	add	a,#_digits
      0004C9 F5 82            [12] 1403 	mov	dpl,a
      0004CB EF               [12] 1404 	mov	a,r7
      0004CC 34s00            [12] 1405 	addc	a,#(_digits >> 8)
      0004CE F5 83            [12] 1406 	mov	dph,a
      0004D0 E4               [12] 1407 	clr	a
      0004D1 93               [24] 1408 	movc	a,@a+dptr
      0004D2 FF               [12] 1409 	mov	r7,a
      0004D3 7E 00            [12] 1410 	mov	r6,#0x00
      0004D5 8F 82            [24] 1411 	mov	dpl,r7
      0004D7 8E 83            [24] 1412 	mov	dph,r6
      0004D9 12r00r00         [24] 1413 	lcall	_putchar
                                   1414 ;	life.c:40: putchar(digits[a & 0xf]);
      0004DC 53 04 0F         [24] 1415 	anl	ar4,#0x0f
      0004DF 7D 00            [12] 1416 	mov	r5,#0x00
      0004E1 EC               [12] 1417 	mov	a,r4
      0004E2 24r00            [12] 1418 	add	a,#_digits
      0004E4 F5 82            [12] 1419 	mov	dpl,a
      0004E6 ED               [12] 1420 	mov	a,r5
      0004E7 34s00            [12] 1421 	addc	a,#(_digits >> 8)
      0004E9 F5 83            [12] 1422 	mov	dph,a
      0004EB E4               [12] 1423 	clr	a
      0004EC 93               [24] 1424 	movc	a,@a+dptr
      0004ED FF               [12] 1425 	mov	r7,a
      0004EE 7E 00            [12] 1426 	mov	r6,#0x00
      0004F0 8F 82            [24] 1427 	mov	dpl,r7
      0004F2 8E 83            [24] 1428 	mov	dph,r6
      0004F4 12r00r00         [24] 1429 	lcall	_putchar
                                   1430 ;	life.c:146: printstr(">\r\n");
      0004F7 7Dr22            [12] 1431 	mov	r5,#___str_3
      0004F9 7Es00            [12] 1432 	mov	r6,#(___str_3 >> 8)
      0004FB 7F 80            [12] 1433 	mov	r7,#0x80
                                   1434 ;	life.c:48: return;
      0004FD                       1435 00172$:
                                   1436 ;	life.c:46: for (; *s; s++) putchar(*s);
      0004FD 8D 82            [24] 1437 	mov	dpl,r5
      0004FF 8E 83            [24] 1438 	mov	dph,r6
      000501 8F F0            [24] 1439 	mov	b,r7
      000503 12r00r00         [24] 1440 	lcall	__gptrget
      000506 FC               [12] 1441 	mov	r4,a
      000507 60 10            [24] 1442 	jz	00143$
      000509 7B 00            [12] 1443 	mov	r3,#0x00
      00050B 8C 82            [24] 1444 	mov	dpl,r4
      00050D 8B 83            [24] 1445 	mov	dph,r3
      00050F 12r00r00         [24] 1446 	lcall	_putchar
      000512 0D               [12] 1447 	inc	r5
                                   1448 ;	life.c:146: printstr(">\r\n");
      000513 BD 00 E7         [24] 1449 	cjne	r5,#0x00,00172$
      000516 0E               [12] 1450 	inc	r6
      000517 80 E4            [24] 1451 	sjmp	00172$
      000519                       1452 00143$:
                                   1453 ;	life.c:213: show(0);
      000519 75 82 00         [24] 1454 	mov	dpl,#0x00
      00051C 12r00r34         [24] 1455 	lcall	_show
                                   1456 ;	life.c:215: printstr("READY\r\n");
      00051F 7Dr34            [12] 1457 	mov	r5,#___str_5
      000521 7Es00            [12] 1458 	mov	r6,#(___str_5 >> 8)
      000523 7F 80            [12] 1459 	mov	r7,#0x80
                                   1460 ;	life.c:48: return;
      000525                       1461 00175$:
                                   1462 ;	life.c:46: for (; *s; s++) putchar(*s);
      000525 8D 82            [24] 1463 	mov	dpl,r5
      000527 8E 83            [24] 1464 	mov	dph,r6
      000529 8F F0            [24] 1465 	mov	b,r7
      00052B 12r00r00         [24] 1466 	lcall	__gptrget
      00052E FC               [12] 1467 	mov	r4,a
      00052F 60 10            [24] 1468 	jz	00109$
      000531 7B 00            [12] 1469 	mov	r3,#0x00
      000533 8C 82            [24] 1470 	mov	dpl,r4
      000535 8B 83            [24] 1471 	mov	dph,r3
      000537 12r00r00         [24] 1472 	lcall	_putchar
      00053A 0D               [12] 1473 	inc	r5
                                   1474 ;	life.c:216: while (1) {
      00053B BD 00 E7         [24] 1475 	cjne	r5,#0x00,00175$
      00053E 0E               [12] 1476 	inc	r6
      00053F 80 E4            [24] 1477 	sjmp	00175$
      000541                       1478 00109$:
                                   1479 ;	life.c:217: c = getchar();
      000541 12r00r05         [24] 1480 	lcall	_getchar
      000544 AE 82            [24] 1481 	mov	r6,dpl
      000546 AF 83            [24] 1482 	mov	r7,dph
      000548 90r0Cr0C         [24] 1483 	mov	dptr,#_c
      00054B EE               [12] 1484 	mov	a,r6
      00054C F0               [24] 1485 	movx	@dptr,a
      00054D EF               [12] 1486 	mov	a,r7
      00054E A3               [24] 1487 	inc	dptr
      00054F F0               [24] 1488 	movx	@dptr,a
                                   1489 ;	life.c:218: if (c == (int)'S') break;
      000550 BE 53 EE         [24] 1490 	cjne	r6,#0x53,00109$
      000553 BF 00 EB         [24] 1491 	cjne	r7,#0x00,00109$
                                   1492 ;	life.c:74: generation[0] = 0;
      000556 90r0Cr12         [24] 1493 	mov	dptr,#_generation
      000559 E4               [12] 1494 	clr	a
      00055A F0               [24] 1495 	movx	@dptr,a
      00055B A3               [24] 1496 	inc	dptr
      00055C F0               [24] 1497 	movx	@dptr,a
                                   1498 ;	life.c:75: generation[1] = 0;
      00055D 90r0Cr14         [24] 1499 	mov	dptr,#(_generation + 0x0002)
      000560 F0               [24] 1500 	movx	@dptr,a
      000561 A3               [24] 1501 	inc	dptr
      000562 F0               [24] 1502 	movx	@dptr,a
                                   1503 ;	life.c:223: for (i1 = 0; !i0 && !i1; ) {
      000563                       1504 00186$:
      000563 90r00r00         [24] 1505 	mov	dptr,#_i0
      000566 E0               [24] 1506 	movx	a,@dptr
      000567 60 03            [24] 1507 	jz	00388$
      000569 02r0Ar35         [24] 1508 	ljmp	00114$
      00056C                       1509 00388$:
                                   1510 ;	life.c:224: show(1);
      00056C 75 82 01         [24] 1511 	mov	dpl,#0x01
      00056F 12r00r34         [24] 1512 	lcall	_show
                                   1513 ;	life.c:154: fixed = 1;
      000572 90r0Cr10         [24] 1514 	mov	dptr,#_fixed
      000575 74 01            [12] 1515 	mov	a,#0x01
      000577 F0               [24] 1516 	movx	@dptr,a
                                   1517 ;	life.c:155: cycle2 = 1;
      000578 90r0Cr11         [24] 1518 	mov	dptr,#_cycle2
      00057B F0               [24] 1519 	movx	@dptr,a
                                   1520 ;	life.c:156: bstep = 0;
      00057C 90r0Cr0E         [24] 1521 	mov	dptr,#_bstep
      00057F E4               [12] 1522 	clr	a
      000580 F0               [24] 1523 	movx	@dptr,a
                                   1524 ;	life.c:158: for (y = 0; y < H; y++) {
      000581 90r0Cr04         [24] 1525 	mov	dptr,#_y
      000584 F0               [24] 1526 	movx	@dptr,a
      000585 A3               [24] 1527 	inc	dptr
      000586 F0               [24] 1528 	movx	@dptr,a
      000587                       1529 00179$:
                                   1530 ;	life.c:159: putchar(busy[bstep]); putchar('\r');
      000587 90r0Cr0E         [24] 1531 	mov	dptr,#_bstep
      00058A E0               [24] 1532 	movx	a,@dptr
      00058B 90r0Ar99         [24] 1533 	mov	dptr,#_busy
      00058E 93               [24] 1534 	movc	a,@a+dptr
      00058F FF               [12] 1535 	mov	r7,a
      000590 7E 00            [12] 1536 	mov	r6,#0x00
      000592 8F 82            [24] 1537 	mov	dpl,r7
      000594 8E 83            [24] 1538 	mov	dph,r6
      000596 12r00r00         [24] 1539 	lcall	_putchar
      000599 90 00 0D         [24] 1540 	mov	dptr,#0x000d
      00059C 12r00r00         [24] 1541 	lcall	_putchar
                                   1542 ;	life.c:160: bstep = (bstep + 1) & 3;
      00059F 90r0Cr0E         [24] 1543 	mov	dptr,#_bstep
      0005A2 E0               [24] 1544 	movx	a,@dptr
      0005A3 FF               [12] 1545 	mov	r7,a
      0005A4 0F               [12] 1546 	inc	r7
      0005A5 74 03            [12] 1547 	mov	a,#0x03
      0005A7 5F               [12] 1548 	anl	a,r7
      0005A8 F0               [24] 1549 	movx	@dptr,a
                                   1550 ;	life.c:161: for (x = 0; x < W; x++) {
      0005A9 90r0Cr02         [24] 1551 	mov	dptr,#_x
      0005AC E4               [12] 1552 	clr	a
      0005AD F0               [24] 1553 	movx	@dptr,a
      0005AE A3               [24] 1554 	inc	dptr
      0005AF F0               [24] 1555 	movx	@dptr,a
      0005B0                       1556 00177$:
                                   1557 ;	life.c:162: n = -u[A2D(W, y, x)];
      0005B0 90r0Cr04         [24] 1558 	mov	dptr,#_y
      0005B3 E0               [24] 1559 	movx	a,@dptr
      0005B4 FE               [12] 1560 	mov	r6,a
      0005B5 A3               [24] 1561 	inc	dptr
      0005B6 E0               [24] 1562 	movx	a,@dptr
      0005B7 FF               [12] 1563 	mov	r7,a
      0005B8 A8*00            [24] 1564 	mov	r0,_bp
      0005BA 08               [12] 1565 	inc	r0
      0005BB A6 06            [24] 1566 	mov	@r0,ar6
      0005BD EF               [12] 1567 	mov	a,r7
      0005BE C4               [12] 1568 	swap	a
      0005BF 23               [12] 1569 	rl	a
      0005C0 54 E0            [12] 1570 	anl	a,#0xe0
      0005C2 C6               [12] 1571 	xch	a,@r0
      0005C3 C4               [12] 1572 	swap	a
      0005C4 23               [12] 1573 	rl	a
      0005C5 C6               [12] 1574 	xch	a,@r0
      0005C6 66               [12] 1575 	xrl	a,@r0
      0005C7 C6               [12] 1576 	xch	a,@r0
      0005C8 54 E0            [12] 1577 	anl	a,#0xe0
      0005CA C6               [12] 1578 	xch	a,@r0
      0005CB 66               [12] 1579 	xrl	a,@r0
      0005CC 08               [12] 1580 	inc	r0
      0005CD F6               [12] 1581 	mov	@r0,a
      0005CE 90r0Cr02         [24] 1582 	mov	dptr,#_x
      0005D1 E0               [24] 1583 	movx	a,@dptr
      0005D2 FA               [12] 1584 	mov	r2,a
      0005D3 A3               [24] 1585 	inc	dptr
      0005D4 E0               [24] 1586 	movx	a,@dptr
      0005D5 FB               [12] 1587 	mov	r3,a
      0005D6 A8*00            [24] 1588 	mov	r0,_bp
      0005D8 08               [12] 1589 	inc	r0
      0005D9 E5*00            [12] 1590 	mov	a,_bp
      0005DB 24 03            [12] 1591 	add	a,#0x03
      0005DD F9               [12] 1592 	mov	r1,a
      0005DE EA               [12] 1593 	mov	a,r2
      0005DF 26               [12] 1594 	add	a,@r0
      0005E0 F7               [12] 1595 	mov	@r1,a
      0005E1 EB               [12] 1596 	mov	a,r3
      0005E2 08               [12] 1597 	inc	r0
      0005E3 36               [12] 1598 	addc	a,@r0
      0005E4 09               [12] 1599 	inc	r1
      0005E5 F7               [12] 1600 	mov	@r1,a
      0005E6 E5*00            [12] 1601 	mov	a,_bp
      0005E8 24 03            [12] 1602 	add	a,#0x03
      0005EA F8               [12] 1603 	mov	r0,a
      0005EB E6               [12] 1604 	mov	a,@r0
      0005EC 24r02            [12] 1605 	add	a,#_u
      0005EE F5 82            [12] 1606 	mov	dpl,a
      0005F0 08               [12] 1607 	inc	r0
      0005F1 E6               [12] 1608 	mov	a,@r0
      0005F2 34s04            [12] 1609 	addc	a,#(_u >> 8)
      0005F4 F5 83            [12] 1610 	mov	dph,a
      0005F6 E0               [24] 1611 	movx	a,@dptr
      0005F7 FD               [12] 1612 	mov	r5,a
      0005F8 E5*00            [12] 1613 	mov	a,_bp
      0005FA 24 05            [12] 1614 	add	a,#0x05
      0005FC F8               [12] 1615 	mov	r0,a
      0005FD C3               [12] 1616 	clr	c
      0005FE E4               [12] 1617 	clr	a
      0005FF 9D               [12] 1618 	subb	a,r5
      000600 F6               [12] 1619 	mov	@r0,a
                                   1620 ;	life.c:165: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000601 74 1F            [12] 1621 	mov	a,#0x1f
      000603 2E               [12] 1622 	add	a,r6
      000604 FC               [12] 1623 	mov	r4,a
      000605 E4               [12] 1624 	clr	a
      000606 3F               [12] 1625 	addc	a,r7
      000607 FD               [12] 1626 	mov	r5,a
      000608 C0 07            [24] 1627 	push	ar7
      00060A C0 06            [24] 1628 	push	ar6
      00060C C0 03            [24] 1629 	push	ar3
      00060E C0 02            [24] 1630 	push	ar2
      000610 74 20            [12] 1631 	mov	a,#0x20
      000612 C0 E0            [24] 1632 	push	acc
      000614 E4               [12] 1633 	clr	a
      000615 C0 E0            [24] 1634 	push	acc
      000617 8C 82            [24] 1635 	mov	dpl,r4
      000619 8D 83            [24] 1636 	mov	dph,r5
      00061B 12r00r00         [24] 1637 	lcall	__modsint
      00061E AC 82            [24] 1638 	mov	r4,dpl
      000620 AD 83            [24] 1639 	mov	r5,dph
      000622 15 81            [12] 1640 	dec	sp
      000624 15 81            [12] 1641 	dec	sp
      000626 D0 02            [24] 1642 	pop	ar2
      000628 D0 03            [24] 1643 	pop	ar3
      00062A E5*00            [12] 1644 	mov	a,_bp
      00062C 24 06            [12] 1645 	add	a,#0x06
      00062E F8               [12] 1646 	mov	r0,a
      00062F A6 04            [24] 1647 	mov	@r0,ar4
      000631 ED               [12] 1648 	mov	a,r5
      000632 C4               [12] 1649 	swap	a
      000633 23               [12] 1650 	rl	a
      000634 54 E0            [12] 1651 	anl	a,#0xe0
      000636 C6               [12] 1652 	xch	a,@r0
      000637 C4               [12] 1653 	swap	a
      000638 23               [12] 1654 	rl	a
      000639 C6               [12] 1655 	xch	a,@r0
      00063A 66               [12] 1656 	xrl	a,@r0
      00063B C6               [12] 1657 	xch	a,@r0
      00063C 54 E0            [12] 1658 	anl	a,#0xe0
      00063E C6               [12] 1659 	xch	a,@r0
      00063F 66               [12] 1660 	xrl	a,@r0
      000640 08               [12] 1661 	inc	r0
      000641 F6               [12] 1662 	mov	@r0,a
      000642 74 1F            [12] 1663 	mov	a,#0x1f
      000644 2A               [12] 1664 	add	a,r2
      000645 FC               [12] 1665 	mov	r4,a
      000646 E4               [12] 1666 	clr	a
      000647 3B               [12] 1667 	addc	a,r3
      000648 FD               [12] 1668 	mov	r5,a
      000649 C0 03            [24] 1669 	push	ar3
      00064B C0 02            [24] 1670 	push	ar2
      00064D 74 20            [12] 1671 	mov	a,#0x20
      00064F C0 E0            [24] 1672 	push	acc
      000651 E4               [12] 1673 	clr	a
      000652 C0 E0            [24] 1674 	push	acc
      000654 8C 82            [24] 1675 	mov	dpl,r4
      000656 8D 83            [24] 1676 	mov	dph,r5
      000658 12r00r00         [24] 1677 	lcall	__modsint
      00065B C8               [12] 1678 	xch	a,r0
      00065C E5*00            [12] 1679 	mov	a,_bp
      00065E 24 08            [12] 1680 	add	a,#0x08
      000660 C8               [12] 1681 	xch	a,r0
      000661 A6 82            [24] 1682 	mov	@r0,dpl
      000663 08               [12] 1683 	inc	r0
      000664 A6 83            [24] 1684 	mov	@r0,dph
      000666 15 81            [12] 1685 	dec	sp
      000668 15 81            [12] 1686 	dec	sp
      00066A D0 02            [24] 1687 	pop	ar2
      00066C D0 03            [24] 1688 	pop	ar3
      00066E E5*00            [12] 1689 	mov	a,_bp
      000670 24 06            [12] 1690 	add	a,#0x06
      000672 F8               [12] 1691 	mov	r0,a
      000673 E5*00            [12] 1692 	mov	a,_bp
      000675 24 08            [12] 1693 	add	a,#0x08
      000677 F9               [12] 1694 	mov	r1,a
      000678 E7               [12] 1695 	mov	a,@r1
      000679 26               [12] 1696 	add	a,@r0
      00067A FC               [12] 1697 	mov	r4,a
      00067B 09               [12] 1698 	inc	r1
      00067C E7               [12] 1699 	mov	a,@r1
      00067D 08               [12] 1700 	inc	r0
      00067E 36               [12] 1701 	addc	a,@r0
      00067F FD               [12] 1702 	mov	r5,a
      000680 EC               [12] 1703 	mov	a,r4
      000681 24r02            [12] 1704 	add	a,#_u
      000683 F5 82            [12] 1705 	mov	dpl,a
      000685 ED               [12] 1706 	mov	a,r5
      000686 34s04            [12] 1707 	addc	a,#(_u >> 8)
      000688 F5 83            [12] 1708 	mov	dph,a
      00068A E0               [24] 1709 	movx	a,@dptr
      00068B FD               [12] 1710 	mov	r5,a
      00068C E5*00            [12] 1711 	mov	a,_bp
      00068E 24 05            [12] 1712 	add	a,#0x05
      000690 F8               [12] 1713 	mov	r0,a
      000691 ED               [12] 1714 	mov	a,r5
      000692 26               [12] 1715 	add	a,@r0
      000693 F6               [12] 1716 	mov	@r0,a
                                   1717 ;	life.c:167: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000694 74 20            [12] 1718 	mov	a,#0x20
      000696 2A               [12] 1719 	add	a,r2
      000697 FC               [12] 1720 	mov	r4,a
      000698 E4               [12] 1721 	clr	a
      000699 3B               [12] 1722 	addc	a,r3
      00069A FD               [12] 1723 	mov	r5,a
      00069B C0 03            [24] 1724 	push	ar3
      00069D C0 02            [24] 1725 	push	ar2
      00069F 74 20            [12] 1726 	mov	a,#0x20
      0006A1 C0 E0            [24] 1727 	push	acc
      0006A3 E4               [12] 1728 	clr	a
      0006A4 C0 E0            [24] 1729 	push	acc
      0006A6 8C 82            [24] 1730 	mov	dpl,r4
      0006A8 8D 83            [24] 1731 	mov	dph,r5
      0006AA 12r00r00         [24] 1732 	lcall	__modsint
      0006AD C8               [12] 1733 	xch	a,r0
      0006AE E5*00            [12] 1734 	mov	a,_bp
      0006B0 24 0A            [12] 1735 	add	a,#0x0a
      0006B2 C8               [12] 1736 	xch	a,r0
      0006B3 A6 82            [24] 1737 	mov	@r0,dpl
      0006B5 08               [12] 1738 	inc	r0
      0006B6 A6 83            [24] 1739 	mov	@r0,dph
      0006B8 15 81            [12] 1740 	dec	sp
      0006BA 15 81            [12] 1741 	dec	sp
      0006BC D0 02            [24] 1742 	pop	ar2
      0006BE D0 03            [24] 1743 	pop	ar3
      0006C0 E5*00            [12] 1744 	mov	a,_bp
      0006C2 24 06            [12] 1745 	add	a,#0x06
      0006C4 F8               [12] 1746 	mov	r0,a
      0006C5 E5*00            [12] 1747 	mov	a,_bp
      0006C7 24 0A            [12] 1748 	add	a,#0x0a
      0006C9 F9               [12] 1749 	mov	r1,a
      0006CA E7               [12] 1750 	mov	a,@r1
      0006CB 26               [12] 1751 	add	a,@r0
      0006CC FC               [12] 1752 	mov	r4,a
      0006CD 09               [12] 1753 	inc	r1
      0006CE E7               [12] 1754 	mov	a,@r1
      0006CF 08               [12] 1755 	inc	r0
      0006D0 36               [12] 1756 	addc	a,@r0
      0006D1 FD               [12] 1757 	mov	r5,a
      0006D2 EC               [12] 1758 	mov	a,r4
      0006D3 24r02            [12] 1759 	add	a,#_u
      0006D5 F5 82            [12] 1760 	mov	dpl,a
      0006D7 ED               [12] 1761 	mov	a,r5
      0006D8 34s04            [12] 1762 	addc	a,#(_u >> 8)
      0006DA F5 83            [12] 1763 	mov	dph,a
      0006DC E0               [24] 1764 	movx	a,@dptr
      0006DD FD               [12] 1765 	mov	r5,a
      0006DE E5*00            [12] 1766 	mov	a,_bp
      0006E0 24 05            [12] 1767 	add	a,#0x05
      0006E2 F8               [12] 1768 	mov	r0,a
      0006E3 ED               [12] 1769 	mov	a,r5
      0006E4 26               [12] 1770 	add	a,@r0
      0006E5 F6               [12] 1771 	mov	@r0,a
                                   1772 ;	life.c:169: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006E6 74 21            [12] 1773 	mov	a,#0x21
      0006E8 2A               [12] 1774 	add	a,r2
      0006E9 FC               [12] 1775 	mov	r4,a
      0006EA E4               [12] 1776 	clr	a
      0006EB 3B               [12] 1777 	addc	a,r3
      0006EC FD               [12] 1778 	mov	r5,a
      0006ED C0 03            [24] 1779 	push	ar3
      0006EF C0 02            [24] 1780 	push	ar2
      0006F1 74 20            [12] 1781 	mov	a,#0x20
      0006F3 C0 E0            [24] 1782 	push	acc
      0006F5 E4               [12] 1783 	clr	a
      0006F6 C0 E0            [24] 1784 	push	acc
      0006F8 8C 82            [24] 1785 	mov	dpl,r4
      0006FA 8D 83            [24] 1786 	mov	dph,r5
      0006FC 12r00r00         [24] 1787 	lcall	__modsint
      0006FF C8               [12] 1788 	xch	a,r0
      000700 E5*00            [12] 1789 	mov	a,_bp
      000702 24 0C            [12] 1790 	add	a,#0x0c
      000704 C8               [12] 1791 	xch	a,r0
      000705 A6 82            [24] 1792 	mov	@r0,dpl
      000707 08               [12] 1793 	inc	r0
      000708 A6 83            [24] 1794 	mov	@r0,dph
      00070A 15 81            [12] 1795 	dec	sp
      00070C 15 81            [12] 1796 	dec	sp
      00070E D0 02            [24] 1797 	pop	ar2
      000710 D0 03            [24] 1798 	pop	ar3
      000712 D0 06            [24] 1799 	pop	ar6
      000714 D0 07            [24] 1800 	pop	ar7
      000716 E5*00            [12] 1801 	mov	a,_bp
      000718 24 06            [12] 1802 	add	a,#0x06
      00071A F8               [12] 1803 	mov	r0,a
      00071B E5*00            [12] 1804 	mov	a,_bp
      00071D 24 0C            [12] 1805 	add	a,#0x0c
      00071F F9               [12] 1806 	mov	r1,a
      000720 E7               [12] 1807 	mov	a,@r1
      000721 26               [12] 1808 	add	a,@r0
      000722 FC               [12] 1809 	mov	r4,a
      000723 09               [12] 1810 	inc	r1
      000724 E7               [12] 1811 	mov	a,@r1
      000725 08               [12] 1812 	inc	r0
      000726 36               [12] 1813 	addc	a,@r0
      000727 FD               [12] 1814 	mov	r5,a
      000728 EC               [12] 1815 	mov	a,r4
      000729 24r02            [12] 1816 	add	a,#_u
      00072B F5 82            [12] 1817 	mov	dpl,a
      00072D ED               [12] 1818 	mov	a,r5
      00072E 34s04            [12] 1819 	addc	a,#(_u >> 8)
      000730 F5 83            [12] 1820 	mov	dph,a
      000732 E0               [24] 1821 	movx	a,@dptr
      000733 FD               [12] 1822 	mov	r5,a
      000734 E5*00            [12] 1823 	mov	a,_bp
      000736 24 05            [12] 1824 	add	a,#0x05
      000738 F8               [12] 1825 	mov	r0,a
      000739 E5*00            [12] 1826 	mov	a,_bp
      00073B 24 06            [12] 1827 	add	a,#0x06
      00073D F9               [12] 1828 	mov	r1,a
      00073E ED               [12] 1829 	mov	a,r5
      00073F 26               [12] 1830 	add	a,@r0
      000740 F7               [12] 1831 	mov	@r1,a
                                   1832 ;	life.c:171: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000741 74 20            [12] 1833 	mov	a,#0x20
      000743 2E               [12] 1834 	add	a,r6
      000744 FC               [12] 1835 	mov	r4,a
      000745 E4               [12] 1836 	clr	a
      000746 3F               [12] 1837 	addc	a,r7
      000747 FD               [12] 1838 	mov	r5,a
      000748 C0 07            [24] 1839 	push	ar7
      00074A C0 06            [24] 1840 	push	ar6
      00074C C0 03            [24] 1841 	push	ar3
      00074E C0 02            [24] 1842 	push	ar2
      000750 74 20            [12] 1843 	mov	a,#0x20
      000752 C0 E0            [24] 1844 	push	acc
      000754 E4               [12] 1845 	clr	a
      000755 C0 E0            [24] 1846 	push	acc
      000757 8C 82            [24] 1847 	mov	dpl,r4
      000759 8D 83            [24] 1848 	mov	dph,r5
      00075B 12r00r00         [24] 1849 	lcall	__modsint
      00075E AC 82            [24] 1850 	mov	r4,dpl
      000760 AD 83            [24] 1851 	mov	r5,dph
      000762 15 81            [12] 1852 	dec	sp
      000764 15 81            [12] 1853 	dec	sp
      000766 D0 02            [24] 1854 	pop	ar2
      000768 D0 03            [24] 1855 	pop	ar3
      00076A D0 06            [24] 1856 	pop	ar6
      00076C D0 07            [24] 1857 	pop	ar7
      00076E E5*00            [12] 1858 	mov	a,_bp
      000770 24 0E            [12] 1859 	add	a,#0x0e
      000772 F8               [12] 1860 	mov	r0,a
      000773 A6 04            [24] 1861 	mov	@r0,ar4
      000775 ED               [12] 1862 	mov	a,r5
      000776 C4               [12] 1863 	swap	a
      000777 23               [12] 1864 	rl	a
      000778 54 E0            [12] 1865 	anl	a,#0xe0
      00077A C6               [12] 1866 	xch	a,@r0
      00077B C4               [12] 1867 	swap	a
      00077C 23               [12] 1868 	rl	a
      00077D C6               [12] 1869 	xch	a,@r0
      00077E 66               [12] 1870 	xrl	a,@r0
      00077F C6               [12] 1871 	xch	a,@r0
      000780 54 E0            [12] 1872 	anl	a,#0xe0
      000782 C6               [12] 1873 	xch	a,@r0
      000783 66               [12] 1874 	xrl	a,@r0
      000784 08               [12] 1875 	inc	r0
      000785 F6               [12] 1876 	mov	@r0,a
      000786 E5*00            [12] 1877 	mov	a,_bp
      000788 24 0E            [12] 1878 	add	a,#0x0e
      00078A F8               [12] 1879 	mov	r0,a
      00078B E5*00            [12] 1880 	mov	a,_bp
      00078D 24 08            [12] 1881 	add	a,#0x08
      00078F F9               [12] 1882 	mov	r1,a
      000790 E7               [12] 1883 	mov	a,@r1
      000791 26               [12] 1884 	add	a,@r0
      000792 FC               [12] 1885 	mov	r4,a
      000793 09               [12] 1886 	inc	r1
      000794 E7               [12] 1887 	mov	a,@r1
      000795 08               [12] 1888 	inc	r0
      000796 36               [12] 1889 	addc	a,@r0
      000797 FD               [12] 1890 	mov	r5,a
      000798 EC               [12] 1891 	mov	a,r4
      000799 24r02            [12] 1892 	add	a,#_u
      00079B F5 82            [12] 1893 	mov	dpl,a
      00079D ED               [12] 1894 	mov	a,r5
      00079E 34s04            [12] 1895 	addc	a,#(_u >> 8)
      0007A0 F5 83            [12] 1896 	mov	dph,a
      0007A2 E0               [24] 1897 	movx	a,@dptr
      0007A3 FD               [12] 1898 	mov	r5,a
      0007A4 E5*00            [12] 1899 	mov	a,_bp
      0007A6 24 06            [12] 1900 	add	a,#0x06
      0007A8 F8               [12] 1901 	mov	r0,a
      0007A9 E5*00            [12] 1902 	mov	a,_bp
      0007AB 24 06            [12] 1903 	add	a,#0x06
      0007AD F9               [12] 1904 	mov	r1,a
      0007AE ED               [12] 1905 	mov	a,r5
      0007AF 26               [12] 1906 	add	a,@r0
      0007B0 F7               [12] 1907 	mov	@r1,a
                                   1908 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007B1 E5*00            [12] 1909 	mov	a,_bp
      0007B3 24 0E            [12] 1910 	add	a,#0x0e
      0007B5 F8               [12] 1911 	mov	r0,a
      0007B6 E5*00            [12] 1912 	mov	a,_bp
      0007B8 24 0A            [12] 1913 	add	a,#0x0a
      0007BA F9               [12] 1914 	mov	r1,a
      0007BB E7               [12] 1915 	mov	a,@r1
      0007BC 26               [12] 1916 	add	a,@r0
      0007BD FC               [12] 1917 	mov	r4,a
      0007BE 09               [12] 1918 	inc	r1
      0007BF E7               [12] 1919 	mov	a,@r1
      0007C0 08               [12] 1920 	inc	r0
      0007C1 36               [12] 1921 	addc	a,@r0
      0007C2 FD               [12] 1922 	mov	r5,a
      0007C3 EC               [12] 1923 	mov	a,r4
      0007C4 24r02            [12] 1924 	add	a,#_u
      0007C6 F5 82            [12] 1925 	mov	dpl,a
      0007C8 ED               [12] 1926 	mov	a,r5
      0007C9 34s04            [12] 1927 	addc	a,#(_u >> 8)
      0007CB F5 83            [12] 1928 	mov	dph,a
      0007CD E0               [24] 1929 	movx	a,@dptr
      0007CE FD               [12] 1930 	mov	r5,a
      0007CF E5*00            [12] 1931 	mov	a,_bp
      0007D1 24 06            [12] 1932 	add	a,#0x06
      0007D3 F8               [12] 1933 	mov	r0,a
      0007D4 E5*00            [12] 1934 	mov	a,_bp
      0007D6 24 06            [12] 1935 	add	a,#0x06
      0007D8 F9               [12] 1936 	mov	r1,a
      0007D9 ED               [12] 1937 	mov	a,r5
      0007DA 26               [12] 1938 	add	a,@r0
      0007DB F7               [12] 1939 	mov	@r1,a
                                   1940 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007DC E5*00            [12] 1941 	mov	a,_bp
      0007DE 24 0E            [12] 1942 	add	a,#0x0e
      0007E0 F8               [12] 1943 	mov	r0,a
      0007E1 E5*00            [12] 1944 	mov	a,_bp
      0007E3 24 0C            [12] 1945 	add	a,#0x0c
      0007E5 F9               [12] 1946 	mov	r1,a
      0007E6 E7               [12] 1947 	mov	a,@r1
      0007E7 26               [12] 1948 	add	a,@r0
      0007E8 FC               [12] 1949 	mov	r4,a
      0007E9 09               [12] 1950 	inc	r1
      0007EA E7               [12] 1951 	mov	a,@r1
      0007EB 08               [12] 1952 	inc	r0
      0007EC 36               [12] 1953 	addc	a,@r0
      0007ED FD               [12] 1954 	mov	r5,a
      0007EE EC               [12] 1955 	mov	a,r4
      0007EF 24r02            [12] 1956 	add	a,#_u
      0007F1 F5 82            [12] 1957 	mov	dpl,a
      0007F3 ED               [12] 1958 	mov	a,r5
      0007F4 34s04            [12] 1959 	addc	a,#(_u >> 8)
      0007F6 F5 83            [12] 1960 	mov	dph,a
      0007F8 E0               [24] 1961 	movx	a,@dptr
      0007F9 FD               [12] 1962 	mov	r5,a
      0007FA E5*00            [12] 1963 	mov	a,_bp
      0007FC 24 06            [12] 1964 	add	a,#0x06
      0007FE F8               [12] 1965 	mov	r0,a
      0007FF E5*00            [12] 1966 	mov	a,_bp
      000801 24 0E            [12] 1967 	add	a,#0x0e
      000803 F9               [12] 1968 	mov	r1,a
      000804 ED               [12] 1969 	mov	a,r5
      000805 26               [12] 1970 	add	a,@r0
      000806 F7               [12] 1971 	mov	@r1,a
                                   1972 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000807 74 21            [12] 1973 	mov	a,#0x21
      000809 2E               [12] 1974 	add	a,r6
      00080A FE               [12] 1975 	mov	r6,a
      00080B E4               [12] 1976 	clr	a
      00080C 3F               [12] 1977 	addc	a,r7
      00080D FF               [12] 1978 	mov	r7,a
      00080E C0 03            [24] 1979 	push	ar3
      000810 C0 02            [24] 1980 	push	ar2
      000812 74 20            [12] 1981 	mov	a,#0x20
      000814 C0 E0            [24] 1982 	push	acc
      000816 E4               [12] 1983 	clr	a
      000817 C0 E0            [24] 1984 	push	acc
      000819 8E 82            [24] 1985 	mov	dpl,r6
      00081B 8F 83            [24] 1986 	mov	dph,r7
      00081D 12r00r00         [24] 1987 	lcall	__modsint
      000820 AE 82            [24] 1988 	mov	r6,dpl
      000822 AF 83            [24] 1989 	mov	r7,dph
      000824 15 81            [12] 1990 	dec	sp
      000826 15 81            [12] 1991 	dec	sp
      000828 D0 02            [24] 1992 	pop	ar2
      00082A D0 03            [24] 1993 	pop	ar3
      00082C EF               [12] 1994 	mov	a,r7
      00082D C4               [12] 1995 	swap	a
      00082E 23               [12] 1996 	rl	a
      00082F 54 E0            [12] 1997 	anl	a,#0xe0
      000831 CE               [12] 1998 	xch	a,r6
      000832 C4               [12] 1999 	swap	a
      000833 23               [12] 2000 	rl	a
      000834 CE               [12] 2001 	xch	a,r6
      000835 6E               [12] 2002 	xrl	a,r6
      000836 CE               [12] 2003 	xch	a,r6
      000837 54 E0            [12] 2004 	anl	a,#0xe0
      000839 CE               [12] 2005 	xch	a,r6
      00083A 6E               [12] 2006 	xrl	a,r6
      00083B FF               [12] 2007 	mov	r7,a
      00083C E5*00            [12] 2008 	mov	a,_bp
      00083E 24 08            [12] 2009 	add	a,#0x08
      000840 F8               [12] 2010 	mov	r0,a
      000841 E6               [12] 2011 	mov	a,@r0
      000842 2E               [12] 2012 	add	a,r6
      000843 FC               [12] 2013 	mov	r4,a
      000844 08               [12] 2014 	inc	r0
      000845 E6               [12] 2015 	mov	a,@r0
      000846 3F               [12] 2016 	addc	a,r7
      000847 FD               [12] 2017 	mov	r5,a
      000848 EC               [12] 2018 	mov	a,r4
      000849 24r02            [12] 2019 	add	a,#_u
      00084B F5 82            [12] 2020 	mov	dpl,a
      00084D ED               [12] 2021 	mov	a,r5
      00084E 34s04            [12] 2022 	addc	a,#(_u >> 8)
      000850 F5 83            [12] 2023 	mov	dph,a
      000852 E0               [24] 2024 	movx	a,@dptr
      000853 FD               [12] 2025 	mov	r5,a
      000854 E5*00            [12] 2026 	mov	a,_bp
      000856 24 0E            [12] 2027 	add	a,#0x0e
      000858 F8               [12] 2028 	mov	r0,a
      000859 E5*00            [12] 2029 	mov	a,_bp
      00085B 24 0E            [12] 2030 	add	a,#0x0e
      00085D F9               [12] 2031 	mov	r1,a
      00085E ED               [12] 2032 	mov	a,r5
      00085F 26               [12] 2033 	add	a,@r0
      000860 F7               [12] 2034 	mov	@r1,a
                                   2035 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000861 E5*00            [12] 2036 	mov	a,_bp
      000863 24 0A            [12] 2037 	add	a,#0x0a
      000865 F8               [12] 2038 	mov	r0,a
      000866 E6               [12] 2039 	mov	a,@r0
      000867 2E               [12] 2040 	add	a,r6
      000868 FC               [12] 2041 	mov	r4,a
      000869 08               [12] 2042 	inc	r0
      00086A E6               [12] 2043 	mov	a,@r0
      00086B 3F               [12] 2044 	addc	a,r7
      00086C FD               [12] 2045 	mov	r5,a
      00086D EC               [12] 2046 	mov	a,r4
      00086E 24r02            [12] 2047 	add	a,#_u
      000870 F5 82            [12] 2048 	mov	dpl,a
      000872 ED               [12] 2049 	mov	a,r5
      000873 34s04            [12] 2050 	addc	a,#(_u >> 8)
      000875 F5 83            [12] 2051 	mov	dph,a
      000877 E0               [24] 2052 	movx	a,@dptr
      000878 FD               [12] 2053 	mov	r5,a
      000879 E5*00            [12] 2054 	mov	a,_bp
      00087B 24 0E            [12] 2055 	add	a,#0x0e
      00087D F8               [12] 2056 	mov	r0,a
      00087E ED               [12] 2057 	mov	a,r5
      00087F 26               [12] 2058 	add	a,@r0
      000880 FD               [12] 2059 	mov	r5,a
                                   2060 ;	life.c:180: y1 = 1; x1 = 1;
      000881 90r0Cr08         [24] 2061 	mov	dptr,#_y1
      000884 74 01            [12] 2062 	mov	a,#0x01
      000886 F0               [24] 2063 	movx	@dptr,a
      000887 E4               [12] 2064 	clr	a
      000888 A3               [24] 2065 	inc	dptr
      000889 F0               [24] 2066 	movx	@dptr,a
      00088A 90r0Cr06         [24] 2067 	mov	dptr,#_x1
      00088D 04               [12] 2068 	inc	a
      00088E F0               [24] 2069 	movx	@dptr,a
      00088F E4               [12] 2070 	clr	a
      000890 A3               [24] 2071 	inc	dptr
      000891 F0               [24] 2072 	movx	@dptr,a
                                   2073 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000892 E5*00            [12] 2074 	mov	a,_bp
      000894 24 0C            [12] 2075 	add	a,#0x0c
      000896 F8               [12] 2076 	mov	r0,a
      000897 E6               [12] 2077 	mov	a,@r0
      000898 2E               [12] 2078 	add	a,r6
      000899 FE               [12] 2079 	mov	r6,a
      00089A 08               [12] 2080 	inc	r0
      00089B E6               [12] 2081 	mov	a,@r0
      00089C 3F               [12] 2082 	addc	a,r7
      00089D FF               [12] 2083 	mov	r7,a
      00089E EE               [12] 2084 	mov	a,r6
      00089F 24r02            [12] 2085 	add	a,#_u
      0008A1 F5 82            [12] 2086 	mov	dpl,a
      0008A3 EF               [12] 2087 	mov	a,r7
      0008A4 34s04            [12] 2088 	addc	a,#(_u >> 8)
      0008A6 F5 83            [12] 2089 	mov	dph,a
      0008A8 E0               [24] 2090 	movx	a,@dptr
      0008A9 2D               [12] 2091 	add	a,r5
      0008AA FF               [12] 2092 	mov	r7,a
      0008AB 90r0Cr0F         [24] 2093 	mov	dptr,#_n
      0008AE F0               [24] 2094 	movx	@dptr,a
                                   2095 ;	life.c:183: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008AF E5*00            [12] 2096 	mov	a,_bp
      0008B1 24 03            [12] 2097 	add	a,#0x03
      0008B3 F8               [12] 2098 	mov	r0,a
      0008B4 E6               [12] 2099 	mov	a,@r0
      0008B5 24r02            [12] 2100 	add	a,#_nu
      0008B7 FD               [12] 2101 	mov	r5,a
      0008B8 08               [12] 2102 	inc	r0
      0008B9 E6               [12] 2103 	mov	a,@r0
      0008BA 34s08            [12] 2104 	addc	a,#(_nu >> 8)
      0008BC FE               [12] 2105 	mov	r6,a
      0008BD BF 03 02         [24] 2106 	cjne	r7,#0x03,00389$
      0008C0 80 20            [24] 2107 	sjmp	00199$
      0008C2                       2108 00389$:
      0008C2 BF 02 19         [24] 2109 	cjne	r7,#0x02,00198$
      0008C5 A8*00            [24] 2110 	mov	r0,_bp
      0008C7 08               [12] 2111 	inc	r0
      0008C8 EA               [12] 2112 	mov	a,r2
      0008C9 26               [12] 2113 	add	a,@r0
      0008CA FA               [12] 2114 	mov	r2,a
      0008CB EB               [12] 2115 	mov	a,r3
      0008CC 08               [12] 2116 	inc	r0
      0008CD 36               [12] 2117 	addc	a,@r0
      0008CE FB               [12] 2118 	mov	r3,a
      0008CF EA               [12] 2119 	mov	a,r2
      0008D0 24r02            [12] 2120 	add	a,#_u
      0008D2 FA               [12] 2121 	mov	r2,a
      0008D3 EB               [12] 2122 	mov	a,r3
      0008D4 34s04            [12] 2123 	addc	a,#(_u >> 8)
      0008D6 FB               [12] 2124 	mov	r3,a
      0008D7 8A 82            [24] 2125 	mov	dpl,r2
      0008D9 8B 83            [24] 2126 	mov	dph,r3
      0008DB E0               [24] 2127 	movx	a,@dptr
      0008DC 70 04            [24] 2128 	jnz	00199$
      0008DE                       2129 00198$:
                                   2130 ;	assignBit
      0008DE C2*00            [12] 2131 	clr	b0
      0008E0 80 02            [24] 2132 	sjmp	00200$
      0008E2                       2133 00199$:
                                   2134 ;	assignBit
      0008E2 D2*00            [12] 2135 	setb	b0
      0008E4                       2136 00200$:
      0008E4 A2*00            [12] 2137 	mov	c,b0
      0008E6 E4               [12] 2138 	clr	a
      0008E7 33               [12] 2139 	rlc	a
      0008E8 8D 82            [24] 2140 	mov	dpl,r5
      0008EA 8E 83            [24] 2141 	mov	dph,r6
      0008EC F0               [24] 2142 	movx	@dptr,a
                                   2143 ;	life.c:185: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      0008ED 90r0Cr04         [24] 2144 	mov	dptr,#_y
      0008F0 E0               [24] 2145 	movx	a,@dptr
      0008F1 FE               [12] 2146 	mov	r6,a
      0008F2 A3               [24] 2147 	inc	dptr
      0008F3 E0               [24] 2148 	movx	a,@dptr
      0008F4 C4               [12] 2149 	swap	a
      0008F5 23               [12] 2150 	rl	a
      0008F6 54 E0            [12] 2151 	anl	a,#0xe0
      0008F8 CE               [12] 2152 	xch	a,r6
      0008F9 C4               [12] 2153 	swap	a
      0008FA 23               [12] 2154 	rl	a
      0008FB CE               [12] 2155 	xch	a,r6
      0008FC 6E               [12] 2156 	xrl	a,r6
      0008FD CE               [12] 2157 	xch	a,r6
      0008FE 54 E0            [12] 2158 	anl	a,#0xe0
      000900 CE               [12] 2159 	xch	a,r6
      000901 6E               [12] 2160 	xrl	a,r6
      000902 FF               [12] 2161 	mov	r7,a
      000903 90r0Cr02         [24] 2162 	mov	dptr,#_x
      000906 E0               [24] 2163 	movx	a,@dptr
      000907 FC               [12] 2164 	mov	r4,a
      000908 A3               [24] 2165 	inc	dptr
      000909 E0               [24] 2166 	movx	a,@dptr
      00090A FD               [12] 2167 	mov	r5,a
      00090B EC               [12] 2168 	mov	a,r4
      00090C 2E               [12] 2169 	add	a,r6
      00090D FE               [12] 2170 	mov	r6,a
      00090E ED               [12] 2171 	mov	a,r5
      00090F 3F               [12] 2172 	addc	a,r7
      000910 FF               [12] 2173 	mov	r7,a
      000911 EE               [12] 2174 	mov	a,r6
      000912 24r02            [12] 2175 	add	a,#_pu
      000914 F5 82            [12] 2176 	mov	dpl,a
      000916 EF               [12] 2177 	mov	a,r7
      000917 34s00            [12] 2178 	addc	a,#(_pu >> 8)
      000919 F5 83            [12] 2179 	mov	dph,a
      00091B E0               [24] 2180 	movx	a,@dptr
      00091C FD               [12] 2181 	mov	r5,a
      00091D EE               [12] 2182 	mov	a,r6
      00091E 24r02            [12] 2183 	add	a,#_nu
      000920 F5 82            [12] 2184 	mov	dpl,a
      000922 EF               [12] 2185 	mov	a,r7
      000923 34s08            [12] 2186 	addc	a,#(_nu >> 8)
      000925 F5 83            [12] 2187 	mov	dph,a
      000927 E0               [24] 2188 	movx	a,@dptr
      000928 FF               [12] 2189 	mov	r7,a
      000929 ED               [12] 2190 	mov	a,r5
      00092A B5 07 02         [24] 2191 	cjne	a,ar7,00393$
      00092D 80 05            [24] 2192 	sjmp	00149$
      00092F                       2193 00393$:
      00092F 90r0Cr11         [24] 2194 	mov	dptr,#_cycle2
      000932 E4               [12] 2195 	clr	a
      000933 F0               [24] 2196 	movx	@dptr,a
      000934                       2197 00149$:
                                   2198 ;	life.c:186: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      000934 90r0Cr04         [24] 2199 	mov	dptr,#_y
      000937 E0               [24] 2200 	movx	a,@dptr
      000938 FE               [12] 2201 	mov	r6,a
      000939 A3               [24] 2202 	inc	dptr
      00093A E0               [24] 2203 	movx	a,@dptr
      00093B C4               [12] 2204 	swap	a
      00093C 23               [12] 2205 	rl	a
      00093D 54 E0            [12] 2206 	anl	a,#0xe0
      00093F CE               [12] 2207 	xch	a,r6
      000940 C4               [12] 2208 	swap	a
      000941 23               [12] 2209 	rl	a
      000942 CE               [12] 2210 	xch	a,r6
      000943 6E               [12] 2211 	xrl	a,r6
      000944 CE               [12] 2212 	xch	a,r6
      000945 54 E0            [12] 2213 	anl	a,#0xe0
      000947 CE               [12] 2214 	xch	a,r6
      000948 6E               [12] 2215 	xrl	a,r6
      000949 FF               [12] 2216 	mov	r7,a
      00094A 90r0Cr02         [24] 2217 	mov	dptr,#_x
      00094D E0               [24] 2218 	movx	a,@dptr
      00094E FC               [12] 2219 	mov	r4,a
      00094F A3               [24] 2220 	inc	dptr
      000950 E0               [24] 2221 	movx	a,@dptr
      000951 FD               [12] 2222 	mov	r5,a
      000952 EC               [12] 2223 	mov	a,r4
      000953 2E               [12] 2224 	add	a,r6
      000954 FE               [12] 2225 	mov	r6,a
      000955 ED               [12] 2226 	mov	a,r5
      000956 3F               [12] 2227 	addc	a,r7
      000957 FF               [12] 2228 	mov	r7,a
      000958 EE               [12] 2229 	mov	a,r6
      000959 24r02            [12] 2230 	add	a,#_u
      00095B F5 82            [12] 2231 	mov	dpl,a
      00095D EF               [12] 2232 	mov	a,r7
      00095E 34s04            [12] 2233 	addc	a,#(_u >> 8)
      000960 F5 83            [12] 2234 	mov	dph,a
      000962 E0               [24] 2235 	movx	a,@dptr
      000963 FD               [12] 2236 	mov	r5,a
      000964 EE               [12] 2237 	mov	a,r6
      000965 24r02            [12] 2238 	add	a,#_nu
      000967 F5 82            [12] 2239 	mov	dpl,a
      000969 EF               [12] 2240 	mov	a,r7
      00096A 34s08            [12] 2241 	addc	a,#(_nu >> 8)
      00096C F5 83            [12] 2242 	mov	dph,a
      00096E E0               [24] 2243 	movx	a,@dptr
      00096F FF               [12] 2244 	mov	r7,a
      000970 ED               [12] 2245 	mov	a,r5
      000971 B5 07 02         [24] 2246 	cjne	a,ar7,00394$
      000974 80 05            [24] 2247 	sjmp	00178$
      000976                       2248 00394$:
      000976 90r0Cr10         [24] 2249 	mov	dptr,#_fixed
      000979 E4               [12] 2250 	clr	a
      00097A F0               [24] 2251 	movx	@dptr,a
      00097B                       2252 00178$:
                                   2253 ;	life.c:161: for (x = 0; x < W; x++) {
      00097B 90r0Cr02         [24] 2254 	mov	dptr,#_x
      00097E E0               [24] 2255 	movx	a,@dptr
      00097F 24 01            [12] 2256 	add	a,#0x01
      000981 F0               [24] 2257 	movx	@dptr,a
      000982 A3               [24] 2258 	inc	dptr
      000983 E0               [24] 2259 	movx	a,@dptr
      000984 34 00            [12] 2260 	addc	a,#0x00
      000986 F0               [24] 2261 	movx	@dptr,a
      000987 90r0Cr02         [24] 2262 	mov	dptr,#_x
      00098A E0               [24] 2263 	movx	a,@dptr
      00098B FE               [12] 2264 	mov	r6,a
      00098C A3               [24] 2265 	inc	dptr
      00098D E0               [24] 2266 	movx	a,@dptr
      00098E FF               [12] 2267 	mov	r7,a
      00098F C3               [12] 2268 	clr	c
      000990 EE               [12] 2269 	mov	a,r6
      000991 94 20            [12] 2270 	subb	a,#0x20
      000993 EF               [12] 2271 	mov	a,r7
      000994 64 80            [12] 2272 	xrl	a,#0x80
      000996 94 80            [12] 2273 	subb	a,#0x80
      000998 50 03            [24] 2274 	jnc	00395$
      00099A 02r05rB0         [24] 2275 	ljmp	00177$
      00099D                       2276 00395$:
                                   2277 ;	life.c:158: for (y = 0; y < H; y++) {
      00099D 90r0Cr04         [24] 2278 	mov	dptr,#_y
      0009A0 E0               [24] 2279 	movx	a,@dptr
      0009A1 24 01            [12] 2280 	add	a,#0x01
      0009A3 F0               [24] 2281 	movx	@dptr,a
      0009A4 A3               [24] 2282 	inc	dptr
      0009A5 E0               [24] 2283 	movx	a,@dptr
      0009A6 34 00            [12] 2284 	addc	a,#0x00
      0009A8 F0               [24] 2285 	movx	@dptr,a
      0009A9 90r0Cr04         [24] 2286 	mov	dptr,#_y
      0009AC E0               [24] 2287 	movx	a,@dptr
      0009AD FE               [12] 2288 	mov	r6,a
      0009AE A3               [24] 2289 	inc	dptr
      0009AF E0               [24] 2290 	movx	a,@dptr
      0009B0 FF               [12] 2291 	mov	r7,a
      0009B1 C3               [12] 2292 	clr	c
      0009B2 EE               [12] 2293 	mov	a,r6
      0009B3 94 20            [12] 2294 	subb	a,#0x20
      0009B5 EF               [12] 2295 	mov	a,r7
      0009B6 64 80            [12] 2296 	xrl	a,#0x80
      0009B8 94 80            [12] 2297 	subb	a,#0x80
      0009BA 50 03            [24] 2298 	jnc	00396$
      0009BC 02r05r87         [24] 2299 	ljmp	00179$
      0009BF                       2300 00396$:
                                   2301 ;	life.c:190: memcpy(pu, u, sizeof (u));
      0009BF E4               [12] 2302 	clr	a
      0009C0 C0 E0            [24] 2303 	push	acc
      0009C2 74 04            [12] 2304 	mov	a,#0x04
      0009C4 C0 E0            [24] 2305 	push	acc
      0009C6 74r02            [12] 2306 	mov	a,#_u
      0009C8 C0 E0            [24] 2307 	push	acc
      0009CA 74s04            [12] 2308 	mov	a,#(_u >> 8)
      0009CC C0 E0            [24] 2309 	push	acc
      0009CE E4               [12] 2310 	clr	a
      0009CF C0 E0            [24] 2311 	push	acc
      0009D1 90r00r02         [24] 2312 	mov	dptr,#_pu
      0009D4 75 F0 00         [24] 2313 	mov	b,#0x00
      0009D7 12r00r00         [24] 2314 	lcall	___memcpy
      0009DA E5 81            [12] 2315 	mov	a,sp
      0009DC 24 FB            [12] 2316 	add	a,#0xfb
      0009DE F5 81            [12] 2317 	mov	sp,a
                                   2318 ;	life.c:191: memcpy(u, nu, sizeof (nu));
      0009E0 E4               [12] 2319 	clr	a
      0009E1 C0 E0            [24] 2320 	push	acc
      0009E3 74 04            [12] 2321 	mov	a,#0x04
      0009E5 C0 E0            [24] 2322 	push	acc
      0009E7 74r02            [12] 2323 	mov	a,#_nu
      0009E9 C0 E0            [24] 2324 	push	acc
      0009EB 74s08            [12] 2325 	mov	a,#(_nu >> 8)
      0009ED C0 E0            [24] 2326 	push	acc
      0009EF E4               [12] 2327 	clr	a
      0009F0 C0 E0            [24] 2328 	push	acc
      0009F2 90r04r02         [24] 2329 	mov	dptr,#_u
      0009F5 75 F0 00         [24] 2330 	mov	b,#0x00
      0009F8 12r00r00         [24] 2331 	lcall	___memcpy
      0009FB E5 81            [12] 2332 	mov	a,sp
      0009FD 24 FB            [12] 2333 	add	a,#0xfb
      0009FF F5 81            [12] 2334 	mov	sp,a
                                   2335 ;	life.c:226: if (fixed || cycle2) {
      000A01 90r0Cr10         [24] 2336 	mov	dptr,#_fixed
      000A04 E0               [24] 2337 	movx	a,@dptr
      000A05 70 09            [24] 2338 	jnz	00111$
      000A07 90r0Cr11         [24] 2339 	mov	dptr,#_cycle2
      000A0A E0               [24] 2340 	movx	a,@dptr
      000A0B 70 03            [24] 2341 	jnz	00398$
      000A0D 02r05r63         [24] 2342 	ljmp	00186$
      000A10                       2343 00398$:
      000A10                       2344 00111$:
                                   2345 ;	life.c:227: printstr("DONE\r\n");
      000A10 7Dr3C            [12] 2346 	mov	r5,#___str_6
      000A12 7Es00            [12] 2347 	mov	r6,#(___str_6 >> 8)
      000A14 7F 80            [12] 2348 	mov	r7,#0x80
                                   2349 ;	life.c:48: return;
      000A16                       2350 00182$:
                                   2351 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A16 8D 82            [24] 2352 	mov	dpl,r5
      000A18 8E 83            [24] 2353 	mov	dph,r6
      000A1A 8F F0            [24] 2354 	mov	b,r7
      000A1C 12r00r00         [24] 2355 	lcall	__gptrget
      000A1F FC               [12] 2356 	mov	r4,a
      000A20 60 10            [24] 2357 	jz	00156$
      000A22 7B 00            [12] 2358 	mov	r3,#0x00
      000A24 8C 82            [24] 2359 	mov	dpl,r4
      000A26 8B 83            [24] 2360 	mov	dph,r3
      000A28 12r00r00         [24] 2361 	lcall	_putchar
      000A2B 0D               [12] 2362 	inc	r5
                                   2363 ;	life.c:227: printstr("DONE\r\n");
      000A2C BD 00 E7         [24] 2364 	cjne	r5,#0x00,00182$
      000A2F 0E               [12] 2365 	inc	r6
      000A30 80 E4            [24] 2366 	sjmp	00182$
      000A32                       2367 00156$:
                                   2368 ;	life.c:228: (void)getchar();
      000A32 12r00r05         [24] 2369 	lcall	_getchar
                                   2370 ;	life.c:229: break;
      000A35                       2371 00114$:
                                   2372 ;	life.c:233: if (i1) {
      000A35 90r00r01         [24] 2373 	mov	dptr,#_i1
      000A38 E0               [24] 2374 	movx	a,@dptr
      000A39 60 25            [24] 2375 	jz	00192$
                                   2376 ;	life.c:234: printstr("BREAK\r\n");
      000A3B 7Dr43            [12] 2377 	mov	r5,#___str_7
      000A3D 7Es00            [12] 2378 	mov	r6,#(___str_7 >> 8)
      000A3F 7F 80            [12] 2379 	mov	r7,#0x80
                                   2380 ;	life.c:48: return;
      000A41                       2381 00189$:
                                   2382 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A41 8D 82            [24] 2383 	mov	dpl,r5
      000A43 8E 83            [24] 2384 	mov	dph,r6
      000A45 8F F0            [24] 2385 	mov	b,r7
      000A47 12r00r00         [24] 2386 	lcall	__gptrget
      000A4A FC               [12] 2387 	mov	r4,a
      000A4B 60 10            [24] 2388 	jz	00158$
      000A4D 7B 00            [12] 2389 	mov	r3,#0x00
      000A4F 8C 82            [24] 2390 	mov	dpl,r4
      000A51 8B 83            [24] 2391 	mov	dph,r3
      000A53 12r00r00         [24] 2392 	lcall	_putchar
      000A56 0D               [12] 2393 	inc	r5
                                   2394 ;	life.c:234: printstr("BREAK\r\n");
      000A57 BD 00 E7         [24] 2395 	cjne	r5,#0x00,00189$
      000A5A 0E               [12] 2396 	inc	r6
      000A5B 80 E4            [24] 2397 	sjmp	00189$
      000A5D                       2398 00158$:
                                   2399 ;	life.c:235: (void)getchar();
      000A5D 12r00r05         [24] 2400 	lcall	_getchar
      000A60                       2401 00192$:
                                   2402 ;	life.c:203: for (i0 = 0; !i0; ) {
      000A60 90r00r00         [24] 2403 	mov	dptr,#_i0
      000A63 E0               [24] 2404 	movx	a,@dptr
      000A64 70 03            [24] 2405 	jnz	00404$
      000A66 02r02rB6         [24] 2406 	ljmp	00191$
      000A69                       2407 00404$:
                                   2408 ;	life.c:239: EA = 0;
                                   2409 ;	assignBit
      000A69 C2 AF            [12] 2410 	clr	_EA
                                   2411 ;	life.c:241: printstr("TERM\r\n");
      000A6B 7Dr4B            [12] 2412 	mov	r5,#___str_8
      000A6D 7Es00            [12] 2413 	mov	r6,#(___str_8 >> 8)
      000A6F 7F 80            [12] 2414 	mov	r7,#0x80
                                   2415 ;	life.c:48: return;
      000A71                       2416 00194$:
                                   2417 ;	life.c:46: for (; *s; s++) putchar(*s);
      000A71 8D 82            [24] 2418 	mov	dpl,r5
      000A73 8E 83            [24] 2419 	mov	dph,r6
      000A75 8F F0            [24] 2420 	mov	b,r7
      000A77 12r00r00         [24] 2421 	lcall	__gptrget
      000A7A FC               [12] 2422 	mov	r4,a
      000A7B 60 10            [24] 2423 	jz	00160$
      000A7D 7B 00            [12] 2424 	mov	r3,#0x00
      000A7F 8C 82            [24] 2425 	mov	dpl,r4
      000A81 8B 83            [24] 2426 	mov	dph,r3
      000A83 12r00r00         [24] 2427 	lcall	_putchar
      000A86 0D               [12] 2428 	inc	r5
                                   2429 ;	life.c:241: printstr("TERM\r\n");
      000A87 BD 00 E7         [24] 2430 	cjne	r5,#0x00,00194$
      000A8A 0E               [12] 2431 	inc	r6
      000A8B 80 E4            [24] 2432 	sjmp	00194$
      000A8D                       2433 00160$:
                                   2434 ;	life.c:242: (void)getchar();
      000A8D 12r00r05         [24] 2435 	lcall	_getchar
                                   2436 ;	life.c:246: __endasm;
      000A90 02 00 00         [24] 2437 	ljmp	0
                                   2438 ;	life.c:247: }
      000A93 85*00 81         [24] 2439 	mov	sp,_bp
      000A96 D0*00            [24] 2440 	pop	_bp
      000A98 22               [24] 2441 	ret
                                   2442 	.area CSEG    (CODE)
                                   2443 	.area CONST   (CODE)
      000000                       2444 _digits:
      000000 30                    2445 	.db #0x30	; 48	'0'
      000001 31                    2446 	.db #0x31	; 49	'1'
      000002 32                    2447 	.db #0x32	; 50	'2'
      000003 33                    2448 	.db #0x33	; 51	'3'
      000004 34                    2449 	.db #0x34	; 52	'4'
      000005 35                    2450 	.db #0x35	; 53	'5'
      000006 36                    2451 	.db #0x36	; 54	'6'
      000007 37                    2452 	.db #0x37	; 55	'7'
      000008 38                    2453 	.db #0x38	; 56	'8'
      000009 39                    2454 	.db #0x39	; 57	'9'
      00000A 61                    2455 	.db #0x61	; 97	'a'
      00000B 62                    2456 	.db #0x62	; 98	'b'
      00000C 63                    2457 	.db #0x63	; 99	'c'
      00000D 64                    2458 	.db #0x64	; 100	'd'
      00000E 65                    2459 	.db #0x65	; 101	'e'
      00000F 66                    2460 	.db #0x66	; 102	'f'
                                   2461 	.area CONST   (CODE)
      000010                       2462 ___str_0:
      000010 1B                    2463 	.db 0x1b
      000011 5B 32 4A              2464 	.ascii "[2J"
      000014 1B                    2465 	.db 0x1b
      000015 5B 6D                 2466 	.ascii "[m"
      000017 00                    2467 	.db 0x00
                                   2468 	.area CSEG    (CODE)
                                   2469 	.area CONST   (CODE)
      000018                       2470 ___str_1:
      000018 0D                    2471 	.db 0x0d
      000019 0A                    2472 	.db 0x0a
      00001A 00                    2473 	.db 0x00
                                   2474 	.area CSEG    (CODE)
                                   2475 	.area CONST   (CODE)
      00001B                       2476 ___str_2:
      00001B 4C 4F 41 44 20 3C     2477 	.ascii "LOAD <"
      000021 00                    2478 	.db 0x00
                                   2479 	.area CSEG    (CODE)
                                   2480 	.area CONST   (CODE)
      000022                       2481 ___str_3:
      000022 3E                    2482 	.ascii ">"
      000023 0D                    2483 	.db 0x0d
      000024 0A                    2484 	.db 0x0a
      000025 00                    2485 	.db 0x00
                                   2486 	.area CSEG    (CODE)
      000A99                       2487 _busy:
      000A99 5C                    2488 	.db #0x5c	; 92
      000A9A 7C                    2489 	.db #0x7c	; 124
      000A9B 2F                    2490 	.db #0x2f	; 47
      000A9C 2D                    2491 	.db #0x2d	; 45
                                   2492 	.area CONST   (CODE)
      000026                       2493 ___str_4:
      000026 1B                    2494 	.db 0x1b
      000027 5B 32 4A              2495 	.ascii "[2J"
      00002A 1B                    2496 	.db 0x1b
      00002B 5B 6D 49 4E 49 54     2497 	.ascii "[mINIT"
      000031 0D                    2498 	.db 0x0d
      000032 0A                    2499 	.db 0x0a
      000033 00                    2500 	.db 0x00
                                   2501 	.area CSEG    (CODE)
                                   2502 	.area CONST   (CODE)
      000034                       2503 ___str_5:
      000034 52 45 41 44 59        2504 	.ascii "READY"
      000039 0D                    2505 	.db 0x0d
      00003A 0A                    2506 	.db 0x0a
      00003B 00                    2507 	.db 0x00
                                   2508 	.area CSEG    (CODE)
                                   2509 	.area CONST   (CODE)
      00003C                       2510 ___str_6:
      00003C 44 4F 4E 45           2511 	.ascii "DONE"
      000040 0D                    2512 	.db 0x0d
      000041 0A                    2513 	.db 0x0a
      000042 00                    2514 	.db 0x00
                                   2515 	.area CSEG    (CODE)
                                   2516 	.area CONST   (CODE)
      000043                       2517 ___str_7:
      000043 42 52 45 41 4B        2518 	.ascii "BREAK"
      000048 0D                    2519 	.db 0x0d
      000049 0A                    2520 	.db 0x0a
      00004A 00                    2521 	.db 0x00
                                   2522 	.area CSEG    (CODE)
                                   2523 	.area CONST   (CODE)
      00004B                       2524 ___str_8:
      00004B 54 45 52 4D           2525 	.ascii "TERM"
      00004F 0D                    2526 	.db 0x0d
      000050 0A                    2527 	.db 0x0a
      000051 00                    2528 	.db 0x00
                                   2529 	.area CSEG    (CODE)
                                   2530 	.area XINIT   (CODE)
                                   2531 	.area CABS    (ABS,CODE)
