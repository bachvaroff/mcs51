                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print32x
                                     16 	.globl _print16x
                                     17 	.globl _printstr
                                     18 	.globl _getchar_poll
                                     19 	.globl _getchar
                                     20 	.globl _putchar
                                     21 	.globl _toupper
                                     22 	.globl ___memcpy
                                     23 	.globl _memset
                                     24 	.globl _srand
                                     25 	.globl _rand
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable bit register bank
                                    291 ;--------------------------------------------------------
                                    292 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        293 bits:
      000000                        294 	.ds 1
                           008000   295 	b0 = bits[0]
                           008100   296 	b1 = bits[1]
                           008200   297 	b2 = bits[2]
                           008300   298 	b3 = bits[3]
                           008400   299 	b4 = bits[4]
                           008500   300 	b5 = bits[5]
                           008600   301 	b6 = bits[6]
                           008700   302 	b7 = bits[7]
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 ;--------------------------------------------------------
                                    311 ; Stack segment in internal ram 
                                    312 ;--------------------------------------------------------
                                    313 	.area	SSEG
      000000                        314 __start__stack:
      000000                        315 	.ds	1
                                    316 
                                    317 ;--------------------------------------------------------
                                    318 ; indirectly addressable internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area ISEG    (DATA)
      000000                        321 _i0:
      000000                        322 	.ds 1
      000001                        323 _i1:
      000001                        324 	.ds 1
      000002                        325 _OE76:
      000002                        326 	.ds 1
      000003                        327 _x:
      000003                        328 	.ds 2
      000005                        329 _y:
      000005                        330 	.ds 2
      000007                        331 _n:
      000007                        332 	.ds 1
      000008                        333 _fixed:
      000008                        334 	.ds 1
      000009                        335 _cycle2:
      000009                        336 	.ds 1
      00000A                        337 _gen:
      00000A                        338 	.ds 4
      00000E                        339 _genc2:
      00000E                        340 	.ds 4
      000012                        341 _c2set:
      000012                        342 	.ds 1
      000013                        343 _pruni:
      000013                        344 	.ds 1
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
                           00E000   362 _RND	=	0xe000
                           00F006   363 _OEreg	=	0xf006
      000000                        364 _iu:
      000000                        365 	.ds 9216
      002400                        366 _pu:
      002400                        367 	.ds 9216
      004800                        368 _u:
      004800                        369 	.ds 9216
      006C00                        370 _nu:
      006C00                        371 	.ds 9216
                                    372 ;--------------------------------------------------------
                                    373 ; absolute external ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XABS    (ABS,XDATA)
                                    376 ;--------------------------------------------------------
                                    377 ; external initialized ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XISEG   (XDATA)
                                    380 	.area HOME    (CODE)
                                    381 	.area GSINIT0 (CODE)
                                    382 	.area GSINIT1 (CODE)
                                    383 	.area GSINIT2 (CODE)
                                    384 	.area GSINIT3 (CODE)
                                    385 	.area GSINIT4 (CODE)
                                    386 	.area GSINIT5 (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area CSEG    (CODE)
                                    390 ;--------------------------------------------------------
                                    391 ; interrupt vector 
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
      000000                        394 __interrupt_vect:
      000000 02r00r00         [24]  395 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  396 	ljmp	_int0
      000006                        397 	.ds	5
      00000B 32               [24]  398 	reti
      00000C                        399 	.ds	7
      000013 02r00r0C         [24]  400 	ljmp	_int1
                                    401 ;--------------------------------------------------------
                                    402 ; global & static initialisations
                                    403 ;--------------------------------------------------------
                                    404 	.area HOME    (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.area GSFINAL (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.globl __sdcc_gsinit_startup
                                    409 	.globl __sdcc_program_startup
                                    410 	.globl __start__stack
                                    411 	.globl __mcs51_genXINIT
                                    412 	.globl __mcs51_genXRAMCLEAR
                                    413 	.globl __mcs51_genRAMCLEAR
                                    414 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  415 	ljmp	__sdcc_program_startup
                                    416 ;--------------------------------------------------------
                                    417 ; Home
                                    418 ;--------------------------------------------------------
                                    419 	.area HOME    (CODE)
                                    420 	.area HOME    (CODE)
      000016                        421 __sdcc_program_startup:
      000016 02r01r2E         [24]  422 	ljmp	_main
                                    423 ;	return from main will return to caller
                                    424 ;--------------------------------------------------------
                                    425 ; code
                                    426 ;--------------------------------------------------------
                                    427 	.area CSEG    (CODE)
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 'int0'
                                    430 ;------------------------------------------------------------
                                    431 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    432 ;	-----------------------------------------
                                    433 ;	 function int0
                                    434 ;	-----------------------------------------
      000000                        435 _int0:
                           00000F   436 	ar7 = 0x0f
                           00000E   437 	ar6 = 0x0e
                           00000D   438 	ar5 = 0x0d
                           00000C   439 	ar4 = 0x0c
                           00000B   440 	ar3 = 0x0b
                           00000A   441 	ar2 = 0x0a
                           000009   442 	ar1 = 0x09
                           000008   443 	ar0 = 0x08
      000000 C0 D0            [24]  444 	push	psw
      000002 75 D0 08         [24]  445 	mov	psw,#0x08
                                    446 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  447 	mov	r0,#_i0
      000007 76 01            [12]  448 	mov	@r0,#0x01
                                    449 ;	life.c:15: }
      000009 D0 D0            [24]  450 	pop	psw
      00000B 32               [24]  451 	reti
                                    452 ;	eliminated unneeded push/pop dpl
                                    453 ;	eliminated unneeded push/pop dph
                                    454 ;	eliminated unneeded push/pop b
                                    455 ;	eliminated unneeded push/pop acc
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'int1'
                                    458 ;------------------------------------------------------------
                                    459 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    460 ;	-----------------------------------------
                                    461 ;	 function int1
                                    462 ;	-----------------------------------------
      00000C                        463 _int1:
      00000C C0 D0            [24]  464 	push	psw
      00000E 75 D0 08         [24]  465 	mov	psw,#0x08
                                    466 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  467 	mov	r0,#_i1
      000013 76 01            [12]  468 	mov	@r0,#0x01
                                    469 ;	life.c:19: }
      000015 D0 D0            [24]  470 	pop	psw
      000017 32               [24]  471 	reti
                                    472 ;	eliminated unneeded push/pop dpl
                                    473 ;	eliminated unneeded push/pop dph
                                    474 ;	eliminated unneeded push/pop b
                                    475 ;	eliminated unneeded push/pop acc
                                    476 ;------------------------------------------------------------
                                    477 ;Allocation info for local variables in function 'flashOE'
                                    478 ;------------------------------------------------------------
                                    479 ;	life.c:29: static void flashOE(void) {
                                    480 ;	-----------------------------------------
                                    481 ;	 function flashOE
                                    482 ;	-----------------------------------------
      000018                        483 _flashOE:
                           000007   484 	ar7 = 0x07
                           000006   485 	ar6 = 0x06
                           000005   486 	ar5 = 0x05
                           000004   487 	ar4 = 0x04
                           000003   488 	ar3 = 0x03
                           000002   489 	ar2 = 0x02
                           000001   490 	ar1 = 0x01
                           000000   491 	ar0 = 0x00
                                    492 ;	life.c:30: OEreg = OE76;
      000018 78r02            [12]  493 	mov	r0,#_OE76
      00001A 90 F0 06         [24]  494 	mov	dptr,#_OEreg
      00001D E6               [12]  495 	mov	a,@r0
      00001E F0               [24]  496 	movx	@dptr,a
                                    497 ;	life.c:32: return;
                                    498 ;	life.c:33: }
      00001F 22               [24]  499 	ret
                                    500 ;------------------------------------------------------------
                                    501 ;Allocation info for local variables in function 'show'
                                    502 ;------------------------------------------------------------
                                    503 ;universe                  Allocated to stack - _bp -5
                                    504 ;prflags                   Allocated to registers r7 
                                    505 ;------------------------------------------------------------
                                    506 ;	life.c:67: void show(char prflags, char *universe) {
                                    507 ;	-----------------------------------------
                                    508 ;	 function show
                                    509 ;	-----------------------------------------
      000020                        510 _show:
      000020 C0*00            [24]  511 	push	_bp
      000022 85 81*00         [24]  512 	mov	_bp,sp
                                    513 ;	life.c:68: if (prflags & PRCLR) printstr("\033[2J");
      000025 E5 82            [12]  514 	mov	a,dpl
      000027 FF               [12]  515 	mov	r7,a
      000028 30 E0 0D         [24]  516 	jnb	acc.0,00102$
      00002B 90r00r00         [24]  517 	mov	dptr,#___str_0
      00002E 75 F0 80         [24]  518 	mov	b,#0x80
      000031 C0 07            [24]  519 	push	ar7
      000033 12r00r00         [24]  520 	lcall	_printstr
      000036 D0 07            [24]  521 	pop	ar7
      000038                        522 00102$:
                                    523 ;	life.c:69: if (prflags & PRHDR) {
      000038 EF               [12]  524 	mov	a,r7
      000039 30 E1 4A         [24]  525 	jnb	acc.1,00106$
                                    526 ;	life.c:70: printstr("GEN ");
      00003C 90r00r05         [24]  527 	mov	dptr,#___str_1
      00003F 75 F0 80         [24]  528 	mov	b,#0x80
      000042 C0 07            [24]  529 	push	ar7
      000044 12r00r00         [24]  530 	lcall	_printstr
                                    531 ;	life.c:71: print32x(gen);
      000047 78r0A            [12]  532 	mov	r0,#_gen
      000049 86 82            [24]  533 	mov	dpl,@r0
      00004B 08               [12]  534 	inc	r0
      00004C 86 83            [24]  535 	mov	dph,@r0
      00004E 08               [12]  536 	inc	r0
      00004F 86 F0            [24]  537 	mov	b,@r0
      000051 08               [12]  538 	inc	r0
      000052 E6               [12]  539 	mov	a,@r0
      000053 12r00r00         [24]  540 	lcall	_print32x
      000056 D0 07            [24]  541 	pop	ar7
                                    542 ;	life.c:72: if (c2set) {
      000058 78r12            [12]  543 	mov	r0,#_c2set
      00005A E6               [12]  544 	mov	a,@r0
      00005B 60 1C            [24]  545 	jz	00104$
                                    546 ;	life.c:73: printstr(" CYCLE2 ");
      00005D 90r00r0A         [24]  547 	mov	dptr,#___str_2
      000060 75 F0 80         [24]  548 	mov	b,#0x80
      000063 C0 07            [24]  549 	push	ar7
      000065 12r00r00         [24]  550 	lcall	_printstr
                                    551 ;	life.c:74: print32x(genc2);
      000068 78r0E            [12]  552 	mov	r0,#_genc2
      00006A 86 82            [24]  553 	mov	dpl,@r0
      00006C 08               [12]  554 	inc	r0
      00006D 86 83            [24]  555 	mov	dph,@r0
      00006F 08               [12]  556 	inc	r0
      000070 86 F0            [24]  557 	mov	b,@r0
      000072 08               [12]  558 	inc	r0
      000073 E6               [12]  559 	mov	a,@r0
      000074 12r00r00         [24]  560 	lcall	_print32x
      000077 D0 07            [24]  561 	pop	ar7
      000079                        562 00104$:
                                    563 ;	life.c:76: printstr("\r\n");
      000079 90r00r13         [24]  564 	mov	dptr,#___str_3
      00007C 75 F0 80         [24]  565 	mov	b,#0x80
      00007F C0 07            [24]  566 	push	ar7
      000081 12r00r00         [24]  567 	lcall	_printstr
      000084 D0 07            [24]  568 	pop	ar7
      000086                        569 00106$:
                                    570 ;	life.c:78: if (prflags & PRUNI) {
      000086 EF               [12]  571 	mov	a,r7
      000087 20 E2 03         [24]  572 	jb	acc.2,00159$
      00008A 02r01r2B         [24]  573 	ljmp	00113$
      00008D                        574 00159$:
                                    575 ;	life.c:79: printstr("\033[?25l");
      00008D 90r00r16         [24]  576 	mov	dptr,#___str_4
      000090 75 F0 80         [24]  577 	mov	b,#0x80
      000093 12r00r00         [24]  578 	lcall	_printstr
                                    579 ;	life.c:80: for (x = 0; x < W; x++) {
      000096 78r03            [12]  580 	mov	r0,#_x
      000098 E4               [12]  581 	clr	a
      000099 F6               [12]  582 	mov	@r0,a
      00009A 08               [12]  583 	inc	r0
      00009B F6               [12]  584 	mov	@r0,a
      00009C                        585 00116$:
                                    586 ;	life.c:81: for (y = 0; y < H; y++)
      00009C 78r05            [12]  587 	mov	r0,#_y
      00009E E4               [12]  588 	clr	a
      00009F F6               [12]  589 	mov	@r0,a
      0000A0 08               [12]  590 	inc	r0
      0000A1 F6               [12]  591 	mov	@r0,a
      0000A2                        592 00114$:
                                    593 ;	life.c:82: if (universe[A2D(W, y, x)]) putchar((int)'1');
      0000A2 78r05            [12]  594 	mov	r0,#_y
      0000A4 E6               [12]  595 	mov	a,@r0
      0000A5 C0 E0            [24]  596 	push	acc
      0000A7 08               [12]  597 	inc	r0
      0000A8 E6               [12]  598 	mov	a,@r0
      0000A9 C0 E0            [24]  599 	push	acc
      0000AB 90 00 30         [24]  600 	mov	dptr,#0x0030
      0000AE 12r00r00         [24]  601 	lcall	__mulint
      0000B1 AE 82            [24]  602 	mov	r6,dpl
      0000B3 AF 83            [24]  603 	mov	r7,dph
      0000B5 15 81            [12]  604 	dec	sp
      0000B7 15 81            [12]  605 	dec	sp
      0000B9 78r03            [12]  606 	mov	r0,#_x
      0000BB E6               [12]  607 	mov	a,@r0
      0000BC 2E               [12]  608 	add	a,r6
      0000BD FE               [12]  609 	mov	r6,a
      0000BE 08               [12]  610 	inc	r0
      0000BF E6               [12]  611 	mov	a,@r0
      0000C0 3F               [12]  612 	addc	a,r7
      0000C1 FF               [12]  613 	mov	r7,a
      0000C2 E5*00            [12]  614 	mov	a,_bp
      0000C4 24 FB            [12]  615 	add	a,#0xfb
      0000C6 F8               [12]  616 	mov	r0,a
      0000C7 EE               [12]  617 	mov	a,r6
      0000C8 26               [12]  618 	add	a,@r0
      0000C9 FE               [12]  619 	mov	r6,a
      0000CA EF               [12]  620 	mov	a,r7
      0000CB 08               [12]  621 	inc	r0
      0000CC 36               [12]  622 	addc	a,@r0
      0000CD FF               [12]  623 	mov	r7,a
      0000CE 08               [12]  624 	inc	r0
      0000CF 86 05            [24]  625 	mov	ar5,@r0
      0000D1 8E 82            [24]  626 	mov	dpl,r6
      0000D3 8F 83            [24]  627 	mov	dph,r7
      0000D5 8D F0            [24]  628 	mov	b,r5
      0000D7 12r00r00         [24]  629 	lcall	__gptrget
      0000DA 60 08            [24]  630 	jz	00108$
      0000DC 90 00 31         [24]  631 	mov	dptr,#0x0031
      0000DF 12r00r00         [24]  632 	lcall	_putchar
      0000E2 80 06            [24]  633 	sjmp	00115$
      0000E4                        634 00108$:
                                    635 ;	life.c:83: else putchar((int)'0');
      0000E4 90 00 30         [24]  636 	mov	dptr,#0x0030
      0000E7 12r00r00         [24]  637 	lcall	_putchar
      0000EA                        638 00115$:
                                    639 ;	life.c:81: for (y = 0; y < H; y++)
      0000EA 78r05            [12]  640 	mov	r0,#_y
      0000EC 06               [12]  641 	inc	@r0
      0000ED B6 00 02         [24]  642 	cjne	@r0,#0x00,00161$
      0000F0 08               [12]  643 	inc	r0
      0000F1 06               [12]  644 	inc	@r0
      0000F2                        645 00161$:
      0000F2 78r05            [12]  646 	mov	r0,#_y
      0000F4 C3               [12]  647 	clr	c
      0000F5 E6               [12]  648 	mov	a,@r0
      0000F6 94 C0            [12]  649 	subb	a,#0xc0
      0000F8 08               [12]  650 	inc	r0
      0000F9 E6               [12]  651 	mov	a,@r0
      0000FA 64 80            [12]  652 	xrl	a,#0x80
      0000FC 94 80            [12]  653 	subb	a,#0x80
      0000FE 40 A2            [24]  654 	jc	00114$
                                    655 ;	life.c:84: printstr("\r\n");
      000100 90r00r13         [24]  656 	mov	dptr,#___str_3
      000103 75 F0 80         [24]  657 	mov	b,#0x80
      000106 12r00r00         [24]  658 	lcall	_printstr
                                    659 ;	life.c:80: for (x = 0; x < W; x++) {
      000109 78r03            [12]  660 	mov	r0,#_x
      00010B 06               [12]  661 	inc	@r0
      00010C B6 00 02         [24]  662 	cjne	@r0,#0x00,00163$
      00010F 08               [12]  663 	inc	r0
      000110 06               [12]  664 	inc	@r0
      000111                        665 00163$:
      000111 78r03            [12]  666 	mov	r0,#_x
      000113 C3               [12]  667 	clr	c
      000114 E6               [12]  668 	mov	a,@r0
      000115 94 30            [12]  669 	subb	a,#0x30
      000117 08               [12]  670 	inc	r0
      000118 E6               [12]  671 	mov	a,@r0
      000119 64 80            [12]  672 	xrl	a,#0x80
      00011B 94 80            [12]  673 	subb	a,#0x80
      00011D 50 03            [24]  674 	jnc	00164$
      00011F 02r00r9C         [24]  675 	ljmp	00116$
      000122                        676 00164$:
                                    677 ;	life.c:86: printstr("\033[?25h");
      000122 90r00r1D         [24]  678 	mov	dptr,#___str_5
      000125 75 F0 80         [24]  679 	mov	b,#0x80
      000128 12r00r00         [24]  680 	lcall	_printstr
      00012B                        681 00113$:
                                    682 ;	life.c:89: return;
                                    683 ;	life.c:90: }
      00012B D0*00            [24]  684 	pop	_bp
      00012D 22               [24]  685 	ret
                                    686 ;------------------------------------------------------------
                                    687 ;Allocation info for local variables in function 'main'
                                    688 ;------------------------------------------------------------
                                    689 ;c                         Allocated to registers r6 r7 
                                    690 ;nbits                     Allocated to registers r4 r5 
                                    691 ;c                         Allocated to stack - _bp +10
                                    692 ;sloc0                     Allocated to stack - _bp +1
                                    693 ;sloc1                     Allocated to stack - _bp +2
                                    694 ;sloc2                     Allocated to stack - _bp +4
                                    695 ;sloc3                     Allocated to stack - _bp +6
                                    696 ;sloc4                     Allocated to stack - _bp +8
                                    697 ;------------------------------------------------------------
                                    698 ;	life.c:194: void main(void) {
                                    699 ;	-----------------------------------------
                                    700 ;	 function main
                                    701 ;	-----------------------------------------
      00012E                        702 _main:
      00012E C0*00            [24]  703 	push	_bp
      000130 E5 81            [12]  704 	mov	a,sp
      000132 F5*00            [12]  705 	mov	_bp,a
      000134 24 0B            [12]  706 	add	a,#0x0b
      000136 F5 81            [12]  707 	mov	sp,a
                                    708 ;	life.c:197: IT0 = 1;
                                    709 ;	assignBit
      000138 D2 88            [12]  710 	setb	_IT0
                                    711 ;	life.c:198: IT1 = 1;
                                    712 ;	assignBit
      00013A D2 8A            [12]  713 	setb	_IT1
                                    714 ;	life.c:199: EX0 = 1;
                                    715 ;	assignBit
      00013C D2 A8            [12]  716 	setb	_EX0
                                    717 ;	life.c:200: EX1 = 1;
                                    718 ;	assignBit
      00013E D2 AA            [12]  719 	setb	_EX1
                                    720 ;	life.c:201: EA = 1;	
                                    721 ;	assignBit
      000140 D2 AF            [12]  722 	setb	_EA
                                    723 ;	life.c:202: P1_7 = 0;
                                    724 ;	assignBit
      000142 C2 97            [12]  725 	clr	_P1_7
                                    726 ;	life.c:207: __endasm;
      000144 00               [12]  727 	nop
      000145 00               [12]  728 	nop
      000146 00               [12]  729 	nop
                                    730 ;	life.c:209: srand(RND);
      000147 90 E0 00         [24]  731 	mov	dptr,#_RND
      00014A E0               [24]  732 	movx	a,@dptr
      00014B FE               [12]  733 	mov	r6,a
      00014C A3               [24]  734 	inc	dptr
      00014D E0               [24]  735 	movx	a,@dptr
      00014E FF               [12]  736 	mov	r7,a
      00014F 8E 82            [24]  737 	mov	dpl,r6
      000151 8F 83            [24]  738 	mov	dph,r7
      000153 12r00r00         [24]  739 	lcall	_srand
                                    740 ;	life.c:211: OE76 = OE76_0;
      000156 78r02            [12]  741 	mov	r0,#_OE76
      000158 76 3F            [12]  742 	mov	@r0,#0x3f
                                    743 ;	life.c:212: flashOE();
      00015A 12r00r18         [24]  744 	lcall	_flashOE
                                    745 ;	life.c:49: gen = 0ul;
      00015D 78r0A            [12]  746 	mov	r0,#_gen
      00015F E4               [12]  747 	clr	a
      000160 F6               [12]  748 	mov	@r0,a
      000161 08               [12]  749 	inc	r0
      000162 F6               [12]  750 	mov	@r0,a
      000163 08               [12]  751 	inc	r0
      000164 F6               [12]  752 	mov	@r0,a
      000165 08               [12]  753 	inc	r0
      000166 F6               [12]  754 	mov	@r0,a
                                    755 ;	life.c:50: genc2 = 0ul;
      000167 78r0E            [12]  756 	mov	r0,#_genc2
      000169 F6               [12]  757 	mov	@r0,a
      00016A 08               [12]  758 	inc	r0
      00016B F6               [12]  759 	mov	@r0,a
      00016C 08               [12]  760 	inc	r0
      00016D F6               [12]  761 	mov	@r0,a
      00016E 08               [12]  762 	inc	r0
      00016F F6               [12]  763 	mov	@r0,a
                                    764 ;	life.c:51: c2set = 0;
      000170 78r12            [12]  765 	mov	r0,#_c2set
      000172 76 00            [12]  766 	mov	@r0,#0x00
                                    767 ;	life.c:216: printstr("\033[?25h\033[m");
      000174 90r00r3E         [24]  768 	mov	dptr,#___str_9
      000177 75 F0 80         [24]  769 	mov	b,#0x80
      00017A 12r00r00         [24]  770 	lcall	_printstr
                                    771 ;	life.c:218: for (i0 = 0; !i0; ) {
      00017D 78r00            [12]  772 	mov	r0,#_i0
      00017F 76 00            [12]  773 	mov	@r0,#0x00
      000181                        774 00236$:
                                    775 ;	life.c:219: pruni = 1;
      000181 78r13            [12]  776 	mov	r0,#_pruni
      000183 76 01            [12]  777 	mov	@r0,#0x01
                                    778 ;	life.c:220: while (1) {
      000185                        779 00127$:
                                    780 ;	life.c:221: printstr("LIFE I L R O P S U B T\r\n");
      000185 90r00r48         [24]  781 	mov	dptr,#___str_10
      000188 75 F0 80         [24]  782 	mov	b,#0x80
      00018B 12r00r00         [24]  783 	lcall	_printstr
                                    784 ;	life.c:222: c = toupper(getchar());
      00018E 12r00r00         [24]  785 	lcall	_getchar
      000191 12r00r00         [24]  786 	lcall	_toupper
      000194 AE 82            [24]  787 	mov	r6,dpl
      000196 AF 83            [24]  788 	mov	r7,dph
                                    789 ;	life.c:223: if (i0 || (c == (int)'T')) goto term;
      000198 78r00            [12]  790 	mov	r0,#_i0
      00019A E6               [12]  791 	mov	a,@r0
      00019B 60 03            [24]  792 	jz	00463$
      00019D 02r09r89         [24]  793 	ljmp	00154$
      0001A0                        794 00463$:
      0001A0 BE 54 06         [24]  795 	cjne	r6,#0x54,00464$
      0001A3 BF 00 03         [24]  796 	cjne	r7,#0x00,00464$
      0001A6 02r09r89         [24]  797 	ljmp	00154$
      0001A9                        798 00464$:
                                    799 ;	life.c:224: else if ((c == (int)'I') || (c == (int)'L') || (c == (int)'R')) {
      0001A9 BE 49 05         [24]  800 	cjne	r6,#0x49,00465$
      0001AC BF 00 02         [24]  801 	cjne	r7,#0x00,00465$
      0001AF 80 13            [24]  802 	sjmp	00117$
      0001B1                        803 00465$:
      0001B1 BE 4C 05         [24]  804 	cjne	r6,#0x4c,00466$
      0001B4 BF 00 02         [24]  805 	cjne	r7,#0x00,00466$
      0001B7 80 0B            [24]  806 	sjmp	00117$
      0001B9                        807 00466$:
      0001B9 BE 52 05         [24]  808 	cjne	r6,#0x52,00467$
      0001BC BF 00 02         [24]  809 	cjne	r7,#0x00,00467$
      0001BF 80 03            [24]  810 	sjmp	00468$
      0001C1                        811 00467$:
      0001C1 02r03rEC         [24]  812 	ljmp	00118$
      0001C4                        813 00468$:
      0001C4                        814 00117$:
                                    815 ;	life.c:225: if (c == (int)'L') loadiu();
      0001C4 BE 4C 05         [24]  816 	cjne	r6,#0x4c,00469$
      0001C7 BF 00 02         [24]  817 	cjne	r7,#0x00,00469$
      0001CA 80 03            [24]  818 	sjmp	00470$
      0001CC                        819 00469$:
      0001CC 02r02rF0         [24]  820 	ljmp	00104$
      0001CF                        821 00470$:
                                    822 ;	life.c:102: printstr("LOAD 0 1 ~ # <");
      0001CF 90r00r24         [24]  823 	mov	dptr,#___str_6
      0001D2 75 F0 80         [24]  824 	mov	b,#0x80
      0001D5 12r00r00         [24]  825 	lcall	_printstr
                                    826 ;	life.c:104: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0001D8 7C 00            [12]  827 	mov	r4,#0x00
      0001DA 7D 00            [12]  828 	mov	r5,#0x00
      0001DC 78r05            [12]  829 	mov	r0,#_y
      0001DE E4               [12]  830 	clr	a
      0001DF F6               [12]  831 	mov	@r0,a
      0001E0 08               [12]  832 	inc	r0
      0001E1 F6               [12]  833 	mov	@r0,a
      0001E2                        834 00222$:
      0001E2 78r05            [12]  835 	mov	r0,#_y
      0001E4 C3               [12]  836 	clr	c
      0001E5 08               [12]  837 	inc	r0
      0001E6 E6               [12]  838 	mov	a,@r0
      0001E7 64 80            [12]  839 	xrl	a,#0x80
      0001E9 94 A4            [12]  840 	subb	a,#0xa4
      0001EB 40 03            [24]  841 	jc	00471$
      0001ED 02r02rAB         [24]  842 	ljmp	00181$
      0001F0                        843 00471$:
                                    844 ;	life.c:105: for (x = 0; x < W; x++) {
      0001F0 78r03            [12]  845 	mov	r0,#_x
      0001F2 E4               [12]  846 	clr	a
      0001F3 F6               [12]  847 	mov	@r0,a
      0001F4 08               [12]  848 	inc	r0
      0001F5 F6               [12]  849 	mov	@r0,a
                                    850 ;	life.c:106: while (1) {
      0001F6                        851 00168$:
                                    852 ;	life.c:107: c = getchar();
      0001F6 C0 05            [24]  853 	push	ar5
      0001F8 C0 04            [24]  854 	push	ar4
      0001FA 12r00r00         [24]  855 	lcall	_getchar
      0001FD AA 82            [24]  856 	mov	r2,dpl
      0001FF AB 83            [24]  857 	mov	r3,dph
      000201 D0 04            [24]  858 	pop	ar4
      000203 D0 05            [24]  859 	pop	ar5
      000205 E5*00            [12]  860 	mov	a,_bp
      000207 24 0A            [12]  861 	add	a,#0x0a
      000209 F8               [12]  862 	mov	r0,a
      00020A A6 02            [24]  863 	mov	@r0,ar2
      00020C 08               [12]  864 	inc	r0
      00020D A6 03            [24]  865 	mov	@r0,ar3
                                    866 ;	life.c:108: if (c == (int)'0') {
      00020F E5*00            [12]  867 	mov	a,_bp
      000211 24 0A            [12]  868 	add	a,#0x0a
      000213 F8               [12]  869 	mov	r0,a
      000214 B6 30 23         [24]  870 	cjne	@r0,#0x30,00166$
      000217 08               [12]  871 	inc	r0
      000218 B6 00 1F         [24]  872 	cjne	@r0,#0x00,00166$
                                    873 ;	life.c:109: iu[y + x] = 0;
      00021B 78r05            [12]  874 	mov	r0,#_y
      00021D 79r03            [12]  875 	mov	r1,#_x
      00021F E7               [12]  876 	mov	a,@r1
      000220 26               [12]  877 	add	a,@r0
      000221 FA               [12]  878 	mov	r2,a
      000222 09               [12]  879 	inc	r1
      000223 E7               [12]  880 	mov	a,@r1
      000224 08               [12]  881 	inc	r0
      000225 36               [12]  882 	addc	a,@r0
      000226 FB               [12]  883 	mov	r3,a
      000227 EA               [12]  884 	mov	a,r2
      000228 24r00            [12]  885 	add	a,#_iu
      00022A F5 82            [12]  886 	mov	dpl,a
      00022C EB               [12]  887 	mov	a,r3
      00022D 34s00            [12]  888 	addc	a,#(_iu >> 8)
      00022F F5 83            [12]  889 	mov	dph,a
      000231 E4               [12]  890 	clr	a
      000232 F0               [24]  891 	movx	@dptr,a
                                    892 ;	life.c:110: nbits++;
      000233 0C               [12]  893 	inc	r4
                                    894 ;	life.c:111: break;
      000234 BC 00 4E         [24]  895 	cjne	r4,#0x00,00171$
      000237 0D               [12]  896 	inc	r5
      000238 80 4B            [24]  897 	sjmp	00171$
      00023A                        898 00166$:
                                    899 ;	life.c:112: } else if (c == (int)'1') {
      00023A E5*00            [12]  900 	mov	a,_bp
      00023C 24 0A            [12]  901 	add	a,#0x0a
      00023E F8               [12]  902 	mov	r0,a
      00023F B6 31 24         [24]  903 	cjne	@r0,#0x31,00164$
      000242 08               [12]  904 	inc	r0
      000243 B6 00 20         [24]  905 	cjne	@r0,#0x00,00164$
                                    906 ;	life.c:113: iu[y + x] = 1;
      000246 78r05            [12]  907 	mov	r0,#_y
      000248 79r03            [12]  908 	mov	r1,#_x
      00024A E7               [12]  909 	mov	a,@r1
      00024B 26               [12]  910 	add	a,@r0
      00024C FA               [12]  911 	mov	r2,a
      00024D 09               [12]  912 	inc	r1
      00024E E7               [12]  913 	mov	a,@r1
      00024F 08               [12]  914 	inc	r0
      000250 36               [12]  915 	addc	a,@r0
      000251 FB               [12]  916 	mov	r3,a
      000252 EA               [12]  917 	mov	a,r2
      000253 24r00            [12]  918 	add	a,#_iu
      000255 F5 82            [12]  919 	mov	dpl,a
      000257 EB               [12]  920 	mov	a,r3
      000258 34s00            [12]  921 	addc	a,#(_iu >> 8)
      00025A F5 83            [12]  922 	mov	dph,a
      00025C 74 01            [12]  923 	mov	a,#0x01
      00025E F0               [24]  924 	movx	@dptr,a
                                    925 ;	life.c:114: nbits++;
      00025F 0C               [12]  926 	inc	r4
                                    927 ;	life.c:115: break;
      000260 BC 00 22         [24]  928 	cjne	r4,#0x00,00171$
      000263 0D               [12]  929 	inc	r5
      000264 80 1F            [24]  930 	sjmp	00171$
      000266                        931 00164$:
                                    932 ;	life.c:116: } else if (c == (int)'~') goto br_inner;
      000266 E5*00            [12]  933 	mov	a,_bp
      000268 24 0A            [12]  934 	add	a,#0x0a
      00026A F8               [12]  935 	mov	r0,a
      00026B B6 7E 06         [24]  936 	cjne	@r0,#0x7e,00478$
      00026E 08               [12]  937 	inc	r0
      00026F B6 00 02         [24]  938 	cjne	@r0,#0x00,00478$
      000272 80 2A            [24]  939 	sjmp	00223$
      000274                        940 00478$:
                                    941 ;	life.c:117: else if (c == (int)'#') goto out;
      000274 E5*00            [12]  942 	mov	a,_bp
      000276 24 0A            [12]  943 	add	a,#0x0a
      000278 F8               [12]  944 	mov	r0,a
      000279 B6 23 06         [24]  945 	cjne	@r0,#0x23,00479$
      00027C 08               [12]  946 	inc	r0
      00027D B6 00 02         [24]  947 	cjne	@r0,#0x00,00479$
      000280 80 29            [24]  948 	sjmp	00181$
      000282                        949 00479$:
      000282 02r01rF6         [24]  950 	ljmp	00168$
                                    951 ;	life.c:121: break;
      000285                        952 00171$:
                                    953 ;	life.c:105: for (x = 0; x < W; x++) {
      000285 78r03            [12]  954 	mov	r0,#_x
      000287 06               [12]  955 	inc	@r0
      000288 B6 00 02         [24]  956 	cjne	@r0,#0x00,00480$
      00028B 08               [12]  957 	inc	r0
      00028C 06               [12]  958 	inc	@r0
      00028D                        959 00480$:
      00028D 78r03            [12]  960 	mov	r0,#_x
      00028F C3               [12]  961 	clr	c
      000290 E6               [12]  962 	mov	a,@r0
      000291 94 30            [12]  963 	subb	a,#0x30
      000293 08               [12]  964 	inc	r0
      000294 E6               [12]  965 	mov	a,@r0
      000295 64 80            [12]  966 	xrl	a,#0x80
      000297 94 80            [12]  967 	subb	a,#0x80
      000299 50 03            [24]  968 	jnc	00481$
      00029B 02r01rF6         [24]  969 	ljmp	00168$
      00029E                        970 00481$:
      00029E                        971 00223$:
                                    972 ;	life.c:104: for (nbits = 0, y = 0; y < (H * W); y += W) {
      00029E 78r05            [12]  973 	mov	r0,#_y
      0002A0 74 30            [12]  974 	mov	a,#0x30
      0002A2 26               [12]  975 	add	a,@r0
      0002A3 F6               [12]  976 	mov	@r0,a
      0002A4 E4               [12]  977 	clr	a
      0002A5 08               [12]  978 	inc	r0
      0002A6 36               [12]  979 	addc	a,@r0
      0002A7 F6               [12]  980 	mov	@r0,a
      0002A8 02r01rE2         [24]  981 	ljmp	00222$
                                    982 ;	life.c:125: out:
      0002AB                        983 00181$:
                                    984 ;	life.c:126: if (c != (int)'#')
      0002AB E5*00            [12]  985 	mov	a,_bp
      0002AD 24 0A            [12]  986 	add	a,#0x0a
      0002AF F8               [12]  987 	mov	r0,a
      0002B0 B6 23 06         [24]  988 	cjne	@r0,#0x23,00482$
      0002B3 08               [12]  989 	inc	r0
      0002B4 B6 00 02         [24]  990 	cjne	@r0,#0x00,00482$
      0002B7 80 25            [24]  991 	sjmp	00180$
      0002B9                        992 00482$:
                                    993 ;	life.c:127: while (1) {
      0002B9                        994 00177$:
                                    995 ;	life.c:128: c = getchar();
      0002B9 C0 05            [24]  996 	push	ar5
      0002BB C0 04            [24]  997 	push	ar4
      0002BD 12r00r00         [24]  998 	lcall	_getchar
      0002C0 AA 82            [24]  999 	mov	r2,dpl
      0002C2 AB 83            [24] 1000 	mov	r3,dph
      0002C4 D0 04            [24] 1001 	pop	ar4
      0002C6 D0 05            [24] 1002 	pop	ar5
      0002C8 E5*00            [12] 1003 	mov	a,_bp
      0002CA 24 0A            [12] 1004 	add	a,#0x0a
      0002CC F8               [12] 1005 	mov	r0,a
      0002CD A6 02            [24] 1006 	mov	@r0,ar2
      0002CF 08               [12] 1007 	inc	r0
      0002D0 A6 03            [24] 1008 	mov	@r0,ar3
                                   1009 ;	life.c:129: if (c == (int)'#') break;
      0002D2 E5*00            [12] 1010 	mov	a,_bp
      0002D4 24 0A            [12] 1011 	add	a,#0x0a
      0002D6 F8               [12] 1012 	mov	r0,a
      0002D7 B6 23 DF         [24] 1013 	cjne	@r0,#0x23,00177$
      0002DA 08               [12] 1014 	inc	r0
      0002DB B6 00 DB         [24] 1015 	cjne	@r0,#0x00,00177$
      0002DE                       1016 00180$:
                                   1017 ;	life.c:131: print16x(nbits);
      0002DE 8C 82            [24] 1018 	mov	dpl,r4
      0002E0 8D 83            [24] 1019 	mov	dph,r5
      0002E2 12r00r00         [24] 1020 	lcall	_print16x
                                   1021 ;	life.c:132: printstr(">\r\n");
      0002E5 90r00r33         [24] 1022 	mov	dptr,#___str_7
      0002E8 75 F0 80         [24] 1023 	mov	b,#0x80
      0002EB 12r00r00         [24] 1024 	lcall	_printstr
                                   1025 ;	life.c:225: if (c == (int)'L') loadiu();
      0002EE 80 79            [24] 1026 	sjmp	00105$
      0002F0                       1027 00104$:
                                   1028 ;	life.c:226: else if (c == (int)'R') loadriu();
      0002F0 BE 52 76         [24] 1029 	cjne	r6,#0x52,00105$
      0002F3 BF 00 73         [24] 1030 	cjne	r7,#0x00,00105$
                                   1031 ;	life.c:138: printstr("RANDOM");
      0002F6 90r00r37         [24] 1032 	mov	dptr,#___str_8
      0002F9 75 F0 80         [24] 1033 	mov	b,#0x80
      0002FC 12r00r00         [24] 1034 	lcall	_printstr
                                   1035 ;	life.c:140: for (y = 0; y < (H * W); y += W)
      0002FF 78r05            [12] 1036 	mov	r0,#_y
      000301 E4               [12] 1037 	clr	a
      000302 F6               [12] 1038 	mov	@r0,a
      000303 08               [12] 1039 	inc	r0
      000304 F6               [12] 1040 	mov	@r0,a
      000305                       1041 00226$:
                                   1042 ;	life.c:141: for (x = 0; x < W; x++)
      000305 78r03            [12] 1043 	mov	r0,#_x
      000307 E4               [12] 1044 	clr	a
      000308 F6               [12] 1045 	mov	@r0,a
      000309 08               [12] 1046 	inc	r0
      00030A F6               [12] 1047 	mov	@r0,a
      00030B                       1048 00224$:
                                   1049 ;	life.c:142: iu[y + x] = rand() & 1;
      00030B 78r05            [12] 1050 	mov	r0,#_y
      00030D 79r03            [12] 1051 	mov	r1,#_x
      00030F E7               [12] 1052 	mov	a,@r1
      000310 26               [12] 1053 	add	a,@r0
      000311 FC               [12] 1054 	mov	r4,a
      000312 09               [12] 1055 	inc	r1
      000313 E7               [12] 1056 	mov	a,@r1
      000314 08               [12] 1057 	inc	r0
      000315 36               [12] 1058 	addc	a,@r0
      000316 FD               [12] 1059 	mov	r5,a
      000317 EC               [12] 1060 	mov	a,r4
      000318 24r00            [12] 1061 	add	a,#_iu
      00031A FC               [12] 1062 	mov	r4,a
      00031B ED               [12] 1063 	mov	a,r5
      00031C 34s00            [12] 1064 	addc	a,#(_iu >> 8)
      00031E FD               [12] 1065 	mov	r5,a
      00031F C0 05            [24] 1066 	push	ar5
      000321 C0 04            [24] 1067 	push	ar4
      000323 12r00r00         [24] 1068 	lcall	_rand
      000326 AA 82            [24] 1069 	mov	r2,dpl
      000328 D0 04            [24] 1070 	pop	ar4
      00032A D0 05            [24] 1071 	pop	ar5
      00032C 53 02 01         [24] 1072 	anl	ar2,#0x01
      00032F 8C 82            [24] 1073 	mov	dpl,r4
      000331 8D 83            [24] 1074 	mov	dph,r5
      000333 EA               [12] 1075 	mov	a,r2
      000334 F0               [24] 1076 	movx	@dptr,a
                                   1077 ;	life.c:141: for (x = 0; x < W; x++)
      000335 78r03            [12] 1078 	mov	r0,#_x
      000337 06               [12] 1079 	inc	@r0
      000338 B6 00 02         [24] 1080 	cjne	@r0,#0x00,00487$
      00033B 08               [12] 1081 	inc	r0
      00033C 06               [12] 1082 	inc	@r0
      00033D                       1083 00487$:
      00033D 78r03            [12] 1084 	mov	r0,#_x
      00033F C3               [12] 1085 	clr	c
      000340 E6               [12] 1086 	mov	a,@r0
      000341 94 30            [12] 1087 	subb	a,#0x30
      000343 08               [12] 1088 	inc	r0
      000344 E6               [12] 1089 	mov	a,@r0
      000345 64 80            [12] 1090 	xrl	a,#0x80
      000347 94 80            [12] 1091 	subb	a,#0x80
      000349 40 C0            [24] 1092 	jc	00224$
                                   1093 ;	life.c:140: for (y = 0; y < (H * W); y += W)
      00034B 78r05            [12] 1094 	mov	r0,#_y
      00034D 74 30            [12] 1095 	mov	a,#0x30
      00034F 26               [12] 1096 	add	a,@r0
      000350 F6               [12] 1097 	mov	@r0,a
      000351 E4               [12] 1098 	clr	a
      000352 08               [12] 1099 	inc	r0
      000353 36               [12] 1100 	addc	a,@r0
      000354 F6               [12] 1101 	mov	@r0,a
      000355 78r05            [12] 1102 	mov	r0,#_y
      000357 C3               [12] 1103 	clr	c
      000358 08               [12] 1104 	inc	r0
      000359 E6               [12] 1105 	mov	a,@r0
      00035A 64 80            [12] 1106 	xrl	a,#0x80
      00035C 94 A4            [12] 1107 	subb	a,#0xa4
      00035E 40 A5            [24] 1108 	jc	00226$
                                   1109 ;	life.c:144: printstr("\r\n");
      000360 90r00r13         [24] 1110 	mov	dptr,#___str_3
      000363 75 F0 80         [24] 1111 	mov	b,#0x80
      000366 12r00r00         [24] 1112 	lcall	_printstr
                                   1113 ;	life.c:226: else if (c == (int)'R') loadriu();
      000369                       1114 00105$:
                                   1115 ;	life.c:93: memset(u, 0, sizeof (u));
      000369 E4               [12] 1116 	clr	a
      00036A C0 E0            [24] 1117 	push	acc
      00036C 74 24            [12] 1118 	mov	a,#0x24
      00036E C0 E0            [24] 1119 	push	acc
      000370 E4               [12] 1120 	clr	a
      000371 C0 E0            [24] 1121 	push	acc
      000373 90r48r00         [24] 1122 	mov	dptr,#_u
      000376 75 F0 00         [24] 1123 	mov	b,#0x00
      000379 12r00r00         [24] 1124 	lcall	_memset
      00037C 15 81            [12] 1125 	dec	sp
      00037E 15 81            [12] 1126 	dec	sp
      000380 15 81            [12] 1127 	dec	sp
                                   1128 ;	life.c:94: memset(pu, 0, sizeof (pu));
      000382 E4               [12] 1129 	clr	a
      000383 C0 E0            [24] 1130 	push	acc
      000385 74 24            [12] 1131 	mov	a,#0x24
      000387 C0 E0            [24] 1132 	push	acc
      000389 E4               [12] 1133 	clr	a
      00038A C0 E0            [24] 1134 	push	acc
      00038C 90r24r00         [24] 1135 	mov	dptr,#_pu
      00038F 75 F0 00         [24] 1136 	mov	b,#0x00
      000392 12r00r00         [24] 1137 	lcall	_memset
      000395 15 81            [12] 1138 	dec	sp
      000397 15 81            [12] 1139 	dec	sp
      000399 15 81            [12] 1140 	dec	sp
                                   1141 ;	life.c:49: gen = 0ul;
      00039B 78r0A            [12] 1142 	mov	r0,#_gen
      00039D E4               [12] 1143 	clr	a
      00039E F6               [12] 1144 	mov	@r0,a
      00039F 08               [12] 1145 	inc	r0
      0003A0 F6               [12] 1146 	mov	@r0,a
      0003A1 08               [12] 1147 	inc	r0
      0003A2 F6               [12] 1148 	mov	@r0,a
      0003A3 08               [12] 1149 	inc	r0
      0003A4 F6               [12] 1150 	mov	@r0,a
                                   1151 ;	life.c:50: genc2 = 0ul;
      0003A5 78r0E            [12] 1152 	mov	r0,#_genc2
      0003A7 F6               [12] 1153 	mov	@r0,a
      0003A8 08               [12] 1154 	inc	r0
      0003A9 F6               [12] 1155 	mov	@r0,a
      0003AA 08               [12] 1156 	inc	r0
      0003AB F6               [12] 1157 	mov	@r0,a
      0003AC 08               [12] 1158 	inc	r0
      0003AD F6               [12] 1159 	mov	@r0,a
                                   1160 ;	life.c:51: c2set = 0;
      0003AE 78r12            [12] 1161 	mov	r0,#_c2set
      0003B0 76 00            [12] 1162 	mov	@r0,#0x00
                                   1163 ;	life.c:229: memcpy(u, iu, sizeof (iu));
      0003B2 C0 E0            [24] 1164 	push	acc
      0003B4 74 24            [12] 1165 	mov	a,#0x24
      0003B6 C0 E0            [24] 1166 	push	acc
      0003B8 74r00            [12] 1167 	mov	a,#_iu
      0003BA C0 E0            [24] 1168 	push	acc
      0003BC 74s00            [12] 1169 	mov	a,#(_iu >> 8)
      0003BE C0 E0            [24] 1170 	push	acc
      0003C0 E4               [12] 1171 	clr	a
      0003C1 C0 E0            [24] 1172 	push	acc
      0003C3 90r48r00         [24] 1173 	mov	dptr,#_u
      0003C6 75 F0 00         [24] 1174 	mov	b,#0x00
      0003C9 12r00r00         [24] 1175 	lcall	___memcpy
      0003CC E5 81            [12] 1176 	mov	a,sp
      0003CE 24 FB            [12] 1177 	add	a,#0xfb
      0003D0 F5 81            [12] 1178 	mov	sp,a
                                   1179 ;	life.c:230: show(PRUNI, u);
      0003D2 74r00            [12] 1180 	mov	a,#_u
      0003D4 C0 E0            [24] 1181 	push	acc
      0003D6 74s48            [12] 1182 	mov	a,#(_u >> 8)
      0003D8 C0 E0            [24] 1183 	push	acc
      0003DA E4               [12] 1184 	clr	a
      0003DB C0 E0            [24] 1185 	push	acc
      0003DD 75 82 04         [24] 1186 	mov	dpl,#0x04
      0003E0 12r00r20         [24] 1187 	lcall	_show
      0003E3 15 81            [12] 1188 	dec	sp
      0003E5 15 81            [12] 1189 	dec	sp
      0003E7 15 81            [12] 1190 	dec	sp
      0003E9 02r01r85         [24] 1191 	ljmp	00127$
      0003EC                       1192 00118$:
                                   1193 ;	life.c:231: } else if (c == (int)'O') show(PRUNI, iu);
      0003EC BE 4F 1D         [24] 1194 	cjne	r6,#0x4f,00115$
      0003EF BF 00 1A         [24] 1195 	cjne	r7,#0x00,00115$
      0003F2 74r00            [12] 1196 	mov	a,#_iu
      0003F4 C0 E0            [24] 1197 	push	acc
      0003F6 74s00            [12] 1198 	mov	a,#(_iu >> 8)
      0003F8 C0 E0            [24] 1199 	push	acc
      0003FA E4               [12] 1200 	clr	a
      0003FB C0 E0            [24] 1201 	push	acc
      0003FD 75 82 04         [24] 1202 	mov	dpl,#0x04
      000400 12r00r20         [24] 1203 	lcall	_show
      000403 15 81            [12] 1204 	dec	sp
      000405 15 81            [12] 1205 	dec	sp
      000407 15 81            [12] 1206 	dec	sp
      000409 02r01r85         [24] 1207 	ljmp	00127$
      00040C                       1208 00115$:
                                   1209 ;	life.c:232: else if (c == (int)'P') show(PRHDR | PRUNI, u);
      00040C BE 50 1D         [24] 1210 	cjne	r6,#0x50,00112$
      00040F BF 00 1A         [24] 1211 	cjne	r7,#0x00,00112$
      000412 74r00            [12] 1212 	mov	a,#_u
      000414 C0 E0            [24] 1213 	push	acc
      000416 74s48            [12] 1214 	mov	a,#(_u >> 8)
      000418 C0 E0            [24] 1215 	push	acc
      00041A E4               [12] 1216 	clr	a
      00041B C0 E0            [24] 1217 	push	acc
      00041D 75 82 06         [24] 1218 	mov	dpl,#0x06
      000420 12r00r20         [24] 1219 	lcall	_show
      000423 15 81            [12] 1220 	dec	sp
      000425 15 81            [12] 1221 	dec	sp
      000427 15 81            [12] 1222 	dec	sp
      000429 02r01r85         [24] 1223 	ljmp	00127$
      00042C                       1224 00112$:
                                   1225 ;	life.c:233: else if (c == (int)'U') {
      00042C BE 55 3B         [24] 1226 	cjne	r6,#0x55,00109$
      00042F BF 00 38         [24] 1227 	cjne	r7,#0x00,00109$
                                   1228 ;	life.c:234: pruni = !pruni;
      000432 78r13            [12] 1229 	mov	r0,#_pruni
      000434 E6               [12] 1230 	mov	a,@r0
      000435 B4 01 00         [24] 1231 	cjne	a,#0x01,00496$
      000438                       1232 00496$:
      000438 92*00            [24] 1233 	mov	b0,c
      00043A 78r13            [12] 1234 	mov	r0,#_pruni
      00043C E4               [12] 1235 	clr	a
      00043D 33               [12] 1236 	rlc	a
      00043E F6               [12] 1237 	mov	@r0,a
                                   1238 ;	life.c:235: printstr("U");
      00043F 90r00r61         [24] 1239 	mov	dptr,#___str_11
      000442 75 F0 80         [24] 1240 	mov	b,#0x80
      000445 12r00r00         [24] 1241 	lcall	_printstr
                                   1242 ;	life.c:236: putchar(pruni ? (int)'1' : (int)'0');
      000448 78r13            [12] 1243 	mov	r0,#_pruni
      00044A E6               [12] 1244 	mov	a,@r0
      00044B 60 06            [24] 1245 	jz	00240$
      00044D 7C 31            [12] 1246 	mov	r4,#0x31
      00044F 7D 00            [12] 1247 	mov	r5,#0x00
      000451 80 04            [24] 1248 	sjmp	00241$
      000453                       1249 00240$:
      000453 7C 30            [12] 1250 	mov	r4,#0x30
      000455 7D 00            [12] 1251 	mov	r5,#0x00
      000457                       1252 00241$:
      000457 8C 82            [24] 1253 	mov	dpl,r4
      000459 8D 83            [24] 1254 	mov	dph,r5
      00045B 12r00r00         [24] 1255 	lcall	_putchar
                                   1256 ;	life.c:237: printstr("\r\n");
      00045E 90r00r13         [24] 1257 	mov	dptr,#___str_3
      000461 75 F0 80         [24] 1258 	mov	b,#0x80
      000464 12r00r00         [24] 1259 	lcall	_printstr
      000467 02r01r85         [24] 1260 	ljmp	00127$
      00046A                       1261 00109$:
                                   1262 ;	life.c:238: } else if (c == (int)'S') break;
      00046A BE 53 05         [24] 1263 	cjne	r6,#0x53,00498$
      00046D BF 00 02         [24] 1264 	cjne	r7,#0x00,00498$
      000470 80 03            [24] 1265 	sjmp	00499$
      000472                       1266 00498$:
      000472 02r01r85         [24] 1267 	ljmp	00127$
      000475                       1268 00499$:
                                   1269 ;	life.c:49: gen = 0ul;
      000475 78r0A            [12] 1270 	mov	r0,#_gen
      000477 E4               [12] 1271 	clr	a
      000478 F6               [12] 1272 	mov	@r0,a
      000479 08               [12] 1273 	inc	r0
      00047A F6               [12] 1274 	mov	@r0,a
      00047B 08               [12] 1275 	inc	r0
      00047C F6               [12] 1276 	mov	@r0,a
      00047D 08               [12] 1277 	inc	r0
      00047E F6               [12] 1278 	mov	@r0,a
                                   1279 ;	life.c:50: genc2 = 0ul;
      00047F 78r0E            [12] 1280 	mov	r0,#_genc2
      000481 F6               [12] 1281 	mov	@r0,a
      000482 08               [12] 1282 	inc	r0
      000483 F6               [12] 1283 	mov	@r0,a
      000484 08               [12] 1284 	inc	r0
      000485 F6               [12] 1285 	mov	@r0,a
      000486 08               [12] 1286 	inc	r0
      000487 F6               [12] 1287 	mov	@r0,a
                                   1288 ;	life.c:51: c2set = 0;
      000488 78r12            [12] 1289 	mov	r0,#_c2set
      00048A 76 00            [12] 1290 	mov	@r0,#0x00
                                   1291 ;	life.c:243: for (i1 = 0; !i0 && !i1; ) {
      00048C 78r01            [12] 1292 	mov	r0,#_i1
      00048E 76 00            [12] 1293 	mov	@r0,#0x00
      000490                       1294 00234$:
      000490 78r00            [12] 1295 	mov	r0,#_i0
      000492 E6               [12] 1296 	mov	a,@r0
      000493 60 03            [24] 1297 	jz	00500$
      000495 02r09r73         [24] 1298 	ljmp	00150$
      000498                       1299 00500$:
      000498 78r01            [12] 1300 	mov	r0,#_i1
      00049A E6               [12] 1301 	mov	a,@r0
      00049B 60 03            [24] 1302 	jz	00501$
      00049D 02r09r73         [24] 1303 	ljmp	00150$
      0004A0                       1304 00501$:
                                   1305 ;	life.c:244: if (pruni) show(PRCLR | PRHDR | PRUNI, u);
      0004A0 78r13            [12] 1306 	mov	r0,#_pruni
      0004A2 E6               [12] 1307 	mov	a,@r0
      0004A3 60 19            [24] 1308 	jz	00130$
      0004A5 74r00            [12] 1309 	mov	a,#_u
      0004A7 C0 E0            [24] 1310 	push	acc
      0004A9 74s48            [12] 1311 	mov	a,#(_u >> 8)
      0004AB C0 E0            [24] 1312 	push	acc
      0004AD E4               [12] 1313 	clr	a
      0004AE C0 E0            [24] 1314 	push	acc
      0004B0 75 82 07         [24] 1315 	mov	dpl,#0x07
      0004B3 12r00r20         [24] 1316 	lcall	_show
      0004B6 15 81            [12] 1317 	dec	sp
      0004B8 15 81            [12] 1318 	dec	sp
      0004BA 15 81            [12] 1319 	dec	sp
      0004BC 80 17            [24] 1320 	sjmp	00131$
      0004BE                       1321 00130$:
                                   1322 ;	life.c:245: else show(PRHDR, u);
      0004BE 74r00            [12] 1323 	mov	a,#_u
      0004C0 C0 E0            [24] 1324 	push	acc
      0004C2 74s48            [12] 1325 	mov	a,#(_u >> 8)
      0004C4 C0 E0            [24] 1326 	push	acc
      0004C6 E4               [12] 1327 	clr	a
      0004C7 C0 E0            [24] 1328 	push	acc
      0004C9 75 82 02         [24] 1329 	mov	dpl,#0x02
      0004CC 12r00r20         [24] 1330 	lcall	_show
      0004CF 15 81            [12] 1331 	dec	sp
      0004D1 15 81            [12] 1332 	dec	sp
      0004D3 15 81            [12] 1333 	dec	sp
      0004D5                       1334 00131$:
                                   1335 ;	life.c:57: gen++;
      0004D5 78r0A            [12] 1336 	mov	r0,#_gen
      0004D7 06               [12] 1337 	inc	@r0
      0004D8 B6 00 0C         [24] 1338 	cjne	@r0,#0x00,00503$
      0004DB 08               [12] 1339 	inc	r0
      0004DC 06               [12] 1340 	inc	@r0
      0004DD B6 00 07         [24] 1341 	cjne	@r0,#0x00,00503$
      0004E0 08               [12] 1342 	inc	r0
      0004E1 06               [12] 1343 	inc	@r0
      0004E2 B6 00 02         [24] 1344 	cjne	@r0,#0x00,00503$
      0004E5 08               [12] 1345 	inc	r0
      0004E6 06               [12] 1346 	inc	@r0
      0004E7                       1347 00503$:
                                   1348 ;	life.c:150: fixed = 0;
      0004E7 78r08            [12] 1349 	mov	r0,#_fixed
      0004E9 76 00            [12] 1350 	mov	@r0,#0x00
                                   1351 ;	life.c:151: cycle2 = 0;
      0004EB 78r09            [12] 1352 	mov	r0,#_cycle2
      0004ED 76 00            [12] 1353 	mov	@r0,#0x00
                                   1354 ;	life.c:153: OE76 = OE76_0;
      0004EF 78r02            [12] 1355 	mov	r0,#_OE76
      0004F1 76 3F            [12] 1356 	mov	@r0,#0x3f
                                   1357 ;	life.c:154: flashOE();
      0004F3 12r00r18         [24] 1358 	lcall	_flashOE
                                   1359 ;	life.c:156: for (y = 0; y < H; y++) {
      0004F6 78r05            [12] 1360 	mov	r0,#_y
      0004F8 E4               [12] 1361 	clr	a
      0004F9 F6               [12] 1362 	mov	@r0,a
      0004FA 08               [12] 1363 	inc	r0
      0004FB F6               [12] 1364 	mov	@r0,a
      0004FC                       1365 00230$:
                                   1366 ;	life.c:157: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      0004FC 78r05            [12] 1367 	mov	r0,#_y
      0004FE 86 07            [24] 1368 	mov	ar7,@r0
      000500 53 07 03         [24] 1369 	anl	ar7,#0x03
      000503 EF               [12] 1370 	mov	a,r7
      000504 03               [12] 1371 	rr	a
      000505 03               [12] 1372 	rr	a
      000506 54 C0            [12] 1373 	anl	a,#0xc0
      000508 FF               [12] 1374 	mov	r7,a
      000509 78r02            [12] 1375 	mov	r0,#_OE76
      00050B 74 3F            [12] 1376 	mov	a,#0x3f
      00050D 4F               [12] 1377 	orl	a,r7
      00050E F6               [12] 1378 	mov	@r0,a
                                   1379 ;	life.c:158: flashOE();
      00050F 12r00r18         [24] 1380 	lcall	_flashOE
                                   1381 ;	life.c:159: for (x = 0; x < W; x++) {
      000512 78r03            [12] 1382 	mov	r0,#_x
      000514 E4               [12] 1383 	clr	a
      000515 F6               [12] 1384 	mov	@r0,a
      000516 08               [12] 1385 	inc	r0
      000517 F6               [12] 1386 	mov	@r0,a
      000518                       1387 00228$:
                                   1388 ;	life.c:160: n = -u[A2D(W, y, x)];
      000518 78r05            [12] 1389 	mov	r0,#_y
      00051A E6               [12] 1390 	mov	a,@r0
      00051B C0 E0            [24] 1391 	push	acc
      00051D 08               [12] 1392 	inc	r0
      00051E E6               [12] 1393 	mov	a,@r0
      00051F C0 E0            [24] 1394 	push	acc
      000521 90 00 30         [24] 1395 	mov	dptr,#0x0030
      000524 12r00r00         [24] 1396 	lcall	__mulint
      000527 C8               [12] 1397 	xch	a,r0
      000528 E5*00            [12] 1398 	mov	a,_bp
      00052A 24 04            [12] 1399 	add	a,#0x04
      00052C C8               [12] 1400 	xch	a,r0
      00052D A6 82            [24] 1401 	mov	@r0,dpl
      00052F 08               [12] 1402 	inc	r0
      000530 A6 83            [24] 1403 	mov	@r0,dph
      000532 15 81            [12] 1404 	dec	sp
      000534 15 81            [12] 1405 	dec	sp
      000536 E5*00            [12] 1406 	mov	a,_bp
      000538 24 04            [12] 1407 	add	a,#0x04
      00053A F8               [12] 1408 	mov	r0,a
      00053B 79r03            [12] 1409 	mov	r1,#_x
      00053D E7               [12] 1410 	mov	a,@r1
      00053E 26               [12] 1411 	add	a,@r0
      00053F C0 E0            [24] 1412 	push	acc
      000541 09               [12] 1413 	inc	r1
      000542 E7               [12] 1414 	mov	a,@r1
      000543 08               [12] 1415 	inc	r0
      000544 36               [12] 1416 	addc	a,@r0
      000545 C0 E0            [24] 1417 	push	acc
      000547 E5*00            [12] 1418 	mov	a,_bp
      000549 24 03            [12] 1419 	add	a,#0x03
      00054B F8               [12] 1420 	mov	r0,a
      00054C D0 E0            [24] 1421 	pop	acc
      00054E F6               [12] 1422 	mov	@r0,a
      00054F 18               [12] 1423 	dec	r0
      000550 D0 E0            [24] 1424 	pop	acc
      000552 F6               [12] 1425 	mov	@r0,a
      000553 A8*00            [24] 1426 	mov	r0,_bp
      000555 08               [12] 1427 	inc	r0
      000556 08               [12] 1428 	inc	r0
      000557 E6               [12] 1429 	mov	a,@r0
      000558 24r00            [12] 1430 	add	a,#_u
      00055A F5 82            [12] 1431 	mov	dpl,a
      00055C 08               [12] 1432 	inc	r0
      00055D E6               [12] 1433 	mov	a,@r0
      00055E 34s48            [12] 1434 	addc	a,#(_u >> 8)
      000560 F5 83            [12] 1435 	mov	dph,a
      000562 E0               [24] 1436 	movx	a,@dptr
      000563 FB               [12] 1437 	mov	r3,a
      000564 A8*00            [24] 1438 	mov	r0,_bp
      000566 08               [12] 1439 	inc	r0
      000567 C3               [12] 1440 	clr	c
      000568 E4               [12] 1441 	clr	a
      000569 9B               [12] 1442 	subb	a,r3
      00056A F6               [12] 1443 	mov	@r0,a
                                   1444 ;	life.c:165: UPDN(-1, -1);
      00056B 78r05            [12] 1445 	mov	r0,#_y
      00056D 74 BF            [12] 1446 	mov	a,#0xbf
      00056F 26               [12] 1447 	add	a,@r0
      000570 FA               [12] 1448 	mov	r2,a
      000571 E4               [12] 1449 	clr	a
      000572 08               [12] 1450 	inc	r0
      000573 36               [12] 1451 	addc	a,@r0
      000574 FB               [12] 1452 	mov	r3,a
      000575 74 C0            [12] 1453 	mov	a,#0xc0
      000577 C0 E0            [24] 1454 	push	acc
      000579 E4               [12] 1455 	clr	a
      00057A C0 E0            [24] 1456 	push	acc
      00057C 8A 82            [24] 1457 	mov	dpl,r2
      00057E 8B 83            [24] 1458 	mov	dph,r3
      000580 12r00r00         [24] 1459 	lcall	__modsint
      000583 AA 82            [24] 1460 	mov	r2,dpl
      000585 AB 83            [24] 1461 	mov	r3,dph
      000587 15 81            [12] 1462 	dec	sp
      000589 15 81            [12] 1463 	dec	sp
      00058B C0 02            [24] 1464 	push	ar2
      00058D C0 03            [24] 1465 	push	ar3
      00058F 90 00 30         [24] 1466 	mov	dptr,#0x0030
      000592 12r00r00         [24] 1467 	lcall	__mulint
      000595 AA 82            [24] 1468 	mov	r2,dpl
      000597 AB 83            [24] 1469 	mov	r3,dph
      000599 15 81            [12] 1470 	dec	sp
      00059B 15 81            [12] 1471 	dec	sp
      00059D 78r03            [12] 1472 	mov	r0,#_x
      00059F 74 2F            [12] 1473 	mov	a,#0x2f
      0005A1 26               [12] 1474 	add	a,@r0
      0005A2 FC               [12] 1475 	mov	r4,a
      0005A3 E4               [12] 1476 	clr	a
      0005A4 08               [12] 1477 	inc	r0
      0005A5 36               [12] 1478 	addc	a,@r0
      0005A6 FD               [12] 1479 	mov	r5,a
      0005A7 C0 03            [24] 1480 	push	ar3
      0005A9 C0 02            [24] 1481 	push	ar2
      0005AB 74 30            [12] 1482 	mov	a,#0x30
      0005AD C0 E0            [24] 1483 	push	acc
      0005AF E4               [12] 1484 	clr	a
      0005B0 C0 E0            [24] 1485 	push	acc
      0005B2 8C 82            [24] 1486 	mov	dpl,r4
      0005B4 8D 83            [24] 1487 	mov	dph,r5
      0005B6 12r00r00         [24] 1488 	lcall	__modsint
      0005B9 AC 82            [24] 1489 	mov	r4,dpl
      0005BB AD 83            [24] 1490 	mov	r5,dph
      0005BD 15 81            [12] 1491 	dec	sp
      0005BF 15 81            [12] 1492 	dec	sp
      0005C1 D0 02            [24] 1493 	pop	ar2
      0005C3 D0 03            [24] 1494 	pop	ar3
      0005C5 EC               [12] 1495 	mov	a,r4
      0005C6 2A               [12] 1496 	add	a,r2
      0005C7 FE               [12] 1497 	mov	r6,a
      0005C8 ED               [12] 1498 	mov	a,r5
      0005C9 3B               [12] 1499 	addc	a,r3
      0005CA FF               [12] 1500 	mov	r7,a
      0005CB EE               [12] 1501 	mov	a,r6
      0005CC 24r00            [12] 1502 	add	a,#_u
      0005CE F5 82            [12] 1503 	mov	dpl,a
      0005D0 EF               [12] 1504 	mov	a,r7
      0005D1 34s48            [12] 1505 	addc	a,#(_u >> 8)
      0005D3 F5 83            [12] 1506 	mov	dph,a
      0005D5 E0               [24] 1507 	movx	a,@dptr
      0005D6 FF               [12] 1508 	mov	r7,a
      0005D7 A8*00            [24] 1509 	mov	r0,_bp
      0005D9 08               [12] 1510 	inc	r0
      0005DA EF               [12] 1511 	mov	a,r7
      0005DB 26               [12] 1512 	add	a,@r0
      0005DC F6               [12] 1513 	mov	@r0,a
                                   1514 ;	life.c:166: UPDN(-1, 0);
      0005DD 78r03            [12] 1515 	mov	r0,#_x
      0005DF 74 30            [12] 1516 	mov	a,#0x30
      0005E1 26               [12] 1517 	add	a,@r0
      0005E2 FE               [12] 1518 	mov	r6,a
      0005E3 E4               [12] 1519 	clr	a
      0005E4 08               [12] 1520 	inc	r0
      0005E5 36               [12] 1521 	addc	a,@r0
      0005E6 FF               [12] 1522 	mov	r7,a
      0005E7 C0 05            [24] 1523 	push	ar5
      0005E9 C0 04            [24] 1524 	push	ar4
      0005EB C0 03            [24] 1525 	push	ar3
      0005ED C0 02            [24] 1526 	push	ar2
      0005EF 74 30            [12] 1527 	mov	a,#0x30
      0005F1 C0 E0            [24] 1528 	push	acc
      0005F3 E4               [12] 1529 	clr	a
      0005F4 C0 E0            [24] 1530 	push	acc
      0005F6 8E 82            [24] 1531 	mov	dpl,r6
      0005F8 8F 83            [24] 1532 	mov	dph,r7
      0005FA 12r00r00         [24] 1533 	lcall	__modsint
      0005FD C8               [12] 1534 	xch	a,r0
      0005FE E5*00            [12] 1535 	mov	a,_bp
      000600 24 06            [12] 1536 	add	a,#0x06
      000602 C8               [12] 1537 	xch	a,r0
      000603 A6 82            [24] 1538 	mov	@r0,dpl
      000605 08               [12] 1539 	inc	r0
      000606 A6 83            [24] 1540 	mov	@r0,dph
      000608 15 81            [12] 1541 	dec	sp
      00060A 15 81            [12] 1542 	dec	sp
      00060C D0 02            [24] 1543 	pop	ar2
      00060E D0 03            [24] 1544 	pop	ar3
      000610 E5*00            [12] 1545 	mov	a,_bp
      000612 24 06            [12] 1546 	add	a,#0x06
      000614 F8               [12] 1547 	mov	r0,a
      000615 E6               [12] 1548 	mov	a,@r0
      000616 2A               [12] 1549 	add	a,r2
      000617 FE               [12] 1550 	mov	r6,a
      000618 08               [12] 1551 	inc	r0
      000619 E6               [12] 1552 	mov	a,@r0
      00061A 3B               [12] 1553 	addc	a,r3
      00061B FF               [12] 1554 	mov	r7,a
      00061C EE               [12] 1555 	mov	a,r6
      00061D 24r00            [12] 1556 	add	a,#_u
      00061F F5 82            [12] 1557 	mov	dpl,a
      000621 EF               [12] 1558 	mov	a,r7
      000622 34s48            [12] 1559 	addc	a,#(_u >> 8)
      000624 F5 83            [12] 1560 	mov	dph,a
      000626 E0               [24] 1561 	movx	a,@dptr
      000627 FF               [12] 1562 	mov	r7,a
      000628 A8*00            [24] 1563 	mov	r0,_bp
      00062A 08               [12] 1564 	inc	r0
      00062B EF               [12] 1565 	mov	a,r7
      00062C 26               [12] 1566 	add	a,@r0
      00062D F6               [12] 1567 	mov	@r0,a
                                   1568 ;	life.c:167: UPDN(-1, 1);
      00062E 78r03            [12] 1569 	mov	r0,#_x
      000630 74 31            [12] 1570 	mov	a,#0x31
      000632 26               [12] 1571 	add	a,@r0
      000633 FE               [12] 1572 	mov	r6,a
      000634 E4               [12] 1573 	clr	a
      000635 08               [12] 1574 	inc	r0
      000636 36               [12] 1575 	addc	a,@r0
      000637 FF               [12] 1576 	mov	r7,a
      000638 C0 03            [24] 1577 	push	ar3
      00063A C0 02            [24] 1578 	push	ar2
      00063C 74 30            [12] 1579 	mov	a,#0x30
      00063E C0 E0            [24] 1580 	push	acc
      000640 E4               [12] 1581 	clr	a
      000641 C0 E0            [24] 1582 	push	acc
      000643 8E 82            [24] 1583 	mov	dpl,r6
      000645 8F 83            [24] 1584 	mov	dph,r7
      000647 12r00r00         [24] 1585 	lcall	__modsint
      00064A AE 82            [24] 1586 	mov	r6,dpl
      00064C AF 83            [24] 1587 	mov	r7,dph
      00064E 15 81            [12] 1588 	dec	sp
      000650 15 81            [12] 1589 	dec	sp
      000652 D0 02            [24] 1590 	pop	ar2
      000654 D0 03            [24] 1591 	pop	ar3
      000656 D0 04            [24] 1592 	pop	ar4
      000658 D0 05            [24] 1593 	pop	ar5
      00065A EE               [12] 1594 	mov	a,r6
      00065B 2A               [12] 1595 	add	a,r2
      00065C FA               [12] 1596 	mov	r2,a
      00065D EF               [12] 1597 	mov	a,r7
      00065E 3B               [12] 1598 	addc	a,r3
      00065F FB               [12] 1599 	mov	r3,a
      000660 EA               [12] 1600 	mov	a,r2
      000661 24r00            [12] 1601 	add	a,#_u
      000663 F5 82            [12] 1602 	mov	dpl,a
      000665 EB               [12] 1603 	mov	a,r3
      000666 34s48            [12] 1604 	addc	a,#(_u >> 8)
      000668 F5 83            [12] 1605 	mov	dph,a
      00066A E0               [24] 1606 	movx	a,@dptr
      00066B FB               [12] 1607 	mov	r3,a
      00066C A8*00            [24] 1608 	mov	r0,_bp
      00066E 08               [12] 1609 	inc	r0
      00066F EB               [12] 1610 	mov	a,r3
      000670 26               [12] 1611 	add	a,@r0
      000671 F6               [12] 1612 	mov	@r0,a
                                   1613 ;	life.c:168: UPDN(0, -1);
      000672 78r05            [12] 1614 	mov	r0,#_y
      000674 74 C0            [12] 1615 	mov	a,#0xc0
      000676 26               [12] 1616 	add	a,@r0
      000677 FA               [12] 1617 	mov	r2,a
      000678 E4               [12] 1618 	clr	a
      000679 08               [12] 1619 	inc	r0
      00067A 36               [12] 1620 	addc	a,@r0
      00067B FB               [12] 1621 	mov	r3,a
      00067C C0 07            [24] 1622 	push	ar7
      00067E C0 06            [24] 1623 	push	ar6
      000680 C0 05            [24] 1624 	push	ar5
      000682 C0 04            [24] 1625 	push	ar4
      000684 74 C0            [12] 1626 	mov	a,#0xc0
      000686 C0 E0            [24] 1627 	push	acc
      000688 E4               [12] 1628 	clr	a
      000689 C0 E0            [24] 1629 	push	acc
      00068B 8A 82            [24] 1630 	mov	dpl,r2
      00068D 8B 83            [24] 1631 	mov	dph,r3
      00068F 12r00r00         [24] 1632 	lcall	__modsint
      000692 AA 82            [24] 1633 	mov	r2,dpl
      000694 AB 83            [24] 1634 	mov	r3,dph
      000696 15 81            [12] 1635 	dec	sp
      000698 15 81            [12] 1636 	dec	sp
      00069A C0 02            [24] 1637 	push	ar2
      00069C C0 03            [24] 1638 	push	ar3
      00069E 90 00 30         [24] 1639 	mov	dptr,#0x0030
      0006A1 12r00r00         [24] 1640 	lcall	__mulint
      0006A4 C8               [12] 1641 	xch	a,r0
      0006A5 E5*00            [12] 1642 	mov	a,_bp
      0006A7 24 08            [12] 1643 	add	a,#0x08
      0006A9 C8               [12] 1644 	xch	a,r0
      0006AA A6 82            [24] 1645 	mov	@r0,dpl
      0006AC 08               [12] 1646 	inc	r0
      0006AD A6 83            [24] 1647 	mov	@r0,dph
      0006AF 15 81            [12] 1648 	dec	sp
      0006B1 15 81            [12] 1649 	dec	sp
      0006B3 D0 04            [24] 1650 	pop	ar4
      0006B5 D0 05            [24] 1651 	pop	ar5
      0006B7 D0 06            [24] 1652 	pop	ar6
      0006B9 D0 07            [24] 1653 	pop	ar7
      0006BB E5*00            [12] 1654 	mov	a,_bp
      0006BD 24 08            [12] 1655 	add	a,#0x08
      0006BF F8               [12] 1656 	mov	r0,a
      0006C0 EC               [12] 1657 	mov	a,r4
      0006C1 26               [12] 1658 	add	a,@r0
      0006C2 FA               [12] 1659 	mov	r2,a
      0006C3 ED               [12] 1660 	mov	a,r5
      0006C4 08               [12] 1661 	inc	r0
      0006C5 36               [12] 1662 	addc	a,@r0
      0006C6 FB               [12] 1663 	mov	r3,a
      0006C7 EA               [12] 1664 	mov	a,r2
      0006C8 24r00            [12] 1665 	add	a,#_u
      0006CA F5 82            [12] 1666 	mov	dpl,a
      0006CC EB               [12] 1667 	mov	a,r3
      0006CD 34s48            [12] 1668 	addc	a,#(_u >> 8)
      0006CF F5 83            [12] 1669 	mov	dph,a
      0006D1 E0               [24] 1670 	movx	a,@dptr
      0006D2 FB               [12] 1671 	mov	r3,a
      0006D3 A8*00            [24] 1672 	mov	r0,_bp
      0006D5 08               [12] 1673 	inc	r0
      0006D6 EB               [12] 1674 	mov	a,r3
      0006D7 26               [12] 1675 	add	a,@r0
      0006D8 F6               [12] 1676 	mov	@r0,a
                                   1677 ;	life.c:169: UPDN(0, 0);
      0006D9 E5*00            [12] 1678 	mov	a,_bp
      0006DB 24 08            [12] 1679 	add	a,#0x08
      0006DD F8               [12] 1680 	mov	r0,a
      0006DE E5*00            [12] 1681 	mov	a,_bp
      0006E0 24 06            [12] 1682 	add	a,#0x06
      0006E2 F9               [12] 1683 	mov	r1,a
      0006E3 E7               [12] 1684 	mov	a,@r1
      0006E4 26               [12] 1685 	add	a,@r0
      0006E5 FA               [12] 1686 	mov	r2,a
      0006E6 09               [12] 1687 	inc	r1
      0006E7 E7               [12] 1688 	mov	a,@r1
      0006E8 08               [12] 1689 	inc	r0
      0006E9 36               [12] 1690 	addc	a,@r0
      0006EA FB               [12] 1691 	mov	r3,a
      0006EB EA               [12] 1692 	mov	a,r2
      0006EC 24r00            [12] 1693 	add	a,#_u
      0006EE F5 82            [12] 1694 	mov	dpl,a
      0006F0 EB               [12] 1695 	mov	a,r3
      0006F1 34s48            [12] 1696 	addc	a,#(_u >> 8)
      0006F3 F5 83            [12] 1697 	mov	dph,a
      0006F5 E0               [24] 1698 	movx	a,@dptr
      0006F6 FB               [12] 1699 	mov	r3,a
      0006F7 A8*00            [24] 1700 	mov	r0,_bp
      0006F9 08               [12] 1701 	inc	r0
      0006FA EB               [12] 1702 	mov	a,r3
      0006FB 26               [12] 1703 	add	a,@r0
      0006FC F6               [12] 1704 	mov	@r0,a
                                   1705 ;	life.c:170: UPDN(0, 1);
      0006FD E5*00            [12] 1706 	mov	a,_bp
      0006FF 24 08            [12] 1707 	add	a,#0x08
      000701 F8               [12] 1708 	mov	r0,a
      000702 EE               [12] 1709 	mov	a,r6
      000703 26               [12] 1710 	add	a,@r0
      000704 FA               [12] 1711 	mov	r2,a
      000705 EF               [12] 1712 	mov	a,r7
      000706 08               [12] 1713 	inc	r0
      000707 36               [12] 1714 	addc	a,@r0
      000708 FB               [12] 1715 	mov	r3,a
      000709 EA               [12] 1716 	mov	a,r2
      00070A 24r00            [12] 1717 	add	a,#_u
      00070C F5 82            [12] 1718 	mov	dpl,a
      00070E EB               [12] 1719 	mov	a,r3
      00070F 34s48            [12] 1720 	addc	a,#(_u >> 8)
      000711 F5 83            [12] 1721 	mov	dph,a
      000713 E0               [24] 1722 	movx	a,@dptr
      000714 FB               [12] 1723 	mov	r3,a
      000715 A8*00            [24] 1724 	mov	r0,_bp
      000717 08               [12] 1725 	inc	r0
      000718 E5*00            [12] 1726 	mov	a,_bp
      00071A 24 08            [12] 1727 	add	a,#0x08
      00071C F9               [12] 1728 	mov	r1,a
      00071D EB               [12] 1729 	mov	a,r3
      00071E 26               [12] 1730 	add	a,@r0
      00071F F7               [12] 1731 	mov	@r1,a
                                   1732 ;	life.c:171: UPDN(1, -1);
      000720 78r05            [12] 1733 	mov	r0,#_y
      000722 74 C1            [12] 1734 	mov	a,#0xc1
      000724 26               [12] 1735 	add	a,@r0
      000725 FA               [12] 1736 	mov	r2,a
      000726 E4               [12] 1737 	clr	a
      000727 08               [12] 1738 	inc	r0
      000728 36               [12] 1739 	addc	a,@r0
      000729 FB               [12] 1740 	mov	r3,a
      00072A C0 07            [24] 1741 	push	ar7
      00072C C0 06            [24] 1742 	push	ar6
      00072E C0 05            [24] 1743 	push	ar5
      000730 C0 04            [24] 1744 	push	ar4
      000732 74 C0            [12] 1745 	mov	a,#0xc0
      000734 C0 E0            [24] 1746 	push	acc
      000736 E4               [12] 1747 	clr	a
      000737 C0 E0            [24] 1748 	push	acc
      000739 8A 82            [24] 1749 	mov	dpl,r2
      00073B 8B 83            [24] 1750 	mov	dph,r3
      00073D 12r00r00         [24] 1751 	lcall	__modsint
      000740 AA 82            [24] 1752 	mov	r2,dpl
      000742 AB 83            [24] 1753 	mov	r3,dph
      000744 15 81            [12] 1754 	dec	sp
      000746 15 81            [12] 1755 	dec	sp
      000748 C0 02            [24] 1756 	push	ar2
      00074A C0 03            [24] 1757 	push	ar3
      00074C 90 00 30         [24] 1758 	mov	dptr,#0x0030
      00074F 12r00r00         [24] 1759 	lcall	__mulint
      000752 AA 82            [24] 1760 	mov	r2,dpl
      000754 AB 83            [24] 1761 	mov	r3,dph
      000756 15 81            [12] 1762 	dec	sp
      000758 15 81            [12] 1763 	dec	sp
      00075A D0 04            [24] 1764 	pop	ar4
      00075C D0 05            [24] 1765 	pop	ar5
      00075E D0 06            [24] 1766 	pop	ar6
      000760 D0 07            [24] 1767 	pop	ar7
      000762 EC               [12] 1768 	mov	a,r4
      000763 2A               [12] 1769 	add	a,r2
      000764 FC               [12] 1770 	mov	r4,a
      000765 ED               [12] 1771 	mov	a,r5
      000766 3B               [12] 1772 	addc	a,r3
      000767 FD               [12] 1773 	mov	r5,a
      000768 EC               [12] 1774 	mov	a,r4
      000769 24r00            [12] 1775 	add	a,#_u
      00076B F5 82            [12] 1776 	mov	dpl,a
      00076D ED               [12] 1777 	mov	a,r5
      00076E 34s48            [12] 1778 	addc	a,#(_u >> 8)
      000770 F5 83            [12] 1779 	mov	dph,a
      000772 E0               [24] 1780 	movx	a,@dptr
      000773 FD               [12] 1781 	mov	r5,a
      000774 E5*00            [12] 1782 	mov	a,_bp
      000776 24 08            [12] 1783 	add	a,#0x08
      000778 F8               [12] 1784 	mov	r0,a
      000779 E5*00            [12] 1785 	mov	a,_bp
      00077B 24 08            [12] 1786 	add	a,#0x08
      00077D F9               [12] 1787 	mov	r1,a
      00077E ED               [12] 1788 	mov	a,r5
      00077F 26               [12] 1789 	add	a,@r0
      000780 F7               [12] 1790 	mov	@r1,a
                                   1791 ;	life.c:172: UPDN(1, 0);
      000781 E5*00            [12] 1792 	mov	a,_bp
      000783 24 06            [12] 1793 	add	a,#0x06
      000785 F8               [12] 1794 	mov	r0,a
      000786 E6               [12] 1795 	mov	a,@r0
      000787 2A               [12] 1796 	add	a,r2
      000788 FC               [12] 1797 	mov	r4,a
      000789 08               [12] 1798 	inc	r0
      00078A E6               [12] 1799 	mov	a,@r0
      00078B 3B               [12] 1800 	addc	a,r3
      00078C FD               [12] 1801 	mov	r5,a
      00078D EC               [12] 1802 	mov	a,r4
      00078E 24r00            [12] 1803 	add	a,#_u
      000790 F5 82            [12] 1804 	mov	dpl,a
      000792 ED               [12] 1805 	mov	a,r5
      000793 34s48            [12] 1806 	addc	a,#(_u >> 8)
      000795 F5 83            [12] 1807 	mov	dph,a
      000797 E0               [24] 1808 	movx	a,@dptr
      000798 FD               [12] 1809 	mov	r5,a
      000799 E5*00            [12] 1810 	mov	a,_bp
      00079B 24 08            [12] 1811 	add	a,#0x08
      00079D F8               [12] 1812 	mov	r0,a
      00079E ED               [12] 1813 	mov	a,r5
      00079F 26               [12] 1814 	add	a,@r0
      0007A0 FD               [12] 1815 	mov	r5,a
                                   1816 ;	life.c:173: UPDN(1, 1);
      0007A1 EE               [12] 1817 	mov	a,r6
      0007A2 2A               [12] 1818 	add	a,r2
      0007A3 FE               [12] 1819 	mov	r6,a
      0007A4 EF               [12] 1820 	mov	a,r7
      0007A5 3B               [12] 1821 	addc	a,r3
      0007A6 FF               [12] 1822 	mov	r7,a
      0007A7 EE               [12] 1823 	mov	a,r6
      0007A8 24r00            [12] 1824 	add	a,#_u
      0007AA F5 82            [12] 1825 	mov	dpl,a
      0007AC EF               [12] 1826 	mov	a,r7
      0007AD 34s48            [12] 1827 	addc	a,#(_u >> 8)
      0007AF F5 83            [12] 1828 	mov	dph,a
      0007B1 E0               [24] 1829 	movx	a,@dptr
      0007B2 2D               [12] 1830 	add	a,r5
      0007B3 FF               [12] 1831 	mov	r7,a
      0007B4 78r07            [12] 1832 	mov	r0,#_n
      0007B6 A6 07            [24] 1833 	mov	@r0,ar7
                                   1834 ;	life.c:176: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007B8 A8*00            [24] 1835 	mov	r0,_bp
      0007BA 08               [12] 1836 	inc	r0
      0007BB 08               [12] 1837 	inc	r0
      0007BC E6               [12] 1838 	mov	a,@r0
      0007BD 24r00            [12] 1839 	add	a,#_nu
      0007BF FD               [12] 1840 	mov	r5,a
      0007C0 08               [12] 1841 	inc	r0
      0007C1 E6               [12] 1842 	mov	a,@r0
      0007C2 34s6C            [12] 1843 	addc	a,#(_nu >> 8)
      0007C4 FE               [12] 1844 	mov	r6,a
      0007C5 BF 03 02         [24] 1845 	cjne	r7,#0x03,00504$
      0007C8 80 25            [24] 1846 	sjmp	00243$
      0007CA                       1847 00504$:
      0007CA BF 02 1E         [24] 1848 	cjne	r7,#0x02,00242$
      0007CD E5*00            [12] 1849 	mov	a,_bp
      0007CF 24 04            [12] 1850 	add	a,#0x04
      0007D1 F8               [12] 1851 	mov	r0,a
      0007D2 79r03            [12] 1852 	mov	r1,#_x
      0007D4 E7               [12] 1853 	mov	a,@r1
      0007D5 26               [12] 1854 	add	a,@r0
      0007D6 FC               [12] 1855 	mov	r4,a
      0007D7 09               [12] 1856 	inc	r1
      0007D8 E7               [12] 1857 	mov	a,@r1
      0007D9 08               [12] 1858 	inc	r0
      0007DA 36               [12] 1859 	addc	a,@r0
      0007DB FF               [12] 1860 	mov	r7,a
      0007DC EC               [12] 1861 	mov	a,r4
      0007DD 24r00            [12] 1862 	add	a,#_u
      0007DF FC               [12] 1863 	mov	r4,a
      0007E0 EF               [12] 1864 	mov	a,r7
      0007E1 34s48            [12] 1865 	addc	a,#(_u >> 8)
      0007E3 FF               [12] 1866 	mov	r7,a
      0007E4 8C 82            [24] 1867 	mov	dpl,r4
      0007E6 8F 83            [24] 1868 	mov	dph,r7
      0007E8 E0               [24] 1869 	movx	a,@dptr
      0007E9 70 04            [24] 1870 	jnz	00243$
      0007EB                       1871 00242$:
                                   1872 ;	assignBit
      0007EB C2*00            [12] 1873 	clr	b0
      0007ED 80 02            [24] 1874 	sjmp	00244$
      0007EF                       1875 00243$:
                                   1876 ;	assignBit
      0007EF D2*00            [12] 1877 	setb	b0
      0007F1                       1878 00244$:
      0007F1 A2*00            [12] 1879 	mov	c,b0
      0007F3 E4               [12] 1880 	clr	a
      0007F4 33               [12] 1881 	rlc	a
      0007F5 8D 82            [24] 1882 	mov	dpl,r5
      0007F7 8E 83            [24] 1883 	mov	dph,r6
      0007F9 F0               [24] 1884 	movx	@dptr,a
                                   1885 ;	life.c:177: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0007FA 78r05            [12] 1886 	mov	r0,#_y
      0007FC E6               [12] 1887 	mov	a,@r0
      0007FD C0 E0            [24] 1888 	push	acc
      0007FF 08               [12] 1889 	inc	r0
      000800 E6               [12] 1890 	mov	a,@r0
      000801 C0 E0            [24] 1891 	push	acc
      000803 90 00 30         [24] 1892 	mov	dptr,#0x0030
      000806 12r00r00         [24] 1893 	lcall	__mulint
      000809 AE 82            [24] 1894 	mov	r6,dpl
      00080B AF 83            [24] 1895 	mov	r7,dph
      00080D 15 81            [12] 1896 	dec	sp
      00080F 15 81            [12] 1897 	dec	sp
      000811 78r03            [12] 1898 	mov	r0,#_x
      000813 E6               [12] 1899 	mov	a,@r0
      000814 2E               [12] 1900 	add	a,r6
      000815 FE               [12] 1901 	mov	r6,a
      000816 08               [12] 1902 	inc	r0
      000817 E6               [12] 1903 	mov	a,@r0
      000818 3F               [12] 1904 	addc	a,r7
      000819 FF               [12] 1905 	mov	r7,a
      00081A EE               [12] 1906 	mov	a,r6
      00081B 24r00            [12] 1907 	add	a,#_pu
      00081D F5 82            [12] 1908 	mov	dpl,a
      00081F EF               [12] 1909 	mov	a,r7
      000820 34s24            [12] 1910 	addc	a,#(_pu >> 8)
      000822 F5 83            [12] 1911 	mov	dph,a
      000824 E0               [24] 1912 	movx	a,@dptr
      000825 FD               [12] 1913 	mov	r5,a
      000826 EE               [12] 1914 	mov	a,r6
      000827 24r00            [12] 1915 	add	a,#_nu
      000829 F5 82            [12] 1916 	mov	dpl,a
      00082B EF               [12] 1917 	mov	a,r7
      00082C 34s6C            [12] 1918 	addc	a,#(_nu >> 8)
      00082E F5 83            [12] 1919 	mov	dph,a
      000830 E0               [24] 1920 	movx	a,@dptr
      000831 FC               [12] 1921 	mov	r4,a
      000832 6D               [12] 1922 	xrl	a,r5
      000833 78r09            [12] 1923 	mov	r0,#_cycle2
      000835 46               [12] 1924 	orl	a,@r0
      000836 F6               [12] 1925 	mov	@r0,a
                                   1926 ;	life.c:178: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000837 EE               [12] 1927 	mov	a,r6
      000838 24r00            [12] 1928 	add	a,#_u
      00083A F5 82            [12] 1929 	mov	dpl,a
      00083C EF               [12] 1930 	mov	a,r7
      00083D 34s48            [12] 1931 	addc	a,#(_u >> 8)
      00083F F5 83            [12] 1932 	mov	dph,a
      000841 E0               [24] 1933 	movx	a,@dptr
      000842 FF               [12] 1934 	mov	r7,a
      000843 EC               [12] 1935 	mov	a,r4
      000844 6F               [12] 1936 	xrl	a,r7
      000845 78r08            [12] 1937 	mov	r0,#_fixed
      000847 46               [12] 1938 	orl	a,@r0
      000848 F6               [12] 1939 	mov	@r0,a
                                   1940 ;	life.c:159: for (x = 0; x < W; x++) {
      000849 78r03            [12] 1941 	mov	r0,#_x
      00084B 06               [12] 1942 	inc	@r0
      00084C B6 00 02         [24] 1943 	cjne	@r0,#0x00,00508$
      00084F 08               [12] 1944 	inc	r0
      000850 06               [12] 1945 	inc	@r0
      000851                       1946 00508$:
      000851 78r03            [12] 1947 	mov	r0,#_x
      000853 C3               [12] 1948 	clr	c
      000854 E6               [12] 1949 	mov	a,@r0
      000855 94 30            [12] 1950 	subb	a,#0x30
      000857 08               [12] 1951 	inc	r0
      000858 E6               [12] 1952 	mov	a,@r0
      000859 64 80            [12] 1953 	xrl	a,#0x80
      00085B 94 80            [12] 1954 	subb	a,#0x80
      00085D 50 03            [24] 1955 	jnc	00509$
      00085F 02r05r18         [24] 1956 	ljmp	00228$
      000862                       1957 00509$:
                                   1958 ;	life.c:156: for (y = 0; y < H; y++) {
      000862 78r05            [12] 1959 	mov	r0,#_y
      000864 06               [12] 1960 	inc	@r0
      000865 B6 00 02         [24] 1961 	cjne	@r0,#0x00,00510$
      000868 08               [12] 1962 	inc	r0
      000869 06               [12] 1963 	inc	@r0
      00086A                       1964 00510$:
      00086A 78r05            [12] 1965 	mov	r0,#_y
      00086C C3               [12] 1966 	clr	c
      00086D E6               [12] 1967 	mov	a,@r0
      00086E 94 C0            [12] 1968 	subb	a,#0xc0
      000870 08               [12] 1969 	inc	r0
      000871 E6               [12] 1970 	mov	a,@r0
      000872 64 80            [12] 1971 	xrl	a,#0x80
      000874 94 80            [12] 1972 	subb	a,#0x80
      000876 50 03            [24] 1973 	jnc	00511$
      000878 02r04rFC         [24] 1974 	ljmp	00230$
      00087B                       1975 00511$:
                                   1976 ;	life.c:182: OE76 = OE76_0;
      00087B 78r02            [12] 1977 	mov	r0,#_OE76
      00087D 76 3F            [12] 1978 	mov	@r0,#0x3f
                                   1979 ;	life.c:183: flashOE();
      00087F 12r00r18         [24] 1980 	lcall	_flashOE
                                   1981 ;	life.c:185: cycle2 = !cycle2;
      000882 78r09            [12] 1982 	mov	r0,#_cycle2
      000884 E6               [12] 1983 	mov	a,@r0
      000885 B4 01 00         [24] 1984 	cjne	a,#0x01,00512$
      000888                       1985 00512$:
      000888 92*00            [24] 1986 	mov	b0,c
      00088A 78r09            [12] 1987 	mov	r0,#_cycle2
      00088C E4               [12] 1988 	clr	a
      00088D 33               [12] 1989 	rlc	a
      00088E F6               [12] 1990 	mov	@r0,a
                                   1991 ;	life.c:186: fixed = !fixed;
      00088F 78r08            [12] 1992 	mov	r0,#_fixed
      000891 E6               [12] 1993 	mov	a,@r0
      000892 B4 01 00         [24] 1994 	cjne	a,#0x01,00513$
      000895                       1995 00513$:
      000895 92*00            [24] 1996 	mov	b0,c
      000897 78r08            [12] 1997 	mov	r0,#_fixed
      000899 E4               [12] 1998 	clr	a
      00089A 33               [12] 1999 	rlc	a
      00089B F6               [12] 2000 	mov	@r0,a
                                   2001 ;	life.c:188: memcpy(pu, u, sizeof (u));
      00089C E4               [12] 2002 	clr	a
      00089D C0 E0            [24] 2003 	push	acc
      00089F 74 24            [12] 2004 	mov	a,#0x24
      0008A1 C0 E0            [24] 2005 	push	acc
      0008A3 74r00            [12] 2006 	mov	a,#_u
      0008A5 C0 E0            [24] 2007 	push	acc
      0008A7 74s48            [12] 2008 	mov	a,#(_u >> 8)
      0008A9 C0 E0            [24] 2009 	push	acc
      0008AB E4               [12] 2010 	clr	a
      0008AC C0 E0            [24] 2011 	push	acc
      0008AE 90r24r00         [24] 2012 	mov	dptr,#_pu
      0008B1 75 F0 00         [24] 2013 	mov	b,#0x00
      0008B4 12r00r00         [24] 2014 	lcall	___memcpy
      0008B7 E5 81            [12] 2015 	mov	a,sp
      0008B9 24 FB            [12] 2016 	add	a,#0xfb
      0008BB F5 81            [12] 2017 	mov	sp,a
                                   2018 ;	life.c:189: memcpy(u, nu, sizeof (nu));
      0008BD E4               [12] 2019 	clr	a
      0008BE C0 E0            [24] 2020 	push	acc
      0008C0 74 24            [12] 2021 	mov	a,#0x24
      0008C2 C0 E0            [24] 2022 	push	acc
      0008C4 74r00            [12] 2023 	mov	a,#_nu
      0008C6 C0 E0            [24] 2024 	push	acc
      0008C8 74s6C            [12] 2025 	mov	a,#(_nu >> 8)
      0008CA C0 E0            [24] 2026 	push	acc
      0008CC E4               [12] 2027 	clr	a
      0008CD C0 E0            [24] 2028 	push	acc
      0008CF 90r48r00         [24] 2029 	mov	dptr,#_u
      0008D2 75 F0 00         [24] 2030 	mov	b,#0x00
      0008D5 12r00r00         [24] 2031 	lcall	___memcpy
      0008D8 E5 81            [12] 2032 	mov	a,sp
      0008DA 24 FB            [12] 2033 	add	a,#0xfb
      0008DC F5 81            [12] 2034 	mov	sp,a
                                   2035 ;	life.c:248: if (fixed || cycle2) {
      0008DE 78r08            [12] 2036 	mov	r0,#_fixed
      0008E0 E6               [12] 2037 	mov	a,@r0
      0008E1 70 05            [24] 2038 	jnz	00137$
      0008E3 78r09            [12] 2039 	mov	r0,#_cycle2
      0008E5 E6               [12] 2040 	mov	a,@r0
      0008E6 60 33            [24] 2041 	jz	00138$
      0008E8                       2042 00137$:
                                   2043 ;	life.c:249: if (fixed) {
      0008E8 78r08            [12] 2044 	mov	r0,#_fixed
      0008EA E6               [12] 2045 	mov	a,@r0
      0008EB 60 0B            [24] 2046 	jz	00135$
                                   2047 ;	life.c:250: printstr("FIXED\r\n");
      0008ED 90r00r63         [24] 2048 	mov	dptr,#___str_12
      0008F0 75 F0 80         [24] 2049 	mov	b,#0x80
      0008F3 12r00r00         [24] 2050 	lcall	_printstr
                                   2051 ;	life.c:251: break;
      0008F6 80 7B            [24] 2052 	sjmp	00150$
      0008F8                       2053 00135$:
                                   2054 ;	life.c:252: } else if (!c2set) {
      0008F8 78r12            [12] 2055 	mov	r0,#_c2set
      0008FA E6               [12] 2056 	mov	a,@r0
      0008FB 70 1E            [24] 2057 	jnz	00138$
                                   2058 ;	life.c:253: genc2 = gen;
      0008FD 78r0A            [12] 2059 	mov	r0,#_gen
      0008FF 86 04            [24] 2060 	mov	ar4,@r0
      000901 08               [12] 2061 	inc	r0
      000902 86 05            [24] 2062 	mov	ar5,@r0
      000904 08               [12] 2063 	inc	r0
      000905 86 06            [24] 2064 	mov	ar6,@r0
      000907 08               [12] 2065 	inc	r0
      000908 86 07            [24] 2066 	mov	ar7,@r0
      00090A 78r0E            [12] 2067 	mov	r0,#_genc2
      00090C A6 04            [24] 2068 	mov	@r0,ar4
      00090E 08               [12] 2069 	inc	r0
      00090F A6 05            [24] 2070 	mov	@r0,ar5
      000911 08               [12] 2071 	inc	r0
      000912 A6 06            [24] 2072 	mov	@r0,ar6
      000914 08               [12] 2073 	inc	r0
      000915 A6 07            [24] 2074 	mov	@r0,ar7
                                   2075 ;	life.c:254: c2set = 1;
      000917 78r12            [12] 2076 	mov	r0,#_c2set
      000919 76 01            [12] 2077 	mov	@r0,#0x01
      00091B                       2078 00138$:
                                   2079 ;	life.c:258: c = getchar_poll();
      00091B 12r00r00         [24] 2080 	lcall	_getchar_poll
      00091E AE 82            [24] 2081 	mov	r6,dpl
      000920 AF 83            [24] 2082 	mov	r7,dph
                                   2083 ;	life.c:259: if (c > 0) {
      000922 C3               [12] 2084 	clr	c
      000923 E4               [12] 2085 	clr	a
      000924 9E               [12] 2086 	subb	a,r6
      000925 74 80            [12] 2087 	mov	a,#(0x00 ^ 0x80)
      000927 8F F0            [24] 2088 	mov	b,r7
      000929 63 F0 80         [24] 2089 	xrl	b,#0x80
      00092C 95 F0            [12] 2090 	subb	a,b
      00092E 40 03            [24] 2091 	jc	00518$
      000930 02r04r90         [24] 2092 	ljmp	00234$
      000933                       2093 00518$:
                                   2094 ;	life.c:260: c = toupper(c);
      000933 8E 82            [24] 2095 	mov	dpl,r6
      000935 8F 83            [24] 2096 	mov	dph,r7
      000937 12r00r00         [24] 2097 	lcall	_toupper
      00093A AE 82            [24] 2098 	mov	r6,dpl
      00093C AF 83            [24] 2099 	mov	r7,dph
                                   2100 ;	life.c:261: if (c == (int)'U') pruni = !pruni;
      00093E BE 55 13         [24] 2101 	cjne	r6,#0x55,00146$
      000941 BF 00 10         [24] 2102 	cjne	r7,#0x00,00146$
      000944 78r13            [12] 2103 	mov	r0,#_pruni
      000946 E6               [12] 2104 	mov	a,@r0
      000947 B4 01 00         [24] 2105 	cjne	a,#0x01,00521$
      00094A                       2106 00521$:
      00094A 92*00            [24] 2107 	mov	b0,c
      00094C 78r13            [12] 2108 	mov	r0,#_pruni
      00094E E4               [12] 2109 	clr	a
      00094F 33               [12] 2110 	rlc	a
      000950 F6               [12] 2111 	mov	@r0,a
      000951 02r04r90         [24] 2112 	ljmp	00234$
      000954                       2113 00146$:
                                   2114 ;	life.c:262: else if (c == (int)'T') i0 = 1;
      000954 BE 54 0A         [24] 2115 	cjne	r6,#0x54,00143$
      000957 BF 00 07         [24] 2116 	cjne	r7,#0x00,00143$
      00095A 78r00            [12] 2117 	mov	r0,#_i0
      00095C 76 01            [12] 2118 	mov	@r0,#0x01
      00095E 02r04r90         [24] 2119 	ljmp	00234$
      000961                       2120 00143$:
                                   2121 ;	life.c:263: else if (c == (int)'B') i1 = 1;
      000961 BE 42 05         [24] 2122 	cjne	r6,#0x42,00524$
      000964 BF 00 02         [24] 2123 	cjne	r7,#0x00,00524$
      000967 80 03            [24] 2124 	sjmp	00525$
      000969                       2125 00524$:
      000969 02r04r90         [24] 2126 	ljmp	00234$
      00096C                       2127 00525$:
      00096C 78r01            [12] 2128 	mov	r0,#_i1
      00096E 76 01            [12] 2129 	mov	@r0,#0x01
      000970 02r04r90         [24] 2130 	ljmp	00234$
      000973                       2131 00150$:
                                   2132 ;	life.c:267: if (i1) printstr("BREAK\r\n");
      000973 78r01            [12] 2133 	mov	r0,#_i1
      000975 E6               [12] 2134 	mov	a,@r0
      000976 60 09            [24] 2135 	jz	00237$
      000978 90r00r6B         [24] 2136 	mov	dptr,#___str_13
      00097B 75 F0 80         [24] 2137 	mov	b,#0x80
      00097E 12r00r00         [24] 2138 	lcall	_printstr
      000981                       2139 00237$:
                                   2140 ;	life.c:218: for (i0 = 0; !i0; ) {
      000981 78r00            [12] 2141 	mov	r0,#_i0
      000983 E6               [12] 2142 	mov	a,@r0
      000984 70 03            [24] 2143 	jnz	00527$
      000986 02r01r81         [24] 2144 	ljmp	00236$
      000989                       2145 00527$:
                                   2146 ;	life.c:270: term:
      000989                       2147 00154$:
                                   2148 ;	life.c:271: EA = 0;
                                   2149 ;	assignBit
      000989 C2 AF            [12] 2150 	clr	_EA
                                   2151 ;	life.c:272: printstr("TERM\r\n");
      00098B 90r00r73         [24] 2152 	mov	dptr,#___str_14
      00098E 75 F0 80         [24] 2153 	mov	b,#0x80
      000991 12r00r00         [24] 2154 	lcall	_printstr
                                   2155 ;	life.c:274: PCON |= 2;
      000994 43 87 02         [24] 2156 	orl	_PCON,#0x02
                                   2157 ;	life.c:276: return;
                                   2158 ;	life.c:277: }
      000997 85*00 81         [24] 2159 	mov	sp,_bp
      00099A D0*00            [24] 2160 	pop	_bp
      00099C 22               [24] 2161 	ret
                                   2162 	.area CSEG    (CODE)
                                   2163 	.area CONST   (CODE)
                                   2164 	.area CONST   (CODE)
      000000                       2165 ___str_0:
      000000 1B                    2166 	.db 0x1b
      000001 5B 32 4A              2167 	.ascii "[2J"
      000004 00                    2168 	.db 0x00
                                   2169 	.area CSEG    (CODE)
                                   2170 	.area CONST   (CODE)
      000005                       2171 ___str_1:
      000005 47 45 4E 20           2172 	.ascii "GEN "
      000009 00                    2173 	.db 0x00
                                   2174 	.area CSEG    (CODE)
                                   2175 	.area CONST   (CODE)
      00000A                       2176 ___str_2:
      00000A 20 43 59 43 4C 45 32  2177 	.ascii " CYCLE2 "
             20
      000012 00                    2178 	.db 0x00
                                   2179 	.area CSEG    (CODE)
                                   2180 	.area CONST   (CODE)
      000013                       2181 ___str_3:
      000013 0D                    2182 	.db 0x0d
      000014 0A                    2183 	.db 0x0a
      000015 00                    2184 	.db 0x00
                                   2185 	.area CSEG    (CODE)
                                   2186 	.area CONST   (CODE)
      000016                       2187 ___str_4:
      000016 1B                    2188 	.db 0x1b
      000017 5B 3F 32 35 6C        2189 	.ascii "[?25l"
      00001C 00                    2190 	.db 0x00
                                   2191 	.area CSEG    (CODE)
                                   2192 	.area CONST   (CODE)
      00001D                       2193 ___str_5:
      00001D 1B                    2194 	.db 0x1b
      00001E 5B 3F 32 35 68        2195 	.ascii "[?25h"
      000023 00                    2196 	.db 0x00
                                   2197 	.area CSEG    (CODE)
                                   2198 	.area CONST   (CODE)
      000024                       2199 ___str_6:
      000024 4C 4F 41 44 20 30 20  2200 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000032 00                    2201 	.db 0x00
                                   2202 	.area CSEG    (CODE)
                                   2203 	.area CONST   (CODE)
      000033                       2204 ___str_7:
      000033 3E                    2205 	.ascii ">"
      000034 0D                    2206 	.db 0x0d
      000035 0A                    2207 	.db 0x0a
      000036 00                    2208 	.db 0x00
                                   2209 	.area CSEG    (CODE)
                                   2210 	.area CONST   (CODE)
      000037                       2211 ___str_8:
      000037 52 41 4E 44 4F 4D     2212 	.ascii "RANDOM"
      00003D 00                    2213 	.db 0x00
                                   2214 	.area CSEG    (CODE)
                                   2215 	.area CONST   (CODE)
      00003E                       2216 ___str_9:
      00003E 1B                    2217 	.db 0x1b
      00003F 5B 3F 32 35 68        2218 	.ascii "[?25h"
      000044 1B                    2219 	.db 0x1b
      000045 5B 6D                 2220 	.ascii "[m"
      000047 00                    2221 	.db 0x00
                                   2222 	.area CSEG    (CODE)
                                   2223 	.area CONST   (CODE)
      000048                       2224 ___str_10:
      000048 4C 49 46 45 20 49 20  2225 	.ascii "LIFE I L R O P S U B T"
             4C 20 52 20 4F 20 50
             20 53 20 55 20 42 20
             54
      00005E 0D                    2226 	.db 0x0d
      00005F 0A                    2227 	.db 0x0a
      000060 00                    2228 	.db 0x00
                                   2229 	.area CSEG    (CODE)
                                   2230 	.area CONST   (CODE)
      000061                       2231 ___str_11:
      000061 55                    2232 	.ascii "U"
      000062 00                    2233 	.db 0x00
                                   2234 	.area CSEG    (CODE)
                                   2235 	.area CONST   (CODE)
      000063                       2236 ___str_12:
      000063 46 49 58 45 44        2237 	.ascii "FIXED"
      000068 0D                    2238 	.db 0x0d
      000069 0A                    2239 	.db 0x0a
      00006A 00                    2240 	.db 0x00
                                   2241 	.area CSEG    (CODE)
                                   2242 	.area CONST   (CODE)
      00006B                       2243 ___str_13:
      00006B 42 52 45 41 4B        2244 	.ascii "BREAK"
      000070 0D                    2245 	.db 0x0d
      000071 0A                    2246 	.db 0x0a
      000072 00                    2247 	.db 0x00
                                   2248 	.area CSEG    (CODE)
                                   2249 	.area CONST   (CODE)
      000073                       2250 ___str_14:
      000073 54 45 52 4D           2251 	.ascii "TERM"
      000077 0D                    2252 	.db 0x0d
      000078 0A                    2253 	.db 0x0a
      000079 00                    2254 	.db 0x00
                                   2255 	.area CSEG    (CODE)
                                   2256 	.area XINIT   (CODE)
                                   2257 	.area CABS    (ABS,CODE)
