                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int1
                                     13 	.globl _int0
                                     14 	.globl _printf
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _FL
                                     22 	.globl _P
                                     23 	.globl _TF2
                                     24 	.globl _EXF2
                                     25 	.globl _RCLK
                                     26 	.globl _TCLK
                                     27 	.globl _EXEN2
                                     28 	.globl _TR2
                                     29 	.globl _C_T2
                                     30 	.globl _CP_RL2
                                     31 	.globl _T2CON_7
                                     32 	.globl _T2CON_6
                                     33 	.globl _T2CON_5
                                     34 	.globl _T2CON_4
                                     35 	.globl _T2CON_3
                                     36 	.globl _T2CON_2
                                     37 	.globl _T2CON_1
                                     38 	.globl _T2CON_0
                                     39 	.globl _PT2
                                     40 	.globl _PS
                                     41 	.globl _PT1
                                     42 	.globl _PX1
                                     43 	.globl _PT0
                                     44 	.globl _PX0
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _EA
                                     62 	.globl _ET2
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _T2EX
                                     85 	.globl _T2
                                     86 	.globl _P1_7
                                     87 	.globl _P1_6
                                     88 	.globl _P1_5
                                     89 	.globl _P1_4
                                     90 	.globl _P1_3
                                     91 	.globl _P1_2
                                     92 	.globl _P1_1
                                     93 	.globl _P1_0
                                     94 	.globl _TF1
                                     95 	.globl _TR1
                                     96 	.globl _TF0
                                     97 	.globl _TR0
                                     98 	.globl _IE1
                                     99 	.globl _IT1
                                    100 	.globl _IE0
                                    101 	.globl _IT0
                                    102 	.globl _P0_7
                                    103 	.globl _P0_6
                                    104 	.globl _P0_5
                                    105 	.globl _P0_4
                                    106 	.globl _P0_3
                                    107 	.globl _P0_2
                                    108 	.globl _P0_1
                                    109 	.globl _P0_0
                                    110 	.globl _B
                                    111 	.globl _A
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _TH2
                                    115 	.globl _TL2
                                    116 	.globl _RCAP2H
                                    117 	.globl _RCAP2L
                                    118 	.globl _T2MOD
                                    119 	.globl _T2CON
                                    120 	.globl _IP
                                    121 	.globl _P3
                                    122 	.globl _IE
                                    123 	.globl _P2
                                    124 	.globl _SBUF
                                    125 	.globl _SCON
                                    126 	.globl _P1
                                    127 	.globl _TH1
                                    128 	.globl _TH0
                                    129 	.globl _TL1
                                    130 	.globl _TL0
                                    131 	.globl _TMOD
                                    132 	.globl _TCON
                                    133 	.globl _PCON
                                    134 	.globl _DPH
                                    135 	.globl _DPL
                                    136 	.globl _SP
                                    137 	.globl _P0
                                    138 	.globl _c
                                    139 	.globl _cycle2
                                    140 	.globl _fixed
                                    141 	.globl _j
                                    142 	.globl _generation
                                    143 	.globl _n
                                    144 	.globl _y1
                                    145 	.globl _x1
                                    146 	.globl _y
                                    147 	.globl _x
                                    148 	.globl _nu
                                    149 	.globl _u
                                    150 	.globl _pu
                                    151 	.globl _i1
                                    152 	.globl _i0
                                    153 	.globl _putchar
                                    154 	.globl _getchar
                                    155 ;--------------------------------------------------------
                                    156 ; special function registers
                                    157 ;--------------------------------------------------------
                                    158 	.area RSEG    (ABS,DATA)
      000000                        159 	.org 0x0000
                           000080   160 _P0	=	0x0080
                           000081   161 _SP	=	0x0081
                           000082   162 _DPL	=	0x0082
                           000083   163 _DPH	=	0x0083
                           000087   164 _PCON	=	0x0087
                           000088   165 _TCON	=	0x0088
                           000089   166 _TMOD	=	0x0089
                           00008A   167 _TL0	=	0x008a
                           00008B   168 _TL1	=	0x008b
                           00008C   169 _TH0	=	0x008c
                           00008D   170 _TH1	=	0x008d
                           000090   171 _P1	=	0x0090
                           000098   172 _SCON	=	0x0098
                           000099   173 _SBUF	=	0x0099
                           0000A0   174 _P2	=	0x00a0
                           0000A8   175 _IE	=	0x00a8
                           0000B0   176 _P3	=	0x00b0
                           0000B8   177 _IP	=	0x00b8
                           0000C8   178 _T2CON	=	0x00c8
                           0000C9   179 _T2MOD	=	0x00c9
                           0000CA   180 _RCAP2L	=	0x00ca
                           0000CB   181 _RCAP2H	=	0x00cb
                           0000CC   182 _TL2	=	0x00cc
                           0000CD   183 _TH2	=	0x00cd
                           0000D0   184 _PSW	=	0x00d0
                           0000E0   185 _ACC	=	0x00e0
                           0000E0   186 _A	=	0x00e0
                           0000F0   187 _B	=	0x00f0
                                    188 ;--------------------------------------------------------
                                    189 ; special function bits
                                    190 ;--------------------------------------------------------
                                    191 	.area RSEG    (ABS,DATA)
      000000                        192 	.org 0x0000
                           000080   193 _P0_0	=	0x0080
                           000081   194 _P0_1	=	0x0081
                           000082   195 _P0_2	=	0x0082
                           000083   196 _P0_3	=	0x0083
                           000084   197 _P0_4	=	0x0084
                           000085   198 _P0_5	=	0x0085
                           000086   199 _P0_6	=	0x0086
                           000087   200 _P0_7	=	0x0087
                           000088   201 _IT0	=	0x0088
                           000089   202 _IE0	=	0x0089
                           00008A   203 _IT1	=	0x008a
                           00008B   204 _IE1	=	0x008b
                           00008C   205 _TR0	=	0x008c
                           00008D   206 _TF0	=	0x008d
                           00008E   207 _TR1	=	0x008e
                           00008F   208 _TF1	=	0x008f
                           000090   209 _P1_0	=	0x0090
                           000091   210 _P1_1	=	0x0091
                           000092   211 _P1_2	=	0x0092
                           000093   212 _P1_3	=	0x0093
                           000094   213 _P1_4	=	0x0094
                           000095   214 _P1_5	=	0x0095
                           000096   215 _P1_6	=	0x0096
                           000097   216 _P1_7	=	0x0097
                           000090   217 _T2	=	0x0090
                           000091   218 _T2EX	=	0x0091
                           000098   219 _RI	=	0x0098
                           000099   220 _TI	=	0x0099
                           00009A   221 _RB8	=	0x009a
                           00009B   222 _TB8	=	0x009b
                           00009C   223 _REN	=	0x009c
                           00009D   224 _SM2	=	0x009d
                           00009E   225 _SM1	=	0x009e
                           00009F   226 _SM0	=	0x009f
                           0000A0   227 _P2_0	=	0x00a0
                           0000A1   228 _P2_1	=	0x00a1
                           0000A2   229 _P2_2	=	0x00a2
                           0000A3   230 _P2_3	=	0x00a3
                           0000A4   231 _P2_4	=	0x00a4
                           0000A5   232 _P2_5	=	0x00a5
                           0000A6   233 _P2_6	=	0x00a6
                           0000A7   234 _P2_7	=	0x00a7
                           0000A8   235 _EX0	=	0x00a8
                           0000A9   236 _ET0	=	0x00a9
                           0000AA   237 _EX1	=	0x00aa
                           0000AB   238 _ET1	=	0x00ab
                           0000AC   239 _ES	=	0x00ac
                           0000AD   240 _ET2	=	0x00ad
                           0000AF   241 _EA	=	0x00af
                           0000B0   242 _P3_0	=	0x00b0
                           0000B1   243 _P3_1	=	0x00b1
                           0000B2   244 _P3_2	=	0x00b2
                           0000B3   245 _P3_3	=	0x00b3
                           0000B4   246 _P3_4	=	0x00b4
                           0000B5   247 _P3_5	=	0x00b5
                           0000B6   248 _P3_6	=	0x00b6
                           0000B7   249 _P3_7	=	0x00b7
                           0000B0   250 _RXD	=	0x00b0
                           0000B1   251 _TXD	=	0x00b1
                           0000B2   252 _INT0	=	0x00b2
                           0000B3   253 _INT1	=	0x00b3
                           0000B4   254 _T0	=	0x00b4
                           0000B5   255 _T1	=	0x00b5
                           0000B6   256 _WR	=	0x00b6
                           0000B7   257 _RD	=	0x00b7
                           0000B8   258 _PX0	=	0x00b8
                           0000B9   259 _PT0	=	0x00b9
                           0000BA   260 _PX1	=	0x00ba
                           0000BB   261 _PT1	=	0x00bb
                           0000BC   262 _PS	=	0x00bc
                           0000BD   263 _PT2	=	0x00bd
                           0000C8   264 _T2CON_0	=	0x00c8
                           0000C9   265 _T2CON_1	=	0x00c9
                           0000CA   266 _T2CON_2	=	0x00ca
                           0000CB   267 _T2CON_3	=	0x00cb
                           0000CC   268 _T2CON_4	=	0x00cc
                           0000CD   269 _T2CON_5	=	0x00cd
                           0000CE   270 _T2CON_6	=	0x00ce
                           0000CF   271 _T2CON_7	=	0x00cf
                           0000C8   272 _CP_RL2	=	0x00c8
                           0000C9   273 _C_T2	=	0x00c9
                           0000CA   274 _TR2	=	0x00ca
                           0000CB   275 _EXEN2	=	0x00cb
                           0000CC   276 _TCLK	=	0x00cc
                           0000CD   277 _RCLK	=	0x00cd
                           0000CE   278 _EXF2	=	0x00ce
                           0000CF   279 _TF2	=	0x00cf
                           0000D0   280 _P	=	0x00d0
                           0000D1   281 _FL	=	0x00d1
                           0000D2   282 _OV	=	0x00d2
                           0000D3   283 _RS0	=	0x00d3
                           0000D4   284 _RS1	=	0x00d4
                           0000D5   285 _F0	=	0x00d5
                           0000D6   286 _AC	=	0x00d6
                           0000D7   287 _CY	=	0x00d7
                                    288 ;--------------------------------------------------------
                                    289 ; overlayable register banks
                                    290 ;--------------------------------------------------------
                                    291 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        292 	.ds 8
                                    293 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        294 	.ds 8
                                    295 ;--------------------------------------------------------
                                    296 ; overlayable bit register bank
                                    297 ;--------------------------------------------------------
                                    298 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        299 bits:
      000000                        300 	.ds 1
                           008000   301 	b0 = bits[0]
                           008100   302 	b1 = bits[1]
                           008200   303 	b2 = bits[2]
                           008300   304 	b3 = bits[3]
                           008400   305 	b4 = bits[4]
                           008500   306 	b5 = bits[5]
                           008600   307 	b6 = bits[6]
                           008700   308 	b7 = bits[7]
                                    309 ;--------------------------------------------------------
                                    310 ; internal ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area DSEG    (DATA)
                                    313 ;--------------------------------------------------------
                                    314 ; overlayable items in internal ram 
                                    315 ;--------------------------------------------------------
                                    316 ;--------------------------------------------------------
                                    317 ; Stack segment in internal ram 
                                    318 ;--------------------------------------------------------
                                    319 	.area	SSEG
      000000                        320 __start__stack:
      000000                        321 	.ds	1
                                    322 
                                    323 ;--------------------------------------------------------
                                    324 ; indirectly addressable internal ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area ISEG    (DATA)
                                    327 ;--------------------------------------------------------
                                    328 ; absolute internal ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area IABS    (ABS,DATA)
                                    331 	.area IABS    (ABS,DATA)
                                    332 ;--------------------------------------------------------
                                    333 ; bit data
                                    334 ;--------------------------------------------------------
                                    335 	.area BSEG    (BIT)
                                    336 ;--------------------------------------------------------
                                    337 ; paged external ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area PSEG    (PAG,XDATA)
                                    340 ;--------------------------------------------------------
                                    341 ; external ram data
                                    342 ;--------------------------------------------------------
                                    343 	.area XSEG    (XDATA)
      000000                        344 _i0::
      000000                        345 	.ds 2
      000002                        346 _i1::
      000002                        347 	.ds 2
      000004                        348 _pu::
      000004                        349 	.ds 1024
      000404                        350 _u::
      000404                        351 	.ds 1024
      000804                        352 _nu::
      000804                        353 	.ds 1024
      000C04                        354 _x::
      000C04                        355 	.ds 2
      000C06                        356 _y::
      000C06                        357 	.ds 2
      000C08                        358 _x1::
      000C08                        359 	.ds 2
      000C0A                        360 _y1::
      000C0A                        361 	.ds 2
      000C0C                        362 _n::
      000C0C                        363 	.ds 2
      000C0E                        364 _generation::
      000C0E                        365 	.ds 8
      000C16                        366 _j::
      000C16                        367 	.ds 2
      000C18                        368 _fixed::
      000C18                        369 	.ds 2
      000C1A                        370 _cycle2::
      000C1A                        371 	.ds 2
      000C1C                        372 _c::
      000C1C                        373 	.ds 2
                                    374 ;--------------------------------------------------------
                                    375 ; absolute external ram data
                                    376 ;--------------------------------------------------------
                                    377 	.area XABS    (ABS,XDATA)
                                    378 ;--------------------------------------------------------
                                    379 ; external initialized ram data
                                    380 ;--------------------------------------------------------
                                    381 	.area XISEG   (XDATA)
                                    382 	.area HOME    (CODE)
                                    383 	.area GSINIT0 (CODE)
                                    384 	.area GSINIT1 (CODE)
                                    385 	.area GSINIT2 (CODE)
                                    386 	.area GSINIT3 (CODE)
                                    387 	.area GSINIT4 (CODE)
                                    388 	.area GSINIT5 (CODE)
                                    389 	.area GSINIT  (CODE)
                                    390 	.area GSFINAL (CODE)
                                    391 	.area CSEG    (CODE)
                                    392 ;--------------------------------------------------------
                                    393 ; interrupt vector 
                                    394 ;--------------------------------------------------------
                                    395 	.area HOME    (CODE)
      000000                        396 __interrupt_vect:
      000000 02r00r00         [24]  397 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  398 	ljmp	_int0
      000006                        399 	.ds	5
      00000B 32               [24]  400 	reti
      00000C                        401 	.ds	7
      000013 02r00r24         [24]  402 	ljmp	_int1
                                    403 ;--------------------------------------------------------
                                    404 ; global & static initialisations
                                    405 ;--------------------------------------------------------
                                    406 	.area HOME    (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.area GSFINAL (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.globl __sdcc_gsinit_startup
                                    411 	.globl __sdcc_program_startup
                                    412 	.globl __start__stack
                                    413 	.globl __mcs51_genXINIT
                                    414 	.globl __mcs51_genXRAMCLEAR
                                    415 	.globl __mcs51_genRAMCLEAR
                                    416 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  417 	ljmp	__sdcc_program_startup
                                    418 ;--------------------------------------------------------
                                    419 ; Home
                                    420 ;--------------------------------------------------------
                                    421 	.area HOME    (CODE)
                                    422 	.area HOME    (CODE)
      000016                        423 __sdcc_program_startup:
      000016 02r00r3A         [24]  424 	ljmp	_main
                                    425 ;	return from main will return to caller
                                    426 ;--------------------------------------------------------
                                    427 ; code
                                    428 ;--------------------------------------------------------
                                    429 	.area CSEG    (CODE)
                                    430 ;------------------------------------------------------------
                                    431 ;Allocation info for local variables in function 'putchar'
                                    432 ;------------------------------------------------------------
                                    433 ;c                         Allocated to registers 
                                    434 ;------------------------------------------------------------
                                    435 ;	life.c:7: int putchar(int c) __naked {
                                    436 ;	-----------------------------------------
                                    437 ;	 function putchar
                                    438 ;	-----------------------------------------
      000000                        439 _putchar:
                                    440 ;	naked function: no prologue.
                                    441 ;	life.c:12: __endasm;
      000000 E5 82            [12]  442 	mov	a, dpl
      000002 02 00 30         [24]  443 	ljmp	0x0030
                                    444 ;	life.c:13: }
                                    445 ;	naked function: no epilogue.
                                    446 ;------------------------------------------------------------
                                    447 ;Allocation info for local variables in function 'getchar'
                                    448 ;------------------------------------------------------------
                                    449 ;	life.c:15: int getchar(void) __naked {
                                    450 ;	-----------------------------------------
                                    451 ;	 function getchar
                                    452 ;	-----------------------------------------
      000005                        453 _getchar:
                                    454 ;	naked function: no prologue.
                                    455 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  456 	lcall	0x0032
      000008 F5 82            [12]  457 	mov	dpl, a
      00000A 75 83 00         [24]  458 	mov	dph, #0
      00000D 22               [24]  459 	ret
                                    460 ;	life.c:22: }
                                    461 ;	naked function: no epilogue.
                                    462 ;------------------------------------------------------------
                                    463 ;Allocation info for local variables in function 'int0'
                                    464 ;------------------------------------------------------------
                                    465 ;	life.c:33: void int0(void) __interrupt 0 __using 1 {
                                    466 ;	-----------------------------------------
                                    467 ;	 function int0
                                    468 ;	-----------------------------------------
      00000E                        469 _int0:
                           00000F   470 	ar7 = 0x0f
                           00000E   471 	ar6 = 0x0e
                           00000D   472 	ar5 = 0x0d
                           00000C   473 	ar4 = 0x0c
                           00000B   474 	ar3 = 0x0b
                           00000A   475 	ar2 = 0x0a
                           000009   476 	ar1 = 0x09
                           000008   477 	ar0 = 0x08
      00000E C0 E0            [24]  478 	push	acc
      000010 C0 82            [24]  479 	push	dpl
      000012 C0 83            [24]  480 	push	dph
                                    481 ;	life.c:34: i0 = 1;
      000014 90r00r00         [24]  482 	mov	dptr,#_i0
      000017 74 01            [12]  483 	mov	a,#0x01
      000019 F0               [24]  484 	movx	@dptr,a
      00001A E4               [12]  485 	clr	a
      00001B A3               [24]  486 	inc	dptr
      00001C F0               [24]  487 	movx	@dptr,a
                                    488 ;	life.c:35: }
      00001D D0 83            [24]  489 	pop	dph
      00001F D0 82            [24]  490 	pop	dpl
      000021 D0 E0            [24]  491 	pop	acc
      000023 32               [24]  492 	reti
                                    493 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    494 ;	eliminated unneeded push/pop psw
                                    495 ;	eliminated unneeded push/pop b
                                    496 ;------------------------------------------------------------
                                    497 ;Allocation info for local variables in function 'int1'
                                    498 ;------------------------------------------------------------
                                    499 ;	life.c:38: void int1(void) __interrupt 2 __using 1 {
                                    500 ;	-----------------------------------------
                                    501 ;	 function int1
                                    502 ;	-----------------------------------------
      000024                        503 _int1:
      000024 C0 E0            [24]  504 	push	acc
      000026 C0 82            [24]  505 	push	dpl
      000028 C0 83            [24]  506 	push	dph
                                    507 ;	life.c:39: i1 = 1;
      00002A 90r00r02         [24]  508 	mov	dptr,#_i1
      00002D 74 01            [12]  509 	mov	a,#0x01
      00002F F0               [24]  510 	movx	@dptr,a
      000030 E4               [12]  511 	clr	a
      000031 A3               [24]  512 	inc	dptr
      000032 F0               [24]  513 	movx	@dptr,a
                                    514 ;	life.c:40: }
      000033 D0 83            [24]  515 	pop	dph
      000035 D0 82            [24]  516 	pop	dpl
      000037 D0 E0            [24]  517 	pop	acc
      000039 32               [24]  518 	reti
                                    519 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    520 ;	eliminated unneeded push/pop psw
                                    521 ;	eliminated unneeded push/pop b
                                    522 ;------------------------------------------------------------
                                    523 ;Allocation info for local variables in function 'main'
                                    524 ;------------------------------------------------------------
                                    525 ;	life.c:149: void main(void) {
                                    526 ;	-----------------------------------------
                                    527 ;	 function main
                                    528 ;	-----------------------------------------
      00003A                        529 _main:
                           000007   530 	ar7 = 0x07
                           000006   531 	ar6 = 0x06
                           000005   532 	ar5 = 0x05
                           000004   533 	ar4 = 0x04
                           000003   534 	ar3 = 0x03
                           000002   535 	ar2 = 0x02
                           000001   536 	ar1 = 0x01
                           000000   537 	ar0 = 0x00
                                    538 ;	life.c:150: IT0 = 1;
                                    539 ;	assignBit
      00003A D2 88            [12]  540 	setb	_IT0
                                    541 ;	life.c:151: IT1 = 1;
                                    542 ;	assignBit
      00003C D2 8A            [12]  543 	setb	_IT1
                                    544 ;	life.c:152: EX0 = 1;
                                    545 ;	assignBit
      00003E D2 A8            [12]  546 	setb	_EX0
                                    547 ;	life.c:153: EX1 = 1;
                                    548 ;	assignBit
      000040 D2 AA            [12]  549 	setb	_EX1
                                    550 ;	life.c:154: EA = 1;
                                    551 ;	assignBit
      000042 D2 AF            [12]  552 	setb	_EA
                                    553 ;	life.c:156: for (i0 = 0; !i0; ) {
      000044 90r00r00         [24]  554 	mov	dptr,#_i0
      000047 E4               [12]  555 	clr	a
      000048 F0               [24]  556 	movx	@dptr,a
      000049 A3               [24]  557 	inc	dptr
      00004A F0               [24]  558 	movx	@dptr,a
      00004B 90r00r02         [24]  559 	mov	dptr,#_i1
      00004E F0               [24]  560 	movx	@dptr,a
      00004F A3               [24]  561 	inc	dptr
      000050 F0               [24]  562 	movx	@dptr,a
      000051                        563 00197$:
                                    564 ;	life.c:84: for (y = 0; y < H; y++)
      000051 90r0Cr06         [24]  565 	mov	dptr,#_y
      000054 E4               [12]  566 	clr	a
      000055 F0               [24]  567 	movx	@dptr,a
      000056 A3               [24]  568 	inc	dptr
      000057 F0               [24]  569 	movx	@dptr,a
      000058                        570 00163$:
                                    571 ;	life.c:85: for (x = 0; x < W; x++) {
      000058 90r0Cr04         [24]  572 	mov	dptr,#_x
      00005B E4               [12]  573 	clr	a
      00005C F0               [24]  574 	movx	@dptr,a
      00005D A3               [24]  575 	inc	dptr
      00005E F0               [24]  576 	movx	@dptr,a
      00005F                        577 00161$:
                                    578 ;	life.c:86: u[y][x] = 0;
      00005F 90r0Cr06         [24]  579 	mov	dptr,#_y
      000062 E0               [24]  580 	movx	a,@dptr
      000063 FE               [12]  581 	mov	r6,a
      000064 A3               [24]  582 	inc	dptr
      000065 E0               [24]  583 	movx	a,@dptr
      000066 C4               [12]  584 	swap	a
      000067 23               [12]  585 	rl	a
      000068 54 E0            [12]  586 	anl	a,#0xe0
      00006A CE               [12]  587 	xch	a,r6
      00006B C4               [12]  588 	swap	a
      00006C 23               [12]  589 	rl	a
      00006D CE               [12]  590 	xch	a,r6
      00006E 6E               [12]  591 	xrl	a,r6
      00006F CE               [12]  592 	xch	a,r6
      000070 54 E0            [12]  593 	anl	a,#0xe0
      000072 CE               [12]  594 	xch	a,r6
      000073 6E               [12]  595 	xrl	a,r6
      000074 FF               [12]  596 	mov	r7,a
      000075 EE               [12]  597 	mov	a,r6
      000076 24r04            [12]  598 	add	a,#_u
      000078 FE               [12]  599 	mov	r6,a
      000079 EF               [12]  600 	mov	a,r7
      00007A 34s04            [12]  601 	addc	a,#(_u >> 8)
      00007C FF               [12]  602 	mov	r7,a
      00007D 90r0Cr04         [24]  603 	mov	dptr,#_x
      000080 E0               [24]  604 	movx	a,@dptr
      000081 FC               [12]  605 	mov	r4,a
      000082 A3               [24]  606 	inc	dptr
      000083 E0               [24]  607 	movx	a,@dptr
      000084 FD               [12]  608 	mov	r5,a
      000085 EC               [12]  609 	mov	a,r4
      000086 2E               [12]  610 	add	a,r6
      000087 F5 82            [12]  611 	mov	dpl,a
      000089 ED               [12]  612 	mov	a,r5
      00008A 3F               [12]  613 	addc	a,r7
      00008B F5 83            [12]  614 	mov	dph,a
      00008D E4               [12]  615 	clr	a
      00008E F0               [24]  616 	movx	@dptr,a
                                    617 ;	life.c:87: pu[y][x] = 0;
      00008F 90r0Cr06         [24]  618 	mov	dptr,#_y
      000092 E0               [24]  619 	movx	a,@dptr
      000093 FE               [12]  620 	mov	r6,a
      000094 A3               [24]  621 	inc	dptr
      000095 E0               [24]  622 	movx	a,@dptr
      000096 C4               [12]  623 	swap	a
      000097 23               [12]  624 	rl	a
      000098 54 E0            [12]  625 	anl	a,#0xe0
      00009A CE               [12]  626 	xch	a,r6
      00009B C4               [12]  627 	swap	a
      00009C 23               [12]  628 	rl	a
      00009D CE               [12]  629 	xch	a,r6
      00009E 6E               [12]  630 	xrl	a,r6
      00009F CE               [12]  631 	xch	a,r6
      0000A0 54 E0            [12]  632 	anl	a,#0xe0
      0000A2 CE               [12]  633 	xch	a,r6
      0000A3 6E               [12]  634 	xrl	a,r6
      0000A4 FF               [12]  635 	mov	r7,a
      0000A5 EE               [12]  636 	mov	a,r6
      0000A6 24r04            [12]  637 	add	a,#_pu
      0000A8 FE               [12]  638 	mov	r6,a
      0000A9 EF               [12]  639 	mov	a,r7
      0000AA 34s00            [12]  640 	addc	a,#(_pu >> 8)
      0000AC FF               [12]  641 	mov	r7,a
      0000AD 90r0Cr04         [24]  642 	mov	dptr,#_x
      0000B0 E0               [24]  643 	movx	a,@dptr
      0000B1 FC               [12]  644 	mov	r4,a
      0000B2 A3               [24]  645 	inc	dptr
      0000B3 E0               [24]  646 	movx	a,@dptr
      0000B4 FD               [12]  647 	mov	r5,a
      0000B5 EC               [12]  648 	mov	a,r4
      0000B6 2E               [12]  649 	add	a,r6
      0000B7 F5 82            [12]  650 	mov	dpl,a
      0000B9 ED               [12]  651 	mov	a,r5
      0000BA 3F               [12]  652 	addc	a,r7
      0000BB F5 83            [12]  653 	mov	dph,a
      0000BD E4               [12]  654 	clr	a
      0000BE F0               [24]  655 	movx	@dptr,a
                                    656 ;	life.c:85: for (x = 0; x < W; x++) {
      0000BF 90r0Cr04         [24]  657 	mov	dptr,#_x
      0000C2 E0               [24]  658 	movx	a,@dptr
      0000C3 24 01            [12]  659 	add	a,#0x01
      0000C5 F0               [24]  660 	movx	@dptr,a
      0000C6 A3               [24]  661 	inc	dptr
      0000C7 E0               [24]  662 	movx	a,@dptr
      0000C8 34 00            [12]  663 	addc	a,#0x00
      0000CA F0               [24]  664 	movx	@dptr,a
      0000CB 90r0Cr04         [24]  665 	mov	dptr,#_x
      0000CE E0               [24]  666 	movx	a,@dptr
      0000CF FE               [12]  667 	mov	r6,a
      0000D0 A3               [24]  668 	inc	dptr
      0000D1 E0               [24]  669 	movx	a,@dptr
      0000D2 FF               [12]  670 	mov	r7,a
      0000D3 C3               [12]  671 	clr	c
      0000D4 EE               [12]  672 	mov	a,r6
      0000D5 94 20            [12]  673 	subb	a,#0x20
      0000D7 EF               [12]  674 	mov	a,r7
      0000D8 64 80            [12]  675 	xrl	a,#0x80
      0000DA 94 80            [12]  676 	subb	a,#0x80
      0000DC 50 03            [24]  677 	jnc	00389$
      0000DE 02r00r5F         [24]  678 	ljmp	00161$
      0000E1                        679 00389$:
                                    680 ;	life.c:84: for (y = 0; y < H; y++)
      0000E1 90r0Cr06         [24]  681 	mov	dptr,#_y
      0000E4 E0               [24]  682 	movx	a,@dptr
      0000E5 24 01            [12]  683 	add	a,#0x01
      0000E7 F0               [24]  684 	movx	@dptr,a
      0000E8 A3               [24]  685 	inc	dptr
      0000E9 E0               [24]  686 	movx	a,@dptr
      0000EA 34 00            [12]  687 	addc	a,#0x00
      0000EC F0               [24]  688 	movx	@dptr,a
      0000ED 90r0Cr06         [24]  689 	mov	dptr,#_y
      0000F0 E0               [24]  690 	movx	a,@dptr
      0000F1 FE               [12]  691 	mov	r6,a
      0000F2 A3               [24]  692 	inc	dptr
      0000F3 E0               [24]  693 	movx	a,@dptr
      0000F4 FF               [12]  694 	mov	r7,a
      0000F5 C3               [12]  695 	clr	c
      0000F6 EE               [12]  696 	mov	a,r6
      0000F7 94 20            [12]  697 	subb	a,#0x20
      0000F9 EF               [12]  698 	mov	a,r7
      0000FA 64 80            [12]  699 	xrl	a,#0x80
      0000FC 94 80            [12]  700 	subb	a,#0x80
      0000FE 50 03            [24]  701 	jnc	00390$
      000100 02r00r58         [24]  702 	ljmp	00163$
      000103                        703 00390$:
                                    704 ;	life.c:158: printf("\033[2J\033[mINIT\r\n");
      000103 74r24            [12]  705 	mov	a,#___str_6
      000105 C0 E0            [24]  706 	push	acc
      000107 74s00            [12]  707 	mov	a,#(___str_6 >> 8)
      000109 C0 E0            [24]  708 	push	acc
      00010B 74 80            [12]  709 	mov	a,#0x80
      00010D C0 E0            [24]  710 	push	acc
      00010F 12r00r00         [24]  711 	lcall	_printf
      000112 15 81            [12]  712 	dec	sp
      000114 15 81            [12]  713 	dec	sp
      000116 15 81            [12]  714 	dec	sp
                                    715 ;	life.c:159: (void)getchar();
      000118 12r00r05         [24]  716 	lcall	_getchar
                                    717 ;	life.c:161: printf("LOAD\r\n");
      00011B 74r32            [12]  718 	mov	a,#___str_7
      00011D C0 E0            [24]  719 	push	acc
      00011F 74s00            [12]  720 	mov	a,#(___str_7 >> 8)
      000121 C0 E0            [24]  721 	push	acc
      000123 74 80            [12]  722 	mov	a,#0x80
      000125 C0 E0            [24]  723 	push	acc
      000127 12r00r00         [24]  724 	lcall	_printf
      00012A 15 81            [12]  725 	dec	sp
      00012C 15 81            [12]  726 	dec	sp
      00012E 15 81            [12]  727 	dec	sp
                                    728 ;	life.c:162: (void)getchar();
      000130 12r00r05         [24]  729 	lcall	_getchar
                                    730 ;	life.c:94: j = 0;
      000133 90r0Cr16         [24]  731 	mov	dptr,#_j
      000136 E4               [12]  732 	clr	a
      000137 F0               [24]  733 	movx	@dptr,a
      000138 A3               [24]  734 	inc	dptr
      000139 F0               [24]  735 	movx	@dptr,a
                                    736 ;	life.c:96: putchar('<');
      00013A 90 00 3C         [24]  737 	mov	dptr,#0x003c
      00013D 12r00r00         [24]  738 	lcall	_putchar
                                    739 ;	life.c:98: for (y = 0; y < H; y++)
      000140 90r0Cr06         [24]  740 	mov	dptr,#_y
      000143 E4               [12]  741 	clr	a
      000144 F0               [24]  742 	movx	@dptr,a
      000145 A3               [24]  743 	inc	dptr
      000146 F0               [24]  744 	movx	@dptr,a
      000147                        745 00167$:
                                    746 ;	life.c:99: for (x = 0; x < W; x++) {
      000147 90r0Cr04         [24]  747 	mov	dptr,#_x
      00014A E4               [12]  748 	clr	a
      00014B F0               [24]  749 	movx	@dptr,a
      00014C A3               [24]  750 	inc	dptr
      00014D F0               [24]  751 	movx	@dptr,a
      00014E                        752 00165$:
                                    753 ;	life.c:100: c = getchar();
      00014E 12r00r05         [24]  754 	lcall	_getchar
      000151 AE 82            [24]  755 	mov	r6,dpl
      000153 AF 83            [24]  756 	mov	r7,dph
      000155 90r0Cr1C         [24]  757 	mov	dptr,#_c
      000158 EE               [12]  758 	mov	a,r6
      000159 F0               [24]  759 	movx	@dptr,a
      00015A EF               [12]  760 	mov	a,r7
      00015B A3               [24]  761 	inc	dptr
      00015C F0               [24]  762 	movx	@dptr,a
                                    763 ;	life.c:101: if (c == (int)'0') {
      00015D BE 30 41         [24]  764 	cjne	r6,#0x30,00117$
      000160 BF 00 3E         [24]  765 	cjne	r7,#0x00,00117$
                                    766 ;	life.c:102: u[y][x] = 0;
      000163 90r0Cr06         [24]  767 	mov	dptr,#_y
      000166 E0               [24]  768 	movx	a,@dptr
      000167 FC               [12]  769 	mov	r4,a
      000168 A3               [24]  770 	inc	dptr
      000169 E0               [24]  771 	movx	a,@dptr
      00016A C4               [12]  772 	swap	a
      00016B 23               [12]  773 	rl	a
      00016C 54 E0            [12]  774 	anl	a,#0xe0
      00016E CC               [12]  775 	xch	a,r4
      00016F C4               [12]  776 	swap	a
      000170 23               [12]  777 	rl	a
      000171 CC               [12]  778 	xch	a,r4
      000172 6C               [12]  779 	xrl	a,r4
      000173 CC               [12]  780 	xch	a,r4
      000174 54 E0            [12]  781 	anl	a,#0xe0
      000176 CC               [12]  782 	xch	a,r4
      000177 6C               [12]  783 	xrl	a,r4
      000178 FD               [12]  784 	mov	r5,a
      000179 EC               [12]  785 	mov	a,r4
      00017A 24r04            [12]  786 	add	a,#_u
      00017C FC               [12]  787 	mov	r4,a
      00017D ED               [12]  788 	mov	a,r5
      00017E 34s04            [12]  789 	addc	a,#(_u >> 8)
      000180 FD               [12]  790 	mov	r5,a
      000181 90r0Cr04         [24]  791 	mov	dptr,#_x
      000184 E0               [24]  792 	movx	a,@dptr
      000185 FA               [12]  793 	mov	r2,a
      000186 A3               [24]  794 	inc	dptr
      000187 E0               [24]  795 	movx	a,@dptr
      000188 FB               [12]  796 	mov	r3,a
      000189 EA               [12]  797 	mov	a,r2
      00018A 2C               [12]  798 	add	a,r4
      00018B F5 82            [12]  799 	mov	dpl,a
      00018D EB               [12]  800 	mov	a,r3
      00018E 3D               [12]  801 	addc	a,r5
      00018F F5 83            [12]  802 	mov	dph,a
      000191 E4               [12]  803 	clr	a
      000192 F0               [24]  804 	movx	@dptr,a
                                    805 ;	life.c:103: j++;
      000193 90r0Cr16         [24]  806 	mov	dptr,#_j
      000196 E0               [24]  807 	movx	a,@dptr
      000197 24 01            [12]  808 	add	a,#0x01
      000199 F0               [24]  809 	movx	@dptr,a
      00019A A3               [24]  810 	inc	dptr
      00019B E0               [24]  811 	movx	a,@dptr
      00019C 34 00            [12]  812 	addc	a,#0x00
      00019E F0               [24]  813 	movx	@dptr,a
      00019F 80 4D            [24]  814 	sjmp	00166$
      0001A1                        815 00117$:
                                    816 ;	life.c:104: } else if (c == (int)'1') {
      0001A1 BE 31 42         [24]  817 	cjne	r6,#0x31,00115$
      0001A4 BF 00 3F         [24]  818 	cjne	r7,#0x00,00115$
                                    819 ;	life.c:105: u[y][x] = 1;
      0001A7 90r0Cr06         [24]  820 	mov	dptr,#_y
      0001AA E0               [24]  821 	movx	a,@dptr
      0001AB FC               [12]  822 	mov	r4,a
      0001AC A3               [24]  823 	inc	dptr
      0001AD E0               [24]  824 	movx	a,@dptr
      0001AE C4               [12]  825 	swap	a
      0001AF 23               [12]  826 	rl	a
      0001B0 54 E0            [12]  827 	anl	a,#0xe0
      0001B2 CC               [12]  828 	xch	a,r4
      0001B3 C4               [12]  829 	swap	a
      0001B4 23               [12]  830 	rl	a
      0001B5 CC               [12]  831 	xch	a,r4
      0001B6 6C               [12]  832 	xrl	a,r4
      0001B7 CC               [12]  833 	xch	a,r4
      0001B8 54 E0            [12]  834 	anl	a,#0xe0
      0001BA CC               [12]  835 	xch	a,r4
      0001BB 6C               [12]  836 	xrl	a,r4
      0001BC FD               [12]  837 	mov	r5,a
      0001BD EC               [12]  838 	mov	a,r4
      0001BE 24r04            [12]  839 	add	a,#_u
      0001C0 FC               [12]  840 	mov	r4,a
      0001C1 ED               [12]  841 	mov	a,r5
      0001C2 34s04            [12]  842 	addc	a,#(_u >> 8)
      0001C4 FD               [12]  843 	mov	r5,a
      0001C5 90r0Cr04         [24]  844 	mov	dptr,#_x
      0001C8 E0               [24]  845 	movx	a,@dptr
      0001C9 FA               [12]  846 	mov	r2,a
      0001CA A3               [24]  847 	inc	dptr
      0001CB E0               [24]  848 	movx	a,@dptr
      0001CC FB               [12]  849 	mov	r3,a
      0001CD EA               [12]  850 	mov	a,r2
      0001CE 2C               [12]  851 	add	a,r4
      0001CF F5 82            [12]  852 	mov	dpl,a
      0001D1 EB               [12]  853 	mov	a,r3
      0001D2 3D               [12]  854 	addc	a,r5
      0001D3 F5 83            [12]  855 	mov	dph,a
      0001D5 74 01            [12]  856 	mov	a,#0x01
      0001D7 F0               [24]  857 	movx	@dptr,a
                                    858 ;	life.c:106: j++;
      0001D8 90r0Cr16         [24]  859 	mov	dptr,#_j
      0001DB E0               [24]  860 	movx	a,@dptr
      0001DC 24 01            [12]  861 	add	a,#0x01
      0001DE F0               [24]  862 	movx	@dptr,a
      0001DF A3               [24]  863 	inc	dptr
      0001E0 E0               [24]  864 	movx	a,@dptr
      0001E1 34 00            [12]  865 	addc	a,#0x00
      0001E3 F0               [24]  866 	movx	@dptr,a
      0001E4 80 08            [24]  867 	sjmp	00166$
      0001E6                        868 00115$:
                                    869 ;	life.c:107: } else if (c == (int)'#') goto out;
      0001E6 BE 23 05         [24]  870 	cjne	r6,#0x23,00395$
      0001E9 BF 00 02         [24]  871 	cjne	r7,#0x00,00395$
      0001EC 80 44            [24]  872 	sjmp	00128$
      0001EE                        873 00395$:
      0001EE                        874 00166$:
                                    875 ;	life.c:99: for (x = 0; x < W; x++) {
      0001EE 90r0Cr04         [24]  876 	mov	dptr,#_x
      0001F1 E0               [24]  877 	movx	a,@dptr
      0001F2 24 01            [12]  878 	add	a,#0x01
      0001F4 F0               [24]  879 	movx	@dptr,a
      0001F5 A3               [24]  880 	inc	dptr
      0001F6 E0               [24]  881 	movx	a,@dptr
      0001F7 34 00            [12]  882 	addc	a,#0x00
      0001F9 F0               [24]  883 	movx	@dptr,a
      0001FA 90r0Cr04         [24]  884 	mov	dptr,#_x
      0001FD E0               [24]  885 	movx	a,@dptr
      0001FE FE               [12]  886 	mov	r6,a
      0001FF A3               [24]  887 	inc	dptr
      000200 E0               [24]  888 	movx	a,@dptr
      000201 FF               [12]  889 	mov	r7,a
      000202 C3               [12]  890 	clr	c
      000203 EE               [12]  891 	mov	a,r6
      000204 94 20            [12]  892 	subb	a,#0x20
      000206 EF               [12]  893 	mov	a,r7
      000207 64 80            [12]  894 	xrl	a,#0x80
      000209 94 80            [12]  895 	subb	a,#0x80
      00020B 50 03            [24]  896 	jnc	00396$
      00020D 02r01r4E         [24]  897 	ljmp	00165$
      000210                        898 00396$:
                                    899 ;	life.c:98: for (y = 0; y < H; y++)
      000210 90r0Cr06         [24]  900 	mov	dptr,#_y
      000213 E0               [24]  901 	movx	a,@dptr
      000214 24 01            [12]  902 	add	a,#0x01
      000216 F0               [24]  903 	movx	@dptr,a
      000217 A3               [24]  904 	inc	dptr
      000218 E0               [24]  905 	movx	a,@dptr
      000219 34 00            [12]  906 	addc	a,#0x00
      00021B F0               [24]  907 	movx	@dptr,a
      00021C 90r0Cr06         [24]  908 	mov	dptr,#_y
      00021F E0               [24]  909 	movx	a,@dptr
      000220 FE               [12]  910 	mov	r6,a
      000221 A3               [24]  911 	inc	dptr
      000222 E0               [24]  912 	movx	a,@dptr
      000223 FF               [12]  913 	mov	r7,a
      000224 C3               [12]  914 	clr	c
      000225 EE               [12]  915 	mov	a,r6
      000226 94 20            [12]  916 	subb	a,#0x20
      000228 EF               [12]  917 	mov	a,r7
      000229 64 80            [12]  918 	xrl	a,#0x80
      00022B 94 80            [12]  919 	subb	a,#0x80
      00022D 50 03            [24]  920 	jnc	00397$
      00022F 02r01r47         [24]  921 	ljmp	00167$
      000232                        922 00397$:
                                    923 ;	life.c:110: out:
      000232                        924 00128$:
                                    925 ;	life.c:111: if (c != (int)'#')
      000232 90r0Cr1C         [24]  926 	mov	dptr,#_c
      000235 E0               [24]  927 	movx	a,@dptr
      000236 FE               [12]  928 	mov	r6,a
      000237 A3               [24]  929 	inc	dptr
      000238 E0               [24]  930 	movx	a,@dptr
      000239 FF               [12]  931 	mov	r7,a
      00023A BE 23 05         [24]  932 	cjne	r6,#0x23,00398$
      00023D BF 00 02         [24]  933 	cjne	r7,#0x00,00398$
      000240 80 15            [24]  934 	sjmp	00127$
      000242                        935 00398$:
                                    936 ;	life.c:112: while (1) {
      000242                        937 00124$:
                                    938 ;	life.c:113: c = getchar();
      000242 12r00r05         [24]  939 	lcall	_getchar
      000245 AE 82            [24]  940 	mov	r6,dpl
      000247 AF 83            [24]  941 	mov	r7,dph
      000249 90r0Cr1C         [24]  942 	mov	dptr,#_c
      00024C EE               [12]  943 	mov	a,r6
      00024D F0               [24]  944 	movx	@dptr,a
      00024E EF               [12]  945 	mov	a,r7
      00024F A3               [24]  946 	inc	dptr
      000250 F0               [24]  947 	movx	@dptr,a
                                    948 ;	life.c:114: if (c == (int)'#') break;
      000251 BE 23 EE         [24]  949 	cjne	r6,#0x23,00124$
      000254 BF 00 EB         [24]  950 	cjne	r7,#0x00,00124$
      000257                        951 00127$:
                                    952 ;	life.c:116: printf("%d>\r\n", j);
      000257 90r0Cr16         [24]  953 	mov	dptr,#_j
      00025A E0               [24]  954 	movx	a,@dptr
      00025B C0 E0            [24]  955 	push	acc
      00025D A3               [24]  956 	inc	dptr
      00025E E0               [24]  957 	movx	a,@dptr
      00025F C0 E0            [24]  958 	push	acc
      000261 74r1E            [12]  959 	mov	a,#___str_5
      000263 C0 E0            [24]  960 	push	acc
      000265 74s00            [12]  961 	mov	a,#(___str_5 >> 8)
      000267 C0 E0            [24]  962 	push	acc
      000269 74 80            [12]  963 	mov	a,#0x80
      00026B C0 E0            [24]  964 	push	acc
      00026D 12r00r00         [24]  965 	lcall	_printf
      000270 E5 81            [12]  966 	mov	a,sp
      000272 24 FB            [12]  967 	add	a,#0xfb
      000274 F5 81            [12]  968 	mov	sp,a
                                    969 ;	life.c:166: printf("RDY\r\n");
      000276 74r39            [12]  970 	mov	a,#___str_8
      000278 C0 E0            [24]  971 	push	acc
      00027A 74s00            [12]  972 	mov	a,#(___str_8 >> 8)
      00027C C0 E0            [24]  973 	push	acc
      00027E 74 80            [12]  974 	mov	a,#0x80
      000280 C0 E0            [24]  975 	push	acc
      000282 12r00r00         [24]  976 	lcall	_printf
      000285 15 81            [12]  977 	dec	sp
      000287 15 81            [12]  978 	dec	sp
      000289 15 81            [12]  979 	dec	sp
                                    980 ;	life.c:167: (void)getchar();
      00028B 12r00r05         [24]  981 	lcall	_getchar
                                    982 ;	life.c:43: for (j = 0; j < 4; j++)
      00028E 90r0Cr16         [24]  983 	mov	dptr,#_j
      000291 E4               [12]  984 	clr	a
      000292 F0               [24]  985 	movx	@dptr,a
      000293 A3               [24]  986 	inc	dptr
      000294 F0               [24]  987 	movx	@dptr,a
      000295                        988 00169$:
                                    989 ;	life.c:44: generation[j] = 0;
      000295 90r0Cr16         [24]  990 	mov	dptr,#_j
      000298 E0               [24]  991 	movx	a,@dptr
      000299 FE               [12]  992 	mov	r6,a
      00029A A3               [24]  993 	inc	dptr
      00029B E0               [24]  994 	movx	a,@dptr
      00029C FF               [12]  995 	mov	r7,a
      00029D EE               [12]  996 	mov	a,r6
      00029E 2E               [12]  997 	add	a,r6
      00029F FE               [12]  998 	mov	r6,a
      0002A0 EF               [12]  999 	mov	a,r7
      0002A1 33               [12] 1000 	rlc	a
      0002A2 FF               [12] 1001 	mov	r7,a
      0002A3 EE               [12] 1002 	mov	a,r6
      0002A4 24r0E            [12] 1003 	add	a,#_generation
      0002A6 F5 82            [12] 1004 	mov	dpl,a
      0002A8 EF               [12] 1005 	mov	a,r7
      0002A9 34s0C            [12] 1006 	addc	a,#(_generation >> 8)
      0002AB F5 83            [12] 1007 	mov	dph,a
      0002AD E4               [12] 1008 	clr	a
      0002AE F0               [24] 1009 	movx	@dptr,a
      0002AF A3               [24] 1010 	inc	dptr
      0002B0 F0               [24] 1011 	movx	@dptr,a
                                   1012 ;	life.c:43: for (j = 0; j < 4; j++)
      0002B1 90r0Cr16         [24] 1013 	mov	dptr,#_j
      0002B4 E0               [24] 1014 	movx	a,@dptr
      0002B5 24 01            [12] 1015 	add	a,#0x01
      0002B7 F0               [24] 1016 	movx	@dptr,a
      0002B8 A3               [24] 1017 	inc	dptr
      0002B9 E0               [24] 1018 	movx	a,@dptr
      0002BA 34 00            [12] 1019 	addc	a,#0x00
      0002BC F0               [24] 1020 	movx	@dptr,a
      0002BD 90r0Cr16         [24] 1021 	mov	dptr,#_j
      0002C0 E0               [24] 1022 	movx	a,@dptr
      0002C1 FE               [12] 1023 	mov	r6,a
      0002C2 A3               [24] 1024 	inc	dptr
      0002C3 E0               [24] 1025 	movx	a,@dptr
      0002C4 FF               [12] 1026 	mov	r7,a
      0002C5 C3               [12] 1027 	clr	c
      0002C6 EE               [12] 1028 	mov	a,r6
      0002C7 94 04            [12] 1029 	subb	a,#0x04
      0002C9 EF               [12] 1030 	mov	a,r7
      0002CA 64 80            [12] 1031 	xrl	a,#0x80
      0002CC 94 80            [12] 1032 	subb	a,#0x80
      0002CE 40 C5            [24] 1033 	jc	00169$
                                   1034 ;	life.c:171: for (i1 = 0; !i0 && !i1; ) {
      0002D0                       1035 00195$:
      0002D0 90r00r00         [24] 1036 	mov	dptr,#_i0
      0002D3 E0               [24] 1037 	movx	a,@dptr
      0002D4 F5 F0            [12] 1038 	mov	b,a
      0002D6 A3               [24] 1039 	inc	dptr
      0002D7 E0               [24] 1040 	movx	a,@dptr
      0002D8 45 F0            [12] 1041 	orl	a,b
      0002DA 60 03            [24] 1042 	jz	00402$
      0002DC 02r08rA8         [24] 1043 	ljmp	00104$
      0002DF                       1044 00402$:
                                   1045 ;	life.c:68: printf("\033[2J\033[m");
      0002DF 74r05            [12] 1046 	mov	a,#___str_1
      0002E1 C0 E0            [24] 1047 	push	acc
      0002E3 74s00            [12] 1048 	mov	a,#(___str_1 >> 8)
      0002E5 C0 E0            [24] 1049 	push	acc
      0002E7 74 80            [12] 1050 	mov	a,#0x80
      0002E9 C0 E0            [24] 1051 	push	acc
      0002EB 12r00r00         [24] 1052 	lcall	_printf
      0002EE 15 81            [12] 1053 	dec	sp
      0002F0 15 81            [12] 1054 	dec	sp
      0002F2 15 81            [12] 1055 	dec	sp
                                   1056 ;	life.c:59: for (j = 0; j < 4; j++) {
      0002F4 90r0Cr16         [24] 1057 	mov	dptr,#_j
      0002F7 E4               [12] 1058 	clr	a
      0002F8 F0               [24] 1059 	movx	@dptr,a
      0002F9 A3               [24] 1060 	inc	dptr
      0002FA F0               [24] 1061 	movx	@dptr,a
      0002FB                       1062 00171$:
                                   1063 ;	life.c:60: printf("%04x", generation[3 - j]);
      0002FB 90r0Cr16         [24] 1064 	mov	dptr,#_j
      0002FE E0               [24] 1065 	movx	a,@dptr
      0002FF FE               [12] 1066 	mov	r6,a
      000300 A3               [24] 1067 	inc	dptr
      000301 E0               [24] 1068 	movx	a,@dptr
      000302 74 03            [12] 1069 	mov	a,#0x03
      000304 C3               [12] 1070 	clr	c
      000305 9E               [12] 1071 	subb	a,r6
      000306 FE               [12] 1072 	mov	r6,a
      000307 C2 D5            [12] 1073 	clr	F0
      000309 75 F0 02         [24] 1074 	mov	b,#0x02
      00030C EE               [12] 1075 	mov	a,r6
      00030D 30 E7 04         [24] 1076 	jnb	acc.7,00403$
      000310 B2 D5            [12] 1077 	cpl	F0
      000312 F4               [12] 1078 	cpl	a
      000313 04               [12] 1079 	inc	a
      000314                       1080 00403$:
      000314 A4               [48] 1081 	mul	ab
      000315 30 D5 0A         [24] 1082 	jnb	F0,00404$
      000318 F4               [12] 1083 	cpl	a
      000319 24 01            [12] 1084 	add	a,#0x01
      00031B C5 F0            [12] 1085 	xch	a,b
      00031D F4               [12] 1086 	cpl	a
      00031E 34 00            [12] 1087 	addc	a,#0x00
      000320 C5 F0            [12] 1088 	xch	a,b
      000322                       1089 00404$:
      000322 24r0E            [12] 1090 	add	a,#_generation
      000324 F5 82            [12] 1091 	mov	dpl,a
      000326 74s0C            [12] 1092 	mov	a,#(_generation >> 8)
      000328 35 F0            [12] 1093 	addc	a,b
      00032A F5 83            [12] 1094 	mov	dph,a
      00032C E0               [24] 1095 	movx	a,@dptr
      00032D FE               [12] 1096 	mov	r6,a
      00032E A3               [24] 1097 	inc	dptr
      00032F E0               [24] 1098 	movx	a,@dptr
      000330 FF               [12] 1099 	mov	r7,a
      000331 C0 06            [24] 1100 	push	ar6
      000333 C0 07            [24] 1101 	push	ar7
      000335 74r00            [12] 1102 	mov	a,#___str_0
      000337 C0 E0            [24] 1103 	push	acc
      000339 74s00            [12] 1104 	mov	a,#(___str_0 >> 8)
      00033B C0 E0            [24] 1105 	push	acc
      00033D 74 80            [12] 1106 	mov	a,#0x80
      00033F C0 E0            [24] 1107 	push	acc
      000341 12r00r00         [24] 1108 	lcall	_printf
      000344 E5 81            [12] 1109 	mov	a,sp
      000346 24 FB            [12] 1110 	add	a,#0xfb
      000348 F5 81            [12] 1111 	mov	sp,a
                                   1112 ;	life.c:61: if (j < 3) putchar(' ');
      00034A 90r0Cr16         [24] 1113 	mov	dptr,#_j
      00034D E0               [24] 1114 	movx	a,@dptr
      00034E FE               [12] 1115 	mov	r6,a
      00034F A3               [24] 1116 	inc	dptr
      000350 E0               [24] 1117 	movx	a,@dptr
      000351 FF               [12] 1118 	mov	r7,a
      000352 C3               [12] 1119 	clr	c
      000353 EE               [12] 1120 	mov	a,r6
      000354 94 03            [12] 1121 	subb	a,#0x03
      000356 EF               [12] 1122 	mov	a,r7
      000357 64 80            [12] 1123 	xrl	a,#0x80
      000359 94 80            [12] 1124 	subb	a,#0x80
      00035B 50 06            [24] 1125 	jnc	00172$
      00035D 90 00 20         [24] 1126 	mov	dptr,#0x0020
      000360 12r00r00         [24] 1127 	lcall	_putchar
      000363                       1128 00172$:
                                   1129 ;	life.c:59: for (j = 0; j < 4; j++) {
      000363 90r0Cr16         [24] 1130 	mov	dptr,#_j
      000366 E0               [24] 1131 	movx	a,@dptr
      000367 24 01            [12] 1132 	add	a,#0x01
      000369 F0               [24] 1133 	movx	@dptr,a
      00036A A3               [24] 1134 	inc	dptr
      00036B E0               [24] 1135 	movx	a,@dptr
      00036C 34 00            [12] 1136 	addc	a,#0x00
      00036E F0               [24] 1137 	movx	@dptr,a
      00036F 90r0Cr16         [24] 1138 	mov	dptr,#_j
      000372 E0               [24] 1139 	movx	a,@dptr
      000373 FE               [12] 1140 	mov	r6,a
      000374 A3               [24] 1141 	inc	dptr
      000375 E0               [24] 1142 	movx	a,@dptr
      000376 FF               [12] 1143 	mov	r7,a
      000377 C3               [12] 1144 	clr	c
      000378 EE               [12] 1145 	mov	a,r6
      000379 94 04            [12] 1146 	subb	a,#0x04
      00037B EF               [12] 1147 	mov	a,r7
      00037C 64 80            [12] 1148 	xrl	a,#0x80
      00037E 94 80            [12] 1149 	subb	a,#0x80
      000380 50 03            [24] 1150 	jnc	00406$
      000382 02r02rFB         [24] 1151 	ljmp	00171$
      000385                       1152 00406$:
                                   1153 ;	life.c:70: printf("\r\n");
      000385 74r0D            [12] 1154 	mov	a,#___str_2
      000387 C0 E0            [24] 1155 	push	acc
      000389 74s00            [12] 1156 	mov	a,#(___str_2 >> 8)
      00038B C0 E0            [24] 1157 	push	acc
      00038D 74 80            [12] 1158 	mov	a,#0x80
      00038F C0 E0            [24] 1159 	push	acc
      000391 12r00r00         [24] 1160 	lcall	_printf
      000394 15 81            [12] 1161 	dec	sp
      000396 15 81            [12] 1162 	dec	sp
      000398 15 81            [12] 1163 	dec	sp
                                   1164 ;	life.c:50: for (j = 0; j < 4; j++) {
      00039A 90r0Cr16         [24] 1165 	mov	dptr,#_j
      00039D E4               [12] 1166 	clr	a
      00039E F0               [24] 1167 	movx	@dptr,a
      00039F A3               [24] 1168 	inc	dptr
      0003A0 F0               [24] 1169 	movx	@dptr,a
      0003A1                       1170 00173$:
                                   1171 ;	life.c:51: generation[j]++;
      0003A1 90r0Cr16         [24] 1172 	mov	dptr,#_j
      0003A4 E0               [24] 1173 	movx	a,@dptr
      0003A5 FE               [12] 1174 	mov	r6,a
      0003A6 A3               [24] 1175 	inc	dptr
      0003A7 E0               [24] 1176 	movx	a,@dptr
      0003A8 FF               [12] 1177 	mov	r7,a
      0003A9 EE               [12] 1178 	mov	a,r6
      0003AA 2E               [12] 1179 	add	a,r6
      0003AB FE               [12] 1180 	mov	r6,a
      0003AC EF               [12] 1181 	mov	a,r7
      0003AD 33               [12] 1182 	rlc	a
      0003AE FF               [12] 1183 	mov	r7,a
      0003AF EE               [12] 1184 	mov	a,r6
      0003B0 24r0E            [12] 1185 	add	a,#_generation
      0003B2 FE               [12] 1186 	mov	r6,a
      0003B3 EF               [12] 1187 	mov	a,r7
      0003B4 34s0C            [12] 1188 	addc	a,#(_generation >> 8)
      0003B6 FF               [12] 1189 	mov	r7,a
      0003B7 8E 82            [24] 1190 	mov	dpl,r6
      0003B9 8F 83            [24] 1191 	mov	dph,r7
      0003BB E0               [24] 1192 	movx	a,@dptr
      0003BC FC               [12] 1193 	mov	r4,a
      0003BD A3               [24] 1194 	inc	dptr
      0003BE E0               [24] 1195 	movx	a,@dptr
      0003BF FD               [12] 1196 	mov	r5,a
      0003C0 0C               [12] 1197 	inc	r4
      0003C1 BC 00 01         [24] 1198 	cjne	r4,#0x00,00407$
      0003C4 0D               [12] 1199 	inc	r5
      0003C5                       1200 00407$:
      0003C5 8E 82            [24] 1201 	mov	dpl,r6
      0003C7 8F 83            [24] 1202 	mov	dph,r7
      0003C9 EC               [12] 1203 	mov	a,r4
      0003CA F0               [24] 1204 	movx	@dptr,a
      0003CB ED               [12] 1205 	mov	a,r5
      0003CC A3               [24] 1206 	inc	dptr
      0003CD F0               [24] 1207 	movx	@dptr,a
                                   1208 ;	life.c:52: if (generation[j]) break;
      0003CE 90r0Cr16         [24] 1209 	mov	dptr,#_j
      0003D1 E0               [24] 1210 	movx	a,@dptr
      0003D2 FE               [12] 1211 	mov	r6,a
      0003D3 A3               [24] 1212 	inc	dptr
      0003D4 E0               [24] 1213 	movx	a,@dptr
      0003D5 FF               [12] 1214 	mov	r7,a
      0003D6 EE               [12] 1215 	mov	a,r6
      0003D7 2E               [12] 1216 	add	a,r6
      0003D8 FC               [12] 1217 	mov	r4,a
      0003D9 EF               [12] 1218 	mov	a,r7
      0003DA 33               [12] 1219 	rlc	a
      0003DB FD               [12] 1220 	mov	r5,a
      0003DC EC               [12] 1221 	mov	a,r4
      0003DD 24r0E            [12] 1222 	add	a,#_generation
      0003DF F5 82            [12] 1223 	mov	dpl,a
      0003E1 ED               [12] 1224 	mov	a,r5
      0003E2 34s0C            [12] 1225 	addc	a,#(_generation >> 8)
      0003E4 F5 83            [12] 1226 	mov	dph,a
      0003E6 E0               [24] 1227 	movx	a,@dptr
      0003E7 FC               [12] 1228 	mov	r4,a
      0003E8 A3               [24] 1229 	inc	dptr
      0003E9 E0               [24] 1230 	movx	a,@dptr
      0003EA FD               [12] 1231 	mov	r5,a
      0003EB 4C               [12] 1232 	orl	a,r4
      0003EC 70 1E            [24] 1233 	jnz	00139$
                                   1234 ;	life.c:50: for (j = 0; j < 4; j++) {
      0003EE 90r0Cr16         [24] 1235 	mov	dptr,#_j
      0003F1 74 01            [12] 1236 	mov	a,#0x01
      0003F3 2E               [12] 1237 	add	a,r6
      0003F4 F0               [24] 1238 	movx	@dptr,a
      0003F5 E4               [12] 1239 	clr	a
      0003F6 3F               [12] 1240 	addc	a,r7
      0003F7 A3               [24] 1241 	inc	dptr
      0003F8 F0               [24] 1242 	movx	@dptr,a
      0003F9 90r0Cr16         [24] 1243 	mov	dptr,#_j
      0003FC E0               [24] 1244 	movx	a,@dptr
      0003FD FE               [12] 1245 	mov	r6,a
      0003FE A3               [24] 1246 	inc	dptr
      0003FF E0               [24] 1247 	movx	a,@dptr
      000400 FF               [12] 1248 	mov	r7,a
      000401 C3               [12] 1249 	clr	c
      000402 EE               [12] 1250 	mov	a,r6
      000403 94 04            [12] 1251 	subb	a,#0x04
      000405 EF               [12] 1252 	mov	a,r7
      000406 64 80            [12] 1253 	xrl	a,#0x80
      000408 94 80            [12] 1254 	subb	a,#0x80
      00040A 40 95            [24] 1255 	jc	00173$
                                   1256 ;	life.c:71: updategen();
      00040C                       1257 00139$:
                                   1258 ;	life.c:73: for (x = 0; x < W; x++) {
      00040C 90r0Cr04         [24] 1259 	mov	dptr,#_x
      00040F E4               [12] 1260 	clr	a
      000410 F0               [24] 1261 	movx	@dptr,a
      000411 A3               [24] 1262 	inc	dptr
      000412 F0               [24] 1263 	movx	@dptr,a
      000413                       1264 00177$:
                                   1265 ;	life.c:74: for (y = 0; y < H; y++)
      000413 90r0Cr06         [24] 1266 	mov	dptr,#_y
      000416 E4               [12] 1267 	clr	a
      000417 F0               [24] 1268 	movx	@dptr,a
      000418 A3               [24] 1269 	inc	dptr
      000419 F0               [24] 1270 	movx	@dptr,a
      00041A                       1271 00175$:
                                   1272 ;	life.c:75: if (u[y][x]) printf("\033[01m[]\033[m");
      00041A 90r0Cr06         [24] 1273 	mov	dptr,#_y
      00041D E0               [24] 1274 	movx	a,@dptr
      00041E FE               [12] 1275 	mov	r6,a
      00041F A3               [24] 1276 	inc	dptr
      000420 E0               [24] 1277 	movx	a,@dptr
      000421 C4               [12] 1278 	swap	a
      000422 23               [12] 1279 	rl	a
      000423 54 E0            [12] 1280 	anl	a,#0xe0
      000425 CE               [12] 1281 	xch	a,r6
      000426 C4               [12] 1282 	swap	a
      000427 23               [12] 1283 	rl	a
      000428 CE               [12] 1284 	xch	a,r6
      000429 6E               [12] 1285 	xrl	a,r6
      00042A CE               [12] 1286 	xch	a,r6
      00042B 54 E0            [12] 1287 	anl	a,#0xe0
      00042D CE               [12] 1288 	xch	a,r6
      00042E 6E               [12] 1289 	xrl	a,r6
      00042F FF               [12] 1290 	mov	r7,a
      000430 EE               [12] 1291 	mov	a,r6
      000431 24r04            [12] 1292 	add	a,#_u
      000433 FE               [12] 1293 	mov	r6,a
      000434 EF               [12] 1294 	mov	a,r7
      000435 34s04            [12] 1295 	addc	a,#(_u >> 8)
      000437 FF               [12] 1296 	mov	r7,a
      000438 90r0Cr04         [24] 1297 	mov	dptr,#_x
      00043B E0               [24] 1298 	movx	a,@dptr
      00043C FC               [12] 1299 	mov	r4,a
      00043D A3               [24] 1300 	inc	dptr
      00043E E0               [24] 1301 	movx	a,@dptr
      00043F FD               [12] 1302 	mov	r5,a
      000440 EC               [12] 1303 	mov	a,r4
      000441 2E               [12] 1304 	add	a,r6
      000442 FE               [12] 1305 	mov	r6,a
      000443 ED               [12] 1306 	mov	a,r5
      000444 3F               [12] 1307 	addc	a,r7
      000445 FF               [12] 1308 	mov	r7,a
      000446 8E 82            [24] 1309 	mov	dpl,r6
      000448 8F 83            [24] 1310 	mov	dph,r7
      00044A E0               [24] 1311 	movx	a,@dptr
      00044B 60 17            [24] 1312 	jz	00141$
      00044D 74r10            [12] 1313 	mov	a,#___str_3
      00044F C0 E0            [24] 1314 	push	acc
      000451 74s00            [12] 1315 	mov	a,#(___str_3 >> 8)
      000453 C0 E0            [24] 1316 	push	acc
      000455 74 80            [12] 1317 	mov	a,#0x80
      000457 C0 E0            [24] 1318 	push	acc
      000459 12r00r00         [24] 1319 	lcall	_printf
      00045C 15 81            [12] 1320 	dec	sp
      00045E 15 81            [12] 1321 	dec	sp
      000460 15 81            [12] 1322 	dec	sp
      000462 80 15            [24] 1323 	sjmp	00176$
      000464                       1324 00141$:
                                   1325 ;	life.c:76: else printf("--");
      000464 74r1B            [12] 1326 	mov	a,#___str_4
      000466 C0 E0            [24] 1327 	push	acc
      000468 74s00            [12] 1328 	mov	a,#(___str_4 >> 8)
      00046A C0 E0            [24] 1329 	push	acc
      00046C 74 80            [12] 1330 	mov	a,#0x80
      00046E C0 E0            [24] 1331 	push	acc
      000470 12r00r00         [24] 1332 	lcall	_printf
      000473 15 81            [12] 1333 	dec	sp
      000475 15 81            [12] 1334 	dec	sp
      000477 15 81            [12] 1335 	dec	sp
      000479                       1336 00176$:
                                   1337 ;	life.c:74: for (y = 0; y < H; y++)
      000479 90r0Cr06         [24] 1338 	mov	dptr,#_y
      00047C E0               [24] 1339 	movx	a,@dptr
      00047D 24 01            [12] 1340 	add	a,#0x01
      00047F F0               [24] 1341 	movx	@dptr,a
      000480 A3               [24] 1342 	inc	dptr
      000481 E0               [24] 1343 	movx	a,@dptr
      000482 34 00            [12] 1344 	addc	a,#0x00
      000484 F0               [24] 1345 	movx	@dptr,a
      000485 90r0Cr06         [24] 1346 	mov	dptr,#_y
      000488 E0               [24] 1347 	movx	a,@dptr
      000489 FE               [12] 1348 	mov	r6,a
      00048A A3               [24] 1349 	inc	dptr
      00048B E0               [24] 1350 	movx	a,@dptr
      00048C FF               [12] 1351 	mov	r7,a
      00048D C3               [12] 1352 	clr	c
      00048E EE               [12] 1353 	mov	a,r6
      00048F 94 20            [12] 1354 	subb	a,#0x20
      000491 EF               [12] 1355 	mov	a,r7
      000492 64 80            [12] 1356 	xrl	a,#0x80
      000494 94 80            [12] 1357 	subb	a,#0x80
      000496 50 03            [24] 1358 	jnc	00411$
      000498 02r04r1A         [24] 1359 	ljmp	00175$
      00049B                       1360 00411$:
                                   1361 ;	life.c:77: printf("\r\n");
      00049B 74r0D            [12] 1362 	mov	a,#___str_2
      00049D C0 E0            [24] 1363 	push	acc
      00049F 74s00            [12] 1364 	mov	a,#(___str_2 >> 8)
      0004A1 C0 E0            [24] 1365 	push	acc
      0004A3 74 80            [12] 1366 	mov	a,#0x80
      0004A5 C0 E0            [24] 1367 	push	acc
      0004A7 12r00r00         [24] 1368 	lcall	_printf
      0004AA 15 81            [12] 1369 	dec	sp
      0004AC 15 81            [12] 1370 	dec	sp
      0004AE 15 81            [12] 1371 	dec	sp
                                   1372 ;	life.c:73: for (x = 0; x < W; x++) {
      0004B0 90r0Cr04         [24] 1373 	mov	dptr,#_x
      0004B3 E0               [24] 1374 	movx	a,@dptr
      0004B4 24 01            [12] 1375 	add	a,#0x01
      0004B6 F0               [24] 1376 	movx	@dptr,a
      0004B7 A3               [24] 1377 	inc	dptr
      0004B8 E0               [24] 1378 	movx	a,@dptr
      0004B9 34 00            [12] 1379 	addc	a,#0x00
      0004BB F0               [24] 1380 	movx	@dptr,a
      0004BC 90r0Cr04         [24] 1381 	mov	dptr,#_x
      0004BF E0               [24] 1382 	movx	a,@dptr
      0004C0 FE               [12] 1383 	mov	r6,a
      0004C1 A3               [24] 1384 	inc	dptr
      0004C2 E0               [24] 1385 	movx	a,@dptr
      0004C3 FF               [12] 1386 	mov	r7,a
      0004C4 C3               [12] 1387 	clr	c
      0004C5 EE               [12] 1388 	mov	a,r6
      0004C6 94 20            [12] 1389 	subb	a,#0x20
      0004C8 EF               [12] 1390 	mov	a,r7
      0004C9 64 80            [12] 1391 	xrl	a,#0x80
      0004CB 94 80            [12] 1392 	subb	a,#0x80
      0004CD 50 03            [24] 1393 	jnc	00412$
      0004CF 02r04r13         [24] 1394 	ljmp	00177$
      0004D2                       1395 00412$:
                                   1396 ;	life.c:122: fixed = 1;
      0004D2 90r0Cr18         [24] 1397 	mov	dptr,#_fixed
      0004D5 74 01            [12] 1398 	mov	a,#0x01
      0004D7 F0               [24] 1399 	movx	@dptr,a
      0004D8 E4               [12] 1400 	clr	a
      0004D9 A3               [24] 1401 	inc	dptr
      0004DA F0               [24] 1402 	movx	@dptr,a
                                   1403 ;	life.c:123: cycle2 = 1;
      0004DB 90r0Cr1A         [24] 1404 	mov	dptr,#_cycle2
      0004DE 04               [12] 1405 	inc	a
      0004DF F0               [24] 1406 	movx	@dptr,a
      0004E0 E4               [12] 1407 	clr	a
      0004E1 A3               [24] 1408 	inc	dptr
      0004E2 F0               [24] 1409 	movx	@dptr,a
                                   1410 ;	life.c:125: for (y = 0; y < H; y++) {
      0004E3 90r0Cr06         [24] 1411 	mov	dptr,#_y
      0004E6 F0               [24] 1412 	movx	@dptr,a
      0004E7 A3               [24] 1413 	inc	dptr
      0004E8 F0               [24] 1414 	movx	@dptr,a
      0004E9                       1415 00187$:
                                   1416 ;	life.c:126: for (x = 0; x < W; x++) {
      0004E9 90r0Cr04         [24] 1417 	mov	dptr,#_x
      0004EC E4               [12] 1418 	clr	a
      0004ED F0               [24] 1419 	movx	@dptr,a
      0004EE A3               [24] 1420 	inc	dptr
      0004EF F0               [24] 1421 	movx	@dptr,a
      0004F0                       1422 00185$:
                                   1423 ;	life.c:127: n = 0;
      0004F0 90r0Cr0C         [24] 1424 	mov	dptr,#_n
      0004F3 E4               [12] 1425 	clr	a
      0004F4 F0               [24] 1426 	movx	@dptr,a
      0004F5 A3               [24] 1427 	inc	dptr
      0004F6 F0               [24] 1428 	movx	@dptr,a
                                   1429 ;	life.c:128: for (y1 = y - 1; y1 <= y + 1; y1++)
      0004F7 90r0Cr06         [24] 1430 	mov	dptr,#_y
      0004FA E0               [24] 1431 	movx	a,@dptr
      0004FB FE               [12] 1432 	mov	r6,a
      0004FC A3               [24] 1433 	inc	dptr
      0004FD E0               [24] 1434 	movx	a,@dptr
      0004FE FF               [12] 1435 	mov	r7,a
      0004FF 1E               [12] 1436 	dec	r6
      000500 BE FF 01         [24] 1437 	cjne	r6,#0xff,00413$
      000503 1F               [12] 1438 	dec	r7
      000504                       1439 00413$:
      000504 90r0Cr0A         [24] 1440 	mov	dptr,#_y1
      000507 EE               [12] 1441 	mov	a,r6
      000508 F0               [24] 1442 	movx	@dptr,a
      000509 EF               [12] 1443 	mov	a,r7
      00050A A3               [24] 1444 	inc	dptr
      00050B F0               [24] 1445 	movx	@dptr,a
      00050C                       1446 00183$:
      00050C 90r0Cr06         [24] 1447 	mov	dptr,#_y
      00050F E0               [24] 1448 	movx	a,@dptr
      000510 FE               [12] 1449 	mov	r6,a
      000511 A3               [24] 1450 	inc	dptr
      000512 E0               [24] 1451 	movx	a,@dptr
      000513 FF               [12] 1452 	mov	r7,a
      000514 74 01            [12] 1453 	mov	a,#0x01
      000516 2E               [12] 1454 	add	a,r6
      000517 FC               [12] 1455 	mov	r4,a
      000518 E4               [12] 1456 	clr	a
      000519 3F               [12] 1457 	addc	a,r7
      00051A FD               [12] 1458 	mov	r5,a
      00051B 90r0Cr0A         [24] 1459 	mov	dptr,#_y1
      00051E E0               [24] 1460 	movx	a,@dptr
      00051F FA               [12] 1461 	mov	r2,a
      000520 A3               [24] 1462 	inc	dptr
      000521 E0               [24] 1463 	movx	a,@dptr
      000522 FB               [12] 1464 	mov	r3,a
      000523 C3               [12] 1465 	clr	c
      000524 EC               [12] 1466 	mov	a,r4
      000525 9A               [12] 1467 	subb	a,r2
      000526 ED               [12] 1468 	mov	a,r5
      000527 64 80            [12] 1469 	xrl	a,#0x80
      000529 8B F0            [24] 1470 	mov	b,r3
      00052B 63 F0 80         [24] 1471 	xrl	b,#0x80
      00052E 95 F0            [12] 1472 	subb	a,b
      000530 50 03            [24] 1473 	jnc	00414$
      000532 02r06r12         [24] 1474 	ljmp	00149$
      000535                       1475 00414$:
                                   1476 ;	life.c:129: for (x1 = x - 1; x1 <= x + 1; x1++)
      000535 90r0Cr04         [24] 1477 	mov	dptr,#_x
      000538 E0               [24] 1478 	movx	a,@dptr
      000539 FC               [12] 1479 	mov	r4,a
      00053A A3               [24] 1480 	inc	dptr
      00053B E0               [24] 1481 	movx	a,@dptr
      00053C FD               [12] 1482 	mov	r5,a
      00053D 1C               [12] 1483 	dec	r4
      00053E BC FF 01         [24] 1484 	cjne	r4,#0xff,00415$
      000541 1D               [12] 1485 	dec	r5
      000542                       1486 00415$:
      000542 90r0Cr08         [24] 1487 	mov	dptr,#_x1
      000545 EC               [12] 1488 	mov	a,r4
      000546 F0               [24] 1489 	movx	@dptr,a
      000547 ED               [12] 1490 	mov	a,r5
      000548 A3               [24] 1491 	inc	dptr
      000549 F0               [24] 1492 	movx	@dptr,a
      00054A                       1493 00180$:
      00054A 90r0Cr04         [24] 1494 	mov	dptr,#_x
      00054D E0               [24] 1495 	movx	a,@dptr
      00054E FC               [12] 1496 	mov	r4,a
      00054F A3               [24] 1497 	inc	dptr
      000550 E0               [24] 1498 	movx	a,@dptr
      000551 FD               [12] 1499 	mov	r5,a
      000552 0C               [12] 1500 	inc	r4
      000553 BC 00 01         [24] 1501 	cjne	r4,#0x00,00416$
      000556 0D               [12] 1502 	inc	r5
      000557                       1503 00416$:
      000557 90r0Cr08         [24] 1504 	mov	dptr,#_x1
      00055A E0               [24] 1505 	movx	a,@dptr
      00055B FA               [12] 1506 	mov	r2,a
      00055C A3               [24] 1507 	inc	dptr
      00055D E0               [24] 1508 	movx	a,@dptr
      00055E FB               [12] 1509 	mov	r3,a
      00055F C3               [12] 1510 	clr	c
      000560 EC               [12] 1511 	mov	a,r4
      000561 9A               [12] 1512 	subb	a,r2
      000562 ED               [12] 1513 	mov	a,r5
      000563 64 80            [12] 1514 	xrl	a,#0x80
      000565 8B F0            [24] 1515 	mov	b,r3
      000567 63 F0 80         [24] 1516 	xrl	b,#0x80
      00056A 95 F0            [12] 1517 	subb	a,b
      00056C 50 03            [24] 1518 	jnc	00417$
      00056E 02r06r03         [24] 1519 	ljmp	00184$
      000571                       1520 00417$:
                                   1521 ;	life.c:130: if (u[(y1 + H) % H][(x1 + W) % W])
      000571 90r0Cr0A         [24] 1522 	mov	dptr,#_y1
      000574 E0               [24] 1523 	movx	a,@dptr
      000575 FC               [12] 1524 	mov	r4,a
      000576 A3               [24] 1525 	inc	dptr
      000577 E0               [24] 1526 	movx	a,@dptr
      000578 FD               [12] 1527 	mov	r5,a
      000579 74 20            [12] 1528 	mov	a,#0x20
      00057B 2C               [12] 1529 	add	a,r4
      00057C FC               [12] 1530 	mov	r4,a
      00057D E4               [12] 1531 	clr	a
      00057E 3D               [12] 1532 	addc	a,r5
      00057F FD               [12] 1533 	mov	r5,a
      000580 C0 03            [24] 1534 	push	ar3
      000582 C0 02            [24] 1535 	push	ar2
      000584 74 20            [12] 1536 	mov	a,#0x20
      000586 C0 E0            [24] 1537 	push	acc
      000588 E4               [12] 1538 	clr	a
      000589 C0 E0            [24] 1539 	push	acc
      00058B 8C 82            [24] 1540 	mov	dpl,r4
      00058D 8D 83            [24] 1541 	mov	dph,r5
      00058F 12r00r00         [24] 1542 	lcall	__modsint
      000592 AC 82            [24] 1543 	mov	r4,dpl
      000594 AD 83            [24] 1544 	mov	r5,dph
      000596 15 81            [12] 1545 	dec	sp
      000598 15 81            [12] 1546 	dec	sp
      00059A D0 02            [24] 1547 	pop	ar2
      00059C D0 03            [24] 1548 	pop	ar3
      00059E ED               [12] 1549 	mov	a,r5
      00059F C4               [12] 1550 	swap	a
      0005A0 23               [12] 1551 	rl	a
      0005A1 54 E0            [12] 1552 	anl	a,#0xe0
      0005A3 CC               [12] 1553 	xch	a,r4
      0005A4 C4               [12] 1554 	swap	a
      0005A5 23               [12] 1555 	rl	a
      0005A6 CC               [12] 1556 	xch	a,r4
      0005A7 6C               [12] 1557 	xrl	a,r4
      0005A8 CC               [12] 1558 	xch	a,r4
      0005A9 54 E0            [12] 1559 	anl	a,#0xe0
      0005AB CC               [12] 1560 	xch	a,r4
      0005AC 6C               [12] 1561 	xrl	a,r4
      0005AD FD               [12] 1562 	mov	r5,a
      0005AE EC               [12] 1563 	mov	a,r4
      0005AF 24r04            [12] 1564 	add	a,#_u
      0005B1 FC               [12] 1565 	mov	r4,a
      0005B2 ED               [12] 1566 	mov	a,r5
      0005B3 34s04            [12] 1567 	addc	a,#(_u >> 8)
      0005B5 FD               [12] 1568 	mov	r5,a
      0005B6 74 20            [12] 1569 	mov	a,#0x20
      0005B8 2A               [12] 1570 	add	a,r2
      0005B9 FA               [12] 1571 	mov	r2,a
      0005BA E4               [12] 1572 	clr	a
      0005BB 3B               [12] 1573 	addc	a,r3
      0005BC FB               [12] 1574 	mov	r3,a
      0005BD C0 05            [24] 1575 	push	ar5
      0005BF C0 04            [24] 1576 	push	ar4
      0005C1 74 20            [12] 1577 	mov	a,#0x20
      0005C3 C0 E0            [24] 1578 	push	acc
      0005C5 E4               [12] 1579 	clr	a
      0005C6 C0 E0            [24] 1580 	push	acc
      0005C8 8A 82            [24] 1581 	mov	dpl,r2
      0005CA 8B 83            [24] 1582 	mov	dph,r3
      0005CC 12r00r00         [24] 1583 	lcall	__modsint
      0005CF AA 82            [24] 1584 	mov	r2,dpl
      0005D1 AB 83            [24] 1585 	mov	r3,dph
      0005D3 15 81            [12] 1586 	dec	sp
      0005D5 15 81            [12] 1587 	dec	sp
      0005D7 D0 04            [24] 1588 	pop	ar4
      0005D9 D0 05            [24] 1589 	pop	ar5
      0005DB EA               [12] 1590 	mov	a,r2
      0005DC 2C               [12] 1591 	add	a,r4
      0005DD FC               [12] 1592 	mov	r4,a
      0005DE EB               [12] 1593 	mov	a,r3
      0005DF 3D               [12] 1594 	addc	a,r5
      0005E0 FD               [12] 1595 	mov	r5,a
      0005E1 8C 82            [24] 1596 	mov	dpl,r4
      0005E3 8D 83            [24] 1597 	mov	dph,r5
      0005E5 E0               [24] 1598 	movx	a,@dptr
      0005E6 60 0C            [24] 1599 	jz	00181$
                                   1600 ;	life.c:131: n++;
      0005E8 90r0Cr0C         [24] 1601 	mov	dptr,#_n
      0005EB E0               [24] 1602 	movx	a,@dptr
      0005EC 24 01            [12] 1603 	add	a,#0x01
      0005EE F0               [24] 1604 	movx	@dptr,a
      0005EF A3               [24] 1605 	inc	dptr
      0005F0 E0               [24] 1606 	movx	a,@dptr
      0005F1 34 00            [12] 1607 	addc	a,#0x00
      0005F3 F0               [24] 1608 	movx	@dptr,a
      0005F4                       1609 00181$:
                                   1610 ;	life.c:129: for (x1 = x - 1; x1 <= x + 1; x1++)
      0005F4 90r0Cr08         [24] 1611 	mov	dptr,#_x1
      0005F7 E0               [24] 1612 	movx	a,@dptr
      0005F8 24 01            [12] 1613 	add	a,#0x01
      0005FA F0               [24] 1614 	movx	@dptr,a
      0005FB A3               [24] 1615 	inc	dptr
      0005FC E0               [24] 1616 	movx	a,@dptr
      0005FD 34 00            [12] 1617 	addc	a,#0x00
      0005FF F0               [24] 1618 	movx	@dptr,a
      000600 02r05r4A         [24] 1619 	ljmp	00180$
      000603                       1620 00184$:
                                   1621 ;	life.c:128: for (y1 = y - 1; y1 <= y + 1; y1++)
      000603 90r0Cr0A         [24] 1622 	mov	dptr,#_y1
      000606 E0               [24] 1623 	movx	a,@dptr
      000607 24 01            [12] 1624 	add	a,#0x01
      000609 F0               [24] 1625 	movx	@dptr,a
      00060A A3               [24] 1626 	inc	dptr
      00060B E0               [24] 1627 	movx	a,@dptr
      00060C 34 00            [12] 1628 	addc	a,#0x00
      00060E F0               [24] 1629 	movx	@dptr,a
      00060F 02r05r0C         [24] 1630 	ljmp	00183$
      000612                       1631 00149$:
                                   1632 ;	life.c:133: if (u[y][x]) n--;
      000612 EF               [12] 1633 	mov	a,r7
      000613 C4               [12] 1634 	swap	a
      000614 23               [12] 1635 	rl	a
      000615 54 E0            [12] 1636 	anl	a,#0xe0
      000617 CE               [12] 1637 	xch	a,r6
      000618 C4               [12] 1638 	swap	a
      000619 23               [12] 1639 	rl	a
      00061A CE               [12] 1640 	xch	a,r6
      00061B 6E               [12] 1641 	xrl	a,r6
      00061C CE               [12] 1642 	xch	a,r6
      00061D 54 E0            [12] 1643 	anl	a,#0xe0
      00061F CE               [12] 1644 	xch	a,r6
      000620 6E               [12] 1645 	xrl	a,r6
      000621 FF               [12] 1646 	mov	r7,a
      000622 EE               [12] 1647 	mov	a,r6
      000623 24r04            [12] 1648 	add	a,#_u
      000625 FE               [12] 1649 	mov	r6,a
      000626 EF               [12] 1650 	mov	a,r7
      000627 34s04            [12] 1651 	addc	a,#(_u >> 8)
      000629 FF               [12] 1652 	mov	r7,a
      00062A 90r0Cr04         [24] 1653 	mov	dptr,#_x
      00062D E0               [24] 1654 	movx	a,@dptr
      00062E FC               [12] 1655 	mov	r4,a
      00062F A3               [24] 1656 	inc	dptr
      000630 E0               [24] 1657 	movx	a,@dptr
      000631 FD               [12] 1658 	mov	r5,a
      000632 EC               [12] 1659 	mov	a,r4
      000633 2E               [12] 1660 	add	a,r6
      000634 FE               [12] 1661 	mov	r6,a
      000635 ED               [12] 1662 	mov	a,r5
      000636 3F               [12] 1663 	addc	a,r7
      000637 FF               [12] 1664 	mov	r7,a
      000638 8E 82            [24] 1665 	mov	dpl,r6
      00063A 8F 83            [24] 1666 	mov	dph,r7
      00063C E0               [24] 1667 	movx	a,@dptr
      00063D 60 14            [24] 1668 	jz	00151$
      00063F 90r0Cr0C         [24] 1669 	mov	dptr,#_n
      000642 E0               [24] 1670 	movx	a,@dptr
      000643 24 FF            [12] 1671 	add	a,#0xff
      000645 FE               [12] 1672 	mov	r6,a
      000646 A3               [24] 1673 	inc	dptr
      000647 E0               [24] 1674 	movx	a,@dptr
      000648 34 FF            [12] 1675 	addc	a,#0xff
      00064A FF               [12] 1676 	mov	r7,a
      00064B 90r0Cr0C         [24] 1677 	mov	dptr,#_n
      00064E EE               [12] 1678 	mov	a,r6
      00064F F0               [24] 1679 	movx	@dptr,a
      000650 EF               [12] 1680 	mov	a,r7
      000651 A3               [24] 1681 	inc	dptr
      000652 F0               [24] 1682 	movx	@dptr,a
      000653                       1683 00151$:
                                   1684 ;	life.c:134: nu[y][x] = (n == 3 || (n == 2 && u[y][x]));
      000653 90r0Cr06         [24] 1685 	mov	dptr,#_y
      000656 E0               [24] 1686 	movx	a,@dptr
      000657 FE               [12] 1687 	mov	r6,a
      000658 A3               [24] 1688 	inc	dptr
      000659 E0               [24] 1689 	movx	a,@dptr
      00065A C4               [12] 1690 	swap	a
      00065B 23               [12] 1691 	rl	a
      00065C 54 E0            [12] 1692 	anl	a,#0xe0
      00065E CE               [12] 1693 	xch	a,r6
      00065F C4               [12] 1694 	swap	a
      000660 23               [12] 1695 	rl	a
      000661 CE               [12] 1696 	xch	a,r6
      000662 6E               [12] 1697 	xrl	a,r6
      000663 CE               [12] 1698 	xch	a,r6
      000664 54 E0            [12] 1699 	anl	a,#0xe0
      000666 CE               [12] 1700 	xch	a,r6
      000667 6E               [12] 1701 	xrl	a,r6
      000668 FF               [12] 1702 	mov	r7,a
      000669 EE               [12] 1703 	mov	a,r6
      00066A 24r04            [12] 1704 	add	a,#_nu
      00066C FC               [12] 1705 	mov	r4,a
      00066D EF               [12] 1706 	mov	a,r7
      00066E 34s08            [12] 1707 	addc	a,#(_nu >> 8)
      000670 FD               [12] 1708 	mov	r5,a
      000671 90r0Cr04         [24] 1709 	mov	dptr,#_x
      000674 E0               [24] 1710 	movx	a,@dptr
      000675 FA               [12] 1711 	mov	r2,a
      000676 A3               [24] 1712 	inc	dptr
      000677 E0               [24] 1713 	movx	a,@dptr
      000678 FB               [12] 1714 	mov	r3,a
      000679 EA               [12] 1715 	mov	a,r2
      00067A 2C               [12] 1716 	add	a,r4
      00067B FC               [12] 1717 	mov	r4,a
      00067C EB               [12] 1718 	mov	a,r3
      00067D 3D               [12] 1719 	addc	a,r5
      00067E FD               [12] 1720 	mov	r5,a
      00067F 90r0Cr0C         [24] 1721 	mov	dptr,#_n
      000682 E0               [24] 1722 	movx	a,@dptr
      000683 F8               [12] 1723 	mov	r0,a
      000684 A3               [24] 1724 	inc	dptr
      000685 E0               [24] 1725 	movx	a,@dptr
      000686 F9               [12] 1726 	mov	r1,a
      000687 B8 03 05         [24] 1727 	cjne	r0,#0x03,00420$
      00068A B9 00 02         [24] 1728 	cjne	r1,#0x00,00420$
      00068D 80 1F            [24] 1729 	sjmp	00202$
      00068F                       1730 00420$:
      00068F B8 02 18         [24] 1731 	cjne	r0,#0x02,00201$
      000692 B9 00 15         [24] 1732 	cjne	r1,#0x00,00201$
      000695 EE               [12] 1733 	mov	a,r6
      000696 24r04            [12] 1734 	add	a,#_u
      000698 FE               [12] 1735 	mov	r6,a
      000699 EF               [12] 1736 	mov	a,r7
      00069A 34s04            [12] 1737 	addc	a,#(_u >> 8)
      00069C FF               [12] 1738 	mov	r7,a
      00069D EA               [12] 1739 	mov	a,r2
      00069E 2E               [12] 1740 	add	a,r6
      00069F FA               [12] 1741 	mov	r2,a
      0006A0 EB               [12] 1742 	mov	a,r3
      0006A1 3F               [12] 1743 	addc	a,r7
      0006A2 FB               [12] 1744 	mov	r3,a
      0006A3 8A 82            [24] 1745 	mov	dpl,r2
      0006A5 8B 83            [24] 1746 	mov	dph,r3
      0006A7 E0               [24] 1747 	movx	a,@dptr
      0006A8 70 04            [24] 1748 	jnz	00202$
      0006AA                       1749 00201$:
                                   1750 ;	assignBit
      0006AA C2*00            [12] 1751 	clr	b0
      0006AC 80 02            [24] 1752 	sjmp	00203$
      0006AE                       1753 00202$:
                                   1754 ;	assignBit
      0006AE D2*00            [12] 1755 	setb	b0
      0006B0                       1756 00203$:
      0006B0 A2*00            [12] 1757 	mov	c,b0
      0006B2 E4               [12] 1758 	clr	a
      0006B3 33               [12] 1759 	rlc	a
      0006B4 8C 82            [24] 1760 	mov	dpl,r4
      0006B6 8D 83            [24] 1761 	mov	dph,r5
      0006B8 F0               [24] 1762 	movx	@dptr,a
                                   1763 ;	life.c:126: for (x = 0; x < W; x++) {
      0006B9 90r0Cr04         [24] 1764 	mov	dptr,#_x
      0006BC E0               [24] 1765 	movx	a,@dptr
      0006BD 24 01            [12] 1766 	add	a,#0x01
      0006BF F0               [24] 1767 	movx	@dptr,a
      0006C0 A3               [24] 1768 	inc	dptr
      0006C1 E0               [24] 1769 	movx	a,@dptr
      0006C2 34 00            [12] 1770 	addc	a,#0x00
      0006C4 F0               [24] 1771 	movx	@dptr,a
      0006C5 90r0Cr04         [24] 1772 	mov	dptr,#_x
      0006C8 E0               [24] 1773 	movx	a,@dptr
      0006C9 FE               [12] 1774 	mov	r6,a
      0006CA A3               [24] 1775 	inc	dptr
      0006CB E0               [24] 1776 	movx	a,@dptr
      0006CC FF               [12] 1777 	mov	r7,a
      0006CD C3               [12] 1778 	clr	c
      0006CE EE               [12] 1779 	mov	a,r6
      0006CF 94 20            [12] 1780 	subb	a,#0x20
      0006D1 EF               [12] 1781 	mov	a,r7
      0006D2 64 80            [12] 1782 	xrl	a,#0x80
      0006D4 94 80            [12] 1783 	subb	a,#0x80
      0006D6 50 03            [24] 1784 	jnc	00424$
      0006D8 02r04rF0         [24] 1785 	ljmp	00185$
      0006DB                       1786 00424$:
                                   1787 ;	life.c:125: for (y = 0; y < H; y++) {
      0006DB 90r0Cr06         [24] 1788 	mov	dptr,#_y
      0006DE E0               [24] 1789 	movx	a,@dptr
      0006DF 24 01            [12] 1790 	add	a,#0x01
      0006E1 F0               [24] 1791 	movx	@dptr,a
      0006E2 A3               [24] 1792 	inc	dptr
      0006E3 E0               [24] 1793 	movx	a,@dptr
      0006E4 34 00            [12] 1794 	addc	a,#0x00
      0006E6 F0               [24] 1795 	movx	@dptr,a
      0006E7 90r0Cr06         [24] 1796 	mov	dptr,#_y
      0006EA E0               [24] 1797 	movx	a,@dptr
      0006EB FE               [12] 1798 	mov	r6,a
      0006EC A3               [24] 1799 	inc	dptr
      0006ED E0               [24] 1800 	movx	a,@dptr
      0006EE FF               [12] 1801 	mov	r7,a
      0006EF C3               [12] 1802 	clr	c
      0006F0 EE               [12] 1803 	mov	a,r6
      0006F1 94 20            [12] 1804 	subb	a,#0x20
      0006F3 EF               [12] 1805 	mov	a,r7
      0006F4 64 80            [12] 1806 	xrl	a,#0x80
      0006F6 94 80            [12] 1807 	subb	a,#0x80
      0006F8 50 03            [24] 1808 	jnc	00425$
      0006FA 02r04rE9         [24] 1809 	ljmp	00187$
      0006FD                       1810 00425$:
                                   1811 ;	life.c:138: for (y = 0; y < H; y++)
      0006FD 90r0Cr06         [24] 1812 	mov	dptr,#_y
      000700 E4               [12] 1813 	clr	a
      000701 F0               [24] 1814 	movx	@dptr,a
      000702 A3               [24] 1815 	inc	dptr
      000703 F0               [24] 1816 	movx	@dptr,a
      000704                       1817 00191$:
                                   1818 ;	life.c:139: for (x = 0; x < W; x++) {
      000704 90r0Cr04         [24] 1819 	mov	dptr,#_x
      000707 E4               [12] 1820 	clr	a
      000708 F0               [24] 1821 	movx	@dptr,a
      000709 A3               [24] 1822 	inc	dptr
      00070A F0               [24] 1823 	movx	@dptr,a
      00070B                       1824 00189$:
                                   1825 ;	life.c:140: if (pu[y][x] != nu[y][x]) cycle2 = 0;
      00070B 90r0Cr06         [24] 1826 	mov	dptr,#_y
      00070E E0               [24] 1827 	movx	a,@dptr
      00070F FE               [12] 1828 	mov	r6,a
      000710 A3               [24] 1829 	inc	dptr
      000711 E0               [24] 1830 	movx	a,@dptr
      000712 C4               [12] 1831 	swap	a
      000713 23               [12] 1832 	rl	a
      000714 54 E0            [12] 1833 	anl	a,#0xe0
      000716 CE               [12] 1834 	xch	a,r6
      000717 C4               [12] 1835 	swap	a
      000718 23               [12] 1836 	rl	a
      000719 CE               [12] 1837 	xch	a,r6
      00071A 6E               [12] 1838 	xrl	a,r6
      00071B CE               [12] 1839 	xch	a,r6
      00071C 54 E0            [12] 1840 	anl	a,#0xe0
      00071E CE               [12] 1841 	xch	a,r6
      00071F 6E               [12] 1842 	xrl	a,r6
      000720 FF               [12] 1843 	mov	r7,a
      000721 EE               [12] 1844 	mov	a,r6
      000722 24r04            [12] 1845 	add	a,#_pu
      000724 FC               [12] 1846 	mov	r4,a
      000725 EF               [12] 1847 	mov	a,r7
      000726 34s00            [12] 1848 	addc	a,#(_pu >> 8)
      000728 FD               [12] 1849 	mov	r5,a
      000729 90r0Cr04         [24] 1850 	mov	dptr,#_x
      00072C E0               [24] 1851 	movx	a,@dptr
      00072D FA               [12] 1852 	mov	r2,a
      00072E A3               [24] 1853 	inc	dptr
      00072F E0               [24] 1854 	movx	a,@dptr
      000730 FB               [12] 1855 	mov	r3,a
      000731 EA               [12] 1856 	mov	a,r2
      000732 2C               [12] 1857 	add	a,r4
      000733 F5 82            [12] 1858 	mov	dpl,a
      000735 EB               [12] 1859 	mov	a,r3
      000736 3D               [12] 1860 	addc	a,r5
      000737 F5 83            [12] 1861 	mov	dph,a
      000739 EE               [12] 1862 	mov	a,r6
      00073A 24r04            [12] 1863 	add	a,#_nu
      00073C FE               [12] 1864 	mov	r6,a
      00073D EF               [12] 1865 	mov	a,r7
      00073E 34s08            [12] 1866 	addc	a,#(_nu >> 8)
      000740 FF               [12] 1867 	mov	r7,a
      000741 EA               [12] 1868 	mov	a,r2
      000742 2E               [12] 1869 	add	a,r6
      000743 FA               [12] 1870 	mov	r2,a
      000744 EB               [12] 1871 	mov	a,r3
      000745 3F               [12] 1872 	addc	a,r7
      000746 FB               [12] 1873 	mov	r3,a
      000747 E0               [24] 1874 	movx	a,@dptr
      000748 FF               [12] 1875 	mov	r7,a
      000749 8A 82            [24] 1876 	mov	dpl,r2
      00074B 8B 83            [24] 1877 	mov	dph,r3
      00074D E0               [24] 1878 	movx	a,@dptr
      00074E FA               [12] 1879 	mov	r2,a
      00074F EF               [12] 1880 	mov	a,r7
      000750 B5 02 02         [24] 1881 	cjne	a,ar2,00426$
      000753 80 07            [24] 1882 	sjmp	00155$
      000755                       1883 00426$:
      000755 90r0Cr1A         [24] 1884 	mov	dptr,#_cycle2
      000758 E4               [12] 1885 	clr	a
      000759 F0               [24] 1886 	movx	@dptr,a
      00075A A3               [24] 1887 	inc	dptr
      00075B F0               [24] 1888 	movx	@dptr,a
      00075C                       1889 00155$:
                                   1890 ;	life.c:141: if (u[y][x] != nu[y][x]) fixed = 0;
      00075C 90r0Cr06         [24] 1891 	mov	dptr,#_y
      00075F E0               [24] 1892 	movx	a,@dptr
      000760 FE               [12] 1893 	mov	r6,a
      000761 A3               [24] 1894 	inc	dptr
      000762 E0               [24] 1895 	movx	a,@dptr
      000763 C4               [12] 1896 	swap	a
      000764 23               [12] 1897 	rl	a
      000765 54 E0            [12] 1898 	anl	a,#0xe0
      000767 CE               [12] 1899 	xch	a,r6
      000768 C4               [12] 1900 	swap	a
      000769 23               [12] 1901 	rl	a
      00076A CE               [12] 1902 	xch	a,r6
      00076B 6E               [12] 1903 	xrl	a,r6
      00076C CE               [12] 1904 	xch	a,r6
      00076D 54 E0            [12] 1905 	anl	a,#0xe0
      00076F CE               [12] 1906 	xch	a,r6
      000770 6E               [12] 1907 	xrl	a,r6
      000771 FF               [12] 1908 	mov	r7,a
      000772 EE               [12] 1909 	mov	a,r6
      000773 24r04            [12] 1910 	add	a,#_u
      000775 FC               [12] 1911 	mov	r4,a
      000776 EF               [12] 1912 	mov	a,r7
      000777 34s04            [12] 1913 	addc	a,#(_u >> 8)
      000779 FD               [12] 1914 	mov	r5,a
      00077A 90r0Cr04         [24] 1915 	mov	dptr,#_x
      00077D E0               [24] 1916 	movx	a,@dptr
      00077E FA               [12] 1917 	mov	r2,a
      00077F A3               [24] 1918 	inc	dptr
      000780 E0               [24] 1919 	movx	a,@dptr
      000781 FB               [12] 1920 	mov	r3,a
      000782 EA               [12] 1921 	mov	a,r2
      000783 2C               [12] 1922 	add	a,r4
      000784 F5 82            [12] 1923 	mov	dpl,a
      000786 EB               [12] 1924 	mov	a,r3
      000787 3D               [12] 1925 	addc	a,r5
      000788 F5 83            [12] 1926 	mov	dph,a
      00078A EE               [12] 1927 	mov	a,r6
      00078B 24r04            [12] 1928 	add	a,#_nu
      00078D FE               [12] 1929 	mov	r6,a
      00078E EF               [12] 1930 	mov	a,r7
      00078F 34s08            [12] 1931 	addc	a,#(_nu >> 8)
      000791 FF               [12] 1932 	mov	r7,a
      000792 EA               [12] 1933 	mov	a,r2
      000793 2E               [12] 1934 	add	a,r6
      000794 FA               [12] 1935 	mov	r2,a
      000795 EB               [12] 1936 	mov	a,r3
      000796 3F               [12] 1937 	addc	a,r7
      000797 FB               [12] 1938 	mov	r3,a
      000798 E0               [24] 1939 	movx	a,@dptr
      000799 FF               [12] 1940 	mov	r7,a
      00079A 8A 82            [24] 1941 	mov	dpl,r2
      00079C 8B 83            [24] 1942 	mov	dph,r3
      00079E E0               [24] 1943 	movx	a,@dptr
      00079F FA               [12] 1944 	mov	r2,a
      0007A0 EF               [12] 1945 	mov	a,r7
      0007A1 B5 02 02         [24] 1946 	cjne	a,ar2,00427$
      0007A4 80 07            [24] 1947 	sjmp	00157$
      0007A6                       1948 00427$:
      0007A6 90r0Cr18         [24] 1949 	mov	dptr,#_fixed
      0007A9 E4               [12] 1950 	clr	a
      0007AA F0               [24] 1951 	movx	@dptr,a
      0007AB A3               [24] 1952 	inc	dptr
      0007AC F0               [24] 1953 	movx	@dptr,a
      0007AD                       1954 00157$:
                                   1955 ;	life.c:142: pu[y][x] = u[y][x];
      0007AD 90r0Cr06         [24] 1956 	mov	dptr,#_y
      0007B0 E0               [24] 1957 	movx	a,@dptr
      0007B1 FE               [12] 1958 	mov	r6,a
      0007B2 A3               [24] 1959 	inc	dptr
      0007B3 E0               [24] 1960 	movx	a,@dptr
      0007B4 C4               [12] 1961 	swap	a
      0007B5 23               [12] 1962 	rl	a
      0007B6 54 E0            [12] 1963 	anl	a,#0xe0
      0007B8 CE               [12] 1964 	xch	a,r6
      0007B9 C4               [12] 1965 	swap	a
      0007BA 23               [12] 1966 	rl	a
      0007BB CE               [12] 1967 	xch	a,r6
      0007BC 6E               [12] 1968 	xrl	a,r6
      0007BD CE               [12] 1969 	xch	a,r6
      0007BE 54 E0            [12] 1970 	anl	a,#0xe0
      0007C0 CE               [12] 1971 	xch	a,r6
      0007C1 6E               [12] 1972 	xrl	a,r6
      0007C2 FF               [12] 1973 	mov	r7,a
      0007C3 EE               [12] 1974 	mov	a,r6
      0007C4 24r04            [12] 1975 	add	a,#_pu
      0007C6 FC               [12] 1976 	mov	r4,a
      0007C7 EF               [12] 1977 	mov	a,r7
      0007C8 34s00            [12] 1978 	addc	a,#(_pu >> 8)
      0007CA FD               [12] 1979 	mov	r5,a
      0007CB 90r0Cr04         [24] 1980 	mov	dptr,#_x
      0007CE E0               [24] 1981 	movx	a,@dptr
      0007CF FA               [12] 1982 	mov	r2,a
      0007D0 A3               [24] 1983 	inc	dptr
      0007D1 E0               [24] 1984 	movx	a,@dptr
      0007D2 FB               [12] 1985 	mov	r3,a
      0007D3 EA               [12] 1986 	mov	a,r2
      0007D4 2C               [12] 1987 	add	a,r4
      0007D5 FC               [12] 1988 	mov	r4,a
      0007D6 EB               [12] 1989 	mov	a,r3
      0007D7 3D               [12] 1990 	addc	a,r5
      0007D8 FD               [12] 1991 	mov	r5,a
      0007D9 EE               [12] 1992 	mov	a,r6
      0007DA 24r04            [12] 1993 	add	a,#_u
      0007DC FE               [12] 1994 	mov	r6,a
      0007DD EF               [12] 1995 	mov	a,r7
      0007DE 34s04            [12] 1996 	addc	a,#(_u >> 8)
      0007E0 FF               [12] 1997 	mov	r7,a
      0007E1 EA               [12] 1998 	mov	a,r2
      0007E2 2E               [12] 1999 	add	a,r6
      0007E3 F5 82            [12] 2000 	mov	dpl,a
      0007E5 EB               [12] 2001 	mov	a,r3
      0007E6 3F               [12] 2002 	addc	a,r7
      0007E7 F5 83            [12] 2003 	mov	dph,a
      0007E9 E0               [24] 2004 	movx	a,@dptr
      0007EA 8C 82            [24] 2005 	mov	dpl,r4
      0007EC 8D 83            [24] 2006 	mov	dph,r5
      0007EE F0               [24] 2007 	movx	@dptr,a
                                   2008 ;	life.c:143: u[y][x] = nu[y][x];
      0007EF 90r0Cr06         [24] 2009 	mov	dptr,#_y
      0007F2 E0               [24] 2010 	movx	a,@dptr
      0007F3 FE               [12] 2011 	mov	r6,a
      0007F4 A3               [24] 2012 	inc	dptr
      0007F5 E0               [24] 2013 	movx	a,@dptr
      0007F6 C4               [12] 2014 	swap	a
      0007F7 23               [12] 2015 	rl	a
      0007F8 54 E0            [12] 2016 	anl	a,#0xe0
      0007FA CE               [12] 2017 	xch	a,r6
      0007FB C4               [12] 2018 	swap	a
      0007FC 23               [12] 2019 	rl	a
      0007FD CE               [12] 2020 	xch	a,r6
      0007FE 6E               [12] 2021 	xrl	a,r6
      0007FF CE               [12] 2022 	xch	a,r6
      000800 54 E0            [12] 2023 	anl	a,#0xe0
      000802 CE               [12] 2024 	xch	a,r6
      000803 6E               [12] 2025 	xrl	a,r6
      000804 FF               [12] 2026 	mov	r7,a
      000805 EE               [12] 2027 	mov	a,r6
      000806 24r04            [12] 2028 	add	a,#_u
      000808 FC               [12] 2029 	mov	r4,a
      000809 EF               [12] 2030 	mov	a,r7
      00080A 34s04            [12] 2031 	addc	a,#(_u >> 8)
      00080C FD               [12] 2032 	mov	r5,a
      00080D 90r0Cr04         [24] 2033 	mov	dptr,#_x
      000810 E0               [24] 2034 	movx	a,@dptr
      000811 FA               [12] 2035 	mov	r2,a
      000812 A3               [24] 2036 	inc	dptr
      000813 E0               [24] 2037 	movx	a,@dptr
      000814 FB               [12] 2038 	mov	r3,a
      000815 EA               [12] 2039 	mov	a,r2
      000816 2C               [12] 2040 	add	a,r4
      000817 FC               [12] 2041 	mov	r4,a
      000818 EB               [12] 2042 	mov	a,r3
      000819 3D               [12] 2043 	addc	a,r5
      00081A FD               [12] 2044 	mov	r5,a
      00081B EE               [12] 2045 	mov	a,r6
      00081C 24r04            [12] 2046 	add	a,#_nu
      00081E FE               [12] 2047 	mov	r6,a
      00081F EF               [12] 2048 	mov	a,r7
      000820 34s08            [12] 2049 	addc	a,#(_nu >> 8)
      000822 FF               [12] 2050 	mov	r7,a
      000823 EA               [12] 2051 	mov	a,r2
      000824 2E               [12] 2052 	add	a,r6
      000825 F5 82            [12] 2053 	mov	dpl,a
      000827 EB               [12] 2054 	mov	a,r3
      000828 3F               [12] 2055 	addc	a,r7
      000829 F5 83            [12] 2056 	mov	dph,a
      00082B E0               [24] 2057 	movx	a,@dptr
      00082C 8C 82            [24] 2058 	mov	dpl,r4
      00082E 8D 83            [24] 2059 	mov	dph,r5
      000830 F0               [24] 2060 	movx	@dptr,a
                                   2061 ;	life.c:139: for (x = 0; x < W; x++) {
      000831 90r0Cr04         [24] 2062 	mov	dptr,#_x
      000834 E0               [24] 2063 	movx	a,@dptr
      000835 24 01            [12] 2064 	add	a,#0x01
      000837 F0               [24] 2065 	movx	@dptr,a
      000838 A3               [24] 2066 	inc	dptr
      000839 E0               [24] 2067 	movx	a,@dptr
      00083A 34 00            [12] 2068 	addc	a,#0x00
      00083C F0               [24] 2069 	movx	@dptr,a
      00083D 90r0Cr04         [24] 2070 	mov	dptr,#_x
      000840 E0               [24] 2071 	movx	a,@dptr
      000841 FE               [12] 2072 	mov	r6,a
      000842 A3               [24] 2073 	inc	dptr
      000843 E0               [24] 2074 	movx	a,@dptr
      000844 FF               [12] 2075 	mov	r7,a
      000845 C3               [12] 2076 	clr	c
      000846 EE               [12] 2077 	mov	a,r6
      000847 94 20            [12] 2078 	subb	a,#0x20
      000849 EF               [12] 2079 	mov	a,r7
      00084A 64 80            [12] 2080 	xrl	a,#0x80
      00084C 94 80            [12] 2081 	subb	a,#0x80
      00084E 50 03            [24] 2082 	jnc	00428$
      000850 02r07r0B         [24] 2083 	ljmp	00189$
      000853                       2084 00428$:
                                   2085 ;	life.c:138: for (y = 0; y < H; y++)
      000853 90r0Cr06         [24] 2086 	mov	dptr,#_y
      000856 E0               [24] 2087 	movx	a,@dptr
      000857 24 01            [12] 2088 	add	a,#0x01
      000859 F0               [24] 2089 	movx	@dptr,a
      00085A A3               [24] 2090 	inc	dptr
      00085B E0               [24] 2091 	movx	a,@dptr
      00085C 34 00            [12] 2092 	addc	a,#0x00
      00085E F0               [24] 2093 	movx	@dptr,a
      00085F 90r0Cr06         [24] 2094 	mov	dptr,#_y
      000862 E0               [24] 2095 	movx	a,@dptr
      000863 FE               [12] 2096 	mov	r6,a
      000864 A3               [24] 2097 	inc	dptr
      000865 E0               [24] 2098 	movx	a,@dptr
      000866 FF               [12] 2099 	mov	r7,a
      000867 C3               [12] 2100 	clr	c
      000868 EE               [12] 2101 	mov	a,r6
      000869 94 20            [12] 2102 	subb	a,#0x20
      00086B EF               [12] 2103 	mov	a,r7
      00086C 64 80            [12] 2104 	xrl	a,#0x80
      00086E 94 80            [12] 2105 	subb	a,#0x80
      000870 50 03            [24] 2106 	jnc	00429$
      000872 02r07r04         [24] 2107 	ljmp	00191$
      000875                       2108 00429$:
                                   2109 ;	life.c:174: if (fixed || cycle2) {
      000875 90r0Cr18         [24] 2110 	mov	dptr,#_fixed
      000878 E0               [24] 2111 	movx	a,@dptr
      000879 F5 F0            [12] 2112 	mov	b,a
      00087B A3               [24] 2113 	inc	dptr
      00087C E0               [24] 2114 	movx	a,@dptr
      00087D 45 F0            [12] 2115 	orl	a,b
      00087F 70 0F            [24] 2116 	jnz	00101$
      000881 90r0Cr1A         [24] 2117 	mov	dptr,#_cycle2
      000884 E0               [24] 2118 	movx	a,@dptr
      000885 F5 F0            [12] 2119 	mov	b,a
      000887 A3               [24] 2120 	inc	dptr
      000888 E0               [24] 2121 	movx	a,@dptr
      000889 45 F0            [12] 2122 	orl	a,b
      00088B 70 03            [24] 2123 	jnz	00431$
      00088D 02r02rD0         [24] 2124 	ljmp	00195$
      000890                       2125 00431$:
      000890                       2126 00101$:
                                   2127 ;	life.c:175: printf("DONE\r\n");
      000890 74r3F            [12] 2128 	mov	a,#___str_9
      000892 C0 E0            [24] 2129 	push	acc
      000894 74s00            [12] 2130 	mov	a,#(___str_9 >> 8)
      000896 C0 E0            [24] 2131 	push	acc
      000898 74 80            [12] 2132 	mov	a,#0x80
      00089A C0 E0            [24] 2133 	push	acc
      00089C 12r00r00         [24] 2134 	lcall	_printf
      00089F 15 81            [12] 2135 	dec	sp
      0008A1 15 81            [12] 2136 	dec	sp
      0008A3 15 81            [12] 2137 	dec	sp
                                   2138 ;	life.c:176: (void)getchar();
      0008A5 12r00r05         [24] 2139 	lcall	_getchar
                                   2140 ;	life.c:177: break;
      0008A8                       2141 00104$:
                                   2142 ;	life.c:181: if (i1) {
      0008A8 90r00r02         [24] 2143 	mov	dptr,#_i1
      0008AB E0               [24] 2144 	movx	a,@dptr
      0008AC F5 F0            [12] 2145 	mov	b,a
      0008AE A3               [24] 2146 	inc	dptr
      0008AF E0               [24] 2147 	movx	a,@dptr
      0008B0 45 F0            [12] 2148 	orl	a,b
      0008B2 60 18            [24] 2149 	jz	00198$
                                   2150 ;	life.c:182: printf("BREAK\r\n");
      0008B4 74r46            [12] 2151 	mov	a,#___str_10
      0008B6 C0 E0            [24] 2152 	push	acc
      0008B8 74s00            [12] 2153 	mov	a,#(___str_10 >> 8)
      0008BA C0 E0            [24] 2154 	push	acc
      0008BC 74 80            [12] 2155 	mov	a,#0x80
      0008BE C0 E0            [24] 2156 	push	acc
      0008C0 12r00r00         [24] 2157 	lcall	_printf
      0008C3 15 81            [12] 2158 	dec	sp
      0008C5 15 81            [12] 2159 	dec	sp
      0008C7 15 81            [12] 2160 	dec	sp
                                   2161 ;	life.c:183: (void)getchar();
      0008C9 12r00r05         [24] 2162 	lcall	_getchar
      0008CC                       2163 00198$:
                                   2164 ;	life.c:156: for (i0 = 0; !i0; ) {
      0008CC 90r00r00         [24] 2165 	mov	dptr,#_i0
      0008CF E0               [24] 2166 	movx	a,@dptr
      0008D0 F5 F0            [12] 2167 	mov	b,a
      0008D2 A3               [24] 2168 	inc	dptr
      0008D3 E0               [24] 2169 	movx	a,@dptr
      0008D4 45 F0            [12] 2170 	orl	a,b
      0008D6 70 03            [24] 2171 	jnz	00433$
      0008D8 02r00r51         [24] 2172 	ljmp	00197$
      0008DB                       2173 00433$:
                                   2174 ;	life.c:187: EA = 0;
                                   2175 ;	assignBit
      0008DB C2 AF            [12] 2176 	clr	_EA
                                   2177 ;	life.c:189: printf("TERM\r\n");
      0008DD 74r4E            [12] 2178 	mov	a,#___str_11
      0008DF C0 E0            [24] 2179 	push	acc
      0008E1 74s00            [12] 2180 	mov	a,#(___str_11 >> 8)
      0008E3 C0 E0            [24] 2181 	push	acc
      0008E5 74 80            [12] 2182 	mov	a,#0x80
      0008E7 C0 E0            [24] 2183 	push	acc
      0008E9 12r00r00         [24] 2184 	lcall	_printf
      0008EC 15 81            [12] 2185 	dec	sp
      0008EE 15 81            [12] 2186 	dec	sp
      0008F0 15 81            [12] 2187 	dec	sp
                                   2188 ;	life.c:190: (void)getchar();
      0008F2 12r00r05         [24] 2189 	lcall	_getchar
                                   2190 ;	life.c:194: __endasm;
      0008F5 02 00 00         [24] 2191 	ljmp	0
                                   2192 ;	life.c:195: }
      0008F8 22               [24] 2193 	ret
                                   2194 	.area CSEG    (CODE)
                                   2195 	.area CONST   (CODE)
                                   2196 	.area CONST   (CODE)
      000000                       2197 ___str_0:
      000000 25 30 34 78           2198 	.ascii "%04x"
      000004 00                    2199 	.db 0x00
                                   2200 	.area CSEG    (CODE)
                                   2201 	.area CONST   (CODE)
      000005                       2202 ___str_1:
      000005 1B                    2203 	.db 0x1b
      000006 5B 32 4A              2204 	.ascii "[2J"
      000009 1B                    2205 	.db 0x1b
      00000A 5B 6D                 2206 	.ascii "[m"
      00000C 00                    2207 	.db 0x00
                                   2208 	.area CSEG    (CODE)
                                   2209 	.area CONST   (CODE)
      00000D                       2210 ___str_2:
      00000D 0D                    2211 	.db 0x0d
      00000E 0A                    2212 	.db 0x0a
      00000F 00                    2213 	.db 0x00
                                   2214 	.area CSEG    (CODE)
                                   2215 	.area CONST   (CODE)
      000010                       2216 ___str_3:
      000010 1B                    2217 	.db 0x1b
      000011 5B 30 31 6D 5B 5D     2218 	.ascii "[01m[]"
      000017 1B                    2219 	.db 0x1b
      000018 5B 6D                 2220 	.ascii "[m"
      00001A 00                    2221 	.db 0x00
                                   2222 	.area CSEG    (CODE)
                                   2223 	.area CONST   (CODE)
      00001B                       2224 ___str_4:
      00001B 2D 2D                 2225 	.ascii "--"
      00001D 00                    2226 	.db 0x00
                                   2227 	.area CSEG    (CODE)
                                   2228 	.area CONST   (CODE)
      00001E                       2229 ___str_5:
      00001E 25 64 3E              2230 	.ascii "%d>"
      000021 0D                    2231 	.db 0x0d
      000022 0A                    2232 	.db 0x0a
      000023 00                    2233 	.db 0x00
                                   2234 	.area CSEG    (CODE)
                                   2235 	.area CONST   (CODE)
      000024                       2236 ___str_6:
      000024 1B                    2237 	.db 0x1b
      000025 5B 32 4A              2238 	.ascii "[2J"
      000028 1B                    2239 	.db 0x1b
      000029 5B 6D 49 4E 49 54     2240 	.ascii "[mINIT"
      00002F 0D                    2241 	.db 0x0d
      000030 0A                    2242 	.db 0x0a
      000031 00                    2243 	.db 0x00
                                   2244 	.area CSEG    (CODE)
                                   2245 	.area CONST   (CODE)
      000032                       2246 ___str_7:
      000032 4C 4F 41 44           2247 	.ascii "LOAD"
      000036 0D                    2248 	.db 0x0d
      000037 0A                    2249 	.db 0x0a
      000038 00                    2250 	.db 0x00
                                   2251 	.area CSEG    (CODE)
                                   2252 	.area CONST   (CODE)
      000039                       2253 ___str_8:
      000039 52 44 59              2254 	.ascii "RDY"
      00003C 0D                    2255 	.db 0x0d
      00003D 0A                    2256 	.db 0x0a
      00003E 00                    2257 	.db 0x00
                                   2258 	.area CSEG    (CODE)
                                   2259 	.area CONST   (CODE)
      00003F                       2260 ___str_9:
      00003F 44 4F 4E 45           2261 	.ascii "DONE"
      000043 0D                    2262 	.db 0x0d
      000044 0A                    2263 	.db 0x0a
      000045 00                    2264 	.db 0x00
                                   2265 	.area CSEG    (CODE)
                                   2266 	.area CONST   (CODE)
      000046                       2267 ___str_10:
      000046 42 52 45 41 4B        2268 	.ascii "BREAK"
      00004B 0D                    2269 	.db 0x0d
      00004C 0A                    2270 	.db 0x0a
      00004D 00                    2271 	.db 0x00
                                   2272 	.area CSEG    (CODE)
                                   2273 	.area CONST   (CODE)
      00004E                       2274 ___str_11:
      00004E 54 45 52 4D           2275 	.ascii "TERM"
      000052 0D                    2276 	.db 0x0d
      000053 0A                    2277 	.db 0x0a
      000054 00                    2278 	.db 0x00
                                   2279 	.area CSEG    (CODE)
                                   2280 	.area XINIT   (CODE)
                                   2281 	.area CABS    (ABS,CODE)
