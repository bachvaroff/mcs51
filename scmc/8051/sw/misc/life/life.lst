                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable bit register bank
                                    284 ;--------------------------------------------------------
                                    285 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        286 bits:
      000000                        287 	.ds 1
                           008000   288 	b0 = bits[0]
                           008100   289 	b1 = bits[1]
                           008200   290 	b2 = bits[2]
                           008300   291 	b3 = bits[3]
                           008400   292 	b4 = bits[4]
                           008500   293 	b5 = bits[5]
                           008600   294 	b6 = bits[6]
                           008700   295 	b7 = bits[7]
                                    296 ;--------------------------------------------------------
                                    297 ; internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area DSEG    (DATA)
                                    300 ;--------------------------------------------------------
                                    301 ; overlayable items in internal ram 
                                    302 ;--------------------------------------------------------
                                    303 ;--------------------------------------------------------
                                    304 ; Stack segment in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 	.area	SSEG
      000000                        307 __start__stack:
      000000                        308 	.ds	1
                                    309 
                                    310 ;--------------------------------------------------------
                                    311 ; indirectly addressable internal ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area ISEG    (DATA)
      000000                        314 _digits:
      000000                        315 	.ds 16
      000010                        316 _i0:
      000010                        317 	.ds 1
      000011                        318 _i1:
      000011                        319 	.ds 1
      000012                        320 _x:
      000012                        321 	.ds 2
      000014                        322 _y:
      000014                        323 	.ds 2
      000016                        324 _j:
      000016                        325 	.ds 2
      000018                        326 _c:
      000018                        327 	.ds 2
      00001A                        328 _bstep:
      00001A                        329 	.ds 1
      00001B                        330 _n:
      00001B                        331 	.ds 1
      00001C                        332 _fixed:
      00001C                        333 	.ds 1
      00001D                        334 _cycle2:
      00001D                        335 	.ds 1
      00001E                        336 _x1:
      00001E                        337 	.ds 2
      000020                        338 _y1:
      000020                        339 	.ds 2
      000022                        340 _generation:
      000022                        341 	.ds 4
      000026                        342 _busy:
      000026                        343 	.ds 4
                                    344 ;--------------------------------------------------------
                                    345 ; absolute internal ram data
                                    346 ;--------------------------------------------------------
                                    347 	.area IABS    (ABS,DATA)
                                    348 	.area IABS    (ABS,DATA)
                                    349 ;--------------------------------------------------------
                                    350 ; bit data
                                    351 ;--------------------------------------------------------
                                    352 	.area BSEG    (BIT)
                                    353 ;--------------------------------------------------------
                                    354 ; paged external ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area PSEG    (PAG,XDATA)
                                    357 ;--------------------------------------------------------
                                    358 ; external ram data
                                    359 ;--------------------------------------------------------
                                    360 	.area XSEG    (XDATA)
      000000                        361 _pu:
      000000                        362 	.ds 2048
      000800                        363 _u:
      000800                        364 	.ds 2048
      001000                        365 _nu:
      001000                        366 	.ds 2048
                                    367 ;--------------------------------------------------------
                                    368 ; absolute external ram data
                                    369 ;--------------------------------------------------------
                                    370 	.area XABS    (ABS,XDATA)
                                    371 ;--------------------------------------------------------
                                    372 ; external initialized ram data
                                    373 ;--------------------------------------------------------
                                    374 	.area XISEG   (XDATA)
                                    375 	.area HOME    (CODE)
                                    376 	.area GSINIT0 (CODE)
                                    377 	.area GSINIT1 (CODE)
                                    378 	.area GSINIT2 (CODE)
                                    379 	.area GSINIT3 (CODE)
                                    380 	.area GSINIT4 (CODE)
                                    381 	.area GSINIT5 (CODE)
                                    382 	.area GSINIT  (CODE)
                                    383 	.area GSFINAL (CODE)
                                    384 	.area CSEG    (CODE)
                                    385 ;--------------------------------------------------------
                                    386 ; interrupt vector 
                                    387 ;--------------------------------------------------------
                                    388 	.area HOME    (CODE)
      000000                        389 __interrupt_vect:
      000000 02r00r00         [24]  390 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  391 	ljmp	_int0
      000006                        392 	.ds	5
      00000B 32               [24]  393 	reti
      00000C                        394 	.ds	7
      000013 02r00r1A         [24]  395 	ljmp	_int1
                                    396 ;--------------------------------------------------------
                                    397 ; global & static initialisations
                                    398 ;--------------------------------------------------------
                                    399 	.area HOME    (CODE)
                                    400 	.area GSINIT  (CODE)
                                    401 	.area GSFINAL (CODE)
                                    402 	.area GSINIT  (CODE)
                                    403 	.globl __sdcc_gsinit_startup
                                    404 	.globl __sdcc_program_startup
                                    405 	.globl __start__stack
                                    406 	.globl __mcs51_genXINIT
                                    407 	.globl __mcs51_genXRAMCLEAR
                                    408 	.globl __mcs51_genRAMCLEAR
                                    409 ;	life.c:24: __idata static const char digits[16] = {
      000000 78r00            [12]  410 	mov	r0,#_digits
      000002 76 30            [12]  411 	mov	@r0,#0x30
      000004 78r01            [12]  412 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  413 	mov	@r0,#0x31
      000008 78r02            [12]  414 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  415 	mov	@r0,#0x32
      00000C 78r03            [12]  416 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  417 	mov	@r0,#0x33
      000010 78r04            [12]  418 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  419 	mov	@r0,#0x34
      000014 78r05            [12]  420 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  421 	mov	@r0,#0x35
      000018 78r06            [12]  422 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  423 	mov	@r0,#0x36
      00001C 78r07            [12]  424 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  425 	mov	@r0,#0x37
      000020 78r08            [12]  426 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  427 	mov	@r0,#0x38
      000024 78r09            [12]  428 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  429 	mov	@r0,#0x39
      000028 78r0A            [12]  430 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  431 	mov	@r0,#0x41
      00002C 78r0B            [12]  432 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  433 	mov	@r0,#0x42
      000030 78r0C            [12]  434 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  435 	mov	@r0,#0x43
      000034 78r0D            [12]  436 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  437 	mov	@r0,#0x44
      000038 78r0E            [12]  438 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  439 	mov	@r0,#0x45
      00003C 78r0F            [12]  440 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  441 	mov	@r0,#0x46
                                    442 ;	life.c:152: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000040 78r26            [12]  443 	mov	r0,#_busy
      000042 76 5C            [12]  444 	mov	@r0,#0x5c
      000044 78r27            [12]  445 	mov	r0,#(_busy + 0x0001)
      000046 76 7C            [12]  446 	mov	@r0,#0x7c
      000048 78r28            [12]  447 	mov	r0,#(_busy + 0x0002)
      00004A 76 2F            [12]  448 	mov	@r0,#0x2f
      00004C 78r29            [12]  449 	mov	r0,#(_busy + 0x0003)
      00004E 76 2D            [12]  450 	mov	@r0,#0x2d
                                    451 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  452 	ljmp	__sdcc_program_startup
                                    453 ;--------------------------------------------------------
                                    454 ; Home
                                    455 ;--------------------------------------------------------
                                    456 	.area HOME    (CODE)
                                    457 	.area HOME    (CODE)
      000016                        458 __sdcc_program_startup:
      000016 02r02r23         [24]  459 	ljmp	_main
                                    460 ;	return from main will return to caller
                                    461 ;--------------------------------------------------------
                                    462 ; code
                                    463 ;--------------------------------------------------------
                                    464 	.area CSEG    (CODE)
                                    465 ;------------------------------------------------------------
                                    466 ;Allocation info for local variables in function 'putchar'
                                    467 ;------------------------------------------------------------
                                    468 ;c                         Allocated to registers 
                                    469 ;------------------------------------------------------------
                                    470 ;	life.c:7: int putchar(int c) __naked {
                                    471 ;	-----------------------------------------
                                    472 ;	 function putchar
                                    473 ;	-----------------------------------------
      000000                        474 _putchar:
                                    475 ;	naked function: no prologue.
                                    476 ;	life.c:12: __endasm;
      000000 E5 82            [12]  477 	mov	a, dpl
      000002 02 00 30         [24]  478 	ljmp	0x0030
                                    479 ;	life.c:13: }
                                    480 ;	naked function: no epilogue.
                                    481 ;------------------------------------------------------------
                                    482 ;Allocation info for local variables in function 'getchar'
                                    483 ;------------------------------------------------------------
                                    484 ;	life.c:15: int getchar(void) __naked {
                                    485 ;	-----------------------------------------
                                    486 ;	 function getchar
                                    487 ;	-----------------------------------------
      000005                        488 _getchar:
                                    489 ;	naked function: no prologue.
                                    490 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  491 	lcall	0x0032
      000008 F5 82            [12]  492 	mov	dpl, a
      00000A 75 83 00         [24]  493 	mov	dph, #0
      00000D 22               [24]  494 	ret
                                    495 ;	life.c:22: }
                                    496 ;	naked function: no epilogue.
                                    497 ;------------------------------------------------------------
                                    498 ;Allocation info for local variables in function 'int0'
                                    499 ;------------------------------------------------------------
                                    500 ;	life.c:53: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    501 ;	-----------------------------------------
                                    502 ;	 function int0
                                    503 ;	-----------------------------------------
      00000E                        504 _int0:
                           00000F   505 	ar7 = 0x0f
                           00000E   506 	ar6 = 0x0e
                           00000D   507 	ar5 = 0x0d
                           00000C   508 	ar4 = 0x0c
                           00000B   509 	ar3 = 0x0b
                           00000A   510 	ar2 = 0x0a
                           000009   511 	ar1 = 0x09
                           000008   512 	ar0 = 0x08
      00000E C0 D0            [24]  513 	push	psw
      000010 75 D0 08         [24]  514 	mov	psw,#0x08
                                    515 ;	life.c:54: i0 = 1;
      000013 78r10            [12]  516 	mov	r0,#_i0
      000015 76 01            [12]  517 	mov	@r0,#0x01
                                    518 ;	life.c:55: }
      000017 D0 D0            [24]  519 	pop	psw
      000019 32               [24]  520 	reti
                                    521 ;	eliminated unneeded push/pop dpl
                                    522 ;	eliminated unneeded push/pop dph
                                    523 ;	eliminated unneeded push/pop b
                                    524 ;	eliminated unneeded push/pop acc
                                    525 ;------------------------------------------------------------
                                    526 ;Allocation info for local variables in function 'int1'
                                    527 ;------------------------------------------------------------
                                    528 ;	life.c:57: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    529 ;	-----------------------------------------
                                    530 ;	 function int1
                                    531 ;	-----------------------------------------
      00001A                        532 _int1:
      00001A C0 D0            [24]  533 	push	psw
      00001C 75 D0 08         [24]  534 	mov	psw,#0x08
                                    535 ;	life.c:58: i1 = 1;
      00001F 78r11            [12]  536 	mov	r0,#_i1
      000021 76 01            [12]  537 	mov	@r0,#0x01
                                    538 ;	life.c:59: }
      000023 D0 D0            [24]  539 	pop	psw
      000025 32               [24]  540 	reti
                                    541 ;	eliminated unneeded push/pop dpl
                                    542 ;	eliminated unneeded push/pop dph
                                    543 ;	eliminated unneeded push/pop b
                                    544 ;	eliminated unneeded push/pop acc
                                    545 ;------------------------------------------------------------
                                    546 ;Allocation info for local variables in function 'show'
                                    547 ;------------------------------------------------------------
                                    548 ;hdr                       Allocated to registers r7 
                                    549 ;__1966080005              Allocated to registers 
                                    550 ;s                         Allocated to registers r5 r6 r7 
                                    551 ;__1310720001              Allocated to registers r6 r7 
                                    552 ;a                         Allocated to registers 
                                    553 ;__1310720003              Allocated to registers r6 r7 
                                    554 ;a                         Allocated to registers 
                                    555 ;__1966080008              Allocated to registers 
                                    556 ;s                         Allocated to registers r5 r6 r7 
                                    557 ;__2621440011              Allocated to registers 
                                    558 ;s                         Allocated to registers r5 r6 r7 
                                    559 ;------------------------------------------------------------
                                    560 ;	life.c:95: void show(char hdr) {
                                    561 ;	-----------------------------------------
                                    562 ;	 function show
                                    563 ;	-----------------------------------------
      000026                        564 _show:
                           000007   565 	ar7 = 0x07
                           000006   566 	ar6 = 0x06
                           000005   567 	ar5 = 0x05
                           000004   568 	ar4 = 0x04
                           000003   569 	ar3 = 0x03
                           000002   570 	ar2 = 0x02
                           000001   571 	ar1 = 0x01
                           000000   572 	ar0 = 0x00
                                    573 ;	life.c:96: if (hdr) {
      000026 E5 82            [12]  574 	mov	a,dpl
      000028 FF               [12]  575 	mov	r7,a
      000029 70 03            [24]  576 	jnz	00190$
      00002B 02r01r7E         [24]  577 	ljmp	00102$
      00002E                        578 00190$:
                                    579 ;	life.c:97: printstr("\033[2J\033[m");
      00002E 7Dr00            [12]  580 	mov	r5,#___str_0
      000030 7Es00            [12]  581 	mov	r6,#(___str_0 >> 8)
      000032 7F 80            [12]  582 	mov	r7,#0x80
                                    583 ;	life.c:48: return;
      000034                        584 00121$:
                                    585 ;	life.c:46: for (; *s; s++) putchar(*s);
      000034 8D 82            [24]  586 	mov	dpl,r5
      000036 8E 83            [24]  587 	mov	dph,r6
      000038 8F F0            [24]  588 	mov	b,r7
      00003A 12r00r00         [24]  589 	lcall	__gptrget
      00003D FC               [12]  590 	mov	r4,a
      00003E 60 10            [24]  591 	jz	00109$
      000040 7B 00            [12]  592 	mov	r3,#0x00
      000042 8C 82            [24]  593 	mov	dpl,r4
      000044 8B 83            [24]  594 	mov	dph,r3
      000046 12r00r00         [24]  595 	lcall	_putchar
      000049 0D               [12]  596 	inc	r5
                                    597 ;	life.c:97: printstr("\033[2J\033[m");
      00004A BD 00 E7         [24]  598 	cjne	r5,#0x00,00121$
      00004D 0E               [12]  599 	inc	r6
      00004E 80 E4            [24]  600 	sjmp	00121$
      000050                        601 00109$:
                                    602 ;	life.c:89: print16x(generation[1]);
      000050 78r24            [12]  603 	mov	r0,#(_generation + 0x0002)
      000052 86 06            [24]  604 	mov	ar6,@r0
      000054 08               [12]  605 	inc	r0
                                    606 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      000055 E6               [12]  607 	mov	a,@r0
      000056 FF               [12]  608 	mov	r7,a
      000057 C4               [12]  609 	swap	a
      000058 54 0F            [12]  610 	anl	a,#0x0f
      00005A 30 E3 02         [24]  611 	jnb	acc.3,00193$
      00005D 44 F0            [12]  612 	orl	a,#0xf0
      00005F                        613 00193$:
      00005F FC               [12]  614 	mov	r4,a
      000060 33               [12]  615 	rlc	a
      000061 95 E0            [12]  616 	subb	a,acc
      000063 53 04 0F         [24]  617 	anl	ar4,#0x0f
      000066 EC               [12]  618 	mov	a,r4
      000067 24r00            [12]  619 	add	a,#_digits
      000069 F9               [12]  620 	mov	r1,a
      00006A 87 05            [24]  621 	mov	ar5,@r1
      00006C 7C 00            [12]  622 	mov	r4,#0x00
      00006E 8D 82            [24]  623 	mov	dpl,r5
      000070 8C 83            [24]  624 	mov	dph,r4
      000072 12r00r00         [24]  625 	lcall	_putchar
                                    626 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      000075 8F 05            [24]  627 	mov	ar5,r7
      000077 53 05 0F         [24]  628 	anl	ar5,#0x0f
      00007A ED               [12]  629 	mov	a,r5
      00007B 24r00            [12]  630 	add	a,#_digits
      00007D F9               [12]  631 	mov	r1,a
      00007E 87 05            [24]  632 	mov	ar5,@r1
      000080 7C 00            [12]  633 	mov	r4,#0x00
      000082 8D 82            [24]  634 	mov	dpl,r5
      000084 8C 83            [24]  635 	mov	dph,r4
      000086 12r00r00         [24]  636 	lcall	_putchar
                                    637 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      000089 8E 04            [24]  638 	mov	ar4,r6
      00008B EF               [12]  639 	mov	a,r7
      00008C C4               [12]  640 	swap	a
      00008D CC               [12]  641 	xch	a,r4
      00008E C4               [12]  642 	swap	a
      00008F 54 0F            [12]  643 	anl	a,#0x0f
      000091 6C               [12]  644 	xrl	a,r4
      000092 CC               [12]  645 	xch	a,r4
      000093 54 0F            [12]  646 	anl	a,#0x0f
      000095 CC               [12]  647 	xch	a,r4
      000096 6C               [12]  648 	xrl	a,r4
      000097 CC               [12]  649 	xch	a,r4
      000098 30 E3 02         [24]  650 	jnb	acc.3,00194$
      00009B 44 F0            [12]  651 	orl	a,#0xf0
      00009D                        652 00194$:
      00009D 53 04 0F         [24]  653 	anl	ar4,#0x0f
      0000A0 EC               [12]  654 	mov	a,r4
      0000A1 24r00            [12]  655 	add	a,#_digits
      0000A3 F9               [12]  656 	mov	r1,a
      0000A4 87 05            [24]  657 	mov	ar5,@r1
      0000A6 7C 00            [12]  658 	mov	r4,#0x00
      0000A8 8D 82            [24]  659 	mov	dpl,r5
      0000AA 8C 83            [24]  660 	mov	dph,r4
      0000AC 12r00r00         [24]  661 	lcall	_putchar
                                    662 ;	life.c:40: putchar(digits[a & 0xf]);
      0000AF 53 06 0F         [24]  663 	anl	ar6,#0x0f
      0000B2 EE               [12]  664 	mov	a,r6
      0000B3 24r00            [12]  665 	add	a,#_digits
      0000B5 F9               [12]  666 	mov	r1,a
      0000B6 87 07            [24]  667 	mov	ar7,@r1
      0000B8 7E 00            [12]  668 	mov	r6,#0x00
      0000BA 8F 82            [24]  669 	mov	dpl,r7
      0000BC 8E 83            [24]  670 	mov	dph,r6
      0000BE 12r00r00         [24]  671 	lcall	_putchar
                                    672 ;	life.c:90: print16x(generation[0]);
      0000C1 78r22            [12]  673 	mov	r0,#_generation
      0000C3 86 06            [24]  674 	mov	ar6,@r0
      0000C5 08               [12]  675 	inc	r0
                                    676 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0000C6 E6               [12]  677 	mov	a,@r0
      0000C7 FF               [12]  678 	mov	r7,a
      0000C8 C4               [12]  679 	swap	a
      0000C9 54 0F            [12]  680 	anl	a,#0x0f
      0000CB 30 E3 02         [24]  681 	jnb	acc.3,00195$
      0000CE 44 F0            [12]  682 	orl	a,#0xf0
      0000D0                        683 00195$:
      0000D0 FC               [12]  684 	mov	r4,a
      0000D1 33               [12]  685 	rlc	a
      0000D2 95 E0            [12]  686 	subb	a,acc
      0000D4 53 04 0F         [24]  687 	anl	ar4,#0x0f
      0000D7 EC               [12]  688 	mov	a,r4
      0000D8 24r00            [12]  689 	add	a,#_digits
      0000DA F9               [12]  690 	mov	r1,a
      0000DB 87 05            [24]  691 	mov	ar5,@r1
      0000DD 7C 00            [12]  692 	mov	r4,#0x00
      0000DF 8D 82            [24]  693 	mov	dpl,r5
      0000E1 8C 83            [24]  694 	mov	dph,r4
      0000E3 12r00r00         [24]  695 	lcall	_putchar
                                    696 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      0000E6 8F 05            [24]  697 	mov	ar5,r7
      0000E8 53 05 0F         [24]  698 	anl	ar5,#0x0f
      0000EB ED               [12]  699 	mov	a,r5
      0000EC 24r00            [12]  700 	add	a,#_digits
      0000EE F9               [12]  701 	mov	r1,a
      0000EF 87 05            [24]  702 	mov	ar5,@r1
      0000F1 7C 00            [12]  703 	mov	r4,#0x00
      0000F3 8D 82            [24]  704 	mov	dpl,r5
      0000F5 8C 83            [24]  705 	mov	dph,r4
      0000F7 12r00r00         [24]  706 	lcall	_putchar
                                    707 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000FA 8E 04            [24]  708 	mov	ar4,r6
      0000FC EF               [12]  709 	mov	a,r7
      0000FD C4               [12]  710 	swap	a
      0000FE CC               [12]  711 	xch	a,r4
      0000FF C4               [12]  712 	swap	a
      000100 54 0F            [12]  713 	anl	a,#0x0f
      000102 6C               [12]  714 	xrl	a,r4
      000103 CC               [12]  715 	xch	a,r4
      000104 54 0F            [12]  716 	anl	a,#0x0f
      000106 CC               [12]  717 	xch	a,r4
      000107 6C               [12]  718 	xrl	a,r4
      000108 CC               [12]  719 	xch	a,r4
      000109 30 E3 02         [24]  720 	jnb	acc.3,00196$
      00010C 44 F0            [12]  721 	orl	a,#0xf0
      00010E                        722 00196$:
      00010E 53 04 0F         [24]  723 	anl	ar4,#0x0f
      000111 EC               [12]  724 	mov	a,r4
      000112 24r00            [12]  725 	add	a,#_digits
      000114 F9               [12]  726 	mov	r1,a
      000115 87 05            [24]  727 	mov	ar5,@r1
      000117 7C 00            [12]  728 	mov	r4,#0x00
      000119 8D 82            [24]  729 	mov	dpl,r5
      00011B 8C 83            [24]  730 	mov	dph,r4
      00011D 12r00r00         [24]  731 	lcall	_putchar
                                    732 ;	life.c:40: putchar(digits[a & 0xf]);
      000120 53 06 0F         [24]  733 	anl	ar6,#0x0f
      000123 EE               [12]  734 	mov	a,r6
      000124 24r00            [12]  735 	add	a,#_digits
      000126 F9               [12]  736 	mov	r1,a
      000127 87 07            [24]  737 	mov	ar7,@r1
      000129 7E 00            [12]  738 	mov	r6,#0x00
      00012B 8F 82            [24]  739 	mov	dpl,r7
      00012D 8E 83            [24]  740 	mov	dph,r6
      00012F 12r00r00         [24]  741 	lcall	_putchar
                                    742 ;	life.c:99: printstr("\r\n");
      000132 7Dr08            [12]  743 	mov	r5,#___str_1
      000134 7Es00            [12]  744 	mov	r6,#(___str_1 >> 8)
      000136 7F 80            [12]  745 	mov	r7,#0x80
                                    746 ;	life.c:48: return;
      000138                        747 00124$:
                                    748 ;	life.c:46: for (; *s; s++) putchar(*s);
      000138 8D 82            [24]  749 	mov	dpl,r5
      00013A 8E 83            [24]  750 	mov	dph,r6
      00013C 8F F0            [24]  751 	mov	b,r7
      00013E 12r00r00         [24]  752 	lcall	__gptrget
      000141 FC               [12]  753 	mov	r4,a
      000142 60 10            [24]  754 	jz	00114$
      000144 7B 00            [12]  755 	mov	r3,#0x00
      000146 8C 82            [24]  756 	mov	dpl,r4
      000148 8B 83            [24]  757 	mov	dph,r3
      00014A 12r00r00         [24]  758 	lcall	_putchar
      00014D 0D               [12]  759 	inc	r5
                                    760 ;	life.c:99: printstr("\r\n");
      00014E BD 00 E7         [24]  761 	cjne	r5,#0x00,00124$
      000151 0E               [12]  762 	inc	r6
      000152 80 E4            [24]  763 	sjmp	00124$
      000154                        764 00114$:
                                    765 ;	life.c:82: generation[0]++;
      000154 78r22            [12]  766 	mov	r0,#_generation
      000156 86 06            [24]  767 	mov	ar6,@r0
      000158 08               [12]  768 	inc	r0
      000159 86 07            [24]  769 	mov	ar7,@r0
      00015B 0E               [12]  770 	inc	r6
      00015C BE 00 01         [24]  771 	cjne	r6,#0x00,00199$
      00015F 0F               [12]  772 	inc	r7
      000160                        773 00199$:
      000160 78r22            [12]  774 	mov	r0,#_generation
      000162 A6 06            [24]  775 	mov	@r0,ar6
      000164 08               [12]  776 	inc	r0
      000165 A6 07            [24]  777 	mov	@r0,ar7
                                    778 ;	life.c:83: if (!generation[0]) generation[1]++;
      000167 EE               [12]  779 	mov	a,r6
      000168 4F               [12]  780 	orl	a,r7
      000169 70 13            [24]  781 	jnz	00102$
      00016B 78r24            [12]  782 	mov	r0,#(_generation + 0x0002)
      00016D 86 06            [24]  783 	mov	ar6,@r0
      00016F 08               [12]  784 	inc	r0
      000170 86 07            [24]  785 	mov	ar7,@r0
      000172 0E               [12]  786 	inc	r6
      000173 BE 00 01         [24]  787 	cjne	r6,#0x00,00201$
      000176 0F               [12]  788 	inc	r7
      000177                        789 00201$:
      000177 78r24            [12]  790 	mov	r0,#(_generation + 0x0002)
      000179 A6 06            [24]  791 	mov	@r0,ar6
      00017B 08               [12]  792 	inc	r0
      00017C A6 07            [24]  793 	mov	@r0,ar7
                                    794 ;	life.c:100: updategen();
      00017E                        795 00102$:
                                    796 ;	life.c:103: for (x = 0; x < W; x++) {
      00017E 78r12            [12]  797 	mov	r0,#_x
      000180 E4               [12]  798 	clr	a
      000181 F6               [12]  799 	mov	@r0,a
      000182 08               [12]  800 	inc	r0
      000183 F6               [12]  801 	mov	@r0,a
      000184                        802 00131$:
                                    803 ;	life.c:104: for (y = 0; y < H; y++)
      000184 78r14            [12]  804 	mov	r0,#_y
      000186 E4               [12]  805 	clr	a
      000187 F6               [12]  806 	mov	@r0,a
      000188 08               [12]  807 	inc	r0
      000189 F6               [12]  808 	mov	@r0,a
      00018A                        809 00126$:
                                    810 ;	life.c:105: if (u[A2D(W, y, x)]) {
      00018A 78r14            [12]  811 	mov	r0,#_y
      00018C 86 06            [24]  812 	mov	ar6,@r0
      00018E 08               [12]  813 	inc	r0
      00018F E6               [12]  814 	mov	a,@r0
      000190 C4               [12]  815 	swap	a
      000191 23               [12]  816 	rl	a
      000192 54 E0            [12]  817 	anl	a,#0xe0
      000194 CE               [12]  818 	xch	a,r6
      000195 C4               [12]  819 	swap	a
      000196 23               [12]  820 	rl	a
      000197 CE               [12]  821 	xch	a,r6
      000198 6E               [12]  822 	xrl	a,r6
      000199 CE               [12]  823 	xch	a,r6
      00019A 54 E0            [12]  824 	anl	a,#0xe0
      00019C CE               [12]  825 	xch	a,r6
      00019D 6E               [12]  826 	xrl	a,r6
      00019E FF               [12]  827 	mov	r7,a
      00019F 78r12            [12]  828 	mov	r0,#_x
      0001A1 E6               [12]  829 	mov	a,@r0
      0001A2 2E               [12]  830 	add	a,r6
      0001A3 FE               [12]  831 	mov	r6,a
      0001A4 08               [12]  832 	inc	r0
      0001A5 E6               [12]  833 	mov	a,@r0
      0001A6 3F               [12]  834 	addc	a,r7
      0001A7 FF               [12]  835 	mov	r7,a
      0001A8 EE               [12]  836 	mov	a,r6
      0001A9 24r00            [12]  837 	add	a,#_u
      0001AB FE               [12]  838 	mov	r6,a
      0001AC EF               [12]  839 	mov	a,r7
      0001AD 34s08            [12]  840 	addc	a,#(_u >> 8)
      0001AF FF               [12]  841 	mov	r7,a
      0001B0 8E 82            [24]  842 	mov	dpl,r6
      0001B2 8F 83            [24]  843 	mov	dph,r7
      0001B4 E0               [24]  844 	movx	a,@dptr
      0001B5 60 0E            [24]  845 	jz	00104$
                                    846 ;	life.c:106: putchar('['); putchar(']');
      0001B7 90 00 5B         [24]  847 	mov	dptr,#0x005b
      0001BA 12r00r00         [24]  848 	lcall	_putchar
      0001BD 90 00 5D         [24]  849 	mov	dptr,#0x005d
      0001C0 12r00r00         [24]  850 	lcall	_putchar
      0001C3 80 0C            [24]  851 	sjmp	00127$
      0001C5                        852 00104$:
                                    853 ;	life.c:108: putchar('#'); putchar('#');
      0001C5 90 00 23         [24]  854 	mov	dptr,#0x0023
      0001C8 12r00r00         [24]  855 	lcall	_putchar
      0001CB 90 00 23         [24]  856 	mov	dptr,#0x0023
      0001CE 12r00r00         [24]  857 	lcall	_putchar
      0001D1                        858 00127$:
                                    859 ;	life.c:104: for (y = 0; y < H; y++)
      0001D1 78r14            [12]  860 	mov	r0,#_y
      0001D3 06               [12]  861 	inc	@r0
      0001D4 B6 00 02         [24]  862 	cjne	@r0,#0x00,00203$
      0001D7 08               [12]  863 	inc	r0
      0001D8 06               [12]  864 	inc	@r0
      0001D9                        865 00203$:
      0001D9 78r14            [12]  866 	mov	r0,#_y
      0001DB C3               [12]  867 	clr	c
      0001DC E6               [12]  868 	mov	a,@r0
      0001DD 94 40            [12]  869 	subb	a,#0x40
      0001DF 08               [12]  870 	inc	r0
      0001E0 E6               [12]  871 	mov	a,@r0
      0001E1 64 80            [12]  872 	xrl	a,#0x80
      0001E3 94 80            [12]  873 	subb	a,#0x80
      0001E5 40 A3            [24]  874 	jc	00126$
                                    875 ;	life.c:110: printstr("\r\n");
      0001E7 7Dr08            [12]  876 	mov	r5,#___str_1
      0001E9 7Es00            [12]  877 	mov	r6,#(___str_1 >> 8)
      0001EB 7F 80            [12]  878 	mov	r7,#0x80
                                    879 ;	life.c:48: return;
      0001ED                        880 00129$:
                                    881 ;	life.c:46: for (; *s; s++) putchar(*s);
      0001ED 8D 82            [24]  882 	mov	dpl,r5
      0001EF 8E 83            [24]  883 	mov	dph,r6
      0001F1 8F F0            [24]  884 	mov	b,r7
      0001F3 12r00r00         [24]  885 	lcall	__gptrget
      0001F6 FC               [12]  886 	mov	r4,a
      0001F7 60 10            [24]  887 	jz	00119$
      0001F9 7B 00            [12]  888 	mov	r3,#0x00
      0001FB 8C 82            [24]  889 	mov	dpl,r4
      0001FD 8B 83            [24]  890 	mov	dph,r3
      0001FF 12r00r00         [24]  891 	lcall	_putchar
      000202 0D               [12]  892 	inc	r5
                                    893 ;	life.c:110: printstr("\r\n");
      000203 BD 00 E7         [24]  894 	cjne	r5,#0x00,00129$
      000206 0E               [12]  895 	inc	r6
      000207 80 E4            [24]  896 	sjmp	00129$
      000209                        897 00119$:
                                    898 ;	life.c:103: for (x = 0; x < W; x++) {
      000209 78r12            [12]  899 	mov	r0,#_x
      00020B 06               [12]  900 	inc	@r0
      00020C B6 00 02         [24]  901 	cjne	@r0,#0x00,00207$
      00020F 08               [12]  902 	inc	r0
      000210 06               [12]  903 	inc	@r0
      000211                        904 00207$:
      000211 78r12            [12]  905 	mov	r0,#_x
      000213 C3               [12]  906 	clr	c
      000214 E6               [12]  907 	mov	a,@r0
      000215 94 20            [12]  908 	subb	a,#0x20
      000217 08               [12]  909 	inc	r0
      000218 E6               [12]  910 	mov	a,@r0
      000219 64 80            [12]  911 	xrl	a,#0x80
      00021B 94 80            [12]  912 	subb	a,#0x80
      00021D 50 03            [24]  913 	jnc	00208$
      00021F 02r01r84         [24]  914 	ljmp	00131$
      000222                        915 00208$:
                                    916 ;	life.c:113: return;
                                    917 ;	life.c:114: }
      000222 22               [24]  918 	ret
                                    919 ;------------------------------------------------------------
                                    920 ;Allocation info for local variables in function 'main'
                                    921 ;------------------------------------------------------------
                                    922 ;__2621440019              Allocated to registers 
                                    923 ;s                         Allocated to registers r5 r6 r7 
                                    924 ;__1310720013              Allocated to registers 
                                    925 ;s                         Allocated to registers r5 r6 r7 
                                    926 ;__1310720015              Allocated to registers r6 r7 
                                    927 ;a                         Allocated to registers r4 r5 
                                    928 ;__1310720017              Allocated to registers 
                                    929 ;s                         Allocated to registers r5 r6 r7 
                                    930 ;__2621440023              Allocated to registers 
                                    931 ;s                         Allocated to registers r5 r6 r7 
                                    932 ;__4587520027              Allocated to registers 
                                    933 ;s                         Allocated to registers r5 r6 r7 
                                    934 ;__4587520029              Allocated to registers 
                                    935 ;s                         Allocated to registers r5 r6 r7 
                                    936 ;__4587520031              Allocated to registers 
                                    937 ;s                         Allocated to registers r5 r6 r7 
                                    938 ;__3276800033              Allocated to registers 
                                    939 ;s                         Allocated to registers r5 r6 r7 
                                    940 ;__1310720035              Allocated to registers 
                                    941 ;s                         Allocated to registers r5 r6 r7 
                                    942 ;sloc0                     Allocated to stack - _bp +1
                                    943 ;sloc1                     Allocated to stack - _bp +3
                                    944 ;sloc2                     Allocated to stack - _bp +5
                                    945 ;sloc3                     Allocated to stack - _bp +7
                                    946 ;sloc4                     Allocated to stack - _bp +9
                                    947 ;sloc5                     Allocated to stack - _bp +11
                                    948 ;sloc6                     Allocated to stack - _bp +13
                                    949 ;------------------------------------------------------------
                                    950 ;	life.c:199: void main(void) {
                                    951 ;	-----------------------------------------
                                    952 ;	 function main
                                    953 ;	-----------------------------------------
      000223                        954 _main:
      000223 C0*00            [24]  955 	push	_bp
      000225 E5 81            [12]  956 	mov	a,sp
      000227 F5*00            [12]  957 	mov	_bp,a
      000229 24 0E            [12]  958 	add	a,#0x0e
      00022B F5 81            [12]  959 	mov	sp,a
                                    960 ;	life.c:200: IT0 = 1;
                                    961 ;	assignBit
      00022D D2 88            [12]  962 	setb	_IT0
                                    963 ;	life.c:201: IT1 = 1;
                                    964 ;	assignBit
      00022F D2 8A            [12]  965 	setb	_IT1
                                    966 ;	life.c:202: EX0 = 1;
                                    967 ;	assignBit
      000231 D2 A8            [12]  968 	setb	_EX0
                                    969 ;	life.c:203: EX1 = 1;
                                    970 ;	assignBit
      000233 D2 AA            [12]  971 	setb	_EX1
                                    972 ;	life.c:204: EA = 1;
                                    973 ;	assignBit
      000235 D2 AF            [12]  974 	setb	_EA
                                    975 ;	life.c:206: for (i0 = 0; !i0; ) {		
      000237 78r10            [12]  976 	mov	r0,#_i0
      000239 76 00            [12]  977 	mov	@r0,#0x00
      00023B                        978 00210$:
                                    979 ;	life.c:207: printstr("\033[2J\033[mINIT\r\n");
      00023B 7Dr16            [12]  980 	mov	r5,#___str_4
      00023D 7Es00            [12]  981 	mov	r6,#(___str_4 >> 8)
      00023F 7F 80            [12]  982 	mov	r7,#0x80
                                    983 ;	life.c:48: return;
      000241                        984 00175$:
                                    985 ;	life.c:46: for (; *s; s++) putchar(*s);
      000241 8D 82            [24]  986 	mov	dpl,r5
      000243 8E 83            [24]  987 	mov	dph,r6
      000245 8F F0            [24]  988 	mov	b,r7
      000247 12r00r00         [24]  989 	lcall	__gptrget
      00024A FC               [12]  990 	mov	r4,a
      00024B 60 10            [24]  991 	jz	00107$
      00024D 7B 00            [12]  992 	mov	r3,#0x00
      00024F 8C 82            [24]  993 	mov	dpl,r4
      000251 8B 83            [24]  994 	mov	dph,r3
      000253 12r00r00         [24]  995 	lcall	_putchar
      000256 0D               [12]  996 	inc	r5
                                    997 ;	life.c:208: while (1) {
      000257 BD 00 E7         [24]  998 	cjne	r5,#0x00,00175$
      00025A 0E               [12]  999 	inc	r6
      00025B 80 E4            [24] 1000 	sjmp	00175$
      00025D                       1001 00107$:
                                   1002 ;	life.c:209: c = getchar();
      00025D 12r00r05         [24] 1003 	lcall	_getchar
      000260 AE 82            [24] 1004 	mov	r6,dpl
      000262 AF 83            [24] 1005 	mov	r7,dph
      000264 78r18            [12] 1006 	mov	r0,#_c
      000266 A6 06            [24] 1007 	mov	@r0,ar6
      000268 08               [12] 1008 	inc	r0
      000269 A6 07            [24] 1009 	mov	@r0,ar7
                                   1010 ;	life.c:210: if (i0 || (c == (int)'T')) goto terminate;
      00026B 78r10            [12] 1011 	mov	r0,#_i0
      00026D E6               [12] 1012 	mov	a,@r0
      00026E 60 03            [24] 1013 	jz	00421$
      000270 02r09rB0         [24] 1014 	ljmp	00130$
      000273                       1015 00421$:
      000273 BE 54 06         [24] 1016 	cjne	r6,#0x54,00422$
      000276 BF 00 03         [24] 1017 	cjne	r7,#0x00,00422$
      000279 02r09rB0         [24] 1018 	ljmp	00130$
      00027C                       1019 00422$:
                                   1020 ;	life.c:211: if (c == (int)'L') break;
      00027C BE 4C DE         [24] 1021 	cjne	r6,#0x4c,00107$
      00027F BF 00 DB         [24] 1022 	cjne	r7,#0x00,00107$
                                   1023 ;	life.c:214: reload:
      000282                       1024 00109$:
                                   1025 ;	life.c:117: memset(u, 0, sizeof (u));
      000282 E4               [12] 1026 	clr	a
      000283 C0 E0            [24] 1027 	push	acc
      000285 74 08            [12] 1028 	mov	a,#0x08
      000287 C0 E0            [24] 1029 	push	acc
      000289 E4               [12] 1030 	clr	a
      00028A C0 E0            [24] 1031 	push	acc
      00028C 90r08r00         [24] 1032 	mov	dptr,#_u
      00028F 75 F0 00         [24] 1033 	mov	b,#0x00
      000292 12r00r00         [24] 1034 	lcall	_memset
      000295 15 81            [12] 1035 	dec	sp
      000297 15 81            [12] 1036 	dec	sp
      000299 15 81            [12] 1037 	dec	sp
                                   1038 ;	life.c:118: memset(pu, 0, sizeof (pu));
      00029B E4               [12] 1039 	clr	a
      00029C C0 E0            [24] 1040 	push	acc
      00029E 74 08            [12] 1041 	mov	a,#0x08
      0002A0 C0 E0            [24] 1042 	push	acc
      0002A2 E4               [12] 1043 	clr	a
      0002A3 C0 E0            [24] 1044 	push	acc
      0002A5 90r00r00         [24] 1045 	mov	dptr,#_pu
      0002A8 75 F0 00         [24] 1046 	mov	b,#0x00
      0002AB 12r00r00         [24] 1047 	lcall	_memset
      0002AE 15 81            [12] 1048 	dec	sp
      0002B0 15 81            [12] 1049 	dec	sp
      0002B2 15 81            [12] 1050 	dec	sp
                                   1051 ;	life.c:124: j = 0;
      0002B4 78r16            [12] 1052 	mov	r0,#_j
      0002B6 E4               [12] 1053 	clr	a
      0002B7 F6               [12] 1054 	mov	@r0,a
      0002B8 08               [12] 1055 	inc	r0
      0002B9 F6               [12] 1056 	mov	@r0,a
                                   1057 ;	life.c:126: printstr("LOAD <");
      0002BA 7Dr0B            [12] 1058 	mov	r5,#___str_2
      0002BC 7Es00            [12] 1059 	mov	r6,#(___str_2 >> 8)
      0002BE 7F 80            [12] 1060 	mov	r7,#0x80
                                   1061 ;	life.c:48: return;
      0002C0                       1062 00178$:
                                   1063 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002C0 8D 82            [24] 1064 	mov	dpl,r5
      0002C2 8E 83            [24] 1065 	mov	dph,r6
      0002C4 8F F0            [24] 1066 	mov	b,r7
      0002C6 12r00r00         [24] 1067 	lcall	__gptrget
      0002C9 FC               [12] 1068 	mov	r4,a
      0002CA 60 10            [24] 1069 	jz	00135$
      0002CC 7B 00            [12] 1070 	mov	r3,#0x00
      0002CE 8C 82            [24] 1071 	mov	dpl,r4
      0002D0 8B 83            [24] 1072 	mov	dph,r3
      0002D2 12r00r00         [24] 1073 	lcall	_putchar
      0002D5 0D               [12] 1074 	inc	r5
                                   1075 ;	life.c:126: printstr("LOAD <");
      0002D6 BD 00 E7         [24] 1076 	cjne	r5,#0x00,00178$
      0002D9 0E               [12] 1077 	inc	r6
      0002DA 80 E4            [24] 1078 	sjmp	00178$
      0002DC                       1079 00135$:
                                   1080 ;	life.c:128: for (y = 0; y < H; y++)
      0002DC 78r14            [12] 1081 	mov	r0,#_y
      0002DE E4               [12] 1082 	clr	a
      0002DF F6               [12] 1083 	mov	@r0,a
      0002E0 08               [12] 1084 	inc	r0
      0002E1 F6               [12] 1085 	mov	@r0,a
      0002E2                       1086 00182$:
                                   1087 ;	life.c:129: for (x = 0; x < W; x++) {
      0002E2 78r12            [12] 1088 	mov	r0,#_x
      0002E4 E4               [12] 1089 	clr	a
      0002E5 F6               [12] 1090 	mov	@r0,a
      0002E6 08               [12] 1091 	inc	r0
      0002E7 F6               [12] 1092 	mov	@r0,a
      0002E8                       1093 00180$:
                                   1094 ;	life.c:130: c = getchar();
      0002E8 12r00r05         [24] 1095 	lcall	_getchar
      0002EB AE 82            [24] 1096 	mov	r6,dpl
      0002ED AF 83            [24] 1097 	mov	r7,dph
      0002EF 78r18            [12] 1098 	mov	r0,#_c
      0002F1 A6 06            [24] 1099 	mov	@r0,ar6
      0002F3 08               [12] 1100 	inc	r0
      0002F4 A6 07            [24] 1101 	mov	@r0,ar7
                                   1102 ;	life.c:131: if (c == (int)'0') {
      0002F6 BE 30 37         [24] 1103 	cjne	r6,#0x30,00142$
      0002F9 BF 00 34         [24] 1104 	cjne	r7,#0x00,00142$
                                   1105 ;	life.c:132: u[A2D(W, y, x)] = 0;
      0002FC 78r14            [12] 1106 	mov	r0,#_y
      0002FE 86 04            [24] 1107 	mov	ar4,@r0
      000300 08               [12] 1108 	inc	r0
      000301 E6               [12] 1109 	mov	a,@r0
      000302 C4               [12] 1110 	swap	a
      000303 23               [12] 1111 	rl	a
      000304 54 E0            [12] 1112 	anl	a,#0xe0
      000306 CC               [12] 1113 	xch	a,r4
      000307 C4               [12] 1114 	swap	a
      000308 23               [12] 1115 	rl	a
      000309 CC               [12] 1116 	xch	a,r4
      00030A 6C               [12] 1117 	xrl	a,r4
      00030B CC               [12] 1118 	xch	a,r4
      00030C 54 E0            [12] 1119 	anl	a,#0xe0
      00030E CC               [12] 1120 	xch	a,r4
      00030F 6C               [12] 1121 	xrl	a,r4
      000310 FD               [12] 1122 	mov	r5,a
      000311 78r12            [12] 1123 	mov	r0,#_x
      000313 E6               [12] 1124 	mov	a,@r0
      000314 2C               [12] 1125 	add	a,r4
      000315 FC               [12] 1126 	mov	r4,a
      000316 08               [12] 1127 	inc	r0
      000317 E6               [12] 1128 	mov	a,@r0
      000318 3D               [12] 1129 	addc	a,r5
      000319 FD               [12] 1130 	mov	r5,a
      00031A EC               [12] 1131 	mov	a,r4
      00031B 24r00            [12] 1132 	add	a,#_u
      00031D F5 82            [12] 1133 	mov	dpl,a
      00031F ED               [12] 1134 	mov	a,r5
      000320 34s08            [12] 1135 	addc	a,#(_u >> 8)
      000322 F5 83            [12] 1136 	mov	dph,a
      000324 E4               [12] 1137 	clr	a
      000325 F0               [24] 1138 	movx	@dptr,a
                                   1139 ;	life.c:133: j++;
      000326 78r16            [12] 1140 	mov	r0,#_j
      000328 06               [12] 1141 	inc	@r0
      000329 B6 00 02         [24] 1142 	cjne	@r0,#0x00,00429$
      00032C 08               [12] 1143 	inc	r0
      00032D 06               [12] 1144 	inc	@r0
      00032E                       1145 00429$:
      00032E 80 43            [24] 1146 	sjmp	00181$
      000330                       1147 00142$:
                                   1148 ;	life.c:134: } else if (c == (int)'1') {
      000330 BE 31 38         [24] 1149 	cjne	r6,#0x31,00140$
      000333 BF 00 35         [24] 1150 	cjne	r7,#0x00,00140$
                                   1151 ;	life.c:135: u[A2D(W, y, x)] = 1;
      000336 78r14            [12] 1152 	mov	r0,#_y
      000338 86 04            [24] 1153 	mov	ar4,@r0
      00033A 08               [12] 1154 	inc	r0
      00033B E6               [12] 1155 	mov	a,@r0
      00033C C4               [12] 1156 	swap	a
      00033D 23               [12] 1157 	rl	a
      00033E 54 E0            [12] 1158 	anl	a,#0xe0
      000340 CC               [12] 1159 	xch	a,r4
      000341 C4               [12] 1160 	swap	a
      000342 23               [12] 1161 	rl	a
      000343 CC               [12] 1162 	xch	a,r4
      000344 6C               [12] 1163 	xrl	a,r4
      000345 CC               [12] 1164 	xch	a,r4
      000346 54 E0            [12] 1165 	anl	a,#0xe0
      000348 CC               [12] 1166 	xch	a,r4
      000349 6C               [12] 1167 	xrl	a,r4
      00034A FD               [12] 1168 	mov	r5,a
      00034B 78r12            [12] 1169 	mov	r0,#_x
      00034D E6               [12] 1170 	mov	a,@r0
      00034E 2C               [12] 1171 	add	a,r4
      00034F FC               [12] 1172 	mov	r4,a
      000350 08               [12] 1173 	inc	r0
      000351 E6               [12] 1174 	mov	a,@r0
      000352 3D               [12] 1175 	addc	a,r5
      000353 FD               [12] 1176 	mov	r5,a
      000354 EC               [12] 1177 	mov	a,r4
      000355 24r00            [12] 1178 	add	a,#_u
      000357 F5 82            [12] 1179 	mov	dpl,a
      000359 ED               [12] 1180 	mov	a,r5
      00035A 34s08            [12] 1181 	addc	a,#(_u >> 8)
      00035C F5 83            [12] 1182 	mov	dph,a
      00035E 74 01            [12] 1183 	mov	a,#0x01
      000360 F0               [24] 1184 	movx	@dptr,a
                                   1185 ;	life.c:136: j++;
      000361 78r16            [12] 1186 	mov	r0,#_j
      000363 06               [12] 1187 	inc	@r0
      000364 B6 00 02         [24] 1188 	cjne	@r0,#0x00,00432$
      000367 08               [12] 1189 	inc	r0
      000368 06               [12] 1190 	inc	@r0
      000369                       1191 00432$:
      000369 80 08            [24] 1192 	sjmp	00181$
      00036B                       1193 00140$:
                                   1194 ;	life.c:137: } else if (c == (int)'#') goto out;
      00036B BE 23 05         [24] 1195 	cjne	r6,#0x23,00433$
      00036E BF 00 02         [24] 1196 	cjne	r7,#0x00,00433$
      000371 80 32            [24] 1197 	sjmp	00153$
      000373                       1198 00433$:
      000373                       1199 00181$:
                                   1200 ;	life.c:129: for (x = 0; x < W; x++) {
      000373 78r12            [12] 1201 	mov	r0,#_x
      000375 06               [12] 1202 	inc	@r0
      000376 B6 00 02         [24] 1203 	cjne	@r0,#0x00,00434$
      000379 08               [12] 1204 	inc	r0
      00037A 06               [12] 1205 	inc	@r0
      00037B                       1206 00434$:
      00037B 78r12            [12] 1207 	mov	r0,#_x
      00037D C3               [12] 1208 	clr	c
      00037E E6               [12] 1209 	mov	a,@r0
      00037F 94 20            [12] 1210 	subb	a,#0x20
      000381 08               [12] 1211 	inc	r0
      000382 E6               [12] 1212 	mov	a,@r0
      000383 64 80            [12] 1213 	xrl	a,#0x80
      000385 94 80            [12] 1214 	subb	a,#0x80
      000387 50 03            [24] 1215 	jnc	00435$
      000389 02r02rE8         [24] 1216 	ljmp	00180$
      00038C                       1217 00435$:
                                   1218 ;	life.c:128: for (y = 0; y < H; y++)
      00038C 78r14            [12] 1219 	mov	r0,#_y
      00038E 06               [12] 1220 	inc	@r0
      00038F B6 00 02         [24] 1221 	cjne	@r0,#0x00,00436$
      000392 08               [12] 1222 	inc	r0
      000393 06               [12] 1223 	inc	@r0
      000394                       1224 00436$:
      000394 78r14            [12] 1225 	mov	r0,#_y
      000396 C3               [12] 1226 	clr	c
      000397 E6               [12] 1227 	mov	a,@r0
      000398 94 40            [12] 1228 	subb	a,#0x40
      00039A 08               [12] 1229 	inc	r0
      00039B E6               [12] 1230 	mov	a,@r0
      00039C 64 80            [12] 1231 	xrl	a,#0x80
      00039E 94 80            [12] 1232 	subb	a,#0x80
      0003A0 50 03            [24] 1233 	jnc	00437$
      0003A2 02r02rE2         [24] 1234 	ljmp	00182$
      0003A5                       1235 00437$:
                                   1236 ;	life.c:140: out:
      0003A5                       1237 00153$:
                                   1238 ;	life.c:141: if (c != (int)'#')
      0003A5 BE 23 05         [24] 1239 	cjne	r6,#0x23,00438$
      0003A8 BF 00 02         [24] 1240 	cjne	r7,#0x00,00438$
      0003AB 80 14            [24] 1241 	sjmp	00152$
      0003AD                       1242 00438$:
                                   1243 ;	life.c:142: while (1) {
      0003AD                       1244 00149$:
                                   1245 ;	life.c:143: c = getchar();
      0003AD 12r00r05         [24] 1246 	lcall	_getchar
      0003B0 AE 82            [24] 1247 	mov	r6,dpl
      0003B2 AF 83            [24] 1248 	mov	r7,dph
      0003B4 78r18            [12] 1249 	mov	r0,#_c
      0003B6 A6 06            [24] 1250 	mov	@r0,ar6
      0003B8 08               [12] 1251 	inc	r0
      0003B9 A6 07            [24] 1252 	mov	@r0,ar7
                                   1253 ;	life.c:144: if (c == (int)'#') break;
      0003BB BE 23 EF         [24] 1254 	cjne	r6,#0x23,00149$
      0003BE BF 00 EC         [24] 1255 	cjne	r7,#0x00,00149$
      0003C1                       1256 00152$:
                                   1257 ;	life.c:146: print16x(j);
      0003C1 78r16            [12] 1258 	mov	r0,#_j
      0003C3 86 06            [24] 1259 	mov	ar6,@r0
      0003C5 08               [12] 1260 	inc	r0
      0003C6 86 07            [24] 1261 	mov	ar7,@r0
      0003C8 8E 04            [24] 1262 	mov	ar4,r6
                                   1263 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0003CA EF               [12] 1264 	mov	a,r7
      0003CB FD               [12] 1265 	mov	r5,a
      0003CC C4               [12] 1266 	swap	a
      0003CD 54 0F            [12] 1267 	anl	a,#0x0f
      0003CF 30 E3 02         [24] 1268 	jnb	acc.3,00441$
      0003D2 44 F0            [12] 1269 	orl	a,#0xf0
      0003D4                       1270 00441$:
      0003D4 FE               [12] 1271 	mov	r6,a
      0003D5 33               [12] 1272 	rlc	a
      0003D6 95 E0            [12] 1273 	subb	a,acc
      0003D8 53 06 0F         [24] 1274 	anl	ar6,#0x0f
      0003DB EE               [12] 1275 	mov	a,r6
      0003DC 24r00            [12] 1276 	add	a,#_digits
      0003DE F9               [12] 1277 	mov	r1,a
      0003DF 87 07            [24] 1278 	mov	ar7,@r1
      0003E1 7E 00            [12] 1279 	mov	r6,#0x00
      0003E3 8F 82            [24] 1280 	mov	dpl,r7
      0003E5 8E 83            [24] 1281 	mov	dph,r6
      0003E7 12r00r00         [24] 1282 	lcall	_putchar
                                   1283 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      0003EA 8D 07            [24] 1284 	mov	ar7,r5
      0003EC 53 07 0F         [24] 1285 	anl	ar7,#0x0f
      0003EF EF               [12] 1286 	mov	a,r7
      0003F0 24r00            [12] 1287 	add	a,#_digits
      0003F2 F9               [12] 1288 	mov	r1,a
      0003F3 87 07            [24] 1289 	mov	ar7,@r1
      0003F5 7E 00            [12] 1290 	mov	r6,#0x00
      0003F7 8F 82            [24] 1291 	mov	dpl,r7
      0003F9 8E 83            [24] 1292 	mov	dph,r6
      0003FB 12r00r00         [24] 1293 	lcall	_putchar
                                   1294 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0003FE 8C 06            [24] 1295 	mov	ar6,r4
      000400 ED               [12] 1296 	mov	a,r5
      000401 C4               [12] 1297 	swap	a
      000402 CE               [12] 1298 	xch	a,r6
      000403 C4               [12] 1299 	swap	a
      000404 54 0F            [12] 1300 	anl	a,#0x0f
      000406 6E               [12] 1301 	xrl	a,r6
      000407 CE               [12] 1302 	xch	a,r6
      000408 54 0F            [12] 1303 	anl	a,#0x0f
      00040A CE               [12] 1304 	xch	a,r6
      00040B 6E               [12] 1305 	xrl	a,r6
      00040C CE               [12] 1306 	xch	a,r6
      00040D 30 E3 02         [24] 1307 	jnb	acc.3,00442$
      000410 44 F0            [12] 1308 	orl	a,#0xf0
      000412                       1309 00442$:
      000412 53 06 0F         [24] 1310 	anl	ar6,#0x0f
      000415 EE               [12] 1311 	mov	a,r6
      000416 24r00            [12] 1312 	add	a,#_digits
      000418 F9               [12] 1313 	mov	r1,a
      000419 87 07            [24] 1314 	mov	ar7,@r1
      00041B 7E 00            [12] 1315 	mov	r6,#0x00
      00041D 8F 82            [24] 1316 	mov	dpl,r7
      00041F 8E 83            [24] 1317 	mov	dph,r6
      000421 12r00r00         [24] 1318 	lcall	_putchar
                                   1319 ;	life.c:40: putchar(digits[a & 0xf]);
      000424 53 04 0F         [24] 1320 	anl	ar4,#0x0f
      000427 EC               [12] 1321 	mov	a,r4
      000428 24r00            [12] 1322 	add	a,#_digits
      00042A F9               [12] 1323 	mov	r1,a
      00042B 87 07            [24] 1324 	mov	ar7,@r1
      00042D 7E 00            [12] 1325 	mov	r6,#0x00
      00042F 8F 82            [24] 1326 	mov	dpl,r7
      000431 8E 83            [24] 1327 	mov	dph,r6
      000433 12r00r00         [24] 1328 	lcall	_putchar
                                   1329 ;	life.c:147: printstr(">\r\n");
      000436 7Dr12            [12] 1330 	mov	r5,#___str_3
      000438 7Es00            [12] 1331 	mov	r6,#(___str_3 >> 8)
      00043A 7F 80            [12] 1332 	mov	r7,#0x80
                                   1333 ;	life.c:48: return;
      00043C                       1334 00185$:
                                   1335 ;	life.c:46: for (; *s; s++) putchar(*s);
      00043C 8D 82            [24] 1336 	mov	dpl,r5
      00043E 8E 83            [24] 1337 	mov	dph,r6
      000440 8F F0            [24] 1338 	mov	b,r7
      000442 12r00r00         [24] 1339 	lcall	__gptrget
      000445 FC               [12] 1340 	mov	r4,a
      000446 60 10            [24] 1341 	jz	00156$
      000448 7B 00            [12] 1342 	mov	r3,#0x00
      00044A 8C 82            [24] 1343 	mov	dpl,r4
      00044C 8B 83            [24] 1344 	mov	dph,r3
      00044E 12r00r00         [24] 1345 	lcall	_putchar
      000451 0D               [12] 1346 	inc	r5
                                   1347 ;	life.c:147: printstr(">\r\n");
      000452 BD 00 E7         [24] 1348 	cjne	r5,#0x00,00185$
      000455 0E               [12] 1349 	inc	r6
      000456 80 E4            [24] 1350 	sjmp	00185$
      000458                       1351 00156$:
                                   1352 ;	life.c:217: show(0);
      000458 75 82 00         [24] 1353 	mov	dpl,#0x00
      00045B 12r00r26         [24] 1354 	lcall	_show
                                   1355 ;	life.c:219: printstr("READY\r\n");
      00045E 7Dr24            [12] 1356 	mov	r5,#___str_5
      000460 7Es00            [12] 1357 	mov	r6,#(___str_5 >> 8)
      000462 7F 80            [12] 1358 	mov	r7,#0x80
                                   1359 ;	life.c:48: return;
      000464                       1360 00188$:
                                   1361 ;	life.c:46: for (; *s; s++) putchar(*s);
      000464 8D 82            [24] 1362 	mov	dpl,r5
      000466 8E 83            [24] 1363 	mov	dph,r6
      000468 8F F0            [24] 1364 	mov	b,r7
      00046A 12r00r00         [24] 1365 	lcall	__gptrget
      00046D FC               [12] 1366 	mov	r4,a
      00046E 60 10            [24] 1367 	jz	00118$
      000470 7B 00            [12] 1368 	mov	r3,#0x00
      000472 8C 82            [24] 1369 	mov	dpl,r4
      000474 8B 83            [24] 1370 	mov	dph,r3
      000476 12r00r00         [24] 1371 	lcall	_putchar
      000479 0D               [12] 1372 	inc	r5
                                   1373 ;	life.c:220: while (1) {
      00047A BD 00 E7         [24] 1374 	cjne	r5,#0x00,00188$
      00047D 0E               [12] 1375 	inc	r6
      00047E 80 E4            [24] 1376 	sjmp	00188$
      000480                       1377 00118$:
                                   1378 ;	life.c:221: c = getchar();
      000480 12r00r05         [24] 1379 	lcall	_getchar
      000483 AE 82            [24] 1380 	mov	r6,dpl
      000485 AF 83            [24] 1381 	mov	r7,dph
      000487 78r18            [12] 1382 	mov	r0,#_c
      000489 A6 06            [24] 1383 	mov	@r0,ar6
      00048B 08               [12] 1384 	inc	r0
      00048C A6 07            [24] 1385 	mov	@r0,ar7
                                   1386 ;	life.c:222: if (i0 || (c == (int)'T')) goto terminate;
      00048E 78r10            [12] 1387 	mov	r0,#_i0
      000490 E6               [12] 1388 	mov	a,@r0
      000491 60 03            [24] 1389 	jz	00447$
      000493 02r09rB0         [24] 1390 	ljmp	00130$
      000496                       1391 00447$:
      000496 BE 54 06         [24] 1392 	cjne	r6,#0x54,00448$
      000499 BF 00 03         [24] 1393 	cjne	r7,#0x00,00448$
      00049C 02r09rB0         [24] 1394 	ljmp	00130$
      00049F                       1395 00448$:
                                   1396 ;	life.c:223: if (c == (int)'L') goto reload;
      00049F BE 4C 06         [24] 1397 	cjne	r6,#0x4c,00449$
      0004A2 BF 00 03         [24] 1398 	cjne	r7,#0x00,00449$
      0004A5 02r02r82         [24] 1399 	ljmp	00109$
      0004A8                       1400 00449$:
                                   1401 ;	life.c:224: if (c == (int)'S') break;
      0004A8 BE 53 D5         [24] 1402 	cjne	r6,#0x53,00118$
      0004AB BF 00 D2         [24] 1403 	cjne	r7,#0x00,00118$
                                   1404 ;	life.c:75: generation[0] = 0;
      0004AE 78r22            [12] 1405 	mov	r0,#_generation
      0004B0 76 00            [12] 1406 	mov	@r0,#0x00
      0004B2 08               [12] 1407 	inc	r0
      0004B3 76 00            [12] 1408 	mov	@r0,#0x00
                                   1409 ;	life.c:76: generation[1] = 0;
      0004B5 78r24            [12] 1410 	mov	r0,#(_generation + 0x0002)
      0004B7 76 00            [12] 1411 	mov	@r0,#0x00
      0004B9 08               [12] 1412 	inc	r0
      0004BA 76 00            [12] 1413 	mov	@r0,#0x00
                                   1414 ;	life.c:229: for (i1 = 0; !i0 && !i1; ) {
      0004BC 78r11            [12] 1415 	mov	r0,#_i1
      0004BE 76 00            [12] 1416 	mov	@r0,#0x00
      0004C0                       1417 00205$:
      0004C0 78r10            [12] 1418 	mov	r0,#_i0
      0004C2 E6               [12] 1419 	mov	a,@r0
      0004C3 60 03            [24] 1420 	jz	00452$
      0004C5 02r09r7E         [24] 1421 	ljmp	00126$
      0004C8                       1422 00452$:
      0004C8 78r11            [12] 1423 	mov	r0,#_i1
      0004CA E6               [12] 1424 	mov	a,@r0
      0004CB 60 03            [24] 1425 	jz	00453$
      0004CD 02r09r7E         [24] 1426 	ljmp	00126$
      0004D0                       1427 00453$:
                                   1428 ;	life.c:230: show(1);
      0004D0 75 82 01         [24] 1429 	mov	dpl,#0x01
      0004D3 12r00r26         [24] 1430 	lcall	_show
                                   1431 ;	life.c:155: fixed = 0;
      0004D6 78r1C            [12] 1432 	mov	r0,#_fixed
      0004D8 76 00            [12] 1433 	mov	@r0,#0x00
                                   1434 ;	life.c:156: cycle2 = 0;
      0004DA 78r1D            [12] 1435 	mov	r0,#_cycle2
      0004DC 76 00            [12] 1436 	mov	@r0,#0x00
                                   1437 ;	life.c:157: bstep = 0;
      0004DE 78r1A            [12] 1438 	mov	r0,#_bstep
      0004E0 76 00            [12] 1439 	mov	@r0,#0x00
                                   1440 ;	life.c:159: for (y = 0; y < H; y++) {
      0004E2 78r14            [12] 1441 	mov	r0,#_y
      0004E4 E4               [12] 1442 	clr	a
      0004E5 F6               [12] 1443 	mov	@r0,a
      0004E6 08               [12] 1444 	inc	r0
      0004E7 F6               [12] 1445 	mov	@r0,a
      0004E8                       1446 00192$:
                                   1447 ;	life.c:160: putchar(busy[bstep]); putchar('\r');
      0004E8 78r1A            [12] 1448 	mov	r0,#_bstep
      0004EA E6               [12] 1449 	mov	a,@r0
      0004EB 24r26            [12] 1450 	add	a,#_busy
      0004ED F9               [12] 1451 	mov	r1,a
      0004EE 87 07            [24] 1452 	mov	ar7,@r1
      0004F0 7E 00            [12] 1453 	mov	r6,#0x00
      0004F2 8F 82            [24] 1454 	mov	dpl,r7
      0004F4 8E 83            [24] 1455 	mov	dph,r6
      0004F6 12r00r00         [24] 1456 	lcall	_putchar
      0004F9 90 00 0D         [24] 1457 	mov	dptr,#0x000d
      0004FC 12r00r00         [24] 1458 	lcall	_putchar
                                   1459 ;	life.c:161: bstep = (bstep + 1) & 3;
      0004FF 78r1A            [12] 1460 	mov	r0,#_bstep
      000501 86 07            [24] 1461 	mov	ar7,@r0
      000503 0F               [12] 1462 	inc	r7
      000504 78r1A            [12] 1463 	mov	r0,#_bstep
      000506 74 03            [12] 1464 	mov	a,#0x03
      000508 5F               [12] 1465 	anl	a,r7
      000509 F6               [12] 1466 	mov	@r0,a
                                   1467 ;	life.c:162: for (x = 0; x < W; x++) {
      00050A 78r12            [12] 1468 	mov	r0,#_x
      00050C E4               [12] 1469 	clr	a
      00050D F6               [12] 1470 	mov	@r0,a
      00050E 08               [12] 1471 	inc	r0
      00050F F6               [12] 1472 	mov	@r0,a
      000510                       1473 00190$:
                                   1474 ;	life.c:163: n = -u[A2D(W, y, x)];
      000510 78r14            [12] 1475 	mov	r0,#_y
      000512 E5*00            [12] 1476 	mov	a,_bp
      000514 24 03            [12] 1477 	add	a,#0x03
      000516 F9               [12] 1478 	mov	r1,a
      000517 E6               [12] 1479 	mov	a,@r0
      000518 F7               [12] 1480 	mov	@r1,a
      000519 08               [12] 1481 	inc	r0
      00051A E6               [12] 1482 	mov	a,@r0
      00051B C4               [12] 1483 	swap	a
      00051C 23               [12] 1484 	rl	a
      00051D 54 E0            [12] 1485 	anl	a,#0xe0
      00051F C7               [12] 1486 	xch	a,@r1
      000520 C4               [12] 1487 	swap	a
      000521 23               [12] 1488 	rl	a
      000522 C7               [12] 1489 	xch	a,@r1
      000523 67               [12] 1490 	xrl	a,@r1
      000524 C7               [12] 1491 	xch	a,@r1
      000525 54 E0            [12] 1492 	anl	a,#0xe0
      000527 C7               [12] 1493 	xch	a,@r1
      000528 67               [12] 1494 	xrl	a,@r1
      000529 09               [12] 1495 	inc	r1
      00052A F7               [12] 1496 	mov	@r1,a
      00052B E5*00            [12] 1497 	mov	a,_bp
      00052D 24 03            [12] 1498 	add	a,#0x03
      00052F F8               [12] 1499 	mov	r0,a
      000530 79r12            [12] 1500 	mov	r1,#_x
      000532 E7               [12] 1501 	mov	a,@r1
      000533 26               [12] 1502 	add	a,@r0
      000534 C0 E0            [24] 1503 	push	acc
      000536 09               [12] 1504 	inc	r1
      000537 E7               [12] 1505 	mov	a,@r1
      000538 08               [12] 1506 	inc	r0
      000539 36               [12] 1507 	addc	a,@r0
      00053A C0 E0            [24] 1508 	push	acc
      00053C A8*00            [24] 1509 	mov	r0,_bp
      00053E 08               [12] 1510 	inc	r0
      00053F 08               [12] 1511 	inc	r0
      000540 D0 E0            [24] 1512 	pop	acc
      000542 F6               [12] 1513 	mov	@r0,a
      000543 18               [12] 1514 	dec	r0
      000544 D0 E0            [24] 1515 	pop	acc
      000546 F6               [12] 1516 	mov	@r0,a
      000547 A8*00            [24] 1517 	mov	r0,_bp
      000549 08               [12] 1518 	inc	r0
      00054A E6               [12] 1519 	mov	a,@r0
      00054B 24r00            [12] 1520 	add	a,#_u
      00054D F5 82            [12] 1521 	mov	dpl,a
      00054F 08               [12] 1522 	inc	r0
      000550 E6               [12] 1523 	mov	a,@r0
      000551 34s08            [12] 1524 	addc	a,#(_u >> 8)
      000553 F5 83            [12] 1525 	mov	dph,a
      000555 E0               [24] 1526 	movx	a,@dptr
      000556 FB               [12] 1527 	mov	r3,a
      000557 C3               [12] 1528 	clr	c
      000558 E4               [12] 1529 	clr	a
      000559 9B               [12] 1530 	subb	a,r3
      00055A FB               [12] 1531 	mov	r3,a
                                   1532 ;	life.c:166: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00055B 78r14            [12] 1533 	mov	r0,#_y
      00055D 74 FF            [12] 1534 	mov	a,#0xff
      00055F 26               [12] 1535 	add	a,@r0
      000560 FA               [12] 1536 	mov	r2,a
      000561 74 FF            [12] 1537 	mov	a,#0xff
      000563 08               [12] 1538 	inc	r0
      000564 36               [12] 1539 	addc	a,@r0
      000565 FD               [12] 1540 	mov	r5,a
      000566 74 40            [12] 1541 	mov	a,#0x40
      000568 2A               [12] 1542 	add	a,r2
      000569 FA               [12] 1543 	mov	r2,a
      00056A E4               [12] 1544 	clr	a
      00056B 3D               [12] 1545 	addc	a,r5
      00056C FD               [12] 1546 	mov	r5,a
      00056D C0 03            [24] 1547 	push	ar3
      00056F 74 40            [12] 1548 	mov	a,#0x40
      000571 C0 E0            [24] 1549 	push	acc
      000573 E4               [12] 1550 	clr	a
      000574 C0 E0            [24] 1551 	push	acc
      000576 8A 82            [24] 1552 	mov	dpl,r2
      000578 8D 83            [24] 1553 	mov	dph,r5
      00057A 12r00r00         [24] 1554 	lcall	__modsint
      00057D AC 82            [24] 1555 	mov	r4,dpl
      00057F AD 83            [24] 1556 	mov	r5,dph
      000581 15 81            [12] 1557 	dec	sp
      000583 15 81            [12] 1558 	dec	sp
      000585 D0 03            [24] 1559 	pop	ar3
      000587 ED               [12] 1560 	mov	a,r5
      000588 C4               [12] 1561 	swap	a
      000589 23               [12] 1562 	rl	a
      00058A 54 E0            [12] 1563 	anl	a,#0xe0
      00058C CC               [12] 1564 	xch	a,r4
      00058D C4               [12] 1565 	swap	a
      00058E 23               [12] 1566 	rl	a
      00058F CC               [12] 1567 	xch	a,r4
      000590 6C               [12] 1568 	xrl	a,r4
      000591 CC               [12] 1569 	xch	a,r4
      000592 54 E0            [12] 1570 	anl	a,#0xe0
      000594 CC               [12] 1571 	xch	a,r4
      000595 6C               [12] 1572 	xrl	a,r4
      000596 FD               [12] 1573 	mov	r5,a
      000597 78r12            [12] 1574 	mov	r0,#_x
      000599 74 FF            [12] 1575 	mov	a,#0xff
      00059B 26               [12] 1576 	add	a,@r0
      00059C FA               [12] 1577 	mov	r2,a
      00059D 74 FF            [12] 1578 	mov	a,#0xff
      00059F 08               [12] 1579 	inc	r0
      0005A0 36               [12] 1580 	addc	a,@r0
      0005A1 FF               [12] 1581 	mov	r7,a
      0005A2 74 20            [12] 1582 	mov	a,#0x20
      0005A4 2A               [12] 1583 	add	a,r2
      0005A5 FA               [12] 1584 	mov	r2,a
      0005A6 E4               [12] 1585 	clr	a
      0005A7 3F               [12] 1586 	addc	a,r7
      0005A8 FF               [12] 1587 	mov	r7,a
      0005A9 C0 05            [24] 1588 	push	ar5
      0005AB C0 04            [24] 1589 	push	ar4
      0005AD C0 03            [24] 1590 	push	ar3
      0005AF 74 20            [12] 1591 	mov	a,#0x20
      0005B1 C0 E0            [24] 1592 	push	acc
      0005B3 E4               [12] 1593 	clr	a
      0005B4 C0 E0            [24] 1594 	push	acc
      0005B6 8A 82            [24] 1595 	mov	dpl,r2
      0005B8 8F 83            [24] 1596 	mov	dph,r7
      0005BA 12r00r00         [24] 1597 	lcall	__modsint
      0005BD C8               [12] 1598 	xch	a,r0
      0005BE E5*00            [12] 1599 	mov	a,_bp
      0005C0 24 05            [12] 1600 	add	a,#0x05
      0005C2 C8               [12] 1601 	xch	a,r0
      0005C3 A6 82            [24] 1602 	mov	@r0,dpl
      0005C5 08               [12] 1603 	inc	r0
      0005C6 A6 83            [24] 1604 	mov	@r0,dph
      0005C8 15 81            [12] 1605 	dec	sp
      0005CA 15 81            [12] 1606 	dec	sp
      0005CC D0 03            [24] 1607 	pop	ar3
      0005CE D0 04            [24] 1608 	pop	ar4
      0005D0 D0 05            [24] 1609 	pop	ar5
      0005D2 E5*00            [12] 1610 	mov	a,_bp
      0005D4 24 05            [12] 1611 	add	a,#0x05
      0005D6 F8               [12] 1612 	mov	r0,a
      0005D7 E6               [12] 1613 	mov	a,@r0
      0005D8 2C               [12] 1614 	add	a,r4
      0005D9 FA               [12] 1615 	mov	r2,a
      0005DA 08               [12] 1616 	inc	r0
      0005DB E6               [12] 1617 	mov	a,@r0
      0005DC 3D               [12] 1618 	addc	a,r5
      0005DD FF               [12] 1619 	mov	r7,a
      0005DE EA               [12] 1620 	mov	a,r2
      0005DF 24r00            [12] 1621 	add	a,#_u
      0005E1 F5 82            [12] 1622 	mov	dpl,a
      0005E3 EF               [12] 1623 	mov	a,r7
      0005E4 34s08            [12] 1624 	addc	a,#(_u >> 8)
      0005E6 F5 83            [12] 1625 	mov	dph,a
      0005E8 E0               [24] 1626 	movx	a,@dptr
      0005E9 2B               [12] 1627 	add	a,r3
      0005EA FB               [12] 1628 	mov	r3,a
                                   1629 ;	life.c:168: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0005EB 78r12            [12] 1630 	mov	r0,#_x
      0005ED E5*00            [12] 1631 	mov	a,_bp
      0005EF 24 07            [12] 1632 	add	a,#0x07
      0005F1 F9               [12] 1633 	mov	r1,a
      0005F2 E6               [12] 1634 	mov	a,@r0
      0005F3 F7               [12] 1635 	mov	@r1,a
      0005F4 08               [12] 1636 	inc	r0
      0005F5 09               [12] 1637 	inc	r1
      0005F6 E6               [12] 1638 	mov	a,@r0
      0005F7 F7               [12] 1639 	mov	@r1,a
      0005F8 E5*00            [12] 1640 	mov	a,_bp
      0005FA 24 07            [12] 1641 	add	a,#0x07
      0005FC F8               [12] 1642 	mov	r0,a
      0005FD 74 20            [12] 1643 	mov	a,#0x20
      0005FF 26               [12] 1644 	add	a,@r0
      000600 FA               [12] 1645 	mov	r2,a
      000601 E4               [12] 1646 	clr	a
      000602 08               [12] 1647 	inc	r0
      000603 36               [12] 1648 	addc	a,@r0
      000604 FF               [12] 1649 	mov	r7,a
      000605 C0 05            [24] 1650 	push	ar5
      000607 C0 04            [24] 1651 	push	ar4
      000609 C0 03            [24] 1652 	push	ar3
      00060B 74 20            [12] 1653 	mov	a,#0x20
      00060D C0 E0            [24] 1654 	push	acc
      00060F E4               [12] 1655 	clr	a
      000610 C0 E0            [24] 1656 	push	acc
      000612 8A 82            [24] 1657 	mov	dpl,r2
      000614 8F 83            [24] 1658 	mov	dph,r7
      000616 12r00r00         [24] 1659 	lcall	__modsint
      000619 C8               [12] 1660 	xch	a,r0
      00061A E5*00            [12] 1661 	mov	a,_bp
      00061C 24 09            [12] 1662 	add	a,#0x09
      00061E C8               [12] 1663 	xch	a,r0
      00061F A6 82            [24] 1664 	mov	@r0,dpl
      000621 08               [12] 1665 	inc	r0
      000622 A6 83            [24] 1666 	mov	@r0,dph
      000624 15 81            [12] 1667 	dec	sp
      000626 15 81            [12] 1668 	dec	sp
      000628 D0 03            [24] 1669 	pop	ar3
      00062A D0 04            [24] 1670 	pop	ar4
      00062C D0 05            [24] 1671 	pop	ar5
      00062E E5*00            [12] 1672 	mov	a,_bp
      000630 24 09            [12] 1673 	add	a,#0x09
      000632 F8               [12] 1674 	mov	r0,a
      000633 E6               [12] 1675 	mov	a,@r0
      000634 2C               [12] 1676 	add	a,r4
      000635 FA               [12] 1677 	mov	r2,a
      000636 08               [12] 1678 	inc	r0
      000637 E6               [12] 1679 	mov	a,@r0
      000638 3D               [12] 1680 	addc	a,r5
      000639 FF               [12] 1681 	mov	r7,a
      00063A EA               [12] 1682 	mov	a,r2
      00063B 24r00            [12] 1683 	add	a,#_u
      00063D F5 82            [12] 1684 	mov	dpl,a
      00063F EF               [12] 1685 	mov	a,r7
      000640 34s08            [12] 1686 	addc	a,#(_u >> 8)
      000642 F5 83            [12] 1687 	mov	dph,a
      000644 E0               [24] 1688 	movx	a,@dptr
      000645 2B               [12] 1689 	add	a,r3
      000646 FB               [12] 1690 	mov	r3,a
                                   1691 ;	life.c:170: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000647 E5*00            [12] 1692 	mov	a,_bp
      000649 24 07            [12] 1693 	add	a,#0x07
      00064B F8               [12] 1694 	mov	r0,a
      00064C 74 21            [12] 1695 	mov	a,#0x21
      00064E 26               [12] 1696 	add	a,@r0
      00064F FE               [12] 1697 	mov	r6,a
      000650 E4               [12] 1698 	clr	a
      000651 08               [12] 1699 	inc	r0
      000652 36               [12] 1700 	addc	a,@r0
      000653 FF               [12] 1701 	mov	r7,a
      000654 C0 05            [24] 1702 	push	ar5
      000656 C0 04            [24] 1703 	push	ar4
      000658 C0 03            [24] 1704 	push	ar3
      00065A 74 20            [12] 1705 	mov	a,#0x20
      00065C C0 E0            [24] 1706 	push	acc
      00065E E4               [12] 1707 	clr	a
      00065F C0 E0            [24] 1708 	push	acc
      000661 8E 82            [24] 1709 	mov	dpl,r6
      000663 8F 83            [24] 1710 	mov	dph,r7
      000665 12r00r00         [24] 1711 	lcall	__modsint
      000668 AE 82            [24] 1712 	mov	r6,dpl
      00066A AF 83            [24] 1713 	mov	r7,dph
      00066C 15 81            [12] 1714 	dec	sp
      00066E 15 81            [12] 1715 	dec	sp
      000670 D0 03            [24] 1716 	pop	ar3
      000672 D0 04            [24] 1717 	pop	ar4
      000674 D0 05            [24] 1718 	pop	ar5
      000676 EE               [12] 1719 	mov	a,r6
      000677 2C               [12] 1720 	add	a,r4
      000678 FC               [12] 1721 	mov	r4,a
      000679 EF               [12] 1722 	mov	a,r7
      00067A 3D               [12] 1723 	addc	a,r5
      00067B FD               [12] 1724 	mov	r5,a
      00067C EC               [12] 1725 	mov	a,r4
      00067D 24r00            [12] 1726 	add	a,#_u
      00067F F5 82            [12] 1727 	mov	dpl,a
      000681 ED               [12] 1728 	mov	a,r5
      000682 34s08            [12] 1729 	addc	a,#(_u >> 8)
      000684 F5 83            [12] 1730 	mov	dph,a
      000686 E0               [24] 1731 	movx	a,@dptr
      000687 2B               [12] 1732 	add	a,r3
      000688 FB               [12] 1733 	mov	r3,a
                                   1734 ;	life.c:172: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000689 78r14            [12] 1735 	mov	r0,#_y
      00068B E5*00            [12] 1736 	mov	a,_bp
      00068D 24 0B            [12] 1737 	add	a,#0x0b
      00068F F9               [12] 1738 	mov	r1,a
      000690 E6               [12] 1739 	mov	a,@r0
      000691 F7               [12] 1740 	mov	@r1,a
      000692 08               [12] 1741 	inc	r0
      000693 09               [12] 1742 	inc	r1
      000694 E6               [12] 1743 	mov	a,@r0
      000695 F7               [12] 1744 	mov	@r1,a
      000696 E5*00            [12] 1745 	mov	a,_bp
      000698 24 0B            [12] 1746 	add	a,#0x0b
      00069A F8               [12] 1747 	mov	r0,a
      00069B 74 40            [12] 1748 	mov	a,#0x40
      00069D 26               [12] 1749 	add	a,@r0
      00069E FA               [12] 1750 	mov	r2,a
      00069F E4               [12] 1751 	clr	a
      0006A0 08               [12] 1752 	inc	r0
      0006A1 36               [12] 1753 	addc	a,@r0
      0006A2 FD               [12] 1754 	mov	r5,a
      0006A3 C0 07            [24] 1755 	push	ar7
      0006A5 C0 06            [24] 1756 	push	ar6
      0006A7 C0 03            [24] 1757 	push	ar3
      0006A9 74 40            [12] 1758 	mov	a,#0x40
      0006AB C0 E0            [24] 1759 	push	acc
      0006AD E4               [12] 1760 	clr	a
      0006AE C0 E0            [24] 1761 	push	acc
      0006B0 8A 82            [24] 1762 	mov	dpl,r2
      0006B2 8D 83            [24] 1763 	mov	dph,r5
      0006B4 12r00r00         [24] 1764 	lcall	__modsint
      0006B7 AC 82            [24] 1765 	mov	r4,dpl
      0006B9 AD 83            [24] 1766 	mov	r5,dph
      0006BB 15 81            [12] 1767 	dec	sp
      0006BD 15 81            [12] 1768 	dec	sp
      0006BF D0 03            [24] 1769 	pop	ar3
      0006C1 D0 06            [24] 1770 	pop	ar6
      0006C3 D0 07            [24] 1771 	pop	ar7
      0006C5 E5*00            [12] 1772 	mov	a,_bp
      0006C7 24 0D            [12] 1773 	add	a,#0x0d
      0006C9 F8               [12] 1774 	mov	r0,a
      0006CA A6 04            [24] 1775 	mov	@r0,ar4
      0006CC ED               [12] 1776 	mov	a,r5
      0006CD C4               [12] 1777 	swap	a
      0006CE 23               [12] 1778 	rl	a
      0006CF 54 E0            [12] 1779 	anl	a,#0xe0
      0006D1 C6               [12] 1780 	xch	a,@r0
      0006D2 C4               [12] 1781 	swap	a
      0006D3 23               [12] 1782 	rl	a
      0006D4 C6               [12] 1783 	xch	a,@r0
      0006D5 66               [12] 1784 	xrl	a,@r0
      0006D6 C6               [12] 1785 	xch	a,@r0
      0006D7 54 E0            [12] 1786 	anl	a,#0xe0
      0006D9 C6               [12] 1787 	xch	a,@r0
      0006DA 66               [12] 1788 	xrl	a,@r0
      0006DB 08               [12] 1789 	inc	r0
      0006DC F6               [12] 1790 	mov	@r0,a
      0006DD E5*00            [12] 1791 	mov	a,_bp
      0006DF 24 0D            [12] 1792 	add	a,#0x0d
      0006E1 F8               [12] 1793 	mov	r0,a
      0006E2 E5*00            [12] 1794 	mov	a,_bp
      0006E4 24 05            [12] 1795 	add	a,#0x05
      0006E6 F9               [12] 1796 	mov	r1,a
      0006E7 E7               [12] 1797 	mov	a,@r1
      0006E8 26               [12] 1798 	add	a,@r0
      0006E9 FA               [12] 1799 	mov	r2,a
      0006EA 09               [12] 1800 	inc	r1
      0006EB E7               [12] 1801 	mov	a,@r1
      0006EC 08               [12] 1802 	inc	r0
      0006ED 36               [12] 1803 	addc	a,@r0
      0006EE FD               [12] 1804 	mov	r5,a
      0006EF EA               [12] 1805 	mov	a,r2
      0006F0 24r00            [12] 1806 	add	a,#_u
      0006F2 F5 82            [12] 1807 	mov	dpl,a
      0006F4 ED               [12] 1808 	mov	a,r5
      0006F5 34s08            [12] 1809 	addc	a,#(_u >> 8)
      0006F7 F5 83            [12] 1810 	mov	dph,a
      0006F9 E0               [24] 1811 	movx	a,@dptr
      0006FA 2B               [12] 1812 	add	a,r3
      0006FB FB               [12] 1813 	mov	r3,a
                                   1814 ;	life.c:174: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006FC E5*00            [12] 1815 	mov	a,_bp
      0006FE 24 0D            [12] 1816 	add	a,#0x0d
      000700 F8               [12] 1817 	mov	r0,a
      000701 E5*00            [12] 1818 	mov	a,_bp
      000703 24 09            [12] 1819 	add	a,#0x09
      000705 F9               [12] 1820 	mov	r1,a
      000706 E7               [12] 1821 	mov	a,@r1
      000707 26               [12] 1822 	add	a,@r0
      000708 FC               [12] 1823 	mov	r4,a
      000709 09               [12] 1824 	inc	r1
      00070A E7               [12] 1825 	mov	a,@r1
      00070B 08               [12] 1826 	inc	r0
      00070C 36               [12] 1827 	addc	a,@r0
      00070D FD               [12] 1828 	mov	r5,a
      00070E EC               [12] 1829 	mov	a,r4
      00070F 24r00            [12] 1830 	add	a,#_u
      000711 F5 82            [12] 1831 	mov	dpl,a
      000713 ED               [12] 1832 	mov	a,r5
      000714 34s08            [12] 1833 	addc	a,#(_u >> 8)
      000716 F5 83            [12] 1834 	mov	dph,a
      000718 E0               [24] 1835 	movx	a,@dptr
      000719 2B               [12] 1836 	add	a,r3
      00071A FB               [12] 1837 	mov	r3,a
                                   1838 ;	life.c:176: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00071B E5*00            [12] 1839 	mov	a,_bp
      00071D 24 0D            [12] 1840 	add	a,#0x0d
      00071F F8               [12] 1841 	mov	r0,a
      000720 EE               [12] 1842 	mov	a,r6
      000721 26               [12] 1843 	add	a,@r0
      000722 FC               [12] 1844 	mov	r4,a
      000723 EF               [12] 1845 	mov	a,r7
      000724 08               [12] 1846 	inc	r0
      000725 36               [12] 1847 	addc	a,@r0
      000726 FD               [12] 1848 	mov	r5,a
      000727 EC               [12] 1849 	mov	a,r4
      000728 24r00            [12] 1850 	add	a,#_u
      00072A F5 82            [12] 1851 	mov	dpl,a
      00072C ED               [12] 1852 	mov	a,r5
      00072D 34s08            [12] 1853 	addc	a,#(_u >> 8)
      00072F F5 83            [12] 1854 	mov	dph,a
      000731 E0               [24] 1855 	movx	a,@dptr
      000732 2B               [12] 1856 	add	a,r3
      000733 FB               [12] 1857 	mov	r3,a
                                   1858 ;	life.c:178: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000734 E5*00            [12] 1859 	mov	a,_bp
      000736 24 0B            [12] 1860 	add	a,#0x0b
      000738 F8               [12] 1861 	mov	r0,a
      000739 74 41            [12] 1862 	mov	a,#0x41
      00073B 26               [12] 1863 	add	a,@r0
      00073C FC               [12] 1864 	mov	r4,a
      00073D E4               [12] 1865 	clr	a
      00073E 08               [12] 1866 	inc	r0
      00073F 36               [12] 1867 	addc	a,@r0
      000740 FD               [12] 1868 	mov	r5,a
      000741 C0 07            [24] 1869 	push	ar7
      000743 C0 06            [24] 1870 	push	ar6
      000745 C0 03            [24] 1871 	push	ar3
      000747 74 40            [12] 1872 	mov	a,#0x40
      000749 C0 E0            [24] 1873 	push	acc
      00074B E4               [12] 1874 	clr	a
      00074C C0 E0            [24] 1875 	push	acc
      00074E 8C 82            [24] 1876 	mov	dpl,r4
      000750 8D 83            [24] 1877 	mov	dph,r5
      000752 12r00r00         [24] 1878 	lcall	__modsint
      000755 AC 82            [24] 1879 	mov	r4,dpl
      000757 AD 83            [24] 1880 	mov	r5,dph
      000759 15 81            [12] 1881 	dec	sp
      00075B 15 81            [12] 1882 	dec	sp
      00075D D0 03            [24] 1883 	pop	ar3
      00075F D0 06            [24] 1884 	pop	ar6
      000761 D0 07            [24] 1885 	pop	ar7
      000763 E5*00            [12] 1886 	mov	a,_bp
      000765 24 0D            [12] 1887 	add	a,#0x0d
      000767 F8               [12] 1888 	mov	r0,a
      000768 A6 04            [24] 1889 	mov	@r0,ar4
      00076A ED               [12] 1890 	mov	a,r5
      00076B C4               [12] 1891 	swap	a
      00076C 23               [12] 1892 	rl	a
      00076D 54 E0            [12] 1893 	anl	a,#0xe0
      00076F C6               [12] 1894 	xch	a,@r0
      000770 C4               [12] 1895 	swap	a
      000771 23               [12] 1896 	rl	a
      000772 C6               [12] 1897 	xch	a,@r0
      000773 66               [12] 1898 	xrl	a,@r0
      000774 C6               [12] 1899 	xch	a,@r0
      000775 54 E0            [12] 1900 	anl	a,#0xe0
      000777 C6               [12] 1901 	xch	a,@r0
      000778 66               [12] 1902 	xrl	a,@r0
      000779 08               [12] 1903 	inc	r0
      00077A F6               [12] 1904 	mov	@r0,a
      00077B E5*00            [12] 1905 	mov	a,_bp
      00077D 24 0D            [12] 1906 	add	a,#0x0d
      00077F F8               [12] 1907 	mov	r0,a
      000780 E5*00            [12] 1908 	mov	a,_bp
      000782 24 05            [12] 1909 	add	a,#0x05
      000784 F9               [12] 1910 	mov	r1,a
      000785 E7               [12] 1911 	mov	a,@r1
      000786 26               [12] 1912 	add	a,@r0
      000787 FA               [12] 1913 	mov	r2,a
      000788 09               [12] 1914 	inc	r1
      000789 E7               [12] 1915 	mov	a,@r1
      00078A 08               [12] 1916 	inc	r0
      00078B 36               [12] 1917 	addc	a,@r0
      00078C FD               [12] 1918 	mov	r5,a
      00078D EA               [12] 1919 	mov	a,r2
      00078E 24r00            [12] 1920 	add	a,#_u
      000790 F5 82            [12] 1921 	mov	dpl,a
      000792 ED               [12] 1922 	mov	a,r5
      000793 34s08            [12] 1923 	addc	a,#(_u >> 8)
      000795 F5 83            [12] 1924 	mov	dph,a
      000797 E0               [24] 1925 	movx	a,@dptr
      000798 2B               [12] 1926 	add	a,r3
      000799 FB               [12] 1927 	mov	r3,a
                                   1928 ;	life.c:180: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00079A E5*00            [12] 1929 	mov	a,_bp
      00079C 24 0D            [12] 1930 	add	a,#0x0d
      00079E F8               [12] 1931 	mov	r0,a
      00079F E5*00            [12] 1932 	mov	a,_bp
      0007A1 24 09            [12] 1933 	add	a,#0x09
      0007A3 F9               [12] 1934 	mov	r1,a
      0007A4 E7               [12] 1935 	mov	a,@r1
      0007A5 26               [12] 1936 	add	a,@r0
      0007A6 FC               [12] 1937 	mov	r4,a
      0007A7 09               [12] 1938 	inc	r1
      0007A8 E7               [12] 1939 	mov	a,@r1
      0007A9 08               [12] 1940 	inc	r0
      0007AA 36               [12] 1941 	addc	a,@r0
      0007AB FD               [12] 1942 	mov	r5,a
      0007AC EC               [12] 1943 	mov	a,r4
      0007AD 24r00            [12] 1944 	add	a,#_u
      0007AF F5 82            [12] 1945 	mov	dpl,a
      0007B1 ED               [12] 1946 	mov	a,r5
      0007B2 34s08            [12] 1947 	addc	a,#(_u >> 8)
      0007B4 F5 83            [12] 1948 	mov	dph,a
      0007B6 E0               [24] 1949 	movx	a,@dptr
      0007B7 2B               [12] 1950 	add	a,r3
      0007B8 FB               [12] 1951 	mov	r3,a
                                   1952 ;	life.c:181: y1 = 1; x1 = 1;
      0007B9 78r20            [12] 1953 	mov	r0,#_y1
      0007BB 76 01            [12] 1954 	mov	@r0,#0x01
      0007BD 08               [12] 1955 	inc	r0
      0007BE 76 00            [12] 1956 	mov	@r0,#0x00
      0007C0 78r1E            [12] 1957 	mov	r0,#_x1
      0007C2 76 01            [12] 1958 	mov	@r0,#0x01
      0007C4 08               [12] 1959 	inc	r0
      0007C5 76 00            [12] 1960 	mov	@r0,#0x00
                                   1961 ;	life.c:182: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007C7 E5*00            [12] 1962 	mov	a,_bp
      0007C9 24 0D            [12] 1963 	add	a,#0x0d
      0007CB F8               [12] 1964 	mov	r0,a
      0007CC EE               [12] 1965 	mov	a,r6
      0007CD 26               [12] 1966 	add	a,@r0
      0007CE FE               [12] 1967 	mov	r6,a
      0007CF EF               [12] 1968 	mov	a,r7
      0007D0 08               [12] 1969 	inc	r0
      0007D1 36               [12] 1970 	addc	a,@r0
      0007D2 FF               [12] 1971 	mov	r7,a
      0007D3 EE               [12] 1972 	mov	a,r6
      0007D4 24r00            [12] 1973 	add	a,#_u
      0007D6 F5 82            [12] 1974 	mov	dpl,a
      0007D8 EF               [12] 1975 	mov	a,r7
      0007D9 34s08            [12] 1976 	addc	a,#(_u >> 8)
      0007DB F5 83            [12] 1977 	mov	dph,a
      0007DD E0               [24] 1978 	movx	a,@dptr
      0007DE 2B               [12] 1979 	add	a,r3
      0007DF FF               [12] 1980 	mov	r7,a
      0007E0 78r1B            [12] 1981 	mov	r0,#_n
      0007E2 A6 07            [24] 1982 	mov	@r0,ar7
                                   1983 ;	life.c:184: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007E4 A8*00            [24] 1984 	mov	r0,_bp
      0007E6 08               [12] 1985 	inc	r0
      0007E7 E6               [12] 1986 	mov	a,@r0
      0007E8 24r00            [12] 1987 	add	a,#_nu
      0007EA FD               [12] 1988 	mov	r5,a
      0007EB 08               [12] 1989 	inc	r0
      0007EC E6               [12] 1990 	mov	a,@r0
      0007ED 34s10            [12] 1991 	addc	a,#(_nu >> 8)
      0007EF FE               [12] 1992 	mov	r6,a
      0007F0 BF 03 02         [24] 1993 	cjne	r7,#0x03,00454$
      0007F3 80 28            [24] 1994 	sjmp	00218$
      0007F5                       1995 00454$:
      0007F5 BF 02 21         [24] 1996 	cjne	r7,#0x02,00217$
      0007F8 E5*00            [12] 1997 	mov	a,_bp
      0007FA 24 03            [12] 1998 	add	a,#0x03
      0007FC F8               [12] 1999 	mov	r0,a
      0007FD E5*00            [12] 2000 	mov	a,_bp
      0007FF 24 07            [12] 2001 	add	a,#0x07
      000801 F9               [12] 2002 	mov	r1,a
      000802 E7               [12] 2003 	mov	a,@r1
      000803 26               [12] 2004 	add	a,@r0
      000804 FC               [12] 2005 	mov	r4,a
      000805 09               [12] 2006 	inc	r1
      000806 E7               [12] 2007 	mov	a,@r1
      000807 08               [12] 2008 	inc	r0
      000808 36               [12] 2009 	addc	a,@r0
      000809 FF               [12] 2010 	mov	r7,a
      00080A EC               [12] 2011 	mov	a,r4
      00080B 24r00            [12] 2012 	add	a,#_u
      00080D FC               [12] 2013 	mov	r4,a
      00080E EF               [12] 2014 	mov	a,r7
      00080F 34s08            [12] 2015 	addc	a,#(_u >> 8)
      000811 FF               [12] 2016 	mov	r7,a
      000812 8C 82            [24] 2017 	mov	dpl,r4
      000814 8F 83            [24] 2018 	mov	dph,r7
      000816 E0               [24] 2019 	movx	a,@dptr
      000817 70 04            [24] 2020 	jnz	00218$
      000819                       2021 00217$:
                                   2022 ;	assignBit
      000819 C2*00            [12] 2023 	clr	b0
      00081B 80 02            [24] 2024 	sjmp	00219$
      00081D                       2025 00218$:
                                   2026 ;	assignBit
      00081D D2*00            [12] 2027 	setb	b0
      00081F                       2028 00219$:
      00081F A2*00            [12] 2029 	mov	c,b0
      000821 E4               [12] 2030 	clr	a
      000822 33               [12] 2031 	rlc	a
      000823 8D 82            [24] 2032 	mov	dpl,r5
      000825 8E 83            [24] 2033 	mov	dph,r6
      000827 F0               [24] 2034 	movx	@dptr,a
                                   2035 ;	life.c:185: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000828 78r14            [12] 2036 	mov	r0,#_y
      00082A 86 06            [24] 2037 	mov	ar6,@r0
      00082C 08               [12] 2038 	inc	r0
      00082D E6               [12] 2039 	mov	a,@r0
      00082E C4               [12] 2040 	swap	a
      00082F 23               [12] 2041 	rl	a
      000830 54 E0            [12] 2042 	anl	a,#0xe0
      000832 CE               [12] 2043 	xch	a,r6
      000833 C4               [12] 2044 	swap	a
      000834 23               [12] 2045 	rl	a
      000835 CE               [12] 2046 	xch	a,r6
      000836 6E               [12] 2047 	xrl	a,r6
      000837 CE               [12] 2048 	xch	a,r6
      000838 54 E0            [12] 2049 	anl	a,#0xe0
      00083A CE               [12] 2050 	xch	a,r6
      00083B 6E               [12] 2051 	xrl	a,r6
      00083C FF               [12] 2052 	mov	r7,a
      00083D 78r12            [12] 2053 	mov	r0,#_x
      00083F E6               [12] 2054 	mov	a,@r0
      000840 2E               [12] 2055 	add	a,r6
      000841 FE               [12] 2056 	mov	r6,a
      000842 08               [12] 2057 	inc	r0
      000843 E6               [12] 2058 	mov	a,@r0
      000844 3F               [12] 2059 	addc	a,r7
      000845 FF               [12] 2060 	mov	r7,a
      000846 EE               [12] 2061 	mov	a,r6
      000847 24r00            [12] 2062 	add	a,#_pu
      000849 F5 82            [12] 2063 	mov	dpl,a
      00084B EF               [12] 2064 	mov	a,r7
      00084C 34s00            [12] 2065 	addc	a,#(_pu >> 8)
      00084E F5 83            [12] 2066 	mov	dph,a
      000850 E0               [24] 2067 	movx	a,@dptr
      000851 FD               [12] 2068 	mov	r5,a
      000852 EE               [12] 2069 	mov	a,r6
      000853 24r00            [12] 2070 	add	a,#_nu
      000855 F5 82            [12] 2071 	mov	dpl,a
      000857 EF               [12] 2072 	mov	a,r7
      000858 34s10            [12] 2073 	addc	a,#(_nu >> 8)
      00085A F5 83            [12] 2074 	mov	dph,a
      00085C E0               [24] 2075 	movx	a,@dptr
      00085D FC               [12] 2076 	mov	r4,a
      00085E 6D               [12] 2077 	xrl	a,r5
      00085F 78r1D            [12] 2078 	mov	r0,#_cycle2
      000861 46               [12] 2079 	orl	a,@r0
      000862 F6               [12] 2080 	mov	@r0,a
                                   2081 ;	life.c:186: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000863 EE               [12] 2082 	mov	a,r6
      000864 24r00            [12] 2083 	add	a,#_u
      000866 F5 82            [12] 2084 	mov	dpl,a
      000868 EF               [12] 2085 	mov	a,r7
      000869 34s08            [12] 2086 	addc	a,#(_u >> 8)
      00086B F5 83            [12] 2087 	mov	dph,a
      00086D E0               [24] 2088 	movx	a,@dptr
      00086E FF               [12] 2089 	mov	r7,a
      00086F EC               [12] 2090 	mov	a,r4
      000870 6F               [12] 2091 	xrl	a,r7
      000871 78r1C            [12] 2092 	mov	r0,#_fixed
      000873 46               [12] 2093 	orl	a,@r0
      000874 F6               [12] 2094 	mov	@r0,a
                                   2095 ;	life.c:162: for (x = 0; x < W; x++) {
      000875 78r12            [12] 2096 	mov	r0,#_x
      000877 06               [12] 2097 	inc	@r0
      000878 B6 00 02         [24] 2098 	cjne	@r0,#0x00,00458$
      00087B 08               [12] 2099 	inc	r0
      00087C 06               [12] 2100 	inc	@r0
      00087D                       2101 00458$:
      00087D 78r12            [12] 2102 	mov	r0,#_x
      00087F C3               [12] 2103 	clr	c
      000880 E6               [12] 2104 	mov	a,@r0
      000881 94 20            [12] 2105 	subb	a,#0x20
      000883 08               [12] 2106 	inc	r0
      000884 E6               [12] 2107 	mov	a,@r0
      000885 64 80            [12] 2108 	xrl	a,#0x80
      000887 94 80            [12] 2109 	subb	a,#0x80
      000889 50 03            [24] 2110 	jnc	00459$
      00088B 02r05r10         [24] 2111 	ljmp	00190$
      00088E                       2112 00459$:
                                   2113 ;	life.c:159: for (y = 0; y < H; y++) {
      00088E 78r14            [12] 2114 	mov	r0,#_y
      000890 06               [12] 2115 	inc	@r0
      000891 B6 00 02         [24] 2116 	cjne	@r0,#0x00,00460$
      000894 08               [12] 2117 	inc	r0
      000895 06               [12] 2118 	inc	@r0
      000896                       2119 00460$:
      000896 78r14            [12] 2120 	mov	r0,#_y
      000898 C3               [12] 2121 	clr	c
      000899 E6               [12] 2122 	mov	a,@r0
      00089A 94 40            [12] 2123 	subb	a,#0x40
      00089C 08               [12] 2124 	inc	r0
      00089D E6               [12] 2125 	mov	a,@r0
      00089E 64 80            [12] 2126 	xrl	a,#0x80
      0008A0 94 80            [12] 2127 	subb	a,#0x80
      0008A2 50 03            [24] 2128 	jnc	00461$
      0008A4 02r04rE8         [24] 2129 	ljmp	00192$
      0008A7                       2130 00461$:
                                   2131 ;	life.c:190: cycle2 = !cycle2;
      0008A7 78r1D            [12] 2132 	mov	r0,#_cycle2
      0008A9 E6               [12] 2133 	mov	a,@r0
      0008AA B4 01 00         [24] 2134 	cjne	a,#0x01,00462$
      0008AD                       2135 00462$:
      0008AD 92*00            [24] 2136 	mov	b0,c
      0008AF 78r1D            [12] 2137 	mov	r0,#_cycle2
      0008B1 E4               [12] 2138 	clr	a
      0008B2 33               [12] 2139 	rlc	a
      0008B3 F6               [12] 2140 	mov	@r0,a
                                   2141 ;	life.c:191: fixed = !fixed;
      0008B4 78r1C            [12] 2142 	mov	r0,#_fixed
      0008B6 E6               [12] 2143 	mov	a,@r0
      0008B7 B4 01 00         [24] 2144 	cjne	a,#0x01,00463$
      0008BA                       2145 00463$:
      0008BA 92*00            [24] 2146 	mov	b0,c
      0008BC 78r1C            [12] 2147 	mov	r0,#_fixed
      0008BE E4               [12] 2148 	clr	a
      0008BF 33               [12] 2149 	rlc	a
      0008C0 F6               [12] 2150 	mov	@r0,a
                                   2151 ;	life.c:193: memcpy(pu, u, sizeof (u));
      0008C1 E4               [12] 2152 	clr	a
      0008C2 C0 E0            [24] 2153 	push	acc
      0008C4 74 08            [12] 2154 	mov	a,#0x08
      0008C6 C0 E0            [24] 2155 	push	acc
      0008C8 74r00            [12] 2156 	mov	a,#_u
      0008CA C0 E0            [24] 2157 	push	acc
      0008CC 74s08            [12] 2158 	mov	a,#(_u >> 8)
      0008CE C0 E0            [24] 2159 	push	acc
      0008D0 E4               [12] 2160 	clr	a
      0008D1 C0 E0            [24] 2161 	push	acc
      0008D3 90r00r00         [24] 2162 	mov	dptr,#_pu
      0008D6 75 F0 00         [24] 2163 	mov	b,#0x00
      0008D9 12r00r00         [24] 2164 	lcall	___memcpy
      0008DC E5 81            [12] 2165 	mov	a,sp
      0008DE 24 FB            [12] 2166 	add	a,#0xfb
      0008E0 F5 81            [12] 2167 	mov	sp,a
                                   2168 ;	life.c:194: memcpy(u, nu, sizeof (nu));
      0008E2 E4               [12] 2169 	clr	a
      0008E3 C0 E0            [24] 2170 	push	acc
      0008E5 74 08            [12] 2171 	mov	a,#0x08
      0008E7 C0 E0            [24] 2172 	push	acc
      0008E9 74r00            [12] 2173 	mov	a,#_nu
      0008EB C0 E0            [24] 2174 	push	acc
      0008ED 74s10            [12] 2175 	mov	a,#(_nu >> 8)
      0008EF C0 E0            [24] 2176 	push	acc
      0008F1 E4               [12] 2177 	clr	a
      0008F2 C0 E0            [24] 2178 	push	acc
      0008F4 90r08r00         [24] 2179 	mov	dptr,#_u
      0008F7 75 F0 00         [24] 2180 	mov	b,#0x00
      0008FA 12r00r00         [24] 2181 	lcall	___memcpy
      0008FD E5 81            [12] 2182 	mov	a,sp
      0008FF 24 FB            [12] 2183 	add	a,#0xfb
      000901 F5 81            [12] 2184 	mov	sp,a
                                   2185 ;	life.c:232: if (fixed || cycle2) {
      000903 78r1C            [12] 2186 	mov	r0,#_fixed
      000905 E6               [12] 2187 	mov	a,@r0
      000906 70 08            [24] 2188 	jnz	00123$
      000908 78r1D            [12] 2189 	mov	r0,#_cycle2
      00090A E6               [12] 2190 	mov	a,@r0
      00090B 70 03            [24] 2191 	jnz	00465$
      00090D 02r04rC0         [24] 2192 	ljmp	00205$
      000910                       2193 00465$:
      000910                       2194 00123$:
                                   2195 ;	life.c:233: printstr("DONE ");
      000910 7Dr2C            [12] 2196 	mov	r5,#___str_6
      000912 7Es00            [12] 2197 	mov	r6,#(___str_6 >> 8)
      000914 7F 80            [12] 2198 	mov	r7,#0x80
                                   2199 ;	life.c:48: return;
      000916                       2200 00195$:
                                   2201 ;	life.c:46: for (; *s; s++) putchar(*s);
      000916 8D 82            [24] 2202 	mov	dpl,r5
      000918 8E 83            [24] 2203 	mov	dph,r6
      00091A 8F F0            [24] 2204 	mov	b,r7
      00091C 12r00r00         [24] 2205 	lcall	__gptrget
      00091F FC               [12] 2206 	mov	r4,a
      000920 60 10            [24] 2207 	jz	00165$
      000922 7B 00            [12] 2208 	mov	r3,#0x00
      000924 8C 82            [24] 2209 	mov	dpl,r4
      000926 8B 83            [24] 2210 	mov	dph,r3
      000928 12r00r00         [24] 2211 	lcall	_putchar
      00092B 0D               [12] 2212 	inc	r5
                                   2213 ;	life.c:233: printstr("DONE ");
      00092C BD 00 E7         [24] 2214 	cjne	r5,#0x00,00195$
      00092F 0E               [12] 2215 	inc	r6
      000930 80 E4            [24] 2216 	sjmp	00195$
      000932                       2217 00165$:
                                   2218 ;	life.c:234: if (fixed) printstr("FIXED\r\n");
      000932 78r1C            [12] 2219 	mov	r0,#_fixed
      000934 E6               [12] 2220 	mov	a,@r0
      000935 60 22            [24] 2221 	jz	00121$
      000937 7Dr32            [12] 2222 	mov	r5,#___str_7
      000939 7Es00            [12] 2223 	mov	r6,#(___str_7 >> 8)
      00093B 7F 80            [12] 2224 	mov	r7,#0x80
                                   2225 ;	life.c:48: return;
      00093D                       2226 00198$:
                                   2227 ;	life.c:46: for (; *s; s++) putchar(*s);
      00093D 8D 82            [24] 2228 	mov	dpl,r5
      00093F 8E 83            [24] 2229 	mov	dph,r6
      000941 8F F0            [24] 2230 	mov	b,r7
      000943 12r00r00         [24] 2231 	lcall	__gptrget
      000946 FC               [12] 2232 	mov	r4,a
      000947 60 32            [24] 2233 	jz	00122$
      000949 7B 00            [12] 2234 	mov	r3,#0x00
      00094B 8C 82            [24] 2235 	mov	dpl,r4
      00094D 8B 83            [24] 2236 	mov	dph,r3
      00094F 12r00r00         [24] 2237 	lcall	_putchar
      000952 0D               [12] 2238 	inc	r5
                                   2239 ;	life.c:234: if (fixed) printstr("FIXED\r\n");
      000953 BD 00 E7         [24] 2240 	cjne	r5,#0x00,00198$
      000956 0E               [12] 2241 	inc	r6
      000957 80 E4            [24] 2242 	sjmp	00198$
      000959                       2243 00121$:
                                   2244 ;	life.c:235: else printstr("CYCLE2\r\n");
      000959 7Dr3A            [12] 2245 	mov	r5,#___str_8
      00095B 7Es00            [12] 2246 	mov	r6,#(___str_8 >> 8)
      00095D 7F 80            [12] 2247 	mov	r7,#0x80
                                   2248 ;	life.c:48: return;
      00095F                       2249 00201$:
                                   2250 ;	life.c:46: for (; *s; s++) putchar(*s);
      00095F 8D 82            [24] 2251 	mov	dpl,r5
      000961 8E 83            [24] 2252 	mov	dph,r6
      000963 8F F0            [24] 2253 	mov	b,r7
      000965 12r00r00         [24] 2254 	lcall	__gptrget
      000968 FC               [12] 2255 	mov	r4,a
      000969 60 10            [24] 2256 	jz	00122$
      00096B 7B 00            [12] 2257 	mov	r3,#0x00
      00096D 8C 82            [24] 2258 	mov	dpl,r4
      00096F 8B 83            [24] 2259 	mov	dph,r3
      000971 12r00r00         [24] 2260 	lcall	_putchar
      000974 0D               [12] 2261 	inc	r5
                                   2262 ;	life.c:235: else printstr("CYCLE2\r\n");
      000975 BD 00 E7         [24] 2263 	cjne	r5,#0x00,00201$
      000978 0E               [12] 2264 	inc	r6
      000979 80 E4            [24] 2265 	sjmp	00201$
      00097B                       2266 00122$:
                                   2267 ;	life.c:236: (void)getchar();
      00097B 12r00r05         [24] 2268 	lcall	_getchar
                                   2269 ;	life.c:237: break;
      00097E                       2270 00126$:
                                   2271 ;	life.c:241: if (i1) {
      00097E 78r11            [12] 2272 	mov	r0,#_i1
      000980 E6               [12] 2273 	mov	a,@r0
      000981 60 25            [24] 2274 	jz	00211$
                                   2275 ;	life.c:242: printstr("BREAK\r\n");
      000983 7Dr43            [12] 2276 	mov	r5,#___str_9
      000985 7Es00            [12] 2277 	mov	r6,#(___str_9 >> 8)
      000987 7F 80            [12] 2278 	mov	r7,#0x80
                                   2279 ;	life.c:48: return;
      000989                       2280 00208$:
                                   2281 ;	life.c:46: for (; *s; s++) putchar(*s);
      000989 8D 82            [24] 2282 	mov	dpl,r5
      00098B 8E 83            [24] 2283 	mov	dph,r6
      00098D 8F F0            [24] 2284 	mov	b,r7
      00098F 12r00r00         [24] 2285 	lcall	__gptrget
      000992 FC               [12] 2286 	mov	r4,a
      000993 60 10            [24] 2287 	jz	00171$
      000995 7B 00            [12] 2288 	mov	r3,#0x00
      000997 8C 82            [24] 2289 	mov	dpl,r4
      000999 8B 83            [24] 2290 	mov	dph,r3
      00099B 12r00r00         [24] 2291 	lcall	_putchar
      00099E 0D               [12] 2292 	inc	r5
                                   2293 ;	life.c:242: printstr("BREAK\r\n");
      00099F BD 00 E7         [24] 2294 	cjne	r5,#0x00,00208$
      0009A2 0E               [12] 2295 	inc	r6
      0009A3 80 E4            [24] 2296 	sjmp	00208$
      0009A5                       2297 00171$:
                                   2298 ;	life.c:243: (void)getchar();
      0009A5 12r00r05         [24] 2299 	lcall	_getchar
      0009A8                       2300 00211$:
                                   2301 ;	life.c:206: for (i0 = 0; !i0; ) {		
      0009A8 78r10            [12] 2302 	mov	r0,#_i0
      0009AA E6               [12] 2303 	mov	a,@r0
      0009AB 70 03            [24] 2304 	jnz	00476$
      0009AD 02r02r3B         [24] 2305 	ljmp	00210$
      0009B0                       2306 00476$:
                                   2307 ;	life.c:247: terminate:
      0009B0                       2308 00130$:
                                   2309 ;	life.c:248: EA = 0;
                                   2310 ;	assignBit
      0009B0 C2 AF            [12] 2311 	clr	_EA
                                   2312 ;	life.c:249: printstr("TERM\r\n");
      0009B2 7Dr4B            [12] 2313 	mov	r5,#___str_10
      0009B4 7Es00            [12] 2314 	mov	r6,#(___str_10 >> 8)
      0009B6 7F 80            [12] 2315 	mov	r7,#0x80
                                   2316 ;	life.c:48: return;
      0009B8                       2317 00213$:
                                   2318 ;	life.c:46: for (; *s; s++) putchar(*s);
      0009B8 8D 82            [24] 2319 	mov	dpl,r5
      0009BA 8E 83            [24] 2320 	mov	dph,r6
      0009BC 8F F0            [24] 2321 	mov	b,r7
      0009BE 12r00r00         [24] 2322 	lcall	__gptrget
      0009C1 FC               [12] 2323 	mov	r4,a
      0009C2 60 10            [24] 2324 	jz	00173$
      0009C4 7B 00            [12] 2325 	mov	r3,#0x00
      0009C6 8C 82            [24] 2326 	mov	dpl,r4
      0009C8 8B 83            [24] 2327 	mov	dph,r3
      0009CA 12r00r00         [24] 2328 	lcall	_putchar
      0009CD 0D               [12] 2329 	inc	r5
                                   2330 ;	life.c:249: printstr("TERM\r\n");
      0009CE BD 00 E7         [24] 2331 	cjne	r5,#0x00,00213$
      0009D1 0E               [12] 2332 	inc	r6
      0009D2 80 E4            [24] 2333 	sjmp	00213$
      0009D4                       2334 00173$:
                                   2335 ;	life.c:250: (void)getchar();
      0009D4 12r00r05         [24] 2336 	lcall	_getchar
                                   2337 ;	life.c:254: __endasm;
      0009D7 02 00 00         [24] 2338 	ljmp	0
                                   2339 ;	life.c:255: }
      0009DA 85*00 81         [24] 2340 	mov	sp,_bp
      0009DD D0*00            [24] 2341 	pop	_bp
      0009DF 22               [24] 2342 	ret
                                   2343 	.area CSEG    (CODE)
                                   2344 	.area CONST   (CODE)
                                   2345 	.area CONST   (CODE)
      000000                       2346 ___str_0:
      000000 1B                    2347 	.db 0x1b
      000001 5B 32 4A              2348 	.ascii "[2J"
      000004 1B                    2349 	.db 0x1b
      000005 5B 6D                 2350 	.ascii "[m"
      000007 00                    2351 	.db 0x00
                                   2352 	.area CSEG    (CODE)
                                   2353 	.area CONST   (CODE)
      000008                       2354 ___str_1:
      000008 0D                    2355 	.db 0x0d
      000009 0A                    2356 	.db 0x0a
      00000A 00                    2357 	.db 0x00
                                   2358 	.area CSEG    (CODE)
                                   2359 	.area CONST   (CODE)
      00000B                       2360 ___str_2:
      00000B 4C 4F 41 44 20 3C     2361 	.ascii "LOAD <"
      000011 00                    2362 	.db 0x00
                                   2363 	.area CSEG    (CODE)
                                   2364 	.area CONST   (CODE)
      000012                       2365 ___str_3:
      000012 3E                    2366 	.ascii ">"
      000013 0D                    2367 	.db 0x0d
      000014 0A                    2368 	.db 0x0a
      000015 00                    2369 	.db 0x00
                                   2370 	.area CSEG    (CODE)
                                   2371 	.area CONST   (CODE)
      000016                       2372 ___str_4:
      000016 1B                    2373 	.db 0x1b
      000017 5B 32 4A              2374 	.ascii "[2J"
      00001A 1B                    2375 	.db 0x1b
      00001B 5B 6D 49 4E 49 54     2376 	.ascii "[mINIT"
      000021 0D                    2377 	.db 0x0d
      000022 0A                    2378 	.db 0x0a
      000023 00                    2379 	.db 0x00
                                   2380 	.area CSEG    (CODE)
                                   2381 	.area CONST   (CODE)
      000024                       2382 ___str_5:
      000024 52 45 41 44 59        2383 	.ascii "READY"
      000029 0D                    2384 	.db 0x0d
      00002A 0A                    2385 	.db 0x0a
      00002B 00                    2386 	.db 0x00
                                   2387 	.area CSEG    (CODE)
                                   2388 	.area CONST   (CODE)
      00002C                       2389 ___str_6:
      00002C 44 4F 4E 45 20        2390 	.ascii "DONE "
      000031 00                    2391 	.db 0x00
                                   2392 	.area CSEG    (CODE)
                                   2393 	.area CONST   (CODE)
      000032                       2394 ___str_7:
      000032 46 49 58 45 44        2395 	.ascii "FIXED"
      000037 0D                    2396 	.db 0x0d
      000038 0A                    2397 	.db 0x0a
      000039 00                    2398 	.db 0x00
                                   2399 	.area CSEG    (CODE)
                                   2400 	.area CONST   (CODE)
      00003A                       2401 ___str_8:
      00003A 43 59 43 4C 45 32     2402 	.ascii "CYCLE2"
      000040 0D                    2403 	.db 0x0d
      000041 0A                    2404 	.db 0x0a
      000042 00                    2405 	.db 0x00
                                   2406 	.area CSEG    (CODE)
                                   2407 	.area CONST   (CODE)
      000043                       2408 ___str_9:
      000043 42 52 45 41 4B        2409 	.ascii "BREAK"
      000048 0D                    2410 	.db 0x0d
      000049 0A                    2411 	.db 0x0a
      00004A 00                    2412 	.db 0x00
                                   2413 	.area CSEG    (CODE)
                                   2414 	.area CONST   (CODE)
      00004B                       2415 ___str_10:
      00004B 54 45 52 4D           2416 	.ascii "TERM"
      00004F 0D                    2417 	.db 0x0d
      000050 0A                    2418 	.db 0x0a
      000051 00                    2419 	.db 0x00
                                   2420 	.area CSEG    (CODE)
                                   2421 	.area XINIT   (CODE)
                                   2422 	.area CABS    (ABS,CODE)
