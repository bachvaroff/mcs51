                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl ___memcpy
                                     18 	.globl _memset
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _FL
                                     26 	.globl _P
                                     27 	.globl _TF2
                                     28 	.globl _EXF2
                                     29 	.globl _RCLK
                                     30 	.globl _TCLK
                                     31 	.globl _EXEN2
                                     32 	.globl _TR2
                                     33 	.globl _C_T2
                                     34 	.globl _CP_RL2
                                     35 	.globl _T2CON_7
                                     36 	.globl _T2CON_6
                                     37 	.globl _T2CON_5
                                     38 	.globl _T2CON_4
                                     39 	.globl _T2CON_3
                                     40 	.globl _T2CON_2
                                     41 	.globl _T2CON_1
                                     42 	.globl _T2CON_0
                                     43 	.globl _PT2
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ET2
                                     67 	.globl _ES
                                     68 	.globl _ET1
                                     69 	.globl _EX1
                                     70 	.globl _ET0
                                     71 	.globl _EX0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _SM0
                                     81 	.globl _SM1
                                     82 	.globl _SM2
                                     83 	.globl _REN
                                     84 	.globl _TB8
                                     85 	.globl _RB8
                                     86 	.globl _TI
                                     87 	.globl _RI
                                     88 	.globl _T2EX
                                     89 	.globl _T2
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _B
                                    115 	.globl _A
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _TH2
                                    119 	.globl _TL2
                                    120 	.globl _RCAP2H
                                    121 	.globl _RCAP2L
                                    122 	.globl _T2MOD
                                    123 	.globl _T2CON
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _c
                                    143 	.globl _j
                                    144 	.globl _cycle2
                                    145 	.globl _fixed
                                    146 	.globl _generation
                                    147 	.globl _n
                                    148 	.globl _y1
                                    149 	.globl _x1
                                    150 	.globl _y
                                    151 	.globl _x
                                    152 	.globl _nu
                                    153 	.globl _u
                                    154 	.globl _pu
                                    155 	.globl _i1
                                    156 	.globl _i0
                                    157 ;--------------------------------------------------------
                                    158 ; special function registers
                                    159 ;--------------------------------------------------------
                                    160 	.area RSEG    (ABS,DATA)
      000000                        161 	.org 0x0000
                           000080   162 _P0	=	0x0080
                           000081   163 _SP	=	0x0081
                           000082   164 _DPL	=	0x0082
                           000083   165 _DPH	=	0x0083
                           000087   166 _PCON	=	0x0087
                           000088   167 _TCON	=	0x0088
                           000089   168 _TMOD	=	0x0089
                           00008A   169 _TL0	=	0x008a
                           00008B   170 _TL1	=	0x008b
                           00008C   171 _TH0	=	0x008c
                           00008D   172 _TH1	=	0x008d
                           000090   173 _P1	=	0x0090
                           000098   174 _SCON	=	0x0098
                           000099   175 _SBUF	=	0x0099
                           0000A0   176 _P2	=	0x00a0
                           0000A8   177 _IE	=	0x00a8
                           0000B0   178 _P3	=	0x00b0
                           0000B8   179 _IP	=	0x00b8
                           0000C8   180 _T2CON	=	0x00c8
                           0000C9   181 _T2MOD	=	0x00c9
                           0000CA   182 _RCAP2L	=	0x00ca
                           0000CB   183 _RCAP2H	=	0x00cb
                           0000CC   184 _TL2	=	0x00cc
                           0000CD   185 _TH2	=	0x00cd
                           0000D0   186 _PSW	=	0x00d0
                           0000E0   187 _ACC	=	0x00e0
                           0000E0   188 _A	=	0x00e0
                           0000F0   189 _B	=	0x00f0
                                    190 ;--------------------------------------------------------
                                    191 ; special function bits
                                    192 ;--------------------------------------------------------
                                    193 	.area RSEG    (ABS,DATA)
      000000                        194 	.org 0x0000
                           000080   195 _P0_0	=	0x0080
                           000081   196 _P0_1	=	0x0081
                           000082   197 _P0_2	=	0x0082
                           000083   198 _P0_3	=	0x0083
                           000084   199 _P0_4	=	0x0084
                           000085   200 _P0_5	=	0x0085
                           000086   201 _P0_6	=	0x0086
                           000087   202 _P0_7	=	0x0087
                           000088   203 _IT0	=	0x0088
                           000089   204 _IE0	=	0x0089
                           00008A   205 _IT1	=	0x008a
                           00008B   206 _IE1	=	0x008b
                           00008C   207 _TR0	=	0x008c
                           00008D   208 _TF0	=	0x008d
                           00008E   209 _TR1	=	0x008e
                           00008F   210 _TF1	=	0x008f
                           000090   211 _P1_0	=	0x0090
                           000091   212 _P1_1	=	0x0091
                           000092   213 _P1_2	=	0x0092
                           000093   214 _P1_3	=	0x0093
                           000094   215 _P1_4	=	0x0094
                           000095   216 _P1_5	=	0x0095
                           000096   217 _P1_6	=	0x0096
                           000097   218 _P1_7	=	0x0097
                           000090   219 _T2	=	0x0090
                           000091   220 _T2EX	=	0x0091
                           000098   221 _RI	=	0x0098
                           000099   222 _TI	=	0x0099
                           00009A   223 _RB8	=	0x009a
                           00009B   224 _TB8	=	0x009b
                           00009C   225 _REN	=	0x009c
                           00009D   226 _SM2	=	0x009d
                           00009E   227 _SM1	=	0x009e
                           00009F   228 _SM0	=	0x009f
                           0000A0   229 _P2_0	=	0x00a0
                           0000A1   230 _P2_1	=	0x00a1
                           0000A2   231 _P2_2	=	0x00a2
                           0000A3   232 _P2_3	=	0x00a3
                           0000A4   233 _P2_4	=	0x00a4
                           0000A5   234 _P2_5	=	0x00a5
                           0000A6   235 _P2_6	=	0x00a6
                           0000A7   236 _P2_7	=	0x00a7
                           0000A8   237 _EX0	=	0x00a8
                           0000A9   238 _ET0	=	0x00a9
                           0000AA   239 _EX1	=	0x00aa
                           0000AB   240 _ET1	=	0x00ab
                           0000AC   241 _ES	=	0x00ac
                           0000AD   242 _ET2	=	0x00ad
                           0000AF   243 _EA	=	0x00af
                           0000B0   244 _P3_0	=	0x00b0
                           0000B1   245 _P3_1	=	0x00b1
                           0000B2   246 _P3_2	=	0x00b2
                           0000B3   247 _P3_3	=	0x00b3
                           0000B4   248 _P3_4	=	0x00b4
                           0000B5   249 _P3_5	=	0x00b5
                           0000B6   250 _P3_6	=	0x00b6
                           0000B7   251 _P3_7	=	0x00b7
                           0000B0   252 _RXD	=	0x00b0
                           0000B1   253 _TXD	=	0x00b1
                           0000B2   254 _INT0	=	0x00b2
                           0000B3   255 _INT1	=	0x00b3
                           0000B4   256 _T0	=	0x00b4
                           0000B5   257 _T1	=	0x00b5
                           0000B6   258 _WR	=	0x00b6
                           0000B7   259 _RD	=	0x00b7
                           0000B8   260 _PX0	=	0x00b8
                           0000B9   261 _PT0	=	0x00b9
                           0000BA   262 _PX1	=	0x00ba
                           0000BB   263 _PT1	=	0x00bb
                           0000BC   264 _PS	=	0x00bc
                           0000BD   265 _PT2	=	0x00bd
                           0000C8   266 _T2CON_0	=	0x00c8
                           0000C9   267 _T2CON_1	=	0x00c9
                           0000CA   268 _T2CON_2	=	0x00ca
                           0000CB   269 _T2CON_3	=	0x00cb
                           0000CC   270 _T2CON_4	=	0x00cc
                           0000CD   271 _T2CON_5	=	0x00cd
                           0000CE   272 _T2CON_6	=	0x00ce
                           0000CF   273 _T2CON_7	=	0x00cf
                           0000C8   274 _CP_RL2	=	0x00c8
                           0000C9   275 _C_T2	=	0x00c9
                           0000CA   276 _TR2	=	0x00ca
                           0000CB   277 _EXEN2	=	0x00cb
                           0000CC   278 _TCLK	=	0x00cc
                           0000CD   279 _RCLK	=	0x00cd
                           0000CE   280 _EXF2	=	0x00ce
                           0000CF   281 _TF2	=	0x00cf
                           0000D0   282 _P	=	0x00d0
                           0000D1   283 _FL	=	0x00d1
                           0000D2   284 _OV	=	0x00d2
                           0000D3   285 _RS0	=	0x00d3
                           0000D4   286 _RS1	=	0x00d4
                           0000D5   287 _F0	=	0x00d5
                           0000D6   288 _AC	=	0x00d6
                           0000D7   289 _CY	=	0x00d7
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable register banks
                                    292 ;--------------------------------------------------------
                                    293 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        294 	.ds 8
                                    295 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        296 	.ds 8
                                    297 ;--------------------------------------------------------
                                    298 ; overlayable bit register bank
                                    299 ;--------------------------------------------------------
                                    300 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        301 bits:
      000000                        302 	.ds 1
                           008000   303 	b0 = bits[0]
                           008100   304 	b1 = bits[1]
                           008200   305 	b2 = bits[2]
                           008300   306 	b3 = bits[3]
                           008400   307 	b4 = bits[4]
                           008500   308 	b5 = bits[5]
                           008600   309 	b6 = bits[6]
                           008700   310 	b7 = bits[7]
                                    311 ;--------------------------------------------------------
                                    312 ; internal ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area DSEG    (DATA)
                                    315 ;--------------------------------------------------------
                                    316 ; overlayable items in internal ram 
                                    317 ;--------------------------------------------------------
                                    318 ;--------------------------------------------------------
                                    319 ; Stack segment in internal ram 
                                    320 ;--------------------------------------------------------
                                    321 	.area	SSEG
      000000                        322 __start__stack:
      000000                        323 	.ds	1
                                    324 
                                    325 ;--------------------------------------------------------
                                    326 ; indirectly addressable internal ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area ISEG    (DATA)
                                    329 ;--------------------------------------------------------
                                    330 ; absolute internal ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area IABS    (ABS,DATA)
                                    333 	.area IABS    (ABS,DATA)
                                    334 ;--------------------------------------------------------
                                    335 ; bit data
                                    336 ;--------------------------------------------------------
                                    337 	.area BSEG    (BIT)
                                    338 ;--------------------------------------------------------
                                    339 ; paged external ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area PSEG    (PAG,XDATA)
                                    342 ;--------------------------------------------------------
                                    343 ; external ram data
                                    344 ;--------------------------------------------------------
                                    345 	.area XSEG    (XDATA)
      000000                        346 _i0::
      000000                        347 	.ds 1
      000001                        348 _i1::
      000001                        349 	.ds 1
      000002                        350 _pu::
      000002                        351 	.ds 1024
      000402                        352 _u::
      000402                        353 	.ds 1024
      000802                        354 _nu::
      000802                        355 	.ds 1024
      000C02                        356 _x::
      000C02                        357 	.ds 2
      000C04                        358 _y::
      000C04                        359 	.ds 2
      000C06                        360 _x1::
      000C06                        361 	.ds 2
      000C08                        362 _y1::
      000C08                        363 	.ds 2
      000C0A                        364 _n::
      000C0A                        365 	.ds 1
      000C0B                        366 _generation::
      000C0B                        367 	.ds 8
      000C13                        368 _fixed::
      000C13                        369 	.ds 1
      000C14                        370 _cycle2::
      000C14                        371 	.ds 1
      000C15                        372 _j::
      000C15                        373 	.ds 2
      000C17                        374 _c::
      000C17                        375 	.ds 2
                                    376 ;--------------------------------------------------------
                                    377 ; absolute external ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XABS    (ABS,XDATA)
                                    380 ;--------------------------------------------------------
                                    381 ; external initialized ram data
                                    382 ;--------------------------------------------------------
                                    383 	.area XISEG   (XDATA)
                                    384 	.area HOME    (CODE)
                                    385 	.area GSINIT0 (CODE)
                                    386 	.area GSINIT1 (CODE)
                                    387 	.area GSINIT2 (CODE)
                                    388 	.area GSINIT3 (CODE)
                                    389 	.area GSINIT4 (CODE)
                                    390 	.area GSINIT5 (CODE)
                                    391 	.area GSINIT  (CODE)
                                    392 	.area GSFINAL (CODE)
                                    393 	.area CSEG    (CODE)
                                    394 ;--------------------------------------------------------
                                    395 ; interrupt vector 
                                    396 ;--------------------------------------------------------
                                    397 	.area HOME    (CODE)
      000000                        398 __interrupt_vect:
      000000 02r00r00         [24]  399 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  400 	ljmp	_int0
      000006                        401 	.ds	5
      00000B 32               [24]  402 	reti
      00000C                        403 	.ds	7
      000013 02r00r21         [24]  404 	ljmp	_int1
                                    405 ;--------------------------------------------------------
                                    406 ; global & static initialisations
                                    407 ;--------------------------------------------------------
                                    408 	.area HOME    (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.area GSFINAL (CODE)
                                    411 	.area GSINIT  (CODE)
                                    412 	.globl __sdcc_gsinit_startup
                                    413 	.globl __sdcc_program_startup
                                    414 	.globl __start__stack
                                    415 	.globl __mcs51_genXINIT
                                    416 	.globl __mcs51_genXRAMCLEAR
                                    417 	.globl __mcs51_genRAMCLEAR
                                    418 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  419 	ljmp	__sdcc_program_startup
                                    420 ;--------------------------------------------------------
                                    421 ; Home
                                    422 ;--------------------------------------------------------
                                    423 	.area HOME    (CODE)
                                    424 	.area HOME    (CODE)
      000016                        425 __sdcc_program_startup:
      000016 02r02rE8         [24]  426 	ljmp	_main
                                    427 ;	return from main will return to caller
                                    428 ;--------------------------------------------------------
                                    429 ; code
                                    430 ;--------------------------------------------------------
                                    431 	.area CSEG    (CODE)
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'putchar'
                                    434 ;------------------------------------------------------------
                                    435 ;c                         Allocated to registers 
                                    436 ;------------------------------------------------------------
                                    437 ;	life.c:7: int putchar(int c) __naked {
                                    438 ;	-----------------------------------------
                                    439 ;	 function putchar
                                    440 ;	-----------------------------------------
      000000                        441 _putchar:
                                    442 ;	naked function: no prologue.
                                    443 ;	life.c:12: __endasm;
      000000 E5 82            [12]  444 	mov	a, dpl
      000002 02 00 30         [24]  445 	ljmp	0x0030
                                    446 ;	life.c:13: }
                                    447 ;	naked function: no epilogue.
                                    448 ;------------------------------------------------------------
                                    449 ;Allocation info for local variables in function 'getchar'
                                    450 ;------------------------------------------------------------
                                    451 ;	life.c:15: int getchar(void) __naked {
                                    452 ;	-----------------------------------------
                                    453 ;	 function getchar
                                    454 ;	-----------------------------------------
      000005                        455 _getchar:
                                    456 ;	naked function: no prologue.
                                    457 ;	life.c:21: __endasm;
      000005 12 00 32         [24]  458 	lcall	0x0032
      000008 F5 82            [12]  459 	mov	dpl, a
      00000A 75 83 00         [24]  460 	mov	dph, #0
      00000D 22               [24]  461 	ret
                                    462 ;	life.c:22: }
                                    463 ;	naked function: no epilogue.
                                    464 ;------------------------------------------------------------
                                    465 ;Allocation info for local variables in function 'int0'
                                    466 ;------------------------------------------------------------
                                    467 ;	life.c:65: void int0(void) __interrupt 0 __using 1 {
                                    468 ;	-----------------------------------------
                                    469 ;	 function int0
                                    470 ;	-----------------------------------------
      00000E                        471 _int0:
                           00000F   472 	ar7 = 0x0f
                           00000E   473 	ar6 = 0x0e
                           00000D   474 	ar5 = 0x0d
                           00000C   475 	ar4 = 0x0c
                           00000B   476 	ar3 = 0x0b
                           00000A   477 	ar2 = 0x0a
                           000009   478 	ar1 = 0x09
                           000008   479 	ar0 = 0x08
      00000E C0 E0            [24]  480 	push	acc
      000010 C0 82            [24]  481 	push	dpl
      000012 C0 83            [24]  482 	push	dph
                                    483 ;	life.c:66: i0 = 1;
      000014 90r00r00         [24]  484 	mov	dptr,#_i0
      000017 74 01            [12]  485 	mov	a,#0x01
      000019 F0               [24]  486 	movx	@dptr,a
                                    487 ;	life.c:67: }
      00001A D0 83            [24]  488 	pop	dph
      00001C D0 82            [24]  489 	pop	dpl
      00001E D0 E0            [24]  490 	pop	acc
      000020 32               [24]  491 	reti
                                    492 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    493 ;	eliminated unneeded push/pop psw
                                    494 ;	eliminated unneeded push/pop b
                                    495 ;------------------------------------------------------------
                                    496 ;Allocation info for local variables in function 'int1'
                                    497 ;------------------------------------------------------------
                                    498 ;	life.c:70: void int1(void) __interrupt 2 __using 1 {
                                    499 ;	-----------------------------------------
                                    500 ;	 function int1
                                    501 ;	-----------------------------------------
      000021                        502 _int1:
      000021 C0 E0            [24]  503 	push	acc
      000023 C0 82            [24]  504 	push	dpl
      000025 C0 83            [24]  505 	push	dph
                                    506 ;	life.c:71: i1 = 1;
      000027 90r00r01         [24]  507 	mov	dptr,#_i1
      00002A 74 01            [12]  508 	mov	a,#0x01
      00002C F0               [24]  509 	movx	@dptr,a
                                    510 ;	life.c:72: }
      00002D D0 83            [24]  511 	pop	dph
      00002F D0 82            [24]  512 	pop	dpl
      000031 D0 E0            [24]  513 	pop	acc
      000033 32               [24]  514 	reti
                                    515 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    516 ;	eliminated unneeded push/pop psw
                                    517 ;	eliminated unneeded push/pop b
                                    518 ;------------------------------------------------------------
                                    519 ;Allocation info for local variables in function 'show'
                                    520 ;------------------------------------------------------------
                                    521 ;hdr                       Allocated to registers r7 
                                    522 ;__1966080003              Allocated to registers 
                                    523 ;s                         Allocated to registers r5 r6 r7 
                                    524 ;__2621440001              Allocated to registers r6 r7 
                                    525 ;a                         Allocated to registers r4 r5 
                                    526 ;__1966080006              Allocated to registers 
                                    527 ;s                         Allocated to registers r5 r6 r7 
                                    528 ;__3276800009              Allocated to registers 
                                    529 ;s                         Allocated to registers r5 r6 r7 
                                    530 ;__3276800011              Allocated to registers 
                                    531 ;s                         Allocated to registers r5 r6 r7 
                                    532 ;__2621440013              Allocated to registers 
                                    533 ;s                         Allocated to registers r5 r6 r7 
                                    534 ;------------------------------------------------------------
                                    535 ;	life.c:99: void show(char hdr) {
                                    536 ;	-----------------------------------------
                                    537 ;	 function show
                                    538 ;	-----------------------------------------
      000034                        539 _show:
                           000007   540 	ar7 = 0x07
                           000006   541 	ar6 = 0x06
                           000005   542 	ar5 = 0x05
                           000004   543 	ar4 = 0x04
                           000003   544 	ar3 = 0x03
                           000002   545 	ar2 = 0x02
                           000001   546 	ar1 = 0x01
                           000000   547 	ar0 = 0x00
                                    548 ;	life.c:100: if (hdr) {
      000034 E5 82            [12]  549 	mov	a,dpl
      000036 FF               [12]  550 	mov	r7,a
      000037 70 03            [24]  551 	jnz	00241$
      000039 02r01rFC         [24]  552 	ljmp	00102$
      00003C                        553 00241$:
                                    554 ;	life.c:101: printstr("\033[2J\033[m");
      00003C 7Dr10            [12]  555 	mov	r5,#___str_0
      00003E 7Es00            [12]  556 	mov	r6,#(___str_0 >> 8)
      000040 7F 80            [12]  557 	mov	r7,#0x80
                                    558 ;	life.c:48: return;
      000042                        559 00128$:
                                    560 ;	life.c:46: for (; *s; s++) putchar(*s);
      000042 8D 82            [24]  561 	mov	dpl,r5
      000044 8E 83            [24]  562 	mov	dph,r6
      000046 8F F0            [24]  563 	mov	b,r7
      000048 12r00r00         [24]  564 	lcall	__gptrget
      00004B FC               [12]  565 	mov	r4,a
      00004C 60 10            [24]  566 	jz	00109$
      00004E 7B 00            [12]  567 	mov	r3,#0x00
      000050 8C 82            [24]  568 	mov	dpl,r4
      000052 8B 83            [24]  569 	mov	dph,r3
      000054 12r00r00         [24]  570 	lcall	_putchar
      000057 0D               [12]  571 	inc	r5
                                    572 ;	life.c:101: printstr("\033[2J\033[m");
      000058 BD 00 E7         [24]  573 	cjne	r5,#0x00,00128$
      00005B 0E               [12]  574 	inc	r6
      00005C 80 E4            [24]  575 	sjmp	00128$
      00005E                        576 00109$:
                                    577 ;	life.c:91: for (j = 0; j < 4; j++) {
      00005E 90r0Cr15         [24]  578 	mov	dptr,#_j
      000061 E4               [12]  579 	clr	a
      000062 F0               [24]  580 	movx	@dptr,a
      000063 A3               [24]  581 	inc	dptr
      000064 F0               [24]  582 	movx	@dptr,a
      000065                        583 00130$:
                                    584 ;	life.c:92: print16x(generation[3 - j]);
      000065 90r0Cr15         [24]  585 	mov	dptr,#_j
      000068 E0               [24]  586 	movx	a,@dptr
      000069 FE               [12]  587 	mov	r6,a
      00006A A3               [24]  588 	inc	dptr
      00006B E0               [24]  589 	movx	a,@dptr
      00006C 74 03            [12]  590 	mov	a,#0x03
      00006E C3               [12]  591 	clr	c
      00006F 9E               [12]  592 	subb	a,r6
      000070 FE               [12]  593 	mov	r6,a
      000071 C2 D5            [12]  594 	clr	F0
      000073 75 F0 02         [24]  595 	mov	b,#0x02
      000076 EE               [12]  596 	mov	a,r6
      000077 30 E7 04         [24]  597 	jnb	acc.7,00244$
      00007A B2 D5            [12]  598 	cpl	F0
      00007C F4               [12]  599 	cpl	a
      00007D 04               [12]  600 	inc	a
      00007E                        601 00244$:
      00007E A4               [48]  602 	mul	ab
      00007F 30 D5 0A         [24]  603 	jnb	F0,00245$
      000082 F4               [12]  604 	cpl	a
      000083 24 01            [12]  605 	add	a,#0x01
      000085 C5 F0            [12]  606 	xch	a,b
      000087 F4               [12]  607 	cpl	a
      000088 34 00            [12]  608 	addc	a,#0x00
      00008A C5 F0            [12]  609 	xch	a,b
      00008C                        610 00245$:
      00008C 24r0B            [12]  611 	add	a,#_generation
      00008E F5 82            [12]  612 	mov	dpl,a
      000090 74s0C            [12]  613 	mov	a,#(_generation >> 8)
      000092 35 F0            [12]  614 	addc	a,b
      000094 F5 83            [12]  615 	mov	dph,a
      000096 E0               [24]  616 	movx	a,@dptr
      000097 FE               [12]  617 	mov	r6,a
      000098 A3               [24]  618 	inc	dptr
      000099 E0               [24]  619 	movx	a,@dptr
      00009A FF               [12]  620 	mov	r7,a
      00009B 8E 04            [24]  621 	mov	ar4,r6
                                    622 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      00009D EF               [12]  623 	mov	a,r7
      00009E FD               [12]  624 	mov	r5,a
      00009F C4               [12]  625 	swap	a
      0000A0 54 0F            [12]  626 	anl	a,#0x0f
      0000A2 30 E3 02         [24]  627 	jnb	acc.3,00246$
      0000A5 44 F0            [12]  628 	orl	a,#0xf0
      0000A7                        629 00246$:
      0000A7 FE               [12]  630 	mov	r6,a
      0000A8 33               [12]  631 	rlc	a
      0000A9 95 E0            [12]  632 	subb	a,acc
      0000AB 53 06 0F         [24]  633 	anl	ar6,#0x0f
      0000AE 7F 00            [12]  634 	mov	r7,#0x00
      0000B0 EE               [12]  635 	mov	a,r6
      0000B1 24r00            [12]  636 	add	a,#_digits
      0000B3 F5 82            [12]  637 	mov	dpl,a
      0000B5 EF               [12]  638 	mov	a,r7
      0000B6 34s00            [12]  639 	addc	a,#(_digits >> 8)
      0000B8 F5 83            [12]  640 	mov	dph,a
      0000BA E4               [12]  641 	clr	a
      0000BB 93               [24]  642 	movc	a,@a+dptr
      0000BC FF               [12]  643 	mov	r7,a
      0000BD 7E 00            [12]  644 	mov	r6,#0x00
      0000BF 8F 82            [24]  645 	mov	dpl,r7
      0000C1 8E 83            [24]  646 	mov	dph,r6
      0000C3 12r00r00         [24]  647 	lcall	_putchar
                                    648 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      0000C6 8D 07            [24]  649 	mov	ar7,r5
      0000C8 53 07 0F         [24]  650 	anl	ar7,#0x0f
      0000CB 7E 00            [12]  651 	mov	r6,#0x00
      0000CD EF               [12]  652 	mov	a,r7
      0000CE 24r00            [12]  653 	add	a,#_digits
      0000D0 F5 82            [12]  654 	mov	dpl,a
      0000D2 EE               [12]  655 	mov	a,r6
      0000D3 34s00            [12]  656 	addc	a,#(_digits >> 8)
      0000D5 F5 83            [12]  657 	mov	dph,a
      0000D7 E4               [12]  658 	clr	a
      0000D8 93               [24]  659 	movc	a,@a+dptr
      0000D9 FF               [12]  660 	mov	r7,a
      0000DA 7E 00            [12]  661 	mov	r6,#0x00
      0000DC 8F 82            [24]  662 	mov	dpl,r7
      0000DE 8E 83            [24]  663 	mov	dph,r6
      0000E0 12r00r00         [24]  664 	lcall	_putchar
                                    665 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0000E3 8C 06            [24]  666 	mov	ar6,r4
      0000E5 ED               [12]  667 	mov	a,r5
      0000E6 C4               [12]  668 	swap	a
      0000E7 CE               [12]  669 	xch	a,r6
      0000E8 C4               [12]  670 	swap	a
      0000E9 54 0F            [12]  671 	anl	a,#0x0f
      0000EB 6E               [12]  672 	xrl	a,r6
      0000EC CE               [12]  673 	xch	a,r6
      0000ED 54 0F            [12]  674 	anl	a,#0x0f
      0000EF CE               [12]  675 	xch	a,r6
      0000F0 6E               [12]  676 	xrl	a,r6
      0000F1 CE               [12]  677 	xch	a,r6
      0000F2 30 E3 02         [24]  678 	jnb	acc.3,00247$
      0000F5 44 F0            [12]  679 	orl	a,#0xf0
      0000F7                        680 00247$:
      0000F7 53 06 0F         [24]  681 	anl	ar6,#0x0f
      0000FA 7F 00            [12]  682 	mov	r7,#0x00
      0000FC EE               [12]  683 	mov	a,r6
      0000FD 24r00            [12]  684 	add	a,#_digits
      0000FF F5 82            [12]  685 	mov	dpl,a
      000101 EF               [12]  686 	mov	a,r7
      000102 34s00            [12]  687 	addc	a,#(_digits >> 8)
      000104 F5 83            [12]  688 	mov	dph,a
      000106 E4               [12]  689 	clr	a
      000107 93               [24]  690 	movc	a,@a+dptr
      000108 FF               [12]  691 	mov	r7,a
      000109 7E 00            [12]  692 	mov	r6,#0x00
      00010B 8F 82            [24]  693 	mov	dpl,r7
      00010D 8E 83            [24]  694 	mov	dph,r6
      00010F 12r00r00         [24]  695 	lcall	_putchar
                                    696 ;	life.c:40: putchar(digits[a & 0xf]);
      000112 53 04 0F         [24]  697 	anl	ar4,#0x0f
      000115 7D 00            [12]  698 	mov	r5,#0x00
      000117 EC               [12]  699 	mov	a,r4
      000118 24r00            [12]  700 	add	a,#_digits
      00011A F5 82            [12]  701 	mov	dpl,a
      00011C ED               [12]  702 	mov	a,r5
      00011D 34s00            [12]  703 	addc	a,#(_digits >> 8)
      00011F F5 83            [12]  704 	mov	dph,a
      000121 E4               [12]  705 	clr	a
      000122 93               [24]  706 	movc	a,@a+dptr
      000123 FF               [12]  707 	mov	r7,a
      000124 7E 00            [12]  708 	mov	r6,#0x00
      000126 8F 82            [24]  709 	mov	dpl,r7
      000128 8E 83            [24]  710 	mov	dph,r6
      00012A 12r00r00         [24]  711 	lcall	_putchar
                                    712 ;	life.c:93: if (j < 3) putchar(' ');
      00012D 90r0Cr15         [24]  713 	mov	dptr,#_j
      000130 E0               [24]  714 	movx	a,@dptr
      000131 FE               [12]  715 	mov	r6,a
      000132 A3               [24]  716 	inc	dptr
      000133 E0               [24]  717 	movx	a,@dptr
      000134 FF               [12]  718 	mov	r7,a
      000135 C3               [12]  719 	clr	c
      000136 EE               [12]  720 	mov	a,r6
      000137 94 03            [12]  721 	subb	a,#0x03
      000139 EF               [12]  722 	mov	a,r7
      00013A 64 80            [12]  723 	xrl	a,#0x80
      00013C 94 80            [12]  724 	subb	a,#0x80
      00013E 50 06            [24]  725 	jnc	00131$
      000140 90 00 20         [24]  726 	mov	dptr,#0x0020
      000143 12r00r00         [24]  727 	lcall	_putchar
      000146                        728 00131$:
                                    729 ;	life.c:91: for (j = 0; j < 4; j++) {
      000146 90r0Cr15         [24]  730 	mov	dptr,#_j
      000149 E0               [24]  731 	movx	a,@dptr
      00014A 24 01            [12]  732 	add	a,#0x01
      00014C F0               [24]  733 	movx	@dptr,a
      00014D A3               [24]  734 	inc	dptr
      00014E E0               [24]  735 	movx	a,@dptr
      00014F 34 00            [12]  736 	addc	a,#0x00
      000151 F0               [24]  737 	movx	@dptr,a
      000152 90r0Cr15         [24]  738 	mov	dptr,#_j
      000155 E0               [24]  739 	movx	a,@dptr
      000156 FE               [12]  740 	mov	r6,a
      000157 A3               [24]  741 	inc	dptr
      000158 E0               [24]  742 	movx	a,@dptr
      000159 FF               [12]  743 	mov	r7,a
      00015A C3               [12]  744 	clr	c
      00015B EE               [12]  745 	mov	a,r6
      00015C 94 04            [12]  746 	subb	a,#0x04
      00015E EF               [12]  747 	mov	a,r7
      00015F 64 80            [12]  748 	xrl	a,#0x80
      000161 94 80            [12]  749 	subb	a,#0x80
      000163 50 03            [24]  750 	jnc	00249$
      000165 02r00r65         [24]  751 	ljmp	00130$
      000168                        752 00249$:
                                    753 ;	life.c:103: printstr("\r\n");
      000168 7Dr18            [12]  754 	mov	r5,#___str_1
      00016A 7Es00            [12]  755 	mov	r6,#(___str_1 >> 8)
      00016C 7F 80            [12]  756 	mov	r7,#0x80
                                    757 ;	life.c:48: return;
      00016E                        758 00133$:
                                    759 ;	life.c:46: for (; *s; s++) putchar(*s);
      00016E 8D 82            [24]  760 	mov	dpl,r5
      000170 8E 83            [24]  761 	mov	dph,r6
      000172 8F F0            [24]  762 	mov	b,r7
      000174 12r00r00         [24]  763 	lcall	__gptrget
      000177 FC               [12]  764 	mov	r4,a
      000178 60 10            [24]  765 	jz	00116$
      00017A 7B 00            [12]  766 	mov	r3,#0x00
      00017C 8C 82            [24]  767 	mov	dpl,r4
      00017E 8B 83            [24]  768 	mov	dph,r3
      000180 12r00r00         [24]  769 	lcall	_putchar
      000183 0D               [12]  770 	inc	r5
                                    771 ;	life.c:103: printstr("\r\n");
      000184 BD 00 E7         [24]  772 	cjne	r5,#0x00,00133$
      000187 0E               [12]  773 	inc	r6
      000188 80 E4            [24]  774 	sjmp	00133$
      00018A                        775 00116$:
                                    776 ;	life.c:82: for (j = 0; j < 4; j++) {
      00018A 90r0Cr15         [24]  777 	mov	dptr,#_j
      00018D E4               [12]  778 	clr	a
      00018E F0               [24]  779 	movx	@dptr,a
      00018F A3               [24]  780 	inc	dptr
      000190 F0               [24]  781 	movx	@dptr,a
      000191                        782 00135$:
                                    783 ;	life.c:83: generation[j]++;
      000191 90r0Cr15         [24]  784 	mov	dptr,#_j
      000194 E0               [24]  785 	movx	a,@dptr
      000195 FE               [12]  786 	mov	r6,a
      000196 A3               [24]  787 	inc	dptr
      000197 E0               [24]  788 	movx	a,@dptr
      000198 FF               [12]  789 	mov	r7,a
      000199 EE               [12]  790 	mov	a,r6
      00019A 2E               [12]  791 	add	a,r6
      00019B FE               [12]  792 	mov	r6,a
      00019C EF               [12]  793 	mov	a,r7
      00019D 33               [12]  794 	rlc	a
      00019E FF               [12]  795 	mov	r7,a
      00019F EE               [12]  796 	mov	a,r6
      0001A0 24r0B            [12]  797 	add	a,#_generation
      0001A2 FE               [12]  798 	mov	r6,a
      0001A3 EF               [12]  799 	mov	a,r7
      0001A4 34s0C            [12]  800 	addc	a,#(_generation >> 8)
      0001A6 FF               [12]  801 	mov	r7,a
      0001A7 8E 82            [24]  802 	mov	dpl,r6
      0001A9 8F 83            [24]  803 	mov	dph,r7
      0001AB E0               [24]  804 	movx	a,@dptr
      0001AC FC               [12]  805 	mov	r4,a
      0001AD A3               [24]  806 	inc	dptr
      0001AE E0               [24]  807 	movx	a,@dptr
      0001AF FD               [12]  808 	mov	r5,a
      0001B0 0C               [12]  809 	inc	r4
      0001B1 BC 00 01         [24]  810 	cjne	r4,#0x00,00252$
      0001B4 0D               [12]  811 	inc	r5
      0001B5                        812 00252$:
      0001B5 8E 82            [24]  813 	mov	dpl,r6
      0001B7 8F 83            [24]  814 	mov	dph,r7
      0001B9 EC               [12]  815 	mov	a,r4
      0001BA F0               [24]  816 	movx	@dptr,a
      0001BB ED               [12]  817 	mov	a,r5
      0001BC A3               [24]  818 	inc	dptr
      0001BD F0               [24]  819 	movx	@dptr,a
                                    820 ;	life.c:84: if (generation[j]) break;
      0001BE 90r0Cr15         [24]  821 	mov	dptr,#_j
      0001C1 E0               [24]  822 	movx	a,@dptr
      0001C2 FE               [12]  823 	mov	r6,a
      0001C3 A3               [24]  824 	inc	dptr
      0001C4 E0               [24]  825 	movx	a,@dptr
      0001C5 FF               [12]  826 	mov	r7,a
      0001C6 EE               [12]  827 	mov	a,r6
      0001C7 2E               [12]  828 	add	a,r6
      0001C8 FC               [12]  829 	mov	r4,a
      0001C9 EF               [12]  830 	mov	a,r7
      0001CA 33               [12]  831 	rlc	a
      0001CB FD               [12]  832 	mov	r5,a
      0001CC EC               [12]  833 	mov	a,r4
      0001CD 24r0B            [12]  834 	add	a,#_generation
      0001CF F5 82            [12]  835 	mov	dpl,a
      0001D1 ED               [12]  836 	mov	a,r5
      0001D2 34s0C            [12]  837 	addc	a,#(_generation >> 8)
      0001D4 F5 83            [12]  838 	mov	dph,a
      0001D6 E0               [24]  839 	movx	a,@dptr
      0001D7 FC               [12]  840 	mov	r4,a
      0001D8 A3               [24]  841 	inc	dptr
      0001D9 E0               [24]  842 	movx	a,@dptr
      0001DA FD               [12]  843 	mov	r5,a
      0001DB 4C               [12]  844 	orl	a,r4
      0001DC 70 1E            [24]  845 	jnz	00102$
                                    846 ;	life.c:82: for (j = 0; j < 4; j++) {
      0001DE 90r0Cr15         [24]  847 	mov	dptr,#_j
      0001E1 74 01            [12]  848 	mov	a,#0x01
      0001E3 2E               [12]  849 	add	a,r6
      0001E4 F0               [24]  850 	movx	@dptr,a
      0001E5 E4               [12]  851 	clr	a
      0001E6 3F               [12]  852 	addc	a,r7
      0001E7 A3               [24]  853 	inc	dptr
      0001E8 F0               [24]  854 	movx	@dptr,a
      0001E9 90r0Cr15         [24]  855 	mov	dptr,#_j
      0001EC E0               [24]  856 	movx	a,@dptr
      0001ED FE               [12]  857 	mov	r6,a
      0001EE A3               [24]  858 	inc	dptr
      0001EF E0               [24]  859 	movx	a,@dptr
      0001F0 FF               [12]  860 	mov	r7,a
      0001F1 C3               [12]  861 	clr	c
      0001F2 EE               [12]  862 	mov	a,r6
      0001F3 94 04            [12]  863 	subb	a,#0x04
      0001F5 EF               [12]  864 	mov	a,r7
      0001F6 64 80            [12]  865 	xrl	a,#0x80
      0001F8 94 80            [12]  866 	subb	a,#0x80
      0001FA 40 95            [24]  867 	jc	00135$
                                    868 ;	life.c:104: updategen();
      0001FC                        869 00102$:
                                    870 ;	life.c:107: for (x = 0; x < W; x++) {
      0001FC 90r0Cr02         [24]  871 	mov	dptr,#_x
      0001FF E4               [12]  872 	clr	a
      000200 F0               [24]  873 	movx	@dptr,a
      000201 A3               [24]  874 	inc	dptr
      000202 F0               [24]  875 	movx	@dptr,a
      000203                        876 00148$:
                                    877 ;	life.c:108: for (y = 0; y < H; y++)
      000203 90r0Cr04         [24]  878 	mov	dptr,#_y
      000206 E4               [12]  879 	clr	a
      000207 F0               [24]  880 	movx	@dptr,a
      000208 A3               [24]  881 	inc	dptr
      000209 F0               [24]  882 	movx	@dptr,a
      00020A                        883 00143$:
                                    884 ;	life.c:109: if (u[A2D(W, y, x)]) printstr("[]");
      00020A 90r0Cr04         [24]  885 	mov	dptr,#_y
      00020D E0               [24]  886 	movx	a,@dptr
      00020E FE               [12]  887 	mov	r6,a
      00020F A3               [24]  888 	inc	dptr
      000210 E0               [24]  889 	movx	a,@dptr
      000211 C4               [12]  890 	swap	a
      000212 23               [12]  891 	rl	a
      000213 54 E0            [12]  892 	anl	a,#0xe0
      000215 CE               [12]  893 	xch	a,r6
      000216 C4               [12]  894 	swap	a
      000217 23               [12]  895 	rl	a
      000218 CE               [12]  896 	xch	a,r6
      000219 6E               [12]  897 	xrl	a,r6
      00021A CE               [12]  898 	xch	a,r6
      00021B 54 E0            [12]  899 	anl	a,#0xe0
      00021D CE               [12]  900 	xch	a,r6
      00021E 6E               [12]  901 	xrl	a,r6
      00021F FF               [12]  902 	mov	r7,a
      000220 90r0Cr02         [24]  903 	mov	dptr,#_x
      000223 E0               [24]  904 	movx	a,@dptr
      000224 FC               [12]  905 	mov	r4,a
      000225 A3               [24]  906 	inc	dptr
      000226 E0               [24]  907 	movx	a,@dptr
      000227 FD               [12]  908 	mov	r5,a
      000228 EC               [12]  909 	mov	a,r4
      000229 2E               [12]  910 	add	a,r6
      00022A FE               [12]  911 	mov	r6,a
      00022B ED               [12]  912 	mov	a,r5
      00022C 3F               [12]  913 	addc	a,r7
      00022D FF               [12]  914 	mov	r7,a
      00022E EE               [12]  915 	mov	a,r6
      00022F 24r02            [12]  916 	add	a,#_u
      000231 FE               [12]  917 	mov	r6,a
      000232 EF               [12]  918 	mov	a,r7
      000233 34s04            [12]  919 	addc	a,#(_u >> 8)
      000235 FF               [12]  920 	mov	r7,a
      000236 8E 82            [24]  921 	mov	dpl,r6
      000238 8F 83            [24]  922 	mov	dph,r7
      00023A E0               [24]  923 	movx	a,@dptr
      00023B 60 22            [24]  924 	jz	00104$
      00023D 7Dr1B            [12]  925 	mov	r5,#___str_2
      00023F 7Es00            [12]  926 	mov	r6,#(___str_2 >> 8)
      000241 7F 80            [12]  927 	mov	r7,#0x80
                                    928 ;	life.c:48: return;
      000243                        929 00138$:
                                    930 ;	life.c:46: for (; *s; s++) putchar(*s);
      000243 8D 82            [24]  931 	mov	dpl,r5
      000245 8E 83            [24]  932 	mov	dph,r6
      000247 8F F0            [24]  933 	mov	b,r7
      000249 12r00r00         [24]  934 	lcall	__gptrget
      00024C FC               [12]  935 	mov	r4,a
      00024D 60 32            [24]  936 	jz	00144$
      00024F 7B 00            [12]  937 	mov	r3,#0x00
      000251 8C 82            [24]  938 	mov	dpl,r4
      000253 8B 83            [24]  939 	mov	dph,r3
      000255 12r00r00         [24]  940 	lcall	_putchar
      000258 0D               [12]  941 	inc	r5
                                    942 ;	life.c:109: if (u[A2D(W, y, x)]) printstr("[]");
      000259 BD 00 E7         [24]  943 	cjne	r5,#0x00,00138$
      00025C 0E               [12]  944 	inc	r6
      00025D 80 E4            [24]  945 	sjmp	00138$
      00025F                        946 00104$:
                                    947 ;	life.c:110: else printstr("##");
      00025F 7Dr1E            [12]  948 	mov	r5,#___str_3
      000261 7Es00            [12]  949 	mov	r6,#(___str_3 >> 8)
      000263 7F 80            [12]  950 	mov	r7,#0x80
                                    951 ;	life.c:48: return;
      000265                        952 00141$:
                                    953 ;	life.c:46: for (; *s; s++) putchar(*s);
      000265 8D 82            [24]  954 	mov	dpl,r5
      000267 8E 83            [24]  955 	mov	dph,r6
      000269 8F F0            [24]  956 	mov	b,r7
      00026B 12r00r00         [24]  957 	lcall	__gptrget
      00026E FC               [12]  958 	mov	r4,a
      00026F 60 10            [24]  959 	jz	00144$
      000271 7B 00            [12]  960 	mov	r3,#0x00
      000273 8C 82            [24]  961 	mov	dpl,r4
      000275 8B 83            [24]  962 	mov	dph,r3
      000277 12r00r00         [24]  963 	lcall	_putchar
      00027A 0D               [12]  964 	inc	r5
                                    965 ;	life.c:110: else printstr("##");
      00027B BD 00 E7         [24]  966 	cjne	r5,#0x00,00141$
      00027E 0E               [12]  967 	inc	r6
      00027F 80 E4            [24]  968 	sjmp	00141$
      000281                        969 00144$:
                                    970 ;	life.c:108: for (y = 0; y < H; y++)
      000281 90r0Cr04         [24]  971 	mov	dptr,#_y
      000284 E0               [24]  972 	movx	a,@dptr
      000285 24 01            [12]  973 	add	a,#0x01
      000287 F0               [24]  974 	movx	@dptr,a
      000288 A3               [24]  975 	inc	dptr
      000289 E0               [24]  976 	movx	a,@dptr
      00028A 34 00            [12]  977 	addc	a,#0x00
      00028C F0               [24]  978 	movx	@dptr,a
      00028D 90r0Cr04         [24]  979 	mov	dptr,#_y
      000290 E0               [24]  980 	movx	a,@dptr
      000291 FE               [12]  981 	mov	r6,a
      000292 A3               [24]  982 	inc	dptr
      000293 E0               [24]  983 	movx	a,@dptr
      000294 FF               [12]  984 	mov	r7,a
      000295 C3               [12]  985 	clr	c
      000296 EE               [12]  986 	mov	a,r6
      000297 94 20            [12]  987 	subb	a,#0x20
      000299 EF               [12]  988 	mov	a,r7
      00029A 64 80            [12]  989 	xrl	a,#0x80
      00029C 94 80            [12]  990 	subb	a,#0x80
      00029E 50 03            [24]  991 	jnc	00260$
      0002A0 02r02r0A         [24]  992 	ljmp	00143$
      0002A3                        993 00260$:
                                    994 ;	life.c:111: printstr("\r\n");
      0002A3 7Dr18            [12]  995 	mov	r5,#___str_1
      0002A5 7Es00            [12]  996 	mov	r6,#(___str_1 >> 8)
      0002A7 7F 80            [12]  997 	mov	r7,#0x80
                                    998 ;	life.c:48: return;
      0002A9                        999 00146$:
                                   1000 ;	life.c:46: for (; *s; s++) putchar(*s);
      0002A9 8D 82            [24] 1001 	mov	dpl,r5
      0002AB 8E 83            [24] 1002 	mov	dph,r6
      0002AD 8F F0            [24] 1003 	mov	b,r7
      0002AF 12r00r00         [24] 1004 	lcall	__gptrget
      0002B2 FC               [12] 1005 	mov	r4,a
      0002B3 60 10            [24] 1006 	jz	00126$
      0002B5 7B 00            [12] 1007 	mov	r3,#0x00
      0002B7 8C 82            [24] 1008 	mov	dpl,r4
      0002B9 8B 83            [24] 1009 	mov	dph,r3
      0002BB 12r00r00         [24] 1010 	lcall	_putchar
      0002BE 0D               [12] 1011 	inc	r5
                                   1012 ;	life.c:111: printstr("\r\n");
      0002BF BD 00 E7         [24] 1013 	cjne	r5,#0x00,00146$
      0002C2 0E               [12] 1014 	inc	r6
      0002C3 80 E4            [24] 1015 	sjmp	00146$
      0002C5                       1016 00126$:
                                   1017 ;	life.c:107: for (x = 0; x < W; x++) {
      0002C5 90r0Cr02         [24] 1018 	mov	dptr,#_x
      0002C8 E0               [24] 1019 	movx	a,@dptr
      0002C9 24 01            [12] 1020 	add	a,#0x01
      0002CB F0               [24] 1021 	movx	@dptr,a
      0002CC A3               [24] 1022 	inc	dptr
      0002CD E0               [24] 1023 	movx	a,@dptr
      0002CE 34 00            [12] 1024 	addc	a,#0x00
      0002D0 F0               [24] 1025 	movx	@dptr,a
      0002D1 90r0Cr02         [24] 1026 	mov	dptr,#_x
      0002D4 E0               [24] 1027 	movx	a,@dptr
      0002D5 FE               [12] 1028 	mov	r6,a
      0002D6 A3               [24] 1029 	inc	dptr
      0002D7 E0               [24] 1030 	movx	a,@dptr
      0002D8 FF               [12] 1031 	mov	r7,a
      0002D9 C3               [12] 1032 	clr	c
      0002DA EE               [12] 1033 	mov	a,r6
      0002DB 94 20            [12] 1034 	subb	a,#0x20
      0002DD EF               [12] 1035 	mov	a,r7
      0002DE 64 80            [12] 1036 	xrl	a,#0x80
      0002E0 94 80            [12] 1037 	subb	a,#0x80
      0002E2 50 03            [24] 1038 	jnc	00263$
      0002E4 02r02r03         [24] 1039 	ljmp	00148$
      0002E7                       1040 00263$:
                                   1041 ;	life.c:114: return;
                                   1042 ;	life.c:115: }
      0002E7 22               [24] 1043 	ret
                                   1044 ;------------------------------------------------------------
                                   1045 ;Allocation info for local variables in function 'main'
                                   1046 ;------------------------------------------------------------
                                   1047 ;__2621440022              Allocated to registers 
                                   1048 ;s                         Allocated to registers r5 r6 r7 
                                   1049 ;__1310720015              Allocated to registers 
                                   1050 ;s                         Allocated to registers r5 r6 r7 
                                   1051 ;__1310720017              Allocated to registers r6 r7 
                                   1052 ;a                         Allocated to registers r4 r5 
                                   1053 ;__1310720019              Allocated to registers 
                                   1054 ;s                         Allocated to registers r5 r6 r7 
                                   1055 ;__2621440025              Allocated to registers 
                                   1056 ;s                         Allocated to registers r5 r6 r7 
                                   1057 ;__4587520029              Allocated to registers 
                                   1058 ;s                         Allocated to registers r5 r6 r7 
                                   1059 ;__3276800031              Allocated to registers 
                                   1060 ;s                         Allocated to registers r5 r6 r7 
                                   1061 ;__1310720033              Allocated to registers 
                                   1062 ;s                         Allocated to registers r5 r6 r7 
                                   1063 ;sloc0                     Allocated to stack - _bp +1
                                   1064 ;------------------------------------------------------------
                                   1065 ;	life.c:177: void main(void) {
                                   1066 ;	-----------------------------------------
                                   1067 ;	 function main
                                   1068 ;	-----------------------------------------
      0002E8                       1069 _main:
      0002E8 C0*00            [24] 1070 	push	_bp
      0002EA 85 81*00         [24] 1071 	mov	_bp,sp
      0002ED 05 81            [12] 1072 	inc	sp
      0002EF 05 81            [12] 1073 	inc	sp
                                   1074 ;	life.c:178: IT0 = 1;
                                   1075 ;	assignBit
      0002F1 D2 88            [12] 1076 	setb	_IT0
                                   1077 ;	life.c:179: IT1 = 1;
                                   1078 ;	assignBit
      0002F3 D2 8A            [12] 1079 	setb	_IT1
                                   1080 ;	life.c:180: EX0 = 1;
                                   1081 ;	assignBit
      0002F5 D2 A8            [12] 1082 	setb	_EX0
                                   1083 ;	life.c:181: EX1 = 1;
                                   1084 ;	assignBit
      0002F7 D2 AA            [12] 1085 	setb	_EX1
                                   1086 ;	life.c:182: EA = 1;
                                   1087 ;	assignBit
      0002F9 D2 AF            [12] 1088 	setb	_EA
                                   1089 ;	life.c:184: for (i0 = 0; !i0; ) {
      0002FB 90r00r00         [24] 1090 	mov	dptr,#_i0
      0002FE E4               [12] 1091 	clr	a
      0002FF F0               [24] 1092 	movx	@dptr,a
      000300 90r00r01         [24] 1093 	mov	dptr,#_i1
      000303 F0               [24] 1094 	movx	@dptr,a
      000304                       1095 00192$:
                                   1096 ;	life.c:118: memset(u, 0, sizeof (u));
      000304 E4               [12] 1097 	clr	a
      000305 C0 E0            [24] 1098 	push	acc
      000307 74 04            [12] 1099 	mov	a,#0x04
      000309 C0 E0            [24] 1100 	push	acc
      00030B E4               [12] 1101 	clr	a
      00030C C0 E0            [24] 1102 	push	acc
      00030E 90r04r02         [24] 1103 	mov	dptr,#_u
      000311 75 F0 00         [24] 1104 	mov	b,#0x00
      000314 12r00r00         [24] 1105 	lcall	_memset
      000317 15 81            [12] 1106 	dec	sp
      000319 15 81            [12] 1107 	dec	sp
      00031B 15 81            [12] 1108 	dec	sp
                                   1109 ;	life.c:119: memset(pu, 0, sizeof (pu));
      00031D E4               [12] 1110 	clr	a
      00031E C0 E0            [24] 1111 	push	acc
      000320 74 04            [12] 1112 	mov	a,#0x04
      000322 C0 E0            [24] 1113 	push	acc
      000324 E4               [12] 1114 	clr	a
      000325 C0 E0            [24] 1115 	push	acc
      000327 90r00r02         [24] 1116 	mov	dptr,#_pu
      00032A 75 F0 00         [24] 1117 	mov	b,#0x00
      00032D 12r00r00         [24] 1118 	lcall	_memset
      000330 15 81            [12] 1119 	dec	sp
      000332 15 81            [12] 1120 	dec	sp
      000334 15 81            [12] 1121 	dec	sp
                                   1122 ;	life.c:186: printstr("\033[2J\033[mINIT\r\n");
      000336 7Dr2C            [12] 1123 	mov	r5,#___str_6
      000338 7Es00            [12] 1124 	mov	r6,#(___str_6 >> 8)
      00033A 7F 80            [12] 1125 	mov	r7,#0x80
                                   1126 ;	life.c:48: return;
      00033C                       1127 00155$:
                                   1128 ;	life.c:46: for (; *s; s++) putchar(*s);
      00033C 8D 82            [24] 1129 	mov	dpl,r5
      00033E 8E 83            [24] 1130 	mov	dph,r6
      000340 8F F0            [24] 1131 	mov	b,r7
      000342 12r00r00         [24] 1132 	lcall	__gptrget
      000345 FC               [12] 1133 	mov	r4,a
      000346 60 10            [24] 1134 	jz	00110$
      000348 7B 00            [12] 1135 	mov	r3,#0x00
      00034A 8C 82            [24] 1136 	mov	dpl,r4
      00034C 8B 83            [24] 1137 	mov	dph,r3
      00034E 12r00r00         [24] 1138 	lcall	_putchar
      000351 0D               [12] 1139 	inc	r5
                                   1140 ;	life.c:186: printstr("\033[2J\033[mINIT\r\n");
      000352 BD 00 E7         [24] 1141 	cjne	r5,#0x00,00155$
      000355 0E               [12] 1142 	inc	r6
      000356 80 E4            [24] 1143 	sjmp	00155$
      000358                       1144 00110$:
                                   1145 ;	life.c:187: (void)getchar();
      000358 12r00r05         [24] 1146 	lcall	_getchar
                                   1147 ;	life.c:125: j = 0;
      00035B 90r0Cr15         [24] 1148 	mov	dptr,#_j
      00035E E4               [12] 1149 	clr	a
      00035F F0               [24] 1150 	movx	@dptr,a
      000360 A3               [24] 1151 	inc	dptr
      000361 F0               [24] 1152 	movx	@dptr,a
                                   1153 ;	life.c:127: printstr("LOAD <");
      000362 7Dr21            [12] 1154 	mov	r5,#___str_4
      000364 7Es00            [12] 1155 	mov	r6,#(___str_4 >> 8)
      000366 7F 80            [12] 1156 	mov	r7,#0x80
                                   1157 ;	life.c:48: return;
      000368                       1158 00158$:
                                   1159 ;	life.c:46: for (; *s; s++) putchar(*s);
      000368 8D 82            [24] 1160 	mov	dpl,r5
      00036A 8E 83            [24] 1161 	mov	dph,r6
      00036C 8F F0            [24] 1162 	mov	b,r7
      00036E 12r00r00         [24] 1163 	lcall	__gptrget
      000371 FC               [12] 1164 	mov	r4,a
      000372 60 10            [24] 1165 	jz	00112$
      000374 7B 00            [12] 1166 	mov	r3,#0x00
      000376 8C 82            [24] 1167 	mov	dpl,r4
      000378 8B 83            [24] 1168 	mov	dph,r3
      00037A 12r00r00         [24] 1169 	lcall	_putchar
      00037D 0D               [12] 1170 	inc	r5
                                   1171 ;	life.c:127: printstr("LOAD <");
      00037E BD 00 E7         [24] 1172 	cjne	r5,#0x00,00158$
      000381 0E               [12] 1173 	inc	r6
      000382 80 E4            [24] 1174 	sjmp	00158$
      000384                       1175 00112$:
                                   1176 ;	life.c:129: for (y = 0; y < H; y++)
      000384 90r0Cr04         [24] 1177 	mov	dptr,#_y
      000387 E4               [12] 1178 	clr	a
      000388 F0               [24] 1179 	movx	@dptr,a
      000389 A3               [24] 1180 	inc	dptr
      00038A F0               [24] 1181 	movx	@dptr,a
      00038B                       1182 00162$:
                                   1183 ;	life.c:130: for (x = 0; x < W; x++) {
      00038B 90r0Cr02         [24] 1184 	mov	dptr,#_x
      00038E E4               [12] 1185 	clr	a
      00038F F0               [24] 1186 	movx	@dptr,a
      000390 A3               [24] 1187 	inc	dptr
      000391 F0               [24] 1188 	movx	@dptr,a
      000392                       1189 00160$:
                                   1190 ;	life.c:131: c = getchar();
      000392 12r00r05         [24] 1191 	lcall	_getchar
      000395 AE 82            [24] 1192 	mov	r6,dpl
      000397 AF 83            [24] 1193 	mov	r7,dph
      000399 90r0Cr17         [24] 1194 	mov	dptr,#_c
      00039C EE               [12] 1195 	mov	a,r6
      00039D F0               [24] 1196 	movx	@dptr,a
      00039E EF               [12] 1197 	mov	a,r7
      00039F A3               [24] 1198 	inc	dptr
      0003A0 F0               [24] 1199 	movx	@dptr,a
                                   1200 ;	life.c:132: if (c == (int)'0') {
      0003A1 BE 30 41         [24] 1201 	cjne	r6,#0x30,00119$
      0003A4 BF 00 3E         [24] 1202 	cjne	r7,#0x00,00119$
                                   1203 ;	life.c:133: u[A2D(W, y, x)] = 0;
      0003A7 90r0Cr04         [24] 1204 	mov	dptr,#_y
      0003AA E0               [24] 1205 	movx	a,@dptr
      0003AB FC               [12] 1206 	mov	r4,a
      0003AC A3               [24] 1207 	inc	dptr
      0003AD E0               [24] 1208 	movx	a,@dptr
      0003AE C4               [12] 1209 	swap	a
      0003AF 23               [12] 1210 	rl	a
      0003B0 54 E0            [12] 1211 	anl	a,#0xe0
      0003B2 CC               [12] 1212 	xch	a,r4
      0003B3 C4               [12] 1213 	swap	a
      0003B4 23               [12] 1214 	rl	a
      0003B5 CC               [12] 1215 	xch	a,r4
      0003B6 6C               [12] 1216 	xrl	a,r4
      0003B7 CC               [12] 1217 	xch	a,r4
      0003B8 54 E0            [12] 1218 	anl	a,#0xe0
      0003BA CC               [12] 1219 	xch	a,r4
      0003BB 6C               [12] 1220 	xrl	a,r4
      0003BC FD               [12] 1221 	mov	r5,a
      0003BD 90r0Cr02         [24] 1222 	mov	dptr,#_x
      0003C0 E0               [24] 1223 	movx	a,@dptr
      0003C1 FA               [12] 1224 	mov	r2,a
      0003C2 A3               [24] 1225 	inc	dptr
      0003C3 E0               [24] 1226 	movx	a,@dptr
      0003C4 FB               [12] 1227 	mov	r3,a
      0003C5 EA               [12] 1228 	mov	a,r2
      0003C6 2C               [12] 1229 	add	a,r4
      0003C7 FC               [12] 1230 	mov	r4,a
      0003C8 EB               [12] 1231 	mov	a,r3
      0003C9 3D               [12] 1232 	addc	a,r5
      0003CA FD               [12] 1233 	mov	r5,a
      0003CB EC               [12] 1234 	mov	a,r4
      0003CC 24r02            [12] 1235 	add	a,#_u
      0003CE F5 82            [12] 1236 	mov	dpl,a
      0003D0 ED               [12] 1237 	mov	a,r5
      0003D1 34s04            [12] 1238 	addc	a,#(_u >> 8)
      0003D3 F5 83            [12] 1239 	mov	dph,a
      0003D5 E4               [12] 1240 	clr	a
      0003D6 F0               [24] 1241 	movx	@dptr,a
                                   1242 ;	life.c:134: j++;
      0003D7 90r0Cr15         [24] 1243 	mov	dptr,#_j
      0003DA E0               [24] 1244 	movx	a,@dptr
      0003DB 24 01            [12] 1245 	add	a,#0x01
      0003DD F0               [24] 1246 	movx	@dptr,a
      0003DE A3               [24] 1247 	inc	dptr
      0003DF E0               [24] 1248 	movx	a,@dptr
      0003E0 34 00            [12] 1249 	addc	a,#0x00
      0003E2 F0               [24] 1250 	movx	@dptr,a
      0003E3 80 4D            [24] 1251 	sjmp	00161$
      0003E5                       1252 00119$:
                                   1253 ;	life.c:135: } else if (c == (int)'1') {
      0003E5 BE 31 42         [24] 1254 	cjne	r6,#0x31,00117$
      0003E8 BF 00 3F         [24] 1255 	cjne	r7,#0x00,00117$
                                   1256 ;	life.c:136: u[A2D(W, y, x)] = 1;
      0003EB 90r0Cr04         [24] 1257 	mov	dptr,#_y
      0003EE E0               [24] 1258 	movx	a,@dptr
      0003EF FC               [12] 1259 	mov	r4,a
      0003F0 A3               [24] 1260 	inc	dptr
      0003F1 E0               [24] 1261 	movx	a,@dptr
      0003F2 C4               [12] 1262 	swap	a
      0003F3 23               [12] 1263 	rl	a
      0003F4 54 E0            [12] 1264 	anl	a,#0xe0
      0003F6 CC               [12] 1265 	xch	a,r4
      0003F7 C4               [12] 1266 	swap	a
      0003F8 23               [12] 1267 	rl	a
      0003F9 CC               [12] 1268 	xch	a,r4
      0003FA 6C               [12] 1269 	xrl	a,r4
      0003FB CC               [12] 1270 	xch	a,r4
      0003FC 54 E0            [12] 1271 	anl	a,#0xe0
      0003FE CC               [12] 1272 	xch	a,r4
      0003FF 6C               [12] 1273 	xrl	a,r4
      000400 FD               [12] 1274 	mov	r5,a
      000401 90r0Cr02         [24] 1275 	mov	dptr,#_x
      000404 E0               [24] 1276 	movx	a,@dptr
      000405 FA               [12] 1277 	mov	r2,a
      000406 A3               [24] 1278 	inc	dptr
      000407 E0               [24] 1279 	movx	a,@dptr
      000408 FB               [12] 1280 	mov	r3,a
      000409 EA               [12] 1281 	mov	a,r2
      00040A 2C               [12] 1282 	add	a,r4
      00040B FC               [12] 1283 	mov	r4,a
      00040C EB               [12] 1284 	mov	a,r3
      00040D 3D               [12] 1285 	addc	a,r5
      00040E FD               [12] 1286 	mov	r5,a
      00040F EC               [12] 1287 	mov	a,r4
      000410 24r02            [12] 1288 	add	a,#_u
      000412 F5 82            [12] 1289 	mov	dpl,a
      000414 ED               [12] 1290 	mov	a,r5
      000415 34s04            [12] 1291 	addc	a,#(_u >> 8)
      000417 F5 83            [12] 1292 	mov	dph,a
      000419 74 01            [12] 1293 	mov	a,#0x01
      00041B F0               [24] 1294 	movx	@dptr,a
                                   1295 ;	life.c:137: j++;
      00041C 90r0Cr15         [24] 1296 	mov	dptr,#_j
      00041F E0               [24] 1297 	movx	a,@dptr
      000420 24 01            [12] 1298 	add	a,#0x01
      000422 F0               [24] 1299 	movx	@dptr,a
      000423 A3               [24] 1300 	inc	dptr
      000424 E0               [24] 1301 	movx	a,@dptr
      000425 34 00            [12] 1302 	addc	a,#0x00
      000427 F0               [24] 1303 	movx	@dptr,a
      000428 80 08            [24] 1304 	sjmp	00161$
      00042A                       1305 00117$:
                                   1306 ;	life.c:138: } else if (c == (int)'#') goto out;
      00042A BE 23 05         [24] 1307 	cjne	r6,#0x23,00381$
      00042D BF 00 02         [24] 1308 	cjne	r7,#0x00,00381$
      000430 80 44            [24] 1309 	sjmp	00130$
      000432                       1310 00381$:
      000432                       1311 00161$:
                                   1312 ;	life.c:130: for (x = 0; x < W; x++) {
      000432 90r0Cr02         [24] 1313 	mov	dptr,#_x
      000435 E0               [24] 1314 	movx	a,@dptr
      000436 24 01            [12] 1315 	add	a,#0x01
      000438 F0               [24] 1316 	movx	@dptr,a
      000439 A3               [24] 1317 	inc	dptr
      00043A E0               [24] 1318 	movx	a,@dptr
      00043B 34 00            [12] 1319 	addc	a,#0x00
      00043D F0               [24] 1320 	movx	@dptr,a
      00043E 90r0Cr02         [24] 1321 	mov	dptr,#_x
      000441 E0               [24] 1322 	movx	a,@dptr
      000442 FE               [12] 1323 	mov	r6,a
      000443 A3               [24] 1324 	inc	dptr
      000444 E0               [24] 1325 	movx	a,@dptr
      000445 FF               [12] 1326 	mov	r7,a
      000446 C3               [12] 1327 	clr	c
      000447 EE               [12] 1328 	mov	a,r6
      000448 94 20            [12] 1329 	subb	a,#0x20
      00044A EF               [12] 1330 	mov	a,r7
      00044B 64 80            [12] 1331 	xrl	a,#0x80
      00044D 94 80            [12] 1332 	subb	a,#0x80
      00044F 50 03            [24] 1333 	jnc	00382$
      000451 02r03r92         [24] 1334 	ljmp	00160$
      000454                       1335 00382$:
                                   1336 ;	life.c:129: for (y = 0; y < H; y++)
      000454 90r0Cr04         [24] 1337 	mov	dptr,#_y
      000457 E0               [24] 1338 	movx	a,@dptr
      000458 24 01            [12] 1339 	add	a,#0x01
      00045A F0               [24] 1340 	movx	@dptr,a
      00045B A3               [24] 1341 	inc	dptr
      00045C E0               [24] 1342 	movx	a,@dptr
      00045D 34 00            [12] 1343 	addc	a,#0x00
      00045F F0               [24] 1344 	movx	@dptr,a
      000460 90r0Cr04         [24] 1345 	mov	dptr,#_y
      000463 E0               [24] 1346 	movx	a,@dptr
      000464 FE               [12] 1347 	mov	r6,a
      000465 A3               [24] 1348 	inc	dptr
      000466 E0               [24] 1349 	movx	a,@dptr
      000467 FF               [12] 1350 	mov	r7,a
      000468 C3               [12] 1351 	clr	c
      000469 EE               [12] 1352 	mov	a,r6
      00046A 94 20            [12] 1353 	subb	a,#0x20
      00046C EF               [12] 1354 	mov	a,r7
      00046D 64 80            [12] 1355 	xrl	a,#0x80
      00046F 94 80            [12] 1356 	subb	a,#0x80
      000471 50 03            [24] 1357 	jnc	00383$
      000473 02r03r8B         [24] 1358 	ljmp	00162$
      000476                       1359 00383$:
                                   1360 ;	life.c:141: out:
      000476                       1361 00130$:
                                   1362 ;	life.c:142: if (c != (int)'#')
      000476 90r0Cr17         [24] 1363 	mov	dptr,#_c
      000479 E0               [24] 1364 	movx	a,@dptr
      00047A FE               [12] 1365 	mov	r6,a
      00047B A3               [24] 1366 	inc	dptr
      00047C E0               [24] 1367 	movx	a,@dptr
      00047D FF               [12] 1368 	mov	r7,a
      00047E BE 23 05         [24] 1369 	cjne	r6,#0x23,00384$
      000481 BF 00 02         [24] 1370 	cjne	r7,#0x00,00384$
      000484 80 15            [24] 1371 	sjmp	00129$
      000486                       1372 00384$:
                                   1373 ;	life.c:143: while (1) {
      000486                       1374 00126$:
                                   1375 ;	life.c:144: c = getchar();
      000486 12r00r05         [24] 1376 	lcall	_getchar
      000489 AE 82            [24] 1377 	mov	r6,dpl
      00048B AF 83            [24] 1378 	mov	r7,dph
      00048D 90r0Cr17         [24] 1379 	mov	dptr,#_c
      000490 EE               [12] 1380 	mov	a,r6
      000491 F0               [24] 1381 	movx	@dptr,a
      000492 EF               [12] 1382 	mov	a,r7
      000493 A3               [24] 1383 	inc	dptr
      000494 F0               [24] 1384 	movx	@dptr,a
                                   1385 ;	life.c:145: if (c == (int)'#') break;
      000495 BE 23 EE         [24] 1386 	cjne	r6,#0x23,00126$
      000498 BF 00 EB         [24] 1387 	cjne	r7,#0x00,00126$
      00049B                       1388 00129$:
                                   1389 ;	life.c:147: print16x(j);
      00049B 90r0Cr15         [24] 1390 	mov	dptr,#_j
      00049E E0               [24] 1391 	movx	a,@dptr
      00049F FE               [12] 1392 	mov	r6,a
      0004A0 A3               [24] 1393 	inc	dptr
      0004A1 E0               [24] 1394 	movx	a,@dptr
                                   1395 ;	life.c:37: putchar(digits[(a >> 12) & 0xf]);
      0004A2 8E 04            [24] 1396 	mov	ar4,r6
      0004A4 FD               [12] 1397 	mov	r5,a
      0004A5 C4               [12] 1398 	swap	a
      0004A6 54 0F            [12] 1399 	anl	a,#0x0f
      0004A8 30 E3 02         [24] 1400 	jnb	acc.3,00387$
      0004AB 44 F0            [12] 1401 	orl	a,#0xf0
      0004AD                       1402 00387$:
      0004AD FE               [12] 1403 	mov	r6,a
      0004AE 33               [12] 1404 	rlc	a
      0004AF 95 E0            [12] 1405 	subb	a,acc
      0004B1 53 06 0F         [24] 1406 	anl	ar6,#0x0f
      0004B4 7F 00            [12] 1407 	mov	r7,#0x00
      0004B6 EE               [12] 1408 	mov	a,r6
      0004B7 24r00            [12] 1409 	add	a,#_digits
      0004B9 F5 82            [12] 1410 	mov	dpl,a
      0004BB EF               [12] 1411 	mov	a,r7
      0004BC 34s00            [12] 1412 	addc	a,#(_digits >> 8)
      0004BE F5 83            [12] 1413 	mov	dph,a
      0004C0 E4               [12] 1414 	clr	a
      0004C1 93               [24] 1415 	movc	a,@a+dptr
      0004C2 FF               [12] 1416 	mov	r7,a
      0004C3 7E 00            [12] 1417 	mov	r6,#0x00
      0004C5 8F 82            [24] 1418 	mov	dpl,r7
      0004C7 8E 83            [24] 1419 	mov	dph,r6
      0004C9 12r00r00         [24] 1420 	lcall	_putchar
                                   1421 ;	life.c:38: putchar(digits[(a >> 8) & 0xf]);
      0004CC 8D 07            [24] 1422 	mov	ar7,r5
      0004CE 53 07 0F         [24] 1423 	anl	ar7,#0x0f
      0004D1 7E 00            [12] 1424 	mov	r6,#0x00
      0004D3 EF               [12] 1425 	mov	a,r7
      0004D4 24r00            [12] 1426 	add	a,#_digits
      0004D6 F5 82            [12] 1427 	mov	dpl,a
      0004D8 EE               [12] 1428 	mov	a,r6
      0004D9 34s00            [12] 1429 	addc	a,#(_digits >> 8)
      0004DB F5 83            [12] 1430 	mov	dph,a
      0004DD E4               [12] 1431 	clr	a
      0004DE 93               [24] 1432 	movc	a,@a+dptr
      0004DF FF               [12] 1433 	mov	r7,a
      0004E0 7E 00            [12] 1434 	mov	r6,#0x00
      0004E2 8F 82            [24] 1435 	mov	dpl,r7
      0004E4 8E 83            [24] 1436 	mov	dph,r6
      0004E6 12r00r00         [24] 1437 	lcall	_putchar
                                   1438 ;	life.c:39: putchar(digits[(a >> 4) & 0xf]);
      0004E9 8C 06            [24] 1439 	mov	ar6,r4
      0004EB ED               [12] 1440 	mov	a,r5
      0004EC C4               [12] 1441 	swap	a
      0004ED CE               [12] 1442 	xch	a,r6
      0004EE C4               [12] 1443 	swap	a
      0004EF 54 0F            [12] 1444 	anl	a,#0x0f
      0004F1 6E               [12] 1445 	xrl	a,r6
      0004F2 CE               [12] 1446 	xch	a,r6
      0004F3 54 0F            [12] 1447 	anl	a,#0x0f
      0004F5 CE               [12] 1448 	xch	a,r6
      0004F6 6E               [12] 1449 	xrl	a,r6
      0004F7 CE               [12] 1450 	xch	a,r6
      0004F8 30 E3 02         [24] 1451 	jnb	acc.3,00388$
      0004FB 44 F0            [12] 1452 	orl	a,#0xf0
      0004FD                       1453 00388$:
      0004FD 53 06 0F         [24] 1454 	anl	ar6,#0x0f
      000500 7F 00            [12] 1455 	mov	r7,#0x00
      000502 EE               [12] 1456 	mov	a,r6
      000503 24r00            [12] 1457 	add	a,#_digits
      000505 F5 82            [12] 1458 	mov	dpl,a
      000507 EF               [12] 1459 	mov	a,r7
      000508 34s00            [12] 1460 	addc	a,#(_digits >> 8)
      00050A F5 83            [12] 1461 	mov	dph,a
      00050C E4               [12] 1462 	clr	a
      00050D 93               [24] 1463 	movc	a,@a+dptr
      00050E FF               [12] 1464 	mov	r7,a
      00050F 7E 00            [12] 1465 	mov	r6,#0x00
      000511 8F 82            [24] 1466 	mov	dpl,r7
      000513 8E 83            [24] 1467 	mov	dph,r6
      000515 12r00r00         [24] 1468 	lcall	_putchar
                                   1469 ;	life.c:40: putchar(digits[a & 0xf]);
      000518 53 04 0F         [24] 1470 	anl	ar4,#0x0f
      00051B 7D 00            [12] 1471 	mov	r5,#0x00
      00051D EC               [12] 1472 	mov	a,r4
      00051E 24r00            [12] 1473 	add	a,#_digits
      000520 F5 82            [12] 1474 	mov	dpl,a
      000522 ED               [12] 1475 	mov	a,r5
      000523 34s00            [12] 1476 	addc	a,#(_digits >> 8)
      000525 F5 83            [12] 1477 	mov	dph,a
      000527 E4               [12] 1478 	clr	a
      000528 93               [24] 1479 	movc	a,@a+dptr
      000529 FF               [12] 1480 	mov	r7,a
      00052A 7E 00            [12] 1481 	mov	r6,#0x00
      00052C 8F 82            [24] 1482 	mov	dpl,r7
      00052E 8E 83            [24] 1483 	mov	dph,r6
      000530 12r00r00         [24] 1484 	lcall	_putchar
                                   1485 ;	life.c:148: printstr(">\r\n");
      000533 7Dr28            [12] 1486 	mov	r5,#___str_5
      000535 7Es00            [12] 1487 	mov	r6,#(___str_5 >> 8)
      000537 7F 80            [12] 1488 	mov	r7,#0x80
                                   1489 ;	life.c:48: return;
      000539                       1490 00165$:
                                   1491 ;	life.c:46: for (; *s; s++) putchar(*s);
      000539 8D 82            [24] 1492 	mov	dpl,r5
      00053B 8E 83            [24] 1493 	mov	dph,r6
      00053D 8F F0            [24] 1494 	mov	b,r7
      00053F 12r00r00         [24] 1495 	lcall	__gptrget
      000542 FC               [12] 1496 	mov	r4,a
      000543 60 10            [24] 1497 	jz	00133$
      000545 7B 00            [12] 1498 	mov	r3,#0x00
      000547 8C 82            [24] 1499 	mov	dpl,r4
      000549 8B 83            [24] 1500 	mov	dph,r3
      00054B 12r00r00         [24] 1501 	lcall	_putchar
      00054E 0D               [12] 1502 	inc	r5
                                   1503 ;	life.c:148: printstr(">\r\n");
      00054F BD 00 E7         [24] 1504 	cjne	r5,#0x00,00165$
      000552 0E               [12] 1505 	inc	r6
      000553 80 E4            [24] 1506 	sjmp	00165$
      000555                       1507 00133$:
                                   1508 ;	life.c:190: show(0);
      000555 75 82 00         [24] 1509 	mov	dpl,#0x00
      000558 12r00r34         [24] 1510 	lcall	_show
                                   1511 ;	life.c:192: printstr("RDY\r\n");
      00055B 7Dr3A            [12] 1512 	mov	r5,#___str_7
      00055D 7Es00            [12] 1513 	mov	r6,#(___str_7 >> 8)
      00055F 7F 80            [12] 1514 	mov	r7,#0x80
                                   1515 ;	life.c:48: return;
      000561                       1516 00168$:
                                   1517 ;	life.c:46: for (; *s; s++) putchar(*s);
      000561 8D 82            [24] 1518 	mov	dpl,r5
      000563 8E 83            [24] 1519 	mov	dph,r6
      000565 8F F0            [24] 1520 	mov	b,r7
      000567 12r00r00         [24] 1521 	lcall	__gptrget
      00056A FC               [12] 1522 	mov	r4,a
      00056B 60 10            [24] 1523 	jz	00136$
      00056D 7B 00            [12] 1524 	mov	r3,#0x00
      00056F 8C 82            [24] 1525 	mov	dpl,r4
      000571 8B 83            [24] 1526 	mov	dph,r3
      000573 12r00r00         [24] 1527 	lcall	_putchar
      000576 0D               [12] 1528 	inc	r5
                                   1529 ;	life.c:192: printstr("RDY\r\n");
      000577 BD 00 E7         [24] 1530 	cjne	r5,#0x00,00168$
      00057A 0E               [12] 1531 	inc	r6
      00057B 80 E4            [24] 1532 	sjmp	00168$
      00057D                       1533 00136$:
                                   1534 ;	life.c:193: (void)getchar();
      00057D 12r00r05         [24] 1535 	lcall	_getchar
                                   1536 ;	life.c:75: for (j = 0; j < 4; j++)
      000580 90r0Cr15         [24] 1537 	mov	dptr,#_j
      000583 E4               [12] 1538 	clr	a
      000584 F0               [24] 1539 	movx	@dptr,a
      000585 A3               [24] 1540 	inc	dptr
      000586 F0               [24] 1541 	movx	@dptr,a
      000587                       1542 00170$:
                                   1543 ;	life.c:76: generation[j] = 0;
      000587 90r0Cr15         [24] 1544 	mov	dptr,#_j
      00058A E0               [24] 1545 	movx	a,@dptr
      00058B FE               [12] 1546 	mov	r6,a
      00058C A3               [24] 1547 	inc	dptr
      00058D E0               [24] 1548 	movx	a,@dptr
      00058E FF               [12] 1549 	mov	r7,a
      00058F EE               [12] 1550 	mov	a,r6
      000590 2E               [12] 1551 	add	a,r6
      000591 FE               [12] 1552 	mov	r6,a
      000592 EF               [12] 1553 	mov	a,r7
      000593 33               [12] 1554 	rlc	a
      000594 FF               [12] 1555 	mov	r7,a
      000595 EE               [12] 1556 	mov	a,r6
      000596 24r0B            [12] 1557 	add	a,#_generation
      000598 F5 82            [12] 1558 	mov	dpl,a
      00059A EF               [12] 1559 	mov	a,r7
      00059B 34s0C            [12] 1560 	addc	a,#(_generation >> 8)
      00059D F5 83            [12] 1561 	mov	dph,a
      00059F E4               [12] 1562 	clr	a
      0005A0 F0               [24] 1563 	movx	@dptr,a
      0005A1 A3               [24] 1564 	inc	dptr
      0005A2 F0               [24] 1565 	movx	@dptr,a
                                   1566 ;	life.c:75: for (j = 0; j < 4; j++)
      0005A3 90r0Cr15         [24] 1567 	mov	dptr,#_j
      0005A6 E0               [24] 1568 	movx	a,@dptr
      0005A7 24 01            [12] 1569 	add	a,#0x01
      0005A9 F0               [24] 1570 	movx	@dptr,a
      0005AA A3               [24] 1571 	inc	dptr
      0005AB E0               [24] 1572 	movx	a,@dptr
      0005AC 34 00            [12] 1573 	addc	a,#0x00
      0005AE F0               [24] 1574 	movx	@dptr,a
      0005AF 90r0Cr15         [24] 1575 	mov	dptr,#_j
      0005B2 E0               [24] 1576 	movx	a,@dptr
      0005B3 FE               [12] 1577 	mov	r6,a
      0005B4 A3               [24] 1578 	inc	dptr
      0005B5 E0               [24] 1579 	movx	a,@dptr
      0005B6 FF               [12] 1580 	mov	r7,a
      0005B7 C3               [12] 1581 	clr	c
      0005B8 EE               [12] 1582 	mov	a,r6
      0005B9 94 04            [12] 1583 	subb	a,#0x04
      0005BB EF               [12] 1584 	mov	a,r7
      0005BC 64 80            [12] 1585 	xrl	a,#0x80
      0005BE 94 80            [12] 1586 	subb	a,#0x80
      0005C0 40 C5            [24] 1587 	jc	00170$
                                   1588 ;	life.c:197: for (i1 = 0; !i0 && !i1; ) {
      0005C2                       1589 00187$:
      0005C2 90r00r00         [24] 1590 	mov	dptr,#_i0
      0005C5 E0               [24] 1591 	movx	a,@dptr
      0005C6 60 03            [24] 1592 	jz	00394$
      0005C8 02r08rDE         [24] 1593 	ljmp	00104$
      0005CB                       1594 00394$:
                                   1595 ;	life.c:198: show(1);
      0005CB 75 82 01         [24] 1596 	mov	dpl,#0x01
      0005CE 12r00r34         [24] 1597 	lcall	_show
                                   1598 ;	life.c:154: fixed = 1;
      0005D1 90r0Cr13         [24] 1599 	mov	dptr,#_fixed
      0005D4 74 01            [12] 1600 	mov	a,#0x01
      0005D6 F0               [24] 1601 	movx	@dptr,a
                                   1602 ;	life.c:155: cycle2 = 1;
      0005D7 90r0Cr14         [24] 1603 	mov	dptr,#_cycle2
      0005DA F0               [24] 1604 	movx	@dptr,a
                                   1605 ;	life.c:157: for (y = 0; y < H; y++) {
      0005DB 90r0Cr04         [24] 1606 	mov	dptr,#_y
      0005DE E4               [12] 1607 	clr	a
      0005DF F0               [24] 1608 	movx	@dptr,a
      0005E0 A3               [24] 1609 	inc	dptr
      0005E1 F0               [24] 1610 	movx	@dptr,a
      0005E2                       1611 00180$:
                                   1612 ;	life.c:158: for (x = 0; x < W; x++) {
      0005E2 90r0Cr02         [24] 1613 	mov	dptr,#_x
      0005E5 E4               [12] 1614 	clr	a
      0005E6 F0               [24] 1615 	movx	@dptr,a
      0005E7 A3               [24] 1616 	inc	dptr
      0005E8 F0               [24] 1617 	movx	@dptr,a
      0005E9                       1618 00178$:
                                   1619 ;	life.c:159: n = -u[A2D(W, y, x)];
      0005E9 90r0Cr04         [24] 1620 	mov	dptr,#_y
      0005EC E0               [24] 1621 	movx	a,@dptr
      0005ED FE               [12] 1622 	mov	r6,a
      0005EE A3               [24] 1623 	inc	dptr
      0005EF E0               [24] 1624 	movx	a,@dptr
      0005F0 FF               [12] 1625 	mov	r7,a
      0005F1 8E 04            [24] 1626 	mov	ar4,r6
      0005F3 C4               [12] 1627 	swap	a
      0005F4 23               [12] 1628 	rl	a
      0005F5 54 E0            [12] 1629 	anl	a,#0xe0
      0005F7 CC               [12] 1630 	xch	a,r4
      0005F8 C4               [12] 1631 	swap	a
      0005F9 23               [12] 1632 	rl	a
      0005FA CC               [12] 1633 	xch	a,r4
      0005FB 6C               [12] 1634 	xrl	a,r4
      0005FC CC               [12] 1635 	xch	a,r4
      0005FD 54 E0            [12] 1636 	anl	a,#0xe0
      0005FF CC               [12] 1637 	xch	a,r4
      000600 6C               [12] 1638 	xrl	a,r4
      000601 FD               [12] 1639 	mov	r5,a
      000602 90r0Cr02         [24] 1640 	mov	dptr,#_x
      000605 E0               [24] 1641 	movx	a,@dptr
      000606 FA               [12] 1642 	mov	r2,a
      000607 A3               [24] 1643 	inc	dptr
      000608 E0               [24] 1644 	movx	a,@dptr
      000609 FB               [12] 1645 	mov	r3,a
      00060A EA               [12] 1646 	mov	a,r2
      00060B 2C               [12] 1647 	add	a,r4
      00060C FC               [12] 1648 	mov	r4,a
      00060D EB               [12] 1649 	mov	a,r3
      00060E 3D               [12] 1650 	addc	a,r5
      00060F FD               [12] 1651 	mov	r5,a
      000610 EC               [12] 1652 	mov	a,r4
      000611 24r02            [12] 1653 	add	a,#_u
      000613 F5 82            [12] 1654 	mov	dpl,a
      000615 ED               [12] 1655 	mov	a,r5
      000616 34s04            [12] 1656 	addc	a,#(_u >> 8)
      000618 F5 83            [12] 1657 	mov	dph,a
      00061A E0               [24] 1658 	movx	a,@dptr
      00061B FD               [12] 1659 	mov	r5,a
      00061C 90r0Cr0A         [24] 1660 	mov	dptr,#_n
      00061F C3               [12] 1661 	clr	c
      000620 E4               [12] 1662 	clr	a
      000621 9D               [12] 1663 	subb	a,r5
      000622 F0               [24] 1664 	movx	@dptr,a
                                   1665 ;	life.c:160: for (y1 = y - 1; y1 <= y + 1; y1++)
      000623 1E               [12] 1666 	dec	r6
      000624 BE FF 01         [24] 1667 	cjne	r6,#0xff,00395$
      000627 1F               [12] 1668 	dec	r7
      000628                       1669 00395$:
      000628 90r0Cr08         [24] 1670 	mov	dptr,#_y1
      00062B EE               [12] 1671 	mov	a,r6
      00062C F0               [24] 1672 	movx	@dptr,a
      00062D EF               [12] 1673 	mov	a,r7
      00062E A3               [24] 1674 	inc	dptr
      00062F F0               [24] 1675 	movx	@dptr,a
      000630                       1676 00176$:
      000630 90r0Cr04         [24] 1677 	mov	dptr,#_y
      000633 E0               [24] 1678 	movx	a,@dptr
      000634 FE               [12] 1679 	mov	r6,a
      000635 A3               [24] 1680 	inc	dptr
      000636 E0               [24] 1681 	movx	a,@dptr
      000637 FF               [12] 1682 	mov	r7,a
      000638 74 01            [12] 1683 	mov	a,#0x01
      00063A 2E               [12] 1684 	add	a,r6
      00063B FC               [12] 1685 	mov	r4,a
      00063C E4               [12] 1686 	clr	a
      00063D 3F               [12] 1687 	addc	a,r7
      00063E FD               [12] 1688 	mov	r5,a
      00063F 90r0Cr08         [24] 1689 	mov	dptr,#_y1
      000642 E0               [24] 1690 	movx	a,@dptr
      000643 FA               [12] 1691 	mov	r2,a
      000644 A3               [24] 1692 	inc	dptr
      000645 E0               [24] 1693 	movx	a,@dptr
      000646 FB               [12] 1694 	mov	r3,a
      000647 C3               [12] 1695 	clr	c
      000648 EC               [12] 1696 	mov	a,r4
      000649 9A               [12] 1697 	subb	a,r2
      00064A ED               [12] 1698 	mov	a,r5
      00064B 64 80            [12] 1699 	xrl	a,#0x80
      00064D 8B F0            [24] 1700 	mov	b,r3
      00064F 63 F0 80         [24] 1701 	xrl	b,#0x80
      000652 95 F0            [12] 1702 	subb	a,b
      000654 50 03            [24] 1703 	jnc	00396$
      000656 02r07r36         [24] 1704 	ljmp	00140$
      000659                       1705 00396$:
                                   1706 ;	life.c:161: for (x1 = x - 1; x1 <= x + 1; x1++)
      000659 90r0Cr02         [24] 1707 	mov	dptr,#_x
      00065C E0               [24] 1708 	movx	a,@dptr
      00065D FC               [12] 1709 	mov	r4,a
      00065E A3               [24] 1710 	inc	dptr
      00065F E0               [24] 1711 	movx	a,@dptr
      000660 FD               [12] 1712 	mov	r5,a
      000661 1C               [12] 1713 	dec	r4
      000662 BC FF 01         [24] 1714 	cjne	r4,#0xff,00397$
      000665 1D               [12] 1715 	dec	r5
      000666                       1716 00397$:
      000666 90r0Cr06         [24] 1717 	mov	dptr,#_x1
      000669 EC               [12] 1718 	mov	a,r4
      00066A F0               [24] 1719 	movx	@dptr,a
      00066B ED               [12] 1720 	mov	a,r5
      00066C A3               [24] 1721 	inc	dptr
      00066D F0               [24] 1722 	movx	@dptr,a
      00066E                       1723 00173$:
      00066E 90r0Cr02         [24] 1724 	mov	dptr,#_x
      000671 E0               [24] 1725 	movx	a,@dptr
      000672 FC               [12] 1726 	mov	r4,a
      000673 A3               [24] 1727 	inc	dptr
      000674 E0               [24] 1728 	movx	a,@dptr
      000675 FD               [12] 1729 	mov	r5,a
      000676 0C               [12] 1730 	inc	r4
      000677 BC 00 01         [24] 1731 	cjne	r4,#0x00,00398$
      00067A 0D               [12] 1732 	inc	r5
      00067B                       1733 00398$:
      00067B 90r0Cr06         [24] 1734 	mov	dptr,#_x1
      00067E E0               [24] 1735 	movx	a,@dptr
      00067F FA               [12] 1736 	mov	r2,a
      000680 A3               [24] 1737 	inc	dptr
      000681 E0               [24] 1738 	movx	a,@dptr
      000682 FB               [12] 1739 	mov	r3,a
      000683 C3               [12] 1740 	clr	c
      000684 EC               [12] 1741 	mov	a,r4
      000685 9A               [12] 1742 	subb	a,r2
      000686 ED               [12] 1743 	mov	a,r5
      000687 64 80            [12] 1744 	xrl	a,#0x80
      000689 8B F0            [24] 1745 	mov	b,r3
      00068B 63 F0 80         [24] 1746 	xrl	b,#0x80
      00068E 95 F0            [12] 1747 	subb	a,b
      000690 50 03            [24] 1748 	jnc	00399$
      000692 02r07r27         [24] 1749 	ljmp	00177$
      000695                       1750 00399$:
                                   1751 ;	life.c:162: n += u[A2D(W, (y1 + H) % H, (x1 + W) % W)];
      000695 90r0Cr08         [24] 1752 	mov	dptr,#_y1
      000698 E0               [24] 1753 	movx	a,@dptr
      000699 FC               [12] 1754 	mov	r4,a
      00069A A3               [24] 1755 	inc	dptr
      00069B E0               [24] 1756 	movx	a,@dptr
      00069C FD               [12] 1757 	mov	r5,a
      00069D 74 20            [12] 1758 	mov	a,#0x20
      00069F 2C               [12] 1759 	add	a,r4
      0006A0 FC               [12] 1760 	mov	r4,a
      0006A1 E4               [12] 1761 	clr	a
      0006A2 3D               [12] 1762 	addc	a,r5
      0006A3 FD               [12] 1763 	mov	r5,a
      0006A4 C0 03            [24] 1764 	push	ar3
      0006A6 C0 02            [24] 1765 	push	ar2
      0006A8 74 20            [12] 1766 	mov	a,#0x20
      0006AA C0 E0            [24] 1767 	push	acc
      0006AC E4               [12] 1768 	clr	a
      0006AD C0 E0            [24] 1769 	push	acc
      0006AF 8C 82            [24] 1770 	mov	dpl,r4
      0006B1 8D 83            [24] 1771 	mov	dph,r5
      0006B3 12r00r00         [24] 1772 	lcall	__modsint
      0006B6 AC 82            [24] 1773 	mov	r4,dpl
      0006B8 AD 83            [24] 1774 	mov	r5,dph
      0006BA 15 81            [12] 1775 	dec	sp
      0006BC 15 81            [12] 1776 	dec	sp
      0006BE D0 02            [24] 1777 	pop	ar2
      0006C0 D0 03            [24] 1778 	pop	ar3
      0006C2 8C 07            [24] 1779 	mov	ar7,r4
      0006C4 ED               [12] 1780 	mov	a,r5
      0006C5 C4               [12] 1781 	swap	a
      0006C6 23               [12] 1782 	rl	a
      0006C7 54 E0            [12] 1783 	anl	a,#0xe0
      0006C9 CF               [12] 1784 	xch	a,r7
      0006CA C4               [12] 1785 	swap	a
      0006CB 23               [12] 1786 	rl	a
      0006CC CF               [12] 1787 	xch	a,r7
      0006CD 6F               [12] 1788 	xrl	a,r7
      0006CE CF               [12] 1789 	xch	a,r7
      0006CF 54 E0            [12] 1790 	anl	a,#0xe0
      0006D1 CF               [12] 1791 	xch	a,r7
      0006D2 6F               [12] 1792 	xrl	a,r7
      0006D3 FE               [12] 1793 	mov	r6,a
      0006D4 74 20            [12] 1794 	mov	a,#0x20
      0006D6 2A               [12] 1795 	add	a,r2
      0006D7 FC               [12] 1796 	mov	r4,a
      0006D8 E4               [12] 1797 	clr	a
      0006D9 3B               [12] 1798 	addc	a,r3
      0006DA FD               [12] 1799 	mov	r5,a
      0006DB C0 07            [24] 1800 	push	ar7
      0006DD C0 06            [24] 1801 	push	ar6
      0006DF C0 03            [24] 1802 	push	ar3
      0006E1 C0 02            [24] 1803 	push	ar2
      0006E3 74 20            [12] 1804 	mov	a,#0x20
      0006E5 C0 E0            [24] 1805 	push	acc
      0006E7 E4               [12] 1806 	clr	a
      0006E8 C0 E0            [24] 1807 	push	acc
      0006EA 8C 82            [24] 1808 	mov	dpl,r4
      0006EC 8D 83            [24] 1809 	mov	dph,r5
      0006EE 12r00r00         [24] 1810 	lcall	__modsint
      0006F1 AC 82            [24] 1811 	mov	r4,dpl
      0006F3 AD 83            [24] 1812 	mov	r5,dph
      0006F5 15 81            [12] 1813 	dec	sp
      0006F7 15 81            [12] 1814 	dec	sp
      0006F9 D0 02            [24] 1815 	pop	ar2
      0006FB D0 03            [24] 1816 	pop	ar3
      0006FD D0 06            [24] 1817 	pop	ar6
      0006FF D0 07            [24] 1818 	pop	ar7
      000701 EC               [12] 1819 	mov	a,r4
      000702 2F               [12] 1820 	add	a,r7
      000703 FC               [12] 1821 	mov	r4,a
      000704 ED               [12] 1822 	mov	a,r5
      000705 3E               [12] 1823 	addc	a,r6
      000706 FD               [12] 1824 	mov	r5,a
      000707 EC               [12] 1825 	mov	a,r4
      000708 24r02            [12] 1826 	add	a,#_u
      00070A F5 82            [12] 1827 	mov	dpl,a
      00070C ED               [12] 1828 	mov	a,r5
      00070D 34s04            [12] 1829 	addc	a,#(_u >> 8)
      00070F F5 83            [12] 1830 	mov	dph,a
      000711 E0               [24] 1831 	movx	a,@dptr
      000712 FD               [12] 1832 	mov	r5,a
      000713 90r0Cr0A         [24] 1833 	mov	dptr,#_n
      000716 E0               [24] 1834 	movx	a,@dptr
      000717 2D               [12] 1835 	add	a,r5
      000718 F0               [24] 1836 	movx	@dptr,a
                                   1837 ;	life.c:161: for (x1 = x - 1; x1 <= x + 1; x1++)
      000719 90r0Cr06         [24] 1838 	mov	dptr,#_x1
      00071C 74 01            [12] 1839 	mov	a,#0x01
      00071E 2A               [12] 1840 	add	a,r2
      00071F F0               [24] 1841 	movx	@dptr,a
      000720 E4               [12] 1842 	clr	a
      000721 3B               [12] 1843 	addc	a,r3
      000722 A3               [24] 1844 	inc	dptr
      000723 F0               [24] 1845 	movx	@dptr,a
      000724 02r06r6E         [24] 1846 	ljmp	00173$
      000727                       1847 00177$:
                                   1848 ;	life.c:160: for (y1 = y - 1; y1 <= y + 1; y1++)
      000727 90r0Cr08         [24] 1849 	mov	dptr,#_y1
      00072A E0               [24] 1850 	movx	a,@dptr
      00072B 24 01            [12] 1851 	add	a,#0x01
      00072D F0               [24] 1852 	movx	@dptr,a
      00072E A3               [24] 1853 	inc	dptr
      00072F E0               [24] 1854 	movx	a,@dptr
      000730 34 00            [12] 1855 	addc	a,#0x00
      000732 F0               [24] 1856 	movx	@dptr,a
      000733 02r06r30         [24] 1857 	ljmp	00176$
      000736                       1858 00140$:
                                   1859 ;	life.c:164: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000736 EF               [12] 1860 	mov	a,r7
      000737 C4               [12] 1861 	swap	a
      000738 23               [12] 1862 	rl	a
      000739 54 E0            [12] 1863 	anl	a,#0xe0
      00073B CE               [12] 1864 	xch	a,r6
      00073C C4               [12] 1865 	swap	a
      00073D 23               [12] 1866 	rl	a
      00073E CE               [12] 1867 	xch	a,r6
      00073F 6E               [12] 1868 	xrl	a,r6
      000740 CE               [12] 1869 	xch	a,r6
      000741 54 E0            [12] 1870 	anl	a,#0xe0
      000743 CE               [12] 1871 	xch	a,r6
      000744 6E               [12] 1872 	xrl	a,r6
      000745 FF               [12] 1873 	mov	r7,a
      000746 90r0Cr02         [24] 1874 	mov	dptr,#_x
      000749 E0               [24] 1875 	movx	a,@dptr
      00074A FC               [12] 1876 	mov	r4,a
      00074B A3               [24] 1877 	inc	dptr
      00074C E0               [24] 1878 	movx	a,@dptr
      00074D FD               [12] 1879 	mov	r5,a
      00074E EC               [12] 1880 	mov	a,r4
      00074F 2E               [12] 1881 	add	a,r6
      000750 FA               [12] 1882 	mov	r2,a
      000751 ED               [12] 1883 	mov	a,r5
      000752 3F               [12] 1884 	addc	a,r7
      000753 FB               [12] 1885 	mov	r3,a
      000754 EA               [12] 1886 	mov	a,r2
      000755 24r02            [12] 1887 	add	a,#_nu
      000757 FA               [12] 1888 	mov	r2,a
      000758 EB               [12] 1889 	mov	a,r3
      000759 34s08            [12] 1890 	addc	a,#(_nu >> 8)
      00075B FB               [12] 1891 	mov	r3,a
      00075C 90r0Cr0A         [24] 1892 	mov	dptr,#_n
      00075F A8*00            [24] 1893 	mov	r0,_bp
      000761 08               [12] 1894 	inc	r0
      000762 E0               [24] 1895 	movx	a,@dptr
      000763 F6               [12] 1896 	mov	@r0,a
      000764 A8*00            [24] 1897 	mov	r0,_bp
      000766 08               [12] 1898 	inc	r0
      000767 B6 03 02         [24] 1899 	cjne	@r0,#0x03,00400$
      00076A 80 1F            [24] 1900 	sjmp	00200$
      00076C                       1901 00400$:
      00076C A8*00            [24] 1902 	mov	r0,_bp
      00076E 08               [12] 1903 	inc	r0
      00076F B6 02 15         [24] 1904 	cjne	@r0,#0x02,00199$
      000772 EC               [12] 1905 	mov	a,r4
      000773 2E               [12] 1906 	add	a,r6
      000774 FE               [12] 1907 	mov	r6,a
      000775 ED               [12] 1908 	mov	a,r5
      000776 3F               [12] 1909 	addc	a,r7
      000777 FF               [12] 1910 	mov	r7,a
      000778 EE               [12] 1911 	mov	a,r6
      000779 24r02            [12] 1912 	add	a,#_u
      00077B FE               [12] 1913 	mov	r6,a
      00077C EF               [12] 1914 	mov	a,r7
      00077D 34s04            [12] 1915 	addc	a,#(_u >> 8)
      00077F FF               [12] 1916 	mov	r7,a
      000780 8E 82            [24] 1917 	mov	dpl,r6
      000782 8F 83            [24] 1918 	mov	dph,r7
      000784 E0               [24] 1919 	movx	a,@dptr
      000785 70 04            [24] 1920 	jnz	00200$
      000787                       1921 00199$:
                                   1922 ;	assignBit
      000787 C2*00            [12] 1923 	clr	b0
      000789 80 02            [24] 1924 	sjmp	00201$
      00078B                       1925 00200$:
                                   1926 ;	assignBit
      00078B D2*00            [12] 1927 	setb	b0
      00078D                       1928 00201$:
      00078D A2*00            [12] 1929 	mov	c,b0
      00078F E4               [12] 1930 	clr	a
      000790 33               [12] 1931 	rlc	a
      000791 8A 82            [24] 1932 	mov	dpl,r2
      000793 8B 83            [24] 1933 	mov	dph,r3
      000795 F0               [24] 1934 	movx	@dptr,a
                                   1935 ;	life.c:166: if (pu[A2D(W, y, x)] != nu[A2D(W, y, x)]) cycle2 = 0;
      000796 90r0Cr04         [24] 1936 	mov	dptr,#_y
      000799 E0               [24] 1937 	movx	a,@dptr
      00079A FE               [12] 1938 	mov	r6,a
      00079B A3               [24] 1939 	inc	dptr
      00079C E0               [24] 1940 	movx	a,@dptr
      00079D C4               [12] 1941 	swap	a
      00079E 23               [12] 1942 	rl	a
      00079F 54 E0            [12] 1943 	anl	a,#0xe0
      0007A1 CE               [12] 1944 	xch	a,r6
      0007A2 C4               [12] 1945 	swap	a
      0007A3 23               [12] 1946 	rl	a
      0007A4 CE               [12] 1947 	xch	a,r6
      0007A5 6E               [12] 1948 	xrl	a,r6
      0007A6 CE               [12] 1949 	xch	a,r6
      0007A7 54 E0            [12] 1950 	anl	a,#0xe0
      0007A9 CE               [12] 1951 	xch	a,r6
      0007AA 6E               [12] 1952 	xrl	a,r6
      0007AB FF               [12] 1953 	mov	r7,a
      0007AC 90r0Cr02         [24] 1954 	mov	dptr,#_x
      0007AF E0               [24] 1955 	movx	a,@dptr
      0007B0 FC               [12] 1956 	mov	r4,a
      0007B1 A3               [24] 1957 	inc	dptr
      0007B2 E0               [24] 1958 	movx	a,@dptr
      0007B3 FD               [12] 1959 	mov	r5,a
      0007B4 EC               [12] 1960 	mov	a,r4
      0007B5 2E               [12] 1961 	add	a,r6
      0007B6 FE               [12] 1962 	mov	r6,a
      0007B7 ED               [12] 1963 	mov	a,r5
      0007B8 3F               [12] 1964 	addc	a,r7
      0007B9 FF               [12] 1965 	mov	r7,a
      0007BA EE               [12] 1966 	mov	a,r6
      0007BB 24r02            [12] 1967 	add	a,#_pu
      0007BD F5 82            [12] 1968 	mov	dpl,a
      0007BF EF               [12] 1969 	mov	a,r7
      0007C0 34s00            [12] 1970 	addc	a,#(_pu >> 8)
      0007C2 F5 83            [12] 1971 	mov	dph,a
      0007C4 E0               [24] 1972 	movx	a,@dptr
      0007C5 FD               [12] 1973 	mov	r5,a
      0007C6 EE               [12] 1974 	mov	a,r6
      0007C7 24r02            [12] 1975 	add	a,#_nu
      0007C9 F5 82            [12] 1976 	mov	dpl,a
      0007CB EF               [12] 1977 	mov	a,r7
      0007CC 34s08            [12] 1978 	addc	a,#(_nu >> 8)
      0007CE F5 83            [12] 1979 	mov	dph,a
      0007D0 E0               [24] 1980 	movx	a,@dptr
      0007D1 FF               [12] 1981 	mov	r7,a
      0007D2 ED               [12] 1982 	mov	a,r5
      0007D3 B5 07 02         [24] 1983 	cjne	a,ar7,00404$
      0007D6 80 05            [24] 1984 	sjmp	00142$
      0007D8                       1985 00404$:
      0007D8 90r0Cr14         [24] 1986 	mov	dptr,#_cycle2
      0007DB E4               [12] 1987 	clr	a
      0007DC F0               [24] 1988 	movx	@dptr,a
      0007DD                       1989 00142$:
                                   1990 ;	life.c:167: if (u[A2D(W, y, x)] != nu[A2D(W, y, x)]) fixed = 0;
      0007DD 90r0Cr04         [24] 1991 	mov	dptr,#_y
      0007E0 E0               [24] 1992 	movx	a,@dptr
      0007E1 FE               [12] 1993 	mov	r6,a
      0007E2 A3               [24] 1994 	inc	dptr
      0007E3 E0               [24] 1995 	movx	a,@dptr
      0007E4 C4               [12] 1996 	swap	a
      0007E5 23               [12] 1997 	rl	a
      0007E6 54 E0            [12] 1998 	anl	a,#0xe0
      0007E8 CE               [12] 1999 	xch	a,r6
      0007E9 C4               [12] 2000 	swap	a
      0007EA 23               [12] 2001 	rl	a
      0007EB CE               [12] 2002 	xch	a,r6
      0007EC 6E               [12] 2003 	xrl	a,r6
      0007ED CE               [12] 2004 	xch	a,r6
      0007EE 54 E0            [12] 2005 	anl	a,#0xe0
      0007F0 CE               [12] 2006 	xch	a,r6
      0007F1 6E               [12] 2007 	xrl	a,r6
      0007F2 FF               [12] 2008 	mov	r7,a
      0007F3 90r0Cr02         [24] 2009 	mov	dptr,#_x
      0007F6 E0               [24] 2010 	movx	a,@dptr
      0007F7 FC               [12] 2011 	mov	r4,a
      0007F8 A3               [24] 2012 	inc	dptr
      0007F9 E0               [24] 2013 	movx	a,@dptr
      0007FA FD               [12] 2014 	mov	r5,a
      0007FB EC               [12] 2015 	mov	a,r4
      0007FC 2E               [12] 2016 	add	a,r6
      0007FD FE               [12] 2017 	mov	r6,a
      0007FE ED               [12] 2018 	mov	a,r5
      0007FF 3F               [12] 2019 	addc	a,r7
      000800 FF               [12] 2020 	mov	r7,a
      000801 EE               [12] 2021 	mov	a,r6
      000802 24r02            [12] 2022 	add	a,#_u
      000804 F5 82            [12] 2023 	mov	dpl,a
      000806 EF               [12] 2024 	mov	a,r7
      000807 34s04            [12] 2025 	addc	a,#(_u >> 8)
      000809 F5 83            [12] 2026 	mov	dph,a
      00080B E0               [24] 2027 	movx	a,@dptr
      00080C FD               [12] 2028 	mov	r5,a
      00080D EE               [12] 2029 	mov	a,r6
      00080E 24r02            [12] 2030 	add	a,#_nu
      000810 F5 82            [12] 2031 	mov	dpl,a
      000812 EF               [12] 2032 	mov	a,r7
      000813 34s08            [12] 2033 	addc	a,#(_nu >> 8)
      000815 F5 83            [12] 2034 	mov	dph,a
      000817 E0               [24] 2035 	movx	a,@dptr
      000818 FF               [12] 2036 	mov	r7,a
      000819 ED               [12] 2037 	mov	a,r5
      00081A B5 07 02         [24] 2038 	cjne	a,ar7,00405$
      00081D 80 05            [24] 2039 	sjmp	00179$
      00081F                       2040 00405$:
      00081F 90r0Cr13         [24] 2041 	mov	dptr,#_fixed
      000822 E4               [12] 2042 	clr	a
      000823 F0               [24] 2043 	movx	@dptr,a
      000824                       2044 00179$:
                                   2045 ;	life.c:158: for (x = 0; x < W; x++) {
      000824 90r0Cr02         [24] 2046 	mov	dptr,#_x
      000827 E0               [24] 2047 	movx	a,@dptr
      000828 24 01            [12] 2048 	add	a,#0x01
      00082A F0               [24] 2049 	movx	@dptr,a
      00082B A3               [24] 2050 	inc	dptr
      00082C E0               [24] 2051 	movx	a,@dptr
      00082D 34 00            [12] 2052 	addc	a,#0x00
      00082F F0               [24] 2053 	movx	@dptr,a
      000830 90r0Cr02         [24] 2054 	mov	dptr,#_x
      000833 E0               [24] 2055 	movx	a,@dptr
      000834 FE               [12] 2056 	mov	r6,a
      000835 A3               [24] 2057 	inc	dptr
      000836 E0               [24] 2058 	movx	a,@dptr
      000837 FF               [12] 2059 	mov	r7,a
      000838 C3               [12] 2060 	clr	c
      000839 EE               [12] 2061 	mov	a,r6
      00083A 94 20            [12] 2062 	subb	a,#0x20
      00083C EF               [12] 2063 	mov	a,r7
      00083D 64 80            [12] 2064 	xrl	a,#0x80
      00083F 94 80            [12] 2065 	subb	a,#0x80
      000841 50 03            [24] 2066 	jnc	00406$
      000843 02r05rE9         [24] 2067 	ljmp	00178$
      000846                       2068 00406$:
                                   2069 ;	life.c:157: for (y = 0; y < H; y++) {
      000846 90r0Cr04         [24] 2070 	mov	dptr,#_y
      000849 E0               [24] 2071 	movx	a,@dptr
      00084A 24 01            [12] 2072 	add	a,#0x01
      00084C F0               [24] 2073 	movx	@dptr,a
      00084D A3               [24] 2074 	inc	dptr
      00084E E0               [24] 2075 	movx	a,@dptr
      00084F 34 00            [12] 2076 	addc	a,#0x00
      000851 F0               [24] 2077 	movx	@dptr,a
      000852 90r0Cr04         [24] 2078 	mov	dptr,#_y
      000855 E0               [24] 2079 	movx	a,@dptr
      000856 FE               [12] 2080 	mov	r6,a
      000857 A3               [24] 2081 	inc	dptr
      000858 E0               [24] 2082 	movx	a,@dptr
      000859 FF               [12] 2083 	mov	r7,a
      00085A C3               [12] 2084 	clr	c
      00085B EE               [12] 2085 	mov	a,r6
      00085C 94 20            [12] 2086 	subb	a,#0x20
      00085E EF               [12] 2087 	mov	a,r7
      00085F 64 80            [12] 2088 	xrl	a,#0x80
      000861 94 80            [12] 2089 	subb	a,#0x80
      000863 50 03            [24] 2090 	jnc	00407$
      000865 02r05rE2         [24] 2091 	ljmp	00180$
      000868                       2092 00407$:
                                   2093 ;	life.c:171: memcpy(pu, u, sizeof (u));
      000868 E4               [12] 2094 	clr	a
      000869 C0 E0            [24] 2095 	push	acc
      00086B 74 04            [12] 2096 	mov	a,#0x04
      00086D C0 E0            [24] 2097 	push	acc
      00086F 74r02            [12] 2098 	mov	a,#_u
      000871 C0 E0            [24] 2099 	push	acc
      000873 74s04            [12] 2100 	mov	a,#(_u >> 8)
      000875 C0 E0            [24] 2101 	push	acc
      000877 E4               [12] 2102 	clr	a
      000878 C0 E0            [24] 2103 	push	acc
      00087A 90r00r02         [24] 2104 	mov	dptr,#_pu
      00087D 75 F0 00         [24] 2105 	mov	b,#0x00
      000880 12r00r00         [24] 2106 	lcall	___memcpy
      000883 E5 81            [12] 2107 	mov	a,sp
      000885 24 FB            [12] 2108 	add	a,#0xfb
      000887 F5 81            [12] 2109 	mov	sp,a
                                   2110 ;	life.c:172: memcpy(u, nu, sizeof (nu));
      000889 E4               [12] 2111 	clr	a
      00088A C0 E0            [24] 2112 	push	acc
      00088C 74 04            [12] 2113 	mov	a,#0x04
      00088E C0 E0            [24] 2114 	push	acc
      000890 74r02            [12] 2115 	mov	a,#_nu
      000892 C0 E0            [24] 2116 	push	acc
      000894 74s08            [12] 2117 	mov	a,#(_nu >> 8)
      000896 C0 E0            [24] 2118 	push	acc
      000898 E4               [12] 2119 	clr	a
      000899 C0 E0            [24] 2120 	push	acc
      00089B 90r04r02         [24] 2121 	mov	dptr,#_u
      00089E 75 F0 00         [24] 2122 	mov	b,#0x00
      0008A1 12r00r00         [24] 2123 	lcall	___memcpy
      0008A4 E5 81            [12] 2124 	mov	a,sp
      0008A6 24 FB            [12] 2125 	add	a,#0xfb
      0008A8 F5 81            [12] 2126 	mov	sp,a
                                   2127 ;	life.c:200: if (fixed || cycle2) {
      0008AA 90r0Cr13         [24] 2128 	mov	dptr,#_fixed
      0008AD E0               [24] 2129 	movx	a,@dptr
      0008AE 70 09            [24] 2130 	jnz	00101$
      0008B0 90r0Cr14         [24] 2131 	mov	dptr,#_cycle2
      0008B3 E0               [24] 2132 	movx	a,@dptr
      0008B4 70 03            [24] 2133 	jnz	00409$
      0008B6 02r05rC2         [24] 2134 	ljmp	00187$
      0008B9                       2135 00409$:
      0008B9                       2136 00101$:
                                   2137 ;	life.c:201: printstr("DONE\r\n");
      0008B9 7Dr40            [12] 2138 	mov	r5,#___str_8
      0008BB 7Es00            [12] 2139 	mov	r6,#(___str_8 >> 8)
      0008BD 7F 80            [12] 2140 	mov	r7,#0x80
                                   2141 ;	life.c:48: return;
      0008BF                       2142 00183$:
                                   2143 ;	life.c:46: for (; *s; s++) putchar(*s);
      0008BF 8D 82            [24] 2144 	mov	dpl,r5
      0008C1 8E 83            [24] 2145 	mov	dph,r6
      0008C3 8F F0            [24] 2146 	mov	b,r7
      0008C5 12r00r00         [24] 2147 	lcall	__gptrget
      0008C8 FC               [12] 2148 	mov	r4,a
      0008C9 60 10            [24] 2149 	jz	00149$
      0008CB 7B 00            [12] 2150 	mov	r3,#0x00
      0008CD 8C 82            [24] 2151 	mov	dpl,r4
      0008CF 8B 83            [24] 2152 	mov	dph,r3
      0008D1 12r00r00         [24] 2153 	lcall	_putchar
      0008D4 0D               [12] 2154 	inc	r5
                                   2155 ;	life.c:201: printstr("DONE\r\n");
      0008D5 BD 00 E7         [24] 2156 	cjne	r5,#0x00,00183$
      0008D8 0E               [12] 2157 	inc	r6
      0008D9 80 E4            [24] 2158 	sjmp	00183$
      0008DB                       2159 00149$:
                                   2160 ;	life.c:202: (void)getchar();
      0008DB 12r00r05         [24] 2161 	lcall	_getchar
                                   2162 ;	life.c:203: break;
      0008DE                       2163 00104$:
                                   2164 ;	life.c:207: if (i1) {
      0008DE 90r00r01         [24] 2165 	mov	dptr,#_i1
      0008E1 E0               [24] 2166 	movx	a,@dptr
      0008E2 60 25            [24] 2167 	jz	00193$
                                   2168 ;	life.c:208: printstr("BREAK\r\n");
      0008E4 7Dr47            [12] 2169 	mov	r5,#___str_9
      0008E6 7Es00            [12] 2170 	mov	r6,#(___str_9 >> 8)
      0008E8 7F 80            [12] 2171 	mov	r7,#0x80
                                   2172 ;	life.c:48: return;
      0008EA                       2173 00190$:
                                   2174 ;	life.c:46: for (; *s; s++) putchar(*s);
      0008EA 8D 82            [24] 2175 	mov	dpl,r5
      0008EC 8E 83            [24] 2176 	mov	dph,r6
      0008EE 8F F0            [24] 2177 	mov	b,r7
      0008F0 12r00r00         [24] 2178 	lcall	__gptrget
      0008F3 FC               [12] 2179 	mov	r4,a
      0008F4 60 10            [24] 2180 	jz	00151$
      0008F6 7B 00            [12] 2181 	mov	r3,#0x00
      0008F8 8C 82            [24] 2182 	mov	dpl,r4
      0008FA 8B 83            [24] 2183 	mov	dph,r3
      0008FC 12r00r00         [24] 2184 	lcall	_putchar
      0008FF 0D               [12] 2185 	inc	r5
                                   2186 ;	life.c:208: printstr("BREAK\r\n");
      000900 BD 00 E7         [24] 2187 	cjne	r5,#0x00,00190$
      000903 0E               [12] 2188 	inc	r6
      000904 80 E4            [24] 2189 	sjmp	00190$
      000906                       2190 00151$:
                                   2191 ;	life.c:209: (void)getchar();
      000906 12r00r05         [24] 2192 	lcall	_getchar
      000909                       2193 00193$:
                                   2194 ;	life.c:184: for (i0 = 0; !i0; ) {
      000909 90r00r00         [24] 2195 	mov	dptr,#_i0
      00090C E0               [24] 2196 	movx	a,@dptr
      00090D 70 03            [24] 2197 	jnz	00415$
      00090F 02r03r04         [24] 2198 	ljmp	00192$
      000912                       2199 00415$:
                                   2200 ;	life.c:213: EA = 0;
                                   2201 ;	assignBit
      000912 C2 AF            [12] 2202 	clr	_EA
                                   2203 ;	life.c:215: printstr("TERM\r\n");
      000914 7Dr4F            [12] 2204 	mov	r5,#___str_10
      000916 7Es00            [12] 2205 	mov	r6,#(___str_10 >> 8)
      000918 7F 80            [12] 2206 	mov	r7,#0x80
                                   2207 ;	life.c:48: return;
      00091A                       2208 00195$:
                                   2209 ;	life.c:46: for (; *s; s++) putchar(*s);
      00091A 8D 82            [24] 2210 	mov	dpl,r5
      00091C 8E 83            [24] 2211 	mov	dph,r6
      00091E 8F F0            [24] 2212 	mov	b,r7
      000920 12r00r00         [24] 2213 	lcall	__gptrget
      000923 FC               [12] 2214 	mov	r4,a
      000924 60 10            [24] 2215 	jz	00153$
      000926 7B 00            [12] 2216 	mov	r3,#0x00
      000928 8C 82            [24] 2217 	mov	dpl,r4
      00092A 8B 83            [24] 2218 	mov	dph,r3
      00092C 12r00r00         [24] 2219 	lcall	_putchar
      00092F 0D               [12] 2220 	inc	r5
                                   2221 ;	life.c:215: printstr("TERM\r\n");
      000930 BD 00 E7         [24] 2222 	cjne	r5,#0x00,00195$
      000933 0E               [12] 2223 	inc	r6
      000934 80 E4            [24] 2224 	sjmp	00195$
      000936                       2225 00153$:
                                   2226 ;	life.c:216: (void)getchar();
      000936 12r00r05         [24] 2227 	lcall	_getchar
                                   2228 ;	life.c:220: __endasm;
      000939 02 00 00         [24] 2229 	ljmp	0
                                   2230 ;	life.c:221: }
      00093C 85*00 81         [24] 2231 	mov	sp,_bp
      00093F D0*00            [24] 2232 	pop	_bp
      000941 22               [24] 2233 	ret
                                   2234 	.area CSEG    (CODE)
                                   2235 	.area CONST   (CODE)
      000000                       2236 _digits:
      000000 30                    2237 	.db #0x30	; 48	'0'
      000001 31                    2238 	.db #0x31	; 49	'1'
      000002 32                    2239 	.db #0x32	; 50	'2'
      000003 33                    2240 	.db #0x33	; 51	'3'
      000004 34                    2241 	.db #0x34	; 52	'4'
      000005 35                    2242 	.db #0x35	; 53	'5'
      000006 36                    2243 	.db #0x36	; 54	'6'
      000007 37                    2244 	.db #0x37	; 55	'7'
      000008 38                    2245 	.db #0x38	; 56	'8'
      000009 39                    2246 	.db #0x39	; 57	'9'
      00000A 61                    2247 	.db #0x61	; 97	'a'
      00000B 62                    2248 	.db #0x62	; 98	'b'
      00000C 63                    2249 	.db #0x63	; 99	'c'
      00000D 64                    2250 	.db #0x64	; 100	'd'
      00000E 65                    2251 	.db #0x65	; 101	'e'
      00000F 66                    2252 	.db #0x66	; 102	'f'
                                   2253 	.area CONST   (CODE)
      000010                       2254 ___str_0:
      000010 1B                    2255 	.db 0x1b
      000011 5B 32 4A              2256 	.ascii "[2J"
      000014 1B                    2257 	.db 0x1b
      000015 5B 6D                 2258 	.ascii "[m"
      000017 00                    2259 	.db 0x00
                                   2260 	.area CSEG    (CODE)
                                   2261 	.area CONST   (CODE)
      000018                       2262 ___str_1:
      000018 0D                    2263 	.db 0x0d
      000019 0A                    2264 	.db 0x0a
      00001A 00                    2265 	.db 0x00
                                   2266 	.area CSEG    (CODE)
                                   2267 	.area CONST   (CODE)
      00001B                       2268 ___str_2:
      00001B 5B 5D                 2269 	.ascii "[]"
      00001D 00                    2270 	.db 0x00
                                   2271 	.area CSEG    (CODE)
                                   2272 	.area CONST   (CODE)
      00001E                       2273 ___str_3:
      00001E 23 23                 2274 	.ascii "##"
      000020 00                    2275 	.db 0x00
                                   2276 	.area CSEG    (CODE)
                                   2277 	.area CONST   (CODE)
      000021                       2278 ___str_4:
      000021 4C 4F 41 44 20 3C     2279 	.ascii "LOAD <"
      000027 00                    2280 	.db 0x00
                                   2281 	.area CSEG    (CODE)
                                   2282 	.area CONST   (CODE)
      000028                       2283 ___str_5:
      000028 3E                    2284 	.ascii ">"
      000029 0D                    2285 	.db 0x0d
      00002A 0A                    2286 	.db 0x0a
      00002B 00                    2287 	.db 0x00
                                   2288 	.area CSEG    (CODE)
                                   2289 	.area CONST   (CODE)
      00002C                       2290 ___str_6:
      00002C 1B                    2291 	.db 0x1b
      00002D 5B 32 4A              2292 	.ascii "[2J"
      000030 1B                    2293 	.db 0x1b
      000031 5B 6D 49 4E 49 54     2294 	.ascii "[mINIT"
      000037 0D                    2295 	.db 0x0d
      000038 0A                    2296 	.db 0x0a
      000039 00                    2297 	.db 0x00
                                   2298 	.area CSEG    (CODE)
                                   2299 	.area CONST   (CODE)
      00003A                       2300 ___str_7:
      00003A 52 44 59              2301 	.ascii "RDY"
      00003D 0D                    2302 	.db 0x0d
      00003E 0A                    2303 	.db 0x0a
      00003F 00                    2304 	.db 0x00
                                   2305 	.area CSEG    (CODE)
                                   2306 	.area CONST   (CODE)
      000040                       2307 ___str_8:
      000040 44 4F 4E 45           2308 	.ascii "DONE"
      000044 0D                    2309 	.db 0x0d
      000045 0A                    2310 	.db 0x0a
      000046 00                    2311 	.db 0x00
                                   2312 	.area CSEG    (CODE)
                                   2313 	.area CONST   (CODE)
      000047                       2314 ___str_9:
      000047 42 52 45 41 4B        2315 	.ascii "BREAK"
      00004C 0D                    2316 	.db 0x0d
      00004D 0A                    2317 	.db 0x0a
      00004E 00                    2318 	.db 0x00
                                   2319 	.area CSEG    (CODE)
                                   2320 	.area CONST   (CODE)
      00004F                       2321 ___str_10:
      00004F 54 45 52 4D           2322 	.ascii "TERM"
      000053 0D                    2323 	.db 0x0d
      000054 0A                    2324 	.db 0x0a
      000055 00                    2325 	.db 0x00
                                   2326 	.area CSEG    (CODE)
                                   2327 	.area XINIT   (CODE)
                                   2328 	.area CABS    (ABS,CODE)
