                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _srand
                                     21 	.globl _rand
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _FL
                                     29 	.globl _P
                                     30 	.globl _TF2
                                     31 	.globl _EXF2
                                     32 	.globl _RCLK
                                     33 	.globl _TCLK
                                     34 	.globl _EXEN2
                                     35 	.globl _TR2
                                     36 	.globl _C_T2
                                     37 	.globl _CP_RL2
                                     38 	.globl _T2CON_7
                                     39 	.globl _T2CON_6
                                     40 	.globl _T2CON_5
                                     41 	.globl _T2CON_4
                                     42 	.globl _T2CON_3
                                     43 	.globl _T2CON_2
                                     44 	.globl _T2CON_1
                                     45 	.globl _T2CON_0
                                     46 	.globl _PT2
                                     47 	.globl _PS
                                     48 	.globl _PT1
                                     49 	.globl _PX1
                                     50 	.globl _PT0
                                     51 	.globl _PX0
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _EA
                                     69 	.globl _ET2
                                     70 	.globl _ES
                                     71 	.globl _ET1
                                     72 	.globl _EX1
                                     73 	.globl _ET0
                                     74 	.globl _EX0
                                     75 	.globl _P2_7
                                     76 	.globl _P2_6
                                     77 	.globl _P2_5
                                     78 	.globl _P2_4
                                     79 	.globl _P2_3
                                     80 	.globl _P2_2
                                     81 	.globl _P2_1
                                     82 	.globl _P2_0
                                     83 	.globl _SM0
                                     84 	.globl _SM1
                                     85 	.globl _SM2
                                     86 	.globl _REN
                                     87 	.globl _TB8
                                     88 	.globl _RB8
                                     89 	.globl _TI
                                     90 	.globl _RI
                                     91 	.globl _T2EX
                                     92 	.globl _T2
                                     93 	.globl _P1_7
                                     94 	.globl _P1_6
                                     95 	.globl _P1_5
                                     96 	.globl _P1_4
                                     97 	.globl _P1_3
                                     98 	.globl _P1_2
                                     99 	.globl _P1_1
                                    100 	.globl _P1_0
                                    101 	.globl _TF1
                                    102 	.globl _TR1
                                    103 	.globl _TF0
                                    104 	.globl _TR0
                                    105 	.globl _IE1
                                    106 	.globl _IT1
                                    107 	.globl _IE0
                                    108 	.globl _IT0
                                    109 	.globl _P0_7
                                    110 	.globl _P0_6
                                    111 	.globl _P0_5
                                    112 	.globl _P0_4
                                    113 	.globl _P0_3
                                    114 	.globl _P0_2
                                    115 	.globl _P0_1
                                    116 	.globl _P0_0
                                    117 	.globl _B
                                    118 	.globl _A
                                    119 	.globl _ACC
                                    120 	.globl _PSW
                                    121 	.globl _TH2
                                    122 	.globl _TL2
                                    123 	.globl _RCAP2H
                                    124 	.globl _RCAP2L
                                    125 	.globl _T2MOD
                                    126 	.globl _T2CON
                                    127 	.globl _IP
                                    128 	.globl _P3
                                    129 	.globl _IE
                                    130 	.globl _P2
                                    131 	.globl _SBUF
                                    132 	.globl _SCON
                                    133 	.globl _P1
                                    134 	.globl _TH1
                                    135 	.globl _TH0
                                    136 	.globl _TL1
                                    137 	.globl _TL0
                                    138 	.globl _TMOD
                                    139 	.globl _TCON
                                    140 	.globl _PCON
                                    141 	.globl _DPH
                                    142 	.globl _DPL
                                    143 	.globl _SP
                                    144 	.globl _P0
                                    145 ;--------------------------------------------------------
                                    146 ; special function registers
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0	=	0x0080
                           000081   151 _SP	=	0x0081
                           000082   152 _DPL	=	0x0082
                           000083   153 _DPH	=	0x0083
                           000087   154 _PCON	=	0x0087
                           000088   155 _TCON	=	0x0088
                           000089   156 _TMOD	=	0x0089
                           00008A   157 _TL0	=	0x008a
                           00008B   158 _TL1	=	0x008b
                           00008C   159 _TH0	=	0x008c
                           00008D   160 _TH1	=	0x008d
                           000090   161 _P1	=	0x0090
                           000098   162 _SCON	=	0x0098
                           000099   163 _SBUF	=	0x0099
                           0000A0   164 _P2	=	0x00a0
                           0000A8   165 _IE	=	0x00a8
                           0000B0   166 _P3	=	0x00b0
                           0000B8   167 _IP	=	0x00b8
                           0000C8   168 _T2CON	=	0x00c8
                           0000C9   169 _T2MOD	=	0x00c9
                           0000CA   170 _RCAP2L	=	0x00ca
                           0000CB   171 _RCAP2H	=	0x00cb
                           0000CC   172 _TL2	=	0x00cc
                           0000CD   173 _TH2	=	0x00cd
                           0000D0   174 _PSW	=	0x00d0
                           0000E0   175 _ACC	=	0x00e0
                           0000E0   176 _A	=	0x00e0
                           0000F0   177 _B	=	0x00f0
                                    178 ;--------------------------------------------------------
                                    179 ; special function bits
                                    180 ;--------------------------------------------------------
                                    181 	.area RSEG    (ABS,DATA)
      000000                        182 	.org 0x0000
                           000080   183 _P0_0	=	0x0080
                           000081   184 _P0_1	=	0x0081
                           000082   185 _P0_2	=	0x0082
                           000083   186 _P0_3	=	0x0083
                           000084   187 _P0_4	=	0x0084
                           000085   188 _P0_5	=	0x0085
                           000086   189 _P0_6	=	0x0086
                           000087   190 _P0_7	=	0x0087
                           000088   191 _IT0	=	0x0088
                           000089   192 _IE0	=	0x0089
                           00008A   193 _IT1	=	0x008a
                           00008B   194 _IE1	=	0x008b
                           00008C   195 _TR0	=	0x008c
                           00008D   196 _TF0	=	0x008d
                           00008E   197 _TR1	=	0x008e
                           00008F   198 _TF1	=	0x008f
                           000090   199 _P1_0	=	0x0090
                           000091   200 _P1_1	=	0x0091
                           000092   201 _P1_2	=	0x0092
                           000093   202 _P1_3	=	0x0093
                           000094   203 _P1_4	=	0x0094
                           000095   204 _P1_5	=	0x0095
                           000096   205 _P1_6	=	0x0096
                           000097   206 _P1_7	=	0x0097
                           000090   207 _T2	=	0x0090
                           000091   208 _T2EX	=	0x0091
                           000098   209 _RI	=	0x0098
                           000099   210 _TI	=	0x0099
                           00009A   211 _RB8	=	0x009a
                           00009B   212 _TB8	=	0x009b
                           00009C   213 _REN	=	0x009c
                           00009D   214 _SM2	=	0x009d
                           00009E   215 _SM1	=	0x009e
                           00009F   216 _SM0	=	0x009f
                           0000A0   217 _P2_0	=	0x00a0
                           0000A1   218 _P2_1	=	0x00a1
                           0000A2   219 _P2_2	=	0x00a2
                           0000A3   220 _P2_3	=	0x00a3
                           0000A4   221 _P2_4	=	0x00a4
                           0000A5   222 _P2_5	=	0x00a5
                           0000A6   223 _P2_6	=	0x00a6
                           0000A7   224 _P2_7	=	0x00a7
                           0000A8   225 _EX0	=	0x00a8
                           0000A9   226 _ET0	=	0x00a9
                           0000AA   227 _EX1	=	0x00aa
                           0000AB   228 _ET1	=	0x00ab
                           0000AC   229 _ES	=	0x00ac
                           0000AD   230 _ET2	=	0x00ad
                           0000AF   231 _EA	=	0x00af
                           0000B0   232 _P3_0	=	0x00b0
                           0000B1   233 _P3_1	=	0x00b1
                           0000B2   234 _P3_2	=	0x00b2
                           0000B3   235 _P3_3	=	0x00b3
                           0000B4   236 _P3_4	=	0x00b4
                           0000B5   237 _P3_5	=	0x00b5
                           0000B6   238 _P3_6	=	0x00b6
                           0000B7   239 _P3_7	=	0x00b7
                           0000B0   240 _RXD	=	0x00b0
                           0000B1   241 _TXD	=	0x00b1
                           0000B2   242 _INT0	=	0x00b2
                           0000B3   243 _INT1	=	0x00b3
                           0000B4   244 _T0	=	0x00b4
                           0000B5   245 _T1	=	0x00b5
                           0000B6   246 _WR	=	0x00b6
                           0000B7   247 _RD	=	0x00b7
                           0000B8   248 _PX0	=	0x00b8
                           0000B9   249 _PT0	=	0x00b9
                           0000BA   250 _PX1	=	0x00ba
                           0000BB   251 _PT1	=	0x00bb
                           0000BC   252 _PS	=	0x00bc
                           0000BD   253 _PT2	=	0x00bd
                           0000C8   254 _T2CON_0	=	0x00c8
                           0000C9   255 _T2CON_1	=	0x00c9
                           0000CA   256 _T2CON_2	=	0x00ca
                           0000CB   257 _T2CON_3	=	0x00cb
                           0000CC   258 _T2CON_4	=	0x00cc
                           0000CD   259 _T2CON_5	=	0x00cd
                           0000CE   260 _T2CON_6	=	0x00ce
                           0000CF   261 _T2CON_7	=	0x00cf
                           0000C8   262 _CP_RL2	=	0x00c8
                           0000C9   263 _C_T2	=	0x00c9
                           0000CA   264 _TR2	=	0x00ca
                           0000CB   265 _EXEN2	=	0x00cb
                           0000CC   266 _TCLK	=	0x00cc
                           0000CD   267 _RCLK	=	0x00cd
                           0000CE   268 _EXF2	=	0x00ce
                           0000CF   269 _TF2	=	0x00cf
                           0000D0   270 _P	=	0x00d0
                           0000D1   271 _FL	=	0x00d1
                           0000D2   272 _OV	=	0x00d2
                           0000D3   273 _RS0	=	0x00d3
                           0000D4   274 _RS1	=	0x00d4
                           0000D5   275 _F0	=	0x00d5
                           0000D6   276 _AC	=	0x00d6
                           0000D7   277 _CY	=	0x00d7
                                    278 ;--------------------------------------------------------
                                    279 ; overlayable register banks
                                    280 ;--------------------------------------------------------
                                    281 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        284 	.ds 8
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable bit register bank
                                    287 ;--------------------------------------------------------
                                    288 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        289 bits:
      000000                        290 	.ds 1
                           008000   291 	b0 = bits[0]
                           008100   292 	b1 = bits[1]
                           008200   293 	b2 = bits[2]
                           008300   294 	b3 = bits[3]
                           008400   295 	b4 = bits[4]
                           008500   296 	b5 = bits[5]
                           008600   297 	b6 = bits[6]
                           008700   298 	b7 = bits[7]
                                    299 ;--------------------------------------------------------
                                    300 ; internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area DSEG    (DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable items in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 ;--------------------------------------------------------
                                    307 ; Stack segment in internal ram 
                                    308 ;--------------------------------------------------------
                                    309 	.area	SSEG
      000000                        310 __start__stack:
      000000                        311 	.ds	1
                                    312 
                                    313 ;--------------------------------------------------------
                                    314 ; indirectly addressable internal ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area ISEG    (DATA)
      000000                        317 _digits:
      000000                        318 	.ds 16
      000010                        319 _i0:
      000010                        320 	.ds 1
      000011                        321 _i1:
      000011                        322 	.ds 1
      000012                        323 _OE76:
      000012                        324 	.ds 1
      000013                        325 _x:
      000013                        326 	.ds 2
      000015                        327 _y:
      000015                        328 	.ds 2
      000017                        329 _j:
      000017                        330 	.ds 2
      000019                        331 _c:
      000019                        332 	.ds 2
      00001B                        333 _n:
      00001B                        334 	.ds 1
      00001C                        335 _fixed:
      00001C                        336 	.ds 1
      00001D                        337 _cycle2:
      00001D                        338 	.ds 1
      00001E                        339 _x1:
      00001E                        340 	.ds 2
      000020                        341 _y1:
      000020                        342 	.ds 2
      000022                        343 _generation:
      000022                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
                           00FFFE   362 _RND	=	0xfffe
                           00F006   363 _OEreg	=	0xf006
      000000                        364 _iu:
      000000                        365 	.ds 9216
      002400                        366 _pu:
      002400                        367 	.ds 9216
      004800                        368 _u:
      004800                        369 	.ds 9216
      006C00                        370 _nu:
      006C00                        371 	.ds 9216
                                    372 ;--------------------------------------------------------
                                    373 ; absolute external ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XABS    (ABS,XDATA)
                                    376 ;--------------------------------------------------------
                                    377 ; external initialized ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XISEG   (XDATA)
                                    380 	.area HOME    (CODE)
                                    381 	.area GSINIT0 (CODE)
                                    382 	.area GSINIT1 (CODE)
                                    383 	.area GSINIT2 (CODE)
                                    384 	.area GSINIT3 (CODE)
                                    385 	.area GSINIT4 (CODE)
                                    386 	.area GSINIT5 (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area CSEG    (CODE)
                                    390 ;--------------------------------------------------------
                                    391 ; interrupt vector 
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
      000000                        394 __interrupt_vect:
      000000 02r00r00         [24]  395 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  396 	ljmp	_int0
      000006                        397 	.ds	5
      00000B 32               [24]  398 	reti
      00000C                        399 	.ds	7
      000013 02r00r1A         [24]  400 	ljmp	_int1
                                    401 ;--------------------------------------------------------
                                    402 ; global & static initialisations
                                    403 ;--------------------------------------------------------
                                    404 	.area HOME    (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.area GSFINAL (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.globl __sdcc_gsinit_startup
                                    409 	.globl __sdcc_program_startup
                                    410 	.globl __start__stack
                                    411 	.globl __mcs51_genXINIT
                                    412 	.globl __mcs51_genXRAMCLEAR
                                    413 	.globl __mcs51_genRAMCLEAR
                                    414 ;	life.c:29: __idata static const char digits[16] = {
      000000 78r00            [12]  415 	mov	r0,#_digits
      000002 76 30            [12]  416 	mov	@r0,#0x30
      000004 78r01            [12]  417 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  418 	mov	@r0,#0x31
      000008 78r02            [12]  419 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  420 	mov	@r0,#0x32
      00000C 78r03            [12]  421 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  422 	mov	@r0,#0x33
      000010 78r04            [12]  423 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  424 	mov	@r0,#0x34
      000014 78r05            [12]  425 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  426 	mov	@r0,#0x35
      000018 78r06            [12]  427 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  428 	mov	@r0,#0x36
      00001C 78r07            [12]  429 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  430 	mov	@r0,#0x37
      000020 78r08            [12]  431 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  432 	mov	@r0,#0x38
      000024 78r09            [12]  433 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  434 	mov	@r0,#0x39
      000028 78r0A            [12]  435 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  436 	mov	@r0,#0x41
      00002C 78r0B            [12]  437 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  438 	mov	@r0,#0x42
      000030 78r0C            [12]  439 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  440 	mov	@r0,#0x43
      000034 78r0D            [12]  441 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  442 	mov	@r0,#0x44
      000038 78r0E            [12]  443 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  444 	mov	@r0,#0x45
      00003C 78r0F            [12]  445 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  446 	mov	@r0,#0x46
                                    447 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  448 	ljmp	__sdcc_program_startup
                                    449 ;--------------------------------------------------------
                                    450 ; Home
                                    451 ;--------------------------------------------------------
                                    452 	.area HOME    (CODE)
                                    453 	.area HOME    (CODE)
      000016                        454 __sdcc_program_startup:
      000016 02r02r25         [24]  455 	ljmp	_main
                                    456 ;	return from main will return to caller
                                    457 ;--------------------------------------------------------
                                    458 ; code
                                    459 ;--------------------------------------------------------
                                    460 	.area CSEG    (CODE)
                                    461 ;------------------------------------------------------------
                                    462 ;Allocation info for local variables in function 'putchar'
                                    463 ;------------------------------------------------------------
                                    464 ;c                         Allocated to registers 
                                    465 ;------------------------------------------------------------
                                    466 ;	life.c:10: int putchar(int c) __naked {
                                    467 ;	-----------------------------------------
                                    468 ;	 function putchar
                                    469 ;	-----------------------------------------
      000000                        470 _putchar:
                                    471 ;	naked function: no prologue.
                                    472 ;	life.c:15: __endasm;
      000000 E5 82            [12]  473 	mov	a, dpl
      000002 02 00 30         [24]  474 	ljmp	0x0030
                                    475 ;	life.c:16: }
                                    476 ;	naked function: no epilogue.
                                    477 ;------------------------------------------------------------
                                    478 ;Allocation info for local variables in function 'getchar'
                                    479 ;------------------------------------------------------------
                                    480 ;	life.c:18: int getchar(void) __naked {
                                    481 ;	-----------------------------------------
                                    482 ;	 function getchar
                                    483 ;	-----------------------------------------
      000005                        484 _getchar:
                                    485 ;	naked function: no prologue.
                                    486 ;	life.c:24: __endasm;
      000005 12 00 32         [24]  487 	lcall	0x0032
      000008 F5 82            [12]  488 	mov	dpl, a
      00000A 75 83 00         [24]  489 	mov	dph, #0
      00000D 22               [24]  490 	ret
                                    491 ;	life.c:25: }
                                    492 ;	naked function: no epilogue.
                                    493 ;------------------------------------------------------------
                                    494 ;Allocation info for local variables in function 'int0'
                                    495 ;------------------------------------------------------------
                                    496 ;	life.c:58: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    497 ;	-----------------------------------------
                                    498 ;	 function int0
                                    499 ;	-----------------------------------------
      00000E                        500 _int0:
                           00000F   501 	ar7 = 0x0f
                           00000E   502 	ar6 = 0x0e
                           00000D   503 	ar5 = 0x0d
                           00000C   504 	ar4 = 0x0c
                           00000B   505 	ar3 = 0x0b
                           00000A   506 	ar2 = 0x0a
                           000009   507 	ar1 = 0x09
                           000008   508 	ar0 = 0x08
      00000E C0 D0            [24]  509 	push	psw
      000010 75 D0 08         [24]  510 	mov	psw,#0x08
                                    511 ;	life.c:59: i0 = 1;
      000013 78r10            [12]  512 	mov	r0,#_i0
      000015 76 01            [12]  513 	mov	@r0,#0x01
                                    514 ;	life.c:60: }
      000017 D0 D0            [24]  515 	pop	psw
      000019 32               [24]  516 	reti
                                    517 ;	eliminated unneeded push/pop dpl
                                    518 ;	eliminated unneeded push/pop dph
                                    519 ;	eliminated unneeded push/pop b
                                    520 ;	eliminated unneeded push/pop acc
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'int1'
                                    523 ;------------------------------------------------------------
                                    524 ;	life.c:62: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    525 ;	-----------------------------------------
                                    526 ;	 function int1
                                    527 ;	-----------------------------------------
      00001A                        528 _int1:
      00001A C0 D0            [24]  529 	push	psw
      00001C 75 D0 08         [24]  530 	mov	psw,#0x08
                                    531 ;	life.c:63: i1 = 1;
      00001F 78r11            [12]  532 	mov	r0,#_i1
      000021 76 01            [12]  533 	mov	@r0,#0x01
                                    534 ;	life.c:64: }
      000023 D0 D0            [24]  535 	pop	psw
      000025 32               [24]  536 	reti
                                    537 ;	eliminated unneeded push/pop dpl
                                    538 ;	eliminated unneeded push/pop dph
                                    539 ;	eliminated unneeded push/pop b
                                    540 ;	eliminated unneeded push/pop acc
                                    541 ;------------------------------------------------------------
                                    542 ;Allocation info for local variables in function 'flashOE'
                                    543 ;------------------------------------------------------------
                                    544 ;	life.c:74: static void flashOE(void) {
                                    545 ;	-----------------------------------------
                                    546 ;	 function flashOE
                                    547 ;	-----------------------------------------
      000026                        548 _flashOE:
                           000007   549 	ar7 = 0x07
                           000006   550 	ar6 = 0x06
                           000005   551 	ar5 = 0x05
                           000004   552 	ar4 = 0x04
                           000003   553 	ar3 = 0x03
                           000002   554 	ar2 = 0x02
                           000001   555 	ar1 = 0x01
                           000000   556 	ar0 = 0x00
                                    557 ;	life.c:75: P1_7 = 0;
                                    558 ;	assignBit
      000026 C2 97            [12]  559 	clr	_P1_7
                                    560 ;	life.c:76: OEreg = OE76;
      000028 78r12            [12]  561 	mov	r0,#_OE76
      00002A 90 F0 06         [24]  562 	mov	dptr,#_OEreg
      00002D E6               [12]  563 	mov	a,@r0
      00002E F0               [24]  564 	movx	@dptr,a
                                    565 ;	life.c:77: P1_7 = 1;
                                    566 ;	assignBit
      00002F D2 97            [12]  567 	setb	_P1_7
                                    568 ;	life.c:79: return;
                                    569 ;	life.c:80: }
      000031 22               [24]  570 	ret
                                    571 ;------------------------------------------------------------
                                    572 ;Allocation info for local variables in function 'show'
                                    573 ;------------------------------------------------------------
                                    574 ;hdr                       Allocated to registers r7 
                                    575 ;__1966080005              Allocated to registers 
                                    576 ;s                         Allocated to registers r5 r6 r7 
                                    577 ;__1310720001              Allocated to registers r6 r7 
                                    578 ;a                         Allocated to registers 
                                    579 ;__1310720003              Allocated to registers r6 r7 
                                    580 ;a                         Allocated to registers 
                                    581 ;__1966080008              Allocated to registers 
                                    582 ;s                         Allocated to registers r5 r6 r7 
                                    583 ;__2621440011              Allocated to registers 
                                    584 ;s                         Allocated to registers r5 r6 r7 
                                    585 ;------------------------------------------------------------
                                    586 ;	life.c:116: void show(char hdr) {
                                    587 ;	-----------------------------------------
                                    588 ;	 function show
                                    589 ;	-----------------------------------------
      000032                        590 _show:
                                    591 ;	life.c:117: if (hdr) {
      000032 E5 82            [12]  592 	mov	a,dpl
      000034 FF               [12]  593 	mov	r7,a
      000035 70 03            [24]  594 	jnz	00190$
      000037 02r01r8A         [24]  595 	ljmp	00102$
      00003A                        596 00190$:
                                    597 ;	life.c:118: printstr("\033[2J\033[mGEN ");
      00003A 7Dr00            [12]  598 	mov	r5,#___str_0
      00003C 7Es00            [12]  599 	mov	r6,#(___str_0 >> 8)
      00003E 7F 80            [12]  600 	mov	r7,#0x80
                                    601 ;	life.c:53: return;
      000040                        602 00121$:
                                    603 ;	life.c:51: for (; *s; s++) putchar(*s);
      000040 8D 82            [24]  604 	mov	dpl,r5
      000042 8E 83            [24]  605 	mov	dph,r6
      000044 8F F0            [24]  606 	mov	b,r7
      000046 12r00r00         [24]  607 	lcall	__gptrget
      000049 FC               [12]  608 	mov	r4,a
      00004A 60 10            [24]  609 	jz	00109$
      00004C 7B 00            [12]  610 	mov	r3,#0x00
      00004E 8C 82            [24]  611 	mov	dpl,r4
      000050 8B 83            [24]  612 	mov	dph,r3
      000052 12r00r00         [24]  613 	lcall	_putchar
      000055 0D               [12]  614 	inc	r5
                                    615 ;	life.c:118: printstr("\033[2J\033[mGEN ");
      000056 BD 00 E7         [24]  616 	cjne	r5,#0x00,00121$
      000059 0E               [12]  617 	inc	r6
      00005A 80 E4            [24]  618 	sjmp	00121$
      00005C                        619 00109$:
                                    620 ;	life.c:110: print16x(generation[1]);
      00005C 78r24            [12]  621 	mov	r0,#(_generation + 0x0002)
      00005E 86 06            [24]  622 	mov	ar6,@r0
      000060 08               [12]  623 	inc	r0
                                    624 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      000061 E6               [12]  625 	mov	a,@r0
      000062 FF               [12]  626 	mov	r7,a
      000063 C4               [12]  627 	swap	a
      000064 54 0F            [12]  628 	anl	a,#0x0f
      000066 30 E3 02         [24]  629 	jnb	acc.3,00193$
      000069 44 F0            [12]  630 	orl	a,#0xf0
      00006B                        631 00193$:
      00006B FC               [12]  632 	mov	r4,a
      00006C 33               [12]  633 	rlc	a
      00006D 95 E0            [12]  634 	subb	a,acc
      00006F 53 04 0F         [24]  635 	anl	ar4,#0x0f
      000072 EC               [12]  636 	mov	a,r4
      000073 24r00            [12]  637 	add	a,#_digits
      000075 F9               [12]  638 	mov	r1,a
      000076 87 05            [24]  639 	mov	ar5,@r1
      000078 7C 00            [12]  640 	mov	r4,#0x00
      00007A 8D 82            [24]  641 	mov	dpl,r5
      00007C 8C 83            [24]  642 	mov	dph,r4
      00007E 12r00r00         [24]  643 	lcall	_putchar
                                    644 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      000081 8F 05            [24]  645 	mov	ar5,r7
      000083 53 05 0F         [24]  646 	anl	ar5,#0x0f
      000086 ED               [12]  647 	mov	a,r5
      000087 24r00            [12]  648 	add	a,#_digits
      000089 F9               [12]  649 	mov	r1,a
      00008A 87 05            [24]  650 	mov	ar5,@r1
      00008C 7C 00            [12]  651 	mov	r4,#0x00
      00008E 8D 82            [24]  652 	mov	dpl,r5
      000090 8C 83            [24]  653 	mov	dph,r4
      000092 12r00r00         [24]  654 	lcall	_putchar
                                    655 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      000095 8E 04            [24]  656 	mov	ar4,r6
      000097 EF               [12]  657 	mov	a,r7
      000098 C4               [12]  658 	swap	a
      000099 CC               [12]  659 	xch	a,r4
      00009A C4               [12]  660 	swap	a
      00009B 54 0F            [12]  661 	anl	a,#0x0f
      00009D 6C               [12]  662 	xrl	a,r4
      00009E CC               [12]  663 	xch	a,r4
      00009F 54 0F            [12]  664 	anl	a,#0x0f
      0000A1 CC               [12]  665 	xch	a,r4
      0000A2 6C               [12]  666 	xrl	a,r4
      0000A3 CC               [12]  667 	xch	a,r4
      0000A4 30 E3 02         [24]  668 	jnb	acc.3,00194$
      0000A7 44 F0            [12]  669 	orl	a,#0xf0
      0000A9                        670 00194$:
      0000A9 53 04 0F         [24]  671 	anl	ar4,#0x0f
      0000AC EC               [12]  672 	mov	a,r4
      0000AD 24r00            [12]  673 	add	a,#_digits
      0000AF F9               [12]  674 	mov	r1,a
      0000B0 87 05            [24]  675 	mov	ar5,@r1
      0000B2 7C 00            [12]  676 	mov	r4,#0x00
      0000B4 8D 82            [24]  677 	mov	dpl,r5
      0000B6 8C 83            [24]  678 	mov	dph,r4
      0000B8 12r00r00         [24]  679 	lcall	_putchar
                                    680 ;	life.c:45: putchar(digits[a & 0xf]);
      0000BB 53 06 0F         [24]  681 	anl	ar6,#0x0f
      0000BE EE               [12]  682 	mov	a,r6
      0000BF 24r00            [12]  683 	add	a,#_digits
      0000C1 F9               [12]  684 	mov	r1,a
      0000C2 87 07            [24]  685 	mov	ar7,@r1
      0000C4 7E 00            [12]  686 	mov	r6,#0x00
      0000C6 8F 82            [24]  687 	mov	dpl,r7
      0000C8 8E 83            [24]  688 	mov	dph,r6
      0000CA 12r00r00         [24]  689 	lcall	_putchar
                                    690 ;	life.c:111: print16x(generation[0]);
      0000CD 78r22            [12]  691 	mov	r0,#_generation
      0000CF 86 06            [24]  692 	mov	ar6,@r0
      0000D1 08               [12]  693 	inc	r0
                                    694 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      0000D2 E6               [12]  695 	mov	a,@r0
      0000D3 FF               [12]  696 	mov	r7,a
      0000D4 C4               [12]  697 	swap	a
      0000D5 54 0F            [12]  698 	anl	a,#0x0f
      0000D7 30 E3 02         [24]  699 	jnb	acc.3,00195$
      0000DA 44 F0            [12]  700 	orl	a,#0xf0
      0000DC                        701 00195$:
      0000DC FC               [12]  702 	mov	r4,a
      0000DD 33               [12]  703 	rlc	a
      0000DE 95 E0            [12]  704 	subb	a,acc
      0000E0 53 04 0F         [24]  705 	anl	ar4,#0x0f
      0000E3 EC               [12]  706 	mov	a,r4
      0000E4 24r00            [12]  707 	add	a,#_digits
      0000E6 F9               [12]  708 	mov	r1,a
      0000E7 87 05            [24]  709 	mov	ar5,@r1
      0000E9 7C 00            [12]  710 	mov	r4,#0x00
      0000EB 8D 82            [24]  711 	mov	dpl,r5
      0000ED 8C 83            [24]  712 	mov	dph,r4
      0000EF 12r00r00         [24]  713 	lcall	_putchar
                                    714 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      0000F2 8F 05            [24]  715 	mov	ar5,r7
      0000F4 53 05 0F         [24]  716 	anl	ar5,#0x0f
      0000F7 ED               [12]  717 	mov	a,r5
      0000F8 24r00            [12]  718 	add	a,#_digits
      0000FA F9               [12]  719 	mov	r1,a
      0000FB 87 05            [24]  720 	mov	ar5,@r1
      0000FD 7C 00            [12]  721 	mov	r4,#0x00
      0000FF 8D 82            [24]  722 	mov	dpl,r5
      000101 8C 83            [24]  723 	mov	dph,r4
      000103 12r00r00         [24]  724 	lcall	_putchar
                                    725 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      000106 8E 04            [24]  726 	mov	ar4,r6
      000108 EF               [12]  727 	mov	a,r7
      000109 C4               [12]  728 	swap	a
      00010A CC               [12]  729 	xch	a,r4
      00010B C4               [12]  730 	swap	a
      00010C 54 0F            [12]  731 	anl	a,#0x0f
      00010E 6C               [12]  732 	xrl	a,r4
      00010F CC               [12]  733 	xch	a,r4
      000110 54 0F            [12]  734 	anl	a,#0x0f
      000112 CC               [12]  735 	xch	a,r4
      000113 6C               [12]  736 	xrl	a,r4
      000114 CC               [12]  737 	xch	a,r4
      000115 30 E3 02         [24]  738 	jnb	acc.3,00196$
      000118 44 F0            [12]  739 	orl	a,#0xf0
      00011A                        740 00196$:
      00011A 53 04 0F         [24]  741 	anl	ar4,#0x0f
      00011D EC               [12]  742 	mov	a,r4
      00011E 24r00            [12]  743 	add	a,#_digits
      000120 F9               [12]  744 	mov	r1,a
      000121 87 05            [24]  745 	mov	ar5,@r1
      000123 7C 00            [12]  746 	mov	r4,#0x00
      000125 8D 82            [24]  747 	mov	dpl,r5
      000127 8C 83            [24]  748 	mov	dph,r4
      000129 12r00r00         [24]  749 	lcall	_putchar
                                    750 ;	life.c:45: putchar(digits[a & 0xf]);
      00012C 53 06 0F         [24]  751 	anl	ar6,#0x0f
      00012F EE               [12]  752 	mov	a,r6
      000130 24r00            [12]  753 	add	a,#_digits
      000132 F9               [12]  754 	mov	r1,a
      000133 87 07            [24]  755 	mov	ar7,@r1
      000135 7E 00            [12]  756 	mov	r6,#0x00
      000137 8F 82            [24]  757 	mov	dpl,r7
      000139 8E 83            [24]  758 	mov	dph,r6
      00013B 12r00r00         [24]  759 	lcall	_putchar
                                    760 ;	life.c:120: printstr("\r\n");
      00013E 7Dr0C            [12]  761 	mov	r5,#___str_1
      000140 7Es00            [12]  762 	mov	r6,#(___str_1 >> 8)
      000142 7F 80            [12]  763 	mov	r7,#0x80
                                    764 ;	life.c:53: return;
      000144                        765 00124$:
                                    766 ;	life.c:51: for (; *s; s++) putchar(*s);
      000144 8D 82            [24]  767 	mov	dpl,r5
      000146 8E 83            [24]  768 	mov	dph,r6
      000148 8F F0            [24]  769 	mov	b,r7
      00014A 12r00r00         [24]  770 	lcall	__gptrget
      00014D FC               [12]  771 	mov	r4,a
      00014E 60 10            [24]  772 	jz	00114$
      000150 7B 00            [12]  773 	mov	r3,#0x00
      000152 8C 82            [24]  774 	mov	dpl,r4
      000154 8B 83            [24]  775 	mov	dph,r3
      000156 12r00r00         [24]  776 	lcall	_putchar
      000159 0D               [12]  777 	inc	r5
                                    778 ;	life.c:120: printstr("\r\n");
      00015A BD 00 E7         [24]  779 	cjne	r5,#0x00,00124$
      00015D 0E               [12]  780 	inc	r6
      00015E 80 E4            [24]  781 	sjmp	00124$
      000160                        782 00114$:
                                    783 ;	life.c:103: generation[0]++;
      000160 78r22            [12]  784 	mov	r0,#_generation
      000162 86 06            [24]  785 	mov	ar6,@r0
      000164 08               [12]  786 	inc	r0
      000165 86 07            [24]  787 	mov	ar7,@r0
      000167 0E               [12]  788 	inc	r6
      000168 BE 00 01         [24]  789 	cjne	r6,#0x00,00199$
      00016B 0F               [12]  790 	inc	r7
      00016C                        791 00199$:
      00016C 78r22            [12]  792 	mov	r0,#_generation
      00016E A6 06            [24]  793 	mov	@r0,ar6
      000170 08               [12]  794 	inc	r0
      000171 A6 07            [24]  795 	mov	@r0,ar7
                                    796 ;	life.c:104: if (!generation[0]) generation[1]++;
      000173 EE               [12]  797 	mov	a,r6
      000174 4F               [12]  798 	orl	a,r7
      000175 70 13            [24]  799 	jnz	00102$
      000177 78r24            [12]  800 	mov	r0,#(_generation + 0x0002)
      000179 86 06            [24]  801 	mov	ar6,@r0
      00017B 08               [12]  802 	inc	r0
      00017C 86 07            [24]  803 	mov	ar7,@r0
      00017E 0E               [12]  804 	inc	r6
      00017F BE 00 01         [24]  805 	cjne	r6,#0x00,00201$
      000182 0F               [12]  806 	inc	r7
      000183                        807 00201$:
      000183 78r24            [12]  808 	mov	r0,#(_generation + 0x0002)
      000185 A6 06            [24]  809 	mov	@r0,ar6
      000187 08               [12]  810 	inc	r0
      000188 A6 07            [24]  811 	mov	@r0,ar7
                                    812 ;	life.c:121: updategen();
      00018A                        813 00102$:
                                    814 ;	life.c:124: for (x = 0; x < W; x++) {
      00018A 78r13            [12]  815 	mov	r0,#_x
      00018C E4               [12]  816 	clr	a
      00018D F6               [12]  817 	mov	@r0,a
      00018E 08               [12]  818 	inc	r0
      00018F F6               [12]  819 	mov	@r0,a
      000190                        820 00131$:
                                    821 ;	life.c:125: for (y = 0; y < H; y++)
      000190 78r15            [12]  822 	mov	r0,#_y
      000192 E4               [12]  823 	clr	a
      000193 F6               [12]  824 	mov	@r0,a
      000194 08               [12]  825 	inc	r0
      000195 F6               [12]  826 	mov	@r0,a
      000196                        827 00126$:
                                    828 ;	life.c:126: if (u[A2D(W, y, x)]) putchar('1');
      000196 78r15            [12]  829 	mov	r0,#_y
      000198 E6               [12]  830 	mov	a,@r0
      000199 C0 E0            [24]  831 	push	acc
      00019B 08               [12]  832 	inc	r0
      00019C E6               [12]  833 	mov	a,@r0
      00019D C0 E0            [24]  834 	push	acc
      00019F 90 00 30         [24]  835 	mov	dptr,#0x0030
      0001A2 12r00r00         [24]  836 	lcall	__mulint
      0001A5 AE 82            [24]  837 	mov	r6,dpl
      0001A7 AF 83            [24]  838 	mov	r7,dph
      0001A9 15 81            [12]  839 	dec	sp
      0001AB 15 81            [12]  840 	dec	sp
      0001AD 78r13            [12]  841 	mov	r0,#_x
      0001AF E6               [12]  842 	mov	a,@r0
      0001B0 2E               [12]  843 	add	a,r6
      0001B1 FE               [12]  844 	mov	r6,a
      0001B2 08               [12]  845 	inc	r0
      0001B3 E6               [12]  846 	mov	a,@r0
      0001B4 3F               [12]  847 	addc	a,r7
      0001B5 FF               [12]  848 	mov	r7,a
      0001B6 EE               [12]  849 	mov	a,r6
      0001B7 24r00            [12]  850 	add	a,#_u
      0001B9 FE               [12]  851 	mov	r6,a
      0001BA EF               [12]  852 	mov	a,r7
      0001BB 34s48            [12]  853 	addc	a,#(_u >> 8)
      0001BD FF               [12]  854 	mov	r7,a
      0001BE 8E 82            [24]  855 	mov	dpl,r6
      0001C0 8F 83            [24]  856 	mov	dph,r7
      0001C2 E0               [24]  857 	movx	a,@dptr
      0001C3 60 08            [24]  858 	jz	00104$
      0001C5 90 00 31         [24]  859 	mov	dptr,#0x0031
      0001C8 12r00r00         [24]  860 	lcall	_putchar
      0001CB 80 06            [24]  861 	sjmp	00127$
      0001CD                        862 00104$:
                                    863 ;	life.c:127: else putchar('0');
      0001CD 90 00 30         [24]  864 	mov	dptr,#0x0030
      0001D0 12r00r00         [24]  865 	lcall	_putchar
      0001D3                        866 00127$:
                                    867 ;	life.c:125: for (y = 0; y < H; y++)
      0001D3 78r15            [12]  868 	mov	r0,#_y
      0001D5 06               [12]  869 	inc	@r0
      0001D6 B6 00 02         [24]  870 	cjne	@r0,#0x00,00203$
      0001D9 08               [12]  871 	inc	r0
      0001DA 06               [12]  872 	inc	@r0
      0001DB                        873 00203$:
      0001DB 78r15            [12]  874 	mov	r0,#_y
      0001DD C3               [12]  875 	clr	c
      0001DE E6               [12]  876 	mov	a,@r0
      0001DF 94 C0            [12]  877 	subb	a,#0xc0
      0001E1 08               [12]  878 	inc	r0
      0001E2 E6               [12]  879 	mov	a,@r0
      0001E3 64 80            [12]  880 	xrl	a,#0x80
      0001E5 94 80            [12]  881 	subb	a,#0x80
      0001E7 40 AD            [24]  882 	jc	00126$
                                    883 ;	life.c:128: printstr("\r\n");
      0001E9 7Dr0C            [12]  884 	mov	r5,#___str_1
      0001EB 7Es00            [12]  885 	mov	r6,#(___str_1 >> 8)
      0001ED 7F 80            [12]  886 	mov	r7,#0x80
                                    887 ;	life.c:53: return;
      0001EF                        888 00129$:
                                    889 ;	life.c:51: for (; *s; s++) putchar(*s);
      0001EF 8D 82            [24]  890 	mov	dpl,r5
      0001F1 8E 83            [24]  891 	mov	dph,r6
      0001F3 8F F0            [24]  892 	mov	b,r7
      0001F5 12r00r00         [24]  893 	lcall	__gptrget
      0001F8 FC               [12]  894 	mov	r4,a
      0001F9 60 10            [24]  895 	jz	00119$
      0001FB 7B 00            [12]  896 	mov	r3,#0x00
      0001FD 8C 82            [24]  897 	mov	dpl,r4
      0001FF 8B 83            [24]  898 	mov	dph,r3
      000201 12r00r00         [24]  899 	lcall	_putchar
      000204 0D               [12]  900 	inc	r5
                                    901 ;	life.c:128: printstr("\r\n");
      000205 BD 00 E7         [24]  902 	cjne	r5,#0x00,00129$
      000208 0E               [12]  903 	inc	r6
      000209 80 E4            [24]  904 	sjmp	00129$
      00020B                        905 00119$:
                                    906 ;	life.c:124: for (x = 0; x < W; x++) {
      00020B 78r13            [12]  907 	mov	r0,#_x
      00020D 06               [12]  908 	inc	@r0
      00020E B6 00 02         [24]  909 	cjne	@r0,#0x00,00207$
      000211 08               [12]  910 	inc	r0
      000212 06               [12]  911 	inc	@r0
      000213                        912 00207$:
      000213 78r13            [12]  913 	mov	r0,#_x
      000215 C3               [12]  914 	clr	c
      000216 E6               [12]  915 	mov	a,@r0
      000217 94 30            [12]  916 	subb	a,#0x30
      000219 08               [12]  917 	inc	r0
      00021A E6               [12]  918 	mov	a,@r0
      00021B 64 80            [12]  919 	xrl	a,#0x80
      00021D 94 80            [12]  920 	subb	a,#0x80
      00021F 50 03            [24]  921 	jnc	00208$
      000221 02r01r90         [24]  922 	ljmp	00131$
      000224                        923 00208$:
                                    924 ;	life.c:131: return;
                                    925 ;	life.c:132: }
      000224 22               [24]  926 	ret
                                    927 ;------------------------------------------------------------
                                    928 ;Allocation info for local variables in function 'main'
                                    929 ;------------------------------------------------------------
                                    930 ;__2621440023              Allocated to registers 
                                    931 ;s                         Allocated to registers r5 r6 r7 
                                    932 ;__1310720013              Allocated to registers 
                                    933 ;s                         Allocated to registers r5 r6 r7 
                                    934 ;__1310720015              Allocated to registers r6 r7 
                                    935 ;a                         Allocated to registers r4 r5 
                                    936 ;__1310720017              Allocated to registers 
                                    937 ;s                         Allocated to registers r5 r6 r7 
                                    938 ;__1310720019              Allocated to registers 
                                    939 ;s                         Allocated to registers r5 r6 r7 
                                    940 ;__1310720021              Allocated to registers 
                                    941 ;s                         Allocated to registers r5 r6 r7 
                                    942 ;__2621440028              Allocated to registers 
                                    943 ;s                         Allocated to registers r5 r6 r7 
                                    944 ;__4587520032              Allocated to registers 
                                    945 ;s                         Allocated to registers r5 r6 r7 
                                    946 ;__4587520034              Allocated to registers 
                                    947 ;s                         Allocated to registers r5 r6 r7 
                                    948 ;__4587520036              Allocated to registers 
                                    949 ;s                         Allocated to registers r5 r6 r7 
                                    950 ;__3276800038              Allocated to registers 
                                    951 ;s                         Allocated to registers r5 r6 r7 
                                    952 ;__1310720040              Allocated to registers 
                                    953 ;s                         Allocated to registers r5 r6 r7 
                                    954 ;sloc0                     Allocated to stack - _bp +1
                                    955 ;sloc1                     Allocated to stack - _bp +2
                                    956 ;sloc2                     Allocated to stack - _bp +4
                                    957 ;sloc3                     Allocated to stack - _bp +6
                                    958 ;sloc4                     Allocated to stack - _bp +8
                                    959 ;sloc5                     Allocated to stack - _bp +10
                                    960 ;sloc6                     Allocated to stack - _bp +12
                                    961 ;------------------------------------------------------------
                                    962 ;	life.c:243: void main(void) {
                                    963 ;	-----------------------------------------
                                    964 ;	 function main
                                    965 ;	-----------------------------------------
      000225                        966 _main:
      000225 C0*00            [24]  967 	push	_bp
      000227 E5 81            [12]  968 	mov	a,sp
      000229 F5*00            [12]  969 	mov	_bp,a
      00022B 24 0D            [12]  970 	add	a,#0x0d
      00022D F5 81            [12]  971 	mov	sp,a
                                    972 ;	life.c:244: IT0 = 1;
                                    973 ;	assignBit
      00022F D2 88            [12]  974 	setb	_IT0
                                    975 ;	life.c:245: IT1 = 1;
                                    976 ;	assignBit
      000231 D2 8A            [12]  977 	setb	_IT1
                                    978 ;	life.c:246: EX0 = 1;
                                    979 ;	assignBit
      000233 D2 A8            [12]  980 	setb	_EX0
                                    981 ;	life.c:247: EX1 = 1;
                                    982 ;	assignBit
      000235 D2 AA            [12]  983 	setb	_EX1
                                    984 ;	life.c:248: EA = 1;	
                                    985 ;	assignBit
      000237 D2 AF            [12]  986 	setb	_EA
                                    987 ;	life.c:249: P1_7 = 1;
                                    988 ;	assignBit
      000239 D2 97            [12]  989 	setb	_P1_7
                                    990 ;	life.c:251: srand(RND);
      00023B 90 FF FE         [24]  991 	mov	dptr,#_RND
      00023E E0               [24]  992 	movx	a,@dptr
      00023F FE               [12]  993 	mov	r6,a
      000240 A3               [24]  994 	inc	dptr
      000241 E0               [24]  995 	movx	a,@dptr
      000242 FF               [12]  996 	mov	r7,a
      000243 8E 82            [24]  997 	mov	dpl,r6
      000245 8F 83            [24]  998 	mov	dph,r7
      000247 12r00r00         [24]  999 	lcall	_srand
                                   1000 ;	life.c:253: OE76 = OE76_0;
      00024A 78r12            [12] 1001 	mov	r0,#_OE76
      00024C 76 3F            [12] 1002 	mov	@r0,#0x3f
                                   1003 ;	life.c:254: flashOE();
      00024E 12r00r26         [24] 1004 	lcall	_flashOE
                                   1005 ;	life.c:256: for (i0 = 0; !i0; ) {	
      000251 78r10            [12] 1006 	mov	r0,#_i0
      000253 76 00            [12] 1007 	mov	@r0,#0x00
      000255                       1008 00246$:
                                   1009 ;	life.c:257: printstr("\033[2J\033[?25l\033[mLIFE INIT T L R P\r\n");
      000255 7Dr29            [12] 1010 	mov	r5,#___str_5
      000257 7Es00            [12] 1011 	mov	r6,#(___str_5 >> 8)
      000259 7F 80            [12] 1012 	mov	r7,#0x80
                                   1013 ;	life.c:53: return;
      00025B                       1014 00202$:
                                   1015 ;	life.c:51: for (; *s; s++) putchar(*s);
      00025B 8D 82            [24] 1016 	mov	dpl,r5
      00025D 8E 83            [24] 1017 	mov	dph,r6
      00025F 8F F0            [24] 1018 	mov	b,r7
      000261 12r00r00         [24] 1019 	lcall	__gptrget
      000264 FC               [12] 1020 	mov	r4,a
      000265 60 10            [24] 1021 	jz	00110$
      000267 7B 00            [12] 1022 	mov	r3,#0x00
      000269 8C 82            [24] 1023 	mov	dpl,r4
      00026B 8B 83            [24] 1024 	mov	dph,r3
      00026D 12r00r00         [24] 1025 	lcall	_putchar
      000270 0D               [12] 1026 	inc	r5
                                   1027 ;	life.c:258: while (1) {
      000271 BD 00 E7         [24] 1028 	cjne	r5,#0x00,00202$
      000274 0E               [12] 1029 	inc	r6
      000275 80 E4            [24] 1030 	sjmp	00202$
      000277                       1031 00110$:
                                   1032 ;	life.c:259: c = toupper(getchar());
      000277 12r00r05         [24] 1033 	lcall	_getchar
      00027A 12r00r00         [24] 1034 	lcall	_toupper
      00027D AE 82            [24] 1035 	mov	r6,dpl
      00027F AF 83            [24] 1036 	mov	r7,dph
      000281 78r19            [12] 1037 	mov	r0,#_c
      000283 A6 06            [24] 1038 	mov	@r0,ar6
      000285 08               [12] 1039 	inc	r0
      000286 A6 07            [24] 1040 	mov	@r0,ar7
                                   1041 ;	life.c:260: if (i0 || (c == (int)'T')) goto terminate;
      000288 78r10            [12] 1042 	mov	r0,#_i0
      00028A E6               [12] 1043 	mov	a,@r0
      00028B 60 03            [24] 1044 	jz	00516$
      00028D 02r0ArD1         [24] 1045 	ljmp	00142$
      000290                       1046 00516$:
      000290 BE 54 06         [24] 1047 	cjne	r6,#0x54,00517$
      000293 BF 00 03         [24] 1048 	cjne	r7,#0x00,00517$
      000296 02r0ArD1         [24] 1049 	ljmp	00142$
      000299                       1050 00517$:
                                   1051 ;	life.c:261: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      000299 BE 4C 05         [24] 1052 	cjne	r6,#0x4c,00518$
      00029C BF 00 02         [24] 1053 	cjne	r7,#0x00,00518$
      00029F 80 0E            [24] 1054 	sjmp	00291$
      0002A1                       1055 00518$:
      0002A1 BE 52 05         [24] 1056 	cjne	r6,#0x52,00519$
      0002A4 BF 00 02         [24] 1057 	cjne	r7,#0x00,00519$
      0002A7 80 06            [24] 1058 	sjmp	00291$
      0002A9                       1059 00519$:
      0002A9 BE 50 CB         [24] 1060 	cjne	r6,#0x50,00110$
      0002AC BF 00 C8         [24] 1061 	cjne	r7,#0x00,00110$
                                   1062 ;	life.c:264: reload:
      0002AF                       1063 00291$:
      0002AF                       1064 00112$:
                                   1065 ;	life.c:135: memset(u, 0, sizeof (u));
      0002AF E4               [12] 1066 	clr	a
      0002B0 C0 E0            [24] 1067 	push	acc
      0002B2 74 24            [12] 1068 	mov	a,#0x24
      0002B4 C0 E0            [24] 1069 	push	acc
      0002B6 E4               [12] 1070 	clr	a
      0002B7 C0 E0            [24] 1071 	push	acc
      0002B9 90r48r00         [24] 1072 	mov	dptr,#_u
      0002BC 75 F0 00         [24] 1073 	mov	b,#0x00
      0002BF 12r00r00         [24] 1074 	lcall	_memset
      0002C2 15 81            [12] 1075 	dec	sp
      0002C4 15 81            [12] 1076 	dec	sp
      0002C6 15 81            [12] 1077 	dec	sp
                                   1078 ;	life.c:136: memset(pu, 0, sizeof (pu));
      0002C8 E4               [12] 1079 	clr	a
      0002C9 C0 E0            [24] 1080 	push	acc
      0002CB 74 24            [12] 1081 	mov	a,#0x24
      0002CD C0 E0            [24] 1082 	push	acc
      0002CF E4               [12] 1083 	clr	a
      0002D0 C0 E0            [24] 1084 	push	acc
      0002D2 90r24r00         [24] 1085 	mov	dptr,#_pu
      0002D5 75 F0 00         [24] 1086 	mov	b,#0x00
      0002D8 12r00r00         [24] 1087 	lcall	_memset
      0002DB 15 81            [12] 1088 	dec	sp
      0002DD 15 81            [12] 1089 	dec	sp
      0002DF 15 81            [12] 1090 	dec	sp
                                   1091 ;	life.c:266: if (c == (int)'L') loadiu();
      0002E1 78r19            [12] 1092 	mov	r0,#_c
      0002E3 B6 4C 06         [24] 1093 	cjne	@r0,#0x4c,00522$
      0002E6 08               [12] 1094 	inc	r0
      0002E7 B6 00 02         [24] 1095 	cjne	@r0,#0x00,00522$
      0002EA 80 03            [24] 1096 	sjmp	00523$
      0002EC                       1097 00522$:
      0002EC 02r04r79         [24] 1098 	ljmp	00116$
      0002EF                       1099 00523$:
                                   1100 ;	life.c:142: j = 0;
      0002EF 78r17            [12] 1101 	mov	r0,#_j
      0002F1 E4               [12] 1102 	clr	a
      0002F2 F6               [12] 1103 	mov	@r0,a
      0002F3 08               [12] 1104 	inc	r0
      0002F4 F6               [12] 1105 	mov	@r0,a
                                   1106 ;	life.c:144: printstr("LOAD 0 1 ~ # <");
      0002F5 7Dr0F            [12] 1107 	mov	r5,#___str_2
      0002F7 7Es00            [12] 1108 	mov	r6,#(___str_2 >> 8)
      0002F9 7F 80            [12] 1109 	mov	r7,#0x80
                                   1110 ;	life.c:53: return;
      0002FB                       1111 00205$:
                                   1112 ;	life.c:51: for (; *s; s++) putchar(*s);
      0002FB 8D 82            [24] 1113 	mov	dpl,r5
      0002FD 8E 83            [24] 1114 	mov	dph,r6
      0002FF 8F F0            [24] 1115 	mov	b,r7
      000301 12r00r00         [24] 1116 	lcall	__gptrget
      000304 FC               [12] 1117 	mov	r4,a
      000305 60 10            [24] 1118 	jz	00147$
      000307 7B 00            [12] 1119 	mov	r3,#0x00
      000309 8C 82            [24] 1120 	mov	dpl,r4
      00030B 8B 83            [24] 1121 	mov	dph,r3
      00030D 12r00r00         [24] 1122 	lcall	_putchar
      000310 0D               [12] 1123 	inc	r5
                                   1124 ;	life.c:144: printstr("LOAD 0 1 ~ # <");
      000311 BD 00 E7         [24] 1125 	cjne	r5,#0x00,00205$
      000314 0E               [12] 1126 	inc	r6
      000315 80 E4            [24] 1127 	sjmp	00205$
      000317                       1128 00147$:
                                   1129 ;	life.c:146: for (y = 0; y < (H * W); y += W) {
      000317 78r15            [12] 1130 	mov	r0,#_y
      000319 E4               [12] 1131 	clr	a
      00031A F6               [12] 1132 	mov	@r0,a
      00031B 08               [12] 1133 	inc	r0
      00031C F6               [12] 1134 	mov	@r0,a
      00031D                       1135 00208$:
                                   1136 ;	life.c:147: for (x = 0; x < W; x++) {
      00031D 78r13            [12] 1137 	mov	r0,#_x
      00031F E4               [12] 1138 	clr	a
      000320 F6               [12] 1139 	mov	@r0,a
      000321 08               [12] 1140 	inc	r0
      000322 F6               [12] 1141 	mov	@r0,a
                                   1142 ;	life.c:148: while (1) {
      000323                       1143 00160$:
                                   1144 ;	life.c:149: c = getchar();
      000323 12r00r05         [24] 1145 	lcall	_getchar
      000326 AE 82            [24] 1146 	mov	r6,dpl
      000328 AF 83            [24] 1147 	mov	r7,dph
      00032A 78r19            [12] 1148 	mov	r0,#_c
      00032C A6 06            [24] 1149 	mov	@r0,ar6
      00032E 08               [12] 1150 	inc	r0
      00032F A6 07            [24] 1151 	mov	@r0,ar7
                                   1152 ;	life.c:150: if (c == (int)'0') {
      000331 BE 30 25         [24] 1153 	cjne	r6,#0x30,00158$
      000334 BF 00 22         [24] 1154 	cjne	r7,#0x00,00158$
                                   1155 ;	life.c:151: iu[y + x] = 0;
      000337 78r15            [12] 1156 	mov	r0,#_y
      000339 79r13            [12] 1157 	mov	r1,#_x
      00033B E7               [12] 1158 	mov	a,@r1
      00033C 26               [12] 1159 	add	a,@r0
      00033D FC               [12] 1160 	mov	r4,a
      00033E 09               [12] 1161 	inc	r1
      00033F E7               [12] 1162 	mov	a,@r1
      000340 08               [12] 1163 	inc	r0
      000341 36               [12] 1164 	addc	a,@r0
      000342 FD               [12] 1165 	mov	r5,a
      000343 EC               [12] 1166 	mov	a,r4
      000344 24r00            [12] 1167 	add	a,#_iu
      000346 F5 82            [12] 1168 	mov	dpl,a
      000348 ED               [12] 1169 	mov	a,r5
      000349 34s00            [12] 1170 	addc	a,#(_iu >> 8)
      00034B F5 83            [12] 1171 	mov	dph,a
      00034D E4               [12] 1172 	clr	a
      00034E F0               [24] 1173 	movx	@dptr,a
                                   1174 ;	life.c:152: j++;
      00034F 78r17            [12] 1175 	mov	r0,#_j
      000351 06               [12] 1176 	inc	@r0
      000352 B6 00 02         [24] 1177 	cjne	@r0,#0x00,00528$
      000355 08               [12] 1178 	inc	r0
      000356 06               [12] 1179 	inc	@r0
      000357                       1180 00528$:
                                   1181 ;	life.c:153: break;
      000357 80 39            [24] 1182 	sjmp	00163$
      000359                       1183 00158$:
                                   1184 ;	life.c:154: } else if (c == (int)'1') {
      000359 BE 31 26         [24] 1185 	cjne	r6,#0x31,00156$
      00035C BF 00 23         [24] 1186 	cjne	r7,#0x00,00156$
                                   1187 ;	life.c:155: iu[y + x] = 1;
      00035F 78r15            [12] 1188 	mov	r0,#_y
      000361 79r13            [12] 1189 	mov	r1,#_x
      000363 E7               [12] 1190 	mov	a,@r1
      000364 26               [12] 1191 	add	a,@r0
      000365 FC               [12] 1192 	mov	r4,a
      000366 09               [12] 1193 	inc	r1
      000367 E7               [12] 1194 	mov	a,@r1
      000368 08               [12] 1195 	inc	r0
      000369 36               [12] 1196 	addc	a,@r0
      00036A FD               [12] 1197 	mov	r5,a
      00036B EC               [12] 1198 	mov	a,r4
      00036C 24r00            [12] 1199 	add	a,#_iu
      00036E F5 82            [12] 1200 	mov	dpl,a
      000370 ED               [12] 1201 	mov	a,r5
      000371 34s00            [12] 1202 	addc	a,#(_iu >> 8)
      000373 F5 83            [12] 1203 	mov	dph,a
      000375 74 01            [12] 1204 	mov	a,#0x01
      000377 F0               [24] 1205 	movx	@dptr,a
                                   1206 ;	life.c:156: j++;
      000378 78r17            [12] 1207 	mov	r0,#_j
      00037A 06               [12] 1208 	inc	@r0
      00037B B6 00 02         [24] 1209 	cjne	@r0,#0x00,00531$
      00037E 08               [12] 1210 	inc	r0
      00037F 06               [12] 1211 	inc	@r0
      000380                       1212 00531$:
                                   1213 ;	life.c:157: break;
      000380 80 10            [24] 1214 	sjmp	00163$
      000382                       1215 00156$:
                                   1216 ;	life.c:158: } else if (c == (int)'~') goto br_inner;
      000382 BE 7E 05         [24] 1217 	cjne	r6,#0x7e,00532$
      000385 BF 00 02         [24] 1218 	cjne	r7,#0x00,00532$
      000388 80 21            [24] 1219 	sjmp	00209$
      00038A                       1220 00532$:
                                   1221 ;	life.c:159: else if (c == (int)'#') goto out;
                                   1222 ;	life.c:163: break;
      00038A BE 23 96         [24] 1223 	cjne	r6,#0x23,00160$
      00038D BF 00 93         [24] 1224 	cjne	r7,#0x00,00160$
      000390 80 31            [24] 1225 	sjmp	00173$
      000392                       1226 00163$:
                                   1227 ;	life.c:147: for (x = 0; x < W; x++) {
      000392 78r13            [12] 1228 	mov	r0,#_x
      000394 06               [12] 1229 	inc	@r0
      000395 B6 00 02         [24] 1230 	cjne	@r0,#0x00,00534$
      000398 08               [12] 1231 	inc	r0
      000399 06               [12] 1232 	inc	@r0
      00039A                       1233 00534$:
      00039A 78r13            [12] 1234 	mov	r0,#_x
      00039C C3               [12] 1235 	clr	c
      00039D E6               [12] 1236 	mov	a,@r0
      00039E 94 30            [12] 1237 	subb	a,#0x30
      0003A0 08               [12] 1238 	inc	r0
      0003A1 E6               [12] 1239 	mov	a,@r0
      0003A2 64 80            [12] 1240 	xrl	a,#0x80
      0003A4 94 80            [12] 1241 	subb	a,#0x80
      0003A6 50 03            [24] 1242 	jnc	00535$
      0003A8 02r03r23         [24] 1243 	ljmp	00160$
      0003AB                       1244 00535$:
      0003AB                       1245 00209$:
                                   1246 ;	life.c:146: for (y = 0; y < (H * W); y += W) {
      0003AB 78r15            [12] 1247 	mov	r0,#_y
      0003AD 74 30            [12] 1248 	mov	a,#0x30
      0003AF 26               [12] 1249 	add	a,@r0
      0003B0 F6               [12] 1250 	mov	@r0,a
      0003B1 E4               [12] 1251 	clr	a
      0003B2 08               [12] 1252 	inc	r0
      0003B3 36               [12] 1253 	addc	a,@r0
      0003B4 F6               [12] 1254 	mov	@r0,a
      0003B5 78r15            [12] 1255 	mov	r0,#_y
      0003B7 C3               [12] 1256 	clr	c
      0003B8 08               [12] 1257 	inc	r0
      0003B9 E6               [12] 1258 	mov	a,@r0
      0003BA 64 80            [12] 1259 	xrl	a,#0x80
      0003BC 94 A4            [12] 1260 	subb	a,#0xa4
      0003BE 50 03            [24] 1261 	jnc	00536$
      0003C0 02r03r1D         [24] 1262 	ljmp	00208$
      0003C3                       1263 00536$:
                                   1264 ;	life.c:167: out:
      0003C3                       1265 00173$:
                                   1266 ;	life.c:168: if (c != (int)'#')
      0003C3 BE 23 05         [24] 1267 	cjne	r6,#0x23,00537$
      0003C6 BF 00 02         [24] 1268 	cjne	r7,#0x00,00537$
      0003C9 80 14            [24] 1269 	sjmp	00172$
      0003CB                       1270 00537$:
                                   1271 ;	life.c:169: while (1) {
      0003CB                       1272 00169$:
                                   1273 ;	life.c:170: c = getchar();
      0003CB 12r00r05         [24] 1274 	lcall	_getchar
      0003CE AE 82            [24] 1275 	mov	r6,dpl
      0003D0 AF 83            [24] 1276 	mov	r7,dph
      0003D2 78r19            [12] 1277 	mov	r0,#_c
      0003D4 A6 06            [24] 1278 	mov	@r0,ar6
      0003D6 08               [12] 1279 	inc	r0
      0003D7 A6 07            [24] 1280 	mov	@r0,ar7
                                   1281 ;	life.c:171: if (c == (int)'#') break;
      0003D9 BE 23 EF         [24] 1282 	cjne	r6,#0x23,00169$
      0003DC BF 00 EC         [24] 1283 	cjne	r7,#0x00,00169$
      0003DF                       1284 00172$:
                                   1285 ;	life.c:173: print16x(j);
      0003DF 78r17            [12] 1286 	mov	r0,#_j
      0003E1 86 06            [24] 1287 	mov	ar6,@r0
      0003E3 08               [12] 1288 	inc	r0
      0003E4 86 07            [24] 1289 	mov	ar7,@r0
      0003E6 8E 04            [24] 1290 	mov	ar4,r6
                                   1291 ;	life.c:42: putchar(digits[(a >> 12) & 0xf]);
      0003E8 EF               [12] 1292 	mov	a,r7
      0003E9 FD               [12] 1293 	mov	r5,a
      0003EA C4               [12] 1294 	swap	a
      0003EB 54 0F            [12] 1295 	anl	a,#0x0f
      0003ED 30 E3 02         [24] 1296 	jnb	acc.3,00540$
      0003F0 44 F0            [12] 1297 	orl	a,#0xf0
      0003F2                       1298 00540$:
      0003F2 FE               [12] 1299 	mov	r6,a
      0003F3 33               [12] 1300 	rlc	a
      0003F4 95 E0            [12] 1301 	subb	a,acc
      0003F6 53 06 0F         [24] 1302 	anl	ar6,#0x0f
      0003F9 EE               [12] 1303 	mov	a,r6
      0003FA 24r00            [12] 1304 	add	a,#_digits
      0003FC F9               [12] 1305 	mov	r1,a
      0003FD 87 07            [24] 1306 	mov	ar7,@r1
      0003FF 7E 00            [12] 1307 	mov	r6,#0x00
      000401 8F 82            [24] 1308 	mov	dpl,r7
      000403 8E 83            [24] 1309 	mov	dph,r6
      000405 12r00r00         [24] 1310 	lcall	_putchar
                                   1311 ;	life.c:43: putchar(digits[(a >> 8) & 0xf]);
      000408 8D 07            [24] 1312 	mov	ar7,r5
      00040A 53 07 0F         [24] 1313 	anl	ar7,#0x0f
      00040D EF               [12] 1314 	mov	a,r7
      00040E 24r00            [12] 1315 	add	a,#_digits
      000410 F9               [12] 1316 	mov	r1,a
      000411 87 07            [24] 1317 	mov	ar7,@r1
      000413 7E 00            [12] 1318 	mov	r6,#0x00
      000415 8F 82            [24] 1319 	mov	dpl,r7
      000417 8E 83            [24] 1320 	mov	dph,r6
      000419 12r00r00         [24] 1321 	lcall	_putchar
                                   1322 ;	life.c:44: putchar(digits[(a >> 4) & 0xf]);
      00041C 8C 06            [24] 1323 	mov	ar6,r4
      00041E ED               [12] 1324 	mov	a,r5
      00041F C4               [12] 1325 	swap	a
      000420 CE               [12] 1326 	xch	a,r6
      000421 C4               [12] 1327 	swap	a
      000422 54 0F            [12] 1328 	anl	a,#0x0f
      000424 6E               [12] 1329 	xrl	a,r6
      000425 CE               [12] 1330 	xch	a,r6
      000426 54 0F            [12] 1331 	anl	a,#0x0f
      000428 CE               [12] 1332 	xch	a,r6
      000429 6E               [12] 1333 	xrl	a,r6
      00042A CE               [12] 1334 	xch	a,r6
      00042B 30 E3 02         [24] 1335 	jnb	acc.3,00541$
      00042E 44 F0            [12] 1336 	orl	a,#0xf0
      000430                       1337 00541$:
      000430 53 06 0F         [24] 1338 	anl	ar6,#0x0f
      000433 EE               [12] 1339 	mov	a,r6
      000434 24r00            [12] 1340 	add	a,#_digits
      000436 F9               [12] 1341 	mov	r1,a
      000437 87 07            [24] 1342 	mov	ar7,@r1
      000439 7E 00            [12] 1343 	mov	r6,#0x00
      00043B 8F 82            [24] 1344 	mov	dpl,r7
      00043D 8E 83            [24] 1345 	mov	dph,r6
      00043F 12r00r00         [24] 1346 	lcall	_putchar
                                   1347 ;	life.c:45: putchar(digits[a & 0xf]);
      000442 53 04 0F         [24] 1348 	anl	ar4,#0x0f
      000445 EC               [12] 1349 	mov	a,r4
      000446 24r00            [12] 1350 	add	a,#_digits
      000448 F9               [12] 1351 	mov	r1,a
      000449 87 07            [24] 1352 	mov	ar7,@r1
      00044B 7E 00            [12] 1353 	mov	r6,#0x00
      00044D 8F 82            [24] 1354 	mov	dpl,r7
      00044F 8E 83            [24] 1355 	mov	dph,r6
      000451 12r00r00         [24] 1356 	lcall	_putchar
                                   1357 ;	life.c:174: printstr(">\r\n");
      000454 7Dr1E            [12] 1358 	mov	r5,#___str_3
      000456 7Es00            [12] 1359 	mov	r6,#(___str_3 >> 8)
      000458 7F 80            [12] 1360 	mov	r7,#0x80
                                   1361 ;	life.c:53: return;
      00045A                       1362 00211$:
                                   1363 ;	life.c:51: for (; *s; s++) putchar(*s);
      00045A 8D 82            [24] 1364 	mov	dpl,r5
      00045C 8E 83            [24] 1365 	mov	dph,r6
      00045E 8F F0            [24] 1366 	mov	b,r7
      000460 12r00r00         [24] 1367 	lcall	__gptrget
      000463 FC               [12] 1368 	mov	r4,a
      000464 70 03            [24] 1369 	jnz	00542$
      000466 02r05r32         [24] 1370 	ljmp	00117$
      000469                       1371 00542$:
      000469 7B 00            [12] 1372 	mov	r3,#0x00
      00046B 8C 82            [24] 1373 	mov	dpl,r4
      00046D 8B 83            [24] 1374 	mov	dph,r3
      00046F 12r00r00         [24] 1375 	lcall	_putchar
      000472 0D               [12] 1376 	inc	r5
                                   1377 ;	life.c:266: if (c == (int)'L') loadiu();
      000473 BD 00 E4         [24] 1378 	cjne	r5,#0x00,00211$
      000476 0E               [12] 1379 	inc	r6
      000477 80 E1            [24] 1380 	sjmp	00211$
      000479                       1381 00116$:
                                   1382 ;	life.c:267: else if (c == (int)'R') loadriu();
      000479 78r19            [12] 1383 	mov	r0,#_c
      00047B B6 52 06         [24] 1384 	cjne	@r0,#0x52,00544$
      00047E 08               [12] 1385 	inc	r0
      00047F B6 00 02         [24] 1386 	cjne	@r0,#0x00,00544$
      000482 80 03            [24] 1387 	sjmp	00545$
      000484                       1388 00544$:
      000484 02r05r32         [24] 1389 	ljmp	00117$
      000487                       1390 00545$:
                                   1391 ;	life.c:180: j = 0;
      000487 78r17            [12] 1392 	mov	r0,#_j
      000489 E4               [12] 1393 	clr	a
      00048A F6               [12] 1394 	mov	@r0,a
      00048B 08               [12] 1395 	inc	r0
      00048C F6               [12] 1396 	mov	@r0,a
                                   1397 ;	life.c:182: printstr("RANDOM");
      00048D 7Dr22            [12] 1398 	mov	r5,#___str_4
      00048F 7Es00            [12] 1399 	mov	r6,#(___str_4 >> 8)
      000491 7F 80            [12] 1400 	mov	r7,#0x80
                                   1401 ;	life.c:53: return;
      000493                       1402 00214$:
                                   1403 ;	life.c:51: for (; *s; s++) putchar(*s);
      000493 8D 82            [24] 1404 	mov	dpl,r5
      000495 8E 83            [24] 1405 	mov	dph,r6
      000497 8F F0            [24] 1406 	mov	b,r7
      000499 12r00r00         [24] 1407 	lcall	__gptrget
      00049C FC               [12] 1408 	mov	r4,a
      00049D 60 10            [24] 1409 	jz	00179$
      00049F 7B 00            [12] 1410 	mov	r3,#0x00
      0004A1 8C 82            [24] 1411 	mov	dpl,r4
      0004A3 8B 83            [24] 1412 	mov	dph,r3
      0004A5 12r00r00         [24] 1413 	lcall	_putchar
      0004A8 0D               [12] 1414 	inc	r5
                                   1415 ;	life.c:182: printstr("RANDOM");
      0004A9 BD 00 E7         [24] 1416 	cjne	r5,#0x00,00214$
      0004AC 0E               [12] 1417 	inc	r6
      0004AD 80 E4            [24] 1418 	sjmp	00214$
      0004AF                       1419 00179$:
                                   1420 ;	life.c:184: for (y = 0; y < (H * W); y += W)
      0004AF 78r15            [12] 1421 	mov	r0,#_y
      0004B1 E4               [12] 1422 	clr	a
      0004B2 F6               [12] 1423 	mov	@r0,a
      0004B3 08               [12] 1424 	inc	r0
      0004B4 F6               [12] 1425 	mov	@r0,a
      0004B5                       1426 00218$:
                                   1427 ;	life.c:185: for (x = 0; x < W; x++)
      0004B5 78r13            [12] 1428 	mov	r0,#_x
      0004B7 E4               [12] 1429 	clr	a
      0004B8 F6               [12] 1430 	mov	@r0,a
      0004B9 08               [12] 1431 	inc	r0
      0004BA F6               [12] 1432 	mov	@r0,a
      0004BB                       1433 00216$:
                                   1434 ;	life.c:186: iu[y + x] = rand() & 1;
      0004BB 78r15            [12] 1435 	mov	r0,#_y
      0004BD 79r13            [12] 1436 	mov	r1,#_x
      0004BF E7               [12] 1437 	mov	a,@r1
      0004C0 26               [12] 1438 	add	a,@r0
      0004C1 FE               [12] 1439 	mov	r6,a
      0004C2 09               [12] 1440 	inc	r1
      0004C3 E7               [12] 1441 	mov	a,@r1
      0004C4 08               [12] 1442 	inc	r0
      0004C5 36               [12] 1443 	addc	a,@r0
      0004C6 FF               [12] 1444 	mov	r7,a
      0004C7 EE               [12] 1445 	mov	a,r6
      0004C8 24r00            [12] 1446 	add	a,#_iu
      0004CA FE               [12] 1447 	mov	r6,a
      0004CB EF               [12] 1448 	mov	a,r7
      0004CC 34s00            [12] 1449 	addc	a,#(_iu >> 8)
      0004CE FF               [12] 1450 	mov	r7,a
      0004CF C0 07            [24] 1451 	push	ar7
      0004D1 C0 06            [24] 1452 	push	ar6
      0004D3 12r00r00         [24] 1453 	lcall	_rand
      0004D6 AC 82            [24] 1454 	mov	r4,dpl
      0004D8 D0 06            [24] 1455 	pop	ar6
      0004DA D0 07            [24] 1456 	pop	ar7
      0004DC 53 04 01         [24] 1457 	anl	ar4,#0x01
      0004DF 8E 82            [24] 1458 	mov	dpl,r6
      0004E1 8F 83            [24] 1459 	mov	dph,r7
      0004E3 EC               [12] 1460 	mov	a,r4
      0004E4 F0               [24] 1461 	movx	@dptr,a
                                   1462 ;	life.c:185: for (x = 0; x < W; x++)
      0004E5 78r13            [12] 1463 	mov	r0,#_x
      0004E7 06               [12] 1464 	inc	@r0
      0004E8 B6 00 02         [24] 1465 	cjne	@r0,#0x00,00548$
      0004EB 08               [12] 1466 	inc	r0
      0004EC 06               [12] 1467 	inc	@r0
      0004ED                       1468 00548$:
      0004ED 78r13            [12] 1469 	mov	r0,#_x
      0004EF C3               [12] 1470 	clr	c
      0004F0 E6               [12] 1471 	mov	a,@r0
      0004F1 94 30            [12] 1472 	subb	a,#0x30
      0004F3 08               [12] 1473 	inc	r0
      0004F4 E6               [12] 1474 	mov	a,@r0
      0004F5 64 80            [12] 1475 	xrl	a,#0x80
      0004F7 94 80            [12] 1476 	subb	a,#0x80
      0004F9 40 C0            [24] 1477 	jc	00216$
                                   1478 ;	life.c:184: for (y = 0; y < (H * W); y += W)
      0004FB 78r15            [12] 1479 	mov	r0,#_y
      0004FD 74 30            [12] 1480 	mov	a,#0x30
      0004FF 26               [12] 1481 	add	a,@r0
      000500 F6               [12] 1482 	mov	@r0,a
      000501 E4               [12] 1483 	clr	a
      000502 08               [12] 1484 	inc	r0
      000503 36               [12] 1485 	addc	a,@r0
      000504 F6               [12] 1486 	mov	@r0,a
      000505 78r15            [12] 1487 	mov	r0,#_y
      000507 C3               [12] 1488 	clr	c
      000508 08               [12] 1489 	inc	r0
      000509 E6               [12] 1490 	mov	a,@r0
      00050A 64 80            [12] 1491 	xrl	a,#0x80
      00050C 94 A4            [12] 1492 	subb	a,#0xa4
      00050E 40 A5            [24] 1493 	jc	00218$
                                   1494 ;	life.c:188: printstr("\r\n");
      000510 7Dr0C            [12] 1495 	mov	r5,#___str_1
      000512 7Es00            [12] 1496 	mov	r6,#(___str_1 >> 8)
      000514 7F 80            [12] 1497 	mov	r7,#0x80
                                   1498 ;	life.c:53: return;
      000516                       1499 00221$:
                                   1500 ;	life.c:51: for (; *s; s++) putchar(*s);
      000516 8D 82            [24] 1501 	mov	dpl,r5
      000518 8E 83            [24] 1502 	mov	dph,r6
      00051A 8F F0            [24] 1503 	mov	b,r7
      00051C 12r00r00         [24] 1504 	lcall	__gptrget
      00051F FC               [12] 1505 	mov	r4,a
      000520 60 10            [24] 1506 	jz	00117$
      000522 7B 00            [12] 1507 	mov	r3,#0x00
      000524 8C 82            [24] 1508 	mov	dpl,r4
      000526 8B 83            [24] 1509 	mov	dph,r3
      000528 12r00r00         [24] 1510 	lcall	_putchar
      00052B 0D               [12] 1511 	inc	r5
                                   1512 ;	life.c:267: else if (c == (int)'R') loadriu();
      00052C BD 00 E7         [24] 1513 	cjne	r5,#0x00,00221$
      00052F 0E               [12] 1514 	inc	r6
      000530 80 E4            [24] 1515 	sjmp	00221$
      000532                       1516 00117$:
                                   1517 ;	life.c:268: memcpy(u, iu, sizeof (iu));
      000532 E4               [12] 1518 	clr	a
      000533 C0 E0            [24] 1519 	push	acc
      000535 74 24            [12] 1520 	mov	a,#0x24
      000537 C0 E0            [24] 1521 	push	acc
      000539 74r00            [12] 1522 	mov	a,#_iu
      00053B C0 E0            [24] 1523 	push	acc
      00053D 74s00            [12] 1524 	mov	a,#(_iu >> 8)
      00053F C0 E0            [24] 1525 	push	acc
      000541 E4               [12] 1526 	clr	a
      000542 C0 E0            [24] 1527 	push	acc
      000544 90r48r00         [24] 1528 	mov	dptr,#_u
      000547 75 F0 00         [24] 1529 	mov	b,#0x00
      00054A 12r00r00         [24] 1530 	lcall	___memcpy
      00054D E5 81            [12] 1531 	mov	a,sp
      00054F 24 FB            [12] 1532 	add	a,#0xfb
      000551 F5 81            [12] 1533 	mov	sp,a
                                   1534 ;	life.c:269: show(0);
      000553 75 82 00         [24] 1535 	mov	dpl,#0x00
      000556 12r00r32         [24] 1536 	lcall	_show
                                   1537 ;	life.c:271: printstr("READY T L R P S\r\n");
      000559 7Dr4A            [12] 1538 	mov	r5,#___str_6
      00055B 7Es00            [12] 1539 	mov	r6,#(___str_6 >> 8)
      00055D 7F 80            [12] 1540 	mov	r7,#0x80
                                   1541 ;	life.c:53: return;
      00055F                       1542 00224$:
                                   1543 ;	life.c:51: for (; *s; s++) putchar(*s);
      00055F 8D 82            [24] 1544 	mov	dpl,r5
      000561 8E 83            [24] 1545 	mov	dph,r6
      000563 8F F0            [24] 1546 	mov	b,r7
      000565 12r00r00         [24] 1547 	lcall	__gptrget
      000568 FC               [12] 1548 	mov	r4,a
      000569 60 10            [24] 1549 	jz	00130$
      00056B 7B 00            [12] 1550 	mov	r3,#0x00
      00056D 8C 82            [24] 1551 	mov	dpl,r4
      00056F 8B 83            [24] 1552 	mov	dph,r3
      000571 12r00r00         [24] 1553 	lcall	_putchar
      000574 0D               [12] 1554 	inc	r5
                                   1555 ;	life.c:272: while (1) {
      000575 BD 00 E7         [24] 1556 	cjne	r5,#0x00,00224$
      000578 0E               [12] 1557 	inc	r6
      000579 80 E4            [24] 1558 	sjmp	00224$
      00057B                       1559 00130$:
                                   1560 ;	life.c:273: c = toupper(getchar());
      00057B 12r00r05         [24] 1561 	lcall	_getchar
      00057E 12r00r00         [24] 1562 	lcall	_toupper
      000581 AE 82            [24] 1563 	mov	r6,dpl
      000583 AF 83            [24] 1564 	mov	r7,dph
      000585 78r19            [12] 1565 	mov	r0,#_c
      000587 A6 06            [24] 1566 	mov	@r0,ar6
      000589 08               [12] 1567 	inc	r0
      00058A A6 07            [24] 1568 	mov	@r0,ar7
                                   1569 ;	life.c:274: if (i0 || (c == (int)'T')) goto terminate;
      00058C 78r10            [12] 1570 	mov	r0,#_i0
      00058E E6               [12] 1571 	mov	a,@r0
      00058F 60 03            [24] 1572 	jz	00555$
      000591 02r0ArD1         [24] 1573 	ljmp	00142$
      000594                       1574 00555$:
      000594 BE 54 06         [24] 1575 	cjne	r6,#0x54,00556$
      000597 BF 00 03         [24] 1576 	cjne	r7,#0x00,00556$
      00059A 02r0ArD1         [24] 1577 	ljmp	00142$
      00059D                       1578 00556$:
                                   1579 ;	life.c:275: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      00059D BE 4C 06         [24] 1580 	cjne	r6,#0x4c,00557$
      0005A0 BF 00 03         [24] 1581 	cjne	r7,#0x00,00557$
      0005A3 02r02rAF         [24] 1582 	ljmp	00112$
      0005A6                       1583 00557$:
      0005A6 BE 52 06         [24] 1584 	cjne	r6,#0x52,00558$
      0005A9 BF 00 03         [24] 1585 	cjne	r7,#0x00,00558$
      0005AC 02r02rAF         [24] 1586 	ljmp	00112$
      0005AF                       1587 00558$:
      0005AF BE 50 06         [24] 1588 	cjne	r6,#0x50,00559$
      0005B2 BF 00 03         [24] 1589 	cjne	r7,#0x00,00559$
      0005B5 02r02rAF         [24] 1590 	ljmp	00112$
      0005B8                       1591 00559$:
                                   1592 ;	life.c:276: else if (c == (int)'S') break;
      0005B8 BE 53 C0         [24] 1593 	cjne	r6,#0x53,00130$
      0005BB BF 00 BD         [24] 1594 	cjne	r7,#0x00,00130$
                                   1595 ;	life.c:96: generation[0] = 0;
      0005BE 78r22            [12] 1596 	mov	r0,#_generation
      0005C0 76 00            [12] 1597 	mov	@r0,#0x00
      0005C2 08               [12] 1598 	inc	r0
      0005C3 76 00            [12] 1599 	mov	@r0,#0x00
                                   1600 ;	life.c:97: generation[1] = 0;
      0005C5 78r24            [12] 1601 	mov	r0,#(_generation + 0x0002)
      0005C7 76 00            [12] 1602 	mov	@r0,#0x00
      0005C9 08               [12] 1603 	inc	r0
      0005CA 76 00            [12] 1604 	mov	@r0,#0x00
                                   1605 ;	life.c:281: for (i1 = 0; !i0 && !i1; ) {
      0005CC 78r11            [12] 1606 	mov	r0,#_i1
      0005CE 76 00            [12] 1607 	mov	@r0,#0x00
      0005D0                       1608 00241$:
      0005D0 78r10            [12] 1609 	mov	r0,#_i0
      0005D2 E6               [12] 1610 	mov	a,@r0
      0005D3 60 03            [24] 1611 	jz	00562$
      0005D5 02r0Ar9F         [24] 1612 	ljmp	00138$
      0005D8                       1613 00562$:
      0005D8 78r11            [12] 1614 	mov	r0,#_i1
      0005DA E6               [12] 1615 	mov	a,@r0
      0005DB 60 03            [24] 1616 	jz	00563$
      0005DD 02r0Ar9F         [24] 1617 	ljmp	00138$
      0005E0                       1618 00563$:
                                   1619 ;	life.c:282: show(1);
      0005E0 75 82 01         [24] 1620 	mov	dpl,#0x01
      0005E3 12r00r32         [24] 1621 	lcall	_show
                                   1622 ;	life.c:194: fixed = 0;
      0005E6 78r1C            [12] 1623 	mov	r0,#_fixed
      0005E8 76 00            [12] 1624 	mov	@r0,#0x00
                                   1625 ;	life.c:195: cycle2 = 0;
      0005EA 78r1D            [12] 1626 	mov	r0,#_cycle2
      0005EC 76 00            [12] 1627 	mov	@r0,#0x00
                                   1628 ;	life.c:197: OE76 = OE76_0;
      0005EE 78r12            [12] 1629 	mov	r0,#_OE76
      0005F0 76 3F            [12] 1630 	mov	@r0,#0x3f
                                   1631 ;	life.c:198: flashOE();
      0005F2 12r00r26         [24] 1632 	lcall	_flashOE
                                   1633 ;	life.c:200: for (y = 0; y < H; y++) {
      0005F5 78r15            [12] 1634 	mov	r0,#_y
      0005F7 E4               [12] 1635 	clr	a
      0005F8 F6               [12] 1636 	mov	@r0,a
      0005F9 08               [12] 1637 	inc	r0
      0005FA F6               [12] 1638 	mov	@r0,a
      0005FB                       1639 00228$:
                                   1640 ;	life.c:201: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      0005FB 78r15            [12] 1641 	mov	r0,#_y
      0005FD 86 07            [24] 1642 	mov	ar7,@r0
      0005FF 53 07 03         [24] 1643 	anl	ar7,#0x03
      000602 EF               [12] 1644 	mov	a,r7
      000603 03               [12] 1645 	rr	a
      000604 03               [12] 1646 	rr	a
      000605 54 C0            [12] 1647 	anl	a,#0xc0
      000607 FF               [12] 1648 	mov	r7,a
      000608 78r12            [12] 1649 	mov	r0,#_OE76
      00060A 74 3F            [12] 1650 	mov	a,#0x3f
      00060C 4F               [12] 1651 	orl	a,r7
      00060D F6               [12] 1652 	mov	@r0,a
                                   1653 ;	life.c:202: flashOE();
      00060E 12r00r26         [24] 1654 	lcall	_flashOE
                                   1655 ;	life.c:203: for (x = 0; x < W; x++) {
      000611 78r13            [12] 1656 	mov	r0,#_x
      000613 E4               [12] 1657 	clr	a
      000614 F6               [12] 1658 	mov	@r0,a
      000615 08               [12] 1659 	inc	r0
      000616 F6               [12] 1660 	mov	@r0,a
      000617                       1661 00226$:
                                   1662 ;	life.c:204: n = -u[A2D(W, y, x)];
      000617 78r15            [12] 1663 	mov	r0,#_y
      000619 E6               [12] 1664 	mov	a,@r0
      00061A C0 E0            [24] 1665 	push	acc
      00061C 08               [12] 1666 	inc	r0
      00061D E6               [12] 1667 	mov	a,@r0
      00061E C0 E0            [24] 1668 	push	acc
      000620 90 00 30         [24] 1669 	mov	dptr,#0x0030
      000623 12r00r00         [24] 1670 	lcall	__mulint
      000626 C8               [12] 1671 	xch	a,r0
      000627 E5*00            [12] 1672 	mov	a,_bp
      000629 24 04            [12] 1673 	add	a,#0x04
      00062B C8               [12] 1674 	xch	a,r0
      00062C A6 82            [24] 1675 	mov	@r0,dpl
      00062E 08               [12] 1676 	inc	r0
      00062F A6 83            [24] 1677 	mov	@r0,dph
      000631 15 81            [12] 1678 	dec	sp
      000633 15 81            [12] 1679 	dec	sp
      000635 E5*00            [12] 1680 	mov	a,_bp
      000637 24 04            [12] 1681 	add	a,#0x04
      000639 F8               [12] 1682 	mov	r0,a
      00063A 79r13            [12] 1683 	mov	r1,#_x
      00063C E7               [12] 1684 	mov	a,@r1
      00063D 26               [12] 1685 	add	a,@r0
      00063E C0 E0            [24] 1686 	push	acc
      000640 09               [12] 1687 	inc	r1
      000641 E7               [12] 1688 	mov	a,@r1
      000642 08               [12] 1689 	inc	r0
      000643 36               [12] 1690 	addc	a,@r0
      000644 C0 E0            [24] 1691 	push	acc
      000646 E5*00            [12] 1692 	mov	a,_bp
      000648 24 03            [12] 1693 	add	a,#0x03
      00064A F8               [12] 1694 	mov	r0,a
      00064B D0 E0            [24] 1695 	pop	acc
      00064D F6               [12] 1696 	mov	@r0,a
      00064E 18               [12] 1697 	dec	r0
      00064F D0 E0            [24] 1698 	pop	acc
      000651 F6               [12] 1699 	mov	@r0,a
      000652 A8*00            [24] 1700 	mov	r0,_bp
      000654 08               [12] 1701 	inc	r0
      000655 08               [12] 1702 	inc	r0
      000656 E6               [12] 1703 	mov	a,@r0
      000657 24r00            [12] 1704 	add	a,#_u
      000659 F5 82            [12] 1705 	mov	dpl,a
      00065B 08               [12] 1706 	inc	r0
      00065C E6               [12] 1707 	mov	a,@r0
      00065D 34s48            [12] 1708 	addc	a,#(_u >> 8)
      00065F F5 83            [12] 1709 	mov	dph,a
      000661 E0               [24] 1710 	movx	a,@dptr
      000662 FB               [12] 1711 	mov	r3,a
      000663 A8*00            [24] 1712 	mov	r0,_bp
      000665 08               [12] 1713 	inc	r0
      000666 C3               [12] 1714 	clr	c
      000667 E4               [12] 1715 	clr	a
      000668 9B               [12] 1716 	subb	a,r3
      000669 F6               [12] 1717 	mov	@r0,a
                                   1718 ;	life.c:207: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00066A 78r15            [12] 1719 	mov	r0,#_y
      00066C 74 FF            [12] 1720 	mov	a,#0xff
      00066E 26               [12] 1721 	add	a,@r0
      00066F FA               [12] 1722 	mov	r2,a
      000670 74 FF            [12] 1723 	mov	a,#0xff
      000672 08               [12] 1724 	inc	r0
      000673 36               [12] 1725 	addc	a,@r0
      000674 FB               [12] 1726 	mov	r3,a
      000675 74 C0            [12] 1727 	mov	a,#0xc0
      000677 2A               [12] 1728 	add	a,r2
      000678 FA               [12] 1729 	mov	r2,a
      000679 E4               [12] 1730 	clr	a
      00067A 3B               [12] 1731 	addc	a,r3
      00067B FB               [12] 1732 	mov	r3,a
      00067C 74 C0            [12] 1733 	mov	a,#0xc0
      00067E C0 E0            [24] 1734 	push	acc
      000680 E4               [12] 1735 	clr	a
      000681 C0 E0            [24] 1736 	push	acc
      000683 8A 82            [24] 1737 	mov	dpl,r2
      000685 8B 83            [24] 1738 	mov	dph,r3
      000687 12r00r00         [24] 1739 	lcall	__modsint
      00068A AA 82            [24] 1740 	mov	r2,dpl
      00068C AB 83            [24] 1741 	mov	r3,dph
      00068E 15 81            [12] 1742 	dec	sp
      000690 15 81            [12] 1743 	dec	sp
      000692 C0 02            [24] 1744 	push	ar2
      000694 C0 03            [24] 1745 	push	ar3
      000696 90 00 30         [24] 1746 	mov	dptr,#0x0030
      000699 12r00r00         [24] 1747 	lcall	__mulint
      00069C AA 82            [24] 1748 	mov	r2,dpl
      00069E AB 83            [24] 1749 	mov	r3,dph
      0006A0 15 81            [12] 1750 	dec	sp
      0006A2 15 81            [12] 1751 	dec	sp
      0006A4 78r13            [12] 1752 	mov	r0,#_x
      0006A6 74 FF            [12] 1753 	mov	a,#0xff
      0006A8 26               [12] 1754 	add	a,@r0
      0006A9 FC               [12] 1755 	mov	r4,a
      0006AA 74 FF            [12] 1756 	mov	a,#0xff
      0006AC 08               [12] 1757 	inc	r0
      0006AD 36               [12] 1758 	addc	a,@r0
      0006AE FD               [12] 1759 	mov	r5,a
      0006AF 74 30            [12] 1760 	mov	a,#0x30
      0006B1 2C               [12] 1761 	add	a,r4
      0006B2 FC               [12] 1762 	mov	r4,a
      0006B3 E4               [12] 1763 	clr	a
      0006B4 3D               [12] 1764 	addc	a,r5
      0006B5 FD               [12] 1765 	mov	r5,a
      0006B6 C0 03            [24] 1766 	push	ar3
      0006B8 C0 02            [24] 1767 	push	ar2
      0006BA 74 30            [12] 1768 	mov	a,#0x30
      0006BC C0 E0            [24] 1769 	push	acc
      0006BE E4               [12] 1770 	clr	a
      0006BF C0 E0            [24] 1771 	push	acc
      0006C1 8C 82            [24] 1772 	mov	dpl,r4
      0006C3 8D 83            [24] 1773 	mov	dph,r5
      0006C5 12r00r00         [24] 1774 	lcall	__modsint
      0006C8 AC 82            [24] 1775 	mov	r4,dpl
      0006CA AD 83            [24] 1776 	mov	r5,dph
      0006CC 15 81            [12] 1777 	dec	sp
      0006CE 15 81            [12] 1778 	dec	sp
      0006D0 D0 02            [24] 1779 	pop	ar2
      0006D2 D0 03            [24] 1780 	pop	ar3
      0006D4 EC               [12] 1781 	mov	a,r4
      0006D5 2A               [12] 1782 	add	a,r2
      0006D6 FE               [12] 1783 	mov	r6,a
      0006D7 ED               [12] 1784 	mov	a,r5
      0006D8 3B               [12] 1785 	addc	a,r3
      0006D9 FF               [12] 1786 	mov	r7,a
      0006DA EE               [12] 1787 	mov	a,r6
      0006DB 24r00            [12] 1788 	add	a,#_u
      0006DD F5 82            [12] 1789 	mov	dpl,a
      0006DF EF               [12] 1790 	mov	a,r7
      0006E0 34s48            [12] 1791 	addc	a,#(_u >> 8)
      0006E2 F5 83            [12] 1792 	mov	dph,a
      0006E4 E0               [24] 1793 	movx	a,@dptr
      0006E5 FF               [12] 1794 	mov	r7,a
      0006E6 A8*00            [24] 1795 	mov	r0,_bp
      0006E8 08               [12] 1796 	inc	r0
      0006E9 EF               [12] 1797 	mov	a,r7
      0006EA 26               [12] 1798 	add	a,@r0
      0006EB F6               [12] 1799 	mov	@r0,a
                                   1800 ;	life.c:209: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006EC 78r13            [12] 1801 	mov	r0,#_x
      0006EE E5*00            [12] 1802 	mov	a,_bp
      0006F0 24 06            [12] 1803 	add	a,#0x06
      0006F2 F9               [12] 1804 	mov	r1,a
      0006F3 E6               [12] 1805 	mov	a,@r0
      0006F4 F7               [12] 1806 	mov	@r1,a
      0006F5 08               [12] 1807 	inc	r0
      0006F6 09               [12] 1808 	inc	r1
      0006F7 E6               [12] 1809 	mov	a,@r0
      0006F8 F7               [12] 1810 	mov	@r1,a
      0006F9 E5*00            [12] 1811 	mov	a,_bp
      0006FB 24 06            [12] 1812 	add	a,#0x06
      0006FD F8               [12] 1813 	mov	r0,a
      0006FE 74 30            [12] 1814 	mov	a,#0x30
      000700 26               [12] 1815 	add	a,@r0
      000701 FE               [12] 1816 	mov	r6,a
      000702 E4               [12] 1817 	clr	a
      000703 08               [12] 1818 	inc	r0
      000704 36               [12] 1819 	addc	a,@r0
      000705 FF               [12] 1820 	mov	r7,a
      000706 C0 05            [24] 1821 	push	ar5
      000708 C0 04            [24] 1822 	push	ar4
      00070A C0 03            [24] 1823 	push	ar3
      00070C C0 02            [24] 1824 	push	ar2
      00070E 74 30            [12] 1825 	mov	a,#0x30
      000710 C0 E0            [24] 1826 	push	acc
      000712 E4               [12] 1827 	clr	a
      000713 C0 E0            [24] 1828 	push	acc
      000715 8E 82            [24] 1829 	mov	dpl,r6
      000717 8F 83            [24] 1830 	mov	dph,r7
      000719 12r00r00         [24] 1831 	lcall	__modsint
      00071C C8               [12] 1832 	xch	a,r0
      00071D E5*00            [12] 1833 	mov	a,_bp
      00071F 24 08            [12] 1834 	add	a,#0x08
      000721 C8               [12] 1835 	xch	a,r0
      000722 A6 82            [24] 1836 	mov	@r0,dpl
      000724 08               [12] 1837 	inc	r0
      000725 A6 83            [24] 1838 	mov	@r0,dph
      000727 15 81            [12] 1839 	dec	sp
      000729 15 81            [12] 1840 	dec	sp
      00072B D0 02            [24] 1841 	pop	ar2
      00072D D0 03            [24] 1842 	pop	ar3
      00072F E5*00            [12] 1843 	mov	a,_bp
      000731 24 08            [12] 1844 	add	a,#0x08
      000733 F8               [12] 1845 	mov	r0,a
      000734 E6               [12] 1846 	mov	a,@r0
      000735 2A               [12] 1847 	add	a,r2
      000736 FE               [12] 1848 	mov	r6,a
      000737 08               [12] 1849 	inc	r0
      000738 E6               [12] 1850 	mov	a,@r0
      000739 3B               [12] 1851 	addc	a,r3
      00073A FF               [12] 1852 	mov	r7,a
      00073B EE               [12] 1853 	mov	a,r6
      00073C 24r00            [12] 1854 	add	a,#_u
      00073E F5 82            [12] 1855 	mov	dpl,a
      000740 EF               [12] 1856 	mov	a,r7
      000741 34s48            [12] 1857 	addc	a,#(_u >> 8)
      000743 F5 83            [12] 1858 	mov	dph,a
      000745 E0               [24] 1859 	movx	a,@dptr
      000746 FF               [12] 1860 	mov	r7,a
      000747 A8*00            [24] 1861 	mov	r0,_bp
      000749 08               [12] 1862 	inc	r0
      00074A EF               [12] 1863 	mov	a,r7
      00074B 26               [12] 1864 	add	a,@r0
      00074C F6               [12] 1865 	mov	@r0,a
                                   1866 ;	life.c:211: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00074D E5*00            [12] 1867 	mov	a,_bp
      00074F 24 06            [12] 1868 	add	a,#0x06
      000751 F8               [12] 1869 	mov	r0,a
      000752 74 31            [12] 1870 	mov	a,#0x31
      000754 26               [12] 1871 	add	a,@r0
      000755 FE               [12] 1872 	mov	r6,a
      000756 E4               [12] 1873 	clr	a
      000757 08               [12] 1874 	inc	r0
      000758 36               [12] 1875 	addc	a,@r0
      000759 FF               [12] 1876 	mov	r7,a
      00075A C0 03            [24] 1877 	push	ar3
      00075C C0 02            [24] 1878 	push	ar2
      00075E 74 30            [12] 1879 	mov	a,#0x30
      000760 C0 E0            [24] 1880 	push	acc
      000762 E4               [12] 1881 	clr	a
      000763 C0 E0            [24] 1882 	push	acc
      000765 8E 82            [24] 1883 	mov	dpl,r6
      000767 8F 83            [24] 1884 	mov	dph,r7
      000769 12r00r00         [24] 1885 	lcall	__modsint
      00076C AE 82            [24] 1886 	mov	r6,dpl
      00076E AF 83            [24] 1887 	mov	r7,dph
      000770 15 81            [12] 1888 	dec	sp
      000772 15 81            [12] 1889 	dec	sp
      000774 D0 02            [24] 1890 	pop	ar2
      000776 D0 03            [24] 1891 	pop	ar3
      000778 D0 04            [24] 1892 	pop	ar4
      00077A D0 05            [24] 1893 	pop	ar5
      00077C EE               [12] 1894 	mov	a,r6
      00077D 2A               [12] 1895 	add	a,r2
      00077E FA               [12] 1896 	mov	r2,a
      00077F EF               [12] 1897 	mov	a,r7
      000780 3B               [12] 1898 	addc	a,r3
      000781 FB               [12] 1899 	mov	r3,a
      000782 EA               [12] 1900 	mov	a,r2
      000783 24r00            [12] 1901 	add	a,#_u
      000785 F5 82            [12] 1902 	mov	dpl,a
      000787 EB               [12] 1903 	mov	a,r3
      000788 34s48            [12] 1904 	addc	a,#(_u >> 8)
      00078A F5 83            [12] 1905 	mov	dph,a
      00078C E0               [24] 1906 	movx	a,@dptr
      00078D FB               [12] 1907 	mov	r3,a
      00078E A8*00            [24] 1908 	mov	r0,_bp
      000790 08               [12] 1909 	inc	r0
      000791 EB               [12] 1910 	mov	a,r3
      000792 26               [12] 1911 	add	a,@r0
      000793 F6               [12] 1912 	mov	@r0,a
                                   1913 ;	life.c:213: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000794 78r15            [12] 1914 	mov	r0,#_y
      000796 E5*00            [12] 1915 	mov	a,_bp
      000798 24 0A            [12] 1916 	add	a,#0x0a
      00079A F9               [12] 1917 	mov	r1,a
      00079B E6               [12] 1918 	mov	a,@r0
      00079C F7               [12] 1919 	mov	@r1,a
      00079D 08               [12] 1920 	inc	r0
      00079E 09               [12] 1921 	inc	r1
      00079F E6               [12] 1922 	mov	a,@r0
      0007A0 F7               [12] 1923 	mov	@r1,a
      0007A1 E5*00            [12] 1924 	mov	a,_bp
      0007A3 24 0A            [12] 1925 	add	a,#0x0a
      0007A5 F8               [12] 1926 	mov	r0,a
      0007A6 74 C0            [12] 1927 	mov	a,#0xc0
      0007A8 26               [12] 1928 	add	a,@r0
      0007A9 FA               [12] 1929 	mov	r2,a
      0007AA E4               [12] 1930 	clr	a
      0007AB 08               [12] 1931 	inc	r0
      0007AC 36               [12] 1932 	addc	a,@r0
      0007AD FB               [12] 1933 	mov	r3,a
      0007AE C0 07            [24] 1934 	push	ar7
      0007B0 C0 06            [24] 1935 	push	ar6
      0007B2 C0 05            [24] 1936 	push	ar5
      0007B4 C0 04            [24] 1937 	push	ar4
      0007B6 74 C0            [12] 1938 	mov	a,#0xc0
      0007B8 C0 E0            [24] 1939 	push	acc
      0007BA E4               [12] 1940 	clr	a
      0007BB C0 E0            [24] 1941 	push	acc
      0007BD 8A 82            [24] 1942 	mov	dpl,r2
      0007BF 8B 83            [24] 1943 	mov	dph,r3
      0007C1 12r00r00         [24] 1944 	lcall	__modsint
      0007C4 AA 82            [24] 1945 	mov	r2,dpl
      0007C6 AB 83            [24] 1946 	mov	r3,dph
      0007C8 15 81            [12] 1947 	dec	sp
      0007CA 15 81            [12] 1948 	dec	sp
      0007CC C0 02            [24] 1949 	push	ar2
      0007CE C0 03            [24] 1950 	push	ar3
      0007D0 90 00 30         [24] 1951 	mov	dptr,#0x0030
      0007D3 12r00r00         [24] 1952 	lcall	__mulint
      0007D6 C8               [12] 1953 	xch	a,r0
      0007D7 E5*00            [12] 1954 	mov	a,_bp
      0007D9 24 0C            [12] 1955 	add	a,#0x0c
      0007DB C8               [12] 1956 	xch	a,r0
      0007DC A6 82            [24] 1957 	mov	@r0,dpl
      0007DE 08               [12] 1958 	inc	r0
      0007DF A6 83            [24] 1959 	mov	@r0,dph
      0007E1 15 81            [12] 1960 	dec	sp
      0007E3 15 81            [12] 1961 	dec	sp
      0007E5 D0 04            [24] 1962 	pop	ar4
      0007E7 D0 05            [24] 1963 	pop	ar5
      0007E9 D0 06            [24] 1964 	pop	ar6
      0007EB D0 07            [24] 1965 	pop	ar7
      0007ED E5*00            [12] 1966 	mov	a,_bp
      0007EF 24 0C            [12] 1967 	add	a,#0x0c
      0007F1 F8               [12] 1968 	mov	r0,a
      0007F2 EC               [12] 1969 	mov	a,r4
      0007F3 26               [12] 1970 	add	a,@r0
      0007F4 FA               [12] 1971 	mov	r2,a
      0007F5 ED               [12] 1972 	mov	a,r5
      0007F6 08               [12] 1973 	inc	r0
      0007F7 36               [12] 1974 	addc	a,@r0
      0007F8 FB               [12] 1975 	mov	r3,a
      0007F9 EA               [12] 1976 	mov	a,r2
      0007FA 24r00            [12] 1977 	add	a,#_u
      0007FC F5 82            [12] 1978 	mov	dpl,a
      0007FE EB               [12] 1979 	mov	a,r3
      0007FF 34s48            [12] 1980 	addc	a,#(_u >> 8)
      000801 F5 83            [12] 1981 	mov	dph,a
      000803 E0               [24] 1982 	movx	a,@dptr
      000804 FB               [12] 1983 	mov	r3,a
      000805 A8*00            [24] 1984 	mov	r0,_bp
      000807 08               [12] 1985 	inc	r0
      000808 EB               [12] 1986 	mov	a,r3
      000809 26               [12] 1987 	add	a,@r0
      00080A F6               [12] 1988 	mov	@r0,a
                                   1989 ;	life.c:215: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00080B E5*00            [12] 1990 	mov	a,_bp
      00080D 24 0C            [12] 1991 	add	a,#0x0c
      00080F F8               [12] 1992 	mov	r0,a
      000810 E5*00            [12] 1993 	mov	a,_bp
      000812 24 08            [12] 1994 	add	a,#0x08
      000814 F9               [12] 1995 	mov	r1,a
      000815 E7               [12] 1996 	mov	a,@r1
      000816 26               [12] 1997 	add	a,@r0
      000817 FA               [12] 1998 	mov	r2,a
      000818 09               [12] 1999 	inc	r1
      000819 E7               [12] 2000 	mov	a,@r1
      00081A 08               [12] 2001 	inc	r0
      00081B 36               [12] 2002 	addc	a,@r0
      00081C FB               [12] 2003 	mov	r3,a
      00081D EA               [12] 2004 	mov	a,r2
      00081E 24r00            [12] 2005 	add	a,#_u
      000820 F5 82            [12] 2006 	mov	dpl,a
      000822 EB               [12] 2007 	mov	a,r3
      000823 34s48            [12] 2008 	addc	a,#(_u >> 8)
      000825 F5 83            [12] 2009 	mov	dph,a
      000827 E0               [24] 2010 	movx	a,@dptr
      000828 FB               [12] 2011 	mov	r3,a
      000829 A8*00            [24] 2012 	mov	r0,_bp
      00082B 08               [12] 2013 	inc	r0
      00082C EB               [12] 2014 	mov	a,r3
      00082D 26               [12] 2015 	add	a,@r0
      00082E F6               [12] 2016 	mov	@r0,a
                                   2017 ;	life.c:217: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00082F E5*00            [12] 2018 	mov	a,_bp
      000831 24 0C            [12] 2019 	add	a,#0x0c
      000833 F8               [12] 2020 	mov	r0,a
      000834 EE               [12] 2021 	mov	a,r6
      000835 26               [12] 2022 	add	a,@r0
      000836 FA               [12] 2023 	mov	r2,a
      000837 EF               [12] 2024 	mov	a,r7
      000838 08               [12] 2025 	inc	r0
      000839 36               [12] 2026 	addc	a,@r0
      00083A FB               [12] 2027 	mov	r3,a
      00083B EA               [12] 2028 	mov	a,r2
      00083C 24r00            [12] 2029 	add	a,#_u
      00083E F5 82            [12] 2030 	mov	dpl,a
      000840 EB               [12] 2031 	mov	a,r3
      000841 34s48            [12] 2032 	addc	a,#(_u >> 8)
      000843 F5 83            [12] 2033 	mov	dph,a
      000845 E0               [24] 2034 	movx	a,@dptr
      000846 FB               [12] 2035 	mov	r3,a
      000847 A8*00            [24] 2036 	mov	r0,_bp
      000849 08               [12] 2037 	inc	r0
      00084A E5*00            [12] 2038 	mov	a,_bp
      00084C 24 0C            [12] 2039 	add	a,#0x0c
      00084E F9               [12] 2040 	mov	r1,a
      00084F EB               [12] 2041 	mov	a,r3
      000850 26               [12] 2042 	add	a,@r0
      000851 F7               [12] 2043 	mov	@r1,a
                                   2044 ;	life.c:219: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000852 E5*00            [12] 2045 	mov	a,_bp
      000854 24 0A            [12] 2046 	add	a,#0x0a
      000856 F8               [12] 2047 	mov	r0,a
      000857 74 C1            [12] 2048 	mov	a,#0xc1
      000859 26               [12] 2049 	add	a,@r0
      00085A FA               [12] 2050 	mov	r2,a
      00085B E4               [12] 2051 	clr	a
      00085C 08               [12] 2052 	inc	r0
      00085D 36               [12] 2053 	addc	a,@r0
      00085E FB               [12] 2054 	mov	r3,a
      00085F C0 07            [24] 2055 	push	ar7
      000861 C0 06            [24] 2056 	push	ar6
      000863 C0 05            [24] 2057 	push	ar5
      000865 C0 04            [24] 2058 	push	ar4
      000867 74 C0            [12] 2059 	mov	a,#0xc0
      000869 C0 E0            [24] 2060 	push	acc
      00086B E4               [12] 2061 	clr	a
      00086C C0 E0            [24] 2062 	push	acc
      00086E 8A 82            [24] 2063 	mov	dpl,r2
      000870 8B 83            [24] 2064 	mov	dph,r3
      000872 12r00r00         [24] 2065 	lcall	__modsint
      000875 AA 82            [24] 2066 	mov	r2,dpl
      000877 AB 83            [24] 2067 	mov	r3,dph
      000879 15 81            [12] 2068 	dec	sp
      00087B 15 81            [12] 2069 	dec	sp
      00087D C0 02            [24] 2070 	push	ar2
      00087F C0 03            [24] 2071 	push	ar3
      000881 90 00 30         [24] 2072 	mov	dptr,#0x0030
      000884 12r00r00         [24] 2073 	lcall	__mulint
      000887 AA 82            [24] 2074 	mov	r2,dpl
      000889 AB 83            [24] 2075 	mov	r3,dph
      00088B 15 81            [12] 2076 	dec	sp
      00088D 15 81            [12] 2077 	dec	sp
      00088F D0 04            [24] 2078 	pop	ar4
      000891 D0 05            [24] 2079 	pop	ar5
      000893 D0 06            [24] 2080 	pop	ar6
      000895 D0 07            [24] 2081 	pop	ar7
      000897 EC               [12] 2082 	mov	a,r4
      000898 2A               [12] 2083 	add	a,r2
      000899 FC               [12] 2084 	mov	r4,a
      00089A ED               [12] 2085 	mov	a,r5
      00089B 3B               [12] 2086 	addc	a,r3
      00089C FD               [12] 2087 	mov	r5,a
      00089D EC               [12] 2088 	mov	a,r4
      00089E 24r00            [12] 2089 	add	a,#_u
      0008A0 F5 82            [12] 2090 	mov	dpl,a
      0008A2 ED               [12] 2091 	mov	a,r5
      0008A3 34s48            [12] 2092 	addc	a,#(_u >> 8)
      0008A5 F5 83            [12] 2093 	mov	dph,a
      0008A7 E0               [24] 2094 	movx	a,@dptr
      0008A8 FD               [12] 2095 	mov	r5,a
      0008A9 E5*00            [12] 2096 	mov	a,_bp
      0008AB 24 0C            [12] 2097 	add	a,#0x0c
      0008AD F8               [12] 2098 	mov	r0,a
      0008AE E5*00            [12] 2099 	mov	a,_bp
      0008B0 24 0C            [12] 2100 	add	a,#0x0c
      0008B2 F9               [12] 2101 	mov	r1,a
      0008B3 ED               [12] 2102 	mov	a,r5
      0008B4 26               [12] 2103 	add	a,@r0
      0008B5 F7               [12] 2104 	mov	@r1,a
                                   2105 ;	life.c:221: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008B6 E5*00            [12] 2106 	mov	a,_bp
      0008B8 24 08            [12] 2107 	add	a,#0x08
      0008BA F8               [12] 2108 	mov	r0,a
      0008BB E6               [12] 2109 	mov	a,@r0
      0008BC 2A               [12] 2110 	add	a,r2
      0008BD FC               [12] 2111 	mov	r4,a
      0008BE 08               [12] 2112 	inc	r0
      0008BF E6               [12] 2113 	mov	a,@r0
      0008C0 3B               [12] 2114 	addc	a,r3
      0008C1 FD               [12] 2115 	mov	r5,a
      0008C2 EC               [12] 2116 	mov	a,r4
      0008C3 24r00            [12] 2117 	add	a,#_u
      0008C5 F5 82            [12] 2118 	mov	dpl,a
      0008C7 ED               [12] 2119 	mov	a,r5
      0008C8 34s48            [12] 2120 	addc	a,#(_u >> 8)
      0008CA F5 83            [12] 2121 	mov	dph,a
      0008CC E0               [24] 2122 	movx	a,@dptr
      0008CD FD               [12] 2123 	mov	r5,a
      0008CE E5*00            [12] 2124 	mov	a,_bp
      0008D0 24 0C            [12] 2125 	add	a,#0x0c
      0008D2 F8               [12] 2126 	mov	r0,a
      0008D3 ED               [12] 2127 	mov	a,r5
      0008D4 26               [12] 2128 	add	a,@r0
      0008D5 FD               [12] 2129 	mov	r5,a
                                   2130 ;	life.c:222: y1 = 1; x1 = 1;
      0008D6 78r20            [12] 2131 	mov	r0,#_y1
      0008D8 76 01            [12] 2132 	mov	@r0,#0x01
      0008DA 08               [12] 2133 	inc	r0
      0008DB 76 00            [12] 2134 	mov	@r0,#0x00
      0008DD 78r1E            [12] 2135 	mov	r0,#_x1
      0008DF 76 01            [12] 2136 	mov	@r0,#0x01
      0008E1 08               [12] 2137 	inc	r0
      0008E2 76 00            [12] 2138 	mov	@r0,#0x00
                                   2139 ;	life.c:223: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008E4 EE               [12] 2140 	mov	a,r6
      0008E5 2A               [12] 2141 	add	a,r2
      0008E6 FE               [12] 2142 	mov	r6,a
      0008E7 EF               [12] 2143 	mov	a,r7
      0008E8 3B               [12] 2144 	addc	a,r3
      0008E9 FF               [12] 2145 	mov	r7,a
      0008EA EE               [12] 2146 	mov	a,r6
      0008EB 24r00            [12] 2147 	add	a,#_u
      0008ED F5 82            [12] 2148 	mov	dpl,a
      0008EF EF               [12] 2149 	mov	a,r7
      0008F0 34s48            [12] 2150 	addc	a,#(_u >> 8)
      0008F2 F5 83            [12] 2151 	mov	dph,a
      0008F4 E0               [24] 2152 	movx	a,@dptr
      0008F5 2D               [12] 2153 	add	a,r5
      0008F6 FF               [12] 2154 	mov	r7,a
      0008F7 78r1B            [12] 2155 	mov	r0,#_n
      0008F9 A6 07            [24] 2156 	mov	@r0,ar7
                                   2157 ;	life.c:225: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008FB A8*00            [24] 2158 	mov	r0,_bp
      0008FD 08               [12] 2159 	inc	r0
      0008FE 08               [12] 2160 	inc	r0
      0008FF E6               [12] 2161 	mov	a,@r0
      000900 24r00            [12] 2162 	add	a,#_nu
      000902 FD               [12] 2163 	mov	r5,a
      000903 08               [12] 2164 	inc	r0
      000904 E6               [12] 2165 	mov	a,@r0
      000905 34s6C            [12] 2166 	addc	a,#(_nu >> 8)
      000907 FE               [12] 2167 	mov	r6,a
      000908 BF 03 02         [24] 2168 	cjne	r7,#0x03,00564$
      00090B 80 28            [24] 2169 	sjmp	00254$
      00090D                       2170 00564$:
      00090D BF 02 21         [24] 2171 	cjne	r7,#0x02,00253$
      000910 E5*00            [12] 2172 	mov	a,_bp
      000912 24 04            [12] 2173 	add	a,#0x04
      000914 F8               [12] 2174 	mov	r0,a
      000915 E5*00            [12] 2175 	mov	a,_bp
      000917 24 06            [12] 2176 	add	a,#0x06
      000919 F9               [12] 2177 	mov	r1,a
      00091A E7               [12] 2178 	mov	a,@r1
      00091B 26               [12] 2179 	add	a,@r0
      00091C FC               [12] 2180 	mov	r4,a
      00091D 09               [12] 2181 	inc	r1
      00091E E7               [12] 2182 	mov	a,@r1
      00091F 08               [12] 2183 	inc	r0
      000920 36               [12] 2184 	addc	a,@r0
      000921 FF               [12] 2185 	mov	r7,a
      000922 EC               [12] 2186 	mov	a,r4
      000923 24r00            [12] 2187 	add	a,#_u
      000925 FC               [12] 2188 	mov	r4,a
      000926 EF               [12] 2189 	mov	a,r7
      000927 34s48            [12] 2190 	addc	a,#(_u >> 8)
      000929 FF               [12] 2191 	mov	r7,a
      00092A 8C 82            [24] 2192 	mov	dpl,r4
      00092C 8F 83            [24] 2193 	mov	dph,r7
      00092E E0               [24] 2194 	movx	a,@dptr
      00092F 70 04            [24] 2195 	jnz	00254$
      000931                       2196 00253$:
                                   2197 ;	assignBit
      000931 C2*00            [12] 2198 	clr	b0
      000933 80 02            [24] 2199 	sjmp	00255$
      000935                       2200 00254$:
                                   2201 ;	assignBit
      000935 D2*00            [12] 2202 	setb	b0
      000937                       2203 00255$:
      000937 A2*00            [12] 2204 	mov	c,b0
      000939 E4               [12] 2205 	clr	a
      00093A 33               [12] 2206 	rlc	a
      00093B 8D 82            [24] 2207 	mov	dpl,r5
      00093D 8E 83            [24] 2208 	mov	dph,r6
      00093F F0               [24] 2209 	movx	@dptr,a
                                   2210 ;	life.c:226: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000940 78r15            [12] 2211 	mov	r0,#_y
      000942 E6               [12] 2212 	mov	a,@r0
      000943 C0 E0            [24] 2213 	push	acc
      000945 08               [12] 2214 	inc	r0
      000946 E6               [12] 2215 	mov	a,@r0
      000947 C0 E0            [24] 2216 	push	acc
      000949 90 00 30         [24] 2217 	mov	dptr,#0x0030
      00094C 12r00r00         [24] 2218 	lcall	__mulint
      00094F AE 82            [24] 2219 	mov	r6,dpl
      000951 AF 83            [24] 2220 	mov	r7,dph
      000953 15 81            [12] 2221 	dec	sp
      000955 15 81            [12] 2222 	dec	sp
      000957 78r13            [12] 2223 	mov	r0,#_x
      000959 E6               [12] 2224 	mov	a,@r0
      00095A 2E               [12] 2225 	add	a,r6
      00095B FE               [12] 2226 	mov	r6,a
      00095C 08               [12] 2227 	inc	r0
      00095D E6               [12] 2228 	mov	a,@r0
      00095E 3F               [12] 2229 	addc	a,r7
      00095F FF               [12] 2230 	mov	r7,a
      000960 EE               [12] 2231 	mov	a,r6
      000961 24r00            [12] 2232 	add	a,#_pu
      000963 F5 82            [12] 2233 	mov	dpl,a
      000965 EF               [12] 2234 	mov	a,r7
      000966 34s24            [12] 2235 	addc	a,#(_pu >> 8)
      000968 F5 83            [12] 2236 	mov	dph,a
      00096A E0               [24] 2237 	movx	a,@dptr
      00096B FD               [12] 2238 	mov	r5,a
      00096C EE               [12] 2239 	mov	a,r6
      00096D 24r00            [12] 2240 	add	a,#_nu
      00096F F5 82            [12] 2241 	mov	dpl,a
      000971 EF               [12] 2242 	mov	a,r7
      000972 34s6C            [12] 2243 	addc	a,#(_nu >> 8)
      000974 F5 83            [12] 2244 	mov	dph,a
      000976 E0               [24] 2245 	movx	a,@dptr
      000977 FC               [12] 2246 	mov	r4,a
      000978 6D               [12] 2247 	xrl	a,r5
      000979 78r1D            [12] 2248 	mov	r0,#_cycle2
      00097B 46               [12] 2249 	orl	a,@r0
      00097C F6               [12] 2250 	mov	@r0,a
                                   2251 ;	life.c:227: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00097D EE               [12] 2252 	mov	a,r6
      00097E 24r00            [12] 2253 	add	a,#_u
      000980 F5 82            [12] 2254 	mov	dpl,a
      000982 EF               [12] 2255 	mov	a,r7
      000983 34s48            [12] 2256 	addc	a,#(_u >> 8)
      000985 F5 83            [12] 2257 	mov	dph,a
      000987 E0               [24] 2258 	movx	a,@dptr
      000988 FF               [12] 2259 	mov	r7,a
      000989 EC               [12] 2260 	mov	a,r4
      00098A 6F               [12] 2261 	xrl	a,r7
      00098B 78r1C            [12] 2262 	mov	r0,#_fixed
      00098D 46               [12] 2263 	orl	a,@r0
      00098E F6               [12] 2264 	mov	@r0,a
                                   2265 ;	life.c:203: for (x = 0; x < W; x++) {
      00098F 78r13            [12] 2266 	mov	r0,#_x
      000991 06               [12] 2267 	inc	@r0
      000992 B6 00 02         [24] 2268 	cjne	@r0,#0x00,00568$
      000995 08               [12] 2269 	inc	r0
      000996 06               [12] 2270 	inc	@r0
      000997                       2271 00568$:
      000997 78r13            [12] 2272 	mov	r0,#_x
      000999 C3               [12] 2273 	clr	c
      00099A E6               [12] 2274 	mov	a,@r0
      00099B 94 30            [12] 2275 	subb	a,#0x30
      00099D 08               [12] 2276 	inc	r0
      00099E E6               [12] 2277 	mov	a,@r0
      00099F 64 80            [12] 2278 	xrl	a,#0x80
      0009A1 94 80            [12] 2279 	subb	a,#0x80
      0009A3 50 03            [24] 2280 	jnc	00569$
      0009A5 02r06r17         [24] 2281 	ljmp	00226$
      0009A8                       2282 00569$:
                                   2283 ;	life.c:200: for (y = 0; y < H; y++) {
      0009A8 78r15            [12] 2284 	mov	r0,#_y
      0009AA 06               [12] 2285 	inc	@r0
      0009AB B6 00 02         [24] 2286 	cjne	@r0,#0x00,00570$
      0009AE 08               [12] 2287 	inc	r0
      0009AF 06               [12] 2288 	inc	@r0
      0009B0                       2289 00570$:
      0009B0 78r15            [12] 2290 	mov	r0,#_y
      0009B2 C3               [12] 2291 	clr	c
      0009B3 E6               [12] 2292 	mov	a,@r0
      0009B4 94 C0            [12] 2293 	subb	a,#0xc0
      0009B6 08               [12] 2294 	inc	r0
      0009B7 E6               [12] 2295 	mov	a,@r0
      0009B8 64 80            [12] 2296 	xrl	a,#0x80
      0009BA 94 80            [12] 2297 	subb	a,#0x80
      0009BC 50 03            [24] 2298 	jnc	00571$
      0009BE 02r05rFB         [24] 2299 	ljmp	00228$
      0009C1                       2300 00571$:
                                   2301 ;	life.c:231: OE76 = OE76_0;
      0009C1 78r12            [12] 2302 	mov	r0,#_OE76
      0009C3 76 3F            [12] 2303 	mov	@r0,#0x3f
                                   2304 ;	life.c:232: flashOE();
      0009C5 12r00r26         [24] 2305 	lcall	_flashOE
                                   2306 ;	life.c:234: cycle2 = !cycle2;
      0009C8 78r1D            [12] 2307 	mov	r0,#_cycle2
      0009CA E6               [12] 2308 	mov	a,@r0
      0009CB B4 01 00         [24] 2309 	cjne	a,#0x01,00572$
      0009CE                       2310 00572$:
      0009CE 92*00            [24] 2311 	mov	b0,c
      0009D0 78r1D            [12] 2312 	mov	r0,#_cycle2
      0009D2 E4               [12] 2313 	clr	a
      0009D3 33               [12] 2314 	rlc	a
      0009D4 F6               [12] 2315 	mov	@r0,a
                                   2316 ;	life.c:235: fixed = !fixed;
      0009D5 78r1C            [12] 2317 	mov	r0,#_fixed
      0009D7 E6               [12] 2318 	mov	a,@r0
      0009D8 B4 01 00         [24] 2319 	cjne	a,#0x01,00573$
      0009DB                       2320 00573$:
      0009DB 92*00            [24] 2321 	mov	b0,c
      0009DD 78r1C            [12] 2322 	mov	r0,#_fixed
      0009DF E4               [12] 2323 	clr	a
      0009E0 33               [12] 2324 	rlc	a
      0009E1 F6               [12] 2325 	mov	@r0,a
                                   2326 ;	life.c:237: memcpy(pu, u, sizeof (u));
      0009E2 E4               [12] 2327 	clr	a
      0009E3 C0 E0            [24] 2328 	push	acc
      0009E5 74 24            [12] 2329 	mov	a,#0x24
      0009E7 C0 E0            [24] 2330 	push	acc
      0009E9 74r00            [12] 2331 	mov	a,#_u
      0009EB C0 E0            [24] 2332 	push	acc
      0009ED 74s48            [12] 2333 	mov	a,#(_u >> 8)
      0009EF C0 E0            [24] 2334 	push	acc
      0009F1 E4               [12] 2335 	clr	a
      0009F2 C0 E0            [24] 2336 	push	acc
      0009F4 90r24r00         [24] 2337 	mov	dptr,#_pu
      0009F7 75 F0 00         [24] 2338 	mov	b,#0x00
      0009FA 12r00r00         [24] 2339 	lcall	___memcpy
      0009FD E5 81            [12] 2340 	mov	a,sp
      0009FF 24 FB            [12] 2341 	add	a,#0xfb
      000A01 F5 81            [12] 2342 	mov	sp,a
                                   2343 ;	life.c:238: memcpy(u, nu, sizeof (nu));
      000A03 E4               [12] 2344 	clr	a
      000A04 C0 E0            [24] 2345 	push	acc
      000A06 74 24            [12] 2346 	mov	a,#0x24
      000A08 C0 E0            [24] 2347 	push	acc
      000A0A 74r00            [12] 2348 	mov	a,#_nu
      000A0C C0 E0            [24] 2349 	push	acc
      000A0E 74s6C            [12] 2350 	mov	a,#(_nu >> 8)
      000A10 C0 E0            [24] 2351 	push	acc
      000A12 E4               [12] 2352 	clr	a
      000A13 C0 E0            [24] 2353 	push	acc
      000A15 90r48r00         [24] 2354 	mov	dptr,#_u
      000A18 75 F0 00         [24] 2355 	mov	b,#0x00
      000A1B 12r00r00         [24] 2356 	lcall	___memcpy
      000A1E E5 81            [12] 2357 	mov	a,sp
      000A20 24 FB            [12] 2358 	add	a,#0xfb
      000A22 F5 81            [12] 2359 	mov	sp,a
                                   2360 ;	life.c:284: if (fixed || cycle2) {
      000A24 78r1C            [12] 2361 	mov	r0,#_fixed
      000A26 E6               [12] 2362 	mov	a,@r0
      000A27 70 08            [24] 2363 	jnz	00135$
      000A29 78r1D            [12] 2364 	mov	r0,#_cycle2
      000A2B E6               [12] 2365 	mov	a,@r0
      000A2C 70 03            [24] 2366 	jnz	00575$
      000A2E 02r05rD0         [24] 2367 	ljmp	00241$
      000A31                       2368 00575$:
      000A31                       2369 00135$:
                                   2370 ;	life.c:285: printstr("DONE ");
      000A31 7Dr5C            [12] 2371 	mov	r5,#___str_7
      000A33 7Es00            [12] 2372 	mov	r6,#(___str_7 >> 8)
      000A35 7F 80            [12] 2373 	mov	r7,#0x80
                                   2374 ;	life.c:53: return;
      000A37                       2375 00231$:
                                   2376 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A37 8D 82            [24] 2377 	mov	dpl,r5
      000A39 8E 83            [24] 2378 	mov	dph,r6
      000A3B 8F F0            [24] 2379 	mov	b,r7
      000A3D 12r00r00         [24] 2380 	lcall	__gptrget
      000A40 FC               [12] 2381 	mov	r4,a
      000A41 60 10            [24] 2382 	jz	00192$
      000A43 7B 00            [12] 2383 	mov	r3,#0x00
      000A45 8C 82            [24] 2384 	mov	dpl,r4
      000A47 8B 83            [24] 2385 	mov	dph,r3
      000A49 12r00r00         [24] 2386 	lcall	_putchar
      000A4C 0D               [12] 2387 	inc	r5
                                   2388 ;	life.c:285: printstr("DONE ");
      000A4D BD 00 E7         [24] 2389 	cjne	r5,#0x00,00231$
      000A50 0E               [12] 2390 	inc	r6
      000A51 80 E4            [24] 2391 	sjmp	00231$
      000A53                       2392 00192$:
                                   2393 ;	life.c:286: if (fixed) printstr("FIXED\r\n");
      000A53 78r1C            [12] 2394 	mov	r0,#_fixed
      000A55 E6               [12] 2395 	mov	a,@r0
      000A56 60 22            [24] 2396 	jz	00133$
      000A58 7Dr62            [12] 2397 	mov	r5,#___str_8
      000A5A 7Es00            [12] 2398 	mov	r6,#(___str_8 >> 8)
      000A5C 7F 80            [12] 2399 	mov	r7,#0x80
                                   2400 ;	life.c:53: return;
      000A5E                       2401 00234$:
                                   2402 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A5E 8D 82            [24] 2403 	mov	dpl,r5
      000A60 8E 83            [24] 2404 	mov	dph,r6
      000A62 8F F0            [24] 2405 	mov	b,r7
      000A64 12r00r00         [24] 2406 	lcall	__gptrget
      000A67 FC               [12] 2407 	mov	r4,a
      000A68 60 32            [24] 2408 	jz	00134$
      000A6A 7B 00            [12] 2409 	mov	r3,#0x00
      000A6C 8C 82            [24] 2410 	mov	dpl,r4
      000A6E 8B 83            [24] 2411 	mov	dph,r3
      000A70 12r00r00         [24] 2412 	lcall	_putchar
      000A73 0D               [12] 2413 	inc	r5
                                   2414 ;	life.c:286: if (fixed) printstr("FIXED\r\n");
      000A74 BD 00 E7         [24] 2415 	cjne	r5,#0x00,00234$
      000A77 0E               [12] 2416 	inc	r6
      000A78 80 E4            [24] 2417 	sjmp	00234$
      000A7A                       2418 00133$:
                                   2419 ;	life.c:287: else printstr("CYCLE2\r\n");
      000A7A 7Dr6A            [12] 2420 	mov	r5,#___str_9
      000A7C 7Es00            [12] 2421 	mov	r6,#(___str_9 >> 8)
      000A7E 7F 80            [12] 2422 	mov	r7,#0x80
                                   2423 ;	life.c:53: return;
      000A80                       2424 00237$:
                                   2425 ;	life.c:51: for (; *s; s++) putchar(*s);
      000A80 8D 82            [24] 2426 	mov	dpl,r5
      000A82 8E 83            [24] 2427 	mov	dph,r6
      000A84 8F F0            [24] 2428 	mov	b,r7
      000A86 12r00r00         [24] 2429 	lcall	__gptrget
      000A89 FC               [12] 2430 	mov	r4,a
      000A8A 60 10            [24] 2431 	jz	00134$
      000A8C 7B 00            [12] 2432 	mov	r3,#0x00
      000A8E 8C 82            [24] 2433 	mov	dpl,r4
      000A90 8B 83            [24] 2434 	mov	dph,r3
      000A92 12r00r00         [24] 2435 	lcall	_putchar
      000A95 0D               [12] 2436 	inc	r5
                                   2437 ;	life.c:287: else printstr("CYCLE2\r\n");
      000A96 BD 00 E7         [24] 2438 	cjne	r5,#0x00,00237$
      000A99 0E               [12] 2439 	inc	r6
      000A9A 80 E4            [24] 2440 	sjmp	00237$
      000A9C                       2441 00134$:
                                   2442 ;	life.c:288: (void)getchar();
      000A9C 12r00r05         [24] 2443 	lcall	_getchar
                                   2444 ;	life.c:289: break;
      000A9F                       2445 00138$:
                                   2446 ;	life.c:293: if (i1) {
      000A9F 78r11            [12] 2447 	mov	r0,#_i1
      000AA1 E6               [12] 2448 	mov	a,@r0
      000AA2 60 25            [24] 2449 	jz	00247$
                                   2450 ;	life.c:294: printstr("BREAK\r\n");
      000AA4 7Dr73            [12] 2451 	mov	r5,#___str_10
      000AA6 7Es00            [12] 2452 	mov	r6,#(___str_10 >> 8)
      000AA8 7F 80            [12] 2453 	mov	r7,#0x80
                                   2454 ;	life.c:53: return;
      000AAA                       2455 00244$:
                                   2456 ;	life.c:51: for (; *s; s++) putchar(*s);
      000AAA 8D 82            [24] 2457 	mov	dpl,r5
      000AAC 8E 83            [24] 2458 	mov	dph,r6
      000AAE 8F F0            [24] 2459 	mov	b,r7
      000AB0 12r00r00         [24] 2460 	lcall	__gptrget
      000AB3 FC               [12] 2461 	mov	r4,a
      000AB4 60 10            [24] 2462 	jz	00198$
      000AB6 7B 00            [12] 2463 	mov	r3,#0x00
      000AB8 8C 82            [24] 2464 	mov	dpl,r4
      000ABA 8B 83            [24] 2465 	mov	dph,r3
      000ABC 12r00r00         [24] 2466 	lcall	_putchar
      000ABF 0D               [12] 2467 	inc	r5
                                   2468 ;	life.c:294: printstr("BREAK\r\n");
      000AC0 BD 00 E7         [24] 2469 	cjne	r5,#0x00,00244$
      000AC3 0E               [12] 2470 	inc	r6
      000AC4 80 E4            [24] 2471 	sjmp	00244$
      000AC6                       2472 00198$:
                                   2473 ;	life.c:295: (void)getchar();
      000AC6 12r00r05         [24] 2474 	lcall	_getchar
      000AC9                       2475 00247$:
                                   2476 ;	life.c:256: for (i0 = 0; !i0; ) {	
      000AC9 78r10            [12] 2477 	mov	r0,#_i0
      000ACB E6               [12] 2478 	mov	a,@r0
      000ACC 70 03            [24] 2479 	jnz	00586$
      000ACE 02r02r55         [24] 2480 	ljmp	00246$
      000AD1                       2481 00586$:
                                   2482 ;	life.c:299: terminate:
      000AD1                       2483 00142$:
                                   2484 ;	life.c:300: EA = 0;
                                   2485 ;	assignBit
      000AD1 C2 AF            [12] 2486 	clr	_EA
                                   2487 ;	life.c:301: printstr("TERM\r\n");
      000AD3 7Dr7B            [12] 2488 	mov	r5,#___str_11
      000AD5 7Es00            [12] 2489 	mov	r6,#(___str_11 >> 8)
      000AD7 7F 80            [12] 2490 	mov	r7,#0x80
                                   2491 ;	life.c:53: return;
      000AD9                       2492 00249$:
                                   2493 ;	life.c:51: for (; *s; s++) putchar(*s);
      000AD9 8D 82            [24] 2494 	mov	dpl,r5
      000ADB 8E 83            [24] 2495 	mov	dph,r6
      000ADD 8F F0            [24] 2496 	mov	b,r7
      000ADF 12r00r00         [24] 2497 	lcall	__gptrget
      000AE2 FC               [12] 2498 	mov	r4,a
      000AE3 60 10            [24] 2499 	jz	00200$
      000AE5 7B 00            [12] 2500 	mov	r3,#0x00
      000AE7 8C 82            [24] 2501 	mov	dpl,r4
      000AE9 8B 83            [24] 2502 	mov	dph,r3
      000AEB 12r00r00         [24] 2503 	lcall	_putchar
      000AEE 0D               [12] 2504 	inc	r5
                                   2505 ;	life.c:301: printstr("TERM\r\n");
      000AEF BD 00 E7         [24] 2506 	cjne	r5,#0x00,00249$
      000AF2 0E               [12] 2507 	inc	r6
      000AF3 80 E4            [24] 2508 	sjmp	00249$
      000AF5                       2509 00200$:
                                   2510 ;	life.c:302: (void)getchar();
      000AF5 12r00r05         [24] 2511 	lcall	_getchar
                                   2512 ;	life.c:306: __endasm;
      000AF8 02 00 00         [24] 2513 	ljmp	0
                                   2514 ;	life.c:307: }
      000AFB 85*00 81         [24] 2515 	mov	sp,_bp
      000AFE D0*00            [24] 2516 	pop	_bp
      000B00 22               [24] 2517 	ret
                                   2518 	.area CSEG    (CODE)
                                   2519 	.area CONST   (CODE)
                                   2520 	.area CONST   (CODE)
      000000                       2521 ___str_0:
      000000 1B                    2522 	.db 0x1b
      000001 5B 32 4A              2523 	.ascii "[2J"
      000004 1B                    2524 	.db 0x1b
      000005 5B 6D 47 45 4E 20     2525 	.ascii "[mGEN "
      00000B 00                    2526 	.db 0x00
                                   2527 	.area CSEG    (CODE)
                                   2528 	.area CONST   (CODE)
      00000C                       2529 ___str_1:
      00000C 0D                    2530 	.db 0x0d
      00000D 0A                    2531 	.db 0x0a
      00000E 00                    2532 	.db 0x00
                                   2533 	.area CSEG    (CODE)
                                   2534 	.area CONST   (CODE)
      00000F                       2535 ___str_2:
      00000F 4C 4F 41 44 20 30 20  2536 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00001D 00                    2537 	.db 0x00
                                   2538 	.area CSEG    (CODE)
                                   2539 	.area CONST   (CODE)
      00001E                       2540 ___str_3:
      00001E 3E                    2541 	.ascii ">"
      00001F 0D                    2542 	.db 0x0d
      000020 0A                    2543 	.db 0x0a
      000021 00                    2544 	.db 0x00
                                   2545 	.area CSEG    (CODE)
                                   2546 	.area CONST   (CODE)
      000022                       2547 ___str_4:
      000022 52 41 4E 44 4F 4D     2548 	.ascii "RANDOM"
      000028 00                    2549 	.db 0x00
                                   2550 	.area CSEG    (CODE)
                                   2551 	.area CONST   (CODE)
      000029                       2552 ___str_5:
      000029 1B                    2553 	.db 0x1b
      00002A 5B 32 4A              2554 	.ascii "[2J"
      00002D 1B                    2555 	.db 0x1b
      00002E 5B 3F 32 35 6C        2556 	.ascii "[?25l"
      000033 1B                    2557 	.db 0x1b
      000034 5B 6D 4C 49 46 45 20  2558 	.ascii "[mLIFE INIT T L R P"
             49 4E 49 54 20 54 20
             4C 20 52 20 50
      000047 0D                    2559 	.db 0x0d
      000048 0A                    2560 	.db 0x0a
      000049 00                    2561 	.db 0x00
                                   2562 	.area CSEG    (CODE)
                                   2563 	.area CONST   (CODE)
      00004A                       2564 ___str_6:
      00004A 52 45 41 44 59 20 54  2565 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000059 0D                    2566 	.db 0x0d
      00005A 0A                    2567 	.db 0x0a
      00005B 00                    2568 	.db 0x00
                                   2569 	.area CSEG    (CODE)
                                   2570 	.area CONST   (CODE)
      00005C                       2571 ___str_7:
      00005C 44 4F 4E 45 20        2572 	.ascii "DONE "
      000061 00                    2573 	.db 0x00
                                   2574 	.area CSEG    (CODE)
                                   2575 	.area CONST   (CODE)
      000062                       2576 ___str_8:
      000062 46 49 58 45 44        2577 	.ascii "FIXED"
      000067 0D                    2578 	.db 0x0d
      000068 0A                    2579 	.db 0x0a
      000069 00                    2580 	.db 0x00
                                   2581 	.area CSEG    (CODE)
                                   2582 	.area CONST   (CODE)
      00006A                       2583 ___str_9:
      00006A 43 59 43 4C 45 32     2584 	.ascii "CYCLE2"
      000070 0D                    2585 	.db 0x0d
      000071 0A                    2586 	.db 0x0a
      000072 00                    2587 	.db 0x00
                                   2588 	.area CSEG    (CODE)
                                   2589 	.area CONST   (CODE)
      000073                       2590 ___str_10:
      000073 42 52 45 41 4B        2591 	.ascii "BREAK"
      000078 0D                    2592 	.db 0x0d
      000079 0A                    2593 	.db 0x0a
      00007A 00                    2594 	.db 0x00
                                   2595 	.area CSEG    (CODE)
                                   2596 	.area CONST   (CODE)
      00007B                       2597 ___str_11:
      00007B 54 45 52 4D           2598 	.ascii "TERM"
      00007F 0D                    2599 	.db 0x0d
      000080 0A                    2600 	.db 0x0a
      000081 00                    2601 	.db 0x00
                                   2602 	.area CSEG    (CODE)
                                   2603 	.area XINIT   (CODE)
                                   2604 	.area CABS    (ABS,CODE)
