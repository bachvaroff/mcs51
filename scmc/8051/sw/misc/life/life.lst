                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar_poll
                                     16 	.globl _getchar
                                     17 	.globl _putchar
                                     18 	.globl _toupper
                                     19 	.globl ___memcpy
                                     20 	.globl _memset
                                     21 	.globl _srand
                                     22 	.globl _rand
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000C8   169 _T2CON	=	0x00c8
                           0000C9   170 _T2MOD	=	0x00c9
                           0000CA   171 _RCAP2L	=	0x00ca
                           0000CB   172 _RCAP2H	=	0x00cb
                           0000CC   173 _TL2	=	0x00cc
                           0000CD   174 _TH2	=	0x00cd
                           0000D0   175 _PSW	=	0x00d0
                           0000E0   176 _ACC	=	0x00e0
                           0000E0   177 _A	=	0x00e0
                           0000F0   178 _B	=	0x00f0
                                    179 ;--------------------------------------------------------
                                    180 ; special function bits
                                    181 ;--------------------------------------------------------
                                    182 	.area RSEG    (ABS,DATA)
      000000                        183 	.org 0x0000
                           000080   184 _P0_0	=	0x0080
                           000081   185 _P0_1	=	0x0081
                           000082   186 _P0_2	=	0x0082
                           000083   187 _P0_3	=	0x0083
                           000084   188 _P0_4	=	0x0084
                           000085   189 _P0_5	=	0x0085
                           000086   190 _P0_6	=	0x0086
                           000087   191 _P0_7	=	0x0087
                           000088   192 _IT0	=	0x0088
                           000089   193 _IE0	=	0x0089
                           00008A   194 _IT1	=	0x008a
                           00008B   195 _IE1	=	0x008b
                           00008C   196 _TR0	=	0x008c
                           00008D   197 _TF0	=	0x008d
                           00008E   198 _TR1	=	0x008e
                           00008F   199 _TF1	=	0x008f
                           000090   200 _P1_0	=	0x0090
                           000091   201 _P1_1	=	0x0091
                           000092   202 _P1_2	=	0x0092
                           000093   203 _P1_3	=	0x0093
                           000094   204 _P1_4	=	0x0094
                           000095   205 _P1_5	=	0x0095
                           000096   206 _P1_6	=	0x0096
                           000097   207 _P1_7	=	0x0097
                           000090   208 _T2	=	0x0090
                           000091   209 _T2EX	=	0x0091
                           000098   210 _RI	=	0x0098
                           000099   211 _TI	=	0x0099
                           00009A   212 _RB8	=	0x009a
                           00009B   213 _TB8	=	0x009b
                           00009C   214 _REN	=	0x009c
                           00009D   215 _SM2	=	0x009d
                           00009E   216 _SM1	=	0x009e
                           00009F   217 _SM0	=	0x009f
                           0000A0   218 _P2_0	=	0x00a0
                           0000A1   219 _P2_1	=	0x00a1
                           0000A2   220 _P2_2	=	0x00a2
                           0000A3   221 _P2_3	=	0x00a3
                           0000A4   222 _P2_4	=	0x00a4
                           0000A5   223 _P2_5	=	0x00a5
                           0000A6   224 _P2_6	=	0x00a6
                           0000A7   225 _P2_7	=	0x00a7
                           0000A8   226 _EX0	=	0x00a8
                           0000A9   227 _ET0	=	0x00a9
                           0000AA   228 _EX1	=	0x00aa
                           0000AB   229 _ET1	=	0x00ab
                           0000AC   230 _ES	=	0x00ac
                           0000AD   231 _ET2	=	0x00ad
                           0000AF   232 _EA	=	0x00af
                           0000B0   233 _P3_0	=	0x00b0
                           0000B1   234 _P3_1	=	0x00b1
                           0000B2   235 _P3_2	=	0x00b2
                           0000B3   236 _P3_3	=	0x00b3
                           0000B4   237 _P3_4	=	0x00b4
                           0000B5   238 _P3_5	=	0x00b5
                           0000B6   239 _P3_6	=	0x00b6
                           0000B7   240 _P3_7	=	0x00b7
                           0000B0   241 _RXD	=	0x00b0
                           0000B1   242 _TXD	=	0x00b1
                           0000B2   243 _INT0	=	0x00b2
                           0000B3   244 _INT1	=	0x00b3
                           0000B4   245 _T0	=	0x00b4
                           0000B5   246 _T1	=	0x00b5
                           0000B6   247 _WR	=	0x00b6
                           0000B7   248 _RD	=	0x00b7
                           0000B8   249 _PX0	=	0x00b8
                           0000B9   250 _PT0	=	0x00b9
                           0000BA   251 _PX1	=	0x00ba
                           0000BB   252 _PT1	=	0x00bb
                           0000BC   253 _PS	=	0x00bc
                           0000BD   254 _PT2	=	0x00bd
                           0000C8   255 _T2CON_0	=	0x00c8
                           0000C9   256 _T2CON_1	=	0x00c9
                           0000CA   257 _T2CON_2	=	0x00ca
                           0000CB   258 _T2CON_3	=	0x00cb
                           0000CC   259 _T2CON_4	=	0x00cc
                           0000CD   260 _T2CON_5	=	0x00cd
                           0000CE   261 _T2CON_6	=	0x00ce
                           0000CF   262 _T2CON_7	=	0x00cf
                           0000C8   263 _CP_RL2	=	0x00c8
                           0000C9   264 _C_T2	=	0x00c9
                           0000CA   265 _TR2	=	0x00ca
                           0000CB   266 _EXEN2	=	0x00cb
                           0000CC   267 _TCLK	=	0x00cc
                           0000CD   268 _RCLK	=	0x00cd
                           0000CE   269 _EXF2	=	0x00ce
                           0000CF   270 _TF2	=	0x00cf
                           0000D0   271 _P	=	0x00d0
                           0000D1   272 _FL	=	0x00d1
                           0000D2   273 _OV	=	0x00d2
                           0000D3   274 _RS0	=	0x00d3
                           0000D4   275 _RS1	=	0x00d4
                           0000D5   276 _F0	=	0x00d5
                           0000D6   277 _AC	=	0x00d6
                           0000D7   278 _CY	=	0x00d7
                                    279 ;--------------------------------------------------------
                                    280 ; overlayable register banks
                                    281 ;--------------------------------------------------------
                                    282 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        283 	.ds 8
                                    284 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable bit register bank
                                    288 ;--------------------------------------------------------
                                    289 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        290 bits:
      000000                        291 	.ds 1
                           008000   292 	b0 = bits[0]
                           008100   293 	b1 = bits[1]
                           008200   294 	b2 = bits[2]
                           008300   295 	b3 = bits[3]
                           008400   296 	b4 = bits[4]
                           008500   297 	b5 = bits[5]
                           008600   298 	b6 = bits[6]
                           008700   299 	b7 = bits[7]
                                    300 ;--------------------------------------------------------
                                    301 ; internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area DSEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; overlayable items in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 ;--------------------------------------------------------
                                    308 ; Stack segment in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 	.area	SSEG
      000000                        311 __start__stack:
      000000                        312 	.ds	1
                                    313 
                                    314 ;--------------------------------------------------------
                                    315 ; indirectly addressable internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area ISEG    (DATA)
      000000                        318 _digits:
      000000                        319 	.ds 16
      000010                        320 _i0:
      000010                        321 	.ds 1
      000011                        322 _i1:
      000011                        323 	.ds 1
      000012                        324 _OE76:
      000012                        325 	.ds 1
      000013                        326 _x:
      000013                        327 	.ds 2
      000015                        328 _y:
      000015                        329 	.ds 2
      000017                        330 _j:
      000017                        331 	.ds 2
      000019                        332 _c:
      000019                        333 	.ds 2
      00001B                        334 _n:
      00001B                        335 	.ds 1
      00001C                        336 _fixed:
      00001C                        337 	.ds 1
      00001D                        338 _cycle2:
      00001D                        339 	.ds 1
      00001E                        340 _x1:
      00001E                        341 	.ds 2
      000020                        342 _y1:
      000020                        343 	.ds 2
      000022                        344 _generation:
      000022                        345 	.ds 4
                                    346 ;--------------------------------------------------------
                                    347 ; absolute internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area IABS    (ABS,DATA)
                                    350 	.area IABS    (ABS,DATA)
                                    351 ;--------------------------------------------------------
                                    352 ; bit data
                                    353 ;--------------------------------------------------------
                                    354 	.area BSEG    (BIT)
                                    355 ;--------------------------------------------------------
                                    356 ; paged external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area PSEG    (PAG,XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XSEG    (XDATA)
                           008000   363 _RND	=	0x8000
                           00F006   364 _OEreg	=	0xf006
      000000                        365 _iu:
      000000                        366 	.ds 9216
      002400                        367 _pu:
      002400                        368 	.ds 9216
      004800                        369 _u:
      004800                        370 	.ds 9216
      006C00                        371 _nu:
      006C00                        372 	.ds 9216
                                    373 ;--------------------------------------------------------
                                    374 ; absolute external ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XABS    (ABS,XDATA)
                                    377 ;--------------------------------------------------------
                                    378 ; external initialized ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area XISEG   (XDATA)
                                    381 	.area HOME    (CODE)
                                    382 	.area GSINIT0 (CODE)
                                    383 	.area GSINIT1 (CODE)
                                    384 	.area GSINIT2 (CODE)
                                    385 	.area GSINIT3 (CODE)
                                    386 	.area GSINIT4 (CODE)
                                    387 	.area GSINIT5 (CODE)
                                    388 	.area GSINIT  (CODE)
                                    389 	.area GSFINAL (CODE)
                                    390 	.area CSEG    (CODE)
                                    391 ;--------------------------------------------------------
                                    392 ; interrupt vector 
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
      000000                        395 __interrupt_vect:
      000000 02r00r00         [24]  396 	ljmp	__sdcc_gsinit_startup
      000003 02r00r22         [24]  397 	ljmp	_int0
      000006                        398 	.ds	5
      00000B 32               [24]  399 	reti
      00000C                        400 	.ds	7
      000013 02r00r2E         [24]  401 	ljmp	_int1
                                    402 ;--------------------------------------------------------
                                    403 ; global & static initialisations
                                    404 ;--------------------------------------------------------
                                    405 	.area HOME    (CODE)
                                    406 	.area GSINIT  (CODE)
                                    407 	.area GSFINAL (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.globl __sdcc_gsinit_startup
                                    410 	.globl __sdcc_program_startup
                                    411 	.globl __start__stack
                                    412 	.globl __mcs51_genXINIT
                                    413 	.globl __mcs51_genXRAMCLEAR
                                    414 	.globl __mcs51_genRAMCLEAR
                                    415 ;	life.c:44: __idata static const char digits[16] = {
      000000 78r00            [12]  416 	mov	r0,#_digits
      000002 76 30            [12]  417 	mov	@r0,#0x30
      000004 78r01            [12]  418 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  419 	mov	@r0,#0x31
      000008 78r02            [12]  420 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  421 	mov	@r0,#0x32
      00000C 78r03            [12]  422 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  423 	mov	@r0,#0x33
      000010 78r04            [12]  424 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  425 	mov	@r0,#0x34
      000014 78r05            [12]  426 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  427 	mov	@r0,#0x35
      000018 78r06            [12]  428 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  429 	mov	@r0,#0x36
      00001C 78r07            [12]  430 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  431 	mov	@r0,#0x37
      000020 78r08            [12]  432 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  433 	mov	@r0,#0x38
      000024 78r09            [12]  434 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  435 	mov	@r0,#0x39
      000028 78r0A            [12]  436 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  437 	mov	@r0,#0x41
      00002C 78r0B            [12]  438 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  439 	mov	@r0,#0x42
      000030 78r0C            [12]  440 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  441 	mov	@r0,#0x43
      000034 78r0D            [12]  442 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  443 	mov	@r0,#0x44
      000038 78r0E            [12]  444 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  445 	mov	@r0,#0x45
      00003C 78r0F            [12]  446 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  447 	mov	@r0,#0x46
                                    448 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  449 	ljmp	__sdcc_program_startup
                                    450 ;--------------------------------------------------------
                                    451 ; Home
                                    452 ;--------------------------------------------------------
                                    453 	.area HOME    (CODE)
                                    454 	.area HOME    (CODE)
      000016                        455 __sdcc_program_startup:
      000016 02r02r63         [24]  456 	ljmp	_main
                                    457 ;	return from main will return to caller
                                    458 ;--------------------------------------------------------
                                    459 ; code
                                    460 ;--------------------------------------------------------
                                    461 	.area CSEG    (CODE)
                                    462 ;------------------------------------------------------------
                                    463 ;Allocation info for local variables in function 'putchar'
                                    464 ;------------------------------------------------------------
                                    465 ;c                         Allocated to registers 
                                    466 ;------------------------------------------------------------
                                    467 ;	life.c:10: int putchar(int c) __naked {
                                    468 ;	-----------------------------------------
                                    469 ;	 function putchar
                                    470 ;	-----------------------------------------
      000000                        471 _putchar:
                                    472 ;	naked function: no prologue.
                                    473 ;	life.c:15: __endasm;
      000000 E5 82            [12]  474 	mov	a, dpl
      000002 02 00 30         [24]  475 	ljmp	0x0030
                                    476 ;	life.c:16: }
                                    477 ;	naked function: no epilogue.
                                    478 ;------------------------------------------------------------
                                    479 ;Allocation info for local variables in function 'getchar'
                                    480 ;------------------------------------------------------------
                                    481 ;	life.c:18: int getchar(void) __naked {
                                    482 ;	-----------------------------------------
                                    483 ;	 function getchar
                                    484 ;	-----------------------------------------
      000005                        485 _getchar:
                                    486 ;	naked function: no prologue.
                                    487 ;	life.c:24: __endasm;
      000005 12 00 32         [24]  488 	lcall	0x0032
      000008 F5 82            [12]  489 	mov	dpl, a
      00000A 75 83 00         [24]  490 	mov	dph, #0
      00000D 22               [24]  491 	ret
                                    492 ;	life.c:25: }
                                    493 ;	naked function: no epilogue.
                                    494 ;------------------------------------------------------------
                                    495 ;Allocation info for local variables in function 'getchar_poll'
                                    496 ;------------------------------------------------------------
                                    497 ;	life.c:27: int getchar_poll(void) __naked {
                                    498 ;	-----------------------------------------
                                    499 ;	 function getchar_poll
                                    500 ;	-----------------------------------------
      00000E                        501 _getchar_poll:
                                    502 ;	naked function: no prologue.
                                    503 ;	life.c:39: __endasm;
      00000E 74 FF            [12]  504 	mov	a, #0xff
      000010 F5 F0            [12]  505 	mov	b, a
      000012 30 98 07         [24]  506 	jnb	ri, nochar
      000015 C2 98            [12]  507 	clr	ri
      000017 E5 99            [12]  508 	mov	a, sbuf
      000019 75 F0 00         [24]  509 	mov	b, #0
      00001C                        510 	nochar:
      00001C F5 82            [12]  511 	mov	dpl, a
      00001E 85 F0 83         [24]  512 	mov	dph, b
      000021 22               [24]  513 	ret
                                    514 ;	life.c:40: }
                                    515 ;	naked function: no epilogue.
                                    516 ;------------------------------------------------------------
                                    517 ;Allocation info for local variables in function 'int0'
                                    518 ;------------------------------------------------------------
                                    519 ;	life.c:73: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    520 ;	-----------------------------------------
                                    521 ;	 function int0
                                    522 ;	-----------------------------------------
      000022                        523 _int0:
                           00000F   524 	ar7 = 0x0f
                           00000E   525 	ar6 = 0x0e
                           00000D   526 	ar5 = 0x0d
                           00000C   527 	ar4 = 0x0c
                           00000B   528 	ar3 = 0x0b
                           00000A   529 	ar2 = 0x0a
                           000009   530 	ar1 = 0x09
                           000008   531 	ar0 = 0x08
      000022 C0 D0            [24]  532 	push	psw
      000024 75 D0 08         [24]  533 	mov	psw,#0x08
                                    534 ;	life.c:74: i0 = 1;
      000027 78r10            [12]  535 	mov	r0,#_i0
      000029 76 01            [12]  536 	mov	@r0,#0x01
                                    537 ;	life.c:75: }
      00002B D0 D0            [24]  538 	pop	psw
      00002D 32               [24]  539 	reti
                                    540 ;	eliminated unneeded push/pop dpl
                                    541 ;	eliminated unneeded push/pop dph
                                    542 ;	eliminated unneeded push/pop b
                                    543 ;	eliminated unneeded push/pop acc
                                    544 ;------------------------------------------------------------
                                    545 ;Allocation info for local variables in function 'int1'
                                    546 ;------------------------------------------------------------
                                    547 ;	life.c:77: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    548 ;	-----------------------------------------
                                    549 ;	 function int1
                                    550 ;	-----------------------------------------
      00002E                        551 _int1:
      00002E C0 D0            [24]  552 	push	psw
      000030 75 D0 08         [24]  553 	mov	psw,#0x08
                                    554 ;	life.c:78: i1 = 1;
      000033 78r11            [12]  555 	mov	r0,#_i1
      000035 76 01            [12]  556 	mov	@r0,#0x01
                                    557 ;	life.c:79: }
      000037 D0 D0            [24]  558 	pop	psw
      000039 32               [24]  559 	reti
                                    560 ;	eliminated unneeded push/pop dpl
                                    561 ;	eliminated unneeded push/pop dph
                                    562 ;	eliminated unneeded push/pop b
                                    563 ;	eliminated unneeded push/pop acc
                                    564 ;------------------------------------------------------------
                                    565 ;Allocation info for local variables in function 'flashOE'
                                    566 ;------------------------------------------------------------
                                    567 ;	life.c:89: static void flashOE(void) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function flashOE
                                    570 ;	-----------------------------------------
      00003A                        571 _flashOE:
                           000007   572 	ar7 = 0x07
                           000006   573 	ar6 = 0x06
                           000005   574 	ar5 = 0x05
                           000004   575 	ar4 = 0x04
                           000003   576 	ar3 = 0x03
                           000002   577 	ar2 = 0x02
                           000001   578 	ar1 = 0x01
                           000000   579 	ar0 = 0x00
                                    580 ;	life.c:90: P1_7 = 0;
                                    581 ;	assignBit
      00003A C2 97            [12]  582 	clr	_P1_7
                                    583 ;	life.c:91: OEreg = OE76;
      00003C 78r12            [12]  584 	mov	r0,#_OE76
      00003E 90 F0 06         [24]  585 	mov	dptr,#_OEreg
      000041 E6               [12]  586 	mov	a,@r0
      000042 F0               [24]  587 	movx	@dptr,a
                                    588 ;	life.c:92: P1_7 = 1;
                                    589 ;	assignBit
      000043 D2 97            [12]  590 	setb	_P1_7
                                    591 ;	life.c:94: return;
                                    592 ;	life.c:95: }
      000045 22               [24]  593 	ret
                                    594 ;------------------------------------------------------------
                                    595 ;Allocation info for local variables in function 'show'
                                    596 ;------------------------------------------------------------
                                    597 ;hdr                       Allocated to registers r7 
                                    598 ;__1310720005              Allocated to registers 
                                    599 ;s                         Allocated to registers r4 r5 r6 
                                    600 ;__1966080007              Allocated to registers 
                                    601 ;s                         Allocated to registers r5 r6 r7 
                                    602 ;__1310720001              Allocated to registers r6 r7 
                                    603 ;a                         Allocated to registers 
                                    604 ;__1310720003              Allocated to registers r6 r7 
                                    605 ;a                         Allocated to registers 
                                    606 ;__1966080010              Allocated to registers 
                                    607 ;s                         Allocated to registers r5 r6 r7 
                                    608 ;__2621440013              Allocated to registers 
                                    609 ;s                         Allocated to registers r5 r6 r7 
                                    610 ;__1310720015              Allocated to registers 
                                    611 ;s                         Allocated to registers r5 r6 r7 
                                    612 ;------------------------------------------------------------
                                    613 ;	life.c:131: void show(char hdr) {
                                    614 ;	-----------------------------------------
                                    615 ;	 function show
                                    616 ;	-----------------------------------------
      000046                        617 _show:
      000046 AF 82            [24]  618 	mov	r7,dpl
                                    619 ;	life.c:132: printstr("\033[?25l");
      000048 7Cr00            [12]  620 	mov	r4,#___str_0
      00004A 7Ds00            [12]  621 	mov	r5,#(___str_0 >> 8)
      00004C 7E 80            [12]  622 	mov	r6,#0x80
                                    623 ;	life.c:68: return;
      00004E                        624 00125$:
                                    625 ;	life.c:66: for (; *s; s++) putchar(*s);
      00004E 8C 82            [24]  626 	mov	dpl,r4
      000050 8D 83            [24]  627 	mov	dph,r5
      000052 8E F0            [24]  628 	mov	b,r6
      000054 12r00r00         [24]  629 	lcall	__gptrget
      000057 FB               [12]  630 	mov	r3,a
      000058 60 10            [24]  631 	jz	00109$
      00005A 7A 00            [12]  632 	mov	r2,#0x00
      00005C 8B 82            [24]  633 	mov	dpl,r3
      00005E 8A 83            [24]  634 	mov	dph,r2
      000060 12r00r00         [24]  635 	lcall	_putchar
      000063 0C               [12]  636 	inc	r4
                                    637 ;	life.c:132: printstr("\033[?25l");
      000064 BC 00 E7         [24]  638 	cjne	r4,#0x00,00125$
      000067 0D               [12]  639 	inc	r5
      000068 80 E4            [24]  640 	sjmp	00125$
      00006A                        641 00109$:
                                    642 ;	life.c:134: if (hdr) {
      00006A EF               [12]  643 	mov	a,r7
      00006B 70 03            [24]  644 	jnz	00220$
      00006D 02r01rA6         [24]  645 	ljmp	00102$
      000070                        646 00220$:
                                    647 ;	life.c:135: printstr("\033[2JGEN ");
      000070 7Dr07            [12]  648 	mov	r5,#___str_1
      000072 7Es00            [12]  649 	mov	r6,#(___str_1 >> 8)
      000074 7F 80            [12]  650 	mov	r7,#0x80
                                    651 ;	life.c:68: return;
      000076                        652 00128$:
                                    653 ;	life.c:66: for (; *s; s++) putchar(*s);
      000076 8D 82            [24]  654 	mov	dpl,r5
      000078 8E 83            [24]  655 	mov	dph,r6
      00007A 8F F0            [24]  656 	mov	b,r7
      00007C 12r00r00         [24]  657 	lcall	__gptrget
      00007F FC               [12]  658 	mov	r4,a
      000080 60 10            [24]  659 	jz	00111$
      000082 7B 00            [12]  660 	mov	r3,#0x00
      000084 8C 82            [24]  661 	mov	dpl,r4
      000086 8B 83            [24]  662 	mov	dph,r3
      000088 12r00r00         [24]  663 	lcall	_putchar
      00008B 0D               [12]  664 	inc	r5
                                    665 ;	life.c:135: printstr("\033[2JGEN ");
      00008C BD 00 E7         [24]  666 	cjne	r5,#0x00,00128$
      00008F 0E               [12]  667 	inc	r6
      000090 80 E4            [24]  668 	sjmp	00128$
      000092                        669 00111$:
                                    670 ;	life.c:125: print16x(generation[1]);
      000092 78r24            [12]  671 	mov	r0,#(_generation + 0x0002)
      000094 86 06            [24]  672 	mov	ar6,@r0
      000096 08               [12]  673 	inc	r0
                                    674 ;	life.c:57: putchar(digits[(a >> 12) & 0xf]);
      000097 E6               [12]  675 	mov	a,@r0
      000098 FF               [12]  676 	mov	r7,a
      000099 C4               [12]  677 	swap	a
      00009A 54 0F            [12]  678 	anl	a,#0x0f
      00009C FC               [12]  679 	mov	r4,a
      00009D 53 04 0F         [24]  680 	anl	ar4,#0x0f
      0000A0 EC               [12]  681 	mov	a,r4
      0000A1 24r00            [12]  682 	add	a,#_digits
      0000A3 F9               [12]  683 	mov	r1,a
      0000A4 87 05            [24]  684 	mov	ar5,@r1
      0000A6 7C 00            [12]  685 	mov	r4,#0x00
      0000A8 8D 82            [24]  686 	mov	dpl,r5
      0000AA 8C 83            [24]  687 	mov	dph,r4
      0000AC 12r00r00         [24]  688 	lcall	_putchar
                                    689 ;	life.c:58: putchar(digits[(a >> 8) & 0xf]);
      0000AF 8F 05            [24]  690 	mov	ar5,r7
      0000B1 53 05 0F         [24]  691 	anl	ar5,#0x0f
      0000B4 ED               [12]  692 	mov	a,r5
      0000B5 24r00            [12]  693 	add	a,#_digits
      0000B7 F9               [12]  694 	mov	r1,a
      0000B8 87 05            [24]  695 	mov	ar5,@r1
      0000BA 7C 00            [12]  696 	mov	r4,#0x00
      0000BC 8D 82            [24]  697 	mov	dpl,r5
      0000BE 8C 83            [24]  698 	mov	dph,r4
      0000C0 12r00r00         [24]  699 	lcall	_putchar
                                    700 ;	life.c:59: putchar(digits[(a >> 4) & 0xf]);
      0000C3 8E 04            [24]  701 	mov	ar4,r6
      0000C5 EF               [12]  702 	mov	a,r7
      0000C6 C4               [12]  703 	swap	a
      0000C7 CC               [12]  704 	xch	a,r4
      0000C8 C4               [12]  705 	swap	a
      0000C9 54 0F            [12]  706 	anl	a,#0x0f
      0000CB 6C               [12]  707 	xrl	a,r4
      0000CC CC               [12]  708 	xch	a,r4
      0000CD 54 0F            [12]  709 	anl	a,#0x0f
      0000CF CC               [12]  710 	xch	a,r4
      0000D0 6C               [12]  711 	xrl	a,r4
      0000D1 CC               [12]  712 	xch	a,r4
      0000D2 53 04 0F         [24]  713 	anl	ar4,#0x0f
      0000D5 EC               [12]  714 	mov	a,r4
      0000D6 24r00            [12]  715 	add	a,#_digits
      0000D8 F9               [12]  716 	mov	r1,a
      0000D9 87 05            [24]  717 	mov	ar5,@r1
      0000DB 7C 00            [12]  718 	mov	r4,#0x00
      0000DD 8D 82            [24]  719 	mov	dpl,r5
      0000DF 8C 83            [24]  720 	mov	dph,r4
      0000E1 12r00r00         [24]  721 	lcall	_putchar
                                    722 ;	life.c:60: putchar(digits[a & 0xf]);
      0000E4 53 06 0F         [24]  723 	anl	ar6,#0x0f
      0000E7 EE               [12]  724 	mov	a,r6
      0000E8 24r00            [12]  725 	add	a,#_digits
      0000EA F9               [12]  726 	mov	r1,a
      0000EB 87 07            [24]  727 	mov	ar7,@r1
      0000ED 7E 00            [12]  728 	mov	r6,#0x00
      0000EF 8F 82            [24]  729 	mov	dpl,r7
      0000F1 8E 83            [24]  730 	mov	dph,r6
      0000F3 12r00r00         [24]  731 	lcall	_putchar
                                    732 ;	life.c:126: print16x(generation[0]);
      0000F6 78r22            [12]  733 	mov	r0,#_generation
      0000F8 86 06            [24]  734 	mov	ar6,@r0
      0000FA 08               [12]  735 	inc	r0
                                    736 ;	life.c:57: putchar(digits[(a >> 12) & 0xf]);
      0000FB E6               [12]  737 	mov	a,@r0
      0000FC FF               [12]  738 	mov	r7,a
      0000FD C4               [12]  739 	swap	a
      0000FE 54 0F            [12]  740 	anl	a,#0x0f
      000100 FC               [12]  741 	mov	r4,a
      000101 53 04 0F         [24]  742 	anl	ar4,#0x0f
      000104 EC               [12]  743 	mov	a,r4
      000105 24r00            [12]  744 	add	a,#_digits
      000107 F9               [12]  745 	mov	r1,a
      000108 87 05            [24]  746 	mov	ar5,@r1
      00010A 7C 00            [12]  747 	mov	r4,#0x00
      00010C 8D 82            [24]  748 	mov	dpl,r5
      00010E 8C 83            [24]  749 	mov	dph,r4
      000110 12r00r00         [24]  750 	lcall	_putchar
                                    751 ;	life.c:58: putchar(digits[(a >> 8) & 0xf]);
      000113 8F 05            [24]  752 	mov	ar5,r7
      000115 53 05 0F         [24]  753 	anl	ar5,#0x0f
      000118 ED               [12]  754 	mov	a,r5
      000119 24r00            [12]  755 	add	a,#_digits
      00011B F9               [12]  756 	mov	r1,a
      00011C 87 05            [24]  757 	mov	ar5,@r1
      00011E 7C 00            [12]  758 	mov	r4,#0x00
      000120 8D 82            [24]  759 	mov	dpl,r5
      000122 8C 83            [24]  760 	mov	dph,r4
      000124 12r00r00         [24]  761 	lcall	_putchar
                                    762 ;	life.c:59: putchar(digits[(a >> 4) & 0xf]);
      000127 8E 04            [24]  763 	mov	ar4,r6
      000129 EF               [12]  764 	mov	a,r7
      00012A C4               [12]  765 	swap	a
      00012B CC               [12]  766 	xch	a,r4
      00012C C4               [12]  767 	swap	a
      00012D 54 0F            [12]  768 	anl	a,#0x0f
      00012F 6C               [12]  769 	xrl	a,r4
      000130 CC               [12]  770 	xch	a,r4
      000131 54 0F            [12]  771 	anl	a,#0x0f
      000133 CC               [12]  772 	xch	a,r4
      000134 6C               [12]  773 	xrl	a,r4
      000135 CC               [12]  774 	xch	a,r4
      000136 53 04 0F         [24]  775 	anl	ar4,#0x0f
      000139 EC               [12]  776 	mov	a,r4
      00013A 24r00            [12]  777 	add	a,#_digits
      00013C F9               [12]  778 	mov	r1,a
      00013D 87 05            [24]  779 	mov	ar5,@r1
      00013F 7C 00            [12]  780 	mov	r4,#0x00
      000141 8D 82            [24]  781 	mov	dpl,r5
      000143 8C 83            [24]  782 	mov	dph,r4
      000145 12r00r00         [24]  783 	lcall	_putchar
                                    784 ;	life.c:60: putchar(digits[a & 0xf]);
      000148 53 06 0F         [24]  785 	anl	ar6,#0x0f
      00014B EE               [12]  786 	mov	a,r6
      00014C 24r00            [12]  787 	add	a,#_digits
      00014E F9               [12]  788 	mov	r1,a
      00014F 87 07            [24]  789 	mov	ar7,@r1
      000151 7E 00            [12]  790 	mov	r6,#0x00
      000153 8F 82            [24]  791 	mov	dpl,r7
      000155 8E 83            [24]  792 	mov	dph,r6
      000157 12r00r00         [24]  793 	lcall	_putchar
                                    794 ;	life.c:137: printstr("\r\n");
      00015A 7Dr10            [12]  795 	mov	r5,#___str_2
      00015C 7Es00            [12]  796 	mov	r6,#(___str_2 >> 8)
      00015E 7F 80            [12]  797 	mov	r7,#0x80
                                    798 ;	life.c:68: return;
      000160                        799 00131$:
                                    800 ;	life.c:66: for (; *s; s++) putchar(*s);
      000160 8D 82            [24]  801 	mov	dpl,r5
      000162 8E 83            [24]  802 	mov	dph,r6
      000164 8F F0            [24]  803 	mov	b,r7
      000166 12r00r00         [24]  804 	lcall	__gptrget
      000169 FC               [12]  805 	mov	r4,a
      00016A 60 10            [24]  806 	jz	00116$
      00016C 7B 00            [12]  807 	mov	r3,#0x00
      00016E 8C 82            [24]  808 	mov	dpl,r4
      000170 8B 83            [24]  809 	mov	dph,r3
      000172 12r00r00         [24]  810 	lcall	_putchar
      000175 0D               [12]  811 	inc	r5
                                    812 ;	life.c:137: printstr("\r\n");
      000176 BD 00 E7         [24]  813 	cjne	r5,#0x00,00131$
      000179 0E               [12]  814 	inc	r6
      00017A 80 E4            [24]  815 	sjmp	00131$
      00017C                        816 00116$:
                                    817 ;	life.c:118: generation[0]++;
      00017C 78r22            [12]  818 	mov	r0,#_generation
      00017E 86 06            [24]  819 	mov	ar6,@r0
      000180 08               [12]  820 	inc	r0
      000181 86 07            [24]  821 	mov	ar7,@r0
      000183 0E               [12]  822 	inc	r6
      000184 BE 00 01         [24]  823 	cjne	r6,#0x00,00225$
      000187 0F               [12]  824 	inc	r7
      000188                        825 00225$:
      000188 78r22            [12]  826 	mov	r0,#_generation
      00018A A6 06            [24]  827 	mov	@r0,ar6
      00018C 08               [12]  828 	inc	r0
      00018D A6 07            [24]  829 	mov	@r0,ar7
                                    830 ;	life.c:119: if (!generation[0]) generation[1]++;
      00018F EE               [12]  831 	mov	a,r6
      000190 4F               [12]  832 	orl	a,r7
      000191 70 13            [24]  833 	jnz	00102$
      000193 78r24            [12]  834 	mov	r0,#(_generation + 0x0002)
      000195 86 06            [24]  835 	mov	ar6,@r0
      000197 08               [12]  836 	inc	r0
      000198 86 07            [24]  837 	mov	ar7,@r0
      00019A 0E               [12]  838 	inc	r6
      00019B BE 00 01         [24]  839 	cjne	r6,#0x00,00227$
      00019E 0F               [12]  840 	inc	r7
      00019F                        841 00227$:
      00019F 78r24            [12]  842 	mov	r0,#(_generation + 0x0002)
      0001A1 A6 06            [24]  843 	mov	@r0,ar6
      0001A3 08               [12]  844 	inc	r0
      0001A4 A6 07            [24]  845 	mov	@r0,ar7
                                    846 ;	life.c:138: updategen();
      0001A6                        847 00102$:
                                    848 ;	life.c:141: for (x = 0; x < W; x++) {
      0001A6 78r13            [12]  849 	mov	r0,#_x
      0001A8 E4               [12]  850 	clr	a
      0001A9 F6               [12]  851 	mov	@r0,a
      0001AA 08               [12]  852 	inc	r0
      0001AB F6               [12]  853 	mov	@r0,a
      0001AC                        854 00138$:
                                    855 ;	life.c:142: for (y = 0; y < H; y++)
      0001AC 78r15            [12]  856 	mov	r0,#_y
      0001AE E4               [12]  857 	clr	a
      0001AF F6               [12]  858 	mov	@r0,a
      0001B0 08               [12]  859 	inc	r0
      0001B1 F6               [12]  860 	mov	@r0,a
      0001B2                        861 00133$:
                                    862 ;	life.c:143: if (u[A2D(W, y, x)]) putchar('1');
      0001B2 78r15            [12]  863 	mov	r0,#_y
      0001B4 E6               [12]  864 	mov	a,@r0
      0001B5 C0 E0            [24]  865 	push	acc
      0001B7 08               [12]  866 	inc	r0
      0001B8 E6               [12]  867 	mov	a,@r0
      0001B9 C0 E0            [24]  868 	push	acc
      0001BB 90 00 30         [24]  869 	mov	dptr,#0x0030
      0001BE 12r00r00         [24]  870 	lcall	__mulint
      0001C1 AE 82            [24]  871 	mov	r6,dpl
      0001C3 AF 83            [24]  872 	mov	r7,dph
      0001C5 15 81            [12]  873 	dec	sp
      0001C7 15 81            [12]  874 	dec	sp
      0001C9 78r13            [12]  875 	mov	r0,#_x
      0001CB E6               [12]  876 	mov	a,@r0
      0001CC 2E               [12]  877 	add	a,r6
      0001CD FE               [12]  878 	mov	r6,a
      0001CE 08               [12]  879 	inc	r0
      0001CF E6               [12]  880 	mov	a,@r0
      0001D0 3F               [12]  881 	addc	a,r7
      0001D1 FF               [12]  882 	mov	r7,a
      0001D2 EE               [12]  883 	mov	a,r6
      0001D3 24r00            [12]  884 	add	a,#_u
      0001D5 FE               [12]  885 	mov	r6,a
      0001D6 EF               [12]  886 	mov	a,r7
      0001D7 34s48            [12]  887 	addc	a,#(_u >> 8)
      0001D9 FF               [12]  888 	mov	r7,a
      0001DA 8E 82            [24]  889 	mov	dpl,r6
      0001DC 8F 83            [24]  890 	mov	dph,r7
      0001DE E0               [24]  891 	movx	a,@dptr
      0001DF 60 08            [24]  892 	jz	00104$
      0001E1 90 00 31         [24]  893 	mov	dptr,#0x0031
      0001E4 12r00r00         [24]  894 	lcall	_putchar
      0001E7 80 06            [24]  895 	sjmp	00134$
      0001E9                        896 00104$:
                                    897 ;	life.c:144: else putchar('0');
      0001E9 90 00 30         [24]  898 	mov	dptr,#0x0030
      0001EC 12r00r00         [24]  899 	lcall	_putchar
      0001EF                        900 00134$:
                                    901 ;	life.c:142: for (y = 0; y < H; y++)
      0001EF 78r15            [12]  902 	mov	r0,#_y
      0001F1 06               [12]  903 	inc	@r0
      0001F2 B6 00 02         [24]  904 	cjne	@r0,#0x00,00229$
      0001F5 08               [12]  905 	inc	r0
      0001F6 06               [12]  906 	inc	@r0
      0001F7                        907 00229$:
      0001F7 78r15            [12]  908 	mov	r0,#_y
      0001F9 C3               [12]  909 	clr	c
      0001FA E6               [12]  910 	mov	a,@r0
      0001FB 94 C0            [12]  911 	subb	a,#0xc0
      0001FD 08               [12]  912 	inc	r0
      0001FE E6               [12]  913 	mov	a,@r0
      0001FF 64 80            [12]  914 	xrl	a,#0x80
      000201 94 80            [12]  915 	subb	a,#0x80
      000203 40 AD            [24]  916 	jc	00133$
                                    917 ;	life.c:145: printstr("\r\n");
      000205 7Dr10            [12]  918 	mov	r5,#___str_2
      000207 7Es00            [12]  919 	mov	r6,#(___str_2 >> 8)
      000209 7F 80            [12]  920 	mov	r7,#0x80
                                    921 ;	life.c:68: return;
      00020B                        922 00136$:
                                    923 ;	life.c:66: for (; *s; s++) putchar(*s);
      00020B 8D 82            [24]  924 	mov	dpl,r5
      00020D 8E 83            [24]  925 	mov	dph,r6
      00020F 8F F0            [24]  926 	mov	b,r7
      000211 12r00r00         [24]  927 	lcall	__gptrget
      000214 FC               [12]  928 	mov	r4,a
      000215 60 10            [24]  929 	jz	00121$
      000217 7B 00            [12]  930 	mov	r3,#0x00
      000219 8C 82            [24]  931 	mov	dpl,r4
      00021B 8B 83            [24]  932 	mov	dph,r3
      00021D 12r00r00         [24]  933 	lcall	_putchar
      000220 0D               [12]  934 	inc	r5
                                    935 ;	life.c:145: printstr("\r\n");
      000221 BD 00 E7         [24]  936 	cjne	r5,#0x00,00136$
      000224 0E               [12]  937 	inc	r6
      000225 80 E4            [24]  938 	sjmp	00136$
      000227                        939 00121$:
                                    940 ;	life.c:141: for (x = 0; x < W; x++) {
      000227 78r13            [12]  941 	mov	r0,#_x
      000229 06               [12]  942 	inc	@r0
      00022A B6 00 02         [24]  943 	cjne	@r0,#0x00,00233$
      00022D 08               [12]  944 	inc	r0
      00022E 06               [12]  945 	inc	@r0
      00022F                        946 00233$:
      00022F 78r13            [12]  947 	mov	r0,#_x
      000231 C3               [12]  948 	clr	c
      000232 E6               [12]  949 	mov	a,@r0
      000233 94 30            [12]  950 	subb	a,#0x30
      000235 08               [12]  951 	inc	r0
      000236 E6               [12]  952 	mov	a,@r0
      000237 64 80            [12]  953 	xrl	a,#0x80
      000239 94 80            [12]  954 	subb	a,#0x80
      00023B 50 03            [24]  955 	jnc	00234$
      00023D 02r01rAC         [24]  956 	ljmp	00138$
      000240                        957 00234$:
                                    958 ;	life.c:148: printstr("\033[?25h");
      000240 7Dr13            [12]  959 	mov	r5,#___str_3
      000242 7Es00            [12]  960 	mov	r6,#(___str_3 >> 8)
      000244 7F 80            [12]  961 	mov	r7,#0x80
                                    962 ;	life.c:68: return;
      000246                        963 00141$:
                                    964 ;	life.c:66: for (; *s; s++) putchar(*s);
      000246 8D 82            [24]  965 	mov	dpl,r5
      000248 8E 83            [24]  966 	mov	dph,r6
      00024A 8F F0            [24]  967 	mov	b,r7
      00024C 12r00r00         [24]  968 	lcall	__gptrget
      00024F FC               [12]  969 	mov	r4,a
      000250 60 10            [24]  970 	jz	00123$
      000252 7B 00            [12]  971 	mov	r3,#0x00
      000254 8C 82            [24]  972 	mov	dpl,r4
      000256 8B 83            [24]  973 	mov	dph,r3
      000258 12r00r00         [24]  974 	lcall	_putchar
      00025B 0D               [12]  975 	inc	r5
                                    976 ;	life.c:148: printstr("\033[?25h");
      00025C BD 00 E7         [24]  977 	cjne	r5,#0x00,00141$
      00025F 0E               [12]  978 	inc	r6
      000260 80 E4            [24]  979 	sjmp	00141$
      000262                        980 00123$:
                                    981 ;	life.c:150: return;
                                    982 ;	life.c:151: }
      000262 22               [24]  983 	ret
                                    984 ;------------------------------------------------------------
                                    985 ;Allocation info for local variables in function 'main'
                                    986 ;------------------------------------------------------------
                                    987 ;__1310720027              Allocated to registers 
                                    988 ;s                         Allocated to registers r5 r6 r7 
                                    989 ;__2621440029              Allocated to registers 
                                    990 ;s                         Allocated to registers r5 r6 r7 
                                    991 ;__1310720017              Allocated to registers 
                                    992 ;s                         Allocated to registers r5 r6 r7 
                                    993 ;__1310720019              Allocated to registers r6 r7 
                                    994 ;a                         Allocated to registers r4 r5 
                                    995 ;__1310720021              Allocated to registers 
                                    996 ;s                         Allocated to registers r5 r6 r7 
                                    997 ;__1310720023              Allocated to registers 
                                    998 ;s                         Allocated to registers r5 r6 r7 
                                    999 ;__1310720025              Allocated to registers 
                                   1000 ;s                         Allocated to registers r5 r6 r7 
                                   1001 ;__2621440034              Allocated to registers 
                                   1002 ;s                         Allocated to registers r5 r6 r7 
                                   1003 ;__4587520038              Allocated to registers 
                                   1004 ;s                         Allocated to registers r5 r6 r7 
                                   1005 ;__4587520040              Allocated to registers 
                                   1006 ;s                         Allocated to registers r5 r6 r7 
                                   1007 ;__4587520042              Allocated to registers 
                                   1008 ;s                         Allocated to registers r5 r6 r7 
                                   1009 ;__3276800044              Allocated to registers 
                                   1010 ;s                         Allocated to registers r5 r6 r7 
                                   1011 ;__1310720046              Allocated to registers 
                                   1012 ;s                         Allocated to registers r5 r6 r7 
                                   1013 ;sloc0                     Allocated to stack - _bp +1
                                   1014 ;sloc1                     Allocated to stack - _bp +2
                                   1015 ;sloc2                     Allocated to stack - _bp +4
                                   1016 ;sloc3                     Allocated to stack - _bp +6
                                   1017 ;sloc4                     Allocated to stack - _bp +8
                                   1018 ;sloc5                     Allocated to stack - _bp +10
                                   1019 ;sloc6                     Allocated to stack - _bp +12
                                   1020 ;------------------------------------------------------------
                                   1021 ;	life.c:262: void main(void) {
                                   1022 ;	-----------------------------------------
                                   1023 ;	 function main
                                   1024 ;	-----------------------------------------
      000263                       1025 _main:
      000263 C0*00            [24] 1026 	push	_bp
      000265 E5 81            [12] 1027 	mov	a,sp
      000267 F5*00            [12] 1028 	mov	_bp,a
      000269 24 0D            [12] 1029 	add	a,#0x0d
      00026B F5 81            [12] 1030 	mov	sp,a
                                   1031 ;	life.c:263: IT0 = 1;
                                   1032 ;	assignBit
      00026D D2 88            [12] 1033 	setb	_IT0
                                   1034 ;	life.c:264: IT1 = 1;
                                   1035 ;	assignBit
      00026F D2 8A            [12] 1036 	setb	_IT1
                                   1037 ;	life.c:265: EX0 = 1;
                                   1038 ;	assignBit
      000271 D2 A8            [12] 1039 	setb	_EX0
                                   1040 ;	life.c:266: EX1 = 1;
                                   1041 ;	assignBit
      000273 D2 AA            [12] 1042 	setb	_EX1
                                   1043 ;	life.c:267: EA = 1;	
                                   1044 ;	assignBit
      000275 D2 AF            [12] 1045 	setb	_EA
                                   1046 ;	life.c:268: P1_7 = 1;
                                   1047 ;	assignBit
      000277 D2 97            [12] 1048 	setb	_P1_7
                                   1049 ;	life.c:270: srand(RND);
      000279 90 80 00         [24] 1050 	mov	dptr,#_RND
      00027C E0               [24] 1051 	movx	a,@dptr
      00027D FE               [12] 1052 	mov	r6,a
      00027E A3               [24] 1053 	inc	dptr
      00027F E0               [24] 1054 	movx	a,@dptr
      000280 FF               [12] 1055 	mov	r7,a
      000281 8E 82            [24] 1056 	mov	dpl,r6
      000283 8F 83            [24] 1057 	mov	dph,r7
      000285 12r00r00         [24] 1058 	lcall	_srand
                                   1059 ;	life.c:272: OE76 = OE76_0;
      000288 78r12            [12] 1060 	mov	r0,#_OE76
      00028A 76 3F            [12] 1061 	mov	@r0,#0x3f
                                   1062 ;	life.c:273: flashOE();
      00028C 12r00r3A         [24] 1063 	lcall	_flashOE
                                   1064 ;	life.c:275: printstr("\033[?25h\033[m");
      00028F 7Dr34            [12] 1065 	mov	r5,#___str_7
      000291 7Es00            [12] 1066 	mov	r6,#(___str_7 >> 8)
      000293 7F 80            [12] 1067 	mov	r7,#0x80
                                   1068 ;	life.c:68: return;
      000295                       1069 00211$:
                                   1070 ;	life.c:66: for (; *s; s++) putchar(*s);
      000295 8D 82            [24] 1071 	mov	dpl,r5
      000297 8E 83            [24] 1072 	mov	dph,r6
      000299 8F F0            [24] 1073 	mov	b,r7
      00029B 12r00r00         [24] 1074 	lcall	__gptrget
      00029E FC               [12] 1075 	mov	r4,a
      00029F 60 10            [24] 1076 	jz	00151$
      0002A1 7B 00            [12] 1077 	mov	r3,#0x00
      0002A3 8C 82            [24] 1078 	mov	dpl,r4
      0002A5 8B 83            [24] 1079 	mov	dph,r3
      0002A7 12r00r00         [24] 1080 	lcall	_putchar
      0002AA 0D               [12] 1081 	inc	r5
                                   1082 ;	life.c:275: printstr("\033[?25h\033[m");
      0002AB BD 00 E7         [24] 1083 	cjne	r5,#0x00,00211$
      0002AE 0E               [12] 1084 	inc	r6
      0002AF 80 E4            [24] 1085 	sjmp	00211$
      0002B1                       1086 00151$:
                                   1087 ;	life.c:277: for (i0 = 0; !i0; ) {	
      0002B1 78r10            [12] 1088 	mov	r0,#_i0
      0002B3 76 00            [12] 1089 	mov	@r0,#0x00
      0002B5                       1090 00258$:
                                   1091 ;	life.c:278: printstr("LIFE INIT T L R P\r\n");
      0002B5 7Dr3E            [12] 1092 	mov	r5,#___str_8
      0002B7 7Es00            [12] 1093 	mov	r6,#(___str_8 >> 8)
      0002B9 7F 80            [12] 1094 	mov	r7,#0x80
                                   1095 ;	life.c:68: return;
      0002BB                       1096 00214$:
                                   1097 ;	life.c:66: for (; *s; s++) putchar(*s);
      0002BB 8D 82            [24] 1098 	mov	dpl,r5
      0002BD 8E 83            [24] 1099 	mov	dph,r6
      0002BF 8F F0            [24] 1100 	mov	b,r7
      0002C1 12r00r00         [24] 1101 	lcall	__gptrget
      0002C4 FC               [12] 1102 	mov	r4,a
      0002C5 60 10            [24] 1103 	jz	00110$
      0002C7 7B 00            [12] 1104 	mov	r3,#0x00
      0002C9 8C 82            [24] 1105 	mov	dpl,r4
      0002CB 8B 83            [24] 1106 	mov	dph,r3
      0002CD 12r00r00         [24] 1107 	lcall	_putchar
      0002D0 0D               [12] 1108 	inc	r5
                                   1109 ;	life.c:279: while (1) {
      0002D1 BD 00 E7         [24] 1110 	cjne	r5,#0x00,00214$
      0002D4 0E               [12] 1111 	inc	r6
      0002D5 80 E4            [24] 1112 	sjmp	00214$
      0002D7                       1113 00110$:
                                   1114 ;	life.c:280: c = toupper(getchar());
      0002D7 12r00r05         [24] 1115 	lcall	_getchar
      0002DA 12r00r00         [24] 1116 	lcall	_toupper
      0002DD AE 82            [24] 1117 	mov	r6,dpl
      0002DF AF 83            [24] 1118 	mov	r7,dph
      0002E1 78r19            [12] 1119 	mov	r0,#_c
      0002E3 A6 06            [24] 1120 	mov	@r0,ar6
      0002E5 08               [12] 1121 	inc	r0
      0002E6 A6 07            [24] 1122 	mov	@r0,ar7
                                   1123 ;	life.c:281: if (i0 || (c == (int)'T')) goto term;
      0002E8 78r10            [12] 1124 	mov	r0,#_i0
      0002EA E6               [12] 1125 	mov	a,@r0
      0002EB 60 03            [24] 1126 	jz	00551$
      0002ED 02r0Br6E         [24] 1127 	ljmp	00149$
      0002F0                       1128 00551$:
      0002F0 BE 54 06         [24] 1129 	cjne	r6,#0x54,00552$
      0002F3 BF 00 03         [24] 1130 	cjne	r7,#0x00,00552$
      0002F6 02r0Br6E         [24] 1131 	ljmp	00149$
      0002F9                       1132 00552$:
                                   1133 ;	life.c:282: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) break;
      0002F9 BE 4C 05         [24] 1134 	cjne	r6,#0x4c,00553$
      0002FC BF 00 02         [24] 1135 	cjne	r7,#0x00,00553$
      0002FF 80 0E            [24] 1136 	sjmp	00305$
      000301                       1137 00553$:
      000301 BE 52 05         [24] 1138 	cjne	r6,#0x52,00554$
      000304 BF 00 02         [24] 1139 	cjne	r7,#0x00,00554$
      000307 80 06            [24] 1140 	sjmp	00305$
      000309                       1141 00554$:
      000309 BE 50 CB         [24] 1142 	cjne	r6,#0x50,00110$
      00030C BF 00 C8         [24] 1143 	cjne	r7,#0x00,00110$
                                   1144 ;	life.c:285: reload:
      00030F                       1145 00305$:
      00030F                       1146 00112$:
                                   1147 ;	life.c:154: memset(u, 0, sizeof (u));
      00030F E4               [12] 1148 	clr	a
      000310 C0 E0            [24] 1149 	push	acc
      000312 74 24            [12] 1150 	mov	a,#0x24
      000314 C0 E0            [24] 1151 	push	acc
      000316 E4               [12] 1152 	clr	a
      000317 C0 E0            [24] 1153 	push	acc
      000319 90r48r00         [24] 1154 	mov	dptr,#_u
      00031C 75 F0 00         [24] 1155 	mov	b,#0x00
      00031F 12r00r00         [24] 1156 	lcall	_memset
      000322 15 81            [12] 1157 	dec	sp
      000324 15 81            [12] 1158 	dec	sp
      000326 15 81            [12] 1159 	dec	sp
                                   1160 ;	life.c:155: memset(pu, 0, sizeof (pu));
      000328 E4               [12] 1161 	clr	a
      000329 C0 E0            [24] 1162 	push	acc
      00032B 74 24            [12] 1163 	mov	a,#0x24
      00032D C0 E0            [24] 1164 	push	acc
      00032F E4               [12] 1165 	clr	a
      000330 C0 E0            [24] 1166 	push	acc
      000332 90r24r00         [24] 1167 	mov	dptr,#_pu
      000335 75 F0 00         [24] 1168 	mov	b,#0x00
      000338 12r00r00         [24] 1169 	lcall	_memset
      00033B 15 81            [12] 1170 	dec	sp
      00033D 15 81            [12] 1171 	dec	sp
      00033F 15 81            [12] 1172 	dec	sp
                                   1173 ;	life.c:287: if (c == (int)'L') loadiu();
      000341 78r19            [12] 1174 	mov	r0,#_c
      000343 B6 4C 06         [24] 1175 	cjne	@r0,#0x4c,00557$
      000346 08               [12] 1176 	inc	r0
      000347 B6 00 02         [24] 1177 	cjne	@r0,#0x00,00557$
      00034A 80 03            [24] 1178 	sjmp	00558$
      00034C                       1179 00557$:
      00034C 02r04rC7         [24] 1180 	ljmp	00116$
      00034F                       1181 00558$:
                                   1182 ;	life.c:161: j = 0;
      00034F 78r17            [12] 1183 	mov	r0,#_j
      000351 E4               [12] 1184 	clr	a
      000352 F6               [12] 1185 	mov	@r0,a
      000353 08               [12] 1186 	inc	r0
      000354 F6               [12] 1187 	mov	@r0,a
                                   1188 ;	life.c:163: printstr("LOAD 0 1 ~ # <");
      000355 7Dr1A            [12] 1189 	mov	r5,#___str_4
      000357 7Es00            [12] 1190 	mov	r6,#(___str_4 >> 8)
      000359 7F 80            [12] 1191 	mov	r7,#0x80
                                   1192 ;	life.c:68: return;
      00035B                       1193 00217$:
                                   1194 ;	life.c:66: for (; *s; s++) putchar(*s);
      00035B 8D 82            [24] 1195 	mov	dpl,r5
      00035D 8E 83            [24] 1196 	mov	dph,r6
      00035F 8F F0            [24] 1197 	mov	b,r7
      000361 12r00r00         [24] 1198 	lcall	__gptrget
      000364 FC               [12] 1199 	mov	r4,a
      000365 60 10            [24] 1200 	jz	00156$
      000367 7B 00            [12] 1201 	mov	r3,#0x00
      000369 8C 82            [24] 1202 	mov	dpl,r4
      00036B 8B 83            [24] 1203 	mov	dph,r3
      00036D 12r00r00         [24] 1204 	lcall	_putchar
      000370 0D               [12] 1205 	inc	r5
                                   1206 ;	life.c:163: printstr("LOAD 0 1 ~ # <");
      000371 BD 00 E7         [24] 1207 	cjne	r5,#0x00,00217$
      000374 0E               [12] 1208 	inc	r6
      000375 80 E4            [24] 1209 	sjmp	00217$
      000377                       1210 00156$:
                                   1211 ;	life.c:165: for (y = 0; y < (H * W); y += W) {
      000377 78r15            [12] 1212 	mov	r0,#_y
      000379 E4               [12] 1213 	clr	a
      00037A F6               [12] 1214 	mov	@r0,a
      00037B 08               [12] 1215 	inc	r0
      00037C F6               [12] 1216 	mov	@r0,a
      00037D                       1217 00220$:
                                   1218 ;	life.c:166: for (x = 0; x < W; x++) {
      00037D 78r13            [12] 1219 	mov	r0,#_x
      00037F E4               [12] 1220 	clr	a
      000380 F6               [12] 1221 	mov	@r0,a
      000381 08               [12] 1222 	inc	r0
      000382 F6               [12] 1223 	mov	@r0,a
                                   1224 ;	life.c:167: while (1) {
      000383                       1225 00169$:
                                   1226 ;	life.c:168: c = getchar();
      000383 12r00r05         [24] 1227 	lcall	_getchar
      000386 AE 82            [24] 1228 	mov	r6,dpl
      000388 AF 83            [24] 1229 	mov	r7,dph
      00038A 78r19            [12] 1230 	mov	r0,#_c
      00038C A6 06            [24] 1231 	mov	@r0,ar6
      00038E 08               [12] 1232 	inc	r0
      00038F A6 07            [24] 1233 	mov	@r0,ar7
                                   1234 ;	life.c:169: if (c == (int)'0') {
      000391 BE 30 25         [24] 1235 	cjne	r6,#0x30,00167$
      000394 BF 00 22         [24] 1236 	cjne	r7,#0x00,00167$
                                   1237 ;	life.c:170: iu[y + x] = 0;
      000397 78r15            [12] 1238 	mov	r0,#_y
      000399 79r13            [12] 1239 	mov	r1,#_x
      00039B E7               [12] 1240 	mov	a,@r1
      00039C 26               [12] 1241 	add	a,@r0
      00039D FC               [12] 1242 	mov	r4,a
      00039E 09               [12] 1243 	inc	r1
      00039F E7               [12] 1244 	mov	a,@r1
      0003A0 08               [12] 1245 	inc	r0
      0003A1 36               [12] 1246 	addc	a,@r0
      0003A2 FD               [12] 1247 	mov	r5,a
      0003A3 EC               [12] 1248 	mov	a,r4
      0003A4 24r00            [12] 1249 	add	a,#_iu
      0003A6 F5 82            [12] 1250 	mov	dpl,a
      0003A8 ED               [12] 1251 	mov	a,r5
      0003A9 34s00            [12] 1252 	addc	a,#(_iu >> 8)
      0003AB F5 83            [12] 1253 	mov	dph,a
      0003AD E4               [12] 1254 	clr	a
      0003AE F0               [24] 1255 	movx	@dptr,a
                                   1256 ;	life.c:171: j++;
      0003AF 78r17            [12] 1257 	mov	r0,#_j
      0003B1 06               [12] 1258 	inc	@r0
      0003B2 B6 00 02         [24] 1259 	cjne	@r0,#0x00,00563$
      0003B5 08               [12] 1260 	inc	r0
      0003B6 06               [12] 1261 	inc	@r0
      0003B7                       1262 00563$:
                                   1263 ;	life.c:172: break;
      0003B7 80 39            [24] 1264 	sjmp	00172$
      0003B9                       1265 00167$:
                                   1266 ;	life.c:173: } else if (c == (int)'1') {
      0003B9 BE 31 26         [24] 1267 	cjne	r6,#0x31,00165$
      0003BC BF 00 23         [24] 1268 	cjne	r7,#0x00,00165$
                                   1269 ;	life.c:174: iu[y + x] = 1;
      0003BF 78r15            [12] 1270 	mov	r0,#_y
      0003C1 79r13            [12] 1271 	mov	r1,#_x
      0003C3 E7               [12] 1272 	mov	a,@r1
      0003C4 26               [12] 1273 	add	a,@r0
      0003C5 FC               [12] 1274 	mov	r4,a
      0003C6 09               [12] 1275 	inc	r1
      0003C7 E7               [12] 1276 	mov	a,@r1
      0003C8 08               [12] 1277 	inc	r0
      0003C9 36               [12] 1278 	addc	a,@r0
      0003CA FD               [12] 1279 	mov	r5,a
      0003CB EC               [12] 1280 	mov	a,r4
      0003CC 24r00            [12] 1281 	add	a,#_iu
      0003CE F5 82            [12] 1282 	mov	dpl,a
      0003D0 ED               [12] 1283 	mov	a,r5
      0003D1 34s00            [12] 1284 	addc	a,#(_iu >> 8)
      0003D3 F5 83            [12] 1285 	mov	dph,a
      0003D5 74 01            [12] 1286 	mov	a,#0x01
      0003D7 F0               [24] 1287 	movx	@dptr,a
                                   1288 ;	life.c:175: j++;
      0003D8 78r17            [12] 1289 	mov	r0,#_j
      0003DA 06               [12] 1290 	inc	@r0
      0003DB B6 00 02         [24] 1291 	cjne	@r0,#0x00,00566$
      0003DE 08               [12] 1292 	inc	r0
      0003DF 06               [12] 1293 	inc	@r0
      0003E0                       1294 00566$:
                                   1295 ;	life.c:176: break;
      0003E0 80 10            [24] 1296 	sjmp	00172$
      0003E2                       1297 00165$:
                                   1298 ;	life.c:177: } else if (c == (int)'~') goto br_inner;
      0003E2 BE 7E 05         [24] 1299 	cjne	r6,#0x7e,00567$
      0003E5 BF 00 02         [24] 1300 	cjne	r7,#0x00,00567$
      0003E8 80 21            [24] 1301 	sjmp	00221$
      0003EA                       1302 00567$:
                                   1303 ;	life.c:178: else if (c == (int)'#') goto out;
                                   1304 ;	life.c:182: break;
      0003EA BE 23 96         [24] 1305 	cjne	r6,#0x23,00169$
      0003ED BF 00 93         [24] 1306 	cjne	r7,#0x00,00169$
      0003F0 80 31            [24] 1307 	sjmp	00182$
      0003F2                       1308 00172$:
                                   1309 ;	life.c:166: for (x = 0; x < W; x++) {
      0003F2 78r13            [12] 1310 	mov	r0,#_x
      0003F4 06               [12] 1311 	inc	@r0
      0003F5 B6 00 02         [24] 1312 	cjne	@r0,#0x00,00569$
      0003F8 08               [12] 1313 	inc	r0
      0003F9 06               [12] 1314 	inc	@r0
      0003FA                       1315 00569$:
      0003FA 78r13            [12] 1316 	mov	r0,#_x
      0003FC C3               [12] 1317 	clr	c
      0003FD E6               [12] 1318 	mov	a,@r0
      0003FE 94 30            [12] 1319 	subb	a,#0x30
      000400 08               [12] 1320 	inc	r0
      000401 E6               [12] 1321 	mov	a,@r0
      000402 64 80            [12] 1322 	xrl	a,#0x80
      000404 94 80            [12] 1323 	subb	a,#0x80
      000406 50 03            [24] 1324 	jnc	00570$
      000408 02r03r83         [24] 1325 	ljmp	00169$
      00040B                       1326 00570$:
      00040B                       1327 00221$:
                                   1328 ;	life.c:165: for (y = 0; y < (H * W); y += W) {
      00040B 78r15            [12] 1329 	mov	r0,#_y
      00040D 74 30            [12] 1330 	mov	a,#0x30
      00040F 26               [12] 1331 	add	a,@r0
      000410 F6               [12] 1332 	mov	@r0,a
      000411 E4               [12] 1333 	clr	a
      000412 08               [12] 1334 	inc	r0
      000413 36               [12] 1335 	addc	a,@r0
      000414 F6               [12] 1336 	mov	@r0,a
      000415 78r15            [12] 1337 	mov	r0,#_y
      000417 C3               [12] 1338 	clr	c
      000418 08               [12] 1339 	inc	r0
      000419 E6               [12] 1340 	mov	a,@r0
      00041A 64 80            [12] 1341 	xrl	a,#0x80
      00041C 94 A4            [12] 1342 	subb	a,#0xa4
      00041E 50 03            [24] 1343 	jnc	00571$
      000420 02r03r7D         [24] 1344 	ljmp	00220$
      000423                       1345 00571$:
                                   1346 ;	life.c:186: out:
      000423                       1347 00182$:
                                   1348 ;	life.c:187: if (c != (int)'#')
      000423 BE 23 05         [24] 1349 	cjne	r6,#0x23,00572$
      000426 BF 00 02         [24] 1350 	cjne	r7,#0x00,00572$
      000429 80 14            [24] 1351 	sjmp	00181$
      00042B                       1352 00572$:
                                   1353 ;	life.c:188: while (1) {
      00042B                       1354 00178$:
                                   1355 ;	life.c:189: c = getchar();
      00042B 12r00r05         [24] 1356 	lcall	_getchar
      00042E AE 82            [24] 1357 	mov	r6,dpl
      000430 AF 83            [24] 1358 	mov	r7,dph
      000432 78r19            [12] 1359 	mov	r0,#_c
      000434 A6 06            [24] 1360 	mov	@r0,ar6
      000436 08               [12] 1361 	inc	r0
      000437 A6 07            [24] 1362 	mov	@r0,ar7
                                   1363 ;	life.c:190: if (c == (int)'#') break;
      000439 BE 23 EF         [24] 1364 	cjne	r6,#0x23,00178$
      00043C BF 00 EC         [24] 1365 	cjne	r7,#0x00,00178$
      00043F                       1366 00181$:
                                   1367 ;	life.c:192: print16x(j);
      00043F 78r17            [12] 1368 	mov	r0,#_j
      000441 86 06            [24] 1369 	mov	ar6,@r0
      000443 08               [12] 1370 	inc	r0
      000444 86 07            [24] 1371 	mov	ar7,@r0
      000446 8E 04            [24] 1372 	mov	ar4,r6
                                   1373 ;	life.c:57: putchar(digits[(a >> 12) & 0xf]);
      000448 EF               [12] 1374 	mov	a,r7
      000449 FD               [12] 1375 	mov	r5,a
      00044A C4               [12] 1376 	swap	a
      00044B 54 0F            [12] 1377 	anl	a,#(0x0f&0x0f)
      00044D 24r00            [12] 1378 	add	a,#_digits
      00044F F9               [12] 1379 	mov	r1,a
      000450 87 07            [24] 1380 	mov	ar7,@r1
      000452 7E 00            [12] 1381 	mov	r6,#0x00
      000454 8F 82            [24] 1382 	mov	dpl,r7
      000456 8E 83            [24] 1383 	mov	dph,r6
      000458 12r00r00         [24] 1384 	lcall	_putchar
                                   1385 ;	life.c:58: putchar(digits[(a >> 8) & 0xf]);
      00045B 8D 07            [24] 1386 	mov	ar7,r5
      00045D 53 07 0F         [24] 1387 	anl	ar7,#0x0f
      000460 EF               [12] 1388 	mov	a,r7
      000461 24r00            [12] 1389 	add	a,#_digits
      000463 F9               [12] 1390 	mov	r1,a
      000464 87 07            [24] 1391 	mov	ar7,@r1
      000466 7E 00            [12] 1392 	mov	r6,#0x00
      000468 8F 82            [24] 1393 	mov	dpl,r7
      00046A 8E 83            [24] 1394 	mov	dph,r6
      00046C 12r00r00         [24] 1395 	lcall	_putchar
                                   1396 ;	life.c:59: putchar(digits[(a >> 4) & 0xf]);
      00046F 8C 06            [24] 1397 	mov	ar6,r4
      000471 ED               [12] 1398 	mov	a,r5
      000472 C4               [12] 1399 	swap	a
      000473 CE               [12] 1400 	xch	a,r6
      000474 C4               [12] 1401 	swap	a
      000475 54 0F            [12] 1402 	anl	a,#0x0f
      000477 6E               [12] 1403 	xrl	a,r6
      000478 CE               [12] 1404 	xch	a,r6
      000479 54 0F            [12] 1405 	anl	a,#0x0f
      00047B CE               [12] 1406 	xch	a,r6
      00047C 6E               [12] 1407 	xrl	a,r6
      00047D CE               [12] 1408 	xch	a,r6
      00047E 53 06 0F         [24] 1409 	anl	ar6,#0x0f
      000481 EE               [12] 1410 	mov	a,r6
      000482 24r00            [12] 1411 	add	a,#_digits
      000484 F9               [12] 1412 	mov	r1,a
      000485 87 07            [24] 1413 	mov	ar7,@r1
      000487 7E 00            [12] 1414 	mov	r6,#0x00
      000489 8F 82            [24] 1415 	mov	dpl,r7
      00048B 8E 83            [24] 1416 	mov	dph,r6
      00048D 12r00r00         [24] 1417 	lcall	_putchar
                                   1418 ;	life.c:60: putchar(digits[a & 0xf]);
      000490 53 04 0F         [24] 1419 	anl	ar4,#0x0f
      000493 EC               [12] 1420 	mov	a,r4
      000494 24r00            [12] 1421 	add	a,#_digits
      000496 F9               [12] 1422 	mov	r1,a
      000497 87 07            [24] 1423 	mov	ar7,@r1
      000499 7E 00            [12] 1424 	mov	r6,#0x00
      00049B 8F 82            [24] 1425 	mov	dpl,r7
      00049D 8E 83            [24] 1426 	mov	dph,r6
      00049F 12r00r00         [24] 1427 	lcall	_putchar
                                   1428 ;	life.c:193: printstr(">\r\n");
      0004A2 7Dr29            [12] 1429 	mov	r5,#___str_5
      0004A4 7Es00            [12] 1430 	mov	r6,#(___str_5 >> 8)
      0004A6 7F 80            [12] 1431 	mov	r7,#0x80
                                   1432 ;	life.c:68: return;
      0004A8                       1433 00223$:
                                   1434 ;	life.c:66: for (; *s; s++) putchar(*s);
      0004A8 8D 82            [24] 1435 	mov	dpl,r5
      0004AA 8E 83            [24] 1436 	mov	dph,r6
      0004AC 8F F0            [24] 1437 	mov	b,r7
      0004AE 12r00r00         [24] 1438 	lcall	__gptrget
      0004B1 FC               [12] 1439 	mov	r4,a
      0004B2 70 03            [24] 1440 	jnz	00575$
      0004B4 02r05r80         [24] 1441 	ljmp	00117$
      0004B7                       1442 00575$:
      0004B7 7B 00            [12] 1443 	mov	r3,#0x00
      0004B9 8C 82            [24] 1444 	mov	dpl,r4
      0004BB 8B 83            [24] 1445 	mov	dph,r3
      0004BD 12r00r00         [24] 1446 	lcall	_putchar
      0004C0 0D               [12] 1447 	inc	r5
                                   1448 ;	life.c:287: if (c == (int)'L') loadiu();
      0004C1 BD 00 E4         [24] 1449 	cjne	r5,#0x00,00223$
      0004C4 0E               [12] 1450 	inc	r6
      0004C5 80 E1            [24] 1451 	sjmp	00223$
      0004C7                       1452 00116$:
                                   1453 ;	life.c:288: else if (c == (int)'R') loadriu();
      0004C7 78r19            [12] 1454 	mov	r0,#_c
      0004C9 B6 52 06         [24] 1455 	cjne	@r0,#0x52,00577$
      0004CC 08               [12] 1456 	inc	r0
      0004CD B6 00 02         [24] 1457 	cjne	@r0,#0x00,00577$
      0004D0 80 03            [24] 1458 	sjmp	00578$
      0004D2                       1459 00577$:
      0004D2 02r05r80         [24] 1460 	ljmp	00117$
      0004D5                       1461 00578$:
                                   1462 ;	life.c:199: j = 0;
      0004D5 78r17            [12] 1463 	mov	r0,#_j
      0004D7 E4               [12] 1464 	clr	a
      0004D8 F6               [12] 1465 	mov	@r0,a
      0004D9 08               [12] 1466 	inc	r0
      0004DA F6               [12] 1467 	mov	@r0,a
                                   1468 ;	life.c:201: printstr("RANDOM");
      0004DB 7Dr2D            [12] 1469 	mov	r5,#___str_6
      0004DD 7Es00            [12] 1470 	mov	r6,#(___str_6 >> 8)
      0004DF 7F 80            [12] 1471 	mov	r7,#0x80
                                   1472 ;	life.c:68: return;
      0004E1                       1473 00226$:
                                   1474 ;	life.c:66: for (; *s; s++) putchar(*s);
      0004E1 8D 82            [24] 1475 	mov	dpl,r5
      0004E3 8E 83            [24] 1476 	mov	dph,r6
      0004E5 8F F0            [24] 1477 	mov	b,r7
      0004E7 12r00r00         [24] 1478 	lcall	__gptrget
      0004EA FC               [12] 1479 	mov	r4,a
      0004EB 60 10            [24] 1480 	jz	00188$
      0004ED 7B 00            [12] 1481 	mov	r3,#0x00
      0004EF 8C 82            [24] 1482 	mov	dpl,r4
      0004F1 8B 83            [24] 1483 	mov	dph,r3
      0004F3 12r00r00         [24] 1484 	lcall	_putchar
      0004F6 0D               [12] 1485 	inc	r5
                                   1486 ;	life.c:201: printstr("RANDOM");
      0004F7 BD 00 E7         [24] 1487 	cjne	r5,#0x00,00226$
      0004FA 0E               [12] 1488 	inc	r6
      0004FB 80 E4            [24] 1489 	sjmp	00226$
      0004FD                       1490 00188$:
                                   1491 ;	life.c:203: for (y = 0; y < (H * W); y += W)
      0004FD 78r15            [12] 1492 	mov	r0,#_y
      0004FF E4               [12] 1493 	clr	a
      000500 F6               [12] 1494 	mov	@r0,a
      000501 08               [12] 1495 	inc	r0
      000502 F6               [12] 1496 	mov	@r0,a
      000503                       1497 00230$:
                                   1498 ;	life.c:204: for (x = 0; x < W; x++)
      000503 78r13            [12] 1499 	mov	r0,#_x
      000505 E4               [12] 1500 	clr	a
      000506 F6               [12] 1501 	mov	@r0,a
      000507 08               [12] 1502 	inc	r0
      000508 F6               [12] 1503 	mov	@r0,a
      000509                       1504 00228$:
                                   1505 ;	life.c:205: iu[y + x] = rand() & 1;
      000509 78r15            [12] 1506 	mov	r0,#_y
      00050B 79r13            [12] 1507 	mov	r1,#_x
      00050D E7               [12] 1508 	mov	a,@r1
      00050E 26               [12] 1509 	add	a,@r0
      00050F FE               [12] 1510 	mov	r6,a
      000510 09               [12] 1511 	inc	r1
      000511 E7               [12] 1512 	mov	a,@r1
      000512 08               [12] 1513 	inc	r0
      000513 36               [12] 1514 	addc	a,@r0
      000514 FF               [12] 1515 	mov	r7,a
      000515 EE               [12] 1516 	mov	a,r6
      000516 24r00            [12] 1517 	add	a,#_iu
      000518 FE               [12] 1518 	mov	r6,a
      000519 EF               [12] 1519 	mov	a,r7
      00051A 34s00            [12] 1520 	addc	a,#(_iu >> 8)
      00051C FF               [12] 1521 	mov	r7,a
      00051D C0 07            [24] 1522 	push	ar7
      00051F C0 06            [24] 1523 	push	ar6
      000521 12r00r00         [24] 1524 	lcall	_rand
      000524 AC 82            [24] 1525 	mov	r4,dpl
      000526 D0 06            [24] 1526 	pop	ar6
      000528 D0 07            [24] 1527 	pop	ar7
      00052A 53 04 01         [24] 1528 	anl	ar4,#0x01
      00052D 8E 82            [24] 1529 	mov	dpl,r6
      00052F 8F 83            [24] 1530 	mov	dph,r7
      000531 EC               [12] 1531 	mov	a,r4
      000532 F0               [24] 1532 	movx	@dptr,a
                                   1533 ;	life.c:204: for (x = 0; x < W; x++)
      000533 78r13            [12] 1534 	mov	r0,#_x
      000535 06               [12] 1535 	inc	@r0
      000536 B6 00 02         [24] 1536 	cjne	@r0,#0x00,00581$
      000539 08               [12] 1537 	inc	r0
      00053A 06               [12] 1538 	inc	@r0
      00053B                       1539 00581$:
      00053B 78r13            [12] 1540 	mov	r0,#_x
      00053D C3               [12] 1541 	clr	c
      00053E E6               [12] 1542 	mov	a,@r0
      00053F 94 30            [12] 1543 	subb	a,#0x30
      000541 08               [12] 1544 	inc	r0
      000542 E6               [12] 1545 	mov	a,@r0
      000543 64 80            [12] 1546 	xrl	a,#0x80
      000545 94 80            [12] 1547 	subb	a,#0x80
      000547 40 C0            [24] 1548 	jc	00228$
                                   1549 ;	life.c:203: for (y = 0; y < (H * W); y += W)
      000549 78r15            [12] 1550 	mov	r0,#_y
      00054B 74 30            [12] 1551 	mov	a,#0x30
      00054D 26               [12] 1552 	add	a,@r0
      00054E F6               [12] 1553 	mov	@r0,a
      00054F E4               [12] 1554 	clr	a
      000550 08               [12] 1555 	inc	r0
      000551 36               [12] 1556 	addc	a,@r0
      000552 F6               [12] 1557 	mov	@r0,a
      000553 78r15            [12] 1558 	mov	r0,#_y
      000555 C3               [12] 1559 	clr	c
      000556 08               [12] 1560 	inc	r0
      000557 E6               [12] 1561 	mov	a,@r0
      000558 64 80            [12] 1562 	xrl	a,#0x80
      00055A 94 A4            [12] 1563 	subb	a,#0xa4
      00055C 40 A5            [24] 1564 	jc	00230$
                                   1565 ;	life.c:207: printstr("\r\n");
      00055E 7Dr10            [12] 1566 	mov	r5,#___str_2
      000560 7Es00            [12] 1567 	mov	r6,#(___str_2 >> 8)
      000562 7F 80            [12] 1568 	mov	r7,#0x80
                                   1569 ;	life.c:68: return;
      000564                       1570 00233$:
                                   1571 ;	life.c:66: for (; *s; s++) putchar(*s);
      000564 8D 82            [24] 1572 	mov	dpl,r5
      000566 8E 83            [24] 1573 	mov	dph,r6
      000568 8F F0            [24] 1574 	mov	b,r7
      00056A 12r00r00         [24] 1575 	lcall	__gptrget
      00056D FC               [12] 1576 	mov	r4,a
      00056E 60 10            [24] 1577 	jz	00117$
      000570 7B 00            [12] 1578 	mov	r3,#0x00
      000572 8C 82            [24] 1579 	mov	dpl,r4
      000574 8B 83            [24] 1580 	mov	dph,r3
      000576 12r00r00         [24] 1581 	lcall	_putchar
      000579 0D               [12] 1582 	inc	r5
                                   1583 ;	life.c:288: else if (c == (int)'R') loadriu();
      00057A BD 00 E7         [24] 1584 	cjne	r5,#0x00,00233$
      00057D 0E               [12] 1585 	inc	r6
      00057E 80 E4            [24] 1586 	sjmp	00233$
      000580                       1587 00117$:
                                   1588 ;	life.c:289: memcpy(u, iu, sizeof (iu));
      000580 E4               [12] 1589 	clr	a
      000581 C0 E0            [24] 1590 	push	acc
      000583 74 24            [12] 1591 	mov	a,#0x24
      000585 C0 E0            [24] 1592 	push	acc
      000587 74r00            [12] 1593 	mov	a,#_iu
      000589 C0 E0            [24] 1594 	push	acc
      00058B 74s00            [12] 1595 	mov	a,#(_iu >> 8)
      00058D C0 E0            [24] 1596 	push	acc
      00058F E4               [12] 1597 	clr	a
      000590 C0 E0            [24] 1598 	push	acc
      000592 90r48r00         [24] 1599 	mov	dptr,#_u
      000595 75 F0 00         [24] 1600 	mov	b,#0x00
      000598 12r00r00         [24] 1601 	lcall	___memcpy
      00059B E5 81            [12] 1602 	mov	a,sp
      00059D 24 FB            [12] 1603 	add	a,#0xfb
      00059F F5 81            [12] 1604 	mov	sp,a
                                   1605 ;	life.c:290: show(0);
      0005A1 75 82 00         [24] 1606 	mov	dpl,#0x00
      0005A4 12r00r46         [24] 1607 	lcall	_show
                                   1608 ;	life.c:292: printstr("READY T L R P S\r\n");
      0005A7 7Dr52            [12] 1609 	mov	r5,#___str_9
      0005A9 7Es00            [12] 1610 	mov	r6,#(___str_9 >> 8)
      0005AB 7F 80            [12] 1611 	mov	r7,#0x80
                                   1612 ;	life.c:68: return;
      0005AD                       1613 00236$:
                                   1614 ;	life.c:66: for (; *s; s++) putchar(*s);
      0005AD 8D 82            [24] 1615 	mov	dpl,r5
      0005AF 8E 83            [24] 1616 	mov	dph,r6
      0005B1 8F F0            [24] 1617 	mov	b,r7
      0005B3 12r00r00         [24] 1618 	lcall	__gptrget
      0005B6 FC               [12] 1619 	mov	r4,a
      0005B7 60 10            [24] 1620 	jz	00130$
      0005B9 7B 00            [12] 1621 	mov	r3,#0x00
      0005BB 8C 82            [24] 1622 	mov	dpl,r4
      0005BD 8B 83            [24] 1623 	mov	dph,r3
      0005BF 12r00r00         [24] 1624 	lcall	_putchar
      0005C2 0D               [12] 1625 	inc	r5
                                   1626 ;	life.c:293: while (1) {
      0005C3 BD 00 E7         [24] 1627 	cjne	r5,#0x00,00236$
      0005C6 0E               [12] 1628 	inc	r6
      0005C7 80 E4            [24] 1629 	sjmp	00236$
      0005C9                       1630 00130$:
                                   1631 ;	life.c:294: c = toupper(getchar());
      0005C9 12r00r05         [24] 1632 	lcall	_getchar
      0005CC 12r00r00         [24] 1633 	lcall	_toupper
      0005CF AE 82            [24] 1634 	mov	r6,dpl
      0005D1 AF 83            [24] 1635 	mov	r7,dph
      0005D3 78r19            [12] 1636 	mov	r0,#_c
      0005D5 A6 06            [24] 1637 	mov	@r0,ar6
      0005D7 08               [12] 1638 	inc	r0
      0005D8 A6 07            [24] 1639 	mov	@r0,ar7
                                   1640 ;	life.c:295: if (i0 || (c == (int)'T')) goto term;
      0005DA 78r10            [12] 1641 	mov	r0,#_i0
      0005DC E6               [12] 1642 	mov	a,@r0
      0005DD 60 03            [24] 1643 	jz	00588$
      0005DF 02r0Br6E         [24] 1644 	ljmp	00149$
      0005E2                       1645 00588$:
      0005E2 BE 54 06         [24] 1646 	cjne	r6,#0x54,00589$
      0005E5 BF 00 03         [24] 1647 	cjne	r7,#0x00,00589$
      0005E8 02r0Br6E         [24] 1648 	ljmp	00149$
      0005EB                       1649 00589$:
                                   1650 ;	life.c:296: else if ((c == (int)'L') || (c == (int)'R') || (c == (int)'P')) goto reload;
      0005EB BE 4C 06         [24] 1651 	cjne	r6,#0x4c,00590$
      0005EE BF 00 03         [24] 1652 	cjne	r7,#0x00,00590$
      0005F1 02r03r0F         [24] 1653 	ljmp	00112$
      0005F4                       1654 00590$:
      0005F4 BE 52 06         [24] 1655 	cjne	r6,#0x52,00591$
      0005F7 BF 00 03         [24] 1656 	cjne	r7,#0x00,00591$
      0005FA 02r03r0F         [24] 1657 	ljmp	00112$
      0005FD                       1658 00591$:
      0005FD BE 50 06         [24] 1659 	cjne	r6,#0x50,00592$
      000600 BF 00 03         [24] 1660 	cjne	r7,#0x00,00592$
      000603 02r03r0F         [24] 1661 	ljmp	00112$
      000606                       1662 00592$:
                                   1663 ;	life.c:297: else if (c == (int)'S') break;
      000606 BE 53 C0         [24] 1664 	cjne	r6,#0x53,00130$
      000609 BF 00 BD         [24] 1665 	cjne	r7,#0x00,00130$
                                   1666 ;	life.c:111: generation[0] = 0u;
      00060C 78r22            [12] 1667 	mov	r0,#_generation
      00060E 76 00            [12] 1668 	mov	@r0,#0x00
      000610 08               [12] 1669 	inc	r0
      000611 76 00            [12] 1670 	mov	@r0,#0x00
                                   1671 ;	life.c:112: generation[1] = 0u;
      000613 78r24            [12] 1672 	mov	r0,#(_generation + 0x0002)
      000615 76 00            [12] 1673 	mov	@r0,#0x00
      000617 08               [12] 1674 	inc	r0
      000618 76 00            [12] 1675 	mov	@r0,#0x00
                                   1676 ;	life.c:302: for (i1 = 0; !i0 && !i1; ) {
      00061A 78r11            [12] 1677 	mov	r0,#_i1
      00061C 76 00            [12] 1678 	mov	@r0,#0x00
      00061E                       1679 00253$:
      00061E 78r10            [12] 1680 	mov	r0,#_i0
      000620 E6               [12] 1681 	mov	a,@r0
      000621 60 03            [24] 1682 	jz	00595$
      000623 02r0Br3C         [24] 1683 	ljmp	00145$
      000626                       1684 00595$:
      000626 78r11            [12] 1685 	mov	r0,#_i1
      000628 E6               [12] 1686 	mov	a,@r0
      000629 60 03            [24] 1687 	jz	00596$
      00062B 02r0Br3C         [24] 1688 	ljmp	00145$
      00062E                       1689 00596$:
                                   1690 ;	life.c:303: show(1);
      00062E 75 82 01         [24] 1691 	mov	dpl,#0x01
      000631 12r00r46         [24] 1692 	lcall	_show
                                   1693 ;	life.c:213: fixed = 0;
      000634 78r1C            [12] 1694 	mov	r0,#_fixed
      000636 76 00            [12] 1695 	mov	@r0,#0x00
                                   1696 ;	life.c:214: cycle2 = 0;
      000638 78r1D            [12] 1697 	mov	r0,#_cycle2
      00063A 76 00            [12] 1698 	mov	@r0,#0x00
                                   1699 ;	life.c:216: OE76 = OE76_0;
      00063C 78r12            [12] 1700 	mov	r0,#_OE76
      00063E 76 3F            [12] 1701 	mov	@r0,#0x3f
                                   1702 ;	life.c:217: flashOE();
      000640 12r00r3A         [24] 1703 	lcall	_flashOE
                                   1704 ;	life.c:219: for (y = 0; y < H; y++) {
      000643 78r15            [12] 1705 	mov	r0,#_y
      000645 E4               [12] 1706 	clr	a
      000646 F6               [12] 1707 	mov	@r0,a
      000647 08               [12] 1708 	inc	r0
      000648 F6               [12] 1709 	mov	@r0,a
      000649                       1710 00240$:
                                   1711 ;	life.c:220: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000649 78r15            [12] 1712 	mov	r0,#_y
      00064B 86 07            [24] 1713 	mov	ar7,@r0
      00064D 53 07 03         [24] 1714 	anl	ar7,#0x03
      000650 EF               [12] 1715 	mov	a,r7
      000651 03               [12] 1716 	rr	a
      000652 03               [12] 1717 	rr	a
      000653 54 C0            [12] 1718 	anl	a,#0xc0
      000655 FF               [12] 1719 	mov	r7,a
      000656 78r12            [12] 1720 	mov	r0,#_OE76
      000658 74 3F            [12] 1721 	mov	a,#0x3f
      00065A 4F               [12] 1722 	orl	a,r7
      00065B F6               [12] 1723 	mov	@r0,a
                                   1724 ;	life.c:221: flashOE();
      00065C 12r00r3A         [24] 1725 	lcall	_flashOE
                                   1726 ;	life.c:222: for (x = 0; x < W; x++) {
      00065F 78r13            [12] 1727 	mov	r0,#_x
      000661 E4               [12] 1728 	clr	a
      000662 F6               [12] 1729 	mov	@r0,a
      000663 08               [12] 1730 	inc	r0
      000664 F6               [12] 1731 	mov	@r0,a
      000665                       1732 00238$:
                                   1733 ;	life.c:223: n = -u[A2D(W, y, x)];
      000665 78r15            [12] 1734 	mov	r0,#_y
      000667 E6               [12] 1735 	mov	a,@r0
      000668 C0 E0            [24] 1736 	push	acc
      00066A 08               [12] 1737 	inc	r0
      00066B E6               [12] 1738 	mov	a,@r0
      00066C C0 E0            [24] 1739 	push	acc
      00066E 90 00 30         [24] 1740 	mov	dptr,#0x0030
      000671 12r00r00         [24] 1741 	lcall	__mulint
      000674 C8               [12] 1742 	xch	a,r0
      000675 E5*00            [12] 1743 	mov	a,_bp
      000677 24 04            [12] 1744 	add	a,#0x04
      000679 C8               [12] 1745 	xch	a,r0
      00067A A6 82            [24] 1746 	mov	@r0,dpl
      00067C 08               [12] 1747 	inc	r0
      00067D A6 83            [24] 1748 	mov	@r0,dph
      00067F 15 81            [12] 1749 	dec	sp
      000681 15 81            [12] 1750 	dec	sp
      000683 E5*00            [12] 1751 	mov	a,_bp
      000685 24 04            [12] 1752 	add	a,#0x04
      000687 F8               [12] 1753 	mov	r0,a
      000688 79r13            [12] 1754 	mov	r1,#_x
      00068A E7               [12] 1755 	mov	a,@r1
      00068B 26               [12] 1756 	add	a,@r0
      00068C C0 E0            [24] 1757 	push	acc
      00068E 09               [12] 1758 	inc	r1
      00068F E7               [12] 1759 	mov	a,@r1
      000690 08               [12] 1760 	inc	r0
      000691 36               [12] 1761 	addc	a,@r0
      000692 C0 E0            [24] 1762 	push	acc
      000694 E5*00            [12] 1763 	mov	a,_bp
      000696 24 03            [12] 1764 	add	a,#0x03
      000698 F8               [12] 1765 	mov	r0,a
      000699 D0 E0            [24] 1766 	pop	acc
      00069B F6               [12] 1767 	mov	@r0,a
      00069C 18               [12] 1768 	dec	r0
      00069D D0 E0            [24] 1769 	pop	acc
      00069F F6               [12] 1770 	mov	@r0,a
      0006A0 A8*00            [24] 1771 	mov	r0,_bp
      0006A2 08               [12] 1772 	inc	r0
      0006A3 08               [12] 1773 	inc	r0
      0006A4 E6               [12] 1774 	mov	a,@r0
      0006A5 24r00            [12] 1775 	add	a,#_u
      0006A7 F5 82            [12] 1776 	mov	dpl,a
      0006A9 08               [12] 1777 	inc	r0
      0006AA E6               [12] 1778 	mov	a,@r0
      0006AB 34s48            [12] 1779 	addc	a,#(_u >> 8)
      0006AD F5 83            [12] 1780 	mov	dph,a
      0006AF E0               [24] 1781 	movx	a,@dptr
      0006B0 FB               [12] 1782 	mov	r3,a
      0006B1 A8*00            [24] 1783 	mov	r0,_bp
      0006B3 08               [12] 1784 	inc	r0
      0006B4 C3               [12] 1785 	clr	c
      0006B5 E4               [12] 1786 	clr	a
      0006B6 9B               [12] 1787 	subb	a,r3
      0006B7 F6               [12] 1788 	mov	@r0,a
                                   1789 ;	life.c:226: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006B8 78r15            [12] 1790 	mov	r0,#_y
      0006BA 74 FF            [12] 1791 	mov	a,#0xff
      0006BC 26               [12] 1792 	add	a,@r0
      0006BD FA               [12] 1793 	mov	r2,a
      0006BE 74 FF            [12] 1794 	mov	a,#0xff
      0006C0 08               [12] 1795 	inc	r0
      0006C1 36               [12] 1796 	addc	a,@r0
      0006C2 FB               [12] 1797 	mov	r3,a
      0006C3 74 C0            [12] 1798 	mov	a,#0xc0
      0006C5 2A               [12] 1799 	add	a,r2
      0006C6 FA               [12] 1800 	mov	r2,a
      0006C7 E4               [12] 1801 	clr	a
      0006C8 3B               [12] 1802 	addc	a,r3
      0006C9 FB               [12] 1803 	mov	r3,a
      0006CA 74 C0            [12] 1804 	mov	a,#0xc0
      0006CC C0 E0            [24] 1805 	push	acc
      0006CE E4               [12] 1806 	clr	a
      0006CF C0 E0            [24] 1807 	push	acc
      0006D1 8A 82            [24] 1808 	mov	dpl,r2
      0006D3 8B 83            [24] 1809 	mov	dph,r3
      0006D5 12r00r00         [24] 1810 	lcall	__modsint
      0006D8 AA 82            [24] 1811 	mov	r2,dpl
      0006DA AB 83            [24] 1812 	mov	r3,dph
      0006DC 15 81            [12] 1813 	dec	sp
      0006DE 15 81            [12] 1814 	dec	sp
      0006E0 C0 02            [24] 1815 	push	ar2
      0006E2 C0 03            [24] 1816 	push	ar3
      0006E4 90 00 30         [24] 1817 	mov	dptr,#0x0030
      0006E7 12r00r00         [24] 1818 	lcall	__mulint
      0006EA AA 82            [24] 1819 	mov	r2,dpl
      0006EC AB 83            [24] 1820 	mov	r3,dph
      0006EE 15 81            [12] 1821 	dec	sp
      0006F0 15 81            [12] 1822 	dec	sp
      0006F2 78r13            [12] 1823 	mov	r0,#_x
      0006F4 74 FF            [12] 1824 	mov	a,#0xff
      0006F6 26               [12] 1825 	add	a,@r0
      0006F7 FC               [12] 1826 	mov	r4,a
      0006F8 74 FF            [12] 1827 	mov	a,#0xff
      0006FA 08               [12] 1828 	inc	r0
      0006FB 36               [12] 1829 	addc	a,@r0
      0006FC FD               [12] 1830 	mov	r5,a
      0006FD 74 30            [12] 1831 	mov	a,#0x30
      0006FF 2C               [12] 1832 	add	a,r4
      000700 FC               [12] 1833 	mov	r4,a
      000701 E4               [12] 1834 	clr	a
      000702 3D               [12] 1835 	addc	a,r5
      000703 FD               [12] 1836 	mov	r5,a
      000704 C0 03            [24] 1837 	push	ar3
      000706 C0 02            [24] 1838 	push	ar2
      000708 74 30            [12] 1839 	mov	a,#0x30
      00070A C0 E0            [24] 1840 	push	acc
      00070C E4               [12] 1841 	clr	a
      00070D C0 E0            [24] 1842 	push	acc
      00070F 8C 82            [24] 1843 	mov	dpl,r4
      000711 8D 83            [24] 1844 	mov	dph,r5
      000713 12r00r00         [24] 1845 	lcall	__modsint
      000716 AC 82            [24] 1846 	mov	r4,dpl
      000718 AD 83            [24] 1847 	mov	r5,dph
      00071A 15 81            [12] 1848 	dec	sp
      00071C 15 81            [12] 1849 	dec	sp
      00071E D0 02            [24] 1850 	pop	ar2
      000720 D0 03            [24] 1851 	pop	ar3
      000722 EC               [12] 1852 	mov	a,r4
      000723 2A               [12] 1853 	add	a,r2
      000724 FE               [12] 1854 	mov	r6,a
      000725 ED               [12] 1855 	mov	a,r5
      000726 3B               [12] 1856 	addc	a,r3
      000727 FF               [12] 1857 	mov	r7,a
      000728 EE               [12] 1858 	mov	a,r6
      000729 24r00            [12] 1859 	add	a,#_u
      00072B F5 82            [12] 1860 	mov	dpl,a
      00072D EF               [12] 1861 	mov	a,r7
      00072E 34s48            [12] 1862 	addc	a,#(_u >> 8)
      000730 F5 83            [12] 1863 	mov	dph,a
      000732 E0               [24] 1864 	movx	a,@dptr
      000733 FF               [12] 1865 	mov	r7,a
      000734 A8*00            [24] 1866 	mov	r0,_bp
      000736 08               [12] 1867 	inc	r0
      000737 EF               [12] 1868 	mov	a,r7
      000738 26               [12] 1869 	add	a,@r0
      000739 F6               [12] 1870 	mov	@r0,a
                                   1871 ;	life.c:228: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00073A 78r13            [12] 1872 	mov	r0,#_x
      00073C E5*00            [12] 1873 	mov	a,_bp
      00073E 24 06            [12] 1874 	add	a,#0x06
      000740 F9               [12] 1875 	mov	r1,a
      000741 E6               [12] 1876 	mov	a,@r0
      000742 F7               [12] 1877 	mov	@r1,a
      000743 08               [12] 1878 	inc	r0
      000744 09               [12] 1879 	inc	r1
      000745 E6               [12] 1880 	mov	a,@r0
      000746 F7               [12] 1881 	mov	@r1,a
      000747 E5*00            [12] 1882 	mov	a,_bp
      000749 24 06            [12] 1883 	add	a,#0x06
      00074B F8               [12] 1884 	mov	r0,a
      00074C 74 30            [12] 1885 	mov	a,#0x30
      00074E 26               [12] 1886 	add	a,@r0
      00074F FE               [12] 1887 	mov	r6,a
      000750 E4               [12] 1888 	clr	a
      000751 08               [12] 1889 	inc	r0
      000752 36               [12] 1890 	addc	a,@r0
      000753 FF               [12] 1891 	mov	r7,a
      000754 C0 05            [24] 1892 	push	ar5
      000756 C0 04            [24] 1893 	push	ar4
      000758 C0 03            [24] 1894 	push	ar3
      00075A C0 02            [24] 1895 	push	ar2
      00075C 74 30            [12] 1896 	mov	a,#0x30
      00075E C0 E0            [24] 1897 	push	acc
      000760 E4               [12] 1898 	clr	a
      000761 C0 E0            [24] 1899 	push	acc
      000763 8E 82            [24] 1900 	mov	dpl,r6
      000765 8F 83            [24] 1901 	mov	dph,r7
      000767 12r00r00         [24] 1902 	lcall	__modsint
      00076A C8               [12] 1903 	xch	a,r0
      00076B E5*00            [12] 1904 	mov	a,_bp
      00076D 24 08            [12] 1905 	add	a,#0x08
      00076F C8               [12] 1906 	xch	a,r0
      000770 A6 82            [24] 1907 	mov	@r0,dpl
      000772 08               [12] 1908 	inc	r0
      000773 A6 83            [24] 1909 	mov	@r0,dph
      000775 15 81            [12] 1910 	dec	sp
      000777 15 81            [12] 1911 	dec	sp
      000779 D0 02            [24] 1912 	pop	ar2
      00077B D0 03            [24] 1913 	pop	ar3
      00077D E5*00            [12] 1914 	mov	a,_bp
      00077F 24 08            [12] 1915 	add	a,#0x08
      000781 F8               [12] 1916 	mov	r0,a
      000782 E6               [12] 1917 	mov	a,@r0
      000783 2A               [12] 1918 	add	a,r2
      000784 FE               [12] 1919 	mov	r6,a
      000785 08               [12] 1920 	inc	r0
      000786 E6               [12] 1921 	mov	a,@r0
      000787 3B               [12] 1922 	addc	a,r3
      000788 FF               [12] 1923 	mov	r7,a
      000789 EE               [12] 1924 	mov	a,r6
      00078A 24r00            [12] 1925 	add	a,#_u
      00078C F5 82            [12] 1926 	mov	dpl,a
      00078E EF               [12] 1927 	mov	a,r7
      00078F 34s48            [12] 1928 	addc	a,#(_u >> 8)
      000791 F5 83            [12] 1929 	mov	dph,a
      000793 E0               [24] 1930 	movx	a,@dptr
      000794 FF               [12] 1931 	mov	r7,a
      000795 A8*00            [24] 1932 	mov	r0,_bp
      000797 08               [12] 1933 	inc	r0
      000798 EF               [12] 1934 	mov	a,r7
      000799 26               [12] 1935 	add	a,@r0
      00079A F6               [12] 1936 	mov	@r0,a
                                   1937 ;	life.c:230: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00079B E5*00            [12] 1938 	mov	a,_bp
      00079D 24 06            [12] 1939 	add	a,#0x06
      00079F F8               [12] 1940 	mov	r0,a
      0007A0 74 31            [12] 1941 	mov	a,#0x31
      0007A2 26               [12] 1942 	add	a,@r0
      0007A3 FE               [12] 1943 	mov	r6,a
      0007A4 E4               [12] 1944 	clr	a
      0007A5 08               [12] 1945 	inc	r0
      0007A6 36               [12] 1946 	addc	a,@r0
      0007A7 FF               [12] 1947 	mov	r7,a
      0007A8 C0 03            [24] 1948 	push	ar3
      0007AA C0 02            [24] 1949 	push	ar2
      0007AC 74 30            [12] 1950 	mov	a,#0x30
      0007AE C0 E0            [24] 1951 	push	acc
      0007B0 E4               [12] 1952 	clr	a
      0007B1 C0 E0            [24] 1953 	push	acc
      0007B3 8E 82            [24] 1954 	mov	dpl,r6
      0007B5 8F 83            [24] 1955 	mov	dph,r7
      0007B7 12r00r00         [24] 1956 	lcall	__modsint
      0007BA AE 82            [24] 1957 	mov	r6,dpl
      0007BC AF 83            [24] 1958 	mov	r7,dph
      0007BE 15 81            [12] 1959 	dec	sp
      0007C0 15 81            [12] 1960 	dec	sp
      0007C2 D0 02            [24] 1961 	pop	ar2
      0007C4 D0 03            [24] 1962 	pop	ar3
      0007C6 D0 04            [24] 1963 	pop	ar4
      0007C8 D0 05            [24] 1964 	pop	ar5
      0007CA EE               [12] 1965 	mov	a,r6
      0007CB 2A               [12] 1966 	add	a,r2
      0007CC FA               [12] 1967 	mov	r2,a
      0007CD EF               [12] 1968 	mov	a,r7
      0007CE 3B               [12] 1969 	addc	a,r3
      0007CF FB               [12] 1970 	mov	r3,a
      0007D0 EA               [12] 1971 	mov	a,r2
      0007D1 24r00            [12] 1972 	add	a,#_u
      0007D3 F5 82            [12] 1973 	mov	dpl,a
      0007D5 EB               [12] 1974 	mov	a,r3
      0007D6 34s48            [12] 1975 	addc	a,#(_u >> 8)
      0007D8 F5 83            [12] 1976 	mov	dph,a
      0007DA E0               [24] 1977 	movx	a,@dptr
      0007DB FB               [12] 1978 	mov	r3,a
      0007DC A8*00            [24] 1979 	mov	r0,_bp
      0007DE 08               [12] 1980 	inc	r0
      0007DF EB               [12] 1981 	mov	a,r3
      0007E0 26               [12] 1982 	add	a,@r0
      0007E1 F6               [12] 1983 	mov	@r0,a
                                   1984 ;	life.c:232: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007E2 78r15            [12] 1985 	mov	r0,#_y
      0007E4 E5*00            [12] 1986 	mov	a,_bp
      0007E6 24 0A            [12] 1987 	add	a,#0x0a
      0007E8 F9               [12] 1988 	mov	r1,a
      0007E9 E6               [12] 1989 	mov	a,@r0
      0007EA F7               [12] 1990 	mov	@r1,a
      0007EB 08               [12] 1991 	inc	r0
      0007EC 09               [12] 1992 	inc	r1
      0007ED E6               [12] 1993 	mov	a,@r0
      0007EE F7               [12] 1994 	mov	@r1,a
      0007EF E5*00            [12] 1995 	mov	a,_bp
      0007F1 24 0A            [12] 1996 	add	a,#0x0a
      0007F3 F8               [12] 1997 	mov	r0,a
      0007F4 74 C0            [12] 1998 	mov	a,#0xc0
      0007F6 26               [12] 1999 	add	a,@r0
      0007F7 FA               [12] 2000 	mov	r2,a
      0007F8 E4               [12] 2001 	clr	a
      0007F9 08               [12] 2002 	inc	r0
      0007FA 36               [12] 2003 	addc	a,@r0
      0007FB FB               [12] 2004 	mov	r3,a
      0007FC C0 07            [24] 2005 	push	ar7
      0007FE C0 06            [24] 2006 	push	ar6
      000800 C0 05            [24] 2007 	push	ar5
      000802 C0 04            [24] 2008 	push	ar4
      000804 74 C0            [12] 2009 	mov	a,#0xc0
      000806 C0 E0            [24] 2010 	push	acc
      000808 E4               [12] 2011 	clr	a
      000809 C0 E0            [24] 2012 	push	acc
      00080B 8A 82            [24] 2013 	mov	dpl,r2
      00080D 8B 83            [24] 2014 	mov	dph,r3
      00080F 12r00r00         [24] 2015 	lcall	__modsint
      000812 AA 82            [24] 2016 	mov	r2,dpl
      000814 AB 83            [24] 2017 	mov	r3,dph
      000816 15 81            [12] 2018 	dec	sp
      000818 15 81            [12] 2019 	dec	sp
      00081A C0 02            [24] 2020 	push	ar2
      00081C C0 03            [24] 2021 	push	ar3
      00081E 90 00 30         [24] 2022 	mov	dptr,#0x0030
      000821 12r00r00         [24] 2023 	lcall	__mulint
      000824 C8               [12] 2024 	xch	a,r0
      000825 E5*00            [12] 2025 	mov	a,_bp
      000827 24 0C            [12] 2026 	add	a,#0x0c
      000829 C8               [12] 2027 	xch	a,r0
      00082A A6 82            [24] 2028 	mov	@r0,dpl
      00082C 08               [12] 2029 	inc	r0
      00082D A6 83            [24] 2030 	mov	@r0,dph
      00082F 15 81            [12] 2031 	dec	sp
      000831 15 81            [12] 2032 	dec	sp
      000833 D0 04            [24] 2033 	pop	ar4
      000835 D0 05            [24] 2034 	pop	ar5
      000837 D0 06            [24] 2035 	pop	ar6
      000839 D0 07            [24] 2036 	pop	ar7
      00083B E5*00            [12] 2037 	mov	a,_bp
      00083D 24 0C            [12] 2038 	add	a,#0x0c
      00083F F8               [12] 2039 	mov	r0,a
      000840 EC               [12] 2040 	mov	a,r4
      000841 26               [12] 2041 	add	a,@r0
      000842 FA               [12] 2042 	mov	r2,a
      000843 ED               [12] 2043 	mov	a,r5
      000844 08               [12] 2044 	inc	r0
      000845 36               [12] 2045 	addc	a,@r0
      000846 FB               [12] 2046 	mov	r3,a
      000847 EA               [12] 2047 	mov	a,r2
      000848 24r00            [12] 2048 	add	a,#_u
      00084A F5 82            [12] 2049 	mov	dpl,a
      00084C EB               [12] 2050 	mov	a,r3
      00084D 34s48            [12] 2051 	addc	a,#(_u >> 8)
      00084F F5 83            [12] 2052 	mov	dph,a
      000851 E0               [24] 2053 	movx	a,@dptr
      000852 FB               [12] 2054 	mov	r3,a
      000853 A8*00            [24] 2055 	mov	r0,_bp
      000855 08               [12] 2056 	inc	r0
      000856 EB               [12] 2057 	mov	a,r3
      000857 26               [12] 2058 	add	a,@r0
      000858 F6               [12] 2059 	mov	@r0,a
                                   2060 ;	life.c:234: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000859 E5*00            [12] 2061 	mov	a,_bp
      00085B 24 0C            [12] 2062 	add	a,#0x0c
      00085D F8               [12] 2063 	mov	r0,a
      00085E E5*00            [12] 2064 	mov	a,_bp
      000860 24 08            [12] 2065 	add	a,#0x08
      000862 F9               [12] 2066 	mov	r1,a
      000863 E7               [12] 2067 	mov	a,@r1
      000864 26               [12] 2068 	add	a,@r0
      000865 FA               [12] 2069 	mov	r2,a
      000866 09               [12] 2070 	inc	r1
      000867 E7               [12] 2071 	mov	a,@r1
      000868 08               [12] 2072 	inc	r0
      000869 36               [12] 2073 	addc	a,@r0
      00086A FB               [12] 2074 	mov	r3,a
      00086B EA               [12] 2075 	mov	a,r2
      00086C 24r00            [12] 2076 	add	a,#_u
      00086E F5 82            [12] 2077 	mov	dpl,a
      000870 EB               [12] 2078 	mov	a,r3
      000871 34s48            [12] 2079 	addc	a,#(_u >> 8)
      000873 F5 83            [12] 2080 	mov	dph,a
      000875 E0               [24] 2081 	movx	a,@dptr
      000876 FB               [12] 2082 	mov	r3,a
      000877 A8*00            [24] 2083 	mov	r0,_bp
      000879 08               [12] 2084 	inc	r0
      00087A EB               [12] 2085 	mov	a,r3
      00087B 26               [12] 2086 	add	a,@r0
      00087C F6               [12] 2087 	mov	@r0,a
                                   2088 ;	life.c:236: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00087D E5*00            [12] 2089 	mov	a,_bp
      00087F 24 0C            [12] 2090 	add	a,#0x0c
      000881 F8               [12] 2091 	mov	r0,a
      000882 EE               [12] 2092 	mov	a,r6
      000883 26               [12] 2093 	add	a,@r0
      000884 FA               [12] 2094 	mov	r2,a
      000885 EF               [12] 2095 	mov	a,r7
      000886 08               [12] 2096 	inc	r0
      000887 36               [12] 2097 	addc	a,@r0
      000888 FB               [12] 2098 	mov	r3,a
      000889 EA               [12] 2099 	mov	a,r2
      00088A 24r00            [12] 2100 	add	a,#_u
      00088C F5 82            [12] 2101 	mov	dpl,a
      00088E EB               [12] 2102 	mov	a,r3
      00088F 34s48            [12] 2103 	addc	a,#(_u >> 8)
      000891 F5 83            [12] 2104 	mov	dph,a
      000893 E0               [24] 2105 	movx	a,@dptr
      000894 FB               [12] 2106 	mov	r3,a
      000895 A8*00            [24] 2107 	mov	r0,_bp
      000897 08               [12] 2108 	inc	r0
      000898 E5*00            [12] 2109 	mov	a,_bp
      00089A 24 0C            [12] 2110 	add	a,#0x0c
      00089C F9               [12] 2111 	mov	r1,a
      00089D EB               [12] 2112 	mov	a,r3
      00089E 26               [12] 2113 	add	a,@r0
      00089F F7               [12] 2114 	mov	@r1,a
                                   2115 ;	life.c:238: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008A0 E5*00            [12] 2116 	mov	a,_bp
      0008A2 24 0A            [12] 2117 	add	a,#0x0a
      0008A4 F8               [12] 2118 	mov	r0,a
      0008A5 74 C1            [12] 2119 	mov	a,#0xc1
      0008A7 26               [12] 2120 	add	a,@r0
      0008A8 FA               [12] 2121 	mov	r2,a
      0008A9 E4               [12] 2122 	clr	a
      0008AA 08               [12] 2123 	inc	r0
      0008AB 36               [12] 2124 	addc	a,@r0
      0008AC FB               [12] 2125 	mov	r3,a
      0008AD C0 07            [24] 2126 	push	ar7
      0008AF C0 06            [24] 2127 	push	ar6
      0008B1 C0 05            [24] 2128 	push	ar5
      0008B3 C0 04            [24] 2129 	push	ar4
      0008B5 74 C0            [12] 2130 	mov	a,#0xc0
      0008B7 C0 E0            [24] 2131 	push	acc
      0008B9 E4               [12] 2132 	clr	a
      0008BA C0 E0            [24] 2133 	push	acc
      0008BC 8A 82            [24] 2134 	mov	dpl,r2
      0008BE 8B 83            [24] 2135 	mov	dph,r3
      0008C0 12r00r00         [24] 2136 	lcall	__modsint
      0008C3 AA 82            [24] 2137 	mov	r2,dpl
      0008C5 AB 83            [24] 2138 	mov	r3,dph
      0008C7 15 81            [12] 2139 	dec	sp
      0008C9 15 81            [12] 2140 	dec	sp
      0008CB C0 02            [24] 2141 	push	ar2
      0008CD C0 03            [24] 2142 	push	ar3
      0008CF 90 00 30         [24] 2143 	mov	dptr,#0x0030
      0008D2 12r00r00         [24] 2144 	lcall	__mulint
      0008D5 AA 82            [24] 2145 	mov	r2,dpl
      0008D7 AB 83            [24] 2146 	mov	r3,dph
      0008D9 15 81            [12] 2147 	dec	sp
      0008DB 15 81            [12] 2148 	dec	sp
      0008DD D0 04            [24] 2149 	pop	ar4
      0008DF D0 05            [24] 2150 	pop	ar5
      0008E1 D0 06            [24] 2151 	pop	ar6
      0008E3 D0 07            [24] 2152 	pop	ar7
      0008E5 EC               [12] 2153 	mov	a,r4
      0008E6 2A               [12] 2154 	add	a,r2
      0008E7 FC               [12] 2155 	mov	r4,a
      0008E8 ED               [12] 2156 	mov	a,r5
      0008E9 3B               [12] 2157 	addc	a,r3
      0008EA FD               [12] 2158 	mov	r5,a
      0008EB EC               [12] 2159 	mov	a,r4
      0008EC 24r00            [12] 2160 	add	a,#_u
      0008EE F5 82            [12] 2161 	mov	dpl,a
      0008F0 ED               [12] 2162 	mov	a,r5
      0008F1 34s48            [12] 2163 	addc	a,#(_u >> 8)
      0008F3 F5 83            [12] 2164 	mov	dph,a
      0008F5 E0               [24] 2165 	movx	a,@dptr
      0008F6 FD               [12] 2166 	mov	r5,a
      0008F7 E5*00            [12] 2167 	mov	a,_bp
      0008F9 24 0C            [12] 2168 	add	a,#0x0c
      0008FB F8               [12] 2169 	mov	r0,a
      0008FC E5*00            [12] 2170 	mov	a,_bp
      0008FE 24 0C            [12] 2171 	add	a,#0x0c
      000900 F9               [12] 2172 	mov	r1,a
      000901 ED               [12] 2173 	mov	a,r5
      000902 26               [12] 2174 	add	a,@r0
      000903 F7               [12] 2175 	mov	@r1,a
                                   2176 ;	life.c:240: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000904 E5*00            [12] 2177 	mov	a,_bp
      000906 24 08            [12] 2178 	add	a,#0x08
      000908 F8               [12] 2179 	mov	r0,a
      000909 E6               [12] 2180 	mov	a,@r0
      00090A 2A               [12] 2181 	add	a,r2
      00090B FC               [12] 2182 	mov	r4,a
      00090C 08               [12] 2183 	inc	r0
      00090D E6               [12] 2184 	mov	a,@r0
      00090E 3B               [12] 2185 	addc	a,r3
      00090F FD               [12] 2186 	mov	r5,a
      000910 EC               [12] 2187 	mov	a,r4
      000911 24r00            [12] 2188 	add	a,#_u
      000913 F5 82            [12] 2189 	mov	dpl,a
      000915 ED               [12] 2190 	mov	a,r5
      000916 34s48            [12] 2191 	addc	a,#(_u >> 8)
      000918 F5 83            [12] 2192 	mov	dph,a
      00091A E0               [24] 2193 	movx	a,@dptr
      00091B FD               [12] 2194 	mov	r5,a
      00091C E5*00            [12] 2195 	mov	a,_bp
      00091E 24 0C            [12] 2196 	add	a,#0x0c
      000920 F8               [12] 2197 	mov	r0,a
      000921 ED               [12] 2198 	mov	a,r5
      000922 26               [12] 2199 	add	a,@r0
      000923 FD               [12] 2200 	mov	r5,a
                                   2201 ;	life.c:241: y1 = 1; x1 = 1;
      000924 78r20            [12] 2202 	mov	r0,#_y1
      000926 76 01            [12] 2203 	mov	@r0,#0x01
      000928 08               [12] 2204 	inc	r0
      000929 76 00            [12] 2205 	mov	@r0,#0x00
      00092B 78r1E            [12] 2206 	mov	r0,#_x1
      00092D 76 01            [12] 2207 	mov	@r0,#0x01
      00092F 08               [12] 2208 	inc	r0
      000930 76 00            [12] 2209 	mov	@r0,#0x00
                                   2210 ;	life.c:242: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000932 EE               [12] 2211 	mov	a,r6
      000933 2A               [12] 2212 	add	a,r2
      000934 FE               [12] 2213 	mov	r6,a
      000935 EF               [12] 2214 	mov	a,r7
      000936 3B               [12] 2215 	addc	a,r3
      000937 FF               [12] 2216 	mov	r7,a
      000938 EE               [12] 2217 	mov	a,r6
      000939 24r00            [12] 2218 	add	a,#_u
      00093B F5 82            [12] 2219 	mov	dpl,a
      00093D EF               [12] 2220 	mov	a,r7
      00093E 34s48            [12] 2221 	addc	a,#(_u >> 8)
      000940 F5 83            [12] 2222 	mov	dph,a
      000942 E0               [24] 2223 	movx	a,@dptr
      000943 2D               [12] 2224 	add	a,r5
      000944 FF               [12] 2225 	mov	r7,a
      000945 78r1B            [12] 2226 	mov	r0,#_n
      000947 A6 07            [24] 2227 	mov	@r0,ar7
                                   2228 ;	life.c:244: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      000949 A8*00            [24] 2229 	mov	r0,_bp
      00094B 08               [12] 2230 	inc	r0
      00094C 08               [12] 2231 	inc	r0
      00094D E6               [12] 2232 	mov	a,@r0
      00094E 24r00            [12] 2233 	add	a,#_nu
      000950 FD               [12] 2234 	mov	r5,a
      000951 08               [12] 2235 	inc	r0
      000952 E6               [12] 2236 	mov	a,@r0
      000953 34s6C            [12] 2237 	addc	a,#(_nu >> 8)
      000955 FE               [12] 2238 	mov	r6,a
      000956 BF 03 02         [24] 2239 	cjne	r7,#0x03,00597$
      000959 80 28            [24] 2240 	sjmp	00266$
      00095B                       2241 00597$:
      00095B BF 02 21         [24] 2242 	cjne	r7,#0x02,00265$
      00095E E5*00            [12] 2243 	mov	a,_bp
      000960 24 04            [12] 2244 	add	a,#0x04
      000962 F8               [12] 2245 	mov	r0,a
      000963 E5*00            [12] 2246 	mov	a,_bp
      000965 24 06            [12] 2247 	add	a,#0x06
      000967 F9               [12] 2248 	mov	r1,a
      000968 E7               [12] 2249 	mov	a,@r1
      000969 26               [12] 2250 	add	a,@r0
      00096A FC               [12] 2251 	mov	r4,a
      00096B 09               [12] 2252 	inc	r1
      00096C E7               [12] 2253 	mov	a,@r1
      00096D 08               [12] 2254 	inc	r0
      00096E 36               [12] 2255 	addc	a,@r0
      00096F FF               [12] 2256 	mov	r7,a
      000970 EC               [12] 2257 	mov	a,r4
      000971 24r00            [12] 2258 	add	a,#_u
      000973 FC               [12] 2259 	mov	r4,a
      000974 EF               [12] 2260 	mov	a,r7
      000975 34s48            [12] 2261 	addc	a,#(_u >> 8)
      000977 FF               [12] 2262 	mov	r7,a
      000978 8C 82            [24] 2263 	mov	dpl,r4
      00097A 8F 83            [24] 2264 	mov	dph,r7
      00097C E0               [24] 2265 	movx	a,@dptr
      00097D 70 04            [24] 2266 	jnz	00266$
      00097F                       2267 00265$:
                                   2268 ;	assignBit
      00097F C2*00            [12] 2269 	clr	b0
      000981 80 02            [24] 2270 	sjmp	00267$
      000983                       2271 00266$:
                                   2272 ;	assignBit
      000983 D2*00            [12] 2273 	setb	b0
      000985                       2274 00267$:
      000985 A2*00            [12] 2275 	mov	c,b0
      000987 E4               [12] 2276 	clr	a
      000988 33               [12] 2277 	rlc	a
      000989 8D 82            [24] 2278 	mov	dpl,r5
      00098B 8E 83            [24] 2279 	mov	dph,r6
      00098D F0               [24] 2280 	movx	@dptr,a
                                   2281 ;	life.c:245: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00098E 78r15            [12] 2282 	mov	r0,#_y
      000990 E6               [12] 2283 	mov	a,@r0
      000991 C0 E0            [24] 2284 	push	acc
      000993 08               [12] 2285 	inc	r0
      000994 E6               [12] 2286 	mov	a,@r0
      000995 C0 E0            [24] 2287 	push	acc
      000997 90 00 30         [24] 2288 	mov	dptr,#0x0030
      00099A 12r00r00         [24] 2289 	lcall	__mulint
      00099D AE 82            [24] 2290 	mov	r6,dpl
      00099F AF 83            [24] 2291 	mov	r7,dph
      0009A1 15 81            [12] 2292 	dec	sp
      0009A3 15 81            [12] 2293 	dec	sp
      0009A5 78r13            [12] 2294 	mov	r0,#_x
      0009A7 E6               [12] 2295 	mov	a,@r0
      0009A8 2E               [12] 2296 	add	a,r6
      0009A9 FE               [12] 2297 	mov	r6,a
      0009AA 08               [12] 2298 	inc	r0
      0009AB E6               [12] 2299 	mov	a,@r0
      0009AC 3F               [12] 2300 	addc	a,r7
      0009AD FF               [12] 2301 	mov	r7,a
      0009AE EE               [12] 2302 	mov	a,r6
      0009AF 24r00            [12] 2303 	add	a,#_pu
      0009B1 F5 82            [12] 2304 	mov	dpl,a
      0009B3 EF               [12] 2305 	mov	a,r7
      0009B4 34s24            [12] 2306 	addc	a,#(_pu >> 8)
      0009B6 F5 83            [12] 2307 	mov	dph,a
      0009B8 E0               [24] 2308 	movx	a,@dptr
      0009B9 FD               [12] 2309 	mov	r5,a
      0009BA EE               [12] 2310 	mov	a,r6
      0009BB 24r00            [12] 2311 	add	a,#_nu
      0009BD F5 82            [12] 2312 	mov	dpl,a
      0009BF EF               [12] 2313 	mov	a,r7
      0009C0 34s6C            [12] 2314 	addc	a,#(_nu >> 8)
      0009C2 F5 83            [12] 2315 	mov	dph,a
      0009C4 E0               [24] 2316 	movx	a,@dptr
      0009C5 FC               [12] 2317 	mov	r4,a
      0009C6 6D               [12] 2318 	xrl	a,r5
      0009C7 78r1D            [12] 2319 	mov	r0,#_cycle2
      0009C9 46               [12] 2320 	orl	a,@r0
      0009CA F6               [12] 2321 	mov	@r0,a
                                   2322 ;	life.c:246: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0009CB EE               [12] 2323 	mov	a,r6
      0009CC 24r00            [12] 2324 	add	a,#_u
      0009CE F5 82            [12] 2325 	mov	dpl,a
      0009D0 EF               [12] 2326 	mov	a,r7
      0009D1 34s48            [12] 2327 	addc	a,#(_u >> 8)
      0009D3 F5 83            [12] 2328 	mov	dph,a
      0009D5 E0               [24] 2329 	movx	a,@dptr
      0009D6 FF               [12] 2330 	mov	r7,a
      0009D7 EC               [12] 2331 	mov	a,r4
      0009D8 6F               [12] 2332 	xrl	a,r7
      0009D9 78r1C            [12] 2333 	mov	r0,#_fixed
      0009DB 46               [12] 2334 	orl	a,@r0
      0009DC F6               [12] 2335 	mov	@r0,a
                                   2336 ;	life.c:222: for (x = 0; x < W; x++) {
      0009DD 78r13            [12] 2337 	mov	r0,#_x
      0009DF 06               [12] 2338 	inc	@r0
      0009E0 B6 00 02         [24] 2339 	cjne	@r0,#0x00,00601$
      0009E3 08               [12] 2340 	inc	r0
      0009E4 06               [12] 2341 	inc	@r0
      0009E5                       2342 00601$:
      0009E5 78r13            [12] 2343 	mov	r0,#_x
      0009E7 C3               [12] 2344 	clr	c
      0009E8 E6               [12] 2345 	mov	a,@r0
      0009E9 94 30            [12] 2346 	subb	a,#0x30
      0009EB 08               [12] 2347 	inc	r0
      0009EC E6               [12] 2348 	mov	a,@r0
      0009ED 64 80            [12] 2349 	xrl	a,#0x80
      0009EF 94 80            [12] 2350 	subb	a,#0x80
      0009F1 50 03            [24] 2351 	jnc	00602$
      0009F3 02r06r65         [24] 2352 	ljmp	00238$
      0009F6                       2353 00602$:
                                   2354 ;	life.c:219: for (y = 0; y < H; y++) {
      0009F6 78r15            [12] 2355 	mov	r0,#_y
      0009F8 06               [12] 2356 	inc	@r0
      0009F9 B6 00 02         [24] 2357 	cjne	@r0,#0x00,00603$
      0009FC 08               [12] 2358 	inc	r0
      0009FD 06               [12] 2359 	inc	@r0
      0009FE                       2360 00603$:
      0009FE 78r15            [12] 2361 	mov	r0,#_y
      000A00 C3               [12] 2362 	clr	c
      000A01 E6               [12] 2363 	mov	a,@r0
      000A02 94 C0            [12] 2364 	subb	a,#0xc0
      000A04 08               [12] 2365 	inc	r0
      000A05 E6               [12] 2366 	mov	a,@r0
      000A06 64 80            [12] 2367 	xrl	a,#0x80
      000A08 94 80            [12] 2368 	subb	a,#0x80
      000A0A 50 03            [24] 2369 	jnc	00604$
      000A0C 02r06r49         [24] 2370 	ljmp	00240$
      000A0F                       2371 00604$:
                                   2372 ;	life.c:250: OE76 = OE76_0;
      000A0F 78r12            [12] 2373 	mov	r0,#_OE76
      000A11 76 3F            [12] 2374 	mov	@r0,#0x3f
                                   2375 ;	life.c:251: flashOE();
      000A13 12r00r3A         [24] 2376 	lcall	_flashOE
                                   2377 ;	life.c:253: cycle2 = !cycle2;
      000A16 78r1D            [12] 2378 	mov	r0,#_cycle2
      000A18 E6               [12] 2379 	mov	a,@r0
      000A19 B4 01 00         [24] 2380 	cjne	a,#0x01,00605$
      000A1C                       2381 00605$:
      000A1C 92*00            [24] 2382 	mov	b0,c
      000A1E 78r1D            [12] 2383 	mov	r0,#_cycle2
      000A20 E4               [12] 2384 	clr	a
      000A21 33               [12] 2385 	rlc	a
      000A22 F6               [12] 2386 	mov	@r0,a
                                   2387 ;	life.c:254: fixed = !fixed;
      000A23 78r1C            [12] 2388 	mov	r0,#_fixed
      000A25 E6               [12] 2389 	mov	a,@r0
      000A26 B4 01 00         [24] 2390 	cjne	a,#0x01,00606$
      000A29                       2391 00606$:
      000A29 92*00            [24] 2392 	mov	b0,c
      000A2B 78r1C            [12] 2393 	mov	r0,#_fixed
      000A2D E4               [12] 2394 	clr	a
      000A2E 33               [12] 2395 	rlc	a
      000A2F F6               [12] 2396 	mov	@r0,a
                                   2397 ;	life.c:256: memcpy(pu, u, sizeof (u));
      000A30 E4               [12] 2398 	clr	a
      000A31 C0 E0            [24] 2399 	push	acc
      000A33 74 24            [12] 2400 	mov	a,#0x24
      000A35 C0 E0            [24] 2401 	push	acc
      000A37 74r00            [12] 2402 	mov	a,#_u
      000A39 C0 E0            [24] 2403 	push	acc
      000A3B 74s48            [12] 2404 	mov	a,#(_u >> 8)
      000A3D C0 E0            [24] 2405 	push	acc
      000A3F E4               [12] 2406 	clr	a
      000A40 C0 E0            [24] 2407 	push	acc
      000A42 90r24r00         [24] 2408 	mov	dptr,#_pu
      000A45 75 F0 00         [24] 2409 	mov	b,#0x00
      000A48 12r00r00         [24] 2410 	lcall	___memcpy
      000A4B E5 81            [12] 2411 	mov	a,sp
      000A4D 24 FB            [12] 2412 	add	a,#0xfb
      000A4F F5 81            [12] 2413 	mov	sp,a
                                   2414 ;	life.c:257: memcpy(u, nu, sizeof (nu));
      000A51 E4               [12] 2415 	clr	a
      000A52 C0 E0            [24] 2416 	push	acc
      000A54 74 24            [12] 2417 	mov	a,#0x24
      000A56 C0 E0            [24] 2418 	push	acc
      000A58 74r00            [12] 2419 	mov	a,#_nu
      000A5A C0 E0            [24] 2420 	push	acc
      000A5C 74s6C            [12] 2421 	mov	a,#(_nu >> 8)
      000A5E C0 E0            [24] 2422 	push	acc
      000A60 E4               [12] 2423 	clr	a
      000A61 C0 E0            [24] 2424 	push	acc
      000A63 90r48r00         [24] 2425 	mov	dptr,#_u
      000A66 75 F0 00         [24] 2426 	mov	b,#0x00
      000A69 12r00r00         [24] 2427 	lcall	___memcpy
      000A6C E5 81            [12] 2428 	mov	a,sp
      000A6E 24 FB            [12] 2429 	add	a,#0xfb
      000A70 F5 81            [12] 2430 	mov	sp,a
                                   2431 ;	life.c:306: if (fixed || cycle2) {
      000A72 78r1C            [12] 2432 	mov	r0,#_fixed
      000A74 E6               [12] 2433 	mov	a,@r0
      000A75 70 05            [24] 2434 	jnz	00135$
      000A77 78r1D            [12] 2435 	mov	r0,#_cycle2
      000A79 E6               [12] 2436 	mov	a,@r0
      000A7A 60 70            [24] 2437 	jz	00136$
      000A7C                       2438 00135$:
                                   2439 ;	life.c:307: printstr("DONE ");
      000A7C 7Dr64            [12] 2440 	mov	r5,#___str_10
      000A7E 7Es00            [12] 2441 	mov	r6,#(___str_10 >> 8)
      000A80 7F 80            [12] 2442 	mov	r7,#0x80
                                   2443 ;	life.c:68: return;
      000A82                       2444 00243$:
                                   2445 ;	life.c:66: for (; *s; s++) putchar(*s);
      000A82 8D 82            [24] 2446 	mov	dpl,r5
      000A84 8E 83            [24] 2447 	mov	dph,r6
      000A86 8F F0            [24] 2448 	mov	b,r7
      000A88 12r00r00         [24] 2449 	lcall	__gptrget
      000A8B FC               [12] 2450 	mov	r4,a
      000A8C 60 10            [24] 2451 	jz	00201$
      000A8E 7B 00            [12] 2452 	mov	r3,#0x00
      000A90 8C 82            [24] 2453 	mov	dpl,r4
      000A92 8B 83            [24] 2454 	mov	dph,r3
      000A94 12r00r00         [24] 2455 	lcall	_putchar
      000A97 0D               [12] 2456 	inc	r5
                                   2457 ;	life.c:307: printstr("DONE ");
      000A98 BD 00 E7         [24] 2458 	cjne	r5,#0x00,00243$
      000A9B 0E               [12] 2459 	inc	r6
      000A9C 80 E4            [24] 2460 	sjmp	00243$
      000A9E                       2461 00201$:
                                   2462 ;	life.c:308: if (fixed) printstr("FIXED\r\n");
      000A9E 78r1C            [12] 2463 	mov	r0,#_fixed
      000AA0 E6               [12] 2464 	mov	a,@r0
      000AA1 60 22            [24] 2465 	jz	00133$
      000AA3 7Dr6A            [12] 2466 	mov	r5,#___str_11
      000AA5 7Es00            [12] 2467 	mov	r6,#(___str_11 >> 8)
      000AA7 7F 80            [12] 2468 	mov	r7,#0x80
                                   2469 ;	life.c:68: return;
      000AA9                       2470 00246$:
                                   2471 ;	life.c:66: for (; *s; s++) putchar(*s);
      000AA9 8D 82            [24] 2472 	mov	dpl,r5
      000AAB 8E 83            [24] 2473 	mov	dph,r6
      000AAD 8F F0            [24] 2474 	mov	b,r7
      000AAF 12r00r00         [24] 2475 	lcall	__gptrget
      000AB2 FC               [12] 2476 	mov	r4,a
      000AB3 60 32            [24] 2477 	jz	00134$
      000AB5 7B 00            [12] 2478 	mov	r3,#0x00
      000AB7 8C 82            [24] 2479 	mov	dpl,r4
      000AB9 8B 83            [24] 2480 	mov	dph,r3
      000ABB 12r00r00         [24] 2481 	lcall	_putchar
      000ABE 0D               [12] 2482 	inc	r5
                                   2483 ;	life.c:308: if (fixed) printstr("FIXED\r\n");
      000ABF BD 00 E7         [24] 2484 	cjne	r5,#0x00,00246$
      000AC2 0E               [12] 2485 	inc	r6
      000AC3 80 E4            [24] 2486 	sjmp	00246$
      000AC5                       2487 00133$:
                                   2488 ;	life.c:309: else printstr("CYCLE2\r\n");
      000AC5 7Dr72            [12] 2489 	mov	r5,#___str_12
      000AC7 7Es00            [12] 2490 	mov	r6,#(___str_12 >> 8)
      000AC9 7F 80            [12] 2491 	mov	r7,#0x80
                                   2492 ;	life.c:68: return;
      000ACB                       2493 00249$:
                                   2494 ;	life.c:66: for (; *s; s++) putchar(*s);
      000ACB 8D 82            [24] 2495 	mov	dpl,r5
      000ACD 8E 83            [24] 2496 	mov	dph,r6
      000ACF 8F F0            [24] 2497 	mov	b,r7
      000AD1 12r00r00         [24] 2498 	lcall	__gptrget
      000AD4 FC               [12] 2499 	mov	r4,a
      000AD5 60 10            [24] 2500 	jz	00134$
      000AD7 7B 00            [12] 2501 	mov	r3,#0x00
      000AD9 8C 82            [24] 2502 	mov	dpl,r4
      000ADB 8B 83            [24] 2503 	mov	dph,r3
      000ADD 12r00r00         [24] 2504 	lcall	_putchar
      000AE0 0D               [12] 2505 	inc	r5
                                   2506 ;	life.c:309: else printstr("CYCLE2\r\n");
      000AE1 BD 00 E7         [24] 2507 	cjne	r5,#0x00,00249$
      000AE4 0E               [12] 2508 	inc	r6
      000AE5 80 E4            [24] 2509 	sjmp	00249$
      000AE7                       2510 00134$:
                                   2511 ;	life.c:310: (void)getchar();
      000AE7 12r00r05         [24] 2512 	lcall	_getchar
                                   2513 ;	life.c:311: break;
      000AEA 80 50            [24] 2514 	sjmp	00145$
      000AEC                       2515 00136$:
                                   2516 ;	life.c:314: c = getchar_poll();
      000AEC 12r00r0E         [24] 2517 	lcall	_getchar_poll
      000AEF AE 82            [24] 2518 	mov	r6,dpl
      000AF1 AF 83            [24] 2519 	mov	r7,dph
      000AF3 78r19            [12] 2520 	mov	r0,#_c
      000AF5 A6 06            [24] 2521 	mov	@r0,ar6
      000AF7 08               [12] 2522 	inc	r0
      000AF8 A6 07            [24] 2523 	mov	@r0,ar7
                                   2524 ;	life.c:315: if (c > 0) {
      000AFA C3               [12] 2525 	clr	c
      000AFB E4               [12] 2526 	clr	a
      000AFC 9E               [12] 2527 	subb	a,r6
      000AFD 74 80            [12] 2528 	mov	a,#(0x00 ^ 0x80)
      000AFF 8F F0            [24] 2529 	mov	b,r7
      000B01 63 F0 80         [24] 2530 	xrl	b,#0x80
      000B04 95 F0            [12] 2531 	subb	a,b
      000B06 40 03            [24] 2532 	jc	00616$
      000B08 02r06r1E         [24] 2533 	ljmp	00253$
      000B0B                       2534 00616$:
                                   2535 ;	life.c:316: c = toupper(c);
      000B0B 8E 82            [24] 2536 	mov	dpl,r6
      000B0D 8F 83            [24] 2537 	mov	dph,r7
      000B0F 12r00r00         [24] 2538 	lcall	_toupper
      000B12 AE 82            [24] 2539 	mov	r6,dpl
      000B14 AF 83            [24] 2540 	mov	r7,dph
      000B16 78r19            [12] 2541 	mov	r0,#_c
      000B18 A6 06            [24] 2542 	mov	@r0,ar6
      000B1A 08               [12] 2543 	inc	r0
      000B1B A6 07            [24] 2544 	mov	@r0,ar7
                                   2545 ;	life.c:317: if (c == (int)'T') i0 = 1;
      000B1D BE 54 0A         [24] 2546 	cjne	r6,#0x54,00141$
      000B20 BF 00 07         [24] 2547 	cjne	r7,#0x00,00141$
      000B23 78r10            [12] 2548 	mov	r0,#_i0
      000B25 76 01            [12] 2549 	mov	@r0,#0x01
      000B27 02r06r1E         [24] 2550 	ljmp	00253$
      000B2A                       2551 00141$:
                                   2552 ;	life.c:318: else if (c == (int)'B') i1 = 1;
      000B2A BE 42 05         [24] 2553 	cjne	r6,#0x42,00619$
      000B2D BF 00 02         [24] 2554 	cjne	r7,#0x00,00619$
      000B30 80 03            [24] 2555 	sjmp	00620$
      000B32                       2556 00619$:
      000B32 02r06r1E         [24] 2557 	ljmp	00253$
      000B35                       2558 00620$:
      000B35 78r11            [12] 2559 	mov	r0,#_i1
      000B37 76 01            [12] 2560 	mov	@r0,#0x01
      000B39 02r06r1E         [24] 2561 	ljmp	00253$
      000B3C                       2562 00145$:
                                   2563 ;	life.c:322: if (i1) {
      000B3C 78r11            [12] 2564 	mov	r0,#_i1
      000B3E E6               [12] 2565 	mov	a,@r0
      000B3F 60 25            [24] 2566 	jz	00259$
                                   2567 ;	life.c:323: printstr("BREAK\r\n");
      000B41 7Dr7B            [12] 2568 	mov	r5,#___str_13
      000B43 7Es00            [12] 2569 	mov	r6,#(___str_13 >> 8)
      000B45 7F 80            [12] 2570 	mov	r7,#0x80
                                   2571 ;	life.c:68: return;
      000B47                       2572 00256$:
                                   2573 ;	life.c:66: for (; *s; s++) putchar(*s);
      000B47 8D 82            [24] 2574 	mov	dpl,r5
      000B49 8E 83            [24] 2575 	mov	dph,r6
      000B4B 8F F0            [24] 2576 	mov	b,r7
      000B4D 12r00r00         [24] 2577 	lcall	__gptrget
      000B50 FC               [12] 2578 	mov	r4,a
      000B51 60 10            [24] 2579 	jz	00207$
      000B53 7B 00            [12] 2580 	mov	r3,#0x00
      000B55 8C 82            [24] 2581 	mov	dpl,r4
      000B57 8B 83            [24] 2582 	mov	dph,r3
      000B59 12r00r00         [24] 2583 	lcall	_putchar
      000B5C 0D               [12] 2584 	inc	r5
                                   2585 ;	life.c:323: printstr("BREAK\r\n");
      000B5D BD 00 E7         [24] 2586 	cjne	r5,#0x00,00256$
      000B60 0E               [12] 2587 	inc	r6
      000B61 80 E4            [24] 2588 	sjmp	00256$
      000B63                       2589 00207$:
                                   2590 ;	life.c:324: (void)getchar();
      000B63 12r00r05         [24] 2591 	lcall	_getchar
      000B66                       2592 00259$:
                                   2593 ;	life.c:277: for (i0 = 0; !i0; ) {	
      000B66 78r10            [12] 2594 	mov	r0,#_i0
      000B68 E6               [12] 2595 	mov	a,@r0
      000B69 70 03            [24] 2596 	jnz	00624$
      000B6B 02r02rB5         [24] 2597 	ljmp	00258$
      000B6E                       2598 00624$:
                                   2599 ;	life.c:328: term:
      000B6E                       2600 00149$:
                                   2601 ;	life.c:329: EA = 0;
                                   2602 ;	assignBit
      000B6E C2 AF            [12] 2603 	clr	_EA
                                   2604 ;	life.c:330: printstr("TERM\r\n");
      000B70 7Dr83            [12] 2605 	mov	r5,#___str_14
      000B72 7Es00            [12] 2606 	mov	r6,#(___str_14 >> 8)
      000B74 7F 80            [12] 2607 	mov	r7,#0x80
                                   2608 ;	life.c:68: return;
      000B76                       2609 00261$:
                                   2610 ;	life.c:66: for (; *s; s++) putchar(*s);
      000B76 8D 82            [24] 2611 	mov	dpl,r5
      000B78 8E 83            [24] 2612 	mov	dph,r6
      000B7A 8F F0            [24] 2613 	mov	b,r7
      000B7C 12r00r00         [24] 2614 	lcall	__gptrget
      000B7F FC               [12] 2615 	mov	r4,a
      000B80 60 10            [24] 2616 	jz	00209$
      000B82 7B 00            [12] 2617 	mov	r3,#0x00
      000B84 8C 82            [24] 2618 	mov	dpl,r4
      000B86 8B 83            [24] 2619 	mov	dph,r3
      000B88 12r00r00         [24] 2620 	lcall	_putchar
      000B8B 0D               [12] 2621 	inc	r5
                                   2622 ;	life.c:330: printstr("TERM\r\n");
      000B8C BD 00 E7         [24] 2623 	cjne	r5,#0x00,00261$
      000B8F 0E               [12] 2624 	inc	r6
      000B90 80 E4            [24] 2625 	sjmp	00261$
      000B92                       2626 00209$:
                                   2627 ;	life.c:331: (void)getchar();
      000B92 12r00r05         [24] 2628 	lcall	_getchar
                                   2629 ;	life.c:333: PCON |= 2;
      000B95 43 87 02         [24] 2630 	orl	_PCON,#0x02
                                   2631 ;	life.c:335: return;
                                   2632 ;	life.c:336: }
      000B98 85*00 81         [24] 2633 	mov	sp,_bp
      000B9B D0*00            [24] 2634 	pop	_bp
      000B9D 22               [24] 2635 	ret
                                   2636 	.area CSEG    (CODE)
                                   2637 	.area CONST   (CODE)
                                   2638 	.area CONST   (CODE)
      000000                       2639 ___str_0:
      000000 1B                    2640 	.db 0x1b
      000001 5B 3F 32 35 6C        2641 	.ascii "[?25l"
      000006 00                    2642 	.db 0x00
                                   2643 	.area CSEG    (CODE)
                                   2644 	.area CONST   (CODE)
      000007                       2645 ___str_1:
      000007 1B                    2646 	.db 0x1b
      000008 5B 32 4A 47 45 4E 20  2647 	.ascii "[2JGEN "
      00000F 00                    2648 	.db 0x00
                                   2649 	.area CSEG    (CODE)
                                   2650 	.area CONST   (CODE)
      000010                       2651 ___str_2:
      000010 0D                    2652 	.db 0x0d
      000011 0A                    2653 	.db 0x0a
      000012 00                    2654 	.db 0x00
                                   2655 	.area CSEG    (CODE)
                                   2656 	.area CONST   (CODE)
      000013                       2657 ___str_3:
      000013 1B                    2658 	.db 0x1b
      000014 5B 3F 32 35 68        2659 	.ascii "[?25h"
      000019 00                    2660 	.db 0x00
                                   2661 	.area CSEG    (CODE)
                                   2662 	.area CONST   (CODE)
      00001A                       2663 ___str_4:
      00001A 4C 4F 41 44 20 30 20  2664 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      000028 00                    2665 	.db 0x00
                                   2666 	.area CSEG    (CODE)
                                   2667 	.area CONST   (CODE)
      000029                       2668 ___str_5:
      000029 3E                    2669 	.ascii ">"
      00002A 0D                    2670 	.db 0x0d
      00002B 0A                    2671 	.db 0x0a
      00002C 00                    2672 	.db 0x00
                                   2673 	.area CSEG    (CODE)
                                   2674 	.area CONST   (CODE)
      00002D                       2675 ___str_6:
      00002D 52 41 4E 44 4F 4D     2676 	.ascii "RANDOM"
      000033 00                    2677 	.db 0x00
                                   2678 	.area CSEG    (CODE)
                                   2679 	.area CONST   (CODE)
      000034                       2680 ___str_7:
      000034 1B                    2681 	.db 0x1b
      000035 5B 3F 32 35 68        2682 	.ascii "[?25h"
      00003A 1B                    2683 	.db 0x1b
      00003B 5B 6D                 2684 	.ascii "[m"
      00003D 00                    2685 	.db 0x00
                                   2686 	.area CSEG    (CODE)
                                   2687 	.area CONST   (CODE)
      00003E                       2688 ___str_8:
      00003E 4C 49 46 45 20 49 4E  2689 	.ascii "LIFE INIT T L R P"
             49 54 20 54 20 4C 20
             52 20 50
      00004F 0D                    2690 	.db 0x0d
      000050 0A                    2691 	.db 0x0a
      000051 00                    2692 	.db 0x00
                                   2693 	.area CSEG    (CODE)
                                   2694 	.area CONST   (CODE)
      000052                       2695 ___str_9:
      000052 52 45 41 44 59 20 54  2696 	.ascii "READY T L R P S"
             20 4C 20 52 20 50 20
             53
      000061 0D                    2697 	.db 0x0d
      000062 0A                    2698 	.db 0x0a
      000063 00                    2699 	.db 0x00
                                   2700 	.area CSEG    (CODE)
                                   2701 	.area CONST   (CODE)
      000064                       2702 ___str_10:
      000064 44 4F 4E 45 20        2703 	.ascii "DONE "
      000069 00                    2704 	.db 0x00
                                   2705 	.area CSEG    (CODE)
                                   2706 	.area CONST   (CODE)
      00006A                       2707 ___str_11:
      00006A 46 49 58 45 44        2708 	.ascii "FIXED"
      00006F 0D                    2709 	.db 0x0d
      000070 0A                    2710 	.db 0x0a
      000071 00                    2711 	.db 0x00
                                   2712 	.area CSEG    (CODE)
                                   2713 	.area CONST   (CODE)
      000072                       2714 ___str_12:
      000072 43 59 43 4C 45 32     2715 	.ascii "CYCLE2"
      000078 0D                    2716 	.db 0x0d
      000079 0A                    2717 	.db 0x0a
      00007A 00                    2718 	.db 0x00
                                   2719 	.area CSEG    (CODE)
                                   2720 	.area CONST   (CODE)
      00007B                       2721 ___str_13:
      00007B 42 52 45 41 4B        2722 	.ascii "BREAK"
      000080 0D                    2723 	.db 0x0d
      000081 0A                    2724 	.db 0x0a
      000082 00                    2725 	.db 0x00
                                   2726 	.area CSEG    (CODE)
                                   2727 	.area CONST   (CODE)
      000083                       2728 ___str_14:
      000083 54 45 52 4D           2729 	.ascii "TERM"
      000087 0D                    2730 	.db 0x0d
      000088 0A                    2731 	.db 0x0a
      000089 00                    2732 	.db 0x00
                                   2733 	.area CSEG    (CODE)
                                   2734 	.area XINIT   (CODE)
                                   2735 	.area CABS    (ABS,CODE)
