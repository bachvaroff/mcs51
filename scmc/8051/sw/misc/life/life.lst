                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _evolveu
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print32x
                                     16 	.globl _print16x
                                     17 	.globl _printstr
                                     18 	.globl _getchar_poll
                                     19 	.globl _getchar
                                     20 	.globl _putchar
                                     21 	.globl _toupper
                                     22 	.globl ___memcpy
                                     23 	.globl _memset
                                     24 	.globl _srand
                                     25 	.globl _rand
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable bit register bank
                                    291 ;--------------------------------------------------------
                                    292 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        293 bits:
      000000                        294 	.ds 1
                           008000   295 	b0 = bits[0]
                           008100   296 	b1 = bits[1]
                           008200   297 	b2 = bits[2]
                           008300   298 	b3 = bits[3]
                           008400   299 	b4 = bits[4]
                           008500   300 	b5 = bits[5]
                           008600   301 	b6 = bits[6]
                           008700   302 	b7 = bits[7]
                                    303 ;--------------------------------------------------------
                                    304 ; internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area DSEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 ;--------------------------------------------------------
                                    311 ; Stack segment in internal ram 
                                    312 ;--------------------------------------------------------
                                    313 	.area	SSEG
      000000                        314 __start__stack:
      000000                        315 	.ds	1
                                    316 
                                    317 ;--------------------------------------------------------
                                    318 ; indirectly addressable internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area ISEG    (DATA)
      000000                        321 _i0:
      000000                        322 	.ds 1
      000001                        323 _i1:
      000001                        324 	.ds 1
      000002                        325 _OE76:
      000002                        326 	.ds 1
      000003                        327 _gen:
      000003                        328 	.ds 4
      000007                        329 _genc2:
      000007                        330 	.ds 4
      00000B                        331 _genfx:
      00000B                        332 	.ds 4
      00000F                        333 _c2set:
      00000F                        334 	.ds 1
      000010                        335 _fxset:
      000010                        336 	.ds 1
      000011                        337 _pruni:
      000011                        338 	.ds 1
      000012                        339 _x:
      000012                        340 	.ds 2
      000014                        341 _y:
      000014                        342 	.ds 2
      000016                        343 _n:
      000016                        344 	.ds 1
      000017                        345 _fixed:
      000017                        346 	.ds 1
      000018                        347 _cycle2:
      000018                        348 	.ds 1
                                    349 ;--------------------------------------------------------
                                    350 ; absolute internal ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area IABS    (ABS,DATA)
                                    353 	.area IABS    (ABS,DATA)
                                    354 ;--------------------------------------------------------
                                    355 ; bit data
                                    356 ;--------------------------------------------------------
                                    357 	.area BSEG    (BIT)
                                    358 ;--------------------------------------------------------
                                    359 ; paged external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area PSEG    (PAG,XDATA)
                                    362 ;--------------------------------------------------------
                                    363 ; external ram data
                                    364 ;--------------------------------------------------------
                                    365 	.area XSEG    (XDATA)
                           00E000   366 _RND	=	0xe000
                           00F006   367 _OEreg	=	0xf006
      000000                        368 _iu:
      000000                        369 	.ds 9216
      002400                        370 _pu:
      002400                        371 	.ds 9216
      004800                        372 _u:
      004800                        373 	.ds 9216
      006C00                        374 _nu:
      006C00                        375 	.ds 9216
                                    376 ;--------------------------------------------------------
                                    377 ; absolute external ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XABS    (ABS,XDATA)
                                    380 ;--------------------------------------------------------
                                    381 ; external initialized ram data
                                    382 ;--------------------------------------------------------
                                    383 	.area XISEG   (XDATA)
                                    384 	.area HOME    (CODE)
                                    385 	.area GSINIT0 (CODE)
                                    386 	.area GSINIT1 (CODE)
                                    387 	.area GSINIT2 (CODE)
                                    388 	.area GSINIT3 (CODE)
                                    389 	.area GSINIT4 (CODE)
                                    390 	.area GSINIT5 (CODE)
                                    391 	.area GSINIT  (CODE)
                                    392 	.area GSFINAL (CODE)
                                    393 	.area CSEG    (CODE)
                                    394 ;--------------------------------------------------------
                                    395 ; interrupt vector 
                                    396 ;--------------------------------------------------------
                                    397 	.area HOME    (CODE)
      000000                        398 __interrupt_vect:
      000000 02r00r00         [24]  399 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  400 	ljmp	_int0
      000006                        401 	.ds	5
      00000B 32               [24]  402 	reti
      00000C                        403 	.ds	7
      000013 02r00r0C         [24]  404 	ljmp	_int1
                                    405 ;--------------------------------------------------------
                                    406 ; global & static initialisations
                                    407 ;--------------------------------------------------------
                                    408 	.area HOME    (CODE)
                                    409 	.area GSINIT  (CODE)
                                    410 	.area GSFINAL (CODE)
                                    411 	.area GSINIT  (CODE)
                                    412 	.globl __sdcc_gsinit_startup
                                    413 	.globl __sdcc_program_startup
                                    414 	.globl __start__stack
                                    415 	.globl __mcs51_genXINIT
                                    416 	.globl __mcs51_genXRAMCLEAR
                                    417 	.globl __mcs51_genRAMCLEAR
                                    418 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  419 	ljmp	__sdcc_program_startup
                                    420 ;--------------------------------------------------------
                                    421 ; Home
                                    422 ;--------------------------------------------------------
                                    423 	.area HOME    (CODE)
                                    424 	.area HOME    (CODE)
      000016                        425 __sdcc_program_startup:
      000016 02r07r24         [24]  426 	ljmp	_main
                                    427 ;	return from main will return to caller
                                    428 ;--------------------------------------------------------
                                    429 ; code
                                    430 ;--------------------------------------------------------
                                    431 	.area CSEG    (CODE)
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'int0'
                                    434 ;------------------------------------------------------------
                                    435 ;	life.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    436 ;	-----------------------------------------
                                    437 ;	 function int0
                                    438 ;	-----------------------------------------
      000000                        439 _int0:
                           00000F   440 	ar7 = 0x0f
                           00000E   441 	ar6 = 0x0e
                           00000D   442 	ar5 = 0x0d
                           00000C   443 	ar4 = 0x0c
                           00000B   444 	ar3 = 0x0b
                           00000A   445 	ar2 = 0x0a
                           000009   446 	ar1 = 0x09
                           000008   447 	ar0 = 0x08
      000000 C0 D0            [24]  448 	push	psw
      000002 75 D0 08         [24]  449 	mov	psw,#0x08
                                    450 ;	life.c:14: i0 = 1;
      000005 78r00            [12]  451 	mov	r0,#_i0
      000007 76 01            [12]  452 	mov	@r0,#0x01
                                    453 ;	life.c:15: }
      000009 D0 D0            [24]  454 	pop	psw
      00000B 32               [24]  455 	reti
                                    456 ;	eliminated unneeded push/pop dpl
                                    457 ;	eliminated unneeded push/pop dph
                                    458 ;	eliminated unneeded push/pop b
                                    459 ;	eliminated unneeded push/pop acc
                                    460 ;------------------------------------------------------------
                                    461 ;Allocation info for local variables in function 'int1'
                                    462 ;------------------------------------------------------------
                                    463 ;	life.c:17: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    464 ;	-----------------------------------------
                                    465 ;	 function int1
                                    466 ;	-----------------------------------------
      00000C                        467 _int1:
      00000C C0 D0            [24]  468 	push	psw
      00000E 75 D0 08         [24]  469 	mov	psw,#0x08
                                    470 ;	life.c:18: i1 = 1;
      000011 78r01            [12]  471 	mov	r0,#_i1
      000013 76 01            [12]  472 	mov	@r0,#0x01
                                    473 ;	life.c:19: }
      000015 D0 D0            [24]  474 	pop	psw
      000017 32               [24]  475 	reti
                                    476 ;	eliminated unneeded push/pop dpl
                                    477 ;	eliminated unneeded push/pop dph
                                    478 ;	eliminated unneeded push/pop b
                                    479 ;	eliminated unneeded push/pop acc
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'initu'
                                    482 ;------------------------------------------------------------
                                    483 ;	life.c:92: static void initu(void) {
                                    484 ;	-----------------------------------------
                                    485 ;	 function initu
                                    486 ;	-----------------------------------------
      000018                        487 _initu:
                           000007   488 	ar7 = 0x07
                           000006   489 	ar6 = 0x06
                           000005   490 	ar5 = 0x05
                           000004   491 	ar4 = 0x04
                           000003   492 	ar3 = 0x03
                           000002   493 	ar2 = 0x02
                           000001   494 	ar1 = 0x01
                           000000   495 	ar0 = 0x00
                                    496 ;	life.c:93: memcpy(u, iu, sizeof (iu));
      000018 E4               [12]  497 	clr	a
      000019 C0 E0            [24]  498 	push	acc
      00001B 74 24            [12]  499 	mov	a,#0x24
      00001D C0 E0            [24]  500 	push	acc
      00001F 74r00            [12]  501 	mov	a,#_iu
      000021 C0 E0            [24]  502 	push	acc
      000023 74s00            [12]  503 	mov	a,#(_iu >> 8)
      000025 C0 E0            [24]  504 	push	acc
      000027 E4               [12]  505 	clr	a
      000028 C0 E0            [24]  506 	push	acc
      00002A 90r48r00         [24]  507 	mov	dptr,#_u
      00002D 75 F0 00         [24]  508 	mov	b,#0x00
      000030 12r00r00         [24]  509 	lcall	___memcpy
      000033 E5 81            [12]  510 	mov	a,sp
      000035 24 FB            [12]  511 	add	a,#0xfb
      000037 F5 81            [12]  512 	mov	sp,a
                                    513 ;	life.c:94: memset(pu, 0, sizeof (pu));
      000039 E4               [12]  514 	clr	a
      00003A C0 E0            [24]  515 	push	acc
      00003C 74 24            [12]  516 	mov	a,#0x24
      00003E C0 E0            [24]  517 	push	acc
      000040 E4               [12]  518 	clr	a
      000041 C0 E0            [24]  519 	push	acc
      000043 90r24r00         [24]  520 	mov	dptr,#_pu
      000046 75 F0 00         [24]  521 	mov	b,#0x00
      000049 12r00r00         [24]  522 	lcall	_memset
      00004C 15 81            [12]  523 	dec	sp
      00004E 15 81            [12]  524 	dec	sp
      000050 15 81            [12]  525 	dec	sp
                                    526 ;	life.c:43: gen = 0ul;
      000052 78r03            [12]  527 	mov	r0,#_gen
      000054 E4               [12]  528 	clr	a
      000055 F6               [12]  529 	mov	@r0,a
      000056 08               [12]  530 	inc	r0
      000057 F6               [12]  531 	mov	@r0,a
      000058 08               [12]  532 	inc	r0
      000059 F6               [12]  533 	mov	@r0,a
      00005A 08               [12]  534 	inc	r0
      00005B F6               [12]  535 	mov	@r0,a
                                    536 ;	life.c:44: genc2 = 0ul;
      00005C 78r07            [12]  537 	mov	r0,#_genc2
      00005E F6               [12]  538 	mov	@r0,a
      00005F 08               [12]  539 	inc	r0
      000060 F6               [12]  540 	mov	@r0,a
      000061 08               [12]  541 	inc	r0
      000062 F6               [12]  542 	mov	@r0,a
      000063 08               [12]  543 	inc	r0
      000064 F6               [12]  544 	mov	@r0,a
                                    545 ;	life.c:45: genfx = 0ul;
      000065 78r0B            [12]  546 	mov	r0,#_genfx
      000067 F6               [12]  547 	mov	@r0,a
      000068 08               [12]  548 	inc	r0
      000069 F6               [12]  549 	mov	@r0,a
      00006A 08               [12]  550 	inc	r0
      00006B F6               [12]  551 	mov	@r0,a
      00006C 08               [12]  552 	inc	r0
      00006D F6               [12]  553 	mov	@r0,a
                                    554 ;	life.c:46: c2set = 0;
      00006E 78r0F            [12]  555 	mov	r0,#_c2set
      000070 76 00            [12]  556 	mov	@r0,#0x00
                                    557 ;	life.c:47: fxset = 0;
      000072 78r10            [12]  558 	mov	r0,#_fxset
      000074 76 00            [12]  559 	mov	@r0,#0x00
                                    560 ;	life.c:97: return;
                                    561 ;	life.c:98: }
      000076 22               [24]  562 	ret
                                    563 ;------------------------------------------------------------
                                    564 ;Allocation info for local variables in function 'showu'
                                    565 ;------------------------------------------------------------
                                    566 ;universe                  Allocated to stack - _bp -5
                                    567 ;prflags                   Allocated to registers r7 
                                    568 ;------------------------------------------------------------
                                    569 ;	life.c:105: static void showu(char prflags, char *universe) {
                                    570 ;	-----------------------------------------
                                    571 ;	 function showu
                                    572 ;	-----------------------------------------
      000077                        573 _showu:
      000077 C0*00            [24]  574 	push	_bp
      000079 85 81*00         [24]  575 	mov	_bp,sp
                                    576 ;	life.c:106: if (prflags & PRCLR) printstr("\033[2J");
      00007C E5 82            [12]  577 	mov	a,dpl
      00007E FF               [12]  578 	mov	r7,a
      00007F 30 E0 0D         [24]  579 	jnb	acc.0,00102$
      000082 90r00r00         [24]  580 	mov	dptr,#___str_0
      000085 75 F0 80         [24]  581 	mov	b,#0x80
      000088 C0 07            [24]  582 	push	ar7
      00008A 12r00r00         [24]  583 	lcall	_printstr
      00008D D0 07            [24]  584 	pop	ar7
      00008F                        585 00102$:
                                    586 ;	life.c:107: if (prflags & PRHDR) {
      00008F EF               [12]  587 	mov	a,r7
      000090 30 E1 6B         [24]  588 	jnb	acc.1,00108$
                                    589 ;	life.c:108: printstr("GEN ");
      000093 90r00r05         [24]  590 	mov	dptr,#___str_1
      000096 75 F0 80         [24]  591 	mov	b,#0x80
      000099 C0 07            [24]  592 	push	ar7
      00009B 12r00r00         [24]  593 	lcall	_printstr
                                    594 ;	life.c:109: print32x(gen);
      00009E 78r03            [12]  595 	mov	r0,#_gen
      0000A0 86 82            [24]  596 	mov	dpl,@r0
      0000A2 08               [12]  597 	inc	r0
      0000A3 86 83            [24]  598 	mov	dph,@r0
      0000A5 08               [12]  599 	inc	r0
      0000A6 86 F0            [24]  600 	mov	b,@r0
      0000A8 08               [12]  601 	inc	r0
      0000A9 E6               [12]  602 	mov	a,@r0
      0000AA 12r00r00         [24]  603 	lcall	_print32x
      0000AD D0 07            [24]  604 	pop	ar7
                                    605 ;	life.c:110: if (c2set) {
      0000AF 78r0F            [12]  606 	mov	r0,#_c2set
      0000B1 E6               [12]  607 	mov	a,@r0
      0000B2 60 1C            [24]  608 	jz	00104$
                                    609 ;	life.c:111: printstr(" CYCLE2 ");
      0000B4 90r00r0A         [24]  610 	mov	dptr,#___str_2
      0000B7 75 F0 80         [24]  611 	mov	b,#0x80
      0000BA C0 07            [24]  612 	push	ar7
      0000BC 12r00r00         [24]  613 	lcall	_printstr
                                    614 ;	life.c:112: print32x(genc2);
      0000BF 78r07            [12]  615 	mov	r0,#_genc2
      0000C1 86 82            [24]  616 	mov	dpl,@r0
      0000C3 08               [12]  617 	inc	r0
      0000C4 86 83            [24]  618 	mov	dph,@r0
      0000C6 08               [12]  619 	inc	r0
      0000C7 86 F0            [24]  620 	mov	b,@r0
      0000C9 08               [12]  621 	inc	r0
      0000CA E6               [12]  622 	mov	a,@r0
      0000CB 12r00r00         [24]  623 	lcall	_print32x
      0000CE D0 07            [24]  624 	pop	ar7
      0000D0                        625 00104$:
                                    626 ;	life.c:114: if (fxset) {
      0000D0 78r10            [12]  627 	mov	r0,#_fxset
      0000D2 E6               [12]  628 	mov	a,@r0
      0000D3 60 1C            [24]  629 	jz	00106$
                                    630 ;	life.c:115: printstr(" FIXED ");
      0000D5 90r00r13         [24]  631 	mov	dptr,#___str_3
      0000D8 75 F0 80         [24]  632 	mov	b,#0x80
      0000DB C0 07            [24]  633 	push	ar7
      0000DD 12r00r00         [24]  634 	lcall	_printstr
                                    635 ;	life.c:116: print32x(genfx);
      0000E0 78r0B            [12]  636 	mov	r0,#_genfx
      0000E2 86 82            [24]  637 	mov	dpl,@r0
      0000E4 08               [12]  638 	inc	r0
      0000E5 86 83            [24]  639 	mov	dph,@r0
      0000E7 08               [12]  640 	inc	r0
      0000E8 86 F0            [24]  641 	mov	b,@r0
      0000EA 08               [12]  642 	inc	r0
      0000EB E6               [12]  643 	mov	a,@r0
      0000EC 12r00r00         [24]  644 	lcall	_print32x
      0000EF D0 07            [24]  645 	pop	ar7
      0000F1                        646 00106$:
                                    647 ;	life.c:118: printstr("\r\n");
      0000F1 90r00r1B         [24]  648 	mov	dptr,#___str_4
      0000F4 75 F0 80         [24]  649 	mov	b,#0x80
      0000F7 C0 07            [24]  650 	push	ar7
      0000F9 12r00r00         [24]  651 	lcall	_printstr
      0000FC D0 07            [24]  652 	pop	ar7
      0000FE                        653 00108$:
                                    654 ;	life.c:120: if (prflags & PRUNI) {
      0000FE EF               [12]  655 	mov	a,r7
      0000FF 20 E2 03         [24]  656 	jb	acc.2,00166$
      000102 02r01rA3         [24]  657 	ljmp	00115$
      000105                        658 00166$:
                                    659 ;	life.c:121: printstr("\033[?25l");
      000105 90r00r1E         [24]  660 	mov	dptr,#___str_5
      000108 75 F0 80         [24]  661 	mov	b,#0x80
      00010B 12r00r00         [24]  662 	lcall	_printstr
                                    663 ;	life.c:122: for (x = 0; x < W; x++) {
      00010E 78r12            [12]  664 	mov	r0,#_x
      000110 E4               [12]  665 	clr	a
      000111 F6               [12]  666 	mov	@r0,a
      000112 08               [12]  667 	inc	r0
      000113 F6               [12]  668 	mov	@r0,a
      000114                        669 00118$:
                                    670 ;	life.c:123: for (y = 0; y < H; y++)
      000114 78r14            [12]  671 	mov	r0,#_y
      000116 E4               [12]  672 	clr	a
      000117 F6               [12]  673 	mov	@r0,a
      000118 08               [12]  674 	inc	r0
      000119 F6               [12]  675 	mov	@r0,a
      00011A                        676 00116$:
                                    677 ;	life.c:124: if (universe[A2D(W, y, x)]) putchar((int)'1');
      00011A 78r14            [12]  678 	mov	r0,#_y
      00011C E6               [12]  679 	mov	a,@r0
      00011D C0 E0            [24]  680 	push	acc
      00011F 08               [12]  681 	inc	r0
      000120 E6               [12]  682 	mov	a,@r0
      000121 C0 E0            [24]  683 	push	acc
      000123 90 00 30         [24]  684 	mov	dptr,#0x0030
      000126 12r00r00         [24]  685 	lcall	__mulint
      000129 AE 82            [24]  686 	mov	r6,dpl
      00012B AF 83            [24]  687 	mov	r7,dph
      00012D 15 81            [12]  688 	dec	sp
      00012F 15 81            [12]  689 	dec	sp
      000131 78r12            [12]  690 	mov	r0,#_x
      000133 E6               [12]  691 	mov	a,@r0
      000134 2E               [12]  692 	add	a,r6
      000135 FE               [12]  693 	mov	r6,a
      000136 08               [12]  694 	inc	r0
      000137 E6               [12]  695 	mov	a,@r0
      000138 3F               [12]  696 	addc	a,r7
      000139 FF               [12]  697 	mov	r7,a
      00013A E5*00            [12]  698 	mov	a,_bp
      00013C 24 FB            [12]  699 	add	a,#0xfb
      00013E F8               [12]  700 	mov	r0,a
      00013F EE               [12]  701 	mov	a,r6
      000140 26               [12]  702 	add	a,@r0
      000141 FE               [12]  703 	mov	r6,a
      000142 EF               [12]  704 	mov	a,r7
      000143 08               [12]  705 	inc	r0
      000144 36               [12]  706 	addc	a,@r0
      000145 FF               [12]  707 	mov	r7,a
      000146 08               [12]  708 	inc	r0
      000147 86 05            [24]  709 	mov	ar5,@r0
      000149 8E 82            [24]  710 	mov	dpl,r6
      00014B 8F 83            [24]  711 	mov	dph,r7
      00014D 8D F0            [24]  712 	mov	b,r5
      00014F 12r00r00         [24]  713 	lcall	__gptrget
      000152 60 08            [24]  714 	jz	00110$
      000154 90 00 31         [24]  715 	mov	dptr,#0x0031
      000157 12r00r00         [24]  716 	lcall	_putchar
      00015A 80 06            [24]  717 	sjmp	00117$
      00015C                        718 00110$:
                                    719 ;	life.c:125: else putchar((int)'0');
      00015C 90 00 30         [24]  720 	mov	dptr,#0x0030
      00015F 12r00r00         [24]  721 	lcall	_putchar
      000162                        722 00117$:
                                    723 ;	life.c:123: for (y = 0; y < H; y++)
      000162 78r14            [12]  724 	mov	r0,#_y
      000164 06               [12]  725 	inc	@r0
      000165 B6 00 02         [24]  726 	cjne	@r0,#0x00,00168$
      000168 08               [12]  727 	inc	r0
      000169 06               [12]  728 	inc	@r0
      00016A                        729 00168$:
      00016A 78r14            [12]  730 	mov	r0,#_y
      00016C C3               [12]  731 	clr	c
      00016D E6               [12]  732 	mov	a,@r0
      00016E 94 C0            [12]  733 	subb	a,#0xc0
      000170 08               [12]  734 	inc	r0
      000171 E6               [12]  735 	mov	a,@r0
      000172 64 80            [12]  736 	xrl	a,#0x80
      000174 94 80            [12]  737 	subb	a,#0x80
      000176 40 A2            [24]  738 	jc	00116$
                                    739 ;	life.c:126: printstr("\r\n");
      000178 90r00r1B         [24]  740 	mov	dptr,#___str_4
      00017B 75 F0 80         [24]  741 	mov	b,#0x80
      00017E 12r00r00         [24]  742 	lcall	_printstr
                                    743 ;	life.c:122: for (x = 0; x < W; x++) {
      000181 78r12            [12]  744 	mov	r0,#_x
      000183 06               [12]  745 	inc	@r0
      000184 B6 00 02         [24]  746 	cjne	@r0,#0x00,00170$
      000187 08               [12]  747 	inc	r0
      000188 06               [12]  748 	inc	@r0
      000189                        749 00170$:
      000189 78r12            [12]  750 	mov	r0,#_x
      00018B C3               [12]  751 	clr	c
      00018C E6               [12]  752 	mov	a,@r0
      00018D 94 30            [12]  753 	subb	a,#0x30
      00018F 08               [12]  754 	inc	r0
      000190 E6               [12]  755 	mov	a,@r0
      000191 64 80            [12]  756 	xrl	a,#0x80
      000193 94 80            [12]  757 	subb	a,#0x80
      000195 50 03            [24]  758 	jnc	00171$
      000197 02r01r14         [24]  759 	ljmp	00118$
      00019A                        760 00171$:
                                    761 ;	life.c:128: printstr("\033[?25h");
      00019A 90r00r25         [24]  762 	mov	dptr,#___str_6
      00019D 75 F0 80         [24]  763 	mov	b,#0x80
      0001A0 12r00r00         [24]  764 	lcall	_printstr
      0001A3                        765 00115$:
                                    766 ;	life.c:131: return;
                                    767 ;	life.c:132: }
      0001A3 D0*00            [24]  768 	pop	_bp
      0001A5 22               [24]  769 	ret
                                    770 ;------------------------------------------------------------
                                    771 ;Allocation info for local variables in function 'loadiu'
                                    772 ;------------------------------------------------------------
                                    773 ;nbits                     Allocated to registers r6 r7 
                                    774 ;c                         Allocated to registers r4 r5 
                                    775 ;sloc0                     Allocated to stack - _bp +5
                                    776 ;------------------------------------------------------------
                                    777 ;	life.c:134: static void loadiu(void) {
                                    778 ;	-----------------------------------------
                                    779 ;	 function loadiu
                                    780 ;	-----------------------------------------
      0001A6                        781 _loadiu:
                                    782 ;	life.c:137: memset(iu, 0, sizeof (iu));
      0001A6 E4               [12]  783 	clr	a
      0001A7 C0 E0            [24]  784 	push	acc
      0001A9 74 24            [12]  785 	mov	a,#0x24
      0001AB C0 E0            [24]  786 	push	acc
      0001AD E4               [12]  787 	clr	a
      0001AE C0 E0            [24]  788 	push	acc
      0001B0 90r00r00         [24]  789 	mov	dptr,#_iu
      0001B3 75 F0 00         [24]  790 	mov	b,#0x00
      0001B6 12r00r00         [24]  791 	lcall	_memset
      0001B9 15 81            [12]  792 	dec	sp
      0001BB 15 81            [12]  793 	dec	sp
      0001BD 15 81            [12]  794 	dec	sp
                                    795 ;	life.c:139: printstr("LOAD 0 1 ~ # <");
      0001BF 90r00r2C         [24]  796 	mov	dptr,#___str_7
      0001C2 75 F0 80         [24]  797 	mov	b,#0x80
      0001C5 12r00r00         [24]  798 	lcall	_printstr
                                    799 ;	life.c:141: for (nbits = 0, y = 0; y < (H * W); y += W) {
      0001C8 7E 00            [12]  800 	mov	r6,#0x00
      0001CA 7F 00            [12]  801 	mov	r7,#0x00
      0001CC 78r14            [12]  802 	mov	r0,#_y
      0001CE E4               [12]  803 	clr	a
      0001CF F6               [12]  804 	mov	@r0,a
      0001D0 08               [12]  805 	inc	r0
      0001D1 F6               [12]  806 	mov	@r0,a
      0001D2                        807 00129$:
      0001D2 78r14            [12]  808 	mov	r0,#_y
      0001D4 C3               [12]  809 	clr	c
      0001D5 08               [12]  810 	inc	r0
      0001D6 E6               [12]  811 	mov	a,@r0
      0001D7 64 80            [12]  812 	xrl	a,#0x80
      0001D9 94 A4            [12]  813 	subb	a,#0xa4
      0001DB 40 03            [24]  814 	jc	00173$
      0001DD 02r02r76         [24]  815 	ljmp	00119$
      0001E0                        816 00173$:
                                    817 ;	life.c:142: for (x = 0; x < W; x++) {
      0001E0 78r12            [12]  818 	mov	r0,#_x
      0001E2 E4               [12]  819 	clr	a
      0001E3 F6               [12]  820 	mov	@r0,a
      0001E4 08               [12]  821 	inc	r0
      0001E5 F6               [12]  822 	mov	@r0,a
                                    823 ;	life.c:143: while (1) {
      0001E6                        824 00113$:
                                    825 ;	life.c:144: c = getchar();
      0001E6 C0 07            [24]  826 	push	ar7
      0001E8 C0 06            [24]  827 	push	ar6
      0001EA 12r00r00         [24]  828 	lcall	_getchar
      0001ED AB 82            [24]  829 	mov	r3,dpl
      0001EF AA 83            [24]  830 	mov	r2,dph
      0001F1 D0 06            [24]  831 	pop	ar6
      0001F3 D0 07            [24]  832 	pop	ar7
                                    833 ;	life.c:145: if (c == (int)'0') {
      0001F5 BB 30 22         [24]  834 	cjne	r3,#0x30,00110$
      0001F8 BA 00 1F         [24]  835 	cjne	r2,#0x00,00110$
                                    836 ;	life.c:146: iu[y + x] = 0;
      0001FB 78r14            [12]  837 	mov	r0,#_y
      0001FD 79r12            [12]  838 	mov	r1,#_x
      0001FF E7               [12]  839 	mov	a,@r1
      000200 26               [12]  840 	add	a,@r0
      000201 FC               [12]  841 	mov	r4,a
      000202 09               [12]  842 	inc	r1
      000203 E7               [12]  843 	mov	a,@r1
      000204 08               [12]  844 	inc	r0
      000205 36               [12]  845 	addc	a,@r0
      000206 FD               [12]  846 	mov	r5,a
      000207 EC               [12]  847 	mov	a,r4
      000208 24r00            [12]  848 	add	a,#_iu
      00020A F5 82            [12]  849 	mov	dpl,a
      00020C ED               [12]  850 	mov	a,r5
      00020D 34s00            [12]  851 	addc	a,#(_iu >> 8)
      00020F F5 83            [12]  852 	mov	dph,a
      000211 E4               [12]  853 	clr	a
      000212 F0               [24]  854 	movx	@dptr,a
                                    855 ;	life.c:147: nbits++;
      000213 0E               [12]  856 	inc	r6
                                    857 ;	life.c:148: break;
      000214 BE 00 39         [24]  858 	cjne	r6,#0x00,00116$
      000217 0F               [12]  859 	inc	r7
      000218 80 36            [24]  860 	sjmp	00116$
      00021A                        861 00110$:
                                    862 ;	life.c:149: } else if (c == (int)'1') {
      00021A BB 31 23         [24]  863 	cjne	r3,#0x31,00107$
      00021D BA 00 20         [24]  864 	cjne	r2,#0x00,00107$
                                    865 ;	life.c:150: iu[y + x] = 1;
      000220 78r14            [12]  866 	mov	r0,#_y
      000222 79r12            [12]  867 	mov	r1,#_x
      000224 E7               [12]  868 	mov	a,@r1
      000225 26               [12]  869 	add	a,@r0
      000226 FC               [12]  870 	mov	r4,a
      000227 09               [12]  871 	inc	r1
      000228 E7               [12]  872 	mov	a,@r1
      000229 08               [12]  873 	inc	r0
      00022A 36               [12]  874 	addc	a,@r0
      00022B FD               [12]  875 	mov	r5,a
      00022C EC               [12]  876 	mov	a,r4
      00022D 24r00            [12]  877 	add	a,#_iu
      00022F F5 82            [12]  878 	mov	dpl,a
      000231 ED               [12]  879 	mov	a,r5
      000232 34s00            [12]  880 	addc	a,#(_iu >> 8)
      000234 F5 83            [12]  881 	mov	dph,a
      000236 74 01            [12]  882 	mov	a,#0x01
      000238 F0               [24]  883 	movx	@dptr,a
                                    884 ;	life.c:151: nbits++;
      000239 0E               [12]  885 	inc	r6
                                    886 ;	life.c:152: break;
      00023A BE 00 13         [24]  887 	cjne	r6,#0x00,00116$
      00023D 0F               [12]  888 	inc	r7
      00023E 80 10            [24]  889 	sjmp	00116$
      000240                        890 00107$:
                                    891 ;	life.c:153: } else if (c == (int)'~') goto br_inner;
      000240 BB 7E 05         [24]  892 	cjne	r3,#0x7e,00180$
      000243 BA 00 02         [24]  893 	cjne	r2,#0x00,00180$
      000246 80 21            [24]  894 	sjmp	00130$
      000248                        895 00180$:
                                    896 ;	life.c:154: else if (c == (int)'#') goto out;
                                    897 ;	life.c:158: break;
      000248 BB 23 9B         [24]  898 	cjne	r3,#0x23,00113$
      00024B BA 00 98         [24]  899 	cjne	r2,#0x00,00113$
      00024E 80 26            [24]  900 	sjmp	00119$
      000250                        901 00116$:
                                    902 ;	life.c:142: for (x = 0; x < W; x++) {
      000250 78r12            [12]  903 	mov	r0,#_x
      000252 06               [12]  904 	inc	@r0
      000253 B6 00 02         [24]  905 	cjne	@r0,#0x00,00182$
      000256 08               [12]  906 	inc	r0
      000257 06               [12]  907 	inc	@r0
      000258                        908 00182$:
      000258 78r12            [12]  909 	mov	r0,#_x
      00025A C3               [12]  910 	clr	c
      00025B E6               [12]  911 	mov	a,@r0
      00025C 94 30            [12]  912 	subb	a,#0x30
      00025E 08               [12]  913 	inc	r0
      00025F E6               [12]  914 	mov	a,@r0
      000260 64 80            [12]  915 	xrl	a,#0x80
      000262 94 80            [12]  916 	subb	a,#0x80
      000264 50 03            [24]  917 	jnc	00183$
      000266 02r01rE6         [24]  918 	ljmp	00113$
      000269                        919 00183$:
      000269                        920 00130$:
                                    921 ;	life.c:141: for (nbits = 0, y = 0; y < (H * W); y += W) {
      000269 78r14            [12]  922 	mov	r0,#_y
      00026B 74 30            [12]  923 	mov	a,#0x30
      00026D 26               [12]  924 	add	a,@r0
      00026E F6               [12]  925 	mov	@r0,a
      00026F E4               [12]  926 	clr	a
      000270 08               [12]  927 	inc	r0
      000271 36               [12]  928 	addc	a,@r0
      000272 F6               [12]  929 	mov	@r0,a
      000273 02r01rD2         [24]  930 	ljmp	00129$
                                    931 ;	life.c:162: out:
      000276                        932 00119$:
                                    933 ;	life.c:163: if (c != (int)'#')
      000276 BB 23 05         [24]  934 	cjne	r3,#0x23,00184$
      000279 BA 00 02         [24]  935 	cjne	r2,#0x00,00184$
      00027C 80 15            [24]  936 	sjmp	00126$
      00027E                        937 00184$:
                                    938 ;	life.c:164: while (1) {
      00027E                        939 00123$:
                                    940 ;	life.c:165: c = getchar();
      00027E C0 07            [24]  941 	push	ar7
      000280 C0 06            [24]  942 	push	ar6
      000282 12r00r00         [24]  943 	lcall	_getchar
      000285 AC 82            [24]  944 	mov	r4,dpl
      000287 AD 83            [24]  945 	mov	r5,dph
      000289 D0 06            [24]  946 	pop	ar6
      00028B D0 07            [24]  947 	pop	ar7
                                    948 ;	life.c:166: if (c == (int)'#') break;
      00028D BC 23 EE         [24]  949 	cjne	r4,#0x23,00123$
      000290 BD 00 EB         [24]  950 	cjne	r5,#0x00,00123$
      000293                        951 00126$:
                                    952 ;	life.c:168: print16x(nbits);
      000293 8E 82            [24]  953 	mov	dpl,r6
      000295 8F 83            [24]  954 	mov	dph,r7
      000297 12r00r00         [24]  955 	lcall	_print16x
                                    956 ;	life.c:169: printstr(">\r\n");
      00029A 90r00r3B         [24]  957 	mov	dptr,#___str_8
      00029D 75 F0 80         [24]  958 	mov	b,#0x80
                                    959 ;	life.c:171: return;
                                    960 ;	life.c:172: }
      0002A0 02r00r00         [24]  961 	ljmp	_printstr
                                    962 ;------------------------------------------------------------
                                    963 ;Allocation info for local variables in function 'loadriu'
                                    964 ;------------------------------------------------------------
                                    965 ;	life.c:174: static void loadriu(void) {
                                    966 ;	-----------------------------------------
                                    967 ;	 function loadriu
                                    968 ;	-----------------------------------------
      0002A3                        969 _loadriu:
                                    970 ;	life.c:175: printstr("RANDOM");
      0002A3 90r00r3F         [24]  971 	mov	dptr,#___str_9
      0002A6 75 F0 80         [24]  972 	mov	b,#0x80
      0002A9 12r00r00         [24]  973 	lcall	_printstr
                                    974 ;	life.c:177: for (y = 0; y < (H * W); y += W)
      0002AC 78r14            [12]  975 	mov	r0,#_y
      0002AE E4               [12]  976 	clr	a
      0002AF F6               [12]  977 	mov	@r0,a
      0002B0 08               [12]  978 	inc	r0
      0002B1 F6               [12]  979 	mov	@r0,a
      0002B2                        980 00105$:
                                    981 ;	life.c:178: for (x = 0; x < W; x++)
      0002B2 78r12            [12]  982 	mov	r0,#_x
      0002B4 E4               [12]  983 	clr	a
      0002B5 F6               [12]  984 	mov	@r0,a
      0002B6 08               [12]  985 	inc	r0
      0002B7 F6               [12]  986 	mov	@r0,a
      0002B8                        987 00103$:
                                    988 ;	life.c:179: iu[y + x] = rand() & 1;
      0002B8 78r14            [12]  989 	mov	r0,#_y
      0002BA 79r12            [12]  990 	mov	r1,#_x
      0002BC E7               [12]  991 	mov	a,@r1
      0002BD 26               [12]  992 	add	a,@r0
      0002BE FE               [12]  993 	mov	r6,a
      0002BF 09               [12]  994 	inc	r1
      0002C0 E7               [12]  995 	mov	a,@r1
      0002C1 08               [12]  996 	inc	r0
      0002C2 36               [12]  997 	addc	a,@r0
      0002C3 FF               [12]  998 	mov	r7,a
      0002C4 EE               [12]  999 	mov	a,r6
      0002C5 24r00            [12] 1000 	add	a,#_iu
      0002C7 FE               [12] 1001 	mov	r6,a
      0002C8 EF               [12] 1002 	mov	a,r7
      0002C9 34s00            [12] 1003 	addc	a,#(_iu >> 8)
      0002CB FF               [12] 1004 	mov	r7,a
      0002CC C0 07            [24] 1005 	push	ar7
      0002CE C0 06            [24] 1006 	push	ar6
      0002D0 12r00r00         [24] 1007 	lcall	_rand
      0002D3 AC 82            [24] 1008 	mov	r4,dpl
      0002D5 D0 06            [24] 1009 	pop	ar6
      0002D7 D0 07            [24] 1010 	pop	ar7
      0002D9 53 04 01         [24] 1011 	anl	ar4,#0x01
      0002DC 8E 82            [24] 1012 	mov	dpl,r6
      0002DE 8F 83            [24] 1013 	mov	dph,r7
      0002E0 EC               [12] 1014 	mov	a,r4
      0002E1 F0               [24] 1015 	movx	@dptr,a
                                   1016 ;	life.c:178: for (x = 0; x < W; x++)
      0002E2 78r12            [12] 1017 	mov	r0,#_x
      0002E4 06               [12] 1018 	inc	@r0
      0002E5 B6 00 02         [24] 1019 	cjne	@r0,#0x00,00125$
      0002E8 08               [12] 1020 	inc	r0
      0002E9 06               [12] 1021 	inc	@r0
      0002EA                       1022 00125$:
      0002EA 78r12            [12] 1023 	mov	r0,#_x
      0002EC C3               [12] 1024 	clr	c
      0002ED E6               [12] 1025 	mov	a,@r0
      0002EE 94 30            [12] 1026 	subb	a,#0x30
      0002F0 08               [12] 1027 	inc	r0
      0002F1 E6               [12] 1028 	mov	a,@r0
      0002F2 64 80            [12] 1029 	xrl	a,#0x80
      0002F4 94 80            [12] 1030 	subb	a,#0x80
      0002F6 40 C0            [24] 1031 	jc	00103$
                                   1032 ;	life.c:177: for (y = 0; y < (H * W); y += W)
      0002F8 78r14            [12] 1033 	mov	r0,#_y
      0002FA 74 30            [12] 1034 	mov	a,#0x30
      0002FC 26               [12] 1035 	add	a,@r0
      0002FD F6               [12] 1036 	mov	@r0,a
      0002FE E4               [12] 1037 	clr	a
      0002FF 08               [12] 1038 	inc	r0
      000300 36               [12] 1039 	addc	a,@r0
      000301 F6               [12] 1040 	mov	@r0,a
      000302 78r14            [12] 1041 	mov	r0,#_y
      000304 C3               [12] 1042 	clr	c
      000305 08               [12] 1043 	inc	r0
      000306 E6               [12] 1044 	mov	a,@r0
      000307 64 80            [12] 1045 	xrl	a,#0x80
      000309 94 A4            [12] 1046 	subb	a,#0xa4
      00030B 40 A5            [24] 1047 	jc	00105$
                                   1048 ;	life.c:181: printstr("\r\n");
      00030D 90r00r1B         [24] 1049 	mov	dptr,#___str_4
      000310 75 F0 80         [24] 1050 	mov	b,#0x80
                                   1051 ;	life.c:183: return;
                                   1052 ;	life.c:184: }
      000313 02r00r00         [24] 1053 	ljmp	_printstr
                                   1054 ;------------------------------------------------------------
                                   1055 ;Allocation info for local variables in function 'evolveu'
                                   1056 ;------------------------------------------------------------
                                   1057 ;sloc0                     Allocated to stack - _bp +1
                                   1058 ;sloc1                     Allocated to stack - _bp +2
                                   1059 ;sloc2                     Allocated to stack - _bp +4
                                   1060 ;sloc3                     Allocated to stack - _bp +6
                                   1061 ;sloc4                     Allocated to stack - _bp +8
                                   1062 ;------------------------------------------------------------
                                   1063 ;	life.c:186: void evolveu(void) {
                                   1064 ;	-----------------------------------------
                                   1065 ;	 function evolveu
                                   1066 ;	-----------------------------------------
      000316                       1067 _evolveu:
      000316 C0*00            [24] 1068 	push	_bp
      000318 E5 81            [12] 1069 	mov	a,sp
      00031A F5*00            [12] 1070 	mov	_bp,a
      00031C 24 09            [12] 1071 	add	a,#0x09
      00031E F5 81            [12] 1072 	mov	sp,a
                                   1073 ;	life.c:187: fixed = 0;
      000320 78r17            [12] 1074 	mov	r0,#_fixed
      000322 76 00            [12] 1075 	mov	@r0,#0x00
                                   1076 ;	life.c:188: cycle2 = 0;
      000324 78r18            [12] 1077 	mov	r0,#_cycle2
      000326 76 00            [12] 1078 	mov	@r0,#0x00
                                   1079 ;	life.c:190: OE76 = OE76_0;
      000328 78r02            [12] 1080 	mov	r0,#_OE76
      00032A 76 3F            [12] 1081 	mov	@r0,#0x3f
                                   1082 ;	life.c:30: OEreg = OE76;
      00032C 90 F0 06         [24] 1083 	mov	dptr,#_OEreg
      00032F 74 3F            [12] 1084 	mov	a,#0x3f
      000331 F0               [24] 1085 	movx	@dptr,a
                                   1086 ;	life.c:193: for (y = 0; y < H; y++) {
      000332 78r14            [12] 1087 	mov	r0,#_y
      000334 E4               [12] 1088 	clr	a
      000335 F6               [12] 1089 	mov	@r0,a
      000336 08               [12] 1090 	inc	r0
      000337 F6               [12] 1091 	mov	@r0,a
      000338                       1092 00135$:
                                   1093 ;	life.c:194: OE76 = OE76_0 | ((y & 0x0003u) << 6);
      000338 78r14            [12] 1094 	mov	r0,#_y
      00033A 86 07            [24] 1095 	mov	ar7,@r0
      00033C 53 07 03         [24] 1096 	anl	ar7,#0x03
      00033F EF               [12] 1097 	mov	a,r7
      000340 03               [12] 1098 	rr	a
      000341 03               [12] 1099 	rr	a
      000342 54 C0            [12] 1100 	anl	a,#0xc0
      000344 FF               [12] 1101 	mov	r7,a
      000345 43 07 3F         [24] 1102 	orl	ar7,#0x3f
      000348 78r02            [12] 1103 	mov	r0,#_OE76
      00034A A6 07            [24] 1104 	mov	@r0,ar7
                                   1105 ;	life.c:30: OEreg = OE76;
      00034C 90 F0 06         [24] 1106 	mov	dptr,#_OEreg
      00034F EF               [12] 1107 	mov	a,r7
      000350 F0               [24] 1108 	movx	@dptr,a
                                   1109 ;	life.c:196: for (x = 0; x < W; x++) {
      000351 78r12            [12] 1110 	mov	r0,#_x
      000353 E4               [12] 1111 	clr	a
      000354 F6               [12] 1112 	mov	@r0,a
      000355 08               [12] 1113 	inc	r0
      000356 F6               [12] 1114 	mov	@r0,a
      000357                       1115 00133$:
                                   1116 ;	life.c:197: n = -u[A2D(W, y, x)];
      000357 78r14            [12] 1117 	mov	r0,#_y
      000359 E6               [12] 1118 	mov	a,@r0
      00035A C0 E0            [24] 1119 	push	acc
      00035C 08               [12] 1120 	inc	r0
      00035D E6               [12] 1121 	mov	a,@r0
      00035E C0 E0            [24] 1122 	push	acc
      000360 90 00 30         [24] 1123 	mov	dptr,#0x0030
      000363 12r00r00         [24] 1124 	lcall	__mulint
      000366 C8               [12] 1125 	xch	a,r0
      000367 E5*00            [12] 1126 	mov	a,_bp
      000369 24 04            [12] 1127 	add	a,#0x04
      00036B C8               [12] 1128 	xch	a,r0
      00036C A6 82            [24] 1129 	mov	@r0,dpl
      00036E 08               [12] 1130 	inc	r0
      00036F A6 83            [24] 1131 	mov	@r0,dph
      000371 15 81            [12] 1132 	dec	sp
      000373 15 81            [12] 1133 	dec	sp
      000375 E5*00            [12] 1134 	mov	a,_bp
      000377 24 04            [12] 1135 	add	a,#0x04
      000379 F8               [12] 1136 	mov	r0,a
      00037A 79r12            [12] 1137 	mov	r1,#_x
      00037C E7               [12] 1138 	mov	a,@r1
      00037D 26               [12] 1139 	add	a,@r0
      00037E C0 E0            [24] 1140 	push	acc
      000380 09               [12] 1141 	inc	r1
      000381 E7               [12] 1142 	mov	a,@r1
      000382 08               [12] 1143 	inc	r0
      000383 36               [12] 1144 	addc	a,@r0
      000384 C0 E0            [24] 1145 	push	acc
      000386 E5*00            [12] 1146 	mov	a,_bp
      000388 24 03            [12] 1147 	add	a,#0x03
      00038A F8               [12] 1148 	mov	r0,a
      00038B D0 E0            [24] 1149 	pop	acc
      00038D F6               [12] 1150 	mov	@r0,a
      00038E 18               [12] 1151 	dec	r0
      00038F D0 E0            [24] 1152 	pop	acc
      000391 F6               [12] 1153 	mov	@r0,a
      000392 A8*00            [24] 1154 	mov	r0,_bp
      000394 08               [12] 1155 	inc	r0
      000395 08               [12] 1156 	inc	r0
      000396 E6               [12] 1157 	mov	a,@r0
      000397 24r00            [12] 1158 	add	a,#_u
      000399 F5 82            [12] 1159 	mov	dpl,a
      00039B 08               [12] 1160 	inc	r0
      00039C E6               [12] 1161 	mov	a,@r0
      00039D 34s48            [12] 1162 	addc	a,#(_u >> 8)
      00039F F5 83            [12] 1163 	mov	dph,a
      0003A1 E0               [24] 1164 	movx	a,@dptr
      0003A2 FB               [12] 1165 	mov	r3,a
      0003A3 A8*00            [24] 1166 	mov	r0,_bp
      0003A5 08               [12] 1167 	inc	r0
      0003A6 C3               [12] 1168 	clr	c
      0003A7 E4               [12] 1169 	clr	a
      0003A8 9B               [12] 1170 	subb	a,r3
      0003A9 F6               [12] 1171 	mov	@r0,a
                                   1172 ;	life.c:202: UPDN(-1, -1);
      0003AA 78r14            [12] 1173 	mov	r0,#_y
      0003AC 74 BF            [12] 1174 	mov	a,#0xbf
      0003AE 26               [12] 1175 	add	a,@r0
      0003AF FA               [12] 1176 	mov	r2,a
      0003B0 E4               [12] 1177 	clr	a
      0003B1 08               [12] 1178 	inc	r0
      0003B2 36               [12] 1179 	addc	a,@r0
      0003B3 FB               [12] 1180 	mov	r3,a
      0003B4 74 C0            [12] 1181 	mov	a,#0xc0
      0003B6 C0 E0            [24] 1182 	push	acc
      0003B8 E4               [12] 1183 	clr	a
      0003B9 C0 E0            [24] 1184 	push	acc
      0003BB 8A 82            [24] 1185 	mov	dpl,r2
      0003BD 8B 83            [24] 1186 	mov	dph,r3
      0003BF 12r00r00         [24] 1187 	lcall	__modsint
      0003C2 AA 82            [24] 1188 	mov	r2,dpl
      0003C4 AB 83            [24] 1189 	mov	r3,dph
      0003C6 15 81            [12] 1190 	dec	sp
      0003C8 15 81            [12] 1191 	dec	sp
      0003CA C0 02            [24] 1192 	push	ar2
      0003CC C0 03            [24] 1193 	push	ar3
      0003CE 90 00 30         [24] 1194 	mov	dptr,#0x0030
      0003D1 12r00r00         [24] 1195 	lcall	__mulint
      0003D4 AA 82            [24] 1196 	mov	r2,dpl
      0003D6 AB 83            [24] 1197 	mov	r3,dph
      0003D8 15 81            [12] 1198 	dec	sp
      0003DA 15 81            [12] 1199 	dec	sp
      0003DC 78r12            [12] 1200 	mov	r0,#_x
      0003DE 74 2F            [12] 1201 	mov	a,#0x2f
      0003E0 26               [12] 1202 	add	a,@r0
      0003E1 FC               [12] 1203 	mov	r4,a
      0003E2 E4               [12] 1204 	clr	a
      0003E3 08               [12] 1205 	inc	r0
      0003E4 36               [12] 1206 	addc	a,@r0
      0003E5 FD               [12] 1207 	mov	r5,a
      0003E6 C0 03            [24] 1208 	push	ar3
      0003E8 C0 02            [24] 1209 	push	ar2
      0003EA 74 30            [12] 1210 	mov	a,#0x30
      0003EC C0 E0            [24] 1211 	push	acc
      0003EE E4               [12] 1212 	clr	a
      0003EF C0 E0            [24] 1213 	push	acc
      0003F1 8C 82            [24] 1214 	mov	dpl,r4
      0003F3 8D 83            [24] 1215 	mov	dph,r5
      0003F5 12r00r00         [24] 1216 	lcall	__modsint
      0003F8 AC 82            [24] 1217 	mov	r4,dpl
      0003FA AD 83            [24] 1218 	mov	r5,dph
      0003FC 15 81            [12] 1219 	dec	sp
      0003FE 15 81            [12] 1220 	dec	sp
      000400 D0 02            [24] 1221 	pop	ar2
      000402 D0 03            [24] 1222 	pop	ar3
      000404 EC               [12] 1223 	mov	a,r4
      000405 2A               [12] 1224 	add	a,r2
      000406 FE               [12] 1225 	mov	r6,a
      000407 ED               [12] 1226 	mov	a,r5
      000408 3B               [12] 1227 	addc	a,r3
      000409 FF               [12] 1228 	mov	r7,a
      00040A EE               [12] 1229 	mov	a,r6
      00040B 24r00            [12] 1230 	add	a,#_u
      00040D F5 82            [12] 1231 	mov	dpl,a
      00040F EF               [12] 1232 	mov	a,r7
      000410 34s48            [12] 1233 	addc	a,#(_u >> 8)
      000412 F5 83            [12] 1234 	mov	dph,a
      000414 E0               [24] 1235 	movx	a,@dptr
      000415 FF               [12] 1236 	mov	r7,a
      000416 A8*00            [24] 1237 	mov	r0,_bp
      000418 08               [12] 1238 	inc	r0
      000419 EF               [12] 1239 	mov	a,r7
      00041A 26               [12] 1240 	add	a,@r0
      00041B F6               [12] 1241 	mov	@r0,a
                                   1242 ;	life.c:203: UPDN(-1, 0);
      00041C 78r12            [12] 1243 	mov	r0,#_x
      00041E 74 30            [12] 1244 	mov	a,#0x30
      000420 26               [12] 1245 	add	a,@r0
      000421 FE               [12] 1246 	mov	r6,a
      000422 E4               [12] 1247 	clr	a
      000423 08               [12] 1248 	inc	r0
      000424 36               [12] 1249 	addc	a,@r0
      000425 FF               [12] 1250 	mov	r7,a
      000426 C0 05            [24] 1251 	push	ar5
      000428 C0 04            [24] 1252 	push	ar4
      00042A C0 03            [24] 1253 	push	ar3
      00042C C0 02            [24] 1254 	push	ar2
      00042E 74 30            [12] 1255 	mov	a,#0x30
      000430 C0 E0            [24] 1256 	push	acc
      000432 E4               [12] 1257 	clr	a
      000433 C0 E0            [24] 1258 	push	acc
      000435 8E 82            [24] 1259 	mov	dpl,r6
      000437 8F 83            [24] 1260 	mov	dph,r7
      000439 12r00r00         [24] 1261 	lcall	__modsint
      00043C C8               [12] 1262 	xch	a,r0
      00043D E5*00            [12] 1263 	mov	a,_bp
      00043F 24 06            [12] 1264 	add	a,#0x06
      000441 C8               [12] 1265 	xch	a,r0
      000442 A6 82            [24] 1266 	mov	@r0,dpl
      000444 08               [12] 1267 	inc	r0
      000445 A6 83            [24] 1268 	mov	@r0,dph
      000447 15 81            [12] 1269 	dec	sp
      000449 15 81            [12] 1270 	dec	sp
      00044B D0 02            [24] 1271 	pop	ar2
      00044D D0 03            [24] 1272 	pop	ar3
      00044F E5*00            [12] 1273 	mov	a,_bp
      000451 24 06            [12] 1274 	add	a,#0x06
      000453 F8               [12] 1275 	mov	r0,a
      000454 E6               [12] 1276 	mov	a,@r0
      000455 2A               [12] 1277 	add	a,r2
      000456 FE               [12] 1278 	mov	r6,a
      000457 08               [12] 1279 	inc	r0
      000458 E6               [12] 1280 	mov	a,@r0
      000459 3B               [12] 1281 	addc	a,r3
      00045A FF               [12] 1282 	mov	r7,a
      00045B EE               [12] 1283 	mov	a,r6
      00045C 24r00            [12] 1284 	add	a,#_u
      00045E F5 82            [12] 1285 	mov	dpl,a
      000460 EF               [12] 1286 	mov	a,r7
      000461 34s48            [12] 1287 	addc	a,#(_u >> 8)
      000463 F5 83            [12] 1288 	mov	dph,a
      000465 E0               [24] 1289 	movx	a,@dptr
      000466 FF               [12] 1290 	mov	r7,a
      000467 A8*00            [24] 1291 	mov	r0,_bp
      000469 08               [12] 1292 	inc	r0
      00046A EF               [12] 1293 	mov	a,r7
      00046B 26               [12] 1294 	add	a,@r0
      00046C F6               [12] 1295 	mov	@r0,a
                                   1296 ;	life.c:204: UPDN(-1, 1);
      00046D 78r12            [12] 1297 	mov	r0,#_x
      00046F 74 31            [12] 1298 	mov	a,#0x31
      000471 26               [12] 1299 	add	a,@r0
      000472 FE               [12] 1300 	mov	r6,a
      000473 E4               [12] 1301 	clr	a
      000474 08               [12] 1302 	inc	r0
      000475 36               [12] 1303 	addc	a,@r0
      000476 FF               [12] 1304 	mov	r7,a
      000477 C0 03            [24] 1305 	push	ar3
      000479 C0 02            [24] 1306 	push	ar2
      00047B 74 30            [12] 1307 	mov	a,#0x30
      00047D C0 E0            [24] 1308 	push	acc
      00047F E4               [12] 1309 	clr	a
      000480 C0 E0            [24] 1310 	push	acc
      000482 8E 82            [24] 1311 	mov	dpl,r6
      000484 8F 83            [24] 1312 	mov	dph,r7
      000486 12r00r00         [24] 1313 	lcall	__modsint
      000489 AE 82            [24] 1314 	mov	r6,dpl
      00048B AF 83            [24] 1315 	mov	r7,dph
      00048D 15 81            [12] 1316 	dec	sp
      00048F 15 81            [12] 1317 	dec	sp
      000491 D0 02            [24] 1318 	pop	ar2
      000493 D0 03            [24] 1319 	pop	ar3
      000495 D0 04            [24] 1320 	pop	ar4
      000497 D0 05            [24] 1321 	pop	ar5
      000499 EE               [12] 1322 	mov	a,r6
      00049A 2A               [12] 1323 	add	a,r2
      00049B FA               [12] 1324 	mov	r2,a
      00049C EF               [12] 1325 	mov	a,r7
      00049D 3B               [12] 1326 	addc	a,r3
      00049E FB               [12] 1327 	mov	r3,a
      00049F EA               [12] 1328 	mov	a,r2
      0004A0 24r00            [12] 1329 	add	a,#_u
      0004A2 F5 82            [12] 1330 	mov	dpl,a
      0004A4 EB               [12] 1331 	mov	a,r3
      0004A5 34s48            [12] 1332 	addc	a,#(_u >> 8)
      0004A7 F5 83            [12] 1333 	mov	dph,a
      0004A9 E0               [24] 1334 	movx	a,@dptr
      0004AA FB               [12] 1335 	mov	r3,a
      0004AB A8*00            [24] 1336 	mov	r0,_bp
      0004AD 08               [12] 1337 	inc	r0
      0004AE EB               [12] 1338 	mov	a,r3
      0004AF 26               [12] 1339 	add	a,@r0
      0004B0 F6               [12] 1340 	mov	@r0,a
                                   1341 ;	life.c:205: UPDN(0, -1);
      0004B1 78r14            [12] 1342 	mov	r0,#_y
      0004B3 74 C0            [12] 1343 	mov	a,#0xc0
      0004B5 26               [12] 1344 	add	a,@r0
      0004B6 FA               [12] 1345 	mov	r2,a
      0004B7 E4               [12] 1346 	clr	a
      0004B8 08               [12] 1347 	inc	r0
      0004B9 36               [12] 1348 	addc	a,@r0
      0004BA FB               [12] 1349 	mov	r3,a
      0004BB C0 07            [24] 1350 	push	ar7
      0004BD C0 06            [24] 1351 	push	ar6
      0004BF C0 05            [24] 1352 	push	ar5
      0004C1 C0 04            [24] 1353 	push	ar4
      0004C3 74 C0            [12] 1354 	mov	a,#0xc0
      0004C5 C0 E0            [24] 1355 	push	acc
      0004C7 E4               [12] 1356 	clr	a
      0004C8 C0 E0            [24] 1357 	push	acc
      0004CA 8A 82            [24] 1358 	mov	dpl,r2
      0004CC 8B 83            [24] 1359 	mov	dph,r3
      0004CE 12r00r00         [24] 1360 	lcall	__modsint
      0004D1 AA 82            [24] 1361 	mov	r2,dpl
      0004D3 AB 83            [24] 1362 	mov	r3,dph
      0004D5 15 81            [12] 1363 	dec	sp
      0004D7 15 81            [12] 1364 	dec	sp
      0004D9 C0 02            [24] 1365 	push	ar2
      0004DB C0 03            [24] 1366 	push	ar3
      0004DD 90 00 30         [24] 1367 	mov	dptr,#0x0030
      0004E0 12r00r00         [24] 1368 	lcall	__mulint
      0004E3 C8               [12] 1369 	xch	a,r0
      0004E4 E5*00            [12] 1370 	mov	a,_bp
      0004E6 24 08            [12] 1371 	add	a,#0x08
      0004E8 C8               [12] 1372 	xch	a,r0
      0004E9 A6 82            [24] 1373 	mov	@r0,dpl
      0004EB 08               [12] 1374 	inc	r0
      0004EC A6 83            [24] 1375 	mov	@r0,dph
      0004EE 15 81            [12] 1376 	dec	sp
      0004F0 15 81            [12] 1377 	dec	sp
      0004F2 D0 04            [24] 1378 	pop	ar4
      0004F4 D0 05            [24] 1379 	pop	ar5
      0004F6 D0 06            [24] 1380 	pop	ar6
      0004F8 D0 07            [24] 1381 	pop	ar7
      0004FA E5*00            [12] 1382 	mov	a,_bp
      0004FC 24 08            [12] 1383 	add	a,#0x08
      0004FE F8               [12] 1384 	mov	r0,a
      0004FF EC               [12] 1385 	mov	a,r4
      000500 26               [12] 1386 	add	a,@r0
      000501 FA               [12] 1387 	mov	r2,a
      000502 ED               [12] 1388 	mov	a,r5
      000503 08               [12] 1389 	inc	r0
      000504 36               [12] 1390 	addc	a,@r0
      000505 FB               [12] 1391 	mov	r3,a
      000506 EA               [12] 1392 	mov	a,r2
      000507 24r00            [12] 1393 	add	a,#_u
      000509 F5 82            [12] 1394 	mov	dpl,a
      00050B EB               [12] 1395 	mov	a,r3
      00050C 34s48            [12] 1396 	addc	a,#(_u >> 8)
      00050E F5 83            [12] 1397 	mov	dph,a
      000510 E0               [24] 1398 	movx	a,@dptr
      000511 FB               [12] 1399 	mov	r3,a
      000512 A8*00            [24] 1400 	mov	r0,_bp
      000514 08               [12] 1401 	inc	r0
      000515 EB               [12] 1402 	mov	a,r3
      000516 26               [12] 1403 	add	a,@r0
      000517 F6               [12] 1404 	mov	@r0,a
                                   1405 ;	life.c:206: UPDN(0, 0);
      000518 E5*00            [12] 1406 	mov	a,_bp
      00051A 24 08            [12] 1407 	add	a,#0x08
      00051C F8               [12] 1408 	mov	r0,a
      00051D E5*00            [12] 1409 	mov	a,_bp
      00051F 24 06            [12] 1410 	add	a,#0x06
      000521 F9               [12] 1411 	mov	r1,a
      000522 E7               [12] 1412 	mov	a,@r1
      000523 26               [12] 1413 	add	a,@r0
      000524 FA               [12] 1414 	mov	r2,a
      000525 09               [12] 1415 	inc	r1
      000526 E7               [12] 1416 	mov	a,@r1
      000527 08               [12] 1417 	inc	r0
      000528 36               [12] 1418 	addc	a,@r0
      000529 FB               [12] 1419 	mov	r3,a
      00052A EA               [12] 1420 	mov	a,r2
      00052B 24r00            [12] 1421 	add	a,#_u
      00052D F5 82            [12] 1422 	mov	dpl,a
      00052F EB               [12] 1423 	mov	a,r3
      000530 34s48            [12] 1424 	addc	a,#(_u >> 8)
      000532 F5 83            [12] 1425 	mov	dph,a
      000534 E0               [24] 1426 	movx	a,@dptr
      000535 FB               [12] 1427 	mov	r3,a
      000536 A8*00            [24] 1428 	mov	r0,_bp
      000538 08               [12] 1429 	inc	r0
      000539 EB               [12] 1430 	mov	a,r3
      00053A 26               [12] 1431 	add	a,@r0
      00053B F6               [12] 1432 	mov	@r0,a
                                   1433 ;	life.c:207: UPDN(0, 1);
      00053C E5*00            [12] 1434 	mov	a,_bp
      00053E 24 08            [12] 1435 	add	a,#0x08
      000540 F8               [12] 1436 	mov	r0,a
      000541 EE               [12] 1437 	mov	a,r6
      000542 26               [12] 1438 	add	a,@r0
      000543 FA               [12] 1439 	mov	r2,a
      000544 EF               [12] 1440 	mov	a,r7
      000545 08               [12] 1441 	inc	r0
      000546 36               [12] 1442 	addc	a,@r0
      000547 FB               [12] 1443 	mov	r3,a
      000548 EA               [12] 1444 	mov	a,r2
      000549 24r00            [12] 1445 	add	a,#_u
      00054B F5 82            [12] 1446 	mov	dpl,a
      00054D EB               [12] 1447 	mov	a,r3
      00054E 34s48            [12] 1448 	addc	a,#(_u >> 8)
      000550 F5 83            [12] 1449 	mov	dph,a
      000552 E0               [24] 1450 	movx	a,@dptr
      000553 FB               [12] 1451 	mov	r3,a
      000554 A8*00            [24] 1452 	mov	r0,_bp
      000556 08               [12] 1453 	inc	r0
      000557 E5*00            [12] 1454 	mov	a,_bp
      000559 24 08            [12] 1455 	add	a,#0x08
      00055B F9               [12] 1456 	mov	r1,a
      00055C EB               [12] 1457 	mov	a,r3
      00055D 26               [12] 1458 	add	a,@r0
      00055E F7               [12] 1459 	mov	@r1,a
                                   1460 ;	life.c:208: UPDN(1, -1);
      00055F 78r14            [12] 1461 	mov	r0,#_y
      000561 74 C1            [12] 1462 	mov	a,#0xc1
      000563 26               [12] 1463 	add	a,@r0
      000564 FA               [12] 1464 	mov	r2,a
      000565 E4               [12] 1465 	clr	a
      000566 08               [12] 1466 	inc	r0
      000567 36               [12] 1467 	addc	a,@r0
      000568 FB               [12] 1468 	mov	r3,a
      000569 C0 07            [24] 1469 	push	ar7
      00056B C0 06            [24] 1470 	push	ar6
      00056D C0 05            [24] 1471 	push	ar5
      00056F C0 04            [24] 1472 	push	ar4
      000571 74 C0            [12] 1473 	mov	a,#0xc0
      000573 C0 E0            [24] 1474 	push	acc
      000575 E4               [12] 1475 	clr	a
      000576 C0 E0            [24] 1476 	push	acc
      000578 8A 82            [24] 1477 	mov	dpl,r2
      00057A 8B 83            [24] 1478 	mov	dph,r3
      00057C 12r00r00         [24] 1479 	lcall	__modsint
      00057F AA 82            [24] 1480 	mov	r2,dpl
      000581 AB 83            [24] 1481 	mov	r3,dph
      000583 15 81            [12] 1482 	dec	sp
      000585 15 81            [12] 1483 	dec	sp
      000587 C0 02            [24] 1484 	push	ar2
      000589 C0 03            [24] 1485 	push	ar3
      00058B 90 00 30         [24] 1486 	mov	dptr,#0x0030
      00058E 12r00r00         [24] 1487 	lcall	__mulint
      000591 AA 82            [24] 1488 	mov	r2,dpl
      000593 AB 83            [24] 1489 	mov	r3,dph
      000595 15 81            [12] 1490 	dec	sp
      000597 15 81            [12] 1491 	dec	sp
      000599 D0 04            [24] 1492 	pop	ar4
      00059B D0 05            [24] 1493 	pop	ar5
      00059D D0 06            [24] 1494 	pop	ar6
      00059F D0 07            [24] 1495 	pop	ar7
      0005A1 EC               [12] 1496 	mov	a,r4
      0005A2 2A               [12] 1497 	add	a,r2
      0005A3 FC               [12] 1498 	mov	r4,a
      0005A4 ED               [12] 1499 	mov	a,r5
      0005A5 3B               [12] 1500 	addc	a,r3
      0005A6 FD               [12] 1501 	mov	r5,a
      0005A7 EC               [12] 1502 	mov	a,r4
      0005A8 24r00            [12] 1503 	add	a,#_u
      0005AA F5 82            [12] 1504 	mov	dpl,a
      0005AC ED               [12] 1505 	mov	a,r5
      0005AD 34s48            [12] 1506 	addc	a,#(_u >> 8)
      0005AF F5 83            [12] 1507 	mov	dph,a
      0005B1 E0               [24] 1508 	movx	a,@dptr
      0005B2 FD               [12] 1509 	mov	r5,a
      0005B3 E5*00            [12] 1510 	mov	a,_bp
      0005B5 24 08            [12] 1511 	add	a,#0x08
      0005B7 F8               [12] 1512 	mov	r0,a
      0005B8 E5*00            [12] 1513 	mov	a,_bp
      0005BA 24 08            [12] 1514 	add	a,#0x08
      0005BC F9               [12] 1515 	mov	r1,a
      0005BD ED               [12] 1516 	mov	a,r5
      0005BE 26               [12] 1517 	add	a,@r0
      0005BF F7               [12] 1518 	mov	@r1,a
                                   1519 ;	life.c:209: UPDN(1, 0);
      0005C0 E5*00            [12] 1520 	mov	a,_bp
      0005C2 24 06            [12] 1521 	add	a,#0x06
      0005C4 F8               [12] 1522 	mov	r0,a
      0005C5 E6               [12] 1523 	mov	a,@r0
      0005C6 2A               [12] 1524 	add	a,r2
      0005C7 FC               [12] 1525 	mov	r4,a
      0005C8 08               [12] 1526 	inc	r0
      0005C9 E6               [12] 1527 	mov	a,@r0
      0005CA 3B               [12] 1528 	addc	a,r3
      0005CB FD               [12] 1529 	mov	r5,a
      0005CC EC               [12] 1530 	mov	a,r4
      0005CD 24r00            [12] 1531 	add	a,#_u
      0005CF F5 82            [12] 1532 	mov	dpl,a
      0005D1 ED               [12] 1533 	mov	a,r5
      0005D2 34s48            [12] 1534 	addc	a,#(_u >> 8)
      0005D4 F5 83            [12] 1535 	mov	dph,a
      0005D6 E0               [24] 1536 	movx	a,@dptr
      0005D7 FD               [12] 1537 	mov	r5,a
      0005D8 E5*00            [12] 1538 	mov	a,_bp
      0005DA 24 08            [12] 1539 	add	a,#0x08
      0005DC F8               [12] 1540 	mov	r0,a
      0005DD ED               [12] 1541 	mov	a,r5
      0005DE 26               [12] 1542 	add	a,@r0
      0005DF FD               [12] 1543 	mov	r5,a
                                   1544 ;	life.c:210: UPDN(1, 1);
      0005E0 EE               [12] 1545 	mov	a,r6
      0005E1 2A               [12] 1546 	add	a,r2
      0005E2 FE               [12] 1547 	mov	r6,a
      0005E3 EF               [12] 1548 	mov	a,r7
      0005E4 3B               [12] 1549 	addc	a,r3
      0005E5 FF               [12] 1550 	mov	r7,a
      0005E6 EE               [12] 1551 	mov	a,r6
      0005E7 24r00            [12] 1552 	add	a,#_u
      0005E9 F5 82            [12] 1553 	mov	dpl,a
      0005EB EF               [12] 1554 	mov	a,r7
      0005EC 34s48            [12] 1555 	addc	a,#(_u >> 8)
      0005EE F5 83            [12] 1556 	mov	dph,a
      0005F0 E0               [24] 1557 	movx	a,@dptr
      0005F1 2D               [12] 1558 	add	a,r5
      0005F2 FF               [12] 1559 	mov	r7,a
      0005F3 78r16            [12] 1560 	mov	r0,#_n
      0005F5 A6 07            [24] 1561 	mov	@r0,ar7
                                   1562 ;	life.c:213: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0005F7 A8*00            [24] 1563 	mov	r0,_bp
      0005F9 08               [12] 1564 	inc	r0
      0005FA 08               [12] 1565 	inc	r0
      0005FB E6               [12] 1566 	mov	a,@r0
      0005FC 24r00            [12] 1567 	add	a,#_nu
      0005FE FD               [12] 1568 	mov	r5,a
      0005FF 08               [12] 1569 	inc	r0
      000600 E6               [12] 1570 	mov	a,@r0
      000601 34s6C            [12] 1571 	addc	a,#(_nu >> 8)
      000603 FE               [12] 1572 	mov	r6,a
      000604 BF 03 02         [24] 1573 	cjne	r7,#0x03,00169$
      000607 80 25            [24] 1574 	sjmp	00140$
      000609                       1575 00169$:
      000609 BF 02 1E         [24] 1576 	cjne	r7,#0x02,00139$
      00060C E5*00            [12] 1577 	mov	a,_bp
      00060E 24 04            [12] 1578 	add	a,#0x04
      000610 F8               [12] 1579 	mov	r0,a
      000611 79r12            [12] 1580 	mov	r1,#_x
      000613 E7               [12] 1581 	mov	a,@r1
      000614 26               [12] 1582 	add	a,@r0
      000615 FC               [12] 1583 	mov	r4,a
      000616 09               [12] 1584 	inc	r1
      000617 E7               [12] 1585 	mov	a,@r1
      000618 08               [12] 1586 	inc	r0
      000619 36               [12] 1587 	addc	a,@r0
      00061A FF               [12] 1588 	mov	r7,a
      00061B EC               [12] 1589 	mov	a,r4
      00061C 24r00            [12] 1590 	add	a,#_u
      00061E FC               [12] 1591 	mov	r4,a
      00061F EF               [12] 1592 	mov	a,r7
      000620 34s48            [12] 1593 	addc	a,#(_u >> 8)
      000622 FF               [12] 1594 	mov	r7,a
      000623 8C 82            [24] 1595 	mov	dpl,r4
      000625 8F 83            [24] 1596 	mov	dph,r7
      000627 E0               [24] 1597 	movx	a,@dptr
      000628 70 04            [24] 1598 	jnz	00140$
      00062A                       1599 00139$:
                                   1600 ;	assignBit
      00062A C2*00            [12] 1601 	clr	b0
      00062C 80 02            [24] 1602 	sjmp	00141$
      00062E                       1603 00140$:
                                   1604 ;	assignBit
      00062E D2*00            [12] 1605 	setb	b0
      000630                       1606 00141$:
      000630 A2*00            [12] 1607 	mov	c,b0
      000632 E4               [12] 1608 	clr	a
      000633 33               [12] 1609 	rlc	a
      000634 8D 82            [24] 1610 	mov	dpl,r5
      000636 8E 83            [24] 1611 	mov	dph,r6
      000638 F0               [24] 1612 	movx	@dptr,a
                                   1613 ;	life.c:214: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000639 78r14            [12] 1614 	mov	r0,#_y
      00063B E6               [12] 1615 	mov	a,@r0
      00063C C0 E0            [24] 1616 	push	acc
      00063E 08               [12] 1617 	inc	r0
      00063F E6               [12] 1618 	mov	a,@r0
      000640 C0 E0            [24] 1619 	push	acc
      000642 90 00 30         [24] 1620 	mov	dptr,#0x0030
      000645 12r00r00         [24] 1621 	lcall	__mulint
      000648 AE 82            [24] 1622 	mov	r6,dpl
      00064A AF 83            [24] 1623 	mov	r7,dph
      00064C 15 81            [12] 1624 	dec	sp
      00064E 15 81            [12] 1625 	dec	sp
      000650 78r12            [12] 1626 	mov	r0,#_x
      000652 E6               [12] 1627 	mov	a,@r0
      000653 2E               [12] 1628 	add	a,r6
      000654 FE               [12] 1629 	mov	r6,a
      000655 08               [12] 1630 	inc	r0
      000656 E6               [12] 1631 	mov	a,@r0
      000657 3F               [12] 1632 	addc	a,r7
      000658 FF               [12] 1633 	mov	r7,a
      000659 EE               [12] 1634 	mov	a,r6
      00065A 24r00            [12] 1635 	add	a,#_pu
      00065C F5 82            [12] 1636 	mov	dpl,a
      00065E EF               [12] 1637 	mov	a,r7
      00065F 34s24            [12] 1638 	addc	a,#(_pu >> 8)
      000661 F5 83            [12] 1639 	mov	dph,a
      000663 E0               [24] 1640 	movx	a,@dptr
      000664 FD               [12] 1641 	mov	r5,a
      000665 EE               [12] 1642 	mov	a,r6
      000666 24r00            [12] 1643 	add	a,#_nu
      000668 F5 82            [12] 1644 	mov	dpl,a
      00066A EF               [12] 1645 	mov	a,r7
      00066B 34s6C            [12] 1646 	addc	a,#(_nu >> 8)
      00066D F5 83            [12] 1647 	mov	dph,a
      00066F E0               [24] 1648 	movx	a,@dptr
      000670 FC               [12] 1649 	mov	r4,a
      000671 6D               [12] 1650 	xrl	a,r5
      000672 78r18            [12] 1651 	mov	r0,#_cycle2
      000674 46               [12] 1652 	orl	a,@r0
      000675 F6               [12] 1653 	mov	@r0,a
                                   1654 ;	life.c:215: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000676 EE               [12] 1655 	mov	a,r6
      000677 24r00            [12] 1656 	add	a,#_u
      000679 F5 82            [12] 1657 	mov	dpl,a
      00067B EF               [12] 1658 	mov	a,r7
      00067C 34s48            [12] 1659 	addc	a,#(_u >> 8)
      00067E F5 83            [12] 1660 	mov	dph,a
      000680 E0               [24] 1661 	movx	a,@dptr
      000681 FF               [12] 1662 	mov	r7,a
      000682 EC               [12] 1663 	mov	a,r4
      000683 6F               [12] 1664 	xrl	a,r7
      000684 78r17            [12] 1665 	mov	r0,#_fixed
      000686 46               [12] 1666 	orl	a,@r0
      000687 F6               [12] 1667 	mov	@r0,a
                                   1668 ;	life.c:196: for (x = 0; x < W; x++) {
      000688 78r12            [12] 1669 	mov	r0,#_x
      00068A 06               [12] 1670 	inc	@r0
      00068B B6 00 02         [24] 1671 	cjne	@r0,#0x00,00173$
      00068E 08               [12] 1672 	inc	r0
      00068F 06               [12] 1673 	inc	@r0
      000690                       1674 00173$:
      000690 78r12            [12] 1675 	mov	r0,#_x
      000692 C3               [12] 1676 	clr	c
      000693 E6               [12] 1677 	mov	a,@r0
      000694 94 30            [12] 1678 	subb	a,#0x30
      000696 08               [12] 1679 	inc	r0
      000697 E6               [12] 1680 	mov	a,@r0
      000698 64 80            [12] 1681 	xrl	a,#0x80
      00069A 94 80            [12] 1682 	subb	a,#0x80
      00069C 50 03            [24] 1683 	jnc	00174$
      00069E 02r03r57         [24] 1684 	ljmp	00133$
      0006A1                       1685 00174$:
                                   1686 ;	life.c:193: for (y = 0; y < H; y++) {
      0006A1 78r14            [12] 1687 	mov	r0,#_y
      0006A3 06               [12] 1688 	inc	@r0
      0006A4 B6 00 02         [24] 1689 	cjne	@r0,#0x00,00175$
      0006A7 08               [12] 1690 	inc	r0
      0006A8 06               [12] 1691 	inc	@r0
      0006A9                       1692 00175$:
      0006A9 78r14            [12] 1693 	mov	r0,#_y
      0006AB C3               [12] 1694 	clr	c
      0006AC E6               [12] 1695 	mov	a,@r0
      0006AD 94 C0            [12] 1696 	subb	a,#0xc0
      0006AF 08               [12] 1697 	inc	r0
      0006B0 E6               [12] 1698 	mov	a,@r0
      0006B1 64 80            [12] 1699 	xrl	a,#0x80
      0006B3 94 80            [12] 1700 	subb	a,#0x80
      0006B5 50 03            [24] 1701 	jnc	00176$
      0006B7 02r03r38         [24] 1702 	ljmp	00135$
      0006BA                       1703 00176$:
                                   1704 ;	life.c:219: OE76 = OE76_0;
      0006BA 78r02            [12] 1705 	mov	r0,#_OE76
      0006BC 76 3F            [12] 1706 	mov	@r0,#0x3f
                                   1707 ;	life.c:30: OEreg = OE76;
      0006BE 90 F0 06         [24] 1708 	mov	dptr,#_OEreg
      0006C1 74 3F            [12] 1709 	mov	a,#0x3f
      0006C3 F0               [24] 1710 	movx	@dptr,a
                                   1711 ;	life.c:222: cycle2 = !cycle2;
      0006C4 78r18            [12] 1712 	mov	r0,#_cycle2
      0006C6 E6               [12] 1713 	mov	a,@r0
      0006C7 B4 01 00         [24] 1714 	cjne	a,#0x01,00177$
      0006CA                       1715 00177$:
      0006CA 92*00            [24] 1716 	mov	b0,c
      0006CC 78r18            [12] 1717 	mov	r0,#_cycle2
      0006CE E4               [12] 1718 	clr	a
      0006CF 33               [12] 1719 	rlc	a
      0006D0 F6               [12] 1720 	mov	@r0,a
                                   1721 ;	life.c:223: fixed = !fixed;
      0006D1 78r17            [12] 1722 	mov	r0,#_fixed
      0006D3 E6               [12] 1723 	mov	a,@r0
      0006D4 B4 01 00         [24] 1724 	cjne	a,#0x01,00178$
      0006D7                       1725 00178$:
      0006D7 92*00            [24] 1726 	mov	b0,c
      0006D9 78r17            [12] 1727 	mov	r0,#_fixed
      0006DB E4               [12] 1728 	clr	a
      0006DC 33               [12] 1729 	rlc	a
      0006DD F6               [12] 1730 	mov	@r0,a
                                   1731 ;	life.c:225: memcpy(pu, u, sizeof (u));
      0006DE E4               [12] 1732 	clr	a
      0006DF C0 E0            [24] 1733 	push	acc
      0006E1 74 24            [12] 1734 	mov	a,#0x24
      0006E3 C0 E0            [24] 1735 	push	acc
      0006E5 74r00            [12] 1736 	mov	a,#_u
      0006E7 C0 E0            [24] 1737 	push	acc
      0006E9 74s48            [12] 1738 	mov	a,#(_u >> 8)
      0006EB C0 E0            [24] 1739 	push	acc
      0006ED E4               [12] 1740 	clr	a
      0006EE C0 E0            [24] 1741 	push	acc
      0006F0 90r24r00         [24] 1742 	mov	dptr,#_pu
      0006F3 75 F0 00         [24] 1743 	mov	b,#0x00
      0006F6 12r00r00         [24] 1744 	lcall	___memcpy
      0006F9 E5 81            [12] 1745 	mov	a,sp
      0006FB 24 FB            [12] 1746 	add	a,#0xfb
      0006FD F5 81            [12] 1747 	mov	sp,a
                                   1748 ;	life.c:226: memcpy(u, nu, sizeof (nu));
      0006FF E4               [12] 1749 	clr	a
      000700 C0 E0            [24] 1750 	push	acc
      000702 74 24            [12] 1751 	mov	a,#0x24
      000704 C0 E0            [24] 1752 	push	acc
      000706 74r00            [12] 1753 	mov	a,#_nu
      000708 C0 E0            [24] 1754 	push	acc
      00070A 74s6C            [12] 1755 	mov	a,#(_nu >> 8)
      00070C C0 E0            [24] 1756 	push	acc
      00070E E4               [12] 1757 	clr	a
      00070F C0 E0            [24] 1758 	push	acc
      000711 90r48r00         [24] 1759 	mov	dptr,#_u
      000714 75 F0 00         [24] 1760 	mov	b,#0x00
      000717 12r00r00         [24] 1761 	lcall	___memcpy
      00071A E5 81            [12] 1762 	mov	a,sp
      00071C 24 FB            [12] 1763 	add	a,#0xfb
                                   1764 ;	life.c:228: return;
                                   1765 ;	life.c:229: }
      00071E 85*00 81         [24] 1766 	mov	sp,_bp
      000721 D0*00            [24] 1767 	pop	_bp
      000723 22               [24] 1768 	ret
                                   1769 ;------------------------------------------------------------
                                   1770 ;Allocation info for local variables in function 'main'
                                   1771 ;------------------------------------------------------------
                                   1772 ;c                         Allocated to registers r6 r7 
                                   1773 ;__3932160007              Allocated to registers 
                                   1774 ;__4587520011              Allocated to registers 
                                   1775 ;------------------------------------------------------------
                                   1776 ;	life.c:231: void main(void) {
                                   1777 ;	-----------------------------------------
                                   1778 ;	 function main
                                   1779 ;	-----------------------------------------
      000724                       1780 _main:
                                   1781 ;	life.c:234: IT0 = 1;
                                   1782 ;	assignBit
      000724 D2 88            [12] 1783 	setb	_IT0
                                   1784 ;	life.c:235: IT1 = 1;
                                   1785 ;	assignBit
      000726 D2 8A            [12] 1786 	setb	_IT1
                                   1787 ;	life.c:236: EX0 = 1;
                                   1788 ;	assignBit
      000728 D2 A8            [12] 1789 	setb	_EX0
                                   1790 ;	life.c:237: EX1 = 1;
                                   1791 ;	assignBit
      00072A D2 AA            [12] 1792 	setb	_EX1
                                   1793 ;	life.c:238: EA = 1;
                                   1794 ;	assignBit
      00072C D2 AF            [12] 1795 	setb	_EA
                                   1796 ;	life.c:239: P1_7 = 0;
                                   1797 ;	assignBit
      00072E C2 97            [12] 1798 	clr	_P1_7
                                   1799 ;	life.c:244: __endasm;
      000730 00               [12] 1800 	nop
      000731 00               [12] 1801 	nop
      000732 00               [12] 1802 	nop
                                   1803 ;	life.c:246: srand(RND);
      000733 90 E0 00         [24] 1804 	mov	dptr,#_RND
      000736 E0               [24] 1805 	movx	a,@dptr
      000737 FE               [12] 1806 	mov	r6,a
      000738 A3               [24] 1807 	inc	dptr
      000739 E0               [24] 1808 	movx	a,@dptr
      00073A FF               [12] 1809 	mov	r7,a
      00073B 8E 82            [24] 1810 	mov	dpl,r6
      00073D 8F 83            [24] 1811 	mov	dph,r7
      00073F 12r00r00         [24] 1812 	lcall	_srand
                                   1813 ;	life.c:248: OE76 = OE76_0;
      000742 78r02            [12] 1814 	mov	r0,#_OE76
      000744 76 3F            [12] 1815 	mov	@r0,#0x3f
                                   1816 ;	life.c:30: OEreg = OE76;
      000746 90 F0 06         [24] 1817 	mov	dptr,#_OEreg
      000749 74 3F            [12] 1818 	mov	a,#0x3f
      00074B F0               [24] 1819 	movx	@dptr,a
                                   1820 ;	life.c:43: gen = 0ul;
      00074C 78r03            [12] 1821 	mov	r0,#_gen
      00074E E4               [12] 1822 	clr	a
      00074F F6               [12] 1823 	mov	@r0,a
      000750 08               [12] 1824 	inc	r0
      000751 F6               [12] 1825 	mov	@r0,a
      000752 08               [12] 1826 	inc	r0
      000753 F6               [12] 1827 	mov	@r0,a
      000754 08               [12] 1828 	inc	r0
      000755 F6               [12] 1829 	mov	@r0,a
                                   1830 ;	life.c:44: genc2 = 0ul;
      000756 78r07            [12] 1831 	mov	r0,#_genc2
      000758 F6               [12] 1832 	mov	@r0,a
      000759 08               [12] 1833 	inc	r0
      00075A F6               [12] 1834 	mov	@r0,a
      00075B 08               [12] 1835 	inc	r0
      00075C F6               [12] 1836 	mov	@r0,a
      00075D 08               [12] 1837 	inc	r0
      00075E F6               [12] 1838 	mov	@r0,a
                                   1839 ;	life.c:45: genfx = 0ul;
      00075F 78r0B            [12] 1840 	mov	r0,#_genfx
      000761 F6               [12] 1841 	mov	@r0,a
      000762 08               [12] 1842 	inc	r0
      000763 F6               [12] 1843 	mov	@r0,a
      000764 08               [12] 1844 	inc	r0
      000765 F6               [12] 1845 	mov	@r0,a
      000766 08               [12] 1846 	inc	r0
      000767 F6               [12] 1847 	mov	@r0,a
                                   1848 ;	life.c:46: c2set = 0;
      000768 78r0F            [12] 1849 	mov	r0,#_c2set
      00076A 76 00            [12] 1850 	mov	@r0,#0x00
                                   1851 ;	life.c:47: fxset = 0;
      00076C 78r10            [12] 1852 	mov	r0,#_fxset
      00076E 76 00            [12] 1853 	mov	@r0,#0x00
                                   1854 ;	life.c:252: pruni = 0;
      000770 78r11            [12] 1855 	mov	r0,#_pruni
      000772 76 00            [12] 1856 	mov	@r0,#0x00
                                   1857 ;	life.c:254: printstr("\033[?25h\033[m");
      000774 90r00r46         [24] 1858 	mov	dptr,#___str_10
      000777 75 F0 80         [24] 1859 	mov	b,#0x80
      00077A 12r00r00         [24] 1860 	lcall	_printstr
                                   1861 ;	life.c:256: for (i0 = 0; !i0; ) {
      00077D 78r00            [12] 1862 	mov	r0,#_i0
      00077F 76 00            [12] 1863 	mov	@r0,#0x00
                                   1864 ;	life.c:257: while (1) {
      000781                       1865 00127$:
                                   1866 ;	life.c:258: printstr("LIFE I L R O P S U");
      000781 90r00r50         [24] 1867 	mov	dptr,#___str_11
      000784 75 F0 80         [24] 1868 	mov	b,#0x80
      000787 12r00r00         [24] 1869 	lcall	_printstr
                                   1870 ;	life.c:259: putchar(pruni ? (int)'1' : (int)'0');
      00078A 78r11            [12] 1871 	mov	r0,#_pruni
      00078C E6               [12] 1872 	mov	a,@r0
      00078D 60 06            [24] 1873 	jz	00170$
      00078F 7E 31            [12] 1874 	mov	r6,#0x31
      000791 7F 00            [12] 1875 	mov	r7,#0x00
      000793 80 04            [24] 1876 	sjmp	00171$
      000795                       1877 00170$:
      000795 7E 30            [12] 1878 	mov	r6,#0x30
      000797 7F 00            [12] 1879 	mov	r7,#0x00
      000799                       1880 00171$:
      000799 8E 82            [24] 1881 	mov	dpl,r6
      00079B 8F 83            [24] 1882 	mov	dph,r7
      00079D 12r00r00         [24] 1883 	lcall	_putchar
                                   1884 ;	life.c:260: printstr(" B T\r\n");
      0007A0 90r00r63         [24] 1885 	mov	dptr,#___str_12
      0007A3 75 F0 80         [24] 1886 	mov	b,#0x80
      0007A6 12r00r00         [24] 1887 	lcall	_printstr
                                   1888 ;	life.c:261: c = toupper(getchar());
      0007A9 12r00r00         [24] 1889 	lcall	_getchar
      0007AC 12r00r00         [24] 1890 	lcall	_toupper
      0007AF AE 82            [24] 1891 	mov	r6,dpl
      0007B1 AF 83            [24] 1892 	mov	r7,dph
                                   1893 ;	life.c:262: if (i0 || (c == (int)'T')) goto term;
      0007B3 78r00            [12] 1894 	mov	r0,#_i0
      0007B5 E6               [12] 1895 	mov	a,@r0
      0007B6 60 03            [24] 1896 	jz	00298$
      0007B8 02r09rE5         [24] 1897 	ljmp	00154$
      0007BB                       1898 00298$:
      0007BB BE 54 06         [24] 1899 	cjne	r6,#0x54,00299$
      0007BE BF 00 03         [24] 1900 	cjne	r7,#0x00,00299$
      0007C1 02r09rE5         [24] 1901 	ljmp	00154$
      0007C4                       1902 00299$:
                                   1903 ;	life.c:263: else if ((c == (int)'I') || (c == (int)'L') || (c == (int)'R')) {
      0007C4 BE 49 05         [24] 1904 	cjne	r6,#0x49,00300$
      0007C7 BF 00 02         [24] 1905 	cjne	r7,#0x00,00300$
      0007CA 80 0E            [24] 1906 	sjmp	00117$
      0007CC                       1907 00300$:
      0007CC BE 4C 05         [24] 1908 	cjne	r6,#0x4c,00301$
      0007CF BF 00 02         [24] 1909 	cjne	r7,#0x00,00301$
      0007D2 80 06            [24] 1910 	sjmp	00117$
      0007D4                       1911 00301$:
      0007D4 BE 52 34         [24] 1912 	cjne	r6,#0x52,00118$
      0007D7 BF 00 31         [24] 1913 	cjne	r7,#0x00,00118$
      0007DA                       1914 00117$:
                                   1915 ;	life.c:264: if (c == (int)'L') loadiu();
      0007DA BE 4C 08         [24] 1916 	cjne	r6,#0x4c,00104$
      0007DD BF 00 05         [24] 1917 	cjne	r7,#0x00,00104$
      0007E0 12r01rA6         [24] 1918 	lcall	_loadiu
      0007E3 80 09            [24] 1919 	sjmp	00105$
      0007E5                       1920 00104$:
                                   1921 ;	life.c:265: else if (c == (int)'R') loadriu();
      0007E5 BE 52 06         [24] 1922 	cjne	r6,#0x52,00105$
      0007E8 BF 00 03         [24] 1923 	cjne	r7,#0x00,00105$
      0007EB 12r02rA3         [24] 1924 	lcall	_loadriu
      0007EE                       1925 00105$:
                                   1926 ;	life.c:266: initu();
      0007EE 12r00r18         [24] 1927 	lcall	_initu
                                   1928 ;	life.c:267: showu(PRUNI, u);
      0007F1 74r00            [12] 1929 	mov	a,#_u
      0007F3 C0 E0            [24] 1930 	push	acc
      0007F5 74s48            [12] 1931 	mov	a,#(_u >> 8)
      0007F7 C0 E0            [24] 1932 	push	acc
      0007F9 E4               [12] 1933 	clr	a
      0007FA C0 E0            [24] 1934 	push	acc
      0007FC 75 82 04         [24] 1935 	mov	dpl,#0x04
      0007FF 12r00r77         [24] 1936 	lcall	_showu
      000802 15 81            [12] 1937 	dec	sp
      000804 15 81            [12] 1938 	dec	sp
      000806 15 81            [12] 1939 	dec	sp
      000808 02r07r81         [24] 1940 	ljmp	00127$
      00080B                       1941 00118$:
                                   1942 ;	life.c:268: } else if (c == (int)'O') showu(PRUNI, iu);
      00080B BE 4F 1D         [24] 1943 	cjne	r6,#0x4f,00115$
      00080E BF 00 1A         [24] 1944 	cjne	r7,#0x00,00115$
      000811 74r00            [12] 1945 	mov	a,#_iu
      000813 C0 E0            [24] 1946 	push	acc
      000815 74s00            [12] 1947 	mov	a,#(_iu >> 8)
      000817 C0 E0            [24] 1948 	push	acc
      000819 E4               [12] 1949 	clr	a
      00081A C0 E0            [24] 1950 	push	acc
      00081C 75 82 04         [24] 1951 	mov	dpl,#0x04
      00081F 12r00r77         [24] 1952 	lcall	_showu
      000822 15 81            [12] 1953 	dec	sp
      000824 15 81            [12] 1954 	dec	sp
      000826 15 81            [12] 1955 	dec	sp
      000828 02r07r81         [24] 1956 	ljmp	00127$
      00082B                       1957 00115$:
                                   1958 ;	life.c:269: else if (c == (int)'P') showu(PRHDR | PRUNI, u);
      00082B BE 50 1D         [24] 1959 	cjne	r6,#0x50,00112$
      00082E BF 00 1A         [24] 1960 	cjne	r7,#0x00,00112$
      000831 74r00            [12] 1961 	mov	a,#_u
      000833 C0 E0            [24] 1962 	push	acc
      000835 74s48            [12] 1963 	mov	a,#(_u >> 8)
      000837 C0 E0            [24] 1964 	push	acc
      000839 E4               [12] 1965 	clr	a
      00083A C0 E0            [24] 1966 	push	acc
      00083C 75 82 06         [24] 1967 	mov	dpl,#0x06
      00083F 12r00r77         [24] 1968 	lcall	_showu
      000842 15 81            [12] 1969 	dec	sp
      000844 15 81            [12] 1970 	dec	sp
      000846 15 81            [12] 1971 	dec	sp
      000848 02r07r81         [24] 1972 	ljmp	00127$
      00084B                       1973 00112$:
                                   1974 ;	life.c:270: else if (c == (int)'U') pruni = !pruni;
      00084B BE 55 13         [24] 1975 	cjne	r6,#0x55,00109$
      00084E BF 00 10         [24] 1976 	cjne	r7,#0x00,00109$
      000851 78r11            [12] 1977 	mov	r0,#_pruni
      000853 E6               [12] 1978 	mov	a,@r0
      000854 B4 01 00         [24] 1979 	cjne	a,#0x01,00314$
      000857                       1980 00314$:
      000857 92*00            [24] 1981 	mov	b0,c
      000859 78r11            [12] 1982 	mov	r0,#_pruni
      00085B E4               [12] 1983 	clr	a
      00085C 33               [12] 1984 	rlc	a
      00085D F6               [12] 1985 	mov	@r0,a
      00085E 02r07r81         [24] 1986 	ljmp	00127$
      000861                       1987 00109$:
                                   1988 ;	life.c:271: else if (c == (int)'S') break;
      000861 BE 53 05         [24] 1989 	cjne	r6,#0x53,00315$
      000864 BF 00 02         [24] 1990 	cjne	r7,#0x00,00315$
      000867 80 03            [24] 1991 	sjmp	00316$
      000869                       1992 00315$:
      000869 02r07r81         [24] 1993 	ljmp	00127$
      00086C                       1994 00316$:
                                   1995 ;	life.c:274: for (i1 = 0; !i0 && !i1; ) {
      00086C 78r01            [12] 1996 	mov	r0,#_i1
      00086E 76 00            [12] 1997 	mov	@r0,#0x00
      000870                       1998 00164$:
      000870 78r00            [12] 1999 	mov	r0,#_i0
      000872 E6               [12] 2000 	mov	a,@r0
      000873 60 03            [24] 2001 	jz	00317$
      000875 02r09rB8         [24] 2002 	ljmp	00150$
      000878                       2003 00317$:
      000878 78r01            [12] 2004 	mov	r0,#_i1
      00087A E6               [12] 2005 	mov	a,@r0
      00087B 60 03            [24] 2006 	jz	00318$
      00087D 02r09rB8         [24] 2007 	ljmp	00150$
      000880                       2008 00318$:
                                   2009 ;	life.c:275: if (fxu()) {
      000880 78r10            [12] 2010 	mov	r0,#_fxset
      000882 E6               [12] 2011 	mov	a,@r0
      000883 60 23            [24] 2012 	jz	00130$
                                   2013 ;	life.c:276: printstr("FIXED AT ");
      000885 90r00r6A         [24] 2014 	mov	dptr,#___str_13
      000888 75 F0 80         [24] 2015 	mov	b,#0x80
      00088B 12r00r00         [24] 2016 	lcall	_printstr
                                   2017 ;	life.c:277: showu(PRHDR, u);
      00088E 74r00            [12] 2018 	mov	a,#_u
      000890 C0 E0            [24] 2019 	push	acc
      000892 74s48            [12] 2020 	mov	a,#(_u >> 8)
      000894 C0 E0            [24] 2021 	push	acc
      000896 E4               [12] 2022 	clr	a
      000897 C0 E0            [24] 2023 	push	acc
      000899 75 82 02         [24] 2024 	mov	dpl,#0x02
      00089C 12r00r77         [24] 2025 	lcall	_showu
      00089F 15 81            [12] 2026 	dec	sp
      0008A1 15 81            [12] 2027 	dec	sp
      0008A3 15 81            [12] 2028 	dec	sp
                                   2029 ;	life.c:278: break;
      0008A5 02r09rB8         [24] 2030 	ljmp	00150$
      0008A8                       2031 00130$:
                                   2032 ;	life.c:280: if (pruni) showu(PRCLR | PRHDR | PRUNI, u);
      0008A8 78r11            [12] 2033 	mov	r0,#_pruni
      0008AA E6               [12] 2034 	mov	a,@r0
      0008AB 60 19            [24] 2035 	jz	00132$
      0008AD 74r00            [12] 2036 	mov	a,#_u
      0008AF C0 E0            [24] 2037 	push	acc
      0008B1 74s48            [12] 2038 	mov	a,#(_u >> 8)
      0008B3 C0 E0            [24] 2039 	push	acc
      0008B5 E4               [12] 2040 	clr	a
      0008B6 C0 E0            [24] 2041 	push	acc
      0008B8 75 82 07         [24] 2042 	mov	dpl,#0x07
      0008BB 12r00r77         [24] 2043 	lcall	_showu
      0008BE 15 81            [12] 2044 	dec	sp
      0008C0 15 81            [12] 2045 	dec	sp
      0008C2 15 81            [12] 2046 	dec	sp
      0008C4 80 17            [24] 2047 	sjmp	00133$
      0008C6                       2048 00132$:
                                   2049 ;	life.c:281: else showu(PRHDR, u);
      0008C6 74r00            [12] 2050 	mov	a,#_u
      0008C8 C0 E0            [24] 2051 	push	acc
      0008CA 74s48            [12] 2052 	mov	a,#(_u >> 8)
      0008CC C0 E0            [24] 2053 	push	acc
      0008CE E4               [12] 2054 	clr	a
      0008CF C0 E0            [24] 2055 	push	acc
      0008D1 75 82 02         [24] 2056 	mov	dpl,#0x02
      0008D4 12r00r77         [24] 2057 	lcall	_showu
      0008D7 15 81            [12] 2058 	dec	sp
      0008D9 15 81            [12] 2059 	dec	sp
      0008DB 15 81            [12] 2060 	dec	sp
      0008DD                       2061 00133$:
                                   2062 ;	life.c:53: gen++;
      0008DD 78r03            [12] 2063 	mov	r0,#_gen
      0008DF 06               [12] 2064 	inc	@r0
      0008E0 B6 00 0C         [24] 2065 	cjne	@r0,#0x00,00321$
      0008E3 08               [12] 2066 	inc	r0
      0008E4 06               [12] 2067 	inc	@r0
      0008E5 B6 00 07         [24] 2068 	cjne	@r0,#0x00,00321$
      0008E8 08               [12] 2069 	inc	r0
      0008E9 06               [12] 2070 	inc	@r0
      0008EA B6 00 02         [24] 2071 	cjne	@r0,#0x00,00321$
      0008ED 08               [12] 2072 	inc	r0
      0008EE 06               [12] 2073 	inc	@r0
      0008EF                       2074 00321$:
                                   2075 ;	life.c:283: evolveu();
      0008EF 12r03r16         [24] 2076 	lcall	_evolveu
                                   2077 ;	life.c:284: if (fixed) {
      0008F2 78r17            [12] 2078 	mov	r0,#_fixed
      0008F4 E6               [12] 2079 	mov	a,@r0
      0008F5 60 41            [24] 2080 	jz	00135$
                                   2081 ;	life.c:59: genfx = gen;
      0008F7 78r03            [12] 2082 	mov	r0,#_gen
      0008F9 86 04            [24] 2083 	mov	ar4,@r0
      0008FB 08               [12] 2084 	inc	r0
      0008FC 86 05            [24] 2085 	mov	ar5,@r0
      0008FE 08               [12] 2086 	inc	r0
      0008FF 86 06            [24] 2087 	mov	ar6,@r0
      000901 08               [12] 2088 	inc	r0
      000902 86 07            [24] 2089 	mov	ar7,@r0
      000904 78r0B            [12] 2090 	mov	r0,#_genfx
      000906 A6 04            [24] 2091 	mov	@r0,ar4
      000908 08               [12] 2092 	inc	r0
      000909 A6 05            [24] 2093 	mov	@r0,ar5
      00090B 08               [12] 2094 	inc	r0
      00090C A6 06            [24] 2095 	mov	@r0,ar6
      00090E 08               [12] 2096 	inc	r0
      00090F A6 07            [24] 2097 	mov	@r0,ar7
                                   2098 ;	life.c:60: fxset = 1;
      000911 78r10            [12] 2099 	mov	r0,#_fxset
      000913 76 01            [12] 2100 	mov	@r0,#0x01
                                   2101 ;	life.c:286: printstr("FIXED AT ");
      000915 90r00r6A         [24] 2102 	mov	dptr,#___str_13
      000918 75 F0 80         [24] 2103 	mov	b,#0x80
      00091B 12r00r00         [24] 2104 	lcall	_printstr
                                   2105 ;	life.c:287: showu(PRHDR, u);
      00091E 74r00            [12] 2106 	mov	a,#_u
      000920 C0 E0            [24] 2107 	push	acc
      000922 74s48            [12] 2108 	mov	a,#(_u >> 8)
      000924 C0 E0            [24] 2109 	push	acc
      000926 E4               [12] 2110 	clr	a
      000927 C0 E0            [24] 2111 	push	acc
      000929 75 82 02         [24] 2112 	mov	dpl,#0x02
      00092C 12r00r77         [24] 2113 	lcall	_showu
      00092F 15 81            [12] 2114 	dec	sp
      000931 15 81            [12] 2115 	dec	sp
      000933 15 81            [12] 2116 	dec	sp
                                   2117 ;	life.c:288: break;
      000935 02r09rB8         [24] 2118 	ljmp	00150$
      000938                       2119 00135$:
                                   2120 ;	life.c:290: if (cycle2) {
      000938 78r18            [12] 2121 	mov	r0,#_cycle2
      00093A E6               [12] 2122 	mov	a,@r0
      00093B 60 23            [24] 2123 	jz	00139$
                                   2124 ;	life.c:291: if (!c2u()) updatec2();
      00093D 78r0F            [12] 2125 	mov	r0,#_c2set
      00093F E6               [12] 2126 	mov	a,@r0
      000940 70 1E            [24] 2127 	jnz	00139$
                                   2128 ;	life.c:66: genc2 = gen;
      000942 78r03            [12] 2129 	mov	r0,#_gen
      000944 86 04            [24] 2130 	mov	ar4,@r0
      000946 08               [12] 2131 	inc	r0
      000947 86 05            [24] 2132 	mov	ar5,@r0
      000949 08               [12] 2133 	inc	r0
      00094A 86 06            [24] 2134 	mov	ar6,@r0
      00094C 08               [12] 2135 	inc	r0
      00094D 86 07            [24] 2136 	mov	ar7,@r0
      00094F 78r07            [12] 2137 	mov	r0,#_genc2
      000951 A6 04            [24] 2138 	mov	@r0,ar4
      000953 08               [12] 2139 	inc	r0
      000954 A6 05            [24] 2140 	mov	@r0,ar5
      000956 08               [12] 2141 	inc	r0
      000957 A6 06            [24] 2142 	mov	@r0,ar6
      000959 08               [12] 2143 	inc	r0
      00095A A6 07            [24] 2144 	mov	@r0,ar7
                                   2145 ;	life.c:67: c2set = 1;
      00095C 78r0F            [12] 2146 	mov	r0,#_c2set
      00095E 76 01            [12] 2147 	mov	@r0,#0x01
                                   2148 ;	life.c:291: if (!c2u()) updatec2();
      000960                       2149 00139$:
                                   2150 ;	life.c:294: c = getchar_poll();
      000960 12r00r00         [24] 2151 	lcall	_getchar_poll
      000963 AE 82            [24] 2152 	mov	r6,dpl
      000965 AF 83            [24] 2153 	mov	r7,dph
                                   2154 ;	life.c:295: if (c > 0) {
      000967 C3               [12] 2155 	clr	c
      000968 E4               [12] 2156 	clr	a
      000969 9E               [12] 2157 	subb	a,r6
      00096A 74 80            [12] 2158 	mov	a,#(0x00 ^ 0x80)
      00096C 8F F0            [24] 2159 	mov	b,r7
      00096E 63 F0 80         [24] 2160 	xrl	b,#0x80
      000971 95 F0            [12] 2161 	subb	a,b
      000973 40 03            [24] 2162 	jc	00325$
      000975 02r08r70         [24] 2163 	ljmp	00164$
      000978                       2164 00325$:
                                   2165 ;	life.c:296: c = toupper(c);
      000978 8E 82            [24] 2166 	mov	dpl,r6
      00097A 8F 83            [24] 2167 	mov	dph,r7
      00097C 12r00r00         [24] 2168 	lcall	_toupper
      00097F AE 82            [24] 2169 	mov	r6,dpl
      000981 AF 83            [24] 2170 	mov	r7,dph
                                   2171 ;	life.c:297: if (c == (int)'U') pruni = !pruni;
      000983 BE 55 13         [24] 2172 	cjne	r6,#0x55,00146$
      000986 BF 00 10         [24] 2173 	cjne	r7,#0x00,00146$
      000989 78r11            [12] 2174 	mov	r0,#_pruni
      00098B E6               [12] 2175 	mov	a,@r0
      00098C B4 01 00         [24] 2176 	cjne	a,#0x01,00328$
      00098F                       2177 00328$:
      00098F 92*00            [24] 2178 	mov	b0,c
      000991 78r11            [12] 2179 	mov	r0,#_pruni
      000993 E4               [12] 2180 	clr	a
      000994 33               [12] 2181 	rlc	a
      000995 F6               [12] 2182 	mov	@r0,a
      000996 02r08r70         [24] 2183 	ljmp	00164$
      000999                       2184 00146$:
                                   2185 ;	life.c:298: else if (c == (int)'T') i0 = 1;
      000999 BE 54 0A         [24] 2186 	cjne	r6,#0x54,00143$
      00099C BF 00 07         [24] 2187 	cjne	r7,#0x00,00143$
      00099F 78r00            [12] 2188 	mov	r0,#_i0
      0009A1 76 01            [12] 2189 	mov	@r0,#0x01
      0009A3 02r08r70         [24] 2190 	ljmp	00164$
      0009A6                       2191 00143$:
                                   2192 ;	life.c:299: else if (c == (int)'B') i1 = 1;
      0009A6 BE 42 05         [24] 2193 	cjne	r6,#0x42,00331$
      0009A9 BF 00 02         [24] 2194 	cjne	r7,#0x00,00331$
      0009AC 80 03            [24] 2195 	sjmp	00332$
      0009AE                       2196 00331$:
      0009AE 02r08r70         [24] 2197 	ljmp	00164$
      0009B1                       2198 00332$:
      0009B1 78r01            [12] 2199 	mov	r0,#_i1
      0009B3 76 01            [12] 2200 	mov	@r0,#0x01
      0009B5 02r08r70         [24] 2201 	ljmp	00164$
      0009B8                       2202 00150$:
                                   2203 ;	life.c:303: if (i1) {
      0009B8 78r01            [12] 2204 	mov	r0,#_i1
      0009BA E6               [12] 2205 	mov	a,@r0
      0009BB 60 20            [24] 2206 	jz	00167$
                                   2207 ;	life.c:304: printstr("BREAK AT ");
      0009BD 90r00r74         [24] 2208 	mov	dptr,#___str_14
      0009C0 75 F0 80         [24] 2209 	mov	b,#0x80
      0009C3 12r00r00         [24] 2210 	lcall	_printstr
                                   2211 ;	life.c:305: showu(PRHDR, u);
      0009C6 74r00            [12] 2212 	mov	a,#_u
      0009C8 C0 E0            [24] 2213 	push	acc
      0009CA 74s48            [12] 2214 	mov	a,#(_u >> 8)
      0009CC C0 E0            [24] 2215 	push	acc
      0009CE E4               [12] 2216 	clr	a
      0009CF C0 E0            [24] 2217 	push	acc
      0009D1 75 82 02         [24] 2218 	mov	dpl,#0x02
      0009D4 12r00r77         [24] 2219 	lcall	_showu
      0009D7 15 81            [12] 2220 	dec	sp
      0009D9 15 81            [12] 2221 	dec	sp
      0009DB 15 81            [12] 2222 	dec	sp
      0009DD                       2223 00167$:
                                   2224 ;	life.c:256: for (i0 = 0; !i0; ) {
      0009DD 78r00            [12] 2225 	mov	r0,#_i0
      0009DF E6               [12] 2226 	mov	a,@r0
      0009E0 70 03            [24] 2227 	jnz	00334$
      0009E2 02r07r81         [24] 2228 	ljmp	00127$
      0009E5                       2229 00334$:
                                   2230 ;	life.c:309: term:
      0009E5                       2231 00154$:
                                   2232 ;	life.c:310: EA = 0;
                                   2233 ;	assignBit
      0009E5 C2 AF            [12] 2234 	clr	_EA
                                   2235 ;	life.c:311: printstr("TERM\r\n");
      0009E7 90r00r7E         [24] 2236 	mov	dptr,#___str_15
      0009EA 75 F0 80         [24] 2237 	mov	b,#0x80
      0009ED 12r00r00         [24] 2238 	lcall	_printstr
                                   2239 ;	life.c:313: PCON |= 2;
      0009F0 43 87 02         [24] 2240 	orl	_PCON,#0x02
                                   2241 ;	life.c:315: return;
                                   2242 ;	life.c:316: }
      0009F3 22               [24] 2243 	ret
                                   2244 	.area CSEG    (CODE)
                                   2245 	.area CONST   (CODE)
                                   2246 	.area CONST   (CODE)
      000000                       2247 ___str_0:
      000000 1B                    2248 	.db 0x1b
      000001 5B 32 4A              2249 	.ascii "[2J"
      000004 00                    2250 	.db 0x00
                                   2251 	.area CSEG    (CODE)
                                   2252 	.area CONST   (CODE)
      000005                       2253 ___str_1:
      000005 47 45 4E 20           2254 	.ascii "GEN "
      000009 00                    2255 	.db 0x00
                                   2256 	.area CSEG    (CODE)
                                   2257 	.area CONST   (CODE)
      00000A                       2258 ___str_2:
      00000A 20 43 59 43 4C 45 32  2259 	.ascii " CYCLE2 "
             20
      000012 00                    2260 	.db 0x00
                                   2261 	.area CSEG    (CODE)
                                   2262 	.area CONST   (CODE)
      000013                       2263 ___str_3:
      000013 20 46 49 58 45 44 20  2264 	.ascii " FIXED "
      00001A 00                    2265 	.db 0x00
                                   2266 	.area CSEG    (CODE)
                                   2267 	.area CONST   (CODE)
      00001B                       2268 ___str_4:
      00001B 0D                    2269 	.db 0x0d
      00001C 0A                    2270 	.db 0x0a
      00001D 00                    2271 	.db 0x00
                                   2272 	.area CSEG    (CODE)
                                   2273 	.area CONST   (CODE)
      00001E                       2274 ___str_5:
      00001E 1B                    2275 	.db 0x1b
      00001F 5B 3F 32 35 6C        2276 	.ascii "[?25l"
      000024 00                    2277 	.db 0x00
                                   2278 	.area CSEG    (CODE)
                                   2279 	.area CONST   (CODE)
      000025                       2280 ___str_6:
      000025 1B                    2281 	.db 0x1b
      000026 5B 3F 32 35 68        2282 	.ascii "[?25h"
      00002B 00                    2283 	.db 0x00
                                   2284 	.area CSEG    (CODE)
                                   2285 	.area CONST   (CODE)
      00002C                       2286 ___str_7:
      00002C 4C 4F 41 44 20 30 20  2287 	.ascii "LOAD 0 1 ~ # <"
             31 20 7E 20 23 20 3C
      00003A 00                    2288 	.db 0x00
                                   2289 	.area CSEG    (CODE)
                                   2290 	.area CONST   (CODE)
      00003B                       2291 ___str_8:
      00003B 3E                    2292 	.ascii ">"
      00003C 0D                    2293 	.db 0x0d
      00003D 0A                    2294 	.db 0x0a
      00003E 00                    2295 	.db 0x00
                                   2296 	.area CSEG    (CODE)
                                   2297 	.area CONST   (CODE)
      00003F                       2298 ___str_9:
      00003F 52 41 4E 44 4F 4D     2299 	.ascii "RANDOM"
      000045 00                    2300 	.db 0x00
                                   2301 	.area CSEG    (CODE)
                                   2302 	.area CONST   (CODE)
      000046                       2303 ___str_10:
      000046 1B                    2304 	.db 0x1b
      000047 5B 3F 32 35 68        2305 	.ascii "[?25h"
      00004C 1B                    2306 	.db 0x1b
      00004D 5B 6D                 2307 	.ascii "[m"
      00004F 00                    2308 	.db 0x00
                                   2309 	.area CSEG    (CODE)
                                   2310 	.area CONST   (CODE)
      000050                       2311 ___str_11:
      000050 4C 49 46 45 20 49 20  2312 	.ascii "LIFE I L R O P S U"
             4C 20 52 20 4F 20 50
             20 53 20 55
      000062 00                    2313 	.db 0x00
                                   2314 	.area CSEG    (CODE)
                                   2315 	.area CONST   (CODE)
      000063                       2316 ___str_12:
      000063 20 42 20 54           2317 	.ascii " B T"
      000067 0D                    2318 	.db 0x0d
      000068 0A                    2319 	.db 0x0a
      000069 00                    2320 	.db 0x00
                                   2321 	.area CSEG    (CODE)
                                   2322 	.area CONST   (CODE)
      00006A                       2323 ___str_13:
      00006A 46 49 58 45 44 20 41  2324 	.ascii "FIXED AT "
             54 20
      000073 00                    2325 	.db 0x00
                                   2326 	.area CSEG    (CODE)
                                   2327 	.area CONST   (CODE)
      000074                       2328 ___str_14:
      000074 42 52 45 41 4B 20 41  2329 	.ascii "BREAK AT "
             54 20
      00007D 00                    2330 	.db 0x00
                                   2331 	.area CSEG    (CODE)
                                   2332 	.area CONST   (CODE)
      00007E                       2333 ___str_15:
      00007E 54 45 52 4D           2334 	.ascii "TERM"
      000082 0D                    2335 	.db 0x0d
      000083 0A                    2336 	.db 0x0a
      000084 00                    2337 	.db 0x00
                                   2338 	.area CSEG    (CODE)
                                   2339 	.area XINIT   (CODE)
                                   2340 	.area CABS    (ABS,CODE)
