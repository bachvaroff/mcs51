                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _walk
                                     13 	.globl _int0
                                     14 	.globl _srand
                                     15 	.globl _rand
                                     16 	.globl _puts
                                     17 	.globl _printf
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _FL
                                     25 	.globl _P
                                     26 	.globl _TF2
                                     27 	.globl _EXF2
                                     28 	.globl _RCLK
                                     29 	.globl _TCLK
                                     30 	.globl _EXEN2
                                     31 	.globl _TR2
                                     32 	.globl _C_T2
                                     33 	.globl _CP_RL2
                                     34 	.globl _T2CON_7
                                     35 	.globl _T2CON_6
                                     36 	.globl _T2CON_5
                                     37 	.globl _T2CON_4
                                     38 	.globl _T2CON_3
                                     39 	.globl _T2CON_2
                                     40 	.globl _T2CON_1
                                     41 	.globl _T2CON_0
                                     42 	.globl _PT2
                                     43 	.globl _PS
                                     44 	.globl _PT1
                                     45 	.globl _PX1
                                     46 	.globl _PT0
                                     47 	.globl _PX0
                                     48 	.globl _RD
                                     49 	.globl _WR
                                     50 	.globl _T1
                                     51 	.globl _T0
                                     52 	.globl _INT1
                                     53 	.globl _INT0
                                     54 	.globl _TXD
                                     55 	.globl _RXD
                                     56 	.globl _P3_7
                                     57 	.globl _P3_6
                                     58 	.globl _P3_5
                                     59 	.globl _P3_4
                                     60 	.globl _P3_3
                                     61 	.globl _P3_2
                                     62 	.globl _P3_1
                                     63 	.globl _P3_0
                                     64 	.globl _EA
                                     65 	.globl _ET2
                                     66 	.globl _ES
                                     67 	.globl _ET1
                                     68 	.globl _EX1
                                     69 	.globl _ET0
                                     70 	.globl _EX0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _SM0
                                     80 	.globl _SM1
                                     81 	.globl _SM2
                                     82 	.globl _REN
                                     83 	.globl _TB8
                                     84 	.globl _RB8
                                     85 	.globl _TI
                                     86 	.globl _RI
                                     87 	.globl _T2EX
                                     88 	.globl _T2
                                     89 	.globl _P1_7
                                     90 	.globl _P1_6
                                     91 	.globl _P1_5
                                     92 	.globl _P1_4
                                     93 	.globl _P1_3
                                     94 	.globl _P1_2
                                     95 	.globl _P1_1
                                     96 	.globl _P1_0
                                     97 	.globl _TF1
                                     98 	.globl _TR1
                                     99 	.globl _TF0
                                    100 	.globl _TR0
                                    101 	.globl _IE1
                                    102 	.globl _IT1
                                    103 	.globl _IE0
                                    104 	.globl _IT0
                                    105 	.globl _P0_7
                                    106 	.globl _P0_6
                                    107 	.globl _P0_5
                                    108 	.globl _P0_4
                                    109 	.globl _P0_3
                                    110 	.globl _P0_2
                                    111 	.globl _P0_1
                                    112 	.globl _P0_0
                                    113 	.globl _B
                                    114 	.globl _A
                                    115 	.globl _ACC
                                    116 	.globl _PSW
                                    117 	.globl _TH2
                                    118 	.globl _TL2
                                    119 	.globl _RCAP2H
                                    120 	.globl _RCAP2L
                                    121 	.globl _T2MOD
                                    122 	.globl _T2CON
                                    123 	.globl _IP
                                    124 	.globl _P3
                                    125 	.globl _IE
                                    126 	.globl _P2
                                    127 	.globl _SBUF
                                    128 	.globl _SCON
                                    129 	.globl _P1
                                    130 	.globl _TH1
                                    131 	.globl _TH0
                                    132 	.globl _TL1
                                    133 	.globl _TL0
                                    134 	.globl _TMOD
                                    135 	.globl _TCON
                                    136 	.globl _PCON
                                    137 	.globl _DPH
                                    138 	.globl _DPL
                                    139 	.globl _SP
                                    140 	.globl _P0
                                    141 	.globl _putchar
                                    142 	.globl _getchar
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000C8   166 _T2CON	=	0x00c8
                           0000C9   167 _T2MOD	=	0x00c9
                           0000CA   168 _RCAP2L	=	0x00ca
                           0000CB   169 _RCAP2H	=	0x00cb
                           0000CC   170 _TL2	=	0x00cc
                           0000CD   171 _TH2	=	0x00cd
                           0000D0   172 _PSW	=	0x00d0
                           0000E0   173 _ACC	=	0x00e0
                           0000E0   174 _A	=	0x00e0
                           0000F0   175 _B	=	0x00f0
                                    176 ;--------------------------------------------------------
                                    177 ; special function bits
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0_0	=	0x0080
                           000081   182 _P0_1	=	0x0081
                           000082   183 _P0_2	=	0x0082
                           000083   184 _P0_3	=	0x0083
                           000084   185 _P0_4	=	0x0084
                           000085   186 _P0_5	=	0x0085
                           000086   187 _P0_6	=	0x0086
                           000087   188 _P0_7	=	0x0087
                           000088   189 _IT0	=	0x0088
                           000089   190 _IE0	=	0x0089
                           00008A   191 _IT1	=	0x008a
                           00008B   192 _IE1	=	0x008b
                           00008C   193 _TR0	=	0x008c
                           00008D   194 _TF0	=	0x008d
                           00008E   195 _TR1	=	0x008e
                           00008F   196 _TF1	=	0x008f
                           000090   197 _P1_0	=	0x0090
                           000091   198 _P1_1	=	0x0091
                           000092   199 _P1_2	=	0x0092
                           000093   200 _P1_3	=	0x0093
                           000094   201 _P1_4	=	0x0094
                           000095   202 _P1_5	=	0x0095
                           000096   203 _P1_6	=	0x0096
                           000097   204 _P1_7	=	0x0097
                           000090   205 _T2	=	0x0090
                           000091   206 _T2EX	=	0x0091
                           000098   207 _RI	=	0x0098
                           000099   208 _TI	=	0x0099
                           00009A   209 _RB8	=	0x009a
                           00009B   210 _TB8	=	0x009b
                           00009C   211 _REN	=	0x009c
                           00009D   212 _SM2	=	0x009d
                           00009E   213 _SM1	=	0x009e
                           00009F   214 _SM0	=	0x009f
                           0000A0   215 _P2_0	=	0x00a0
                           0000A1   216 _P2_1	=	0x00a1
                           0000A2   217 _P2_2	=	0x00a2
                           0000A3   218 _P2_3	=	0x00a3
                           0000A4   219 _P2_4	=	0x00a4
                           0000A5   220 _P2_5	=	0x00a5
                           0000A6   221 _P2_6	=	0x00a6
                           0000A7   222 _P2_7	=	0x00a7
                           0000A8   223 _EX0	=	0x00a8
                           0000A9   224 _ET0	=	0x00a9
                           0000AA   225 _EX1	=	0x00aa
                           0000AB   226 _ET1	=	0x00ab
                           0000AC   227 _ES	=	0x00ac
                           0000AD   228 _ET2	=	0x00ad
                           0000AF   229 _EA	=	0x00af
                           0000B0   230 _P3_0	=	0x00b0
                           0000B1   231 _P3_1	=	0x00b1
                           0000B2   232 _P3_2	=	0x00b2
                           0000B3   233 _P3_3	=	0x00b3
                           0000B4   234 _P3_4	=	0x00b4
                           0000B5   235 _P3_5	=	0x00b5
                           0000B6   236 _P3_6	=	0x00b6
                           0000B7   237 _P3_7	=	0x00b7
                           0000B0   238 _RXD	=	0x00b0
                           0000B1   239 _TXD	=	0x00b1
                           0000B2   240 _INT0	=	0x00b2
                           0000B3   241 _INT1	=	0x00b3
                           0000B4   242 _T0	=	0x00b4
                           0000B5   243 _T1	=	0x00b5
                           0000B6   244 _WR	=	0x00b6
                           0000B7   245 _RD	=	0x00b7
                           0000B8   246 _PX0	=	0x00b8
                           0000B9   247 _PT0	=	0x00b9
                           0000BA   248 _PX1	=	0x00ba
                           0000BB   249 _PT1	=	0x00bb
                           0000BC   250 _PS	=	0x00bc
                           0000BD   251 _PT2	=	0x00bd
                           0000C8   252 _T2CON_0	=	0x00c8
                           0000C9   253 _T2CON_1	=	0x00c9
                           0000CA   254 _T2CON_2	=	0x00ca
                           0000CB   255 _T2CON_3	=	0x00cb
                           0000CC   256 _T2CON_4	=	0x00cc
                           0000CD   257 _T2CON_5	=	0x00cd
                           0000CE   258 _T2CON_6	=	0x00ce
                           0000CF   259 _T2CON_7	=	0x00cf
                           0000C8   260 _CP_RL2	=	0x00c8
                           0000C9   261 _C_T2	=	0x00c9
                           0000CA   262 _TR2	=	0x00ca
                           0000CB   263 _EXEN2	=	0x00cb
                           0000CC   264 _TCLK	=	0x00cc
                           0000CD   265 _RCLK	=	0x00cd
                           0000CE   266 _EXF2	=	0x00ce
                           0000CF   267 _TF2	=	0x00cf
                           0000D0   268 _P	=	0x00d0
                           0000D1   269 _FL	=	0x00d1
                           0000D2   270 _OV	=	0x00d2
                           0000D3   271 _RS0	=	0x00d3
                           0000D4   272 _RS1	=	0x00d4
                           0000D5   273 _F0	=	0x00d5
                           0000D6   274 _AC	=	0x00d6
                           0000D7   275 _CY	=	0x00d7
                                    276 ;--------------------------------------------------------
                                    277 ; overlayable register banks
                                    278 ;--------------------------------------------------------
                                    279 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        280 	.ds 8
                                    281 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 ;--------------------------------------------------------
                                    284 ; internal ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area DSEG    (DATA)
                                    287 ;--------------------------------------------------------
                                    288 ; overlayable items in internal ram 
                                    289 ;--------------------------------------------------------
                                    290 ;--------------------------------------------------------
                                    291 ; Stack segment in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 	.area	SSEG
      000000                        294 __start__stack:
      000000                        295 	.ds	1
                                    296 
                                    297 ;--------------------------------------------------------
                                    298 ; indirectly addressable internal ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area ISEG    (DATA)
      000000                        301 _i0:
      000000                        302 	.ds 1
                                    303 ;--------------------------------------------------------
                                    304 ; absolute internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area IABS    (ABS,DATA)
                                    307 	.area IABS    (ABS,DATA)
                                    308 ;--------------------------------------------------------
                                    309 ; bit data
                                    310 ;--------------------------------------------------------
                                    311 	.area BSEG    (BIT)
                                    312 ;--------------------------------------------------------
                                    313 ; paged external ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area PSEG    (PAG,XDATA)
                                    316 ;--------------------------------------------------------
                                    317 ; external ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area XSEG    (XDATA)
      000000                        320 _g:
      000000                        321 	.ds 9216
      002400                        322 _stack:
      002400                        323 	.ds 36864
      00B400                        324 _sp:
      00B400                        325 	.ds 2
      00B402                        326 _main_R_65536_63:
      00B402                        327 	.ds 2
                                    328 ;--------------------------------------------------------
                                    329 ; absolute external ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XABS    (ABS,XDATA)
                                    332 ;--------------------------------------------------------
                                    333 ; external initialized ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XISEG   (XDATA)
                                    336 	.area HOME    (CODE)
                                    337 	.area GSINIT0 (CODE)
                                    338 	.area GSINIT1 (CODE)
                                    339 	.area GSINIT2 (CODE)
                                    340 	.area GSINIT3 (CODE)
                                    341 	.area GSINIT4 (CODE)
                                    342 	.area GSINIT5 (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.area GSFINAL (CODE)
                                    345 	.area CSEG    (CODE)
                                    346 ;--------------------------------------------------------
                                    347 ; interrupt vector 
                                    348 ;--------------------------------------------------------
                                    349 	.area HOME    (CODE)
      000000                        350 __interrupt_vect:
      000000 02r00r00         [24]  351 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  352 	ljmp	_int0
                                    353 ;--------------------------------------------------------
                                    354 ; global & static initialisations
                                    355 ;--------------------------------------------------------
                                    356 	.area HOME    (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.area GSFINAL (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.globl __sdcc_gsinit_startup
                                    361 	.globl __sdcc_program_startup
                                    362 	.globl __start__stack
                                    363 	.globl __mcs51_genXINIT
                                    364 	.globl __mcs51_genXRAMCLEAR
                                    365 	.globl __mcs51_genRAMCLEAR
                                    366 ;------------------------------------------------------------
                                    367 ;Allocation info for local variables in function 'main'
                                    368 ;------------------------------------------------------------
                                    369 ;initial                   Allocated to stack - _bp +3
                                    370 ;i                         Allocated to stack - _bp +7
                                    371 ;j                         Allocated to registers r4 r5 
                                    372 ;sloc0                     Allocated to stack - _bp +1
                                    373 ;R                         Allocated with name '_main_R_65536_63'
                                    374 ;------------------------------------------------------------
                                    375 ;	walk.c:118: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  376 	mov	dptr,#_main_R_65536_63
      000003 74 FE            [12]  377 	mov	a,#0xfe
      000005 F0               [24]  378 	movx	@dptr,a
      000006 04               [12]  379 	inc	a
      000007 A3               [24]  380 	inc	dptr
      000008 F0               [24]  381 	movx	@dptr,a
                                    382 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  383 	ljmp	__sdcc_program_startup
                                    384 ;--------------------------------------------------------
                                    385 ; Home
                                    386 ;--------------------------------------------------------
                                    387 	.area HOME    (CODE)
                                    388 	.area HOME    (CODE)
      000006                        389 __sdcc_program_startup:
      000006 02r05rC9         [24]  390 	ljmp	_main
                                    391 ;	return from main will return to caller
                                    392 ;--------------------------------------------------------
                                    393 ; code
                                    394 ;--------------------------------------------------------
                                    395 	.area CSEG    (CODE)
                                    396 ;------------------------------------------------------------
                                    397 ;Allocation info for local variables in function 'putchar'
                                    398 ;------------------------------------------------------------
                                    399 ;c                         Allocated to registers 
                                    400 ;------------------------------------------------------------
                                    401 ;	walk.c:8: int putchar(int c) __naked {
                                    402 ;	-----------------------------------------
                                    403 ;	 function putchar
                                    404 ;	-----------------------------------------
      000000                        405 _putchar:
                                    406 ;	naked function: no prologue.
                                    407 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  408 	mov	a, dpl
      000002 02 00 30         [24]  409 	ljmp	0x0030
                                    410 ;	walk.c:14: }
                                    411 ;	naked function: no epilogue.
                                    412 ;------------------------------------------------------------
                                    413 ;Allocation info for local variables in function 'getchar'
                                    414 ;------------------------------------------------------------
                                    415 ;	walk.c:16: int getchar(void) __naked {
                                    416 ;	-----------------------------------------
                                    417 ;	 function getchar
                                    418 ;	-----------------------------------------
      000005                        419 _getchar:
                                    420 ;	naked function: no prologue.
                                    421 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  422 	lcall	0x0032
      000008 F5 82            [12]  423 	mov	dpl, a
      00000A 75 83 00         [24]  424 	mov	dph, #0
      00000D 22               [24]  425 	ret
                                    426 ;	walk.c:23: }
                                    427 ;	naked function: no epilogue.
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 'int0'
                                    430 ;------------------------------------------------------------
                                    431 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    432 ;	-----------------------------------------
                                    433 ;	 function int0
                                    434 ;	-----------------------------------------
      00000E                        435 _int0:
                           00000F   436 	ar7 = 0x0f
                           00000E   437 	ar6 = 0x0e
                           00000D   438 	ar5 = 0x0d
                           00000C   439 	ar4 = 0x0c
                           00000B   440 	ar3 = 0x0b
                           00000A   441 	ar2 = 0x0a
                           000009   442 	ar1 = 0x09
                           000008   443 	ar0 = 0x08
      00000E C0 D0            [24]  444 	push	psw
      000010 75 D0 08         [24]  445 	mov	psw,#0x08
                                    446 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  447 	mov	r0,#_i0
      000015 76 00            [12]  448 	mov	@r0,#0x00
                                    449 ;	walk.c:29: }
      000017 D0 D0            [24]  450 	pop	psw
      000019 32               [24]  451 	reti
                                    452 ;	eliminated unneeded push/pop dpl
                                    453 ;	eliminated unneeded push/pop dph
                                    454 ;	eliminated unneeded push/pop b
                                    455 ;	eliminated unneeded push/pop acc
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'reset'
                                    458 ;------------------------------------------------------------
                                    459 ;	walk.c:31: static void reset(void) __naked {
                                    460 ;	-----------------------------------------
                                    461 ;	 function reset
                                    462 ;	-----------------------------------------
      00001A                        463 _reset:
                                    464 ;	naked function: no prologue.
                                    465 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  466 	orl	pcon, #2
                                    467 ;	walk.c:35: }
                                    468 ;	naked function: no epilogue.
                                    469 ;------------------------------------------------------------
                                    470 ;Allocation info for local variables in function 'walk'
                                    471 ;------------------------------------------------------------
                                    472 ;nstart                    Allocated to registers 
                                    473 ;cur                       Allocated to stack - _bp +12
                                    474 ;t                         Allocated to stack - _bp +16
                                    475 ;j                         Allocated to stack - _bp +20
                                    476 ;f                         Allocated to stack - _bp +22
                                    477 ;sloc0                     Allocated to stack - _bp +1
                                    478 ;sloc1                     Allocated to stack - _bp +2
                                    479 ;sloc2                     Allocated to stack - _bp +3
                                    480 ;sloc3                     Allocated to stack - _bp +5
                                    481 ;sloc4                     Allocated to stack - _bp +6
                                    482 ;sloc5                     Allocated to stack - _bp +8
                                    483 ;sloc6                     Allocated to stack - _bp +9
                                    484 ;------------------------------------------------------------
                                    485 ;	walk.c:63: void walk(struct node *nstart) {
                                    486 ;	-----------------------------------------
                                    487 ;	 function walk
                                    488 ;	-----------------------------------------
      00001D                        489 _walk:
                           000007   490 	ar7 = 0x07
                           000006   491 	ar6 = 0x06
                           000005   492 	ar5 = 0x05
                           000004   493 	ar4 = 0x04
                           000003   494 	ar3 = 0x03
                           000002   495 	ar2 = 0x02
                           000001   496 	ar1 = 0x01
                           000000   497 	ar0 = 0x00
      00001D C0*00            [24]  498 	push	_bp
      00001F E5 81            [12]  499 	mov	a,sp
      000021 F5*00            [12]  500 	mov	_bp,a
      000023 24 17            [12]  501 	add	a,#0x17
      000025 F5 81            [12]  502 	mov	sp,a
      000027 AD 82            [24]  503 	mov	r5,dpl
      000029 AE 83            [24]  504 	mov	r6,dph
      00002B AF F0            [24]  505 	mov	r7,b
                                    506 ;	walk.c:67: cur = *nstart;
      00002D E5*00            [12]  507 	mov	a,_bp
      00002F 24 0C            [12]  508 	add	a,#0x0c
      000031 F9               [12]  509 	mov	r1,a
      000032 FA               [12]  510 	mov	r2,a
      000033 7B 00            [12]  511 	mov	r3,#0x00
      000035 7C 40            [12]  512 	mov	r4,#0x40
      000037 C0 01            [24]  513 	push	ar1
      000039 74 04            [12]  514 	mov	a,#0x04
      00003B C0 E0            [24]  515 	push	acc
      00003D E4               [12]  516 	clr	a
      00003E C0 E0            [24]  517 	push	acc
      000040 C0 05            [24]  518 	push	ar5
      000042 C0 06            [24]  519 	push	ar6
      000044 C0 07            [24]  520 	push	ar7
      000046 8A 82            [24]  521 	mov	dpl,r2
      000048 8B 83            [24]  522 	mov	dph,r3
      00004A 8C F0            [24]  523 	mov	b,r4
      00004C 12r00r00         [24]  524 	lcall	___memcpy
      00004F E5 81            [12]  525 	mov	a,sp
      000051 24 FB            [12]  526 	add	a,#0xfb
      000053 F5 81            [12]  527 	mov	sp,a
      000055 D0 01            [24]  528 	pop	ar1
                                    529 ;	walk.c:69: process:
      000057 E5*00            [12]  530 	mov	a,_bp
      000059 24 10            [12]  531 	add	a,#0x10
      00005B F8               [12]  532 	mov	r0,a
      00005C C0 00            [24]  533 	push	ar0
      00005E E5*00            [12]  534 	mov	a,_bp
      000060 24 05            [12]  535 	add	a,#0x05
      000062 F8               [12]  536 	mov	r0,a
      000063 A6 01            [24]  537 	mov	@r0,ar1
      000065 D0 00            [24]  538 	pop	ar0
      000067 88 06            [24]  539 	mov	ar6,r0
      000069 C0 00            [24]  540 	push	ar0
      00006B A8*00            [24]  541 	mov	r0,_bp
      00006D 08               [12]  542 	inc	r0
      00006E 08               [12]  543 	inc	r0
      00006F A6 01            [24]  544 	mov	@r0,ar1
      000071 D0 00            [24]  545 	pop	ar0
      000073 C0 01            [24]  546 	push	ar1
      000075 A9*00            [24]  547 	mov	r1,_bp
      000077 09               [12]  548 	inc	r1
      000078 A7 00            [24]  549 	mov	@r1,ar0
      00007A D0 01            [24]  550 	pop	ar1
      00007C C0 00            [24]  551 	push	ar0
      00007E E5*00            [12]  552 	mov	a,_bp
      000080 24 08            [12]  553 	add	a,#0x08
      000082 F8               [12]  554 	mov	r0,a
      000083 A6 01            [24]  555 	mov	@r0,ar1
      000085 D0 00            [24]  556 	pop	ar0
      000087 74 02            [12]  557 	mov	a,#0x02
      000089 29               [12]  558 	add	a,r1
      00008A FA               [12]  559 	mov	r2,a
      00008B                        560 00101$:
                                    561 ;	walk.c:70: g[cur.r][cur.c] = 0xaa;
      00008B 87 03            [24]  562 	mov	ar3,@r1
      00008D 09               [12]  563 	inc	r1
      00008E 87 04            [24]  564 	mov	ar4,@r1
      000090 19               [12]  565 	dec	r1
      000091 C0 06            [24]  566 	push	ar6
      000093 C0 02            [24]  567 	push	ar2
      000095 C0 01            [24]  568 	push	ar1
      000097 C0 00            [24]  569 	push	ar0
      000099 C0 03            [24]  570 	push	ar3
      00009B C0 04            [24]  571 	push	ar4
      00009D 90 00 C0         [24]  572 	mov	dptr,#0x00c0
      0000A0 12r00r00         [24]  573 	lcall	__mulint
      0000A3 AB 82            [24]  574 	mov	r3,dpl
      0000A5 AC 83            [24]  575 	mov	r4,dph
      0000A7 15 81            [12]  576 	dec	sp
      0000A9 15 81            [12]  577 	dec	sp
      0000AB D0 00            [24]  578 	pop	ar0
      0000AD D0 01            [24]  579 	pop	ar1
      0000AF D0 02            [24]  580 	pop	ar2
      0000B1 D0 06            [24]  581 	pop	ar6
      0000B3 EB               [12]  582 	mov	a,r3
      0000B4 24r00            [12]  583 	add	a,#_g
      0000B6 FB               [12]  584 	mov	r3,a
      0000B7 EC               [12]  585 	mov	a,r4
      0000B8 34s00            [12]  586 	addc	a,#(_g >> 8)
      0000BA FF               [12]  587 	mov	r7,a
      0000BB C0 00            [24]  588 	push	ar0
      0000BD A8 02            [24]  589 	mov	r0,ar2
      0000BF 86 04            [24]  590 	mov	ar4,@r0
      0000C1 08               [12]  591 	inc	r0
      0000C2 86 05            [24]  592 	mov	ar5,@r0
      0000C4 EC               [12]  593 	mov	a,r4
      0000C5 2B               [12]  594 	add	a,r3
      0000C6 F5 82            [12]  595 	mov	dpl,a
      0000C8 ED               [12]  596 	mov	a,r5
      0000C9 3F               [12]  597 	addc	a,r7
      0000CA F5 83            [12]  598 	mov	dph,a
      0000CC 74 AA            [12]  599 	mov	a,#0xaa
      0000CE F0               [24]  600 	movx	@dptr,a
                                    601 ;	walk.c:71: printf("\033[%d;%dHo", cur.r + 1, cur.c + 1);
      0000CF A8 02            [24]  602 	mov	r0,ar2
      0000D1 86 04            [24]  603 	mov	ar4,@r0
      0000D3 08               [12]  604 	inc	r0
      0000D4 86 05            [24]  605 	mov	ar5,@r0
      0000D6 D0 00            [24]  606 	pop	ar0
      0000D8 74 01            [12]  607 	mov	a,#0x01
      0000DA 2C               [12]  608 	add	a,r4
      0000DB FC               [12]  609 	mov	r4,a
      0000DC E4               [12]  610 	clr	a
      0000DD 3D               [12]  611 	addc	a,r5
      0000DE FF               [12]  612 	mov	r7,a
      0000DF 87 03            [24]  613 	mov	ar3,@r1
      0000E1 09               [12]  614 	inc	r1
      0000E2 87 05            [24]  615 	mov	ar5,@r1
      0000E4 19               [12]  616 	dec	r1
      0000E5 0B               [12]  617 	inc	r3
      0000E6 BB 00 01         [24]  618 	cjne	r3,#0x00,00216$
      0000E9 0D               [12]  619 	inc	r5
      0000EA                        620 00216$:
      0000EA C0 06            [24]  621 	push	ar6
      0000EC C0 02            [24]  622 	push	ar2
      0000EE C0 01            [24]  623 	push	ar1
      0000F0 C0 00            [24]  624 	push	ar0
      0000F2 C0 04            [24]  625 	push	ar4
      0000F4 C0 07            [24]  626 	push	ar7
      0000F6 C0 03            [24]  627 	push	ar3
      0000F8 C0 05            [24]  628 	push	ar5
      0000FA 74r10            [12]  629 	mov	a,#___str_0
      0000FC C0 E0            [24]  630 	push	acc
      0000FE 74s00            [12]  631 	mov	a,#(___str_0 >> 8)
      000100 C0 E0            [24]  632 	push	acc
      000102 74 80            [12]  633 	mov	a,#0x80
      000104 C0 E0            [24]  634 	push	acc
      000106 12r00r00         [24]  635 	lcall	_printf
      000109 E5 81            [12]  636 	mov	a,sp
      00010B 24 F9            [12]  637 	add	a,#0xf9
      00010D F5 81            [12]  638 	mov	sp,a
      00010F D0 00            [24]  639 	pop	ar0
      000111 D0 01            [24]  640 	pop	ar1
      000113 D0 02            [24]  641 	pop	ar2
      000115 D0 06            [24]  642 	pop	ar6
                                    643 ;	walk.c:114: return;
                                    644 ;	walk.c:74: for (j = 0, f = 0; j < NMAX; j++) {
      000117                        645 00146$:
      000117 C0 00            [24]  646 	push	ar0
      000119 E5*00            [12]  647 	mov	a,_bp
      00011B 24 16            [12]  648 	add	a,#0x16
      00011D F8               [12]  649 	mov	r0,a
      00011E E4               [12]  650 	clr	a
      00011F F6               [12]  651 	mov	@r0,a
      000120 08               [12]  652 	inc	r0
      000121 F6               [12]  653 	mov	@r0,a
      000122 E5*00            [12]  654 	mov	a,_bp
      000124 24 14            [12]  655 	add	a,#0x14
      000126 F8               [12]  656 	mov	r0,a
      000127 E4               [12]  657 	clr	a
      000128 F6               [12]  658 	mov	@r0,a
      000129 08               [12]  659 	inc	r0
      00012A F6               [12]  660 	mov	@r0,a
      00012B D0 00            [24]  661 	pop	ar0
      00012D                        662 00136$:
      00012D C0 00            [24]  663 	push	ar0
      00012F E5*00            [12]  664 	mov	a,_bp
      000131 24 14            [12]  665 	add	a,#0x14
      000133 F8               [12]  666 	mov	r0,a
      000134 C3               [12]  667 	clr	c
      000135 E6               [12]  668 	mov	a,@r0
      000136 94 04            [12]  669 	subb	a,#0x04
      000138 08               [12]  670 	inc	r0
      000139 E6               [12]  671 	mov	a,@r0
      00013A 64 80            [12]  672 	xrl	a,#0x80
      00013C 94 80            [12]  673 	subb	a,#0x80
      00013E D0 00            [24]  674 	pop	ar0
      000140 40 03            [24]  675 	jc	00217$
      000142 02r02rDE         [24]  676 	ljmp	00114$
      000145                        677 00217$:
                                    678 ;	walk.c:75: t.r = cur.r + neigh[j].r;
      000145 C0 00            [24]  679 	push	ar0
      000147 E5*00            [12]  680 	mov	a,_bp
      000149 24 03            [12]  681 	add	a,#0x03
      00014B F8               [12]  682 	mov	r0,a
      00014C E5*00            [12]  683 	mov	a,_bp
      00014E 24 10            [12]  684 	add	a,#0x10
      000150 F6               [12]  685 	mov	@r0,a
      000151 E5*00            [12]  686 	mov	a,_bp
      000153 24 06            [12]  687 	add	a,#0x06
      000155 F8               [12]  688 	mov	r0,a
      000156 E7               [12]  689 	mov	a,@r1
      000157 F6               [12]  690 	mov	@r0,a
      000158 09               [12]  691 	inc	r1
      000159 E7               [12]  692 	mov	a,@r1
      00015A 08               [12]  693 	inc	r0
      00015B F6               [12]  694 	mov	@r0,a
      00015C 19               [12]  695 	dec	r1
      00015D E5*00            [12]  696 	mov	a,_bp
      00015F 24 14            [12]  697 	add	a,#0x14
      000161 F8               [12]  698 	mov	r0,a
      000162 E6               [12]  699 	mov	a,@r0
      000163 26               [12]  700 	add	a,@r0
      000164 FB               [12]  701 	mov	r3,a
      000165 08               [12]  702 	inc	r0
      000166 E6               [12]  703 	mov	a,@r0
      000167 33               [12]  704 	rlc	a
      000168 FF               [12]  705 	mov	r7,a
      000169 EB               [12]  706 	mov	a,r3
      00016A 2B               [12]  707 	add	a,r3
      00016B FB               [12]  708 	mov	r3,a
      00016C EF               [12]  709 	mov	a,r7
      00016D 33               [12]  710 	rlc	a
      00016E FF               [12]  711 	mov	r7,a
      00016F EB               [12]  712 	mov	a,r3
      000170 24r00            [12]  713 	add	a,#_neigh
      000172 F5 82            [12]  714 	mov	dpl,a
      000174 EF               [12]  715 	mov	a,r7
      000175 34s00            [12]  716 	addc	a,#(_neigh >> 8)
      000177 F5 83            [12]  717 	mov	dph,a
      000179 E4               [12]  718 	clr	a
      00017A 93               [24]  719 	movc	a,@a+dptr
      00017B FC               [12]  720 	mov	r4,a
      00017C A3               [24]  721 	inc	dptr
      00017D E4               [12]  722 	clr	a
      00017E 93               [24]  723 	movc	a,@a+dptr
      00017F FD               [12]  724 	mov	r5,a
      000180 E5*00            [12]  725 	mov	a,_bp
      000182 24 06            [12]  726 	add	a,#0x06
      000184 F8               [12]  727 	mov	r0,a
      000185 EC               [12]  728 	mov	a,r4
      000186 26               [12]  729 	add	a,@r0
      000187 FC               [12]  730 	mov	r4,a
      000188 ED               [12]  731 	mov	a,r5
      000189 08               [12]  732 	inc	r0
      00018A 36               [12]  733 	addc	a,@r0
      00018B FD               [12]  734 	mov	r5,a
      00018C E5*00            [12]  735 	mov	a,_bp
      00018E 24 03            [12]  736 	add	a,#0x03
      000190 F8               [12]  737 	mov	r0,a
      000191 86 00            [24]  738 	mov	ar0,@r0
      000193 A6 04            [24]  739 	mov	@r0,ar4
      000195 08               [12]  740 	inc	r0
      000196 A6 05            [24]  741 	mov	@r0,ar5
      000198 18               [12]  742 	dec	r0
      000199 D0 00            [24]  743 	pop	ar0
                                    744 ;	walk.c:76: t.c = cur.c + neigh[j].c;
      00019B C0 01            [24]  745 	push	ar1
      00019D E5*00            [12]  746 	mov	a,_bp
      00019F 24 06            [12]  747 	add	a,#0x06
      0001A1 F9               [12]  748 	mov	r1,a
      0001A2 74 02            [12]  749 	mov	a,#0x02
      0001A4 28               [12]  750 	add	a,r0
      0001A5 F7               [12]  751 	mov	@r1,a
      0001A6 D0 01            [24]  752 	pop	ar1
      0001A8 C0 00            [24]  753 	push	ar0
      0001AA A8 02            [24]  754 	mov	r0,ar2
      0001AC 86 04            [24]  755 	mov	ar4,@r0
      0001AE 08               [12]  756 	inc	r0
      0001AF 86 05            [24]  757 	mov	ar5,@r0
      0001B1 EB               [12]  758 	mov	a,r3
      0001B2 24r00            [12]  759 	add	a,#_neigh
      0001B4 FB               [12]  760 	mov	r3,a
      0001B5 EF               [12]  761 	mov	a,r7
      0001B6 34s00            [12]  762 	addc	a,#(_neigh >> 8)
      0001B8 FF               [12]  763 	mov	r7,a
      0001B9 8B 82            [24]  764 	mov	dpl,r3
      0001BB 8F 83            [24]  765 	mov	dph,r7
      0001BD A3               [24]  766 	inc	dptr
      0001BE A3               [24]  767 	inc	dptr
      0001BF E4               [12]  768 	clr	a
      0001C0 93               [24]  769 	movc	a,@a+dptr
      0001C1 FB               [12]  770 	mov	r3,a
      0001C2 A3               [24]  771 	inc	dptr
      0001C3 E4               [12]  772 	clr	a
      0001C4 93               [24]  773 	movc	a,@a+dptr
      0001C5 FF               [12]  774 	mov	r7,a
      0001C6 EB               [12]  775 	mov	a,r3
      0001C7 2C               [12]  776 	add	a,r4
      0001C8 FC               [12]  777 	mov	r4,a
      0001C9 EF               [12]  778 	mov	a,r7
      0001CA 3D               [12]  779 	addc	a,r5
      0001CB FD               [12]  780 	mov	r5,a
      0001CC E5*00            [12]  781 	mov	a,_bp
      0001CE 24 06            [12]  782 	add	a,#0x06
      0001D0 F8               [12]  783 	mov	r0,a
      0001D1 86 00            [24]  784 	mov	ar0,@r0
      0001D3 A6 04            [24]  785 	mov	@r0,ar4
      0001D5 08               [12]  786 	inc	r0
      0001D6 A6 05            [24]  787 	mov	@r0,ar5
      0001D8 18               [12]  788 	dec	r0
      0001D9 D0 00            [24]  789 	pop	ar0
                                    790 ;	walk.c:77: if ((t.r < 0) || (t.r == ROWS) || (t.c < 0) || (t.c == COLS)) continue;
      0001DB 86 04            [24]  791 	mov	ar4,@r0
      0001DD 08               [12]  792 	inc	r0
      0001DE 86 03            [24]  793 	mov	ar3,@r0
      0001E0 18               [12]  794 	dec	r0
      0001E1 EB               [12]  795 	mov	a,r3
      0001E2 30 E7 03         [24]  796 	jnb	acc.7,00218$
      0001E5 02r02rCC         [24]  797 	ljmp	00113$
      0001E8                        798 00218$:
      0001E8 BC 30 06         [24]  799 	cjne	r4,#0x30,00219$
      0001EB BB 00 03         [24]  800 	cjne	r3,#0x00,00219$
      0001EE 02r02rCC         [24]  801 	ljmp	00113$
      0001F1                        802 00219$:
      0001F1 C0 00            [24]  803 	push	ar0
      0001F3 E5*00            [12]  804 	mov	a,_bp
      0001F5 24 06            [12]  805 	add	a,#0x06
      0001F7 F8               [12]  806 	mov	r0,a
      0001F8 86 00            [24]  807 	mov	ar0,@r0
      0001FA 86 05            [24]  808 	mov	ar5,@r0
      0001FC 08               [12]  809 	inc	r0
      0001FD 86 07            [24]  810 	mov	ar7,@r0
      0001FF 18               [12]  811 	dec	r0
      000200 D0 00            [24]  812 	pop	ar0
      000202 EF               [12]  813 	mov	a,r7
      000203 30 E7 03         [24]  814 	jnb	acc.7,00220$
      000206 02r02rCC         [24]  815 	ljmp	00113$
      000209                        816 00220$:
      000209 C0 00            [24]  817 	push	ar0
      00020B E5*00            [12]  818 	mov	a,_bp
      00020D 24 06            [12]  819 	add	a,#0x06
      00020F F8               [12]  820 	mov	r0,a
      000210 86 00            [24]  821 	mov	ar0,@r0
      000212 86 05            [24]  822 	mov	ar5,@r0
      000214 08               [12]  823 	inc	r0
      000215 86 07            [24]  824 	mov	ar7,@r0
      000217 18               [12]  825 	dec	r0
      000218 D0 00            [24]  826 	pop	ar0
      00021A BD C0 06         [24]  827 	cjne	r5,#0xc0,00221$
      00021D BF 00 03         [24]  828 	cjne	r7,#0x00,00221$
      000220 02r02rCC         [24]  829 	ljmp	00113$
      000223                        830 00221$:
                                    831 ;	walk.c:79: if (g[t.r][t.c] == 0x55) f++;
      000223 C0 06            [24]  832 	push	ar6
      000225 C0 02            [24]  833 	push	ar2
      000227 C0 01            [24]  834 	push	ar1
      000229 C0 00            [24]  835 	push	ar0
      00022B C0 04            [24]  836 	push	ar4
      00022D C0 03            [24]  837 	push	ar3
      00022F 90 00 C0         [24]  838 	mov	dptr,#0x00c0
      000232 12r00r00         [24]  839 	lcall	__mulint
      000235 AD 82            [24]  840 	mov	r5,dpl
      000237 AF 83            [24]  841 	mov	r7,dph
      000239 15 81            [12]  842 	dec	sp
      00023B 15 81            [12]  843 	dec	sp
      00023D D0 00            [24]  844 	pop	ar0
      00023F D0 01            [24]  845 	pop	ar1
      000241 D0 02            [24]  846 	pop	ar2
      000243 D0 06            [24]  847 	pop	ar6
      000245 C0 00            [24]  848 	push	ar0
      000247 E5*00            [12]  849 	mov	a,_bp
      000249 24 03            [12]  850 	add	a,#0x03
      00024B F8               [12]  851 	mov	r0,a
      00024C ED               [12]  852 	mov	a,r5
      00024D 24r00            [12]  853 	add	a,#_g
      00024F F6               [12]  854 	mov	@r0,a
      000250 EF               [12]  855 	mov	a,r7
      000251 34s00            [12]  856 	addc	a,#(_g >> 8)
      000253 08               [12]  857 	inc	r0
      000254 F6               [12]  858 	mov	@r0,a
      000255 E5*00            [12]  859 	mov	a,_bp
      000257 24 06            [12]  860 	add	a,#0x06
      000259 F8               [12]  861 	mov	r0,a
      00025A 86 00            [24]  862 	mov	ar0,@r0
      00025C 86 03            [24]  863 	mov	ar3,@r0
      00025E 08               [12]  864 	inc	r0
      00025F 86 04            [24]  865 	mov	ar4,@r0
      000261 18               [12]  866 	dec	r0
      000262 E5*00            [12]  867 	mov	a,_bp
      000264 24 03            [12]  868 	add	a,#0x03
      000266 F8               [12]  869 	mov	r0,a
      000267 EB               [12]  870 	mov	a,r3
      000268 26               [12]  871 	add	a,@r0
      000269 F5 82            [12]  872 	mov	dpl,a
      00026B EC               [12]  873 	mov	a,r4
      00026C 08               [12]  874 	inc	r0
      00026D 36               [12]  875 	addc	a,@r0
      00026E F5 83            [12]  876 	mov	dph,a
      000270 D0 00            [24]  877 	pop	ar0
      000272 E0               [24]  878 	movx	a,@dptr
      000273 FC               [12]  879 	mov	r4,a
      000274 BC 55 11         [24]  880 	cjne	r4,#0x55,00111$
      000277 C0 00            [24]  881 	push	ar0
      000279 E5*00            [12]  882 	mov	a,_bp
      00027B 24 16            [12]  883 	add	a,#0x16
      00027D F8               [12]  884 	mov	r0,a
      00027E 06               [12]  885 	inc	@r0
      00027F B6 00 02         [24]  886 	cjne	@r0,#0x00,00224$
      000282 08               [12]  887 	inc	r0
      000283 06               [12]  888 	inc	@r0
      000284                        889 00224$:
      000284 D0 00            [24]  890 	pop	ar0
      000286 80 44            [24]  891 	sjmp	00113$
      000288                        892 00111$:
                                    893 ;	walk.c:80: else if (g[t.r][t.c] != 0xaa) {
      000288 ED               [12]  894 	mov	a,r5
      000289 24r00            [12]  895 	add	a,#_g
      00028B FD               [12]  896 	mov	r5,a
      00028C EF               [12]  897 	mov	a,r7
      00028D 34s00            [12]  898 	addc	a,#(_g >> 8)
      00028F FF               [12]  899 	mov	r7,a
      000290 C0 00            [24]  900 	push	ar0
      000292 E5*00            [12]  901 	mov	a,_bp
      000294 24 06            [12]  902 	add	a,#0x06
      000296 F8               [12]  903 	mov	r0,a
      000297 86 00            [24]  904 	mov	ar0,@r0
      000299 86 03            [24]  905 	mov	ar3,@r0
      00029B 08               [12]  906 	inc	r0
      00029C 86 04            [24]  907 	mov	ar4,@r0
      00029E 18               [12]  908 	dec	r0
      00029F D0 00            [24]  909 	pop	ar0
      0002A1 EB               [12]  910 	mov	a,r3
      0002A2 2D               [12]  911 	add	a,r5
      0002A3 F5 82            [12]  912 	mov	dpl,a
      0002A5 EC               [12]  913 	mov	a,r4
      0002A6 3F               [12]  914 	addc	a,r7
      0002A7 F5 83            [12]  915 	mov	dph,a
      0002A9 E0               [24]  916 	movx	a,@dptr
      0002AA FF               [12]  917 	mov	r7,a
      0002AB BF AA 02         [24]  918 	cjne	r7,#0xaa,00225$
      0002AE 80 1C            [24]  919 	sjmp	00113$
      0002B0                        920 00225$:
                                    921 ;	walk.c:81: (void)puts("Memory error");
      0002B0 90r00r1A         [24]  922 	mov	dptr,#___str_1
      0002B3 75 F0 80         [24]  923 	mov	b,#0x80
      0002B6 C0 06            [24]  924 	push	ar6
      0002B8 C0 02            [24]  925 	push	ar2
      0002BA C0 01            [24]  926 	push	ar1
      0002BC C0 00            [24]  927 	push	ar0
      0002BE 12r00r00         [24]  928 	lcall	_puts
      0002C1 D0 00            [24]  929 	pop	ar0
      0002C3 D0 01            [24]  930 	pop	ar1
      0002C5 D0 02            [24]  931 	pop	ar2
      0002C7 D0 06            [24]  932 	pop	ar6
                                    933 ;	walk.c:82: reset();
      0002C9 12r00r1A         [24]  934 	lcall	_reset
      0002CC                        935 00113$:
                                    936 ;	walk.c:74: for (j = 0, f = 0; j < NMAX; j++) {
      0002CC C0 00            [24]  937 	push	ar0
      0002CE E5*00            [12]  938 	mov	a,_bp
      0002D0 24 14            [12]  939 	add	a,#0x14
      0002D2 F8               [12]  940 	mov	r0,a
      0002D3 06               [12]  941 	inc	@r0
      0002D4 B6 00 02         [24]  942 	cjne	@r0,#0x00,00226$
      0002D7 08               [12]  943 	inc	r0
      0002D8 06               [12]  944 	inc	@r0
      0002D9                        945 00226$:
      0002D9 D0 00            [24]  946 	pop	ar0
      0002DB 02r01r2D         [24]  947 	ljmp	00136$
      0002DE                        948 00114$:
                                    949 ;	walk.c:86: if (f) {
      0002DE C0 00            [24]  950 	push	ar0
      0002E0 E5*00            [12]  951 	mov	a,_bp
      0002E2 24 16            [12]  952 	add	a,#0x16
      0002E4 F8               [12]  953 	mov	r0,a
      0002E5 E6               [12]  954 	mov	a,@r0
      0002E6 08               [12]  955 	inc	r0
      0002E7 46               [12]  956 	orl	a,@r0
      0002E8 D0 00            [24]  957 	pop	ar0
      0002EA 70 03            [24]  958 	jnz	00227$
      0002EC 02r05r47         [24]  959 	ljmp	00131$
      0002EF                        960 00227$:
                                    961 ;	walk.c:87: while (1) {
      0002EF                        962 00128$:
                                    963 ;	walk.c:88: j = rand() % NMAX;
      0002EF C0 06            [24]  964 	push	ar6
      0002F1 C0 02            [24]  965 	push	ar2
      0002F3 C0 01            [24]  966 	push	ar1
      0002F5 C0 00            [24]  967 	push	ar0
      0002F7 12r00r00         [24]  968 	lcall	_rand
      0002FA AD 82            [24]  969 	mov	r5,dpl
      0002FC AF 83            [24]  970 	mov	r7,dph
      0002FE 74 04            [12]  971 	mov	a,#0x04
      000300 C0 E0            [24]  972 	push	acc
      000302 E4               [12]  973 	clr	a
      000303 C0 E0            [24]  974 	push	acc
      000305 8D 82            [24]  975 	mov	dpl,r5
      000307 8F 83            [24]  976 	mov	dph,r7
      000309 12r00r00         [24]  977 	lcall	__modsint
      00030C AD 82            [24]  978 	mov	r5,dpl
      00030E AF 83            [24]  979 	mov	r7,dph
      000310 15 81            [12]  980 	dec	sp
      000312 15 81            [12]  981 	dec	sp
      000314 D0 00            [24]  982 	pop	ar0
      000316 D0 01            [24]  983 	pop	ar1
      000318 D0 02            [24]  984 	pop	ar2
      00031A D0 06            [24]  985 	pop	ar6
      00031C C0 00            [24]  986 	push	ar0
      00031E E5*00            [12]  987 	mov	a,_bp
      000320 24 14            [12]  988 	add	a,#0x14
      000322 F8               [12]  989 	mov	r0,a
      000323 A6 05            [24]  990 	mov	@r0,ar5
      000325 08               [12]  991 	inc	r0
      000326 A6 07            [24]  992 	mov	@r0,ar7
                                    993 ;	walk.c:89: t.r = cur.r + neigh[j].r;
      000328 E5*00            [12]  994 	mov	a,_bp
      00032A 24 06            [12]  995 	add	a,#0x06
      00032C F8               [12]  996 	mov	r0,a
      00032D E5*00            [12]  997 	mov	a,_bp
      00032F 24 10            [12]  998 	add	a,#0x10
      000331 F6               [12]  999 	mov	@r0,a
      000332 E5*00            [12] 1000 	mov	a,_bp
      000334 24 03            [12] 1001 	add	a,#0x03
      000336 F8               [12] 1002 	mov	r0,a
      000337 E7               [12] 1003 	mov	a,@r1
      000338 F6               [12] 1004 	mov	@r0,a
      000339 09               [12] 1005 	inc	r1
      00033A E7               [12] 1006 	mov	a,@r1
      00033B 08               [12] 1007 	inc	r0
      00033C F6               [12] 1008 	mov	@r0,a
      00033D 19               [12] 1009 	dec	r1
      00033E E5*00            [12] 1010 	mov	a,_bp
      000340 24 14            [12] 1011 	add	a,#0x14
      000342 F8               [12] 1012 	mov	r0,a
      000343 E6               [12] 1013 	mov	a,@r0
      000344 26               [12] 1014 	add	a,@r0
      000345 FC               [12] 1015 	mov	r4,a
      000346 08               [12] 1016 	inc	r0
      000347 E6               [12] 1017 	mov	a,@r0
      000348 33               [12] 1018 	rlc	a
      000349 FD               [12] 1019 	mov	r5,a
      00034A EC               [12] 1020 	mov	a,r4
      00034B 2C               [12] 1021 	add	a,r4
      00034C FC               [12] 1022 	mov	r4,a
      00034D ED               [12] 1023 	mov	a,r5
      00034E 33               [12] 1024 	rlc	a
      00034F FD               [12] 1025 	mov	r5,a
      000350 EC               [12] 1026 	mov	a,r4
      000351 24r00            [12] 1027 	add	a,#_neigh
      000353 F5 82            [12] 1028 	mov	dpl,a
      000355 ED               [12] 1029 	mov	a,r5
      000356 34s00            [12] 1030 	addc	a,#(_neigh >> 8)
      000358 F5 83            [12] 1031 	mov	dph,a
      00035A E4               [12] 1032 	clr	a
      00035B 93               [24] 1033 	movc	a,@a+dptr
      00035C FB               [12] 1034 	mov	r3,a
      00035D A3               [24] 1035 	inc	dptr
      00035E E4               [12] 1036 	clr	a
      00035F 93               [24] 1037 	movc	a,@a+dptr
      000360 FF               [12] 1038 	mov	r7,a
      000361 E5*00            [12] 1039 	mov	a,_bp
      000363 24 03            [12] 1040 	add	a,#0x03
      000365 F8               [12] 1041 	mov	r0,a
      000366 EB               [12] 1042 	mov	a,r3
      000367 26               [12] 1043 	add	a,@r0
      000368 FB               [12] 1044 	mov	r3,a
      000369 EF               [12] 1045 	mov	a,r7
      00036A 08               [12] 1046 	inc	r0
      00036B 36               [12] 1047 	addc	a,@r0
      00036C FF               [12] 1048 	mov	r7,a
      00036D E5*00            [12] 1049 	mov	a,_bp
      00036F 24 06            [12] 1050 	add	a,#0x06
      000371 F8               [12] 1051 	mov	r0,a
      000372 86 00            [24] 1052 	mov	ar0,@r0
      000374 A6 03            [24] 1053 	mov	@r0,ar3
      000376 08               [12] 1054 	inc	r0
      000377 A6 07            [24] 1055 	mov	@r0,ar7
      000379 18               [12] 1056 	dec	r0
                                   1057 ;	walk.c:90: t.c = cur.c + neigh[j].c;
      00037A E5*00            [12] 1058 	mov	a,_bp
      00037C 24 06            [12] 1059 	add	a,#0x06
      00037E F8               [12] 1060 	mov	r0,a
      00037F 74 02            [12] 1061 	mov	a,#0x02
      000381 2E               [12] 1062 	add	a,r6
      000382 F6               [12] 1063 	mov	@r0,a
      000383 A8 02            [24] 1064 	mov	r0,ar2
      000385 86 03            [24] 1065 	mov	ar3,@r0
      000387 08               [12] 1066 	inc	r0
      000388 86 07            [24] 1067 	mov	ar7,@r0
      00038A EC               [12] 1068 	mov	a,r4
      00038B 24r00            [12] 1069 	add	a,#_neigh
      00038D FC               [12] 1070 	mov	r4,a
      00038E ED               [12] 1071 	mov	a,r5
      00038F 34s00            [12] 1072 	addc	a,#(_neigh >> 8)
      000391 FD               [12] 1073 	mov	r5,a
      000392 8C 82            [24] 1074 	mov	dpl,r4
      000394 8D 83            [24] 1075 	mov	dph,r5
      000396 A3               [24] 1076 	inc	dptr
      000397 A3               [24] 1077 	inc	dptr
      000398 E4               [12] 1078 	clr	a
      000399 93               [24] 1079 	movc	a,@a+dptr
      00039A FC               [12] 1080 	mov	r4,a
      00039B A3               [24] 1081 	inc	dptr
      00039C E4               [12] 1082 	clr	a
      00039D 93               [24] 1083 	movc	a,@a+dptr
      00039E FD               [12] 1084 	mov	r5,a
      00039F EC               [12] 1085 	mov	a,r4
      0003A0 2B               [12] 1086 	add	a,r3
      0003A1 FB               [12] 1087 	mov	r3,a
      0003A2 ED               [12] 1088 	mov	a,r5
      0003A3 3F               [12] 1089 	addc	a,r7
      0003A4 FF               [12] 1090 	mov	r7,a
      0003A5 E5*00            [12] 1091 	mov	a,_bp
      0003A7 24 06            [12] 1092 	add	a,#0x06
      0003A9 F8               [12] 1093 	mov	r0,a
      0003AA 86 00            [24] 1094 	mov	ar0,@r0
      0003AC A6 03            [24] 1095 	mov	@r0,ar3
      0003AE 08               [12] 1096 	inc	r0
      0003AF A6 07            [24] 1097 	mov	@r0,ar7
      0003B1 18               [12] 1098 	dec	r0
                                   1099 ;	walk.c:91: if ((t.r < 0) || (t.r == ROWS) || (t.c < 0) || (t.c == COLS)) continue;
      0003B2 A8 06            [24] 1100 	mov	r0,ar6
      0003B4 86 04            [24] 1101 	mov	ar4,@r0
      0003B6 08               [12] 1102 	inc	r0
      0003B7 86 03            [24] 1103 	mov	ar3,@r0
      0003B9 D0 00            [24] 1104 	pop	ar0
      0003BB EB               [12] 1105 	mov	a,r3
      0003BC 30 E7 03         [24] 1106 	jnb	acc.7,00228$
      0003BF 02r02rEF         [24] 1107 	ljmp	00128$
      0003C2                       1108 00228$:
      0003C2 BC 30 06         [24] 1109 	cjne	r4,#0x30,00229$
      0003C5 BB 00 03         [24] 1110 	cjne	r3,#0x00,00229$
      0003C8 02r02rEF         [24] 1111 	ljmp	00128$
      0003CB                       1112 00229$:
      0003CB C0 00            [24] 1113 	push	ar0
      0003CD E5*00            [12] 1114 	mov	a,_bp
      0003CF 24 06            [12] 1115 	add	a,#0x06
      0003D1 F8               [12] 1116 	mov	r0,a
      0003D2 86 00            [24] 1117 	mov	ar0,@r0
      0003D4 86 05            [24] 1118 	mov	ar5,@r0
      0003D6 08               [12] 1119 	inc	r0
      0003D7 86 07            [24] 1120 	mov	ar7,@r0
      0003D9 18               [12] 1121 	dec	r0
      0003DA D0 00            [24] 1122 	pop	ar0
      0003DC EF               [12] 1123 	mov	a,r7
      0003DD 30 E7 03         [24] 1124 	jnb	acc.7,00230$
      0003E0 02r02rEF         [24] 1125 	ljmp	00128$
      0003E3                       1126 00230$:
      0003E3 C0 00            [24] 1127 	push	ar0
      0003E5 E5*00            [12] 1128 	mov	a,_bp
      0003E7 24 06            [12] 1129 	add	a,#0x06
      0003E9 F8               [12] 1130 	mov	r0,a
      0003EA 86 00            [24] 1131 	mov	ar0,@r0
      0003EC 86 05            [24] 1132 	mov	ar5,@r0
      0003EE 08               [12] 1133 	inc	r0
      0003EF 86 07            [24] 1134 	mov	ar7,@r0
      0003F1 18               [12] 1135 	dec	r0
      0003F2 D0 00            [24] 1136 	pop	ar0
      0003F4 BD C0 06         [24] 1137 	cjne	r5,#0xc0,00231$
      0003F7 BF 00 03         [24] 1138 	cjne	r7,#0x00,00231$
      0003FA 02r02rEF         [24] 1139 	ljmp	00128$
      0003FD                       1140 00231$:
                                   1141 ;	walk.c:93: if (g[t.r][t.c] == 0xaa) continue;
      0003FD C0 06            [24] 1142 	push	ar6
      0003FF C0 02            [24] 1143 	push	ar2
      000401 C0 01            [24] 1144 	push	ar1
      000403 C0 00            [24] 1145 	push	ar0
      000405 C0 04            [24] 1146 	push	ar4
      000407 C0 03            [24] 1147 	push	ar3
      000409 90 00 C0         [24] 1148 	mov	dptr,#0x00c0
      00040C 12r00r00         [24] 1149 	lcall	__mulint
      00040F AD 82            [24] 1150 	mov	r5,dpl
      000411 AF 83            [24] 1151 	mov	r7,dph
      000413 15 81            [12] 1152 	dec	sp
      000415 15 81            [12] 1153 	dec	sp
      000417 D0 00            [24] 1154 	pop	ar0
      000419 D0 01            [24] 1155 	pop	ar1
      00041B D0 02            [24] 1156 	pop	ar2
      00041D D0 06            [24] 1157 	pop	ar6
      00041F C0 00            [24] 1158 	push	ar0
      000421 E5*00            [12] 1159 	mov	a,_bp
      000423 24 03            [12] 1160 	add	a,#0x03
      000425 F8               [12] 1161 	mov	r0,a
      000426 ED               [12] 1162 	mov	a,r5
      000427 24r00            [12] 1163 	add	a,#_g
      000429 F6               [12] 1164 	mov	@r0,a
      00042A EF               [12] 1165 	mov	a,r7
      00042B 34s00            [12] 1166 	addc	a,#(_g >> 8)
      00042D 08               [12] 1167 	inc	r0
      00042E F6               [12] 1168 	mov	@r0,a
      00042F E5*00            [12] 1169 	mov	a,_bp
      000431 24 06            [12] 1170 	add	a,#0x06
      000433 F8               [12] 1171 	mov	r0,a
      000434 86 00            [24] 1172 	mov	ar0,@r0
      000436 86 03            [24] 1173 	mov	ar3,@r0
      000438 08               [12] 1174 	inc	r0
      000439 86 04            [24] 1175 	mov	ar4,@r0
      00043B 18               [12] 1176 	dec	r0
      00043C E5*00            [12] 1177 	mov	a,_bp
      00043E 24 03            [12] 1178 	add	a,#0x03
      000440 F8               [12] 1179 	mov	r0,a
      000441 EB               [12] 1180 	mov	a,r3
      000442 26               [12] 1181 	add	a,@r0
      000443 F5 82            [12] 1182 	mov	dpl,a
      000445 EC               [12] 1183 	mov	a,r4
      000446 08               [12] 1184 	inc	r0
      000447 36               [12] 1185 	addc	a,@r0
      000448 F5 83            [12] 1186 	mov	dph,a
      00044A D0 00            [24] 1187 	pop	ar0
      00044C E0               [24] 1188 	movx	a,@dptr
      00044D FC               [12] 1189 	mov	r4,a
      00044E BC AA 03         [24] 1190 	cjne	r4,#0xaa,00232$
      000451 02r02rEF         [24] 1191 	ljmp	00128$
      000454                       1192 00232$:
                                   1193 ;	walk.c:94: else if (g[t.r][t.c] != 0x55) {
      000454 ED               [12] 1194 	mov	a,r5
      000455 24r00            [12] 1195 	add	a,#_g
      000457 FD               [12] 1196 	mov	r5,a
      000458 EF               [12] 1197 	mov	a,r7
      000459 34s00            [12] 1198 	addc	a,#(_g >> 8)
      00045B FF               [12] 1199 	mov	r7,a
      00045C C0 00            [24] 1200 	push	ar0
      00045E E5*00            [12] 1201 	mov	a,_bp
      000460 24 06            [12] 1202 	add	a,#0x06
      000462 F8               [12] 1203 	mov	r0,a
      000463 86 00            [24] 1204 	mov	ar0,@r0
      000465 86 03            [24] 1205 	mov	ar3,@r0
      000467 08               [12] 1206 	inc	r0
      000468 86 04            [24] 1207 	mov	ar4,@r0
      00046A 18               [12] 1208 	dec	r0
      00046B D0 00            [24] 1209 	pop	ar0
      00046D EB               [12] 1210 	mov	a,r3
      00046E 2D               [12] 1211 	add	a,r5
      00046F F5 82            [12] 1212 	mov	dpl,a
      000471 EC               [12] 1213 	mov	a,r4
      000472 3F               [12] 1214 	addc	a,r7
      000473 F5 83            [12] 1215 	mov	dph,a
      000475 E0               [24] 1216 	movx	a,@dptr
      000476 FF               [12] 1217 	mov	r7,a
      000477 BF 55 02         [24] 1218 	cjne	r7,#0x55,00233$
      00047A 80 1C            [24] 1219 	sjmp	00124$
      00047C                       1220 00233$:
                                   1221 ;	walk.c:95: (void)puts("Memory error");
      00047C 90r00r1A         [24] 1222 	mov	dptr,#___str_1
      00047F 75 F0 80         [24] 1223 	mov	b,#0x80
      000482 C0 06            [24] 1224 	push	ar6
      000484 C0 02            [24] 1225 	push	ar2
      000486 C0 01            [24] 1226 	push	ar1
      000488 C0 00            [24] 1227 	push	ar0
      00048A 12r00r00         [24] 1228 	lcall	_puts
      00048D D0 00            [24] 1229 	pop	ar0
      00048F D0 01            [24] 1230 	pop	ar1
      000491 D0 02            [24] 1231 	pop	ar2
      000493 D0 06            [24] 1232 	pop	ar6
                                   1233 ;	walk.c:96: reset();
      000495 12r00r1A         [24] 1234 	lcall	_reset
      000498                       1235 00124$:
                                   1236 ;	walk.c:99: if (!stpush(&cur)) {
      000498 C0 00            [24] 1237 	push	ar0
      00049A A8*00            [24] 1238 	mov	r0,_bp
      00049C 08               [12] 1239 	inc	r0
      00049D 08               [12] 1240 	inc	r0
      00049E 86 04            [24] 1241 	mov	ar4,@r0
      0004A0 7D 00            [12] 1242 	mov	r5,#0x00
      0004A2 7F 40            [12] 1243 	mov	r7,#0x40
      0004A4 D0 00            [24] 1244 	pop	ar0
      0004A6 8C 82            [24] 1245 	mov	dpl,r4
      0004A8 8D 83            [24] 1246 	mov	dph,r5
      0004AA 8F F0            [24] 1247 	mov	b,r7
      0004AC C0 06            [24] 1248 	push	ar6
      0004AE C0 02            [24] 1249 	push	ar2
      0004B0 C0 01            [24] 1250 	push	ar1
      0004B2 C0 00            [24] 1251 	push	ar0
      0004B4 12r07r02         [24] 1252 	lcall	_stpush
      0004B7 E5 82            [12] 1253 	mov	a,dpl
      0004B9 85 83 F0         [24] 1254 	mov	b,dph
      0004BC D0 00            [24] 1255 	pop	ar0
      0004BE D0 01            [24] 1256 	pop	ar1
      0004C0 D0 02            [24] 1257 	pop	ar2
      0004C2 D0 06            [24] 1258 	pop	ar6
      0004C4 45 F0            [12] 1259 	orl	a,b
      0004C6 70 1C            [24] 1260 	jnz	00126$
                                   1261 ;	walk.c:100: (void)puts("Memory error");
      0004C8 90r00r1A         [24] 1262 	mov	dptr,#___str_1
      0004CB 75 F0 80         [24] 1263 	mov	b,#0x80
      0004CE C0 06            [24] 1264 	push	ar6
      0004D0 C0 02            [24] 1265 	push	ar2
      0004D2 C0 01            [24] 1266 	push	ar1
      0004D4 C0 00            [24] 1267 	push	ar0
      0004D6 12r00r00         [24] 1268 	lcall	_puts
      0004D9 D0 00            [24] 1269 	pop	ar0
      0004DB D0 01            [24] 1270 	pop	ar1
      0004DD D0 02            [24] 1271 	pop	ar2
      0004DF D0 06            [24] 1272 	pop	ar6
                                   1273 ;	walk.c:101: reset();
      0004E1 12r00r1A         [24] 1274 	lcall	_reset
      0004E4                       1275 00126$:
                                   1276 ;	walk.c:103: cur = t;
      0004E4 C0 06            [24] 1277 	push	ar6
      0004E6 C0 00            [24] 1278 	push	ar0
      0004E8 A8*00            [24] 1279 	mov	r0,_bp
      0004EA 08               [12] 1280 	inc	r0
      0004EB C0 01            [24] 1281 	push	ar1
      0004ED E5*00            [12] 1282 	mov	a,_bp
      0004EF 24 09            [12] 1283 	add	a,#0x09
      0004F1 F9               [12] 1284 	mov	r1,a
      0004F2 E6               [12] 1285 	mov	a,@r0
      0004F3 F7               [12] 1286 	mov	@r1,a
      0004F4 09               [12] 1287 	inc	r1
      0004F5 77 00            [12] 1288 	mov	@r1,#0x00
      0004F7 09               [12] 1289 	inc	r1
      0004F8 77 40            [12] 1290 	mov	@r1,#0x40
      0004FA D0 01            [24] 1291 	pop	ar1
      0004FC E5*00            [12] 1292 	mov	a,_bp
      0004FE 24 08            [12] 1293 	add	a,#0x08
      000500 F8               [12] 1294 	mov	r0,a
      000501 86 03            [24] 1295 	mov	ar3,@r0
      000503 7E 00            [12] 1296 	mov	r6,#0x00
      000505 7F 40            [12] 1297 	mov	r7,#0x40
      000507 D0 00            [24] 1298 	pop	ar0
      000509 C0 06            [24] 1299 	push	ar6
      00050B C0 02            [24] 1300 	push	ar2
      00050D C0 01            [24] 1301 	push	ar1
      00050F C0 00            [24] 1302 	push	ar0
      000511 74 04            [12] 1303 	mov	a,#0x04
      000513 C0 E0            [24] 1304 	push	acc
      000515 E4               [12] 1305 	clr	a
      000516 C0 E0            [24] 1306 	push	acc
      000518 85 00 F0         [24] 1307 	mov	b,ar0
      00051B E5*00            [12] 1308 	mov	a,_bp
      00051D 24 09            [12] 1309 	add	a,#0x09
      00051F F8               [12] 1310 	mov	r0,a
      000520 E6               [12] 1311 	mov	a,@r0
      000521 C0 E0            [24] 1312 	push	acc
      000523 08               [12] 1313 	inc	r0
      000524 E6               [12] 1314 	mov	a,@r0
      000525 C0 E0            [24] 1315 	push	acc
      000527 08               [12] 1316 	inc	r0
      000528 E6               [12] 1317 	mov	a,@r0
      000529 C0 E0            [24] 1318 	push	acc
      00052B 8B 82            [24] 1319 	mov	dpl,r3
      00052D 8E 83            [24] 1320 	mov	dph,r6
      00052F 8F F0            [24] 1321 	mov	b,r7
      000531 12r00r00         [24] 1322 	lcall	___memcpy
      000534 E5 81            [12] 1323 	mov	a,sp
      000536 24 FB            [12] 1324 	add	a,#0xfb
      000538 F5 81            [12] 1325 	mov	sp,a
      00053A D0 00            [24] 1326 	pop	ar0
      00053C D0 01            [24] 1327 	pop	ar1
      00053E D0 02            [24] 1328 	pop	ar2
      000540 D0 06            [24] 1329 	pop	ar6
                                   1330 ;	walk.c:104: goto process;
      000542 D0 06            [24] 1331 	pop	ar6
      000544 02r00r8B         [24] 1332 	ljmp	00101$
      000547                       1333 00131$:
                                   1334 ;	walk.c:108: printf("\033[%d;%dH.", cur.r + 1, cur.c + 1);
      000547 C0 00            [24] 1335 	push	ar0
      000549 A8 02            [24] 1336 	mov	r0,ar2
      00054B 86 05            [24] 1337 	mov	ar5,@r0
      00054D 08               [12] 1338 	inc	r0
      00054E 86 07            [24] 1339 	mov	ar7,@r0
      000550 D0 00            [24] 1340 	pop	ar0
      000552 0D               [12] 1341 	inc	r5
      000553 BD 00 01         [24] 1342 	cjne	r5,#0x00,00235$
      000556 0F               [12] 1343 	inc	r7
      000557                       1344 00235$:
      000557 87 03            [24] 1345 	mov	ar3,@r1
      000559 09               [12] 1346 	inc	r1
      00055A 87 04            [24] 1347 	mov	ar4,@r1
      00055C 19               [12] 1348 	dec	r1
      00055D 0B               [12] 1349 	inc	r3
      00055E BB 00 01         [24] 1350 	cjne	r3,#0x00,00236$
      000561 0C               [12] 1351 	inc	r4
      000562                       1352 00236$:
      000562 C0 06            [24] 1353 	push	ar6
      000564 C0 02            [24] 1354 	push	ar2
      000566 C0 01            [24] 1355 	push	ar1
      000568 C0 00            [24] 1356 	push	ar0
      00056A C0 05            [24] 1357 	push	ar5
      00056C C0 07            [24] 1358 	push	ar7
      00056E C0 03            [24] 1359 	push	ar3
      000570 C0 04            [24] 1360 	push	ar4
      000572 74r27            [12] 1361 	mov	a,#___str_2
      000574 C0 E0            [24] 1362 	push	acc
      000576 74s00            [12] 1363 	mov	a,#(___str_2 >> 8)
      000578 C0 E0            [24] 1364 	push	acc
      00057A 74 80            [12] 1365 	mov	a,#0x80
      00057C C0 E0            [24] 1366 	push	acc
      00057E 12r00r00         [24] 1367 	lcall	_printf
      000581 E5 81            [12] 1368 	mov	a,sp
      000583 24 F9            [12] 1369 	add	a,#0xf9
      000585 F5 81            [12] 1370 	mov	sp,a
      000587 D0 00            [24] 1371 	pop	ar0
      000589 D0 01            [24] 1372 	pop	ar1
      00058B D0 02            [24] 1373 	pop	ar2
      00058D D0 06            [24] 1374 	pop	ar6
                                   1375 ;	walk.c:110: if (!stpop(&cur)) goto term;
      00058F C0 00            [24] 1376 	push	ar0
      000591 E5*00            [12] 1377 	mov	a,_bp
      000593 24 05            [12] 1378 	add	a,#0x05
      000595 F8               [12] 1379 	mov	r0,a
      000596 86 04            [24] 1380 	mov	ar4,@r0
      000598 7D 00            [12] 1381 	mov	r5,#0x00
      00059A 7F 40            [12] 1382 	mov	r7,#0x40
      00059C D0 00            [24] 1383 	pop	ar0
      00059E 8C 82            [24] 1384 	mov	dpl,r4
      0005A0 8D 83            [24] 1385 	mov	dph,r5
      0005A2 8F F0            [24] 1386 	mov	b,r7
      0005A4 C0 06            [24] 1387 	push	ar6
      0005A6 C0 02            [24] 1388 	push	ar2
      0005A8 C0 01            [24] 1389 	push	ar1
      0005AA C0 00            [24] 1390 	push	ar0
      0005AC 12r07r63         [24] 1391 	lcall	_stpop
      0005AF E5 82            [12] 1392 	mov	a,dpl
      0005B1 85 83 F0         [24] 1393 	mov	b,dph
      0005B4 D0 00            [24] 1394 	pop	ar0
      0005B6 D0 01            [24] 1395 	pop	ar1
      0005B8 D0 02            [24] 1396 	pop	ar2
      0005BA D0 06            [24] 1397 	pop	ar6
      0005BC 45 F0            [12] 1398 	orl	a,b
      0005BE 60 03            [24] 1399 	jz	00237$
      0005C0 02r01r17         [24] 1400 	ljmp	00146$
      0005C3                       1401 00237$:
                                   1402 ;	walk.c:114: return;
                                   1403 ;	walk.c:115: }
      0005C3 85*00 81         [24] 1404 	mov	sp,_bp
      0005C6 D0*00            [24] 1405 	pop	_bp
      0005C8 22               [24] 1406 	ret
                                   1407 ;------------------------------------------------------------
                                   1408 ;Allocation info for local variables in function 'main'
                                   1409 ;------------------------------------------------------------
                                   1410 ;initial                   Allocated to stack - _bp +3
                                   1411 ;i                         Allocated to stack - _bp +7
                                   1412 ;j                         Allocated to registers r4 r5 
                                   1413 ;sloc0                     Allocated to stack - _bp +1
                                   1414 ;R                         Allocated with name '_main_R_65536_63'
                                   1415 ;------------------------------------------------------------
                                   1416 ;	walk.c:117: int main(void) {
                                   1417 ;	-----------------------------------------
                                   1418 ;	 function main
                                   1419 ;	-----------------------------------------
      0005C9                       1420 _main:
      0005C9 C0*00            [24] 1421 	push	_bp
      0005CB E5 81            [12] 1422 	mov	a,sp
      0005CD F5*00            [12] 1423 	mov	_bp,a
      0005CF 24 08            [12] 1424 	add	a,#0x08
      0005D1 F5 81            [12] 1425 	mov	sp,a
                                   1426 ;	walk.c:122: i0 = 1;
      0005D3 78r00            [12] 1427 	mov	r0,#_i0
      0005D5 76 01            [12] 1428 	mov	@r0,#0x01
                                   1429 ;	walk.c:124: IT0 = 1;
                                   1430 ;	assignBit
      0005D7 D2 88            [12] 1431 	setb	_IT0
                                   1432 ;	walk.c:125: EX0 = 1;
                                   1433 ;	assignBit
      0005D9 D2 A8            [12] 1434 	setb	_EX0
                                   1435 ;	walk.c:126: EA = 1;
                                   1436 ;	assignBit
      0005DB D2 AF            [12] 1437 	setb	_EA
                                   1438 ;	walk.c:128: srand(*R);
      0005DD 90rB4r02         [24] 1439 	mov	dptr,#_main_R_65536_63
      0005E0 E0               [24] 1440 	movx	a,@dptr
      0005E1 FE               [12] 1441 	mov	r6,a
      0005E2 A3               [24] 1442 	inc	dptr
      0005E3 E0               [24] 1443 	movx	a,@dptr
      0005E4 FF               [12] 1444 	mov	r7,a
      0005E5 8E 82            [24] 1445 	mov	dpl,r6
      0005E7 8F 83            [24] 1446 	mov	dph,r7
      0005E9 E0               [24] 1447 	movx	a,@dptr
      0005EA FE               [12] 1448 	mov	r6,a
      0005EB A3               [24] 1449 	inc	dptr
      0005EC E0               [24] 1450 	movx	a,@dptr
      0005ED FF               [12] 1451 	mov	r7,a
      0005EE 8E 82            [24] 1452 	mov	dpl,r6
      0005F0 8F 83            [24] 1453 	mov	dph,r7
      0005F2 12r00r00         [24] 1454 	lcall	_srand
                                   1455 ;	walk.c:129: stinit();
      0005F5 12r06rF9         [24] 1456 	lcall	_stinit
                                   1457 ;	walk.c:131: while (i0) {
      0005F8 E5*00            [12] 1458 	mov	a,_bp
      0005FA 24 03            [12] 1459 	add	a,#0x03
      0005FC FF               [12] 1460 	mov	r7,a
      0005FD FE               [12] 1461 	mov	r6,a
      0005FE                       1462 00103$:
      0005FE 78r00            [12] 1463 	mov	r0,#_i0
      000600 E6               [12] 1464 	mov	a,@r0
      000601 70 03            [24] 1465 	jnz	00138$
      000603 02r06rEB         [24] 1466 	ljmp	00105$
      000606                       1467 00138$:
                                   1468 ;	walk.c:132: for (i = 0; i < ROWS; i++)
      000606 E5*00            [12] 1469 	mov	a,_bp
      000608 24 07            [12] 1470 	add	a,#0x07
      00060A F8               [12] 1471 	mov	r0,a
      00060B E4               [12] 1472 	clr	a
      00060C F6               [12] 1473 	mov	@r0,a
      00060D 08               [12] 1474 	inc	r0
      00060E F6               [12] 1475 	mov	@r0,a
      00060F 7A 00            [12] 1476 	mov	r2,#0x00
      000611 7B 00            [12] 1477 	mov	r3,#0x00
                                   1478 ;	walk.c:133: for (j = 0; j < COLS; j++)
      000613                       1479 00113$:
      000613 A8*00            [24] 1480 	mov	r0,_bp
      000615 08               [12] 1481 	inc	r0
      000616 EA               [12] 1482 	mov	a,r2
      000617 24r00            [12] 1483 	add	a,#_g
      000619 F6               [12] 1484 	mov	@r0,a
      00061A EB               [12] 1485 	mov	a,r3
      00061B 34s00            [12] 1486 	addc	a,#(_g >> 8)
      00061D 08               [12] 1487 	inc	r0
      00061E F6               [12] 1488 	mov	@r0,a
      00061F 7C 00            [12] 1489 	mov	r4,#0x00
      000621 7D 00            [12] 1490 	mov	r5,#0x00
      000623                       1491 00106$:
                                   1492 ;	walk.c:134: g[i][j] = 0x55;
      000623 A8*00            [24] 1493 	mov	r0,_bp
      000625 08               [12] 1494 	inc	r0
      000626 EC               [12] 1495 	mov	a,r4
      000627 26               [12] 1496 	add	a,@r0
      000628 F5 82            [12] 1497 	mov	dpl,a
      00062A ED               [12] 1498 	mov	a,r5
      00062B 08               [12] 1499 	inc	r0
      00062C 36               [12] 1500 	addc	a,@r0
      00062D F5 83            [12] 1501 	mov	dph,a
      00062F 74 55            [12] 1502 	mov	a,#0x55
      000631 F0               [24] 1503 	movx	@dptr,a
                                   1504 ;	walk.c:133: for (j = 0; j < COLS; j++)
      000632 0C               [12] 1505 	inc	r4
      000633 BC 00 01         [24] 1506 	cjne	r4,#0x00,00139$
      000636 0D               [12] 1507 	inc	r5
      000637                       1508 00139$:
      000637 C3               [12] 1509 	clr	c
      000638 EC               [12] 1510 	mov	a,r4
      000639 94 C0            [12] 1511 	subb	a,#0xc0
      00063B ED               [12] 1512 	mov	a,r5
      00063C 64 80            [12] 1513 	xrl	a,#0x80
      00063E 94 80            [12] 1514 	subb	a,#0x80
      000640 40 E1            [24] 1515 	jc	00106$
                                   1516 ;	walk.c:132: for (i = 0; i < ROWS; i++)
      000642 74 C0            [12] 1517 	mov	a,#0xc0
      000644 2A               [12] 1518 	add	a,r2
      000645 FA               [12] 1519 	mov	r2,a
      000646 E4               [12] 1520 	clr	a
      000647 3B               [12] 1521 	addc	a,r3
      000648 FB               [12] 1522 	mov	r3,a
      000649 E5*00            [12] 1523 	mov	a,_bp
      00064B 24 07            [12] 1524 	add	a,#0x07
      00064D F8               [12] 1525 	mov	r0,a
      00064E 06               [12] 1526 	inc	@r0
      00064F B6 00 02         [24] 1527 	cjne	@r0,#0x00,00141$
      000652 08               [12] 1528 	inc	r0
      000653 06               [12] 1529 	inc	@r0
      000654                       1530 00141$:
      000654 E5*00            [12] 1531 	mov	a,_bp
      000656 24 07            [12] 1532 	add	a,#0x07
      000658 F8               [12] 1533 	mov	r0,a
      000659 C3               [12] 1534 	clr	c
      00065A E6               [12] 1535 	mov	a,@r0
      00065B 94 30            [12] 1536 	subb	a,#0x30
      00065D 08               [12] 1537 	inc	r0
      00065E E6               [12] 1538 	mov	a,@r0
      00065F 64 80            [12] 1539 	xrl	a,#0x80
      000661 94 80            [12] 1540 	subb	a,#0x80
      000663 40 AE            [24] 1541 	jc	00113$
                                   1542 ;	walk.c:136: puts("\033[2J");
      000665 90r00r31         [24] 1543 	mov	dptr,#___str_3
      000668 75 F0 80         [24] 1544 	mov	b,#0x80
      00066B C0 07            [24] 1545 	push	ar7
      00066D C0 06            [24] 1546 	push	ar6
      00066F 12r00r00         [24] 1547 	lcall	_puts
                                   1548 ;	walk.c:137: initial.r = rand() % ROWS;
      000672 E5*00            [12] 1549 	mov	a,_bp
      000674 24 03            [12] 1550 	add	a,#0x03
      000676 F9               [12] 1551 	mov	r1,a
      000677 C0 01            [24] 1552 	push	ar1
      000679 12r00r00         [24] 1553 	lcall	_rand
      00067C AC 82            [24] 1554 	mov	r4,dpl
      00067E AD 83            [24] 1555 	mov	r5,dph
      000680 74 30            [12] 1556 	mov	a,#0x30
      000682 C0 E0            [24] 1557 	push	acc
      000684 E4               [12] 1558 	clr	a
      000685 C0 E0            [24] 1559 	push	acc
      000687 8C 82            [24] 1560 	mov	dpl,r4
      000689 8D 83            [24] 1561 	mov	dph,r5
      00068B 12r00r00         [24] 1562 	lcall	__modsint
      00068E AC 82            [24] 1563 	mov	r4,dpl
      000690 AD 83            [24] 1564 	mov	r5,dph
      000692 15 81            [12] 1565 	dec	sp
      000694 15 81            [12] 1566 	dec	sp
      000696 D0 01            [24] 1567 	pop	ar1
      000698 D0 06            [24] 1568 	pop	ar6
      00069A D0 07            [24] 1569 	pop	ar7
      00069C A7 04            [24] 1570 	mov	@r1,ar4
      00069E 09               [12] 1571 	inc	r1
      00069F A7 05            [24] 1572 	mov	@r1,ar5
      0006A1 19               [12] 1573 	dec	r1
                                   1574 ;	walk.c:138: initial.c = rand() % COLS;
      0006A2 74 02            [12] 1575 	mov	a,#0x02
      0006A4 2F               [12] 1576 	add	a,r7
      0006A5 F9               [12] 1577 	mov	r1,a
      0006A6 C0 07            [24] 1578 	push	ar7
      0006A8 C0 06            [24] 1579 	push	ar6
      0006AA C0 01            [24] 1580 	push	ar1
      0006AC 12r00r00         [24] 1581 	lcall	_rand
      0006AF AC 82            [24] 1582 	mov	r4,dpl
      0006B1 AD 83            [24] 1583 	mov	r5,dph
      0006B3 74 C0            [12] 1584 	mov	a,#0xc0
      0006B5 C0 E0            [24] 1585 	push	acc
      0006B7 E4               [12] 1586 	clr	a
      0006B8 C0 E0            [24] 1587 	push	acc
      0006BA 8C 82            [24] 1588 	mov	dpl,r4
      0006BC 8D 83            [24] 1589 	mov	dph,r5
      0006BE 12r00r00         [24] 1590 	lcall	__modsint
      0006C1 AC 82            [24] 1591 	mov	r4,dpl
      0006C3 AD 83            [24] 1592 	mov	r5,dph
      0006C5 15 81            [12] 1593 	dec	sp
      0006C7 15 81            [12] 1594 	dec	sp
      0006C9 D0 01            [24] 1595 	pop	ar1
      0006CB D0 06            [24] 1596 	pop	ar6
      0006CD A7 04            [24] 1597 	mov	@r1,ar4
      0006CF 09               [12] 1598 	inc	r1
      0006D0 A7 05            [24] 1599 	mov	@r1,ar5
      0006D2 19               [12] 1600 	dec	r1
                                   1601 ;	walk.c:139: walk(&initial);
      0006D3 8E 03            [24] 1602 	mov	ar3,r6
      0006D5 7C 00            [12] 1603 	mov	r4,#0x00
      0006D7 7D 40            [12] 1604 	mov	r5,#0x40
      0006D9 8B 82            [24] 1605 	mov	dpl,r3
      0006DB 8C 83            [24] 1606 	mov	dph,r4
      0006DD 8D F0            [24] 1607 	mov	b,r5
      0006DF C0 06            [24] 1608 	push	ar6
      0006E1 12r00r1D         [24] 1609 	lcall	_walk
      0006E4 D0 06            [24] 1610 	pop	ar6
      0006E6 D0 07            [24] 1611 	pop	ar7
      0006E8 02r05rFE         [24] 1612 	ljmp	00103$
      0006EB                       1613 00105$:
                                   1614 ;	walk.c:142: EA = 0;
                                   1615 ;	assignBit
      0006EB C2 AF            [12] 1616 	clr	_EA
                                   1617 ;	walk.c:146: __endasm;
      0006ED 02 00 00         [24] 1618 	ljmp	0
                                   1619 ;	walk.c:148: return 0;
      0006F0 90 00 00         [24] 1620 	mov	dptr,#0x0000
                                   1621 ;	walk.c:149: }
      0006F3 85*00 81         [24] 1622 	mov	sp,_bp
      0006F6 D0*00            [24] 1623 	pop	_bp
      0006F8 22               [24] 1624 	ret
                                   1625 ;------------------------------------------------------------
                                   1626 ;Allocation info for local variables in function 'stinit'
                                   1627 ;------------------------------------------------------------
                                   1628 ;	walk.c:151: static void stinit(void) {
                                   1629 ;	-----------------------------------------
                                   1630 ;	 function stinit
                                   1631 ;	-----------------------------------------
      0006F9                       1632 _stinit:
                                   1633 ;	walk.c:152: sp = -1;
      0006F9 90rB4r00         [24] 1634 	mov	dptr,#_sp
      0006FC 74 FF            [12] 1635 	mov	a,#0xff
      0006FE F0               [24] 1636 	movx	@dptr,a
      0006FF A3               [24] 1637 	inc	dptr
      000700 F0               [24] 1638 	movx	@dptr,a
                                   1639 ;	walk.c:153: return;
                                   1640 ;	walk.c:154: }
      000701 22               [24] 1641 	ret
                                   1642 ;------------------------------------------------------------
                                   1643 ;Allocation info for local variables in function 'stpush'
                                   1644 ;------------------------------------------------------------
                                   1645 ;t                         Allocated to registers r5 r6 r7 
                                   1646 ;------------------------------------------------------------
                                   1647 ;	walk.c:156: static int stpush(struct node *t) {
                                   1648 ;	-----------------------------------------
                                   1649 ;	 function stpush
                                   1650 ;	-----------------------------------------
      000702                       1651 _stpush:
      000702 AD 82            [24] 1652 	mov	r5,dpl
      000704 AE 83            [24] 1653 	mov	r6,dph
      000706 AF F0            [24] 1654 	mov	r7,b
                                   1655 ;	walk.c:157: if (sp == (SMAX - 1)) return 0;
      000708 90rB4r00         [24] 1656 	mov	dptr,#_sp
      00070B E0               [24] 1657 	movx	a,@dptr
      00070C FB               [12] 1658 	mov	r3,a
      00070D A3               [24] 1659 	inc	dptr
      00070E E0               [24] 1660 	movx	a,@dptr
      00070F FC               [12] 1661 	mov	r4,a
      000710 BB FF 07         [24] 1662 	cjne	r3,#0xff,00102$
      000713 BC 23 04         [24] 1663 	cjne	r4,#0x23,00102$
      000716 90 00 00         [24] 1664 	mov	dptr,#0x0000
      000719 22               [24] 1665 	ret
      00071A                       1666 00102$:
                                   1667 ;	walk.c:158: sp++;
      00071A 90rB4r00         [24] 1668 	mov	dptr,#_sp
      00071D 74 01            [12] 1669 	mov	a,#0x01
      00071F 2B               [12] 1670 	add	a,r3
      000720 F0               [24] 1671 	movx	@dptr,a
      000721 E4               [12] 1672 	clr	a
      000722 3C               [12] 1673 	addc	a,r4
      000723 A3               [24] 1674 	inc	dptr
      000724 F0               [24] 1675 	movx	@dptr,a
                                   1676 ;	walk.c:159: stack[sp] = *t;
      000725 90rB4r00         [24] 1677 	mov	dptr,#_sp
      000728 E0               [24] 1678 	movx	a,@dptr
      000729 FB               [12] 1679 	mov	r3,a
      00072A A3               [24] 1680 	inc	dptr
      00072B E0               [24] 1681 	movx	a,@dptr
      00072C FC               [12] 1682 	mov	r4,a
      00072D EB               [12] 1683 	mov	a,r3
      00072E 2B               [12] 1684 	add	a,r3
      00072F FB               [12] 1685 	mov	r3,a
      000730 EC               [12] 1686 	mov	a,r4
      000731 33               [12] 1687 	rlc	a
      000732 FC               [12] 1688 	mov	r4,a
      000733 EB               [12] 1689 	mov	a,r3
      000734 2B               [12] 1690 	add	a,r3
      000735 FB               [12] 1691 	mov	r3,a
      000736 EC               [12] 1692 	mov	a,r4
      000737 33               [12] 1693 	rlc	a
      000738 FC               [12] 1694 	mov	r4,a
      000739 EB               [12] 1695 	mov	a,r3
      00073A 24r00            [12] 1696 	add	a,#_stack
      00073C FB               [12] 1697 	mov	r3,a
      00073D EC               [12] 1698 	mov	a,r4
      00073E 34s24            [12] 1699 	addc	a,#(_stack >> 8)
      000740 FC               [12] 1700 	mov	r4,a
      000741 7A 00            [12] 1701 	mov	r2,#0x00
      000743 74 04            [12] 1702 	mov	a,#0x04
      000745 C0 E0            [24] 1703 	push	acc
      000747 E4               [12] 1704 	clr	a
      000748 C0 E0            [24] 1705 	push	acc
      00074A C0 05            [24] 1706 	push	ar5
      00074C C0 06            [24] 1707 	push	ar6
      00074E C0 07            [24] 1708 	push	ar7
      000750 8B 82            [24] 1709 	mov	dpl,r3
      000752 8C 83            [24] 1710 	mov	dph,r4
      000754 8A F0            [24] 1711 	mov	b,r2
      000756 12r00r00         [24] 1712 	lcall	___memcpy
      000759 E5 81            [12] 1713 	mov	a,sp
      00075B 24 FB            [12] 1714 	add	a,#0xfb
      00075D F5 81            [12] 1715 	mov	sp,a
                                   1716 ;	walk.c:160: return 1;
      00075F 90 00 01         [24] 1717 	mov	dptr,#0x0001
                                   1718 ;	walk.c:161: }
      000762 22               [24] 1719 	ret
                                   1720 ;------------------------------------------------------------
                                   1721 ;Allocation info for local variables in function 'stpop'
                                   1722 ;------------------------------------------------------------
                                   1723 ;t                         Allocated to registers r5 r6 r7 
                                   1724 ;------------------------------------------------------------
                                   1725 ;	walk.c:163: static int stpop(struct node *t) {
                                   1726 ;	-----------------------------------------
                                   1727 ;	 function stpop
                                   1728 ;	-----------------------------------------
      000763                       1729 _stpop:
      000763 AD 82            [24] 1730 	mov	r5,dpl
      000765 AE 83            [24] 1731 	mov	r6,dph
      000767 AF F0            [24] 1732 	mov	r7,b
                                   1733 ;	walk.c:164: if (sp == -1) return 0;
      000769 90rB4r00         [24] 1734 	mov	dptr,#_sp
      00076C E0               [24] 1735 	movx	a,@dptr
      00076D FB               [12] 1736 	mov	r3,a
      00076E A3               [24] 1737 	inc	dptr
      00076F E0               [24] 1738 	movx	a,@dptr
      000770 FC               [12] 1739 	mov	r4,a
      000771 BB FF 07         [24] 1740 	cjne	r3,#0xff,00102$
      000774 BC FF 04         [24] 1741 	cjne	r4,#0xff,00102$
      000777 90 00 00         [24] 1742 	mov	dptr,#0x0000
      00077A 22               [24] 1743 	ret
      00077B                       1744 00102$:
                                   1745 ;	walk.c:165: *t = stack[sp];
      00077B EB               [12] 1746 	mov	a,r3
      00077C 2B               [12] 1747 	add	a,r3
      00077D FB               [12] 1748 	mov	r3,a
      00077E EC               [12] 1749 	mov	a,r4
      00077F 33               [12] 1750 	rlc	a
      000780 FC               [12] 1751 	mov	r4,a
      000781 EB               [12] 1752 	mov	a,r3
      000782 2B               [12] 1753 	add	a,r3
      000783 FB               [12] 1754 	mov	r3,a
      000784 EC               [12] 1755 	mov	a,r4
      000785 33               [12] 1756 	rlc	a
      000786 FC               [12] 1757 	mov	r4,a
      000787 EB               [12] 1758 	mov	a,r3
      000788 24r00            [12] 1759 	add	a,#_stack
      00078A FB               [12] 1760 	mov	r3,a
      00078B EC               [12] 1761 	mov	a,r4
      00078C 34s24            [12] 1762 	addc	a,#(_stack >> 8)
      00078E FC               [12] 1763 	mov	r4,a
      00078F 7A 00            [12] 1764 	mov	r2,#0x00
      000791 74 04            [12] 1765 	mov	a,#0x04
      000793 C0 E0            [24] 1766 	push	acc
      000795 E4               [12] 1767 	clr	a
      000796 C0 E0            [24] 1768 	push	acc
      000798 C0 03            [24] 1769 	push	ar3
      00079A C0 04            [24] 1770 	push	ar4
      00079C C0 02            [24] 1771 	push	ar2
      00079E 8D 82            [24] 1772 	mov	dpl,r5
      0007A0 8E 83            [24] 1773 	mov	dph,r6
      0007A2 8F F0            [24] 1774 	mov	b,r7
      0007A4 12r00r00         [24] 1775 	lcall	___memcpy
      0007A7 E5 81            [12] 1776 	mov	a,sp
      0007A9 24 FB            [12] 1777 	add	a,#0xfb
      0007AB F5 81            [12] 1778 	mov	sp,a
                                   1779 ;	walk.c:166: sp--;
      0007AD 90rB4r00         [24] 1780 	mov	dptr,#_sp
      0007B0 E0               [24] 1781 	movx	a,@dptr
      0007B1 24 FF            [12] 1782 	add	a,#0xff
      0007B3 FE               [12] 1783 	mov	r6,a
      0007B4 A3               [24] 1784 	inc	dptr
      0007B5 E0               [24] 1785 	movx	a,@dptr
      0007B6 34 FF            [12] 1786 	addc	a,#0xff
      0007B8 FF               [12] 1787 	mov	r7,a
      0007B9 90rB4r00         [24] 1788 	mov	dptr,#_sp
      0007BC EE               [12] 1789 	mov	a,r6
      0007BD F0               [24] 1790 	movx	@dptr,a
      0007BE EF               [12] 1791 	mov	a,r7
      0007BF A3               [24] 1792 	inc	dptr
      0007C0 F0               [24] 1793 	movx	@dptr,a
                                   1794 ;	walk.c:167: return 1;
      0007C1 90 00 01         [24] 1795 	mov	dptr,#0x0001
                                   1796 ;	walk.c:168: }
      0007C4 22               [24] 1797 	ret
                                   1798 	.area CSEG    (CODE)
                                   1799 	.area CONST   (CODE)
      000000                       1800 _neigh:
      000000 FF FF                 1801 	.byte #0xff, #0xff	; -1
      000002 00 00                 1802 	.byte #0x00, #0x00	;  0
      000004 00 00                 1803 	.byte #0x00, #0x00	;  0
      000006 FF FF                 1804 	.byte #0xff, #0xff	; -1
      000008 00 00                 1805 	.byte #0x00, #0x00	;  0
      00000A 01 00                 1806 	.byte #0x01, #0x00	;  1
      00000C 01 00                 1807 	.byte #0x01, #0x00	;  1
      00000E 00 00                 1808 	.byte #0x00, #0x00	;  0
                                   1809 	.area CONST   (CODE)
      000010                       1810 ___str_0:
      000010 1B                    1811 	.db 0x1b
      000011 5B 25 64 3B 25 64 48  1812 	.ascii "[%d;%dHo"
             6F
      000019 00                    1813 	.db 0x00
                                   1814 	.area CSEG    (CODE)
                                   1815 	.area CONST   (CODE)
      00001A                       1816 ___str_1:
      00001A 4D 65 6D 6F 72 79 20  1817 	.ascii "Memory error"
             65 72 72 6F 72
      000026 00                    1818 	.db 0x00
                                   1819 	.area CSEG    (CODE)
                                   1820 	.area CONST   (CODE)
      000027                       1821 ___str_2:
      000027 1B                    1822 	.db 0x1b
      000028 5B 25 64 3B 25 64 48  1823 	.ascii "[%d;%dH."
             2E
      000030 00                    1824 	.db 0x00
                                   1825 	.area CSEG    (CODE)
                                   1826 	.area CONST   (CODE)
      000031                       1827 ___str_3:
      000031 1B                    1828 	.db 0x1b
      000032 5B 32 4A              1829 	.ascii "[2J"
      000035 00                    1830 	.db 0x00
                                   1831 	.area CSEG    (CODE)
                                   1832 	.area XINIT   (CODE)
                                   1833 	.area CABS    (ABS,CODE)
