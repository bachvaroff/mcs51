                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
      000000                        319 _g:
      000000                        320 	.ds 9216
      002400                        321 _stack:
      002400                        322 	.ds 36864
      00B400                        323 _sp:
      00B400                        324 	.ds 2
      00B402                        325 _main_R_65536_65:
      00B402                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  351 	ljmp	_int0
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 ;------------------------------------------------------------
                                    366 ;Allocation info for local variables in function 'main'
                                    367 ;------------------------------------------------------------
                                    368 ;initial                   Allocated to stack - _bp +3
                                    369 ;i                         Allocated to stack - _bp +7
                                    370 ;j                         Allocated to registers r4 r5 
                                    371 ;sloc0                     Allocated to stack - _bp +1
                                    372 ;R                         Allocated with name '_main_R_65536_65'
                                    373 ;------------------------------------------------------------
                                    374 ;	walk.c:137: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  375 	mov	dptr,#_main_R_65536_65
      000003 74 FE            [12]  376 	mov	a,#0xfe
      000005 F0               [24]  377 	movx	@dptr,a
      000006 04               [12]  378 	inc	a
      000007 A3               [24]  379 	inc	dptr
      000008 F0               [24]  380 	movx	@dptr,a
                                    381 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  382 	ljmp	__sdcc_program_startup
                                    383 ;--------------------------------------------------------
                                    384 ; Home
                                    385 ;--------------------------------------------------------
                                    386 	.area HOME    (CODE)
                                    387 	.area HOME    (CODE)
      000006                        388 __sdcc_program_startup:
      000006 02r06rF2         [24]  389 	ljmp	_main
                                    390 ;	return from main will return to caller
                                    391 ;--------------------------------------------------------
                                    392 ; code
                                    393 ;--------------------------------------------------------
                                    394 	.area CSEG    (CODE)
                                    395 ;------------------------------------------------------------
                                    396 ;Allocation info for local variables in function 'putchar'
                                    397 ;------------------------------------------------------------
                                    398 ;c                         Allocated to registers 
                                    399 ;------------------------------------------------------------
                                    400 ;	walk.c:8: int putchar(int c) __naked {
                                    401 ;	-----------------------------------------
                                    402 ;	 function putchar
                                    403 ;	-----------------------------------------
      000000                        404 _putchar:
                                    405 ;	naked function: no prologue.
                                    406 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  407 	mov	a, dpl
      000002 02 00 30         [24]  408 	ljmp	0x0030
                                    409 ;	walk.c:14: }
                                    410 ;	naked function: no epilogue.
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'getchar'
                                    413 ;------------------------------------------------------------
                                    414 ;	walk.c:16: int getchar(void) __naked {
                                    415 ;	-----------------------------------------
                                    416 ;	 function getchar
                                    417 ;	-----------------------------------------
      000005                        418 _getchar:
                                    419 ;	naked function: no prologue.
                                    420 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  421 	lcall	0x0032
      000008 F5 82            [12]  422 	mov	dpl, a
      00000A 75 83 00         [24]  423 	mov	dph, #0
      00000D 22               [24]  424 	ret
                                    425 ;	walk.c:23: }
                                    426 ;	naked function: no epilogue.
                                    427 ;------------------------------------------------------------
                                    428 ;Allocation info for local variables in function 'int0'
                                    429 ;------------------------------------------------------------
                                    430 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    431 ;	-----------------------------------------
                                    432 ;	 function int0
                                    433 ;	-----------------------------------------
      00000E                        434 _int0:
                           00000F   435 	ar7 = 0x0f
                           00000E   436 	ar6 = 0x0e
                           00000D   437 	ar5 = 0x0d
                           00000C   438 	ar4 = 0x0c
                           00000B   439 	ar3 = 0x0b
                           00000A   440 	ar2 = 0x0a
                           000009   441 	ar1 = 0x09
                           000008   442 	ar0 = 0x08
      00000E C0 D0            [24]  443 	push	psw
      000010 75 D0 08         [24]  444 	mov	psw,#0x08
                                    445 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  446 	mov	r0,#_i0
      000015 76 00            [12]  447 	mov	@r0,#0x00
                                    448 ;	walk.c:29: }
      000017 D0 D0            [24]  449 	pop	psw
      000019 32               [24]  450 	reti
                                    451 ;	eliminated unneeded push/pop dpl
                                    452 ;	eliminated unneeded push/pop dph
                                    453 ;	eliminated unneeded push/pop b
                                    454 ;	eliminated unneeded push/pop acc
                                    455 ;------------------------------------------------------------
                                    456 ;Allocation info for local variables in function 'reset'
                                    457 ;------------------------------------------------------------
                                    458 ;	walk.c:31: static void reset(void) __naked {
                                    459 ;	-----------------------------------------
                                    460 ;	 function reset
                                    461 ;	-----------------------------------------
      00001A                        462 _reset:
                                    463 ;	naked function: no prologue.
                                    464 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  465 	orl	pcon, #2
                                    466 ;	walk.c:35: }
                                    467 ;	naked function: no epilogue.
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'update'
                                    470 ;------------------------------------------------------------
                                    471 ;cur                       Allocated to stack - _bp -5
                                    472 ;j                         Allocated to stack - _bp -7
                                    473 ;t                         Allocated to stack - _bp +1
                                    474 ;sloc0                     Allocated to stack - _bp +4
                                    475 ;sloc1                     Allocated to stack - _bp +6
                                    476 ;sloc2                     Allocated to stack - _bp +8
                                    477 ;------------------------------------------------------------
                                    478 ;	walk.c:74: static void update(struct node *t, struct node *cur, int j) {
                                    479 ;	-----------------------------------------
                                    480 ;	 function update
                                    481 ;	-----------------------------------------
      00001D                        482 _update:
                           000007   483 	ar7 = 0x07
                           000006   484 	ar6 = 0x06
                           000005   485 	ar5 = 0x05
                           000004   486 	ar4 = 0x04
                           000003   487 	ar3 = 0x03
                           000002   488 	ar2 = 0x02
                           000001   489 	ar1 = 0x01
                           000000   490 	ar0 = 0x00
      00001D C0*00            [24]  491 	push	_bp
      00001F 85 81*00         [24]  492 	mov	_bp,sp
      000022 C0 82            [24]  493 	push	dpl
      000024 C0 83            [24]  494 	push	dph
      000026 C0 F0            [24]  495 	push	b
      000028 E5 81            [12]  496 	mov	a,sp
      00002A 24 07            [12]  497 	add	a,#0x07
      00002C F5 81            [12]  498 	mov	sp,a
                                    499 ;	walk.c:75: t->r = cur->r + neigh[j].r;
      00002E E5*00            [12]  500 	mov	a,_bp
      000030 24 FB            [12]  501 	add	a,#0xfb
      000032 F8               [12]  502 	mov	r0,a
      000033 86 02            [24]  503 	mov	ar2,@r0
      000035 08               [12]  504 	inc	r0
      000036 86 03            [24]  505 	mov	ar3,@r0
      000038 08               [12]  506 	inc	r0
      000039 86 04            [24]  507 	mov	ar4,@r0
      00003B 8A 82            [24]  508 	mov	dpl,r2
      00003D 8B 83            [24]  509 	mov	dph,r3
      00003F 8C F0            [24]  510 	mov	b,r4
      000041 E5*00            [12]  511 	mov	a,_bp
      000043 24 04            [12]  512 	add	a,#0x04
      000045 F8               [12]  513 	mov	r0,a
      000046 12r00r00         [24]  514 	lcall	__gptrget
      000049 F6               [12]  515 	mov	@r0,a
      00004A A3               [24]  516 	inc	dptr
      00004B 12r00r00         [24]  517 	lcall	__gptrget
      00004E 08               [12]  518 	inc	r0
      00004F F6               [12]  519 	mov	@r0,a
      000050 E5*00            [12]  520 	mov	a,_bp
      000052 24 F9            [12]  521 	add	a,#0xf9
      000054 F8               [12]  522 	mov	r0,a
      000055 E5*00            [12]  523 	mov	a,_bp
      000057 24 06            [12]  524 	add	a,#0x06
      000059 F9               [12]  525 	mov	r1,a
      00005A E6               [12]  526 	mov	a,@r0
      00005B 26               [12]  527 	add	a,@r0
      00005C F7               [12]  528 	mov	@r1,a
      00005D 08               [12]  529 	inc	r0
      00005E E6               [12]  530 	mov	a,@r0
      00005F 33               [12]  531 	rlc	a
      000060 09               [12]  532 	inc	r1
      000061 F7               [12]  533 	mov	@r1,a
      000062 19               [12]  534 	dec	r1
      000063 E7               [12]  535 	mov	a,@r1
      000064 27               [12]  536 	add	a,@r1
      000065 F7               [12]  537 	mov	@r1,a
      000066 09               [12]  538 	inc	r1
      000067 E7               [12]  539 	mov	a,@r1
      000068 33               [12]  540 	rlc	a
      000069 F7               [12]  541 	mov	@r1,a
      00006A E5*00            [12]  542 	mov	a,_bp
      00006C 24 06            [12]  543 	add	a,#0x06
      00006E F8               [12]  544 	mov	r0,a
      00006F E6               [12]  545 	mov	a,@r0
      000070 24r00            [12]  546 	add	a,#_neigh
      000072 F5 82            [12]  547 	mov	dpl,a
      000074 08               [12]  548 	inc	r0
      000075 E6               [12]  549 	mov	a,@r0
      000076 34s00            [12]  550 	addc	a,#(_neigh >> 8)
      000078 F5 83            [12]  551 	mov	dph,a
      00007A E4               [12]  552 	clr	a
      00007B 93               [24]  553 	movc	a,@a+dptr
      00007C FF               [12]  554 	mov	r7,a
      00007D A3               [24]  555 	inc	dptr
      00007E E4               [12]  556 	clr	a
      00007F 93               [24]  557 	movc	a,@a+dptr
      000080 FE               [12]  558 	mov	r6,a
      000081 E5*00            [12]  559 	mov	a,_bp
      000083 24 04            [12]  560 	add	a,#0x04
      000085 F8               [12]  561 	mov	r0,a
      000086 EF               [12]  562 	mov	a,r7
      000087 26               [12]  563 	add	a,@r0
      000088 FF               [12]  564 	mov	r7,a
      000089 EE               [12]  565 	mov	a,r6
      00008A 08               [12]  566 	inc	r0
      00008B 36               [12]  567 	addc	a,@r0
      00008C FE               [12]  568 	mov	r6,a
      00008D A8*00            [24]  569 	mov	r0,_bp
      00008F 08               [12]  570 	inc	r0
      000090 86 82            [24]  571 	mov	dpl,@r0
      000092 08               [12]  572 	inc	r0
      000093 86 83            [24]  573 	mov	dph,@r0
      000095 08               [12]  574 	inc	r0
      000096 86 F0            [24]  575 	mov	b,@r0
      000098 EF               [12]  576 	mov	a,r7
      000099 12r00r00         [24]  577 	lcall	__gptrput
      00009C A3               [24]  578 	inc	dptr
      00009D EE               [12]  579 	mov	a,r6
      00009E 12r00r00         [24]  580 	lcall	__gptrput
                                    581 ;	walk.c:76: t->c = cur->c + neigh[j].c;
      0000A1 A8*00            [24]  582 	mov	r0,_bp
      0000A3 08               [12]  583 	inc	r0
      0000A4 E5*00            [12]  584 	mov	a,_bp
      0000A6 24 08            [12]  585 	add	a,#0x08
      0000A8 F9               [12]  586 	mov	r1,a
      0000A9 74 02            [12]  587 	mov	a,#0x02
      0000AB 26               [12]  588 	add	a,@r0
      0000AC F7               [12]  589 	mov	@r1,a
      0000AD E4               [12]  590 	clr	a
      0000AE 08               [12]  591 	inc	r0
      0000AF 36               [12]  592 	addc	a,@r0
      0000B0 09               [12]  593 	inc	r1
      0000B1 F7               [12]  594 	mov	@r1,a
      0000B2 08               [12]  595 	inc	r0
      0000B3 09               [12]  596 	inc	r1
      0000B4 E6               [12]  597 	mov	a,@r0
      0000B5 F7               [12]  598 	mov	@r1,a
      0000B6 74 02            [12]  599 	mov	a,#0x02
      0000B8 2A               [12]  600 	add	a,r2
      0000B9 FA               [12]  601 	mov	r2,a
      0000BA E4               [12]  602 	clr	a
      0000BB 3B               [12]  603 	addc	a,r3
      0000BC FB               [12]  604 	mov	r3,a
      0000BD 8A 82            [24]  605 	mov	dpl,r2
      0000BF 8B 83            [24]  606 	mov	dph,r3
      0000C1 8C F0            [24]  607 	mov	b,r4
      0000C3 12r00r00         [24]  608 	lcall	__gptrget
      0000C6 FA               [12]  609 	mov	r2,a
      0000C7 A3               [24]  610 	inc	dptr
      0000C8 12r00r00         [24]  611 	lcall	__gptrget
      0000CB FB               [12]  612 	mov	r3,a
      0000CC E5*00            [12]  613 	mov	a,_bp
      0000CE 24 06            [12]  614 	add	a,#0x06
      0000D0 F8               [12]  615 	mov	r0,a
      0000D1 E6               [12]  616 	mov	a,@r0
      0000D2 24r00            [12]  617 	add	a,#_neigh
      0000D4 FC               [12]  618 	mov	r4,a
      0000D5 08               [12]  619 	inc	r0
      0000D6 E6               [12]  620 	mov	a,@r0
      0000D7 34s00            [12]  621 	addc	a,#(_neigh >> 8)
      0000D9 FD               [12]  622 	mov	r5,a
      0000DA 8C 82            [24]  623 	mov	dpl,r4
      0000DC 8D 83            [24]  624 	mov	dph,r5
      0000DE A3               [24]  625 	inc	dptr
      0000DF A3               [24]  626 	inc	dptr
      0000E0 E4               [12]  627 	clr	a
      0000E1 93               [24]  628 	movc	a,@a+dptr
      0000E2 FC               [12]  629 	mov	r4,a
      0000E3 A3               [24]  630 	inc	dptr
      0000E4 E4               [12]  631 	clr	a
      0000E5 93               [24]  632 	movc	a,@a+dptr
      0000E6 FD               [12]  633 	mov	r5,a
      0000E7 EC               [12]  634 	mov	a,r4
      0000E8 2A               [12]  635 	add	a,r2
      0000E9 FA               [12]  636 	mov	r2,a
      0000EA ED               [12]  637 	mov	a,r5
      0000EB 3B               [12]  638 	addc	a,r3
      0000EC FB               [12]  639 	mov	r3,a
      0000ED E5*00            [12]  640 	mov	a,_bp
      0000EF 24 08            [12]  641 	add	a,#0x08
      0000F1 F8               [12]  642 	mov	r0,a
      0000F2 86 82            [24]  643 	mov	dpl,@r0
      0000F4 08               [12]  644 	inc	r0
      0000F5 86 83            [24]  645 	mov	dph,@r0
      0000F7 08               [12]  646 	inc	r0
      0000F8 86 F0            [24]  647 	mov	b,@r0
      0000FA EA               [12]  648 	mov	a,r2
      0000FB 12r00r00         [24]  649 	lcall	__gptrput
      0000FE A3               [24]  650 	inc	dptr
      0000FF EB               [12]  651 	mov	a,r3
      000100 12r00r00         [24]  652 	lcall	__gptrput
                                    653 ;	walk.c:78: if (t->r < 0) t->r += ROWS;
      000103 A8*00            [24]  654 	mov	r0,_bp
      000105 08               [12]  655 	inc	r0
      000106 86 82            [24]  656 	mov	dpl,@r0
      000108 08               [12]  657 	inc	r0
      000109 86 83            [24]  658 	mov	dph,@r0
      00010B 08               [12]  659 	inc	r0
      00010C 86 F0            [24]  660 	mov	b,@r0
      00010E 12r00r00         [24]  661 	lcall	__gptrget
      000111 FD               [12]  662 	mov	r5,a
      000112 A3               [24]  663 	inc	dptr
      000113 12r00r00         [24]  664 	lcall	__gptrget
      000116 FC               [12]  665 	mov	r4,a
      000117 EE               [12]  666 	mov	a,r6
      000118 30 E7 1D         [24]  667 	jnb	acc.7,00104$
      00011B 74 30            [12]  668 	mov	a,#0x30
      00011D 2D               [12]  669 	add	a,r5
      00011E FF               [12]  670 	mov	r7,a
      00011F E4               [12]  671 	clr	a
      000120 3C               [12]  672 	addc	a,r4
      000121 FE               [12]  673 	mov	r6,a
      000122 A8*00            [24]  674 	mov	r0,_bp
      000124 08               [12]  675 	inc	r0
      000125 86 82            [24]  676 	mov	dpl,@r0
      000127 08               [12]  677 	inc	r0
      000128 86 83            [24]  678 	mov	dph,@r0
      00012A 08               [12]  679 	inc	r0
      00012B 86 F0            [24]  680 	mov	b,@r0
      00012D EF               [12]  681 	mov	a,r7
      00012E 12r00r00         [24]  682 	lcall	__gptrput
      000131 A3               [24]  683 	inc	dptr
      000132 EE               [12]  684 	mov	a,r6
      000133 12r00r00         [24]  685 	lcall	__gptrput
      000136 80 27            [24]  686 	sjmp	00105$
      000138                        687 00104$:
                                    688 ;	walk.c:79: else if (t->r >= ROWS) t->r -= ROWS;
      000138 C3               [12]  689 	clr	c
      000139 ED               [12]  690 	mov	a,r5
      00013A 94 30            [12]  691 	subb	a,#0x30
      00013C EC               [12]  692 	mov	a,r4
      00013D 64 80            [12]  693 	xrl	a,#0x80
      00013F 94 80            [12]  694 	subb	a,#0x80
      000141 40 1C            [24]  695 	jc	00105$
      000143 ED               [12]  696 	mov	a,r5
      000144 24 D0            [12]  697 	add	a,#0xd0
      000146 FD               [12]  698 	mov	r5,a
      000147 EC               [12]  699 	mov	a,r4
      000148 34 FF            [12]  700 	addc	a,#0xff
      00014A FC               [12]  701 	mov	r4,a
      00014B A8*00            [24]  702 	mov	r0,_bp
      00014D 08               [12]  703 	inc	r0
      00014E 86 82            [24]  704 	mov	dpl,@r0
      000150 08               [12]  705 	inc	r0
      000151 86 83            [24]  706 	mov	dph,@r0
      000153 08               [12]  707 	inc	r0
      000154 86 F0            [24]  708 	mov	b,@r0
      000156 ED               [12]  709 	mov	a,r5
      000157 12r00r00         [24]  710 	lcall	__gptrput
      00015A A3               [24]  711 	inc	dptr
      00015B EC               [12]  712 	mov	a,r4
      00015C 12r00r00         [24]  713 	lcall	__gptrput
      00015F                        714 00105$:
                                    715 ;	walk.c:80: if (t->c < 0) t->c += COLS;
      00015F E5*00            [12]  716 	mov	a,_bp
      000161 24 08            [12]  717 	add	a,#0x08
      000163 F8               [12]  718 	mov	r0,a
      000164 86 82            [24]  719 	mov	dpl,@r0
      000166 08               [12]  720 	inc	r0
      000167 86 83            [24]  721 	mov	dph,@r0
      000169 08               [12]  722 	inc	r0
      00016A 86 F0            [24]  723 	mov	b,@r0
      00016C 12r00r00         [24]  724 	lcall	__gptrget
      00016F A3               [24]  725 	inc	dptr
      000170 12r00r00         [24]  726 	lcall	__gptrget
      000173 30 E7 35         [24]  727 	jnb	acc.7,00109$
      000176 E5*00            [12]  728 	mov	a,_bp
      000178 24 08            [12]  729 	add	a,#0x08
      00017A F8               [12]  730 	mov	r0,a
      00017B 86 82            [24]  731 	mov	dpl,@r0
      00017D 08               [12]  732 	inc	r0
      00017E 86 83            [24]  733 	mov	dph,@r0
      000180 08               [12]  734 	inc	r0
      000181 86 F0            [24]  735 	mov	b,@r0
      000183 12r00r00         [24]  736 	lcall	__gptrget
      000186 FE               [12]  737 	mov	r6,a
      000187 A3               [24]  738 	inc	dptr
      000188 12r00r00         [24]  739 	lcall	__gptrget
      00018B FF               [12]  740 	mov	r7,a
      00018C 74 C0            [12]  741 	mov	a,#0xc0
      00018E 2E               [12]  742 	add	a,r6
      00018F FE               [12]  743 	mov	r6,a
      000190 E4               [12]  744 	clr	a
      000191 3F               [12]  745 	addc	a,r7
      000192 FF               [12]  746 	mov	r7,a
      000193 E5*00            [12]  747 	mov	a,_bp
      000195 24 08            [12]  748 	add	a,#0x08
      000197 F8               [12]  749 	mov	r0,a
      000198 86 82            [24]  750 	mov	dpl,@r0
      00019A 08               [12]  751 	inc	r0
      00019B 86 83            [24]  752 	mov	dph,@r0
      00019D 08               [12]  753 	inc	r0
      00019E 86 F0            [24]  754 	mov	b,@r0
      0001A0 EE               [12]  755 	mov	a,r6
      0001A1 12r00r00         [24]  756 	lcall	__gptrput
      0001A4 A3               [24]  757 	inc	dptr
      0001A5 EF               [12]  758 	mov	a,r7
      0001A6 12r00r00         [24]  759 	lcall	__gptrput
      0001A9 80 55            [24]  760 	sjmp	00110$
      0001AB                        761 00109$:
                                    762 ;	walk.c:81: else if (t->c >= COLS) t->c -= COLS;
      0001AB E5*00            [12]  763 	mov	a,_bp
      0001AD 24 08            [12]  764 	add	a,#0x08
      0001AF F8               [12]  765 	mov	r0,a
      0001B0 86 82            [24]  766 	mov	dpl,@r0
      0001B2 08               [12]  767 	inc	r0
      0001B3 86 83            [24]  768 	mov	dph,@r0
      0001B5 08               [12]  769 	inc	r0
      0001B6 86 F0            [24]  770 	mov	b,@r0
      0001B8 12r00r00         [24]  771 	lcall	__gptrget
      0001BB FE               [12]  772 	mov	r6,a
      0001BC A3               [24]  773 	inc	dptr
      0001BD 12r00r00         [24]  774 	lcall	__gptrget
      0001C0 FF               [12]  775 	mov	r7,a
      0001C1 C3               [12]  776 	clr	c
      0001C2 EE               [12]  777 	mov	a,r6
      0001C3 94 C0            [12]  778 	subb	a,#0xc0
      0001C5 EF               [12]  779 	mov	a,r7
      0001C6 64 80            [12]  780 	xrl	a,#0x80
      0001C8 94 80            [12]  781 	subb	a,#0x80
      0001CA 40 34            [24]  782 	jc	00110$
      0001CC E5*00            [12]  783 	mov	a,_bp
      0001CE 24 08            [12]  784 	add	a,#0x08
      0001D0 F8               [12]  785 	mov	r0,a
      0001D1 86 82            [24]  786 	mov	dpl,@r0
      0001D3 08               [12]  787 	inc	r0
      0001D4 86 83            [24]  788 	mov	dph,@r0
      0001D6 08               [12]  789 	inc	r0
      0001D7 86 F0            [24]  790 	mov	b,@r0
      0001D9 12r00r00         [24]  791 	lcall	__gptrget
      0001DC FE               [12]  792 	mov	r6,a
      0001DD A3               [24]  793 	inc	dptr
      0001DE 12r00r00         [24]  794 	lcall	__gptrget
      0001E1 FF               [12]  795 	mov	r7,a
      0001E2 EE               [12]  796 	mov	a,r6
      0001E3 24 40            [12]  797 	add	a,#0x40
      0001E5 FE               [12]  798 	mov	r6,a
      0001E6 EF               [12]  799 	mov	a,r7
      0001E7 34 FF            [12]  800 	addc	a,#0xff
      0001E9 FF               [12]  801 	mov	r7,a
      0001EA E5*00            [12]  802 	mov	a,_bp
      0001EC 24 08            [12]  803 	add	a,#0x08
      0001EE F8               [12]  804 	mov	r0,a
      0001EF 86 82            [24]  805 	mov	dpl,@r0
      0001F1 08               [12]  806 	inc	r0
      0001F2 86 83            [24]  807 	mov	dph,@r0
      0001F4 08               [12]  808 	inc	r0
      0001F5 86 F0            [24]  809 	mov	b,@r0
      0001F7 EE               [12]  810 	mov	a,r6
      0001F8 12r00r00         [24]  811 	lcall	__gptrput
      0001FB A3               [24]  812 	inc	dptr
      0001FC EF               [12]  813 	mov	a,r7
      0001FD 12r00r00         [24]  814 	lcall	__gptrput
      000200                        815 00110$:
                                    816 ;	walk.c:83: return;
                                    817 ;	walk.c:84: }
      000200 85*00 81         [24]  818 	mov	sp,_bp
      000203 D0*00            [24]  819 	pop	_bp
      000205 22               [24]  820 	ret
                                    821 ;------------------------------------------------------------
                                    822 ;Allocation info for local variables in function 'walk'
                                    823 ;------------------------------------------------------------
                                    824 ;nstart                    Allocated to registers 
                                    825 ;cur                       Allocated to stack - _bp +14
                                    826 ;t                         Allocated to stack - _bp +18
                                    827 ;j                         Allocated to stack - _bp +22
                                    828 ;f                         Allocated to stack - _bp +24
                                    829 ;sloc0                     Allocated to stack - _bp +1
                                    830 ;sloc1                     Allocated to stack - _bp +2
                                    831 ;sloc2                     Allocated to stack - _bp +3
                                    832 ;sloc3                     Allocated to stack - _bp +4
                                    833 ;sloc4                     Allocated to stack - _bp +20
                                    834 ;sloc5                     Allocated to stack - _bp +5
                                    835 ;sloc6                     Allocated to stack - _bp +6
                                    836 ;sloc7                     Allocated to stack - _bp +8
                                    837 ;sloc8                     Allocated to stack - _bp +9
                                    838 ;sloc9                     Allocated to stack - _bp +10
                                    839 ;sloc10                    Allocated to stack - _bp +13
                                    840 ;------------------------------------------------------------
                                    841 ;	walk.c:86: static void walk(struct node *nstart) {
                                    842 ;	-----------------------------------------
                                    843 ;	 function walk
                                    844 ;	-----------------------------------------
      000206                        845 _walk:
      000206 C0*00            [24]  846 	push	_bp
      000208 E5 81            [12]  847 	mov	a,sp
      00020A F5*00            [12]  848 	mov	_bp,a
      00020C 24 19            [12]  849 	add	a,#0x19
      00020E F5 81            [12]  850 	mov	sp,a
      000210 AD 82            [24]  851 	mov	r5,dpl
      000212 AE 83            [24]  852 	mov	r6,dph
      000214 AF F0            [24]  853 	mov	r7,b
                                    854 ;	walk.c:90: cur = *nstart;
      000216 E5*00            [12]  855 	mov	a,_bp
      000218 24 0E            [12]  856 	add	a,#0x0e
      00021A F9               [12]  857 	mov	r1,a
      00021B FA               [12]  858 	mov	r2,a
      00021C 7B 00            [12]  859 	mov	r3,#0x00
      00021E 7C 40            [12]  860 	mov	r4,#0x40
      000220 C0 01            [24]  861 	push	ar1
      000222 74 04            [12]  862 	mov	a,#0x04
      000224 C0 E0            [24]  863 	push	acc
      000226 E4               [12]  864 	clr	a
      000227 C0 E0            [24]  865 	push	acc
      000229 C0 05            [24]  866 	push	ar5
      00022B C0 06            [24]  867 	push	ar6
      00022D C0 07            [24]  868 	push	ar7
      00022F 8A 82            [24]  869 	mov	dpl,r2
      000231 8B 83            [24]  870 	mov	dph,r3
      000233 8C F0            [24]  871 	mov	b,r4
      000235 12r00r00         [24]  872 	lcall	___memcpy
      000238 E5 81            [12]  873 	mov	a,sp
      00023A 24 FB            [12]  874 	add	a,#0xfb
      00023C F5 81            [12]  875 	mov	sp,a
      00023E D0 01            [24]  876 	pop	ar1
                                    877 ;	walk.c:92: process:
      000240 E5*00            [12]  878 	mov	a,_bp
      000242 24 09            [12]  879 	add	a,#0x09
      000244 F8               [12]  880 	mov	r0,a
      000245 A6 01            [24]  881 	mov	@r0,ar1
      000247 E5*00            [12]  882 	mov	a,_bp
      000249 24 12            [12]  883 	add	a,#0x12
      00024B F8               [12]  884 	mov	r0,a
      00024C 24 02            [12]  885 	add	a,#0x02
      00024E FE               [12]  886 	mov	r6,a
      00024F C0 00            [24]  887 	push	ar0
      000251 E5*00            [12]  888 	mov	a,_bp
      000253 24 08            [12]  889 	add	a,#0x08
      000255 F8               [12]  890 	mov	r0,a
      000256 A6 01            [24]  891 	mov	@r0,ar1
      000258 E5*00            [12]  892 	mov	a,_bp
      00025A 24 0D            [12]  893 	add	a,#0x0d
      00025C F8               [12]  894 	mov	r0,a
      00025D A6 01            [24]  895 	mov	@r0,ar1
      00025F D0 00            [24]  896 	pop	ar0
      000261 88 03            [24]  897 	mov	ar3,r0
      000263 C0 00            [24]  898 	push	ar0
      000265 E5*00            [12]  899 	mov	a,_bp
      000267 24 05            [12]  900 	add	a,#0x05
      000269 F8               [12]  901 	mov	r0,a
      00026A A6 06            [24]  902 	mov	@r0,ar6
      00026C A8*00            [24]  903 	mov	r0,_bp
      00026E 08               [12]  904 	inc	r0
      00026F A6 01            [24]  905 	mov	@r0,ar1
      000271 D0 00            [24]  906 	pop	ar0
      000273 C0 01            [24]  907 	push	ar1
      000275 A9*00            [24]  908 	mov	r1,_bp
      000277 09               [12]  909 	inc	r1
      000278 09               [12]  910 	inc	r1
      000279 A7 00            [24]  911 	mov	@r1,ar0
      00027B D0 01            [24]  912 	pop	ar1
      00027D C0 00            [24]  913 	push	ar0
      00027F E5*00            [12]  914 	mov	a,_bp
      000281 24 03            [12]  915 	add	a,#0x03
      000283 F8               [12]  916 	mov	r0,a
      000284 A6 01            [24]  917 	mov	@r0,ar1
      000286 E5*00            [12]  918 	mov	a,_bp
      000288 24 04            [12]  919 	add	a,#0x04
      00028A F8               [12]  920 	mov	r0,a
      00028B 74 02            [12]  921 	mov	a,#0x02
      00028D 29               [12]  922 	add	a,r1
      00028E F6               [12]  923 	mov	@r0,a
      00028F D0 00            [24]  924 	pop	ar0
      000291                        925 00101$:
                                    926 ;	walk.c:93: g[cur.r][cur.c] = 0xaa;
      000291 87 02            [24]  927 	mov	ar2,@r1
      000293 09               [12]  928 	inc	r1
      000294 87 05            [24]  929 	mov	ar5,@r1
      000296 19               [12]  930 	dec	r1
      000297 C0 06            [24]  931 	push	ar6
      000299 C0 03            [24]  932 	push	ar3
      00029B C0 01            [24]  933 	push	ar1
      00029D C0 00            [24]  934 	push	ar0
      00029F C0 02            [24]  935 	push	ar2
      0002A1 C0 05            [24]  936 	push	ar5
      0002A3 90 00 C0         [24]  937 	mov	dptr,#0x00c0
      0002A6 12r00r00         [24]  938 	lcall	__mulint
      0002A9 AA 82            [24]  939 	mov	r2,dpl
      0002AB AD 83            [24]  940 	mov	r5,dph
      0002AD 15 81            [12]  941 	dec	sp
      0002AF 15 81            [12]  942 	dec	sp
      0002B1 D0 00            [24]  943 	pop	ar0
      0002B3 D0 01            [24]  944 	pop	ar1
      0002B5 D0 03            [24]  945 	pop	ar3
      0002B7 D0 06            [24]  946 	pop	ar6
      0002B9 EA               [12]  947 	mov	a,r2
      0002BA 24r00            [12]  948 	add	a,#_g
      0002BC FF               [12]  949 	mov	r7,a
      0002BD ED               [12]  950 	mov	a,r5
      0002BE 34s00            [12]  951 	addc	a,#(_g >> 8)
      0002C0 FC               [12]  952 	mov	r4,a
      0002C1 C0 00            [24]  953 	push	ar0
      0002C3 E5*00            [12]  954 	mov	a,_bp
      0002C5 24 04            [12]  955 	add	a,#0x04
      0002C7 F8               [12]  956 	mov	r0,a
      0002C8 86 00            [24]  957 	mov	ar0,@r0
      0002CA 86 02            [24]  958 	mov	ar2,@r0
      0002CC 08               [12]  959 	inc	r0
      0002CD 86 05            [24]  960 	mov	ar5,@r0
      0002CF 18               [12]  961 	dec	r0
      0002D0 EA               [12]  962 	mov	a,r2
      0002D1 2F               [12]  963 	add	a,r7
      0002D2 F5 82            [12]  964 	mov	dpl,a
      0002D4 ED               [12]  965 	mov	a,r5
      0002D5 3C               [12]  966 	addc	a,r4
      0002D6 F5 83            [12]  967 	mov	dph,a
      0002D8 74 AA            [12]  968 	mov	a,#0xaa
      0002DA F0               [24]  969 	movx	@dptr,a
                                    970 ;	walk.c:94: printf("\033[%d;%dHo", cur.r + 1, cur.c + 1);
      0002DB E5*00            [12]  971 	mov	a,_bp
      0002DD 24 04            [12]  972 	add	a,#0x04
      0002DF F8               [12]  973 	mov	r0,a
      0002E0 86 00            [24]  974 	mov	ar0,@r0
      0002E2 86 02            [24]  975 	mov	ar2,@r0
      0002E4 08               [12]  976 	inc	r0
      0002E5 86 05            [24]  977 	mov	ar5,@r0
      0002E7 18               [12]  978 	dec	r0
      0002E8 D0 00            [24]  979 	pop	ar0
      0002EA 74 01            [12]  980 	mov	a,#0x01
      0002EC 2A               [12]  981 	add	a,r2
      0002ED FF               [12]  982 	mov	r7,a
      0002EE E4               [12]  983 	clr	a
      0002EF 3D               [12]  984 	addc	a,r5
      0002F0 FC               [12]  985 	mov	r4,a
      0002F1 87 02            [24]  986 	mov	ar2,@r1
      0002F3 09               [12]  987 	inc	r1
      0002F4 87 05            [24]  988 	mov	ar5,@r1
      0002F6 19               [12]  989 	dec	r1
      0002F7 0A               [12]  990 	inc	r2
      0002F8 BA 00 01         [24]  991 	cjne	r2,#0x00,00174$
      0002FB 0D               [12]  992 	inc	r5
      0002FC                        993 00174$:
      0002FC C0 06            [24]  994 	push	ar6
      0002FE C0 03            [24]  995 	push	ar3
      000300 C0 01            [24]  996 	push	ar1
      000302 C0 00            [24]  997 	push	ar0
      000304 C0 07            [24]  998 	push	ar7
      000306 C0 04            [24]  999 	push	ar4
      000308 C0 02            [24] 1000 	push	ar2
      00030A C0 05            [24] 1001 	push	ar5
      00030C 74r20            [12] 1002 	mov	a,#___str_0
      00030E C0 E0            [24] 1003 	push	acc
      000310 74s00            [12] 1004 	mov	a,#(___str_0 >> 8)
      000312 C0 E0            [24] 1005 	push	acc
      000314 74 80            [12] 1006 	mov	a,#0x80
      000316 C0 E0            [24] 1007 	push	acc
      000318 12r00r00         [24] 1008 	lcall	_printf
      00031B E5 81            [12] 1009 	mov	a,sp
      00031D 24 F9            [12] 1010 	add	a,#0xf9
      00031F F5 81            [12] 1011 	mov	sp,a
      000321 D0 00            [24] 1012 	pop	ar0
      000323 D0 01            [24] 1013 	pop	ar1
      000325 D0 03            [24] 1014 	pop	ar3
      000327 D0 06            [24] 1015 	pop	ar6
                                   1016 ;	walk.c:133: return;
                                   1017 ;	walk.c:97: for (j = 0, f = 0; j < NMAX; j++) {
      000329                       1018 00132$:
      000329 C0 00            [24] 1019 	push	ar0
      00032B E5*00            [12] 1020 	mov	a,_bp
      00032D 24 18            [12] 1021 	add	a,#0x18
      00032F F8               [12] 1022 	mov	r0,a
      000330 E4               [12] 1023 	clr	a
      000331 F6               [12] 1024 	mov	@r0,a
      000332 08               [12] 1025 	inc	r0
      000333 F6               [12] 1026 	mov	@r0,a
      000334 E5*00            [12] 1027 	mov	a,_bp
      000336 24 16            [12] 1028 	add	a,#0x16
      000338 F8               [12] 1029 	mov	r0,a
      000339 E4               [12] 1030 	clr	a
      00033A F6               [12] 1031 	mov	@r0,a
      00033B 08               [12] 1032 	inc	r0
      00033C F6               [12] 1033 	mov	@r0,a
      00033D D0 00            [24] 1034 	pop	ar0
      00033F                       1035 00125$:
      00033F C0 00            [24] 1036 	push	ar0
      000341 E5*00            [12] 1037 	mov	a,_bp
      000343 24 16            [12] 1038 	add	a,#0x16
      000345 F8               [12] 1039 	mov	r0,a
      000346 C3               [12] 1040 	clr	c
      000347 E6               [12] 1041 	mov	a,@r0
      000348 94 08            [12] 1042 	subb	a,#0x08
      00034A 08               [12] 1043 	inc	r0
      00034B E6               [12] 1044 	mov	a,@r0
      00034C 64 80            [12] 1045 	xrl	a,#0x80
      00034E 94 80            [12] 1046 	subb	a,#0x80
      000350 D0 00            [24] 1047 	pop	ar0
      000352 40 03            [24] 1048 	jc	00175$
      000354 02r04r66         [24] 1049 	ljmp	00108$
      000357                       1050 00175$:
                                   1051 ;	walk.c:98: update(&t, &cur, j);
      000357 C0 00            [24] 1052 	push	ar0
      000359 E5*00            [12] 1053 	mov	a,_bp
      00035B 24 09            [12] 1054 	add	a,#0x09
      00035D F8               [12] 1055 	mov	r0,a
      00035E C0 01            [24] 1056 	push	ar1
      000360 E5*00            [12] 1057 	mov	a,_bp
      000362 24 0A            [12] 1058 	add	a,#0x0a
      000364 F9               [12] 1059 	mov	r1,a
      000365 E6               [12] 1060 	mov	a,@r0
      000366 F7               [12] 1061 	mov	@r1,a
      000367 09               [12] 1062 	inc	r1
      000368 77 00            [12] 1063 	mov	@r1,#0x00
      00036A 09               [12] 1064 	inc	r1
      00036B 77 40            [12] 1065 	mov	@r1,#0x40
      00036D D0 01            [24] 1066 	pop	ar1
      00036F D0 00            [24] 1067 	pop	ar0
      000371 88 04            [24] 1068 	mov	ar4,r0
      000373 7D 00            [12] 1069 	mov	r5,#0x00
      000375 7F 40            [12] 1070 	mov	r7,#0x40
      000377 C0 06            [24] 1071 	push	ar6
      000379 C0 03            [24] 1072 	push	ar3
      00037B C0 01            [24] 1073 	push	ar1
      00037D C0 00            [24] 1074 	push	ar0
      00037F 85 00 F0         [24] 1075 	mov	b,ar0
      000382 E5*00            [12] 1076 	mov	a,_bp
      000384 24 16            [12] 1077 	add	a,#0x16
      000386 F8               [12] 1078 	mov	r0,a
      000387 E6               [12] 1079 	mov	a,@r0
      000388 C0 E0            [24] 1080 	push	acc
      00038A 08               [12] 1081 	inc	r0
      00038B E6               [12] 1082 	mov	a,@r0
      00038C C0 E0            [24] 1083 	push	acc
      00038E A8 F0            [24] 1084 	mov	r0,b
      000390 85 00 F0         [24] 1085 	mov	b,ar0
      000393 E5*00            [12] 1086 	mov	a,_bp
      000395 24 0A            [12] 1087 	add	a,#0x0a
      000397 F8               [12] 1088 	mov	r0,a
      000398 E6               [12] 1089 	mov	a,@r0
      000399 C0 E0            [24] 1090 	push	acc
      00039B 08               [12] 1091 	inc	r0
      00039C E6               [12] 1092 	mov	a,@r0
      00039D C0 E0            [24] 1093 	push	acc
      00039F 08               [12] 1094 	inc	r0
      0003A0 E6               [12] 1095 	mov	a,@r0
      0003A1 C0 E0            [24] 1096 	push	acc
      0003A3 8C 82            [24] 1097 	mov	dpl,r4
      0003A5 8D 83            [24] 1098 	mov	dph,r5
      0003A7 8F F0            [24] 1099 	mov	b,r7
      0003A9 12r00r1D         [24] 1100 	lcall	_update
      0003AC E5 81            [12] 1101 	mov	a,sp
      0003AE 24 FB            [12] 1102 	add	a,#0xfb
      0003B0 F5 81            [12] 1103 	mov	sp,a
      0003B2 D0 00            [24] 1104 	pop	ar0
                                   1105 ;	walk.c:100: if (g[t.r][t.c] == 0x55) f++;
      0003B4 86 05            [24] 1106 	mov	ar5,@r0
      0003B6 08               [12] 1107 	inc	r0
      0003B7 86 07            [24] 1108 	mov	ar7,@r0
      0003B9 18               [12] 1109 	dec	r0
      0003BA C0 00            [24] 1110 	push	ar0
      0003BC C0 05            [24] 1111 	push	ar5
      0003BE C0 07            [24] 1112 	push	ar7
      0003C0 90 00 C0         [24] 1113 	mov	dptr,#0x00c0
      0003C3 12r00r00         [24] 1114 	lcall	__mulint
      0003C6 AC 82            [24] 1115 	mov	r4,dpl
      0003C8 AA 83            [24] 1116 	mov	r2,dph
      0003CA 15 81            [12] 1117 	dec	sp
      0003CC 15 81            [12] 1118 	dec	sp
      0003CE D0 00            [24] 1119 	pop	ar0
      0003D0 D0 01            [24] 1120 	pop	ar1
      0003D2 D0 03            [24] 1121 	pop	ar3
      0003D4 D0 06            [24] 1122 	pop	ar6
      0003D6 EC               [12] 1123 	mov	a,r4
      0003D7 24r00            [12] 1124 	add	a,#_g
      0003D9 FD               [12] 1125 	mov	r5,a
      0003DA EA               [12] 1126 	mov	a,r2
      0003DB 34s00            [12] 1127 	addc	a,#(_g >> 8)
      0003DD FF               [12] 1128 	mov	r7,a
      0003DE C0 00            [24] 1129 	push	ar0
      0003E0 E5*00            [12] 1130 	mov	a,_bp
      0003E2 24 06            [12] 1131 	add	a,#0x06
      0003E4 F8               [12] 1132 	mov	r0,a
      0003E5 C0 01            [24] 1133 	push	ar1
      0003E7 A9 06            [24] 1134 	mov	r1,ar6
      0003E9 E7               [12] 1135 	mov	a,@r1
      0003EA F6               [12] 1136 	mov	@r0,a
      0003EB 09               [12] 1137 	inc	r1
      0003EC E7               [12] 1138 	mov	a,@r1
      0003ED 08               [12] 1139 	inc	r0
      0003EE F6               [12] 1140 	mov	@r0,a
      0003EF D0 01            [24] 1141 	pop	ar1
      0003F1 E5*00            [12] 1142 	mov	a,_bp
      0003F3 24 06            [12] 1143 	add	a,#0x06
      0003F5 F8               [12] 1144 	mov	r0,a
      0003F6 E6               [12] 1145 	mov	a,@r0
      0003F7 2D               [12] 1146 	add	a,r5
      0003F8 F5 82            [12] 1147 	mov	dpl,a
      0003FA 08               [12] 1148 	inc	r0
      0003FB E6               [12] 1149 	mov	a,@r0
      0003FC 3F               [12] 1150 	addc	a,r7
      0003FD F5 83            [12] 1151 	mov	dph,a
      0003FF D0 00            [24] 1152 	pop	ar0
      000401 E0               [24] 1153 	movx	a,@dptr
      000402 FF               [12] 1154 	mov	r7,a
      000403 BF 55 11         [24] 1155 	cjne	r7,#0x55,00106$
      000406 C0 00            [24] 1156 	push	ar0
      000408 E5*00            [12] 1157 	mov	a,_bp
      00040A 24 18            [12] 1158 	add	a,#0x18
      00040C F8               [12] 1159 	mov	r0,a
      00040D 06               [12] 1160 	inc	@r0
      00040E B6 00 02         [24] 1161 	cjne	@r0,#0x00,00178$
      000411 08               [12] 1162 	inc	r0
      000412 06               [12] 1163 	inc	@r0
      000413                       1164 00178$:
      000413 D0 00            [24] 1165 	pop	ar0
      000415 80 3D            [24] 1166 	sjmp	00126$
      000417                       1167 00106$:
                                   1168 ;	walk.c:101: else if (g[t.r][t.c] != 0xaa) {
      000417 EC               [12] 1169 	mov	a,r4
      000418 24r00            [12] 1170 	add	a,#_g
      00041A FD               [12] 1171 	mov	r5,a
      00041B EA               [12] 1172 	mov	a,r2
      00041C 34s00            [12] 1173 	addc	a,#(_g >> 8)
      00041E FF               [12] 1174 	mov	r7,a
      00041F C0 00            [24] 1175 	push	ar0
      000421 E5*00            [12] 1176 	mov	a,_bp
      000423 24 06            [12] 1177 	add	a,#0x06
      000425 F8               [12] 1178 	mov	r0,a
      000426 E6               [12] 1179 	mov	a,@r0
      000427 2D               [12] 1180 	add	a,r5
      000428 F5 82            [12] 1181 	mov	dpl,a
      00042A 08               [12] 1182 	inc	r0
      00042B E6               [12] 1183 	mov	a,@r0
      00042C 3F               [12] 1184 	addc	a,r7
      00042D F5 83            [12] 1185 	mov	dph,a
      00042F D0 00            [24] 1186 	pop	ar0
      000431 E0               [24] 1187 	movx	a,@dptr
      000432 FF               [12] 1188 	mov	r7,a
      000433 BF AA 02         [24] 1189 	cjne	r7,#0xaa,00179$
      000436 80 1C            [24] 1190 	sjmp	00126$
      000438                       1191 00179$:
                                   1192 ;	walk.c:102: (void)puts("Memory error");
      000438 90r00r2A         [24] 1193 	mov	dptr,#___str_1
      00043B 75 F0 80         [24] 1194 	mov	b,#0x80
      00043E C0 06            [24] 1195 	push	ar6
      000440 C0 03            [24] 1196 	push	ar3
      000442 C0 01            [24] 1197 	push	ar1
      000444 C0 00            [24] 1198 	push	ar0
      000446 12r00r00         [24] 1199 	lcall	_puts
      000449 D0 00            [24] 1200 	pop	ar0
      00044B D0 01            [24] 1201 	pop	ar1
      00044D D0 03            [24] 1202 	pop	ar3
      00044F D0 06            [24] 1203 	pop	ar6
                                   1204 ;	walk.c:103: reset();
      000451 12r00r1A         [24] 1205 	lcall	_reset
      000454                       1206 00126$:
                                   1207 ;	walk.c:97: for (j = 0, f = 0; j < NMAX; j++) {
      000454 C0 00            [24] 1208 	push	ar0
      000456 E5*00            [12] 1209 	mov	a,_bp
      000458 24 16            [12] 1210 	add	a,#0x16
      00045A F8               [12] 1211 	mov	r0,a
      00045B 06               [12] 1212 	inc	@r0
      00045C B6 00 02         [24] 1213 	cjne	@r0,#0x00,00180$
      00045F 08               [12] 1214 	inc	r0
      000460 06               [12] 1215 	inc	@r0
      000461                       1216 00180$:
      000461 D0 00            [24] 1217 	pop	ar0
      000463 02r03r3F         [24] 1218 	ljmp	00125$
      000466                       1219 00108$:
                                   1220 ;	walk.c:107: if (f) {
      000466 C0 00            [24] 1221 	push	ar0
      000468 E5*00            [12] 1222 	mov	a,_bp
      00046A 24 18            [12] 1223 	add	a,#0x18
      00046C F8               [12] 1224 	mov	r0,a
      00046D E6               [12] 1225 	mov	a,@r0
      00046E 08               [12] 1226 	inc	r0
      00046F 46               [12] 1227 	orl	a,@r0
      000470 D0 00            [24] 1228 	pop	ar0
      000472 70 03            [24] 1229 	jnz	00181$
      000474 02r06r6A         [24] 1230 	ljmp	00120$
      000477                       1231 00181$:
                                   1232 ;	walk.c:108: while (1) {
      000477                       1233 00117$:
                                   1234 ;	walk.c:109: j = rand() % NMAX;
      000477 C0 06            [24] 1235 	push	ar6
      000479 C0 06            [24] 1236 	push	ar6
      00047B C0 03            [24] 1237 	push	ar3
      00047D C0 01            [24] 1238 	push	ar1
      00047F C0 00            [24] 1239 	push	ar0
      000481 12r00r00         [24] 1240 	lcall	_rand
      000484 AD 82            [24] 1241 	mov	r5,dpl
      000486 AF 83            [24] 1242 	mov	r7,dph
      000488 74 08            [12] 1243 	mov	a,#0x08
      00048A C0 E0            [24] 1244 	push	acc
      00048C E4               [12] 1245 	clr	a
      00048D C0 E0            [24] 1246 	push	acc
      00048F 8D 82            [24] 1247 	mov	dpl,r5
      000491 8F 83            [24] 1248 	mov	dph,r7
      000493 12r00r00         [24] 1249 	lcall	__modsint
      000496 C0 00            [24] 1250 	push	ar0
      000498 C8               [12] 1251 	xch	a,r0
      000499 E5*00            [12] 1252 	mov	a,_bp
      00049B 24 16            [12] 1253 	add	a,#0x16
      00049D C8               [12] 1254 	xch	a,r0
      00049E A6 82            [24] 1255 	mov	@r0,dpl
      0004A0 08               [12] 1256 	inc	r0
      0004A1 A6 83            [24] 1257 	mov	@r0,dph
      0004A3 D0 00            [24] 1258 	pop	ar0
      0004A5 15 81            [12] 1259 	dec	sp
      0004A7 15 81            [12] 1260 	dec	sp
      0004A9 D0 00            [24] 1261 	pop	ar0
      0004AB D0 01            [24] 1262 	pop	ar1
      0004AD D0 03            [24] 1263 	pop	ar3
      0004AF D0 06            [24] 1264 	pop	ar6
                                   1265 ;	walk.c:110: update(&t, &cur, j);
      0004B1 C0 00            [24] 1266 	push	ar0
      0004B3 E5*00            [12] 1267 	mov	a,_bp
      0004B5 24 0D            [12] 1268 	add	a,#0x0d
      0004B7 F8               [12] 1269 	mov	r0,a
      0004B8 C0 01            [24] 1270 	push	ar1
      0004BA E5*00            [12] 1271 	mov	a,_bp
      0004BC 24 0A            [12] 1272 	add	a,#0x0a
      0004BE F9               [12] 1273 	mov	r1,a
      0004BF E6               [12] 1274 	mov	a,@r0
      0004C0 F7               [12] 1275 	mov	@r1,a
      0004C1 09               [12] 1276 	inc	r1
      0004C2 77 00            [12] 1277 	mov	@r1,#0x00
      0004C4 09               [12] 1278 	inc	r1
      0004C5 77 40            [12] 1279 	mov	@r1,#0x40
      0004C7 D0 01            [24] 1280 	pop	ar1
      0004C9 D0 00            [24] 1281 	pop	ar0
      0004CB 8B 04            [24] 1282 	mov	ar4,r3
      0004CD 7D 00            [12] 1283 	mov	r5,#0x00
      0004CF 7F 40            [12] 1284 	mov	r7,#0x40
      0004D1 C0 06            [24] 1285 	push	ar6
      0004D3 C0 03            [24] 1286 	push	ar3
      0004D5 C0 01            [24] 1287 	push	ar1
      0004D7 C0 00            [24] 1288 	push	ar0
      0004D9 85 00 F0         [24] 1289 	mov	b,ar0
      0004DC E5*00            [12] 1290 	mov	a,_bp
      0004DE 24 16            [12] 1291 	add	a,#0x16
      0004E0 F8               [12] 1292 	mov	r0,a
      0004E1 E6               [12] 1293 	mov	a,@r0
      0004E2 C0 E0            [24] 1294 	push	acc
      0004E4 08               [12] 1295 	inc	r0
      0004E5 E6               [12] 1296 	mov	a,@r0
      0004E6 C0 E0            [24] 1297 	push	acc
      0004E8 A8 F0            [24] 1298 	mov	r0,b
      0004EA 85 00 F0         [24] 1299 	mov	b,ar0
      0004ED E5*00            [12] 1300 	mov	a,_bp
      0004EF 24 0A            [12] 1301 	add	a,#0x0a
      0004F1 F8               [12] 1302 	mov	r0,a
      0004F2 E6               [12] 1303 	mov	a,@r0
      0004F3 C0 E0            [24] 1304 	push	acc
      0004F5 08               [12] 1305 	inc	r0
      0004F6 E6               [12] 1306 	mov	a,@r0
      0004F7 C0 E0            [24] 1307 	push	acc
      0004F9 08               [12] 1308 	inc	r0
      0004FA E6               [12] 1309 	mov	a,@r0
      0004FB C0 E0            [24] 1310 	push	acc
      0004FD 8C 82            [24] 1311 	mov	dpl,r4
      0004FF 8D 83            [24] 1312 	mov	dph,r5
      000501 8F F0            [24] 1313 	mov	b,r7
      000503 12r00r1D         [24] 1314 	lcall	_update
      000506 E5 81            [12] 1315 	mov	a,sp
      000508 24 FB            [12] 1316 	add	a,#0xfb
      00050A F5 81            [12] 1317 	mov	sp,a
      00050C D0 00            [24] 1318 	pop	ar0
      00050E D0 01            [24] 1319 	pop	ar1
      000510 D0 03            [24] 1320 	pop	ar3
      000512 D0 06            [24] 1321 	pop	ar6
                                   1322 ;	walk.c:112: if (g[t.r][t.c] == 0xaa) continue;
      000514 C0 00            [24] 1323 	push	ar0
      000516 A8 03            [24] 1324 	mov	r0,ar3
      000518 86 06            [24] 1325 	mov	ar6,@r0
      00051A 08               [12] 1326 	inc	r0
      00051B 86 07            [24] 1327 	mov	ar7,@r0
      00051D D0 00            [24] 1328 	pop	ar0
      00051F C0 06            [24] 1329 	push	ar6
      000521 C0 03            [24] 1330 	push	ar3
      000523 C0 01            [24] 1331 	push	ar1
      000525 C0 00            [24] 1332 	push	ar0
      000527 C0 06            [24] 1333 	push	ar6
      000529 C0 07            [24] 1334 	push	ar7
      00052B 90 00 C0         [24] 1335 	mov	dptr,#0x00c0
      00052E 12r00r00         [24] 1336 	lcall	__mulint
      000531 AD 82            [24] 1337 	mov	r5,dpl
      000533 AC 83            [24] 1338 	mov	r4,dph
      000535 15 81            [12] 1339 	dec	sp
      000537 15 81            [12] 1340 	dec	sp
      000539 D0 00            [24] 1341 	pop	ar0
      00053B D0 01            [24] 1342 	pop	ar1
      00053D D0 03            [24] 1343 	pop	ar3
      00053F D0 06            [24] 1344 	pop	ar6
      000541 ED               [12] 1345 	mov	a,r5
      000542 24r00            [12] 1346 	add	a,#_g
      000544 FE               [12] 1347 	mov	r6,a
      000545 EC               [12] 1348 	mov	a,r4
      000546 34s00            [12] 1349 	addc	a,#(_g >> 8)
      000548 FF               [12] 1350 	mov	r7,a
      000549 C0 00            [24] 1351 	push	ar0
      00054B E5*00            [12] 1352 	mov	a,_bp
      00054D 24 05            [12] 1353 	add	a,#0x05
      00054F F8               [12] 1354 	mov	r0,a
      000550 C0 01            [24] 1355 	push	ar1
      000552 E5*00            [12] 1356 	mov	a,_bp
      000554 24 06            [12] 1357 	add	a,#0x06
      000556 F9               [12] 1358 	mov	r1,a
      000557 86 00            [24] 1359 	mov	ar0,@r0
      000559 E6               [12] 1360 	mov	a,@r0
      00055A F7               [12] 1361 	mov	@r1,a
      00055B 08               [12] 1362 	inc	r0
      00055C E6               [12] 1363 	mov	a,@r0
      00055D 09               [12] 1364 	inc	r1
      00055E F7               [12] 1365 	mov	@r1,a
      00055F 18               [12] 1366 	dec	r0
      000560 D0 01            [24] 1367 	pop	ar1
      000562 E5*00            [12] 1368 	mov	a,_bp
      000564 24 06            [12] 1369 	add	a,#0x06
      000566 F8               [12] 1370 	mov	r0,a
      000567 E6               [12] 1371 	mov	a,@r0
      000568 2E               [12] 1372 	add	a,r6
      000569 F5 82            [12] 1373 	mov	dpl,a
      00056B 08               [12] 1374 	inc	r0
      00056C E6               [12] 1375 	mov	a,@r0
      00056D 3F               [12] 1376 	addc	a,r7
      00056E F5 83            [12] 1377 	mov	dph,a
      000570 D0 00            [24] 1378 	pop	ar0
      000572 E0               [24] 1379 	movx	a,@dptr
      000573 FF               [12] 1380 	mov	r7,a
      000574 BF AA 05         [24] 1381 	cjne	r7,#0xaa,00182$
      000577 D0 06            [24] 1382 	pop	ar6
      000579 02r04r77         [24] 1383 	ljmp	00117$
      00057C                       1384 00182$:
      00057C D0 06            [24] 1385 	pop	ar6
                                   1386 ;	walk.c:113: else if (g[t.r][t.c] != 0x55) {
      00057E ED               [12] 1387 	mov	a,r5
      00057F 24r00            [12] 1388 	add	a,#_g
      000581 FD               [12] 1389 	mov	r5,a
      000582 EC               [12] 1390 	mov	a,r4
      000583 34s00            [12] 1391 	addc	a,#(_g >> 8)
      000585 FF               [12] 1392 	mov	r7,a
      000586 C0 00            [24] 1393 	push	ar0
      000588 E5*00            [12] 1394 	mov	a,_bp
      00058A 24 06            [12] 1395 	add	a,#0x06
      00058C F8               [12] 1396 	mov	r0,a
      00058D E6               [12] 1397 	mov	a,@r0
      00058E 2D               [12] 1398 	add	a,r5
      00058F F5 82            [12] 1399 	mov	dpl,a
      000591 08               [12] 1400 	inc	r0
      000592 E6               [12] 1401 	mov	a,@r0
      000593 3F               [12] 1402 	addc	a,r7
      000594 F5 83            [12] 1403 	mov	dph,a
      000596 D0 00            [24] 1404 	pop	ar0
      000598 E0               [24] 1405 	movx	a,@dptr
      000599 FF               [12] 1406 	mov	r7,a
      00059A BF 55 02         [24] 1407 	cjne	r7,#0x55,00183$
      00059D 80 1C            [24] 1408 	sjmp	00113$
      00059F                       1409 00183$:
                                   1410 ;	walk.c:114: (void)puts("Memory error");
      00059F 90r00r2A         [24] 1411 	mov	dptr,#___str_1
      0005A2 75 F0 80         [24] 1412 	mov	b,#0x80
      0005A5 C0 06            [24] 1413 	push	ar6
      0005A7 C0 03            [24] 1414 	push	ar3
      0005A9 C0 01            [24] 1415 	push	ar1
      0005AB C0 00            [24] 1416 	push	ar0
      0005AD 12r00r00         [24] 1417 	lcall	_puts
      0005B0 D0 00            [24] 1418 	pop	ar0
      0005B2 D0 01            [24] 1419 	pop	ar1
      0005B4 D0 03            [24] 1420 	pop	ar3
      0005B6 D0 06            [24] 1421 	pop	ar6
                                   1422 ;	walk.c:115: reset();
      0005B8 12r00r1A         [24] 1423 	lcall	_reset
      0005BB                       1424 00113$:
                                   1425 ;	walk.c:118: if (!stpush(&cur)) {
      0005BB C0 00            [24] 1426 	push	ar0
      0005BD A8*00            [24] 1427 	mov	r0,_bp
      0005BF 08               [12] 1428 	inc	r0
      0005C0 86 04            [24] 1429 	mov	ar4,@r0
      0005C2 7D 00            [12] 1430 	mov	r5,#0x00
      0005C4 7F 40            [12] 1431 	mov	r7,#0x40
      0005C6 D0 00            [24] 1432 	pop	ar0
      0005C8 8C 82            [24] 1433 	mov	dpl,r4
      0005CA 8D 83            [24] 1434 	mov	dph,r5
      0005CC 8F F0            [24] 1435 	mov	b,r7
      0005CE C0 06            [24] 1436 	push	ar6
      0005D0 C0 03            [24] 1437 	push	ar3
      0005D2 C0 01            [24] 1438 	push	ar1
      0005D4 C0 00            [24] 1439 	push	ar0
      0005D6 12r08rBB         [24] 1440 	lcall	_stpush
      0005D9 E5 82            [12] 1441 	mov	a,dpl
      0005DB 85 83 F0         [24] 1442 	mov	b,dph
      0005DE D0 00            [24] 1443 	pop	ar0
      0005E0 D0 01            [24] 1444 	pop	ar1
      0005E2 D0 03            [24] 1445 	pop	ar3
      0005E4 D0 06            [24] 1446 	pop	ar6
      0005E6 45 F0            [12] 1447 	orl	a,b
      0005E8 70 1C            [24] 1448 	jnz	00115$
                                   1449 ;	walk.c:119: (void)puts("Memory error");
      0005EA 90r00r2A         [24] 1450 	mov	dptr,#___str_1
      0005ED 75 F0 80         [24] 1451 	mov	b,#0x80
      0005F0 C0 06            [24] 1452 	push	ar6
      0005F2 C0 03            [24] 1453 	push	ar3
      0005F4 C0 01            [24] 1454 	push	ar1
      0005F6 C0 00            [24] 1455 	push	ar0
      0005F8 12r00r00         [24] 1456 	lcall	_puts
      0005FB D0 00            [24] 1457 	pop	ar0
      0005FD D0 01            [24] 1458 	pop	ar1
      0005FF D0 03            [24] 1459 	pop	ar3
      000601 D0 06            [24] 1460 	pop	ar6
                                   1461 ;	walk.c:120: reset();
      000603 12r00r1A         [24] 1462 	lcall	_reset
      000606                       1463 00115$:
                                   1464 ;	walk.c:122: cur = t;
      000606 C0 06            [24] 1465 	push	ar6
      000608 C0 00            [24] 1466 	push	ar0
      00060A A8*00            [24] 1467 	mov	r0,_bp
      00060C 08               [12] 1468 	inc	r0
      00060D 08               [12] 1469 	inc	r0
      00060E C0 01            [24] 1470 	push	ar1
      000610 E5*00            [12] 1471 	mov	a,_bp
      000612 24 0A            [12] 1472 	add	a,#0x0a
      000614 F9               [12] 1473 	mov	r1,a
      000615 E6               [12] 1474 	mov	a,@r0
      000616 F7               [12] 1475 	mov	@r1,a
      000617 09               [12] 1476 	inc	r1
      000618 77 00            [12] 1477 	mov	@r1,#0x00
      00061A 09               [12] 1478 	inc	r1
      00061B 77 40            [12] 1479 	mov	@r1,#0x40
      00061D D0 01            [24] 1480 	pop	ar1
      00061F E5*00            [12] 1481 	mov	a,_bp
      000621 24 03            [12] 1482 	add	a,#0x03
      000623 F8               [12] 1483 	mov	r0,a
      000624 86 02            [24] 1484 	mov	ar2,@r0
      000626 7E 00            [12] 1485 	mov	r6,#0x00
      000628 7F 40            [12] 1486 	mov	r7,#0x40
      00062A D0 00            [24] 1487 	pop	ar0
      00062C C0 06            [24] 1488 	push	ar6
      00062E C0 03            [24] 1489 	push	ar3
      000630 C0 01            [24] 1490 	push	ar1
      000632 C0 00            [24] 1491 	push	ar0
      000634 74 04            [12] 1492 	mov	a,#0x04
      000636 C0 E0            [24] 1493 	push	acc
      000638 E4               [12] 1494 	clr	a
      000639 C0 E0            [24] 1495 	push	acc
      00063B 85 00 F0         [24] 1496 	mov	b,ar0
      00063E E5*00            [12] 1497 	mov	a,_bp
      000640 24 0A            [12] 1498 	add	a,#0x0a
      000642 F8               [12] 1499 	mov	r0,a
      000643 E6               [12] 1500 	mov	a,@r0
      000644 C0 E0            [24] 1501 	push	acc
      000646 08               [12] 1502 	inc	r0
      000647 E6               [12] 1503 	mov	a,@r0
      000648 C0 E0            [24] 1504 	push	acc
      00064A 08               [12] 1505 	inc	r0
      00064B E6               [12] 1506 	mov	a,@r0
      00064C C0 E0            [24] 1507 	push	acc
      00064E 8A 82            [24] 1508 	mov	dpl,r2
      000650 8E 83            [24] 1509 	mov	dph,r6
      000652 8F F0            [24] 1510 	mov	b,r7
      000654 12r00r00         [24] 1511 	lcall	___memcpy
      000657 E5 81            [12] 1512 	mov	a,sp
      000659 24 FB            [12] 1513 	add	a,#0xfb
      00065B F5 81            [12] 1514 	mov	sp,a
      00065D D0 00            [24] 1515 	pop	ar0
      00065F D0 01            [24] 1516 	pop	ar1
      000661 D0 03            [24] 1517 	pop	ar3
      000663 D0 06            [24] 1518 	pop	ar6
                                   1519 ;	walk.c:123: goto process;
      000665 D0 06            [24] 1520 	pop	ar6
      000667 02r02r91         [24] 1521 	ljmp	00101$
      00066A                       1522 00120$:
                                   1523 ;	walk.c:127: printf("\033[%d;%dH.", cur.r + 1, cur.c + 1);
      00066A C0 00            [24] 1524 	push	ar0
      00066C E5*00            [12] 1525 	mov	a,_bp
      00066E 24 04            [12] 1526 	add	a,#0x04
      000670 F8               [12] 1527 	mov	r0,a
      000671 86 00            [24] 1528 	mov	ar0,@r0
      000673 86 05            [24] 1529 	mov	ar5,@r0
      000675 08               [12] 1530 	inc	r0
      000676 86 07            [24] 1531 	mov	ar7,@r0
      000678 18               [12] 1532 	dec	r0
      000679 D0 00            [24] 1533 	pop	ar0
      00067B 0D               [12] 1534 	inc	r5
      00067C BD 00 01         [24] 1535 	cjne	r5,#0x00,00185$
      00067F 0F               [12] 1536 	inc	r7
      000680                       1537 00185$:
      000680 87 02            [24] 1538 	mov	ar2,@r1
      000682 09               [12] 1539 	inc	r1
      000683 87 04            [24] 1540 	mov	ar4,@r1
      000685 19               [12] 1541 	dec	r1
      000686 0A               [12] 1542 	inc	r2
      000687 BA 00 01         [24] 1543 	cjne	r2,#0x00,00186$
      00068A 0C               [12] 1544 	inc	r4
      00068B                       1545 00186$:
      00068B C0 06            [24] 1546 	push	ar6
      00068D C0 03            [24] 1547 	push	ar3
      00068F C0 01            [24] 1548 	push	ar1
      000691 C0 00            [24] 1549 	push	ar0
      000693 C0 05            [24] 1550 	push	ar5
      000695 C0 07            [24] 1551 	push	ar7
      000697 C0 02            [24] 1552 	push	ar2
      000699 C0 04            [24] 1553 	push	ar4
      00069B 74r37            [12] 1554 	mov	a,#___str_2
      00069D C0 E0            [24] 1555 	push	acc
      00069F 74s00            [12] 1556 	mov	a,#(___str_2 >> 8)
      0006A1 C0 E0            [24] 1557 	push	acc
      0006A3 74 80            [12] 1558 	mov	a,#0x80
      0006A5 C0 E0            [24] 1559 	push	acc
      0006A7 12r00r00         [24] 1560 	lcall	_printf
      0006AA E5 81            [12] 1561 	mov	a,sp
      0006AC 24 F9            [12] 1562 	add	a,#0xf9
      0006AE F5 81            [12] 1563 	mov	sp,a
      0006B0 D0 00            [24] 1564 	pop	ar0
      0006B2 D0 01            [24] 1565 	pop	ar1
      0006B4 D0 03            [24] 1566 	pop	ar3
      0006B6 D0 06            [24] 1567 	pop	ar6
                                   1568 ;	walk.c:129: if (!stpop(&cur)) goto term;
      0006B8 C0 00            [24] 1569 	push	ar0
      0006BA E5*00            [12] 1570 	mov	a,_bp
      0006BC 24 08            [12] 1571 	add	a,#0x08
      0006BE F8               [12] 1572 	mov	r0,a
      0006BF 86 04            [24] 1573 	mov	ar4,@r0
      0006C1 7D 00            [12] 1574 	mov	r5,#0x00
      0006C3 7F 40            [12] 1575 	mov	r7,#0x40
      0006C5 D0 00            [24] 1576 	pop	ar0
      0006C7 8C 82            [24] 1577 	mov	dpl,r4
      0006C9 8D 83            [24] 1578 	mov	dph,r5
      0006CB 8F F0            [24] 1579 	mov	b,r7
      0006CD C0 06            [24] 1580 	push	ar6
      0006CF C0 03            [24] 1581 	push	ar3
      0006D1 C0 01            [24] 1582 	push	ar1
      0006D3 C0 00            [24] 1583 	push	ar0
      0006D5 12r09r1C         [24] 1584 	lcall	_stpop
      0006D8 E5 82            [12] 1585 	mov	a,dpl
      0006DA 85 83 F0         [24] 1586 	mov	b,dph
      0006DD D0 00            [24] 1587 	pop	ar0
      0006DF D0 01            [24] 1588 	pop	ar1
      0006E1 D0 03            [24] 1589 	pop	ar3
      0006E3 D0 06            [24] 1590 	pop	ar6
      0006E5 45 F0            [12] 1591 	orl	a,b
      0006E7 60 03            [24] 1592 	jz	00187$
      0006E9 02r03r29         [24] 1593 	ljmp	00132$
      0006EC                       1594 00187$:
                                   1595 ;	walk.c:133: return;
                                   1596 ;	walk.c:134: }
      0006EC 85*00 81         [24] 1597 	mov	sp,_bp
      0006EF D0*00            [24] 1598 	pop	_bp
      0006F1 22               [24] 1599 	ret
                                   1600 ;------------------------------------------------------------
                                   1601 ;Allocation info for local variables in function 'main'
                                   1602 ;------------------------------------------------------------
                                   1603 ;initial                   Allocated to stack - _bp +3
                                   1604 ;i                         Allocated to stack - _bp +7
                                   1605 ;j                         Allocated to registers r4 r5 
                                   1606 ;sloc0                     Allocated to stack - _bp +1
                                   1607 ;R                         Allocated with name '_main_R_65536_65'
                                   1608 ;------------------------------------------------------------
                                   1609 ;	walk.c:136: int main(void) {
                                   1610 ;	-----------------------------------------
                                   1611 ;	 function main
                                   1612 ;	-----------------------------------------
      0006F2                       1613 _main:
      0006F2 C0*00            [24] 1614 	push	_bp
      0006F4 E5 81            [12] 1615 	mov	a,sp
      0006F6 F5*00            [12] 1616 	mov	_bp,a
      0006F8 24 08            [12] 1617 	add	a,#0x08
      0006FA F5 81            [12] 1618 	mov	sp,a
                                   1619 ;	walk.c:141: i0 = 1;
      0006FC 78r00            [12] 1620 	mov	r0,#_i0
      0006FE 76 01            [12] 1621 	mov	@r0,#0x01
                                   1622 ;	walk.c:143: IT0 = 1;
                                   1623 ;	assignBit
      000700 D2 88            [12] 1624 	setb	_IT0
                                   1625 ;	walk.c:144: EX0 = 1;
                                   1626 ;	assignBit
      000702 D2 A8            [12] 1627 	setb	_EX0
                                   1628 ;	walk.c:145: EA = 1;
                                   1629 ;	assignBit
      000704 D2 AF            [12] 1630 	setb	_EA
                                   1631 ;	walk.c:147: srand(*R);
      000706 90rB4r02         [24] 1632 	mov	dptr,#_main_R_65536_65
      000709 E0               [24] 1633 	movx	a,@dptr
      00070A FE               [12] 1634 	mov	r6,a
      00070B A3               [24] 1635 	inc	dptr
      00070C E0               [24] 1636 	movx	a,@dptr
      00070D FF               [12] 1637 	mov	r7,a
      00070E 8E 82            [24] 1638 	mov	dpl,r6
      000710 8F 83            [24] 1639 	mov	dph,r7
      000712 E0               [24] 1640 	movx	a,@dptr
      000713 FE               [12] 1641 	mov	r6,a
      000714 A3               [24] 1642 	inc	dptr
      000715 E0               [24] 1643 	movx	a,@dptr
      000716 FF               [12] 1644 	mov	r7,a
      000717 8E 82            [24] 1645 	mov	dpl,r6
      000719 8F 83            [24] 1646 	mov	dph,r7
      00071B 12r00r00         [24] 1647 	lcall	_srand
                                   1648 ;	walk.c:148: stinit();
      00071E 12r08rB2         [24] 1649 	lcall	_stinit
                                   1650 ;	walk.c:150: while (i0) {
      000721 E5*00            [12] 1651 	mov	a,_bp
      000723 24 03            [12] 1652 	add	a,#0x03
      000725 FF               [12] 1653 	mov	r7,a
      000726 FE               [12] 1654 	mov	r6,a
      000727                       1655 00107$:
      000727 78r00            [12] 1656 	mov	r0,#_i0
      000729 E6               [12] 1657 	mov	a,@r0
      00072A 70 03            [24] 1658 	jnz	00168$
      00072C 02r08rA4         [24] 1659 	ljmp	00109$
      00072F                       1660 00168$:
                                   1661 ;	walk.c:151: for (i = 0; i < ROWS; i++)
      00072F E5*00            [12] 1662 	mov	a,_bp
      000731 24 07            [12] 1663 	add	a,#0x07
      000733 F8               [12] 1664 	mov	r0,a
      000734 E4               [12] 1665 	clr	a
      000735 F6               [12] 1666 	mov	@r0,a
      000736 08               [12] 1667 	inc	r0
      000737 F6               [12] 1668 	mov	@r0,a
      000738 7A 00            [12] 1669 	mov	r2,#0x00
      00073A 7B 00            [12] 1670 	mov	r3,#0x00
                                   1671 ;	walk.c:152: for (j = 0; j < COLS; j++)
      00073C                       1672 00121$:
      00073C A8*00            [24] 1673 	mov	r0,_bp
      00073E 08               [12] 1674 	inc	r0
      00073F EA               [12] 1675 	mov	a,r2
      000740 24r00            [12] 1676 	add	a,#_g
      000742 F6               [12] 1677 	mov	@r0,a
      000743 EB               [12] 1678 	mov	a,r3
      000744 34s00            [12] 1679 	addc	a,#(_g >> 8)
      000746 08               [12] 1680 	inc	r0
      000747 F6               [12] 1681 	mov	@r0,a
      000748 7C 00            [12] 1682 	mov	r4,#0x00
      00074A 7D 00            [12] 1683 	mov	r5,#0x00
      00074C                       1684 00110$:
                                   1685 ;	walk.c:153: g[i][j] = 0x55;
      00074C A8*00            [24] 1686 	mov	r0,_bp
      00074E 08               [12] 1687 	inc	r0
      00074F EC               [12] 1688 	mov	a,r4
      000750 26               [12] 1689 	add	a,@r0
      000751 F5 82            [12] 1690 	mov	dpl,a
      000753 ED               [12] 1691 	mov	a,r5
      000754 08               [12] 1692 	inc	r0
      000755 36               [12] 1693 	addc	a,@r0
      000756 F5 83            [12] 1694 	mov	dph,a
      000758 74 55            [12] 1695 	mov	a,#0x55
      00075A F0               [24] 1696 	movx	@dptr,a
                                   1697 ;	walk.c:152: for (j = 0; j < COLS; j++)
      00075B 0C               [12] 1698 	inc	r4
      00075C BC 00 01         [24] 1699 	cjne	r4,#0x00,00169$
      00075F 0D               [12] 1700 	inc	r5
      000760                       1701 00169$:
      000760 C3               [12] 1702 	clr	c
      000761 EC               [12] 1703 	mov	a,r4
      000762 94 C0            [12] 1704 	subb	a,#0xc0
      000764 ED               [12] 1705 	mov	a,r5
      000765 64 80            [12] 1706 	xrl	a,#0x80
      000767 94 80            [12] 1707 	subb	a,#0x80
      000769 40 E1            [24] 1708 	jc	00110$
                                   1709 ;	walk.c:151: for (i = 0; i < ROWS; i++)
      00076B 74 C0            [12] 1710 	mov	a,#0xc0
      00076D 2A               [12] 1711 	add	a,r2
      00076E FA               [12] 1712 	mov	r2,a
      00076F E4               [12] 1713 	clr	a
      000770 3B               [12] 1714 	addc	a,r3
      000771 FB               [12] 1715 	mov	r3,a
      000772 E5*00            [12] 1716 	mov	a,_bp
      000774 24 07            [12] 1717 	add	a,#0x07
      000776 F8               [12] 1718 	mov	r0,a
      000777 06               [12] 1719 	inc	@r0
      000778 B6 00 02         [24] 1720 	cjne	@r0,#0x00,00171$
      00077B 08               [12] 1721 	inc	r0
      00077C 06               [12] 1722 	inc	@r0
      00077D                       1723 00171$:
      00077D E5*00            [12] 1724 	mov	a,_bp
      00077F 24 07            [12] 1725 	add	a,#0x07
      000781 F8               [12] 1726 	mov	r0,a
      000782 C3               [12] 1727 	clr	c
      000783 E6               [12] 1728 	mov	a,@r0
      000784 94 30            [12] 1729 	subb	a,#0x30
      000786 08               [12] 1730 	inc	r0
      000787 E6               [12] 1731 	mov	a,@r0
      000788 64 80            [12] 1732 	xrl	a,#0x80
      00078A 94 80            [12] 1733 	subb	a,#0x80
      00078C 40 AE            [24] 1734 	jc	00121$
                                   1735 ;	walk.c:155: puts("\033[2J");
      00078E 90r00r41         [24] 1736 	mov	dptr,#___str_3
      000791 75 F0 80         [24] 1737 	mov	b,#0x80
      000794 C0 07            [24] 1738 	push	ar7
      000796 C0 06            [24] 1739 	push	ar6
      000798 12r00r00         [24] 1740 	lcall	_puts
                                   1741 ;	walk.c:156: initial.r = rand() % ROWS;
      00079B E5*00            [12] 1742 	mov	a,_bp
      00079D 24 03            [12] 1743 	add	a,#0x03
      00079F F9               [12] 1744 	mov	r1,a
      0007A0 C0 01            [24] 1745 	push	ar1
      0007A2 12r00r00         [24] 1746 	lcall	_rand
      0007A5 AC 82            [24] 1747 	mov	r4,dpl
      0007A7 AD 83            [24] 1748 	mov	r5,dph
      0007A9 74 30            [12] 1749 	mov	a,#0x30
      0007AB C0 E0            [24] 1750 	push	acc
      0007AD E4               [12] 1751 	clr	a
      0007AE C0 E0            [24] 1752 	push	acc
      0007B0 8C 82            [24] 1753 	mov	dpl,r4
      0007B2 8D 83            [24] 1754 	mov	dph,r5
      0007B4 12r00r00         [24] 1755 	lcall	__modsint
      0007B7 AC 82            [24] 1756 	mov	r4,dpl
      0007B9 AD 83            [24] 1757 	mov	r5,dph
      0007BB 15 81            [12] 1758 	dec	sp
      0007BD 15 81            [12] 1759 	dec	sp
      0007BF D0 01            [24] 1760 	pop	ar1
      0007C1 D0 06            [24] 1761 	pop	ar6
      0007C3 D0 07            [24] 1762 	pop	ar7
      0007C5 A7 04            [24] 1763 	mov	@r1,ar4
      0007C7 09               [12] 1764 	inc	r1
      0007C8 A7 05            [24] 1765 	mov	@r1,ar5
      0007CA 19               [12] 1766 	dec	r1
                                   1767 ;	walk.c:157: initial.c = rand() % COLS;
      0007CB 74 02            [12] 1768 	mov	a,#0x02
      0007CD 2F               [12] 1769 	add	a,r7
      0007CE F9               [12] 1770 	mov	r1,a
      0007CF C0 07            [24] 1771 	push	ar7
      0007D1 C0 06            [24] 1772 	push	ar6
      0007D3 C0 01            [24] 1773 	push	ar1
      0007D5 12r00r00         [24] 1774 	lcall	_rand
      0007D8 AC 82            [24] 1775 	mov	r4,dpl
      0007DA AD 83            [24] 1776 	mov	r5,dph
      0007DC 74 C0            [12] 1777 	mov	a,#0xc0
      0007DE C0 E0            [24] 1778 	push	acc
      0007E0 E4               [12] 1779 	clr	a
      0007E1 C0 E0            [24] 1780 	push	acc
      0007E3 8C 82            [24] 1781 	mov	dpl,r4
      0007E5 8D 83            [24] 1782 	mov	dph,r5
      0007E7 12r00r00         [24] 1783 	lcall	__modsint
      0007EA AC 82            [24] 1784 	mov	r4,dpl
      0007EC AD 83            [24] 1785 	mov	r5,dph
      0007EE 15 81            [12] 1786 	dec	sp
      0007F0 15 81            [12] 1787 	dec	sp
      0007F2 D0 01            [24] 1788 	pop	ar1
      0007F4 D0 06            [24] 1789 	pop	ar6
      0007F6 A7 04            [24] 1790 	mov	@r1,ar4
      0007F8 09               [12] 1791 	inc	r1
      0007F9 A7 05            [24] 1792 	mov	@r1,ar5
      0007FB 19               [12] 1793 	dec	r1
                                   1794 ;	walk.c:158: walk(&initial);
      0007FC 8E 03            [24] 1795 	mov	ar3,r6
      0007FE 7C 00            [12] 1796 	mov	r4,#0x00
      000800 7D 40            [12] 1797 	mov	r5,#0x40
      000802 8B 82            [24] 1798 	mov	dpl,r3
      000804 8C 83            [24] 1799 	mov	dph,r4
      000806 8D F0            [24] 1800 	mov	b,r5
      000808 C0 06            [24] 1801 	push	ar6
      00080A 12r02r06         [24] 1802 	lcall	_walk
      00080D D0 06            [24] 1803 	pop	ar6
      00080F D0 07            [24] 1804 	pop	ar7
                                   1805 ;	walk.c:160: for (i = 0; i < ROWS; i++)
      000811 E5*00            [12] 1806 	mov	a,_bp
      000813 24 07            [12] 1807 	add	a,#0x07
      000815 F8               [12] 1808 	mov	r0,a
      000816 E4               [12] 1809 	clr	a
      000817 F6               [12] 1810 	mov	@r0,a
      000818 08               [12] 1811 	inc	r0
      000819 F6               [12] 1812 	mov	@r0,a
      00081A 7A 00            [12] 1813 	mov	r2,#0x00
      00081C 7B 00            [12] 1814 	mov	r3,#0x00
                                   1815 ;	walk.c:161: for (j = 0; j < COLS; j++)
      00081E                       1816 00126$:
      00081E A8*00            [24] 1817 	mov	r0,_bp
      000820 08               [12] 1818 	inc	r0
      000821 EA               [12] 1819 	mov	a,r2
      000822 24r00            [12] 1820 	add	a,#_g
      000824 F6               [12] 1821 	mov	@r0,a
      000825 EB               [12] 1822 	mov	a,r3
      000826 34s00            [12] 1823 	addc	a,#(_g >> 8)
      000828 08               [12] 1824 	inc	r0
      000829 F6               [12] 1825 	mov	@r0,a
      00082A 7C 00            [12] 1826 	mov	r4,#0x00
      00082C 7D 00            [12] 1827 	mov	r5,#0x00
      00082E                       1828 00114$:
                                   1829 ;	walk.c:162: if (g[i][j] != 0xaa) {
      00082E C0 06            [24] 1830 	push	ar6
      000830 A8*00            [24] 1831 	mov	r0,_bp
      000832 08               [12] 1832 	inc	r0
      000833 EC               [12] 1833 	mov	a,r4
      000834 26               [12] 1834 	add	a,@r0
      000835 F5 82            [12] 1835 	mov	dpl,a
      000837 ED               [12] 1836 	mov	a,r5
      000838 08               [12] 1837 	inc	r0
      000839 36               [12] 1838 	addc	a,@r0
      00083A F5 83            [12] 1839 	mov	dph,a
      00083C E0               [24] 1840 	movx	a,@dptr
      00083D FE               [12] 1841 	mov	r6,a
      00083E BE AA 04         [24] 1842 	cjne	r6,#0xaa,00173$
      000841 D0 06            [24] 1843 	pop	ar6
      000843 80 26            [24] 1844 	sjmp	00115$
      000845                       1845 00173$:
      000845 D0 06            [24] 1846 	pop	ar6
                                   1847 ;	walk.c:163: (void)puts("Memory error");
      000847 90r00r2A         [24] 1848 	mov	dptr,#___str_1
      00084A 75 F0 80         [24] 1849 	mov	b,#0x80
      00084D C0 07            [24] 1850 	push	ar7
      00084F C0 06            [24] 1851 	push	ar6
      000851 C0 05            [24] 1852 	push	ar5
      000853 C0 04            [24] 1853 	push	ar4
      000855 C0 03            [24] 1854 	push	ar3
      000857 C0 02            [24] 1855 	push	ar2
      000859 12r00r00         [24] 1856 	lcall	_puts
      00085C D0 02            [24] 1857 	pop	ar2
      00085E D0 03            [24] 1858 	pop	ar3
      000860 D0 04            [24] 1859 	pop	ar4
      000862 D0 05            [24] 1860 	pop	ar5
      000864 D0 06            [24] 1861 	pop	ar6
      000866 D0 07            [24] 1862 	pop	ar7
                                   1863 ;	walk.c:164: reset();
      000868 12r00r1A         [24] 1864 	lcall	_reset
      00086B                       1865 00115$:
                                   1866 ;	walk.c:161: for (j = 0; j < COLS; j++)
      00086B 0C               [12] 1867 	inc	r4
      00086C BC 00 01         [24] 1868 	cjne	r4,#0x00,00174$
      00086F 0D               [12] 1869 	inc	r5
      000870                       1870 00174$:
      000870 C3               [12] 1871 	clr	c
      000871 EC               [12] 1872 	mov	a,r4
      000872 94 C0            [12] 1873 	subb	a,#0xc0
      000874 ED               [12] 1874 	mov	a,r5
      000875 64 80            [12] 1875 	xrl	a,#0x80
      000877 94 80            [12] 1876 	subb	a,#0x80
      000879 40 B3            [24] 1877 	jc	00114$
                                   1878 ;	walk.c:160: for (i = 0; i < ROWS; i++)
      00087B 74 C0            [12] 1879 	mov	a,#0xc0
      00087D 2A               [12] 1880 	add	a,r2
      00087E FA               [12] 1881 	mov	r2,a
      00087F E4               [12] 1882 	clr	a
      000880 3B               [12] 1883 	addc	a,r3
      000881 FB               [12] 1884 	mov	r3,a
      000882 E5*00            [12] 1885 	mov	a,_bp
      000884 24 07            [12] 1886 	add	a,#0x07
      000886 F8               [12] 1887 	mov	r0,a
      000887 06               [12] 1888 	inc	@r0
      000888 B6 00 02         [24] 1889 	cjne	@r0,#0x00,00176$
      00088B 08               [12] 1890 	inc	r0
      00088C 06               [12] 1891 	inc	@r0
      00088D                       1892 00176$:
      00088D E5*00            [12] 1893 	mov	a,_bp
      00088F 24 07            [12] 1894 	add	a,#0x07
      000891 F8               [12] 1895 	mov	r0,a
      000892 C3               [12] 1896 	clr	c
      000893 E6               [12] 1897 	mov	a,@r0
      000894 94 30            [12] 1898 	subb	a,#0x30
      000896 08               [12] 1899 	inc	r0
      000897 E6               [12] 1900 	mov	a,@r0
      000898 64 80            [12] 1901 	xrl	a,#0x80
      00089A 94 80            [12] 1902 	subb	a,#0x80
      00089C 50 03            [24] 1903 	jnc	00177$
      00089E 02r08r1E         [24] 1904 	ljmp	00126$
      0008A1                       1905 00177$:
      0008A1 02r07r27         [24] 1906 	ljmp	00107$
      0008A4                       1907 00109$:
                                   1908 ;	walk.c:168: EA = 0;
                                   1909 ;	assignBit
      0008A4 C2 AF            [12] 1910 	clr	_EA
                                   1911 ;	walk.c:172: __endasm;
      0008A6 02 00 00         [24] 1912 	ljmp	0
                                   1913 ;	walk.c:174: return 0;
      0008A9 90 00 00         [24] 1914 	mov	dptr,#0x0000
                                   1915 ;	walk.c:175: }
      0008AC 85*00 81         [24] 1916 	mov	sp,_bp
      0008AF D0*00            [24] 1917 	pop	_bp
      0008B1 22               [24] 1918 	ret
                                   1919 ;------------------------------------------------------------
                                   1920 ;Allocation info for local variables in function 'stinit'
                                   1921 ;------------------------------------------------------------
                                   1922 ;	walk.c:177: static void stinit(void) {
                                   1923 ;	-----------------------------------------
                                   1924 ;	 function stinit
                                   1925 ;	-----------------------------------------
      0008B2                       1926 _stinit:
                                   1927 ;	walk.c:178: sp = -1;
      0008B2 90rB4r00         [24] 1928 	mov	dptr,#_sp
      0008B5 74 FF            [12] 1929 	mov	a,#0xff
      0008B7 F0               [24] 1930 	movx	@dptr,a
      0008B8 A3               [24] 1931 	inc	dptr
      0008B9 F0               [24] 1932 	movx	@dptr,a
                                   1933 ;	walk.c:179: return;
                                   1934 ;	walk.c:180: }
      0008BA 22               [24] 1935 	ret
                                   1936 ;------------------------------------------------------------
                                   1937 ;Allocation info for local variables in function 'stpush'
                                   1938 ;------------------------------------------------------------
                                   1939 ;t                         Allocated to registers r5 r6 r7 
                                   1940 ;------------------------------------------------------------
                                   1941 ;	walk.c:182: static int stpush(struct node *t) {
                                   1942 ;	-----------------------------------------
                                   1943 ;	 function stpush
                                   1944 ;	-----------------------------------------
      0008BB                       1945 _stpush:
      0008BB AD 82            [24] 1946 	mov	r5,dpl
      0008BD AE 83            [24] 1947 	mov	r6,dph
      0008BF AF F0            [24] 1948 	mov	r7,b
                                   1949 ;	walk.c:183: if (sp == (SMAX - 1)) return 0;
      0008C1 90rB4r00         [24] 1950 	mov	dptr,#_sp
      0008C4 E0               [24] 1951 	movx	a,@dptr
      0008C5 FB               [12] 1952 	mov	r3,a
      0008C6 A3               [24] 1953 	inc	dptr
      0008C7 E0               [24] 1954 	movx	a,@dptr
      0008C8 FC               [12] 1955 	mov	r4,a
      0008C9 BB FF 07         [24] 1956 	cjne	r3,#0xff,00102$
      0008CC BC 23 04         [24] 1957 	cjne	r4,#0x23,00102$
      0008CF 90 00 00         [24] 1958 	mov	dptr,#0x0000
      0008D2 22               [24] 1959 	ret
      0008D3                       1960 00102$:
                                   1961 ;	walk.c:184: sp++;
      0008D3 90rB4r00         [24] 1962 	mov	dptr,#_sp
      0008D6 74 01            [12] 1963 	mov	a,#0x01
      0008D8 2B               [12] 1964 	add	a,r3
      0008D9 F0               [24] 1965 	movx	@dptr,a
      0008DA E4               [12] 1966 	clr	a
      0008DB 3C               [12] 1967 	addc	a,r4
      0008DC A3               [24] 1968 	inc	dptr
      0008DD F0               [24] 1969 	movx	@dptr,a
                                   1970 ;	walk.c:185: stack[sp] = *t;
      0008DE 90rB4r00         [24] 1971 	mov	dptr,#_sp
      0008E1 E0               [24] 1972 	movx	a,@dptr
      0008E2 FB               [12] 1973 	mov	r3,a
      0008E3 A3               [24] 1974 	inc	dptr
      0008E4 E0               [24] 1975 	movx	a,@dptr
      0008E5 FC               [12] 1976 	mov	r4,a
      0008E6 EB               [12] 1977 	mov	a,r3
      0008E7 2B               [12] 1978 	add	a,r3
      0008E8 FB               [12] 1979 	mov	r3,a
      0008E9 EC               [12] 1980 	mov	a,r4
      0008EA 33               [12] 1981 	rlc	a
      0008EB FC               [12] 1982 	mov	r4,a
      0008EC EB               [12] 1983 	mov	a,r3
      0008ED 2B               [12] 1984 	add	a,r3
      0008EE FB               [12] 1985 	mov	r3,a
      0008EF EC               [12] 1986 	mov	a,r4
      0008F0 33               [12] 1987 	rlc	a
      0008F1 FC               [12] 1988 	mov	r4,a
      0008F2 EB               [12] 1989 	mov	a,r3
      0008F3 24r00            [12] 1990 	add	a,#_stack
      0008F5 FB               [12] 1991 	mov	r3,a
      0008F6 EC               [12] 1992 	mov	a,r4
      0008F7 34s24            [12] 1993 	addc	a,#(_stack >> 8)
      0008F9 FC               [12] 1994 	mov	r4,a
      0008FA 7A 00            [12] 1995 	mov	r2,#0x00
      0008FC 74 04            [12] 1996 	mov	a,#0x04
      0008FE C0 E0            [24] 1997 	push	acc
      000900 E4               [12] 1998 	clr	a
      000901 C0 E0            [24] 1999 	push	acc
      000903 C0 05            [24] 2000 	push	ar5
      000905 C0 06            [24] 2001 	push	ar6
      000907 C0 07            [24] 2002 	push	ar7
      000909 8B 82            [24] 2003 	mov	dpl,r3
      00090B 8C 83            [24] 2004 	mov	dph,r4
      00090D 8A F0            [24] 2005 	mov	b,r2
      00090F 12r00r00         [24] 2006 	lcall	___memcpy
      000912 E5 81            [12] 2007 	mov	a,sp
      000914 24 FB            [12] 2008 	add	a,#0xfb
      000916 F5 81            [12] 2009 	mov	sp,a
                                   2010 ;	walk.c:186: return 1;
      000918 90 00 01         [24] 2011 	mov	dptr,#0x0001
                                   2012 ;	walk.c:187: }
      00091B 22               [24] 2013 	ret
                                   2014 ;------------------------------------------------------------
                                   2015 ;Allocation info for local variables in function 'stpop'
                                   2016 ;------------------------------------------------------------
                                   2017 ;t                         Allocated to registers r5 r6 r7 
                                   2018 ;------------------------------------------------------------
                                   2019 ;	walk.c:189: static int stpop(struct node *t) {
                                   2020 ;	-----------------------------------------
                                   2021 ;	 function stpop
                                   2022 ;	-----------------------------------------
      00091C                       2023 _stpop:
      00091C AD 82            [24] 2024 	mov	r5,dpl
      00091E AE 83            [24] 2025 	mov	r6,dph
      000920 AF F0            [24] 2026 	mov	r7,b
                                   2027 ;	walk.c:190: if (sp == -1) return 0;
      000922 90rB4r00         [24] 2028 	mov	dptr,#_sp
      000925 E0               [24] 2029 	movx	a,@dptr
      000926 FB               [12] 2030 	mov	r3,a
      000927 A3               [24] 2031 	inc	dptr
      000928 E0               [24] 2032 	movx	a,@dptr
      000929 FC               [12] 2033 	mov	r4,a
      00092A BB FF 07         [24] 2034 	cjne	r3,#0xff,00102$
      00092D BC FF 04         [24] 2035 	cjne	r4,#0xff,00102$
      000930 90 00 00         [24] 2036 	mov	dptr,#0x0000
      000933 22               [24] 2037 	ret
      000934                       2038 00102$:
                                   2039 ;	walk.c:191: *t = stack[sp];
      000934 EB               [12] 2040 	mov	a,r3
      000935 2B               [12] 2041 	add	a,r3
      000936 FB               [12] 2042 	mov	r3,a
      000937 EC               [12] 2043 	mov	a,r4
      000938 33               [12] 2044 	rlc	a
      000939 FC               [12] 2045 	mov	r4,a
      00093A EB               [12] 2046 	mov	a,r3
      00093B 2B               [12] 2047 	add	a,r3
      00093C FB               [12] 2048 	mov	r3,a
      00093D EC               [12] 2049 	mov	a,r4
      00093E 33               [12] 2050 	rlc	a
      00093F FC               [12] 2051 	mov	r4,a
      000940 EB               [12] 2052 	mov	a,r3
      000941 24r00            [12] 2053 	add	a,#_stack
      000943 FB               [12] 2054 	mov	r3,a
      000944 EC               [12] 2055 	mov	a,r4
      000945 34s24            [12] 2056 	addc	a,#(_stack >> 8)
      000947 FC               [12] 2057 	mov	r4,a
      000948 7A 00            [12] 2058 	mov	r2,#0x00
      00094A 74 04            [12] 2059 	mov	a,#0x04
      00094C C0 E0            [24] 2060 	push	acc
      00094E E4               [12] 2061 	clr	a
      00094F C0 E0            [24] 2062 	push	acc
      000951 C0 03            [24] 2063 	push	ar3
      000953 C0 04            [24] 2064 	push	ar4
      000955 C0 02            [24] 2065 	push	ar2
      000957 8D 82            [24] 2066 	mov	dpl,r5
      000959 8E 83            [24] 2067 	mov	dph,r6
      00095B 8F F0            [24] 2068 	mov	b,r7
      00095D 12r00r00         [24] 2069 	lcall	___memcpy
      000960 E5 81            [12] 2070 	mov	a,sp
      000962 24 FB            [12] 2071 	add	a,#0xfb
      000964 F5 81            [12] 2072 	mov	sp,a
                                   2073 ;	walk.c:192: sp--;
      000966 90rB4r00         [24] 2074 	mov	dptr,#_sp
      000969 E0               [24] 2075 	movx	a,@dptr
      00096A 24 FF            [12] 2076 	add	a,#0xff
      00096C FE               [12] 2077 	mov	r6,a
      00096D A3               [24] 2078 	inc	dptr
      00096E E0               [24] 2079 	movx	a,@dptr
      00096F 34 FF            [12] 2080 	addc	a,#0xff
      000971 FF               [12] 2081 	mov	r7,a
      000972 90rB4r00         [24] 2082 	mov	dptr,#_sp
      000975 EE               [12] 2083 	mov	a,r6
      000976 F0               [24] 2084 	movx	@dptr,a
      000977 EF               [12] 2085 	mov	a,r7
      000978 A3               [24] 2086 	inc	dptr
      000979 F0               [24] 2087 	movx	@dptr,a
                                   2088 ;	walk.c:193: return 1;
      00097A 90 00 01         [24] 2089 	mov	dptr,#0x0001
                                   2090 ;	walk.c:194: }
      00097D 22               [24] 2091 	ret
                                   2092 	.area CSEG    (CODE)
                                   2093 	.area CONST   (CODE)
      000000                       2094 _neigh:
      000000 FF FF                 2095 	.byte #0xff, #0xff	; -1
      000002 FF FF                 2096 	.byte #0xff, #0xff	; -1
      000004 FF FF                 2097 	.byte #0xff, #0xff	; -1
      000006 00 00                 2098 	.byte #0x00, #0x00	;  0
      000008 FF FF                 2099 	.byte #0xff, #0xff	; -1
      00000A 01 00                 2100 	.byte #0x01, #0x00	;  1
      00000C 00 00                 2101 	.byte #0x00, #0x00	;  0
      00000E FF FF                 2102 	.byte #0xff, #0xff	; -1
      000010 00 00                 2103 	.byte #0x00, #0x00	;  0
      000012 01 00                 2104 	.byte #0x01, #0x00	;  1
      000014 01 00                 2105 	.byte #0x01, #0x00	;  1
      000016 FF FF                 2106 	.byte #0xff, #0xff	; -1
      000018 01 00                 2107 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2108 	.byte #0x00, #0x00	;  0
      00001C 01 00                 2109 	.byte #0x01, #0x00	;  1
      00001E 01 00                 2110 	.byte #0x01, #0x00	;  1
                                   2111 	.area CONST   (CODE)
      000020                       2112 ___str_0:
      000020 1B                    2113 	.db 0x1b
      000021 5B 25 64 3B 25 64 48  2114 	.ascii "[%d;%dHo"
             6F
      000029 00                    2115 	.db 0x00
                                   2116 	.area CSEG    (CODE)
                                   2117 	.area CONST   (CODE)
      00002A                       2118 ___str_1:
      00002A 4D 65 6D 6F 72 79 20  2119 	.ascii "Memory error"
             65 72 72 6F 72
      000036 00                    2120 	.db 0x00
                                   2121 	.area CSEG    (CODE)
                                   2122 	.area CONST   (CODE)
      000037                       2123 ___str_2:
      000037 1B                    2124 	.db 0x1b
      000038 5B 25 64 3B 25 64 48  2125 	.ascii "[%d;%dH."
             2E
      000040 00                    2126 	.db 0x00
                                   2127 	.area CSEG    (CODE)
                                   2128 	.area CONST   (CODE)
      000041                       2129 ___str_3:
      000041 1B                    2130 	.db 0x1b
      000042 5B 32 4A              2131 	.ascii "[2J"
      000045 00                    2132 	.db 0x00
                                   2133 	.area CSEG    (CODE)
                                   2134 	.area XINIT   (CODE)
                                   2135 	.area CABS    (ABS,CODE)
