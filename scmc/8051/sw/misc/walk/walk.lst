                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _walk
                                     13 	.globl _int0
                                     14 	.globl _srand
                                     15 	.globl _rand
                                     16 	.globl _puts
                                     17 	.globl _printf
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _FL
                                     25 	.globl _P
                                     26 	.globl _TF2
                                     27 	.globl _EXF2
                                     28 	.globl _RCLK
                                     29 	.globl _TCLK
                                     30 	.globl _EXEN2
                                     31 	.globl _TR2
                                     32 	.globl _C_T2
                                     33 	.globl _CP_RL2
                                     34 	.globl _T2CON_7
                                     35 	.globl _T2CON_6
                                     36 	.globl _T2CON_5
                                     37 	.globl _T2CON_4
                                     38 	.globl _T2CON_3
                                     39 	.globl _T2CON_2
                                     40 	.globl _T2CON_1
                                     41 	.globl _T2CON_0
                                     42 	.globl _PT2
                                     43 	.globl _PS
                                     44 	.globl _PT1
                                     45 	.globl _PX1
                                     46 	.globl _PT0
                                     47 	.globl _PX0
                                     48 	.globl _RD
                                     49 	.globl _WR
                                     50 	.globl _T1
                                     51 	.globl _T0
                                     52 	.globl _INT1
                                     53 	.globl _INT0
                                     54 	.globl _TXD
                                     55 	.globl _RXD
                                     56 	.globl _P3_7
                                     57 	.globl _P3_6
                                     58 	.globl _P3_5
                                     59 	.globl _P3_4
                                     60 	.globl _P3_3
                                     61 	.globl _P3_2
                                     62 	.globl _P3_1
                                     63 	.globl _P3_0
                                     64 	.globl _EA
                                     65 	.globl _ET2
                                     66 	.globl _ES
                                     67 	.globl _ET1
                                     68 	.globl _EX1
                                     69 	.globl _ET0
                                     70 	.globl _EX0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _SM0
                                     80 	.globl _SM1
                                     81 	.globl _SM2
                                     82 	.globl _REN
                                     83 	.globl _TB8
                                     84 	.globl _RB8
                                     85 	.globl _TI
                                     86 	.globl _RI
                                     87 	.globl _T2EX
                                     88 	.globl _T2
                                     89 	.globl _P1_7
                                     90 	.globl _P1_6
                                     91 	.globl _P1_5
                                     92 	.globl _P1_4
                                     93 	.globl _P1_3
                                     94 	.globl _P1_2
                                     95 	.globl _P1_1
                                     96 	.globl _P1_0
                                     97 	.globl _TF1
                                     98 	.globl _TR1
                                     99 	.globl _TF0
                                    100 	.globl _TR0
                                    101 	.globl _IE1
                                    102 	.globl _IT1
                                    103 	.globl _IE0
                                    104 	.globl _IT0
                                    105 	.globl _P0_7
                                    106 	.globl _P0_6
                                    107 	.globl _P0_5
                                    108 	.globl _P0_4
                                    109 	.globl _P0_3
                                    110 	.globl _P0_2
                                    111 	.globl _P0_1
                                    112 	.globl _P0_0
                                    113 	.globl _B
                                    114 	.globl _A
                                    115 	.globl _ACC
                                    116 	.globl _PSW
                                    117 	.globl _TH2
                                    118 	.globl _TL2
                                    119 	.globl _RCAP2H
                                    120 	.globl _RCAP2L
                                    121 	.globl _T2MOD
                                    122 	.globl _T2CON
                                    123 	.globl _IP
                                    124 	.globl _P3
                                    125 	.globl _IE
                                    126 	.globl _P2
                                    127 	.globl _SBUF
                                    128 	.globl _SCON
                                    129 	.globl _P1
                                    130 	.globl _TH1
                                    131 	.globl _TH0
                                    132 	.globl _TL1
                                    133 	.globl _TL0
                                    134 	.globl _TMOD
                                    135 	.globl _TCON
                                    136 	.globl _PCON
                                    137 	.globl _DPH
                                    138 	.globl _DPL
                                    139 	.globl _SP
                                    140 	.globl _P0
                                    141 	.globl _putchar
                                    142 	.globl _getchar
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000C8   166 _T2CON	=	0x00c8
                           0000C9   167 _T2MOD	=	0x00c9
                           0000CA   168 _RCAP2L	=	0x00ca
                           0000CB   169 _RCAP2H	=	0x00cb
                           0000CC   170 _TL2	=	0x00cc
                           0000CD   171 _TH2	=	0x00cd
                           0000D0   172 _PSW	=	0x00d0
                           0000E0   173 _ACC	=	0x00e0
                           0000E0   174 _A	=	0x00e0
                           0000F0   175 _B	=	0x00f0
                                    176 ;--------------------------------------------------------
                                    177 ; special function bits
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0_0	=	0x0080
                           000081   182 _P0_1	=	0x0081
                           000082   183 _P0_2	=	0x0082
                           000083   184 _P0_3	=	0x0083
                           000084   185 _P0_4	=	0x0084
                           000085   186 _P0_5	=	0x0085
                           000086   187 _P0_6	=	0x0086
                           000087   188 _P0_7	=	0x0087
                           000088   189 _IT0	=	0x0088
                           000089   190 _IE0	=	0x0089
                           00008A   191 _IT1	=	0x008a
                           00008B   192 _IE1	=	0x008b
                           00008C   193 _TR0	=	0x008c
                           00008D   194 _TF0	=	0x008d
                           00008E   195 _TR1	=	0x008e
                           00008F   196 _TF1	=	0x008f
                           000090   197 _P1_0	=	0x0090
                           000091   198 _P1_1	=	0x0091
                           000092   199 _P1_2	=	0x0092
                           000093   200 _P1_3	=	0x0093
                           000094   201 _P1_4	=	0x0094
                           000095   202 _P1_5	=	0x0095
                           000096   203 _P1_6	=	0x0096
                           000097   204 _P1_7	=	0x0097
                           000090   205 _T2	=	0x0090
                           000091   206 _T2EX	=	0x0091
                           000098   207 _RI	=	0x0098
                           000099   208 _TI	=	0x0099
                           00009A   209 _RB8	=	0x009a
                           00009B   210 _TB8	=	0x009b
                           00009C   211 _REN	=	0x009c
                           00009D   212 _SM2	=	0x009d
                           00009E   213 _SM1	=	0x009e
                           00009F   214 _SM0	=	0x009f
                           0000A0   215 _P2_0	=	0x00a0
                           0000A1   216 _P2_1	=	0x00a1
                           0000A2   217 _P2_2	=	0x00a2
                           0000A3   218 _P2_3	=	0x00a3
                           0000A4   219 _P2_4	=	0x00a4
                           0000A5   220 _P2_5	=	0x00a5
                           0000A6   221 _P2_6	=	0x00a6
                           0000A7   222 _P2_7	=	0x00a7
                           0000A8   223 _EX0	=	0x00a8
                           0000A9   224 _ET0	=	0x00a9
                           0000AA   225 _EX1	=	0x00aa
                           0000AB   226 _ET1	=	0x00ab
                           0000AC   227 _ES	=	0x00ac
                           0000AD   228 _ET2	=	0x00ad
                           0000AF   229 _EA	=	0x00af
                           0000B0   230 _P3_0	=	0x00b0
                           0000B1   231 _P3_1	=	0x00b1
                           0000B2   232 _P3_2	=	0x00b2
                           0000B3   233 _P3_3	=	0x00b3
                           0000B4   234 _P3_4	=	0x00b4
                           0000B5   235 _P3_5	=	0x00b5
                           0000B6   236 _P3_6	=	0x00b6
                           0000B7   237 _P3_7	=	0x00b7
                           0000B0   238 _RXD	=	0x00b0
                           0000B1   239 _TXD	=	0x00b1
                           0000B2   240 _INT0	=	0x00b2
                           0000B3   241 _INT1	=	0x00b3
                           0000B4   242 _T0	=	0x00b4
                           0000B5   243 _T1	=	0x00b5
                           0000B6   244 _WR	=	0x00b6
                           0000B7   245 _RD	=	0x00b7
                           0000B8   246 _PX0	=	0x00b8
                           0000B9   247 _PT0	=	0x00b9
                           0000BA   248 _PX1	=	0x00ba
                           0000BB   249 _PT1	=	0x00bb
                           0000BC   250 _PS	=	0x00bc
                           0000BD   251 _PT2	=	0x00bd
                           0000C8   252 _T2CON_0	=	0x00c8
                           0000C9   253 _T2CON_1	=	0x00c9
                           0000CA   254 _T2CON_2	=	0x00ca
                           0000CB   255 _T2CON_3	=	0x00cb
                           0000CC   256 _T2CON_4	=	0x00cc
                           0000CD   257 _T2CON_5	=	0x00cd
                           0000CE   258 _T2CON_6	=	0x00ce
                           0000CF   259 _T2CON_7	=	0x00cf
                           0000C8   260 _CP_RL2	=	0x00c8
                           0000C9   261 _C_T2	=	0x00c9
                           0000CA   262 _TR2	=	0x00ca
                           0000CB   263 _EXEN2	=	0x00cb
                           0000CC   264 _TCLK	=	0x00cc
                           0000CD   265 _RCLK	=	0x00cd
                           0000CE   266 _EXF2	=	0x00ce
                           0000CF   267 _TF2	=	0x00cf
                           0000D0   268 _P	=	0x00d0
                           0000D1   269 _FL	=	0x00d1
                           0000D2   270 _OV	=	0x00d2
                           0000D3   271 _RS0	=	0x00d3
                           0000D4   272 _RS1	=	0x00d4
                           0000D5   273 _F0	=	0x00d5
                           0000D6   274 _AC	=	0x00d6
                           0000D7   275 _CY	=	0x00d7
                                    276 ;--------------------------------------------------------
                                    277 ; overlayable register banks
                                    278 ;--------------------------------------------------------
                                    279 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        280 	.ds 8
                                    281 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 ;--------------------------------------------------------
                                    284 ; internal ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area DSEG    (DATA)
                                    287 ;--------------------------------------------------------
                                    288 ; overlayable items in internal ram 
                                    289 ;--------------------------------------------------------
                                    290 ;--------------------------------------------------------
                                    291 ; Stack segment in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 	.area	SSEG
      000000                        294 __start__stack:
      000000                        295 	.ds	1
                                    296 
                                    297 ;--------------------------------------------------------
                                    298 ; indirectly addressable internal ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area ISEG    (DATA)
      000000                        301 _i0:
      000000                        302 	.ds 1
                                    303 ;--------------------------------------------------------
                                    304 ; absolute internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area IABS    (ABS,DATA)
                                    307 	.area IABS    (ABS,DATA)
                                    308 ;--------------------------------------------------------
                                    309 ; bit data
                                    310 ;--------------------------------------------------------
                                    311 	.area BSEG    (BIT)
                                    312 ;--------------------------------------------------------
                                    313 ; paged external ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area PSEG    (PAG,XDATA)
                                    316 ;--------------------------------------------------------
                                    317 ; external ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area XSEG    (XDATA)
      000000                        320 _g:
      000000                        321 	.ds 9216
      002400                        322 _stack:
      002400                        323 	.ds 36864
      00B400                        324 _sp:
      00B400                        325 	.ds 2
      00B402                        326 _main_R_65536_62:
      00B402                        327 	.ds 2
                                    328 ;--------------------------------------------------------
                                    329 ; absolute external ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XABS    (ABS,XDATA)
                                    332 ;--------------------------------------------------------
                                    333 ; external initialized ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XISEG   (XDATA)
                                    336 	.area HOME    (CODE)
                                    337 	.area GSINIT0 (CODE)
                                    338 	.area GSINIT1 (CODE)
                                    339 	.area GSINIT2 (CODE)
                                    340 	.area GSINIT3 (CODE)
                                    341 	.area GSINIT4 (CODE)
                                    342 	.area GSINIT5 (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.area GSFINAL (CODE)
                                    345 	.area CSEG    (CODE)
                                    346 ;--------------------------------------------------------
                                    347 ; interrupt vector 
                                    348 ;--------------------------------------------------------
                                    349 	.area HOME    (CODE)
      000000                        350 __interrupt_vect:
      000000 02r00r00         [24]  351 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  352 	ljmp	_int0
                                    353 ;--------------------------------------------------------
                                    354 ; global & static initialisations
                                    355 ;--------------------------------------------------------
                                    356 	.area HOME    (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.area GSFINAL (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.globl __sdcc_gsinit_startup
                                    361 	.globl __sdcc_program_startup
                                    362 	.globl __start__stack
                                    363 	.globl __mcs51_genXINIT
                                    364 	.globl __mcs51_genXRAMCLEAR
                                    365 	.globl __mcs51_genRAMCLEAR
                                    366 ;------------------------------------------------------------
                                    367 ;Allocation info for local variables in function 'main'
                                    368 ;------------------------------------------------------------
                                    369 ;initial                   Allocated to stack - _bp +3
                                    370 ;i                         Allocated to stack - _bp +7
                                    371 ;j                         Allocated to registers r4 r5 
                                    372 ;sloc0                     Allocated to stack - _bp +1
                                    373 ;R                         Allocated with name '_main_R_65536_62'
                                    374 ;------------------------------------------------------------
                                    375 ;	walk.c:115: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  376 	mov	dptr,#_main_R_65536_62
      000003 74 FE            [12]  377 	mov	a,#0xfe
      000005 F0               [24]  378 	movx	@dptr,a
      000006 04               [12]  379 	inc	a
      000007 A3               [24]  380 	inc	dptr
      000008 F0               [24]  381 	movx	@dptr,a
                                    382 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  383 	ljmp	__sdcc_program_startup
                                    384 ;--------------------------------------------------------
                                    385 ; Home
                                    386 ;--------------------------------------------------------
                                    387 	.area HOME    (CODE)
                                    388 	.area HOME    (CODE)
      000006                        389 __sdcc_program_startup:
      000006 02r05rA4         [24]  390 	ljmp	_main
                                    391 ;	return from main will return to caller
                                    392 ;--------------------------------------------------------
                                    393 ; code
                                    394 ;--------------------------------------------------------
                                    395 	.area CSEG    (CODE)
                                    396 ;------------------------------------------------------------
                                    397 ;Allocation info for local variables in function 'putchar'
                                    398 ;------------------------------------------------------------
                                    399 ;c                         Allocated to registers 
                                    400 ;------------------------------------------------------------
                                    401 ;	walk.c:8: int putchar(int c) __naked {
                                    402 ;	-----------------------------------------
                                    403 ;	 function putchar
                                    404 ;	-----------------------------------------
      000000                        405 _putchar:
                                    406 ;	naked function: no prologue.
                                    407 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  408 	mov	a, dpl
      000002 02 00 30         [24]  409 	ljmp	0x0030
                                    410 ;	walk.c:14: }
                                    411 ;	naked function: no epilogue.
                                    412 ;------------------------------------------------------------
                                    413 ;Allocation info for local variables in function 'getchar'
                                    414 ;------------------------------------------------------------
                                    415 ;	walk.c:16: int getchar(void) __naked {
                                    416 ;	-----------------------------------------
                                    417 ;	 function getchar
                                    418 ;	-----------------------------------------
      000005                        419 _getchar:
                                    420 ;	naked function: no prologue.
                                    421 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  422 	lcall	0x0032
      000008 F5 82            [12]  423 	mov	dpl, a
      00000A 75 83 00         [24]  424 	mov	dph, #0
      00000D 22               [24]  425 	ret
                                    426 ;	walk.c:23: }
                                    427 ;	naked function: no epilogue.
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 'int0'
                                    430 ;------------------------------------------------------------
                                    431 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    432 ;	-----------------------------------------
                                    433 ;	 function int0
                                    434 ;	-----------------------------------------
      00000E                        435 _int0:
                           00000F   436 	ar7 = 0x0f
                           00000E   437 	ar6 = 0x0e
                           00000D   438 	ar5 = 0x0d
                           00000C   439 	ar4 = 0x0c
                           00000B   440 	ar3 = 0x0b
                           00000A   441 	ar2 = 0x0a
                           000009   442 	ar1 = 0x09
                           000008   443 	ar0 = 0x08
      00000E C0 D0            [24]  444 	push	psw
      000010 75 D0 08         [24]  445 	mov	psw,#0x08
                                    446 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  447 	mov	r0,#_i0
      000015 76 00            [12]  448 	mov	@r0,#0x00
                                    449 ;	walk.c:29: }
      000017 D0 D0            [24]  450 	pop	psw
      000019 32               [24]  451 	reti
                                    452 ;	eliminated unneeded push/pop dpl
                                    453 ;	eliminated unneeded push/pop dph
                                    454 ;	eliminated unneeded push/pop b
                                    455 ;	eliminated unneeded push/pop acc
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'reset'
                                    458 ;------------------------------------------------------------
                                    459 ;	walk.c:31: static void reset(void) __naked {
                                    460 ;	-----------------------------------------
                                    461 ;	 function reset
                                    462 ;	-----------------------------------------
      00001A                        463 _reset:
                                    464 ;	naked function: no prologue.
                                    465 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  466 	orl	pcon, #2
                                    467 ;	walk.c:35: }
                                    468 ;	naked function: no epilogue.
                                    469 ;------------------------------------------------------------
                                    470 ;Allocation info for local variables in function 'walk'
                                    471 ;------------------------------------------------------------
                                    472 ;nstart                    Allocated to registers 
                                    473 ;cur                       Allocated to stack - _bp +12
                                    474 ;t                         Allocated to stack - _bp +16
                                    475 ;j                         Allocated to stack - _bp +20
                                    476 ;f                         Allocated to stack - _bp +22
                                    477 ;sloc0                     Allocated to stack - _bp +1
                                    478 ;sloc1                     Allocated to stack - _bp +2
                                    479 ;sloc2                     Allocated to stack - _bp +3
                                    480 ;sloc3                     Allocated to stack - _bp +5
                                    481 ;sloc4                     Allocated to stack - _bp +6
                                    482 ;sloc5                     Allocated to stack - _bp +8
                                    483 ;sloc6                     Allocated to stack - _bp +9
                                    484 ;------------------------------------------------------------
                                    485 ;	walk.c:63: void walk(struct node *nstart) {
                                    486 ;	-----------------------------------------
                                    487 ;	 function walk
                                    488 ;	-----------------------------------------
      00001D                        489 _walk:
                           000007   490 	ar7 = 0x07
                           000006   491 	ar6 = 0x06
                           000005   492 	ar5 = 0x05
                           000004   493 	ar4 = 0x04
                           000003   494 	ar3 = 0x03
                           000002   495 	ar2 = 0x02
                           000001   496 	ar1 = 0x01
                           000000   497 	ar0 = 0x00
      00001D C0*00            [24]  498 	push	_bp
      00001F E5 81            [12]  499 	mov	a,sp
      000021 F5*00            [12]  500 	mov	_bp,a
      000023 24 17            [12]  501 	add	a,#0x17
      000025 F5 81            [12]  502 	mov	sp,a
      000027 AD 82            [24]  503 	mov	r5,dpl
      000029 AE 83            [24]  504 	mov	r6,dph
      00002B AF F0            [24]  505 	mov	r7,b
                                    506 ;	walk.c:67: cur = *nstart;
      00002D E5*00            [12]  507 	mov	a,_bp
      00002F 24 0C            [12]  508 	add	a,#0x0c
      000031 F9               [12]  509 	mov	r1,a
      000032 FA               [12]  510 	mov	r2,a
      000033 7B 00            [12]  511 	mov	r3,#0x00
      000035 7C 40            [12]  512 	mov	r4,#0x40
      000037 C0 01            [24]  513 	push	ar1
      000039 74 04            [12]  514 	mov	a,#0x04
      00003B C0 E0            [24]  515 	push	acc
      00003D E4               [12]  516 	clr	a
      00003E C0 E0            [24]  517 	push	acc
      000040 C0 05            [24]  518 	push	ar5
      000042 C0 06            [24]  519 	push	ar6
      000044 C0 07            [24]  520 	push	ar7
      000046 8A 82            [24]  521 	mov	dpl,r2
      000048 8B 83            [24]  522 	mov	dph,r3
      00004A 8C F0            [24]  523 	mov	b,r4
      00004C 12r00r00         [24]  524 	lcall	___memcpy
      00004F E5 81            [12]  525 	mov	a,sp
      000051 24 FB            [12]  526 	add	a,#0xfb
      000053 F5 81            [12]  527 	mov	sp,a
      000055 D0 01            [24]  528 	pop	ar1
                                    529 ;	walk.c:69: process:
      000057 E5*00            [12]  530 	mov	a,_bp
      000059 24 10            [12]  531 	add	a,#0x10
      00005B F8               [12]  532 	mov	r0,a
      00005C C0 00            [24]  533 	push	ar0
      00005E E5*00            [12]  534 	mov	a,_bp
      000060 24 05            [12]  535 	add	a,#0x05
      000062 F8               [12]  536 	mov	r0,a
      000063 A6 01            [24]  537 	mov	@r0,ar1
      000065 D0 00            [24]  538 	pop	ar0
      000067 88 06            [24]  539 	mov	ar6,r0
      000069 C0 00            [24]  540 	push	ar0
      00006B A8*00            [24]  541 	mov	r0,_bp
      00006D 08               [12]  542 	inc	r0
      00006E 08               [12]  543 	inc	r0
      00006F A6 01            [24]  544 	mov	@r0,ar1
      000071 D0 00            [24]  545 	pop	ar0
      000073 C0 01            [24]  546 	push	ar1
      000075 A9*00            [24]  547 	mov	r1,_bp
      000077 09               [12]  548 	inc	r1
      000078 A7 00            [24]  549 	mov	@r1,ar0
      00007A D0 01            [24]  550 	pop	ar1
      00007C C0 00            [24]  551 	push	ar0
      00007E E5*00            [12]  552 	mov	a,_bp
      000080 24 08            [12]  553 	add	a,#0x08
      000082 F8               [12]  554 	mov	r0,a
      000083 A6 01            [24]  555 	mov	@r0,ar1
      000085 D0 00            [24]  556 	pop	ar0
      000087 74 02            [12]  557 	mov	a,#0x02
      000089 29               [12]  558 	add	a,r1
      00008A FA               [12]  559 	mov	r2,a
      00008B                        560 00101$:
                                    561 ;	walk.c:70: g[cur.r][cur.c] = 0xaa;
      00008B 87 03            [24]  562 	mov	ar3,@r1
      00008D 09               [12]  563 	inc	r1
      00008E 87 04            [24]  564 	mov	ar4,@r1
      000090 19               [12]  565 	dec	r1
      000091 C0 06            [24]  566 	push	ar6
      000093 C0 02            [24]  567 	push	ar2
      000095 C0 01            [24]  568 	push	ar1
      000097 C0 00            [24]  569 	push	ar0
      000099 C0 03            [24]  570 	push	ar3
      00009B C0 04            [24]  571 	push	ar4
      00009D 90 00 C0         [24]  572 	mov	dptr,#0x00c0
      0000A0 12r00r00         [24]  573 	lcall	__mulint
      0000A3 AB 82            [24]  574 	mov	r3,dpl
      0000A5 AC 83            [24]  575 	mov	r4,dph
      0000A7 15 81            [12]  576 	dec	sp
      0000A9 15 81            [12]  577 	dec	sp
      0000AB D0 00            [24]  578 	pop	ar0
      0000AD D0 01            [24]  579 	pop	ar1
      0000AF D0 02            [24]  580 	pop	ar2
      0000B1 D0 06            [24]  581 	pop	ar6
      0000B3 EB               [12]  582 	mov	a,r3
      0000B4 24r00            [12]  583 	add	a,#_g
      0000B6 FB               [12]  584 	mov	r3,a
      0000B7 EC               [12]  585 	mov	a,r4
      0000B8 34s00            [12]  586 	addc	a,#(_g >> 8)
      0000BA FF               [12]  587 	mov	r7,a
      0000BB C0 00            [24]  588 	push	ar0
      0000BD A8 02            [24]  589 	mov	r0,ar2
      0000BF 86 04            [24]  590 	mov	ar4,@r0
      0000C1 08               [12]  591 	inc	r0
      0000C2 86 05            [24]  592 	mov	ar5,@r0
      0000C4 EC               [12]  593 	mov	a,r4
      0000C5 2B               [12]  594 	add	a,r3
      0000C6 F5 82            [12]  595 	mov	dpl,a
      0000C8 ED               [12]  596 	mov	a,r5
      0000C9 3F               [12]  597 	addc	a,r7
      0000CA F5 83            [12]  598 	mov	dph,a
      0000CC 74 AA            [12]  599 	mov	a,#0xaa
      0000CE F0               [24]  600 	movx	@dptr,a
                                    601 ;	walk.c:71: printf("\033[%d;%dHo", cur.r + 1, cur.c + 1);
      0000CF A8 02            [24]  602 	mov	r0,ar2
      0000D1 86 04            [24]  603 	mov	ar4,@r0
      0000D3 08               [12]  604 	inc	r0
      0000D4 86 05            [24]  605 	mov	ar5,@r0
      0000D6 D0 00            [24]  606 	pop	ar0
      0000D8 74 01            [12]  607 	mov	a,#0x01
      0000DA 2C               [12]  608 	add	a,r4
      0000DB FC               [12]  609 	mov	r4,a
      0000DC E4               [12]  610 	clr	a
      0000DD 3D               [12]  611 	addc	a,r5
      0000DE FF               [12]  612 	mov	r7,a
      0000DF 87 03            [24]  613 	mov	ar3,@r1
      0000E1 09               [12]  614 	inc	r1
      0000E2 87 05            [24]  615 	mov	ar5,@r1
      0000E4 19               [12]  616 	dec	r1
      0000E5 0B               [12]  617 	inc	r3
      0000E6 BB 00 01         [24]  618 	cjne	r3,#0x00,00210$
      0000E9 0D               [12]  619 	inc	r5
      0000EA                        620 00210$:
      0000EA C0 06            [24]  621 	push	ar6
      0000EC C0 02            [24]  622 	push	ar2
      0000EE C0 01            [24]  623 	push	ar1
      0000F0 C0 00            [24]  624 	push	ar0
      0000F2 C0 04            [24]  625 	push	ar4
      0000F4 C0 07            [24]  626 	push	ar7
      0000F6 C0 03            [24]  627 	push	ar3
      0000F8 C0 05            [24]  628 	push	ar5
      0000FA 74r10            [12]  629 	mov	a,#___str_0
      0000FC C0 E0            [24]  630 	push	acc
      0000FE 74s00            [12]  631 	mov	a,#(___str_0 >> 8)
      000100 C0 E0            [24]  632 	push	acc
      000102 74 80            [12]  633 	mov	a,#0x80
      000104 C0 E0            [24]  634 	push	acc
      000106 12r00r00         [24]  635 	lcall	_printf
      000109 E5 81            [12]  636 	mov	a,sp
      00010B 24 F9            [12]  637 	add	a,#0xf9
      00010D F5 81            [12]  638 	mov	sp,a
      00010F D0 00            [24]  639 	pop	ar0
      000111 D0 01            [24]  640 	pop	ar1
      000113 D0 02            [24]  641 	pop	ar2
      000115 D0 06            [24]  642 	pop	ar6
                                    643 ;	walk.c:111: return;
                                    644 ;	walk.c:74: for (j = 0, f = 0; j < NMAX; j++) {
      000117                        645 00144$:
      000117 C0 00            [24]  646 	push	ar0
      000119 E5*00            [12]  647 	mov	a,_bp
      00011B 24 16            [12]  648 	add	a,#0x16
      00011D F8               [12]  649 	mov	r0,a
      00011E E4               [12]  650 	clr	a
      00011F F6               [12]  651 	mov	@r0,a
      000120 08               [12]  652 	inc	r0
      000121 F6               [12]  653 	mov	@r0,a
      000122 E5*00            [12]  654 	mov	a,_bp
      000124 24 14            [12]  655 	add	a,#0x14
      000126 F8               [12]  656 	mov	r0,a
      000127 E4               [12]  657 	clr	a
      000128 F6               [12]  658 	mov	@r0,a
      000129 08               [12]  659 	inc	r0
      00012A F6               [12]  660 	mov	@r0,a
      00012B D0 00            [24]  661 	pop	ar0
      00012D                        662 00134$:
      00012D C0 00            [24]  663 	push	ar0
      00012F E5*00            [12]  664 	mov	a,_bp
      000131 24 14            [12]  665 	add	a,#0x14
      000133 F8               [12]  666 	mov	r0,a
      000134 C3               [12]  667 	clr	c
      000135 E6               [12]  668 	mov	a,@r0
      000136 94 04            [12]  669 	subb	a,#0x04
      000138 08               [12]  670 	inc	r0
      000139 E6               [12]  671 	mov	a,@r0
      00013A 64 80            [12]  672 	xrl	a,#0x80
      00013C 94 80            [12]  673 	subb	a,#0x80
      00013E D0 00            [24]  674 	pop	ar0
      000140 40 03            [24]  675 	jc	00211$
      000142 02r02rDE         [24]  676 	ljmp	00114$
      000145                        677 00211$:
                                    678 ;	walk.c:75: t.r = cur.r + neigh[j].r;
      000145 C0 00            [24]  679 	push	ar0
      000147 E5*00            [12]  680 	mov	a,_bp
      000149 24 03            [12]  681 	add	a,#0x03
      00014B F8               [12]  682 	mov	r0,a
      00014C E5*00            [12]  683 	mov	a,_bp
      00014E 24 10            [12]  684 	add	a,#0x10
      000150 F6               [12]  685 	mov	@r0,a
      000151 E5*00            [12]  686 	mov	a,_bp
      000153 24 06            [12]  687 	add	a,#0x06
      000155 F8               [12]  688 	mov	r0,a
      000156 E7               [12]  689 	mov	a,@r1
      000157 F6               [12]  690 	mov	@r0,a
      000158 09               [12]  691 	inc	r1
      000159 E7               [12]  692 	mov	a,@r1
      00015A 08               [12]  693 	inc	r0
      00015B F6               [12]  694 	mov	@r0,a
      00015C 19               [12]  695 	dec	r1
      00015D E5*00            [12]  696 	mov	a,_bp
      00015F 24 14            [12]  697 	add	a,#0x14
      000161 F8               [12]  698 	mov	r0,a
      000162 E6               [12]  699 	mov	a,@r0
      000163 26               [12]  700 	add	a,@r0
      000164 FB               [12]  701 	mov	r3,a
      000165 08               [12]  702 	inc	r0
      000166 E6               [12]  703 	mov	a,@r0
      000167 33               [12]  704 	rlc	a
      000168 FF               [12]  705 	mov	r7,a
      000169 EB               [12]  706 	mov	a,r3
      00016A 2B               [12]  707 	add	a,r3
      00016B FB               [12]  708 	mov	r3,a
      00016C EF               [12]  709 	mov	a,r7
      00016D 33               [12]  710 	rlc	a
      00016E FF               [12]  711 	mov	r7,a
      00016F EB               [12]  712 	mov	a,r3
      000170 24r00            [12]  713 	add	a,#_neigh
      000172 F5 82            [12]  714 	mov	dpl,a
      000174 EF               [12]  715 	mov	a,r7
      000175 34s00            [12]  716 	addc	a,#(_neigh >> 8)
      000177 F5 83            [12]  717 	mov	dph,a
      000179 E4               [12]  718 	clr	a
      00017A 93               [24]  719 	movc	a,@a+dptr
      00017B FC               [12]  720 	mov	r4,a
      00017C A3               [24]  721 	inc	dptr
      00017D E4               [12]  722 	clr	a
      00017E 93               [24]  723 	movc	a,@a+dptr
      00017F FD               [12]  724 	mov	r5,a
      000180 E5*00            [12]  725 	mov	a,_bp
      000182 24 06            [12]  726 	add	a,#0x06
      000184 F8               [12]  727 	mov	r0,a
      000185 EC               [12]  728 	mov	a,r4
      000186 26               [12]  729 	add	a,@r0
      000187 FC               [12]  730 	mov	r4,a
      000188 ED               [12]  731 	mov	a,r5
      000189 08               [12]  732 	inc	r0
      00018A 36               [12]  733 	addc	a,@r0
      00018B FD               [12]  734 	mov	r5,a
      00018C E5*00            [12]  735 	mov	a,_bp
      00018E 24 03            [12]  736 	add	a,#0x03
      000190 F8               [12]  737 	mov	r0,a
      000191 86 00            [24]  738 	mov	ar0,@r0
      000193 A6 04            [24]  739 	mov	@r0,ar4
      000195 08               [12]  740 	inc	r0
      000196 A6 05            [24]  741 	mov	@r0,ar5
      000198 18               [12]  742 	dec	r0
      000199 D0 00            [24]  743 	pop	ar0
                                    744 ;	walk.c:76: t.c = cur.c + neigh[j].c;
      00019B C0 01            [24]  745 	push	ar1
      00019D E5*00            [12]  746 	mov	a,_bp
      00019F 24 06            [12]  747 	add	a,#0x06
      0001A1 F9               [12]  748 	mov	r1,a
      0001A2 74 02            [12]  749 	mov	a,#0x02
      0001A4 28               [12]  750 	add	a,r0
      0001A5 F7               [12]  751 	mov	@r1,a
      0001A6 D0 01            [24]  752 	pop	ar1
      0001A8 C0 00            [24]  753 	push	ar0
      0001AA A8 02            [24]  754 	mov	r0,ar2
      0001AC 86 04            [24]  755 	mov	ar4,@r0
      0001AE 08               [12]  756 	inc	r0
      0001AF 86 05            [24]  757 	mov	ar5,@r0
      0001B1 EB               [12]  758 	mov	a,r3
      0001B2 24r00            [12]  759 	add	a,#_neigh
      0001B4 FB               [12]  760 	mov	r3,a
      0001B5 EF               [12]  761 	mov	a,r7
      0001B6 34s00            [12]  762 	addc	a,#(_neigh >> 8)
      0001B8 FF               [12]  763 	mov	r7,a
      0001B9 8B 82            [24]  764 	mov	dpl,r3
      0001BB 8F 83            [24]  765 	mov	dph,r7
      0001BD A3               [24]  766 	inc	dptr
      0001BE A3               [24]  767 	inc	dptr
      0001BF E4               [12]  768 	clr	a
      0001C0 93               [24]  769 	movc	a,@a+dptr
      0001C1 FB               [12]  770 	mov	r3,a
      0001C2 A3               [24]  771 	inc	dptr
      0001C3 E4               [12]  772 	clr	a
      0001C4 93               [24]  773 	movc	a,@a+dptr
      0001C5 FF               [12]  774 	mov	r7,a
      0001C6 EB               [12]  775 	mov	a,r3
      0001C7 2C               [12]  776 	add	a,r4
      0001C8 FC               [12]  777 	mov	r4,a
      0001C9 EF               [12]  778 	mov	a,r7
      0001CA 3D               [12]  779 	addc	a,r5
      0001CB FD               [12]  780 	mov	r5,a
      0001CC E5*00            [12]  781 	mov	a,_bp
      0001CE 24 06            [12]  782 	add	a,#0x06
      0001D0 F8               [12]  783 	mov	r0,a
      0001D1 86 00            [24]  784 	mov	ar0,@r0
      0001D3 A6 04            [24]  785 	mov	@r0,ar4
      0001D5 08               [12]  786 	inc	r0
      0001D6 A6 05            [24]  787 	mov	@r0,ar5
      0001D8 18               [12]  788 	dec	r0
      0001D9 D0 00            [24]  789 	pop	ar0
                                    790 ;	walk.c:77: if ((t.r < 0) || (t.r == ROWS) || (t.c < 0) || (t.c == COLS)) continue;
      0001DB 86 04            [24]  791 	mov	ar4,@r0
      0001DD 08               [12]  792 	inc	r0
      0001DE 86 03            [24]  793 	mov	ar3,@r0
      0001E0 18               [12]  794 	dec	r0
      0001E1 EB               [12]  795 	mov	a,r3
      0001E2 30 E7 03         [24]  796 	jnb	acc.7,00212$
      0001E5 02r02rCC         [24]  797 	ljmp	00113$
      0001E8                        798 00212$:
      0001E8 BC 30 06         [24]  799 	cjne	r4,#0x30,00213$
      0001EB BB 00 03         [24]  800 	cjne	r3,#0x00,00213$
      0001EE 02r02rCC         [24]  801 	ljmp	00113$
      0001F1                        802 00213$:
      0001F1 C0 00            [24]  803 	push	ar0
      0001F3 E5*00            [12]  804 	mov	a,_bp
      0001F5 24 06            [12]  805 	add	a,#0x06
      0001F7 F8               [12]  806 	mov	r0,a
      0001F8 86 00            [24]  807 	mov	ar0,@r0
      0001FA 86 05            [24]  808 	mov	ar5,@r0
      0001FC 08               [12]  809 	inc	r0
      0001FD 86 07            [24]  810 	mov	ar7,@r0
      0001FF 18               [12]  811 	dec	r0
      000200 D0 00            [24]  812 	pop	ar0
      000202 EF               [12]  813 	mov	a,r7
      000203 30 E7 03         [24]  814 	jnb	acc.7,00214$
      000206 02r02rCC         [24]  815 	ljmp	00113$
      000209                        816 00214$:
      000209 C0 00            [24]  817 	push	ar0
      00020B E5*00            [12]  818 	mov	a,_bp
      00020D 24 06            [12]  819 	add	a,#0x06
      00020F F8               [12]  820 	mov	r0,a
      000210 86 00            [24]  821 	mov	ar0,@r0
      000212 86 05            [24]  822 	mov	ar5,@r0
      000214 08               [12]  823 	inc	r0
      000215 86 07            [24]  824 	mov	ar7,@r0
      000217 18               [12]  825 	dec	r0
      000218 D0 00            [24]  826 	pop	ar0
      00021A BD C0 06         [24]  827 	cjne	r5,#0xc0,00215$
      00021D BF 00 03         [24]  828 	cjne	r7,#0x00,00215$
      000220 02r02rCC         [24]  829 	ljmp	00113$
      000223                        830 00215$:
                                    831 ;	walk.c:79: if (g[t.r][t.c] == 0x55) f++;
      000223 C0 06            [24]  832 	push	ar6
      000225 C0 02            [24]  833 	push	ar2
      000227 C0 01            [24]  834 	push	ar1
      000229 C0 00            [24]  835 	push	ar0
      00022B C0 04            [24]  836 	push	ar4
      00022D C0 03            [24]  837 	push	ar3
      00022F 90 00 C0         [24]  838 	mov	dptr,#0x00c0
      000232 12r00r00         [24]  839 	lcall	__mulint
      000235 AD 82            [24]  840 	mov	r5,dpl
      000237 AF 83            [24]  841 	mov	r7,dph
      000239 15 81            [12]  842 	dec	sp
      00023B 15 81            [12]  843 	dec	sp
      00023D D0 00            [24]  844 	pop	ar0
      00023F D0 01            [24]  845 	pop	ar1
      000241 D0 02            [24]  846 	pop	ar2
      000243 D0 06            [24]  847 	pop	ar6
      000245 C0 00            [24]  848 	push	ar0
      000247 E5*00            [12]  849 	mov	a,_bp
      000249 24 03            [12]  850 	add	a,#0x03
      00024B F8               [12]  851 	mov	r0,a
      00024C ED               [12]  852 	mov	a,r5
      00024D 24r00            [12]  853 	add	a,#_g
      00024F F6               [12]  854 	mov	@r0,a
      000250 EF               [12]  855 	mov	a,r7
      000251 34s00            [12]  856 	addc	a,#(_g >> 8)
      000253 08               [12]  857 	inc	r0
      000254 F6               [12]  858 	mov	@r0,a
      000255 E5*00            [12]  859 	mov	a,_bp
      000257 24 06            [12]  860 	add	a,#0x06
      000259 F8               [12]  861 	mov	r0,a
      00025A 86 00            [24]  862 	mov	ar0,@r0
      00025C 86 03            [24]  863 	mov	ar3,@r0
      00025E 08               [12]  864 	inc	r0
      00025F 86 04            [24]  865 	mov	ar4,@r0
      000261 18               [12]  866 	dec	r0
      000262 E5*00            [12]  867 	mov	a,_bp
      000264 24 03            [12]  868 	add	a,#0x03
      000266 F8               [12]  869 	mov	r0,a
      000267 EB               [12]  870 	mov	a,r3
      000268 26               [12]  871 	add	a,@r0
      000269 F5 82            [12]  872 	mov	dpl,a
      00026B EC               [12]  873 	mov	a,r4
      00026C 08               [12]  874 	inc	r0
      00026D 36               [12]  875 	addc	a,@r0
      00026E F5 83            [12]  876 	mov	dph,a
      000270 D0 00            [24]  877 	pop	ar0
      000272 E0               [24]  878 	movx	a,@dptr
      000273 FC               [12]  879 	mov	r4,a
      000274 BC 55 11         [24]  880 	cjne	r4,#0x55,00111$
      000277 C0 00            [24]  881 	push	ar0
      000279 E5*00            [12]  882 	mov	a,_bp
      00027B 24 16            [12]  883 	add	a,#0x16
      00027D F8               [12]  884 	mov	r0,a
      00027E 06               [12]  885 	inc	@r0
      00027F B6 00 02         [24]  886 	cjne	@r0,#0x00,00218$
      000282 08               [12]  887 	inc	r0
      000283 06               [12]  888 	inc	@r0
      000284                        889 00218$:
      000284 D0 00            [24]  890 	pop	ar0
      000286 80 44            [24]  891 	sjmp	00113$
      000288                        892 00111$:
                                    893 ;	walk.c:80: else if (g[t.r][t.c] != 0xaa) {
      000288 ED               [12]  894 	mov	a,r5
      000289 24r00            [12]  895 	add	a,#_g
      00028B FD               [12]  896 	mov	r5,a
      00028C EF               [12]  897 	mov	a,r7
      00028D 34s00            [12]  898 	addc	a,#(_g >> 8)
      00028F FF               [12]  899 	mov	r7,a
      000290 C0 00            [24]  900 	push	ar0
      000292 E5*00            [12]  901 	mov	a,_bp
      000294 24 06            [12]  902 	add	a,#0x06
      000296 F8               [12]  903 	mov	r0,a
      000297 86 00            [24]  904 	mov	ar0,@r0
      000299 86 03            [24]  905 	mov	ar3,@r0
      00029B 08               [12]  906 	inc	r0
      00029C 86 04            [24]  907 	mov	ar4,@r0
      00029E 18               [12]  908 	dec	r0
      00029F D0 00            [24]  909 	pop	ar0
      0002A1 EB               [12]  910 	mov	a,r3
      0002A2 2D               [12]  911 	add	a,r5
      0002A3 F5 82            [12]  912 	mov	dpl,a
      0002A5 EC               [12]  913 	mov	a,r4
      0002A6 3F               [12]  914 	addc	a,r7
      0002A7 F5 83            [12]  915 	mov	dph,a
      0002A9 E0               [24]  916 	movx	a,@dptr
      0002AA FF               [12]  917 	mov	r7,a
      0002AB BF AA 02         [24]  918 	cjne	r7,#0xaa,00219$
      0002AE 80 1C            [24]  919 	sjmp	00113$
      0002B0                        920 00219$:
                                    921 ;	walk.c:81: (void)puts("Memory error");
      0002B0 90r00r1A         [24]  922 	mov	dptr,#___str_1
      0002B3 75 F0 80         [24]  923 	mov	b,#0x80
      0002B6 C0 06            [24]  924 	push	ar6
      0002B8 C0 02            [24]  925 	push	ar2
      0002BA C0 01            [24]  926 	push	ar1
      0002BC C0 00            [24]  927 	push	ar0
      0002BE 12r00r00         [24]  928 	lcall	_puts
      0002C1 D0 00            [24]  929 	pop	ar0
      0002C3 D0 01            [24]  930 	pop	ar1
      0002C5 D0 02            [24]  931 	pop	ar2
      0002C7 D0 06            [24]  932 	pop	ar6
                                    933 ;	walk.c:82: reset();
      0002C9 12r00r1A         [24]  934 	lcall	_reset
      0002CC                        935 00113$:
                                    936 ;	walk.c:74: for (j = 0, f = 0; j < NMAX; j++) {
      0002CC C0 00            [24]  937 	push	ar0
      0002CE E5*00            [12]  938 	mov	a,_bp
      0002D0 24 14            [12]  939 	add	a,#0x14
      0002D2 F8               [12]  940 	mov	r0,a
      0002D3 06               [12]  941 	inc	@r0
      0002D4 B6 00 02         [24]  942 	cjne	@r0,#0x00,00220$
      0002D7 08               [12]  943 	inc	r0
      0002D8 06               [12]  944 	inc	@r0
      0002D9                        945 00220$:
      0002D9 D0 00            [24]  946 	pop	ar0
      0002DB 02r01r2D         [24]  947 	ljmp	00134$
      0002DE                        948 00114$:
                                    949 ;	walk.c:86: if (f) {
      0002DE C0 00            [24]  950 	push	ar0
      0002E0 E5*00            [12]  951 	mov	a,_bp
      0002E2 24 16            [12]  952 	add	a,#0x16
      0002E4 F8               [12]  953 	mov	r0,a
      0002E5 E6               [12]  954 	mov	a,@r0
      0002E6 08               [12]  955 	inc	r0
      0002E7 46               [12]  956 	orl	a,@r0
      0002E8 D0 00            [24]  957 	pop	ar0
      0002EA 70 03            [24]  958 	jnz	00221$
      0002EC 02r05r22         [24]  959 	ljmp	00129$
      0002EF                        960 00221$:
                                    961 ;	walk.c:87: while (1) {
      0002EF                        962 00126$:
                                    963 ;	walk.c:88: j = rand() % NMAX;
      0002EF C0 06            [24]  964 	push	ar6
      0002F1 C0 02            [24]  965 	push	ar2
      0002F3 C0 01            [24]  966 	push	ar1
      0002F5 C0 00            [24]  967 	push	ar0
      0002F7 12r00r00         [24]  968 	lcall	_rand
      0002FA AD 82            [24]  969 	mov	r5,dpl
      0002FC AF 83            [24]  970 	mov	r7,dph
      0002FE 74 04            [12]  971 	mov	a,#0x04
      000300 C0 E0            [24]  972 	push	acc
      000302 E4               [12]  973 	clr	a
      000303 C0 E0            [24]  974 	push	acc
      000305 8D 82            [24]  975 	mov	dpl,r5
      000307 8F 83            [24]  976 	mov	dph,r7
      000309 12r00r00         [24]  977 	lcall	__modsint
      00030C AD 82            [24]  978 	mov	r5,dpl
      00030E AF 83            [24]  979 	mov	r7,dph
      000310 15 81            [12]  980 	dec	sp
      000312 15 81            [12]  981 	dec	sp
      000314 D0 00            [24]  982 	pop	ar0
      000316 D0 01            [24]  983 	pop	ar1
      000318 D0 02            [24]  984 	pop	ar2
      00031A D0 06            [24]  985 	pop	ar6
      00031C C0 00            [24]  986 	push	ar0
      00031E E5*00            [12]  987 	mov	a,_bp
      000320 24 14            [12]  988 	add	a,#0x14
      000322 F8               [12]  989 	mov	r0,a
      000323 A6 05            [24]  990 	mov	@r0,ar5
      000325 08               [12]  991 	inc	r0
      000326 A6 07            [24]  992 	mov	@r0,ar7
                                    993 ;	walk.c:89: t.r = cur.r + neigh[j].r;
      000328 E5*00            [12]  994 	mov	a,_bp
      00032A 24 06            [12]  995 	add	a,#0x06
      00032C F8               [12]  996 	mov	r0,a
      00032D E5*00            [12]  997 	mov	a,_bp
      00032F 24 10            [12]  998 	add	a,#0x10
      000331 F6               [12]  999 	mov	@r0,a
      000332 E5*00            [12] 1000 	mov	a,_bp
      000334 24 03            [12] 1001 	add	a,#0x03
      000336 F8               [12] 1002 	mov	r0,a
      000337 E7               [12] 1003 	mov	a,@r1
      000338 F6               [12] 1004 	mov	@r0,a
      000339 09               [12] 1005 	inc	r1
      00033A E7               [12] 1006 	mov	a,@r1
      00033B 08               [12] 1007 	inc	r0
      00033C F6               [12] 1008 	mov	@r0,a
      00033D 19               [12] 1009 	dec	r1
      00033E E5*00            [12] 1010 	mov	a,_bp
      000340 24 14            [12] 1011 	add	a,#0x14
      000342 F8               [12] 1012 	mov	r0,a
      000343 E6               [12] 1013 	mov	a,@r0
      000344 26               [12] 1014 	add	a,@r0
      000345 FC               [12] 1015 	mov	r4,a
      000346 08               [12] 1016 	inc	r0
      000347 E6               [12] 1017 	mov	a,@r0
      000348 33               [12] 1018 	rlc	a
      000349 FD               [12] 1019 	mov	r5,a
      00034A EC               [12] 1020 	mov	a,r4
      00034B 2C               [12] 1021 	add	a,r4
      00034C FC               [12] 1022 	mov	r4,a
      00034D ED               [12] 1023 	mov	a,r5
      00034E 33               [12] 1024 	rlc	a
      00034F FD               [12] 1025 	mov	r5,a
      000350 EC               [12] 1026 	mov	a,r4
      000351 24r00            [12] 1027 	add	a,#_neigh
      000353 F5 82            [12] 1028 	mov	dpl,a
      000355 ED               [12] 1029 	mov	a,r5
      000356 34s00            [12] 1030 	addc	a,#(_neigh >> 8)
      000358 F5 83            [12] 1031 	mov	dph,a
      00035A E4               [12] 1032 	clr	a
      00035B 93               [24] 1033 	movc	a,@a+dptr
      00035C FB               [12] 1034 	mov	r3,a
      00035D A3               [24] 1035 	inc	dptr
      00035E E4               [12] 1036 	clr	a
      00035F 93               [24] 1037 	movc	a,@a+dptr
      000360 FF               [12] 1038 	mov	r7,a
      000361 E5*00            [12] 1039 	mov	a,_bp
      000363 24 03            [12] 1040 	add	a,#0x03
      000365 F8               [12] 1041 	mov	r0,a
      000366 EB               [12] 1042 	mov	a,r3
      000367 26               [12] 1043 	add	a,@r0
      000368 FB               [12] 1044 	mov	r3,a
      000369 EF               [12] 1045 	mov	a,r7
      00036A 08               [12] 1046 	inc	r0
      00036B 36               [12] 1047 	addc	a,@r0
      00036C FF               [12] 1048 	mov	r7,a
      00036D E5*00            [12] 1049 	mov	a,_bp
      00036F 24 06            [12] 1050 	add	a,#0x06
      000371 F8               [12] 1051 	mov	r0,a
      000372 86 00            [24] 1052 	mov	ar0,@r0
      000374 A6 03            [24] 1053 	mov	@r0,ar3
      000376 08               [12] 1054 	inc	r0
      000377 A6 07            [24] 1055 	mov	@r0,ar7
      000379 18               [12] 1056 	dec	r0
                                   1057 ;	walk.c:90: t.c = cur.c + neigh[j].c;
      00037A E5*00            [12] 1058 	mov	a,_bp
      00037C 24 06            [12] 1059 	add	a,#0x06
      00037E F8               [12] 1060 	mov	r0,a
      00037F 74 02            [12] 1061 	mov	a,#0x02
      000381 2E               [12] 1062 	add	a,r6
      000382 F6               [12] 1063 	mov	@r0,a
      000383 A8 02            [24] 1064 	mov	r0,ar2
      000385 86 03            [24] 1065 	mov	ar3,@r0
      000387 08               [12] 1066 	inc	r0
      000388 86 07            [24] 1067 	mov	ar7,@r0
      00038A EC               [12] 1068 	mov	a,r4
      00038B 24r00            [12] 1069 	add	a,#_neigh
      00038D FC               [12] 1070 	mov	r4,a
      00038E ED               [12] 1071 	mov	a,r5
      00038F 34s00            [12] 1072 	addc	a,#(_neigh >> 8)
      000391 FD               [12] 1073 	mov	r5,a
      000392 8C 82            [24] 1074 	mov	dpl,r4
      000394 8D 83            [24] 1075 	mov	dph,r5
      000396 A3               [24] 1076 	inc	dptr
      000397 A3               [24] 1077 	inc	dptr
      000398 E4               [12] 1078 	clr	a
      000399 93               [24] 1079 	movc	a,@a+dptr
      00039A FC               [12] 1080 	mov	r4,a
      00039B A3               [24] 1081 	inc	dptr
      00039C E4               [12] 1082 	clr	a
      00039D 93               [24] 1083 	movc	a,@a+dptr
      00039E FD               [12] 1084 	mov	r5,a
      00039F EC               [12] 1085 	mov	a,r4
      0003A0 2B               [12] 1086 	add	a,r3
      0003A1 FB               [12] 1087 	mov	r3,a
      0003A2 ED               [12] 1088 	mov	a,r5
      0003A3 3F               [12] 1089 	addc	a,r7
      0003A4 FF               [12] 1090 	mov	r7,a
      0003A5 E5*00            [12] 1091 	mov	a,_bp
      0003A7 24 06            [12] 1092 	add	a,#0x06
      0003A9 F8               [12] 1093 	mov	r0,a
      0003AA 86 00            [24] 1094 	mov	ar0,@r0
      0003AC A6 03            [24] 1095 	mov	@r0,ar3
      0003AE 08               [12] 1096 	inc	r0
      0003AF A6 07            [24] 1097 	mov	@r0,ar7
      0003B1 18               [12] 1098 	dec	r0
                                   1099 ;	walk.c:91: if ((t.r < 0) || (t.r == ROWS) || (t.c < 0) || (t.c == COLS)) continue;
      0003B2 A8 06            [24] 1100 	mov	r0,ar6
      0003B4 86 04            [24] 1101 	mov	ar4,@r0
      0003B6 08               [12] 1102 	inc	r0
      0003B7 86 03            [24] 1103 	mov	ar3,@r0
      0003B9 D0 00            [24] 1104 	pop	ar0
      0003BB EB               [12] 1105 	mov	a,r3
      0003BC 30 E7 03         [24] 1106 	jnb	acc.7,00222$
      0003BF 02r02rEF         [24] 1107 	ljmp	00126$
      0003C2                       1108 00222$:
      0003C2 BC 30 06         [24] 1109 	cjne	r4,#0x30,00223$
      0003C5 BB 00 03         [24] 1110 	cjne	r3,#0x00,00223$
      0003C8 02r02rEF         [24] 1111 	ljmp	00126$
      0003CB                       1112 00223$:
      0003CB C0 00            [24] 1113 	push	ar0
      0003CD E5*00            [12] 1114 	mov	a,_bp
      0003CF 24 06            [12] 1115 	add	a,#0x06
      0003D1 F8               [12] 1116 	mov	r0,a
      0003D2 86 00            [24] 1117 	mov	ar0,@r0
      0003D4 86 05            [24] 1118 	mov	ar5,@r0
      0003D6 08               [12] 1119 	inc	r0
      0003D7 86 07            [24] 1120 	mov	ar7,@r0
      0003D9 18               [12] 1121 	dec	r0
      0003DA D0 00            [24] 1122 	pop	ar0
      0003DC EF               [12] 1123 	mov	a,r7
      0003DD 30 E7 03         [24] 1124 	jnb	acc.7,00224$
      0003E0 02r02rEF         [24] 1125 	ljmp	00126$
      0003E3                       1126 00224$:
      0003E3 C0 00            [24] 1127 	push	ar0
      0003E5 E5*00            [12] 1128 	mov	a,_bp
      0003E7 24 06            [12] 1129 	add	a,#0x06
      0003E9 F8               [12] 1130 	mov	r0,a
      0003EA 86 00            [24] 1131 	mov	ar0,@r0
      0003EC 86 05            [24] 1132 	mov	ar5,@r0
      0003EE 08               [12] 1133 	inc	r0
      0003EF 86 07            [24] 1134 	mov	ar7,@r0
      0003F1 18               [12] 1135 	dec	r0
      0003F2 D0 00            [24] 1136 	pop	ar0
      0003F4 BD C0 06         [24] 1137 	cjne	r5,#0xc0,00225$
      0003F7 BF 00 03         [24] 1138 	cjne	r7,#0x00,00225$
      0003FA 02r02rEF         [24] 1139 	ljmp	00126$
      0003FD                       1140 00225$:
                                   1141 ;	walk.c:93: if (g[t.r][t.c] == 0xaa) continue;
      0003FD C0 06            [24] 1142 	push	ar6
      0003FF C0 02            [24] 1143 	push	ar2
      000401 C0 01            [24] 1144 	push	ar1
      000403 C0 00            [24] 1145 	push	ar0
      000405 C0 04            [24] 1146 	push	ar4
      000407 C0 03            [24] 1147 	push	ar3
      000409 90 00 C0         [24] 1148 	mov	dptr,#0x00c0
      00040C 12r00r00         [24] 1149 	lcall	__mulint
      00040F AD 82            [24] 1150 	mov	r5,dpl
      000411 AF 83            [24] 1151 	mov	r7,dph
      000413 15 81            [12] 1152 	dec	sp
      000415 15 81            [12] 1153 	dec	sp
      000417 D0 00            [24] 1154 	pop	ar0
      000419 D0 01            [24] 1155 	pop	ar1
      00041B D0 02            [24] 1156 	pop	ar2
      00041D D0 06            [24] 1157 	pop	ar6
      00041F C0 00            [24] 1158 	push	ar0
      000421 E5*00            [12] 1159 	mov	a,_bp
      000423 24 03            [12] 1160 	add	a,#0x03
      000425 F8               [12] 1161 	mov	r0,a
      000426 ED               [12] 1162 	mov	a,r5
      000427 24r00            [12] 1163 	add	a,#_g
      000429 F6               [12] 1164 	mov	@r0,a
      00042A EF               [12] 1165 	mov	a,r7
      00042B 34s00            [12] 1166 	addc	a,#(_g >> 8)
      00042D 08               [12] 1167 	inc	r0
      00042E F6               [12] 1168 	mov	@r0,a
      00042F E5*00            [12] 1169 	mov	a,_bp
      000431 24 06            [12] 1170 	add	a,#0x06
      000433 F8               [12] 1171 	mov	r0,a
      000434 86 00            [24] 1172 	mov	ar0,@r0
      000436 86 03            [24] 1173 	mov	ar3,@r0
      000438 08               [12] 1174 	inc	r0
      000439 86 04            [24] 1175 	mov	ar4,@r0
      00043B 18               [12] 1176 	dec	r0
      00043C E5*00            [12] 1177 	mov	a,_bp
      00043E 24 03            [12] 1178 	add	a,#0x03
      000440 F8               [12] 1179 	mov	r0,a
      000441 EB               [12] 1180 	mov	a,r3
      000442 26               [12] 1181 	add	a,@r0
      000443 F5 82            [12] 1182 	mov	dpl,a
      000445 EC               [12] 1183 	mov	a,r4
      000446 08               [12] 1184 	inc	r0
      000447 36               [12] 1185 	addc	a,@r0
      000448 F5 83            [12] 1186 	mov	dph,a
      00044A D0 00            [24] 1187 	pop	ar0
      00044C E0               [24] 1188 	movx	a,@dptr
      00044D FC               [12] 1189 	mov	r4,a
      00044E BC AA 03         [24] 1190 	cjne	r4,#0xaa,00226$
      000451 02r02rEF         [24] 1191 	ljmp	00126$
      000454                       1192 00226$:
                                   1193 ;	walk.c:94: else if (g[t.r][t.c] != 0x55) {
      000454 ED               [12] 1194 	mov	a,r5
      000455 24r00            [12] 1195 	add	a,#_g
      000457 FD               [12] 1196 	mov	r5,a
      000458 EF               [12] 1197 	mov	a,r7
      000459 34s00            [12] 1198 	addc	a,#(_g >> 8)
      00045B FF               [12] 1199 	mov	r7,a
      00045C C0 00            [24] 1200 	push	ar0
      00045E E5*00            [12] 1201 	mov	a,_bp
      000460 24 06            [12] 1202 	add	a,#0x06
      000462 F8               [12] 1203 	mov	r0,a
      000463 86 00            [24] 1204 	mov	ar0,@r0
      000465 86 03            [24] 1205 	mov	ar3,@r0
      000467 08               [12] 1206 	inc	r0
      000468 86 04            [24] 1207 	mov	ar4,@r0
      00046A 18               [12] 1208 	dec	r0
      00046B D0 00            [24] 1209 	pop	ar0
      00046D EB               [12] 1210 	mov	a,r3
      00046E 2D               [12] 1211 	add	a,r5
      00046F F5 82            [12] 1212 	mov	dpl,a
      000471 EC               [12] 1213 	mov	a,r4
      000472 3F               [12] 1214 	addc	a,r7
      000473 F5 83            [12] 1215 	mov	dph,a
      000475 E0               [24] 1216 	movx	a,@dptr
      000476 FF               [12] 1217 	mov	r7,a
      000477 BF 55 02         [24] 1218 	cjne	r7,#0x55,00227$
      00047A 80 1C            [24] 1219 	sjmp	00124$
      00047C                       1220 00227$:
                                   1221 ;	walk.c:95: (void)puts("Memory error");
      00047C 90r00r1A         [24] 1222 	mov	dptr,#___str_1
      00047F 75 F0 80         [24] 1223 	mov	b,#0x80
      000482 C0 06            [24] 1224 	push	ar6
      000484 C0 02            [24] 1225 	push	ar2
      000486 C0 01            [24] 1226 	push	ar1
      000488 C0 00            [24] 1227 	push	ar0
      00048A 12r00r00         [24] 1228 	lcall	_puts
      00048D D0 00            [24] 1229 	pop	ar0
      00048F D0 01            [24] 1230 	pop	ar1
      000491 D0 02            [24] 1231 	pop	ar2
      000493 D0 06            [24] 1232 	pop	ar6
                                   1233 ;	walk.c:96: reset();
      000495 12r00r1A         [24] 1234 	lcall	_reset
      000498                       1235 00124$:
                                   1236 ;	walk.c:99: (void)stpush(&cur);
      000498 C0 06            [24] 1237 	push	ar6
      00049A C0 00            [24] 1238 	push	ar0
      00049C A8*00            [24] 1239 	mov	r0,_bp
      00049E 08               [12] 1240 	inc	r0
      00049F 08               [12] 1241 	inc	r0
      0004A0 86 04            [24] 1242 	mov	ar4,@r0
      0004A2 7D 00            [12] 1243 	mov	r5,#0x00
      0004A4 7F 40            [12] 1244 	mov	r7,#0x40
      0004A6 D0 00            [24] 1245 	pop	ar0
      0004A8 8C 82            [24] 1246 	mov	dpl,r4
      0004AA 8D 83            [24] 1247 	mov	dph,r5
      0004AC 8F F0            [24] 1248 	mov	b,r7
      0004AE C0 06            [24] 1249 	push	ar6
      0004B0 C0 02            [24] 1250 	push	ar2
      0004B2 C0 01            [24] 1251 	push	ar1
      0004B4 C0 00            [24] 1252 	push	ar0
      0004B6 12r06rF5         [24] 1253 	lcall	_stpush
      0004B9 D0 00            [24] 1254 	pop	ar0
      0004BB D0 01            [24] 1255 	pop	ar1
      0004BD D0 02            [24] 1256 	pop	ar2
      0004BF D0 06            [24] 1257 	pop	ar6
                                   1258 ;	walk.c:100: cur = t;
      0004C1 C0 00            [24] 1259 	push	ar0
      0004C3 A8*00            [24] 1260 	mov	r0,_bp
      0004C5 08               [12] 1261 	inc	r0
      0004C6 C0 01            [24] 1262 	push	ar1
      0004C8 E5*00            [12] 1263 	mov	a,_bp
      0004CA 24 09            [12] 1264 	add	a,#0x09
      0004CC F9               [12] 1265 	mov	r1,a
      0004CD E6               [12] 1266 	mov	a,@r0
      0004CE F7               [12] 1267 	mov	@r1,a
      0004CF 09               [12] 1268 	inc	r1
      0004D0 77 00            [12] 1269 	mov	@r1,#0x00
      0004D2 09               [12] 1270 	inc	r1
      0004D3 77 40            [12] 1271 	mov	@r1,#0x40
      0004D5 D0 01            [24] 1272 	pop	ar1
      0004D7 E5*00            [12] 1273 	mov	a,_bp
      0004D9 24 08            [12] 1274 	add	a,#0x08
      0004DB F8               [12] 1275 	mov	r0,a
      0004DC 86 03            [24] 1276 	mov	ar3,@r0
      0004DE 7E 00            [12] 1277 	mov	r6,#0x00
      0004E0 7F 40            [12] 1278 	mov	r7,#0x40
      0004E2 D0 00            [24] 1279 	pop	ar0
      0004E4 C0 06            [24] 1280 	push	ar6
      0004E6 C0 02            [24] 1281 	push	ar2
      0004E8 C0 01            [24] 1282 	push	ar1
      0004EA C0 00            [24] 1283 	push	ar0
      0004EC 74 04            [12] 1284 	mov	a,#0x04
      0004EE C0 E0            [24] 1285 	push	acc
      0004F0 E4               [12] 1286 	clr	a
      0004F1 C0 E0            [24] 1287 	push	acc
      0004F3 85 00 F0         [24] 1288 	mov	b,ar0
      0004F6 E5*00            [12] 1289 	mov	a,_bp
      0004F8 24 09            [12] 1290 	add	a,#0x09
      0004FA F8               [12] 1291 	mov	r0,a
      0004FB E6               [12] 1292 	mov	a,@r0
      0004FC C0 E0            [24] 1293 	push	acc
      0004FE 08               [12] 1294 	inc	r0
      0004FF E6               [12] 1295 	mov	a,@r0
      000500 C0 E0            [24] 1296 	push	acc
      000502 08               [12] 1297 	inc	r0
      000503 E6               [12] 1298 	mov	a,@r0
      000504 C0 E0            [24] 1299 	push	acc
      000506 8B 82            [24] 1300 	mov	dpl,r3
      000508 8E 83            [24] 1301 	mov	dph,r6
      00050A 8F F0            [24] 1302 	mov	b,r7
      00050C 12r00r00         [24] 1303 	lcall	___memcpy
      00050F E5 81            [12] 1304 	mov	a,sp
      000511 24 FB            [12] 1305 	add	a,#0xfb
      000513 F5 81            [12] 1306 	mov	sp,a
      000515 D0 00            [24] 1307 	pop	ar0
      000517 D0 01            [24] 1308 	pop	ar1
      000519 D0 02            [24] 1309 	pop	ar2
      00051B D0 06            [24] 1310 	pop	ar6
                                   1311 ;	walk.c:101: goto process;
      00051D D0 06            [24] 1312 	pop	ar6
      00051F 02r00r8B         [24] 1313 	ljmp	00101$
      000522                       1314 00129$:
                                   1315 ;	walk.c:105: printf("\033[%d;%dH.", cur.r + 1, cur.c + 1);
      000522 C0 00            [24] 1316 	push	ar0
      000524 A8 02            [24] 1317 	mov	r0,ar2
      000526 86 05            [24] 1318 	mov	ar5,@r0
      000528 08               [12] 1319 	inc	r0
      000529 86 07            [24] 1320 	mov	ar7,@r0
      00052B D0 00            [24] 1321 	pop	ar0
      00052D 0D               [12] 1322 	inc	r5
      00052E BD 00 01         [24] 1323 	cjne	r5,#0x00,00228$
      000531 0F               [12] 1324 	inc	r7
      000532                       1325 00228$:
      000532 87 03            [24] 1326 	mov	ar3,@r1
      000534 09               [12] 1327 	inc	r1
      000535 87 04            [24] 1328 	mov	ar4,@r1
      000537 19               [12] 1329 	dec	r1
      000538 0B               [12] 1330 	inc	r3
      000539 BB 00 01         [24] 1331 	cjne	r3,#0x00,00229$
      00053C 0C               [12] 1332 	inc	r4
      00053D                       1333 00229$:
      00053D C0 06            [24] 1334 	push	ar6
      00053F C0 02            [24] 1335 	push	ar2
      000541 C0 01            [24] 1336 	push	ar1
      000543 C0 00            [24] 1337 	push	ar0
      000545 C0 05            [24] 1338 	push	ar5
      000547 C0 07            [24] 1339 	push	ar7
      000549 C0 03            [24] 1340 	push	ar3
      00054B C0 04            [24] 1341 	push	ar4
      00054D 74r27            [12] 1342 	mov	a,#___str_2
      00054F C0 E0            [24] 1343 	push	acc
      000551 74s00            [12] 1344 	mov	a,#(___str_2 >> 8)
      000553 C0 E0            [24] 1345 	push	acc
      000555 74 80            [12] 1346 	mov	a,#0x80
      000557 C0 E0            [24] 1347 	push	acc
      000559 12r00r00         [24] 1348 	lcall	_printf
      00055C E5 81            [12] 1349 	mov	a,sp
      00055E 24 F9            [12] 1350 	add	a,#0xf9
      000560 F5 81            [12] 1351 	mov	sp,a
      000562 D0 00            [24] 1352 	pop	ar0
      000564 D0 01            [24] 1353 	pop	ar1
      000566 D0 02            [24] 1354 	pop	ar2
      000568 D0 06            [24] 1355 	pop	ar6
                                   1356 ;	walk.c:107: if (!stpop(&cur)) goto term;
      00056A C0 00            [24] 1357 	push	ar0
      00056C E5*00            [12] 1358 	mov	a,_bp
      00056E 24 05            [12] 1359 	add	a,#0x05
      000570 F8               [12] 1360 	mov	r0,a
      000571 86 04            [24] 1361 	mov	ar4,@r0
      000573 7D 00            [12] 1362 	mov	r5,#0x00
      000575 7F 40            [12] 1363 	mov	r7,#0x40
      000577 D0 00            [24] 1364 	pop	ar0
      000579 8C 82            [24] 1365 	mov	dpl,r4
      00057B 8D 83            [24] 1366 	mov	dph,r5
      00057D 8F F0            [24] 1367 	mov	b,r7
      00057F C0 06            [24] 1368 	push	ar6
      000581 C0 02            [24] 1369 	push	ar2
      000583 C0 01            [24] 1370 	push	ar1
      000585 C0 00            [24] 1371 	push	ar0
      000587 12r07r56         [24] 1372 	lcall	_stpop
      00058A E5 82            [12] 1373 	mov	a,dpl
      00058C 85 83 F0         [24] 1374 	mov	b,dph
      00058F D0 00            [24] 1375 	pop	ar0
      000591 D0 01            [24] 1376 	pop	ar1
      000593 D0 02            [24] 1377 	pop	ar2
      000595 D0 06            [24] 1378 	pop	ar6
      000597 45 F0            [12] 1379 	orl	a,b
      000599 60 03            [24] 1380 	jz	00230$
      00059B 02r01r17         [24] 1381 	ljmp	00144$
      00059E                       1382 00230$:
                                   1383 ;	walk.c:111: return;
                                   1384 ;	walk.c:112: }
      00059E 85*00 81         [24] 1385 	mov	sp,_bp
      0005A1 D0*00            [24] 1386 	pop	_bp
      0005A3 22               [24] 1387 	ret
                                   1388 ;------------------------------------------------------------
                                   1389 ;Allocation info for local variables in function 'main'
                                   1390 ;------------------------------------------------------------
                                   1391 ;initial                   Allocated to stack - _bp +3
                                   1392 ;i                         Allocated to stack - _bp +7
                                   1393 ;j                         Allocated to registers r4 r5 
                                   1394 ;sloc0                     Allocated to stack - _bp +1
                                   1395 ;R                         Allocated with name '_main_R_65536_62'
                                   1396 ;------------------------------------------------------------
                                   1397 ;	walk.c:114: int main(void) {
                                   1398 ;	-----------------------------------------
                                   1399 ;	 function main
                                   1400 ;	-----------------------------------------
      0005A4                       1401 _main:
      0005A4 C0*00            [24] 1402 	push	_bp
      0005A6 E5 81            [12] 1403 	mov	a,sp
      0005A8 F5*00            [12] 1404 	mov	_bp,a
      0005AA 24 08            [12] 1405 	add	a,#0x08
      0005AC F5 81            [12] 1406 	mov	sp,a
                                   1407 ;	walk.c:119: i0 = 1;
      0005AE 78r00            [12] 1408 	mov	r0,#_i0
      0005B0 76 01            [12] 1409 	mov	@r0,#0x01
                                   1410 ;	walk.c:121: IT0 = 1;
                                   1411 ;	assignBit
      0005B2 D2 88            [12] 1412 	setb	_IT0
                                   1413 ;	walk.c:122: EX0 = 1;
                                   1414 ;	assignBit
      0005B4 D2 A8            [12] 1415 	setb	_EX0
                                   1416 ;	walk.c:123: EA = 1;
                                   1417 ;	assignBit
      0005B6 D2 AF            [12] 1418 	setb	_EA
                                   1419 ;	walk.c:125: srand(*R);
      0005B8 90rB4r02         [24] 1420 	mov	dptr,#_main_R_65536_62
      0005BB E0               [24] 1421 	movx	a,@dptr
      0005BC FE               [12] 1422 	mov	r6,a
      0005BD A3               [24] 1423 	inc	dptr
      0005BE E0               [24] 1424 	movx	a,@dptr
      0005BF FF               [12] 1425 	mov	r7,a
      0005C0 8E 82            [24] 1426 	mov	dpl,r6
      0005C2 8F 83            [24] 1427 	mov	dph,r7
      0005C4 E0               [24] 1428 	movx	a,@dptr
      0005C5 FE               [12] 1429 	mov	r6,a
      0005C6 A3               [24] 1430 	inc	dptr
      0005C7 E0               [24] 1431 	movx	a,@dptr
      0005C8 FF               [12] 1432 	mov	r7,a
      0005C9 8E 82            [24] 1433 	mov	dpl,r6
      0005CB 8F 83            [24] 1434 	mov	dph,r7
      0005CD 12r00r00         [24] 1435 	lcall	_srand
                                   1436 ;	walk.c:126: stinit();
      0005D0 12r06rEC         [24] 1437 	lcall	_stinit
                                   1438 ;	walk.c:128: while (i0) {
      0005D3 E5*00            [12] 1439 	mov	a,_bp
      0005D5 24 03            [12] 1440 	add	a,#0x03
      0005D7 FF               [12] 1441 	mov	r7,a
      0005D8 FE               [12] 1442 	mov	r6,a
      0005D9                       1443 00103$:
      0005D9 78r00            [12] 1444 	mov	r0,#_i0
      0005DB E6               [12] 1445 	mov	a,@r0
      0005DC 70 03            [24] 1446 	jnz	00138$
      0005DE 02r06rDE         [24] 1447 	ljmp	00105$
      0005E1                       1448 00138$:
                                   1449 ;	walk.c:129: for (i = 0; i < ROWS; i++)
      0005E1 E5*00            [12] 1450 	mov	a,_bp
      0005E3 24 07            [12] 1451 	add	a,#0x07
      0005E5 F8               [12] 1452 	mov	r0,a
      0005E6 E4               [12] 1453 	clr	a
      0005E7 F6               [12] 1454 	mov	@r0,a
      0005E8 08               [12] 1455 	inc	r0
      0005E9 F6               [12] 1456 	mov	@r0,a
      0005EA 7A 00            [12] 1457 	mov	r2,#0x00
      0005EC 7B 00            [12] 1458 	mov	r3,#0x00
                                   1459 ;	walk.c:130: for (j = 0; j < COLS; j++)
      0005EE                       1460 00113$:
      0005EE A8*00            [24] 1461 	mov	r0,_bp
      0005F0 08               [12] 1462 	inc	r0
      0005F1 EA               [12] 1463 	mov	a,r2
      0005F2 24r00            [12] 1464 	add	a,#_g
      0005F4 F6               [12] 1465 	mov	@r0,a
      0005F5 EB               [12] 1466 	mov	a,r3
      0005F6 34s00            [12] 1467 	addc	a,#(_g >> 8)
      0005F8 08               [12] 1468 	inc	r0
      0005F9 F6               [12] 1469 	mov	@r0,a
      0005FA 7C 00            [12] 1470 	mov	r4,#0x00
      0005FC 7D 00            [12] 1471 	mov	r5,#0x00
      0005FE                       1472 00106$:
                                   1473 ;	walk.c:131: g[i][j] = 0x55;
      0005FE A8*00            [24] 1474 	mov	r0,_bp
      000600 08               [12] 1475 	inc	r0
      000601 EC               [12] 1476 	mov	a,r4
      000602 26               [12] 1477 	add	a,@r0
      000603 F5 82            [12] 1478 	mov	dpl,a
      000605 ED               [12] 1479 	mov	a,r5
      000606 08               [12] 1480 	inc	r0
      000607 36               [12] 1481 	addc	a,@r0
      000608 F5 83            [12] 1482 	mov	dph,a
      00060A 74 55            [12] 1483 	mov	a,#0x55
      00060C F0               [24] 1484 	movx	@dptr,a
                                   1485 ;	walk.c:130: for (j = 0; j < COLS; j++)
      00060D 0C               [12] 1486 	inc	r4
      00060E BC 00 01         [24] 1487 	cjne	r4,#0x00,00139$
      000611 0D               [12] 1488 	inc	r5
      000612                       1489 00139$:
      000612 C3               [12] 1490 	clr	c
      000613 EC               [12] 1491 	mov	a,r4
      000614 94 C0            [12] 1492 	subb	a,#0xc0
      000616 ED               [12] 1493 	mov	a,r5
      000617 64 80            [12] 1494 	xrl	a,#0x80
      000619 94 80            [12] 1495 	subb	a,#0x80
      00061B 40 E1            [24] 1496 	jc	00106$
                                   1497 ;	walk.c:129: for (i = 0; i < ROWS; i++)
      00061D 74 C0            [12] 1498 	mov	a,#0xc0
      00061F 2A               [12] 1499 	add	a,r2
      000620 FA               [12] 1500 	mov	r2,a
      000621 E4               [12] 1501 	clr	a
      000622 3B               [12] 1502 	addc	a,r3
      000623 FB               [12] 1503 	mov	r3,a
      000624 E5*00            [12] 1504 	mov	a,_bp
      000626 24 07            [12] 1505 	add	a,#0x07
      000628 F8               [12] 1506 	mov	r0,a
      000629 06               [12] 1507 	inc	@r0
      00062A B6 00 02         [24] 1508 	cjne	@r0,#0x00,00141$
      00062D 08               [12] 1509 	inc	r0
      00062E 06               [12] 1510 	inc	@r0
      00062F                       1511 00141$:
      00062F E5*00            [12] 1512 	mov	a,_bp
      000631 24 07            [12] 1513 	add	a,#0x07
      000633 F8               [12] 1514 	mov	r0,a
      000634 C3               [12] 1515 	clr	c
      000635 E6               [12] 1516 	mov	a,@r0
      000636 94 30            [12] 1517 	subb	a,#0x30
      000638 08               [12] 1518 	inc	r0
      000639 E6               [12] 1519 	mov	a,@r0
      00063A 64 80            [12] 1520 	xrl	a,#0x80
      00063C 94 80            [12] 1521 	subb	a,#0x80
      00063E 40 AE            [24] 1522 	jc	00113$
                                   1523 ;	walk.c:133: printf("%s", "\033[2J");
      000640 C0 07            [24] 1524 	push	ar7
      000642 C0 06            [24] 1525 	push	ar6
      000644 74r34            [12] 1526 	mov	a,#___str_4
      000646 C0 E0            [24] 1527 	push	acc
      000648 74s00            [12] 1528 	mov	a,#(___str_4 >> 8)
      00064A C0 E0            [24] 1529 	push	acc
      00064C 74 80            [12] 1530 	mov	a,#0x80
      00064E C0 E0            [24] 1531 	push	acc
      000650 74r31            [12] 1532 	mov	a,#___str_3
      000652 C0 E0            [24] 1533 	push	acc
      000654 74s00            [12] 1534 	mov	a,#(___str_3 >> 8)
      000656 C0 E0            [24] 1535 	push	acc
      000658 74 80            [12] 1536 	mov	a,#0x80
      00065A C0 E0            [24] 1537 	push	acc
      00065C 12r00r00         [24] 1538 	lcall	_printf
      00065F E5 81            [12] 1539 	mov	a,sp
      000661 24 FA            [12] 1540 	add	a,#0xfa
      000663 F5 81            [12] 1541 	mov	sp,a
                                   1542 ;	walk.c:134: initial.r = rand() % ROWS;
      000665 E5*00            [12] 1543 	mov	a,_bp
      000667 24 03            [12] 1544 	add	a,#0x03
      000669 F9               [12] 1545 	mov	r1,a
      00066A C0 01            [24] 1546 	push	ar1
      00066C 12r00r00         [24] 1547 	lcall	_rand
      00066F AC 82            [24] 1548 	mov	r4,dpl
      000671 AD 83            [24] 1549 	mov	r5,dph
      000673 74 30            [12] 1550 	mov	a,#0x30
      000675 C0 E0            [24] 1551 	push	acc
      000677 E4               [12] 1552 	clr	a
      000678 C0 E0            [24] 1553 	push	acc
      00067A 8C 82            [24] 1554 	mov	dpl,r4
      00067C 8D 83            [24] 1555 	mov	dph,r5
      00067E 12r00r00         [24] 1556 	lcall	__modsint
      000681 AC 82            [24] 1557 	mov	r4,dpl
      000683 AD 83            [24] 1558 	mov	r5,dph
      000685 15 81            [12] 1559 	dec	sp
      000687 15 81            [12] 1560 	dec	sp
      000689 D0 01            [24] 1561 	pop	ar1
      00068B D0 06            [24] 1562 	pop	ar6
      00068D D0 07            [24] 1563 	pop	ar7
      00068F A7 04            [24] 1564 	mov	@r1,ar4
      000691 09               [12] 1565 	inc	r1
      000692 A7 05            [24] 1566 	mov	@r1,ar5
      000694 19               [12] 1567 	dec	r1
                                   1568 ;	walk.c:135: initial.c = rand() % COLS;
      000695 74 02            [12] 1569 	mov	a,#0x02
      000697 2F               [12] 1570 	add	a,r7
      000698 F9               [12] 1571 	mov	r1,a
      000699 C0 07            [24] 1572 	push	ar7
      00069B C0 06            [24] 1573 	push	ar6
      00069D C0 01            [24] 1574 	push	ar1
      00069F 12r00r00         [24] 1575 	lcall	_rand
      0006A2 AC 82            [24] 1576 	mov	r4,dpl
      0006A4 AD 83            [24] 1577 	mov	r5,dph
      0006A6 74 C0            [12] 1578 	mov	a,#0xc0
      0006A8 C0 E0            [24] 1579 	push	acc
      0006AA E4               [12] 1580 	clr	a
      0006AB C0 E0            [24] 1581 	push	acc
      0006AD 8C 82            [24] 1582 	mov	dpl,r4
      0006AF 8D 83            [24] 1583 	mov	dph,r5
      0006B1 12r00r00         [24] 1584 	lcall	__modsint
      0006B4 AC 82            [24] 1585 	mov	r4,dpl
      0006B6 AD 83            [24] 1586 	mov	r5,dph
      0006B8 15 81            [12] 1587 	dec	sp
      0006BA 15 81            [12] 1588 	dec	sp
      0006BC D0 01            [24] 1589 	pop	ar1
      0006BE D0 06            [24] 1590 	pop	ar6
      0006C0 A7 04            [24] 1591 	mov	@r1,ar4
      0006C2 09               [12] 1592 	inc	r1
      0006C3 A7 05            [24] 1593 	mov	@r1,ar5
      0006C5 19               [12] 1594 	dec	r1
                                   1595 ;	walk.c:136: walk(&initial);
      0006C6 8E 03            [24] 1596 	mov	ar3,r6
      0006C8 7C 00            [12] 1597 	mov	r4,#0x00
      0006CA 7D 40            [12] 1598 	mov	r5,#0x40
      0006CC 8B 82            [24] 1599 	mov	dpl,r3
      0006CE 8C 83            [24] 1600 	mov	dph,r4
      0006D0 8D F0            [24] 1601 	mov	b,r5
      0006D2 C0 06            [24] 1602 	push	ar6
      0006D4 12r00r1D         [24] 1603 	lcall	_walk
      0006D7 D0 06            [24] 1604 	pop	ar6
      0006D9 D0 07            [24] 1605 	pop	ar7
      0006DB 02r05rD9         [24] 1606 	ljmp	00103$
      0006DE                       1607 00105$:
                                   1608 ;	walk.c:139: EA = 0;
                                   1609 ;	assignBit
      0006DE C2 AF            [12] 1610 	clr	_EA
                                   1611 ;	walk.c:143: __endasm;
      0006E0 02 00 00         [24] 1612 	ljmp	0
                                   1613 ;	walk.c:145: return 0;
      0006E3 90 00 00         [24] 1614 	mov	dptr,#0x0000
                                   1615 ;	walk.c:146: }
      0006E6 85*00 81         [24] 1616 	mov	sp,_bp
      0006E9 D0*00            [24] 1617 	pop	_bp
      0006EB 22               [24] 1618 	ret
                                   1619 ;------------------------------------------------------------
                                   1620 ;Allocation info for local variables in function 'stinit'
                                   1621 ;------------------------------------------------------------
                                   1622 ;	walk.c:148: static void stinit(void) {
                                   1623 ;	-----------------------------------------
                                   1624 ;	 function stinit
                                   1625 ;	-----------------------------------------
      0006EC                       1626 _stinit:
                                   1627 ;	walk.c:149: sp = -1;
      0006EC 90rB4r00         [24] 1628 	mov	dptr,#_sp
      0006EF 74 FF            [12] 1629 	mov	a,#0xff
      0006F1 F0               [24] 1630 	movx	@dptr,a
      0006F2 A3               [24] 1631 	inc	dptr
      0006F3 F0               [24] 1632 	movx	@dptr,a
                                   1633 ;	walk.c:150: return;
                                   1634 ;	walk.c:151: }
      0006F4 22               [24] 1635 	ret
                                   1636 ;------------------------------------------------------------
                                   1637 ;Allocation info for local variables in function 'stpush'
                                   1638 ;------------------------------------------------------------
                                   1639 ;t                         Allocated to registers r5 r6 r7 
                                   1640 ;------------------------------------------------------------
                                   1641 ;	walk.c:153: static int stpush(struct node *t) {
                                   1642 ;	-----------------------------------------
                                   1643 ;	 function stpush
                                   1644 ;	-----------------------------------------
      0006F5                       1645 _stpush:
      0006F5 AD 82            [24] 1646 	mov	r5,dpl
      0006F7 AE 83            [24] 1647 	mov	r6,dph
      0006F9 AF F0            [24] 1648 	mov	r7,b
                                   1649 ;	walk.c:154: if (sp == (SMAX - 1)) return 0;
      0006FB 90rB4r00         [24] 1650 	mov	dptr,#_sp
      0006FE E0               [24] 1651 	movx	a,@dptr
      0006FF FB               [12] 1652 	mov	r3,a
      000700 A3               [24] 1653 	inc	dptr
      000701 E0               [24] 1654 	movx	a,@dptr
      000702 FC               [12] 1655 	mov	r4,a
      000703 BB FF 07         [24] 1656 	cjne	r3,#0xff,00102$
      000706 BC 23 04         [24] 1657 	cjne	r4,#0x23,00102$
      000709 90 00 00         [24] 1658 	mov	dptr,#0x0000
      00070C 22               [24] 1659 	ret
      00070D                       1660 00102$:
                                   1661 ;	walk.c:155: sp++;
      00070D 90rB4r00         [24] 1662 	mov	dptr,#_sp
      000710 74 01            [12] 1663 	mov	a,#0x01
      000712 2B               [12] 1664 	add	a,r3
      000713 F0               [24] 1665 	movx	@dptr,a
      000714 E4               [12] 1666 	clr	a
      000715 3C               [12] 1667 	addc	a,r4
      000716 A3               [24] 1668 	inc	dptr
      000717 F0               [24] 1669 	movx	@dptr,a
                                   1670 ;	walk.c:156: stack[sp] = *t;
      000718 90rB4r00         [24] 1671 	mov	dptr,#_sp
      00071B E0               [24] 1672 	movx	a,@dptr
      00071C FB               [12] 1673 	mov	r3,a
      00071D A3               [24] 1674 	inc	dptr
      00071E E0               [24] 1675 	movx	a,@dptr
      00071F FC               [12] 1676 	mov	r4,a
      000720 EB               [12] 1677 	mov	a,r3
      000721 2B               [12] 1678 	add	a,r3
      000722 FB               [12] 1679 	mov	r3,a
      000723 EC               [12] 1680 	mov	a,r4
      000724 33               [12] 1681 	rlc	a
      000725 FC               [12] 1682 	mov	r4,a
      000726 EB               [12] 1683 	mov	a,r3
      000727 2B               [12] 1684 	add	a,r3
      000728 FB               [12] 1685 	mov	r3,a
      000729 EC               [12] 1686 	mov	a,r4
      00072A 33               [12] 1687 	rlc	a
      00072B FC               [12] 1688 	mov	r4,a
      00072C EB               [12] 1689 	mov	a,r3
      00072D 24r00            [12] 1690 	add	a,#_stack
      00072F FB               [12] 1691 	mov	r3,a
      000730 EC               [12] 1692 	mov	a,r4
      000731 34s24            [12] 1693 	addc	a,#(_stack >> 8)
      000733 FC               [12] 1694 	mov	r4,a
      000734 7A 00            [12] 1695 	mov	r2,#0x00
      000736 74 04            [12] 1696 	mov	a,#0x04
      000738 C0 E0            [24] 1697 	push	acc
      00073A E4               [12] 1698 	clr	a
      00073B C0 E0            [24] 1699 	push	acc
      00073D C0 05            [24] 1700 	push	ar5
      00073F C0 06            [24] 1701 	push	ar6
      000741 C0 07            [24] 1702 	push	ar7
      000743 8B 82            [24] 1703 	mov	dpl,r3
      000745 8C 83            [24] 1704 	mov	dph,r4
      000747 8A F0            [24] 1705 	mov	b,r2
      000749 12r00r00         [24] 1706 	lcall	___memcpy
      00074C E5 81            [12] 1707 	mov	a,sp
      00074E 24 FB            [12] 1708 	add	a,#0xfb
      000750 F5 81            [12] 1709 	mov	sp,a
                                   1710 ;	walk.c:157: return 1;
      000752 90 00 01         [24] 1711 	mov	dptr,#0x0001
                                   1712 ;	walk.c:158: }
      000755 22               [24] 1713 	ret
                                   1714 ;------------------------------------------------------------
                                   1715 ;Allocation info for local variables in function 'stpop'
                                   1716 ;------------------------------------------------------------
                                   1717 ;t                         Allocated to registers r5 r6 r7 
                                   1718 ;------------------------------------------------------------
                                   1719 ;	walk.c:160: static int stpop(struct node *t) {
                                   1720 ;	-----------------------------------------
                                   1721 ;	 function stpop
                                   1722 ;	-----------------------------------------
      000756                       1723 _stpop:
      000756 AD 82            [24] 1724 	mov	r5,dpl
      000758 AE 83            [24] 1725 	mov	r6,dph
      00075A AF F0            [24] 1726 	mov	r7,b
                                   1727 ;	walk.c:161: if (sp == -1) return 0;
      00075C 90rB4r00         [24] 1728 	mov	dptr,#_sp
      00075F E0               [24] 1729 	movx	a,@dptr
      000760 FB               [12] 1730 	mov	r3,a
      000761 A3               [24] 1731 	inc	dptr
      000762 E0               [24] 1732 	movx	a,@dptr
      000763 FC               [12] 1733 	mov	r4,a
      000764 BB FF 07         [24] 1734 	cjne	r3,#0xff,00102$
      000767 BC FF 04         [24] 1735 	cjne	r4,#0xff,00102$
      00076A 90 00 00         [24] 1736 	mov	dptr,#0x0000
      00076D 22               [24] 1737 	ret
      00076E                       1738 00102$:
                                   1739 ;	walk.c:162: *t = stack[sp];
      00076E EB               [12] 1740 	mov	a,r3
      00076F 2B               [12] 1741 	add	a,r3
      000770 FB               [12] 1742 	mov	r3,a
      000771 EC               [12] 1743 	mov	a,r4
      000772 33               [12] 1744 	rlc	a
      000773 FC               [12] 1745 	mov	r4,a
      000774 EB               [12] 1746 	mov	a,r3
      000775 2B               [12] 1747 	add	a,r3
      000776 FB               [12] 1748 	mov	r3,a
      000777 EC               [12] 1749 	mov	a,r4
      000778 33               [12] 1750 	rlc	a
      000779 FC               [12] 1751 	mov	r4,a
      00077A EB               [12] 1752 	mov	a,r3
      00077B 24r00            [12] 1753 	add	a,#_stack
      00077D FB               [12] 1754 	mov	r3,a
      00077E EC               [12] 1755 	mov	a,r4
      00077F 34s24            [12] 1756 	addc	a,#(_stack >> 8)
      000781 FC               [12] 1757 	mov	r4,a
      000782 7A 00            [12] 1758 	mov	r2,#0x00
      000784 74 04            [12] 1759 	mov	a,#0x04
      000786 C0 E0            [24] 1760 	push	acc
      000788 E4               [12] 1761 	clr	a
      000789 C0 E0            [24] 1762 	push	acc
      00078B C0 03            [24] 1763 	push	ar3
      00078D C0 04            [24] 1764 	push	ar4
      00078F C0 02            [24] 1765 	push	ar2
      000791 8D 82            [24] 1766 	mov	dpl,r5
      000793 8E 83            [24] 1767 	mov	dph,r6
      000795 8F F0            [24] 1768 	mov	b,r7
      000797 12r00r00         [24] 1769 	lcall	___memcpy
      00079A E5 81            [12] 1770 	mov	a,sp
      00079C 24 FB            [12] 1771 	add	a,#0xfb
      00079E F5 81            [12] 1772 	mov	sp,a
                                   1773 ;	walk.c:163: sp--;
      0007A0 90rB4r00         [24] 1774 	mov	dptr,#_sp
      0007A3 E0               [24] 1775 	movx	a,@dptr
      0007A4 24 FF            [12] 1776 	add	a,#0xff
      0007A6 FE               [12] 1777 	mov	r6,a
      0007A7 A3               [24] 1778 	inc	dptr
      0007A8 E0               [24] 1779 	movx	a,@dptr
      0007A9 34 FF            [12] 1780 	addc	a,#0xff
      0007AB FF               [12] 1781 	mov	r7,a
      0007AC 90rB4r00         [24] 1782 	mov	dptr,#_sp
      0007AF EE               [12] 1783 	mov	a,r6
      0007B0 F0               [24] 1784 	movx	@dptr,a
      0007B1 EF               [12] 1785 	mov	a,r7
      0007B2 A3               [24] 1786 	inc	dptr
      0007B3 F0               [24] 1787 	movx	@dptr,a
                                   1788 ;	walk.c:164: return 1;
      0007B4 90 00 01         [24] 1789 	mov	dptr,#0x0001
                                   1790 ;	walk.c:165: }
      0007B7 22               [24] 1791 	ret
                                   1792 	.area CSEG    (CODE)
                                   1793 	.area CONST   (CODE)
      000000                       1794 _neigh:
      000000 FF FF                 1795 	.byte #0xff, #0xff	; -1
      000002 00 00                 1796 	.byte #0x00, #0x00	;  0
      000004 00 00                 1797 	.byte #0x00, #0x00	;  0
      000006 FF FF                 1798 	.byte #0xff, #0xff	; -1
      000008 00 00                 1799 	.byte #0x00, #0x00	;  0
      00000A 01 00                 1800 	.byte #0x01, #0x00	;  1
      00000C 01 00                 1801 	.byte #0x01, #0x00	;  1
      00000E 00 00                 1802 	.byte #0x00, #0x00	;  0
                                   1803 	.area CONST   (CODE)
      000010                       1804 ___str_0:
      000010 1B                    1805 	.db 0x1b
      000011 5B 25 64 3B 25 64 48  1806 	.ascii "[%d;%dHo"
             6F
      000019 00                    1807 	.db 0x00
                                   1808 	.area CSEG    (CODE)
                                   1809 	.area CONST   (CODE)
      00001A                       1810 ___str_1:
      00001A 4D 65 6D 6F 72 79 20  1811 	.ascii "Memory error"
             65 72 72 6F 72
      000026 00                    1812 	.db 0x00
                                   1813 	.area CSEG    (CODE)
                                   1814 	.area CONST   (CODE)
      000027                       1815 ___str_2:
      000027 1B                    1816 	.db 0x1b
      000028 5B 25 64 3B 25 64 48  1817 	.ascii "[%d;%dH."
             2E
      000030 00                    1818 	.db 0x00
                                   1819 	.area CSEG    (CODE)
                                   1820 	.area CONST   (CODE)
      000031                       1821 ___str_3:
      000031 25 73                 1822 	.ascii "%s"
      000033 00                    1823 	.db 0x00
                                   1824 	.area CSEG    (CODE)
                                   1825 	.area CONST   (CODE)
      000034                       1826 ___str_4:
      000034 1B                    1827 	.db 0x1b
      000035 5B 32 4A              1828 	.ascii "[2J"
      000038 00                    1829 	.db 0x00
                                   1830 	.area CSEG    (CODE)
                                   1831 	.area XINIT   (CODE)
                                   1832 	.area CABS    (ABS,CODE)
