                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
      000000                        319 _g:
      000000                        320 	.ds 9216
      002400                        321 _stack:
      002400                        322 	.ds 36864
      00B400                        323 _sp:
      00B400                        324 	.ds 2
      00B402                        325 _main_R_65536_64:
      00B402                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  351 	ljmp	_int0
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 ;------------------------------------------------------------
                                    366 ;Allocation info for local variables in function 'main'
                                    367 ;------------------------------------------------------------
                                    368 ;initial                   Allocated to stack - _bp +9
                                    369 ;N                         Allocated to stack - _bp +7
                                    370 ;i                         Allocated to stack - _bp +5
                                    371 ;j                         Allocated to registers r2 r6 
                                    372 ;sloc0                     Allocated to stack - _bp +1
                                    373 ;sloc1                     Allocated to stack - _bp +3
                                    374 ;R                         Allocated with name '_main_R_65536_64'
                                    375 ;------------------------------------------------------------
                                    376 ;	walk.c:133: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  377 	mov	dptr,#_main_R_65536_64
      000003 74 FE            [12]  378 	mov	a,#0xfe
      000005 F0               [24]  379 	movx	@dptr,a
      000006 04               [12]  380 	inc	a
      000007 A3               [24]  381 	inc	dptr
      000008 F0               [24]  382 	movx	@dptr,a
                                    383 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  384 	ljmp	__sdcc_program_startup
                                    385 ;--------------------------------------------------------
                                    386 ; Home
                                    387 ;--------------------------------------------------------
                                    388 	.area HOME    (CODE)
                                    389 	.area HOME    (CODE)
      000006                        390 __sdcc_program_startup:
      000006 02r06r98         [24]  391 	ljmp	_main
                                    392 ;	return from main will return to caller
                                    393 ;--------------------------------------------------------
                                    394 ; code
                                    395 ;--------------------------------------------------------
                                    396 	.area CSEG    (CODE)
                                    397 ;------------------------------------------------------------
                                    398 ;Allocation info for local variables in function 'putchar'
                                    399 ;------------------------------------------------------------
                                    400 ;c                         Allocated to registers 
                                    401 ;------------------------------------------------------------
                                    402 ;	walk.c:8: int putchar(int c) __naked {
                                    403 ;	-----------------------------------------
                                    404 ;	 function putchar
                                    405 ;	-----------------------------------------
      000000                        406 _putchar:
                                    407 ;	naked function: no prologue.
                                    408 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  409 	mov	a, dpl
      000002 02 00 30         [24]  410 	ljmp	0x0030
                                    411 ;	walk.c:14: }
                                    412 ;	naked function: no epilogue.
                                    413 ;------------------------------------------------------------
                                    414 ;Allocation info for local variables in function 'getchar'
                                    415 ;------------------------------------------------------------
                                    416 ;	walk.c:16: int getchar(void) __naked {
                                    417 ;	-----------------------------------------
                                    418 ;	 function getchar
                                    419 ;	-----------------------------------------
      000005                        420 _getchar:
                                    421 ;	naked function: no prologue.
                                    422 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  423 	lcall	0x0032
      000008 F5 82            [12]  424 	mov	dpl, a
      00000A 75 83 00         [24]  425 	mov	dph, #0
      00000D 22               [24]  426 	ret
                                    427 ;	walk.c:23: }
                                    428 ;	naked function: no epilogue.
                                    429 ;------------------------------------------------------------
                                    430 ;Allocation info for local variables in function 'int0'
                                    431 ;------------------------------------------------------------
                                    432 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    433 ;	-----------------------------------------
                                    434 ;	 function int0
                                    435 ;	-----------------------------------------
      00000E                        436 _int0:
                           00000F   437 	ar7 = 0x0f
                           00000E   438 	ar6 = 0x0e
                           00000D   439 	ar5 = 0x0d
                           00000C   440 	ar4 = 0x0c
                           00000B   441 	ar3 = 0x0b
                           00000A   442 	ar2 = 0x0a
                           000009   443 	ar1 = 0x09
                           000008   444 	ar0 = 0x08
      00000E C0 D0            [24]  445 	push	psw
      000010 75 D0 08         [24]  446 	mov	psw,#0x08
                                    447 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  448 	mov	r0,#_i0
      000015 76 00            [12]  449 	mov	@r0,#0x00
                                    450 ;	walk.c:29: }
      000017 D0 D0            [24]  451 	pop	psw
      000019 32               [24]  452 	reti
                                    453 ;	eliminated unneeded push/pop dpl
                                    454 ;	eliminated unneeded push/pop dph
                                    455 ;	eliminated unneeded push/pop b
                                    456 ;	eliminated unneeded push/pop acc
                                    457 ;------------------------------------------------------------
                                    458 ;Allocation info for local variables in function 'reset'
                                    459 ;------------------------------------------------------------
                                    460 ;	walk.c:31: static void reset(void) __naked {
                                    461 ;	-----------------------------------------
                                    462 ;	 function reset
                                    463 ;	-----------------------------------------
      00001A                        464 _reset:
                                    465 ;	naked function: no prologue.
                                    466 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  467 	orl	pcon, #2
                                    468 ;	walk.c:35: }
                                    469 ;	naked function: no epilogue.
                                    470 ;------------------------------------------------------------
                                    471 ;Allocation info for local variables in function 'update'
                                    472 ;------------------------------------------------------------
                                    473 ;cur                       Allocated to stack - _bp -5
                                    474 ;j                         Allocated to stack - _bp -7
                                    475 ;t                         Allocated to stack - _bp +1
                                    476 ;sloc0                     Allocated to stack - _bp +4
                                    477 ;sloc1                     Allocated to stack - _bp +6
                                    478 ;sloc2                     Allocated to stack - _bp +8
                                    479 ;------------------------------------------------------------
                                    480 ;	walk.c:73: static int update(struct node *t, struct node *cur, int j) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function update
                                    483 ;	-----------------------------------------
      00001D                        484 _update:
                           000007   485 	ar7 = 0x07
                           000006   486 	ar6 = 0x06
                           000005   487 	ar5 = 0x05
                           000004   488 	ar4 = 0x04
                           000003   489 	ar3 = 0x03
                           000002   490 	ar2 = 0x02
                           000001   491 	ar1 = 0x01
                           000000   492 	ar0 = 0x00
      00001D C0*00            [24]  493 	push	_bp
      00001F 85 81*00         [24]  494 	mov	_bp,sp
      000022 C0 82            [24]  495 	push	dpl
      000024 C0 83            [24]  496 	push	dph
      000026 C0 F0            [24]  497 	push	b
      000028 E5 81            [12]  498 	mov	a,sp
      00002A 24 07            [12]  499 	add	a,#0x07
      00002C F5 81            [12]  500 	mov	sp,a
                                    501 ;	walk.c:74: t->r = cur->r + neigh[j].r;
      00002E E5*00            [12]  502 	mov	a,_bp
      000030 24 FB            [12]  503 	add	a,#0xfb
      000032 F8               [12]  504 	mov	r0,a
      000033 86 02            [24]  505 	mov	ar2,@r0
      000035 08               [12]  506 	inc	r0
      000036 86 03            [24]  507 	mov	ar3,@r0
      000038 08               [12]  508 	inc	r0
      000039 86 04            [24]  509 	mov	ar4,@r0
      00003B 8A 82            [24]  510 	mov	dpl,r2
      00003D 8B 83            [24]  511 	mov	dph,r3
      00003F 8C F0            [24]  512 	mov	b,r4
      000041 E5*00            [12]  513 	mov	a,_bp
      000043 24 04            [12]  514 	add	a,#0x04
      000045 F8               [12]  515 	mov	r0,a
      000046 12r00r00         [24]  516 	lcall	__gptrget
      000049 F6               [12]  517 	mov	@r0,a
      00004A A3               [24]  518 	inc	dptr
      00004B 12r00r00         [24]  519 	lcall	__gptrget
      00004E 08               [12]  520 	inc	r0
      00004F F6               [12]  521 	mov	@r0,a
      000050 E5*00            [12]  522 	mov	a,_bp
      000052 24 F9            [12]  523 	add	a,#0xf9
      000054 F8               [12]  524 	mov	r0,a
      000055 E5*00            [12]  525 	mov	a,_bp
      000057 24 06            [12]  526 	add	a,#0x06
      000059 F9               [12]  527 	mov	r1,a
      00005A E6               [12]  528 	mov	a,@r0
      00005B 26               [12]  529 	add	a,@r0
      00005C F7               [12]  530 	mov	@r1,a
      00005D 08               [12]  531 	inc	r0
      00005E E6               [12]  532 	mov	a,@r0
      00005F 33               [12]  533 	rlc	a
      000060 09               [12]  534 	inc	r1
      000061 F7               [12]  535 	mov	@r1,a
      000062 19               [12]  536 	dec	r1
      000063 E7               [12]  537 	mov	a,@r1
      000064 27               [12]  538 	add	a,@r1
      000065 F7               [12]  539 	mov	@r1,a
      000066 09               [12]  540 	inc	r1
      000067 E7               [12]  541 	mov	a,@r1
      000068 33               [12]  542 	rlc	a
      000069 F7               [12]  543 	mov	@r1,a
      00006A E5*00            [12]  544 	mov	a,_bp
      00006C 24 06            [12]  545 	add	a,#0x06
      00006E F8               [12]  546 	mov	r0,a
      00006F E6               [12]  547 	mov	a,@r0
      000070 24r00            [12]  548 	add	a,#_neigh
      000072 F5 82            [12]  549 	mov	dpl,a
      000074 08               [12]  550 	inc	r0
      000075 E6               [12]  551 	mov	a,@r0
      000076 34s00            [12]  552 	addc	a,#(_neigh >> 8)
      000078 F5 83            [12]  553 	mov	dph,a
      00007A E4               [12]  554 	clr	a
      00007B 93               [24]  555 	movc	a,@a+dptr
      00007C FF               [12]  556 	mov	r7,a
      00007D A3               [24]  557 	inc	dptr
      00007E E4               [12]  558 	clr	a
      00007F 93               [24]  559 	movc	a,@a+dptr
      000080 FE               [12]  560 	mov	r6,a
      000081 E5*00            [12]  561 	mov	a,_bp
      000083 24 04            [12]  562 	add	a,#0x04
      000085 F8               [12]  563 	mov	r0,a
      000086 EF               [12]  564 	mov	a,r7
      000087 26               [12]  565 	add	a,@r0
      000088 FF               [12]  566 	mov	r7,a
      000089 EE               [12]  567 	mov	a,r6
      00008A 08               [12]  568 	inc	r0
      00008B 36               [12]  569 	addc	a,@r0
      00008C FE               [12]  570 	mov	r6,a
      00008D A8*00            [24]  571 	mov	r0,_bp
      00008F 08               [12]  572 	inc	r0
      000090 86 82            [24]  573 	mov	dpl,@r0
      000092 08               [12]  574 	inc	r0
      000093 86 83            [24]  575 	mov	dph,@r0
      000095 08               [12]  576 	inc	r0
      000096 86 F0            [24]  577 	mov	b,@r0
      000098 EF               [12]  578 	mov	a,r7
      000099 12r00r00         [24]  579 	lcall	__gptrput
      00009C A3               [24]  580 	inc	dptr
      00009D EE               [12]  581 	mov	a,r6
      00009E 12r00r00         [24]  582 	lcall	__gptrput
                                    583 ;	walk.c:75: t->c = cur->c + neigh[j].c;
      0000A1 A8*00            [24]  584 	mov	r0,_bp
      0000A3 08               [12]  585 	inc	r0
      0000A4 E5*00            [12]  586 	mov	a,_bp
      0000A6 24 08            [12]  587 	add	a,#0x08
      0000A8 F9               [12]  588 	mov	r1,a
      0000A9 74 02            [12]  589 	mov	a,#0x02
      0000AB 26               [12]  590 	add	a,@r0
      0000AC F7               [12]  591 	mov	@r1,a
      0000AD E4               [12]  592 	clr	a
      0000AE 08               [12]  593 	inc	r0
      0000AF 36               [12]  594 	addc	a,@r0
      0000B0 09               [12]  595 	inc	r1
      0000B1 F7               [12]  596 	mov	@r1,a
      0000B2 08               [12]  597 	inc	r0
      0000B3 09               [12]  598 	inc	r1
      0000B4 E6               [12]  599 	mov	a,@r0
      0000B5 F7               [12]  600 	mov	@r1,a
      0000B6 74 02            [12]  601 	mov	a,#0x02
      0000B8 2A               [12]  602 	add	a,r2
      0000B9 FA               [12]  603 	mov	r2,a
      0000BA E4               [12]  604 	clr	a
      0000BB 3B               [12]  605 	addc	a,r3
      0000BC FB               [12]  606 	mov	r3,a
      0000BD 8A 82            [24]  607 	mov	dpl,r2
      0000BF 8B 83            [24]  608 	mov	dph,r3
      0000C1 8C F0            [24]  609 	mov	b,r4
      0000C3 12r00r00         [24]  610 	lcall	__gptrget
      0000C6 FA               [12]  611 	mov	r2,a
      0000C7 A3               [24]  612 	inc	dptr
      0000C8 12r00r00         [24]  613 	lcall	__gptrget
      0000CB FB               [12]  614 	mov	r3,a
      0000CC E5*00            [12]  615 	mov	a,_bp
      0000CE 24 06            [12]  616 	add	a,#0x06
      0000D0 F8               [12]  617 	mov	r0,a
      0000D1 E6               [12]  618 	mov	a,@r0
      0000D2 24r00            [12]  619 	add	a,#_neigh
      0000D4 FC               [12]  620 	mov	r4,a
      0000D5 08               [12]  621 	inc	r0
      0000D6 E6               [12]  622 	mov	a,@r0
      0000D7 34s00            [12]  623 	addc	a,#(_neigh >> 8)
      0000D9 FD               [12]  624 	mov	r5,a
      0000DA 8C 82            [24]  625 	mov	dpl,r4
      0000DC 8D 83            [24]  626 	mov	dph,r5
      0000DE A3               [24]  627 	inc	dptr
      0000DF A3               [24]  628 	inc	dptr
      0000E0 E4               [12]  629 	clr	a
      0000E1 93               [24]  630 	movc	a,@a+dptr
      0000E2 FC               [12]  631 	mov	r4,a
      0000E3 A3               [24]  632 	inc	dptr
      0000E4 E4               [12]  633 	clr	a
      0000E5 93               [24]  634 	movc	a,@a+dptr
      0000E6 FD               [12]  635 	mov	r5,a
      0000E7 EC               [12]  636 	mov	a,r4
      0000E8 2A               [12]  637 	add	a,r2
      0000E9 FA               [12]  638 	mov	r2,a
      0000EA ED               [12]  639 	mov	a,r5
      0000EB 3B               [12]  640 	addc	a,r3
      0000EC FB               [12]  641 	mov	r3,a
      0000ED E5*00            [12]  642 	mov	a,_bp
      0000EF 24 08            [12]  643 	add	a,#0x08
      0000F1 F8               [12]  644 	mov	r0,a
      0000F2 86 82            [24]  645 	mov	dpl,@r0
      0000F4 08               [12]  646 	inc	r0
      0000F5 86 83            [24]  647 	mov	dph,@r0
      0000F7 08               [12]  648 	inc	r0
      0000F8 86 F0            [24]  649 	mov	b,@r0
      0000FA EA               [12]  650 	mov	a,r2
      0000FB 12r00r00         [24]  651 	lcall	__gptrput
      0000FE A3               [24]  652 	inc	dptr
      0000FF EB               [12]  653 	mov	a,r3
      000100 12r00r00         [24]  654 	lcall	__gptrput
                                    655 ;	walk.c:77: if (t->r < 0) t->r += ROWS;
      000103 A8*00            [24]  656 	mov	r0,_bp
      000105 08               [12]  657 	inc	r0
      000106 86 82            [24]  658 	mov	dpl,@r0
      000108 08               [12]  659 	inc	r0
      000109 86 83            [24]  660 	mov	dph,@r0
      00010B 08               [12]  661 	inc	r0
      00010C 86 F0            [24]  662 	mov	b,@r0
      00010E 12r00r00         [24]  663 	lcall	__gptrget
      000111 FD               [12]  664 	mov	r5,a
      000112 A3               [24]  665 	inc	dptr
      000113 12r00r00         [24]  666 	lcall	__gptrget
      000116 FC               [12]  667 	mov	r4,a
      000117 EE               [12]  668 	mov	a,r6
      000118 30 E7 1D         [24]  669 	jnb	acc.7,00104$
      00011B 74 30            [12]  670 	mov	a,#0x30
      00011D 2D               [12]  671 	add	a,r5
      00011E FF               [12]  672 	mov	r7,a
      00011F E4               [12]  673 	clr	a
      000120 3C               [12]  674 	addc	a,r4
      000121 FE               [12]  675 	mov	r6,a
      000122 A8*00            [24]  676 	mov	r0,_bp
      000124 08               [12]  677 	inc	r0
      000125 86 82            [24]  678 	mov	dpl,@r0
      000127 08               [12]  679 	inc	r0
      000128 86 83            [24]  680 	mov	dph,@r0
      00012A 08               [12]  681 	inc	r0
      00012B 86 F0            [24]  682 	mov	b,@r0
      00012D EF               [12]  683 	mov	a,r7
      00012E 12r00r00         [24]  684 	lcall	__gptrput
      000131 A3               [24]  685 	inc	dptr
      000132 EE               [12]  686 	mov	a,r6
      000133 12r00r00         [24]  687 	lcall	__gptrput
      000136 80 27            [24]  688 	sjmp	00105$
      000138                        689 00104$:
                                    690 ;	walk.c:78: else if (t->r >= ROWS) t->r -= ROWS;
      000138 C3               [12]  691 	clr	c
      000139 ED               [12]  692 	mov	a,r5
      00013A 94 30            [12]  693 	subb	a,#0x30
      00013C EC               [12]  694 	mov	a,r4
      00013D 64 80            [12]  695 	xrl	a,#0x80
      00013F 94 80            [12]  696 	subb	a,#0x80
      000141 40 1C            [24]  697 	jc	00105$
      000143 ED               [12]  698 	mov	a,r5
      000144 24 D0            [12]  699 	add	a,#0xd0
      000146 FD               [12]  700 	mov	r5,a
      000147 EC               [12]  701 	mov	a,r4
      000148 34 FF            [12]  702 	addc	a,#0xff
      00014A FC               [12]  703 	mov	r4,a
      00014B A8*00            [24]  704 	mov	r0,_bp
      00014D 08               [12]  705 	inc	r0
      00014E 86 82            [24]  706 	mov	dpl,@r0
      000150 08               [12]  707 	inc	r0
      000151 86 83            [24]  708 	mov	dph,@r0
      000153 08               [12]  709 	inc	r0
      000154 86 F0            [24]  710 	mov	b,@r0
      000156 ED               [12]  711 	mov	a,r5
      000157 12r00r00         [24]  712 	lcall	__gptrput
      00015A A3               [24]  713 	inc	dptr
      00015B EC               [12]  714 	mov	a,r4
      00015C 12r00r00         [24]  715 	lcall	__gptrput
      00015F                        716 00105$:
                                    717 ;	walk.c:79: if (t->c < 0) t->c += COLS;
      00015F E5*00            [12]  718 	mov	a,_bp
      000161 24 08            [12]  719 	add	a,#0x08
      000163 F8               [12]  720 	mov	r0,a
      000164 86 82            [24]  721 	mov	dpl,@r0
      000166 08               [12]  722 	inc	r0
      000167 86 83            [24]  723 	mov	dph,@r0
      000169 08               [12]  724 	inc	r0
      00016A 86 F0            [24]  725 	mov	b,@r0
      00016C 12r00r00         [24]  726 	lcall	__gptrget
      00016F A3               [24]  727 	inc	dptr
      000170 12r00r00         [24]  728 	lcall	__gptrget
      000173 30 E7 35         [24]  729 	jnb	acc.7,00109$
      000176 E5*00            [12]  730 	mov	a,_bp
      000178 24 08            [12]  731 	add	a,#0x08
      00017A F8               [12]  732 	mov	r0,a
      00017B 86 82            [24]  733 	mov	dpl,@r0
      00017D 08               [12]  734 	inc	r0
      00017E 86 83            [24]  735 	mov	dph,@r0
      000180 08               [12]  736 	inc	r0
      000181 86 F0            [24]  737 	mov	b,@r0
      000183 12r00r00         [24]  738 	lcall	__gptrget
      000186 FE               [12]  739 	mov	r6,a
      000187 A3               [24]  740 	inc	dptr
      000188 12r00r00         [24]  741 	lcall	__gptrget
      00018B FF               [12]  742 	mov	r7,a
      00018C 74 C0            [12]  743 	mov	a,#0xc0
      00018E 2E               [12]  744 	add	a,r6
      00018F FE               [12]  745 	mov	r6,a
      000190 E4               [12]  746 	clr	a
      000191 3F               [12]  747 	addc	a,r7
      000192 FF               [12]  748 	mov	r7,a
      000193 E5*00            [12]  749 	mov	a,_bp
      000195 24 08            [12]  750 	add	a,#0x08
      000197 F8               [12]  751 	mov	r0,a
      000198 86 82            [24]  752 	mov	dpl,@r0
      00019A 08               [12]  753 	inc	r0
      00019B 86 83            [24]  754 	mov	dph,@r0
      00019D 08               [12]  755 	inc	r0
      00019E 86 F0            [24]  756 	mov	b,@r0
      0001A0 EE               [12]  757 	mov	a,r6
      0001A1 12r00r00         [24]  758 	lcall	__gptrput
      0001A4 A3               [24]  759 	inc	dptr
      0001A5 EF               [12]  760 	mov	a,r7
      0001A6 12r00r00         [24]  761 	lcall	__gptrput
      0001A9 80 55            [24]  762 	sjmp	00110$
      0001AB                        763 00109$:
                                    764 ;	walk.c:80: else if (t->c >= COLS) t->c -= COLS;
      0001AB E5*00            [12]  765 	mov	a,_bp
      0001AD 24 08            [12]  766 	add	a,#0x08
      0001AF F8               [12]  767 	mov	r0,a
      0001B0 86 82            [24]  768 	mov	dpl,@r0
      0001B2 08               [12]  769 	inc	r0
      0001B3 86 83            [24]  770 	mov	dph,@r0
      0001B5 08               [12]  771 	inc	r0
      0001B6 86 F0            [24]  772 	mov	b,@r0
      0001B8 12r00r00         [24]  773 	lcall	__gptrget
      0001BB FE               [12]  774 	mov	r6,a
      0001BC A3               [24]  775 	inc	dptr
      0001BD 12r00r00         [24]  776 	lcall	__gptrget
      0001C0 FF               [12]  777 	mov	r7,a
      0001C1 C3               [12]  778 	clr	c
      0001C2 EE               [12]  779 	mov	a,r6
      0001C3 94 C0            [12]  780 	subb	a,#0xc0
      0001C5 EF               [12]  781 	mov	a,r7
      0001C6 64 80            [12]  782 	xrl	a,#0x80
      0001C8 94 80            [12]  783 	subb	a,#0x80
      0001CA 40 34            [24]  784 	jc	00110$
      0001CC E5*00            [12]  785 	mov	a,_bp
      0001CE 24 08            [12]  786 	add	a,#0x08
      0001D0 F8               [12]  787 	mov	r0,a
      0001D1 86 82            [24]  788 	mov	dpl,@r0
      0001D3 08               [12]  789 	inc	r0
      0001D4 86 83            [24]  790 	mov	dph,@r0
      0001D6 08               [12]  791 	inc	r0
      0001D7 86 F0            [24]  792 	mov	b,@r0
      0001D9 12r00r00         [24]  793 	lcall	__gptrget
      0001DC FE               [12]  794 	mov	r6,a
      0001DD A3               [24]  795 	inc	dptr
      0001DE 12r00r00         [24]  796 	lcall	__gptrget
      0001E1 FF               [12]  797 	mov	r7,a
      0001E2 EE               [12]  798 	mov	a,r6
      0001E3 24 40            [12]  799 	add	a,#0x40
      0001E5 FE               [12]  800 	mov	r6,a
      0001E6 EF               [12]  801 	mov	a,r7
      0001E7 34 FF            [12]  802 	addc	a,#0xff
      0001E9 FF               [12]  803 	mov	r7,a
      0001EA E5*00            [12]  804 	mov	a,_bp
      0001EC 24 08            [12]  805 	add	a,#0x08
      0001EE F8               [12]  806 	mov	r0,a
      0001EF 86 82            [24]  807 	mov	dpl,@r0
      0001F1 08               [12]  808 	inc	r0
      0001F2 86 83            [24]  809 	mov	dph,@r0
      0001F4 08               [12]  810 	inc	r0
      0001F5 86 F0            [24]  811 	mov	b,@r0
      0001F7 EE               [12]  812 	mov	a,r6
      0001F8 12r00r00         [24]  813 	lcall	__gptrput
      0001FB A3               [24]  814 	inc	dptr
      0001FC EF               [12]  815 	mov	a,r7
      0001FD 12r00r00         [24]  816 	lcall	__gptrput
      000200                        817 00110$:
                                    818 ;	walk.c:82: if (g[t->r][t->c] == 0xaa) return 0;
      000200 A8*00            [24]  819 	mov	r0,_bp
      000202 08               [12]  820 	inc	r0
      000203 86 82            [24]  821 	mov	dpl,@r0
      000205 08               [12]  822 	inc	r0
      000206 86 83            [24]  823 	mov	dph,@r0
      000208 08               [12]  824 	inc	r0
      000209 86 F0            [24]  825 	mov	b,@r0
      00020B 12r00r00         [24]  826 	lcall	__gptrget
      00020E FE               [12]  827 	mov	r6,a
      00020F A3               [24]  828 	inc	dptr
      000210 12r00r00         [24]  829 	lcall	__gptrget
      000213 FF               [12]  830 	mov	r7,a
      000214 C0 06            [24]  831 	push	ar6
      000216 C0 07            [24]  832 	push	ar7
      000218 90 00 C0         [24]  833 	mov	dptr,#0x00c0
      00021B 12r00r00         [24]  834 	lcall	__mulint
      00021E AE 82            [24]  835 	mov	r6,dpl
      000220 AF 83            [24]  836 	mov	r7,dph
      000222 15 81            [12]  837 	dec	sp
      000224 15 81            [12]  838 	dec	sp
      000226 EE               [12]  839 	mov	a,r6
      000227 24r00            [12]  840 	add	a,#_g
      000229 FE               [12]  841 	mov	r6,a
      00022A EF               [12]  842 	mov	a,r7
      00022B 34s00            [12]  843 	addc	a,#(_g >> 8)
      00022D FF               [12]  844 	mov	r7,a
      00022E E5*00            [12]  845 	mov	a,_bp
      000230 24 08            [12]  846 	add	a,#0x08
      000232 F8               [12]  847 	mov	r0,a
      000233 86 82            [24]  848 	mov	dpl,@r0
      000235 08               [12]  849 	inc	r0
      000236 86 83            [24]  850 	mov	dph,@r0
      000238 08               [12]  851 	inc	r0
      000239 86 F0            [24]  852 	mov	b,@r0
      00023B 12r00r00         [24]  853 	lcall	__gptrget
      00023E FC               [12]  854 	mov	r4,a
      00023F A3               [24]  855 	inc	dptr
      000240 12r00r00         [24]  856 	lcall	__gptrget
      000243 FD               [12]  857 	mov	r5,a
      000244 EC               [12]  858 	mov	a,r4
      000245 2E               [12]  859 	add	a,r6
      000246 F5 82            [12]  860 	mov	dpl,a
      000248 ED               [12]  861 	mov	a,r5
      000249 3F               [12]  862 	addc	a,r7
      00024A F5 83            [12]  863 	mov	dph,a
      00024C E0               [24]  864 	movx	a,@dptr
      00024D FF               [12]  865 	mov	r7,a
      00024E BF AA 05         [24]  866 	cjne	r7,#0xaa,00114$
      000251 90 00 00         [24]  867 	mov	dptr,#0x0000
      000254 80 62            [24]  868 	sjmp	00116$
      000256                        869 00114$:
                                    870 ;	walk.c:83: else if (g[t->r][t->c] != 0x55) {
      000256 A8*00            [24]  871 	mov	r0,_bp
      000258 08               [12]  872 	inc	r0
      000259 86 82            [24]  873 	mov	dpl,@r0
      00025B 08               [12]  874 	inc	r0
      00025C 86 83            [24]  875 	mov	dph,@r0
      00025E 08               [12]  876 	inc	r0
      00025F 86 F0            [24]  877 	mov	b,@r0
      000261 12r00r00         [24]  878 	lcall	__gptrget
      000264 FE               [12]  879 	mov	r6,a
      000265 A3               [24]  880 	inc	dptr
      000266 12r00r00         [24]  881 	lcall	__gptrget
      000269 FF               [12]  882 	mov	r7,a
      00026A C0 06            [24]  883 	push	ar6
      00026C C0 07            [24]  884 	push	ar7
      00026E 90 00 C0         [24]  885 	mov	dptr,#0x00c0
      000271 12r00r00         [24]  886 	lcall	__mulint
      000274 AE 82            [24]  887 	mov	r6,dpl
      000276 AF 83            [24]  888 	mov	r7,dph
      000278 15 81            [12]  889 	dec	sp
      00027A 15 81            [12]  890 	dec	sp
      00027C EE               [12]  891 	mov	a,r6
      00027D 24r00            [12]  892 	add	a,#_g
      00027F FE               [12]  893 	mov	r6,a
      000280 EF               [12]  894 	mov	a,r7
      000281 34s00            [12]  895 	addc	a,#(_g >> 8)
      000283 FF               [12]  896 	mov	r7,a
      000284 E5*00            [12]  897 	mov	a,_bp
      000286 24 08            [12]  898 	add	a,#0x08
      000288 F8               [12]  899 	mov	r0,a
      000289 86 82            [24]  900 	mov	dpl,@r0
      00028B 08               [12]  901 	inc	r0
      00028C 86 83            [24]  902 	mov	dph,@r0
      00028E 08               [12]  903 	inc	r0
      00028F 86 F0            [24]  904 	mov	b,@r0
      000291 12r00r00         [24]  905 	lcall	__gptrget
      000294 FC               [12]  906 	mov	r4,a
      000295 A3               [24]  907 	inc	dptr
      000296 12r00r00         [24]  908 	lcall	__gptrget
      000299 FD               [12]  909 	mov	r5,a
      00029A EC               [12]  910 	mov	a,r4
      00029B 2E               [12]  911 	add	a,r6
      00029C F5 82            [12]  912 	mov	dpl,a
      00029E ED               [12]  913 	mov	a,r5
      00029F 3F               [12]  914 	addc	a,r7
      0002A0 F5 83            [12]  915 	mov	dph,a
      0002A2 E0               [24]  916 	movx	a,@dptr
      0002A3 FF               [12]  917 	mov	r7,a
      0002A4 BF 55 02         [24]  918 	cjne	r7,#0x55,00148$
      0002A7 80 0C            [24]  919 	sjmp	00115$
      0002A9                        920 00148$:
                                    921 ;	walk.c:84: (void)puts("Memory error");
      0002A9 90r00r20         [24]  922 	mov	dptr,#___str_0
      0002AC 75 F0 80         [24]  923 	mov	b,#0x80
      0002AF 12r00r00         [24]  924 	lcall	_puts
                                    925 ;	walk.c:85: reset();
      0002B2 12r00r1A         [24]  926 	lcall	_reset
      0002B5                        927 00115$:
                                    928 ;	walk.c:88: return 1;
      0002B5 90 00 01         [24]  929 	mov	dptr,#0x0001
      0002B8                        930 00116$:
                                    931 ;	walk.c:89: }
      0002B8 85*00 81         [24]  932 	mov	sp,_bp
      0002BB D0*00            [24]  933 	pop	_bp
      0002BD 22               [24]  934 	ret
                                    935 ;------------------------------------------------------------
                                    936 ;Allocation info for local variables in function 'walk'
                                    937 ;------------------------------------------------------------
                                    938 ;nstart                    Allocated to registers 
                                    939 ;cur                       Allocated to stack - _bp +10
                                    940 ;t                         Allocated to stack - _bp +14
                                    941 ;j                         Allocated to stack - _bp +18
                                    942 ;f                         Allocated to stack - _bp +20
                                    943 ;sloc0                     Allocated to stack - _bp +1
                                    944 ;sloc1                     Allocated to stack - _bp +2
                                    945 ;sloc2                     Allocated to stack - _bp +3
                                    946 ;sloc3                     Allocated to stack - _bp +19
                                    947 ;sloc4                     Allocated to stack - _bp +4
                                    948 ;sloc5                     Allocated to stack - _bp +5
                                    949 ;sloc6                     Allocated to stack - _bp +6
                                    950 ;sloc7                     Allocated to stack - _bp +7
                                    951 ;------------------------------------------------------------
                                    952 ;	walk.c:91: static void walk(struct node *nstart) {
                                    953 ;	-----------------------------------------
                                    954 ;	 function walk
                                    955 ;	-----------------------------------------
      0002BE                        956 _walk:
      0002BE C0*00            [24]  957 	push	_bp
      0002C0 E5 81            [12]  958 	mov	a,sp
      0002C2 F5*00            [12]  959 	mov	_bp,a
      0002C4 24 15            [12]  960 	add	a,#0x15
      0002C6 F5 81            [12]  961 	mov	sp,a
      0002C8 AD 82            [24]  962 	mov	r5,dpl
      0002CA AE 83            [24]  963 	mov	r6,dph
      0002CC AF F0            [24]  964 	mov	r7,b
                                    965 ;	walk.c:95: cur = *nstart;
      0002CE E5*00            [12]  966 	mov	a,_bp
      0002D0 24 0A            [12]  967 	add	a,#0x0a
      0002D2 F9               [12]  968 	mov	r1,a
      0002D3 FA               [12]  969 	mov	r2,a
      0002D4 7B 00            [12]  970 	mov	r3,#0x00
      0002D6 7C 40            [12]  971 	mov	r4,#0x40
      0002D8 C0 01            [24]  972 	push	ar1
      0002DA 74 04            [12]  973 	mov	a,#0x04
      0002DC C0 E0            [24]  974 	push	acc
      0002DE E4               [12]  975 	clr	a
      0002DF C0 E0            [24]  976 	push	acc
      0002E1 C0 05            [24]  977 	push	ar5
      0002E3 C0 06            [24]  978 	push	ar6
      0002E5 C0 07            [24]  979 	push	ar7
      0002E7 8A 82            [24]  980 	mov	dpl,r2
      0002E9 8B 83            [24]  981 	mov	dph,r3
      0002EB 8C F0            [24]  982 	mov	b,r4
      0002ED 12r00r00         [24]  983 	lcall	___memcpy
      0002F0 E5 81            [12]  984 	mov	a,sp
      0002F2 24 FB            [12]  985 	add	a,#0xfb
      0002F4 F5 81            [12]  986 	mov	sp,a
      0002F6 D0 01            [24]  987 	pop	ar1
                                    988 ;	walk.c:97: process:
      0002F8 E5*00            [12]  989 	mov	a,_bp
      0002FA 24 06            [12]  990 	add	a,#0x06
      0002FC F8               [12]  991 	mov	r0,a
      0002FD A6 01            [24]  992 	mov	@r0,ar1
      0002FF E5*00            [12]  993 	mov	a,_bp
      000301 24 0E            [12]  994 	add	a,#0x0e
      000303 FE               [12]  995 	mov	r6,a
      000304 E5*00            [12]  996 	mov	a,_bp
      000306 24 03            [12]  997 	add	a,#0x03
      000308 F8               [12]  998 	mov	r0,a
      000309 A6 01            [24]  999 	mov	@r0,ar1
      00030B E5*00            [12] 1000 	mov	a,_bp
      00030D 24 05            [12] 1001 	add	a,#0x05
      00030F F8               [12] 1002 	mov	r0,a
      000310 A6 01            [24] 1003 	mov	@r0,ar1
      000312 E5*00            [12] 1004 	mov	a,_bp
      000314 24 04            [12] 1005 	add	a,#0x04
      000316 F8               [12] 1006 	mov	r0,a
      000317 A6 06            [24] 1007 	mov	@r0,ar6
      000319 89 02            [24] 1008 	mov	ar2,r1
      00031B A8*00            [24] 1009 	mov	r0,_bp
      00031D 08               [12] 1010 	inc	r0
      00031E A6 06            [24] 1011 	mov	@r0,ar6
      000320 A8*00            [24] 1012 	mov	r0,_bp
      000322 08               [12] 1013 	inc	r0
      000323 08               [12] 1014 	inc	r0
      000324 A6 01            [24] 1015 	mov	@r0,ar1
      000326 74 02            [12] 1016 	mov	a,#0x02
      000328 29               [12] 1017 	add	a,r1
      000329 F8               [12] 1018 	mov	r0,a
      00032A                       1019 00101$:
                                   1020 ;	walk.c:98: g[cur.r][cur.c] = 0xaa;
      00032A C0 02            [24] 1021 	push	ar2
      00032C 87 02            [24] 1022 	mov	ar2,@r1
      00032E 09               [12] 1023 	inc	r1
      00032F 87 05            [24] 1024 	mov	ar5,@r1
      000331 19               [12] 1025 	dec	r1
      000332 C0 06            [24] 1026 	push	ar6
      000334 C0 01            [24] 1027 	push	ar1
      000336 C0 00            [24] 1028 	push	ar0
      000338 C0 02            [24] 1029 	push	ar2
      00033A C0 05            [24] 1030 	push	ar5
      00033C 90 00 C0         [24] 1031 	mov	dptr,#0x00c0
      00033F 12r00r00         [24] 1032 	lcall	__mulint
      000342 AA 82            [24] 1033 	mov	r2,dpl
      000344 AD 83            [24] 1034 	mov	r5,dph
      000346 15 81            [12] 1035 	dec	sp
      000348 15 81            [12] 1036 	dec	sp
      00034A D0 00            [24] 1037 	pop	ar0
      00034C D0 01            [24] 1038 	pop	ar1
      00034E EA               [12] 1039 	mov	a,r2
      00034F 24r00            [12] 1040 	add	a,#_g
      000351 FF               [12] 1041 	mov	r7,a
      000352 ED               [12] 1042 	mov	a,r5
      000353 34s00            [12] 1043 	addc	a,#(_g >> 8)
      000355 FC               [12] 1044 	mov	r4,a
      000356 86 02            [24] 1045 	mov	ar2,@r0
      000358 08               [12] 1046 	inc	r0
      000359 86 05            [24] 1047 	mov	ar5,@r0
      00035B 18               [12] 1048 	dec	r0
      00035C EA               [12] 1049 	mov	a,r2
      00035D 2F               [12] 1050 	add	a,r7
      00035E F5 82            [12] 1051 	mov	dpl,a
      000360 ED               [12] 1052 	mov	a,r5
      000361 3C               [12] 1053 	addc	a,r4
      000362 F5 83            [12] 1054 	mov	dph,a
      000364 74 AA            [12] 1055 	mov	a,#0xaa
      000366 F0               [24] 1056 	movx	@dptr,a
                                   1057 ;	walk.c:99: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000367 86 02            [24] 1058 	mov	ar2,@r0
      000369 08               [12] 1059 	inc	r0
      00036A 86 05            [24] 1060 	mov	ar5,@r0
      00036C 18               [12] 1061 	dec	r0
      00036D 74 01            [12] 1062 	mov	a,#0x01
      00036F 2A               [12] 1063 	add	a,r2
      000370 FF               [12] 1064 	mov	r7,a
      000371 E4               [12] 1065 	clr	a
      000372 3D               [12] 1066 	addc	a,r5
      000373 FC               [12] 1067 	mov	r4,a
      000374 87 02            [24] 1068 	mov	ar2,@r1
      000376 09               [12] 1069 	inc	r1
      000377 87 05            [24] 1070 	mov	ar5,@r1
      000379 19               [12] 1071 	dec	r1
      00037A 74 04            [12] 1072 	mov	a,#0x04
      00037C 2A               [12] 1073 	add	a,r2
      00037D FA               [12] 1074 	mov	r2,a
      00037E E4               [12] 1075 	clr	a
      00037F 3D               [12] 1076 	addc	a,r5
      000380 FD               [12] 1077 	mov	r5,a
      000381 C0 02            [24] 1078 	push	ar2
      000383 C0 01            [24] 1079 	push	ar1
      000385 C0 00            [24] 1080 	push	ar0
      000387 C0 07            [24] 1081 	push	ar7
      000389 C0 04            [24] 1082 	push	ar4
      00038B C0 02            [24] 1083 	push	ar2
      00038D C0 05            [24] 1084 	push	ar5
      00038F 74r2D            [12] 1085 	mov	a,#___str_1
      000391 C0 E0            [24] 1086 	push	acc
      000393 74s00            [12] 1087 	mov	a,#(___str_1 >> 8)
      000395 C0 E0            [24] 1088 	push	acc
      000397 74 80            [12] 1089 	mov	a,#0x80
      000399 C0 E0            [24] 1090 	push	acc
      00039B 12r00r00         [24] 1091 	lcall	_printf
      00039E E5 81            [12] 1092 	mov	a,sp
      0003A0 24 F9            [12] 1093 	add	a,#0xf9
      0003A2 F5 81            [12] 1094 	mov	sp,a
      0003A4 D0 00            [24] 1095 	pop	ar0
      0003A6 D0 01            [24] 1096 	pop	ar1
      0003A8 D0 02            [24] 1097 	pop	ar2
      0003AA D0 06            [24] 1098 	pop	ar6
                                   1099 ;	walk.c:129: return;
      0003AC D0 02            [24] 1100 	pop	ar2
                                   1101 ;	walk.c:101: next:
      0003AE                       1102 00102$:
                                   1103 ;	walk.c:102: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003AE C0 02            [24] 1104 	push	ar2
      0003B0 86 07            [24] 1105 	mov	ar7,@r0
      0003B2 08               [12] 1106 	inc	r0
      0003B3 86 04            [24] 1107 	mov	ar4,@r0
      0003B5 18               [12] 1108 	dec	r0
      0003B6 87 02            [24] 1109 	mov	ar2,@r1
      0003B8 09               [12] 1110 	inc	r1
      0003B9 87 05            [24] 1111 	mov	ar5,@r1
      0003BB 19               [12] 1112 	dec	r1
      0003BC C0 06            [24] 1113 	push	ar6
      0003BE C0 02            [24] 1114 	push	ar2
      0003C0 C0 01            [24] 1115 	push	ar1
      0003C2 C0 00            [24] 1116 	push	ar0
      0003C4 C0 07            [24] 1117 	push	ar7
      0003C6 C0 04            [24] 1118 	push	ar4
      0003C8 C0 02            [24] 1119 	push	ar2
      0003CA C0 05            [24] 1120 	push	ar5
      0003CC 90rB4r00         [24] 1121 	mov	dptr,#_sp
      0003CF E0               [24] 1122 	movx	a,@dptr
      0003D0 C0 E0            [24] 1123 	push	acc
      0003D2 A3               [24] 1124 	inc	dptr
      0003D3 E0               [24] 1125 	movx	a,@dptr
      0003D4 C0 E0            [24] 1126 	push	acc
      0003D6 74r37            [12] 1127 	mov	a,#___str_2
      0003D8 C0 E0            [24] 1128 	push	acc
      0003DA 74s00            [12] 1129 	mov	a,#(___str_2 >> 8)
      0003DC C0 E0            [24] 1130 	push	acc
      0003DE 74 80            [12] 1131 	mov	a,#0x80
      0003E0 C0 E0            [24] 1132 	push	acc
      0003E2 12r00r00         [24] 1133 	lcall	_printf
      0003E5 E5 81            [12] 1134 	mov	a,sp
      0003E7 24 F7            [12] 1135 	add	a,#0xf7
      0003E9 F5 81            [12] 1136 	mov	sp,a
      0003EB D0 00            [24] 1137 	pop	ar0
      0003ED D0 01            [24] 1138 	pop	ar1
      0003EF D0 02            [24] 1139 	pop	ar2
      0003F1 D0 06            [24] 1140 	pop	ar6
                                   1141 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      0003F3 C0 00            [24] 1142 	push	ar0
      0003F5 E5*00            [12] 1143 	mov	a,_bp
      0003F7 24 14            [12] 1144 	add	a,#0x14
      0003F9 F8               [12] 1145 	mov	r0,a
      0003FA E4               [12] 1146 	clr	a
      0003FB F6               [12] 1147 	mov	@r0,a
      0003FC 08               [12] 1148 	inc	r0
      0003FD F6               [12] 1149 	mov	@r0,a
      0003FE E5*00            [12] 1150 	mov	a,_bp
      000400 24 12            [12] 1151 	add	a,#0x12
      000402 F8               [12] 1152 	mov	r0,a
      000403 E4               [12] 1153 	clr	a
      000404 F6               [12] 1154 	mov	@r0,a
      000405 08               [12] 1155 	inc	r0
      000406 F6               [12] 1156 	mov	@r0,a
      000407 D0 00            [24] 1157 	pop	ar0
                                   1158 ;	walk.c:129: return;
      000409 D0 02            [24] 1159 	pop	ar2
                                   1160 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      00040B                       1161 00120$:
      00040B C0 00            [24] 1162 	push	ar0
      00040D E5*00            [12] 1163 	mov	a,_bp
      00040F 24 12            [12] 1164 	add	a,#0x12
      000411 F8               [12] 1165 	mov	r0,a
      000412 C3               [12] 1166 	clr	c
      000413 E6               [12] 1167 	mov	a,@r0
      000414 94 08            [12] 1168 	subb	a,#0x08
      000416 08               [12] 1169 	inc	r0
      000417 E6               [12] 1170 	mov	a,@r0
      000418 64 80            [12] 1171 	xrl	a,#0x80
      00041A 94 80            [12] 1172 	subb	a,#0x80
      00041C D0 00            [24] 1173 	pop	ar0
      00041E 40 03            [24] 1174 	jc	00160$
      000420 02r04rB3         [24] 1175 	ljmp	00106$
      000423                       1176 00160$:
                                   1177 ;	walk.c:105: if (!update(&t, &cur, j)) continue;
      000423 C0 02            [24] 1178 	push	ar2
      000425 C0 00            [24] 1179 	push	ar0
      000427 E5*00            [12] 1180 	mov	a,_bp
      000429 24 06            [12] 1181 	add	a,#0x06
      00042B F8               [12] 1182 	mov	r0,a
      00042C C0 01            [24] 1183 	push	ar1
      00042E E5*00            [12] 1184 	mov	a,_bp
      000430 24 07            [12] 1185 	add	a,#0x07
      000432 F9               [12] 1186 	mov	r1,a
      000433 E6               [12] 1187 	mov	a,@r0
      000434 F7               [12] 1188 	mov	@r1,a
      000435 09               [12] 1189 	inc	r1
      000436 77 00            [12] 1190 	mov	@r1,#0x00
      000438 09               [12] 1191 	inc	r1
      000439 77 40            [12] 1192 	mov	@r1,#0x40
      00043B D0 01            [24] 1193 	pop	ar1
      00043D D0 00            [24] 1194 	pop	ar0
      00043F 8E 04            [24] 1195 	mov	ar4,r6
      000441 7D 00            [12] 1196 	mov	r5,#0x00
      000443 7F 40            [12] 1197 	mov	r7,#0x40
      000445 C0 06            [24] 1198 	push	ar6
      000447 C0 02            [24] 1199 	push	ar2
      000449 C0 01            [24] 1200 	push	ar1
      00044B C0 00            [24] 1201 	push	ar0
      00044D 85 00 F0         [24] 1202 	mov	b,ar0
      000450 E5*00            [12] 1203 	mov	a,_bp
      000452 24 12            [12] 1204 	add	a,#0x12
      000454 F8               [12] 1205 	mov	r0,a
      000455 E6               [12] 1206 	mov	a,@r0
      000456 C0 E0            [24] 1207 	push	acc
      000458 08               [12] 1208 	inc	r0
      000459 E6               [12] 1209 	mov	a,@r0
      00045A C0 E0            [24] 1210 	push	acc
      00045C A8 F0            [24] 1211 	mov	r0,b
      00045E 85 00 F0         [24] 1212 	mov	b,ar0
      000461 E5*00            [12] 1213 	mov	a,_bp
      000463 24 07            [12] 1214 	add	a,#0x07
      000465 F8               [12] 1215 	mov	r0,a
      000466 E6               [12] 1216 	mov	a,@r0
      000467 C0 E0            [24] 1217 	push	acc
      000469 08               [12] 1218 	inc	r0
      00046A E6               [12] 1219 	mov	a,@r0
      00046B C0 E0            [24] 1220 	push	acc
      00046D 08               [12] 1221 	inc	r0
      00046E E6               [12] 1222 	mov	a,@r0
      00046F C0 E0            [24] 1223 	push	acc
      000471 8C 82            [24] 1224 	mov	dpl,r4
      000473 8D 83            [24] 1225 	mov	dph,r5
      000475 8F F0            [24] 1226 	mov	b,r7
      000477 12r00r1D         [24] 1227 	lcall	_update
      00047A AD 82            [24] 1228 	mov	r5,dpl
      00047C AF 83            [24] 1229 	mov	r7,dph
      00047E E5 81            [12] 1230 	mov	a,sp
      000480 24 FB            [12] 1231 	add	a,#0xfb
      000482 F5 81            [12] 1232 	mov	sp,a
      000484 D0 00            [24] 1233 	pop	ar0
      000486 D0 01            [24] 1234 	pop	ar1
      000488 D0 02            [24] 1235 	pop	ar2
      00048A D0 06            [24] 1236 	pop	ar6
      00048C D0 02            [24] 1237 	pop	ar2
      00048E ED               [12] 1238 	mov	a,r5
      00048F 4F               [12] 1239 	orl	a,r7
      000490 60 0F            [24] 1240 	jz	00105$
                                   1241 ;	walk.c:106: f++;
      000492 C0 00            [24] 1242 	push	ar0
      000494 E5*00            [12] 1243 	mov	a,_bp
      000496 24 14            [12] 1244 	add	a,#0x14
      000498 F8               [12] 1245 	mov	r0,a
      000499 06               [12] 1246 	inc	@r0
      00049A B6 00 02         [24] 1247 	cjne	@r0,#0x00,00162$
      00049D 08               [12] 1248 	inc	r0
      00049E 06               [12] 1249 	inc	@r0
      00049F                       1250 00162$:
      00049F D0 00            [24] 1251 	pop	ar0
      0004A1                       1252 00105$:
                                   1253 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      0004A1 C0 00            [24] 1254 	push	ar0
      0004A3 E5*00            [12] 1255 	mov	a,_bp
      0004A5 24 12            [12] 1256 	add	a,#0x12
      0004A7 F8               [12] 1257 	mov	r0,a
      0004A8 06               [12] 1258 	inc	@r0
      0004A9 B6 00 02         [24] 1259 	cjne	@r0,#0x00,00163$
      0004AC 08               [12] 1260 	inc	r0
      0004AD 06               [12] 1261 	inc	@r0
      0004AE                       1262 00163$:
      0004AE D0 00            [24] 1263 	pop	ar0
      0004B0 02r04r0B         [24] 1264 	ljmp	00120$
      0004B3                       1265 00106$:
                                   1266 ;	walk.c:109: if (f) {
      0004B3 C0 00            [24] 1267 	push	ar0
      0004B5 E5*00            [12] 1268 	mov	a,_bp
      0004B7 24 14            [12] 1269 	add	a,#0x14
      0004B9 F8               [12] 1270 	mov	r0,a
      0004BA E6               [12] 1271 	mov	a,@r0
      0004BB 08               [12] 1272 	inc	r0
      0004BC 46               [12] 1273 	orl	a,@r0
      0004BD D0 00            [24] 1274 	pop	ar0
      0004BF 70 03            [24] 1275 	jnz	00164$
      0004C1 02r06r19         [24] 1276 	ljmp	00115$
      0004C4                       1277 00164$:
                                   1278 ;	walk.c:110: while (1) {
      0004C4                       1279 00112$:
                                   1280 ;	walk.c:111: j = rand() % NMAX;
      0004C4 C0 02            [24] 1281 	push	ar2
      0004C6 C0 06            [24] 1282 	push	ar6
      0004C8 C0 02            [24] 1283 	push	ar2
      0004CA C0 01            [24] 1284 	push	ar1
      0004CC C0 00            [24] 1285 	push	ar0
      0004CE 12r00r00         [24] 1286 	lcall	_rand
      0004D1 AD 82            [24] 1287 	mov	r5,dpl
      0004D3 AF 83            [24] 1288 	mov	r7,dph
      0004D5 74 08            [12] 1289 	mov	a,#0x08
      0004D7 C0 E0            [24] 1290 	push	acc
      0004D9 E4               [12] 1291 	clr	a
      0004DA C0 E0            [24] 1292 	push	acc
      0004DC 8D 82            [24] 1293 	mov	dpl,r5
      0004DE 8F 83            [24] 1294 	mov	dph,r7
      0004E0 12r00r00         [24] 1295 	lcall	__modsint
      0004E3 C0 00            [24] 1296 	push	ar0
      0004E5 C8               [12] 1297 	xch	a,r0
      0004E6 E5*00            [12] 1298 	mov	a,_bp
      0004E8 24 12            [12] 1299 	add	a,#0x12
      0004EA C8               [12] 1300 	xch	a,r0
      0004EB A6 82            [24] 1301 	mov	@r0,dpl
      0004ED 08               [12] 1302 	inc	r0
      0004EE A6 83            [24] 1303 	mov	@r0,dph
      0004F0 D0 00            [24] 1304 	pop	ar0
      0004F2 15 81            [12] 1305 	dec	sp
      0004F4 15 81            [12] 1306 	dec	sp
      0004F6 D0 00            [24] 1307 	pop	ar0
      0004F8 D0 01            [24] 1308 	pop	ar1
      0004FA D0 02            [24] 1309 	pop	ar2
      0004FC D0 06            [24] 1310 	pop	ar6
                                   1311 ;	walk.c:112: if (!update(&t, &cur, j)) continue;
      0004FE C0 00            [24] 1312 	push	ar0
      000500 E5*00            [12] 1313 	mov	a,_bp
      000502 24 05            [12] 1314 	add	a,#0x05
      000504 F8               [12] 1315 	mov	r0,a
      000505 C0 01            [24] 1316 	push	ar1
      000507 E5*00            [12] 1317 	mov	a,_bp
      000509 24 07            [12] 1318 	add	a,#0x07
      00050B F9               [12] 1319 	mov	r1,a
      00050C E6               [12] 1320 	mov	a,@r0
      00050D F7               [12] 1321 	mov	@r1,a
      00050E 09               [12] 1322 	inc	r1
      00050F 77 00            [12] 1323 	mov	@r1,#0x00
      000511 09               [12] 1324 	inc	r1
      000512 77 40            [12] 1325 	mov	@r1,#0x40
      000514 D0 01            [24] 1326 	pop	ar1
      000516 E5*00            [12] 1327 	mov	a,_bp
      000518 24 04            [12] 1328 	add	a,#0x04
      00051A F8               [12] 1329 	mov	r0,a
      00051B 86 04            [24] 1330 	mov	ar4,@r0
      00051D 7D 00            [12] 1331 	mov	r5,#0x00
      00051F 7F 40            [12] 1332 	mov	r7,#0x40
      000521 D0 00            [24] 1333 	pop	ar0
      000523 C0 06            [24] 1334 	push	ar6
      000525 C0 02            [24] 1335 	push	ar2
      000527 C0 01            [24] 1336 	push	ar1
      000529 C0 00            [24] 1337 	push	ar0
      00052B 85 00 F0         [24] 1338 	mov	b,ar0
      00052E E5*00            [12] 1339 	mov	a,_bp
      000530 24 12            [12] 1340 	add	a,#0x12
      000532 F8               [12] 1341 	mov	r0,a
      000533 E6               [12] 1342 	mov	a,@r0
      000534 C0 E0            [24] 1343 	push	acc
      000536 08               [12] 1344 	inc	r0
      000537 E6               [12] 1345 	mov	a,@r0
      000538 C0 E0            [24] 1346 	push	acc
      00053A A8 F0            [24] 1347 	mov	r0,b
      00053C 85 00 F0         [24] 1348 	mov	b,ar0
      00053F E5*00            [12] 1349 	mov	a,_bp
      000541 24 07            [12] 1350 	add	a,#0x07
      000543 F8               [12] 1351 	mov	r0,a
      000544 E6               [12] 1352 	mov	a,@r0
      000545 C0 E0            [24] 1353 	push	acc
      000547 08               [12] 1354 	inc	r0
      000548 E6               [12] 1355 	mov	a,@r0
      000549 C0 E0            [24] 1356 	push	acc
      00054B 08               [12] 1357 	inc	r0
      00054C E6               [12] 1358 	mov	a,@r0
      00054D C0 E0            [24] 1359 	push	acc
      00054F 8C 82            [24] 1360 	mov	dpl,r4
      000551 8D 83            [24] 1361 	mov	dph,r5
      000553 8F F0            [24] 1362 	mov	b,r7
      000555 12r00r1D         [24] 1363 	lcall	_update
      000558 AD 82            [24] 1364 	mov	r5,dpl
      00055A AF 83            [24] 1365 	mov	r7,dph
      00055C E5 81            [12] 1366 	mov	a,sp
      00055E 24 FB            [12] 1367 	add	a,#0xfb
      000560 F5 81            [12] 1368 	mov	sp,a
      000562 D0 00            [24] 1369 	pop	ar0
      000564 D0 01            [24] 1370 	pop	ar1
      000566 D0 02            [24] 1371 	pop	ar2
      000568 D0 06            [24] 1372 	pop	ar6
      00056A D0 02            [24] 1373 	pop	ar2
      00056C ED               [12] 1374 	mov	a,r5
      00056D 4F               [12] 1375 	orl	a,r7
      00056E 70 03            [24] 1376 	jnz	00165$
      000570 02r04rC4         [24] 1377 	ljmp	00112$
      000573                       1378 00165$:
                                   1379 ;	walk.c:114: if (!stpush(&cur)) {
      000573 8A 04            [24] 1380 	mov	ar4,r2
      000575 7D 00            [12] 1381 	mov	r5,#0x00
      000577 7F 40            [12] 1382 	mov	r7,#0x40
      000579 8C 82            [24] 1383 	mov	dpl,r4
      00057B 8D 83            [24] 1384 	mov	dph,r5
      00057D 8F F0            [24] 1385 	mov	b,r7
      00057F C0 06            [24] 1386 	push	ar6
      000581 C0 02            [24] 1387 	push	ar2
      000583 C0 01            [24] 1388 	push	ar1
      000585 C0 00            [24] 1389 	push	ar0
      000587 12r08rA8         [24] 1390 	lcall	_stpush
      00058A E5 82            [12] 1391 	mov	a,dpl
      00058C 85 83 F0         [24] 1392 	mov	b,dph
      00058F D0 00            [24] 1393 	pop	ar0
      000591 D0 01            [24] 1394 	pop	ar1
      000593 D0 02            [24] 1395 	pop	ar2
      000595 D0 06            [24] 1396 	pop	ar6
      000597 45 F0            [12] 1397 	orl	a,b
      000599 70 1C            [24] 1398 	jnz	00110$
                                   1399 ;	walk.c:115: (void)puts("Memory error");
      00059B 90r00r20         [24] 1400 	mov	dptr,#___str_0
      00059E 75 F0 80         [24] 1401 	mov	b,#0x80
      0005A1 C0 06            [24] 1402 	push	ar6
      0005A3 C0 02            [24] 1403 	push	ar2
      0005A5 C0 01            [24] 1404 	push	ar1
      0005A7 C0 00            [24] 1405 	push	ar0
      0005A9 12r00r00         [24] 1406 	lcall	_puts
      0005AC D0 00            [24] 1407 	pop	ar0
      0005AE D0 01            [24] 1408 	pop	ar1
      0005B0 D0 02            [24] 1409 	pop	ar2
      0005B2 D0 06            [24] 1410 	pop	ar6
                                   1411 ;	walk.c:116: reset();
      0005B4 12r00r1A         [24] 1412 	lcall	_reset
      0005B7                       1413 00110$:
                                   1414 ;	walk.c:118: cur = t;
      0005B7 C0 02            [24] 1415 	push	ar2
      0005B9 C0 00            [24] 1416 	push	ar0
      0005BB A8*00            [24] 1417 	mov	r0,_bp
      0005BD 08               [12] 1418 	inc	r0
      0005BE C0 01            [24] 1419 	push	ar1
      0005C0 E5*00            [12] 1420 	mov	a,_bp
      0005C2 24 07            [12] 1421 	add	a,#0x07
      0005C4 F9               [12] 1422 	mov	r1,a
      0005C5 E6               [12] 1423 	mov	a,@r0
      0005C6 F7               [12] 1424 	mov	@r1,a
      0005C7 09               [12] 1425 	inc	r1
      0005C8 77 00            [12] 1426 	mov	@r1,#0x00
      0005CA 09               [12] 1427 	inc	r1
      0005CB 77 40            [12] 1428 	mov	@r1,#0x40
      0005CD D0 01            [24] 1429 	pop	ar1
      0005CF A8*00            [24] 1430 	mov	r0,_bp
      0005D1 08               [12] 1431 	inc	r0
      0005D2 08               [12] 1432 	inc	r0
      0005D3 86 02            [24] 1433 	mov	ar2,@r0
      0005D5 7B 00            [12] 1434 	mov	r3,#0x00
      0005D7 7F 40            [12] 1435 	mov	r7,#0x40
      0005D9 D0 00            [24] 1436 	pop	ar0
      0005DB C0 06            [24] 1437 	push	ar6
      0005DD C0 02            [24] 1438 	push	ar2
      0005DF C0 01            [24] 1439 	push	ar1
      0005E1 C0 00            [24] 1440 	push	ar0
      0005E3 74 04            [12] 1441 	mov	a,#0x04
      0005E5 C0 E0            [24] 1442 	push	acc
      0005E7 E4               [12] 1443 	clr	a
      0005E8 C0 E0            [24] 1444 	push	acc
      0005EA 85 00 F0         [24] 1445 	mov	b,ar0
      0005ED E5*00            [12] 1446 	mov	a,_bp
      0005EF 24 07            [12] 1447 	add	a,#0x07
      0005F1 F8               [12] 1448 	mov	r0,a
      0005F2 E6               [12] 1449 	mov	a,@r0
      0005F3 C0 E0            [24] 1450 	push	acc
      0005F5 08               [12] 1451 	inc	r0
      0005F6 E6               [12] 1452 	mov	a,@r0
      0005F7 C0 E0            [24] 1453 	push	acc
      0005F9 08               [12] 1454 	inc	r0
      0005FA E6               [12] 1455 	mov	a,@r0
      0005FB C0 E0            [24] 1456 	push	acc
      0005FD 8A 82            [24] 1457 	mov	dpl,r2
      0005FF 8B 83            [24] 1458 	mov	dph,r3
      000601 8F F0            [24] 1459 	mov	b,r7
      000603 12r00r00         [24] 1460 	lcall	___memcpy
      000606 E5 81            [12] 1461 	mov	a,sp
      000608 24 FB            [12] 1462 	add	a,#0xfb
      00060A F5 81            [12] 1463 	mov	sp,a
      00060C D0 00            [24] 1464 	pop	ar0
      00060E D0 01            [24] 1465 	pop	ar1
      000610 D0 02            [24] 1466 	pop	ar2
      000612 D0 06            [24] 1467 	pop	ar6
                                   1468 ;	walk.c:119: goto process;
      000614 D0 02            [24] 1469 	pop	ar2
      000616 02r03r2A         [24] 1470 	ljmp	00101$
      000619                       1471 00115$:
                                   1472 ;	walk.c:123: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      000619 86 05            [24] 1473 	mov	ar5,@r0
      00061B 08               [12] 1474 	inc	r0
      00061C 86 07            [24] 1475 	mov	ar7,@r0
      00061E 18               [12] 1476 	dec	r0
      00061F 0D               [12] 1477 	inc	r5
      000620 BD 00 01         [24] 1478 	cjne	r5,#0x00,00167$
      000623 0F               [12] 1479 	inc	r7
      000624                       1480 00167$:
      000624 87 03            [24] 1481 	mov	ar3,@r1
      000626 09               [12] 1482 	inc	r1
      000627 87 04            [24] 1483 	mov	ar4,@r1
      000629 19               [12] 1484 	dec	r1
      00062A 74 04            [12] 1485 	mov	a,#0x04
      00062C 2B               [12] 1486 	add	a,r3
      00062D FB               [12] 1487 	mov	r3,a
      00062E E4               [12] 1488 	clr	a
      00062F 3C               [12] 1489 	addc	a,r4
      000630 FC               [12] 1490 	mov	r4,a
      000631 C0 06            [24] 1491 	push	ar6
      000633 C0 02            [24] 1492 	push	ar2
      000635 C0 01            [24] 1493 	push	ar1
      000637 C0 00            [24] 1494 	push	ar0
      000639 C0 05            [24] 1495 	push	ar5
      00063B C0 07            [24] 1496 	push	ar7
      00063D C0 03            [24] 1497 	push	ar3
      00063F C0 04            [24] 1498 	push	ar4
      000641 74r4A            [12] 1499 	mov	a,#___str_3
      000643 C0 E0            [24] 1500 	push	acc
      000645 74s00            [12] 1501 	mov	a,#(___str_3 >> 8)
      000647 C0 E0            [24] 1502 	push	acc
      000649 74 80            [12] 1503 	mov	a,#0x80
      00064B C0 E0            [24] 1504 	push	acc
      00064D 12r00r00         [24] 1505 	lcall	_printf
      000650 E5 81            [12] 1506 	mov	a,sp
      000652 24 F9            [12] 1507 	add	a,#0xf9
      000654 F5 81            [12] 1508 	mov	sp,a
      000656 D0 00            [24] 1509 	pop	ar0
      000658 D0 01            [24] 1510 	pop	ar1
      00065A D0 02            [24] 1511 	pop	ar2
      00065C D0 06            [24] 1512 	pop	ar6
                                   1513 ;	walk.c:125: if (!stpop(&cur)) goto term;
      00065E C0 00            [24] 1514 	push	ar0
      000660 E5*00            [12] 1515 	mov	a,_bp
      000662 24 03            [12] 1516 	add	a,#0x03
      000664 F8               [12] 1517 	mov	r0,a
      000665 86 04            [24] 1518 	mov	ar4,@r0
      000667 7D 00            [12] 1519 	mov	r5,#0x00
      000669 7F 40            [12] 1520 	mov	r7,#0x40
      00066B D0 00            [24] 1521 	pop	ar0
      00066D 8C 82            [24] 1522 	mov	dpl,r4
      00066F 8D 83            [24] 1523 	mov	dph,r5
      000671 8F F0            [24] 1524 	mov	b,r7
      000673 C0 06            [24] 1525 	push	ar6
      000675 C0 02            [24] 1526 	push	ar2
      000677 C0 01            [24] 1527 	push	ar1
      000679 C0 00            [24] 1528 	push	ar0
      00067B 12r09r09         [24] 1529 	lcall	_stpop
      00067E E5 82            [12] 1530 	mov	a,dpl
      000680 85 83 F0         [24] 1531 	mov	b,dph
      000683 D0 00            [24] 1532 	pop	ar0
      000685 D0 01            [24] 1533 	pop	ar1
      000687 D0 02            [24] 1534 	pop	ar2
      000689 D0 06            [24] 1535 	pop	ar6
      00068B 45 F0            [12] 1536 	orl	a,b
      00068D 60 03            [24] 1537 	jz	00168$
      00068F 02r03rAE         [24] 1538 	ljmp	00102$
      000692                       1539 00168$:
                                   1540 ;	walk.c:129: return;
                                   1541 ;	walk.c:130: }
      000692 85*00 81         [24] 1542 	mov	sp,_bp
      000695 D0*00            [24] 1543 	pop	_bp
      000697 22               [24] 1544 	ret
                                   1545 ;------------------------------------------------------------
                                   1546 ;Allocation info for local variables in function 'main'
                                   1547 ;------------------------------------------------------------
                                   1548 ;initial                   Allocated to stack - _bp +9
                                   1549 ;N                         Allocated to stack - _bp +7
                                   1550 ;i                         Allocated to stack - _bp +5
                                   1551 ;j                         Allocated to registers r2 r6 
                                   1552 ;sloc0                     Allocated to stack - _bp +1
                                   1553 ;sloc1                     Allocated to stack - _bp +3
                                   1554 ;R                         Allocated with name '_main_R_65536_64'
                                   1555 ;------------------------------------------------------------
                                   1556 ;	walk.c:132: int main(void) {
                                   1557 ;	-----------------------------------------
                                   1558 ;	 function main
                                   1559 ;	-----------------------------------------
      000698                       1560 _main:
      000698 C0*00            [24] 1561 	push	_bp
      00069A E5 81            [12] 1562 	mov	a,sp
      00069C F5*00            [12] 1563 	mov	_bp,a
      00069E 24 0C            [12] 1564 	add	a,#0x0c
      0006A0 F5 81            [12] 1565 	mov	sp,a
                                   1566 ;	walk.c:138: i0 = 1;
      0006A2 78r00            [12] 1567 	mov	r0,#_i0
      0006A4 76 01            [12] 1568 	mov	@r0,#0x01
                                   1569 ;	walk.c:140: IT0 = 1;
                                   1570 ;	assignBit
      0006A6 D2 88            [12] 1571 	setb	_IT0
                                   1572 ;	walk.c:141: EX0 = 1;
                                   1573 ;	assignBit
      0006A8 D2 A8            [12] 1574 	setb	_EX0
                                   1575 ;	walk.c:142: EA = 1;
                                   1576 ;	assignBit
      0006AA D2 AF            [12] 1577 	setb	_EA
                                   1578 ;	walk.c:144: srand(*R);
      0006AC 90rB4r02         [24] 1579 	mov	dptr,#_main_R_65536_64
      0006AF E0               [24] 1580 	movx	a,@dptr
      0006B0 FE               [12] 1581 	mov	r6,a
      0006B1 A3               [24] 1582 	inc	dptr
      0006B2 E0               [24] 1583 	movx	a,@dptr
      0006B3 FF               [12] 1584 	mov	r7,a
      0006B4 8E 82            [24] 1585 	mov	dpl,r6
      0006B6 8F 83            [24] 1586 	mov	dph,r7
      0006B8 E0               [24] 1587 	movx	a,@dptr
      0006B9 FE               [12] 1588 	mov	r6,a
      0006BA A3               [24] 1589 	inc	dptr
      0006BB E0               [24] 1590 	movx	a,@dptr
      0006BC FF               [12] 1591 	mov	r7,a
      0006BD 8E 82            [24] 1592 	mov	dpl,r6
      0006BF 8F 83            [24] 1593 	mov	dph,r7
      0006C1 12r00r00         [24] 1594 	lcall	_srand
                                   1595 ;	walk.c:145: stinit();
      0006C4 12r08r9F         [24] 1596 	lcall	_stinit
                                   1597 ;	walk.c:147: while (i0) {
      0006C7 E5*00            [12] 1598 	mov	a,_bp
      0006C9 24 09            [12] 1599 	add	a,#0x09
      0006CB F9               [12] 1600 	mov	r1,a
      0006CC FF               [12] 1601 	mov	r7,a
      0006CD E5*00            [12] 1602 	mov	a,_bp
      0006CF 24 07            [12] 1603 	add	a,#0x07
      0006D1 F8               [12] 1604 	mov	r0,a
      0006D2 E4               [12] 1605 	clr	a
      0006D3 F6               [12] 1606 	mov	@r0,a
      0006D4 08               [12] 1607 	inc	r0
      0006D5 F6               [12] 1608 	mov	@r0,a
      0006D6                       1609 00107$:
      0006D6 78r00            [12] 1610 	mov	r0,#_i0
      0006D8 E6               [12] 1611 	mov	a,@r0
      0006D9 70 03            [24] 1612 	jnz	00169$
      0006DB 02r08r91         [24] 1613 	ljmp	00109$
      0006DE                       1614 00169$:
                                   1615 ;	walk.c:148: for (i = 0; i < ROWS; i++)
      0006DE 7B 00            [12] 1616 	mov	r3,#0x00
      0006E0 7C 00            [12] 1617 	mov	r4,#0x00
      0006E2 A8*00            [24] 1618 	mov	r0,_bp
      0006E4 08               [12] 1619 	inc	r0
      0006E5 E4               [12] 1620 	clr	a
      0006E6 F6               [12] 1621 	mov	@r0,a
      0006E7 08               [12] 1622 	inc	r0
      0006E8 F6               [12] 1623 	mov	@r0,a
                                   1624 ;	walk.c:149: for (j = 0; j < COLS; j++)
      0006E9                       1625 00121$:
      0006E9 A8*00            [24] 1626 	mov	r0,_bp
      0006EB 08               [12] 1627 	inc	r0
      0006EC C0 01            [24] 1628 	push	ar1
      0006EE E5*00            [12] 1629 	mov	a,_bp
      0006F0 24 03            [12] 1630 	add	a,#0x03
      0006F2 F9               [12] 1631 	mov	r1,a
      0006F3 E6               [12] 1632 	mov	a,@r0
      0006F4 24r00            [12] 1633 	add	a,#_g
      0006F6 F7               [12] 1634 	mov	@r1,a
      0006F7 08               [12] 1635 	inc	r0
      0006F8 E6               [12] 1636 	mov	a,@r0
      0006F9 34s00            [12] 1637 	addc	a,#(_g >> 8)
      0006FB 09               [12] 1638 	inc	r1
      0006FC F7               [12] 1639 	mov	@r1,a
      0006FD D0 01            [24] 1640 	pop	ar1
      0006FF 7A 00            [12] 1641 	mov	r2,#0x00
      000701 7E 00            [12] 1642 	mov	r6,#0x00
      000703                       1643 00110$:
                                   1644 ;	walk.c:150: g[i][j] = 0x55;
      000703 E5*00            [12] 1645 	mov	a,_bp
      000705 24 03            [12] 1646 	add	a,#0x03
      000707 F8               [12] 1647 	mov	r0,a
      000708 EA               [12] 1648 	mov	a,r2
      000709 26               [12] 1649 	add	a,@r0
      00070A F5 82            [12] 1650 	mov	dpl,a
      00070C EE               [12] 1651 	mov	a,r6
      00070D 08               [12] 1652 	inc	r0
      00070E 36               [12] 1653 	addc	a,@r0
      00070F F5 83            [12] 1654 	mov	dph,a
      000711 74 55            [12] 1655 	mov	a,#0x55
      000713 F0               [24] 1656 	movx	@dptr,a
                                   1657 ;	walk.c:149: for (j = 0; j < COLS; j++)
      000714 0A               [12] 1658 	inc	r2
      000715 BA 00 01         [24] 1659 	cjne	r2,#0x00,00170$
      000718 0E               [12] 1660 	inc	r6
      000719                       1661 00170$:
      000719 C3               [12] 1662 	clr	c
      00071A EA               [12] 1663 	mov	a,r2
      00071B 94 C0            [12] 1664 	subb	a,#0xc0
      00071D EE               [12] 1665 	mov	a,r6
      00071E 64 80            [12] 1666 	xrl	a,#0x80
      000720 94 80            [12] 1667 	subb	a,#0x80
      000722 40 DF            [24] 1668 	jc	00110$
                                   1669 ;	walk.c:148: for (i = 0; i < ROWS; i++)
      000724 A8*00            [24] 1670 	mov	r0,_bp
      000726 08               [12] 1671 	inc	r0
      000727 74 C0            [12] 1672 	mov	a,#0xc0
      000729 26               [12] 1673 	add	a,@r0
      00072A F6               [12] 1674 	mov	@r0,a
      00072B E4               [12] 1675 	clr	a
      00072C 08               [12] 1676 	inc	r0
      00072D 36               [12] 1677 	addc	a,@r0
      00072E F6               [12] 1678 	mov	@r0,a
      00072F 0B               [12] 1679 	inc	r3
      000730 BB 00 01         [24] 1680 	cjne	r3,#0x00,00172$
      000733 0C               [12] 1681 	inc	r4
      000734                       1682 00172$:
      000734 C3               [12] 1683 	clr	c
      000735 EB               [12] 1684 	mov	a,r3
      000736 94 30            [12] 1685 	subb	a,#0x30
      000738 EC               [12] 1686 	mov	a,r4
      000739 64 80            [12] 1687 	xrl	a,#0x80
      00073B 94 80            [12] 1688 	subb	a,#0x80
      00073D 40 AA            [24] 1689 	jc	00121$
                                   1690 ;	walk.c:152: puts("\033[2J");
      00073F 90r00r54         [24] 1691 	mov	dptr,#___str_4
      000742 75 F0 80         [24] 1692 	mov	b,#0x80
      000745 C0 07            [24] 1693 	push	ar7
      000747 C0 01            [24] 1694 	push	ar1
      000749 12r00r00         [24] 1695 	lcall	_puts
                                   1696 ;	walk.c:153: initial.r = rand() % ROWS;
      00074C E5*00            [12] 1697 	mov	a,_bp
      00074E 24 09            [12] 1698 	add	a,#0x09
      000750 F8               [12] 1699 	mov	r0,a
      000751 C0 00            [24] 1700 	push	ar0
      000753 12r00r00         [24] 1701 	lcall	_rand
      000756 AD 82            [24] 1702 	mov	r5,dpl
      000758 AE 83            [24] 1703 	mov	r6,dph
      00075A 74 30            [12] 1704 	mov	a,#0x30
      00075C C0 E0            [24] 1705 	push	acc
      00075E E4               [12] 1706 	clr	a
      00075F C0 E0            [24] 1707 	push	acc
      000761 8D 82            [24] 1708 	mov	dpl,r5
      000763 8E 83            [24] 1709 	mov	dph,r6
      000765 12r00r00         [24] 1710 	lcall	__modsint
      000768 AD 82            [24] 1711 	mov	r5,dpl
      00076A AE 83            [24] 1712 	mov	r6,dph
      00076C 15 81            [12] 1713 	dec	sp
      00076E 15 81            [12] 1714 	dec	sp
      000770 D0 00            [24] 1715 	pop	ar0
      000772 D0 01            [24] 1716 	pop	ar1
      000774 A6 05            [24] 1717 	mov	@r0,ar5
      000776 08               [12] 1718 	inc	r0
      000777 A6 06            [24] 1719 	mov	@r0,ar6
      000779 18               [12] 1720 	dec	r0
                                   1721 ;	walk.c:154: initial.c = rand() % COLS;
      00077A 74 02            [12] 1722 	mov	a,#0x02
      00077C 29               [12] 1723 	add	a,r1
      00077D F8               [12] 1724 	mov	r0,a
      00077E C0 01            [24] 1725 	push	ar1
      000780 C0 00            [24] 1726 	push	ar0
      000782 12r00r00         [24] 1727 	lcall	_rand
      000785 AD 82            [24] 1728 	mov	r5,dpl
      000787 AE 83            [24] 1729 	mov	r6,dph
      000789 74 C0            [12] 1730 	mov	a,#0xc0
      00078B C0 E0            [24] 1731 	push	acc
      00078D E4               [12] 1732 	clr	a
      00078E C0 E0            [24] 1733 	push	acc
      000790 8D 82            [24] 1734 	mov	dpl,r5
      000792 8E 83            [24] 1735 	mov	dph,r6
      000794 12r00r00         [24] 1736 	lcall	__modsint
      000797 AD 82            [24] 1737 	mov	r5,dpl
      000799 AE 83            [24] 1738 	mov	r6,dph
      00079B 15 81            [12] 1739 	dec	sp
      00079D 15 81            [12] 1740 	dec	sp
      00079F D0 00            [24] 1741 	pop	ar0
      0007A1 D0 01            [24] 1742 	pop	ar1
      0007A3 A6 05            [24] 1743 	mov	@r0,ar5
      0007A5 08               [12] 1744 	inc	r0
      0007A6 A6 06            [24] 1745 	mov	@r0,ar6
      0007A8 18               [12] 1746 	dec	r0
                                   1747 ;	walk.c:155: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      0007A9 87 03            [24] 1748 	mov	ar3,@r1
      0007AB 09               [12] 1749 	inc	r1
      0007AC 87 04            [24] 1750 	mov	ar4,@r1
      0007AE 19               [12] 1751 	dec	r1
      0007AF C0 01            [24] 1752 	push	ar1
      0007B1 C0 05            [24] 1753 	push	ar5
      0007B3 C0 06            [24] 1754 	push	ar6
      0007B5 C0 03            [24] 1755 	push	ar3
      0007B7 C0 04            [24] 1756 	push	ar4
      0007B9 E5*00            [12] 1757 	mov	a,_bp
      0007BB 24 07            [12] 1758 	add	a,#0x07
      0007BD F8               [12] 1759 	mov	r0,a
      0007BE E6               [12] 1760 	mov	a,@r0
      0007BF C0 E0            [24] 1761 	push	acc
      0007C1 08               [12] 1762 	inc	r0
      0007C2 E6               [12] 1763 	mov	a,@r0
      0007C3 C0 E0            [24] 1764 	push	acc
      0007C5 74r59            [12] 1765 	mov	a,#___str_5
      0007C7 C0 E0            [24] 1766 	push	acc
      0007C9 74s00            [12] 1767 	mov	a,#(___str_5 >> 8)
      0007CB C0 E0            [24] 1768 	push	acc
      0007CD 74 80            [12] 1769 	mov	a,#0x80
      0007CF C0 E0            [24] 1770 	push	acc
      0007D1 12r00r00         [24] 1771 	lcall	_printf
      0007D4 E5 81            [12] 1772 	mov	a,sp
      0007D6 24 F7            [12] 1773 	add	a,#0xf7
      0007D8 F5 81            [12] 1774 	mov	sp,a
      0007DA D0 01            [24] 1775 	pop	ar1
      0007DC D0 07            [24] 1776 	pop	ar7
                                   1777 ;	walk.c:156: walk(&initial);
      0007DE 8F 04            [24] 1778 	mov	ar4,r7
      0007E0 7D 00            [12] 1779 	mov	r5,#0x00
      0007E2 7E 40            [12] 1780 	mov	r6,#0x40
      0007E4 8C 82            [24] 1781 	mov	dpl,r4
      0007E6 8D 83            [24] 1782 	mov	dph,r5
      0007E8 8E F0            [24] 1783 	mov	b,r6
      0007EA C0 07            [24] 1784 	push	ar7
      0007EC C0 01            [24] 1785 	push	ar1
      0007EE 12r02rBE         [24] 1786 	lcall	_walk
      0007F1 D0 01            [24] 1787 	pop	ar1
      0007F3 D0 07            [24] 1788 	pop	ar7
                                   1789 ;	walk.c:158: for (i = 0; i < ROWS; i++)
      0007F5 E5*00            [12] 1790 	mov	a,_bp
      0007F7 24 05            [12] 1791 	add	a,#0x05
      0007F9 F8               [12] 1792 	mov	r0,a
      0007FA E4               [12] 1793 	clr	a
      0007FB F6               [12] 1794 	mov	@r0,a
      0007FC 08               [12] 1795 	inc	r0
      0007FD F6               [12] 1796 	mov	@r0,a
      0007FE 7B 00            [12] 1797 	mov	r3,#0x00
      000800 7C 00            [12] 1798 	mov	r4,#0x00
                                   1799 ;	walk.c:159: for (j = 0; j < COLS; j++)
      000802                       1800 00126$:
      000802 E5*00            [12] 1801 	mov	a,_bp
      000804 24 03            [12] 1802 	add	a,#0x03
      000806 F8               [12] 1803 	mov	r0,a
      000807 EB               [12] 1804 	mov	a,r3
      000808 24r00            [12] 1805 	add	a,#_g
      00080A F6               [12] 1806 	mov	@r0,a
      00080B EC               [12] 1807 	mov	a,r4
      00080C 34s00            [12] 1808 	addc	a,#(_g >> 8)
      00080E 08               [12] 1809 	inc	r0
      00080F F6               [12] 1810 	mov	@r0,a
      000810 7A 00            [12] 1811 	mov	r2,#0x00
      000812 7E 00            [12] 1812 	mov	r6,#0x00
      000814                       1813 00114$:
                                   1814 ;	walk.c:160: if (g[i][j] != 0xaa) {
      000814 E5*00            [12] 1815 	mov	a,_bp
      000816 24 03            [12] 1816 	add	a,#0x03
      000818 F8               [12] 1817 	mov	r0,a
      000819 EA               [12] 1818 	mov	a,r2
      00081A 26               [12] 1819 	add	a,@r0
      00081B F5 82            [12] 1820 	mov	dpl,a
      00081D EE               [12] 1821 	mov	a,r6
      00081E 08               [12] 1822 	inc	r0
      00081F 36               [12] 1823 	addc	a,@r0
      000820 F5 83            [12] 1824 	mov	dph,a
      000822 E0               [24] 1825 	movx	a,@dptr
      000823 FD               [12] 1826 	mov	r5,a
      000824 BD AA 02         [24] 1827 	cjne	r5,#0xaa,00174$
      000827 80 24            [24] 1828 	sjmp	00115$
      000829                       1829 00174$:
                                   1830 ;	walk.c:161: (void)puts("Memory error");
      000829 90r00r20         [24] 1831 	mov	dptr,#___str_0
      00082C 75 F0 80         [24] 1832 	mov	b,#0x80
      00082F C0 07            [24] 1833 	push	ar7
      000831 C0 06            [24] 1834 	push	ar6
      000833 C0 04            [24] 1835 	push	ar4
      000835 C0 03            [24] 1836 	push	ar3
      000837 C0 02            [24] 1837 	push	ar2
      000839 C0 01            [24] 1838 	push	ar1
      00083B 12r00r00         [24] 1839 	lcall	_puts
      00083E D0 01            [24] 1840 	pop	ar1
      000840 D0 02            [24] 1841 	pop	ar2
      000842 D0 03            [24] 1842 	pop	ar3
      000844 D0 04            [24] 1843 	pop	ar4
      000846 D0 06            [24] 1844 	pop	ar6
      000848 D0 07            [24] 1845 	pop	ar7
                                   1846 ;	walk.c:162: reset();
      00084A 12r00r1A         [24] 1847 	lcall	_reset
      00084D                       1848 00115$:
                                   1849 ;	walk.c:159: for (j = 0; j < COLS; j++)
      00084D 0A               [12] 1850 	inc	r2
      00084E BA 00 01         [24] 1851 	cjne	r2,#0x00,00175$
      000851 0E               [12] 1852 	inc	r6
      000852                       1853 00175$:
      000852 C3               [12] 1854 	clr	c
      000853 EA               [12] 1855 	mov	a,r2
      000854 94 C0            [12] 1856 	subb	a,#0xc0
      000856 EE               [12] 1857 	mov	a,r6
      000857 64 80            [12] 1858 	xrl	a,#0x80
      000859 94 80            [12] 1859 	subb	a,#0x80
      00085B 40 B7            [24] 1860 	jc	00114$
                                   1861 ;	walk.c:158: for (i = 0; i < ROWS; i++)
      00085D 74 C0            [12] 1862 	mov	a,#0xc0
      00085F 2B               [12] 1863 	add	a,r3
      000860 FB               [12] 1864 	mov	r3,a
      000861 E4               [12] 1865 	clr	a
      000862 3C               [12] 1866 	addc	a,r4
      000863 FC               [12] 1867 	mov	r4,a
      000864 E5*00            [12] 1868 	mov	a,_bp
      000866 24 05            [12] 1869 	add	a,#0x05
      000868 F8               [12] 1870 	mov	r0,a
      000869 06               [12] 1871 	inc	@r0
      00086A B6 00 02         [24] 1872 	cjne	@r0,#0x00,00177$
      00086D 08               [12] 1873 	inc	r0
      00086E 06               [12] 1874 	inc	@r0
      00086F                       1875 00177$:
      00086F E5*00            [12] 1876 	mov	a,_bp
      000871 24 05            [12] 1877 	add	a,#0x05
      000873 F8               [12] 1878 	mov	r0,a
      000874 C3               [12] 1879 	clr	c
      000875 E6               [12] 1880 	mov	a,@r0
      000876 94 30            [12] 1881 	subb	a,#0x30
      000878 08               [12] 1882 	inc	r0
      000879 E6               [12] 1883 	mov	a,@r0
      00087A 64 80            [12] 1884 	xrl	a,#0x80
      00087C 94 80            [12] 1885 	subb	a,#0x80
      00087E 50 03            [24] 1886 	jnc	00178$
      000880 02r08r02         [24] 1887 	ljmp	00126$
      000883                       1888 00178$:
                                   1889 ;	walk.c:165: N++;
      000883 E5*00            [12] 1890 	mov	a,_bp
      000885 24 07            [12] 1891 	add	a,#0x07
      000887 F8               [12] 1892 	mov	r0,a
      000888 06               [12] 1893 	inc	@r0
      000889 B6 00 02         [24] 1894 	cjne	@r0,#0x00,00179$
      00088C 08               [12] 1895 	inc	r0
      00088D 06               [12] 1896 	inc	@r0
      00088E                       1897 00179$:
      00088E 02r06rD6         [24] 1898 	ljmp	00107$
      000891                       1899 00109$:
                                   1900 ;	walk.c:168: EA = 0;
                                   1901 ;	assignBit
      000891 C2 AF            [12] 1902 	clr	_EA
                                   1903 ;	walk.c:172: __endasm;
      000893 02 00 00         [24] 1904 	ljmp	0
                                   1905 ;	walk.c:174: return 0;
      000896 90 00 00         [24] 1906 	mov	dptr,#0x0000
                                   1907 ;	walk.c:175: }
      000899 85*00 81         [24] 1908 	mov	sp,_bp
      00089C D0*00            [24] 1909 	pop	_bp
      00089E 22               [24] 1910 	ret
                                   1911 ;------------------------------------------------------------
                                   1912 ;Allocation info for local variables in function 'stinit'
                                   1913 ;------------------------------------------------------------
                                   1914 ;	walk.c:177: static void stinit(void) {
                                   1915 ;	-----------------------------------------
                                   1916 ;	 function stinit
                                   1917 ;	-----------------------------------------
      00089F                       1918 _stinit:
                                   1919 ;	walk.c:178: sp = -1;
      00089F 90rB4r00         [24] 1920 	mov	dptr,#_sp
      0008A2 74 FF            [12] 1921 	mov	a,#0xff
      0008A4 F0               [24] 1922 	movx	@dptr,a
      0008A5 A3               [24] 1923 	inc	dptr
      0008A6 F0               [24] 1924 	movx	@dptr,a
                                   1925 ;	walk.c:179: return;
                                   1926 ;	walk.c:180: }
      0008A7 22               [24] 1927 	ret
                                   1928 ;------------------------------------------------------------
                                   1929 ;Allocation info for local variables in function 'stpush'
                                   1930 ;------------------------------------------------------------
                                   1931 ;t                         Allocated to registers r5 r6 r7 
                                   1932 ;------------------------------------------------------------
                                   1933 ;	walk.c:182: static int stpush(struct node *t) {
                                   1934 ;	-----------------------------------------
                                   1935 ;	 function stpush
                                   1936 ;	-----------------------------------------
      0008A8                       1937 _stpush:
      0008A8 AD 82            [24] 1938 	mov	r5,dpl
      0008AA AE 83            [24] 1939 	mov	r6,dph
      0008AC AF F0            [24] 1940 	mov	r7,b
                                   1941 ;	walk.c:183: if (sp == (SMAX - 1)) return 0;
      0008AE 90rB4r00         [24] 1942 	mov	dptr,#_sp
      0008B1 E0               [24] 1943 	movx	a,@dptr
      0008B2 FB               [12] 1944 	mov	r3,a
      0008B3 A3               [24] 1945 	inc	dptr
      0008B4 E0               [24] 1946 	movx	a,@dptr
      0008B5 FC               [12] 1947 	mov	r4,a
      0008B6 BB FF 07         [24] 1948 	cjne	r3,#0xff,00102$
      0008B9 BC 23 04         [24] 1949 	cjne	r4,#0x23,00102$
      0008BC 90 00 00         [24] 1950 	mov	dptr,#0x0000
      0008BF 22               [24] 1951 	ret
      0008C0                       1952 00102$:
                                   1953 ;	walk.c:184: sp++;
      0008C0 90rB4r00         [24] 1954 	mov	dptr,#_sp
      0008C3 74 01            [12] 1955 	mov	a,#0x01
      0008C5 2B               [12] 1956 	add	a,r3
      0008C6 F0               [24] 1957 	movx	@dptr,a
      0008C7 E4               [12] 1958 	clr	a
      0008C8 3C               [12] 1959 	addc	a,r4
      0008C9 A3               [24] 1960 	inc	dptr
      0008CA F0               [24] 1961 	movx	@dptr,a
                                   1962 ;	walk.c:185: stack[sp] = *t;
      0008CB 90rB4r00         [24] 1963 	mov	dptr,#_sp
      0008CE E0               [24] 1964 	movx	a,@dptr
      0008CF FB               [12] 1965 	mov	r3,a
      0008D0 A3               [24] 1966 	inc	dptr
      0008D1 E0               [24] 1967 	movx	a,@dptr
      0008D2 FC               [12] 1968 	mov	r4,a
      0008D3 EB               [12] 1969 	mov	a,r3
      0008D4 2B               [12] 1970 	add	a,r3
      0008D5 FB               [12] 1971 	mov	r3,a
      0008D6 EC               [12] 1972 	mov	a,r4
      0008D7 33               [12] 1973 	rlc	a
      0008D8 FC               [12] 1974 	mov	r4,a
      0008D9 EB               [12] 1975 	mov	a,r3
      0008DA 2B               [12] 1976 	add	a,r3
      0008DB FB               [12] 1977 	mov	r3,a
      0008DC EC               [12] 1978 	mov	a,r4
      0008DD 33               [12] 1979 	rlc	a
      0008DE FC               [12] 1980 	mov	r4,a
      0008DF EB               [12] 1981 	mov	a,r3
      0008E0 24r00            [12] 1982 	add	a,#_stack
      0008E2 FB               [12] 1983 	mov	r3,a
      0008E3 EC               [12] 1984 	mov	a,r4
      0008E4 34s24            [12] 1985 	addc	a,#(_stack >> 8)
      0008E6 FC               [12] 1986 	mov	r4,a
      0008E7 7A 00            [12] 1987 	mov	r2,#0x00
      0008E9 74 04            [12] 1988 	mov	a,#0x04
      0008EB C0 E0            [24] 1989 	push	acc
      0008ED E4               [12] 1990 	clr	a
      0008EE C0 E0            [24] 1991 	push	acc
      0008F0 C0 05            [24] 1992 	push	ar5
      0008F2 C0 06            [24] 1993 	push	ar6
      0008F4 C0 07            [24] 1994 	push	ar7
      0008F6 8B 82            [24] 1995 	mov	dpl,r3
      0008F8 8C 83            [24] 1996 	mov	dph,r4
      0008FA 8A F0            [24] 1997 	mov	b,r2
      0008FC 12r00r00         [24] 1998 	lcall	___memcpy
      0008FF E5 81            [12] 1999 	mov	a,sp
      000901 24 FB            [12] 2000 	add	a,#0xfb
      000903 F5 81            [12] 2001 	mov	sp,a
                                   2002 ;	walk.c:186: return 1;
      000905 90 00 01         [24] 2003 	mov	dptr,#0x0001
                                   2004 ;	walk.c:187: }
      000908 22               [24] 2005 	ret
                                   2006 ;------------------------------------------------------------
                                   2007 ;Allocation info for local variables in function 'stpop'
                                   2008 ;------------------------------------------------------------
                                   2009 ;t                         Allocated to registers r5 r6 r7 
                                   2010 ;------------------------------------------------------------
                                   2011 ;	walk.c:189: static int stpop(struct node *t) {
                                   2012 ;	-----------------------------------------
                                   2013 ;	 function stpop
                                   2014 ;	-----------------------------------------
      000909                       2015 _stpop:
      000909 AD 82            [24] 2016 	mov	r5,dpl
      00090B AE 83            [24] 2017 	mov	r6,dph
      00090D AF F0            [24] 2018 	mov	r7,b
                                   2019 ;	walk.c:190: if (sp == -1) return 0;
      00090F 90rB4r00         [24] 2020 	mov	dptr,#_sp
      000912 E0               [24] 2021 	movx	a,@dptr
      000913 FB               [12] 2022 	mov	r3,a
      000914 A3               [24] 2023 	inc	dptr
      000915 E0               [24] 2024 	movx	a,@dptr
      000916 FC               [12] 2025 	mov	r4,a
      000917 BB FF 07         [24] 2026 	cjne	r3,#0xff,00102$
      00091A BC FF 04         [24] 2027 	cjne	r4,#0xff,00102$
      00091D 90 00 00         [24] 2028 	mov	dptr,#0x0000
      000920 22               [24] 2029 	ret
      000921                       2030 00102$:
                                   2031 ;	walk.c:191: *t = stack[sp];
      000921 EB               [12] 2032 	mov	a,r3
      000922 2B               [12] 2033 	add	a,r3
      000923 FB               [12] 2034 	mov	r3,a
      000924 EC               [12] 2035 	mov	a,r4
      000925 33               [12] 2036 	rlc	a
      000926 FC               [12] 2037 	mov	r4,a
      000927 EB               [12] 2038 	mov	a,r3
      000928 2B               [12] 2039 	add	a,r3
      000929 FB               [12] 2040 	mov	r3,a
      00092A EC               [12] 2041 	mov	a,r4
      00092B 33               [12] 2042 	rlc	a
      00092C FC               [12] 2043 	mov	r4,a
      00092D EB               [12] 2044 	mov	a,r3
      00092E 24r00            [12] 2045 	add	a,#_stack
      000930 FB               [12] 2046 	mov	r3,a
      000931 EC               [12] 2047 	mov	a,r4
      000932 34s24            [12] 2048 	addc	a,#(_stack >> 8)
      000934 FC               [12] 2049 	mov	r4,a
      000935 7A 00            [12] 2050 	mov	r2,#0x00
      000937 74 04            [12] 2051 	mov	a,#0x04
      000939 C0 E0            [24] 2052 	push	acc
      00093B E4               [12] 2053 	clr	a
      00093C C0 E0            [24] 2054 	push	acc
      00093E C0 03            [24] 2055 	push	ar3
      000940 C0 04            [24] 2056 	push	ar4
      000942 C0 02            [24] 2057 	push	ar2
      000944 8D 82            [24] 2058 	mov	dpl,r5
      000946 8E 83            [24] 2059 	mov	dph,r6
      000948 8F F0            [24] 2060 	mov	b,r7
      00094A 12r00r00         [24] 2061 	lcall	___memcpy
      00094D E5 81            [12] 2062 	mov	a,sp
      00094F 24 FB            [12] 2063 	add	a,#0xfb
      000951 F5 81            [12] 2064 	mov	sp,a
                                   2065 ;	walk.c:192: sp--;
      000953 90rB4r00         [24] 2066 	mov	dptr,#_sp
      000956 E0               [24] 2067 	movx	a,@dptr
      000957 24 FF            [12] 2068 	add	a,#0xff
      000959 FE               [12] 2069 	mov	r6,a
      00095A A3               [24] 2070 	inc	dptr
      00095B E0               [24] 2071 	movx	a,@dptr
      00095C 34 FF            [12] 2072 	addc	a,#0xff
      00095E FF               [12] 2073 	mov	r7,a
      00095F 90rB4r00         [24] 2074 	mov	dptr,#_sp
      000962 EE               [12] 2075 	mov	a,r6
      000963 F0               [24] 2076 	movx	@dptr,a
      000964 EF               [12] 2077 	mov	a,r7
      000965 A3               [24] 2078 	inc	dptr
      000966 F0               [24] 2079 	movx	@dptr,a
                                   2080 ;	walk.c:193: return 1;
      000967 90 00 01         [24] 2081 	mov	dptr,#0x0001
                                   2082 ;	walk.c:194: }
      00096A 22               [24] 2083 	ret
                                   2084 	.area CSEG    (CODE)
                                   2085 	.area CONST   (CODE)
      000000                       2086 _neigh:
      000000 FF FF                 2087 	.byte #0xff, #0xff	; -1
      000002 FF FF                 2088 	.byte #0xff, #0xff	; -1
      000004 FF FF                 2089 	.byte #0xff, #0xff	; -1
      000006 00 00                 2090 	.byte #0x00, #0x00	;  0
      000008 FF FF                 2091 	.byte #0xff, #0xff	; -1
      00000A 01 00                 2092 	.byte #0x01, #0x00	;  1
      00000C 00 00                 2093 	.byte #0x00, #0x00	;  0
      00000E FF FF                 2094 	.byte #0xff, #0xff	; -1
      000010 00 00                 2095 	.byte #0x00, #0x00	;  0
      000012 01 00                 2096 	.byte #0x01, #0x00	;  1
      000014 01 00                 2097 	.byte #0x01, #0x00	;  1
      000016 FF FF                 2098 	.byte #0xff, #0xff	; -1
      000018 01 00                 2099 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2100 	.byte #0x00, #0x00	;  0
      00001C 01 00                 2101 	.byte #0x01, #0x00	;  1
      00001E 01 00                 2102 	.byte #0x01, #0x00	;  1
                                   2103 	.area CONST   (CODE)
      000020                       2104 ___str_0:
      000020 4D 65 6D 6F 72 79 20  2105 	.ascii "Memory error"
             65 72 72 6F 72
      00002C 00                    2106 	.db 0x00
                                   2107 	.area CSEG    (CODE)
                                   2108 	.area CONST   (CODE)
      00002D                       2109 ___str_1:
      00002D 1B                    2110 	.db 0x1b
      00002E 5B 25 64 3B 25 64 48  2111 	.ascii "[%d;%dHo"
             6F
      000036 00                    2112 	.db 0x00
                                   2113 	.area CSEG    (CODE)
                                   2114 	.area CONST   (CODE)
      000037                       2115 ___str_2:
      000037 1B                    2116 	.db 0x1b
      000038 5B 32 3B 31 48 25 20  2117 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000049 00                    2118 	.db 0x00
                                   2119 	.area CSEG    (CODE)
                                   2120 	.area CONST   (CODE)
      00004A                       2121 ___str_3:
      00004A 1B                    2122 	.db 0x1b
      00004B 5B 25 64 3B 25 64 48  2123 	.ascii "[%d;%dH."
             2E
      000053 00                    2124 	.db 0x00
                                   2125 	.area CSEG    (CODE)
                                   2126 	.area CONST   (CODE)
      000054                       2127 ___str_4:
      000054 1B                    2128 	.db 0x1b
      000055 5B 32 4A              2129 	.ascii "[2J"
      000058 00                    2130 	.db 0x00
                                   2131 	.area CSEG    (CODE)
                                   2132 	.area CONST   (CODE)
      000059                       2133 ___str_5:
      000059 1B                    2134 	.db 0x1b
      00005A 5B 31 3B 31 48 25 20  2135 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      00006B 00                    2136 	.db 0x00
                                   2137 	.area CSEG    (CODE)
                                   2138 	.area XINIT   (CODE)
                                   2139 	.area CABS    (ABS,CODE)
