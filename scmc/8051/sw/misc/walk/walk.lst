                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
      000000                        319 _g:
      000000                        320 	.ds 9216
      002400                        321 _stack:
      002400                        322 	.ds 36864
      00B400                        323 _sp:
      00B400                        324 	.ds 2
      00B402                        325 _main_R_65536_64:
      00B402                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  351 	ljmp	_int0
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 ;------------------------------------------------------------
                                    366 ;Allocation info for local variables in function 'main'
                                    367 ;------------------------------------------------------------
                                    368 ;initial                   Allocated to stack - _bp +5
                                    369 ;i                         Allocated to stack - _bp +3
                                    370 ;j                         Allocated to registers r4 r5 
                                    371 ;sloc0                     Allocated to stack - _bp +1
                                    372 ;R                         Allocated with name '_main_R_65536_64'
                                    373 ;------------------------------------------------------------
                                    374 ;	walk.c:133: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  375 	mov	dptr,#_main_R_65536_64
      000003 74 FE            [12]  376 	mov	a,#0xfe
      000005 F0               [24]  377 	movx	@dptr,a
      000006 04               [12]  378 	inc	a
      000007 A3               [24]  379 	inc	dptr
      000008 F0               [24]  380 	movx	@dptr,a
                                    381 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  382 	ljmp	__sdcc_program_startup
                                    383 ;--------------------------------------------------------
                                    384 ; Home
                                    385 ;--------------------------------------------------------
                                    386 	.area HOME    (CODE)
                                    387 	.area HOME    (CODE)
      000006                        388 __sdcc_program_startup:
      000006 02r06r98         [24]  389 	ljmp	_main
                                    390 ;	return from main will return to caller
                                    391 ;--------------------------------------------------------
                                    392 ; code
                                    393 ;--------------------------------------------------------
                                    394 	.area CSEG    (CODE)
                                    395 ;------------------------------------------------------------
                                    396 ;Allocation info for local variables in function 'putchar'
                                    397 ;------------------------------------------------------------
                                    398 ;c                         Allocated to registers 
                                    399 ;------------------------------------------------------------
                                    400 ;	walk.c:8: int putchar(int c) __naked {
                                    401 ;	-----------------------------------------
                                    402 ;	 function putchar
                                    403 ;	-----------------------------------------
      000000                        404 _putchar:
                                    405 ;	naked function: no prologue.
                                    406 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  407 	mov	a, dpl
      000002 02 00 30         [24]  408 	ljmp	0x0030
                                    409 ;	walk.c:14: }
                                    410 ;	naked function: no epilogue.
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'getchar'
                                    413 ;------------------------------------------------------------
                                    414 ;	walk.c:16: int getchar(void) __naked {
                                    415 ;	-----------------------------------------
                                    416 ;	 function getchar
                                    417 ;	-----------------------------------------
      000005                        418 _getchar:
                                    419 ;	naked function: no prologue.
                                    420 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  421 	lcall	0x0032
      000008 F5 82            [12]  422 	mov	dpl, a
      00000A 75 83 00         [24]  423 	mov	dph, #0
      00000D 22               [24]  424 	ret
                                    425 ;	walk.c:23: }
                                    426 ;	naked function: no epilogue.
                                    427 ;------------------------------------------------------------
                                    428 ;Allocation info for local variables in function 'int0'
                                    429 ;------------------------------------------------------------
                                    430 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    431 ;	-----------------------------------------
                                    432 ;	 function int0
                                    433 ;	-----------------------------------------
      00000E                        434 _int0:
                           00000F   435 	ar7 = 0x0f
                           00000E   436 	ar6 = 0x0e
                           00000D   437 	ar5 = 0x0d
                           00000C   438 	ar4 = 0x0c
                           00000B   439 	ar3 = 0x0b
                           00000A   440 	ar2 = 0x0a
                           000009   441 	ar1 = 0x09
                           000008   442 	ar0 = 0x08
      00000E C0 D0            [24]  443 	push	psw
      000010 75 D0 08         [24]  444 	mov	psw,#0x08
                                    445 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  446 	mov	r0,#_i0
      000015 76 00            [12]  447 	mov	@r0,#0x00
                                    448 ;	walk.c:29: }
      000017 D0 D0            [24]  449 	pop	psw
      000019 32               [24]  450 	reti
                                    451 ;	eliminated unneeded push/pop dpl
                                    452 ;	eliminated unneeded push/pop dph
                                    453 ;	eliminated unneeded push/pop b
                                    454 ;	eliminated unneeded push/pop acc
                                    455 ;------------------------------------------------------------
                                    456 ;Allocation info for local variables in function 'reset'
                                    457 ;------------------------------------------------------------
                                    458 ;	walk.c:31: static void reset(void) __naked {
                                    459 ;	-----------------------------------------
                                    460 ;	 function reset
                                    461 ;	-----------------------------------------
      00001A                        462 _reset:
                                    463 ;	naked function: no prologue.
                                    464 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  465 	orl	pcon, #2
                                    466 ;	walk.c:35: }
                                    467 ;	naked function: no epilogue.
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'update'
                                    470 ;------------------------------------------------------------
                                    471 ;cur                       Allocated to stack - _bp -5
                                    472 ;j                         Allocated to stack - _bp -7
                                    473 ;t                         Allocated to stack - _bp +1
                                    474 ;sloc0                     Allocated to stack - _bp +4
                                    475 ;sloc1                     Allocated to stack - _bp +6
                                    476 ;sloc2                     Allocated to stack - _bp +8
                                    477 ;------------------------------------------------------------
                                    478 ;	walk.c:73: static int update(struct node *t, struct node *cur, int j) {
                                    479 ;	-----------------------------------------
                                    480 ;	 function update
                                    481 ;	-----------------------------------------
      00001D                        482 _update:
                           000007   483 	ar7 = 0x07
                           000006   484 	ar6 = 0x06
                           000005   485 	ar5 = 0x05
                           000004   486 	ar4 = 0x04
                           000003   487 	ar3 = 0x03
                           000002   488 	ar2 = 0x02
                           000001   489 	ar1 = 0x01
                           000000   490 	ar0 = 0x00
      00001D C0*00            [24]  491 	push	_bp
      00001F 85 81*00         [24]  492 	mov	_bp,sp
      000022 C0 82            [24]  493 	push	dpl
      000024 C0 83            [24]  494 	push	dph
      000026 C0 F0            [24]  495 	push	b
      000028 E5 81            [12]  496 	mov	a,sp
      00002A 24 07            [12]  497 	add	a,#0x07
      00002C F5 81            [12]  498 	mov	sp,a
                                    499 ;	walk.c:74: t->r = cur->r + neigh[j].r;
      00002E E5*00            [12]  500 	mov	a,_bp
      000030 24 FB            [12]  501 	add	a,#0xfb
      000032 F8               [12]  502 	mov	r0,a
      000033 86 02            [24]  503 	mov	ar2,@r0
      000035 08               [12]  504 	inc	r0
      000036 86 03            [24]  505 	mov	ar3,@r0
      000038 08               [12]  506 	inc	r0
      000039 86 04            [24]  507 	mov	ar4,@r0
      00003B 8A 82            [24]  508 	mov	dpl,r2
      00003D 8B 83            [24]  509 	mov	dph,r3
      00003F 8C F0            [24]  510 	mov	b,r4
      000041 E5*00            [12]  511 	mov	a,_bp
      000043 24 04            [12]  512 	add	a,#0x04
      000045 F8               [12]  513 	mov	r0,a
      000046 12r00r00         [24]  514 	lcall	__gptrget
      000049 F6               [12]  515 	mov	@r0,a
      00004A A3               [24]  516 	inc	dptr
      00004B 12r00r00         [24]  517 	lcall	__gptrget
      00004E 08               [12]  518 	inc	r0
      00004F F6               [12]  519 	mov	@r0,a
      000050 E5*00            [12]  520 	mov	a,_bp
      000052 24 F9            [12]  521 	add	a,#0xf9
      000054 F8               [12]  522 	mov	r0,a
      000055 E5*00            [12]  523 	mov	a,_bp
      000057 24 06            [12]  524 	add	a,#0x06
      000059 F9               [12]  525 	mov	r1,a
      00005A E6               [12]  526 	mov	a,@r0
      00005B 26               [12]  527 	add	a,@r0
      00005C F7               [12]  528 	mov	@r1,a
      00005D 08               [12]  529 	inc	r0
      00005E E6               [12]  530 	mov	a,@r0
      00005F 33               [12]  531 	rlc	a
      000060 09               [12]  532 	inc	r1
      000061 F7               [12]  533 	mov	@r1,a
      000062 19               [12]  534 	dec	r1
      000063 E7               [12]  535 	mov	a,@r1
      000064 27               [12]  536 	add	a,@r1
      000065 F7               [12]  537 	mov	@r1,a
      000066 09               [12]  538 	inc	r1
      000067 E7               [12]  539 	mov	a,@r1
      000068 33               [12]  540 	rlc	a
      000069 F7               [12]  541 	mov	@r1,a
      00006A E5*00            [12]  542 	mov	a,_bp
      00006C 24 06            [12]  543 	add	a,#0x06
      00006E F8               [12]  544 	mov	r0,a
      00006F E6               [12]  545 	mov	a,@r0
      000070 24r00            [12]  546 	add	a,#_neigh
      000072 F5 82            [12]  547 	mov	dpl,a
      000074 08               [12]  548 	inc	r0
      000075 E6               [12]  549 	mov	a,@r0
      000076 34s00            [12]  550 	addc	a,#(_neigh >> 8)
      000078 F5 83            [12]  551 	mov	dph,a
      00007A E4               [12]  552 	clr	a
      00007B 93               [24]  553 	movc	a,@a+dptr
      00007C FF               [12]  554 	mov	r7,a
      00007D A3               [24]  555 	inc	dptr
      00007E E4               [12]  556 	clr	a
      00007F 93               [24]  557 	movc	a,@a+dptr
      000080 FE               [12]  558 	mov	r6,a
      000081 E5*00            [12]  559 	mov	a,_bp
      000083 24 04            [12]  560 	add	a,#0x04
      000085 F8               [12]  561 	mov	r0,a
      000086 EF               [12]  562 	mov	a,r7
      000087 26               [12]  563 	add	a,@r0
      000088 FF               [12]  564 	mov	r7,a
      000089 EE               [12]  565 	mov	a,r6
      00008A 08               [12]  566 	inc	r0
      00008B 36               [12]  567 	addc	a,@r0
      00008C FE               [12]  568 	mov	r6,a
      00008D A8*00            [24]  569 	mov	r0,_bp
      00008F 08               [12]  570 	inc	r0
      000090 86 82            [24]  571 	mov	dpl,@r0
      000092 08               [12]  572 	inc	r0
      000093 86 83            [24]  573 	mov	dph,@r0
      000095 08               [12]  574 	inc	r0
      000096 86 F0            [24]  575 	mov	b,@r0
      000098 EF               [12]  576 	mov	a,r7
      000099 12r00r00         [24]  577 	lcall	__gptrput
      00009C A3               [24]  578 	inc	dptr
      00009D EE               [12]  579 	mov	a,r6
      00009E 12r00r00         [24]  580 	lcall	__gptrput
                                    581 ;	walk.c:75: t->c = cur->c + neigh[j].c;
      0000A1 A8*00            [24]  582 	mov	r0,_bp
      0000A3 08               [12]  583 	inc	r0
      0000A4 E5*00            [12]  584 	mov	a,_bp
      0000A6 24 08            [12]  585 	add	a,#0x08
      0000A8 F9               [12]  586 	mov	r1,a
      0000A9 74 02            [12]  587 	mov	a,#0x02
      0000AB 26               [12]  588 	add	a,@r0
      0000AC F7               [12]  589 	mov	@r1,a
      0000AD E4               [12]  590 	clr	a
      0000AE 08               [12]  591 	inc	r0
      0000AF 36               [12]  592 	addc	a,@r0
      0000B0 09               [12]  593 	inc	r1
      0000B1 F7               [12]  594 	mov	@r1,a
      0000B2 08               [12]  595 	inc	r0
      0000B3 09               [12]  596 	inc	r1
      0000B4 E6               [12]  597 	mov	a,@r0
      0000B5 F7               [12]  598 	mov	@r1,a
      0000B6 74 02            [12]  599 	mov	a,#0x02
      0000B8 2A               [12]  600 	add	a,r2
      0000B9 FA               [12]  601 	mov	r2,a
      0000BA E4               [12]  602 	clr	a
      0000BB 3B               [12]  603 	addc	a,r3
      0000BC FB               [12]  604 	mov	r3,a
      0000BD 8A 82            [24]  605 	mov	dpl,r2
      0000BF 8B 83            [24]  606 	mov	dph,r3
      0000C1 8C F0            [24]  607 	mov	b,r4
      0000C3 12r00r00         [24]  608 	lcall	__gptrget
      0000C6 FA               [12]  609 	mov	r2,a
      0000C7 A3               [24]  610 	inc	dptr
      0000C8 12r00r00         [24]  611 	lcall	__gptrget
      0000CB FB               [12]  612 	mov	r3,a
      0000CC E5*00            [12]  613 	mov	a,_bp
      0000CE 24 06            [12]  614 	add	a,#0x06
      0000D0 F8               [12]  615 	mov	r0,a
      0000D1 E6               [12]  616 	mov	a,@r0
      0000D2 24r00            [12]  617 	add	a,#_neigh
      0000D4 FC               [12]  618 	mov	r4,a
      0000D5 08               [12]  619 	inc	r0
      0000D6 E6               [12]  620 	mov	a,@r0
      0000D7 34s00            [12]  621 	addc	a,#(_neigh >> 8)
      0000D9 FD               [12]  622 	mov	r5,a
      0000DA 8C 82            [24]  623 	mov	dpl,r4
      0000DC 8D 83            [24]  624 	mov	dph,r5
      0000DE A3               [24]  625 	inc	dptr
      0000DF A3               [24]  626 	inc	dptr
      0000E0 E4               [12]  627 	clr	a
      0000E1 93               [24]  628 	movc	a,@a+dptr
      0000E2 FC               [12]  629 	mov	r4,a
      0000E3 A3               [24]  630 	inc	dptr
      0000E4 E4               [12]  631 	clr	a
      0000E5 93               [24]  632 	movc	a,@a+dptr
      0000E6 FD               [12]  633 	mov	r5,a
      0000E7 EC               [12]  634 	mov	a,r4
      0000E8 2A               [12]  635 	add	a,r2
      0000E9 FA               [12]  636 	mov	r2,a
      0000EA ED               [12]  637 	mov	a,r5
      0000EB 3B               [12]  638 	addc	a,r3
      0000EC FB               [12]  639 	mov	r3,a
      0000ED E5*00            [12]  640 	mov	a,_bp
      0000EF 24 08            [12]  641 	add	a,#0x08
      0000F1 F8               [12]  642 	mov	r0,a
      0000F2 86 82            [24]  643 	mov	dpl,@r0
      0000F4 08               [12]  644 	inc	r0
      0000F5 86 83            [24]  645 	mov	dph,@r0
      0000F7 08               [12]  646 	inc	r0
      0000F8 86 F0            [24]  647 	mov	b,@r0
      0000FA EA               [12]  648 	mov	a,r2
      0000FB 12r00r00         [24]  649 	lcall	__gptrput
      0000FE A3               [24]  650 	inc	dptr
      0000FF EB               [12]  651 	mov	a,r3
      000100 12r00r00         [24]  652 	lcall	__gptrput
                                    653 ;	walk.c:77: if (t->r < 0) t->r += ROWS;
      000103 A8*00            [24]  654 	mov	r0,_bp
      000105 08               [12]  655 	inc	r0
      000106 86 82            [24]  656 	mov	dpl,@r0
      000108 08               [12]  657 	inc	r0
      000109 86 83            [24]  658 	mov	dph,@r0
      00010B 08               [12]  659 	inc	r0
      00010C 86 F0            [24]  660 	mov	b,@r0
      00010E 12r00r00         [24]  661 	lcall	__gptrget
      000111 FD               [12]  662 	mov	r5,a
      000112 A3               [24]  663 	inc	dptr
      000113 12r00r00         [24]  664 	lcall	__gptrget
      000116 FC               [12]  665 	mov	r4,a
      000117 EE               [12]  666 	mov	a,r6
      000118 30 E7 1D         [24]  667 	jnb	acc.7,00104$
      00011B 74 30            [12]  668 	mov	a,#0x30
      00011D 2D               [12]  669 	add	a,r5
      00011E FF               [12]  670 	mov	r7,a
      00011F E4               [12]  671 	clr	a
      000120 3C               [12]  672 	addc	a,r4
      000121 FE               [12]  673 	mov	r6,a
      000122 A8*00            [24]  674 	mov	r0,_bp
      000124 08               [12]  675 	inc	r0
      000125 86 82            [24]  676 	mov	dpl,@r0
      000127 08               [12]  677 	inc	r0
      000128 86 83            [24]  678 	mov	dph,@r0
      00012A 08               [12]  679 	inc	r0
      00012B 86 F0            [24]  680 	mov	b,@r0
      00012D EF               [12]  681 	mov	a,r7
      00012E 12r00r00         [24]  682 	lcall	__gptrput
      000131 A3               [24]  683 	inc	dptr
      000132 EE               [12]  684 	mov	a,r6
      000133 12r00r00         [24]  685 	lcall	__gptrput
      000136 80 27            [24]  686 	sjmp	00105$
      000138                        687 00104$:
                                    688 ;	walk.c:78: else if (t->r >= ROWS) t->r -= ROWS;
      000138 C3               [12]  689 	clr	c
      000139 ED               [12]  690 	mov	a,r5
      00013A 94 30            [12]  691 	subb	a,#0x30
      00013C EC               [12]  692 	mov	a,r4
      00013D 64 80            [12]  693 	xrl	a,#0x80
      00013F 94 80            [12]  694 	subb	a,#0x80
      000141 40 1C            [24]  695 	jc	00105$
      000143 ED               [12]  696 	mov	a,r5
      000144 24 D0            [12]  697 	add	a,#0xd0
      000146 FD               [12]  698 	mov	r5,a
      000147 EC               [12]  699 	mov	a,r4
      000148 34 FF            [12]  700 	addc	a,#0xff
      00014A FC               [12]  701 	mov	r4,a
      00014B A8*00            [24]  702 	mov	r0,_bp
      00014D 08               [12]  703 	inc	r0
      00014E 86 82            [24]  704 	mov	dpl,@r0
      000150 08               [12]  705 	inc	r0
      000151 86 83            [24]  706 	mov	dph,@r0
      000153 08               [12]  707 	inc	r0
      000154 86 F0            [24]  708 	mov	b,@r0
      000156 ED               [12]  709 	mov	a,r5
      000157 12r00r00         [24]  710 	lcall	__gptrput
      00015A A3               [24]  711 	inc	dptr
      00015B EC               [12]  712 	mov	a,r4
      00015C 12r00r00         [24]  713 	lcall	__gptrput
      00015F                        714 00105$:
                                    715 ;	walk.c:79: if (t->c < 0) t->c += COLS;
      00015F E5*00            [12]  716 	mov	a,_bp
      000161 24 08            [12]  717 	add	a,#0x08
      000163 F8               [12]  718 	mov	r0,a
      000164 86 82            [24]  719 	mov	dpl,@r0
      000166 08               [12]  720 	inc	r0
      000167 86 83            [24]  721 	mov	dph,@r0
      000169 08               [12]  722 	inc	r0
      00016A 86 F0            [24]  723 	mov	b,@r0
      00016C 12r00r00         [24]  724 	lcall	__gptrget
      00016F A3               [24]  725 	inc	dptr
      000170 12r00r00         [24]  726 	lcall	__gptrget
      000173 30 E7 35         [24]  727 	jnb	acc.7,00109$
      000176 E5*00            [12]  728 	mov	a,_bp
      000178 24 08            [12]  729 	add	a,#0x08
      00017A F8               [12]  730 	mov	r0,a
      00017B 86 82            [24]  731 	mov	dpl,@r0
      00017D 08               [12]  732 	inc	r0
      00017E 86 83            [24]  733 	mov	dph,@r0
      000180 08               [12]  734 	inc	r0
      000181 86 F0            [24]  735 	mov	b,@r0
      000183 12r00r00         [24]  736 	lcall	__gptrget
      000186 FE               [12]  737 	mov	r6,a
      000187 A3               [24]  738 	inc	dptr
      000188 12r00r00         [24]  739 	lcall	__gptrget
      00018B FF               [12]  740 	mov	r7,a
      00018C 74 C0            [12]  741 	mov	a,#0xc0
      00018E 2E               [12]  742 	add	a,r6
      00018F FE               [12]  743 	mov	r6,a
      000190 E4               [12]  744 	clr	a
      000191 3F               [12]  745 	addc	a,r7
      000192 FF               [12]  746 	mov	r7,a
      000193 E5*00            [12]  747 	mov	a,_bp
      000195 24 08            [12]  748 	add	a,#0x08
      000197 F8               [12]  749 	mov	r0,a
      000198 86 82            [24]  750 	mov	dpl,@r0
      00019A 08               [12]  751 	inc	r0
      00019B 86 83            [24]  752 	mov	dph,@r0
      00019D 08               [12]  753 	inc	r0
      00019E 86 F0            [24]  754 	mov	b,@r0
      0001A0 EE               [12]  755 	mov	a,r6
      0001A1 12r00r00         [24]  756 	lcall	__gptrput
      0001A4 A3               [24]  757 	inc	dptr
      0001A5 EF               [12]  758 	mov	a,r7
      0001A6 12r00r00         [24]  759 	lcall	__gptrput
      0001A9 80 55            [24]  760 	sjmp	00110$
      0001AB                        761 00109$:
                                    762 ;	walk.c:80: else if (t->c >= COLS) t->c -= COLS;
      0001AB E5*00            [12]  763 	mov	a,_bp
      0001AD 24 08            [12]  764 	add	a,#0x08
      0001AF F8               [12]  765 	mov	r0,a
      0001B0 86 82            [24]  766 	mov	dpl,@r0
      0001B2 08               [12]  767 	inc	r0
      0001B3 86 83            [24]  768 	mov	dph,@r0
      0001B5 08               [12]  769 	inc	r0
      0001B6 86 F0            [24]  770 	mov	b,@r0
      0001B8 12r00r00         [24]  771 	lcall	__gptrget
      0001BB FE               [12]  772 	mov	r6,a
      0001BC A3               [24]  773 	inc	dptr
      0001BD 12r00r00         [24]  774 	lcall	__gptrget
      0001C0 FF               [12]  775 	mov	r7,a
      0001C1 C3               [12]  776 	clr	c
      0001C2 EE               [12]  777 	mov	a,r6
      0001C3 94 C0            [12]  778 	subb	a,#0xc0
      0001C5 EF               [12]  779 	mov	a,r7
      0001C6 64 80            [12]  780 	xrl	a,#0x80
      0001C8 94 80            [12]  781 	subb	a,#0x80
      0001CA 40 34            [24]  782 	jc	00110$
      0001CC E5*00            [12]  783 	mov	a,_bp
      0001CE 24 08            [12]  784 	add	a,#0x08
      0001D0 F8               [12]  785 	mov	r0,a
      0001D1 86 82            [24]  786 	mov	dpl,@r0
      0001D3 08               [12]  787 	inc	r0
      0001D4 86 83            [24]  788 	mov	dph,@r0
      0001D6 08               [12]  789 	inc	r0
      0001D7 86 F0            [24]  790 	mov	b,@r0
      0001D9 12r00r00         [24]  791 	lcall	__gptrget
      0001DC FE               [12]  792 	mov	r6,a
      0001DD A3               [24]  793 	inc	dptr
      0001DE 12r00r00         [24]  794 	lcall	__gptrget
      0001E1 FF               [12]  795 	mov	r7,a
      0001E2 EE               [12]  796 	mov	a,r6
      0001E3 24 40            [12]  797 	add	a,#0x40
      0001E5 FE               [12]  798 	mov	r6,a
      0001E6 EF               [12]  799 	mov	a,r7
      0001E7 34 FF            [12]  800 	addc	a,#0xff
      0001E9 FF               [12]  801 	mov	r7,a
      0001EA E5*00            [12]  802 	mov	a,_bp
      0001EC 24 08            [12]  803 	add	a,#0x08
      0001EE F8               [12]  804 	mov	r0,a
      0001EF 86 82            [24]  805 	mov	dpl,@r0
      0001F1 08               [12]  806 	inc	r0
      0001F2 86 83            [24]  807 	mov	dph,@r0
      0001F4 08               [12]  808 	inc	r0
      0001F5 86 F0            [24]  809 	mov	b,@r0
      0001F7 EE               [12]  810 	mov	a,r6
      0001F8 12r00r00         [24]  811 	lcall	__gptrput
      0001FB A3               [24]  812 	inc	dptr
      0001FC EF               [12]  813 	mov	a,r7
      0001FD 12r00r00         [24]  814 	lcall	__gptrput
      000200                        815 00110$:
                                    816 ;	walk.c:82: if (g[t->r][t->c] == 0xaa) return 0;
      000200 A8*00            [24]  817 	mov	r0,_bp
      000202 08               [12]  818 	inc	r0
      000203 86 82            [24]  819 	mov	dpl,@r0
      000205 08               [12]  820 	inc	r0
      000206 86 83            [24]  821 	mov	dph,@r0
      000208 08               [12]  822 	inc	r0
      000209 86 F0            [24]  823 	mov	b,@r0
      00020B 12r00r00         [24]  824 	lcall	__gptrget
      00020E FE               [12]  825 	mov	r6,a
      00020F A3               [24]  826 	inc	dptr
      000210 12r00r00         [24]  827 	lcall	__gptrget
      000213 FF               [12]  828 	mov	r7,a
      000214 C0 06            [24]  829 	push	ar6
      000216 C0 07            [24]  830 	push	ar7
      000218 90 00 C0         [24]  831 	mov	dptr,#0x00c0
      00021B 12r00r00         [24]  832 	lcall	__mulint
      00021E AE 82            [24]  833 	mov	r6,dpl
      000220 AF 83            [24]  834 	mov	r7,dph
      000222 15 81            [12]  835 	dec	sp
      000224 15 81            [12]  836 	dec	sp
      000226 EE               [12]  837 	mov	a,r6
      000227 24r00            [12]  838 	add	a,#_g
      000229 FE               [12]  839 	mov	r6,a
      00022A EF               [12]  840 	mov	a,r7
      00022B 34s00            [12]  841 	addc	a,#(_g >> 8)
      00022D FF               [12]  842 	mov	r7,a
      00022E E5*00            [12]  843 	mov	a,_bp
      000230 24 08            [12]  844 	add	a,#0x08
      000232 F8               [12]  845 	mov	r0,a
      000233 86 82            [24]  846 	mov	dpl,@r0
      000235 08               [12]  847 	inc	r0
      000236 86 83            [24]  848 	mov	dph,@r0
      000238 08               [12]  849 	inc	r0
      000239 86 F0            [24]  850 	mov	b,@r0
      00023B 12r00r00         [24]  851 	lcall	__gptrget
      00023E FC               [12]  852 	mov	r4,a
      00023F A3               [24]  853 	inc	dptr
      000240 12r00r00         [24]  854 	lcall	__gptrget
      000243 FD               [12]  855 	mov	r5,a
      000244 EC               [12]  856 	mov	a,r4
      000245 2E               [12]  857 	add	a,r6
      000246 F5 82            [12]  858 	mov	dpl,a
      000248 ED               [12]  859 	mov	a,r5
      000249 3F               [12]  860 	addc	a,r7
      00024A F5 83            [12]  861 	mov	dph,a
      00024C E0               [24]  862 	movx	a,@dptr
      00024D FF               [12]  863 	mov	r7,a
      00024E BF AA 05         [24]  864 	cjne	r7,#0xaa,00114$
      000251 90 00 00         [24]  865 	mov	dptr,#0x0000
      000254 80 62            [24]  866 	sjmp	00116$
      000256                        867 00114$:
                                    868 ;	walk.c:83: else if (g[t->r][t->c] != 0x55) {
      000256 A8*00            [24]  869 	mov	r0,_bp
      000258 08               [12]  870 	inc	r0
      000259 86 82            [24]  871 	mov	dpl,@r0
      00025B 08               [12]  872 	inc	r0
      00025C 86 83            [24]  873 	mov	dph,@r0
      00025E 08               [12]  874 	inc	r0
      00025F 86 F0            [24]  875 	mov	b,@r0
      000261 12r00r00         [24]  876 	lcall	__gptrget
      000264 FE               [12]  877 	mov	r6,a
      000265 A3               [24]  878 	inc	dptr
      000266 12r00r00         [24]  879 	lcall	__gptrget
      000269 FF               [12]  880 	mov	r7,a
      00026A C0 06            [24]  881 	push	ar6
      00026C C0 07            [24]  882 	push	ar7
      00026E 90 00 C0         [24]  883 	mov	dptr,#0x00c0
      000271 12r00r00         [24]  884 	lcall	__mulint
      000274 AE 82            [24]  885 	mov	r6,dpl
      000276 AF 83            [24]  886 	mov	r7,dph
      000278 15 81            [12]  887 	dec	sp
      00027A 15 81            [12]  888 	dec	sp
      00027C EE               [12]  889 	mov	a,r6
      00027D 24r00            [12]  890 	add	a,#_g
      00027F FE               [12]  891 	mov	r6,a
      000280 EF               [12]  892 	mov	a,r7
      000281 34s00            [12]  893 	addc	a,#(_g >> 8)
      000283 FF               [12]  894 	mov	r7,a
      000284 E5*00            [12]  895 	mov	a,_bp
      000286 24 08            [12]  896 	add	a,#0x08
      000288 F8               [12]  897 	mov	r0,a
      000289 86 82            [24]  898 	mov	dpl,@r0
      00028B 08               [12]  899 	inc	r0
      00028C 86 83            [24]  900 	mov	dph,@r0
      00028E 08               [12]  901 	inc	r0
      00028F 86 F0            [24]  902 	mov	b,@r0
      000291 12r00r00         [24]  903 	lcall	__gptrget
      000294 FC               [12]  904 	mov	r4,a
      000295 A3               [24]  905 	inc	dptr
      000296 12r00r00         [24]  906 	lcall	__gptrget
      000299 FD               [12]  907 	mov	r5,a
      00029A EC               [12]  908 	mov	a,r4
      00029B 2E               [12]  909 	add	a,r6
      00029C F5 82            [12]  910 	mov	dpl,a
      00029E ED               [12]  911 	mov	a,r5
      00029F 3F               [12]  912 	addc	a,r7
      0002A0 F5 83            [12]  913 	mov	dph,a
      0002A2 E0               [24]  914 	movx	a,@dptr
      0002A3 FF               [12]  915 	mov	r7,a
      0002A4 BF 55 02         [24]  916 	cjne	r7,#0x55,00148$
      0002A7 80 0C            [24]  917 	sjmp	00115$
      0002A9                        918 00148$:
                                    919 ;	walk.c:84: (void)puts("Memory error");
      0002A9 90r00r20         [24]  920 	mov	dptr,#___str_0
      0002AC 75 F0 80         [24]  921 	mov	b,#0x80
      0002AF 12r00r00         [24]  922 	lcall	_puts
                                    923 ;	walk.c:85: reset();
      0002B2 12r00r1A         [24]  924 	lcall	_reset
      0002B5                        925 00115$:
                                    926 ;	walk.c:88: return 1;
      0002B5 90 00 01         [24]  927 	mov	dptr,#0x0001
      0002B8                        928 00116$:
                                    929 ;	walk.c:89: }
      0002B8 85*00 81         [24]  930 	mov	sp,_bp
      0002BB D0*00            [24]  931 	pop	_bp
      0002BD 22               [24]  932 	ret
                                    933 ;------------------------------------------------------------
                                    934 ;Allocation info for local variables in function 'walk'
                                    935 ;------------------------------------------------------------
                                    936 ;nstart                    Allocated to registers 
                                    937 ;cur                       Allocated to stack - _bp +10
                                    938 ;t                         Allocated to stack - _bp +14
                                    939 ;j                         Allocated to stack - _bp +18
                                    940 ;f                         Allocated to stack - _bp +20
                                    941 ;sloc0                     Allocated to stack - _bp +1
                                    942 ;sloc1                     Allocated to stack - _bp +2
                                    943 ;sloc2                     Allocated to stack - _bp +3
                                    944 ;sloc3                     Allocated to stack - _bp +19
                                    945 ;sloc4                     Allocated to stack - _bp +4
                                    946 ;sloc5                     Allocated to stack - _bp +5
                                    947 ;sloc6                     Allocated to stack - _bp +6
                                    948 ;sloc7                     Allocated to stack - _bp +7
                                    949 ;------------------------------------------------------------
                                    950 ;	walk.c:91: static void walk(struct node *nstart) {
                                    951 ;	-----------------------------------------
                                    952 ;	 function walk
                                    953 ;	-----------------------------------------
      0002BE                        954 _walk:
      0002BE C0*00            [24]  955 	push	_bp
      0002C0 E5 81            [12]  956 	mov	a,sp
      0002C2 F5*00            [12]  957 	mov	_bp,a
      0002C4 24 15            [12]  958 	add	a,#0x15
      0002C6 F5 81            [12]  959 	mov	sp,a
      0002C8 AD 82            [24]  960 	mov	r5,dpl
      0002CA AE 83            [24]  961 	mov	r6,dph
      0002CC AF F0            [24]  962 	mov	r7,b
                                    963 ;	walk.c:95: cur = *nstart;
      0002CE E5*00            [12]  964 	mov	a,_bp
      0002D0 24 0A            [12]  965 	add	a,#0x0a
      0002D2 F9               [12]  966 	mov	r1,a
      0002D3 FA               [12]  967 	mov	r2,a
      0002D4 7B 00            [12]  968 	mov	r3,#0x00
      0002D6 7C 40            [12]  969 	mov	r4,#0x40
      0002D8 C0 01            [24]  970 	push	ar1
      0002DA 74 04            [12]  971 	mov	a,#0x04
      0002DC C0 E0            [24]  972 	push	acc
      0002DE E4               [12]  973 	clr	a
      0002DF C0 E0            [24]  974 	push	acc
      0002E1 C0 05            [24]  975 	push	ar5
      0002E3 C0 06            [24]  976 	push	ar6
      0002E5 C0 07            [24]  977 	push	ar7
      0002E7 8A 82            [24]  978 	mov	dpl,r2
      0002E9 8B 83            [24]  979 	mov	dph,r3
      0002EB 8C F0            [24]  980 	mov	b,r4
      0002ED 12r00r00         [24]  981 	lcall	___memcpy
      0002F0 E5 81            [12]  982 	mov	a,sp
      0002F2 24 FB            [12]  983 	add	a,#0xfb
      0002F4 F5 81            [12]  984 	mov	sp,a
      0002F6 D0 01            [24]  985 	pop	ar1
                                    986 ;	walk.c:97: process:
      0002F8 E5*00            [12]  987 	mov	a,_bp
      0002FA 24 06            [12]  988 	add	a,#0x06
      0002FC F8               [12]  989 	mov	r0,a
      0002FD A6 01            [24]  990 	mov	@r0,ar1
      0002FF E5*00            [12]  991 	mov	a,_bp
      000301 24 0E            [12]  992 	add	a,#0x0e
      000303 FE               [12]  993 	mov	r6,a
      000304 E5*00            [12]  994 	mov	a,_bp
      000306 24 03            [12]  995 	add	a,#0x03
      000308 F8               [12]  996 	mov	r0,a
      000309 A6 01            [24]  997 	mov	@r0,ar1
      00030B E5*00            [12]  998 	mov	a,_bp
      00030D 24 05            [12]  999 	add	a,#0x05
      00030F F8               [12] 1000 	mov	r0,a
      000310 A6 01            [24] 1001 	mov	@r0,ar1
      000312 E5*00            [12] 1002 	mov	a,_bp
      000314 24 04            [12] 1003 	add	a,#0x04
      000316 F8               [12] 1004 	mov	r0,a
      000317 A6 06            [24] 1005 	mov	@r0,ar6
      000319 89 02            [24] 1006 	mov	ar2,r1
      00031B A8*00            [24] 1007 	mov	r0,_bp
      00031D 08               [12] 1008 	inc	r0
      00031E A6 06            [24] 1009 	mov	@r0,ar6
      000320 A8*00            [24] 1010 	mov	r0,_bp
      000322 08               [12] 1011 	inc	r0
      000323 08               [12] 1012 	inc	r0
      000324 A6 01            [24] 1013 	mov	@r0,ar1
      000326 74 02            [12] 1014 	mov	a,#0x02
      000328 29               [12] 1015 	add	a,r1
      000329 F8               [12] 1016 	mov	r0,a
      00032A                       1017 00101$:
                                   1018 ;	walk.c:98: g[cur.r][cur.c] = 0xaa;
      00032A C0 02            [24] 1019 	push	ar2
      00032C 87 02            [24] 1020 	mov	ar2,@r1
      00032E 09               [12] 1021 	inc	r1
      00032F 87 05            [24] 1022 	mov	ar5,@r1
      000331 19               [12] 1023 	dec	r1
      000332 C0 06            [24] 1024 	push	ar6
      000334 C0 01            [24] 1025 	push	ar1
      000336 C0 00            [24] 1026 	push	ar0
      000338 C0 02            [24] 1027 	push	ar2
      00033A C0 05            [24] 1028 	push	ar5
      00033C 90 00 C0         [24] 1029 	mov	dptr,#0x00c0
      00033F 12r00r00         [24] 1030 	lcall	__mulint
      000342 AA 82            [24] 1031 	mov	r2,dpl
      000344 AD 83            [24] 1032 	mov	r5,dph
      000346 15 81            [12] 1033 	dec	sp
      000348 15 81            [12] 1034 	dec	sp
      00034A D0 00            [24] 1035 	pop	ar0
      00034C D0 01            [24] 1036 	pop	ar1
      00034E EA               [12] 1037 	mov	a,r2
      00034F 24r00            [12] 1038 	add	a,#_g
      000351 FF               [12] 1039 	mov	r7,a
      000352 ED               [12] 1040 	mov	a,r5
      000353 34s00            [12] 1041 	addc	a,#(_g >> 8)
      000355 FC               [12] 1042 	mov	r4,a
      000356 86 02            [24] 1043 	mov	ar2,@r0
      000358 08               [12] 1044 	inc	r0
      000359 86 05            [24] 1045 	mov	ar5,@r0
      00035B 18               [12] 1046 	dec	r0
      00035C EA               [12] 1047 	mov	a,r2
      00035D 2F               [12] 1048 	add	a,r7
      00035E F5 82            [12] 1049 	mov	dpl,a
      000360 ED               [12] 1050 	mov	a,r5
      000361 3C               [12] 1051 	addc	a,r4
      000362 F5 83            [12] 1052 	mov	dph,a
      000364 74 AA            [12] 1053 	mov	a,#0xaa
      000366 F0               [24] 1054 	movx	@dptr,a
                                   1055 ;	walk.c:99: printf("\033[%d;%dHo", cur.r + 3, cur.c + 1);
      000367 86 02            [24] 1056 	mov	ar2,@r0
      000369 08               [12] 1057 	inc	r0
      00036A 86 05            [24] 1058 	mov	ar5,@r0
      00036C 18               [12] 1059 	dec	r0
      00036D 74 01            [12] 1060 	mov	a,#0x01
      00036F 2A               [12] 1061 	add	a,r2
      000370 FF               [12] 1062 	mov	r7,a
      000371 E4               [12] 1063 	clr	a
      000372 3D               [12] 1064 	addc	a,r5
      000373 FC               [12] 1065 	mov	r4,a
      000374 87 02            [24] 1066 	mov	ar2,@r1
      000376 09               [12] 1067 	inc	r1
      000377 87 05            [24] 1068 	mov	ar5,@r1
      000379 19               [12] 1069 	dec	r1
      00037A 74 03            [12] 1070 	mov	a,#0x03
      00037C 2A               [12] 1071 	add	a,r2
      00037D FA               [12] 1072 	mov	r2,a
      00037E E4               [12] 1073 	clr	a
      00037F 3D               [12] 1074 	addc	a,r5
      000380 FD               [12] 1075 	mov	r5,a
      000381 C0 02            [24] 1076 	push	ar2
      000383 C0 01            [24] 1077 	push	ar1
      000385 C0 00            [24] 1078 	push	ar0
      000387 C0 07            [24] 1079 	push	ar7
      000389 C0 04            [24] 1080 	push	ar4
      00038B C0 02            [24] 1081 	push	ar2
      00038D C0 05            [24] 1082 	push	ar5
      00038F 74r2D            [12] 1083 	mov	a,#___str_1
      000391 C0 E0            [24] 1084 	push	acc
      000393 74s00            [12] 1085 	mov	a,#(___str_1 >> 8)
      000395 C0 E0            [24] 1086 	push	acc
      000397 74 80            [12] 1087 	mov	a,#0x80
      000399 C0 E0            [24] 1088 	push	acc
      00039B 12r00r00         [24] 1089 	lcall	_printf
      00039E E5 81            [12] 1090 	mov	a,sp
      0003A0 24 F9            [12] 1091 	add	a,#0xf9
      0003A2 F5 81            [12] 1092 	mov	sp,a
      0003A4 D0 00            [24] 1093 	pop	ar0
      0003A6 D0 01            [24] 1094 	pop	ar1
      0003A8 D0 02            [24] 1095 	pop	ar2
      0003AA D0 06            [24] 1096 	pop	ar6
                                   1097 ;	walk.c:129: return;
      0003AC D0 02            [24] 1098 	pop	ar2
                                   1099 ;	walk.c:101: next:
      0003AE                       1100 00102$:
                                   1101 ;	walk.c:102: printf("\033[1;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003AE C0 02            [24] 1102 	push	ar2
      0003B0 86 07            [24] 1103 	mov	ar7,@r0
      0003B2 08               [12] 1104 	inc	r0
      0003B3 86 04            [24] 1105 	mov	ar4,@r0
      0003B5 18               [12] 1106 	dec	r0
      0003B6 87 02            [24] 1107 	mov	ar2,@r1
      0003B8 09               [12] 1108 	inc	r1
      0003B9 87 05            [24] 1109 	mov	ar5,@r1
      0003BB 19               [12] 1110 	dec	r1
      0003BC C0 06            [24] 1111 	push	ar6
      0003BE C0 02            [24] 1112 	push	ar2
      0003C0 C0 01            [24] 1113 	push	ar1
      0003C2 C0 00            [24] 1114 	push	ar0
      0003C4 C0 07            [24] 1115 	push	ar7
      0003C6 C0 04            [24] 1116 	push	ar4
      0003C8 C0 02            [24] 1117 	push	ar2
      0003CA C0 05            [24] 1118 	push	ar5
      0003CC 90rB4r00         [24] 1119 	mov	dptr,#_sp
      0003CF E0               [24] 1120 	movx	a,@dptr
      0003D0 C0 E0            [24] 1121 	push	acc
      0003D2 A3               [24] 1122 	inc	dptr
      0003D3 E0               [24] 1123 	movx	a,@dptr
      0003D4 C0 E0            [24] 1124 	push	acc
      0003D6 74r37            [12] 1125 	mov	a,#___str_2
      0003D8 C0 E0            [24] 1126 	push	acc
      0003DA 74s00            [12] 1127 	mov	a,#(___str_2 >> 8)
      0003DC C0 E0            [24] 1128 	push	acc
      0003DE 74 80            [12] 1129 	mov	a,#0x80
      0003E0 C0 E0            [24] 1130 	push	acc
      0003E2 12r00r00         [24] 1131 	lcall	_printf
      0003E5 E5 81            [12] 1132 	mov	a,sp
      0003E7 24 F7            [12] 1133 	add	a,#0xf7
      0003E9 F5 81            [12] 1134 	mov	sp,a
      0003EB D0 00            [24] 1135 	pop	ar0
      0003ED D0 01            [24] 1136 	pop	ar1
      0003EF D0 02            [24] 1137 	pop	ar2
      0003F1 D0 06            [24] 1138 	pop	ar6
                                   1139 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      0003F3 C0 00            [24] 1140 	push	ar0
      0003F5 E5*00            [12] 1141 	mov	a,_bp
      0003F7 24 14            [12] 1142 	add	a,#0x14
      0003F9 F8               [12] 1143 	mov	r0,a
      0003FA E4               [12] 1144 	clr	a
      0003FB F6               [12] 1145 	mov	@r0,a
      0003FC 08               [12] 1146 	inc	r0
      0003FD F6               [12] 1147 	mov	@r0,a
      0003FE E5*00            [12] 1148 	mov	a,_bp
      000400 24 12            [12] 1149 	add	a,#0x12
      000402 F8               [12] 1150 	mov	r0,a
      000403 E4               [12] 1151 	clr	a
      000404 F6               [12] 1152 	mov	@r0,a
      000405 08               [12] 1153 	inc	r0
      000406 F6               [12] 1154 	mov	@r0,a
      000407 D0 00            [24] 1155 	pop	ar0
                                   1156 ;	walk.c:129: return;
      000409 D0 02            [24] 1157 	pop	ar2
                                   1158 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      00040B                       1159 00120$:
      00040B C0 00            [24] 1160 	push	ar0
      00040D E5*00            [12] 1161 	mov	a,_bp
      00040F 24 12            [12] 1162 	add	a,#0x12
      000411 F8               [12] 1163 	mov	r0,a
      000412 C3               [12] 1164 	clr	c
      000413 E6               [12] 1165 	mov	a,@r0
      000414 94 08            [12] 1166 	subb	a,#0x08
      000416 08               [12] 1167 	inc	r0
      000417 E6               [12] 1168 	mov	a,@r0
      000418 64 80            [12] 1169 	xrl	a,#0x80
      00041A 94 80            [12] 1170 	subb	a,#0x80
      00041C D0 00            [24] 1171 	pop	ar0
      00041E 40 03            [24] 1172 	jc	00160$
      000420 02r04rB3         [24] 1173 	ljmp	00106$
      000423                       1174 00160$:
                                   1175 ;	walk.c:105: if (!update(&t, &cur, j)) continue;
      000423 C0 02            [24] 1176 	push	ar2
      000425 C0 00            [24] 1177 	push	ar0
      000427 E5*00            [12] 1178 	mov	a,_bp
      000429 24 06            [12] 1179 	add	a,#0x06
      00042B F8               [12] 1180 	mov	r0,a
      00042C C0 01            [24] 1181 	push	ar1
      00042E E5*00            [12] 1182 	mov	a,_bp
      000430 24 07            [12] 1183 	add	a,#0x07
      000432 F9               [12] 1184 	mov	r1,a
      000433 E6               [12] 1185 	mov	a,@r0
      000434 F7               [12] 1186 	mov	@r1,a
      000435 09               [12] 1187 	inc	r1
      000436 77 00            [12] 1188 	mov	@r1,#0x00
      000438 09               [12] 1189 	inc	r1
      000439 77 40            [12] 1190 	mov	@r1,#0x40
      00043B D0 01            [24] 1191 	pop	ar1
      00043D D0 00            [24] 1192 	pop	ar0
      00043F 8E 04            [24] 1193 	mov	ar4,r6
      000441 7D 00            [12] 1194 	mov	r5,#0x00
      000443 7F 40            [12] 1195 	mov	r7,#0x40
      000445 C0 06            [24] 1196 	push	ar6
      000447 C0 02            [24] 1197 	push	ar2
      000449 C0 01            [24] 1198 	push	ar1
      00044B C0 00            [24] 1199 	push	ar0
      00044D 85 00 F0         [24] 1200 	mov	b,ar0
      000450 E5*00            [12] 1201 	mov	a,_bp
      000452 24 12            [12] 1202 	add	a,#0x12
      000454 F8               [12] 1203 	mov	r0,a
      000455 E6               [12] 1204 	mov	a,@r0
      000456 C0 E0            [24] 1205 	push	acc
      000458 08               [12] 1206 	inc	r0
      000459 E6               [12] 1207 	mov	a,@r0
      00045A C0 E0            [24] 1208 	push	acc
      00045C A8 F0            [24] 1209 	mov	r0,b
      00045E 85 00 F0         [24] 1210 	mov	b,ar0
      000461 E5*00            [12] 1211 	mov	a,_bp
      000463 24 07            [12] 1212 	add	a,#0x07
      000465 F8               [12] 1213 	mov	r0,a
      000466 E6               [12] 1214 	mov	a,@r0
      000467 C0 E0            [24] 1215 	push	acc
      000469 08               [12] 1216 	inc	r0
      00046A E6               [12] 1217 	mov	a,@r0
      00046B C0 E0            [24] 1218 	push	acc
      00046D 08               [12] 1219 	inc	r0
      00046E E6               [12] 1220 	mov	a,@r0
      00046F C0 E0            [24] 1221 	push	acc
      000471 8C 82            [24] 1222 	mov	dpl,r4
      000473 8D 83            [24] 1223 	mov	dph,r5
      000475 8F F0            [24] 1224 	mov	b,r7
      000477 12r00r1D         [24] 1225 	lcall	_update
      00047A AD 82            [24] 1226 	mov	r5,dpl
      00047C AF 83            [24] 1227 	mov	r7,dph
      00047E E5 81            [12] 1228 	mov	a,sp
      000480 24 FB            [12] 1229 	add	a,#0xfb
      000482 F5 81            [12] 1230 	mov	sp,a
      000484 D0 00            [24] 1231 	pop	ar0
      000486 D0 01            [24] 1232 	pop	ar1
      000488 D0 02            [24] 1233 	pop	ar2
      00048A D0 06            [24] 1234 	pop	ar6
      00048C D0 02            [24] 1235 	pop	ar2
      00048E ED               [12] 1236 	mov	a,r5
      00048F 4F               [12] 1237 	orl	a,r7
      000490 60 0F            [24] 1238 	jz	00105$
                                   1239 ;	walk.c:106: f++;
      000492 C0 00            [24] 1240 	push	ar0
      000494 E5*00            [12] 1241 	mov	a,_bp
      000496 24 14            [12] 1242 	add	a,#0x14
      000498 F8               [12] 1243 	mov	r0,a
      000499 06               [12] 1244 	inc	@r0
      00049A B6 00 02         [24] 1245 	cjne	@r0,#0x00,00162$
      00049D 08               [12] 1246 	inc	r0
      00049E 06               [12] 1247 	inc	@r0
      00049F                       1248 00162$:
      00049F D0 00            [24] 1249 	pop	ar0
      0004A1                       1250 00105$:
                                   1251 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      0004A1 C0 00            [24] 1252 	push	ar0
      0004A3 E5*00            [12] 1253 	mov	a,_bp
      0004A5 24 12            [12] 1254 	add	a,#0x12
      0004A7 F8               [12] 1255 	mov	r0,a
      0004A8 06               [12] 1256 	inc	@r0
      0004A9 B6 00 02         [24] 1257 	cjne	@r0,#0x00,00163$
      0004AC 08               [12] 1258 	inc	r0
      0004AD 06               [12] 1259 	inc	@r0
      0004AE                       1260 00163$:
      0004AE D0 00            [24] 1261 	pop	ar0
      0004B0 02r04r0B         [24] 1262 	ljmp	00120$
      0004B3                       1263 00106$:
                                   1264 ;	walk.c:109: if (f) {
      0004B3 C0 00            [24] 1265 	push	ar0
      0004B5 E5*00            [12] 1266 	mov	a,_bp
      0004B7 24 14            [12] 1267 	add	a,#0x14
      0004B9 F8               [12] 1268 	mov	r0,a
      0004BA E6               [12] 1269 	mov	a,@r0
      0004BB 08               [12] 1270 	inc	r0
      0004BC 46               [12] 1271 	orl	a,@r0
      0004BD D0 00            [24] 1272 	pop	ar0
      0004BF 70 03            [24] 1273 	jnz	00164$
      0004C1 02r06r19         [24] 1274 	ljmp	00115$
      0004C4                       1275 00164$:
                                   1276 ;	walk.c:110: while (1) {
      0004C4                       1277 00112$:
                                   1278 ;	walk.c:111: j = rand() % NMAX;
      0004C4 C0 02            [24] 1279 	push	ar2
      0004C6 C0 06            [24] 1280 	push	ar6
      0004C8 C0 02            [24] 1281 	push	ar2
      0004CA C0 01            [24] 1282 	push	ar1
      0004CC C0 00            [24] 1283 	push	ar0
      0004CE 12r00r00         [24] 1284 	lcall	_rand
      0004D1 AD 82            [24] 1285 	mov	r5,dpl
      0004D3 AF 83            [24] 1286 	mov	r7,dph
      0004D5 74 08            [12] 1287 	mov	a,#0x08
      0004D7 C0 E0            [24] 1288 	push	acc
      0004D9 E4               [12] 1289 	clr	a
      0004DA C0 E0            [24] 1290 	push	acc
      0004DC 8D 82            [24] 1291 	mov	dpl,r5
      0004DE 8F 83            [24] 1292 	mov	dph,r7
      0004E0 12r00r00         [24] 1293 	lcall	__modsint
      0004E3 C0 00            [24] 1294 	push	ar0
      0004E5 C8               [12] 1295 	xch	a,r0
      0004E6 E5*00            [12] 1296 	mov	a,_bp
      0004E8 24 12            [12] 1297 	add	a,#0x12
      0004EA C8               [12] 1298 	xch	a,r0
      0004EB A6 82            [24] 1299 	mov	@r0,dpl
      0004ED 08               [12] 1300 	inc	r0
      0004EE A6 83            [24] 1301 	mov	@r0,dph
      0004F0 D0 00            [24] 1302 	pop	ar0
      0004F2 15 81            [12] 1303 	dec	sp
      0004F4 15 81            [12] 1304 	dec	sp
      0004F6 D0 00            [24] 1305 	pop	ar0
      0004F8 D0 01            [24] 1306 	pop	ar1
      0004FA D0 02            [24] 1307 	pop	ar2
      0004FC D0 06            [24] 1308 	pop	ar6
                                   1309 ;	walk.c:112: if (!update(&t, &cur, j)) continue;
      0004FE C0 00            [24] 1310 	push	ar0
      000500 E5*00            [12] 1311 	mov	a,_bp
      000502 24 05            [12] 1312 	add	a,#0x05
      000504 F8               [12] 1313 	mov	r0,a
      000505 C0 01            [24] 1314 	push	ar1
      000507 E5*00            [12] 1315 	mov	a,_bp
      000509 24 07            [12] 1316 	add	a,#0x07
      00050B F9               [12] 1317 	mov	r1,a
      00050C E6               [12] 1318 	mov	a,@r0
      00050D F7               [12] 1319 	mov	@r1,a
      00050E 09               [12] 1320 	inc	r1
      00050F 77 00            [12] 1321 	mov	@r1,#0x00
      000511 09               [12] 1322 	inc	r1
      000512 77 40            [12] 1323 	mov	@r1,#0x40
      000514 D0 01            [24] 1324 	pop	ar1
      000516 E5*00            [12] 1325 	mov	a,_bp
      000518 24 04            [12] 1326 	add	a,#0x04
      00051A F8               [12] 1327 	mov	r0,a
      00051B 86 04            [24] 1328 	mov	ar4,@r0
      00051D 7D 00            [12] 1329 	mov	r5,#0x00
      00051F 7F 40            [12] 1330 	mov	r7,#0x40
      000521 D0 00            [24] 1331 	pop	ar0
      000523 C0 06            [24] 1332 	push	ar6
      000525 C0 02            [24] 1333 	push	ar2
      000527 C0 01            [24] 1334 	push	ar1
      000529 C0 00            [24] 1335 	push	ar0
      00052B 85 00 F0         [24] 1336 	mov	b,ar0
      00052E E5*00            [12] 1337 	mov	a,_bp
      000530 24 12            [12] 1338 	add	a,#0x12
      000532 F8               [12] 1339 	mov	r0,a
      000533 E6               [12] 1340 	mov	a,@r0
      000534 C0 E0            [24] 1341 	push	acc
      000536 08               [12] 1342 	inc	r0
      000537 E6               [12] 1343 	mov	a,@r0
      000538 C0 E0            [24] 1344 	push	acc
      00053A A8 F0            [24] 1345 	mov	r0,b
      00053C 85 00 F0         [24] 1346 	mov	b,ar0
      00053F E5*00            [12] 1347 	mov	a,_bp
      000541 24 07            [12] 1348 	add	a,#0x07
      000543 F8               [12] 1349 	mov	r0,a
      000544 E6               [12] 1350 	mov	a,@r0
      000545 C0 E0            [24] 1351 	push	acc
      000547 08               [12] 1352 	inc	r0
      000548 E6               [12] 1353 	mov	a,@r0
      000549 C0 E0            [24] 1354 	push	acc
      00054B 08               [12] 1355 	inc	r0
      00054C E6               [12] 1356 	mov	a,@r0
      00054D C0 E0            [24] 1357 	push	acc
      00054F 8C 82            [24] 1358 	mov	dpl,r4
      000551 8D 83            [24] 1359 	mov	dph,r5
      000553 8F F0            [24] 1360 	mov	b,r7
      000555 12r00r1D         [24] 1361 	lcall	_update
      000558 AD 82            [24] 1362 	mov	r5,dpl
      00055A AF 83            [24] 1363 	mov	r7,dph
      00055C E5 81            [12] 1364 	mov	a,sp
      00055E 24 FB            [12] 1365 	add	a,#0xfb
      000560 F5 81            [12] 1366 	mov	sp,a
      000562 D0 00            [24] 1367 	pop	ar0
      000564 D0 01            [24] 1368 	pop	ar1
      000566 D0 02            [24] 1369 	pop	ar2
      000568 D0 06            [24] 1370 	pop	ar6
      00056A D0 02            [24] 1371 	pop	ar2
      00056C ED               [12] 1372 	mov	a,r5
      00056D 4F               [12] 1373 	orl	a,r7
      00056E 70 03            [24] 1374 	jnz	00165$
      000570 02r04rC4         [24] 1375 	ljmp	00112$
      000573                       1376 00165$:
                                   1377 ;	walk.c:114: if (!stpush(&cur)) {
      000573 8A 04            [24] 1378 	mov	ar4,r2
      000575 7D 00            [12] 1379 	mov	r5,#0x00
      000577 7F 40            [12] 1380 	mov	r7,#0x40
      000579 8C 82            [24] 1381 	mov	dpl,r4
      00057B 8D 83            [24] 1382 	mov	dph,r5
      00057D 8F F0            [24] 1383 	mov	b,r7
      00057F C0 06            [24] 1384 	push	ar6
      000581 C0 02            [24] 1385 	push	ar2
      000583 C0 01            [24] 1386 	push	ar1
      000585 C0 00            [24] 1387 	push	ar0
      000587 12r08r61         [24] 1388 	lcall	_stpush
      00058A E5 82            [12] 1389 	mov	a,dpl
      00058C 85 83 F0         [24] 1390 	mov	b,dph
      00058F D0 00            [24] 1391 	pop	ar0
      000591 D0 01            [24] 1392 	pop	ar1
      000593 D0 02            [24] 1393 	pop	ar2
      000595 D0 06            [24] 1394 	pop	ar6
      000597 45 F0            [12] 1395 	orl	a,b
      000599 70 1C            [24] 1396 	jnz	00110$
                                   1397 ;	walk.c:115: (void)puts("Memory error");
      00059B 90r00r20         [24] 1398 	mov	dptr,#___str_0
      00059E 75 F0 80         [24] 1399 	mov	b,#0x80
      0005A1 C0 06            [24] 1400 	push	ar6
      0005A3 C0 02            [24] 1401 	push	ar2
      0005A5 C0 01            [24] 1402 	push	ar1
      0005A7 C0 00            [24] 1403 	push	ar0
      0005A9 12r00r00         [24] 1404 	lcall	_puts
      0005AC D0 00            [24] 1405 	pop	ar0
      0005AE D0 01            [24] 1406 	pop	ar1
      0005B0 D0 02            [24] 1407 	pop	ar2
      0005B2 D0 06            [24] 1408 	pop	ar6
                                   1409 ;	walk.c:116: reset();
      0005B4 12r00r1A         [24] 1410 	lcall	_reset
      0005B7                       1411 00110$:
                                   1412 ;	walk.c:118: cur = t;
      0005B7 C0 02            [24] 1413 	push	ar2
      0005B9 C0 00            [24] 1414 	push	ar0
      0005BB A8*00            [24] 1415 	mov	r0,_bp
      0005BD 08               [12] 1416 	inc	r0
      0005BE C0 01            [24] 1417 	push	ar1
      0005C0 E5*00            [12] 1418 	mov	a,_bp
      0005C2 24 07            [12] 1419 	add	a,#0x07
      0005C4 F9               [12] 1420 	mov	r1,a
      0005C5 E6               [12] 1421 	mov	a,@r0
      0005C6 F7               [12] 1422 	mov	@r1,a
      0005C7 09               [12] 1423 	inc	r1
      0005C8 77 00            [12] 1424 	mov	@r1,#0x00
      0005CA 09               [12] 1425 	inc	r1
      0005CB 77 40            [12] 1426 	mov	@r1,#0x40
      0005CD D0 01            [24] 1427 	pop	ar1
      0005CF A8*00            [24] 1428 	mov	r0,_bp
      0005D1 08               [12] 1429 	inc	r0
      0005D2 08               [12] 1430 	inc	r0
      0005D3 86 02            [24] 1431 	mov	ar2,@r0
      0005D5 7B 00            [12] 1432 	mov	r3,#0x00
      0005D7 7F 40            [12] 1433 	mov	r7,#0x40
      0005D9 D0 00            [24] 1434 	pop	ar0
      0005DB C0 06            [24] 1435 	push	ar6
      0005DD C0 02            [24] 1436 	push	ar2
      0005DF C0 01            [24] 1437 	push	ar1
      0005E1 C0 00            [24] 1438 	push	ar0
      0005E3 74 04            [12] 1439 	mov	a,#0x04
      0005E5 C0 E0            [24] 1440 	push	acc
      0005E7 E4               [12] 1441 	clr	a
      0005E8 C0 E0            [24] 1442 	push	acc
      0005EA 85 00 F0         [24] 1443 	mov	b,ar0
      0005ED E5*00            [12] 1444 	mov	a,_bp
      0005EF 24 07            [12] 1445 	add	a,#0x07
      0005F1 F8               [12] 1446 	mov	r0,a
      0005F2 E6               [12] 1447 	mov	a,@r0
      0005F3 C0 E0            [24] 1448 	push	acc
      0005F5 08               [12] 1449 	inc	r0
      0005F6 E6               [12] 1450 	mov	a,@r0
      0005F7 C0 E0            [24] 1451 	push	acc
      0005F9 08               [12] 1452 	inc	r0
      0005FA E6               [12] 1453 	mov	a,@r0
      0005FB C0 E0            [24] 1454 	push	acc
      0005FD 8A 82            [24] 1455 	mov	dpl,r2
      0005FF 8B 83            [24] 1456 	mov	dph,r3
      000601 8F F0            [24] 1457 	mov	b,r7
      000603 12r00r00         [24] 1458 	lcall	___memcpy
      000606 E5 81            [12] 1459 	mov	a,sp
      000608 24 FB            [12] 1460 	add	a,#0xfb
      00060A F5 81            [12] 1461 	mov	sp,a
      00060C D0 00            [24] 1462 	pop	ar0
      00060E D0 01            [24] 1463 	pop	ar1
      000610 D0 02            [24] 1464 	pop	ar2
      000612 D0 06            [24] 1465 	pop	ar6
                                   1466 ;	walk.c:119: goto process;
      000614 D0 02            [24] 1467 	pop	ar2
      000616 02r03r2A         [24] 1468 	ljmp	00101$
      000619                       1469 00115$:
                                   1470 ;	walk.c:123: printf("\033[%d;%dH.", cur.r + 3, cur.c + 1);
      000619 86 05            [24] 1471 	mov	ar5,@r0
      00061B 08               [12] 1472 	inc	r0
      00061C 86 07            [24] 1473 	mov	ar7,@r0
      00061E 18               [12] 1474 	dec	r0
      00061F 0D               [12] 1475 	inc	r5
      000620 BD 00 01         [24] 1476 	cjne	r5,#0x00,00167$
      000623 0F               [12] 1477 	inc	r7
      000624                       1478 00167$:
      000624 87 03            [24] 1479 	mov	ar3,@r1
      000626 09               [12] 1480 	inc	r1
      000627 87 04            [24] 1481 	mov	ar4,@r1
      000629 19               [12] 1482 	dec	r1
      00062A 74 03            [12] 1483 	mov	a,#0x03
      00062C 2B               [12] 1484 	add	a,r3
      00062D FB               [12] 1485 	mov	r3,a
      00062E E4               [12] 1486 	clr	a
      00062F 3C               [12] 1487 	addc	a,r4
      000630 FC               [12] 1488 	mov	r4,a
      000631 C0 06            [24] 1489 	push	ar6
      000633 C0 02            [24] 1490 	push	ar2
      000635 C0 01            [24] 1491 	push	ar1
      000637 C0 00            [24] 1492 	push	ar0
      000639 C0 05            [24] 1493 	push	ar5
      00063B C0 07            [24] 1494 	push	ar7
      00063D C0 03            [24] 1495 	push	ar3
      00063F C0 04            [24] 1496 	push	ar4
      000641 74r4A            [12] 1497 	mov	a,#___str_3
      000643 C0 E0            [24] 1498 	push	acc
      000645 74s00            [12] 1499 	mov	a,#(___str_3 >> 8)
      000647 C0 E0            [24] 1500 	push	acc
      000649 74 80            [12] 1501 	mov	a,#0x80
      00064B C0 E0            [24] 1502 	push	acc
      00064D 12r00r00         [24] 1503 	lcall	_printf
      000650 E5 81            [12] 1504 	mov	a,sp
      000652 24 F9            [12] 1505 	add	a,#0xf9
      000654 F5 81            [12] 1506 	mov	sp,a
      000656 D0 00            [24] 1507 	pop	ar0
      000658 D0 01            [24] 1508 	pop	ar1
      00065A D0 02            [24] 1509 	pop	ar2
      00065C D0 06            [24] 1510 	pop	ar6
                                   1511 ;	walk.c:125: if (!stpop(&cur)) goto term;
      00065E C0 00            [24] 1512 	push	ar0
      000660 E5*00            [12] 1513 	mov	a,_bp
      000662 24 03            [12] 1514 	add	a,#0x03
      000664 F8               [12] 1515 	mov	r0,a
      000665 86 04            [24] 1516 	mov	ar4,@r0
      000667 7D 00            [12] 1517 	mov	r5,#0x00
      000669 7F 40            [12] 1518 	mov	r7,#0x40
      00066B D0 00            [24] 1519 	pop	ar0
      00066D 8C 82            [24] 1520 	mov	dpl,r4
      00066F 8D 83            [24] 1521 	mov	dph,r5
      000671 8F F0            [24] 1522 	mov	b,r7
      000673 C0 06            [24] 1523 	push	ar6
      000675 C0 02            [24] 1524 	push	ar2
      000677 C0 01            [24] 1525 	push	ar1
      000679 C0 00            [24] 1526 	push	ar0
      00067B 12r08rC2         [24] 1527 	lcall	_stpop
      00067E E5 82            [12] 1528 	mov	a,dpl
      000680 85 83 F0         [24] 1529 	mov	b,dph
      000683 D0 00            [24] 1530 	pop	ar0
      000685 D0 01            [24] 1531 	pop	ar1
      000687 D0 02            [24] 1532 	pop	ar2
      000689 D0 06            [24] 1533 	pop	ar6
      00068B 45 F0            [12] 1534 	orl	a,b
      00068D 60 03            [24] 1535 	jz	00168$
      00068F 02r03rAE         [24] 1536 	ljmp	00102$
      000692                       1537 00168$:
                                   1538 ;	walk.c:129: return;
                                   1539 ;	walk.c:130: }
      000692 85*00 81         [24] 1540 	mov	sp,_bp
      000695 D0*00            [24] 1541 	pop	_bp
      000697 22               [24] 1542 	ret
                                   1543 ;------------------------------------------------------------
                                   1544 ;Allocation info for local variables in function 'main'
                                   1545 ;------------------------------------------------------------
                                   1546 ;initial                   Allocated to stack - _bp +5
                                   1547 ;i                         Allocated to stack - _bp +3
                                   1548 ;j                         Allocated to registers r4 r5 
                                   1549 ;sloc0                     Allocated to stack - _bp +1
                                   1550 ;R                         Allocated with name '_main_R_65536_64'
                                   1551 ;------------------------------------------------------------
                                   1552 ;	walk.c:132: int main(void) {
                                   1553 ;	-----------------------------------------
                                   1554 ;	 function main
                                   1555 ;	-----------------------------------------
      000698                       1556 _main:
      000698 C0*00            [24] 1557 	push	_bp
      00069A E5 81            [12] 1558 	mov	a,sp
      00069C F5*00            [12] 1559 	mov	_bp,a
      00069E 24 08            [12] 1560 	add	a,#0x08
      0006A0 F5 81            [12] 1561 	mov	sp,a
                                   1562 ;	walk.c:137: i0 = 1;
      0006A2 78r00            [12] 1563 	mov	r0,#_i0
      0006A4 76 01            [12] 1564 	mov	@r0,#0x01
                                   1565 ;	walk.c:139: IT0 = 1;
                                   1566 ;	assignBit
      0006A6 D2 88            [12] 1567 	setb	_IT0
                                   1568 ;	walk.c:140: EX0 = 1;
                                   1569 ;	assignBit
      0006A8 D2 A8            [12] 1570 	setb	_EX0
                                   1571 ;	walk.c:141: EA = 1;
                                   1572 ;	assignBit
      0006AA D2 AF            [12] 1573 	setb	_EA
                                   1574 ;	walk.c:143: srand(*R);
      0006AC 90rB4r02         [24] 1575 	mov	dptr,#_main_R_65536_64
      0006AF E0               [24] 1576 	movx	a,@dptr
      0006B0 FE               [12] 1577 	mov	r6,a
      0006B1 A3               [24] 1578 	inc	dptr
      0006B2 E0               [24] 1579 	movx	a,@dptr
      0006B3 FF               [12] 1580 	mov	r7,a
      0006B4 8E 82            [24] 1581 	mov	dpl,r6
      0006B6 8F 83            [24] 1582 	mov	dph,r7
      0006B8 E0               [24] 1583 	movx	a,@dptr
      0006B9 FE               [12] 1584 	mov	r6,a
      0006BA A3               [24] 1585 	inc	dptr
      0006BB E0               [24] 1586 	movx	a,@dptr
      0006BC FF               [12] 1587 	mov	r7,a
      0006BD 8E 82            [24] 1588 	mov	dpl,r6
      0006BF 8F 83            [24] 1589 	mov	dph,r7
      0006C1 12r00r00         [24] 1590 	lcall	_srand
                                   1591 ;	walk.c:144: stinit();
      0006C4 12r08r58         [24] 1592 	lcall	_stinit
                                   1593 ;	walk.c:146: while (i0) {
      0006C7 E5*00            [12] 1594 	mov	a,_bp
      0006C9 24 05            [12] 1595 	add	a,#0x05
      0006CB FF               [12] 1596 	mov	r7,a
      0006CC FE               [12] 1597 	mov	r6,a
      0006CD                       1598 00107$:
      0006CD 78r00            [12] 1599 	mov	r0,#_i0
      0006CF E6               [12] 1600 	mov	a,@r0
      0006D0 70 03            [24] 1601 	jnz	00168$
      0006D2 02r08r4A         [24] 1602 	ljmp	00109$
      0006D5                       1603 00168$:
                                   1604 ;	walk.c:147: for (i = 0; i < ROWS; i++)
      0006D5 E5*00            [12] 1605 	mov	a,_bp
      0006D7 24 03            [12] 1606 	add	a,#0x03
      0006D9 F8               [12] 1607 	mov	r0,a
      0006DA E4               [12] 1608 	clr	a
      0006DB F6               [12] 1609 	mov	@r0,a
      0006DC 08               [12] 1610 	inc	r0
      0006DD F6               [12] 1611 	mov	@r0,a
      0006DE 7A 00            [12] 1612 	mov	r2,#0x00
      0006E0 7B 00            [12] 1613 	mov	r3,#0x00
                                   1614 ;	walk.c:148: for (j = 0; j < COLS; j++)
      0006E2                       1615 00121$:
      0006E2 A8*00            [24] 1616 	mov	r0,_bp
      0006E4 08               [12] 1617 	inc	r0
      0006E5 EA               [12] 1618 	mov	a,r2
      0006E6 24r00            [12] 1619 	add	a,#_g
      0006E8 F6               [12] 1620 	mov	@r0,a
      0006E9 EB               [12] 1621 	mov	a,r3
      0006EA 34s00            [12] 1622 	addc	a,#(_g >> 8)
      0006EC 08               [12] 1623 	inc	r0
      0006ED F6               [12] 1624 	mov	@r0,a
      0006EE 7C 00            [12] 1625 	mov	r4,#0x00
      0006F0 7D 00            [12] 1626 	mov	r5,#0x00
      0006F2                       1627 00110$:
                                   1628 ;	walk.c:149: g[i][j] = 0x55;
      0006F2 A8*00            [24] 1629 	mov	r0,_bp
      0006F4 08               [12] 1630 	inc	r0
      0006F5 EC               [12] 1631 	mov	a,r4
      0006F6 26               [12] 1632 	add	a,@r0
      0006F7 F5 82            [12] 1633 	mov	dpl,a
      0006F9 ED               [12] 1634 	mov	a,r5
      0006FA 08               [12] 1635 	inc	r0
      0006FB 36               [12] 1636 	addc	a,@r0
      0006FC F5 83            [12] 1637 	mov	dph,a
      0006FE 74 55            [12] 1638 	mov	a,#0x55
      000700 F0               [24] 1639 	movx	@dptr,a
                                   1640 ;	walk.c:148: for (j = 0; j < COLS; j++)
      000701 0C               [12] 1641 	inc	r4
      000702 BC 00 01         [24] 1642 	cjne	r4,#0x00,00169$
      000705 0D               [12] 1643 	inc	r5
      000706                       1644 00169$:
      000706 C3               [12] 1645 	clr	c
      000707 EC               [12] 1646 	mov	a,r4
      000708 94 C0            [12] 1647 	subb	a,#0xc0
      00070A ED               [12] 1648 	mov	a,r5
      00070B 64 80            [12] 1649 	xrl	a,#0x80
      00070D 94 80            [12] 1650 	subb	a,#0x80
      00070F 40 E1            [24] 1651 	jc	00110$
                                   1652 ;	walk.c:147: for (i = 0; i < ROWS; i++)
      000711 74 C0            [12] 1653 	mov	a,#0xc0
      000713 2A               [12] 1654 	add	a,r2
      000714 FA               [12] 1655 	mov	r2,a
      000715 E4               [12] 1656 	clr	a
      000716 3B               [12] 1657 	addc	a,r3
      000717 FB               [12] 1658 	mov	r3,a
      000718 E5*00            [12] 1659 	mov	a,_bp
      00071A 24 03            [12] 1660 	add	a,#0x03
      00071C F8               [12] 1661 	mov	r0,a
      00071D 06               [12] 1662 	inc	@r0
      00071E B6 00 02         [24] 1663 	cjne	@r0,#0x00,00171$
      000721 08               [12] 1664 	inc	r0
      000722 06               [12] 1665 	inc	@r0
      000723                       1666 00171$:
      000723 E5*00            [12] 1667 	mov	a,_bp
      000725 24 03            [12] 1668 	add	a,#0x03
      000727 F8               [12] 1669 	mov	r0,a
      000728 C3               [12] 1670 	clr	c
      000729 E6               [12] 1671 	mov	a,@r0
      00072A 94 30            [12] 1672 	subb	a,#0x30
      00072C 08               [12] 1673 	inc	r0
      00072D E6               [12] 1674 	mov	a,@r0
      00072E 64 80            [12] 1675 	xrl	a,#0x80
      000730 94 80            [12] 1676 	subb	a,#0x80
      000732 40 AE            [24] 1677 	jc	00121$
                                   1678 ;	walk.c:151: puts("\033[2J");
      000734 90r00r54         [24] 1679 	mov	dptr,#___str_4
      000737 75 F0 80         [24] 1680 	mov	b,#0x80
      00073A C0 07            [24] 1681 	push	ar7
      00073C C0 06            [24] 1682 	push	ar6
      00073E 12r00r00         [24] 1683 	lcall	_puts
                                   1684 ;	walk.c:152: initial.r = rand() % ROWS;
      000741 E5*00            [12] 1685 	mov	a,_bp
      000743 24 05            [12] 1686 	add	a,#0x05
      000745 F9               [12] 1687 	mov	r1,a
      000746 C0 01            [24] 1688 	push	ar1
      000748 12r00r00         [24] 1689 	lcall	_rand
      00074B AC 82            [24] 1690 	mov	r4,dpl
      00074D AD 83            [24] 1691 	mov	r5,dph
      00074F 74 30            [12] 1692 	mov	a,#0x30
      000751 C0 E0            [24] 1693 	push	acc
      000753 E4               [12] 1694 	clr	a
      000754 C0 E0            [24] 1695 	push	acc
      000756 8C 82            [24] 1696 	mov	dpl,r4
      000758 8D 83            [24] 1697 	mov	dph,r5
      00075A 12r00r00         [24] 1698 	lcall	__modsint
      00075D AC 82            [24] 1699 	mov	r4,dpl
      00075F AD 83            [24] 1700 	mov	r5,dph
      000761 15 81            [12] 1701 	dec	sp
      000763 15 81            [12] 1702 	dec	sp
      000765 D0 01            [24] 1703 	pop	ar1
      000767 D0 06            [24] 1704 	pop	ar6
      000769 D0 07            [24] 1705 	pop	ar7
      00076B A7 04            [24] 1706 	mov	@r1,ar4
      00076D 09               [12] 1707 	inc	r1
      00076E A7 05            [24] 1708 	mov	@r1,ar5
      000770 19               [12] 1709 	dec	r1
                                   1710 ;	walk.c:153: initial.c = rand() % COLS;
      000771 74 02            [12] 1711 	mov	a,#0x02
      000773 2F               [12] 1712 	add	a,r7
      000774 F9               [12] 1713 	mov	r1,a
      000775 C0 07            [24] 1714 	push	ar7
      000777 C0 06            [24] 1715 	push	ar6
      000779 C0 01            [24] 1716 	push	ar1
      00077B 12r00r00         [24] 1717 	lcall	_rand
      00077E AC 82            [24] 1718 	mov	r4,dpl
      000780 AD 83            [24] 1719 	mov	r5,dph
      000782 74 C0            [12] 1720 	mov	a,#0xc0
      000784 C0 E0            [24] 1721 	push	acc
      000786 E4               [12] 1722 	clr	a
      000787 C0 E0            [24] 1723 	push	acc
      000789 8C 82            [24] 1724 	mov	dpl,r4
      00078B 8D 83            [24] 1725 	mov	dph,r5
      00078D 12r00r00         [24] 1726 	lcall	__modsint
      000790 AC 82            [24] 1727 	mov	r4,dpl
      000792 AD 83            [24] 1728 	mov	r5,dph
      000794 15 81            [12] 1729 	dec	sp
      000796 15 81            [12] 1730 	dec	sp
      000798 D0 01            [24] 1731 	pop	ar1
      00079A D0 06            [24] 1732 	pop	ar6
      00079C A7 04            [24] 1733 	mov	@r1,ar4
      00079E 09               [12] 1734 	inc	r1
      00079F A7 05            [24] 1735 	mov	@r1,ar5
      0007A1 19               [12] 1736 	dec	r1
                                   1737 ;	walk.c:154: walk(&initial);
      0007A2 8E 03            [24] 1738 	mov	ar3,r6
      0007A4 7C 00            [12] 1739 	mov	r4,#0x00
      0007A6 7D 40            [12] 1740 	mov	r5,#0x40
      0007A8 8B 82            [24] 1741 	mov	dpl,r3
      0007AA 8C 83            [24] 1742 	mov	dph,r4
      0007AC 8D F0            [24] 1743 	mov	b,r5
      0007AE C0 06            [24] 1744 	push	ar6
      0007B0 12r02rBE         [24] 1745 	lcall	_walk
      0007B3 D0 06            [24] 1746 	pop	ar6
      0007B5 D0 07            [24] 1747 	pop	ar7
                                   1748 ;	walk.c:156: for (i = 0; i < ROWS; i++)
      0007B7 E5*00            [12] 1749 	mov	a,_bp
      0007B9 24 03            [12] 1750 	add	a,#0x03
      0007BB F8               [12] 1751 	mov	r0,a
      0007BC E4               [12] 1752 	clr	a
      0007BD F6               [12] 1753 	mov	@r0,a
      0007BE 08               [12] 1754 	inc	r0
      0007BF F6               [12] 1755 	mov	@r0,a
      0007C0 7A 00            [12] 1756 	mov	r2,#0x00
      0007C2 7B 00            [12] 1757 	mov	r3,#0x00
                                   1758 ;	walk.c:157: for (j = 0; j < COLS; j++)
      0007C4                       1759 00126$:
      0007C4 A8*00            [24] 1760 	mov	r0,_bp
      0007C6 08               [12] 1761 	inc	r0
      0007C7 EA               [12] 1762 	mov	a,r2
      0007C8 24r00            [12] 1763 	add	a,#_g
      0007CA F6               [12] 1764 	mov	@r0,a
      0007CB EB               [12] 1765 	mov	a,r3
      0007CC 34s00            [12] 1766 	addc	a,#(_g >> 8)
      0007CE 08               [12] 1767 	inc	r0
      0007CF F6               [12] 1768 	mov	@r0,a
      0007D0 7C 00            [12] 1769 	mov	r4,#0x00
      0007D2 7D 00            [12] 1770 	mov	r5,#0x00
      0007D4                       1771 00114$:
                                   1772 ;	walk.c:158: if (g[i][j] != 0xaa) {
      0007D4 C0 06            [24] 1773 	push	ar6
      0007D6 A8*00            [24] 1774 	mov	r0,_bp
      0007D8 08               [12] 1775 	inc	r0
      0007D9 EC               [12] 1776 	mov	a,r4
      0007DA 26               [12] 1777 	add	a,@r0
      0007DB F5 82            [12] 1778 	mov	dpl,a
      0007DD ED               [12] 1779 	mov	a,r5
      0007DE 08               [12] 1780 	inc	r0
      0007DF 36               [12] 1781 	addc	a,@r0
      0007E0 F5 83            [12] 1782 	mov	dph,a
      0007E2 E0               [24] 1783 	movx	a,@dptr
      0007E3 FE               [12] 1784 	mov	r6,a
      0007E4 BE AA 04         [24] 1785 	cjne	r6,#0xaa,00173$
      0007E7 D0 06            [24] 1786 	pop	ar6
      0007E9 80 26            [24] 1787 	sjmp	00115$
      0007EB                       1788 00173$:
      0007EB D0 06            [24] 1789 	pop	ar6
                                   1790 ;	walk.c:159: (void)puts("Memory error");
      0007ED 90r00r20         [24] 1791 	mov	dptr,#___str_0
      0007F0 75 F0 80         [24] 1792 	mov	b,#0x80
      0007F3 C0 07            [24] 1793 	push	ar7
      0007F5 C0 06            [24] 1794 	push	ar6
      0007F7 C0 05            [24] 1795 	push	ar5
      0007F9 C0 04            [24] 1796 	push	ar4
      0007FB C0 03            [24] 1797 	push	ar3
      0007FD C0 02            [24] 1798 	push	ar2
      0007FF 12r00r00         [24] 1799 	lcall	_puts
      000802 D0 02            [24] 1800 	pop	ar2
      000804 D0 03            [24] 1801 	pop	ar3
      000806 D0 04            [24] 1802 	pop	ar4
      000808 D0 05            [24] 1803 	pop	ar5
      00080A D0 06            [24] 1804 	pop	ar6
      00080C D0 07            [24] 1805 	pop	ar7
                                   1806 ;	walk.c:160: reset();
      00080E 12r00r1A         [24] 1807 	lcall	_reset
      000811                       1808 00115$:
                                   1809 ;	walk.c:157: for (j = 0; j < COLS; j++)
      000811 0C               [12] 1810 	inc	r4
      000812 BC 00 01         [24] 1811 	cjne	r4,#0x00,00174$
      000815 0D               [12] 1812 	inc	r5
      000816                       1813 00174$:
      000816 C3               [12] 1814 	clr	c
      000817 EC               [12] 1815 	mov	a,r4
      000818 94 C0            [12] 1816 	subb	a,#0xc0
      00081A ED               [12] 1817 	mov	a,r5
      00081B 64 80            [12] 1818 	xrl	a,#0x80
      00081D 94 80            [12] 1819 	subb	a,#0x80
      00081F 40 B3            [24] 1820 	jc	00114$
                                   1821 ;	walk.c:156: for (i = 0; i < ROWS; i++)
      000821 74 C0            [12] 1822 	mov	a,#0xc0
      000823 2A               [12] 1823 	add	a,r2
      000824 FA               [12] 1824 	mov	r2,a
      000825 E4               [12] 1825 	clr	a
      000826 3B               [12] 1826 	addc	a,r3
      000827 FB               [12] 1827 	mov	r3,a
      000828 E5*00            [12] 1828 	mov	a,_bp
      00082A 24 03            [12] 1829 	add	a,#0x03
      00082C F8               [12] 1830 	mov	r0,a
      00082D 06               [12] 1831 	inc	@r0
      00082E B6 00 02         [24] 1832 	cjne	@r0,#0x00,00176$
      000831 08               [12] 1833 	inc	r0
      000832 06               [12] 1834 	inc	@r0
      000833                       1835 00176$:
      000833 E5*00            [12] 1836 	mov	a,_bp
      000835 24 03            [12] 1837 	add	a,#0x03
      000837 F8               [12] 1838 	mov	r0,a
      000838 C3               [12] 1839 	clr	c
      000839 E6               [12] 1840 	mov	a,@r0
      00083A 94 30            [12] 1841 	subb	a,#0x30
      00083C 08               [12] 1842 	inc	r0
      00083D E6               [12] 1843 	mov	a,@r0
      00083E 64 80            [12] 1844 	xrl	a,#0x80
      000840 94 80            [12] 1845 	subb	a,#0x80
      000842 50 03            [24] 1846 	jnc	00177$
      000844 02r07rC4         [24] 1847 	ljmp	00126$
      000847                       1848 00177$:
      000847 02r06rCD         [24] 1849 	ljmp	00107$
      00084A                       1850 00109$:
                                   1851 ;	walk.c:164: EA = 0;
                                   1852 ;	assignBit
      00084A C2 AF            [12] 1853 	clr	_EA
                                   1854 ;	walk.c:168: __endasm;
      00084C 02 00 00         [24] 1855 	ljmp	0
                                   1856 ;	walk.c:170: return 0;
      00084F 90 00 00         [24] 1857 	mov	dptr,#0x0000
                                   1858 ;	walk.c:171: }
      000852 85*00 81         [24] 1859 	mov	sp,_bp
      000855 D0*00            [24] 1860 	pop	_bp
      000857 22               [24] 1861 	ret
                                   1862 ;------------------------------------------------------------
                                   1863 ;Allocation info for local variables in function 'stinit'
                                   1864 ;------------------------------------------------------------
                                   1865 ;	walk.c:173: static void stinit(void) {
                                   1866 ;	-----------------------------------------
                                   1867 ;	 function stinit
                                   1868 ;	-----------------------------------------
      000858                       1869 _stinit:
                                   1870 ;	walk.c:174: sp = -1;
      000858 90rB4r00         [24] 1871 	mov	dptr,#_sp
      00085B 74 FF            [12] 1872 	mov	a,#0xff
      00085D F0               [24] 1873 	movx	@dptr,a
      00085E A3               [24] 1874 	inc	dptr
      00085F F0               [24] 1875 	movx	@dptr,a
                                   1876 ;	walk.c:175: return;
                                   1877 ;	walk.c:176: }
      000860 22               [24] 1878 	ret
                                   1879 ;------------------------------------------------------------
                                   1880 ;Allocation info for local variables in function 'stpush'
                                   1881 ;------------------------------------------------------------
                                   1882 ;t                         Allocated to registers r5 r6 r7 
                                   1883 ;------------------------------------------------------------
                                   1884 ;	walk.c:178: static int stpush(struct node *t) {
                                   1885 ;	-----------------------------------------
                                   1886 ;	 function stpush
                                   1887 ;	-----------------------------------------
      000861                       1888 _stpush:
      000861 AD 82            [24] 1889 	mov	r5,dpl
      000863 AE 83            [24] 1890 	mov	r6,dph
      000865 AF F0            [24] 1891 	mov	r7,b
                                   1892 ;	walk.c:179: if (sp == (SMAX - 1)) return 0;
      000867 90rB4r00         [24] 1893 	mov	dptr,#_sp
      00086A E0               [24] 1894 	movx	a,@dptr
      00086B FB               [12] 1895 	mov	r3,a
      00086C A3               [24] 1896 	inc	dptr
      00086D E0               [24] 1897 	movx	a,@dptr
      00086E FC               [12] 1898 	mov	r4,a
      00086F BB FF 07         [24] 1899 	cjne	r3,#0xff,00102$
      000872 BC 23 04         [24] 1900 	cjne	r4,#0x23,00102$
      000875 90 00 00         [24] 1901 	mov	dptr,#0x0000
      000878 22               [24] 1902 	ret
      000879                       1903 00102$:
                                   1904 ;	walk.c:180: sp++;
      000879 90rB4r00         [24] 1905 	mov	dptr,#_sp
      00087C 74 01            [12] 1906 	mov	a,#0x01
      00087E 2B               [12] 1907 	add	a,r3
      00087F F0               [24] 1908 	movx	@dptr,a
      000880 E4               [12] 1909 	clr	a
      000881 3C               [12] 1910 	addc	a,r4
      000882 A3               [24] 1911 	inc	dptr
      000883 F0               [24] 1912 	movx	@dptr,a
                                   1913 ;	walk.c:181: stack[sp] = *t;
      000884 90rB4r00         [24] 1914 	mov	dptr,#_sp
      000887 E0               [24] 1915 	movx	a,@dptr
      000888 FB               [12] 1916 	mov	r3,a
      000889 A3               [24] 1917 	inc	dptr
      00088A E0               [24] 1918 	movx	a,@dptr
      00088B FC               [12] 1919 	mov	r4,a
      00088C EB               [12] 1920 	mov	a,r3
      00088D 2B               [12] 1921 	add	a,r3
      00088E FB               [12] 1922 	mov	r3,a
      00088F EC               [12] 1923 	mov	a,r4
      000890 33               [12] 1924 	rlc	a
      000891 FC               [12] 1925 	mov	r4,a
      000892 EB               [12] 1926 	mov	a,r3
      000893 2B               [12] 1927 	add	a,r3
      000894 FB               [12] 1928 	mov	r3,a
      000895 EC               [12] 1929 	mov	a,r4
      000896 33               [12] 1930 	rlc	a
      000897 FC               [12] 1931 	mov	r4,a
      000898 EB               [12] 1932 	mov	a,r3
      000899 24r00            [12] 1933 	add	a,#_stack
      00089B FB               [12] 1934 	mov	r3,a
      00089C EC               [12] 1935 	mov	a,r4
      00089D 34s24            [12] 1936 	addc	a,#(_stack >> 8)
      00089F FC               [12] 1937 	mov	r4,a
      0008A0 7A 00            [12] 1938 	mov	r2,#0x00
      0008A2 74 04            [12] 1939 	mov	a,#0x04
      0008A4 C0 E0            [24] 1940 	push	acc
      0008A6 E4               [12] 1941 	clr	a
      0008A7 C0 E0            [24] 1942 	push	acc
      0008A9 C0 05            [24] 1943 	push	ar5
      0008AB C0 06            [24] 1944 	push	ar6
      0008AD C0 07            [24] 1945 	push	ar7
      0008AF 8B 82            [24] 1946 	mov	dpl,r3
      0008B1 8C 83            [24] 1947 	mov	dph,r4
      0008B3 8A F0            [24] 1948 	mov	b,r2
      0008B5 12r00r00         [24] 1949 	lcall	___memcpy
      0008B8 E5 81            [12] 1950 	mov	a,sp
      0008BA 24 FB            [12] 1951 	add	a,#0xfb
      0008BC F5 81            [12] 1952 	mov	sp,a
                                   1953 ;	walk.c:182: return 1;
      0008BE 90 00 01         [24] 1954 	mov	dptr,#0x0001
                                   1955 ;	walk.c:183: }
      0008C1 22               [24] 1956 	ret
                                   1957 ;------------------------------------------------------------
                                   1958 ;Allocation info for local variables in function 'stpop'
                                   1959 ;------------------------------------------------------------
                                   1960 ;t                         Allocated to registers r5 r6 r7 
                                   1961 ;------------------------------------------------------------
                                   1962 ;	walk.c:185: static int stpop(struct node *t) {
                                   1963 ;	-----------------------------------------
                                   1964 ;	 function stpop
                                   1965 ;	-----------------------------------------
      0008C2                       1966 _stpop:
      0008C2 AD 82            [24] 1967 	mov	r5,dpl
      0008C4 AE 83            [24] 1968 	mov	r6,dph
      0008C6 AF F0            [24] 1969 	mov	r7,b
                                   1970 ;	walk.c:186: if (sp == -1) return 0;
      0008C8 90rB4r00         [24] 1971 	mov	dptr,#_sp
      0008CB E0               [24] 1972 	movx	a,@dptr
      0008CC FB               [12] 1973 	mov	r3,a
      0008CD A3               [24] 1974 	inc	dptr
      0008CE E0               [24] 1975 	movx	a,@dptr
      0008CF FC               [12] 1976 	mov	r4,a
      0008D0 BB FF 07         [24] 1977 	cjne	r3,#0xff,00102$
      0008D3 BC FF 04         [24] 1978 	cjne	r4,#0xff,00102$
      0008D6 90 00 00         [24] 1979 	mov	dptr,#0x0000
      0008D9 22               [24] 1980 	ret
      0008DA                       1981 00102$:
                                   1982 ;	walk.c:187: *t = stack[sp];
      0008DA EB               [12] 1983 	mov	a,r3
      0008DB 2B               [12] 1984 	add	a,r3
      0008DC FB               [12] 1985 	mov	r3,a
      0008DD EC               [12] 1986 	mov	a,r4
      0008DE 33               [12] 1987 	rlc	a
      0008DF FC               [12] 1988 	mov	r4,a
      0008E0 EB               [12] 1989 	mov	a,r3
      0008E1 2B               [12] 1990 	add	a,r3
      0008E2 FB               [12] 1991 	mov	r3,a
      0008E3 EC               [12] 1992 	mov	a,r4
      0008E4 33               [12] 1993 	rlc	a
      0008E5 FC               [12] 1994 	mov	r4,a
      0008E6 EB               [12] 1995 	mov	a,r3
      0008E7 24r00            [12] 1996 	add	a,#_stack
      0008E9 FB               [12] 1997 	mov	r3,a
      0008EA EC               [12] 1998 	mov	a,r4
      0008EB 34s24            [12] 1999 	addc	a,#(_stack >> 8)
      0008ED FC               [12] 2000 	mov	r4,a
      0008EE 7A 00            [12] 2001 	mov	r2,#0x00
      0008F0 74 04            [12] 2002 	mov	a,#0x04
      0008F2 C0 E0            [24] 2003 	push	acc
      0008F4 E4               [12] 2004 	clr	a
      0008F5 C0 E0            [24] 2005 	push	acc
      0008F7 C0 03            [24] 2006 	push	ar3
      0008F9 C0 04            [24] 2007 	push	ar4
      0008FB C0 02            [24] 2008 	push	ar2
      0008FD 8D 82            [24] 2009 	mov	dpl,r5
      0008FF 8E 83            [24] 2010 	mov	dph,r6
      000901 8F F0            [24] 2011 	mov	b,r7
      000903 12r00r00         [24] 2012 	lcall	___memcpy
      000906 E5 81            [12] 2013 	mov	a,sp
      000908 24 FB            [12] 2014 	add	a,#0xfb
      00090A F5 81            [12] 2015 	mov	sp,a
                                   2016 ;	walk.c:188: sp--;
      00090C 90rB4r00         [24] 2017 	mov	dptr,#_sp
      00090F E0               [24] 2018 	movx	a,@dptr
      000910 24 FF            [12] 2019 	add	a,#0xff
      000912 FE               [12] 2020 	mov	r6,a
      000913 A3               [24] 2021 	inc	dptr
      000914 E0               [24] 2022 	movx	a,@dptr
      000915 34 FF            [12] 2023 	addc	a,#0xff
      000917 FF               [12] 2024 	mov	r7,a
      000918 90rB4r00         [24] 2025 	mov	dptr,#_sp
      00091B EE               [12] 2026 	mov	a,r6
      00091C F0               [24] 2027 	movx	@dptr,a
      00091D EF               [12] 2028 	mov	a,r7
      00091E A3               [24] 2029 	inc	dptr
      00091F F0               [24] 2030 	movx	@dptr,a
                                   2031 ;	walk.c:189: return 1;
      000920 90 00 01         [24] 2032 	mov	dptr,#0x0001
                                   2033 ;	walk.c:190: }
      000923 22               [24] 2034 	ret
                                   2035 	.area CSEG    (CODE)
                                   2036 	.area CONST   (CODE)
      000000                       2037 _neigh:
      000000 FF FF                 2038 	.byte #0xff, #0xff	; -1
      000002 FF FF                 2039 	.byte #0xff, #0xff	; -1
      000004 FF FF                 2040 	.byte #0xff, #0xff	; -1
      000006 00 00                 2041 	.byte #0x00, #0x00	;  0
      000008 FF FF                 2042 	.byte #0xff, #0xff	; -1
      00000A 01 00                 2043 	.byte #0x01, #0x00	;  1
      00000C 00 00                 2044 	.byte #0x00, #0x00	;  0
      00000E FF FF                 2045 	.byte #0xff, #0xff	; -1
      000010 00 00                 2046 	.byte #0x00, #0x00	;  0
      000012 01 00                 2047 	.byte #0x01, #0x00	;  1
      000014 01 00                 2048 	.byte #0x01, #0x00	;  1
      000016 FF FF                 2049 	.byte #0xff, #0xff	; -1
      000018 01 00                 2050 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2051 	.byte #0x00, #0x00	;  0
      00001C 01 00                 2052 	.byte #0x01, #0x00	;  1
      00001E 01 00                 2053 	.byte #0x01, #0x00	;  1
                                   2054 	.area CONST   (CODE)
      000020                       2055 ___str_0:
      000020 4D 65 6D 6F 72 79 20  2056 	.ascii "Memory error"
             65 72 72 6F 72
      00002C 00                    2057 	.db 0x00
                                   2058 	.area CSEG    (CODE)
                                   2059 	.area CONST   (CODE)
      00002D                       2060 ___str_1:
      00002D 1B                    2061 	.db 0x1b
      00002E 5B 25 64 3B 25 64 48  2062 	.ascii "[%d;%dHo"
             6F
      000036 00                    2063 	.db 0x00
                                   2064 	.area CSEG    (CODE)
                                   2065 	.area CONST   (CODE)
      000037                       2066 ___str_2:
      000037 1B                    2067 	.db 0x1b
      000038 5B 31 3B 31 48 25 20  2068 	.ascii "[1;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000049 00                    2069 	.db 0x00
                                   2070 	.area CSEG    (CODE)
                                   2071 	.area CONST   (CODE)
      00004A                       2072 ___str_3:
      00004A 1B                    2073 	.db 0x1b
      00004B 5B 25 64 3B 25 64 48  2074 	.ascii "[%d;%dH."
             2E
      000053 00                    2075 	.db 0x00
                                   2076 	.area CSEG    (CODE)
                                   2077 	.area CONST   (CODE)
      000054                       2078 ___str_4:
      000054 1B                    2079 	.db 0x1b
      000055 5B 32 4A              2080 	.ascii "[2J"
      000058 00                    2081 	.db 0x00
                                   2082 	.area CSEG    (CODE)
                                   2083 	.area XINIT   (CODE)
                                   2084 	.area CABS    (ABS,CODE)
