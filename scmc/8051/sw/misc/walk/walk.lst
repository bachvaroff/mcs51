                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
      000000                        319 _g:
      000000                        320 	.ds 9216
      002400                        321 _stack:
      002400                        322 	.ds 36864
      00B400                        323 _sp:
      00B400                        324 	.ds 2
      00B402                        325 _main_R_65536_64:
      00B402                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  351 	ljmp	_int0
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 ;------------------------------------------------------------
                                    366 ;Allocation info for local variables in function 'main'
                                    367 ;------------------------------------------------------------
                                    368 ;initial                   Allocated to stack - _bp +3
                                    369 ;i                         Allocated to stack - _bp +7
                                    370 ;j                         Allocated to registers r4 r5 
                                    371 ;sloc0                     Allocated to stack - _bp +1
                                    372 ;R                         Allocated with name '_main_R_65536_64'
                                    373 ;------------------------------------------------------------
                                    374 ;	walk.c:131: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  375 	mov	dptr,#_main_R_65536_64
      000003 74 FE            [12]  376 	mov	a,#0xfe
      000005 F0               [24]  377 	movx	@dptr,a
      000006 04               [12]  378 	inc	a
      000007 A3               [24]  379 	inc	dptr
      000008 F0               [24]  380 	movx	@dptr,a
                                    381 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  382 	ljmp	__sdcc_program_startup
                                    383 ;--------------------------------------------------------
                                    384 ; Home
                                    385 ;--------------------------------------------------------
                                    386 	.area HOME    (CODE)
                                    387 	.area HOME    (CODE)
      000006                        388 __sdcc_program_startup:
      000006 02r06r0E         [24]  389 	ljmp	_main
                                    390 ;	return from main will return to caller
                                    391 ;--------------------------------------------------------
                                    392 ; code
                                    393 ;--------------------------------------------------------
                                    394 	.area CSEG    (CODE)
                                    395 ;------------------------------------------------------------
                                    396 ;Allocation info for local variables in function 'putchar'
                                    397 ;------------------------------------------------------------
                                    398 ;c                         Allocated to registers 
                                    399 ;------------------------------------------------------------
                                    400 ;	walk.c:8: int putchar(int c) __naked {
                                    401 ;	-----------------------------------------
                                    402 ;	 function putchar
                                    403 ;	-----------------------------------------
      000000                        404 _putchar:
                                    405 ;	naked function: no prologue.
                                    406 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  407 	mov	a, dpl
      000002 02 00 30         [24]  408 	ljmp	0x0030
                                    409 ;	walk.c:14: }
                                    410 ;	naked function: no epilogue.
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'getchar'
                                    413 ;------------------------------------------------------------
                                    414 ;	walk.c:16: int getchar(void) __naked {
                                    415 ;	-----------------------------------------
                                    416 ;	 function getchar
                                    417 ;	-----------------------------------------
      000005                        418 _getchar:
                                    419 ;	naked function: no prologue.
                                    420 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  421 	lcall	0x0032
      000008 F5 82            [12]  422 	mov	dpl, a
      00000A 75 83 00         [24]  423 	mov	dph, #0
      00000D 22               [24]  424 	ret
                                    425 ;	walk.c:23: }
                                    426 ;	naked function: no epilogue.
                                    427 ;------------------------------------------------------------
                                    428 ;Allocation info for local variables in function 'int0'
                                    429 ;------------------------------------------------------------
                                    430 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    431 ;	-----------------------------------------
                                    432 ;	 function int0
                                    433 ;	-----------------------------------------
      00000E                        434 _int0:
                           00000F   435 	ar7 = 0x0f
                           00000E   436 	ar6 = 0x0e
                           00000D   437 	ar5 = 0x0d
                           00000C   438 	ar4 = 0x0c
                           00000B   439 	ar3 = 0x0b
                           00000A   440 	ar2 = 0x0a
                           000009   441 	ar1 = 0x09
                           000008   442 	ar0 = 0x08
      00000E C0 D0            [24]  443 	push	psw
      000010 75 D0 08         [24]  444 	mov	psw,#0x08
                                    445 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  446 	mov	r0,#_i0
      000015 76 00            [12]  447 	mov	@r0,#0x00
                                    448 ;	walk.c:29: }
      000017 D0 D0            [24]  449 	pop	psw
      000019 32               [24]  450 	reti
                                    451 ;	eliminated unneeded push/pop dpl
                                    452 ;	eliminated unneeded push/pop dph
                                    453 ;	eliminated unneeded push/pop b
                                    454 ;	eliminated unneeded push/pop acc
                                    455 ;------------------------------------------------------------
                                    456 ;Allocation info for local variables in function 'reset'
                                    457 ;------------------------------------------------------------
                                    458 ;	walk.c:31: static void reset(void) __naked {
                                    459 ;	-----------------------------------------
                                    460 ;	 function reset
                                    461 ;	-----------------------------------------
      00001A                        462 _reset:
                                    463 ;	naked function: no prologue.
                                    464 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  465 	orl	pcon, #2
                                    466 ;	walk.c:35: }
                                    467 ;	naked function: no epilogue.
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'update'
                                    470 ;------------------------------------------------------------
                                    471 ;cur                       Allocated to stack - _bp -5
                                    472 ;j                         Allocated to stack - _bp -7
                                    473 ;t                         Allocated to stack - _bp +1
                                    474 ;sloc0                     Allocated to stack - _bp +4
                                    475 ;sloc1                     Allocated to stack - _bp +6
                                    476 ;sloc2                     Allocated to stack - _bp +8
                                    477 ;------------------------------------------------------------
                                    478 ;	walk.c:73: static int update(struct node *t, struct node *cur, int j) {
                                    479 ;	-----------------------------------------
                                    480 ;	 function update
                                    481 ;	-----------------------------------------
      00001D                        482 _update:
                           000007   483 	ar7 = 0x07
                           000006   484 	ar6 = 0x06
                           000005   485 	ar5 = 0x05
                           000004   486 	ar4 = 0x04
                           000003   487 	ar3 = 0x03
                           000002   488 	ar2 = 0x02
                           000001   489 	ar1 = 0x01
                           000000   490 	ar0 = 0x00
      00001D C0*00            [24]  491 	push	_bp
      00001F 85 81*00         [24]  492 	mov	_bp,sp
      000022 C0 82            [24]  493 	push	dpl
      000024 C0 83            [24]  494 	push	dph
      000026 C0 F0            [24]  495 	push	b
      000028 E5 81            [12]  496 	mov	a,sp
      00002A 24 07            [12]  497 	add	a,#0x07
      00002C F5 81            [12]  498 	mov	sp,a
                                    499 ;	walk.c:74: t->r = cur->r + neigh[j].r;
      00002E E5*00            [12]  500 	mov	a,_bp
      000030 24 FB            [12]  501 	add	a,#0xfb
      000032 F8               [12]  502 	mov	r0,a
      000033 86 02            [24]  503 	mov	ar2,@r0
      000035 08               [12]  504 	inc	r0
      000036 86 03            [24]  505 	mov	ar3,@r0
      000038 08               [12]  506 	inc	r0
      000039 86 04            [24]  507 	mov	ar4,@r0
      00003B 8A 82            [24]  508 	mov	dpl,r2
      00003D 8B 83            [24]  509 	mov	dph,r3
      00003F 8C F0            [24]  510 	mov	b,r4
      000041 E5*00            [12]  511 	mov	a,_bp
      000043 24 04            [12]  512 	add	a,#0x04
      000045 F8               [12]  513 	mov	r0,a
      000046 12r00r00         [24]  514 	lcall	__gptrget
      000049 F6               [12]  515 	mov	@r0,a
      00004A A3               [24]  516 	inc	dptr
      00004B 12r00r00         [24]  517 	lcall	__gptrget
      00004E 08               [12]  518 	inc	r0
      00004F F6               [12]  519 	mov	@r0,a
      000050 E5*00            [12]  520 	mov	a,_bp
      000052 24 F9            [12]  521 	add	a,#0xf9
      000054 F8               [12]  522 	mov	r0,a
      000055 E5*00            [12]  523 	mov	a,_bp
      000057 24 06            [12]  524 	add	a,#0x06
      000059 F9               [12]  525 	mov	r1,a
      00005A E6               [12]  526 	mov	a,@r0
      00005B 26               [12]  527 	add	a,@r0
      00005C F7               [12]  528 	mov	@r1,a
      00005D 08               [12]  529 	inc	r0
      00005E E6               [12]  530 	mov	a,@r0
      00005F 33               [12]  531 	rlc	a
      000060 09               [12]  532 	inc	r1
      000061 F7               [12]  533 	mov	@r1,a
      000062 19               [12]  534 	dec	r1
      000063 E7               [12]  535 	mov	a,@r1
      000064 27               [12]  536 	add	a,@r1
      000065 F7               [12]  537 	mov	@r1,a
      000066 09               [12]  538 	inc	r1
      000067 E7               [12]  539 	mov	a,@r1
      000068 33               [12]  540 	rlc	a
      000069 F7               [12]  541 	mov	@r1,a
      00006A E5*00            [12]  542 	mov	a,_bp
      00006C 24 06            [12]  543 	add	a,#0x06
      00006E F8               [12]  544 	mov	r0,a
      00006F E6               [12]  545 	mov	a,@r0
      000070 24r00            [12]  546 	add	a,#_neigh
      000072 F5 82            [12]  547 	mov	dpl,a
      000074 08               [12]  548 	inc	r0
      000075 E6               [12]  549 	mov	a,@r0
      000076 34s00            [12]  550 	addc	a,#(_neigh >> 8)
      000078 F5 83            [12]  551 	mov	dph,a
      00007A E4               [12]  552 	clr	a
      00007B 93               [24]  553 	movc	a,@a+dptr
      00007C FF               [12]  554 	mov	r7,a
      00007D A3               [24]  555 	inc	dptr
      00007E E4               [12]  556 	clr	a
      00007F 93               [24]  557 	movc	a,@a+dptr
      000080 FE               [12]  558 	mov	r6,a
      000081 E5*00            [12]  559 	mov	a,_bp
      000083 24 04            [12]  560 	add	a,#0x04
      000085 F8               [12]  561 	mov	r0,a
      000086 EF               [12]  562 	mov	a,r7
      000087 26               [12]  563 	add	a,@r0
      000088 FF               [12]  564 	mov	r7,a
      000089 EE               [12]  565 	mov	a,r6
      00008A 08               [12]  566 	inc	r0
      00008B 36               [12]  567 	addc	a,@r0
      00008C FE               [12]  568 	mov	r6,a
      00008D A8*00            [24]  569 	mov	r0,_bp
      00008F 08               [12]  570 	inc	r0
      000090 86 82            [24]  571 	mov	dpl,@r0
      000092 08               [12]  572 	inc	r0
      000093 86 83            [24]  573 	mov	dph,@r0
      000095 08               [12]  574 	inc	r0
      000096 86 F0            [24]  575 	mov	b,@r0
      000098 EF               [12]  576 	mov	a,r7
      000099 12r00r00         [24]  577 	lcall	__gptrput
      00009C A3               [24]  578 	inc	dptr
      00009D EE               [12]  579 	mov	a,r6
      00009E 12r00r00         [24]  580 	lcall	__gptrput
                                    581 ;	walk.c:75: t->c = cur->c + neigh[j].c;
      0000A1 A8*00            [24]  582 	mov	r0,_bp
      0000A3 08               [12]  583 	inc	r0
      0000A4 E5*00            [12]  584 	mov	a,_bp
      0000A6 24 08            [12]  585 	add	a,#0x08
      0000A8 F9               [12]  586 	mov	r1,a
      0000A9 74 02            [12]  587 	mov	a,#0x02
      0000AB 26               [12]  588 	add	a,@r0
      0000AC F7               [12]  589 	mov	@r1,a
      0000AD E4               [12]  590 	clr	a
      0000AE 08               [12]  591 	inc	r0
      0000AF 36               [12]  592 	addc	a,@r0
      0000B0 09               [12]  593 	inc	r1
      0000B1 F7               [12]  594 	mov	@r1,a
      0000B2 08               [12]  595 	inc	r0
      0000B3 09               [12]  596 	inc	r1
      0000B4 E6               [12]  597 	mov	a,@r0
      0000B5 F7               [12]  598 	mov	@r1,a
      0000B6 74 02            [12]  599 	mov	a,#0x02
      0000B8 2A               [12]  600 	add	a,r2
      0000B9 FA               [12]  601 	mov	r2,a
      0000BA E4               [12]  602 	clr	a
      0000BB 3B               [12]  603 	addc	a,r3
      0000BC FB               [12]  604 	mov	r3,a
      0000BD 8A 82            [24]  605 	mov	dpl,r2
      0000BF 8B 83            [24]  606 	mov	dph,r3
      0000C1 8C F0            [24]  607 	mov	b,r4
      0000C3 12r00r00         [24]  608 	lcall	__gptrget
      0000C6 FA               [12]  609 	mov	r2,a
      0000C7 A3               [24]  610 	inc	dptr
      0000C8 12r00r00         [24]  611 	lcall	__gptrget
      0000CB FB               [12]  612 	mov	r3,a
      0000CC E5*00            [12]  613 	mov	a,_bp
      0000CE 24 06            [12]  614 	add	a,#0x06
      0000D0 F8               [12]  615 	mov	r0,a
      0000D1 E6               [12]  616 	mov	a,@r0
      0000D2 24r00            [12]  617 	add	a,#_neigh
      0000D4 FC               [12]  618 	mov	r4,a
      0000D5 08               [12]  619 	inc	r0
      0000D6 E6               [12]  620 	mov	a,@r0
      0000D7 34s00            [12]  621 	addc	a,#(_neigh >> 8)
      0000D9 FD               [12]  622 	mov	r5,a
      0000DA 8C 82            [24]  623 	mov	dpl,r4
      0000DC 8D 83            [24]  624 	mov	dph,r5
      0000DE A3               [24]  625 	inc	dptr
      0000DF A3               [24]  626 	inc	dptr
      0000E0 E4               [12]  627 	clr	a
      0000E1 93               [24]  628 	movc	a,@a+dptr
      0000E2 FC               [12]  629 	mov	r4,a
      0000E3 A3               [24]  630 	inc	dptr
      0000E4 E4               [12]  631 	clr	a
      0000E5 93               [24]  632 	movc	a,@a+dptr
      0000E6 FD               [12]  633 	mov	r5,a
      0000E7 EC               [12]  634 	mov	a,r4
      0000E8 2A               [12]  635 	add	a,r2
      0000E9 FA               [12]  636 	mov	r2,a
      0000EA ED               [12]  637 	mov	a,r5
      0000EB 3B               [12]  638 	addc	a,r3
      0000EC FB               [12]  639 	mov	r3,a
      0000ED E5*00            [12]  640 	mov	a,_bp
      0000EF 24 08            [12]  641 	add	a,#0x08
      0000F1 F8               [12]  642 	mov	r0,a
      0000F2 86 82            [24]  643 	mov	dpl,@r0
      0000F4 08               [12]  644 	inc	r0
      0000F5 86 83            [24]  645 	mov	dph,@r0
      0000F7 08               [12]  646 	inc	r0
      0000F8 86 F0            [24]  647 	mov	b,@r0
      0000FA EA               [12]  648 	mov	a,r2
      0000FB 12r00r00         [24]  649 	lcall	__gptrput
      0000FE A3               [24]  650 	inc	dptr
      0000FF EB               [12]  651 	mov	a,r3
      000100 12r00r00         [24]  652 	lcall	__gptrput
                                    653 ;	walk.c:77: if (t->r < 0) t->r += ROWS;
      000103 A8*00            [24]  654 	mov	r0,_bp
      000105 08               [12]  655 	inc	r0
      000106 86 82            [24]  656 	mov	dpl,@r0
      000108 08               [12]  657 	inc	r0
      000109 86 83            [24]  658 	mov	dph,@r0
      00010B 08               [12]  659 	inc	r0
      00010C 86 F0            [24]  660 	mov	b,@r0
      00010E 12r00r00         [24]  661 	lcall	__gptrget
      000111 FD               [12]  662 	mov	r5,a
      000112 A3               [24]  663 	inc	dptr
      000113 12r00r00         [24]  664 	lcall	__gptrget
      000116 FC               [12]  665 	mov	r4,a
      000117 EE               [12]  666 	mov	a,r6
      000118 30 E7 1D         [24]  667 	jnb	acc.7,00104$
      00011B 74 30            [12]  668 	mov	a,#0x30
      00011D 2D               [12]  669 	add	a,r5
      00011E FF               [12]  670 	mov	r7,a
      00011F E4               [12]  671 	clr	a
      000120 3C               [12]  672 	addc	a,r4
      000121 FE               [12]  673 	mov	r6,a
      000122 A8*00            [24]  674 	mov	r0,_bp
      000124 08               [12]  675 	inc	r0
      000125 86 82            [24]  676 	mov	dpl,@r0
      000127 08               [12]  677 	inc	r0
      000128 86 83            [24]  678 	mov	dph,@r0
      00012A 08               [12]  679 	inc	r0
      00012B 86 F0            [24]  680 	mov	b,@r0
      00012D EF               [12]  681 	mov	a,r7
      00012E 12r00r00         [24]  682 	lcall	__gptrput
      000131 A3               [24]  683 	inc	dptr
      000132 EE               [12]  684 	mov	a,r6
      000133 12r00r00         [24]  685 	lcall	__gptrput
      000136 80 27            [24]  686 	sjmp	00105$
      000138                        687 00104$:
                                    688 ;	walk.c:78: else if (t->r >= ROWS) t->r -= ROWS;
      000138 C3               [12]  689 	clr	c
      000139 ED               [12]  690 	mov	a,r5
      00013A 94 30            [12]  691 	subb	a,#0x30
      00013C EC               [12]  692 	mov	a,r4
      00013D 64 80            [12]  693 	xrl	a,#0x80
      00013F 94 80            [12]  694 	subb	a,#0x80
      000141 40 1C            [24]  695 	jc	00105$
      000143 ED               [12]  696 	mov	a,r5
      000144 24 D0            [12]  697 	add	a,#0xd0
      000146 FD               [12]  698 	mov	r5,a
      000147 EC               [12]  699 	mov	a,r4
      000148 34 FF            [12]  700 	addc	a,#0xff
      00014A FC               [12]  701 	mov	r4,a
      00014B A8*00            [24]  702 	mov	r0,_bp
      00014D 08               [12]  703 	inc	r0
      00014E 86 82            [24]  704 	mov	dpl,@r0
      000150 08               [12]  705 	inc	r0
      000151 86 83            [24]  706 	mov	dph,@r0
      000153 08               [12]  707 	inc	r0
      000154 86 F0            [24]  708 	mov	b,@r0
      000156 ED               [12]  709 	mov	a,r5
      000157 12r00r00         [24]  710 	lcall	__gptrput
      00015A A3               [24]  711 	inc	dptr
      00015B EC               [12]  712 	mov	a,r4
      00015C 12r00r00         [24]  713 	lcall	__gptrput
      00015F                        714 00105$:
                                    715 ;	walk.c:79: if (t->c < 0) t->c += COLS;
      00015F E5*00            [12]  716 	mov	a,_bp
      000161 24 08            [12]  717 	add	a,#0x08
      000163 F8               [12]  718 	mov	r0,a
      000164 86 82            [24]  719 	mov	dpl,@r0
      000166 08               [12]  720 	inc	r0
      000167 86 83            [24]  721 	mov	dph,@r0
      000169 08               [12]  722 	inc	r0
      00016A 86 F0            [24]  723 	mov	b,@r0
      00016C 12r00r00         [24]  724 	lcall	__gptrget
      00016F A3               [24]  725 	inc	dptr
      000170 12r00r00         [24]  726 	lcall	__gptrget
      000173 30 E7 35         [24]  727 	jnb	acc.7,00109$
      000176 E5*00            [12]  728 	mov	a,_bp
      000178 24 08            [12]  729 	add	a,#0x08
      00017A F8               [12]  730 	mov	r0,a
      00017B 86 82            [24]  731 	mov	dpl,@r0
      00017D 08               [12]  732 	inc	r0
      00017E 86 83            [24]  733 	mov	dph,@r0
      000180 08               [12]  734 	inc	r0
      000181 86 F0            [24]  735 	mov	b,@r0
      000183 12r00r00         [24]  736 	lcall	__gptrget
      000186 FE               [12]  737 	mov	r6,a
      000187 A3               [24]  738 	inc	dptr
      000188 12r00r00         [24]  739 	lcall	__gptrget
      00018B FF               [12]  740 	mov	r7,a
      00018C 74 C0            [12]  741 	mov	a,#0xc0
      00018E 2E               [12]  742 	add	a,r6
      00018F FE               [12]  743 	mov	r6,a
      000190 E4               [12]  744 	clr	a
      000191 3F               [12]  745 	addc	a,r7
      000192 FF               [12]  746 	mov	r7,a
      000193 E5*00            [12]  747 	mov	a,_bp
      000195 24 08            [12]  748 	add	a,#0x08
      000197 F8               [12]  749 	mov	r0,a
      000198 86 82            [24]  750 	mov	dpl,@r0
      00019A 08               [12]  751 	inc	r0
      00019B 86 83            [24]  752 	mov	dph,@r0
      00019D 08               [12]  753 	inc	r0
      00019E 86 F0            [24]  754 	mov	b,@r0
      0001A0 EE               [12]  755 	mov	a,r6
      0001A1 12r00r00         [24]  756 	lcall	__gptrput
      0001A4 A3               [24]  757 	inc	dptr
      0001A5 EF               [12]  758 	mov	a,r7
      0001A6 12r00r00         [24]  759 	lcall	__gptrput
      0001A9 80 55            [24]  760 	sjmp	00110$
      0001AB                        761 00109$:
                                    762 ;	walk.c:80: else if (t->c >= COLS) t->c -= COLS;
      0001AB E5*00            [12]  763 	mov	a,_bp
      0001AD 24 08            [12]  764 	add	a,#0x08
      0001AF F8               [12]  765 	mov	r0,a
      0001B0 86 82            [24]  766 	mov	dpl,@r0
      0001B2 08               [12]  767 	inc	r0
      0001B3 86 83            [24]  768 	mov	dph,@r0
      0001B5 08               [12]  769 	inc	r0
      0001B6 86 F0            [24]  770 	mov	b,@r0
      0001B8 12r00r00         [24]  771 	lcall	__gptrget
      0001BB FE               [12]  772 	mov	r6,a
      0001BC A3               [24]  773 	inc	dptr
      0001BD 12r00r00         [24]  774 	lcall	__gptrget
      0001C0 FF               [12]  775 	mov	r7,a
      0001C1 C3               [12]  776 	clr	c
      0001C2 EE               [12]  777 	mov	a,r6
      0001C3 94 C0            [12]  778 	subb	a,#0xc0
      0001C5 EF               [12]  779 	mov	a,r7
      0001C6 64 80            [12]  780 	xrl	a,#0x80
      0001C8 94 80            [12]  781 	subb	a,#0x80
      0001CA 40 34            [24]  782 	jc	00110$
      0001CC E5*00            [12]  783 	mov	a,_bp
      0001CE 24 08            [12]  784 	add	a,#0x08
      0001D0 F8               [12]  785 	mov	r0,a
      0001D1 86 82            [24]  786 	mov	dpl,@r0
      0001D3 08               [12]  787 	inc	r0
      0001D4 86 83            [24]  788 	mov	dph,@r0
      0001D6 08               [12]  789 	inc	r0
      0001D7 86 F0            [24]  790 	mov	b,@r0
      0001D9 12r00r00         [24]  791 	lcall	__gptrget
      0001DC FE               [12]  792 	mov	r6,a
      0001DD A3               [24]  793 	inc	dptr
      0001DE 12r00r00         [24]  794 	lcall	__gptrget
      0001E1 FF               [12]  795 	mov	r7,a
      0001E2 EE               [12]  796 	mov	a,r6
      0001E3 24 40            [12]  797 	add	a,#0x40
      0001E5 FE               [12]  798 	mov	r6,a
      0001E6 EF               [12]  799 	mov	a,r7
      0001E7 34 FF            [12]  800 	addc	a,#0xff
      0001E9 FF               [12]  801 	mov	r7,a
      0001EA E5*00            [12]  802 	mov	a,_bp
      0001EC 24 08            [12]  803 	add	a,#0x08
      0001EE F8               [12]  804 	mov	r0,a
      0001EF 86 82            [24]  805 	mov	dpl,@r0
      0001F1 08               [12]  806 	inc	r0
      0001F2 86 83            [24]  807 	mov	dph,@r0
      0001F4 08               [12]  808 	inc	r0
      0001F5 86 F0            [24]  809 	mov	b,@r0
      0001F7 EE               [12]  810 	mov	a,r6
      0001F8 12r00r00         [24]  811 	lcall	__gptrput
      0001FB A3               [24]  812 	inc	dptr
      0001FC EF               [12]  813 	mov	a,r7
      0001FD 12r00r00         [24]  814 	lcall	__gptrput
      000200                        815 00110$:
                                    816 ;	walk.c:82: if (g[t->r][t->c] == 0xaa) return 0;
      000200 A8*00            [24]  817 	mov	r0,_bp
      000202 08               [12]  818 	inc	r0
      000203 86 82            [24]  819 	mov	dpl,@r0
      000205 08               [12]  820 	inc	r0
      000206 86 83            [24]  821 	mov	dph,@r0
      000208 08               [12]  822 	inc	r0
      000209 86 F0            [24]  823 	mov	b,@r0
      00020B 12r00r00         [24]  824 	lcall	__gptrget
      00020E FE               [12]  825 	mov	r6,a
      00020F A3               [24]  826 	inc	dptr
      000210 12r00r00         [24]  827 	lcall	__gptrget
      000213 FF               [12]  828 	mov	r7,a
      000214 C0 06            [24]  829 	push	ar6
      000216 C0 07            [24]  830 	push	ar7
      000218 90 00 C0         [24]  831 	mov	dptr,#0x00c0
      00021B 12r00r00         [24]  832 	lcall	__mulint
      00021E AE 82            [24]  833 	mov	r6,dpl
      000220 AF 83            [24]  834 	mov	r7,dph
      000222 15 81            [12]  835 	dec	sp
      000224 15 81            [12]  836 	dec	sp
      000226 EE               [12]  837 	mov	a,r6
      000227 24r00            [12]  838 	add	a,#_g
      000229 FE               [12]  839 	mov	r6,a
      00022A EF               [12]  840 	mov	a,r7
      00022B 34s00            [12]  841 	addc	a,#(_g >> 8)
      00022D FF               [12]  842 	mov	r7,a
      00022E E5*00            [12]  843 	mov	a,_bp
      000230 24 08            [12]  844 	add	a,#0x08
      000232 F8               [12]  845 	mov	r0,a
      000233 86 82            [24]  846 	mov	dpl,@r0
      000235 08               [12]  847 	inc	r0
      000236 86 83            [24]  848 	mov	dph,@r0
      000238 08               [12]  849 	inc	r0
      000239 86 F0            [24]  850 	mov	b,@r0
      00023B 12r00r00         [24]  851 	lcall	__gptrget
      00023E FC               [12]  852 	mov	r4,a
      00023F A3               [24]  853 	inc	dptr
      000240 12r00r00         [24]  854 	lcall	__gptrget
      000243 FD               [12]  855 	mov	r5,a
      000244 EC               [12]  856 	mov	a,r4
      000245 2E               [12]  857 	add	a,r6
      000246 F5 82            [12]  858 	mov	dpl,a
      000248 ED               [12]  859 	mov	a,r5
      000249 3F               [12]  860 	addc	a,r7
      00024A F5 83            [12]  861 	mov	dph,a
      00024C E0               [24]  862 	movx	a,@dptr
      00024D FF               [12]  863 	mov	r7,a
      00024E BF AA 05         [24]  864 	cjne	r7,#0xaa,00114$
      000251 90 00 00         [24]  865 	mov	dptr,#0x0000
      000254 80 62            [24]  866 	sjmp	00116$
      000256                        867 00114$:
                                    868 ;	walk.c:83: else if (g[t->r][t->c] != 0x55) {
      000256 A8*00            [24]  869 	mov	r0,_bp
      000258 08               [12]  870 	inc	r0
      000259 86 82            [24]  871 	mov	dpl,@r0
      00025B 08               [12]  872 	inc	r0
      00025C 86 83            [24]  873 	mov	dph,@r0
      00025E 08               [12]  874 	inc	r0
      00025F 86 F0            [24]  875 	mov	b,@r0
      000261 12r00r00         [24]  876 	lcall	__gptrget
      000264 FE               [12]  877 	mov	r6,a
      000265 A3               [24]  878 	inc	dptr
      000266 12r00r00         [24]  879 	lcall	__gptrget
      000269 FF               [12]  880 	mov	r7,a
      00026A C0 06            [24]  881 	push	ar6
      00026C C0 07            [24]  882 	push	ar7
      00026E 90 00 C0         [24]  883 	mov	dptr,#0x00c0
      000271 12r00r00         [24]  884 	lcall	__mulint
      000274 AE 82            [24]  885 	mov	r6,dpl
      000276 AF 83            [24]  886 	mov	r7,dph
      000278 15 81            [12]  887 	dec	sp
      00027A 15 81            [12]  888 	dec	sp
      00027C EE               [12]  889 	mov	a,r6
      00027D 24r00            [12]  890 	add	a,#_g
      00027F FE               [12]  891 	mov	r6,a
      000280 EF               [12]  892 	mov	a,r7
      000281 34s00            [12]  893 	addc	a,#(_g >> 8)
      000283 FF               [12]  894 	mov	r7,a
      000284 E5*00            [12]  895 	mov	a,_bp
      000286 24 08            [12]  896 	add	a,#0x08
      000288 F8               [12]  897 	mov	r0,a
      000289 86 82            [24]  898 	mov	dpl,@r0
      00028B 08               [12]  899 	inc	r0
      00028C 86 83            [24]  900 	mov	dph,@r0
      00028E 08               [12]  901 	inc	r0
      00028F 86 F0            [24]  902 	mov	b,@r0
      000291 12r00r00         [24]  903 	lcall	__gptrget
      000294 FC               [12]  904 	mov	r4,a
      000295 A3               [24]  905 	inc	dptr
      000296 12r00r00         [24]  906 	lcall	__gptrget
      000299 FD               [12]  907 	mov	r5,a
      00029A EC               [12]  908 	mov	a,r4
      00029B 2E               [12]  909 	add	a,r6
      00029C F5 82            [12]  910 	mov	dpl,a
      00029E ED               [12]  911 	mov	a,r5
      00029F 3F               [12]  912 	addc	a,r7
      0002A0 F5 83            [12]  913 	mov	dph,a
      0002A2 E0               [24]  914 	movx	a,@dptr
      0002A3 FF               [12]  915 	mov	r7,a
      0002A4 BF 55 02         [24]  916 	cjne	r7,#0x55,00148$
      0002A7 80 0C            [24]  917 	sjmp	00115$
      0002A9                        918 00148$:
                                    919 ;	walk.c:84: (void)puts("Memory error");
      0002A9 90r00r20         [24]  920 	mov	dptr,#___str_0
      0002AC 75 F0 80         [24]  921 	mov	b,#0x80
      0002AF 12r00r00         [24]  922 	lcall	_puts
                                    923 ;	walk.c:85: reset();
      0002B2 12r00r1A         [24]  924 	lcall	_reset
      0002B5                        925 00115$:
                                    926 ;	walk.c:88: return 1;
      0002B5 90 00 01         [24]  927 	mov	dptr,#0x0001
      0002B8                        928 00116$:
                                    929 ;	walk.c:89: }
      0002B8 85*00 81         [24]  930 	mov	sp,_bp
      0002BB D0*00            [24]  931 	pop	_bp
      0002BD 22               [24]  932 	ret
                                    933 ;------------------------------------------------------------
                                    934 ;Allocation info for local variables in function 'walk'
                                    935 ;------------------------------------------------------------
                                    936 ;nstart                    Allocated to registers 
                                    937 ;cur                       Allocated to stack - _bp +11
                                    938 ;t                         Allocated to stack - _bp +15
                                    939 ;j                         Allocated to stack - _bp +19
                                    940 ;f                         Allocated to registers r3 r2 
                                    941 ;sloc0                     Allocated to stack - _bp +1
                                    942 ;sloc1                     Allocated to stack - _bp +2
                                    943 ;sloc2                     Allocated to stack - _bp +3
                                    944 ;sloc3                     Allocated to stack - _bp +19
                                    945 ;sloc4                     Allocated to stack - _bp +4
                                    946 ;sloc5                     Allocated to stack - _bp +22
                                    947 ;sloc6                     Allocated to stack - _bp +5
                                    948 ;sloc7                     Allocated to stack - _bp +6
                                    949 ;sloc8                     Allocated to stack - _bp +7
                                    950 ;sloc9                     Allocated to stack - _bp +8
                                    951 ;------------------------------------------------------------
                                    952 ;	walk.c:91: static void walk(struct node *nstart) {
                                    953 ;	-----------------------------------------
                                    954 ;	 function walk
                                    955 ;	-----------------------------------------
      0002BE                        956 _walk:
      0002BE C0*00            [24]  957 	push	_bp
      0002C0 E5 81            [12]  958 	mov	a,sp
      0002C2 F5*00            [12]  959 	mov	_bp,a
      0002C4 24 14            [12]  960 	add	a,#0x14
      0002C6 F5 81            [12]  961 	mov	sp,a
      0002C8 AD 82            [24]  962 	mov	r5,dpl
      0002CA AE 83            [24]  963 	mov	r6,dph
      0002CC AF F0            [24]  964 	mov	r7,b
                                    965 ;	walk.c:95: cur = *nstart;
      0002CE E5*00            [12]  966 	mov	a,_bp
      0002D0 24 0B            [12]  967 	add	a,#0x0b
      0002D2 F9               [12]  968 	mov	r1,a
      0002D3 FA               [12]  969 	mov	r2,a
      0002D4 7B 00            [12]  970 	mov	r3,#0x00
      0002D6 7C 40            [12]  971 	mov	r4,#0x40
      0002D8 C0 01            [24]  972 	push	ar1
      0002DA 74 04            [12]  973 	mov	a,#0x04
      0002DC C0 E0            [24]  974 	push	acc
      0002DE E4               [12]  975 	clr	a
      0002DF C0 E0            [24]  976 	push	acc
      0002E1 C0 05            [24]  977 	push	ar5
      0002E3 C0 06            [24]  978 	push	ar6
      0002E5 C0 07            [24]  979 	push	ar7
      0002E7 8A 82            [24]  980 	mov	dpl,r2
      0002E9 8B 83            [24]  981 	mov	dph,r3
      0002EB 8C F0            [24]  982 	mov	b,r4
      0002ED 12r00r00         [24]  983 	lcall	___memcpy
      0002F0 E5 81            [12]  984 	mov	a,sp
      0002F2 24 FB            [12]  985 	add	a,#0xfb
      0002F4 F5 81            [12]  986 	mov	sp,a
      0002F6 D0 01            [24]  987 	pop	ar1
                                    988 ;	walk.c:97: process:
      0002F8 E5*00            [12]  989 	mov	a,_bp
      0002FA 24 07            [12]  990 	add	a,#0x07
      0002FC F8               [12]  991 	mov	r0,a
      0002FD A6 01            [24]  992 	mov	@r0,ar1
      0002FF E5*00            [12]  993 	mov	a,_bp
      000301 24 0F            [12]  994 	add	a,#0x0f
      000303 FE               [12]  995 	mov	r6,a
      000304 E5*00            [12]  996 	mov	a,_bp
      000306 24 03            [12]  997 	add	a,#0x03
      000308 F8               [12]  998 	mov	r0,a
      000309 A6 01            [24]  999 	mov	@r0,ar1
      00030B E5*00            [12] 1000 	mov	a,_bp
      00030D 24 06            [12] 1001 	add	a,#0x06
      00030F F8               [12] 1002 	mov	r0,a
      000310 A6 01            [24] 1003 	mov	@r0,ar1
      000312 E5*00            [12] 1004 	mov	a,_bp
      000314 24 05            [12] 1005 	add	a,#0x05
      000316 F8               [12] 1006 	mov	r0,a
      000317 A6 06            [24] 1007 	mov	@r0,ar6
      000319 E5*00            [12] 1008 	mov	a,_bp
      00031B 24 04            [12] 1009 	add	a,#0x04
      00031D F8               [12] 1010 	mov	r0,a
      00031E A6 01            [24] 1011 	mov	@r0,ar1
      000320 A8*00            [24] 1012 	mov	r0,_bp
      000322 08               [12] 1013 	inc	r0
      000323 A6 06            [24] 1014 	mov	@r0,ar6
      000325 A8*00            [24] 1015 	mov	r0,_bp
      000327 08               [12] 1016 	inc	r0
      000328 08               [12] 1017 	inc	r0
      000329 A6 01            [24] 1018 	mov	@r0,ar1
      00032B 74 02            [12] 1019 	mov	a,#0x02
      00032D 29               [12] 1020 	add	a,r1
      00032E F8               [12] 1021 	mov	r0,a
      00032F                       1022 00101$:
                                   1023 ;	walk.c:98: g[cur.r][cur.c] = 0xaa;
      00032F 87 02            [24] 1024 	mov	ar2,@r1
      000331 09               [12] 1025 	inc	r1
      000332 87 05            [24] 1026 	mov	ar5,@r1
      000334 19               [12] 1027 	dec	r1
      000335 C0 06            [24] 1028 	push	ar6
      000337 C0 01            [24] 1029 	push	ar1
      000339 C0 00            [24] 1030 	push	ar0
      00033B C0 02            [24] 1031 	push	ar2
      00033D C0 05            [24] 1032 	push	ar5
      00033F 90 00 C0         [24] 1033 	mov	dptr,#0x00c0
      000342 12r00r00         [24] 1034 	lcall	__mulint
      000345 AA 82            [24] 1035 	mov	r2,dpl
      000347 AD 83            [24] 1036 	mov	r5,dph
      000349 15 81            [12] 1037 	dec	sp
      00034B 15 81            [12] 1038 	dec	sp
      00034D D0 00            [24] 1039 	pop	ar0
      00034F D0 01            [24] 1040 	pop	ar1
      000351 D0 06            [24] 1041 	pop	ar6
      000353 EA               [12] 1042 	mov	a,r2
      000354 24r00            [12] 1043 	add	a,#_g
      000356 FF               [12] 1044 	mov	r7,a
      000357 ED               [12] 1045 	mov	a,r5
      000358 34s00            [12] 1046 	addc	a,#(_g >> 8)
      00035A FC               [12] 1047 	mov	r4,a
      00035B 86 02            [24] 1048 	mov	ar2,@r0
      00035D 08               [12] 1049 	inc	r0
      00035E 86 05            [24] 1050 	mov	ar5,@r0
      000360 18               [12] 1051 	dec	r0
      000361 EA               [12] 1052 	mov	a,r2
      000362 2F               [12] 1053 	add	a,r7
      000363 F5 82            [12] 1054 	mov	dpl,a
      000365 ED               [12] 1055 	mov	a,r5
      000366 3C               [12] 1056 	addc	a,r4
      000367 F5 83            [12] 1057 	mov	dph,a
      000369 74 AA            [12] 1058 	mov	a,#0xaa
      00036B F0               [24] 1059 	movx	@dptr,a
                                   1060 ;	walk.c:99: printf("\033[%d;%dHo", cur.r + 1, cur.c + 1);
      00036C 86 02            [24] 1061 	mov	ar2,@r0
      00036E 08               [12] 1062 	inc	r0
      00036F 86 05            [24] 1063 	mov	ar5,@r0
      000371 18               [12] 1064 	dec	r0
      000372 74 01            [12] 1065 	mov	a,#0x01
      000374 2A               [12] 1066 	add	a,r2
      000375 FF               [12] 1067 	mov	r7,a
      000376 E4               [12] 1068 	clr	a
      000377 3D               [12] 1069 	addc	a,r5
      000378 FC               [12] 1070 	mov	r4,a
      000379 87 02            [24] 1071 	mov	ar2,@r1
      00037B 09               [12] 1072 	inc	r1
      00037C 87 05            [24] 1073 	mov	ar5,@r1
      00037E 19               [12] 1074 	dec	r1
      00037F 0A               [12] 1075 	inc	r2
      000380 BA 00 01         [24] 1076 	cjne	r2,#0x00,00160$
      000383 0D               [12] 1077 	inc	r5
      000384                       1078 00160$:
      000384 C0 06            [24] 1079 	push	ar6
      000386 C0 01            [24] 1080 	push	ar1
      000388 C0 00            [24] 1081 	push	ar0
      00038A C0 07            [24] 1082 	push	ar7
      00038C C0 04            [24] 1083 	push	ar4
      00038E C0 02            [24] 1084 	push	ar2
      000390 C0 05            [24] 1085 	push	ar5
      000392 74r2D            [12] 1086 	mov	a,#___str_1
      000394 C0 E0            [24] 1087 	push	acc
      000396 74s00            [12] 1088 	mov	a,#(___str_1 >> 8)
      000398 C0 E0            [24] 1089 	push	acc
      00039A 74 80            [12] 1090 	mov	a,#0x80
      00039C C0 E0            [24] 1091 	push	acc
      00039E 12r00r00         [24] 1092 	lcall	_printf
      0003A1 E5 81            [12] 1093 	mov	a,sp
      0003A3 24 F9            [12] 1094 	add	a,#0xf9
      0003A5 F5 81            [12] 1095 	mov	sp,a
      0003A7 D0 00            [24] 1096 	pop	ar0
      0003A9 D0 01            [24] 1097 	pop	ar1
      0003AB D0 06            [24] 1098 	pop	ar6
                                   1099 ;	walk.c:127: return;
                                   1100 ;	walk.c:102: for (j = 0, f = 0; j < NMAX; j++) {
      0003AD                       1101 00125$:
      0003AD 7B 00            [12] 1102 	mov	r3,#0x00
      0003AF 7A 00            [12] 1103 	mov	r2,#0x00
      0003B1 C0 00            [24] 1104 	push	ar0
      0003B3 E5*00            [12] 1105 	mov	a,_bp
      0003B5 24 13            [12] 1106 	add	a,#0x13
      0003B7 F8               [12] 1107 	mov	r0,a
      0003B8 E4               [12] 1108 	clr	a
      0003B9 F6               [12] 1109 	mov	@r0,a
      0003BA 08               [12] 1110 	inc	r0
      0003BB F6               [12] 1111 	mov	@r0,a
      0003BC D0 00            [24] 1112 	pop	ar0
      0003BE                       1113 00120$:
      0003BE C0 00            [24] 1114 	push	ar0
      0003C0 E5*00            [12] 1115 	mov	a,_bp
      0003C2 24 13            [12] 1116 	add	a,#0x13
      0003C4 F8               [12] 1117 	mov	r0,a
      0003C5 C3               [12] 1118 	clr	c
      0003C6 E6               [12] 1119 	mov	a,@r0
      0003C7 94 08            [12] 1120 	subb	a,#0x08
      0003C9 08               [12] 1121 	inc	r0
      0003CA E6               [12] 1122 	mov	a,@r0
      0003CB 64 80            [12] 1123 	xrl	a,#0x80
      0003CD 94 80            [12] 1124 	subb	a,#0x80
      0003CF D0 00            [24] 1125 	pop	ar0
      0003D1 40 03            [24] 1126 	jc	00161$
      0003D3 02r04r60         [24] 1127 	ljmp	00106$
      0003D6                       1128 00161$:
                                   1129 ;	walk.c:103: if (!update(&t, &cur, j)) continue;
      0003D6 C0 00            [24] 1130 	push	ar0
      0003D8 C0 00            [24] 1131 	push	ar0
      0003DA E5*00            [12] 1132 	mov	a,_bp
      0003DC 24 07            [12] 1133 	add	a,#0x07
      0003DE F8               [12] 1134 	mov	r0,a
      0003DF C0 01            [24] 1135 	push	ar1
      0003E1 E5*00            [12] 1136 	mov	a,_bp
      0003E3 24 08            [12] 1137 	add	a,#0x08
      0003E5 F9               [12] 1138 	mov	r1,a
      0003E6 E6               [12] 1139 	mov	a,@r0
      0003E7 F7               [12] 1140 	mov	@r1,a
      0003E8 09               [12] 1141 	inc	r1
      0003E9 77 00            [12] 1142 	mov	@r1,#0x00
      0003EB 09               [12] 1143 	inc	r1
      0003EC 77 40            [12] 1144 	mov	@r1,#0x40
      0003EE D0 01            [24] 1145 	pop	ar1
      0003F0 D0 00            [24] 1146 	pop	ar0
      0003F2 8E 04            [24] 1147 	mov	ar4,r6
      0003F4 7D 00            [12] 1148 	mov	r5,#0x00
      0003F6 7F 40            [12] 1149 	mov	r7,#0x40
      0003F8 C0 06            [24] 1150 	push	ar6
      0003FA C0 03            [24] 1151 	push	ar3
      0003FC C0 02            [24] 1152 	push	ar2
      0003FE C0 01            [24] 1153 	push	ar1
      000400 C0 00            [24] 1154 	push	ar0
      000402 85 00 F0         [24] 1155 	mov	b,ar0
      000405 E5*00            [12] 1156 	mov	a,_bp
      000407 24 13            [12] 1157 	add	a,#0x13
      000409 F8               [12] 1158 	mov	r0,a
      00040A E6               [12] 1159 	mov	a,@r0
      00040B C0 E0            [24] 1160 	push	acc
      00040D 08               [12] 1161 	inc	r0
      00040E E6               [12] 1162 	mov	a,@r0
      00040F C0 E0            [24] 1163 	push	acc
      000411 A8 F0            [24] 1164 	mov	r0,b
      000413 85 00 F0         [24] 1165 	mov	b,ar0
      000416 E5*00            [12] 1166 	mov	a,_bp
      000418 24 08            [12] 1167 	add	a,#0x08
      00041A F8               [12] 1168 	mov	r0,a
      00041B E6               [12] 1169 	mov	a,@r0
      00041C C0 E0            [24] 1170 	push	acc
      00041E 08               [12] 1171 	inc	r0
      00041F E6               [12] 1172 	mov	a,@r0
      000420 C0 E0            [24] 1173 	push	acc
      000422 08               [12] 1174 	inc	r0
      000423 E6               [12] 1175 	mov	a,@r0
      000424 C0 E0            [24] 1176 	push	acc
      000426 8C 82            [24] 1177 	mov	dpl,r4
      000428 8D 83            [24] 1178 	mov	dph,r5
      00042A 8F F0            [24] 1179 	mov	b,r7
      00042C 12r00r1D         [24] 1180 	lcall	_update
      00042F AD 82            [24] 1181 	mov	r5,dpl
      000431 AF 83            [24] 1182 	mov	r7,dph
      000433 E5 81            [12] 1183 	mov	a,sp
      000435 24 FB            [12] 1184 	add	a,#0xfb
      000437 F5 81            [12] 1185 	mov	sp,a
      000439 D0 00            [24] 1186 	pop	ar0
      00043B D0 01            [24] 1187 	pop	ar1
      00043D D0 02            [24] 1188 	pop	ar2
      00043F D0 03            [24] 1189 	pop	ar3
      000441 D0 06            [24] 1190 	pop	ar6
      000443 D0 00            [24] 1191 	pop	ar0
      000445 ED               [12] 1192 	mov	a,r5
      000446 4F               [12] 1193 	orl	a,r7
      000447 60 05            [24] 1194 	jz	00105$
                                   1195 ;	walk.c:104: f++;
      000449 0B               [12] 1196 	inc	r3
      00044A BB 00 01         [24] 1197 	cjne	r3,#0x00,00163$
      00044D 0A               [12] 1198 	inc	r2
      00044E                       1199 00163$:
      00044E                       1200 00105$:
                                   1201 ;	walk.c:102: for (j = 0, f = 0; j < NMAX; j++) {
      00044E C0 00            [24] 1202 	push	ar0
      000450 E5*00            [12] 1203 	mov	a,_bp
      000452 24 13            [12] 1204 	add	a,#0x13
      000454 F8               [12] 1205 	mov	r0,a
      000455 06               [12] 1206 	inc	@r0
      000456 B6 00 02         [24] 1207 	cjne	@r0,#0x00,00164$
      000459 08               [12] 1208 	inc	r0
      00045A 06               [12] 1209 	inc	@r0
      00045B                       1210 00164$:
      00045B D0 00            [24] 1211 	pop	ar0
      00045D 02r03rBE         [24] 1212 	ljmp	00120$
      000460                       1213 00106$:
                                   1214 ;	walk.c:107: if (f) {
      000460 EB               [12] 1215 	mov	a,r3
      000461 4A               [12] 1216 	orl	a,r2
      000462 70 03            [24] 1217 	jnz	00165$
      000464 02r05r99         [24] 1218 	ljmp	00115$
      000467                       1219 00165$:
                                   1220 ;	walk.c:108: while (1) {
      000467                       1221 00112$:
                                   1222 ;	walk.c:109: j = rand() % NMAX;
      000467 C0 00            [24] 1223 	push	ar0
      000469 C0 06            [24] 1224 	push	ar6
      00046B C0 01            [24] 1225 	push	ar1
      00046D C0 00            [24] 1226 	push	ar0
      00046F 12r00r00         [24] 1227 	lcall	_rand
      000472 AD 82            [24] 1228 	mov	r5,dpl
      000474 AF 83            [24] 1229 	mov	r7,dph
      000476 74 08            [12] 1230 	mov	a,#0x08
      000478 C0 E0            [24] 1231 	push	acc
      00047A E4               [12] 1232 	clr	a
      00047B C0 E0            [24] 1233 	push	acc
      00047D 8D 82            [24] 1234 	mov	dpl,r5
      00047F 8F 83            [24] 1235 	mov	dph,r7
      000481 12r00r00         [24] 1236 	lcall	__modsint
      000484 AB 82            [24] 1237 	mov	r3,dpl
      000486 AA 83            [24] 1238 	mov	r2,dph
      000488 15 81            [12] 1239 	dec	sp
      00048A 15 81            [12] 1240 	dec	sp
      00048C D0 00            [24] 1241 	pop	ar0
      00048E D0 01            [24] 1242 	pop	ar1
      000490 D0 06            [24] 1243 	pop	ar6
                                   1244 ;	walk.c:110: if (!update(&t, &cur, j)) continue;
      000492 C0 00            [24] 1245 	push	ar0
      000494 E5*00            [12] 1246 	mov	a,_bp
      000496 24 06            [12] 1247 	add	a,#0x06
      000498 F8               [12] 1248 	mov	r0,a
      000499 C0 01            [24] 1249 	push	ar1
      00049B E5*00            [12] 1250 	mov	a,_bp
      00049D 24 08            [12] 1251 	add	a,#0x08
      00049F F9               [12] 1252 	mov	r1,a
      0004A0 E6               [12] 1253 	mov	a,@r0
      0004A1 F7               [12] 1254 	mov	@r1,a
      0004A2 09               [12] 1255 	inc	r1
      0004A3 77 00            [12] 1256 	mov	@r1,#0x00
      0004A5 09               [12] 1257 	inc	r1
      0004A6 77 40            [12] 1258 	mov	@r1,#0x40
      0004A8 D0 01            [24] 1259 	pop	ar1
      0004AA E5*00            [12] 1260 	mov	a,_bp
      0004AC 24 05            [12] 1261 	add	a,#0x05
      0004AE F8               [12] 1262 	mov	r0,a
      0004AF 86 04            [24] 1263 	mov	ar4,@r0
      0004B1 7D 00            [12] 1264 	mov	r5,#0x00
      0004B3 7F 40            [12] 1265 	mov	r7,#0x40
      0004B5 D0 00            [24] 1266 	pop	ar0
      0004B7 C0 06            [24] 1267 	push	ar6
      0004B9 C0 01            [24] 1268 	push	ar1
      0004BB C0 00            [24] 1269 	push	ar0
      0004BD C0 03            [24] 1270 	push	ar3
      0004BF C0 02            [24] 1271 	push	ar2
      0004C1 85 00 F0         [24] 1272 	mov	b,ar0
      0004C4 E5*00            [12] 1273 	mov	a,_bp
      0004C6 24 08            [12] 1274 	add	a,#0x08
      0004C8 F8               [12] 1275 	mov	r0,a
      0004C9 E6               [12] 1276 	mov	a,@r0
      0004CA C0 E0            [24] 1277 	push	acc
      0004CC 08               [12] 1278 	inc	r0
      0004CD E6               [12] 1279 	mov	a,@r0
      0004CE C0 E0            [24] 1280 	push	acc
      0004D0 08               [12] 1281 	inc	r0
      0004D1 E6               [12] 1282 	mov	a,@r0
      0004D2 C0 E0            [24] 1283 	push	acc
      0004D4 8C 82            [24] 1284 	mov	dpl,r4
      0004D6 8D 83            [24] 1285 	mov	dph,r5
      0004D8 8F F0            [24] 1286 	mov	b,r7
      0004DA 12r00r1D         [24] 1287 	lcall	_update
      0004DD AD 82            [24] 1288 	mov	r5,dpl
      0004DF AF 83            [24] 1289 	mov	r7,dph
      0004E1 E5 81            [12] 1290 	mov	a,sp
      0004E3 24 FB            [12] 1291 	add	a,#0xfb
      0004E5 F5 81            [12] 1292 	mov	sp,a
      0004E7 D0 00            [24] 1293 	pop	ar0
      0004E9 D0 01            [24] 1294 	pop	ar1
      0004EB D0 06            [24] 1295 	pop	ar6
      0004ED D0 00            [24] 1296 	pop	ar0
      0004EF ED               [12] 1297 	mov	a,r5
      0004F0 4F               [12] 1298 	orl	a,r7
      0004F1 70 03            [24] 1299 	jnz	00166$
      0004F3 02r04r67         [24] 1300 	ljmp	00112$
      0004F6                       1301 00166$:
                                   1302 ;	walk.c:112: if (!stpush(&cur)) {
      0004F6 C0 00            [24] 1303 	push	ar0
      0004F8 E5*00            [12] 1304 	mov	a,_bp
      0004FA 24 04            [12] 1305 	add	a,#0x04
      0004FC F8               [12] 1306 	mov	r0,a
      0004FD 86 02            [24] 1307 	mov	ar2,@r0
      0004FF 7D 00            [12] 1308 	mov	r5,#0x00
      000501 7F 40            [12] 1309 	mov	r7,#0x40
      000503 D0 00            [24] 1310 	pop	ar0
      000505 8A 82            [24] 1311 	mov	dpl,r2
      000507 8D 83            [24] 1312 	mov	dph,r5
      000509 8F F0            [24] 1313 	mov	b,r7
      00050B C0 06            [24] 1314 	push	ar6
      00050D C0 01            [24] 1315 	push	ar1
      00050F C0 00            [24] 1316 	push	ar0
      000511 12r07rD7         [24] 1317 	lcall	_stpush
      000514 E5 82            [12] 1318 	mov	a,dpl
      000516 85 83 F0         [24] 1319 	mov	b,dph
      000519 D0 00            [24] 1320 	pop	ar0
      00051B D0 01            [24] 1321 	pop	ar1
      00051D D0 06            [24] 1322 	pop	ar6
      00051F 45 F0            [12] 1323 	orl	a,b
      000521 70 18            [24] 1324 	jnz	00110$
                                   1325 ;	walk.c:113: (void)puts("Memory error");
      000523 90r00r20         [24] 1326 	mov	dptr,#___str_0
      000526 75 F0 80         [24] 1327 	mov	b,#0x80
      000529 C0 06            [24] 1328 	push	ar6
      00052B C0 01            [24] 1329 	push	ar1
      00052D C0 00            [24] 1330 	push	ar0
      00052F 12r00r00         [24] 1331 	lcall	_puts
      000532 D0 00            [24] 1332 	pop	ar0
      000534 D0 01            [24] 1333 	pop	ar1
      000536 D0 06            [24] 1334 	pop	ar6
                                   1335 ;	walk.c:114: reset();
      000538 12r00r1A         [24] 1336 	lcall	_reset
      00053B                       1337 00110$:
                                   1338 ;	walk.c:116: cur = t;
      00053B C0 00            [24] 1339 	push	ar0
      00053D C0 00            [24] 1340 	push	ar0
      00053F A8*00            [24] 1341 	mov	r0,_bp
      000541 08               [12] 1342 	inc	r0
      000542 C0 01            [24] 1343 	push	ar1
      000544 E5*00            [12] 1344 	mov	a,_bp
      000546 24 08            [12] 1345 	add	a,#0x08
      000548 F9               [12] 1346 	mov	r1,a
      000549 E6               [12] 1347 	mov	a,@r0
      00054A F7               [12] 1348 	mov	@r1,a
      00054B 09               [12] 1349 	inc	r1
      00054C 77 00            [12] 1350 	mov	@r1,#0x00
      00054E 09               [12] 1351 	inc	r1
      00054F 77 40            [12] 1352 	mov	@r1,#0x40
      000551 D0 01            [24] 1353 	pop	ar1
      000553 A8*00            [24] 1354 	mov	r0,_bp
      000555 08               [12] 1355 	inc	r0
      000556 08               [12] 1356 	inc	r0
      000557 86 02            [24] 1357 	mov	ar2,@r0
      000559 7B 00            [12] 1358 	mov	r3,#0x00
      00055B 7F 40            [12] 1359 	mov	r7,#0x40
      00055D D0 00            [24] 1360 	pop	ar0
      00055F C0 06            [24] 1361 	push	ar6
      000561 C0 01            [24] 1362 	push	ar1
      000563 C0 00            [24] 1363 	push	ar0
      000565 74 04            [12] 1364 	mov	a,#0x04
      000567 C0 E0            [24] 1365 	push	acc
      000569 E4               [12] 1366 	clr	a
      00056A C0 E0            [24] 1367 	push	acc
      00056C 85 00 F0         [24] 1368 	mov	b,ar0
      00056F E5*00            [12] 1369 	mov	a,_bp
      000571 24 08            [12] 1370 	add	a,#0x08
      000573 F8               [12] 1371 	mov	r0,a
      000574 E6               [12] 1372 	mov	a,@r0
      000575 C0 E0            [24] 1373 	push	acc
      000577 08               [12] 1374 	inc	r0
      000578 E6               [12] 1375 	mov	a,@r0
      000579 C0 E0            [24] 1376 	push	acc
      00057B 08               [12] 1377 	inc	r0
      00057C E6               [12] 1378 	mov	a,@r0
      00057D C0 E0            [24] 1379 	push	acc
      00057F 8A 82            [24] 1380 	mov	dpl,r2
      000581 8B 83            [24] 1381 	mov	dph,r3
      000583 8F F0            [24] 1382 	mov	b,r7
      000585 12r00r00         [24] 1383 	lcall	___memcpy
      000588 E5 81            [12] 1384 	mov	a,sp
      00058A 24 FB            [12] 1385 	add	a,#0xfb
      00058C F5 81            [12] 1386 	mov	sp,a
      00058E D0 00            [24] 1387 	pop	ar0
      000590 D0 01            [24] 1388 	pop	ar1
      000592 D0 06            [24] 1389 	pop	ar6
                                   1390 ;	walk.c:117: goto process;
      000594 D0 00            [24] 1391 	pop	ar0
      000596 02r03r2F         [24] 1392 	ljmp	00101$
      000599                       1393 00115$:
                                   1394 ;	walk.c:121: printf("\033[%d;%dH.", cur.r + 1, cur.c + 1);
      000599 86 05            [24] 1395 	mov	ar5,@r0
      00059B 08               [12] 1396 	inc	r0
      00059C 86 07            [24] 1397 	mov	ar7,@r0
      00059E 18               [12] 1398 	dec	r0
      00059F 0D               [12] 1399 	inc	r5
      0005A0 BD 00 01         [24] 1400 	cjne	r5,#0x00,00168$
      0005A3 0F               [12] 1401 	inc	r7
      0005A4                       1402 00168$:
      0005A4 87 03            [24] 1403 	mov	ar3,@r1
      0005A6 09               [12] 1404 	inc	r1
      0005A7 87 04            [24] 1405 	mov	ar4,@r1
      0005A9 19               [12] 1406 	dec	r1
      0005AA 0B               [12] 1407 	inc	r3
      0005AB BB 00 01         [24] 1408 	cjne	r3,#0x00,00169$
      0005AE 0C               [12] 1409 	inc	r4
      0005AF                       1410 00169$:
      0005AF C0 06            [24] 1411 	push	ar6
      0005B1 C0 01            [24] 1412 	push	ar1
      0005B3 C0 00            [24] 1413 	push	ar0
      0005B5 C0 05            [24] 1414 	push	ar5
      0005B7 C0 07            [24] 1415 	push	ar7
      0005B9 C0 03            [24] 1416 	push	ar3
      0005BB C0 04            [24] 1417 	push	ar4
      0005BD 74r37            [12] 1418 	mov	a,#___str_2
      0005BF C0 E0            [24] 1419 	push	acc
      0005C1 74s00            [12] 1420 	mov	a,#(___str_2 >> 8)
      0005C3 C0 E0            [24] 1421 	push	acc
      0005C5 74 80            [12] 1422 	mov	a,#0x80
      0005C7 C0 E0            [24] 1423 	push	acc
      0005C9 12r00r00         [24] 1424 	lcall	_printf
      0005CC E5 81            [12] 1425 	mov	a,sp
      0005CE 24 F9            [12] 1426 	add	a,#0xf9
      0005D0 F5 81            [12] 1427 	mov	sp,a
      0005D2 D0 00            [24] 1428 	pop	ar0
      0005D4 D0 01            [24] 1429 	pop	ar1
      0005D6 D0 06            [24] 1430 	pop	ar6
                                   1431 ;	walk.c:123: if (!stpop(&cur)) goto term;
      0005D8 C0 00            [24] 1432 	push	ar0
      0005DA E5*00            [12] 1433 	mov	a,_bp
      0005DC 24 03            [12] 1434 	add	a,#0x03
      0005DE F8               [12] 1435 	mov	r0,a
      0005DF 86 04            [24] 1436 	mov	ar4,@r0
      0005E1 7D 00            [12] 1437 	mov	r5,#0x00
      0005E3 7F 40            [12] 1438 	mov	r7,#0x40
      0005E5 D0 00            [24] 1439 	pop	ar0
      0005E7 8C 82            [24] 1440 	mov	dpl,r4
      0005E9 8D 83            [24] 1441 	mov	dph,r5
      0005EB 8F F0            [24] 1442 	mov	b,r7
      0005ED C0 06            [24] 1443 	push	ar6
      0005EF C0 01            [24] 1444 	push	ar1
      0005F1 C0 00            [24] 1445 	push	ar0
      0005F3 12r08r38         [24] 1446 	lcall	_stpop
      0005F6 E5 82            [12] 1447 	mov	a,dpl
      0005F8 85 83 F0         [24] 1448 	mov	b,dph
      0005FB D0 00            [24] 1449 	pop	ar0
      0005FD D0 01            [24] 1450 	pop	ar1
      0005FF D0 06            [24] 1451 	pop	ar6
      000601 45 F0            [12] 1452 	orl	a,b
      000603 60 03            [24] 1453 	jz	00170$
      000605 02r03rAD         [24] 1454 	ljmp	00125$
      000608                       1455 00170$:
                                   1456 ;	walk.c:127: return;
                                   1457 ;	walk.c:128: }
      000608 85*00 81         [24] 1458 	mov	sp,_bp
      00060B D0*00            [24] 1459 	pop	_bp
      00060D 22               [24] 1460 	ret
                                   1461 ;------------------------------------------------------------
                                   1462 ;Allocation info for local variables in function 'main'
                                   1463 ;------------------------------------------------------------
                                   1464 ;initial                   Allocated to stack - _bp +3
                                   1465 ;i                         Allocated to stack - _bp +7
                                   1466 ;j                         Allocated to registers r4 r5 
                                   1467 ;sloc0                     Allocated to stack - _bp +1
                                   1468 ;R                         Allocated with name '_main_R_65536_64'
                                   1469 ;------------------------------------------------------------
                                   1470 ;	walk.c:130: int main(void) {
                                   1471 ;	-----------------------------------------
                                   1472 ;	 function main
                                   1473 ;	-----------------------------------------
      00060E                       1474 _main:
      00060E C0*00            [24] 1475 	push	_bp
      000610 E5 81            [12] 1476 	mov	a,sp
      000612 F5*00            [12] 1477 	mov	_bp,a
      000614 24 08            [12] 1478 	add	a,#0x08
      000616 F5 81            [12] 1479 	mov	sp,a
                                   1480 ;	walk.c:135: i0 = 1;
      000618 78r00            [12] 1481 	mov	r0,#_i0
      00061A 76 01            [12] 1482 	mov	@r0,#0x01
                                   1483 ;	walk.c:137: IT0 = 1;
                                   1484 ;	assignBit
      00061C D2 88            [12] 1485 	setb	_IT0
                                   1486 ;	walk.c:138: EX0 = 1;
                                   1487 ;	assignBit
      00061E D2 A8            [12] 1488 	setb	_EX0
                                   1489 ;	walk.c:139: EA = 1;
                                   1490 ;	assignBit
      000620 D2 AF            [12] 1491 	setb	_EA
                                   1492 ;	walk.c:141: srand(*R);
      000622 90rB4r02         [24] 1493 	mov	dptr,#_main_R_65536_64
      000625 E0               [24] 1494 	movx	a,@dptr
      000626 FE               [12] 1495 	mov	r6,a
      000627 A3               [24] 1496 	inc	dptr
      000628 E0               [24] 1497 	movx	a,@dptr
      000629 FF               [12] 1498 	mov	r7,a
      00062A 8E 82            [24] 1499 	mov	dpl,r6
      00062C 8F 83            [24] 1500 	mov	dph,r7
      00062E E0               [24] 1501 	movx	a,@dptr
      00062F FE               [12] 1502 	mov	r6,a
      000630 A3               [24] 1503 	inc	dptr
      000631 E0               [24] 1504 	movx	a,@dptr
      000632 FF               [12] 1505 	mov	r7,a
      000633 8E 82            [24] 1506 	mov	dpl,r6
      000635 8F 83            [24] 1507 	mov	dph,r7
      000637 12r00r00         [24] 1508 	lcall	_srand
                                   1509 ;	walk.c:142: stinit();
      00063A 12r07rCE         [24] 1510 	lcall	_stinit
                                   1511 ;	walk.c:144: while (i0) {
      00063D E5*00            [12] 1512 	mov	a,_bp
      00063F 24 03            [12] 1513 	add	a,#0x03
      000641 FF               [12] 1514 	mov	r7,a
      000642 FE               [12] 1515 	mov	r6,a
      000643                       1516 00107$:
      000643 78r00            [12] 1517 	mov	r0,#_i0
      000645 E6               [12] 1518 	mov	a,@r0
      000646 70 03            [24] 1519 	jnz	00168$
      000648 02r07rC0         [24] 1520 	ljmp	00109$
      00064B                       1521 00168$:
                                   1522 ;	walk.c:145: for (i = 0; i < ROWS; i++)
      00064B E5*00            [12] 1523 	mov	a,_bp
      00064D 24 07            [12] 1524 	add	a,#0x07
      00064F F8               [12] 1525 	mov	r0,a
      000650 E4               [12] 1526 	clr	a
      000651 F6               [12] 1527 	mov	@r0,a
      000652 08               [12] 1528 	inc	r0
      000653 F6               [12] 1529 	mov	@r0,a
      000654 7A 00            [12] 1530 	mov	r2,#0x00
      000656 7B 00            [12] 1531 	mov	r3,#0x00
                                   1532 ;	walk.c:146: for (j = 0; j < COLS; j++)
      000658                       1533 00121$:
      000658 A8*00            [24] 1534 	mov	r0,_bp
      00065A 08               [12] 1535 	inc	r0
      00065B EA               [12] 1536 	mov	a,r2
      00065C 24r00            [12] 1537 	add	a,#_g
      00065E F6               [12] 1538 	mov	@r0,a
      00065F EB               [12] 1539 	mov	a,r3
      000660 34s00            [12] 1540 	addc	a,#(_g >> 8)
      000662 08               [12] 1541 	inc	r0
      000663 F6               [12] 1542 	mov	@r0,a
      000664 7C 00            [12] 1543 	mov	r4,#0x00
      000666 7D 00            [12] 1544 	mov	r5,#0x00
      000668                       1545 00110$:
                                   1546 ;	walk.c:147: g[i][j] = 0x55;
      000668 A8*00            [24] 1547 	mov	r0,_bp
      00066A 08               [12] 1548 	inc	r0
      00066B EC               [12] 1549 	mov	a,r4
      00066C 26               [12] 1550 	add	a,@r0
      00066D F5 82            [12] 1551 	mov	dpl,a
      00066F ED               [12] 1552 	mov	a,r5
      000670 08               [12] 1553 	inc	r0
      000671 36               [12] 1554 	addc	a,@r0
      000672 F5 83            [12] 1555 	mov	dph,a
      000674 74 55            [12] 1556 	mov	a,#0x55
      000676 F0               [24] 1557 	movx	@dptr,a
                                   1558 ;	walk.c:146: for (j = 0; j < COLS; j++)
      000677 0C               [12] 1559 	inc	r4
      000678 BC 00 01         [24] 1560 	cjne	r4,#0x00,00169$
      00067B 0D               [12] 1561 	inc	r5
      00067C                       1562 00169$:
      00067C C3               [12] 1563 	clr	c
      00067D EC               [12] 1564 	mov	a,r4
      00067E 94 C0            [12] 1565 	subb	a,#0xc0
      000680 ED               [12] 1566 	mov	a,r5
      000681 64 80            [12] 1567 	xrl	a,#0x80
      000683 94 80            [12] 1568 	subb	a,#0x80
      000685 40 E1            [24] 1569 	jc	00110$
                                   1570 ;	walk.c:145: for (i = 0; i < ROWS; i++)
      000687 74 C0            [12] 1571 	mov	a,#0xc0
      000689 2A               [12] 1572 	add	a,r2
      00068A FA               [12] 1573 	mov	r2,a
      00068B E4               [12] 1574 	clr	a
      00068C 3B               [12] 1575 	addc	a,r3
      00068D FB               [12] 1576 	mov	r3,a
      00068E E5*00            [12] 1577 	mov	a,_bp
      000690 24 07            [12] 1578 	add	a,#0x07
      000692 F8               [12] 1579 	mov	r0,a
      000693 06               [12] 1580 	inc	@r0
      000694 B6 00 02         [24] 1581 	cjne	@r0,#0x00,00171$
      000697 08               [12] 1582 	inc	r0
      000698 06               [12] 1583 	inc	@r0
      000699                       1584 00171$:
      000699 E5*00            [12] 1585 	mov	a,_bp
      00069B 24 07            [12] 1586 	add	a,#0x07
      00069D F8               [12] 1587 	mov	r0,a
      00069E C3               [12] 1588 	clr	c
      00069F E6               [12] 1589 	mov	a,@r0
      0006A0 94 30            [12] 1590 	subb	a,#0x30
      0006A2 08               [12] 1591 	inc	r0
      0006A3 E6               [12] 1592 	mov	a,@r0
      0006A4 64 80            [12] 1593 	xrl	a,#0x80
      0006A6 94 80            [12] 1594 	subb	a,#0x80
      0006A8 40 AE            [24] 1595 	jc	00121$
                                   1596 ;	walk.c:149: puts("\033[2J");
      0006AA 90r00r41         [24] 1597 	mov	dptr,#___str_3
      0006AD 75 F0 80         [24] 1598 	mov	b,#0x80
      0006B0 C0 07            [24] 1599 	push	ar7
      0006B2 C0 06            [24] 1600 	push	ar6
      0006B4 12r00r00         [24] 1601 	lcall	_puts
                                   1602 ;	walk.c:150: initial.r = rand() % ROWS;
      0006B7 E5*00            [12] 1603 	mov	a,_bp
      0006B9 24 03            [12] 1604 	add	a,#0x03
      0006BB F9               [12] 1605 	mov	r1,a
      0006BC C0 01            [24] 1606 	push	ar1
      0006BE 12r00r00         [24] 1607 	lcall	_rand
      0006C1 AC 82            [24] 1608 	mov	r4,dpl
      0006C3 AD 83            [24] 1609 	mov	r5,dph
      0006C5 74 30            [12] 1610 	mov	a,#0x30
      0006C7 C0 E0            [24] 1611 	push	acc
      0006C9 E4               [12] 1612 	clr	a
      0006CA C0 E0            [24] 1613 	push	acc
      0006CC 8C 82            [24] 1614 	mov	dpl,r4
      0006CE 8D 83            [24] 1615 	mov	dph,r5
      0006D0 12r00r00         [24] 1616 	lcall	__modsint
      0006D3 AC 82            [24] 1617 	mov	r4,dpl
      0006D5 AD 83            [24] 1618 	mov	r5,dph
      0006D7 15 81            [12] 1619 	dec	sp
      0006D9 15 81            [12] 1620 	dec	sp
      0006DB D0 01            [24] 1621 	pop	ar1
      0006DD D0 06            [24] 1622 	pop	ar6
      0006DF D0 07            [24] 1623 	pop	ar7
      0006E1 A7 04            [24] 1624 	mov	@r1,ar4
      0006E3 09               [12] 1625 	inc	r1
      0006E4 A7 05            [24] 1626 	mov	@r1,ar5
      0006E6 19               [12] 1627 	dec	r1
                                   1628 ;	walk.c:151: initial.c = rand() % COLS;
      0006E7 74 02            [12] 1629 	mov	a,#0x02
      0006E9 2F               [12] 1630 	add	a,r7
      0006EA F9               [12] 1631 	mov	r1,a
      0006EB C0 07            [24] 1632 	push	ar7
      0006ED C0 06            [24] 1633 	push	ar6
      0006EF C0 01            [24] 1634 	push	ar1
      0006F1 12r00r00         [24] 1635 	lcall	_rand
      0006F4 AC 82            [24] 1636 	mov	r4,dpl
      0006F6 AD 83            [24] 1637 	mov	r5,dph
      0006F8 74 C0            [12] 1638 	mov	a,#0xc0
      0006FA C0 E0            [24] 1639 	push	acc
      0006FC E4               [12] 1640 	clr	a
      0006FD C0 E0            [24] 1641 	push	acc
      0006FF 8C 82            [24] 1642 	mov	dpl,r4
      000701 8D 83            [24] 1643 	mov	dph,r5
      000703 12r00r00         [24] 1644 	lcall	__modsint
      000706 AC 82            [24] 1645 	mov	r4,dpl
      000708 AD 83            [24] 1646 	mov	r5,dph
      00070A 15 81            [12] 1647 	dec	sp
      00070C 15 81            [12] 1648 	dec	sp
      00070E D0 01            [24] 1649 	pop	ar1
      000710 D0 06            [24] 1650 	pop	ar6
      000712 A7 04            [24] 1651 	mov	@r1,ar4
      000714 09               [12] 1652 	inc	r1
      000715 A7 05            [24] 1653 	mov	@r1,ar5
      000717 19               [12] 1654 	dec	r1
                                   1655 ;	walk.c:152: walk(&initial);
      000718 8E 03            [24] 1656 	mov	ar3,r6
      00071A 7C 00            [12] 1657 	mov	r4,#0x00
      00071C 7D 40            [12] 1658 	mov	r5,#0x40
      00071E 8B 82            [24] 1659 	mov	dpl,r3
      000720 8C 83            [24] 1660 	mov	dph,r4
      000722 8D F0            [24] 1661 	mov	b,r5
      000724 C0 06            [24] 1662 	push	ar6
      000726 12r02rBE         [24] 1663 	lcall	_walk
      000729 D0 06            [24] 1664 	pop	ar6
      00072B D0 07            [24] 1665 	pop	ar7
                                   1666 ;	walk.c:154: for (i = 0; i < ROWS; i++)
      00072D E5*00            [12] 1667 	mov	a,_bp
      00072F 24 07            [12] 1668 	add	a,#0x07
      000731 F8               [12] 1669 	mov	r0,a
      000732 E4               [12] 1670 	clr	a
      000733 F6               [12] 1671 	mov	@r0,a
      000734 08               [12] 1672 	inc	r0
      000735 F6               [12] 1673 	mov	@r0,a
      000736 7A 00            [12] 1674 	mov	r2,#0x00
      000738 7B 00            [12] 1675 	mov	r3,#0x00
                                   1676 ;	walk.c:155: for (j = 0; j < COLS; j++)
      00073A                       1677 00126$:
      00073A A8*00            [24] 1678 	mov	r0,_bp
      00073C 08               [12] 1679 	inc	r0
      00073D EA               [12] 1680 	mov	a,r2
      00073E 24r00            [12] 1681 	add	a,#_g
      000740 F6               [12] 1682 	mov	@r0,a
      000741 EB               [12] 1683 	mov	a,r3
      000742 34s00            [12] 1684 	addc	a,#(_g >> 8)
      000744 08               [12] 1685 	inc	r0
      000745 F6               [12] 1686 	mov	@r0,a
      000746 7C 00            [12] 1687 	mov	r4,#0x00
      000748 7D 00            [12] 1688 	mov	r5,#0x00
      00074A                       1689 00114$:
                                   1690 ;	walk.c:156: if (g[i][j] != 0xaa) {
      00074A C0 06            [24] 1691 	push	ar6
      00074C A8*00            [24] 1692 	mov	r0,_bp
      00074E 08               [12] 1693 	inc	r0
      00074F EC               [12] 1694 	mov	a,r4
      000750 26               [12] 1695 	add	a,@r0
      000751 F5 82            [12] 1696 	mov	dpl,a
      000753 ED               [12] 1697 	mov	a,r5
      000754 08               [12] 1698 	inc	r0
      000755 36               [12] 1699 	addc	a,@r0
      000756 F5 83            [12] 1700 	mov	dph,a
      000758 E0               [24] 1701 	movx	a,@dptr
      000759 FE               [12] 1702 	mov	r6,a
      00075A BE AA 04         [24] 1703 	cjne	r6,#0xaa,00173$
      00075D D0 06            [24] 1704 	pop	ar6
      00075F 80 26            [24] 1705 	sjmp	00115$
      000761                       1706 00173$:
      000761 D0 06            [24] 1707 	pop	ar6
                                   1708 ;	walk.c:157: (void)puts("Memory error");
      000763 90r00r20         [24] 1709 	mov	dptr,#___str_0
      000766 75 F0 80         [24] 1710 	mov	b,#0x80
      000769 C0 07            [24] 1711 	push	ar7
      00076B C0 06            [24] 1712 	push	ar6
      00076D C0 05            [24] 1713 	push	ar5
      00076F C0 04            [24] 1714 	push	ar4
      000771 C0 03            [24] 1715 	push	ar3
      000773 C0 02            [24] 1716 	push	ar2
      000775 12r00r00         [24] 1717 	lcall	_puts
      000778 D0 02            [24] 1718 	pop	ar2
      00077A D0 03            [24] 1719 	pop	ar3
      00077C D0 04            [24] 1720 	pop	ar4
      00077E D0 05            [24] 1721 	pop	ar5
      000780 D0 06            [24] 1722 	pop	ar6
      000782 D0 07            [24] 1723 	pop	ar7
                                   1724 ;	walk.c:158: reset();
      000784 12r00r1A         [24] 1725 	lcall	_reset
      000787                       1726 00115$:
                                   1727 ;	walk.c:155: for (j = 0; j < COLS; j++)
      000787 0C               [12] 1728 	inc	r4
      000788 BC 00 01         [24] 1729 	cjne	r4,#0x00,00174$
      00078B 0D               [12] 1730 	inc	r5
      00078C                       1731 00174$:
      00078C C3               [12] 1732 	clr	c
      00078D EC               [12] 1733 	mov	a,r4
      00078E 94 C0            [12] 1734 	subb	a,#0xc0
      000790 ED               [12] 1735 	mov	a,r5
      000791 64 80            [12] 1736 	xrl	a,#0x80
      000793 94 80            [12] 1737 	subb	a,#0x80
      000795 40 B3            [24] 1738 	jc	00114$
                                   1739 ;	walk.c:154: for (i = 0; i < ROWS; i++)
      000797 74 C0            [12] 1740 	mov	a,#0xc0
      000799 2A               [12] 1741 	add	a,r2
      00079A FA               [12] 1742 	mov	r2,a
      00079B E4               [12] 1743 	clr	a
      00079C 3B               [12] 1744 	addc	a,r3
      00079D FB               [12] 1745 	mov	r3,a
      00079E E5*00            [12] 1746 	mov	a,_bp
      0007A0 24 07            [12] 1747 	add	a,#0x07
      0007A2 F8               [12] 1748 	mov	r0,a
      0007A3 06               [12] 1749 	inc	@r0
      0007A4 B6 00 02         [24] 1750 	cjne	@r0,#0x00,00176$
      0007A7 08               [12] 1751 	inc	r0
      0007A8 06               [12] 1752 	inc	@r0
      0007A9                       1753 00176$:
      0007A9 E5*00            [12] 1754 	mov	a,_bp
      0007AB 24 07            [12] 1755 	add	a,#0x07
      0007AD F8               [12] 1756 	mov	r0,a
      0007AE C3               [12] 1757 	clr	c
      0007AF E6               [12] 1758 	mov	a,@r0
      0007B0 94 30            [12] 1759 	subb	a,#0x30
      0007B2 08               [12] 1760 	inc	r0
      0007B3 E6               [12] 1761 	mov	a,@r0
      0007B4 64 80            [12] 1762 	xrl	a,#0x80
      0007B6 94 80            [12] 1763 	subb	a,#0x80
      0007B8 50 03            [24] 1764 	jnc	00177$
      0007BA 02r07r3A         [24] 1765 	ljmp	00126$
      0007BD                       1766 00177$:
      0007BD 02r06r43         [24] 1767 	ljmp	00107$
      0007C0                       1768 00109$:
                                   1769 ;	walk.c:162: EA = 0;
                                   1770 ;	assignBit
      0007C0 C2 AF            [12] 1771 	clr	_EA
                                   1772 ;	walk.c:166: __endasm;
      0007C2 02 00 00         [24] 1773 	ljmp	0
                                   1774 ;	walk.c:168: return 0;
      0007C5 90 00 00         [24] 1775 	mov	dptr,#0x0000
                                   1776 ;	walk.c:169: }
      0007C8 85*00 81         [24] 1777 	mov	sp,_bp
      0007CB D0*00            [24] 1778 	pop	_bp
      0007CD 22               [24] 1779 	ret
                                   1780 ;------------------------------------------------------------
                                   1781 ;Allocation info for local variables in function 'stinit'
                                   1782 ;------------------------------------------------------------
                                   1783 ;	walk.c:171: static void stinit(void) {
                                   1784 ;	-----------------------------------------
                                   1785 ;	 function stinit
                                   1786 ;	-----------------------------------------
      0007CE                       1787 _stinit:
                                   1788 ;	walk.c:172: sp = -1;
      0007CE 90rB4r00         [24] 1789 	mov	dptr,#_sp
      0007D1 74 FF            [12] 1790 	mov	a,#0xff
      0007D3 F0               [24] 1791 	movx	@dptr,a
      0007D4 A3               [24] 1792 	inc	dptr
      0007D5 F0               [24] 1793 	movx	@dptr,a
                                   1794 ;	walk.c:173: return;
                                   1795 ;	walk.c:174: }
      0007D6 22               [24] 1796 	ret
                                   1797 ;------------------------------------------------------------
                                   1798 ;Allocation info for local variables in function 'stpush'
                                   1799 ;------------------------------------------------------------
                                   1800 ;t                         Allocated to registers r5 r6 r7 
                                   1801 ;------------------------------------------------------------
                                   1802 ;	walk.c:176: static int stpush(struct node *t) {
                                   1803 ;	-----------------------------------------
                                   1804 ;	 function stpush
                                   1805 ;	-----------------------------------------
      0007D7                       1806 _stpush:
      0007D7 AD 82            [24] 1807 	mov	r5,dpl
      0007D9 AE 83            [24] 1808 	mov	r6,dph
      0007DB AF F0            [24] 1809 	mov	r7,b
                                   1810 ;	walk.c:177: if (sp == (SMAX - 1)) return 0;
      0007DD 90rB4r00         [24] 1811 	mov	dptr,#_sp
      0007E0 E0               [24] 1812 	movx	a,@dptr
      0007E1 FB               [12] 1813 	mov	r3,a
      0007E2 A3               [24] 1814 	inc	dptr
      0007E3 E0               [24] 1815 	movx	a,@dptr
      0007E4 FC               [12] 1816 	mov	r4,a
      0007E5 BB FF 07         [24] 1817 	cjne	r3,#0xff,00102$
      0007E8 BC 23 04         [24] 1818 	cjne	r4,#0x23,00102$
      0007EB 90 00 00         [24] 1819 	mov	dptr,#0x0000
      0007EE 22               [24] 1820 	ret
      0007EF                       1821 00102$:
                                   1822 ;	walk.c:178: sp++;
      0007EF 90rB4r00         [24] 1823 	mov	dptr,#_sp
      0007F2 74 01            [12] 1824 	mov	a,#0x01
      0007F4 2B               [12] 1825 	add	a,r3
      0007F5 F0               [24] 1826 	movx	@dptr,a
      0007F6 E4               [12] 1827 	clr	a
      0007F7 3C               [12] 1828 	addc	a,r4
      0007F8 A3               [24] 1829 	inc	dptr
      0007F9 F0               [24] 1830 	movx	@dptr,a
                                   1831 ;	walk.c:179: stack[sp] = *t;
      0007FA 90rB4r00         [24] 1832 	mov	dptr,#_sp
      0007FD E0               [24] 1833 	movx	a,@dptr
      0007FE FB               [12] 1834 	mov	r3,a
      0007FF A3               [24] 1835 	inc	dptr
      000800 E0               [24] 1836 	movx	a,@dptr
      000801 FC               [12] 1837 	mov	r4,a
      000802 EB               [12] 1838 	mov	a,r3
      000803 2B               [12] 1839 	add	a,r3
      000804 FB               [12] 1840 	mov	r3,a
      000805 EC               [12] 1841 	mov	a,r4
      000806 33               [12] 1842 	rlc	a
      000807 FC               [12] 1843 	mov	r4,a
      000808 EB               [12] 1844 	mov	a,r3
      000809 2B               [12] 1845 	add	a,r3
      00080A FB               [12] 1846 	mov	r3,a
      00080B EC               [12] 1847 	mov	a,r4
      00080C 33               [12] 1848 	rlc	a
      00080D FC               [12] 1849 	mov	r4,a
      00080E EB               [12] 1850 	mov	a,r3
      00080F 24r00            [12] 1851 	add	a,#_stack
      000811 FB               [12] 1852 	mov	r3,a
      000812 EC               [12] 1853 	mov	a,r4
      000813 34s24            [12] 1854 	addc	a,#(_stack >> 8)
      000815 FC               [12] 1855 	mov	r4,a
      000816 7A 00            [12] 1856 	mov	r2,#0x00
      000818 74 04            [12] 1857 	mov	a,#0x04
      00081A C0 E0            [24] 1858 	push	acc
      00081C E4               [12] 1859 	clr	a
      00081D C0 E0            [24] 1860 	push	acc
      00081F C0 05            [24] 1861 	push	ar5
      000821 C0 06            [24] 1862 	push	ar6
      000823 C0 07            [24] 1863 	push	ar7
      000825 8B 82            [24] 1864 	mov	dpl,r3
      000827 8C 83            [24] 1865 	mov	dph,r4
      000829 8A F0            [24] 1866 	mov	b,r2
      00082B 12r00r00         [24] 1867 	lcall	___memcpy
      00082E E5 81            [12] 1868 	mov	a,sp
      000830 24 FB            [12] 1869 	add	a,#0xfb
      000832 F5 81            [12] 1870 	mov	sp,a
                                   1871 ;	walk.c:180: return 1;
      000834 90 00 01         [24] 1872 	mov	dptr,#0x0001
                                   1873 ;	walk.c:181: }
      000837 22               [24] 1874 	ret
                                   1875 ;------------------------------------------------------------
                                   1876 ;Allocation info for local variables in function 'stpop'
                                   1877 ;------------------------------------------------------------
                                   1878 ;t                         Allocated to registers r5 r6 r7 
                                   1879 ;------------------------------------------------------------
                                   1880 ;	walk.c:183: static int stpop(struct node *t) {
                                   1881 ;	-----------------------------------------
                                   1882 ;	 function stpop
                                   1883 ;	-----------------------------------------
      000838                       1884 _stpop:
      000838 AD 82            [24] 1885 	mov	r5,dpl
      00083A AE 83            [24] 1886 	mov	r6,dph
      00083C AF F0            [24] 1887 	mov	r7,b
                                   1888 ;	walk.c:184: if (sp == -1) return 0;
      00083E 90rB4r00         [24] 1889 	mov	dptr,#_sp
      000841 E0               [24] 1890 	movx	a,@dptr
      000842 FB               [12] 1891 	mov	r3,a
      000843 A3               [24] 1892 	inc	dptr
      000844 E0               [24] 1893 	movx	a,@dptr
      000845 FC               [12] 1894 	mov	r4,a
      000846 BB FF 07         [24] 1895 	cjne	r3,#0xff,00102$
      000849 BC FF 04         [24] 1896 	cjne	r4,#0xff,00102$
      00084C 90 00 00         [24] 1897 	mov	dptr,#0x0000
      00084F 22               [24] 1898 	ret
      000850                       1899 00102$:
                                   1900 ;	walk.c:185: *t = stack[sp];
      000850 EB               [12] 1901 	mov	a,r3
      000851 2B               [12] 1902 	add	a,r3
      000852 FB               [12] 1903 	mov	r3,a
      000853 EC               [12] 1904 	mov	a,r4
      000854 33               [12] 1905 	rlc	a
      000855 FC               [12] 1906 	mov	r4,a
      000856 EB               [12] 1907 	mov	a,r3
      000857 2B               [12] 1908 	add	a,r3
      000858 FB               [12] 1909 	mov	r3,a
      000859 EC               [12] 1910 	mov	a,r4
      00085A 33               [12] 1911 	rlc	a
      00085B FC               [12] 1912 	mov	r4,a
      00085C EB               [12] 1913 	mov	a,r3
      00085D 24r00            [12] 1914 	add	a,#_stack
      00085F FB               [12] 1915 	mov	r3,a
      000860 EC               [12] 1916 	mov	a,r4
      000861 34s24            [12] 1917 	addc	a,#(_stack >> 8)
      000863 FC               [12] 1918 	mov	r4,a
      000864 7A 00            [12] 1919 	mov	r2,#0x00
      000866 74 04            [12] 1920 	mov	a,#0x04
      000868 C0 E0            [24] 1921 	push	acc
      00086A E4               [12] 1922 	clr	a
      00086B C0 E0            [24] 1923 	push	acc
      00086D C0 03            [24] 1924 	push	ar3
      00086F C0 04            [24] 1925 	push	ar4
      000871 C0 02            [24] 1926 	push	ar2
      000873 8D 82            [24] 1927 	mov	dpl,r5
      000875 8E 83            [24] 1928 	mov	dph,r6
      000877 8F F0            [24] 1929 	mov	b,r7
      000879 12r00r00         [24] 1930 	lcall	___memcpy
      00087C E5 81            [12] 1931 	mov	a,sp
      00087E 24 FB            [12] 1932 	add	a,#0xfb
      000880 F5 81            [12] 1933 	mov	sp,a
                                   1934 ;	walk.c:186: sp--;
      000882 90rB4r00         [24] 1935 	mov	dptr,#_sp
      000885 E0               [24] 1936 	movx	a,@dptr
      000886 24 FF            [12] 1937 	add	a,#0xff
      000888 FE               [12] 1938 	mov	r6,a
      000889 A3               [24] 1939 	inc	dptr
      00088A E0               [24] 1940 	movx	a,@dptr
      00088B 34 FF            [12] 1941 	addc	a,#0xff
      00088D FF               [12] 1942 	mov	r7,a
      00088E 90rB4r00         [24] 1943 	mov	dptr,#_sp
      000891 EE               [12] 1944 	mov	a,r6
      000892 F0               [24] 1945 	movx	@dptr,a
      000893 EF               [12] 1946 	mov	a,r7
      000894 A3               [24] 1947 	inc	dptr
      000895 F0               [24] 1948 	movx	@dptr,a
                                   1949 ;	walk.c:187: return 1;
      000896 90 00 01         [24] 1950 	mov	dptr,#0x0001
                                   1951 ;	walk.c:188: }
      000899 22               [24] 1952 	ret
                                   1953 	.area CSEG    (CODE)
                                   1954 	.area CONST   (CODE)
      000000                       1955 _neigh:
      000000 FF FF                 1956 	.byte #0xff, #0xff	; -1
      000002 FF FF                 1957 	.byte #0xff, #0xff	; -1
      000004 FF FF                 1958 	.byte #0xff, #0xff	; -1
      000006 00 00                 1959 	.byte #0x00, #0x00	;  0
      000008 FF FF                 1960 	.byte #0xff, #0xff	; -1
      00000A 01 00                 1961 	.byte #0x01, #0x00	;  1
      00000C 00 00                 1962 	.byte #0x00, #0x00	;  0
      00000E FF FF                 1963 	.byte #0xff, #0xff	; -1
      000010 00 00                 1964 	.byte #0x00, #0x00	;  0
      000012 01 00                 1965 	.byte #0x01, #0x00	;  1
      000014 01 00                 1966 	.byte #0x01, #0x00	;  1
      000016 FF FF                 1967 	.byte #0xff, #0xff	; -1
      000018 01 00                 1968 	.byte #0x01, #0x00	;  1
      00001A 00 00                 1969 	.byte #0x00, #0x00	;  0
      00001C 01 00                 1970 	.byte #0x01, #0x00	;  1
      00001E 01 00                 1971 	.byte #0x01, #0x00	;  1
                                   1972 	.area CONST   (CODE)
      000020                       1973 ___str_0:
      000020 4D 65 6D 6F 72 79 20  1974 	.ascii "Memory error"
             65 72 72 6F 72
      00002C 00                    1975 	.db 0x00
                                   1976 	.area CSEG    (CODE)
                                   1977 	.area CONST   (CODE)
      00002D                       1978 ___str_1:
      00002D 1B                    1979 	.db 0x1b
      00002E 5B 25 64 3B 25 64 48  1980 	.ascii "[%d;%dHo"
             6F
      000036 00                    1981 	.db 0x00
                                   1982 	.area CSEG    (CODE)
                                   1983 	.area CONST   (CODE)
      000037                       1984 ___str_2:
      000037 1B                    1985 	.db 0x1b
      000038 5B 25 64 3B 25 64 48  1986 	.ascii "[%d;%dH."
             2E
      000040 00                    1987 	.db 0x00
                                   1988 	.area CSEG    (CODE)
                                   1989 	.area CONST   (CODE)
      000041                       1990 ___str_3:
      000041 1B                    1991 	.db 0x1b
      000042 5B 32 4A              1992 	.ascii "[2J"
      000045 00                    1993 	.db 0x00
                                   1994 	.area CSEG    (CODE)
                                   1995 	.area XINIT   (CODE)
                                   1996 	.area CABS    (ABS,CODE)
