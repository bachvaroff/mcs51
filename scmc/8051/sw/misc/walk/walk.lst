                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
      000000                        319 _g:
      000000                        320 	.ds 9216
      002400                        321 _stack:
      002400                        322 	.ds 36864
      00B400                        323 _sp:
      00B400                        324 	.ds 2
      00B402                        325 _main_R_65536_65:
      00B402                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  351 	ljmp	_int0
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 ;------------------------------------------------------------
                                    366 ;Allocation info for local variables in function 'main'
                                    367 ;------------------------------------------------------------
                                    368 ;initial                   Allocated to stack - _bp +3
                                    369 ;i                         Allocated to stack - _bp +7
                                    370 ;j                         Allocated to registers r4 r5 
                                    371 ;sloc0                     Allocated to stack - _bp +1
                                    372 ;R                         Allocated with name '_main_R_65536_65'
                                    373 ;------------------------------------------------------------
                                    374 ;	walk.c:137: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  375 	mov	dptr,#_main_R_65536_65
      000003 74 FE            [12]  376 	mov	a,#0xfe
      000005 F0               [24]  377 	movx	@dptr,a
      000006 04               [12]  378 	inc	a
      000007 A3               [24]  379 	inc	dptr
      000008 F0               [24]  380 	movx	@dptr,a
                                    381 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  382 	ljmp	__sdcc_program_startup
                                    383 ;--------------------------------------------------------
                                    384 ; Home
                                    385 ;--------------------------------------------------------
                                    386 	.area HOME    (CODE)
                                    387 	.area HOME    (CODE)
      000006                        388 __sdcc_program_startup:
      000006 02r07r1A         [24]  389 	ljmp	_main
                                    390 ;	return from main will return to caller
                                    391 ;--------------------------------------------------------
                                    392 ; code
                                    393 ;--------------------------------------------------------
                                    394 	.area CSEG    (CODE)
                                    395 ;------------------------------------------------------------
                                    396 ;Allocation info for local variables in function 'putchar'
                                    397 ;------------------------------------------------------------
                                    398 ;c                         Allocated to registers 
                                    399 ;------------------------------------------------------------
                                    400 ;	walk.c:8: int putchar(int c) __naked {
                                    401 ;	-----------------------------------------
                                    402 ;	 function putchar
                                    403 ;	-----------------------------------------
      000000                        404 _putchar:
                                    405 ;	naked function: no prologue.
                                    406 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  407 	mov	a, dpl
      000002 02 00 30         [24]  408 	ljmp	0x0030
                                    409 ;	walk.c:14: }
                                    410 ;	naked function: no epilogue.
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'getchar'
                                    413 ;------------------------------------------------------------
                                    414 ;	walk.c:16: int getchar(void) __naked {
                                    415 ;	-----------------------------------------
                                    416 ;	 function getchar
                                    417 ;	-----------------------------------------
      000005                        418 _getchar:
                                    419 ;	naked function: no prologue.
                                    420 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  421 	lcall	0x0032
      000008 F5 82            [12]  422 	mov	dpl, a
      00000A 75 83 00         [24]  423 	mov	dph, #0
      00000D 22               [24]  424 	ret
                                    425 ;	walk.c:23: }
                                    426 ;	naked function: no epilogue.
                                    427 ;------------------------------------------------------------
                                    428 ;Allocation info for local variables in function 'int0'
                                    429 ;------------------------------------------------------------
                                    430 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    431 ;	-----------------------------------------
                                    432 ;	 function int0
                                    433 ;	-----------------------------------------
      00000E                        434 _int0:
                           00000F   435 	ar7 = 0x0f
                           00000E   436 	ar6 = 0x0e
                           00000D   437 	ar5 = 0x0d
                           00000C   438 	ar4 = 0x0c
                           00000B   439 	ar3 = 0x0b
                           00000A   440 	ar2 = 0x0a
                           000009   441 	ar1 = 0x09
                           000008   442 	ar0 = 0x08
      00000E C0 D0            [24]  443 	push	psw
      000010 75 D0 08         [24]  444 	mov	psw,#0x08
                                    445 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  446 	mov	r0,#_i0
      000015 76 00            [12]  447 	mov	@r0,#0x00
                                    448 ;	walk.c:29: }
      000017 D0 D0            [24]  449 	pop	psw
      000019 32               [24]  450 	reti
                                    451 ;	eliminated unneeded push/pop dpl
                                    452 ;	eliminated unneeded push/pop dph
                                    453 ;	eliminated unneeded push/pop b
                                    454 ;	eliminated unneeded push/pop acc
                                    455 ;------------------------------------------------------------
                                    456 ;Allocation info for local variables in function 'reset'
                                    457 ;------------------------------------------------------------
                                    458 ;	walk.c:31: static void reset(void) __naked {
                                    459 ;	-----------------------------------------
                                    460 ;	 function reset
                                    461 ;	-----------------------------------------
      00001A                        462 _reset:
                                    463 ;	naked function: no prologue.
                                    464 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  465 	orl	pcon, #2
                                    466 ;	walk.c:35: }
                                    467 ;	naked function: no epilogue.
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'update'
                                    470 ;------------------------------------------------------------
                                    471 ;cur                       Allocated to stack - _bp -5
                                    472 ;j                         Allocated to stack - _bp -7
                                    473 ;t                         Allocated to stack - _bp +1
                                    474 ;sloc0                     Allocated to stack - _bp +4
                                    475 ;sloc1                     Allocated to stack - _bp +6
                                    476 ;sloc2                     Allocated to stack - _bp +8
                                    477 ;------------------------------------------------------------
                                    478 ;	walk.c:74: static int update(struct node *t, struct node *cur, int j) {
                                    479 ;	-----------------------------------------
                                    480 ;	 function update
                                    481 ;	-----------------------------------------
      00001D                        482 _update:
                           000007   483 	ar7 = 0x07
                           000006   484 	ar6 = 0x06
                           000005   485 	ar5 = 0x05
                           000004   486 	ar4 = 0x04
                           000003   487 	ar3 = 0x03
                           000002   488 	ar2 = 0x02
                           000001   489 	ar1 = 0x01
                           000000   490 	ar0 = 0x00
      00001D C0*00            [24]  491 	push	_bp
      00001F 85 81*00         [24]  492 	mov	_bp,sp
      000022 C0 82            [24]  493 	push	dpl
      000024 C0 83            [24]  494 	push	dph
      000026 C0 F0            [24]  495 	push	b
      000028 E5 81            [12]  496 	mov	a,sp
      00002A 24 07            [12]  497 	add	a,#0x07
      00002C F5 81            [12]  498 	mov	sp,a
                                    499 ;	walk.c:75: t->r = cur->r + neigh[j].r;
      00002E E5*00            [12]  500 	mov	a,_bp
      000030 24 FB            [12]  501 	add	a,#0xfb
      000032 F8               [12]  502 	mov	r0,a
      000033 86 02            [24]  503 	mov	ar2,@r0
      000035 08               [12]  504 	inc	r0
      000036 86 03            [24]  505 	mov	ar3,@r0
      000038 08               [12]  506 	inc	r0
      000039 86 04            [24]  507 	mov	ar4,@r0
      00003B 8A 82            [24]  508 	mov	dpl,r2
      00003D 8B 83            [24]  509 	mov	dph,r3
      00003F 8C F0            [24]  510 	mov	b,r4
      000041 E5*00            [12]  511 	mov	a,_bp
      000043 24 04            [12]  512 	add	a,#0x04
      000045 F8               [12]  513 	mov	r0,a
      000046 12r00r00         [24]  514 	lcall	__gptrget
      000049 F6               [12]  515 	mov	@r0,a
      00004A A3               [24]  516 	inc	dptr
      00004B 12r00r00         [24]  517 	lcall	__gptrget
      00004E 08               [12]  518 	inc	r0
      00004F F6               [12]  519 	mov	@r0,a
      000050 E5*00            [12]  520 	mov	a,_bp
      000052 24 F9            [12]  521 	add	a,#0xf9
      000054 F8               [12]  522 	mov	r0,a
      000055 E5*00            [12]  523 	mov	a,_bp
      000057 24 06            [12]  524 	add	a,#0x06
      000059 F9               [12]  525 	mov	r1,a
      00005A E6               [12]  526 	mov	a,@r0
      00005B 26               [12]  527 	add	a,@r0
      00005C F7               [12]  528 	mov	@r1,a
      00005D 08               [12]  529 	inc	r0
      00005E E6               [12]  530 	mov	a,@r0
      00005F 33               [12]  531 	rlc	a
      000060 09               [12]  532 	inc	r1
      000061 F7               [12]  533 	mov	@r1,a
      000062 19               [12]  534 	dec	r1
      000063 E7               [12]  535 	mov	a,@r1
      000064 27               [12]  536 	add	a,@r1
      000065 F7               [12]  537 	mov	@r1,a
      000066 09               [12]  538 	inc	r1
      000067 E7               [12]  539 	mov	a,@r1
      000068 33               [12]  540 	rlc	a
      000069 F7               [12]  541 	mov	@r1,a
      00006A E5*00            [12]  542 	mov	a,_bp
      00006C 24 06            [12]  543 	add	a,#0x06
      00006E F8               [12]  544 	mov	r0,a
      00006F E6               [12]  545 	mov	a,@r0
      000070 24r00            [12]  546 	add	a,#_neigh
      000072 F5 82            [12]  547 	mov	dpl,a
      000074 08               [12]  548 	inc	r0
      000075 E6               [12]  549 	mov	a,@r0
      000076 34s00            [12]  550 	addc	a,#(_neigh >> 8)
      000078 F5 83            [12]  551 	mov	dph,a
      00007A E4               [12]  552 	clr	a
      00007B 93               [24]  553 	movc	a,@a+dptr
      00007C FF               [12]  554 	mov	r7,a
      00007D A3               [24]  555 	inc	dptr
      00007E E4               [12]  556 	clr	a
      00007F 93               [24]  557 	movc	a,@a+dptr
      000080 FE               [12]  558 	mov	r6,a
      000081 E5*00            [12]  559 	mov	a,_bp
      000083 24 04            [12]  560 	add	a,#0x04
      000085 F8               [12]  561 	mov	r0,a
      000086 EF               [12]  562 	mov	a,r7
      000087 26               [12]  563 	add	a,@r0
      000088 FF               [12]  564 	mov	r7,a
      000089 EE               [12]  565 	mov	a,r6
      00008A 08               [12]  566 	inc	r0
      00008B 36               [12]  567 	addc	a,@r0
      00008C FE               [12]  568 	mov	r6,a
      00008D A8*00            [24]  569 	mov	r0,_bp
      00008F 08               [12]  570 	inc	r0
      000090 86 82            [24]  571 	mov	dpl,@r0
      000092 08               [12]  572 	inc	r0
      000093 86 83            [24]  573 	mov	dph,@r0
      000095 08               [12]  574 	inc	r0
      000096 86 F0            [24]  575 	mov	b,@r0
      000098 EF               [12]  576 	mov	a,r7
      000099 12r00r00         [24]  577 	lcall	__gptrput
      00009C A3               [24]  578 	inc	dptr
      00009D EE               [12]  579 	mov	a,r6
      00009E 12r00r00         [24]  580 	lcall	__gptrput
                                    581 ;	walk.c:76: t->c = cur->c + neigh[j].c;
      0000A1 A8*00            [24]  582 	mov	r0,_bp
      0000A3 08               [12]  583 	inc	r0
      0000A4 E5*00            [12]  584 	mov	a,_bp
      0000A6 24 08            [12]  585 	add	a,#0x08
      0000A8 F9               [12]  586 	mov	r1,a
      0000A9 74 02            [12]  587 	mov	a,#0x02
      0000AB 26               [12]  588 	add	a,@r0
      0000AC F7               [12]  589 	mov	@r1,a
      0000AD E4               [12]  590 	clr	a
      0000AE 08               [12]  591 	inc	r0
      0000AF 36               [12]  592 	addc	a,@r0
      0000B0 09               [12]  593 	inc	r1
      0000B1 F7               [12]  594 	mov	@r1,a
      0000B2 08               [12]  595 	inc	r0
      0000B3 09               [12]  596 	inc	r1
      0000B4 E6               [12]  597 	mov	a,@r0
      0000B5 F7               [12]  598 	mov	@r1,a
      0000B6 74 02            [12]  599 	mov	a,#0x02
      0000B8 2A               [12]  600 	add	a,r2
      0000B9 FA               [12]  601 	mov	r2,a
      0000BA E4               [12]  602 	clr	a
      0000BB 3B               [12]  603 	addc	a,r3
      0000BC FB               [12]  604 	mov	r3,a
      0000BD 8A 82            [24]  605 	mov	dpl,r2
      0000BF 8B 83            [24]  606 	mov	dph,r3
      0000C1 8C F0            [24]  607 	mov	b,r4
      0000C3 12r00r00         [24]  608 	lcall	__gptrget
      0000C6 FA               [12]  609 	mov	r2,a
      0000C7 A3               [24]  610 	inc	dptr
      0000C8 12r00r00         [24]  611 	lcall	__gptrget
      0000CB FB               [12]  612 	mov	r3,a
      0000CC E5*00            [12]  613 	mov	a,_bp
      0000CE 24 06            [12]  614 	add	a,#0x06
      0000D0 F8               [12]  615 	mov	r0,a
      0000D1 E6               [12]  616 	mov	a,@r0
      0000D2 24r00            [12]  617 	add	a,#_neigh
      0000D4 FC               [12]  618 	mov	r4,a
      0000D5 08               [12]  619 	inc	r0
      0000D6 E6               [12]  620 	mov	a,@r0
      0000D7 34s00            [12]  621 	addc	a,#(_neigh >> 8)
      0000D9 FD               [12]  622 	mov	r5,a
      0000DA 8C 82            [24]  623 	mov	dpl,r4
      0000DC 8D 83            [24]  624 	mov	dph,r5
      0000DE A3               [24]  625 	inc	dptr
      0000DF A3               [24]  626 	inc	dptr
      0000E0 E4               [12]  627 	clr	a
      0000E1 93               [24]  628 	movc	a,@a+dptr
      0000E2 FC               [12]  629 	mov	r4,a
      0000E3 A3               [24]  630 	inc	dptr
      0000E4 E4               [12]  631 	clr	a
      0000E5 93               [24]  632 	movc	a,@a+dptr
      0000E6 FD               [12]  633 	mov	r5,a
      0000E7 EC               [12]  634 	mov	a,r4
      0000E8 2A               [12]  635 	add	a,r2
      0000E9 FA               [12]  636 	mov	r2,a
      0000EA ED               [12]  637 	mov	a,r5
      0000EB 3B               [12]  638 	addc	a,r3
      0000EC FB               [12]  639 	mov	r3,a
      0000ED E5*00            [12]  640 	mov	a,_bp
      0000EF 24 08            [12]  641 	add	a,#0x08
      0000F1 F8               [12]  642 	mov	r0,a
      0000F2 86 82            [24]  643 	mov	dpl,@r0
      0000F4 08               [12]  644 	inc	r0
      0000F5 86 83            [24]  645 	mov	dph,@r0
      0000F7 08               [12]  646 	inc	r0
      0000F8 86 F0            [24]  647 	mov	b,@r0
      0000FA EA               [12]  648 	mov	a,r2
      0000FB 12r00r00         [24]  649 	lcall	__gptrput
      0000FE A3               [24]  650 	inc	dptr
      0000FF EB               [12]  651 	mov	a,r3
      000100 12r00r00         [24]  652 	lcall	__gptrput
                                    653 ;	walk.c:78: if (t->r < 0) t->r += ROWS;
      000103 A8*00            [24]  654 	mov	r0,_bp
      000105 08               [12]  655 	inc	r0
      000106 86 82            [24]  656 	mov	dpl,@r0
      000108 08               [12]  657 	inc	r0
      000109 86 83            [24]  658 	mov	dph,@r0
      00010B 08               [12]  659 	inc	r0
      00010C 86 F0            [24]  660 	mov	b,@r0
      00010E 12r00r00         [24]  661 	lcall	__gptrget
      000111 FD               [12]  662 	mov	r5,a
      000112 A3               [24]  663 	inc	dptr
      000113 12r00r00         [24]  664 	lcall	__gptrget
      000116 FC               [12]  665 	mov	r4,a
      000117 EE               [12]  666 	mov	a,r6
      000118 30 E7 1D         [24]  667 	jnb	acc.7,00104$
      00011B 74 30            [12]  668 	mov	a,#0x30
      00011D 2D               [12]  669 	add	a,r5
      00011E FF               [12]  670 	mov	r7,a
      00011F E4               [12]  671 	clr	a
      000120 3C               [12]  672 	addc	a,r4
      000121 FE               [12]  673 	mov	r6,a
      000122 A8*00            [24]  674 	mov	r0,_bp
      000124 08               [12]  675 	inc	r0
      000125 86 82            [24]  676 	mov	dpl,@r0
      000127 08               [12]  677 	inc	r0
      000128 86 83            [24]  678 	mov	dph,@r0
      00012A 08               [12]  679 	inc	r0
      00012B 86 F0            [24]  680 	mov	b,@r0
      00012D EF               [12]  681 	mov	a,r7
      00012E 12r00r00         [24]  682 	lcall	__gptrput
      000131 A3               [24]  683 	inc	dptr
      000132 EE               [12]  684 	mov	a,r6
      000133 12r00r00         [24]  685 	lcall	__gptrput
      000136 80 27            [24]  686 	sjmp	00105$
      000138                        687 00104$:
                                    688 ;	walk.c:79: else if (t->r >= ROWS) t->r -= ROWS;
      000138 C3               [12]  689 	clr	c
      000139 ED               [12]  690 	mov	a,r5
      00013A 94 30            [12]  691 	subb	a,#0x30
      00013C EC               [12]  692 	mov	a,r4
      00013D 64 80            [12]  693 	xrl	a,#0x80
      00013F 94 80            [12]  694 	subb	a,#0x80
      000141 40 1C            [24]  695 	jc	00105$
      000143 ED               [12]  696 	mov	a,r5
      000144 24 D0            [12]  697 	add	a,#0xd0
      000146 FD               [12]  698 	mov	r5,a
      000147 EC               [12]  699 	mov	a,r4
      000148 34 FF            [12]  700 	addc	a,#0xff
      00014A FC               [12]  701 	mov	r4,a
      00014B A8*00            [24]  702 	mov	r0,_bp
      00014D 08               [12]  703 	inc	r0
      00014E 86 82            [24]  704 	mov	dpl,@r0
      000150 08               [12]  705 	inc	r0
      000151 86 83            [24]  706 	mov	dph,@r0
      000153 08               [12]  707 	inc	r0
      000154 86 F0            [24]  708 	mov	b,@r0
      000156 ED               [12]  709 	mov	a,r5
      000157 12r00r00         [24]  710 	lcall	__gptrput
      00015A A3               [24]  711 	inc	dptr
      00015B EC               [12]  712 	mov	a,r4
      00015C 12r00r00         [24]  713 	lcall	__gptrput
      00015F                        714 00105$:
                                    715 ;	walk.c:80: if (t->c < 0) t->c += COLS;
      00015F E5*00            [12]  716 	mov	a,_bp
      000161 24 08            [12]  717 	add	a,#0x08
      000163 F8               [12]  718 	mov	r0,a
      000164 86 82            [24]  719 	mov	dpl,@r0
      000166 08               [12]  720 	inc	r0
      000167 86 83            [24]  721 	mov	dph,@r0
      000169 08               [12]  722 	inc	r0
      00016A 86 F0            [24]  723 	mov	b,@r0
      00016C 12r00r00         [24]  724 	lcall	__gptrget
      00016F A3               [24]  725 	inc	dptr
      000170 12r00r00         [24]  726 	lcall	__gptrget
      000173 30 E7 35         [24]  727 	jnb	acc.7,00109$
      000176 E5*00            [12]  728 	mov	a,_bp
      000178 24 08            [12]  729 	add	a,#0x08
      00017A F8               [12]  730 	mov	r0,a
      00017B 86 82            [24]  731 	mov	dpl,@r0
      00017D 08               [12]  732 	inc	r0
      00017E 86 83            [24]  733 	mov	dph,@r0
      000180 08               [12]  734 	inc	r0
      000181 86 F0            [24]  735 	mov	b,@r0
      000183 12r00r00         [24]  736 	lcall	__gptrget
      000186 FE               [12]  737 	mov	r6,a
      000187 A3               [24]  738 	inc	dptr
      000188 12r00r00         [24]  739 	lcall	__gptrget
      00018B FF               [12]  740 	mov	r7,a
      00018C 74 C0            [12]  741 	mov	a,#0xc0
      00018E 2E               [12]  742 	add	a,r6
      00018F FE               [12]  743 	mov	r6,a
      000190 E4               [12]  744 	clr	a
      000191 3F               [12]  745 	addc	a,r7
      000192 FF               [12]  746 	mov	r7,a
      000193 E5*00            [12]  747 	mov	a,_bp
      000195 24 08            [12]  748 	add	a,#0x08
      000197 F8               [12]  749 	mov	r0,a
      000198 86 82            [24]  750 	mov	dpl,@r0
      00019A 08               [12]  751 	inc	r0
      00019B 86 83            [24]  752 	mov	dph,@r0
      00019D 08               [12]  753 	inc	r0
      00019E 86 F0            [24]  754 	mov	b,@r0
      0001A0 EE               [12]  755 	mov	a,r6
      0001A1 12r00r00         [24]  756 	lcall	__gptrput
      0001A4 A3               [24]  757 	inc	dptr
      0001A5 EF               [12]  758 	mov	a,r7
      0001A6 12r00r00         [24]  759 	lcall	__gptrput
      0001A9 80 55            [24]  760 	sjmp	00110$
      0001AB                        761 00109$:
                                    762 ;	walk.c:81: else if (t->c >= COLS) t->c -= COLS;
      0001AB E5*00            [12]  763 	mov	a,_bp
      0001AD 24 08            [12]  764 	add	a,#0x08
      0001AF F8               [12]  765 	mov	r0,a
      0001B0 86 82            [24]  766 	mov	dpl,@r0
      0001B2 08               [12]  767 	inc	r0
      0001B3 86 83            [24]  768 	mov	dph,@r0
      0001B5 08               [12]  769 	inc	r0
      0001B6 86 F0            [24]  770 	mov	b,@r0
      0001B8 12r00r00         [24]  771 	lcall	__gptrget
      0001BB FE               [12]  772 	mov	r6,a
      0001BC A3               [24]  773 	inc	dptr
      0001BD 12r00r00         [24]  774 	lcall	__gptrget
      0001C0 FF               [12]  775 	mov	r7,a
      0001C1 C3               [12]  776 	clr	c
      0001C2 EE               [12]  777 	mov	a,r6
      0001C3 94 C0            [12]  778 	subb	a,#0xc0
      0001C5 EF               [12]  779 	mov	a,r7
      0001C6 64 80            [12]  780 	xrl	a,#0x80
      0001C8 94 80            [12]  781 	subb	a,#0x80
      0001CA 40 34            [24]  782 	jc	00110$
      0001CC E5*00            [12]  783 	mov	a,_bp
      0001CE 24 08            [12]  784 	add	a,#0x08
      0001D0 F8               [12]  785 	mov	r0,a
      0001D1 86 82            [24]  786 	mov	dpl,@r0
      0001D3 08               [12]  787 	inc	r0
      0001D4 86 83            [24]  788 	mov	dph,@r0
      0001D6 08               [12]  789 	inc	r0
      0001D7 86 F0            [24]  790 	mov	b,@r0
      0001D9 12r00r00         [24]  791 	lcall	__gptrget
      0001DC FE               [12]  792 	mov	r6,a
      0001DD A3               [24]  793 	inc	dptr
      0001DE 12r00r00         [24]  794 	lcall	__gptrget
      0001E1 FF               [12]  795 	mov	r7,a
      0001E2 EE               [12]  796 	mov	a,r6
      0001E3 24 40            [12]  797 	add	a,#0x40
      0001E5 FE               [12]  798 	mov	r6,a
      0001E6 EF               [12]  799 	mov	a,r7
      0001E7 34 FF            [12]  800 	addc	a,#0xff
      0001E9 FF               [12]  801 	mov	r7,a
      0001EA E5*00            [12]  802 	mov	a,_bp
      0001EC 24 08            [12]  803 	add	a,#0x08
      0001EE F8               [12]  804 	mov	r0,a
      0001EF 86 82            [24]  805 	mov	dpl,@r0
      0001F1 08               [12]  806 	inc	r0
      0001F2 86 83            [24]  807 	mov	dph,@r0
      0001F4 08               [12]  808 	inc	r0
      0001F5 86 F0            [24]  809 	mov	b,@r0
      0001F7 EE               [12]  810 	mov	a,r6
      0001F8 12r00r00         [24]  811 	lcall	__gptrput
      0001FB A3               [24]  812 	inc	dptr
      0001FC EF               [12]  813 	mov	a,r7
      0001FD 12r00r00         [24]  814 	lcall	__gptrput
      000200                        815 00110$:
                                    816 ;	walk.c:83: return 1;
      000200 90 00 01         [24]  817 	mov	dptr,#0x0001
                                    818 ;	walk.c:84: }
      000203 85*00 81         [24]  819 	mov	sp,_bp
      000206 D0*00            [24]  820 	pop	_bp
      000208 22               [24]  821 	ret
                                    822 ;------------------------------------------------------------
                                    823 ;Allocation info for local variables in function 'walk'
                                    824 ;------------------------------------------------------------
                                    825 ;nstart                    Allocated to registers 
                                    826 ;cur                       Allocated to stack - _bp +12
                                    827 ;t                         Allocated to stack - _bp +16
                                    828 ;j                         Allocated to stack - _bp +20
                                    829 ;f                         Allocated to stack - _bp +22
                                    830 ;sloc0                     Allocated to stack - _bp +1
                                    831 ;sloc1                     Allocated to stack - _bp +2
                                    832 ;sloc2                     Allocated to stack - _bp +3
                                    833 ;sloc3                     Allocated to stack - _bp +4
                                    834 ;sloc4                     Allocated to stack - _bp +20
                                    835 ;sloc5                     Allocated to stack - _bp +5
                                    836 ;sloc6                     Allocated to stack - _bp +22
                                    837 ;sloc7                     Allocated to stack - _bp +6
                                    838 ;sloc8                     Allocated to stack - _bp +7
                                    839 ;sloc9                     Allocated to stack - _bp +8
                                    840 ;sloc10                    Allocated to stack - _bp +11
                                    841 ;------------------------------------------------------------
                                    842 ;	walk.c:86: static void walk(struct node *nstart) {
                                    843 ;	-----------------------------------------
                                    844 ;	 function walk
                                    845 ;	-----------------------------------------
      000209                        846 _walk:
      000209 C0*00            [24]  847 	push	_bp
      00020B E5 81            [12]  848 	mov	a,sp
      00020D F5*00            [12]  849 	mov	_bp,a
      00020F 24 17            [12]  850 	add	a,#0x17
      000211 F5 81            [12]  851 	mov	sp,a
      000213 AD 82            [24]  852 	mov	r5,dpl
      000215 AE 83            [24]  853 	mov	r6,dph
      000217 AF F0            [24]  854 	mov	r7,b
                                    855 ;	walk.c:90: cur = *nstart;
      000219 E5*00            [12]  856 	mov	a,_bp
      00021B 24 0C            [12]  857 	add	a,#0x0c
      00021D F9               [12]  858 	mov	r1,a
      00021E FA               [12]  859 	mov	r2,a
      00021F 7B 00            [12]  860 	mov	r3,#0x00
      000221 7C 40            [12]  861 	mov	r4,#0x40
      000223 C0 01            [24]  862 	push	ar1
      000225 74 04            [12]  863 	mov	a,#0x04
      000227 C0 E0            [24]  864 	push	acc
      000229 E4               [12]  865 	clr	a
      00022A C0 E0            [24]  866 	push	acc
      00022C C0 05            [24]  867 	push	ar5
      00022E C0 06            [24]  868 	push	ar6
      000230 C0 07            [24]  869 	push	ar7
      000232 8A 82            [24]  870 	mov	dpl,r2
      000234 8B 83            [24]  871 	mov	dph,r3
      000236 8C F0            [24]  872 	mov	b,r4
      000238 12r00r00         [24]  873 	lcall	___memcpy
      00023B E5 81            [12]  874 	mov	a,sp
      00023D 24 FB            [12]  875 	add	a,#0xfb
      00023F F5 81            [12]  876 	mov	sp,a
      000241 D0 01            [24]  877 	pop	ar1
                                    878 ;	walk.c:92: process:
      000243 E5*00            [12]  879 	mov	a,_bp
      000245 24 07            [12]  880 	add	a,#0x07
      000247 F8               [12]  881 	mov	r0,a
      000248 A6 01            [24]  882 	mov	@r0,ar1
      00024A E5*00            [12]  883 	mov	a,_bp
      00024C 24 10            [12]  884 	add	a,#0x10
      00024E F8               [12]  885 	mov	r0,a
      00024F C0 00            [24]  886 	push	ar0
      000251 E5*00            [12]  887 	mov	a,_bp
      000253 24 06            [12]  888 	add	a,#0x06
      000255 F8               [12]  889 	mov	r0,a
      000256 A6 01            [24]  890 	mov	@r0,ar1
      000258 D0 00            [24]  891 	pop	ar0
      00025A 74 02            [12]  892 	mov	a,#0x02
      00025C 28               [12]  893 	add	a,r0
      00025D FD               [12]  894 	mov	r5,a
      00025E C0 00            [24]  895 	push	ar0
      000260 E5*00            [12]  896 	mov	a,_bp
      000262 24 0B            [12]  897 	add	a,#0x0b
      000264 F8               [12]  898 	mov	r0,a
      000265 A6 01            [24]  899 	mov	@r0,ar1
      000267 D0 00            [24]  900 	pop	ar0
      000269 88 03            [24]  901 	mov	ar3,r0
      00026B C0 00            [24]  902 	push	ar0
      00026D E5*00            [12]  903 	mov	a,_bp
      00026F 24 05            [12]  904 	add	a,#0x05
      000271 F8               [12]  905 	mov	r0,a
      000272 A6 05            [24]  906 	mov	@r0,ar5
      000274 A8*00            [24]  907 	mov	r0,_bp
      000276 08               [12]  908 	inc	r0
      000277 A6 01            [24]  909 	mov	@r0,ar1
      000279 D0 00            [24]  910 	pop	ar0
      00027B C0 01            [24]  911 	push	ar1
      00027D A9*00            [24]  912 	mov	r1,_bp
      00027F 09               [12]  913 	inc	r1
      000280 09               [12]  914 	inc	r1
      000281 A7 00            [24]  915 	mov	@r1,ar0
      000283 D0 01            [24]  916 	pop	ar1
      000285 C0 00            [24]  917 	push	ar0
      000287 E5*00            [12]  918 	mov	a,_bp
      000289 24 03            [12]  919 	add	a,#0x03
      00028B F8               [12]  920 	mov	r0,a
      00028C A6 01            [24]  921 	mov	@r0,ar1
      00028E E5*00            [12]  922 	mov	a,_bp
      000290 24 04            [12]  923 	add	a,#0x04
      000292 F8               [12]  924 	mov	r0,a
      000293 74 02            [12]  925 	mov	a,#0x02
      000295 29               [12]  926 	add	a,r1
      000296 F6               [12]  927 	mov	@r0,a
      000297 D0 00            [24]  928 	pop	ar0
      000299                        929 00101$:
                                    930 ;	walk.c:93: g[cur.r][cur.c] = 0xaa;
      000299 87 02            [24]  931 	mov	ar2,@r1
      00029B 09               [12]  932 	inc	r1
      00029C 87 06            [24]  933 	mov	ar6,@r1
      00029E 19               [12]  934 	dec	r1
      00029F C0 05            [24]  935 	push	ar5
      0002A1 C0 03            [24]  936 	push	ar3
      0002A3 C0 01            [24]  937 	push	ar1
      0002A5 C0 00            [24]  938 	push	ar0
      0002A7 C0 02            [24]  939 	push	ar2
      0002A9 C0 06            [24]  940 	push	ar6
      0002AB 90 00 C0         [24]  941 	mov	dptr,#0x00c0
      0002AE 12r00r00         [24]  942 	lcall	__mulint
      0002B1 AA 82            [24]  943 	mov	r2,dpl
      0002B3 AE 83            [24]  944 	mov	r6,dph
      0002B5 15 81            [12]  945 	dec	sp
      0002B7 15 81            [12]  946 	dec	sp
      0002B9 D0 00            [24]  947 	pop	ar0
      0002BB D0 01            [24]  948 	pop	ar1
      0002BD D0 03            [24]  949 	pop	ar3
      0002BF D0 05            [24]  950 	pop	ar5
      0002C1 EA               [12]  951 	mov	a,r2
      0002C2 24r00            [12]  952 	add	a,#_g
      0002C4 FF               [12]  953 	mov	r7,a
      0002C5 EE               [12]  954 	mov	a,r6
      0002C6 34s00            [12]  955 	addc	a,#(_g >> 8)
      0002C8 FC               [12]  956 	mov	r4,a
      0002C9 C0 00            [24]  957 	push	ar0
      0002CB E5*00            [12]  958 	mov	a,_bp
      0002CD 24 04            [12]  959 	add	a,#0x04
      0002CF F8               [12]  960 	mov	r0,a
      0002D0 86 00            [24]  961 	mov	ar0,@r0
      0002D2 86 02            [24]  962 	mov	ar2,@r0
      0002D4 08               [12]  963 	inc	r0
      0002D5 86 06            [24]  964 	mov	ar6,@r0
      0002D7 18               [12]  965 	dec	r0
      0002D8 EA               [12]  966 	mov	a,r2
      0002D9 2F               [12]  967 	add	a,r7
      0002DA F5 82            [12]  968 	mov	dpl,a
      0002DC EE               [12]  969 	mov	a,r6
      0002DD 3C               [12]  970 	addc	a,r4
      0002DE F5 83            [12]  971 	mov	dph,a
      0002E0 74 AA            [12]  972 	mov	a,#0xaa
      0002E2 F0               [24]  973 	movx	@dptr,a
                                    974 ;	walk.c:94: printf("\033[%d;%dHo", cur.r + 1, cur.c + 1);
      0002E3 E5*00            [12]  975 	mov	a,_bp
      0002E5 24 04            [12]  976 	add	a,#0x04
      0002E7 F8               [12]  977 	mov	r0,a
      0002E8 86 00            [24]  978 	mov	ar0,@r0
      0002EA 86 02            [24]  979 	mov	ar2,@r0
      0002EC 08               [12]  980 	inc	r0
      0002ED 86 06            [24]  981 	mov	ar6,@r0
      0002EF 18               [12]  982 	dec	r0
      0002F0 D0 00            [24]  983 	pop	ar0
      0002F2 74 01            [12]  984 	mov	a,#0x01
      0002F4 2A               [12]  985 	add	a,r2
      0002F5 FF               [12]  986 	mov	r7,a
      0002F6 E4               [12]  987 	clr	a
      0002F7 3E               [12]  988 	addc	a,r6
      0002F8 FC               [12]  989 	mov	r4,a
      0002F9 87 02            [24]  990 	mov	ar2,@r1
      0002FB 09               [12]  991 	inc	r1
      0002FC 87 06            [24]  992 	mov	ar6,@r1
      0002FE 19               [12]  993 	dec	r1
      0002FF 0A               [12]  994 	inc	r2
      000300 BA 00 01         [24]  995 	cjne	r2,#0x00,00186$
      000303 0E               [12]  996 	inc	r6
      000304                        997 00186$:
      000304 C0 05            [24]  998 	push	ar5
      000306 C0 03            [24]  999 	push	ar3
      000308 C0 01            [24] 1000 	push	ar1
      00030A C0 00            [24] 1001 	push	ar0
      00030C C0 07            [24] 1002 	push	ar7
      00030E C0 04            [24] 1003 	push	ar4
      000310 C0 02            [24] 1004 	push	ar2
      000312 C0 06            [24] 1005 	push	ar6
      000314 74r20            [12] 1006 	mov	a,#___str_0
      000316 C0 E0            [24] 1007 	push	acc
      000318 74s00            [12] 1008 	mov	a,#(___str_0 >> 8)
      00031A C0 E0            [24] 1009 	push	acc
      00031C 74 80            [12] 1010 	mov	a,#0x80
      00031E C0 E0            [24] 1011 	push	acc
      000320 12r00r00         [24] 1012 	lcall	_printf
      000323 E5 81            [12] 1013 	mov	a,sp
      000325 24 F9            [12] 1014 	add	a,#0xf9
      000327 F5 81            [12] 1015 	mov	sp,a
      000329 D0 00            [24] 1016 	pop	ar0
      00032B D0 01            [24] 1017 	pop	ar1
      00032D D0 03            [24] 1018 	pop	ar3
      00032F D0 05            [24] 1019 	pop	ar5
                                   1020 ;	walk.c:133: return;
                                   1021 ;	walk.c:97: for (j = 0, f = 0; j < NMAX; j++) {
      000331                       1022 00137$:
      000331 C0 00            [24] 1023 	push	ar0
      000333 E5*00            [12] 1024 	mov	a,_bp
      000335 24 16            [12] 1025 	add	a,#0x16
      000337 F8               [12] 1026 	mov	r0,a
      000338 E4               [12] 1027 	clr	a
      000339 F6               [12] 1028 	mov	@r0,a
      00033A 08               [12] 1029 	inc	r0
      00033B F6               [12] 1030 	mov	@r0,a
      00033C E5*00            [12] 1031 	mov	a,_bp
      00033E 24 14            [12] 1032 	add	a,#0x14
      000340 F8               [12] 1033 	mov	r0,a
      000341 E4               [12] 1034 	clr	a
      000342 F6               [12] 1035 	mov	@r0,a
      000343 08               [12] 1036 	inc	r0
      000344 F6               [12] 1037 	mov	@r0,a
      000345 D0 00            [24] 1038 	pop	ar0
      000347                       1039 00130$:
      000347 C0 00            [24] 1040 	push	ar0
      000349 E5*00            [12] 1041 	mov	a,_bp
      00034B 24 14            [12] 1042 	add	a,#0x14
      00034D F8               [12] 1043 	mov	r0,a
      00034E C3               [12] 1044 	clr	c
      00034F E6               [12] 1045 	mov	a,@r0
      000350 94 08            [12] 1046 	subb	a,#0x08
      000352 08               [12] 1047 	inc	r0
      000353 E6               [12] 1048 	mov	a,@r0
      000354 64 80            [12] 1049 	xrl	a,#0x80
      000356 94 80            [12] 1050 	subb	a,#0x80
      000358 D0 00            [24] 1051 	pop	ar0
      00035A 40 03            [24] 1052 	jc	00187$
      00035C 02r04r85         [24] 1053 	ljmp	00111$
      00035F                       1054 00187$:
                                   1055 ;	walk.c:98: if (!update(&t, &cur, j)) continue;
      00035F C0 00            [24] 1056 	push	ar0
      000361 E5*00            [12] 1057 	mov	a,_bp
      000363 24 07            [12] 1058 	add	a,#0x07
      000365 F8               [12] 1059 	mov	r0,a
      000366 C0 01            [24] 1060 	push	ar1
      000368 E5*00            [12] 1061 	mov	a,_bp
      00036A 24 08            [12] 1062 	add	a,#0x08
      00036C F9               [12] 1063 	mov	r1,a
      00036D E6               [12] 1064 	mov	a,@r0
      00036E F7               [12] 1065 	mov	@r1,a
      00036F 09               [12] 1066 	inc	r1
      000370 77 00            [12] 1067 	mov	@r1,#0x00
      000372 09               [12] 1068 	inc	r1
      000373 77 40            [12] 1069 	mov	@r1,#0x40
      000375 D0 01            [24] 1070 	pop	ar1
      000377 D0 00            [24] 1071 	pop	ar0
      000379 88 04            [24] 1072 	mov	ar4,r0
      00037B 7E 00            [12] 1073 	mov	r6,#0x00
      00037D 7F 40            [12] 1074 	mov	r7,#0x40
      00037F C0 05            [24] 1075 	push	ar5
      000381 C0 03            [24] 1076 	push	ar3
      000383 C0 01            [24] 1077 	push	ar1
      000385 C0 00            [24] 1078 	push	ar0
      000387 85 00 F0         [24] 1079 	mov	b,ar0
      00038A E5*00            [12] 1080 	mov	a,_bp
      00038C 24 14            [12] 1081 	add	a,#0x14
      00038E F8               [12] 1082 	mov	r0,a
      00038F E6               [12] 1083 	mov	a,@r0
      000390 C0 E0            [24] 1084 	push	acc
      000392 08               [12] 1085 	inc	r0
      000393 E6               [12] 1086 	mov	a,@r0
      000394 C0 E0            [24] 1087 	push	acc
      000396 A8 F0            [24] 1088 	mov	r0,b
      000398 85 00 F0         [24] 1089 	mov	b,ar0
      00039B E5*00            [12] 1090 	mov	a,_bp
      00039D 24 08            [12] 1091 	add	a,#0x08
      00039F F8               [12] 1092 	mov	r0,a
      0003A0 E6               [12] 1093 	mov	a,@r0
      0003A1 C0 E0            [24] 1094 	push	acc
      0003A3 08               [12] 1095 	inc	r0
      0003A4 E6               [12] 1096 	mov	a,@r0
      0003A5 C0 E0            [24] 1097 	push	acc
      0003A7 08               [12] 1098 	inc	r0
      0003A8 E6               [12] 1099 	mov	a,@r0
      0003A9 C0 E0            [24] 1100 	push	acc
      0003AB 8C 82            [24] 1101 	mov	dpl,r4
      0003AD 8E 83            [24] 1102 	mov	dph,r6
      0003AF 8F F0            [24] 1103 	mov	b,r7
      0003B1 12r00r1D         [24] 1104 	lcall	_update
      0003B4 AE 82            [24] 1105 	mov	r6,dpl
      0003B6 AF 83            [24] 1106 	mov	r7,dph
      0003B8 E5 81            [12] 1107 	mov	a,sp
      0003BA 24 FB            [12] 1108 	add	a,#0xfb
      0003BC F5 81            [12] 1109 	mov	sp,a
      0003BE D0 00            [24] 1110 	pop	ar0
      0003C0 D0 01            [24] 1111 	pop	ar1
      0003C2 D0 03            [24] 1112 	pop	ar3
      0003C4 D0 05            [24] 1113 	pop	ar5
      0003C6 EE               [12] 1114 	mov	a,r6
      0003C7 4F               [12] 1115 	orl	a,r7
      0003C8 70 03            [24] 1116 	jnz	00188$
      0003CA 02r04r73         [24] 1117 	ljmp	00110$
      0003CD                       1118 00188$:
                                   1119 ;	walk.c:100: if (g[t.r][t.c] == 0x55) f++;
      0003CD 86 06            [24] 1120 	mov	ar6,@r0
      0003CF 08               [12] 1121 	inc	r0
      0003D0 86 07            [24] 1122 	mov	ar7,@r0
      0003D2 18               [12] 1123 	dec	r0
      0003D3 C0 05            [24] 1124 	push	ar5
      0003D5 C0 03            [24] 1125 	push	ar3
      0003D7 C0 01            [24] 1126 	push	ar1
      0003D9 C0 00            [24] 1127 	push	ar0
      0003DB C0 06            [24] 1128 	push	ar6
      0003DD C0 07            [24] 1129 	push	ar7
      0003DF 90 00 C0         [24] 1130 	mov	dptr,#0x00c0
      0003E2 12r00r00         [24] 1131 	lcall	__mulint
      0003E5 AE 82            [24] 1132 	mov	r6,dpl
      0003E7 AF 83            [24] 1133 	mov	r7,dph
      0003E9 15 81            [12] 1134 	dec	sp
      0003EB 15 81            [12] 1135 	dec	sp
      0003ED D0 00            [24] 1136 	pop	ar0
      0003EF D0 01            [24] 1137 	pop	ar1
      0003F1 D0 03            [24] 1138 	pop	ar3
      0003F3 D0 05            [24] 1139 	pop	ar5
      0003F5 EE               [12] 1140 	mov	a,r6
      0003F6 24r00            [12] 1141 	add	a,#_g
      0003F8 FA               [12] 1142 	mov	r2,a
      0003F9 EF               [12] 1143 	mov	a,r7
      0003FA 34s00            [12] 1144 	addc	a,#(_g >> 8)
      0003FC FC               [12] 1145 	mov	r4,a
      0003FD C0 00            [24] 1146 	push	ar0
      0003FF E5*00            [12] 1147 	mov	a,_bp
      000401 24 08            [12] 1148 	add	a,#0x08
      000403 F8               [12] 1149 	mov	r0,a
      000404 C0 01            [24] 1150 	push	ar1
      000406 A9 05            [24] 1151 	mov	r1,ar5
      000408 E7               [12] 1152 	mov	a,@r1
      000409 F6               [12] 1153 	mov	@r0,a
      00040A 09               [12] 1154 	inc	r1
      00040B E7               [12] 1155 	mov	a,@r1
      00040C 08               [12] 1156 	inc	r0
      00040D F6               [12] 1157 	mov	@r0,a
      00040E D0 01            [24] 1158 	pop	ar1
      000410 E5*00            [12] 1159 	mov	a,_bp
      000412 24 08            [12] 1160 	add	a,#0x08
      000414 F8               [12] 1161 	mov	r0,a
      000415 E6               [12] 1162 	mov	a,@r0
      000416 2A               [12] 1163 	add	a,r2
      000417 F5 82            [12] 1164 	mov	dpl,a
      000419 08               [12] 1165 	inc	r0
      00041A E6               [12] 1166 	mov	a,@r0
      00041B 3C               [12] 1167 	addc	a,r4
      00041C F5 83            [12] 1168 	mov	dph,a
      00041E D0 00            [24] 1169 	pop	ar0
      000420 E0               [24] 1170 	movx	a,@dptr
      000421 FC               [12] 1171 	mov	r4,a
      000422 BC 55 11         [24] 1172 	cjne	r4,#0x55,00108$
      000425 C0 00            [24] 1173 	push	ar0
      000427 E5*00            [12] 1174 	mov	a,_bp
      000429 24 16            [12] 1175 	add	a,#0x16
      00042B F8               [12] 1176 	mov	r0,a
      00042C 06               [12] 1177 	inc	@r0
      00042D B6 00 02         [24] 1178 	cjne	@r0,#0x00,00191$
      000430 08               [12] 1179 	inc	r0
      000431 06               [12] 1180 	inc	@r0
      000432                       1181 00191$:
      000432 D0 00            [24] 1182 	pop	ar0
      000434 80 3D            [24] 1183 	sjmp	00110$
      000436                       1184 00108$:
                                   1185 ;	walk.c:101: else if (g[t.r][t.c] != 0xaa) {
      000436 EE               [12] 1186 	mov	a,r6
      000437 24r00            [12] 1187 	add	a,#_g
      000439 FE               [12] 1188 	mov	r6,a
      00043A EF               [12] 1189 	mov	a,r7
      00043B 34s00            [12] 1190 	addc	a,#(_g >> 8)
      00043D FF               [12] 1191 	mov	r7,a
      00043E C0 00            [24] 1192 	push	ar0
      000440 E5*00            [12] 1193 	mov	a,_bp
      000442 24 08            [12] 1194 	add	a,#0x08
      000444 F8               [12] 1195 	mov	r0,a
      000445 E6               [12] 1196 	mov	a,@r0
      000446 2E               [12] 1197 	add	a,r6
      000447 F5 82            [12] 1198 	mov	dpl,a
      000449 08               [12] 1199 	inc	r0
      00044A E6               [12] 1200 	mov	a,@r0
      00044B 3F               [12] 1201 	addc	a,r7
      00044C F5 83            [12] 1202 	mov	dph,a
      00044E D0 00            [24] 1203 	pop	ar0
      000450 E0               [24] 1204 	movx	a,@dptr
      000451 FF               [12] 1205 	mov	r7,a
      000452 BF AA 02         [24] 1206 	cjne	r7,#0xaa,00192$
      000455 80 1C            [24] 1207 	sjmp	00110$
      000457                       1208 00192$:
                                   1209 ;	walk.c:102: (void)puts("Memory error");
      000457 90r00r2A         [24] 1210 	mov	dptr,#___str_1
      00045A 75 F0 80         [24] 1211 	mov	b,#0x80
      00045D C0 05            [24] 1212 	push	ar5
      00045F C0 03            [24] 1213 	push	ar3
      000461 C0 01            [24] 1214 	push	ar1
      000463 C0 00            [24] 1215 	push	ar0
      000465 12r00r00         [24] 1216 	lcall	_puts
      000468 D0 00            [24] 1217 	pop	ar0
      00046A D0 01            [24] 1218 	pop	ar1
      00046C D0 03            [24] 1219 	pop	ar3
      00046E D0 05            [24] 1220 	pop	ar5
                                   1221 ;	walk.c:103: reset();
      000470 12r00r1A         [24] 1222 	lcall	_reset
      000473                       1223 00110$:
                                   1224 ;	walk.c:97: for (j = 0, f = 0; j < NMAX; j++) {
      000473 C0 00            [24] 1225 	push	ar0
      000475 E5*00            [12] 1226 	mov	a,_bp
      000477 24 14            [12] 1227 	add	a,#0x14
      000479 F8               [12] 1228 	mov	r0,a
      00047A 06               [12] 1229 	inc	@r0
      00047B B6 00 02         [24] 1230 	cjne	@r0,#0x00,00193$
      00047E 08               [12] 1231 	inc	r0
      00047F 06               [12] 1232 	inc	@r0
      000480                       1233 00193$:
      000480 D0 00            [24] 1234 	pop	ar0
      000482 02r03r47         [24] 1235 	ljmp	00130$
      000485                       1236 00111$:
                                   1237 ;	walk.c:107: if (f) {
      000485 C0 00            [24] 1238 	push	ar0
      000487 E5*00            [12] 1239 	mov	a,_bp
      000489 24 16            [12] 1240 	add	a,#0x16
      00048B F8               [12] 1241 	mov	r0,a
      00048C E6               [12] 1242 	mov	a,@r0
      00048D 08               [12] 1243 	inc	r0
      00048E 46               [12] 1244 	orl	a,@r0
      00048F D0 00            [24] 1245 	pop	ar0
      000491 70 03            [24] 1246 	jnz	00194$
      000493 02r06r92         [24] 1247 	ljmp	00125$
      000496                       1248 00194$:
                                   1249 ;	walk.c:108: while (1) {
      000496                       1250 00122$:
                                   1251 ;	walk.c:109: j = rand() % NMAX;
      000496 C0 05            [24] 1252 	push	ar5
      000498 C0 05            [24] 1253 	push	ar5
      00049A C0 03            [24] 1254 	push	ar3
      00049C C0 01            [24] 1255 	push	ar1
      00049E C0 00            [24] 1256 	push	ar0
      0004A0 12r00r00         [24] 1257 	lcall	_rand
      0004A3 AE 82            [24] 1258 	mov	r6,dpl
      0004A5 AF 83            [24] 1259 	mov	r7,dph
      0004A7 74 08            [12] 1260 	mov	a,#0x08
      0004A9 C0 E0            [24] 1261 	push	acc
      0004AB E4               [12] 1262 	clr	a
      0004AC C0 E0            [24] 1263 	push	acc
      0004AE 8E 82            [24] 1264 	mov	dpl,r6
      0004B0 8F 83            [24] 1265 	mov	dph,r7
      0004B2 12r00r00         [24] 1266 	lcall	__modsint
      0004B5 C0 00            [24] 1267 	push	ar0
      0004B7 C8               [12] 1268 	xch	a,r0
      0004B8 E5*00            [12] 1269 	mov	a,_bp
      0004BA 24 14            [12] 1270 	add	a,#0x14
      0004BC C8               [12] 1271 	xch	a,r0
      0004BD A6 82            [24] 1272 	mov	@r0,dpl
      0004BF 08               [12] 1273 	inc	r0
      0004C0 A6 83            [24] 1274 	mov	@r0,dph
      0004C2 D0 00            [24] 1275 	pop	ar0
      0004C4 15 81            [12] 1276 	dec	sp
      0004C6 15 81            [12] 1277 	dec	sp
      0004C8 D0 00            [24] 1278 	pop	ar0
      0004CA D0 01            [24] 1279 	pop	ar1
      0004CC D0 03            [24] 1280 	pop	ar3
      0004CE D0 05            [24] 1281 	pop	ar5
                                   1282 ;	walk.c:110: if (!update(&t, &cur, j)) continue;
      0004D0 C0 00            [24] 1283 	push	ar0
      0004D2 E5*00            [12] 1284 	mov	a,_bp
      0004D4 24 0B            [12] 1285 	add	a,#0x0b
      0004D6 F8               [12] 1286 	mov	r0,a
      0004D7 C0 01            [24] 1287 	push	ar1
      0004D9 E5*00            [12] 1288 	mov	a,_bp
      0004DB 24 08            [12] 1289 	add	a,#0x08
      0004DD F9               [12] 1290 	mov	r1,a
      0004DE E6               [12] 1291 	mov	a,@r0
      0004DF F7               [12] 1292 	mov	@r1,a
      0004E0 09               [12] 1293 	inc	r1
      0004E1 77 00            [12] 1294 	mov	@r1,#0x00
      0004E3 09               [12] 1295 	inc	r1
      0004E4 77 40            [12] 1296 	mov	@r1,#0x40
      0004E6 D0 01            [24] 1297 	pop	ar1
      0004E8 D0 00            [24] 1298 	pop	ar0
      0004EA 8B 04            [24] 1299 	mov	ar4,r3
      0004EC 7E 00            [12] 1300 	mov	r6,#0x00
      0004EE 7F 40            [12] 1301 	mov	r7,#0x40
      0004F0 C0 05            [24] 1302 	push	ar5
      0004F2 C0 03            [24] 1303 	push	ar3
      0004F4 C0 01            [24] 1304 	push	ar1
      0004F6 C0 00            [24] 1305 	push	ar0
      0004F8 85 00 F0         [24] 1306 	mov	b,ar0
      0004FB E5*00            [12] 1307 	mov	a,_bp
      0004FD 24 14            [12] 1308 	add	a,#0x14
      0004FF F8               [12] 1309 	mov	r0,a
      000500 E6               [12] 1310 	mov	a,@r0
      000501 C0 E0            [24] 1311 	push	acc
      000503 08               [12] 1312 	inc	r0
      000504 E6               [12] 1313 	mov	a,@r0
      000505 C0 E0            [24] 1314 	push	acc
      000507 A8 F0            [24] 1315 	mov	r0,b
      000509 85 00 F0         [24] 1316 	mov	b,ar0
      00050C E5*00            [12] 1317 	mov	a,_bp
      00050E 24 08            [12] 1318 	add	a,#0x08
      000510 F8               [12] 1319 	mov	r0,a
      000511 E6               [12] 1320 	mov	a,@r0
      000512 C0 E0            [24] 1321 	push	acc
      000514 08               [12] 1322 	inc	r0
      000515 E6               [12] 1323 	mov	a,@r0
      000516 C0 E0            [24] 1324 	push	acc
      000518 08               [12] 1325 	inc	r0
      000519 E6               [12] 1326 	mov	a,@r0
      00051A C0 E0            [24] 1327 	push	acc
      00051C 8C 82            [24] 1328 	mov	dpl,r4
      00051E 8E 83            [24] 1329 	mov	dph,r6
      000520 8F F0            [24] 1330 	mov	b,r7
      000522 12r00r1D         [24] 1331 	lcall	_update
      000525 AE 82            [24] 1332 	mov	r6,dpl
      000527 AF 83            [24] 1333 	mov	r7,dph
      000529 E5 81            [12] 1334 	mov	a,sp
      00052B 24 FB            [12] 1335 	add	a,#0xfb
      00052D F5 81            [12] 1336 	mov	sp,a
      00052F D0 00            [24] 1337 	pop	ar0
      000531 D0 01            [24] 1338 	pop	ar1
      000533 D0 03            [24] 1339 	pop	ar3
      000535 D0 05            [24] 1340 	pop	ar5
      000537 D0 05            [24] 1341 	pop	ar5
      000539 EE               [12] 1342 	mov	a,r6
      00053A 4F               [12] 1343 	orl	a,r7
      00053B 70 03            [24] 1344 	jnz	00195$
      00053D 02r04r96         [24] 1345 	ljmp	00122$
      000540                       1346 00195$:
                                   1347 ;	walk.c:112: if (g[t.r][t.c] == 0xaa) continue;
      000540 C0 00            [24] 1348 	push	ar0
      000542 A8 03            [24] 1349 	mov	r0,ar3
      000544 86 06            [24] 1350 	mov	ar6,@r0
      000546 08               [12] 1351 	inc	r0
      000547 86 07            [24] 1352 	mov	ar7,@r0
      000549 D0 00            [24] 1353 	pop	ar0
      00054B C0 05            [24] 1354 	push	ar5
      00054D C0 03            [24] 1355 	push	ar3
      00054F C0 01            [24] 1356 	push	ar1
      000551 C0 00            [24] 1357 	push	ar0
      000553 C0 06            [24] 1358 	push	ar6
      000555 C0 07            [24] 1359 	push	ar7
      000557 90 00 C0         [24] 1360 	mov	dptr,#0x00c0
      00055A 12r00r00         [24] 1361 	lcall	__mulint
      00055D AE 82            [24] 1362 	mov	r6,dpl
      00055F AF 83            [24] 1363 	mov	r7,dph
      000561 15 81            [12] 1364 	dec	sp
      000563 15 81            [12] 1365 	dec	sp
      000565 D0 00            [24] 1366 	pop	ar0
      000567 D0 01            [24] 1367 	pop	ar1
      000569 D0 03            [24] 1368 	pop	ar3
      00056B D0 05            [24] 1369 	pop	ar5
      00056D EE               [12] 1370 	mov	a,r6
      00056E 24r00            [12] 1371 	add	a,#_g
      000570 FA               [12] 1372 	mov	r2,a
      000571 EF               [12] 1373 	mov	a,r7
      000572 34s00            [12] 1374 	addc	a,#(_g >> 8)
      000574 FC               [12] 1375 	mov	r4,a
      000575 C0 00            [24] 1376 	push	ar0
      000577 E5*00            [12] 1377 	mov	a,_bp
      000579 24 05            [12] 1378 	add	a,#0x05
      00057B F8               [12] 1379 	mov	r0,a
      00057C C0 01            [24] 1380 	push	ar1
      00057E E5*00            [12] 1381 	mov	a,_bp
      000580 24 08            [12] 1382 	add	a,#0x08
      000582 F9               [12] 1383 	mov	r1,a
      000583 86 00            [24] 1384 	mov	ar0,@r0
      000585 E6               [12] 1385 	mov	a,@r0
      000586 F7               [12] 1386 	mov	@r1,a
      000587 08               [12] 1387 	inc	r0
      000588 E6               [12] 1388 	mov	a,@r0
      000589 09               [12] 1389 	inc	r1
      00058A F7               [12] 1390 	mov	@r1,a
      00058B 18               [12] 1391 	dec	r0
      00058C D0 01            [24] 1392 	pop	ar1
      00058E E5*00            [12] 1393 	mov	a,_bp
      000590 24 08            [12] 1394 	add	a,#0x08
      000592 F8               [12] 1395 	mov	r0,a
      000593 E6               [12] 1396 	mov	a,@r0
      000594 2A               [12] 1397 	add	a,r2
      000595 F5 82            [12] 1398 	mov	dpl,a
      000597 08               [12] 1399 	inc	r0
      000598 E6               [12] 1400 	mov	a,@r0
      000599 3C               [12] 1401 	addc	a,r4
      00059A F5 83            [12] 1402 	mov	dph,a
      00059C D0 00            [24] 1403 	pop	ar0
      00059E E0               [24] 1404 	movx	a,@dptr
      00059F FC               [12] 1405 	mov	r4,a
      0005A0 BC AA 03         [24] 1406 	cjne	r4,#0xaa,00196$
      0005A3 02r04r96         [24] 1407 	ljmp	00122$
      0005A6                       1408 00196$:
                                   1409 ;	walk.c:113: else if (g[t.r][t.c] != 0x55) {
      0005A6 EE               [12] 1410 	mov	a,r6
      0005A7 24r00            [12] 1411 	add	a,#_g
      0005A9 FE               [12] 1412 	mov	r6,a
      0005AA EF               [12] 1413 	mov	a,r7
      0005AB 34s00            [12] 1414 	addc	a,#(_g >> 8)
      0005AD FF               [12] 1415 	mov	r7,a
      0005AE C0 00            [24] 1416 	push	ar0
      0005B0 E5*00            [12] 1417 	mov	a,_bp
      0005B2 24 08            [12] 1418 	add	a,#0x08
      0005B4 F8               [12] 1419 	mov	r0,a
      0005B5 E6               [12] 1420 	mov	a,@r0
      0005B6 2E               [12] 1421 	add	a,r6
      0005B7 F5 82            [12] 1422 	mov	dpl,a
      0005B9 08               [12] 1423 	inc	r0
      0005BA E6               [12] 1424 	mov	a,@r0
      0005BB 3F               [12] 1425 	addc	a,r7
      0005BC F5 83            [12] 1426 	mov	dph,a
      0005BE D0 00            [24] 1427 	pop	ar0
      0005C0 E0               [24] 1428 	movx	a,@dptr
      0005C1 FF               [12] 1429 	mov	r7,a
      0005C2 BF 55 02         [24] 1430 	cjne	r7,#0x55,00197$
      0005C5 80 1C            [24] 1431 	sjmp	00118$
      0005C7                       1432 00197$:
                                   1433 ;	walk.c:114: (void)puts("Memory error");
      0005C7 90r00r2A         [24] 1434 	mov	dptr,#___str_1
      0005CA 75 F0 80         [24] 1435 	mov	b,#0x80
      0005CD C0 05            [24] 1436 	push	ar5
      0005CF C0 03            [24] 1437 	push	ar3
      0005D1 C0 01            [24] 1438 	push	ar1
      0005D3 C0 00            [24] 1439 	push	ar0
      0005D5 12r00r00         [24] 1440 	lcall	_puts
      0005D8 D0 00            [24] 1441 	pop	ar0
      0005DA D0 01            [24] 1442 	pop	ar1
      0005DC D0 03            [24] 1443 	pop	ar3
      0005DE D0 05            [24] 1444 	pop	ar5
                                   1445 ;	walk.c:115: reset();
      0005E0 12r00r1A         [24] 1446 	lcall	_reset
      0005E3                       1447 00118$:
                                   1448 ;	walk.c:118: if (!stpush(&cur)) {
      0005E3 C0 00            [24] 1449 	push	ar0
      0005E5 A8*00            [24] 1450 	mov	r0,_bp
      0005E7 08               [12] 1451 	inc	r0
      0005E8 86 04            [24] 1452 	mov	ar4,@r0
      0005EA 7E 00            [12] 1453 	mov	r6,#0x00
      0005EC 7F 40            [12] 1454 	mov	r7,#0x40
      0005EE D0 00            [24] 1455 	pop	ar0
      0005F0 8C 82            [24] 1456 	mov	dpl,r4
      0005F2 8E 83            [24] 1457 	mov	dph,r6
      0005F4 8F F0            [24] 1458 	mov	b,r7
      0005F6 C0 05            [24] 1459 	push	ar5
      0005F8 C0 03            [24] 1460 	push	ar3
      0005FA C0 01            [24] 1461 	push	ar1
      0005FC C0 00            [24] 1462 	push	ar0
      0005FE 12r08rE3         [24] 1463 	lcall	_stpush
      000601 E5 82            [12] 1464 	mov	a,dpl
      000603 85 83 F0         [24] 1465 	mov	b,dph
      000606 D0 00            [24] 1466 	pop	ar0
      000608 D0 01            [24] 1467 	pop	ar1
      00060A D0 03            [24] 1468 	pop	ar3
      00060C D0 05            [24] 1469 	pop	ar5
      00060E 45 F0            [12] 1470 	orl	a,b
      000610 70 1C            [24] 1471 	jnz	00120$
                                   1472 ;	walk.c:119: (void)puts("Memory error");
      000612 90r00r2A         [24] 1473 	mov	dptr,#___str_1
      000615 75 F0 80         [24] 1474 	mov	b,#0x80
      000618 C0 05            [24] 1475 	push	ar5
      00061A C0 03            [24] 1476 	push	ar3
      00061C C0 01            [24] 1477 	push	ar1
      00061E C0 00            [24] 1478 	push	ar0
      000620 12r00r00         [24] 1479 	lcall	_puts
      000623 D0 00            [24] 1480 	pop	ar0
      000625 D0 01            [24] 1481 	pop	ar1
      000627 D0 03            [24] 1482 	pop	ar3
      000629 D0 05            [24] 1483 	pop	ar5
                                   1484 ;	walk.c:120: reset();
      00062B 12r00r1A         [24] 1485 	lcall	_reset
      00062E                       1486 00120$:
                                   1487 ;	walk.c:122: cur = t;
      00062E C0 05            [24] 1488 	push	ar5
      000630 C0 00            [24] 1489 	push	ar0
      000632 A8*00            [24] 1490 	mov	r0,_bp
      000634 08               [12] 1491 	inc	r0
      000635 08               [12] 1492 	inc	r0
      000636 C0 01            [24] 1493 	push	ar1
      000638 E5*00            [12] 1494 	mov	a,_bp
      00063A 24 08            [12] 1495 	add	a,#0x08
      00063C F9               [12] 1496 	mov	r1,a
      00063D E6               [12] 1497 	mov	a,@r0
      00063E F7               [12] 1498 	mov	@r1,a
      00063F 09               [12] 1499 	inc	r1
      000640 77 00            [12] 1500 	mov	@r1,#0x00
      000642 09               [12] 1501 	inc	r1
      000643 77 40            [12] 1502 	mov	@r1,#0x40
      000645 D0 01            [24] 1503 	pop	ar1
      000647 E5*00            [12] 1504 	mov	a,_bp
      000649 24 03            [12] 1505 	add	a,#0x03
      00064B F8               [12] 1506 	mov	r0,a
      00064C 86 02            [24] 1507 	mov	ar2,@r0
      00064E 7D 00            [12] 1508 	mov	r5,#0x00
      000650 7F 40            [12] 1509 	mov	r7,#0x40
      000652 D0 00            [24] 1510 	pop	ar0
      000654 C0 05            [24] 1511 	push	ar5
      000656 C0 03            [24] 1512 	push	ar3
      000658 C0 01            [24] 1513 	push	ar1
      00065A C0 00            [24] 1514 	push	ar0
      00065C 74 04            [12] 1515 	mov	a,#0x04
      00065E C0 E0            [24] 1516 	push	acc
      000660 E4               [12] 1517 	clr	a
      000661 C0 E0            [24] 1518 	push	acc
      000663 85 00 F0         [24] 1519 	mov	b,ar0
      000666 E5*00            [12] 1520 	mov	a,_bp
      000668 24 08            [12] 1521 	add	a,#0x08
      00066A F8               [12] 1522 	mov	r0,a
      00066B E6               [12] 1523 	mov	a,@r0
      00066C C0 E0            [24] 1524 	push	acc
      00066E 08               [12] 1525 	inc	r0
      00066F E6               [12] 1526 	mov	a,@r0
      000670 C0 E0            [24] 1527 	push	acc
      000672 08               [12] 1528 	inc	r0
      000673 E6               [12] 1529 	mov	a,@r0
      000674 C0 E0            [24] 1530 	push	acc
      000676 8A 82            [24] 1531 	mov	dpl,r2
      000678 8D 83            [24] 1532 	mov	dph,r5
      00067A 8F F0            [24] 1533 	mov	b,r7
      00067C 12r00r00         [24] 1534 	lcall	___memcpy
      00067F E5 81            [12] 1535 	mov	a,sp
      000681 24 FB            [12] 1536 	add	a,#0xfb
      000683 F5 81            [12] 1537 	mov	sp,a
      000685 D0 00            [24] 1538 	pop	ar0
      000687 D0 01            [24] 1539 	pop	ar1
      000689 D0 03            [24] 1540 	pop	ar3
      00068B D0 05            [24] 1541 	pop	ar5
                                   1542 ;	walk.c:123: goto process;
      00068D D0 05            [24] 1543 	pop	ar5
      00068F 02r02r99         [24] 1544 	ljmp	00101$
      000692                       1545 00125$:
                                   1546 ;	walk.c:127: printf("\033[%d;%dH.", cur.r + 1, cur.c + 1);
      000692 C0 00            [24] 1547 	push	ar0
      000694 E5*00            [12] 1548 	mov	a,_bp
      000696 24 04            [12] 1549 	add	a,#0x04
      000698 F8               [12] 1550 	mov	r0,a
      000699 86 00            [24] 1551 	mov	ar0,@r0
      00069B 86 06            [24] 1552 	mov	ar6,@r0
      00069D 08               [12] 1553 	inc	r0
      00069E 86 07            [24] 1554 	mov	ar7,@r0
      0006A0 18               [12] 1555 	dec	r0
      0006A1 D0 00            [24] 1556 	pop	ar0
      0006A3 0E               [12] 1557 	inc	r6
      0006A4 BE 00 01         [24] 1558 	cjne	r6,#0x00,00199$
      0006A7 0F               [12] 1559 	inc	r7
      0006A8                       1560 00199$:
      0006A8 87 02            [24] 1561 	mov	ar2,@r1
      0006AA 09               [12] 1562 	inc	r1
      0006AB 87 04            [24] 1563 	mov	ar4,@r1
      0006AD 19               [12] 1564 	dec	r1
      0006AE 0A               [12] 1565 	inc	r2
      0006AF BA 00 01         [24] 1566 	cjne	r2,#0x00,00200$
      0006B2 0C               [12] 1567 	inc	r4
      0006B3                       1568 00200$:
      0006B3 C0 05            [24] 1569 	push	ar5
      0006B5 C0 03            [24] 1570 	push	ar3
      0006B7 C0 01            [24] 1571 	push	ar1
      0006B9 C0 00            [24] 1572 	push	ar0
      0006BB C0 06            [24] 1573 	push	ar6
      0006BD C0 07            [24] 1574 	push	ar7
      0006BF C0 02            [24] 1575 	push	ar2
      0006C1 C0 04            [24] 1576 	push	ar4
      0006C3 74r37            [12] 1577 	mov	a,#___str_2
      0006C5 C0 E0            [24] 1578 	push	acc
      0006C7 74s00            [12] 1579 	mov	a,#(___str_2 >> 8)
      0006C9 C0 E0            [24] 1580 	push	acc
      0006CB 74 80            [12] 1581 	mov	a,#0x80
      0006CD C0 E0            [24] 1582 	push	acc
      0006CF 12r00r00         [24] 1583 	lcall	_printf
      0006D2 E5 81            [12] 1584 	mov	a,sp
      0006D4 24 F9            [12] 1585 	add	a,#0xf9
      0006D6 F5 81            [12] 1586 	mov	sp,a
      0006D8 D0 00            [24] 1587 	pop	ar0
      0006DA D0 01            [24] 1588 	pop	ar1
      0006DC D0 03            [24] 1589 	pop	ar3
      0006DE D0 05            [24] 1590 	pop	ar5
                                   1591 ;	walk.c:129: if (!stpop(&cur)) goto term;
      0006E0 C0 00            [24] 1592 	push	ar0
      0006E2 E5*00            [12] 1593 	mov	a,_bp
      0006E4 24 06            [12] 1594 	add	a,#0x06
      0006E6 F8               [12] 1595 	mov	r0,a
      0006E7 86 04            [24] 1596 	mov	ar4,@r0
      0006E9 7E 00            [12] 1597 	mov	r6,#0x00
      0006EB 7F 40            [12] 1598 	mov	r7,#0x40
      0006ED D0 00            [24] 1599 	pop	ar0
      0006EF 8C 82            [24] 1600 	mov	dpl,r4
      0006F1 8E 83            [24] 1601 	mov	dph,r6
      0006F3 8F F0            [24] 1602 	mov	b,r7
      0006F5 C0 05            [24] 1603 	push	ar5
      0006F7 C0 03            [24] 1604 	push	ar3
      0006F9 C0 01            [24] 1605 	push	ar1
      0006FB C0 00            [24] 1606 	push	ar0
      0006FD 12r09r44         [24] 1607 	lcall	_stpop
      000700 E5 82            [12] 1608 	mov	a,dpl
      000702 85 83 F0         [24] 1609 	mov	b,dph
      000705 D0 00            [24] 1610 	pop	ar0
      000707 D0 01            [24] 1611 	pop	ar1
      000709 D0 03            [24] 1612 	pop	ar3
      00070B D0 05            [24] 1613 	pop	ar5
      00070D 45 F0            [12] 1614 	orl	a,b
      00070F 60 03            [24] 1615 	jz	00201$
      000711 02r03r31         [24] 1616 	ljmp	00137$
      000714                       1617 00201$:
                                   1618 ;	walk.c:133: return;
                                   1619 ;	walk.c:134: }
      000714 85*00 81         [24] 1620 	mov	sp,_bp
      000717 D0*00            [24] 1621 	pop	_bp
      000719 22               [24] 1622 	ret
                                   1623 ;------------------------------------------------------------
                                   1624 ;Allocation info for local variables in function 'main'
                                   1625 ;------------------------------------------------------------
                                   1626 ;initial                   Allocated to stack - _bp +3
                                   1627 ;i                         Allocated to stack - _bp +7
                                   1628 ;j                         Allocated to registers r4 r5 
                                   1629 ;sloc0                     Allocated to stack - _bp +1
                                   1630 ;R                         Allocated with name '_main_R_65536_65'
                                   1631 ;------------------------------------------------------------
                                   1632 ;	walk.c:136: int main(void) {
                                   1633 ;	-----------------------------------------
                                   1634 ;	 function main
                                   1635 ;	-----------------------------------------
      00071A                       1636 _main:
      00071A C0*00            [24] 1637 	push	_bp
      00071C E5 81            [12] 1638 	mov	a,sp
      00071E F5*00            [12] 1639 	mov	_bp,a
      000720 24 08            [12] 1640 	add	a,#0x08
      000722 F5 81            [12] 1641 	mov	sp,a
                                   1642 ;	walk.c:141: i0 = 1;
      000724 78r00            [12] 1643 	mov	r0,#_i0
      000726 76 01            [12] 1644 	mov	@r0,#0x01
                                   1645 ;	walk.c:143: IT0 = 1;
                                   1646 ;	assignBit
      000728 D2 88            [12] 1647 	setb	_IT0
                                   1648 ;	walk.c:144: EX0 = 1;
                                   1649 ;	assignBit
      00072A D2 A8            [12] 1650 	setb	_EX0
                                   1651 ;	walk.c:145: EA = 1;
                                   1652 ;	assignBit
      00072C D2 AF            [12] 1653 	setb	_EA
                                   1654 ;	walk.c:147: srand(*R);
      00072E 90rB4r02         [24] 1655 	mov	dptr,#_main_R_65536_65
      000731 E0               [24] 1656 	movx	a,@dptr
      000732 FE               [12] 1657 	mov	r6,a
      000733 A3               [24] 1658 	inc	dptr
      000734 E0               [24] 1659 	movx	a,@dptr
      000735 FF               [12] 1660 	mov	r7,a
      000736 8E 82            [24] 1661 	mov	dpl,r6
      000738 8F 83            [24] 1662 	mov	dph,r7
      00073A E0               [24] 1663 	movx	a,@dptr
      00073B FE               [12] 1664 	mov	r6,a
      00073C A3               [24] 1665 	inc	dptr
      00073D E0               [24] 1666 	movx	a,@dptr
      00073E FF               [12] 1667 	mov	r7,a
      00073F 8E 82            [24] 1668 	mov	dpl,r6
      000741 8F 83            [24] 1669 	mov	dph,r7
      000743 12r00r00         [24] 1670 	lcall	_srand
                                   1671 ;	walk.c:148: stinit();
      000746 12r08rDA         [24] 1672 	lcall	_stinit
                                   1673 ;	walk.c:150: while (i0) {
      000749 E5*00            [12] 1674 	mov	a,_bp
      00074B 24 03            [12] 1675 	add	a,#0x03
      00074D FF               [12] 1676 	mov	r7,a
      00074E FE               [12] 1677 	mov	r6,a
      00074F                       1678 00107$:
      00074F 78r00            [12] 1679 	mov	r0,#_i0
      000751 E6               [12] 1680 	mov	a,@r0
      000752 70 03            [24] 1681 	jnz	00168$
      000754 02r08rCC         [24] 1682 	ljmp	00109$
      000757                       1683 00168$:
                                   1684 ;	walk.c:151: for (i = 0; i < ROWS; i++)
      000757 E5*00            [12] 1685 	mov	a,_bp
      000759 24 07            [12] 1686 	add	a,#0x07
      00075B F8               [12] 1687 	mov	r0,a
      00075C E4               [12] 1688 	clr	a
      00075D F6               [12] 1689 	mov	@r0,a
      00075E 08               [12] 1690 	inc	r0
      00075F F6               [12] 1691 	mov	@r0,a
      000760 7A 00            [12] 1692 	mov	r2,#0x00
      000762 7B 00            [12] 1693 	mov	r3,#0x00
                                   1694 ;	walk.c:152: for (j = 0; j < COLS; j++)
      000764                       1695 00121$:
      000764 A8*00            [24] 1696 	mov	r0,_bp
      000766 08               [12] 1697 	inc	r0
      000767 EA               [12] 1698 	mov	a,r2
      000768 24r00            [12] 1699 	add	a,#_g
      00076A F6               [12] 1700 	mov	@r0,a
      00076B EB               [12] 1701 	mov	a,r3
      00076C 34s00            [12] 1702 	addc	a,#(_g >> 8)
      00076E 08               [12] 1703 	inc	r0
      00076F F6               [12] 1704 	mov	@r0,a
      000770 7C 00            [12] 1705 	mov	r4,#0x00
      000772 7D 00            [12] 1706 	mov	r5,#0x00
      000774                       1707 00110$:
                                   1708 ;	walk.c:153: g[i][j] = 0x55;
      000774 A8*00            [24] 1709 	mov	r0,_bp
      000776 08               [12] 1710 	inc	r0
      000777 EC               [12] 1711 	mov	a,r4
      000778 26               [12] 1712 	add	a,@r0
      000779 F5 82            [12] 1713 	mov	dpl,a
      00077B ED               [12] 1714 	mov	a,r5
      00077C 08               [12] 1715 	inc	r0
      00077D 36               [12] 1716 	addc	a,@r0
      00077E F5 83            [12] 1717 	mov	dph,a
      000780 74 55            [12] 1718 	mov	a,#0x55
      000782 F0               [24] 1719 	movx	@dptr,a
                                   1720 ;	walk.c:152: for (j = 0; j < COLS; j++)
      000783 0C               [12] 1721 	inc	r4
      000784 BC 00 01         [24] 1722 	cjne	r4,#0x00,00169$
      000787 0D               [12] 1723 	inc	r5
      000788                       1724 00169$:
      000788 C3               [12] 1725 	clr	c
      000789 EC               [12] 1726 	mov	a,r4
      00078A 94 C0            [12] 1727 	subb	a,#0xc0
      00078C ED               [12] 1728 	mov	a,r5
      00078D 64 80            [12] 1729 	xrl	a,#0x80
      00078F 94 80            [12] 1730 	subb	a,#0x80
      000791 40 E1            [24] 1731 	jc	00110$
                                   1732 ;	walk.c:151: for (i = 0; i < ROWS; i++)
      000793 74 C0            [12] 1733 	mov	a,#0xc0
      000795 2A               [12] 1734 	add	a,r2
      000796 FA               [12] 1735 	mov	r2,a
      000797 E4               [12] 1736 	clr	a
      000798 3B               [12] 1737 	addc	a,r3
      000799 FB               [12] 1738 	mov	r3,a
      00079A E5*00            [12] 1739 	mov	a,_bp
      00079C 24 07            [12] 1740 	add	a,#0x07
      00079E F8               [12] 1741 	mov	r0,a
      00079F 06               [12] 1742 	inc	@r0
      0007A0 B6 00 02         [24] 1743 	cjne	@r0,#0x00,00171$
      0007A3 08               [12] 1744 	inc	r0
      0007A4 06               [12] 1745 	inc	@r0
      0007A5                       1746 00171$:
      0007A5 E5*00            [12] 1747 	mov	a,_bp
      0007A7 24 07            [12] 1748 	add	a,#0x07
      0007A9 F8               [12] 1749 	mov	r0,a
      0007AA C3               [12] 1750 	clr	c
      0007AB E6               [12] 1751 	mov	a,@r0
      0007AC 94 30            [12] 1752 	subb	a,#0x30
      0007AE 08               [12] 1753 	inc	r0
      0007AF E6               [12] 1754 	mov	a,@r0
      0007B0 64 80            [12] 1755 	xrl	a,#0x80
      0007B2 94 80            [12] 1756 	subb	a,#0x80
      0007B4 40 AE            [24] 1757 	jc	00121$
                                   1758 ;	walk.c:155: puts("\033[2J");
      0007B6 90r00r41         [24] 1759 	mov	dptr,#___str_3
      0007B9 75 F0 80         [24] 1760 	mov	b,#0x80
      0007BC C0 07            [24] 1761 	push	ar7
      0007BE C0 06            [24] 1762 	push	ar6
      0007C0 12r00r00         [24] 1763 	lcall	_puts
                                   1764 ;	walk.c:156: initial.r = rand() % ROWS;
      0007C3 E5*00            [12] 1765 	mov	a,_bp
      0007C5 24 03            [12] 1766 	add	a,#0x03
      0007C7 F9               [12] 1767 	mov	r1,a
      0007C8 C0 01            [24] 1768 	push	ar1
      0007CA 12r00r00         [24] 1769 	lcall	_rand
      0007CD AC 82            [24] 1770 	mov	r4,dpl
      0007CF AD 83            [24] 1771 	mov	r5,dph
      0007D1 74 30            [12] 1772 	mov	a,#0x30
      0007D3 C0 E0            [24] 1773 	push	acc
      0007D5 E4               [12] 1774 	clr	a
      0007D6 C0 E0            [24] 1775 	push	acc
      0007D8 8C 82            [24] 1776 	mov	dpl,r4
      0007DA 8D 83            [24] 1777 	mov	dph,r5
      0007DC 12r00r00         [24] 1778 	lcall	__modsint
      0007DF AC 82            [24] 1779 	mov	r4,dpl
      0007E1 AD 83            [24] 1780 	mov	r5,dph
      0007E3 15 81            [12] 1781 	dec	sp
      0007E5 15 81            [12] 1782 	dec	sp
      0007E7 D0 01            [24] 1783 	pop	ar1
      0007E9 D0 06            [24] 1784 	pop	ar6
      0007EB D0 07            [24] 1785 	pop	ar7
      0007ED A7 04            [24] 1786 	mov	@r1,ar4
      0007EF 09               [12] 1787 	inc	r1
      0007F0 A7 05            [24] 1788 	mov	@r1,ar5
      0007F2 19               [12] 1789 	dec	r1
                                   1790 ;	walk.c:157: initial.c = rand() % COLS;
      0007F3 74 02            [12] 1791 	mov	a,#0x02
      0007F5 2F               [12] 1792 	add	a,r7
      0007F6 F9               [12] 1793 	mov	r1,a
      0007F7 C0 07            [24] 1794 	push	ar7
      0007F9 C0 06            [24] 1795 	push	ar6
      0007FB C0 01            [24] 1796 	push	ar1
      0007FD 12r00r00         [24] 1797 	lcall	_rand
      000800 AC 82            [24] 1798 	mov	r4,dpl
      000802 AD 83            [24] 1799 	mov	r5,dph
      000804 74 C0            [12] 1800 	mov	a,#0xc0
      000806 C0 E0            [24] 1801 	push	acc
      000808 E4               [12] 1802 	clr	a
      000809 C0 E0            [24] 1803 	push	acc
      00080B 8C 82            [24] 1804 	mov	dpl,r4
      00080D 8D 83            [24] 1805 	mov	dph,r5
      00080F 12r00r00         [24] 1806 	lcall	__modsint
      000812 AC 82            [24] 1807 	mov	r4,dpl
      000814 AD 83            [24] 1808 	mov	r5,dph
      000816 15 81            [12] 1809 	dec	sp
      000818 15 81            [12] 1810 	dec	sp
      00081A D0 01            [24] 1811 	pop	ar1
      00081C D0 06            [24] 1812 	pop	ar6
      00081E A7 04            [24] 1813 	mov	@r1,ar4
      000820 09               [12] 1814 	inc	r1
      000821 A7 05            [24] 1815 	mov	@r1,ar5
      000823 19               [12] 1816 	dec	r1
                                   1817 ;	walk.c:158: walk(&initial);
      000824 8E 03            [24] 1818 	mov	ar3,r6
      000826 7C 00            [12] 1819 	mov	r4,#0x00
      000828 7D 40            [12] 1820 	mov	r5,#0x40
      00082A 8B 82            [24] 1821 	mov	dpl,r3
      00082C 8C 83            [24] 1822 	mov	dph,r4
      00082E 8D F0            [24] 1823 	mov	b,r5
      000830 C0 06            [24] 1824 	push	ar6
      000832 12r02r09         [24] 1825 	lcall	_walk
      000835 D0 06            [24] 1826 	pop	ar6
      000837 D0 07            [24] 1827 	pop	ar7
                                   1828 ;	walk.c:160: for (i = 0; i < ROWS; i++)
      000839 E5*00            [12] 1829 	mov	a,_bp
      00083B 24 07            [12] 1830 	add	a,#0x07
      00083D F8               [12] 1831 	mov	r0,a
      00083E E4               [12] 1832 	clr	a
      00083F F6               [12] 1833 	mov	@r0,a
      000840 08               [12] 1834 	inc	r0
      000841 F6               [12] 1835 	mov	@r0,a
      000842 7A 00            [12] 1836 	mov	r2,#0x00
      000844 7B 00            [12] 1837 	mov	r3,#0x00
                                   1838 ;	walk.c:161: for (j = 0; j < COLS; j++)
      000846                       1839 00126$:
      000846 A8*00            [24] 1840 	mov	r0,_bp
      000848 08               [12] 1841 	inc	r0
      000849 EA               [12] 1842 	mov	a,r2
      00084A 24r00            [12] 1843 	add	a,#_g
      00084C F6               [12] 1844 	mov	@r0,a
      00084D EB               [12] 1845 	mov	a,r3
      00084E 34s00            [12] 1846 	addc	a,#(_g >> 8)
      000850 08               [12] 1847 	inc	r0
      000851 F6               [12] 1848 	mov	@r0,a
      000852 7C 00            [12] 1849 	mov	r4,#0x00
      000854 7D 00            [12] 1850 	mov	r5,#0x00
      000856                       1851 00114$:
                                   1852 ;	walk.c:162: if (g[i][j] != 0xaa) {
      000856 C0 06            [24] 1853 	push	ar6
      000858 A8*00            [24] 1854 	mov	r0,_bp
      00085A 08               [12] 1855 	inc	r0
      00085B EC               [12] 1856 	mov	a,r4
      00085C 26               [12] 1857 	add	a,@r0
      00085D F5 82            [12] 1858 	mov	dpl,a
      00085F ED               [12] 1859 	mov	a,r5
      000860 08               [12] 1860 	inc	r0
      000861 36               [12] 1861 	addc	a,@r0
      000862 F5 83            [12] 1862 	mov	dph,a
      000864 E0               [24] 1863 	movx	a,@dptr
      000865 FE               [12] 1864 	mov	r6,a
      000866 BE AA 04         [24] 1865 	cjne	r6,#0xaa,00173$
      000869 D0 06            [24] 1866 	pop	ar6
      00086B 80 26            [24] 1867 	sjmp	00115$
      00086D                       1868 00173$:
      00086D D0 06            [24] 1869 	pop	ar6
                                   1870 ;	walk.c:163: (void)puts("Memory error");
      00086F 90r00r2A         [24] 1871 	mov	dptr,#___str_1
      000872 75 F0 80         [24] 1872 	mov	b,#0x80
      000875 C0 07            [24] 1873 	push	ar7
      000877 C0 06            [24] 1874 	push	ar6
      000879 C0 05            [24] 1875 	push	ar5
      00087B C0 04            [24] 1876 	push	ar4
      00087D C0 03            [24] 1877 	push	ar3
      00087F C0 02            [24] 1878 	push	ar2
      000881 12r00r00         [24] 1879 	lcall	_puts
      000884 D0 02            [24] 1880 	pop	ar2
      000886 D0 03            [24] 1881 	pop	ar3
      000888 D0 04            [24] 1882 	pop	ar4
      00088A D0 05            [24] 1883 	pop	ar5
      00088C D0 06            [24] 1884 	pop	ar6
      00088E D0 07            [24] 1885 	pop	ar7
                                   1886 ;	walk.c:164: reset();
      000890 12r00r1A         [24] 1887 	lcall	_reset
      000893                       1888 00115$:
                                   1889 ;	walk.c:161: for (j = 0; j < COLS; j++)
      000893 0C               [12] 1890 	inc	r4
      000894 BC 00 01         [24] 1891 	cjne	r4,#0x00,00174$
      000897 0D               [12] 1892 	inc	r5
      000898                       1893 00174$:
      000898 C3               [12] 1894 	clr	c
      000899 EC               [12] 1895 	mov	a,r4
      00089A 94 C0            [12] 1896 	subb	a,#0xc0
      00089C ED               [12] 1897 	mov	a,r5
      00089D 64 80            [12] 1898 	xrl	a,#0x80
      00089F 94 80            [12] 1899 	subb	a,#0x80
      0008A1 40 B3            [24] 1900 	jc	00114$
                                   1901 ;	walk.c:160: for (i = 0; i < ROWS; i++)
      0008A3 74 C0            [12] 1902 	mov	a,#0xc0
      0008A5 2A               [12] 1903 	add	a,r2
      0008A6 FA               [12] 1904 	mov	r2,a
      0008A7 E4               [12] 1905 	clr	a
      0008A8 3B               [12] 1906 	addc	a,r3
      0008A9 FB               [12] 1907 	mov	r3,a
      0008AA E5*00            [12] 1908 	mov	a,_bp
      0008AC 24 07            [12] 1909 	add	a,#0x07
      0008AE F8               [12] 1910 	mov	r0,a
      0008AF 06               [12] 1911 	inc	@r0
      0008B0 B6 00 02         [24] 1912 	cjne	@r0,#0x00,00176$
      0008B3 08               [12] 1913 	inc	r0
      0008B4 06               [12] 1914 	inc	@r0
      0008B5                       1915 00176$:
      0008B5 E5*00            [12] 1916 	mov	a,_bp
      0008B7 24 07            [12] 1917 	add	a,#0x07
      0008B9 F8               [12] 1918 	mov	r0,a
      0008BA C3               [12] 1919 	clr	c
      0008BB E6               [12] 1920 	mov	a,@r0
      0008BC 94 30            [12] 1921 	subb	a,#0x30
      0008BE 08               [12] 1922 	inc	r0
      0008BF E6               [12] 1923 	mov	a,@r0
      0008C0 64 80            [12] 1924 	xrl	a,#0x80
      0008C2 94 80            [12] 1925 	subb	a,#0x80
      0008C4 50 03            [24] 1926 	jnc	00177$
      0008C6 02r08r46         [24] 1927 	ljmp	00126$
      0008C9                       1928 00177$:
      0008C9 02r07r4F         [24] 1929 	ljmp	00107$
      0008CC                       1930 00109$:
                                   1931 ;	walk.c:168: EA = 0;
                                   1932 ;	assignBit
      0008CC C2 AF            [12] 1933 	clr	_EA
                                   1934 ;	walk.c:172: __endasm;
      0008CE 02 00 00         [24] 1935 	ljmp	0
                                   1936 ;	walk.c:174: return 0;
      0008D1 90 00 00         [24] 1937 	mov	dptr,#0x0000
                                   1938 ;	walk.c:175: }
      0008D4 85*00 81         [24] 1939 	mov	sp,_bp
      0008D7 D0*00            [24] 1940 	pop	_bp
      0008D9 22               [24] 1941 	ret
                                   1942 ;------------------------------------------------------------
                                   1943 ;Allocation info for local variables in function 'stinit'
                                   1944 ;------------------------------------------------------------
                                   1945 ;	walk.c:177: static void stinit(void) {
                                   1946 ;	-----------------------------------------
                                   1947 ;	 function stinit
                                   1948 ;	-----------------------------------------
      0008DA                       1949 _stinit:
                                   1950 ;	walk.c:178: sp = -1;
      0008DA 90rB4r00         [24] 1951 	mov	dptr,#_sp
      0008DD 74 FF            [12] 1952 	mov	a,#0xff
      0008DF F0               [24] 1953 	movx	@dptr,a
      0008E0 A3               [24] 1954 	inc	dptr
      0008E1 F0               [24] 1955 	movx	@dptr,a
                                   1956 ;	walk.c:179: return;
                                   1957 ;	walk.c:180: }
      0008E2 22               [24] 1958 	ret
                                   1959 ;------------------------------------------------------------
                                   1960 ;Allocation info for local variables in function 'stpush'
                                   1961 ;------------------------------------------------------------
                                   1962 ;t                         Allocated to registers r5 r6 r7 
                                   1963 ;------------------------------------------------------------
                                   1964 ;	walk.c:182: static int stpush(struct node *t) {
                                   1965 ;	-----------------------------------------
                                   1966 ;	 function stpush
                                   1967 ;	-----------------------------------------
      0008E3                       1968 _stpush:
      0008E3 AD 82            [24] 1969 	mov	r5,dpl
      0008E5 AE 83            [24] 1970 	mov	r6,dph
      0008E7 AF F0            [24] 1971 	mov	r7,b
                                   1972 ;	walk.c:183: if (sp == (SMAX - 1)) return 0;
      0008E9 90rB4r00         [24] 1973 	mov	dptr,#_sp
      0008EC E0               [24] 1974 	movx	a,@dptr
      0008ED FB               [12] 1975 	mov	r3,a
      0008EE A3               [24] 1976 	inc	dptr
      0008EF E0               [24] 1977 	movx	a,@dptr
      0008F0 FC               [12] 1978 	mov	r4,a
      0008F1 BB FF 07         [24] 1979 	cjne	r3,#0xff,00102$
      0008F4 BC 23 04         [24] 1980 	cjne	r4,#0x23,00102$
      0008F7 90 00 00         [24] 1981 	mov	dptr,#0x0000
      0008FA 22               [24] 1982 	ret
      0008FB                       1983 00102$:
                                   1984 ;	walk.c:184: sp++;
      0008FB 90rB4r00         [24] 1985 	mov	dptr,#_sp
      0008FE 74 01            [12] 1986 	mov	a,#0x01
      000900 2B               [12] 1987 	add	a,r3
      000901 F0               [24] 1988 	movx	@dptr,a
      000902 E4               [12] 1989 	clr	a
      000903 3C               [12] 1990 	addc	a,r4
      000904 A3               [24] 1991 	inc	dptr
      000905 F0               [24] 1992 	movx	@dptr,a
                                   1993 ;	walk.c:185: stack[sp] = *t;
      000906 90rB4r00         [24] 1994 	mov	dptr,#_sp
      000909 E0               [24] 1995 	movx	a,@dptr
      00090A FB               [12] 1996 	mov	r3,a
      00090B A3               [24] 1997 	inc	dptr
      00090C E0               [24] 1998 	movx	a,@dptr
      00090D FC               [12] 1999 	mov	r4,a
      00090E EB               [12] 2000 	mov	a,r3
      00090F 2B               [12] 2001 	add	a,r3
      000910 FB               [12] 2002 	mov	r3,a
      000911 EC               [12] 2003 	mov	a,r4
      000912 33               [12] 2004 	rlc	a
      000913 FC               [12] 2005 	mov	r4,a
      000914 EB               [12] 2006 	mov	a,r3
      000915 2B               [12] 2007 	add	a,r3
      000916 FB               [12] 2008 	mov	r3,a
      000917 EC               [12] 2009 	mov	a,r4
      000918 33               [12] 2010 	rlc	a
      000919 FC               [12] 2011 	mov	r4,a
      00091A EB               [12] 2012 	mov	a,r3
      00091B 24r00            [12] 2013 	add	a,#_stack
      00091D FB               [12] 2014 	mov	r3,a
      00091E EC               [12] 2015 	mov	a,r4
      00091F 34s24            [12] 2016 	addc	a,#(_stack >> 8)
      000921 FC               [12] 2017 	mov	r4,a
      000922 7A 00            [12] 2018 	mov	r2,#0x00
      000924 74 04            [12] 2019 	mov	a,#0x04
      000926 C0 E0            [24] 2020 	push	acc
      000928 E4               [12] 2021 	clr	a
      000929 C0 E0            [24] 2022 	push	acc
      00092B C0 05            [24] 2023 	push	ar5
      00092D C0 06            [24] 2024 	push	ar6
      00092F C0 07            [24] 2025 	push	ar7
      000931 8B 82            [24] 2026 	mov	dpl,r3
      000933 8C 83            [24] 2027 	mov	dph,r4
      000935 8A F0            [24] 2028 	mov	b,r2
      000937 12r00r00         [24] 2029 	lcall	___memcpy
      00093A E5 81            [12] 2030 	mov	a,sp
      00093C 24 FB            [12] 2031 	add	a,#0xfb
      00093E F5 81            [12] 2032 	mov	sp,a
                                   2033 ;	walk.c:186: return 1;
      000940 90 00 01         [24] 2034 	mov	dptr,#0x0001
                                   2035 ;	walk.c:187: }
      000943 22               [24] 2036 	ret
                                   2037 ;------------------------------------------------------------
                                   2038 ;Allocation info for local variables in function 'stpop'
                                   2039 ;------------------------------------------------------------
                                   2040 ;t                         Allocated to registers r5 r6 r7 
                                   2041 ;------------------------------------------------------------
                                   2042 ;	walk.c:189: static int stpop(struct node *t) {
                                   2043 ;	-----------------------------------------
                                   2044 ;	 function stpop
                                   2045 ;	-----------------------------------------
      000944                       2046 _stpop:
      000944 AD 82            [24] 2047 	mov	r5,dpl
      000946 AE 83            [24] 2048 	mov	r6,dph
      000948 AF F0            [24] 2049 	mov	r7,b
                                   2050 ;	walk.c:190: if (sp == -1) return 0;
      00094A 90rB4r00         [24] 2051 	mov	dptr,#_sp
      00094D E0               [24] 2052 	movx	a,@dptr
      00094E FB               [12] 2053 	mov	r3,a
      00094F A3               [24] 2054 	inc	dptr
      000950 E0               [24] 2055 	movx	a,@dptr
      000951 FC               [12] 2056 	mov	r4,a
      000952 BB FF 07         [24] 2057 	cjne	r3,#0xff,00102$
      000955 BC FF 04         [24] 2058 	cjne	r4,#0xff,00102$
      000958 90 00 00         [24] 2059 	mov	dptr,#0x0000
      00095B 22               [24] 2060 	ret
      00095C                       2061 00102$:
                                   2062 ;	walk.c:191: *t = stack[sp];
      00095C EB               [12] 2063 	mov	a,r3
      00095D 2B               [12] 2064 	add	a,r3
      00095E FB               [12] 2065 	mov	r3,a
      00095F EC               [12] 2066 	mov	a,r4
      000960 33               [12] 2067 	rlc	a
      000961 FC               [12] 2068 	mov	r4,a
      000962 EB               [12] 2069 	mov	a,r3
      000963 2B               [12] 2070 	add	a,r3
      000964 FB               [12] 2071 	mov	r3,a
      000965 EC               [12] 2072 	mov	a,r4
      000966 33               [12] 2073 	rlc	a
      000967 FC               [12] 2074 	mov	r4,a
      000968 EB               [12] 2075 	mov	a,r3
      000969 24r00            [12] 2076 	add	a,#_stack
      00096B FB               [12] 2077 	mov	r3,a
      00096C EC               [12] 2078 	mov	a,r4
      00096D 34s24            [12] 2079 	addc	a,#(_stack >> 8)
      00096F FC               [12] 2080 	mov	r4,a
      000970 7A 00            [12] 2081 	mov	r2,#0x00
      000972 74 04            [12] 2082 	mov	a,#0x04
      000974 C0 E0            [24] 2083 	push	acc
      000976 E4               [12] 2084 	clr	a
      000977 C0 E0            [24] 2085 	push	acc
      000979 C0 03            [24] 2086 	push	ar3
      00097B C0 04            [24] 2087 	push	ar4
      00097D C0 02            [24] 2088 	push	ar2
      00097F 8D 82            [24] 2089 	mov	dpl,r5
      000981 8E 83            [24] 2090 	mov	dph,r6
      000983 8F F0            [24] 2091 	mov	b,r7
      000985 12r00r00         [24] 2092 	lcall	___memcpy
      000988 E5 81            [12] 2093 	mov	a,sp
      00098A 24 FB            [12] 2094 	add	a,#0xfb
      00098C F5 81            [12] 2095 	mov	sp,a
                                   2096 ;	walk.c:192: sp--;
      00098E 90rB4r00         [24] 2097 	mov	dptr,#_sp
      000991 E0               [24] 2098 	movx	a,@dptr
      000992 24 FF            [12] 2099 	add	a,#0xff
      000994 FE               [12] 2100 	mov	r6,a
      000995 A3               [24] 2101 	inc	dptr
      000996 E0               [24] 2102 	movx	a,@dptr
      000997 34 FF            [12] 2103 	addc	a,#0xff
      000999 FF               [12] 2104 	mov	r7,a
      00099A 90rB4r00         [24] 2105 	mov	dptr,#_sp
      00099D EE               [12] 2106 	mov	a,r6
      00099E F0               [24] 2107 	movx	@dptr,a
      00099F EF               [12] 2108 	mov	a,r7
      0009A0 A3               [24] 2109 	inc	dptr
      0009A1 F0               [24] 2110 	movx	@dptr,a
                                   2111 ;	walk.c:193: return 1;
      0009A2 90 00 01         [24] 2112 	mov	dptr,#0x0001
                                   2113 ;	walk.c:194: }
      0009A5 22               [24] 2114 	ret
                                   2115 	.area CSEG    (CODE)
                                   2116 	.area CONST   (CODE)
      000000                       2117 _neigh:
      000000 FF FF                 2118 	.byte #0xff, #0xff	; -1
      000002 FF FF                 2119 	.byte #0xff, #0xff	; -1
      000004 FF FF                 2120 	.byte #0xff, #0xff	; -1
      000006 00 00                 2121 	.byte #0x00, #0x00	;  0
      000008 FF FF                 2122 	.byte #0xff, #0xff	; -1
      00000A 01 00                 2123 	.byte #0x01, #0x00	;  1
      00000C 00 00                 2124 	.byte #0x00, #0x00	;  0
      00000E FF FF                 2125 	.byte #0xff, #0xff	; -1
      000010 00 00                 2126 	.byte #0x00, #0x00	;  0
      000012 01 00                 2127 	.byte #0x01, #0x00	;  1
      000014 01 00                 2128 	.byte #0x01, #0x00	;  1
      000016 FF FF                 2129 	.byte #0xff, #0xff	; -1
      000018 01 00                 2130 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2131 	.byte #0x00, #0x00	;  0
      00001C 01 00                 2132 	.byte #0x01, #0x00	;  1
      00001E 01 00                 2133 	.byte #0x01, #0x00	;  1
                                   2134 	.area CONST   (CODE)
      000020                       2135 ___str_0:
      000020 1B                    2136 	.db 0x1b
      000021 5B 25 64 3B 25 64 48  2137 	.ascii "[%d;%dHo"
             6F
      000029 00                    2138 	.db 0x00
                                   2139 	.area CSEG    (CODE)
                                   2140 	.area CONST   (CODE)
      00002A                       2141 ___str_1:
      00002A 4D 65 6D 6F 72 79 20  2142 	.ascii "Memory error"
             65 72 72 6F 72
      000036 00                    2143 	.db 0x00
                                   2144 	.area CSEG    (CODE)
                                   2145 	.area CONST   (CODE)
      000037                       2146 ___str_2:
      000037 1B                    2147 	.db 0x1b
      000038 5B 25 64 3B 25 64 48  2148 	.ascii "[%d;%dH."
             2E
      000040 00                    2149 	.db 0x00
                                   2150 	.area CSEG    (CODE)
                                   2151 	.area CONST   (CODE)
      000041                       2152 ___str_3:
      000041 1B                    2153 	.db 0x1b
      000042 5B 32 4A              2154 	.ascii "[2J"
      000045 00                    2155 	.db 0x00
                                   2156 	.area CSEG    (CODE)
                                   2157 	.area XINIT   (CODE)
                                   2158 	.area CABS    (ABS,CODE)
