                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _neigh:
      000001                        303 	.ds 32
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9216
      002400                        323 _stack:
      002400                        324 	.ds 36864
      00B400                        325 _sp:
      00B400                        326 	.ds 2
      00B402                        327 _main_R_65536_64:
      00B402                        328 	.ds 2
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
                                    337 	.area HOME    (CODE)
                                    338 	.area GSINIT0 (CODE)
                                    339 	.area GSINIT1 (CODE)
                                    340 	.area GSINIT2 (CODE)
                                    341 	.area GSINIT3 (CODE)
                                    342 	.area GSINIT4 (CODE)
                                    343 	.area GSINIT5 (CODE)
                                    344 	.area GSINIT  (CODE)
                                    345 	.area GSFINAL (CODE)
                                    346 	.area CSEG    (CODE)
                                    347 ;--------------------------------------------------------
                                    348 ; interrupt vector 
                                    349 ;--------------------------------------------------------
                                    350 	.area HOME    (CODE)
      000000                        351 __interrupt_vect:
      000000 02r00r00         [24]  352 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  353 	ljmp	_int0
                                    354 ;--------------------------------------------------------
                                    355 ; global & static initialisations
                                    356 ;--------------------------------------------------------
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.area GSFINAL (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.globl __sdcc_gsinit_startup
                                    362 	.globl __sdcc_program_startup
                                    363 	.globl __start__stack
                                    364 	.globl __mcs51_genXINIT
                                    365 	.globl __mcs51_genXRAMCLEAR
                                    366 	.globl __mcs51_genRAMCLEAR
                                    367 ;------------------------------------------------------------
                                    368 ;Allocation info for local variables in function 'main'
                                    369 ;------------------------------------------------------------
                                    370 ;initial                   Allocated to stack - _bp +7
                                    371 ;N                         Allocated to stack - _bp +11
                                    372 ;i                         Allocated to stack - _bp +5
                                    373 ;j                         Allocated to registers r2 r6 
                                    374 ;sloc0                     Allocated to stack - _bp +1
                                    375 ;sloc1                     Allocated to stack - _bp +3
                                    376 ;R                         Allocated with name '_main_R_65536_64'
                                    377 ;------------------------------------------------------------
                                    378 ;	walk.c:133: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rB4r02         [24]  379 	mov	dptr,#_main_R_65536_64
      000003 74 FE            [12]  380 	mov	a,#0xfe
      000005 F0               [24]  381 	movx	@dptr,a
      000006 04               [12]  382 	inc	a
      000007 A3               [24]  383 	inc	dptr
      000008 F0               [24]  384 	movx	@dptr,a
                                    385 ;	walk.c:59: __idata static const struct node neigh[NMAX] = {
      000009 78r01            [12]  386 	mov	r0,#_neigh
      00000B 76 FF            [12]  387 	mov	@r0,#0xff
      00000D 08               [12]  388 	inc	r0
      00000E 76 FF            [12]  389 	mov	@r0,#0xff
      000010 78r03            [12]  390 	mov	r0,#(_neigh + 0x0002)
      000012 76 FF            [12]  391 	mov	@r0,#0xff
      000014 08               [12]  392 	inc	r0
      000015 76 FF            [12]  393 	mov	@r0,#0xff
      000017 78r05            [12]  394 	mov	r0,#(_neigh + 0x0004)
      000019 76 FF            [12]  395 	mov	@r0,#0xff
      00001B 08               [12]  396 	inc	r0
      00001C 76 FF            [12]  397 	mov	@r0,#0xff
      00001E 78r07            [12]  398 	mov	r0,#(_neigh + 0x0006)
      000020 76 00            [12]  399 	mov	@r0,#0x00
      000022 08               [12]  400 	inc	r0
      000023 76 00            [12]  401 	mov	@r0,#0x00
      000025 78r09            [12]  402 	mov	r0,#(_neigh + 0x0008)
      000027 76 FF            [12]  403 	mov	@r0,#0xff
      000029 08               [12]  404 	inc	r0
      00002A 76 FF            [12]  405 	mov	@r0,#0xff
      00002C 78r0B            [12]  406 	mov	r0,#(_neigh + 0x000a)
      00002E 76 01            [12]  407 	mov	@r0,#0x01
      000030 08               [12]  408 	inc	r0
      000031 76 00            [12]  409 	mov	@r0,#0x00
      000033 78r0D            [12]  410 	mov	r0,#(_neigh + 0x000c)
      000035 76 00            [12]  411 	mov	@r0,#0x00
      000037 08               [12]  412 	inc	r0
      000038 76 00            [12]  413 	mov	@r0,#0x00
      00003A 78r0F            [12]  414 	mov	r0,#(_neigh + 0x000e)
      00003C 76 FF            [12]  415 	mov	@r0,#0xff
      00003E 08               [12]  416 	inc	r0
      00003F 76 FF            [12]  417 	mov	@r0,#0xff
      000041 78r11            [12]  418 	mov	r0,#(_neigh + 0x0010)
      000043 76 00            [12]  419 	mov	@r0,#0x00
      000045 08               [12]  420 	inc	r0
      000046 76 00            [12]  421 	mov	@r0,#0x00
      000048 78r13            [12]  422 	mov	r0,#(_neigh + 0x0012)
      00004A 76 01            [12]  423 	mov	@r0,#0x01
      00004C 08               [12]  424 	inc	r0
      00004D 76 00            [12]  425 	mov	@r0,#0x00
      00004F 78r15            [12]  426 	mov	r0,#(_neigh + 0x0014)
      000051 76 01            [12]  427 	mov	@r0,#0x01
      000053 08               [12]  428 	inc	r0
      000054 76 00            [12]  429 	mov	@r0,#0x00
      000056 78r17            [12]  430 	mov	r0,#(_neigh + 0x0016)
      000058 76 FF            [12]  431 	mov	@r0,#0xff
      00005A 08               [12]  432 	inc	r0
      00005B 76 FF            [12]  433 	mov	@r0,#0xff
      00005D 78r19            [12]  434 	mov	r0,#(_neigh + 0x0018)
      00005F 76 01            [12]  435 	mov	@r0,#0x01
      000061 08               [12]  436 	inc	r0
      000062 76 00            [12]  437 	mov	@r0,#0x00
      000064 78r1B            [12]  438 	mov	r0,#(_neigh + 0x001a)
      000066 76 00            [12]  439 	mov	@r0,#0x00
      000068 08               [12]  440 	inc	r0
      000069 76 00            [12]  441 	mov	@r0,#0x00
      00006B 78r1D            [12]  442 	mov	r0,#(_neigh + 0x001c)
      00006D 76 01            [12]  443 	mov	@r0,#0x01
      00006F 08               [12]  444 	inc	r0
      000070 76 00            [12]  445 	mov	@r0,#0x00
      000072 78r1F            [12]  446 	mov	r0,#(_neigh + 0x001e)
      000074 76 01            [12]  447 	mov	@r0,#0x01
      000076 08               [12]  448 	inc	r0
      000077 76 00            [12]  449 	mov	@r0,#0x00
                                    450 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  451 	ljmp	__sdcc_program_startup
                                    452 ;--------------------------------------------------------
                                    453 ; Home
                                    454 ;--------------------------------------------------------
                                    455 	.area HOME    (CODE)
                                    456 	.area HOME    (CODE)
      000006                        457 __sdcc_program_startup:
      000006 02r06r21         [24]  458 	ljmp	_main
                                    459 ;	return from main will return to caller
                                    460 ;--------------------------------------------------------
                                    461 ; code
                                    462 ;--------------------------------------------------------
                                    463 	.area CSEG    (CODE)
                                    464 ;------------------------------------------------------------
                                    465 ;Allocation info for local variables in function 'putchar'
                                    466 ;------------------------------------------------------------
                                    467 ;c                         Allocated to registers 
                                    468 ;------------------------------------------------------------
                                    469 ;	walk.c:8: int putchar(int c) __naked {
                                    470 ;	-----------------------------------------
                                    471 ;	 function putchar
                                    472 ;	-----------------------------------------
      000000                        473 _putchar:
                                    474 ;	naked function: no prologue.
                                    475 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  476 	mov	a, dpl
      000002 02 00 30         [24]  477 	ljmp	0x0030
                                    478 ;	walk.c:14: }
                                    479 ;	naked function: no epilogue.
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'getchar'
                                    482 ;------------------------------------------------------------
                                    483 ;	walk.c:16: int getchar(void) __naked {
                                    484 ;	-----------------------------------------
                                    485 ;	 function getchar
                                    486 ;	-----------------------------------------
      000005                        487 _getchar:
                                    488 ;	naked function: no prologue.
                                    489 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  490 	lcall	0x0032
      000008 F5 82            [12]  491 	mov	dpl, a
      00000A 75 83 00         [24]  492 	mov	dph, #0
      00000D 22               [24]  493 	ret
                                    494 ;	walk.c:23: }
                                    495 ;	naked function: no epilogue.
                                    496 ;------------------------------------------------------------
                                    497 ;Allocation info for local variables in function 'int0'
                                    498 ;------------------------------------------------------------
                                    499 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    500 ;	-----------------------------------------
                                    501 ;	 function int0
                                    502 ;	-----------------------------------------
      00000E                        503 _int0:
                           00000F   504 	ar7 = 0x0f
                           00000E   505 	ar6 = 0x0e
                           00000D   506 	ar5 = 0x0d
                           00000C   507 	ar4 = 0x0c
                           00000B   508 	ar3 = 0x0b
                           00000A   509 	ar2 = 0x0a
                           000009   510 	ar1 = 0x09
                           000008   511 	ar0 = 0x08
      00000E C0 D0            [24]  512 	push	psw
      000010 75 D0 08         [24]  513 	mov	psw,#0x08
                                    514 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  515 	mov	r0,#_i0
      000015 76 00            [12]  516 	mov	@r0,#0x00
                                    517 ;	walk.c:29: }
      000017 D0 D0            [24]  518 	pop	psw
      000019 32               [24]  519 	reti
                                    520 ;	eliminated unneeded push/pop dpl
                                    521 ;	eliminated unneeded push/pop dph
                                    522 ;	eliminated unneeded push/pop b
                                    523 ;	eliminated unneeded push/pop acc
                                    524 ;------------------------------------------------------------
                                    525 ;Allocation info for local variables in function 'reset'
                                    526 ;------------------------------------------------------------
                                    527 ;	walk.c:31: static void reset(void) __naked {
                                    528 ;	-----------------------------------------
                                    529 ;	 function reset
                                    530 ;	-----------------------------------------
      00001A                        531 _reset:
                                    532 ;	naked function: no prologue.
                                    533 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  534 	orl	pcon, #2
                                    535 ;	walk.c:35: }
                                    536 ;	naked function: no epilogue.
                                    537 ;------------------------------------------------------------
                                    538 ;Allocation info for local variables in function 'update'
                                    539 ;------------------------------------------------------------
                                    540 ;cur                       Allocated to stack - _bp -5
                                    541 ;j                         Allocated to stack - _bp -6
                                    542 ;t                         Allocated to stack - _bp +1
                                    543 ;sloc0                     Allocated to stack - _bp +4
                                    544 ;sloc1                     Allocated to stack - _bp +6
                                    545 ;------------------------------------------------------------
                                    546 ;	walk.c:73: static int update(struct node *t, struct node *cur, char j) {
                                    547 ;	-----------------------------------------
                                    548 ;	 function update
                                    549 ;	-----------------------------------------
      00001D                        550 _update:
                           000007   551 	ar7 = 0x07
                           000006   552 	ar6 = 0x06
                           000005   553 	ar5 = 0x05
                           000004   554 	ar4 = 0x04
                           000003   555 	ar3 = 0x03
                           000002   556 	ar2 = 0x02
                           000001   557 	ar1 = 0x01
                           000000   558 	ar0 = 0x00
      00001D C0*00            [24]  559 	push	_bp
      00001F 85 81*00         [24]  560 	mov	_bp,sp
      000022 C0 82            [24]  561 	push	dpl
      000024 C0 83            [24]  562 	push	dph
      000026 C0 F0            [24]  563 	push	b
      000028 E5 81            [12]  564 	mov	a,sp
      00002A 24 05            [12]  565 	add	a,#0x05
      00002C F5 81            [12]  566 	mov	sp,a
                                    567 ;	walk.c:74: t->r = cur->r + neigh[j].r;
      00002E E5*00            [12]  568 	mov	a,_bp
      000030 24 FB            [12]  569 	add	a,#0xfb
      000032 F8               [12]  570 	mov	r0,a
      000033 86 02            [24]  571 	mov	ar2,@r0
      000035 08               [12]  572 	inc	r0
      000036 86 03            [24]  573 	mov	ar3,@r0
      000038 08               [12]  574 	inc	r0
      000039 86 04            [24]  575 	mov	ar4,@r0
      00003B 8A 82            [24]  576 	mov	dpl,r2
      00003D 8B 83            [24]  577 	mov	dph,r3
      00003F 8C F0            [24]  578 	mov	b,r4
      000041 E5*00            [12]  579 	mov	a,_bp
      000043 24 04            [12]  580 	add	a,#0x04
      000045 F8               [12]  581 	mov	r0,a
      000046 12r00r00         [24]  582 	lcall	__gptrget
      000049 F6               [12]  583 	mov	@r0,a
      00004A A3               [24]  584 	inc	dptr
      00004B 12r00r00         [24]  585 	lcall	__gptrget
      00004E 08               [12]  586 	inc	r0
      00004F F6               [12]  587 	mov	@r0,a
      000050 E5*00            [12]  588 	mov	a,_bp
      000052 24 FA            [12]  589 	add	a,#0xfa
      000054 F8               [12]  590 	mov	r0,a
      000055 E6               [12]  591 	mov	a,@r0
      000056 26               [12]  592 	add	a,@r0
      000057 25 E0            [12]  593 	add	a,acc
      000059 FD               [12]  594 	mov	r5,a
      00005A 24r01            [12]  595 	add	a,#_neigh
      00005C F9               [12]  596 	mov	r1,a
      00005D 87 07            [24]  597 	mov	ar7,@r1
      00005F 09               [12]  598 	inc	r1
      000060 87 06            [24]  599 	mov	ar6,@r1
      000062 E5*00            [12]  600 	mov	a,_bp
      000064 24 04            [12]  601 	add	a,#0x04
      000066 F8               [12]  602 	mov	r0,a
      000067 EF               [12]  603 	mov	a,r7
      000068 26               [12]  604 	add	a,@r0
      000069 FF               [12]  605 	mov	r7,a
      00006A EE               [12]  606 	mov	a,r6
      00006B 08               [12]  607 	inc	r0
      00006C 36               [12]  608 	addc	a,@r0
      00006D FE               [12]  609 	mov	r6,a
      00006E A8*00            [24]  610 	mov	r0,_bp
      000070 08               [12]  611 	inc	r0
      000071 86 82            [24]  612 	mov	dpl,@r0
      000073 08               [12]  613 	inc	r0
      000074 86 83            [24]  614 	mov	dph,@r0
      000076 08               [12]  615 	inc	r0
      000077 86 F0            [24]  616 	mov	b,@r0
      000079 EF               [12]  617 	mov	a,r7
      00007A 12r00r00         [24]  618 	lcall	__gptrput
      00007D A3               [24]  619 	inc	dptr
      00007E EE               [12]  620 	mov	a,r6
      00007F 12r00r00         [24]  621 	lcall	__gptrput
                                    622 ;	walk.c:75: t->c = cur->c + neigh[j].c;
      000082 A8*00            [24]  623 	mov	r0,_bp
      000084 08               [12]  624 	inc	r0
      000085 E5*00            [12]  625 	mov	a,_bp
      000087 24 06            [12]  626 	add	a,#0x06
      000089 F9               [12]  627 	mov	r1,a
      00008A 74 02            [12]  628 	mov	a,#0x02
      00008C 26               [12]  629 	add	a,@r0
      00008D F7               [12]  630 	mov	@r1,a
      00008E E4               [12]  631 	clr	a
      00008F 08               [12]  632 	inc	r0
      000090 36               [12]  633 	addc	a,@r0
      000091 09               [12]  634 	inc	r1
      000092 F7               [12]  635 	mov	@r1,a
      000093 08               [12]  636 	inc	r0
      000094 09               [12]  637 	inc	r1
      000095 E6               [12]  638 	mov	a,@r0
      000096 F7               [12]  639 	mov	@r1,a
      000097 74 02            [12]  640 	mov	a,#0x02
      000099 2A               [12]  641 	add	a,r2
      00009A FA               [12]  642 	mov	r2,a
      00009B E4               [12]  643 	clr	a
      00009C 3B               [12]  644 	addc	a,r3
      00009D FB               [12]  645 	mov	r3,a
      00009E 8A 82            [24]  646 	mov	dpl,r2
      0000A0 8B 83            [24]  647 	mov	dph,r3
      0000A2 8C F0            [24]  648 	mov	b,r4
      0000A4 12r00r00         [24]  649 	lcall	__gptrget
      0000A7 FA               [12]  650 	mov	r2,a
      0000A8 A3               [24]  651 	inc	dptr
      0000A9 12r00r00         [24]  652 	lcall	__gptrget
      0000AC FB               [12]  653 	mov	r3,a
      0000AD ED               [12]  654 	mov	a,r5
      0000AE 24r01            [12]  655 	add	a,#_neigh
      0000B0 24 02            [12]  656 	add	a,#0x02
      0000B2 F9               [12]  657 	mov	r1,a
      0000B3 87 04            [24]  658 	mov	ar4,@r1
      0000B5 09               [12]  659 	inc	r1
      0000B6 87 05            [24]  660 	mov	ar5,@r1
      0000B8 EC               [12]  661 	mov	a,r4
      0000B9 2A               [12]  662 	add	a,r2
      0000BA FA               [12]  663 	mov	r2,a
      0000BB ED               [12]  664 	mov	a,r5
      0000BC 3B               [12]  665 	addc	a,r3
      0000BD FB               [12]  666 	mov	r3,a
      0000BE E5*00            [12]  667 	mov	a,_bp
      0000C0 24 06            [12]  668 	add	a,#0x06
      0000C2 F8               [12]  669 	mov	r0,a
      0000C3 86 82            [24]  670 	mov	dpl,@r0
      0000C5 08               [12]  671 	inc	r0
      0000C6 86 83            [24]  672 	mov	dph,@r0
      0000C8 08               [12]  673 	inc	r0
      0000C9 86 F0            [24]  674 	mov	b,@r0
      0000CB EA               [12]  675 	mov	a,r2
      0000CC 12r00r00         [24]  676 	lcall	__gptrput
      0000CF A3               [24]  677 	inc	dptr
      0000D0 EB               [12]  678 	mov	a,r3
      0000D1 12r00r00         [24]  679 	lcall	__gptrput
                                    680 ;	walk.c:77: if (t->r < 0) t->r += ROWS;
      0000D4 A8*00            [24]  681 	mov	r0,_bp
      0000D6 08               [12]  682 	inc	r0
      0000D7 86 82            [24]  683 	mov	dpl,@r0
      0000D9 08               [12]  684 	inc	r0
      0000DA 86 83            [24]  685 	mov	dph,@r0
      0000DC 08               [12]  686 	inc	r0
      0000DD 86 F0            [24]  687 	mov	b,@r0
      0000DF 12r00r00         [24]  688 	lcall	__gptrget
      0000E2 FD               [12]  689 	mov	r5,a
      0000E3 A3               [24]  690 	inc	dptr
      0000E4 12r00r00         [24]  691 	lcall	__gptrget
      0000E7 FC               [12]  692 	mov	r4,a
      0000E8 EE               [12]  693 	mov	a,r6
      0000E9 30 E7 1D         [24]  694 	jnb	acc.7,00104$
      0000EC 74 30            [12]  695 	mov	a,#0x30
      0000EE 2D               [12]  696 	add	a,r5
      0000EF FF               [12]  697 	mov	r7,a
      0000F0 E4               [12]  698 	clr	a
      0000F1 3C               [12]  699 	addc	a,r4
      0000F2 FE               [12]  700 	mov	r6,a
      0000F3 A8*00            [24]  701 	mov	r0,_bp
      0000F5 08               [12]  702 	inc	r0
      0000F6 86 82            [24]  703 	mov	dpl,@r0
      0000F8 08               [12]  704 	inc	r0
      0000F9 86 83            [24]  705 	mov	dph,@r0
      0000FB 08               [12]  706 	inc	r0
      0000FC 86 F0            [24]  707 	mov	b,@r0
      0000FE EF               [12]  708 	mov	a,r7
      0000FF 12r00r00         [24]  709 	lcall	__gptrput
      000102 A3               [24]  710 	inc	dptr
      000103 EE               [12]  711 	mov	a,r6
      000104 12r00r00         [24]  712 	lcall	__gptrput
      000107 80 27            [24]  713 	sjmp	00105$
      000109                        714 00104$:
                                    715 ;	walk.c:78: else if (t->r >= ROWS) t->r -= ROWS;
      000109 C3               [12]  716 	clr	c
      00010A ED               [12]  717 	mov	a,r5
      00010B 94 30            [12]  718 	subb	a,#0x30
      00010D EC               [12]  719 	mov	a,r4
      00010E 64 80            [12]  720 	xrl	a,#0x80
      000110 94 80            [12]  721 	subb	a,#0x80
      000112 40 1C            [24]  722 	jc	00105$
      000114 ED               [12]  723 	mov	a,r5
      000115 24 D0            [12]  724 	add	a,#0xd0
      000117 FD               [12]  725 	mov	r5,a
      000118 EC               [12]  726 	mov	a,r4
      000119 34 FF            [12]  727 	addc	a,#0xff
      00011B FC               [12]  728 	mov	r4,a
      00011C A8*00            [24]  729 	mov	r0,_bp
      00011E 08               [12]  730 	inc	r0
      00011F 86 82            [24]  731 	mov	dpl,@r0
      000121 08               [12]  732 	inc	r0
      000122 86 83            [24]  733 	mov	dph,@r0
      000124 08               [12]  734 	inc	r0
      000125 86 F0            [24]  735 	mov	b,@r0
      000127 ED               [12]  736 	mov	a,r5
      000128 12r00r00         [24]  737 	lcall	__gptrput
      00012B A3               [24]  738 	inc	dptr
      00012C EC               [12]  739 	mov	a,r4
      00012D 12r00r00         [24]  740 	lcall	__gptrput
      000130                        741 00105$:
                                    742 ;	walk.c:79: if (t->c < 0) t->c += COLS;
      000130 E5*00            [12]  743 	mov	a,_bp
      000132 24 06            [12]  744 	add	a,#0x06
      000134 F8               [12]  745 	mov	r0,a
      000135 86 82            [24]  746 	mov	dpl,@r0
      000137 08               [12]  747 	inc	r0
      000138 86 83            [24]  748 	mov	dph,@r0
      00013A 08               [12]  749 	inc	r0
      00013B 86 F0            [24]  750 	mov	b,@r0
      00013D 12r00r00         [24]  751 	lcall	__gptrget
      000140 A3               [24]  752 	inc	dptr
      000141 12r00r00         [24]  753 	lcall	__gptrget
      000144 30 E7 35         [24]  754 	jnb	acc.7,00109$
      000147 E5*00            [12]  755 	mov	a,_bp
      000149 24 06            [12]  756 	add	a,#0x06
      00014B F8               [12]  757 	mov	r0,a
      00014C 86 82            [24]  758 	mov	dpl,@r0
      00014E 08               [12]  759 	inc	r0
      00014F 86 83            [24]  760 	mov	dph,@r0
      000151 08               [12]  761 	inc	r0
      000152 86 F0            [24]  762 	mov	b,@r0
      000154 12r00r00         [24]  763 	lcall	__gptrget
      000157 FE               [12]  764 	mov	r6,a
      000158 A3               [24]  765 	inc	dptr
      000159 12r00r00         [24]  766 	lcall	__gptrget
      00015C FF               [12]  767 	mov	r7,a
      00015D 74 C0            [12]  768 	mov	a,#0xc0
      00015F 2E               [12]  769 	add	a,r6
      000160 FE               [12]  770 	mov	r6,a
      000161 E4               [12]  771 	clr	a
      000162 3F               [12]  772 	addc	a,r7
      000163 FF               [12]  773 	mov	r7,a
      000164 E5*00            [12]  774 	mov	a,_bp
      000166 24 06            [12]  775 	add	a,#0x06
      000168 F8               [12]  776 	mov	r0,a
      000169 86 82            [24]  777 	mov	dpl,@r0
      00016B 08               [12]  778 	inc	r0
      00016C 86 83            [24]  779 	mov	dph,@r0
      00016E 08               [12]  780 	inc	r0
      00016F 86 F0            [24]  781 	mov	b,@r0
      000171 EE               [12]  782 	mov	a,r6
      000172 12r00r00         [24]  783 	lcall	__gptrput
      000175 A3               [24]  784 	inc	dptr
      000176 EF               [12]  785 	mov	a,r7
      000177 12r00r00         [24]  786 	lcall	__gptrput
      00017A 80 55            [24]  787 	sjmp	00110$
      00017C                        788 00109$:
                                    789 ;	walk.c:80: else if (t->c >= COLS) t->c -= COLS;
      00017C E5*00            [12]  790 	mov	a,_bp
      00017E 24 06            [12]  791 	add	a,#0x06
      000180 F8               [12]  792 	mov	r0,a
      000181 86 82            [24]  793 	mov	dpl,@r0
      000183 08               [12]  794 	inc	r0
      000184 86 83            [24]  795 	mov	dph,@r0
      000186 08               [12]  796 	inc	r0
      000187 86 F0            [24]  797 	mov	b,@r0
      000189 12r00r00         [24]  798 	lcall	__gptrget
      00018C FE               [12]  799 	mov	r6,a
      00018D A3               [24]  800 	inc	dptr
      00018E 12r00r00         [24]  801 	lcall	__gptrget
      000191 FF               [12]  802 	mov	r7,a
      000192 C3               [12]  803 	clr	c
      000193 EE               [12]  804 	mov	a,r6
      000194 94 C0            [12]  805 	subb	a,#0xc0
      000196 EF               [12]  806 	mov	a,r7
      000197 64 80            [12]  807 	xrl	a,#0x80
      000199 94 80            [12]  808 	subb	a,#0x80
      00019B 40 34            [24]  809 	jc	00110$
      00019D E5*00            [12]  810 	mov	a,_bp
      00019F 24 06            [12]  811 	add	a,#0x06
      0001A1 F8               [12]  812 	mov	r0,a
      0001A2 86 82            [24]  813 	mov	dpl,@r0
      0001A4 08               [12]  814 	inc	r0
      0001A5 86 83            [24]  815 	mov	dph,@r0
      0001A7 08               [12]  816 	inc	r0
      0001A8 86 F0            [24]  817 	mov	b,@r0
      0001AA 12r00r00         [24]  818 	lcall	__gptrget
      0001AD FE               [12]  819 	mov	r6,a
      0001AE A3               [24]  820 	inc	dptr
      0001AF 12r00r00         [24]  821 	lcall	__gptrget
      0001B2 FF               [12]  822 	mov	r7,a
      0001B3 EE               [12]  823 	mov	a,r6
      0001B4 24 40            [12]  824 	add	a,#0x40
      0001B6 FE               [12]  825 	mov	r6,a
      0001B7 EF               [12]  826 	mov	a,r7
      0001B8 34 FF            [12]  827 	addc	a,#0xff
      0001BA FF               [12]  828 	mov	r7,a
      0001BB E5*00            [12]  829 	mov	a,_bp
      0001BD 24 06            [12]  830 	add	a,#0x06
      0001BF F8               [12]  831 	mov	r0,a
      0001C0 86 82            [24]  832 	mov	dpl,@r0
      0001C2 08               [12]  833 	inc	r0
      0001C3 86 83            [24]  834 	mov	dph,@r0
      0001C5 08               [12]  835 	inc	r0
      0001C6 86 F0            [24]  836 	mov	b,@r0
      0001C8 EE               [12]  837 	mov	a,r6
      0001C9 12r00r00         [24]  838 	lcall	__gptrput
      0001CC A3               [24]  839 	inc	dptr
      0001CD EF               [12]  840 	mov	a,r7
      0001CE 12r00r00         [24]  841 	lcall	__gptrput
      0001D1                        842 00110$:
                                    843 ;	walk.c:82: if (g[t->r][t->c] == 0xaa) return 0;
      0001D1 A8*00            [24]  844 	mov	r0,_bp
      0001D3 08               [12]  845 	inc	r0
      0001D4 86 82            [24]  846 	mov	dpl,@r0
      0001D6 08               [12]  847 	inc	r0
      0001D7 86 83            [24]  848 	mov	dph,@r0
      0001D9 08               [12]  849 	inc	r0
      0001DA 86 F0            [24]  850 	mov	b,@r0
      0001DC 12r00r00         [24]  851 	lcall	__gptrget
      0001DF FE               [12]  852 	mov	r6,a
      0001E0 A3               [24]  853 	inc	dptr
      0001E1 12r00r00         [24]  854 	lcall	__gptrget
      0001E4 FF               [12]  855 	mov	r7,a
      0001E5 C0 06            [24]  856 	push	ar6
      0001E7 C0 07            [24]  857 	push	ar7
      0001E9 90 00 C0         [24]  858 	mov	dptr,#0x00c0
      0001EC 12r00r00         [24]  859 	lcall	__mulint
      0001EF AE 82            [24]  860 	mov	r6,dpl
      0001F1 AF 83            [24]  861 	mov	r7,dph
      0001F3 15 81            [12]  862 	dec	sp
      0001F5 15 81            [12]  863 	dec	sp
      0001F7 EE               [12]  864 	mov	a,r6
      0001F8 24r00            [12]  865 	add	a,#_g
      0001FA FE               [12]  866 	mov	r6,a
      0001FB EF               [12]  867 	mov	a,r7
      0001FC 34s00            [12]  868 	addc	a,#(_g >> 8)
      0001FE FF               [12]  869 	mov	r7,a
      0001FF E5*00            [12]  870 	mov	a,_bp
      000201 24 06            [12]  871 	add	a,#0x06
      000203 F8               [12]  872 	mov	r0,a
      000204 86 82            [24]  873 	mov	dpl,@r0
      000206 08               [12]  874 	inc	r0
      000207 86 83            [24]  875 	mov	dph,@r0
      000209 08               [12]  876 	inc	r0
      00020A 86 F0            [24]  877 	mov	b,@r0
      00020C 12r00r00         [24]  878 	lcall	__gptrget
      00020F FC               [12]  879 	mov	r4,a
      000210 A3               [24]  880 	inc	dptr
      000211 12r00r00         [24]  881 	lcall	__gptrget
      000214 FD               [12]  882 	mov	r5,a
      000215 EC               [12]  883 	mov	a,r4
      000216 2E               [12]  884 	add	a,r6
      000217 F5 82            [12]  885 	mov	dpl,a
      000219 ED               [12]  886 	mov	a,r5
      00021A 3F               [12]  887 	addc	a,r7
      00021B F5 83            [12]  888 	mov	dph,a
      00021D E0               [24]  889 	movx	a,@dptr
      00021E FF               [12]  890 	mov	r7,a
      00021F BF AA 05         [24]  891 	cjne	r7,#0xaa,00114$
      000222 90 00 00         [24]  892 	mov	dptr,#0x0000
      000225 80 62            [24]  893 	sjmp	00116$
      000227                        894 00114$:
                                    895 ;	walk.c:83: else if (g[t->r][t->c] != 0x55) {
      000227 A8*00            [24]  896 	mov	r0,_bp
      000229 08               [12]  897 	inc	r0
      00022A 86 82            [24]  898 	mov	dpl,@r0
      00022C 08               [12]  899 	inc	r0
      00022D 86 83            [24]  900 	mov	dph,@r0
      00022F 08               [12]  901 	inc	r0
      000230 86 F0            [24]  902 	mov	b,@r0
      000232 12r00r00         [24]  903 	lcall	__gptrget
      000235 FE               [12]  904 	mov	r6,a
      000236 A3               [24]  905 	inc	dptr
      000237 12r00r00         [24]  906 	lcall	__gptrget
      00023A FF               [12]  907 	mov	r7,a
      00023B C0 06            [24]  908 	push	ar6
      00023D C0 07            [24]  909 	push	ar7
      00023F 90 00 C0         [24]  910 	mov	dptr,#0x00c0
      000242 12r00r00         [24]  911 	lcall	__mulint
      000245 AE 82            [24]  912 	mov	r6,dpl
      000247 AF 83            [24]  913 	mov	r7,dph
      000249 15 81            [12]  914 	dec	sp
      00024B 15 81            [12]  915 	dec	sp
      00024D EE               [12]  916 	mov	a,r6
      00024E 24r00            [12]  917 	add	a,#_g
      000250 FE               [12]  918 	mov	r6,a
      000251 EF               [12]  919 	mov	a,r7
      000252 34s00            [12]  920 	addc	a,#(_g >> 8)
      000254 FF               [12]  921 	mov	r7,a
      000255 E5*00            [12]  922 	mov	a,_bp
      000257 24 06            [12]  923 	add	a,#0x06
      000259 F8               [12]  924 	mov	r0,a
      00025A 86 82            [24]  925 	mov	dpl,@r0
      00025C 08               [12]  926 	inc	r0
      00025D 86 83            [24]  927 	mov	dph,@r0
      00025F 08               [12]  928 	inc	r0
      000260 86 F0            [24]  929 	mov	b,@r0
      000262 12r00r00         [24]  930 	lcall	__gptrget
      000265 FC               [12]  931 	mov	r4,a
      000266 A3               [24]  932 	inc	dptr
      000267 12r00r00         [24]  933 	lcall	__gptrget
      00026A FD               [12]  934 	mov	r5,a
      00026B EC               [12]  935 	mov	a,r4
      00026C 2E               [12]  936 	add	a,r6
      00026D F5 82            [12]  937 	mov	dpl,a
      00026F ED               [12]  938 	mov	a,r5
      000270 3F               [12]  939 	addc	a,r7
      000271 F5 83            [12]  940 	mov	dph,a
      000273 E0               [24]  941 	movx	a,@dptr
      000274 FF               [12]  942 	mov	r7,a
      000275 BF 55 02         [24]  943 	cjne	r7,#0x55,00148$
      000278 80 0C            [24]  944 	sjmp	00115$
      00027A                        945 00148$:
                                    946 ;	walk.c:84: (void)puts("Memory error");
      00027A 90r00r00         [24]  947 	mov	dptr,#___str_0
      00027D 75 F0 80         [24]  948 	mov	b,#0x80
      000280 12r00r00         [24]  949 	lcall	_puts
                                    950 ;	walk.c:85: reset();
      000283 12r00r1A         [24]  951 	lcall	_reset
      000286                        952 00115$:
                                    953 ;	walk.c:88: return 1;
      000286 90 00 01         [24]  954 	mov	dptr,#0x0001
      000289                        955 00116$:
                                    956 ;	walk.c:89: }
      000289 85*00 81         [24]  957 	mov	sp,_bp
      00028C D0*00            [24]  958 	pop	_bp
      00028E 22               [24]  959 	ret
                                    960 ;------------------------------------------------------------
                                    961 ;Allocation info for local variables in function 'walk'
                                    962 ;------------------------------------------------------------
                                    963 ;nstart                    Allocated to registers 
                                    964 ;cur                       Allocated to stack - _bp +10
                                    965 ;t                         Allocated to stack - _bp +14
                                    966 ;j                         Allocated to stack - _bp +18
                                    967 ;f                         Allocated to registers r3 
                                    968 ;sloc0                     Allocated to stack - _bp +1
                                    969 ;sloc1                     Allocated to stack - _bp +2
                                    970 ;sloc2                     Allocated to stack - _bp +3
                                    971 ;sloc3                     Allocated to stack - _bp +17
                                    972 ;sloc4                     Allocated to stack - _bp +4
                                    973 ;sloc5                     Allocated to stack - _bp +5
                                    974 ;sloc6                     Allocated to stack - _bp +6
                                    975 ;sloc7                     Allocated to stack - _bp +7
                                    976 ;------------------------------------------------------------
                                    977 ;	walk.c:91: static void walk(struct node *nstart) {
                                    978 ;	-----------------------------------------
                                    979 ;	 function walk
                                    980 ;	-----------------------------------------
      00028F                        981 _walk:
      00028F C0*00            [24]  982 	push	_bp
      000291 E5 81            [12]  983 	mov	a,sp
      000293 F5*00            [12]  984 	mov	_bp,a
      000295 24 12            [12]  985 	add	a,#0x12
      000297 F5 81            [12]  986 	mov	sp,a
      000299 AD 82            [24]  987 	mov	r5,dpl
      00029B AE 83            [24]  988 	mov	r6,dph
      00029D AF F0            [24]  989 	mov	r7,b
                                    990 ;	walk.c:95: cur = *nstart;
      00029F E5*00            [12]  991 	mov	a,_bp
      0002A1 24 0A            [12]  992 	add	a,#0x0a
      0002A3 F9               [12]  993 	mov	r1,a
      0002A4 FA               [12]  994 	mov	r2,a
      0002A5 7B 00            [12]  995 	mov	r3,#0x00
      0002A7 7C 40            [12]  996 	mov	r4,#0x40
      0002A9 C0 01            [24]  997 	push	ar1
      0002AB 74 04            [12]  998 	mov	a,#0x04
      0002AD C0 E0            [24]  999 	push	acc
      0002AF E4               [12] 1000 	clr	a
      0002B0 C0 E0            [24] 1001 	push	acc
      0002B2 C0 05            [24] 1002 	push	ar5
      0002B4 C0 06            [24] 1003 	push	ar6
      0002B6 C0 07            [24] 1004 	push	ar7
      0002B8 8A 82            [24] 1005 	mov	dpl,r2
      0002BA 8B 83            [24] 1006 	mov	dph,r3
      0002BC 8C F0            [24] 1007 	mov	b,r4
      0002BE 12r00r00         [24] 1008 	lcall	___memcpy
      0002C1 E5 81            [12] 1009 	mov	a,sp
      0002C3 24 FB            [12] 1010 	add	a,#0xfb
      0002C5 F5 81            [12] 1011 	mov	sp,a
      0002C7 D0 01            [24] 1012 	pop	ar1
                                   1013 ;	walk.c:97: process:
      0002C9 E5*00            [12] 1014 	mov	a,_bp
      0002CB 24 06            [12] 1015 	add	a,#0x06
      0002CD F8               [12] 1016 	mov	r0,a
      0002CE A6 01            [24] 1017 	mov	@r0,ar1
      0002D0 E5*00            [12] 1018 	mov	a,_bp
      0002D2 24 0E            [12] 1019 	add	a,#0x0e
      0002D4 FE               [12] 1020 	mov	r6,a
      0002D5 E5*00            [12] 1021 	mov	a,_bp
      0002D7 24 03            [12] 1022 	add	a,#0x03
      0002D9 F8               [12] 1023 	mov	r0,a
      0002DA A6 01            [24] 1024 	mov	@r0,ar1
      0002DC E5*00            [12] 1025 	mov	a,_bp
      0002DE 24 05            [12] 1026 	add	a,#0x05
      0002E0 F8               [12] 1027 	mov	r0,a
      0002E1 A6 01            [24] 1028 	mov	@r0,ar1
      0002E3 E5*00            [12] 1029 	mov	a,_bp
      0002E5 24 04            [12] 1030 	add	a,#0x04
      0002E7 F8               [12] 1031 	mov	r0,a
      0002E8 A6 06            [24] 1032 	mov	@r0,ar6
      0002EA 89 02            [24] 1033 	mov	ar2,r1
      0002EC A8*00            [24] 1034 	mov	r0,_bp
      0002EE 08               [12] 1035 	inc	r0
      0002EF A6 06            [24] 1036 	mov	@r0,ar6
      0002F1 A8*00            [24] 1037 	mov	r0,_bp
      0002F3 08               [12] 1038 	inc	r0
      0002F4 08               [12] 1039 	inc	r0
      0002F5 A6 01            [24] 1040 	mov	@r0,ar1
      0002F7 74 02            [12] 1041 	mov	a,#0x02
      0002F9 29               [12] 1042 	add	a,r1
      0002FA F8               [12] 1043 	mov	r0,a
      0002FB                       1044 00101$:
                                   1045 ;	walk.c:98: g[cur.r][cur.c] = 0xaa;
      0002FB C0 02            [24] 1046 	push	ar2
      0002FD 87 02            [24] 1047 	mov	ar2,@r1
      0002FF 09               [12] 1048 	inc	r1
      000300 87 05            [24] 1049 	mov	ar5,@r1
      000302 19               [12] 1050 	dec	r1
      000303 C0 06            [24] 1051 	push	ar6
      000305 C0 01            [24] 1052 	push	ar1
      000307 C0 00            [24] 1053 	push	ar0
      000309 C0 02            [24] 1054 	push	ar2
      00030B C0 05            [24] 1055 	push	ar5
      00030D 90 00 C0         [24] 1056 	mov	dptr,#0x00c0
      000310 12r00r00         [24] 1057 	lcall	__mulint
      000313 AA 82            [24] 1058 	mov	r2,dpl
      000315 AD 83            [24] 1059 	mov	r5,dph
      000317 15 81            [12] 1060 	dec	sp
      000319 15 81            [12] 1061 	dec	sp
      00031B D0 00            [24] 1062 	pop	ar0
      00031D D0 01            [24] 1063 	pop	ar1
      00031F EA               [12] 1064 	mov	a,r2
      000320 24r00            [12] 1065 	add	a,#_g
      000322 FF               [12] 1066 	mov	r7,a
      000323 ED               [12] 1067 	mov	a,r5
      000324 34s00            [12] 1068 	addc	a,#(_g >> 8)
      000326 FC               [12] 1069 	mov	r4,a
      000327 86 02            [24] 1070 	mov	ar2,@r0
      000329 08               [12] 1071 	inc	r0
      00032A 86 05            [24] 1072 	mov	ar5,@r0
      00032C 18               [12] 1073 	dec	r0
      00032D EA               [12] 1074 	mov	a,r2
      00032E 2F               [12] 1075 	add	a,r7
      00032F F5 82            [12] 1076 	mov	dpl,a
      000331 ED               [12] 1077 	mov	a,r5
      000332 3C               [12] 1078 	addc	a,r4
      000333 F5 83            [12] 1079 	mov	dph,a
      000335 74 AA            [12] 1080 	mov	a,#0xaa
      000337 F0               [24] 1081 	movx	@dptr,a
                                   1082 ;	walk.c:99: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000338 86 02            [24] 1083 	mov	ar2,@r0
      00033A 08               [12] 1084 	inc	r0
      00033B 86 05            [24] 1085 	mov	ar5,@r0
      00033D 18               [12] 1086 	dec	r0
      00033E 74 01            [12] 1087 	mov	a,#0x01
      000340 2A               [12] 1088 	add	a,r2
      000341 FF               [12] 1089 	mov	r7,a
      000342 E4               [12] 1090 	clr	a
      000343 3D               [12] 1091 	addc	a,r5
      000344 FC               [12] 1092 	mov	r4,a
      000345 87 02            [24] 1093 	mov	ar2,@r1
      000347 09               [12] 1094 	inc	r1
      000348 87 05            [24] 1095 	mov	ar5,@r1
      00034A 19               [12] 1096 	dec	r1
      00034B 74 04            [12] 1097 	mov	a,#0x04
      00034D 2A               [12] 1098 	add	a,r2
      00034E FA               [12] 1099 	mov	r2,a
      00034F E4               [12] 1100 	clr	a
      000350 3D               [12] 1101 	addc	a,r5
      000351 FD               [12] 1102 	mov	r5,a
      000352 C0 02            [24] 1103 	push	ar2
      000354 C0 01            [24] 1104 	push	ar1
      000356 C0 00            [24] 1105 	push	ar0
      000358 C0 07            [24] 1106 	push	ar7
      00035A C0 04            [24] 1107 	push	ar4
      00035C C0 02            [24] 1108 	push	ar2
      00035E C0 05            [24] 1109 	push	ar5
      000360 74r0D            [12] 1110 	mov	a,#___str_1
      000362 C0 E0            [24] 1111 	push	acc
      000364 74s00            [12] 1112 	mov	a,#(___str_1 >> 8)
      000366 C0 E0            [24] 1113 	push	acc
      000368 74 80            [12] 1114 	mov	a,#0x80
      00036A C0 E0            [24] 1115 	push	acc
      00036C 12r00r00         [24] 1116 	lcall	_printf
      00036F E5 81            [12] 1117 	mov	a,sp
      000371 24 F9            [12] 1118 	add	a,#0xf9
      000373 F5 81            [12] 1119 	mov	sp,a
      000375 D0 00            [24] 1120 	pop	ar0
      000377 D0 01            [24] 1121 	pop	ar1
      000379 D0 02            [24] 1122 	pop	ar2
      00037B D0 06            [24] 1123 	pop	ar6
                                   1124 ;	walk.c:129: return;
      00037D D0 02            [24] 1125 	pop	ar2
                                   1126 ;	walk.c:101: next:
      00037F                       1127 00102$:
                                   1128 ;	walk.c:102: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      00037F C0 02            [24] 1129 	push	ar2
      000381 86 07            [24] 1130 	mov	ar7,@r0
      000383 08               [12] 1131 	inc	r0
      000384 86 04            [24] 1132 	mov	ar4,@r0
      000386 18               [12] 1133 	dec	r0
      000387 87 02            [24] 1134 	mov	ar2,@r1
      000389 09               [12] 1135 	inc	r1
      00038A 87 05            [24] 1136 	mov	ar5,@r1
      00038C 19               [12] 1137 	dec	r1
      00038D C0 06            [24] 1138 	push	ar6
      00038F C0 02            [24] 1139 	push	ar2
      000391 C0 01            [24] 1140 	push	ar1
      000393 C0 00            [24] 1141 	push	ar0
      000395 C0 07            [24] 1142 	push	ar7
      000397 C0 04            [24] 1143 	push	ar4
      000399 C0 02            [24] 1144 	push	ar2
      00039B C0 05            [24] 1145 	push	ar5
      00039D 90rB4r00         [24] 1146 	mov	dptr,#_sp
      0003A0 E0               [24] 1147 	movx	a,@dptr
      0003A1 C0 E0            [24] 1148 	push	acc
      0003A3 A3               [24] 1149 	inc	dptr
      0003A4 E0               [24] 1150 	movx	a,@dptr
      0003A5 C0 E0            [24] 1151 	push	acc
      0003A7 74r17            [12] 1152 	mov	a,#___str_2
      0003A9 C0 E0            [24] 1153 	push	acc
      0003AB 74s00            [12] 1154 	mov	a,#(___str_2 >> 8)
      0003AD C0 E0            [24] 1155 	push	acc
      0003AF 74 80            [12] 1156 	mov	a,#0x80
      0003B1 C0 E0            [24] 1157 	push	acc
      0003B3 12r00r00         [24] 1158 	lcall	_printf
      0003B6 E5 81            [12] 1159 	mov	a,sp
      0003B8 24 F7            [12] 1160 	add	a,#0xf7
      0003BA F5 81            [12] 1161 	mov	sp,a
      0003BC D0 00            [24] 1162 	pop	ar0
      0003BE D0 01            [24] 1163 	pop	ar1
      0003C0 D0 02            [24] 1164 	pop	ar2
      0003C2 D0 06            [24] 1165 	pop	ar6
                                   1166 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      0003C4 7B 00            [12] 1167 	mov	r3,#0x00
      0003C6 C0 00            [24] 1168 	push	ar0
      0003C8 E5*00            [12] 1169 	mov	a,_bp
      0003CA 24 12            [12] 1170 	add	a,#0x12
      0003CC F8               [12] 1171 	mov	r0,a
      0003CD 76 00            [12] 1172 	mov	@r0,#0x00
      0003CF D0 00            [24] 1173 	pop	ar0
                                   1174 ;	walk.c:129: return;
      0003D1 D0 02            [24] 1175 	pop	ar2
                                   1176 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      0003D3                       1177 00120$:
      0003D3 C0 00            [24] 1178 	push	ar0
      0003D5 E5*00            [12] 1179 	mov	a,_bp
      0003D7 24 12            [12] 1180 	add	a,#0x12
      0003D9 F8               [12] 1181 	mov	r0,a
      0003DA B6 08 00         [24] 1182 	cjne	@r0,#0x08,00160$
      0003DD                       1183 00160$:
      0003DD D0 00            [24] 1184 	pop	ar0
      0003DF 40 03            [24] 1185 	jc	00161$
      0003E1 02r04r61         [24] 1186 	ljmp	00106$
      0003E4                       1187 00161$:
                                   1188 ;	walk.c:105: if (!update(&t, &cur, j)) continue;
      0003E4 C0 02            [24] 1189 	push	ar2
      0003E6 C0 00            [24] 1190 	push	ar0
      0003E8 E5*00            [12] 1191 	mov	a,_bp
      0003EA 24 06            [12] 1192 	add	a,#0x06
      0003EC F8               [12] 1193 	mov	r0,a
      0003ED C0 01            [24] 1194 	push	ar1
      0003EF E5*00            [12] 1195 	mov	a,_bp
      0003F1 24 07            [12] 1196 	add	a,#0x07
      0003F3 F9               [12] 1197 	mov	r1,a
      0003F4 E6               [12] 1198 	mov	a,@r0
      0003F5 F7               [12] 1199 	mov	@r1,a
      0003F6 09               [12] 1200 	inc	r1
      0003F7 77 00            [12] 1201 	mov	@r1,#0x00
      0003F9 09               [12] 1202 	inc	r1
      0003FA 77 40            [12] 1203 	mov	@r1,#0x40
      0003FC D0 01            [24] 1204 	pop	ar1
      0003FE D0 00            [24] 1205 	pop	ar0
      000400 8E 04            [24] 1206 	mov	ar4,r6
      000402 7D 00            [12] 1207 	mov	r5,#0x00
      000404 7F 40            [12] 1208 	mov	r7,#0x40
      000406 C0 06            [24] 1209 	push	ar6
      000408 C0 03            [24] 1210 	push	ar3
      00040A C0 02            [24] 1211 	push	ar2
      00040C C0 01            [24] 1212 	push	ar1
      00040E C0 00            [24] 1213 	push	ar0
      000410 85 00 F0         [24] 1214 	mov	b,ar0
      000413 E5*00            [12] 1215 	mov	a,_bp
      000415 24 12            [12] 1216 	add	a,#0x12
      000417 F8               [12] 1217 	mov	r0,a
      000418 E6               [12] 1218 	mov	a,@r0
      000419 C0 E0            [24] 1219 	push	acc
      00041B A8 F0            [24] 1220 	mov	r0,b
      00041D 85 00 F0         [24] 1221 	mov	b,ar0
      000420 E5*00            [12] 1222 	mov	a,_bp
      000422 24 07            [12] 1223 	add	a,#0x07
      000424 F8               [12] 1224 	mov	r0,a
      000425 E6               [12] 1225 	mov	a,@r0
      000426 C0 E0            [24] 1226 	push	acc
      000428 08               [12] 1227 	inc	r0
      000429 E6               [12] 1228 	mov	a,@r0
      00042A C0 E0            [24] 1229 	push	acc
      00042C 08               [12] 1230 	inc	r0
      00042D E6               [12] 1231 	mov	a,@r0
      00042E C0 E0            [24] 1232 	push	acc
      000430 8C 82            [24] 1233 	mov	dpl,r4
      000432 8D 83            [24] 1234 	mov	dph,r5
      000434 8F F0            [24] 1235 	mov	b,r7
      000436 12r00r1D         [24] 1236 	lcall	_update
      000439 AD 82            [24] 1237 	mov	r5,dpl
      00043B AF 83            [24] 1238 	mov	r7,dph
      00043D E5 81            [12] 1239 	mov	a,sp
      00043F 24 FC            [12] 1240 	add	a,#0xfc
      000441 F5 81            [12] 1241 	mov	sp,a
      000443 D0 00            [24] 1242 	pop	ar0
      000445 D0 01            [24] 1243 	pop	ar1
      000447 D0 02            [24] 1244 	pop	ar2
      000449 D0 03            [24] 1245 	pop	ar3
      00044B D0 06            [24] 1246 	pop	ar6
      00044D D0 02            [24] 1247 	pop	ar2
      00044F ED               [12] 1248 	mov	a,r5
      000450 4F               [12] 1249 	orl	a,r7
      000451 60 01            [24] 1250 	jz	00105$
                                   1251 ;	walk.c:106: f++;
      000453 0B               [12] 1252 	inc	r3
      000454                       1253 00105$:
                                   1254 ;	walk.c:104: for (j = 0, f = 0; j < NMAX; j++) {
      000454 C0 00            [24] 1255 	push	ar0
      000456 E5*00            [12] 1256 	mov	a,_bp
      000458 24 12            [12] 1257 	add	a,#0x12
      00045A F8               [12] 1258 	mov	r0,a
      00045B 06               [12] 1259 	inc	@r0
      00045C D0 00            [24] 1260 	pop	ar0
      00045E 02r03rD3         [24] 1261 	ljmp	00120$
      000461                       1262 00106$:
                                   1263 ;	walk.c:109: if (f) {
      000461 EB               [12] 1264 	mov	a,r3
      000462 70 03            [24] 1265 	jnz	00163$
      000464 02r05rA2         [24] 1266 	ljmp	00115$
      000467                       1267 00163$:
                                   1268 ;	walk.c:110: while (1) {
      000467                       1269 00112$:
                                   1270 ;	walk.c:111: j = rand() % NMAX;
      000467 C0 02            [24] 1271 	push	ar2
      000469 C0 06            [24] 1272 	push	ar6
      00046B C0 02            [24] 1273 	push	ar2
      00046D C0 01            [24] 1274 	push	ar1
      00046F C0 00            [24] 1275 	push	ar0
      000471 12r00r00         [24] 1276 	lcall	_rand
      000474 AD 82            [24] 1277 	mov	r5,dpl
      000476 AF 83            [24] 1278 	mov	r7,dph
      000478 74 08            [12] 1279 	mov	a,#0x08
      00047A C0 E0            [24] 1280 	push	acc
      00047C E4               [12] 1281 	clr	a
      00047D C0 E0            [24] 1282 	push	acc
      00047F 8D 82            [24] 1283 	mov	dpl,r5
      000481 8F 83            [24] 1284 	mov	dph,r7
      000483 12r00r00         [24] 1285 	lcall	__modsint
      000486 AD 82            [24] 1286 	mov	r5,dpl
      000488 15 81            [12] 1287 	dec	sp
      00048A 15 81            [12] 1288 	dec	sp
      00048C D0 00            [24] 1289 	pop	ar0
      00048E D0 01            [24] 1290 	pop	ar1
      000490 D0 02            [24] 1291 	pop	ar2
      000492 D0 06            [24] 1292 	pop	ar6
      000494 8D 04            [24] 1293 	mov	ar4,r5
                                   1294 ;	walk.c:112: if (!update(&t, &cur, j)) continue;
      000496 C0 00            [24] 1295 	push	ar0
      000498 E5*00            [12] 1296 	mov	a,_bp
      00049A 24 05            [12] 1297 	add	a,#0x05
      00049C F8               [12] 1298 	mov	r0,a
      00049D C0 01            [24] 1299 	push	ar1
      00049F E5*00            [12] 1300 	mov	a,_bp
      0004A1 24 07            [12] 1301 	add	a,#0x07
      0004A3 F9               [12] 1302 	mov	r1,a
      0004A4 E6               [12] 1303 	mov	a,@r0
      0004A5 F7               [12] 1304 	mov	@r1,a
      0004A6 09               [12] 1305 	inc	r1
      0004A7 77 00            [12] 1306 	mov	@r1,#0x00
      0004A9 09               [12] 1307 	inc	r1
      0004AA 77 40            [12] 1308 	mov	@r1,#0x40
      0004AC D0 01            [24] 1309 	pop	ar1
      0004AE E5*00            [12] 1310 	mov	a,_bp
      0004B0 24 04            [12] 1311 	add	a,#0x04
      0004B2 F8               [12] 1312 	mov	r0,a
      0004B3 86 02            [24] 1313 	mov	ar2,@r0
      0004B5 7D 00            [12] 1314 	mov	r5,#0x00
      0004B7 7F 40            [12] 1315 	mov	r7,#0x40
      0004B9 D0 00            [24] 1316 	pop	ar0
      0004BB C0 06            [24] 1317 	push	ar6
      0004BD C0 02            [24] 1318 	push	ar2
      0004BF C0 01            [24] 1319 	push	ar1
      0004C1 C0 00            [24] 1320 	push	ar0
      0004C3 C0 04            [24] 1321 	push	ar4
      0004C5 85 00 F0         [24] 1322 	mov	b,ar0
      0004C8 E5*00            [12] 1323 	mov	a,_bp
      0004CA 24 07            [12] 1324 	add	a,#0x07
      0004CC F8               [12] 1325 	mov	r0,a
      0004CD E6               [12] 1326 	mov	a,@r0
      0004CE C0 E0            [24] 1327 	push	acc
      0004D0 08               [12] 1328 	inc	r0
      0004D1 E6               [12] 1329 	mov	a,@r0
      0004D2 C0 E0            [24] 1330 	push	acc
      0004D4 08               [12] 1331 	inc	r0
      0004D5 E6               [12] 1332 	mov	a,@r0
      0004D6 C0 E0            [24] 1333 	push	acc
      0004D8 8A 82            [24] 1334 	mov	dpl,r2
      0004DA 8D 83            [24] 1335 	mov	dph,r5
      0004DC 8F F0            [24] 1336 	mov	b,r7
      0004DE 12r00r1D         [24] 1337 	lcall	_update
      0004E1 AD 82            [24] 1338 	mov	r5,dpl
      0004E3 AF 83            [24] 1339 	mov	r7,dph
      0004E5 E5 81            [12] 1340 	mov	a,sp
      0004E7 24 FC            [12] 1341 	add	a,#0xfc
      0004E9 F5 81            [12] 1342 	mov	sp,a
      0004EB D0 00            [24] 1343 	pop	ar0
      0004ED D0 01            [24] 1344 	pop	ar1
      0004EF D0 02            [24] 1345 	pop	ar2
      0004F1 D0 06            [24] 1346 	pop	ar6
      0004F3 D0 02            [24] 1347 	pop	ar2
      0004F5 ED               [12] 1348 	mov	a,r5
      0004F6 4F               [12] 1349 	orl	a,r7
      0004F7 70 03            [24] 1350 	jnz	00164$
      0004F9 02r04r67         [24] 1351 	ljmp	00112$
      0004FC                       1352 00164$:
                                   1353 ;	walk.c:114: if (!stpush(&cur)) {
      0004FC 8A 04            [24] 1354 	mov	ar4,r2
      0004FE 7D 00            [12] 1355 	mov	r5,#0x00
      000500 7F 40            [12] 1356 	mov	r7,#0x40
      000502 8C 82            [24] 1357 	mov	dpl,r4
      000504 8D 83            [24] 1358 	mov	dph,r5
      000506 8F F0            [24] 1359 	mov	b,r7
      000508 C0 06            [24] 1360 	push	ar6
      00050A C0 02            [24] 1361 	push	ar2
      00050C C0 01            [24] 1362 	push	ar1
      00050E C0 00            [24] 1363 	push	ar0
      000510 12r08r4D         [24] 1364 	lcall	_stpush
      000513 E5 82            [12] 1365 	mov	a,dpl
      000515 85 83 F0         [24] 1366 	mov	b,dph
      000518 D0 00            [24] 1367 	pop	ar0
      00051A D0 01            [24] 1368 	pop	ar1
      00051C D0 02            [24] 1369 	pop	ar2
      00051E D0 06            [24] 1370 	pop	ar6
      000520 45 F0            [12] 1371 	orl	a,b
      000522 70 1C            [24] 1372 	jnz	00110$
                                   1373 ;	walk.c:115: (void)puts("Memory error");
      000524 90r00r00         [24] 1374 	mov	dptr,#___str_0
      000527 75 F0 80         [24] 1375 	mov	b,#0x80
      00052A C0 06            [24] 1376 	push	ar6
      00052C C0 02            [24] 1377 	push	ar2
      00052E C0 01            [24] 1378 	push	ar1
      000530 C0 00            [24] 1379 	push	ar0
      000532 12r00r00         [24] 1380 	lcall	_puts
      000535 D0 00            [24] 1381 	pop	ar0
      000537 D0 01            [24] 1382 	pop	ar1
      000539 D0 02            [24] 1383 	pop	ar2
      00053B D0 06            [24] 1384 	pop	ar6
                                   1385 ;	walk.c:116: reset();
      00053D 12r00r1A         [24] 1386 	lcall	_reset
      000540                       1387 00110$:
                                   1388 ;	walk.c:118: cur = t;
      000540 C0 02            [24] 1389 	push	ar2
      000542 C0 00            [24] 1390 	push	ar0
      000544 A8*00            [24] 1391 	mov	r0,_bp
      000546 08               [12] 1392 	inc	r0
      000547 C0 01            [24] 1393 	push	ar1
      000549 E5*00            [12] 1394 	mov	a,_bp
      00054B 24 07            [12] 1395 	add	a,#0x07
      00054D F9               [12] 1396 	mov	r1,a
      00054E E6               [12] 1397 	mov	a,@r0
      00054F F7               [12] 1398 	mov	@r1,a
      000550 09               [12] 1399 	inc	r1
      000551 77 00            [12] 1400 	mov	@r1,#0x00
      000553 09               [12] 1401 	inc	r1
      000554 77 40            [12] 1402 	mov	@r1,#0x40
      000556 D0 01            [24] 1403 	pop	ar1
      000558 A8*00            [24] 1404 	mov	r0,_bp
      00055A 08               [12] 1405 	inc	r0
      00055B 08               [12] 1406 	inc	r0
      00055C 86 02            [24] 1407 	mov	ar2,@r0
      00055E 7B 00            [12] 1408 	mov	r3,#0x00
      000560 7F 40            [12] 1409 	mov	r7,#0x40
      000562 D0 00            [24] 1410 	pop	ar0
      000564 C0 06            [24] 1411 	push	ar6
      000566 C0 02            [24] 1412 	push	ar2
      000568 C0 01            [24] 1413 	push	ar1
      00056A C0 00            [24] 1414 	push	ar0
      00056C 74 04            [12] 1415 	mov	a,#0x04
      00056E C0 E0            [24] 1416 	push	acc
      000570 E4               [12] 1417 	clr	a
      000571 C0 E0            [24] 1418 	push	acc
      000573 85 00 F0         [24] 1419 	mov	b,ar0
      000576 E5*00            [12] 1420 	mov	a,_bp
      000578 24 07            [12] 1421 	add	a,#0x07
      00057A F8               [12] 1422 	mov	r0,a
      00057B E6               [12] 1423 	mov	a,@r0
      00057C C0 E0            [24] 1424 	push	acc
      00057E 08               [12] 1425 	inc	r0
      00057F E6               [12] 1426 	mov	a,@r0
      000580 C0 E0            [24] 1427 	push	acc
      000582 08               [12] 1428 	inc	r0
      000583 E6               [12] 1429 	mov	a,@r0
      000584 C0 E0            [24] 1430 	push	acc
      000586 8A 82            [24] 1431 	mov	dpl,r2
      000588 8B 83            [24] 1432 	mov	dph,r3
      00058A 8F F0            [24] 1433 	mov	b,r7
      00058C 12r00r00         [24] 1434 	lcall	___memcpy
      00058F E5 81            [12] 1435 	mov	a,sp
      000591 24 FB            [12] 1436 	add	a,#0xfb
      000593 F5 81            [12] 1437 	mov	sp,a
      000595 D0 00            [24] 1438 	pop	ar0
      000597 D0 01            [24] 1439 	pop	ar1
      000599 D0 02            [24] 1440 	pop	ar2
      00059B D0 06            [24] 1441 	pop	ar6
                                   1442 ;	walk.c:119: goto process;
      00059D D0 02            [24] 1443 	pop	ar2
      00059F 02r02rFB         [24] 1444 	ljmp	00101$
      0005A2                       1445 00115$:
                                   1446 ;	walk.c:123: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005A2 86 05            [24] 1447 	mov	ar5,@r0
      0005A4 08               [12] 1448 	inc	r0
      0005A5 86 07            [24] 1449 	mov	ar7,@r0
      0005A7 18               [12] 1450 	dec	r0
      0005A8 0D               [12] 1451 	inc	r5
      0005A9 BD 00 01         [24] 1452 	cjne	r5,#0x00,00166$
      0005AC 0F               [12] 1453 	inc	r7
      0005AD                       1454 00166$:
      0005AD 87 03            [24] 1455 	mov	ar3,@r1
      0005AF 09               [12] 1456 	inc	r1
      0005B0 87 04            [24] 1457 	mov	ar4,@r1
      0005B2 19               [12] 1458 	dec	r1
      0005B3 74 04            [12] 1459 	mov	a,#0x04
      0005B5 2B               [12] 1460 	add	a,r3
      0005B6 FB               [12] 1461 	mov	r3,a
      0005B7 E4               [12] 1462 	clr	a
      0005B8 3C               [12] 1463 	addc	a,r4
      0005B9 FC               [12] 1464 	mov	r4,a
      0005BA C0 06            [24] 1465 	push	ar6
      0005BC C0 02            [24] 1466 	push	ar2
      0005BE C0 01            [24] 1467 	push	ar1
      0005C0 C0 00            [24] 1468 	push	ar0
      0005C2 C0 05            [24] 1469 	push	ar5
      0005C4 C0 07            [24] 1470 	push	ar7
      0005C6 C0 03            [24] 1471 	push	ar3
      0005C8 C0 04            [24] 1472 	push	ar4
      0005CA 74r2A            [12] 1473 	mov	a,#___str_3
      0005CC C0 E0            [24] 1474 	push	acc
      0005CE 74s00            [12] 1475 	mov	a,#(___str_3 >> 8)
      0005D0 C0 E0            [24] 1476 	push	acc
      0005D2 74 80            [12] 1477 	mov	a,#0x80
      0005D4 C0 E0            [24] 1478 	push	acc
      0005D6 12r00r00         [24] 1479 	lcall	_printf
      0005D9 E5 81            [12] 1480 	mov	a,sp
      0005DB 24 F9            [12] 1481 	add	a,#0xf9
      0005DD F5 81            [12] 1482 	mov	sp,a
      0005DF D0 00            [24] 1483 	pop	ar0
      0005E1 D0 01            [24] 1484 	pop	ar1
      0005E3 D0 02            [24] 1485 	pop	ar2
      0005E5 D0 06            [24] 1486 	pop	ar6
                                   1487 ;	walk.c:125: if (!stpop(&cur)) goto term;
      0005E7 C0 00            [24] 1488 	push	ar0
      0005E9 E5*00            [12] 1489 	mov	a,_bp
      0005EB 24 03            [12] 1490 	add	a,#0x03
      0005ED F8               [12] 1491 	mov	r0,a
      0005EE 86 04            [24] 1492 	mov	ar4,@r0
      0005F0 7D 00            [12] 1493 	mov	r5,#0x00
      0005F2 7F 40            [12] 1494 	mov	r7,#0x40
      0005F4 D0 00            [24] 1495 	pop	ar0
      0005F6 8C 82            [24] 1496 	mov	dpl,r4
      0005F8 8D 83            [24] 1497 	mov	dph,r5
      0005FA 8F F0            [24] 1498 	mov	b,r7
      0005FC C0 06            [24] 1499 	push	ar6
      0005FE C0 02            [24] 1500 	push	ar2
      000600 C0 01            [24] 1501 	push	ar1
      000602 C0 00            [24] 1502 	push	ar0
      000604 12r08rAE         [24] 1503 	lcall	_stpop
      000607 E5 82            [12] 1504 	mov	a,dpl
      000609 85 83 F0         [24] 1505 	mov	b,dph
      00060C D0 00            [24] 1506 	pop	ar0
      00060E D0 01            [24] 1507 	pop	ar1
      000610 D0 02            [24] 1508 	pop	ar2
      000612 D0 06            [24] 1509 	pop	ar6
      000614 45 F0            [12] 1510 	orl	a,b
      000616 60 03            [24] 1511 	jz	00167$
      000618 02r03r7F         [24] 1512 	ljmp	00102$
      00061B                       1513 00167$:
                                   1514 ;	walk.c:129: return;
                                   1515 ;	walk.c:130: }
      00061B 85*00 81         [24] 1516 	mov	sp,_bp
      00061E D0*00            [24] 1517 	pop	_bp
      000620 22               [24] 1518 	ret
                                   1519 ;------------------------------------------------------------
                                   1520 ;Allocation info for local variables in function 'main'
                                   1521 ;------------------------------------------------------------
                                   1522 ;initial                   Allocated to stack - _bp +7
                                   1523 ;N                         Allocated to stack - _bp +11
                                   1524 ;i                         Allocated to stack - _bp +5
                                   1525 ;j                         Allocated to registers r2 r6 
                                   1526 ;sloc0                     Allocated to stack - _bp +1
                                   1527 ;sloc1                     Allocated to stack - _bp +3
                                   1528 ;R                         Allocated with name '_main_R_65536_64'
                                   1529 ;------------------------------------------------------------
                                   1530 ;	walk.c:132: int main(void) {
                                   1531 ;	-----------------------------------------
                                   1532 ;	 function main
                                   1533 ;	-----------------------------------------
      000621                       1534 _main:
      000621 C0*00            [24] 1535 	push	_bp
      000623 E5 81            [12] 1536 	mov	a,sp
      000625 F5*00            [12] 1537 	mov	_bp,a
      000627 24 0C            [12] 1538 	add	a,#0x0c
      000629 F5 81            [12] 1539 	mov	sp,a
                                   1540 ;	walk.c:138: i0 = 1;
      00062B 78r00            [12] 1541 	mov	r0,#_i0
      00062D 76 01            [12] 1542 	mov	@r0,#0x01
                                   1543 ;	walk.c:140: IT0 = 1;
                                   1544 ;	assignBit
      00062F D2 88            [12] 1545 	setb	_IT0
                                   1546 ;	walk.c:141: EX0 = 1;
                                   1547 ;	assignBit
      000631 D2 A8            [12] 1548 	setb	_EX0
                                   1549 ;	walk.c:142: EA = 1;
                                   1550 ;	assignBit
      000633 D2 AF            [12] 1551 	setb	_EA
                                   1552 ;	walk.c:144: srand(*R);
      000635 90rB4r02         [24] 1553 	mov	dptr,#_main_R_65536_64
      000638 E0               [24] 1554 	movx	a,@dptr
      000639 FE               [12] 1555 	mov	r6,a
      00063A A3               [24] 1556 	inc	dptr
      00063B E0               [24] 1557 	movx	a,@dptr
      00063C FF               [12] 1558 	mov	r7,a
      00063D 8E 82            [24] 1559 	mov	dpl,r6
      00063F 8F 83            [24] 1560 	mov	dph,r7
      000641 E0               [24] 1561 	movx	a,@dptr
      000642 FE               [12] 1562 	mov	r6,a
      000643 A3               [24] 1563 	inc	dptr
      000644 E0               [24] 1564 	movx	a,@dptr
      000645 FF               [12] 1565 	mov	r7,a
      000646 8E 82            [24] 1566 	mov	dpl,r6
      000648 8F 83            [24] 1567 	mov	dph,r7
      00064A 12r00r00         [24] 1568 	lcall	_srand
                                   1569 ;	walk.c:145: stinit();
      00064D 12r08r44         [24] 1570 	lcall	_stinit
                                   1571 ;	walk.c:147: puts("\033[2J\033[?25l");
      000650 90r00r34         [24] 1572 	mov	dptr,#___str_4
      000653 75 F0 80         [24] 1573 	mov	b,#0x80
      000656 12r00r00         [24] 1574 	lcall	_puts
                                   1575 ;	walk.c:149: while (i0) {
      000659 E5*00            [12] 1576 	mov	a,_bp
      00065B 24 07            [12] 1577 	add	a,#0x07
      00065D F9               [12] 1578 	mov	r1,a
      00065E FF               [12] 1579 	mov	r7,a
      00065F E5*00            [12] 1580 	mov	a,_bp
      000661 24 0B            [12] 1581 	add	a,#0x0b
      000663 F8               [12] 1582 	mov	r0,a
      000664 E4               [12] 1583 	clr	a
      000665 F6               [12] 1584 	mov	@r0,a
      000666 08               [12] 1585 	inc	r0
      000667 F6               [12] 1586 	mov	@r0,a
      000668                       1587 00107$:
      000668 78r00            [12] 1588 	mov	r0,#_i0
      00066A E6               [12] 1589 	mov	a,@r0
      00066B 70 03            [24] 1590 	jnz	00169$
      00066D 02r08r2D         [24] 1591 	ljmp	00109$
      000670                       1592 00169$:
                                   1593 ;	walk.c:150: for (i = 0; i < ROWS; i++)
      000670 7B 00            [12] 1594 	mov	r3,#0x00
      000672 7C 00            [12] 1595 	mov	r4,#0x00
      000674 A8*00            [24] 1596 	mov	r0,_bp
      000676 08               [12] 1597 	inc	r0
      000677 E4               [12] 1598 	clr	a
      000678 F6               [12] 1599 	mov	@r0,a
      000679 08               [12] 1600 	inc	r0
      00067A F6               [12] 1601 	mov	@r0,a
                                   1602 ;	walk.c:151: for (j = 0; j < COLS; j++)
      00067B                       1603 00121$:
      00067B A8*00            [24] 1604 	mov	r0,_bp
      00067D 08               [12] 1605 	inc	r0
      00067E C0 01            [24] 1606 	push	ar1
      000680 E5*00            [12] 1607 	mov	a,_bp
      000682 24 03            [12] 1608 	add	a,#0x03
      000684 F9               [12] 1609 	mov	r1,a
      000685 E6               [12] 1610 	mov	a,@r0
      000686 24r00            [12] 1611 	add	a,#_g
      000688 F7               [12] 1612 	mov	@r1,a
      000689 08               [12] 1613 	inc	r0
      00068A E6               [12] 1614 	mov	a,@r0
      00068B 34s00            [12] 1615 	addc	a,#(_g >> 8)
      00068D 09               [12] 1616 	inc	r1
      00068E F7               [12] 1617 	mov	@r1,a
      00068F D0 01            [24] 1618 	pop	ar1
      000691 7A 00            [12] 1619 	mov	r2,#0x00
      000693 7E 00            [12] 1620 	mov	r6,#0x00
      000695                       1621 00110$:
                                   1622 ;	walk.c:152: g[i][j] = 0x55;
      000695 E5*00            [12] 1623 	mov	a,_bp
      000697 24 03            [12] 1624 	add	a,#0x03
      000699 F8               [12] 1625 	mov	r0,a
      00069A EA               [12] 1626 	mov	a,r2
      00069B 26               [12] 1627 	add	a,@r0
      00069C F5 82            [12] 1628 	mov	dpl,a
      00069E EE               [12] 1629 	mov	a,r6
      00069F 08               [12] 1630 	inc	r0
      0006A0 36               [12] 1631 	addc	a,@r0
      0006A1 F5 83            [12] 1632 	mov	dph,a
      0006A3 74 55            [12] 1633 	mov	a,#0x55
      0006A5 F0               [24] 1634 	movx	@dptr,a
                                   1635 ;	walk.c:151: for (j = 0; j < COLS; j++)
      0006A6 0A               [12] 1636 	inc	r2
      0006A7 BA 00 01         [24] 1637 	cjne	r2,#0x00,00170$
      0006AA 0E               [12] 1638 	inc	r6
      0006AB                       1639 00170$:
      0006AB C3               [12] 1640 	clr	c
      0006AC EA               [12] 1641 	mov	a,r2
      0006AD 94 C0            [12] 1642 	subb	a,#0xc0
      0006AF EE               [12] 1643 	mov	a,r6
      0006B0 64 80            [12] 1644 	xrl	a,#0x80
      0006B2 94 80            [12] 1645 	subb	a,#0x80
      0006B4 40 DF            [24] 1646 	jc	00110$
                                   1647 ;	walk.c:150: for (i = 0; i < ROWS; i++)
      0006B6 A8*00            [24] 1648 	mov	r0,_bp
      0006B8 08               [12] 1649 	inc	r0
      0006B9 74 C0            [12] 1650 	mov	a,#0xc0
      0006BB 26               [12] 1651 	add	a,@r0
      0006BC F6               [12] 1652 	mov	@r0,a
      0006BD E4               [12] 1653 	clr	a
      0006BE 08               [12] 1654 	inc	r0
      0006BF 36               [12] 1655 	addc	a,@r0
      0006C0 F6               [12] 1656 	mov	@r0,a
      0006C1 0B               [12] 1657 	inc	r3
      0006C2 BB 00 01         [24] 1658 	cjne	r3,#0x00,00172$
      0006C5 0C               [12] 1659 	inc	r4
      0006C6                       1660 00172$:
      0006C6 C3               [12] 1661 	clr	c
      0006C7 EB               [12] 1662 	mov	a,r3
      0006C8 94 30            [12] 1663 	subb	a,#0x30
      0006CA EC               [12] 1664 	mov	a,r4
      0006CB 64 80            [12] 1665 	xrl	a,#0x80
      0006CD 94 80            [12] 1666 	subb	a,#0x80
      0006CF 40 AA            [24] 1667 	jc	00121$
                                   1668 ;	walk.c:154: initial.r = rand() % ROWS;
      0006D1 E5*00            [12] 1669 	mov	a,_bp
      0006D3 24 07            [12] 1670 	add	a,#0x07
      0006D5 F8               [12] 1671 	mov	r0,a
      0006D6 C0 07            [24] 1672 	push	ar7
      0006D8 C0 01            [24] 1673 	push	ar1
      0006DA C0 00            [24] 1674 	push	ar0
      0006DC 12r00r00         [24] 1675 	lcall	_rand
      0006DF AD 82            [24] 1676 	mov	r5,dpl
      0006E1 AE 83            [24] 1677 	mov	r6,dph
      0006E3 74 30            [12] 1678 	mov	a,#0x30
      0006E5 C0 E0            [24] 1679 	push	acc
      0006E7 E4               [12] 1680 	clr	a
      0006E8 C0 E0            [24] 1681 	push	acc
      0006EA 8D 82            [24] 1682 	mov	dpl,r5
      0006EC 8E 83            [24] 1683 	mov	dph,r6
      0006EE 12r00r00         [24] 1684 	lcall	__modsint
      0006F1 AD 82            [24] 1685 	mov	r5,dpl
      0006F3 AE 83            [24] 1686 	mov	r6,dph
      0006F5 15 81            [12] 1687 	dec	sp
      0006F7 15 81            [12] 1688 	dec	sp
      0006F9 D0 00            [24] 1689 	pop	ar0
      0006FB D0 01            [24] 1690 	pop	ar1
      0006FD A6 05            [24] 1691 	mov	@r0,ar5
      0006FF 08               [12] 1692 	inc	r0
      000700 A6 06            [24] 1693 	mov	@r0,ar6
      000702 18               [12] 1694 	dec	r0
                                   1695 ;	walk.c:155: initial.c = rand() % COLS;
      000703 74 02            [12] 1696 	mov	a,#0x02
      000705 29               [12] 1697 	add	a,r1
      000706 F8               [12] 1698 	mov	r0,a
      000707 C0 01            [24] 1699 	push	ar1
      000709 C0 00            [24] 1700 	push	ar0
      00070B 12r00r00         [24] 1701 	lcall	_rand
      00070E AD 82            [24] 1702 	mov	r5,dpl
      000710 AE 83            [24] 1703 	mov	r6,dph
      000712 74 C0            [12] 1704 	mov	a,#0xc0
      000714 C0 E0            [24] 1705 	push	acc
      000716 E4               [12] 1706 	clr	a
      000717 C0 E0            [24] 1707 	push	acc
      000719 8D 82            [24] 1708 	mov	dpl,r5
      00071B 8E 83            [24] 1709 	mov	dph,r6
      00071D 12r00r00         [24] 1710 	lcall	__modsint
      000720 AD 82            [24] 1711 	mov	r5,dpl
      000722 AE 83            [24] 1712 	mov	r6,dph
      000724 15 81            [12] 1713 	dec	sp
      000726 15 81            [12] 1714 	dec	sp
      000728 D0 00            [24] 1715 	pop	ar0
      00072A A6 05            [24] 1716 	mov	@r0,ar5
      00072C 08               [12] 1717 	inc	r0
      00072D A6 06            [24] 1718 	mov	@r0,ar6
      00072F 18               [12] 1719 	dec	r0
                                   1720 ;	walk.c:157: puts("\033[2J\033[?25l");
      000730 90r00r34         [24] 1721 	mov	dptr,#___str_4
      000733 75 F0 80         [24] 1722 	mov	b,#0x80
      000736 C0 00            [24] 1723 	push	ar0
      000738 12r00r00         [24] 1724 	lcall	_puts
      00073B D0 00            [24] 1725 	pop	ar0
      00073D D0 01            [24] 1726 	pop	ar1
                                   1727 ;	walk.c:158: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00073F 86 05            [24] 1728 	mov	ar5,@r0
      000741 08               [12] 1729 	inc	r0
      000742 86 06            [24] 1730 	mov	ar6,@r0
      000744 18               [12] 1731 	dec	r0
      000745 87 03            [24] 1732 	mov	ar3,@r1
      000747 09               [12] 1733 	inc	r1
      000748 87 04            [24] 1734 	mov	ar4,@r1
      00074A 19               [12] 1735 	dec	r1
      00074B C0 01            [24] 1736 	push	ar1
      00074D C0 05            [24] 1737 	push	ar5
      00074F C0 06            [24] 1738 	push	ar6
      000751 C0 03            [24] 1739 	push	ar3
      000753 C0 04            [24] 1740 	push	ar4
      000755 E5*00            [12] 1741 	mov	a,_bp
      000757 24 0B            [12] 1742 	add	a,#0x0b
      000759 F8               [12] 1743 	mov	r0,a
      00075A E6               [12] 1744 	mov	a,@r0
      00075B C0 E0            [24] 1745 	push	acc
      00075D 08               [12] 1746 	inc	r0
      00075E E6               [12] 1747 	mov	a,@r0
      00075F C0 E0            [24] 1748 	push	acc
      000761 74r3F            [12] 1749 	mov	a,#___str_5
      000763 C0 E0            [24] 1750 	push	acc
      000765 74s00            [12] 1751 	mov	a,#(___str_5 >> 8)
      000767 C0 E0            [24] 1752 	push	acc
      000769 74 80            [12] 1753 	mov	a,#0x80
      00076B C0 E0            [24] 1754 	push	acc
      00076D 12r00r00         [24] 1755 	lcall	_printf
      000770 E5 81            [12] 1756 	mov	a,sp
      000772 24 F7            [12] 1757 	add	a,#0xf7
      000774 F5 81            [12] 1758 	mov	sp,a
      000776 D0 01            [24] 1759 	pop	ar1
      000778 D0 07            [24] 1760 	pop	ar7
                                   1761 ;	walk.c:160: walk(&initial);
      00077A 8F 04            [24] 1762 	mov	ar4,r7
      00077C 7D 00            [12] 1763 	mov	r5,#0x00
      00077E 7E 40            [12] 1764 	mov	r6,#0x40
      000780 8C 82            [24] 1765 	mov	dpl,r4
      000782 8D 83            [24] 1766 	mov	dph,r5
      000784 8E F0            [24] 1767 	mov	b,r6
      000786 C0 07            [24] 1768 	push	ar7
      000788 C0 01            [24] 1769 	push	ar1
      00078A 12r02r8F         [24] 1770 	lcall	_walk
      00078D D0 01            [24] 1771 	pop	ar1
      00078F D0 07            [24] 1772 	pop	ar7
                                   1773 ;	walk.c:162: for (i = 0; i < ROWS; i++)
      000791 E5*00            [12] 1774 	mov	a,_bp
      000793 24 05            [12] 1775 	add	a,#0x05
      000795 F8               [12] 1776 	mov	r0,a
      000796 E4               [12] 1777 	clr	a
      000797 F6               [12] 1778 	mov	@r0,a
      000798 08               [12] 1779 	inc	r0
      000799 F6               [12] 1780 	mov	@r0,a
      00079A 7B 00            [12] 1781 	mov	r3,#0x00
      00079C 7C 00            [12] 1782 	mov	r4,#0x00
                                   1783 ;	walk.c:163: for (j = 0; j < COLS; j++)
      00079E                       1784 00126$:
      00079E E5*00            [12] 1785 	mov	a,_bp
      0007A0 24 03            [12] 1786 	add	a,#0x03
      0007A2 F8               [12] 1787 	mov	r0,a
      0007A3 EB               [12] 1788 	mov	a,r3
      0007A4 24r00            [12] 1789 	add	a,#_g
      0007A6 F6               [12] 1790 	mov	@r0,a
      0007A7 EC               [12] 1791 	mov	a,r4
      0007A8 34s00            [12] 1792 	addc	a,#(_g >> 8)
      0007AA 08               [12] 1793 	inc	r0
      0007AB F6               [12] 1794 	mov	@r0,a
      0007AC 7A 00            [12] 1795 	mov	r2,#0x00
      0007AE 7E 00            [12] 1796 	mov	r6,#0x00
      0007B0                       1797 00114$:
                                   1798 ;	walk.c:164: if (g[i][j] != 0xaa) {
      0007B0 E5*00            [12] 1799 	mov	a,_bp
      0007B2 24 03            [12] 1800 	add	a,#0x03
      0007B4 F8               [12] 1801 	mov	r0,a
      0007B5 EA               [12] 1802 	mov	a,r2
      0007B6 26               [12] 1803 	add	a,@r0
      0007B7 F5 82            [12] 1804 	mov	dpl,a
      0007B9 EE               [12] 1805 	mov	a,r6
      0007BA 08               [12] 1806 	inc	r0
      0007BB 36               [12] 1807 	addc	a,@r0
      0007BC F5 83            [12] 1808 	mov	dph,a
      0007BE E0               [24] 1809 	movx	a,@dptr
      0007BF FD               [12] 1810 	mov	r5,a
      0007C0 BD AA 02         [24] 1811 	cjne	r5,#0xaa,00174$
      0007C3 80 24            [24] 1812 	sjmp	00115$
      0007C5                       1813 00174$:
                                   1814 ;	walk.c:165: (void)puts("Memory error");
      0007C5 90r00r00         [24] 1815 	mov	dptr,#___str_0
      0007C8 75 F0 80         [24] 1816 	mov	b,#0x80
      0007CB C0 07            [24] 1817 	push	ar7
      0007CD C0 06            [24] 1818 	push	ar6
      0007CF C0 04            [24] 1819 	push	ar4
      0007D1 C0 03            [24] 1820 	push	ar3
      0007D3 C0 02            [24] 1821 	push	ar2
      0007D5 C0 01            [24] 1822 	push	ar1
      0007D7 12r00r00         [24] 1823 	lcall	_puts
      0007DA D0 01            [24] 1824 	pop	ar1
      0007DC D0 02            [24] 1825 	pop	ar2
      0007DE D0 03            [24] 1826 	pop	ar3
      0007E0 D0 04            [24] 1827 	pop	ar4
      0007E2 D0 06            [24] 1828 	pop	ar6
      0007E4 D0 07            [24] 1829 	pop	ar7
                                   1830 ;	walk.c:166: reset();
      0007E6 12r00r1A         [24] 1831 	lcall	_reset
      0007E9                       1832 00115$:
                                   1833 ;	walk.c:163: for (j = 0; j < COLS; j++)
      0007E9 0A               [12] 1834 	inc	r2
      0007EA BA 00 01         [24] 1835 	cjne	r2,#0x00,00175$
      0007ED 0E               [12] 1836 	inc	r6
      0007EE                       1837 00175$:
      0007EE C3               [12] 1838 	clr	c
      0007EF EA               [12] 1839 	mov	a,r2
      0007F0 94 C0            [12] 1840 	subb	a,#0xc0
      0007F2 EE               [12] 1841 	mov	a,r6
      0007F3 64 80            [12] 1842 	xrl	a,#0x80
      0007F5 94 80            [12] 1843 	subb	a,#0x80
      0007F7 40 B7            [24] 1844 	jc	00114$
                                   1845 ;	walk.c:162: for (i = 0; i < ROWS; i++)
      0007F9 74 C0            [12] 1846 	mov	a,#0xc0
      0007FB 2B               [12] 1847 	add	a,r3
      0007FC FB               [12] 1848 	mov	r3,a
      0007FD E4               [12] 1849 	clr	a
      0007FE 3C               [12] 1850 	addc	a,r4
      0007FF FC               [12] 1851 	mov	r4,a
      000800 E5*00            [12] 1852 	mov	a,_bp
      000802 24 05            [12] 1853 	add	a,#0x05
      000804 F8               [12] 1854 	mov	r0,a
      000805 06               [12] 1855 	inc	@r0
      000806 B6 00 02         [24] 1856 	cjne	@r0,#0x00,00177$
      000809 08               [12] 1857 	inc	r0
      00080A 06               [12] 1858 	inc	@r0
      00080B                       1859 00177$:
      00080B E5*00            [12] 1860 	mov	a,_bp
      00080D 24 05            [12] 1861 	add	a,#0x05
      00080F F8               [12] 1862 	mov	r0,a
      000810 C3               [12] 1863 	clr	c
      000811 E6               [12] 1864 	mov	a,@r0
      000812 94 30            [12] 1865 	subb	a,#0x30
      000814 08               [12] 1866 	inc	r0
      000815 E6               [12] 1867 	mov	a,@r0
      000816 64 80            [12] 1868 	xrl	a,#0x80
      000818 94 80            [12] 1869 	subb	a,#0x80
      00081A 50 03            [24] 1870 	jnc	00178$
      00081C 02r07r9E         [24] 1871 	ljmp	00126$
      00081F                       1872 00178$:
                                   1873 ;	walk.c:169: N++;
      00081F E5*00            [12] 1874 	mov	a,_bp
      000821 24 0B            [12] 1875 	add	a,#0x0b
      000823 F8               [12] 1876 	mov	r0,a
      000824 06               [12] 1877 	inc	@r0
      000825 B6 00 02         [24] 1878 	cjne	@r0,#0x00,00179$
      000828 08               [12] 1879 	inc	r0
      000829 06               [12] 1880 	inc	@r0
      00082A                       1881 00179$:
      00082A 02r06r68         [24] 1882 	ljmp	00107$
      00082D                       1883 00109$:
                                   1884 ;	walk.c:172: EA = 0;
                                   1885 ;	assignBit
      00082D C2 AF            [12] 1886 	clr	_EA
                                   1887 ;	walk.c:174: puts("\033[2J\033[?25h");
      00082F 90r00r52         [24] 1888 	mov	dptr,#___str_6
      000832 75 F0 80         [24] 1889 	mov	b,#0x80
      000835 12r00r00         [24] 1890 	lcall	_puts
                                   1891 ;	walk.c:178: __endasm;
      000838 02 00 00         [24] 1892 	ljmp	0
                                   1893 ;	walk.c:180: return 0;
      00083B 90 00 00         [24] 1894 	mov	dptr,#0x0000
                                   1895 ;	walk.c:181: }
      00083E 85*00 81         [24] 1896 	mov	sp,_bp
      000841 D0*00            [24] 1897 	pop	_bp
      000843 22               [24] 1898 	ret
                                   1899 ;------------------------------------------------------------
                                   1900 ;Allocation info for local variables in function 'stinit'
                                   1901 ;------------------------------------------------------------
                                   1902 ;	walk.c:183: static void stinit(void) {
                                   1903 ;	-----------------------------------------
                                   1904 ;	 function stinit
                                   1905 ;	-----------------------------------------
      000844                       1906 _stinit:
                                   1907 ;	walk.c:184: sp = -1;
      000844 90rB4r00         [24] 1908 	mov	dptr,#_sp
      000847 74 FF            [12] 1909 	mov	a,#0xff
      000849 F0               [24] 1910 	movx	@dptr,a
      00084A A3               [24] 1911 	inc	dptr
      00084B F0               [24] 1912 	movx	@dptr,a
                                   1913 ;	walk.c:185: return;
                                   1914 ;	walk.c:186: }
      00084C 22               [24] 1915 	ret
                                   1916 ;------------------------------------------------------------
                                   1917 ;Allocation info for local variables in function 'stpush'
                                   1918 ;------------------------------------------------------------
                                   1919 ;t                         Allocated to registers r5 r6 r7 
                                   1920 ;------------------------------------------------------------
                                   1921 ;	walk.c:188: static int stpush(struct node *t) {
                                   1922 ;	-----------------------------------------
                                   1923 ;	 function stpush
                                   1924 ;	-----------------------------------------
      00084D                       1925 _stpush:
      00084D AD 82            [24] 1926 	mov	r5,dpl
      00084F AE 83            [24] 1927 	mov	r6,dph
      000851 AF F0            [24] 1928 	mov	r7,b
                                   1929 ;	walk.c:189: if (sp == (SMAX - 1)) return 0;
      000853 90rB4r00         [24] 1930 	mov	dptr,#_sp
      000856 E0               [24] 1931 	movx	a,@dptr
      000857 FB               [12] 1932 	mov	r3,a
      000858 A3               [24] 1933 	inc	dptr
      000859 E0               [24] 1934 	movx	a,@dptr
      00085A FC               [12] 1935 	mov	r4,a
      00085B BB FF 07         [24] 1936 	cjne	r3,#0xff,00102$
      00085E BC 23 04         [24] 1937 	cjne	r4,#0x23,00102$
      000861 90 00 00         [24] 1938 	mov	dptr,#0x0000
      000864 22               [24] 1939 	ret
      000865                       1940 00102$:
                                   1941 ;	walk.c:190: sp++;
      000865 90rB4r00         [24] 1942 	mov	dptr,#_sp
      000868 74 01            [12] 1943 	mov	a,#0x01
      00086A 2B               [12] 1944 	add	a,r3
      00086B F0               [24] 1945 	movx	@dptr,a
      00086C E4               [12] 1946 	clr	a
      00086D 3C               [12] 1947 	addc	a,r4
      00086E A3               [24] 1948 	inc	dptr
      00086F F0               [24] 1949 	movx	@dptr,a
                                   1950 ;	walk.c:191: stack[sp] = *t;
      000870 90rB4r00         [24] 1951 	mov	dptr,#_sp
      000873 E0               [24] 1952 	movx	a,@dptr
      000874 FB               [12] 1953 	mov	r3,a
      000875 A3               [24] 1954 	inc	dptr
      000876 E0               [24] 1955 	movx	a,@dptr
      000877 FC               [12] 1956 	mov	r4,a
      000878 EB               [12] 1957 	mov	a,r3
      000879 2B               [12] 1958 	add	a,r3
      00087A FB               [12] 1959 	mov	r3,a
      00087B EC               [12] 1960 	mov	a,r4
      00087C 33               [12] 1961 	rlc	a
      00087D FC               [12] 1962 	mov	r4,a
      00087E EB               [12] 1963 	mov	a,r3
      00087F 2B               [12] 1964 	add	a,r3
      000880 FB               [12] 1965 	mov	r3,a
      000881 EC               [12] 1966 	mov	a,r4
      000882 33               [12] 1967 	rlc	a
      000883 FC               [12] 1968 	mov	r4,a
      000884 EB               [12] 1969 	mov	a,r3
      000885 24r00            [12] 1970 	add	a,#_stack
      000887 FB               [12] 1971 	mov	r3,a
      000888 EC               [12] 1972 	mov	a,r4
      000889 34s24            [12] 1973 	addc	a,#(_stack >> 8)
      00088B FC               [12] 1974 	mov	r4,a
      00088C 7A 00            [12] 1975 	mov	r2,#0x00
      00088E 74 04            [12] 1976 	mov	a,#0x04
      000890 C0 E0            [24] 1977 	push	acc
      000892 E4               [12] 1978 	clr	a
      000893 C0 E0            [24] 1979 	push	acc
      000895 C0 05            [24] 1980 	push	ar5
      000897 C0 06            [24] 1981 	push	ar6
      000899 C0 07            [24] 1982 	push	ar7
      00089B 8B 82            [24] 1983 	mov	dpl,r3
      00089D 8C 83            [24] 1984 	mov	dph,r4
      00089F 8A F0            [24] 1985 	mov	b,r2
      0008A1 12r00r00         [24] 1986 	lcall	___memcpy
      0008A4 E5 81            [12] 1987 	mov	a,sp
      0008A6 24 FB            [12] 1988 	add	a,#0xfb
      0008A8 F5 81            [12] 1989 	mov	sp,a
                                   1990 ;	walk.c:192: return 1;
      0008AA 90 00 01         [24] 1991 	mov	dptr,#0x0001
                                   1992 ;	walk.c:193: }
      0008AD 22               [24] 1993 	ret
                                   1994 ;------------------------------------------------------------
                                   1995 ;Allocation info for local variables in function 'stpop'
                                   1996 ;------------------------------------------------------------
                                   1997 ;t                         Allocated to registers r5 r6 r7 
                                   1998 ;------------------------------------------------------------
                                   1999 ;	walk.c:195: static int stpop(struct node *t) {
                                   2000 ;	-----------------------------------------
                                   2001 ;	 function stpop
                                   2002 ;	-----------------------------------------
      0008AE                       2003 _stpop:
      0008AE AD 82            [24] 2004 	mov	r5,dpl
      0008B0 AE 83            [24] 2005 	mov	r6,dph
      0008B2 AF F0            [24] 2006 	mov	r7,b
                                   2007 ;	walk.c:196: if (sp == -1) return 0;
      0008B4 90rB4r00         [24] 2008 	mov	dptr,#_sp
      0008B7 E0               [24] 2009 	movx	a,@dptr
      0008B8 FB               [12] 2010 	mov	r3,a
      0008B9 A3               [24] 2011 	inc	dptr
      0008BA E0               [24] 2012 	movx	a,@dptr
      0008BB FC               [12] 2013 	mov	r4,a
      0008BC BB FF 07         [24] 2014 	cjne	r3,#0xff,00102$
      0008BF BC FF 04         [24] 2015 	cjne	r4,#0xff,00102$
      0008C2 90 00 00         [24] 2016 	mov	dptr,#0x0000
      0008C5 22               [24] 2017 	ret
      0008C6                       2018 00102$:
                                   2019 ;	walk.c:197: *t = stack[sp];
      0008C6 EB               [12] 2020 	mov	a,r3
      0008C7 2B               [12] 2021 	add	a,r3
      0008C8 FB               [12] 2022 	mov	r3,a
      0008C9 EC               [12] 2023 	mov	a,r4
      0008CA 33               [12] 2024 	rlc	a
      0008CB FC               [12] 2025 	mov	r4,a
      0008CC EB               [12] 2026 	mov	a,r3
      0008CD 2B               [12] 2027 	add	a,r3
      0008CE FB               [12] 2028 	mov	r3,a
      0008CF EC               [12] 2029 	mov	a,r4
      0008D0 33               [12] 2030 	rlc	a
      0008D1 FC               [12] 2031 	mov	r4,a
      0008D2 EB               [12] 2032 	mov	a,r3
      0008D3 24r00            [12] 2033 	add	a,#_stack
      0008D5 FB               [12] 2034 	mov	r3,a
      0008D6 EC               [12] 2035 	mov	a,r4
      0008D7 34s24            [12] 2036 	addc	a,#(_stack >> 8)
      0008D9 FC               [12] 2037 	mov	r4,a
      0008DA 7A 00            [12] 2038 	mov	r2,#0x00
      0008DC 74 04            [12] 2039 	mov	a,#0x04
      0008DE C0 E0            [24] 2040 	push	acc
      0008E0 E4               [12] 2041 	clr	a
      0008E1 C0 E0            [24] 2042 	push	acc
      0008E3 C0 03            [24] 2043 	push	ar3
      0008E5 C0 04            [24] 2044 	push	ar4
      0008E7 C0 02            [24] 2045 	push	ar2
      0008E9 8D 82            [24] 2046 	mov	dpl,r5
      0008EB 8E 83            [24] 2047 	mov	dph,r6
      0008ED 8F F0            [24] 2048 	mov	b,r7
      0008EF 12r00r00         [24] 2049 	lcall	___memcpy
      0008F2 E5 81            [12] 2050 	mov	a,sp
      0008F4 24 FB            [12] 2051 	add	a,#0xfb
      0008F6 F5 81            [12] 2052 	mov	sp,a
                                   2053 ;	walk.c:198: sp--;
      0008F8 90rB4r00         [24] 2054 	mov	dptr,#_sp
      0008FB E0               [24] 2055 	movx	a,@dptr
      0008FC 24 FF            [12] 2056 	add	a,#0xff
      0008FE FE               [12] 2057 	mov	r6,a
      0008FF A3               [24] 2058 	inc	dptr
      000900 E0               [24] 2059 	movx	a,@dptr
      000901 34 FF            [12] 2060 	addc	a,#0xff
      000903 FF               [12] 2061 	mov	r7,a
      000904 90rB4r00         [24] 2062 	mov	dptr,#_sp
      000907 EE               [12] 2063 	mov	a,r6
      000908 F0               [24] 2064 	movx	@dptr,a
      000909 EF               [12] 2065 	mov	a,r7
      00090A A3               [24] 2066 	inc	dptr
      00090B F0               [24] 2067 	movx	@dptr,a
                                   2068 ;	walk.c:199: return 1;
      00090C 90 00 01         [24] 2069 	mov	dptr,#0x0001
                                   2070 ;	walk.c:200: }
      00090F 22               [24] 2071 	ret
                                   2072 	.area CSEG    (CODE)
                                   2073 	.area CONST   (CODE)
                                   2074 	.area CONST   (CODE)
      000000                       2075 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2076 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2077 	.db 0x00
                                   2078 	.area CSEG    (CODE)
                                   2079 	.area CONST   (CODE)
      00000D                       2080 ___str_1:
      00000D 1B                    2081 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2082 	.ascii "[%d;%dHo"
             6F
      000016 00                    2083 	.db 0x00
                                   2084 	.area CSEG    (CODE)
                                   2085 	.area CONST   (CODE)
      000017                       2086 ___str_2:
      000017 1B                    2087 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2088 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2089 	.db 0x00
                                   2090 	.area CSEG    (CODE)
                                   2091 	.area CONST   (CODE)
      00002A                       2092 ___str_3:
      00002A 1B                    2093 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2094 	.ascii "[%d;%dH."
             2E
      000033 00                    2095 	.db 0x00
                                   2096 	.area CSEG    (CODE)
                                   2097 	.area CONST   (CODE)
      000034                       2098 ___str_4:
      000034 1B                    2099 	.db 0x1b
      000035 5B 32 4A              2100 	.ascii "[2J"
      000038 1B                    2101 	.db 0x1b
      000039 5B 3F 32 35 6C        2102 	.ascii "[?25l"
      00003E 00                    2103 	.db 0x00
                                   2104 	.area CSEG    (CODE)
                                   2105 	.area CONST   (CODE)
      00003F                       2106 ___str_5:
      00003F 1B                    2107 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2108 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2109 	.db 0x00
                                   2110 	.area CSEG    (CODE)
                                   2111 	.area CONST   (CODE)
      000052                       2112 ___str_6:
      000052 1B                    2113 	.db 0x1b
      000053 5B 32 4A              2114 	.ascii "[2J"
      000056 1B                    2115 	.db 0x1b
      000057 5B 3F 32 35 68        2116 	.ascii "[?25h"
      00005C 00                    2117 	.db 0x00
                                   2118 	.area CSEG    (CODE)
                                   2119 	.area XINIT   (CODE)
                                   2120 	.area CABS    (ABS,CODE)
