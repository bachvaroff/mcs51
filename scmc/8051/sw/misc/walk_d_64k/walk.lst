                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
      000000                        319 _g:
      000000                        320 	.ds 9696
      0025E0                        321 _stack:
      0025E0                        322 	.ds 38784
      00BD60                        323 _sp:
      00BD60                        324 	.ds 2
      00BD62                        325 _main_R_65536_64:
      00BD62                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
      000000                        335 _neigh_tmpl:
      000000                        336 	.ds 64
      000040                        337 _neigh:
      000040                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 ;------------------------------------------------------------
                                    370 ;Allocation info for local variables in function 'main'
                                    371 ;------------------------------------------------------------
                                    372 ;initial                   Allocated to stack - _bp +5
                                    373 ;N                         Allocated to stack - _bp +9
                                    374 ;i                         Allocated to stack - _bp +11
                                    375 ;j                         Allocated to registers r2 r6 
                                    376 ;sloc0                     Allocated to stack - _bp +1
                                    377 ;sloc1                     Allocated to stack - _bp +3
                                    378 ;sloc2                     Allocated to stack - _bp +15
                                    379 ;R                         Allocated with name '_main_R_65536_64'
                                    380 ;------------------------------------------------------------
                                    381 ;	walk.c:142: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90rBDr62         [24]  382 	mov	dptr,#_main_R_65536_64
      000003 74 FE            [12]  383 	mov	a,#0xfe
      000005 F0               [24]  384 	movx	@dptr,a
      000006 04               [12]  385 	inc	a
      000007 A3               [24]  386 	inc	dptr
      000008 F0               [24]  387 	movx	@dptr,a
                                    388 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  389 	ljmp	__sdcc_program_startup
                                    390 ;--------------------------------------------------------
                                    391 ; Home
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
                                    394 	.area HOME    (CODE)
      000006                        395 __sdcc_program_startup:
      000006 02r06r3F         [24]  396 	ljmp	_main
                                    397 ;	return from main will return to caller
                                    398 ;--------------------------------------------------------
                                    399 ; code
                                    400 ;--------------------------------------------------------
                                    401 	.area CSEG    (CODE)
                                    402 ;------------------------------------------------------------
                                    403 ;Allocation info for local variables in function 'putchar'
                                    404 ;------------------------------------------------------------
                                    405 ;c                         Allocated to registers 
                                    406 ;------------------------------------------------------------
                                    407 ;	walk.c:8: int putchar(int c) __naked {
                                    408 ;	-----------------------------------------
                                    409 ;	 function putchar
                                    410 ;	-----------------------------------------
      000000                        411 _putchar:
                                    412 ;	naked function: no prologue.
                                    413 ;	walk.c:13: __endasm;
      000000 E5 82            [12]  414 	mov	a, dpl
      000002 02 00 30         [24]  415 	ljmp	0x0030
                                    416 ;	walk.c:14: }
                                    417 ;	naked function: no epilogue.
                                    418 ;------------------------------------------------------------
                                    419 ;Allocation info for local variables in function 'getchar'
                                    420 ;------------------------------------------------------------
                                    421 ;	walk.c:16: int getchar(void) __naked {
                                    422 ;	-----------------------------------------
                                    423 ;	 function getchar
                                    424 ;	-----------------------------------------
      000005                        425 _getchar:
                                    426 ;	naked function: no prologue.
                                    427 ;	walk.c:22: __endasm;
      000005 12 00 32         [24]  428 	lcall	0x0032
      000008 F5 82            [12]  429 	mov	dpl, a
      00000A 75 83 00         [24]  430 	mov	dph, #0
      00000D 22               [24]  431 	ret
                                    432 ;	walk.c:23: }
                                    433 ;	naked function: no epilogue.
                                    434 ;------------------------------------------------------------
                                    435 ;Allocation info for local variables in function 'int0'
                                    436 ;------------------------------------------------------------
                                    437 ;	walk.c:27: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    438 ;	-----------------------------------------
                                    439 ;	 function int0
                                    440 ;	-----------------------------------------
      00000E                        441 _int0:
                           00000F   442 	ar7 = 0x0f
                           00000E   443 	ar6 = 0x0e
                           00000D   444 	ar5 = 0x0d
                           00000C   445 	ar4 = 0x0c
                           00000B   446 	ar3 = 0x0b
                           00000A   447 	ar2 = 0x0a
                           000009   448 	ar1 = 0x09
                           000008   449 	ar0 = 0x08
      00000E C0 D0            [24]  450 	push	psw
      000010 75 D0 08         [24]  451 	mov	psw,#0x08
                                    452 ;	walk.c:28: i0 = 0;
      000013 78r00            [12]  453 	mov	r0,#_i0
      000015 76 00            [12]  454 	mov	@r0,#0x00
                                    455 ;	walk.c:29: }
      000017 D0 D0            [24]  456 	pop	psw
      000019 32               [24]  457 	reti
                                    458 ;	eliminated unneeded push/pop dpl
                                    459 ;	eliminated unneeded push/pop dph
                                    460 ;	eliminated unneeded push/pop b
                                    461 ;	eliminated unneeded push/pop acc
                                    462 ;------------------------------------------------------------
                                    463 ;Allocation info for local variables in function 'reset'
                                    464 ;------------------------------------------------------------
                                    465 ;	walk.c:31: static void reset(void) __naked {
                                    466 ;	-----------------------------------------
                                    467 ;	 function reset
                                    468 ;	-----------------------------------------
      00001A                        469 _reset:
                                    470 ;	naked function: no prologue.
                                    471 ;	walk.c:34: __endasm;
      00001A 43 87 02         [24]  472 	orl	pcon, #2
                                    473 ;	walk.c:35: }
                                    474 ;	naked function: no epilogue.
                                    475 ;------------------------------------------------------------
                                    476 ;Allocation info for local variables in function 'bang'
                                    477 ;------------------------------------------------------------
                                    478 ;	walk.c:37: static void bang(void) {
                                    479 ;	-----------------------------------------
                                    480 ;	 function bang
                                    481 ;	-----------------------------------------
      00001D                        482 _bang:
                           000007   483 	ar7 = 0x07
                           000006   484 	ar6 = 0x06
                           000005   485 	ar5 = 0x05
                           000004   486 	ar4 = 0x04
                           000003   487 	ar3 = 0x03
                           000002   488 	ar2 = 0x02
                           000001   489 	ar1 = 0x01
                           000000   490 	ar0 = 0x00
                                    491 ;	walk.c:38: (void)puts("Memory error");
      00001D 90r00r00         [24]  492 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  493 	mov	b,#0x80
      000023 12r00r00         [24]  494 	lcall	_puts
                                    495 ;	walk.c:39: reset();
                                    496 ;	walk.c:41: return;
                                    497 ;	walk.c:42: }
      000026 02r00r1A         [24]  498 	ljmp	_reset
                                    499 ;------------------------------------------------------------
                                    500 ;Allocation info for local variables in function 'update'
                                    501 ;------------------------------------------------------------
                                    502 ;cur                       Allocated to stack - _bp -5
                                    503 ;j                         Allocated to stack - _bp -6
                                    504 ;t                         Allocated to stack - _bp +1
                                    505 ;sloc0                     Allocated to stack - _bp +4
                                    506 ;sloc1                     Allocated to stack - _bp +6
                                    507 ;sloc2                     Allocated to stack - _bp +8
                                    508 ;------------------------------------------------------------
                                    509 ;	walk.c:88: static int update(struct node *t, struct node *cur, char j) {
                                    510 ;	-----------------------------------------
                                    511 ;	 function update
                                    512 ;	-----------------------------------------
      000029                        513 _update:
      000029 C0*00            [24]  514 	push	_bp
      00002B 85 81*00         [24]  515 	mov	_bp,sp
      00002E C0 82            [24]  516 	push	dpl
      000030 C0 83            [24]  517 	push	dph
      000032 C0 F0            [24]  518 	push	b
      000034 E5 81            [12]  519 	mov	a,sp
      000036 24 07            [12]  520 	add	a,#0x07
      000038 F5 81            [12]  521 	mov	sp,a
                                    522 ;	walk.c:89: t->r = cur->r + neigh[j].r;
      00003A E5*00            [12]  523 	mov	a,_bp
      00003C 24 FB            [12]  524 	add	a,#0xfb
      00003E F8               [12]  525 	mov	r0,a
      00003F 86 02            [24]  526 	mov	ar2,@r0
      000041 08               [12]  527 	inc	r0
      000042 86 03            [24]  528 	mov	ar3,@r0
      000044 08               [12]  529 	inc	r0
      000045 86 04            [24]  530 	mov	ar4,@r0
      000047 8A 82            [24]  531 	mov	dpl,r2
      000049 8B 83            [24]  532 	mov	dph,r3
      00004B 8C F0            [24]  533 	mov	b,r4
      00004D E5*00            [12]  534 	mov	a,_bp
      00004F 24 04            [12]  535 	add	a,#0x04
      000051 F8               [12]  536 	mov	r0,a
      000052 12r00r00         [24]  537 	lcall	__gptrget
      000055 F6               [12]  538 	mov	@r0,a
      000056 A3               [24]  539 	inc	dptr
      000057 12r00r00         [24]  540 	lcall	__gptrget
      00005A 08               [12]  541 	inc	r0
      00005B F6               [12]  542 	mov	@r0,a
      00005C E5*00            [12]  543 	mov	a,_bp
      00005E 24 FA            [12]  544 	add	a,#0xfa
      000060 F8               [12]  545 	mov	r0,a
      000061 E5*00            [12]  546 	mov	a,_bp
      000063 24 06            [12]  547 	add	a,#0x06
      000065 F9               [12]  548 	mov	r1,a
      000066 E6               [12]  549 	mov	a,@r0
      000067 75 F0 04         [24]  550 	mov	b,#0x04
      00006A A4               [48]  551 	mul	ab
      00006B F7               [12]  552 	mov	@r1,a
      00006C 09               [12]  553 	inc	r1
      00006D A7 F0            [24]  554 	mov	@r1,b
      00006F E5*00            [12]  555 	mov	a,_bp
      000071 24 06            [12]  556 	add	a,#0x06
      000073 F8               [12]  557 	mov	r0,a
      000074 E6               [12]  558 	mov	a,@r0
      000075 24r40            [12]  559 	add	a,#_neigh
      000077 F5 82            [12]  560 	mov	dpl,a
      000079 08               [12]  561 	inc	r0
      00007A E6               [12]  562 	mov	a,@r0
      00007B 34s00            [12]  563 	addc	a,#(_neigh >> 8)
      00007D F5 83            [12]  564 	mov	dph,a
      00007F E0               [24]  565 	movx	a,@dptr
      000080 FF               [12]  566 	mov	r7,a
      000081 A3               [24]  567 	inc	dptr
      000082 E0               [24]  568 	movx	a,@dptr
      000083 FE               [12]  569 	mov	r6,a
      000084 E5*00            [12]  570 	mov	a,_bp
      000086 24 04            [12]  571 	add	a,#0x04
      000088 F8               [12]  572 	mov	r0,a
      000089 EF               [12]  573 	mov	a,r7
      00008A 26               [12]  574 	add	a,@r0
      00008B FF               [12]  575 	mov	r7,a
      00008C EE               [12]  576 	mov	a,r6
      00008D 08               [12]  577 	inc	r0
      00008E 36               [12]  578 	addc	a,@r0
      00008F FE               [12]  579 	mov	r6,a
      000090 A8*00            [24]  580 	mov	r0,_bp
      000092 08               [12]  581 	inc	r0
      000093 86 82            [24]  582 	mov	dpl,@r0
      000095 08               [12]  583 	inc	r0
      000096 86 83            [24]  584 	mov	dph,@r0
      000098 08               [12]  585 	inc	r0
      000099 86 F0            [24]  586 	mov	b,@r0
      00009B EF               [12]  587 	mov	a,r7
      00009C 12r00r00         [24]  588 	lcall	__gptrput
      00009F A3               [24]  589 	inc	dptr
      0000A0 EE               [12]  590 	mov	a,r6
      0000A1 12r00r00         [24]  591 	lcall	__gptrput
                                    592 ;	walk.c:90: t->c = cur->c + neigh[j].c;
      0000A4 A8*00            [24]  593 	mov	r0,_bp
      0000A6 08               [12]  594 	inc	r0
      0000A7 E5*00            [12]  595 	mov	a,_bp
      0000A9 24 08            [12]  596 	add	a,#0x08
      0000AB F9               [12]  597 	mov	r1,a
      0000AC 74 02            [12]  598 	mov	a,#0x02
      0000AE 26               [12]  599 	add	a,@r0
      0000AF F7               [12]  600 	mov	@r1,a
      0000B0 E4               [12]  601 	clr	a
      0000B1 08               [12]  602 	inc	r0
      0000B2 36               [12]  603 	addc	a,@r0
      0000B3 09               [12]  604 	inc	r1
      0000B4 F7               [12]  605 	mov	@r1,a
      0000B5 08               [12]  606 	inc	r0
      0000B6 09               [12]  607 	inc	r1
      0000B7 E6               [12]  608 	mov	a,@r0
      0000B8 F7               [12]  609 	mov	@r1,a
      0000B9 74 02            [12]  610 	mov	a,#0x02
      0000BB 2A               [12]  611 	add	a,r2
      0000BC FA               [12]  612 	mov	r2,a
      0000BD E4               [12]  613 	clr	a
      0000BE 3B               [12]  614 	addc	a,r3
      0000BF FB               [12]  615 	mov	r3,a
      0000C0 8A 82            [24]  616 	mov	dpl,r2
      0000C2 8B 83            [24]  617 	mov	dph,r3
      0000C4 8C F0            [24]  618 	mov	b,r4
      0000C6 12r00r00         [24]  619 	lcall	__gptrget
      0000C9 FA               [12]  620 	mov	r2,a
      0000CA A3               [24]  621 	inc	dptr
      0000CB 12r00r00         [24]  622 	lcall	__gptrget
      0000CE FB               [12]  623 	mov	r3,a
      0000CF E5*00            [12]  624 	mov	a,_bp
      0000D1 24 06            [12]  625 	add	a,#0x06
      0000D3 F8               [12]  626 	mov	r0,a
      0000D4 E6               [12]  627 	mov	a,@r0
      0000D5 24r40            [12]  628 	add	a,#_neigh
      0000D7 FC               [12]  629 	mov	r4,a
      0000D8 08               [12]  630 	inc	r0
      0000D9 E6               [12]  631 	mov	a,@r0
      0000DA 34s00            [12]  632 	addc	a,#(_neigh >> 8)
      0000DC FD               [12]  633 	mov	r5,a
      0000DD 8C 82            [24]  634 	mov	dpl,r4
      0000DF 8D 83            [24]  635 	mov	dph,r5
      0000E1 A3               [24]  636 	inc	dptr
      0000E2 A3               [24]  637 	inc	dptr
      0000E3 E0               [24]  638 	movx	a,@dptr
      0000E4 FC               [12]  639 	mov	r4,a
      0000E5 A3               [24]  640 	inc	dptr
      0000E6 E0               [24]  641 	movx	a,@dptr
      0000E7 FD               [12]  642 	mov	r5,a
      0000E8 EC               [12]  643 	mov	a,r4
      0000E9 2A               [12]  644 	add	a,r2
      0000EA FA               [12]  645 	mov	r2,a
      0000EB ED               [12]  646 	mov	a,r5
      0000EC 3B               [12]  647 	addc	a,r3
      0000ED FB               [12]  648 	mov	r3,a
      0000EE E5*00            [12]  649 	mov	a,_bp
      0000F0 24 08            [12]  650 	add	a,#0x08
      0000F2 F8               [12]  651 	mov	r0,a
      0000F3 86 82            [24]  652 	mov	dpl,@r0
      0000F5 08               [12]  653 	inc	r0
      0000F6 86 83            [24]  654 	mov	dph,@r0
      0000F8 08               [12]  655 	inc	r0
      0000F9 86 F0            [24]  656 	mov	b,@r0
      0000FB EA               [12]  657 	mov	a,r2
      0000FC 12r00r00         [24]  658 	lcall	__gptrput
      0000FF A3               [24]  659 	inc	dptr
      000100 EB               [12]  660 	mov	a,r3
      000101 12r00r00         [24]  661 	lcall	__gptrput
                                    662 ;	walk.c:92: if (t->r < 0) t->r += ROWS;
      000104 A8*00            [24]  663 	mov	r0,_bp
      000106 08               [12]  664 	inc	r0
      000107 86 82            [24]  665 	mov	dpl,@r0
      000109 08               [12]  666 	inc	r0
      00010A 86 83            [24]  667 	mov	dph,@r0
      00010C 08               [12]  668 	inc	r0
      00010D 86 F0            [24]  669 	mov	b,@r0
      00010F 12r00r00         [24]  670 	lcall	__gptrget
      000112 FD               [12]  671 	mov	r5,a
      000113 A3               [24]  672 	inc	dptr
      000114 12r00r00         [24]  673 	lcall	__gptrget
      000117 FC               [12]  674 	mov	r4,a
      000118 EE               [12]  675 	mov	a,r6
      000119 30 E7 1D         [24]  676 	jnb	acc.7,00104$
      00011C 74 30            [12]  677 	mov	a,#0x30
      00011E 2D               [12]  678 	add	a,r5
      00011F FF               [12]  679 	mov	r7,a
      000120 E4               [12]  680 	clr	a
      000121 3C               [12]  681 	addc	a,r4
      000122 FE               [12]  682 	mov	r6,a
      000123 A8*00            [24]  683 	mov	r0,_bp
      000125 08               [12]  684 	inc	r0
      000126 86 82            [24]  685 	mov	dpl,@r0
      000128 08               [12]  686 	inc	r0
      000129 86 83            [24]  687 	mov	dph,@r0
      00012B 08               [12]  688 	inc	r0
      00012C 86 F0            [24]  689 	mov	b,@r0
      00012E EF               [12]  690 	mov	a,r7
      00012F 12r00r00         [24]  691 	lcall	__gptrput
      000132 A3               [24]  692 	inc	dptr
      000133 EE               [12]  693 	mov	a,r6
      000134 12r00r00         [24]  694 	lcall	__gptrput
      000137 80 27            [24]  695 	sjmp	00105$
      000139                        696 00104$:
                                    697 ;	walk.c:93: else if (t->r >= ROWS) t->r -= ROWS;
      000139 C3               [12]  698 	clr	c
      00013A ED               [12]  699 	mov	a,r5
      00013B 94 30            [12]  700 	subb	a,#0x30
      00013D EC               [12]  701 	mov	a,r4
      00013E 64 80            [12]  702 	xrl	a,#0x80
      000140 94 80            [12]  703 	subb	a,#0x80
      000142 40 1C            [24]  704 	jc	00105$
      000144 ED               [12]  705 	mov	a,r5
      000145 24 D0            [12]  706 	add	a,#0xd0
      000147 FD               [12]  707 	mov	r5,a
      000148 EC               [12]  708 	mov	a,r4
      000149 34 FF            [12]  709 	addc	a,#0xff
      00014B FC               [12]  710 	mov	r4,a
      00014C A8*00            [24]  711 	mov	r0,_bp
      00014E 08               [12]  712 	inc	r0
      00014F 86 82            [24]  713 	mov	dpl,@r0
      000151 08               [12]  714 	inc	r0
      000152 86 83            [24]  715 	mov	dph,@r0
      000154 08               [12]  716 	inc	r0
      000155 86 F0            [24]  717 	mov	b,@r0
      000157 ED               [12]  718 	mov	a,r5
      000158 12r00r00         [24]  719 	lcall	__gptrput
      00015B A3               [24]  720 	inc	dptr
      00015C EC               [12]  721 	mov	a,r4
      00015D 12r00r00         [24]  722 	lcall	__gptrput
      000160                        723 00105$:
                                    724 ;	walk.c:94: if (t->c < 0) t->c += COLS;
      000160 E5*00            [12]  725 	mov	a,_bp
      000162 24 08            [12]  726 	add	a,#0x08
      000164 F8               [12]  727 	mov	r0,a
      000165 86 82            [24]  728 	mov	dpl,@r0
      000167 08               [12]  729 	inc	r0
      000168 86 83            [24]  730 	mov	dph,@r0
      00016A 08               [12]  731 	inc	r0
      00016B 86 F0            [24]  732 	mov	b,@r0
      00016D 12r00r00         [24]  733 	lcall	__gptrget
      000170 A3               [24]  734 	inc	dptr
      000171 12r00r00         [24]  735 	lcall	__gptrget
      000174 30 E7 35         [24]  736 	jnb	acc.7,00109$
      000177 E5*00            [12]  737 	mov	a,_bp
      000179 24 08            [12]  738 	add	a,#0x08
      00017B F8               [12]  739 	mov	r0,a
      00017C 86 82            [24]  740 	mov	dpl,@r0
      00017E 08               [12]  741 	inc	r0
      00017F 86 83            [24]  742 	mov	dph,@r0
      000181 08               [12]  743 	inc	r0
      000182 86 F0            [24]  744 	mov	b,@r0
      000184 12r00r00         [24]  745 	lcall	__gptrget
      000187 FE               [12]  746 	mov	r6,a
      000188 A3               [24]  747 	inc	dptr
      000189 12r00r00         [24]  748 	lcall	__gptrget
      00018C FF               [12]  749 	mov	r7,a
      00018D 74 CA            [12]  750 	mov	a,#0xca
      00018F 2E               [12]  751 	add	a,r6
      000190 FE               [12]  752 	mov	r6,a
      000191 E4               [12]  753 	clr	a
      000192 3F               [12]  754 	addc	a,r7
      000193 FF               [12]  755 	mov	r7,a
      000194 E5*00            [12]  756 	mov	a,_bp
      000196 24 08            [12]  757 	add	a,#0x08
      000198 F8               [12]  758 	mov	r0,a
      000199 86 82            [24]  759 	mov	dpl,@r0
      00019B 08               [12]  760 	inc	r0
      00019C 86 83            [24]  761 	mov	dph,@r0
      00019E 08               [12]  762 	inc	r0
      00019F 86 F0            [24]  763 	mov	b,@r0
      0001A1 EE               [12]  764 	mov	a,r6
      0001A2 12r00r00         [24]  765 	lcall	__gptrput
      0001A5 A3               [24]  766 	inc	dptr
      0001A6 EF               [12]  767 	mov	a,r7
      0001A7 12r00r00         [24]  768 	lcall	__gptrput
      0001AA 80 55            [24]  769 	sjmp	00110$
      0001AC                        770 00109$:
                                    771 ;	walk.c:95: else if (t->c >= COLS) t->c -= COLS;
      0001AC E5*00            [12]  772 	mov	a,_bp
      0001AE 24 08            [12]  773 	add	a,#0x08
      0001B0 F8               [12]  774 	mov	r0,a
      0001B1 86 82            [24]  775 	mov	dpl,@r0
      0001B3 08               [12]  776 	inc	r0
      0001B4 86 83            [24]  777 	mov	dph,@r0
      0001B6 08               [12]  778 	inc	r0
      0001B7 86 F0            [24]  779 	mov	b,@r0
      0001B9 12r00r00         [24]  780 	lcall	__gptrget
      0001BC FE               [12]  781 	mov	r6,a
      0001BD A3               [24]  782 	inc	dptr
      0001BE 12r00r00         [24]  783 	lcall	__gptrget
      0001C1 FF               [12]  784 	mov	r7,a
      0001C2 C3               [12]  785 	clr	c
      0001C3 EE               [12]  786 	mov	a,r6
      0001C4 94 CA            [12]  787 	subb	a,#0xca
      0001C6 EF               [12]  788 	mov	a,r7
      0001C7 64 80            [12]  789 	xrl	a,#0x80
      0001C9 94 80            [12]  790 	subb	a,#0x80
      0001CB 40 34            [24]  791 	jc	00110$
      0001CD E5*00            [12]  792 	mov	a,_bp
      0001CF 24 08            [12]  793 	add	a,#0x08
      0001D1 F8               [12]  794 	mov	r0,a
      0001D2 86 82            [24]  795 	mov	dpl,@r0
      0001D4 08               [12]  796 	inc	r0
      0001D5 86 83            [24]  797 	mov	dph,@r0
      0001D7 08               [12]  798 	inc	r0
      0001D8 86 F0            [24]  799 	mov	b,@r0
      0001DA 12r00r00         [24]  800 	lcall	__gptrget
      0001DD FE               [12]  801 	mov	r6,a
      0001DE A3               [24]  802 	inc	dptr
      0001DF 12r00r00         [24]  803 	lcall	__gptrget
      0001E2 FF               [12]  804 	mov	r7,a
      0001E3 EE               [12]  805 	mov	a,r6
      0001E4 24 36            [12]  806 	add	a,#0x36
      0001E6 FE               [12]  807 	mov	r6,a
      0001E7 EF               [12]  808 	mov	a,r7
      0001E8 34 FF            [12]  809 	addc	a,#0xff
      0001EA FF               [12]  810 	mov	r7,a
      0001EB E5*00            [12]  811 	mov	a,_bp
      0001ED 24 08            [12]  812 	add	a,#0x08
      0001EF F8               [12]  813 	mov	r0,a
      0001F0 86 82            [24]  814 	mov	dpl,@r0
      0001F2 08               [12]  815 	inc	r0
      0001F3 86 83            [24]  816 	mov	dph,@r0
      0001F5 08               [12]  817 	inc	r0
      0001F6 86 F0            [24]  818 	mov	b,@r0
      0001F8 EE               [12]  819 	mov	a,r6
      0001F9 12r00r00         [24]  820 	lcall	__gptrput
      0001FC A3               [24]  821 	inc	dptr
      0001FD EF               [12]  822 	mov	a,r7
      0001FE 12r00r00         [24]  823 	lcall	__gptrput
      000201                        824 00110$:
                                    825 ;	walk.c:97: if (g[t->r][t->c] == 0xaa) return 0;
      000201 A8*00            [24]  826 	mov	r0,_bp
      000203 08               [12]  827 	inc	r0
      000204 86 82            [24]  828 	mov	dpl,@r0
      000206 08               [12]  829 	inc	r0
      000207 86 83            [24]  830 	mov	dph,@r0
      000209 08               [12]  831 	inc	r0
      00020A 86 F0            [24]  832 	mov	b,@r0
      00020C 12r00r00         [24]  833 	lcall	__gptrget
      00020F FE               [12]  834 	mov	r6,a
      000210 A3               [24]  835 	inc	dptr
      000211 12r00r00         [24]  836 	lcall	__gptrget
      000214 FF               [12]  837 	mov	r7,a
      000215 C0 06            [24]  838 	push	ar6
      000217 C0 07            [24]  839 	push	ar7
      000219 90 00 CA         [24]  840 	mov	dptr,#0x00ca
      00021C 12r00r00         [24]  841 	lcall	__mulint
      00021F AE 82            [24]  842 	mov	r6,dpl
      000221 AF 83            [24]  843 	mov	r7,dph
      000223 15 81            [12]  844 	dec	sp
      000225 15 81            [12]  845 	dec	sp
      000227 EE               [12]  846 	mov	a,r6
      000228 24r00            [12]  847 	add	a,#_g
      00022A FE               [12]  848 	mov	r6,a
      00022B EF               [12]  849 	mov	a,r7
      00022C 34s00            [12]  850 	addc	a,#(_g >> 8)
      00022E FF               [12]  851 	mov	r7,a
      00022F E5*00            [12]  852 	mov	a,_bp
      000231 24 08            [12]  853 	add	a,#0x08
      000233 F8               [12]  854 	mov	r0,a
      000234 86 82            [24]  855 	mov	dpl,@r0
      000236 08               [12]  856 	inc	r0
      000237 86 83            [24]  857 	mov	dph,@r0
      000239 08               [12]  858 	inc	r0
      00023A 86 F0            [24]  859 	mov	b,@r0
      00023C 12r00r00         [24]  860 	lcall	__gptrget
      00023F FC               [12]  861 	mov	r4,a
      000240 A3               [24]  862 	inc	dptr
      000241 12r00r00         [24]  863 	lcall	__gptrget
      000244 FD               [12]  864 	mov	r5,a
      000245 EC               [12]  865 	mov	a,r4
      000246 2E               [12]  866 	add	a,r6
      000247 F5 82            [12]  867 	mov	dpl,a
      000249 ED               [12]  868 	mov	a,r5
      00024A 3F               [12]  869 	addc	a,r7
      00024B F5 83            [12]  870 	mov	dph,a
      00024D E0               [24]  871 	movx	a,@dptr
      00024E FF               [12]  872 	mov	r7,a
      00024F BF AA 05         [24]  873 	cjne	r7,#0xaa,00114$
      000252 90 00 00         [24]  874 	mov	dptr,#0x0000
      000255 80 59            [24]  875 	sjmp	00116$
      000257                        876 00114$:
                                    877 ;	walk.c:98: else if (g[t->r][t->c] != 0x55) bang();
      000257 A8*00            [24]  878 	mov	r0,_bp
      000259 08               [12]  879 	inc	r0
      00025A 86 82            [24]  880 	mov	dpl,@r0
      00025C 08               [12]  881 	inc	r0
      00025D 86 83            [24]  882 	mov	dph,@r0
      00025F 08               [12]  883 	inc	r0
      000260 86 F0            [24]  884 	mov	b,@r0
      000262 12r00r00         [24]  885 	lcall	__gptrget
      000265 FE               [12]  886 	mov	r6,a
      000266 A3               [24]  887 	inc	dptr
      000267 12r00r00         [24]  888 	lcall	__gptrget
      00026A FF               [12]  889 	mov	r7,a
      00026B C0 06            [24]  890 	push	ar6
      00026D C0 07            [24]  891 	push	ar7
      00026F 90 00 CA         [24]  892 	mov	dptr,#0x00ca
      000272 12r00r00         [24]  893 	lcall	__mulint
      000275 AE 82            [24]  894 	mov	r6,dpl
      000277 AF 83            [24]  895 	mov	r7,dph
      000279 15 81            [12]  896 	dec	sp
      00027B 15 81            [12]  897 	dec	sp
      00027D EE               [12]  898 	mov	a,r6
      00027E 24r00            [12]  899 	add	a,#_g
      000280 FE               [12]  900 	mov	r6,a
      000281 EF               [12]  901 	mov	a,r7
      000282 34s00            [12]  902 	addc	a,#(_g >> 8)
      000284 FF               [12]  903 	mov	r7,a
      000285 E5*00            [12]  904 	mov	a,_bp
      000287 24 08            [12]  905 	add	a,#0x08
      000289 F8               [12]  906 	mov	r0,a
      00028A 86 82            [24]  907 	mov	dpl,@r0
      00028C 08               [12]  908 	inc	r0
      00028D 86 83            [24]  909 	mov	dph,@r0
      00028F 08               [12]  910 	inc	r0
      000290 86 F0            [24]  911 	mov	b,@r0
      000292 12r00r00         [24]  912 	lcall	__gptrget
      000295 FC               [12]  913 	mov	r4,a
      000296 A3               [24]  914 	inc	dptr
      000297 12r00r00         [24]  915 	lcall	__gptrget
      00029A FD               [12]  916 	mov	r5,a
      00029B EC               [12]  917 	mov	a,r4
      00029C 2E               [12]  918 	add	a,r6
      00029D F5 82            [12]  919 	mov	dpl,a
      00029F ED               [12]  920 	mov	a,r5
      0002A0 3F               [12]  921 	addc	a,r7
      0002A1 F5 83            [12]  922 	mov	dph,a
      0002A3 E0               [24]  923 	movx	a,@dptr
      0002A4 FF               [12]  924 	mov	r7,a
      0002A5 BF 55 02         [24]  925 	cjne	r7,#0x55,00148$
      0002A8 80 03            [24]  926 	sjmp	00115$
      0002AA                        927 00148$:
      0002AA 12r00r1D         [24]  928 	lcall	_bang
      0002AD                        929 00115$:
                                    930 ;	walk.c:100: return 1;
      0002AD 90 00 01         [24]  931 	mov	dptr,#0x0001
      0002B0                        932 00116$:
                                    933 ;	walk.c:101: }
      0002B0 85*00 81         [24]  934 	mov	sp,_bp
      0002B3 D0*00            [24]  935 	pop	_bp
      0002B5 22               [24]  936 	ret
                                    937 ;------------------------------------------------------------
                                    938 ;Allocation info for local variables in function 'walk'
                                    939 ;------------------------------------------------------------
                                    940 ;nstart                    Allocated to registers 
                                    941 ;cur                       Allocated to stack - _bp +10
                                    942 ;t                         Allocated to stack - _bp +14
                                    943 ;j                         Allocated to stack - _bp +18
                                    944 ;f                         Allocated to registers r3 
                                    945 ;sloc0                     Allocated to stack - _bp +1
                                    946 ;sloc1                     Allocated to stack - _bp +2
                                    947 ;sloc2                     Allocated to stack - _bp +3
                                    948 ;sloc3                     Allocated to stack - _bp +17
                                    949 ;sloc4                     Allocated to stack - _bp +4
                                    950 ;sloc5                     Allocated to stack - _bp +5
                                    951 ;sloc6                     Allocated to stack - _bp +6
                                    952 ;sloc7                     Allocated to stack - _bp +7
                                    953 ;------------------------------------------------------------
                                    954 ;	walk.c:103: static void walk(struct node *nstart) {
                                    955 ;	-----------------------------------------
                                    956 ;	 function walk
                                    957 ;	-----------------------------------------
      0002B6                        958 _walk:
      0002B6 C0*00            [24]  959 	push	_bp
      0002B8 E5 81            [12]  960 	mov	a,sp
      0002BA F5*00            [12]  961 	mov	_bp,a
      0002BC 24 12            [12]  962 	add	a,#0x12
      0002BE F5 81            [12]  963 	mov	sp,a
      0002C0 AD 82            [24]  964 	mov	r5,dpl
      0002C2 AE 83            [24]  965 	mov	r6,dph
      0002C4 AF F0            [24]  966 	mov	r7,b
                                    967 ;	walk.c:107: cur = *nstart;
      0002C6 E5*00            [12]  968 	mov	a,_bp
      0002C8 24 0A            [12]  969 	add	a,#0x0a
      0002CA F9               [12]  970 	mov	r1,a
      0002CB FA               [12]  971 	mov	r2,a
      0002CC 7B 00            [12]  972 	mov	r3,#0x00
      0002CE 7C 40            [12]  973 	mov	r4,#0x40
      0002D0 C0 01            [24]  974 	push	ar1
      0002D2 74 04            [12]  975 	mov	a,#0x04
      0002D4 C0 E0            [24]  976 	push	acc
      0002D6 E4               [12]  977 	clr	a
      0002D7 C0 E0            [24]  978 	push	acc
      0002D9 C0 05            [24]  979 	push	ar5
      0002DB C0 06            [24]  980 	push	ar6
      0002DD C0 07            [24]  981 	push	ar7
      0002DF 8A 82            [24]  982 	mov	dpl,r2
      0002E1 8B 83            [24]  983 	mov	dph,r3
      0002E3 8C F0            [24]  984 	mov	b,r4
      0002E5 12r00r00         [24]  985 	lcall	___memcpy
      0002E8 E5 81            [12]  986 	mov	a,sp
      0002EA 24 FB            [12]  987 	add	a,#0xfb
      0002EC F5 81            [12]  988 	mov	sp,a
      0002EE D0 01            [24]  989 	pop	ar1
                                    990 ;	walk.c:109: process:
      0002F0 E5*00            [12]  991 	mov	a,_bp
      0002F2 24 06            [12]  992 	add	a,#0x06
      0002F4 F8               [12]  993 	mov	r0,a
      0002F5 A6 01            [24]  994 	mov	@r0,ar1
      0002F7 E5*00            [12]  995 	mov	a,_bp
      0002F9 24 0E            [12]  996 	add	a,#0x0e
      0002FB FE               [12]  997 	mov	r6,a
      0002FC E5*00            [12]  998 	mov	a,_bp
      0002FE 24 03            [12]  999 	add	a,#0x03
      000300 F8               [12] 1000 	mov	r0,a
      000301 A6 01            [24] 1001 	mov	@r0,ar1
      000303 E5*00            [12] 1002 	mov	a,_bp
      000305 24 05            [12] 1003 	add	a,#0x05
      000307 F8               [12] 1004 	mov	r0,a
      000308 A6 01            [24] 1005 	mov	@r0,ar1
      00030A E5*00            [12] 1006 	mov	a,_bp
      00030C 24 04            [12] 1007 	add	a,#0x04
      00030E F8               [12] 1008 	mov	r0,a
      00030F A6 06            [24] 1009 	mov	@r0,ar6
      000311 89 02            [24] 1010 	mov	ar2,r1
      000313 A8*00            [24] 1011 	mov	r0,_bp
      000315 08               [12] 1012 	inc	r0
      000316 A6 06            [24] 1013 	mov	@r0,ar6
      000318 A8*00            [24] 1014 	mov	r0,_bp
      00031A 08               [12] 1015 	inc	r0
      00031B 08               [12] 1016 	inc	r0
      00031C A6 01            [24] 1017 	mov	@r0,ar1
      00031E 74 02            [12] 1018 	mov	a,#0x02
      000320 29               [12] 1019 	add	a,r1
      000321 F8               [12] 1020 	mov	r0,a
      000322                       1021 00101$:
                                   1022 ;	walk.c:110: g[cur.r][cur.c] = 0xaa;
      000322 C0 02            [24] 1023 	push	ar2
      000324 87 02            [24] 1024 	mov	ar2,@r1
      000326 09               [12] 1025 	inc	r1
      000327 87 05            [24] 1026 	mov	ar5,@r1
      000329 19               [12] 1027 	dec	r1
      00032A C0 06            [24] 1028 	push	ar6
      00032C C0 01            [24] 1029 	push	ar1
      00032E C0 00            [24] 1030 	push	ar0
      000330 C0 02            [24] 1031 	push	ar2
      000332 C0 05            [24] 1032 	push	ar5
      000334 90 00 CA         [24] 1033 	mov	dptr,#0x00ca
      000337 12r00r00         [24] 1034 	lcall	__mulint
      00033A AA 82            [24] 1035 	mov	r2,dpl
      00033C AD 83            [24] 1036 	mov	r5,dph
      00033E 15 81            [12] 1037 	dec	sp
      000340 15 81            [12] 1038 	dec	sp
      000342 D0 00            [24] 1039 	pop	ar0
      000344 D0 01            [24] 1040 	pop	ar1
      000346 EA               [12] 1041 	mov	a,r2
      000347 24r00            [12] 1042 	add	a,#_g
      000349 FF               [12] 1043 	mov	r7,a
      00034A ED               [12] 1044 	mov	a,r5
      00034B 34s00            [12] 1045 	addc	a,#(_g >> 8)
      00034D FC               [12] 1046 	mov	r4,a
      00034E 86 02            [24] 1047 	mov	ar2,@r0
      000350 08               [12] 1048 	inc	r0
      000351 86 05            [24] 1049 	mov	ar5,@r0
      000353 18               [12] 1050 	dec	r0
      000354 EA               [12] 1051 	mov	a,r2
      000355 2F               [12] 1052 	add	a,r7
      000356 F5 82            [12] 1053 	mov	dpl,a
      000358 ED               [12] 1054 	mov	a,r5
      000359 3C               [12] 1055 	addc	a,r4
      00035A F5 83            [12] 1056 	mov	dph,a
      00035C 74 AA            [12] 1057 	mov	a,#0xaa
      00035E F0               [24] 1058 	movx	@dptr,a
                                   1059 ;	walk.c:111: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      00035F 86 02            [24] 1060 	mov	ar2,@r0
      000361 08               [12] 1061 	inc	r0
      000362 86 05            [24] 1062 	mov	ar5,@r0
      000364 18               [12] 1063 	dec	r0
      000365 74 01            [12] 1064 	mov	a,#0x01
      000367 2A               [12] 1065 	add	a,r2
      000368 FF               [12] 1066 	mov	r7,a
      000369 E4               [12] 1067 	clr	a
      00036A 3D               [12] 1068 	addc	a,r5
      00036B FC               [12] 1069 	mov	r4,a
      00036C 87 02            [24] 1070 	mov	ar2,@r1
      00036E 09               [12] 1071 	inc	r1
      00036F 87 05            [24] 1072 	mov	ar5,@r1
      000371 19               [12] 1073 	dec	r1
      000372 74 04            [12] 1074 	mov	a,#0x04
      000374 2A               [12] 1075 	add	a,r2
      000375 FA               [12] 1076 	mov	r2,a
      000376 E4               [12] 1077 	clr	a
      000377 3D               [12] 1078 	addc	a,r5
      000378 FD               [12] 1079 	mov	r5,a
      000379 C0 02            [24] 1080 	push	ar2
      00037B C0 01            [24] 1081 	push	ar1
      00037D C0 00            [24] 1082 	push	ar0
      00037F C0 07            [24] 1083 	push	ar7
      000381 C0 04            [24] 1084 	push	ar4
      000383 C0 02            [24] 1085 	push	ar2
      000385 C0 05            [24] 1086 	push	ar5
      000387 74r0D            [12] 1087 	mov	a,#___str_1
      000389 C0 E0            [24] 1088 	push	acc
      00038B 74s00            [12] 1089 	mov	a,#(___str_1 >> 8)
      00038D C0 E0            [24] 1090 	push	acc
      00038F 74 80            [12] 1091 	mov	a,#0x80
      000391 C0 E0            [24] 1092 	push	acc
      000393 12r00r00         [24] 1093 	lcall	_printf
      000396 E5 81            [12] 1094 	mov	a,sp
      000398 24 F9            [12] 1095 	add	a,#0xf9
      00039A F5 81            [12] 1096 	mov	sp,a
      00039C D0 00            [24] 1097 	pop	ar0
      00039E D0 01            [24] 1098 	pop	ar1
      0003A0 D0 02            [24] 1099 	pop	ar2
      0003A2 D0 06            [24] 1100 	pop	ar6
                                   1101 ;	walk.c:138: return;
      0003A4 D0 02            [24] 1102 	pop	ar2
                                   1103 ;	walk.c:113: next:
      0003A6                       1104 00102$:
                                   1105 ;	walk.c:114: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003A6 C0 02            [24] 1106 	push	ar2
      0003A8 86 07            [24] 1107 	mov	ar7,@r0
      0003AA 08               [12] 1108 	inc	r0
      0003AB 86 04            [24] 1109 	mov	ar4,@r0
      0003AD 18               [12] 1110 	dec	r0
      0003AE 87 02            [24] 1111 	mov	ar2,@r1
      0003B0 09               [12] 1112 	inc	r1
      0003B1 87 05            [24] 1113 	mov	ar5,@r1
      0003B3 19               [12] 1114 	dec	r1
      0003B4 C0 06            [24] 1115 	push	ar6
      0003B6 C0 02            [24] 1116 	push	ar2
      0003B8 C0 01            [24] 1117 	push	ar1
      0003BA C0 00            [24] 1118 	push	ar0
      0003BC C0 07            [24] 1119 	push	ar7
      0003BE C0 04            [24] 1120 	push	ar4
      0003C0 C0 02            [24] 1121 	push	ar2
      0003C2 C0 05            [24] 1122 	push	ar5
      0003C4 90rBDr60         [24] 1123 	mov	dptr,#_sp
      0003C7 E0               [24] 1124 	movx	a,@dptr
      0003C8 C0 E0            [24] 1125 	push	acc
      0003CA A3               [24] 1126 	inc	dptr
      0003CB E0               [24] 1127 	movx	a,@dptr
      0003CC C0 E0            [24] 1128 	push	acc
      0003CE 74r17            [12] 1129 	mov	a,#___str_2
      0003D0 C0 E0            [24] 1130 	push	acc
      0003D2 74s00            [12] 1131 	mov	a,#(___str_2 >> 8)
      0003D4 C0 E0            [24] 1132 	push	acc
      0003D6 74 80            [12] 1133 	mov	a,#0x80
      0003D8 C0 E0            [24] 1134 	push	acc
      0003DA 12r00r00         [24] 1135 	lcall	_printf
      0003DD E5 81            [12] 1136 	mov	a,sp
      0003DF 24 F7            [12] 1137 	add	a,#0xf7
      0003E1 F5 81            [12] 1138 	mov	sp,a
      0003E3 D0 00            [24] 1139 	pop	ar0
      0003E5 D0 01            [24] 1140 	pop	ar1
      0003E7 D0 02            [24] 1141 	pop	ar2
      0003E9 D0 06            [24] 1142 	pop	ar6
                                   1143 ;	walk.c:116: for (j = 0, f = 0; j < NMAX; j++) {
      0003EB 7B 00            [12] 1144 	mov	r3,#0x00
      0003ED C0 00            [24] 1145 	push	ar0
      0003EF E5*00            [12] 1146 	mov	a,_bp
      0003F1 24 12            [12] 1147 	add	a,#0x12
      0003F3 F8               [12] 1148 	mov	r0,a
      0003F4 76 00            [12] 1149 	mov	@r0,#0x00
      0003F6 D0 00            [24] 1150 	pop	ar0
                                   1151 ;	walk.c:138: return;
      0003F8 D0 02            [24] 1152 	pop	ar2
                                   1153 ;	walk.c:116: for (j = 0, f = 0; j < NMAX; j++) {
      0003FA                       1154 00120$:
      0003FA C0 00            [24] 1155 	push	ar0
      0003FC E5*00            [12] 1156 	mov	a,_bp
      0003FE 24 12            [12] 1157 	add	a,#0x12
      000400 F8               [12] 1158 	mov	r0,a
      000401 B6 10 00         [24] 1159 	cjne	@r0,#0x10,00160$
      000404                       1160 00160$:
      000404 D0 00            [24] 1161 	pop	ar0
      000406 40 03            [24] 1162 	jc	00161$
      000408 02r04r88         [24] 1163 	ljmp	00106$
      00040B                       1164 00161$:
                                   1165 ;	walk.c:117: if (!update(&t, &cur, j)) continue;
      00040B C0 02            [24] 1166 	push	ar2
      00040D C0 00            [24] 1167 	push	ar0
      00040F E5*00            [12] 1168 	mov	a,_bp
      000411 24 06            [12] 1169 	add	a,#0x06
      000413 F8               [12] 1170 	mov	r0,a
      000414 C0 01            [24] 1171 	push	ar1
      000416 E5*00            [12] 1172 	mov	a,_bp
      000418 24 07            [12] 1173 	add	a,#0x07
      00041A F9               [12] 1174 	mov	r1,a
      00041B E6               [12] 1175 	mov	a,@r0
      00041C F7               [12] 1176 	mov	@r1,a
      00041D 09               [12] 1177 	inc	r1
      00041E 77 00            [12] 1178 	mov	@r1,#0x00
      000420 09               [12] 1179 	inc	r1
      000421 77 40            [12] 1180 	mov	@r1,#0x40
      000423 D0 01            [24] 1181 	pop	ar1
      000425 D0 00            [24] 1182 	pop	ar0
      000427 8E 04            [24] 1183 	mov	ar4,r6
      000429 7D 00            [12] 1184 	mov	r5,#0x00
      00042B 7F 40            [12] 1185 	mov	r7,#0x40
      00042D C0 06            [24] 1186 	push	ar6
      00042F C0 03            [24] 1187 	push	ar3
      000431 C0 02            [24] 1188 	push	ar2
      000433 C0 01            [24] 1189 	push	ar1
      000435 C0 00            [24] 1190 	push	ar0
      000437 85 00 F0         [24] 1191 	mov	b,ar0
      00043A E5*00            [12] 1192 	mov	a,_bp
      00043C 24 12            [12] 1193 	add	a,#0x12
      00043E F8               [12] 1194 	mov	r0,a
      00043F E6               [12] 1195 	mov	a,@r0
      000440 C0 E0            [24] 1196 	push	acc
      000442 A8 F0            [24] 1197 	mov	r0,b
      000444 85 00 F0         [24] 1198 	mov	b,ar0
      000447 E5*00            [12] 1199 	mov	a,_bp
      000449 24 07            [12] 1200 	add	a,#0x07
      00044B F8               [12] 1201 	mov	r0,a
      00044C E6               [12] 1202 	mov	a,@r0
      00044D C0 E0            [24] 1203 	push	acc
      00044F 08               [12] 1204 	inc	r0
      000450 E6               [12] 1205 	mov	a,@r0
      000451 C0 E0            [24] 1206 	push	acc
      000453 08               [12] 1207 	inc	r0
      000454 E6               [12] 1208 	mov	a,@r0
      000455 C0 E0            [24] 1209 	push	acc
      000457 8C 82            [24] 1210 	mov	dpl,r4
      000459 8D 83            [24] 1211 	mov	dph,r5
      00045B 8F F0            [24] 1212 	mov	b,r7
      00045D 12r00r29         [24] 1213 	lcall	_update
      000460 AD 82            [24] 1214 	mov	r5,dpl
      000462 AF 83            [24] 1215 	mov	r7,dph
      000464 E5 81            [12] 1216 	mov	a,sp
      000466 24 FC            [12] 1217 	add	a,#0xfc
      000468 F5 81            [12] 1218 	mov	sp,a
      00046A D0 00            [24] 1219 	pop	ar0
      00046C D0 01            [24] 1220 	pop	ar1
      00046E D0 02            [24] 1221 	pop	ar2
      000470 D0 03            [24] 1222 	pop	ar3
      000472 D0 06            [24] 1223 	pop	ar6
      000474 D0 02            [24] 1224 	pop	ar2
      000476 ED               [12] 1225 	mov	a,r5
      000477 4F               [12] 1226 	orl	a,r7
      000478 60 01            [24] 1227 	jz	00105$
                                   1228 ;	walk.c:118: f++;
      00047A 0B               [12] 1229 	inc	r3
      00047B                       1230 00105$:
                                   1231 ;	walk.c:116: for (j = 0, f = 0; j < NMAX; j++) {
      00047B C0 00            [24] 1232 	push	ar0
      00047D E5*00            [12] 1233 	mov	a,_bp
      00047F 24 12            [12] 1234 	add	a,#0x12
      000481 F8               [12] 1235 	mov	r0,a
      000482 06               [12] 1236 	inc	@r0
      000483 D0 00            [24] 1237 	pop	ar0
      000485 02r03rFA         [24] 1238 	ljmp	00120$
      000488                       1239 00106$:
                                   1240 ;	walk.c:121: if (f) {
      000488 EB               [12] 1241 	mov	a,r3
      000489 70 03            [24] 1242 	jnz	00163$
      00048B 02r05rC0         [24] 1243 	ljmp	00115$
      00048E                       1244 00163$:
                                   1245 ;	walk.c:122: while (1) {
      00048E                       1246 00112$:
                                   1247 ;	walk.c:123: j = rand() % NMAX;
      00048E C0 02            [24] 1248 	push	ar2
      000490 C0 06            [24] 1249 	push	ar6
      000492 C0 02            [24] 1250 	push	ar2
      000494 C0 01            [24] 1251 	push	ar1
      000496 C0 00            [24] 1252 	push	ar0
      000498 12r00r00         [24] 1253 	lcall	_rand
      00049B AD 82            [24] 1254 	mov	r5,dpl
      00049D AF 83            [24] 1255 	mov	r7,dph
      00049F 74 10            [12] 1256 	mov	a,#0x10
      0004A1 C0 E0            [24] 1257 	push	acc
      0004A3 E4               [12] 1258 	clr	a
      0004A4 C0 E0            [24] 1259 	push	acc
      0004A6 8D 82            [24] 1260 	mov	dpl,r5
      0004A8 8F 83            [24] 1261 	mov	dph,r7
      0004AA 12r00r00         [24] 1262 	lcall	__modsint
      0004AD AD 82            [24] 1263 	mov	r5,dpl
      0004AF 15 81            [12] 1264 	dec	sp
      0004B1 15 81            [12] 1265 	dec	sp
      0004B3 D0 00            [24] 1266 	pop	ar0
      0004B5 D0 01            [24] 1267 	pop	ar1
      0004B7 D0 02            [24] 1268 	pop	ar2
      0004B9 D0 06            [24] 1269 	pop	ar6
      0004BB 8D 04            [24] 1270 	mov	ar4,r5
                                   1271 ;	walk.c:124: if (!update(&t, &cur, j)) continue;
      0004BD C0 00            [24] 1272 	push	ar0
      0004BF E5*00            [12] 1273 	mov	a,_bp
      0004C1 24 05            [12] 1274 	add	a,#0x05
      0004C3 F8               [12] 1275 	mov	r0,a
      0004C4 C0 01            [24] 1276 	push	ar1
      0004C6 E5*00            [12] 1277 	mov	a,_bp
      0004C8 24 07            [12] 1278 	add	a,#0x07
      0004CA F9               [12] 1279 	mov	r1,a
      0004CB E6               [12] 1280 	mov	a,@r0
      0004CC F7               [12] 1281 	mov	@r1,a
      0004CD 09               [12] 1282 	inc	r1
      0004CE 77 00            [12] 1283 	mov	@r1,#0x00
      0004D0 09               [12] 1284 	inc	r1
      0004D1 77 40            [12] 1285 	mov	@r1,#0x40
      0004D3 D0 01            [24] 1286 	pop	ar1
      0004D5 E5*00            [12] 1287 	mov	a,_bp
      0004D7 24 04            [12] 1288 	add	a,#0x04
      0004D9 F8               [12] 1289 	mov	r0,a
      0004DA 86 02            [24] 1290 	mov	ar2,@r0
      0004DC 7D 00            [12] 1291 	mov	r5,#0x00
      0004DE 7F 40            [12] 1292 	mov	r7,#0x40
      0004E0 D0 00            [24] 1293 	pop	ar0
      0004E2 C0 06            [24] 1294 	push	ar6
      0004E4 C0 02            [24] 1295 	push	ar2
      0004E6 C0 01            [24] 1296 	push	ar1
      0004E8 C0 00            [24] 1297 	push	ar0
      0004EA C0 04            [24] 1298 	push	ar4
      0004EC 85 00 F0         [24] 1299 	mov	b,ar0
      0004EF E5*00            [12] 1300 	mov	a,_bp
      0004F1 24 07            [12] 1301 	add	a,#0x07
      0004F3 F8               [12] 1302 	mov	r0,a
      0004F4 E6               [12] 1303 	mov	a,@r0
      0004F5 C0 E0            [24] 1304 	push	acc
      0004F7 08               [12] 1305 	inc	r0
      0004F8 E6               [12] 1306 	mov	a,@r0
      0004F9 C0 E0            [24] 1307 	push	acc
      0004FB 08               [12] 1308 	inc	r0
      0004FC E6               [12] 1309 	mov	a,@r0
      0004FD C0 E0            [24] 1310 	push	acc
      0004FF 8A 82            [24] 1311 	mov	dpl,r2
      000501 8D 83            [24] 1312 	mov	dph,r5
      000503 8F F0            [24] 1313 	mov	b,r7
      000505 12r00r29         [24] 1314 	lcall	_update
      000508 AD 82            [24] 1315 	mov	r5,dpl
      00050A AF 83            [24] 1316 	mov	r7,dph
      00050C E5 81            [12] 1317 	mov	a,sp
      00050E 24 FC            [12] 1318 	add	a,#0xfc
      000510 F5 81            [12] 1319 	mov	sp,a
      000512 D0 00            [24] 1320 	pop	ar0
      000514 D0 01            [24] 1321 	pop	ar1
      000516 D0 02            [24] 1322 	pop	ar2
      000518 D0 06            [24] 1323 	pop	ar6
      00051A D0 02            [24] 1324 	pop	ar2
      00051C ED               [12] 1325 	mov	a,r5
      00051D 4F               [12] 1326 	orl	a,r7
      00051E 70 03            [24] 1327 	jnz	00164$
      000520 02r04r8E         [24] 1328 	ljmp	00112$
      000523                       1329 00164$:
                                   1330 ;	walk.c:126: if (!stpush(&cur)) bang();
      000523 8A 04            [24] 1331 	mov	ar4,r2
      000525 7D 00            [12] 1332 	mov	r5,#0x00
      000527 7F 40            [12] 1333 	mov	r7,#0x40
      000529 8C 82            [24] 1334 	mov	dpl,r4
      00052B 8D 83            [24] 1335 	mov	dph,r5
      00052D 8F F0            [24] 1336 	mov	b,r7
      00052F C0 06            [24] 1337 	push	ar6
      000531 C0 02            [24] 1338 	push	ar2
      000533 C0 01            [24] 1339 	push	ar1
      000535 C0 00            [24] 1340 	push	ar0
      000537 12r09rE9         [24] 1341 	lcall	_stpush
      00053A E5 82            [12] 1342 	mov	a,dpl
      00053C 85 83 F0         [24] 1343 	mov	b,dph
      00053F D0 00            [24] 1344 	pop	ar0
      000541 D0 01            [24] 1345 	pop	ar1
      000543 D0 02            [24] 1346 	pop	ar2
      000545 D0 06            [24] 1347 	pop	ar6
      000547 45 F0            [12] 1348 	orl	a,b
      000549 70 13            [24] 1349 	jnz	00110$
      00054B C0 06            [24] 1350 	push	ar6
      00054D C0 02            [24] 1351 	push	ar2
      00054F C0 01            [24] 1352 	push	ar1
      000551 C0 00            [24] 1353 	push	ar0
      000553 12r00r1D         [24] 1354 	lcall	_bang
      000556 D0 00            [24] 1355 	pop	ar0
      000558 D0 01            [24] 1356 	pop	ar1
      00055A D0 02            [24] 1357 	pop	ar2
      00055C D0 06            [24] 1358 	pop	ar6
      00055E                       1359 00110$:
                                   1360 ;	walk.c:127: cur = t;
      00055E C0 02            [24] 1361 	push	ar2
      000560 C0 00            [24] 1362 	push	ar0
      000562 A8*00            [24] 1363 	mov	r0,_bp
      000564 08               [12] 1364 	inc	r0
      000565 C0 01            [24] 1365 	push	ar1
      000567 E5*00            [12] 1366 	mov	a,_bp
      000569 24 07            [12] 1367 	add	a,#0x07
      00056B F9               [12] 1368 	mov	r1,a
      00056C E6               [12] 1369 	mov	a,@r0
      00056D F7               [12] 1370 	mov	@r1,a
      00056E 09               [12] 1371 	inc	r1
      00056F 77 00            [12] 1372 	mov	@r1,#0x00
      000571 09               [12] 1373 	inc	r1
      000572 77 40            [12] 1374 	mov	@r1,#0x40
      000574 D0 01            [24] 1375 	pop	ar1
      000576 A8*00            [24] 1376 	mov	r0,_bp
      000578 08               [12] 1377 	inc	r0
      000579 08               [12] 1378 	inc	r0
      00057A 86 02            [24] 1379 	mov	ar2,@r0
      00057C 7B 00            [12] 1380 	mov	r3,#0x00
      00057E 7F 40            [12] 1381 	mov	r7,#0x40
      000580 D0 00            [24] 1382 	pop	ar0
      000582 C0 06            [24] 1383 	push	ar6
      000584 C0 02            [24] 1384 	push	ar2
      000586 C0 01            [24] 1385 	push	ar1
      000588 C0 00            [24] 1386 	push	ar0
      00058A 74 04            [12] 1387 	mov	a,#0x04
      00058C C0 E0            [24] 1388 	push	acc
      00058E E4               [12] 1389 	clr	a
      00058F C0 E0            [24] 1390 	push	acc
      000591 85 00 F0         [24] 1391 	mov	b,ar0
      000594 E5*00            [12] 1392 	mov	a,_bp
      000596 24 07            [12] 1393 	add	a,#0x07
      000598 F8               [12] 1394 	mov	r0,a
      000599 E6               [12] 1395 	mov	a,@r0
      00059A C0 E0            [24] 1396 	push	acc
      00059C 08               [12] 1397 	inc	r0
      00059D E6               [12] 1398 	mov	a,@r0
      00059E C0 E0            [24] 1399 	push	acc
      0005A0 08               [12] 1400 	inc	r0
      0005A1 E6               [12] 1401 	mov	a,@r0
      0005A2 C0 E0            [24] 1402 	push	acc
      0005A4 8A 82            [24] 1403 	mov	dpl,r2
      0005A6 8B 83            [24] 1404 	mov	dph,r3
      0005A8 8F F0            [24] 1405 	mov	b,r7
      0005AA 12r00r00         [24] 1406 	lcall	___memcpy
      0005AD E5 81            [12] 1407 	mov	a,sp
      0005AF 24 FB            [12] 1408 	add	a,#0xfb
      0005B1 F5 81            [12] 1409 	mov	sp,a
      0005B3 D0 00            [24] 1410 	pop	ar0
      0005B5 D0 01            [24] 1411 	pop	ar1
      0005B7 D0 02            [24] 1412 	pop	ar2
      0005B9 D0 06            [24] 1413 	pop	ar6
                                   1414 ;	walk.c:128: goto process;
      0005BB D0 02            [24] 1415 	pop	ar2
      0005BD 02r03r22         [24] 1416 	ljmp	00101$
      0005C0                       1417 00115$:
                                   1418 ;	walk.c:132: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005C0 86 05            [24] 1419 	mov	ar5,@r0
      0005C2 08               [12] 1420 	inc	r0
      0005C3 86 07            [24] 1421 	mov	ar7,@r0
      0005C5 18               [12] 1422 	dec	r0
      0005C6 0D               [12] 1423 	inc	r5
      0005C7 BD 00 01         [24] 1424 	cjne	r5,#0x00,00166$
      0005CA 0F               [12] 1425 	inc	r7
      0005CB                       1426 00166$:
      0005CB 87 03            [24] 1427 	mov	ar3,@r1
      0005CD 09               [12] 1428 	inc	r1
      0005CE 87 04            [24] 1429 	mov	ar4,@r1
      0005D0 19               [12] 1430 	dec	r1
      0005D1 74 04            [12] 1431 	mov	a,#0x04
      0005D3 2B               [12] 1432 	add	a,r3
      0005D4 FB               [12] 1433 	mov	r3,a
      0005D5 E4               [12] 1434 	clr	a
      0005D6 3C               [12] 1435 	addc	a,r4
      0005D7 FC               [12] 1436 	mov	r4,a
      0005D8 C0 06            [24] 1437 	push	ar6
      0005DA C0 02            [24] 1438 	push	ar2
      0005DC C0 01            [24] 1439 	push	ar1
      0005DE C0 00            [24] 1440 	push	ar0
      0005E0 C0 05            [24] 1441 	push	ar5
      0005E2 C0 07            [24] 1442 	push	ar7
      0005E4 C0 03            [24] 1443 	push	ar3
      0005E6 C0 04            [24] 1444 	push	ar4
      0005E8 74r2A            [12] 1445 	mov	a,#___str_3
      0005EA C0 E0            [24] 1446 	push	acc
      0005EC 74s00            [12] 1447 	mov	a,#(___str_3 >> 8)
      0005EE C0 E0            [24] 1448 	push	acc
      0005F0 74 80            [12] 1449 	mov	a,#0x80
      0005F2 C0 E0            [24] 1450 	push	acc
      0005F4 12r00r00         [24] 1451 	lcall	_printf
      0005F7 E5 81            [12] 1452 	mov	a,sp
      0005F9 24 F9            [12] 1453 	add	a,#0xf9
      0005FB F5 81            [12] 1454 	mov	sp,a
      0005FD D0 00            [24] 1455 	pop	ar0
      0005FF D0 01            [24] 1456 	pop	ar1
      000601 D0 02            [24] 1457 	pop	ar2
      000603 D0 06            [24] 1458 	pop	ar6
                                   1459 ;	walk.c:134: if (!stpop(&cur)) goto term;
      000605 C0 00            [24] 1460 	push	ar0
      000607 E5*00            [12] 1461 	mov	a,_bp
      000609 24 03            [12] 1462 	add	a,#0x03
      00060B F8               [12] 1463 	mov	r0,a
      00060C 86 04            [24] 1464 	mov	ar4,@r0
      00060E 7D 00            [12] 1465 	mov	r5,#0x00
      000610 7F 40            [12] 1466 	mov	r7,#0x40
      000612 D0 00            [24] 1467 	pop	ar0
      000614 8C 82            [24] 1468 	mov	dpl,r4
      000616 8D 83            [24] 1469 	mov	dph,r5
      000618 8F F0            [24] 1470 	mov	b,r7
      00061A C0 06            [24] 1471 	push	ar6
      00061C C0 02            [24] 1472 	push	ar2
      00061E C0 01            [24] 1473 	push	ar1
      000620 C0 00            [24] 1474 	push	ar0
      000622 12r0Ar4A         [24] 1475 	lcall	_stpop
      000625 E5 82            [12] 1476 	mov	a,dpl
      000627 85 83 F0         [24] 1477 	mov	b,dph
      00062A D0 00            [24] 1478 	pop	ar0
      00062C D0 01            [24] 1479 	pop	ar1
      00062E D0 02            [24] 1480 	pop	ar2
      000630 D0 06            [24] 1481 	pop	ar6
      000632 45 F0            [12] 1482 	orl	a,b
      000634 60 03            [24] 1483 	jz	00167$
      000636 02r03rA6         [24] 1484 	ljmp	00102$
      000639                       1485 00167$:
                                   1486 ;	walk.c:138: return;
                                   1487 ;	walk.c:139: }
      000639 85*00 81         [24] 1488 	mov	sp,_bp
      00063C D0*00            [24] 1489 	pop	_bp
      00063E 22               [24] 1490 	ret
                                   1491 ;------------------------------------------------------------
                                   1492 ;Allocation info for local variables in function 'main'
                                   1493 ;------------------------------------------------------------
                                   1494 ;initial                   Allocated to stack - _bp +5
                                   1495 ;N                         Allocated to stack - _bp +9
                                   1496 ;i                         Allocated to stack - _bp +11
                                   1497 ;j                         Allocated to registers r2 r6 
                                   1498 ;sloc0                     Allocated to stack - _bp +1
                                   1499 ;sloc1                     Allocated to stack - _bp +3
                                   1500 ;sloc2                     Allocated to stack - _bp +15
                                   1501 ;R                         Allocated with name '_main_R_65536_64'
                                   1502 ;------------------------------------------------------------
                                   1503 ;	walk.c:141: int main(void) {
                                   1504 ;	-----------------------------------------
                                   1505 ;	 function main
                                   1506 ;	-----------------------------------------
      00063F                       1507 _main:
      00063F C0*00            [24] 1508 	push	_bp
      000641 E5 81            [12] 1509 	mov	a,sp
      000643 F5*00            [12] 1510 	mov	_bp,a
      000645 24 0C            [12] 1511 	add	a,#0x0c
      000647 F5 81            [12] 1512 	mov	sp,a
                                   1513 ;	walk.c:147: i0 = 1;
      000649 78r00            [12] 1514 	mov	r0,#_i0
      00064B 76 01            [12] 1515 	mov	@r0,#0x01
                                   1516 ;	walk.c:149: IT0 = 1;
                                   1517 ;	assignBit
      00064D D2 88            [12] 1518 	setb	_IT0
                                   1519 ;	walk.c:150: EX0 = 1;
                                   1520 ;	assignBit
      00064F D2 A8            [12] 1521 	setb	_EX0
                                   1522 ;	walk.c:151: EA = 1;
                                   1523 ;	assignBit
      000651 D2 AF            [12] 1524 	setb	_EA
                                   1525 ;	walk.c:153: srand(*R);
      000653 90rBDr62         [24] 1526 	mov	dptr,#_main_R_65536_64
      000656 E0               [24] 1527 	movx	a,@dptr
      000657 FE               [12] 1528 	mov	r6,a
      000658 A3               [24] 1529 	inc	dptr
      000659 E0               [24] 1530 	movx	a,@dptr
      00065A FF               [12] 1531 	mov	r7,a
      00065B 8E 82            [24] 1532 	mov	dpl,r6
      00065D 8F 83            [24] 1533 	mov	dph,r7
      00065F E0               [24] 1534 	movx	a,@dptr
      000660 FE               [12] 1535 	mov	r6,a
      000661 A3               [24] 1536 	inc	dptr
      000662 E0               [24] 1537 	movx	a,@dptr
      000663 FF               [12] 1538 	mov	r7,a
      000664 8E 82            [24] 1539 	mov	dpl,r6
      000666 8F 83            [24] 1540 	mov	dph,r7
      000668 12r00r00         [24] 1541 	lcall	_srand
                                   1542 ;	walk.c:154: stinit();
      00066B 12r09rE0         [24] 1543 	lcall	_stinit
                                   1544 ;	walk.c:156: puts("\033[2J\033[?25l");
      00066E 90r00r34         [24] 1545 	mov	dptr,#___str_4
      000671 75 F0 80         [24] 1546 	mov	b,#0x80
      000674 12r00r00         [24] 1547 	lcall	_puts
                                   1548 ;	walk.c:158: while (i0) {
      000677 E5*00            [12] 1549 	mov	a,_bp
      000679 24 05            [12] 1550 	add	a,#0x05
      00067B F9               [12] 1551 	mov	r1,a
      00067C FF               [12] 1552 	mov	r7,a
      00067D E5*00            [12] 1553 	mov	a,_bp
      00067F 24 09            [12] 1554 	add	a,#0x09
      000681 F8               [12] 1555 	mov	r0,a
      000682 E4               [12] 1556 	clr	a
      000683 F6               [12] 1557 	mov	@r0,a
      000684 08               [12] 1558 	inc	r0
      000685 F6               [12] 1559 	mov	@r0,a
      000686                       1560 00108$:
      000686 78r00            [12] 1561 	mov	r0,#_i0
      000688 E6               [12] 1562 	mov	a,@r0
      000689 70 03            [24] 1563 	jnz	00181$
      00068B 02r09rC9         [24] 1564 	ljmp	00110$
      00068E                       1565 00181$:
                                   1566 ;	walk.c:159: for (i = 0; i < ROWS; i++)
      00068E 7B 00            [12] 1567 	mov	r3,#0x00
      000690 7C 00            [12] 1568 	mov	r4,#0x00
      000692 A8*00            [24] 1569 	mov	r0,_bp
      000694 08               [12] 1570 	inc	r0
      000695 E4               [12] 1571 	clr	a
      000696 F6               [12] 1572 	mov	@r0,a
      000697 08               [12] 1573 	inc	r0
      000698 F6               [12] 1574 	mov	@r0,a
                                   1575 ;	walk.c:160: for (j = 0; j < COLS; j++)
      000699                       1576 00124$:
      000699 A8*00            [24] 1577 	mov	r0,_bp
      00069B 08               [12] 1578 	inc	r0
      00069C C0 01            [24] 1579 	push	ar1
      00069E E5*00            [12] 1580 	mov	a,_bp
      0006A0 24 03            [12] 1581 	add	a,#0x03
      0006A2 F9               [12] 1582 	mov	r1,a
      0006A3 E6               [12] 1583 	mov	a,@r0
      0006A4 24r00            [12] 1584 	add	a,#_g
      0006A6 F7               [12] 1585 	mov	@r1,a
      0006A7 08               [12] 1586 	inc	r0
      0006A8 E6               [12] 1587 	mov	a,@r0
      0006A9 34s00            [12] 1588 	addc	a,#(_g >> 8)
      0006AB 09               [12] 1589 	inc	r1
      0006AC F7               [12] 1590 	mov	@r1,a
      0006AD D0 01            [24] 1591 	pop	ar1
      0006AF 7A 00            [12] 1592 	mov	r2,#0x00
      0006B1 7E 00            [12] 1593 	mov	r6,#0x00
      0006B3                       1594 00111$:
                                   1595 ;	walk.c:161: g[i][j] = 0x55;
      0006B3 E5*00            [12] 1596 	mov	a,_bp
      0006B5 24 03            [12] 1597 	add	a,#0x03
      0006B7 F8               [12] 1598 	mov	r0,a
      0006B8 EA               [12] 1599 	mov	a,r2
      0006B9 26               [12] 1600 	add	a,@r0
      0006BA F5 82            [12] 1601 	mov	dpl,a
      0006BC EE               [12] 1602 	mov	a,r6
      0006BD 08               [12] 1603 	inc	r0
      0006BE 36               [12] 1604 	addc	a,@r0
      0006BF F5 83            [12] 1605 	mov	dph,a
      0006C1 74 55            [12] 1606 	mov	a,#0x55
      0006C3 F0               [24] 1607 	movx	@dptr,a
                                   1608 ;	walk.c:160: for (j = 0; j < COLS; j++)
      0006C4 0A               [12] 1609 	inc	r2
      0006C5 BA 00 01         [24] 1610 	cjne	r2,#0x00,00182$
      0006C8 0E               [12] 1611 	inc	r6
      0006C9                       1612 00182$:
      0006C9 C3               [12] 1613 	clr	c
      0006CA EA               [12] 1614 	mov	a,r2
      0006CB 94 CA            [12] 1615 	subb	a,#0xca
      0006CD EE               [12] 1616 	mov	a,r6
      0006CE 64 80            [12] 1617 	xrl	a,#0x80
      0006D0 94 80            [12] 1618 	subb	a,#0x80
      0006D2 40 DF            [24] 1619 	jc	00111$
                                   1620 ;	walk.c:159: for (i = 0; i < ROWS; i++)
      0006D4 A8*00            [24] 1621 	mov	r0,_bp
      0006D6 08               [12] 1622 	inc	r0
      0006D7 74 CA            [12] 1623 	mov	a,#0xca
      0006D9 26               [12] 1624 	add	a,@r0
      0006DA F6               [12] 1625 	mov	@r0,a
      0006DB E4               [12] 1626 	clr	a
      0006DC 08               [12] 1627 	inc	r0
      0006DD 36               [12] 1628 	addc	a,@r0
      0006DE F6               [12] 1629 	mov	@r0,a
      0006DF 0B               [12] 1630 	inc	r3
      0006E0 BB 00 01         [24] 1631 	cjne	r3,#0x00,00184$
      0006E3 0C               [12] 1632 	inc	r4
      0006E4                       1633 00184$:
      0006E4 C3               [12] 1634 	clr	c
      0006E5 EB               [12] 1635 	mov	a,r3
      0006E6 94 30            [12] 1636 	subb	a,#0x30
      0006E8 EC               [12] 1637 	mov	a,r4
      0006E9 64 80            [12] 1638 	xrl	a,#0x80
      0006EB 94 80            [12] 1639 	subb	a,#0x80
      0006ED 40 AA            [24] 1640 	jc	00124$
                                   1641 ;	walk.c:163: initial.r = rand() % ROWS;
      0006EF E5*00            [12] 1642 	mov	a,_bp
      0006F1 24 05            [12] 1643 	add	a,#0x05
      0006F3 F8               [12] 1644 	mov	r0,a
      0006F4 C0 07            [24] 1645 	push	ar7
      0006F6 C0 01            [24] 1646 	push	ar1
      0006F8 C0 00            [24] 1647 	push	ar0
      0006FA 12r00r00         [24] 1648 	lcall	_rand
      0006FD AD 82            [24] 1649 	mov	r5,dpl
      0006FF AE 83            [24] 1650 	mov	r6,dph
      000701 74 30            [12] 1651 	mov	a,#0x30
      000703 C0 E0            [24] 1652 	push	acc
      000705 E4               [12] 1653 	clr	a
      000706 C0 E0            [24] 1654 	push	acc
      000708 8D 82            [24] 1655 	mov	dpl,r5
      00070A 8E 83            [24] 1656 	mov	dph,r6
      00070C 12r00r00         [24] 1657 	lcall	__modsint
      00070F AD 82            [24] 1658 	mov	r5,dpl
      000711 AE 83            [24] 1659 	mov	r6,dph
      000713 15 81            [12] 1660 	dec	sp
      000715 15 81            [12] 1661 	dec	sp
      000717 D0 00            [24] 1662 	pop	ar0
      000719 D0 01            [24] 1663 	pop	ar1
      00071B A6 05            [24] 1664 	mov	@r0,ar5
      00071D 08               [12] 1665 	inc	r0
      00071E A6 06            [24] 1666 	mov	@r0,ar6
      000720 18               [12] 1667 	dec	r0
                                   1668 ;	walk.c:164: initial.c = rand() % COLS;
      000721 74 02            [12] 1669 	mov	a,#0x02
      000723 29               [12] 1670 	add	a,r1
      000724 F8               [12] 1671 	mov	r0,a
      000725 C0 01            [24] 1672 	push	ar1
      000727 C0 00            [24] 1673 	push	ar0
      000729 12r00r00         [24] 1674 	lcall	_rand
      00072C AD 82            [24] 1675 	mov	r5,dpl
      00072E AE 83            [24] 1676 	mov	r6,dph
      000730 74 CA            [12] 1677 	mov	a,#0xca
      000732 C0 E0            [24] 1678 	push	acc
      000734 E4               [12] 1679 	clr	a
      000735 C0 E0            [24] 1680 	push	acc
      000737 8D 82            [24] 1681 	mov	dpl,r5
      000739 8E 83            [24] 1682 	mov	dph,r6
      00073B 12r00r00         [24] 1683 	lcall	__modsint
      00073E AD 82            [24] 1684 	mov	r5,dpl
      000740 AE 83            [24] 1685 	mov	r6,dph
      000742 15 81            [12] 1686 	dec	sp
      000744 15 81            [12] 1687 	dec	sp
      000746 D0 00            [24] 1688 	pop	ar0
      000748 A6 05            [24] 1689 	mov	@r0,ar5
      00074A 08               [12] 1690 	inc	r0
      00074B A6 06            [24] 1691 	mov	@r0,ar6
      00074D 18               [12] 1692 	dec	r0
                                   1693 ;	walk.c:166: puts("\033[2J\033[?25l");
      00074E 90r00r34         [24] 1694 	mov	dptr,#___str_4
      000751 75 F0 80         [24] 1695 	mov	b,#0x80
      000754 C0 00            [24] 1696 	push	ar0
      000756 12r00r00         [24] 1697 	lcall	_puts
      000759 D0 00            [24] 1698 	pop	ar0
      00075B D0 01            [24] 1699 	pop	ar1
                                   1700 ;	walk.c:167: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00075D 86 05            [24] 1701 	mov	ar5,@r0
      00075F 08               [12] 1702 	inc	r0
      000760 86 06            [24] 1703 	mov	ar6,@r0
      000762 18               [12] 1704 	dec	r0
      000763 87 03            [24] 1705 	mov	ar3,@r1
      000765 09               [12] 1706 	inc	r1
      000766 87 04            [24] 1707 	mov	ar4,@r1
      000768 19               [12] 1708 	dec	r1
      000769 C0 01            [24] 1709 	push	ar1
      00076B C0 05            [24] 1710 	push	ar5
      00076D C0 06            [24] 1711 	push	ar6
      00076F C0 03            [24] 1712 	push	ar3
      000771 C0 04            [24] 1713 	push	ar4
      000773 E5*00            [12] 1714 	mov	a,_bp
      000775 24 09            [12] 1715 	add	a,#0x09
      000777 F8               [12] 1716 	mov	r0,a
      000778 E6               [12] 1717 	mov	a,@r0
      000779 C0 E0            [24] 1718 	push	acc
      00077B 08               [12] 1719 	inc	r0
      00077C E6               [12] 1720 	mov	a,@r0
      00077D C0 E0            [24] 1721 	push	acc
      00077F 74r3F            [12] 1722 	mov	a,#___str_5
      000781 C0 E0            [24] 1723 	push	acc
      000783 74s00            [12] 1724 	mov	a,#(___str_5 >> 8)
      000785 C0 E0            [24] 1725 	push	acc
      000787 74 80            [12] 1726 	mov	a,#0x80
      000789 C0 E0            [24] 1727 	push	acc
      00078B 12r00r00         [24] 1728 	lcall	_printf
      00078E E5 81            [12] 1729 	mov	a,sp
      000790 24 F7            [12] 1730 	add	a,#0xf7
      000792 F5 81            [12] 1731 	mov	sp,a
      000794 D0 01            [24] 1732 	pop	ar1
      000796 D0 07            [24] 1733 	pop	ar7
                                   1734 ;	walk.c:169: for (i = 0; i < (2 * REG); i++) {
      000798 E5*00            [12] 1735 	mov	a,_bp
      00079A 24 0B            [12] 1736 	add	a,#0x0b
      00079C F8               [12] 1737 	mov	r0,a
      00079D E4               [12] 1738 	clr	a
      00079E F6               [12] 1739 	mov	@r0,a
      00079F 08               [12] 1740 	inc	r0
      0007A0 F6               [12] 1741 	mov	@r0,a
      0007A1                       1742 00115$:
                                   1743 ;	walk.c:170: neigh[i].r = neigh_tmpl[i].r * (1 + rand() % 4);
      0007A1 C0 07            [24] 1744 	push	ar7
      0007A3 E5*00            [12] 1745 	mov	a,_bp
      0007A5 24 0B            [12] 1746 	add	a,#0x0b
      0007A7 F8               [12] 1747 	mov	r0,a
      0007A8 E6               [12] 1748 	mov	a,@r0
      0007A9 25 E0            [12] 1749 	add	a,acc
      0007AB FB               [12] 1750 	mov	r3,a
      0007AC 08               [12] 1751 	inc	r0
      0007AD E6               [12] 1752 	mov	a,@r0
      0007AE 33               [12] 1753 	rlc	a
      0007AF FC               [12] 1754 	mov	r4,a
      0007B0 EB               [12] 1755 	mov	a,r3
      0007B1 2B               [12] 1756 	add	a,r3
      0007B2 FB               [12] 1757 	mov	r3,a
      0007B3 EC               [12] 1758 	mov	a,r4
      0007B4 33               [12] 1759 	rlc	a
      0007B5 FC               [12] 1760 	mov	r4,a
      0007B6 EB               [12] 1761 	mov	a,r3
      0007B7 24r40            [12] 1762 	add	a,#_neigh
      0007B9 FA               [12] 1763 	mov	r2,a
      0007BA EC               [12] 1764 	mov	a,r4
      0007BB 34s00            [12] 1765 	addc	a,#(_neigh >> 8)
      0007BD FF               [12] 1766 	mov	r7,a
      0007BE EB               [12] 1767 	mov	a,r3
      0007BF 24r00            [12] 1768 	add	a,#_neigh_tmpl
      0007C1 F5 82            [12] 1769 	mov	dpl,a
      0007C3 EC               [12] 1770 	mov	a,r4
      0007C4 34s00            [12] 1771 	addc	a,#(_neigh_tmpl >> 8)
      0007C6 F5 83            [12] 1772 	mov	dph,a
      0007C8 E5*00            [12] 1773 	mov	a,_bp
      0007CA 24 03            [12] 1774 	add	a,#0x03
      0007CC F8               [12] 1775 	mov	r0,a
      0007CD E0               [24] 1776 	movx	a,@dptr
      0007CE F6               [12] 1777 	mov	@r0,a
      0007CF A3               [24] 1778 	inc	dptr
      0007D0 E0               [24] 1779 	movx	a,@dptr
      0007D1 08               [12] 1780 	inc	r0
      0007D2 F6               [12] 1781 	mov	@r0,a
      0007D3 C0 07            [24] 1782 	push	ar7
      0007D5 C0 04            [24] 1783 	push	ar4
      0007D7 C0 03            [24] 1784 	push	ar3
      0007D9 C0 02            [24] 1785 	push	ar2
      0007DB C0 01            [24] 1786 	push	ar1
      0007DD 12r00r00         [24] 1787 	lcall	_rand
      0007E0 AD 82            [24] 1788 	mov	r5,dpl
      0007E2 AE 83            [24] 1789 	mov	r6,dph
      0007E4 74 04            [12] 1790 	mov	a,#0x04
      0007E6 C0 E0            [24] 1791 	push	acc
      0007E8 E4               [12] 1792 	clr	a
      0007E9 C0 E0            [24] 1793 	push	acc
      0007EB 8D 82            [24] 1794 	mov	dpl,r5
      0007ED 8E 83            [24] 1795 	mov	dph,r6
      0007EF 12r00r00         [24] 1796 	lcall	__modsint
      0007F2 AD 82            [24] 1797 	mov	r5,dpl
      0007F4 AE 83            [24] 1798 	mov	r6,dph
      0007F6 15 81            [12] 1799 	dec	sp
      0007F8 15 81            [12] 1800 	dec	sp
      0007FA D0 01            [24] 1801 	pop	ar1
      0007FC D0 02            [24] 1802 	pop	ar2
      0007FE D0 03            [24] 1803 	pop	ar3
      000800 D0 04            [24] 1804 	pop	ar4
      000802 D0 07            [24] 1805 	pop	ar7
      000804 0D               [12] 1806 	inc	r5
      000805 BD 00 01         [24] 1807 	cjne	r5,#0x00,00186$
      000808 0E               [12] 1808 	inc	r6
      000809                       1809 00186$:
      000809 C0 07            [24] 1810 	push	ar7
      00080B C0 04            [24] 1811 	push	ar4
      00080D C0 03            [24] 1812 	push	ar3
      00080F C0 02            [24] 1813 	push	ar2
      000811 C0 01            [24] 1814 	push	ar1
      000813 C0 05            [24] 1815 	push	ar5
      000815 C0 06            [24] 1816 	push	ar6
      000817 E5*00            [12] 1817 	mov	a,_bp
      000819 24 03            [12] 1818 	add	a,#0x03
      00081B F8               [12] 1819 	mov	r0,a
      00081C 86 82            [24] 1820 	mov	dpl,@r0
      00081E 08               [12] 1821 	inc	r0
      00081F 86 83            [24] 1822 	mov	dph,@r0
      000821 12r00r00         [24] 1823 	lcall	__mulint
      000824 AD 82            [24] 1824 	mov	r5,dpl
      000826 AE 83            [24] 1825 	mov	r6,dph
      000828 15 81            [12] 1826 	dec	sp
      00082A 15 81            [12] 1827 	dec	sp
      00082C D0 01            [24] 1828 	pop	ar1
      00082E D0 02            [24] 1829 	pop	ar2
      000830 D0 03            [24] 1830 	pop	ar3
      000832 D0 04            [24] 1831 	pop	ar4
      000834 D0 07            [24] 1832 	pop	ar7
      000836 8A 82            [24] 1833 	mov	dpl,r2
      000838 8F 83            [24] 1834 	mov	dph,r7
      00083A ED               [12] 1835 	mov	a,r5
      00083B F0               [24] 1836 	movx	@dptr,a
      00083C EE               [12] 1837 	mov	a,r6
      00083D A3               [24] 1838 	inc	dptr
      00083E F0               [24] 1839 	movx	@dptr,a
                                   1840 ;	walk.c:171: neigh[i].c = neigh_tmpl[i].c * (1 + rand() % 4);
      00083F EB               [12] 1841 	mov	a,r3
      000840 24r40            [12] 1842 	add	a,#_neigh
      000842 FE               [12] 1843 	mov	r6,a
      000843 EC               [12] 1844 	mov	a,r4
      000844 34s00            [12] 1845 	addc	a,#(_neigh >> 8)
      000846 FF               [12] 1846 	mov	r7,a
      000847 74 02            [12] 1847 	mov	a,#0x02
      000849 2E               [12] 1848 	add	a,r6
      00084A FA               [12] 1849 	mov	r2,a
      00084B E4               [12] 1850 	clr	a
      00084C 3F               [12] 1851 	addc	a,r7
      00084D FD               [12] 1852 	mov	r5,a
      00084E EB               [12] 1853 	mov	a,r3
      00084F 24r00            [12] 1854 	add	a,#_neigh_tmpl
      000851 FB               [12] 1855 	mov	r3,a
      000852 EC               [12] 1856 	mov	a,r4
      000853 34s00            [12] 1857 	addc	a,#(_neigh_tmpl >> 8)
      000855 FC               [12] 1858 	mov	r4,a
      000856 8B 82            [24] 1859 	mov	dpl,r3
      000858 8C 83            [24] 1860 	mov	dph,r4
      00085A A3               [24] 1861 	inc	dptr
      00085B A3               [24] 1862 	inc	dptr
      00085C E5*00            [12] 1863 	mov	a,_bp
      00085E 24 03            [12] 1864 	add	a,#0x03
      000860 F8               [12] 1865 	mov	r0,a
      000861 E0               [24] 1866 	movx	a,@dptr
      000862 F6               [12] 1867 	mov	@r0,a
      000863 A3               [24] 1868 	inc	dptr
      000864 E0               [24] 1869 	movx	a,@dptr
      000865 08               [12] 1870 	inc	r0
      000866 F6               [12] 1871 	mov	@r0,a
      000867 C0 07            [24] 1872 	push	ar7
      000869 C0 06            [24] 1873 	push	ar6
      00086B C0 05            [24] 1874 	push	ar5
      00086D C0 02            [24] 1875 	push	ar2
      00086F C0 01            [24] 1876 	push	ar1
      000871 12r00r00         [24] 1877 	lcall	_rand
      000874 AB 82            [24] 1878 	mov	r3,dpl
      000876 AC 83            [24] 1879 	mov	r4,dph
      000878 74 04            [12] 1880 	mov	a,#0x04
      00087A C0 E0            [24] 1881 	push	acc
      00087C E4               [12] 1882 	clr	a
      00087D C0 E0            [24] 1883 	push	acc
      00087F 8B 82            [24] 1884 	mov	dpl,r3
      000881 8C 83            [24] 1885 	mov	dph,r4
      000883 12r00r00         [24] 1886 	lcall	__modsint
      000886 AB 82            [24] 1887 	mov	r3,dpl
      000888 AC 83            [24] 1888 	mov	r4,dph
      00088A 15 81            [12] 1889 	dec	sp
      00088C 15 81            [12] 1890 	dec	sp
      00088E D0 01            [24] 1891 	pop	ar1
      000890 D0 02            [24] 1892 	pop	ar2
      000892 D0 05            [24] 1893 	pop	ar5
      000894 D0 06            [24] 1894 	pop	ar6
      000896 D0 07            [24] 1895 	pop	ar7
      000898 0B               [12] 1896 	inc	r3
      000899 BB 00 01         [24] 1897 	cjne	r3,#0x00,00187$
      00089C 0C               [12] 1898 	inc	r4
      00089D                       1899 00187$:
      00089D C0 07            [24] 1900 	push	ar7
      00089F C0 06            [24] 1901 	push	ar6
      0008A1 C0 05            [24] 1902 	push	ar5
      0008A3 C0 02            [24] 1903 	push	ar2
      0008A5 C0 01            [24] 1904 	push	ar1
      0008A7 C0 03            [24] 1905 	push	ar3
      0008A9 C0 04            [24] 1906 	push	ar4
      0008AB E5*00            [12] 1907 	mov	a,_bp
      0008AD 24 03            [12] 1908 	add	a,#0x03
      0008AF F8               [12] 1909 	mov	r0,a
      0008B0 86 82            [24] 1910 	mov	dpl,@r0
      0008B2 08               [12] 1911 	inc	r0
      0008B3 86 83            [24] 1912 	mov	dph,@r0
      0008B5 12r00r00         [24] 1913 	lcall	__mulint
      0008B8 AB 82            [24] 1914 	mov	r3,dpl
      0008BA AC 83            [24] 1915 	mov	r4,dph
      0008BC 15 81            [12] 1916 	dec	sp
      0008BE 15 81            [12] 1917 	dec	sp
      0008C0 D0 01            [24] 1918 	pop	ar1
      0008C2 D0 02            [24] 1919 	pop	ar2
      0008C4 D0 05            [24] 1920 	pop	ar5
      0008C6 D0 06            [24] 1921 	pop	ar6
      0008C8 D0 07            [24] 1922 	pop	ar7
      0008CA 8A 82            [24] 1923 	mov	dpl,r2
      0008CC 8D 83            [24] 1924 	mov	dph,r5
      0008CE EB               [12] 1925 	mov	a,r3
      0008CF F0               [24] 1926 	movx	@dptr,a
      0008D0 EC               [12] 1927 	mov	a,r4
      0008D1 A3               [24] 1928 	inc	dptr
      0008D2 F0               [24] 1929 	movx	@dptr,a
                                   1930 ;	walk.c:172: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      0008D3 8E 82            [24] 1931 	mov	dpl,r6
      0008D5 8F 83            [24] 1932 	mov	dph,r7
      0008D7 E0               [24] 1933 	movx	a,@dptr
      0008D8 FE               [12] 1934 	mov	r6,a
      0008D9 A3               [24] 1935 	inc	dptr
      0008DA E0               [24] 1936 	movx	a,@dptr
      0008DB FF               [12] 1937 	mov	r7,a
      0008DC C0 07            [24] 1938 	push	ar7
      0008DE C0 01            [24] 1939 	push	ar1
      0008E0 C0 03            [24] 1940 	push	ar3
      0008E2 C0 04            [24] 1941 	push	ar4
      0008E4 C0 06            [24] 1942 	push	ar6
      0008E6 C0 07            [24] 1943 	push	ar7
      0008E8 74r52            [12] 1944 	mov	a,#___str_6
      0008EA C0 E0            [24] 1945 	push	acc
      0008EC 74s00            [12] 1946 	mov	a,#(___str_6 >> 8)
      0008EE C0 E0            [24] 1947 	push	acc
      0008F0 74 80            [12] 1948 	mov	a,#0x80
      0008F2 C0 E0            [24] 1949 	push	acc
      0008F4 12r00r00         [24] 1950 	lcall	_printf
      0008F7 E5 81            [12] 1951 	mov	a,sp
      0008F9 24 F9            [12] 1952 	add	a,#0xf9
      0008FB F5 81            [12] 1953 	mov	sp,a
      0008FD D0 01            [24] 1954 	pop	ar1
      0008FF D0 07            [24] 1955 	pop	ar7
                                   1956 ;	walk.c:169: for (i = 0; i < (2 * REG); i++) {
      000901 E5*00            [12] 1957 	mov	a,_bp
      000903 24 0B            [12] 1958 	add	a,#0x0b
      000905 F8               [12] 1959 	mov	r0,a
      000906 06               [12] 1960 	inc	@r0
      000907 B6 00 02         [24] 1961 	cjne	@r0,#0x00,00188$
      00090A 08               [12] 1962 	inc	r0
      00090B 06               [12] 1963 	inc	@r0
      00090C                       1964 00188$:
      00090C E5*00            [12] 1965 	mov	a,_bp
      00090E 24 0B            [12] 1966 	add	a,#0x0b
      000910 F8               [12] 1967 	mov	r0,a
      000911 C3               [12] 1968 	clr	c
      000912 E6               [12] 1969 	mov	a,@r0
      000913 94 08            [12] 1970 	subb	a,#0x08
      000915 08               [12] 1971 	inc	r0
      000916 E6               [12] 1972 	mov	a,@r0
      000917 64 80            [12] 1973 	xrl	a,#0x80
      000919 94 80            [12] 1974 	subb	a,#0x80
      00091B D0 07            [24] 1975 	pop	ar7
      00091D 50 03            [24] 1976 	jnc	00189$
      00091F 02r07rA1         [24] 1977 	ljmp	00115$
      000922                       1978 00189$:
                                   1979 ;	walk.c:175: walk(&initial);
      000922 8F 04            [24] 1980 	mov	ar4,r7
      000924 7D 00            [12] 1981 	mov	r5,#0x00
      000926 7E 40            [12] 1982 	mov	r6,#0x40
      000928 8C 82            [24] 1983 	mov	dpl,r4
      00092A 8D 83            [24] 1984 	mov	dph,r5
      00092C 8E F0            [24] 1985 	mov	b,r6
      00092E C0 07            [24] 1986 	push	ar7
      000930 C0 01            [24] 1987 	push	ar1
      000932 12r02rB6         [24] 1988 	lcall	_walk
      000935 D0 01            [24] 1989 	pop	ar1
      000937 D0 07            [24] 1990 	pop	ar7
                                   1991 ;	walk.c:177: for (i = 0; i < ROWS; i++)
      000939 E5*00            [12] 1992 	mov	a,_bp
      00093B 24 0B            [12] 1993 	add	a,#0x0b
      00093D F8               [12] 1994 	mov	r0,a
      00093E E4               [12] 1995 	clr	a
      00093F F6               [12] 1996 	mov	@r0,a
      000940 08               [12] 1997 	inc	r0
      000941 F6               [12] 1998 	mov	@r0,a
      000942 7B 00            [12] 1999 	mov	r3,#0x00
      000944 7C 00            [12] 2000 	mov	r4,#0x00
                                   2001 ;	walk.c:178: for (j = 0; j < COLS; j++)
      000946                       2002 00131$:
      000946 E5*00            [12] 2003 	mov	a,_bp
      000948 24 03            [12] 2004 	add	a,#0x03
      00094A F8               [12] 2005 	mov	r0,a
      00094B EB               [12] 2006 	mov	a,r3
      00094C 24r00            [12] 2007 	add	a,#_g
      00094E F6               [12] 2008 	mov	@r0,a
      00094F EC               [12] 2009 	mov	a,r4
      000950 34s00            [12] 2010 	addc	a,#(_g >> 8)
      000952 08               [12] 2011 	inc	r0
      000953 F6               [12] 2012 	mov	@r0,a
      000954 7A 00            [12] 2013 	mov	r2,#0x00
      000956 7E 00            [12] 2014 	mov	r6,#0x00
      000958                       2015 00117$:
                                   2016 ;	walk.c:179: if (g[i][j] != 0xaa) bang();
      000958 E5*00            [12] 2017 	mov	a,_bp
      00095A 24 03            [12] 2018 	add	a,#0x03
      00095C F8               [12] 2019 	mov	r0,a
      00095D EA               [12] 2020 	mov	a,r2
      00095E 26               [12] 2021 	add	a,@r0
      00095F F5 82            [12] 2022 	mov	dpl,a
      000961 EE               [12] 2023 	mov	a,r6
      000962 08               [12] 2024 	inc	r0
      000963 36               [12] 2025 	addc	a,@r0
      000964 F5 83            [12] 2026 	mov	dph,a
      000966 E0               [24] 2027 	movx	a,@dptr
      000967 FD               [12] 2028 	mov	r5,a
      000968 BD AA 02         [24] 2029 	cjne	r5,#0xaa,00190$
      00096B 80 1B            [24] 2030 	sjmp	00118$
      00096D                       2031 00190$:
      00096D C0 07            [24] 2032 	push	ar7
      00096F C0 06            [24] 2033 	push	ar6
      000971 C0 04            [24] 2034 	push	ar4
      000973 C0 03            [24] 2035 	push	ar3
      000975 C0 02            [24] 2036 	push	ar2
      000977 C0 01            [24] 2037 	push	ar1
      000979 12r00r1D         [24] 2038 	lcall	_bang
      00097C D0 01            [24] 2039 	pop	ar1
      00097E D0 02            [24] 2040 	pop	ar2
      000980 D0 03            [24] 2041 	pop	ar3
      000982 D0 04            [24] 2042 	pop	ar4
      000984 D0 06            [24] 2043 	pop	ar6
      000986 D0 07            [24] 2044 	pop	ar7
      000988                       2045 00118$:
                                   2046 ;	walk.c:178: for (j = 0; j < COLS; j++)
      000988 0A               [12] 2047 	inc	r2
      000989 BA 00 01         [24] 2048 	cjne	r2,#0x00,00191$
      00098C 0E               [12] 2049 	inc	r6
      00098D                       2050 00191$:
      00098D C3               [12] 2051 	clr	c
      00098E EA               [12] 2052 	mov	a,r2
      00098F 94 CA            [12] 2053 	subb	a,#0xca
      000991 EE               [12] 2054 	mov	a,r6
      000992 64 80            [12] 2055 	xrl	a,#0x80
      000994 94 80            [12] 2056 	subb	a,#0x80
      000996 40 C0            [24] 2057 	jc	00117$
                                   2058 ;	walk.c:177: for (i = 0; i < ROWS; i++)
      000998 74 CA            [12] 2059 	mov	a,#0xca
      00099A 2B               [12] 2060 	add	a,r3
      00099B FB               [12] 2061 	mov	r3,a
      00099C E4               [12] 2062 	clr	a
      00099D 3C               [12] 2063 	addc	a,r4
      00099E FC               [12] 2064 	mov	r4,a
      00099F E5*00            [12] 2065 	mov	a,_bp
      0009A1 24 0B            [12] 2066 	add	a,#0x0b
      0009A3 F8               [12] 2067 	mov	r0,a
      0009A4 06               [12] 2068 	inc	@r0
      0009A5 B6 00 02         [24] 2069 	cjne	@r0,#0x00,00193$
      0009A8 08               [12] 2070 	inc	r0
      0009A9 06               [12] 2071 	inc	@r0
      0009AA                       2072 00193$:
      0009AA E5*00            [12] 2073 	mov	a,_bp
      0009AC 24 0B            [12] 2074 	add	a,#0x0b
      0009AE F8               [12] 2075 	mov	r0,a
      0009AF C3               [12] 2076 	clr	c
      0009B0 E6               [12] 2077 	mov	a,@r0
      0009B1 94 30            [12] 2078 	subb	a,#0x30
      0009B3 08               [12] 2079 	inc	r0
      0009B4 E6               [12] 2080 	mov	a,@r0
      0009B5 64 80            [12] 2081 	xrl	a,#0x80
      0009B7 94 80            [12] 2082 	subb	a,#0x80
      0009B9 40 8B            [24] 2083 	jc	00131$
                                   2084 ;	walk.c:181: N++;
      0009BB E5*00            [12] 2085 	mov	a,_bp
      0009BD 24 09            [12] 2086 	add	a,#0x09
      0009BF F8               [12] 2087 	mov	r0,a
      0009C0 06               [12] 2088 	inc	@r0
      0009C1 B6 00 02         [24] 2089 	cjne	@r0,#0x00,00195$
      0009C4 08               [12] 2090 	inc	r0
      0009C5 06               [12] 2091 	inc	@r0
      0009C6                       2092 00195$:
      0009C6 02r06r86         [24] 2093 	ljmp	00108$
      0009C9                       2094 00110$:
                                   2095 ;	walk.c:184: EA = 0;
                                   2096 ;	assignBit
      0009C9 C2 AF            [12] 2097 	clr	_EA
                                   2098 ;	walk.c:186: puts("\033[2J\033[?25h");
      0009CB 90r00r5B         [24] 2099 	mov	dptr,#___str_7
      0009CE 75 F0 80         [24] 2100 	mov	b,#0x80
      0009D1 12r00r00         [24] 2101 	lcall	_puts
                                   2102 ;	walk.c:190: __endasm;
      0009D4 02 00 00         [24] 2103 	ljmp	0
                                   2104 ;	walk.c:192: return 0;
      0009D7 90 00 00         [24] 2105 	mov	dptr,#0x0000
                                   2106 ;	walk.c:193: }
      0009DA 85*00 81         [24] 2107 	mov	sp,_bp
      0009DD D0*00            [24] 2108 	pop	_bp
      0009DF 22               [24] 2109 	ret
                                   2110 ;------------------------------------------------------------
                                   2111 ;Allocation info for local variables in function 'stinit'
                                   2112 ;------------------------------------------------------------
                                   2113 ;	walk.c:195: static void stinit(void) {
                                   2114 ;	-----------------------------------------
                                   2115 ;	 function stinit
                                   2116 ;	-----------------------------------------
      0009E0                       2117 _stinit:
                                   2118 ;	walk.c:196: sp = -1;
      0009E0 90rBDr60         [24] 2119 	mov	dptr,#_sp
      0009E3 74 FF            [12] 2120 	mov	a,#0xff
      0009E5 F0               [24] 2121 	movx	@dptr,a
      0009E6 A3               [24] 2122 	inc	dptr
      0009E7 F0               [24] 2123 	movx	@dptr,a
                                   2124 ;	walk.c:197: return;
                                   2125 ;	walk.c:198: }
      0009E8 22               [24] 2126 	ret
                                   2127 ;------------------------------------------------------------
                                   2128 ;Allocation info for local variables in function 'stpush'
                                   2129 ;------------------------------------------------------------
                                   2130 ;t                         Allocated to registers r5 r6 r7 
                                   2131 ;------------------------------------------------------------
                                   2132 ;	walk.c:200: static int stpush(struct node *t) {
                                   2133 ;	-----------------------------------------
                                   2134 ;	 function stpush
                                   2135 ;	-----------------------------------------
      0009E9                       2136 _stpush:
      0009E9 AD 82            [24] 2137 	mov	r5,dpl
      0009EB AE 83            [24] 2138 	mov	r6,dph
      0009ED AF F0            [24] 2139 	mov	r7,b
                                   2140 ;	walk.c:201: if (sp == (SMAX - 1)) return 0;
      0009EF 90rBDr60         [24] 2141 	mov	dptr,#_sp
      0009F2 E0               [24] 2142 	movx	a,@dptr
      0009F3 FB               [12] 2143 	mov	r3,a
      0009F4 A3               [24] 2144 	inc	dptr
      0009F5 E0               [24] 2145 	movx	a,@dptr
      0009F6 FC               [12] 2146 	mov	r4,a
      0009F7 BB DF 07         [24] 2147 	cjne	r3,#0xdf,00102$
      0009FA BC 25 04         [24] 2148 	cjne	r4,#0x25,00102$
      0009FD 90 00 00         [24] 2149 	mov	dptr,#0x0000
      000A00 22               [24] 2150 	ret
      000A01                       2151 00102$:
                                   2152 ;	walk.c:202: sp++;
      000A01 90rBDr60         [24] 2153 	mov	dptr,#_sp
      000A04 74 01            [12] 2154 	mov	a,#0x01
      000A06 2B               [12] 2155 	add	a,r3
      000A07 F0               [24] 2156 	movx	@dptr,a
      000A08 E4               [12] 2157 	clr	a
      000A09 3C               [12] 2158 	addc	a,r4
      000A0A A3               [24] 2159 	inc	dptr
      000A0B F0               [24] 2160 	movx	@dptr,a
                                   2161 ;	walk.c:203: stack[sp] = *t;
      000A0C 90rBDr60         [24] 2162 	mov	dptr,#_sp
      000A0F E0               [24] 2163 	movx	a,@dptr
      000A10 FB               [12] 2164 	mov	r3,a
      000A11 A3               [24] 2165 	inc	dptr
      000A12 E0               [24] 2166 	movx	a,@dptr
      000A13 FC               [12] 2167 	mov	r4,a
      000A14 EB               [12] 2168 	mov	a,r3
      000A15 2B               [12] 2169 	add	a,r3
      000A16 FB               [12] 2170 	mov	r3,a
      000A17 EC               [12] 2171 	mov	a,r4
      000A18 33               [12] 2172 	rlc	a
      000A19 FC               [12] 2173 	mov	r4,a
      000A1A EB               [12] 2174 	mov	a,r3
      000A1B 2B               [12] 2175 	add	a,r3
      000A1C FB               [12] 2176 	mov	r3,a
      000A1D EC               [12] 2177 	mov	a,r4
      000A1E 33               [12] 2178 	rlc	a
      000A1F FC               [12] 2179 	mov	r4,a
      000A20 EB               [12] 2180 	mov	a,r3
      000A21 24rE0            [12] 2181 	add	a,#_stack
      000A23 FB               [12] 2182 	mov	r3,a
      000A24 EC               [12] 2183 	mov	a,r4
      000A25 34s25            [12] 2184 	addc	a,#(_stack >> 8)
      000A27 FC               [12] 2185 	mov	r4,a
      000A28 7A 00            [12] 2186 	mov	r2,#0x00
      000A2A 74 04            [12] 2187 	mov	a,#0x04
      000A2C C0 E0            [24] 2188 	push	acc
      000A2E E4               [12] 2189 	clr	a
      000A2F C0 E0            [24] 2190 	push	acc
      000A31 C0 05            [24] 2191 	push	ar5
      000A33 C0 06            [24] 2192 	push	ar6
      000A35 C0 07            [24] 2193 	push	ar7
      000A37 8B 82            [24] 2194 	mov	dpl,r3
      000A39 8C 83            [24] 2195 	mov	dph,r4
      000A3B 8A F0            [24] 2196 	mov	b,r2
      000A3D 12r00r00         [24] 2197 	lcall	___memcpy
      000A40 E5 81            [12] 2198 	mov	a,sp
      000A42 24 FB            [12] 2199 	add	a,#0xfb
      000A44 F5 81            [12] 2200 	mov	sp,a
                                   2201 ;	walk.c:204: return 1;
      000A46 90 00 01         [24] 2202 	mov	dptr,#0x0001
                                   2203 ;	walk.c:205: }
      000A49 22               [24] 2204 	ret
                                   2205 ;------------------------------------------------------------
                                   2206 ;Allocation info for local variables in function 'stpop'
                                   2207 ;------------------------------------------------------------
                                   2208 ;t                         Allocated to registers r5 r6 r7 
                                   2209 ;------------------------------------------------------------
                                   2210 ;	walk.c:207: static int stpop(struct node *t) {
                                   2211 ;	-----------------------------------------
                                   2212 ;	 function stpop
                                   2213 ;	-----------------------------------------
      000A4A                       2214 _stpop:
      000A4A AD 82            [24] 2215 	mov	r5,dpl
      000A4C AE 83            [24] 2216 	mov	r6,dph
      000A4E AF F0            [24] 2217 	mov	r7,b
                                   2218 ;	walk.c:208: if (sp == -1) return 0;
      000A50 90rBDr60         [24] 2219 	mov	dptr,#_sp
      000A53 E0               [24] 2220 	movx	a,@dptr
      000A54 FB               [12] 2221 	mov	r3,a
      000A55 A3               [24] 2222 	inc	dptr
      000A56 E0               [24] 2223 	movx	a,@dptr
      000A57 FC               [12] 2224 	mov	r4,a
      000A58 BB FF 07         [24] 2225 	cjne	r3,#0xff,00102$
      000A5B BC FF 04         [24] 2226 	cjne	r4,#0xff,00102$
      000A5E 90 00 00         [24] 2227 	mov	dptr,#0x0000
      000A61 22               [24] 2228 	ret
      000A62                       2229 00102$:
                                   2230 ;	walk.c:209: *t = stack[sp];
      000A62 EB               [12] 2231 	mov	a,r3
      000A63 2B               [12] 2232 	add	a,r3
      000A64 FB               [12] 2233 	mov	r3,a
      000A65 EC               [12] 2234 	mov	a,r4
      000A66 33               [12] 2235 	rlc	a
      000A67 FC               [12] 2236 	mov	r4,a
      000A68 EB               [12] 2237 	mov	a,r3
      000A69 2B               [12] 2238 	add	a,r3
      000A6A FB               [12] 2239 	mov	r3,a
      000A6B EC               [12] 2240 	mov	a,r4
      000A6C 33               [12] 2241 	rlc	a
      000A6D FC               [12] 2242 	mov	r4,a
      000A6E EB               [12] 2243 	mov	a,r3
      000A6F 24rE0            [12] 2244 	add	a,#_stack
      000A71 FB               [12] 2245 	mov	r3,a
      000A72 EC               [12] 2246 	mov	a,r4
      000A73 34s25            [12] 2247 	addc	a,#(_stack >> 8)
      000A75 FC               [12] 2248 	mov	r4,a
      000A76 7A 00            [12] 2249 	mov	r2,#0x00
      000A78 74 04            [12] 2250 	mov	a,#0x04
      000A7A C0 E0            [24] 2251 	push	acc
      000A7C E4               [12] 2252 	clr	a
      000A7D C0 E0            [24] 2253 	push	acc
      000A7F C0 03            [24] 2254 	push	ar3
      000A81 C0 04            [24] 2255 	push	ar4
      000A83 C0 02            [24] 2256 	push	ar2
      000A85 8D 82            [24] 2257 	mov	dpl,r5
      000A87 8E 83            [24] 2258 	mov	dph,r6
      000A89 8F F0            [24] 2259 	mov	b,r7
      000A8B 12r00r00         [24] 2260 	lcall	___memcpy
      000A8E E5 81            [12] 2261 	mov	a,sp
      000A90 24 FB            [12] 2262 	add	a,#0xfb
      000A92 F5 81            [12] 2263 	mov	sp,a
                                   2264 ;	walk.c:210: sp--;
      000A94 90rBDr60         [24] 2265 	mov	dptr,#_sp
      000A97 E0               [24] 2266 	movx	a,@dptr
      000A98 24 FF            [12] 2267 	add	a,#0xff
      000A9A FE               [12] 2268 	mov	r6,a
      000A9B A3               [24] 2269 	inc	dptr
      000A9C E0               [24] 2270 	movx	a,@dptr
      000A9D 34 FF            [12] 2271 	addc	a,#0xff
      000A9F FF               [12] 2272 	mov	r7,a
      000AA0 90rBDr60         [24] 2273 	mov	dptr,#_sp
      000AA3 EE               [12] 2274 	mov	a,r6
      000AA4 F0               [24] 2275 	movx	@dptr,a
      000AA5 EF               [12] 2276 	mov	a,r7
      000AA6 A3               [24] 2277 	inc	dptr
      000AA7 F0               [24] 2278 	movx	@dptr,a
                                   2279 ;	walk.c:211: return 1;
      000AA8 90 00 01         [24] 2280 	mov	dptr,#0x0001
                                   2281 ;	walk.c:212: }
      000AAB 22               [24] 2282 	ret
                                   2283 	.area CSEG    (CODE)
                                   2284 	.area CONST   (CODE)
                                   2285 	.area CONST   (CODE)
      000000                       2286 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2287 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2288 	.db 0x00
                                   2289 	.area CSEG    (CODE)
                                   2290 	.area CONST   (CODE)
      00000D                       2291 ___str_1:
      00000D 1B                    2292 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2293 	.ascii "[%d;%dHo"
             6F
      000016 00                    2294 	.db 0x00
                                   2295 	.area CSEG    (CODE)
                                   2296 	.area CONST   (CODE)
      000017                       2297 ___str_2:
      000017 1B                    2298 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2299 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2300 	.db 0x00
                                   2301 	.area CSEG    (CODE)
                                   2302 	.area CONST   (CODE)
      00002A                       2303 ___str_3:
      00002A 1B                    2304 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2305 	.ascii "[%d;%dH."
             2E
      000033 00                    2306 	.db 0x00
                                   2307 	.area CSEG    (CODE)
                                   2308 	.area CONST   (CODE)
      000034                       2309 ___str_4:
      000034 1B                    2310 	.db 0x1b
      000035 5B 32 4A              2311 	.ascii "[2J"
      000038 1B                    2312 	.db 0x1b
      000039 5B 3F 32 35 6C        2313 	.ascii "[?25l"
      00003E 00                    2314 	.db 0x00
                                   2315 	.area CSEG    (CODE)
                                   2316 	.area CONST   (CODE)
      00003F                       2317 ___str_5:
      00003F 1B                    2318 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2319 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2320 	.db 0x00
                                   2321 	.area CSEG    (CODE)
                                   2322 	.area CONST   (CODE)
      000052                       2323 ___str_6:
      000052 25 20 38 64 25 20 38  2324 	.ascii "% 8d% 8d"
             64
      00005A 00                    2325 	.db 0x00
                                   2326 	.area CSEG    (CODE)
                                   2327 	.area CONST   (CODE)
      00005B                       2328 ___str_7:
      00005B 1B                    2329 	.db 0x1b
      00005C 5B 32 4A              2330 	.ascii "[2J"
      00005F 1B                    2331 	.db 0x1b
      000060 5B 3F 32 35 68        2332 	.ascii "[?25h"
      000065 00                    2333 	.db 0x00
                                   2334 	.area CSEG    (CODE)
                                   2335 	.area XINIT   (CODE)
      000000                       2336 __xinit__neigh_tmpl:
      000000 FF FF                 2337 	.byte #0xff, #0xff	; -1
      000002 01 00                 2338 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2339 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2340 	.byte #0xff, #0xff	; -1
      000008 01 00                 2341 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2342 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2343 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2344 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2345 	.byte #0xff, #0xff	; -1
      000012 00 00                 2346 	.byte #0x00, #0x00	;  0
      000014 00 00                 2347 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2348 	.byte #0xff, #0xff	; -1
      000018 01 00                 2349 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2350 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2351 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2352 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2353 	.byte #0xff, #0xff	; -1
      000022 01 00                 2354 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2355 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2356 	.byte #0xff, #0xff	; -1
      000028 01 00                 2357 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2358 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2359 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2360 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2361 	.byte #0xff, #0xff	; -1
      000032 00 00                 2362 	.byte #0x00, #0x00	;  0
      000034 00 00                 2363 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2364 	.byte #0xff, #0xff	; -1
      000038 01 00                 2365 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2366 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2367 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2368 	.byte #0x01, #0x00	;  1
      000040                       2369 __xinit__neigh:
      000040 FF FF                 2370 	.byte #0xff, #0xff	; -1
      000042 01 00                 2371 	.byte #0x01, #0x00	;  1
      000044 FF FF                 2372 	.byte #0xff, #0xff	; -1
      000046 FF FF                 2373 	.byte #0xff, #0xff	; -1
      000048 01 00                 2374 	.byte #0x01, #0x00	;  1
      00004A FF FF                 2375 	.byte #0xff, #0xff	; -1
      00004C 01 00                 2376 	.byte #0x01, #0x00	;  1
      00004E 01 00                 2377 	.byte #0x01, #0x00	;  1
      000050 FF FF                 2378 	.byte #0xff, #0xff	; -1
      000052 00 00                 2379 	.byte #0x00, #0x00	;  0
      000054 00 00                 2380 	.byte #0x00, #0x00	;  0
      000056 FF FF                 2381 	.byte #0xff, #0xff	; -1
      000058 01 00                 2382 	.byte #0x01, #0x00	;  1
      00005A 00 00                 2383 	.byte #0x00, #0x00	;  0
      00005C 00 00                 2384 	.byte #0x00, #0x00	;  0
      00005E 01 00                 2385 	.byte #0x01, #0x00	;  1
      000060 FF FF                 2386 	.byte #0xff, #0xff	; -1
      000062 01 00                 2387 	.byte #0x01, #0x00	;  1
      000064 FF FF                 2388 	.byte #0xff, #0xff	; -1
      000066 FF FF                 2389 	.byte #0xff, #0xff	; -1
      000068 01 00                 2390 	.byte #0x01, #0x00	;  1
      00006A FF FF                 2391 	.byte #0xff, #0xff	; -1
      00006C 01 00                 2392 	.byte #0x01, #0x00	;  1
      00006E 01 00                 2393 	.byte #0x01, #0x00	;  1
      000070 FF FF                 2394 	.byte #0xff, #0xff	; -1
      000072 00 00                 2395 	.byte #0x00, #0x00	;  0
      000074 00 00                 2396 	.byte #0x00, #0x00	;  0
      000076 FF FF                 2397 	.byte #0xff, #0xff	; -1
      000078 01 00                 2398 	.byte #0x01, #0x00	;  1
      00007A 00 00                 2399 	.byte #0x00, #0x00	;  0
      00007C 00 00                 2400 	.byte #0x00, #0x00	;  0
      00007E 01 00                 2401 	.byte #0x01, #0x00	;  1
                                   2402 	.area CABS    (ABS,CODE)
