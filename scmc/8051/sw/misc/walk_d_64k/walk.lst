                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9648
      0025B0                        323 _stack:
      0025B0                        324 	.ds 38592
      00BC70                        325 _sp:
      00BC70                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
      000000                        335 _R:
      000000                        336 	.ds 2
      000002                        337 _neigh_tmpl:
      000002                        338 	.ds 64
      000042                        339 _neigh:
      000042                        340 	.ds 64
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  357 	ljmp	_int0
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000006                        378 __sdcc_program_startup:
      000006 02r06r7C         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'putchar'
                                    387 ;------------------------------------------------------------
                                    388 ;c                         Allocated to registers 
                                    389 ;------------------------------------------------------------
                                    390 ;	walk.c:9: int putchar(int c) __naked {
                                    391 ;	-----------------------------------------
                                    392 ;	 function putchar
                                    393 ;	-----------------------------------------
      000000                        394 _putchar:
                                    395 ;	naked function: no prologue.
                                    396 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  397 	mov	a, dpl
      000002 02 00 30         [24]  398 	ljmp	0x0030
                                    399 ;	walk.c:15: }
                                    400 ;	naked function: no epilogue.
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'getchar'
                                    403 ;------------------------------------------------------------
                                    404 ;	walk.c:17: int getchar(void) __naked {
                                    405 ;	-----------------------------------------
                                    406 ;	 function getchar
                                    407 ;	-----------------------------------------
      000005                        408 _getchar:
                                    409 ;	naked function: no prologue.
                                    410 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  411 	lcall	0x0032
      000008 F5 82            [12]  412 	mov	dpl, a
      00000A 75 83 00         [24]  413 	mov	dph, #0
      00000D 22               [24]  414 	ret
                                    415 ;	walk.c:24: }
                                    416 ;	naked function: no epilogue.
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'int0'
                                    419 ;------------------------------------------------------------
                                    420 ;	walk.c:28: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    421 ;	-----------------------------------------
                                    422 ;	 function int0
                                    423 ;	-----------------------------------------
      00000E                        424 _int0:
                           00000F   425 	ar7 = 0x0f
                           00000E   426 	ar6 = 0x0e
                           00000D   427 	ar5 = 0x0d
                           00000C   428 	ar4 = 0x0c
                           00000B   429 	ar3 = 0x0b
                           00000A   430 	ar2 = 0x0a
                           000009   431 	ar1 = 0x09
                           000008   432 	ar0 = 0x08
      00000E C0 D0            [24]  433 	push	psw
      000010 75 D0 08         [24]  434 	mov	psw,#0x08
                                    435 ;	walk.c:29: i0 = 0u;
      000013 78r00            [12]  436 	mov	r0,#_i0
      000015 76 00            [12]  437 	mov	@r0,#0x00
                                    438 ;	walk.c:30: }
      000017 D0 D0            [24]  439 	pop	psw
      000019 32               [24]  440 	reti
                                    441 ;	eliminated unneeded push/pop dpl
                                    442 ;	eliminated unneeded push/pop dph
                                    443 ;	eliminated unneeded push/pop b
                                    444 ;	eliminated unneeded push/pop acc
                                    445 ;------------------------------------------------------------
                                    446 ;Allocation info for local variables in function 'reset'
                                    447 ;------------------------------------------------------------
                                    448 ;	walk.c:32: static void reset(void) __naked {
                                    449 ;	-----------------------------------------
                                    450 ;	 function reset
                                    451 ;	-----------------------------------------
      00001A                        452 _reset:
                                    453 ;	naked function: no prologue.
                                    454 ;	walk.c:35: __endasm;
      00001A 43 87 02         [24]  455 	orl	pcon, #2
                                    456 ;	walk.c:36: }
                                    457 ;	naked function: no epilogue.
                                    458 ;------------------------------------------------------------
                                    459 ;Allocation info for local variables in function 'bang'
                                    460 ;------------------------------------------------------------
                                    461 ;	walk.c:38: static void bang(void) {
                                    462 ;	-----------------------------------------
                                    463 ;	 function bang
                                    464 ;	-----------------------------------------
      00001D                        465 _bang:
                           000007   466 	ar7 = 0x07
                           000006   467 	ar6 = 0x06
                           000005   468 	ar5 = 0x05
                           000004   469 	ar4 = 0x04
                           000003   470 	ar3 = 0x03
                           000002   471 	ar2 = 0x02
                           000001   472 	ar1 = 0x01
                           000000   473 	ar0 = 0x00
                                    474 ;	walk.c:39: (void)puts("Memory error");
      00001D 90r00r00         [24]  475 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  476 	mov	b,#0x80
      000023 12r00r00         [24]  477 	lcall	_puts
                                    478 ;	walk.c:40: reset();
                                    479 ;	walk.c:42: return;
                                    480 ;	walk.c:43: }
      000026 02r00r1A         [24]  481 	ljmp	_reset
                                    482 ;------------------------------------------------------------
                                    483 ;Allocation info for local variables in function 'flashOE'
                                    484 ;------------------------------------------------------------
                                    485 ;mask                      Allocated to registers r7 
                                    486 ;OEreg                     Allocated to stack - _bp +1
                                    487 ;------------------------------------------------------------
                                    488 ;	walk.c:98: static void flashOE(uint8_t mask) {
                                    489 ;	-----------------------------------------
                                    490 ;	 function flashOE
                                    491 ;	-----------------------------------------
      000029                        492 _flashOE:
      000029 C0*00            [24]  493 	push	_bp
      00002B 85 81*00         [24]  494 	mov	_bp,sp
      00002E 05 81            [12]  495 	inc	sp
      000030 05 81            [12]  496 	inc	sp
      000032 AF 82            [24]  497 	mov	r7,dpl
                                    498 ;	walk.c:101: P1_7 = 0;
                                    499 ;	assignBit
      000034 C2 97            [12]  500 	clr	_P1_7
                                    501 ;	walk.c:102: *OEreg = OE76;
      000036 90 F0 06         [24]  502 	mov	dptr,#0xf006
      000039 78r01            [12]  503 	mov	r0,#_OE76
      00003B E6               [12]  504 	mov	a,@r0
      00003C F0               [24]  505 	movx	@dptr,a
                                    506 ;	walk.c:103: P1_7 = 1;
                                    507 ;	assignBit
      00003D D2 97            [12]  508 	setb	_P1_7
                                    509 ;	walk.c:104: OE76 ^= mask;
      00003F 78r01            [12]  510 	mov	r0,#_OE76
      000041 EF               [12]  511 	mov	a,r7
      000042 66               [12]  512 	xrl	a,@r0
      000043 F6               [12]  513 	mov	@r0,a
                                    514 ;	walk.c:106: return;
                                    515 ;	walk.c:107: }
      000044 85*00 81         [24]  516 	mov	sp,_bp
      000047 D0*00            [24]  517 	pop	_bp
      000049 22               [24]  518 	ret
                                    519 ;------------------------------------------------------------
                                    520 ;Allocation info for local variables in function 'update'
                                    521 ;------------------------------------------------------------
                                    522 ;cur                       Allocated to stack - _bp -5
                                    523 ;j                         Allocated to stack - _bp -6
                                    524 ;t                         Allocated to stack - _bp +1
                                    525 ;sloc0                     Allocated to stack - _bp +4
                                    526 ;sloc1                     Allocated to stack - _bp +6
                                    527 ;sloc2                     Allocated to stack - _bp +8
                                    528 ;------------------------------------------------------------
                                    529 ;	walk.c:109: static int update(struct node *t, struct node *cur, char j) {
                                    530 ;	-----------------------------------------
                                    531 ;	 function update
                                    532 ;	-----------------------------------------
      00004A                        533 _update:
      00004A C0*00            [24]  534 	push	_bp
      00004C 85 81*00         [24]  535 	mov	_bp,sp
      00004F C0 82            [24]  536 	push	dpl
      000051 C0 83            [24]  537 	push	dph
      000053 C0 F0            [24]  538 	push	b
      000055 E5 81            [12]  539 	mov	a,sp
      000057 24 07            [12]  540 	add	a,#0x07
      000059 F5 81            [12]  541 	mov	sp,a
                                    542 ;	walk.c:110: t->r = cur->r + neigh[j].r;
      00005B E5*00            [12]  543 	mov	a,_bp
      00005D 24 FB            [12]  544 	add	a,#0xfb
      00005F F8               [12]  545 	mov	r0,a
      000060 86 02            [24]  546 	mov	ar2,@r0
      000062 08               [12]  547 	inc	r0
      000063 86 03            [24]  548 	mov	ar3,@r0
      000065 08               [12]  549 	inc	r0
      000066 86 04            [24]  550 	mov	ar4,@r0
      000068 8A 82            [24]  551 	mov	dpl,r2
      00006A 8B 83            [24]  552 	mov	dph,r3
      00006C 8C F0            [24]  553 	mov	b,r4
      00006E E5*00            [12]  554 	mov	a,_bp
      000070 24 04            [12]  555 	add	a,#0x04
      000072 F8               [12]  556 	mov	r0,a
      000073 12r00r00         [24]  557 	lcall	__gptrget
      000076 F6               [12]  558 	mov	@r0,a
      000077 A3               [24]  559 	inc	dptr
      000078 12r00r00         [24]  560 	lcall	__gptrget
      00007B 08               [12]  561 	inc	r0
      00007C F6               [12]  562 	mov	@r0,a
      00007D E5*00            [12]  563 	mov	a,_bp
      00007F 24 FA            [12]  564 	add	a,#0xfa
      000081 F8               [12]  565 	mov	r0,a
      000082 E5*00            [12]  566 	mov	a,_bp
      000084 24 06            [12]  567 	add	a,#0x06
      000086 F9               [12]  568 	mov	r1,a
      000087 E6               [12]  569 	mov	a,@r0
      000088 75 F0 04         [24]  570 	mov	b,#0x04
      00008B A4               [48]  571 	mul	ab
      00008C F7               [12]  572 	mov	@r1,a
      00008D 09               [12]  573 	inc	r1
      00008E A7 F0            [24]  574 	mov	@r1,b
      000090 E5*00            [12]  575 	mov	a,_bp
      000092 24 06            [12]  576 	add	a,#0x06
      000094 F8               [12]  577 	mov	r0,a
      000095 E6               [12]  578 	mov	a,@r0
      000096 24r42            [12]  579 	add	a,#_neigh
      000098 F5 82            [12]  580 	mov	dpl,a
      00009A 08               [12]  581 	inc	r0
      00009B E6               [12]  582 	mov	a,@r0
      00009C 34s00            [12]  583 	addc	a,#(_neigh >> 8)
      00009E F5 83            [12]  584 	mov	dph,a
      0000A0 E0               [24]  585 	movx	a,@dptr
      0000A1 FF               [12]  586 	mov	r7,a
      0000A2 A3               [24]  587 	inc	dptr
      0000A3 E0               [24]  588 	movx	a,@dptr
      0000A4 FE               [12]  589 	mov	r6,a
      0000A5 E5*00            [12]  590 	mov	a,_bp
      0000A7 24 04            [12]  591 	add	a,#0x04
      0000A9 F8               [12]  592 	mov	r0,a
      0000AA EF               [12]  593 	mov	a,r7
      0000AB 26               [12]  594 	add	a,@r0
      0000AC FF               [12]  595 	mov	r7,a
      0000AD EE               [12]  596 	mov	a,r6
      0000AE 08               [12]  597 	inc	r0
      0000AF 36               [12]  598 	addc	a,@r0
      0000B0 FE               [12]  599 	mov	r6,a
      0000B1 A8*00            [24]  600 	mov	r0,_bp
      0000B3 08               [12]  601 	inc	r0
      0000B4 86 82            [24]  602 	mov	dpl,@r0
      0000B6 08               [12]  603 	inc	r0
      0000B7 86 83            [24]  604 	mov	dph,@r0
      0000B9 08               [12]  605 	inc	r0
      0000BA 86 F0            [24]  606 	mov	b,@r0
      0000BC EF               [12]  607 	mov	a,r7
      0000BD 12r00r00         [24]  608 	lcall	__gptrput
      0000C0 A3               [24]  609 	inc	dptr
      0000C1 EE               [12]  610 	mov	a,r6
      0000C2 12r00r00         [24]  611 	lcall	__gptrput
                                    612 ;	walk.c:111: t->c = cur->c + neigh[j].c;
      0000C5 A8*00            [24]  613 	mov	r0,_bp
      0000C7 08               [12]  614 	inc	r0
      0000C8 E5*00            [12]  615 	mov	a,_bp
      0000CA 24 08            [12]  616 	add	a,#0x08
      0000CC F9               [12]  617 	mov	r1,a
      0000CD 74 02            [12]  618 	mov	a,#0x02
      0000CF 26               [12]  619 	add	a,@r0
      0000D0 F7               [12]  620 	mov	@r1,a
      0000D1 E4               [12]  621 	clr	a
      0000D2 08               [12]  622 	inc	r0
      0000D3 36               [12]  623 	addc	a,@r0
      0000D4 09               [12]  624 	inc	r1
      0000D5 F7               [12]  625 	mov	@r1,a
      0000D6 08               [12]  626 	inc	r0
      0000D7 09               [12]  627 	inc	r1
      0000D8 E6               [12]  628 	mov	a,@r0
      0000D9 F7               [12]  629 	mov	@r1,a
      0000DA 74 02            [12]  630 	mov	a,#0x02
      0000DC 2A               [12]  631 	add	a,r2
      0000DD FA               [12]  632 	mov	r2,a
      0000DE E4               [12]  633 	clr	a
      0000DF 3B               [12]  634 	addc	a,r3
      0000E0 FB               [12]  635 	mov	r3,a
      0000E1 8A 82            [24]  636 	mov	dpl,r2
      0000E3 8B 83            [24]  637 	mov	dph,r3
      0000E5 8C F0            [24]  638 	mov	b,r4
      0000E7 12r00r00         [24]  639 	lcall	__gptrget
      0000EA FA               [12]  640 	mov	r2,a
      0000EB A3               [24]  641 	inc	dptr
      0000EC 12r00r00         [24]  642 	lcall	__gptrget
      0000EF FB               [12]  643 	mov	r3,a
      0000F0 E5*00            [12]  644 	mov	a,_bp
      0000F2 24 06            [12]  645 	add	a,#0x06
      0000F4 F8               [12]  646 	mov	r0,a
      0000F5 E6               [12]  647 	mov	a,@r0
      0000F6 24r42            [12]  648 	add	a,#_neigh
      0000F8 FC               [12]  649 	mov	r4,a
      0000F9 08               [12]  650 	inc	r0
      0000FA E6               [12]  651 	mov	a,@r0
      0000FB 34s00            [12]  652 	addc	a,#(_neigh >> 8)
      0000FD FD               [12]  653 	mov	r5,a
      0000FE 8C 82            [24]  654 	mov	dpl,r4
      000100 8D 83            [24]  655 	mov	dph,r5
      000102 A3               [24]  656 	inc	dptr
      000103 A3               [24]  657 	inc	dptr
      000104 E0               [24]  658 	movx	a,@dptr
      000105 FC               [12]  659 	mov	r4,a
      000106 A3               [24]  660 	inc	dptr
      000107 E0               [24]  661 	movx	a,@dptr
      000108 FD               [12]  662 	mov	r5,a
      000109 EC               [12]  663 	mov	a,r4
      00010A 2A               [12]  664 	add	a,r2
      00010B FA               [12]  665 	mov	r2,a
      00010C ED               [12]  666 	mov	a,r5
      00010D 3B               [12]  667 	addc	a,r3
      00010E FB               [12]  668 	mov	r3,a
      00010F E5*00            [12]  669 	mov	a,_bp
      000111 24 08            [12]  670 	add	a,#0x08
      000113 F8               [12]  671 	mov	r0,a
      000114 86 82            [24]  672 	mov	dpl,@r0
      000116 08               [12]  673 	inc	r0
      000117 86 83            [24]  674 	mov	dph,@r0
      000119 08               [12]  675 	inc	r0
      00011A 86 F0            [24]  676 	mov	b,@r0
      00011C EA               [12]  677 	mov	a,r2
      00011D 12r00r00         [24]  678 	lcall	__gptrput
      000120 A3               [24]  679 	inc	dptr
      000121 EB               [12]  680 	mov	a,r3
      000122 12r00r00         [24]  681 	lcall	__gptrput
                                    682 ;	walk.c:113: if (t->r < 0) t->r += ROWS;
      000125 A8*00            [24]  683 	mov	r0,_bp
      000127 08               [12]  684 	inc	r0
      000128 86 82            [24]  685 	mov	dpl,@r0
      00012A 08               [12]  686 	inc	r0
      00012B 86 83            [24]  687 	mov	dph,@r0
      00012D 08               [12]  688 	inc	r0
      00012E 86 F0            [24]  689 	mov	b,@r0
      000130 12r00r00         [24]  690 	lcall	__gptrget
      000133 FD               [12]  691 	mov	r5,a
      000134 A3               [24]  692 	inc	dptr
      000135 12r00r00         [24]  693 	lcall	__gptrget
      000138 FC               [12]  694 	mov	r4,a
      000139 EE               [12]  695 	mov	a,r6
      00013A 30 E7 1D         [24]  696 	jnb	acc.7,00104$
      00013D 74 30            [12]  697 	mov	a,#0x30
      00013F 2D               [12]  698 	add	a,r5
      000140 FF               [12]  699 	mov	r7,a
      000141 E4               [12]  700 	clr	a
      000142 3C               [12]  701 	addc	a,r4
      000143 FE               [12]  702 	mov	r6,a
      000144 A8*00            [24]  703 	mov	r0,_bp
      000146 08               [12]  704 	inc	r0
      000147 86 82            [24]  705 	mov	dpl,@r0
      000149 08               [12]  706 	inc	r0
      00014A 86 83            [24]  707 	mov	dph,@r0
      00014C 08               [12]  708 	inc	r0
      00014D 86 F0            [24]  709 	mov	b,@r0
      00014F EF               [12]  710 	mov	a,r7
      000150 12r00r00         [24]  711 	lcall	__gptrput
      000153 A3               [24]  712 	inc	dptr
      000154 EE               [12]  713 	mov	a,r6
      000155 12r00r00         [24]  714 	lcall	__gptrput
      000158 80 27            [24]  715 	sjmp	00105$
      00015A                        716 00104$:
                                    717 ;	walk.c:114: else if (t->r >= ROWS) t->r -= ROWS;
      00015A C3               [12]  718 	clr	c
      00015B ED               [12]  719 	mov	a,r5
      00015C 94 30            [12]  720 	subb	a,#0x30
      00015E EC               [12]  721 	mov	a,r4
      00015F 64 80            [12]  722 	xrl	a,#0x80
      000161 94 80            [12]  723 	subb	a,#0x80
      000163 40 1C            [24]  724 	jc	00105$
      000165 ED               [12]  725 	mov	a,r5
      000166 24 D0            [12]  726 	add	a,#0xd0
      000168 FD               [12]  727 	mov	r5,a
      000169 EC               [12]  728 	mov	a,r4
      00016A 34 FF            [12]  729 	addc	a,#0xff
      00016C FC               [12]  730 	mov	r4,a
      00016D A8*00            [24]  731 	mov	r0,_bp
      00016F 08               [12]  732 	inc	r0
      000170 86 82            [24]  733 	mov	dpl,@r0
      000172 08               [12]  734 	inc	r0
      000173 86 83            [24]  735 	mov	dph,@r0
      000175 08               [12]  736 	inc	r0
      000176 86 F0            [24]  737 	mov	b,@r0
      000178 ED               [12]  738 	mov	a,r5
      000179 12r00r00         [24]  739 	lcall	__gptrput
      00017C A3               [24]  740 	inc	dptr
      00017D EC               [12]  741 	mov	a,r4
      00017E 12r00r00         [24]  742 	lcall	__gptrput
      000181                        743 00105$:
                                    744 ;	walk.c:115: if (t->c < 0) t->c += COLS;
      000181 E5*00            [12]  745 	mov	a,_bp
      000183 24 08            [12]  746 	add	a,#0x08
      000185 F8               [12]  747 	mov	r0,a
      000186 86 82            [24]  748 	mov	dpl,@r0
      000188 08               [12]  749 	inc	r0
      000189 86 83            [24]  750 	mov	dph,@r0
      00018B 08               [12]  751 	inc	r0
      00018C 86 F0            [24]  752 	mov	b,@r0
      00018E 12r00r00         [24]  753 	lcall	__gptrget
      000191 A3               [24]  754 	inc	dptr
      000192 12r00r00         [24]  755 	lcall	__gptrget
      000195 30 E7 35         [24]  756 	jnb	acc.7,00109$
      000198 E5*00            [12]  757 	mov	a,_bp
      00019A 24 08            [12]  758 	add	a,#0x08
      00019C F8               [12]  759 	mov	r0,a
      00019D 86 82            [24]  760 	mov	dpl,@r0
      00019F 08               [12]  761 	inc	r0
      0001A0 86 83            [24]  762 	mov	dph,@r0
      0001A2 08               [12]  763 	inc	r0
      0001A3 86 F0            [24]  764 	mov	b,@r0
      0001A5 12r00r00         [24]  765 	lcall	__gptrget
      0001A8 FE               [12]  766 	mov	r6,a
      0001A9 A3               [24]  767 	inc	dptr
      0001AA 12r00r00         [24]  768 	lcall	__gptrget
      0001AD FF               [12]  769 	mov	r7,a
      0001AE 74 C9            [12]  770 	mov	a,#0xc9
      0001B0 2E               [12]  771 	add	a,r6
      0001B1 FE               [12]  772 	mov	r6,a
      0001B2 E4               [12]  773 	clr	a
      0001B3 3F               [12]  774 	addc	a,r7
      0001B4 FF               [12]  775 	mov	r7,a
      0001B5 E5*00            [12]  776 	mov	a,_bp
      0001B7 24 08            [12]  777 	add	a,#0x08
      0001B9 F8               [12]  778 	mov	r0,a
      0001BA 86 82            [24]  779 	mov	dpl,@r0
      0001BC 08               [12]  780 	inc	r0
      0001BD 86 83            [24]  781 	mov	dph,@r0
      0001BF 08               [12]  782 	inc	r0
      0001C0 86 F0            [24]  783 	mov	b,@r0
      0001C2 EE               [12]  784 	mov	a,r6
      0001C3 12r00r00         [24]  785 	lcall	__gptrput
      0001C6 A3               [24]  786 	inc	dptr
      0001C7 EF               [12]  787 	mov	a,r7
      0001C8 12r00r00         [24]  788 	lcall	__gptrput
      0001CB 80 55            [24]  789 	sjmp	00110$
      0001CD                        790 00109$:
                                    791 ;	walk.c:116: else if (t->c >= COLS) t->c -= COLS;
      0001CD E5*00            [12]  792 	mov	a,_bp
      0001CF 24 08            [12]  793 	add	a,#0x08
      0001D1 F8               [12]  794 	mov	r0,a
      0001D2 86 82            [24]  795 	mov	dpl,@r0
      0001D4 08               [12]  796 	inc	r0
      0001D5 86 83            [24]  797 	mov	dph,@r0
      0001D7 08               [12]  798 	inc	r0
      0001D8 86 F0            [24]  799 	mov	b,@r0
      0001DA 12r00r00         [24]  800 	lcall	__gptrget
      0001DD FE               [12]  801 	mov	r6,a
      0001DE A3               [24]  802 	inc	dptr
      0001DF 12r00r00         [24]  803 	lcall	__gptrget
      0001E2 FF               [12]  804 	mov	r7,a
      0001E3 C3               [12]  805 	clr	c
      0001E4 EE               [12]  806 	mov	a,r6
      0001E5 94 C9            [12]  807 	subb	a,#0xc9
      0001E7 EF               [12]  808 	mov	a,r7
      0001E8 64 80            [12]  809 	xrl	a,#0x80
      0001EA 94 80            [12]  810 	subb	a,#0x80
      0001EC 40 34            [24]  811 	jc	00110$
      0001EE E5*00            [12]  812 	mov	a,_bp
      0001F0 24 08            [12]  813 	add	a,#0x08
      0001F2 F8               [12]  814 	mov	r0,a
      0001F3 86 82            [24]  815 	mov	dpl,@r0
      0001F5 08               [12]  816 	inc	r0
      0001F6 86 83            [24]  817 	mov	dph,@r0
      0001F8 08               [12]  818 	inc	r0
      0001F9 86 F0            [24]  819 	mov	b,@r0
      0001FB 12r00r00         [24]  820 	lcall	__gptrget
      0001FE FE               [12]  821 	mov	r6,a
      0001FF A3               [24]  822 	inc	dptr
      000200 12r00r00         [24]  823 	lcall	__gptrget
      000203 FF               [12]  824 	mov	r7,a
      000204 EE               [12]  825 	mov	a,r6
      000205 24 37            [12]  826 	add	a,#0x37
      000207 FE               [12]  827 	mov	r6,a
      000208 EF               [12]  828 	mov	a,r7
      000209 34 FF            [12]  829 	addc	a,#0xff
      00020B FF               [12]  830 	mov	r7,a
      00020C E5*00            [12]  831 	mov	a,_bp
      00020E 24 08            [12]  832 	add	a,#0x08
      000210 F8               [12]  833 	mov	r0,a
      000211 86 82            [24]  834 	mov	dpl,@r0
      000213 08               [12]  835 	inc	r0
      000214 86 83            [24]  836 	mov	dph,@r0
      000216 08               [12]  837 	inc	r0
      000217 86 F0            [24]  838 	mov	b,@r0
      000219 EE               [12]  839 	mov	a,r6
      00021A 12r00r00         [24]  840 	lcall	__gptrput
      00021D A3               [24]  841 	inc	dptr
      00021E EF               [12]  842 	mov	a,r7
      00021F 12r00r00         [24]  843 	lcall	__gptrput
      000222                        844 00110$:
                                    845 ;	walk.c:118: if (g[t->r][t->c] == 0xaa) return 0;
      000222 A8*00            [24]  846 	mov	r0,_bp
      000224 08               [12]  847 	inc	r0
      000225 86 82            [24]  848 	mov	dpl,@r0
      000227 08               [12]  849 	inc	r0
      000228 86 83            [24]  850 	mov	dph,@r0
      00022A 08               [12]  851 	inc	r0
      00022B 86 F0            [24]  852 	mov	b,@r0
      00022D 12r00r00         [24]  853 	lcall	__gptrget
      000230 FE               [12]  854 	mov	r6,a
      000231 A3               [24]  855 	inc	dptr
      000232 12r00r00         [24]  856 	lcall	__gptrget
      000235 FF               [12]  857 	mov	r7,a
      000236 C0 06            [24]  858 	push	ar6
      000238 C0 07            [24]  859 	push	ar7
      00023A 90 00 C9         [24]  860 	mov	dptr,#0x00c9
      00023D 12r00r00         [24]  861 	lcall	__mulint
      000240 AE 82            [24]  862 	mov	r6,dpl
      000242 AF 83            [24]  863 	mov	r7,dph
      000244 15 81            [12]  864 	dec	sp
      000246 15 81            [12]  865 	dec	sp
      000248 EE               [12]  866 	mov	a,r6
      000249 24r00            [12]  867 	add	a,#_g
      00024B FE               [12]  868 	mov	r6,a
      00024C EF               [12]  869 	mov	a,r7
      00024D 34s00            [12]  870 	addc	a,#(_g >> 8)
      00024F FF               [12]  871 	mov	r7,a
      000250 E5*00            [12]  872 	mov	a,_bp
      000252 24 08            [12]  873 	add	a,#0x08
      000254 F8               [12]  874 	mov	r0,a
      000255 86 82            [24]  875 	mov	dpl,@r0
      000257 08               [12]  876 	inc	r0
      000258 86 83            [24]  877 	mov	dph,@r0
      00025A 08               [12]  878 	inc	r0
      00025B 86 F0            [24]  879 	mov	b,@r0
      00025D 12r00r00         [24]  880 	lcall	__gptrget
      000260 FC               [12]  881 	mov	r4,a
      000261 A3               [24]  882 	inc	dptr
      000262 12r00r00         [24]  883 	lcall	__gptrget
      000265 FD               [12]  884 	mov	r5,a
      000266 EC               [12]  885 	mov	a,r4
      000267 2E               [12]  886 	add	a,r6
      000268 F5 82            [12]  887 	mov	dpl,a
      00026A ED               [12]  888 	mov	a,r5
      00026B 3F               [12]  889 	addc	a,r7
      00026C F5 83            [12]  890 	mov	dph,a
      00026E E0               [24]  891 	movx	a,@dptr
      00026F FF               [12]  892 	mov	r7,a
      000270 BF AA 05         [24]  893 	cjne	r7,#0xaa,00114$
      000273 90 00 00         [24]  894 	mov	dptr,#0x0000
      000276 80 59            [24]  895 	sjmp	00116$
      000278                        896 00114$:
                                    897 ;	walk.c:119: else if (g[t->r][t->c] != 0x55) bang();
      000278 A8*00            [24]  898 	mov	r0,_bp
      00027A 08               [12]  899 	inc	r0
      00027B 86 82            [24]  900 	mov	dpl,@r0
      00027D 08               [12]  901 	inc	r0
      00027E 86 83            [24]  902 	mov	dph,@r0
      000280 08               [12]  903 	inc	r0
      000281 86 F0            [24]  904 	mov	b,@r0
      000283 12r00r00         [24]  905 	lcall	__gptrget
      000286 FE               [12]  906 	mov	r6,a
      000287 A3               [24]  907 	inc	dptr
      000288 12r00r00         [24]  908 	lcall	__gptrget
      00028B FF               [12]  909 	mov	r7,a
      00028C C0 06            [24]  910 	push	ar6
      00028E C0 07            [24]  911 	push	ar7
      000290 90 00 C9         [24]  912 	mov	dptr,#0x00c9
      000293 12r00r00         [24]  913 	lcall	__mulint
      000296 AE 82            [24]  914 	mov	r6,dpl
      000298 AF 83            [24]  915 	mov	r7,dph
      00029A 15 81            [12]  916 	dec	sp
      00029C 15 81            [12]  917 	dec	sp
      00029E EE               [12]  918 	mov	a,r6
      00029F 24r00            [12]  919 	add	a,#_g
      0002A1 FE               [12]  920 	mov	r6,a
      0002A2 EF               [12]  921 	mov	a,r7
      0002A3 34s00            [12]  922 	addc	a,#(_g >> 8)
      0002A5 FF               [12]  923 	mov	r7,a
      0002A6 E5*00            [12]  924 	mov	a,_bp
      0002A8 24 08            [12]  925 	add	a,#0x08
      0002AA F8               [12]  926 	mov	r0,a
      0002AB 86 82            [24]  927 	mov	dpl,@r0
      0002AD 08               [12]  928 	inc	r0
      0002AE 86 83            [24]  929 	mov	dph,@r0
      0002B0 08               [12]  930 	inc	r0
      0002B1 86 F0            [24]  931 	mov	b,@r0
      0002B3 12r00r00         [24]  932 	lcall	__gptrget
      0002B6 FC               [12]  933 	mov	r4,a
      0002B7 A3               [24]  934 	inc	dptr
      0002B8 12r00r00         [24]  935 	lcall	__gptrget
      0002BB FD               [12]  936 	mov	r5,a
      0002BC EC               [12]  937 	mov	a,r4
      0002BD 2E               [12]  938 	add	a,r6
      0002BE F5 82            [12]  939 	mov	dpl,a
      0002C0 ED               [12]  940 	mov	a,r5
      0002C1 3F               [12]  941 	addc	a,r7
      0002C2 F5 83            [12]  942 	mov	dph,a
      0002C4 E0               [24]  943 	movx	a,@dptr
      0002C5 FF               [12]  944 	mov	r7,a
      0002C6 BF 55 02         [24]  945 	cjne	r7,#0x55,00148$
      0002C9 80 03            [24]  946 	sjmp	00115$
      0002CB                        947 00148$:
      0002CB 12r00r1D         [24]  948 	lcall	_bang
      0002CE                        949 00115$:
                                    950 ;	walk.c:121: return 1;
      0002CE 90 00 01         [24]  951 	mov	dptr,#0x0001
      0002D1                        952 00116$:
                                    953 ;	walk.c:122: }
      0002D1 85*00 81         [24]  954 	mov	sp,_bp
      0002D4 D0*00            [24]  955 	pop	_bp
      0002D6 22               [24]  956 	ret
                                    957 ;------------------------------------------------------------
                                    958 ;Allocation info for local variables in function 'walk'
                                    959 ;------------------------------------------------------------
                                    960 ;nstart                    Allocated to registers 
                                    961 ;cur                       Allocated to stack - _bp +10
                                    962 ;t                         Allocated to stack - _bp +14
                                    963 ;j                         Allocated to stack - _bp +18
                                    964 ;f                         Allocated to registers r3 
                                    965 ;sloc0                     Allocated to stack - _bp +1
                                    966 ;sloc1                     Allocated to stack - _bp +2
                                    967 ;sloc2                     Allocated to stack - _bp +3
                                    968 ;sloc3                     Allocated to stack - _bp +17
                                    969 ;sloc4                     Allocated to stack - _bp +4
                                    970 ;sloc5                     Allocated to stack - _bp +5
                                    971 ;sloc6                     Allocated to stack - _bp +6
                                    972 ;sloc7                     Allocated to stack - _bp +7
                                    973 ;------------------------------------------------------------
                                    974 ;	walk.c:124: static void walk(struct node *nstart) {
                                    975 ;	-----------------------------------------
                                    976 ;	 function walk
                                    977 ;	-----------------------------------------
      0002D7                        978 _walk:
      0002D7 C0*00            [24]  979 	push	_bp
      0002D9 E5 81            [12]  980 	mov	a,sp
      0002DB F5*00            [12]  981 	mov	_bp,a
      0002DD 24 12            [12]  982 	add	a,#0x12
      0002DF F5 81            [12]  983 	mov	sp,a
      0002E1 AD 82            [24]  984 	mov	r5,dpl
      0002E3 AE 83            [24]  985 	mov	r6,dph
      0002E5 AF F0            [24]  986 	mov	r7,b
                                    987 ;	walk.c:128: cur = *nstart;
      0002E7 E5*00            [12]  988 	mov	a,_bp
      0002E9 24 0A            [12]  989 	add	a,#0x0a
      0002EB F9               [12]  990 	mov	r1,a
      0002EC FA               [12]  991 	mov	r2,a
      0002ED 7B 00            [12]  992 	mov	r3,#0x00
      0002EF 7C 40            [12]  993 	mov	r4,#0x40
      0002F1 C0 01            [24]  994 	push	ar1
      0002F3 74 04            [12]  995 	mov	a,#0x04
      0002F5 C0 E0            [24]  996 	push	acc
      0002F7 E4               [12]  997 	clr	a
      0002F8 C0 E0            [24]  998 	push	acc
      0002FA C0 05            [24]  999 	push	ar5
      0002FC C0 06            [24] 1000 	push	ar6
      0002FE C0 07            [24] 1001 	push	ar7
      000300 8A 82            [24] 1002 	mov	dpl,r2
      000302 8B 83            [24] 1003 	mov	dph,r3
      000304 8C F0            [24] 1004 	mov	b,r4
      000306 12r00r00         [24] 1005 	lcall	___memcpy
      000309 E5 81            [12] 1006 	mov	a,sp
      00030B 24 FB            [12] 1007 	add	a,#0xfb
      00030D F5 81            [12] 1008 	mov	sp,a
      00030F D0 01            [24] 1009 	pop	ar1
                                   1010 ;	walk.c:130: process:
      000311 E5*00            [12] 1011 	mov	a,_bp
      000313 24 06            [12] 1012 	add	a,#0x06
      000315 F8               [12] 1013 	mov	r0,a
      000316 A6 01            [24] 1014 	mov	@r0,ar1
      000318 E5*00            [12] 1015 	mov	a,_bp
      00031A 24 0E            [12] 1016 	add	a,#0x0e
      00031C FE               [12] 1017 	mov	r6,a
      00031D E5*00            [12] 1018 	mov	a,_bp
      00031F 24 03            [12] 1019 	add	a,#0x03
      000321 F8               [12] 1020 	mov	r0,a
      000322 A6 01            [24] 1021 	mov	@r0,ar1
      000324 E5*00            [12] 1022 	mov	a,_bp
      000326 24 05            [12] 1023 	add	a,#0x05
      000328 F8               [12] 1024 	mov	r0,a
      000329 A6 01            [24] 1025 	mov	@r0,ar1
      00032B E5*00            [12] 1026 	mov	a,_bp
      00032D 24 04            [12] 1027 	add	a,#0x04
      00032F F8               [12] 1028 	mov	r0,a
      000330 A6 06            [24] 1029 	mov	@r0,ar6
      000332 89 02            [24] 1030 	mov	ar2,r1
      000334 A8*00            [24] 1031 	mov	r0,_bp
      000336 08               [12] 1032 	inc	r0
      000337 A6 06            [24] 1033 	mov	@r0,ar6
      000339 A8*00            [24] 1034 	mov	r0,_bp
      00033B 08               [12] 1035 	inc	r0
      00033C 08               [12] 1036 	inc	r0
      00033D A6 01            [24] 1037 	mov	@r0,ar1
      00033F 74 02            [12] 1038 	mov	a,#0x02
      000341 29               [12] 1039 	add	a,r1
      000342 F8               [12] 1040 	mov	r0,a
      000343                       1041 00101$:
                                   1042 ;	walk.c:131: g[cur.r][cur.c] = 0xaa;
      000343 C0 02            [24] 1043 	push	ar2
      000345 87 02            [24] 1044 	mov	ar2,@r1
      000347 09               [12] 1045 	inc	r1
      000348 87 05            [24] 1046 	mov	ar5,@r1
      00034A 19               [12] 1047 	dec	r1
      00034B C0 06            [24] 1048 	push	ar6
      00034D C0 01            [24] 1049 	push	ar1
      00034F C0 00            [24] 1050 	push	ar0
      000351 C0 02            [24] 1051 	push	ar2
      000353 C0 05            [24] 1052 	push	ar5
      000355 90 00 C9         [24] 1053 	mov	dptr,#0x00c9
      000358 12r00r00         [24] 1054 	lcall	__mulint
      00035B AA 82            [24] 1055 	mov	r2,dpl
      00035D AD 83            [24] 1056 	mov	r5,dph
      00035F 15 81            [12] 1057 	dec	sp
      000361 15 81            [12] 1058 	dec	sp
      000363 D0 00            [24] 1059 	pop	ar0
      000365 D0 01            [24] 1060 	pop	ar1
      000367 EA               [12] 1061 	mov	a,r2
      000368 24r00            [12] 1062 	add	a,#_g
      00036A FF               [12] 1063 	mov	r7,a
      00036B ED               [12] 1064 	mov	a,r5
      00036C 34s00            [12] 1065 	addc	a,#(_g >> 8)
      00036E FC               [12] 1066 	mov	r4,a
      00036F 86 02            [24] 1067 	mov	ar2,@r0
      000371 08               [12] 1068 	inc	r0
      000372 86 05            [24] 1069 	mov	ar5,@r0
      000374 18               [12] 1070 	dec	r0
      000375 EA               [12] 1071 	mov	a,r2
      000376 2F               [12] 1072 	add	a,r7
      000377 F5 82            [12] 1073 	mov	dpl,a
      000379 ED               [12] 1074 	mov	a,r5
      00037A 3C               [12] 1075 	addc	a,r4
      00037B F5 83            [12] 1076 	mov	dph,a
      00037D 74 AA            [12] 1077 	mov	a,#0xaa
      00037F F0               [24] 1078 	movx	@dptr,a
                                   1079 ;	walk.c:132: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000380 86 02            [24] 1080 	mov	ar2,@r0
      000382 08               [12] 1081 	inc	r0
      000383 86 05            [24] 1082 	mov	ar5,@r0
      000385 18               [12] 1083 	dec	r0
      000386 74 01            [12] 1084 	mov	a,#0x01
      000388 2A               [12] 1085 	add	a,r2
      000389 FF               [12] 1086 	mov	r7,a
      00038A E4               [12] 1087 	clr	a
      00038B 3D               [12] 1088 	addc	a,r5
      00038C FC               [12] 1089 	mov	r4,a
      00038D 87 02            [24] 1090 	mov	ar2,@r1
      00038F 09               [12] 1091 	inc	r1
      000390 87 05            [24] 1092 	mov	ar5,@r1
      000392 19               [12] 1093 	dec	r1
      000393 74 04            [12] 1094 	mov	a,#0x04
      000395 2A               [12] 1095 	add	a,r2
      000396 FA               [12] 1096 	mov	r2,a
      000397 E4               [12] 1097 	clr	a
      000398 3D               [12] 1098 	addc	a,r5
      000399 FD               [12] 1099 	mov	r5,a
      00039A C0 02            [24] 1100 	push	ar2
      00039C C0 01            [24] 1101 	push	ar1
      00039E C0 00            [24] 1102 	push	ar0
      0003A0 C0 07            [24] 1103 	push	ar7
      0003A2 C0 04            [24] 1104 	push	ar4
      0003A4 C0 02            [24] 1105 	push	ar2
      0003A6 C0 05            [24] 1106 	push	ar5
      0003A8 74r0D            [12] 1107 	mov	a,#___str_1
      0003AA C0 E0            [24] 1108 	push	acc
      0003AC 74s00            [12] 1109 	mov	a,#(___str_1 >> 8)
      0003AE C0 E0            [24] 1110 	push	acc
      0003B0 74 80            [12] 1111 	mov	a,#0x80
      0003B2 C0 E0            [24] 1112 	push	acc
      0003B4 12r00r00         [24] 1113 	lcall	_printf
      0003B7 E5 81            [12] 1114 	mov	a,sp
      0003B9 24 F9            [12] 1115 	add	a,#0xf9
      0003BB F5 81            [12] 1116 	mov	sp,a
      0003BD D0 00            [24] 1117 	pop	ar0
      0003BF D0 01            [24] 1118 	pop	ar1
      0003C1 D0 02            [24] 1119 	pop	ar2
      0003C3 D0 06            [24] 1120 	pop	ar6
                                   1121 ;	walk.c:161: return;
      0003C5 D0 02            [24] 1122 	pop	ar2
                                   1123 ;	walk.c:134: next:
      0003C7                       1124 00102$:
                                   1125 ;	walk.c:135: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003C7 C0 02            [24] 1126 	push	ar2
      0003C9 86 07            [24] 1127 	mov	ar7,@r0
      0003CB 08               [12] 1128 	inc	r0
      0003CC 86 04            [24] 1129 	mov	ar4,@r0
      0003CE 18               [12] 1130 	dec	r0
      0003CF 87 02            [24] 1131 	mov	ar2,@r1
      0003D1 09               [12] 1132 	inc	r1
      0003D2 87 05            [24] 1133 	mov	ar5,@r1
      0003D4 19               [12] 1134 	dec	r1
      0003D5 C0 06            [24] 1135 	push	ar6
      0003D7 C0 02            [24] 1136 	push	ar2
      0003D9 C0 01            [24] 1137 	push	ar1
      0003DB C0 00            [24] 1138 	push	ar0
      0003DD C0 07            [24] 1139 	push	ar7
      0003DF C0 04            [24] 1140 	push	ar4
      0003E1 C0 02            [24] 1141 	push	ar2
      0003E3 C0 05            [24] 1142 	push	ar5
      0003E5 90rBCr70         [24] 1143 	mov	dptr,#_sp
      0003E8 E0               [24] 1144 	movx	a,@dptr
      0003E9 C0 E0            [24] 1145 	push	acc
      0003EB A3               [24] 1146 	inc	dptr
      0003EC E0               [24] 1147 	movx	a,@dptr
      0003ED C0 E0            [24] 1148 	push	acc
      0003EF 74r17            [12] 1149 	mov	a,#___str_2
      0003F1 C0 E0            [24] 1150 	push	acc
      0003F3 74s00            [12] 1151 	mov	a,#(___str_2 >> 8)
      0003F5 C0 E0            [24] 1152 	push	acc
      0003F7 74 80            [12] 1153 	mov	a,#0x80
      0003F9 C0 E0            [24] 1154 	push	acc
      0003FB 12r00r00         [24] 1155 	lcall	_printf
      0003FE E5 81            [12] 1156 	mov	a,sp
      000400 24 F7            [12] 1157 	add	a,#0xf7
      000402 F5 81            [12] 1158 	mov	sp,a
      000404 D0 00            [24] 1159 	pop	ar0
      000406 D0 01            [24] 1160 	pop	ar1
      000408 D0 02            [24] 1161 	pop	ar2
      00040A D0 06            [24] 1162 	pop	ar6
                                   1163 ;	walk.c:137: for (j = 0, f = 0; j < NMAX; j++) {
      00040C 7B 00            [12] 1164 	mov	r3,#0x00
      00040E C0 00            [24] 1165 	push	ar0
      000410 E5*00            [12] 1166 	mov	a,_bp
      000412 24 12            [12] 1167 	add	a,#0x12
      000414 F8               [12] 1168 	mov	r0,a
      000415 76 00            [12] 1169 	mov	@r0,#0x00
      000417 D0 00            [24] 1170 	pop	ar0
                                   1171 ;	walk.c:161: return;
      000419 D0 02            [24] 1172 	pop	ar2
                                   1173 ;	walk.c:137: for (j = 0, f = 0; j < NMAX; j++) {
      00041B                       1174 00120$:
      00041B C0 00            [24] 1175 	push	ar0
      00041D E5*00            [12] 1176 	mov	a,_bp
      00041F 24 12            [12] 1177 	add	a,#0x12
      000421 F8               [12] 1178 	mov	r0,a
      000422 B6 10 00         [24] 1179 	cjne	@r0,#0x10,00160$
      000425                       1180 00160$:
      000425 D0 00            [24] 1181 	pop	ar0
      000427 40 03            [24] 1182 	jc	00161$
      000429 02r04rA9         [24] 1183 	ljmp	00106$
      00042C                       1184 00161$:
                                   1185 ;	walk.c:138: if (!update(&t, &cur, j)) continue;
      00042C C0 02            [24] 1186 	push	ar2
      00042E C0 00            [24] 1187 	push	ar0
      000430 E5*00            [12] 1188 	mov	a,_bp
      000432 24 06            [12] 1189 	add	a,#0x06
      000434 F8               [12] 1190 	mov	r0,a
      000435 C0 01            [24] 1191 	push	ar1
      000437 E5*00            [12] 1192 	mov	a,_bp
      000439 24 07            [12] 1193 	add	a,#0x07
      00043B F9               [12] 1194 	mov	r1,a
      00043C E6               [12] 1195 	mov	a,@r0
      00043D F7               [12] 1196 	mov	@r1,a
      00043E 09               [12] 1197 	inc	r1
      00043F 77 00            [12] 1198 	mov	@r1,#0x00
      000441 09               [12] 1199 	inc	r1
      000442 77 40            [12] 1200 	mov	@r1,#0x40
      000444 D0 01            [24] 1201 	pop	ar1
      000446 D0 00            [24] 1202 	pop	ar0
      000448 8E 04            [24] 1203 	mov	ar4,r6
      00044A 7D 00            [12] 1204 	mov	r5,#0x00
      00044C 7F 40            [12] 1205 	mov	r7,#0x40
      00044E C0 06            [24] 1206 	push	ar6
      000450 C0 03            [24] 1207 	push	ar3
      000452 C0 02            [24] 1208 	push	ar2
      000454 C0 01            [24] 1209 	push	ar1
      000456 C0 00            [24] 1210 	push	ar0
      000458 85 00 F0         [24] 1211 	mov	b,ar0
      00045B E5*00            [12] 1212 	mov	a,_bp
      00045D 24 12            [12] 1213 	add	a,#0x12
      00045F F8               [12] 1214 	mov	r0,a
      000460 E6               [12] 1215 	mov	a,@r0
      000461 C0 E0            [24] 1216 	push	acc
      000463 A8 F0            [24] 1217 	mov	r0,b
      000465 85 00 F0         [24] 1218 	mov	b,ar0
      000468 E5*00            [12] 1219 	mov	a,_bp
      00046A 24 07            [12] 1220 	add	a,#0x07
      00046C F8               [12] 1221 	mov	r0,a
      00046D E6               [12] 1222 	mov	a,@r0
      00046E C0 E0            [24] 1223 	push	acc
      000470 08               [12] 1224 	inc	r0
      000471 E6               [12] 1225 	mov	a,@r0
      000472 C0 E0            [24] 1226 	push	acc
      000474 08               [12] 1227 	inc	r0
      000475 E6               [12] 1228 	mov	a,@r0
      000476 C0 E0            [24] 1229 	push	acc
      000478 8C 82            [24] 1230 	mov	dpl,r4
      00047A 8D 83            [24] 1231 	mov	dph,r5
      00047C 8F F0            [24] 1232 	mov	b,r7
      00047E 12r00r4A         [24] 1233 	lcall	_update
      000481 AD 82            [24] 1234 	mov	r5,dpl
      000483 AF 83            [24] 1235 	mov	r7,dph
      000485 E5 81            [12] 1236 	mov	a,sp
      000487 24 FC            [12] 1237 	add	a,#0xfc
      000489 F5 81            [12] 1238 	mov	sp,a
      00048B D0 00            [24] 1239 	pop	ar0
      00048D D0 01            [24] 1240 	pop	ar1
      00048F D0 02            [24] 1241 	pop	ar2
      000491 D0 03            [24] 1242 	pop	ar3
      000493 D0 06            [24] 1243 	pop	ar6
      000495 D0 02            [24] 1244 	pop	ar2
      000497 ED               [12] 1245 	mov	a,r5
      000498 4F               [12] 1246 	orl	a,r7
      000499 60 01            [24] 1247 	jz	00105$
                                   1248 ;	walk.c:139: f++;
      00049B 0B               [12] 1249 	inc	r3
      00049C                       1250 00105$:
                                   1251 ;	walk.c:137: for (j = 0, f = 0; j < NMAX; j++) {
      00049C C0 00            [24] 1252 	push	ar0
      00049E E5*00            [12] 1253 	mov	a,_bp
      0004A0 24 12            [12] 1254 	add	a,#0x12
      0004A2 F8               [12] 1255 	mov	r0,a
      0004A3 06               [12] 1256 	inc	@r0
      0004A4 D0 00            [24] 1257 	pop	ar0
      0004A6 02r04r1B         [24] 1258 	ljmp	00120$
      0004A9                       1259 00106$:
                                   1260 ;	walk.c:142: if (f) {
      0004A9 EB               [12] 1261 	mov	a,r3
      0004AA 70 03            [24] 1262 	jnz	00163$
      0004AC 02r05rE7         [24] 1263 	ljmp	00115$
      0004AF                       1264 00163$:
                                   1265 ;	walk.c:143: while (1) {
      0004AF                       1266 00112$:
                                   1267 ;	walk.c:144: j = rand() % NMAX;
      0004AF C0 02            [24] 1268 	push	ar2
      0004B1 C0 06            [24] 1269 	push	ar6
      0004B3 C0 02            [24] 1270 	push	ar2
      0004B5 C0 01            [24] 1271 	push	ar1
      0004B7 C0 00            [24] 1272 	push	ar0
      0004B9 12r00r00         [24] 1273 	lcall	_rand
      0004BC AD 82            [24] 1274 	mov	r5,dpl
      0004BE AF 83            [24] 1275 	mov	r7,dph
      0004C0 74 10            [12] 1276 	mov	a,#0x10
      0004C2 C0 E0            [24] 1277 	push	acc
      0004C4 E4               [12] 1278 	clr	a
      0004C5 C0 E0            [24] 1279 	push	acc
      0004C7 8D 82            [24] 1280 	mov	dpl,r5
      0004C9 8F 83            [24] 1281 	mov	dph,r7
      0004CB 12r00r00         [24] 1282 	lcall	__modsint
      0004CE AD 82            [24] 1283 	mov	r5,dpl
      0004D0 15 81            [12] 1284 	dec	sp
      0004D2 15 81            [12] 1285 	dec	sp
      0004D4 D0 00            [24] 1286 	pop	ar0
      0004D6 D0 01            [24] 1287 	pop	ar1
      0004D8 D0 02            [24] 1288 	pop	ar2
      0004DA D0 06            [24] 1289 	pop	ar6
      0004DC 8D 04            [24] 1290 	mov	ar4,r5
                                   1291 ;	walk.c:145: if (!update(&t, &cur, j)) continue;
      0004DE C0 00            [24] 1292 	push	ar0
      0004E0 E5*00            [12] 1293 	mov	a,_bp
      0004E2 24 05            [12] 1294 	add	a,#0x05
      0004E4 F8               [12] 1295 	mov	r0,a
      0004E5 C0 01            [24] 1296 	push	ar1
      0004E7 E5*00            [12] 1297 	mov	a,_bp
      0004E9 24 07            [12] 1298 	add	a,#0x07
      0004EB F9               [12] 1299 	mov	r1,a
      0004EC E6               [12] 1300 	mov	a,@r0
      0004ED F7               [12] 1301 	mov	@r1,a
      0004EE 09               [12] 1302 	inc	r1
      0004EF 77 00            [12] 1303 	mov	@r1,#0x00
      0004F1 09               [12] 1304 	inc	r1
      0004F2 77 40            [12] 1305 	mov	@r1,#0x40
      0004F4 D0 01            [24] 1306 	pop	ar1
      0004F6 E5*00            [12] 1307 	mov	a,_bp
      0004F8 24 04            [12] 1308 	add	a,#0x04
      0004FA F8               [12] 1309 	mov	r0,a
      0004FB 86 02            [24] 1310 	mov	ar2,@r0
      0004FD 7D 00            [12] 1311 	mov	r5,#0x00
      0004FF 7F 40            [12] 1312 	mov	r7,#0x40
      000501 D0 00            [24] 1313 	pop	ar0
      000503 C0 06            [24] 1314 	push	ar6
      000505 C0 02            [24] 1315 	push	ar2
      000507 C0 01            [24] 1316 	push	ar1
      000509 C0 00            [24] 1317 	push	ar0
      00050B C0 04            [24] 1318 	push	ar4
      00050D 85 00 F0         [24] 1319 	mov	b,ar0
      000510 E5*00            [12] 1320 	mov	a,_bp
      000512 24 07            [12] 1321 	add	a,#0x07
      000514 F8               [12] 1322 	mov	r0,a
      000515 E6               [12] 1323 	mov	a,@r0
      000516 C0 E0            [24] 1324 	push	acc
      000518 08               [12] 1325 	inc	r0
      000519 E6               [12] 1326 	mov	a,@r0
      00051A C0 E0            [24] 1327 	push	acc
      00051C 08               [12] 1328 	inc	r0
      00051D E6               [12] 1329 	mov	a,@r0
      00051E C0 E0            [24] 1330 	push	acc
      000520 8A 82            [24] 1331 	mov	dpl,r2
      000522 8D 83            [24] 1332 	mov	dph,r5
      000524 8F F0            [24] 1333 	mov	b,r7
      000526 12r00r4A         [24] 1334 	lcall	_update
      000529 AD 82            [24] 1335 	mov	r5,dpl
      00052B AF 83            [24] 1336 	mov	r7,dph
      00052D E5 81            [12] 1337 	mov	a,sp
      00052F 24 FC            [12] 1338 	add	a,#0xfc
      000531 F5 81            [12] 1339 	mov	sp,a
      000533 D0 00            [24] 1340 	pop	ar0
      000535 D0 01            [24] 1341 	pop	ar1
      000537 D0 02            [24] 1342 	pop	ar2
      000539 D0 06            [24] 1343 	pop	ar6
      00053B D0 02            [24] 1344 	pop	ar2
      00053D ED               [12] 1345 	mov	a,r5
      00053E 4F               [12] 1346 	orl	a,r7
      00053F 70 03            [24] 1347 	jnz	00164$
      000541 02r04rAF         [24] 1348 	ljmp	00112$
      000544                       1349 00164$:
                                   1350 ;	walk.c:147: if (!stpush(&cur)) bang();
      000544 8A 04            [24] 1351 	mov	ar4,r2
      000546 7D 00            [12] 1352 	mov	r5,#0x00
      000548 7F 40            [12] 1353 	mov	r7,#0x40
      00054A 8C 82            [24] 1354 	mov	dpl,r4
      00054C 8D 83            [24] 1355 	mov	dph,r5
      00054E 8F F0            [24] 1356 	mov	b,r7
      000550 C0 06            [24] 1357 	push	ar6
      000552 C0 02            [24] 1358 	push	ar2
      000554 C0 01            [24] 1359 	push	ar1
      000556 C0 00            [24] 1360 	push	ar0
      000558 12r0Ar3A         [24] 1361 	lcall	_stpush
      00055B E5 82            [12] 1362 	mov	a,dpl
      00055D 85 83 F0         [24] 1363 	mov	b,dph
      000560 D0 00            [24] 1364 	pop	ar0
      000562 D0 01            [24] 1365 	pop	ar1
      000564 D0 02            [24] 1366 	pop	ar2
      000566 D0 06            [24] 1367 	pop	ar6
      000568 45 F0            [12] 1368 	orl	a,b
      00056A 70 13            [24] 1369 	jnz	00110$
      00056C C0 06            [24] 1370 	push	ar6
      00056E C0 02            [24] 1371 	push	ar2
      000570 C0 01            [24] 1372 	push	ar1
      000572 C0 00            [24] 1373 	push	ar0
      000574 12r00r1D         [24] 1374 	lcall	_bang
      000577 D0 00            [24] 1375 	pop	ar0
      000579 D0 01            [24] 1376 	pop	ar1
      00057B D0 02            [24] 1377 	pop	ar2
      00057D D0 06            [24] 1378 	pop	ar6
      00057F                       1379 00110$:
                                   1380 ;	walk.c:148: cur = t;
      00057F C0 02            [24] 1381 	push	ar2
      000581 C0 00            [24] 1382 	push	ar0
      000583 A8*00            [24] 1383 	mov	r0,_bp
      000585 08               [12] 1384 	inc	r0
      000586 C0 01            [24] 1385 	push	ar1
      000588 E5*00            [12] 1386 	mov	a,_bp
      00058A 24 07            [12] 1387 	add	a,#0x07
      00058C F9               [12] 1388 	mov	r1,a
      00058D E6               [12] 1389 	mov	a,@r0
      00058E F7               [12] 1390 	mov	@r1,a
      00058F 09               [12] 1391 	inc	r1
      000590 77 00            [12] 1392 	mov	@r1,#0x00
      000592 09               [12] 1393 	inc	r1
      000593 77 40            [12] 1394 	mov	@r1,#0x40
      000595 D0 01            [24] 1395 	pop	ar1
      000597 A8*00            [24] 1396 	mov	r0,_bp
      000599 08               [12] 1397 	inc	r0
      00059A 08               [12] 1398 	inc	r0
      00059B 86 02            [24] 1399 	mov	ar2,@r0
      00059D 7B 00            [12] 1400 	mov	r3,#0x00
      00059F 7F 40            [12] 1401 	mov	r7,#0x40
      0005A1 D0 00            [24] 1402 	pop	ar0
      0005A3 C0 06            [24] 1403 	push	ar6
      0005A5 C0 02            [24] 1404 	push	ar2
      0005A7 C0 01            [24] 1405 	push	ar1
      0005A9 C0 00            [24] 1406 	push	ar0
      0005AB 74 04            [12] 1407 	mov	a,#0x04
      0005AD C0 E0            [24] 1408 	push	acc
      0005AF E4               [12] 1409 	clr	a
      0005B0 C0 E0            [24] 1410 	push	acc
      0005B2 85 00 F0         [24] 1411 	mov	b,ar0
      0005B5 E5*00            [12] 1412 	mov	a,_bp
      0005B7 24 07            [12] 1413 	add	a,#0x07
      0005B9 F8               [12] 1414 	mov	r0,a
      0005BA E6               [12] 1415 	mov	a,@r0
      0005BB C0 E0            [24] 1416 	push	acc
      0005BD 08               [12] 1417 	inc	r0
      0005BE E6               [12] 1418 	mov	a,@r0
      0005BF C0 E0            [24] 1419 	push	acc
      0005C1 08               [12] 1420 	inc	r0
      0005C2 E6               [12] 1421 	mov	a,@r0
      0005C3 C0 E0            [24] 1422 	push	acc
      0005C5 8A 82            [24] 1423 	mov	dpl,r2
      0005C7 8B 83            [24] 1424 	mov	dph,r3
      0005C9 8F F0            [24] 1425 	mov	b,r7
      0005CB 12r00r00         [24] 1426 	lcall	___memcpy
      0005CE E5 81            [12] 1427 	mov	a,sp
      0005D0 24 FB            [12] 1428 	add	a,#0xfb
      0005D2 F5 81            [12] 1429 	mov	sp,a
                                   1430 ;	walk.c:149: flashOE(OE76_MASK7);
      0005D4 75 82 80         [24] 1431 	mov	dpl,#0x80
      0005D7 12r00r29         [24] 1432 	lcall	_flashOE
      0005DA D0 00            [24] 1433 	pop	ar0
      0005DC D0 01            [24] 1434 	pop	ar1
      0005DE D0 02            [24] 1435 	pop	ar2
      0005E0 D0 06            [24] 1436 	pop	ar6
                                   1437 ;	walk.c:150: goto process;
      0005E2 D0 02            [24] 1438 	pop	ar2
      0005E4 02r03r43         [24] 1439 	ljmp	00101$
      0005E7                       1440 00115$:
                                   1441 ;	walk.c:154: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005E7 86 05            [24] 1442 	mov	ar5,@r0
      0005E9 08               [12] 1443 	inc	r0
      0005EA 86 07            [24] 1444 	mov	ar7,@r0
      0005EC 18               [12] 1445 	dec	r0
      0005ED 0D               [12] 1446 	inc	r5
      0005EE BD 00 01         [24] 1447 	cjne	r5,#0x00,00166$
      0005F1 0F               [12] 1448 	inc	r7
      0005F2                       1449 00166$:
      0005F2 87 03            [24] 1450 	mov	ar3,@r1
      0005F4 09               [12] 1451 	inc	r1
      0005F5 87 04            [24] 1452 	mov	ar4,@r1
      0005F7 19               [12] 1453 	dec	r1
      0005F8 74 04            [12] 1454 	mov	a,#0x04
      0005FA 2B               [12] 1455 	add	a,r3
      0005FB FB               [12] 1456 	mov	r3,a
      0005FC E4               [12] 1457 	clr	a
      0005FD 3C               [12] 1458 	addc	a,r4
      0005FE FC               [12] 1459 	mov	r4,a
      0005FF C0 06            [24] 1460 	push	ar6
      000601 C0 02            [24] 1461 	push	ar2
      000603 C0 01            [24] 1462 	push	ar1
      000605 C0 00            [24] 1463 	push	ar0
      000607 C0 05            [24] 1464 	push	ar5
      000609 C0 07            [24] 1465 	push	ar7
      00060B C0 03            [24] 1466 	push	ar3
      00060D C0 04            [24] 1467 	push	ar4
      00060F 74r2A            [12] 1468 	mov	a,#___str_3
      000611 C0 E0            [24] 1469 	push	acc
      000613 74s00            [12] 1470 	mov	a,#(___str_3 >> 8)
      000615 C0 E0            [24] 1471 	push	acc
      000617 74 80            [12] 1472 	mov	a,#0x80
      000619 C0 E0            [24] 1473 	push	acc
      00061B 12r00r00         [24] 1474 	lcall	_printf
      00061E E5 81            [12] 1475 	mov	a,sp
      000620 24 F9            [12] 1476 	add	a,#0xf9
      000622 F5 81            [12] 1477 	mov	sp,a
      000624 D0 00            [24] 1478 	pop	ar0
      000626 D0 01            [24] 1479 	pop	ar1
      000628 D0 02            [24] 1480 	pop	ar2
      00062A D0 06            [24] 1481 	pop	ar6
                                   1482 ;	walk.c:156: if (!stpop(&cur)) goto term;
      00062C C0 00            [24] 1483 	push	ar0
      00062E E5*00            [12] 1484 	mov	a,_bp
      000630 24 03            [12] 1485 	add	a,#0x03
      000632 F8               [12] 1486 	mov	r0,a
      000633 86 04            [24] 1487 	mov	ar4,@r0
      000635 7D 00            [12] 1488 	mov	r5,#0x00
      000637 7F 40            [12] 1489 	mov	r7,#0x40
      000639 D0 00            [24] 1490 	pop	ar0
      00063B 8C 82            [24] 1491 	mov	dpl,r4
      00063D 8D 83            [24] 1492 	mov	dph,r5
      00063F 8F F0            [24] 1493 	mov	b,r7
      000641 C0 06            [24] 1494 	push	ar6
      000643 C0 02            [24] 1495 	push	ar2
      000645 C0 01            [24] 1496 	push	ar1
      000647 C0 00            [24] 1497 	push	ar0
      000649 12r0Ar9B         [24] 1498 	lcall	_stpop
      00064C E5 82            [12] 1499 	mov	a,dpl
      00064E 85 83 F0         [24] 1500 	mov	b,dph
      000651 D0 00            [24] 1501 	pop	ar0
      000653 D0 01            [24] 1502 	pop	ar1
      000655 D0 02            [24] 1503 	pop	ar2
      000657 D0 06            [24] 1504 	pop	ar6
      000659 45 F0            [12] 1505 	orl	a,b
      00065B 60 19            [24] 1506 	jz	00118$
                                   1507 ;	walk.c:157: flashOE(OE76_MASK6);
      00065D 75 82 40         [24] 1508 	mov	dpl,#0x40
      000660 C0 06            [24] 1509 	push	ar6
      000662 C0 02            [24] 1510 	push	ar2
      000664 C0 01            [24] 1511 	push	ar1
      000666 C0 00            [24] 1512 	push	ar0
      000668 12r00r29         [24] 1513 	lcall	_flashOE
      00066B D0 00            [24] 1514 	pop	ar0
      00066D D0 01            [24] 1515 	pop	ar1
      00066F D0 02            [24] 1516 	pop	ar2
      000671 D0 06            [24] 1517 	pop	ar6
                                   1518 ;	walk.c:158: goto next;
      000673 02r03rC7         [24] 1519 	ljmp	00102$
                                   1520 ;	walk.c:160: term:
      000676                       1521 00118$:
                                   1522 ;	walk.c:161: return;
                                   1523 ;	walk.c:162: }
      000676 85*00 81         [24] 1524 	mov	sp,_bp
      000679 D0*00            [24] 1525 	pop	_bp
      00067B 22               [24] 1526 	ret
                                   1527 ;------------------------------------------------------------
                                   1528 ;Allocation info for local variables in function 'main'
                                   1529 ;------------------------------------------------------------
                                   1530 ;initial                   Allocated to stack - _bp +7
                                   1531 ;N                         Allocated to stack - _bp +11
                                   1532 ;i                         Allocated to stack - _bp +5
                                   1533 ;j                         Allocated to registers r2 r6 
                                   1534 ;sloc0                     Allocated to stack - _bp +1
                                   1535 ;sloc1                     Allocated to stack - _bp +3
                                   1536 ;sloc2                     Allocated to stack - _bp +15
                                   1537 ;------------------------------------------------------------
                                   1538 ;	walk.c:164: int main(void) {
                                   1539 ;	-----------------------------------------
                                   1540 ;	 function main
                                   1541 ;	-----------------------------------------
      00067C                       1542 _main:
      00067C C0*00            [24] 1543 	push	_bp
      00067E E5 81            [12] 1544 	mov	a,sp
      000680 F5*00            [12] 1545 	mov	_bp,a
      000682 24 0C            [12] 1546 	add	a,#0x0c
      000684 F5 81            [12] 1547 	mov	sp,a
                                   1548 ;	walk.c:169: i0 = 1u;
      000686 78r00            [12] 1549 	mov	r0,#_i0
      000688 76 01            [12] 1550 	mov	@r0,#0x01
                                   1551 ;	walk.c:171: P1_7 = 1;
                                   1552 ;	assignBit
      00068A D2 97            [12] 1553 	setb	_P1_7
                                   1554 ;	walk.c:172: IT0 = 1;
                                   1555 ;	assignBit
      00068C D2 88            [12] 1556 	setb	_IT0
                                   1557 ;	walk.c:173: EX0 = 1;
                                   1558 ;	assignBit
      00068E D2 A8            [12] 1559 	setb	_EX0
                                   1560 ;	walk.c:174: EA = 1;
                                   1561 ;	assignBit
      000690 D2 AF            [12] 1562 	setb	_EA
                                   1563 ;	walk.c:176: srand(*R);
      000692 90r00r00         [24] 1564 	mov	dptr,#_R
      000695 E0               [24] 1565 	movx	a,@dptr
      000696 FE               [12] 1566 	mov	r6,a
      000697 A3               [24] 1567 	inc	dptr
      000698 E0               [24] 1568 	movx	a,@dptr
      000699 FF               [12] 1569 	mov	r7,a
      00069A 8E 82            [24] 1570 	mov	dpl,r6
      00069C 8F 83            [24] 1571 	mov	dph,r7
      00069E E0               [24] 1572 	movx	a,@dptr
      00069F FE               [12] 1573 	mov	r6,a
      0006A0 A3               [24] 1574 	inc	dptr
      0006A1 E0               [24] 1575 	movx	a,@dptr
      0006A2 FF               [12] 1576 	mov	r7,a
      0006A3 8E 82            [24] 1577 	mov	dpl,r6
      0006A5 8F 83            [24] 1578 	mov	dph,r7
      0006A7 12r00r00         [24] 1579 	lcall	_srand
                                   1580 ;	walk.c:177: stinit();
      0006AA 12r0Ar31         [24] 1581 	lcall	_stinit
                                   1582 ;	walk.c:179: puts("\033[2J\033[?25l");
      0006AD 90r00r34         [24] 1583 	mov	dptr,#___str_4
      0006B0 75 F0 80         [24] 1584 	mov	b,#0x80
      0006B3 12r00r00         [24] 1585 	lcall	_puts
                                   1586 ;	walk.c:181: while (i0) {
      0006B6 E5*00            [12] 1587 	mov	a,_bp
      0006B8 24 07            [12] 1588 	add	a,#0x07
      0006BA F9               [12] 1589 	mov	r1,a
      0006BB FF               [12] 1590 	mov	r7,a
      0006BC E5*00            [12] 1591 	mov	a,_bp
      0006BE 24 0B            [12] 1592 	add	a,#0x0b
      0006C0 F8               [12] 1593 	mov	r0,a
      0006C1 E4               [12] 1594 	clr	a
      0006C2 F6               [12] 1595 	mov	@r0,a
      0006C3 08               [12] 1596 	inc	r0
      0006C4 F6               [12] 1597 	mov	@r0,a
      0006C5                       1598 00108$:
      0006C5 78r00            [12] 1599 	mov	r0,#_i0
      0006C7 E6               [12] 1600 	mov	a,@r0
      0006C8 70 03            [24] 1601 	jnz	00181$
      0006CA 02r0Ar1A         [24] 1602 	ljmp	00110$
      0006CD                       1603 00181$:
                                   1604 ;	walk.c:182: for (i = 0; i < ROWS; i++)
      0006CD 7B 00            [12] 1605 	mov	r3,#0x00
      0006CF 7C 00            [12] 1606 	mov	r4,#0x00
      0006D1 A8*00            [24] 1607 	mov	r0,_bp
      0006D3 08               [12] 1608 	inc	r0
      0006D4 E4               [12] 1609 	clr	a
      0006D5 F6               [12] 1610 	mov	@r0,a
      0006D6 08               [12] 1611 	inc	r0
      0006D7 F6               [12] 1612 	mov	@r0,a
                                   1613 ;	walk.c:183: for (j = 0; j < COLS; j++)
      0006D8                       1614 00124$:
      0006D8 A8*00            [24] 1615 	mov	r0,_bp
      0006DA 08               [12] 1616 	inc	r0
      0006DB C0 01            [24] 1617 	push	ar1
      0006DD E5*00            [12] 1618 	mov	a,_bp
      0006DF 24 03            [12] 1619 	add	a,#0x03
      0006E1 F9               [12] 1620 	mov	r1,a
      0006E2 E6               [12] 1621 	mov	a,@r0
      0006E3 24r00            [12] 1622 	add	a,#_g
      0006E5 F7               [12] 1623 	mov	@r1,a
      0006E6 08               [12] 1624 	inc	r0
      0006E7 E6               [12] 1625 	mov	a,@r0
      0006E8 34s00            [12] 1626 	addc	a,#(_g >> 8)
      0006EA 09               [12] 1627 	inc	r1
      0006EB F7               [12] 1628 	mov	@r1,a
      0006EC D0 01            [24] 1629 	pop	ar1
      0006EE 7A 00            [12] 1630 	mov	r2,#0x00
      0006F0 7E 00            [12] 1631 	mov	r6,#0x00
      0006F2                       1632 00111$:
                                   1633 ;	walk.c:184: g[i][j] = 0x55;
      0006F2 E5*00            [12] 1634 	mov	a,_bp
      0006F4 24 03            [12] 1635 	add	a,#0x03
      0006F6 F8               [12] 1636 	mov	r0,a
      0006F7 EA               [12] 1637 	mov	a,r2
      0006F8 26               [12] 1638 	add	a,@r0
      0006F9 F5 82            [12] 1639 	mov	dpl,a
      0006FB EE               [12] 1640 	mov	a,r6
      0006FC 08               [12] 1641 	inc	r0
      0006FD 36               [12] 1642 	addc	a,@r0
      0006FE F5 83            [12] 1643 	mov	dph,a
      000700 74 55            [12] 1644 	mov	a,#0x55
      000702 F0               [24] 1645 	movx	@dptr,a
                                   1646 ;	walk.c:183: for (j = 0; j < COLS; j++)
      000703 0A               [12] 1647 	inc	r2
      000704 BA 00 01         [24] 1648 	cjne	r2,#0x00,00182$
      000707 0E               [12] 1649 	inc	r6
      000708                       1650 00182$:
      000708 C3               [12] 1651 	clr	c
      000709 EA               [12] 1652 	mov	a,r2
      00070A 94 C9            [12] 1653 	subb	a,#0xc9
      00070C EE               [12] 1654 	mov	a,r6
      00070D 64 80            [12] 1655 	xrl	a,#0x80
      00070F 94 80            [12] 1656 	subb	a,#0x80
      000711 40 DF            [24] 1657 	jc	00111$
                                   1658 ;	walk.c:182: for (i = 0; i < ROWS; i++)
      000713 A8*00            [24] 1659 	mov	r0,_bp
      000715 08               [12] 1660 	inc	r0
      000716 74 C9            [12] 1661 	mov	a,#0xc9
      000718 26               [12] 1662 	add	a,@r0
      000719 F6               [12] 1663 	mov	@r0,a
      00071A E4               [12] 1664 	clr	a
      00071B 08               [12] 1665 	inc	r0
      00071C 36               [12] 1666 	addc	a,@r0
      00071D F6               [12] 1667 	mov	@r0,a
      00071E 0B               [12] 1668 	inc	r3
      00071F BB 00 01         [24] 1669 	cjne	r3,#0x00,00184$
      000722 0C               [12] 1670 	inc	r4
      000723                       1671 00184$:
      000723 C3               [12] 1672 	clr	c
      000724 EB               [12] 1673 	mov	a,r3
      000725 94 30            [12] 1674 	subb	a,#0x30
      000727 EC               [12] 1675 	mov	a,r4
      000728 64 80            [12] 1676 	xrl	a,#0x80
      00072A 94 80            [12] 1677 	subb	a,#0x80
      00072C 40 AA            [24] 1678 	jc	00124$
                                   1679 ;	walk.c:186: initial.r = rand() % ROWS;
      00072E E5*00            [12] 1680 	mov	a,_bp
      000730 24 07            [12] 1681 	add	a,#0x07
      000732 F8               [12] 1682 	mov	r0,a
      000733 C0 07            [24] 1683 	push	ar7
      000735 C0 01            [24] 1684 	push	ar1
      000737 C0 00            [24] 1685 	push	ar0
      000739 12r00r00         [24] 1686 	lcall	_rand
      00073C AD 82            [24] 1687 	mov	r5,dpl
      00073E AE 83            [24] 1688 	mov	r6,dph
      000740 74 30            [12] 1689 	mov	a,#0x30
      000742 C0 E0            [24] 1690 	push	acc
      000744 E4               [12] 1691 	clr	a
      000745 C0 E0            [24] 1692 	push	acc
      000747 8D 82            [24] 1693 	mov	dpl,r5
      000749 8E 83            [24] 1694 	mov	dph,r6
      00074B 12r00r00         [24] 1695 	lcall	__modsint
      00074E AD 82            [24] 1696 	mov	r5,dpl
      000750 AE 83            [24] 1697 	mov	r6,dph
      000752 15 81            [12] 1698 	dec	sp
      000754 15 81            [12] 1699 	dec	sp
      000756 D0 00            [24] 1700 	pop	ar0
      000758 D0 01            [24] 1701 	pop	ar1
      00075A A6 05            [24] 1702 	mov	@r0,ar5
      00075C 08               [12] 1703 	inc	r0
      00075D A6 06            [24] 1704 	mov	@r0,ar6
      00075F 18               [12] 1705 	dec	r0
                                   1706 ;	walk.c:187: initial.c = rand() % COLS;
      000760 74 02            [12] 1707 	mov	a,#0x02
      000762 29               [12] 1708 	add	a,r1
      000763 F8               [12] 1709 	mov	r0,a
      000764 C0 01            [24] 1710 	push	ar1
      000766 C0 00            [24] 1711 	push	ar0
      000768 12r00r00         [24] 1712 	lcall	_rand
      00076B AD 82            [24] 1713 	mov	r5,dpl
      00076D AE 83            [24] 1714 	mov	r6,dph
      00076F 74 C9            [12] 1715 	mov	a,#0xc9
      000771 C0 E0            [24] 1716 	push	acc
      000773 E4               [12] 1717 	clr	a
      000774 C0 E0            [24] 1718 	push	acc
      000776 8D 82            [24] 1719 	mov	dpl,r5
      000778 8E 83            [24] 1720 	mov	dph,r6
      00077A 12r00r00         [24] 1721 	lcall	__modsint
      00077D AD 82            [24] 1722 	mov	r5,dpl
      00077F AE 83            [24] 1723 	mov	r6,dph
      000781 15 81            [12] 1724 	dec	sp
      000783 15 81            [12] 1725 	dec	sp
      000785 D0 00            [24] 1726 	pop	ar0
      000787 A6 05            [24] 1727 	mov	@r0,ar5
      000789 08               [12] 1728 	inc	r0
      00078A A6 06            [24] 1729 	mov	@r0,ar6
      00078C 18               [12] 1730 	dec	r0
                                   1731 ;	walk.c:189: puts("\033[2J\033[?25l");
      00078D 90r00r34         [24] 1732 	mov	dptr,#___str_4
      000790 75 F0 80         [24] 1733 	mov	b,#0x80
      000793 C0 00            [24] 1734 	push	ar0
      000795 12r00r00         [24] 1735 	lcall	_puts
      000798 D0 00            [24] 1736 	pop	ar0
      00079A D0 01            [24] 1737 	pop	ar1
                                   1738 ;	walk.c:190: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00079C 86 05            [24] 1739 	mov	ar5,@r0
      00079E 08               [12] 1740 	inc	r0
      00079F 86 06            [24] 1741 	mov	ar6,@r0
      0007A1 18               [12] 1742 	dec	r0
      0007A2 87 03            [24] 1743 	mov	ar3,@r1
      0007A4 09               [12] 1744 	inc	r1
      0007A5 87 04            [24] 1745 	mov	ar4,@r1
      0007A7 19               [12] 1746 	dec	r1
      0007A8 C0 01            [24] 1747 	push	ar1
      0007AA C0 05            [24] 1748 	push	ar5
      0007AC C0 06            [24] 1749 	push	ar6
      0007AE C0 03            [24] 1750 	push	ar3
      0007B0 C0 04            [24] 1751 	push	ar4
      0007B2 E5*00            [12] 1752 	mov	a,_bp
      0007B4 24 0B            [12] 1753 	add	a,#0x0b
      0007B6 F8               [12] 1754 	mov	r0,a
      0007B7 E6               [12] 1755 	mov	a,@r0
      0007B8 C0 E0            [24] 1756 	push	acc
      0007BA 08               [12] 1757 	inc	r0
      0007BB E6               [12] 1758 	mov	a,@r0
      0007BC C0 E0            [24] 1759 	push	acc
      0007BE 74r3F            [12] 1760 	mov	a,#___str_5
      0007C0 C0 E0            [24] 1761 	push	acc
      0007C2 74s00            [12] 1762 	mov	a,#(___str_5 >> 8)
      0007C4 C0 E0            [24] 1763 	push	acc
      0007C6 74 80            [12] 1764 	mov	a,#0x80
      0007C8 C0 E0            [24] 1765 	push	acc
      0007CA 12r00r00         [24] 1766 	lcall	_printf
      0007CD E5 81            [12] 1767 	mov	a,sp
      0007CF 24 F7            [12] 1768 	add	a,#0xf7
      0007D1 F5 81            [12] 1769 	mov	sp,a
      0007D3 D0 01            [24] 1770 	pop	ar1
      0007D5 D0 07            [24] 1771 	pop	ar7
                                   1772 ;	walk.c:192: for (i = 0; i < (2 * REG); i++) {
      0007D7 E5*00            [12] 1773 	mov	a,_bp
      0007D9 24 05            [12] 1774 	add	a,#0x05
      0007DB F8               [12] 1775 	mov	r0,a
      0007DC E4               [12] 1776 	clr	a
      0007DD F6               [12] 1777 	mov	@r0,a
      0007DE 08               [12] 1778 	inc	r0
      0007DF F6               [12] 1779 	mov	@r0,a
      0007E0                       1780 00115$:
                                   1781 ;	walk.c:193: neigh[i].r = neigh_tmpl[i].r * (1 + rand() % 4);
      0007E0 C0 07            [24] 1782 	push	ar7
      0007E2 E5*00            [12] 1783 	mov	a,_bp
      0007E4 24 05            [12] 1784 	add	a,#0x05
      0007E6 F8               [12] 1785 	mov	r0,a
      0007E7 E6               [12] 1786 	mov	a,@r0
      0007E8 25 E0            [12] 1787 	add	a,acc
      0007EA FB               [12] 1788 	mov	r3,a
      0007EB 08               [12] 1789 	inc	r0
      0007EC E6               [12] 1790 	mov	a,@r0
      0007ED 33               [12] 1791 	rlc	a
      0007EE FC               [12] 1792 	mov	r4,a
      0007EF EB               [12] 1793 	mov	a,r3
      0007F0 2B               [12] 1794 	add	a,r3
      0007F1 FB               [12] 1795 	mov	r3,a
      0007F2 EC               [12] 1796 	mov	a,r4
      0007F3 33               [12] 1797 	rlc	a
      0007F4 FC               [12] 1798 	mov	r4,a
      0007F5 EB               [12] 1799 	mov	a,r3
      0007F6 24r42            [12] 1800 	add	a,#_neigh
      0007F8 FA               [12] 1801 	mov	r2,a
      0007F9 EC               [12] 1802 	mov	a,r4
      0007FA 34s00            [12] 1803 	addc	a,#(_neigh >> 8)
      0007FC FF               [12] 1804 	mov	r7,a
      0007FD EB               [12] 1805 	mov	a,r3
      0007FE 24r02            [12] 1806 	add	a,#_neigh_tmpl
      000800 F5 82            [12] 1807 	mov	dpl,a
      000802 EC               [12] 1808 	mov	a,r4
      000803 34s00            [12] 1809 	addc	a,#(_neigh_tmpl >> 8)
      000805 F5 83            [12] 1810 	mov	dph,a
      000807 E5*00            [12] 1811 	mov	a,_bp
      000809 24 03            [12] 1812 	add	a,#0x03
      00080B F8               [12] 1813 	mov	r0,a
      00080C E0               [24] 1814 	movx	a,@dptr
      00080D F6               [12] 1815 	mov	@r0,a
      00080E A3               [24] 1816 	inc	dptr
      00080F E0               [24] 1817 	movx	a,@dptr
      000810 08               [12] 1818 	inc	r0
      000811 F6               [12] 1819 	mov	@r0,a
      000812 C0 07            [24] 1820 	push	ar7
      000814 C0 04            [24] 1821 	push	ar4
      000816 C0 03            [24] 1822 	push	ar3
      000818 C0 02            [24] 1823 	push	ar2
      00081A C0 01            [24] 1824 	push	ar1
      00081C 12r00r00         [24] 1825 	lcall	_rand
      00081F AD 82            [24] 1826 	mov	r5,dpl
      000821 AE 83            [24] 1827 	mov	r6,dph
      000823 74 04            [12] 1828 	mov	a,#0x04
      000825 C0 E0            [24] 1829 	push	acc
      000827 E4               [12] 1830 	clr	a
      000828 C0 E0            [24] 1831 	push	acc
      00082A 8D 82            [24] 1832 	mov	dpl,r5
      00082C 8E 83            [24] 1833 	mov	dph,r6
      00082E 12r00r00         [24] 1834 	lcall	__modsint
      000831 AD 82            [24] 1835 	mov	r5,dpl
      000833 AE 83            [24] 1836 	mov	r6,dph
      000835 15 81            [12] 1837 	dec	sp
      000837 15 81            [12] 1838 	dec	sp
      000839 D0 01            [24] 1839 	pop	ar1
      00083B D0 02            [24] 1840 	pop	ar2
      00083D D0 03            [24] 1841 	pop	ar3
      00083F D0 04            [24] 1842 	pop	ar4
      000841 D0 07            [24] 1843 	pop	ar7
      000843 0D               [12] 1844 	inc	r5
      000844 BD 00 01         [24] 1845 	cjne	r5,#0x00,00186$
      000847 0E               [12] 1846 	inc	r6
      000848                       1847 00186$:
      000848 C0 07            [24] 1848 	push	ar7
      00084A C0 04            [24] 1849 	push	ar4
      00084C C0 03            [24] 1850 	push	ar3
      00084E C0 02            [24] 1851 	push	ar2
      000850 C0 01            [24] 1852 	push	ar1
      000852 C0 05            [24] 1853 	push	ar5
      000854 C0 06            [24] 1854 	push	ar6
      000856 E5*00            [12] 1855 	mov	a,_bp
      000858 24 03            [12] 1856 	add	a,#0x03
      00085A F8               [12] 1857 	mov	r0,a
      00085B 86 82            [24] 1858 	mov	dpl,@r0
      00085D 08               [12] 1859 	inc	r0
      00085E 86 83            [24] 1860 	mov	dph,@r0
      000860 12r00r00         [24] 1861 	lcall	__mulint
      000863 AD 82            [24] 1862 	mov	r5,dpl
      000865 AE 83            [24] 1863 	mov	r6,dph
      000867 15 81            [12] 1864 	dec	sp
      000869 15 81            [12] 1865 	dec	sp
      00086B D0 01            [24] 1866 	pop	ar1
      00086D D0 02            [24] 1867 	pop	ar2
      00086F D0 03            [24] 1868 	pop	ar3
      000871 D0 04            [24] 1869 	pop	ar4
      000873 D0 07            [24] 1870 	pop	ar7
      000875 8A 82            [24] 1871 	mov	dpl,r2
      000877 8F 83            [24] 1872 	mov	dph,r7
      000879 ED               [12] 1873 	mov	a,r5
      00087A F0               [24] 1874 	movx	@dptr,a
      00087B EE               [12] 1875 	mov	a,r6
      00087C A3               [24] 1876 	inc	dptr
      00087D F0               [24] 1877 	movx	@dptr,a
                                   1878 ;	walk.c:194: neigh[i].c = neigh_tmpl[i].c * (1 + rand() % 4);
      00087E EB               [12] 1879 	mov	a,r3
      00087F 24r42            [12] 1880 	add	a,#_neigh
      000881 FE               [12] 1881 	mov	r6,a
      000882 EC               [12] 1882 	mov	a,r4
      000883 34s00            [12] 1883 	addc	a,#(_neigh >> 8)
      000885 FF               [12] 1884 	mov	r7,a
      000886 74 02            [12] 1885 	mov	a,#0x02
      000888 2E               [12] 1886 	add	a,r6
      000889 FA               [12] 1887 	mov	r2,a
      00088A E4               [12] 1888 	clr	a
      00088B 3F               [12] 1889 	addc	a,r7
      00088C FD               [12] 1890 	mov	r5,a
      00088D EB               [12] 1891 	mov	a,r3
      00088E 24r02            [12] 1892 	add	a,#_neigh_tmpl
      000890 FB               [12] 1893 	mov	r3,a
      000891 EC               [12] 1894 	mov	a,r4
      000892 34s00            [12] 1895 	addc	a,#(_neigh_tmpl >> 8)
      000894 FC               [12] 1896 	mov	r4,a
      000895 8B 82            [24] 1897 	mov	dpl,r3
      000897 8C 83            [24] 1898 	mov	dph,r4
      000899 A3               [24] 1899 	inc	dptr
      00089A A3               [24] 1900 	inc	dptr
      00089B E5*00            [12] 1901 	mov	a,_bp
      00089D 24 03            [12] 1902 	add	a,#0x03
      00089F F8               [12] 1903 	mov	r0,a
      0008A0 E0               [24] 1904 	movx	a,@dptr
      0008A1 F6               [12] 1905 	mov	@r0,a
      0008A2 A3               [24] 1906 	inc	dptr
      0008A3 E0               [24] 1907 	movx	a,@dptr
      0008A4 08               [12] 1908 	inc	r0
      0008A5 F6               [12] 1909 	mov	@r0,a
      0008A6 C0 07            [24] 1910 	push	ar7
      0008A8 C0 06            [24] 1911 	push	ar6
      0008AA C0 05            [24] 1912 	push	ar5
      0008AC C0 02            [24] 1913 	push	ar2
      0008AE C0 01            [24] 1914 	push	ar1
      0008B0 12r00r00         [24] 1915 	lcall	_rand
      0008B3 AB 82            [24] 1916 	mov	r3,dpl
      0008B5 AC 83            [24] 1917 	mov	r4,dph
      0008B7 74 04            [12] 1918 	mov	a,#0x04
      0008B9 C0 E0            [24] 1919 	push	acc
      0008BB E4               [12] 1920 	clr	a
      0008BC C0 E0            [24] 1921 	push	acc
      0008BE 8B 82            [24] 1922 	mov	dpl,r3
      0008C0 8C 83            [24] 1923 	mov	dph,r4
      0008C2 12r00r00         [24] 1924 	lcall	__modsint
      0008C5 AB 82            [24] 1925 	mov	r3,dpl
      0008C7 AC 83            [24] 1926 	mov	r4,dph
      0008C9 15 81            [12] 1927 	dec	sp
      0008CB 15 81            [12] 1928 	dec	sp
      0008CD D0 01            [24] 1929 	pop	ar1
      0008CF D0 02            [24] 1930 	pop	ar2
      0008D1 D0 05            [24] 1931 	pop	ar5
      0008D3 D0 06            [24] 1932 	pop	ar6
      0008D5 D0 07            [24] 1933 	pop	ar7
      0008D7 0B               [12] 1934 	inc	r3
      0008D8 BB 00 01         [24] 1935 	cjne	r3,#0x00,00187$
      0008DB 0C               [12] 1936 	inc	r4
      0008DC                       1937 00187$:
      0008DC C0 07            [24] 1938 	push	ar7
      0008DE C0 06            [24] 1939 	push	ar6
      0008E0 C0 05            [24] 1940 	push	ar5
      0008E2 C0 02            [24] 1941 	push	ar2
      0008E4 C0 01            [24] 1942 	push	ar1
      0008E6 C0 03            [24] 1943 	push	ar3
      0008E8 C0 04            [24] 1944 	push	ar4
      0008EA E5*00            [12] 1945 	mov	a,_bp
      0008EC 24 03            [12] 1946 	add	a,#0x03
      0008EE F8               [12] 1947 	mov	r0,a
      0008EF 86 82            [24] 1948 	mov	dpl,@r0
      0008F1 08               [12] 1949 	inc	r0
      0008F2 86 83            [24] 1950 	mov	dph,@r0
      0008F4 12r00r00         [24] 1951 	lcall	__mulint
      0008F7 AB 82            [24] 1952 	mov	r3,dpl
      0008F9 AC 83            [24] 1953 	mov	r4,dph
      0008FB 15 81            [12] 1954 	dec	sp
      0008FD 15 81            [12] 1955 	dec	sp
      0008FF D0 01            [24] 1956 	pop	ar1
      000901 D0 02            [24] 1957 	pop	ar2
      000903 D0 05            [24] 1958 	pop	ar5
      000905 D0 06            [24] 1959 	pop	ar6
      000907 D0 07            [24] 1960 	pop	ar7
      000909 8A 82            [24] 1961 	mov	dpl,r2
      00090B 8D 83            [24] 1962 	mov	dph,r5
      00090D EB               [12] 1963 	mov	a,r3
      00090E F0               [24] 1964 	movx	@dptr,a
      00090F EC               [12] 1965 	mov	a,r4
      000910 A3               [24] 1966 	inc	dptr
      000911 F0               [24] 1967 	movx	@dptr,a
                                   1968 ;	walk.c:195: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000912 8E 82            [24] 1969 	mov	dpl,r6
      000914 8F 83            [24] 1970 	mov	dph,r7
      000916 E0               [24] 1971 	movx	a,@dptr
      000917 FE               [12] 1972 	mov	r6,a
      000918 A3               [24] 1973 	inc	dptr
      000919 E0               [24] 1974 	movx	a,@dptr
      00091A FF               [12] 1975 	mov	r7,a
      00091B C0 07            [24] 1976 	push	ar7
      00091D C0 01            [24] 1977 	push	ar1
      00091F C0 03            [24] 1978 	push	ar3
      000921 C0 04            [24] 1979 	push	ar4
      000923 C0 06            [24] 1980 	push	ar6
      000925 C0 07            [24] 1981 	push	ar7
      000927 74r52            [12] 1982 	mov	a,#___str_6
      000929 C0 E0            [24] 1983 	push	acc
      00092B 74s00            [12] 1984 	mov	a,#(___str_6 >> 8)
      00092D C0 E0            [24] 1985 	push	acc
      00092F 74 80            [12] 1986 	mov	a,#0x80
      000931 C0 E0            [24] 1987 	push	acc
      000933 12r00r00         [24] 1988 	lcall	_printf
      000936 E5 81            [12] 1989 	mov	a,sp
      000938 24 F9            [12] 1990 	add	a,#0xf9
      00093A F5 81            [12] 1991 	mov	sp,a
      00093C D0 01            [24] 1992 	pop	ar1
      00093E D0 07            [24] 1993 	pop	ar7
                                   1994 ;	walk.c:192: for (i = 0; i < (2 * REG); i++) {
      000940 E5*00            [12] 1995 	mov	a,_bp
      000942 24 05            [12] 1996 	add	a,#0x05
      000944 F8               [12] 1997 	mov	r0,a
      000945 06               [12] 1998 	inc	@r0
      000946 B6 00 02         [24] 1999 	cjne	@r0,#0x00,00188$
      000949 08               [12] 2000 	inc	r0
      00094A 06               [12] 2001 	inc	@r0
      00094B                       2002 00188$:
      00094B E5*00            [12] 2003 	mov	a,_bp
      00094D 24 05            [12] 2004 	add	a,#0x05
      00094F F8               [12] 2005 	mov	r0,a
      000950 C3               [12] 2006 	clr	c
      000951 E6               [12] 2007 	mov	a,@r0
      000952 94 08            [12] 2008 	subb	a,#0x08
      000954 08               [12] 2009 	inc	r0
      000955 E6               [12] 2010 	mov	a,@r0
      000956 64 80            [12] 2011 	xrl	a,#0x80
      000958 94 80            [12] 2012 	subb	a,#0x80
      00095A D0 07            [24] 2013 	pop	ar7
      00095C 50 03            [24] 2014 	jnc	00189$
      00095E 02r07rE0         [24] 2015 	ljmp	00115$
      000961                       2016 00189$:
                                   2017 ;	walk.c:198: OE76 = OE76_0;
      000961 78r01            [12] 2018 	mov	r0,#_OE76
      000963 76 3F            [12] 2019 	mov	@r0,#0x3f
                                   2020 ;	walk.c:199: flashOE(OE76_NC);
      000965 75 82 00         [24] 2021 	mov	dpl,#0x00
      000968 C0 07            [24] 2022 	push	ar7
      00096A C0 01            [24] 2023 	push	ar1
      00096C 12r00r29         [24] 2024 	lcall	_flashOE
      00096F D0 01            [24] 2025 	pop	ar1
      000971 D0 07            [24] 2026 	pop	ar7
                                   2027 ;	walk.c:201: walk(&initial);
      000973 8F 04            [24] 2028 	mov	ar4,r7
      000975 7D 00            [12] 2029 	mov	r5,#0x00
      000977 7E 40            [12] 2030 	mov	r6,#0x40
      000979 8C 82            [24] 2031 	mov	dpl,r4
      00097B 8D 83            [24] 2032 	mov	dph,r5
      00097D 8E F0            [24] 2033 	mov	b,r6
      00097F C0 07            [24] 2034 	push	ar7
      000981 C0 01            [24] 2035 	push	ar1
      000983 12r02rD7         [24] 2036 	lcall	_walk
      000986 D0 01            [24] 2037 	pop	ar1
      000988 D0 07            [24] 2038 	pop	ar7
                                   2039 ;	walk.c:203: for (i = 0; i < ROWS; i++)
      00098A E5*00            [12] 2040 	mov	a,_bp
      00098C 24 05            [12] 2041 	add	a,#0x05
      00098E F8               [12] 2042 	mov	r0,a
      00098F E4               [12] 2043 	clr	a
      000990 F6               [12] 2044 	mov	@r0,a
      000991 08               [12] 2045 	inc	r0
      000992 F6               [12] 2046 	mov	@r0,a
      000993 7B 00            [12] 2047 	mov	r3,#0x00
      000995 7C 00            [12] 2048 	mov	r4,#0x00
                                   2049 ;	walk.c:204: for (j = 0; j < COLS; j++)
      000997                       2050 00131$:
      000997 E5*00            [12] 2051 	mov	a,_bp
      000999 24 03            [12] 2052 	add	a,#0x03
      00099B F8               [12] 2053 	mov	r0,a
      00099C EB               [12] 2054 	mov	a,r3
      00099D 24r00            [12] 2055 	add	a,#_g
      00099F F6               [12] 2056 	mov	@r0,a
      0009A0 EC               [12] 2057 	mov	a,r4
      0009A1 34s00            [12] 2058 	addc	a,#(_g >> 8)
      0009A3 08               [12] 2059 	inc	r0
      0009A4 F6               [12] 2060 	mov	@r0,a
      0009A5 7A 00            [12] 2061 	mov	r2,#0x00
      0009A7 7E 00            [12] 2062 	mov	r6,#0x00
      0009A9                       2063 00117$:
                                   2064 ;	walk.c:205: if (g[i][j] != 0xaa) bang();
      0009A9 E5*00            [12] 2065 	mov	a,_bp
      0009AB 24 03            [12] 2066 	add	a,#0x03
      0009AD F8               [12] 2067 	mov	r0,a
      0009AE EA               [12] 2068 	mov	a,r2
      0009AF 26               [12] 2069 	add	a,@r0
      0009B0 F5 82            [12] 2070 	mov	dpl,a
      0009B2 EE               [12] 2071 	mov	a,r6
      0009B3 08               [12] 2072 	inc	r0
      0009B4 36               [12] 2073 	addc	a,@r0
      0009B5 F5 83            [12] 2074 	mov	dph,a
      0009B7 E0               [24] 2075 	movx	a,@dptr
      0009B8 FD               [12] 2076 	mov	r5,a
      0009B9 BD AA 02         [24] 2077 	cjne	r5,#0xaa,00190$
      0009BC 80 1B            [24] 2078 	sjmp	00118$
      0009BE                       2079 00190$:
      0009BE C0 07            [24] 2080 	push	ar7
      0009C0 C0 06            [24] 2081 	push	ar6
      0009C2 C0 04            [24] 2082 	push	ar4
      0009C4 C0 03            [24] 2083 	push	ar3
      0009C6 C0 02            [24] 2084 	push	ar2
      0009C8 C0 01            [24] 2085 	push	ar1
      0009CA 12r00r1D         [24] 2086 	lcall	_bang
      0009CD D0 01            [24] 2087 	pop	ar1
      0009CF D0 02            [24] 2088 	pop	ar2
      0009D1 D0 03            [24] 2089 	pop	ar3
      0009D3 D0 04            [24] 2090 	pop	ar4
      0009D5 D0 06            [24] 2091 	pop	ar6
      0009D7 D0 07            [24] 2092 	pop	ar7
      0009D9                       2093 00118$:
                                   2094 ;	walk.c:204: for (j = 0; j < COLS; j++)
      0009D9 0A               [12] 2095 	inc	r2
      0009DA BA 00 01         [24] 2096 	cjne	r2,#0x00,00191$
      0009DD 0E               [12] 2097 	inc	r6
      0009DE                       2098 00191$:
      0009DE C3               [12] 2099 	clr	c
      0009DF EA               [12] 2100 	mov	a,r2
      0009E0 94 C9            [12] 2101 	subb	a,#0xc9
      0009E2 EE               [12] 2102 	mov	a,r6
      0009E3 64 80            [12] 2103 	xrl	a,#0x80
      0009E5 94 80            [12] 2104 	subb	a,#0x80
      0009E7 40 C0            [24] 2105 	jc	00117$
                                   2106 ;	walk.c:203: for (i = 0; i < ROWS; i++)
      0009E9 74 C9            [12] 2107 	mov	a,#0xc9
      0009EB 2B               [12] 2108 	add	a,r3
      0009EC FB               [12] 2109 	mov	r3,a
      0009ED E4               [12] 2110 	clr	a
      0009EE 3C               [12] 2111 	addc	a,r4
      0009EF FC               [12] 2112 	mov	r4,a
      0009F0 E5*00            [12] 2113 	mov	a,_bp
      0009F2 24 05            [12] 2114 	add	a,#0x05
      0009F4 F8               [12] 2115 	mov	r0,a
      0009F5 06               [12] 2116 	inc	@r0
      0009F6 B6 00 02         [24] 2117 	cjne	@r0,#0x00,00193$
      0009F9 08               [12] 2118 	inc	r0
      0009FA 06               [12] 2119 	inc	@r0
      0009FB                       2120 00193$:
      0009FB E5*00            [12] 2121 	mov	a,_bp
      0009FD 24 05            [12] 2122 	add	a,#0x05
      0009FF F8               [12] 2123 	mov	r0,a
      000A00 C3               [12] 2124 	clr	c
      000A01 E6               [12] 2125 	mov	a,@r0
      000A02 94 30            [12] 2126 	subb	a,#0x30
      000A04 08               [12] 2127 	inc	r0
      000A05 E6               [12] 2128 	mov	a,@r0
      000A06 64 80            [12] 2129 	xrl	a,#0x80
      000A08 94 80            [12] 2130 	subb	a,#0x80
      000A0A 40 8B            [24] 2131 	jc	00131$
                                   2132 ;	walk.c:207: N++;
      000A0C E5*00            [12] 2133 	mov	a,_bp
      000A0E 24 0B            [12] 2134 	add	a,#0x0b
      000A10 F8               [12] 2135 	mov	r0,a
      000A11 06               [12] 2136 	inc	@r0
      000A12 B6 00 02         [24] 2137 	cjne	@r0,#0x00,00195$
      000A15 08               [12] 2138 	inc	r0
      000A16 06               [12] 2139 	inc	@r0
      000A17                       2140 00195$:
      000A17 02r06rC5         [24] 2141 	ljmp	00108$
      000A1A                       2142 00110$:
                                   2143 ;	walk.c:210: EA = 0;
                                   2144 ;	assignBit
      000A1A C2 AF            [12] 2145 	clr	_EA
                                   2146 ;	walk.c:212: puts("\033[2J\033[?25h");
      000A1C 90r00r5B         [24] 2147 	mov	dptr,#___str_7
      000A1F 75 F0 80         [24] 2148 	mov	b,#0x80
      000A22 12r00r00         [24] 2149 	lcall	_puts
                                   2150 ;	walk.c:216: __endasm;
      000A25 02 00 00         [24] 2151 	ljmp	0
                                   2152 ;	walk.c:218: return 0;
      000A28 90 00 00         [24] 2153 	mov	dptr,#0x0000
                                   2154 ;	walk.c:219: }
      000A2B 85*00 81         [24] 2155 	mov	sp,_bp
      000A2E D0*00            [24] 2156 	pop	_bp
      000A30 22               [24] 2157 	ret
                                   2158 ;------------------------------------------------------------
                                   2159 ;Allocation info for local variables in function 'stinit'
                                   2160 ;------------------------------------------------------------
                                   2161 ;	walk.c:221: static void stinit(void) {
                                   2162 ;	-----------------------------------------
                                   2163 ;	 function stinit
                                   2164 ;	-----------------------------------------
      000A31                       2165 _stinit:
                                   2166 ;	walk.c:222: sp = -1;
      000A31 90rBCr70         [24] 2167 	mov	dptr,#_sp
      000A34 74 FF            [12] 2168 	mov	a,#0xff
      000A36 F0               [24] 2169 	movx	@dptr,a
      000A37 A3               [24] 2170 	inc	dptr
      000A38 F0               [24] 2171 	movx	@dptr,a
                                   2172 ;	walk.c:223: return;
                                   2173 ;	walk.c:224: }
      000A39 22               [24] 2174 	ret
                                   2175 ;------------------------------------------------------------
                                   2176 ;Allocation info for local variables in function 'stpush'
                                   2177 ;------------------------------------------------------------
                                   2178 ;t                         Allocated to registers r5 r6 r7 
                                   2179 ;------------------------------------------------------------
                                   2180 ;	walk.c:226: static int stpush(struct node *t) {
                                   2181 ;	-----------------------------------------
                                   2182 ;	 function stpush
                                   2183 ;	-----------------------------------------
      000A3A                       2184 _stpush:
      000A3A AD 82            [24] 2185 	mov	r5,dpl
      000A3C AE 83            [24] 2186 	mov	r6,dph
      000A3E AF F0            [24] 2187 	mov	r7,b
                                   2188 ;	walk.c:227: if (sp == (SMAX - 1)) return 0;
      000A40 90rBCr70         [24] 2189 	mov	dptr,#_sp
      000A43 E0               [24] 2190 	movx	a,@dptr
      000A44 FB               [12] 2191 	mov	r3,a
      000A45 A3               [24] 2192 	inc	dptr
      000A46 E0               [24] 2193 	movx	a,@dptr
      000A47 FC               [12] 2194 	mov	r4,a
      000A48 BB AF 07         [24] 2195 	cjne	r3,#0xaf,00102$
      000A4B BC 25 04         [24] 2196 	cjne	r4,#0x25,00102$
      000A4E 90 00 00         [24] 2197 	mov	dptr,#0x0000
      000A51 22               [24] 2198 	ret
      000A52                       2199 00102$:
                                   2200 ;	walk.c:228: sp++;
      000A52 90rBCr70         [24] 2201 	mov	dptr,#_sp
      000A55 74 01            [12] 2202 	mov	a,#0x01
      000A57 2B               [12] 2203 	add	a,r3
      000A58 F0               [24] 2204 	movx	@dptr,a
      000A59 E4               [12] 2205 	clr	a
      000A5A 3C               [12] 2206 	addc	a,r4
      000A5B A3               [24] 2207 	inc	dptr
      000A5C F0               [24] 2208 	movx	@dptr,a
                                   2209 ;	walk.c:229: stack[sp] = *t;
      000A5D 90rBCr70         [24] 2210 	mov	dptr,#_sp
      000A60 E0               [24] 2211 	movx	a,@dptr
      000A61 FB               [12] 2212 	mov	r3,a
      000A62 A3               [24] 2213 	inc	dptr
      000A63 E0               [24] 2214 	movx	a,@dptr
      000A64 FC               [12] 2215 	mov	r4,a
      000A65 EB               [12] 2216 	mov	a,r3
      000A66 2B               [12] 2217 	add	a,r3
      000A67 FB               [12] 2218 	mov	r3,a
      000A68 EC               [12] 2219 	mov	a,r4
      000A69 33               [12] 2220 	rlc	a
      000A6A FC               [12] 2221 	mov	r4,a
      000A6B EB               [12] 2222 	mov	a,r3
      000A6C 2B               [12] 2223 	add	a,r3
      000A6D FB               [12] 2224 	mov	r3,a
      000A6E EC               [12] 2225 	mov	a,r4
      000A6F 33               [12] 2226 	rlc	a
      000A70 FC               [12] 2227 	mov	r4,a
      000A71 EB               [12] 2228 	mov	a,r3
      000A72 24rB0            [12] 2229 	add	a,#_stack
      000A74 FB               [12] 2230 	mov	r3,a
      000A75 EC               [12] 2231 	mov	a,r4
      000A76 34s25            [12] 2232 	addc	a,#(_stack >> 8)
      000A78 FC               [12] 2233 	mov	r4,a
      000A79 7A 00            [12] 2234 	mov	r2,#0x00
      000A7B 74 04            [12] 2235 	mov	a,#0x04
      000A7D C0 E0            [24] 2236 	push	acc
      000A7F E4               [12] 2237 	clr	a
      000A80 C0 E0            [24] 2238 	push	acc
      000A82 C0 05            [24] 2239 	push	ar5
      000A84 C0 06            [24] 2240 	push	ar6
      000A86 C0 07            [24] 2241 	push	ar7
      000A88 8B 82            [24] 2242 	mov	dpl,r3
      000A8A 8C 83            [24] 2243 	mov	dph,r4
      000A8C 8A F0            [24] 2244 	mov	b,r2
      000A8E 12r00r00         [24] 2245 	lcall	___memcpy
      000A91 E5 81            [12] 2246 	mov	a,sp
      000A93 24 FB            [12] 2247 	add	a,#0xfb
      000A95 F5 81            [12] 2248 	mov	sp,a
                                   2249 ;	walk.c:230: return 1;
      000A97 90 00 01         [24] 2250 	mov	dptr,#0x0001
                                   2251 ;	walk.c:231: }
      000A9A 22               [24] 2252 	ret
                                   2253 ;------------------------------------------------------------
                                   2254 ;Allocation info for local variables in function 'stpop'
                                   2255 ;------------------------------------------------------------
                                   2256 ;t                         Allocated to registers r5 r6 r7 
                                   2257 ;------------------------------------------------------------
                                   2258 ;	walk.c:233: static int stpop(struct node *t) {
                                   2259 ;	-----------------------------------------
                                   2260 ;	 function stpop
                                   2261 ;	-----------------------------------------
      000A9B                       2262 _stpop:
      000A9B AD 82            [24] 2263 	mov	r5,dpl
      000A9D AE 83            [24] 2264 	mov	r6,dph
      000A9F AF F0            [24] 2265 	mov	r7,b
                                   2266 ;	walk.c:234: if (sp == -1) return 0;
      000AA1 90rBCr70         [24] 2267 	mov	dptr,#_sp
      000AA4 E0               [24] 2268 	movx	a,@dptr
      000AA5 FB               [12] 2269 	mov	r3,a
      000AA6 A3               [24] 2270 	inc	dptr
      000AA7 E0               [24] 2271 	movx	a,@dptr
      000AA8 FC               [12] 2272 	mov	r4,a
      000AA9 BB FF 07         [24] 2273 	cjne	r3,#0xff,00102$
      000AAC BC FF 04         [24] 2274 	cjne	r4,#0xff,00102$
      000AAF 90 00 00         [24] 2275 	mov	dptr,#0x0000
      000AB2 22               [24] 2276 	ret
      000AB3                       2277 00102$:
                                   2278 ;	walk.c:235: *t = stack[sp];
      000AB3 EB               [12] 2279 	mov	a,r3
      000AB4 2B               [12] 2280 	add	a,r3
      000AB5 FB               [12] 2281 	mov	r3,a
      000AB6 EC               [12] 2282 	mov	a,r4
      000AB7 33               [12] 2283 	rlc	a
      000AB8 FC               [12] 2284 	mov	r4,a
      000AB9 EB               [12] 2285 	mov	a,r3
      000ABA 2B               [12] 2286 	add	a,r3
      000ABB FB               [12] 2287 	mov	r3,a
      000ABC EC               [12] 2288 	mov	a,r4
      000ABD 33               [12] 2289 	rlc	a
      000ABE FC               [12] 2290 	mov	r4,a
      000ABF EB               [12] 2291 	mov	a,r3
      000AC0 24rB0            [12] 2292 	add	a,#_stack
      000AC2 FB               [12] 2293 	mov	r3,a
      000AC3 EC               [12] 2294 	mov	a,r4
      000AC4 34s25            [12] 2295 	addc	a,#(_stack >> 8)
      000AC6 FC               [12] 2296 	mov	r4,a
      000AC7 7A 00            [12] 2297 	mov	r2,#0x00
      000AC9 74 04            [12] 2298 	mov	a,#0x04
      000ACB C0 E0            [24] 2299 	push	acc
      000ACD E4               [12] 2300 	clr	a
      000ACE C0 E0            [24] 2301 	push	acc
      000AD0 C0 03            [24] 2302 	push	ar3
      000AD2 C0 04            [24] 2303 	push	ar4
      000AD4 C0 02            [24] 2304 	push	ar2
      000AD6 8D 82            [24] 2305 	mov	dpl,r5
      000AD8 8E 83            [24] 2306 	mov	dph,r6
      000ADA 8F F0            [24] 2307 	mov	b,r7
      000ADC 12r00r00         [24] 2308 	lcall	___memcpy
      000ADF E5 81            [12] 2309 	mov	a,sp
      000AE1 24 FB            [12] 2310 	add	a,#0xfb
      000AE3 F5 81            [12] 2311 	mov	sp,a
                                   2312 ;	walk.c:236: sp--;
      000AE5 90rBCr70         [24] 2313 	mov	dptr,#_sp
      000AE8 E0               [24] 2314 	movx	a,@dptr
      000AE9 24 FF            [12] 2315 	add	a,#0xff
      000AEB FE               [12] 2316 	mov	r6,a
      000AEC A3               [24] 2317 	inc	dptr
      000AED E0               [24] 2318 	movx	a,@dptr
      000AEE 34 FF            [12] 2319 	addc	a,#0xff
      000AF0 FF               [12] 2320 	mov	r7,a
      000AF1 90rBCr70         [24] 2321 	mov	dptr,#_sp
      000AF4 EE               [12] 2322 	mov	a,r6
      000AF5 F0               [24] 2323 	movx	@dptr,a
      000AF6 EF               [12] 2324 	mov	a,r7
      000AF7 A3               [24] 2325 	inc	dptr
      000AF8 F0               [24] 2326 	movx	@dptr,a
                                   2327 ;	walk.c:237: return 1;
      000AF9 90 00 01         [24] 2328 	mov	dptr,#0x0001
                                   2329 ;	walk.c:238: }
      000AFC 22               [24] 2330 	ret
                                   2331 	.area CSEG    (CODE)
                                   2332 	.area CONST   (CODE)
                                   2333 	.area CONST   (CODE)
      000000                       2334 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2335 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2336 	.db 0x00
                                   2337 	.area CSEG    (CODE)
                                   2338 	.area CONST   (CODE)
      00000D                       2339 ___str_1:
      00000D 1B                    2340 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2341 	.ascii "[%d;%dHo"
             6F
      000016 00                    2342 	.db 0x00
                                   2343 	.area CSEG    (CODE)
                                   2344 	.area CONST   (CODE)
      000017                       2345 ___str_2:
      000017 1B                    2346 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2347 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2348 	.db 0x00
                                   2349 	.area CSEG    (CODE)
                                   2350 	.area CONST   (CODE)
      00002A                       2351 ___str_3:
      00002A 1B                    2352 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2353 	.ascii "[%d;%dH."
             2E
      000033 00                    2354 	.db 0x00
                                   2355 	.area CSEG    (CODE)
                                   2356 	.area CONST   (CODE)
      000034                       2357 ___str_4:
      000034 1B                    2358 	.db 0x1b
      000035 5B 32 4A              2359 	.ascii "[2J"
      000038 1B                    2360 	.db 0x1b
      000039 5B 3F 32 35 6C        2361 	.ascii "[?25l"
      00003E 00                    2362 	.db 0x00
                                   2363 	.area CSEG    (CODE)
                                   2364 	.area CONST   (CODE)
      00003F                       2365 ___str_5:
      00003F 1B                    2366 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2367 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2368 	.db 0x00
                                   2369 	.area CSEG    (CODE)
                                   2370 	.area CONST   (CODE)
      000052                       2371 ___str_6:
      000052 25 20 38 64 25 20 38  2372 	.ascii "% 8d% 8d"
             64
      00005A 00                    2373 	.db 0x00
                                   2374 	.area CSEG    (CODE)
                                   2375 	.area CONST   (CODE)
      00005B                       2376 ___str_7:
      00005B 1B                    2377 	.db 0x1b
      00005C 5B 32 4A              2378 	.ascii "[2J"
      00005F 1B                    2379 	.db 0x1b
      000060 5B 3F 32 35 68        2380 	.ascii "[?25h"
      000065 00                    2381 	.db 0x00
                                   2382 	.area CSEG    (CODE)
                                   2383 	.area XINIT   (CODE)
      000000                       2384 __xinit__R:
      000000 FE FF                 2385 	.byte #0xfe,#0xff
      000002                       2386 __xinit__neigh_tmpl:
      000002 FF FF                 2387 	.byte #0xff, #0xff	; -1
      000004 01 00                 2388 	.byte #0x01, #0x00	;  1
      000006 FF FF                 2389 	.byte #0xff, #0xff	; -1
      000008 FF FF                 2390 	.byte #0xff, #0xff	; -1
      00000A 01 00                 2391 	.byte #0x01, #0x00	;  1
      00000C FF FF                 2392 	.byte #0xff, #0xff	; -1
      00000E 01 00                 2393 	.byte #0x01, #0x00	;  1
      000010 01 00                 2394 	.byte #0x01, #0x00	;  1
      000012 FF FF                 2395 	.byte #0xff, #0xff	; -1
      000014 00 00                 2396 	.byte #0x00, #0x00	;  0
      000016 00 00                 2397 	.byte #0x00, #0x00	;  0
      000018 FF FF                 2398 	.byte #0xff, #0xff	; -1
      00001A 01 00                 2399 	.byte #0x01, #0x00	;  1
      00001C 00 00                 2400 	.byte #0x00, #0x00	;  0
      00001E 00 00                 2401 	.byte #0x00, #0x00	;  0
      000020 01 00                 2402 	.byte #0x01, #0x00	;  1
      000022 FF FF                 2403 	.byte #0xff, #0xff	; -1
      000024 01 00                 2404 	.byte #0x01, #0x00	;  1
      000026 FF FF                 2405 	.byte #0xff, #0xff	; -1
      000028 FF FF                 2406 	.byte #0xff, #0xff	; -1
      00002A 01 00                 2407 	.byte #0x01, #0x00	;  1
      00002C FF FF                 2408 	.byte #0xff, #0xff	; -1
      00002E 01 00                 2409 	.byte #0x01, #0x00	;  1
      000030 01 00                 2410 	.byte #0x01, #0x00	;  1
      000032 FF FF                 2411 	.byte #0xff, #0xff	; -1
      000034 00 00                 2412 	.byte #0x00, #0x00	;  0
      000036 00 00                 2413 	.byte #0x00, #0x00	;  0
      000038 FF FF                 2414 	.byte #0xff, #0xff	; -1
      00003A 01 00                 2415 	.byte #0x01, #0x00	;  1
      00003C 00 00                 2416 	.byte #0x00, #0x00	;  0
      00003E 00 00                 2417 	.byte #0x00, #0x00	;  0
      000040 01 00                 2418 	.byte #0x01, #0x00	;  1
      000042                       2419 __xinit__neigh:
      000042 FF FF                 2420 	.byte #0xff, #0xff	; -1
      000044 01 00                 2421 	.byte #0x01, #0x00	;  1
      000046 FF FF                 2422 	.byte #0xff, #0xff	; -1
      000048 FF FF                 2423 	.byte #0xff, #0xff	; -1
      00004A 01 00                 2424 	.byte #0x01, #0x00	;  1
      00004C FF FF                 2425 	.byte #0xff, #0xff	; -1
      00004E 01 00                 2426 	.byte #0x01, #0x00	;  1
      000050 01 00                 2427 	.byte #0x01, #0x00	;  1
      000052 FF FF                 2428 	.byte #0xff, #0xff	; -1
      000054 00 00                 2429 	.byte #0x00, #0x00	;  0
      000056 00 00                 2430 	.byte #0x00, #0x00	;  0
      000058 FF FF                 2431 	.byte #0xff, #0xff	; -1
      00005A 01 00                 2432 	.byte #0x01, #0x00	;  1
      00005C 00 00                 2433 	.byte #0x00, #0x00	;  0
      00005E 00 00                 2434 	.byte #0x00, #0x00	;  0
      000060 01 00                 2435 	.byte #0x01, #0x00	;  1
      000062 FF FF                 2436 	.byte #0xff, #0xff	; -1
      000064 01 00                 2437 	.byte #0x01, #0x00	;  1
      000066 FF FF                 2438 	.byte #0xff, #0xff	; -1
      000068 FF FF                 2439 	.byte #0xff, #0xff	; -1
      00006A 01 00                 2440 	.byte #0x01, #0x00	;  1
      00006C FF FF                 2441 	.byte #0xff, #0xff	; -1
      00006E 01 00                 2442 	.byte #0x01, #0x00	;  1
      000070 01 00                 2443 	.byte #0x01, #0x00	;  1
      000072 FF FF                 2444 	.byte #0xff, #0xff	; -1
      000074 00 00                 2445 	.byte #0x00, #0x00	;  0
      000076 00 00                 2446 	.byte #0x00, #0x00	;  0
      000078 FF FF                 2447 	.byte #0xff, #0xff	; -1
      00007A 01 00                 2448 	.byte #0x01, #0x00	;  1
      00007C 00 00                 2449 	.byte #0x00, #0x00	;  0
      00007E 00 00                 2450 	.byte #0x00, #0x00	;  0
      000080 01 00                 2451 	.byte #0x01, #0x00	;  1
                                   2452 	.area CABS    (ABS,CODE)
