                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9648
      0025B0                        323 _stack:
      0025B0                        324 	.ds 38592
      00BC70                        325 _sp:
      00BC70                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
      000000                        335 _R:
      000000                        336 	.ds 2
      000002                        337 _neigh_tmpl:
      000002                        338 	.ds 64
      000042                        339 _neigh:
      000042                        340 	.ds 64
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  357 	ljmp	_int0
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000006                        378 __sdcc_program_startup:
      000006 02r06r82         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'putchar'
                                    387 ;------------------------------------------------------------
                                    388 ;c                         Allocated to registers 
                                    389 ;------------------------------------------------------------
                                    390 ;	walk.c:9: int putchar(int c) __naked {
                                    391 ;	-----------------------------------------
                                    392 ;	 function putchar
                                    393 ;	-----------------------------------------
      000000                        394 _putchar:
                                    395 ;	naked function: no prologue.
                                    396 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  397 	mov	a, dpl
      000002 02 00 30         [24]  398 	ljmp	0x0030
                                    399 ;	walk.c:15: }
                                    400 ;	naked function: no epilogue.
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'getchar'
                                    403 ;------------------------------------------------------------
                                    404 ;	walk.c:17: int getchar(void) __naked {
                                    405 ;	-----------------------------------------
                                    406 ;	 function getchar
                                    407 ;	-----------------------------------------
      000005                        408 _getchar:
                                    409 ;	naked function: no prologue.
                                    410 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  411 	lcall	0x0032
      000008 F5 82            [12]  412 	mov	dpl, a
      00000A 75 83 00         [24]  413 	mov	dph, #0
      00000D 22               [24]  414 	ret
                                    415 ;	walk.c:24: }
                                    416 ;	naked function: no epilogue.
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'int0'
                                    419 ;------------------------------------------------------------
                                    420 ;	walk.c:28: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    421 ;	-----------------------------------------
                                    422 ;	 function int0
                                    423 ;	-----------------------------------------
      00000E                        424 _int0:
                           00000F   425 	ar7 = 0x0f
                           00000E   426 	ar6 = 0x0e
                           00000D   427 	ar5 = 0x0d
                           00000C   428 	ar4 = 0x0c
                           00000B   429 	ar3 = 0x0b
                           00000A   430 	ar2 = 0x0a
                           000009   431 	ar1 = 0x09
                           000008   432 	ar0 = 0x08
      00000E C0 D0            [24]  433 	push	psw
      000010 75 D0 08         [24]  434 	mov	psw,#0x08
                                    435 ;	walk.c:29: i0 = 0u;
      000013 78r00            [12]  436 	mov	r0,#_i0
      000015 76 00            [12]  437 	mov	@r0,#0x00
                                    438 ;	walk.c:30: }
      000017 D0 D0            [24]  439 	pop	psw
      000019 32               [24]  440 	reti
                                    441 ;	eliminated unneeded push/pop dpl
                                    442 ;	eliminated unneeded push/pop dph
                                    443 ;	eliminated unneeded push/pop b
                                    444 ;	eliminated unneeded push/pop acc
                                    445 ;------------------------------------------------------------
                                    446 ;Allocation info for local variables in function 'reset'
                                    447 ;------------------------------------------------------------
                                    448 ;	walk.c:32: static void reset(void) __naked {
                                    449 ;	-----------------------------------------
                                    450 ;	 function reset
                                    451 ;	-----------------------------------------
      00001A                        452 _reset:
                                    453 ;	naked function: no prologue.
                                    454 ;	walk.c:35: __endasm;
      00001A 43 87 02         [24]  455 	orl	pcon, #2
                                    456 ;	walk.c:36: }
                                    457 ;	naked function: no epilogue.
                                    458 ;------------------------------------------------------------
                                    459 ;Allocation info for local variables in function 'bang'
                                    460 ;------------------------------------------------------------
                                    461 ;	walk.c:38: static void bang(void) {
                                    462 ;	-----------------------------------------
                                    463 ;	 function bang
                                    464 ;	-----------------------------------------
      00001D                        465 _bang:
                           000007   466 	ar7 = 0x07
                           000006   467 	ar6 = 0x06
                           000005   468 	ar5 = 0x05
                           000004   469 	ar4 = 0x04
                           000003   470 	ar3 = 0x03
                           000002   471 	ar2 = 0x02
                           000001   472 	ar1 = 0x01
                           000000   473 	ar0 = 0x00
                                    474 ;	walk.c:39: (void)puts("Memory error");
      00001D 90r00r00         [24]  475 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  476 	mov	b,#0x80
      000023 12r00r00         [24]  477 	lcall	_puts
                                    478 ;	walk.c:40: reset();
                                    479 ;	walk.c:42: return;
                                    480 ;	walk.c:43: }
      000026 02r00r1A         [24]  481 	ljmp	_reset
                                    482 ;------------------------------------------------------------
                                    483 ;Allocation info for local variables in function 'flashOE'
                                    484 ;------------------------------------------------------------
                                    485 ;mask                      Allocated to registers r7 
                                    486 ;OEreg                     Allocated to stack - _bp +1
                                    487 ;------------------------------------------------------------
                                    488 ;	walk.c:98: static void flashOE(uint8_t mask) {
                                    489 ;	-----------------------------------------
                                    490 ;	 function flashOE
                                    491 ;	-----------------------------------------
      000029                        492 _flashOE:
      000029 C0*00            [24]  493 	push	_bp
      00002B 85 81*00         [24]  494 	mov	_bp,sp
      00002E 05 81            [12]  495 	inc	sp
      000030 05 81            [12]  496 	inc	sp
      000032 AF 82            [24]  497 	mov	r7,dpl
                                    498 ;	walk.c:101: P1_7 = 0;
                                    499 ;	assignBit
      000034 C2 97            [12]  500 	clr	_P1_7
                                    501 ;	walk.c:102: *OEreg = OE76;
      000036 90 F0 06         [24]  502 	mov	dptr,#0xf006
      000039 78r01            [12]  503 	mov	r0,#_OE76
      00003B E6               [12]  504 	mov	a,@r0
      00003C F0               [24]  505 	movx	@dptr,a
                                    506 ;	walk.c:103: P1_7 = 1;
                                    507 ;	assignBit
      00003D D2 97            [12]  508 	setb	_P1_7
                                    509 ;	walk.c:104: OE76 ^= mask;
      00003F 78r01            [12]  510 	mov	r0,#_OE76
      000041 EF               [12]  511 	mov	a,r7
      000042 66               [12]  512 	xrl	a,@r0
      000043 F6               [12]  513 	mov	@r0,a
                                    514 ;	walk.c:106: return;
                                    515 ;	walk.c:107: }
      000044 85*00 81         [24]  516 	mov	sp,_bp
      000047 D0*00            [24]  517 	pop	_bp
      000049 22               [24]  518 	ret
                                    519 ;------------------------------------------------------------
                                    520 ;Allocation info for local variables in function 'update'
                                    521 ;------------------------------------------------------------
                                    522 ;cur                       Allocated to stack - _bp -5
                                    523 ;j                         Allocated to stack - _bp -6
                                    524 ;t                         Allocated to stack - _bp +1
                                    525 ;sloc0                     Allocated to stack - _bp +4
                                    526 ;sloc1                     Allocated to stack - _bp +6
                                    527 ;sloc2                     Allocated to stack - _bp +8
                                    528 ;------------------------------------------------------------
                                    529 ;	walk.c:109: static int update(struct node *t, struct node *cur, char j) {
                                    530 ;	-----------------------------------------
                                    531 ;	 function update
                                    532 ;	-----------------------------------------
      00004A                        533 _update:
      00004A C0*00            [24]  534 	push	_bp
      00004C 85 81*00         [24]  535 	mov	_bp,sp
      00004F C0 82            [24]  536 	push	dpl
      000051 C0 83            [24]  537 	push	dph
      000053 C0 F0            [24]  538 	push	b
      000055 E5 81            [12]  539 	mov	a,sp
      000057 24 07            [12]  540 	add	a,#0x07
      000059 F5 81            [12]  541 	mov	sp,a
                                    542 ;	walk.c:110: t->r = cur->r + neigh[j].r;
      00005B E5*00            [12]  543 	mov	a,_bp
      00005D 24 FB            [12]  544 	add	a,#0xfb
      00005F F8               [12]  545 	mov	r0,a
      000060 86 02            [24]  546 	mov	ar2,@r0
      000062 08               [12]  547 	inc	r0
      000063 86 03            [24]  548 	mov	ar3,@r0
      000065 08               [12]  549 	inc	r0
      000066 86 04            [24]  550 	mov	ar4,@r0
      000068 8A 82            [24]  551 	mov	dpl,r2
      00006A 8B 83            [24]  552 	mov	dph,r3
      00006C 8C F0            [24]  553 	mov	b,r4
      00006E E5*00            [12]  554 	mov	a,_bp
      000070 24 04            [12]  555 	add	a,#0x04
      000072 F8               [12]  556 	mov	r0,a
      000073 12r00r00         [24]  557 	lcall	__gptrget
      000076 F6               [12]  558 	mov	@r0,a
      000077 A3               [24]  559 	inc	dptr
      000078 12r00r00         [24]  560 	lcall	__gptrget
      00007B 08               [12]  561 	inc	r0
      00007C F6               [12]  562 	mov	@r0,a
      00007D E5*00            [12]  563 	mov	a,_bp
      00007F 24 FA            [12]  564 	add	a,#0xfa
      000081 F8               [12]  565 	mov	r0,a
      000082 E5*00            [12]  566 	mov	a,_bp
      000084 24 06            [12]  567 	add	a,#0x06
      000086 F9               [12]  568 	mov	r1,a
      000087 E6               [12]  569 	mov	a,@r0
      000088 75 F0 04         [24]  570 	mov	b,#0x04
      00008B A4               [48]  571 	mul	ab
      00008C F7               [12]  572 	mov	@r1,a
      00008D 09               [12]  573 	inc	r1
      00008E A7 F0            [24]  574 	mov	@r1,b
      000090 E5*00            [12]  575 	mov	a,_bp
      000092 24 06            [12]  576 	add	a,#0x06
      000094 F8               [12]  577 	mov	r0,a
      000095 E6               [12]  578 	mov	a,@r0
      000096 24r42            [12]  579 	add	a,#_neigh
      000098 F5 82            [12]  580 	mov	dpl,a
      00009A 08               [12]  581 	inc	r0
      00009B E6               [12]  582 	mov	a,@r0
      00009C 34s00            [12]  583 	addc	a,#(_neigh >> 8)
      00009E F5 83            [12]  584 	mov	dph,a
      0000A0 E0               [24]  585 	movx	a,@dptr
      0000A1 FF               [12]  586 	mov	r7,a
      0000A2 A3               [24]  587 	inc	dptr
      0000A3 E0               [24]  588 	movx	a,@dptr
      0000A4 FE               [12]  589 	mov	r6,a
      0000A5 E5*00            [12]  590 	mov	a,_bp
      0000A7 24 04            [12]  591 	add	a,#0x04
      0000A9 F8               [12]  592 	mov	r0,a
      0000AA EF               [12]  593 	mov	a,r7
      0000AB 26               [12]  594 	add	a,@r0
      0000AC FF               [12]  595 	mov	r7,a
      0000AD EE               [12]  596 	mov	a,r6
      0000AE 08               [12]  597 	inc	r0
      0000AF 36               [12]  598 	addc	a,@r0
      0000B0 FE               [12]  599 	mov	r6,a
      0000B1 A8*00            [24]  600 	mov	r0,_bp
      0000B3 08               [12]  601 	inc	r0
      0000B4 86 82            [24]  602 	mov	dpl,@r0
      0000B6 08               [12]  603 	inc	r0
      0000B7 86 83            [24]  604 	mov	dph,@r0
      0000B9 08               [12]  605 	inc	r0
      0000BA 86 F0            [24]  606 	mov	b,@r0
      0000BC EF               [12]  607 	mov	a,r7
      0000BD 12r00r00         [24]  608 	lcall	__gptrput
      0000C0 A3               [24]  609 	inc	dptr
      0000C1 EE               [12]  610 	mov	a,r6
      0000C2 12r00r00         [24]  611 	lcall	__gptrput
                                    612 ;	walk.c:111: t->c = cur->c + neigh[j].c;
      0000C5 A8*00            [24]  613 	mov	r0,_bp
      0000C7 08               [12]  614 	inc	r0
      0000C8 E5*00            [12]  615 	mov	a,_bp
      0000CA 24 08            [12]  616 	add	a,#0x08
      0000CC F9               [12]  617 	mov	r1,a
      0000CD 74 02            [12]  618 	mov	a,#0x02
      0000CF 26               [12]  619 	add	a,@r0
      0000D0 F7               [12]  620 	mov	@r1,a
      0000D1 E4               [12]  621 	clr	a
      0000D2 08               [12]  622 	inc	r0
      0000D3 36               [12]  623 	addc	a,@r0
      0000D4 09               [12]  624 	inc	r1
      0000D5 F7               [12]  625 	mov	@r1,a
      0000D6 08               [12]  626 	inc	r0
      0000D7 09               [12]  627 	inc	r1
      0000D8 E6               [12]  628 	mov	a,@r0
      0000D9 F7               [12]  629 	mov	@r1,a
      0000DA 74 02            [12]  630 	mov	a,#0x02
      0000DC 2A               [12]  631 	add	a,r2
      0000DD FA               [12]  632 	mov	r2,a
      0000DE E4               [12]  633 	clr	a
      0000DF 3B               [12]  634 	addc	a,r3
      0000E0 FB               [12]  635 	mov	r3,a
      0000E1 8A 82            [24]  636 	mov	dpl,r2
      0000E3 8B 83            [24]  637 	mov	dph,r3
      0000E5 8C F0            [24]  638 	mov	b,r4
      0000E7 12r00r00         [24]  639 	lcall	__gptrget
      0000EA FA               [12]  640 	mov	r2,a
      0000EB A3               [24]  641 	inc	dptr
      0000EC 12r00r00         [24]  642 	lcall	__gptrget
      0000EF FB               [12]  643 	mov	r3,a
      0000F0 E5*00            [12]  644 	mov	a,_bp
      0000F2 24 06            [12]  645 	add	a,#0x06
      0000F4 F8               [12]  646 	mov	r0,a
      0000F5 E6               [12]  647 	mov	a,@r0
      0000F6 24r42            [12]  648 	add	a,#_neigh
      0000F8 FC               [12]  649 	mov	r4,a
      0000F9 08               [12]  650 	inc	r0
      0000FA E6               [12]  651 	mov	a,@r0
      0000FB 34s00            [12]  652 	addc	a,#(_neigh >> 8)
      0000FD FD               [12]  653 	mov	r5,a
      0000FE 8C 82            [24]  654 	mov	dpl,r4
      000100 8D 83            [24]  655 	mov	dph,r5
      000102 A3               [24]  656 	inc	dptr
      000103 A3               [24]  657 	inc	dptr
      000104 E0               [24]  658 	movx	a,@dptr
      000105 FC               [12]  659 	mov	r4,a
      000106 A3               [24]  660 	inc	dptr
      000107 E0               [24]  661 	movx	a,@dptr
      000108 FD               [12]  662 	mov	r5,a
      000109 EC               [12]  663 	mov	a,r4
      00010A 2A               [12]  664 	add	a,r2
      00010B FA               [12]  665 	mov	r2,a
      00010C ED               [12]  666 	mov	a,r5
      00010D 3B               [12]  667 	addc	a,r3
      00010E FB               [12]  668 	mov	r3,a
      00010F E5*00            [12]  669 	mov	a,_bp
      000111 24 08            [12]  670 	add	a,#0x08
      000113 F8               [12]  671 	mov	r0,a
      000114 86 82            [24]  672 	mov	dpl,@r0
      000116 08               [12]  673 	inc	r0
      000117 86 83            [24]  674 	mov	dph,@r0
      000119 08               [12]  675 	inc	r0
      00011A 86 F0            [24]  676 	mov	b,@r0
      00011C EA               [12]  677 	mov	a,r2
      00011D 12r00r00         [24]  678 	lcall	__gptrput
      000120 A3               [24]  679 	inc	dptr
      000121 EB               [12]  680 	mov	a,r3
      000122 12r00r00         [24]  681 	lcall	__gptrput
                                    682 ;	walk.c:113: if (t->r < 0) t->r += ROWS;
      000125 A8*00            [24]  683 	mov	r0,_bp
      000127 08               [12]  684 	inc	r0
      000128 86 82            [24]  685 	mov	dpl,@r0
      00012A 08               [12]  686 	inc	r0
      00012B 86 83            [24]  687 	mov	dph,@r0
      00012D 08               [12]  688 	inc	r0
      00012E 86 F0            [24]  689 	mov	b,@r0
      000130 12r00r00         [24]  690 	lcall	__gptrget
      000133 FD               [12]  691 	mov	r5,a
      000134 A3               [24]  692 	inc	dptr
      000135 12r00r00         [24]  693 	lcall	__gptrget
      000138 FC               [12]  694 	mov	r4,a
      000139 EE               [12]  695 	mov	a,r6
      00013A 30 E7 1D         [24]  696 	jnb	acc.7,00104$
      00013D 74 30            [12]  697 	mov	a,#0x30
      00013F 2D               [12]  698 	add	a,r5
      000140 FF               [12]  699 	mov	r7,a
      000141 E4               [12]  700 	clr	a
      000142 3C               [12]  701 	addc	a,r4
      000143 FE               [12]  702 	mov	r6,a
      000144 A8*00            [24]  703 	mov	r0,_bp
      000146 08               [12]  704 	inc	r0
      000147 86 82            [24]  705 	mov	dpl,@r0
      000149 08               [12]  706 	inc	r0
      00014A 86 83            [24]  707 	mov	dph,@r0
      00014C 08               [12]  708 	inc	r0
      00014D 86 F0            [24]  709 	mov	b,@r0
      00014F EF               [12]  710 	mov	a,r7
      000150 12r00r00         [24]  711 	lcall	__gptrput
      000153 A3               [24]  712 	inc	dptr
      000154 EE               [12]  713 	mov	a,r6
      000155 12r00r00         [24]  714 	lcall	__gptrput
      000158 80 27            [24]  715 	sjmp	00105$
      00015A                        716 00104$:
                                    717 ;	walk.c:114: else if (t->r >= ROWS) t->r -= ROWS;
      00015A C3               [12]  718 	clr	c
      00015B ED               [12]  719 	mov	a,r5
      00015C 94 30            [12]  720 	subb	a,#0x30
      00015E EC               [12]  721 	mov	a,r4
      00015F 64 80            [12]  722 	xrl	a,#0x80
      000161 94 80            [12]  723 	subb	a,#0x80
      000163 40 1C            [24]  724 	jc	00105$
      000165 ED               [12]  725 	mov	a,r5
      000166 24 D0            [12]  726 	add	a,#0xd0
      000168 FD               [12]  727 	mov	r5,a
      000169 EC               [12]  728 	mov	a,r4
      00016A 34 FF            [12]  729 	addc	a,#0xff
      00016C FC               [12]  730 	mov	r4,a
      00016D A8*00            [24]  731 	mov	r0,_bp
      00016F 08               [12]  732 	inc	r0
      000170 86 82            [24]  733 	mov	dpl,@r0
      000172 08               [12]  734 	inc	r0
      000173 86 83            [24]  735 	mov	dph,@r0
      000175 08               [12]  736 	inc	r0
      000176 86 F0            [24]  737 	mov	b,@r0
      000178 ED               [12]  738 	mov	a,r5
      000179 12r00r00         [24]  739 	lcall	__gptrput
      00017C A3               [24]  740 	inc	dptr
      00017D EC               [12]  741 	mov	a,r4
      00017E 12r00r00         [24]  742 	lcall	__gptrput
      000181                        743 00105$:
                                    744 ;	walk.c:115: if (t->c < 0) t->c += COLS;
      000181 E5*00            [12]  745 	mov	a,_bp
      000183 24 08            [12]  746 	add	a,#0x08
      000185 F8               [12]  747 	mov	r0,a
      000186 86 82            [24]  748 	mov	dpl,@r0
      000188 08               [12]  749 	inc	r0
      000189 86 83            [24]  750 	mov	dph,@r0
      00018B 08               [12]  751 	inc	r0
      00018C 86 F0            [24]  752 	mov	b,@r0
      00018E 12r00r00         [24]  753 	lcall	__gptrget
      000191 A3               [24]  754 	inc	dptr
      000192 12r00r00         [24]  755 	lcall	__gptrget
      000195 30 E7 35         [24]  756 	jnb	acc.7,00109$
      000198 E5*00            [12]  757 	mov	a,_bp
      00019A 24 08            [12]  758 	add	a,#0x08
      00019C F8               [12]  759 	mov	r0,a
      00019D 86 82            [24]  760 	mov	dpl,@r0
      00019F 08               [12]  761 	inc	r0
      0001A0 86 83            [24]  762 	mov	dph,@r0
      0001A2 08               [12]  763 	inc	r0
      0001A3 86 F0            [24]  764 	mov	b,@r0
      0001A5 12r00r00         [24]  765 	lcall	__gptrget
      0001A8 FE               [12]  766 	mov	r6,a
      0001A9 A3               [24]  767 	inc	dptr
      0001AA 12r00r00         [24]  768 	lcall	__gptrget
      0001AD FF               [12]  769 	mov	r7,a
      0001AE 74 C9            [12]  770 	mov	a,#0xc9
      0001B0 2E               [12]  771 	add	a,r6
      0001B1 FE               [12]  772 	mov	r6,a
      0001B2 E4               [12]  773 	clr	a
      0001B3 3F               [12]  774 	addc	a,r7
      0001B4 FF               [12]  775 	mov	r7,a
      0001B5 E5*00            [12]  776 	mov	a,_bp
      0001B7 24 08            [12]  777 	add	a,#0x08
      0001B9 F8               [12]  778 	mov	r0,a
      0001BA 86 82            [24]  779 	mov	dpl,@r0
      0001BC 08               [12]  780 	inc	r0
      0001BD 86 83            [24]  781 	mov	dph,@r0
      0001BF 08               [12]  782 	inc	r0
      0001C0 86 F0            [24]  783 	mov	b,@r0
      0001C2 EE               [12]  784 	mov	a,r6
      0001C3 12r00r00         [24]  785 	lcall	__gptrput
      0001C6 A3               [24]  786 	inc	dptr
      0001C7 EF               [12]  787 	mov	a,r7
      0001C8 12r00r00         [24]  788 	lcall	__gptrput
      0001CB 80 55            [24]  789 	sjmp	00110$
      0001CD                        790 00109$:
                                    791 ;	walk.c:116: else if (t->c >= COLS) t->c -= COLS;
      0001CD E5*00            [12]  792 	mov	a,_bp
      0001CF 24 08            [12]  793 	add	a,#0x08
      0001D1 F8               [12]  794 	mov	r0,a
      0001D2 86 82            [24]  795 	mov	dpl,@r0
      0001D4 08               [12]  796 	inc	r0
      0001D5 86 83            [24]  797 	mov	dph,@r0
      0001D7 08               [12]  798 	inc	r0
      0001D8 86 F0            [24]  799 	mov	b,@r0
      0001DA 12r00r00         [24]  800 	lcall	__gptrget
      0001DD FE               [12]  801 	mov	r6,a
      0001DE A3               [24]  802 	inc	dptr
      0001DF 12r00r00         [24]  803 	lcall	__gptrget
      0001E2 FF               [12]  804 	mov	r7,a
      0001E3 C3               [12]  805 	clr	c
      0001E4 EE               [12]  806 	mov	a,r6
      0001E5 94 C9            [12]  807 	subb	a,#0xc9
      0001E7 EF               [12]  808 	mov	a,r7
      0001E8 64 80            [12]  809 	xrl	a,#0x80
      0001EA 94 80            [12]  810 	subb	a,#0x80
      0001EC 40 34            [24]  811 	jc	00110$
      0001EE E5*00            [12]  812 	mov	a,_bp
      0001F0 24 08            [12]  813 	add	a,#0x08
      0001F2 F8               [12]  814 	mov	r0,a
      0001F3 86 82            [24]  815 	mov	dpl,@r0
      0001F5 08               [12]  816 	inc	r0
      0001F6 86 83            [24]  817 	mov	dph,@r0
      0001F8 08               [12]  818 	inc	r0
      0001F9 86 F0            [24]  819 	mov	b,@r0
      0001FB 12r00r00         [24]  820 	lcall	__gptrget
      0001FE FE               [12]  821 	mov	r6,a
      0001FF A3               [24]  822 	inc	dptr
      000200 12r00r00         [24]  823 	lcall	__gptrget
      000203 FF               [12]  824 	mov	r7,a
      000204 EE               [12]  825 	mov	a,r6
      000205 24 37            [12]  826 	add	a,#0x37
      000207 FE               [12]  827 	mov	r6,a
      000208 EF               [12]  828 	mov	a,r7
      000209 34 FF            [12]  829 	addc	a,#0xff
      00020B FF               [12]  830 	mov	r7,a
      00020C E5*00            [12]  831 	mov	a,_bp
      00020E 24 08            [12]  832 	add	a,#0x08
      000210 F8               [12]  833 	mov	r0,a
      000211 86 82            [24]  834 	mov	dpl,@r0
      000213 08               [12]  835 	inc	r0
      000214 86 83            [24]  836 	mov	dph,@r0
      000216 08               [12]  837 	inc	r0
      000217 86 F0            [24]  838 	mov	b,@r0
      000219 EE               [12]  839 	mov	a,r6
      00021A 12r00r00         [24]  840 	lcall	__gptrput
      00021D A3               [24]  841 	inc	dptr
      00021E EF               [12]  842 	mov	a,r7
      00021F 12r00r00         [24]  843 	lcall	__gptrput
      000222                        844 00110$:
                                    845 ;	walk.c:118: if (g[t->r][t->c] == 0xaa) return 0;
      000222 A8*00            [24]  846 	mov	r0,_bp
      000224 08               [12]  847 	inc	r0
      000225 86 82            [24]  848 	mov	dpl,@r0
      000227 08               [12]  849 	inc	r0
      000228 86 83            [24]  850 	mov	dph,@r0
      00022A 08               [12]  851 	inc	r0
      00022B 86 F0            [24]  852 	mov	b,@r0
      00022D 12r00r00         [24]  853 	lcall	__gptrget
      000230 FE               [12]  854 	mov	r6,a
      000231 A3               [24]  855 	inc	dptr
      000232 12r00r00         [24]  856 	lcall	__gptrget
      000235 FF               [12]  857 	mov	r7,a
      000236 C0 06            [24]  858 	push	ar6
      000238 C0 07            [24]  859 	push	ar7
      00023A 90 00 C9         [24]  860 	mov	dptr,#0x00c9
      00023D 12r00r00         [24]  861 	lcall	__mulint
      000240 AE 82            [24]  862 	mov	r6,dpl
      000242 AF 83            [24]  863 	mov	r7,dph
      000244 15 81            [12]  864 	dec	sp
      000246 15 81            [12]  865 	dec	sp
      000248 EE               [12]  866 	mov	a,r6
      000249 24r00            [12]  867 	add	a,#_g
      00024B FE               [12]  868 	mov	r6,a
      00024C EF               [12]  869 	mov	a,r7
      00024D 34s00            [12]  870 	addc	a,#(_g >> 8)
      00024F FF               [12]  871 	mov	r7,a
      000250 E5*00            [12]  872 	mov	a,_bp
      000252 24 08            [12]  873 	add	a,#0x08
      000254 F8               [12]  874 	mov	r0,a
      000255 86 82            [24]  875 	mov	dpl,@r0
      000257 08               [12]  876 	inc	r0
      000258 86 83            [24]  877 	mov	dph,@r0
      00025A 08               [12]  878 	inc	r0
      00025B 86 F0            [24]  879 	mov	b,@r0
      00025D 12r00r00         [24]  880 	lcall	__gptrget
      000260 FC               [12]  881 	mov	r4,a
      000261 A3               [24]  882 	inc	dptr
      000262 12r00r00         [24]  883 	lcall	__gptrget
      000265 FD               [12]  884 	mov	r5,a
      000266 EC               [12]  885 	mov	a,r4
      000267 2E               [12]  886 	add	a,r6
      000268 F5 82            [12]  887 	mov	dpl,a
      00026A ED               [12]  888 	mov	a,r5
      00026B 3F               [12]  889 	addc	a,r7
      00026C F5 83            [12]  890 	mov	dph,a
      00026E E0               [24]  891 	movx	a,@dptr
      00026F FF               [12]  892 	mov	r7,a
      000270 BF AA 05         [24]  893 	cjne	r7,#0xaa,00114$
      000273 90 00 00         [24]  894 	mov	dptr,#0x0000
      000276 80 59            [24]  895 	sjmp	00116$
      000278                        896 00114$:
                                    897 ;	walk.c:119: else if (g[t->r][t->c] != 0x55) bang();
      000278 A8*00            [24]  898 	mov	r0,_bp
      00027A 08               [12]  899 	inc	r0
      00027B 86 82            [24]  900 	mov	dpl,@r0
      00027D 08               [12]  901 	inc	r0
      00027E 86 83            [24]  902 	mov	dph,@r0
      000280 08               [12]  903 	inc	r0
      000281 86 F0            [24]  904 	mov	b,@r0
      000283 12r00r00         [24]  905 	lcall	__gptrget
      000286 FE               [12]  906 	mov	r6,a
      000287 A3               [24]  907 	inc	dptr
      000288 12r00r00         [24]  908 	lcall	__gptrget
      00028B FF               [12]  909 	mov	r7,a
      00028C C0 06            [24]  910 	push	ar6
      00028E C0 07            [24]  911 	push	ar7
      000290 90 00 C9         [24]  912 	mov	dptr,#0x00c9
      000293 12r00r00         [24]  913 	lcall	__mulint
      000296 AE 82            [24]  914 	mov	r6,dpl
      000298 AF 83            [24]  915 	mov	r7,dph
      00029A 15 81            [12]  916 	dec	sp
      00029C 15 81            [12]  917 	dec	sp
      00029E EE               [12]  918 	mov	a,r6
      00029F 24r00            [12]  919 	add	a,#_g
      0002A1 FE               [12]  920 	mov	r6,a
      0002A2 EF               [12]  921 	mov	a,r7
      0002A3 34s00            [12]  922 	addc	a,#(_g >> 8)
      0002A5 FF               [12]  923 	mov	r7,a
      0002A6 E5*00            [12]  924 	mov	a,_bp
      0002A8 24 08            [12]  925 	add	a,#0x08
      0002AA F8               [12]  926 	mov	r0,a
      0002AB 86 82            [24]  927 	mov	dpl,@r0
      0002AD 08               [12]  928 	inc	r0
      0002AE 86 83            [24]  929 	mov	dph,@r0
      0002B0 08               [12]  930 	inc	r0
      0002B1 86 F0            [24]  931 	mov	b,@r0
      0002B3 12r00r00         [24]  932 	lcall	__gptrget
      0002B6 FC               [12]  933 	mov	r4,a
      0002B7 A3               [24]  934 	inc	dptr
      0002B8 12r00r00         [24]  935 	lcall	__gptrget
      0002BB FD               [12]  936 	mov	r5,a
      0002BC EC               [12]  937 	mov	a,r4
      0002BD 2E               [12]  938 	add	a,r6
      0002BE F5 82            [12]  939 	mov	dpl,a
      0002C0 ED               [12]  940 	mov	a,r5
      0002C1 3F               [12]  941 	addc	a,r7
      0002C2 F5 83            [12]  942 	mov	dph,a
      0002C4 E0               [24]  943 	movx	a,@dptr
      0002C5 FF               [12]  944 	mov	r7,a
      0002C6 BF 55 02         [24]  945 	cjne	r7,#0x55,00148$
      0002C9 80 03            [24]  946 	sjmp	00115$
      0002CB                        947 00148$:
      0002CB 12r00r1D         [24]  948 	lcall	_bang
      0002CE                        949 00115$:
                                    950 ;	walk.c:121: return 1;
      0002CE 90 00 01         [24]  951 	mov	dptr,#0x0001
      0002D1                        952 00116$:
                                    953 ;	walk.c:122: }
      0002D1 85*00 81         [24]  954 	mov	sp,_bp
      0002D4 D0*00            [24]  955 	pop	_bp
      0002D6 22               [24]  956 	ret
                                    957 ;------------------------------------------------------------
                                    958 ;Allocation info for local variables in function 'walk'
                                    959 ;------------------------------------------------------------
                                    960 ;nstart                    Allocated to registers 
                                    961 ;cur                       Allocated to stack - _bp +10
                                    962 ;t                         Allocated to stack - _bp +14
                                    963 ;j                         Allocated to stack - _bp +18
                                    964 ;f                         Allocated to registers r3 
                                    965 ;sloc0                     Allocated to stack - _bp +1
                                    966 ;sloc1                     Allocated to stack - _bp +2
                                    967 ;sloc2                     Allocated to stack - _bp +3
                                    968 ;sloc3                     Allocated to stack - _bp +17
                                    969 ;sloc4                     Allocated to stack - _bp +4
                                    970 ;sloc5                     Allocated to stack - _bp +5
                                    971 ;sloc6                     Allocated to stack - _bp +6
                                    972 ;sloc7                     Allocated to stack - _bp +7
                                    973 ;------------------------------------------------------------
                                    974 ;	walk.c:124: static void walk(struct node *nstart) {
                                    975 ;	-----------------------------------------
                                    976 ;	 function walk
                                    977 ;	-----------------------------------------
      0002D7                        978 _walk:
      0002D7 C0*00            [24]  979 	push	_bp
      0002D9 E5 81            [12]  980 	mov	a,sp
      0002DB F5*00            [12]  981 	mov	_bp,a
      0002DD 24 12            [12]  982 	add	a,#0x12
      0002DF F5 81            [12]  983 	mov	sp,a
      0002E1 AD 82            [24]  984 	mov	r5,dpl
      0002E3 AE 83            [24]  985 	mov	r6,dph
      0002E5 AF F0            [24]  986 	mov	r7,b
                                    987 ;	walk.c:128: cur = *nstart;
      0002E7 E5*00            [12]  988 	mov	a,_bp
      0002E9 24 0A            [12]  989 	add	a,#0x0a
      0002EB F9               [12]  990 	mov	r1,a
      0002EC FA               [12]  991 	mov	r2,a
      0002ED 7B 00            [12]  992 	mov	r3,#0x00
      0002EF 7C 40            [12]  993 	mov	r4,#0x40
      0002F1 C0 01            [24]  994 	push	ar1
      0002F3 74 04            [12]  995 	mov	a,#0x04
      0002F5 C0 E0            [24]  996 	push	acc
      0002F7 E4               [12]  997 	clr	a
      0002F8 C0 E0            [24]  998 	push	acc
      0002FA C0 05            [24]  999 	push	ar5
      0002FC C0 06            [24] 1000 	push	ar6
      0002FE C0 07            [24] 1001 	push	ar7
      000300 8A 82            [24] 1002 	mov	dpl,r2
      000302 8B 83            [24] 1003 	mov	dph,r3
      000304 8C F0            [24] 1004 	mov	b,r4
      000306 12r00r00         [24] 1005 	lcall	___memcpy
      000309 E5 81            [12] 1006 	mov	a,sp
      00030B 24 FB            [12] 1007 	add	a,#0xfb
      00030D F5 81            [12] 1008 	mov	sp,a
      00030F D0 01            [24] 1009 	pop	ar1
                                   1010 ;	walk.c:130: process:
      000311 E5*00            [12] 1011 	mov	a,_bp
      000313 24 06            [12] 1012 	add	a,#0x06
      000315 F8               [12] 1013 	mov	r0,a
      000316 A6 01            [24] 1014 	mov	@r0,ar1
      000318 E5*00            [12] 1015 	mov	a,_bp
      00031A 24 0E            [12] 1016 	add	a,#0x0e
      00031C FE               [12] 1017 	mov	r6,a
      00031D E5*00            [12] 1018 	mov	a,_bp
      00031F 24 03            [12] 1019 	add	a,#0x03
      000321 F8               [12] 1020 	mov	r0,a
      000322 A6 01            [24] 1021 	mov	@r0,ar1
      000324 E5*00            [12] 1022 	mov	a,_bp
      000326 24 05            [12] 1023 	add	a,#0x05
      000328 F8               [12] 1024 	mov	r0,a
      000329 A6 01            [24] 1025 	mov	@r0,ar1
      00032B E5*00            [12] 1026 	mov	a,_bp
      00032D 24 04            [12] 1027 	add	a,#0x04
      00032F F8               [12] 1028 	mov	r0,a
      000330 A6 06            [24] 1029 	mov	@r0,ar6
      000332 89 02            [24] 1030 	mov	ar2,r1
      000334 A8*00            [24] 1031 	mov	r0,_bp
      000336 08               [12] 1032 	inc	r0
      000337 A6 06            [24] 1033 	mov	@r0,ar6
      000339 A8*00            [24] 1034 	mov	r0,_bp
      00033B 08               [12] 1035 	inc	r0
      00033C 08               [12] 1036 	inc	r0
      00033D A6 01            [24] 1037 	mov	@r0,ar1
      00033F 74 02            [12] 1038 	mov	a,#0x02
      000341 29               [12] 1039 	add	a,r1
      000342 F8               [12] 1040 	mov	r0,a
      000343                       1041 00101$:
                                   1042 ;	walk.c:131: g[cur.r][cur.c] = 0xaa;
      000343 C0 02            [24] 1043 	push	ar2
      000345 87 02            [24] 1044 	mov	ar2,@r1
      000347 09               [12] 1045 	inc	r1
      000348 87 05            [24] 1046 	mov	ar5,@r1
      00034A 19               [12] 1047 	dec	r1
      00034B C0 06            [24] 1048 	push	ar6
      00034D C0 01            [24] 1049 	push	ar1
      00034F C0 00            [24] 1050 	push	ar0
      000351 C0 02            [24] 1051 	push	ar2
      000353 C0 05            [24] 1052 	push	ar5
      000355 90 00 C9         [24] 1053 	mov	dptr,#0x00c9
      000358 12r00r00         [24] 1054 	lcall	__mulint
      00035B AA 82            [24] 1055 	mov	r2,dpl
      00035D AD 83            [24] 1056 	mov	r5,dph
      00035F 15 81            [12] 1057 	dec	sp
      000361 15 81            [12] 1058 	dec	sp
      000363 D0 00            [24] 1059 	pop	ar0
      000365 D0 01            [24] 1060 	pop	ar1
      000367 EA               [12] 1061 	mov	a,r2
      000368 24r00            [12] 1062 	add	a,#_g
      00036A FF               [12] 1063 	mov	r7,a
      00036B ED               [12] 1064 	mov	a,r5
      00036C 34s00            [12] 1065 	addc	a,#(_g >> 8)
      00036E FC               [12] 1066 	mov	r4,a
      00036F 86 02            [24] 1067 	mov	ar2,@r0
      000371 08               [12] 1068 	inc	r0
      000372 86 05            [24] 1069 	mov	ar5,@r0
      000374 18               [12] 1070 	dec	r0
      000375 EA               [12] 1071 	mov	a,r2
      000376 2F               [12] 1072 	add	a,r7
      000377 F5 82            [12] 1073 	mov	dpl,a
      000379 ED               [12] 1074 	mov	a,r5
      00037A 3C               [12] 1075 	addc	a,r4
      00037B F5 83            [12] 1076 	mov	dph,a
      00037D 74 AA            [12] 1077 	mov	a,#0xaa
      00037F F0               [24] 1078 	movx	@dptr,a
                                   1079 ;	walk.c:132: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000380 86 02            [24] 1080 	mov	ar2,@r0
      000382 08               [12] 1081 	inc	r0
      000383 86 05            [24] 1082 	mov	ar5,@r0
      000385 18               [12] 1083 	dec	r0
      000386 74 01            [12] 1084 	mov	a,#0x01
      000388 2A               [12] 1085 	add	a,r2
      000389 FF               [12] 1086 	mov	r7,a
      00038A E4               [12] 1087 	clr	a
      00038B 3D               [12] 1088 	addc	a,r5
      00038C FC               [12] 1089 	mov	r4,a
      00038D 87 02            [24] 1090 	mov	ar2,@r1
      00038F 09               [12] 1091 	inc	r1
      000390 87 05            [24] 1092 	mov	ar5,@r1
      000392 19               [12] 1093 	dec	r1
      000393 74 04            [12] 1094 	mov	a,#0x04
      000395 2A               [12] 1095 	add	a,r2
      000396 FA               [12] 1096 	mov	r2,a
      000397 E4               [12] 1097 	clr	a
      000398 3D               [12] 1098 	addc	a,r5
      000399 FD               [12] 1099 	mov	r5,a
      00039A C0 02            [24] 1100 	push	ar2
      00039C C0 01            [24] 1101 	push	ar1
      00039E C0 00            [24] 1102 	push	ar0
      0003A0 C0 07            [24] 1103 	push	ar7
      0003A2 C0 04            [24] 1104 	push	ar4
      0003A4 C0 02            [24] 1105 	push	ar2
      0003A6 C0 05            [24] 1106 	push	ar5
      0003A8 74r0D            [12] 1107 	mov	a,#___str_1
      0003AA C0 E0            [24] 1108 	push	acc
      0003AC 74s00            [12] 1109 	mov	a,#(___str_1 >> 8)
      0003AE C0 E0            [24] 1110 	push	acc
      0003B0 74 80            [12] 1111 	mov	a,#0x80
      0003B2 C0 E0            [24] 1112 	push	acc
      0003B4 12r00r00         [24] 1113 	lcall	_printf
      0003B7 E5 81            [12] 1114 	mov	a,sp
      0003B9 24 F9            [12] 1115 	add	a,#0xf9
      0003BB F5 81            [12] 1116 	mov	sp,a
                                   1117 ;	walk.c:133: flashOE(OE76_MASK7);
      0003BD 75 82 80         [24] 1118 	mov	dpl,#0x80
      0003C0 12r00r29         [24] 1119 	lcall	_flashOE
      0003C3 D0 00            [24] 1120 	pop	ar0
      0003C5 D0 01            [24] 1121 	pop	ar1
      0003C7 D0 02            [24] 1122 	pop	ar2
      0003C9 D0 06            [24] 1123 	pop	ar6
                                   1124 ;	walk.c:161: return;
      0003CB D0 02            [24] 1125 	pop	ar2
                                   1126 ;	walk.c:135: next:
      0003CD                       1127 00102$:
                                   1128 ;	walk.c:136: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003CD C0 02            [24] 1129 	push	ar2
      0003CF 86 07            [24] 1130 	mov	ar7,@r0
      0003D1 08               [12] 1131 	inc	r0
      0003D2 86 04            [24] 1132 	mov	ar4,@r0
      0003D4 18               [12] 1133 	dec	r0
      0003D5 87 02            [24] 1134 	mov	ar2,@r1
      0003D7 09               [12] 1135 	inc	r1
      0003D8 87 05            [24] 1136 	mov	ar5,@r1
      0003DA 19               [12] 1137 	dec	r1
      0003DB C0 06            [24] 1138 	push	ar6
      0003DD C0 02            [24] 1139 	push	ar2
      0003DF C0 01            [24] 1140 	push	ar1
      0003E1 C0 00            [24] 1141 	push	ar0
      0003E3 C0 07            [24] 1142 	push	ar7
      0003E5 C0 04            [24] 1143 	push	ar4
      0003E7 C0 02            [24] 1144 	push	ar2
      0003E9 C0 05            [24] 1145 	push	ar5
      0003EB 90rBCr70         [24] 1146 	mov	dptr,#_sp
      0003EE E0               [24] 1147 	movx	a,@dptr
      0003EF C0 E0            [24] 1148 	push	acc
      0003F1 A3               [24] 1149 	inc	dptr
      0003F2 E0               [24] 1150 	movx	a,@dptr
      0003F3 C0 E0            [24] 1151 	push	acc
      0003F5 74r17            [12] 1152 	mov	a,#___str_2
      0003F7 C0 E0            [24] 1153 	push	acc
      0003F9 74s00            [12] 1154 	mov	a,#(___str_2 >> 8)
      0003FB C0 E0            [24] 1155 	push	acc
      0003FD 74 80            [12] 1156 	mov	a,#0x80
      0003FF C0 E0            [24] 1157 	push	acc
      000401 12r00r00         [24] 1158 	lcall	_printf
      000404 E5 81            [12] 1159 	mov	a,sp
      000406 24 F7            [12] 1160 	add	a,#0xf7
      000408 F5 81            [12] 1161 	mov	sp,a
      00040A D0 00            [24] 1162 	pop	ar0
      00040C D0 01            [24] 1163 	pop	ar1
      00040E D0 02            [24] 1164 	pop	ar2
      000410 D0 06            [24] 1165 	pop	ar6
                                   1166 ;	walk.c:138: for (j = 0, f = 0; j < NMAX; j++) {
      000412 7B 00            [12] 1167 	mov	r3,#0x00
      000414 C0 00            [24] 1168 	push	ar0
      000416 E5*00            [12] 1169 	mov	a,_bp
      000418 24 12            [12] 1170 	add	a,#0x12
      00041A F8               [12] 1171 	mov	r0,a
      00041B 76 00            [12] 1172 	mov	@r0,#0x00
      00041D D0 00            [24] 1173 	pop	ar0
                                   1174 ;	walk.c:161: return;
      00041F D0 02            [24] 1175 	pop	ar2
                                   1176 ;	walk.c:138: for (j = 0, f = 0; j < NMAX; j++) {
      000421                       1177 00119$:
      000421 C0 00            [24] 1178 	push	ar0
      000423 E5*00            [12] 1179 	mov	a,_bp
      000425 24 12            [12] 1180 	add	a,#0x12
      000427 F8               [12] 1181 	mov	r0,a
      000428 B6 10 00         [24] 1182 	cjne	@r0,#0x10,00159$
      00042B                       1183 00159$:
      00042B D0 00            [24] 1184 	pop	ar0
      00042D 40 03            [24] 1185 	jc	00160$
      00042F 02r04rAF         [24] 1186 	ljmp	00106$
      000432                       1187 00160$:
                                   1188 ;	walk.c:139: if (!update(&t, &cur, j)) continue;
      000432 C0 02            [24] 1189 	push	ar2
      000434 C0 00            [24] 1190 	push	ar0
      000436 E5*00            [12] 1191 	mov	a,_bp
      000438 24 06            [12] 1192 	add	a,#0x06
      00043A F8               [12] 1193 	mov	r0,a
      00043B C0 01            [24] 1194 	push	ar1
      00043D E5*00            [12] 1195 	mov	a,_bp
      00043F 24 07            [12] 1196 	add	a,#0x07
      000441 F9               [12] 1197 	mov	r1,a
      000442 E6               [12] 1198 	mov	a,@r0
      000443 F7               [12] 1199 	mov	@r1,a
      000444 09               [12] 1200 	inc	r1
      000445 77 00            [12] 1201 	mov	@r1,#0x00
      000447 09               [12] 1202 	inc	r1
      000448 77 40            [12] 1203 	mov	@r1,#0x40
      00044A D0 01            [24] 1204 	pop	ar1
      00044C D0 00            [24] 1205 	pop	ar0
      00044E 8E 04            [24] 1206 	mov	ar4,r6
      000450 7D 00            [12] 1207 	mov	r5,#0x00
      000452 7F 40            [12] 1208 	mov	r7,#0x40
      000454 C0 06            [24] 1209 	push	ar6
      000456 C0 03            [24] 1210 	push	ar3
      000458 C0 02            [24] 1211 	push	ar2
      00045A C0 01            [24] 1212 	push	ar1
      00045C C0 00            [24] 1213 	push	ar0
      00045E 85 00 F0         [24] 1214 	mov	b,ar0
      000461 E5*00            [12] 1215 	mov	a,_bp
      000463 24 12            [12] 1216 	add	a,#0x12
      000465 F8               [12] 1217 	mov	r0,a
      000466 E6               [12] 1218 	mov	a,@r0
      000467 C0 E0            [24] 1219 	push	acc
      000469 A8 F0            [24] 1220 	mov	r0,b
      00046B 85 00 F0         [24] 1221 	mov	b,ar0
      00046E E5*00            [12] 1222 	mov	a,_bp
      000470 24 07            [12] 1223 	add	a,#0x07
      000472 F8               [12] 1224 	mov	r0,a
      000473 E6               [12] 1225 	mov	a,@r0
      000474 C0 E0            [24] 1226 	push	acc
      000476 08               [12] 1227 	inc	r0
      000477 E6               [12] 1228 	mov	a,@r0
      000478 C0 E0            [24] 1229 	push	acc
      00047A 08               [12] 1230 	inc	r0
      00047B E6               [12] 1231 	mov	a,@r0
      00047C C0 E0            [24] 1232 	push	acc
      00047E 8C 82            [24] 1233 	mov	dpl,r4
      000480 8D 83            [24] 1234 	mov	dph,r5
      000482 8F F0            [24] 1235 	mov	b,r7
      000484 12r00r4A         [24] 1236 	lcall	_update
      000487 AD 82            [24] 1237 	mov	r5,dpl
      000489 AF 83            [24] 1238 	mov	r7,dph
      00048B E5 81            [12] 1239 	mov	a,sp
      00048D 24 FC            [12] 1240 	add	a,#0xfc
      00048F F5 81            [12] 1241 	mov	sp,a
      000491 D0 00            [24] 1242 	pop	ar0
      000493 D0 01            [24] 1243 	pop	ar1
      000495 D0 02            [24] 1244 	pop	ar2
      000497 D0 03            [24] 1245 	pop	ar3
      000499 D0 06            [24] 1246 	pop	ar6
      00049B D0 02            [24] 1247 	pop	ar2
      00049D ED               [12] 1248 	mov	a,r5
      00049E 4F               [12] 1249 	orl	a,r7
      00049F 60 01            [24] 1250 	jz	00105$
                                   1251 ;	walk.c:140: f++;
      0004A1 0B               [12] 1252 	inc	r3
      0004A2                       1253 00105$:
                                   1254 ;	walk.c:138: for (j = 0, f = 0; j < NMAX; j++) {
      0004A2 C0 00            [24] 1255 	push	ar0
      0004A4 E5*00            [12] 1256 	mov	a,_bp
      0004A6 24 12            [12] 1257 	add	a,#0x12
      0004A8 F8               [12] 1258 	mov	r0,a
      0004A9 06               [12] 1259 	inc	@r0
      0004AA D0 00            [24] 1260 	pop	ar0
      0004AC 02r04r21         [24] 1261 	ljmp	00119$
      0004AF                       1262 00106$:
                                   1263 ;	walk.c:143: if (f) {
      0004AF EB               [12] 1264 	mov	a,r3
      0004B0 70 03            [24] 1265 	jnz	00162$
      0004B2 02r05rE7         [24] 1266 	ljmp	00115$
      0004B5                       1267 00162$:
                                   1268 ;	walk.c:144: while (1) {
      0004B5                       1269 00112$:
                                   1270 ;	walk.c:145: j = rand() % NMAX;
      0004B5 C0 02            [24] 1271 	push	ar2
      0004B7 C0 06            [24] 1272 	push	ar6
      0004B9 C0 02            [24] 1273 	push	ar2
      0004BB C0 01            [24] 1274 	push	ar1
      0004BD C0 00            [24] 1275 	push	ar0
      0004BF 12r00r00         [24] 1276 	lcall	_rand
      0004C2 AD 82            [24] 1277 	mov	r5,dpl
      0004C4 AF 83            [24] 1278 	mov	r7,dph
      0004C6 74 10            [12] 1279 	mov	a,#0x10
      0004C8 C0 E0            [24] 1280 	push	acc
      0004CA E4               [12] 1281 	clr	a
      0004CB C0 E0            [24] 1282 	push	acc
      0004CD 8D 82            [24] 1283 	mov	dpl,r5
      0004CF 8F 83            [24] 1284 	mov	dph,r7
      0004D1 12r00r00         [24] 1285 	lcall	__modsint
      0004D4 AD 82            [24] 1286 	mov	r5,dpl
      0004D6 15 81            [12] 1287 	dec	sp
      0004D8 15 81            [12] 1288 	dec	sp
      0004DA D0 00            [24] 1289 	pop	ar0
      0004DC D0 01            [24] 1290 	pop	ar1
      0004DE D0 02            [24] 1291 	pop	ar2
      0004E0 D0 06            [24] 1292 	pop	ar6
      0004E2 8D 04            [24] 1293 	mov	ar4,r5
                                   1294 ;	walk.c:146: if (!update(&t, &cur, j)) continue;
      0004E4 C0 00            [24] 1295 	push	ar0
      0004E6 E5*00            [12] 1296 	mov	a,_bp
      0004E8 24 05            [12] 1297 	add	a,#0x05
      0004EA F8               [12] 1298 	mov	r0,a
      0004EB C0 01            [24] 1299 	push	ar1
      0004ED E5*00            [12] 1300 	mov	a,_bp
      0004EF 24 07            [12] 1301 	add	a,#0x07
      0004F1 F9               [12] 1302 	mov	r1,a
      0004F2 E6               [12] 1303 	mov	a,@r0
      0004F3 F7               [12] 1304 	mov	@r1,a
      0004F4 09               [12] 1305 	inc	r1
      0004F5 77 00            [12] 1306 	mov	@r1,#0x00
      0004F7 09               [12] 1307 	inc	r1
      0004F8 77 40            [12] 1308 	mov	@r1,#0x40
      0004FA D0 01            [24] 1309 	pop	ar1
      0004FC E5*00            [12] 1310 	mov	a,_bp
      0004FE 24 04            [12] 1311 	add	a,#0x04
      000500 F8               [12] 1312 	mov	r0,a
      000501 86 02            [24] 1313 	mov	ar2,@r0
      000503 7D 00            [12] 1314 	mov	r5,#0x00
      000505 7F 40            [12] 1315 	mov	r7,#0x40
      000507 D0 00            [24] 1316 	pop	ar0
      000509 C0 06            [24] 1317 	push	ar6
      00050B C0 02            [24] 1318 	push	ar2
      00050D C0 01            [24] 1319 	push	ar1
      00050F C0 00            [24] 1320 	push	ar0
      000511 C0 04            [24] 1321 	push	ar4
      000513 85 00 F0         [24] 1322 	mov	b,ar0
      000516 E5*00            [12] 1323 	mov	a,_bp
      000518 24 07            [12] 1324 	add	a,#0x07
      00051A F8               [12] 1325 	mov	r0,a
      00051B E6               [12] 1326 	mov	a,@r0
      00051C C0 E0            [24] 1327 	push	acc
      00051E 08               [12] 1328 	inc	r0
      00051F E6               [12] 1329 	mov	a,@r0
      000520 C0 E0            [24] 1330 	push	acc
      000522 08               [12] 1331 	inc	r0
      000523 E6               [12] 1332 	mov	a,@r0
      000524 C0 E0            [24] 1333 	push	acc
      000526 8A 82            [24] 1334 	mov	dpl,r2
      000528 8D 83            [24] 1335 	mov	dph,r5
      00052A 8F F0            [24] 1336 	mov	b,r7
      00052C 12r00r4A         [24] 1337 	lcall	_update
      00052F AD 82            [24] 1338 	mov	r5,dpl
      000531 AF 83            [24] 1339 	mov	r7,dph
      000533 E5 81            [12] 1340 	mov	a,sp
      000535 24 FC            [12] 1341 	add	a,#0xfc
      000537 F5 81            [12] 1342 	mov	sp,a
      000539 D0 00            [24] 1343 	pop	ar0
      00053B D0 01            [24] 1344 	pop	ar1
      00053D D0 02            [24] 1345 	pop	ar2
      00053F D0 06            [24] 1346 	pop	ar6
      000541 D0 02            [24] 1347 	pop	ar2
      000543 ED               [12] 1348 	mov	a,r5
      000544 4F               [12] 1349 	orl	a,r7
      000545 70 03            [24] 1350 	jnz	00163$
      000547 02r04rB5         [24] 1351 	ljmp	00112$
      00054A                       1352 00163$:
                                   1353 ;	walk.c:147: if (!stpush(&cur)) bang();
      00054A 8A 04            [24] 1354 	mov	ar4,r2
      00054C 7D 00            [12] 1355 	mov	r5,#0x00
      00054E 7F 40            [12] 1356 	mov	r7,#0x40
      000550 8C 82            [24] 1357 	mov	dpl,r4
      000552 8D 83            [24] 1358 	mov	dph,r5
      000554 8F F0            [24] 1359 	mov	b,r7
      000556 C0 06            [24] 1360 	push	ar6
      000558 C0 02            [24] 1361 	push	ar2
      00055A C0 01            [24] 1362 	push	ar1
      00055C C0 00            [24] 1363 	push	ar0
      00055E 12r0Ar40         [24] 1364 	lcall	_stpush
      000561 E5 82            [12] 1365 	mov	a,dpl
      000563 85 83 F0         [24] 1366 	mov	b,dph
      000566 D0 00            [24] 1367 	pop	ar0
      000568 D0 01            [24] 1368 	pop	ar1
      00056A D0 02            [24] 1369 	pop	ar2
      00056C D0 06            [24] 1370 	pop	ar6
      00056E 45 F0            [12] 1371 	orl	a,b
      000570 70 13            [24] 1372 	jnz	00110$
      000572 C0 06            [24] 1373 	push	ar6
      000574 C0 02            [24] 1374 	push	ar2
      000576 C0 01            [24] 1375 	push	ar1
      000578 C0 00            [24] 1376 	push	ar0
      00057A 12r00r1D         [24] 1377 	lcall	_bang
      00057D D0 00            [24] 1378 	pop	ar0
      00057F D0 01            [24] 1379 	pop	ar1
      000581 D0 02            [24] 1380 	pop	ar2
      000583 D0 06            [24] 1381 	pop	ar6
      000585                       1382 00110$:
                                   1383 ;	walk.c:148: cur = t;
      000585 C0 02            [24] 1384 	push	ar2
      000587 C0 00            [24] 1385 	push	ar0
      000589 A8*00            [24] 1386 	mov	r0,_bp
      00058B 08               [12] 1387 	inc	r0
      00058C C0 01            [24] 1388 	push	ar1
      00058E E5*00            [12] 1389 	mov	a,_bp
      000590 24 07            [12] 1390 	add	a,#0x07
      000592 F9               [12] 1391 	mov	r1,a
      000593 E6               [12] 1392 	mov	a,@r0
      000594 F7               [12] 1393 	mov	@r1,a
      000595 09               [12] 1394 	inc	r1
      000596 77 00            [12] 1395 	mov	@r1,#0x00
      000598 09               [12] 1396 	inc	r1
      000599 77 40            [12] 1397 	mov	@r1,#0x40
      00059B D0 01            [24] 1398 	pop	ar1
      00059D A8*00            [24] 1399 	mov	r0,_bp
      00059F 08               [12] 1400 	inc	r0
      0005A0 08               [12] 1401 	inc	r0
      0005A1 86 02            [24] 1402 	mov	ar2,@r0
      0005A3 7B 00            [12] 1403 	mov	r3,#0x00
      0005A5 7F 40            [12] 1404 	mov	r7,#0x40
      0005A7 D0 00            [24] 1405 	pop	ar0
      0005A9 C0 06            [24] 1406 	push	ar6
      0005AB C0 02            [24] 1407 	push	ar2
      0005AD C0 01            [24] 1408 	push	ar1
      0005AF C0 00            [24] 1409 	push	ar0
      0005B1 74 04            [12] 1410 	mov	a,#0x04
      0005B3 C0 E0            [24] 1411 	push	acc
      0005B5 E4               [12] 1412 	clr	a
      0005B6 C0 E0            [24] 1413 	push	acc
      0005B8 85 00 F0         [24] 1414 	mov	b,ar0
      0005BB E5*00            [12] 1415 	mov	a,_bp
      0005BD 24 07            [12] 1416 	add	a,#0x07
      0005BF F8               [12] 1417 	mov	r0,a
      0005C0 E6               [12] 1418 	mov	a,@r0
      0005C1 C0 E0            [24] 1419 	push	acc
      0005C3 08               [12] 1420 	inc	r0
      0005C4 E6               [12] 1421 	mov	a,@r0
      0005C5 C0 E0            [24] 1422 	push	acc
      0005C7 08               [12] 1423 	inc	r0
      0005C8 E6               [12] 1424 	mov	a,@r0
      0005C9 C0 E0            [24] 1425 	push	acc
      0005CB 8A 82            [24] 1426 	mov	dpl,r2
      0005CD 8B 83            [24] 1427 	mov	dph,r3
      0005CF 8F F0            [24] 1428 	mov	b,r7
      0005D1 12r00r00         [24] 1429 	lcall	___memcpy
      0005D4 E5 81            [12] 1430 	mov	a,sp
      0005D6 24 FB            [12] 1431 	add	a,#0xfb
      0005D8 F5 81            [12] 1432 	mov	sp,a
      0005DA D0 00            [24] 1433 	pop	ar0
      0005DC D0 01            [24] 1434 	pop	ar1
      0005DE D0 02            [24] 1435 	pop	ar2
      0005E0 D0 06            [24] 1436 	pop	ar6
                                   1437 ;	walk.c:149: goto process;
      0005E2 D0 02            [24] 1438 	pop	ar2
      0005E4 02r03r43         [24] 1439 	ljmp	00101$
      0005E7                       1440 00115$:
                                   1441 ;	walk.c:153: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005E7 86 05            [24] 1442 	mov	ar5,@r0
      0005E9 08               [12] 1443 	inc	r0
      0005EA 86 07            [24] 1444 	mov	ar7,@r0
      0005EC 18               [12] 1445 	dec	r0
      0005ED 0D               [12] 1446 	inc	r5
      0005EE BD 00 01         [24] 1447 	cjne	r5,#0x00,00165$
      0005F1 0F               [12] 1448 	inc	r7
      0005F2                       1449 00165$:
      0005F2 87 03            [24] 1450 	mov	ar3,@r1
      0005F4 09               [12] 1451 	inc	r1
      0005F5 87 04            [24] 1452 	mov	ar4,@r1
      0005F7 19               [12] 1453 	dec	r1
      0005F8 74 04            [12] 1454 	mov	a,#0x04
      0005FA 2B               [12] 1455 	add	a,r3
      0005FB FB               [12] 1456 	mov	r3,a
      0005FC E4               [12] 1457 	clr	a
      0005FD 3C               [12] 1458 	addc	a,r4
      0005FE FC               [12] 1459 	mov	r4,a
      0005FF C0 06            [24] 1460 	push	ar6
      000601 C0 02            [24] 1461 	push	ar2
      000603 C0 01            [24] 1462 	push	ar1
      000605 C0 00            [24] 1463 	push	ar0
      000607 C0 05            [24] 1464 	push	ar5
      000609 C0 07            [24] 1465 	push	ar7
      00060B C0 03            [24] 1466 	push	ar3
      00060D C0 04            [24] 1467 	push	ar4
      00060F 74r2A            [12] 1468 	mov	a,#___str_3
      000611 C0 E0            [24] 1469 	push	acc
      000613 74s00            [12] 1470 	mov	a,#(___str_3 >> 8)
      000615 C0 E0            [24] 1471 	push	acc
      000617 74 80            [12] 1472 	mov	a,#0x80
      000619 C0 E0            [24] 1473 	push	acc
      00061B 12r00r00         [24] 1474 	lcall	_printf
      00061E E5 81            [12] 1475 	mov	a,sp
      000620 24 F9            [12] 1476 	add	a,#0xf9
      000622 F5 81            [12] 1477 	mov	sp,a
                                   1478 ;	walk.c:154: flashOE(OE76_MASK7);
      000624 75 82 80         [24] 1479 	mov	dpl,#0x80
      000627 12r00r29         [24] 1480 	lcall	_flashOE
      00062A D0 00            [24] 1481 	pop	ar0
      00062C D0 01            [24] 1482 	pop	ar1
      00062E D0 02            [24] 1483 	pop	ar2
      000630 D0 06            [24] 1484 	pop	ar6
                                   1485 ;	walk.c:156: if (stpop(&cur)) {
      000632 C0 00            [24] 1486 	push	ar0
      000634 E5*00            [12] 1487 	mov	a,_bp
      000636 24 03            [12] 1488 	add	a,#0x03
      000638 F8               [12] 1489 	mov	r0,a
      000639 86 04            [24] 1490 	mov	ar4,@r0
      00063B 7D 00            [12] 1491 	mov	r5,#0x00
      00063D 7F 40            [12] 1492 	mov	r7,#0x40
      00063F D0 00            [24] 1493 	pop	ar0
      000641 8C 82            [24] 1494 	mov	dpl,r4
      000643 8D 83            [24] 1495 	mov	dph,r5
      000645 8F F0            [24] 1496 	mov	b,r7
      000647 C0 06            [24] 1497 	push	ar6
      000649 C0 02            [24] 1498 	push	ar2
      00064B C0 01            [24] 1499 	push	ar1
      00064D C0 00            [24] 1500 	push	ar0
      00064F 12r0ArA1         [24] 1501 	lcall	_stpop
      000652 E5 82            [12] 1502 	mov	a,dpl
      000654 85 83 F0         [24] 1503 	mov	b,dph
      000657 D0 00            [24] 1504 	pop	ar0
      000659 D0 01            [24] 1505 	pop	ar1
      00065B D0 02            [24] 1506 	pop	ar2
      00065D D0 06            [24] 1507 	pop	ar6
      00065F 45 F0            [12] 1508 	orl	a,b
      000661 60 19            [24] 1509 	jz	00117$
                                   1510 ;	walk.c:157: flashOE(OE76_MASK6);
      000663 75 82 40         [24] 1511 	mov	dpl,#0x40
      000666 C0 06            [24] 1512 	push	ar6
      000668 C0 02            [24] 1513 	push	ar2
      00066A C0 01            [24] 1514 	push	ar1
      00066C C0 00            [24] 1515 	push	ar0
      00066E 12r00r29         [24] 1516 	lcall	_flashOE
      000671 D0 00            [24] 1517 	pop	ar0
      000673 D0 01            [24] 1518 	pop	ar1
      000675 D0 02            [24] 1519 	pop	ar2
      000677 D0 06            [24] 1520 	pop	ar6
                                   1521 ;	walk.c:158: goto next;
      000679 02r03rCD         [24] 1522 	ljmp	00102$
      00067C                       1523 00117$:
                                   1524 ;	walk.c:161: return;
                                   1525 ;	walk.c:162: }
      00067C 85*00 81         [24] 1526 	mov	sp,_bp
      00067F D0*00            [24] 1527 	pop	_bp
      000681 22               [24] 1528 	ret
                                   1529 ;------------------------------------------------------------
                                   1530 ;Allocation info for local variables in function 'main'
                                   1531 ;------------------------------------------------------------
                                   1532 ;initial                   Allocated to stack - _bp +7
                                   1533 ;N                         Allocated to stack - _bp +11
                                   1534 ;i                         Allocated to stack - _bp +5
                                   1535 ;j                         Allocated to registers r2 r6 
                                   1536 ;sloc0                     Allocated to stack - _bp +1
                                   1537 ;sloc1                     Allocated to stack - _bp +3
                                   1538 ;sloc2                     Allocated to stack - _bp +15
                                   1539 ;------------------------------------------------------------
                                   1540 ;	walk.c:164: int main(void) {
                                   1541 ;	-----------------------------------------
                                   1542 ;	 function main
                                   1543 ;	-----------------------------------------
      000682                       1544 _main:
      000682 C0*00            [24] 1545 	push	_bp
      000684 E5 81            [12] 1546 	mov	a,sp
      000686 F5*00            [12] 1547 	mov	_bp,a
      000688 24 0C            [12] 1548 	add	a,#0x0c
      00068A F5 81            [12] 1549 	mov	sp,a
                                   1550 ;	walk.c:169: i0 = 1u;
      00068C 78r00            [12] 1551 	mov	r0,#_i0
      00068E 76 01            [12] 1552 	mov	@r0,#0x01
                                   1553 ;	walk.c:171: P1_7 = 1;
                                   1554 ;	assignBit
      000690 D2 97            [12] 1555 	setb	_P1_7
                                   1556 ;	walk.c:172: IT0 = 1;
                                   1557 ;	assignBit
      000692 D2 88            [12] 1558 	setb	_IT0
                                   1559 ;	walk.c:173: EX0 = 1;
                                   1560 ;	assignBit
      000694 D2 A8            [12] 1561 	setb	_EX0
                                   1562 ;	walk.c:174: EA = 1;
                                   1563 ;	assignBit
      000696 D2 AF            [12] 1564 	setb	_EA
                                   1565 ;	walk.c:176: srand(*R);
      000698 90r00r00         [24] 1566 	mov	dptr,#_R
      00069B E0               [24] 1567 	movx	a,@dptr
      00069C FE               [12] 1568 	mov	r6,a
      00069D A3               [24] 1569 	inc	dptr
      00069E E0               [24] 1570 	movx	a,@dptr
      00069F FF               [12] 1571 	mov	r7,a
      0006A0 8E 82            [24] 1572 	mov	dpl,r6
      0006A2 8F 83            [24] 1573 	mov	dph,r7
      0006A4 E0               [24] 1574 	movx	a,@dptr
      0006A5 FE               [12] 1575 	mov	r6,a
      0006A6 A3               [24] 1576 	inc	dptr
      0006A7 E0               [24] 1577 	movx	a,@dptr
      0006A8 FF               [12] 1578 	mov	r7,a
      0006A9 8E 82            [24] 1579 	mov	dpl,r6
      0006AB 8F 83            [24] 1580 	mov	dph,r7
      0006AD 12r00r00         [24] 1581 	lcall	_srand
                                   1582 ;	walk.c:177: stinit();
      0006B0 12r0Ar37         [24] 1583 	lcall	_stinit
                                   1584 ;	walk.c:179: puts("\033[2J\033[?25l");
      0006B3 90r00r34         [24] 1585 	mov	dptr,#___str_4
      0006B6 75 F0 80         [24] 1586 	mov	b,#0x80
      0006B9 12r00r00         [24] 1587 	lcall	_puts
                                   1588 ;	walk.c:181: while (i0) {
      0006BC E5*00            [12] 1589 	mov	a,_bp
      0006BE 24 07            [12] 1590 	add	a,#0x07
      0006C0 F9               [12] 1591 	mov	r1,a
      0006C1 FF               [12] 1592 	mov	r7,a
      0006C2 E5*00            [12] 1593 	mov	a,_bp
      0006C4 24 0B            [12] 1594 	add	a,#0x0b
      0006C6 F8               [12] 1595 	mov	r0,a
      0006C7 E4               [12] 1596 	clr	a
      0006C8 F6               [12] 1597 	mov	@r0,a
      0006C9 08               [12] 1598 	inc	r0
      0006CA F6               [12] 1599 	mov	@r0,a
      0006CB                       1600 00108$:
      0006CB 78r00            [12] 1601 	mov	r0,#_i0
      0006CD E6               [12] 1602 	mov	a,@r0
      0006CE 70 03            [24] 1603 	jnz	00181$
      0006D0 02r0Ar20         [24] 1604 	ljmp	00110$
      0006D3                       1605 00181$:
                                   1606 ;	walk.c:182: for (i = 0; i < ROWS; i++)
      0006D3 7B 00            [12] 1607 	mov	r3,#0x00
      0006D5 7C 00            [12] 1608 	mov	r4,#0x00
      0006D7 A8*00            [24] 1609 	mov	r0,_bp
      0006D9 08               [12] 1610 	inc	r0
      0006DA E4               [12] 1611 	clr	a
      0006DB F6               [12] 1612 	mov	@r0,a
      0006DC 08               [12] 1613 	inc	r0
      0006DD F6               [12] 1614 	mov	@r0,a
                                   1615 ;	walk.c:183: for (j = 0; j < COLS; j++)
      0006DE                       1616 00124$:
      0006DE A8*00            [24] 1617 	mov	r0,_bp
      0006E0 08               [12] 1618 	inc	r0
      0006E1 C0 01            [24] 1619 	push	ar1
      0006E3 E5*00            [12] 1620 	mov	a,_bp
      0006E5 24 03            [12] 1621 	add	a,#0x03
      0006E7 F9               [12] 1622 	mov	r1,a
      0006E8 E6               [12] 1623 	mov	a,@r0
      0006E9 24r00            [12] 1624 	add	a,#_g
      0006EB F7               [12] 1625 	mov	@r1,a
      0006EC 08               [12] 1626 	inc	r0
      0006ED E6               [12] 1627 	mov	a,@r0
      0006EE 34s00            [12] 1628 	addc	a,#(_g >> 8)
      0006F0 09               [12] 1629 	inc	r1
      0006F1 F7               [12] 1630 	mov	@r1,a
      0006F2 D0 01            [24] 1631 	pop	ar1
      0006F4 7A 00            [12] 1632 	mov	r2,#0x00
      0006F6 7E 00            [12] 1633 	mov	r6,#0x00
      0006F8                       1634 00111$:
                                   1635 ;	walk.c:184: g[i][j] = 0x55;
      0006F8 E5*00            [12] 1636 	mov	a,_bp
      0006FA 24 03            [12] 1637 	add	a,#0x03
      0006FC F8               [12] 1638 	mov	r0,a
      0006FD EA               [12] 1639 	mov	a,r2
      0006FE 26               [12] 1640 	add	a,@r0
      0006FF F5 82            [12] 1641 	mov	dpl,a
      000701 EE               [12] 1642 	mov	a,r6
      000702 08               [12] 1643 	inc	r0
      000703 36               [12] 1644 	addc	a,@r0
      000704 F5 83            [12] 1645 	mov	dph,a
      000706 74 55            [12] 1646 	mov	a,#0x55
      000708 F0               [24] 1647 	movx	@dptr,a
                                   1648 ;	walk.c:183: for (j = 0; j < COLS; j++)
      000709 0A               [12] 1649 	inc	r2
      00070A BA 00 01         [24] 1650 	cjne	r2,#0x00,00182$
      00070D 0E               [12] 1651 	inc	r6
      00070E                       1652 00182$:
      00070E C3               [12] 1653 	clr	c
      00070F EA               [12] 1654 	mov	a,r2
      000710 94 C9            [12] 1655 	subb	a,#0xc9
      000712 EE               [12] 1656 	mov	a,r6
      000713 64 80            [12] 1657 	xrl	a,#0x80
      000715 94 80            [12] 1658 	subb	a,#0x80
      000717 40 DF            [24] 1659 	jc	00111$
                                   1660 ;	walk.c:182: for (i = 0; i < ROWS; i++)
      000719 A8*00            [24] 1661 	mov	r0,_bp
      00071B 08               [12] 1662 	inc	r0
      00071C 74 C9            [12] 1663 	mov	a,#0xc9
      00071E 26               [12] 1664 	add	a,@r0
      00071F F6               [12] 1665 	mov	@r0,a
      000720 E4               [12] 1666 	clr	a
      000721 08               [12] 1667 	inc	r0
      000722 36               [12] 1668 	addc	a,@r0
      000723 F6               [12] 1669 	mov	@r0,a
      000724 0B               [12] 1670 	inc	r3
      000725 BB 00 01         [24] 1671 	cjne	r3,#0x00,00184$
      000728 0C               [12] 1672 	inc	r4
      000729                       1673 00184$:
      000729 C3               [12] 1674 	clr	c
      00072A EB               [12] 1675 	mov	a,r3
      00072B 94 30            [12] 1676 	subb	a,#0x30
      00072D EC               [12] 1677 	mov	a,r4
      00072E 64 80            [12] 1678 	xrl	a,#0x80
      000730 94 80            [12] 1679 	subb	a,#0x80
      000732 40 AA            [24] 1680 	jc	00124$
                                   1681 ;	walk.c:186: initial.r = rand() % ROWS;
      000734 E5*00            [12] 1682 	mov	a,_bp
      000736 24 07            [12] 1683 	add	a,#0x07
      000738 F8               [12] 1684 	mov	r0,a
      000739 C0 07            [24] 1685 	push	ar7
      00073B C0 01            [24] 1686 	push	ar1
      00073D C0 00            [24] 1687 	push	ar0
      00073F 12r00r00         [24] 1688 	lcall	_rand
      000742 AD 82            [24] 1689 	mov	r5,dpl
      000744 AE 83            [24] 1690 	mov	r6,dph
      000746 74 30            [12] 1691 	mov	a,#0x30
      000748 C0 E0            [24] 1692 	push	acc
      00074A E4               [12] 1693 	clr	a
      00074B C0 E0            [24] 1694 	push	acc
      00074D 8D 82            [24] 1695 	mov	dpl,r5
      00074F 8E 83            [24] 1696 	mov	dph,r6
      000751 12r00r00         [24] 1697 	lcall	__modsint
      000754 AD 82            [24] 1698 	mov	r5,dpl
      000756 AE 83            [24] 1699 	mov	r6,dph
      000758 15 81            [12] 1700 	dec	sp
      00075A 15 81            [12] 1701 	dec	sp
      00075C D0 00            [24] 1702 	pop	ar0
      00075E D0 01            [24] 1703 	pop	ar1
      000760 A6 05            [24] 1704 	mov	@r0,ar5
      000762 08               [12] 1705 	inc	r0
      000763 A6 06            [24] 1706 	mov	@r0,ar6
      000765 18               [12] 1707 	dec	r0
                                   1708 ;	walk.c:187: initial.c = rand() % COLS;
      000766 74 02            [12] 1709 	mov	a,#0x02
      000768 29               [12] 1710 	add	a,r1
      000769 F8               [12] 1711 	mov	r0,a
      00076A C0 01            [24] 1712 	push	ar1
      00076C C0 00            [24] 1713 	push	ar0
      00076E 12r00r00         [24] 1714 	lcall	_rand
      000771 AD 82            [24] 1715 	mov	r5,dpl
      000773 AE 83            [24] 1716 	mov	r6,dph
      000775 74 C9            [12] 1717 	mov	a,#0xc9
      000777 C0 E0            [24] 1718 	push	acc
      000779 E4               [12] 1719 	clr	a
      00077A C0 E0            [24] 1720 	push	acc
      00077C 8D 82            [24] 1721 	mov	dpl,r5
      00077E 8E 83            [24] 1722 	mov	dph,r6
      000780 12r00r00         [24] 1723 	lcall	__modsint
      000783 AD 82            [24] 1724 	mov	r5,dpl
      000785 AE 83            [24] 1725 	mov	r6,dph
      000787 15 81            [12] 1726 	dec	sp
      000789 15 81            [12] 1727 	dec	sp
      00078B D0 00            [24] 1728 	pop	ar0
      00078D A6 05            [24] 1729 	mov	@r0,ar5
      00078F 08               [12] 1730 	inc	r0
      000790 A6 06            [24] 1731 	mov	@r0,ar6
      000792 18               [12] 1732 	dec	r0
                                   1733 ;	walk.c:189: puts("\033[2J\033[?25l");
      000793 90r00r34         [24] 1734 	mov	dptr,#___str_4
      000796 75 F0 80         [24] 1735 	mov	b,#0x80
      000799 C0 00            [24] 1736 	push	ar0
      00079B 12r00r00         [24] 1737 	lcall	_puts
      00079E D0 00            [24] 1738 	pop	ar0
      0007A0 D0 01            [24] 1739 	pop	ar1
                                   1740 ;	walk.c:190: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      0007A2 86 05            [24] 1741 	mov	ar5,@r0
      0007A4 08               [12] 1742 	inc	r0
      0007A5 86 06            [24] 1743 	mov	ar6,@r0
      0007A7 18               [12] 1744 	dec	r0
      0007A8 87 03            [24] 1745 	mov	ar3,@r1
      0007AA 09               [12] 1746 	inc	r1
      0007AB 87 04            [24] 1747 	mov	ar4,@r1
      0007AD 19               [12] 1748 	dec	r1
      0007AE C0 01            [24] 1749 	push	ar1
      0007B0 C0 05            [24] 1750 	push	ar5
      0007B2 C0 06            [24] 1751 	push	ar6
      0007B4 C0 03            [24] 1752 	push	ar3
      0007B6 C0 04            [24] 1753 	push	ar4
      0007B8 E5*00            [12] 1754 	mov	a,_bp
      0007BA 24 0B            [12] 1755 	add	a,#0x0b
      0007BC F8               [12] 1756 	mov	r0,a
      0007BD E6               [12] 1757 	mov	a,@r0
      0007BE C0 E0            [24] 1758 	push	acc
      0007C0 08               [12] 1759 	inc	r0
      0007C1 E6               [12] 1760 	mov	a,@r0
      0007C2 C0 E0            [24] 1761 	push	acc
      0007C4 74r3F            [12] 1762 	mov	a,#___str_5
      0007C6 C0 E0            [24] 1763 	push	acc
      0007C8 74s00            [12] 1764 	mov	a,#(___str_5 >> 8)
      0007CA C0 E0            [24] 1765 	push	acc
      0007CC 74 80            [12] 1766 	mov	a,#0x80
      0007CE C0 E0            [24] 1767 	push	acc
      0007D0 12r00r00         [24] 1768 	lcall	_printf
      0007D3 E5 81            [12] 1769 	mov	a,sp
      0007D5 24 F7            [12] 1770 	add	a,#0xf7
      0007D7 F5 81            [12] 1771 	mov	sp,a
      0007D9 D0 01            [24] 1772 	pop	ar1
      0007DB D0 07            [24] 1773 	pop	ar7
                                   1774 ;	walk.c:191: for (i = 0; i < (2 * REG); i++) {
      0007DD E5*00            [12] 1775 	mov	a,_bp
      0007DF 24 05            [12] 1776 	add	a,#0x05
      0007E1 F8               [12] 1777 	mov	r0,a
      0007E2 E4               [12] 1778 	clr	a
      0007E3 F6               [12] 1779 	mov	@r0,a
      0007E4 08               [12] 1780 	inc	r0
      0007E5 F6               [12] 1781 	mov	@r0,a
      0007E6                       1782 00115$:
                                   1783 ;	walk.c:192: neigh[i].r = neigh_tmpl[i].r * (1 + rand() % 4);
      0007E6 C0 07            [24] 1784 	push	ar7
      0007E8 E5*00            [12] 1785 	mov	a,_bp
      0007EA 24 05            [12] 1786 	add	a,#0x05
      0007EC F8               [12] 1787 	mov	r0,a
      0007ED E6               [12] 1788 	mov	a,@r0
      0007EE 25 E0            [12] 1789 	add	a,acc
      0007F0 FB               [12] 1790 	mov	r3,a
      0007F1 08               [12] 1791 	inc	r0
      0007F2 E6               [12] 1792 	mov	a,@r0
      0007F3 33               [12] 1793 	rlc	a
      0007F4 FC               [12] 1794 	mov	r4,a
      0007F5 EB               [12] 1795 	mov	a,r3
      0007F6 2B               [12] 1796 	add	a,r3
      0007F7 FB               [12] 1797 	mov	r3,a
      0007F8 EC               [12] 1798 	mov	a,r4
      0007F9 33               [12] 1799 	rlc	a
      0007FA FC               [12] 1800 	mov	r4,a
      0007FB EB               [12] 1801 	mov	a,r3
      0007FC 24r42            [12] 1802 	add	a,#_neigh
      0007FE FA               [12] 1803 	mov	r2,a
      0007FF EC               [12] 1804 	mov	a,r4
      000800 34s00            [12] 1805 	addc	a,#(_neigh >> 8)
      000802 FF               [12] 1806 	mov	r7,a
      000803 EB               [12] 1807 	mov	a,r3
      000804 24r02            [12] 1808 	add	a,#_neigh_tmpl
      000806 F5 82            [12] 1809 	mov	dpl,a
      000808 EC               [12] 1810 	mov	a,r4
      000809 34s00            [12] 1811 	addc	a,#(_neigh_tmpl >> 8)
      00080B F5 83            [12] 1812 	mov	dph,a
      00080D E5*00            [12] 1813 	mov	a,_bp
      00080F 24 03            [12] 1814 	add	a,#0x03
      000811 F8               [12] 1815 	mov	r0,a
      000812 E0               [24] 1816 	movx	a,@dptr
      000813 F6               [12] 1817 	mov	@r0,a
      000814 A3               [24] 1818 	inc	dptr
      000815 E0               [24] 1819 	movx	a,@dptr
      000816 08               [12] 1820 	inc	r0
      000817 F6               [12] 1821 	mov	@r0,a
      000818 C0 07            [24] 1822 	push	ar7
      00081A C0 04            [24] 1823 	push	ar4
      00081C C0 03            [24] 1824 	push	ar3
      00081E C0 02            [24] 1825 	push	ar2
      000820 C0 01            [24] 1826 	push	ar1
      000822 12r00r00         [24] 1827 	lcall	_rand
      000825 AD 82            [24] 1828 	mov	r5,dpl
      000827 AE 83            [24] 1829 	mov	r6,dph
      000829 74 04            [12] 1830 	mov	a,#0x04
      00082B C0 E0            [24] 1831 	push	acc
      00082D E4               [12] 1832 	clr	a
      00082E C0 E0            [24] 1833 	push	acc
      000830 8D 82            [24] 1834 	mov	dpl,r5
      000832 8E 83            [24] 1835 	mov	dph,r6
      000834 12r00r00         [24] 1836 	lcall	__modsint
      000837 AD 82            [24] 1837 	mov	r5,dpl
      000839 AE 83            [24] 1838 	mov	r6,dph
      00083B 15 81            [12] 1839 	dec	sp
      00083D 15 81            [12] 1840 	dec	sp
      00083F D0 01            [24] 1841 	pop	ar1
      000841 D0 02            [24] 1842 	pop	ar2
      000843 D0 03            [24] 1843 	pop	ar3
      000845 D0 04            [24] 1844 	pop	ar4
      000847 D0 07            [24] 1845 	pop	ar7
      000849 0D               [12] 1846 	inc	r5
      00084A BD 00 01         [24] 1847 	cjne	r5,#0x00,00186$
      00084D 0E               [12] 1848 	inc	r6
      00084E                       1849 00186$:
      00084E C0 07            [24] 1850 	push	ar7
      000850 C0 04            [24] 1851 	push	ar4
      000852 C0 03            [24] 1852 	push	ar3
      000854 C0 02            [24] 1853 	push	ar2
      000856 C0 01            [24] 1854 	push	ar1
      000858 C0 05            [24] 1855 	push	ar5
      00085A C0 06            [24] 1856 	push	ar6
      00085C E5*00            [12] 1857 	mov	a,_bp
      00085E 24 03            [12] 1858 	add	a,#0x03
      000860 F8               [12] 1859 	mov	r0,a
      000861 86 82            [24] 1860 	mov	dpl,@r0
      000863 08               [12] 1861 	inc	r0
      000864 86 83            [24] 1862 	mov	dph,@r0
      000866 12r00r00         [24] 1863 	lcall	__mulint
      000869 AD 82            [24] 1864 	mov	r5,dpl
      00086B AE 83            [24] 1865 	mov	r6,dph
      00086D 15 81            [12] 1866 	dec	sp
      00086F 15 81            [12] 1867 	dec	sp
      000871 D0 01            [24] 1868 	pop	ar1
      000873 D0 02            [24] 1869 	pop	ar2
      000875 D0 03            [24] 1870 	pop	ar3
      000877 D0 04            [24] 1871 	pop	ar4
      000879 D0 07            [24] 1872 	pop	ar7
      00087B 8A 82            [24] 1873 	mov	dpl,r2
      00087D 8F 83            [24] 1874 	mov	dph,r7
      00087F ED               [12] 1875 	mov	a,r5
      000880 F0               [24] 1876 	movx	@dptr,a
      000881 EE               [12] 1877 	mov	a,r6
      000882 A3               [24] 1878 	inc	dptr
      000883 F0               [24] 1879 	movx	@dptr,a
                                   1880 ;	walk.c:193: neigh[i].c = neigh_tmpl[i].c * (1 + rand() % 4);
      000884 EB               [12] 1881 	mov	a,r3
      000885 24r42            [12] 1882 	add	a,#_neigh
      000887 FE               [12] 1883 	mov	r6,a
      000888 EC               [12] 1884 	mov	a,r4
      000889 34s00            [12] 1885 	addc	a,#(_neigh >> 8)
      00088B FF               [12] 1886 	mov	r7,a
      00088C 74 02            [12] 1887 	mov	a,#0x02
      00088E 2E               [12] 1888 	add	a,r6
      00088F FA               [12] 1889 	mov	r2,a
      000890 E4               [12] 1890 	clr	a
      000891 3F               [12] 1891 	addc	a,r7
      000892 FD               [12] 1892 	mov	r5,a
      000893 EB               [12] 1893 	mov	a,r3
      000894 24r02            [12] 1894 	add	a,#_neigh_tmpl
      000896 FB               [12] 1895 	mov	r3,a
      000897 EC               [12] 1896 	mov	a,r4
      000898 34s00            [12] 1897 	addc	a,#(_neigh_tmpl >> 8)
      00089A FC               [12] 1898 	mov	r4,a
      00089B 8B 82            [24] 1899 	mov	dpl,r3
      00089D 8C 83            [24] 1900 	mov	dph,r4
      00089F A3               [24] 1901 	inc	dptr
      0008A0 A3               [24] 1902 	inc	dptr
      0008A1 E5*00            [12] 1903 	mov	a,_bp
      0008A3 24 03            [12] 1904 	add	a,#0x03
      0008A5 F8               [12] 1905 	mov	r0,a
      0008A6 E0               [24] 1906 	movx	a,@dptr
      0008A7 F6               [12] 1907 	mov	@r0,a
      0008A8 A3               [24] 1908 	inc	dptr
      0008A9 E0               [24] 1909 	movx	a,@dptr
      0008AA 08               [12] 1910 	inc	r0
      0008AB F6               [12] 1911 	mov	@r0,a
      0008AC C0 07            [24] 1912 	push	ar7
      0008AE C0 06            [24] 1913 	push	ar6
      0008B0 C0 05            [24] 1914 	push	ar5
      0008B2 C0 02            [24] 1915 	push	ar2
      0008B4 C0 01            [24] 1916 	push	ar1
      0008B6 12r00r00         [24] 1917 	lcall	_rand
      0008B9 AB 82            [24] 1918 	mov	r3,dpl
      0008BB AC 83            [24] 1919 	mov	r4,dph
      0008BD 74 04            [12] 1920 	mov	a,#0x04
      0008BF C0 E0            [24] 1921 	push	acc
      0008C1 E4               [12] 1922 	clr	a
      0008C2 C0 E0            [24] 1923 	push	acc
      0008C4 8B 82            [24] 1924 	mov	dpl,r3
      0008C6 8C 83            [24] 1925 	mov	dph,r4
      0008C8 12r00r00         [24] 1926 	lcall	__modsint
      0008CB AB 82            [24] 1927 	mov	r3,dpl
      0008CD AC 83            [24] 1928 	mov	r4,dph
      0008CF 15 81            [12] 1929 	dec	sp
      0008D1 15 81            [12] 1930 	dec	sp
      0008D3 D0 01            [24] 1931 	pop	ar1
      0008D5 D0 02            [24] 1932 	pop	ar2
      0008D7 D0 05            [24] 1933 	pop	ar5
      0008D9 D0 06            [24] 1934 	pop	ar6
      0008DB D0 07            [24] 1935 	pop	ar7
      0008DD 0B               [12] 1936 	inc	r3
      0008DE BB 00 01         [24] 1937 	cjne	r3,#0x00,00187$
      0008E1 0C               [12] 1938 	inc	r4
      0008E2                       1939 00187$:
      0008E2 C0 07            [24] 1940 	push	ar7
      0008E4 C0 06            [24] 1941 	push	ar6
      0008E6 C0 05            [24] 1942 	push	ar5
      0008E8 C0 02            [24] 1943 	push	ar2
      0008EA C0 01            [24] 1944 	push	ar1
      0008EC C0 03            [24] 1945 	push	ar3
      0008EE C0 04            [24] 1946 	push	ar4
      0008F0 E5*00            [12] 1947 	mov	a,_bp
      0008F2 24 03            [12] 1948 	add	a,#0x03
      0008F4 F8               [12] 1949 	mov	r0,a
      0008F5 86 82            [24] 1950 	mov	dpl,@r0
      0008F7 08               [12] 1951 	inc	r0
      0008F8 86 83            [24] 1952 	mov	dph,@r0
      0008FA 12r00r00         [24] 1953 	lcall	__mulint
      0008FD AB 82            [24] 1954 	mov	r3,dpl
      0008FF AC 83            [24] 1955 	mov	r4,dph
      000901 15 81            [12] 1956 	dec	sp
      000903 15 81            [12] 1957 	dec	sp
      000905 D0 01            [24] 1958 	pop	ar1
      000907 D0 02            [24] 1959 	pop	ar2
      000909 D0 05            [24] 1960 	pop	ar5
      00090B D0 06            [24] 1961 	pop	ar6
      00090D D0 07            [24] 1962 	pop	ar7
      00090F 8A 82            [24] 1963 	mov	dpl,r2
      000911 8D 83            [24] 1964 	mov	dph,r5
      000913 EB               [12] 1965 	mov	a,r3
      000914 F0               [24] 1966 	movx	@dptr,a
      000915 EC               [12] 1967 	mov	a,r4
      000916 A3               [24] 1968 	inc	dptr
      000917 F0               [24] 1969 	movx	@dptr,a
                                   1970 ;	walk.c:194: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000918 8E 82            [24] 1971 	mov	dpl,r6
      00091A 8F 83            [24] 1972 	mov	dph,r7
      00091C E0               [24] 1973 	movx	a,@dptr
      00091D FE               [12] 1974 	mov	r6,a
      00091E A3               [24] 1975 	inc	dptr
      00091F E0               [24] 1976 	movx	a,@dptr
      000920 FF               [12] 1977 	mov	r7,a
      000921 C0 07            [24] 1978 	push	ar7
      000923 C0 01            [24] 1979 	push	ar1
      000925 C0 03            [24] 1980 	push	ar3
      000927 C0 04            [24] 1981 	push	ar4
      000929 C0 06            [24] 1982 	push	ar6
      00092B C0 07            [24] 1983 	push	ar7
      00092D 74r52            [12] 1984 	mov	a,#___str_6
      00092F C0 E0            [24] 1985 	push	acc
      000931 74s00            [12] 1986 	mov	a,#(___str_6 >> 8)
      000933 C0 E0            [24] 1987 	push	acc
      000935 74 80            [12] 1988 	mov	a,#0x80
      000937 C0 E0            [24] 1989 	push	acc
      000939 12r00r00         [24] 1990 	lcall	_printf
      00093C E5 81            [12] 1991 	mov	a,sp
      00093E 24 F9            [12] 1992 	add	a,#0xf9
      000940 F5 81            [12] 1993 	mov	sp,a
      000942 D0 01            [24] 1994 	pop	ar1
      000944 D0 07            [24] 1995 	pop	ar7
                                   1996 ;	walk.c:191: for (i = 0; i < (2 * REG); i++) {
      000946 E5*00            [12] 1997 	mov	a,_bp
      000948 24 05            [12] 1998 	add	a,#0x05
      00094A F8               [12] 1999 	mov	r0,a
      00094B 06               [12] 2000 	inc	@r0
      00094C B6 00 02         [24] 2001 	cjne	@r0,#0x00,00188$
      00094F 08               [12] 2002 	inc	r0
      000950 06               [12] 2003 	inc	@r0
      000951                       2004 00188$:
      000951 E5*00            [12] 2005 	mov	a,_bp
      000953 24 05            [12] 2006 	add	a,#0x05
      000955 F8               [12] 2007 	mov	r0,a
      000956 C3               [12] 2008 	clr	c
      000957 E6               [12] 2009 	mov	a,@r0
      000958 94 08            [12] 2010 	subb	a,#0x08
      00095A 08               [12] 2011 	inc	r0
      00095B E6               [12] 2012 	mov	a,@r0
      00095C 64 80            [12] 2013 	xrl	a,#0x80
      00095E 94 80            [12] 2014 	subb	a,#0x80
      000960 D0 07            [24] 2015 	pop	ar7
      000962 50 03            [24] 2016 	jnc	00189$
      000964 02r07rE6         [24] 2017 	ljmp	00115$
      000967                       2018 00189$:
                                   2019 ;	walk.c:197: OE76 = OE76_0;
      000967 78r01            [12] 2020 	mov	r0,#_OE76
      000969 76 3F            [12] 2021 	mov	@r0,#0x3f
                                   2022 ;	walk.c:198: flashOE(OE76_NC);
      00096B 75 82 00         [24] 2023 	mov	dpl,#0x00
      00096E C0 07            [24] 2024 	push	ar7
      000970 C0 01            [24] 2025 	push	ar1
      000972 12r00r29         [24] 2026 	lcall	_flashOE
      000975 D0 01            [24] 2027 	pop	ar1
      000977 D0 07            [24] 2028 	pop	ar7
                                   2029 ;	walk.c:200: walk(&initial);
      000979 8F 04            [24] 2030 	mov	ar4,r7
      00097B 7D 00            [12] 2031 	mov	r5,#0x00
      00097D 7E 40            [12] 2032 	mov	r6,#0x40
      00097F 8C 82            [24] 2033 	mov	dpl,r4
      000981 8D 83            [24] 2034 	mov	dph,r5
      000983 8E F0            [24] 2035 	mov	b,r6
      000985 C0 07            [24] 2036 	push	ar7
      000987 C0 01            [24] 2037 	push	ar1
      000989 12r02rD7         [24] 2038 	lcall	_walk
      00098C D0 01            [24] 2039 	pop	ar1
      00098E D0 07            [24] 2040 	pop	ar7
                                   2041 ;	walk.c:202: for (i = 0; i < ROWS; i++)
      000990 E5*00            [12] 2042 	mov	a,_bp
      000992 24 05            [12] 2043 	add	a,#0x05
      000994 F8               [12] 2044 	mov	r0,a
      000995 E4               [12] 2045 	clr	a
      000996 F6               [12] 2046 	mov	@r0,a
      000997 08               [12] 2047 	inc	r0
      000998 F6               [12] 2048 	mov	@r0,a
      000999 7B 00            [12] 2049 	mov	r3,#0x00
      00099B 7C 00            [12] 2050 	mov	r4,#0x00
                                   2051 ;	walk.c:203: for (j = 0; j < COLS; j++)
      00099D                       2052 00131$:
      00099D E5*00            [12] 2053 	mov	a,_bp
      00099F 24 03            [12] 2054 	add	a,#0x03
      0009A1 F8               [12] 2055 	mov	r0,a
      0009A2 EB               [12] 2056 	mov	a,r3
      0009A3 24r00            [12] 2057 	add	a,#_g
      0009A5 F6               [12] 2058 	mov	@r0,a
      0009A6 EC               [12] 2059 	mov	a,r4
      0009A7 34s00            [12] 2060 	addc	a,#(_g >> 8)
      0009A9 08               [12] 2061 	inc	r0
      0009AA F6               [12] 2062 	mov	@r0,a
      0009AB 7A 00            [12] 2063 	mov	r2,#0x00
      0009AD 7E 00            [12] 2064 	mov	r6,#0x00
      0009AF                       2065 00117$:
                                   2066 ;	walk.c:204: if (g[i][j] != 0xaa) bang();
      0009AF E5*00            [12] 2067 	mov	a,_bp
      0009B1 24 03            [12] 2068 	add	a,#0x03
      0009B3 F8               [12] 2069 	mov	r0,a
      0009B4 EA               [12] 2070 	mov	a,r2
      0009B5 26               [12] 2071 	add	a,@r0
      0009B6 F5 82            [12] 2072 	mov	dpl,a
      0009B8 EE               [12] 2073 	mov	a,r6
      0009B9 08               [12] 2074 	inc	r0
      0009BA 36               [12] 2075 	addc	a,@r0
      0009BB F5 83            [12] 2076 	mov	dph,a
      0009BD E0               [24] 2077 	movx	a,@dptr
      0009BE FD               [12] 2078 	mov	r5,a
      0009BF BD AA 02         [24] 2079 	cjne	r5,#0xaa,00190$
      0009C2 80 1B            [24] 2080 	sjmp	00118$
      0009C4                       2081 00190$:
      0009C4 C0 07            [24] 2082 	push	ar7
      0009C6 C0 06            [24] 2083 	push	ar6
      0009C8 C0 04            [24] 2084 	push	ar4
      0009CA C0 03            [24] 2085 	push	ar3
      0009CC C0 02            [24] 2086 	push	ar2
      0009CE C0 01            [24] 2087 	push	ar1
      0009D0 12r00r1D         [24] 2088 	lcall	_bang
      0009D3 D0 01            [24] 2089 	pop	ar1
      0009D5 D0 02            [24] 2090 	pop	ar2
      0009D7 D0 03            [24] 2091 	pop	ar3
      0009D9 D0 04            [24] 2092 	pop	ar4
      0009DB D0 06            [24] 2093 	pop	ar6
      0009DD D0 07            [24] 2094 	pop	ar7
      0009DF                       2095 00118$:
                                   2096 ;	walk.c:203: for (j = 0; j < COLS; j++)
      0009DF 0A               [12] 2097 	inc	r2
      0009E0 BA 00 01         [24] 2098 	cjne	r2,#0x00,00191$
      0009E3 0E               [12] 2099 	inc	r6
      0009E4                       2100 00191$:
      0009E4 C3               [12] 2101 	clr	c
      0009E5 EA               [12] 2102 	mov	a,r2
      0009E6 94 C9            [12] 2103 	subb	a,#0xc9
      0009E8 EE               [12] 2104 	mov	a,r6
      0009E9 64 80            [12] 2105 	xrl	a,#0x80
      0009EB 94 80            [12] 2106 	subb	a,#0x80
      0009ED 40 C0            [24] 2107 	jc	00117$
                                   2108 ;	walk.c:202: for (i = 0; i < ROWS; i++)
      0009EF 74 C9            [12] 2109 	mov	a,#0xc9
      0009F1 2B               [12] 2110 	add	a,r3
      0009F2 FB               [12] 2111 	mov	r3,a
      0009F3 E4               [12] 2112 	clr	a
      0009F4 3C               [12] 2113 	addc	a,r4
      0009F5 FC               [12] 2114 	mov	r4,a
      0009F6 E5*00            [12] 2115 	mov	a,_bp
      0009F8 24 05            [12] 2116 	add	a,#0x05
      0009FA F8               [12] 2117 	mov	r0,a
      0009FB 06               [12] 2118 	inc	@r0
      0009FC B6 00 02         [24] 2119 	cjne	@r0,#0x00,00193$
      0009FF 08               [12] 2120 	inc	r0
      000A00 06               [12] 2121 	inc	@r0
      000A01                       2122 00193$:
      000A01 E5*00            [12] 2123 	mov	a,_bp
      000A03 24 05            [12] 2124 	add	a,#0x05
      000A05 F8               [12] 2125 	mov	r0,a
      000A06 C3               [12] 2126 	clr	c
      000A07 E6               [12] 2127 	mov	a,@r0
      000A08 94 30            [12] 2128 	subb	a,#0x30
      000A0A 08               [12] 2129 	inc	r0
      000A0B E6               [12] 2130 	mov	a,@r0
      000A0C 64 80            [12] 2131 	xrl	a,#0x80
      000A0E 94 80            [12] 2132 	subb	a,#0x80
      000A10 40 8B            [24] 2133 	jc	00131$
                                   2134 ;	walk.c:206: N++;
      000A12 E5*00            [12] 2135 	mov	a,_bp
      000A14 24 0B            [12] 2136 	add	a,#0x0b
      000A16 F8               [12] 2137 	mov	r0,a
      000A17 06               [12] 2138 	inc	@r0
      000A18 B6 00 02         [24] 2139 	cjne	@r0,#0x00,00195$
      000A1B 08               [12] 2140 	inc	r0
      000A1C 06               [12] 2141 	inc	@r0
      000A1D                       2142 00195$:
      000A1D 02r06rCB         [24] 2143 	ljmp	00108$
      000A20                       2144 00110$:
                                   2145 ;	walk.c:209: EA = 0;
                                   2146 ;	assignBit
      000A20 C2 AF            [12] 2147 	clr	_EA
                                   2148 ;	walk.c:211: puts("\033[2J\033[?25h");
      000A22 90r00r5B         [24] 2149 	mov	dptr,#___str_7
      000A25 75 F0 80         [24] 2150 	mov	b,#0x80
      000A28 12r00r00         [24] 2151 	lcall	_puts
                                   2152 ;	walk.c:215: __endasm;
      000A2B 02 00 00         [24] 2153 	ljmp	0
                                   2154 ;	walk.c:217: return 0;
      000A2E 90 00 00         [24] 2155 	mov	dptr,#0x0000
                                   2156 ;	walk.c:218: }
      000A31 85*00 81         [24] 2157 	mov	sp,_bp
      000A34 D0*00            [24] 2158 	pop	_bp
      000A36 22               [24] 2159 	ret
                                   2160 ;------------------------------------------------------------
                                   2161 ;Allocation info for local variables in function 'stinit'
                                   2162 ;------------------------------------------------------------
                                   2163 ;	walk.c:220: static void stinit(void) {
                                   2164 ;	-----------------------------------------
                                   2165 ;	 function stinit
                                   2166 ;	-----------------------------------------
      000A37                       2167 _stinit:
                                   2168 ;	walk.c:221: sp = -1;
      000A37 90rBCr70         [24] 2169 	mov	dptr,#_sp
      000A3A 74 FF            [12] 2170 	mov	a,#0xff
      000A3C F0               [24] 2171 	movx	@dptr,a
      000A3D A3               [24] 2172 	inc	dptr
      000A3E F0               [24] 2173 	movx	@dptr,a
                                   2174 ;	walk.c:222: return;
                                   2175 ;	walk.c:223: }
      000A3F 22               [24] 2176 	ret
                                   2177 ;------------------------------------------------------------
                                   2178 ;Allocation info for local variables in function 'stpush'
                                   2179 ;------------------------------------------------------------
                                   2180 ;t                         Allocated to registers r5 r6 r7 
                                   2181 ;------------------------------------------------------------
                                   2182 ;	walk.c:225: static int stpush(struct node *t) {
                                   2183 ;	-----------------------------------------
                                   2184 ;	 function stpush
                                   2185 ;	-----------------------------------------
      000A40                       2186 _stpush:
      000A40 AD 82            [24] 2187 	mov	r5,dpl
      000A42 AE 83            [24] 2188 	mov	r6,dph
      000A44 AF F0            [24] 2189 	mov	r7,b
                                   2190 ;	walk.c:226: if (sp == (SMAX - 1)) return 0;
      000A46 90rBCr70         [24] 2191 	mov	dptr,#_sp
      000A49 E0               [24] 2192 	movx	a,@dptr
      000A4A FB               [12] 2193 	mov	r3,a
      000A4B A3               [24] 2194 	inc	dptr
      000A4C E0               [24] 2195 	movx	a,@dptr
      000A4D FC               [12] 2196 	mov	r4,a
      000A4E BB AF 07         [24] 2197 	cjne	r3,#0xaf,00102$
      000A51 BC 25 04         [24] 2198 	cjne	r4,#0x25,00102$
      000A54 90 00 00         [24] 2199 	mov	dptr,#0x0000
      000A57 22               [24] 2200 	ret
      000A58                       2201 00102$:
                                   2202 ;	walk.c:227: sp++;
      000A58 90rBCr70         [24] 2203 	mov	dptr,#_sp
      000A5B 74 01            [12] 2204 	mov	a,#0x01
      000A5D 2B               [12] 2205 	add	a,r3
      000A5E F0               [24] 2206 	movx	@dptr,a
      000A5F E4               [12] 2207 	clr	a
      000A60 3C               [12] 2208 	addc	a,r4
      000A61 A3               [24] 2209 	inc	dptr
      000A62 F0               [24] 2210 	movx	@dptr,a
                                   2211 ;	walk.c:228: stack[sp] = *t;
      000A63 90rBCr70         [24] 2212 	mov	dptr,#_sp
      000A66 E0               [24] 2213 	movx	a,@dptr
      000A67 FB               [12] 2214 	mov	r3,a
      000A68 A3               [24] 2215 	inc	dptr
      000A69 E0               [24] 2216 	movx	a,@dptr
      000A6A FC               [12] 2217 	mov	r4,a
      000A6B EB               [12] 2218 	mov	a,r3
      000A6C 2B               [12] 2219 	add	a,r3
      000A6D FB               [12] 2220 	mov	r3,a
      000A6E EC               [12] 2221 	mov	a,r4
      000A6F 33               [12] 2222 	rlc	a
      000A70 FC               [12] 2223 	mov	r4,a
      000A71 EB               [12] 2224 	mov	a,r3
      000A72 2B               [12] 2225 	add	a,r3
      000A73 FB               [12] 2226 	mov	r3,a
      000A74 EC               [12] 2227 	mov	a,r4
      000A75 33               [12] 2228 	rlc	a
      000A76 FC               [12] 2229 	mov	r4,a
      000A77 EB               [12] 2230 	mov	a,r3
      000A78 24rB0            [12] 2231 	add	a,#_stack
      000A7A FB               [12] 2232 	mov	r3,a
      000A7B EC               [12] 2233 	mov	a,r4
      000A7C 34s25            [12] 2234 	addc	a,#(_stack >> 8)
      000A7E FC               [12] 2235 	mov	r4,a
      000A7F 7A 00            [12] 2236 	mov	r2,#0x00
      000A81 74 04            [12] 2237 	mov	a,#0x04
      000A83 C0 E0            [24] 2238 	push	acc
      000A85 E4               [12] 2239 	clr	a
      000A86 C0 E0            [24] 2240 	push	acc
      000A88 C0 05            [24] 2241 	push	ar5
      000A8A C0 06            [24] 2242 	push	ar6
      000A8C C0 07            [24] 2243 	push	ar7
      000A8E 8B 82            [24] 2244 	mov	dpl,r3
      000A90 8C 83            [24] 2245 	mov	dph,r4
      000A92 8A F0            [24] 2246 	mov	b,r2
      000A94 12r00r00         [24] 2247 	lcall	___memcpy
      000A97 E5 81            [12] 2248 	mov	a,sp
      000A99 24 FB            [12] 2249 	add	a,#0xfb
      000A9B F5 81            [12] 2250 	mov	sp,a
                                   2251 ;	walk.c:229: return 1;
      000A9D 90 00 01         [24] 2252 	mov	dptr,#0x0001
                                   2253 ;	walk.c:230: }
      000AA0 22               [24] 2254 	ret
                                   2255 ;------------------------------------------------------------
                                   2256 ;Allocation info for local variables in function 'stpop'
                                   2257 ;------------------------------------------------------------
                                   2258 ;t                         Allocated to registers r5 r6 r7 
                                   2259 ;------------------------------------------------------------
                                   2260 ;	walk.c:232: static int stpop(struct node *t) {
                                   2261 ;	-----------------------------------------
                                   2262 ;	 function stpop
                                   2263 ;	-----------------------------------------
      000AA1                       2264 _stpop:
      000AA1 AD 82            [24] 2265 	mov	r5,dpl
      000AA3 AE 83            [24] 2266 	mov	r6,dph
      000AA5 AF F0            [24] 2267 	mov	r7,b
                                   2268 ;	walk.c:233: if (sp == -1) return 0;
      000AA7 90rBCr70         [24] 2269 	mov	dptr,#_sp
      000AAA E0               [24] 2270 	movx	a,@dptr
      000AAB FB               [12] 2271 	mov	r3,a
      000AAC A3               [24] 2272 	inc	dptr
      000AAD E0               [24] 2273 	movx	a,@dptr
      000AAE FC               [12] 2274 	mov	r4,a
      000AAF BB FF 07         [24] 2275 	cjne	r3,#0xff,00102$
      000AB2 BC FF 04         [24] 2276 	cjne	r4,#0xff,00102$
      000AB5 90 00 00         [24] 2277 	mov	dptr,#0x0000
      000AB8 22               [24] 2278 	ret
      000AB9                       2279 00102$:
                                   2280 ;	walk.c:234: *t = stack[sp];
      000AB9 EB               [12] 2281 	mov	a,r3
      000ABA 2B               [12] 2282 	add	a,r3
      000ABB FB               [12] 2283 	mov	r3,a
      000ABC EC               [12] 2284 	mov	a,r4
      000ABD 33               [12] 2285 	rlc	a
      000ABE FC               [12] 2286 	mov	r4,a
      000ABF EB               [12] 2287 	mov	a,r3
      000AC0 2B               [12] 2288 	add	a,r3
      000AC1 FB               [12] 2289 	mov	r3,a
      000AC2 EC               [12] 2290 	mov	a,r4
      000AC3 33               [12] 2291 	rlc	a
      000AC4 FC               [12] 2292 	mov	r4,a
      000AC5 EB               [12] 2293 	mov	a,r3
      000AC6 24rB0            [12] 2294 	add	a,#_stack
      000AC8 FB               [12] 2295 	mov	r3,a
      000AC9 EC               [12] 2296 	mov	a,r4
      000ACA 34s25            [12] 2297 	addc	a,#(_stack >> 8)
      000ACC FC               [12] 2298 	mov	r4,a
      000ACD 7A 00            [12] 2299 	mov	r2,#0x00
      000ACF 74 04            [12] 2300 	mov	a,#0x04
      000AD1 C0 E0            [24] 2301 	push	acc
      000AD3 E4               [12] 2302 	clr	a
      000AD4 C0 E0            [24] 2303 	push	acc
      000AD6 C0 03            [24] 2304 	push	ar3
      000AD8 C0 04            [24] 2305 	push	ar4
      000ADA C0 02            [24] 2306 	push	ar2
      000ADC 8D 82            [24] 2307 	mov	dpl,r5
      000ADE 8E 83            [24] 2308 	mov	dph,r6
      000AE0 8F F0            [24] 2309 	mov	b,r7
      000AE2 12r00r00         [24] 2310 	lcall	___memcpy
      000AE5 E5 81            [12] 2311 	mov	a,sp
      000AE7 24 FB            [12] 2312 	add	a,#0xfb
      000AE9 F5 81            [12] 2313 	mov	sp,a
                                   2314 ;	walk.c:235: sp--;
      000AEB 90rBCr70         [24] 2315 	mov	dptr,#_sp
      000AEE E0               [24] 2316 	movx	a,@dptr
      000AEF 24 FF            [12] 2317 	add	a,#0xff
      000AF1 FE               [12] 2318 	mov	r6,a
      000AF2 A3               [24] 2319 	inc	dptr
      000AF3 E0               [24] 2320 	movx	a,@dptr
      000AF4 34 FF            [12] 2321 	addc	a,#0xff
      000AF6 FF               [12] 2322 	mov	r7,a
      000AF7 90rBCr70         [24] 2323 	mov	dptr,#_sp
      000AFA EE               [12] 2324 	mov	a,r6
      000AFB F0               [24] 2325 	movx	@dptr,a
      000AFC EF               [12] 2326 	mov	a,r7
      000AFD A3               [24] 2327 	inc	dptr
      000AFE F0               [24] 2328 	movx	@dptr,a
                                   2329 ;	walk.c:236: return 1;
      000AFF 90 00 01         [24] 2330 	mov	dptr,#0x0001
                                   2331 ;	walk.c:237: }
      000B02 22               [24] 2332 	ret
                                   2333 	.area CSEG    (CODE)
                                   2334 	.area CONST   (CODE)
                                   2335 	.area CONST   (CODE)
      000000                       2336 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2337 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2338 	.db 0x00
                                   2339 	.area CSEG    (CODE)
                                   2340 	.area CONST   (CODE)
      00000D                       2341 ___str_1:
      00000D 1B                    2342 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2343 	.ascii "[%d;%dHo"
             6F
      000016 00                    2344 	.db 0x00
                                   2345 	.area CSEG    (CODE)
                                   2346 	.area CONST   (CODE)
      000017                       2347 ___str_2:
      000017 1B                    2348 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2349 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2350 	.db 0x00
                                   2351 	.area CSEG    (CODE)
                                   2352 	.area CONST   (CODE)
      00002A                       2353 ___str_3:
      00002A 1B                    2354 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2355 	.ascii "[%d;%dH."
             2E
      000033 00                    2356 	.db 0x00
                                   2357 	.area CSEG    (CODE)
                                   2358 	.area CONST   (CODE)
      000034                       2359 ___str_4:
      000034 1B                    2360 	.db 0x1b
      000035 5B 32 4A              2361 	.ascii "[2J"
      000038 1B                    2362 	.db 0x1b
      000039 5B 3F 32 35 6C        2363 	.ascii "[?25l"
      00003E 00                    2364 	.db 0x00
                                   2365 	.area CSEG    (CODE)
                                   2366 	.area CONST   (CODE)
      00003F                       2367 ___str_5:
      00003F 1B                    2368 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2369 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2370 	.db 0x00
                                   2371 	.area CSEG    (CODE)
                                   2372 	.area CONST   (CODE)
      000052                       2373 ___str_6:
      000052 25 20 38 64 25 20 38  2374 	.ascii "% 8d% 8d"
             64
      00005A 00                    2375 	.db 0x00
                                   2376 	.area CSEG    (CODE)
                                   2377 	.area CONST   (CODE)
      00005B                       2378 ___str_7:
      00005B 1B                    2379 	.db 0x1b
      00005C 5B 32 4A              2380 	.ascii "[2J"
      00005F 1B                    2381 	.db 0x1b
      000060 5B 3F 32 35 68        2382 	.ascii "[?25h"
      000065 00                    2383 	.db 0x00
                                   2384 	.area CSEG    (CODE)
                                   2385 	.area XINIT   (CODE)
      000000                       2386 __xinit__R:
      000000 FE FF                 2387 	.byte #0xfe,#0xff
      000002                       2388 __xinit__neigh_tmpl:
      000002 FF FF                 2389 	.byte #0xff, #0xff	; -1
      000004 01 00                 2390 	.byte #0x01, #0x00	;  1
      000006 FF FF                 2391 	.byte #0xff, #0xff	; -1
      000008 FF FF                 2392 	.byte #0xff, #0xff	; -1
      00000A 01 00                 2393 	.byte #0x01, #0x00	;  1
      00000C FF FF                 2394 	.byte #0xff, #0xff	; -1
      00000E 01 00                 2395 	.byte #0x01, #0x00	;  1
      000010 01 00                 2396 	.byte #0x01, #0x00	;  1
      000012 FF FF                 2397 	.byte #0xff, #0xff	; -1
      000014 00 00                 2398 	.byte #0x00, #0x00	;  0
      000016 00 00                 2399 	.byte #0x00, #0x00	;  0
      000018 FF FF                 2400 	.byte #0xff, #0xff	; -1
      00001A 01 00                 2401 	.byte #0x01, #0x00	;  1
      00001C 00 00                 2402 	.byte #0x00, #0x00	;  0
      00001E 00 00                 2403 	.byte #0x00, #0x00	;  0
      000020 01 00                 2404 	.byte #0x01, #0x00	;  1
      000022 FF FF                 2405 	.byte #0xff, #0xff	; -1
      000024 01 00                 2406 	.byte #0x01, #0x00	;  1
      000026 FF FF                 2407 	.byte #0xff, #0xff	; -1
      000028 FF FF                 2408 	.byte #0xff, #0xff	; -1
      00002A 01 00                 2409 	.byte #0x01, #0x00	;  1
      00002C FF FF                 2410 	.byte #0xff, #0xff	; -1
      00002E 01 00                 2411 	.byte #0x01, #0x00	;  1
      000030 01 00                 2412 	.byte #0x01, #0x00	;  1
      000032 FF FF                 2413 	.byte #0xff, #0xff	; -1
      000034 00 00                 2414 	.byte #0x00, #0x00	;  0
      000036 00 00                 2415 	.byte #0x00, #0x00	;  0
      000038 FF FF                 2416 	.byte #0xff, #0xff	; -1
      00003A 01 00                 2417 	.byte #0x01, #0x00	;  1
      00003C 00 00                 2418 	.byte #0x00, #0x00	;  0
      00003E 00 00                 2419 	.byte #0x00, #0x00	;  0
      000040 01 00                 2420 	.byte #0x01, #0x00	;  1
      000042                       2421 __xinit__neigh:
      000042 FF FF                 2422 	.byte #0xff, #0xff	; -1
      000044 01 00                 2423 	.byte #0x01, #0x00	;  1
      000046 FF FF                 2424 	.byte #0xff, #0xff	; -1
      000048 FF FF                 2425 	.byte #0xff, #0xff	; -1
      00004A 01 00                 2426 	.byte #0x01, #0x00	;  1
      00004C FF FF                 2427 	.byte #0xff, #0xff	; -1
      00004E 01 00                 2428 	.byte #0x01, #0x00	;  1
      000050 01 00                 2429 	.byte #0x01, #0x00	;  1
      000052 FF FF                 2430 	.byte #0xff, #0xff	; -1
      000054 00 00                 2431 	.byte #0x00, #0x00	;  0
      000056 00 00                 2432 	.byte #0x00, #0x00	;  0
      000058 FF FF                 2433 	.byte #0xff, #0xff	; -1
      00005A 01 00                 2434 	.byte #0x01, #0x00	;  1
      00005C 00 00                 2435 	.byte #0x00, #0x00	;  0
      00005E 00 00                 2436 	.byte #0x00, #0x00	;  0
      000060 01 00                 2437 	.byte #0x01, #0x00	;  1
      000062 FF FF                 2438 	.byte #0xff, #0xff	; -1
      000064 01 00                 2439 	.byte #0x01, #0x00	;  1
      000066 FF FF                 2440 	.byte #0xff, #0xff	; -1
      000068 FF FF                 2441 	.byte #0xff, #0xff	; -1
      00006A 01 00                 2442 	.byte #0x01, #0x00	;  1
      00006C FF FF                 2443 	.byte #0xff, #0xff	; -1
      00006E 01 00                 2444 	.byte #0x01, #0x00	;  1
      000070 01 00                 2445 	.byte #0x01, #0x00	;  1
      000072 FF FF                 2446 	.byte #0xff, #0xff	; -1
      000074 00 00                 2447 	.byte #0x00, #0x00	;  0
      000076 00 00                 2448 	.byte #0x00, #0x00	;  0
      000078 FF FF                 2449 	.byte #0xff, #0xff	; -1
      00007A 01 00                 2450 	.byte #0x01, #0x00	;  1
      00007C 00 00                 2451 	.byte #0x00, #0x00	;  0
      00007E 00 00                 2452 	.byte #0x00, #0x00	;  0
      000080 01 00                 2453 	.byte #0x01, #0x00	;  1
                                   2454 	.area CABS    (ABS,CODE)
