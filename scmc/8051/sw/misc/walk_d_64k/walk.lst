                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9648
      0025B0                        323 _stack:
      0025B0                        324 	.ds 38592
      00BC70                        325 _sp:
      00BC70                        326 	.ds 2
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
      000000                        335 _R:
      000000                        336 	.ds 2
      000002                        337 _neigh:
      000002                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r06r6C         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	walk.c:9: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  395 	mov	a, dpl
      000002 02 00 30         [24]  396 	ljmp	0x0030
                                    397 ;	walk.c:15: }
                                    398 ;	naked function: no epilogue.
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'getchar'
                                    401 ;------------------------------------------------------------
                                    402 ;	walk.c:17: int getchar(void) __naked {
                                    403 ;	-----------------------------------------
                                    404 ;	 function getchar
                                    405 ;	-----------------------------------------
      000005                        406 _getchar:
                                    407 ;	naked function: no prologue.
                                    408 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  409 	lcall	0x0032
      000008 F5 82            [12]  410 	mov	dpl, a
      00000A 75 83 00         [24]  411 	mov	dph, #0
      00000D 22               [24]  412 	ret
                                    413 ;	walk.c:24: }
                                    414 ;	naked function: no epilogue.
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'int0'
                                    417 ;------------------------------------------------------------
                                    418 ;	walk.c:28: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    419 ;	-----------------------------------------
                                    420 ;	 function int0
                                    421 ;	-----------------------------------------
      00000E                        422 _int0:
                           00000F   423 	ar7 = 0x0f
                           00000E   424 	ar6 = 0x0e
                           00000D   425 	ar5 = 0x0d
                           00000C   426 	ar4 = 0x0c
                           00000B   427 	ar3 = 0x0b
                           00000A   428 	ar2 = 0x0a
                           000009   429 	ar1 = 0x09
                           000008   430 	ar0 = 0x08
      00000E C0 D0            [24]  431 	push	psw
      000010 75 D0 08         [24]  432 	mov	psw,#0x08
                                    433 ;	walk.c:29: i0 = 0u;
      000013 78r00            [12]  434 	mov	r0,#_i0
      000015 76 00            [12]  435 	mov	@r0,#0x00
                                    436 ;	walk.c:30: }
      000017 D0 D0            [24]  437 	pop	psw
      000019 32               [24]  438 	reti
                                    439 ;	eliminated unneeded push/pop dpl
                                    440 ;	eliminated unneeded push/pop dph
                                    441 ;	eliminated unneeded push/pop b
                                    442 ;	eliminated unneeded push/pop acc
                                    443 ;------------------------------------------------------------
                                    444 ;Allocation info for local variables in function 'reset'
                                    445 ;------------------------------------------------------------
                                    446 ;	walk.c:32: static void reset(void) __naked {
                                    447 ;	-----------------------------------------
                                    448 ;	 function reset
                                    449 ;	-----------------------------------------
      00001A                        450 _reset:
                                    451 ;	naked function: no prologue.
                                    452 ;	walk.c:35: __endasm;
      00001A 43 87 02         [24]  453 	orl	pcon, #2
                                    454 ;	walk.c:36: }
                                    455 ;	naked function: no epilogue.
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'bang'
                                    458 ;------------------------------------------------------------
                                    459 ;	walk.c:38: static void bang(void) {
                                    460 ;	-----------------------------------------
                                    461 ;	 function bang
                                    462 ;	-----------------------------------------
      00001D                        463 _bang:
                           000007   464 	ar7 = 0x07
                           000006   465 	ar6 = 0x06
                           000005   466 	ar5 = 0x05
                           000004   467 	ar4 = 0x04
                           000003   468 	ar3 = 0x03
                           000002   469 	ar2 = 0x02
                           000001   470 	ar1 = 0x01
                           000000   471 	ar0 = 0x00
                                    472 ;	walk.c:39: (void)puts("Memory error");
      00001D 90r00r00         [24]  473 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  474 	mov	b,#0x80
      000023 12r00r00         [24]  475 	lcall	_puts
                                    476 ;	walk.c:40: reset();
                                    477 ;	walk.c:42: return;
                                    478 ;	walk.c:43: }
      000026 02r00r1A         [24]  479 	ljmp	_reset
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'flashOE'
                                    482 ;------------------------------------------------------------
                                    483 ;mask                      Allocated to registers r7 
                                    484 ;OEreg                     Allocated to stack - _bp +1
                                    485 ;------------------------------------------------------------
                                    486 ;	walk.c:86: static void flashOE(uint8_t mask) {
                                    487 ;	-----------------------------------------
                                    488 ;	 function flashOE
                                    489 ;	-----------------------------------------
      000029                        490 _flashOE:
      000029 C0*00            [24]  491 	push	_bp
      00002B 85 81*00         [24]  492 	mov	_bp,sp
      00002E 05 81            [12]  493 	inc	sp
      000030 05 81            [12]  494 	inc	sp
      000032 AF 82            [24]  495 	mov	r7,dpl
                                    496 ;	walk.c:89: P1_7 = 0;
                                    497 ;	assignBit
      000034 C2 97            [12]  498 	clr	_P1_7
                                    499 ;	walk.c:90: *OEreg = OE76;
      000036 90 F0 06         [24]  500 	mov	dptr,#0xf006
      000039 78r01            [12]  501 	mov	r0,#_OE76
      00003B E6               [12]  502 	mov	a,@r0
      00003C F0               [24]  503 	movx	@dptr,a
                                    504 ;	walk.c:91: P1_7 = 1;
                                    505 ;	assignBit
      00003D D2 97            [12]  506 	setb	_P1_7
                                    507 ;	walk.c:92: OE76 ^= mask;
      00003F 78r01            [12]  508 	mov	r0,#_OE76
      000041 EF               [12]  509 	mov	a,r7
      000042 66               [12]  510 	xrl	a,@r0
      000043 F6               [12]  511 	mov	@r0,a
                                    512 ;	walk.c:94: return;
                                    513 ;	walk.c:95: }
      000044 85*00 81         [24]  514 	mov	sp,_bp
      000047 D0*00            [24]  515 	pop	_bp
      000049 22               [24]  516 	ret
                                    517 ;------------------------------------------------------------
                                    518 ;Allocation info for local variables in function 'update'
                                    519 ;------------------------------------------------------------
                                    520 ;cur                       Allocated to stack - _bp -5
                                    521 ;j                         Allocated to stack - _bp -6
                                    522 ;t                         Allocated to stack - _bp +1
                                    523 ;sloc0                     Allocated to stack - _bp +4
                                    524 ;sloc1                     Allocated to stack - _bp +6
                                    525 ;sloc2                     Allocated to stack - _bp +8
                                    526 ;------------------------------------------------------------
                                    527 ;	walk.c:97: static int update(struct node *t, struct node *cur, char j) {
                                    528 ;	-----------------------------------------
                                    529 ;	 function update
                                    530 ;	-----------------------------------------
      00004A                        531 _update:
      00004A C0*00            [24]  532 	push	_bp
      00004C 85 81*00         [24]  533 	mov	_bp,sp
      00004F C0 82            [24]  534 	push	dpl
      000051 C0 83            [24]  535 	push	dph
      000053 C0 F0            [24]  536 	push	b
      000055 E5 81            [12]  537 	mov	a,sp
      000057 24 07            [12]  538 	add	a,#0x07
      000059 F5 81            [12]  539 	mov	sp,a
                                    540 ;	walk.c:98: t->r = cur->r + neigh[j].r;
      00005B E5*00            [12]  541 	mov	a,_bp
      00005D 24 FB            [12]  542 	add	a,#0xfb
      00005F F8               [12]  543 	mov	r0,a
      000060 86 02            [24]  544 	mov	ar2,@r0
      000062 08               [12]  545 	inc	r0
      000063 86 03            [24]  546 	mov	ar3,@r0
      000065 08               [12]  547 	inc	r0
      000066 86 04            [24]  548 	mov	ar4,@r0
      000068 8A 82            [24]  549 	mov	dpl,r2
      00006A 8B 83            [24]  550 	mov	dph,r3
      00006C 8C F0            [24]  551 	mov	b,r4
      00006E E5*00            [12]  552 	mov	a,_bp
      000070 24 04            [12]  553 	add	a,#0x04
      000072 F8               [12]  554 	mov	r0,a
      000073 12r00r00         [24]  555 	lcall	__gptrget
      000076 F6               [12]  556 	mov	@r0,a
      000077 A3               [24]  557 	inc	dptr
      000078 12r00r00         [24]  558 	lcall	__gptrget
      00007B 08               [12]  559 	inc	r0
      00007C F6               [12]  560 	mov	@r0,a
      00007D E5*00            [12]  561 	mov	a,_bp
      00007F 24 FA            [12]  562 	add	a,#0xfa
      000081 F8               [12]  563 	mov	r0,a
      000082 E5*00            [12]  564 	mov	a,_bp
      000084 24 06            [12]  565 	add	a,#0x06
      000086 F9               [12]  566 	mov	r1,a
      000087 E6               [12]  567 	mov	a,@r0
      000088 75 F0 04         [24]  568 	mov	b,#0x04
      00008B A4               [48]  569 	mul	ab
      00008C F7               [12]  570 	mov	@r1,a
      00008D 09               [12]  571 	inc	r1
      00008E A7 F0            [24]  572 	mov	@r1,b
      000090 E5*00            [12]  573 	mov	a,_bp
      000092 24 06            [12]  574 	add	a,#0x06
      000094 F8               [12]  575 	mov	r0,a
      000095 E6               [12]  576 	mov	a,@r0
      000096 24r02            [12]  577 	add	a,#_neigh
      000098 F5 82            [12]  578 	mov	dpl,a
      00009A 08               [12]  579 	inc	r0
      00009B E6               [12]  580 	mov	a,@r0
      00009C 34s00            [12]  581 	addc	a,#(_neigh >> 8)
      00009E F5 83            [12]  582 	mov	dph,a
      0000A0 E0               [24]  583 	movx	a,@dptr
      0000A1 FF               [12]  584 	mov	r7,a
      0000A2 A3               [24]  585 	inc	dptr
      0000A3 E0               [24]  586 	movx	a,@dptr
      0000A4 FE               [12]  587 	mov	r6,a
      0000A5 E5*00            [12]  588 	mov	a,_bp
      0000A7 24 04            [12]  589 	add	a,#0x04
      0000A9 F8               [12]  590 	mov	r0,a
      0000AA EF               [12]  591 	mov	a,r7
      0000AB 26               [12]  592 	add	a,@r0
      0000AC FF               [12]  593 	mov	r7,a
      0000AD EE               [12]  594 	mov	a,r6
      0000AE 08               [12]  595 	inc	r0
      0000AF 36               [12]  596 	addc	a,@r0
      0000B0 FE               [12]  597 	mov	r6,a
      0000B1 A8*00            [24]  598 	mov	r0,_bp
      0000B3 08               [12]  599 	inc	r0
      0000B4 86 82            [24]  600 	mov	dpl,@r0
      0000B6 08               [12]  601 	inc	r0
      0000B7 86 83            [24]  602 	mov	dph,@r0
      0000B9 08               [12]  603 	inc	r0
      0000BA 86 F0            [24]  604 	mov	b,@r0
      0000BC EF               [12]  605 	mov	a,r7
      0000BD 12r00r00         [24]  606 	lcall	__gptrput
      0000C0 A3               [24]  607 	inc	dptr
      0000C1 EE               [12]  608 	mov	a,r6
      0000C2 12r00r00         [24]  609 	lcall	__gptrput
                                    610 ;	walk.c:99: t->c = cur->c + neigh[j].c;
      0000C5 A8*00            [24]  611 	mov	r0,_bp
      0000C7 08               [12]  612 	inc	r0
      0000C8 E5*00            [12]  613 	mov	a,_bp
      0000CA 24 08            [12]  614 	add	a,#0x08
      0000CC F9               [12]  615 	mov	r1,a
      0000CD 74 02            [12]  616 	mov	a,#0x02
      0000CF 26               [12]  617 	add	a,@r0
      0000D0 F7               [12]  618 	mov	@r1,a
      0000D1 E4               [12]  619 	clr	a
      0000D2 08               [12]  620 	inc	r0
      0000D3 36               [12]  621 	addc	a,@r0
      0000D4 09               [12]  622 	inc	r1
      0000D5 F7               [12]  623 	mov	@r1,a
      0000D6 08               [12]  624 	inc	r0
      0000D7 09               [12]  625 	inc	r1
      0000D8 E6               [12]  626 	mov	a,@r0
      0000D9 F7               [12]  627 	mov	@r1,a
      0000DA 74 02            [12]  628 	mov	a,#0x02
      0000DC 2A               [12]  629 	add	a,r2
      0000DD FA               [12]  630 	mov	r2,a
      0000DE E4               [12]  631 	clr	a
      0000DF 3B               [12]  632 	addc	a,r3
      0000E0 FB               [12]  633 	mov	r3,a
      0000E1 8A 82            [24]  634 	mov	dpl,r2
      0000E3 8B 83            [24]  635 	mov	dph,r3
      0000E5 8C F0            [24]  636 	mov	b,r4
      0000E7 12r00r00         [24]  637 	lcall	__gptrget
      0000EA FA               [12]  638 	mov	r2,a
      0000EB A3               [24]  639 	inc	dptr
      0000EC 12r00r00         [24]  640 	lcall	__gptrget
      0000EF FB               [12]  641 	mov	r3,a
      0000F0 E5*00            [12]  642 	mov	a,_bp
      0000F2 24 06            [12]  643 	add	a,#0x06
      0000F4 F8               [12]  644 	mov	r0,a
      0000F5 E6               [12]  645 	mov	a,@r0
      0000F6 24r02            [12]  646 	add	a,#_neigh
      0000F8 FC               [12]  647 	mov	r4,a
      0000F9 08               [12]  648 	inc	r0
      0000FA E6               [12]  649 	mov	a,@r0
      0000FB 34s00            [12]  650 	addc	a,#(_neigh >> 8)
      0000FD FD               [12]  651 	mov	r5,a
      0000FE 8C 82            [24]  652 	mov	dpl,r4
      000100 8D 83            [24]  653 	mov	dph,r5
      000102 A3               [24]  654 	inc	dptr
      000103 A3               [24]  655 	inc	dptr
      000104 E0               [24]  656 	movx	a,@dptr
      000105 FC               [12]  657 	mov	r4,a
      000106 A3               [24]  658 	inc	dptr
      000107 E0               [24]  659 	movx	a,@dptr
      000108 FD               [12]  660 	mov	r5,a
      000109 EC               [12]  661 	mov	a,r4
      00010A 2A               [12]  662 	add	a,r2
      00010B FA               [12]  663 	mov	r2,a
      00010C ED               [12]  664 	mov	a,r5
      00010D 3B               [12]  665 	addc	a,r3
      00010E FB               [12]  666 	mov	r3,a
      00010F E5*00            [12]  667 	mov	a,_bp
      000111 24 08            [12]  668 	add	a,#0x08
      000113 F8               [12]  669 	mov	r0,a
      000114 86 82            [24]  670 	mov	dpl,@r0
      000116 08               [12]  671 	inc	r0
      000117 86 83            [24]  672 	mov	dph,@r0
      000119 08               [12]  673 	inc	r0
      00011A 86 F0            [24]  674 	mov	b,@r0
      00011C EA               [12]  675 	mov	a,r2
      00011D 12r00r00         [24]  676 	lcall	__gptrput
      000120 A3               [24]  677 	inc	dptr
      000121 EB               [12]  678 	mov	a,r3
      000122 12r00r00         [24]  679 	lcall	__gptrput
                                    680 ;	walk.c:101: if (t->r < 0) t->r += ROWS;
      000125 A8*00            [24]  681 	mov	r0,_bp
      000127 08               [12]  682 	inc	r0
      000128 86 82            [24]  683 	mov	dpl,@r0
      00012A 08               [12]  684 	inc	r0
      00012B 86 83            [24]  685 	mov	dph,@r0
      00012D 08               [12]  686 	inc	r0
      00012E 86 F0            [24]  687 	mov	b,@r0
      000130 12r00r00         [24]  688 	lcall	__gptrget
      000133 FD               [12]  689 	mov	r5,a
      000134 A3               [24]  690 	inc	dptr
      000135 12r00r00         [24]  691 	lcall	__gptrget
      000138 FC               [12]  692 	mov	r4,a
      000139 EE               [12]  693 	mov	a,r6
      00013A 30 E7 1D         [24]  694 	jnb	acc.7,00104$
      00013D 74 30            [12]  695 	mov	a,#0x30
      00013F 2D               [12]  696 	add	a,r5
      000140 FF               [12]  697 	mov	r7,a
      000141 E4               [12]  698 	clr	a
      000142 3C               [12]  699 	addc	a,r4
      000143 FE               [12]  700 	mov	r6,a
      000144 A8*00            [24]  701 	mov	r0,_bp
      000146 08               [12]  702 	inc	r0
      000147 86 82            [24]  703 	mov	dpl,@r0
      000149 08               [12]  704 	inc	r0
      00014A 86 83            [24]  705 	mov	dph,@r0
      00014C 08               [12]  706 	inc	r0
      00014D 86 F0            [24]  707 	mov	b,@r0
      00014F EF               [12]  708 	mov	a,r7
      000150 12r00r00         [24]  709 	lcall	__gptrput
      000153 A3               [24]  710 	inc	dptr
      000154 EE               [12]  711 	mov	a,r6
      000155 12r00r00         [24]  712 	lcall	__gptrput
      000158 80 27            [24]  713 	sjmp	00105$
      00015A                        714 00104$:
                                    715 ;	walk.c:102: else if (t->r >= ROWS) t->r -= ROWS;
      00015A C3               [12]  716 	clr	c
      00015B ED               [12]  717 	mov	a,r5
      00015C 94 30            [12]  718 	subb	a,#0x30
      00015E EC               [12]  719 	mov	a,r4
      00015F 64 80            [12]  720 	xrl	a,#0x80
      000161 94 80            [12]  721 	subb	a,#0x80
      000163 40 1C            [24]  722 	jc	00105$
      000165 ED               [12]  723 	mov	a,r5
      000166 24 D0            [12]  724 	add	a,#0xd0
      000168 FD               [12]  725 	mov	r5,a
      000169 EC               [12]  726 	mov	a,r4
      00016A 34 FF            [12]  727 	addc	a,#0xff
      00016C FC               [12]  728 	mov	r4,a
      00016D A8*00            [24]  729 	mov	r0,_bp
      00016F 08               [12]  730 	inc	r0
      000170 86 82            [24]  731 	mov	dpl,@r0
      000172 08               [12]  732 	inc	r0
      000173 86 83            [24]  733 	mov	dph,@r0
      000175 08               [12]  734 	inc	r0
      000176 86 F0            [24]  735 	mov	b,@r0
      000178 ED               [12]  736 	mov	a,r5
      000179 12r00r00         [24]  737 	lcall	__gptrput
      00017C A3               [24]  738 	inc	dptr
      00017D EC               [12]  739 	mov	a,r4
      00017E 12r00r00         [24]  740 	lcall	__gptrput
      000181                        741 00105$:
                                    742 ;	walk.c:103: if (t->c < 0) t->c += COLS;
      000181 E5*00            [12]  743 	mov	a,_bp
      000183 24 08            [12]  744 	add	a,#0x08
      000185 F8               [12]  745 	mov	r0,a
      000186 86 82            [24]  746 	mov	dpl,@r0
      000188 08               [12]  747 	inc	r0
      000189 86 83            [24]  748 	mov	dph,@r0
      00018B 08               [12]  749 	inc	r0
      00018C 86 F0            [24]  750 	mov	b,@r0
      00018E 12r00r00         [24]  751 	lcall	__gptrget
      000191 A3               [24]  752 	inc	dptr
      000192 12r00r00         [24]  753 	lcall	__gptrget
      000195 30 E7 35         [24]  754 	jnb	acc.7,00109$
      000198 E5*00            [12]  755 	mov	a,_bp
      00019A 24 08            [12]  756 	add	a,#0x08
      00019C F8               [12]  757 	mov	r0,a
      00019D 86 82            [24]  758 	mov	dpl,@r0
      00019F 08               [12]  759 	inc	r0
      0001A0 86 83            [24]  760 	mov	dph,@r0
      0001A2 08               [12]  761 	inc	r0
      0001A3 86 F0            [24]  762 	mov	b,@r0
      0001A5 12r00r00         [24]  763 	lcall	__gptrget
      0001A8 FE               [12]  764 	mov	r6,a
      0001A9 A3               [24]  765 	inc	dptr
      0001AA 12r00r00         [24]  766 	lcall	__gptrget
      0001AD FF               [12]  767 	mov	r7,a
      0001AE 74 C9            [12]  768 	mov	a,#0xc9
      0001B0 2E               [12]  769 	add	a,r6
      0001B1 FE               [12]  770 	mov	r6,a
      0001B2 E4               [12]  771 	clr	a
      0001B3 3F               [12]  772 	addc	a,r7
      0001B4 FF               [12]  773 	mov	r7,a
      0001B5 E5*00            [12]  774 	mov	a,_bp
      0001B7 24 08            [12]  775 	add	a,#0x08
      0001B9 F8               [12]  776 	mov	r0,a
      0001BA 86 82            [24]  777 	mov	dpl,@r0
      0001BC 08               [12]  778 	inc	r0
      0001BD 86 83            [24]  779 	mov	dph,@r0
      0001BF 08               [12]  780 	inc	r0
      0001C0 86 F0            [24]  781 	mov	b,@r0
      0001C2 EE               [12]  782 	mov	a,r6
      0001C3 12r00r00         [24]  783 	lcall	__gptrput
      0001C6 A3               [24]  784 	inc	dptr
      0001C7 EF               [12]  785 	mov	a,r7
      0001C8 12r00r00         [24]  786 	lcall	__gptrput
      0001CB 80 55            [24]  787 	sjmp	00110$
      0001CD                        788 00109$:
                                    789 ;	walk.c:104: else if (t->c >= COLS) t->c -= COLS;
      0001CD E5*00            [12]  790 	mov	a,_bp
      0001CF 24 08            [12]  791 	add	a,#0x08
      0001D1 F8               [12]  792 	mov	r0,a
      0001D2 86 82            [24]  793 	mov	dpl,@r0
      0001D4 08               [12]  794 	inc	r0
      0001D5 86 83            [24]  795 	mov	dph,@r0
      0001D7 08               [12]  796 	inc	r0
      0001D8 86 F0            [24]  797 	mov	b,@r0
      0001DA 12r00r00         [24]  798 	lcall	__gptrget
      0001DD FE               [12]  799 	mov	r6,a
      0001DE A3               [24]  800 	inc	dptr
      0001DF 12r00r00         [24]  801 	lcall	__gptrget
      0001E2 FF               [12]  802 	mov	r7,a
      0001E3 C3               [12]  803 	clr	c
      0001E4 EE               [12]  804 	mov	a,r6
      0001E5 94 C9            [12]  805 	subb	a,#0xc9
      0001E7 EF               [12]  806 	mov	a,r7
      0001E8 64 80            [12]  807 	xrl	a,#0x80
      0001EA 94 80            [12]  808 	subb	a,#0x80
      0001EC 40 34            [24]  809 	jc	00110$
      0001EE E5*00            [12]  810 	mov	a,_bp
      0001F0 24 08            [12]  811 	add	a,#0x08
      0001F2 F8               [12]  812 	mov	r0,a
      0001F3 86 82            [24]  813 	mov	dpl,@r0
      0001F5 08               [12]  814 	inc	r0
      0001F6 86 83            [24]  815 	mov	dph,@r0
      0001F8 08               [12]  816 	inc	r0
      0001F9 86 F0            [24]  817 	mov	b,@r0
      0001FB 12r00r00         [24]  818 	lcall	__gptrget
      0001FE FE               [12]  819 	mov	r6,a
      0001FF A3               [24]  820 	inc	dptr
      000200 12r00r00         [24]  821 	lcall	__gptrget
      000203 FF               [12]  822 	mov	r7,a
      000204 EE               [12]  823 	mov	a,r6
      000205 24 37            [12]  824 	add	a,#0x37
      000207 FE               [12]  825 	mov	r6,a
      000208 EF               [12]  826 	mov	a,r7
      000209 34 FF            [12]  827 	addc	a,#0xff
      00020B FF               [12]  828 	mov	r7,a
      00020C E5*00            [12]  829 	mov	a,_bp
      00020E 24 08            [12]  830 	add	a,#0x08
      000210 F8               [12]  831 	mov	r0,a
      000211 86 82            [24]  832 	mov	dpl,@r0
      000213 08               [12]  833 	inc	r0
      000214 86 83            [24]  834 	mov	dph,@r0
      000216 08               [12]  835 	inc	r0
      000217 86 F0            [24]  836 	mov	b,@r0
      000219 EE               [12]  837 	mov	a,r6
      00021A 12r00r00         [24]  838 	lcall	__gptrput
      00021D A3               [24]  839 	inc	dptr
      00021E EF               [12]  840 	mov	a,r7
      00021F 12r00r00         [24]  841 	lcall	__gptrput
      000222                        842 00110$:
                                    843 ;	walk.c:106: if (g[t->r][t->c] == 0xaa) return 0;
      000222 A8*00            [24]  844 	mov	r0,_bp
      000224 08               [12]  845 	inc	r0
      000225 86 82            [24]  846 	mov	dpl,@r0
      000227 08               [12]  847 	inc	r0
      000228 86 83            [24]  848 	mov	dph,@r0
      00022A 08               [12]  849 	inc	r0
      00022B 86 F0            [24]  850 	mov	b,@r0
      00022D 12r00r00         [24]  851 	lcall	__gptrget
      000230 FE               [12]  852 	mov	r6,a
      000231 A3               [24]  853 	inc	dptr
      000232 12r00r00         [24]  854 	lcall	__gptrget
      000235 FF               [12]  855 	mov	r7,a
      000236 C0 06            [24]  856 	push	ar6
      000238 C0 07            [24]  857 	push	ar7
      00023A 90 00 C9         [24]  858 	mov	dptr,#0x00c9
      00023D 12r00r00         [24]  859 	lcall	__mulint
      000240 AE 82            [24]  860 	mov	r6,dpl
      000242 AF 83            [24]  861 	mov	r7,dph
      000244 15 81            [12]  862 	dec	sp
      000246 15 81            [12]  863 	dec	sp
      000248 EE               [12]  864 	mov	a,r6
      000249 24r00            [12]  865 	add	a,#_g
      00024B FE               [12]  866 	mov	r6,a
      00024C EF               [12]  867 	mov	a,r7
      00024D 34s00            [12]  868 	addc	a,#(_g >> 8)
      00024F FF               [12]  869 	mov	r7,a
      000250 E5*00            [12]  870 	mov	a,_bp
      000252 24 08            [12]  871 	add	a,#0x08
      000254 F8               [12]  872 	mov	r0,a
      000255 86 82            [24]  873 	mov	dpl,@r0
      000257 08               [12]  874 	inc	r0
      000258 86 83            [24]  875 	mov	dph,@r0
      00025A 08               [12]  876 	inc	r0
      00025B 86 F0            [24]  877 	mov	b,@r0
      00025D 12r00r00         [24]  878 	lcall	__gptrget
      000260 FC               [12]  879 	mov	r4,a
      000261 A3               [24]  880 	inc	dptr
      000262 12r00r00         [24]  881 	lcall	__gptrget
      000265 FD               [12]  882 	mov	r5,a
      000266 EC               [12]  883 	mov	a,r4
      000267 2E               [12]  884 	add	a,r6
      000268 F5 82            [12]  885 	mov	dpl,a
      00026A ED               [12]  886 	mov	a,r5
      00026B 3F               [12]  887 	addc	a,r7
      00026C F5 83            [12]  888 	mov	dph,a
      00026E E0               [24]  889 	movx	a,@dptr
      00026F FF               [12]  890 	mov	r7,a
      000270 BF AA 05         [24]  891 	cjne	r7,#0xaa,00114$
      000273 90 00 00         [24]  892 	mov	dptr,#0x0000
      000276 80 59            [24]  893 	sjmp	00116$
      000278                        894 00114$:
                                    895 ;	walk.c:107: else if (g[t->r][t->c] != 0x55) bang();
      000278 A8*00            [24]  896 	mov	r0,_bp
      00027A 08               [12]  897 	inc	r0
      00027B 86 82            [24]  898 	mov	dpl,@r0
      00027D 08               [12]  899 	inc	r0
      00027E 86 83            [24]  900 	mov	dph,@r0
      000280 08               [12]  901 	inc	r0
      000281 86 F0            [24]  902 	mov	b,@r0
      000283 12r00r00         [24]  903 	lcall	__gptrget
      000286 FE               [12]  904 	mov	r6,a
      000287 A3               [24]  905 	inc	dptr
      000288 12r00r00         [24]  906 	lcall	__gptrget
      00028B FF               [12]  907 	mov	r7,a
      00028C C0 06            [24]  908 	push	ar6
      00028E C0 07            [24]  909 	push	ar7
      000290 90 00 C9         [24]  910 	mov	dptr,#0x00c9
      000293 12r00r00         [24]  911 	lcall	__mulint
      000296 AE 82            [24]  912 	mov	r6,dpl
      000298 AF 83            [24]  913 	mov	r7,dph
      00029A 15 81            [12]  914 	dec	sp
      00029C 15 81            [12]  915 	dec	sp
      00029E EE               [12]  916 	mov	a,r6
      00029F 24r00            [12]  917 	add	a,#_g
      0002A1 FE               [12]  918 	mov	r6,a
      0002A2 EF               [12]  919 	mov	a,r7
      0002A3 34s00            [12]  920 	addc	a,#(_g >> 8)
      0002A5 FF               [12]  921 	mov	r7,a
      0002A6 E5*00            [12]  922 	mov	a,_bp
      0002A8 24 08            [12]  923 	add	a,#0x08
      0002AA F8               [12]  924 	mov	r0,a
      0002AB 86 82            [24]  925 	mov	dpl,@r0
      0002AD 08               [12]  926 	inc	r0
      0002AE 86 83            [24]  927 	mov	dph,@r0
      0002B0 08               [12]  928 	inc	r0
      0002B1 86 F0            [24]  929 	mov	b,@r0
      0002B3 12r00r00         [24]  930 	lcall	__gptrget
      0002B6 FC               [12]  931 	mov	r4,a
      0002B7 A3               [24]  932 	inc	dptr
      0002B8 12r00r00         [24]  933 	lcall	__gptrget
      0002BB FD               [12]  934 	mov	r5,a
      0002BC EC               [12]  935 	mov	a,r4
      0002BD 2E               [12]  936 	add	a,r6
      0002BE F5 82            [12]  937 	mov	dpl,a
      0002C0 ED               [12]  938 	mov	a,r5
      0002C1 3F               [12]  939 	addc	a,r7
      0002C2 F5 83            [12]  940 	mov	dph,a
      0002C4 E0               [24]  941 	movx	a,@dptr
      0002C5 FF               [12]  942 	mov	r7,a
      0002C6 BF 55 02         [24]  943 	cjne	r7,#0x55,00148$
      0002C9 80 03            [24]  944 	sjmp	00115$
      0002CB                        945 00148$:
      0002CB 12r00r1D         [24]  946 	lcall	_bang
      0002CE                        947 00115$:
                                    948 ;	walk.c:109: return 1;
      0002CE 90 00 01         [24]  949 	mov	dptr,#0x0001
      0002D1                        950 00116$:
                                    951 ;	walk.c:110: }
      0002D1 85*00 81         [24]  952 	mov	sp,_bp
      0002D4 D0*00            [24]  953 	pop	_bp
      0002D6 22               [24]  954 	ret
                                    955 ;------------------------------------------------------------
                                    956 ;Allocation info for local variables in function 'walk'
                                    957 ;------------------------------------------------------------
                                    958 ;nstart                    Allocated to registers 
                                    959 ;cur                       Allocated to stack - _bp +10
                                    960 ;t                         Allocated to stack - _bp +14
                                    961 ;j                         Allocated to stack - _bp +18
                                    962 ;f                         Allocated to registers r3 
                                    963 ;sloc0                     Allocated to stack - _bp +1
                                    964 ;sloc1                     Allocated to stack - _bp +2
                                    965 ;sloc2                     Allocated to stack - _bp +3
                                    966 ;sloc3                     Allocated to stack - _bp +17
                                    967 ;sloc4                     Allocated to stack - _bp +4
                                    968 ;sloc5                     Allocated to stack - _bp +5
                                    969 ;sloc6                     Allocated to stack - _bp +6
                                    970 ;sloc7                     Allocated to stack - _bp +7
                                    971 ;------------------------------------------------------------
                                    972 ;	walk.c:112: static void walk(struct node *nstart) {
                                    973 ;	-----------------------------------------
                                    974 ;	 function walk
                                    975 ;	-----------------------------------------
      0002D7                        976 _walk:
      0002D7 C0*00            [24]  977 	push	_bp
      0002D9 E5 81            [12]  978 	mov	a,sp
      0002DB F5*00            [12]  979 	mov	_bp,a
      0002DD 24 12            [12]  980 	add	a,#0x12
      0002DF F5 81            [12]  981 	mov	sp,a
      0002E1 AD 82            [24]  982 	mov	r5,dpl
      0002E3 AE 83            [24]  983 	mov	r6,dph
      0002E5 AF F0            [24]  984 	mov	r7,b
                                    985 ;	walk.c:116: cur = *nstart;
      0002E7 E5*00            [12]  986 	mov	a,_bp
      0002E9 24 0A            [12]  987 	add	a,#0x0a
      0002EB F9               [12]  988 	mov	r1,a
      0002EC FA               [12]  989 	mov	r2,a
      0002ED 7B 00            [12]  990 	mov	r3,#0x00
      0002EF 7C 40            [12]  991 	mov	r4,#0x40
      0002F1 C0 01            [24]  992 	push	ar1
      0002F3 74 04            [12]  993 	mov	a,#0x04
      0002F5 C0 E0            [24]  994 	push	acc
      0002F7 E4               [12]  995 	clr	a
      0002F8 C0 E0            [24]  996 	push	acc
      0002FA C0 05            [24]  997 	push	ar5
      0002FC C0 06            [24]  998 	push	ar6
      0002FE C0 07            [24]  999 	push	ar7
      000300 8A 82            [24] 1000 	mov	dpl,r2
      000302 8B 83            [24] 1001 	mov	dph,r3
      000304 8C F0            [24] 1002 	mov	b,r4
      000306 12r00r00         [24] 1003 	lcall	___memcpy
      000309 E5 81            [12] 1004 	mov	a,sp
      00030B 24 FB            [12] 1005 	add	a,#0xfb
      00030D F5 81            [12] 1006 	mov	sp,a
      00030F D0 01            [24] 1007 	pop	ar1
                                   1008 ;	walk.c:118: process:
      000311 E5*00            [12] 1009 	mov	a,_bp
      000313 24 06            [12] 1010 	add	a,#0x06
      000315 F8               [12] 1011 	mov	r0,a
      000316 A6 01            [24] 1012 	mov	@r0,ar1
      000318 E5*00            [12] 1013 	mov	a,_bp
      00031A 24 0E            [12] 1014 	add	a,#0x0e
      00031C FE               [12] 1015 	mov	r6,a
      00031D E5*00            [12] 1016 	mov	a,_bp
      00031F 24 03            [12] 1017 	add	a,#0x03
      000321 F8               [12] 1018 	mov	r0,a
      000322 A6 01            [24] 1019 	mov	@r0,ar1
      000324 E5*00            [12] 1020 	mov	a,_bp
      000326 24 05            [12] 1021 	add	a,#0x05
      000328 F8               [12] 1022 	mov	r0,a
      000329 A6 01            [24] 1023 	mov	@r0,ar1
      00032B E5*00            [12] 1024 	mov	a,_bp
      00032D 24 04            [12] 1025 	add	a,#0x04
      00032F F8               [12] 1026 	mov	r0,a
      000330 A6 06            [24] 1027 	mov	@r0,ar6
      000332 89 02            [24] 1028 	mov	ar2,r1
      000334 A8*00            [24] 1029 	mov	r0,_bp
      000336 08               [12] 1030 	inc	r0
      000337 A6 06            [24] 1031 	mov	@r0,ar6
      000339 A8*00            [24] 1032 	mov	r0,_bp
      00033B 08               [12] 1033 	inc	r0
      00033C 08               [12] 1034 	inc	r0
      00033D A6 01            [24] 1035 	mov	@r0,ar1
      00033F 74 02            [12] 1036 	mov	a,#0x02
      000341 29               [12] 1037 	add	a,r1
      000342 F8               [12] 1038 	mov	r0,a
      000343                       1039 00101$:
                                   1040 ;	walk.c:119: g[cur.r][cur.c] = 0xaa;
      000343 C0 02            [24] 1041 	push	ar2
      000345 87 02            [24] 1042 	mov	ar2,@r1
      000347 09               [12] 1043 	inc	r1
      000348 87 05            [24] 1044 	mov	ar5,@r1
      00034A 19               [12] 1045 	dec	r1
      00034B C0 06            [24] 1046 	push	ar6
      00034D C0 01            [24] 1047 	push	ar1
      00034F C0 00            [24] 1048 	push	ar0
      000351 C0 02            [24] 1049 	push	ar2
      000353 C0 05            [24] 1050 	push	ar5
      000355 90 00 C9         [24] 1051 	mov	dptr,#0x00c9
      000358 12r00r00         [24] 1052 	lcall	__mulint
      00035B AA 82            [24] 1053 	mov	r2,dpl
      00035D AD 83            [24] 1054 	mov	r5,dph
      00035F 15 81            [12] 1055 	dec	sp
      000361 15 81            [12] 1056 	dec	sp
      000363 D0 00            [24] 1057 	pop	ar0
      000365 D0 01            [24] 1058 	pop	ar1
      000367 EA               [12] 1059 	mov	a,r2
      000368 24r00            [12] 1060 	add	a,#_g
      00036A FF               [12] 1061 	mov	r7,a
      00036B ED               [12] 1062 	mov	a,r5
      00036C 34s00            [12] 1063 	addc	a,#(_g >> 8)
      00036E FC               [12] 1064 	mov	r4,a
      00036F 86 02            [24] 1065 	mov	ar2,@r0
      000371 08               [12] 1066 	inc	r0
      000372 86 05            [24] 1067 	mov	ar5,@r0
      000374 18               [12] 1068 	dec	r0
      000375 EA               [12] 1069 	mov	a,r2
      000376 2F               [12] 1070 	add	a,r7
      000377 F5 82            [12] 1071 	mov	dpl,a
      000379 ED               [12] 1072 	mov	a,r5
      00037A 3C               [12] 1073 	addc	a,r4
      00037B F5 83            [12] 1074 	mov	dph,a
      00037D 74 AA            [12] 1075 	mov	a,#0xaa
      00037F F0               [24] 1076 	movx	@dptr,a
                                   1077 ;	walk.c:120: printf("\033[%d;%dHo", cur.r + 4, cur.c + 1);
      000380 86 02            [24] 1078 	mov	ar2,@r0
      000382 08               [12] 1079 	inc	r0
      000383 86 05            [24] 1080 	mov	ar5,@r0
      000385 18               [12] 1081 	dec	r0
      000386 74 01            [12] 1082 	mov	a,#0x01
      000388 2A               [12] 1083 	add	a,r2
      000389 FF               [12] 1084 	mov	r7,a
      00038A E4               [12] 1085 	clr	a
      00038B 3D               [12] 1086 	addc	a,r5
      00038C FC               [12] 1087 	mov	r4,a
      00038D 87 02            [24] 1088 	mov	ar2,@r1
      00038F 09               [12] 1089 	inc	r1
      000390 87 05            [24] 1090 	mov	ar5,@r1
      000392 19               [12] 1091 	dec	r1
      000393 74 04            [12] 1092 	mov	a,#0x04
      000395 2A               [12] 1093 	add	a,r2
      000396 FA               [12] 1094 	mov	r2,a
      000397 E4               [12] 1095 	clr	a
      000398 3D               [12] 1096 	addc	a,r5
      000399 FD               [12] 1097 	mov	r5,a
      00039A C0 02            [24] 1098 	push	ar2
      00039C C0 01            [24] 1099 	push	ar1
      00039E C0 00            [24] 1100 	push	ar0
      0003A0 C0 07            [24] 1101 	push	ar7
      0003A2 C0 04            [24] 1102 	push	ar4
      0003A4 C0 02            [24] 1103 	push	ar2
      0003A6 C0 05            [24] 1104 	push	ar5
      0003A8 74r0D            [12] 1105 	mov	a,#___str_1
      0003AA C0 E0            [24] 1106 	push	acc
      0003AC 74s00            [12] 1107 	mov	a,#(___str_1 >> 8)
      0003AE C0 E0            [24] 1108 	push	acc
      0003B0 74 80            [12] 1109 	mov	a,#0x80
      0003B2 C0 E0            [24] 1110 	push	acc
      0003B4 12r00r00         [24] 1111 	lcall	_printf
      0003B7 E5 81            [12] 1112 	mov	a,sp
      0003B9 24 F9            [12] 1113 	add	a,#0xf9
      0003BB F5 81            [12] 1114 	mov	sp,a
                                   1115 ;	walk.c:121: flashOE(OE76_MASK7);
      0003BD 75 82 80         [24] 1116 	mov	dpl,#0x80
      0003C0 12r00r29         [24] 1117 	lcall	_flashOE
      0003C3 D0 00            [24] 1118 	pop	ar0
      0003C5 D0 01            [24] 1119 	pop	ar1
      0003C7 D0 02            [24] 1120 	pop	ar2
      0003C9 D0 06            [24] 1121 	pop	ar6
                                   1122 ;	walk.c:146: return;
      0003CB D0 02            [24] 1123 	pop	ar2
                                   1124 ;	walk.c:123: next:
      0003CD                       1125 00102$:
                                   1126 ;	walk.c:124: printf("\033[2;1H% 8d% 8d% 8d", sp, cur.r, cur.c);
      0003CD C0 02            [24] 1127 	push	ar2
      0003CF 86 07            [24] 1128 	mov	ar7,@r0
      0003D1 08               [12] 1129 	inc	r0
      0003D2 86 04            [24] 1130 	mov	ar4,@r0
      0003D4 18               [12] 1131 	dec	r0
      0003D5 87 02            [24] 1132 	mov	ar2,@r1
      0003D7 09               [12] 1133 	inc	r1
      0003D8 87 05            [24] 1134 	mov	ar5,@r1
      0003DA 19               [12] 1135 	dec	r1
      0003DB C0 06            [24] 1136 	push	ar6
      0003DD C0 02            [24] 1137 	push	ar2
      0003DF C0 01            [24] 1138 	push	ar1
      0003E1 C0 00            [24] 1139 	push	ar0
      0003E3 C0 07            [24] 1140 	push	ar7
      0003E5 C0 04            [24] 1141 	push	ar4
      0003E7 C0 02            [24] 1142 	push	ar2
      0003E9 C0 05            [24] 1143 	push	ar5
      0003EB 90rBCr70         [24] 1144 	mov	dptr,#_sp
      0003EE E0               [24] 1145 	movx	a,@dptr
      0003EF C0 E0            [24] 1146 	push	acc
      0003F1 A3               [24] 1147 	inc	dptr
      0003F2 E0               [24] 1148 	movx	a,@dptr
      0003F3 C0 E0            [24] 1149 	push	acc
      0003F5 74r17            [12] 1150 	mov	a,#___str_2
      0003F7 C0 E0            [24] 1151 	push	acc
      0003F9 74s00            [12] 1152 	mov	a,#(___str_2 >> 8)
      0003FB C0 E0            [24] 1153 	push	acc
      0003FD 74 80            [12] 1154 	mov	a,#0x80
      0003FF C0 E0            [24] 1155 	push	acc
      000401 12r00r00         [24] 1156 	lcall	_printf
      000404 E5 81            [12] 1157 	mov	a,sp
      000406 24 F7            [12] 1158 	add	a,#0xf7
      000408 F5 81            [12] 1159 	mov	sp,a
      00040A D0 00            [24] 1160 	pop	ar0
      00040C D0 01            [24] 1161 	pop	ar1
      00040E D0 02            [24] 1162 	pop	ar2
      000410 D0 06            [24] 1163 	pop	ar6
                                   1164 ;	walk.c:126: for (j = 0, f = 0; j < NMAX; j++) {
      000412 7B 00            [12] 1165 	mov	r3,#0x00
      000414 C0 00            [24] 1166 	push	ar0
      000416 E5*00            [12] 1167 	mov	a,_bp
      000418 24 12            [12] 1168 	add	a,#0x12
      00041A F8               [12] 1169 	mov	r0,a
      00041B 76 00            [12] 1170 	mov	@r0,#0x00
      00041D D0 00            [24] 1171 	pop	ar0
                                   1172 ;	walk.c:146: return;
      00041F D0 02            [24] 1173 	pop	ar2
                                   1174 ;	walk.c:126: for (j = 0, f = 0; j < NMAX; j++) {
      000421                       1175 00119$:
      000421 C0 00            [24] 1176 	push	ar0
      000423 E5*00            [12] 1177 	mov	a,_bp
      000425 24 12            [12] 1178 	add	a,#0x12
      000427 F8               [12] 1179 	mov	r0,a
      000428 B6 10 00         [24] 1180 	cjne	@r0,#0x10,00159$
      00042B                       1181 00159$:
      00042B D0 00            [24] 1182 	pop	ar0
      00042D 40 03            [24] 1183 	jc	00160$
      00042F 02r04rAF         [24] 1184 	ljmp	00106$
      000432                       1185 00160$:
                                   1186 ;	walk.c:127: if (!update(&t, &cur, j)) continue;
      000432 C0 02            [24] 1187 	push	ar2
      000434 C0 00            [24] 1188 	push	ar0
      000436 E5*00            [12] 1189 	mov	a,_bp
      000438 24 06            [12] 1190 	add	a,#0x06
      00043A F8               [12] 1191 	mov	r0,a
      00043B C0 01            [24] 1192 	push	ar1
      00043D E5*00            [12] 1193 	mov	a,_bp
      00043F 24 07            [12] 1194 	add	a,#0x07
      000441 F9               [12] 1195 	mov	r1,a
      000442 E6               [12] 1196 	mov	a,@r0
      000443 F7               [12] 1197 	mov	@r1,a
      000444 09               [12] 1198 	inc	r1
      000445 77 00            [12] 1199 	mov	@r1,#0x00
      000447 09               [12] 1200 	inc	r1
      000448 77 40            [12] 1201 	mov	@r1,#0x40
      00044A D0 01            [24] 1202 	pop	ar1
      00044C D0 00            [24] 1203 	pop	ar0
      00044E 8E 04            [24] 1204 	mov	ar4,r6
      000450 7D 00            [12] 1205 	mov	r5,#0x00
      000452 7F 40            [12] 1206 	mov	r7,#0x40
      000454 C0 06            [24] 1207 	push	ar6
      000456 C0 03            [24] 1208 	push	ar3
      000458 C0 02            [24] 1209 	push	ar2
      00045A C0 01            [24] 1210 	push	ar1
      00045C C0 00            [24] 1211 	push	ar0
      00045E 85 00 F0         [24] 1212 	mov	b,ar0
      000461 E5*00            [12] 1213 	mov	a,_bp
      000463 24 12            [12] 1214 	add	a,#0x12
      000465 F8               [12] 1215 	mov	r0,a
      000466 E6               [12] 1216 	mov	a,@r0
      000467 C0 E0            [24] 1217 	push	acc
      000469 A8 F0            [24] 1218 	mov	r0,b
      00046B 85 00 F0         [24] 1219 	mov	b,ar0
      00046E E5*00            [12] 1220 	mov	a,_bp
      000470 24 07            [12] 1221 	add	a,#0x07
      000472 F8               [12] 1222 	mov	r0,a
      000473 E6               [12] 1223 	mov	a,@r0
      000474 C0 E0            [24] 1224 	push	acc
      000476 08               [12] 1225 	inc	r0
      000477 E6               [12] 1226 	mov	a,@r0
      000478 C0 E0            [24] 1227 	push	acc
      00047A 08               [12] 1228 	inc	r0
      00047B E6               [12] 1229 	mov	a,@r0
      00047C C0 E0            [24] 1230 	push	acc
      00047E 8C 82            [24] 1231 	mov	dpl,r4
      000480 8D 83            [24] 1232 	mov	dph,r5
      000482 8F F0            [24] 1233 	mov	b,r7
      000484 12r00r4A         [24] 1234 	lcall	_update
      000487 AD 82            [24] 1235 	mov	r5,dpl
      000489 AF 83            [24] 1236 	mov	r7,dph
      00048B E5 81            [12] 1237 	mov	a,sp
      00048D 24 FC            [12] 1238 	add	a,#0xfc
      00048F F5 81            [12] 1239 	mov	sp,a
      000491 D0 00            [24] 1240 	pop	ar0
      000493 D0 01            [24] 1241 	pop	ar1
      000495 D0 02            [24] 1242 	pop	ar2
      000497 D0 03            [24] 1243 	pop	ar3
      000499 D0 06            [24] 1244 	pop	ar6
      00049B D0 02            [24] 1245 	pop	ar2
      00049D ED               [12] 1246 	mov	a,r5
      00049E 4F               [12] 1247 	orl	a,r7
      00049F 60 01            [24] 1248 	jz	00105$
                                   1249 ;	walk.c:128: f++;
      0004A1 0B               [12] 1250 	inc	r3
      0004A2                       1251 00105$:
                                   1252 ;	walk.c:126: for (j = 0, f = 0; j < NMAX; j++) {
      0004A2 C0 00            [24] 1253 	push	ar0
      0004A4 E5*00            [12] 1254 	mov	a,_bp
      0004A6 24 12            [12] 1255 	add	a,#0x12
      0004A8 F8               [12] 1256 	mov	r0,a
      0004A9 06               [12] 1257 	inc	@r0
      0004AA D0 00            [24] 1258 	pop	ar0
      0004AC 02r04r21         [24] 1259 	ljmp	00119$
      0004AF                       1260 00106$:
                                   1261 ;	walk.c:131: if (f) {
      0004AF EB               [12] 1262 	mov	a,r3
      0004B0 70 03            [24] 1263 	jnz	00162$
      0004B2 02r05rE7         [24] 1264 	ljmp	00115$
      0004B5                       1265 00162$:
                                   1266 ;	walk.c:132: while (1) {
      0004B5                       1267 00112$:
                                   1268 ;	walk.c:133: j = rand() % NMAX;
      0004B5 C0 02            [24] 1269 	push	ar2
      0004B7 C0 06            [24] 1270 	push	ar6
      0004B9 C0 02            [24] 1271 	push	ar2
      0004BB C0 01            [24] 1272 	push	ar1
      0004BD C0 00            [24] 1273 	push	ar0
      0004BF 12r00r00         [24] 1274 	lcall	_rand
      0004C2 AD 82            [24] 1275 	mov	r5,dpl
      0004C4 AF 83            [24] 1276 	mov	r7,dph
      0004C6 74 10            [12] 1277 	mov	a,#0x10
      0004C8 C0 E0            [24] 1278 	push	acc
      0004CA E4               [12] 1279 	clr	a
      0004CB C0 E0            [24] 1280 	push	acc
      0004CD 8D 82            [24] 1281 	mov	dpl,r5
      0004CF 8F 83            [24] 1282 	mov	dph,r7
      0004D1 12r00r00         [24] 1283 	lcall	__modsint
      0004D4 AD 82            [24] 1284 	mov	r5,dpl
      0004D6 15 81            [12] 1285 	dec	sp
      0004D8 15 81            [12] 1286 	dec	sp
      0004DA D0 00            [24] 1287 	pop	ar0
      0004DC D0 01            [24] 1288 	pop	ar1
      0004DE D0 02            [24] 1289 	pop	ar2
      0004E0 D0 06            [24] 1290 	pop	ar6
      0004E2 8D 04            [24] 1291 	mov	ar4,r5
                                   1292 ;	walk.c:134: if (!update(&t, &cur, j)) continue;
      0004E4 C0 00            [24] 1293 	push	ar0
      0004E6 E5*00            [12] 1294 	mov	a,_bp
      0004E8 24 05            [12] 1295 	add	a,#0x05
      0004EA F8               [12] 1296 	mov	r0,a
      0004EB C0 01            [24] 1297 	push	ar1
      0004ED E5*00            [12] 1298 	mov	a,_bp
      0004EF 24 07            [12] 1299 	add	a,#0x07
      0004F1 F9               [12] 1300 	mov	r1,a
      0004F2 E6               [12] 1301 	mov	a,@r0
      0004F3 F7               [12] 1302 	mov	@r1,a
      0004F4 09               [12] 1303 	inc	r1
      0004F5 77 00            [12] 1304 	mov	@r1,#0x00
      0004F7 09               [12] 1305 	inc	r1
      0004F8 77 40            [12] 1306 	mov	@r1,#0x40
      0004FA D0 01            [24] 1307 	pop	ar1
      0004FC E5*00            [12] 1308 	mov	a,_bp
      0004FE 24 04            [12] 1309 	add	a,#0x04
      000500 F8               [12] 1310 	mov	r0,a
      000501 86 02            [24] 1311 	mov	ar2,@r0
      000503 7D 00            [12] 1312 	mov	r5,#0x00
      000505 7F 40            [12] 1313 	mov	r7,#0x40
      000507 D0 00            [24] 1314 	pop	ar0
      000509 C0 06            [24] 1315 	push	ar6
      00050B C0 02            [24] 1316 	push	ar2
      00050D C0 01            [24] 1317 	push	ar1
      00050F C0 00            [24] 1318 	push	ar0
      000511 C0 04            [24] 1319 	push	ar4
      000513 85 00 F0         [24] 1320 	mov	b,ar0
      000516 E5*00            [12] 1321 	mov	a,_bp
      000518 24 07            [12] 1322 	add	a,#0x07
      00051A F8               [12] 1323 	mov	r0,a
      00051B E6               [12] 1324 	mov	a,@r0
      00051C C0 E0            [24] 1325 	push	acc
      00051E 08               [12] 1326 	inc	r0
      00051F E6               [12] 1327 	mov	a,@r0
      000520 C0 E0            [24] 1328 	push	acc
      000522 08               [12] 1329 	inc	r0
      000523 E6               [12] 1330 	mov	a,@r0
      000524 C0 E0            [24] 1331 	push	acc
      000526 8A 82            [24] 1332 	mov	dpl,r2
      000528 8D 83            [24] 1333 	mov	dph,r5
      00052A 8F F0            [24] 1334 	mov	b,r7
      00052C 12r00r4A         [24] 1335 	lcall	_update
      00052F AD 82            [24] 1336 	mov	r5,dpl
      000531 AF 83            [24] 1337 	mov	r7,dph
      000533 E5 81            [12] 1338 	mov	a,sp
      000535 24 FC            [12] 1339 	add	a,#0xfc
      000537 F5 81            [12] 1340 	mov	sp,a
      000539 D0 00            [24] 1341 	pop	ar0
      00053B D0 01            [24] 1342 	pop	ar1
      00053D D0 02            [24] 1343 	pop	ar2
      00053F D0 06            [24] 1344 	pop	ar6
      000541 D0 02            [24] 1345 	pop	ar2
      000543 ED               [12] 1346 	mov	a,r5
      000544 4F               [12] 1347 	orl	a,r7
      000545 70 03            [24] 1348 	jnz	00163$
      000547 02r04rB5         [24] 1349 	ljmp	00112$
      00054A                       1350 00163$:
                                   1351 ;	walk.c:135: if (!stpush(&cur)) bang();
      00054A 8A 04            [24] 1352 	mov	ar4,r2
      00054C 7D 00            [12] 1353 	mov	r5,#0x00
      00054E 7F 40            [12] 1354 	mov	r7,#0x40
      000550 8C 82            [24] 1355 	mov	dpl,r4
      000552 8D 83            [24] 1356 	mov	dph,r5
      000554 8F F0            [24] 1357 	mov	b,r7
      000556 C0 06            [24] 1358 	push	ar6
      000558 C0 02            [24] 1359 	push	ar2
      00055A C0 01            [24] 1360 	push	ar1
      00055C C0 00            [24] 1361 	push	ar0
      00055E 12r0Ar5A         [24] 1362 	lcall	_stpush
      000561 E5 82            [12] 1363 	mov	a,dpl
      000563 85 83 F0         [24] 1364 	mov	b,dph
      000566 D0 00            [24] 1365 	pop	ar0
      000568 D0 01            [24] 1366 	pop	ar1
      00056A D0 02            [24] 1367 	pop	ar2
      00056C D0 06            [24] 1368 	pop	ar6
      00056E 45 F0            [12] 1369 	orl	a,b
      000570 70 13            [24] 1370 	jnz	00110$
      000572 C0 06            [24] 1371 	push	ar6
      000574 C0 02            [24] 1372 	push	ar2
      000576 C0 01            [24] 1373 	push	ar1
      000578 C0 00            [24] 1374 	push	ar0
      00057A 12r00r1D         [24] 1375 	lcall	_bang
      00057D D0 00            [24] 1376 	pop	ar0
      00057F D0 01            [24] 1377 	pop	ar1
      000581 D0 02            [24] 1378 	pop	ar2
      000583 D0 06            [24] 1379 	pop	ar6
      000585                       1380 00110$:
                                   1381 ;	walk.c:136: cur = t;
      000585 C0 02            [24] 1382 	push	ar2
      000587 C0 00            [24] 1383 	push	ar0
      000589 A8*00            [24] 1384 	mov	r0,_bp
      00058B 08               [12] 1385 	inc	r0
      00058C C0 01            [24] 1386 	push	ar1
      00058E E5*00            [12] 1387 	mov	a,_bp
      000590 24 07            [12] 1388 	add	a,#0x07
      000592 F9               [12] 1389 	mov	r1,a
      000593 E6               [12] 1390 	mov	a,@r0
      000594 F7               [12] 1391 	mov	@r1,a
      000595 09               [12] 1392 	inc	r1
      000596 77 00            [12] 1393 	mov	@r1,#0x00
      000598 09               [12] 1394 	inc	r1
      000599 77 40            [12] 1395 	mov	@r1,#0x40
      00059B D0 01            [24] 1396 	pop	ar1
      00059D A8*00            [24] 1397 	mov	r0,_bp
      00059F 08               [12] 1398 	inc	r0
      0005A0 08               [12] 1399 	inc	r0
      0005A1 86 02            [24] 1400 	mov	ar2,@r0
      0005A3 7B 00            [12] 1401 	mov	r3,#0x00
      0005A5 7F 40            [12] 1402 	mov	r7,#0x40
      0005A7 D0 00            [24] 1403 	pop	ar0
      0005A9 C0 06            [24] 1404 	push	ar6
      0005AB C0 02            [24] 1405 	push	ar2
      0005AD C0 01            [24] 1406 	push	ar1
      0005AF C0 00            [24] 1407 	push	ar0
      0005B1 74 04            [12] 1408 	mov	a,#0x04
      0005B3 C0 E0            [24] 1409 	push	acc
      0005B5 E4               [12] 1410 	clr	a
      0005B6 C0 E0            [24] 1411 	push	acc
      0005B8 85 00 F0         [24] 1412 	mov	b,ar0
      0005BB E5*00            [12] 1413 	mov	a,_bp
      0005BD 24 07            [12] 1414 	add	a,#0x07
      0005BF F8               [12] 1415 	mov	r0,a
      0005C0 E6               [12] 1416 	mov	a,@r0
      0005C1 C0 E0            [24] 1417 	push	acc
      0005C3 08               [12] 1418 	inc	r0
      0005C4 E6               [12] 1419 	mov	a,@r0
      0005C5 C0 E0            [24] 1420 	push	acc
      0005C7 08               [12] 1421 	inc	r0
      0005C8 E6               [12] 1422 	mov	a,@r0
      0005C9 C0 E0            [24] 1423 	push	acc
      0005CB 8A 82            [24] 1424 	mov	dpl,r2
      0005CD 8B 83            [24] 1425 	mov	dph,r3
      0005CF 8F F0            [24] 1426 	mov	b,r7
      0005D1 12r00r00         [24] 1427 	lcall	___memcpy
      0005D4 E5 81            [12] 1428 	mov	a,sp
      0005D6 24 FB            [12] 1429 	add	a,#0xfb
      0005D8 F5 81            [12] 1430 	mov	sp,a
      0005DA D0 00            [24] 1431 	pop	ar0
      0005DC D0 01            [24] 1432 	pop	ar1
      0005DE D0 02            [24] 1433 	pop	ar2
      0005E0 D0 06            [24] 1434 	pop	ar6
                                   1435 ;	walk.c:137: goto process;
      0005E2 D0 02            [24] 1436 	pop	ar2
      0005E4 02r03r43         [24] 1437 	ljmp	00101$
      0005E7                       1438 00115$:
                                   1439 ;	walk.c:141: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0005E7 86 05            [24] 1440 	mov	ar5,@r0
      0005E9 08               [12] 1441 	inc	r0
      0005EA 86 07            [24] 1442 	mov	ar7,@r0
      0005EC 18               [12] 1443 	dec	r0
      0005ED 0D               [12] 1444 	inc	r5
      0005EE BD 00 01         [24] 1445 	cjne	r5,#0x00,00165$
      0005F1 0F               [12] 1446 	inc	r7
      0005F2                       1447 00165$:
      0005F2 87 03            [24] 1448 	mov	ar3,@r1
      0005F4 09               [12] 1449 	inc	r1
      0005F5 87 04            [24] 1450 	mov	ar4,@r1
      0005F7 19               [12] 1451 	dec	r1
      0005F8 74 04            [12] 1452 	mov	a,#0x04
      0005FA 2B               [12] 1453 	add	a,r3
      0005FB FB               [12] 1454 	mov	r3,a
      0005FC E4               [12] 1455 	clr	a
      0005FD 3C               [12] 1456 	addc	a,r4
      0005FE FC               [12] 1457 	mov	r4,a
      0005FF C0 06            [24] 1458 	push	ar6
      000601 C0 02            [24] 1459 	push	ar2
      000603 C0 01            [24] 1460 	push	ar1
      000605 C0 00            [24] 1461 	push	ar0
      000607 C0 05            [24] 1462 	push	ar5
      000609 C0 07            [24] 1463 	push	ar7
      00060B C0 03            [24] 1464 	push	ar3
      00060D C0 04            [24] 1465 	push	ar4
      00060F 74r2A            [12] 1466 	mov	a,#___str_3
      000611 C0 E0            [24] 1467 	push	acc
      000613 74s00            [12] 1468 	mov	a,#(___str_3 >> 8)
      000615 C0 E0            [24] 1469 	push	acc
      000617 74 80            [12] 1470 	mov	a,#0x80
      000619 C0 E0            [24] 1471 	push	acc
      00061B 12r00r00         [24] 1472 	lcall	_printf
      00061E E5 81            [12] 1473 	mov	a,sp
      000620 24 F9            [12] 1474 	add	a,#0xf9
      000622 F5 81            [12] 1475 	mov	sp,a
                                   1476 ;	walk.c:142: flashOE(OE76_MASK6);
      000624 75 82 40         [24] 1477 	mov	dpl,#0x40
      000627 12r00r29         [24] 1478 	lcall	_flashOE
      00062A D0 00            [24] 1479 	pop	ar0
      00062C D0 01            [24] 1480 	pop	ar1
      00062E D0 02            [24] 1481 	pop	ar2
      000630 D0 06            [24] 1482 	pop	ar6
                                   1483 ;	walk.c:144: if (stpop(&cur)) goto next;
      000632 C0 00            [24] 1484 	push	ar0
      000634 E5*00            [12] 1485 	mov	a,_bp
      000636 24 03            [12] 1486 	add	a,#0x03
      000638 F8               [12] 1487 	mov	r0,a
      000639 86 04            [24] 1488 	mov	ar4,@r0
      00063B 7D 00            [12] 1489 	mov	r5,#0x00
      00063D 7F 40            [12] 1490 	mov	r7,#0x40
      00063F D0 00            [24] 1491 	pop	ar0
      000641 8C 82            [24] 1492 	mov	dpl,r4
      000643 8D 83            [24] 1493 	mov	dph,r5
      000645 8F F0            [24] 1494 	mov	b,r7
      000647 C0 06            [24] 1495 	push	ar6
      000649 C0 02            [24] 1496 	push	ar2
      00064B C0 01            [24] 1497 	push	ar1
      00064D C0 00            [24] 1498 	push	ar0
      00064F 12r0ArBB         [24] 1499 	lcall	_stpop
      000652 E5 82            [12] 1500 	mov	a,dpl
      000654 85 83 F0         [24] 1501 	mov	b,dph
      000657 D0 00            [24] 1502 	pop	ar0
      000659 D0 01            [24] 1503 	pop	ar1
      00065B D0 02            [24] 1504 	pop	ar2
      00065D D0 06            [24] 1505 	pop	ar6
      00065F 45 F0            [12] 1506 	orl	a,b
      000661 60 03            [24] 1507 	jz	00166$
      000663 02r03rCD         [24] 1508 	ljmp	00102$
      000666                       1509 00166$:
                                   1510 ;	walk.c:146: return;
                                   1511 ;	walk.c:147: }
      000666 85*00 81         [24] 1512 	mov	sp,_bp
      000669 D0*00            [24] 1513 	pop	_bp
      00066B 22               [24] 1514 	ret
                                   1515 ;------------------------------------------------------------
                                   1516 ;Allocation info for local variables in function 'main'
                                   1517 ;------------------------------------------------------------
                                   1518 ;initial                   Allocated to stack - _bp +7
                                   1519 ;N                         Allocated to stack - _bp +11
                                   1520 ;i                         Allocated to stack - _bp +5
                                   1521 ;j                         Allocated to registers r2 r6 
                                   1522 ;sloc0                     Allocated to stack - _bp +1
                                   1523 ;sloc1                     Allocated to stack - _bp +3
                                   1524 ;sloc2                     Allocated to stack - _bp +15
                                   1525 ;------------------------------------------------------------
                                   1526 ;	walk.c:149: int main(void) {
                                   1527 ;	-----------------------------------------
                                   1528 ;	 function main
                                   1529 ;	-----------------------------------------
      00066C                       1530 _main:
      00066C C0*00            [24] 1531 	push	_bp
      00066E E5 81            [12] 1532 	mov	a,sp
      000670 F5*00            [12] 1533 	mov	_bp,a
      000672 24 0C            [12] 1534 	add	a,#0x0c
      000674 F5 81            [12] 1535 	mov	sp,a
                                   1536 ;	walk.c:154: i0 = 1u;
      000676 78r00            [12] 1537 	mov	r0,#_i0
      000678 76 01            [12] 1538 	mov	@r0,#0x01
                                   1539 ;	walk.c:156: P1_7 = 1;
                                   1540 ;	assignBit
      00067A D2 97            [12] 1541 	setb	_P1_7
                                   1542 ;	walk.c:157: IT0 = 1;
                                   1543 ;	assignBit
      00067C D2 88            [12] 1544 	setb	_IT0
                                   1545 ;	walk.c:158: EX0 = 1;
                                   1546 ;	assignBit
      00067E D2 A8            [12] 1547 	setb	_EX0
                                   1548 ;	walk.c:159: EA = 1;
                                   1549 ;	assignBit
      000680 D2 AF            [12] 1550 	setb	_EA
                                   1551 ;	walk.c:161: srand(*R);
      000682 90r00r00         [24] 1552 	mov	dptr,#_R
      000685 E0               [24] 1553 	movx	a,@dptr
      000686 FE               [12] 1554 	mov	r6,a
      000687 A3               [24] 1555 	inc	dptr
      000688 E0               [24] 1556 	movx	a,@dptr
      000689 FF               [12] 1557 	mov	r7,a
      00068A 8E 82            [24] 1558 	mov	dpl,r6
      00068C 8F 83            [24] 1559 	mov	dph,r7
      00068E E0               [24] 1560 	movx	a,@dptr
      00068F FE               [12] 1561 	mov	r6,a
      000690 A3               [24] 1562 	inc	dptr
      000691 E0               [24] 1563 	movx	a,@dptr
      000692 FF               [12] 1564 	mov	r7,a
      000693 8E 82            [24] 1565 	mov	dpl,r6
      000695 8F 83            [24] 1566 	mov	dph,r7
      000697 12r00r00         [24] 1567 	lcall	_srand
                                   1568 ;	walk.c:162: stinit();
      00069A 12r0Ar51         [24] 1569 	lcall	_stinit
                                   1570 ;	walk.c:164: puts("\033[2J\033[?25l");
      00069D 90r00r34         [24] 1571 	mov	dptr,#___str_4
      0006A0 75 F0 80         [24] 1572 	mov	b,#0x80
      0006A3 12r00r00         [24] 1573 	lcall	_puts
                                   1574 ;	walk.c:166: while (i0) {
      0006A6 E5*00            [12] 1575 	mov	a,_bp
      0006A8 24 07            [12] 1576 	add	a,#0x07
      0006AA F9               [12] 1577 	mov	r1,a
      0006AB FF               [12] 1578 	mov	r7,a
      0006AC E5*00            [12] 1579 	mov	a,_bp
      0006AE 24 0B            [12] 1580 	add	a,#0x0b
      0006B0 F8               [12] 1581 	mov	r0,a
      0006B1 E4               [12] 1582 	clr	a
      0006B2 F6               [12] 1583 	mov	@r0,a
      0006B3 08               [12] 1584 	inc	r0
      0006B4 F6               [12] 1585 	mov	@r0,a
      0006B5                       1586 00108$:
      0006B5 78r00            [12] 1587 	mov	r0,#_i0
      0006B7 E6               [12] 1588 	mov	a,@r0
      0006B8 70 03            [24] 1589 	jnz	00181$
      0006BA 02r0Ar3A         [24] 1590 	ljmp	00110$
      0006BD                       1591 00181$:
                                   1592 ;	walk.c:167: for (i = 0; i < ROWS; i++)
      0006BD 7B 00            [12] 1593 	mov	r3,#0x00
      0006BF 7C 00            [12] 1594 	mov	r4,#0x00
      0006C1 A8*00            [24] 1595 	mov	r0,_bp
      0006C3 08               [12] 1596 	inc	r0
      0006C4 E4               [12] 1597 	clr	a
      0006C5 F6               [12] 1598 	mov	@r0,a
      0006C6 08               [12] 1599 	inc	r0
      0006C7 F6               [12] 1600 	mov	@r0,a
                                   1601 ;	walk.c:168: for (j = 0; j < COLS; j++)
      0006C8                       1602 00124$:
      0006C8 A8*00            [24] 1603 	mov	r0,_bp
      0006CA 08               [12] 1604 	inc	r0
      0006CB C0 01            [24] 1605 	push	ar1
      0006CD E5*00            [12] 1606 	mov	a,_bp
      0006CF 24 03            [12] 1607 	add	a,#0x03
      0006D1 F9               [12] 1608 	mov	r1,a
      0006D2 E6               [12] 1609 	mov	a,@r0
      0006D3 24r00            [12] 1610 	add	a,#_g
      0006D5 F7               [12] 1611 	mov	@r1,a
      0006D6 08               [12] 1612 	inc	r0
      0006D7 E6               [12] 1613 	mov	a,@r0
      0006D8 34s00            [12] 1614 	addc	a,#(_g >> 8)
      0006DA 09               [12] 1615 	inc	r1
      0006DB F7               [12] 1616 	mov	@r1,a
      0006DC D0 01            [24] 1617 	pop	ar1
      0006DE 7A 00            [12] 1618 	mov	r2,#0x00
      0006E0 7E 00            [12] 1619 	mov	r6,#0x00
      0006E2                       1620 00111$:
                                   1621 ;	walk.c:169: g[i][j] = 0x55;
      0006E2 E5*00            [12] 1622 	mov	a,_bp
      0006E4 24 03            [12] 1623 	add	a,#0x03
      0006E6 F8               [12] 1624 	mov	r0,a
      0006E7 EA               [12] 1625 	mov	a,r2
      0006E8 26               [12] 1626 	add	a,@r0
      0006E9 F5 82            [12] 1627 	mov	dpl,a
      0006EB EE               [12] 1628 	mov	a,r6
      0006EC 08               [12] 1629 	inc	r0
      0006ED 36               [12] 1630 	addc	a,@r0
      0006EE F5 83            [12] 1631 	mov	dph,a
      0006F0 74 55            [12] 1632 	mov	a,#0x55
      0006F2 F0               [24] 1633 	movx	@dptr,a
                                   1634 ;	walk.c:168: for (j = 0; j < COLS; j++)
      0006F3 0A               [12] 1635 	inc	r2
      0006F4 BA 00 01         [24] 1636 	cjne	r2,#0x00,00182$
      0006F7 0E               [12] 1637 	inc	r6
      0006F8                       1638 00182$:
      0006F8 C3               [12] 1639 	clr	c
      0006F9 EA               [12] 1640 	mov	a,r2
      0006FA 94 C9            [12] 1641 	subb	a,#0xc9
      0006FC EE               [12] 1642 	mov	a,r6
      0006FD 64 80            [12] 1643 	xrl	a,#0x80
      0006FF 94 80            [12] 1644 	subb	a,#0x80
      000701 40 DF            [24] 1645 	jc	00111$
                                   1646 ;	walk.c:167: for (i = 0; i < ROWS; i++)
      000703 A8*00            [24] 1647 	mov	r0,_bp
      000705 08               [12] 1648 	inc	r0
      000706 74 C9            [12] 1649 	mov	a,#0xc9
      000708 26               [12] 1650 	add	a,@r0
      000709 F6               [12] 1651 	mov	@r0,a
      00070A E4               [12] 1652 	clr	a
      00070B 08               [12] 1653 	inc	r0
      00070C 36               [12] 1654 	addc	a,@r0
      00070D F6               [12] 1655 	mov	@r0,a
      00070E 0B               [12] 1656 	inc	r3
      00070F BB 00 01         [24] 1657 	cjne	r3,#0x00,00184$
      000712 0C               [12] 1658 	inc	r4
      000713                       1659 00184$:
      000713 C3               [12] 1660 	clr	c
      000714 EB               [12] 1661 	mov	a,r3
      000715 94 30            [12] 1662 	subb	a,#0x30
      000717 EC               [12] 1663 	mov	a,r4
      000718 64 80            [12] 1664 	xrl	a,#0x80
      00071A 94 80            [12] 1665 	subb	a,#0x80
      00071C 40 AA            [24] 1666 	jc	00124$
                                   1667 ;	walk.c:171: initial.r = rand() % ROWS;
      00071E E5*00            [12] 1668 	mov	a,_bp
      000720 24 07            [12] 1669 	add	a,#0x07
      000722 F8               [12] 1670 	mov	r0,a
      000723 C0 07            [24] 1671 	push	ar7
      000725 C0 01            [24] 1672 	push	ar1
      000727 C0 00            [24] 1673 	push	ar0
      000729 12r00r00         [24] 1674 	lcall	_rand
      00072C AD 82            [24] 1675 	mov	r5,dpl
      00072E AE 83            [24] 1676 	mov	r6,dph
      000730 74 30            [12] 1677 	mov	a,#0x30
      000732 C0 E0            [24] 1678 	push	acc
      000734 E4               [12] 1679 	clr	a
      000735 C0 E0            [24] 1680 	push	acc
      000737 8D 82            [24] 1681 	mov	dpl,r5
      000739 8E 83            [24] 1682 	mov	dph,r6
      00073B 12r00r00         [24] 1683 	lcall	__modsint
      00073E AD 82            [24] 1684 	mov	r5,dpl
      000740 AE 83            [24] 1685 	mov	r6,dph
      000742 15 81            [12] 1686 	dec	sp
      000744 15 81            [12] 1687 	dec	sp
      000746 D0 00            [24] 1688 	pop	ar0
      000748 D0 01            [24] 1689 	pop	ar1
      00074A A6 05            [24] 1690 	mov	@r0,ar5
      00074C 08               [12] 1691 	inc	r0
      00074D A6 06            [24] 1692 	mov	@r0,ar6
      00074F 18               [12] 1693 	dec	r0
                                   1694 ;	walk.c:172: initial.c = rand() % COLS;
      000750 74 02            [12] 1695 	mov	a,#0x02
      000752 29               [12] 1696 	add	a,r1
      000753 F8               [12] 1697 	mov	r0,a
      000754 C0 01            [24] 1698 	push	ar1
      000756 C0 00            [24] 1699 	push	ar0
      000758 12r00r00         [24] 1700 	lcall	_rand
      00075B AD 82            [24] 1701 	mov	r5,dpl
      00075D AE 83            [24] 1702 	mov	r6,dph
      00075F 74 C9            [12] 1703 	mov	a,#0xc9
      000761 C0 E0            [24] 1704 	push	acc
      000763 E4               [12] 1705 	clr	a
      000764 C0 E0            [24] 1706 	push	acc
      000766 8D 82            [24] 1707 	mov	dpl,r5
      000768 8E 83            [24] 1708 	mov	dph,r6
      00076A 12r00r00         [24] 1709 	lcall	__modsint
      00076D AD 82            [24] 1710 	mov	r5,dpl
      00076F AE 83            [24] 1711 	mov	r6,dph
      000771 15 81            [12] 1712 	dec	sp
      000773 15 81            [12] 1713 	dec	sp
      000775 D0 00            [24] 1714 	pop	ar0
      000777 A6 05            [24] 1715 	mov	@r0,ar5
      000779 08               [12] 1716 	inc	r0
      00077A A6 06            [24] 1717 	mov	@r0,ar6
      00077C 18               [12] 1718 	dec	r0
                                   1719 ;	walk.c:174: puts("\033[2J\033[?25l");
      00077D 90r00r34         [24] 1720 	mov	dptr,#___str_4
      000780 75 F0 80         [24] 1721 	mov	b,#0x80
      000783 C0 00            [24] 1722 	push	ar0
      000785 12r00r00         [24] 1723 	lcall	_puts
      000788 D0 00            [24] 1724 	pop	ar0
      00078A D0 01            [24] 1725 	pop	ar1
                                   1726 ;	walk.c:175: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00078C 86 05            [24] 1727 	mov	ar5,@r0
      00078E 08               [12] 1728 	inc	r0
      00078F 86 06            [24] 1729 	mov	ar6,@r0
      000791 18               [12] 1730 	dec	r0
      000792 87 03            [24] 1731 	mov	ar3,@r1
      000794 09               [12] 1732 	inc	r1
      000795 87 04            [24] 1733 	mov	ar4,@r1
      000797 19               [12] 1734 	dec	r1
      000798 C0 01            [24] 1735 	push	ar1
      00079A C0 05            [24] 1736 	push	ar5
      00079C C0 06            [24] 1737 	push	ar6
      00079E C0 03            [24] 1738 	push	ar3
      0007A0 C0 04            [24] 1739 	push	ar4
      0007A2 E5*00            [12] 1740 	mov	a,_bp
      0007A4 24 0B            [12] 1741 	add	a,#0x0b
      0007A6 F8               [12] 1742 	mov	r0,a
      0007A7 E6               [12] 1743 	mov	a,@r0
      0007A8 C0 E0            [24] 1744 	push	acc
      0007AA 08               [12] 1745 	inc	r0
      0007AB E6               [12] 1746 	mov	a,@r0
      0007AC C0 E0            [24] 1747 	push	acc
      0007AE 74r3F            [12] 1748 	mov	a,#___str_5
      0007B0 C0 E0            [24] 1749 	push	acc
      0007B2 74s00            [12] 1750 	mov	a,#(___str_5 >> 8)
      0007B4 C0 E0            [24] 1751 	push	acc
      0007B6 74 80            [12] 1752 	mov	a,#0x80
      0007B8 C0 E0            [24] 1753 	push	acc
      0007BA 12r00r00         [24] 1754 	lcall	_printf
      0007BD E5 81            [12] 1755 	mov	a,sp
      0007BF 24 F7            [12] 1756 	add	a,#0xf7
      0007C1 F5 81            [12] 1757 	mov	sp,a
      0007C3 D0 01            [24] 1758 	pop	ar1
      0007C5 D0 07            [24] 1759 	pop	ar7
                                   1760 ;	walk.c:176: for (i = 0; i < REG; i++) {
      0007C7 E5*00            [12] 1761 	mov	a,_bp
      0007C9 24 05            [12] 1762 	add	a,#0x05
      0007CB F8               [12] 1763 	mov	r0,a
      0007CC E4               [12] 1764 	clr	a
      0007CD F6               [12] 1765 	mov	@r0,a
      0007CE 08               [12] 1766 	inc	r0
      0007CF F6               [12] 1767 	mov	@r0,a
      0007D0                       1768 00115$:
                                   1769 ;	walk.c:177: neigh[i].r = neigh[REG + i].r * (1 + rand() % 4);
      0007D0 C0 07            [24] 1770 	push	ar7
      0007D2 E5*00            [12] 1771 	mov	a,_bp
      0007D4 24 05            [12] 1772 	add	a,#0x05
      0007D6 F8               [12] 1773 	mov	r0,a
      0007D7 E6               [12] 1774 	mov	a,@r0
      0007D8 25 E0            [12] 1775 	add	a,acc
      0007DA FB               [12] 1776 	mov	r3,a
      0007DB 08               [12] 1777 	inc	r0
      0007DC E6               [12] 1778 	mov	a,@r0
      0007DD 33               [12] 1779 	rlc	a
      0007DE FC               [12] 1780 	mov	r4,a
      0007DF EB               [12] 1781 	mov	a,r3
      0007E0 2B               [12] 1782 	add	a,r3
      0007E1 FB               [12] 1783 	mov	r3,a
      0007E2 EC               [12] 1784 	mov	a,r4
      0007E3 33               [12] 1785 	rlc	a
      0007E4 FC               [12] 1786 	mov	r4,a
      0007E5 E5*00            [12] 1787 	mov	a,_bp
      0007E7 24 03            [12] 1788 	add	a,#0x03
      0007E9 F8               [12] 1789 	mov	r0,a
      0007EA EB               [12] 1790 	mov	a,r3
      0007EB 24r02            [12] 1791 	add	a,#_neigh
      0007ED F6               [12] 1792 	mov	@r0,a
      0007EE EC               [12] 1793 	mov	a,r4
      0007EF 34s00            [12] 1794 	addc	a,#(_neigh >> 8)
      0007F1 08               [12] 1795 	inc	r0
      0007F2 F6               [12] 1796 	mov	@r0,a
      0007F3 E5*00            [12] 1797 	mov	a,_bp
      0007F5 24 05            [12] 1798 	add	a,#0x05
      0007F7 F8               [12] 1799 	mov	r0,a
      0007F8 86 06            [24] 1800 	mov	ar6,@r0
      0007FA 74 08            [12] 1801 	mov	a,#0x08
      0007FC 2E               [12] 1802 	add	a,r6
      0007FD FE               [12] 1803 	mov	r6,a
      0007FE C2 D5            [12] 1804 	clr	F0
      000800 75 F0 04         [24] 1805 	mov	b,#0x04
      000803 EE               [12] 1806 	mov	a,r6
      000804 30 E7 04         [24] 1807 	jnb	acc.7,00186$
      000807 B2 D5            [12] 1808 	cpl	F0
      000809 F4               [12] 1809 	cpl	a
      00080A 04               [12] 1810 	inc	a
      00080B                       1811 00186$:
      00080B A4               [48] 1812 	mul	ab
      00080C 30 D5 0A         [24] 1813 	jnb	F0,00187$
      00080F F4               [12] 1814 	cpl	a
      000810 24 01            [12] 1815 	add	a,#0x01
      000812 C5 F0            [12] 1816 	xch	a,b
      000814 F4               [12] 1817 	cpl	a
      000815 34 00            [12] 1818 	addc	a,#0x00
      000817 C5 F0            [12] 1819 	xch	a,b
      000819                       1820 00187$:
      000819 FE               [12] 1821 	mov	r6,a
      00081A AD F0            [24] 1822 	mov	r5,b
      00081C 24r02            [12] 1823 	add	a,#_neigh
      00081E F5 82            [12] 1824 	mov	dpl,a
      000820 ED               [12] 1825 	mov	a,r5
      000821 34s00            [12] 1826 	addc	a,#(_neigh >> 8)
      000823 F5 83            [12] 1827 	mov	dph,a
      000825 A8*00            [24] 1828 	mov	r0,_bp
      000827 08               [12] 1829 	inc	r0
      000828 E0               [24] 1830 	movx	a,@dptr
      000829 F6               [12] 1831 	mov	@r0,a
      00082A A3               [24] 1832 	inc	dptr
      00082B E0               [24] 1833 	movx	a,@dptr
      00082C 08               [12] 1834 	inc	r0
      00082D F6               [12] 1835 	mov	@r0,a
      00082E C0 06            [24] 1836 	push	ar6
      000830 C0 05            [24] 1837 	push	ar5
      000832 C0 04            [24] 1838 	push	ar4
      000834 C0 03            [24] 1839 	push	ar3
      000836 C0 01            [24] 1840 	push	ar1
      000838 12r00r00         [24] 1841 	lcall	_rand
      00083B AA 82            [24] 1842 	mov	r2,dpl
      00083D AF 83            [24] 1843 	mov	r7,dph
      00083F 74 04            [12] 1844 	mov	a,#0x04
      000841 C0 E0            [24] 1845 	push	acc
      000843 E4               [12] 1846 	clr	a
      000844 C0 E0            [24] 1847 	push	acc
      000846 8A 82            [24] 1848 	mov	dpl,r2
      000848 8F 83            [24] 1849 	mov	dph,r7
      00084A 12r00r00         [24] 1850 	lcall	__modsint
      00084D AA 82            [24] 1851 	mov	r2,dpl
      00084F AF 83            [24] 1852 	mov	r7,dph
      000851 15 81            [12] 1853 	dec	sp
      000853 15 81            [12] 1854 	dec	sp
      000855 D0 01            [24] 1855 	pop	ar1
      000857 D0 03            [24] 1856 	pop	ar3
      000859 D0 04            [24] 1857 	pop	ar4
      00085B D0 05            [24] 1858 	pop	ar5
      00085D D0 06            [24] 1859 	pop	ar6
      00085F 0A               [12] 1860 	inc	r2
      000860 BA 00 01         [24] 1861 	cjne	r2,#0x00,00188$
      000863 0F               [12] 1862 	inc	r7
      000864                       1863 00188$:
      000864 C0 06            [24] 1864 	push	ar6
      000866 C0 05            [24] 1865 	push	ar5
      000868 C0 04            [24] 1866 	push	ar4
      00086A C0 03            [24] 1867 	push	ar3
      00086C C0 01            [24] 1868 	push	ar1
      00086E C0 02            [24] 1869 	push	ar2
      000870 C0 07            [24] 1870 	push	ar7
      000872 A8*00            [24] 1871 	mov	r0,_bp
      000874 08               [12] 1872 	inc	r0
      000875 86 82            [24] 1873 	mov	dpl,@r0
      000877 08               [12] 1874 	inc	r0
      000878 86 83            [24] 1875 	mov	dph,@r0
      00087A 12r00r00         [24] 1876 	lcall	__mulint
      00087D AA 82            [24] 1877 	mov	r2,dpl
      00087F AF 83            [24] 1878 	mov	r7,dph
      000881 15 81            [12] 1879 	dec	sp
      000883 15 81            [12] 1880 	dec	sp
      000885 D0 01            [24] 1881 	pop	ar1
      000887 D0 03            [24] 1882 	pop	ar3
      000889 D0 04            [24] 1883 	pop	ar4
      00088B D0 05            [24] 1884 	pop	ar5
      00088D D0 06            [24] 1885 	pop	ar6
      00088F E5*00            [12] 1886 	mov	a,_bp
      000891 24 03            [12] 1887 	add	a,#0x03
      000893 F8               [12] 1888 	mov	r0,a
      000894 86 82            [24] 1889 	mov	dpl,@r0
      000896 08               [12] 1890 	inc	r0
      000897 86 83            [24] 1891 	mov	dph,@r0
      000899 EA               [12] 1892 	mov	a,r2
      00089A F0               [24] 1893 	movx	@dptr,a
      00089B EF               [12] 1894 	mov	a,r7
      00089C A3               [24] 1895 	inc	dptr
      00089D F0               [24] 1896 	movx	@dptr,a
                                   1897 ;	walk.c:178: neigh[i].c = neigh[REG + i].c * (1 + rand() % 4);
      00089E EB               [12] 1898 	mov	a,r3
      00089F 24r02            [12] 1899 	add	a,#_neigh
      0008A1 FB               [12] 1900 	mov	r3,a
      0008A2 EC               [12] 1901 	mov	a,r4
      0008A3 34s00            [12] 1902 	addc	a,#(_neigh >> 8)
      0008A5 FC               [12] 1903 	mov	r4,a
      0008A6 74 02            [12] 1904 	mov	a,#0x02
      0008A8 2B               [12] 1905 	add	a,r3
      0008A9 FA               [12] 1906 	mov	r2,a
      0008AA E4               [12] 1907 	clr	a
      0008AB 3C               [12] 1908 	addc	a,r4
      0008AC FF               [12] 1909 	mov	r7,a
      0008AD EE               [12] 1910 	mov	a,r6
      0008AE 24r02            [12] 1911 	add	a,#_neigh
      0008B0 FE               [12] 1912 	mov	r6,a
      0008B1 ED               [12] 1913 	mov	a,r5
      0008B2 34s00            [12] 1914 	addc	a,#(_neigh >> 8)
      0008B4 FD               [12] 1915 	mov	r5,a
      0008B5 8E 82            [24] 1916 	mov	dpl,r6
      0008B7 8D 83            [24] 1917 	mov	dph,r5
      0008B9 A3               [24] 1918 	inc	dptr
      0008BA A3               [24] 1919 	inc	dptr
      0008BB E5*00            [12] 1920 	mov	a,_bp
      0008BD 24 03            [12] 1921 	add	a,#0x03
      0008BF F8               [12] 1922 	mov	r0,a
      0008C0 E0               [24] 1923 	movx	a,@dptr
      0008C1 F6               [12] 1924 	mov	@r0,a
      0008C2 A3               [24] 1925 	inc	dptr
      0008C3 E0               [24] 1926 	movx	a,@dptr
      0008C4 08               [12] 1927 	inc	r0
      0008C5 F6               [12] 1928 	mov	@r0,a
      0008C6 C0 07            [24] 1929 	push	ar7
      0008C8 C0 04            [24] 1930 	push	ar4
      0008CA C0 03            [24] 1931 	push	ar3
      0008CC C0 02            [24] 1932 	push	ar2
      0008CE C0 01            [24] 1933 	push	ar1
      0008D0 12r00r00         [24] 1934 	lcall	_rand
      0008D3 AD 82            [24] 1935 	mov	r5,dpl
      0008D5 AE 83            [24] 1936 	mov	r6,dph
      0008D7 74 04            [12] 1937 	mov	a,#0x04
      0008D9 C0 E0            [24] 1938 	push	acc
      0008DB E4               [12] 1939 	clr	a
      0008DC C0 E0            [24] 1940 	push	acc
      0008DE 8D 82            [24] 1941 	mov	dpl,r5
      0008E0 8E 83            [24] 1942 	mov	dph,r6
      0008E2 12r00r00         [24] 1943 	lcall	__modsint
      0008E5 AD 82            [24] 1944 	mov	r5,dpl
      0008E7 AE 83            [24] 1945 	mov	r6,dph
      0008E9 15 81            [12] 1946 	dec	sp
      0008EB 15 81            [12] 1947 	dec	sp
      0008ED D0 01            [24] 1948 	pop	ar1
      0008EF D0 02            [24] 1949 	pop	ar2
      0008F1 D0 03            [24] 1950 	pop	ar3
      0008F3 D0 04            [24] 1951 	pop	ar4
      0008F5 D0 07            [24] 1952 	pop	ar7
      0008F7 0D               [12] 1953 	inc	r5
      0008F8 BD 00 01         [24] 1954 	cjne	r5,#0x00,00189$
      0008FB 0E               [12] 1955 	inc	r6
      0008FC                       1956 00189$:
      0008FC C0 07            [24] 1957 	push	ar7
      0008FE C0 04            [24] 1958 	push	ar4
      000900 C0 03            [24] 1959 	push	ar3
      000902 C0 02            [24] 1960 	push	ar2
      000904 C0 01            [24] 1961 	push	ar1
      000906 C0 05            [24] 1962 	push	ar5
      000908 C0 06            [24] 1963 	push	ar6
      00090A E5*00            [12] 1964 	mov	a,_bp
      00090C 24 03            [12] 1965 	add	a,#0x03
      00090E F8               [12] 1966 	mov	r0,a
      00090F 86 82            [24] 1967 	mov	dpl,@r0
      000911 08               [12] 1968 	inc	r0
      000912 86 83            [24] 1969 	mov	dph,@r0
      000914 12r00r00         [24] 1970 	lcall	__mulint
      000917 AD 82            [24] 1971 	mov	r5,dpl
      000919 AE 83            [24] 1972 	mov	r6,dph
      00091B 15 81            [12] 1973 	dec	sp
      00091D 15 81            [12] 1974 	dec	sp
      00091F D0 01            [24] 1975 	pop	ar1
      000921 D0 02            [24] 1976 	pop	ar2
      000923 D0 03            [24] 1977 	pop	ar3
      000925 D0 04            [24] 1978 	pop	ar4
      000927 D0 07            [24] 1979 	pop	ar7
      000929 8A 82            [24] 1980 	mov	dpl,r2
      00092B 8F 83            [24] 1981 	mov	dph,r7
      00092D ED               [12] 1982 	mov	a,r5
      00092E F0               [24] 1983 	movx	@dptr,a
      00092F EE               [12] 1984 	mov	a,r6
      000930 A3               [24] 1985 	inc	dptr
      000931 F0               [24] 1986 	movx	@dptr,a
                                   1987 ;	walk.c:179: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000932 8B 82            [24] 1988 	mov	dpl,r3
      000934 8C 83            [24] 1989 	mov	dph,r4
      000936 E0               [24] 1990 	movx	a,@dptr
      000937 FB               [12] 1991 	mov	r3,a
      000938 A3               [24] 1992 	inc	dptr
      000939 E0               [24] 1993 	movx	a,@dptr
      00093A FC               [12] 1994 	mov	r4,a
      00093B C0 07            [24] 1995 	push	ar7
      00093D C0 01            [24] 1996 	push	ar1
      00093F C0 05            [24] 1997 	push	ar5
      000941 C0 06            [24] 1998 	push	ar6
      000943 C0 03            [24] 1999 	push	ar3
      000945 C0 04            [24] 2000 	push	ar4
      000947 74r52            [12] 2001 	mov	a,#___str_6
      000949 C0 E0            [24] 2002 	push	acc
      00094B 74s00            [12] 2003 	mov	a,#(___str_6 >> 8)
      00094D C0 E0            [24] 2004 	push	acc
      00094F 74 80            [12] 2005 	mov	a,#0x80
      000951 C0 E0            [24] 2006 	push	acc
      000953 12r00r00         [24] 2007 	lcall	_printf
      000956 E5 81            [12] 2008 	mov	a,sp
      000958 24 F9            [12] 2009 	add	a,#0xf9
      00095A F5 81            [12] 2010 	mov	sp,a
      00095C D0 01            [24] 2011 	pop	ar1
      00095E D0 07            [24] 2012 	pop	ar7
                                   2013 ;	walk.c:176: for (i = 0; i < REG; i++) {
      000960 E5*00            [12] 2014 	mov	a,_bp
      000962 24 05            [12] 2015 	add	a,#0x05
      000964 F8               [12] 2016 	mov	r0,a
      000965 06               [12] 2017 	inc	@r0
      000966 B6 00 02         [24] 2018 	cjne	@r0,#0x00,00190$
      000969 08               [12] 2019 	inc	r0
      00096A 06               [12] 2020 	inc	@r0
      00096B                       2021 00190$:
      00096B E5*00            [12] 2022 	mov	a,_bp
      00096D 24 05            [12] 2023 	add	a,#0x05
      00096F F8               [12] 2024 	mov	r0,a
      000970 C3               [12] 2025 	clr	c
      000971 E6               [12] 2026 	mov	a,@r0
      000972 94 08            [12] 2027 	subb	a,#0x08
      000974 08               [12] 2028 	inc	r0
      000975 E6               [12] 2029 	mov	a,@r0
      000976 64 80            [12] 2030 	xrl	a,#0x80
      000978 94 80            [12] 2031 	subb	a,#0x80
      00097A D0 07            [24] 2032 	pop	ar7
      00097C 50 03            [24] 2033 	jnc	00191$
      00097E 02r07rD0         [24] 2034 	ljmp	00115$
      000981                       2035 00191$:
                                   2036 ;	walk.c:182: OE76 = OE76_0;
      000981 78r01            [12] 2037 	mov	r0,#_OE76
      000983 76 3F            [12] 2038 	mov	@r0,#0x3f
                                   2039 ;	walk.c:183: flashOE(OE76_NC);
      000985 75 82 00         [24] 2040 	mov	dpl,#0x00
      000988 C0 07            [24] 2041 	push	ar7
      00098A C0 01            [24] 2042 	push	ar1
      00098C 12r00r29         [24] 2043 	lcall	_flashOE
      00098F D0 01            [24] 2044 	pop	ar1
      000991 D0 07            [24] 2045 	pop	ar7
                                   2046 ;	walk.c:185: walk(&initial);
      000993 8F 04            [24] 2047 	mov	ar4,r7
      000995 7D 00            [12] 2048 	mov	r5,#0x00
      000997 7E 40            [12] 2049 	mov	r6,#0x40
      000999 8C 82            [24] 2050 	mov	dpl,r4
      00099B 8D 83            [24] 2051 	mov	dph,r5
      00099D 8E F0            [24] 2052 	mov	b,r6
      00099F C0 07            [24] 2053 	push	ar7
      0009A1 C0 01            [24] 2054 	push	ar1
      0009A3 12r02rD7         [24] 2055 	lcall	_walk
      0009A6 D0 01            [24] 2056 	pop	ar1
      0009A8 D0 07            [24] 2057 	pop	ar7
                                   2058 ;	walk.c:187: for (i = 0; i < ROWS; i++)
      0009AA E5*00            [12] 2059 	mov	a,_bp
      0009AC 24 05            [12] 2060 	add	a,#0x05
      0009AE F8               [12] 2061 	mov	r0,a
      0009AF E4               [12] 2062 	clr	a
      0009B0 F6               [12] 2063 	mov	@r0,a
      0009B1 08               [12] 2064 	inc	r0
      0009B2 F6               [12] 2065 	mov	@r0,a
      0009B3 7B 00            [12] 2066 	mov	r3,#0x00
      0009B5 7C 00            [12] 2067 	mov	r4,#0x00
                                   2068 ;	walk.c:188: for (j = 0; j < COLS; j++)
      0009B7                       2069 00131$:
      0009B7 E5*00            [12] 2070 	mov	a,_bp
      0009B9 24 03            [12] 2071 	add	a,#0x03
      0009BB F8               [12] 2072 	mov	r0,a
      0009BC EB               [12] 2073 	mov	a,r3
      0009BD 24r00            [12] 2074 	add	a,#_g
      0009BF F6               [12] 2075 	mov	@r0,a
      0009C0 EC               [12] 2076 	mov	a,r4
      0009C1 34s00            [12] 2077 	addc	a,#(_g >> 8)
      0009C3 08               [12] 2078 	inc	r0
      0009C4 F6               [12] 2079 	mov	@r0,a
      0009C5 7A 00            [12] 2080 	mov	r2,#0x00
      0009C7 7E 00            [12] 2081 	mov	r6,#0x00
      0009C9                       2082 00117$:
                                   2083 ;	walk.c:189: if (g[i][j] != 0xaa) bang();
      0009C9 E5*00            [12] 2084 	mov	a,_bp
      0009CB 24 03            [12] 2085 	add	a,#0x03
      0009CD F8               [12] 2086 	mov	r0,a
      0009CE EA               [12] 2087 	mov	a,r2
      0009CF 26               [12] 2088 	add	a,@r0
      0009D0 F5 82            [12] 2089 	mov	dpl,a
      0009D2 EE               [12] 2090 	mov	a,r6
      0009D3 08               [12] 2091 	inc	r0
      0009D4 36               [12] 2092 	addc	a,@r0
      0009D5 F5 83            [12] 2093 	mov	dph,a
      0009D7 E0               [24] 2094 	movx	a,@dptr
      0009D8 FD               [12] 2095 	mov	r5,a
      0009D9 BD AA 02         [24] 2096 	cjne	r5,#0xaa,00192$
      0009DC 80 1B            [24] 2097 	sjmp	00118$
      0009DE                       2098 00192$:
      0009DE C0 07            [24] 2099 	push	ar7
      0009E0 C0 06            [24] 2100 	push	ar6
      0009E2 C0 04            [24] 2101 	push	ar4
      0009E4 C0 03            [24] 2102 	push	ar3
      0009E6 C0 02            [24] 2103 	push	ar2
      0009E8 C0 01            [24] 2104 	push	ar1
      0009EA 12r00r1D         [24] 2105 	lcall	_bang
      0009ED D0 01            [24] 2106 	pop	ar1
      0009EF D0 02            [24] 2107 	pop	ar2
      0009F1 D0 03            [24] 2108 	pop	ar3
      0009F3 D0 04            [24] 2109 	pop	ar4
      0009F5 D0 06            [24] 2110 	pop	ar6
      0009F7 D0 07            [24] 2111 	pop	ar7
      0009F9                       2112 00118$:
                                   2113 ;	walk.c:188: for (j = 0; j < COLS; j++)
      0009F9 0A               [12] 2114 	inc	r2
      0009FA BA 00 01         [24] 2115 	cjne	r2,#0x00,00193$
      0009FD 0E               [12] 2116 	inc	r6
      0009FE                       2117 00193$:
      0009FE C3               [12] 2118 	clr	c
      0009FF EA               [12] 2119 	mov	a,r2
      000A00 94 C9            [12] 2120 	subb	a,#0xc9
      000A02 EE               [12] 2121 	mov	a,r6
      000A03 64 80            [12] 2122 	xrl	a,#0x80
      000A05 94 80            [12] 2123 	subb	a,#0x80
      000A07 40 C0            [24] 2124 	jc	00117$
                                   2125 ;	walk.c:187: for (i = 0; i < ROWS; i++)
      000A09 74 C9            [12] 2126 	mov	a,#0xc9
      000A0B 2B               [12] 2127 	add	a,r3
      000A0C FB               [12] 2128 	mov	r3,a
      000A0D E4               [12] 2129 	clr	a
      000A0E 3C               [12] 2130 	addc	a,r4
      000A0F FC               [12] 2131 	mov	r4,a
      000A10 E5*00            [12] 2132 	mov	a,_bp
      000A12 24 05            [12] 2133 	add	a,#0x05
      000A14 F8               [12] 2134 	mov	r0,a
      000A15 06               [12] 2135 	inc	@r0
      000A16 B6 00 02         [24] 2136 	cjne	@r0,#0x00,00195$
      000A19 08               [12] 2137 	inc	r0
      000A1A 06               [12] 2138 	inc	@r0
      000A1B                       2139 00195$:
      000A1B E5*00            [12] 2140 	mov	a,_bp
      000A1D 24 05            [12] 2141 	add	a,#0x05
      000A1F F8               [12] 2142 	mov	r0,a
      000A20 C3               [12] 2143 	clr	c
      000A21 E6               [12] 2144 	mov	a,@r0
      000A22 94 30            [12] 2145 	subb	a,#0x30
      000A24 08               [12] 2146 	inc	r0
      000A25 E6               [12] 2147 	mov	a,@r0
      000A26 64 80            [12] 2148 	xrl	a,#0x80
      000A28 94 80            [12] 2149 	subb	a,#0x80
      000A2A 40 8B            [24] 2150 	jc	00131$
                                   2151 ;	walk.c:191: N++;
      000A2C E5*00            [12] 2152 	mov	a,_bp
      000A2E 24 0B            [12] 2153 	add	a,#0x0b
      000A30 F8               [12] 2154 	mov	r0,a
      000A31 06               [12] 2155 	inc	@r0
      000A32 B6 00 02         [24] 2156 	cjne	@r0,#0x00,00197$
      000A35 08               [12] 2157 	inc	r0
      000A36 06               [12] 2158 	inc	@r0
      000A37                       2159 00197$:
      000A37 02r06rB5         [24] 2160 	ljmp	00108$
      000A3A                       2161 00110$:
                                   2162 ;	walk.c:194: EA = 0;
                                   2163 ;	assignBit
      000A3A C2 AF            [12] 2164 	clr	_EA
                                   2165 ;	walk.c:196: puts("\033[2J\033[?25h");
      000A3C 90r00r5B         [24] 2166 	mov	dptr,#___str_7
      000A3F 75 F0 80         [24] 2167 	mov	b,#0x80
      000A42 12r00r00         [24] 2168 	lcall	_puts
                                   2169 ;	walk.c:200: __endasm;
      000A45 02 00 00         [24] 2170 	ljmp	0
                                   2171 ;	walk.c:202: return 0;
      000A48 90 00 00         [24] 2172 	mov	dptr,#0x0000
                                   2173 ;	walk.c:203: }
      000A4B 85*00 81         [24] 2174 	mov	sp,_bp
      000A4E D0*00            [24] 2175 	pop	_bp
      000A50 22               [24] 2176 	ret
                                   2177 ;------------------------------------------------------------
                                   2178 ;Allocation info for local variables in function 'stinit'
                                   2179 ;------------------------------------------------------------
                                   2180 ;	walk.c:205: static void stinit(void) {
                                   2181 ;	-----------------------------------------
                                   2182 ;	 function stinit
                                   2183 ;	-----------------------------------------
      000A51                       2184 _stinit:
                                   2185 ;	walk.c:206: sp = -1;
      000A51 90rBCr70         [24] 2186 	mov	dptr,#_sp
      000A54 74 FF            [12] 2187 	mov	a,#0xff
      000A56 F0               [24] 2188 	movx	@dptr,a
      000A57 A3               [24] 2189 	inc	dptr
      000A58 F0               [24] 2190 	movx	@dptr,a
                                   2191 ;	walk.c:207: return;
                                   2192 ;	walk.c:208: }
      000A59 22               [24] 2193 	ret
                                   2194 ;------------------------------------------------------------
                                   2195 ;Allocation info for local variables in function 'stpush'
                                   2196 ;------------------------------------------------------------
                                   2197 ;t                         Allocated to registers r5 r6 r7 
                                   2198 ;------------------------------------------------------------
                                   2199 ;	walk.c:210: static int stpush(struct node *t) {
                                   2200 ;	-----------------------------------------
                                   2201 ;	 function stpush
                                   2202 ;	-----------------------------------------
      000A5A                       2203 _stpush:
      000A5A AD 82            [24] 2204 	mov	r5,dpl
      000A5C AE 83            [24] 2205 	mov	r6,dph
      000A5E AF F0            [24] 2206 	mov	r7,b
                                   2207 ;	walk.c:211: if (sp == (SMAX - 1)) return 0;
      000A60 90rBCr70         [24] 2208 	mov	dptr,#_sp
      000A63 E0               [24] 2209 	movx	a,@dptr
      000A64 FB               [12] 2210 	mov	r3,a
      000A65 A3               [24] 2211 	inc	dptr
      000A66 E0               [24] 2212 	movx	a,@dptr
      000A67 FC               [12] 2213 	mov	r4,a
      000A68 BB AF 07         [24] 2214 	cjne	r3,#0xaf,00102$
      000A6B BC 25 04         [24] 2215 	cjne	r4,#0x25,00102$
      000A6E 90 00 00         [24] 2216 	mov	dptr,#0x0000
      000A71 22               [24] 2217 	ret
      000A72                       2218 00102$:
                                   2219 ;	walk.c:212: sp++;
      000A72 90rBCr70         [24] 2220 	mov	dptr,#_sp
      000A75 74 01            [12] 2221 	mov	a,#0x01
      000A77 2B               [12] 2222 	add	a,r3
      000A78 F0               [24] 2223 	movx	@dptr,a
      000A79 E4               [12] 2224 	clr	a
      000A7A 3C               [12] 2225 	addc	a,r4
      000A7B A3               [24] 2226 	inc	dptr
      000A7C F0               [24] 2227 	movx	@dptr,a
                                   2228 ;	walk.c:213: stack[sp] = *t;
      000A7D 90rBCr70         [24] 2229 	mov	dptr,#_sp
      000A80 E0               [24] 2230 	movx	a,@dptr
      000A81 FB               [12] 2231 	mov	r3,a
      000A82 A3               [24] 2232 	inc	dptr
      000A83 E0               [24] 2233 	movx	a,@dptr
      000A84 FC               [12] 2234 	mov	r4,a
      000A85 EB               [12] 2235 	mov	a,r3
      000A86 2B               [12] 2236 	add	a,r3
      000A87 FB               [12] 2237 	mov	r3,a
      000A88 EC               [12] 2238 	mov	a,r4
      000A89 33               [12] 2239 	rlc	a
      000A8A FC               [12] 2240 	mov	r4,a
      000A8B EB               [12] 2241 	mov	a,r3
      000A8C 2B               [12] 2242 	add	a,r3
      000A8D FB               [12] 2243 	mov	r3,a
      000A8E EC               [12] 2244 	mov	a,r4
      000A8F 33               [12] 2245 	rlc	a
      000A90 FC               [12] 2246 	mov	r4,a
      000A91 EB               [12] 2247 	mov	a,r3
      000A92 24rB0            [12] 2248 	add	a,#_stack
      000A94 FB               [12] 2249 	mov	r3,a
      000A95 EC               [12] 2250 	mov	a,r4
      000A96 34s25            [12] 2251 	addc	a,#(_stack >> 8)
      000A98 FC               [12] 2252 	mov	r4,a
      000A99 7A 00            [12] 2253 	mov	r2,#0x00
      000A9B 74 04            [12] 2254 	mov	a,#0x04
      000A9D C0 E0            [24] 2255 	push	acc
      000A9F E4               [12] 2256 	clr	a
      000AA0 C0 E0            [24] 2257 	push	acc
      000AA2 C0 05            [24] 2258 	push	ar5
      000AA4 C0 06            [24] 2259 	push	ar6
      000AA6 C0 07            [24] 2260 	push	ar7
      000AA8 8B 82            [24] 2261 	mov	dpl,r3
      000AAA 8C 83            [24] 2262 	mov	dph,r4
      000AAC 8A F0            [24] 2263 	mov	b,r2
      000AAE 12r00r00         [24] 2264 	lcall	___memcpy
      000AB1 E5 81            [12] 2265 	mov	a,sp
      000AB3 24 FB            [12] 2266 	add	a,#0xfb
      000AB5 F5 81            [12] 2267 	mov	sp,a
                                   2268 ;	walk.c:214: return 1;
      000AB7 90 00 01         [24] 2269 	mov	dptr,#0x0001
                                   2270 ;	walk.c:215: }
      000ABA 22               [24] 2271 	ret
                                   2272 ;------------------------------------------------------------
                                   2273 ;Allocation info for local variables in function 'stpop'
                                   2274 ;------------------------------------------------------------
                                   2275 ;t                         Allocated to registers r5 r6 r7 
                                   2276 ;------------------------------------------------------------
                                   2277 ;	walk.c:217: static int stpop(struct node *t) {
                                   2278 ;	-----------------------------------------
                                   2279 ;	 function stpop
                                   2280 ;	-----------------------------------------
      000ABB                       2281 _stpop:
      000ABB AD 82            [24] 2282 	mov	r5,dpl
      000ABD AE 83            [24] 2283 	mov	r6,dph
      000ABF AF F0            [24] 2284 	mov	r7,b
                                   2285 ;	walk.c:218: if (sp == -1) return 0;
      000AC1 90rBCr70         [24] 2286 	mov	dptr,#_sp
      000AC4 E0               [24] 2287 	movx	a,@dptr
      000AC5 FB               [12] 2288 	mov	r3,a
      000AC6 A3               [24] 2289 	inc	dptr
      000AC7 E0               [24] 2290 	movx	a,@dptr
      000AC8 FC               [12] 2291 	mov	r4,a
      000AC9 BB FF 07         [24] 2292 	cjne	r3,#0xff,00102$
      000ACC BC FF 04         [24] 2293 	cjne	r4,#0xff,00102$
      000ACF 90 00 00         [24] 2294 	mov	dptr,#0x0000
      000AD2 22               [24] 2295 	ret
      000AD3                       2296 00102$:
                                   2297 ;	walk.c:219: *t = stack[sp];
      000AD3 EB               [12] 2298 	mov	a,r3
      000AD4 2B               [12] 2299 	add	a,r3
      000AD5 FB               [12] 2300 	mov	r3,a
      000AD6 EC               [12] 2301 	mov	a,r4
      000AD7 33               [12] 2302 	rlc	a
      000AD8 FC               [12] 2303 	mov	r4,a
      000AD9 EB               [12] 2304 	mov	a,r3
      000ADA 2B               [12] 2305 	add	a,r3
      000ADB FB               [12] 2306 	mov	r3,a
      000ADC EC               [12] 2307 	mov	a,r4
      000ADD 33               [12] 2308 	rlc	a
      000ADE FC               [12] 2309 	mov	r4,a
      000ADF EB               [12] 2310 	mov	a,r3
      000AE0 24rB0            [12] 2311 	add	a,#_stack
      000AE2 FB               [12] 2312 	mov	r3,a
      000AE3 EC               [12] 2313 	mov	a,r4
      000AE4 34s25            [12] 2314 	addc	a,#(_stack >> 8)
      000AE6 FC               [12] 2315 	mov	r4,a
      000AE7 7A 00            [12] 2316 	mov	r2,#0x00
      000AE9 74 04            [12] 2317 	mov	a,#0x04
      000AEB C0 E0            [24] 2318 	push	acc
      000AED E4               [12] 2319 	clr	a
      000AEE C0 E0            [24] 2320 	push	acc
      000AF0 C0 03            [24] 2321 	push	ar3
      000AF2 C0 04            [24] 2322 	push	ar4
      000AF4 C0 02            [24] 2323 	push	ar2
      000AF6 8D 82            [24] 2324 	mov	dpl,r5
      000AF8 8E 83            [24] 2325 	mov	dph,r6
      000AFA 8F F0            [24] 2326 	mov	b,r7
      000AFC 12r00r00         [24] 2327 	lcall	___memcpy
      000AFF E5 81            [12] 2328 	mov	a,sp
      000B01 24 FB            [12] 2329 	add	a,#0xfb
      000B03 F5 81            [12] 2330 	mov	sp,a
                                   2331 ;	walk.c:220: sp--;
      000B05 90rBCr70         [24] 2332 	mov	dptr,#_sp
      000B08 E0               [24] 2333 	movx	a,@dptr
      000B09 24 FF            [12] 2334 	add	a,#0xff
      000B0B FE               [12] 2335 	mov	r6,a
      000B0C A3               [24] 2336 	inc	dptr
      000B0D E0               [24] 2337 	movx	a,@dptr
      000B0E 34 FF            [12] 2338 	addc	a,#0xff
      000B10 FF               [12] 2339 	mov	r7,a
      000B11 90rBCr70         [24] 2340 	mov	dptr,#_sp
      000B14 EE               [12] 2341 	mov	a,r6
      000B15 F0               [24] 2342 	movx	@dptr,a
      000B16 EF               [12] 2343 	mov	a,r7
      000B17 A3               [24] 2344 	inc	dptr
      000B18 F0               [24] 2345 	movx	@dptr,a
                                   2346 ;	walk.c:221: return 1;
      000B19 90 00 01         [24] 2347 	mov	dptr,#0x0001
                                   2348 ;	walk.c:222: }
      000B1C 22               [24] 2349 	ret
                                   2350 	.area CSEG    (CODE)
                                   2351 	.area CONST   (CODE)
                                   2352 	.area CONST   (CODE)
      000000                       2353 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2354 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2355 	.db 0x00
                                   2356 	.area CSEG    (CODE)
                                   2357 	.area CONST   (CODE)
      00000D                       2358 ___str_1:
      00000D 1B                    2359 	.db 0x1b
      00000E 5B 25 64 3B 25 64 48  2360 	.ascii "[%d;%dHo"
             6F
      000016 00                    2361 	.db 0x00
                                   2362 	.area CSEG    (CODE)
                                   2363 	.area CONST   (CODE)
      000017                       2364 ___str_2:
      000017 1B                    2365 	.db 0x1b
      000018 5B 32 3B 31 48 25 20  2366 	.ascii "[2;1H% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64
      000029 00                    2367 	.db 0x00
                                   2368 	.area CSEG    (CODE)
                                   2369 	.area CONST   (CODE)
      00002A                       2370 ___str_3:
      00002A 1B                    2371 	.db 0x1b
      00002B 5B 25 64 3B 25 64 48  2372 	.ascii "[%d;%dH."
             2E
      000033 00                    2373 	.db 0x00
                                   2374 	.area CSEG    (CODE)
                                   2375 	.area CONST   (CODE)
      000034                       2376 ___str_4:
      000034 1B                    2377 	.db 0x1b
      000035 5B 32 4A              2378 	.ascii "[2J"
      000038 1B                    2379 	.db 0x1b
      000039 5B 3F 32 35 6C        2380 	.ascii "[?25l"
      00003E 00                    2381 	.db 0x00
                                   2382 	.area CSEG    (CODE)
                                   2383 	.area CONST   (CODE)
      00003F                       2384 ___str_5:
      00003F 1B                    2385 	.db 0x1b
      000040 5B 31 3B 31 48 25 20  2386 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000051 00                    2387 	.db 0x00
                                   2388 	.area CSEG    (CODE)
                                   2389 	.area CONST   (CODE)
      000052                       2390 ___str_6:
      000052 25 20 38 64 25 20 38  2391 	.ascii "% 8d% 8d"
             64
      00005A 00                    2392 	.db 0x00
                                   2393 	.area CSEG    (CODE)
                                   2394 	.area CONST   (CODE)
      00005B                       2395 ___str_7:
      00005B 1B                    2396 	.db 0x1b
      00005C 5B 32 4A              2397 	.ascii "[2J"
      00005F 1B                    2398 	.db 0x1b
      000060 5B 3F 32 35 68        2399 	.ascii "[?25h"
      000065 00                    2400 	.db 0x00
                                   2401 	.area CSEG    (CODE)
                                   2402 	.area XINIT   (CODE)
      000000                       2403 __xinit__R:
      000000 FE FF                 2404 	.byte #0xfe,#0xff
      000002                       2405 __xinit__neigh:
      000002 FF FF                 2406 	.byte #0xff, #0xff	; -1
      000004 01 00                 2407 	.byte #0x01, #0x00	;  1
      000006 FF FF                 2408 	.byte #0xff, #0xff	; -1
      000008 FF FF                 2409 	.byte #0xff, #0xff	; -1
      00000A 01 00                 2410 	.byte #0x01, #0x00	;  1
      00000C FF FF                 2411 	.byte #0xff, #0xff	; -1
      00000E 01 00                 2412 	.byte #0x01, #0x00	;  1
      000010 01 00                 2413 	.byte #0x01, #0x00	;  1
      000012 FF FF                 2414 	.byte #0xff, #0xff	; -1
      000014 00 00                 2415 	.byte #0x00, #0x00	;  0
      000016 00 00                 2416 	.byte #0x00, #0x00	;  0
      000018 FF FF                 2417 	.byte #0xff, #0xff	; -1
      00001A 01 00                 2418 	.byte #0x01, #0x00	;  1
      00001C 00 00                 2419 	.byte #0x00, #0x00	;  0
      00001E 00 00                 2420 	.byte #0x00, #0x00	;  0
      000020 01 00                 2421 	.byte #0x01, #0x00	;  1
      000022 FF FF                 2422 	.byte #0xff, #0xff	; -1
      000024 01 00                 2423 	.byte #0x01, #0x00	;  1
      000026 FF FF                 2424 	.byte #0xff, #0xff	; -1
      000028 FF FF                 2425 	.byte #0xff, #0xff	; -1
      00002A 01 00                 2426 	.byte #0x01, #0x00	;  1
      00002C FF FF                 2427 	.byte #0xff, #0xff	; -1
      00002E 01 00                 2428 	.byte #0x01, #0x00	;  1
      000030 01 00                 2429 	.byte #0x01, #0x00	;  1
      000032 FF FF                 2430 	.byte #0xff, #0xff	; -1
      000034 00 00                 2431 	.byte #0x00, #0x00	;  0
      000036 00 00                 2432 	.byte #0x00, #0x00	;  0
      000038 FF FF                 2433 	.byte #0xff, #0xff	; -1
      00003A 01 00                 2434 	.byte #0x01, #0x00	;  1
      00003C 00 00                 2435 	.byte #0x00, #0x00	;  0
      00003E 00 00                 2436 	.byte #0x00, #0x00	;  0
      000040 01 00                 2437 	.byte #0x01, #0x00	;  1
                                   2438 	.area CABS    (ABS,CODE)
