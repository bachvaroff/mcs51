                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _queue:
      0025B0                        325 	.ds 38592
      00BC70                        326 _hp:
      00BC70                        327 	.ds 2
      00BC72                        328 _tp:
      00BC72                        329 	.ds 2
                           00F006   330 _OEreg	=	0xf006
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
      000000                        339 _neigh:
      000000                        340 	.ds 64
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  357 	ljmp	_int0
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000006                        378 __sdcc_program_startup:
      000006 02r06rA9         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'putchar'
                                    387 ;------------------------------------------------------------
                                    388 ;c                         Allocated to registers 
                                    389 ;------------------------------------------------------------
                                    390 ;	walk.c:9: int putchar(int c) __naked {
                                    391 ;	-----------------------------------------
                                    392 ;	 function putchar
                                    393 ;	-----------------------------------------
      000000                        394 _putchar:
                                    395 ;	naked function: no prologue.
                                    396 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  397 	mov	a, dpl
      000002 02 00 30         [24]  398 	ljmp	0x0030
                                    399 ;	walk.c:15: }
                                    400 ;	naked function: no epilogue.
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'getchar'
                                    403 ;------------------------------------------------------------
                                    404 ;	walk.c:17: int getchar(void) __naked {
                                    405 ;	-----------------------------------------
                                    406 ;	 function getchar
                                    407 ;	-----------------------------------------
      000005                        408 _getchar:
                                    409 ;	naked function: no prologue.
                                    410 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  411 	lcall	0x0032
      000008 F5 82            [12]  412 	mov	dpl, a
      00000A 75 83 00         [24]  413 	mov	dph, #0
      00000D 22               [24]  414 	ret
                                    415 ;	walk.c:24: }
                                    416 ;	naked function: no epilogue.
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'int0'
                                    419 ;------------------------------------------------------------
                                    420 ;	walk.c:30: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    421 ;	-----------------------------------------
                                    422 ;	 function int0
                                    423 ;	-----------------------------------------
      00000E                        424 _int0:
                           00000F   425 	ar7 = 0x0f
                           00000E   426 	ar6 = 0x0e
                           00000D   427 	ar5 = 0x0d
                           00000C   428 	ar4 = 0x0c
                           00000B   429 	ar3 = 0x0b
                           00000A   430 	ar2 = 0x0a
                           000009   431 	ar1 = 0x09
                           000008   432 	ar0 = 0x08
      00000E C0 D0            [24]  433 	push	psw
      000010 75 D0 08         [24]  434 	mov	psw,#0x08
                                    435 ;	walk.c:31: i0 = 0u;
      000013 78r00            [12]  436 	mov	r0,#_i0
      000015 76 00            [12]  437 	mov	@r0,#0x00
                                    438 ;	walk.c:32: }
      000017 D0 D0            [24]  439 	pop	psw
      000019 32               [24]  440 	reti
                                    441 ;	eliminated unneeded push/pop dpl
                                    442 ;	eliminated unneeded push/pop dph
                                    443 ;	eliminated unneeded push/pop b
                                    444 ;	eliminated unneeded push/pop acc
                                    445 ;------------------------------------------------------------
                                    446 ;Allocation info for local variables in function 'bang'
                                    447 ;------------------------------------------------------------
                                    448 ;	walk.c:38: static void bang(void) {
                                    449 ;	-----------------------------------------
                                    450 ;	 function bang
                                    451 ;	-----------------------------------------
      00001A                        452 _bang:
                           000007   453 	ar7 = 0x07
                           000006   454 	ar6 = 0x06
                           000005   455 	ar5 = 0x05
                           000004   456 	ar4 = 0x04
                           000003   457 	ar3 = 0x03
                           000002   458 	ar2 = 0x02
                           000001   459 	ar1 = 0x01
                           000000   460 	ar0 = 0x00
                                    461 ;	walk.c:39: (void)puts("Memory error");
      00001A 90r00r00         [24]  462 	mov	dptr,#___str_0
      00001D 75 F0 80         [24]  463 	mov	b,#0x80
      000020 12r00r00         [24]  464 	lcall	_puts
                                    465 ;	walk.c:35: PCON |= 2;
      000023 43 87 02         [24]  466 	orl	_PCON,#0x02
                                    467 ;	walk.c:42: return;
                                    468 ;	walk.c:43: }
      000026 22               [24]  469 	ret
                                    470 ;------------------------------------------------------------
                                    471 ;Allocation info for local variables in function 'setOE'
                                    472 ;------------------------------------------------------------
                                    473 ;mask                      Allocated to registers r7 
                                    474 ;------------------------------------------------------------
                                    475 ;	walk.c:85: static void setOE(uint8_t mask) {
                                    476 ;	-----------------------------------------
                                    477 ;	 function setOE
                                    478 ;	-----------------------------------------
      000027                        479 _setOE:
      000027 AF 82            [24]  480 	mov	r7,dpl
                                    481 ;	walk.c:86: OE76 |= mask;
      000029 78r01            [12]  482 	mov	r0,#_OE76
      00002B EF               [12]  483 	mov	a,r7
      00002C 46               [12]  484 	orl	a,@r0
      00002D F6               [12]  485 	mov	@r0,a
                                    486 ;	walk.c:87: P1_7 = 0;
                                    487 ;	assignBit
      00002E C2 97            [12]  488 	clr	_P1_7
                                    489 ;	walk.c:92: __endasm;
      000030 00               [12]  490 	nop
      000031 00               [12]  491 	nop
      000032 00               [12]  492 	nop
                                    493 ;	walk.c:93: OEreg = OE76;
      000033 78r01            [12]  494 	mov	r0,#_OE76
      000035 90 F0 06         [24]  495 	mov	dptr,#_OEreg
      000038 E6               [12]  496 	mov	a,@r0
      000039 F0               [24]  497 	movx	@dptr,a
                                    498 ;	walk.c:94: P1_7 = 1;
                                    499 ;	assignBit
      00003A D2 97            [12]  500 	setb	_P1_7
                                    501 ;	walk.c:99: __endasm;
      00003C 00               [12]  502 	nop
      00003D 00               [12]  503 	nop
      00003E 00               [12]  504 	nop
                                    505 ;	walk.c:101: return;
                                    506 ;	walk.c:102: }
      00003F 22               [24]  507 	ret
                                    508 ;------------------------------------------------------------
                                    509 ;Allocation info for local variables in function 'unsetOE'
                                    510 ;------------------------------------------------------------
                                    511 ;mask                      Allocated to registers r7 
                                    512 ;------------------------------------------------------------
                                    513 ;	walk.c:104: static void unsetOE(uint8_t mask) {
                                    514 ;	-----------------------------------------
                                    515 ;	 function unsetOE
                                    516 ;	-----------------------------------------
      000040                        517 _unsetOE:
                                    518 ;	walk.c:105: OE76 &= ~mask;
      000040 E5 82            [12]  519 	mov	a,dpl
      000042 F4               [12]  520 	cpl	a
      000043 FF               [12]  521 	mov	r7,a
      000044 78r01            [12]  522 	mov	r0,#_OE76
      000046 56               [12]  523 	anl	a,@r0
      000047 F6               [12]  524 	mov	@r0,a
                                    525 ;	walk.c:106: P1_7 = 0;
                                    526 ;	assignBit
      000048 C2 97            [12]  527 	clr	_P1_7
                                    528 ;	walk.c:111: __endasm;
      00004A 00               [12]  529 	nop
      00004B 00               [12]  530 	nop
      00004C 00               [12]  531 	nop
                                    532 ;	walk.c:112: OEreg = OE76;
      00004D 78r01            [12]  533 	mov	r0,#_OE76
      00004F 90 F0 06         [24]  534 	mov	dptr,#_OEreg
      000052 E6               [12]  535 	mov	a,@r0
      000053 F0               [24]  536 	movx	@dptr,a
                                    537 ;	walk.c:113: P1_7 = 1;
                                    538 ;	assignBit
      000054 D2 97            [12]  539 	setb	_P1_7
                                    540 ;	walk.c:118: __endasm;
      000056 00               [12]  541 	nop
      000057 00               [12]  542 	nop
      000058 00               [12]  543 	nop
                                    544 ;	walk.c:120: return;
                                    545 ;	walk.c:121: }
      000059 22               [24]  546 	ret
                                    547 ;------------------------------------------------------------
                                    548 ;Allocation info for local variables in function 'flipOE'
                                    549 ;------------------------------------------------------------
                                    550 ;mask                      Allocated to registers r7 
                                    551 ;------------------------------------------------------------
                                    552 ;	walk.c:123: static void flipOE(uint8_t mask) {
                                    553 ;	-----------------------------------------
                                    554 ;	 function flipOE
                                    555 ;	-----------------------------------------
      00005A                        556 _flipOE:
      00005A AF 82            [24]  557 	mov	r7,dpl
                                    558 ;	walk.c:124: OE76 ^= mask;
      00005C 78r01            [12]  559 	mov	r0,#_OE76
      00005E EF               [12]  560 	mov	a,r7
      00005F 66               [12]  561 	xrl	a,@r0
      000060 F6               [12]  562 	mov	@r0,a
                                    563 ;	walk.c:125: P1_7 = 0;
                                    564 ;	assignBit
      000061 C2 97            [12]  565 	clr	_P1_7
                                    566 ;	walk.c:130: __endasm;
      000063 00               [12]  567 	nop
      000064 00               [12]  568 	nop
      000065 00               [12]  569 	nop
                                    570 ;	walk.c:131: OEreg = OE76;
      000066 78r01            [12]  571 	mov	r0,#_OE76
      000068 90 F0 06         [24]  572 	mov	dptr,#_OEreg
      00006B E6               [12]  573 	mov	a,@r0
      00006C F0               [24]  574 	movx	@dptr,a
                                    575 ;	walk.c:132: P1_7 = 1;
                                    576 ;	assignBit
      00006D D2 97            [12]  577 	setb	_P1_7
                                    578 ;	walk.c:137: __endasm;
      00006F 00               [12]  579 	nop
      000070 00               [12]  580 	nop
      000071 00               [12]  581 	nop
                                    582 ;	walk.c:139: return;
                                    583 ;	walk.c:140: }
      000072 22               [24]  584 	ret
                                    585 ;------------------------------------------------------------
                                    586 ;Allocation info for local variables in function 'update'
                                    587 ;------------------------------------------------------------
                                    588 ;cur                       Allocated to stack - _bp -5
                                    589 ;j                         Allocated to stack - _bp -6
                                    590 ;t                         Allocated to stack - _bp +1
                                    591 ;sloc0                     Allocated to stack - _bp +4
                                    592 ;sloc1                     Allocated to stack - _bp +6
                                    593 ;sloc2                     Allocated to stack - _bp +8
                                    594 ;------------------------------------------------------------
                                    595 ;	walk.c:142: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    596 ;	-----------------------------------------
                                    597 ;	 function update
                                    598 ;	-----------------------------------------
      000073                        599 _update:
      000073 C0*00            [24]  600 	push	_bp
      000075 85 81*00         [24]  601 	mov	_bp,sp
      000078 C0 82            [24]  602 	push	dpl
      00007A C0 83            [24]  603 	push	dph
      00007C C0 F0            [24]  604 	push	b
      00007E E5 81            [12]  605 	mov	a,sp
      000080 24 07            [12]  606 	add	a,#0x07
      000082 F5 81            [12]  607 	mov	sp,a
                                    608 ;	walk.c:143: t->r = cur->r + neigh[j].r;
      000084 E5*00            [12]  609 	mov	a,_bp
      000086 24 FB            [12]  610 	add	a,#0xfb
      000088 F8               [12]  611 	mov	r0,a
      000089 86 02            [24]  612 	mov	ar2,@r0
      00008B 08               [12]  613 	inc	r0
      00008C 86 03            [24]  614 	mov	ar3,@r0
      00008E 08               [12]  615 	inc	r0
      00008F 86 04            [24]  616 	mov	ar4,@r0
      000091 8A 82            [24]  617 	mov	dpl,r2
      000093 8B 83            [24]  618 	mov	dph,r3
      000095 8C F0            [24]  619 	mov	b,r4
      000097 E5*00            [12]  620 	mov	a,_bp
      000099 24 04            [12]  621 	add	a,#0x04
      00009B F8               [12]  622 	mov	r0,a
      00009C 12r00r00         [24]  623 	lcall	__gptrget
      00009F F6               [12]  624 	mov	@r0,a
      0000A0 A3               [24]  625 	inc	dptr
      0000A1 12r00r00         [24]  626 	lcall	__gptrget
      0000A4 08               [12]  627 	inc	r0
      0000A5 F6               [12]  628 	mov	@r0,a
      0000A6 E5*00            [12]  629 	mov	a,_bp
      0000A8 24 FA            [12]  630 	add	a,#0xfa
      0000AA F8               [12]  631 	mov	r0,a
      0000AB E5*00            [12]  632 	mov	a,_bp
      0000AD 24 06            [12]  633 	add	a,#0x06
      0000AF F9               [12]  634 	mov	r1,a
      0000B0 E6               [12]  635 	mov	a,@r0
      0000B1 75 F0 04         [24]  636 	mov	b,#0x04
      0000B4 A4               [48]  637 	mul	ab
      0000B5 F7               [12]  638 	mov	@r1,a
      0000B6 09               [12]  639 	inc	r1
      0000B7 A7 F0            [24]  640 	mov	@r1,b
      0000B9 E5*00            [12]  641 	mov	a,_bp
      0000BB 24 06            [12]  642 	add	a,#0x06
      0000BD F8               [12]  643 	mov	r0,a
      0000BE E6               [12]  644 	mov	a,@r0
      0000BF 24r00            [12]  645 	add	a,#_neigh
      0000C1 F5 82            [12]  646 	mov	dpl,a
      0000C3 08               [12]  647 	inc	r0
      0000C4 E6               [12]  648 	mov	a,@r0
      0000C5 34s00            [12]  649 	addc	a,#(_neigh >> 8)
      0000C7 F5 83            [12]  650 	mov	dph,a
      0000C9 E0               [24]  651 	movx	a,@dptr
      0000CA FF               [12]  652 	mov	r7,a
      0000CB A3               [24]  653 	inc	dptr
      0000CC E0               [24]  654 	movx	a,@dptr
      0000CD FE               [12]  655 	mov	r6,a
      0000CE E5*00            [12]  656 	mov	a,_bp
      0000D0 24 04            [12]  657 	add	a,#0x04
      0000D2 F8               [12]  658 	mov	r0,a
      0000D3 EF               [12]  659 	mov	a,r7
      0000D4 26               [12]  660 	add	a,@r0
      0000D5 FF               [12]  661 	mov	r7,a
      0000D6 EE               [12]  662 	mov	a,r6
      0000D7 08               [12]  663 	inc	r0
      0000D8 36               [12]  664 	addc	a,@r0
      0000D9 FE               [12]  665 	mov	r6,a
      0000DA A8*00            [24]  666 	mov	r0,_bp
      0000DC 08               [12]  667 	inc	r0
      0000DD 86 82            [24]  668 	mov	dpl,@r0
      0000DF 08               [12]  669 	inc	r0
      0000E0 86 83            [24]  670 	mov	dph,@r0
      0000E2 08               [12]  671 	inc	r0
      0000E3 86 F0            [24]  672 	mov	b,@r0
      0000E5 EF               [12]  673 	mov	a,r7
      0000E6 12r00r00         [24]  674 	lcall	__gptrput
      0000E9 A3               [24]  675 	inc	dptr
      0000EA EE               [12]  676 	mov	a,r6
      0000EB 12r00r00         [24]  677 	lcall	__gptrput
                                    678 ;	walk.c:144: t->c = cur->c + neigh[j].c;
      0000EE A8*00            [24]  679 	mov	r0,_bp
      0000F0 08               [12]  680 	inc	r0
      0000F1 E5*00            [12]  681 	mov	a,_bp
      0000F3 24 08            [12]  682 	add	a,#0x08
      0000F5 F9               [12]  683 	mov	r1,a
      0000F6 74 02            [12]  684 	mov	a,#0x02
      0000F8 26               [12]  685 	add	a,@r0
      0000F9 F7               [12]  686 	mov	@r1,a
      0000FA E4               [12]  687 	clr	a
      0000FB 08               [12]  688 	inc	r0
      0000FC 36               [12]  689 	addc	a,@r0
      0000FD 09               [12]  690 	inc	r1
      0000FE F7               [12]  691 	mov	@r1,a
      0000FF 08               [12]  692 	inc	r0
      000100 09               [12]  693 	inc	r1
      000101 E6               [12]  694 	mov	a,@r0
      000102 F7               [12]  695 	mov	@r1,a
      000103 74 02            [12]  696 	mov	a,#0x02
      000105 2A               [12]  697 	add	a,r2
      000106 FA               [12]  698 	mov	r2,a
      000107 E4               [12]  699 	clr	a
      000108 3B               [12]  700 	addc	a,r3
      000109 FB               [12]  701 	mov	r3,a
      00010A 8A 82            [24]  702 	mov	dpl,r2
      00010C 8B 83            [24]  703 	mov	dph,r3
      00010E 8C F0            [24]  704 	mov	b,r4
      000110 12r00r00         [24]  705 	lcall	__gptrget
      000113 FA               [12]  706 	mov	r2,a
      000114 A3               [24]  707 	inc	dptr
      000115 12r00r00         [24]  708 	lcall	__gptrget
      000118 FB               [12]  709 	mov	r3,a
      000119 E5*00            [12]  710 	mov	a,_bp
      00011B 24 06            [12]  711 	add	a,#0x06
      00011D F8               [12]  712 	mov	r0,a
      00011E E6               [12]  713 	mov	a,@r0
      00011F 24r00            [12]  714 	add	a,#_neigh
      000121 FC               [12]  715 	mov	r4,a
      000122 08               [12]  716 	inc	r0
      000123 E6               [12]  717 	mov	a,@r0
      000124 34s00            [12]  718 	addc	a,#(_neigh >> 8)
      000126 FD               [12]  719 	mov	r5,a
      000127 8C 82            [24]  720 	mov	dpl,r4
      000129 8D 83            [24]  721 	mov	dph,r5
      00012B A3               [24]  722 	inc	dptr
      00012C A3               [24]  723 	inc	dptr
      00012D E0               [24]  724 	movx	a,@dptr
      00012E FC               [12]  725 	mov	r4,a
      00012F A3               [24]  726 	inc	dptr
      000130 E0               [24]  727 	movx	a,@dptr
      000131 FD               [12]  728 	mov	r5,a
      000132 EC               [12]  729 	mov	a,r4
      000133 2A               [12]  730 	add	a,r2
      000134 FA               [12]  731 	mov	r2,a
      000135 ED               [12]  732 	mov	a,r5
      000136 3B               [12]  733 	addc	a,r3
      000137 FB               [12]  734 	mov	r3,a
      000138 E5*00            [12]  735 	mov	a,_bp
      00013A 24 08            [12]  736 	add	a,#0x08
      00013C F8               [12]  737 	mov	r0,a
      00013D 86 82            [24]  738 	mov	dpl,@r0
      00013F 08               [12]  739 	inc	r0
      000140 86 83            [24]  740 	mov	dph,@r0
      000142 08               [12]  741 	inc	r0
      000143 86 F0            [24]  742 	mov	b,@r0
      000145 EA               [12]  743 	mov	a,r2
      000146 12r00r00         [24]  744 	lcall	__gptrput
      000149 A3               [24]  745 	inc	dptr
      00014A EB               [12]  746 	mov	a,r3
      00014B 12r00r00         [24]  747 	lcall	__gptrput
                                    748 ;	walk.c:146: if (t->r < 0) t->r += ROWS;
      00014E A8*00            [24]  749 	mov	r0,_bp
      000150 08               [12]  750 	inc	r0
      000151 86 82            [24]  751 	mov	dpl,@r0
      000153 08               [12]  752 	inc	r0
      000154 86 83            [24]  753 	mov	dph,@r0
      000156 08               [12]  754 	inc	r0
      000157 86 F0            [24]  755 	mov	b,@r0
      000159 12r00r00         [24]  756 	lcall	__gptrget
      00015C FD               [12]  757 	mov	r5,a
      00015D A3               [24]  758 	inc	dptr
      00015E 12r00r00         [24]  759 	lcall	__gptrget
      000161 FC               [12]  760 	mov	r4,a
      000162 EE               [12]  761 	mov	a,r6
      000163 30 E7 1D         [24]  762 	jnb	acc.7,00104$
      000166 74 30            [12]  763 	mov	a,#0x30
      000168 2D               [12]  764 	add	a,r5
      000169 FF               [12]  765 	mov	r7,a
      00016A E4               [12]  766 	clr	a
      00016B 3C               [12]  767 	addc	a,r4
      00016C FE               [12]  768 	mov	r6,a
      00016D A8*00            [24]  769 	mov	r0,_bp
      00016F 08               [12]  770 	inc	r0
      000170 86 82            [24]  771 	mov	dpl,@r0
      000172 08               [12]  772 	inc	r0
      000173 86 83            [24]  773 	mov	dph,@r0
      000175 08               [12]  774 	inc	r0
      000176 86 F0            [24]  775 	mov	b,@r0
      000178 EF               [12]  776 	mov	a,r7
      000179 12r00r00         [24]  777 	lcall	__gptrput
      00017C A3               [24]  778 	inc	dptr
      00017D EE               [12]  779 	mov	a,r6
      00017E 12r00r00         [24]  780 	lcall	__gptrput
      000181 80 27            [24]  781 	sjmp	00105$
      000183                        782 00104$:
                                    783 ;	walk.c:147: else if (t->r >= ROWS) t->r -= ROWS;
      000183 C3               [12]  784 	clr	c
      000184 ED               [12]  785 	mov	a,r5
      000185 94 30            [12]  786 	subb	a,#0x30
      000187 EC               [12]  787 	mov	a,r4
      000188 64 80            [12]  788 	xrl	a,#0x80
      00018A 94 80            [12]  789 	subb	a,#0x80
      00018C 40 1C            [24]  790 	jc	00105$
      00018E ED               [12]  791 	mov	a,r5
      00018F 24 D0            [12]  792 	add	a,#0xd0
      000191 FD               [12]  793 	mov	r5,a
      000192 EC               [12]  794 	mov	a,r4
      000193 34 FF            [12]  795 	addc	a,#0xff
      000195 FC               [12]  796 	mov	r4,a
      000196 A8*00            [24]  797 	mov	r0,_bp
      000198 08               [12]  798 	inc	r0
      000199 86 82            [24]  799 	mov	dpl,@r0
      00019B 08               [12]  800 	inc	r0
      00019C 86 83            [24]  801 	mov	dph,@r0
      00019E 08               [12]  802 	inc	r0
      00019F 86 F0            [24]  803 	mov	b,@r0
      0001A1 ED               [12]  804 	mov	a,r5
      0001A2 12r00r00         [24]  805 	lcall	__gptrput
      0001A5 A3               [24]  806 	inc	dptr
      0001A6 EC               [12]  807 	mov	a,r4
      0001A7 12r00r00         [24]  808 	lcall	__gptrput
      0001AA                        809 00105$:
                                    810 ;	walk.c:148: if (t->c < 0) t->c += COLS;
      0001AA E5*00            [12]  811 	mov	a,_bp
      0001AC 24 08            [12]  812 	add	a,#0x08
      0001AE F8               [12]  813 	mov	r0,a
      0001AF 86 82            [24]  814 	mov	dpl,@r0
      0001B1 08               [12]  815 	inc	r0
      0001B2 86 83            [24]  816 	mov	dph,@r0
      0001B4 08               [12]  817 	inc	r0
      0001B5 86 F0            [24]  818 	mov	b,@r0
      0001B7 12r00r00         [24]  819 	lcall	__gptrget
      0001BA A3               [24]  820 	inc	dptr
      0001BB 12r00r00         [24]  821 	lcall	__gptrget
      0001BE 30 E7 35         [24]  822 	jnb	acc.7,00109$
      0001C1 E5*00            [12]  823 	mov	a,_bp
      0001C3 24 08            [12]  824 	add	a,#0x08
      0001C5 F8               [12]  825 	mov	r0,a
      0001C6 86 82            [24]  826 	mov	dpl,@r0
      0001C8 08               [12]  827 	inc	r0
      0001C9 86 83            [24]  828 	mov	dph,@r0
      0001CB 08               [12]  829 	inc	r0
      0001CC 86 F0            [24]  830 	mov	b,@r0
      0001CE 12r00r00         [24]  831 	lcall	__gptrget
      0001D1 FE               [12]  832 	mov	r6,a
      0001D2 A3               [24]  833 	inc	dptr
      0001D3 12r00r00         [24]  834 	lcall	__gptrget
      0001D6 FF               [12]  835 	mov	r7,a
      0001D7 74 C9            [12]  836 	mov	a,#0xc9
      0001D9 2E               [12]  837 	add	a,r6
      0001DA FE               [12]  838 	mov	r6,a
      0001DB E4               [12]  839 	clr	a
      0001DC 3F               [12]  840 	addc	a,r7
      0001DD FF               [12]  841 	mov	r7,a
      0001DE E5*00            [12]  842 	mov	a,_bp
      0001E0 24 08            [12]  843 	add	a,#0x08
      0001E2 F8               [12]  844 	mov	r0,a
      0001E3 86 82            [24]  845 	mov	dpl,@r0
      0001E5 08               [12]  846 	inc	r0
      0001E6 86 83            [24]  847 	mov	dph,@r0
      0001E8 08               [12]  848 	inc	r0
      0001E9 86 F0            [24]  849 	mov	b,@r0
      0001EB EE               [12]  850 	mov	a,r6
      0001EC 12r00r00         [24]  851 	lcall	__gptrput
      0001EF A3               [24]  852 	inc	dptr
      0001F0 EF               [12]  853 	mov	a,r7
      0001F1 12r00r00         [24]  854 	lcall	__gptrput
      0001F4 80 55            [24]  855 	sjmp	00110$
      0001F6                        856 00109$:
                                    857 ;	walk.c:149: else if (t->c >= COLS) t->c -= COLS;
      0001F6 E5*00            [12]  858 	mov	a,_bp
      0001F8 24 08            [12]  859 	add	a,#0x08
      0001FA F8               [12]  860 	mov	r0,a
      0001FB 86 82            [24]  861 	mov	dpl,@r0
      0001FD 08               [12]  862 	inc	r0
      0001FE 86 83            [24]  863 	mov	dph,@r0
      000200 08               [12]  864 	inc	r0
      000201 86 F0            [24]  865 	mov	b,@r0
      000203 12r00r00         [24]  866 	lcall	__gptrget
      000206 FE               [12]  867 	mov	r6,a
      000207 A3               [24]  868 	inc	dptr
      000208 12r00r00         [24]  869 	lcall	__gptrget
      00020B FF               [12]  870 	mov	r7,a
      00020C C3               [12]  871 	clr	c
      00020D EE               [12]  872 	mov	a,r6
      00020E 94 C9            [12]  873 	subb	a,#0xc9
      000210 EF               [12]  874 	mov	a,r7
      000211 64 80            [12]  875 	xrl	a,#0x80
      000213 94 80            [12]  876 	subb	a,#0x80
      000215 40 34            [24]  877 	jc	00110$
      000217 E5*00            [12]  878 	mov	a,_bp
      000219 24 08            [12]  879 	add	a,#0x08
      00021B F8               [12]  880 	mov	r0,a
      00021C 86 82            [24]  881 	mov	dpl,@r0
      00021E 08               [12]  882 	inc	r0
      00021F 86 83            [24]  883 	mov	dph,@r0
      000221 08               [12]  884 	inc	r0
      000222 86 F0            [24]  885 	mov	b,@r0
      000224 12r00r00         [24]  886 	lcall	__gptrget
      000227 FE               [12]  887 	mov	r6,a
      000228 A3               [24]  888 	inc	dptr
      000229 12r00r00         [24]  889 	lcall	__gptrget
      00022C FF               [12]  890 	mov	r7,a
      00022D EE               [12]  891 	mov	a,r6
      00022E 24 37            [12]  892 	add	a,#0x37
      000230 FE               [12]  893 	mov	r6,a
      000231 EF               [12]  894 	mov	a,r7
      000232 34 FF            [12]  895 	addc	a,#0xff
      000234 FF               [12]  896 	mov	r7,a
      000235 E5*00            [12]  897 	mov	a,_bp
      000237 24 08            [12]  898 	add	a,#0x08
      000239 F8               [12]  899 	mov	r0,a
      00023A 86 82            [24]  900 	mov	dpl,@r0
      00023C 08               [12]  901 	inc	r0
      00023D 86 83            [24]  902 	mov	dph,@r0
      00023F 08               [12]  903 	inc	r0
      000240 86 F0            [24]  904 	mov	b,@r0
      000242 EE               [12]  905 	mov	a,r6
      000243 12r00r00         [24]  906 	lcall	__gptrput
      000246 A3               [24]  907 	inc	dptr
      000247 EF               [12]  908 	mov	a,r7
      000248 12r00r00         [24]  909 	lcall	__gptrput
      00024B                        910 00110$:
                                    911 ;	walk.c:151: if (g[t->r][t->c] == 0xaau) return 0u;
      00024B A8*00            [24]  912 	mov	r0,_bp
      00024D 08               [12]  913 	inc	r0
      00024E 86 82            [24]  914 	mov	dpl,@r0
      000250 08               [12]  915 	inc	r0
      000251 86 83            [24]  916 	mov	dph,@r0
      000253 08               [12]  917 	inc	r0
      000254 86 F0            [24]  918 	mov	b,@r0
      000256 12r00r00         [24]  919 	lcall	__gptrget
      000259 FE               [12]  920 	mov	r6,a
      00025A A3               [24]  921 	inc	dptr
      00025B 12r00r00         [24]  922 	lcall	__gptrget
      00025E FF               [12]  923 	mov	r7,a
      00025F C0 06            [24]  924 	push	ar6
      000261 C0 07            [24]  925 	push	ar7
      000263 90 00 C9         [24]  926 	mov	dptr,#0x00c9
      000266 12r00r00         [24]  927 	lcall	__mulint
      000269 AE 82            [24]  928 	mov	r6,dpl
      00026B AF 83            [24]  929 	mov	r7,dph
      00026D 15 81            [12]  930 	dec	sp
      00026F 15 81            [12]  931 	dec	sp
      000271 EE               [12]  932 	mov	a,r6
      000272 24r00            [12]  933 	add	a,#_g
      000274 FE               [12]  934 	mov	r6,a
      000275 EF               [12]  935 	mov	a,r7
      000276 34s00            [12]  936 	addc	a,#(_g >> 8)
      000278 FF               [12]  937 	mov	r7,a
      000279 E5*00            [12]  938 	mov	a,_bp
      00027B 24 08            [12]  939 	add	a,#0x08
      00027D F8               [12]  940 	mov	r0,a
      00027E 86 82            [24]  941 	mov	dpl,@r0
      000280 08               [12]  942 	inc	r0
      000281 86 83            [24]  943 	mov	dph,@r0
      000283 08               [12]  944 	inc	r0
      000284 86 F0            [24]  945 	mov	b,@r0
      000286 12r00r00         [24]  946 	lcall	__gptrget
      000289 FC               [12]  947 	mov	r4,a
      00028A A3               [24]  948 	inc	dptr
      00028B 12r00r00         [24]  949 	lcall	__gptrget
      00028E FD               [12]  950 	mov	r5,a
      00028F EC               [12]  951 	mov	a,r4
      000290 2E               [12]  952 	add	a,r6
      000291 F5 82            [12]  953 	mov	dpl,a
      000293 ED               [12]  954 	mov	a,r5
      000294 3F               [12]  955 	addc	a,r7
      000295 F5 83            [12]  956 	mov	dph,a
      000297 E0               [24]  957 	movx	a,@dptr
      000298 FF               [12]  958 	mov	r7,a
      000299 BF AA 05         [24]  959 	cjne	r7,#0xaa,00114$
      00029C 75 82 00         [24]  960 	mov	dpl,#0x00
      00029F 80 59            [24]  961 	sjmp	00116$
      0002A1                        962 00114$:
                                    963 ;	walk.c:152: else if (g[t->r][t->c] != 0x55u) bang();
      0002A1 A8*00            [24]  964 	mov	r0,_bp
      0002A3 08               [12]  965 	inc	r0
      0002A4 86 82            [24]  966 	mov	dpl,@r0
      0002A6 08               [12]  967 	inc	r0
      0002A7 86 83            [24]  968 	mov	dph,@r0
      0002A9 08               [12]  969 	inc	r0
      0002AA 86 F0            [24]  970 	mov	b,@r0
      0002AC 12r00r00         [24]  971 	lcall	__gptrget
      0002AF FE               [12]  972 	mov	r6,a
      0002B0 A3               [24]  973 	inc	dptr
      0002B1 12r00r00         [24]  974 	lcall	__gptrget
      0002B4 FF               [12]  975 	mov	r7,a
      0002B5 C0 06            [24]  976 	push	ar6
      0002B7 C0 07            [24]  977 	push	ar7
      0002B9 90 00 C9         [24]  978 	mov	dptr,#0x00c9
      0002BC 12r00r00         [24]  979 	lcall	__mulint
      0002BF AE 82            [24]  980 	mov	r6,dpl
      0002C1 AF 83            [24]  981 	mov	r7,dph
      0002C3 15 81            [12]  982 	dec	sp
      0002C5 15 81            [12]  983 	dec	sp
      0002C7 EE               [12]  984 	mov	a,r6
      0002C8 24r00            [12]  985 	add	a,#_g
      0002CA FE               [12]  986 	mov	r6,a
      0002CB EF               [12]  987 	mov	a,r7
      0002CC 34s00            [12]  988 	addc	a,#(_g >> 8)
      0002CE FF               [12]  989 	mov	r7,a
      0002CF E5*00            [12]  990 	mov	a,_bp
      0002D1 24 08            [12]  991 	add	a,#0x08
      0002D3 F8               [12]  992 	mov	r0,a
      0002D4 86 82            [24]  993 	mov	dpl,@r0
      0002D6 08               [12]  994 	inc	r0
      0002D7 86 83            [24]  995 	mov	dph,@r0
      0002D9 08               [12]  996 	inc	r0
      0002DA 86 F0            [24]  997 	mov	b,@r0
      0002DC 12r00r00         [24]  998 	lcall	__gptrget
      0002DF FC               [12]  999 	mov	r4,a
      0002E0 A3               [24] 1000 	inc	dptr
      0002E1 12r00r00         [24] 1001 	lcall	__gptrget
      0002E4 FD               [12] 1002 	mov	r5,a
      0002E5 EC               [12] 1003 	mov	a,r4
      0002E6 2E               [12] 1004 	add	a,r6
      0002E7 F5 82            [12] 1005 	mov	dpl,a
      0002E9 ED               [12] 1006 	mov	a,r5
      0002EA 3F               [12] 1007 	addc	a,r7
      0002EB F5 83            [12] 1008 	mov	dph,a
      0002ED E0               [24] 1009 	movx	a,@dptr
      0002EE FF               [12] 1010 	mov	r7,a
      0002EF BF 55 02         [24] 1011 	cjne	r7,#0x55,00148$
      0002F2 80 03            [24] 1012 	sjmp	00115$
      0002F4                       1013 00148$:
      0002F4 12r00r1A         [24] 1014 	lcall	_bang
      0002F7                       1015 00115$:
                                   1016 ;	walk.c:154: return 1u;
      0002F7 75 82 01         [24] 1017 	mov	dpl,#0x01
      0002FA                       1018 00116$:
                                   1019 ;	walk.c:155: }
      0002FA 85*00 81         [24] 1020 	mov	sp,_bp
      0002FD D0*00            [24] 1021 	pop	_bp
      0002FF 22               [24] 1022 	ret
                                   1023 ;------------------------------------------------------------
                                   1024 ;Allocation info for local variables in function 'walk'
                                   1025 ;------------------------------------------------------------
                                   1026 ;nstart                    Allocated to registers r5 r6 r7 
                                   1027 ;cur                       Allocated to stack - _bp +7
                                   1028 ;t                         Allocated to stack - _bp +11
                                   1029 ;scramble                  Allocated to stack - _bp +15
                                   1030 ;ti                        Allocated to registers r2 
                                   1031 ;tj                        Allocated to registers r6 
                                   1032 ;tx                        Allocated to stack - _bp +31
                                   1033 ;j                         Allocated to stack - _bp +32
                                   1034 ;sloc0                     Allocated to stack - _bp +1
                                   1035 ;sloc1                     Allocated to stack - _bp +3
                                   1036 ;sloc2                     Allocated to stack - _bp +35
                                   1037 ;sloc3                     Allocated to stack - _bp +4
                                   1038 ;------------------------------------------------------------
                                   1039 ;	walk.c:157: static void walk(struct node *nstart) {
                                   1040 ;	-----------------------------------------
                                   1041 ;	 function walk
                                   1042 ;	-----------------------------------------
      000300                       1043 _walk:
      000300 C0*00            [24] 1044 	push	_bp
      000302 E5 81            [12] 1045 	mov	a,sp
      000304 F5*00            [12] 1046 	mov	_bp,a
      000306 24 20            [12] 1047 	add	a,#0x20
      000308 F5 81            [12] 1048 	mov	sp,a
                                   1049 ;	walk.c:162: if (!qadd(nstart)) bang();
      00030A AD 82            [24] 1050 	mov	r5,dpl
      00030C AE 83            [24] 1051 	mov	r6,dph
      00030E AF F0            [24] 1052 	mov	r7,b
      000310 C0 07            [24] 1053 	push	ar7
      000312 C0 06            [24] 1054 	push	ar6
      000314 C0 05            [24] 1055 	push	ar5
      000316 12r0Ar92         [24] 1056 	lcall	_qadd
      000319 E5 82            [12] 1057 	mov	a,dpl
      00031B D0 05            [24] 1058 	pop	ar5
      00031D D0 06            [24] 1059 	pop	ar6
      00031F D0 07            [24] 1060 	pop	ar7
      000321 70 0F            [24] 1061 	jnz	00102$
      000323 C0 07            [24] 1062 	push	ar7
      000325 C0 06            [24] 1063 	push	ar6
      000327 C0 05            [24] 1064 	push	ar5
      000329 12r00r1A         [24] 1065 	lcall	_bang
      00032C D0 05            [24] 1066 	pop	ar5
      00032E D0 06            [24] 1067 	pop	ar6
      000330 D0 07            [24] 1068 	pop	ar7
      000332                       1069 00102$:
                                   1070 ;	walk.c:163: g[nstart->r][nstart->c] = 0xaau;
      000332 8D 82            [24] 1071 	mov	dpl,r5
      000334 8E 83            [24] 1072 	mov	dph,r6
      000336 8F F0            [24] 1073 	mov	b,r7
      000338 12r00r00         [24] 1074 	lcall	__gptrget
      00033B FB               [12] 1075 	mov	r3,a
      00033C A3               [24] 1076 	inc	dptr
      00033D 12r00r00         [24] 1077 	lcall	__gptrget
      000340 FC               [12] 1078 	mov	r4,a
      000341 C0 07            [24] 1079 	push	ar7
      000343 C0 06            [24] 1080 	push	ar6
      000345 C0 05            [24] 1081 	push	ar5
      000347 C0 03            [24] 1082 	push	ar3
      000349 C0 04            [24] 1083 	push	ar4
      00034B 90 00 C9         [24] 1084 	mov	dptr,#0x00c9
      00034E 12r00r00         [24] 1085 	lcall	__mulint
      000351 AB 82            [24] 1086 	mov	r3,dpl
      000353 AC 83            [24] 1087 	mov	r4,dph
      000355 15 81            [12] 1088 	dec	sp
      000357 15 81            [12] 1089 	dec	sp
      000359 D0 05            [24] 1090 	pop	ar5
      00035B D0 06            [24] 1091 	pop	ar6
      00035D D0 07            [24] 1092 	pop	ar7
      00035F EB               [12] 1093 	mov	a,r3
      000360 24r00            [12] 1094 	add	a,#_g
      000362 FB               [12] 1095 	mov	r3,a
      000363 EC               [12] 1096 	mov	a,r4
      000364 34s00            [12] 1097 	addc	a,#(_g >> 8)
      000366 FC               [12] 1098 	mov	r4,a
      000367 74 02            [12] 1099 	mov	a,#0x02
      000369 2D               [12] 1100 	add	a,r5
      00036A FD               [12] 1101 	mov	r5,a
      00036B E4               [12] 1102 	clr	a
      00036C 3E               [12] 1103 	addc	a,r6
      00036D FE               [12] 1104 	mov	r6,a
      00036E 8D 82            [24] 1105 	mov	dpl,r5
      000370 8E 83            [24] 1106 	mov	dph,r6
      000372 8F F0            [24] 1107 	mov	b,r7
      000374 12r00r00         [24] 1108 	lcall	__gptrget
      000377 FD               [12] 1109 	mov	r5,a
      000378 A3               [24] 1110 	inc	dptr
      000379 12r00r00         [24] 1111 	lcall	__gptrget
      00037C FE               [12] 1112 	mov	r6,a
      00037D ED               [12] 1113 	mov	a,r5
      00037E 2B               [12] 1114 	add	a,r3
      00037F F5 82            [12] 1115 	mov	dpl,a
      000381 EE               [12] 1116 	mov	a,r6
      000382 3C               [12] 1117 	addc	a,r4
      000383 F5 83            [12] 1118 	mov	dph,a
      000385 74 AA            [12] 1119 	mov	a,#0xaa
      000387 F0               [24] 1120 	movx	@dptr,a
                                   1121 ;	walk.c:165: process:
      000388 E5*00            [12] 1122 	mov	a,_bp
      00038A 24 0F            [12] 1123 	add	a,#0x0f
      00038C FF               [12] 1124 	mov	r7,a
      00038D E5*00            [12] 1125 	mov	a,_bp
      00038F 24 0B            [12] 1126 	add	a,#0x0b
      000391 F9               [12] 1127 	mov	r1,a
      000392 E5*00            [12] 1128 	mov	a,_bp
      000394 24 03            [12] 1129 	add	a,#0x03
      000396 F8               [12] 1130 	mov	r0,a
      000397 A6 01            [24] 1131 	mov	@r0,ar1
      000399 74 02            [12] 1132 	mov	a,#0x02
      00039B 29               [12] 1133 	add	a,r1
      00039C F8               [12] 1134 	mov	r0,a
      00039D E5*00            [12] 1135 	mov	a,_bp
      00039F 24 07            [12] 1136 	add	a,#0x07
      0003A1 FD               [12] 1137 	mov	r5,a
      0003A2                       1138 00103$:
                                   1139 ;	walk.c:166: unsetOE(OE76_MASK7 | OE76_MASK6);
      0003A2 75 82 C0         [24] 1140 	mov	dpl,#0xc0
      0003A5 C0 07            [24] 1141 	push	ar7
      0003A7 C0 05            [24] 1142 	push	ar5
      0003A9 C0 01            [24] 1143 	push	ar1
      0003AB C0 00            [24] 1144 	push	ar0
      0003AD 12r00r40         [24] 1145 	lcall	_unsetOE
      0003B0 D0 00            [24] 1146 	pop	ar0
      0003B2 D0 01            [24] 1147 	pop	ar1
      0003B4 D0 05            [24] 1148 	pop	ar5
                                   1149 ;	walk.c:168: if (!qget(&cur)) goto term;
      0003B6 8D 02            [24] 1150 	mov	ar2,r5
      0003B8 7B 00            [12] 1151 	mov	r3,#0x00
      0003BA 7C 40            [12] 1152 	mov	r4,#0x40
      0003BC 8A 82            [24] 1153 	mov	dpl,r2
      0003BE 8B 83            [24] 1154 	mov	dph,r3
      0003C0 8C F0            [24] 1155 	mov	b,r4
      0003C2 C0 05            [24] 1156 	push	ar5
      0003C4 C0 01            [24] 1157 	push	ar1
      0003C6 C0 00            [24] 1158 	push	ar0
      0003C8 12r0Br84         [24] 1159 	lcall	_qget
      0003CB E5 82            [12] 1160 	mov	a,dpl
      0003CD D0 00            [24] 1161 	pop	ar0
      0003CF D0 01            [24] 1162 	pop	ar1
      0003D1 D0 05            [24] 1163 	pop	ar5
      0003D3 D0 07            [24] 1164 	pop	ar7
      0003D5 70 03            [24] 1165 	jnz	00184$
      0003D7 02r06rA3         [24] 1166 	ljmp	00119$
      0003DA                       1167 00184$:
                                   1168 ;	walk.c:170: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      0003DA 74 02            [12] 1169 	mov	a,#0x02
      0003DC 2D               [12] 1170 	add	a,r5
      0003DD FC               [12] 1171 	mov	r4,a
      0003DE C0 00            [24] 1172 	push	ar0
      0003E0 A8*00            [24] 1173 	mov	r0,_bp
      0003E2 08               [12] 1174 	inc	r0
      0003E3 C0 01            [24] 1175 	push	ar1
      0003E5 A9 04            [24] 1176 	mov	r1,ar4
      0003E7 E7               [12] 1177 	mov	a,@r1
      0003E8 F6               [12] 1178 	mov	@r0,a
      0003E9 09               [12] 1179 	inc	r1
      0003EA E7               [12] 1180 	mov	a,@r1
      0003EB 08               [12] 1181 	inc	r0
      0003EC F6               [12] 1182 	mov	@r0,a
      0003ED D0 01            [24] 1183 	pop	ar1
      0003EF A8 05            [24] 1184 	mov	r0,ar5
      0003F1 86 03            [24] 1185 	mov	ar3,@r0
      0003F3 08               [12] 1186 	inc	r0
      0003F4 86 06            [24] 1187 	mov	ar6,@r0
      0003F6 D0 00            [24] 1188 	pop	ar0
      0003F8 C0 07            [24] 1189 	push	ar7
      0003FA C0 05            [24] 1190 	push	ar5
      0003FC C0 04            [24] 1191 	push	ar4
      0003FE C0 01            [24] 1192 	push	ar1
      000400 C0 00            [24] 1193 	push	ar0
      000402 85 00 F0         [24] 1194 	mov	b,ar0
      000405 A8*00            [24] 1195 	mov	r0,_bp
      000407 08               [12] 1196 	inc	r0
      000408 E6               [12] 1197 	mov	a,@r0
      000409 C0 E0            [24] 1198 	push	acc
      00040B 08               [12] 1199 	inc	r0
      00040C E6               [12] 1200 	mov	a,@r0
      00040D C0 E0            [24] 1201 	push	acc
      00040F C0 03            [24] 1202 	push	ar3
      000411 C0 06            [24] 1203 	push	ar6
      000413 90rBCr72         [24] 1204 	mov	dptr,#_tp
      000416 E0               [24] 1205 	movx	a,@dptr
      000417 C0 E0            [24] 1206 	push	acc
      000419 A3               [24] 1207 	inc	dptr
      00041A E0               [24] 1208 	movx	a,@dptr
      00041B C0 E0            [24] 1209 	push	acc
      00041D 90rBCr70         [24] 1210 	mov	dptr,#_hp
      000420 E0               [24] 1211 	movx	a,@dptr
      000421 C0 E0            [24] 1212 	push	acc
      000423 A3               [24] 1213 	inc	dptr
      000424 E0               [24] 1214 	movx	a,@dptr
      000425 C0 E0            [24] 1215 	push	acc
      000427 74r0D            [12] 1216 	mov	a,#___str_1
      000429 C0 E0            [24] 1217 	push	acc
      00042B 74s00            [12] 1218 	mov	a,#(___str_1 >> 8)
      00042D C0 E0            [24] 1219 	push	acc
      00042F 74 80            [12] 1220 	mov	a,#0x80
      000431 C0 E0            [24] 1221 	push	acc
      000433 12r00r00         [24] 1222 	lcall	_printf
      000436 E5 81            [12] 1223 	mov	a,sp
      000438 24 F5            [12] 1224 	add	a,#0xf5
      00043A F5 81            [12] 1225 	mov	sp,a
      00043C D0 00            [24] 1226 	pop	ar0
      00043E D0 01            [24] 1227 	pop	ar1
      000440 D0 04            [24] 1228 	pop	ar4
      000442 D0 05            [24] 1229 	pop	ar5
      000444 D0 07            [24] 1230 	pop	ar7
                                   1231 ;	walk.c:172: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      000446 C0 00            [24] 1232 	push	ar0
      000448 A8 04            [24] 1233 	mov	r0,ar4
      00044A 86 04            [24] 1234 	mov	ar4,@r0
      00044C 08               [12] 1235 	inc	r0
      00044D 86 06            [24] 1236 	mov	ar6,@r0
      00044F D0 00            [24] 1237 	pop	ar0
      000451 0C               [12] 1238 	inc	r4
      000452 BC 00 01         [24] 1239 	cjne	r4,#0x00,00185$
      000455 0E               [12] 1240 	inc	r6
      000456                       1241 00185$:
      000456 C0 00            [24] 1242 	push	ar0
      000458 A8 05            [24] 1243 	mov	r0,ar5
      00045A 86 02            [24] 1244 	mov	ar2,@r0
      00045C 08               [12] 1245 	inc	r0
      00045D 86 03            [24] 1246 	mov	ar3,@r0
      00045F D0 00            [24] 1247 	pop	ar0
      000461 74 04            [12] 1248 	mov	a,#0x04
      000463 2A               [12] 1249 	add	a,r2
      000464 FA               [12] 1250 	mov	r2,a
      000465 E4               [12] 1251 	clr	a
      000466 3B               [12] 1252 	addc	a,r3
      000467 FB               [12] 1253 	mov	r3,a
      000468 C0 07            [24] 1254 	push	ar7
      00046A C0 05            [24] 1255 	push	ar5
      00046C C0 01            [24] 1256 	push	ar1
      00046E C0 00            [24] 1257 	push	ar0
      000470 C0 04            [24] 1258 	push	ar4
      000472 C0 06            [24] 1259 	push	ar6
      000474 C0 02            [24] 1260 	push	ar2
      000476 C0 03            [24] 1261 	push	ar3
      000478 74r24            [12] 1262 	mov	a,#___str_2
      00047A C0 E0            [24] 1263 	push	acc
      00047C 74s00            [12] 1264 	mov	a,#(___str_2 >> 8)
      00047E C0 E0            [24] 1265 	push	acc
      000480 74 80            [12] 1266 	mov	a,#0x80
      000482 C0 E0            [24] 1267 	push	acc
      000484 12r00r00         [24] 1268 	lcall	_printf
      000487 E5 81            [12] 1269 	mov	a,sp
      000489 24 F9            [12] 1270 	add	a,#0xf9
      00048B F5 81            [12] 1271 	mov	sp,a
                                   1272 ;	walk.c:173: setOE(OE76_MASK6);
      00048D 75 82 40         [24] 1273 	mov	dpl,#0x40
      000490 12r00r27         [24] 1274 	lcall	_setOE
      000493 D0 00            [24] 1275 	pop	ar0
      000495 D0 01            [24] 1276 	pop	ar1
      000497 D0 05            [24] 1277 	pop	ar5
      000499 D0 07            [24] 1278 	pop	ar7
                                   1279 ;	walk.c:175: for (j = 0u; j < NMAX; j++)
      00049B 7E 00            [12] 1280 	mov	r6,#0x00
                                   1281 ;	walk.c:202: return;
                                   1282 ;	walk.c:175: for (j = 0u; j < NMAX; j++)
      00049D                       1283 00120$:
                                   1284 ;	walk.c:176: scramble[j] = j;
      00049D EE               [12] 1285 	mov	a,r6
      00049E 2F               [12] 1286 	add	a,r7
      00049F C0 00            [24] 1287 	push	ar0
      0004A1 F8               [12] 1288 	mov	r0,a
      0004A2 A6 06            [24] 1289 	mov	@r0,ar6
      0004A4 D0 00            [24] 1290 	pop	ar0
                                   1291 ;	walk.c:175: for (j = 0u; j < NMAX; j++)
      0004A6 0E               [12] 1292 	inc	r6
      0004A7 BE 10 00         [24] 1293 	cjne	r6,#0x10,00186$
      0004AA                       1294 00186$:
      0004AA 40 F1            [24] 1295 	jc	00120$
                                   1296 ;	walk.c:178: do ti = (uint8_t)(rand() % NMAX);
      0004AC 7C 00            [12] 1297 	mov	r4,#0x00
      0004AE                       1298 00107$:
      0004AE C0 07            [24] 1299 	push	ar7
      0004B0 C0 05            [24] 1300 	push	ar5
      0004B2 C0 04            [24] 1301 	push	ar4
      0004B4 C0 01            [24] 1302 	push	ar1
      0004B6 C0 00            [24] 1303 	push	ar0
      0004B8 12r00r00         [24] 1304 	lcall	_rand
      0004BB AA 82            [24] 1305 	mov	r2,dpl
      0004BD D0 00            [24] 1306 	pop	ar0
      0004BF D0 01            [24] 1307 	pop	ar1
      0004C1 D0 04            [24] 1308 	pop	ar4
      0004C3 D0 05            [24] 1309 	pop	ar5
      0004C5 D0 07            [24] 1310 	pop	ar7
      0004C7 53 02 0F         [24] 1311 	anl	ar2,#0x0f
      0004CA 7B 00            [12] 1312 	mov	r3,#0x00
                                   1313 ;	walk.c:179: while (ti == j);
      0004CC EA               [12] 1314 	mov	a,r2
      0004CD B5 04 02         [24] 1315 	cjne	a,ar4,00188$
      0004D0 80 DC            [24] 1316 	sjmp	00107$
      0004D2                       1317 00188$:
                                   1318 ;	walk.c:180: do tj = (uint8_t)(rand() % NMAX);
      0004D2                       1319 00110$:
      0004D2 C0 05            [24] 1320 	push	ar5
      0004D4 C0 07            [24] 1321 	push	ar7
      0004D6 C0 04            [24] 1322 	push	ar4
      0004D8 C0 02            [24] 1323 	push	ar2
      0004DA C0 01            [24] 1324 	push	ar1
      0004DC C0 00            [24] 1325 	push	ar0
      0004DE 12r00r00         [24] 1326 	lcall	_rand
      0004E1 AB 82            [24] 1327 	mov	r3,dpl
      0004E3 D0 00            [24] 1328 	pop	ar0
      0004E5 D0 01            [24] 1329 	pop	ar1
      0004E7 D0 02            [24] 1330 	pop	ar2
      0004E9 D0 04            [24] 1331 	pop	ar4
      0004EB D0 07            [24] 1332 	pop	ar7
      0004ED 53 03 0F         [24] 1333 	anl	ar3,#0x0f
      0004F0 8B 06            [24] 1334 	mov	ar6,r3
                                   1335 ;	walk.c:181: while (ti == tj);
      0004F2 EA               [12] 1336 	mov	a,r2
      0004F3 B5 06 04         [24] 1337 	cjne	a,ar6,00189$
      0004F6 D0 05            [24] 1338 	pop	ar5
      0004F8 80 D8            [24] 1339 	sjmp	00110$
      0004FA                       1340 00189$:
                                   1341 ;	walk.c:182: tx = scramble[ti];
      0004FA EA               [12] 1342 	mov	a,r2
      0004FB 2F               [12] 1343 	add	a,r7
      0004FC FB               [12] 1344 	mov	r3,a
      0004FD C0 00            [24] 1345 	push	ar0
      0004FF E5*00            [12] 1346 	mov	a,_bp
      000501 24 1F            [12] 1347 	add	a,#0x1f
      000503 F8               [12] 1348 	mov	r0,a
      000504 C0 01            [24] 1349 	push	ar1
      000506 A9 03            [24] 1350 	mov	r1,ar3
      000508 E7               [12] 1351 	mov	a,@r1
      000509 F6               [12] 1352 	mov	@r0,a
                                   1353 ;	walk.c:183: scramble[ti] = scramble[tj];
      00050A EE               [12] 1354 	mov	a,r6
      00050B 2F               [12] 1355 	add	a,r7
      00050C FD               [12] 1356 	mov	r5,a
      00050D A8 05            [24] 1357 	mov	r0,ar5
      00050F 86 02            [24] 1358 	mov	ar2,@r0
      000511 A8 03            [24] 1359 	mov	r0,ar3
      000513 A6 02            [24] 1360 	mov	@r0,ar2
                                   1361 ;	walk.c:184: scramble[tj] = tx;
      000515 A8 05            [24] 1362 	mov	r0,ar5
      000517 E5*00            [12] 1363 	mov	a,_bp
      000519 24 1F            [12] 1364 	add	a,#0x1f
      00051B F9               [12] 1365 	mov	r1,a
      00051C E7               [12] 1366 	mov	a,@r1
      00051D F6               [12] 1367 	mov	@r0,a
      00051E D0 00            [24] 1368 	pop	ar0
      000520 D0 01            [24] 1369 	pop	ar1
                                   1370 ;	walk.c:177: for (j = 0u; j < NMAX; j++) {
      000522 0C               [12] 1371 	inc	r4
      000523 BC 10 00         [24] 1372 	cjne	r4,#0x10,00190$
      000526                       1373 00190$:
      000526 D0 05            [24] 1374 	pop	ar5
      000528 40 84            [24] 1375 	jc	00107$
                                   1376 ;	walk.c:187: for (j = 0u; j < NMAX; j++) {
      00052A C0 00            [24] 1377 	push	ar0
      00052C A8*00            [24] 1378 	mov	r0,_bp
      00052E 08               [12] 1379 	inc	r0
      00052F A6 05            [24] 1380 	mov	@r0,ar5
      000531 E5*00            [12] 1381 	mov	a,_bp
      000533 24 20            [12] 1382 	add	a,#0x20
      000535 F8               [12] 1383 	mov	r0,a
      000536 76 00            [12] 1384 	mov	@r0,#0x00
      000538 D0 00            [24] 1385 	pop	ar0
      00053A                       1386 00124$:
                                   1387 ;	walk.c:188: unsetOE(OE76_MASK7);
      00053A C0 05            [24] 1388 	push	ar5
      00053C 75 82 80         [24] 1389 	mov	dpl,#0x80
      00053F C0 07            [24] 1390 	push	ar7
      000541 C0 05            [24] 1391 	push	ar5
      000543 C0 01            [24] 1392 	push	ar1
      000545 C0 00            [24] 1393 	push	ar0
      000547 12r00r40         [24] 1394 	lcall	_unsetOE
      00054A D0 00            [24] 1395 	pop	ar0
      00054C D0 01            [24] 1396 	pop	ar1
      00054E D0 05            [24] 1397 	pop	ar5
      000550 D0 07            [24] 1398 	pop	ar7
                                   1399 ;	walk.c:190: if (update(&t, &cur, scramble[j])) {
      000552 C0 00            [24] 1400 	push	ar0
      000554 E5*00            [12] 1401 	mov	a,_bp
      000556 24 20            [12] 1402 	add	a,#0x20
      000558 F8               [12] 1403 	mov	r0,a
      000559 E6               [12] 1404 	mov	a,@r0
      00055A 2F               [12] 1405 	add	a,r7
      00055B FA               [12] 1406 	mov	r2,a
      00055C A8 02            [24] 1407 	mov	r0,ar2
      00055E 86 03            [24] 1408 	mov	ar3,@r0
      000560 A8*00            [24] 1409 	mov	r0,_bp
      000562 08               [12] 1410 	inc	r0
      000563 C0 01            [24] 1411 	push	ar1
      000565 E5*00            [12] 1412 	mov	a,_bp
      000567 24 04            [12] 1413 	add	a,#0x04
      000569 F9               [12] 1414 	mov	r1,a
      00056A E6               [12] 1415 	mov	a,@r0
      00056B F7               [12] 1416 	mov	@r1,a
      00056C 09               [12] 1417 	inc	r1
      00056D 77 00            [12] 1418 	mov	@r1,#0x00
      00056F 09               [12] 1419 	inc	r1
      000570 77 40            [12] 1420 	mov	@r1,#0x40
      000572 D0 01            [24] 1421 	pop	ar1
      000574 D0 00            [24] 1422 	pop	ar0
      000576 89 02            [24] 1423 	mov	ar2,r1
      000578 7C 00            [12] 1424 	mov	r4,#0x00
      00057A 7E 40            [12] 1425 	mov	r6,#0x40
      00057C C0 07            [24] 1426 	push	ar7
      00057E C0 05            [24] 1427 	push	ar5
      000580 C0 01            [24] 1428 	push	ar1
      000582 C0 00            [24] 1429 	push	ar0
      000584 C0 03            [24] 1430 	push	ar3
      000586 85 00 F0         [24] 1431 	mov	b,ar0
      000589 E5*00            [12] 1432 	mov	a,_bp
      00058B 24 04            [12] 1433 	add	a,#0x04
      00058D F8               [12] 1434 	mov	r0,a
      00058E E6               [12] 1435 	mov	a,@r0
      00058F C0 E0            [24] 1436 	push	acc
      000591 08               [12] 1437 	inc	r0
      000592 E6               [12] 1438 	mov	a,@r0
      000593 C0 E0            [24] 1439 	push	acc
      000595 08               [12] 1440 	inc	r0
      000596 E6               [12] 1441 	mov	a,@r0
      000597 C0 E0            [24] 1442 	push	acc
      000599 8A 82            [24] 1443 	mov	dpl,r2
      00059B 8C 83            [24] 1444 	mov	dph,r4
      00059D 8E F0            [24] 1445 	mov	b,r6
      00059F 12r00r73         [24] 1446 	lcall	_update
      0005A2 AE 82            [24] 1447 	mov	r6,dpl
      0005A4 E5 81            [12] 1448 	mov	a,sp
      0005A6 24 FC            [12] 1449 	add	a,#0xfc
      0005A8 F5 81            [12] 1450 	mov	sp,a
      0005AA D0 00            [24] 1451 	pop	ar0
      0005AC D0 01            [24] 1452 	pop	ar1
      0005AE D0 05            [24] 1453 	pop	ar5
      0005B0 D0 07            [24] 1454 	pop	ar7
      0005B2 D0 05            [24] 1455 	pop	ar5
      0005B4 EE               [12] 1456 	mov	a,r6
      0005B5 70 03            [24] 1457 	jnz	00192$
      0005B7 02r06r89         [24] 1458 	ljmp	00125$
      0005BA                       1459 00192$:
                                   1460 ;	walk.c:191: if (!qadd(&t)) bang();
      0005BA C0 00            [24] 1461 	push	ar0
      0005BC E5*00            [12] 1462 	mov	a,_bp
      0005BE 24 03            [12] 1463 	add	a,#0x03
      0005C0 F8               [12] 1464 	mov	r0,a
      0005C1 86 03            [24] 1465 	mov	ar3,@r0
      0005C3 7C 00            [12] 1466 	mov	r4,#0x00
      0005C5 7E 40            [12] 1467 	mov	r6,#0x40
      0005C7 D0 00            [24] 1468 	pop	ar0
      0005C9 8B 82            [24] 1469 	mov	dpl,r3
      0005CB 8C 83            [24] 1470 	mov	dph,r4
      0005CD 8E F0            [24] 1471 	mov	b,r6
      0005CF C0 07            [24] 1472 	push	ar7
      0005D1 C0 05            [24] 1473 	push	ar5
      0005D3 C0 01            [24] 1474 	push	ar1
      0005D5 C0 00            [24] 1475 	push	ar0
      0005D7 12r0Ar92         [24] 1476 	lcall	_qadd
      0005DA E5 82            [12] 1477 	mov	a,dpl
      0005DC D0 00            [24] 1478 	pop	ar0
      0005DE D0 01            [24] 1479 	pop	ar1
      0005E0 D0 05            [24] 1480 	pop	ar5
      0005E2 D0 07            [24] 1481 	pop	ar7
      0005E4 70 13            [24] 1482 	jnz	00115$
      0005E6 C0 07            [24] 1483 	push	ar7
      0005E8 C0 05            [24] 1484 	push	ar5
      0005EA C0 01            [24] 1485 	push	ar1
      0005EC C0 00            [24] 1486 	push	ar0
      0005EE 12r00r1A         [24] 1487 	lcall	_bang
      0005F1 D0 00            [24] 1488 	pop	ar0
      0005F3 D0 01            [24] 1489 	pop	ar1
      0005F5 D0 05            [24] 1490 	pop	ar5
      0005F7 D0 07            [24] 1491 	pop	ar7
      0005F9                       1492 00115$:
                                   1493 ;	walk.c:192: g[t.r][t.c] = 0xaau;
      0005F9 87 04            [24] 1494 	mov	ar4,@r1
      0005FB 09               [12] 1495 	inc	r1
      0005FC 87 06            [24] 1496 	mov	ar6,@r1
      0005FE 19               [12] 1497 	dec	r1
      0005FF C0 07            [24] 1498 	push	ar7
      000601 C0 05            [24] 1499 	push	ar5
      000603 C0 01            [24] 1500 	push	ar1
      000605 C0 00            [24] 1501 	push	ar0
      000607 C0 04            [24] 1502 	push	ar4
      000609 C0 06            [24] 1503 	push	ar6
      00060B 90 00 C9         [24] 1504 	mov	dptr,#0x00c9
      00060E 12r00r00         [24] 1505 	lcall	__mulint
      000611 AC 82            [24] 1506 	mov	r4,dpl
      000613 AE 83            [24] 1507 	mov	r6,dph
      000615 15 81            [12] 1508 	dec	sp
      000617 15 81            [12] 1509 	dec	sp
      000619 D0 00            [24] 1510 	pop	ar0
      00061B EC               [12] 1511 	mov	a,r4
      00061C 24r00            [12] 1512 	add	a,#_g
      00061E FC               [12] 1513 	mov	r4,a
      00061F EE               [12] 1514 	mov	a,r6
      000620 34s00            [12] 1515 	addc	a,#(_g >> 8)
      000622 FE               [12] 1516 	mov	r6,a
      000623 86 02            [24] 1517 	mov	ar2,@r0
      000625 08               [12] 1518 	inc	r0
      000626 86 03            [24] 1519 	mov	ar3,@r0
      000628 18               [12] 1520 	dec	r0
      000629 EA               [12] 1521 	mov	a,r2
      00062A 2C               [12] 1522 	add	a,r4
      00062B F5 82            [12] 1523 	mov	dpl,a
      00062D EB               [12] 1524 	mov	a,r3
      00062E 3E               [12] 1525 	addc	a,r6
      00062F F5 83            [12] 1526 	mov	dph,a
      000631 74 AA            [12] 1527 	mov	a,#0xaa
      000633 F0               [24] 1528 	movx	@dptr,a
                                   1529 ;	walk.c:194: setOE(OE76_MASK7);
      000634 75 82 80         [24] 1530 	mov	dpl,#0x80
      000637 C0 00            [24] 1531 	push	ar0
      000639 12r00r27         [24] 1532 	lcall	_setOE
      00063C D0 00            [24] 1533 	pop	ar0
      00063E D0 01            [24] 1534 	pop	ar1
      000640 D0 05            [24] 1535 	pop	ar5
      000642 D0 07            [24] 1536 	pop	ar7
                                   1537 ;	walk.c:195: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      000644 86 04            [24] 1538 	mov	ar4,@r0
      000646 08               [12] 1539 	inc	r0
      000647 86 06            [24] 1540 	mov	ar6,@r0
      000649 18               [12] 1541 	dec	r0
      00064A 0C               [12] 1542 	inc	r4
      00064B BC 00 01         [24] 1543 	cjne	r4,#0x00,00194$
      00064E 0E               [12] 1544 	inc	r6
      00064F                       1545 00194$:
      00064F 87 02            [24] 1546 	mov	ar2,@r1
      000651 09               [12] 1547 	inc	r1
      000652 87 03            [24] 1548 	mov	ar3,@r1
      000654 19               [12] 1549 	dec	r1
      000655 74 04            [12] 1550 	mov	a,#0x04
      000657 2A               [12] 1551 	add	a,r2
      000658 FA               [12] 1552 	mov	r2,a
      000659 E4               [12] 1553 	clr	a
      00065A 3B               [12] 1554 	addc	a,r3
      00065B FB               [12] 1555 	mov	r3,a
      00065C C0 07            [24] 1556 	push	ar7
      00065E C0 05            [24] 1557 	push	ar5
      000660 C0 01            [24] 1558 	push	ar1
      000662 C0 00            [24] 1559 	push	ar0
      000664 C0 04            [24] 1560 	push	ar4
      000666 C0 06            [24] 1561 	push	ar6
      000668 C0 02            [24] 1562 	push	ar2
      00066A C0 03            [24] 1563 	push	ar3
      00066C 74r2E            [12] 1564 	mov	a,#___str_3
      00066E C0 E0            [24] 1565 	push	acc
      000670 74s00            [12] 1566 	mov	a,#(___str_3 >> 8)
      000672 C0 E0            [24] 1567 	push	acc
      000674 74 80            [12] 1568 	mov	a,#0x80
      000676 C0 E0            [24] 1569 	push	acc
      000678 12r00r00         [24] 1570 	lcall	_printf
      00067B E5 81            [12] 1571 	mov	a,sp
      00067D 24 F9            [12] 1572 	add	a,#0xf9
      00067F F5 81            [12] 1573 	mov	sp,a
      000681 D0 00            [24] 1574 	pop	ar0
      000683 D0 01            [24] 1575 	pop	ar1
      000685 D0 05            [24] 1576 	pop	ar5
      000687 D0 07            [24] 1577 	pop	ar7
      000689                       1578 00125$:
                                   1579 ;	walk.c:187: for (j = 0u; j < NMAX; j++) {
      000689 C0 00            [24] 1580 	push	ar0
      00068B E5*00            [12] 1581 	mov	a,_bp
      00068D 24 20            [12] 1582 	add	a,#0x20
      00068F F8               [12] 1583 	mov	r0,a
      000690 06               [12] 1584 	inc	@r0
      000691 E5*00            [12] 1585 	mov	a,_bp
      000693 24 20            [12] 1586 	add	a,#0x20
      000695 F8               [12] 1587 	mov	r0,a
      000696 B6 10 00         [24] 1588 	cjne	@r0,#0x10,00195$
      000699                       1589 00195$:
      000699 D0 00            [24] 1590 	pop	ar0
      00069B 50 03            [24] 1591 	jnc	00196$
      00069D 02r05r3A         [24] 1592 	ljmp	00124$
      0006A0                       1593 00196$:
                                   1594 ;	walk.c:199: goto process;
      0006A0 02r03rA2         [24] 1595 	ljmp	00103$
                                   1596 ;	walk.c:201: term:
      0006A3                       1597 00119$:
                                   1598 ;	walk.c:202: return;
                                   1599 ;	walk.c:203: }
      0006A3 85*00 81         [24] 1600 	mov	sp,_bp
      0006A6 D0*00            [24] 1601 	pop	_bp
      0006A8 22               [24] 1602 	ret
                                   1603 ;------------------------------------------------------------
                                   1604 ;Allocation info for local variables in function 'main'
                                   1605 ;------------------------------------------------------------
                                   1606 ;initial                   Allocated to stack - _bp +5
                                   1607 ;N                         Allocated to stack - _bp +9
                                   1608 ;i                         Allocated to stack - _bp +11
                                   1609 ;j                         Allocated to registers r2 r6 
                                   1610 ;sloc0                     Allocated to stack - _bp +1
                                   1611 ;sloc1                     Allocated to stack - _bp +3
                                   1612 ;sloc2                     Allocated to stack - _bp +15
                                   1613 ;------------------------------------------------------------
                                   1614 ;	walk.c:205: void main(void) {
                                   1615 ;	-----------------------------------------
                                   1616 ;	 function main
                                   1617 ;	-----------------------------------------
      0006A9                       1618 _main:
      0006A9 C0*00            [24] 1619 	push	_bp
      0006AB E5 81            [12] 1620 	mov	a,sp
      0006AD F5*00            [12] 1621 	mov	_bp,a
      0006AF 24 0C            [12] 1622 	add	a,#0x0c
      0006B1 F5 81            [12] 1623 	mov	sp,a
                                   1624 ;	walk.c:210: i0 = 1u;
      0006B3 78r00            [12] 1625 	mov	r0,#_i0
      0006B5 76 01            [12] 1626 	mov	@r0,#0x01
                                   1627 ;	walk.c:212: P1_7 = 1;
                                   1628 ;	assignBit
      0006B7 D2 97            [12] 1629 	setb	_P1_7
                                   1630 ;	walk.c:213: IT0 = 1;
                                   1631 ;	assignBit
      0006B9 D2 88            [12] 1632 	setb	_IT0
                                   1633 ;	walk.c:214: EX0 = 1;
                                   1634 ;	assignBit
      0006BB D2 A8            [12] 1635 	setb	_EX0
                                   1636 ;	walk.c:215: EA = 1;
                                   1637 ;	assignBit
      0006BD D2 AF            [12] 1638 	setb	_EA
                                   1639 ;	walk.c:217: srand(RND);
      0006BF 90 80 00         [24] 1640 	mov	dptr,#_RND
      0006C2 E0               [24] 1641 	movx	a,@dptr
      0006C3 FE               [12] 1642 	mov	r6,a
      0006C4 A3               [24] 1643 	inc	dptr
      0006C5 E0               [24] 1644 	movx	a,@dptr
      0006C6 FF               [12] 1645 	mov	r7,a
      0006C7 8E 82            [24] 1646 	mov	dpl,r6
      0006C9 8F 83            [24] 1647 	mov	dph,r7
      0006CB 12r00r00         [24] 1648 	lcall	_srand
                                   1649 ;	walk.c:218: qinit();
      0006CE 12r0Ar84         [24] 1650 	lcall	_qinit
                                   1651 ;	walk.c:220: puts("\033[2J\033[?25l");
      0006D1 90r00r38         [24] 1652 	mov	dptr,#___str_4
      0006D4 75 F0 80         [24] 1653 	mov	b,#0x80
      0006D7 12r00r00         [24] 1654 	lcall	_puts
                                   1655 ;	walk.c:222: while (i0) {
      0006DA E5*00            [12] 1656 	mov	a,_bp
      0006DC 24 05            [12] 1657 	add	a,#0x05
      0006DE F9               [12] 1658 	mov	r1,a
      0006DF FF               [12] 1659 	mov	r7,a
      0006E0 E5*00            [12] 1660 	mov	a,_bp
      0006E2 24 09            [12] 1661 	add	a,#0x09
      0006E4 F8               [12] 1662 	mov	r0,a
      0006E5 E4               [12] 1663 	clr	a
      0006E6 F6               [12] 1664 	mov	@r0,a
      0006E7 08               [12] 1665 	inc	r0
      0006E8 F6               [12] 1666 	mov	@r0,a
      0006E9                       1667 00108$:
      0006E9 78r00            [12] 1668 	mov	r0,#_i0
      0006EB E6               [12] 1669 	mov	a,@r0
      0006EC 70 03            [24] 1670 	jnz	00182$
      0006EE 02r0Ar70         [24] 1671 	ljmp	00110$
      0006F1                       1672 00182$:
                                   1673 ;	walk.c:223: for (i = 0; i < ROWS; i++)
      0006F1 7B 00            [12] 1674 	mov	r3,#0x00
      0006F3 7C 00            [12] 1675 	mov	r4,#0x00
      0006F5 A8*00            [24] 1676 	mov	r0,_bp
      0006F7 08               [12] 1677 	inc	r0
      0006F8 E4               [12] 1678 	clr	a
      0006F9 F6               [12] 1679 	mov	@r0,a
      0006FA 08               [12] 1680 	inc	r0
      0006FB F6               [12] 1681 	mov	@r0,a
                                   1682 ;	walk.c:224: for (j = 0; j < COLS; j++)
      0006FC                       1683 00125$:
      0006FC A8*00            [24] 1684 	mov	r0,_bp
      0006FE 08               [12] 1685 	inc	r0
      0006FF C0 01            [24] 1686 	push	ar1
      000701 E5*00            [12] 1687 	mov	a,_bp
      000703 24 03            [12] 1688 	add	a,#0x03
      000705 F9               [12] 1689 	mov	r1,a
      000706 E6               [12] 1690 	mov	a,@r0
      000707 24r00            [12] 1691 	add	a,#_g
      000709 F7               [12] 1692 	mov	@r1,a
      00070A 08               [12] 1693 	inc	r0
      00070B E6               [12] 1694 	mov	a,@r0
      00070C 34s00            [12] 1695 	addc	a,#(_g >> 8)
      00070E 09               [12] 1696 	inc	r1
      00070F F7               [12] 1697 	mov	@r1,a
      000710 D0 01            [24] 1698 	pop	ar1
      000712 7A 00            [12] 1699 	mov	r2,#0x00
      000714 7E 00            [12] 1700 	mov	r6,#0x00
      000716                       1701 00112$:
                                   1702 ;	walk.c:225: g[i][j] = 0x55u;
      000716 E5*00            [12] 1703 	mov	a,_bp
      000718 24 03            [12] 1704 	add	a,#0x03
      00071A F8               [12] 1705 	mov	r0,a
      00071B EA               [12] 1706 	mov	a,r2
      00071C 26               [12] 1707 	add	a,@r0
      00071D F5 82            [12] 1708 	mov	dpl,a
      00071F EE               [12] 1709 	mov	a,r6
      000720 08               [12] 1710 	inc	r0
      000721 36               [12] 1711 	addc	a,@r0
      000722 F5 83            [12] 1712 	mov	dph,a
      000724 74 55            [12] 1713 	mov	a,#0x55
      000726 F0               [24] 1714 	movx	@dptr,a
                                   1715 ;	walk.c:224: for (j = 0; j < COLS; j++)
      000727 0A               [12] 1716 	inc	r2
      000728 BA 00 01         [24] 1717 	cjne	r2,#0x00,00183$
      00072B 0E               [12] 1718 	inc	r6
      00072C                       1719 00183$:
      00072C C3               [12] 1720 	clr	c
      00072D EA               [12] 1721 	mov	a,r2
      00072E 94 C9            [12] 1722 	subb	a,#0xc9
      000730 EE               [12] 1723 	mov	a,r6
      000731 64 80            [12] 1724 	xrl	a,#0x80
      000733 94 80            [12] 1725 	subb	a,#0x80
      000735 40 DF            [24] 1726 	jc	00112$
                                   1727 ;	walk.c:223: for (i = 0; i < ROWS; i++)
      000737 A8*00            [24] 1728 	mov	r0,_bp
      000739 08               [12] 1729 	inc	r0
      00073A 74 C9            [12] 1730 	mov	a,#0xc9
      00073C 26               [12] 1731 	add	a,@r0
      00073D F6               [12] 1732 	mov	@r0,a
      00073E E4               [12] 1733 	clr	a
      00073F 08               [12] 1734 	inc	r0
      000740 36               [12] 1735 	addc	a,@r0
      000741 F6               [12] 1736 	mov	@r0,a
      000742 0B               [12] 1737 	inc	r3
      000743 BB 00 01         [24] 1738 	cjne	r3,#0x00,00185$
      000746 0C               [12] 1739 	inc	r4
      000747                       1740 00185$:
      000747 C3               [12] 1741 	clr	c
      000748 EB               [12] 1742 	mov	a,r3
      000749 94 30            [12] 1743 	subb	a,#0x30
      00074B EC               [12] 1744 	mov	a,r4
      00074C 64 80            [12] 1745 	xrl	a,#0x80
      00074E 94 80            [12] 1746 	subb	a,#0x80
      000750 40 AA            [24] 1747 	jc	00125$
                                   1748 ;	walk.c:227: initial.r = rand() % ROWS;
      000752 E5*00            [12] 1749 	mov	a,_bp
      000754 24 05            [12] 1750 	add	a,#0x05
      000756 F8               [12] 1751 	mov	r0,a
      000757 C0 07            [24] 1752 	push	ar7
      000759 C0 01            [24] 1753 	push	ar1
      00075B C0 00            [24] 1754 	push	ar0
      00075D 12r00r00         [24] 1755 	lcall	_rand
      000760 AD 82            [24] 1756 	mov	r5,dpl
      000762 AE 83            [24] 1757 	mov	r6,dph
      000764 74 30            [12] 1758 	mov	a,#0x30
      000766 C0 E0            [24] 1759 	push	acc
      000768 E4               [12] 1760 	clr	a
      000769 C0 E0            [24] 1761 	push	acc
      00076B 8D 82            [24] 1762 	mov	dpl,r5
      00076D 8E 83            [24] 1763 	mov	dph,r6
      00076F 12r00r00         [24] 1764 	lcall	__modsint
      000772 AD 82            [24] 1765 	mov	r5,dpl
      000774 AE 83            [24] 1766 	mov	r6,dph
      000776 15 81            [12] 1767 	dec	sp
      000778 15 81            [12] 1768 	dec	sp
      00077A D0 00            [24] 1769 	pop	ar0
      00077C D0 01            [24] 1770 	pop	ar1
      00077E A6 05            [24] 1771 	mov	@r0,ar5
      000780 08               [12] 1772 	inc	r0
      000781 A6 06            [24] 1773 	mov	@r0,ar6
      000783 18               [12] 1774 	dec	r0
                                   1775 ;	walk.c:228: initial.c = rand() % COLS;
      000784 74 02            [12] 1776 	mov	a,#0x02
      000786 29               [12] 1777 	add	a,r1
      000787 F8               [12] 1778 	mov	r0,a
      000788 C0 01            [24] 1779 	push	ar1
      00078A C0 00            [24] 1780 	push	ar0
      00078C 12r00r00         [24] 1781 	lcall	_rand
      00078F AD 82            [24] 1782 	mov	r5,dpl
      000791 AE 83            [24] 1783 	mov	r6,dph
      000793 74 C9            [12] 1784 	mov	a,#0xc9
      000795 C0 E0            [24] 1785 	push	acc
      000797 E4               [12] 1786 	clr	a
      000798 C0 E0            [24] 1787 	push	acc
      00079A 8D 82            [24] 1788 	mov	dpl,r5
      00079C 8E 83            [24] 1789 	mov	dph,r6
      00079E 12r00r00         [24] 1790 	lcall	__modsint
      0007A1 AD 82            [24] 1791 	mov	r5,dpl
      0007A3 AE 83            [24] 1792 	mov	r6,dph
      0007A5 15 81            [12] 1793 	dec	sp
      0007A7 15 81            [12] 1794 	dec	sp
      0007A9 D0 00            [24] 1795 	pop	ar0
      0007AB A6 05            [24] 1796 	mov	@r0,ar5
      0007AD 08               [12] 1797 	inc	r0
      0007AE A6 06            [24] 1798 	mov	@r0,ar6
      0007B0 18               [12] 1799 	dec	r0
                                   1800 ;	walk.c:230: puts("\033[2J\033[?25l");
      0007B1 90r00r38         [24] 1801 	mov	dptr,#___str_4
      0007B4 75 F0 80         [24] 1802 	mov	b,#0x80
      0007B7 C0 00            [24] 1803 	push	ar0
      0007B9 12r00r00         [24] 1804 	lcall	_puts
      0007BC D0 00            [24] 1805 	pop	ar0
      0007BE D0 01            [24] 1806 	pop	ar1
                                   1807 ;	walk.c:231: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      0007C0 86 05            [24] 1808 	mov	ar5,@r0
      0007C2 08               [12] 1809 	inc	r0
      0007C3 86 06            [24] 1810 	mov	ar6,@r0
      0007C5 18               [12] 1811 	dec	r0
      0007C6 87 03            [24] 1812 	mov	ar3,@r1
      0007C8 09               [12] 1813 	inc	r1
      0007C9 87 04            [24] 1814 	mov	ar4,@r1
      0007CB 19               [12] 1815 	dec	r1
      0007CC C0 01            [24] 1816 	push	ar1
      0007CE C0 05            [24] 1817 	push	ar5
      0007D0 C0 06            [24] 1818 	push	ar6
      0007D2 C0 03            [24] 1819 	push	ar3
      0007D4 C0 04            [24] 1820 	push	ar4
      0007D6 E5*00            [12] 1821 	mov	a,_bp
      0007D8 24 09            [12] 1822 	add	a,#0x09
      0007DA F8               [12] 1823 	mov	r0,a
      0007DB E6               [12] 1824 	mov	a,@r0
      0007DC C0 E0            [24] 1825 	push	acc
      0007DE 08               [12] 1826 	inc	r0
      0007DF E6               [12] 1827 	mov	a,@r0
      0007E0 C0 E0            [24] 1828 	push	acc
      0007E2 74r43            [12] 1829 	mov	a,#___str_5
      0007E4 C0 E0            [24] 1830 	push	acc
      0007E6 74s00            [12] 1831 	mov	a,#(___str_5 >> 8)
      0007E8 C0 E0            [24] 1832 	push	acc
      0007EA 74 80            [12] 1833 	mov	a,#0x80
      0007EC C0 E0            [24] 1834 	push	acc
      0007EE 12r00r00         [24] 1835 	lcall	_printf
      0007F1 E5 81            [12] 1836 	mov	a,sp
      0007F3 24 F7            [12] 1837 	add	a,#0xf7
      0007F5 F5 81            [12] 1838 	mov	sp,a
      0007F7 D0 01            [24] 1839 	pop	ar1
      0007F9 D0 07            [24] 1840 	pop	ar7
                                   1841 ;	walk.c:233: for (i = 0; i < REG; i++) {
      0007FB E5*00            [12] 1842 	mov	a,_bp
      0007FD 24 0B            [12] 1843 	add	a,#0x0b
      0007FF F8               [12] 1844 	mov	r0,a
      000800 E4               [12] 1845 	clr	a
      000801 F6               [12] 1846 	mov	@r0,a
      000802 08               [12] 1847 	inc	r0
      000803 F6               [12] 1848 	mov	@r0,a
      000804                       1849 00116$:
                                   1850 ;	walk.c:234: neigh[i].r = neigh[REG + i].r * (1 + rand() % 32);
      000804 C0 07            [24] 1851 	push	ar7
      000806 E5*00            [12] 1852 	mov	a,_bp
      000808 24 0B            [12] 1853 	add	a,#0x0b
      00080A F8               [12] 1854 	mov	r0,a
      00080B E6               [12] 1855 	mov	a,@r0
      00080C 25 E0            [12] 1856 	add	a,acc
      00080E FB               [12] 1857 	mov	r3,a
      00080F 08               [12] 1858 	inc	r0
      000810 E6               [12] 1859 	mov	a,@r0
      000811 33               [12] 1860 	rlc	a
      000812 FC               [12] 1861 	mov	r4,a
      000813 EB               [12] 1862 	mov	a,r3
      000814 2B               [12] 1863 	add	a,r3
      000815 FB               [12] 1864 	mov	r3,a
      000816 EC               [12] 1865 	mov	a,r4
      000817 33               [12] 1866 	rlc	a
      000818 FC               [12] 1867 	mov	r4,a
      000819 E5*00            [12] 1868 	mov	a,_bp
      00081B 24 03            [12] 1869 	add	a,#0x03
      00081D F8               [12] 1870 	mov	r0,a
      00081E EB               [12] 1871 	mov	a,r3
      00081F 24r00            [12] 1872 	add	a,#_neigh
      000821 F6               [12] 1873 	mov	@r0,a
      000822 EC               [12] 1874 	mov	a,r4
      000823 34s00            [12] 1875 	addc	a,#(_neigh >> 8)
      000825 08               [12] 1876 	inc	r0
      000826 F6               [12] 1877 	mov	@r0,a
      000827 E5*00            [12] 1878 	mov	a,_bp
      000829 24 0B            [12] 1879 	add	a,#0x0b
      00082B F8               [12] 1880 	mov	r0,a
      00082C 86 06            [24] 1881 	mov	ar6,@r0
      00082E 74 08            [12] 1882 	mov	a,#0x08
      000830 2E               [12] 1883 	add	a,r6
      000831 FE               [12] 1884 	mov	r6,a
      000832 C2 D5            [12] 1885 	clr	F0
      000834 75 F0 04         [24] 1886 	mov	b,#0x04
      000837 EE               [12] 1887 	mov	a,r6
      000838 30 E7 04         [24] 1888 	jnb	acc.7,00187$
      00083B B2 D5            [12] 1889 	cpl	F0
      00083D F4               [12] 1890 	cpl	a
      00083E 04               [12] 1891 	inc	a
      00083F                       1892 00187$:
      00083F A4               [48] 1893 	mul	ab
      000840 30 D5 0A         [24] 1894 	jnb	F0,00188$
      000843 F4               [12] 1895 	cpl	a
      000844 24 01            [12] 1896 	add	a,#0x01
      000846 C5 F0            [12] 1897 	xch	a,b
      000848 F4               [12] 1898 	cpl	a
      000849 34 00            [12] 1899 	addc	a,#0x00
      00084B C5 F0            [12] 1900 	xch	a,b
      00084D                       1901 00188$:
      00084D FE               [12] 1902 	mov	r6,a
      00084E AD F0            [24] 1903 	mov	r5,b
      000850 24r00            [12] 1904 	add	a,#_neigh
      000852 F5 82            [12] 1905 	mov	dpl,a
      000854 ED               [12] 1906 	mov	a,r5
      000855 34s00            [12] 1907 	addc	a,#(_neigh >> 8)
      000857 F5 83            [12] 1908 	mov	dph,a
      000859 A8*00            [24] 1909 	mov	r0,_bp
      00085B 08               [12] 1910 	inc	r0
      00085C E0               [24] 1911 	movx	a,@dptr
      00085D F6               [12] 1912 	mov	@r0,a
      00085E A3               [24] 1913 	inc	dptr
      00085F E0               [24] 1914 	movx	a,@dptr
      000860 08               [12] 1915 	inc	r0
      000861 F6               [12] 1916 	mov	@r0,a
      000862 C0 06            [24] 1917 	push	ar6
      000864 C0 05            [24] 1918 	push	ar5
      000866 C0 04            [24] 1919 	push	ar4
      000868 C0 03            [24] 1920 	push	ar3
      00086A C0 01            [24] 1921 	push	ar1
      00086C 12r00r00         [24] 1922 	lcall	_rand
      00086F AA 82            [24] 1923 	mov	r2,dpl
      000871 AF 83            [24] 1924 	mov	r7,dph
      000873 74 20            [12] 1925 	mov	a,#0x20
      000875 C0 E0            [24] 1926 	push	acc
      000877 E4               [12] 1927 	clr	a
      000878 C0 E0            [24] 1928 	push	acc
      00087A 8A 82            [24] 1929 	mov	dpl,r2
      00087C 8F 83            [24] 1930 	mov	dph,r7
      00087E 12r00r00         [24] 1931 	lcall	__modsint
      000881 AA 82            [24] 1932 	mov	r2,dpl
      000883 AF 83            [24] 1933 	mov	r7,dph
      000885 15 81            [12] 1934 	dec	sp
      000887 15 81            [12] 1935 	dec	sp
      000889 D0 01            [24] 1936 	pop	ar1
      00088B D0 03            [24] 1937 	pop	ar3
      00088D D0 04            [24] 1938 	pop	ar4
      00088F D0 05            [24] 1939 	pop	ar5
      000891 D0 06            [24] 1940 	pop	ar6
      000893 0A               [12] 1941 	inc	r2
      000894 BA 00 01         [24] 1942 	cjne	r2,#0x00,00189$
      000897 0F               [12] 1943 	inc	r7
      000898                       1944 00189$:
      000898 C0 06            [24] 1945 	push	ar6
      00089A C0 05            [24] 1946 	push	ar5
      00089C C0 04            [24] 1947 	push	ar4
      00089E C0 03            [24] 1948 	push	ar3
      0008A0 C0 01            [24] 1949 	push	ar1
      0008A2 C0 02            [24] 1950 	push	ar2
      0008A4 C0 07            [24] 1951 	push	ar7
      0008A6 A8*00            [24] 1952 	mov	r0,_bp
      0008A8 08               [12] 1953 	inc	r0
      0008A9 86 82            [24] 1954 	mov	dpl,@r0
      0008AB 08               [12] 1955 	inc	r0
      0008AC 86 83            [24] 1956 	mov	dph,@r0
      0008AE 12r00r00         [24] 1957 	lcall	__mulint
      0008B1 AA 82            [24] 1958 	mov	r2,dpl
      0008B3 AF 83            [24] 1959 	mov	r7,dph
      0008B5 15 81            [12] 1960 	dec	sp
      0008B7 15 81            [12] 1961 	dec	sp
      0008B9 D0 01            [24] 1962 	pop	ar1
      0008BB D0 03            [24] 1963 	pop	ar3
      0008BD D0 04            [24] 1964 	pop	ar4
      0008BF D0 05            [24] 1965 	pop	ar5
      0008C1 D0 06            [24] 1966 	pop	ar6
      0008C3 E5*00            [12] 1967 	mov	a,_bp
      0008C5 24 03            [12] 1968 	add	a,#0x03
      0008C7 F8               [12] 1969 	mov	r0,a
      0008C8 86 82            [24] 1970 	mov	dpl,@r0
      0008CA 08               [12] 1971 	inc	r0
      0008CB 86 83            [24] 1972 	mov	dph,@r0
      0008CD EA               [12] 1973 	mov	a,r2
      0008CE F0               [24] 1974 	movx	@dptr,a
      0008CF EF               [12] 1975 	mov	a,r7
      0008D0 A3               [24] 1976 	inc	dptr
      0008D1 F0               [24] 1977 	movx	@dptr,a
                                   1978 ;	walk.c:235: neigh[i].c = neigh[REG + i].c * (1 + rand() % 32);
      0008D2 EB               [12] 1979 	mov	a,r3
      0008D3 24r00            [12] 1980 	add	a,#_neigh
      0008D5 FB               [12] 1981 	mov	r3,a
      0008D6 EC               [12] 1982 	mov	a,r4
      0008D7 34s00            [12] 1983 	addc	a,#(_neigh >> 8)
      0008D9 FC               [12] 1984 	mov	r4,a
      0008DA 74 02            [12] 1985 	mov	a,#0x02
      0008DC 2B               [12] 1986 	add	a,r3
      0008DD FA               [12] 1987 	mov	r2,a
      0008DE E4               [12] 1988 	clr	a
      0008DF 3C               [12] 1989 	addc	a,r4
      0008E0 FF               [12] 1990 	mov	r7,a
      0008E1 EE               [12] 1991 	mov	a,r6
      0008E2 24r00            [12] 1992 	add	a,#_neigh
      0008E4 FE               [12] 1993 	mov	r6,a
      0008E5 ED               [12] 1994 	mov	a,r5
      0008E6 34s00            [12] 1995 	addc	a,#(_neigh >> 8)
      0008E8 FD               [12] 1996 	mov	r5,a
      0008E9 8E 82            [24] 1997 	mov	dpl,r6
      0008EB 8D 83            [24] 1998 	mov	dph,r5
      0008ED A3               [24] 1999 	inc	dptr
      0008EE A3               [24] 2000 	inc	dptr
      0008EF E5*00            [12] 2001 	mov	a,_bp
      0008F1 24 03            [12] 2002 	add	a,#0x03
      0008F3 F8               [12] 2003 	mov	r0,a
      0008F4 E0               [24] 2004 	movx	a,@dptr
      0008F5 F6               [12] 2005 	mov	@r0,a
      0008F6 A3               [24] 2006 	inc	dptr
      0008F7 E0               [24] 2007 	movx	a,@dptr
      0008F8 08               [12] 2008 	inc	r0
      0008F9 F6               [12] 2009 	mov	@r0,a
      0008FA C0 07            [24] 2010 	push	ar7
      0008FC C0 04            [24] 2011 	push	ar4
      0008FE C0 03            [24] 2012 	push	ar3
      000900 C0 02            [24] 2013 	push	ar2
      000902 C0 01            [24] 2014 	push	ar1
      000904 12r00r00         [24] 2015 	lcall	_rand
      000907 AD 82            [24] 2016 	mov	r5,dpl
      000909 AE 83            [24] 2017 	mov	r6,dph
      00090B 74 20            [12] 2018 	mov	a,#0x20
      00090D C0 E0            [24] 2019 	push	acc
      00090F E4               [12] 2020 	clr	a
      000910 C0 E0            [24] 2021 	push	acc
      000912 8D 82            [24] 2022 	mov	dpl,r5
      000914 8E 83            [24] 2023 	mov	dph,r6
      000916 12r00r00         [24] 2024 	lcall	__modsint
      000919 AD 82            [24] 2025 	mov	r5,dpl
      00091B AE 83            [24] 2026 	mov	r6,dph
      00091D 15 81            [12] 2027 	dec	sp
      00091F 15 81            [12] 2028 	dec	sp
      000921 D0 01            [24] 2029 	pop	ar1
      000923 D0 02            [24] 2030 	pop	ar2
      000925 D0 03            [24] 2031 	pop	ar3
      000927 D0 04            [24] 2032 	pop	ar4
      000929 D0 07            [24] 2033 	pop	ar7
      00092B 0D               [12] 2034 	inc	r5
      00092C BD 00 01         [24] 2035 	cjne	r5,#0x00,00190$
      00092F 0E               [12] 2036 	inc	r6
      000930                       2037 00190$:
      000930 C0 07            [24] 2038 	push	ar7
      000932 C0 04            [24] 2039 	push	ar4
      000934 C0 03            [24] 2040 	push	ar3
      000936 C0 02            [24] 2041 	push	ar2
      000938 C0 01            [24] 2042 	push	ar1
      00093A C0 05            [24] 2043 	push	ar5
      00093C C0 06            [24] 2044 	push	ar6
      00093E E5*00            [12] 2045 	mov	a,_bp
      000940 24 03            [12] 2046 	add	a,#0x03
      000942 F8               [12] 2047 	mov	r0,a
      000943 86 82            [24] 2048 	mov	dpl,@r0
      000945 08               [12] 2049 	inc	r0
      000946 86 83            [24] 2050 	mov	dph,@r0
      000948 12r00r00         [24] 2051 	lcall	__mulint
      00094B AD 82            [24] 2052 	mov	r5,dpl
      00094D AE 83            [24] 2053 	mov	r6,dph
      00094F 15 81            [12] 2054 	dec	sp
      000951 15 81            [12] 2055 	dec	sp
      000953 D0 01            [24] 2056 	pop	ar1
      000955 D0 02            [24] 2057 	pop	ar2
      000957 D0 03            [24] 2058 	pop	ar3
      000959 D0 04            [24] 2059 	pop	ar4
      00095B D0 07            [24] 2060 	pop	ar7
      00095D 8A 82            [24] 2061 	mov	dpl,r2
      00095F 8F 83            [24] 2062 	mov	dph,r7
      000961 ED               [12] 2063 	mov	a,r5
      000962 F0               [24] 2064 	movx	@dptr,a
      000963 EE               [12] 2065 	mov	a,r6
      000964 A3               [24] 2066 	inc	dptr
      000965 F0               [24] 2067 	movx	@dptr,a
                                   2068 ;	walk.c:236: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000966 8B 82            [24] 2069 	mov	dpl,r3
      000968 8C 83            [24] 2070 	mov	dph,r4
      00096A E0               [24] 2071 	movx	a,@dptr
      00096B FB               [12] 2072 	mov	r3,a
      00096C A3               [24] 2073 	inc	dptr
      00096D E0               [24] 2074 	movx	a,@dptr
      00096E FC               [12] 2075 	mov	r4,a
      00096F C0 07            [24] 2076 	push	ar7
      000971 C0 01            [24] 2077 	push	ar1
      000973 C0 05            [24] 2078 	push	ar5
      000975 C0 06            [24] 2079 	push	ar6
      000977 C0 03            [24] 2080 	push	ar3
      000979 C0 04            [24] 2081 	push	ar4
      00097B 74r56            [12] 2082 	mov	a,#___str_6
      00097D C0 E0            [24] 2083 	push	acc
      00097F 74s00            [12] 2084 	mov	a,#(___str_6 >> 8)
      000981 C0 E0            [24] 2085 	push	acc
      000983 74 80            [12] 2086 	mov	a,#0x80
      000985 C0 E0            [24] 2087 	push	acc
      000987 12r00r00         [24] 2088 	lcall	_printf
      00098A E5 81            [12] 2089 	mov	a,sp
      00098C 24 F9            [12] 2090 	add	a,#0xf9
      00098E F5 81            [12] 2091 	mov	sp,a
      000990 D0 01            [24] 2092 	pop	ar1
      000992 D0 07            [24] 2093 	pop	ar7
                                   2094 ;	walk.c:233: for (i = 0; i < REG; i++) {
      000994 E5*00            [12] 2095 	mov	a,_bp
      000996 24 0B            [12] 2096 	add	a,#0x0b
      000998 F8               [12] 2097 	mov	r0,a
      000999 06               [12] 2098 	inc	@r0
      00099A B6 00 02         [24] 2099 	cjne	@r0,#0x00,00191$
      00099D 08               [12] 2100 	inc	r0
      00099E 06               [12] 2101 	inc	@r0
      00099F                       2102 00191$:
      00099F E5*00            [12] 2103 	mov	a,_bp
      0009A1 24 0B            [12] 2104 	add	a,#0x0b
      0009A3 F8               [12] 2105 	mov	r0,a
      0009A4 86 05            [24] 2106 	mov	ar5,@r0
      0009A6 08               [12] 2107 	inc	r0
      0009A7 86 06            [24] 2108 	mov	ar6,@r0
      0009A9 C3               [12] 2109 	clr	c
      0009AA ED               [12] 2110 	mov	a,r5
      0009AB 94 08            [12] 2111 	subb	a,#0x08
      0009AD EE               [12] 2112 	mov	a,r6
      0009AE 94 00            [12] 2113 	subb	a,#0x00
      0009B0 D0 07            [24] 2114 	pop	ar7
      0009B2 50 03            [24] 2115 	jnc	00192$
      0009B4 02r08r04         [24] 2116 	ljmp	00116$
      0009B7                       2117 00192$:
                                   2118 ;	walk.c:239: OE76 = OE76_0;
      0009B7 78r01            [12] 2119 	mov	r0,#_OE76
      0009B9 76 3F            [12] 2120 	mov	@r0,#0x3f
                                   2121 ;	walk.c:240: setOE(OE76_NC);
      0009BB 75 82 00         [24] 2122 	mov	dpl,#0x00
      0009BE C0 07            [24] 2123 	push	ar7
      0009C0 C0 01            [24] 2124 	push	ar1
      0009C2 12r00r27         [24] 2125 	lcall	_setOE
      0009C5 D0 01            [24] 2126 	pop	ar1
      0009C7 D0 07            [24] 2127 	pop	ar7
                                   2128 ;	walk.c:242: walk(&initial);
      0009C9 8F 04            [24] 2129 	mov	ar4,r7
      0009CB 7D 00            [12] 2130 	mov	r5,#0x00
      0009CD 7E 40            [12] 2131 	mov	r6,#0x40
      0009CF 8C 82            [24] 2132 	mov	dpl,r4
      0009D1 8D 83            [24] 2133 	mov	dph,r5
      0009D3 8E F0            [24] 2134 	mov	b,r6
      0009D5 C0 07            [24] 2135 	push	ar7
      0009D7 C0 01            [24] 2136 	push	ar1
      0009D9 12r03r00         [24] 2137 	lcall	_walk
      0009DC D0 01            [24] 2138 	pop	ar1
      0009DE D0 07            [24] 2139 	pop	ar7
                                   2140 ;	walk.c:244: for (i = 0; i < ROWS; i++)
      0009E0 E5*00            [12] 2141 	mov	a,_bp
      0009E2 24 0B            [12] 2142 	add	a,#0x0b
      0009E4 F8               [12] 2143 	mov	r0,a
      0009E5 E4               [12] 2144 	clr	a
      0009E6 F6               [12] 2145 	mov	@r0,a
      0009E7 08               [12] 2146 	inc	r0
      0009E8 F6               [12] 2147 	mov	@r0,a
      0009E9 7B 00            [12] 2148 	mov	r3,#0x00
      0009EB 7C 00            [12] 2149 	mov	r4,#0x00
                                   2150 ;	walk.c:245: for (j = 0; j < COLS; j++)
      0009ED                       2151 00132$:
      0009ED E5*00            [12] 2152 	mov	a,_bp
      0009EF 24 03            [12] 2153 	add	a,#0x03
      0009F1 F8               [12] 2154 	mov	r0,a
      0009F2 EB               [12] 2155 	mov	a,r3
      0009F3 24r00            [12] 2156 	add	a,#_g
      0009F5 F6               [12] 2157 	mov	@r0,a
      0009F6 EC               [12] 2158 	mov	a,r4
      0009F7 34s00            [12] 2159 	addc	a,#(_g >> 8)
      0009F9 08               [12] 2160 	inc	r0
      0009FA F6               [12] 2161 	mov	@r0,a
      0009FB 7A 00            [12] 2162 	mov	r2,#0x00
      0009FD 7E 00            [12] 2163 	mov	r6,#0x00
      0009FF                       2164 00118$:
                                   2165 ;	walk.c:246: if (g[i][j] != 0xaau) bang();
      0009FF E5*00            [12] 2166 	mov	a,_bp
      000A01 24 03            [12] 2167 	add	a,#0x03
      000A03 F8               [12] 2168 	mov	r0,a
      000A04 EA               [12] 2169 	mov	a,r2
      000A05 26               [12] 2170 	add	a,@r0
      000A06 F5 82            [12] 2171 	mov	dpl,a
      000A08 EE               [12] 2172 	mov	a,r6
      000A09 08               [12] 2173 	inc	r0
      000A0A 36               [12] 2174 	addc	a,@r0
      000A0B F5 83            [12] 2175 	mov	dph,a
      000A0D E0               [24] 2176 	movx	a,@dptr
      000A0E FD               [12] 2177 	mov	r5,a
      000A0F BD AA 02         [24] 2178 	cjne	r5,#0xaa,00193$
      000A12 80 1B            [24] 2179 	sjmp	00119$
      000A14                       2180 00193$:
      000A14 C0 07            [24] 2181 	push	ar7
      000A16 C0 06            [24] 2182 	push	ar6
      000A18 C0 04            [24] 2183 	push	ar4
      000A1A C0 03            [24] 2184 	push	ar3
      000A1C C0 02            [24] 2185 	push	ar2
      000A1E C0 01            [24] 2186 	push	ar1
      000A20 12r00r1A         [24] 2187 	lcall	_bang
      000A23 D0 01            [24] 2188 	pop	ar1
      000A25 D0 02            [24] 2189 	pop	ar2
      000A27 D0 03            [24] 2190 	pop	ar3
      000A29 D0 04            [24] 2191 	pop	ar4
      000A2B D0 06            [24] 2192 	pop	ar6
      000A2D D0 07            [24] 2193 	pop	ar7
      000A2F                       2194 00119$:
                                   2195 ;	walk.c:245: for (j = 0; j < COLS; j++)
      000A2F 0A               [12] 2196 	inc	r2
      000A30 BA 00 01         [24] 2197 	cjne	r2,#0x00,00194$
      000A33 0E               [12] 2198 	inc	r6
      000A34                       2199 00194$:
      000A34 C3               [12] 2200 	clr	c
      000A35 EA               [12] 2201 	mov	a,r2
      000A36 94 C9            [12] 2202 	subb	a,#0xc9
      000A38 EE               [12] 2203 	mov	a,r6
      000A39 64 80            [12] 2204 	xrl	a,#0x80
      000A3B 94 80            [12] 2205 	subb	a,#0x80
      000A3D 40 C0            [24] 2206 	jc	00118$
                                   2207 ;	walk.c:244: for (i = 0; i < ROWS; i++)
      000A3F 74 C9            [12] 2208 	mov	a,#0xc9
      000A41 2B               [12] 2209 	add	a,r3
      000A42 FB               [12] 2210 	mov	r3,a
      000A43 E4               [12] 2211 	clr	a
      000A44 3C               [12] 2212 	addc	a,r4
      000A45 FC               [12] 2213 	mov	r4,a
      000A46 E5*00            [12] 2214 	mov	a,_bp
      000A48 24 0B            [12] 2215 	add	a,#0x0b
      000A4A F8               [12] 2216 	mov	r0,a
      000A4B 06               [12] 2217 	inc	@r0
      000A4C B6 00 02         [24] 2218 	cjne	@r0,#0x00,00196$
      000A4F 08               [12] 2219 	inc	r0
      000A50 06               [12] 2220 	inc	@r0
      000A51                       2221 00196$:
      000A51 E5*00            [12] 2222 	mov	a,_bp
      000A53 24 0B            [12] 2223 	add	a,#0x0b
      000A55 F8               [12] 2224 	mov	r0,a
      000A56 C3               [12] 2225 	clr	c
      000A57 E6               [12] 2226 	mov	a,@r0
      000A58 94 30            [12] 2227 	subb	a,#0x30
      000A5A 08               [12] 2228 	inc	r0
      000A5B E6               [12] 2229 	mov	a,@r0
      000A5C 64 80            [12] 2230 	xrl	a,#0x80
      000A5E 94 80            [12] 2231 	subb	a,#0x80
      000A60 40 8B            [24] 2232 	jc	00132$
                                   2233 ;	walk.c:248: N++;
      000A62 E5*00            [12] 2234 	mov	a,_bp
      000A64 24 09            [12] 2235 	add	a,#0x09
      000A66 F8               [12] 2236 	mov	r0,a
      000A67 06               [12] 2237 	inc	@r0
      000A68 B6 00 02         [24] 2238 	cjne	@r0,#0x00,00198$
      000A6B 08               [12] 2239 	inc	r0
      000A6C 06               [12] 2240 	inc	@r0
      000A6D                       2241 00198$:
      000A6D 02r06rE9         [24] 2242 	ljmp	00108$
      000A70                       2243 00110$:
                                   2244 ;	walk.c:251: EA = 0;
                                   2245 ;	assignBit
      000A70 C2 AF            [12] 2246 	clr	_EA
                                   2247 ;	walk.c:253: puts("\033[2J\033[?25h");
      000A72 90r00r5F         [24] 2248 	mov	dptr,#___str_7
      000A75 75 F0 80         [24] 2249 	mov	b,#0x80
      000A78 12r00r00         [24] 2250 	lcall	_puts
                                   2251 ;	walk.c:35: PCON |= 2;
      000A7B 43 87 02         [24] 2252 	orl	_PCON,#0x02
                                   2253 ;	walk.c:257: return;
                                   2254 ;	walk.c:258: }
      000A7E 85*00 81         [24] 2255 	mov	sp,_bp
      000A81 D0*00            [24] 2256 	pop	_bp
      000A83 22               [24] 2257 	ret
                                   2258 ;------------------------------------------------------------
                                   2259 ;Allocation info for local variables in function 'qinit'
                                   2260 ;------------------------------------------------------------
                                   2261 ;	walk.c:260: static void qinit(void) {
                                   2262 ;	-----------------------------------------
                                   2263 ;	 function qinit
                                   2264 ;	-----------------------------------------
      000A84                       2265 _qinit:
                                   2266 ;	walk.c:261: hp = tp = 0;
      000A84 90rBCr72         [24] 2267 	mov	dptr,#_tp
      000A87 E4               [12] 2268 	clr	a
      000A88 F0               [24] 2269 	movx	@dptr,a
      000A89 A3               [24] 2270 	inc	dptr
      000A8A F0               [24] 2271 	movx	@dptr,a
      000A8B 90rBCr70         [24] 2272 	mov	dptr,#_hp
      000A8E F0               [24] 2273 	movx	@dptr,a
      000A8F A3               [24] 2274 	inc	dptr
      000A90 F0               [24] 2275 	movx	@dptr,a
                                   2276 ;	walk.c:262: return;
                                   2277 ;	walk.c:263: }
      000A91 22               [24] 2278 	ret
                                   2279 ;------------------------------------------------------------
                                   2280 ;Allocation info for local variables in function 'qadd'
                                   2281 ;------------------------------------------------------------
                                   2282 ;t                         Allocated to registers r7 r5 r6 
                                   2283 ;sloc0                     Allocated to stack - _bp +1
                                   2284 ;sloc1                     Allocated to stack - _bp +3
                                   2285 ;sloc2                     Allocated to stack - _bp +5
                                   2286 ;sloc3                     Allocated to stack - _bp +10
                                   2287 ;------------------------------------------------------------
                                   2288 ;	walk.c:265: static uint8_t qadd(struct node *t) {
                                   2289 ;	-----------------------------------------
                                   2290 ;	 function qadd
                                   2291 ;	-----------------------------------------
      000A92                       2292 _qadd:
      000A92 C0*00            [24] 2293 	push	_bp
      000A94 E5 81            [12] 2294 	mov	a,sp
      000A96 F5*00            [12] 2295 	mov	_bp,a
      000A98 24 06            [12] 2296 	add	a,#0x06
      000A9A F5 81            [12] 2297 	mov	sp,a
      000A9C AF 82            [24] 2298 	mov	r7,dpl
      000A9E AD 83            [24] 2299 	mov	r5,dph
      000AA0 AE F0            [24] 2300 	mov	r6,b
                                   2301 ;	walk.c:266: if (((hp + 1) % QMAX) == tp) return 0u;
      000AA2 90rBCr70         [24] 2302 	mov	dptr,#_hp
      000AA5 E0               [24] 2303 	movx	a,@dptr
      000AA6 FB               [12] 2304 	mov	r3,a
      000AA7 A3               [24] 2305 	inc	dptr
      000AA8 E0               [24] 2306 	movx	a,@dptr
      000AA9 FC               [12] 2307 	mov	r4,a
      000AAA A8*00            [24] 2308 	mov	r0,_bp
      000AAC 08               [12] 2309 	inc	r0
      000AAD 74 01            [12] 2310 	mov	a,#0x01
      000AAF 2B               [12] 2311 	add	a,r3
      000AB0 F6               [12] 2312 	mov	@r0,a
      000AB1 E4               [12] 2313 	clr	a
      000AB2 3C               [12] 2314 	addc	a,r4
      000AB3 08               [12] 2315 	inc	r0
      000AB4 F6               [12] 2316 	mov	@r0,a
      000AB5 C0 07            [24] 2317 	push	ar7
      000AB7 C0 06            [24] 2318 	push	ar6
      000AB9 C0 05            [24] 2319 	push	ar5
      000ABB C0 04            [24] 2320 	push	ar4
      000ABD C0 03            [24] 2321 	push	ar3
      000ABF 74 B0            [12] 2322 	mov	a,#0xb0
      000AC1 C0 E0            [24] 2323 	push	acc
      000AC3 74 25            [12] 2324 	mov	a,#0x25
      000AC5 C0 E0            [24] 2325 	push	acc
      000AC7 A8*00            [24] 2326 	mov	r0,_bp
      000AC9 08               [12] 2327 	inc	r0
      000ACA 86 82            [24] 2328 	mov	dpl,@r0
      000ACC 08               [12] 2329 	inc	r0
      000ACD 86 83            [24] 2330 	mov	dph,@r0
      000ACF 12r00r00         [24] 2331 	lcall	__modsint
      000AD2 A8*00            [24] 2332 	mov	r0,_bp
      000AD4 08               [12] 2333 	inc	r0
      000AD5 08               [12] 2334 	inc	r0
      000AD6 08               [12] 2335 	inc	r0
      000AD7 A6 82            [24] 2336 	mov	@r0,dpl
      000AD9 08               [12] 2337 	inc	r0
      000ADA A6 83            [24] 2338 	mov	@r0,dph
      000ADC 15 81            [12] 2339 	dec	sp
      000ADE 15 81            [12] 2340 	dec	sp
      000AE0 D0 03            [24] 2341 	pop	ar3
      000AE2 D0 04            [24] 2342 	pop	ar4
      000AE4 D0 05            [24] 2343 	pop	ar5
      000AE6 D0 06            [24] 2344 	pop	ar6
      000AE8 D0 07            [24] 2345 	pop	ar7
      000AEA 90rBCr72         [24] 2346 	mov	dptr,#_tp
      000AED E5*00            [12] 2347 	mov	a,_bp
      000AEF 24 05            [12] 2348 	add	a,#0x05
      000AF1 F8               [12] 2349 	mov	r0,a
      000AF2 E0               [24] 2350 	movx	a,@dptr
      000AF3 F6               [12] 2351 	mov	@r0,a
      000AF4 A3               [24] 2352 	inc	dptr
      000AF5 E0               [24] 2353 	movx	a,@dptr
      000AF6 08               [12] 2354 	inc	r0
      000AF7 F6               [12] 2355 	mov	@r0,a
      000AF8 E5*00            [12] 2356 	mov	a,_bp
      000AFA 24 03            [12] 2357 	add	a,#0x03
      000AFC F8               [12] 2358 	mov	r0,a
      000AFD E5*00            [12] 2359 	mov	a,_bp
      000AFF 24 05            [12] 2360 	add	a,#0x05
      000B01 F9               [12] 2361 	mov	r1,a
      000B02 86 F0            [24] 2362 	mov	b,@r0
      000B04 E7               [12] 2363 	mov	a,@r1
      000B05 B5 F0 0A         [24] 2364 	cjne	a,b,00109$
      000B08 08               [12] 2365 	inc	r0
      000B09 86 F0            [24] 2366 	mov	b,@r0
      000B0B 09               [12] 2367 	inc	r1
      000B0C E7               [12] 2368 	mov	a,@r1
      000B0D B5 F0 02         [24] 2369 	cjne	a,b,00109$
      000B10 80 02            [24] 2370 	sjmp	00110$
      000B12                       2371 00109$:
      000B12 80 05            [24] 2372 	sjmp	00102$
      000B14                       2373 00110$:
      000B14 75 82 00         [24] 2374 	mov	dpl,#0x00
      000B17 80 65            [24] 2375 	sjmp	00103$
      000B19                       2376 00102$:
                                   2377 ;	walk.c:267: queue[hp] = *t;
      000B19 8F 02            [24] 2378 	mov	ar2,r7
      000B1B 8E 07            [24] 2379 	mov	ar7,r6
      000B1D EB               [12] 2380 	mov	a,r3
      000B1E 2B               [12] 2381 	add	a,r3
      000B1F FB               [12] 2382 	mov	r3,a
      000B20 EC               [12] 2383 	mov	a,r4
      000B21 33               [12] 2384 	rlc	a
      000B22 FC               [12] 2385 	mov	r4,a
      000B23 EB               [12] 2386 	mov	a,r3
      000B24 2B               [12] 2387 	add	a,r3
      000B25 FB               [12] 2388 	mov	r3,a
      000B26 EC               [12] 2389 	mov	a,r4
      000B27 33               [12] 2390 	rlc	a
      000B28 FC               [12] 2391 	mov	r4,a
      000B29 EB               [12] 2392 	mov	a,r3
      000B2A 24rB0            [12] 2393 	add	a,#_queue
      000B2C FB               [12] 2394 	mov	r3,a
      000B2D EC               [12] 2395 	mov	a,r4
      000B2E 34s25            [12] 2396 	addc	a,#(_queue >> 8)
      000B30 FC               [12] 2397 	mov	r4,a
      000B31 7E 00            [12] 2398 	mov	r6,#0x00
      000B33 74 04            [12] 2399 	mov	a,#0x04
      000B35 C0 E0            [24] 2400 	push	acc
      000B37 E4               [12] 2401 	clr	a
      000B38 C0 E0            [24] 2402 	push	acc
      000B3A C0 02            [24] 2403 	push	ar2
      000B3C C0 05            [24] 2404 	push	ar5
      000B3E C0 07            [24] 2405 	push	ar7
      000B40 8B 82            [24] 2406 	mov	dpl,r3
      000B42 8C 83            [24] 2407 	mov	dph,r4
      000B44 8E F0            [24] 2408 	mov	b,r6
      000B46 12r00r00         [24] 2409 	lcall	___memcpy
      000B49 E5 81            [12] 2410 	mov	a,sp
      000B4B 24 FB            [12] 2411 	add	a,#0xfb
      000B4D F5 81            [12] 2412 	mov	sp,a
                                   2413 ;	walk.c:268: hp = (hp + 1) % QMAX;
      000B4F 90rBCr70         [24] 2414 	mov	dptr,#_hp
      000B52 E0               [24] 2415 	movx	a,@dptr
      000B53 FD               [12] 2416 	mov	r5,a
      000B54 A3               [24] 2417 	inc	dptr
      000B55 E0               [24] 2418 	movx	a,@dptr
      000B56 FE               [12] 2419 	mov	r6,a
      000B57 0D               [12] 2420 	inc	r5
      000B58 BD 00 01         [24] 2421 	cjne	r5,#0x00,00111$
      000B5B 0E               [12] 2422 	inc	r6
      000B5C                       2423 00111$:
      000B5C 74 B0            [12] 2424 	mov	a,#0xb0
      000B5E C0 E0            [24] 2425 	push	acc
      000B60 74 25            [12] 2426 	mov	a,#0x25
      000B62 C0 E0            [24] 2427 	push	acc
      000B64 8D 82            [24] 2428 	mov	dpl,r5
      000B66 8E 83            [24] 2429 	mov	dph,r6
      000B68 12r00r00         [24] 2430 	lcall	__modsint
      000B6B AD 82            [24] 2431 	mov	r5,dpl
      000B6D AE 83            [24] 2432 	mov	r6,dph
      000B6F 15 81            [12] 2433 	dec	sp
      000B71 15 81            [12] 2434 	dec	sp
      000B73 90rBCr70         [24] 2435 	mov	dptr,#_hp
      000B76 ED               [12] 2436 	mov	a,r5
      000B77 F0               [24] 2437 	movx	@dptr,a
      000B78 EE               [12] 2438 	mov	a,r6
      000B79 A3               [24] 2439 	inc	dptr
      000B7A F0               [24] 2440 	movx	@dptr,a
                                   2441 ;	walk.c:269: return 1u;
      000B7B 75 82 01         [24] 2442 	mov	dpl,#0x01
      000B7E                       2443 00103$:
                                   2444 ;	walk.c:270: }
      000B7E 85*00 81         [24] 2445 	mov	sp,_bp
      000B81 D0*00            [24] 2446 	pop	_bp
      000B83 22               [24] 2447 	ret
                                   2448 ;------------------------------------------------------------
                                   2449 ;Allocation info for local variables in function 'qget'
                                   2450 ;------------------------------------------------------------
                                   2451 ;t                         Allocated to registers r5 r6 r7 
                                   2452 ;------------------------------------------------------------
                                   2453 ;	walk.c:272: static uint8_t qget(struct node *t) {
                                   2454 ;	-----------------------------------------
                                   2455 ;	 function qget
                                   2456 ;	-----------------------------------------
      000B84                       2457 _qget:
      000B84 AD 82            [24] 2458 	mov	r5,dpl
      000B86 AE 83            [24] 2459 	mov	r6,dph
      000B88 AF F0            [24] 2460 	mov	r7,b
                                   2461 ;	walk.c:273: if (hp == tp) return 0u;
      000B8A 90rBCr70         [24] 2462 	mov	dptr,#_hp
      000B8D E0               [24] 2463 	movx	a,@dptr
      000B8E FB               [12] 2464 	mov	r3,a
      000B8F A3               [24] 2465 	inc	dptr
      000B90 E0               [24] 2466 	movx	a,@dptr
      000B91 FC               [12] 2467 	mov	r4,a
      000B92 90rBCr72         [24] 2468 	mov	dptr,#_tp
      000B95 E0               [24] 2469 	movx	a,@dptr
      000B96 F9               [12] 2470 	mov	r1,a
      000B97 A3               [24] 2471 	inc	dptr
      000B98 E0               [24] 2472 	movx	a,@dptr
      000B99 FA               [12] 2473 	mov	r2,a
      000B9A EB               [12] 2474 	mov	a,r3
      000B9B B5 01 08         [24] 2475 	cjne	a,ar1,00102$
      000B9E EC               [12] 2476 	mov	a,r4
      000B9F B5 02 04         [24] 2477 	cjne	a,ar2,00102$
      000BA2 75 82 00         [24] 2478 	mov	dpl,#0x00
      000BA5 22               [24] 2479 	ret
      000BA6                       2480 00102$:
                                   2481 ;	walk.c:274: *t = queue[tp];
      000BA6 E9               [12] 2482 	mov	a,r1
      000BA7 29               [12] 2483 	add	a,r1
      000BA8 F9               [12] 2484 	mov	r1,a
      000BA9 EA               [12] 2485 	mov	a,r2
      000BAA 33               [12] 2486 	rlc	a
      000BAB FA               [12] 2487 	mov	r2,a
      000BAC E9               [12] 2488 	mov	a,r1
      000BAD 29               [12] 2489 	add	a,r1
      000BAE F9               [12] 2490 	mov	r1,a
      000BAF EA               [12] 2491 	mov	a,r2
      000BB0 33               [12] 2492 	rlc	a
      000BB1 FA               [12] 2493 	mov	r2,a
      000BB2 E9               [12] 2494 	mov	a,r1
      000BB3 24rB0            [12] 2495 	add	a,#_queue
      000BB5 F9               [12] 2496 	mov	r1,a
      000BB6 EA               [12] 2497 	mov	a,r2
      000BB7 34s25            [12] 2498 	addc	a,#(_queue >> 8)
      000BB9 FA               [12] 2499 	mov	r2,a
      000BBA 7C 00            [12] 2500 	mov	r4,#0x00
      000BBC 74 04            [12] 2501 	mov	a,#0x04
      000BBE C0 E0            [24] 2502 	push	acc
      000BC0 E4               [12] 2503 	clr	a
      000BC1 C0 E0            [24] 2504 	push	acc
      000BC3 C0 01            [24] 2505 	push	ar1
      000BC5 C0 02            [24] 2506 	push	ar2
      000BC7 C0 04            [24] 2507 	push	ar4
      000BC9 8D 82            [24] 2508 	mov	dpl,r5
      000BCB 8E 83            [24] 2509 	mov	dph,r6
      000BCD 8F F0            [24] 2510 	mov	b,r7
      000BCF 12r00r00         [24] 2511 	lcall	___memcpy
      000BD2 E5 81            [12] 2512 	mov	a,sp
      000BD4 24 FB            [12] 2513 	add	a,#0xfb
      000BD6 F5 81            [12] 2514 	mov	sp,a
                                   2515 ;	walk.c:275: tp = (tp + 1) % QMAX;
      000BD8 90rBCr72         [24] 2516 	mov	dptr,#_tp
      000BDB E0               [24] 2517 	movx	a,@dptr
      000BDC FE               [12] 2518 	mov	r6,a
      000BDD A3               [24] 2519 	inc	dptr
      000BDE E0               [24] 2520 	movx	a,@dptr
      000BDF FF               [12] 2521 	mov	r7,a
      000BE0 0E               [12] 2522 	inc	r6
      000BE1 BE 00 01         [24] 2523 	cjne	r6,#0x00,00111$
      000BE4 0F               [12] 2524 	inc	r7
      000BE5                       2525 00111$:
      000BE5 74 B0            [12] 2526 	mov	a,#0xb0
      000BE7 C0 E0            [24] 2527 	push	acc
      000BE9 74 25            [12] 2528 	mov	a,#0x25
      000BEB C0 E0            [24] 2529 	push	acc
      000BED 8E 82            [24] 2530 	mov	dpl,r6
      000BEF 8F 83            [24] 2531 	mov	dph,r7
      000BF1 12r00r00         [24] 2532 	lcall	__modsint
      000BF4 AE 82            [24] 2533 	mov	r6,dpl
      000BF6 AF 83            [24] 2534 	mov	r7,dph
      000BF8 15 81            [12] 2535 	dec	sp
      000BFA 15 81            [12] 2536 	dec	sp
      000BFC 90rBCr72         [24] 2537 	mov	dptr,#_tp
      000BFF EE               [12] 2538 	mov	a,r6
      000C00 F0               [24] 2539 	movx	@dptr,a
      000C01 EF               [12] 2540 	mov	a,r7
      000C02 A3               [24] 2541 	inc	dptr
      000C03 F0               [24] 2542 	movx	@dptr,a
                                   2543 ;	walk.c:276: return 1u;
      000C04 75 82 01         [24] 2544 	mov	dpl,#0x01
                                   2545 ;	walk.c:277: }
      000C07 22               [24] 2546 	ret
                                   2547 	.area CSEG    (CODE)
                                   2548 	.area CONST   (CODE)
                                   2549 	.area CONST   (CODE)
      000000                       2550 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2551 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2552 	.db 0x00
                                   2553 	.area CSEG    (CODE)
                                   2554 	.area CONST   (CODE)
      00000D                       2555 ___str_1:
      00000D 1B                    2556 	.db 0x1b
      00000E 5B 32 3B 31 48 25 20  2557 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      000023 00                    2558 	.db 0x00
                                   2559 	.area CSEG    (CODE)
                                   2560 	.area CONST   (CODE)
      000024                       2561 ___str_2:
      000024 1B                    2562 	.db 0x1b
      000025 5B 25 64 3B 25 64 48  2563 	.ascii "[%d;%dH."
             2E
      00002D 00                    2564 	.db 0x00
                                   2565 	.area CSEG    (CODE)
                                   2566 	.area CONST   (CODE)
      00002E                       2567 ___str_3:
      00002E 1B                    2568 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2569 	.ascii "[%d;%dHo"
             6F
      000037 00                    2570 	.db 0x00
                                   2571 	.area CSEG    (CODE)
                                   2572 	.area CONST   (CODE)
      000038                       2573 ___str_4:
      000038 1B                    2574 	.db 0x1b
      000039 5B 32 4A              2575 	.ascii "[2J"
      00003C 1B                    2576 	.db 0x1b
      00003D 5B 3F 32 35 6C        2577 	.ascii "[?25l"
      000042 00                    2578 	.db 0x00
                                   2579 	.area CSEG    (CODE)
                                   2580 	.area CONST   (CODE)
      000043                       2581 ___str_5:
      000043 1B                    2582 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2583 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2584 	.db 0x00
                                   2585 	.area CSEG    (CODE)
                                   2586 	.area CONST   (CODE)
      000056                       2587 ___str_6:
      000056 25 20 38 64 25 20 38  2588 	.ascii "% 8d% 8d"
             64
      00005E 00                    2589 	.db 0x00
                                   2590 	.area CSEG    (CODE)
                                   2591 	.area CONST   (CODE)
      00005F                       2592 ___str_7:
      00005F 1B                    2593 	.db 0x1b
      000060 5B 32 4A              2594 	.ascii "[2J"
      000063 1B                    2595 	.db 0x1b
      000064 5B 3F 32 35 68        2596 	.ascii "[?25h"
      000069 00                    2597 	.db 0x00
                                   2598 	.area CSEG    (CODE)
                                   2599 	.area XINIT   (CODE)
      000000                       2600 __xinit__neigh:
      000000 FF FF                 2601 	.byte #0xff, #0xff	; -1
      000002 01 00                 2602 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2603 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2604 	.byte #0xff, #0xff	; -1
      000008 01 00                 2605 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2606 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2607 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2608 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2609 	.byte #0xff, #0xff	; -1
      000012 00 00                 2610 	.byte #0x00, #0x00	;  0
      000014 00 00                 2611 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2612 	.byte #0xff, #0xff	; -1
      000018 01 00                 2613 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2614 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2615 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2616 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2617 	.byte #0xff, #0xff	; -1
      000022 01 00                 2618 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2619 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2620 	.byte #0xff, #0xff	; -1
      000028 01 00                 2621 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2622 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2623 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2624 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2625 	.byte #0xff, #0xff	; -1
      000032 00 00                 2626 	.byte #0x00, #0x00	;  0
      000034 00 00                 2627 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2628 	.byte #0xff, #0xff	; -1
      000038 01 00                 2629 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2630 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2631 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2632 	.byte #0x01, #0x00	;  1
                                   2633 	.area CABS    (ABS,CODE)
