                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _queue:
      0025B0                        325 	.ds 38592
      00BC70                        326 _hp:
      00BC70                        327 	.ds 2
      00BC72                        328 _tp:
      00BC72                        329 	.ds 2
                           00F006   330 _OEreg	=	0xf006
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
      000000                        339 _neigh:
      000000                        340 	.ds 64
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  357 	ljmp	_int0
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000006                        378 __sdcc_program_startup:
      000006 02r06r44         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'putchar'
                                    387 ;------------------------------------------------------------
                                    388 ;c                         Allocated to registers 
                                    389 ;------------------------------------------------------------
                                    390 ;	walk.c:9: int putchar(int c) __naked {
                                    391 ;	-----------------------------------------
                                    392 ;	 function putchar
                                    393 ;	-----------------------------------------
      000000                        394 _putchar:
                                    395 ;	naked function: no prologue.
                                    396 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  397 	mov	a, dpl
      000002 02 00 30         [24]  398 	ljmp	0x0030
                                    399 ;	walk.c:15: }
                                    400 ;	naked function: no epilogue.
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'getchar'
                                    403 ;------------------------------------------------------------
                                    404 ;	walk.c:17: int getchar(void) __naked {
                                    405 ;	-----------------------------------------
                                    406 ;	 function getchar
                                    407 ;	-----------------------------------------
      000005                        408 _getchar:
                                    409 ;	naked function: no prologue.
                                    410 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  411 	lcall	0x0032
      000008 F5 82            [12]  412 	mov	dpl, a
      00000A 75 83 00         [24]  413 	mov	dph, #0
      00000D 22               [24]  414 	ret
                                    415 ;	walk.c:24: }
                                    416 ;	naked function: no epilogue.
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'int0'
                                    419 ;------------------------------------------------------------
                                    420 ;	walk.c:30: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    421 ;	-----------------------------------------
                                    422 ;	 function int0
                                    423 ;	-----------------------------------------
      00000E                        424 _int0:
                           00000F   425 	ar7 = 0x0f
                           00000E   426 	ar6 = 0x0e
                           00000D   427 	ar5 = 0x0d
                           00000C   428 	ar4 = 0x0c
                           00000B   429 	ar3 = 0x0b
                           00000A   430 	ar2 = 0x0a
                           000009   431 	ar1 = 0x09
                           000008   432 	ar0 = 0x08
      00000E C0 D0            [24]  433 	push	psw
      000010 75 D0 08         [24]  434 	mov	psw,#0x08
                                    435 ;	walk.c:31: i0 = 0u;
      000013 78r00            [12]  436 	mov	r0,#_i0
      000015 76 00            [12]  437 	mov	@r0,#0x00
                                    438 ;	walk.c:32: }
      000017 D0 D0            [24]  439 	pop	psw
      000019 32               [24]  440 	reti
                                    441 ;	eliminated unneeded push/pop dpl
                                    442 ;	eliminated unneeded push/pop dph
                                    443 ;	eliminated unneeded push/pop b
                                    444 ;	eliminated unneeded push/pop acc
                                    445 ;------------------------------------------------------------
                                    446 ;Allocation info for local variables in function 'bang'
                                    447 ;------------------------------------------------------------
                                    448 ;	walk.c:38: static void bang(void) {
                                    449 ;	-----------------------------------------
                                    450 ;	 function bang
                                    451 ;	-----------------------------------------
      00001A                        452 _bang:
                           000007   453 	ar7 = 0x07
                           000006   454 	ar6 = 0x06
                           000005   455 	ar5 = 0x05
                           000004   456 	ar4 = 0x04
                           000003   457 	ar3 = 0x03
                           000002   458 	ar2 = 0x02
                           000001   459 	ar1 = 0x01
                           000000   460 	ar0 = 0x00
                                    461 ;	walk.c:39: (void)puts("Memory error");
      00001A 90r00r00         [24]  462 	mov	dptr,#___str_0
      00001D 75 F0 80         [24]  463 	mov	b,#0x80
      000020 12r00r00         [24]  464 	lcall	_puts
                                    465 ;	walk.c:35: PCON |= 2;
      000023 43 87 02         [24]  466 	orl	_PCON,#0x02
                                    467 ;	walk.c:42: return;
                                    468 ;	walk.c:43: }
      000026 22               [24]  469 	ret
                                    470 ;------------------------------------------------------------
                                    471 ;Allocation info for local variables in function 'flashOE'
                                    472 ;------------------------------------------------------------
                                    473 ;mask                      Allocated to registers r7 
                                    474 ;------------------------------------------------------------
                                    475 ;	walk.c:85: static void flashOE(uint8_t mask) {
                                    476 ;	-----------------------------------------
                                    477 ;	 function flashOE
                                    478 ;	-----------------------------------------
      000027                        479 _flashOE:
      000027 AF 82            [24]  480 	mov	r7,dpl
                                    481 ;	walk.c:86: P1_7 = 0;
                                    482 ;	assignBit
      000029 C2 97            [12]  483 	clr	_P1_7
                                    484 ;	walk.c:87: OEreg = OE76;
      00002B 78r01            [12]  485 	mov	r0,#_OE76
      00002D 90 F0 06         [24]  486 	mov	dptr,#_OEreg
      000030 E6               [12]  487 	mov	a,@r0
      000031 F0               [24]  488 	movx	@dptr,a
                                    489 ;	walk.c:88: P1_7 = 1;
                                    490 ;	assignBit
      000032 D2 97            [12]  491 	setb	_P1_7
                                    492 ;	walk.c:89: OE76 ^= mask;
      000034 78r01            [12]  493 	mov	r0,#_OE76
      000036 EF               [12]  494 	mov	a,r7
      000037 66               [12]  495 	xrl	a,@r0
      000038 F6               [12]  496 	mov	@r0,a
                                    497 ;	walk.c:91: return;
                                    498 ;	walk.c:92: }
      000039 22               [24]  499 	ret
                                    500 ;------------------------------------------------------------
                                    501 ;Allocation info for local variables in function 'update'
                                    502 ;------------------------------------------------------------
                                    503 ;cur                       Allocated to stack - _bp -5
                                    504 ;j                         Allocated to stack - _bp -6
                                    505 ;t                         Allocated to stack - _bp +1
                                    506 ;sloc0                     Allocated to stack - _bp +4
                                    507 ;sloc1                     Allocated to stack - _bp +6
                                    508 ;sloc2                     Allocated to stack - _bp +8
                                    509 ;------------------------------------------------------------
                                    510 ;	walk.c:94: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    511 ;	-----------------------------------------
                                    512 ;	 function update
                                    513 ;	-----------------------------------------
      00003A                        514 _update:
      00003A C0*00            [24]  515 	push	_bp
      00003C 85 81*00         [24]  516 	mov	_bp,sp
      00003F C0 82            [24]  517 	push	dpl
      000041 C0 83            [24]  518 	push	dph
      000043 C0 F0            [24]  519 	push	b
      000045 E5 81            [12]  520 	mov	a,sp
      000047 24 07            [12]  521 	add	a,#0x07
      000049 F5 81            [12]  522 	mov	sp,a
                                    523 ;	walk.c:95: t->r = cur->r + neigh[j].r;
      00004B E5*00            [12]  524 	mov	a,_bp
      00004D 24 FB            [12]  525 	add	a,#0xfb
      00004F F8               [12]  526 	mov	r0,a
      000050 86 02            [24]  527 	mov	ar2,@r0
      000052 08               [12]  528 	inc	r0
      000053 86 03            [24]  529 	mov	ar3,@r0
      000055 08               [12]  530 	inc	r0
      000056 86 04            [24]  531 	mov	ar4,@r0
      000058 8A 82            [24]  532 	mov	dpl,r2
      00005A 8B 83            [24]  533 	mov	dph,r3
      00005C 8C F0            [24]  534 	mov	b,r4
      00005E E5*00            [12]  535 	mov	a,_bp
      000060 24 04            [12]  536 	add	a,#0x04
      000062 F8               [12]  537 	mov	r0,a
      000063 12r00r00         [24]  538 	lcall	__gptrget
      000066 F6               [12]  539 	mov	@r0,a
      000067 A3               [24]  540 	inc	dptr
      000068 12r00r00         [24]  541 	lcall	__gptrget
      00006B 08               [12]  542 	inc	r0
      00006C F6               [12]  543 	mov	@r0,a
      00006D E5*00            [12]  544 	mov	a,_bp
      00006F 24 FA            [12]  545 	add	a,#0xfa
      000071 F8               [12]  546 	mov	r0,a
      000072 E5*00            [12]  547 	mov	a,_bp
      000074 24 06            [12]  548 	add	a,#0x06
      000076 F9               [12]  549 	mov	r1,a
      000077 E6               [12]  550 	mov	a,@r0
      000078 75 F0 04         [24]  551 	mov	b,#0x04
      00007B A4               [48]  552 	mul	ab
      00007C F7               [12]  553 	mov	@r1,a
      00007D 09               [12]  554 	inc	r1
      00007E A7 F0            [24]  555 	mov	@r1,b
      000080 E5*00            [12]  556 	mov	a,_bp
      000082 24 06            [12]  557 	add	a,#0x06
      000084 F8               [12]  558 	mov	r0,a
      000085 E6               [12]  559 	mov	a,@r0
      000086 24r00            [12]  560 	add	a,#_neigh
      000088 F5 82            [12]  561 	mov	dpl,a
      00008A 08               [12]  562 	inc	r0
      00008B E6               [12]  563 	mov	a,@r0
      00008C 34s00            [12]  564 	addc	a,#(_neigh >> 8)
      00008E F5 83            [12]  565 	mov	dph,a
      000090 E0               [24]  566 	movx	a,@dptr
      000091 FF               [12]  567 	mov	r7,a
      000092 A3               [24]  568 	inc	dptr
      000093 E0               [24]  569 	movx	a,@dptr
      000094 FE               [12]  570 	mov	r6,a
      000095 E5*00            [12]  571 	mov	a,_bp
      000097 24 04            [12]  572 	add	a,#0x04
      000099 F8               [12]  573 	mov	r0,a
      00009A EF               [12]  574 	mov	a,r7
      00009B 26               [12]  575 	add	a,@r0
      00009C FF               [12]  576 	mov	r7,a
      00009D EE               [12]  577 	mov	a,r6
      00009E 08               [12]  578 	inc	r0
      00009F 36               [12]  579 	addc	a,@r0
      0000A0 FE               [12]  580 	mov	r6,a
      0000A1 A8*00            [24]  581 	mov	r0,_bp
      0000A3 08               [12]  582 	inc	r0
      0000A4 86 82            [24]  583 	mov	dpl,@r0
      0000A6 08               [12]  584 	inc	r0
      0000A7 86 83            [24]  585 	mov	dph,@r0
      0000A9 08               [12]  586 	inc	r0
      0000AA 86 F0            [24]  587 	mov	b,@r0
      0000AC EF               [12]  588 	mov	a,r7
      0000AD 12r00r00         [24]  589 	lcall	__gptrput
      0000B0 A3               [24]  590 	inc	dptr
      0000B1 EE               [12]  591 	mov	a,r6
      0000B2 12r00r00         [24]  592 	lcall	__gptrput
                                    593 ;	walk.c:96: t->c = cur->c + neigh[j].c;
      0000B5 A8*00            [24]  594 	mov	r0,_bp
      0000B7 08               [12]  595 	inc	r0
      0000B8 E5*00            [12]  596 	mov	a,_bp
      0000BA 24 08            [12]  597 	add	a,#0x08
      0000BC F9               [12]  598 	mov	r1,a
      0000BD 74 02            [12]  599 	mov	a,#0x02
      0000BF 26               [12]  600 	add	a,@r0
      0000C0 F7               [12]  601 	mov	@r1,a
      0000C1 E4               [12]  602 	clr	a
      0000C2 08               [12]  603 	inc	r0
      0000C3 36               [12]  604 	addc	a,@r0
      0000C4 09               [12]  605 	inc	r1
      0000C5 F7               [12]  606 	mov	@r1,a
      0000C6 08               [12]  607 	inc	r0
      0000C7 09               [12]  608 	inc	r1
      0000C8 E6               [12]  609 	mov	a,@r0
      0000C9 F7               [12]  610 	mov	@r1,a
      0000CA 74 02            [12]  611 	mov	a,#0x02
      0000CC 2A               [12]  612 	add	a,r2
      0000CD FA               [12]  613 	mov	r2,a
      0000CE E4               [12]  614 	clr	a
      0000CF 3B               [12]  615 	addc	a,r3
      0000D0 FB               [12]  616 	mov	r3,a
      0000D1 8A 82            [24]  617 	mov	dpl,r2
      0000D3 8B 83            [24]  618 	mov	dph,r3
      0000D5 8C F0            [24]  619 	mov	b,r4
      0000D7 12r00r00         [24]  620 	lcall	__gptrget
      0000DA FA               [12]  621 	mov	r2,a
      0000DB A3               [24]  622 	inc	dptr
      0000DC 12r00r00         [24]  623 	lcall	__gptrget
      0000DF FB               [12]  624 	mov	r3,a
      0000E0 E5*00            [12]  625 	mov	a,_bp
      0000E2 24 06            [12]  626 	add	a,#0x06
      0000E4 F8               [12]  627 	mov	r0,a
      0000E5 E6               [12]  628 	mov	a,@r0
      0000E6 24r00            [12]  629 	add	a,#_neigh
      0000E8 FC               [12]  630 	mov	r4,a
      0000E9 08               [12]  631 	inc	r0
      0000EA E6               [12]  632 	mov	a,@r0
      0000EB 34s00            [12]  633 	addc	a,#(_neigh >> 8)
      0000ED FD               [12]  634 	mov	r5,a
      0000EE 8C 82            [24]  635 	mov	dpl,r4
      0000F0 8D 83            [24]  636 	mov	dph,r5
      0000F2 A3               [24]  637 	inc	dptr
      0000F3 A3               [24]  638 	inc	dptr
      0000F4 E0               [24]  639 	movx	a,@dptr
      0000F5 FC               [12]  640 	mov	r4,a
      0000F6 A3               [24]  641 	inc	dptr
      0000F7 E0               [24]  642 	movx	a,@dptr
      0000F8 FD               [12]  643 	mov	r5,a
      0000F9 EC               [12]  644 	mov	a,r4
      0000FA 2A               [12]  645 	add	a,r2
      0000FB FA               [12]  646 	mov	r2,a
      0000FC ED               [12]  647 	mov	a,r5
      0000FD 3B               [12]  648 	addc	a,r3
      0000FE FB               [12]  649 	mov	r3,a
      0000FF E5*00            [12]  650 	mov	a,_bp
      000101 24 08            [12]  651 	add	a,#0x08
      000103 F8               [12]  652 	mov	r0,a
      000104 86 82            [24]  653 	mov	dpl,@r0
      000106 08               [12]  654 	inc	r0
      000107 86 83            [24]  655 	mov	dph,@r0
      000109 08               [12]  656 	inc	r0
      00010A 86 F0            [24]  657 	mov	b,@r0
      00010C EA               [12]  658 	mov	a,r2
      00010D 12r00r00         [24]  659 	lcall	__gptrput
      000110 A3               [24]  660 	inc	dptr
      000111 EB               [12]  661 	mov	a,r3
      000112 12r00r00         [24]  662 	lcall	__gptrput
                                    663 ;	walk.c:98: if (t->r < 0) t->r += ROWS;
      000115 A8*00            [24]  664 	mov	r0,_bp
      000117 08               [12]  665 	inc	r0
      000118 86 82            [24]  666 	mov	dpl,@r0
      00011A 08               [12]  667 	inc	r0
      00011B 86 83            [24]  668 	mov	dph,@r0
      00011D 08               [12]  669 	inc	r0
      00011E 86 F0            [24]  670 	mov	b,@r0
      000120 12r00r00         [24]  671 	lcall	__gptrget
      000123 FD               [12]  672 	mov	r5,a
      000124 A3               [24]  673 	inc	dptr
      000125 12r00r00         [24]  674 	lcall	__gptrget
      000128 FC               [12]  675 	mov	r4,a
      000129 EE               [12]  676 	mov	a,r6
      00012A 30 E7 1D         [24]  677 	jnb	acc.7,00104$
      00012D 74 30            [12]  678 	mov	a,#0x30
      00012F 2D               [12]  679 	add	a,r5
      000130 FF               [12]  680 	mov	r7,a
      000131 E4               [12]  681 	clr	a
      000132 3C               [12]  682 	addc	a,r4
      000133 FE               [12]  683 	mov	r6,a
      000134 A8*00            [24]  684 	mov	r0,_bp
      000136 08               [12]  685 	inc	r0
      000137 86 82            [24]  686 	mov	dpl,@r0
      000139 08               [12]  687 	inc	r0
      00013A 86 83            [24]  688 	mov	dph,@r0
      00013C 08               [12]  689 	inc	r0
      00013D 86 F0            [24]  690 	mov	b,@r0
      00013F EF               [12]  691 	mov	a,r7
      000140 12r00r00         [24]  692 	lcall	__gptrput
      000143 A3               [24]  693 	inc	dptr
      000144 EE               [12]  694 	mov	a,r6
      000145 12r00r00         [24]  695 	lcall	__gptrput
      000148 80 27            [24]  696 	sjmp	00105$
      00014A                        697 00104$:
                                    698 ;	walk.c:99: else if (t->r >= ROWS) t->r -= ROWS;
      00014A C3               [12]  699 	clr	c
      00014B ED               [12]  700 	mov	a,r5
      00014C 94 30            [12]  701 	subb	a,#0x30
      00014E EC               [12]  702 	mov	a,r4
      00014F 64 80            [12]  703 	xrl	a,#0x80
      000151 94 80            [12]  704 	subb	a,#0x80
      000153 40 1C            [24]  705 	jc	00105$
      000155 ED               [12]  706 	mov	a,r5
      000156 24 D0            [12]  707 	add	a,#0xd0
      000158 FD               [12]  708 	mov	r5,a
      000159 EC               [12]  709 	mov	a,r4
      00015A 34 FF            [12]  710 	addc	a,#0xff
      00015C FC               [12]  711 	mov	r4,a
      00015D A8*00            [24]  712 	mov	r0,_bp
      00015F 08               [12]  713 	inc	r0
      000160 86 82            [24]  714 	mov	dpl,@r0
      000162 08               [12]  715 	inc	r0
      000163 86 83            [24]  716 	mov	dph,@r0
      000165 08               [12]  717 	inc	r0
      000166 86 F0            [24]  718 	mov	b,@r0
      000168 ED               [12]  719 	mov	a,r5
      000169 12r00r00         [24]  720 	lcall	__gptrput
      00016C A3               [24]  721 	inc	dptr
      00016D EC               [12]  722 	mov	a,r4
      00016E 12r00r00         [24]  723 	lcall	__gptrput
      000171                        724 00105$:
                                    725 ;	walk.c:100: if (t->c < 0) t->c += COLS;
      000171 E5*00            [12]  726 	mov	a,_bp
      000173 24 08            [12]  727 	add	a,#0x08
      000175 F8               [12]  728 	mov	r0,a
      000176 86 82            [24]  729 	mov	dpl,@r0
      000178 08               [12]  730 	inc	r0
      000179 86 83            [24]  731 	mov	dph,@r0
      00017B 08               [12]  732 	inc	r0
      00017C 86 F0            [24]  733 	mov	b,@r0
      00017E 12r00r00         [24]  734 	lcall	__gptrget
      000181 A3               [24]  735 	inc	dptr
      000182 12r00r00         [24]  736 	lcall	__gptrget
      000185 30 E7 35         [24]  737 	jnb	acc.7,00109$
      000188 E5*00            [12]  738 	mov	a,_bp
      00018A 24 08            [12]  739 	add	a,#0x08
      00018C F8               [12]  740 	mov	r0,a
      00018D 86 82            [24]  741 	mov	dpl,@r0
      00018F 08               [12]  742 	inc	r0
      000190 86 83            [24]  743 	mov	dph,@r0
      000192 08               [12]  744 	inc	r0
      000193 86 F0            [24]  745 	mov	b,@r0
      000195 12r00r00         [24]  746 	lcall	__gptrget
      000198 FE               [12]  747 	mov	r6,a
      000199 A3               [24]  748 	inc	dptr
      00019A 12r00r00         [24]  749 	lcall	__gptrget
      00019D FF               [12]  750 	mov	r7,a
      00019E 74 C9            [12]  751 	mov	a,#0xc9
      0001A0 2E               [12]  752 	add	a,r6
      0001A1 FE               [12]  753 	mov	r6,a
      0001A2 E4               [12]  754 	clr	a
      0001A3 3F               [12]  755 	addc	a,r7
      0001A4 FF               [12]  756 	mov	r7,a
      0001A5 E5*00            [12]  757 	mov	a,_bp
      0001A7 24 08            [12]  758 	add	a,#0x08
      0001A9 F8               [12]  759 	mov	r0,a
      0001AA 86 82            [24]  760 	mov	dpl,@r0
      0001AC 08               [12]  761 	inc	r0
      0001AD 86 83            [24]  762 	mov	dph,@r0
      0001AF 08               [12]  763 	inc	r0
      0001B0 86 F0            [24]  764 	mov	b,@r0
      0001B2 EE               [12]  765 	mov	a,r6
      0001B3 12r00r00         [24]  766 	lcall	__gptrput
      0001B6 A3               [24]  767 	inc	dptr
      0001B7 EF               [12]  768 	mov	a,r7
      0001B8 12r00r00         [24]  769 	lcall	__gptrput
      0001BB 80 55            [24]  770 	sjmp	00110$
      0001BD                        771 00109$:
                                    772 ;	walk.c:101: else if (t->c >= COLS) t->c -= COLS;
      0001BD E5*00            [12]  773 	mov	a,_bp
      0001BF 24 08            [12]  774 	add	a,#0x08
      0001C1 F8               [12]  775 	mov	r0,a
      0001C2 86 82            [24]  776 	mov	dpl,@r0
      0001C4 08               [12]  777 	inc	r0
      0001C5 86 83            [24]  778 	mov	dph,@r0
      0001C7 08               [12]  779 	inc	r0
      0001C8 86 F0            [24]  780 	mov	b,@r0
      0001CA 12r00r00         [24]  781 	lcall	__gptrget
      0001CD FE               [12]  782 	mov	r6,a
      0001CE A3               [24]  783 	inc	dptr
      0001CF 12r00r00         [24]  784 	lcall	__gptrget
      0001D2 FF               [12]  785 	mov	r7,a
      0001D3 C3               [12]  786 	clr	c
      0001D4 EE               [12]  787 	mov	a,r6
      0001D5 94 C9            [12]  788 	subb	a,#0xc9
      0001D7 EF               [12]  789 	mov	a,r7
      0001D8 64 80            [12]  790 	xrl	a,#0x80
      0001DA 94 80            [12]  791 	subb	a,#0x80
      0001DC 40 34            [24]  792 	jc	00110$
      0001DE E5*00            [12]  793 	mov	a,_bp
      0001E0 24 08            [12]  794 	add	a,#0x08
      0001E2 F8               [12]  795 	mov	r0,a
      0001E3 86 82            [24]  796 	mov	dpl,@r0
      0001E5 08               [12]  797 	inc	r0
      0001E6 86 83            [24]  798 	mov	dph,@r0
      0001E8 08               [12]  799 	inc	r0
      0001E9 86 F0            [24]  800 	mov	b,@r0
      0001EB 12r00r00         [24]  801 	lcall	__gptrget
      0001EE FE               [12]  802 	mov	r6,a
      0001EF A3               [24]  803 	inc	dptr
      0001F0 12r00r00         [24]  804 	lcall	__gptrget
      0001F3 FF               [12]  805 	mov	r7,a
      0001F4 EE               [12]  806 	mov	a,r6
      0001F5 24 37            [12]  807 	add	a,#0x37
      0001F7 FE               [12]  808 	mov	r6,a
      0001F8 EF               [12]  809 	mov	a,r7
      0001F9 34 FF            [12]  810 	addc	a,#0xff
      0001FB FF               [12]  811 	mov	r7,a
      0001FC E5*00            [12]  812 	mov	a,_bp
      0001FE 24 08            [12]  813 	add	a,#0x08
      000200 F8               [12]  814 	mov	r0,a
      000201 86 82            [24]  815 	mov	dpl,@r0
      000203 08               [12]  816 	inc	r0
      000204 86 83            [24]  817 	mov	dph,@r0
      000206 08               [12]  818 	inc	r0
      000207 86 F0            [24]  819 	mov	b,@r0
      000209 EE               [12]  820 	mov	a,r6
      00020A 12r00r00         [24]  821 	lcall	__gptrput
      00020D A3               [24]  822 	inc	dptr
      00020E EF               [12]  823 	mov	a,r7
      00020F 12r00r00         [24]  824 	lcall	__gptrput
      000212                        825 00110$:
                                    826 ;	walk.c:103: if (g[t->r][t->c] == 0xaau) return 0u;
      000212 A8*00            [24]  827 	mov	r0,_bp
      000214 08               [12]  828 	inc	r0
      000215 86 82            [24]  829 	mov	dpl,@r0
      000217 08               [12]  830 	inc	r0
      000218 86 83            [24]  831 	mov	dph,@r0
      00021A 08               [12]  832 	inc	r0
      00021B 86 F0            [24]  833 	mov	b,@r0
      00021D 12r00r00         [24]  834 	lcall	__gptrget
      000220 FE               [12]  835 	mov	r6,a
      000221 A3               [24]  836 	inc	dptr
      000222 12r00r00         [24]  837 	lcall	__gptrget
      000225 FF               [12]  838 	mov	r7,a
      000226 C0 06            [24]  839 	push	ar6
      000228 C0 07            [24]  840 	push	ar7
      00022A 90 00 C9         [24]  841 	mov	dptr,#0x00c9
      00022D 12r00r00         [24]  842 	lcall	__mulint
      000230 AE 82            [24]  843 	mov	r6,dpl
      000232 AF 83            [24]  844 	mov	r7,dph
      000234 15 81            [12]  845 	dec	sp
      000236 15 81            [12]  846 	dec	sp
      000238 EE               [12]  847 	mov	a,r6
      000239 24r00            [12]  848 	add	a,#_g
      00023B FE               [12]  849 	mov	r6,a
      00023C EF               [12]  850 	mov	a,r7
      00023D 34s00            [12]  851 	addc	a,#(_g >> 8)
      00023F FF               [12]  852 	mov	r7,a
      000240 E5*00            [12]  853 	mov	a,_bp
      000242 24 08            [12]  854 	add	a,#0x08
      000244 F8               [12]  855 	mov	r0,a
      000245 86 82            [24]  856 	mov	dpl,@r0
      000247 08               [12]  857 	inc	r0
      000248 86 83            [24]  858 	mov	dph,@r0
      00024A 08               [12]  859 	inc	r0
      00024B 86 F0            [24]  860 	mov	b,@r0
      00024D 12r00r00         [24]  861 	lcall	__gptrget
      000250 FC               [12]  862 	mov	r4,a
      000251 A3               [24]  863 	inc	dptr
      000252 12r00r00         [24]  864 	lcall	__gptrget
      000255 FD               [12]  865 	mov	r5,a
      000256 EC               [12]  866 	mov	a,r4
      000257 2E               [12]  867 	add	a,r6
      000258 F5 82            [12]  868 	mov	dpl,a
      00025A ED               [12]  869 	mov	a,r5
      00025B 3F               [12]  870 	addc	a,r7
      00025C F5 83            [12]  871 	mov	dph,a
      00025E E0               [24]  872 	movx	a,@dptr
      00025F FF               [12]  873 	mov	r7,a
      000260 BF AA 05         [24]  874 	cjne	r7,#0xaa,00114$
      000263 75 82 00         [24]  875 	mov	dpl,#0x00
      000266 80 59            [24]  876 	sjmp	00116$
      000268                        877 00114$:
                                    878 ;	walk.c:104: else if (g[t->r][t->c] != 0x55u) bang();
      000268 A8*00            [24]  879 	mov	r0,_bp
      00026A 08               [12]  880 	inc	r0
      00026B 86 82            [24]  881 	mov	dpl,@r0
      00026D 08               [12]  882 	inc	r0
      00026E 86 83            [24]  883 	mov	dph,@r0
      000270 08               [12]  884 	inc	r0
      000271 86 F0            [24]  885 	mov	b,@r0
      000273 12r00r00         [24]  886 	lcall	__gptrget
      000276 FE               [12]  887 	mov	r6,a
      000277 A3               [24]  888 	inc	dptr
      000278 12r00r00         [24]  889 	lcall	__gptrget
      00027B FF               [12]  890 	mov	r7,a
      00027C C0 06            [24]  891 	push	ar6
      00027E C0 07            [24]  892 	push	ar7
      000280 90 00 C9         [24]  893 	mov	dptr,#0x00c9
      000283 12r00r00         [24]  894 	lcall	__mulint
      000286 AE 82            [24]  895 	mov	r6,dpl
      000288 AF 83            [24]  896 	mov	r7,dph
      00028A 15 81            [12]  897 	dec	sp
      00028C 15 81            [12]  898 	dec	sp
      00028E EE               [12]  899 	mov	a,r6
      00028F 24r00            [12]  900 	add	a,#_g
      000291 FE               [12]  901 	mov	r6,a
      000292 EF               [12]  902 	mov	a,r7
      000293 34s00            [12]  903 	addc	a,#(_g >> 8)
      000295 FF               [12]  904 	mov	r7,a
      000296 E5*00            [12]  905 	mov	a,_bp
      000298 24 08            [12]  906 	add	a,#0x08
      00029A F8               [12]  907 	mov	r0,a
      00029B 86 82            [24]  908 	mov	dpl,@r0
      00029D 08               [12]  909 	inc	r0
      00029E 86 83            [24]  910 	mov	dph,@r0
      0002A0 08               [12]  911 	inc	r0
      0002A1 86 F0            [24]  912 	mov	b,@r0
      0002A3 12r00r00         [24]  913 	lcall	__gptrget
      0002A6 FC               [12]  914 	mov	r4,a
      0002A7 A3               [24]  915 	inc	dptr
      0002A8 12r00r00         [24]  916 	lcall	__gptrget
      0002AB FD               [12]  917 	mov	r5,a
      0002AC EC               [12]  918 	mov	a,r4
      0002AD 2E               [12]  919 	add	a,r6
      0002AE F5 82            [12]  920 	mov	dpl,a
      0002B0 ED               [12]  921 	mov	a,r5
      0002B1 3F               [12]  922 	addc	a,r7
      0002B2 F5 83            [12]  923 	mov	dph,a
      0002B4 E0               [24]  924 	movx	a,@dptr
      0002B5 FF               [12]  925 	mov	r7,a
      0002B6 BF 55 02         [24]  926 	cjne	r7,#0x55,00148$
      0002B9 80 03            [24]  927 	sjmp	00115$
      0002BB                        928 00148$:
      0002BB 12r00r1A         [24]  929 	lcall	_bang
      0002BE                        930 00115$:
                                    931 ;	walk.c:106: return 1u;
      0002BE 75 82 01         [24]  932 	mov	dpl,#0x01
      0002C1                        933 00116$:
                                    934 ;	walk.c:107: }
      0002C1 85*00 81         [24]  935 	mov	sp,_bp
      0002C4 D0*00            [24]  936 	pop	_bp
      0002C6 22               [24]  937 	ret
                                    938 ;------------------------------------------------------------
                                    939 ;Allocation info for local variables in function 'walk'
                                    940 ;------------------------------------------------------------
                                    941 ;nstart                    Allocated to registers r5 r6 r7 
                                    942 ;cur                       Allocated to stack - _bp +7
                                    943 ;t                         Allocated to stack - _bp +11
                                    944 ;scramble                  Allocated to stack - _bp +15
                                    945 ;ti                        Allocated to registers r2 
                                    946 ;tj                        Allocated to registers r6 
                                    947 ;tx                        Allocated to stack - _bp +31
                                    948 ;j                         Allocated to stack - _bp +32
                                    949 ;sloc0                     Allocated to stack - _bp +1
                                    950 ;sloc1                     Allocated to stack - _bp +3
                                    951 ;sloc2                     Allocated to stack - _bp +35
                                    952 ;sloc3                     Allocated to stack - _bp +4
                                    953 ;------------------------------------------------------------
                                    954 ;	walk.c:109: static void walk(struct node *nstart) {
                                    955 ;	-----------------------------------------
                                    956 ;	 function walk
                                    957 ;	-----------------------------------------
      0002C7                        958 _walk:
      0002C7 C0*00            [24]  959 	push	_bp
      0002C9 E5 81            [12]  960 	mov	a,sp
      0002CB F5*00            [12]  961 	mov	_bp,a
      0002CD 24 20            [12]  962 	add	a,#0x20
      0002CF F5 81            [12]  963 	mov	sp,a
                                    964 ;	walk.c:114: if (!qadd(nstart)) bang();
      0002D1 AD 82            [24]  965 	mov	r5,dpl
      0002D3 AE 83            [24]  966 	mov	r6,dph
      0002D5 AF F0            [24]  967 	mov	r7,b
      0002D7 C0 07            [24]  968 	push	ar7
      0002D9 C0 06            [24]  969 	push	ar6
      0002DB C0 05            [24]  970 	push	ar5
      0002DD 12r0Ar2D         [24]  971 	lcall	_qadd
      0002E0 E5 82            [12]  972 	mov	a,dpl
      0002E2 D0 05            [24]  973 	pop	ar5
      0002E4 D0 06            [24]  974 	pop	ar6
      0002E6 D0 07            [24]  975 	pop	ar7
      0002E8 70 0F            [24]  976 	jnz	00102$
      0002EA C0 07            [24]  977 	push	ar7
      0002EC C0 06            [24]  978 	push	ar6
      0002EE C0 05            [24]  979 	push	ar5
      0002F0 12r00r1A         [24]  980 	lcall	_bang
      0002F3 D0 05            [24]  981 	pop	ar5
      0002F5 D0 06            [24]  982 	pop	ar6
      0002F7 D0 07            [24]  983 	pop	ar7
      0002F9                        984 00102$:
                                    985 ;	walk.c:115: g[nstart->r][nstart->c] = 0xaau;
      0002F9 8D 82            [24]  986 	mov	dpl,r5
      0002FB 8E 83            [24]  987 	mov	dph,r6
      0002FD 8F F0            [24]  988 	mov	b,r7
      0002FF 12r00r00         [24]  989 	lcall	__gptrget
      000302 FB               [12]  990 	mov	r3,a
      000303 A3               [24]  991 	inc	dptr
      000304 12r00r00         [24]  992 	lcall	__gptrget
      000307 FC               [12]  993 	mov	r4,a
      000308 C0 07            [24]  994 	push	ar7
      00030A C0 06            [24]  995 	push	ar6
      00030C C0 05            [24]  996 	push	ar5
      00030E C0 03            [24]  997 	push	ar3
      000310 C0 04            [24]  998 	push	ar4
      000312 90 00 C9         [24]  999 	mov	dptr,#0x00c9
      000315 12r00r00         [24] 1000 	lcall	__mulint
      000318 AB 82            [24] 1001 	mov	r3,dpl
      00031A AC 83            [24] 1002 	mov	r4,dph
      00031C 15 81            [12] 1003 	dec	sp
      00031E 15 81            [12] 1004 	dec	sp
      000320 D0 05            [24] 1005 	pop	ar5
      000322 D0 06            [24] 1006 	pop	ar6
      000324 D0 07            [24] 1007 	pop	ar7
      000326 EB               [12] 1008 	mov	a,r3
      000327 24r00            [12] 1009 	add	a,#_g
      000329 FB               [12] 1010 	mov	r3,a
      00032A EC               [12] 1011 	mov	a,r4
      00032B 34s00            [12] 1012 	addc	a,#(_g >> 8)
      00032D FC               [12] 1013 	mov	r4,a
      00032E 74 02            [12] 1014 	mov	a,#0x02
      000330 2D               [12] 1015 	add	a,r5
      000331 FD               [12] 1016 	mov	r5,a
      000332 E4               [12] 1017 	clr	a
      000333 3E               [12] 1018 	addc	a,r6
      000334 FE               [12] 1019 	mov	r6,a
      000335 8D 82            [24] 1020 	mov	dpl,r5
      000337 8E 83            [24] 1021 	mov	dph,r6
      000339 8F F0            [24] 1022 	mov	b,r7
      00033B 12r00r00         [24] 1023 	lcall	__gptrget
      00033E FD               [12] 1024 	mov	r5,a
      00033F A3               [24] 1025 	inc	dptr
      000340 12r00r00         [24] 1026 	lcall	__gptrget
      000343 FE               [12] 1027 	mov	r6,a
      000344 ED               [12] 1028 	mov	a,r5
      000345 2B               [12] 1029 	add	a,r3
      000346 F5 82            [12] 1030 	mov	dpl,a
      000348 EE               [12] 1031 	mov	a,r6
      000349 3C               [12] 1032 	addc	a,r4
      00034A F5 83            [12] 1033 	mov	dph,a
      00034C 74 AA            [12] 1034 	mov	a,#0xaa
      00034E F0               [24] 1035 	movx	@dptr,a
                                   1036 ;	walk.c:117: process:
      00034F E5*00            [12] 1037 	mov	a,_bp
      000351 24 0F            [12] 1038 	add	a,#0x0f
      000353 FF               [12] 1039 	mov	r7,a
      000354 E5*00            [12] 1040 	mov	a,_bp
      000356 24 0B            [12] 1041 	add	a,#0x0b
      000358 F9               [12] 1042 	mov	r1,a
      000359 E5*00            [12] 1043 	mov	a,_bp
      00035B 24 03            [12] 1044 	add	a,#0x03
      00035D F8               [12] 1045 	mov	r0,a
      00035E A6 01            [24] 1046 	mov	@r0,ar1
      000360 74 02            [12] 1047 	mov	a,#0x02
      000362 29               [12] 1048 	add	a,r1
      000363 F8               [12] 1049 	mov	r0,a
      000364 E5*00            [12] 1050 	mov	a,_bp
      000366 24 07            [12] 1051 	add	a,#0x07
      000368 FD               [12] 1052 	mov	r5,a
      000369                       1053 00103$:
                                   1054 ;	walk.c:118: if (!qget(&cur)) goto term;
      000369 8D 02            [24] 1055 	mov	ar2,r5
      00036B 7B 00            [12] 1056 	mov	r3,#0x00
      00036D 7C 40            [12] 1057 	mov	r4,#0x40
      00036F 8A 82            [24] 1058 	mov	dpl,r2
      000371 8B 83            [24] 1059 	mov	dph,r3
      000373 8C F0            [24] 1060 	mov	b,r4
      000375 C0 07            [24] 1061 	push	ar7
      000377 C0 05            [24] 1062 	push	ar5
      000379 C0 01            [24] 1063 	push	ar1
      00037B C0 00            [24] 1064 	push	ar0
      00037D 12r0Br1F         [24] 1065 	lcall	_qget
      000380 E5 82            [12] 1066 	mov	a,dpl
      000382 D0 00            [24] 1067 	pop	ar0
      000384 D0 01            [24] 1068 	pop	ar1
      000386 D0 05            [24] 1069 	pop	ar5
      000388 D0 07            [24] 1070 	pop	ar7
      00038A 70 03            [24] 1071 	jnz	00184$
      00038C 02r06r3E         [24] 1072 	ljmp	00119$
      00038F                       1073 00184$:
                                   1074 ;	walk.c:120: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      00038F 74 02            [12] 1075 	mov	a,#0x02
      000391 2D               [12] 1076 	add	a,r5
      000392 FC               [12] 1077 	mov	r4,a
      000393 C0 00            [24] 1078 	push	ar0
      000395 A8*00            [24] 1079 	mov	r0,_bp
      000397 08               [12] 1080 	inc	r0
      000398 C0 01            [24] 1081 	push	ar1
      00039A A9 04            [24] 1082 	mov	r1,ar4
      00039C E7               [12] 1083 	mov	a,@r1
      00039D F6               [12] 1084 	mov	@r0,a
      00039E 09               [12] 1085 	inc	r1
      00039F E7               [12] 1086 	mov	a,@r1
      0003A0 08               [12] 1087 	inc	r0
      0003A1 F6               [12] 1088 	mov	@r0,a
      0003A2 D0 01            [24] 1089 	pop	ar1
      0003A4 A8 05            [24] 1090 	mov	r0,ar5
      0003A6 86 03            [24] 1091 	mov	ar3,@r0
      0003A8 08               [12] 1092 	inc	r0
      0003A9 86 06            [24] 1093 	mov	ar6,@r0
      0003AB D0 00            [24] 1094 	pop	ar0
      0003AD C0 07            [24] 1095 	push	ar7
      0003AF C0 05            [24] 1096 	push	ar5
      0003B1 C0 04            [24] 1097 	push	ar4
      0003B3 C0 01            [24] 1098 	push	ar1
      0003B5 C0 00            [24] 1099 	push	ar0
      0003B7 85 00 F0         [24] 1100 	mov	b,ar0
      0003BA A8*00            [24] 1101 	mov	r0,_bp
      0003BC 08               [12] 1102 	inc	r0
      0003BD E6               [12] 1103 	mov	a,@r0
      0003BE C0 E0            [24] 1104 	push	acc
      0003C0 08               [12] 1105 	inc	r0
      0003C1 E6               [12] 1106 	mov	a,@r0
      0003C2 C0 E0            [24] 1107 	push	acc
      0003C4 C0 03            [24] 1108 	push	ar3
      0003C6 C0 06            [24] 1109 	push	ar6
      0003C8 90rBCr72         [24] 1110 	mov	dptr,#_tp
      0003CB E0               [24] 1111 	movx	a,@dptr
      0003CC C0 E0            [24] 1112 	push	acc
      0003CE A3               [24] 1113 	inc	dptr
      0003CF E0               [24] 1114 	movx	a,@dptr
      0003D0 C0 E0            [24] 1115 	push	acc
      0003D2 90rBCr70         [24] 1116 	mov	dptr,#_hp
      0003D5 E0               [24] 1117 	movx	a,@dptr
      0003D6 C0 E0            [24] 1118 	push	acc
      0003D8 A3               [24] 1119 	inc	dptr
      0003D9 E0               [24] 1120 	movx	a,@dptr
      0003DA C0 E0            [24] 1121 	push	acc
      0003DC 74r0D            [12] 1122 	mov	a,#___str_1
      0003DE C0 E0            [24] 1123 	push	acc
      0003E0 74s00            [12] 1124 	mov	a,#(___str_1 >> 8)
      0003E2 C0 E0            [24] 1125 	push	acc
      0003E4 74 80            [12] 1126 	mov	a,#0x80
      0003E6 C0 E0            [24] 1127 	push	acc
      0003E8 12r00r00         [24] 1128 	lcall	_printf
      0003EB E5 81            [12] 1129 	mov	a,sp
      0003ED 24 F5            [12] 1130 	add	a,#0xf5
      0003EF F5 81            [12] 1131 	mov	sp,a
      0003F1 D0 00            [24] 1132 	pop	ar0
      0003F3 D0 01            [24] 1133 	pop	ar1
      0003F5 D0 04            [24] 1134 	pop	ar4
      0003F7 D0 05            [24] 1135 	pop	ar5
      0003F9 D0 07            [24] 1136 	pop	ar7
                                   1137 ;	walk.c:122: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0003FB C0 00            [24] 1138 	push	ar0
      0003FD A8 04            [24] 1139 	mov	r0,ar4
      0003FF 86 04            [24] 1140 	mov	ar4,@r0
      000401 08               [12] 1141 	inc	r0
      000402 86 06            [24] 1142 	mov	ar6,@r0
      000404 D0 00            [24] 1143 	pop	ar0
      000406 0C               [12] 1144 	inc	r4
      000407 BC 00 01         [24] 1145 	cjne	r4,#0x00,00185$
      00040A 0E               [12] 1146 	inc	r6
      00040B                       1147 00185$:
      00040B C0 00            [24] 1148 	push	ar0
      00040D A8 05            [24] 1149 	mov	r0,ar5
      00040F 86 02            [24] 1150 	mov	ar2,@r0
      000411 08               [12] 1151 	inc	r0
      000412 86 03            [24] 1152 	mov	ar3,@r0
      000414 D0 00            [24] 1153 	pop	ar0
      000416 74 04            [12] 1154 	mov	a,#0x04
      000418 2A               [12] 1155 	add	a,r2
      000419 FA               [12] 1156 	mov	r2,a
      00041A E4               [12] 1157 	clr	a
      00041B 3B               [12] 1158 	addc	a,r3
      00041C FB               [12] 1159 	mov	r3,a
      00041D C0 07            [24] 1160 	push	ar7
      00041F C0 05            [24] 1161 	push	ar5
      000421 C0 01            [24] 1162 	push	ar1
      000423 C0 00            [24] 1163 	push	ar0
      000425 C0 04            [24] 1164 	push	ar4
      000427 C0 06            [24] 1165 	push	ar6
      000429 C0 02            [24] 1166 	push	ar2
      00042B C0 03            [24] 1167 	push	ar3
      00042D 74r24            [12] 1168 	mov	a,#___str_2
      00042F C0 E0            [24] 1169 	push	acc
      000431 74s00            [12] 1170 	mov	a,#(___str_2 >> 8)
      000433 C0 E0            [24] 1171 	push	acc
      000435 74 80            [12] 1172 	mov	a,#0x80
      000437 C0 E0            [24] 1173 	push	acc
      000439 12r00r00         [24] 1174 	lcall	_printf
      00043C E5 81            [12] 1175 	mov	a,sp
      00043E 24 F9            [12] 1176 	add	a,#0xf9
      000440 F5 81            [12] 1177 	mov	sp,a
                                   1178 ;	walk.c:123: flashOE(OE76_MASK6);
      000442 75 82 40         [24] 1179 	mov	dpl,#0x40
      000445 12r00r27         [24] 1180 	lcall	_flashOE
      000448 D0 00            [24] 1181 	pop	ar0
      00044A D0 01            [24] 1182 	pop	ar1
      00044C D0 05            [24] 1183 	pop	ar5
      00044E D0 07            [24] 1184 	pop	ar7
                                   1185 ;	walk.c:125: for (j = 0u; j < NMAX; j++)
      000450 7E 00            [12] 1186 	mov	r6,#0x00
                                   1187 ;	walk.c:149: return;
                                   1188 ;	walk.c:125: for (j = 0u; j < NMAX; j++)
      000452                       1189 00120$:
                                   1190 ;	walk.c:126: scramble[j] = j;
      000452 EE               [12] 1191 	mov	a,r6
      000453 2F               [12] 1192 	add	a,r7
      000454 C0 00            [24] 1193 	push	ar0
      000456 F8               [12] 1194 	mov	r0,a
      000457 A6 06            [24] 1195 	mov	@r0,ar6
      000459 D0 00            [24] 1196 	pop	ar0
                                   1197 ;	walk.c:125: for (j = 0u; j < NMAX; j++)
      00045B 0E               [12] 1198 	inc	r6
      00045C BE 10 00         [24] 1199 	cjne	r6,#0x10,00186$
      00045F                       1200 00186$:
      00045F 40 F1            [24] 1201 	jc	00120$
                                   1202 ;	walk.c:128: do ti = (uint8_t)(rand() % NMAX);
      000461 7C 00            [12] 1203 	mov	r4,#0x00
      000463                       1204 00107$:
      000463 C0 07            [24] 1205 	push	ar7
      000465 C0 05            [24] 1206 	push	ar5
      000467 C0 04            [24] 1207 	push	ar4
      000469 C0 01            [24] 1208 	push	ar1
      00046B C0 00            [24] 1209 	push	ar0
      00046D 12r00r00         [24] 1210 	lcall	_rand
      000470 AA 82            [24] 1211 	mov	r2,dpl
      000472 D0 00            [24] 1212 	pop	ar0
      000474 D0 01            [24] 1213 	pop	ar1
      000476 D0 04            [24] 1214 	pop	ar4
      000478 D0 05            [24] 1215 	pop	ar5
      00047A D0 07            [24] 1216 	pop	ar7
      00047C 53 02 0F         [24] 1217 	anl	ar2,#0x0f
      00047F 7B 00            [12] 1218 	mov	r3,#0x00
                                   1219 ;	walk.c:129: while (ti == j);
      000481 EA               [12] 1220 	mov	a,r2
      000482 B5 04 02         [24] 1221 	cjne	a,ar4,00188$
      000485 80 DC            [24] 1222 	sjmp	00107$
      000487                       1223 00188$:
                                   1224 ;	walk.c:130: do tj = (uint8_t)(rand() % NMAX);
      000487                       1225 00110$:
      000487 C0 05            [24] 1226 	push	ar5
      000489 C0 07            [24] 1227 	push	ar7
      00048B C0 04            [24] 1228 	push	ar4
      00048D C0 02            [24] 1229 	push	ar2
      00048F C0 01            [24] 1230 	push	ar1
      000491 C0 00            [24] 1231 	push	ar0
      000493 12r00r00         [24] 1232 	lcall	_rand
      000496 AB 82            [24] 1233 	mov	r3,dpl
      000498 D0 00            [24] 1234 	pop	ar0
      00049A D0 01            [24] 1235 	pop	ar1
      00049C D0 02            [24] 1236 	pop	ar2
      00049E D0 04            [24] 1237 	pop	ar4
      0004A0 D0 07            [24] 1238 	pop	ar7
      0004A2 53 03 0F         [24] 1239 	anl	ar3,#0x0f
      0004A5 8B 06            [24] 1240 	mov	ar6,r3
                                   1241 ;	walk.c:131: while (ti == tj);
      0004A7 EA               [12] 1242 	mov	a,r2
      0004A8 B5 06 04         [24] 1243 	cjne	a,ar6,00189$
      0004AB D0 05            [24] 1244 	pop	ar5
      0004AD 80 D8            [24] 1245 	sjmp	00110$
      0004AF                       1246 00189$:
                                   1247 ;	walk.c:132: tx = scramble[ti];
      0004AF EA               [12] 1248 	mov	a,r2
      0004B0 2F               [12] 1249 	add	a,r7
      0004B1 FB               [12] 1250 	mov	r3,a
      0004B2 C0 00            [24] 1251 	push	ar0
      0004B4 E5*00            [12] 1252 	mov	a,_bp
      0004B6 24 1F            [12] 1253 	add	a,#0x1f
      0004B8 F8               [12] 1254 	mov	r0,a
      0004B9 C0 01            [24] 1255 	push	ar1
      0004BB A9 03            [24] 1256 	mov	r1,ar3
      0004BD E7               [12] 1257 	mov	a,@r1
      0004BE F6               [12] 1258 	mov	@r0,a
                                   1259 ;	walk.c:133: scramble[ti] = scramble[tj];
      0004BF EE               [12] 1260 	mov	a,r6
      0004C0 2F               [12] 1261 	add	a,r7
      0004C1 FD               [12] 1262 	mov	r5,a
      0004C2 A8 05            [24] 1263 	mov	r0,ar5
      0004C4 86 02            [24] 1264 	mov	ar2,@r0
      0004C6 A8 03            [24] 1265 	mov	r0,ar3
      0004C8 A6 02            [24] 1266 	mov	@r0,ar2
                                   1267 ;	walk.c:134: scramble[tj] = tx;
      0004CA A8 05            [24] 1268 	mov	r0,ar5
      0004CC E5*00            [12] 1269 	mov	a,_bp
      0004CE 24 1F            [12] 1270 	add	a,#0x1f
      0004D0 F9               [12] 1271 	mov	r1,a
      0004D1 E7               [12] 1272 	mov	a,@r1
      0004D2 F6               [12] 1273 	mov	@r0,a
      0004D3 D0 00            [24] 1274 	pop	ar0
      0004D5 D0 01            [24] 1275 	pop	ar1
                                   1276 ;	walk.c:127: for (j = 0u; j < NMAX; j++) {
      0004D7 0C               [12] 1277 	inc	r4
      0004D8 BC 10 00         [24] 1278 	cjne	r4,#0x10,00190$
      0004DB                       1279 00190$:
      0004DB D0 05            [24] 1280 	pop	ar5
      0004DD 40 84            [24] 1281 	jc	00107$
                                   1282 ;	walk.c:137: for (j = 0u; j < NMAX; j++)
      0004DF C0 00            [24] 1283 	push	ar0
      0004E1 A8*00            [24] 1284 	mov	r0,_bp
      0004E3 08               [12] 1285 	inc	r0
      0004E4 A6 05            [24] 1286 	mov	@r0,ar5
      0004E6 E5*00            [12] 1287 	mov	a,_bp
      0004E8 24 20            [12] 1288 	add	a,#0x20
      0004EA F8               [12] 1289 	mov	r0,a
      0004EB 76 00            [12] 1290 	mov	@r0,#0x00
      0004ED D0 00            [24] 1291 	pop	ar0
      0004EF                       1292 00124$:
                                   1293 ;	walk.c:138: if (update(&t, &cur, scramble[j])) {
      0004EF C0 05            [24] 1294 	push	ar5
      0004F1 C0 00            [24] 1295 	push	ar0
      0004F3 E5*00            [12] 1296 	mov	a,_bp
      0004F5 24 20            [12] 1297 	add	a,#0x20
      0004F7 F8               [12] 1298 	mov	r0,a
      0004F8 E6               [12] 1299 	mov	a,@r0
      0004F9 2F               [12] 1300 	add	a,r7
      0004FA FA               [12] 1301 	mov	r2,a
      0004FB A8 02            [24] 1302 	mov	r0,ar2
      0004FD 86 03            [24] 1303 	mov	ar3,@r0
      0004FF A8*00            [24] 1304 	mov	r0,_bp
      000501 08               [12] 1305 	inc	r0
      000502 C0 01            [24] 1306 	push	ar1
      000504 E5*00            [12] 1307 	mov	a,_bp
      000506 24 04            [12] 1308 	add	a,#0x04
      000508 F9               [12] 1309 	mov	r1,a
      000509 E6               [12] 1310 	mov	a,@r0
      00050A F7               [12] 1311 	mov	@r1,a
      00050B 09               [12] 1312 	inc	r1
      00050C 77 00            [12] 1313 	mov	@r1,#0x00
      00050E 09               [12] 1314 	inc	r1
      00050F 77 40            [12] 1315 	mov	@r1,#0x40
      000511 D0 01            [24] 1316 	pop	ar1
      000513 D0 00            [24] 1317 	pop	ar0
      000515 89 02            [24] 1318 	mov	ar2,r1
      000517 7C 00            [12] 1319 	mov	r4,#0x00
      000519 7E 40            [12] 1320 	mov	r6,#0x40
      00051B C0 07            [24] 1321 	push	ar7
      00051D C0 05            [24] 1322 	push	ar5
      00051F C0 01            [24] 1323 	push	ar1
      000521 C0 00            [24] 1324 	push	ar0
      000523 C0 03            [24] 1325 	push	ar3
      000525 85 00 F0         [24] 1326 	mov	b,ar0
      000528 E5*00            [12] 1327 	mov	a,_bp
      00052A 24 04            [12] 1328 	add	a,#0x04
      00052C F8               [12] 1329 	mov	r0,a
      00052D E6               [12] 1330 	mov	a,@r0
      00052E C0 E0            [24] 1331 	push	acc
      000530 08               [12] 1332 	inc	r0
      000531 E6               [12] 1333 	mov	a,@r0
      000532 C0 E0            [24] 1334 	push	acc
      000534 08               [12] 1335 	inc	r0
      000535 E6               [12] 1336 	mov	a,@r0
      000536 C0 E0            [24] 1337 	push	acc
      000538 8A 82            [24] 1338 	mov	dpl,r2
      00053A 8C 83            [24] 1339 	mov	dph,r4
      00053C 8E F0            [24] 1340 	mov	b,r6
      00053E 12r00r3A         [24] 1341 	lcall	_update
      000541 AE 82            [24] 1342 	mov	r6,dpl
      000543 E5 81            [12] 1343 	mov	a,sp
      000545 24 FC            [12] 1344 	add	a,#0xfc
      000547 F5 81            [12] 1345 	mov	sp,a
      000549 D0 00            [24] 1346 	pop	ar0
      00054B D0 01            [24] 1347 	pop	ar1
      00054D D0 05            [24] 1348 	pop	ar5
      00054F D0 07            [24] 1349 	pop	ar7
      000551 D0 05            [24] 1350 	pop	ar5
      000553 EE               [12] 1351 	mov	a,r6
      000554 70 03            [24] 1352 	jnz	00192$
      000556 02r06r24         [24] 1353 	ljmp	00125$
      000559                       1354 00192$:
                                   1355 ;	walk.c:139: if (!qadd(&t)) bang();
      000559 C0 00            [24] 1356 	push	ar0
      00055B E5*00            [12] 1357 	mov	a,_bp
      00055D 24 03            [12] 1358 	add	a,#0x03
      00055F F8               [12] 1359 	mov	r0,a
      000560 86 03            [24] 1360 	mov	ar3,@r0
      000562 7C 00            [12] 1361 	mov	r4,#0x00
      000564 7E 40            [12] 1362 	mov	r6,#0x40
      000566 D0 00            [24] 1363 	pop	ar0
      000568 8B 82            [24] 1364 	mov	dpl,r3
      00056A 8C 83            [24] 1365 	mov	dph,r4
      00056C 8E F0            [24] 1366 	mov	b,r6
      00056E C0 07            [24] 1367 	push	ar7
      000570 C0 05            [24] 1368 	push	ar5
      000572 C0 01            [24] 1369 	push	ar1
      000574 C0 00            [24] 1370 	push	ar0
      000576 12r0Ar2D         [24] 1371 	lcall	_qadd
      000579 E5 82            [12] 1372 	mov	a,dpl
      00057B D0 00            [24] 1373 	pop	ar0
      00057D D0 01            [24] 1374 	pop	ar1
      00057F D0 05            [24] 1375 	pop	ar5
      000581 D0 07            [24] 1376 	pop	ar7
      000583 70 13            [24] 1377 	jnz	00115$
      000585 C0 07            [24] 1378 	push	ar7
      000587 C0 05            [24] 1379 	push	ar5
      000589 C0 01            [24] 1380 	push	ar1
      00058B C0 00            [24] 1381 	push	ar0
      00058D 12r00r1A         [24] 1382 	lcall	_bang
      000590 D0 00            [24] 1383 	pop	ar0
      000592 D0 01            [24] 1384 	pop	ar1
      000594 D0 05            [24] 1385 	pop	ar5
      000596 D0 07            [24] 1386 	pop	ar7
      000598                       1387 00115$:
                                   1388 ;	walk.c:140: g[t.r][t.c] = 0xaau;
      000598 87 04            [24] 1389 	mov	ar4,@r1
      00059A 09               [12] 1390 	inc	r1
      00059B 87 06            [24] 1391 	mov	ar6,@r1
      00059D 19               [12] 1392 	dec	r1
      00059E C0 07            [24] 1393 	push	ar7
      0005A0 C0 05            [24] 1394 	push	ar5
      0005A2 C0 01            [24] 1395 	push	ar1
      0005A4 C0 00            [24] 1396 	push	ar0
      0005A6 C0 04            [24] 1397 	push	ar4
      0005A8 C0 06            [24] 1398 	push	ar6
      0005AA 90 00 C9         [24] 1399 	mov	dptr,#0x00c9
      0005AD 12r00r00         [24] 1400 	lcall	__mulint
      0005B0 AC 82            [24] 1401 	mov	r4,dpl
      0005B2 AE 83            [24] 1402 	mov	r6,dph
      0005B4 15 81            [12] 1403 	dec	sp
      0005B6 15 81            [12] 1404 	dec	sp
      0005B8 D0 00            [24] 1405 	pop	ar0
      0005BA D0 01            [24] 1406 	pop	ar1
      0005BC D0 05            [24] 1407 	pop	ar5
      0005BE D0 07            [24] 1408 	pop	ar7
      0005C0 EC               [12] 1409 	mov	a,r4
      0005C1 24r00            [12] 1410 	add	a,#_g
      0005C3 FC               [12] 1411 	mov	r4,a
      0005C4 EE               [12] 1412 	mov	a,r6
      0005C5 34s00            [12] 1413 	addc	a,#(_g >> 8)
      0005C7 FE               [12] 1414 	mov	r6,a
      0005C8 86 02            [24] 1415 	mov	ar2,@r0
      0005CA 08               [12] 1416 	inc	r0
      0005CB 86 03            [24] 1417 	mov	ar3,@r0
      0005CD 18               [12] 1418 	dec	r0
      0005CE EA               [12] 1419 	mov	a,r2
      0005CF 2C               [12] 1420 	add	a,r4
      0005D0 F5 82            [12] 1421 	mov	dpl,a
      0005D2 EB               [12] 1422 	mov	a,r3
      0005D3 3E               [12] 1423 	addc	a,r6
      0005D4 F5 83            [12] 1424 	mov	dph,a
      0005D6 74 AA            [12] 1425 	mov	a,#0xaa
      0005D8 F0               [24] 1426 	movx	@dptr,a
                                   1427 ;	walk.c:142: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      0005D9 86 04            [24] 1428 	mov	ar4,@r0
      0005DB 08               [12] 1429 	inc	r0
      0005DC 86 06            [24] 1430 	mov	ar6,@r0
      0005DE 18               [12] 1431 	dec	r0
      0005DF 0C               [12] 1432 	inc	r4
      0005E0 BC 00 01         [24] 1433 	cjne	r4,#0x00,00194$
      0005E3 0E               [12] 1434 	inc	r6
      0005E4                       1435 00194$:
      0005E4 87 02            [24] 1436 	mov	ar2,@r1
      0005E6 09               [12] 1437 	inc	r1
      0005E7 87 03            [24] 1438 	mov	ar3,@r1
      0005E9 19               [12] 1439 	dec	r1
      0005EA 74 04            [12] 1440 	mov	a,#0x04
      0005EC 2A               [12] 1441 	add	a,r2
      0005ED FA               [12] 1442 	mov	r2,a
      0005EE E4               [12] 1443 	clr	a
      0005EF 3B               [12] 1444 	addc	a,r3
      0005F0 FB               [12] 1445 	mov	r3,a
      0005F1 C0 07            [24] 1446 	push	ar7
      0005F3 C0 05            [24] 1447 	push	ar5
      0005F5 C0 01            [24] 1448 	push	ar1
      0005F7 C0 00            [24] 1449 	push	ar0
      0005F9 C0 04            [24] 1450 	push	ar4
      0005FB C0 06            [24] 1451 	push	ar6
      0005FD C0 02            [24] 1452 	push	ar2
      0005FF C0 03            [24] 1453 	push	ar3
      000601 74r2E            [12] 1454 	mov	a,#___str_3
      000603 C0 E0            [24] 1455 	push	acc
      000605 74s00            [12] 1456 	mov	a,#(___str_3 >> 8)
      000607 C0 E0            [24] 1457 	push	acc
      000609 74 80            [12] 1458 	mov	a,#0x80
      00060B C0 E0            [24] 1459 	push	acc
      00060D 12r00r00         [24] 1460 	lcall	_printf
      000610 E5 81            [12] 1461 	mov	a,sp
      000612 24 F9            [12] 1462 	add	a,#0xf9
      000614 F5 81            [12] 1463 	mov	sp,a
                                   1464 ;	walk.c:143: flashOE(OE76_MASK7);
      000616 75 82 80         [24] 1465 	mov	dpl,#0x80
      000619 12r00r27         [24] 1466 	lcall	_flashOE
      00061C D0 00            [24] 1467 	pop	ar0
      00061E D0 01            [24] 1468 	pop	ar1
      000620 D0 05            [24] 1469 	pop	ar5
      000622 D0 07            [24] 1470 	pop	ar7
      000624                       1471 00125$:
                                   1472 ;	walk.c:137: for (j = 0u; j < NMAX; j++)
      000624 C0 00            [24] 1473 	push	ar0
      000626 E5*00            [12] 1474 	mov	a,_bp
      000628 24 20            [12] 1475 	add	a,#0x20
      00062A F8               [12] 1476 	mov	r0,a
      00062B 06               [12] 1477 	inc	@r0
      00062C E5*00            [12] 1478 	mov	a,_bp
      00062E 24 20            [12] 1479 	add	a,#0x20
      000630 F8               [12] 1480 	mov	r0,a
      000631 B6 10 00         [24] 1481 	cjne	@r0,#0x10,00195$
      000634                       1482 00195$:
      000634 D0 00            [24] 1483 	pop	ar0
      000636 50 03            [24] 1484 	jnc	00196$
      000638 02r04rEF         [24] 1485 	ljmp	00124$
      00063B                       1486 00196$:
                                   1487 ;	walk.c:146: goto process;
      00063B 02r03r69         [24] 1488 	ljmp	00103$
                                   1489 ;	walk.c:148: term:
      00063E                       1490 00119$:
                                   1491 ;	walk.c:149: return;
                                   1492 ;	walk.c:150: }
      00063E 85*00 81         [24] 1493 	mov	sp,_bp
      000641 D0*00            [24] 1494 	pop	_bp
      000643 22               [24] 1495 	ret
                                   1496 ;------------------------------------------------------------
                                   1497 ;Allocation info for local variables in function 'main'
                                   1498 ;------------------------------------------------------------
                                   1499 ;initial                   Allocated to stack - _bp +5
                                   1500 ;N                         Allocated to stack - _bp +9
                                   1501 ;i                         Allocated to stack - _bp +11
                                   1502 ;j                         Allocated to registers r2 r6 
                                   1503 ;sloc0                     Allocated to stack - _bp +1
                                   1504 ;sloc1                     Allocated to stack - _bp +3
                                   1505 ;sloc2                     Allocated to stack - _bp +15
                                   1506 ;------------------------------------------------------------
                                   1507 ;	walk.c:152: void main(void) {
                                   1508 ;	-----------------------------------------
                                   1509 ;	 function main
                                   1510 ;	-----------------------------------------
      000644                       1511 _main:
      000644 C0*00            [24] 1512 	push	_bp
      000646 E5 81            [12] 1513 	mov	a,sp
      000648 F5*00            [12] 1514 	mov	_bp,a
      00064A 24 0C            [12] 1515 	add	a,#0x0c
      00064C F5 81            [12] 1516 	mov	sp,a
                                   1517 ;	walk.c:157: i0 = 1u;
      00064E 78r00            [12] 1518 	mov	r0,#_i0
      000650 76 01            [12] 1519 	mov	@r0,#0x01
                                   1520 ;	walk.c:159: P1_7 = 1;
                                   1521 ;	assignBit
      000652 D2 97            [12] 1522 	setb	_P1_7
                                   1523 ;	walk.c:160: IT0 = 1;
                                   1524 ;	assignBit
      000654 D2 88            [12] 1525 	setb	_IT0
                                   1526 ;	walk.c:161: EX0 = 1;
                                   1527 ;	assignBit
      000656 D2 A8            [12] 1528 	setb	_EX0
                                   1529 ;	walk.c:162: EA = 1;
                                   1530 ;	assignBit
      000658 D2 AF            [12] 1531 	setb	_EA
                                   1532 ;	walk.c:164: srand(RND);
      00065A 90 80 00         [24] 1533 	mov	dptr,#_RND
      00065D E0               [24] 1534 	movx	a,@dptr
      00065E FE               [12] 1535 	mov	r6,a
      00065F A3               [24] 1536 	inc	dptr
      000660 E0               [24] 1537 	movx	a,@dptr
      000661 FF               [12] 1538 	mov	r7,a
      000662 8E 82            [24] 1539 	mov	dpl,r6
      000664 8F 83            [24] 1540 	mov	dph,r7
      000666 12r00r00         [24] 1541 	lcall	_srand
                                   1542 ;	walk.c:165: qinit();
      000669 12r0Ar1F         [24] 1543 	lcall	_qinit
                                   1544 ;	walk.c:167: puts("\033[2J\033[?25l");
      00066C 90r00r38         [24] 1545 	mov	dptr,#___str_4
      00066F 75 F0 80         [24] 1546 	mov	b,#0x80
      000672 12r00r00         [24] 1547 	lcall	_puts
                                   1548 ;	walk.c:169: while (i0) {
      000675 E5*00            [12] 1549 	mov	a,_bp
      000677 24 05            [12] 1550 	add	a,#0x05
      000679 F9               [12] 1551 	mov	r1,a
      00067A FF               [12] 1552 	mov	r7,a
      00067B E5*00            [12] 1553 	mov	a,_bp
      00067D 24 09            [12] 1554 	add	a,#0x09
      00067F F8               [12] 1555 	mov	r0,a
      000680 E4               [12] 1556 	clr	a
      000681 F6               [12] 1557 	mov	@r0,a
      000682 08               [12] 1558 	inc	r0
      000683 F6               [12] 1559 	mov	@r0,a
      000684                       1560 00108$:
      000684 78r00            [12] 1561 	mov	r0,#_i0
      000686 E6               [12] 1562 	mov	a,@r0
      000687 70 03            [24] 1563 	jnz	00182$
      000689 02r0Ar0B         [24] 1564 	ljmp	00110$
      00068C                       1565 00182$:
                                   1566 ;	walk.c:170: for (i = 0; i < ROWS; i++)
      00068C 7B 00            [12] 1567 	mov	r3,#0x00
      00068E 7C 00            [12] 1568 	mov	r4,#0x00
      000690 A8*00            [24] 1569 	mov	r0,_bp
      000692 08               [12] 1570 	inc	r0
      000693 E4               [12] 1571 	clr	a
      000694 F6               [12] 1572 	mov	@r0,a
      000695 08               [12] 1573 	inc	r0
      000696 F6               [12] 1574 	mov	@r0,a
                                   1575 ;	walk.c:171: for (j = 0; j < COLS; j++)
      000697                       1576 00125$:
      000697 A8*00            [24] 1577 	mov	r0,_bp
      000699 08               [12] 1578 	inc	r0
      00069A C0 01            [24] 1579 	push	ar1
      00069C E5*00            [12] 1580 	mov	a,_bp
      00069E 24 03            [12] 1581 	add	a,#0x03
      0006A0 F9               [12] 1582 	mov	r1,a
      0006A1 E6               [12] 1583 	mov	a,@r0
      0006A2 24r00            [12] 1584 	add	a,#_g
      0006A4 F7               [12] 1585 	mov	@r1,a
      0006A5 08               [12] 1586 	inc	r0
      0006A6 E6               [12] 1587 	mov	a,@r0
      0006A7 34s00            [12] 1588 	addc	a,#(_g >> 8)
      0006A9 09               [12] 1589 	inc	r1
      0006AA F7               [12] 1590 	mov	@r1,a
      0006AB D0 01            [24] 1591 	pop	ar1
      0006AD 7A 00            [12] 1592 	mov	r2,#0x00
      0006AF 7E 00            [12] 1593 	mov	r6,#0x00
      0006B1                       1594 00112$:
                                   1595 ;	walk.c:172: g[i][j] = 0x55u;
      0006B1 E5*00            [12] 1596 	mov	a,_bp
      0006B3 24 03            [12] 1597 	add	a,#0x03
      0006B5 F8               [12] 1598 	mov	r0,a
      0006B6 EA               [12] 1599 	mov	a,r2
      0006B7 26               [12] 1600 	add	a,@r0
      0006B8 F5 82            [12] 1601 	mov	dpl,a
      0006BA EE               [12] 1602 	mov	a,r6
      0006BB 08               [12] 1603 	inc	r0
      0006BC 36               [12] 1604 	addc	a,@r0
      0006BD F5 83            [12] 1605 	mov	dph,a
      0006BF 74 55            [12] 1606 	mov	a,#0x55
      0006C1 F0               [24] 1607 	movx	@dptr,a
                                   1608 ;	walk.c:171: for (j = 0; j < COLS; j++)
      0006C2 0A               [12] 1609 	inc	r2
      0006C3 BA 00 01         [24] 1610 	cjne	r2,#0x00,00183$
      0006C6 0E               [12] 1611 	inc	r6
      0006C7                       1612 00183$:
      0006C7 C3               [12] 1613 	clr	c
      0006C8 EA               [12] 1614 	mov	a,r2
      0006C9 94 C9            [12] 1615 	subb	a,#0xc9
      0006CB EE               [12] 1616 	mov	a,r6
      0006CC 64 80            [12] 1617 	xrl	a,#0x80
      0006CE 94 80            [12] 1618 	subb	a,#0x80
      0006D0 40 DF            [24] 1619 	jc	00112$
                                   1620 ;	walk.c:170: for (i = 0; i < ROWS; i++)
      0006D2 A8*00            [24] 1621 	mov	r0,_bp
      0006D4 08               [12] 1622 	inc	r0
      0006D5 74 C9            [12] 1623 	mov	a,#0xc9
      0006D7 26               [12] 1624 	add	a,@r0
      0006D8 F6               [12] 1625 	mov	@r0,a
      0006D9 E4               [12] 1626 	clr	a
      0006DA 08               [12] 1627 	inc	r0
      0006DB 36               [12] 1628 	addc	a,@r0
      0006DC F6               [12] 1629 	mov	@r0,a
      0006DD 0B               [12] 1630 	inc	r3
      0006DE BB 00 01         [24] 1631 	cjne	r3,#0x00,00185$
      0006E1 0C               [12] 1632 	inc	r4
      0006E2                       1633 00185$:
      0006E2 C3               [12] 1634 	clr	c
      0006E3 EB               [12] 1635 	mov	a,r3
      0006E4 94 30            [12] 1636 	subb	a,#0x30
      0006E6 EC               [12] 1637 	mov	a,r4
      0006E7 64 80            [12] 1638 	xrl	a,#0x80
      0006E9 94 80            [12] 1639 	subb	a,#0x80
      0006EB 40 AA            [24] 1640 	jc	00125$
                                   1641 ;	walk.c:174: initial.r = rand() % ROWS;
      0006ED E5*00            [12] 1642 	mov	a,_bp
      0006EF 24 05            [12] 1643 	add	a,#0x05
      0006F1 F8               [12] 1644 	mov	r0,a
      0006F2 C0 07            [24] 1645 	push	ar7
      0006F4 C0 01            [24] 1646 	push	ar1
      0006F6 C0 00            [24] 1647 	push	ar0
      0006F8 12r00r00         [24] 1648 	lcall	_rand
      0006FB AD 82            [24] 1649 	mov	r5,dpl
      0006FD AE 83            [24] 1650 	mov	r6,dph
      0006FF 74 30            [12] 1651 	mov	a,#0x30
      000701 C0 E0            [24] 1652 	push	acc
      000703 E4               [12] 1653 	clr	a
      000704 C0 E0            [24] 1654 	push	acc
      000706 8D 82            [24] 1655 	mov	dpl,r5
      000708 8E 83            [24] 1656 	mov	dph,r6
      00070A 12r00r00         [24] 1657 	lcall	__modsint
      00070D AD 82            [24] 1658 	mov	r5,dpl
      00070F AE 83            [24] 1659 	mov	r6,dph
      000711 15 81            [12] 1660 	dec	sp
      000713 15 81            [12] 1661 	dec	sp
      000715 D0 00            [24] 1662 	pop	ar0
      000717 D0 01            [24] 1663 	pop	ar1
      000719 A6 05            [24] 1664 	mov	@r0,ar5
      00071B 08               [12] 1665 	inc	r0
      00071C A6 06            [24] 1666 	mov	@r0,ar6
      00071E 18               [12] 1667 	dec	r0
                                   1668 ;	walk.c:175: initial.c = rand() % COLS;
      00071F 74 02            [12] 1669 	mov	a,#0x02
      000721 29               [12] 1670 	add	a,r1
      000722 F8               [12] 1671 	mov	r0,a
      000723 C0 01            [24] 1672 	push	ar1
      000725 C0 00            [24] 1673 	push	ar0
      000727 12r00r00         [24] 1674 	lcall	_rand
      00072A AD 82            [24] 1675 	mov	r5,dpl
      00072C AE 83            [24] 1676 	mov	r6,dph
      00072E 74 C9            [12] 1677 	mov	a,#0xc9
      000730 C0 E0            [24] 1678 	push	acc
      000732 E4               [12] 1679 	clr	a
      000733 C0 E0            [24] 1680 	push	acc
      000735 8D 82            [24] 1681 	mov	dpl,r5
      000737 8E 83            [24] 1682 	mov	dph,r6
      000739 12r00r00         [24] 1683 	lcall	__modsint
      00073C AD 82            [24] 1684 	mov	r5,dpl
      00073E AE 83            [24] 1685 	mov	r6,dph
      000740 15 81            [12] 1686 	dec	sp
      000742 15 81            [12] 1687 	dec	sp
      000744 D0 00            [24] 1688 	pop	ar0
      000746 A6 05            [24] 1689 	mov	@r0,ar5
      000748 08               [12] 1690 	inc	r0
      000749 A6 06            [24] 1691 	mov	@r0,ar6
      00074B 18               [12] 1692 	dec	r0
                                   1693 ;	walk.c:177: puts("\033[2J\033[?25l");
      00074C 90r00r38         [24] 1694 	mov	dptr,#___str_4
      00074F 75 F0 80         [24] 1695 	mov	b,#0x80
      000752 C0 00            [24] 1696 	push	ar0
      000754 12r00r00         [24] 1697 	lcall	_puts
      000757 D0 00            [24] 1698 	pop	ar0
      000759 D0 01            [24] 1699 	pop	ar1
                                   1700 ;	walk.c:178: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00075B 86 05            [24] 1701 	mov	ar5,@r0
      00075D 08               [12] 1702 	inc	r0
      00075E 86 06            [24] 1703 	mov	ar6,@r0
      000760 18               [12] 1704 	dec	r0
      000761 87 03            [24] 1705 	mov	ar3,@r1
      000763 09               [12] 1706 	inc	r1
      000764 87 04            [24] 1707 	mov	ar4,@r1
      000766 19               [12] 1708 	dec	r1
      000767 C0 01            [24] 1709 	push	ar1
      000769 C0 05            [24] 1710 	push	ar5
      00076B C0 06            [24] 1711 	push	ar6
      00076D C0 03            [24] 1712 	push	ar3
      00076F C0 04            [24] 1713 	push	ar4
      000771 E5*00            [12] 1714 	mov	a,_bp
      000773 24 09            [12] 1715 	add	a,#0x09
      000775 F8               [12] 1716 	mov	r0,a
      000776 E6               [12] 1717 	mov	a,@r0
      000777 C0 E0            [24] 1718 	push	acc
      000779 08               [12] 1719 	inc	r0
      00077A E6               [12] 1720 	mov	a,@r0
      00077B C0 E0            [24] 1721 	push	acc
      00077D 74r43            [12] 1722 	mov	a,#___str_5
      00077F C0 E0            [24] 1723 	push	acc
      000781 74s00            [12] 1724 	mov	a,#(___str_5 >> 8)
      000783 C0 E0            [24] 1725 	push	acc
      000785 74 80            [12] 1726 	mov	a,#0x80
      000787 C0 E0            [24] 1727 	push	acc
      000789 12r00r00         [24] 1728 	lcall	_printf
      00078C E5 81            [12] 1729 	mov	a,sp
      00078E 24 F7            [12] 1730 	add	a,#0xf7
      000790 F5 81            [12] 1731 	mov	sp,a
      000792 D0 01            [24] 1732 	pop	ar1
      000794 D0 07            [24] 1733 	pop	ar7
                                   1734 ;	walk.c:180: for (i = 0; i < REG; i++) {
      000796 E5*00            [12] 1735 	mov	a,_bp
      000798 24 0B            [12] 1736 	add	a,#0x0b
      00079A F8               [12] 1737 	mov	r0,a
      00079B E4               [12] 1738 	clr	a
      00079C F6               [12] 1739 	mov	@r0,a
      00079D 08               [12] 1740 	inc	r0
      00079E F6               [12] 1741 	mov	@r0,a
      00079F                       1742 00116$:
                                   1743 ;	walk.c:181: neigh[i].r = neigh[REG + i].r * (1 + rand() % 32);
      00079F C0 07            [24] 1744 	push	ar7
      0007A1 E5*00            [12] 1745 	mov	a,_bp
      0007A3 24 0B            [12] 1746 	add	a,#0x0b
      0007A5 F8               [12] 1747 	mov	r0,a
      0007A6 E6               [12] 1748 	mov	a,@r0
      0007A7 25 E0            [12] 1749 	add	a,acc
      0007A9 FB               [12] 1750 	mov	r3,a
      0007AA 08               [12] 1751 	inc	r0
      0007AB E6               [12] 1752 	mov	a,@r0
      0007AC 33               [12] 1753 	rlc	a
      0007AD FC               [12] 1754 	mov	r4,a
      0007AE EB               [12] 1755 	mov	a,r3
      0007AF 2B               [12] 1756 	add	a,r3
      0007B0 FB               [12] 1757 	mov	r3,a
      0007B1 EC               [12] 1758 	mov	a,r4
      0007B2 33               [12] 1759 	rlc	a
      0007B3 FC               [12] 1760 	mov	r4,a
      0007B4 E5*00            [12] 1761 	mov	a,_bp
      0007B6 24 03            [12] 1762 	add	a,#0x03
      0007B8 F8               [12] 1763 	mov	r0,a
      0007B9 EB               [12] 1764 	mov	a,r3
      0007BA 24r00            [12] 1765 	add	a,#_neigh
      0007BC F6               [12] 1766 	mov	@r0,a
      0007BD EC               [12] 1767 	mov	a,r4
      0007BE 34s00            [12] 1768 	addc	a,#(_neigh >> 8)
      0007C0 08               [12] 1769 	inc	r0
      0007C1 F6               [12] 1770 	mov	@r0,a
      0007C2 E5*00            [12] 1771 	mov	a,_bp
      0007C4 24 0B            [12] 1772 	add	a,#0x0b
      0007C6 F8               [12] 1773 	mov	r0,a
      0007C7 86 06            [24] 1774 	mov	ar6,@r0
      0007C9 74 08            [12] 1775 	mov	a,#0x08
      0007CB 2E               [12] 1776 	add	a,r6
      0007CC FE               [12] 1777 	mov	r6,a
      0007CD C2 D5            [12] 1778 	clr	F0
      0007CF 75 F0 04         [24] 1779 	mov	b,#0x04
      0007D2 EE               [12] 1780 	mov	a,r6
      0007D3 30 E7 04         [24] 1781 	jnb	acc.7,00187$
      0007D6 B2 D5            [12] 1782 	cpl	F0
      0007D8 F4               [12] 1783 	cpl	a
      0007D9 04               [12] 1784 	inc	a
      0007DA                       1785 00187$:
      0007DA A4               [48] 1786 	mul	ab
      0007DB 30 D5 0A         [24] 1787 	jnb	F0,00188$
      0007DE F4               [12] 1788 	cpl	a
      0007DF 24 01            [12] 1789 	add	a,#0x01
      0007E1 C5 F0            [12] 1790 	xch	a,b
      0007E3 F4               [12] 1791 	cpl	a
      0007E4 34 00            [12] 1792 	addc	a,#0x00
      0007E6 C5 F0            [12] 1793 	xch	a,b
      0007E8                       1794 00188$:
      0007E8 FE               [12] 1795 	mov	r6,a
      0007E9 AD F0            [24] 1796 	mov	r5,b
      0007EB 24r00            [12] 1797 	add	a,#_neigh
      0007ED F5 82            [12] 1798 	mov	dpl,a
      0007EF ED               [12] 1799 	mov	a,r5
      0007F0 34s00            [12] 1800 	addc	a,#(_neigh >> 8)
      0007F2 F5 83            [12] 1801 	mov	dph,a
      0007F4 A8*00            [24] 1802 	mov	r0,_bp
      0007F6 08               [12] 1803 	inc	r0
      0007F7 E0               [24] 1804 	movx	a,@dptr
      0007F8 F6               [12] 1805 	mov	@r0,a
      0007F9 A3               [24] 1806 	inc	dptr
      0007FA E0               [24] 1807 	movx	a,@dptr
      0007FB 08               [12] 1808 	inc	r0
      0007FC F6               [12] 1809 	mov	@r0,a
      0007FD C0 06            [24] 1810 	push	ar6
      0007FF C0 05            [24] 1811 	push	ar5
      000801 C0 04            [24] 1812 	push	ar4
      000803 C0 03            [24] 1813 	push	ar3
      000805 C0 01            [24] 1814 	push	ar1
      000807 12r00r00         [24] 1815 	lcall	_rand
      00080A AA 82            [24] 1816 	mov	r2,dpl
      00080C AF 83            [24] 1817 	mov	r7,dph
      00080E 74 20            [12] 1818 	mov	a,#0x20
      000810 C0 E0            [24] 1819 	push	acc
      000812 E4               [12] 1820 	clr	a
      000813 C0 E0            [24] 1821 	push	acc
      000815 8A 82            [24] 1822 	mov	dpl,r2
      000817 8F 83            [24] 1823 	mov	dph,r7
      000819 12r00r00         [24] 1824 	lcall	__modsint
      00081C AA 82            [24] 1825 	mov	r2,dpl
      00081E AF 83            [24] 1826 	mov	r7,dph
      000820 15 81            [12] 1827 	dec	sp
      000822 15 81            [12] 1828 	dec	sp
      000824 D0 01            [24] 1829 	pop	ar1
      000826 D0 03            [24] 1830 	pop	ar3
      000828 D0 04            [24] 1831 	pop	ar4
      00082A D0 05            [24] 1832 	pop	ar5
      00082C D0 06            [24] 1833 	pop	ar6
      00082E 0A               [12] 1834 	inc	r2
      00082F BA 00 01         [24] 1835 	cjne	r2,#0x00,00189$
      000832 0F               [12] 1836 	inc	r7
      000833                       1837 00189$:
      000833 C0 06            [24] 1838 	push	ar6
      000835 C0 05            [24] 1839 	push	ar5
      000837 C0 04            [24] 1840 	push	ar4
      000839 C0 03            [24] 1841 	push	ar3
      00083B C0 01            [24] 1842 	push	ar1
      00083D C0 02            [24] 1843 	push	ar2
      00083F C0 07            [24] 1844 	push	ar7
      000841 A8*00            [24] 1845 	mov	r0,_bp
      000843 08               [12] 1846 	inc	r0
      000844 86 82            [24] 1847 	mov	dpl,@r0
      000846 08               [12] 1848 	inc	r0
      000847 86 83            [24] 1849 	mov	dph,@r0
      000849 12r00r00         [24] 1850 	lcall	__mulint
      00084C AA 82            [24] 1851 	mov	r2,dpl
      00084E AF 83            [24] 1852 	mov	r7,dph
      000850 15 81            [12] 1853 	dec	sp
      000852 15 81            [12] 1854 	dec	sp
      000854 D0 01            [24] 1855 	pop	ar1
      000856 D0 03            [24] 1856 	pop	ar3
      000858 D0 04            [24] 1857 	pop	ar4
      00085A D0 05            [24] 1858 	pop	ar5
      00085C D0 06            [24] 1859 	pop	ar6
      00085E E5*00            [12] 1860 	mov	a,_bp
      000860 24 03            [12] 1861 	add	a,#0x03
      000862 F8               [12] 1862 	mov	r0,a
      000863 86 82            [24] 1863 	mov	dpl,@r0
      000865 08               [12] 1864 	inc	r0
      000866 86 83            [24] 1865 	mov	dph,@r0
      000868 EA               [12] 1866 	mov	a,r2
      000869 F0               [24] 1867 	movx	@dptr,a
      00086A EF               [12] 1868 	mov	a,r7
      00086B A3               [24] 1869 	inc	dptr
      00086C F0               [24] 1870 	movx	@dptr,a
                                   1871 ;	walk.c:182: neigh[i].c = neigh[REG + i].c * (1 + rand() % 32);
      00086D EB               [12] 1872 	mov	a,r3
      00086E 24r00            [12] 1873 	add	a,#_neigh
      000870 FB               [12] 1874 	mov	r3,a
      000871 EC               [12] 1875 	mov	a,r4
      000872 34s00            [12] 1876 	addc	a,#(_neigh >> 8)
      000874 FC               [12] 1877 	mov	r4,a
      000875 74 02            [12] 1878 	mov	a,#0x02
      000877 2B               [12] 1879 	add	a,r3
      000878 FA               [12] 1880 	mov	r2,a
      000879 E4               [12] 1881 	clr	a
      00087A 3C               [12] 1882 	addc	a,r4
      00087B FF               [12] 1883 	mov	r7,a
      00087C EE               [12] 1884 	mov	a,r6
      00087D 24r00            [12] 1885 	add	a,#_neigh
      00087F FE               [12] 1886 	mov	r6,a
      000880 ED               [12] 1887 	mov	a,r5
      000881 34s00            [12] 1888 	addc	a,#(_neigh >> 8)
      000883 FD               [12] 1889 	mov	r5,a
      000884 8E 82            [24] 1890 	mov	dpl,r6
      000886 8D 83            [24] 1891 	mov	dph,r5
      000888 A3               [24] 1892 	inc	dptr
      000889 A3               [24] 1893 	inc	dptr
      00088A E5*00            [12] 1894 	mov	a,_bp
      00088C 24 03            [12] 1895 	add	a,#0x03
      00088E F8               [12] 1896 	mov	r0,a
      00088F E0               [24] 1897 	movx	a,@dptr
      000890 F6               [12] 1898 	mov	@r0,a
      000891 A3               [24] 1899 	inc	dptr
      000892 E0               [24] 1900 	movx	a,@dptr
      000893 08               [12] 1901 	inc	r0
      000894 F6               [12] 1902 	mov	@r0,a
      000895 C0 07            [24] 1903 	push	ar7
      000897 C0 04            [24] 1904 	push	ar4
      000899 C0 03            [24] 1905 	push	ar3
      00089B C0 02            [24] 1906 	push	ar2
      00089D C0 01            [24] 1907 	push	ar1
      00089F 12r00r00         [24] 1908 	lcall	_rand
      0008A2 AD 82            [24] 1909 	mov	r5,dpl
      0008A4 AE 83            [24] 1910 	mov	r6,dph
      0008A6 74 20            [12] 1911 	mov	a,#0x20
      0008A8 C0 E0            [24] 1912 	push	acc
      0008AA E4               [12] 1913 	clr	a
      0008AB C0 E0            [24] 1914 	push	acc
      0008AD 8D 82            [24] 1915 	mov	dpl,r5
      0008AF 8E 83            [24] 1916 	mov	dph,r6
      0008B1 12r00r00         [24] 1917 	lcall	__modsint
      0008B4 AD 82            [24] 1918 	mov	r5,dpl
      0008B6 AE 83            [24] 1919 	mov	r6,dph
      0008B8 15 81            [12] 1920 	dec	sp
      0008BA 15 81            [12] 1921 	dec	sp
      0008BC D0 01            [24] 1922 	pop	ar1
      0008BE D0 02            [24] 1923 	pop	ar2
      0008C0 D0 03            [24] 1924 	pop	ar3
      0008C2 D0 04            [24] 1925 	pop	ar4
      0008C4 D0 07            [24] 1926 	pop	ar7
      0008C6 0D               [12] 1927 	inc	r5
      0008C7 BD 00 01         [24] 1928 	cjne	r5,#0x00,00190$
      0008CA 0E               [12] 1929 	inc	r6
      0008CB                       1930 00190$:
      0008CB C0 07            [24] 1931 	push	ar7
      0008CD C0 04            [24] 1932 	push	ar4
      0008CF C0 03            [24] 1933 	push	ar3
      0008D1 C0 02            [24] 1934 	push	ar2
      0008D3 C0 01            [24] 1935 	push	ar1
      0008D5 C0 05            [24] 1936 	push	ar5
      0008D7 C0 06            [24] 1937 	push	ar6
      0008D9 E5*00            [12] 1938 	mov	a,_bp
      0008DB 24 03            [12] 1939 	add	a,#0x03
      0008DD F8               [12] 1940 	mov	r0,a
      0008DE 86 82            [24] 1941 	mov	dpl,@r0
      0008E0 08               [12] 1942 	inc	r0
      0008E1 86 83            [24] 1943 	mov	dph,@r0
      0008E3 12r00r00         [24] 1944 	lcall	__mulint
      0008E6 AD 82            [24] 1945 	mov	r5,dpl
      0008E8 AE 83            [24] 1946 	mov	r6,dph
      0008EA 15 81            [12] 1947 	dec	sp
      0008EC 15 81            [12] 1948 	dec	sp
      0008EE D0 01            [24] 1949 	pop	ar1
      0008F0 D0 02            [24] 1950 	pop	ar2
      0008F2 D0 03            [24] 1951 	pop	ar3
      0008F4 D0 04            [24] 1952 	pop	ar4
      0008F6 D0 07            [24] 1953 	pop	ar7
      0008F8 8A 82            [24] 1954 	mov	dpl,r2
      0008FA 8F 83            [24] 1955 	mov	dph,r7
      0008FC ED               [12] 1956 	mov	a,r5
      0008FD F0               [24] 1957 	movx	@dptr,a
      0008FE EE               [12] 1958 	mov	a,r6
      0008FF A3               [24] 1959 	inc	dptr
      000900 F0               [24] 1960 	movx	@dptr,a
                                   1961 ;	walk.c:183: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000901 8B 82            [24] 1962 	mov	dpl,r3
      000903 8C 83            [24] 1963 	mov	dph,r4
      000905 E0               [24] 1964 	movx	a,@dptr
      000906 FB               [12] 1965 	mov	r3,a
      000907 A3               [24] 1966 	inc	dptr
      000908 E0               [24] 1967 	movx	a,@dptr
      000909 FC               [12] 1968 	mov	r4,a
      00090A C0 07            [24] 1969 	push	ar7
      00090C C0 01            [24] 1970 	push	ar1
      00090E C0 05            [24] 1971 	push	ar5
      000910 C0 06            [24] 1972 	push	ar6
      000912 C0 03            [24] 1973 	push	ar3
      000914 C0 04            [24] 1974 	push	ar4
      000916 74r56            [12] 1975 	mov	a,#___str_6
      000918 C0 E0            [24] 1976 	push	acc
      00091A 74s00            [12] 1977 	mov	a,#(___str_6 >> 8)
      00091C C0 E0            [24] 1978 	push	acc
      00091E 74 80            [12] 1979 	mov	a,#0x80
      000920 C0 E0            [24] 1980 	push	acc
      000922 12r00r00         [24] 1981 	lcall	_printf
      000925 E5 81            [12] 1982 	mov	a,sp
      000927 24 F9            [12] 1983 	add	a,#0xf9
      000929 F5 81            [12] 1984 	mov	sp,a
      00092B D0 01            [24] 1985 	pop	ar1
      00092D D0 07            [24] 1986 	pop	ar7
                                   1987 ;	walk.c:180: for (i = 0; i < REG; i++) {
      00092F E5*00            [12] 1988 	mov	a,_bp
      000931 24 0B            [12] 1989 	add	a,#0x0b
      000933 F8               [12] 1990 	mov	r0,a
      000934 06               [12] 1991 	inc	@r0
      000935 B6 00 02         [24] 1992 	cjne	@r0,#0x00,00191$
      000938 08               [12] 1993 	inc	r0
      000939 06               [12] 1994 	inc	@r0
      00093A                       1995 00191$:
      00093A E5*00            [12] 1996 	mov	a,_bp
      00093C 24 0B            [12] 1997 	add	a,#0x0b
      00093E F8               [12] 1998 	mov	r0,a
      00093F 86 05            [24] 1999 	mov	ar5,@r0
      000941 08               [12] 2000 	inc	r0
      000942 86 06            [24] 2001 	mov	ar6,@r0
      000944 C3               [12] 2002 	clr	c
      000945 ED               [12] 2003 	mov	a,r5
      000946 94 08            [12] 2004 	subb	a,#0x08
      000948 EE               [12] 2005 	mov	a,r6
      000949 94 00            [12] 2006 	subb	a,#0x00
      00094B D0 07            [24] 2007 	pop	ar7
      00094D 50 03            [24] 2008 	jnc	00192$
      00094F 02r07r9F         [24] 2009 	ljmp	00116$
      000952                       2010 00192$:
                                   2011 ;	walk.c:186: OE76 = OE76_0;
      000952 78r01            [12] 2012 	mov	r0,#_OE76
      000954 76 3F            [12] 2013 	mov	@r0,#0x3f
                                   2014 ;	walk.c:187: flashOE(OE76_NC);
      000956 75 82 00         [24] 2015 	mov	dpl,#0x00
      000959 C0 07            [24] 2016 	push	ar7
      00095B C0 01            [24] 2017 	push	ar1
      00095D 12r00r27         [24] 2018 	lcall	_flashOE
      000960 D0 01            [24] 2019 	pop	ar1
      000962 D0 07            [24] 2020 	pop	ar7
                                   2021 ;	walk.c:189: walk(&initial);
      000964 8F 04            [24] 2022 	mov	ar4,r7
      000966 7D 00            [12] 2023 	mov	r5,#0x00
      000968 7E 40            [12] 2024 	mov	r6,#0x40
      00096A 8C 82            [24] 2025 	mov	dpl,r4
      00096C 8D 83            [24] 2026 	mov	dph,r5
      00096E 8E F0            [24] 2027 	mov	b,r6
      000970 C0 07            [24] 2028 	push	ar7
      000972 C0 01            [24] 2029 	push	ar1
      000974 12r02rC7         [24] 2030 	lcall	_walk
      000977 D0 01            [24] 2031 	pop	ar1
      000979 D0 07            [24] 2032 	pop	ar7
                                   2033 ;	walk.c:191: for (i = 0; i < ROWS; i++)
      00097B E5*00            [12] 2034 	mov	a,_bp
      00097D 24 0B            [12] 2035 	add	a,#0x0b
      00097F F8               [12] 2036 	mov	r0,a
      000980 E4               [12] 2037 	clr	a
      000981 F6               [12] 2038 	mov	@r0,a
      000982 08               [12] 2039 	inc	r0
      000983 F6               [12] 2040 	mov	@r0,a
      000984 7B 00            [12] 2041 	mov	r3,#0x00
      000986 7C 00            [12] 2042 	mov	r4,#0x00
                                   2043 ;	walk.c:192: for (j = 0; j < COLS; j++)
      000988                       2044 00132$:
      000988 E5*00            [12] 2045 	mov	a,_bp
      00098A 24 03            [12] 2046 	add	a,#0x03
      00098C F8               [12] 2047 	mov	r0,a
      00098D EB               [12] 2048 	mov	a,r3
      00098E 24r00            [12] 2049 	add	a,#_g
      000990 F6               [12] 2050 	mov	@r0,a
      000991 EC               [12] 2051 	mov	a,r4
      000992 34s00            [12] 2052 	addc	a,#(_g >> 8)
      000994 08               [12] 2053 	inc	r0
      000995 F6               [12] 2054 	mov	@r0,a
      000996 7A 00            [12] 2055 	mov	r2,#0x00
      000998 7E 00            [12] 2056 	mov	r6,#0x00
      00099A                       2057 00118$:
                                   2058 ;	walk.c:193: if (g[i][j] != 0xaau) bang();
      00099A E5*00            [12] 2059 	mov	a,_bp
      00099C 24 03            [12] 2060 	add	a,#0x03
      00099E F8               [12] 2061 	mov	r0,a
      00099F EA               [12] 2062 	mov	a,r2
      0009A0 26               [12] 2063 	add	a,@r0
      0009A1 F5 82            [12] 2064 	mov	dpl,a
      0009A3 EE               [12] 2065 	mov	a,r6
      0009A4 08               [12] 2066 	inc	r0
      0009A5 36               [12] 2067 	addc	a,@r0
      0009A6 F5 83            [12] 2068 	mov	dph,a
      0009A8 E0               [24] 2069 	movx	a,@dptr
      0009A9 FD               [12] 2070 	mov	r5,a
      0009AA BD AA 02         [24] 2071 	cjne	r5,#0xaa,00193$
      0009AD 80 1B            [24] 2072 	sjmp	00119$
      0009AF                       2073 00193$:
      0009AF C0 07            [24] 2074 	push	ar7
      0009B1 C0 06            [24] 2075 	push	ar6
      0009B3 C0 04            [24] 2076 	push	ar4
      0009B5 C0 03            [24] 2077 	push	ar3
      0009B7 C0 02            [24] 2078 	push	ar2
      0009B9 C0 01            [24] 2079 	push	ar1
      0009BB 12r00r1A         [24] 2080 	lcall	_bang
      0009BE D0 01            [24] 2081 	pop	ar1
      0009C0 D0 02            [24] 2082 	pop	ar2
      0009C2 D0 03            [24] 2083 	pop	ar3
      0009C4 D0 04            [24] 2084 	pop	ar4
      0009C6 D0 06            [24] 2085 	pop	ar6
      0009C8 D0 07            [24] 2086 	pop	ar7
      0009CA                       2087 00119$:
                                   2088 ;	walk.c:192: for (j = 0; j < COLS; j++)
      0009CA 0A               [12] 2089 	inc	r2
      0009CB BA 00 01         [24] 2090 	cjne	r2,#0x00,00194$
      0009CE 0E               [12] 2091 	inc	r6
      0009CF                       2092 00194$:
      0009CF C3               [12] 2093 	clr	c
      0009D0 EA               [12] 2094 	mov	a,r2
      0009D1 94 C9            [12] 2095 	subb	a,#0xc9
      0009D3 EE               [12] 2096 	mov	a,r6
      0009D4 64 80            [12] 2097 	xrl	a,#0x80
      0009D6 94 80            [12] 2098 	subb	a,#0x80
      0009D8 40 C0            [24] 2099 	jc	00118$
                                   2100 ;	walk.c:191: for (i = 0; i < ROWS; i++)
      0009DA 74 C9            [12] 2101 	mov	a,#0xc9
      0009DC 2B               [12] 2102 	add	a,r3
      0009DD FB               [12] 2103 	mov	r3,a
      0009DE E4               [12] 2104 	clr	a
      0009DF 3C               [12] 2105 	addc	a,r4
      0009E0 FC               [12] 2106 	mov	r4,a
      0009E1 E5*00            [12] 2107 	mov	a,_bp
      0009E3 24 0B            [12] 2108 	add	a,#0x0b
      0009E5 F8               [12] 2109 	mov	r0,a
      0009E6 06               [12] 2110 	inc	@r0
      0009E7 B6 00 02         [24] 2111 	cjne	@r0,#0x00,00196$
      0009EA 08               [12] 2112 	inc	r0
      0009EB 06               [12] 2113 	inc	@r0
      0009EC                       2114 00196$:
      0009EC E5*00            [12] 2115 	mov	a,_bp
      0009EE 24 0B            [12] 2116 	add	a,#0x0b
      0009F0 F8               [12] 2117 	mov	r0,a
      0009F1 C3               [12] 2118 	clr	c
      0009F2 E6               [12] 2119 	mov	a,@r0
      0009F3 94 30            [12] 2120 	subb	a,#0x30
      0009F5 08               [12] 2121 	inc	r0
      0009F6 E6               [12] 2122 	mov	a,@r0
      0009F7 64 80            [12] 2123 	xrl	a,#0x80
      0009F9 94 80            [12] 2124 	subb	a,#0x80
      0009FB 40 8B            [24] 2125 	jc	00132$
                                   2126 ;	walk.c:195: N++;
      0009FD E5*00            [12] 2127 	mov	a,_bp
      0009FF 24 09            [12] 2128 	add	a,#0x09
      000A01 F8               [12] 2129 	mov	r0,a
      000A02 06               [12] 2130 	inc	@r0
      000A03 B6 00 02         [24] 2131 	cjne	@r0,#0x00,00198$
      000A06 08               [12] 2132 	inc	r0
      000A07 06               [12] 2133 	inc	@r0
      000A08                       2134 00198$:
      000A08 02r06r84         [24] 2135 	ljmp	00108$
      000A0B                       2136 00110$:
                                   2137 ;	walk.c:198: EA = 0;
                                   2138 ;	assignBit
      000A0B C2 AF            [12] 2139 	clr	_EA
                                   2140 ;	walk.c:200: puts("\033[2J\033[?25h");
      000A0D 90r00r5F         [24] 2141 	mov	dptr,#___str_7
      000A10 75 F0 80         [24] 2142 	mov	b,#0x80
      000A13 12r00r00         [24] 2143 	lcall	_puts
                                   2144 ;	walk.c:35: PCON |= 2;
      000A16 43 87 02         [24] 2145 	orl	_PCON,#0x02
                                   2146 ;	walk.c:202: reset();
                                   2147 ;	walk.c:203: }
      000A19 85*00 81         [24] 2148 	mov	sp,_bp
      000A1C D0*00            [24] 2149 	pop	_bp
      000A1E 22               [24] 2150 	ret
                                   2151 ;------------------------------------------------------------
                                   2152 ;Allocation info for local variables in function 'qinit'
                                   2153 ;------------------------------------------------------------
                                   2154 ;	walk.c:205: static void qinit(void) {
                                   2155 ;	-----------------------------------------
                                   2156 ;	 function qinit
                                   2157 ;	-----------------------------------------
      000A1F                       2158 _qinit:
                                   2159 ;	walk.c:206: hp = tp = 0;
      000A1F 90rBCr72         [24] 2160 	mov	dptr,#_tp
      000A22 E4               [12] 2161 	clr	a
      000A23 F0               [24] 2162 	movx	@dptr,a
      000A24 A3               [24] 2163 	inc	dptr
      000A25 F0               [24] 2164 	movx	@dptr,a
      000A26 90rBCr70         [24] 2165 	mov	dptr,#_hp
      000A29 F0               [24] 2166 	movx	@dptr,a
      000A2A A3               [24] 2167 	inc	dptr
      000A2B F0               [24] 2168 	movx	@dptr,a
                                   2169 ;	walk.c:207: return;
                                   2170 ;	walk.c:208: }
      000A2C 22               [24] 2171 	ret
                                   2172 ;------------------------------------------------------------
                                   2173 ;Allocation info for local variables in function 'qadd'
                                   2174 ;------------------------------------------------------------
                                   2175 ;t                         Allocated to registers r7 r5 r6 
                                   2176 ;sloc0                     Allocated to stack - _bp +1
                                   2177 ;sloc1                     Allocated to stack - _bp +3
                                   2178 ;sloc2                     Allocated to stack - _bp +5
                                   2179 ;sloc3                     Allocated to stack - _bp +10
                                   2180 ;------------------------------------------------------------
                                   2181 ;	walk.c:210: static uint8_t qadd(struct node *t) {
                                   2182 ;	-----------------------------------------
                                   2183 ;	 function qadd
                                   2184 ;	-----------------------------------------
      000A2D                       2185 _qadd:
      000A2D C0*00            [24] 2186 	push	_bp
      000A2F E5 81            [12] 2187 	mov	a,sp
      000A31 F5*00            [12] 2188 	mov	_bp,a
      000A33 24 06            [12] 2189 	add	a,#0x06
      000A35 F5 81            [12] 2190 	mov	sp,a
      000A37 AF 82            [24] 2191 	mov	r7,dpl
      000A39 AD 83            [24] 2192 	mov	r5,dph
      000A3B AE F0            [24] 2193 	mov	r6,b
                                   2194 ;	walk.c:211: if (((hp + 1) % QMAX) == tp) return 0u;
      000A3D 90rBCr70         [24] 2195 	mov	dptr,#_hp
      000A40 E0               [24] 2196 	movx	a,@dptr
      000A41 FB               [12] 2197 	mov	r3,a
      000A42 A3               [24] 2198 	inc	dptr
      000A43 E0               [24] 2199 	movx	a,@dptr
      000A44 FC               [12] 2200 	mov	r4,a
      000A45 A8*00            [24] 2201 	mov	r0,_bp
      000A47 08               [12] 2202 	inc	r0
      000A48 74 01            [12] 2203 	mov	a,#0x01
      000A4A 2B               [12] 2204 	add	a,r3
      000A4B F6               [12] 2205 	mov	@r0,a
      000A4C E4               [12] 2206 	clr	a
      000A4D 3C               [12] 2207 	addc	a,r4
      000A4E 08               [12] 2208 	inc	r0
      000A4F F6               [12] 2209 	mov	@r0,a
      000A50 C0 07            [24] 2210 	push	ar7
      000A52 C0 06            [24] 2211 	push	ar6
      000A54 C0 05            [24] 2212 	push	ar5
      000A56 C0 04            [24] 2213 	push	ar4
      000A58 C0 03            [24] 2214 	push	ar3
      000A5A 74 B0            [12] 2215 	mov	a,#0xb0
      000A5C C0 E0            [24] 2216 	push	acc
      000A5E 74 25            [12] 2217 	mov	a,#0x25
      000A60 C0 E0            [24] 2218 	push	acc
      000A62 A8*00            [24] 2219 	mov	r0,_bp
      000A64 08               [12] 2220 	inc	r0
      000A65 86 82            [24] 2221 	mov	dpl,@r0
      000A67 08               [12] 2222 	inc	r0
      000A68 86 83            [24] 2223 	mov	dph,@r0
      000A6A 12r00r00         [24] 2224 	lcall	__modsint
      000A6D A8*00            [24] 2225 	mov	r0,_bp
      000A6F 08               [12] 2226 	inc	r0
      000A70 08               [12] 2227 	inc	r0
      000A71 08               [12] 2228 	inc	r0
      000A72 A6 82            [24] 2229 	mov	@r0,dpl
      000A74 08               [12] 2230 	inc	r0
      000A75 A6 83            [24] 2231 	mov	@r0,dph
      000A77 15 81            [12] 2232 	dec	sp
      000A79 15 81            [12] 2233 	dec	sp
      000A7B D0 03            [24] 2234 	pop	ar3
      000A7D D0 04            [24] 2235 	pop	ar4
      000A7F D0 05            [24] 2236 	pop	ar5
      000A81 D0 06            [24] 2237 	pop	ar6
      000A83 D0 07            [24] 2238 	pop	ar7
      000A85 90rBCr72         [24] 2239 	mov	dptr,#_tp
      000A88 E5*00            [12] 2240 	mov	a,_bp
      000A8A 24 05            [12] 2241 	add	a,#0x05
      000A8C F8               [12] 2242 	mov	r0,a
      000A8D E0               [24] 2243 	movx	a,@dptr
      000A8E F6               [12] 2244 	mov	@r0,a
      000A8F A3               [24] 2245 	inc	dptr
      000A90 E0               [24] 2246 	movx	a,@dptr
      000A91 08               [12] 2247 	inc	r0
      000A92 F6               [12] 2248 	mov	@r0,a
      000A93 E5*00            [12] 2249 	mov	a,_bp
      000A95 24 03            [12] 2250 	add	a,#0x03
      000A97 F8               [12] 2251 	mov	r0,a
      000A98 E5*00            [12] 2252 	mov	a,_bp
      000A9A 24 05            [12] 2253 	add	a,#0x05
      000A9C F9               [12] 2254 	mov	r1,a
      000A9D 86 F0            [24] 2255 	mov	b,@r0
      000A9F E7               [12] 2256 	mov	a,@r1
      000AA0 B5 F0 0A         [24] 2257 	cjne	a,b,00109$
      000AA3 08               [12] 2258 	inc	r0
      000AA4 86 F0            [24] 2259 	mov	b,@r0
      000AA6 09               [12] 2260 	inc	r1
      000AA7 E7               [12] 2261 	mov	a,@r1
      000AA8 B5 F0 02         [24] 2262 	cjne	a,b,00109$
      000AAB 80 02            [24] 2263 	sjmp	00110$
      000AAD                       2264 00109$:
      000AAD 80 05            [24] 2265 	sjmp	00102$
      000AAF                       2266 00110$:
      000AAF 75 82 00         [24] 2267 	mov	dpl,#0x00
      000AB2 80 65            [24] 2268 	sjmp	00103$
      000AB4                       2269 00102$:
                                   2270 ;	walk.c:212: queue[hp] = *t;
      000AB4 8F 02            [24] 2271 	mov	ar2,r7
      000AB6 8E 07            [24] 2272 	mov	ar7,r6
      000AB8 EB               [12] 2273 	mov	a,r3
      000AB9 2B               [12] 2274 	add	a,r3
      000ABA FB               [12] 2275 	mov	r3,a
      000ABB EC               [12] 2276 	mov	a,r4
      000ABC 33               [12] 2277 	rlc	a
      000ABD FC               [12] 2278 	mov	r4,a
      000ABE EB               [12] 2279 	mov	a,r3
      000ABF 2B               [12] 2280 	add	a,r3
      000AC0 FB               [12] 2281 	mov	r3,a
      000AC1 EC               [12] 2282 	mov	a,r4
      000AC2 33               [12] 2283 	rlc	a
      000AC3 FC               [12] 2284 	mov	r4,a
      000AC4 EB               [12] 2285 	mov	a,r3
      000AC5 24rB0            [12] 2286 	add	a,#_queue
      000AC7 FB               [12] 2287 	mov	r3,a
      000AC8 EC               [12] 2288 	mov	a,r4
      000AC9 34s25            [12] 2289 	addc	a,#(_queue >> 8)
      000ACB FC               [12] 2290 	mov	r4,a
      000ACC 7E 00            [12] 2291 	mov	r6,#0x00
      000ACE 74 04            [12] 2292 	mov	a,#0x04
      000AD0 C0 E0            [24] 2293 	push	acc
      000AD2 E4               [12] 2294 	clr	a
      000AD3 C0 E0            [24] 2295 	push	acc
      000AD5 C0 02            [24] 2296 	push	ar2
      000AD7 C0 05            [24] 2297 	push	ar5
      000AD9 C0 07            [24] 2298 	push	ar7
      000ADB 8B 82            [24] 2299 	mov	dpl,r3
      000ADD 8C 83            [24] 2300 	mov	dph,r4
      000ADF 8E F0            [24] 2301 	mov	b,r6
      000AE1 12r00r00         [24] 2302 	lcall	___memcpy
      000AE4 E5 81            [12] 2303 	mov	a,sp
      000AE6 24 FB            [12] 2304 	add	a,#0xfb
      000AE8 F5 81            [12] 2305 	mov	sp,a
                                   2306 ;	walk.c:213: hp = (hp + 1) % QMAX;
      000AEA 90rBCr70         [24] 2307 	mov	dptr,#_hp
      000AED E0               [24] 2308 	movx	a,@dptr
      000AEE FD               [12] 2309 	mov	r5,a
      000AEF A3               [24] 2310 	inc	dptr
      000AF0 E0               [24] 2311 	movx	a,@dptr
      000AF1 FE               [12] 2312 	mov	r6,a
      000AF2 0D               [12] 2313 	inc	r5
      000AF3 BD 00 01         [24] 2314 	cjne	r5,#0x00,00111$
      000AF6 0E               [12] 2315 	inc	r6
      000AF7                       2316 00111$:
      000AF7 74 B0            [12] 2317 	mov	a,#0xb0
      000AF9 C0 E0            [24] 2318 	push	acc
      000AFB 74 25            [12] 2319 	mov	a,#0x25
      000AFD C0 E0            [24] 2320 	push	acc
      000AFF 8D 82            [24] 2321 	mov	dpl,r5
      000B01 8E 83            [24] 2322 	mov	dph,r6
      000B03 12r00r00         [24] 2323 	lcall	__modsint
      000B06 AD 82            [24] 2324 	mov	r5,dpl
      000B08 AE 83            [24] 2325 	mov	r6,dph
      000B0A 15 81            [12] 2326 	dec	sp
      000B0C 15 81            [12] 2327 	dec	sp
      000B0E 90rBCr70         [24] 2328 	mov	dptr,#_hp
      000B11 ED               [12] 2329 	mov	a,r5
      000B12 F0               [24] 2330 	movx	@dptr,a
      000B13 EE               [12] 2331 	mov	a,r6
      000B14 A3               [24] 2332 	inc	dptr
      000B15 F0               [24] 2333 	movx	@dptr,a
                                   2334 ;	walk.c:214: return 1u;
      000B16 75 82 01         [24] 2335 	mov	dpl,#0x01
      000B19                       2336 00103$:
                                   2337 ;	walk.c:215: }
      000B19 85*00 81         [24] 2338 	mov	sp,_bp
      000B1C D0*00            [24] 2339 	pop	_bp
      000B1E 22               [24] 2340 	ret
                                   2341 ;------------------------------------------------------------
                                   2342 ;Allocation info for local variables in function 'qget'
                                   2343 ;------------------------------------------------------------
                                   2344 ;t                         Allocated to registers r5 r6 r7 
                                   2345 ;------------------------------------------------------------
                                   2346 ;	walk.c:217: static uint8_t qget(struct node *t) {
                                   2347 ;	-----------------------------------------
                                   2348 ;	 function qget
                                   2349 ;	-----------------------------------------
      000B1F                       2350 _qget:
      000B1F AD 82            [24] 2351 	mov	r5,dpl
      000B21 AE 83            [24] 2352 	mov	r6,dph
      000B23 AF F0            [24] 2353 	mov	r7,b
                                   2354 ;	walk.c:218: if (hp == tp) return 0u;
      000B25 90rBCr70         [24] 2355 	mov	dptr,#_hp
      000B28 E0               [24] 2356 	movx	a,@dptr
      000B29 FB               [12] 2357 	mov	r3,a
      000B2A A3               [24] 2358 	inc	dptr
      000B2B E0               [24] 2359 	movx	a,@dptr
      000B2C FC               [12] 2360 	mov	r4,a
      000B2D 90rBCr72         [24] 2361 	mov	dptr,#_tp
      000B30 E0               [24] 2362 	movx	a,@dptr
      000B31 F9               [12] 2363 	mov	r1,a
      000B32 A3               [24] 2364 	inc	dptr
      000B33 E0               [24] 2365 	movx	a,@dptr
      000B34 FA               [12] 2366 	mov	r2,a
      000B35 EB               [12] 2367 	mov	a,r3
      000B36 B5 01 08         [24] 2368 	cjne	a,ar1,00102$
      000B39 EC               [12] 2369 	mov	a,r4
      000B3A B5 02 04         [24] 2370 	cjne	a,ar2,00102$
      000B3D 75 82 00         [24] 2371 	mov	dpl,#0x00
      000B40 22               [24] 2372 	ret
      000B41                       2373 00102$:
                                   2374 ;	walk.c:219: *t = queue[tp];
      000B41 E9               [12] 2375 	mov	a,r1
      000B42 29               [12] 2376 	add	a,r1
      000B43 F9               [12] 2377 	mov	r1,a
      000B44 EA               [12] 2378 	mov	a,r2
      000B45 33               [12] 2379 	rlc	a
      000B46 FA               [12] 2380 	mov	r2,a
      000B47 E9               [12] 2381 	mov	a,r1
      000B48 29               [12] 2382 	add	a,r1
      000B49 F9               [12] 2383 	mov	r1,a
      000B4A EA               [12] 2384 	mov	a,r2
      000B4B 33               [12] 2385 	rlc	a
      000B4C FA               [12] 2386 	mov	r2,a
      000B4D E9               [12] 2387 	mov	a,r1
      000B4E 24rB0            [12] 2388 	add	a,#_queue
      000B50 F9               [12] 2389 	mov	r1,a
      000B51 EA               [12] 2390 	mov	a,r2
      000B52 34s25            [12] 2391 	addc	a,#(_queue >> 8)
      000B54 FA               [12] 2392 	mov	r2,a
      000B55 7C 00            [12] 2393 	mov	r4,#0x00
      000B57 74 04            [12] 2394 	mov	a,#0x04
      000B59 C0 E0            [24] 2395 	push	acc
      000B5B E4               [12] 2396 	clr	a
      000B5C C0 E0            [24] 2397 	push	acc
      000B5E C0 01            [24] 2398 	push	ar1
      000B60 C0 02            [24] 2399 	push	ar2
      000B62 C0 04            [24] 2400 	push	ar4
      000B64 8D 82            [24] 2401 	mov	dpl,r5
      000B66 8E 83            [24] 2402 	mov	dph,r6
      000B68 8F F0            [24] 2403 	mov	b,r7
      000B6A 12r00r00         [24] 2404 	lcall	___memcpy
      000B6D E5 81            [12] 2405 	mov	a,sp
      000B6F 24 FB            [12] 2406 	add	a,#0xfb
      000B71 F5 81            [12] 2407 	mov	sp,a
                                   2408 ;	walk.c:220: tp = (tp + 1) % QMAX;
      000B73 90rBCr72         [24] 2409 	mov	dptr,#_tp
      000B76 E0               [24] 2410 	movx	a,@dptr
      000B77 FE               [12] 2411 	mov	r6,a
      000B78 A3               [24] 2412 	inc	dptr
      000B79 E0               [24] 2413 	movx	a,@dptr
      000B7A FF               [12] 2414 	mov	r7,a
      000B7B 0E               [12] 2415 	inc	r6
      000B7C BE 00 01         [24] 2416 	cjne	r6,#0x00,00111$
      000B7F 0F               [12] 2417 	inc	r7
      000B80                       2418 00111$:
      000B80 74 B0            [12] 2419 	mov	a,#0xb0
      000B82 C0 E0            [24] 2420 	push	acc
      000B84 74 25            [12] 2421 	mov	a,#0x25
      000B86 C0 E0            [24] 2422 	push	acc
      000B88 8E 82            [24] 2423 	mov	dpl,r6
      000B8A 8F 83            [24] 2424 	mov	dph,r7
      000B8C 12r00r00         [24] 2425 	lcall	__modsint
      000B8F AE 82            [24] 2426 	mov	r6,dpl
      000B91 AF 83            [24] 2427 	mov	r7,dph
      000B93 15 81            [12] 2428 	dec	sp
      000B95 15 81            [12] 2429 	dec	sp
      000B97 90rBCr72         [24] 2430 	mov	dptr,#_tp
      000B9A EE               [12] 2431 	mov	a,r6
      000B9B F0               [24] 2432 	movx	@dptr,a
      000B9C EF               [12] 2433 	mov	a,r7
      000B9D A3               [24] 2434 	inc	dptr
      000B9E F0               [24] 2435 	movx	@dptr,a
                                   2436 ;	walk.c:221: return 1u;
      000B9F 75 82 01         [24] 2437 	mov	dpl,#0x01
                                   2438 ;	walk.c:222: }
      000BA2 22               [24] 2439 	ret
                                   2440 	.area CSEG    (CODE)
                                   2441 	.area CONST   (CODE)
                                   2442 	.area CONST   (CODE)
      000000                       2443 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2444 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2445 	.db 0x00
                                   2446 	.area CSEG    (CODE)
                                   2447 	.area CONST   (CODE)
      00000D                       2448 ___str_1:
      00000D 1B                    2449 	.db 0x1b
      00000E 5B 32 3B 31 48 25 20  2450 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      000023 00                    2451 	.db 0x00
                                   2452 	.area CSEG    (CODE)
                                   2453 	.area CONST   (CODE)
      000024                       2454 ___str_2:
      000024 1B                    2455 	.db 0x1b
      000025 5B 25 64 3B 25 64 48  2456 	.ascii "[%d;%dH."
             2E
      00002D 00                    2457 	.db 0x00
                                   2458 	.area CSEG    (CODE)
                                   2459 	.area CONST   (CODE)
      00002E                       2460 ___str_3:
      00002E 1B                    2461 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2462 	.ascii "[%d;%dHo"
             6F
      000037 00                    2463 	.db 0x00
                                   2464 	.area CSEG    (CODE)
                                   2465 	.area CONST   (CODE)
      000038                       2466 ___str_4:
      000038 1B                    2467 	.db 0x1b
      000039 5B 32 4A              2468 	.ascii "[2J"
      00003C 1B                    2469 	.db 0x1b
      00003D 5B 3F 32 35 6C        2470 	.ascii "[?25l"
      000042 00                    2471 	.db 0x00
                                   2472 	.area CSEG    (CODE)
                                   2473 	.area CONST   (CODE)
      000043                       2474 ___str_5:
      000043 1B                    2475 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2476 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2477 	.db 0x00
                                   2478 	.area CSEG    (CODE)
                                   2479 	.area CONST   (CODE)
      000056                       2480 ___str_6:
      000056 25 20 38 64 25 20 38  2481 	.ascii "% 8d% 8d"
             64
      00005E 00                    2482 	.db 0x00
                                   2483 	.area CSEG    (CODE)
                                   2484 	.area CONST   (CODE)
      00005F                       2485 ___str_7:
      00005F 1B                    2486 	.db 0x1b
      000060 5B 32 4A              2487 	.ascii "[2J"
      000063 1B                    2488 	.db 0x1b
      000064 5B 3F 32 35 68        2489 	.ascii "[?25h"
      000069 00                    2490 	.db 0x00
                                   2491 	.area CSEG    (CODE)
                                   2492 	.area XINIT   (CODE)
      000000                       2493 __xinit__neigh:
      000000 FF FF                 2494 	.byte #0xff, #0xff	; -1
      000002 01 00                 2495 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2496 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2497 	.byte #0xff, #0xff	; -1
      000008 01 00                 2498 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2499 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2500 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2501 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2502 	.byte #0xff, #0xff	; -1
      000012 00 00                 2503 	.byte #0x00, #0x00	;  0
      000014 00 00                 2504 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2505 	.byte #0xff, #0xff	; -1
      000018 01 00                 2506 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2507 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2508 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2509 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2510 	.byte #0xff, #0xff	; -1
      000022 01 00                 2511 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2512 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2513 	.byte #0xff, #0xff	; -1
      000028 01 00                 2514 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2515 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2516 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2517 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2518 	.byte #0xff, #0xff	; -1
      000032 00 00                 2519 	.byte #0x00, #0x00	;  0
      000034 00 00                 2520 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2521 	.byte #0xff, #0xff	; -1
      000038 01 00                 2522 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2523 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2524 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2525 	.byte #0x01, #0x00	;  1
                                   2526 	.area CABS    (ABS,CODE)
