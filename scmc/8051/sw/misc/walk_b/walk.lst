                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _queue:
      0025B0                        325 	.ds 38592
      00BC70                        326 _hp:
      00BC70                        327 	.ds 2
      00BC72                        328 _tp:
      00BC72                        329 	.ds 2
                           00F006   330 _OEreg	=	0xf006
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
      000000                        339 _neigh:
      000000                        340 	.ds 64
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
      000003 02r00r17         [24]  357 	ljmp	_int0
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000006                        378 __sdcc_program_startup:
      000006 02r06rB2         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'putchar'
                                    387 ;------------------------------------------------------------
                                    388 ;c                         Allocated to registers 
                                    389 ;------------------------------------------------------------
                                    390 ;	walk.c:7: int putchar(int c) __naked {
                                    391 ;	-----------------------------------------
                                    392 ;	 function putchar
                                    393 ;	-----------------------------------------
      000000                        394 _putchar:
                                    395 ;	naked function: no prologue.
                                    396 ;	walk.c:15: __endasm;
      000000 C0 E0            [24]  397 	push	acc
      000002 E5 82            [12]  398 	mov	a, dpl
      000004 12 00 3C         [24]  399 	lcall	0x003c
      000007 D0 E0            [24]  400 	pop	acc
      000009 22               [24]  401 	ret
                                    402 ;	walk.c:16: }
                                    403 ;	naked function: no epilogue.
                                    404 ;------------------------------------------------------------
                                    405 ;Allocation info for local variables in function 'getchar'
                                    406 ;------------------------------------------------------------
                                    407 ;	walk.c:18: int getchar(void) __naked {
                                    408 ;	-----------------------------------------
                                    409 ;	 function getchar
                                    410 ;	-----------------------------------------
      00000A                        411 _getchar:
                                    412 ;	naked function: no prologue.
                                    413 ;	walk.c:26: __endasm;
      00000A C0 E0            [24]  414 	push	acc
      00000C 12 00 36         [24]  415 	lcall	0x0036
      00000F F5 82            [12]  416 	mov	dpl, a
      000011 75 83 00         [24]  417 	mov	dph, #0
      000014 D0 E0            [24]  418 	pop	acc
      000016 22               [24]  419 	ret
                                    420 ;	walk.c:27: }
                                    421 ;	naked function: no epilogue.
                                    422 ;------------------------------------------------------------
                                    423 ;Allocation info for local variables in function 'int0'
                                    424 ;------------------------------------------------------------
                                    425 ;	walk.c:33: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    426 ;	-----------------------------------------
                                    427 ;	 function int0
                                    428 ;	-----------------------------------------
      000017                        429 _int0:
                           00000F   430 	ar7 = 0x0f
                           00000E   431 	ar6 = 0x0e
                           00000D   432 	ar5 = 0x0d
                           00000C   433 	ar4 = 0x0c
                           00000B   434 	ar3 = 0x0b
                           00000A   435 	ar2 = 0x0a
                           000009   436 	ar1 = 0x09
                           000008   437 	ar0 = 0x08
      000017 C0 D0            [24]  438 	push	psw
      000019 75 D0 08         [24]  439 	mov	psw,#0x08
                                    440 ;	walk.c:34: i0 = 0u;
      00001C 78r00            [12]  441 	mov	r0,#_i0
      00001E 76 00            [12]  442 	mov	@r0,#0x00
                                    443 ;	walk.c:35: }
      000020 D0 D0            [24]  444 	pop	psw
      000022 32               [24]  445 	reti
                                    446 ;	eliminated unneeded push/pop dpl
                                    447 ;	eliminated unneeded push/pop dph
                                    448 ;	eliminated unneeded push/pop b
                                    449 ;	eliminated unneeded push/pop acc
                                    450 ;------------------------------------------------------------
                                    451 ;Allocation info for local variables in function 'bang'
                                    452 ;------------------------------------------------------------
                                    453 ;	walk.c:41: static void bang(void) {
                                    454 ;	-----------------------------------------
                                    455 ;	 function bang
                                    456 ;	-----------------------------------------
      000023                        457 _bang:
                           000007   458 	ar7 = 0x07
                           000006   459 	ar6 = 0x06
                           000005   460 	ar5 = 0x05
                           000004   461 	ar4 = 0x04
                           000003   462 	ar3 = 0x03
                           000002   463 	ar2 = 0x02
                           000001   464 	ar1 = 0x01
                           000000   465 	ar0 = 0x00
                                    466 ;	walk.c:42: (void)puts("Memory error");
      000023 90r00r00         [24]  467 	mov	dptr,#___str_0
      000026 75 F0 80         [24]  468 	mov	b,#0x80
      000029 12r00r00         [24]  469 	lcall	_puts
                                    470 ;	walk.c:38: PCON |= 2;
      00002C 43 87 02         [24]  471 	orl	_PCON,#0x02
                                    472 ;	walk.c:45: return;
                                    473 ;	walk.c:46: }
      00002F 22               [24]  474 	ret
                                    475 ;------------------------------------------------------------
                                    476 ;Allocation info for local variables in function 'setOE'
                                    477 ;------------------------------------------------------------
                                    478 ;mask                      Allocated to registers r7 
                                    479 ;------------------------------------------------------------
                                    480 ;	walk.c:88: static void setOE(uint8_t mask) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function setOE
                                    483 ;	-----------------------------------------
      000030                        484 _setOE:
      000030 AF 82            [24]  485 	mov	r7,dpl
                                    486 ;	walk.c:89: OE76 |= mask;
      000032 78r01            [12]  487 	mov	r0,#_OE76
      000034 EF               [12]  488 	mov	a,r7
      000035 46               [12]  489 	orl	a,@r0
      000036 F6               [12]  490 	mov	@r0,a
                                    491 ;	walk.c:90: P1_7 = 0;
                                    492 ;	assignBit
      000037 C2 97            [12]  493 	clr	_P1_7
                                    494 ;	walk.c:95: __endasm;
      000039 00               [12]  495 	nop
      00003A 00               [12]  496 	nop
      00003B 00               [12]  497 	nop
                                    498 ;	walk.c:96: OEreg = OE76;
      00003C 78r01            [12]  499 	mov	r0,#_OE76
      00003E 90 F0 06         [24]  500 	mov	dptr,#_OEreg
      000041 E6               [12]  501 	mov	a,@r0
      000042 F0               [24]  502 	movx	@dptr,a
                                    503 ;	walk.c:97: P1_7 = 1;
                                    504 ;	assignBit
      000043 D2 97            [12]  505 	setb	_P1_7
                                    506 ;	walk.c:102: __endasm;
      000045 00               [12]  507 	nop
      000046 00               [12]  508 	nop
      000047 00               [12]  509 	nop
                                    510 ;	walk.c:104: return;
                                    511 ;	walk.c:105: }
      000048 22               [24]  512 	ret
                                    513 ;------------------------------------------------------------
                                    514 ;Allocation info for local variables in function 'unsetOE'
                                    515 ;------------------------------------------------------------
                                    516 ;mask                      Allocated to registers r7 
                                    517 ;------------------------------------------------------------
                                    518 ;	walk.c:107: static void unsetOE(uint8_t mask) {
                                    519 ;	-----------------------------------------
                                    520 ;	 function unsetOE
                                    521 ;	-----------------------------------------
      000049                        522 _unsetOE:
                                    523 ;	walk.c:108: OE76 &= ~mask;
      000049 E5 82            [12]  524 	mov	a,dpl
      00004B F4               [12]  525 	cpl	a
      00004C FF               [12]  526 	mov	r7,a
      00004D 78r01            [12]  527 	mov	r0,#_OE76
      00004F 56               [12]  528 	anl	a,@r0
      000050 F6               [12]  529 	mov	@r0,a
                                    530 ;	walk.c:109: P1_7 = 0;
                                    531 ;	assignBit
      000051 C2 97            [12]  532 	clr	_P1_7
                                    533 ;	walk.c:114: __endasm;
      000053 00               [12]  534 	nop
      000054 00               [12]  535 	nop
      000055 00               [12]  536 	nop
                                    537 ;	walk.c:115: OEreg = OE76;
      000056 78r01            [12]  538 	mov	r0,#_OE76
      000058 90 F0 06         [24]  539 	mov	dptr,#_OEreg
      00005B E6               [12]  540 	mov	a,@r0
      00005C F0               [24]  541 	movx	@dptr,a
                                    542 ;	walk.c:116: P1_7 = 1;
                                    543 ;	assignBit
      00005D D2 97            [12]  544 	setb	_P1_7
                                    545 ;	walk.c:121: __endasm;
      00005F 00               [12]  546 	nop
      000060 00               [12]  547 	nop
      000061 00               [12]  548 	nop
                                    549 ;	walk.c:123: return;
                                    550 ;	walk.c:124: }
      000062 22               [24]  551 	ret
                                    552 ;------------------------------------------------------------
                                    553 ;Allocation info for local variables in function 'flipOE'
                                    554 ;------------------------------------------------------------
                                    555 ;mask                      Allocated to registers r7 
                                    556 ;------------------------------------------------------------
                                    557 ;	walk.c:126: static void flipOE(uint8_t mask) {
                                    558 ;	-----------------------------------------
                                    559 ;	 function flipOE
                                    560 ;	-----------------------------------------
      000063                        561 _flipOE:
      000063 AF 82            [24]  562 	mov	r7,dpl
                                    563 ;	walk.c:127: OE76 ^= mask;
      000065 78r01            [12]  564 	mov	r0,#_OE76
      000067 EF               [12]  565 	mov	a,r7
      000068 66               [12]  566 	xrl	a,@r0
      000069 F6               [12]  567 	mov	@r0,a
                                    568 ;	walk.c:128: P1_7 = 0;
                                    569 ;	assignBit
      00006A C2 97            [12]  570 	clr	_P1_7
                                    571 ;	walk.c:133: __endasm;
      00006C 00               [12]  572 	nop
      00006D 00               [12]  573 	nop
      00006E 00               [12]  574 	nop
                                    575 ;	walk.c:134: OEreg = OE76;
      00006F 78r01            [12]  576 	mov	r0,#_OE76
      000071 90 F0 06         [24]  577 	mov	dptr,#_OEreg
      000074 E6               [12]  578 	mov	a,@r0
      000075 F0               [24]  579 	movx	@dptr,a
                                    580 ;	walk.c:135: P1_7 = 1;
                                    581 ;	assignBit
      000076 D2 97            [12]  582 	setb	_P1_7
                                    583 ;	walk.c:140: __endasm;
      000078 00               [12]  584 	nop
      000079 00               [12]  585 	nop
      00007A 00               [12]  586 	nop
                                    587 ;	walk.c:142: return;
                                    588 ;	walk.c:143: }
      00007B 22               [24]  589 	ret
                                    590 ;------------------------------------------------------------
                                    591 ;Allocation info for local variables in function 'update'
                                    592 ;------------------------------------------------------------
                                    593 ;cur                       Allocated to stack - _bp -5
                                    594 ;j                         Allocated to stack - _bp -6
                                    595 ;t                         Allocated to stack - _bp +1
                                    596 ;sloc0                     Allocated to stack - _bp +4
                                    597 ;sloc1                     Allocated to stack - _bp +6
                                    598 ;sloc2                     Allocated to stack - _bp +8
                                    599 ;------------------------------------------------------------
                                    600 ;	walk.c:145: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    601 ;	-----------------------------------------
                                    602 ;	 function update
                                    603 ;	-----------------------------------------
      00007C                        604 _update:
      00007C C0*00            [24]  605 	push	_bp
      00007E 85 81*00         [24]  606 	mov	_bp,sp
      000081 C0 82            [24]  607 	push	dpl
      000083 C0 83            [24]  608 	push	dph
      000085 C0 F0            [24]  609 	push	b
      000087 E5 81            [12]  610 	mov	a,sp
      000089 24 07            [12]  611 	add	a,#0x07
      00008B F5 81            [12]  612 	mov	sp,a
                                    613 ;	walk.c:146: t->r = cur->r + neigh[j].r;
      00008D E5*00            [12]  614 	mov	a,_bp
      00008F 24 FB            [12]  615 	add	a,#0xfb
      000091 F8               [12]  616 	mov	r0,a
      000092 86 02            [24]  617 	mov	ar2,@r0
      000094 08               [12]  618 	inc	r0
      000095 86 03            [24]  619 	mov	ar3,@r0
      000097 08               [12]  620 	inc	r0
      000098 86 04            [24]  621 	mov	ar4,@r0
      00009A 8A 82            [24]  622 	mov	dpl,r2
      00009C 8B 83            [24]  623 	mov	dph,r3
      00009E 8C F0            [24]  624 	mov	b,r4
      0000A0 E5*00            [12]  625 	mov	a,_bp
      0000A2 24 04            [12]  626 	add	a,#0x04
      0000A4 F8               [12]  627 	mov	r0,a
      0000A5 12r00r00         [24]  628 	lcall	__gptrget
      0000A8 F6               [12]  629 	mov	@r0,a
      0000A9 A3               [24]  630 	inc	dptr
      0000AA 12r00r00         [24]  631 	lcall	__gptrget
      0000AD 08               [12]  632 	inc	r0
      0000AE F6               [12]  633 	mov	@r0,a
      0000AF E5*00            [12]  634 	mov	a,_bp
      0000B1 24 FA            [12]  635 	add	a,#0xfa
      0000B3 F8               [12]  636 	mov	r0,a
      0000B4 E5*00            [12]  637 	mov	a,_bp
      0000B6 24 06            [12]  638 	add	a,#0x06
      0000B8 F9               [12]  639 	mov	r1,a
      0000B9 E6               [12]  640 	mov	a,@r0
      0000BA 75 F0 04         [24]  641 	mov	b,#0x04
      0000BD A4               [48]  642 	mul	ab
      0000BE F7               [12]  643 	mov	@r1,a
      0000BF 09               [12]  644 	inc	r1
      0000C0 A7 F0            [24]  645 	mov	@r1,b
      0000C2 E5*00            [12]  646 	mov	a,_bp
      0000C4 24 06            [12]  647 	add	a,#0x06
      0000C6 F8               [12]  648 	mov	r0,a
      0000C7 E6               [12]  649 	mov	a,@r0
      0000C8 24r00            [12]  650 	add	a,#_neigh
      0000CA F5 82            [12]  651 	mov	dpl,a
      0000CC 08               [12]  652 	inc	r0
      0000CD E6               [12]  653 	mov	a,@r0
      0000CE 34s00            [12]  654 	addc	a,#(_neigh >> 8)
      0000D0 F5 83            [12]  655 	mov	dph,a
      0000D2 E0               [24]  656 	movx	a,@dptr
      0000D3 FF               [12]  657 	mov	r7,a
      0000D4 A3               [24]  658 	inc	dptr
      0000D5 E0               [24]  659 	movx	a,@dptr
      0000D6 FE               [12]  660 	mov	r6,a
      0000D7 E5*00            [12]  661 	mov	a,_bp
      0000D9 24 04            [12]  662 	add	a,#0x04
      0000DB F8               [12]  663 	mov	r0,a
      0000DC EF               [12]  664 	mov	a,r7
      0000DD 26               [12]  665 	add	a,@r0
      0000DE FF               [12]  666 	mov	r7,a
      0000DF EE               [12]  667 	mov	a,r6
      0000E0 08               [12]  668 	inc	r0
      0000E1 36               [12]  669 	addc	a,@r0
      0000E2 FE               [12]  670 	mov	r6,a
      0000E3 A8*00            [24]  671 	mov	r0,_bp
      0000E5 08               [12]  672 	inc	r0
      0000E6 86 82            [24]  673 	mov	dpl,@r0
      0000E8 08               [12]  674 	inc	r0
      0000E9 86 83            [24]  675 	mov	dph,@r0
      0000EB 08               [12]  676 	inc	r0
      0000EC 86 F0            [24]  677 	mov	b,@r0
      0000EE EF               [12]  678 	mov	a,r7
      0000EF 12r00r00         [24]  679 	lcall	__gptrput
      0000F2 A3               [24]  680 	inc	dptr
      0000F3 EE               [12]  681 	mov	a,r6
      0000F4 12r00r00         [24]  682 	lcall	__gptrput
                                    683 ;	walk.c:147: t->c = cur->c + neigh[j].c;
      0000F7 A8*00            [24]  684 	mov	r0,_bp
      0000F9 08               [12]  685 	inc	r0
      0000FA E5*00            [12]  686 	mov	a,_bp
      0000FC 24 08            [12]  687 	add	a,#0x08
      0000FE F9               [12]  688 	mov	r1,a
      0000FF 74 02            [12]  689 	mov	a,#0x02
      000101 26               [12]  690 	add	a,@r0
      000102 F7               [12]  691 	mov	@r1,a
      000103 E4               [12]  692 	clr	a
      000104 08               [12]  693 	inc	r0
      000105 36               [12]  694 	addc	a,@r0
      000106 09               [12]  695 	inc	r1
      000107 F7               [12]  696 	mov	@r1,a
      000108 08               [12]  697 	inc	r0
      000109 09               [12]  698 	inc	r1
      00010A E6               [12]  699 	mov	a,@r0
      00010B F7               [12]  700 	mov	@r1,a
      00010C 74 02            [12]  701 	mov	a,#0x02
      00010E 2A               [12]  702 	add	a,r2
      00010F FA               [12]  703 	mov	r2,a
      000110 E4               [12]  704 	clr	a
      000111 3B               [12]  705 	addc	a,r3
      000112 FB               [12]  706 	mov	r3,a
      000113 8A 82            [24]  707 	mov	dpl,r2
      000115 8B 83            [24]  708 	mov	dph,r3
      000117 8C F0            [24]  709 	mov	b,r4
      000119 12r00r00         [24]  710 	lcall	__gptrget
      00011C FA               [12]  711 	mov	r2,a
      00011D A3               [24]  712 	inc	dptr
      00011E 12r00r00         [24]  713 	lcall	__gptrget
      000121 FB               [12]  714 	mov	r3,a
      000122 E5*00            [12]  715 	mov	a,_bp
      000124 24 06            [12]  716 	add	a,#0x06
      000126 F8               [12]  717 	mov	r0,a
      000127 E6               [12]  718 	mov	a,@r0
      000128 24r00            [12]  719 	add	a,#_neigh
      00012A FC               [12]  720 	mov	r4,a
      00012B 08               [12]  721 	inc	r0
      00012C E6               [12]  722 	mov	a,@r0
      00012D 34s00            [12]  723 	addc	a,#(_neigh >> 8)
      00012F FD               [12]  724 	mov	r5,a
      000130 8C 82            [24]  725 	mov	dpl,r4
      000132 8D 83            [24]  726 	mov	dph,r5
      000134 A3               [24]  727 	inc	dptr
      000135 A3               [24]  728 	inc	dptr
      000136 E0               [24]  729 	movx	a,@dptr
      000137 FC               [12]  730 	mov	r4,a
      000138 A3               [24]  731 	inc	dptr
      000139 E0               [24]  732 	movx	a,@dptr
      00013A FD               [12]  733 	mov	r5,a
      00013B EC               [12]  734 	mov	a,r4
      00013C 2A               [12]  735 	add	a,r2
      00013D FA               [12]  736 	mov	r2,a
      00013E ED               [12]  737 	mov	a,r5
      00013F 3B               [12]  738 	addc	a,r3
      000140 FB               [12]  739 	mov	r3,a
      000141 E5*00            [12]  740 	mov	a,_bp
      000143 24 08            [12]  741 	add	a,#0x08
      000145 F8               [12]  742 	mov	r0,a
      000146 86 82            [24]  743 	mov	dpl,@r0
      000148 08               [12]  744 	inc	r0
      000149 86 83            [24]  745 	mov	dph,@r0
      00014B 08               [12]  746 	inc	r0
      00014C 86 F0            [24]  747 	mov	b,@r0
      00014E EA               [12]  748 	mov	a,r2
      00014F 12r00r00         [24]  749 	lcall	__gptrput
      000152 A3               [24]  750 	inc	dptr
      000153 EB               [12]  751 	mov	a,r3
      000154 12r00r00         [24]  752 	lcall	__gptrput
                                    753 ;	walk.c:149: if (t->r < 0) t->r += ROWS;
      000157 A8*00            [24]  754 	mov	r0,_bp
      000159 08               [12]  755 	inc	r0
      00015A 86 82            [24]  756 	mov	dpl,@r0
      00015C 08               [12]  757 	inc	r0
      00015D 86 83            [24]  758 	mov	dph,@r0
      00015F 08               [12]  759 	inc	r0
      000160 86 F0            [24]  760 	mov	b,@r0
      000162 12r00r00         [24]  761 	lcall	__gptrget
      000165 FD               [12]  762 	mov	r5,a
      000166 A3               [24]  763 	inc	dptr
      000167 12r00r00         [24]  764 	lcall	__gptrget
      00016A FC               [12]  765 	mov	r4,a
      00016B EE               [12]  766 	mov	a,r6
      00016C 30 E7 1D         [24]  767 	jnb	acc.7,00104$
      00016F 74 30            [12]  768 	mov	a,#0x30
      000171 2D               [12]  769 	add	a,r5
      000172 FF               [12]  770 	mov	r7,a
      000173 E4               [12]  771 	clr	a
      000174 3C               [12]  772 	addc	a,r4
      000175 FE               [12]  773 	mov	r6,a
      000176 A8*00            [24]  774 	mov	r0,_bp
      000178 08               [12]  775 	inc	r0
      000179 86 82            [24]  776 	mov	dpl,@r0
      00017B 08               [12]  777 	inc	r0
      00017C 86 83            [24]  778 	mov	dph,@r0
      00017E 08               [12]  779 	inc	r0
      00017F 86 F0            [24]  780 	mov	b,@r0
      000181 EF               [12]  781 	mov	a,r7
      000182 12r00r00         [24]  782 	lcall	__gptrput
      000185 A3               [24]  783 	inc	dptr
      000186 EE               [12]  784 	mov	a,r6
      000187 12r00r00         [24]  785 	lcall	__gptrput
      00018A 80 27            [24]  786 	sjmp	00105$
      00018C                        787 00104$:
                                    788 ;	walk.c:150: else if (t->r >= ROWS) t->r -= ROWS;
      00018C C3               [12]  789 	clr	c
      00018D ED               [12]  790 	mov	a,r5
      00018E 94 30            [12]  791 	subb	a,#0x30
      000190 EC               [12]  792 	mov	a,r4
      000191 64 80            [12]  793 	xrl	a,#0x80
      000193 94 80            [12]  794 	subb	a,#0x80
      000195 40 1C            [24]  795 	jc	00105$
      000197 ED               [12]  796 	mov	a,r5
      000198 24 D0            [12]  797 	add	a,#0xd0
      00019A FD               [12]  798 	mov	r5,a
      00019B EC               [12]  799 	mov	a,r4
      00019C 34 FF            [12]  800 	addc	a,#0xff
      00019E FC               [12]  801 	mov	r4,a
      00019F A8*00            [24]  802 	mov	r0,_bp
      0001A1 08               [12]  803 	inc	r0
      0001A2 86 82            [24]  804 	mov	dpl,@r0
      0001A4 08               [12]  805 	inc	r0
      0001A5 86 83            [24]  806 	mov	dph,@r0
      0001A7 08               [12]  807 	inc	r0
      0001A8 86 F0            [24]  808 	mov	b,@r0
      0001AA ED               [12]  809 	mov	a,r5
      0001AB 12r00r00         [24]  810 	lcall	__gptrput
      0001AE A3               [24]  811 	inc	dptr
      0001AF EC               [12]  812 	mov	a,r4
      0001B0 12r00r00         [24]  813 	lcall	__gptrput
      0001B3                        814 00105$:
                                    815 ;	walk.c:151: if (t->c < 0) t->c += COLS;
      0001B3 E5*00            [12]  816 	mov	a,_bp
      0001B5 24 08            [12]  817 	add	a,#0x08
      0001B7 F8               [12]  818 	mov	r0,a
      0001B8 86 82            [24]  819 	mov	dpl,@r0
      0001BA 08               [12]  820 	inc	r0
      0001BB 86 83            [24]  821 	mov	dph,@r0
      0001BD 08               [12]  822 	inc	r0
      0001BE 86 F0            [24]  823 	mov	b,@r0
      0001C0 12r00r00         [24]  824 	lcall	__gptrget
      0001C3 A3               [24]  825 	inc	dptr
      0001C4 12r00r00         [24]  826 	lcall	__gptrget
      0001C7 30 E7 35         [24]  827 	jnb	acc.7,00109$
      0001CA E5*00            [12]  828 	mov	a,_bp
      0001CC 24 08            [12]  829 	add	a,#0x08
      0001CE F8               [12]  830 	mov	r0,a
      0001CF 86 82            [24]  831 	mov	dpl,@r0
      0001D1 08               [12]  832 	inc	r0
      0001D2 86 83            [24]  833 	mov	dph,@r0
      0001D4 08               [12]  834 	inc	r0
      0001D5 86 F0            [24]  835 	mov	b,@r0
      0001D7 12r00r00         [24]  836 	lcall	__gptrget
      0001DA FE               [12]  837 	mov	r6,a
      0001DB A3               [24]  838 	inc	dptr
      0001DC 12r00r00         [24]  839 	lcall	__gptrget
      0001DF FF               [12]  840 	mov	r7,a
      0001E0 74 C9            [12]  841 	mov	a,#0xc9
      0001E2 2E               [12]  842 	add	a,r6
      0001E3 FE               [12]  843 	mov	r6,a
      0001E4 E4               [12]  844 	clr	a
      0001E5 3F               [12]  845 	addc	a,r7
      0001E6 FF               [12]  846 	mov	r7,a
      0001E7 E5*00            [12]  847 	mov	a,_bp
      0001E9 24 08            [12]  848 	add	a,#0x08
      0001EB F8               [12]  849 	mov	r0,a
      0001EC 86 82            [24]  850 	mov	dpl,@r0
      0001EE 08               [12]  851 	inc	r0
      0001EF 86 83            [24]  852 	mov	dph,@r0
      0001F1 08               [12]  853 	inc	r0
      0001F2 86 F0            [24]  854 	mov	b,@r0
      0001F4 EE               [12]  855 	mov	a,r6
      0001F5 12r00r00         [24]  856 	lcall	__gptrput
      0001F8 A3               [24]  857 	inc	dptr
      0001F9 EF               [12]  858 	mov	a,r7
      0001FA 12r00r00         [24]  859 	lcall	__gptrput
      0001FD 80 55            [24]  860 	sjmp	00110$
      0001FF                        861 00109$:
                                    862 ;	walk.c:152: else if (t->c >= COLS) t->c -= COLS;
      0001FF E5*00            [12]  863 	mov	a,_bp
      000201 24 08            [12]  864 	add	a,#0x08
      000203 F8               [12]  865 	mov	r0,a
      000204 86 82            [24]  866 	mov	dpl,@r0
      000206 08               [12]  867 	inc	r0
      000207 86 83            [24]  868 	mov	dph,@r0
      000209 08               [12]  869 	inc	r0
      00020A 86 F0            [24]  870 	mov	b,@r0
      00020C 12r00r00         [24]  871 	lcall	__gptrget
      00020F FE               [12]  872 	mov	r6,a
      000210 A3               [24]  873 	inc	dptr
      000211 12r00r00         [24]  874 	lcall	__gptrget
      000214 FF               [12]  875 	mov	r7,a
      000215 C3               [12]  876 	clr	c
      000216 EE               [12]  877 	mov	a,r6
      000217 94 C9            [12]  878 	subb	a,#0xc9
      000219 EF               [12]  879 	mov	a,r7
      00021A 64 80            [12]  880 	xrl	a,#0x80
      00021C 94 80            [12]  881 	subb	a,#0x80
      00021E 40 34            [24]  882 	jc	00110$
      000220 E5*00            [12]  883 	mov	a,_bp
      000222 24 08            [12]  884 	add	a,#0x08
      000224 F8               [12]  885 	mov	r0,a
      000225 86 82            [24]  886 	mov	dpl,@r0
      000227 08               [12]  887 	inc	r0
      000228 86 83            [24]  888 	mov	dph,@r0
      00022A 08               [12]  889 	inc	r0
      00022B 86 F0            [24]  890 	mov	b,@r0
      00022D 12r00r00         [24]  891 	lcall	__gptrget
      000230 FE               [12]  892 	mov	r6,a
      000231 A3               [24]  893 	inc	dptr
      000232 12r00r00         [24]  894 	lcall	__gptrget
      000235 FF               [12]  895 	mov	r7,a
      000236 EE               [12]  896 	mov	a,r6
      000237 24 37            [12]  897 	add	a,#0x37
      000239 FE               [12]  898 	mov	r6,a
      00023A EF               [12]  899 	mov	a,r7
      00023B 34 FF            [12]  900 	addc	a,#0xff
      00023D FF               [12]  901 	mov	r7,a
      00023E E5*00            [12]  902 	mov	a,_bp
      000240 24 08            [12]  903 	add	a,#0x08
      000242 F8               [12]  904 	mov	r0,a
      000243 86 82            [24]  905 	mov	dpl,@r0
      000245 08               [12]  906 	inc	r0
      000246 86 83            [24]  907 	mov	dph,@r0
      000248 08               [12]  908 	inc	r0
      000249 86 F0            [24]  909 	mov	b,@r0
      00024B EE               [12]  910 	mov	a,r6
      00024C 12r00r00         [24]  911 	lcall	__gptrput
      00024F A3               [24]  912 	inc	dptr
      000250 EF               [12]  913 	mov	a,r7
      000251 12r00r00         [24]  914 	lcall	__gptrput
      000254                        915 00110$:
                                    916 ;	walk.c:154: if (g[t->r][t->c] == 0xaau) return 0u;
      000254 A8*00            [24]  917 	mov	r0,_bp
      000256 08               [12]  918 	inc	r0
      000257 86 82            [24]  919 	mov	dpl,@r0
      000259 08               [12]  920 	inc	r0
      00025A 86 83            [24]  921 	mov	dph,@r0
      00025C 08               [12]  922 	inc	r0
      00025D 86 F0            [24]  923 	mov	b,@r0
      00025F 12r00r00         [24]  924 	lcall	__gptrget
      000262 FE               [12]  925 	mov	r6,a
      000263 A3               [24]  926 	inc	dptr
      000264 12r00r00         [24]  927 	lcall	__gptrget
      000267 FF               [12]  928 	mov	r7,a
      000268 C0 06            [24]  929 	push	ar6
      00026A C0 07            [24]  930 	push	ar7
      00026C 90 00 C9         [24]  931 	mov	dptr,#0x00c9
      00026F 12r00r00         [24]  932 	lcall	__mulint
      000272 AE 82            [24]  933 	mov	r6,dpl
      000274 AF 83            [24]  934 	mov	r7,dph
      000276 15 81            [12]  935 	dec	sp
      000278 15 81            [12]  936 	dec	sp
      00027A EE               [12]  937 	mov	a,r6
      00027B 24r00            [12]  938 	add	a,#_g
      00027D FE               [12]  939 	mov	r6,a
      00027E EF               [12]  940 	mov	a,r7
      00027F 34s00            [12]  941 	addc	a,#(_g >> 8)
      000281 FF               [12]  942 	mov	r7,a
      000282 E5*00            [12]  943 	mov	a,_bp
      000284 24 08            [12]  944 	add	a,#0x08
      000286 F8               [12]  945 	mov	r0,a
      000287 86 82            [24]  946 	mov	dpl,@r0
      000289 08               [12]  947 	inc	r0
      00028A 86 83            [24]  948 	mov	dph,@r0
      00028C 08               [12]  949 	inc	r0
      00028D 86 F0            [24]  950 	mov	b,@r0
      00028F 12r00r00         [24]  951 	lcall	__gptrget
      000292 FC               [12]  952 	mov	r4,a
      000293 A3               [24]  953 	inc	dptr
      000294 12r00r00         [24]  954 	lcall	__gptrget
      000297 FD               [12]  955 	mov	r5,a
      000298 EC               [12]  956 	mov	a,r4
      000299 2E               [12]  957 	add	a,r6
      00029A F5 82            [12]  958 	mov	dpl,a
      00029C ED               [12]  959 	mov	a,r5
      00029D 3F               [12]  960 	addc	a,r7
      00029E F5 83            [12]  961 	mov	dph,a
      0002A0 E0               [24]  962 	movx	a,@dptr
      0002A1 FF               [12]  963 	mov	r7,a
      0002A2 BF AA 05         [24]  964 	cjne	r7,#0xaa,00114$
      0002A5 75 82 00         [24]  965 	mov	dpl,#0x00
      0002A8 80 59            [24]  966 	sjmp	00116$
      0002AA                        967 00114$:
                                    968 ;	walk.c:155: else if (g[t->r][t->c] != 0x55u) bang();
      0002AA A8*00            [24]  969 	mov	r0,_bp
      0002AC 08               [12]  970 	inc	r0
      0002AD 86 82            [24]  971 	mov	dpl,@r0
      0002AF 08               [12]  972 	inc	r0
      0002B0 86 83            [24]  973 	mov	dph,@r0
      0002B2 08               [12]  974 	inc	r0
      0002B3 86 F0            [24]  975 	mov	b,@r0
      0002B5 12r00r00         [24]  976 	lcall	__gptrget
      0002B8 FE               [12]  977 	mov	r6,a
      0002B9 A3               [24]  978 	inc	dptr
      0002BA 12r00r00         [24]  979 	lcall	__gptrget
      0002BD FF               [12]  980 	mov	r7,a
      0002BE C0 06            [24]  981 	push	ar6
      0002C0 C0 07            [24]  982 	push	ar7
      0002C2 90 00 C9         [24]  983 	mov	dptr,#0x00c9
      0002C5 12r00r00         [24]  984 	lcall	__mulint
      0002C8 AE 82            [24]  985 	mov	r6,dpl
      0002CA AF 83            [24]  986 	mov	r7,dph
      0002CC 15 81            [12]  987 	dec	sp
      0002CE 15 81            [12]  988 	dec	sp
      0002D0 EE               [12]  989 	mov	a,r6
      0002D1 24r00            [12]  990 	add	a,#_g
      0002D3 FE               [12]  991 	mov	r6,a
      0002D4 EF               [12]  992 	mov	a,r7
      0002D5 34s00            [12]  993 	addc	a,#(_g >> 8)
      0002D7 FF               [12]  994 	mov	r7,a
      0002D8 E5*00            [12]  995 	mov	a,_bp
      0002DA 24 08            [12]  996 	add	a,#0x08
      0002DC F8               [12]  997 	mov	r0,a
      0002DD 86 82            [24]  998 	mov	dpl,@r0
      0002DF 08               [12]  999 	inc	r0
      0002E0 86 83            [24] 1000 	mov	dph,@r0
      0002E2 08               [12] 1001 	inc	r0
      0002E3 86 F0            [24] 1002 	mov	b,@r0
      0002E5 12r00r00         [24] 1003 	lcall	__gptrget
      0002E8 FC               [12] 1004 	mov	r4,a
      0002E9 A3               [24] 1005 	inc	dptr
      0002EA 12r00r00         [24] 1006 	lcall	__gptrget
      0002ED FD               [12] 1007 	mov	r5,a
      0002EE EC               [12] 1008 	mov	a,r4
      0002EF 2E               [12] 1009 	add	a,r6
      0002F0 F5 82            [12] 1010 	mov	dpl,a
      0002F2 ED               [12] 1011 	mov	a,r5
      0002F3 3F               [12] 1012 	addc	a,r7
      0002F4 F5 83            [12] 1013 	mov	dph,a
      0002F6 E0               [24] 1014 	movx	a,@dptr
      0002F7 FF               [12] 1015 	mov	r7,a
      0002F8 BF 55 02         [24] 1016 	cjne	r7,#0x55,00148$
      0002FB 80 03            [24] 1017 	sjmp	00115$
      0002FD                       1018 00148$:
      0002FD 12r00r23         [24] 1019 	lcall	_bang
      000300                       1020 00115$:
                                   1021 ;	walk.c:157: return 1u;
      000300 75 82 01         [24] 1022 	mov	dpl,#0x01
      000303                       1023 00116$:
                                   1024 ;	walk.c:158: }
      000303 85*00 81         [24] 1025 	mov	sp,_bp
      000306 D0*00            [24] 1026 	pop	_bp
      000308 22               [24] 1027 	ret
                                   1028 ;------------------------------------------------------------
                                   1029 ;Allocation info for local variables in function 'walk'
                                   1030 ;------------------------------------------------------------
                                   1031 ;nstart                    Allocated to registers r5 r6 r7 
                                   1032 ;cur                       Allocated to stack - _bp +7
                                   1033 ;t                         Allocated to stack - _bp +11
                                   1034 ;scramble                  Allocated to stack - _bp +15
                                   1035 ;ti                        Allocated to registers r2 
                                   1036 ;tj                        Allocated to registers r6 
                                   1037 ;tx                        Allocated to stack - _bp +31
                                   1038 ;j                         Allocated to stack - _bp +32
                                   1039 ;sloc0                     Allocated to stack - _bp +1
                                   1040 ;sloc1                     Allocated to stack - _bp +3
                                   1041 ;sloc2                     Allocated to stack - _bp +35
                                   1042 ;sloc3                     Allocated to stack - _bp +4
                                   1043 ;------------------------------------------------------------
                                   1044 ;	walk.c:160: static void walk(struct node *nstart) {
                                   1045 ;	-----------------------------------------
                                   1046 ;	 function walk
                                   1047 ;	-----------------------------------------
      000309                       1048 _walk:
      000309 C0*00            [24] 1049 	push	_bp
      00030B E5 81            [12] 1050 	mov	a,sp
      00030D F5*00            [12] 1051 	mov	_bp,a
      00030F 24 20            [12] 1052 	add	a,#0x20
      000311 F5 81            [12] 1053 	mov	sp,a
                                   1054 ;	walk.c:165: if (!qadd(nstart)) bang();
      000313 AD 82            [24] 1055 	mov	r5,dpl
      000315 AE 83            [24] 1056 	mov	r6,dph
      000317 AF F0            [24] 1057 	mov	r7,b
      000319 C0 07            [24] 1058 	push	ar7
      00031B C0 06            [24] 1059 	push	ar6
      00031D C0 05            [24] 1060 	push	ar5
      00031F 12r0Ar9B         [24] 1061 	lcall	_qadd
      000322 E5 82            [12] 1062 	mov	a,dpl
      000324 D0 05            [24] 1063 	pop	ar5
      000326 D0 06            [24] 1064 	pop	ar6
      000328 D0 07            [24] 1065 	pop	ar7
      00032A 70 0F            [24] 1066 	jnz	00102$
      00032C C0 07            [24] 1067 	push	ar7
      00032E C0 06            [24] 1068 	push	ar6
      000330 C0 05            [24] 1069 	push	ar5
      000332 12r00r23         [24] 1070 	lcall	_bang
      000335 D0 05            [24] 1071 	pop	ar5
      000337 D0 06            [24] 1072 	pop	ar6
      000339 D0 07            [24] 1073 	pop	ar7
      00033B                       1074 00102$:
                                   1075 ;	walk.c:166: g[nstart->r][nstart->c] = 0xaau;
      00033B 8D 82            [24] 1076 	mov	dpl,r5
      00033D 8E 83            [24] 1077 	mov	dph,r6
      00033F 8F F0            [24] 1078 	mov	b,r7
      000341 12r00r00         [24] 1079 	lcall	__gptrget
      000344 FB               [12] 1080 	mov	r3,a
      000345 A3               [24] 1081 	inc	dptr
      000346 12r00r00         [24] 1082 	lcall	__gptrget
      000349 FC               [12] 1083 	mov	r4,a
      00034A C0 07            [24] 1084 	push	ar7
      00034C C0 06            [24] 1085 	push	ar6
      00034E C0 05            [24] 1086 	push	ar5
      000350 C0 03            [24] 1087 	push	ar3
      000352 C0 04            [24] 1088 	push	ar4
      000354 90 00 C9         [24] 1089 	mov	dptr,#0x00c9
      000357 12r00r00         [24] 1090 	lcall	__mulint
      00035A AB 82            [24] 1091 	mov	r3,dpl
      00035C AC 83            [24] 1092 	mov	r4,dph
      00035E 15 81            [12] 1093 	dec	sp
      000360 15 81            [12] 1094 	dec	sp
      000362 D0 05            [24] 1095 	pop	ar5
      000364 D0 06            [24] 1096 	pop	ar6
      000366 D0 07            [24] 1097 	pop	ar7
      000368 EB               [12] 1098 	mov	a,r3
      000369 24r00            [12] 1099 	add	a,#_g
      00036B FB               [12] 1100 	mov	r3,a
      00036C EC               [12] 1101 	mov	a,r4
      00036D 34s00            [12] 1102 	addc	a,#(_g >> 8)
      00036F FC               [12] 1103 	mov	r4,a
      000370 74 02            [12] 1104 	mov	a,#0x02
      000372 2D               [12] 1105 	add	a,r5
      000373 FD               [12] 1106 	mov	r5,a
      000374 E4               [12] 1107 	clr	a
      000375 3E               [12] 1108 	addc	a,r6
      000376 FE               [12] 1109 	mov	r6,a
      000377 8D 82            [24] 1110 	mov	dpl,r5
      000379 8E 83            [24] 1111 	mov	dph,r6
      00037B 8F F0            [24] 1112 	mov	b,r7
      00037D 12r00r00         [24] 1113 	lcall	__gptrget
      000380 FD               [12] 1114 	mov	r5,a
      000381 A3               [24] 1115 	inc	dptr
      000382 12r00r00         [24] 1116 	lcall	__gptrget
      000385 FE               [12] 1117 	mov	r6,a
      000386 ED               [12] 1118 	mov	a,r5
      000387 2B               [12] 1119 	add	a,r3
      000388 F5 82            [12] 1120 	mov	dpl,a
      00038A EE               [12] 1121 	mov	a,r6
      00038B 3C               [12] 1122 	addc	a,r4
      00038C F5 83            [12] 1123 	mov	dph,a
      00038E 74 AA            [12] 1124 	mov	a,#0xaa
      000390 F0               [24] 1125 	movx	@dptr,a
                                   1126 ;	walk.c:168: process:
      000391 E5*00            [12] 1127 	mov	a,_bp
      000393 24 0F            [12] 1128 	add	a,#0x0f
      000395 FF               [12] 1129 	mov	r7,a
      000396 E5*00            [12] 1130 	mov	a,_bp
      000398 24 0B            [12] 1131 	add	a,#0x0b
      00039A F9               [12] 1132 	mov	r1,a
      00039B E5*00            [12] 1133 	mov	a,_bp
      00039D 24 03            [12] 1134 	add	a,#0x03
      00039F F8               [12] 1135 	mov	r0,a
      0003A0 A6 01            [24] 1136 	mov	@r0,ar1
      0003A2 74 02            [12] 1137 	mov	a,#0x02
      0003A4 29               [12] 1138 	add	a,r1
      0003A5 F8               [12] 1139 	mov	r0,a
      0003A6 E5*00            [12] 1140 	mov	a,_bp
      0003A8 24 07            [12] 1141 	add	a,#0x07
      0003AA FD               [12] 1142 	mov	r5,a
      0003AB                       1143 00103$:
                                   1144 ;	walk.c:169: unsetOE(OE76_MASK7 | OE76_MASK6);
      0003AB 75 82 C0         [24] 1145 	mov	dpl,#0xc0
      0003AE C0 07            [24] 1146 	push	ar7
      0003B0 C0 05            [24] 1147 	push	ar5
      0003B2 C0 01            [24] 1148 	push	ar1
      0003B4 C0 00            [24] 1149 	push	ar0
      0003B6 12r00r49         [24] 1150 	lcall	_unsetOE
      0003B9 D0 00            [24] 1151 	pop	ar0
      0003BB D0 01            [24] 1152 	pop	ar1
      0003BD D0 05            [24] 1153 	pop	ar5
                                   1154 ;	walk.c:171: if (!qget(&cur)) goto term;
      0003BF 8D 02            [24] 1155 	mov	ar2,r5
      0003C1 7B 00            [12] 1156 	mov	r3,#0x00
      0003C3 7C 40            [12] 1157 	mov	r4,#0x40
      0003C5 8A 82            [24] 1158 	mov	dpl,r2
      0003C7 8B 83            [24] 1159 	mov	dph,r3
      0003C9 8C F0            [24] 1160 	mov	b,r4
      0003CB C0 05            [24] 1161 	push	ar5
      0003CD C0 01            [24] 1162 	push	ar1
      0003CF C0 00            [24] 1163 	push	ar0
      0003D1 12r0Br8D         [24] 1164 	lcall	_qget
      0003D4 E5 82            [12] 1165 	mov	a,dpl
      0003D6 D0 00            [24] 1166 	pop	ar0
      0003D8 D0 01            [24] 1167 	pop	ar1
      0003DA D0 05            [24] 1168 	pop	ar5
      0003DC D0 07            [24] 1169 	pop	ar7
      0003DE 70 03            [24] 1170 	jnz	00184$
      0003E0 02r06rAC         [24] 1171 	ljmp	00119$
      0003E3                       1172 00184$:
                                   1173 ;	walk.c:173: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      0003E3 74 02            [12] 1174 	mov	a,#0x02
      0003E5 2D               [12] 1175 	add	a,r5
      0003E6 FC               [12] 1176 	mov	r4,a
      0003E7 C0 00            [24] 1177 	push	ar0
      0003E9 A8*00            [24] 1178 	mov	r0,_bp
      0003EB 08               [12] 1179 	inc	r0
      0003EC C0 01            [24] 1180 	push	ar1
      0003EE A9 04            [24] 1181 	mov	r1,ar4
      0003F0 E7               [12] 1182 	mov	a,@r1
      0003F1 F6               [12] 1183 	mov	@r0,a
      0003F2 09               [12] 1184 	inc	r1
      0003F3 E7               [12] 1185 	mov	a,@r1
      0003F4 08               [12] 1186 	inc	r0
      0003F5 F6               [12] 1187 	mov	@r0,a
      0003F6 D0 01            [24] 1188 	pop	ar1
      0003F8 A8 05            [24] 1189 	mov	r0,ar5
      0003FA 86 03            [24] 1190 	mov	ar3,@r0
      0003FC 08               [12] 1191 	inc	r0
      0003FD 86 06            [24] 1192 	mov	ar6,@r0
      0003FF D0 00            [24] 1193 	pop	ar0
      000401 C0 07            [24] 1194 	push	ar7
      000403 C0 05            [24] 1195 	push	ar5
      000405 C0 04            [24] 1196 	push	ar4
      000407 C0 01            [24] 1197 	push	ar1
      000409 C0 00            [24] 1198 	push	ar0
      00040B 85 00 F0         [24] 1199 	mov	b,ar0
      00040E A8*00            [24] 1200 	mov	r0,_bp
      000410 08               [12] 1201 	inc	r0
      000411 E6               [12] 1202 	mov	a,@r0
      000412 C0 E0            [24] 1203 	push	acc
      000414 08               [12] 1204 	inc	r0
      000415 E6               [12] 1205 	mov	a,@r0
      000416 C0 E0            [24] 1206 	push	acc
      000418 C0 03            [24] 1207 	push	ar3
      00041A C0 06            [24] 1208 	push	ar6
      00041C 90rBCr72         [24] 1209 	mov	dptr,#_tp
      00041F E0               [24] 1210 	movx	a,@dptr
      000420 C0 E0            [24] 1211 	push	acc
      000422 A3               [24] 1212 	inc	dptr
      000423 E0               [24] 1213 	movx	a,@dptr
      000424 C0 E0            [24] 1214 	push	acc
      000426 90rBCr70         [24] 1215 	mov	dptr,#_hp
      000429 E0               [24] 1216 	movx	a,@dptr
      00042A C0 E0            [24] 1217 	push	acc
      00042C A3               [24] 1218 	inc	dptr
      00042D E0               [24] 1219 	movx	a,@dptr
      00042E C0 E0            [24] 1220 	push	acc
      000430 74r0D            [12] 1221 	mov	a,#___str_1
      000432 C0 E0            [24] 1222 	push	acc
      000434 74s00            [12] 1223 	mov	a,#(___str_1 >> 8)
      000436 C0 E0            [24] 1224 	push	acc
      000438 74 80            [12] 1225 	mov	a,#0x80
      00043A C0 E0            [24] 1226 	push	acc
      00043C 12r00r00         [24] 1227 	lcall	_printf
      00043F E5 81            [12] 1228 	mov	a,sp
      000441 24 F5            [12] 1229 	add	a,#0xf5
      000443 F5 81            [12] 1230 	mov	sp,a
      000445 D0 00            [24] 1231 	pop	ar0
      000447 D0 01            [24] 1232 	pop	ar1
      000449 D0 04            [24] 1233 	pop	ar4
      00044B D0 05            [24] 1234 	pop	ar5
      00044D D0 07            [24] 1235 	pop	ar7
                                   1236 ;	walk.c:175: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      00044F C0 00            [24] 1237 	push	ar0
      000451 A8 04            [24] 1238 	mov	r0,ar4
      000453 86 04            [24] 1239 	mov	ar4,@r0
      000455 08               [12] 1240 	inc	r0
      000456 86 06            [24] 1241 	mov	ar6,@r0
      000458 D0 00            [24] 1242 	pop	ar0
      00045A 0C               [12] 1243 	inc	r4
      00045B BC 00 01         [24] 1244 	cjne	r4,#0x00,00185$
      00045E 0E               [12] 1245 	inc	r6
      00045F                       1246 00185$:
      00045F C0 00            [24] 1247 	push	ar0
      000461 A8 05            [24] 1248 	mov	r0,ar5
      000463 86 02            [24] 1249 	mov	ar2,@r0
      000465 08               [12] 1250 	inc	r0
      000466 86 03            [24] 1251 	mov	ar3,@r0
      000468 D0 00            [24] 1252 	pop	ar0
      00046A 74 04            [12] 1253 	mov	a,#0x04
      00046C 2A               [12] 1254 	add	a,r2
      00046D FA               [12] 1255 	mov	r2,a
      00046E E4               [12] 1256 	clr	a
      00046F 3B               [12] 1257 	addc	a,r3
      000470 FB               [12] 1258 	mov	r3,a
      000471 C0 07            [24] 1259 	push	ar7
      000473 C0 05            [24] 1260 	push	ar5
      000475 C0 01            [24] 1261 	push	ar1
      000477 C0 00            [24] 1262 	push	ar0
      000479 C0 04            [24] 1263 	push	ar4
      00047B C0 06            [24] 1264 	push	ar6
      00047D C0 02            [24] 1265 	push	ar2
      00047F C0 03            [24] 1266 	push	ar3
      000481 74r24            [12] 1267 	mov	a,#___str_2
      000483 C0 E0            [24] 1268 	push	acc
      000485 74s00            [12] 1269 	mov	a,#(___str_2 >> 8)
      000487 C0 E0            [24] 1270 	push	acc
      000489 74 80            [12] 1271 	mov	a,#0x80
      00048B C0 E0            [24] 1272 	push	acc
      00048D 12r00r00         [24] 1273 	lcall	_printf
      000490 E5 81            [12] 1274 	mov	a,sp
      000492 24 F9            [12] 1275 	add	a,#0xf9
      000494 F5 81            [12] 1276 	mov	sp,a
                                   1277 ;	walk.c:176: setOE(OE76_MASK6);
      000496 75 82 40         [24] 1278 	mov	dpl,#0x40
      000499 12r00r30         [24] 1279 	lcall	_setOE
      00049C D0 00            [24] 1280 	pop	ar0
      00049E D0 01            [24] 1281 	pop	ar1
      0004A0 D0 05            [24] 1282 	pop	ar5
      0004A2 D0 07            [24] 1283 	pop	ar7
                                   1284 ;	walk.c:178: for (j = 0u; j < NMAX; j++)
      0004A4 7E 00            [12] 1285 	mov	r6,#0x00
                                   1286 ;	walk.c:205: return;
                                   1287 ;	walk.c:178: for (j = 0u; j < NMAX; j++)
      0004A6                       1288 00120$:
                                   1289 ;	walk.c:179: scramble[j] = j;
      0004A6 EE               [12] 1290 	mov	a,r6
      0004A7 2F               [12] 1291 	add	a,r7
      0004A8 C0 00            [24] 1292 	push	ar0
      0004AA F8               [12] 1293 	mov	r0,a
      0004AB A6 06            [24] 1294 	mov	@r0,ar6
      0004AD D0 00            [24] 1295 	pop	ar0
                                   1296 ;	walk.c:178: for (j = 0u; j < NMAX; j++)
      0004AF 0E               [12] 1297 	inc	r6
      0004B0 BE 10 00         [24] 1298 	cjne	r6,#0x10,00186$
      0004B3                       1299 00186$:
      0004B3 40 F1            [24] 1300 	jc	00120$
                                   1301 ;	walk.c:181: do ti = (uint8_t)(rand() % NMAX);
      0004B5 7C 00            [12] 1302 	mov	r4,#0x00
      0004B7                       1303 00107$:
      0004B7 C0 07            [24] 1304 	push	ar7
      0004B9 C0 05            [24] 1305 	push	ar5
      0004BB C0 04            [24] 1306 	push	ar4
      0004BD C0 01            [24] 1307 	push	ar1
      0004BF C0 00            [24] 1308 	push	ar0
      0004C1 12r00r00         [24] 1309 	lcall	_rand
      0004C4 AA 82            [24] 1310 	mov	r2,dpl
      0004C6 D0 00            [24] 1311 	pop	ar0
      0004C8 D0 01            [24] 1312 	pop	ar1
      0004CA D0 04            [24] 1313 	pop	ar4
      0004CC D0 05            [24] 1314 	pop	ar5
      0004CE D0 07            [24] 1315 	pop	ar7
      0004D0 53 02 0F         [24] 1316 	anl	ar2,#0x0f
      0004D3 7B 00            [12] 1317 	mov	r3,#0x00
                                   1318 ;	walk.c:182: while (ti == j);
      0004D5 EA               [12] 1319 	mov	a,r2
      0004D6 B5 04 02         [24] 1320 	cjne	a,ar4,00188$
      0004D9 80 DC            [24] 1321 	sjmp	00107$
      0004DB                       1322 00188$:
                                   1323 ;	walk.c:183: do tj = (uint8_t)(rand() % NMAX);
      0004DB                       1324 00110$:
      0004DB C0 05            [24] 1325 	push	ar5
      0004DD C0 07            [24] 1326 	push	ar7
      0004DF C0 04            [24] 1327 	push	ar4
      0004E1 C0 02            [24] 1328 	push	ar2
      0004E3 C0 01            [24] 1329 	push	ar1
      0004E5 C0 00            [24] 1330 	push	ar0
      0004E7 12r00r00         [24] 1331 	lcall	_rand
      0004EA AB 82            [24] 1332 	mov	r3,dpl
      0004EC D0 00            [24] 1333 	pop	ar0
      0004EE D0 01            [24] 1334 	pop	ar1
      0004F0 D0 02            [24] 1335 	pop	ar2
      0004F2 D0 04            [24] 1336 	pop	ar4
      0004F4 D0 07            [24] 1337 	pop	ar7
      0004F6 53 03 0F         [24] 1338 	anl	ar3,#0x0f
      0004F9 8B 06            [24] 1339 	mov	ar6,r3
                                   1340 ;	walk.c:184: while (ti == tj);
      0004FB EA               [12] 1341 	mov	a,r2
      0004FC B5 06 04         [24] 1342 	cjne	a,ar6,00189$
      0004FF D0 05            [24] 1343 	pop	ar5
      000501 80 D8            [24] 1344 	sjmp	00110$
      000503                       1345 00189$:
                                   1346 ;	walk.c:185: tx = scramble[ti];
      000503 EA               [12] 1347 	mov	a,r2
      000504 2F               [12] 1348 	add	a,r7
      000505 FB               [12] 1349 	mov	r3,a
      000506 C0 00            [24] 1350 	push	ar0
      000508 E5*00            [12] 1351 	mov	a,_bp
      00050A 24 1F            [12] 1352 	add	a,#0x1f
      00050C F8               [12] 1353 	mov	r0,a
      00050D C0 01            [24] 1354 	push	ar1
      00050F A9 03            [24] 1355 	mov	r1,ar3
      000511 E7               [12] 1356 	mov	a,@r1
      000512 F6               [12] 1357 	mov	@r0,a
                                   1358 ;	walk.c:186: scramble[ti] = scramble[tj];
      000513 EE               [12] 1359 	mov	a,r6
      000514 2F               [12] 1360 	add	a,r7
      000515 FD               [12] 1361 	mov	r5,a
      000516 A8 05            [24] 1362 	mov	r0,ar5
      000518 86 02            [24] 1363 	mov	ar2,@r0
      00051A A8 03            [24] 1364 	mov	r0,ar3
      00051C A6 02            [24] 1365 	mov	@r0,ar2
                                   1366 ;	walk.c:187: scramble[tj] = tx;
      00051E A8 05            [24] 1367 	mov	r0,ar5
      000520 E5*00            [12] 1368 	mov	a,_bp
      000522 24 1F            [12] 1369 	add	a,#0x1f
      000524 F9               [12] 1370 	mov	r1,a
      000525 E7               [12] 1371 	mov	a,@r1
      000526 F6               [12] 1372 	mov	@r0,a
      000527 D0 00            [24] 1373 	pop	ar0
      000529 D0 01            [24] 1374 	pop	ar1
                                   1375 ;	walk.c:180: for (j = 0u; j < NMAX; j++) {
      00052B 0C               [12] 1376 	inc	r4
      00052C BC 10 00         [24] 1377 	cjne	r4,#0x10,00190$
      00052F                       1378 00190$:
      00052F D0 05            [24] 1379 	pop	ar5
      000531 40 84            [24] 1380 	jc	00107$
                                   1381 ;	walk.c:190: for (j = 0u; j < NMAX; j++) {
      000533 C0 00            [24] 1382 	push	ar0
      000535 A8*00            [24] 1383 	mov	r0,_bp
      000537 08               [12] 1384 	inc	r0
      000538 A6 05            [24] 1385 	mov	@r0,ar5
      00053A E5*00            [12] 1386 	mov	a,_bp
      00053C 24 20            [12] 1387 	add	a,#0x20
      00053E F8               [12] 1388 	mov	r0,a
      00053F 76 00            [12] 1389 	mov	@r0,#0x00
      000541 D0 00            [24] 1390 	pop	ar0
      000543                       1391 00124$:
                                   1392 ;	walk.c:191: unsetOE(OE76_MASK7);
      000543 C0 05            [24] 1393 	push	ar5
      000545 75 82 80         [24] 1394 	mov	dpl,#0x80
      000548 C0 07            [24] 1395 	push	ar7
      00054A C0 05            [24] 1396 	push	ar5
      00054C C0 01            [24] 1397 	push	ar1
      00054E C0 00            [24] 1398 	push	ar0
      000550 12r00r49         [24] 1399 	lcall	_unsetOE
      000553 D0 00            [24] 1400 	pop	ar0
      000555 D0 01            [24] 1401 	pop	ar1
      000557 D0 05            [24] 1402 	pop	ar5
      000559 D0 07            [24] 1403 	pop	ar7
                                   1404 ;	walk.c:193: if (update(&t, &cur, scramble[j])) {
      00055B C0 00            [24] 1405 	push	ar0
      00055D E5*00            [12] 1406 	mov	a,_bp
      00055F 24 20            [12] 1407 	add	a,#0x20
      000561 F8               [12] 1408 	mov	r0,a
      000562 E6               [12] 1409 	mov	a,@r0
      000563 2F               [12] 1410 	add	a,r7
      000564 FA               [12] 1411 	mov	r2,a
      000565 A8 02            [24] 1412 	mov	r0,ar2
      000567 86 03            [24] 1413 	mov	ar3,@r0
      000569 A8*00            [24] 1414 	mov	r0,_bp
      00056B 08               [12] 1415 	inc	r0
      00056C C0 01            [24] 1416 	push	ar1
      00056E E5*00            [12] 1417 	mov	a,_bp
      000570 24 04            [12] 1418 	add	a,#0x04
      000572 F9               [12] 1419 	mov	r1,a
      000573 E6               [12] 1420 	mov	a,@r0
      000574 F7               [12] 1421 	mov	@r1,a
      000575 09               [12] 1422 	inc	r1
      000576 77 00            [12] 1423 	mov	@r1,#0x00
      000578 09               [12] 1424 	inc	r1
      000579 77 40            [12] 1425 	mov	@r1,#0x40
      00057B D0 01            [24] 1426 	pop	ar1
      00057D D0 00            [24] 1427 	pop	ar0
      00057F 89 02            [24] 1428 	mov	ar2,r1
      000581 7C 00            [12] 1429 	mov	r4,#0x00
      000583 7E 40            [12] 1430 	mov	r6,#0x40
      000585 C0 07            [24] 1431 	push	ar7
      000587 C0 05            [24] 1432 	push	ar5
      000589 C0 01            [24] 1433 	push	ar1
      00058B C0 00            [24] 1434 	push	ar0
      00058D C0 03            [24] 1435 	push	ar3
      00058F 85 00 F0         [24] 1436 	mov	b,ar0
      000592 E5*00            [12] 1437 	mov	a,_bp
      000594 24 04            [12] 1438 	add	a,#0x04
      000596 F8               [12] 1439 	mov	r0,a
      000597 E6               [12] 1440 	mov	a,@r0
      000598 C0 E0            [24] 1441 	push	acc
      00059A 08               [12] 1442 	inc	r0
      00059B E6               [12] 1443 	mov	a,@r0
      00059C C0 E0            [24] 1444 	push	acc
      00059E 08               [12] 1445 	inc	r0
      00059F E6               [12] 1446 	mov	a,@r0
      0005A0 C0 E0            [24] 1447 	push	acc
      0005A2 8A 82            [24] 1448 	mov	dpl,r2
      0005A4 8C 83            [24] 1449 	mov	dph,r4
      0005A6 8E F0            [24] 1450 	mov	b,r6
      0005A8 12r00r7C         [24] 1451 	lcall	_update
      0005AB AE 82            [24] 1452 	mov	r6,dpl
      0005AD E5 81            [12] 1453 	mov	a,sp
      0005AF 24 FC            [12] 1454 	add	a,#0xfc
      0005B1 F5 81            [12] 1455 	mov	sp,a
      0005B3 D0 00            [24] 1456 	pop	ar0
      0005B5 D0 01            [24] 1457 	pop	ar1
      0005B7 D0 05            [24] 1458 	pop	ar5
      0005B9 D0 07            [24] 1459 	pop	ar7
      0005BB D0 05            [24] 1460 	pop	ar5
      0005BD EE               [12] 1461 	mov	a,r6
      0005BE 70 03            [24] 1462 	jnz	00192$
      0005C0 02r06r92         [24] 1463 	ljmp	00125$
      0005C3                       1464 00192$:
                                   1465 ;	walk.c:194: if (!qadd(&t)) bang();
      0005C3 C0 00            [24] 1466 	push	ar0
      0005C5 E5*00            [12] 1467 	mov	a,_bp
      0005C7 24 03            [12] 1468 	add	a,#0x03
      0005C9 F8               [12] 1469 	mov	r0,a
      0005CA 86 03            [24] 1470 	mov	ar3,@r0
      0005CC 7C 00            [12] 1471 	mov	r4,#0x00
      0005CE 7E 40            [12] 1472 	mov	r6,#0x40
      0005D0 D0 00            [24] 1473 	pop	ar0
      0005D2 8B 82            [24] 1474 	mov	dpl,r3
      0005D4 8C 83            [24] 1475 	mov	dph,r4
      0005D6 8E F0            [24] 1476 	mov	b,r6
      0005D8 C0 07            [24] 1477 	push	ar7
      0005DA C0 05            [24] 1478 	push	ar5
      0005DC C0 01            [24] 1479 	push	ar1
      0005DE C0 00            [24] 1480 	push	ar0
      0005E0 12r0Ar9B         [24] 1481 	lcall	_qadd
      0005E3 E5 82            [12] 1482 	mov	a,dpl
      0005E5 D0 00            [24] 1483 	pop	ar0
      0005E7 D0 01            [24] 1484 	pop	ar1
      0005E9 D0 05            [24] 1485 	pop	ar5
      0005EB D0 07            [24] 1486 	pop	ar7
      0005ED 70 13            [24] 1487 	jnz	00115$
      0005EF C0 07            [24] 1488 	push	ar7
      0005F1 C0 05            [24] 1489 	push	ar5
      0005F3 C0 01            [24] 1490 	push	ar1
      0005F5 C0 00            [24] 1491 	push	ar0
      0005F7 12r00r23         [24] 1492 	lcall	_bang
      0005FA D0 00            [24] 1493 	pop	ar0
      0005FC D0 01            [24] 1494 	pop	ar1
      0005FE D0 05            [24] 1495 	pop	ar5
      000600 D0 07            [24] 1496 	pop	ar7
      000602                       1497 00115$:
                                   1498 ;	walk.c:195: g[t.r][t.c] = 0xaau;
      000602 87 04            [24] 1499 	mov	ar4,@r1
      000604 09               [12] 1500 	inc	r1
      000605 87 06            [24] 1501 	mov	ar6,@r1
      000607 19               [12] 1502 	dec	r1
      000608 C0 07            [24] 1503 	push	ar7
      00060A C0 05            [24] 1504 	push	ar5
      00060C C0 01            [24] 1505 	push	ar1
      00060E C0 00            [24] 1506 	push	ar0
      000610 C0 04            [24] 1507 	push	ar4
      000612 C0 06            [24] 1508 	push	ar6
      000614 90 00 C9         [24] 1509 	mov	dptr,#0x00c9
      000617 12r00r00         [24] 1510 	lcall	__mulint
      00061A AC 82            [24] 1511 	mov	r4,dpl
      00061C AE 83            [24] 1512 	mov	r6,dph
      00061E 15 81            [12] 1513 	dec	sp
      000620 15 81            [12] 1514 	dec	sp
      000622 D0 00            [24] 1515 	pop	ar0
      000624 EC               [12] 1516 	mov	a,r4
      000625 24r00            [12] 1517 	add	a,#_g
      000627 FC               [12] 1518 	mov	r4,a
      000628 EE               [12] 1519 	mov	a,r6
      000629 34s00            [12] 1520 	addc	a,#(_g >> 8)
      00062B FE               [12] 1521 	mov	r6,a
      00062C 86 02            [24] 1522 	mov	ar2,@r0
      00062E 08               [12] 1523 	inc	r0
      00062F 86 03            [24] 1524 	mov	ar3,@r0
      000631 18               [12] 1525 	dec	r0
      000632 EA               [12] 1526 	mov	a,r2
      000633 2C               [12] 1527 	add	a,r4
      000634 F5 82            [12] 1528 	mov	dpl,a
      000636 EB               [12] 1529 	mov	a,r3
      000637 3E               [12] 1530 	addc	a,r6
      000638 F5 83            [12] 1531 	mov	dph,a
      00063A 74 AA            [12] 1532 	mov	a,#0xaa
      00063C F0               [24] 1533 	movx	@dptr,a
                                   1534 ;	walk.c:197: setOE(OE76_MASK7);
      00063D 75 82 80         [24] 1535 	mov	dpl,#0x80
      000640 C0 00            [24] 1536 	push	ar0
      000642 12r00r30         [24] 1537 	lcall	_setOE
      000645 D0 00            [24] 1538 	pop	ar0
      000647 D0 01            [24] 1539 	pop	ar1
      000649 D0 05            [24] 1540 	pop	ar5
      00064B D0 07            [24] 1541 	pop	ar7
                                   1542 ;	walk.c:198: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      00064D 86 04            [24] 1543 	mov	ar4,@r0
      00064F 08               [12] 1544 	inc	r0
      000650 86 06            [24] 1545 	mov	ar6,@r0
      000652 18               [12] 1546 	dec	r0
      000653 0C               [12] 1547 	inc	r4
      000654 BC 00 01         [24] 1548 	cjne	r4,#0x00,00194$
      000657 0E               [12] 1549 	inc	r6
      000658                       1550 00194$:
      000658 87 02            [24] 1551 	mov	ar2,@r1
      00065A 09               [12] 1552 	inc	r1
      00065B 87 03            [24] 1553 	mov	ar3,@r1
      00065D 19               [12] 1554 	dec	r1
      00065E 74 04            [12] 1555 	mov	a,#0x04
      000660 2A               [12] 1556 	add	a,r2
      000661 FA               [12] 1557 	mov	r2,a
      000662 E4               [12] 1558 	clr	a
      000663 3B               [12] 1559 	addc	a,r3
      000664 FB               [12] 1560 	mov	r3,a
      000665 C0 07            [24] 1561 	push	ar7
      000667 C0 05            [24] 1562 	push	ar5
      000669 C0 01            [24] 1563 	push	ar1
      00066B C0 00            [24] 1564 	push	ar0
      00066D C0 04            [24] 1565 	push	ar4
      00066F C0 06            [24] 1566 	push	ar6
      000671 C0 02            [24] 1567 	push	ar2
      000673 C0 03            [24] 1568 	push	ar3
      000675 74r2E            [12] 1569 	mov	a,#___str_3
      000677 C0 E0            [24] 1570 	push	acc
      000679 74s00            [12] 1571 	mov	a,#(___str_3 >> 8)
      00067B C0 E0            [24] 1572 	push	acc
      00067D 74 80            [12] 1573 	mov	a,#0x80
      00067F C0 E0            [24] 1574 	push	acc
      000681 12r00r00         [24] 1575 	lcall	_printf
      000684 E5 81            [12] 1576 	mov	a,sp
      000686 24 F9            [12] 1577 	add	a,#0xf9
      000688 F5 81            [12] 1578 	mov	sp,a
      00068A D0 00            [24] 1579 	pop	ar0
      00068C D0 01            [24] 1580 	pop	ar1
      00068E D0 05            [24] 1581 	pop	ar5
      000690 D0 07            [24] 1582 	pop	ar7
      000692                       1583 00125$:
                                   1584 ;	walk.c:190: for (j = 0u; j < NMAX; j++) {
      000692 C0 00            [24] 1585 	push	ar0
      000694 E5*00            [12] 1586 	mov	a,_bp
      000696 24 20            [12] 1587 	add	a,#0x20
      000698 F8               [12] 1588 	mov	r0,a
      000699 06               [12] 1589 	inc	@r0
      00069A E5*00            [12] 1590 	mov	a,_bp
      00069C 24 20            [12] 1591 	add	a,#0x20
      00069E F8               [12] 1592 	mov	r0,a
      00069F B6 10 00         [24] 1593 	cjne	@r0,#0x10,00195$
      0006A2                       1594 00195$:
      0006A2 D0 00            [24] 1595 	pop	ar0
      0006A4 50 03            [24] 1596 	jnc	00196$
      0006A6 02r05r43         [24] 1597 	ljmp	00124$
      0006A9                       1598 00196$:
                                   1599 ;	walk.c:202: goto process;
      0006A9 02r03rAB         [24] 1600 	ljmp	00103$
                                   1601 ;	walk.c:204: term:
      0006AC                       1602 00119$:
                                   1603 ;	walk.c:205: return;
                                   1604 ;	walk.c:206: }
      0006AC 85*00 81         [24] 1605 	mov	sp,_bp
      0006AF D0*00            [24] 1606 	pop	_bp
      0006B1 22               [24] 1607 	ret
                                   1608 ;------------------------------------------------------------
                                   1609 ;Allocation info for local variables in function 'main'
                                   1610 ;------------------------------------------------------------
                                   1611 ;initial                   Allocated to stack - _bp +5
                                   1612 ;N                         Allocated to stack - _bp +9
                                   1613 ;i                         Allocated to stack - _bp +11
                                   1614 ;j                         Allocated to registers r2 r6 
                                   1615 ;sloc0                     Allocated to stack - _bp +1
                                   1616 ;sloc1                     Allocated to stack - _bp +3
                                   1617 ;sloc2                     Allocated to stack - _bp +15
                                   1618 ;------------------------------------------------------------
                                   1619 ;	walk.c:208: void main(void) {
                                   1620 ;	-----------------------------------------
                                   1621 ;	 function main
                                   1622 ;	-----------------------------------------
      0006B2                       1623 _main:
      0006B2 C0*00            [24] 1624 	push	_bp
      0006B4 E5 81            [12] 1625 	mov	a,sp
      0006B6 F5*00            [12] 1626 	mov	_bp,a
      0006B8 24 0C            [12] 1627 	add	a,#0x0c
      0006BA F5 81            [12] 1628 	mov	sp,a
                                   1629 ;	walk.c:213: i0 = 1u;
      0006BC 78r00            [12] 1630 	mov	r0,#_i0
      0006BE 76 01            [12] 1631 	mov	@r0,#0x01
                                   1632 ;	walk.c:215: P1_7 = 1;
                                   1633 ;	assignBit
      0006C0 D2 97            [12] 1634 	setb	_P1_7
                                   1635 ;	walk.c:216: IT0 = 1;
                                   1636 ;	assignBit
      0006C2 D2 88            [12] 1637 	setb	_IT0
                                   1638 ;	walk.c:217: EX0 = 1;
                                   1639 ;	assignBit
      0006C4 D2 A8            [12] 1640 	setb	_EX0
                                   1641 ;	walk.c:218: EA = 1;
                                   1642 ;	assignBit
      0006C6 D2 AF            [12] 1643 	setb	_EA
                                   1644 ;	walk.c:220: srand(RND);
      0006C8 90 80 00         [24] 1645 	mov	dptr,#_RND
      0006CB E0               [24] 1646 	movx	a,@dptr
      0006CC FE               [12] 1647 	mov	r6,a
      0006CD A3               [24] 1648 	inc	dptr
      0006CE E0               [24] 1649 	movx	a,@dptr
      0006CF FF               [12] 1650 	mov	r7,a
      0006D0 8E 82            [24] 1651 	mov	dpl,r6
      0006D2 8F 83            [24] 1652 	mov	dph,r7
      0006D4 12r00r00         [24] 1653 	lcall	_srand
                                   1654 ;	walk.c:221: qinit();
      0006D7 12r0Ar8D         [24] 1655 	lcall	_qinit
                                   1656 ;	walk.c:223: puts("\033[2J\033[?25l");
      0006DA 90r00r38         [24] 1657 	mov	dptr,#___str_4
      0006DD 75 F0 80         [24] 1658 	mov	b,#0x80
      0006E0 12r00r00         [24] 1659 	lcall	_puts
                                   1660 ;	walk.c:225: while (i0) {
      0006E3 E5*00            [12] 1661 	mov	a,_bp
      0006E5 24 05            [12] 1662 	add	a,#0x05
      0006E7 F9               [12] 1663 	mov	r1,a
      0006E8 FF               [12] 1664 	mov	r7,a
      0006E9 E5*00            [12] 1665 	mov	a,_bp
      0006EB 24 09            [12] 1666 	add	a,#0x09
      0006ED F8               [12] 1667 	mov	r0,a
      0006EE E4               [12] 1668 	clr	a
      0006EF F6               [12] 1669 	mov	@r0,a
      0006F0 08               [12] 1670 	inc	r0
      0006F1 F6               [12] 1671 	mov	@r0,a
      0006F2                       1672 00108$:
      0006F2 78r00            [12] 1673 	mov	r0,#_i0
      0006F4 E6               [12] 1674 	mov	a,@r0
      0006F5 70 03            [24] 1675 	jnz	00182$
      0006F7 02r0Ar79         [24] 1676 	ljmp	00110$
      0006FA                       1677 00182$:
                                   1678 ;	walk.c:226: for (i = 0; i < ROWS; i++)
      0006FA 7B 00            [12] 1679 	mov	r3,#0x00
      0006FC 7C 00            [12] 1680 	mov	r4,#0x00
      0006FE A8*00            [24] 1681 	mov	r0,_bp
      000700 08               [12] 1682 	inc	r0
      000701 E4               [12] 1683 	clr	a
      000702 F6               [12] 1684 	mov	@r0,a
      000703 08               [12] 1685 	inc	r0
      000704 F6               [12] 1686 	mov	@r0,a
                                   1687 ;	walk.c:227: for (j = 0; j < COLS; j++)
      000705                       1688 00125$:
      000705 A8*00            [24] 1689 	mov	r0,_bp
      000707 08               [12] 1690 	inc	r0
      000708 C0 01            [24] 1691 	push	ar1
      00070A E5*00            [12] 1692 	mov	a,_bp
      00070C 24 03            [12] 1693 	add	a,#0x03
      00070E F9               [12] 1694 	mov	r1,a
      00070F E6               [12] 1695 	mov	a,@r0
      000710 24r00            [12] 1696 	add	a,#_g
      000712 F7               [12] 1697 	mov	@r1,a
      000713 08               [12] 1698 	inc	r0
      000714 E6               [12] 1699 	mov	a,@r0
      000715 34s00            [12] 1700 	addc	a,#(_g >> 8)
      000717 09               [12] 1701 	inc	r1
      000718 F7               [12] 1702 	mov	@r1,a
      000719 D0 01            [24] 1703 	pop	ar1
      00071B 7A 00            [12] 1704 	mov	r2,#0x00
      00071D 7E 00            [12] 1705 	mov	r6,#0x00
      00071F                       1706 00112$:
                                   1707 ;	walk.c:228: g[i][j] = 0x55u;
      00071F E5*00            [12] 1708 	mov	a,_bp
      000721 24 03            [12] 1709 	add	a,#0x03
      000723 F8               [12] 1710 	mov	r0,a
      000724 EA               [12] 1711 	mov	a,r2
      000725 26               [12] 1712 	add	a,@r0
      000726 F5 82            [12] 1713 	mov	dpl,a
      000728 EE               [12] 1714 	mov	a,r6
      000729 08               [12] 1715 	inc	r0
      00072A 36               [12] 1716 	addc	a,@r0
      00072B F5 83            [12] 1717 	mov	dph,a
      00072D 74 55            [12] 1718 	mov	a,#0x55
      00072F F0               [24] 1719 	movx	@dptr,a
                                   1720 ;	walk.c:227: for (j = 0; j < COLS; j++)
      000730 0A               [12] 1721 	inc	r2
      000731 BA 00 01         [24] 1722 	cjne	r2,#0x00,00183$
      000734 0E               [12] 1723 	inc	r6
      000735                       1724 00183$:
      000735 C3               [12] 1725 	clr	c
      000736 EA               [12] 1726 	mov	a,r2
      000737 94 C9            [12] 1727 	subb	a,#0xc9
      000739 EE               [12] 1728 	mov	a,r6
      00073A 64 80            [12] 1729 	xrl	a,#0x80
      00073C 94 80            [12] 1730 	subb	a,#0x80
      00073E 40 DF            [24] 1731 	jc	00112$
                                   1732 ;	walk.c:226: for (i = 0; i < ROWS; i++)
      000740 A8*00            [24] 1733 	mov	r0,_bp
      000742 08               [12] 1734 	inc	r0
      000743 74 C9            [12] 1735 	mov	a,#0xc9
      000745 26               [12] 1736 	add	a,@r0
      000746 F6               [12] 1737 	mov	@r0,a
      000747 E4               [12] 1738 	clr	a
      000748 08               [12] 1739 	inc	r0
      000749 36               [12] 1740 	addc	a,@r0
      00074A F6               [12] 1741 	mov	@r0,a
      00074B 0B               [12] 1742 	inc	r3
      00074C BB 00 01         [24] 1743 	cjne	r3,#0x00,00185$
      00074F 0C               [12] 1744 	inc	r4
      000750                       1745 00185$:
      000750 C3               [12] 1746 	clr	c
      000751 EB               [12] 1747 	mov	a,r3
      000752 94 30            [12] 1748 	subb	a,#0x30
      000754 EC               [12] 1749 	mov	a,r4
      000755 64 80            [12] 1750 	xrl	a,#0x80
      000757 94 80            [12] 1751 	subb	a,#0x80
      000759 40 AA            [24] 1752 	jc	00125$
                                   1753 ;	walk.c:230: initial.r = rand() % ROWS;
      00075B E5*00            [12] 1754 	mov	a,_bp
      00075D 24 05            [12] 1755 	add	a,#0x05
      00075F F8               [12] 1756 	mov	r0,a
      000760 C0 07            [24] 1757 	push	ar7
      000762 C0 01            [24] 1758 	push	ar1
      000764 C0 00            [24] 1759 	push	ar0
      000766 12r00r00         [24] 1760 	lcall	_rand
      000769 AD 82            [24] 1761 	mov	r5,dpl
      00076B AE 83            [24] 1762 	mov	r6,dph
      00076D 74 30            [12] 1763 	mov	a,#0x30
      00076F C0 E0            [24] 1764 	push	acc
      000771 E4               [12] 1765 	clr	a
      000772 C0 E0            [24] 1766 	push	acc
      000774 8D 82            [24] 1767 	mov	dpl,r5
      000776 8E 83            [24] 1768 	mov	dph,r6
      000778 12r00r00         [24] 1769 	lcall	__modsint
      00077B AD 82            [24] 1770 	mov	r5,dpl
      00077D AE 83            [24] 1771 	mov	r6,dph
      00077F 15 81            [12] 1772 	dec	sp
      000781 15 81            [12] 1773 	dec	sp
      000783 D0 00            [24] 1774 	pop	ar0
      000785 D0 01            [24] 1775 	pop	ar1
      000787 A6 05            [24] 1776 	mov	@r0,ar5
      000789 08               [12] 1777 	inc	r0
      00078A A6 06            [24] 1778 	mov	@r0,ar6
      00078C 18               [12] 1779 	dec	r0
                                   1780 ;	walk.c:231: initial.c = rand() % COLS;
      00078D 74 02            [12] 1781 	mov	a,#0x02
      00078F 29               [12] 1782 	add	a,r1
      000790 F8               [12] 1783 	mov	r0,a
      000791 C0 01            [24] 1784 	push	ar1
      000793 C0 00            [24] 1785 	push	ar0
      000795 12r00r00         [24] 1786 	lcall	_rand
      000798 AD 82            [24] 1787 	mov	r5,dpl
      00079A AE 83            [24] 1788 	mov	r6,dph
      00079C 74 C9            [12] 1789 	mov	a,#0xc9
      00079E C0 E0            [24] 1790 	push	acc
      0007A0 E4               [12] 1791 	clr	a
      0007A1 C0 E0            [24] 1792 	push	acc
      0007A3 8D 82            [24] 1793 	mov	dpl,r5
      0007A5 8E 83            [24] 1794 	mov	dph,r6
      0007A7 12r00r00         [24] 1795 	lcall	__modsint
      0007AA AD 82            [24] 1796 	mov	r5,dpl
      0007AC AE 83            [24] 1797 	mov	r6,dph
      0007AE 15 81            [12] 1798 	dec	sp
      0007B0 15 81            [12] 1799 	dec	sp
      0007B2 D0 00            [24] 1800 	pop	ar0
      0007B4 A6 05            [24] 1801 	mov	@r0,ar5
      0007B6 08               [12] 1802 	inc	r0
      0007B7 A6 06            [24] 1803 	mov	@r0,ar6
      0007B9 18               [12] 1804 	dec	r0
                                   1805 ;	walk.c:233: puts("\033[2J\033[?25l");
      0007BA 90r00r38         [24] 1806 	mov	dptr,#___str_4
      0007BD 75 F0 80         [24] 1807 	mov	b,#0x80
      0007C0 C0 00            [24] 1808 	push	ar0
      0007C2 12r00r00         [24] 1809 	lcall	_puts
      0007C5 D0 00            [24] 1810 	pop	ar0
      0007C7 D0 01            [24] 1811 	pop	ar1
                                   1812 ;	walk.c:234: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      0007C9 86 05            [24] 1813 	mov	ar5,@r0
      0007CB 08               [12] 1814 	inc	r0
      0007CC 86 06            [24] 1815 	mov	ar6,@r0
      0007CE 18               [12] 1816 	dec	r0
      0007CF 87 03            [24] 1817 	mov	ar3,@r1
      0007D1 09               [12] 1818 	inc	r1
      0007D2 87 04            [24] 1819 	mov	ar4,@r1
      0007D4 19               [12] 1820 	dec	r1
      0007D5 C0 01            [24] 1821 	push	ar1
      0007D7 C0 05            [24] 1822 	push	ar5
      0007D9 C0 06            [24] 1823 	push	ar6
      0007DB C0 03            [24] 1824 	push	ar3
      0007DD C0 04            [24] 1825 	push	ar4
      0007DF E5*00            [12] 1826 	mov	a,_bp
      0007E1 24 09            [12] 1827 	add	a,#0x09
      0007E3 F8               [12] 1828 	mov	r0,a
      0007E4 E6               [12] 1829 	mov	a,@r0
      0007E5 C0 E0            [24] 1830 	push	acc
      0007E7 08               [12] 1831 	inc	r0
      0007E8 E6               [12] 1832 	mov	a,@r0
      0007E9 C0 E0            [24] 1833 	push	acc
      0007EB 74r43            [12] 1834 	mov	a,#___str_5
      0007ED C0 E0            [24] 1835 	push	acc
      0007EF 74s00            [12] 1836 	mov	a,#(___str_5 >> 8)
      0007F1 C0 E0            [24] 1837 	push	acc
      0007F3 74 80            [12] 1838 	mov	a,#0x80
      0007F5 C0 E0            [24] 1839 	push	acc
      0007F7 12r00r00         [24] 1840 	lcall	_printf
      0007FA E5 81            [12] 1841 	mov	a,sp
      0007FC 24 F7            [12] 1842 	add	a,#0xf7
      0007FE F5 81            [12] 1843 	mov	sp,a
      000800 D0 01            [24] 1844 	pop	ar1
      000802 D0 07            [24] 1845 	pop	ar7
                                   1846 ;	walk.c:236: for (i = 0; i < REG; i++) {
      000804 E5*00            [12] 1847 	mov	a,_bp
      000806 24 0B            [12] 1848 	add	a,#0x0b
      000808 F8               [12] 1849 	mov	r0,a
      000809 E4               [12] 1850 	clr	a
      00080A F6               [12] 1851 	mov	@r0,a
      00080B 08               [12] 1852 	inc	r0
      00080C F6               [12] 1853 	mov	@r0,a
      00080D                       1854 00116$:
                                   1855 ;	walk.c:237: neigh[i].r = neigh[REG + i].r * (1 + rand() % 32);
      00080D C0 07            [24] 1856 	push	ar7
      00080F E5*00            [12] 1857 	mov	a,_bp
      000811 24 0B            [12] 1858 	add	a,#0x0b
      000813 F8               [12] 1859 	mov	r0,a
      000814 E6               [12] 1860 	mov	a,@r0
      000815 25 E0            [12] 1861 	add	a,acc
      000817 FB               [12] 1862 	mov	r3,a
      000818 08               [12] 1863 	inc	r0
      000819 E6               [12] 1864 	mov	a,@r0
      00081A 33               [12] 1865 	rlc	a
      00081B FC               [12] 1866 	mov	r4,a
      00081C EB               [12] 1867 	mov	a,r3
      00081D 2B               [12] 1868 	add	a,r3
      00081E FB               [12] 1869 	mov	r3,a
      00081F EC               [12] 1870 	mov	a,r4
      000820 33               [12] 1871 	rlc	a
      000821 FC               [12] 1872 	mov	r4,a
      000822 E5*00            [12] 1873 	mov	a,_bp
      000824 24 03            [12] 1874 	add	a,#0x03
      000826 F8               [12] 1875 	mov	r0,a
      000827 EB               [12] 1876 	mov	a,r3
      000828 24r00            [12] 1877 	add	a,#_neigh
      00082A F6               [12] 1878 	mov	@r0,a
      00082B EC               [12] 1879 	mov	a,r4
      00082C 34s00            [12] 1880 	addc	a,#(_neigh >> 8)
      00082E 08               [12] 1881 	inc	r0
      00082F F6               [12] 1882 	mov	@r0,a
      000830 E5*00            [12] 1883 	mov	a,_bp
      000832 24 0B            [12] 1884 	add	a,#0x0b
      000834 F8               [12] 1885 	mov	r0,a
      000835 86 06            [24] 1886 	mov	ar6,@r0
      000837 74 08            [12] 1887 	mov	a,#0x08
      000839 2E               [12] 1888 	add	a,r6
      00083A FE               [12] 1889 	mov	r6,a
      00083B C2 D5            [12] 1890 	clr	F0
      00083D 75 F0 04         [24] 1891 	mov	b,#0x04
      000840 EE               [12] 1892 	mov	a,r6
      000841 30 E7 04         [24] 1893 	jnb	acc.7,00187$
      000844 B2 D5            [12] 1894 	cpl	F0
      000846 F4               [12] 1895 	cpl	a
      000847 04               [12] 1896 	inc	a
      000848                       1897 00187$:
      000848 A4               [48] 1898 	mul	ab
      000849 30 D5 0A         [24] 1899 	jnb	F0,00188$
      00084C F4               [12] 1900 	cpl	a
      00084D 24 01            [12] 1901 	add	a,#0x01
      00084F C5 F0            [12] 1902 	xch	a,b
      000851 F4               [12] 1903 	cpl	a
      000852 34 00            [12] 1904 	addc	a,#0x00
      000854 C5 F0            [12] 1905 	xch	a,b
      000856                       1906 00188$:
      000856 FE               [12] 1907 	mov	r6,a
      000857 AD F0            [24] 1908 	mov	r5,b
      000859 24r00            [12] 1909 	add	a,#_neigh
      00085B F5 82            [12] 1910 	mov	dpl,a
      00085D ED               [12] 1911 	mov	a,r5
      00085E 34s00            [12] 1912 	addc	a,#(_neigh >> 8)
      000860 F5 83            [12] 1913 	mov	dph,a
      000862 A8*00            [24] 1914 	mov	r0,_bp
      000864 08               [12] 1915 	inc	r0
      000865 E0               [24] 1916 	movx	a,@dptr
      000866 F6               [12] 1917 	mov	@r0,a
      000867 A3               [24] 1918 	inc	dptr
      000868 E0               [24] 1919 	movx	a,@dptr
      000869 08               [12] 1920 	inc	r0
      00086A F6               [12] 1921 	mov	@r0,a
      00086B C0 06            [24] 1922 	push	ar6
      00086D C0 05            [24] 1923 	push	ar5
      00086F C0 04            [24] 1924 	push	ar4
      000871 C0 03            [24] 1925 	push	ar3
      000873 C0 01            [24] 1926 	push	ar1
      000875 12r00r00         [24] 1927 	lcall	_rand
      000878 AA 82            [24] 1928 	mov	r2,dpl
      00087A AF 83            [24] 1929 	mov	r7,dph
      00087C 74 20            [12] 1930 	mov	a,#0x20
      00087E C0 E0            [24] 1931 	push	acc
      000880 E4               [12] 1932 	clr	a
      000881 C0 E0            [24] 1933 	push	acc
      000883 8A 82            [24] 1934 	mov	dpl,r2
      000885 8F 83            [24] 1935 	mov	dph,r7
      000887 12r00r00         [24] 1936 	lcall	__modsint
      00088A AA 82            [24] 1937 	mov	r2,dpl
      00088C AF 83            [24] 1938 	mov	r7,dph
      00088E 15 81            [12] 1939 	dec	sp
      000890 15 81            [12] 1940 	dec	sp
      000892 D0 01            [24] 1941 	pop	ar1
      000894 D0 03            [24] 1942 	pop	ar3
      000896 D0 04            [24] 1943 	pop	ar4
      000898 D0 05            [24] 1944 	pop	ar5
      00089A D0 06            [24] 1945 	pop	ar6
      00089C 0A               [12] 1946 	inc	r2
      00089D BA 00 01         [24] 1947 	cjne	r2,#0x00,00189$
      0008A0 0F               [12] 1948 	inc	r7
      0008A1                       1949 00189$:
      0008A1 C0 06            [24] 1950 	push	ar6
      0008A3 C0 05            [24] 1951 	push	ar5
      0008A5 C0 04            [24] 1952 	push	ar4
      0008A7 C0 03            [24] 1953 	push	ar3
      0008A9 C0 01            [24] 1954 	push	ar1
      0008AB C0 02            [24] 1955 	push	ar2
      0008AD C0 07            [24] 1956 	push	ar7
      0008AF A8*00            [24] 1957 	mov	r0,_bp
      0008B1 08               [12] 1958 	inc	r0
      0008B2 86 82            [24] 1959 	mov	dpl,@r0
      0008B4 08               [12] 1960 	inc	r0
      0008B5 86 83            [24] 1961 	mov	dph,@r0
      0008B7 12r00r00         [24] 1962 	lcall	__mulint
      0008BA AA 82            [24] 1963 	mov	r2,dpl
      0008BC AF 83            [24] 1964 	mov	r7,dph
      0008BE 15 81            [12] 1965 	dec	sp
      0008C0 15 81            [12] 1966 	dec	sp
      0008C2 D0 01            [24] 1967 	pop	ar1
      0008C4 D0 03            [24] 1968 	pop	ar3
      0008C6 D0 04            [24] 1969 	pop	ar4
      0008C8 D0 05            [24] 1970 	pop	ar5
      0008CA D0 06            [24] 1971 	pop	ar6
      0008CC E5*00            [12] 1972 	mov	a,_bp
      0008CE 24 03            [12] 1973 	add	a,#0x03
      0008D0 F8               [12] 1974 	mov	r0,a
      0008D1 86 82            [24] 1975 	mov	dpl,@r0
      0008D3 08               [12] 1976 	inc	r0
      0008D4 86 83            [24] 1977 	mov	dph,@r0
      0008D6 EA               [12] 1978 	mov	a,r2
      0008D7 F0               [24] 1979 	movx	@dptr,a
      0008D8 EF               [12] 1980 	mov	a,r7
      0008D9 A3               [24] 1981 	inc	dptr
      0008DA F0               [24] 1982 	movx	@dptr,a
                                   1983 ;	walk.c:238: neigh[i].c = neigh[REG + i].c * (1 + rand() % 32);
      0008DB EB               [12] 1984 	mov	a,r3
      0008DC 24r00            [12] 1985 	add	a,#_neigh
      0008DE FB               [12] 1986 	mov	r3,a
      0008DF EC               [12] 1987 	mov	a,r4
      0008E0 34s00            [12] 1988 	addc	a,#(_neigh >> 8)
      0008E2 FC               [12] 1989 	mov	r4,a
      0008E3 74 02            [12] 1990 	mov	a,#0x02
      0008E5 2B               [12] 1991 	add	a,r3
      0008E6 FA               [12] 1992 	mov	r2,a
      0008E7 E4               [12] 1993 	clr	a
      0008E8 3C               [12] 1994 	addc	a,r4
      0008E9 FF               [12] 1995 	mov	r7,a
      0008EA EE               [12] 1996 	mov	a,r6
      0008EB 24r00            [12] 1997 	add	a,#_neigh
      0008ED FE               [12] 1998 	mov	r6,a
      0008EE ED               [12] 1999 	mov	a,r5
      0008EF 34s00            [12] 2000 	addc	a,#(_neigh >> 8)
      0008F1 FD               [12] 2001 	mov	r5,a
      0008F2 8E 82            [24] 2002 	mov	dpl,r6
      0008F4 8D 83            [24] 2003 	mov	dph,r5
      0008F6 A3               [24] 2004 	inc	dptr
      0008F7 A3               [24] 2005 	inc	dptr
      0008F8 E5*00            [12] 2006 	mov	a,_bp
      0008FA 24 03            [12] 2007 	add	a,#0x03
      0008FC F8               [12] 2008 	mov	r0,a
      0008FD E0               [24] 2009 	movx	a,@dptr
      0008FE F6               [12] 2010 	mov	@r0,a
      0008FF A3               [24] 2011 	inc	dptr
      000900 E0               [24] 2012 	movx	a,@dptr
      000901 08               [12] 2013 	inc	r0
      000902 F6               [12] 2014 	mov	@r0,a
      000903 C0 07            [24] 2015 	push	ar7
      000905 C0 04            [24] 2016 	push	ar4
      000907 C0 03            [24] 2017 	push	ar3
      000909 C0 02            [24] 2018 	push	ar2
      00090B C0 01            [24] 2019 	push	ar1
      00090D 12r00r00         [24] 2020 	lcall	_rand
      000910 AD 82            [24] 2021 	mov	r5,dpl
      000912 AE 83            [24] 2022 	mov	r6,dph
      000914 74 20            [12] 2023 	mov	a,#0x20
      000916 C0 E0            [24] 2024 	push	acc
      000918 E4               [12] 2025 	clr	a
      000919 C0 E0            [24] 2026 	push	acc
      00091B 8D 82            [24] 2027 	mov	dpl,r5
      00091D 8E 83            [24] 2028 	mov	dph,r6
      00091F 12r00r00         [24] 2029 	lcall	__modsint
      000922 AD 82            [24] 2030 	mov	r5,dpl
      000924 AE 83            [24] 2031 	mov	r6,dph
      000926 15 81            [12] 2032 	dec	sp
      000928 15 81            [12] 2033 	dec	sp
      00092A D0 01            [24] 2034 	pop	ar1
      00092C D0 02            [24] 2035 	pop	ar2
      00092E D0 03            [24] 2036 	pop	ar3
      000930 D0 04            [24] 2037 	pop	ar4
      000932 D0 07            [24] 2038 	pop	ar7
      000934 0D               [12] 2039 	inc	r5
      000935 BD 00 01         [24] 2040 	cjne	r5,#0x00,00190$
      000938 0E               [12] 2041 	inc	r6
      000939                       2042 00190$:
      000939 C0 07            [24] 2043 	push	ar7
      00093B C0 04            [24] 2044 	push	ar4
      00093D C0 03            [24] 2045 	push	ar3
      00093F C0 02            [24] 2046 	push	ar2
      000941 C0 01            [24] 2047 	push	ar1
      000943 C0 05            [24] 2048 	push	ar5
      000945 C0 06            [24] 2049 	push	ar6
      000947 E5*00            [12] 2050 	mov	a,_bp
      000949 24 03            [12] 2051 	add	a,#0x03
      00094B F8               [12] 2052 	mov	r0,a
      00094C 86 82            [24] 2053 	mov	dpl,@r0
      00094E 08               [12] 2054 	inc	r0
      00094F 86 83            [24] 2055 	mov	dph,@r0
      000951 12r00r00         [24] 2056 	lcall	__mulint
      000954 AD 82            [24] 2057 	mov	r5,dpl
      000956 AE 83            [24] 2058 	mov	r6,dph
      000958 15 81            [12] 2059 	dec	sp
      00095A 15 81            [12] 2060 	dec	sp
      00095C D0 01            [24] 2061 	pop	ar1
      00095E D0 02            [24] 2062 	pop	ar2
      000960 D0 03            [24] 2063 	pop	ar3
      000962 D0 04            [24] 2064 	pop	ar4
      000964 D0 07            [24] 2065 	pop	ar7
      000966 8A 82            [24] 2066 	mov	dpl,r2
      000968 8F 83            [24] 2067 	mov	dph,r7
      00096A ED               [12] 2068 	mov	a,r5
      00096B F0               [24] 2069 	movx	@dptr,a
      00096C EE               [12] 2070 	mov	a,r6
      00096D A3               [24] 2071 	inc	dptr
      00096E F0               [24] 2072 	movx	@dptr,a
                                   2073 ;	walk.c:239: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      00096F 8B 82            [24] 2074 	mov	dpl,r3
      000971 8C 83            [24] 2075 	mov	dph,r4
      000973 E0               [24] 2076 	movx	a,@dptr
      000974 FB               [12] 2077 	mov	r3,a
      000975 A3               [24] 2078 	inc	dptr
      000976 E0               [24] 2079 	movx	a,@dptr
      000977 FC               [12] 2080 	mov	r4,a
      000978 C0 07            [24] 2081 	push	ar7
      00097A C0 01            [24] 2082 	push	ar1
      00097C C0 05            [24] 2083 	push	ar5
      00097E C0 06            [24] 2084 	push	ar6
      000980 C0 03            [24] 2085 	push	ar3
      000982 C0 04            [24] 2086 	push	ar4
      000984 74r56            [12] 2087 	mov	a,#___str_6
      000986 C0 E0            [24] 2088 	push	acc
      000988 74s00            [12] 2089 	mov	a,#(___str_6 >> 8)
      00098A C0 E0            [24] 2090 	push	acc
      00098C 74 80            [12] 2091 	mov	a,#0x80
      00098E C0 E0            [24] 2092 	push	acc
      000990 12r00r00         [24] 2093 	lcall	_printf
      000993 E5 81            [12] 2094 	mov	a,sp
      000995 24 F9            [12] 2095 	add	a,#0xf9
      000997 F5 81            [12] 2096 	mov	sp,a
      000999 D0 01            [24] 2097 	pop	ar1
      00099B D0 07            [24] 2098 	pop	ar7
                                   2099 ;	walk.c:236: for (i = 0; i < REG; i++) {
      00099D E5*00            [12] 2100 	mov	a,_bp
      00099F 24 0B            [12] 2101 	add	a,#0x0b
      0009A1 F8               [12] 2102 	mov	r0,a
      0009A2 06               [12] 2103 	inc	@r0
      0009A3 B6 00 02         [24] 2104 	cjne	@r0,#0x00,00191$
      0009A6 08               [12] 2105 	inc	r0
      0009A7 06               [12] 2106 	inc	@r0
      0009A8                       2107 00191$:
      0009A8 E5*00            [12] 2108 	mov	a,_bp
      0009AA 24 0B            [12] 2109 	add	a,#0x0b
      0009AC F8               [12] 2110 	mov	r0,a
      0009AD 86 05            [24] 2111 	mov	ar5,@r0
      0009AF 08               [12] 2112 	inc	r0
      0009B0 86 06            [24] 2113 	mov	ar6,@r0
      0009B2 C3               [12] 2114 	clr	c
      0009B3 ED               [12] 2115 	mov	a,r5
      0009B4 94 08            [12] 2116 	subb	a,#0x08
      0009B6 EE               [12] 2117 	mov	a,r6
      0009B7 94 00            [12] 2118 	subb	a,#0x00
      0009B9 D0 07            [24] 2119 	pop	ar7
      0009BB 50 03            [24] 2120 	jnc	00192$
      0009BD 02r08r0D         [24] 2121 	ljmp	00116$
      0009C0                       2122 00192$:
                                   2123 ;	walk.c:242: OE76 = OE76_0;
      0009C0 78r01            [12] 2124 	mov	r0,#_OE76
      0009C2 76 3F            [12] 2125 	mov	@r0,#0x3f
                                   2126 ;	walk.c:243: setOE(OE76_NC);
      0009C4 75 82 00         [24] 2127 	mov	dpl,#0x00
      0009C7 C0 07            [24] 2128 	push	ar7
      0009C9 C0 01            [24] 2129 	push	ar1
      0009CB 12r00r30         [24] 2130 	lcall	_setOE
      0009CE D0 01            [24] 2131 	pop	ar1
      0009D0 D0 07            [24] 2132 	pop	ar7
                                   2133 ;	walk.c:245: walk(&initial);
      0009D2 8F 04            [24] 2134 	mov	ar4,r7
      0009D4 7D 00            [12] 2135 	mov	r5,#0x00
      0009D6 7E 40            [12] 2136 	mov	r6,#0x40
      0009D8 8C 82            [24] 2137 	mov	dpl,r4
      0009DA 8D 83            [24] 2138 	mov	dph,r5
      0009DC 8E F0            [24] 2139 	mov	b,r6
      0009DE C0 07            [24] 2140 	push	ar7
      0009E0 C0 01            [24] 2141 	push	ar1
      0009E2 12r03r09         [24] 2142 	lcall	_walk
      0009E5 D0 01            [24] 2143 	pop	ar1
      0009E7 D0 07            [24] 2144 	pop	ar7
                                   2145 ;	walk.c:247: for (i = 0; i < ROWS; i++)
      0009E9 E5*00            [12] 2146 	mov	a,_bp
      0009EB 24 0B            [12] 2147 	add	a,#0x0b
      0009ED F8               [12] 2148 	mov	r0,a
      0009EE E4               [12] 2149 	clr	a
      0009EF F6               [12] 2150 	mov	@r0,a
      0009F0 08               [12] 2151 	inc	r0
      0009F1 F6               [12] 2152 	mov	@r0,a
      0009F2 7B 00            [12] 2153 	mov	r3,#0x00
      0009F4 7C 00            [12] 2154 	mov	r4,#0x00
                                   2155 ;	walk.c:248: for (j = 0; j < COLS; j++)
      0009F6                       2156 00132$:
      0009F6 E5*00            [12] 2157 	mov	a,_bp
      0009F8 24 03            [12] 2158 	add	a,#0x03
      0009FA F8               [12] 2159 	mov	r0,a
      0009FB EB               [12] 2160 	mov	a,r3
      0009FC 24r00            [12] 2161 	add	a,#_g
      0009FE F6               [12] 2162 	mov	@r0,a
      0009FF EC               [12] 2163 	mov	a,r4
      000A00 34s00            [12] 2164 	addc	a,#(_g >> 8)
      000A02 08               [12] 2165 	inc	r0
      000A03 F6               [12] 2166 	mov	@r0,a
      000A04 7A 00            [12] 2167 	mov	r2,#0x00
      000A06 7E 00            [12] 2168 	mov	r6,#0x00
      000A08                       2169 00118$:
                                   2170 ;	walk.c:249: if (g[i][j] != 0xaau) bang();
      000A08 E5*00            [12] 2171 	mov	a,_bp
      000A0A 24 03            [12] 2172 	add	a,#0x03
      000A0C F8               [12] 2173 	mov	r0,a
      000A0D EA               [12] 2174 	mov	a,r2
      000A0E 26               [12] 2175 	add	a,@r0
      000A0F F5 82            [12] 2176 	mov	dpl,a
      000A11 EE               [12] 2177 	mov	a,r6
      000A12 08               [12] 2178 	inc	r0
      000A13 36               [12] 2179 	addc	a,@r0
      000A14 F5 83            [12] 2180 	mov	dph,a
      000A16 E0               [24] 2181 	movx	a,@dptr
      000A17 FD               [12] 2182 	mov	r5,a
      000A18 BD AA 02         [24] 2183 	cjne	r5,#0xaa,00193$
      000A1B 80 1B            [24] 2184 	sjmp	00119$
      000A1D                       2185 00193$:
      000A1D C0 07            [24] 2186 	push	ar7
      000A1F C0 06            [24] 2187 	push	ar6
      000A21 C0 04            [24] 2188 	push	ar4
      000A23 C0 03            [24] 2189 	push	ar3
      000A25 C0 02            [24] 2190 	push	ar2
      000A27 C0 01            [24] 2191 	push	ar1
      000A29 12r00r23         [24] 2192 	lcall	_bang
      000A2C D0 01            [24] 2193 	pop	ar1
      000A2E D0 02            [24] 2194 	pop	ar2
      000A30 D0 03            [24] 2195 	pop	ar3
      000A32 D0 04            [24] 2196 	pop	ar4
      000A34 D0 06            [24] 2197 	pop	ar6
      000A36 D0 07            [24] 2198 	pop	ar7
      000A38                       2199 00119$:
                                   2200 ;	walk.c:248: for (j = 0; j < COLS; j++)
      000A38 0A               [12] 2201 	inc	r2
      000A39 BA 00 01         [24] 2202 	cjne	r2,#0x00,00194$
      000A3C 0E               [12] 2203 	inc	r6
      000A3D                       2204 00194$:
      000A3D C3               [12] 2205 	clr	c
      000A3E EA               [12] 2206 	mov	a,r2
      000A3F 94 C9            [12] 2207 	subb	a,#0xc9
      000A41 EE               [12] 2208 	mov	a,r6
      000A42 64 80            [12] 2209 	xrl	a,#0x80
      000A44 94 80            [12] 2210 	subb	a,#0x80
      000A46 40 C0            [24] 2211 	jc	00118$
                                   2212 ;	walk.c:247: for (i = 0; i < ROWS; i++)
      000A48 74 C9            [12] 2213 	mov	a,#0xc9
      000A4A 2B               [12] 2214 	add	a,r3
      000A4B FB               [12] 2215 	mov	r3,a
      000A4C E4               [12] 2216 	clr	a
      000A4D 3C               [12] 2217 	addc	a,r4
      000A4E FC               [12] 2218 	mov	r4,a
      000A4F E5*00            [12] 2219 	mov	a,_bp
      000A51 24 0B            [12] 2220 	add	a,#0x0b
      000A53 F8               [12] 2221 	mov	r0,a
      000A54 06               [12] 2222 	inc	@r0
      000A55 B6 00 02         [24] 2223 	cjne	@r0,#0x00,00196$
      000A58 08               [12] 2224 	inc	r0
      000A59 06               [12] 2225 	inc	@r0
      000A5A                       2226 00196$:
      000A5A E5*00            [12] 2227 	mov	a,_bp
      000A5C 24 0B            [12] 2228 	add	a,#0x0b
      000A5E F8               [12] 2229 	mov	r0,a
      000A5F C3               [12] 2230 	clr	c
      000A60 E6               [12] 2231 	mov	a,@r0
      000A61 94 30            [12] 2232 	subb	a,#0x30
      000A63 08               [12] 2233 	inc	r0
      000A64 E6               [12] 2234 	mov	a,@r0
      000A65 64 80            [12] 2235 	xrl	a,#0x80
      000A67 94 80            [12] 2236 	subb	a,#0x80
      000A69 40 8B            [24] 2237 	jc	00132$
                                   2238 ;	walk.c:251: N++;
      000A6B E5*00            [12] 2239 	mov	a,_bp
      000A6D 24 09            [12] 2240 	add	a,#0x09
      000A6F F8               [12] 2241 	mov	r0,a
      000A70 06               [12] 2242 	inc	@r0
      000A71 B6 00 02         [24] 2243 	cjne	@r0,#0x00,00198$
      000A74 08               [12] 2244 	inc	r0
      000A75 06               [12] 2245 	inc	@r0
      000A76                       2246 00198$:
      000A76 02r06rF2         [24] 2247 	ljmp	00108$
      000A79                       2248 00110$:
                                   2249 ;	walk.c:254: EA = 0;
                                   2250 ;	assignBit
      000A79 C2 AF            [12] 2251 	clr	_EA
                                   2252 ;	walk.c:256: puts("\033[2J\033[?25h");
      000A7B 90r00r5F         [24] 2253 	mov	dptr,#___str_7
      000A7E 75 F0 80         [24] 2254 	mov	b,#0x80
      000A81 12r00r00         [24] 2255 	lcall	_puts
                                   2256 ;	walk.c:38: PCON |= 2;
      000A84 43 87 02         [24] 2257 	orl	_PCON,#0x02
                                   2258 ;	walk.c:260: return;
                                   2259 ;	walk.c:261: }
      000A87 85*00 81         [24] 2260 	mov	sp,_bp
      000A8A D0*00            [24] 2261 	pop	_bp
      000A8C 22               [24] 2262 	ret
                                   2263 ;------------------------------------------------------------
                                   2264 ;Allocation info for local variables in function 'qinit'
                                   2265 ;------------------------------------------------------------
                                   2266 ;	walk.c:263: static void qinit(void) {
                                   2267 ;	-----------------------------------------
                                   2268 ;	 function qinit
                                   2269 ;	-----------------------------------------
      000A8D                       2270 _qinit:
                                   2271 ;	walk.c:264: hp = tp = 0;
      000A8D 90rBCr72         [24] 2272 	mov	dptr,#_tp
      000A90 E4               [12] 2273 	clr	a
      000A91 F0               [24] 2274 	movx	@dptr,a
      000A92 A3               [24] 2275 	inc	dptr
      000A93 F0               [24] 2276 	movx	@dptr,a
      000A94 90rBCr70         [24] 2277 	mov	dptr,#_hp
      000A97 F0               [24] 2278 	movx	@dptr,a
      000A98 A3               [24] 2279 	inc	dptr
      000A99 F0               [24] 2280 	movx	@dptr,a
                                   2281 ;	walk.c:265: return;
                                   2282 ;	walk.c:266: }
      000A9A 22               [24] 2283 	ret
                                   2284 ;------------------------------------------------------------
                                   2285 ;Allocation info for local variables in function 'qadd'
                                   2286 ;------------------------------------------------------------
                                   2287 ;t                         Allocated to registers r7 r5 r6 
                                   2288 ;sloc0                     Allocated to stack - _bp +1
                                   2289 ;sloc1                     Allocated to stack - _bp +3
                                   2290 ;sloc2                     Allocated to stack - _bp +5
                                   2291 ;sloc3                     Allocated to stack - _bp +10
                                   2292 ;------------------------------------------------------------
                                   2293 ;	walk.c:268: static uint8_t qadd(struct node *t) {
                                   2294 ;	-----------------------------------------
                                   2295 ;	 function qadd
                                   2296 ;	-----------------------------------------
      000A9B                       2297 _qadd:
      000A9B C0*00            [24] 2298 	push	_bp
      000A9D E5 81            [12] 2299 	mov	a,sp
      000A9F F5*00            [12] 2300 	mov	_bp,a
      000AA1 24 06            [12] 2301 	add	a,#0x06
      000AA3 F5 81            [12] 2302 	mov	sp,a
      000AA5 AF 82            [24] 2303 	mov	r7,dpl
      000AA7 AD 83            [24] 2304 	mov	r5,dph
      000AA9 AE F0            [24] 2305 	mov	r6,b
                                   2306 ;	walk.c:269: if (((hp + 1) % QMAX) == tp) return 0u;
      000AAB 90rBCr70         [24] 2307 	mov	dptr,#_hp
      000AAE E0               [24] 2308 	movx	a,@dptr
      000AAF FB               [12] 2309 	mov	r3,a
      000AB0 A3               [24] 2310 	inc	dptr
      000AB1 E0               [24] 2311 	movx	a,@dptr
      000AB2 FC               [12] 2312 	mov	r4,a
      000AB3 A8*00            [24] 2313 	mov	r0,_bp
      000AB5 08               [12] 2314 	inc	r0
      000AB6 74 01            [12] 2315 	mov	a,#0x01
      000AB8 2B               [12] 2316 	add	a,r3
      000AB9 F6               [12] 2317 	mov	@r0,a
      000ABA E4               [12] 2318 	clr	a
      000ABB 3C               [12] 2319 	addc	a,r4
      000ABC 08               [12] 2320 	inc	r0
      000ABD F6               [12] 2321 	mov	@r0,a
      000ABE C0 07            [24] 2322 	push	ar7
      000AC0 C0 06            [24] 2323 	push	ar6
      000AC2 C0 05            [24] 2324 	push	ar5
      000AC4 C0 04            [24] 2325 	push	ar4
      000AC6 C0 03            [24] 2326 	push	ar3
      000AC8 74 B0            [12] 2327 	mov	a,#0xb0
      000ACA C0 E0            [24] 2328 	push	acc
      000ACC 74 25            [12] 2329 	mov	a,#0x25
      000ACE C0 E0            [24] 2330 	push	acc
      000AD0 A8*00            [24] 2331 	mov	r0,_bp
      000AD2 08               [12] 2332 	inc	r0
      000AD3 86 82            [24] 2333 	mov	dpl,@r0
      000AD5 08               [12] 2334 	inc	r0
      000AD6 86 83            [24] 2335 	mov	dph,@r0
      000AD8 12r00r00         [24] 2336 	lcall	__modsint
      000ADB A8*00            [24] 2337 	mov	r0,_bp
      000ADD 08               [12] 2338 	inc	r0
      000ADE 08               [12] 2339 	inc	r0
      000ADF 08               [12] 2340 	inc	r0
      000AE0 A6 82            [24] 2341 	mov	@r0,dpl
      000AE2 08               [12] 2342 	inc	r0
      000AE3 A6 83            [24] 2343 	mov	@r0,dph
      000AE5 15 81            [12] 2344 	dec	sp
      000AE7 15 81            [12] 2345 	dec	sp
      000AE9 D0 03            [24] 2346 	pop	ar3
      000AEB D0 04            [24] 2347 	pop	ar4
      000AED D0 05            [24] 2348 	pop	ar5
      000AEF D0 06            [24] 2349 	pop	ar6
      000AF1 D0 07            [24] 2350 	pop	ar7
      000AF3 90rBCr72         [24] 2351 	mov	dptr,#_tp
      000AF6 E5*00            [12] 2352 	mov	a,_bp
      000AF8 24 05            [12] 2353 	add	a,#0x05
      000AFA F8               [12] 2354 	mov	r0,a
      000AFB E0               [24] 2355 	movx	a,@dptr
      000AFC F6               [12] 2356 	mov	@r0,a
      000AFD A3               [24] 2357 	inc	dptr
      000AFE E0               [24] 2358 	movx	a,@dptr
      000AFF 08               [12] 2359 	inc	r0
      000B00 F6               [12] 2360 	mov	@r0,a
      000B01 E5*00            [12] 2361 	mov	a,_bp
      000B03 24 03            [12] 2362 	add	a,#0x03
      000B05 F8               [12] 2363 	mov	r0,a
      000B06 E5*00            [12] 2364 	mov	a,_bp
      000B08 24 05            [12] 2365 	add	a,#0x05
      000B0A F9               [12] 2366 	mov	r1,a
      000B0B 86 F0            [24] 2367 	mov	b,@r0
      000B0D E7               [12] 2368 	mov	a,@r1
      000B0E B5 F0 0A         [24] 2369 	cjne	a,b,00109$
      000B11 08               [12] 2370 	inc	r0
      000B12 86 F0            [24] 2371 	mov	b,@r0
      000B14 09               [12] 2372 	inc	r1
      000B15 E7               [12] 2373 	mov	a,@r1
      000B16 B5 F0 02         [24] 2374 	cjne	a,b,00109$
      000B19 80 02            [24] 2375 	sjmp	00110$
      000B1B                       2376 00109$:
      000B1B 80 05            [24] 2377 	sjmp	00102$
      000B1D                       2378 00110$:
      000B1D 75 82 00         [24] 2379 	mov	dpl,#0x00
      000B20 80 65            [24] 2380 	sjmp	00103$
      000B22                       2381 00102$:
                                   2382 ;	walk.c:270: queue[hp] = *t;
      000B22 8F 02            [24] 2383 	mov	ar2,r7
      000B24 8E 07            [24] 2384 	mov	ar7,r6
      000B26 EB               [12] 2385 	mov	a,r3
      000B27 2B               [12] 2386 	add	a,r3
      000B28 FB               [12] 2387 	mov	r3,a
      000B29 EC               [12] 2388 	mov	a,r4
      000B2A 33               [12] 2389 	rlc	a
      000B2B FC               [12] 2390 	mov	r4,a
      000B2C EB               [12] 2391 	mov	a,r3
      000B2D 2B               [12] 2392 	add	a,r3
      000B2E FB               [12] 2393 	mov	r3,a
      000B2F EC               [12] 2394 	mov	a,r4
      000B30 33               [12] 2395 	rlc	a
      000B31 FC               [12] 2396 	mov	r4,a
      000B32 EB               [12] 2397 	mov	a,r3
      000B33 24rB0            [12] 2398 	add	a,#_queue
      000B35 FB               [12] 2399 	mov	r3,a
      000B36 EC               [12] 2400 	mov	a,r4
      000B37 34s25            [12] 2401 	addc	a,#(_queue >> 8)
      000B39 FC               [12] 2402 	mov	r4,a
      000B3A 7E 00            [12] 2403 	mov	r6,#0x00
      000B3C 74 04            [12] 2404 	mov	a,#0x04
      000B3E C0 E0            [24] 2405 	push	acc
      000B40 E4               [12] 2406 	clr	a
      000B41 C0 E0            [24] 2407 	push	acc
      000B43 C0 02            [24] 2408 	push	ar2
      000B45 C0 05            [24] 2409 	push	ar5
      000B47 C0 07            [24] 2410 	push	ar7
      000B49 8B 82            [24] 2411 	mov	dpl,r3
      000B4B 8C 83            [24] 2412 	mov	dph,r4
      000B4D 8E F0            [24] 2413 	mov	b,r6
      000B4F 12r00r00         [24] 2414 	lcall	___memcpy
      000B52 E5 81            [12] 2415 	mov	a,sp
      000B54 24 FB            [12] 2416 	add	a,#0xfb
      000B56 F5 81            [12] 2417 	mov	sp,a
                                   2418 ;	walk.c:271: hp = (hp + 1) % QMAX;
      000B58 90rBCr70         [24] 2419 	mov	dptr,#_hp
      000B5B E0               [24] 2420 	movx	a,@dptr
      000B5C FD               [12] 2421 	mov	r5,a
      000B5D A3               [24] 2422 	inc	dptr
      000B5E E0               [24] 2423 	movx	a,@dptr
      000B5F FE               [12] 2424 	mov	r6,a
      000B60 0D               [12] 2425 	inc	r5
      000B61 BD 00 01         [24] 2426 	cjne	r5,#0x00,00111$
      000B64 0E               [12] 2427 	inc	r6
      000B65                       2428 00111$:
      000B65 74 B0            [12] 2429 	mov	a,#0xb0
      000B67 C0 E0            [24] 2430 	push	acc
      000B69 74 25            [12] 2431 	mov	a,#0x25
      000B6B C0 E0            [24] 2432 	push	acc
      000B6D 8D 82            [24] 2433 	mov	dpl,r5
      000B6F 8E 83            [24] 2434 	mov	dph,r6
      000B71 12r00r00         [24] 2435 	lcall	__modsint
      000B74 AD 82            [24] 2436 	mov	r5,dpl
      000B76 AE 83            [24] 2437 	mov	r6,dph
      000B78 15 81            [12] 2438 	dec	sp
      000B7A 15 81            [12] 2439 	dec	sp
      000B7C 90rBCr70         [24] 2440 	mov	dptr,#_hp
      000B7F ED               [12] 2441 	mov	a,r5
      000B80 F0               [24] 2442 	movx	@dptr,a
      000B81 EE               [12] 2443 	mov	a,r6
      000B82 A3               [24] 2444 	inc	dptr
      000B83 F0               [24] 2445 	movx	@dptr,a
                                   2446 ;	walk.c:272: return 1u;
      000B84 75 82 01         [24] 2447 	mov	dpl,#0x01
      000B87                       2448 00103$:
                                   2449 ;	walk.c:273: }
      000B87 85*00 81         [24] 2450 	mov	sp,_bp
      000B8A D0*00            [24] 2451 	pop	_bp
      000B8C 22               [24] 2452 	ret
                                   2453 ;------------------------------------------------------------
                                   2454 ;Allocation info for local variables in function 'qget'
                                   2455 ;------------------------------------------------------------
                                   2456 ;t                         Allocated to registers r5 r6 r7 
                                   2457 ;------------------------------------------------------------
                                   2458 ;	walk.c:275: static uint8_t qget(struct node *t) {
                                   2459 ;	-----------------------------------------
                                   2460 ;	 function qget
                                   2461 ;	-----------------------------------------
      000B8D                       2462 _qget:
      000B8D AD 82            [24] 2463 	mov	r5,dpl
      000B8F AE 83            [24] 2464 	mov	r6,dph
      000B91 AF F0            [24] 2465 	mov	r7,b
                                   2466 ;	walk.c:276: if (hp == tp) return 0u;
      000B93 90rBCr70         [24] 2467 	mov	dptr,#_hp
      000B96 E0               [24] 2468 	movx	a,@dptr
      000B97 FB               [12] 2469 	mov	r3,a
      000B98 A3               [24] 2470 	inc	dptr
      000B99 E0               [24] 2471 	movx	a,@dptr
      000B9A FC               [12] 2472 	mov	r4,a
      000B9B 90rBCr72         [24] 2473 	mov	dptr,#_tp
      000B9E E0               [24] 2474 	movx	a,@dptr
      000B9F F9               [12] 2475 	mov	r1,a
      000BA0 A3               [24] 2476 	inc	dptr
      000BA1 E0               [24] 2477 	movx	a,@dptr
      000BA2 FA               [12] 2478 	mov	r2,a
      000BA3 EB               [12] 2479 	mov	a,r3
      000BA4 B5 01 08         [24] 2480 	cjne	a,ar1,00102$
      000BA7 EC               [12] 2481 	mov	a,r4
      000BA8 B5 02 04         [24] 2482 	cjne	a,ar2,00102$
      000BAB 75 82 00         [24] 2483 	mov	dpl,#0x00
      000BAE 22               [24] 2484 	ret
      000BAF                       2485 00102$:
                                   2486 ;	walk.c:277: *t = queue[tp];
      000BAF E9               [12] 2487 	mov	a,r1
      000BB0 29               [12] 2488 	add	a,r1
      000BB1 F9               [12] 2489 	mov	r1,a
      000BB2 EA               [12] 2490 	mov	a,r2
      000BB3 33               [12] 2491 	rlc	a
      000BB4 FA               [12] 2492 	mov	r2,a
      000BB5 E9               [12] 2493 	mov	a,r1
      000BB6 29               [12] 2494 	add	a,r1
      000BB7 F9               [12] 2495 	mov	r1,a
      000BB8 EA               [12] 2496 	mov	a,r2
      000BB9 33               [12] 2497 	rlc	a
      000BBA FA               [12] 2498 	mov	r2,a
      000BBB E9               [12] 2499 	mov	a,r1
      000BBC 24rB0            [12] 2500 	add	a,#_queue
      000BBE F9               [12] 2501 	mov	r1,a
      000BBF EA               [12] 2502 	mov	a,r2
      000BC0 34s25            [12] 2503 	addc	a,#(_queue >> 8)
      000BC2 FA               [12] 2504 	mov	r2,a
      000BC3 7C 00            [12] 2505 	mov	r4,#0x00
      000BC5 74 04            [12] 2506 	mov	a,#0x04
      000BC7 C0 E0            [24] 2507 	push	acc
      000BC9 E4               [12] 2508 	clr	a
      000BCA C0 E0            [24] 2509 	push	acc
      000BCC C0 01            [24] 2510 	push	ar1
      000BCE C0 02            [24] 2511 	push	ar2
      000BD0 C0 04            [24] 2512 	push	ar4
      000BD2 8D 82            [24] 2513 	mov	dpl,r5
      000BD4 8E 83            [24] 2514 	mov	dph,r6
      000BD6 8F F0            [24] 2515 	mov	b,r7
      000BD8 12r00r00         [24] 2516 	lcall	___memcpy
      000BDB E5 81            [12] 2517 	mov	a,sp
      000BDD 24 FB            [12] 2518 	add	a,#0xfb
      000BDF F5 81            [12] 2519 	mov	sp,a
                                   2520 ;	walk.c:278: tp = (tp + 1) % QMAX;
      000BE1 90rBCr72         [24] 2521 	mov	dptr,#_tp
      000BE4 E0               [24] 2522 	movx	a,@dptr
      000BE5 FE               [12] 2523 	mov	r6,a
      000BE6 A3               [24] 2524 	inc	dptr
      000BE7 E0               [24] 2525 	movx	a,@dptr
      000BE8 FF               [12] 2526 	mov	r7,a
      000BE9 0E               [12] 2527 	inc	r6
      000BEA BE 00 01         [24] 2528 	cjne	r6,#0x00,00111$
      000BED 0F               [12] 2529 	inc	r7
      000BEE                       2530 00111$:
      000BEE 74 B0            [12] 2531 	mov	a,#0xb0
      000BF0 C0 E0            [24] 2532 	push	acc
      000BF2 74 25            [12] 2533 	mov	a,#0x25
      000BF4 C0 E0            [24] 2534 	push	acc
      000BF6 8E 82            [24] 2535 	mov	dpl,r6
      000BF8 8F 83            [24] 2536 	mov	dph,r7
      000BFA 12r00r00         [24] 2537 	lcall	__modsint
      000BFD AE 82            [24] 2538 	mov	r6,dpl
      000BFF AF 83            [24] 2539 	mov	r7,dph
      000C01 15 81            [12] 2540 	dec	sp
      000C03 15 81            [12] 2541 	dec	sp
      000C05 90rBCr72         [24] 2542 	mov	dptr,#_tp
      000C08 EE               [12] 2543 	mov	a,r6
      000C09 F0               [24] 2544 	movx	@dptr,a
      000C0A EF               [12] 2545 	mov	a,r7
      000C0B A3               [24] 2546 	inc	dptr
      000C0C F0               [24] 2547 	movx	@dptr,a
                                   2548 ;	walk.c:279: return 1u;
      000C0D 75 82 01         [24] 2549 	mov	dpl,#0x01
                                   2550 ;	walk.c:280: }
      000C10 22               [24] 2551 	ret
                                   2552 	.area CSEG    (CODE)
                                   2553 	.area CONST   (CODE)
                                   2554 	.area CONST   (CODE)
      000000                       2555 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2556 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2557 	.db 0x00
                                   2558 	.area CSEG    (CODE)
                                   2559 	.area CONST   (CODE)
      00000D                       2560 ___str_1:
      00000D 1B                    2561 	.db 0x1b
      00000E 5B 32 3B 31 48 25 20  2562 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      000023 00                    2563 	.db 0x00
                                   2564 	.area CSEG    (CODE)
                                   2565 	.area CONST   (CODE)
      000024                       2566 ___str_2:
      000024 1B                    2567 	.db 0x1b
      000025 5B 25 64 3B 25 64 48  2568 	.ascii "[%d;%dH."
             2E
      00002D 00                    2569 	.db 0x00
                                   2570 	.area CSEG    (CODE)
                                   2571 	.area CONST   (CODE)
      00002E                       2572 ___str_3:
      00002E 1B                    2573 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2574 	.ascii "[%d;%dHo"
             6F
      000037 00                    2575 	.db 0x00
                                   2576 	.area CSEG    (CODE)
                                   2577 	.area CONST   (CODE)
      000038                       2578 ___str_4:
      000038 1B                    2579 	.db 0x1b
      000039 5B 32 4A              2580 	.ascii "[2J"
      00003C 1B                    2581 	.db 0x1b
      00003D 5B 3F 32 35 6C        2582 	.ascii "[?25l"
      000042 00                    2583 	.db 0x00
                                   2584 	.area CSEG    (CODE)
                                   2585 	.area CONST   (CODE)
      000043                       2586 ___str_5:
      000043 1B                    2587 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2588 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2589 	.db 0x00
                                   2590 	.area CSEG    (CODE)
                                   2591 	.area CONST   (CODE)
      000056                       2592 ___str_6:
      000056 25 20 38 64 25 20 38  2593 	.ascii "% 8d% 8d"
             64
      00005E 00                    2594 	.db 0x00
                                   2595 	.area CSEG    (CODE)
                                   2596 	.area CONST   (CODE)
      00005F                       2597 ___str_7:
      00005F 1B                    2598 	.db 0x1b
      000060 5B 32 4A              2599 	.ascii "[2J"
      000063 1B                    2600 	.db 0x1b
      000064 5B 3F 32 35 68        2601 	.ascii "[?25h"
      000069 00                    2602 	.db 0x00
                                   2603 	.area CSEG    (CODE)
                                   2604 	.area XINIT   (CODE)
      000000                       2605 __xinit__neigh:
      000000 FF FF                 2606 	.byte #0xff, #0xff	; -1
      000002 01 00                 2607 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2608 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2609 	.byte #0xff, #0xff	; -1
      000008 01 00                 2610 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2611 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2612 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2613 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2614 	.byte #0xff, #0xff	; -1
      000012 00 00                 2615 	.byte #0x00, #0x00	;  0
      000014 00 00                 2616 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2617 	.byte #0xff, #0xff	; -1
      000018 01 00                 2618 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2619 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2620 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2621 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2622 	.byte #0xff, #0xff	; -1
      000022 01 00                 2623 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2624 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2625 	.byte #0xff, #0xff	; -1
      000028 01 00                 2626 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2627 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2628 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2629 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2630 	.byte #0xff, #0xff	; -1
      000032 00 00                 2631 	.byte #0x00, #0x00	;  0
      000034 00 00                 2632 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2633 	.byte #0xff, #0xff	; -1
      000038 01 00                 2634 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2635 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2636 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2637 	.byte #0x01, #0x00	;  1
                                   2638 	.area CABS    (ABS,CODE)
