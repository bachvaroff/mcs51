                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9648
      0025B0                        323 _queue:
      0025B0                        324 	.ds 38592
      00BC70                        325 _hp:
      00BC70                        326 	.ds 2
      00BC72                        327 _tp:
      00BC72                        328 	.ds 2
                           00F006   329 _OEreg	=	0xf006
                                    330 ;--------------------------------------------------------
                                    331 ; absolute external ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area XABS    (ABS,XDATA)
                                    334 ;--------------------------------------------------------
                                    335 ; external initialized ram data
                                    336 ;--------------------------------------------------------
                                    337 	.area XISEG   (XDATA)
      000000                        338 _neigh:
      000000                        339 	.ds 64
                                    340 	.area HOME    (CODE)
                                    341 	.area GSINIT0 (CODE)
                                    342 	.area GSINIT1 (CODE)
                                    343 	.area GSINIT2 (CODE)
                                    344 	.area GSINIT3 (CODE)
                                    345 	.area GSINIT4 (CODE)
                                    346 	.area GSINIT5 (CODE)
                                    347 	.area GSINIT  (CODE)
                                    348 	.area GSFINAL (CODE)
                                    349 	.area CSEG    (CODE)
                                    350 ;--------------------------------------------------------
                                    351 ; interrupt vector 
                                    352 ;--------------------------------------------------------
                                    353 	.area HOME    (CODE)
      000000                        354 __interrupt_vect:
      000000 02r00r00         [24]  355 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  356 	ljmp	_int0
                                    357 ;--------------------------------------------------------
                                    358 ; global & static initialisations
                                    359 ;--------------------------------------------------------
                                    360 	.area HOME    (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.area GSFINAL (CODE)
                                    363 	.area GSINIT  (CODE)
                                    364 	.globl __sdcc_gsinit_startup
                                    365 	.globl __sdcc_program_startup
                                    366 	.globl __start__stack
                                    367 	.globl __mcs51_genXINIT
                                    368 	.globl __mcs51_genXRAMCLEAR
                                    369 	.globl __mcs51_genRAMCLEAR
                                    370 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  371 	ljmp	__sdcc_program_startup
                                    372 ;--------------------------------------------------------
                                    373 ; Home
                                    374 ;--------------------------------------------------------
                                    375 	.area HOME    (CODE)
                                    376 	.area HOME    (CODE)
      000006                        377 __sdcc_program_startup:
      000006 02r06r46         [24]  378 	ljmp	_main
                                    379 ;	return from main will return to caller
                                    380 ;--------------------------------------------------------
                                    381 ; code
                                    382 ;--------------------------------------------------------
                                    383 	.area CSEG    (CODE)
                                    384 ;------------------------------------------------------------
                                    385 ;Allocation info for local variables in function 'putchar'
                                    386 ;------------------------------------------------------------
                                    387 ;c                         Allocated to registers 
                                    388 ;------------------------------------------------------------
                                    389 ;	walk.c:9: int putchar(int c) __naked {
                                    390 ;	-----------------------------------------
                                    391 ;	 function putchar
                                    392 ;	-----------------------------------------
      000000                        393 _putchar:
                                    394 ;	naked function: no prologue.
                                    395 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  396 	mov	a, dpl
      000002 02 00 30         [24]  397 	ljmp	0x0030
                                    398 ;	walk.c:15: }
                                    399 ;	naked function: no epilogue.
                                    400 ;------------------------------------------------------------
                                    401 ;Allocation info for local variables in function 'getchar'
                                    402 ;------------------------------------------------------------
                                    403 ;	walk.c:17: int getchar(void) __naked {
                                    404 ;	-----------------------------------------
                                    405 ;	 function getchar
                                    406 ;	-----------------------------------------
      000005                        407 _getchar:
                                    408 ;	naked function: no prologue.
                                    409 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  410 	lcall	0x0032
      000008 F5 82            [12]  411 	mov	dpl, a
      00000A 75 83 00         [24]  412 	mov	dph, #0
      00000D 22               [24]  413 	ret
                                    414 ;	walk.c:24: }
                                    415 ;	naked function: no epilogue.
                                    416 ;------------------------------------------------------------
                                    417 ;Allocation info for local variables in function 'int0'
                                    418 ;------------------------------------------------------------
                                    419 ;	walk.c:28: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    420 ;	-----------------------------------------
                                    421 ;	 function int0
                                    422 ;	-----------------------------------------
      00000E                        423 _int0:
                           00000F   424 	ar7 = 0x0f
                           00000E   425 	ar6 = 0x0e
                           00000D   426 	ar5 = 0x0d
                           00000C   427 	ar4 = 0x0c
                           00000B   428 	ar3 = 0x0b
                           00000A   429 	ar2 = 0x0a
                           000009   430 	ar1 = 0x09
                           000008   431 	ar0 = 0x08
      00000E C0 D0            [24]  432 	push	psw
      000010 75 D0 08         [24]  433 	mov	psw,#0x08
                                    434 ;	walk.c:29: i0 = 0u;
      000013 78r00            [12]  435 	mov	r0,#_i0
      000015 76 00            [12]  436 	mov	@r0,#0x00
                                    437 ;	walk.c:30: }
      000017 D0 D0            [24]  438 	pop	psw
      000019 32               [24]  439 	reti
                                    440 ;	eliminated unneeded push/pop dpl
                                    441 ;	eliminated unneeded push/pop dph
                                    442 ;	eliminated unneeded push/pop b
                                    443 ;	eliminated unneeded push/pop acc
                                    444 ;------------------------------------------------------------
                                    445 ;Allocation info for local variables in function 'reset'
                                    446 ;------------------------------------------------------------
                                    447 ;	walk.c:32: static void reset(void) __naked {
                                    448 ;	-----------------------------------------
                                    449 ;	 function reset
                                    450 ;	-----------------------------------------
      00001A                        451 _reset:
                                    452 ;	naked function: no prologue.
                                    453 ;	walk.c:35: __endasm;
      00001A 43 87 02         [24]  454 	orl	pcon, #2
                                    455 ;	walk.c:36: }
                                    456 ;	naked function: no epilogue.
                                    457 ;------------------------------------------------------------
                                    458 ;Allocation info for local variables in function 'bang'
                                    459 ;------------------------------------------------------------
                                    460 ;	walk.c:38: static void bang(void) {
                                    461 ;	-----------------------------------------
                                    462 ;	 function bang
                                    463 ;	-----------------------------------------
      00001D                        464 _bang:
                           000007   465 	ar7 = 0x07
                           000006   466 	ar6 = 0x06
                           000005   467 	ar5 = 0x05
                           000004   468 	ar4 = 0x04
                           000003   469 	ar3 = 0x03
                           000002   470 	ar2 = 0x02
                           000001   471 	ar1 = 0x01
                           000000   472 	ar0 = 0x00
                                    473 ;	walk.c:39: (void)puts("Memory error");
      00001D 90r00r00         [24]  474 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  475 	mov	b,#0x80
      000023 12r00r00         [24]  476 	lcall	_puts
                                    477 ;	walk.c:40: reset();
                                    478 ;	walk.c:42: return;
                                    479 ;	walk.c:43: }
      000026 02r00r1A         [24]  480 	ljmp	_reset
                                    481 ;------------------------------------------------------------
                                    482 ;Allocation info for local variables in function 'flashOE'
                                    483 ;------------------------------------------------------------
                                    484 ;mask                      Allocated to registers r7 
                                    485 ;------------------------------------------------------------
                                    486 ;	walk.c:85: static void flashOE(uint8_t mask) {
                                    487 ;	-----------------------------------------
                                    488 ;	 function flashOE
                                    489 ;	-----------------------------------------
      000029                        490 _flashOE:
      000029 AF 82            [24]  491 	mov	r7,dpl
                                    492 ;	walk.c:86: P1_7 = 0;
                                    493 ;	assignBit
      00002B C2 97            [12]  494 	clr	_P1_7
                                    495 ;	walk.c:87: OEreg = OE76;
      00002D 78r01            [12]  496 	mov	r0,#_OE76
      00002F 90 F0 06         [24]  497 	mov	dptr,#_OEreg
      000032 E6               [12]  498 	mov	a,@r0
      000033 F0               [24]  499 	movx	@dptr,a
                                    500 ;	walk.c:88: P1_7 = 1;
                                    501 ;	assignBit
      000034 D2 97            [12]  502 	setb	_P1_7
                                    503 ;	walk.c:89: OE76 ^= mask;
      000036 78r01            [12]  504 	mov	r0,#_OE76
      000038 EF               [12]  505 	mov	a,r7
      000039 66               [12]  506 	xrl	a,@r0
      00003A F6               [12]  507 	mov	@r0,a
                                    508 ;	walk.c:91: return;
                                    509 ;	walk.c:92: }
      00003B 22               [24]  510 	ret
                                    511 ;------------------------------------------------------------
                                    512 ;Allocation info for local variables in function 'update'
                                    513 ;------------------------------------------------------------
                                    514 ;cur                       Allocated to stack - _bp -5
                                    515 ;j                         Allocated to stack - _bp -6
                                    516 ;t                         Allocated to stack - _bp +1
                                    517 ;sloc0                     Allocated to stack - _bp +4
                                    518 ;sloc1                     Allocated to stack - _bp +6
                                    519 ;sloc2                     Allocated to stack - _bp +8
                                    520 ;------------------------------------------------------------
                                    521 ;	walk.c:94: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    522 ;	-----------------------------------------
                                    523 ;	 function update
                                    524 ;	-----------------------------------------
      00003C                        525 _update:
      00003C C0*00            [24]  526 	push	_bp
      00003E 85 81*00         [24]  527 	mov	_bp,sp
      000041 C0 82            [24]  528 	push	dpl
      000043 C0 83            [24]  529 	push	dph
      000045 C0 F0            [24]  530 	push	b
      000047 E5 81            [12]  531 	mov	a,sp
      000049 24 07            [12]  532 	add	a,#0x07
      00004B F5 81            [12]  533 	mov	sp,a
                                    534 ;	walk.c:95: t->r = cur->r + neigh[j].r;
      00004D E5*00            [12]  535 	mov	a,_bp
      00004F 24 FB            [12]  536 	add	a,#0xfb
      000051 F8               [12]  537 	mov	r0,a
      000052 86 02            [24]  538 	mov	ar2,@r0
      000054 08               [12]  539 	inc	r0
      000055 86 03            [24]  540 	mov	ar3,@r0
      000057 08               [12]  541 	inc	r0
      000058 86 04            [24]  542 	mov	ar4,@r0
      00005A 8A 82            [24]  543 	mov	dpl,r2
      00005C 8B 83            [24]  544 	mov	dph,r3
      00005E 8C F0            [24]  545 	mov	b,r4
      000060 E5*00            [12]  546 	mov	a,_bp
      000062 24 04            [12]  547 	add	a,#0x04
      000064 F8               [12]  548 	mov	r0,a
      000065 12r00r00         [24]  549 	lcall	__gptrget
      000068 F6               [12]  550 	mov	@r0,a
      000069 A3               [24]  551 	inc	dptr
      00006A 12r00r00         [24]  552 	lcall	__gptrget
      00006D 08               [12]  553 	inc	r0
      00006E F6               [12]  554 	mov	@r0,a
      00006F E5*00            [12]  555 	mov	a,_bp
      000071 24 FA            [12]  556 	add	a,#0xfa
      000073 F8               [12]  557 	mov	r0,a
      000074 E5*00            [12]  558 	mov	a,_bp
      000076 24 06            [12]  559 	add	a,#0x06
      000078 F9               [12]  560 	mov	r1,a
      000079 E6               [12]  561 	mov	a,@r0
      00007A 75 F0 04         [24]  562 	mov	b,#0x04
      00007D A4               [48]  563 	mul	ab
      00007E F7               [12]  564 	mov	@r1,a
      00007F 09               [12]  565 	inc	r1
      000080 A7 F0            [24]  566 	mov	@r1,b
      000082 E5*00            [12]  567 	mov	a,_bp
      000084 24 06            [12]  568 	add	a,#0x06
      000086 F8               [12]  569 	mov	r0,a
      000087 E6               [12]  570 	mov	a,@r0
      000088 24r00            [12]  571 	add	a,#_neigh
      00008A F5 82            [12]  572 	mov	dpl,a
      00008C 08               [12]  573 	inc	r0
      00008D E6               [12]  574 	mov	a,@r0
      00008E 34s00            [12]  575 	addc	a,#(_neigh >> 8)
      000090 F5 83            [12]  576 	mov	dph,a
      000092 E0               [24]  577 	movx	a,@dptr
      000093 FF               [12]  578 	mov	r7,a
      000094 A3               [24]  579 	inc	dptr
      000095 E0               [24]  580 	movx	a,@dptr
      000096 FE               [12]  581 	mov	r6,a
      000097 E5*00            [12]  582 	mov	a,_bp
      000099 24 04            [12]  583 	add	a,#0x04
      00009B F8               [12]  584 	mov	r0,a
      00009C EF               [12]  585 	mov	a,r7
      00009D 26               [12]  586 	add	a,@r0
      00009E FF               [12]  587 	mov	r7,a
      00009F EE               [12]  588 	mov	a,r6
      0000A0 08               [12]  589 	inc	r0
      0000A1 36               [12]  590 	addc	a,@r0
      0000A2 FE               [12]  591 	mov	r6,a
      0000A3 A8*00            [24]  592 	mov	r0,_bp
      0000A5 08               [12]  593 	inc	r0
      0000A6 86 82            [24]  594 	mov	dpl,@r0
      0000A8 08               [12]  595 	inc	r0
      0000A9 86 83            [24]  596 	mov	dph,@r0
      0000AB 08               [12]  597 	inc	r0
      0000AC 86 F0            [24]  598 	mov	b,@r0
      0000AE EF               [12]  599 	mov	a,r7
      0000AF 12r00r00         [24]  600 	lcall	__gptrput
      0000B2 A3               [24]  601 	inc	dptr
      0000B3 EE               [12]  602 	mov	a,r6
      0000B4 12r00r00         [24]  603 	lcall	__gptrput
                                    604 ;	walk.c:96: t->c = cur->c + neigh[j].c;
      0000B7 A8*00            [24]  605 	mov	r0,_bp
      0000B9 08               [12]  606 	inc	r0
      0000BA E5*00            [12]  607 	mov	a,_bp
      0000BC 24 08            [12]  608 	add	a,#0x08
      0000BE F9               [12]  609 	mov	r1,a
      0000BF 74 02            [12]  610 	mov	a,#0x02
      0000C1 26               [12]  611 	add	a,@r0
      0000C2 F7               [12]  612 	mov	@r1,a
      0000C3 E4               [12]  613 	clr	a
      0000C4 08               [12]  614 	inc	r0
      0000C5 36               [12]  615 	addc	a,@r0
      0000C6 09               [12]  616 	inc	r1
      0000C7 F7               [12]  617 	mov	@r1,a
      0000C8 08               [12]  618 	inc	r0
      0000C9 09               [12]  619 	inc	r1
      0000CA E6               [12]  620 	mov	a,@r0
      0000CB F7               [12]  621 	mov	@r1,a
      0000CC 74 02            [12]  622 	mov	a,#0x02
      0000CE 2A               [12]  623 	add	a,r2
      0000CF FA               [12]  624 	mov	r2,a
      0000D0 E4               [12]  625 	clr	a
      0000D1 3B               [12]  626 	addc	a,r3
      0000D2 FB               [12]  627 	mov	r3,a
      0000D3 8A 82            [24]  628 	mov	dpl,r2
      0000D5 8B 83            [24]  629 	mov	dph,r3
      0000D7 8C F0            [24]  630 	mov	b,r4
      0000D9 12r00r00         [24]  631 	lcall	__gptrget
      0000DC FA               [12]  632 	mov	r2,a
      0000DD A3               [24]  633 	inc	dptr
      0000DE 12r00r00         [24]  634 	lcall	__gptrget
      0000E1 FB               [12]  635 	mov	r3,a
      0000E2 E5*00            [12]  636 	mov	a,_bp
      0000E4 24 06            [12]  637 	add	a,#0x06
      0000E6 F8               [12]  638 	mov	r0,a
      0000E7 E6               [12]  639 	mov	a,@r0
      0000E8 24r00            [12]  640 	add	a,#_neigh
      0000EA FC               [12]  641 	mov	r4,a
      0000EB 08               [12]  642 	inc	r0
      0000EC E6               [12]  643 	mov	a,@r0
      0000ED 34s00            [12]  644 	addc	a,#(_neigh >> 8)
      0000EF FD               [12]  645 	mov	r5,a
      0000F0 8C 82            [24]  646 	mov	dpl,r4
      0000F2 8D 83            [24]  647 	mov	dph,r5
      0000F4 A3               [24]  648 	inc	dptr
      0000F5 A3               [24]  649 	inc	dptr
      0000F6 E0               [24]  650 	movx	a,@dptr
      0000F7 FC               [12]  651 	mov	r4,a
      0000F8 A3               [24]  652 	inc	dptr
      0000F9 E0               [24]  653 	movx	a,@dptr
      0000FA FD               [12]  654 	mov	r5,a
      0000FB EC               [12]  655 	mov	a,r4
      0000FC 2A               [12]  656 	add	a,r2
      0000FD FA               [12]  657 	mov	r2,a
      0000FE ED               [12]  658 	mov	a,r5
      0000FF 3B               [12]  659 	addc	a,r3
      000100 FB               [12]  660 	mov	r3,a
      000101 E5*00            [12]  661 	mov	a,_bp
      000103 24 08            [12]  662 	add	a,#0x08
      000105 F8               [12]  663 	mov	r0,a
      000106 86 82            [24]  664 	mov	dpl,@r0
      000108 08               [12]  665 	inc	r0
      000109 86 83            [24]  666 	mov	dph,@r0
      00010B 08               [12]  667 	inc	r0
      00010C 86 F0            [24]  668 	mov	b,@r0
      00010E EA               [12]  669 	mov	a,r2
      00010F 12r00r00         [24]  670 	lcall	__gptrput
      000112 A3               [24]  671 	inc	dptr
      000113 EB               [12]  672 	mov	a,r3
      000114 12r00r00         [24]  673 	lcall	__gptrput
                                    674 ;	walk.c:98: if (t->r < 0) t->r += ROWS;
      000117 A8*00            [24]  675 	mov	r0,_bp
      000119 08               [12]  676 	inc	r0
      00011A 86 82            [24]  677 	mov	dpl,@r0
      00011C 08               [12]  678 	inc	r0
      00011D 86 83            [24]  679 	mov	dph,@r0
      00011F 08               [12]  680 	inc	r0
      000120 86 F0            [24]  681 	mov	b,@r0
      000122 12r00r00         [24]  682 	lcall	__gptrget
      000125 FD               [12]  683 	mov	r5,a
      000126 A3               [24]  684 	inc	dptr
      000127 12r00r00         [24]  685 	lcall	__gptrget
      00012A FC               [12]  686 	mov	r4,a
      00012B EE               [12]  687 	mov	a,r6
      00012C 30 E7 1D         [24]  688 	jnb	acc.7,00104$
      00012F 74 30            [12]  689 	mov	a,#0x30
      000131 2D               [12]  690 	add	a,r5
      000132 FF               [12]  691 	mov	r7,a
      000133 E4               [12]  692 	clr	a
      000134 3C               [12]  693 	addc	a,r4
      000135 FE               [12]  694 	mov	r6,a
      000136 A8*00            [24]  695 	mov	r0,_bp
      000138 08               [12]  696 	inc	r0
      000139 86 82            [24]  697 	mov	dpl,@r0
      00013B 08               [12]  698 	inc	r0
      00013C 86 83            [24]  699 	mov	dph,@r0
      00013E 08               [12]  700 	inc	r0
      00013F 86 F0            [24]  701 	mov	b,@r0
      000141 EF               [12]  702 	mov	a,r7
      000142 12r00r00         [24]  703 	lcall	__gptrput
      000145 A3               [24]  704 	inc	dptr
      000146 EE               [12]  705 	mov	a,r6
      000147 12r00r00         [24]  706 	lcall	__gptrput
      00014A 80 27            [24]  707 	sjmp	00105$
      00014C                        708 00104$:
                                    709 ;	walk.c:99: else if (t->r >= ROWS) t->r -= ROWS;
      00014C C3               [12]  710 	clr	c
      00014D ED               [12]  711 	mov	a,r5
      00014E 94 30            [12]  712 	subb	a,#0x30
      000150 EC               [12]  713 	mov	a,r4
      000151 64 80            [12]  714 	xrl	a,#0x80
      000153 94 80            [12]  715 	subb	a,#0x80
      000155 40 1C            [24]  716 	jc	00105$
      000157 ED               [12]  717 	mov	a,r5
      000158 24 D0            [12]  718 	add	a,#0xd0
      00015A FD               [12]  719 	mov	r5,a
      00015B EC               [12]  720 	mov	a,r4
      00015C 34 FF            [12]  721 	addc	a,#0xff
      00015E FC               [12]  722 	mov	r4,a
      00015F A8*00            [24]  723 	mov	r0,_bp
      000161 08               [12]  724 	inc	r0
      000162 86 82            [24]  725 	mov	dpl,@r0
      000164 08               [12]  726 	inc	r0
      000165 86 83            [24]  727 	mov	dph,@r0
      000167 08               [12]  728 	inc	r0
      000168 86 F0            [24]  729 	mov	b,@r0
      00016A ED               [12]  730 	mov	a,r5
      00016B 12r00r00         [24]  731 	lcall	__gptrput
      00016E A3               [24]  732 	inc	dptr
      00016F EC               [12]  733 	mov	a,r4
      000170 12r00r00         [24]  734 	lcall	__gptrput
      000173                        735 00105$:
                                    736 ;	walk.c:100: if (t->c < 0) t->c += COLS;
      000173 E5*00            [12]  737 	mov	a,_bp
      000175 24 08            [12]  738 	add	a,#0x08
      000177 F8               [12]  739 	mov	r0,a
      000178 86 82            [24]  740 	mov	dpl,@r0
      00017A 08               [12]  741 	inc	r0
      00017B 86 83            [24]  742 	mov	dph,@r0
      00017D 08               [12]  743 	inc	r0
      00017E 86 F0            [24]  744 	mov	b,@r0
      000180 12r00r00         [24]  745 	lcall	__gptrget
      000183 A3               [24]  746 	inc	dptr
      000184 12r00r00         [24]  747 	lcall	__gptrget
      000187 30 E7 35         [24]  748 	jnb	acc.7,00109$
      00018A E5*00            [12]  749 	mov	a,_bp
      00018C 24 08            [12]  750 	add	a,#0x08
      00018E F8               [12]  751 	mov	r0,a
      00018F 86 82            [24]  752 	mov	dpl,@r0
      000191 08               [12]  753 	inc	r0
      000192 86 83            [24]  754 	mov	dph,@r0
      000194 08               [12]  755 	inc	r0
      000195 86 F0            [24]  756 	mov	b,@r0
      000197 12r00r00         [24]  757 	lcall	__gptrget
      00019A FE               [12]  758 	mov	r6,a
      00019B A3               [24]  759 	inc	dptr
      00019C 12r00r00         [24]  760 	lcall	__gptrget
      00019F FF               [12]  761 	mov	r7,a
      0001A0 74 C9            [12]  762 	mov	a,#0xc9
      0001A2 2E               [12]  763 	add	a,r6
      0001A3 FE               [12]  764 	mov	r6,a
      0001A4 E4               [12]  765 	clr	a
      0001A5 3F               [12]  766 	addc	a,r7
      0001A6 FF               [12]  767 	mov	r7,a
      0001A7 E5*00            [12]  768 	mov	a,_bp
      0001A9 24 08            [12]  769 	add	a,#0x08
      0001AB F8               [12]  770 	mov	r0,a
      0001AC 86 82            [24]  771 	mov	dpl,@r0
      0001AE 08               [12]  772 	inc	r0
      0001AF 86 83            [24]  773 	mov	dph,@r0
      0001B1 08               [12]  774 	inc	r0
      0001B2 86 F0            [24]  775 	mov	b,@r0
      0001B4 EE               [12]  776 	mov	a,r6
      0001B5 12r00r00         [24]  777 	lcall	__gptrput
      0001B8 A3               [24]  778 	inc	dptr
      0001B9 EF               [12]  779 	mov	a,r7
      0001BA 12r00r00         [24]  780 	lcall	__gptrput
      0001BD 80 55            [24]  781 	sjmp	00110$
      0001BF                        782 00109$:
                                    783 ;	walk.c:101: else if (t->c >= COLS) t->c -= COLS;
      0001BF E5*00            [12]  784 	mov	a,_bp
      0001C1 24 08            [12]  785 	add	a,#0x08
      0001C3 F8               [12]  786 	mov	r0,a
      0001C4 86 82            [24]  787 	mov	dpl,@r0
      0001C6 08               [12]  788 	inc	r0
      0001C7 86 83            [24]  789 	mov	dph,@r0
      0001C9 08               [12]  790 	inc	r0
      0001CA 86 F0            [24]  791 	mov	b,@r0
      0001CC 12r00r00         [24]  792 	lcall	__gptrget
      0001CF FE               [12]  793 	mov	r6,a
      0001D0 A3               [24]  794 	inc	dptr
      0001D1 12r00r00         [24]  795 	lcall	__gptrget
      0001D4 FF               [12]  796 	mov	r7,a
      0001D5 C3               [12]  797 	clr	c
      0001D6 EE               [12]  798 	mov	a,r6
      0001D7 94 C9            [12]  799 	subb	a,#0xc9
      0001D9 EF               [12]  800 	mov	a,r7
      0001DA 64 80            [12]  801 	xrl	a,#0x80
      0001DC 94 80            [12]  802 	subb	a,#0x80
      0001DE 40 34            [24]  803 	jc	00110$
      0001E0 E5*00            [12]  804 	mov	a,_bp
      0001E2 24 08            [12]  805 	add	a,#0x08
      0001E4 F8               [12]  806 	mov	r0,a
      0001E5 86 82            [24]  807 	mov	dpl,@r0
      0001E7 08               [12]  808 	inc	r0
      0001E8 86 83            [24]  809 	mov	dph,@r0
      0001EA 08               [12]  810 	inc	r0
      0001EB 86 F0            [24]  811 	mov	b,@r0
      0001ED 12r00r00         [24]  812 	lcall	__gptrget
      0001F0 FE               [12]  813 	mov	r6,a
      0001F1 A3               [24]  814 	inc	dptr
      0001F2 12r00r00         [24]  815 	lcall	__gptrget
      0001F5 FF               [12]  816 	mov	r7,a
      0001F6 EE               [12]  817 	mov	a,r6
      0001F7 24 37            [12]  818 	add	a,#0x37
      0001F9 FE               [12]  819 	mov	r6,a
      0001FA EF               [12]  820 	mov	a,r7
      0001FB 34 FF            [12]  821 	addc	a,#0xff
      0001FD FF               [12]  822 	mov	r7,a
      0001FE E5*00            [12]  823 	mov	a,_bp
      000200 24 08            [12]  824 	add	a,#0x08
      000202 F8               [12]  825 	mov	r0,a
      000203 86 82            [24]  826 	mov	dpl,@r0
      000205 08               [12]  827 	inc	r0
      000206 86 83            [24]  828 	mov	dph,@r0
      000208 08               [12]  829 	inc	r0
      000209 86 F0            [24]  830 	mov	b,@r0
      00020B EE               [12]  831 	mov	a,r6
      00020C 12r00r00         [24]  832 	lcall	__gptrput
      00020F A3               [24]  833 	inc	dptr
      000210 EF               [12]  834 	mov	a,r7
      000211 12r00r00         [24]  835 	lcall	__gptrput
      000214                        836 00110$:
                                    837 ;	walk.c:103: if (g[t->r][t->c] == 0xaau) return 0u;
      000214 A8*00            [24]  838 	mov	r0,_bp
      000216 08               [12]  839 	inc	r0
      000217 86 82            [24]  840 	mov	dpl,@r0
      000219 08               [12]  841 	inc	r0
      00021A 86 83            [24]  842 	mov	dph,@r0
      00021C 08               [12]  843 	inc	r0
      00021D 86 F0            [24]  844 	mov	b,@r0
      00021F 12r00r00         [24]  845 	lcall	__gptrget
      000222 FE               [12]  846 	mov	r6,a
      000223 A3               [24]  847 	inc	dptr
      000224 12r00r00         [24]  848 	lcall	__gptrget
      000227 FF               [12]  849 	mov	r7,a
      000228 C0 06            [24]  850 	push	ar6
      00022A C0 07            [24]  851 	push	ar7
      00022C 90 00 C9         [24]  852 	mov	dptr,#0x00c9
      00022F 12r00r00         [24]  853 	lcall	__mulint
      000232 AE 82            [24]  854 	mov	r6,dpl
      000234 AF 83            [24]  855 	mov	r7,dph
      000236 15 81            [12]  856 	dec	sp
      000238 15 81            [12]  857 	dec	sp
      00023A EE               [12]  858 	mov	a,r6
      00023B 24r00            [12]  859 	add	a,#_g
      00023D FE               [12]  860 	mov	r6,a
      00023E EF               [12]  861 	mov	a,r7
      00023F 34s00            [12]  862 	addc	a,#(_g >> 8)
      000241 FF               [12]  863 	mov	r7,a
      000242 E5*00            [12]  864 	mov	a,_bp
      000244 24 08            [12]  865 	add	a,#0x08
      000246 F8               [12]  866 	mov	r0,a
      000247 86 82            [24]  867 	mov	dpl,@r0
      000249 08               [12]  868 	inc	r0
      00024A 86 83            [24]  869 	mov	dph,@r0
      00024C 08               [12]  870 	inc	r0
      00024D 86 F0            [24]  871 	mov	b,@r0
      00024F 12r00r00         [24]  872 	lcall	__gptrget
      000252 FC               [12]  873 	mov	r4,a
      000253 A3               [24]  874 	inc	dptr
      000254 12r00r00         [24]  875 	lcall	__gptrget
      000257 FD               [12]  876 	mov	r5,a
      000258 EC               [12]  877 	mov	a,r4
      000259 2E               [12]  878 	add	a,r6
      00025A F5 82            [12]  879 	mov	dpl,a
      00025C ED               [12]  880 	mov	a,r5
      00025D 3F               [12]  881 	addc	a,r7
      00025E F5 83            [12]  882 	mov	dph,a
      000260 E0               [24]  883 	movx	a,@dptr
      000261 FF               [12]  884 	mov	r7,a
      000262 BF AA 05         [24]  885 	cjne	r7,#0xaa,00114$
      000265 75 82 00         [24]  886 	mov	dpl,#0x00
      000268 80 59            [24]  887 	sjmp	00116$
      00026A                        888 00114$:
                                    889 ;	walk.c:104: else if (g[t->r][t->c] != 0x55u) bang();
      00026A A8*00            [24]  890 	mov	r0,_bp
      00026C 08               [12]  891 	inc	r0
      00026D 86 82            [24]  892 	mov	dpl,@r0
      00026F 08               [12]  893 	inc	r0
      000270 86 83            [24]  894 	mov	dph,@r0
      000272 08               [12]  895 	inc	r0
      000273 86 F0            [24]  896 	mov	b,@r0
      000275 12r00r00         [24]  897 	lcall	__gptrget
      000278 FE               [12]  898 	mov	r6,a
      000279 A3               [24]  899 	inc	dptr
      00027A 12r00r00         [24]  900 	lcall	__gptrget
      00027D FF               [12]  901 	mov	r7,a
      00027E C0 06            [24]  902 	push	ar6
      000280 C0 07            [24]  903 	push	ar7
      000282 90 00 C9         [24]  904 	mov	dptr,#0x00c9
      000285 12r00r00         [24]  905 	lcall	__mulint
      000288 AE 82            [24]  906 	mov	r6,dpl
      00028A AF 83            [24]  907 	mov	r7,dph
      00028C 15 81            [12]  908 	dec	sp
      00028E 15 81            [12]  909 	dec	sp
      000290 EE               [12]  910 	mov	a,r6
      000291 24r00            [12]  911 	add	a,#_g
      000293 FE               [12]  912 	mov	r6,a
      000294 EF               [12]  913 	mov	a,r7
      000295 34s00            [12]  914 	addc	a,#(_g >> 8)
      000297 FF               [12]  915 	mov	r7,a
      000298 E5*00            [12]  916 	mov	a,_bp
      00029A 24 08            [12]  917 	add	a,#0x08
      00029C F8               [12]  918 	mov	r0,a
      00029D 86 82            [24]  919 	mov	dpl,@r0
      00029F 08               [12]  920 	inc	r0
      0002A0 86 83            [24]  921 	mov	dph,@r0
      0002A2 08               [12]  922 	inc	r0
      0002A3 86 F0            [24]  923 	mov	b,@r0
      0002A5 12r00r00         [24]  924 	lcall	__gptrget
      0002A8 FC               [12]  925 	mov	r4,a
      0002A9 A3               [24]  926 	inc	dptr
      0002AA 12r00r00         [24]  927 	lcall	__gptrget
      0002AD FD               [12]  928 	mov	r5,a
      0002AE EC               [12]  929 	mov	a,r4
      0002AF 2E               [12]  930 	add	a,r6
      0002B0 F5 82            [12]  931 	mov	dpl,a
      0002B2 ED               [12]  932 	mov	a,r5
      0002B3 3F               [12]  933 	addc	a,r7
      0002B4 F5 83            [12]  934 	mov	dph,a
      0002B6 E0               [24]  935 	movx	a,@dptr
      0002B7 FF               [12]  936 	mov	r7,a
      0002B8 BF 55 02         [24]  937 	cjne	r7,#0x55,00148$
      0002BB 80 03            [24]  938 	sjmp	00115$
      0002BD                        939 00148$:
      0002BD 12r00r1D         [24]  940 	lcall	_bang
      0002C0                        941 00115$:
                                    942 ;	walk.c:106: return 1u;
      0002C0 75 82 01         [24]  943 	mov	dpl,#0x01
      0002C3                        944 00116$:
                                    945 ;	walk.c:107: }
      0002C3 85*00 81         [24]  946 	mov	sp,_bp
      0002C6 D0*00            [24]  947 	pop	_bp
      0002C8 22               [24]  948 	ret
                                    949 ;------------------------------------------------------------
                                    950 ;Allocation info for local variables in function 'walk'
                                    951 ;------------------------------------------------------------
                                    952 ;nstart                    Allocated to registers r5 r6 r7 
                                    953 ;cur                       Allocated to stack - _bp +7
                                    954 ;t                         Allocated to stack - _bp +11
                                    955 ;scramble                  Allocated to stack - _bp +15
                                    956 ;ti                        Allocated to registers r2 
                                    957 ;tj                        Allocated to registers r6 
                                    958 ;tx                        Allocated to stack - _bp +31
                                    959 ;j                         Allocated to stack - _bp +32
                                    960 ;sloc0                     Allocated to stack - _bp +1
                                    961 ;sloc1                     Allocated to stack - _bp +3
                                    962 ;sloc2                     Allocated to stack - _bp +35
                                    963 ;sloc3                     Allocated to stack - _bp +4
                                    964 ;------------------------------------------------------------
                                    965 ;	walk.c:109: static void walk(struct node *nstart) {
                                    966 ;	-----------------------------------------
                                    967 ;	 function walk
                                    968 ;	-----------------------------------------
      0002C9                        969 _walk:
      0002C9 C0*00            [24]  970 	push	_bp
      0002CB E5 81            [12]  971 	mov	a,sp
      0002CD F5*00            [12]  972 	mov	_bp,a
      0002CF 24 20            [12]  973 	add	a,#0x20
      0002D1 F5 81            [12]  974 	mov	sp,a
                                    975 ;	walk.c:114: if (!qadd(nstart)) bang();
      0002D3 AD 82            [24]  976 	mov	r5,dpl
      0002D5 AE 83            [24]  977 	mov	r6,dph
      0002D7 AF F0            [24]  978 	mov	r7,b
      0002D9 C0 07            [24]  979 	push	ar7
      0002DB C0 06            [24]  980 	push	ar6
      0002DD C0 05            [24]  981 	push	ar5
      0002DF 12r0Ar32         [24]  982 	lcall	_qadd
      0002E2 E5 82            [12]  983 	mov	a,dpl
      0002E4 D0 05            [24]  984 	pop	ar5
      0002E6 D0 06            [24]  985 	pop	ar6
      0002E8 D0 07            [24]  986 	pop	ar7
      0002EA 70 0F            [24]  987 	jnz	00102$
      0002EC C0 07            [24]  988 	push	ar7
      0002EE C0 06            [24]  989 	push	ar6
      0002F0 C0 05            [24]  990 	push	ar5
      0002F2 12r00r1D         [24]  991 	lcall	_bang
      0002F5 D0 05            [24]  992 	pop	ar5
      0002F7 D0 06            [24]  993 	pop	ar6
      0002F9 D0 07            [24]  994 	pop	ar7
      0002FB                        995 00102$:
                                    996 ;	walk.c:115: g[nstart->r][nstart->c] = 0xaau;
      0002FB 8D 82            [24]  997 	mov	dpl,r5
      0002FD 8E 83            [24]  998 	mov	dph,r6
      0002FF 8F F0            [24]  999 	mov	b,r7
      000301 12r00r00         [24] 1000 	lcall	__gptrget
      000304 FB               [12] 1001 	mov	r3,a
      000305 A3               [24] 1002 	inc	dptr
      000306 12r00r00         [24] 1003 	lcall	__gptrget
      000309 FC               [12] 1004 	mov	r4,a
      00030A C0 07            [24] 1005 	push	ar7
      00030C C0 06            [24] 1006 	push	ar6
      00030E C0 05            [24] 1007 	push	ar5
      000310 C0 03            [24] 1008 	push	ar3
      000312 C0 04            [24] 1009 	push	ar4
      000314 90 00 C9         [24] 1010 	mov	dptr,#0x00c9
      000317 12r00r00         [24] 1011 	lcall	__mulint
      00031A AB 82            [24] 1012 	mov	r3,dpl
      00031C AC 83            [24] 1013 	mov	r4,dph
      00031E 15 81            [12] 1014 	dec	sp
      000320 15 81            [12] 1015 	dec	sp
      000322 D0 05            [24] 1016 	pop	ar5
      000324 D0 06            [24] 1017 	pop	ar6
      000326 D0 07            [24] 1018 	pop	ar7
      000328 EB               [12] 1019 	mov	a,r3
      000329 24r00            [12] 1020 	add	a,#_g
      00032B FB               [12] 1021 	mov	r3,a
      00032C EC               [12] 1022 	mov	a,r4
      00032D 34s00            [12] 1023 	addc	a,#(_g >> 8)
      00032F FC               [12] 1024 	mov	r4,a
      000330 74 02            [12] 1025 	mov	a,#0x02
      000332 2D               [12] 1026 	add	a,r5
      000333 FD               [12] 1027 	mov	r5,a
      000334 E4               [12] 1028 	clr	a
      000335 3E               [12] 1029 	addc	a,r6
      000336 FE               [12] 1030 	mov	r6,a
      000337 8D 82            [24] 1031 	mov	dpl,r5
      000339 8E 83            [24] 1032 	mov	dph,r6
      00033B 8F F0            [24] 1033 	mov	b,r7
      00033D 12r00r00         [24] 1034 	lcall	__gptrget
      000340 FD               [12] 1035 	mov	r5,a
      000341 A3               [24] 1036 	inc	dptr
      000342 12r00r00         [24] 1037 	lcall	__gptrget
      000345 FE               [12] 1038 	mov	r6,a
      000346 ED               [12] 1039 	mov	a,r5
      000347 2B               [12] 1040 	add	a,r3
      000348 F5 82            [12] 1041 	mov	dpl,a
      00034A EE               [12] 1042 	mov	a,r6
      00034B 3C               [12] 1043 	addc	a,r4
      00034C F5 83            [12] 1044 	mov	dph,a
      00034E 74 AA            [12] 1045 	mov	a,#0xaa
      000350 F0               [24] 1046 	movx	@dptr,a
                                   1047 ;	walk.c:117: process:
      000351 E5*00            [12] 1048 	mov	a,_bp
      000353 24 0F            [12] 1049 	add	a,#0x0f
      000355 FF               [12] 1050 	mov	r7,a
      000356 E5*00            [12] 1051 	mov	a,_bp
      000358 24 0B            [12] 1052 	add	a,#0x0b
      00035A F9               [12] 1053 	mov	r1,a
      00035B E5*00            [12] 1054 	mov	a,_bp
      00035D 24 03            [12] 1055 	add	a,#0x03
      00035F F8               [12] 1056 	mov	r0,a
      000360 A6 01            [24] 1057 	mov	@r0,ar1
      000362 74 02            [12] 1058 	mov	a,#0x02
      000364 29               [12] 1059 	add	a,r1
      000365 F8               [12] 1060 	mov	r0,a
      000366 E5*00            [12] 1061 	mov	a,_bp
      000368 24 07            [12] 1062 	add	a,#0x07
      00036A FD               [12] 1063 	mov	r5,a
      00036B                       1064 00103$:
                                   1065 ;	walk.c:118: if (!qget(&cur)) goto term;
      00036B 8D 02            [24] 1066 	mov	ar2,r5
      00036D 7B 00            [12] 1067 	mov	r3,#0x00
      00036F 7C 40            [12] 1068 	mov	r4,#0x40
      000371 8A 82            [24] 1069 	mov	dpl,r2
      000373 8B 83            [24] 1070 	mov	dph,r3
      000375 8C F0            [24] 1071 	mov	b,r4
      000377 C0 07            [24] 1072 	push	ar7
      000379 C0 05            [24] 1073 	push	ar5
      00037B C0 01            [24] 1074 	push	ar1
      00037D C0 00            [24] 1075 	push	ar0
      00037F 12r0Br24         [24] 1076 	lcall	_qget
      000382 E5 82            [12] 1077 	mov	a,dpl
      000384 D0 00            [24] 1078 	pop	ar0
      000386 D0 01            [24] 1079 	pop	ar1
      000388 D0 05            [24] 1080 	pop	ar5
      00038A D0 07            [24] 1081 	pop	ar7
      00038C 70 03            [24] 1082 	jnz	00184$
      00038E 02r06r40         [24] 1083 	ljmp	00119$
      000391                       1084 00184$:
                                   1085 ;	walk.c:120: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      000391 74 02            [12] 1086 	mov	a,#0x02
      000393 2D               [12] 1087 	add	a,r5
      000394 FC               [12] 1088 	mov	r4,a
      000395 C0 00            [24] 1089 	push	ar0
      000397 A8*00            [24] 1090 	mov	r0,_bp
      000399 08               [12] 1091 	inc	r0
      00039A C0 01            [24] 1092 	push	ar1
      00039C A9 04            [24] 1093 	mov	r1,ar4
      00039E E7               [12] 1094 	mov	a,@r1
      00039F F6               [12] 1095 	mov	@r0,a
      0003A0 09               [12] 1096 	inc	r1
      0003A1 E7               [12] 1097 	mov	a,@r1
      0003A2 08               [12] 1098 	inc	r0
      0003A3 F6               [12] 1099 	mov	@r0,a
      0003A4 D0 01            [24] 1100 	pop	ar1
      0003A6 A8 05            [24] 1101 	mov	r0,ar5
      0003A8 86 03            [24] 1102 	mov	ar3,@r0
      0003AA 08               [12] 1103 	inc	r0
      0003AB 86 06            [24] 1104 	mov	ar6,@r0
      0003AD D0 00            [24] 1105 	pop	ar0
      0003AF C0 07            [24] 1106 	push	ar7
      0003B1 C0 05            [24] 1107 	push	ar5
      0003B3 C0 04            [24] 1108 	push	ar4
      0003B5 C0 01            [24] 1109 	push	ar1
      0003B7 C0 00            [24] 1110 	push	ar0
      0003B9 85 00 F0         [24] 1111 	mov	b,ar0
      0003BC A8*00            [24] 1112 	mov	r0,_bp
      0003BE 08               [12] 1113 	inc	r0
      0003BF E6               [12] 1114 	mov	a,@r0
      0003C0 C0 E0            [24] 1115 	push	acc
      0003C2 08               [12] 1116 	inc	r0
      0003C3 E6               [12] 1117 	mov	a,@r0
      0003C4 C0 E0            [24] 1118 	push	acc
      0003C6 C0 03            [24] 1119 	push	ar3
      0003C8 C0 06            [24] 1120 	push	ar6
      0003CA 90rBCr72         [24] 1121 	mov	dptr,#_tp
      0003CD E0               [24] 1122 	movx	a,@dptr
      0003CE C0 E0            [24] 1123 	push	acc
      0003D0 A3               [24] 1124 	inc	dptr
      0003D1 E0               [24] 1125 	movx	a,@dptr
      0003D2 C0 E0            [24] 1126 	push	acc
      0003D4 90rBCr70         [24] 1127 	mov	dptr,#_hp
      0003D7 E0               [24] 1128 	movx	a,@dptr
      0003D8 C0 E0            [24] 1129 	push	acc
      0003DA A3               [24] 1130 	inc	dptr
      0003DB E0               [24] 1131 	movx	a,@dptr
      0003DC C0 E0            [24] 1132 	push	acc
      0003DE 74r0D            [12] 1133 	mov	a,#___str_1
      0003E0 C0 E0            [24] 1134 	push	acc
      0003E2 74s00            [12] 1135 	mov	a,#(___str_1 >> 8)
      0003E4 C0 E0            [24] 1136 	push	acc
      0003E6 74 80            [12] 1137 	mov	a,#0x80
      0003E8 C0 E0            [24] 1138 	push	acc
      0003EA 12r00r00         [24] 1139 	lcall	_printf
      0003ED E5 81            [12] 1140 	mov	a,sp
      0003EF 24 F5            [12] 1141 	add	a,#0xf5
      0003F1 F5 81            [12] 1142 	mov	sp,a
      0003F3 D0 00            [24] 1143 	pop	ar0
      0003F5 D0 01            [24] 1144 	pop	ar1
      0003F7 D0 04            [24] 1145 	pop	ar4
      0003F9 D0 05            [24] 1146 	pop	ar5
      0003FB D0 07            [24] 1147 	pop	ar7
                                   1148 ;	walk.c:122: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      0003FD C0 00            [24] 1149 	push	ar0
      0003FF A8 04            [24] 1150 	mov	r0,ar4
      000401 86 04            [24] 1151 	mov	ar4,@r0
      000403 08               [12] 1152 	inc	r0
      000404 86 06            [24] 1153 	mov	ar6,@r0
      000406 D0 00            [24] 1154 	pop	ar0
      000408 0C               [12] 1155 	inc	r4
      000409 BC 00 01         [24] 1156 	cjne	r4,#0x00,00185$
      00040C 0E               [12] 1157 	inc	r6
      00040D                       1158 00185$:
      00040D C0 00            [24] 1159 	push	ar0
      00040F A8 05            [24] 1160 	mov	r0,ar5
      000411 86 02            [24] 1161 	mov	ar2,@r0
      000413 08               [12] 1162 	inc	r0
      000414 86 03            [24] 1163 	mov	ar3,@r0
      000416 D0 00            [24] 1164 	pop	ar0
      000418 74 04            [12] 1165 	mov	a,#0x04
      00041A 2A               [12] 1166 	add	a,r2
      00041B FA               [12] 1167 	mov	r2,a
      00041C E4               [12] 1168 	clr	a
      00041D 3B               [12] 1169 	addc	a,r3
      00041E FB               [12] 1170 	mov	r3,a
      00041F C0 07            [24] 1171 	push	ar7
      000421 C0 05            [24] 1172 	push	ar5
      000423 C0 01            [24] 1173 	push	ar1
      000425 C0 00            [24] 1174 	push	ar0
      000427 C0 04            [24] 1175 	push	ar4
      000429 C0 06            [24] 1176 	push	ar6
      00042B C0 02            [24] 1177 	push	ar2
      00042D C0 03            [24] 1178 	push	ar3
      00042F 74r24            [12] 1179 	mov	a,#___str_2
      000431 C0 E0            [24] 1180 	push	acc
      000433 74s00            [12] 1181 	mov	a,#(___str_2 >> 8)
      000435 C0 E0            [24] 1182 	push	acc
      000437 74 80            [12] 1183 	mov	a,#0x80
      000439 C0 E0            [24] 1184 	push	acc
      00043B 12r00r00         [24] 1185 	lcall	_printf
      00043E E5 81            [12] 1186 	mov	a,sp
      000440 24 F9            [12] 1187 	add	a,#0xf9
      000442 F5 81            [12] 1188 	mov	sp,a
                                   1189 ;	walk.c:123: flashOE(OE76_MASK6);
      000444 75 82 40         [24] 1190 	mov	dpl,#0x40
      000447 12r00r29         [24] 1191 	lcall	_flashOE
      00044A D0 00            [24] 1192 	pop	ar0
      00044C D0 01            [24] 1193 	pop	ar1
      00044E D0 05            [24] 1194 	pop	ar5
      000450 D0 07            [24] 1195 	pop	ar7
                                   1196 ;	walk.c:125: for (j = 0u; j < NMAX; j++)
      000452 7E 00            [12] 1197 	mov	r6,#0x00
                                   1198 ;	walk.c:149: return;
                                   1199 ;	walk.c:125: for (j = 0u; j < NMAX; j++)
      000454                       1200 00120$:
                                   1201 ;	walk.c:126: scramble[j] = j;
      000454 EE               [12] 1202 	mov	a,r6
      000455 2F               [12] 1203 	add	a,r7
      000456 C0 00            [24] 1204 	push	ar0
      000458 F8               [12] 1205 	mov	r0,a
      000459 A6 06            [24] 1206 	mov	@r0,ar6
      00045B D0 00            [24] 1207 	pop	ar0
                                   1208 ;	walk.c:125: for (j = 0u; j < NMAX; j++)
      00045D 0E               [12] 1209 	inc	r6
      00045E BE 10 00         [24] 1210 	cjne	r6,#0x10,00186$
      000461                       1211 00186$:
      000461 40 F1            [24] 1212 	jc	00120$
                                   1213 ;	walk.c:128: do ti = (uint8_t)(rand() % NMAX);
      000463 7C 00            [12] 1214 	mov	r4,#0x00
      000465                       1215 00107$:
      000465 C0 07            [24] 1216 	push	ar7
      000467 C0 05            [24] 1217 	push	ar5
      000469 C0 04            [24] 1218 	push	ar4
      00046B C0 01            [24] 1219 	push	ar1
      00046D C0 00            [24] 1220 	push	ar0
      00046F 12r00r00         [24] 1221 	lcall	_rand
      000472 AA 82            [24] 1222 	mov	r2,dpl
      000474 D0 00            [24] 1223 	pop	ar0
      000476 D0 01            [24] 1224 	pop	ar1
      000478 D0 04            [24] 1225 	pop	ar4
      00047A D0 05            [24] 1226 	pop	ar5
      00047C D0 07            [24] 1227 	pop	ar7
      00047E 53 02 0F         [24] 1228 	anl	ar2,#0x0f
      000481 7B 00            [12] 1229 	mov	r3,#0x00
                                   1230 ;	walk.c:129: while (ti == j);
      000483 EA               [12] 1231 	mov	a,r2
      000484 B5 04 02         [24] 1232 	cjne	a,ar4,00188$
      000487 80 DC            [24] 1233 	sjmp	00107$
      000489                       1234 00188$:
                                   1235 ;	walk.c:130: do tj = (uint8_t)(rand() % NMAX);
      000489                       1236 00110$:
      000489 C0 05            [24] 1237 	push	ar5
      00048B C0 07            [24] 1238 	push	ar7
      00048D C0 04            [24] 1239 	push	ar4
      00048F C0 02            [24] 1240 	push	ar2
      000491 C0 01            [24] 1241 	push	ar1
      000493 C0 00            [24] 1242 	push	ar0
      000495 12r00r00         [24] 1243 	lcall	_rand
      000498 AB 82            [24] 1244 	mov	r3,dpl
      00049A D0 00            [24] 1245 	pop	ar0
      00049C D0 01            [24] 1246 	pop	ar1
      00049E D0 02            [24] 1247 	pop	ar2
      0004A0 D0 04            [24] 1248 	pop	ar4
      0004A2 D0 07            [24] 1249 	pop	ar7
      0004A4 53 03 0F         [24] 1250 	anl	ar3,#0x0f
      0004A7 8B 06            [24] 1251 	mov	ar6,r3
                                   1252 ;	walk.c:131: while (ti == tj);
      0004A9 EA               [12] 1253 	mov	a,r2
      0004AA B5 06 04         [24] 1254 	cjne	a,ar6,00189$
      0004AD D0 05            [24] 1255 	pop	ar5
      0004AF 80 D8            [24] 1256 	sjmp	00110$
      0004B1                       1257 00189$:
                                   1258 ;	walk.c:132: tx = scramble[ti];
      0004B1 EA               [12] 1259 	mov	a,r2
      0004B2 2F               [12] 1260 	add	a,r7
      0004B3 FB               [12] 1261 	mov	r3,a
      0004B4 C0 00            [24] 1262 	push	ar0
      0004B6 E5*00            [12] 1263 	mov	a,_bp
      0004B8 24 1F            [12] 1264 	add	a,#0x1f
      0004BA F8               [12] 1265 	mov	r0,a
      0004BB C0 01            [24] 1266 	push	ar1
      0004BD A9 03            [24] 1267 	mov	r1,ar3
      0004BF E7               [12] 1268 	mov	a,@r1
      0004C0 F6               [12] 1269 	mov	@r0,a
                                   1270 ;	walk.c:133: scramble[ti] = scramble[tj];
      0004C1 EE               [12] 1271 	mov	a,r6
      0004C2 2F               [12] 1272 	add	a,r7
      0004C3 FD               [12] 1273 	mov	r5,a
      0004C4 A8 05            [24] 1274 	mov	r0,ar5
      0004C6 86 02            [24] 1275 	mov	ar2,@r0
      0004C8 A8 03            [24] 1276 	mov	r0,ar3
      0004CA A6 02            [24] 1277 	mov	@r0,ar2
                                   1278 ;	walk.c:134: scramble[tj] = tx;
      0004CC A8 05            [24] 1279 	mov	r0,ar5
      0004CE E5*00            [12] 1280 	mov	a,_bp
      0004D0 24 1F            [12] 1281 	add	a,#0x1f
      0004D2 F9               [12] 1282 	mov	r1,a
      0004D3 E7               [12] 1283 	mov	a,@r1
      0004D4 F6               [12] 1284 	mov	@r0,a
      0004D5 D0 00            [24] 1285 	pop	ar0
      0004D7 D0 01            [24] 1286 	pop	ar1
                                   1287 ;	walk.c:127: for (j = 0u; j < NMAX; j++) {
      0004D9 0C               [12] 1288 	inc	r4
      0004DA BC 10 00         [24] 1289 	cjne	r4,#0x10,00190$
      0004DD                       1290 00190$:
      0004DD D0 05            [24] 1291 	pop	ar5
      0004DF 40 84            [24] 1292 	jc	00107$
                                   1293 ;	walk.c:137: for (j = 0u; j < NMAX; j++)
      0004E1 C0 00            [24] 1294 	push	ar0
      0004E3 A8*00            [24] 1295 	mov	r0,_bp
      0004E5 08               [12] 1296 	inc	r0
      0004E6 A6 05            [24] 1297 	mov	@r0,ar5
      0004E8 E5*00            [12] 1298 	mov	a,_bp
      0004EA 24 20            [12] 1299 	add	a,#0x20
      0004EC F8               [12] 1300 	mov	r0,a
      0004ED 76 00            [12] 1301 	mov	@r0,#0x00
      0004EF D0 00            [24] 1302 	pop	ar0
      0004F1                       1303 00124$:
                                   1304 ;	walk.c:138: if (update(&t, &cur, scramble[j])) {
      0004F1 C0 05            [24] 1305 	push	ar5
      0004F3 C0 00            [24] 1306 	push	ar0
      0004F5 E5*00            [12] 1307 	mov	a,_bp
      0004F7 24 20            [12] 1308 	add	a,#0x20
      0004F9 F8               [12] 1309 	mov	r0,a
      0004FA E6               [12] 1310 	mov	a,@r0
      0004FB 2F               [12] 1311 	add	a,r7
      0004FC FA               [12] 1312 	mov	r2,a
      0004FD A8 02            [24] 1313 	mov	r0,ar2
      0004FF 86 03            [24] 1314 	mov	ar3,@r0
      000501 A8*00            [24] 1315 	mov	r0,_bp
      000503 08               [12] 1316 	inc	r0
      000504 C0 01            [24] 1317 	push	ar1
      000506 E5*00            [12] 1318 	mov	a,_bp
      000508 24 04            [12] 1319 	add	a,#0x04
      00050A F9               [12] 1320 	mov	r1,a
      00050B E6               [12] 1321 	mov	a,@r0
      00050C F7               [12] 1322 	mov	@r1,a
      00050D 09               [12] 1323 	inc	r1
      00050E 77 00            [12] 1324 	mov	@r1,#0x00
      000510 09               [12] 1325 	inc	r1
      000511 77 40            [12] 1326 	mov	@r1,#0x40
      000513 D0 01            [24] 1327 	pop	ar1
      000515 D0 00            [24] 1328 	pop	ar0
      000517 89 02            [24] 1329 	mov	ar2,r1
      000519 7C 00            [12] 1330 	mov	r4,#0x00
      00051B 7E 40            [12] 1331 	mov	r6,#0x40
      00051D C0 07            [24] 1332 	push	ar7
      00051F C0 05            [24] 1333 	push	ar5
      000521 C0 01            [24] 1334 	push	ar1
      000523 C0 00            [24] 1335 	push	ar0
      000525 C0 03            [24] 1336 	push	ar3
      000527 85 00 F0         [24] 1337 	mov	b,ar0
      00052A E5*00            [12] 1338 	mov	a,_bp
      00052C 24 04            [12] 1339 	add	a,#0x04
      00052E F8               [12] 1340 	mov	r0,a
      00052F E6               [12] 1341 	mov	a,@r0
      000530 C0 E0            [24] 1342 	push	acc
      000532 08               [12] 1343 	inc	r0
      000533 E6               [12] 1344 	mov	a,@r0
      000534 C0 E0            [24] 1345 	push	acc
      000536 08               [12] 1346 	inc	r0
      000537 E6               [12] 1347 	mov	a,@r0
      000538 C0 E0            [24] 1348 	push	acc
      00053A 8A 82            [24] 1349 	mov	dpl,r2
      00053C 8C 83            [24] 1350 	mov	dph,r4
      00053E 8E F0            [24] 1351 	mov	b,r6
      000540 12r00r3C         [24] 1352 	lcall	_update
      000543 AE 82            [24] 1353 	mov	r6,dpl
      000545 E5 81            [12] 1354 	mov	a,sp
      000547 24 FC            [12] 1355 	add	a,#0xfc
      000549 F5 81            [12] 1356 	mov	sp,a
      00054B D0 00            [24] 1357 	pop	ar0
      00054D D0 01            [24] 1358 	pop	ar1
      00054F D0 05            [24] 1359 	pop	ar5
      000551 D0 07            [24] 1360 	pop	ar7
      000553 D0 05            [24] 1361 	pop	ar5
      000555 EE               [12] 1362 	mov	a,r6
      000556 70 03            [24] 1363 	jnz	00192$
      000558 02r06r26         [24] 1364 	ljmp	00125$
      00055B                       1365 00192$:
                                   1366 ;	walk.c:139: if (!qadd(&t)) bang();
      00055B C0 00            [24] 1367 	push	ar0
      00055D E5*00            [12] 1368 	mov	a,_bp
      00055F 24 03            [12] 1369 	add	a,#0x03
      000561 F8               [12] 1370 	mov	r0,a
      000562 86 03            [24] 1371 	mov	ar3,@r0
      000564 7C 00            [12] 1372 	mov	r4,#0x00
      000566 7E 40            [12] 1373 	mov	r6,#0x40
      000568 D0 00            [24] 1374 	pop	ar0
      00056A 8B 82            [24] 1375 	mov	dpl,r3
      00056C 8C 83            [24] 1376 	mov	dph,r4
      00056E 8E F0            [24] 1377 	mov	b,r6
      000570 C0 07            [24] 1378 	push	ar7
      000572 C0 05            [24] 1379 	push	ar5
      000574 C0 01            [24] 1380 	push	ar1
      000576 C0 00            [24] 1381 	push	ar0
      000578 12r0Ar32         [24] 1382 	lcall	_qadd
      00057B E5 82            [12] 1383 	mov	a,dpl
      00057D D0 00            [24] 1384 	pop	ar0
      00057F D0 01            [24] 1385 	pop	ar1
      000581 D0 05            [24] 1386 	pop	ar5
      000583 D0 07            [24] 1387 	pop	ar7
      000585 70 13            [24] 1388 	jnz	00115$
      000587 C0 07            [24] 1389 	push	ar7
      000589 C0 05            [24] 1390 	push	ar5
      00058B C0 01            [24] 1391 	push	ar1
      00058D C0 00            [24] 1392 	push	ar0
      00058F 12r00r1D         [24] 1393 	lcall	_bang
      000592 D0 00            [24] 1394 	pop	ar0
      000594 D0 01            [24] 1395 	pop	ar1
      000596 D0 05            [24] 1396 	pop	ar5
      000598 D0 07            [24] 1397 	pop	ar7
      00059A                       1398 00115$:
                                   1399 ;	walk.c:140: g[t.r][t.c] = 0xaau;
      00059A 87 04            [24] 1400 	mov	ar4,@r1
      00059C 09               [12] 1401 	inc	r1
      00059D 87 06            [24] 1402 	mov	ar6,@r1
      00059F 19               [12] 1403 	dec	r1
      0005A0 C0 07            [24] 1404 	push	ar7
      0005A2 C0 05            [24] 1405 	push	ar5
      0005A4 C0 01            [24] 1406 	push	ar1
      0005A6 C0 00            [24] 1407 	push	ar0
      0005A8 C0 04            [24] 1408 	push	ar4
      0005AA C0 06            [24] 1409 	push	ar6
      0005AC 90 00 C9         [24] 1410 	mov	dptr,#0x00c9
      0005AF 12r00r00         [24] 1411 	lcall	__mulint
      0005B2 AC 82            [24] 1412 	mov	r4,dpl
      0005B4 AE 83            [24] 1413 	mov	r6,dph
      0005B6 15 81            [12] 1414 	dec	sp
      0005B8 15 81            [12] 1415 	dec	sp
      0005BA D0 00            [24] 1416 	pop	ar0
      0005BC D0 01            [24] 1417 	pop	ar1
      0005BE D0 05            [24] 1418 	pop	ar5
      0005C0 D0 07            [24] 1419 	pop	ar7
      0005C2 EC               [12] 1420 	mov	a,r4
      0005C3 24r00            [12] 1421 	add	a,#_g
      0005C5 FC               [12] 1422 	mov	r4,a
      0005C6 EE               [12] 1423 	mov	a,r6
      0005C7 34s00            [12] 1424 	addc	a,#(_g >> 8)
      0005C9 FE               [12] 1425 	mov	r6,a
      0005CA 86 02            [24] 1426 	mov	ar2,@r0
      0005CC 08               [12] 1427 	inc	r0
      0005CD 86 03            [24] 1428 	mov	ar3,@r0
      0005CF 18               [12] 1429 	dec	r0
      0005D0 EA               [12] 1430 	mov	a,r2
      0005D1 2C               [12] 1431 	add	a,r4
      0005D2 F5 82            [12] 1432 	mov	dpl,a
      0005D4 EB               [12] 1433 	mov	a,r3
      0005D5 3E               [12] 1434 	addc	a,r6
      0005D6 F5 83            [12] 1435 	mov	dph,a
      0005D8 74 AA            [12] 1436 	mov	a,#0xaa
      0005DA F0               [24] 1437 	movx	@dptr,a
                                   1438 ;	walk.c:142: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      0005DB 86 04            [24] 1439 	mov	ar4,@r0
      0005DD 08               [12] 1440 	inc	r0
      0005DE 86 06            [24] 1441 	mov	ar6,@r0
      0005E0 18               [12] 1442 	dec	r0
      0005E1 0C               [12] 1443 	inc	r4
      0005E2 BC 00 01         [24] 1444 	cjne	r4,#0x00,00194$
      0005E5 0E               [12] 1445 	inc	r6
      0005E6                       1446 00194$:
      0005E6 87 02            [24] 1447 	mov	ar2,@r1
      0005E8 09               [12] 1448 	inc	r1
      0005E9 87 03            [24] 1449 	mov	ar3,@r1
      0005EB 19               [12] 1450 	dec	r1
      0005EC 74 04            [12] 1451 	mov	a,#0x04
      0005EE 2A               [12] 1452 	add	a,r2
      0005EF FA               [12] 1453 	mov	r2,a
      0005F0 E4               [12] 1454 	clr	a
      0005F1 3B               [12] 1455 	addc	a,r3
      0005F2 FB               [12] 1456 	mov	r3,a
      0005F3 C0 07            [24] 1457 	push	ar7
      0005F5 C0 05            [24] 1458 	push	ar5
      0005F7 C0 01            [24] 1459 	push	ar1
      0005F9 C0 00            [24] 1460 	push	ar0
      0005FB C0 04            [24] 1461 	push	ar4
      0005FD C0 06            [24] 1462 	push	ar6
      0005FF C0 02            [24] 1463 	push	ar2
      000601 C0 03            [24] 1464 	push	ar3
      000603 74r2E            [12] 1465 	mov	a,#___str_3
      000605 C0 E0            [24] 1466 	push	acc
      000607 74s00            [12] 1467 	mov	a,#(___str_3 >> 8)
      000609 C0 E0            [24] 1468 	push	acc
      00060B 74 80            [12] 1469 	mov	a,#0x80
      00060D C0 E0            [24] 1470 	push	acc
      00060F 12r00r00         [24] 1471 	lcall	_printf
      000612 E5 81            [12] 1472 	mov	a,sp
      000614 24 F9            [12] 1473 	add	a,#0xf9
      000616 F5 81            [12] 1474 	mov	sp,a
                                   1475 ;	walk.c:143: flashOE(OE76_MASK7);
      000618 75 82 80         [24] 1476 	mov	dpl,#0x80
      00061B 12r00r29         [24] 1477 	lcall	_flashOE
      00061E D0 00            [24] 1478 	pop	ar0
      000620 D0 01            [24] 1479 	pop	ar1
      000622 D0 05            [24] 1480 	pop	ar5
      000624 D0 07            [24] 1481 	pop	ar7
      000626                       1482 00125$:
                                   1483 ;	walk.c:137: for (j = 0u; j < NMAX; j++)
      000626 C0 00            [24] 1484 	push	ar0
      000628 E5*00            [12] 1485 	mov	a,_bp
      00062A 24 20            [12] 1486 	add	a,#0x20
      00062C F8               [12] 1487 	mov	r0,a
      00062D 06               [12] 1488 	inc	@r0
      00062E E5*00            [12] 1489 	mov	a,_bp
      000630 24 20            [12] 1490 	add	a,#0x20
      000632 F8               [12] 1491 	mov	r0,a
      000633 B6 10 00         [24] 1492 	cjne	@r0,#0x10,00195$
      000636                       1493 00195$:
      000636 D0 00            [24] 1494 	pop	ar0
      000638 50 03            [24] 1495 	jnc	00196$
      00063A 02r04rF1         [24] 1496 	ljmp	00124$
      00063D                       1497 00196$:
                                   1498 ;	walk.c:146: goto process;
      00063D 02r03r6B         [24] 1499 	ljmp	00103$
                                   1500 ;	walk.c:148: term:
      000640                       1501 00119$:
                                   1502 ;	walk.c:149: return;
                                   1503 ;	walk.c:150: }
      000640 85*00 81         [24] 1504 	mov	sp,_bp
      000643 D0*00            [24] 1505 	pop	_bp
      000645 22               [24] 1506 	ret
                                   1507 ;------------------------------------------------------------
                                   1508 ;Allocation info for local variables in function 'main'
                                   1509 ;------------------------------------------------------------
                                   1510 ;R                         Allocated to stack - _bp +9
                                   1511 ;initial                   Allocated to stack - _bp +11
                                   1512 ;N                         Allocated to stack - _bp +5
                                   1513 ;i                         Allocated to stack - _bp +7
                                   1514 ;j                         Allocated to registers r2 r6 
                                   1515 ;sloc0                     Allocated to stack - _bp +1
                                   1516 ;sloc1                     Allocated to stack - _bp +3
                                   1517 ;sloc2                     Allocated to stack - _bp +17
                                   1518 ;------------------------------------------------------------
                                   1519 ;	walk.c:152: int main(void) {
                                   1520 ;	-----------------------------------------
                                   1521 ;	 function main
                                   1522 ;	-----------------------------------------
      000646                       1523 _main:
      000646 C0*00            [24] 1524 	push	_bp
      000648 E5 81            [12] 1525 	mov	a,sp
      00064A F5*00            [12] 1526 	mov	_bp,a
      00064C 24 0E            [12] 1527 	add	a,#0x0e
      00064E F5 81            [12] 1528 	mov	sp,a
                                   1529 ;	walk.c:158: i0 = 1u;
      000650 78r00            [12] 1530 	mov	r0,#_i0
      000652 76 01            [12] 1531 	mov	@r0,#0x01
                                   1532 ;	walk.c:160: P1_7 = 1;
                                   1533 ;	assignBit
      000654 D2 97            [12] 1534 	setb	_P1_7
                                   1535 ;	walk.c:161: IT0 = 1;
                                   1536 ;	assignBit
      000656 D2 88            [12] 1537 	setb	_IT0
                                   1538 ;	walk.c:162: EX0 = 1;
                                   1539 ;	assignBit
      000658 D2 A8            [12] 1540 	setb	_EX0
                                   1541 ;	walk.c:163: EA = 1;
                                   1542 ;	assignBit
      00065A D2 AF            [12] 1543 	setb	_EA
                                   1544 ;	walk.c:165: srand(*R);
      00065C 90 FF FE         [24] 1545 	mov	dptr,#0xfffe
      00065F E0               [24] 1546 	movx	a,@dptr
      000660 FE               [12] 1547 	mov	r6,a
      000661 A3               [24] 1548 	inc	dptr
      000662 E0               [24] 1549 	movx	a,@dptr
      000663 FF               [12] 1550 	mov	r7,a
      000664 8E 82            [24] 1551 	mov	dpl,r6
      000666 8F 83            [24] 1552 	mov	dph,r7
      000668 12r00r00         [24] 1553 	lcall	_srand
                                   1554 ;	walk.c:166: qinit();
      00066B 12r0Ar24         [24] 1555 	lcall	_qinit
                                   1556 ;	walk.c:168: puts("\033[2J\033[?25l");
      00066E 90r00r38         [24] 1557 	mov	dptr,#___str_4
      000671 75 F0 80         [24] 1558 	mov	b,#0x80
      000674 12r00r00         [24] 1559 	lcall	_puts
                                   1560 ;	walk.c:170: while (i0) {
      000677 E5*00            [12] 1561 	mov	a,_bp
      000679 24 0B            [12] 1562 	add	a,#0x0b
      00067B F9               [12] 1563 	mov	r1,a
      00067C FF               [12] 1564 	mov	r7,a
      00067D E5*00            [12] 1565 	mov	a,_bp
      00067F 24 05            [12] 1566 	add	a,#0x05
      000681 F8               [12] 1567 	mov	r0,a
      000682 E4               [12] 1568 	clr	a
      000683 F6               [12] 1569 	mov	@r0,a
      000684 08               [12] 1570 	inc	r0
      000685 F6               [12] 1571 	mov	@r0,a
      000686                       1572 00108$:
      000686 78r00            [12] 1573 	mov	r0,#_i0
      000688 E6               [12] 1574 	mov	a,@r0
      000689 70 03            [24] 1575 	jnz	00181$
      00068B 02r0Ar0D         [24] 1576 	ljmp	00110$
      00068E                       1577 00181$:
                                   1578 ;	walk.c:171: for (i = 0; i < ROWS; i++)
      00068E 7B 00            [12] 1579 	mov	r3,#0x00
      000690 7C 00            [12] 1580 	mov	r4,#0x00
      000692 A8*00            [24] 1581 	mov	r0,_bp
      000694 08               [12] 1582 	inc	r0
      000695 E4               [12] 1583 	clr	a
      000696 F6               [12] 1584 	mov	@r0,a
      000697 08               [12] 1585 	inc	r0
      000698 F6               [12] 1586 	mov	@r0,a
                                   1587 ;	walk.c:172: for (j = 0; j < COLS; j++)
      000699                       1588 00124$:
      000699 A8*00            [24] 1589 	mov	r0,_bp
      00069B 08               [12] 1590 	inc	r0
      00069C C0 01            [24] 1591 	push	ar1
      00069E E5*00            [12] 1592 	mov	a,_bp
      0006A0 24 03            [12] 1593 	add	a,#0x03
      0006A2 F9               [12] 1594 	mov	r1,a
      0006A3 E6               [12] 1595 	mov	a,@r0
      0006A4 24r00            [12] 1596 	add	a,#_g
      0006A6 F7               [12] 1597 	mov	@r1,a
      0006A7 08               [12] 1598 	inc	r0
      0006A8 E6               [12] 1599 	mov	a,@r0
      0006A9 34s00            [12] 1600 	addc	a,#(_g >> 8)
      0006AB 09               [12] 1601 	inc	r1
      0006AC F7               [12] 1602 	mov	@r1,a
      0006AD D0 01            [24] 1603 	pop	ar1
      0006AF 7A 00            [12] 1604 	mov	r2,#0x00
      0006B1 7E 00            [12] 1605 	mov	r6,#0x00
      0006B3                       1606 00111$:
                                   1607 ;	walk.c:173: g[i][j] = 0x55u;
      0006B3 E5*00            [12] 1608 	mov	a,_bp
      0006B5 24 03            [12] 1609 	add	a,#0x03
      0006B7 F8               [12] 1610 	mov	r0,a
      0006B8 EA               [12] 1611 	mov	a,r2
      0006B9 26               [12] 1612 	add	a,@r0
      0006BA F5 82            [12] 1613 	mov	dpl,a
      0006BC EE               [12] 1614 	mov	a,r6
      0006BD 08               [12] 1615 	inc	r0
      0006BE 36               [12] 1616 	addc	a,@r0
      0006BF F5 83            [12] 1617 	mov	dph,a
      0006C1 74 55            [12] 1618 	mov	a,#0x55
      0006C3 F0               [24] 1619 	movx	@dptr,a
                                   1620 ;	walk.c:172: for (j = 0; j < COLS; j++)
      0006C4 0A               [12] 1621 	inc	r2
      0006C5 BA 00 01         [24] 1622 	cjne	r2,#0x00,00182$
      0006C8 0E               [12] 1623 	inc	r6
      0006C9                       1624 00182$:
      0006C9 C3               [12] 1625 	clr	c
      0006CA EA               [12] 1626 	mov	a,r2
      0006CB 94 C9            [12] 1627 	subb	a,#0xc9
      0006CD EE               [12] 1628 	mov	a,r6
      0006CE 64 80            [12] 1629 	xrl	a,#0x80
      0006D0 94 80            [12] 1630 	subb	a,#0x80
      0006D2 40 DF            [24] 1631 	jc	00111$
                                   1632 ;	walk.c:171: for (i = 0; i < ROWS; i++)
      0006D4 A8*00            [24] 1633 	mov	r0,_bp
      0006D6 08               [12] 1634 	inc	r0
      0006D7 74 C9            [12] 1635 	mov	a,#0xc9
      0006D9 26               [12] 1636 	add	a,@r0
      0006DA F6               [12] 1637 	mov	@r0,a
      0006DB E4               [12] 1638 	clr	a
      0006DC 08               [12] 1639 	inc	r0
      0006DD 36               [12] 1640 	addc	a,@r0
      0006DE F6               [12] 1641 	mov	@r0,a
      0006DF 0B               [12] 1642 	inc	r3
      0006E0 BB 00 01         [24] 1643 	cjne	r3,#0x00,00184$
      0006E3 0C               [12] 1644 	inc	r4
      0006E4                       1645 00184$:
      0006E4 C3               [12] 1646 	clr	c
      0006E5 EB               [12] 1647 	mov	a,r3
      0006E6 94 30            [12] 1648 	subb	a,#0x30
      0006E8 EC               [12] 1649 	mov	a,r4
      0006E9 64 80            [12] 1650 	xrl	a,#0x80
      0006EB 94 80            [12] 1651 	subb	a,#0x80
      0006ED 40 AA            [24] 1652 	jc	00124$
                                   1653 ;	walk.c:175: initial.r = rand() % ROWS;
      0006EF E5*00            [12] 1654 	mov	a,_bp
      0006F1 24 0B            [12] 1655 	add	a,#0x0b
      0006F3 F8               [12] 1656 	mov	r0,a
      0006F4 C0 07            [24] 1657 	push	ar7
      0006F6 C0 01            [24] 1658 	push	ar1
      0006F8 C0 00            [24] 1659 	push	ar0
      0006FA 12r00r00         [24] 1660 	lcall	_rand
      0006FD AD 82            [24] 1661 	mov	r5,dpl
      0006FF AE 83            [24] 1662 	mov	r6,dph
      000701 74 30            [12] 1663 	mov	a,#0x30
      000703 C0 E0            [24] 1664 	push	acc
      000705 E4               [12] 1665 	clr	a
      000706 C0 E0            [24] 1666 	push	acc
      000708 8D 82            [24] 1667 	mov	dpl,r5
      00070A 8E 83            [24] 1668 	mov	dph,r6
      00070C 12r00r00         [24] 1669 	lcall	__modsint
      00070F AD 82            [24] 1670 	mov	r5,dpl
      000711 AE 83            [24] 1671 	mov	r6,dph
      000713 15 81            [12] 1672 	dec	sp
      000715 15 81            [12] 1673 	dec	sp
      000717 D0 00            [24] 1674 	pop	ar0
      000719 D0 01            [24] 1675 	pop	ar1
      00071B A6 05            [24] 1676 	mov	@r0,ar5
      00071D 08               [12] 1677 	inc	r0
      00071E A6 06            [24] 1678 	mov	@r0,ar6
      000720 18               [12] 1679 	dec	r0
                                   1680 ;	walk.c:176: initial.c = rand() % COLS;
      000721 74 02            [12] 1681 	mov	a,#0x02
      000723 29               [12] 1682 	add	a,r1
      000724 F8               [12] 1683 	mov	r0,a
      000725 C0 01            [24] 1684 	push	ar1
      000727 C0 00            [24] 1685 	push	ar0
      000729 12r00r00         [24] 1686 	lcall	_rand
      00072C AD 82            [24] 1687 	mov	r5,dpl
      00072E AE 83            [24] 1688 	mov	r6,dph
      000730 74 C9            [12] 1689 	mov	a,#0xc9
      000732 C0 E0            [24] 1690 	push	acc
      000734 E4               [12] 1691 	clr	a
      000735 C0 E0            [24] 1692 	push	acc
      000737 8D 82            [24] 1693 	mov	dpl,r5
      000739 8E 83            [24] 1694 	mov	dph,r6
      00073B 12r00r00         [24] 1695 	lcall	__modsint
      00073E AD 82            [24] 1696 	mov	r5,dpl
      000740 AE 83            [24] 1697 	mov	r6,dph
      000742 15 81            [12] 1698 	dec	sp
      000744 15 81            [12] 1699 	dec	sp
      000746 D0 00            [24] 1700 	pop	ar0
      000748 A6 05            [24] 1701 	mov	@r0,ar5
      00074A 08               [12] 1702 	inc	r0
      00074B A6 06            [24] 1703 	mov	@r0,ar6
      00074D 18               [12] 1704 	dec	r0
                                   1705 ;	walk.c:178: puts("\033[2J\033[?25l");
      00074E 90r00r38         [24] 1706 	mov	dptr,#___str_4
      000751 75 F0 80         [24] 1707 	mov	b,#0x80
      000754 C0 00            [24] 1708 	push	ar0
      000756 12r00r00         [24] 1709 	lcall	_puts
      000759 D0 00            [24] 1710 	pop	ar0
      00075B D0 01            [24] 1711 	pop	ar1
                                   1712 ;	walk.c:179: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00075D 86 05            [24] 1713 	mov	ar5,@r0
      00075F 08               [12] 1714 	inc	r0
      000760 86 06            [24] 1715 	mov	ar6,@r0
      000762 18               [12] 1716 	dec	r0
      000763 87 03            [24] 1717 	mov	ar3,@r1
      000765 09               [12] 1718 	inc	r1
      000766 87 04            [24] 1719 	mov	ar4,@r1
      000768 19               [12] 1720 	dec	r1
      000769 C0 01            [24] 1721 	push	ar1
      00076B C0 05            [24] 1722 	push	ar5
      00076D C0 06            [24] 1723 	push	ar6
      00076F C0 03            [24] 1724 	push	ar3
      000771 C0 04            [24] 1725 	push	ar4
      000773 E5*00            [12] 1726 	mov	a,_bp
      000775 24 05            [12] 1727 	add	a,#0x05
      000777 F8               [12] 1728 	mov	r0,a
      000778 E6               [12] 1729 	mov	a,@r0
      000779 C0 E0            [24] 1730 	push	acc
      00077B 08               [12] 1731 	inc	r0
      00077C E6               [12] 1732 	mov	a,@r0
      00077D C0 E0            [24] 1733 	push	acc
      00077F 74r43            [12] 1734 	mov	a,#___str_5
      000781 C0 E0            [24] 1735 	push	acc
      000783 74s00            [12] 1736 	mov	a,#(___str_5 >> 8)
      000785 C0 E0            [24] 1737 	push	acc
      000787 74 80            [12] 1738 	mov	a,#0x80
      000789 C0 E0            [24] 1739 	push	acc
      00078B 12r00r00         [24] 1740 	lcall	_printf
      00078E E5 81            [12] 1741 	mov	a,sp
      000790 24 F7            [12] 1742 	add	a,#0xf7
      000792 F5 81            [12] 1743 	mov	sp,a
      000794 D0 01            [24] 1744 	pop	ar1
      000796 D0 07            [24] 1745 	pop	ar7
                                   1746 ;	walk.c:181: for (i = 0; i < REG; i++) {
      000798 E5*00            [12] 1747 	mov	a,_bp
      00079A 24 07            [12] 1748 	add	a,#0x07
      00079C F8               [12] 1749 	mov	r0,a
      00079D E4               [12] 1750 	clr	a
      00079E F6               [12] 1751 	mov	@r0,a
      00079F 08               [12] 1752 	inc	r0
      0007A0 F6               [12] 1753 	mov	@r0,a
      0007A1                       1754 00115$:
                                   1755 ;	walk.c:182: neigh[i].r = neigh[REG + i].r * (1 + rand() % 32);
      0007A1 C0 07            [24] 1756 	push	ar7
      0007A3 E5*00            [12] 1757 	mov	a,_bp
      0007A5 24 07            [12] 1758 	add	a,#0x07
      0007A7 F8               [12] 1759 	mov	r0,a
      0007A8 E6               [12] 1760 	mov	a,@r0
      0007A9 25 E0            [12] 1761 	add	a,acc
      0007AB FB               [12] 1762 	mov	r3,a
      0007AC 08               [12] 1763 	inc	r0
      0007AD E6               [12] 1764 	mov	a,@r0
      0007AE 33               [12] 1765 	rlc	a
      0007AF FC               [12] 1766 	mov	r4,a
      0007B0 EB               [12] 1767 	mov	a,r3
      0007B1 2B               [12] 1768 	add	a,r3
      0007B2 FB               [12] 1769 	mov	r3,a
      0007B3 EC               [12] 1770 	mov	a,r4
      0007B4 33               [12] 1771 	rlc	a
      0007B5 FC               [12] 1772 	mov	r4,a
      0007B6 E5*00            [12] 1773 	mov	a,_bp
      0007B8 24 03            [12] 1774 	add	a,#0x03
      0007BA F8               [12] 1775 	mov	r0,a
      0007BB EB               [12] 1776 	mov	a,r3
      0007BC 24r00            [12] 1777 	add	a,#_neigh
      0007BE F6               [12] 1778 	mov	@r0,a
      0007BF EC               [12] 1779 	mov	a,r4
      0007C0 34s00            [12] 1780 	addc	a,#(_neigh >> 8)
      0007C2 08               [12] 1781 	inc	r0
      0007C3 F6               [12] 1782 	mov	@r0,a
      0007C4 E5*00            [12] 1783 	mov	a,_bp
      0007C6 24 07            [12] 1784 	add	a,#0x07
      0007C8 F8               [12] 1785 	mov	r0,a
      0007C9 86 06            [24] 1786 	mov	ar6,@r0
      0007CB 74 08            [12] 1787 	mov	a,#0x08
      0007CD 2E               [12] 1788 	add	a,r6
      0007CE FE               [12] 1789 	mov	r6,a
      0007CF C2 D5            [12] 1790 	clr	F0
      0007D1 75 F0 04         [24] 1791 	mov	b,#0x04
      0007D4 EE               [12] 1792 	mov	a,r6
      0007D5 30 E7 04         [24] 1793 	jnb	acc.7,00186$
      0007D8 B2 D5            [12] 1794 	cpl	F0
      0007DA F4               [12] 1795 	cpl	a
      0007DB 04               [12] 1796 	inc	a
      0007DC                       1797 00186$:
      0007DC A4               [48] 1798 	mul	ab
      0007DD 30 D5 0A         [24] 1799 	jnb	F0,00187$
      0007E0 F4               [12] 1800 	cpl	a
      0007E1 24 01            [12] 1801 	add	a,#0x01
      0007E3 C5 F0            [12] 1802 	xch	a,b
      0007E5 F4               [12] 1803 	cpl	a
      0007E6 34 00            [12] 1804 	addc	a,#0x00
      0007E8 C5 F0            [12] 1805 	xch	a,b
      0007EA                       1806 00187$:
      0007EA FE               [12] 1807 	mov	r6,a
      0007EB AD F0            [24] 1808 	mov	r5,b
      0007ED 24r00            [12] 1809 	add	a,#_neigh
      0007EF F5 82            [12] 1810 	mov	dpl,a
      0007F1 ED               [12] 1811 	mov	a,r5
      0007F2 34s00            [12] 1812 	addc	a,#(_neigh >> 8)
      0007F4 F5 83            [12] 1813 	mov	dph,a
      0007F6 A8*00            [24] 1814 	mov	r0,_bp
      0007F8 08               [12] 1815 	inc	r0
      0007F9 E0               [24] 1816 	movx	a,@dptr
      0007FA F6               [12] 1817 	mov	@r0,a
      0007FB A3               [24] 1818 	inc	dptr
      0007FC E0               [24] 1819 	movx	a,@dptr
      0007FD 08               [12] 1820 	inc	r0
      0007FE F6               [12] 1821 	mov	@r0,a
      0007FF C0 06            [24] 1822 	push	ar6
      000801 C0 05            [24] 1823 	push	ar5
      000803 C0 04            [24] 1824 	push	ar4
      000805 C0 03            [24] 1825 	push	ar3
      000807 C0 01            [24] 1826 	push	ar1
      000809 12r00r00         [24] 1827 	lcall	_rand
      00080C AA 82            [24] 1828 	mov	r2,dpl
      00080E AF 83            [24] 1829 	mov	r7,dph
      000810 74 20            [12] 1830 	mov	a,#0x20
      000812 C0 E0            [24] 1831 	push	acc
      000814 E4               [12] 1832 	clr	a
      000815 C0 E0            [24] 1833 	push	acc
      000817 8A 82            [24] 1834 	mov	dpl,r2
      000819 8F 83            [24] 1835 	mov	dph,r7
      00081B 12r00r00         [24] 1836 	lcall	__modsint
      00081E AA 82            [24] 1837 	mov	r2,dpl
      000820 AF 83            [24] 1838 	mov	r7,dph
      000822 15 81            [12] 1839 	dec	sp
      000824 15 81            [12] 1840 	dec	sp
      000826 D0 01            [24] 1841 	pop	ar1
      000828 D0 03            [24] 1842 	pop	ar3
      00082A D0 04            [24] 1843 	pop	ar4
      00082C D0 05            [24] 1844 	pop	ar5
      00082E D0 06            [24] 1845 	pop	ar6
      000830 0A               [12] 1846 	inc	r2
      000831 BA 00 01         [24] 1847 	cjne	r2,#0x00,00188$
      000834 0F               [12] 1848 	inc	r7
      000835                       1849 00188$:
      000835 C0 06            [24] 1850 	push	ar6
      000837 C0 05            [24] 1851 	push	ar5
      000839 C0 04            [24] 1852 	push	ar4
      00083B C0 03            [24] 1853 	push	ar3
      00083D C0 01            [24] 1854 	push	ar1
      00083F C0 02            [24] 1855 	push	ar2
      000841 C0 07            [24] 1856 	push	ar7
      000843 A8*00            [24] 1857 	mov	r0,_bp
      000845 08               [12] 1858 	inc	r0
      000846 86 82            [24] 1859 	mov	dpl,@r0
      000848 08               [12] 1860 	inc	r0
      000849 86 83            [24] 1861 	mov	dph,@r0
      00084B 12r00r00         [24] 1862 	lcall	__mulint
      00084E AA 82            [24] 1863 	mov	r2,dpl
      000850 AF 83            [24] 1864 	mov	r7,dph
      000852 15 81            [12] 1865 	dec	sp
      000854 15 81            [12] 1866 	dec	sp
      000856 D0 01            [24] 1867 	pop	ar1
      000858 D0 03            [24] 1868 	pop	ar3
      00085A D0 04            [24] 1869 	pop	ar4
      00085C D0 05            [24] 1870 	pop	ar5
      00085E D0 06            [24] 1871 	pop	ar6
      000860 E5*00            [12] 1872 	mov	a,_bp
      000862 24 03            [12] 1873 	add	a,#0x03
      000864 F8               [12] 1874 	mov	r0,a
      000865 86 82            [24] 1875 	mov	dpl,@r0
      000867 08               [12] 1876 	inc	r0
      000868 86 83            [24] 1877 	mov	dph,@r0
      00086A EA               [12] 1878 	mov	a,r2
      00086B F0               [24] 1879 	movx	@dptr,a
      00086C EF               [12] 1880 	mov	a,r7
      00086D A3               [24] 1881 	inc	dptr
      00086E F0               [24] 1882 	movx	@dptr,a
                                   1883 ;	walk.c:183: neigh[i].c = neigh[REG + i].c * (1 + rand() % 32);
      00086F EB               [12] 1884 	mov	a,r3
      000870 24r00            [12] 1885 	add	a,#_neigh
      000872 FB               [12] 1886 	mov	r3,a
      000873 EC               [12] 1887 	mov	a,r4
      000874 34s00            [12] 1888 	addc	a,#(_neigh >> 8)
      000876 FC               [12] 1889 	mov	r4,a
      000877 74 02            [12] 1890 	mov	a,#0x02
      000879 2B               [12] 1891 	add	a,r3
      00087A FA               [12] 1892 	mov	r2,a
      00087B E4               [12] 1893 	clr	a
      00087C 3C               [12] 1894 	addc	a,r4
      00087D FF               [12] 1895 	mov	r7,a
      00087E EE               [12] 1896 	mov	a,r6
      00087F 24r00            [12] 1897 	add	a,#_neigh
      000881 FE               [12] 1898 	mov	r6,a
      000882 ED               [12] 1899 	mov	a,r5
      000883 34s00            [12] 1900 	addc	a,#(_neigh >> 8)
      000885 FD               [12] 1901 	mov	r5,a
      000886 8E 82            [24] 1902 	mov	dpl,r6
      000888 8D 83            [24] 1903 	mov	dph,r5
      00088A A3               [24] 1904 	inc	dptr
      00088B A3               [24] 1905 	inc	dptr
      00088C E5*00            [12] 1906 	mov	a,_bp
      00088E 24 03            [12] 1907 	add	a,#0x03
      000890 F8               [12] 1908 	mov	r0,a
      000891 E0               [24] 1909 	movx	a,@dptr
      000892 F6               [12] 1910 	mov	@r0,a
      000893 A3               [24] 1911 	inc	dptr
      000894 E0               [24] 1912 	movx	a,@dptr
      000895 08               [12] 1913 	inc	r0
      000896 F6               [12] 1914 	mov	@r0,a
      000897 C0 07            [24] 1915 	push	ar7
      000899 C0 04            [24] 1916 	push	ar4
      00089B C0 03            [24] 1917 	push	ar3
      00089D C0 02            [24] 1918 	push	ar2
      00089F C0 01            [24] 1919 	push	ar1
      0008A1 12r00r00         [24] 1920 	lcall	_rand
      0008A4 AD 82            [24] 1921 	mov	r5,dpl
      0008A6 AE 83            [24] 1922 	mov	r6,dph
      0008A8 74 20            [12] 1923 	mov	a,#0x20
      0008AA C0 E0            [24] 1924 	push	acc
      0008AC E4               [12] 1925 	clr	a
      0008AD C0 E0            [24] 1926 	push	acc
      0008AF 8D 82            [24] 1927 	mov	dpl,r5
      0008B1 8E 83            [24] 1928 	mov	dph,r6
      0008B3 12r00r00         [24] 1929 	lcall	__modsint
      0008B6 AD 82            [24] 1930 	mov	r5,dpl
      0008B8 AE 83            [24] 1931 	mov	r6,dph
      0008BA 15 81            [12] 1932 	dec	sp
      0008BC 15 81            [12] 1933 	dec	sp
      0008BE D0 01            [24] 1934 	pop	ar1
      0008C0 D0 02            [24] 1935 	pop	ar2
      0008C2 D0 03            [24] 1936 	pop	ar3
      0008C4 D0 04            [24] 1937 	pop	ar4
      0008C6 D0 07            [24] 1938 	pop	ar7
      0008C8 0D               [12] 1939 	inc	r5
      0008C9 BD 00 01         [24] 1940 	cjne	r5,#0x00,00189$
      0008CC 0E               [12] 1941 	inc	r6
      0008CD                       1942 00189$:
      0008CD C0 07            [24] 1943 	push	ar7
      0008CF C0 04            [24] 1944 	push	ar4
      0008D1 C0 03            [24] 1945 	push	ar3
      0008D3 C0 02            [24] 1946 	push	ar2
      0008D5 C0 01            [24] 1947 	push	ar1
      0008D7 C0 05            [24] 1948 	push	ar5
      0008D9 C0 06            [24] 1949 	push	ar6
      0008DB E5*00            [12] 1950 	mov	a,_bp
      0008DD 24 03            [12] 1951 	add	a,#0x03
      0008DF F8               [12] 1952 	mov	r0,a
      0008E0 86 82            [24] 1953 	mov	dpl,@r0
      0008E2 08               [12] 1954 	inc	r0
      0008E3 86 83            [24] 1955 	mov	dph,@r0
      0008E5 12r00r00         [24] 1956 	lcall	__mulint
      0008E8 AD 82            [24] 1957 	mov	r5,dpl
      0008EA AE 83            [24] 1958 	mov	r6,dph
      0008EC 15 81            [12] 1959 	dec	sp
      0008EE 15 81            [12] 1960 	dec	sp
      0008F0 D0 01            [24] 1961 	pop	ar1
      0008F2 D0 02            [24] 1962 	pop	ar2
      0008F4 D0 03            [24] 1963 	pop	ar3
      0008F6 D0 04            [24] 1964 	pop	ar4
      0008F8 D0 07            [24] 1965 	pop	ar7
      0008FA 8A 82            [24] 1966 	mov	dpl,r2
      0008FC 8F 83            [24] 1967 	mov	dph,r7
      0008FE ED               [12] 1968 	mov	a,r5
      0008FF F0               [24] 1969 	movx	@dptr,a
      000900 EE               [12] 1970 	mov	a,r6
      000901 A3               [24] 1971 	inc	dptr
      000902 F0               [24] 1972 	movx	@dptr,a
                                   1973 ;	walk.c:184: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000903 8B 82            [24] 1974 	mov	dpl,r3
      000905 8C 83            [24] 1975 	mov	dph,r4
      000907 E0               [24] 1976 	movx	a,@dptr
      000908 FB               [12] 1977 	mov	r3,a
      000909 A3               [24] 1978 	inc	dptr
      00090A E0               [24] 1979 	movx	a,@dptr
      00090B FC               [12] 1980 	mov	r4,a
      00090C C0 07            [24] 1981 	push	ar7
      00090E C0 01            [24] 1982 	push	ar1
      000910 C0 05            [24] 1983 	push	ar5
      000912 C0 06            [24] 1984 	push	ar6
      000914 C0 03            [24] 1985 	push	ar3
      000916 C0 04            [24] 1986 	push	ar4
      000918 74r56            [12] 1987 	mov	a,#___str_6
      00091A C0 E0            [24] 1988 	push	acc
      00091C 74s00            [12] 1989 	mov	a,#(___str_6 >> 8)
      00091E C0 E0            [24] 1990 	push	acc
      000920 74 80            [12] 1991 	mov	a,#0x80
      000922 C0 E0            [24] 1992 	push	acc
      000924 12r00r00         [24] 1993 	lcall	_printf
      000927 E5 81            [12] 1994 	mov	a,sp
      000929 24 F9            [12] 1995 	add	a,#0xf9
      00092B F5 81            [12] 1996 	mov	sp,a
      00092D D0 01            [24] 1997 	pop	ar1
      00092F D0 07            [24] 1998 	pop	ar7
                                   1999 ;	walk.c:181: for (i = 0; i < REG; i++) {
      000931 E5*00            [12] 2000 	mov	a,_bp
      000933 24 07            [12] 2001 	add	a,#0x07
      000935 F8               [12] 2002 	mov	r0,a
      000936 06               [12] 2003 	inc	@r0
      000937 B6 00 02         [24] 2004 	cjne	@r0,#0x00,00190$
      00093A 08               [12] 2005 	inc	r0
      00093B 06               [12] 2006 	inc	@r0
      00093C                       2007 00190$:
      00093C E5*00            [12] 2008 	mov	a,_bp
      00093E 24 07            [12] 2009 	add	a,#0x07
      000940 F8               [12] 2010 	mov	r0,a
      000941 86 05            [24] 2011 	mov	ar5,@r0
      000943 08               [12] 2012 	inc	r0
      000944 86 06            [24] 2013 	mov	ar6,@r0
      000946 C3               [12] 2014 	clr	c
      000947 ED               [12] 2015 	mov	a,r5
      000948 94 08            [12] 2016 	subb	a,#0x08
      00094A EE               [12] 2017 	mov	a,r6
      00094B 94 00            [12] 2018 	subb	a,#0x00
      00094D D0 07            [24] 2019 	pop	ar7
      00094F 50 03            [24] 2020 	jnc	00191$
      000951 02r07rA1         [24] 2021 	ljmp	00115$
      000954                       2022 00191$:
                                   2023 ;	walk.c:187: OE76 = OE76_0;
      000954 78r01            [12] 2024 	mov	r0,#_OE76
      000956 76 3F            [12] 2025 	mov	@r0,#0x3f
                                   2026 ;	walk.c:188: flashOE(OE76_NC);
      000958 75 82 00         [24] 2027 	mov	dpl,#0x00
      00095B C0 07            [24] 2028 	push	ar7
      00095D C0 01            [24] 2029 	push	ar1
      00095F 12r00r29         [24] 2030 	lcall	_flashOE
      000962 D0 01            [24] 2031 	pop	ar1
      000964 D0 07            [24] 2032 	pop	ar7
                                   2033 ;	walk.c:190: walk(&initial);
      000966 8F 04            [24] 2034 	mov	ar4,r7
      000968 7D 00            [12] 2035 	mov	r5,#0x00
      00096A 7E 40            [12] 2036 	mov	r6,#0x40
      00096C 8C 82            [24] 2037 	mov	dpl,r4
      00096E 8D 83            [24] 2038 	mov	dph,r5
      000970 8E F0            [24] 2039 	mov	b,r6
      000972 C0 07            [24] 2040 	push	ar7
      000974 C0 01            [24] 2041 	push	ar1
      000976 12r02rC9         [24] 2042 	lcall	_walk
      000979 D0 01            [24] 2043 	pop	ar1
      00097B D0 07            [24] 2044 	pop	ar7
                                   2045 ;	walk.c:192: for (i = 0; i < ROWS; i++)
      00097D E5*00            [12] 2046 	mov	a,_bp
      00097F 24 07            [12] 2047 	add	a,#0x07
      000981 F8               [12] 2048 	mov	r0,a
      000982 E4               [12] 2049 	clr	a
      000983 F6               [12] 2050 	mov	@r0,a
      000984 08               [12] 2051 	inc	r0
      000985 F6               [12] 2052 	mov	@r0,a
      000986 7B 00            [12] 2053 	mov	r3,#0x00
      000988 7C 00            [12] 2054 	mov	r4,#0x00
                                   2055 ;	walk.c:193: for (j = 0; j < COLS; j++)
      00098A                       2056 00131$:
      00098A E5*00            [12] 2057 	mov	a,_bp
      00098C 24 03            [12] 2058 	add	a,#0x03
      00098E F8               [12] 2059 	mov	r0,a
      00098F EB               [12] 2060 	mov	a,r3
      000990 24r00            [12] 2061 	add	a,#_g
      000992 F6               [12] 2062 	mov	@r0,a
      000993 EC               [12] 2063 	mov	a,r4
      000994 34s00            [12] 2064 	addc	a,#(_g >> 8)
      000996 08               [12] 2065 	inc	r0
      000997 F6               [12] 2066 	mov	@r0,a
      000998 7A 00            [12] 2067 	mov	r2,#0x00
      00099A 7E 00            [12] 2068 	mov	r6,#0x00
      00099C                       2069 00117$:
                                   2070 ;	walk.c:194: if (g[i][j] != 0xaau) bang();
      00099C E5*00            [12] 2071 	mov	a,_bp
      00099E 24 03            [12] 2072 	add	a,#0x03
      0009A0 F8               [12] 2073 	mov	r0,a
      0009A1 EA               [12] 2074 	mov	a,r2
      0009A2 26               [12] 2075 	add	a,@r0
      0009A3 F5 82            [12] 2076 	mov	dpl,a
      0009A5 EE               [12] 2077 	mov	a,r6
      0009A6 08               [12] 2078 	inc	r0
      0009A7 36               [12] 2079 	addc	a,@r0
      0009A8 F5 83            [12] 2080 	mov	dph,a
      0009AA E0               [24] 2081 	movx	a,@dptr
      0009AB FD               [12] 2082 	mov	r5,a
      0009AC BD AA 02         [24] 2083 	cjne	r5,#0xaa,00192$
      0009AF 80 1B            [24] 2084 	sjmp	00118$
      0009B1                       2085 00192$:
      0009B1 C0 07            [24] 2086 	push	ar7
      0009B3 C0 06            [24] 2087 	push	ar6
      0009B5 C0 04            [24] 2088 	push	ar4
      0009B7 C0 03            [24] 2089 	push	ar3
      0009B9 C0 02            [24] 2090 	push	ar2
      0009BB C0 01            [24] 2091 	push	ar1
      0009BD 12r00r1D         [24] 2092 	lcall	_bang
      0009C0 D0 01            [24] 2093 	pop	ar1
      0009C2 D0 02            [24] 2094 	pop	ar2
      0009C4 D0 03            [24] 2095 	pop	ar3
      0009C6 D0 04            [24] 2096 	pop	ar4
      0009C8 D0 06            [24] 2097 	pop	ar6
      0009CA D0 07            [24] 2098 	pop	ar7
      0009CC                       2099 00118$:
                                   2100 ;	walk.c:193: for (j = 0; j < COLS; j++)
      0009CC 0A               [12] 2101 	inc	r2
      0009CD BA 00 01         [24] 2102 	cjne	r2,#0x00,00193$
      0009D0 0E               [12] 2103 	inc	r6
      0009D1                       2104 00193$:
      0009D1 C3               [12] 2105 	clr	c
      0009D2 EA               [12] 2106 	mov	a,r2
      0009D3 94 C9            [12] 2107 	subb	a,#0xc9
      0009D5 EE               [12] 2108 	mov	a,r6
      0009D6 64 80            [12] 2109 	xrl	a,#0x80
      0009D8 94 80            [12] 2110 	subb	a,#0x80
      0009DA 40 C0            [24] 2111 	jc	00117$
                                   2112 ;	walk.c:192: for (i = 0; i < ROWS; i++)
      0009DC 74 C9            [12] 2113 	mov	a,#0xc9
      0009DE 2B               [12] 2114 	add	a,r3
      0009DF FB               [12] 2115 	mov	r3,a
      0009E0 E4               [12] 2116 	clr	a
      0009E1 3C               [12] 2117 	addc	a,r4
      0009E2 FC               [12] 2118 	mov	r4,a
      0009E3 E5*00            [12] 2119 	mov	a,_bp
      0009E5 24 07            [12] 2120 	add	a,#0x07
      0009E7 F8               [12] 2121 	mov	r0,a
      0009E8 06               [12] 2122 	inc	@r0
      0009E9 B6 00 02         [24] 2123 	cjne	@r0,#0x00,00195$
      0009EC 08               [12] 2124 	inc	r0
      0009ED 06               [12] 2125 	inc	@r0
      0009EE                       2126 00195$:
      0009EE E5*00            [12] 2127 	mov	a,_bp
      0009F0 24 07            [12] 2128 	add	a,#0x07
      0009F2 F8               [12] 2129 	mov	r0,a
      0009F3 C3               [12] 2130 	clr	c
      0009F4 E6               [12] 2131 	mov	a,@r0
      0009F5 94 30            [12] 2132 	subb	a,#0x30
      0009F7 08               [12] 2133 	inc	r0
      0009F8 E6               [12] 2134 	mov	a,@r0
      0009F9 64 80            [12] 2135 	xrl	a,#0x80
      0009FB 94 80            [12] 2136 	subb	a,#0x80
      0009FD 40 8B            [24] 2137 	jc	00131$
                                   2138 ;	walk.c:196: N++;
      0009FF E5*00            [12] 2139 	mov	a,_bp
      000A01 24 05            [12] 2140 	add	a,#0x05
      000A03 F8               [12] 2141 	mov	r0,a
      000A04 06               [12] 2142 	inc	@r0
      000A05 B6 00 02         [24] 2143 	cjne	@r0,#0x00,00197$
      000A08 08               [12] 2144 	inc	r0
      000A09 06               [12] 2145 	inc	@r0
      000A0A                       2146 00197$:
      000A0A 02r06r86         [24] 2147 	ljmp	00108$
      000A0D                       2148 00110$:
                                   2149 ;	walk.c:199: EA = 0;
                                   2150 ;	assignBit
      000A0D C2 AF            [12] 2151 	clr	_EA
                                   2152 ;	walk.c:201: puts("\033[2J\033[?25h");
      000A0F 90r00r5F         [24] 2153 	mov	dptr,#___str_7
      000A12 75 F0 80         [24] 2154 	mov	b,#0x80
      000A15 12r00r00         [24] 2155 	lcall	_puts
                                   2156 ;	walk.c:205: __endasm;
      000A18 02 00 00         [24] 2157 	ljmp	0
                                   2158 ;	walk.c:207: return 0;
      000A1B 90 00 00         [24] 2159 	mov	dptr,#0x0000
                                   2160 ;	walk.c:208: }
      000A1E 85*00 81         [24] 2161 	mov	sp,_bp
      000A21 D0*00            [24] 2162 	pop	_bp
      000A23 22               [24] 2163 	ret
                                   2164 ;------------------------------------------------------------
                                   2165 ;Allocation info for local variables in function 'qinit'
                                   2166 ;------------------------------------------------------------
                                   2167 ;	walk.c:210: static void qinit(void) {
                                   2168 ;	-----------------------------------------
                                   2169 ;	 function qinit
                                   2170 ;	-----------------------------------------
      000A24                       2171 _qinit:
                                   2172 ;	walk.c:211: hp = tp = 0;
      000A24 90rBCr72         [24] 2173 	mov	dptr,#_tp
      000A27 E4               [12] 2174 	clr	a
      000A28 F0               [24] 2175 	movx	@dptr,a
      000A29 A3               [24] 2176 	inc	dptr
      000A2A F0               [24] 2177 	movx	@dptr,a
      000A2B 90rBCr70         [24] 2178 	mov	dptr,#_hp
      000A2E F0               [24] 2179 	movx	@dptr,a
      000A2F A3               [24] 2180 	inc	dptr
      000A30 F0               [24] 2181 	movx	@dptr,a
                                   2182 ;	walk.c:212: return;
                                   2183 ;	walk.c:213: }
      000A31 22               [24] 2184 	ret
                                   2185 ;------------------------------------------------------------
                                   2186 ;Allocation info for local variables in function 'qadd'
                                   2187 ;------------------------------------------------------------
                                   2188 ;t                         Allocated to registers r7 r5 r6 
                                   2189 ;sloc0                     Allocated to stack - _bp +1
                                   2190 ;sloc1                     Allocated to stack - _bp +3
                                   2191 ;sloc2                     Allocated to stack - _bp +5
                                   2192 ;sloc3                     Allocated to stack - _bp +10
                                   2193 ;------------------------------------------------------------
                                   2194 ;	walk.c:215: static uint8_t qadd(struct node *t) {
                                   2195 ;	-----------------------------------------
                                   2196 ;	 function qadd
                                   2197 ;	-----------------------------------------
      000A32                       2198 _qadd:
      000A32 C0*00            [24] 2199 	push	_bp
      000A34 E5 81            [12] 2200 	mov	a,sp
      000A36 F5*00            [12] 2201 	mov	_bp,a
      000A38 24 06            [12] 2202 	add	a,#0x06
      000A3A F5 81            [12] 2203 	mov	sp,a
      000A3C AF 82            [24] 2204 	mov	r7,dpl
      000A3E AD 83            [24] 2205 	mov	r5,dph
      000A40 AE F0            [24] 2206 	mov	r6,b
                                   2207 ;	walk.c:216: if (((hp + 1) % QMAX) == tp) return 0u;
      000A42 90rBCr70         [24] 2208 	mov	dptr,#_hp
      000A45 E0               [24] 2209 	movx	a,@dptr
      000A46 FB               [12] 2210 	mov	r3,a
      000A47 A3               [24] 2211 	inc	dptr
      000A48 E0               [24] 2212 	movx	a,@dptr
      000A49 FC               [12] 2213 	mov	r4,a
      000A4A A8*00            [24] 2214 	mov	r0,_bp
      000A4C 08               [12] 2215 	inc	r0
      000A4D 74 01            [12] 2216 	mov	a,#0x01
      000A4F 2B               [12] 2217 	add	a,r3
      000A50 F6               [12] 2218 	mov	@r0,a
      000A51 E4               [12] 2219 	clr	a
      000A52 3C               [12] 2220 	addc	a,r4
      000A53 08               [12] 2221 	inc	r0
      000A54 F6               [12] 2222 	mov	@r0,a
      000A55 C0 07            [24] 2223 	push	ar7
      000A57 C0 06            [24] 2224 	push	ar6
      000A59 C0 05            [24] 2225 	push	ar5
      000A5B C0 04            [24] 2226 	push	ar4
      000A5D C0 03            [24] 2227 	push	ar3
      000A5F 74 B0            [12] 2228 	mov	a,#0xb0
      000A61 C0 E0            [24] 2229 	push	acc
      000A63 74 25            [12] 2230 	mov	a,#0x25
      000A65 C0 E0            [24] 2231 	push	acc
      000A67 A8*00            [24] 2232 	mov	r0,_bp
      000A69 08               [12] 2233 	inc	r0
      000A6A 86 82            [24] 2234 	mov	dpl,@r0
      000A6C 08               [12] 2235 	inc	r0
      000A6D 86 83            [24] 2236 	mov	dph,@r0
      000A6F 12r00r00         [24] 2237 	lcall	__modsint
      000A72 A8*00            [24] 2238 	mov	r0,_bp
      000A74 08               [12] 2239 	inc	r0
      000A75 08               [12] 2240 	inc	r0
      000A76 08               [12] 2241 	inc	r0
      000A77 A6 82            [24] 2242 	mov	@r0,dpl
      000A79 08               [12] 2243 	inc	r0
      000A7A A6 83            [24] 2244 	mov	@r0,dph
      000A7C 15 81            [12] 2245 	dec	sp
      000A7E 15 81            [12] 2246 	dec	sp
      000A80 D0 03            [24] 2247 	pop	ar3
      000A82 D0 04            [24] 2248 	pop	ar4
      000A84 D0 05            [24] 2249 	pop	ar5
      000A86 D0 06            [24] 2250 	pop	ar6
      000A88 D0 07            [24] 2251 	pop	ar7
      000A8A 90rBCr72         [24] 2252 	mov	dptr,#_tp
      000A8D E5*00            [12] 2253 	mov	a,_bp
      000A8F 24 05            [12] 2254 	add	a,#0x05
      000A91 F8               [12] 2255 	mov	r0,a
      000A92 E0               [24] 2256 	movx	a,@dptr
      000A93 F6               [12] 2257 	mov	@r0,a
      000A94 A3               [24] 2258 	inc	dptr
      000A95 E0               [24] 2259 	movx	a,@dptr
      000A96 08               [12] 2260 	inc	r0
      000A97 F6               [12] 2261 	mov	@r0,a
      000A98 E5*00            [12] 2262 	mov	a,_bp
      000A9A 24 03            [12] 2263 	add	a,#0x03
      000A9C F8               [12] 2264 	mov	r0,a
      000A9D E5*00            [12] 2265 	mov	a,_bp
      000A9F 24 05            [12] 2266 	add	a,#0x05
      000AA1 F9               [12] 2267 	mov	r1,a
      000AA2 86 F0            [24] 2268 	mov	b,@r0
      000AA4 E7               [12] 2269 	mov	a,@r1
      000AA5 B5 F0 0A         [24] 2270 	cjne	a,b,00109$
      000AA8 08               [12] 2271 	inc	r0
      000AA9 86 F0            [24] 2272 	mov	b,@r0
      000AAB 09               [12] 2273 	inc	r1
      000AAC E7               [12] 2274 	mov	a,@r1
      000AAD B5 F0 02         [24] 2275 	cjne	a,b,00109$
      000AB0 80 02            [24] 2276 	sjmp	00110$
      000AB2                       2277 00109$:
      000AB2 80 05            [24] 2278 	sjmp	00102$
      000AB4                       2279 00110$:
      000AB4 75 82 00         [24] 2280 	mov	dpl,#0x00
      000AB7 80 65            [24] 2281 	sjmp	00103$
      000AB9                       2282 00102$:
                                   2283 ;	walk.c:217: queue[hp] = *t;
      000AB9 8F 02            [24] 2284 	mov	ar2,r7
      000ABB 8E 07            [24] 2285 	mov	ar7,r6
      000ABD EB               [12] 2286 	mov	a,r3
      000ABE 2B               [12] 2287 	add	a,r3
      000ABF FB               [12] 2288 	mov	r3,a
      000AC0 EC               [12] 2289 	mov	a,r4
      000AC1 33               [12] 2290 	rlc	a
      000AC2 FC               [12] 2291 	mov	r4,a
      000AC3 EB               [12] 2292 	mov	a,r3
      000AC4 2B               [12] 2293 	add	a,r3
      000AC5 FB               [12] 2294 	mov	r3,a
      000AC6 EC               [12] 2295 	mov	a,r4
      000AC7 33               [12] 2296 	rlc	a
      000AC8 FC               [12] 2297 	mov	r4,a
      000AC9 EB               [12] 2298 	mov	a,r3
      000ACA 24rB0            [12] 2299 	add	a,#_queue
      000ACC FB               [12] 2300 	mov	r3,a
      000ACD EC               [12] 2301 	mov	a,r4
      000ACE 34s25            [12] 2302 	addc	a,#(_queue >> 8)
      000AD0 FC               [12] 2303 	mov	r4,a
      000AD1 7E 00            [12] 2304 	mov	r6,#0x00
      000AD3 74 04            [12] 2305 	mov	a,#0x04
      000AD5 C0 E0            [24] 2306 	push	acc
      000AD7 E4               [12] 2307 	clr	a
      000AD8 C0 E0            [24] 2308 	push	acc
      000ADA C0 02            [24] 2309 	push	ar2
      000ADC C0 05            [24] 2310 	push	ar5
      000ADE C0 07            [24] 2311 	push	ar7
      000AE0 8B 82            [24] 2312 	mov	dpl,r3
      000AE2 8C 83            [24] 2313 	mov	dph,r4
      000AE4 8E F0            [24] 2314 	mov	b,r6
      000AE6 12r00r00         [24] 2315 	lcall	___memcpy
      000AE9 E5 81            [12] 2316 	mov	a,sp
      000AEB 24 FB            [12] 2317 	add	a,#0xfb
      000AED F5 81            [12] 2318 	mov	sp,a
                                   2319 ;	walk.c:218: hp = (hp + 1) % QMAX;
      000AEF 90rBCr70         [24] 2320 	mov	dptr,#_hp
      000AF2 E0               [24] 2321 	movx	a,@dptr
      000AF3 FD               [12] 2322 	mov	r5,a
      000AF4 A3               [24] 2323 	inc	dptr
      000AF5 E0               [24] 2324 	movx	a,@dptr
      000AF6 FE               [12] 2325 	mov	r6,a
      000AF7 0D               [12] 2326 	inc	r5
      000AF8 BD 00 01         [24] 2327 	cjne	r5,#0x00,00111$
      000AFB 0E               [12] 2328 	inc	r6
      000AFC                       2329 00111$:
      000AFC 74 B0            [12] 2330 	mov	a,#0xb0
      000AFE C0 E0            [24] 2331 	push	acc
      000B00 74 25            [12] 2332 	mov	a,#0x25
      000B02 C0 E0            [24] 2333 	push	acc
      000B04 8D 82            [24] 2334 	mov	dpl,r5
      000B06 8E 83            [24] 2335 	mov	dph,r6
      000B08 12r00r00         [24] 2336 	lcall	__modsint
      000B0B AD 82            [24] 2337 	mov	r5,dpl
      000B0D AE 83            [24] 2338 	mov	r6,dph
      000B0F 15 81            [12] 2339 	dec	sp
      000B11 15 81            [12] 2340 	dec	sp
      000B13 90rBCr70         [24] 2341 	mov	dptr,#_hp
      000B16 ED               [12] 2342 	mov	a,r5
      000B17 F0               [24] 2343 	movx	@dptr,a
      000B18 EE               [12] 2344 	mov	a,r6
      000B19 A3               [24] 2345 	inc	dptr
      000B1A F0               [24] 2346 	movx	@dptr,a
                                   2347 ;	walk.c:219: return 1u;
      000B1B 75 82 01         [24] 2348 	mov	dpl,#0x01
      000B1E                       2349 00103$:
                                   2350 ;	walk.c:220: }
      000B1E 85*00 81         [24] 2351 	mov	sp,_bp
      000B21 D0*00            [24] 2352 	pop	_bp
      000B23 22               [24] 2353 	ret
                                   2354 ;------------------------------------------------------------
                                   2355 ;Allocation info for local variables in function 'qget'
                                   2356 ;------------------------------------------------------------
                                   2357 ;t                         Allocated to registers r5 r6 r7 
                                   2358 ;------------------------------------------------------------
                                   2359 ;	walk.c:222: static uint8_t qget(struct node *t) {
                                   2360 ;	-----------------------------------------
                                   2361 ;	 function qget
                                   2362 ;	-----------------------------------------
      000B24                       2363 _qget:
      000B24 AD 82            [24] 2364 	mov	r5,dpl
      000B26 AE 83            [24] 2365 	mov	r6,dph
      000B28 AF F0            [24] 2366 	mov	r7,b
                                   2367 ;	walk.c:223: if (hp == tp) return 0u;
      000B2A 90rBCr70         [24] 2368 	mov	dptr,#_hp
      000B2D E0               [24] 2369 	movx	a,@dptr
      000B2E FB               [12] 2370 	mov	r3,a
      000B2F A3               [24] 2371 	inc	dptr
      000B30 E0               [24] 2372 	movx	a,@dptr
      000B31 FC               [12] 2373 	mov	r4,a
      000B32 90rBCr72         [24] 2374 	mov	dptr,#_tp
      000B35 E0               [24] 2375 	movx	a,@dptr
      000B36 F9               [12] 2376 	mov	r1,a
      000B37 A3               [24] 2377 	inc	dptr
      000B38 E0               [24] 2378 	movx	a,@dptr
      000B39 FA               [12] 2379 	mov	r2,a
      000B3A EB               [12] 2380 	mov	a,r3
      000B3B B5 01 08         [24] 2381 	cjne	a,ar1,00102$
      000B3E EC               [12] 2382 	mov	a,r4
      000B3F B5 02 04         [24] 2383 	cjne	a,ar2,00102$
      000B42 75 82 00         [24] 2384 	mov	dpl,#0x00
      000B45 22               [24] 2385 	ret
      000B46                       2386 00102$:
                                   2387 ;	walk.c:224: *t = queue[tp];
      000B46 E9               [12] 2388 	mov	a,r1
      000B47 29               [12] 2389 	add	a,r1
      000B48 F9               [12] 2390 	mov	r1,a
      000B49 EA               [12] 2391 	mov	a,r2
      000B4A 33               [12] 2392 	rlc	a
      000B4B FA               [12] 2393 	mov	r2,a
      000B4C E9               [12] 2394 	mov	a,r1
      000B4D 29               [12] 2395 	add	a,r1
      000B4E F9               [12] 2396 	mov	r1,a
      000B4F EA               [12] 2397 	mov	a,r2
      000B50 33               [12] 2398 	rlc	a
      000B51 FA               [12] 2399 	mov	r2,a
      000B52 E9               [12] 2400 	mov	a,r1
      000B53 24rB0            [12] 2401 	add	a,#_queue
      000B55 F9               [12] 2402 	mov	r1,a
      000B56 EA               [12] 2403 	mov	a,r2
      000B57 34s25            [12] 2404 	addc	a,#(_queue >> 8)
      000B59 FA               [12] 2405 	mov	r2,a
      000B5A 7C 00            [12] 2406 	mov	r4,#0x00
      000B5C 74 04            [12] 2407 	mov	a,#0x04
      000B5E C0 E0            [24] 2408 	push	acc
      000B60 E4               [12] 2409 	clr	a
      000B61 C0 E0            [24] 2410 	push	acc
      000B63 C0 01            [24] 2411 	push	ar1
      000B65 C0 02            [24] 2412 	push	ar2
      000B67 C0 04            [24] 2413 	push	ar4
      000B69 8D 82            [24] 2414 	mov	dpl,r5
      000B6B 8E 83            [24] 2415 	mov	dph,r6
      000B6D 8F F0            [24] 2416 	mov	b,r7
      000B6F 12r00r00         [24] 2417 	lcall	___memcpy
      000B72 E5 81            [12] 2418 	mov	a,sp
      000B74 24 FB            [12] 2419 	add	a,#0xfb
      000B76 F5 81            [12] 2420 	mov	sp,a
                                   2421 ;	walk.c:225: tp = (tp + 1) % QMAX;
      000B78 90rBCr72         [24] 2422 	mov	dptr,#_tp
      000B7B E0               [24] 2423 	movx	a,@dptr
      000B7C FE               [12] 2424 	mov	r6,a
      000B7D A3               [24] 2425 	inc	dptr
      000B7E E0               [24] 2426 	movx	a,@dptr
      000B7F FF               [12] 2427 	mov	r7,a
      000B80 0E               [12] 2428 	inc	r6
      000B81 BE 00 01         [24] 2429 	cjne	r6,#0x00,00111$
      000B84 0F               [12] 2430 	inc	r7
      000B85                       2431 00111$:
      000B85 74 B0            [12] 2432 	mov	a,#0xb0
      000B87 C0 E0            [24] 2433 	push	acc
      000B89 74 25            [12] 2434 	mov	a,#0x25
      000B8B C0 E0            [24] 2435 	push	acc
      000B8D 8E 82            [24] 2436 	mov	dpl,r6
      000B8F 8F 83            [24] 2437 	mov	dph,r7
      000B91 12r00r00         [24] 2438 	lcall	__modsint
      000B94 AE 82            [24] 2439 	mov	r6,dpl
      000B96 AF 83            [24] 2440 	mov	r7,dph
      000B98 15 81            [12] 2441 	dec	sp
      000B9A 15 81            [12] 2442 	dec	sp
      000B9C 90rBCr72         [24] 2443 	mov	dptr,#_tp
      000B9F EE               [12] 2444 	mov	a,r6
      000BA0 F0               [24] 2445 	movx	@dptr,a
      000BA1 EF               [12] 2446 	mov	a,r7
      000BA2 A3               [24] 2447 	inc	dptr
      000BA3 F0               [24] 2448 	movx	@dptr,a
                                   2449 ;	walk.c:226: return 1u;
      000BA4 75 82 01         [24] 2450 	mov	dpl,#0x01
                                   2451 ;	walk.c:227: }
      000BA7 22               [24] 2452 	ret
                                   2453 	.area CSEG    (CODE)
                                   2454 	.area CONST   (CODE)
                                   2455 	.area CONST   (CODE)
      000000                       2456 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2457 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2458 	.db 0x00
                                   2459 	.area CSEG    (CODE)
                                   2460 	.area CONST   (CODE)
      00000D                       2461 ___str_1:
      00000D 1B                    2462 	.db 0x1b
      00000E 5B 32 3B 31 48 25 20  2463 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      000023 00                    2464 	.db 0x00
                                   2465 	.area CSEG    (CODE)
                                   2466 	.area CONST   (CODE)
      000024                       2467 ___str_2:
      000024 1B                    2468 	.db 0x1b
      000025 5B 25 64 3B 25 64 48  2469 	.ascii "[%d;%dH."
             2E
      00002D 00                    2470 	.db 0x00
                                   2471 	.area CSEG    (CODE)
                                   2472 	.area CONST   (CODE)
      00002E                       2473 ___str_3:
      00002E 1B                    2474 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2475 	.ascii "[%d;%dHo"
             6F
      000037 00                    2476 	.db 0x00
                                   2477 	.area CSEG    (CODE)
                                   2478 	.area CONST   (CODE)
      000038                       2479 ___str_4:
      000038 1B                    2480 	.db 0x1b
      000039 5B 32 4A              2481 	.ascii "[2J"
      00003C 1B                    2482 	.db 0x1b
      00003D 5B 3F 32 35 6C        2483 	.ascii "[?25l"
      000042 00                    2484 	.db 0x00
                                   2485 	.area CSEG    (CODE)
                                   2486 	.area CONST   (CODE)
      000043                       2487 ___str_5:
      000043 1B                    2488 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2489 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2490 	.db 0x00
                                   2491 	.area CSEG    (CODE)
                                   2492 	.area CONST   (CODE)
      000056                       2493 ___str_6:
      000056 25 20 38 64 25 20 38  2494 	.ascii "% 8d% 8d"
             64
      00005E 00                    2495 	.db 0x00
                                   2496 	.area CSEG    (CODE)
                                   2497 	.area CONST   (CODE)
      00005F                       2498 ___str_7:
      00005F 1B                    2499 	.db 0x1b
      000060 5B 32 4A              2500 	.ascii "[2J"
      000063 1B                    2501 	.db 0x1b
      000064 5B 3F 32 35 68        2502 	.ascii "[?25h"
      000069 00                    2503 	.db 0x00
                                   2504 	.area CSEG    (CODE)
                                   2505 	.area XINIT   (CODE)
      000000                       2506 __xinit__neigh:
      000000 FF FF                 2507 	.byte #0xff, #0xff	; -1
      000002 01 00                 2508 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2509 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2510 	.byte #0xff, #0xff	; -1
      000008 01 00                 2511 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2512 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2513 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2514 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2515 	.byte #0xff, #0xff	; -1
      000012 00 00                 2516 	.byte #0x00, #0x00	;  0
      000014 00 00                 2517 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2518 	.byte #0xff, #0xff	; -1
      000018 01 00                 2519 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2520 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2521 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2522 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2523 	.byte #0xff, #0xff	; -1
      000022 01 00                 2524 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2525 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2526 	.byte #0xff, #0xff	; -1
      000028 01 00                 2527 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2528 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2529 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2530 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2531 	.byte #0xff, #0xff	; -1
      000032 00 00                 2532 	.byte #0x00, #0x00	;  0
      000034 00 00                 2533 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2534 	.byte #0xff, #0xff	; -1
      000038 01 00                 2535 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2536 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2537 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2538 	.byte #0x01, #0x00	;  1
                                   2539 	.area CABS    (ABS,CODE)
