                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _g:
      000000                        322 	.ds 9648
      0025B0                        323 _queue:
      0025B0                        324 	.ds 38592
      00BC70                        325 _hp:
      00BC70                        326 	.ds 2
      00BC72                        327 _tp:
      00BC72                        328 	.ds 2
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _neigh:
      000000                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r06r54         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	walk.c:9: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  395 	mov	a, dpl
      000002 02 00 30         [24]  396 	ljmp	0x0030
                                    397 ;	walk.c:15: }
                                    398 ;	naked function: no epilogue.
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'getchar'
                                    401 ;------------------------------------------------------------
                                    402 ;	walk.c:17: int getchar(void) __naked {
                                    403 ;	-----------------------------------------
                                    404 ;	 function getchar
                                    405 ;	-----------------------------------------
      000005                        406 _getchar:
                                    407 ;	naked function: no prologue.
                                    408 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  409 	lcall	0x0032
      000008 F5 82            [12]  410 	mov	dpl, a
      00000A 75 83 00         [24]  411 	mov	dph, #0
      00000D 22               [24]  412 	ret
                                    413 ;	walk.c:24: }
                                    414 ;	naked function: no epilogue.
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'int0'
                                    417 ;------------------------------------------------------------
                                    418 ;	walk.c:28: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    419 ;	-----------------------------------------
                                    420 ;	 function int0
                                    421 ;	-----------------------------------------
      00000E                        422 _int0:
                           00000F   423 	ar7 = 0x0f
                           00000E   424 	ar6 = 0x0e
                           00000D   425 	ar5 = 0x0d
                           00000C   426 	ar4 = 0x0c
                           00000B   427 	ar3 = 0x0b
                           00000A   428 	ar2 = 0x0a
                           000009   429 	ar1 = 0x09
                           000008   430 	ar0 = 0x08
      00000E C0 D0            [24]  431 	push	psw
      000010 75 D0 08         [24]  432 	mov	psw,#0x08
                                    433 ;	walk.c:29: i0 = 0u;
      000013 78r00            [12]  434 	mov	r0,#_i0
      000015 76 00            [12]  435 	mov	@r0,#0x00
                                    436 ;	walk.c:30: }
      000017 D0 D0            [24]  437 	pop	psw
      000019 32               [24]  438 	reti
                                    439 ;	eliminated unneeded push/pop dpl
                                    440 ;	eliminated unneeded push/pop dph
                                    441 ;	eliminated unneeded push/pop b
                                    442 ;	eliminated unneeded push/pop acc
                                    443 ;------------------------------------------------------------
                                    444 ;Allocation info for local variables in function 'reset'
                                    445 ;------------------------------------------------------------
                                    446 ;	walk.c:32: static void reset(void) __naked {
                                    447 ;	-----------------------------------------
                                    448 ;	 function reset
                                    449 ;	-----------------------------------------
      00001A                        450 _reset:
                                    451 ;	naked function: no prologue.
                                    452 ;	walk.c:35: __endasm;
      00001A 43 87 02         [24]  453 	orl	pcon, #2
                                    454 ;	walk.c:36: }
                                    455 ;	naked function: no epilogue.
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'bang'
                                    458 ;------------------------------------------------------------
                                    459 ;	walk.c:38: static void bang(void) {
                                    460 ;	-----------------------------------------
                                    461 ;	 function bang
                                    462 ;	-----------------------------------------
      00001D                        463 _bang:
                           000007   464 	ar7 = 0x07
                           000006   465 	ar6 = 0x06
                           000005   466 	ar5 = 0x05
                           000004   467 	ar4 = 0x04
                           000003   468 	ar3 = 0x03
                           000002   469 	ar2 = 0x02
                           000001   470 	ar1 = 0x01
                           000000   471 	ar0 = 0x00
                                    472 ;	walk.c:39: (void)puts("Memory error");
      00001D 90r00r00         [24]  473 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  474 	mov	b,#0x80
      000023 12r00r00         [24]  475 	lcall	_puts
                                    476 ;	walk.c:40: reset();
                                    477 ;	walk.c:42: return;
                                    478 ;	walk.c:43: }
      000026 02r00r1A         [24]  479 	ljmp	_reset
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'flashOE'
                                    482 ;------------------------------------------------------------
                                    483 ;mask                      Allocated to registers r7 
                                    484 ;OEreg                     Allocated to stack - _bp +1
                                    485 ;------------------------------------------------------------
                                    486 ;	walk.c:84: static void flashOE(uint8_t mask) {
                                    487 ;	-----------------------------------------
                                    488 ;	 function flashOE
                                    489 ;	-----------------------------------------
      000029                        490 _flashOE:
      000029 C0*00            [24]  491 	push	_bp
      00002B 85 81*00         [24]  492 	mov	_bp,sp
      00002E 05 81            [12]  493 	inc	sp
      000030 05 81            [12]  494 	inc	sp
      000032 AF 82            [24]  495 	mov	r7,dpl
                                    496 ;	walk.c:87: P1_7 = 0;
                                    497 ;	assignBit
      000034 C2 97            [12]  498 	clr	_P1_7
                                    499 ;	walk.c:88: *OEreg = OE76;
      000036 90 F0 06         [24]  500 	mov	dptr,#0xf006
      000039 78r01            [12]  501 	mov	r0,#_OE76
      00003B E6               [12]  502 	mov	a,@r0
      00003C F0               [24]  503 	movx	@dptr,a
                                    504 ;	walk.c:89: P1_7 = 1;
                                    505 ;	assignBit
      00003D D2 97            [12]  506 	setb	_P1_7
                                    507 ;	walk.c:90: OE76 ^= mask;
      00003F 78r01            [12]  508 	mov	r0,#_OE76
      000041 EF               [12]  509 	mov	a,r7
      000042 66               [12]  510 	xrl	a,@r0
      000043 F6               [12]  511 	mov	@r0,a
                                    512 ;	walk.c:92: return;
                                    513 ;	walk.c:93: }
      000044 85*00 81         [24]  514 	mov	sp,_bp
      000047 D0*00            [24]  515 	pop	_bp
      000049 22               [24]  516 	ret
                                    517 ;------------------------------------------------------------
                                    518 ;Allocation info for local variables in function 'update'
                                    519 ;------------------------------------------------------------
                                    520 ;cur                       Allocated to stack - _bp -5
                                    521 ;j                         Allocated to stack - _bp -6
                                    522 ;t                         Allocated to stack - _bp +1
                                    523 ;sloc0                     Allocated to stack - _bp +4
                                    524 ;sloc1                     Allocated to stack - _bp +6
                                    525 ;sloc2                     Allocated to stack - _bp +8
                                    526 ;------------------------------------------------------------
                                    527 ;	walk.c:95: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    528 ;	-----------------------------------------
                                    529 ;	 function update
                                    530 ;	-----------------------------------------
      00004A                        531 _update:
      00004A C0*00            [24]  532 	push	_bp
      00004C 85 81*00         [24]  533 	mov	_bp,sp
      00004F C0 82            [24]  534 	push	dpl
      000051 C0 83            [24]  535 	push	dph
      000053 C0 F0            [24]  536 	push	b
      000055 E5 81            [12]  537 	mov	a,sp
      000057 24 07            [12]  538 	add	a,#0x07
      000059 F5 81            [12]  539 	mov	sp,a
                                    540 ;	walk.c:96: t->r = cur->r + neigh[j].r;
      00005B E5*00            [12]  541 	mov	a,_bp
      00005D 24 FB            [12]  542 	add	a,#0xfb
      00005F F8               [12]  543 	mov	r0,a
      000060 86 02            [24]  544 	mov	ar2,@r0
      000062 08               [12]  545 	inc	r0
      000063 86 03            [24]  546 	mov	ar3,@r0
      000065 08               [12]  547 	inc	r0
      000066 86 04            [24]  548 	mov	ar4,@r0
      000068 8A 82            [24]  549 	mov	dpl,r2
      00006A 8B 83            [24]  550 	mov	dph,r3
      00006C 8C F0            [24]  551 	mov	b,r4
      00006E E5*00            [12]  552 	mov	a,_bp
      000070 24 04            [12]  553 	add	a,#0x04
      000072 F8               [12]  554 	mov	r0,a
      000073 12r00r00         [24]  555 	lcall	__gptrget
      000076 F6               [12]  556 	mov	@r0,a
      000077 A3               [24]  557 	inc	dptr
      000078 12r00r00         [24]  558 	lcall	__gptrget
      00007B 08               [12]  559 	inc	r0
      00007C F6               [12]  560 	mov	@r0,a
      00007D E5*00            [12]  561 	mov	a,_bp
      00007F 24 FA            [12]  562 	add	a,#0xfa
      000081 F8               [12]  563 	mov	r0,a
      000082 E5*00            [12]  564 	mov	a,_bp
      000084 24 06            [12]  565 	add	a,#0x06
      000086 F9               [12]  566 	mov	r1,a
      000087 E6               [12]  567 	mov	a,@r0
      000088 75 F0 04         [24]  568 	mov	b,#0x04
      00008B A4               [48]  569 	mul	ab
      00008C F7               [12]  570 	mov	@r1,a
      00008D 09               [12]  571 	inc	r1
      00008E A7 F0            [24]  572 	mov	@r1,b
      000090 E5*00            [12]  573 	mov	a,_bp
      000092 24 06            [12]  574 	add	a,#0x06
      000094 F8               [12]  575 	mov	r0,a
      000095 E6               [12]  576 	mov	a,@r0
      000096 24r00            [12]  577 	add	a,#_neigh
      000098 F5 82            [12]  578 	mov	dpl,a
      00009A 08               [12]  579 	inc	r0
      00009B E6               [12]  580 	mov	a,@r0
      00009C 34s00            [12]  581 	addc	a,#(_neigh >> 8)
      00009E F5 83            [12]  582 	mov	dph,a
      0000A0 E0               [24]  583 	movx	a,@dptr
      0000A1 FF               [12]  584 	mov	r7,a
      0000A2 A3               [24]  585 	inc	dptr
      0000A3 E0               [24]  586 	movx	a,@dptr
      0000A4 FE               [12]  587 	mov	r6,a
      0000A5 E5*00            [12]  588 	mov	a,_bp
      0000A7 24 04            [12]  589 	add	a,#0x04
      0000A9 F8               [12]  590 	mov	r0,a
      0000AA EF               [12]  591 	mov	a,r7
      0000AB 26               [12]  592 	add	a,@r0
      0000AC FF               [12]  593 	mov	r7,a
      0000AD EE               [12]  594 	mov	a,r6
      0000AE 08               [12]  595 	inc	r0
      0000AF 36               [12]  596 	addc	a,@r0
      0000B0 FE               [12]  597 	mov	r6,a
      0000B1 A8*00            [24]  598 	mov	r0,_bp
      0000B3 08               [12]  599 	inc	r0
      0000B4 86 82            [24]  600 	mov	dpl,@r0
      0000B6 08               [12]  601 	inc	r0
      0000B7 86 83            [24]  602 	mov	dph,@r0
      0000B9 08               [12]  603 	inc	r0
      0000BA 86 F0            [24]  604 	mov	b,@r0
      0000BC EF               [12]  605 	mov	a,r7
      0000BD 12r00r00         [24]  606 	lcall	__gptrput
      0000C0 A3               [24]  607 	inc	dptr
      0000C1 EE               [12]  608 	mov	a,r6
      0000C2 12r00r00         [24]  609 	lcall	__gptrput
                                    610 ;	walk.c:97: t->c = cur->c + neigh[j].c;
      0000C5 A8*00            [24]  611 	mov	r0,_bp
      0000C7 08               [12]  612 	inc	r0
      0000C8 E5*00            [12]  613 	mov	a,_bp
      0000CA 24 08            [12]  614 	add	a,#0x08
      0000CC F9               [12]  615 	mov	r1,a
      0000CD 74 02            [12]  616 	mov	a,#0x02
      0000CF 26               [12]  617 	add	a,@r0
      0000D0 F7               [12]  618 	mov	@r1,a
      0000D1 E4               [12]  619 	clr	a
      0000D2 08               [12]  620 	inc	r0
      0000D3 36               [12]  621 	addc	a,@r0
      0000D4 09               [12]  622 	inc	r1
      0000D5 F7               [12]  623 	mov	@r1,a
      0000D6 08               [12]  624 	inc	r0
      0000D7 09               [12]  625 	inc	r1
      0000D8 E6               [12]  626 	mov	a,@r0
      0000D9 F7               [12]  627 	mov	@r1,a
      0000DA 74 02            [12]  628 	mov	a,#0x02
      0000DC 2A               [12]  629 	add	a,r2
      0000DD FA               [12]  630 	mov	r2,a
      0000DE E4               [12]  631 	clr	a
      0000DF 3B               [12]  632 	addc	a,r3
      0000E0 FB               [12]  633 	mov	r3,a
      0000E1 8A 82            [24]  634 	mov	dpl,r2
      0000E3 8B 83            [24]  635 	mov	dph,r3
      0000E5 8C F0            [24]  636 	mov	b,r4
      0000E7 12r00r00         [24]  637 	lcall	__gptrget
      0000EA FA               [12]  638 	mov	r2,a
      0000EB A3               [24]  639 	inc	dptr
      0000EC 12r00r00         [24]  640 	lcall	__gptrget
      0000EF FB               [12]  641 	mov	r3,a
      0000F0 E5*00            [12]  642 	mov	a,_bp
      0000F2 24 06            [12]  643 	add	a,#0x06
      0000F4 F8               [12]  644 	mov	r0,a
      0000F5 E6               [12]  645 	mov	a,@r0
      0000F6 24r00            [12]  646 	add	a,#_neigh
      0000F8 FC               [12]  647 	mov	r4,a
      0000F9 08               [12]  648 	inc	r0
      0000FA E6               [12]  649 	mov	a,@r0
      0000FB 34s00            [12]  650 	addc	a,#(_neigh >> 8)
      0000FD FD               [12]  651 	mov	r5,a
      0000FE 8C 82            [24]  652 	mov	dpl,r4
      000100 8D 83            [24]  653 	mov	dph,r5
      000102 A3               [24]  654 	inc	dptr
      000103 A3               [24]  655 	inc	dptr
      000104 E0               [24]  656 	movx	a,@dptr
      000105 FC               [12]  657 	mov	r4,a
      000106 A3               [24]  658 	inc	dptr
      000107 E0               [24]  659 	movx	a,@dptr
      000108 FD               [12]  660 	mov	r5,a
      000109 EC               [12]  661 	mov	a,r4
      00010A 2A               [12]  662 	add	a,r2
      00010B FA               [12]  663 	mov	r2,a
      00010C ED               [12]  664 	mov	a,r5
      00010D 3B               [12]  665 	addc	a,r3
      00010E FB               [12]  666 	mov	r3,a
      00010F E5*00            [12]  667 	mov	a,_bp
      000111 24 08            [12]  668 	add	a,#0x08
      000113 F8               [12]  669 	mov	r0,a
      000114 86 82            [24]  670 	mov	dpl,@r0
      000116 08               [12]  671 	inc	r0
      000117 86 83            [24]  672 	mov	dph,@r0
      000119 08               [12]  673 	inc	r0
      00011A 86 F0            [24]  674 	mov	b,@r0
      00011C EA               [12]  675 	mov	a,r2
      00011D 12r00r00         [24]  676 	lcall	__gptrput
      000120 A3               [24]  677 	inc	dptr
      000121 EB               [12]  678 	mov	a,r3
      000122 12r00r00         [24]  679 	lcall	__gptrput
                                    680 ;	walk.c:99: if (t->r < 0) t->r += ROWS;
      000125 A8*00            [24]  681 	mov	r0,_bp
      000127 08               [12]  682 	inc	r0
      000128 86 82            [24]  683 	mov	dpl,@r0
      00012A 08               [12]  684 	inc	r0
      00012B 86 83            [24]  685 	mov	dph,@r0
      00012D 08               [12]  686 	inc	r0
      00012E 86 F0            [24]  687 	mov	b,@r0
      000130 12r00r00         [24]  688 	lcall	__gptrget
      000133 FD               [12]  689 	mov	r5,a
      000134 A3               [24]  690 	inc	dptr
      000135 12r00r00         [24]  691 	lcall	__gptrget
      000138 FC               [12]  692 	mov	r4,a
      000139 EE               [12]  693 	mov	a,r6
      00013A 30 E7 1D         [24]  694 	jnb	acc.7,00104$
      00013D 74 30            [12]  695 	mov	a,#0x30
      00013F 2D               [12]  696 	add	a,r5
      000140 FF               [12]  697 	mov	r7,a
      000141 E4               [12]  698 	clr	a
      000142 3C               [12]  699 	addc	a,r4
      000143 FE               [12]  700 	mov	r6,a
      000144 A8*00            [24]  701 	mov	r0,_bp
      000146 08               [12]  702 	inc	r0
      000147 86 82            [24]  703 	mov	dpl,@r0
      000149 08               [12]  704 	inc	r0
      00014A 86 83            [24]  705 	mov	dph,@r0
      00014C 08               [12]  706 	inc	r0
      00014D 86 F0            [24]  707 	mov	b,@r0
      00014F EF               [12]  708 	mov	a,r7
      000150 12r00r00         [24]  709 	lcall	__gptrput
      000153 A3               [24]  710 	inc	dptr
      000154 EE               [12]  711 	mov	a,r6
      000155 12r00r00         [24]  712 	lcall	__gptrput
      000158 80 27            [24]  713 	sjmp	00105$
      00015A                        714 00104$:
                                    715 ;	walk.c:100: else if (t->r >= ROWS) t->r -= ROWS;
      00015A C3               [12]  716 	clr	c
      00015B ED               [12]  717 	mov	a,r5
      00015C 94 30            [12]  718 	subb	a,#0x30
      00015E EC               [12]  719 	mov	a,r4
      00015F 64 80            [12]  720 	xrl	a,#0x80
      000161 94 80            [12]  721 	subb	a,#0x80
      000163 40 1C            [24]  722 	jc	00105$
      000165 ED               [12]  723 	mov	a,r5
      000166 24 D0            [12]  724 	add	a,#0xd0
      000168 FD               [12]  725 	mov	r5,a
      000169 EC               [12]  726 	mov	a,r4
      00016A 34 FF            [12]  727 	addc	a,#0xff
      00016C FC               [12]  728 	mov	r4,a
      00016D A8*00            [24]  729 	mov	r0,_bp
      00016F 08               [12]  730 	inc	r0
      000170 86 82            [24]  731 	mov	dpl,@r0
      000172 08               [12]  732 	inc	r0
      000173 86 83            [24]  733 	mov	dph,@r0
      000175 08               [12]  734 	inc	r0
      000176 86 F0            [24]  735 	mov	b,@r0
      000178 ED               [12]  736 	mov	a,r5
      000179 12r00r00         [24]  737 	lcall	__gptrput
      00017C A3               [24]  738 	inc	dptr
      00017D EC               [12]  739 	mov	a,r4
      00017E 12r00r00         [24]  740 	lcall	__gptrput
      000181                        741 00105$:
                                    742 ;	walk.c:101: if (t->c < 0) t->c += COLS;
      000181 E5*00            [12]  743 	mov	a,_bp
      000183 24 08            [12]  744 	add	a,#0x08
      000185 F8               [12]  745 	mov	r0,a
      000186 86 82            [24]  746 	mov	dpl,@r0
      000188 08               [12]  747 	inc	r0
      000189 86 83            [24]  748 	mov	dph,@r0
      00018B 08               [12]  749 	inc	r0
      00018C 86 F0            [24]  750 	mov	b,@r0
      00018E 12r00r00         [24]  751 	lcall	__gptrget
      000191 A3               [24]  752 	inc	dptr
      000192 12r00r00         [24]  753 	lcall	__gptrget
      000195 30 E7 35         [24]  754 	jnb	acc.7,00109$
      000198 E5*00            [12]  755 	mov	a,_bp
      00019A 24 08            [12]  756 	add	a,#0x08
      00019C F8               [12]  757 	mov	r0,a
      00019D 86 82            [24]  758 	mov	dpl,@r0
      00019F 08               [12]  759 	inc	r0
      0001A0 86 83            [24]  760 	mov	dph,@r0
      0001A2 08               [12]  761 	inc	r0
      0001A3 86 F0            [24]  762 	mov	b,@r0
      0001A5 12r00r00         [24]  763 	lcall	__gptrget
      0001A8 FE               [12]  764 	mov	r6,a
      0001A9 A3               [24]  765 	inc	dptr
      0001AA 12r00r00         [24]  766 	lcall	__gptrget
      0001AD FF               [12]  767 	mov	r7,a
      0001AE 74 C9            [12]  768 	mov	a,#0xc9
      0001B0 2E               [12]  769 	add	a,r6
      0001B1 FE               [12]  770 	mov	r6,a
      0001B2 E4               [12]  771 	clr	a
      0001B3 3F               [12]  772 	addc	a,r7
      0001B4 FF               [12]  773 	mov	r7,a
      0001B5 E5*00            [12]  774 	mov	a,_bp
      0001B7 24 08            [12]  775 	add	a,#0x08
      0001B9 F8               [12]  776 	mov	r0,a
      0001BA 86 82            [24]  777 	mov	dpl,@r0
      0001BC 08               [12]  778 	inc	r0
      0001BD 86 83            [24]  779 	mov	dph,@r0
      0001BF 08               [12]  780 	inc	r0
      0001C0 86 F0            [24]  781 	mov	b,@r0
      0001C2 EE               [12]  782 	mov	a,r6
      0001C3 12r00r00         [24]  783 	lcall	__gptrput
      0001C6 A3               [24]  784 	inc	dptr
      0001C7 EF               [12]  785 	mov	a,r7
      0001C8 12r00r00         [24]  786 	lcall	__gptrput
      0001CB 80 55            [24]  787 	sjmp	00110$
      0001CD                        788 00109$:
                                    789 ;	walk.c:102: else if (t->c >= COLS) t->c -= COLS;
      0001CD E5*00            [12]  790 	mov	a,_bp
      0001CF 24 08            [12]  791 	add	a,#0x08
      0001D1 F8               [12]  792 	mov	r0,a
      0001D2 86 82            [24]  793 	mov	dpl,@r0
      0001D4 08               [12]  794 	inc	r0
      0001D5 86 83            [24]  795 	mov	dph,@r0
      0001D7 08               [12]  796 	inc	r0
      0001D8 86 F0            [24]  797 	mov	b,@r0
      0001DA 12r00r00         [24]  798 	lcall	__gptrget
      0001DD FE               [12]  799 	mov	r6,a
      0001DE A3               [24]  800 	inc	dptr
      0001DF 12r00r00         [24]  801 	lcall	__gptrget
      0001E2 FF               [12]  802 	mov	r7,a
      0001E3 C3               [12]  803 	clr	c
      0001E4 EE               [12]  804 	mov	a,r6
      0001E5 94 C9            [12]  805 	subb	a,#0xc9
      0001E7 EF               [12]  806 	mov	a,r7
      0001E8 64 80            [12]  807 	xrl	a,#0x80
      0001EA 94 80            [12]  808 	subb	a,#0x80
      0001EC 40 34            [24]  809 	jc	00110$
      0001EE E5*00            [12]  810 	mov	a,_bp
      0001F0 24 08            [12]  811 	add	a,#0x08
      0001F2 F8               [12]  812 	mov	r0,a
      0001F3 86 82            [24]  813 	mov	dpl,@r0
      0001F5 08               [12]  814 	inc	r0
      0001F6 86 83            [24]  815 	mov	dph,@r0
      0001F8 08               [12]  816 	inc	r0
      0001F9 86 F0            [24]  817 	mov	b,@r0
      0001FB 12r00r00         [24]  818 	lcall	__gptrget
      0001FE FE               [12]  819 	mov	r6,a
      0001FF A3               [24]  820 	inc	dptr
      000200 12r00r00         [24]  821 	lcall	__gptrget
      000203 FF               [12]  822 	mov	r7,a
      000204 EE               [12]  823 	mov	a,r6
      000205 24 37            [12]  824 	add	a,#0x37
      000207 FE               [12]  825 	mov	r6,a
      000208 EF               [12]  826 	mov	a,r7
      000209 34 FF            [12]  827 	addc	a,#0xff
      00020B FF               [12]  828 	mov	r7,a
      00020C E5*00            [12]  829 	mov	a,_bp
      00020E 24 08            [12]  830 	add	a,#0x08
      000210 F8               [12]  831 	mov	r0,a
      000211 86 82            [24]  832 	mov	dpl,@r0
      000213 08               [12]  833 	inc	r0
      000214 86 83            [24]  834 	mov	dph,@r0
      000216 08               [12]  835 	inc	r0
      000217 86 F0            [24]  836 	mov	b,@r0
      000219 EE               [12]  837 	mov	a,r6
      00021A 12r00r00         [24]  838 	lcall	__gptrput
      00021D A3               [24]  839 	inc	dptr
      00021E EF               [12]  840 	mov	a,r7
      00021F 12r00r00         [24]  841 	lcall	__gptrput
      000222                        842 00110$:
                                    843 ;	walk.c:104: if (g[t->r][t->c] == 0xaau) return 0u;
      000222 A8*00            [24]  844 	mov	r0,_bp
      000224 08               [12]  845 	inc	r0
      000225 86 82            [24]  846 	mov	dpl,@r0
      000227 08               [12]  847 	inc	r0
      000228 86 83            [24]  848 	mov	dph,@r0
      00022A 08               [12]  849 	inc	r0
      00022B 86 F0            [24]  850 	mov	b,@r0
      00022D 12r00r00         [24]  851 	lcall	__gptrget
      000230 FE               [12]  852 	mov	r6,a
      000231 A3               [24]  853 	inc	dptr
      000232 12r00r00         [24]  854 	lcall	__gptrget
      000235 FF               [12]  855 	mov	r7,a
      000236 C0 06            [24]  856 	push	ar6
      000238 C0 07            [24]  857 	push	ar7
      00023A 90 00 C9         [24]  858 	mov	dptr,#0x00c9
      00023D 12r00r00         [24]  859 	lcall	__mulint
      000240 AE 82            [24]  860 	mov	r6,dpl
      000242 AF 83            [24]  861 	mov	r7,dph
      000244 15 81            [12]  862 	dec	sp
      000246 15 81            [12]  863 	dec	sp
      000248 EE               [12]  864 	mov	a,r6
      000249 24r00            [12]  865 	add	a,#_g
      00024B FE               [12]  866 	mov	r6,a
      00024C EF               [12]  867 	mov	a,r7
      00024D 34s00            [12]  868 	addc	a,#(_g >> 8)
      00024F FF               [12]  869 	mov	r7,a
      000250 E5*00            [12]  870 	mov	a,_bp
      000252 24 08            [12]  871 	add	a,#0x08
      000254 F8               [12]  872 	mov	r0,a
      000255 86 82            [24]  873 	mov	dpl,@r0
      000257 08               [12]  874 	inc	r0
      000258 86 83            [24]  875 	mov	dph,@r0
      00025A 08               [12]  876 	inc	r0
      00025B 86 F0            [24]  877 	mov	b,@r0
      00025D 12r00r00         [24]  878 	lcall	__gptrget
      000260 FC               [12]  879 	mov	r4,a
      000261 A3               [24]  880 	inc	dptr
      000262 12r00r00         [24]  881 	lcall	__gptrget
      000265 FD               [12]  882 	mov	r5,a
      000266 EC               [12]  883 	mov	a,r4
      000267 2E               [12]  884 	add	a,r6
      000268 F5 82            [12]  885 	mov	dpl,a
      00026A ED               [12]  886 	mov	a,r5
      00026B 3F               [12]  887 	addc	a,r7
      00026C F5 83            [12]  888 	mov	dph,a
      00026E E0               [24]  889 	movx	a,@dptr
      00026F FF               [12]  890 	mov	r7,a
      000270 BF AA 05         [24]  891 	cjne	r7,#0xaa,00114$
      000273 75 82 00         [24]  892 	mov	dpl,#0x00
      000276 80 59            [24]  893 	sjmp	00116$
      000278                        894 00114$:
                                    895 ;	walk.c:105: else if (g[t->r][t->c] != 0x55u) bang();
      000278 A8*00            [24]  896 	mov	r0,_bp
      00027A 08               [12]  897 	inc	r0
      00027B 86 82            [24]  898 	mov	dpl,@r0
      00027D 08               [12]  899 	inc	r0
      00027E 86 83            [24]  900 	mov	dph,@r0
      000280 08               [12]  901 	inc	r0
      000281 86 F0            [24]  902 	mov	b,@r0
      000283 12r00r00         [24]  903 	lcall	__gptrget
      000286 FE               [12]  904 	mov	r6,a
      000287 A3               [24]  905 	inc	dptr
      000288 12r00r00         [24]  906 	lcall	__gptrget
      00028B FF               [12]  907 	mov	r7,a
      00028C C0 06            [24]  908 	push	ar6
      00028E C0 07            [24]  909 	push	ar7
      000290 90 00 C9         [24]  910 	mov	dptr,#0x00c9
      000293 12r00r00         [24]  911 	lcall	__mulint
      000296 AE 82            [24]  912 	mov	r6,dpl
      000298 AF 83            [24]  913 	mov	r7,dph
      00029A 15 81            [12]  914 	dec	sp
      00029C 15 81            [12]  915 	dec	sp
      00029E EE               [12]  916 	mov	a,r6
      00029F 24r00            [12]  917 	add	a,#_g
      0002A1 FE               [12]  918 	mov	r6,a
      0002A2 EF               [12]  919 	mov	a,r7
      0002A3 34s00            [12]  920 	addc	a,#(_g >> 8)
      0002A5 FF               [12]  921 	mov	r7,a
      0002A6 E5*00            [12]  922 	mov	a,_bp
      0002A8 24 08            [12]  923 	add	a,#0x08
      0002AA F8               [12]  924 	mov	r0,a
      0002AB 86 82            [24]  925 	mov	dpl,@r0
      0002AD 08               [12]  926 	inc	r0
      0002AE 86 83            [24]  927 	mov	dph,@r0
      0002B0 08               [12]  928 	inc	r0
      0002B1 86 F0            [24]  929 	mov	b,@r0
      0002B3 12r00r00         [24]  930 	lcall	__gptrget
      0002B6 FC               [12]  931 	mov	r4,a
      0002B7 A3               [24]  932 	inc	dptr
      0002B8 12r00r00         [24]  933 	lcall	__gptrget
      0002BB FD               [12]  934 	mov	r5,a
      0002BC EC               [12]  935 	mov	a,r4
      0002BD 2E               [12]  936 	add	a,r6
      0002BE F5 82            [12]  937 	mov	dpl,a
      0002C0 ED               [12]  938 	mov	a,r5
      0002C1 3F               [12]  939 	addc	a,r7
      0002C2 F5 83            [12]  940 	mov	dph,a
      0002C4 E0               [24]  941 	movx	a,@dptr
      0002C5 FF               [12]  942 	mov	r7,a
      0002C6 BF 55 02         [24]  943 	cjne	r7,#0x55,00148$
      0002C9 80 03            [24]  944 	sjmp	00115$
      0002CB                        945 00148$:
      0002CB 12r00r1D         [24]  946 	lcall	_bang
      0002CE                        947 00115$:
                                    948 ;	walk.c:107: return 1u;
      0002CE 75 82 01         [24]  949 	mov	dpl,#0x01
      0002D1                        950 00116$:
                                    951 ;	walk.c:108: }
      0002D1 85*00 81         [24]  952 	mov	sp,_bp
      0002D4 D0*00            [24]  953 	pop	_bp
      0002D6 22               [24]  954 	ret
                                    955 ;------------------------------------------------------------
                                    956 ;Allocation info for local variables in function 'walk'
                                    957 ;------------------------------------------------------------
                                    958 ;nstart                    Allocated to registers r5 r6 r7 
                                    959 ;cur                       Allocated to stack - _bp +7
                                    960 ;t                         Allocated to stack - _bp +11
                                    961 ;scramble                  Allocated to stack - _bp +15
                                    962 ;ti                        Allocated to registers r2 
                                    963 ;tj                        Allocated to registers r6 
                                    964 ;tx                        Allocated to stack - _bp +31
                                    965 ;j                         Allocated to stack - _bp +32
                                    966 ;sloc0                     Allocated to stack - _bp +1
                                    967 ;sloc1                     Allocated to stack - _bp +3
                                    968 ;sloc2                     Allocated to stack - _bp +35
                                    969 ;sloc3                     Allocated to stack - _bp +4
                                    970 ;------------------------------------------------------------
                                    971 ;	walk.c:110: static void walk(struct node *nstart) {
                                    972 ;	-----------------------------------------
                                    973 ;	 function walk
                                    974 ;	-----------------------------------------
      0002D7                        975 _walk:
      0002D7 C0*00            [24]  976 	push	_bp
      0002D9 E5 81            [12]  977 	mov	a,sp
      0002DB F5*00            [12]  978 	mov	_bp,a
      0002DD 24 20            [12]  979 	add	a,#0x20
      0002DF F5 81            [12]  980 	mov	sp,a
                                    981 ;	walk.c:115: if (!qadd(nstart)) bang();
      0002E1 AD 82            [24]  982 	mov	r5,dpl
      0002E3 AE 83            [24]  983 	mov	r6,dph
      0002E5 AF F0            [24]  984 	mov	r7,b
      0002E7 C0 07            [24]  985 	push	ar7
      0002E9 C0 06            [24]  986 	push	ar6
      0002EB C0 05            [24]  987 	push	ar5
      0002ED 12r0Ar40         [24]  988 	lcall	_qadd
      0002F0 E5 82            [12]  989 	mov	a,dpl
      0002F2 D0 05            [24]  990 	pop	ar5
      0002F4 D0 06            [24]  991 	pop	ar6
      0002F6 D0 07            [24]  992 	pop	ar7
      0002F8 70 0F            [24]  993 	jnz	00102$
      0002FA C0 07            [24]  994 	push	ar7
      0002FC C0 06            [24]  995 	push	ar6
      0002FE C0 05            [24]  996 	push	ar5
      000300 12r00r1D         [24]  997 	lcall	_bang
      000303 D0 05            [24]  998 	pop	ar5
      000305 D0 06            [24]  999 	pop	ar6
      000307 D0 07            [24] 1000 	pop	ar7
      000309                       1001 00102$:
                                   1002 ;	walk.c:116: g[nstart->r][nstart->c] = 0xaau;
      000309 8D 82            [24] 1003 	mov	dpl,r5
      00030B 8E 83            [24] 1004 	mov	dph,r6
      00030D 8F F0            [24] 1005 	mov	b,r7
      00030F 12r00r00         [24] 1006 	lcall	__gptrget
      000312 FB               [12] 1007 	mov	r3,a
      000313 A3               [24] 1008 	inc	dptr
      000314 12r00r00         [24] 1009 	lcall	__gptrget
      000317 FC               [12] 1010 	mov	r4,a
      000318 C0 07            [24] 1011 	push	ar7
      00031A C0 06            [24] 1012 	push	ar6
      00031C C0 05            [24] 1013 	push	ar5
      00031E C0 03            [24] 1014 	push	ar3
      000320 C0 04            [24] 1015 	push	ar4
      000322 90 00 C9         [24] 1016 	mov	dptr,#0x00c9
      000325 12r00r00         [24] 1017 	lcall	__mulint
      000328 AB 82            [24] 1018 	mov	r3,dpl
      00032A AC 83            [24] 1019 	mov	r4,dph
      00032C 15 81            [12] 1020 	dec	sp
      00032E 15 81            [12] 1021 	dec	sp
      000330 D0 05            [24] 1022 	pop	ar5
      000332 D0 06            [24] 1023 	pop	ar6
      000334 D0 07            [24] 1024 	pop	ar7
      000336 EB               [12] 1025 	mov	a,r3
      000337 24r00            [12] 1026 	add	a,#_g
      000339 FB               [12] 1027 	mov	r3,a
      00033A EC               [12] 1028 	mov	a,r4
      00033B 34s00            [12] 1029 	addc	a,#(_g >> 8)
      00033D FC               [12] 1030 	mov	r4,a
      00033E 74 02            [12] 1031 	mov	a,#0x02
      000340 2D               [12] 1032 	add	a,r5
      000341 FD               [12] 1033 	mov	r5,a
      000342 E4               [12] 1034 	clr	a
      000343 3E               [12] 1035 	addc	a,r6
      000344 FE               [12] 1036 	mov	r6,a
      000345 8D 82            [24] 1037 	mov	dpl,r5
      000347 8E 83            [24] 1038 	mov	dph,r6
      000349 8F F0            [24] 1039 	mov	b,r7
      00034B 12r00r00         [24] 1040 	lcall	__gptrget
      00034E FD               [12] 1041 	mov	r5,a
      00034F A3               [24] 1042 	inc	dptr
      000350 12r00r00         [24] 1043 	lcall	__gptrget
      000353 FE               [12] 1044 	mov	r6,a
      000354 ED               [12] 1045 	mov	a,r5
      000355 2B               [12] 1046 	add	a,r3
      000356 F5 82            [12] 1047 	mov	dpl,a
      000358 EE               [12] 1048 	mov	a,r6
      000359 3C               [12] 1049 	addc	a,r4
      00035A F5 83            [12] 1050 	mov	dph,a
      00035C 74 AA            [12] 1051 	mov	a,#0xaa
      00035E F0               [24] 1052 	movx	@dptr,a
                                   1053 ;	walk.c:118: process:
      00035F E5*00            [12] 1054 	mov	a,_bp
      000361 24 0F            [12] 1055 	add	a,#0x0f
      000363 FF               [12] 1056 	mov	r7,a
      000364 E5*00            [12] 1057 	mov	a,_bp
      000366 24 0B            [12] 1058 	add	a,#0x0b
      000368 F9               [12] 1059 	mov	r1,a
      000369 E5*00            [12] 1060 	mov	a,_bp
      00036B 24 03            [12] 1061 	add	a,#0x03
      00036D F8               [12] 1062 	mov	r0,a
      00036E A6 01            [24] 1063 	mov	@r0,ar1
      000370 74 02            [12] 1064 	mov	a,#0x02
      000372 29               [12] 1065 	add	a,r1
      000373 F8               [12] 1066 	mov	r0,a
      000374 E5*00            [12] 1067 	mov	a,_bp
      000376 24 07            [12] 1068 	add	a,#0x07
      000378 FD               [12] 1069 	mov	r5,a
      000379                       1070 00103$:
                                   1071 ;	walk.c:119: if (!qget(&cur)) goto term;
      000379 8D 02            [24] 1072 	mov	ar2,r5
      00037B 7B 00            [12] 1073 	mov	r3,#0x00
      00037D 7C 40            [12] 1074 	mov	r4,#0x40
      00037F 8A 82            [24] 1075 	mov	dpl,r2
      000381 8B 83            [24] 1076 	mov	dph,r3
      000383 8C F0            [24] 1077 	mov	b,r4
      000385 C0 07            [24] 1078 	push	ar7
      000387 C0 05            [24] 1079 	push	ar5
      000389 C0 01            [24] 1080 	push	ar1
      00038B C0 00            [24] 1081 	push	ar0
      00038D 12r0Br32         [24] 1082 	lcall	_qget
      000390 E5 82            [12] 1083 	mov	a,dpl
      000392 D0 00            [24] 1084 	pop	ar0
      000394 D0 01            [24] 1085 	pop	ar1
      000396 D0 05            [24] 1086 	pop	ar5
      000398 D0 07            [24] 1087 	pop	ar7
      00039A 70 03            [24] 1088 	jnz	00184$
      00039C 02r06r4E         [24] 1089 	ljmp	00119$
      00039F                       1090 00184$:
                                   1091 ;	walk.c:121: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      00039F 74 02            [12] 1092 	mov	a,#0x02
      0003A1 2D               [12] 1093 	add	a,r5
      0003A2 FC               [12] 1094 	mov	r4,a
      0003A3 C0 00            [24] 1095 	push	ar0
      0003A5 A8*00            [24] 1096 	mov	r0,_bp
      0003A7 08               [12] 1097 	inc	r0
      0003A8 C0 01            [24] 1098 	push	ar1
      0003AA A9 04            [24] 1099 	mov	r1,ar4
      0003AC E7               [12] 1100 	mov	a,@r1
      0003AD F6               [12] 1101 	mov	@r0,a
      0003AE 09               [12] 1102 	inc	r1
      0003AF E7               [12] 1103 	mov	a,@r1
      0003B0 08               [12] 1104 	inc	r0
      0003B1 F6               [12] 1105 	mov	@r0,a
      0003B2 D0 01            [24] 1106 	pop	ar1
      0003B4 A8 05            [24] 1107 	mov	r0,ar5
      0003B6 86 03            [24] 1108 	mov	ar3,@r0
      0003B8 08               [12] 1109 	inc	r0
      0003B9 86 06            [24] 1110 	mov	ar6,@r0
      0003BB D0 00            [24] 1111 	pop	ar0
      0003BD C0 07            [24] 1112 	push	ar7
      0003BF C0 05            [24] 1113 	push	ar5
      0003C1 C0 04            [24] 1114 	push	ar4
      0003C3 C0 01            [24] 1115 	push	ar1
      0003C5 C0 00            [24] 1116 	push	ar0
      0003C7 85 00 F0         [24] 1117 	mov	b,ar0
      0003CA A8*00            [24] 1118 	mov	r0,_bp
      0003CC 08               [12] 1119 	inc	r0
      0003CD E6               [12] 1120 	mov	a,@r0
      0003CE C0 E0            [24] 1121 	push	acc
      0003D0 08               [12] 1122 	inc	r0
      0003D1 E6               [12] 1123 	mov	a,@r0
      0003D2 C0 E0            [24] 1124 	push	acc
      0003D4 C0 03            [24] 1125 	push	ar3
      0003D6 C0 06            [24] 1126 	push	ar6
      0003D8 90rBCr72         [24] 1127 	mov	dptr,#_tp
      0003DB E0               [24] 1128 	movx	a,@dptr
      0003DC C0 E0            [24] 1129 	push	acc
      0003DE A3               [24] 1130 	inc	dptr
      0003DF E0               [24] 1131 	movx	a,@dptr
      0003E0 C0 E0            [24] 1132 	push	acc
      0003E2 90rBCr70         [24] 1133 	mov	dptr,#_hp
      0003E5 E0               [24] 1134 	movx	a,@dptr
      0003E6 C0 E0            [24] 1135 	push	acc
      0003E8 A3               [24] 1136 	inc	dptr
      0003E9 E0               [24] 1137 	movx	a,@dptr
      0003EA C0 E0            [24] 1138 	push	acc
      0003EC 74r0D            [12] 1139 	mov	a,#___str_1
      0003EE C0 E0            [24] 1140 	push	acc
      0003F0 74s00            [12] 1141 	mov	a,#(___str_1 >> 8)
      0003F2 C0 E0            [24] 1142 	push	acc
      0003F4 74 80            [12] 1143 	mov	a,#0x80
      0003F6 C0 E0            [24] 1144 	push	acc
      0003F8 12r00r00         [24] 1145 	lcall	_printf
      0003FB E5 81            [12] 1146 	mov	a,sp
      0003FD 24 F5            [12] 1147 	add	a,#0xf5
      0003FF F5 81            [12] 1148 	mov	sp,a
      000401 D0 00            [24] 1149 	pop	ar0
      000403 D0 01            [24] 1150 	pop	ar1
      000405 D0 04            [24] 1151 	pop	ar4
      000407 D0 05            [24] 1152 	pop	ar5
      000409 D0 07            [24] 1153 	pop	ar7
                                   1154 ;	walk.c:123: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      00040B C0 00            [24] 1155 	push	ar0
      00040D A8 04            [24] 1156 	mov	r0,ar4
      00040F 86 04            [24] 1157 	mov	ar4,@r0
      000411 08               [12] 1158 	inc	r0
      000412 86 06            [24] 1159 	mov	ar6,@r0
      000414 D0 00            [24] 1160 	pop	ar0
      000416 0C               [12] 1161 	inc	r4
      000417 BC 00 01         [24] 1162 	cjne	r4,#0x00,00185$
      00041A 0E               [12] 1163 	inc	r6
      00041B                       1164 00185$:
      00041B C0 00            [24] 1165 	push	ar0
      00041D A8 05            [24] 1166 	mov	r0,ar5
      00041F 86 02            [24] 1167 	mov	ar2,@r0
      000421 08               [12] 1168 	inc	r0
      000422 86 03            [24] 1169 	mov	ar3,@r0
      000424 D0 00            [24] 1170 	pop	ar0
      000426 74 04            [12] 1171 	mov	a,#0x04
      000428 2A               [12] 1172 	add	a,r2
      000429 FA               [12] 1173 	mov	r2,a
      00042A E4               [12] 1174 	clr	a
      00042B 3B               [12] 1175 	addc	a,r3
      00042C FB               [12] 1176 	mov	r3,a
      00042D C0 07            [24] 1177 	push	ar7
      00042F C0 05            [24] 1178 	push	ar5
      000431 C0 01            [24] 1179 	push	ar1
      000433 C0 00            [24] 1180 	push	ar0
      000435 C0 04            [24] 1181 	push	ar4
      000437 C0 06            [24] 1182 	push	ar6
      000439 C0 02            [24] 1183 	push	ar2
      00043B C0 03            [24] 1184 	push	ar3
      00043D 74r24            [12] 1185 	mov	a,#___str_2
      00043F C0 E0            [24] 1186 	push	acc
      000441 74s00            [12] 1187 	mov	a,#(___str_2 >> 8)
      000443 C0 E0            [24] 1188 	push	acc
      000445 74 80            [12] 1189 	mov	a,#0x80
      000447 C0 E0            [24] 1190 	push	acc
      000449 12r00r00         [24] 1191 	lcall	_printf
      00044C E5 81            [12] 1192 	mov	a,sp
      00044E 24 F9            [12] 1193 	add	a,#0xf9
      000450 F5 81            [12] 1194 	mov	sp,a
                                   1195 ;	walk.c:124: flashOE(OE76_MASK6);
      000452 75 82 40         [24] 1196 	mov	dpl,#0x40
      000455 12r00r29         [24] 1197 	lcall	_flashOE
      000458 D0 00            [24] 1198 	pop	ar0
      00045A D0 01            [24] 1199 	pop	ar1
      00045C D0 05            [24] 1200 	pop	ar5
      00045E D0 07            [24] 1201 	pop	ar7
                                   1202 ;	walk.c:126: for (j = 0u; j < NMAX; j++)
      000460 7E 00            [12] 1203 	mov	r6,#0x00
                                   1204 ;	walk.c:150: return;
                                   1205 ;	walk.c:126: for (j = 0u; j < NMAX; j++)
      000462                       1206 00120$:
                                   1207 ;	walk.c:127: scramble[j] = j;
      000462 EE               [12] 1208 	mov	a,r6
      000463 2F               [12] 1209 	add	a,r7
      000464 C0 00            [24] 1210 	push	ar0
      000466 F8               [12] 1211 	mov	r0,a
      000467 A6 06            [24] 1212 	mov	@r0,ar6
      000469 D0 00            [24] 1213 	pop	ar0
                                   1214 ;	walk.c:126: for (j = 0u; j < NMAX; j++)
      00046B 0E               [12] 1215 	inc	r6
      00046C BE 10 00         [24] 1216 	cjne	r6,#0x10,00186$
      00046F                       1217 00186$:
      00046F 40 F1            [24] 1218 	jc	00120$
                                   1219 ;	walk.c:129: do ti = (uint8_t)(rand() % NMAX);
      000471 7C 00            [12] 1220 	mov	r4,#0x00
      000473                       1221 00107$:
      000473 C0 07            [24] 1222 	push	ar7
      000475 C0 05            [24] 1223 	push	ar5
      000477 C0 04            [24] 1224 	push	ar4
      000479 C0 01            [24] 1225 	push	ar1
      00047B C0 00            [24] 1226 	push	ar0
      00047D 12r00r00         [24] 1227 	lcall	_rand
      000480 AA 82            [24] 1228 	mov	r2,dpl
      000482 D0 00            [24] 1229 	pop	ar0
      000484 D0 01            [24] 1230 	pop	ar1
      000486 D0 04            [24] 1231 	pop	ar4
      000488 D0 05            [24] 1232 	pop	ar5
      00048A D0 07            [24] 1233 	pop	ar7
      00048C 53 02 0F         [24] 1234 	anl	ar2,#0x0f
      00048F 7B 00            [12] 1235 	mov	r3,#0x00
                                   1236 ;	walk.c:130: while (ti == j);
      000491 EA               [12] 1237 	mov	a,r2
      000492 B5 04 02         [24] 1238 	cjne	a,ar4,00188$
      000495 80 DC            [24] 1239 	sjmp	00107$
      000497                       1240 00188$:
                                   1241 ;	walk.c:131: do tj = (uint8_t)(rand() % NMAX);
      000497                       1242 00110$:
      000497 C0 05            [24] 1243 	push	ar5
      000499 C0 07            [24] 1244 	push	ar7
      00049B C0 04            [24] 1245 	push	ar4
      00049D C0 02            [24] 1246 	push	ar2
      00049F C0 01            [24] 1247 	push	ar1
      0004A1 C0 00            [24] 1248 	push	ar0
      0004A3 12r00r00         [24] 1249 	lcall	_rand
      0004A6 AB 82            [24] 1250 	mov	r3,dpl
      0004A8 D0 00            [24] 1251 	pop	ar0
      0004AA D0 01            [24] 1252 	pop	ar1
      0004AC D0 02            [24] 1253 	pop	ar2
      0004AE D0 04            [24] 1254 	pop	ar4
      0004B0 D0 07            [24] 1255 	pop	ar7
      0004B2 53 03 0F         [24] 1256 	anl	ar3,#0x0f
      0004B5 8B 06            [24] 1257 	mov	ar6,r3
                                   1258 ;	walk.c:132: while (ti == tj);
      0004B7 EA               [12] 1259 	mov	a,r2
      0004B8 B5 06 04         [24] 1260 	cjne	a,ar6,00189$
      0004BB D0 05            [24] 1261 	pop	ar5
      0004BD 80 D8            [24] 1262 	sjmp	00110$
      0004BF                       1263 00189$:
                                   1264 ;	walk.c:133: tx = scramble[ti];
      0004BF EA               [12] 1265 	mov	a,r2
      0004C0 2F               [12] 1266 	add	a,r7
      0004C1 FB               [12] 1267 	mov	r3,a
      0004C2 C0 00            [24] 1268 	push	ar0
      0004C4 E5*00            [12] 1269 	mov	a,_bp
      0004C6 24 1F            [12] 1270 	add	a,#0x1f
      0004C8 F8               [12] 1271 	mov	r0,a
      0004C9 C0 01            [24] 1272 	push	ar1
      0004CB A9 03            [24] 1273 	mov	r1,ar3
      0004CD E7               [12] 1274 	mov	a,@r1
      0004CE F6               [12] 1275 	mov	@r0,a
                                   1276 ;	walk.c:134: scramble[ti] = scramble[tj];
      0004CF EE               [12] 1277 	mov	a,r6
      0004D0 2F               [12] 1278 	add	a,r7
      0004D1 FD               [12] 1279 	mov	r5,a
      0004D2 A8 05            [24] 1280 	mov	r0,ar5
      0004D4 86 02            [24] 1281 	mov	ar2,@r0
      0004D6 A8 03            [24] 1282 	mov	r0,ar3
      0004D8 A6 02            [24] 1283 	mov	@r0,ar2
                                   1284 ;	walk.c:135: scramble[tj] = tx;
      0004DA A8 05            [24] 1285 	mov	r0,ar5
      0004DC E5*00            [12] 1286 	mov	a,_bp
      0004DE 24 1F            [12] 1287 	add	a,#0x1f
      0004E0 F9               [12] 1288 	mov	r1,a
      0004E1 E7               [12] 1289 	mov	a,@r1
      0004E2 F6               [12] 1290 	mov	@r0,a
      0004E3 D0 00            [24] 1291 	pop	ar0
      0004E5 D0 01            [24] 1292 	pop	ar1
                                   1293 ;	walk.c:128: for (j = 0u; j < NMAX; j++) {
      0004E7 0C               [12] 1294 	inc	r4
      0004E8 BC 10 00         [24] 1295 	cjne	r4,#0x10,00190$
      0004EB                       1296 00190$:
      0004EB D0 05            [24] 1297 	pop	ar5
      0004ED 40 84            [24] 1298 	jc	00107$
                                   1299 ;	walk.c:138: for (j = 0u; j < NMAX; j++)
      0004EF C0 00            [24] 1300 	push	ar0
      0004F1 A8*00            [24] 1301 	mov	r0,_bp
      0004F3 08               [12] 1302 	inc	r0
      0004F4 A6 05            [24] 1303 	mov	@r0,ar5
      0004F6 E5*00            [12] 1304 	mov	a,_bp
      0004F8 24 20            [12] 1305 	add	a,#0x20
      0004FA F8               [12] 1306 	mov	r0,a
      0004FB 76 00            [12] 1307 	mov	@r0,#0x00
      0004FD D0 00            [24] 1308 	pop	ar0
      0004FF                       1309 00124$:
                                   1310 ;	walk.c:139: if (update(&t, &cur, scramble[j])) {
      0004FF C0 05            [24] 1311 	push	ar5
      000501 C0 00            [24] 1312 	push	ar0
      000503 E5*00            [12] 1313 	mov	a,_bp
      000505 24 20            [12] 1314 	add	a,#0x20
      000507 F8               [12] 1315 	mov	r0,a
      000508 E6               [12] 1316 	mov	a,@r0
      000509 2F               [12] 1317 	add	a,r7
      00050A FA               [12] 1318 	mov	r2,a
      00050B A8 02            [24] 1319 	mov	r0,ar2
      00050D 86 03            [24] 1320 	mov	ar3,@r0
      00050F A8*00            [24] 1321 	mov	r0,_bp
      000511 08               [12] 1322 	inc	r0
      000512 C0 01            [24] 1323 	push	ar1
      000514 E5*00            [12] 1324 	mov	a,_bp
      000516 24 04            [12] 1325 	add	a,#0x04
      000518 F9               [12] 1326 	mov	r1,a
      000519 E6               [12] 1327 	mov	a,@r0
      00051A F7               [12] 1328 	mov	@r1,a
      00051B 09               [12] 1329 	inc	r1
      00051C 77 00            [12] 1330 	mov	@r1,#0x00
      00051E 09               [12] 1331 	inc	r1
      00051F 77 40            [12] 1332 	mov	@r1,#0x40
      000521 D0 01            [24] 1333 	pop	ar1
      000523 D0 00            [24] 1334 	pop	ar0
      000525 89 02            [24] 1335 	mov	ar2,r1
      000527 7C 00            [12] 1336 	mov	r4,#0x00
      000529 7E 40            [12] 1337 	mov	r6,#0x40
      00052B C0 07            [24] 1338 	push	ar7
      00052D C0 05            [24] 1339 	push	ar5
      00052F C0 01            [24] 1340 	push	ar1
      000531 C0 00            [24] 1341 	push	ar0
      000533 C0 03            [24] 1342 	push	ar3
      000535 85 00 F0         [24] 1343 	mov	b,ar0
      000538 E5*00            [12] 1344 	mov	a,_bp
      00053A 24 04            [12] 1345 	add	a,#0x04
      00053C F8               [12] 1346 	mov	r0,a
      00053D E6               [12] 1347 	mov	a,@r0
      00053E C0 E0            [24] 1348 	push	acc
      000540 08               [12] 1349 	inc	r0
      000541 E6               [12] 1350 	mov	a,@r0
      000542 C0 E0            [24] 1351 	push	acc
      000544 08               [12] 1352 	inc	r0
      000545 E6               [12] 1353 	mov	a,@r0
      000546 C0 E0            [24] 1354 	push	acc
      000548 8A 82            [24] 1355 	mov	dpl,r2
      00054A 8C 83            [24] 1356 	mov	dph,r4
      00054C 8E F0            [24] 1357 	mov	b,r6
      00054E 12r00r4A         [24] 1358 	lcall	_update
      000551 AE 82            [24] 1359 	mov	r6,dpl
      000553 E5 81            [12] 1360 	mov	a,sp
      000555 24 FC            [12] 1361 	add	a,#0xfc
      000557 F5 81            [12] 1362 	mov	sp,a
      000559 D0 00            [24] 1363 	pop	ar0
      00055B D0 01            [24] 1364 	pop	ar1
      00055D D0 05            [24] 1365 	pop	ar5
      00055F D0 07            [24] 1366 	pop	ar7
      000561 D0 05            [24] 1367 	pop	ar5
      000563 EE               [12] 1368 	mov	a,r6
      000564 70 03            [24] 1369 	jnz	00192$
      000566 02r06r34         [24] 1370 	ljmp	00125$
      000569                       1371 00192$:
                                   1372 ;	walk.c:140: if (!qadd(&t)) bang();
      000569 C0 00            [24] 1373 	push	ar0
      00056B E5*00            [12] 1374 	mov	a,_bp
      00056D 24 03            [12] 1375 	add	a,#0x03
      00056F F8               [12] 1376 	mov	r0,a
      000570 86 03            [24] 1377 	mov	ar3,@r0
      000572 7C 00            [12] 1378 	mov	r4,#0x00
      000574 7E 40            [12] 1379 	mov	r6,#0x40
      000576 D0 00            [24] 1380 	pop	ar0
      000578 8B 82            [24] 1381 	mov	dpl,r3
      00057A 8C 83            [24] 1382 	mov	dph,r4
      00057C 8E F0            [24] 1383 	mov	b,r6
      00057E C0 07            [24] 1384 	push	ar7
      000580 C0 05            [24] 1385 	push	ar5
      000582 C0 01            [24] 1386 	push	ar1
      000584 C0 00            [24] 1387 	push	ar0
      000586 12r0Ar40         [24] 1388 	lcall	_qadd
      000589 E5 82            [12] 1389 	mov	a,dpl
      00058B D0 00            [24] 1390 	pop	ar0
      00058D D0 01            [24] 1391 	pop	ar1
      00058F D0 05            [24] 1392 	pop	ar5
      000591 D0 07            [24] 1393 	pop	ar7
      000593 70 13            [24] 1394 	jnz	00115$
      000595 C0 07            [24] 1395 	push	ar7
      000597 C0 05            [24] 1396 	push	ar5
      000599 C0 01            [24] 1397 	push	ar1
      00059B C0 00            [24] 1398 	push	ar0
      00059D 12r00r1D         [24] 1399 	lcall	_bang
      0005A0 D0 00            [24] 1400 	pop	ar0
      0005A2 D0 01            [24] 1401 	pop	ar1
      0005A4 D0 05            [24] 1402 	pop	ar5
      0005A6 D0 07            [24] 1403 	pop	ar7
      0005A8                       1404 00115$:
                                   1405 ;	walk.c:141: g[t.r][t.c] = 0xaau;
      0005A8 87 04            [24] 1406 	mov	ar4,@r1
      0005AA 09               [12] 1407 	inc	r1
      0005AB 87 06            [24] 1408 	mov	ar6,@r1
      0005AD 19               [12] 1409 	dec	r1
      0005AE C0 07            [24] 1410 	push	ar7
      0005B0 C0 05            [24] 1411 	push	ar5
      0005B2 C0 01            [24] 1412 	push	ar1
      0005B4 C0 00            [24] 1413 	push	ar0
      0005B6 C0 04            [24] 1414 	push	ar4
      0005B8 C0 06            [24] 1415 	push	ar6
      0005BA 90 00 C9         [24] 1416 	mov	dptr,#0x00c9
      0005BD 12r00r00         [24] 1417 	lcall	__mulint
      0005C0 AC 82            [24] 1418 	mov	r4,dpl
      0005C2 AE 83            [24] 1419 	mov	r6,dph
      0005C4 15 81            [12] 1420 	dec	sp
      0005C6 15 81            [12] 1421 	dec	sp
      0005C8 D0 00            [24] 1422 	pop	ar0
      0005CA D0 01            [24] 1423 	pop	ar1
      0005CC D0 05            [24] 1424 	pop	ar5
      0005CE D0 07            [24] 1425 	pop	ar7
      0005D0 EC               [12] 1426 	mov	a,r4
      0005D1 24r00            [12] 1427 	add	a,#_g
      0005D3 FC               [12] 1428 	mov	r4,a
      0005D4 EE               [12] 1429 	mov	a,r6
      0005D5 34s00            [12] 1430 	addc	a,#(_g >> 8)
      0005D7 FE               [12] 1431 	mov	r6,a
      0005D8 86 02            [24] 1432 	mov	ar2,@r0
      0005DA 08               [12] 1433 	inc	r0
      0005DB 86 03            [24] 1434 	mov	ar3,@r0
      0005DD 18               [12] 1435 	dec	r0
      0005DE EA               [12] 1436 	mov	a,r2
      0005DF 2C               [12] 1437 	add	a,r4
      0005E0 F5 82            [12] 1438 	mov	dpl,a
      0005E2 EB               [12] 1439 	mov	a,r3
      0005E3 3E               [12] 1440 	addc	a,r6
      0005E4 F5 83            [12] 1441 	mov	dph,a
      0005E6 74 AA            [12] 1442 	mov	a,#0xaa
      0005E8 F0               [24] 1443 	movx	@dptr,a
                                   1444 ;	walk.c:143: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      0005E9 86 04            [24] 1445 	mov	ar4,@r0
      0005EB 08               [12] 1446 	inc	r0
      0005EC 86 06            [24] 1447 	mov	ar6,@r0
      0005EE 18               [12] 1448 	dec	r0
      0005EF 0C               [12] 1449 	inc	r4
      0005F0 BC 00 01         [24] 1450 	cjne	r4,#0x00,00194$
      0005F3 0E               [12] 1451 	inc	r6
      0005F4                       1452 00194$:
      0005F4 87 02            [24] 1453 	mov	ar2,@r1
      0005F6 09               [12] 1454 	inc	r1
      0005F7 87 03            [24] 1455 	mov	ar3,@r1
      0005F9 19               [12] 1456 	dec	r1
      0005FA 74 04            [12] 1457 	mov	a,#0x04
      0005FC 2A               [12] 1458 	add	a,r2
      0005FD FA               [12] 1459 	mov	r2,a
      0005FE E4               [12] 1460 	clr	a
      0005FF 3B               [12] 1461 	addc	a,r3
      000600 FB               [12] 1462 	mov	r3,a
      000601 C0 07            [24] 1463 	push	ar7
      000603 C0 05            [24] 1464 	push	ar5
      000605 C0 01            [24] 1465 	push	ar1
      000607 C0 00            [24] 1466 	push	ar0
      000609 C0 04            [24] 1467 	push	ar4
      00060B C0 06            [24] 1468 	push	ar6
      00060D C0 02            [24] 1469 	push	ar2
      00060F C0 03            [24] 1470 	push	ar3
      000611 74r2E            [12] 1471 	mov	a,#___str_3
      000613 C0 E0            [24] 1472 	push	acc
      000615 74s00            [12] 1473 	mov	a,#(___str_3 >> 8)
      000617 C0 E0            [24] 1474 	push	acc
      000619 74 80            [12] 1475 	mov	a,#0x80
      00061B C0 E0            [24] 1476 	push	acc
      00061D 12r00r00         [24] 1477 	lcall	_printf
      000620 E5 81            [12] 1478 	mov	a,sp
      000622 24 F9            [12] 1479 	add	a,#0xf9
      000624 F5 81            [12] 1480 	mov	sp,a
                                   1481 ;	walk.c:144: flashOE(OE76_MASK7);
      000626 75 82 80         [24] 1482 	mov	dpl,#0x80
      000629 12r00r29         [24] 1483 	lcall	_flashOE
      00062C D0 00            [24] 1484 	pop	ar0
      00062E D0 01            [24] 1485 	pop	ar1
      000630 D0 05            [24] 1486 	pop	ar5
      000632 D0 07            [24] 1487 	pop	ar7
      000634                       1488 00125$:
                                   1489 ;	walk.c:138: for (j = 0u; j < NMAX; j++)
      000634 C0 00            [24] 1490 	push	ar0
      000636 E5*00            [12] 1491 	mov	a,_bp
      000638 24 20            [12] 1492 	add	a,#0x20
      00063A F8               [12] 1493 	mov	r0,a
      00063B 06               [12] 1494 	inc	@r0
      00063C E5*00            [12] 1495 	mov	a,_bp
      00063E 24 20            [12] 1496 	add	a,#0x20
      000640 F8               [12] 1497 	mov	r0,a
      000641 B6 10 00         [24] 1498 	cjne	@r0,#0x10,00195$
      000644                       1499 00195$:
      000644 D0 00            [24] 1500 	pop	ar0
      000646 50 03            [24] 1501 	jnc	00196$
      000648 02r04rFF         [24] 1502 	ljmp	00124$
      00064B                       1503 00196$:
                                   1504 ;	walk.c:147: goto process;
      00064B 02r03r79         [24] 1505 	ljmp	00103$
                                   1506 ;	walk.c:149: term:
      00064E                       1507 00119$:
                                   1508 ;	walk.c:150: return;
                                   1509 ;	walk.c:151: }
      00064E 85*00 81         [24] 1510 	mov	sp,_bp
      000651 D0*00            [24] 1511 	pop	_bp
      000653 22               [24] 1512 	ret
                                   1513 ;------------------------------------------------------------
                                   1514 ;Allocation info for local variables in function 'main'
                                   1515 ;------------------------------------------------------------
                                   1516 ;R                         Allocated to stack - _bp +9
                                   1517 ;initial                   Allocated to stack - _bp +11
                                   1518 ;N                         Allocated to stack - _bp +5
                                   1519 ;i                         Allocated to stack - _bp +7
                                   1520 ;j                         Allocated to registers r2 r6 
                                   1521 ;sloc0                     Allocated to stack - _bp +1
                                   1522 ;sloc1                     Allocated to stack - _bp +3
                                   1523 ;sloc2                     Allocated to stack - _bp +17
                                   1524 ;------------------------------------------------------------
                                   1525 ;	walk.c:153: int main(void) {
                                   1526 ;	-----------------------------------------
                                   1527 ;	 function main
                                   1528 ;	-----------------------------------------
      000654                       1529 _main:
      000654 C0*00            [24] 1530 	push	_bp
      000656 E5 81            [12] 1531 	mov	a,sp
      000658 F5*00            [12] 1532 	mov	_bp,a
      00065A 24 0E            [12] 1533 	add	a,#0x0e
      00065C F5 81            [12] 1534 	mov	sp,a
                                   1535 ;	walk.c:159: i0 = 1u;
      00065E 78r00            [12] 1536 	mov	r0,#_i0
      000660 76 01            [12] 1537 	mov	@r0,#0x01
                                   1538 ;	walk.c:161: P1_7 = 1;
                                   1539 ;	assignBit
      000662 D2 97            [12] 1540 	setb	_P1_7
                                   1541 ;	walk.c:162: IT0 = 1;
                                   1542 ;	assignBit
      000664 D2 88            [12] 1543 	setb	_IT0
                                   1544 ;	walk.c:163: EX0 = 1;
                                   1545 ;	assignBit
      000666 D2 A8            [12] 1546 	setb	_EX0
                                   1547 ;	walk.c:164: EA = 1;
                                   1548 ;	assignBit
      000668 D2 AF            [12] 1549 	setb	_EA
                                   1550 ;	walk.c:166: srand(*R);
      00066A 90 FF FE         [24] 1551 	mov	dptr,#0xfffe
      00066D E0               [24] 1552 	movx	a,@dptr
      00066E FE               [12] 1553 	mov	r6,a
      00066F A3               [24] 1554 	inc	dptr
      000670 E0               [24] 1555 	movx	a,@dptr
      000671 FF               [12] 1556 	mov	r7,a
      000672 8E 82            [24] 1557 	mov	dpl,r6
      000674 8F 83            [24] 1558 	mov	dph,r7
      000676 12r00r00         [24] 1559 	lcall	_srand
                                   1560 ;	walk.c:167: qinit();
      000679 12r0Ar32         [24] 1561 	lcall	_qinit
                                   1562 ;	walk.c:169: puts("\033[2J\033[?25l");
      00067C 90r00r38         [24] 1563 	mov	dptr,#___str_4
      00067F 75 F0 80         [24] 1564 	mov	b,#0x80
      000682 12r00r00         [24] 1565 	lcall	_puts
                                   1566 ;	walk.c:171: while (i0) {
      000685 E5*00            [12] 1567 	mov	a,_bp
      000687 24 0B            [12] 1568 	add	a,#0x0b
      000689 F9               [12] 1569 	mov	r1,a
      00068A FF               [12] 1570 	mov	r7,a
      00068B E5*00            [12] 1571 	mov	a,_bp
      00068D 24 05            [12] 1572 	add	a,#0x05
      00068F F8               [12] 1573 	mov	r0,a
      000690 E4               [12] 1574 	clr	a
      000691 F6               [12] 1575 	mov	@r0,a
      000692 08               [12] 1576 	inc	r0
      000693 F6               [12] 1577 	mov	@r0,a
      000694                       1578 00108$:
      000694 78r00            [12] 1579 	mov	r0,#_i0
      000696 E6               [12] 1580 	mov	a,@r0
      000697 70 03            [24] 1581 	jnz	00181$
      000699 02r0Ar1B         [24] 1582 	ljmp	00110$
      00069C                       1583 00181$:
                                   1584 ;	walk.c:172: for (i = 0; i < ROWS; i++)
      00069C 7B 00            [12] 1585 	mov	r3,#0x00
      00069E 7C 00            [12] 1586 	mov	r4,#0x00
      0006A0 A8*00            [24] 1587 	mov	r0,_bp
      0006A2 08               [12] 1588 	inc	r0
      0006A3 E4               [12] 1589 	clr	a
      0006A4 F6               [12] 1590 	mov	@r0,a
      0006A5 08               [12] 1591 	inc	r0
      0006A6 F6               [12] 1592 	mov	@r0,a
                                   1593 ;	walk.c:173: for (j = 0; j < COLS; j++)
      0006A7                       1594 00124$:
      0006A7 A8*00            [24] 1595 	mov	r0,_bp
      0006A9 08               [12] 1596 	inc	r0
      0006AA C0 01            [24] 1597 	push	ar1
      0006AC E5*00            [12] 1598 	mov	a,_bp
      0006AE 24 03            [12] 1599 	add	a,#0x03
      0006B0 F9               [12] 1600 	mov	r1,a
      0006B1 E6               [12] 1601 	mov	a,@r0
      0006B2 24r00            [12] 1602 	add	a,#_g
      0006B4 F7               [12] 1603 	mov	@r1,a
      0006B5 08               [12] 1604 	inc	r0
      0006B6 E6               [12] 1605 	mov	a,@r0
      0006B7 34s00            [12] 1606 	addc	a,#(_g >> 8)
      0006B9 09               [12] 1607 	inc	r1
      0006BA F7               [12] 1608 	mov	@r1,a
      0006BB D0 01            [24] 1609 	pop	ar1
      0006BD 7A 00            [12] 1610 	mov	r2,#0x00
      0006BF 7E 00            [12] 1611 	mov	r6,#0x00
      0006C1                       1612 00111$:
                                   1613 ;	walk.c:174: g[i][j] = 0x55u;
      0006C1 E5*00            [12] 1614 	mov	a,_bp
      0006C3 24 03            [12] 1615 	add	a,#0x03
      0006C5 F8               [12] 1616 	mov	r0,a
      0006C6 EA               [12] 1617 	mov	a,r2
      0006C7 26               [12] 1618 	add	a,@r0
      0006C8 F5 82            [12] 1619 	mov	dpl,a
      0006CA EE               [12] 1620 	mov	a,r6
      0006CB 08               [12] 1621 	inc	r0
      0006CC 36               [12] 1622 	addc	a,@r0
      0006CD F5 83            [12] 1623 	mov	dph,a
      0006CF 74 55            [12] 1624 	mov	a,#0x55
      0006D1 F0               [24] 1625 	movx	@dptr,a
                                   1626 ;	walk.c:173: for (j = 0; j < COLS; j++)
      0006D2 0A               [12] 1627 	inc	r2
      0006D3 BA 00 01         [24] 1628 	cjne	r2,#0x00,00182$
      0006D6 0E               [12] 1629 	inc	r6
      0006D7                       1630 00182$:
      0006D7 C3               [12] 1631 	clr	c
      0006D8 EA               [12] 1632 	mov	a,r2
      0006D9 94 C9            [12] 1633 	subb	a,#0xc9
      0006DB EE               [12] 1634 	mov	a,r6
      0006DC 64 80            [12] 1635 	xrl	a,#0x80
      0006DE 94 80            [12] 1636 	subb	a,#0x80
      0006E0 40 DF            [24] 1637 	jc	00111$
                                   1638 ;	walk.c:172: for (i = 0; i < ROWS; i++)
      0006E2 A8*00            [24] 1639 	mov	r0,_bp
      0006E4 08               [12] 1640 	inc	r0
      0006E5 74 C9            [12] 1641 	mov	a,#0xc9
      0006E7 26               [12] 1642 	add	a,@r0
      0006E8 F6               [12] 1643 	mov	@r0,a
      0006E9 E4               [12] 1644 	clr	a
      0006EA 08               [12] 1645 	inc	r0
      0006EB 36               [12] 1646 	addc	a,@r0
      0006EC F6               [12] 1647 	mov	@r0,a
      0006ED 0B               [12] 1648 	inc	r3
      0006EE BB 00 01         [24] 1649 	cjne	r3,#0x00,00184$
      0006F1 0C               [12] 1650 	inc	r4
      0006F2                       1651 00184$:
      0006F2 C3               [12] 1652 	clr	c
      0006F3 EB               [12] 1653 	mov	a,r3
      0006F4 94 30            [12] 1654 	subb	a,#0x30
      0006F6 EC               [12] 1655 	mov	a,r4
      0006F7 64 80            [12] 1656 	xrl	a,#0x80
      0006F9 94 80            [12] 1657 	subb	a,#0x80
      0006FB 40 AA            [24] 1658 	jc	00124$
                                   1659 ;	walk.c:176: initial.r = rand() % ROWS;
      0006FD E5*00            [12] 1660 	mov	a,_bp
      0006FF 24 0B            [12] 1661 	add	a,#0x0b
      000701 F8               [12] 1662 	mov	r0,a
      000702 C0 07            [24] 1663 	push	ar7
      000704 C0 01            [24] 1664 	push	ar1
      000706 C0 00            [24] 1665 	push	ar0
      000708 12r00r00         [24] 1666 	lcall	_rand
      00070B AD 82            [24] 1667 	mov	r5,dpl
      00070D AE 83            [24] 1668 	mov	r6,dph
      00070F 74 30            [12] 1669 	mov	a,#0x30
      000711 C0 E0            [24] 1670 	push	acc
      000713 E4               [12] 1671 	clr	a
      000714 C0 E0            [24] 1672 	push	acc
      000716 8D 82            [24] 1673 	mov	dpl,r5
      000718 8E 83            [24] 1674 	mov	dph,r6
      00071A 12r00r00         [24] 1675 	lcall	__modsint
      00071D AD 82            [24] 1676 	mov	r5,dpl
      00071F AE 83            [24] 1677 	mov	r6,dph
      000721 15 81            [12] 1678 	dec	sp
      000723 15 81            [12] 1679 	dec	sp
      000725 D0 00            [24] 1680 	pop	ar0
      000727 D0 01            [24] 1681 	pop	ar1
      000729 A6 05            [24] 1682 	mov	@r0,ar5
      00072B 08               [12] 1683 	inc	r0
      00072C A6 06            [24] 1684 	mov	@r0,ar6
      00072E 18               [12] 1685 	dec	r0
                                   1686 ;	walk.c:177: initial.c = rand() % COLS;
      00072F 74 02            [12] 1687 	mov	a,#0x02
      000731 29               [12] 1688 	add	a,r1
      000732 F8               [12] 1689 	mov	r0,a
      000733 C0 01            [24] 1690 	push	ar1
      000735 C0 00            [24] 1691 	push	ar0
      000737 12r00r00         [24] 1692 	lcall	_rand
      00073A AD 82            [24] 1693 	mov	r5,dpl
      00073C AE 83            [24] 1694 	mov	r6,dph
      00073E 74 C9            [12] 1695 	mov	a,#0xc9
      000740 C0 E0            [24] 1696 	push	acc
      000742 E4               [12] 1697 	clr	a
      000743 C0 E0            [24] 1698 	push	acc
      000745 8D 82            [24] 1699 	mov	dpl,r5
      000747 8E 83            [24] 1700 	mov	dph,r6
      000749 12r00r00         [24] 1701 	lcall	__modsint
      00074C AD 82            [24] 1702 	mov	r5,dpl
      00074E AE 83            [24] 1703 	mov	r6,dph
      000750 15 81            [12] 1704 	dec	sp
      000752 15 81            [12] 1705 	dec	sp
      000754 D0 00            [24] 1706 	pop	ar0
      000756 A6 05            [24] 1707 	mov	@r0,ar5
      000758 08               [12] 1708 	inc	r0
      000759 A6 06            [24] 1709 	mov	@r0,ar6
      00075B 18               [12] 1710 	dec	r0
                                   1711 ;	walk.c:179: puts("\033[2J\033[?25l");
      00075C 90r00r38         [24] 1712 	mov	dptr,#___str_4
      00075F 75 F0 80         [24] 1713 	mov	b,#0x80
      000762 C0 00            [24] 1714 	push	ar0
      000764 12r00r00         [24] 1715 	lcall	_puts
      000767 D0 00            [24] 1716 	pop	ar0
      000769 D0 01            [24] 1717 	pop	ar1
                                   1718 ;	walk.c:180: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      00076B 86 05            [24] 1719 	mov	ar5,@r0
      00076D 08               [12] 1720 	inc	r0
      00076E 86 06            [24] 1721 	mov	ar6,@r0
      000770 18               [12] 1722 	dec	r0
      000771 87 03            [24] 1723 	mov	ar3,@r1
      000773 09               [12] 1724 	inc	r1
      000774 87 04            [24] 1725 	mov	ar4,@r1
      000776 19               [12] 1726 	dec	r1
      000777 C0 01            [24] 1727 	push	ar1
      000779 C0 05            [24] 1728 	push	ar5
      00077B C0 06            [24] 1729 	push	ar6
      00077D C0 03            [24] 1730 	push	ar3
      00077F C0 04            [24] 1731 	push	ar4
      000781 E5*00            [12] 1732 	mov	a,_bp
      000783 24 05            [12] 1733 	add	a,#0x05
      000785 F8               [12] 1734 	mov	r0,a
      000786 E6               [12] 1735 	mov	a,@r0
      000787 C0 E0            [24] 1736 	push	acc
      000789 08               [12] 1737 	inc	r0
      00078A E6               [12] 1738 	mov	a,@r0
      00078B C0 E0            [24] 1739 	push	acc
      00078D 74r43            [12] 1740 	mov	a,#___str_5
      00078F C0 E0            [24] 1741 	push	acc
      000791 74s00            [12] 1742 	mov	a,#(___str_5 >> 8)
      000793 C0 E0            [24] 1743 	push	acc
      000795 74 80            [12] 1744 	mov	a,#0x80
      000797 C0 E0            [24] 1745 	push	acc
      000799 12r00r00         [24] 1746 	lcall	_printf
      00079C E5 81            [12] 1747 	mov	a,sp
      00079E 24 F7            [12] 1748 	add	a,#0xf7
      0007A0 F5 81            [12] 1749 	mov	sp,a
      0007A2 D0 01            [24] 1750 	pop	ar1
      0007A4 D0 07            [24] 1751 	pop	ar7
                                   1752 ;	walk.c:182: for (i = 0; i < REG; i++) {
      0007A6 E5*00            [12] 1753 	mov	a,_bp
      0007A8 24 07            [12] 1754 	add	a,#0x07
      0007AA F8               [12] 1755 	mov	r0,a
      0007AB E4               [12] 1756 	clr	a
      0007AC F6               [12] 1757 	mov	@r0,a
      0007AD 08               [12] 1758 	inc	r0
      0007AE F6               [12] 1759 	mov	@r0,a
      0007AF                       1760 00115$:
                                   1761 ;	walk.c:183: neigh[i].r = neigh[REG + i].r * (1 + rand() % 32);
      0007AF C0 07            [24] 1762 	push	ar7
      0007B1 E5*00            [12] 1763 	mov	a,_bp
      0007B3 24 07            [12] 1764 	add	a,#0x07
      0007B5 F8               [12] 1765 	mov	r0,a
      0007B6 E6               [12] 1766 	mov	a,@r0
      0007B7 25 E0            [12] 1767 	add	a,acc
      0007B9 FB               [12] 1768 	mov	r3,a
      0007BA 08               [12] 1769 	inc	r0
      0007BB E6               [12] 1770 	mov	a,@r0
      0007BC 33               [12] 1771 	rlc	a
      0007BD FC               [12] 1772 	mov	r4,a
      0007BE EB               [12] 1773 	mov	a,r3
      0007BF 2B               [12] 1774 	add	a,r3
      0007C0 FB               [12] 1775 	mov	r3,a
      0007C1 EC               [12] 1776 	mov	a,r4
      0007C2 33               [12] 1777 	rlc	a
      0007C3 FC               [12] 1778 	mov	r4,a
      0007C4 E5*00            [12] 1779 	mov	a,_bp
      0007C6 24 03            [12] 1780 	add	a,#0x03
      0007C8 F8               [12] 1781 	mov	r0,a
      0007C9 EB               [12] 1782 	mov	a,r3
      0007CA 24r00            [12] 1783 	add	a,#_neigh
      0007CC F6               [12] 1784 	mov	@r0,a
      0007CD EC               [12] 1785 	mov	a,r4
      0007CE 34s00            [12] 1786 	addc	a,#(_neigh >> 8)
      0007D0 08               [12] 1787 	inc	r0
      0007D1 F6               [12] 1788 	mov	@r0,a
      0007D2 E5*00            [12] 1789 	mov	a,_bp
      0007D4 24 07            [12] 1790 	add	a,#0x07
      0007D6 F8               [12] 1791 	mov	r0,a
      0007D7 86 06            [24] 1792 	mov	ar6,@r0
      0007D9 74 08            [12] 1793 	mov	a,#0x08
      0007DB 2E               [12] 1794 	add	a,r6
      0007DC FE               [12] 1795 	mov	r6,a
      0007DD C2 D5            [12] 1796 	clr	F0
      0007DF 75 F0 04         [24] 1797 	mov	b,#0x04
      0007E2 EE               [12] 1798 	mov	a,r6
      0007E3 30 E7 04         [24] 1799 	jnb	acc.7,00186$
      0007E6 B2 D5            [12] 1800 	cpl	F0
      0007E8 F4               [12] 1801 	cpl	a
      0007E9 04               [12] 1802 	inc	a
      0007EA                       1803 00186$:
      0007EA A4               [48] 1804 	mul	ab
      0007EB 30 D5 0A         [24] 1805 	jnb	F0,00187$
      0007EE F4               [12] 1806 	cpl	a
      0007EF 24 01            [12] 1807 	add	a,#0x01
      0007F1 C5 F0            [12] 1808 	xch	a,b
      0007F3 F4               [12] 1809 	cpl	a
      0007F4 34 00            [12] 1810 	addc	a,#0x00
      0007F6 C5 F0            [12] 1811 	xch	a,b
      0007F8                       1812 00187$:
      0007F8 FE               [12] 1813 	mov	r6,a
      0007F9 AD F0            [24] 1814 	mov	r5,b
      0007FB 24r00            [12] 1815 	add	a,#_neigh
      0007FD F5 82            [12] 1816 	mov	dpl,a
      0007FF ED               [12] 1817 	mov	a,r5
      000800 34s00            [12] 1818 	addc	a,#(_neigh >> 8)
      000802 F5 83            [12] 1819 	mov	dph,a
      000804 A8*00            [24] 1820 	mov	r0,_bp
      000806 08               [12] 1821 	inc	r0
      000807 E0               [24] 1822 	movx	a,@dptr
      000808 F6               [12] 1823 	mov	@r0,a
      000809 A3               [24] 1824 	inc	dptr
      00080A E0               [24] 1825 	movx	a,@dptr
      00080B 08               [12] 1826 	inc	r0
      00080C F6               [12] 1827 	mov	@r0,a
      00080D C0 06            [24] 1828 	push	ar6
      00080F C0 05            [24] 1829 	push	ar5
      000811 C0 04            [24] 1830 	push	ar4
      000813 C0 03            [24] 1831 	push	ar3
      000815 C0 01            [24] 1832 	push	ar1
      000817 12r00r00         [24] 1833 	lcall	_rand
      00081A AA 82            [24] 1834 	mov	r2,dpl
      00081C AF 83            [24] 1835 	mov	r7,dph
      00081E 74 20            [12] 1836 	mov	a,#0x20
      000820 C0 E0            [24] 1837 	push	acc
      000822 E4               [12] 1838 	clr	a
      000823 C0 E0            [24] 1839 	push	acc
      000825 8A 82            [24] 1840 	mov	dpl,r2
      000827 8F 83            [24] 1841 	mov	dph,r7
      000829 12r00r00         [24] 1842 	lcall	__modsint
      00082C AA 82            [24] 1843 	mov	r2,dpl
      00082E AF 83            [24] 1844 	mov	r7,dph
      000830 15 81            [12] 1845 	dec	sp
      000832 15 81            [12] 1846 	dec	sp
      000834 D0 01            [24] 1847 	pop	ar1
      000836 D0 03            [24] 1848 	pop	ar3
      000838 D0 04            [24] 1849 	pop	ar4
      00083A D0 05            [24] 1850 	pop	ar5
      00083C D0 06            [24] 1851 	pop	ar6
      00083E 0A               [12] 1852 	inc	r2
      00083F BA 00 01         [24] 1853 	cjne	r2,#0x00,00188$
      000842 0F               [12] 1854 	inc	r7
      000843                       1855 00188$:
      000843 C0 06            [24] 1856 	push	ar6
      000845 C0 05            [24] 1857 	push	ar5
      000847 C0 04            [24] 1858 	push	ar4
      000849 C0 03            [24] 1859 	push	ar3
      00084B C0 01            [24] 1860 	push	ar1
      00084D C0 02            [24] 1861 	push	ar2
      00084F C0 07            [24] 1862 	push	ar7
      000851 A8*00            [24] 1863 	mov	r0,_bp
      000853 08               [12] 1864 	inc	r0
      000854 86 82            [24] 1865 	mov	dpl,@r0
      000856 08               [12] 1866 	inc	r0
      000857 86 83            [24] 1867 	mov	dph,@r0
      000859 12r00r00         [24] 1868 	lcall	__mulint
      00085C AA 82            [24] 1869 	mov	r2,dpl
      00085E AF 83            [24] 1870 	mov	r7,dph
      000860 15 81            [12] 1871 	dec	sp
      000862 15 81            [12] 1872 	dec	sp
      000864 D0 01            [24] 1873 	pop	ar1
      000866 D0 03            [24] 1874 	pop	ar3
      000868 D0 04            [24] 1875 	pop	ar4
      00086A D0 05            [24] 1876 	pop	ar5
      00086C D0 06            [24] 1877 	pop	ar6
      00086E E5*00            [12] 1878 	mov	a,_bp
      000870 24 03            [12] 1879 	add	a,#0x03
      000872 F8               [12] 1880 	mov	r0,a
      000873 86 82            [24] 1881 	mov	dpl,@r0
      000875 08               [12] 1882 	inc	r0
      000876 86 83            [24] 1883 	mov	dph,@r0
      000878 EA               [12] 1884 	mov	a,r2
      000879 F0               [24] 1885 	movx	@dptr,a
      00087A EF               [12] 1886 	mov	a,r7
      00087B A3               [24] 1887 	inc	dptr
      00087C F0               [24] 1888 	movx	@dptr,a
                                   1889 ;	walk.c:184: neigh[i].c = neigh[REG + i].c * (1 + rand() % 32);
      00087D EB               [12] 1890 	mov	a,r3
      00087E 24r00            [12] 1891 	add	a,#_neigh
      000880 FB               [12] 1892 	mov	r3,a
      000881 EC               [12] 1893 	mov	a,r4
      000882 34s00            [12] 1894 	addc	a,#(_neigh >> 8)
      000884 FC               [12] 1895 	mov	r4,a
      000885 74 02            [12] 1896 	mov	a,#0x02
      000887 2B               [12] 1897 	add	a,r3
      000888 FA               [12] 1898 	mov	r2,a
      000889 E4               [12] 1899 	clr	a
      00088A 3C               [12] 1900 	addc	a,r4
      00088B FF               [12] 1901 	mov	r7,a
      00088C EE               [12] 1902 	mov	a,r6
      00088D 24r00            [12] 1903 	add	a,#_neigh
      00088F FE               [12] 1904 	mov	r6,a
      000890 ED               [12] 1905 	mov	a,r5
      000891 34s00            [12] 1906 	addc	a,#(_neigh >> 8)
      000893 FD               [12] 1907 	mov	r5,a
      000894 8E 82            [24] 1908 	mov	dpl,r6
      000896 8D 83            [24] 1909 	mov	dph,r5
      000898 A3               [24] 1910 	inc	dptr
      000899 A3               [24] 1911 	inc	dptr
      00089A E5*00            [12] 1912 	mov	a,_bp
      00089C 24 03            [12] 1913 	add	a,#0x03
      00089E F8               [12] 1914 	mov	r0,a
      00089F E0               [24] 1915 	movx	a,@dptr
      0008A0 F6               [12] 1916 	mov	@r0,a
      0008A1 A3               [24] 1917 	inc	dptr
      0008A2 E0               [24] 1918 	movx	a,@dptr
      0008A3 08               [12] 1919 	inc	r0
      0008A4 F6               [12] 1920 	mov	@r0,a
      0008A5 C0 07            [24] 1921 	push	ar7
      0008A7 C0 04            [24] 1922 	push	ar4
      0008A9 C0 03            [24] 1923 	push	ar3
      0008AB C0 02            [24] 1924 	push	ar2
      0008AD C0 01            [24] 1925 	push	ar1
      0008AF 12r00r00         [24] 1926 	lcall	_rand
      0008B2 AD 82            [24] 1927 	mov	r5,dpl
      0008B4 AE 83            [24] 1928 	mov	r6,dph
      0008B6 74 20            [12] 1929 	mov	a,#0x20
      0008B8 C0 E0            [24] 1930 	push	acc
      0008BA E4               [12] 1931 	clr	a
      0008BB C0 E0            [24] 1932 	push	acc
      0008BD 8D 82            [24] 1933 	mov	dpl,r5
      0008BF 8E 83            [24] 1934 	mov	dph,r6
      0008C1 12r00r00         [24] 1935 	lcall	__modsint
      0008C4 AD 82            [24] 1936 	mov	r5,dpl
      0008C6 AE 83            [24] 1937 	mov	r6,dph
      0008C8 15 81            [12] 1938 	dec	sp
      0008CA 15 81            [12] 1939 	dec	sp
      0008CC D0 01            [24] 1940 	pop	ar1
      0008CE D0 02            [24] 1941 	pop	ar2
      0008D0 D0 03            [24] 1942 	pop	ar3
      0008D2 D0 04            [24] 1943 	pop	ar4
      0008D4 D0 07            [24] 1944 	pop	ar7
      0008D6 0D               [12] 1945 	inc	r5
      0008D7 BD 00 01         [24] 1946 	cjne	r5,#0x00,00189$
      0008DA 0E               [12] 1947 	inc	r6
      0008DB                       1948 00189$:
      0008DB C0 07            [24] 1949 	push	ar7
      0008DD C0 04            [24] 1950 	push	ar4
      0008DF C0 03            [24] 1951 	push	ar3
      0008E1 C0 02            [24] 1952 	push	ar2
      0008E3 C0 01            [24] 1953 	push	ar1
      0008E5 C0 05            [24] 1954 	push	ar5
      0008E7 C0 06            [24] 1955 	push	ar6
      0008E9 E5*00            [12] 1956 	mov	a,_bp
      0008EB 24 03            [12] 1957 	add	a,#0x03
      0008ED F8               [12] 1958 	mov	r0,a
      0008EE 86 82            [24] 1959 	mov	dpl,@r0
      0008F0 08               [12] 1960 	inc	r0
      0008F1 86 83            [24] 1961 	mov	dph,@r0
      0008F3 12r00r00         [24] 1962 	lcall	__mulint
      0008F6 AD 82            [24] 1963 	mov	r5,dpl
      0008F8 AE 83            [24] 1964 	mov	r6,dph
      0008FA 15 81            [12] 1965 	dec	sp
      0008FC 15 81            [12] 1966 	dec	sp
      0008FE D0 01            [24] 1967 	pop	ar1
      000900 D0 02            [24] 1968 	pop	ar2
      000902 D0 03            [24] 1969 	pop	ar3
      000904 D0 04            [24] 1970 	pop	ar4
      000906 D0 07            [24] 1971 	pop	ar7
      000908 8A 82            [24] 1972 	mov	dpl,r2
      00090A 8F 83            [24] 1973 	mov	dph,r7
      00090C ED               [12] 1974 	mov	a,r5
      00090D F0               [24] 1975 	movx	@dptr,a
      00090E EE               [12] 1976 	mov	a,r6
      00090F A3               [24] 1977 	inc	dptr
      000910 F0               [24] 1978 	movx	@dptr,a
                                   1979 ;	walk.c:185: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000911 8B 82            [24] 1980 	mov	dpl,r3
      000913 8C 83            [24] 1981 	mov	dph,r4
      000915 E0               [24] 1982 	movx	a,@dptr
      000916 FB               [12] 1983 	mov	r3,a
      000917 A3               [24] 1984 	inc	dptr
      000918 E0               [24] 1985 	movx	a,@dptr
      000919 FC               [12] 1986 	mov	r4,a
      00091A C0 07            [24] 1987 	push	ar7
      00091C C0 01            [24] 1988 	push	ar1
      00091E C0 05            [24] 1989 	push	ar5
      000920 C0 06            [24] 1990 	push	ar6
      000922 C0 03            [24] 1991 	push	ar3
      000924 C0 04            [24] 1992 	push	ar4
      000926 74r56            [12] 1993 	mov	a,#___str_6
      000928 C0 E0            [24] 1994 	push	acc
      00092A 74s00            [12] 1995 	mov	a,#(___str_6 >> 8)
      00092C C0 E0            [24] 1996 	push	acc
      00092E 74 80            [12] 1997 	mov	a,#0x80
      000930 C0 E0            [24] 1998 	push	acc
      000932 12r00r00         [24] 1999 	lcall	_printf
      000935 E5 81            [12] 2000 	mov	a,sp
      000937 24 F9            [12] 2001 	add	a,#0xf9
      000939 F5 81            [12] 2002 	mov	sp,a
      00093B D0 01            [24] 2003 	pop	ar1
      00093D D0 07            [24] 2004 	pop	ar7
                                   2005 ;	walk.c:182: for (i = 0; i < REG; i++) {
      00093F E5*00            [12] 2006 	mov	a,_bp
      000941 24 07            [12] 2007 	add	a,#0x07
      000943 F8               [12] 2008 	mov	r0,a
      000944 06               [12] 2009 	inc	@r0
      000945 B6 00 02         [24] 2010 	cjne	@r0,#0x00,00190$
      000948 08               [12] 2011 	inc	r0
      000949 06               [12] 2012 	inc	@r0
      00094A                       2013 00190$:
      00094A E5*00            [12] 2014 	mov	a,_bp
      00094C 24 07            [12] 2015 	add	a,#0x07
      00094E F8               [12] 2016 	mov	r0,a
      00094F 86 05            [24] 2017 	mov	ar5,@r0
      000951 08               [12] 2018 	inc	r0
      000952 86 06            [24] 2019 	mov	ar6,@r0
      000954 C3               [12] 2020 	clr	c
      000955 ED               [12] 2021 	mov	a,r5
      000956 94 08            [12] 2022 	subb	a,#0x08
      000958 EE               [12] 2023 	mov	a,r6
      000959 94 00            [12] 2024 	subb	a,#0x00
      00095B D0 07            [24] 2025 	pop	ar7
      00095D 50 03            [24] 2026 	jnc	00191$
      00095F 02r07rAF         [24] 2027 	ljmp	00115$
      000962                       2028 00191$:
                                   2029 ;	walk.c:188: OE76 = OE76_0;
      000962 78r01            [12] 2030 	mov	r0,#_OE76
      000964 76 3F            [12] 2031 	mov	@r0,#0x3f
                                   2032 ;	walk.c:189: flashOE(OE76_NC);
      000966 75 82 00         [24] 2033 	mov	dpl,#0x00
      000969 C0 07            [24] 2034 	push	ar7
      00096B C0 01            [24] 2035 	push	ar1
      00096D 12r00r29         [24] 2036 	lcall	_flashOE
      000970 D0 01            [24] 2037 	pop	ar1
      000972 D0 07            [24] 2038 	pop	ar7
                                   2039 ;	walk.c:191: walk(&initial);
      000974 8F 04            [24] 2040 	mov	ar4,r7
      000976 7D 00            [12] 2041 	mov	r5,#0x00
      000978 7E 40            [12] 2042 	mov	r6,#0x40
      00097A 8C 82            [24] 2043 	mov	dpl,r4
      00097C 8D 83            [24] 2044 	mov	dph,r5
      00097E 8E F0            [24] 2045 	mov	b,r6
      000980 C0 07            [24] 2046 	push	ar7
      000982 C0 01            [24] 2047 	push	ar1
      000984 12r02rD7         [24] 2048 	lcall	_walk
      000987 D0 01            [24] 2049 	pop	ar1
      000989 D0 07            [24] 2050 	pop	ar7
                                   2051 ;	walk.c:193: for (i = 0; i < ROWS; i++)
      00098B E5*00            [12] 2052 	mov	a,_bp
      00098D 24 07            [12] 2053 	add	a,#0x07
      00098F F8               [12] 2054 	mov	r0,a
      000990 E4               [12] 2055 	clr	a
      000991 F6               [12] 2056 	mov	@r0,a
      000992 08               [12] 2057 	inc	r0
      000993 F6               [12] 2058 	mov	@r0,a
      000994 7B 00            [12] 2059 	mov	r3,#0x00
      000996 7C 00            [12] 2060 	mov	r4,#0x00
                                   2061 ;	walk.c:194: for (j = 0; j < COLS; j++)
      000998                       2062 00131$:
      000998 E5*00            [12] 2063 	mov	a,_bp
      00099A 24 03            [12] 2064 	add	a,#0x03
      00099C F8               [12] 2065 	mov	r0,a
      00099D EB               [12] 2066 	mov	a,r3
      00099E 24r00            [12] 2067 	add	a,#_g
      0009A0 F6               [12] 2068 	mov	@r0,a
      0009A1 EC               [12] 2069 	mov	a,r4
      0009A2 34s00            [12] 2070 	addc	a,#(_g >> 8)
      0009A4 08               [12] 2071 	inc	r0
      0009A5 F6               [12] 2072 	mov	@r0,a
      0009A6 7A 00            [12] 2073 	mov	r2,#0x00
      0009A8 7E 00            [12] 2074 	mov	r6,#0x00
      0009AA                       2075 00117$:
                                   2076 ;	walk.c:195: if (g[i][j] != 0xaau) bang();
      0009AA E5*00            [12] 2077 	mov	a,_bp
      0009AC 24 03            [12] 2078 	add	a,#0x03
      0009AE F8               [12] 2079 	mov	r0,a
      0009AF EA               [12] 2080 	mov	a,r2
      0009B0 26               [12] 2081 	add	a,@r0
      0009B1 F5 82            [12] 2082 	mov	dpl,a
      0009B3 EE               [12] 2083 	mov	a,r6
      0009B4 08               [12] 2084 	inc	r0
      0009B5 36               [12] 2085 	addc	a,@r0
      0009B6 F5 83            [12] 2086 	mov	dph,a
      0009B8 E0               [24] 2087 	movx	a,@dptr
      0009B9 FD               [12] 2088 	mov	r5,a
      0009BA BD AA 02         [24] 2089 	cjne	r5,#0xaa,00192$
      0009BD 80 1B            [24] 2090 	sjmp	00118$
      0009BF                       2091 00192$:
      0009BF C0 07            [24] 2092 	push	ar7
      0009C1 C0 06            [24] 2093 	push	ar6
      0009C3 C0 04            [24] 2094 	push	ar4
      0009C5 C0 03            [24] 2095 	push	ar3
      0009C7 C0 02            [24] 2096 	push	ar2
      0009C9 C0 01            [24] 2097 	push	ar1
      0009CB 12r00r1D         [24] 2098 	lcall	_bang
      0009CE D0 01            [24] 2099 	pop	ar1
      0009D0 D0 02            [24] 2100 	pop	ar2
      0009D2 D0 03            [24] 2101 	pop	ar3
      0009D4 D0 04            [24] 2102 	pop	ar4
      0009D6 D0 06            [24] 2103 	pop	ar6
      0009D8 D0 07            [24] 2104 	pop	ar7
      0009DA                       2105 00118$:
                                   2106 ;	walk.c:194: for (j = 0; j < COLS; j++)
      0009DA 0A               [12] 2107 	inc	r2
      0009DB BA 00 01         [24] 2108 	cjne	r2,#0x00,00193$
      0009DE 0E               [12] 2109 	inc	r6
      0009DF                       2110 00193$:
      0009DF C3               [12] 2111 	clr	c
      0009E0 EA               [12] 2112 	mov	a,r2
      0009E1 94 C9            [12] 2113 	subb	a,#0xc9
      0009E3 EE               [12] 2114 	mov	a,r6
      0009E4 64 80            [12] 2115 	xrl	a,#0x80
      0009E6 94 80            [12] 2116 	subb	a,#0x80
      0009E8 40 C0            [24] 2117 	jc	00117$
                                   2118 ;	walk.c:193: for (i = 0; i < ROWS; i++)
      0009EA 74 C9            [12] 2119 	mov	a,#0xc9
      0009EC 2B               [12] 2120 	add	a,r3
      0009ED FB               [12] 2121 	mov	r3,a
      0009EE E4               [12] 2122 	clr	a
      0009EF 3C               [12] 2123 	addc	a,r4
      0009F0 FC               [12] 2124 	mov	r4,a
      0009F1 E5*00            [12] 2125 	mov	a,_bp
      0009F3 24 07            [12] 2126 	add	a,#0x07
      0009F5 F8               [12] 2127 	mov	r0,a
      0009F6 06               [12] 2128 	inc	@r0
      0009F7 B6 00 02         [24] 2129 	cjne	@r0,#0x00,00195$
      0009FA 08               [12] 2130 	inc	r0
      0009FB 06               [12] 2131 	inc	@r0
      0009FC                       2132 00195$:
      0009FC E5*00            [12] 2133 	mov	a,_bp
      0009FE 24 07            [12] 2134 	add	a,#0x07
      000A00 F8               [12] 2135 	mov	r0,a
      000A01 C3               [12] 2136 	clr	c
      000A02 E6               [12] 2137 	mov	a,@r0
      000A03 94 30            [12] 2138 	subb	a,#0x30
      000A05 08               [12] 2139 	inc	r0
      000A06 E6               [12] 2140 	mov	a,@r0
      000A07 64 80            [12] 2141 	xrl	a,#0x80
      000A09 94 80            [12] 2142 	subb	a,#0x80
      000A0B 40 8B            [24] 2143 	jc	00131$
                                   2144 ;	walk.c:197: N++;
      000A0D E5*00            [12] 2145 	mov	a,_bp
      000A0F 24 05            [12] 2146 	add	a,#0x05
      000A11 F8               [12] 2147 	mov	r0,a
      000A12 06               [12] 2148 	inc	@r0
      000A13 B6 00 02         [24] 2149 	cjne	@r0,#0x00,00197$
      000A16 08               [12] 2150 	inc	r0
      000A17 06               [12] 2151 	inc	@r0
      000A18                       2152 00197$:
      000A18 02r06r94         [24] 2153 	ljmp	00108$
      000A1B                       2154 00110$:
                                   2155 ;	walk.c:200: EA = 0;
                                   2156 ;	assignBit
      000A1B C2 AF            [12] 2157 	clr	_EA
                                   2158 ;	walk.c:202: puts("\033[2J\033[?25h");
      000A1D 90r00r5F         [24] 2159 	mov	dptr,#___str_7
      000A20 75 F0 80         [24] 2160 	mov	b,#0x80
      000A23 12r00r00         [24] 2161 	lcall	_puts
                                   2162 ;	walk.c:206: __endasm;
      000A26 02 00 00         [24] 2163 	ljmp	0
                                   2164 ;	walk.c:208: return 0;
      000A29 90 00 00         [24] 2165 	mov	dptr,#0x0000
                                   2166 ;	walk.c:209: }
      000A2C 85*00 81         [24] 2167 	mov	sp,_bp
      000A2F D0*00            [24] 2168 	pop	_bp
      000A31 22               [24] 2169 	ret
                                   2170 ;------------------------------------------------------------
                                   2171 ;Allocation info for local variables in function 'qinit'
                                   2172 ;------------------------------------------------------------
                                   2173 ;	walk.c:211: static void qinit(void) {
                                   2174 ;	-----------------------------------------
                                   2175 ;	 function qinit
                                   2176 ;	-----------------------------------------
      000A32                       2177 _qinit:
                                   2178 ;	walk.c:212: hp = tp = 0;
      000A32 90rBCr72         [24] 2179 	mov	dptr,#_tp
      000A35 E4               [12] 2180 	clr	a
      000A36 F0               [24] 2181 	movx	@dptr,a
      000A37 A3               [24] 2182 	inc	dptr
      000A38 F0               [24] 2183 	movx	@dptr,a
      000A39 90rBCr70         [24] 2184 	mov	dptr,#_hp
      000A3C F0               [24] 2185 	movx	@dptr,a
      000A3D A3               [24] 2186 	inc	dptr
      000A3E F0               [24] 2187 	movx	@dptr,a
                                   2188 ;	walk.c:213: return;
                                   2189 ;	walk.c:214: }
      000A3F 22               [24] 2190 	ret
                                   2191 ;------------------------------------------------------------
                                   2192 ;Allocation info for local variables in function 'qadd'
                                   2193 ;------------------------------------------------------------
                                   2194 ;t                         Allocated to registers r7 r5 r6 
                                   2195 ;sloc0                     Allocated to stack - _bp +1
                                   2196 ;sloc1                     Allocated to stack - _bp +3
                                   2197 ;sloc2                     Allocated to stack - _bp +5
                                   2198 ;sloc3                     Allocated to stack - _bp +10
                                   2199 ;------------------------------------------------------------
                                   2200 ;	walk.c:216: static uint8_t qadd(struct node *t) {
                                   2201 ;	-----------------------------------------
                                   2202 ;	 function qadd
                                   2203 ;	-----------------------------------------
      000A40                       2204 _qadd:
      000A40 C0*00            [24] 2205 	push	_bp
      000A42 E5 81            [12] 2206 	mov	a,sp
      000A44 F5*00            [12] 2207 	mov	_bp,a
      000A46 24 06            [12] 2208 	add	a,#0x06
      000A48 F5 81            [12] 2209 	mov	sp,a
      000A4A AF 82            [24] 2210 	mov	r7,dpl
      000A4C AD 83            [24] 2211 	mov	r5,dph
      000A4E AE F0            [24] 2212 	mov	r6,b
                                   2213 ;	walk.c:217: if (((hp + 1) % QMAX) == tp) return 0u;
      000A50 90rBCr70         [24] 2214 	mov	dptr,#_hp
      000A53 E0               [24] 2215 	movx	a,@dptr
      000A54 FB               [12] 2216 	mov	r3,a
      000A55 A3               [24] 2217 	inc	dptr
      000A56 E0               [24] 2218 	movx	a,@dptr
      000A57 FC               [12] 2219 	mov	r4,a
      000A58 A8*00            [24] 2220 	mov	r0,_bp
      000A5A 08               [12] 2221 	inc	r0
      000A5B 74 01            [12] 2222 	mov	a,#0x01
      000A5D 2B               [12] 2223 	add	a,r3
      000A5E F6               [12] 2224 	mov	@r0,a
      000A5F E4               [12] 2225 	clr	a
      000A60 3C               [12] 2226 	addc	a,r4
      000A61 08               [12] 2227 	inc	r0
      000A62 F6               [12] 2228 	mov	@r0,a
      000A63 C0 07            [24] 2229 	push	ar7
      000A65 C0 06            [24] 2230 	push	ar6
      000A67 C0 05            [24] 2231 	push	ar5
      000A69 C0 04            [24] 2232 	push	ar4
      000A6B C0 03            [24] 2233 	push	ar3
      000A6D 74 B0            [12] 2234 	mov	a,#0xb0
      000A6F C0 E0            [24] 2235 	push	acc
      000A71 74 25            [12] 2236 	mov	a,#0x25
      000A73 C0 E0            [24] 2237 	push	acc
      000A75 A8*00            [24] 2238 	mov	r0,_bp
      000A77 08               [12] 2239 	inc	r0
      000A78 86 82            [24] 2240 	mov	dpl,@r0
      000A7A 08               [12] 2241 	inc	r0
      000A7B 86 83            [24] 2242 	mov	dph,@r0
      000A7D 12r00r00         [24] 2243 	lcall	__modsint
      000A80 A8*00            [24] 2244 	mov	r0,_bp
      000A82 08               [12] 2245 	inc	r0
      000A83 08               [12] 2246 	inc	r0
      000A84 08               [12] 2247 	inc	r0
      000A85 A6 82            [24] 2248 	mov	@r0,dpl
      000A87 08               [12] 2249 	inc	r0
      000A88 A6 83            [24] 2250 	mov	@r0,dph
      000A8A 15 81            [12] 2251 	dec	sp
      000A8C 15 81            [12] 2252 	dec	sp
      000A8E D0 03            [24] 2253 	pop	ar3
      000A90 D0 04            [24] 2254 	pop	ar4
      000A92 D0 05            [24] 2255 	pop	ar5
      000A94 D0 06            [24] 2256 	pop	ar6
      000A96 D0 07            [24] 2257 	pop	ar7
      000A98 90rBCr72         [24] 2258 	mov	dptr,#_tp
      000A9B E5*00            [12] 2259 	mov	a,_bp
      000A9D 24 05            [12] 2260 	add	a,#0x05
      000A9F F8               [12] 2261 	mov	r0,a
      000AA0 E0               [24] 2262 	movx	a,@dptr
      000AA1 F6               [12] 2263 	mov	@r0,a
      000AA2 A3               [24] 2264 	inc	dptr
      000AA3 E0               [24] 2265 	movx	a,@dptr
      000AA4 08               [12] 2266 	inc	r0
      000AA5 F6               [12] 2267 	mov	@r0,a
      000AA6 E5*00            [12] 2268 	mov	a,_bp
      000AA8 24 03            [12] 2269 	add	a,#0x03
      000AAA F8               [12] 2270 	mov	r0,a
      000AAB E5*00            [12] 2271 	mov	a,_bp
      000AAD 24 05            [12] 2272 	add	a,#0x05
      000AAF F9               [12] 2273 	mov	r1,a
      000AB0 86 F0            [24] 2274 	mov	b,@r0
      000AB2 E7               [12] 2275 	mov	a,@r1
      000AB3 B5 F0 0A         [24] 2276 	cjne	a,b,00109$
      000AB6 08               [12] 2277 	inc	r0
      000AB7 86 F0            [24] 2278 	mov	b,@r0
      000AB9 09               [12] 2279 	inc	r1
      000ABA E7               [12] 2280 	mov	a,@r1
      000ABB B5 F0 02         [24] 2281 	cjne	a,b,00109$
      000ABE 80 02            [24] 2282 	sjmp	00110$
      000AC0                       2283 00109$:
      000AC0 80 05            [24] 2284 	sjmp	00102$
      000AC2                       2285 00110$:
      000AC2 75 82 00         [24] 2286 	mov	dpl,#0x00
      000AC5 80 65            [24] 2287 	sjmp	00103$
      000AC7                       2288 00102$:
                                   2289 ;	walk.c:218: queue[hp] = *t;
      000AC7 8F 02            [24] 2290 	mov	ar2,r7
      000AC9 8E 07            [24] 2291 	mov	ar7,r6
      000ACB EB               [12] 2292 	mov	a,r3
      000ACC 2B               [12] 2293 	add	a,r3
      000ACD FB               [12] 2294 	mov	r3,a
      000ACE EC               [12] 2295 	mov	a,r4
      000ACF 33               [12] 2296 	rlc	a
      000AD0 FC               [12] 2297 	mov	r4,a
      000AD1 EB               [12] 2298 	mov	a,r3
      000AD2 2B               [12] 2299 	add	a,r3
      000AD3 FB               [12] 2300 	mov	r3,a
      000AD4 EC               [12] 2301 	mov	a,r4
      000AD5 33               [12] 2302 	rlc	a
      000AD6 FC               [12] 2303 	mov	r4,a
      000AD7 EB               [12] 2304 	mov	a,r3
      000AD8 24rB0            [12] 2305 	add	a,#_queue
      000ADA FB               [12] 2306 	mov	r3,a
      000ADB EC               [12] 2307 	mov	a,r4
      000ADC 34s25            [12] 2308 	addc	a,#(_queue >> 8)
      000ADE FC               [12] 2309 	mov	r4,a
      000ADF 7E 00            [12] 2310 	mov	r6,#0x00
      000AE1 74 04            [12] 2311 	mov	a,#0x04
      000AE3 C0 E0            [24] 2312 	push	acc
      000AE5 E4               [12] 2313 	clr	a
      000AE6 C0 E0            [24] 2314 	push	acc
      000AE8 C0 02            [24] 2315 	push	ar2
      000AEA C0 05            [24] 2316 	push	ar5
      000AEC C0 07            [24] 2317 	push	ar7
      000AEE 8B 82            [24] 2318 	mov	dpl,r3
      000AF0 8C 83            [24] 2319 	mov	dph,r4
      000AF2 8E F0            [24] 2320 	mov	b,r6
      000AF4 12r00r00         [24] 2321 	lcall	___memcpy
      000AF7 E5 81            [12] 2322 	mov	a,sp
      000AF9 24 FB            [12] 2323 	add	a,#0xfb
      000AFB F5 81            [12] 2324 	mov	sp,a
                                   2325 ;	walk.c:219: hp = (hp + 1) % QMAX;
      000AFD 90rBCr70         [24] 2326 	mov	dptr,#_hp
      000B00 E0               [24] 2327 	movx	a,@dptr
      000B01 FD               [12] 2328 	mov	r5,a
      000B02 A3               [24] 2329 	inc	dptr
      000B03 E0               [24] 2330 	movx	a,@dptr
      000B04 FE               [12] 2331 	mov	r6,a
      000B05 0D               [12] 2332 	inc	r5
      000B06 BD 00 01         [24] 2333 	cjne	r5,#0x00,00111$
      000B09 0E               [12] 2334 	inc	r6
      000B0A                       2335 00111$:
      000B0A 74 B0            [12] 2336 	mov	a,#0xb0
      000B0C C0 E0            [24] 2337 	push	acc
      000B0E 74 25            [12] 2338 	mov	a,#0x25
      000B10 C0 E0            [24] 2339 	push	acc
      000B12 8D 82            [24] 2340 	mov	dpl,r5
      000B14 8E 83            [24] 2341 	mov	dph,r6
      000B16 12r00r00         [24] 2342 	lcall	__modsint
      000B19 AD 82            [24] 2343 	mov	r5,dpl
      000B1B AE 83            [24] 2344 	mov	r6,dph
      000B1D 15 81            [12] 2345 	dec	sp
      000B1F 15 81            [12] 2346 	dec	sp
      000B21 90rBCr70         [24] 2347 	mov	dptr,#_hp
      000B24 ED               [12] 2348 	mov	a,r5
      000B25 F0               [24] 2349 	movx	@dptr,a
      000B26 EE               [12] 2350 	mov	a,r6
      000B27 A3               [24] 2351 	inc	dptr
      000B28 F0               [24] 2352 	movx	@dptr,a
                                   2353 ;	walk.c:220: return 1u;
      000B29 75 82 01         [24] 2354 	mov	dpl,#0x01
      000B2C                       2355 00103$:
                                   2356 ;	walk.c:221: }
      000B2C 85*00 81         [24] 2357 	mov	sp,_bp
      000B2F D0*00            [24] 2358 	pop	_bp
      000B31 22               [24] 2359 	ret
                                   2360 ;------------------------------------------------------------
                                   2361 ;Allocation info for local variables in function 'qget'
                                   2362 ;------------------------------------------------------------
                                   2363 ;t                         Allocated to registers r5 r6 r7 
                                   2364 ;------------------------------------------------------------
                                   2365 ;	walk.c:223: static uint8_t qget(struct node *t) {
                                   2366 ;	-----------------------------------------
                                   2367 ;	 function qget
                                   2368 ;	-----------------------------------------
      000B32                       2369 _qget:
      000B32 AD 82            [24] 2370 	mov	r5,dpl
      000B34 AE 83            [24] 2371 	mov	r6,dph
      000B36 AF F0            [24] 2372 	mov	r7,b
                                   2373 ;	walk.c:224: if (hp == tp) return 0u;
      000B38 90rBCr70         [24] 2374 	mov	dptr,#_hp
      000B3B E0               [24] 2375 	movx	a,@dptr
      000B3C FB               [12] 2376 	mov	r3,a
      000B3D A3               [24] 2377 	inc	dptr
      000B3E E0               [24] 2378 	movx	a,@dptr
      000B3F FC               [12] 2379 	mov	r4,a
      000B40 90rBCr72         [24] 2380 	mov	dptr,#_tp
      000B43 E0               [24] 2381 	movx	a,@dptr
      000B44 F9               [12] 2382 	mov	r1,a
      000B45 A3               [24] 2383 	inc	dptr
      000B46 E0               [24] 2384 	movx	a,@dptr
      000B47 FA               [12] 2385 	mov	r2,a
      000B48 EB               [12] 2386 	mov	a,r3
      000B49 B5 01 08         [24] 2387 	cjne	a,ar1,00102$
      000B4C EC               [12] 2388 	mov	a,r4
      000B4D B5 02 04         [24] 2389 	cjne	a,ar2,00102$
      000B50 75 82 00         [24] 2390 	mov	dpl,#0x00
      000B53 22               [24] 2391 	ret
      000B54                       2392 00102$:
                                   2393 ;	walk.c:225: *t = queue[tp];
      000B54 E9               [12] 2394 	mov	a,r1
      000B55 29               [12] 2395 	add	a,r1
      000B56 F9               [12] 2396 	mov	r1,a
      000B57 EA               [12] 2397 	mov	a,r2
      000B58 33               [12] 2398 	rlc	a
      000B59 FA               [12] 2399 	mov	r2,a
      000B5A E9               [12] 2400 	mov	a,r1
      000B5B 29               [12] 2401 	add	a,r1
      000B5C F9               [12] 2402 	mov	r1,a
      000B5D EA               [12] 2403 	mov	a,r2
      000B5E 33               [12] 2404 	rlc	a
      000B5F FA               [12] 2405 	mov	r2,a
      000B60 E9               [12] 2406 	mov	a,r1
      000B61 24rB0            [12] 2407 	add	a,#_queue
      000B63 F9               [12] 2408 	mov	r1,a
      000B64 EA               [12] 2409 	mov	a,r2
      000B65 34s25            [12] 2410 	addc	a,#(_queue >> 8)
      000B67 FA               [12] 2411 	mov	r2,a
      000B68 7C 00            [12] 2412 	mov	r4,#0x00
      000B6A 74 04            [12] 2413 	mov	a,#0x04
      000B6C C0 E0            [24] 2414 	push	acc
      000B6E E4               [12] 2415 	clr	a
      000B6F C0 E0            [24] 2416 	push	acc
      000B71 C0 01            [24] 2417 	push	ar1
      000B73 C0 02            [24] 2418 	push	ar2
      000B75 C0 04            [24] 2419 	push	ar4
      000B77 8D 82            [24] 2420 	mov	dpl,r5
      000B79 8E 83            [24] 2421 	mov	dph,r6
      000B7B 8F F0            [24] 2422 	mov	b,r7
      000B7D 12r00r00         [24] 2423 	lcall	___memcpy
      000B80 E5 81            [12] 2424 	mov	a,sp
      000B82 24 FB            [12] 2425 	add	a,#0xfb
      000B84 F5 81            [12] 2426 	mov	sp,a
                                   2427 ;	walk.c:226: tp = (tp + 1) % QMAX;
      000B86 90rBCr72         [24] 2428 	mov	dptr,#_tp
      000B89 E0               [24] 2429 	movx	a,@dptr
      000B8A FE               [12] 2430 	mov	r6,a
      000B8B A3               [24] 2431 	inc	dptr
      000B8C E0               [24] 2432 	movx	a,@dptr
      000B8D FF               [12] 2433 	mov	r7,a
      000B8E 0E               [12] 2434 	inc	r6
      000B8F BE 00 01         [24] 2435 	cjne	r6,#0x00,00111$
      000B92 0F               [12] 2436 	inc	r7
      000B93                       2437 00111$:
      000B93 74 B0            [12] 2438 	mov	a,#0xb0
      000B95 C0 E0            [24] 2439 	push	acc
      000B97 74 25            [12] 2440 	mov	a,#0x25
      000B99 C0 E0            [24] 2441 	push	acc
      000B9B 8E 82            [24] 2442 	mov	dpl,r6
      000B9D 8F 83            [24] 2443 	mov	dph,r7
      000B9F 12r00r00         [24] 2444 	lcall	__modsint
      000BA2 AE 82            [24] 2445 	mov	r6,dpl
      000BA4 AF 83            [24] 2446 	mov	r7,dph
      000BA6 15 81            [12] 2447 	dec	sp
      000BA8 15 81            [12] 2448 	dec	sp
      000BAA 90rBCr72         [24] 2449 	mov	dptr,#_tp
      000BAD EE               [12] 2450 	mov	a,r6
      000BAE F0               [24] 2451 	movx	@dptr,a
      000BAF EF               [12] 2452 	mov	a,r7
      000BB0 A3               [24] 2453 	inc	dptr
      000BB1 F0               [24] 2454 	movx	@dptr,a
                                   2455 ;	walk.c:227: return 1u;
      000BB2 75 82 01         [24] 2456 	mov	dpl,#0x01
                                   2457 ;	walk.c:228: }
      000BB5 22               [24] 2458 	ret
                                   2459 	.area CSEG    (CODE)
                                   2460 	.area CONST   (CODE)
                                   2461 	.area CONST   (CODE)
      000000                       2462 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2463 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2464 	.db 0x00
                                   2465 	.area CSEG    (CODE)
                                   2466 	.area CONST   (CODE)
      00000D                       2467 ___str_1:
      00000D 1B                    2468 	.db 0x1b
      00000E 5B 32 3B 31 48 25 20  2469 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      000023 00                    2470 	.db 0x00
                                   2471 	.area CSEG    (CODE)
                                   2472 	.area CONST   (CODE)
      000024                       2473 ___str_2:
      000024 1B                    2474 	.db 0x1b
      000025 5B 25 64 3B 25 64 48  2475 	.ascii "[%d;%dH."
             2E
      00002D 00                    2476 	.db 0x00
                                   2477 	.area CSEG    (CODE)
                                   2478 	.area CONST   (CODE)
      00002E                       2479 ___str_3:
      00002E 1B                    2480 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2481 	.ascii "[%d;%dHo"
             6F
      000037 00                    2482 	.db 0x00
                                   2483 	.area CSEG    (CODE)
                                   2484 	.area CONST   (CODE)
      000038                       2485 ___str_4:
      000038 1B                    2486 	.db 0x1b
      000039 5B 32 4A              2487 	.ascii "[2J"
      00003C 1B                    2488 	.db 0x1b
      00003D 5B 3F 32 35 6C        2489 	.ascii "[?25l"
      000042 00                    2490 	.db 0x00
                                   2491 	.area CSEG    (CODE)
                                   2492 	.area CONST   (CODE)
      000043                       2493 ___str_5:
      000043 1B                    2494 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2495 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2496 	.db 0x00
                                   2497 	.area CSEG    (CODE)
                                   2498 	.area CONST   (CODE)
      000056                       2499 ___str_6:
      000056 25 20 38 64 25 20 38  2500 	.ascii "% 8d% 8d"
             64
      00005E 00                    2501 	.db 0x00
                                   2502 	.area CSEG    (CODE)
                                   2503 	.area CONST   (CODE)
      00005F                       2504 ___str_7:
      00005F 1B                    2505 	.db 0x1b
      000060 5B 32 4A              2506 	.ascii "[2J"
      000063 1B                    2507 	.db 0x1b
      000064 5B 3F 32 35 68        2508 	.ascii "[?25h"
      000069 00                    2509 	.db 0x00
                                   2510 	.area CSEG    (CODE)
                                   2511 	.area XINIT   (CODE)
      000000                       2512 __xinit__neigh:
      000000 FF FF                 2513 	.byte #0xff, #0xff	; -1
      000002 01 00                 2514 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2515 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2516 	.byte #0xff, #0xff	; -1
      000008 01 00                 2517 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2518 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2519 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2520 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2521 	.byte #0xff, #0xff	; -1
      000012 00 00                 2522 	.byte #0x00, #0x00	;  0
      000014 00 00                 2523 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2524 	.byte #0xff, #0xff	; -1
      000018 01 00                 2525 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2526 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2527 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2528 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2529 	.byte #0xff, #0xff	; -1
      000022 01 00                 2530 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2531 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2532 	.byte #0xff, #0xff	; -1
      000028 01 00                 2533 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2534 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2535 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2536 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2537 	.byte #0xff, #0xff	; -1
      000032 00 00                 2538 	.byte #0x00, #0x00	;  0
      000034 00 00                 2539 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2540 	.byte #0xff, #0xff	; -1
      000038 01 00                 2541 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2542 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2543 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2544 	.byte #0x01, #0x00	;  1
                                   2545 	.area CABS    (ABS,CODE)
