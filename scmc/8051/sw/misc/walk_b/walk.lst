                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _queue:
      0025B0                        325 	.ds 38592
      00BC70                        326 _hp:
      00BC70                        327 	.ds 2
      00BC72                        328 _tp:
      00BC72                        329 	.ds 2
                           00F006   330 _OEreg	=	0xf006
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
      000000                        339 _neigh:
      000000                        340 	.ds 64
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
      000003 02r00r16         [24]  357 	ljmp	_int0
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000006                        378 __sdcc_program_startup:
      000006 02r06rB1         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'putchar'
                                    387 ;------------------------------------------------------------
                                    388 ;c                         Allocated to registers 
                                    389 ;------------------------------------------------------------
                                    390 ;	walk.c:7: int putchar(int c) __naked {
                                    391 ;	-----------------------------------------
                                    392 ;	 function putchar
                                    393 ;	-----------------------------------------
      000000                        394 _putchar:
                                    395 ;	naked function: no prologue.
                                    396 ;	walk.c:14: __endasm;
      000000 C0 E0            [24]  397 	push	acc
      000002 E5 82            [12]  398 	mov	a, dpl
      000004 12 00 3C         [24]  399 	lcall	0x003c
      000007 D0 E0            [24]  400 	pop	acc
                                    401 ;	walk.c:15: }
                                    402 ;	naked function: no epilogue.
                                    403 ;------------------------------------------------------------
                                    404 ;Allocation info for local variables in function 'getchar'
                                    405 ;------------------------------------------------------------
                                    406 ;	walk.c:17: int getchar(void) __naked {
                                    407 ;	-----------------------------------------
                                    408 ;	 function getchar
                                    409 ;	-----------------------------------------
      000009                        410 _getchar:
                                    411 ;	naked function: no prologue.
                                    412 ;	walk.c:25: __endasm;
      000009 C0 E0            [24]  413 	push	acc
      00000B 12 00 36         [24]  414 	lcall	0x0036
      00000E F5 82            [12]  415 	mov	dpl, a
      000010 75 83 00         [24]  416 	mov	dph, #0
      000013 D0 E0            [24]  417 	pop	acc
      000015 22               [24]  418 	ret
                                    419 ;	walk.c:26: }
                                    420 ;	naked function: no epilogue.
                                    421 ;------------------------------------------------------------
                                    422 ;Allocation info for local variables in function 'int0'
                                    423 ;------------------------------------------------------------
                                    424 ;	walk.c:32: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    425 ;	-----------------------------------------
                                    426 ;	 function int0
                                    427 ;	-----------------------------------------
      000016                        428 _int0:
                           00000F   429 	ar7 = 0x0f
                           00000E   430 	ar6 = 0x0e
                           00000D   431 	ar5 = 0x0d
                           00000C   432 	ar4 = 0x0c
                           00000B   433 	ar3 = 0x0b
                           00000A   434 	ar2 = 0x0a
                           000009   435 	ar1 = 0x09
                           000008   436 	ar0 = 0x08
      000016 C0 D0            [24]  437 	push	psw
      000018 75 D0 08         [24]  438 	mov	psw,#0x08
                                    439 ;	walk.c:33: i0 = 0u;
      00001B 78r00            [12]  440 	mov	r0,#_i0
      00001D 76 00            [12]  441 	mov	@r0,#0x00
                                    442 ;	walk.c:34: }
      00001F D0 D0            [24]  443 	pop	psw
      000021 32               [24]  444 	reti
                                    445 ;	eliminated unneeded push/pop dpl
                                    446 ;	eliminated unneeded push/pop dph
                                    447 ;	eliminated unneeded push/pop b
                                    448 ;	eliminated unneeded push/pop acc
                                    449 ;------------------------------------------------------------
                                    450 ;Allocation info for local variables in function 'bang'
                                    451 ;------------------------------------------------------------
                                    452 ;	walk.c:40: static void bang(void) {
                                    453 ;	-----------------------------------------
                                    454 ;	 function bang
                                    455 ;	-----------------------------------------
      000022                        456 _bang:
                           000007   457 	ar7 = 0x07
                           000006   458 	ar6 = 0x06
                           000005   459 	ar5 = 0x05
                           000004   460 	ar4 = 0x04
                           000003   461 	ar3 = 0x03
                           000002   462 	ar2 = 0x02
                           000001   463 	ar1 = 0x01
                           000000   464 	ar0 = 0x00
                                    465 ;	walk.c:41: (void)puts("Memory error");
      000022 90r00r00         [24]  466 	mov	dptr,#___str_0
      000025 75 F0 80         [24]  467 	mov	b,#0x80
      000028 12r00r00         [24]  468 	lcall	_puts
                                    469 ;	walk.c:37: PCON |= 2;
      00002B 43 87 02         [24]  470 	orl	_PCON,#0x02
                                    471 ;	walk.c:44: return;
                                    472 ;	walk.c:45: }
      00002E 22               [24]  473 	ret
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'setOE'
                                    476 ;------------------------------------------------------------
                                    477 ;mask                      Allocated to registers r7 
                                    478 ;------------------------------------------------------------
                                    479 ;	walk.c:87: static void setOE(uint8_t mask) {
                                    480 ;	-----------------------------------------
                                    481 ;	 function setOE
                                    482 ;	-----------------------------------------
      00002F                        483 _setOE:
      00002F AF 82            [24]  484 	mov	r7,dpl
                                    485 ;	walk.c:88: OE76 |= mask;
      000031 78r01            [12]  486 	mov	r0,#_OE76
      000033 EF               [12]  487 	mov	a,r7
      000034 46               [12]  488 	orl	a,@r0
      000035 F6               [12]  489 	mov	@r0,a
                                    490 ;	walk.c:89: P1_7 = 0;
                                    491 ;	assignBit
      000036 C2 97            [12]  492 	clr	_P1_7
                                    493 ;	walk.c:94: __endasm;
      000038 00               [12]  494 	nop
      000039 00               [12]  495 	nop
      00003A 00               [12]  496 	nop
                                    497 ;	walk.c:95: OEreg = OE76;
      00003B 78r01            [12]  498 	mov	r0,#_OE76
      00003D 90 F0 06         [24]  499 	mov	dptr,#_OEreg
      000040 E6               [12]  500 	mov	a,@r0
      000041 F0               [24]  501 	movx	@dptr,a
                                    502 ;	walk.c:96: P1_7 = 1;
                                    503 ;	assignBit
      000042 D2 97            [12]  504 	setb	_P1_7
                                    505 ;	walk.c:101: __endasm;
      000044 00               [12]  506 	nop
      000045 00               [12]  507 	nop
      000046 00               [12]  508 	nop
                                    509 ;	walk.c:103: return;
                                    510 ;	walk.c:104: }
      000047 22               [24]  511 	ret
                                    512 ;------------------------------------------------------------
                                    513 ;Allocation info for local variables in function 'unsetOE'
                                    514 ;------------------------------------------------------------
                                    515 ;mask                      Allocated to registers r7 
                                    516 ;------------------------------------------------------------
                                    517 ;	walk.c:106: static void unsetOE(uint8_t mask) {
                                    518 ;	-----------------------------------------
                                    519 ;	 function unsetOE
                                    520 ;	-----------------------------------------
      000048                        521 _unsetOE:
                                    522 ;	walk.c:107: OE76 &= ~mask;
      000048 E5 82            [12]  523 	mov	a,dpl
      00004A F4               [12]  524 	cpl	a
      00004B FF               [12]  525 	mov	r7,a
      00004C 78r01            [12]  526 	mov	r0,#_OE76
      00004E 56               [12]  527 	anl	a,@r0
      00004F F6               [12]  528 	mov	@r0,a
                                    529 ;	walk.c:108: P1_7 = 0;
                                    530 ;	assignBit
      000050 C2 97            [12]  531 	clr	_P1_7
                                    532 ;	walk.c:113: __endasm;
      000052 00               [12]  533 	nop
      000053 00               [12]  534 	nop
      000054 00               [12]  535 	nop
                                    536 ;	walk.c:114: OEreg = OE76;
      000055 78r01            [12]  537 	mov	r0,#_OE76
      000057 90 F0 06         [24]  538 	mov	dptr,#_OEreg
      00005A E6               [12]  539 	mov	a,@r0
      00005B F0               [24]  540 	movx	@dptr,a
                                    541 ;	walk.c:115: P1_7 = 1;
                                    542 ;	assignBit
      00005C D2 97            [12]  543 	setb	_P1_7
                                    544 ;	walk.c:120: __endasm;
      00005E 00               [12]  545 	nop
      00005F 00               [12]  546 	nop
      000060 00               [12]  547 	nop
                                    548 ;	walk.c:122: return;
                                    549 ;	walk.c:123: }
      000061 22               [24]  550 	ret
                                    551 ;------------------------------------------------------------
                                    552 ;Allocation info for local variables in function 'flipOE'
                                    553 ;------------------------------------------------------------
                                    554 ;mask                      Allocated to registers r7 
                                    555 ;------------------------------------------------------------
                                    556 ;	walk.c:125: static void flipOE(uint8_t mask) {
                                    557 ;	-----------------------------------------
                                    558 ;	 function flipOE
                                    559 ;	-----------------------------------------
      000062                        560 _flipOE:
      000062 AF 82            [24]  561 	mov	r7,dpl
                                    562 ;	walk.c:126: OE76 ^= mask;
      000064 78r01            [12]  563 	mov	r0,#_OE76
      000066 EF               [12]  564 	mov	a,r7
      000067 66               [12]  565 	xrl	a,@r0
      000068 F6               [12]  566 	mov	@r0,a
                                    567 ;	walk.c:127: P1_7 = 0;
                                    568 ;	assignBit
      000069 C2 97            [12]  569 	clr	_P1_7
                                    570 ;	walk.c:132: __endasm;
      00006B 00               [12]  571 	nop
      00006C 00               [12]  572 	nop
      00006D 00               [12]  573 	nop
                                    574 ;	walk.c:133: OEreg = OE76;
      00006E 78r01            [12]  575 	mov	r0,#_OE76
      000070 90 F0 06         [24]  576 	mov	dptr,#_OEreg
      000073 E6               [12]  577 	mov	a,@r0
      000074 F0               [24]  578 	movx	@dptr,a
                                    579 ;	walk.c:134: P1_7 = 1;
                                    580 ;	assignBit
      000075 D2 97            [12]  581 	setb	_P1_7
                                    582 ;	walk.c:139: __endasm;
      000077 00               [12]  583 	nop
      000078 00               [12]  584 	nop
      000079 00               [12]  585 	nop
                                    586 ;	walk.c:141: return;
                                    587 ;	walk.c:142: }
      00007A 22               [24]  588 	ret
                                    589 ;------------------------------------------------------------
                                    590 ;Allocation info for local variables in function 'update'
                                    591 ;------------------------------------------------------------
                                    592 ;cur                       Allocated to stack - _bp -5
                                    593 ;j                         Allocated to stack - _bp -6
                                    594 ;t                         Allocated to stack - _bp +1
                                    595 ;sloc0                     Allocated to stack - _bp +4
                                    596 ;sloc1                     Allocated to stack - _bp +6
                                    597 ;sloc2                     Allocated to stack - _bp +8
                                    598 ;------------------------------------------------------------
                                    599 ;	walk.c:144: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    600 ;	-----------------------------------------
                                    601 ;	 function update
                                    602 ;	-----------------------------------------
      00007B                        603 _update:
      00007B C0*00            [24]  604 	push	_bp
      00007D 85 81*00         [24]  605 	mov	_bp,sp
      000080 C0 82            [24]  606 	push	dpl
      000082 C0 83            [24]  607 	push	dph
      000084 C0 F0            [24]  608 	push	b
      000086 E5 81            [12]  609 	mov	a,sp
      000088 24 07            [12]  610 	add	a,#0x07
      00008A F5 81            [12]  611 	mov	sp,a
                                    612 ;	walk.c:145: t->r = cur->r + neigh[j].r;
      00008C E5*00            [12]  613 	mov	a,_bp
      00008E 24 FB            [12]  614 	add	a,#0xfb
      000090 F8               [12]  615 	mov	r0,a
      000091 86 02            [24]  616 	mov	ar2,@r0
      000093 08               [12]  617 	inc	r0
      000094 86 03            [24]  618 	mov	ar3,@r0
      000096 08               [12]  619 	inc	r0
      000097 86 04            [24]  620 	mov	ar4,@r0
      000099 8A 82            [24]  621 	mov	dpl,r2
      00009B 8B 83            [24]  622 	mov	dph,r3
      00009D 8C F0            [24]  623 	mov	b,r4
      00009F E5*00            [12]  624 	mov	a,_bp
      0000A1 24 04            [12]  625 	add	a,#0x04
      0000A3 F8               [12]  626 	mov	r0,a
      0000A4 12r00r00         [24]  627 	lcall	__gptrget
      0000A7 F6               [12]  628 	mov	@r0,a
      0000A8 A3               [24]  629 	inc	dptr
      0000A9 12r00r00         [24]  630 	lcall	__gptrget
      0000AC 08               [12]  631 	inc	r0
      0000AD F6               [12]  632 	mov	@r0,a
      0000AE E5*00            [12]  633 	mov	a,_bp
      0000B0 24 FA            [12]  634 	add	a,#0xfa
      0000B2 F8               [12]  635 	mov	r0,a
      0000B3 E5*00            [12]  636 	mov	a,_bp
      0000B5 24 06            [12]  637 	add	a,#0x06
      0000B7 F9               [12]  638 	mov	r1,a
      0000B8 E6               [12]  639 	mov	a,@r0
      0000B9 75 F0 04         [24]  640 	mov	b,#0x04
      0000BC A4               [48]  641 	mul	ab
      0000BD F7               [12]  642 	mov	@r1,a
      0000BE 09               [12]  643 	inc	r1
      0000BF A7 F0            [24]  644 	mov	@r1,b
      0000C1 E5*00            [12]  645 	mov	a,_bp
      0000C3 24 06            [12]  646 	add	a,#0x06
      0000C5 F8               [12]  647 	mov	r0,a
      0000C6 E6               [12]  648 	mov	a,@r0
      0000C7 24r00            [12]  649 	add	a,#_neigh
      0000C9 F5 82            [12]  650 	mov	dpl,a
      0000CB 08               [12]  651 	inc	r0
      0000CC E6               [12]  652 	mov	a,@r0
      0000CD 34s00            [12]  653 	addc	a,#(_neigh >> 8)
      0000CF F5 83            [12]  654 	mov	dph,a
      0000D1 E0               [24]  655 	movx	a,@dptr
      0000D2 FF               [12]  656 	mov	r7,a
      0000D3 A3               [24]  657 	inc	dptr
      0000D4 E0               [24]  658 	movx	a,@dptr
      0000D5 FE               [12]  659 	mov	r6,a
      0000D6 E5*00            [12]  660 	mov	a,_bp
      0000D8 24 04            [12]  661 	add	a,#0x04
      0000DA F8               [12]  662 	mov	r0,a
      0000DB EF               [12]  663 	mov	a,r7
      0000DC 26               [12]  664 	add	a,@r0
      0000DD FF               [12]  665 	mov	r7,a
      0000DE EE               [12]  666 	mov	a,r6
      0000DF 08               [12]  667 	inc	r0
      0000E0 36               [12]  668 	addc	a,@r0
      0000E1 FE               [12]  669 	mov	r6,a
      0000E2 A8*00            [24]  670 	mov	r0,_bp
      0000E4 08               [12]  671 	inc	r0
      0000E5 86 82            [24]  672 	mov	dpl,@r0
      0000E7 08               [12]  673 	inc	r0
      0000E8 86 83            [24]  674 	mov	dph,@r0
      0000EA 08               [12]  675 	inc	r0
      0000EB 86 F0            [24]  676 	mov	b,@r0
      0000ED EF               [12]  677 	mov	a,r7
      0000EE 12r00r00         [24]  678 	lcall	__gptrput
      0000F1 A3               [24]  679 	inc	dptr
      0000F2 EE               [12]  680 	mov	a,r6
      0000F3 12r00r00         [24]  681 	lcall	__gptrput
                                    682 ;	walk.c:146: t->c = cur->c + neigh[j].c;
      0000F6 A8*00            [24]  683 	mov	r0,_bp
      0000F8 08               [12]  684 	inc	r0
      0000F9 E5*00            [12]  685 	mov	a,_bp
      0000FB 24 08            [12]  686 	add	a,#0x08
      0000FD F9               [12]  687 	mov	r1,a
      0000FE 74 02            [12]  688 	mov	a,#0x02
      000100 26               [12]  689 	add	a,@r0
      000101 F7               [12]  690 	mov	@r1,a
      000102 E4               [12]  691 	clr	a
      000103 08               [12]  692 	inc	r0
      000104 36               [12]  693 	addc	a,@r0
      000105 09               [12]  694 	inc	r1
      000106 F7               [12]  695 	mov	@r1,a
      000107 08               [12]  696 	inc	r0
      000108 09               [12]  697 	inc	r1
      000109 E6               [12]  698 	mov	a,@r0
      00010A F7               [12]  699 	mov	@r1,a
      00010B 74 02            [12]  700 	mov	a,#0x02
      00010D 2A               [12]  701 	add	a,r2
      00010E FA               [12]  702 	mov	r2,a
      00010F E4               [12]  703 	clr	a
      000110 3B               [12]  704 	addc	a,r3
      000111 FB               [12]  705 	mov	r3,a
      000112 8A 82            [24]  706 	mov	dpl,r2
      000114 8B 83            [24]  707 	mov	dph,r3
      000116 8C F0            [24]  708 	mov	b,r4
      000118 12r00r00         [24]  709 	lcall	__gptrget
      00011B FA               [12]  710 	mov	r2,a
      00011C A3               [24]  711 	inc	dptr
      00011D 12r00r00         [24]  712 	lcall	__gptrget
      000120 FB               [12]  713 	mov	r3,a
      000121 E5*00            [12]  714 	mov	a,_bp
      000123 24 06            [12]  715 	add	a,#0x06
      000125 F8               [12]  716 	mov	r0,a
      000126 E6               [12]  717 	mov	a,@r0
      000127 24r00            [12]  718 	add	a,#_neigh
      000129 FC               [12]  719 	mov	r4,a
      00012A 08               [12]  720 	inc	r0
      00012B E6               [12]  721 	mov	a,@r0
      00012C 34s00            [12]  722 	addc	a,#(_neigh >> 8)
      00012E FD               [12]  723 	mov	r5,a
      00012F 8C 82            [24]  724 	mov	dpl,r4
      000131 8D 83            [24]  725 	mov	dph,r5
      000133 A3               [24]  726 	inc	dptr
      000134 A3               [24]  727 	inc	dptr
      000135 E0               [24]  728 	movx	a,@dptr
      000136 FC               [12]  729 	mov	r4,a
      000137 A3               [24]  730 	inc	dptr
      000138 E0               [24]  731 	movx	a,@dptr
      000139 FD               [12]  732 	mov	r5,a
      00013A EC               [12]  733 	mov	a,r4
      00013B 2A               [12]  734 	add	a,r2
      00013C FA               [12]  735 	mov	r2,a
      00013D ED               [12]  736 	mov	a,r5
      00013E 3B               [12]  737 	addc	a,r3
      00013F FB               [12]  738 	mov	r3,a
      000140 E5*00            [12]  739 	mov	a,_bp
      000142 24 08            [12]  740 	add	a,#0x08
      000144 F8               [12]  741 	mov	r0,a
      000145 86 82            [24]  742 	mov	dpl,@r0
      000147 08               [12]  743 	inc	r0
      000148 86 83            [24]  744 	mov	dph,@r0
      00014A 08               [12]  745 	inc	r0
      00014B 86 F0            [24]  746 	mov	b,@r0
      00014D EA               [12]  747 	mov	a,r2
      00014E 12r00r00         [24]  748 	lcall	__gptrput
      000151 A3               [24]  749 	inc	dptr
      000152 EB               [12]  750 	mov	a,r3
      000153 12r00r00         [24]  751 	lcall	__gptrput
                                    752 ;	walk.c:148: if (t->r < 0) t->r += ROWS;
      000156 A8*00            [24]  753 	mov	r0,_bp
      000158 08               [12]  754 	inc	r0
      000159 86 82            [24]  755 	mov	dpl,@r0
      00015B 08               [12]  756 	inc	r0
      00015C 86 83            [24]  757 	mov	dph,@r0
      00015E 08               [12]  758 	inc	r0
      00015F 86 F0            [24]  759 	mov	b,@r0
      000161 12r00r00         [24]  760 	lcall	__gptrget
      000164 FD               [12]  761 	mov	r5,a
      000165 A3               [24]  762 	inc	dptr
      000166 12r00r00         [24]  763 	lcall	__gptrget
      000169 FC               [12]  764 	mov	r4,a
      00016A EE               [12]  765 	mov	a,r6
      00016B 30 E7 1D         [24]  766 	jnb	acc.7,00104$
      00016E 74 30            [12]  767 	mov	a,#0x30
      000170 2D               [12]  768 	add	a,r5
      000171 FF               [12]  769 	mov	r7,a
      000172 E4               [12]  770 	clr	a
      000173 3C               [12]  771 	addc	a,r4
      000174 FE               [12]  772 	mov	r6,a
      000175 A8*00            [24]  773 	mov	r0,_bp
      000177 08               [12]  774 	inc	r0
      000178 86 82            [24]  775 	mov	dpl,@r0
      00017A 08               [12]  776 	inc	r0
      00017B 86 83            [24]  777 	mov	dph,@r0
      00017D 08               [12]  778 	inc	r0
      00017E 86 F0            [24]  779 	mov	b,@r0
      000180 EF               [12]  780 	mov	a,r7
      000181 12r00r00         [24]  781 	lcall	__gptrput
      000184 A3               [24]  782 	inc	dptr
      000185 EE               [12]  783 	mov	a,r6
      000186 12r00r00         [24]  784 	lcall	__gptrput
      000189 80 27            [24]  785 	sjmp	00105$
      00018B                        786 00104$:
                                    787 ;	walk.c:149: else if (t->r >= ROWS) t->r -= ROWS;
      00018B C3               [12]  788 	clr	c
      00018C ED               [12]  789 	mov	a,r5
      00018D 94 30            [12]  790 	subb	a,#0x30
      00018F EC               [12]  791 	mov	a,r4
      000190 64 80            [12]  792 	xrl	a,#0x80
      000192 94 80            [12]  793 	subb	a,#0x80
      000194 40 1C            [24]  794 	jc	00105$
      000196 ED               [12]  795 	mov	a,r5
      000197 24 D0            [12]  796 	add	a,#0xd0
      000199 FD               [12]  797 	mov	r5,a
      00019A EC               [12]  798 	mov	a,r4
      00019B 34 FF            [12]  799 	addc	a,#0xff
      00019D FC               [12]  800 	mov	r4,a
      00019E A8*00            [24]  801 	mov	r0,_bp
      0001A0 08               [12]  802 	inc	r0
      0001A1 86 82            [24]  803 	mov	dpl,@r0
      0001A3 08               [12]  804 	inc	r0
      0001A4 86 83            [24]  805 	mov	dph,@r0
      0001A6 08               [12]  806 	inc	r0
      0001A7 86 F0            [24]  807 	mov	b,@r0
      0001A9 ED               [12]  808 	mov	a,r5
      0001AA 12r00r00         [24]  809 	lcall	__gptrput
      0001AD A3               [24]  810 	inc	dptr
      0001AE EC               [12]  811 	mov	a,r4
      0001AF 12r00r00         [24]  812 	lcall	__gptrput
      0001B2                        813 00105$:
                                    814 ;	walk.c:150: if (t->c < 0) t->c += COLS;
      0001B2 E5*00            [12]  815 	mov	a,_bp
      0001B4 24 08            [12]  816 	add	a,#0x08
      0001B6 F8               [12]  817 	mov	r0,a
      0001B7 86 82            [24]  818 	mov	dpl,@r0
      0001B9 08               [12]  819 	inc	r0
      0001BA 86 83            [24]  820 	mov	dph,@r0
      0001BC 08               [12]  821 	inc	r0
      0001BD 86 F0            [24]  822 	mov	b,@r0
      0001BF 12r00r00         [24]  823 	lcall	__gptrget
      0001C2 A3               [24]  824 	inc	dptr
      0001C3 12r00r00         [24]  825 	lcall	__gptrget
      0001C6 30 E7 35         [24]  826 	jnb	acc.7,00109$
      0001C9 E5*00            [12]  827 	mov	a,_bp
      0001CB 24 08            [12]  828 	add	a,#0x08
      0001CD F8               [12]  829 	mov	r0,a
      0001CE 86 82            [24]  830 	mov	dpl,@r0
      0001D0 08               [12]  831 	inc	r0
      0001D1 86 83            [24]  832 	mov	dph,@r0
      0001D3 08               [12]  833 	inc	r0
      0001D4 86 F0            [24]  834 	mov	b,@r0
      0001D6 12r00r00         [24]  835 	lcall	__gptrget
      0001D9 FE               [12]  836 	mov	r6,a
      0001DA A3               [24]  837 	inc	dptr
      0001DB 12r00r00         [24]  838 	lcall	__gptrget
      0001DE FF               [12]  839 	mov	r7,a
      0001DF 74 C9            [12]  840 	mov	a,#0xc9
      0001E1 2E               [12]  841 	add	a,r6
      0001E2 FE               [12]  842 	mov	r6,a
      0001E3 E4               [12]  843 	clr	a
      0001E4 3F               [12]  844 	addc	a,r7
      0001E5 FF               [12]  845 	mov	r7,a
      0001E6 E5*00            [12]  846 	mov	a,_bp
      0001E8 24 08            [12]  847 	add	a,#0x08
      0001EA F8               [12]  848 	mov	r0,a
      0001EB 86 82            [24]  849 	mov	dpl,@r0
      0001ED 08               [12]  850 	inc	r0
      0001EE 86 83            [24]  851 	mov	dph,@r0
      0001F0 08               [12]  852 	inc	r0
      0001F1 86 F0            [24]  853 	mov	b,@r0
      0001F3 EE               [12]  854 	mov	a,r6
      0001F4 12r00r00         [24]  855 	lcall	__gptrput
      0001F7 A3               [24]  856 	inc	dptr
      0001F8 EF               [12]  857 	mov	a,r7
      0001F9 12r00r00         [24]  858 	lcall	__gptrput
      0001FC 80 55            [24]  859 	sjmp	00110$
      0001FE                        860 00109$:
                                    861 ;	walk.c:151: else if (t->c >= COLS) t->c -= COLS;
      0001FE E5*00            [12]  862 	mov	a,_bp
      000200 24 08            [12]  863 	add	a,#0x08
      000202 F8               [12]  864 	mov	r0,a
      000203 86 82            [24]  865 	mov	dpl,@r0
      000205 08               [12]  866 	inc	r0
      000206 86 83            [24]  867 	mov	dph,@r0
      000208 08               [12]  868 	inc	r0
      000209 86 F0            [24]  869 	mov	b,@r0
      00020B 12r00r00         [24]  870 	lcall	__gptrget
      00020E FE               [12]  871 	mov	r6,a
      00020F A3               [24]  872 	inc	dptr
      000210 12r00r00         [24]  873 	lcall	__gptrget
      000213 FF               [12]  874 	mov	r7,a
      000214 C3               [12]  875 	clr	c
      000215 EE               [12]  876 	mov	a,r6
      000216 94 C9            [12]  877 	subb	a,#0xc9
      000218 EF               [12]  878 	mov	a,r7
      000219 64 80            [12]  879 	xrl	a,#0x80
      00021B 94 80            [12]  880 	subb	a,#0x80
      00021D 40 34            [24]  881 	jc	00110$
      00021F E5*00            [12]  882 	mov	a,_bp
      000221 24 08            [12]  883 	add	a,#0x08
      000223 F8               [12]  884 	mov	r0,a
      000224 86 82            [24]  885 	mov	dpl,@r0
      000226 08               [12]  886 	inc	r0
      000227 86 83            [24]  887 	mov	dph,@r0
      000229 08               [12]  888 	inc	r0
      00022A 86 F0            [24]  889 	mov	b,@r0
      00022C 12r00r00         [24]  890 	lcall	__gptrget
      00022F FE               [12]  891 	mov	r6,a
      000230 A3               [24]  892 	inc	dptr
      000231 12r00r00         [24]  893 	lcall	__gptrget
      000234 FF               [12]  894 	mov	r7,a
      000235 EE               [12]  895 	mov	a,r6
      000236 24 37            [12]  896 	add	a,#0x37
      000238 FE               [12]  897 	mov	r6,a
      000239 EF               [12]  898 	mov	a,r7
      00023A 34 FF            [12]  899 	addc	a,#0xff
      00023C FF               [12]  900 	mov	r7,a
      00023D E5*00            [12]  901 	mov	a,_bp
      00023F 24 08            [12]  902 	add	a,#0x08
      000241 F8               [12]  903 	mov	r0,a
      000242 86 82            [24]  904 	mov	dpl,@r0
      000244 08               [12]  905 	inc	r0
      000245 86 83            [24]  906 	mov	dph,@r0
      000247 08               [12]  907 	inc	r0
      000248 86 F0            [24]  908 	mov	b,@r0
      00024A EE               [12]  909 	mov	a,r6
      00024B 12r00r00         [24]  910 	lcall	__gptrput
      00024E A3               [24]  911 	inc	dptr
      00024F EF               [12]  912 	mov	a,r7
      000250 12r00r00         [24]  913 	lcall	__gptrput
      000253                        914 00110$:
                                    915 ;	walk.c:153: if (g[t->r][t->c] == 0xaau) return 0u;
      000253 A8*00            [24]  916 	mov	r0,_bp
      000255 08               [12]  917 	inc	r0
      000256 86 82            [24]  918 	mov	dpl,@r0
      000258 08               [12]  919 	inc	r0
      000259 86 83            [24]  920 	mov	dph,@r0
      00025B 08               [12]  921 	inc	r0
      00025C 86 F0            [24]  922 	mov	b,@r0
      00025E 12r00r00         [24]  923 	lcall	__gptrget
      000261 FE               [12]  924 	mov	r6,a
      000262 A3               [24]  925 	inc	dptr
      000263 12r00r00         [24]  926 	lcall	__gptrget
      000266 FF               [12]  927 	mov	r7,a
      000267 C0 06            [24]  928 	push	ar6
      000269 C0 07            [24]  929 	push	ar7
      00026B 90 00 C9         [24]  930 	mov	dptr,#0x00c9
      00026E 12r00r00         [24]  931 	lcall	__mulint
      000271 AE 82            [24]  932 	mov	r6,dpl
      000273 AF 83            [24]  933 	mov	r7,dph
      000275 15 81            [12]  934 	dec	sp
      000277 15 81            [12]  935 	dec	sp
      000279 EE               [12]  936 	mov	a,r6
      00027A 24r00            [12]  937 	add	a,#_g
      00027C FE               [12]  938 	mov	r6,a
      00027D EF               [12]  939 	mov	a,r7
      00027E 34s00            [12]  940 	addc	a,#(_g >> 8)
      000280 FF               [12]  941 	mov	r7,a
      000281 E5*00            [12]  942 	mov	a,_bp
      000283 24 08            [12]  943 	add	a,#0x08
      000285 F8               [12]  944 	mov	r0,a
      000286 86 82            [24]  945 	mov	dpl,@r0
      000288 08               [12]  946 	inc	r0
      000289 86 83            [24]  947 	mov	dph,@r0
      00028B 08               [12]  948 	inc	r0
      00028C 86 F0            [24]  949 	mov	b,@r0
      00028E 12r00r00         [24]  950 	lcall	__gptrget
      000291 FC               [12]  951 	mov	r4,a
      000292 A3               [24]  952 	inc	dptr
      000293 12r00r00         [24]  953 	lcall	__gptrget
      000296 FD               [12]  954 	mov	r5,a
      000297 EC               [12]  955 	mov	a,r4
      000298 2E               [12]  956 	add	a,r6
      000299 F5 82            [12]  957 	mov	dpl,a
      00029B ED               [12]  958 	mov	a,r5
      00029C 3F               [12]  959 	addc	a,r7
      00029D F5 83            [12]  960 	mov	dph,a
      00029F E0               [24]  961 	movx	a,@dptr
      0002A0 FF               [12]  962 	mov	r7,a
      0002A1 BF AA 05         [24]  963 	cjne	r7,#0xaa,00114$
      0002A4 75 82 00         [24]  964 	mov	dpl,#0x00
      0002A7 80 59            [24]  965 	sjmp	00116$
      0002A9                        966 00114$:
                                    967 ;	walk.c:154: else if (g[t->r][t->c] != 0x55u) bang();
      0002A9 A8*00            [24]  968 	mov	r0,_bp
      0002AB 08               [12]  969 	inc	r0
      0002AC 86 82            [24]  970 	mov	dpl,@r0
      0002AE 08               [12]  971 	inc	r0
      0002AF 86 83            [24]  972 	mov	dph,@r0
      0002B1 08               [12]  973 	inc	r0
      0002B2 86 F0            [24]  974 	mov	b,@r0
      0002B4 12r00r00         [24]  975 	lcall	__gptrget
      0002B7 FE               [12]  976 	mov	r6,a
      0002B8 A3               [24]  977 	inc	dptr
      0002B9 12r00r00         [24]  978 	lcall	__gptrget
      0002BC FF               [12]  979 	mov	r7,a
      0002BD C0 06            [24]  980 	push	ar6
      0002BF C0 07            [24]  981 	push	ar7
      0002C1 90 00 C9         [24]  982 	mov	dptr,#0x00c9
      0002C4 12r00r00         [24]  983 	lcall	__mulint
      0002C7 AE 82            [24]  984 	mov	r6,dpl
      0002C9 AF 83            [24]  985 	mov	r7,dph
      0002CB 15 81            [12]  986 	dec	sp
      0002CD 15 81            [12]  987 	dec	sp
      0002CF EE               [12]  988 	mov	a,r6
      0002D0 24r00            [12]  989 	add	a,#_g
      0002D2 FE               [12]  990 	mov	r6,a
      0002D3 EF               [12]  991 	mov	a,r7
      0002D4 34s00            [12]  992 	addc	a,#(_g >> 8)
      0002D6 FF               [12]  993 	mov	r7,a
      0002D7 E5*00            [12]  994 	mov	a,_bp
      0002D9 24 08            [12]  995 	add	a,#0x08
      0002DB F8               [12]  996 	mov	r0,a
      0002DC 86 82            [24]  997 	mov	dpl,@r0
      0002DE 08               [12]  998 	inc	r0
      0002DF 86 83            [24]  999 	mov	dph,@r0
      0002E1 08               [12] 1000 	inc	r0
      0002E2 86 F0            [24] 1001 	mov	b,@r0
      0002E4 12r00r00         [24] 1002 	lcall	__gptrget
      0002E7 FC               [12] 1003 	mov	r4,a
      0002E8 A3               [24] 1004 	inc	dptr
      0002E9 12r00r00         [24] 1005 	lcall	__gptrget
      0002EC FD               [12] 1006 	mov	r5,a
      0002ED EC               [12] 1007 	mov	a,r4
      0002EE 2E               [12] 1008 	add	a,r6
      0002EF F5 82            [12] 1009 	mov	dpl,a
      0002F1 ED               [12] 1010 	mov	a,r5
      0002F2 3F               [12] 1011 	addc	a,r7
      0002F3 F5 83            [12] 1012 	mov	dph,a
      0002F5 E0               [24] 1013 	movx	a,@dptr
      0002F6 FF               [12] 1014 	mov	r7,a
      0002F7 BF 55 02         [24] 1015 	cjne	r7,#0x55,00148$
      0002FA 80 03            [24] 1016 	sjmp	00115$
      0002FC                       1017 00148$:
      0002FC 12r00r22         [24] 1018 	lcall	_bang
      0002FF                       1019 00115$:
                                   1020 ;	walk.c:156: return 1u;
      0002FF 75 82 01         [24] 1021 	mov	dpl,#0x01
      000302                       1022 00116$:
                                   1023 ;	walk.c:157: }
      000302 85*00 81         [24] 1024 	mov	sp,_bp
      000305 D0*00            [24] 1025 	pop	_bp
      000307 22               [24] 1026 	ret
                                   1027 ;------------------------------------------------------------
                                   1028 ;Allocation info for local variables in function 'walk'
                                   1029 ;------------------------------------------------------------
                                   1030 ;nstart                    Allocated to registers r5 r6 r7 
                                   1031 ;cur                       Allocated to stack - _bp +7
                                   1032 ;t                         Allocated to stack - _bp +11
                                   1033 ;scramble                  Allocated to stack - _bp +15
                                   1034 ;ti                        Allocated to registers r2 
                                   1035 ;tj                        Allocated to registers r6 
                                   1036 ;tx                        Allocated to stack - _bp +31
                                   1037 ;j                         Allocated to stack - _bp +32
                                   1038 ;sloc0                     Allocated to stack - _bp +1
                                   1039 ;sloc1                     Allocated to stack - _bp +3
                                   1040 ;sloc2                     Allocated to stack - _bp +35
                                   1041 ;sloc3                     Allocated to stack - _bp +4
                                   1042 ;------------------------------------------------------------
                                   1043 ;	walk.c:159: static void walk(struct node *nstart) {
                                   1044 ;	-----------------------------------------
                                   1045 ;	 function walk
                                   1046 ;	-----------------------------------------
      000308                       1047 _walk:
      000308 C0*00            [24] 1048 	push	_bp
      00030A E5 81            [12] 1049 	mov	a,sp
      00030C F5*00            [12] 1050 	mov	_bp,a
      00030E 24 20            [12] 1051 	add	a,#0x20
      000310 F5 81            [12] 1052 	mov	sp,a
                                   1053 ;	walk.c:164: if (!qadd(nstart)) bang();
      000312 AD 82            [24] 1054 	mov	r5,dpl
      000314 AE 83            [24] 1055 	mov	r6,dph
      000316 AF F0            [24] 1056 	mov	r7,b
      000318 C0 07            [24] 1057 	push	ar7
      00031A C0 06            [24] 1058 	push	ar6
      00031C C0 05            [24] 1059 	push	ar5
      00031E 12r0Ar9A         [24] 1060 	lcall	_qadd
      000321 E5 82            [12] 1061 	mov	a,dpl
      000323 D0 05            [24] 1062 	pop	ar5
      000325 D0 06            [24] 1063 	pop	ar6
      000327 D0 07            [24] 1064 	pop	ar7
      000329 70 0F            [24] 1065 	jnz	00102$
      00032B C0 07            [24] 1066 	push	ar7
      00032D C0 06            [24] 1067 	push	ar6
      00032F C0 05            [24] 1068 	push	ar5
      000331 12r00r22         [24] 1069 	lcall	_bang
      000334 D0 05            [24] 1070 	pop	ar5
      000336 D0 06            [24] 1071 	pop	ar6
      000338 D0 07            [24] 1072 	pop	ar7
      00033A                       1073 00102$:
                                   1074 ;	walk.c:165: g[nstart->r][nstart->c] = 0xaau;
      00033A 8D 82            [24] 1075 	mov	dpl,r5
      00033C 8E 83            [24] 1076 	mov	dph,r6
      00033E 8F F0            [24] 1077 	mov	b,r7
      000340 12r00r00         [24] 1078 	lcall	__gptrget
      000343 FB               [12] 1079 	mov	r3,a
      000344 A3               [24] 1080 	inc	dptr
      000345 12r00r00         [24] 1081 	lcall	__gptrget
      000348 FC               [12] 1082 	mov	r4,a
      000349 C0 07            [24] 1083 	push	ar7
      00034B C0 06            [24] 1084 	push	ar6
      00034D C0 05            [24] 1085 	push	ar5
      00034F C0 03            [24] 1086 	push	ar3
      000351 C0 04            [24] 1087 	push	ar4
      000353 90 00 C9         [24] 1088 	mov	dptr,#0x00c9
      000356 12r00r00         [24] 1089 	lcall	__mulint
      000359 AB 82            [24] 1090 	mov	r3,dpl
      00035B AC 83            [24] 1091 	mov	r4,dph
      00035D 15 81            [12] 1092 	dec	sp
      00035F 15 81            [12] 1093 	dec	sp
      000361 D0 05            [24] 1094 	pop	ar5
      000363 D0 06            [24] 1095 	pop	ar6
      000365 D0 07            [24] 1096 	pop	ar7
      000367 EB               [12] 1097 	mov	a,r3
      000368 24r00            [12] 1098 	add	a,#_g
      00036A FB               [12] 1099 	mov	r3,a
      00036B EC               [12] 1100 	mov	a,r4
      00036C 34s00            [12] 1101 	addc	a,#(_g >> 8)
      00036E FC               [12] 1102 	mov	r4,a
      00036F 74 02            [12] 1103 	mov	a,#0x02
      000371 2D               [12] 1104 	add	a,r5
      000372 FD               [12] 1105 	mov	r5,a
      000373 E4               [12] 1106 	clr	a
      000374 3E               [12] 1107 	addc	a,r6
      000375 FE               [12] 1108 	mov	r6,a
      000376 8D 82            [24] 1109 	mov	dpl,r5
      000378 8E 83            [24] 1110 	mov	dph,r6
      00037A 8F F0            [24] 1111 	mov	b,r7
      00037C 12r00r00         [24] 1112 	lcall	__gptrget
      00037F FD               [12] 1113 	mov	r5,a
      000380 A3               [24] 1114 	inc	dptr
      000381 12r00r00         [24] 1115 	lcall	__gptrget
      000384 FE               [12] 1116 	mov	r6,a
      000385 ED               [12] 1117 	mov	a,r5
      000386 2B               [12] 1118 	add	a,r3
      000387 F5 82            [12] 1119 	mov	dpl,a
      000389 EE               [12] 1120 	mov	a,r6
      00038A 3C               [12] 1121 	addc	a,r4
      00038B F5 83            [12] 1122 	mov	dph,a
      00038D 74 AA            [12] 1123 	mov	a,#0xaa
      00038F F0               [24] 1124 	movx	@dptr,a
                                   1125 ;	walk.c:167: process:
      000390 E5*00            [12] 1126 	mov	a,_bp
      000392 24 0F            [12] 1127 	add	a,#0x0f
      000394 FF               [12] 1128 	mov	r7,a
      000395 E5*00            [12] 1129 	mov	a,_bp
      000397 24 0B            [12] 1130 	add	a,#0x0b
      000399 F9               [12] 1131 	mov	r1,a
      00039A E5*00            [12] 1132 	mov	a,_bp
      00039C 24 03            [12] 1133 	add	a,#0x03
      00039E F8               [12] 1134 	mov	r0,a
      00039F A6 01            [24] 1135 	mov	@r0,ar1
      0003A1 74 02            [12] 1136 	mov	a,#0x02
      0003A3 29               [12] 1137 	add	a,r1
      0003A4 F8               [12] 1138 	mov	r0,a
      0003A5 E5*00            [12] 1139 	mov	a,_bp
      0003A7 24 07            [12] 1140 	add	a,#0x07
      0003A9 FD               [12] 1141 	mov	r5,a
      0003AA                       1142 00103$:
                                   1143 ;	walk.c:168: unsetOE(OE76_MASK7 | OE76_MASK6);
      0003AA 75 82 C0         [24] 1144 	mov	dpl,#0xc0
      0003AD C0 07            [24] 1145 	push	ar7
      0003AF C0 05            [24] 1146 	push	ar5
      0003B1 C0 01            [24] 1147 	push	ar1
      0003B3 C0 00            [24] 1148 	push	ar0
      0003B5 12r00r48         [24] 1149 	lcall	_unsetOE
      0003B8 D0 00            [24] 1150 	pop	ar0
      0003BA D0 01            [24] 1151 	pop	ar1
      0003BC D0 05            [24] 1152 	pop	ar5
                                   1153 ;	walk.c:170: if (!qget(&cur)) goto term;
      0003BE 8D 02            [24] 1154 	mov	ar2,r5
      0003C0 7B 00            [12] 1155 	mov	r3,#0x00
      0003C2 7C 40            [12] 1156 	mov	r4,#0x40
      0003C4 8A 82            [24] 1157 	mov	dpl,r2
      0003C6 8B 83            [24] 1158 	mov	dph,r3
      0003C8 8C F0            [24] 1159 	mov	b,r4
      0003CA C0 05            [24] 1160 	push	ar5
      0003CC C0 01            [24] 1161 	push	ar1
      0003CE C0 00            [24] 1162 	push	ar0
      0003D0 12r0Br8C         [24] 1163 	lcall	_qget
      0003D3 E5 82            [12] 1164 	mov	a,dpl
      0003D5 D0 00            [24] 1165 	pop	ar0
      0003D7 D0 01            [24] 1166 	pop	ar1
      0003D9 D0 05            [24] 1167 	pop	ar5
      0003DB D0 07            [24] 1168 	pop	ar7
      0003DD 70 03            [24] 1169 	jnz	00184$
      0003DF 02r06rAB         [24] 1170 	ljmp	00119$
      0003E2                       1171 00184$:
                                   1172 ;	walk.c:172: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      0003E2 74 02            [12] 1173 	mov	a,#0x02
      0003E4 2D               [12] 1174 	add	a,r5
      0003E5 FC               [12] 1175 	mov	r4,a
      0003E6 C0 00            [24] 1176 	push	ar0
      0003E8 A8*00            [24] 1177 	mov	r0,_bp
      0003EA 08               [12] 1178 	inc	r0
      0003EB C0 01            [24] 1179 	push	ar1
      0003ED A9 04            [24] 1180 	mov	r1,ar4
      0003EF E7               [12] 1181 	mov	a,@r1
      0003F0 F6               [12] 1182 	mov	@r0,a
      0003F1 09               [12] 1183 	inc	r1
      0003F2 E7               [12] 1184 	mov	a,@r1
      0003F3 08               [12] 1185 	inc	r0
      0003F4 F6               [12] 1186 	mov	@r0,a
      0003F5 D0 01            [24] 1187 	pop	ar1
      0003F7 A8 05            [24] 1188 	mov	r0,ar5
      0003F9 86 03            [24] 1189 	mov	ar3,@r0
      0003FB 08               [12] 1190 	inc	r0
      0003FC 86 06            [24] 1191 	mov	ar6,@r0
      0003FE D0 00            [24] 1192 	pop	ar0
      000400 C0 07            [24] 1193 	push	ar7
      000402 C0 05            [24] 1194 	push	ar5
      000404 C0 04            [24] 1195 	push	ar4
      000406 C0 01            [24] 1196 	push	ar1
      000408 C0 00            [24] 1197 	push	ar0
      00040A 85 00 F0         [24] 1198 	mov	b,ar0
      00040D A8*00            [24] 1199 	mov	r0,_bp
      00040F 08               [12] 1200 	inc	r0
      000410 E6               [12] 1201 	mov	a,@r0
      000411 C0 E0            [24] 1202 	push	acc
      000413 08               [12] 1203 	inc	r0
      000414 E6               [12] 1204 	mov	a,@r0
      000415 C0 E0            [24] 1205 	push	acc
      000417 C0 03            [24] 1206 	push	ar3
      000419 C0 06            [24] 1207 	push	ar6
      00041B 90rBCr72         [24] 1208 	mov	dptr,#_tp
      00041E E0               [24] 1209 	movx	a,@dptr
      00041F C0 E0            [24] 1210 	push	acc
      000421 A3               [24] 1211 	inc	dptr
      000422 E0               [24] 1212 	movx	a,@dptr
      000423 C0 E0            [24] 1213 	push	acc
      000425 90rBCr70         [24] 1214 	mov	dptr,#_hp
      000428 E0               [24] 1215 	movx	a,@dptr
      000429 C0 E0            [24] 1216 	push	acc
      00042B A3               [24] 1217 	inc	dptr
      00042C E0               [24] 1218 	movx	a,@dptr
      00042D C0 E0            [24] 1219 	push	acc
      00042F 74r0D            [12] 1220 	mov	a,#___str_1
      000431 C0 E0            [24] 1221 	push	acc
      000433 74s00            [12] 1222 	mov	a,#(___str_1 >> 8)
      000435 C0 E0            [24] 1223 	push	acc
      000437 74 80            [12] 1224 	mov	a,#0x80
      000439 C0 E0            [24] 1225 	push	acc
      00043B 12r00r00         [24] 1226 	lcall	_printf
      00043E E5 81            [12] 1227 	mov	a,sp
      000440 24 F5            [12] 1228 	add	a,#0xf5
      000442 F5 81            [12] 1229 	mov	sp,a
      000444 D0 00            [24] 1230 	pop	ar0
      000446 D0 01            [24] 1231 	pop	ar1
      000448 D0 04            [24] 1232 	pop	ar4
      00044A D0 05            [24] 1233 	pop	ar5
      00044C D0 07            [24] 1234 	pop	ar7
                                   1235 ;	walk.c:174: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      00044E C0 00            [24] 1236 	push	ar0
      000450 A8 04            [24] 1237 	mov	r0,ar4
      000452 86 04            [24] 1238 	mov	ar4,@r0
      000454 08               [12] 1239 	inc	r0
      000455 86 06            [24] 1240 	mov	ar6,@r0
      000457 D0 00            [24] 1241 	pop	ar0
      000459 0C               [12] 1242 	inc	r4
      00045A BC 00 01         [24] 1243 	cjne	r4,#0x00,00185$
      00045D 0E               [12] 1244 	inc	r6
      00045E                       1245 00185$:
      00045E C0 00            [24] 1246 	push	ar0
      000460 A8 05            [24] 1247 	mov	r0,ar5
      000462 86 02            [24] 1248 	mov	ar2,@r0
      000464 08               [12] 1249 	inc	r0
      000465 86 03            [24] 1250 	mov	ar3,@r0
      000467 D0 00            [24] 1251 	pop	ar0
      000469 74 04            [12] 1252 	mov	a,#0x04
      00046B 2A               [12] 1253 	add	a,r2
      00046C FA               [12] 1254 	mov	r2,a
      00046D E4               [12] 1255 	clr	a
      00046E 3B               [12] 1256 	addc	a,r3
      00046F FB               [12] 1257 	mov	r3,a
      000470 C0 07            [24] 1258 	push	ar7
      000472 C0 05            [24] 1259 	push	ar5
      000474 C0 01            [24] 1260 	push	ar1
      000476 C0 00            [24] 1261 	push	ar0
      000478 C0 04            [24] 1262 	push	ar4
      00047A C0 06            [24] 1263 	push	ar6
      00047C C0 02            [24] 1264 	push	ar2
      00047E C0 03            [24] 1265 	push	ar3
      000480 74r24            [12] 1266 	mov	a,#___str_2
      000482 C0 E0            [24] 1267 	push	acc
      000484 74s00            [12] 1268 	mov	a,#(___str_2 >> 8)
      000486 C0 E0            [24] 1269 	push	acc
      000488 74 80            [12] 1270 	mov	a,#0x80
      00048A C0 E0            [24] 1271 	push	acc
      00048C 12r00r00         [24] 1272 	lcall	_printf
      00048F E5 81            [12] 1273 	mov	a,sp
      000491 24 F9            [12] 1274 	add	a,#0xf9
      000493 F5 81            [12] 1275 	mov	sp,a
                                   1276 ;	walk.c:175: setOE(OE76_MASK6);
      000495 75 82 40         [24] 1277 	mov	dpl,#0x40
      000498 12r00r2F         [24] 1278 	lcall	_setOE
      00049B D0 00            [24] 1279 	pop	ar0
      00049D D0 01            [24] 1280 	pop	ar1
      00049F D0 05            [24] 1281 	pop	ar5
      0004A1 D0 07            [24] 1282 	pop	ar7
                                   1283 ;	walk.c:177: for (j = 0u; j < NMAX; j++)
      0004A3 7E 00            [12] 1284 	mov	r6,#0x00
                                   1285 ;	walk.c:204: return;
                                   1286 ;	walk.c:177: for (j = 0u; j < NMAX; j++)
      0004A5                       1287 00120$:
                                   1288 ;	walk.c:178: scramble[j] = j;
      0004A5 EE               [12] 1289 	mov	a,r6
      0004A6 2F               [12] 1290 	add	a,r7
      0004A7 C0 00            [24] 1291 	push	ar0
      0004A9 F8               [12] 1292 	mov	r0,a
      0004AA A6 06            [24] 1293 	mov	@r0,ar6
      0004AC D0 00            [24] 1294 	pop	ar0
                                   1295 ;	walk.c:177: for (j = 0u; j < NMAX; j++)
      0004AE 0E               [12] 1296 	inc	r6
      0004AF BE 10 00         [24] 1297 	cjne	r6,#0x10,00186$
      0004B2                       1298 00186$:
      0004B2 40 F1            [24] 1299 	jc	00120$
                                   1300 ;	walk.c:180: do ti = (uint8_t)(rand() % NMAX);
      0004B4 7C 00            [12] 1301 	mov	r4,#0x00
      0004B6                       1302 00107$:
      0004B6 C0 07            [24] 1303 	push	ar7
      0004B8 C0 05            [24] 1304 	push	ar5
      0004BA C0 04            [24] 1305 	push	ar4
      0004BC C0 01            [24] 1306 	push	ar1
      0004BE C0 00            [24] 1307 	push	ar0
      0004C0 12r00r00         [24] 1308 	lcall	_rand
      0004C3 AA 82            [24] 1309 	mov	r2,dpl
      0004C5 D0 00            [24] 1310 	pop	ar0
      0004C7 D0 01            [24] 1311 	pop	ar1
      0004C9 D0 04            [24] 1312 	pop	ar4
      0004CB D0 05            [24] 1313 	pop	ar5
      0004CD D0 07            [24] 1314 	pop	ar7
      0004CF 53 02 0F         [24] 1315 	anl	ar2,#0x0f
      0004D2 7B 00            [12] 1316 	mov	r3,#0x00
                                   1317 ;	walk.c:181: while (ti == j);
      0004D4 EA               [12] 1318 	mov	a,r2
      0004D5 B5 04 02         [24] 1319 	cjne	a,ar4,00188$
      0004D8 80 DC            [24] 1320 	sjmp	00107$
      0004DA                       1321 00188$:
                                   1322 ;	walk.c:182: do tj = (uint8_t)(rand() % NMAX);
      0004DA                       1323 00110$:
      0004DA C0 05            [24] 1324 	push	ar5
      0004DC C0 07            [24] 1325 	push	ar7
      0004DE C0 04            [24] 1326 	push	ar4
      0004E0 C0 02            [24] 1327 	push	ar2
      0004E2 C0 01            [24] 1328 	push	ar1
      0004E4 C0 00            [24] 1329 	push	ar0
      0004E6 12r00r00         [24] 1330 	lcall	_rand
      0004E9 AB 82            [24] 1331 	mov	r3,dpl
      0004EB D0 00            [24] 1332 	pop	ar0
      0004ED D0 01            [24] 1333 	pop	ar1
      0004EF D0 02            [24] 1334 	pop	ar2
      0004F1 D0 04            [24] 1335 	pop	ar4
      0004F3 D0 07            [24] 1336 	pop	ar7
      0004F5 53 03 0F         [24] 1337 	anl	ar3,#0x0f
      0004F8 8B 06            [24] 1338 	mov	ar6,r3
                                   1339 ;	walk.c:183: while (ti == tj);
      0004FA EA               [12] 1340 	mov	a,r2
      0004FB B5 06 04         [24] 1341 	cjne	a,ar6,00189$
      0004FE D0 05            [24] 1342 	pop	ar5
      000500 80 D8            [24] 1343 	sjmp	00110$
      000502                       1344 00189$:
                                   1345 ;	walk.c:184: tx = scramble[ti];
      000502 EA               [12] 1346 	mov	a,r2
      000503 2F               [12] 1347 	add	a,r7
      000504 FB               [12] 1348 	mov	r3,a
      000505 C0 00            [24] 1349 	push	ar0
      000507 E5*00            [12] 1350 	mov	a,_bp
      000509 24 1F            [12] 1351 	add	a,#0x1f
      00050B F8               [12] 1352 	mov	r0,a
      00050C C0 01            [24] 1353 	push	ar1
      00050E A9 03            [24] 1354 	mov	r1,ar3
      000510 E7               [12] 1355 	mov	a,@r1
      000511 F6               [12] 1356 	mov	@r0,a
                                   1357 ;	walk.c:185: scramble[ti] = scramble[tj];
      000512 EE               [12] 1358 	mov	a,r6
      000513 2F               [12] 1359 	add	a,r7
      000514 FD               [12] 1360 	mov	r5,a
      000515 A8 05            [24] 1361 	mov	r0,ar5
      000517 86 02            [24] 1362 	mov	ar2,@r0
      000519 A8 03            [24] 1363 	mov	r0,ar3
      00051B A6 02            [24] 1364 	mov	@r0,ar2
                                   1365 ;	walk.c:186: scramble[tj] = tx;
      00051D A8 05            [24] 1366 	mov	r0,ar5
      00051F E5*00            [12] 1367 	mov	a,_bp
      000521 24 1F            [12] 1368 	add	a,#0x1f
      000523 F9               [12] 1369 	mov	r1,a
      000524 E7               [12] 1370 	mov	a,@r1
      000525 F6               [12] 1371 	mov	@r0,a
      000526 D0 00            [24] 1372 	pop	ar0
      000528 D0 01            [24] 1373 	pop	ar1
                                   1374 ;	walk.c:179: for (j = 0u; j < NMAX; j++) {
      00052A 0C               [12] 1375 	inc	r4
      00052B BC 10 00         [24] 1376 	cjne	r4,#0x10,00190$
      00052E                       1377 00190$:
      00052E D0 05            [24] 1378 	pop	ar5
      000530 40 84            [24] 1379 	jc	00107$
                                   1380 ;	walk.c:189: for (j = 0u; j < NMAX; j++) {
      000532 C0 00            [24] 1381 	push	ar0
      000534 A8*00            [24] 1382 	mov	r0,_bp
      000536 08               [12] 1383 	inc	r0
      000537 A6 05            [24] 1384 	mov	@r0,ar5
      000539 E5*00            [12] 1385 	mov	a,_bp
      00053B 24 20            [12] 1386 	add	a,#0x20
      00053D F8               [12] 1387 	mov	r0,a
      00053E 76 00            [12] 1388 	mov	@r0,#0x00
      000540 D0 00            [24] 1389 	pop	ar0
      000542                       1390 00124$:
                                   1391 ;	walk.c:190: unsetOE(OE76_MASK7);
      000542 C0 05            [24] 1392 	push	ar5
      000544 75 82 80         [24] 1393 	mov	dpl,#0x80
      000547 C0 07            [24] 1394 	push	ar7
      000549 C0 05            [24] 1395 	push	ar5
      00054B C0 01            [24] 1396 	push	ar1
      00054D C0 00            [24] 1397 	push	ar0
      00054F 12r00r48         [24] 1398 	lcall	_unsetOE
      000552 D0 00            [24] 1399 	pop	ar0
      000554 D0 01            [24] 1400 	pop	ar1
      000556 D0 05            [24] 1401 	pop	ar5
      000558 D0 07            [24] 1402 	pop	ar7
                                   1403 ;	walk.c:192: if (update(&t, &cur, scramble[j])) {
      00055A C0 00            [24] 1404 	push	ar0
      00055C E5*00            [12] 1405 	mov	a,_bp
      00055E 24 20            [12] 1406 	add	a,#0x20
      000560 F8               [12] 1407 	mov	r0,a
      000561 E6               [12] 1408 	mov	a,@r0
      000562 2F               [12] 1409 	add	a,r7
      000563 FA               [12] 1410 	mov	r2,a
      000564 A8 02            [24] 1411 	mov	r0,ar2
      000566 86 03            [24] 1412 	mov	ar3,@r0
      000568 A8*00            [24] 1413 	mov	r0,_bp
      00056A 08               [12] 1414 	inc	r0
      00056B C0 01            [24] 1415 	push	ar1
      00056D E5*00            [12] 1416 	mov	a,_bp
      00056F 24 04            [12] 1417 	add	a,#0x04
      000571 F9               [12] 1418 	mov	r1,a
      000572 E6               [12] 1419 	mov	a,@r0
      000573 F7               [12] 1420 	mov	@r1,a
      000574 09               [12] 1421 	inc	r1
      000575 77 00            [12] 1422 	mov	@r1,#0x00
      000577 09               [12] 1423 	inc	r1
      000578 77 40            [12] 1424 	mov	@r1,#0x40
      00057A D0 01            [24] 1425 	pop	ar1
      00057C D0 00            [24] 1426 	pop	ar0
      00057E 89 02            [24] 1427 	mov	ar2,r1
      000580 7C 00            [12] 1428 	mov	r4,#0x00
      000582 7E 40            [12] 1429 	mov	r6,#0x40
      000584 C0 07            [24] 1430 	push	ar7
      000586 C0 05            [24] 1431 	push	ar5
      000588 C0 01            [24] 1432 	push	ar1
      00058A C0 00            [24] 1433 	push	ar0
      00058C C0 03            [24] 1434 	push	ar3
      00058E 85 00 F0         [24] 1435 	mov	b,ar0
      000591 E5*00            [12] 1436 	mov	a,_bp
      000593 24 04            [12] 1437 	add	a,#0x04
      000595 F8               [12] 1438 	mov	r0,a
      000596 E6               [12] 1439 	mov	a,@r0
      000597 C0 E0            [24] 1440 	push	acc
      000599 08               [12] 1441 	inc	r0
      00059A E6               [12] 1442 	mov	a,@r0
      00059B C0 E0            [24] 1443 	push	acc
      00059D 08               [12] 1444 	inc	r0
      00059E E6               [12] 1445 	mov	a,@r0
      00059F C0 E0            [24] 1446 	push	acc
      0005A1 8A 82            [24] 1447 	mov	dpl,r2
      0005A3 8C 83            [24] 1448 	mov	dph,r4
      0005A5 8E F0            [24] 1449 	mov	b,r6
      0005A7 12r00r7B         [24] 1450 	lcall	_update
      0005AA AE 82            [24] 1451 	mov	r6,dpl
      0005AC E5 81            [12] 1452 	mov	a,sp
      0005AE 24 FC            [12] 1453 	add	a,#0xfc
      0005B0 F5 81            [12] 1454 	mov	sp,a
      0005B2 D0 00            [24] 1455 	pop	ar0
      0005B4 D0 01            [24] 1456 	pop	ar1
      0005B6 D0 05            [24] 1457 	pop	ar5
      0005B8 D0 07            [24] 1458 	pop	ar7
      0005BA D0 05            [24] 1459 	pop	ar5
      0005BC EE               [12] 1460 	mov	a,r6
      0005BD 70 03            [24] 1461 	jnz	00192$
      0005BF 02r06r91         [24] 1462 	ljmp	00125$
      0005C2                       1463 00192$:
                                   1464 ;	walk.c:193: if (!qadd(&t)) bang();
      0005C2 C0 00            [24] 1465 	push	ar0
      0005C4 E5*00            [12] 1466 	mov	a,_bp
      0005C6 24 03            [12] 1467 	add	a,#0x03
      0005C8 F8               [12] 1468 	mov	r0,a
      0005C9 86 03            [24] 1469 	mov	ar3,@r0
      0005CB 7C 00            [12] 1470 	mov	r4,#0x00
      0005CD 7E 40            [12] 1471 	mov	r6,#0x40
      0005CF D0 00            [24] 1472 	pop	ar0
      0005D1 8B 82            [24] 1473 	mov	dpl,r3
      0005D3 8C 83            [24] 1474 	mov	dph,r4
      0005D5 8E F0            [24] 1475 	mov	b,r6
      0005D7 C0 07            [24] 1476 	push	ar7
      0005D9 C0 05            [24] 1477 	push	ar5
      0005DB C0 01            [24] 1478 	push	ar1
      0005DD C0 00            [24] 1479 	push	ar0
      0005DF 12r0Ar9A         [24] 1480 	lcall	_qadd
      0005E2 E5 82            [12] 1481 	mov	a,dpl
      0005E4 D0 00            [24] 1482 	pop	ar0
      0005E6 D0 01            [24] 1483 	pop	ar1
      0005E8 D0 05            [24] 1484 	pop	ar5
      0005EA D0 07            [24] 1485 	pop	ar7
      0005EC 70 13            [24] 1486 	jnz	00115$
      0005EE C0 07            [24] 1487 	push	ar7
      0005F0 C0 05            [24] 1488 	push	ar5
      0005F2 C0 01            [24] 1489 	push	ar1
      0005F4 C0 00            [24] 1490 	push	ar0
      0005F6 12r00r22         [24] 1491 	lcall	_bang
      0005F9 D0 00            [24] 1492 	pop	ar0
      0005FB D0 01            [24] 1493 	pop	ar1
      0005FD D0 05            [24] 1494 	pop	ar5
      0005FF D0 07            [24] 1495 	pop	ar7
      000601                       1496 00115$:
                                   1497 ;	walk.c:194: g[t.r][t.c] = 0xaau;
      000601 87 04            [24] 1498 	mov	ar4,@r1
      000603 09               [12] 1499 	inc	r1
      000604 87 06            [24] 1500 	mov	ar6,@r1
      000606 19               [12] 1501 	dec	r1
      000607 C0 07            [24] 1502 	push	ar7
      000609 C0 05            [24] 1503 	push	ar5
      00060B C0 01            [24] 1504 	push	ar1
      00060D C0 00            [24] 1505 	push	ar0
      00060F C0 04            [24] 1506 	push	ar4
      000611 C0 06            [24] 1507 	push	ar6
      000613 90 00 C9         [24] 1508 	mov	dptr,#0x00c9
      000616 12r00r00         [24] 1509 	lcall	__mulint
      000619 AC 82            [24] 1510 	mov	r4,dpl
      00061B AE 83            [24] 1511 	mov	r6,dph
      00061D 15 81            [12] 1512 	dec	sp
      00061F 15 81            [12] 1513 	dec	sp
      000621 D0 00            [24] 1514 	pop	ar0
      000623 EC               [12] 1515 	mov	a,r4
      000624 24r00            [12] 1516 	add	a,#_g
      000626 FC               [12] 1517 	mov	r4,a
      000627 EE               [12] 1518 	mov	a,r6
      000628 34s00            [12] 1519 	addc	a,#(_g >> 8)
      00062A FE               [12] 1520 	mov	r6,a
      00062B 86 02            [24] 1521 	mov	ar2,@r0
      00062D 08               [12] 1522 	inc	r0
      00062E 86 03            [24] 1523 	mov	ar3,@r0
      000630 18               [12] 1524 	dec	r0
      000631 EA               [12] 1525 	mov	a,r2
      000632 2C               [12] 1526 	add	a,r4
      000633 F5 82            [12] 1527 	mov	dpl,a
      000635 EB               [12] 1528 	mov	a,r3
      000636 3E               [12] 1529 	addc	a,r6
      000637 F5 83            [12] 1530 	mov	dph,a
      000639 74 AA            [12] 1531 	mov	a,#0xaa
      00063B F0               [24] 1532 	movx	@dptr,a
                                   1533 ;	walk.c:196: setOE(OE76_MASK7);
      00063C 75 82 80         [24] 1534 	mov	dpl,#0x80
      00063F C0 00            [24] 1535 	push	ar0
      000641 12r00r2F         [24] 1536 	lcall	_setOE
      000644 D0 00            [24] 1537 	pop	ar0
      000646 D0 01            [24] 1538 	pop	ar1
      000648 D0 05            [24] 1539 	pop	ar5
      00064A D0 07            [24] 1540 	pop	ar7
                                   1541 ;	walk.c:197: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      00064C 86 04            [24] 1542 	mov	ar4,@r0
      00064E 08               [12] 1543 	inc	r0
      00064F 86 06            [24] 1544 	mov	ar6,@r0
      000651 18               [12] 1545 	dec	r0
      000652 0C               [12] 1546 	inc	r4
      000653 BC 00 01         [24] 1547 	cjne	r4,#0x00,00194$
      000656 0E               [12] 1548 	inc	r6
      000657                       1549 00194$:
      000657 87 02            [24] 1550 	mov	ar2,@r1
      000659 09               [12] 1551 	inc	r1
      00065A 87 03            [24] 1552 	mov	ar3,@r1
      00065C 19               [12] 1553 	dec	r1
      00065D 74 04            [12] 1554 	mov	a,#0x04
      00065F 2A               [12] 1555 	add	a,r2
      000660 FA               [12] 1556 	mov	r2,a
      000661 E4               [12] 1557 	clr	a
      000662 3B               [12] 1558 	addc	a,r3
      000663 FB               [12] 1559 	mov	r3,a
      000664 C0 07            [24] 1560 	push	ar7
      000666 C0 05            [24] 1561 	push	ar5
      000668 C0 01            [24] 1562 	push	ar1
      00066A C0 00            [24] 1563 	push	ar0
      00066C C0 04            [24] 1564 	push	ar4
      00066E C0 06            [24] 1565 	push	ar6
      000670 C0 02            [24] 1566 	push	ar2
      000672 C0 03            [24] 1567 	push	ar3
      000674 74r2E            [12] 1568 	mov	a,#___str_3
      000676 C0 E0            [24] 1569 	push	acc
      000678 74s00            [12] 1570 	mov	a,#(___str_3 >> 8)
      00067A C0 E0            [24] 1571 	push	acc
      00067C 74 80            [12] 1572 	mov	a,#0x80
      00067E C0 E0            [24] 1573 	push	acc
      000680 12r00r00         [24] 1574 	lcall	_printf
      000683 E5 81            [12] 1575 	mov	a,sp
      000685 24 F9            [12] 1576 	add	a,#0xf9
      000687 F5 81            [12] 1577 	mov	sp,a
      000689 D0 00            [24] 1578 	pop	ar0
      00068B D0 01            [24] 1579 	pop	ar1
      00068D D0 05            [24] 1580 	pop	ar5
      00068F D0 07            [24] 1581 	pop	ar7
      000691                       1582 00125$:
                                   1583 ;	walk.c:189: for (j = 0u; j < NMAX; j++) {
      000691 C0 00            [24] 1584 	push	ar0
      000693 E5*00            [12] 1585 	mov	a,_bp
      000695 24 20            [12] 1586 	add	a,#0x20
      000697 F8               [12] 1587 	mov	r0,a
      000698 06               [12] 1588 	inc	@r0
      000699 E5*00            [12] 1589 	mov	a,_bp
      00069B 24 20            [12] 1590 	add	a,#0x20
      00069D F8               [12] 1591 	mov	r0,a
      00069E B6 10 00         [24] 1592 	cjne	@r0,#0x10,00195$
      0006A1                       1593 00195$:
      0006A1 D0 00            [24] 1594 	pop	ar0
      0006A3 50 03            [24] 1595 	jnc	00196$
      0006A5 02r05r42         [24] 1596 	ljmp	00124$
      0006A8                       1597 00196$:
                                   1598 ;	walk.c:201: goto process;
      0006A8 02r03rAA         [24] 1599 	ljmp	00103$
                                   1600 ;	walk.c:203: term:
      0006AB                       1601 00119$:
                                   1602 ;	walk.c:204: return;
                                   1603 ;	walk.c:205: }
      0006AB 85*00 81         [24] 1604 	mov	sp,_bp
      0006AE D0*00            [24] 1605 	pop	_bp
      0006B0 22               [24] 1606 	ret
                                   1607 ;------------------------------------------------------------
                                   1608 ;Allocation info for local variables in function 'main'
                                   1609 ;------------------------------------------------------------
                                   1610 ;initial                   Allocated to stack - _bp +5
                                   1611 ;N                         Allocated to stack - _bp +9
                                   1612 ;i                         Allocated to stack - _bp +11
                                   1613 ;j                         Allocated to registers r2 r6 
                                   1614 ;sloc0                     Allocated to stack - _bp +1
                                   1615 ;sloc1                     Allocated to stack - _bp +3
                                   1616 ;sloc2                     Allocated to stack - _bp +15
                                   1617 ;------------------------------------------------------------
                                   1618 ;	walk.c:207: void main(void) {
                                   1619 ;	-----------------------------------------
                                   1620 ;	 function main
                                   1621 ;	-----------------------------------------
      0006B1                       1622 _main:
      0006B1 C0*00            [24] 1623 	push	_bp
      0006B3 E5 81            [12] 1624 	mov	a,sp
      0006B5 F5*00            [12] 1625 	mov	_bp,a
      0006B7 24 0C            [12] 1626 	add	a,#0x0c
      0006B9 F5 81            [12] 1627 	mov	sp,a
                                   1628 ;	walk.c:212: i0 = 1u;
      0006BB 78r00            [12] 1629 	mov	r0,#_i0
      0006BD 76 01            [12] 1630 	mov	@r0,#0x01
                                   1631 ;	walk.c:214: P1_7 = 1;
                                   1632 ;	assignBit
      0006BF D2 97            [12] 1633 	setb	_P1_7
                                   1634 ;	walk.c:215: IT0 = 1;
                                   1635 ;	assignBit
      0006C1 D2 88            [12] 1636 	setb	_IT0
                                   1637 ;	walk.c:216: EX0 = 1;
                                   1638 ;	assignBit
      0006C3 D2 A8            [12] 1639 	setb	_EX0
                                   1640 ;	walk.c:217: EA = 1;
                                   1641 ;	assignBit
      0006C5 D2 AF            [12] 1642 	setb	_EA
                                   1643 ;	walk.c:219: srand(RND);
      0006C7 90 80 00         [24] 1644 	mov	dptr,#_RND
      0006CA E0               [24] 1645 	movx	a,@dptr
      0006CB FE               [12] 1646 	mov	r6,a
      0006CC A3               [24] 1647 	inc	dptr
      0006CD E0               [24] 1648 	movx	a,@dptr
      0006CE FF               [12] 1649 	mov	r7,a
      0006CF 8E 82            [24] 1650 	mov	dpl,r6
      0006D1 8F 83            [24] 1651 	mov	dph,r7
      0006D3 12r00r00         [24] 1652 	lcall	_srand
                                   1653 ;	walk.c:220: qinit();
      0006D6 12r0Ar8C         [24] 1654 	lcall	_qinit
                                   1655 ;	walk.c:222: puts("\033[2J\033[?25l");
      0006D9 90r00r38         [24] 1656 	mov	dptr,#___str_4
      0006DC 75 F0 80         [24] 1657 	mov	b,#0x80
      0006DF 12r00r00         [24] 1658 	lcall	_puts
                                   1659 ;	walk.c:224: while (i0) {
      0006E2 E5*00            [12] 1660 	mov	a,_bp
      0006E4 24 05            [12] 1661 	add	a,#0x05
      0006E6 F9               [12] 1662 	mov	r1,a
      0006E7 FF               [12] 1663 	mov	r7,a
      0006E8 E5*00            [12] 1664 	mov	a,_bp
      0006EA 24 09            [12] 1665 	add	a,#0x09
      0006EC F8               [12] 1666 	mov	r0,a
      0006ED E4               [12] 1667 	clr	a
      0006EE F6               [12] 1668 	mov	@r0,a
      0006EF 08               [12] 1669 	inc	r0
      0006F0 F6               [12] 1670 	mov	@r0,a
      0006F1                       1671 00108$:
      0006F1 78r00            [12] 1672 	mov	r0,#_i0
      0006F3 E6               [12] 1673 	mov	a,@r0
      0006F4 70 03            [24] 1674 	jnz	00182$
      0006F6 02r0Ar78         [24] 1675 	ljmp	00110$
      0006F9                       1676 00182$:
                                   1677 ;	walk.c:225: for (i = 0; i < ROWS; i++)
      0006F9 7B 00            [12] 1678 	mov	r3,#0x00
      0006FB 7C 00            [12] 1679 	mov	r4,#0x00
      0006FD A8*00            [24] 1680 	mov	r0,_bp
      0006FF 08               [12] 1681 	inc	r0
      000700 E4               [12] 1682 	clr	a
      000701 F6               [12] 1683 	mov	@r0,a
      000702 08               [12] 1684 	inc	r0
      000703 F6               [12] 1685 	mov	@r0,a
                                   1686 ;	walk.c:226: for (j = 0; j < COLS; j++)
      000704                       1687 00125$:
      000704 A8*00            [24] 1688 	mov	r0,_bp
      000706 08               [12] 1689 	inc	r0
      000707 C0 01            [24] 1690 	push	ar1
      000709 E5*00            [12] 1691 	mov	a,_bp
      00070B 24 03            [12] 1692 	add	a,#0x03
      00070D F9               [12] 1693 	mov	r1,a
      00070E E6               [12] 1694 	mov	a,@r0
      00070F 24r00            [12] 1695 	add	a,#_g
      000711 F7               [12] 1696 	mov	@r1,a
      000712 08               [12] 1697 	inc	r0
      000713 E6               [12] 1698 	mov	a,@r0
      000714 34s00            [12] 1699 	addc	a,#(_g >> 8)
      000716 09               [12] 1700 	inc	r1
      000717 F7               [12] 1701 	mov	@r1,a
      000718 D0 01            [24] 1702 	pop	ar1
      00071A 7A 00            [12] 1703 	mov	r2,#0x00
      00071C 7E 00            [12] 1704 	mov	r6,#0x00
      00071E                       1705 00112$:
                                   1706 ;	walk.c:227: g[i][j] = 0x55u;
      00071E E5*00            [12] 1707 	mov	a,_bp
      000720 24 03            [12] 1708 	add	a,#0x03
      000722 F8               [12] 1709 	mov	r0,a
      000723 EA               [12] 1710 	mov	a,r2
      000724 26               [12] 1711 	add	a,@r0
      000725 F5 82            [12] 1712 	mov	dpl,a
      000727 EE               [12] 1713 	mov	a,r6
      000728 08               [12] 1714 	inc	r0
      000729 36               [12] 1715 	addc	a,@r0
      00072A F5 83            [12] 1716 	mov	dph,a
      00072C 74 55            [12] 1717 	mov	a,#0x55
      00072E F0               [24] 1718 	movx	@dptr,a
                                   1719 ;	walk.c:226: for (j = 0; j < COLS; j++)
      00072F 0A               [12] 1720 	inc	r2
      000730 BA 00 01         [24] 1721 	cjne	r2,#0x00,00183$
      000733 0E               [12] 1722 	inc	r6
      000734                       1723 00183$:
      000734 C3               [12] 1724 	clr	c
      000735 EA               [12] 1725 	mov	a,r2
      000736 94 C9            [12] 1726 	subb	a,#0xc9
      000738 EE               [12] 1727 	mov	a,r6
      000739 64 80            [12] 1728 	xrl	a,#0x80
      00073B 94 80            [12] 1729 	subb	a,#0x80
      00073D 40 DF            [24] 1730 	jc	00112$
                                   1731 ;	walk.c:225: for (i = 0; i < ROWS; i++)
      00073F A8*00            [24] 1732 	mov	r0,_bp
      000741 08               [12] 1733 	inc	r0
      000742 74 C9            [12] 1734 	mov	a,#0xc9
      000744 26               [12] 1735 	add	a,@r0
      000745 F6               [12] 1736 	mov	@r0,a
      000746 E4               [12] 1737 	clr	a
      000747 08               [12] 1738 	inc	r0
      000748 36               [12] 1739 	addc	a,@r0
      000749 F6               [12] 1740 	mov	@r0,a
      00074A 0B               [12] 1741 	inc	r3
      00074B BB 00 01         [24] 1742 	cjne	r3,#0x00,00185$
      00074E 0C               [12] 1743 	inc	r4
      00074F                       1744 00185$:
      00074F C3               [12] 1745 	clr	c
      000750 EB               [12] 1746 	mov	a,r3
      000751 94 30            [12] 1747 	subb	a,#0x30
      000753 EC               [12] 1748 	mov	a,r4
      000754 64 80            [12] 1749 	xrl	a,#0x80
      000756 94 80            [12] 1750 	subb	a,#0x80
      000758 40 AA            [24] 1751 	jc	00125$
                                   1752 ;	walk.c:229: initial.r = rand() % ROWS;
      00075A E5*00            [12] 1753 	mov	a,_bp
      00075C 24 05            [12] 1754 	add	a,#0x05
      00075E F8               [12] 1755 	mov	r0,a
      00075F C0 07            [24] 1756 	push	ar7
      000761 C0 01            [24] 1757 	push	ar1
      000763 C0 00            [24] 1758 	push	ar0
      000765 12r00r00         [24] 1759 	lcall	_rand
      000768 AD 82            [24] 1760 	mov	r5,dpl
      00076A AE 83            [24] 1761 	mov	r6,dph
      00076C 74 30            [12] 1762 	mov	a,#0x30
      00076E C0 E0            [24] 1763 	push	acc
      000770 E4               [12] 1764 	clr	a
      000771 C0 E0            [24] 1765 	push	acc
      000773 8D 82            [24] 1766 	mov	dpl,r5
      000775 8E 83            [24] 1767 	mov	dph,r6
      000777 12r00r00         [24] 1768 	lcall	__modsint
      00077A AD 82            [24] 1769 	mov	r5,dpl
      00077C AE 83            [24] 1770 	mov	r6,dph
      00077E 15 81            [12] 1771 	dec	sp
      000780 15 81            [12] 1772 	dec	sp
      000782 D0 00            [24] 1773 	pop	ar0
      000784 D0 01            [24] 1774 	pop	ar1
      000786 A6 05            [24] 1775 	mov	@r0,ar5
      000788 08               [12] 1776 	inc	r0
      000789 A6 06            [24] 1777 	mov	@r0,ar6
      00078B 18               [12] 1778 	dec	r0
                                   1779 ;	walk.c:230: initial.c = rand() % COLS;
      00078C 74 02            [12] 1780 	mov	a,#0x02
      00078E 29               [12] 1781 	add	a,r1
      00078F F8               [12] 1782 	mov	r0,a
      000790 C0 01            [24] 1783 	push	ar1
      000792 C0 00            [24] 1784 	push	ar0
      000794 12r00r00         [24] 1785 	lcall	_rand
      000797 AD 82            [24] 1786 	mov	r5,dpl
      000799 AE 83            [24] 1787 	mov	r6,dph
      00079B 74 C9            [12] 1788 	mov	a,#0xc9
      00079D C0 E0            [24] 1789 	push	acc
      00079F E4               [12] 1790 	clr	a
      0007A0 C0 E0            [24] 1791 	push	acc
      0007A2 8D 82            [24] 1792 	mov	dpl,r5
      0007A4 8E 83            [24] 1793 	mov	dph,r6
      0007A6 12r00r00         [24] 1794 	lcall	__modsint
      0007A9 AD 82            [24] 1795 	mov	r5,dpl
      0007AB AE 83            [24] 1796 	mov	r6,dph
      0007AD 15 81            [12] 1797 	dec	sp
      0007AF 15 81            [12] 1798 	dec	sp
      0007B1 D0 00            [24] 1799 	pop	ar0
      0007B3 A6 05            [24] 1800 	mov	@r0,ar5
      0007B5 08               [12] 1801 	inc	r0
      0007B6 A6 06            [24] 1802 	mov	@r0,ar6
      0007B8 18               [12] 1803 	dec	r0
                                   1804 ;	walk.c:232: puts("\033[2J\033[?25l");
      0007B9 90r00r38         [24] 1805 	mov	dptr,#___str_4
      0007BC 75 F0 80         [24] 1806 	mov	b,#0x80
      0007BF C0 00            [24] 1807 	push	ar0
      0007C1 12r00r00         [24] 1808 	lcall	_puts
      0007C4 D0 00            [24] 1809 	pop	ar0
      0007C6 D0 01            [24] 1810 	pop	ar1
                                   1811 ;	walk.c:233: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      0007C8 86 05            [24] 1812 	mov	ar5,@r0
      0007CA 08               [12] 1813 	inc	r0
      0007CB 86 06            [24] 1814 	mov	ar6,@r0
      0007CD 18               [12] 1815 	dec	r0
      0007CE 87 03            [24] 1816 	mov	ar3,@r1
      0007D0 09               [12] 1817 	inc	r1
      0007D1 87 04            [24] 1818 	mov	ar4,@r1
      0007D3 19               [12] 1819 	dec	r1
      0007D4 C0 01            [24] 1820 	push	ar1
      0007D6 C0 05            [24] 1821 	push	ar5
      0007D8 C0 06            [24] 1822 	push	ar6
      0007DA C0 03            [24] 1823 	push	ar3
      0007DC C0 04            [24] 1824 	push	ar4
      0007DE E5*00            [12] 1825 	mov	a,_bp
      0007E0 24 09            [12] 1826 	add	a,#0x09
      0007E2 F8               [12] 1827 	mov	r0,a
      0007E3 E6               [12] 1828 	mov	a,@r0
      0007E4 C0 E0            [24] 1829 	push	acc
      0007E6 08               [12] 1830 	inc	r0
      0007E7 E6               [12] 1831 	mov	a,@r0
      0007E8 C0 E0            [24] 1832 	push	acc
      0007EA 74r43            [12] 1833 	mov	a,#___str_5
      0007EC C0 E0            [24] 1834 	push	acc
      0007EE 74s00            [12] 1835 	mov	a,#(___str_5 >> 8)
      0007F0 C0 E0            [24] 1836 	push	acc
      0007F2 74 80            [12] 1837 	mov	a,#0x80
      0007F4 C0 E0            [24] 1838 	push	acc
      0007F6 12r00r00         [24] 1839 	lcall	_printf
      0007F9 E5 81            [12] 1840 	mov	a,sp
      0007FB 24 F7            [12] 1841 	add	a,#0xf7
      0007FD F5 81            [12] 1842 	mov	sp,a
      0007FF D0 01            [24] 1843 	pop	ar1
      000801 D0 07            [24] 1844 	pop	ar7
                                   1845 ;	walk.c:235: for (i = 0; i < REG; i++) {
      000803 E5*00            [12] 1846 	mov	a,_bp
      000805 24 0B            [12] 1847 	add	a,#0x0b
      000807 F8               [12] 1848 	mov	r0,a
      000808 E4               [12] 1849 	clr	a
      000809 F6               [12] 1850 	mov	@r0,a
      00080A 08               [12] 1851 	inc	r0
      00080B F6               [12] 1852 	mov	@r0,a
      00080C                       1853 00116$:
                                   1854 ;	walk.c:236: neigh[i].r = neigh[REG + i].r * (1 + rand() % 32);
      00080C C0 07            [24] 1855 	push	ar7
      00080E E5*00            [12] 1856 	mov	a,_bp
      000810 24 0B            [12] 1857 	add	a,#0x0b
      000812 F8               [12] 1858 	mov	r0,a
      000813 E6               [12] 1859 	mov	a,@r0
      000814 25 E0            [12] 1860 	add	a,acc
      000816 FB               [12] 1861 	mov	r3,a
      000817 08               [12] 1862 	inc	r0
      000818 E6               [12] 1863 	mov	a,@r0
      000819 33               [12] 1864 	rlc	a
      00081A FC               [12] 1865 	mov	r4,a
      00081B EB               [12] 1866 	mov	a,r3
      00081C 2B               [12] 1867 	add	a,r3
      00081D FB               [12] 1868 	mov	r3,a
      00081E EC               [12] 1869 	mov	a,r4
      00081F 33               [12] 1870 	rlc	a
      000820 FC               [12] 1871 	mov	r4,a
      000821 E5*00            [12] 1872 	mov	a,_bp
      000823 24 03            [12] 1873 	add	a,#0x03
      000825 F8               [12] 1874 	mov	r0,a
      000826 EB               [12] 1875 	mov	a,r3
      000827 24r00            [12] 1876 	add	a,#_neigh
      000829 F6               [12] 1877 	mov	@r0,a
      00082A EC               [12] 1878 	mov	a,r4
      00082B 34s00            [12] 1879 	addc	a,#(_neigh >> 8)
      00082D 08               [12] 1880 	inc	r0
      00082E F6               [12] 1881 	mov	@r0,a
      00082F E5*00            [12] 1882 	mov	a,_bp
      000831 24 0B            [12] 1883 	add	a,#0x0b
      000833 F8               [12] 1884 	mov	r0,a
      000834 86 06            [24] 1885 	mov	ar6,@r0
      000836 74 08            [12] 1886 	mov	a,#0x08
      000838 2E               [12] 1887 	add	a,r6
      000839 FE               [12] 1888 	mov	r6,a
      00083A C2 D5            [12] 1889 	clr	F0
      00083C 75 F0 04         [24] 1890 	mov	b,#0x04
      00083F EE               [12] 1891 	mov	a,r6
      000840 30 E7 04         [24] 1892 	jnb	acc.7,00187$
      000843 B2 D5            [12] 1893 	cpl	F0
      000845 F4               [12] 1894 	cpl	a
      000846 04               [12] 1895 	inc	a
      000847                       1896 00187$:
      000847 A4               [48] 1897 	mul	ab
      000848 30 D5 0A         [24] 1898 	jnb	F0,00188$
      00084B F4               [12] 1899 	cpl	a
      00084C 24 01            [12] 1900 	add	a,#0x01
      00084E C5 F0            [12] 1901 	xch	a,b
      000850 F4               [12] 1902 	cpl	a
      000851 34 00            [12] 1903 	addc	a,#0x00
      000853 C5 F0            [12] 1904 	xch	a,b
      000855                       1905 00188$:
      000855 FE               [12] 1906 	mov	r6,a
      000856 AD F0            [24] 1907 	mov	r5,b
      000858 24r00            [12] 1908 	add	a,#_neigh
      00085A F5 82            [12] 1909 	mov	dpl,a
      00085C ED               [12] 1910 	mov	a,r5
      00085D 34s00            [12] 1911 	addc	a,#(_neigh >> 8)
      00085F F5 83            [12] 1912 	mov	dph,a
      000861 A8*00            [24] 1913 	mov	r0,_bp
      000863 08               [12] 1914 	inc	r0
      000864 E0               [24] 1915 	movx	a,@dptr
      000865 F6               [12] 1916 	mov	@r0,a
      000866 A3               [24] 1917 	inc	dptr
      000867 E0               [24] 1918 	movx	a,@dptr
      000868 08               [12] 1919 	inc	r0
      000869 F6               [12] 1920 	mov	@r0,a
      00086A C0 06            [24] 1921 	push	ar6
      00086C C0 05            [24] 1922 	push	ar5
      00086E C0 04            [24] 1923 	push	ar4
      000870 C0 03            [24] 1924 	push	ar3
      000872 C0 01            [24] 1925 	push	ar1
      000874 12r00r00         [24] 1926 	lcall	_rand
      000877 AA 82            [24] 1927 	mov	r2,dpl
      000879 AF 83            [24] 1928 	mov	r7,dph
      00087B 74 20            [12] 1929 	mov	a,#0x20
      00087D C0 E0            [24] 1930 	push	acc
      00087F E4               [12] 1931 	clr	a
      000880 C0 E0            [24] 1932 	push	acc
      000882 8A 82            [24] 1933 	mov	dpl,r2
      000884 8F 83            [24] 1934 	mov	dph,r7
      000886 12r00r00         [24] 1935 	lcall	__modsint
      000889 AA 82            [24] 1936 	mov	r2,dpl
      00088B AF 83            [24] 1937 	mov	r7,dph
      00088D 15 81            [12] 1938 	dec	sp
      00088F 15 81            [12] 1939 	dec	sp
      000891 D0 01            [24] 1940 	pop	ar1
      000893 D0 03            [24] 1941 	pop	ar3
      000895 D0 04            [24] 1942 	pop	ar4
      000897 D0 05            [24] 1943 	pop	ar5
      000899 D0 06            [24] 1944 	pop	ar6
      00089B 0A               [12] 1945 	inc	r2
      00089C BA 00 01         [24] 1946 	cjne	r2,#0x00,00189$
      00089F 0F               [12] 1947 	inc	r7
      0008A0                       1948 00189$:
      0008A0 C0 06            [24] 1949 	push	ar6
      0008A2 C0 05            [24] 1950 	push	ar5
      0008A4 C0 04            [24] 1951 	push	ar4
      0008A6 C0 03            [24] 1952 	push	ar3
      0008A8 C0 01            [24] 1953 	push	ar1
      0008AA C0 02            [24] 1954 	push	ar2
      0008AC C0 07            [24] 1955 	push	ar7
      0008AE A8*00            [24] 1956 	mov	r0,_bp
      0008B0 08               [12] 1957 	inc	r0
      0008B1 86 82            [24] 1958 	mov	dpl,@r0
      0008B3 08               [12] 1959 	inc	r0
      0008B4 86 83            [24] 1960 	mov	dph,@r0
      0008B6 12r00r00         [24] 1961 	lcall	__mulint
      0008B9 AA 82            [24] 1962 	mov	r2,dpl
      0008BB AF 83            [24] 1963 	mov	r7,dph
      0008BD 15 81            [12] 1964 	dec	sp
      0008BF 15 81            [12] 1965 	dec	sp
      0008C1 D0 01            [24] 1966 	pop	ar1
      0008C3 D0 03            [24] 1967 	pop	ar3
      0008C5 D0 04            [24] 1968 	pop	ar4
      0008C7 D0 05            [24] 1969 	pop	ar5
      0008C9 D0 06            [24] 1970 	pop	ar6
      0008CB E5*00            [12] 1971 	mov	a,_bp
      0008CD 24 03            [12] 1972 	add	a,#0x03
      0008CF F8               [12] 1973 	mov	r0,a
      0008D0 86 82            [24] 1974 	mov	dpl,@r0
      0008D2 08               [12] 1975 	inc	r0
      0008D3 86 83            [24] 1976 	mov	dph,@r0
      0008D5 EA               [12] 1977 	mov	a,r2
      0008D6 F0               [24] 1978 	movx	@dptr,a
      0008D7 EF               [12] 1979 	mov	a,r7
      0008D8 A3               [24] 1980 	inc	dptr
      0008D9 F0               [24] 1981 	movx	@dptr,a
                                   1982 ;	walk.c:237: neigh[i].c = neigh[REG + i].c * (1 + rand() % 32);
      0008DA EB               [12] 1983 	mov	a,r3
      0008DB 24r00            [12] 1984 	add	a,#_neigh
      0008DD FB               [12] 1985 	mov	r3,a
      0008DE EC               [12] 1986 	mov	a,r4
      0008DF 34s00            [12] 1987 	addc	a,#(_neigh >> 8)
      0008E1 FC               [12] 1988 	mov	r4,a
      0008E2 74 02            [12] 1989 	mov	a,#0x02
      0008E4 2B               [12] 1990 	add	a,r3
      0008E5 FA               [12] 1991 	mov	r2,a
      0008E6 E4               [12] 1992 	clr	a
      0008E7 3C               [12] 1993 	addc	a,r4
      0008E8 FF               [12] 1994 	mov	r7,a
      0008E9 EE               [12] 1995 	mov	a,r6
      0008EA 24r00            [12] 1996 	add	a,#_neigh
      0008EC FE               [12] 1997 	mov	r6,a
      0008ED ED               [12] 1998 	mov	a,r5
      0008EE 34s00            [12] 1999 	addc	a,#(_neigh >> 8)
      0008F0 FD               [12] 2000 	mov	r5,a
      0008F1 8E 82            [24] 2001 	mov	dpl,r6
      0008F3 8D 83            [24] 2002 	mov	dph,r5
      0008F5 A3               [24] 2003 	inc	dptr
      0008F6 A3               [24] 2004 	inc	dptr
      0008F7 E5*00            [12] 2005 	mov	a,_bp
      0008F9 24 03            [12] 2006 	add	a,#0x03
      0008FB F8               [12] 2007 	mov	r0,a
      0008FC E0               [24] 2008 	movx	a,@dptr
      0008FD F6               [12] 2009 	mov	@r0,a
      0008FE A3               [24] 2010 	inc	dptr
      0008FF E0               [24] 2011 	movx	a,@dptr
      000900 08               [12] 2012 	inc	r0
      000901 F6               [12] 2013 	mov	@r0,a
      000902 C0 07            [24] 2014 	push	ar7
      000904 C0 04            [24] 2015 	push	ar4
      000906 C0 03            [24] 2016 	push	ar3
      000908 C0 02            [24] 2017 	push	ar2
      00090A C0 01            [24] 2018 	push	ar1
      00090C 12r00r00         [24] 2019 	lcall	_rand
      00090F AD 82            [24] 2020 	mov	r5,dpl
      000911 AE 83            [24] 2021 	mov	r6,dph
      000913 74 20            [12] 2022 	mov	a,#0x20
      000915 C0 E0            [24] 2023 	push	acc
      000917 E4               [12] 2024 	clr	a
      000918 C0 E0            [24] 2025 	push	acc
      00091A 8D 82            [24] 2026 	mov	dpl,r5
      00091C 8E 83            [24] 2027 	mov	dph,r6
      00091E 12r00r00         [24] 2028 	lcall	__modsint
      000921 AD 82            [24] 2029 	mov	r5,dpl
      000923 AE 83            [24] 2030 	mov	r6,dph
      000925 15 81            [12] 2031 	dec	sp
      000927 15 81            [12] 2032 	dec	sp
      000929 D0 01            [24] 2033 	pop	ar1
      00092B D0 02            [24] 2034 	pop	ar2
      00092D D0 03            [24] 2035 	pop	ar3
      00092F D0 04            [24] 2036 	pop	ar4
      000931 D0 07            [24] 2037 	pop	ar7
      000933 0D               [12] 2038 	inc	r5
      000934 BD 00 01         [24] 2039 	cjne	r5,#0x00,00190$
      000937 0E               [12] 2040 	inc	r6
      000938                       2041 00190$:
      000938 C0 07            [24] 2042 	push	ar7
      00093A C0 04            [24] 2043 	push	ar4
      00093C C0 03            [24] 2044 	push	ar3
      00093E C0 02            [24] 2045 	push	ar2
      000940 C0 01            [24] 2046 	push	ar1
      000942 C0 05            [24] 2047 	push	ar5
      000944 C0 06            [24] 2048 	push	ar6
      000946 E5*00            [12] 2049 	mov	a,_bp
      000948 24 03            [12] 2050 	add	a,#0x03
      00094A F8               [12] 2051 	mov	r0,a
      00094B 86 82            [24] 2052 	mov	dpl,@r0
      00094D 08               [12] 2053 	inc	r0
      00094E 86 83            [24] 2054 	mov	dph,@r0
      000950 12r00r00         [24] 2055 	lcall	__mulint
      000953 AD 82            [24] 2056 	mov	r5,dpl
      000955 AE 83            [24] 2057 	mov	r6,dph
      000957 15 81            [12] 2058 	dec	sp
      000959 15 81            [12] 2059 	dec	sp
      00095B D0 01            [24] 2060 	pop	ar1
      00095D D0 02            [24] 2061 	pop	ar2
      00095F D0 03            [24] 2062 	pop	ar3
      000961 D0 04            [24] 2063 	pop	ar4
      000963 D0 07            [24] 2064 	pop	ar7
      000965 8A 82            [24] 2065 	mov	dpl,r2
      000967 8F 83            [24] 2066 	mov	dph,r7
      000969 ED               [12] 2067 	mov	a,r5
      00096A F0               [24] 2068 	movx	@dptr,a
      00096B EE               [12] 2069 	mov	a,r6
      00096C A3               [24] 2070 	inc	dptr
      00096D F0               [24] 2071 	movx	@dptr,a
                                   2072 ;	walk.c:238: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      00096E 8B 82            [24] 2073 	mov	dpl,r3
      000970 8C 83            [24] 2074 	mov	dph,r4
      000972 E0               [24] 2075 	movx	a,@dptr
      000973 FB               [12] 2076 	mov	r3,a
      000974 A3               [24] 2077 	inc	dptr
      000975 E0               [24] 2078 	movx	a,@dptr
      000976 FC               [12] 2079 	mov	r4,a
      000977 C0 07            [24] 2080 	push	ar7
      000979 C0 01            [24] 2081 	push	ar1
      00097B C0 05            [24] 2082 	push	ar5
      00097D C0 06            [24] 2083 	push	ar6
      00097F C0 03            [24] 2084 	push	ar3
      000981 C0 04            [24] 2085 	push	ar4
      000983 74r56            [12] 2086 	mov	a,#___str_6
      000985 C0 E0            [24] 2087 	push	acc
      000987 74s00            [12] 2088 	mov	a,#(___str_6 >> 8)
      000989 C0 E0            [24] 2089 	push	acc
      00098B 74 80            [12] 2090 	mov	a,#0x80
      00098D C0 E0            [24] 2091 	push	acc
      00098F 12r00r00         [24] 2092 	lcall	_printf
      000992 E5 81            [12] 2093 	mov	a,sp
      000994 24 F9            [12] 2094 	add	a,#0xf9
      000996 F5 81            [12] 2095 	mov	sp,a
      000998 D0 01            [24] 2096 	pop	ar1
      00099A D0 07            [24] 2097 	pop	ar7
                                   2098 ;	walk.c:235: for (i = 0; i < REG; i++) {
      00099C E5*00            [12] 2099 	mov	a,_bp
      00099E 24 0B            [12] 2100 	add	a,#0x0b
      0009A0 F8               [12] 2101 	mov	r0,a
      0009A1 06               [12] 2102 	inc	@r0
      0009A2 B6 00 02         [24] 2103 	cjne	@r0,#0x00,00191$
      0009A5 08               [12] 2104 	inc	r0
      0009A6 06               [12] 2105 	inc	@r0
      0009A7                       2106 00191$:
      0009A7 E5*00            [12] 2107 	mov	a,_bp
      0009A9 24 0B            [12] 2108 	add	a,#0x0b
      0009AB F8               [12] 2109 	mov	r0,a
      0009AC 86 05            [24] 2110 	mov	ar5,@r0
      0009AE 08               [12] 2111 	inc	r0
      0009AF 86 06            [24] 2112 	mov	ar6,@r0
      0009B1 C3               [12] 2113 	clr	c
      0009B2 ED               [12] 2114 	mov	a,r5
      0009B3 94 08            [12] 2115 	subb	a,#0x08
      0009B5 EE               [12] 2116 	mov	a,r6
      0009B6 94 00            [12] 2117 	subb	a,#0x00
      0009B8 D0 07            [24] 2118 	pop	ar7
      0009BA 50 03            [24] 2119 	jnc	00192$
      0009BC 02r08r0C         [24] 2120 	ljmp	00116$
      0009BF                       2121 00192$:
                                   2122 ;	walk.c:241: OE76 = OE76_0;
      0009BF 78r01            [12] 2123 	mov	r0,#_OE76
      0009C1 76 3F            [12] 2124 	mov	@r0,#0x3f
                                   2125 ;	walk.c:242: setOE(OE76_NC);
      0009C3 75 82 00         [24] 2126 	mov	dpl,#0x00
      0009C6 C0 07            [24] 2127 	push	ar7
      0009C8 C0 01            [24] 2128 	push	ar1
      0009CA 12r00r2F         [24] 2129 	lcall	_setOE
      0009CD D0 01            [24] 2130 	pop	ar1
      0009CF D0 07            [24] 2131 	pop	ar7
                                   2132 ;	walk.c:244: walk(&initial);
      0009D1 8F 04            [24] 2133 	mov	ar4,r7
      0009D3 7D 00            [12] 2134 	mov	r5,#0x00
      0009D5 7E 40            [12] 2135 	mov	r6,#0x40
      0009D7 8C 82            [24] 2136 	mov	dpl,r4
      0009D9 8D 83            [24] 2137 	mov	dph,r5
      0009DB 8E F0            [24] 2138 	mov	b,r6
      0009DD C0 07            [24] 2139 	push	ar7
      0009DF C0 01            [24] 2140 	push	ar1
      0009E1 12r03r08         [24] 2141 	lcall	_walk
      0009E4 D0 01            [24] 2142 	pop	ar1
      0009E6 D0 07            [24] 2143 	pop	ar7
                                   2144 ;	walk.c:246: for (i = 0; i < ROWS; i++)
      0009E8 E5*00            [12] 2145 	mov	a,_bp
      0009EA 24 0B            [12] 2146 	add	a,#0x0b
      0009EC F8               [12] 2147 	mov	r0,a
      0009ED E4               [12] 2148 	clr	a
      0009EE F6               [12] 2149 	mov	@r0,a
      0009EF 08               [12] 2150 	inc	r0
      0009F0 F6               [12] 2151 	mov	@r0,a
      0009F1 7B 00            [12] 2152 	mov	r3,#0x00
      0009F3 7C 00            [12] 2153 	mov	r4,#0x00
                                   2154 ;	walk.c:247: for (j = 0; j < COLS; j++)
      0009F5                       2155 00132$:
      0009F5 E5*00            [12] 2156 	mov	a,_bp
      0009F7 24 03            [12] 2157 	add	a,#0x03
      0009F9 F8               [12] 2158 	mov	r0,a
      0009FA EB               [12] 2159 	mov	a,r3
      0009FB 24r00            [12] 2160 	add	a,#_g
      0009FD F6               [12] 2161 	mov	@r0,a
      0009FE EC               [12] 2162 	mov	a,r4
      0009FF 34s00            [12] 2163 	addc	a,#(_g >> 8)
      000A01 08               [12] 2164 	inc	r0
      000A02 F6               [12] 2165 	mov	@r0,a
      000A03 7A 00            [12] 2166 	mov	r2,#0x00
      000A05 7E 00            [12] 2167 	mov	r6,#0x00
      000A07                       2168 00118$:
                                   2169 ;	walk.c:248: if (g[i][j] != 0xaau) bang();
      000A07 E5*00            [12] 2170 	mov	a,_bp
      000A09 24 03            [12] 2171 	add	a,#0x03
      000A0B F8               [12] 2172 	mov	r0,a
      000A0C EA               [12] 2173 	mov	a,r2
      000A0D 26               [12] 2174 	add	a,@r0
      000A0E F5 82            [12] 2175 	mov	dpl,a
      000A10 EE               [12] 2176 	mov	a,r6
      000A11 08               [12] 2177 	inc	r0
      000A12 36               [12] 2178 	addc	a,@r0
      000A13 F5 83            [12] 2179 	mov	dph,a
      000A15 E0               [24] 2180 	movx	a,@dptr
      000A16 FD               [12] 2181 	mov	r5,a
      000A17 BD AA 02         [24] 2182 	cjne	r5,#0xaa,00193$
      000A1A 80 1B            [24] 2183 	sjmp	00119$
      000A1C                       2184 00193$:
      000A1C C0 07            [24] 2185 	push	ar7
      000A1E C0 06            [24] 2186 	push	ar6
      000A20 C0 04            [24] 2187 	push	ar4
      000A22 C0 03            [24] 2188 	push	ar3
      000A24 C0 02            [24] 2189 	push	ar2
      000A26 C0 01            [24] 2190 	push	ar1
      000A28 12r00r22         [24] 2191 	lcall	_bang
      000A2B D0 01            [24] 2192 	pop	ar1
      000A2D D0 02            [24] 2193 	pop	ar2
      000A2F D0 03            [24] 2194 	pop	ar3
      000A31 D0 04            [24] 2195 	pop	ar4
      000A33 D0 06            [24] 2196 	pop	ar6
      000A35 D0 07            [24] 2197 	pop	ar7
      000A37                       2198 00119$:
                                   2199 ;	walk.c:247: for (j = 0; j < COLS; j++)
      000A37 0A               [12] 2200 	inc	r2
      000A38 BA 00 01         [24] 2201 	cjne	r2,#0x00,00194$
      000A3B 0E               [12] 2202 	inc	r6
      000A3C                       2203 00194$:
      000A3C C3               [12] 2204 	clr	c
      000A3D EA               [12] 2205 	mov	a,r2
      000A3E 94 C9            [12] 2206 	subb	a,#0xc9
      000A40 EE               [12] 2207 	mov	a,r6
      000A41 64 80            [12] 2208 	xrl	a,#0x80
      000A43 94 80            [12] 2209 	subb	a,#0x80
      000A45 40 C0            [24] 2210 	jc	00118$
                                   2211 ;	walk.c:246: for (i = 0; i < ROWS; i++)
      000A47 74 C9            [12] 2212 	mov	a,#0xc9
      000A49 2B               [12] 2213 	add	a,r3
      000A4A FB               [12] 2214 	mov	r3,a
      000A4B E4               [12] 2215 	clr	a
      000A4C 3C               [12] 2216 	addc	a,r4
      000A4D FC               [12] 2217 	mov	r4,a
      000A4E E5*00            [12] 2218 	mov	a,_bp
      000A50 24 0B            [12] 2219 	add	a,#0x0b
      000A52 F8               [12] 2220 	mov	r0,a
      000A53 06               [12] 2221 	inc	@r0
      000A54 B6 00 02         [24] 2222 	cjne	@r0,#0x00,00196$
      000A57 08               [12] 2223 	inc	r0
      000A58 06               [12] 2224 	inc	@r0
      000A59                       2225 00196$:
      000A59 E5*00            [12] 2226 	mov	a,_bp
      000A5B 24 0B            [12] 2227 	add	a,#0x0b
      000A5D F8               [12] 2228 	mov	r0,a
      000A5E C3               [12] 2229 	clr	c
      000A5F E6               [12] 2230 	mov	a,@r0
      000A60 94 30            [12] 2231 	subb	a,#0x30
      000A62 08               [12] 2232 	inc	r0
      000A63 E6               [12] 2233 	mov	a,@r0
      000A64 64 80            [12] 2234 	xrl	a,#0x80
      000A66 94 80            [12] 2235 	subb	a,#0x80
      000A68 40 8B            [24] 2236 	jc	00132$
                                   2237 ;	walk.c:250: N++;
      000A6A E5*00            [12] 2238 	mov	a,_bp
      000A6C 24 09            [12] 2239 	add	a,#0x09
      000A6E F8               [12] 2240 	mov	r0,a
      000A6F 06               [12] 2241 	inc	@r0
      000A70 B6 00 02         [24] 2242 	cjne	@r0,#0x00,00198$
      000A73 08               [12] 2243 	inc	r0
      000A74 06               [12] 2244 	inc	@r0
      000A75                       2245 00198$:
      000A75 02r06rF1         [24] 2246 	ljmp	00108$
      000A78                       2247 00110$:
                                   2248 ;	walk.c:253: EA = 0;
                                   2249 ;	assignBit
      000A78 C2 AF            [12] 2250 	clr	_EA
                                   2251 ;	walk.c:255: puts("\033[2J\033[?25h");
      000A7A 90r00r5F         [24] 2252 	mov	dptr,#___str_7
      000A7D 75 F0 80         [24] 2253 	mov	b,#0x80
      000A80 12r00r00         [24] 2254 	lcall	_puts
                                   2255 ;	walk.c:37: PCON |= 2;
      000A83 43 87 02         [24] 2256 	orl	_PCON,#0x02
                                   2257 ;	walk.c:259: return;
                                   2258 ;	walk.c:260: }
      000A86 85*00 81         [24] 2259 	mov	sp,_bp
      000A89 D0*00            [24] 2260 	pop	_bp
      000A8B 22               [24] 2261 	ret
                                   2262 ;------------------------------------------------------------
                                   2263 ;Allocation info for local variables in function 'qinit'
                                   2264 ;------------------------------------------------------------
                                   2265 ;	walk.c:262: static void qinit(void) {
                                   2266 ;	-----------------------------------------
                                   2267 ;	 function qinit
                                   2268 ;	-----------------------------------------
      000A8C                       2269 _qinit:
                                   2270 ;	walk.c:263: hp = tp = 0;
      000A8C 90rBCr72         [24] 2271 	mov	dptr,#_tp
      000A8F E4               [12] 2272 	clr	a
      000A90 F0               [24] 2273 	movx	@dptr,a
      000A91 A3               [24] 2274 	inc	dptr
      000A92 F0               [24] 2275 	movx	@dptr,a
      000A93 90rBCr70         [24] 2276 	mov	dptr,#_hp
      000A96 F0               [24] 2277 	movx	@dptr,a
      000A97 A3               [24] 2278 	inc	dptr
      000A98 F0               [24] 2279 	movx	@dptr,a
                                   2280 ;	walk.c:264: return;
                                   2281 ;	walk.c:265: }
      000A99 22               [24] 2282 	ret
                                   2283 ;------------------------------------------------------------
                                   2284 ;Allocation info for local variables in function 'qadd'
                                   2285 ;------------------------------------------------------------
                                   2286 ;t                         Allocated to registers r7 r5 r6 
                                   2287 ;sloc0                     Allocated to stack - _bp +1
                                   2288 ;sloc1                     Allocated to stack - _bp +3
                                   2289 ;sloc2                     Allocated to stack - _bp +5
                                   2290 ;sloc3                     Allocated to stack - _bp +10
                                   2291 ;------------------------------------------------------------
                                   2292 ;	walk.c:267: static uint8_t qadd(struct node *t) {
                                   2293 ;	-----------------------------------------
                                   2294 ;	 function qadd
                                   2295 ;	-----------------------------------------
      000A9A                       2296 _qadd:
      000A9A C0*00            [24] 2297 	push	_bp
      000A9C E5 81            [12] 2298 	mov	a,sp
      000A9E F5*00            [12] 2299 	mov	_bp,a
      000AA0 24 06            [12] 2300 	add	a,#0x06
      000AA2 F5 81            [12] 2301 	mov	sp,a
      000AA4 AF 82            [24] 2302 	mov	r7,dpl
      000AA6 AD 83            [24] 2303 	mov	r5,dph
      000AA8 AE F0            [24] 2304 	mov	r6,b
                                   2305 ;	walk.c:268: if (((hp + 1) % QMAX) == tp) return 0u;
      000AAA 90rBCr70         [24] 2306 	mov	dptr,#_hp
      000AAD E0               [24] 2307 	movx	a,@dptr
      000AAE FB               [12] 2308 	mov	r3,a
      000AAF A3               [24] 2309 	inc	dptr
      000AB0 E0               [24] 2310 	movx	a,@dptr
      000AB1 FC               [12] 2311 	mov	r4,a
      000AB2 A8*00            [24] 2312 	mov	r0,_bp
      000AB4 08               [12] 2313 	inc	r0
      000AB5 74 01            [12] 2314 	mov	a,#0x01
      000AB7 2B               [12] 2315 	add	a,r3
      000AB8 F6               [12] 2316 	mov	@r0,a
      000AB9 E4               [12] 2317 	clr	a
      000ABA 3C               [12] 2318 	addc	a,r4
      000ABB 08               [12] 2319 	inc	r0
      000ABC F6               [12] 2320 	mov	@r0,a
      000ABD C0 07            [24] 2321 	push	ar7
      000ABF C0 06            [24] 2322 	push	ar6
      000AC1 C0 05            [24] 2323 	push	ar5
      000AC3 C0 04            [24] 2324 	push	ar4
      000AC5 C0 03            [24] 2325 	push	ar3
      000AC7 74 B0            [12] 2326 	mov	a,#0xb0
      000AC9 C0 E0            [24] 2327 	push	acc
      000ACB 74 25            [12] 2328 	mov	a,#0x25
      000ACD C0 E0            [24] 2329 	push	acc
      000ACF A8*00            [24] 2330 	mov	r0,_bp
      000AD1 08               [12] 2331 	inc	r0
      000AD2 86 82            [24] 2332 	mov	dpl,@r0
      000AD4 08               [12] 2333 	inc	r0
      000AD5 86 83            [24] 2334 	mov	dph,@r0
      000AD7 12r00r00         [24] 2335 	lcall	__modsint
      000ADA A8*00            [24] 2336 	mov	r0,_bp
      000ADC 08               [12] 2337 	inc	r0
      000ADD 08               [12] 2338 	inc	r0
      000ADE 08               [12] 2339 	inc	r0
      000ADF A6 82            [24] 2340 	mov	@r0,dpl
      000AE1 08               [12] 2341 	inc	r0
      000AE2 A6 83            [24] 2342 	mov	@r0,dph
      000AE4 15 81            [12] 2343 	dec	sp
      000AE6 15 81            [12] 2344 	dec	sp
      000AE8 D0 03            [24] 2345 	pop	ar3
      000AEA D0 04            [24] 2346 	pop	ar4
      000AEC D0 05            [24] 2347 	pop	ar5
      000AEE D0 06            [24] 2348 	pop	ar6
      000AF0 D0 07            [24] 2349 	pop	ar7
      000AF2 90rBCr72         [24] 2350 	mov	dptr,#_tp
      000AF5 E5*00            [12] 2351 	mov	a,_bp
      000AF7 24 05            [12] 2352 	add	a,#0x05
      000AF9 F8               [12] 2353 	mov	r0,a
      000AFA E0               [24] 2354 	movx	a,@dptr
      000AFB F6               [12] 2355 	mov	@r0,a
      000AFC A3               [24] 2356 	inc	dptr
      000AFD E0               [24] 2357 	movx	a,@dptr
      000AFE 08               [12] 2358 	inc	r0
      000AFF F6               [12] 2359 	mov	@r0,a
      000B00 E5*00            [12] 2360 	mov	a,_bp
      000B02 24 03            [12] 2361 	add	a,#0x03
      000B04 F8               [12] 2362 	mov	r0,a
      000B05 E5*00            [12] 2363 	mov	a,_bp
      000B07 24 05            [12] 2364 	add	a,#0x05
      000B09 F9               [12] 2365 	mov	r1,a
      000B0A 86 F0            [24] 2366 	mov	b,@r0
      000B0C E7               [12] 2367 	mov	a,@r1
      000B0D B5 F0 0A         [24] 2368 	cjne	a,b,00109$
      000B10 08               [12] 2369 	inc	r0
      000B11 86 F0            [24] 2370 	mov	b,@r0
      000B13 09               [12] 2371 	inc	r1
      000B14 E7               [12] 2372 	mov	a,@r1
      000B15 B5 F0 02         [24] 2373 	cjne	a,b,00109$
      000B18 80 02            [24] 2374 	sjmp	00110$
      000B1A                       2375 00109$:
      000B1A 80 05            [24] 2376 	sjmp	00102$
      000B1C                       2377 00110$:
      000B1C 75 82 00         [24] 2378 	mov	dpl,#0x00
      000B1F 80 65            [24] 2379 	sjmp	00103$
      000B21                       2380 00102$:
                                   2381 ;	walk.c:269: queue[hp] = *t;
      000B21 8F 02            [24] 2382 	mov	ar2,r7
      000B23 8E 07            [24] 2383 	mov	ar7,r6
      000B25 EB               [12] 2384 	mov	a,r3
      000B26 2B               [12] 2385 	add	a,r3
      000B27 FB               [12] 2386 	mov	r3,a
      000B28 EC               [12] 2387 	mov	a,r4
      000B29 33               [12] 2388 	rlc	a
      000B2A FC               [12] 2389 	mov	r4,a
      000B2B EB               [12] 2390 	mov	a,r3
      000B2C 2B               [12] 2391 	add	a,r3
      000B2D FB               [12] 2392 	mov	r3,a
      000B2E EC               [12] 2393 	mov	a,r4
      000B2F 33               [12] 2394 	rlc	a
      000B30 FC               [12] 2395 	mov	r4,a
      000B31 EB               [12] 2396 	mov	a,r3
      000B32 24rB0            [12] 2397 	add	a,#_queue
      000B34 FB               [12] 2398 	mov	r3,a
      000B35 EC               [12] 2399 	mov	a,r4
      000B36 34s25            [12] 2400 	addc	a,#(_queue >> 8)
      000B38 FC               [12] 2401 	mov	r4,a
      000B39 7E 00            [12] 2402 	mov	r6,#0x00
      000B3B 74 04            [12] 2403 	mov	a,#0x04
      000B3D C0 E0            [24] 2404 	push	acc
      000B3F E4               [12] 2405 	clr	a
      000B40 C0 E0            [24] 2406 	push	acc
      000B42 C0 02            [24] 2407 	push	ar2
      000B44 C0 05            [24] 2408 	push	ar5
      000B46 C0 07            [24] 2409 	push	ar7
      000B48 8B 82            [24] 2410 	mov	dpl,r3
      000B4A 8C 83            [24] 2411 	mov	dph,r4
      000B4C 8E F0            [24] 2412 	mov	b,r6
      000B4E 12r00r00         [24] 2413 	lcall	___memcpy
      000B51 E5 81            [12] 2414 	mov	a,sp
      000B53 24 FB            [12] 2415 	add	a,#0xfb
      000B55 F5 81            [12] 2416 	mov	sp,a
                                   2417 ;	walk.c:270: hp = (hp + 1) % QMAX;
      000B57 90rBCr70         [24] 2418 	mov	dptr,#_hp
      000B5A E0               [24] 2419 	movx	a,@dptr
      000B5B FD               [12] 2420 	mov	r5,a
      000B5C A3               [24] 2421 	inc	dptr
      000B5D E0               [24] 2422 	movx	a,@dptr
      000B5E FE               [12] 2423 	mov	r6,a
      000B5F 0D               [12] 2424 	inc	r5
      000B60 BD 00 01         [24] 2425 	cjne	r5,#0x00,00111$
      000B63 0E               [12] 2426 	inc	r6
      000B64                       2427 00111$:
      000B64 74 B0            [12] 2428 	mov	a,#0xb0
      000B66 C0 E0            [24] 2429 	push	acc
      000B68 74 25            [12] 2430 	mov	a,#0x25
      000B6A C0 E0            [24] 2431 	push	acc
      000B6C 8D 82            [24] 2432 	mov	dpl,r5
      000B6E 8E 83            [24] 2433 	mov	dph,r6
      000B70 12r00r00         [24] 2434 	lcall	__modsint
      000B73 AD 82            [24] 2435 	mov	r5,dpl
      000B75 AE 83            [24] 2436 	mov	r6,dph
      000B77 15 81            [12] 2437 	dec	sp
      000B79 15 81            [12] 2438 	dec	sp
      000B7B 90rBCr70         [24] 2439 	mov	dptr,#_hp
      000B7E ED               [12] 2440 	mov	a,r5
      000B7F F0               [24] 2441 	movx	@dptr,a
      000B80 EE               [12] 2442 	mov	a,r6
      000B81 A3               [24] 2443 	inc	dptr
      000B82 F0               [24] 2444 	movx	@dptr,a
                                   2445 ;	walk.c:271: return 1u;
      000B83 75 82 01         [24] 2446 	mov	dpl,#0x01
      000B86                       2447 00103$:
                                   2448 ;	walk.c:272: }
      000B86 85*00 81         [24] 2449 	mov	sp,_bp
      000B89 D0*00            [24] 2450 	pop	_bp
      000B8B 22               [24] 2451 	ret
                                   2452 ;------------------------------------------------------------
                                   2453 ;Allocation info for local variables in function 'qget'
                                   2454 ;------------------------------------------------------------
                                   2455 ;t                         Allocated to registers r5 r6 r7 
                                   2456 ;------------------------------------------------------------
                                   2457 ;	walk.c:274: static uint8_t qget(struct node *t) {
                                   2458 ;	-----------------------------------------
                                   2459 ;	 function qget
                                   2460 ;	-----------------------------------------
      000B8C                       2461 _qget:
      000B8C AD 82            [24] 2462 	mov	r5,dpl
      000B8E AE 83            [24] 2463 	mov	r6,dph
      000B90 AF F0            [24] 2464 	mov	r7,b
                                   2465 ;	walk.c:275: if (hp == tp) return 0u;
      000B92 90rBCr70         [24] 2466 	mov	dptr,#_hp
      000B95 E0               [24] 2467 	movx	a,@dptr
      000B96 FB               [12] 2468 	mov	r3,a
      000B97 A3               [24] 2469 	inc	dptr
      000B98 E0               [24] 2470 	movx	a,@dptr
      000B99 FC               [12] 2471 	mov	r4,a
      000B9A 90rBCr72         [24] 2472 	mov	dptr,#_tp
      000B9D E0               [24] 2473 	movx	a,@dptr
      000B9E F9               [12] 2474 	mov	r1,a
      000B9F A3               [24] 2475 	inc	dptr
      000BA0 E0               [24] 2476 	movx	a,@dptr
      000BA1 FA               [12] 2477 	mov	r2,a
      000BA2 EB               [12] 2478 	mov	a,r3
      000BA3 B5 01 08         [24] 2479 	cjne	a,ar1,00102$
      000BA6 EC               [12] 2480 	mov	a,r4
      000BA7 B5 02 04         [24] 2481 	cjne	a,ar2,00102$
      000BAA 75 82 00         [24] 2482 	mov	dpl,#0x00
      000BAD 22               [24] 2483 	ret
      000BAE                       2484 00102$:
                                   2485 ;	walk.c:276: *t = queue[tp];
      000BAE E9               [12] 2486 	mov	a,r1
      000BAF 29               [12] 2487 	add	a,r1
      000BB0 F9               [12] 2488 	mov	r1,a
      000BB1 EA               [12] 2489 	mov	a,r2
      000BB2 33               [12] 2490 	rlc	a
      000BB3 FA               [12] 2491 	mov	r2,a
      000BB4 E9               [12] 2492 	mov	a,r1
      000BB5 29               [12] 2493 	add	a,r1
      000BB6 F9               [12] 2494 	mov	r1,a
      000BB7 EA               [12] 2495 	mov	a,r2
      000BB8 33               [12] 2496 	rlc	a
      000BB9 FA               [12] 2497 	mov	r2,a
      000BBA E9               [12] 2498 	mov	a,r1
      000BBB 24rB0            [12] 2499 	add	a,#_queue
      000BBD F9               [12] 2500 	mov	r1,a
      000BBE EA               [12] 2501 	mov	a,r2
      000BBF 34s25            [12] 2502 	addc	a,#(_queue >> 8)
      000BC1 FA               [12] 2503 	mov	r2,a
      000BC2 7C 00            [12] 2504 	mov	r4,#0x00
      000BC4 74 04            [12] 2505 	mov	a,#0x04
      000BC6 C0 E0            [24] 2506 	push	acc
      000BC8 E4               [12] 2507 	clr	a
      000BC9 C0 E0            [24] 2508 	push	acc
      000BCB C0 01            [24] 2509 	push	ar1
      000BCD C0 02            [24] 2510 	push	ar2
      000BCF C0 04            [24] 2511 	push	ar4
      000BD1 8D 82            [24] 2512 	mov	dpl,r5
      000BD3 8E 83            [24] 2513 	mov	dph,r6
      000BD5 8F F0            [24] 2514 	mov	b,r7
      000BD7 12r00r00         [24] 2515 	lcall	___memcpy
      000BDA E5 81            [12] 2516 	mov	a,sp
      000BDC 24 FB            [12] 2517 	add	a,#0xfb
      000BDE F5 81            [12] 2518 	mov	sp,a
                                   2519 ;	walk.c:277: tp = (tp + 1) % QMAX;
      000BE0 90rBCr72         [24] 2520 	mov	dptr,#_tp
      000BE3 E0               [24] 2521 	movx	a,@dptr
      000BE4 FE               [12] 2522 	mov	r6,a
      000BE5 A3               [24] 2523 	inc	dptr
      000BE6 E0               [24] 2524 	movx	a,@dptr
      000BE7 FF               [12] 2525 	mov	r7,a
      000BE8 0E               [12] 2526 	inc	r6
      000BE9 BE 00 01         [24] 2527 	cjne	r6,#0x00,00111$
      000BEC 0F               [12] 2528 	inc	r7
      000BED                       2529 00111$:
      000BED 74 B0            [12] 2530 	mov	a,#0xb0
      000BEF C0 E0            [24] 2531 	push	acc
      000BF1 74 25            [12] 2532 	mov	a,#0x25
      000BF3 C0 E0            [24] 2533 	push	acc
      000BF5 8E 82            [24] 2534 	mov	dpl,r6
      000BF7 8F 83            [24] 2535 	mov	dph,r7
      000BF9 12r00r00         [24] 2536 	lcall	__modsint
      000BFC AE 82            [24] 2537 	mov	r6,dpl
      000BFE AF 83            [24] 2538 	mov	r7,dph
      000C00 15 81            [12] 2539 	dec	sp
      000C02 15 81            [12] 2540 	dec	sp
      000C04 90rBCr72         [24] 2541 	mov	dptr,#_tp
      000C07 EE               [12] 2542 	mov	a,r6
      000C08 F0               [24] 2543 	movx	@dptr,a
      000C09 EF               [12] 2544 	mov	a,r7
      000C0A A3               [24] 2545 	inc	dptr
      000C0B F0               [24] 2546 	movx	@dptr,a
                                   2547 ;	walk.c:278: return 1u;
      000C0C 75 82 01         [24] 2548 	mov	dpl,#0x01
                                   2549 ;	walk.c:279: }
      000C0F 22               [24] 2550 	ret
                                   2551 	.area CSEG    (CODE)
                                   2552 	.area CONST   (CODE)
                                   2553 	.area CONST   (CODE)
      000000                       2554 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2555 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2556 	.db 0x00
                                   2557 	.area CSEG    (CODE)
                                   2558 	.area CONST   (CODE)
      00000D                       2559 ___str_1:
      00000D 1B                    2560 	.db 0x1b
      00000E 5B 32 3B 31 48 25 20  2561 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      000023 00                    2562 	.db 0x00
                                   2563 	.area CSEG    (CODE)
                                   2564 	.area CONST   (CODE)
      000024                       2565 ___str_2:
      000024 1B                    2566 	.db 0x1b
      000025 5B 25 64 3B 25 64 48  2567 	.ascii "[%d;%dH."
             2E
      00002D 00                    2568 	.db 0x00
                                   2569 	.area CSEG    (CODE)
                                   2570 	.area CONST   (CODE)
      00002E                       2571 ___str_3:
      00002E 1B                    2572 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2573 	.ascii "[%d;%dHo"
             6F
      000037 00                    2574 	.db 0x00
                                   2575 	.area CSEG    (CODE)
                                   2576 	.area CONST   (CODE)
      000038                       2577 ___str_4:
      000038 1B                    2578 	.db 0x1b
      000039 5B 32 4A              2579 	.ascii "[2J"
      00003C 1B                    2580 	.db 0x1b
      00003D 5B 3F 32 35 6C        2581 	.ascii "[?25l"
      000042 00                    2582 	.db 0x00
                                   2583 	.area CSEG    (CODE)
                                   2584 	.area CONST   (CODE)
      000043                       2585 ___str_5:
      000043 1B                    2586 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2587 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2588 	.db 0x00
                                   2589 	.area CSEG    (CODE)
                                   2590 	.area CONST   (CODE)
      000056                       2591 ___str_6:
      000056 25 20 38 64 25 20 38  2592 	.ascii "% 8d% 8d"
             64
      00005E 00                    2593 	.db 0x00
                                   2594 	.area CSEG    (CODE)
                                   2595 	.area CONST   (CODE)
      00005F                       2596 ___str_7:
      00005F 1B                    2597 	.db 0x1b
      000060 5B 32 4A              2598 	.ascii "[2J"
      000063 1B                    2599 	.db 0x1b
      000064 5B 3F 32 35 68        2600 	.ascii "[?25h"
      000069 00                    2601 	.db 0x00
                                   2602 	.area CSEG    (CODE)
                                   2603 	.area XINIT   (CODE)
      000000                       2604 __xinit__neigh:
      000000 FF FF                 2605 	.byte #0xff, #0xff	; -1
      000002 01 00                 2606 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2607 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2608 	.byte #0xff, #0xff	; -1
      000008 01 00                 2609 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2610 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2611 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2612 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2613 	.byte #0xff, #0xff	; -1
      000012 00 00                 2614 	.byte #0x00, #0x00	;  0
      000014 00 00                 2615 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2616 	.byte #0xff, #0xff	; -1
      000018 01 00                 2617 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2618 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2619 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2620 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2621 	.byte #0xff, #0xff	; -1
      000022 01 00                 2622 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2623 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2624 	.byte #0xff, #0xff	; -1
      000028 01 00                 2625 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2626 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2627 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2628 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2629 	.byte #0xff, #0xff	; -1
      000032 00 00                 2630 	.byte #0x00, #0x00	;  0
      000034 00 00                 2631 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2632 	.byte #0xff, #0xff	; -1
      000038 01 00                 2633 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2634 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2635 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2636 	.byte #0x01, #0x00	;  1
                                   2637 	.area CABS    (ABS,CODE)
