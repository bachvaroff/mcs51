                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _putchar
                                    141 	.globl _getchar
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000C8   165 _T2CON	=	0x00c8
                           0000C9   166 _T2MOD	=	0x00c9
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000E0   173 _A	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000090   204 _T2	=	0x0090
                           000091   205 _T2EX	=	0x0091
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AD   227 _ET2	=	0x00ad
                           0000AF   228 _EA	=	0x00af
                           0000B0   229 _P3_0	=	0x00b0
                           0000B1   230 _P3_1	=	0x00b1
                           0000B2   231 _P3_2	=	0x00b2
                           0000B3   232 _P3_3	=	0x00b3
                           0000B4   233 _P3_4	=	0x00b4
                           0000B5   234 _P3_5	=	0x00b5
                           0000B6   235 _P3_6	=	0x00b6
                           0000B7   236 _P3_7	=	0x00b7
                           0000B0   237 _RXD	=	0x00b0
                           0000B1   238 _TXD	=	0x00b1
                           0000B2   239 _INT0	=	0x00b2
                           0000B3   240 _INT1	=	0x00b3
                           0000B4   241 _T0	=	0x00b4
                           0000B5   242 _T1	=	0x00b5
                           0000B6   243 _WR	=	0x00b6
                           0000B7   244 _RD	=	0x00b7
                           0000B8   245 _PX0	=	0x00b8
                           0000B9   246 _PT0	=	0x00b9
                           0000BA   247 _PX1	=	0x00ba
                           0000BB   248 _PT1	=	0x00bb
                           0000BC   249 _PS	=	0x00bc
                           0000BD   250 _PT2	=	0x00bd
                           0000C8   251 _T2CON_0	=	0x00c8
                           0000C9   252 _T2CON_1	=	0x00c9
                           0000CA   253 _T2CON_2	=	0x00ca
                           0000CB   254 _T2CON_3	=	0x00cb
                           0000CC   255 _T2CON_4	=	0x00cc
                           0000CD   256 _T2CON_5	=	0x00cd
                           0000CE   257 _T2CON_6	=	0x00ce
                           0000CF   258 _T2CON_7	=	0x00cf
                           0000C8   259 _CP_RL2	=	0x00c8
                           0000C9   260 _C_T2	=	0x00c9
                           0000CA   261 _TR2	=	0x00ca
                           0000CB   262 _EXEN2	=	0x00cb
                           0000CC   263 _TCLK	=	0x00cc
                           0000CD   264 _RCLK	=	0x00cd
                           0000CE   265 _EXF2	=	0x00ce
                           0000CF   266 _TF2	=	0x00cf
                           0000D0   267 _P	=	0x00d0
                           0000D1   268 _FL	=	0x00d1
                           0000D2   269 _OV	=	0x00d2
                           0000D3   270 _RS0	=	0x00d3
                           0000D4   271 _RS1	=	0x00d4
                           0000D5   272 _F0	=	0x00d5
                           0000D6   273 _AC	=	0x00d6
                           0000D7   274 _CY	=	0x00d7
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
      000000                        300 _i0:
      000000                        301 	.ds 1
      000001                        302 _OE76:
      000001                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                           008000   321 _RND	=	0x8000
      000000                        322 _g:
      000000                        323 	.ds 9648
      0025B0                        324 _queue:
      0025B0                        325 	.ds 38592
      00BC70                        326 _hp:
      00BC70                        327 	.ds 2
      00BC72                        328 _tp:
      00BC72                        329 	.ds 2
                           00F006   330 _OEreg	=	0xf006
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
      000000                        339 _neigh:
      000000                        340 	.ds 64
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  357 	ljmp	_int0
                                    358 ;--------------------------------------------------------
                                    359 ; global & static initialisations
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.globl __sdcc_gsinit_startup
                                    366 	.globl __sdcc_program_startup
                                    367 	.globl __start__stack
                                    368 	.globl __mcs51_genXINIT
                                    369 	.globl __mcs51_genXRAMCLEAR
                                    370 	.globl __mcs51_genRAMCLEAR
                                    371 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  372 	ljmp	__sdcc_program_startup
                                    373 ;--------------------------------------------------------
                                    374 ; Home
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area HOME    (CODE)
      000006                        378 __sdcc_program_startup:
      000006 02r06r96         [24]  379 	ljmp	_main
                                    380 ;	return from main will return to caller
                                    381 ;--------------------------------------------------------
                                    382 ; code
                                    383 ;--------------------------------------------------------
                                    384 	.area CSEG    (CODE)
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'putchar'
                                    387 ;------------------------------------------------------------
                                    388 ;c                         Allocated to registers 
                                    389 ;------------------------------------------------------------
                                    390 ;	walk.c:9: int putchar(int c) __naked {
                                    391 ;	-----------------------------------------
                                    392 ;	 function putchar
                                    393 ;	-----------------------------------------
      000000                        394 _putchar:
                                    395 ;	naked function: no prologue.
                                    396 ;	walk.c:14: __endasm;
      000000 E5 82            [12]  397 	mov	a, dpl
      000002 02 00 30         [24]  398 	ljmp	0x0030
                                    399 ;	walk.c:15: }
                                    400 ;	naked function: no epilogue.
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'getchar'
                                    403 ;------------------------------------------------------------
                                    404 ;	walk.c:17: int getchar(void) __naked {
                                    405 ;	-----------------------------------------
                                    406 ;	 function getchar
                                    407 ;	-----------------------------------------
      000005                        408 _getchar:
                                    409 ;	naked function: no prologue.
                                    410 ;	walk.c:23: __endasm;
      000005 12 00 32         [24]  411 	lcall	0x0032
      000008 F5 82            [12]  412 	mov	dpl, a
      00000A 75 83 00         [24]  413 	mov	dph, #0
      00000D 22               [24]  414 	ret
                                    415 ;	walk.c:24: }
                                    416 ;	naked function: no epilogue.
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'int0'
                                    419 ;------------------------------------------------------------
                                    420 ;	walk.c:30: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    421 ;	-----------------------------------------
                                    422 ;	 function int0
                                    423 ;	-----------------------------------------
      00000E                        424 _int0:
                           00000F   425 	ar7 = 0x0f
                           00000E   426 	ar6 = 0x0e
                           00000D   427 	ar5 = 0x0d
                           00000C   428 	ar4 = 0x0c
                           00000B   429 	ar3 = 0x0b
                           00000A   430 	ar2 = 0x0a
                           000009   431 	ar1 = 0x09
                           000008   432 	ar0 = 0x08
      00000E C0 D0            [24]  433 	push	psw
      000010 75 D0 08         [24]  434 	mov	psw,#0x08
                                    435 ;	walk.c:31: i0 = 0u;
      000013 78r00            [12]  436 	mov	r0,#_i0
      000015 76 00            [12]  437 	mov	@r0,#0x00
                                    438 ;	walk.c:32: }
      000017 D0 D0            [24]  439 	pop	psw
      000019 32               [24]  440 	reti
                                    441 ;	eliminated unneeded push/pop dpl
                                    442 ;	eliminated unneeded push/pop dph
                                    443 ;	eliminated unneeded push/pop b
                                    444 ;	eliminated unneeded push/pop acc
                                    445 ;------------------------------------------------------------
                                    446 ;Allocation info for local variables in function 'bang'
                                    447 ;------------------------------------------------------------
                                    448 ;	walk.c:38: static void bang(void) {
                                    449 ;	-----------------------------------------
                                    450 ;	 function bang
                                    451 ;	-----------------------------------------
      00001A                        452 _bang:
                           000007   453 	ar7 = 0x07
                           000006   454 	ar6 = 0x06
                           000005   455 	ar5 = 0x05
                           000004   456 	ar4 = 0x04
                           000003   457 	ar3 = 0x03
                           000002   458 	ar2 = 0x02
                           000001   459 	ar1 = 0x01
                           000000   460 	ar0 = 0x00
                                    461 ;	walk.c:39: (void)puts("Memory error");
      00001A 90r00r00         [24]  462 	mov	dptr,#___str_0
      00001D 75 F0 80         [24]  463 	mov	b,#0x80
      000020 12r00r00         [24]  464 	lcall	_puts
                                    465 ;	walk.c:35: PCON |= 2;
      000023 43 87 02         [24]  466 	orl	_PCON,#0x02
                                    467 ;	walk.c:42: return;
                                    468 ;	walk.c:43: }
      000026 22               [24]  469 	ret
                                    470 ;------------------------------------------------------------
                                    471 ;Allocation info for local variables in function 'setOE'
                                    472 ;------------------------------------------------------------
                                    473 ;mask                      Allocated to registers r7 
                                    474 ;------------------------------------------------------------
                                    475 ;	walk.c:85: static void setOE(uint8_t mask) {
                                    476 ;	-----------------------------------------
                                    477 ;	 function setOE
                                    478 ;	-----------------------------------------
      000027                        479 _setOE:
      000027 AF 82            [24]  480 	mov	r7,dpl
                                    481 ;	walk.c:86: OE76 |= mask;
      000029 78r01            [12]  482 	mov	r0,#_OE76
      00002B EF               [12]  483 	mov	a,r7
      00002C 46               [12]  484 	orl	a,@r0
      00002D F6               [12]  485 	mov	@r0,a
                                    486 ;	walk.c:87: P1_7 = 0;
                                    487 ;	assignBit
      00002E C2 97            [12]  488 	clr	_P1_7
                                    489 ;	walk.c:88: OEreg = OE76;
      000030 78r01            [12]  490 	mov	r0,#_OE76
      000032 90 F0 06         [24]  491 	mov	dptr,#_OEreg
      000035 E6               [12]  492 	mov	a,@r0
      000036 F0               [24]  493 	movx	@dptr,a
                                    494 ;	walk.c:89: P1_7 = 1;
                                    495 ;	assignBit
      000037 D2 97            [12]  496 	setb	_P1_7
                                    497 ;	walk.c:91: return;
                                    498 ;	walk.c:92: }
      000039 22               [24]  499 	ret
                                    500 ;------------------------------------------------------------
                                    501 ;Allocation info for local variables in function 'unsetOE'
                                    502 ;------------------------------------------------------------
                                    503 ;mask                      Allocated to registers r7 
                                    504 ;------------------------------------------------------------
                                    505 ;	walk.c:94: static void unsetOE(uint8_t mask) {
                                    506 ;	-----------------------------------------
                                    507 ;	 function unsetOE
                                    508 ;	-----------------------------------------
      00003A                        509 _unsetOE:
                                    510 ;	walk.c:95: OE76 &= ~mask;
      00003A E5 82            [12]  511 	mov	a,dpl
      00003C F4               [12]  512 	cpl	a
      00003D 78r01            [12]  513 	mov	r0,#_OE76
      00003F 56               [12]  514 	anl	a,@r0
      000040 F6               [12]  515 	mov	@r0,a
                                    516 ;	walk.c:96: P1_7 = 0;
                                    517 ;	assignBit
      000041 C2 97            [12]  518 	clr	_P1_7
                                    519 ;	walk.c:97: OEreg = OE76;
      000043 78r01            [12]  520 	mov	r0,#_OE76
      000045 90 F0 06         [24]  521 	mov	dptr,#_OEreg
      000048 E6               [12]  522 	mov	a,@r0
      000049 F0               [24]  523 	movx	@dptr,a
                                    524 ;	walk.c:98: P1_7 = 1;
                                    525 ;	assignBit
      00004A D2 97            [12]  526 	setb	_P1_7
                                    527 ;	walk.c:100: return;
                                    528 ;	walk.c:101: }
      00004C 22               [24]  529 	ret
                                    530 ;------------------------------------------------------------
                                    531 ;Allocation info for local variables in function 'flipOE'
                                    532 ;------------------------------------------------------------
                                    533 ;mask                      Allocated to registers r7 
                                    534 ;------------------------------------------------------------
                                    535 ;	walk.c:103: static void flipOE(uint8_t mask) {
                                    536 ;	-----------------------------------------
                                    537 ;	 function flipOE
                                    538 ;	-----------------------------------------
      00004D                        539 _flipOE:
      00004D AF 82            [24]  540 	mov	r7,dpl
                                    541 ;	walk.c:104: OE76 ^= mask;
      00004F 78r01            [12]  542 	mov	r0,#_OE76
      000051 EF               [12]  543 	mov	a,r7
      000052 66               [12]  544 	xrl	a,@r0
      000053 F6               [12]  545 	mov	@r0,a
                                    546 ;	walk.c:105: P1_7 = 0;
                                    547 ;	assignBit
      000054 C2 97            [12]  548 	clr	_P1_7
                                    549 ;	walk.c:106: OEreg = OE76;
      000056 78r01            [12]  550 	mov	r0,#_OE76
      000058 90 F0 06         [24]  551 	mov	dptr,#_OEreg
      00005B E6               [12]  552 	mov	a,@r0
      00005C F0               [24]  553 	movx	@dptr,a
                                    554 ;	walk.c:107: P1_7 = 1;
                                    555 ;	assignBit
      00005D D2 97            [12]  556 	setb	_P1_7
                                    557 ;	walk.c:109: return;
                                    558 ;	walk.c:110: }
      00005F 22               [24]  559 	ret
                                    560 ;------------------------------------------------------------
                                    561 ;Allocation info for local variables in function 'update'
                                    562 ;------------------------------------------------------------
                                    563 ;cur                       Allocated to stack - _bp -5
                                    564 ;j                         Allocated to stack - _bp -6
                                    565 ;t                         Allocated to stack - _bp +1
                                    566 ;sloc0                     Allocated to stack - _bp +4
                                    567 ;sloc1                     Allocated to stack - _bp +6
                                    568 ;sloc2                     Allocated to stack - _bp +8
                                    569 ;------------------------------------------------------------
                                    570 ;	walk.c:112: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    571 ;	-----------------------------------------
                                    572 ;	 function update
                                    573 ;	-----------------------------------------
      000060                        574 _update:
      000060 C0*00            [24]  575 	push	_bp
      000062 85 81*00         [24]  576 	mov	_bp,sp
      000065 C0 82            [24]  577 	push	dpl
      000067 C0 83            [24]  578 	push	dph
      000069 C0 F0            [24]  579 	push	b
      00006B E5 81            [12]  580 	mov	a,sp
      00006D 24 07            [12]  581 	add	a,#0x07
      00006F F5 81            [12]  582 	mov	sp,a
                                    583 ;	walk.c:113: t->r = cur->r + neigh[j].r;
      000071 E5*00            [12]  584 	mov	a,_bp
      000073 24 FB            [12]  585 	add	a,#0xfb
      000075 F8               [12]  586 	mov	r0,a
      000076 86 02            [24]  587 	mov	ar2,@r0
      000078 08               [12]  588 	inc	r0
      000079 86 03            [24]  589 	mov	ar3,@r0
      00007B 08               [12]  590 	inc	r0
      00007C 86 04            [24]  591 	mov	ar4,@r0
      00007E 8A 82            [24]  592 	mov	dpl,r2
      000080 8B 83            [24]  593 	mov	dph,r3
      000082 8C F0            [24]  594 	mov	b,r4
      000084 E5*00            [12]  595 	mov	a,_bp
      000086 24 04            [12]  596 	add	a,#0x04
      000088 F8               [12]  597 	mov	r0,a
      000089 12r00r00         [24]  598 	lcall	__gptrget
      00008C F6               [12]  599 	mov	@r0,a
      00008D A3               [24]  600 	inc	dptr
      00008E 12r00r00         [24]  601 	lcall	__gptrget
      000091 08               [12]  602 	inc	r0
      000092 F6               [12]  603 	mov	@r0,a
      000093 E5*00            [12]  604 	mov	a,_bp
      000095 24 FA            [12]  605 	add	a,#0xfa
      000097 F8               [12]  606 	mov	r0,a
      000098 E5*00            [12]  607 	mov	a,_bp
      00009A 24 06            [12]  608 	add	a,#0x06
      00009C F9               [12]  609 	mov	r1,a
      00009D E6               [12]  610 	mov	a,@r0
      00009E 75 F0 04         [24]  611 	mov	b,#0x04
      0000A1 A4               [48]  612 	mul	ab
      0000A2 F7               [12]  613 	mov	@r1,a
      0000A3 09               [12]  614 	inc	r1
      0000A4 A7 F0            [24]  615 	mov	@r1,b
      0000A6 E5*00            [12]  616 	mov	a,_bp
      0000A8 24 06            [12]  617 	add	a,#0x06
      0000AA F8               [12]  618 	mov	r0,a
      0000AB E6               [12]  619 	mov	a,@r0
      0000AC 24r00            [12]  620 	add	a,#_neigh
      0000AE F5 82            [12]  621 	mov	dpl,a
      0000B0 08               [12]  622 	inc	r0
      0000B1 E6               [12]  623 	mov	a,@r0
      0000B2 34s00            [12]  624 	addc	a,#(_neigh >> 8)
      0000B4 F5 83            [12]  625 	mov	dph,a
      0000B6 E0               [24]  626 	movx	a,@dptr
      0000B7 FF               [12]  627 	mov	r7,a
      0000B8 A3               [24]  628 	inc	dptr
      0000B9 E0               [24]  629 	movx	a,@dptr
      0000BA FE               [12]  630 	mov	r6,a
      0000BB E5*00            [12]  631 	mov	a,_bp
      0000BD 24 04            [12]  632 	add	a,#0x04
      0000BF F8               [12]  633 	mov	r0,a
      0000C0 EF               [12]  634 	mov	a,r7
      0000C1 26               [12]  635 	add	a,@r0
      0000C2 FF               [12]  636 	mov	r7,a
      0000C3 EE               [12]  637 	mov	a,r6
      0000C4 08               [12]  638 	inc	r0
      0000C5 36               [12]  639 	addc	a,@r0
      0000C6 FE               [12]  640 	mov	r6,a
      0000C7 A8*00            [24]  641 	mov	r0,_bp
      0000C9 08               [12]  642 	inc	r0
      0000CA 86 82            [24]  643 	mov	dpl,@r0
      0000CC 08               [12]  644 	inc	r0
      0000CD 86 83            [24]  645 	mov	dph,@r0
      0000CF 08               [12]  646 	inc	r0
      0000D0 86 F0            [24]  647 	mov	b,@r0
      0000D2 EF               [12]  648 	mov	a,r7
      0000D3 12r00r00         [24]  649 	lcall	__gptrput
      0000D6 A3               [24]  650 	inc	dptr
      0000D7 EE               [12]  651 	mov	a,r6
      0000D8 12r00r00         [24]  652 	lcall	__gptrput
                                    653 ;	walk.c:114: t->c = cur->c + neigh[j].c;
      0000DB A8*00            [24]  654 	mov	r0,_bp
      0000DD 08               [12]  655 	inc	r0
      0000DE E5*00            [12]  656 	mov	a,_bp
      0000E0 24 08            [12]  657 	add	a,#0x08
      0000E2 F9               [12]  658 	mov	r1,a
      0000E3 74 02            [12]  659 	mov	a,#0x02
      0000E5 26               [12]  660 	add	a,@r0
      0000E6 F7               [12]  661 	mov	@r1,a
      0000E7 E4               [12]  662 	clr	a
      0000E8 08               [12]  663 	inc	r0
      0000E9 36               [12]  664 	addc	a,@r0
      0000EA 09               [12]  665 	inc	r1
      0000EB F7               [12]  666 	mov	@r1,a
      0000EC 08               [12]  667 	inc	r0
      0000ED 09               [12]  668 	inc	r1
      0000EE E6               [12]  669 	mov	a,@r0
      0000EF F7               [12]  670 	mov	@r1,a
      0000F0 74 02            [12]  671 	mov	a,#0x02
      0000F2 2A               [12]  672 	add	a,r2
      0000F3 FA               [12]  673 	mov	r2,a
      0000F4 E4               [12]  674 	clr	a
      0000F5 3B               [12]  675 	addc	a,r3
      0000F6 FB               [12]  676 	mov	r3,a
      0000F7 8A 82            [24]  677 	mov	dpl,r2
      0000F9 8B 83            [24]  678 	mov	dph,r3
      0000FB 8C F0            [24]  679 	mov	b,r4
      0000FD 12r00r00         [24]  680 	lcall	__gptrget
      000100 FA               [12]  681 	mov	r2,a
      000101 A3               [24]  682 	inc	dptr
      000102 12r00r00         [24]  683 	lcall	__gptrget
      000105 FB               [12]  684 	mov	r3,a
      000106 E5*00            [12]  685 	mov	a,_bp
      000108 24 06            [12]  686 	add	a,#0x06
      00010A F8               [12]  687 	mov	r0,a
      00010B E6               [12]  688 	mov	a,@r0
      00010C 24r00            [12]  689 	add	a,#_neigh
      00010E FC               [12]  690 	mov	r4,a
      00010F 08               [12]  691 	inc	r0
      000110 E6               [12]  692 	mov	a,@r0
      000111 34s00            [12]  693 	addc	a,#(_neigh >> 8)
      000113 FD               [12]  694 	mov	r5,a
      000114 8C 82            [24]  695 	mov	dpl,r4
      000116 8D 83            [24]  696 	mov	dph,r5
      000118 A3               [24]  697 	inc	dptr
      000119 A3               [24]  698 	inc	dptr
      00011A E0               [24]  699 	movx	a,@dptr
      00011B FC               [12]  700 	mov	r4,a
      00011C A3               [24]  701 	inc	dptr
      00011D E0               [24]  702 	movx	a,@dptr
      00011E FD               [12]  703 	mov	r5,a
      00011F EC               [12]  704 	mov	a,r4
      000120 2A               [12]  705 	add	a,r2
      000121 FA               [12]  706 	mov	r2,a
      000122 ED               [12]  707 	mov	a,r5
      000123 3B               [12]  708 	addc	a,r3
      000124 FB               [12]  709 	mov	r3,a
      000125 E5*00            [12]  710 	mov	a,_bp
      000127 24 08            [12]  711 	add	a,#0x08
      000129 F8               [12]  712 	mov	r0,a
      00012A 86 82            [24]  713 	mov	dpl,@r0
      00012C 08               [12]  714 	inc	r0
      00012D 86 83            [24]  715 	mov	dph,@r0
      00012F 08               [12]  716 	inc	r0
      000130 86 F0            [24]  717 	mov	b,@r0
      000132 EA               [12]  718 	mov	a,r2
      000133 12r00r00         [24]  719 	lcall	__gptrput
      000136 A3               [24]  720 	inc	dptr
      000137 EB               [12]  721 	mov	a,r3
      000138 12r00r00         [24]  722 	lcall	__gptrput
                                    723 ;	walk.c:116: if (t->r < 0) t->r += ROWS;
      00013B A8*00            [24]  724 	mov	r0,_bp
      00013D 08               [12]  725 	inc	r0
      00013E 86 82            [24]  726 	mov	dpl,@r0
      000140 08               [12]  727 	inc	r0
      000141 86 83            [24]  728 	mov	dph,@r0
      000143 08               [12]  729 	inc	r0
      000144 86 F0            [24]  730 	mov	b,@r0
      000146 12r00r00         [24]  731 	lcall	__gptrget
      000149 FD               [12]  732 	mov	r5,a
      00014A A3               [24]  733 	inc	dptr
      00014B 12r00r00         [24]  734 	lcall	__gptrget
      00014E FC               [12]  735 	mov	r4,a
      00014F EE               [12]  736 	mov	a,r6
      000150 30 E7 1D         [24]  737 	jnb	acc.7,00104$
      000153 74 30            [12]  738 	mov	a,#0x30
      000155 2D               [12]  739 	add	a,r5
      000156 FF               [12]  740 	mov	r7,a
      000157 E4               [12]  741 	clr	a
      000158 3C               [12]  742 	addc	a,r4
      000159 FE               [12]  743 	mov	r6,a
      00015A A8*00            [24]  744 	mov	r0,_bp
      00015C 08               [12]  745 	inc	r0
      00015D 86 82            [24]  746 	mov	dpl,@r0
      00015F 08               [12]  747 	inc	r0
      000160 86 83            [24]  748 	mov	dph,@r0
      000162 08               [12]  749 	inc	r0
      000163 86 F0            [24]  750 	mov	b,@r0
      000165 EF               [12]  751 	mov	a,r7
      000166 12r00r00         [24]  752 	lcall	__gptrput
      000169 A3               [24]  753 	inc	dptr
      00016A EE               [12]  754 	mov	a,r6
      00016B 12r00r00         [24]  755 	lcall	__gptrput
      00016E 80 27            [24]  756 	sjmp	00105$
      000170                        757 00104$:
                                    758 ;	walk.c:117: else if (t->r >= ROWS) t->r -= ROWS;
      000170 C3               [12]  759 	clr	c
      000171 ED               [12]  760 	mov	a,r5
      000172 94 30            [12]  761 	subb	a,#0x30
      000174 EC               [12]  762 	mov	a,r4
      000175 64 80            [12]  763 	xrl	a,#0x80
      000177 94 80            [12]  764 	subb	a,#0x80
      000179 40 1C            [24]  765 	jc	00105$
      00017B ED               [12]  766 	mov	a,r5
      00017C 24 D0            [12]  767 	add	a,#0xd0
      00017E FD               [12]  768 	mov	r5,a
      00017F EC               [12]  769 	mov	a,r4
      000180 34 FF            [12]  770 	addc	a,#0xff
      000182 FC               [12]  771 	mov	r4,a
      000183 A8*00            [24]  772 	mov	r0,_bp
      000185 08               [12]  773 	inc	r0
      000186 86 82            [24]  774 	mov	dpl,@r0
      000188 08               [12]  775 	inc	r0
      000189 86 83            [24]  776 	mov	dph,@r0
      00018B 08               [12]  777 	inc	r0
      00018C 86 F0            [24]  778 	mov	b,@r0
      00018E ED               [12]  779 	mov	a,r5
      00018F 12r00r00         [24]  780 	lcall	__gptrput
      000192 A3               [24]  781 	inc	dptr
      000193 EC               [12]  782 	mov	a,r4
      000194 12r00r00         [24]  783 	lcall	__gptrput
      000197                        784 00105$:
                                    785 ;	walk.c:118: if (t->c < 0) t->c += COLS;
      000197 E5*00            [12]  786 	mov	a,_bp
      000199 24 08            [12]  787 	add	a,#0x08
      00019B F8               [12]  788 	mov	r0,a
      00019C 86 82            [24]  789 	mov	dpl,@r0
      00019E 08               [12]  790 	inc	r0
      00019F 86 83            [24]  791 	mov	dph,@r0
      0001A1 08               [12]  792 	inc	r0
      0001A2 86 F0            [24]  793 	mov	b,@r0
      0001A4 12r00r00         [24]  794 	lcall	__gptrget
      0001A7 A3               [24]  795 	inc	dptr
      0001A8 12r00r00         [24]  796 	lcall	__gptrget
      0001AB 30 E7 35         [24]  797 	jnb	acc.7,00109$
      0001AE E5*00            [12]  798 	mov	a,_bp
      0001B0 24 08            [12]  799 	add	a,#0x08
      0001B2 F8               [12]  800 	mov	r0,a
      0001B3 86 82            [24]  801 	mov	dpl,@r0
      0001B5 08               [12]  802 	inc	r0
      0001B6 86 83            [24]  803 	mov	dph,@r0
      0001B8 08               [12]  804 	inc	r0
      0001B9 86 F0            [24]  805 	mov	b,@r0
      0001BB 12r00r00         [24]  806 	lcall	__gptrget
      0001BE FE               [12]  807 	mov	r6,a
      0001BF A3               [24]  808 	inc	dptr
      0001C0 12r00r00         [24]  809 	lcall	__gptrget
      0001C3 FF               [12]  810 	mov	r7,a
      0001C4 74 C9            [12]  811 	mov	a,#0xc9
      0001C6 2E               [12]  812 	add	a,r6
      0001C7 FE               [12]  813 	mov	r6,a
      0001C8 E4               [12]  814 	clr	a
      0001C9 3F               [12]  815 	addc	a,r7
      0001CA FF               [12]  816 	mov	r7,a
      0001CB E5*00            [12]  817 	mov	a,_bp
      0001CD 24 08            [12]  818 	add	a,#0x08
      0001CF F8               [12]  819 	mov	r0,a
      0001D0 86 82            [24]  820 	mov	dpl,@r0
      0001D2 08               [12]  821 	inc	r0
      0001D3 86 83            [24]  822 	mov	dph,@r0
      0001D5 08               [12]  823 	inc	r0
      0001D6 86 F0            [24]  824 	mov	b,@r0
      0001D8 EE               [12]  825 	mov	a,r6
      0001D9 12r00r00         [24]  826 	lcall	__gptrput
      0001DC A3               [24]  827 	inc	dptr
      0001DD EF               [12]  828 	mov	a,r7
      0001DE 12r00r00         [24]  829 	lcall	__gptrput
      0001E1 80 55            [24]  830 	sjmp	00110$
      0001E3                        831 00109$:
                                    832 ;	walk.c:119: else if (t->c >= COLS) t->c -= COLS;
      0001E3 E5*00            [12]  833 	mov	a,_bp
      0001E5 24 08            [12]  834 	add	a,#0x08
      0001E7 F8               [12]  835 	mov	r0,a
      0001E8 86 82            [24]  836 	mov	dpl,@r0
      0001EA 08               [12]  837 	inc	r0
      0001EB 86 83            [24]  838 	mov	dph,@r0
      0001ED 08               [12]  839 	inc	r0
      0001EE 86 F0            [24]  840 	mov	b,@r0
      0001F0 12r00r00         [24]  841 	lcall	__gptrget
      0001F3 FE               [12]  842 	mov	r6,a
      0001F4 A3               [24]  843 	inc	dptr
      0001F5 12r00r00         [24]  844 	lcall	__gptrget
      0001F8 FF               [12]  845 	mov	r7,a
      0001F9 C3               [12]  846 	clr	c
      0001FA EE               [12]  847 	mov	a,r6
      0001FB 94 C9            [12]  848 	subb	a,#0xc9
      0001FD EF               [12]  849 	mov	a,r7
      0001FE 64 80            [12]  850 	xrl	a,#0x80
      000200 94 80            [12]  851 	subb	a,#0x80
      000202 40 34            [24]  852 	jc	00110$
      000204 E5*00            [12]  853 	mov	a,_bp
      000206 24 08            [12]  854 	add	a,#0x08
      000208 F8               [12]  855 	mov	r0,a
      000209 86 82            [24]  856 	mov	dpl,@r0
      00020B 08               [12]  857 	inc	r0
      00020C 86 83            [24]  858 	mov	dph,@r0
      00020E 08               [12]  859 	inc	r0
      00020F 86 F0            [24]  860 	mov	b,@r0
      000211 12r00r00         [24]  861 	lcall	__gptrget
      000214 FE               [12]  862 	mov	r6,a
      000215 A3               [24]  863 	inc	dptr
      000216 12r00r00         [24]  864 	lcall	__gptrget
      000219 FF               [12]  865 	mov	r7,a
      00021A EE               [12]  866 	mov	a,r6
      00021B 24 37            [12]  867 	add	a,#0x37
      00021D FE               [12]  868 	mov	r6,a
      00021E EF               [12]  869 	mov	a,r7
      00021F 34 FF            [12]  870 	addc	a,#0xff
      000221 FF               [12]  871 	mov	r7,a
      000222 E5*00            [12]  872 	mov	a,_bp
      000224 24 08            [12]  873 	add	a,#0x08
      000226 F8               [12]  874 	mov	r0,a
      000227 86 82            [24]  875 	mov	dpl,@r0
      000229 08               [12]  876 	inc	r0
      00022A 86 83            [24]  877 	mov	dph,@r0
      00022C 08               [12]  878 	inc	r0
      00022D 86 F0            [24]  879 	mov	b,@r0
      00022F EE               [12]  880 	mov	a,r6
      000230 12r00r00         [24]  881 	lcall	__gptrput
      000233 A3               [24]  882 	inc	dptr
      000234 EF               [12]  883 	mov	a,r7
      000235 12r00r00         [24]  884 	lcall	__gptrput
      000238                        885 00110$:
                                    886 ;	walk.c:121: if (g[t->r][t->c] == 0xaau) return 0u;
      000238 A8*00            [24]  887 	mov	r0,_bp
      00023A 08               [12]  888 	inc	r0
      00023B 86 82            [24]  889 	mov	dpl,@r0
      00023D 08               [12]  890 	inc	r0
      00023E 86 83            [24]  891 	mov	dph,@r0
      000240 08               [12]  892 	inc	r0
      000241 86 F0            [24]  893 	mov	b,@r0
      000243 12r00r00         [24]  894 	lcall	__gptrget
      000246 FE               [12]  895 	mov	r6,a
      000247 A3               [24]  896 	inc	dptr
      000248 12r00r00         [24]  897 	lcall	__gptrget
      00024B FF               [12]  898 	mov	r7,a
      00024C C0 06            [24]  899 	push	ar6
      00024E C0 07            [24]  900 	push	ar7
      000250 90 00 C9         [24]  901 	mov	dptr,#0x00c9
      000253 12r00r00         [24]  902 	lcall	__mulint
      000256 AE 82            [24]  903 	mov	r6,dpl
      000258 AF 83            [24]  904 	mov	r7,dph
      00025A 15 81            [12]  905 	dec	sp
      00025C 15 81            [12]  906 	dec	sp
      00025E EE               [12]  907 	mov	a,r6
      00025F 24r00            [12]  908 	add	a,#_g
      000261 FE               [12]  909 	mov	r6,a
      000262 EF               [12]  910 	mov	a,r7
      000263 34s00            [12]  911 	addc	a,#(_g >> 8)
      000265 FF               [12]  912 	mov	r7,a
      000266 E5*00            [12]  913 	mov	a,_bp
      000268 24 08            [12]  914 	add	a,#0x08
      00026A F8               [12]  915 	mov	r0,a
      00026B 86 82            [24]  916 	mov	dpl,@r0
      00026D 08               [12]  917 	inc	r0
      00026E 86 83            [24]  918 	mov	dph,@r0
      000270 08               [12]  919 	inc	r0
      000271 86 F0            [24]  920 	mov	b,@r0
      000273 12r00r00         [24]  921 	lcall	__gptrget
      000276 FC               [12]  922 	mov	r4,a
      000277 A3               [24]  923 	inc	dptr
      000278 12r00r00         [24]  924 	lcall	__gptrget
      00027B FD               [12]  925 	mov	r5,a
      00027C EC               [12]  926 	mov	a,r4
      00027D 2E               [12]  927 	add	a,r6
      00027E F5 82            [12]  928 	mov	dpl,a
      000280 ED               [12]  929 	mov	a,r5
      000281 3F               [12]  930 	addc	a,r7
      000282 F5 83            [12]  931 	mov	dph,a
      000284 E0               [24]  932 	movx	a,@dptr
      000285 FF               [12]  933 	mov	r7,a
      000286 BF AA 05         [24]  934 	cjne	r7,#0xaa,00114$
      000289 75 82 00         [24]  935 	mov	dpl,#0x00
      00028C 80 59            [24]  936 	sjmp	00116$
      00028E                        937 00114$:
                                    938 ;	walk.c:122: else if (g[t->r][t->c] != 0x55u) bang();
      00028E A8*00            [24]  939 	mov	r0,_bp
      000290 08               [12]  940 	inc	r0
      000291 86 82            [24]  941 	mov	dpl,@r0
      000293 08               [12]  942 	inc	r0
      000294 86 83            [24]  943 	mov	dph,@r0
      000296 08               [12]  944 	inc	r0
      000297 86 F0            [24]  945 	mov	b,@r0
      000299 12r00r00         [24]  946 	lcall	__gptrget
      00029C FE               [12]  947 	mov	r6,a
      00029D A3               [24]  948 	inc	dptr
      00029E 12r00r00         [24]  949 	lcall	__gptrget
      0002A1 FF               [12]  950 	mov	r7,a
      0002A2 C0 06            [24]  951 	push	ar6
      0002A4 C0 07            [24]  952 	push	ar7
      0002A6 90 00 C9         [24]  953 	mov	dptr,#0x00c9
      0002A9 12r00r00         [24]  954 	lcall	__mulint
      0002AC AE 82            [24]  955 	mov	r6,dpl
      0002AE AF 83            [24]  956 	mov	r7,dph
      0002B0 15 81            [12]  957 	dec	sp
      0002B2 15 81            [12]  958 	dec	sp
      0002B4 EE               [12]  959 	mov	a,r6
      0002B5 24r00            [12]  960 	add	a,#_g
      0002B7 FE               [12]  961 	mov	r6,a
      0002B8 EF               [12]  962 	mov	a,r7
      0002B9 34s00            [12]  963 	addc	a,#(_g >> 8)
      0002BB FF               [12]  964 	mov	r7,a
      0002BC E5*00            [12]  965 	mov	a,_bp
      0002BE 24 08            [12]  966 	add	a,#0x08
      0002C0 F8               [12]  967 	mov	r0,a
      0002C1 86 82            [24]  968 	mov	dpl,@r0
      0002C3 08               [12]  969 	inc	r0
      0002C4 86 83            [24]  970 	mov	dph,@r0
      0002C6 08               [12]  971 	inc	r0
      0002C7 86 F0            [24]  972 	mov	b,@r0
      0002C9 12r00r00         [24]  973 	lcall	__gptrget
      0002CC FC               [12]  974 	mov	r4,a
      0002CD A3               [24]  975 	inc	dptr
      0002CE 12r00r00         [24]  976 	lcall	__gptrget
      0002D1 FD               [12]  977 	mov	r5,a
      0002D2 EC               [12]  978 	mov	a,r4
      0002D3 2E               [12]  979 	add	a,r6
      0002D4 F5 82            [12]  980 	mov	dpl,a
      0002D6 ED               [12]  981 	mov	a,r5
      0002D7 3F               [12]  982 	addc	a,r7
      0002D8 F5 83            [12]  983 	mov	dph,a
      0002DA E0               [24]  984 	movx	a,@dptr
      0002DB FF               [12]  985 	mov	r7,a
      0002DC BF 55 02         [24]  986 	cjne	r7,#0x55,00148$
      0002DF 80 03            [24]  987 	sjmp	00115$
      0002E1                        988 00148$:
      0002E1 12r00r1A         [24]  989 	lcall	_bang
      0002E4                        990 00115$:
                                    991 ;	walk.c:124: return 1u;
      0002E4 75 82 01         [24]  992 	mov	dpl,#0x01
      0002E7                        993 00116$:
                                    994 ;	walk.c:125: }
      0002E7 85*00 81         [24]  995 	mov	sp,_bp
      0002EA D0*00            [24]  996 	pop	_bp
      0002EC 22               [24]  997 	ret
                                    998 ;------------------------------------------------------------
                                    999 ;Allocation info for local variables in function 'walk'
                                   1000 ;------------------------------------------------------------
                                   1001 ;nstart                    Allocated to registers r5 r6 r7 
                                   1002 ;cur                       Allocated to stack - _bp +7
                                   1003 ;t                         Allocated to stack - _bp +11
                                   1004 ;scramble                  Allocated to stack - _bp +15
                                   1005 ;ti                        Allocated to registers r2 
                                   1006 ;tj                        Allocated to registers r6 
                                   1007 ;tx                        Allocated to stack - _bp +31
                                   1008 ;j                         Allocated to stack - _bp +32
                                   1009 ;sloc0                     Allocated to stack - _bp +1
                                   1010 ;sloc1                     Allocated to stack - _bp +3
                                   1011 ;sloc2                     Allocated to stack - _bp +35
                                   1012 ;sloc3                     Allocated to stack - _bp +4
                                   1013 ;------------------------------------------------------------
                                   1014 ;	walk.c:127: static void walk(struct node *nstart) {
                                   1015 ;	-----------------------------------------
                                   1016 ;	 function walk
                                   1017 ;	-----------------------------------------
      0002ED                       1018 _walk:
      0002ED C0*00            [24] 1019 	push	_bp
      0002EF E5 81            [12] 1020 	mov	a,sp
      0002F1 F5*00            [12] 1021 	mov	_bp,a
      0002F3 24 20            [12] 1022 	add	a,#0x20
      0002F5 F5 81            [12] 1023 	mov	sp,a
                                   1024 ;	walk.c:132: if (!qadd(nstart)) bang();
      0002F7 AD 82            [24] 1025 	mov	r5,dpl
      0002F9 AE 83            [24] 1026 	mov	r6,dph
      0002FB AF F0            [24] 1027 	mov	r7,b
      0002FD C0 07            [24] 1028 	push	ar7
      0002FF C0 06            [24] 1029 	push	ar6
      000301 C0 05            [24] 1030 	push	ar5
      000303 12r0Ar7F         [24] 1031 	lcall	_qadd
      000306 E5 82            [12] 1032 	mov	a,dpl
      000308 D0 05            [24] 1033 	pop	ar5
      00030A D0 06            [24] 1034 	pop	ar6
      00030C D0 07            [24] 1035 	pop	ar7
      00030E 70 0F            [24] 1036 	jnz	00102$
      000310 C0 07            [24] 1037 	push	ar7
      000312 C0 06            [24] 1038 	push	ar6
      000314 C0 05            [24] 1039 	push	ar5
      000316 12r00r1A         [24] 1040 	lcall	_bang
      000319 D0 05            [24] 1041 	pop	ar5
      00031B D0 06            [24] 1042 	pop	ar6
      00031D D0 07            [24] 1043 	pop	ar7
      00031F                       1044 00102$:
                                   1045 ;	walk.c:133: g[nstart->r][nstart->c] = 0xaau;
      00031F 8D 82            [24] 1046 	mov	dpl,r5
      000321 8E 83            [24] 1047 	mov	dph,r6
      000323 8F F0            [24] 1048 	mov	b,r7
      000325 12r00r00         [24] 1049 	lcall	__gptrget
      000328 FB               [12] 1050 	mov	r3,a
      000329 A3               [24] 1051 	inc	dptr
      00032A 12r00r00         [24] 1052 	lcall	__gptrget
      00032D FC               [12] 1053 	mov	r4,a
      00032E C0 07            [24] 1054 	push	ar7
      000330 C0 06            [24] 1055 	push	ar6
      000332 C0 05            [24] 1056 	push	ar5
      000334 C0 03            [24] 1057 	push	ar3
      000336 C0 04            [24] 1058 	push	ar4
      000338 90 00 C9         [24] 1059 	mov	dptr,#0x00c9
      00033B 12r00r00         [24] 1060 	lcall	__mulint
      00033E AB 82            [24] 1061 	mov	r3,dpl
      000340 AC 83            [24] 1062 	mov	r4,dph
      000342 15 81            [12] 1063 	dec	sp
      000344 15 81            [12] 1064 	dec	sp
      000346 D0 05            [24] 1065 	pop	ar5
      000348 D0 06            [24] 1066 	pop	ar6
      00034A D0 07            [24] 1067 	pop	ar7
      00034C EB               [12] 1068 	mov	a,r3
      00034D 24r00            [12] 1069 	add	a,#_g
      00034F FB               [12] 1070 	mov	r3,a
      000350 EC               [12] 1071 	mov	a,r4
      000351 34s00            [12] 1072 	addc	a,#(_g >> 8)
      000353 FC               [12] 1073 	mov	r4,a
      000354 74 02            [12] 1074 	mov	a,#0x02
      000356 2D               [12] 1075 	add	a,r5
      000357 FD               [12] 1076 	mov	r5,a
      000358 E4               [12] 1077 	clr	a
      000359 3E               [12] 1078 	addc	a,r6
      00035A FE               [12] 1079 	mov	r6,a
      00035B 8D 82            [24] 1080 	mov	dpl,r5
      00035D 8E 83            [24] 1081 	mov	dph,r6
      00035F 8F F0            [24] 1082 	mov	b,r7
      000361 12r00r00         [24] 1083 	lcall	__gptrget
      000364 FD               [12] 1084 	mov	r5,a
      000365 A3               [24] 1085 	inc	dptr
      000366 12r00r00         [24] 1086 	lcall	__gptrget
      000369 FE               [12] 1087 	mov	r6,a
      00036A ED               [12] 1088 	mov	a,r5
      00036B 2B               [12] 1089 	add	a,r3
      00036C F5 82            [12] 1090 	mov	dpl,a
      00036E EE               [12] 1091 	mov	a,r6
      00036F 3C               [12] 1092 	addc	a,r4
      000370 F5 83            [12] 1093 	mov	dph,a
      000372 74 AA            [12] 1094 	mov	a,#0xaa
      000374 F0               [24] 1095 	movx	@dptr,a
                                   1096 ;	walk.c:135: process:
      000375 E5*00            [12] 1097 	mov	a,_bp
      000377 24 0F            [12] 1098 	add	a,#0x0f
      000379 FF               [12] 1099 	mov	r7,a
      00037A E5*00            [12] 1100 	mov	a,_bp
      00037C 24 0B            [12] 1101 	add	a,#0x0b
      00037E F9               [12] 1102 	mov	r1,a
      00037F E5*00            [12] 1103 	mov	a,_bp
      000381 24 03            [12] 1104 	add	a,#0x03
      000383 F8               [12] 1105 	mov	r0,a
      000384 A6 01            [24] 1106 	mov	@r0,ar1
      000386 74 02            [12] 1107 	mov	a,#0x02
      000388 29               [12] 1108 	add	a,r1
      000389 F8               [12] 1109 	mov	r0,a
      00038A E5*00            [12] 1110 	mov	a,_bp
      00038C 24 07            [12] 1111 	add	a,#0x07
      00038E FD               [12] 1112 	mov	r5,a
      00038F                       1113 00103$:
                                   1114 ;	walk.c:136: unsetOE(OE76_MASK7 | OE76_MASK6);
      00038F 75 82 C0         [24] 1115 	mov	dpl,#0xc0
      000392 C0 07            [24] 1116 	push	ar7
      000394 C0 05            [24] 1117 	push	ar5
      000396 C0 01            [24] 1118 	push	ar1
      000398 C0 00            [24] 1119 	push	ar0
      00039A 12r00r3A         [24] 1120 	lcall	_unsetOE
      00039D D0 00            [24] 1121 	pop	ar0
      00039F D0 01            [24] 1122 	pop	ar1
      0003A1 D0 05            [24] 1123 	pop	ar5
                                   1124 ;	walk.c:138: if (!qget(&cur)) goto term;
      0003A3 8D 02            [24] 1125 	mov	ar2,r5
      0003A5 7B 00            [12] 1126 	mov	r3,#0x00
      0003A7 7C 40            [12] 1127 	mov	r4,#0x40
      0003A9 8A 82            [24] 1128 	mov	dpl,r2
      0003AB 8B 83            [24] 1129 	mov	dph,r3
      0003AD 8C F0            [24] 1130 	mov	b,r4
      0003AF C0 05            [24] 1131 	push	ar5
      0003B1 C0 01            [24] 1132 	push	ar1
      0003B3 C0 00            [24] 1133 	push	ar0
      0003B5 12r0Br71         [24] 1134 	lcall	_qget
      0003B8 E5 82            [12] 1135 	mov	a,dpl
      0003BA D0 00            [24] 1136 	pop	ar0
      0003BC D0 01            [24] 1137 	pop	ar1
      0003BE D0 05            [24] 1138 	pop	ar5
      0003C0 D0 07            [24] 1139 	pop	ar7
      0003C2 70 03            [24] 1140 	jnz	00184$
      0003C4 02r06r90         [24] 1141 	ljmp	00119$
      0003C7                       1142 00184$:
                                   1143 ;	walk.c:140: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      0003C7 74 02            [12] 1144 	mov	a,#0x02
      0003C9 2D               [12] 1145 	add	a,r5
      0003CA FC               [12] 1146 	mov	r4,a
      0003CB C0 00            [24] 1147 	push	ar0
      0003CD A8*00            [24] 1148 	mov	r0,_bp
      0003CF 08               [12] 1149 	inc	r0
      0003D0 C0 01            [24] 1150 	push	ar1
      0003D2 A9 04            [24] 1151 	mov	r1,ar4
      0003D4 E7               [12] 1152 	mov	a,@r1
      0003D5 F6               [12] 1153 	mov	@r0,a
      0003D6 09               [12] 1154 	inc	r1
      0003D7 E7               [12] 1155 	mov	a,@r1
      0003D8 08               [12] 1156 	inc	r0
      0003D9 F6               [12] 1157 	mov	@r0,a
      0003DA D0 01            [24] 1158 	pop	ar1
      0003DC A8 05            [24] 1159 	mov	r0,ar5
      0003DE 86 03            [24] 1160 	mov	ar3,@r0
      0003E0 08               [12] 1161 	inc	r0
      0003E1 86 06            [24] 1162 	mov	ar6,@r0
      0003E3 D0 00            [24] 1163 	pop	ar0
      0003E5 C0 07            [24] 1164 	push	ar7
      0003E7 C0 05            [24] 1165 	push	ar5
      0003E9 C0 04            [24] 1166 	push	ar4
      0003EB C0 01            [24] 1167 	push	ar1
      0003ED C0 00            [24] 1168 	push	ar0
      0003EF 85 00 F0         [24] 1169 	mov	b,ar0
      0003F2 A8*00            [24] 1170 	mov	r0,_bp
      0003F4 08               [12] 1171 	inc	r0
      0003F5 E6               [12] 1172 	mov	a,@r0
      0003F6 C0 E0            [24] 1173 	push	acc
      0003F8 08               [12] 1174 	inc	r0
      0003F9 E6               [12] 1175 	mov	a,@r0
      0003FA C0 E0            [24] 1176 	push	acc
      0003FC C0 03            [24] 1177 	push	ar3
      0003FE C0 06            [24] 1178 	push	ar6
      000400 90rBCr72         [24] 1179 	mov	dptr,#_tp
      000403 E0               [24] 1180 	movx	a,@dptr
      000404 C0 E0            [24] 1181 	push	acc
      000406 A3               [24] 1182 	inc	dptr
      000407 E0               [24] 1183 	movx	a,@dptr
      000408 C0 E0            [24] 1184 	push	acc
      00040A 90rBCr70         [24] 1185 	mov	dptr,#_hp
      00040D E0               [24] 1186 	movx	a,@dptr
      00040E C0 E0            [24] 1187 	push	acc
      000410 A3               [24] 1188 	inc	dptr
      000411 E0               [24] 1189 	movx	a,@dptr
      000412 C0 E0            [24] 1190 	push	acc
      000414 74r0D            [12] 1191 	mov	a,#___str_1
      000416 C0 E0            [24] 1192 	push	acc
      000418 74s00            [12] 1193 	mov	a,#(___str_1 >> 8)
      00041A C0 E0            [24] 1194 	push	acc
      00041C 74 80            [12] 1195 	mov	a,#0x80
      00041E C0 E0            [24] 1196 	push	acc
      000420 12r00r00         [24] 1197 	lcall	_printf
      000423 E5 81            [12] 1198 	mov	a,sp
      000425 24 F5            [12] 1199 	add	a,#0xf5
      000427 F5 81            [12] 1200 	mov	sp,a
      000429 D0 00            [24] 1201 	pop	ar0
      00042B D0 01            [24] 1202 	pop	ar1
      00042D D0 04            [24] 1203 	pop	ar4
      00042F D0 05            [24] 1204 	pop	ar5
      000431 D0 07            [24] 1205 	pop	ar7
                                   1206 ;	walk.c:142: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      000433 C0 00            [24] 1207 	push	ar0
      000435 A8 04            [24] 1208 	mov	r0,ar4
      000437 86 04            [24] 1209 	mov	ar4,@r0
      000439 08               [12] 1210 	inc	r0
      00043A 86 06            [24] 1211 	mov	ar6,@r0
      00043C D0 00            [24] 1212 	pop	ar0
      00043E 0C               [12] 1213 	inc	r4
      00043F BC 00 01         [24] 1214 	cjne	r4,#0x00,00185$
      000442 0E               [12] 1215 	inc	r6
      000443                       1216 00185$:
      000443 C0 00            [24] 1217 	push	ar0
      000445 A8 05            [24] 1218 	mov	r0,ar5
      000447 86 02            [24] 1219 	mov	ar2,@r0
      000449 08               [12] 1220 	inc	r0
      00044A 86 03            [24] 1221 	mov	ar3,@r0
      00044C D0 00            [24] 1222 	pop	ar0
      00044E 74 04            [12] 1223 	mov	a,#0x04
      000450 2A               [12] 1224 	add	a,r2
      000451 FA               [12] 1225 	mov	r2,a
      000452 E4               [12] 1226 	clr	a
      000453 3B               [12] 1227 	addc	a,r3
      000454 FB               [12] 1228 	mov	r3,a
      000455 C0 07            [24] 1229 	push	ar7
      000457 C0 05            [24] 1230 	push	ar5
      000459 C0 01            [24] 1231 	push	ar1
      00045B C0 00            [24] 1232 	push	ar0
      00045D C0 04            [24] 1233 	push	ar4
      00045F C0 06            [24] 1234 	push	ar6
      000461 C0 02            [24] 1235 	push	ar2
      000463 C0 03            [24] 1236 	push	ar3
      000465 74r24            [12] 1237 	mov	a,#___str_2
      000467 C0 E0            [24] 1238 	push	acc
      000469 74s00            [12] 1239 	mov	a,#(___str_2 >> 8)
      00046B C0 E0            [24] 1240 	push	acc
      00046D 74 80            [12] 1241 	mov	a,#0x80
      00046F C0 E0            [24] 1242 	push	acc
      000471 12r00r00         [24] 1243 	lcall	_printf
      000474 E5 81            [12] 1244 	mov	a,sp
      000476 24 F9            [12] 1245 	add	a,#0xf9
      000478 F5 81            [12] 1246 	mov	sp,a
                                   1247 ;	walk.c:143: setOE(OE76_MASK6);
      00047A 75 82 40         [24] 1248 	mov	dpl,#0x40
      00047D 12r00r27         [24] 1249 	lcall	_setOE
      000480 D0 00            [24] 1250 	pop	ar0
      000482 D0 01            [24] 1251 	pop	ar1
      000484 D0 05            [24] 1252 	pop	ar5
      000486 D0 07            [24] 1253 	pop	ar7
                                   1254 ;	walk.c:145: for (j = 0u; j < NMAX; j++)
      000488 7E 00            [12] 1255 	mov	r6,#0x00
                                   1256 ;	walk.c:172: return;
                                   1257 ;	walk.c:145: for (j = 0u; j < NMAX; j++)
      00048A                       1258 00120$:
                                   1259 ;	walk.c:146: scramble[j] = j;
      00048A EE               [12] 1260 	mov	a,r6
      00048B 2F               [12] 1261 	add	a,r7
      00048C C0 00            [24] 1262 	push	ar0
      00048E F8               [12] 1263 	mov	r0,a
      00048F A6 06            [24] 1264 	mov	@r0,ar6
      000491 D0 00            [24] 1265 	pop	ar0
                                   1266 ;	walk.c:145: for (j = 0u; j < NMAX; j++)
      000493 0E               [12] 1267 	inc	r6
      000494 BE 10 00         [24] 1268 	cjne	r6,#0x10,00186$
      000497                       1269 00186$:
      000497 40 F1            [24] 1270 	jc	00120$
                                   1271 ;	walk.c:148: do ti = (uint8_t)(rand() % NMAX);
      000499 7C 00            [12] 1272 	mov	r4,#0x00
      00049B                       1273 00107$:
      00049B C0 07            [24] 1274 	push	ar7
      00049D C0 05            [24] 1275 	push	ar5
      00049F C0 04            [24] 1276 	push	ar4
      0004A1 C0 01            [24] 1277 	push	ar1
      0004A3 C0 00            [24] 1278 	push	ar0
      0004A5 12r00r00         [24] 1279 	lcall	_rand
      0004A8 AA 82            [24] 1280 	mov	r2,dpl
      0004AA D0 00            [24] 1281 	pop	ar0
      0004AC D0 01            [24] 1282 	pop	ar1
      0004AE D0 04            [24] 1283 	pop	ar4
      0004B0 D0 05            [24] 1284 	pop	ar5
      0004B2 D0 07            [24] 1285 	pop	ar7
      0004B4 53 02 0F         [24] 1286 	anl	ar2,#0x0f
      0004B7 7B 00            [12] 1287 	mov	r3,#0x00
                                   1288 ;	walk.c:149: while (ti == j);
      0004B9 EA               [12] 1289 	mov	a,r2
      0004BA B5 04 02         [24] 1290 	cjne	a,ar4,00188$
      0004BD 80 DC            [24] 1291 	sjmp	00107$
      0004BF                       1292 00188$:
                                   1293 ;	walk.c:150: do tj = (uint8_t)(rand() % NMAX);
      0004BF                       1294 00110$:
      0004BF C0 05            [24] 1295 	push	ar5
      0004C1 C0 07            [24] 1296 	push	ar7
      0004C3 C0 04            [24] 1297 	push	ar4
      0004C5 C0 02            [24] 1298 	push	ar2
      0004C7 C0 01            [24] 1299 	push	ar1
      0004C9 C0 00            [24] 1300 	push	ar0
      0004CB 12r00r00         [24] 1301 	lcall	_rand
      0004CE AB 82            [24] 1302 	mov	r3,dpl
      0004D0 D0 00            [24] 1303 	pop	ar0
      0004D2 D0 01            [24] 1304 	pop	ar1
      0004D4 D0 02            [24] 1305 	pop	ar2
      0004D6 D0 04            [24] 1306 	pop	ar4
      0004D8 D0 07            [24] 1307 	pop	ar7
      0004DA 53 03 0F         [24] 1308 	anl	ar3,#0x0f
      0004DD 8B 06            [24] 1309 	mov	ar6,r3
                                   1310 ;	walk.c:151: while (ti == tj);
      0004DF EA               [12] 1311 	mov	a,r2
      0004E0 B5 06 04         [24] 1312 	cjne	a,ar6,00189$
      0004E3 D0 05            [24] 1313 	pop	ar5
      0004E5 80 D8            [24] 1314 	sjmp	00110$
      0004E7                       1315 00189$:
                                   1316 ;	walk.c:152: tx = scramble[ti];
      0004E7 EA               [12] 1317 	mov	a,r2
      0004E8 2F               [12] 1318 	add	a,r7
      0004E9 FB               [12] 1319 	mov	r3,a
      0004EA C0 00            [24] 1320 	push	ar0
      0004EC E5*00            [12] 1321 	mov	a,_bp
      0004EE 24 1F            [12] 1322 	add	a,#0x1f
      0004F0 F8               [12] 1323 	mov	r0,a
      0004F1 C0 01            [24] 1324 	push	ar1
      0004F3 A9 03            [24] 1325 	mov	r1,ar3
      0004F5 E7               [12] 1326 	mov	a,@r1
      0004F6 F6               [12] 1327 	mov	@r0,a
                                   1328 ;	walk.c:153: scramble[ti] = scramble[tj];
      0004F7 EE               [12] 1329 	mov	a,r6
      0004F8 2F               [12] 1330 	add	a,r7
      0004F9 FD               [12] 1331 	mov	r5,a
      0004FA A8 05            [24] 1332 	mov	r0,ar5
      0004FC 86 02            [24] 1333 	mov	ar2,@r0
      0004FE A8 03            [24] 1334 	mov	r0,ar3
      000500 A6 02            [24] 1335 	mov	@r0,ar2
                                   1336 ;	walk.c:154: scramble[tj] = tx;
      000502 A8 05            [24] 1337 	mov	r0,ar5
      000504 E5*00            [12] 1338 	mov	a,_bp
      000506 24 1F            [12] 1339 	add	a,#0x1f
      000508 F9               [12] 1340 	mov	r1,a
      000509 E7               [12] 1341 	mov	a,@r1
      00050A F6               [12] 1342 	mov	@r0,a
      00050B D0 00            [24] 1343 	pop	ar0
      00050D D0 01            [24] 1344 	pop	ar1
                                   1345 ;	walk.c:147: for (j = 0u; j < NMAX; j++) {
      00050F 0C               [12] 1346 	inc	r4
      000510 BC 10 00         [24] 1347 	cjne	r4,#0x10,00190$
      000513                       1348 00190$:
      000513 D0 05            [24] 1349 	pop	ar5
      000515 40 84            [24] 1350 	jc	00107$
                                   1351 ;	walk.c:157: for (j = 0u; j < NMAX; j++) {
      000517 C0 00            [24] 1352 	push	ar0
      000519 A8*00            [24] 1353 	mov	r0,_bp
      00051B 08               [12] 1354 	inc	r0
      00051C A6 05            [24] 1355 	mov	@r0,ar5
      00051E E5*00            [12] 1356 	mov	a,_bp
      000520 24 20            [12] 1357 	add	a,#0x20
      000522 F8               [12] 1358 	mov	r0,a
      000523 76 00            [12] 1359 	mov	@r0,#0x00
      000525 D0 00            [24] 1360 	pop	ar0
      000527                       1361 00124$:
                                   1362 ;	walk.c:158: unsetOE(OE76_MASK7);
      000527 C0 05            [24] 1363 	push	ar5
      000529 75 82 80         [24] 1364 	mov	dpl,#0x80
      00052C C0 07            [24] 1365 	push	ar7
      00052E C0 05            [24] 1366 	push	ar5
      000530 C0 01            [24] 1367 	push	ar1
      000532 C0 00            [24] 1368 	push	ar0
      000534 12r00r3A         [24] 1369 	lcall	_unsetOE
      000537 D0 00            [24] 1370 	pop	ar0
      000539 D0 01            [24] 1371 	pop	ar1
      00053B D0 05            [24] 1372 	pop	ar5
      00053D D0 07            [24] 1373 	pop	ar7
                                   1374 ;	walk.c:160: if (update(&t, &cur, scramble[j])) {
      00053F C0 00            [24] 1375 	push	ar0
      000541 E5*00            [12] 1376 	mov	a,_bp
      000543 24 20            [12] 1377 	add	a,#0x20
      000545 F8               [12] 1378 	mov	r0,a
      000546 E6               [12] 1379 	mov	a,@r0
      000547 2F               [12] 1380 	add	a,r7
      000548 FA               [12] 1381 	mov	r2,a
      000549 A8 02            [24] 1382 	mov	r0,ar2
      00054B 86 03            [24] 1383 	mov	ar3,@r0
      00054D A8*00            [24] 1384 	mov	r0,_bp
      00054F 08               [12] 1385 	inc	r0
      000550 C0 01            [24] 1386 	push	ar1
      000552 E5*00            [12] 1387 	mov	a,_bp
      000554 24 04            [12] 1388 	add	a,#0x04
      000556 F9               [12] 1389 	mov	r1,a
      000557 E6               [12] 1390 	mov	a,@r0
      000558 F7               [12] 1391 	mov	@r1,a
      000559 09               [12] 1392 	inc	r1
      00055A 77 00            [12] 1393 	mov	@r1,#0x00
      00055C 09               [12] 1394 	inc	r1
      00055D 77 40            [12] 1395 	mov	@r1,#0x40
      00055F D0 01            [24] 1396 	pop	ar1
      000561 D0 00            [24] 1397 	pop	ar0
      000563 89 02            [24] 1398 	mov	ar2,r1
      000565 7C 00            [12] 1399 	mov	r4,#0x00
      000567 7E 40            [12] 1400 	mov	r6,#0x40
      000569 C0 07            [24] 1401 	push	ar7
      00056B C0 05            [24] 1402 	push	ar5
      00056D C0 01            [24] 1403 	push	ar1
      00056F C0 00            [24] 1404 	push	ar0
      000571 C0 03            [24] 1405 	push	ar3
      000573 85 00 F0         [24] 1406 	mov	b,ar0
      000576 E5*00            [12] 1407 	mov	a,_bp
      000578 24 04            [12] 1408 	add	a,#0x04
      00057A F8               [12] 1409 	mov	r0,a
      00057B E6               [12] 1410 	mov	a,@r0
      00057C C0 E0            [24] 1411 	push	acc
      00057E 08               [12] 1412 	inc	r0
      00057F E6               [12] 1413 	mov	a,@r0
      000580 C0 E0            [24] 1414 	push	acc
      000582 08               [12] 1415 	inc	r0
      000583 E6               [12] 1416 	mov	a,@r0
      000584 C0 E0            [24] 1417 	push	acc
      000586 8A 82            [24] 1418 	mov	dpl,r2
      000588 8C 83            [24] 1419 	mov	dph,r4
      00058A 8E F0            [24] 1420 	mov	b,r6
      00058C 12r00r60         [24] 1421 	lcall	_update
      00058F AE 82            [24] 1422 	mov	r6,dpl
      000591 E5 81            [12] 1423 	mov	a,sp
      000593 24 FC            [12] 1424 	add	a,#0xfc
      000595 F5 81            [12] 1425 	mov	sp,a
      000597 D0 00            [24] 1426 	pop	ar0
      000599 D0 01            [24] 1427 	pop	ar1
      00059B D0 05            [24] 1428 	pop	ar5
      00059D D0 07            [24] 1429 	pop	ar7
      00059F D0 05            [24] 1430 	pop	ar5
      0005A1 EE               [12] 1431 	mov	a,r6
      0005A2 70 03            [24] 1432 	jnz	00192$
      0005A4 02r06r76         [24] 1433 	ljmp	00125$
      0005A7                       1434 00192$:
                                   1435 ;	walk.c:161: if (!qadd(&t)) bang();
      0005A7 C0 00            [24] 1436 	push	ar0
      0005A9 E5*00            [12] 1437 	mov	a,_bp
      0005AB 24 03            [12] 1438 	add	a,#0x03
      0005AD F8               [12] 1439 	mov	r0,a
      0005AE 86 03            [24] 1440 	mov	ar3,@r0
      0005B0 7C 00            [12] 1441 	mov	r4,#0x00
      0005B2 7E 40            [12] 1442 	mov	r6,#0x40
      0005B4 D0 00            [24] 1443 	pop	ar0
      0005B6 8B 82            [24] 1444 	mov	dpl,r3
      0005B8 8C 83            [24] 1445 	mov	dph,r4
      0005BA 8E F0            [24] 1446 	mov	b,r6
      0005BC C0 07            [24] 1447 	push	ar7
      0005BE C0 05            [24] 1448 	push	ar5
      0005C0 C0 01            [24] 1449 	push	ar1
      0005C2 C0 00            [24] 1450 	push	ar0
      0005C4 12r0Ar7F         [24] 1451 	lcall	_qadd
      0005C7 E5 82            [12] 1452 	mov	a,dpl
      0005C9 D0 00            [24] 1453 	pop	ar0
      0005CB D0 01            [24] 1454 	pop	ar1
      0005CD D0 05            [24] 1455 	pop	ar5
      0005CF D0 07            [24] 1456 	pop	ar7
      0005D1 70 13            [24] 1457 	jnz	00115$
      0005D3 C0 07            [24] 1458 	push	ar7
      0005D5 C0 05            [24] 1459 	push	ar5
      0005D7 C0 01            [24] 1460 	push	ar1
      0005D9 C0 00            [24] 1461 	push	ar0
      0005DB 12r00r1A         [24] 1462 	lcall	_bang
      0005DE D0 00            [24] 1463 	pop	ar0
      0005E0 D0 01            [24] 1464 	pop	ar1
      0005E2 D0 05            [24] 1465 	pop	ar5
      0005E4 D0 07            [24] 1466 	pop	ar7
      0005E6                       1467 00115$:
                                   1468 ;	walk.c:162: g[t.r][t.c] = 0xaau;
      0005E6 87 04            [24] 1469 	mov	ar4,@r1
      0005E8 09               [12] 1470 	inc	r1
      0005E9 87 06            [24] 1471 	mov	ar6,@r1
      0005EB 19               [12] 1472 	dec	r1
      0005EC C0 07            [24] 1473 	push	ar7
      0005EE C0 05            [24] 1474 	push	ar5
      0005F0 C0 01            [24] 1475 	push	ar1
      0005F2 C0 00            [24] 1476 	push	ar0
      0005F4 C0 04            [24] 1477 	push	ar4
      0005F6 C0 06            [24] 1478 	push	ar6
      0005F8 90 00 C9         [24] 1479 	mov	dptr,#0x00c9
      0005FB 12r00r00         [24] 1480 	lcall	__mulint
      0005FE AC 82            [24] 1481 	mov	r4,dpl
      000600 AE 83            [24] 1482 	mov	r6,dph
      000602 15 81            [12] 1483 	dec	sp
      000604 15 81            [12] 1484 	dec	sp
      000606 D0 00            [24] 1485 	pop	ar0
      000608 EC               [12] 1486 	mov	a,r4
      000609 24r00            [12] 1487 	add	a,#_g
      00060B FC               [12] 1488 	mov	r4,a
      00060C EE               [12] 1489 	mov	a,r6
      00060D 34s00            [12] 1490 	addc	a,#(_g >> 8)
      00060F FE               [12] 1491 	mov	r6,a
      000610 86 02            [24] 1492 	mov	ar2,@r0
      000612 08               [12] 1493 	inc	r0
      000613 86 03            [24] 1494 	mov	ar3,@r0
      000615 18               [12] 1495 	dec	r0
      000616 EA               [12] 1496 	mov	a,r2
      000617 2C               [12] 1497 	add	a,r4
      000618 F5 82            [12] 1498 	mov	dpl,a
      00061A EB               [12] 1499 	mov	a,r3
      00061B 3E               [12] 1500 	addc	a,r6
      00061C F5 83            [12] 1501 	mov	dph,a
      00061E 74 AA            [12] 1502 	mov	a,#0xaa
      000620 F0               [24] 1503 	movx	@dptr,a
                                   1504 ;	walk.c:164: setOE(OE76_MASK7);
      000621 75 82 80         [24] 1505 	mov	dpl,#0x80
      000624 C0 00            [24] 1506 	push	ar0
      000626 12r00r27         [24] 1507 	lcall	_setOE
      000629 D0 00            [24] 1508 	pop	ar0
      00062B D0 01            [24] 1509 	pop	ar1
      00062D D0 05            [24] 1510 	pop	ar5
      00062F D0 07            [24] 1511 	pop	ar7
                                   1512 ;	walk.c:165: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      000631 86 04            [24] 1513 	mov	ar4,@r0
      000633 08               [12] 1514 	inc	r0
      000634 86 06            [24] 1515 	mov	ar6,@r0
      000636 18               [12] 1516 	dec	r0
      000637 0C               [12] 1517 	inc	r4
      000638 BC 00 01         [24] 1518 	cjne	r4,#0x00,00194$
      00063B 0E               [12] 1519 	inc	r6
      00063C                       1520 00194$:
      00063C 87 02            [24] 1521 	mov	ar2,@r1
      00063E 09               [12] 1522 	inc	r1
      00063F 87 03            [24] 1523 	mov	ar3,@r1
      000641 19               [12] 1524 	dec	r1
      000642 74 04            [12] 1525 	mov	a,#0x04
      000644 2A               [12] 1526 	add	a,r2
      000645 FA               [12] 1527 	mov	r2,a
      000646 E4               [12] 1528 	clr	a
      000647 3B               [12] 1529 	addc	a,r3
      000648 FB               [12] 1530 	mov	r3,a
      000649 C0 07            [24] 1531 	push	ar7
      00064B C0 05            [24] 1532 	push	ar5
      00064D C0 01            [24] 1533 	push	ar1
      00064F C0 00            [24] 1534 	push	ar0
      000651 C0 04            [24] 1535 	push	ar4
      000653 C0 06            [24] 1536 	push	ar6
      000655 C0 02            [24] 1537 	push	ar2
      000657 C0 03            [24] 1538 	push	ar3
      000659 74r2E            [12] 1539 	mov	a,#___str_3
      00065B C0 E0            [24] 1540 	push	acc
      00065D 74s00            [12] 1541 	mov	a,#(___str_3 >> 8)
      00065F C0 E0            [24] 1542 	push	acc
      000661 74 80            [12] 1543 	mov	a,#0x80
      000663 C0 E0            [24] 1544 	push	acc
      000665 12r00r00         [24] 1545 	lcall	_printf
      000668 E5 81            [12] 1546 	mov	a,sp
      00066A 24 F9            [12] 1547 	add	a,#0xf9
      00066C F5 81            [12] 1548 	mov	sp,a
      00066E D0 00            [24] 1549 	pop	ar0
      000670 D0 01            [24] 1550 	pop	ar1
      000672 D0 05            [24] 1551 	pop	ar5
      000674 D0 07            [24] 1552 	pop	ar7
      000676                       1553 00125$:
                                   1554 ;	walk.c:157: for (j = 0u; j < NMAX; j++) {
      000676 C0 00            [24] 1555 	push	ar0
      000678 E5*00            [12] 1556 	mov	a,_bp
      00067A 24 20            [12] 1557 	add	a,#0x20
      00067C F8               [12] 1558 	mov	r0,a
      00067D 06               [12] 1559 	inc	@r0
      00067E E5*00            [12] 1560 	mov	a,_bp
      000680 24 20            [12] 1561 	add	a,#0x20
      000682 F8               [12] 1562 	mov	r0,a
      000683 B6 10 00         [24] 1563 	cjne	@r0,#0x10,00195$
      000686                       1564 00195$:
      000686 D0 00            [24] 1565 	pop	ar0
      000688 50 03            [24] 1566 	jnc	00196$
      00068A 02r05r27         [24] 1567 	ljmp	00124$
      00068D                       1568 00196$:
                                   1569 ;	walk.c:169: goto process;
      00068D 02r03r8F         [24] 1570 	ljmp	00103$
                                   1571 ;	walk.c:171: term:
      000690                       1572 00119$:
                                   1573 ;	walk.c:172: return;
                                   1574 ;	walk.c:173: }
      000690 85*00 81         [24] 1575 	mov	sp,_bp
      000693 D0*00            [24] 1576 	pop	_bp
      000695 22               [24] 1577 	ret
                                   1578 ;------------------------------------------------------------
                                   1579 ;Allocation info for local variables in function 'main'
                                   1580 ;------------------------------------------------------------
                                   1581 ;initial                   Allocated to stack - _bp +5
                                   1582 ;N                         Allocated to stack - _bp +9
                                   1583 ;i                         Allocated to stack - _bp +11
                                   1584 ;j                         Allocated to registers r2 r6 
                                   1585 ;sloc0                     Allocated to stack - _bp +1
                                   1586 ;sloc1                     Allocated to stack - _bp +3
                                   1587 ;sloc2                     Allocated to stack - _bp +15
                                   1588 ;------------------------------------------------------------
                                   1589 ;	walk.c:175: void main(void) {
                                   1590 ;	-----------------------------------------
                                   1591 ;	 function main
                                   1592 ;	-----------------------------------------
      000696                       1593 _main:
      000696 C0*00            [24] 1594 	push	_bp
      000698 E5 81            [12] 1595 	mov	a,sp
      00069A F5*00            [12] 1596 	mov	_bp,a
      00069C 24 0C            [12] 1597 	add	a,#0x0c
      00069E F5 81            [12] 1598 	mov	sp,a
                                   1599 ;	walk.c:180: i0 = 1u;
      0006A0 78r00            [12] 1600 	mov	r0,#_i0
      0006A2 76 01            [12] 1601 	mov	@r0,#0x01
                                   1602 ;	walk.c:182: P1_7 = 1;
                                   1603 ;	assignBit
      0006A4 D2 97            [12] 1604 	setb	_P1_7
                                   1605 ;	walk.c:183: IT0 = 1;
                                   1606 ;	assignBit
      0006A6 D2 88            [12] 1607 	setb	_IT0
                                   1608 ;	walk.c:184: EX0 = 1;
                                   1609 ;	assignBit
      0006A8 D2 A8            [12] 1610 	setb	_EX0
                                   1611 ;	walk.c:185: EA = 1;
                                   1612 ;	assignBit
      0006AA D2 AF            [12] 1613 	setb	_EA
                                   1614 ;	walk.c:187: srand(RND);
      0006AC 90 80 00         [24] 1615 	mov	dptr,#_RND
      0006AF E0               [24] 1616 	movx	a,@dptr
      0006B0 FE               [12] 1617 	mov	r6,a
      0006B1 A3               [24] 1618 	inc	dptr
      0006B2 E0               [24] 1619 	movx	a,@dptr
      0006B3 FF               [12] 1620 	mov	r7,a
      0006B4 8E 82            [24] 1621 	mov	dpl,r6
      0006B6 8F 83            [24] 1622 	mov	dph,r7
      0006B8 12r00r00         [24] 1623 	lcall	_srand
                                   1624 ;	walk.c:188: qinit();
      0006BB 12r0Ar71         [24] 1625 	lcall	_qinit
                                   1626 ;	walk.c:190: puts("\033[2J\033[?25l");
      0006BE 90r00r38         [24] 1627 	mov	dptr,#___str_4
      0006C1 75 F0 80         [24] 1628 	mov	b,#0x80
      0006C4 12r00r00         [24] 1629 	lcall	_puts
                                   1630 ;	walk.c:192: while (i0) {
      0006C7 E5*00            [12] 1631 	mov	a,_bp
      0006C9 24 05            [12] 1632 	add	a,#0x05
      0006CB F9               [12] 1633 	mov	r1,a
      0006CC FF               [12] 1634 	mov	r7,a
      0006CD E5*00            [12] 1635 	mov	a,_bp
      0006CF 24 09            [12] 1636 	add	a,#0x09
      0006D1 F8               [12] 1637 	mov	r0,a
      0006D2 E4               [12] 1638 	clr	a
      0006D3 F6               [12] 1639 	mov	@r0,a
      0006D4 08               [12] 1640 	inc	r0
      0006D5 F6               [12] 1641 	mov	@r0,a
      0006D6                       1642 00108$:
      0006D6 78r00            [12] 1643 	mov	r0,#_i0
      0006D8 E6               [12] 1644 	mov	a,@r0
      0006D9 70 03            [24] 1645 	jnz	00182$
      0006DB 02r0Ar5D         [24] 1646 	ljmp	00110$
      0006DE                       1647 00182$:
                                   1648 ;	walk.c:193: for (i = 0; i < ROWS; i++)
      0006DE 7B 00            [12] 1649 	mov	r3,#0x00
      0006E0 7C 00            [12] 1650 	mov	r4,#0x00
      0006E2 A8*00            [24] 1651 	mov	r0,_bp
      0006E4 08               [12] 1652 	inc	r0
      0006E5 E4               [12] 1653 	clr	a
      0006E6 F6               [12] 1654 	mov	@r0,a
      0006E7 08               [12] 1655 	inc	r0
      0006E8 F6               [12] 1656 	mov	@r0,a
                                   1657 ;	walk.c:194: for (j = 0; j < COLS; j++)
      0006E9                       1658 00125$:
      0006E9 A8*00            [24] 1659 	mov	r0,_bp
      0006EB 08               [12] 1660 	inc	r0
      0006EC C0 01            [24] 1661 	push	ar1
      0006EE E5*00            [12] 1662 	mov	a,_bp
      0006F0 24 03            [12] 1663 	add	a,#0x03
      0006F2 F9               [12] 1664 	mov	r1,a
      0006F3 E6               [12] 1665 	mov	a,@r0
      0006F4 24r00            [12] 1666 	add	a,#_g
      0006F6 F7               [12] 1667 	mov	@r1,a
      0006F7 08               [12] 1668 	inc	r0
      0006F8 E6               [12] 1669 	mov	a,@r0
      0006F9 34s00            [12] 1670 	addc	a,#(_g >> 8)
      0006FB 09               [12] 1671 	inc	r1
      0006FC F7               [12] 1672 	mov	@r1,a
      0006FD D0 01            [24] 1673 	pop	ar1
      0006FF 7A 00            [12] 1674 	mov	r2,#0x00
      000701 7E 00            [12] 1675 	mov	r6,#0x00
      000703                       1676 00112$:
                                   1677 ;	walk.c:195: g[i][j] = 0x55u;
      000703 E5*00            [12] 1678 	mov	a,_bp
      000705 24 03            [12] 1679 	add	a,#0x03
      000707 F8               [12] 1680 	mov	r0,a
      000708 EA               [12] 1681 	mov	a,r2
      000709 26               [12] 1682 	add	a,@r0
      00070A F5 82            [12] 1683 	mov	dpl,a
      00070C EE               [12] 1684 	mov	a,r6
      00070D 08               [12] 1685 	inc	r0
      00070E 36               [12] 1686 	addc	a,@r0
      00070F F5 83            [12] 1687 	mov	dph,a
      000711 74 55            [12] 1688 	mov	a,#0x55
      000713 F0               [24] 1689 	movx	@dptr,a
                                   1690 ;	walk.c:194: for (j = 0; j < COLS; j++)
      000714 0A               [12] 1691 	inc	r2
      000715 BA 00 01         [24] 1692 	cjne	r2,#0x00,00183$
      000718 0E               [12] 1693 	inc	r6
      000719                       1694 00183$:
      000719 C3               [12] 1695 	clr	c
      00071A EA               [12] 1696 	mov	a,r2
      00071B 94 C9            [12] 1697 	subb	a,#0xc9
      00071D EE               [12] 1698 	mov	a,r6
      00071E 64 80            [12] 1699 	xrl	a,#0x80
      000720 94 80            [12] 1700 	subb	a,#0x80
      000722 40 DF            [24] 1701 	jc	00112$
                                   1702 ;	walk.c:193: for (i = 0; i < ROWS; i++)
      000724 A8*00            [24] 1703 	mov	r0,_bp
      000726 08               [12] 1704 	inc	r0
      000727 74 C9            [12] 1705 	mov	a,#0xc9
      000729 26               [12] 1706 	add	a,@r0
      00072A F6               [12] 1707 	mov	@r0,a
      00072B E4               [12] 1708 	clr	a
      00072C 08               [12] 1709 	inc	r0
      00072D 36               [12] 1710 	addc	a,@r0
      00072E F6               [12] 1711 	mov	@r0,a
      00072F 0B               [12] 1712 	inc	r3
      000730 BB 00 01         [24] 1713 	cjne	r3,#0x00,00185$
      000733 0C               [12] 1714 	inc	r4
      000734                       1715 00185$:
      000734 C3               [12] 1716 	clr	c
      000735 EB               [12] 1717 	mov	a,r3
      000736 94 30            [12] 1718 	subb	a,#0x30
      000738 EC               [12] 1719 	mov	a,r4
      000739 64 80            [12] 1720 	xrl	a,#0x80
      00073B 94 80            [12] 1721 	subb	a,#0x80
      00073D 40 AA            [24] 1722 	jc	00125$
                                   1723 ;	walk.c:197: initial.r = rand() % ROWS;
      00073F E5*00            [12] 1724 	mov	a,_bp
      000741 24 05            [12] 1725 	add	a,#0x05
      000743 F8               [12] 1726 	mov	r0,a
      000744 C0 07            [24] 1727 	push	ar7
      000746 C0 01            [24] 1728 	push	ar1
      000748 C0 00            [24] 1729 	push	ar0
      00074A 12r00r00         [24] 1730 	lcall	_rand
      00074D AD 82            [24] 1731 	mov	r5,dpl
      00074F AE 83            [24] 1732 	mov	r6,dph
      000751 74 30            [12] 1733 	mov	a,#0x30
      000753 C0 E0            [24] 1734 	push	acc
      000755 E4               [12] 1735 	clr	a
      000756 C0 E0            [24] 1736 	push	acc
      000758 8D 82            [24] 1737 	mov	dpl,r5
      00075A 8E 83            [24] 1738 	mov	dph,r6
      00075C 12r00r00         [24] 1739 	lcall	__modsint
      00075F AD 82            [24] 1740 	mov	r5,dpl
      000761 AE 83            [24] 1741 	mov	r6,dph
      000763 15 81            [12] 1742 	dec	sp
      000765 15 81            [12] 1743 	dec	sp
      000767 D0 00            [24] 1744 	pop	ar0
      000769 D0 01            [24] 1745 	pop	ar1
      00076B A6 05            [24] 1746 	mov	@r0,ar5
      00076D 08               [12] 1747 	inc	r0
      00076E A6 06            [24] 1748 	mov	@r0,ar6
      000770 18               [12] 1749 	dec	r0
                                   1750 ;	walk.c:198: initial.c = rand() % COLS;
      000771 74 02            [12] 1751 	mov	a,#0x02
      000773 29               [12] 1752 	add	a,r1
      000774 F8               [12] 1753 	mov	r0,a
      000775 C0 01            [24] 1754 	push	ar1
      000777 C0 00            [24] 1755 	push	ar0
      000779 12r00r00         [24] 1756 	lcall	_rand
      00077C AD 82            [24] 1757 	mov	r5,dpl
      00077E AE 83            [24] 1758 	mov	r6,dph
      000780 74 C9            [12] 1759 	mov	a,#0xc9
      000782 C0 E0            [24] 1760 	push	acc
      000784 E4               [12] 1761 	clr	a
      000785 C0 E0            [24] 1762 	push	acc
      000787 8D 82            [24] 1763 	mov	dpl,r5
      000789 8E 83            [24] 1764 	mov	dph,r6
      00078B 12r00r00         [24] 1765 	lcall	__modsint
      00078E AD 82            [24] 1766 	mov	r5,dpl
      000790 AE 83            [24] 1767 	mov	r6,dph
      000792 15 81            [12] 1768 	dec	sp
      000794 15 81            [12] 1769 	dec	sp
      000796 D0 00            [24] 1770 	pop	ar0
      000798 A6 05            [24] 1771 	mov	@r0,ar5
      00079A 08               [12] 1772 	inc	r0
      00079B A6 06            [24] 1773 	mov	@r0,ar6
      00079D 18               [12] 1774 	dec	r0
                                   1775 ;	walk.c:200: puts("\033[2J\033[?25l");
      00079E 90r00r38         [24] 1776 	mov	dptr,#___str_4
      0007A1 75 F0 80         [24] 1777 	mov	b,#0x80
      0007A4 C0 00            [24] 1778 	push	ar0
      0007A6 12r00r00         [24] 1779 	lcall	_puts
      0007A9 D0 00            [24] 1780 	pop	ar0
      0007AB D0 01            [24] 1781 	pop	ar1
                                   1782 ;	walk.c:201: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      0007AD 86 05            [24] 1783 	mov	ar5,@r0
      0007AF 08               [12] 1784 	inc	r0
      0007B0 86 06            [24] 1785 	mov	ar6,@r0
      0007B2 18               [12] 1786 	dec	r0
      0007B3 87 03            [24] 1787 	mov	ar3,@r1
      0007B5 09               [12] 1788 	inc	r1
      0007B6 87 04            [24] 1789 	mov	ar4,@r1
      0007B8 19               [12] 1790 	dec	r1
      0007B9 C0 01            [24] 1791 	push	ar1
      0007BB C0 05            [24] 1792 	push	ar5
      0007BD C0 06            [24] 1793 	push	ar6
      0007BF C0 03            [24] 1794 	push	ar3
      0007C1 C0 04            [24] 1795 	push	ar4
      0007C3 E5*00            [12] 1796 	mov	a,_bp
      0007C5 24 09            [12] 1797 	add	a,#0x09
      0007C7 F8               [12] 1798 	mov	r0,a
      0007C8 E6               [12] 1799 	mov	a,@r0
      0007C9 C0 E0            [24] 1800 	push	acc
      0007CB 08               [12] 1801 	inc	r0
      0007CC E6               [12] 1802 	mov	a,@r0
      0007CD C0 E0            [24] 1803 	push	acc
      0007CF 74r43            [12] 1804 	mov	a,#___str_5
      0007D1 C0 E0            [24] 1805 	push	acc
      0007D3 74s00            [12] 1806 	mov	a,#(___str_5 >> 8)
      0007D5 C0 E0            [24] 1807 	push	acc
      0007D7 74 80            [12] 1808 	mov	a,#0x80
      0007D9 C0 E0            [24] 1809 	push	acc
      0007DB 12r00r00         [24] 1810 	lcall	_printf
      0007DE E5 81            [12] 1811 	mov	a,sp
      0007E0 24 F7            [12] 1812 	add	a,#0xf7
      0007E2 F5 81            [12] 1813 	mov	sp,a
      0007E4 D0 01            [24] 1814 	pop	ar1
      0007E6 D0 07            [24] 1815 	pop	ar7
                                   1816 ;	walk.c:203: for (i = 0; i < REG; i++) {
      0007E8 E5*00            [12] 1817 	mov	a,_bp
      0007EA 24 0B            [12] 1818 	add	a,#0x0b
      0007EC F8               [12] 1819 	mov	r0,a
      0007ED E4               [12] 1820 	clr	a
      0007EE F6               [12] 1821 	mov	@r0,a
      0007EF 08               [12] 1822 	inc	r0
      0007F0 F6               [12] 1823 	mov	@r0,a
      0007F1                       1824 00116$:
                                   1825 ;	walk.c:204: neigh[i].r = neigh[REG + i].r * (1 + rand() % 32);
      0007F1 C0 07            [24] 1826 	push	ar7
      0007F3 E5*00            [12] 1827 	mov	a,_bp
      0007F5 24 0B            [12] 1828 	add	a,#0x0b
      0007F7 F8               [12] 1829 	mov	r0,a
      0007F8 E6               [12] 1830 	mov	a,@r0
      0007F9 25 E0            [12] 1831 	add	a,acc
      0007FB FB               [12] 1832 	mov	r3,a
      0007FC 08               [12] 1833 	inc	r0
      0007FD E6               [12] 1834 	mov	a,@r0
      0007FE 33               [12] 1835 	rlc	a
      0007FF FC               [12] 1836 	mov	r4,a
      000800 EB               [12] 1837 	mov	a,r3
      000801 2B               [12] 1838 	add	a,r3
      000802 FB               [12] 1839 	mov	r3,a
      000803 EC               [12] 1840 	mov	a,r4
      000804 33               [12] 1841 	rlc	a
      000805 FC               [12] 1842 	mov	r4,a
      000806 E5*00            [12] 1843 	mov	a,_bp
      000808 24 03            [12] 1844 	add	a,#0x03
      00080A F8               [12] 1845 	mov	r0,a
      00080B EB               [12] 1846 	mov	a,r3
      00080C 24r00            [12] 1847 	add	a,#_neigh
      00080E F6               [12] 1848 	mov	@r0,a
      00080F EC               [12] 1849 	mov	a,r4
      000810 34s00            [12] 1850 	addc	a,#(_neigh >> 8)
      000812 08               [12] 1851 	inc	r0
      000813 F6               [12] 1852 	mov	@r0,a
      000814 E5*00            [12] 1853 	mov	a,_bp
      000816 24 0B            [12] 1854 	add	a,#0x0b
      000818 F8               [12] 1855 	mov	r0,a
      000819 86 06            [24] 1856 	mov	ar6,@r0
      00081B 74 08            [12] 1857 	mov	a,#0x08
      00081D 2E               [12] 1858 	add	a,r6
      00081E FE               [12] 1859 	mov	r6,a
      00081F C2 D5            [12] 1860 	clr	F0
      000821 75 F0 04         [24] 1861 	mov	b,#0x04
      000824 EE               [12] 1862 	mov	a,r6
      000825 30 E7 04         [24] 1863 	jnb	acc.7,00187$
      000828 B2 D5            [12] 1864 	cpl	F0
      00082A F4               [12] 1865 	cpl	a
      00082B 04               [12] 1866 	inc	a
      00082C                       1867 00187$:
      00082C A4               [48] 1868 	mul	ab
      00082D 30 D5 0A         [24] 1869 	jnb	F0,00188$
      000830 F4               [12] 1870 	cpl	a
      000831 24 01            [12] 1871 	add	a,#0x01
      000833 C5 F0            [12] 1872 	xch	a,b
      000835 F4               [12] 1873 	cpl	a
      000836 34 00            [12] 1874 	addc	a,#0x00
      000838 C5 F0            [12] 1875 	xch	a,b
      00083A                       1876 00188$:
      00083A FE               [12] 1877 	mov	r6,a
      00083B AD F0            [24] 1878 	mov	r5,b
      00083D 24r00            [12] 1879 	add	a,#_neigh
      00083F F5 82            [12] 1880 	mov	dpl,a
      000841 ED               [12] 1881 	mov	a,r5
      000842 34s00            [12] 1882 	addc	a,#(_neigh >> 8)
      000844 F5 83            [12] 1883 	mov	dph,a
      000846 A8*00            [24] 1884 	mov	r0,_bp
      000848 08               [12] 1885 	inc	r0
      000849 E0               [24] 1886 	movx	a,@dptr
      00084A F6               [12] 1887 	mov	@r0,a
      00084B A3               [24] 1888 	inc	dptr
      00084C E0               [24] 1889 	movx	a,@dptr
      00084D 08               [12] 1890 	inc	r0
      00084E F6               [12] 1891 	mov	@r0,a
      00084F C0 06            [24] 1892 	push	ar6
      000851 C0 05            [24] 1893 	push	ar5
      000853 C0 04            [24] 1894 	push	ar4
      000855 C0 03            [24] 1895 	push	ar3
      000857 C0 01            [24] 1896 	push	ar1
      000859 12r00r00         [24] 1897 	lcall	_rand
      00085C AA 82            [24] 1898 	mov	r2,dpl
      00085E AF 83            [24] 1899 	mov	r7,dph
      000860 74 20            [12] 1900 	mov	a,#0x20
      000862 C0 E0            [24] 1901 	push	acc
      000864 E4               [12] 1902 	clr	a
      000865 C0 E0            [24] 1903 	push	acc
      000867 8A 82            [24] 1904 	mov	dpl,r2
      000869 8F 83            [24] 1905 	mov	dph,r7
      00086B 12r00r00         [24] 1906 	lcall	__modsint
      00086E AA 82            [24] 1907 	mov	r2,dpl
      000870 AF 83            [24] 1908 	mov	r7,dph
      000872 15 81            [12] 1909 	dec	sp
      000874 15 81            [12] 1910 	dec	sp
      000876 D0 01            [24] 1911 	pop	ar1
      000878 D0 03            [24] 1912 	pop	ar3
      00087A D0 04            [24] 1913 	pop	ar4
      00087C D0 05            [24] 1914 	pop	ar5
      00087E D0 06            [24] 1915 	pop	ar6
      000880 0A               [12] 1916 	inc	r2
      000881 BA 00 01         [24] 1917 	cjne	r2,#0x00,00189$
      000884 0F               [12] 1918 	inc	r7
      000885                       1919 00189$:
      000885 C0 06            [24] 1920 	push	ar6
      000887 C0 05            [24] 1921 	push	ar5
      000889 C0 04            [24] 1922 	push	ar4
      00088B C0 03            [24] 1923 	push	ar3
      00088D C0 01            [24] 1924 	push	ar1
      00088F C0 02            [24] 1925 	push	ar2
      000891 C0 07            [24] 1926 	push	ar7
      000893 A8*00            [24] 1927 	mov	r0,_bp
      000895 08               [12] 1928 	inc	r0
      000896 86 82            [24] 1929 	mov	dpl,@r0
      000898 08               [12] 1930 	inc	r0
      000899 86 83            [24] 1931 	mov	dph,@r0
      00089B 12r00r00         [24] 1932 	lcall	__mulint
      00089E AA 82            [24] 1933 	mov	r2,dpl
      0008A0 AF 83            [24] 1934 	mov	r7,dph
      0008A2 15 81            [12] 1935 	dec	sp
      0008A4 15 81            [12] 1936 	dec	sp
      0008A6 D0 01            [24] 1937 	pop	ar1
      0008A8 D0 03            [24] 1938 	pop	ar3
      0008AA D0 04            [24] 1939 	pop	ar4
      0008AC D0 05            [24] 1940 	pop	ar5
      0008AE D0 06            [24] 1941 	pop	ar6
      0008B0 E5*00            [12] 1942 	mov	a,_bp
      0008B2 24 03            [12] 1943 	add	a,#0x03
      0008B4 F8               [12] 1944 	mov	r0,a
      0008B5 86 82            [24] 1945 	mov	dpl,@r0
      0008B7 08               [12] 1946 	inc	r0
      0008B8 86 83            [24] 1947 	mov	dph,@r0
      0008BA EA               [12] 1948 	mov	a,r2
      0008BB F0               [24] 1949 	movx	@dptr,a
      0008BC EF               [12] 1950 	mov	a,r7
      0008BD A3               [24] 1951 	inc	dptr
      0008BE F0               [24] 1952 	movx	@dptr,a
                                   1953 ;	walk.c:205: neigh[i].c = neigh[REG + i].c * (1 + rand() % 32);
      0008BF EB               [12] 1954 	mov	a,r3
      0008C0 24r00            [12] 1955 	add	a,#_neigh
      0008C2 FB               [12] 1956 	mov	r3,a
      0008C3 EC               [12] 1957 	mov	a,r4
      0008C4 34s00            [12] 1958 	addc	a,#(_neigh >> 8)
      0008C6 FC               [12] 1959 	mov	r4,a
      0008C7 74 02            [12] 1960 	mov	a,#0x02
      0008C9 2B               [12] 1961 	add	a,r3
      0008CA FA               [12] 1962 	mov	r2,a
      0008CB E4               [12] 1963 	clr	a
      0008CC 3C               [12] 1964 	addc	a,r4
      0008CD FF               [12] 1965 	mov	r7,a
      0008CE EE               [12] 1966 	mov	a,r6
      0008CF 24r00            [12] 1967 	add	a,#_neigh
      0008D1 FE               [12] 1968 	mov	r6,a
      0008D2 ED               [12] 1969 	mov	a,r5
      0008D3 34s00            [12] 1970 	addc	a,#(_neigh >> 8)
      0008D5 FD               [12] 1971 	mov	r5,a
      0008D6 8E 82            [24] 1972 	mov	dpl,r6
      0008D8 8D 83            [24] 1973 	mov	dph,r5
      0008DA A3               [24] 1974 	inc	dptr
      0008DB A3               [24] 1975 	inc	dptr
      0008DC E5*00            [12] 1976 	mov	a,_bp
      0008DE 24 03            [12] 1977 	add	a,#0x03
      0008E0 F8               [12] 1978 	mov	r0,a
      0008E1 E0               [24] 1979 	movx	a,@dptr
      0008E2 F6               [12] 1980 	mov	@r0,a
      0008E3 A3               [24] 1981 	inc	dptr
      0008E4 E0               [24] 1982 	movx	a,@dptr
      0008E5 08               [12] 1983 	inc	r0
      0008E6 F6               [12] 1984 	mov	@r0,a
      0008E7 C0 07            [24] 1985 	push	ar7
      0008E9 C0 04            [24] 1986 	push	ar4
      0008EB C0 03            [24] 1987 	push	ar3
      0008ED C0 02            [24] 1988 	push	ar2
      0008EF C0 01            [24] 1989 	push	ar1
      0008F1 12r00r00         [24] 1990 	lcall	_rand
      0008F4 AD 82            [24] 1991 	mov	r5,dpl
      0008F6 AE 83            [24] 1992 	mov	r6,dph
      0008F8 74 20            [12] 1993 	mov	a,#0x20
      0008FA C0 E0            [24] 1994 	push	acc
      0008FC E4               [12] 1995 	clr	a
      0008FD C0 E0            [24] 1996 	push	acc
      0008FF 8D 82            [24] 1997 	mov	dpl,r5
      000901 8E 83            [24] 1998 	mov	dph,r6
      000903 12r00r00         [24] 1999 	lcall	__modsint
      000906 AD 82            [24] 2000 	mov	r5,dpl
      000908 AE 83            [24] 2001 	mov	r6,dph
      00090A 15 81            [12] 2002 	dec	sp
      00090C 15 81            [12] 2003 	dec	sp
      00090E D0 01            [24] 2004 	pop	ar1
      000910 D0 02            [24] 2005 	pop	ar2
      000912 D0 03            [24] 2006 	pop	ar3
      000914 D0 04            [24] 2007 	pop	ar4
      000916 D0 07            [24] 2008 	pop	ar7
      000918 0D               [12] 2009 	inc	r5
      000919 BD 00 01         [24] 2010 	cjne	r5,#0x00,00190$
      00091C 0E               [12] 2011 	inc	r6
      00091D                       2012 00190$:
      00091D C0 07            [24] 2013 	push	ar7
      00091F C0 04            [24] 2014 	push	ar4
      000921 C0 03            [24] 2015 	push	ar3
      000923 C0 02            [24] 2016 	push	ar2
      000925 C0 01            [24] 2017 	push	ar1
      000927 C0 05            [24] 2018 	push	ar5
      000929 C0 06            [24] 2019 	push	ar6
      00092B E5*00            [12] 2020 	mov	a,_bp
      00092D 24 03            [12] 2021 	add	a,#0x03
      00092F F8               [12] 2022 	mov	r0,a
      000930 86 82            [24] 2023 	mov	dpl,@r0
      000932 08               [12] 2024 	inc	r0
      000933 86 83            [24] 2025 	mov	dph,@r0
      000935 12r00r00         [24] 2026 	lcall	__mulint
      000938 AD 82            [24] 2027 	mov	r5,dpl
      00093A AE 83            [24] 2028 	mov	r6,dph
      00093C 15 81            [12] 2029 	dec	sp
      00093E 15 81            [12] 2030 	dec	sp
      000940 D0 01            [24] 2031 	pop	ar1
      000942 D0 02            [24] 2032 	pop	ar2
      000944 D0 03            [24] 2033 	pop	ar3
      000946 D0 04            [24] 2034 	pop	ar4
      000948 D0 07            [24] 2035 	pop	ar7
      00094A 8A 82            [24] 2036 	mov	dpl,r2
      00094C 8F 83            [24] 2037 	mov	dph,r7
      00094E ED               [12] 2038 	mov	a,r5
      00094F F0               [24] 2039 	movx	@dptr,a
      000950 EE               [12] 2040 	mov	a,r6
      000951 A3               [24] 2041 	inc	dptr
      000952 F0               [24] 2042 	movx	@dptr,a
                                   2043 ;	walk.c:206: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000953 8B 82            [24] 2044 	mov	dpl,r3
      000955 8C 83            [24] 2045 	mov	dph,r4
      000957 E0               [24] 2046 	movx	a,@dptr
      000958 FB               [12] 2047 	mov	r3,a
      000959 A3               [24] 2048 	inc	dptr
      00095A E0               [24] 2049 	movx	a,@dptr
      00095B FC               [12] 2050 	mov	r4,a
      00095C C0 07            [24] 2051 	push	ar7
      00095E C0 01            [24] 2052 	push	ar1
      000960 C0 05            [24] 2053 	push	ar5
      000962 C0 06            [24] 2054 	push	ar6
      000964 C0 03            [24] 2055 	push	ar3
      000966 C0 04            [24] 2056 	push	ar4
      000968 74r56            [12] 2057 	mov	a,#___str_6
      00096A C0 E0            [24] 2058 	push	acc
      00096C 74s00            [12] 2059 	mov	a,#(___str_6 >> 8)
      00096E C0 E0            [24] 2060 	push	acc
      000970 74 80            [12] 2061 	mov	a,#0x80
      000972 C0 E0            [24] 2062 	push	acc
      000974 12r00r00         [24] 2063 	lcall	_printf
      000977 E5 81            [12] 2064 	mov	a,sp
      000979 24 F9            [12] 2065 	add	a,#0xf9
      00097B F5 81            [12] 2066 	mov	sp,a
      00097D D0 01            [24] 2067 	pop	ar1
      00097F D0 07            [24] 2068 	pop	ar7
                                   2069 ;	walk.c:203: for (i = 0; i < REG; i++) {
      000981 E5*00            [12] 2070 	mov	a,_bp
      000983 24 0B            [12] 2071 	add	a,#0x0b
      000985 F8               [12] 2072 	mov	r0,a
      000986 06               [12] 2073 	inc	@r0
      000987 B6 00 02         [24] 2074 	cjne	@r0,#0x00,00191$
      00098A 08               [12] 2075 	inc	r0
      00098B 06               [12] 2076 	inc	@r0
      00098C                       2077 00191$:
      00098C E5*00            [12] 2078 	mov	a,_bp
      00098E 24 0B            [12] 2079 	add	a,#0x0b
      000990 F8               [12] 2080 	mov	r0,a
      000991 86 05            [24] 2081 	mov	ar5,@r0
      000993 08               [12] 2082 	inc	r0
      000994 86 06            [24] 2083 	mov	ar6,@r0
      000996 C3               [12] 2084 	clr	c
      000997 ED               [12] 2085 	mov	a,r5
      000998 94 08            [12] 2086 	subb	a,#0x08
      00099A EE               [12] 2087 	mov	a,r6
      00099B 94 00            [12] 2088 	subb	a,#0x00
      00099D D0 07            [24] 2089 	pop	ar7
      00099F 50 03            [24] 2090 	jnc	00192$
      0009A1 02r07rF1         [24] 2091 	ljmp	00116$
      0009A4                       2092 00192$:
                                   2093 ;	walk.c:209: OE76 = OE76_0;
      0009A4 78r01            [12] 2094 	mov	r0,#_OE76
      0009A6 76 3F            [12] 2095 	mov	@r0,#0x3f
                                   2096 ;	walk.c:210: setOE(OE76_NC);
      0009A8 75 82 00         [24] 2097 	mov	dpl,#0x00
      0009AB C0 07            [24] 2098 	push	ar7
      0009AD C0 01            [24] 2099 	push	ar1
      0009AF 12r00r27         [24] 2100 	lcall	_setOE
      0009B2 D0 01            [24] 2101 	pop	ar1
      0009B4 D0 07            [24] 2102 	pop	ar7
                                   2103 ;	walk.c:212: walk(&initial);
      0009B6 8F 04            [24] 2104 	mov	ar4,r7
      0009B8 7D 00            [12] 2105 	mov	r5,#0x00
      0009BA 7E 40            [12] 2106 	mov	r6,#0x40
      0009BC 8C 82            [24] 2107 	mov	dpl,r4
      0009BE 8D 83            [24] 2108 	mov	dph,r5
      0009C0 8E F0            [24] 2109 	mov	b,r6
      0009C2 C0 07            [24] 2110 	push	ar7
      0009C4 C0 01            [24] 2111 	push	ar1
      0009C6 12r02rED         [24] 2112 	lcall	_walk
      0009C9 D0 01            [24] 2113 	pop	ar1
      0009CB D0 07            [24] 2114 	pop	ar7
                                   2115 ;	walk.c:214: for (i = 0; i < ROWS; i++)
      0009CD E5*00            [12] 2116 	mov	a,_bp
      0009CF 24 0B            [12] 2117 	add	a,#0x0b
      0009D1 F8               [12] 2118 	mov	r0,a
      0009D2 E4               [12] 2119 	clr	a
      0009D3 F6               [12] 2120 	mov	@r0,a
      0009D4 08               [12] 2121 	inc	r0
      0009D5 F6               [12] 2122 	mov	@r0,a
      0009D6 7B 00            [12] 2123 	mov	r3,#0x00
      0009D8 7C 00            [12] 2124 	mov	r4,#0x00
                                   2125 ;	walk.c:215: for (j = 0; j < COLS; j++)
      0009DA                       2126 00132$:
      0009DA E5*00            [12] 2127 	mov	a,_bp
      0009DC 24 03            [12] 2128 	add	a,#0x03
      0009DE F8               [12] 2129 	mov	r0,a
      0009DF EB               [12] 2130 	mov	a,r3
      0009E0 24r00            [12] 2131 	add	a,#_g
      0009E2 F6               [12] 2132 	mov	@r0,a
      0009E3 EC               [12] 2133 	mov	a,r4
      0009E4 34s00            [12] 2134 	addc	a,#(_g >> 8)
      0009E6 08               [12] 2135 	inc	r0
      0009E7 F6               [12] 2136 	mov	@r0,a
      0009E8 7A 00            [12] 2137 	mov	r2,#0x00
      0009EA 7E 00            [12] 2138 	mov	r6,#0x00
      0009EC                       2139 00118$:
                                   2140 ;	walk.c:216: if (g[i][j] != 0xaau) bang();
      0009EC E5*00            [12] 2141 	mov	a,_bp
      0009EE 24 03            [12] 2142 	add	a,#0x03
      0009F0 F8               [12] 2143 	mov	r0,a
      0009F1 EA               [12] 2144 	mov	a,r2
      0009F2 26               [12] 2145 	add	a,@r0
      0009F3 F5 82            [12] 2146 	mov	dpl,a
      0009F5 EE               [12] 2147 	mov	a,r6
      0009F6 08               [12] 2148 	inc	r0
      0009F7 36               [12] 2149 	addc	a,@r0
      0009F8 F5 83            [12] 2150 	mov	dph,a
      0009FA E0               [24] 2151 	movx	a,@dptr
      0009FB FD               [12] 2152 	mov	r5,a
      0009FC BD AA 02         [24] 2153 	cjne	r5,#0xaa,00193$
      0009FF 80 1B            [24] 2154 	sjmp	00119$
      000A01                       2155 00193$:
      000A01 C0 07            [24] 2156 	push	ar7
      000A03 C0 06            [24] 2157 	push	ar6
      000A05 C0 04            [24] 2158 	push	ar4
      000A07 C0 03            [24] 2159 	push	ar3
      000A09 C0 02            [24] 2160 	push	ar2
      000A0B C0 01            [24] 2161 	push	ar1
      000A0D 12r00r1A         [24] 2162 	lcall	_bang
      000A10 D0 01            [24] 2163 	pop	ar1
      000A12 D0 02            [24] 2164 	pop	ar2
      000A14 D0 03            [24] 2165 	pop	ar3
      000A16 D0 04            [24] 2166 	pop	ar4
      000A18 D0 06            [24] 2167 	pop	ar6
      000A1A D0 07            [24] 2168 	pop	ar7
      000A1C                       2169 00119$:
                                   2170 ;	walk.c:215: for (j = 0; j < COLS; j++)
      000A1C 0A               [12] 2171 	inc	r2
      000A1D BA 00 01         [24] 2172 	cjne	r2,#0x00,00194$
      000A20 0E               [12] 2173 	inc	r6
      000A21                       2174 00194$:
      000A21 C3               [12] 2175 	clr	c
      000A22 EA               [12] 2176 	mov	a,r2
      000A23 94 C9            [12] 2177 	subb	a,#0xc9
      000A25 EE               [12] 2178 	mov	a,r6
      000A26 64 80            [12] 2179 	xrl	a,#0x80
      000A28 94 80            [12] 2180 	subb	a,#0x80
      000A2A 40 C0            [24] 2181 	jc	00118$
                                   2182 ;	walk.c:214: for (i = 0; i < ROWS; i++)
      000A2C 74 C9            [12] 2183 	mov	a,#0xc9
      000A2E 2B               [12] 2184 	add	a,r3
      000A2F FB               [12] 2185 	mov	r3,a
      000A30 E4               [12] 2186 	clr	a
      000A31 3C               [12] 2187 	addc	a,r4
      000A32 FC               [12] 2188 	mov	r4,a
      000A33 E5*00            [12] 2189 	mov	a,_bp
      000A35 24 0B            [12] 2190 	add	a,#0x0b
      000A37 F8               [12] 2191 	mov	r0,a
      000A38 06               [12] 2192 	inc	@r0
      000A39 B6 00 02         [24] 2193 	cjne	@r0,#0x00,00196$
      000A3C 08               [12] 2194 	inc	r0
      000A3D 06               [12] 2195 	inc	@r0
      000A3E                       2196 00196$:
      000A3E E5*00            [12] 2197 	mov	a,_bp
      000A40 24 0B            [12] 2198 	add	a,#0x0b
      000A42 F8               [12] 2199 	mov	r0,a
      000A43 C3               [12] 2200 	clr	c
      000A44 E6               [12] 2201 	mov	a,@r0
      000A45 94 30            [12] 2202 	subb	a,#0x30
      000A47 08               [12] 2203 	inc	r0
      000A48 E6               [12] 2204 	mov	a,@r0
      000A49 64 80            [12] 2205 	xrl	a,#0x80
      000A4B 94 80            [12] 2206 	subb	a,#0x80
      000A4D 40 8B            [24] 2207 	jc	00132$
                                   2208 ;	walk.c:218: N++;
      000A4F E5*00            [12] 2209 	mov	a,_bp
      000A51 24 09            [12] 2210 	add	a,#0x09
      000A53 F8               [12] 2211 	mov	r0,a
      000A54 06               [12] 2212 	inc	@r0
      000A55 B6 00 02         [24] 2213 	cjne	@r0,#0x00,00198$
      000A58 08               [12] 2214 	inc	r0
      000A59 06               [12] 2215 	inc	@r0
      000A5A                       2216 00198$:
      000A5A 02r06rD6         [24] 2217 	ljmp	00108$
      000A5D                       2218 00110$:
                                   2219 ;	walk.c:221: EA = 0;
                                   2220 ;	assignBit
      000A5D C2 AF            [12] 2221 	clr	_EA
                                   2222 ;	walk.c:223: puts("\033[2J\033[?25h");
      000A5F 90r00r5F         [24] 2223 	mov	dptr,#___str_7
      000A62 75 F0 80         [24] 2224 	mov	b,#0x80
      000A65 12r00r00         [24] 2225 	lcall	_puts
                                   2226 ;	walk.c:35: PCON |= 2;
      000A68 43 87 02         [24] 2227 	orl	_PCON,#0x02
                                   2228 ;	walk.c:227: return;
                                   2229 ;	walk.c:228: }
      000A6B 85*00 81         [24] 2230 	mov	sp,_bp
      000A6E D0*00            [24] 2231 	pop	_bp
      000A70 22               [24] 2232 	ret
                                   2233 ;------------------------------------------------------------
                                   2234 ;Allocation info for local variables in function 'qinit'
                                   2235 ;------------------------------------------------------------
                                   2236 ;	walk.c:230: static void qinit(void) {
                                   2237 ;	-----------------------------------------
                                   2238 ;	 function qinit
                                   2239 ;	-----------------------------------------
      000A71                       2240 _qinit:
                                   2241 ;	walk.c:231: hp = tp = 0;
      000A71 90rBCr72         [24] 2242 	mov	dptr,#_tp
      000A74 E4               [12] 2243 	clr	a
      000A75 F0               [24] 2244 	movx	@dptr,a
      000A76 A3               [24] 2245 	inc	dptr
      000A77 F0               [24] 2246 	movx	@dptr,a
      000A78 90rBCr70         [24] 2247 	mov	dptr,#_hp
      000A7B F0               [24] 2248 	movx	@dptr,a
      000A7C A3               [24] 2249 	inc	dptr
      000A7D F0               [24] 2250 	movx	@dptr,a
                                   2251 ;	walk.c:232: return;
                                   2252 ;	walk.c:233: }
      000A7E 22               [24] 2253 	ret
                                   2254 ;------------------------------------------------------------
                                   2255 ;Allocation info for local variables in function 'qadd'
                                   2256 ;------------------------------------------------------------
                                   2257 ;t                         Allocated to registers r7 r5 r6 
                                   2258 ;sloc0                     Allocated to stack - _bp +1
                                   2259 ;sloc1                     Allocated to stack - _bp +3
                                   2260 ;sloc2                     Allocated to stack - _bp +5
                                   2261 ;sloc3                     Allocated to stack - _bp +10
                                   2262 ;------------------------------------------------------------
                                   2263 ;	walk.c:235: static uint8_t qadd(struct node *t) {
                                   2264 ;	-----------------------------------------
                                   2265 ;	 function qadd
                                   2266 ;	-----------------------------------------
      000A7F                       2267 _qadd:
      000A7F C0*00            [24] 2268 	push	_bp
      000A81 E5 81            [12] 2269 	mov	a,sp
      000A83 F5*00            [12] 2270 	mov	_bp,a
      000A85 24 06            [12] 2271 	add	a,#0x06
      000A87 F5 81            [12] 2272 	mov	sp,a
      000A89 AF 82            [24] 2273 	mov	r7,dpl
      000A8B AD 83            [24] 2274 	mov	r5,dph
      000A8D AE F0            [24] 2275 	mov	r6,b
                                   2276 ;	walk.c:236: if (((hp + 1) % QMAX) == tp) return 0u;
      000A8F 90rBCr70         [24] 2277 	mov	dptr,#_hp
      000A92 E0               [24] 2278 	movx	a,@dptr
      000A93 FB               [12] 2279 	mov	r3,a
      000A94 A3               [24] 2280 	inc	dptr
      000A95 E0               [24] 2281 	movx	a,@dptr
      000A96 FC               [12] 2282 	mov	r4,a
      000A97 A8*00            [24] 2283 	mov	r0,_bp
      000A99 08               [12] 2284 	inc	r0
      000A9A 74 01            [12] 2285 	mov	a,#0x01
      000A9C 2B               [12] 2286 	add	a,r3
      000A9D F6               [12] 2287 	mov	@r0,a
      000A9E E4               [12] 2288 	clr	a
      000A9F 3C               [12] 2289 	addc	a,r4
      000AA0 08               [12] 2290 	inc	r0
      000AA1 F6               [12] 2291 	mov	@r0,a
      000AA2 C0 07            [24] 2292 	push	ar7
      000AA4 C0 06            [24] 2293 	push	ar6
      000AA6 C0 05            [24] 2294 	push	ar5
      000AA8 C0 04            [24] 2295 	push	ar4
      000AAA C0 03            [24] 2296 	push	ar3
      000AAC 74 B0            [12] 2297 	mov	a,#0xb0
      000AAE C0 E0            [24] 2298 	push	acc
      000AB0 74 25            [12] 2299 	mov	a,#0x25
      000AB2 C0 E0            [24] 2300 	push	acc
      000AB4 A8*00            [24] 2301 	mov	r0,_bp
      000AB6 08               [12] 2302 	inc	r0
      000AB7 86 82            [24] 2303 	mov	dpl,@r0
      000AB9 08               [12] 2304 	inc	r0
      000ABA 86 83            [24] 2305 	mov	dph,@r0
      000ABC 12r00r00         [24] 2306 	lcall	__modsint
      000ABF A8*00            [24] 2307 	mov	r0,_bp
      000AC1 08               [12] 2308 	inc	r0
      000AC2 08               [12] 2309 	inc	r0
      000AC3 08               [12] 2310 	inc	r0
      000AC4 A6 82            [24] 2311 	mov	@r0,dpl
      000AC6 08               [12] 2312 	inc	r0
      000AC7 A6 83            [24] 2313 	mov	@r0,dph
      000AC9 15 81            [12] 2314 	dec	sp
      000ACB 15 81            [12] 2315 	dec	sp
      000ACD D0 03            [24] 2316 	pop	ar3
      000ACF D0 04            [24] 2317 	pop	ar4
      000AD1 D0 05            [24] 2318 	pop	ar5
      000AD3 D0 06            [24] 2319 	pop	ar6
      000AD5 D0 07            [24] 2320 	pop	ar7
      000AD7 90rBCr72         [24] 2321 	mov	dptr,#_tp
      000ADA E5*00            [12] 2322 	mov	a,_bp
      000ADC 24 05            [12] 2323 	add	a,#0x05
      000ADE F8               [12] 2324 	mov	r0,a
      000ADF E0               [24] 2325 	movx	a,@dptr
      000AE0 F6               [12] 2326 	mov	@r0,a
      000AE1 A3               [24] 2327 	inc	dptr
      000AE2 E0               [24] 2328 	movx	a,@dptr
      000AE3 08               [12] 2329 	inc	r0
      000AE4 F6               [12] 2330 	mov	@r0,a
      000AE5 E5*00            [12] 2331 	mov	a,_bp
      000AE7 24 03            [12] 2332 	add	a,#0x03
      000AE9 F8               [12] 2333 	mov	r0,a
      000AEA E5*00            [12] 2334 	mov	a,_bp
      000AEC 24 05            [12] 2335 	add	a,#0x05
      000AEE F9               [12] 2336 	mov	r1,a
      000AEF 86 F0            [24] 2337 	mov	b,@r0
      000AF1 E7               [12] 2338 	mov	a,@r1
      000AF2 B5 F0 0A         [24] 2339 	cjne	a,b,00109$
      000AF5 08               [12] 2340 	inc	r0
      000AF6 86 F0            [24] 2341 	mov	b,@r0
      000AF8 09               [12] 2342 	inc	r1
      000AF9 E7               [12] 2343 	mov	a,@r1
      000AFA B5 F0 02         [24] 2344 	cjne	a,b,00109$
      000AFD 80 02            [24] 2345 	sjmp	00110$
      000AFF                       2346 00109$:
      000AFF 80 05            [24] 2347 	sjmp	00102$
      000B01                       2348 00110$:
      000B01 75 82 00         [24] 2349 	mov	dpl,#0x00
      000B04 80 65            [24] 2350 	sjmp	00103$
      000B06                       2351 00102$:
                                   2352 ;	walk.c:237: queue[hp] = *t;
      000B06 8F 02            [24] 2353 	mov	ar2,r7
      000B08 8E 07            [24] 2354 	mov	ar7,r6
      000B0A EB               [12] 2355 	mov	a,r3
      000B0B 2B               [12] 2356 	add	a,r3
      000B0C FB               [12] 2357 	mov	r3,a
      000B0D EC               [12] 2358 	mov	a,r4
      000B0E 33               [12] 2359 	rlc	a
      000B0F FC               [12] 2360 	mov	r4,a
      000B10 EB               [12] 2361 	mov	a,r3
      000B11 2B               [12] 2362 	add	a,r3
      000B12 FB               [12] 2363 	mov	r3,a
      000B13 EC               [12] 2364 	mov	a,r4
      000B14 33               [12] 2365 	rlc	a
      000B15 FC               [12] 2366 	mov	r4,a
      000B16 EB               [12] 2367 	mov	a,r3
      000B17 24rB0            [12] 2368 	add	a,#_queue
      000B19 FB               [12] 2369 	mov	r3,a
      000B1A EC               [12] 2370 	mov	a,r4
      000B1B 34s25            [12] 2371 	addc	a,#(_queue >> 8)
      000B1D FC               [12] 2372 	mov	r4,a
      000B1E 7E 00            [12] 2373 	mov	r6,#0x00
      000B20 74 04            [12] 2374 	mov	a,#0x04
      000B22 C0 E0            [24] 2375 	push	acc
      000B24 E4               [12] 2376 	clr	a
      000B25 C0 E0            [24] 2377 	push	acc
      000B27 C0 02            [24] 2378 	push	ar2
      000B29 C0 05            [24] 2379 	push	ar5
      000B2B C0 07            [24] 2380 	push	ar7
      000B2D 8B 82            [24] 2381 	mov	dpl,r3
      000B2F 8C 83            [24] 2382 	mov	dph,r4
      000B31 8E F0            [24] 2383 	mov	b,r6
      000B33 12r00r00         [24] 2384 	lcall	___memcpy
      000B36 E5 81            [12] 2385 	mov	a,sp
      000B38 24 FB            [12] 2386 	add	a,#0xfb
      000B3A F5 81            [12] 2387 	mov	sp,a
                                   2388 ;	walk.c:238: hp = (hp + 1) % QMAX;
      000B3C 90rBCr70         [24] 2389 	mov	dptr,#_hp
      000B3F E0               [24] 2390 	movx	a,@dptr
      000B40 FD               [12] 2391 	mov	r5,a
      000B41 A3               [24] 2392 	inc	dptr
      000B42 E0               [24] 2393 	movx	a,@dptr
      000B43 FE               [12] 2394 	mov	r6,a
      000B44 0D               [12] 2395 	inc	r5
      000B45 BD 00 01         [24] 2396 	cjne	r5,#0x00,00111$
      000B48 0E               [12] 2397 	inc	r6
      000B49                       2398 00111$:
      000B49 74 B0            [12] 2399 	mov	a,#0xb0
      000B4B C0 E0            [24] 2400 	push	acc
      000B4D 74 25            [12] 2401 	mov	a,#0x25
      000B4F C0 E0            [24] 2402 	push	acc
      000B51 8D 82            [24] 2403 	mov	dpl,r5
      000B53 8E 83            [24] 2404 	mov	dph,r6
      000B55 12r00r00         [24] 2405 	lcall	__modsint
      000B58 AD 82            [24] 2406 	mov	r5,dpl
      000B5A AE 83            [24] 2407 	mov	r6,dph
      000B5C 15 81            [12] 2408 	dec	sp
      000B5E 15 81            [12] 2409 	dec	sp
      000B60 90rBCr70         [24] 2410 	mov	dptr,#_hp
      000B63 ED               [12] 2411 	mov	a,r5
      000B64 F0               [24] 2412 	movx	@dptr,a
      000B65 EE               [12] 2413 	mov	a,r6
      000B66 A3               [24] 2414 	inc	dptr
      000B67 F0               [24] 2415 	movx	@dptr,a
                                   2416 ;	walk.c:239: return 1u;
      000B68 75 82 01         [24] 2417 	mov	dpl,#0x01
      000B6B                       2418 00103$:
                                   2419 ;	walk.c:240: }
      000B6B 85*00 81         [24] 2420 	mov	sp,_bp
      000B6E D0*00            [24] 2421 	pop	_bp
      000B70 22               [24] 2422 	ret
                                   2423 ;------------------------------------------------------------
                                   2424 ;Allocation info for local variables in function 'qget'
                                   2425 ;------------------------------------------------------------
                                   2426 ;t                         Allocated to registers r5 r6 r7 
                                   2427 ;------------------------------------------------------------
                                   2428 ;	walk.c:242: static uint8_t qget(struct node *t) {
                                   2429 ;	-----------------------------------------
                                   2430 ;	 function qget
                                   2431 ;	-----------------------------------------
      000B71                       2432 _qget:
      000B71 AD 82            [24] 2433 	mov	r5,dpl
      000B73 AE 83            [24] 2434 	mov	r6,dph
      000B75 AF F0            [24] 2435 	mov	r7,b
                                   2436 ;	walk.c:243: if (hp == tp) return 0u;
      000B77 90rBCr70         [24] 2437 	mov	dptr,#_hp
      000B7A E0               [24] 2438 	movx	a,@dptr
      000B7B FB               [12] 2439 	mov	r3,a
      000B7C A3               [24] 2440 	inc	dptr
      000B7D E0               [24] 2441 	movx	a,@dptr
      000B7E FC               [12] 2442 	mov	r4,a
      000B7F 90rBCr72         [24] 2443 	mov	dptr,#_tp
      000B82 E0               [24] 2444 	movx	a,@dptr
      000B83 F9               [12] 2445 	mov	r1,a
      000B84 A3               [24] 2446 	inc	dptr
      000B85 E0               [24] 2447 	movx	a,@dptr
      000B86 FA               [12] 2448 	mov	r2,a
      000B87 EB               [12] 2449 	mov	a,r3
      000B88 B5 01 08         [24] 2450 	cjne	a,ar1,00102$
      000B8B EC               [12] 2451 	mov	a,r4
      000B8C B5 02 04         [24] 2452 	cjne	a,ar2,00102$
      000B8F 75 82 00         [24] 2453 	mov	dpl,#0x00
      000B92 22               [24] 2454 	ret
      000B93                       2455 00102$:
                                   2456 ;	walk.c:244: *t = queue[tp];
      000B93 E9               [12] 2457 	mov	a,r1
      000B94 29               [12] 2458 	add	a,r1
      000B95 F9               [12] 2459 	mov	r1,a
      000B96 EA               [12] 2460 	mov	a,r2
      000B97 33               [12] 2461 	rlc	a
      000B98 FA               [12] 2462 	mov	r2,a
      000B99 E9               [12] 2463 	mov	a,r1
      000B9A 29               [12] 2464 	add	a,r1
      000B9B F9               [12] 2465 	mov	r1,a
      000B9C EA               [12] 2466 	mov	a,r2
      000B9D 33               [12] 2467 	rlc	a
      000B9E FA               [12] 2468 	mov	r2,a
      000B9F E9               [12] 2469 	mov	a,r1
      000BA0 24rB0            [12] 2470 	add	a,#_queue
      000BA2 F9               [12] 2471 	mov	r1,a
      000BA3 EA               [12] 2472 	mov	a,r2
      000BA4 34s25            [12] 2473 	addc	a,#(_queue >> 8)
      000BA6 FA               [12] 2474 	mov	r2,a
      000BA7 7C 00            [12] 2475 	mov	r4,#0x00
      000BA9 74 04            [12] 2476 	mov	a,#0x04
      000BAB C0 E0            [24] 2477 	push	acc
      000BAD E4               [12] 2478 	clr	a
      000BAE C0 E0            [24] 2479 	push	acc
      000BB0 C0 01            [24] 2480 	push	ar1
      000BB2 C0 02            [24] 2481 	push	ar2
      000BB4 C0 04            [24] 2482 	push	ar4
      000BB6 8D 82            [24] 2483 	mov	dpl,r5
      000BB8 8E 83            [24] 2484 	mov	dph,r6
      000BBA 8F F0            [24] 2485 	mov	b,r7
      000BBC 12r00r00         [24] 2486 	lcall	___memcpy
      000BBF E5 81            [12] 2487 	mov	a,sp
      000BC1 24 FB            [12] 2488 	add	a,#0xfb
      000BC3 F5 81            [12] 2489 	mov	sp,a
                                   2490 ;	walk.c:245: tp = (tp + 1) % QMAX;
      000BC5 90rBCr72         [24] 2491 	mov	dptr,#_tp
      000BC8 E0               [24] 2492 	movx	a,@dptr
      000BC9 FE               [12] 2493 	mov	r6,a
      000BCA A3               [24] 2494 	inc	dptr
      000BCB E0               [24] 2495 	movx	a,@dptr
      000BCC FF               [12] 2496 	mov	r7,a
      000BCD 0E               [12] 2497 	inc	r6
      000BCE BE 00 01         [24] 2498 	cjne	r6,#0x00,00111$
      000BD1 0F               [12] 2499 	inc	r7
      000BD2                       2500 00111$:
      000BD2 74 B0            [12] 2501 	mov	a,#0xb0
      000BD4 C0 E0            [24] 2502 	push	acc
      000BD6 74 25            [12] 2503 	mov	a,#0x25
      000BD8 C0 E0            [24] 2504 	push	acc
      000BDA 8E 82            [24] 2505 	mov	dpl,r6
      000BDC 8F 83            [24] 2506 	mov	dph,r7
      000BDE 12r00r00         [24] 2507 	lcall	__modsint
      000BE1 AE 82            [24] 2508 	mov	r6,dpl
      000BE3 AF 83            [24] 2509 	mov	r7,dph
      000BE5 15 81            [12] 2510 	dec	sp
      000BE7 15 81            [12] 2511 	dec	sp
      000BE9 90rBCr72         [24] 2512 	mov	dptr,#_tp
      000BEC EE               [12] 2513 	mov	a,r6
      000BED F0               [24] 2514 	movx	@dptr,a
      000BEE EF               [12] 2515 	mov	a,r7
      000BEF A3               [24] 2516 	inc	dptr
      000BF0 F0               [24] 2517 	movx	@dptr,a
                                   2518 ;	walk.c:246: return 1u;
      000BF1 75 82 01         [24] 2519 	mov	dpl,#0x01
                                   2520 ;	walk.c:247: }
      000BF4 22               [24] 2521 	ret
                                   2522 	.area CSEG    (CODE)
                                   2523 	.area CONST   (CODE)
                                   2524 	.area CONST   (CODE)
      000000                       2525 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2526 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2527 	.db 0x00
                                   2528 	.area CSEG    (CODE)
                                   2529 	.area CONST   (CODE)
      00000D                       2530 ___str_1:
      00000D 1B                    2531 	.db 0x1b
      00000E 5B 32 3B 31 48 25 20  2532 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      000023 00                    2533 	.db 0x00
                                   2534 	.area CSEG    (CODE)
                                   2535 	.area CONST   (CODE)
      000024                       2536 ___str_2:
      000024 1B                    2537 	.db 0x1b
      000025 5B 25 64 3B 25 64 48  2538 	.ascii "[%d;%dH."
             2E
      00002D 00                    2539 	.db 0x00
                                   2540 	.area CSEG    (CODE)
                                   2541 	.area CONST   (CODE)
      00002E                       2542 ___str_3:
      00002E 1B                    2543 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2544 	.ascii "[%d;%dHo"
             6F
      000037 00                    2545 	.db 0x00
                                   2546 	.area CSEG    (CODE)
                                   2547 	.area CONST   (CODE)
      000038                       2548 ___str_4:
      000038 1B                    2549 	.db 0x1b
      000039 5B 32 4A              2550 	.ascii "[2J"
      00003C 1B                    2551 	.db 0x1b
      00003D 5B 3F 32 35 6C        2552 	.ascii "[?25l"
      000042 00                    2553 	.db 0x00
                                   2554 	.area CSEG    (CODE)
                                   2555 	.area CONST   (CODE)
      000043                       2556 ___str_5:
      000043 1B                    2557 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2558 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2559 	.db 0x00
                                   2560 	.area CSEG    (CODE)
                                   2561 	.area CONST   (CODE)
      000056                       2562 ___str_6:
      000056 25 20 38 64 25 20 38  2563 	.ascii "% 8d% 8d"
             64
      00005E 00                    2564 	.db 0x00
                                   2565 	.area CSEG    (CODE)
                                   2566 	.area CONST   (CODE)
      00005F                       2567 ___str_7:
      00005F 1B                    2568 	.db 0x1b
      000060 5B 32 4A              2569 	.ascii "[2J"
      000063 1B                    2570 	.db 0x1b
      000064 5B 3F 32 35 68        2571 	.ascii "[?25h"
      000069 00                    2572 	.db 0x00
                                   2573 	.area CSEG    (CODE)
                                   2574 	.area XINIT   (CODE)
      000000                       2575 __xinit__neigh:
      000000 FF FF                 2576 	.byte #0xff, #0xff	; -1
      000002 01 00                 2577 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2578 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2579 	.byte #0xff, #0xff	; -1
      000008 01 00                 2580 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2581 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2582 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2583 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2584 	.byte #0xff, #0xff	; -1
      000012 00 00                 2585 	.byte #0x00, #0x00	;  0
      000014 00 00                 2586 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2587 	.byte #0xff, #0xff	; -1
      000018 01 00                 2588 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2589 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2590 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2591 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2592 	.byte #0xff, #0xff	; -1
      000022 01 00                 2593 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2594 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2595 	.byte #0xff, #0xff	; -1
      000028 01 00                 2596 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2597 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2598 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2599 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2600 	.byte #0xff, #0xff	; -1
      000032 00 00                 2601 	.byte #0x00, #0x00	;  0
      000034 00 00                 2602 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2603 	.byte #0xff, #0xff	; -1
      000038 01 00                 2604 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2605 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2606 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2607 	.byte #0x01, #0x00	;  1
                                   2608 	.area CABS    (ABS,CODE)
