                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _FL
                                     27 	.globl _P
                                     28 	.globl _TF2
                                     29 	.globl _EXF2
                                     30 	.globl _RCLK
                                     31 	.globl _TCLK
                                     32 	.globl _EXEN2
                                     33 	.globl _TR2
                                     34 	.globl _C_T2
                                     35 	.globl _CP_RL2
                                     36 	.globl _T2CON_7
                                     37 	.globl _T2CON_6
                                     38 	.globl _T2CON_5
                                     39 	.globl _T2CON_4
                                     40 	.globl _T2CON_3
                                     41 	.globl _T2CON_2
                                     42 	.globl _T2CON_1
                                     43 	.globl _T2CON_0
                                     44 	.globl _PT2
                                     45 	.globl _PS
                                     46 	.globl _PT1
                                     47 	.globl _PX1
                                     48 	.globl _PT0
                                     49 	.globl _PX0
                                     50 	.globl _RD
                                     51 	.globl _WR
                                     52 	.globl _T1
                                     53 	.globl _T0
                                     54 	.globl _INT1
                                     55 	.globl _INT0
                                     56 	.globl _TXD
                                     57 	.globl _RXD
                                     58 	.globl _P3_7
                                     59 	.globl _P3_6
                                     60 	.globl _P3_5
                                     61 	.globl _P3_4
                                     62 	.globl _P3_3
                                     63 	.globl _P3_2
                                     64 	.globl _P3_1
                                     65 	.globl _P3_0
                                     66 	.globl _EA
                                     67 	.globl _ET2
                                     68 	.globl _ES
                                     69 	.globl _ET1
                                     70 	.globl _EX1
                                     71 	.globl _ET0
                                     72 	.globl _EX0
                                     73 	.globl _P2_7
                                     74 	.globl _P2_6
                                     75 	.globl _P2_5
                                     76 	.globl _P2_4
                                     77 	.globl _P2_3
                                     78 	.globl _P2_2
                                     79 	.globl _P2_1
                                     80 	.globl _P2_0
                                     81 	.globl _SM0
                                     82 	.globl _SM1
                                     83 	.globl _SM2
                                     84 	.globl _REN
                                     85 	.globl _TB8
                                     86 	.globl _RB8
                                     87 	.globl _TI
                                     88 	.globl _RI
                                     89 	.globl _T2EX
                                     90 	.globl _T2
                                     91 	.globl _P1_7
                                     92 	.globl _P1_6
                                     93 	.globl _P1_5
                                     94 	.globl _P1_4
                                     95 	.globl _P1_3
                                     96 	.globl _P1_2
                                     97 	.globl _P1_1
                                     98 	.globl _P1_0
                                     99 	.globl _TF1
                                    100 	.globl _TR1
                                    101 	.globl _TF0
                                    102 	.globl _TR0
                                    103 	.globl _IE1
                                    104 	.globl _IT1
                                    105 	.globl _IE0
                                    106 	.globl _IT0
                                    107 	.globl _P0_7
                                    108 	.globl _P0_6
                                    109 	.globl _P0_5
                                    110 	.globl _P0_4
                                    111 	.globl _P0_3
                                    112 	.globl _P0_2
                                    113 	.globl _P0_1
                                    114 	.globl _P0_0
                                    115 	.globl _B
                                    116 	.globl _A
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _TH2
                                    120 	.globl _TL2
                                    121 	.globl _RCAP2H
                                    122 	.globl _RCAP2L
                                    123 	.globl _T2MOD
                                    124 	.globl _T2CON
                                    125 	.globl _IP
                                    126 	.globl _P3
                                    127 	.globl _IE
                                    128 	.globl _P2
                                    129 	.globl _SBUF
                                    130 	.globl _SCON
                                    131 	.globl _P1
                                    132 	.globl _TH1
                                    133 	.globl _TH0
                                    134 	.globl _TL1
                                    135 	.globl _TL0
                                    136 	.globl _TMOD
                                    137 	.globl _TCON
                                    138 	.globl _PCON
                                    139 	.globl _DPH
                                    140 	.globl _DPL
                                    141 	.globl _SP
                                    142 	.globl _P0
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000C8   166 _T2CON	=	0x00c8
                           0000C9   167 _T2MOD	=	0x00c9
                           0000CA   168 _RCAP2L	=	0x00ca
                           0000CB   169 _RCAP2H	=	0x00cb
                           0000CC   170 _TL2	=	0x00cc
                           0000CD   171 _TH2	=	0x00cd
                           0000D0   172 _PSW	=	0x00d0
                           0000E0   173 _ACC	=	0x00e0
                           0000E0   174 _A	=	0x00e0
                           0000F0   175 _B	=	0x00f0
                                    176 ;--------------------------------------------------------
                                    177 ; special function bits
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0_0	=	0x0080
                           000081   182 _P0_1	=	0x0081
                           000082   183 _P0_2	=	0x0082
                           000083   184 _P0_3	=	0x0083
                           000084   185 _P0_4	=	0x0084
                           000085   186 _P0_5	=	0x0085
                           000086   187 _P0_6	=	0x0086
                           000087   188 _P0_7	=	0x0087
                           000088   189 _IT0	=	0x0088
                           000089   190 _IE0	=	0x0089
                           00008A   191 _IT1	=	0x008a
                           00008B   192 _IE1	=	0x008b
                           00008C   193 _TR0	=	0x008c
                           00008D   194 _TF0	=	0x008d
                           00008E   195 _TR1	=	0x008e
                           00008F   196 _TF1	=	0x008f
                           000090   197 _P1_0	=	0x0090
                           000091   198 _P1_1	=	0x0091
                           000092   199 _P1_2	=	0x0092
                           000093   200 _P1_3	=	0x0093
                           000094   201 _P1_4	=	0x0094
                           000095   202 _P1_5	=	0x0095
                           000096   203 _P1_6	=	0x0096
                           000097   204 _P1_7	=	0x0097
                           000090   205 _T2	=	0x0090
                           000091   206 _T2EX	=	0x0091
                           000098   207 _RI	=	0x0098
                           000099   208 _TI	=	0x0099
                           00009A   209 _RB8	=	0x009a
                           00009B   210 _TB8	=	0x009b
                           00009C   211 _REN	=	0x009c
                           00009D   212 _SM2	=	0x009d
                           00009E   213 _SM1	=	0x009e
                           00009F   214 _SM0	=	0x009f
                           0000A0   215 _P2_0	=	0x00a0
                           0000A1   216 _P2_1	=	0x00a1
                           0000A2   217 _P2_2	=	0x00a2
                           0000A3   218 _P2_3	=	0x00a3
                           0000A4   219 _P2_4	=	0x00a4
                           0000A5   220 _P2_5	=	0x00a5
                           0000A6   221 _P2_6	=	0x00a6
                           0000A7   222 _P2_7	=	0x00a7
                           0000A8   223 _EX0	=	0x00a8
                           0000A9   224 _ET0	=	0x00a9
                           0000AA   225 _EX1	=	0x00aa
                           0000AB   226 _ET1	=	0x00ab
                           0000AC   227 _ES	=	0x00ac
                           0000AD   228 _ET2	=	0x00ad
                           0000AF   229 _EA	=	0x00af
                           0000B0   230 _P3_0	=	0x00b0
                           0000B1   231 _P3_1	=	0x00b1
                           0000B2   232 _P3_2	=	0x00b2
                           0000B3   233 _P3_3	=	0x00b3
                           0000B4   234 _P3_4	=	0x00b4
                           0000B5   235 _P3_5	=	0x00b5
                           0000B6   236 _P3_6	=	0x00b6
                           0000B7   237 _P3_7	=	0x00b7
                           0000B0   238 _RXD	=	0x00b0
                           0000B1   239 _TXD	=	0x00b1
                           0000B2   240 _INT0	=	0x00b2
                           0000B3   241 _INT1	=	0x00b3
                           0000B4   242 _T0	=	0x00b4
                           0000B5   243 _T1	=	0x00b5
                           0000B6   244 _WR	=	0x00b6
                           0000B7   245 _RD	=	0x00b7
                           0000B8   246 _PX0	=	0x00b8
                           0000B9   247 _PT0	=	0x00b9
                           0000BA   248 _PX1	=	0x00ba
                           0000BB   249 _PT1	=	0x00bb
                           0000BC   250 _PS	=	0x00bc
                           0000BD   251 _PT2	=	0x00bd
                           0000C8   252 _T2CON_0	=	0x00c8
                           0000C9   253 _T2CON_1	=	0x00c9
                           0000CA   254 _T2CON_2	=	0x00ca
                           0000CB   255 _T2CON_3	=	0x00cb
                           0000CC   256 _T2CON_4	=	0x00cc
                           0000CD   257 _T2CON_5	=	0x00cd
                           0000CE   258 _T2CON_6	=	0x00ce
                           0000CF   259 _T2CON_7	=	0x00cf
                           0000C8   260 _CP_RL2	=	0x00c8
                           0000C9   261 _C_T2	=	0x00c9
                           0000CA   262 _TR2	=	0x00ca
                           0000CB   263 _EXEN2	=	0x00cb
                           0000CC   264 _TCLK	=	0x00cc
                           0000CD   265 _RCLK	=	0x00cd
                           0000CE   266 _EXF2	=	0x00ce
                           0000CF   267 _TF2	=	0x00cf
                           0000D0   268 _P	=	0x00d0
                           0000D1   269 _FL	=	0x00d1
                           0000D2   270 _OV	=	0x00d2
                           0000D3   271 _RS0	=	0x00d3
                           0000D4   272 _RS1	=	0x00d4
                           0000D5   273 _F0	=	0x00d5
                           0000D6   274 _AC	=	0x00d6
                           0000D7   275 _CY	=	0x00d7
                                    276 ;--------------------------------------------------------
                                    277 ; overlayable register banks
                                    278 ;--------------------------------------------------------
                                    279 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        280 	.ds 8
                                    281 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable bit register bank
                                    285 ;--------------------------------------------------------
                                    286 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        287 bits:
      000000                        288 	.ds 1
                           008000   289 	b0 = bits[0]
                           008100   290 	b1 = bits[1]
                           008200   291 	b2 = bits[2]
                           008300   292 	b3 = bits[3]
                           008400   293 	b4 = bits[4]
                           008500   294 	b5 = bits[5]
                           008600   295 	b6 = bits[6]
                           008700   296 	b7 = bits[7]
                                    297 ;--------------------------------------------------------
                                    298 ; internal ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area DSEG    (DATA)
                                    301 ;--------------------------------------------------------
                                    302 ; overlayable items in internal ram 
                                    303 ;--------------------------------------------------------
                                    304 ;--------------------------------------------------------
                                    305 ; Stack segment in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 	.area	SSEG
      000000                        308 __start__stack:
      000000                        309 	.ds	1
                                    310 
                                    311 ;--------------------------------------------------------
                                    312 ; indirectly addressable internal ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area ISEG    (DATA)
      000000                        315 _digits:
      000000                        316 	.ds 16
      000010                        317 _i0:
      000010                        318 	.ds 1
      000011                        319 _i1:
      000011                        320 	.ds 1
      000012                        321 _x:
      000012                        322 	.ds 2
      000014                        323 _y:
      000014                        324 	.ds 2
      000016                        325 _j:
      000016                        326 	.ds 2
      000018                        327 _c:
      000018                        328 	.ds 2
      00001A                        329 _bstep:
      00001A                        330 	.ds 1
      00001B                        331 _n:
      00001B                        332 	.ds 1
      00001C                        333 _fixed:
      00001C                        334 	.ds 1
      00001D                        335 _cycle2:
      00001D                        336 	.ds 1
      00001E                        337 _x1:
      00001E                        338 	.ds 2
      000020                        339 _y1:
      000020                        340 	.ds 2
      000022                        341 _generation:
      000022                        342 	.ds 4
      000026                        343 _busy:
      000026                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
      000000                        362 _pu:
      000000                        363 	.ds 9216
      002400                        364 _u:
      002400                        365 	.ds 9216
      004800                        366 _nu:
      004800                        367 	.ds 9216
                                    368 ;--------------------------------------------------------
                                    369 ; absolute external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XABS    (ABS,XDATA)
                                    372 ;--------------------------------------------------------
                                    373 ; external initialized ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XISEG   (XDATA)
                                    376 	.area HOME    (CODE)
                                    377 	.area GSINIT0 (CODE)
                                    378 	.area GSINIT1 (CODE)
                                    379 	.area GSINIT2 (CODE)
                                    380 	.area GSINIT3 (CODE)
                                    381 	.area GSINIT4 (CODE)
                                    382 	.area GSINIT5 (CODE)
                                    383 	.area GSINIT  (CODE)
                                    384 	.area GSFINAL (CODE)
                                    385 	.area CSEG    (CODE)
                                    386 ;--------------------------------------------------------
                                    387 ; interrupt vector 
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
      000000                        390 __interrupt_vect:
      000000 02r00r00         [24]  391 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  392 	ljmp	_int0
      000006                        393 	.ds	5
      00000B 32               [24]  394 	reti
      00000C                        395 	.ds	7
      000013 02r00r1A         [24]  396 	ljmp	_int1
                                    397 ;--------------------------------------------------------
                                    398 ; global & static initialisations
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
                                    401 	.area GSINIT  (CODE)
                                    402 	.area GSFINAL (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.globl __sdcc_gsinit_startup
                                    405 	.globl __sdcc_program_startup
                                    406 	.globl __start__stack
                                    407 	.globl __mcs51_genXINIT
                                    408 	.globl __mcs51_genXRAMCLEAR
                                    409 	.globl __mcs51_genRAMCLEAR
                                    410 ;	life.c:25: __idata static const char digits[16] = {
      000000 78r00            [12]  411 	mov	r0,#_digits
      000002 76 30            [12]  412 	mov	@r0,#0x30
      000004 78r01            [12]  413 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  414 	mov	@r0,#0x31
      000008 78r02            [12]  415 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  416 	mov	@r0,#0x32
      00000C 78r03            [12]  417 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  418 	mov	@r0,#0x33
      000010 78r04            [12]  419 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  420 	mov	@r0,#0x34
      000014 78r05            [12]  421 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  422 	mov	@r0,#0x35
      000018 78r06            [12]  423 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  424 	mov	@r0,#0x36
      00001C 78r07            [12]  425 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  426 	mov	@r0,#0x37
      000020 78r08            [12]  427 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  428 	mov	@r0,#0x38
      000024 78r09            [12]  429 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  430 	mov	@r0,#0x39
      000028 78r0A            [12]  431 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  432 	mov	@r0,#0x41
      00002C 78r0B            [12]  433 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  434 	mov	@r0,#0x42
      000030 78r0C            [12]  435 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  436 	mov	@r0,#0x43
      000034 78r0D            [12]  437 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  438 	mov	@r0,#0x44
      000038 78r0E            [12]  439 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  440 	mov	@r0,#0x45
      00003C 78r0F            [12]  441 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  442 	mov	@r0,#0x46
                                    443 ;	life.c:159: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000040 78r26            [12]  444 	mov	r0,#_busy
      000042 76 5C            [12]  445 	mov	@r0,#0x5c
      000044 78r27            [12]  446 	mov	r0,#(_busy + 0x0001)
      000046 76 7C            [12]  447 	mov	@r0,#0x7c
      000048 78r28            [12]  448 	mov	r0,#(_busy + 0x0002)
      00004A 76 2F            [12]  449 	mov	@r0,#0x2f
      00004C 78r29            [12]  450 	mov	r0,#(_busy + 0x0003)
      00004E 76 2D            [12]  451 	mov	@r0,#0x2d
                                    452 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  453 	ljmp	__sdcc_program_startup
                                    454 ;--------------------------------------------------------
                                    455 ; Home
                                    456 ;--------------------------------------------------------
                                    457 	.area HOME    (CODE)
                                    458 	.area HOME    (CODE)
      000016                        459 __sdcc_program_startup:
      000016 02r02r19         [24]  460 	ljmp	_main
                                    461 ;	return from main will return to caller
                                    462 ;--------------------------------------------------------
                                    463 ; code
                                    464 ;--------------------------------------------------------
                                    465 	.area CSEG    (CODE)
                                    466 ;------------------------------------------------------------
                                    467 ;Allocation info for local variables in function 'putchar'
                                    468 ;------------------------------------------------------------
                                    469 ;c                         Allocated to registers 
                                    470 ;------------------------------------------------------------
                                    471 ;	life.c:8: int putchar(int c) __naked {
                                    472 ;	-----------------------------------------
                                    473 ;	 function putchar
                                    474 ;	-----------------------------------------
      000000                        475 _putchar:
                                    476 ;	naked function: no prologue.
                                    477 ;	life.c:13: __endasm;
      000000 E5 82            [12]  478 	mov	a, dpl
      000002 02 00 30         [24]  479 	ljmp	0x0030
                                    480 ;	life.c:14: }
                                    481 ;	naked function: no epilogue.
                                    482 ;------------------------------------------------------------
                                    483 ;Allocation info for local variables in function 'getchar'
                                    484 ;------------------------------------------------------------
                                    485 ;	life.c:16: int getchar(void) __naked {
                                    486 ;	-----------------------------------------
                                    487 ;	 function getchar
                                    488 ;	-----------------------------------------
      000005                        489 _getchar:
                                    490 ;	naked function: no prologue.
                                    491 ;	life.c:22: __endasm;
      000005 12 00 32         [24]  492 	lcall	0x0032
      000008 F5 82            [12]  493 	mov	dpl, a
      00000A 75 83 00         [24]  494 	mov	dph, #0
      00000D 22               [24]  495 	ret
                                    496 ;	life.c:23: }
                                    497 ;	naked function: no epilogue.
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'int0'
                                    500 ;------------------------------------------------------------
                                    501 ;	life.c:54: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    502 ;	-----------------------------------------
                                    503 ;	 function int0
                                    504 ;	-----------------------------------------
      00000E                        505 _int0:
                           00000F   506 	ar7 = 0x0f
                           00000E   507 	ar6 = 0x0e
                           00000D   508 	ar5 = 0x0d
                           00000C   509 	ar4 = 0x0c
                           00000B   510 	ar3 = 0x0b
                           00000A   511 	ar2 = 0x0a
                           000009   512 	ar1 = 0x09
                           000008   513 	ar0 = 0x08
      00000E C0 D0            [24]  514 	push	psw
      000010 75 D0 08         [24]  515 	mov	psw,#0x08
                                    516 ;	life.c:55: i0 = 1;
      000013 78r10            [12]  517 	mov	r0,#_i0
      000015 76 01            [12]  518 	mov	@r0,#0x01
                                    519 ;	life.c:56: }
      000017 D0 D0            [24]  520 	pop	psw
      000019 32               [24]  521 	reti
                                    522 ;	eliminated unneeded push/pop dpl
                                    523 ;	eliminated unneeded push/pop dph
                                    524 ;	eliminated unneeded push/pop b
                                    525 ;	eliminated unneeded push/pop acc
                                    526 ;------------------------------------------------------------
                                    527 ;Allocation info for local variables in function 'int1'
                                    528 ;------------------------------------------------------------
                                    529 ;	life.c:58: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    530 ;	-----------------------------------------
                                    531 ;	 function int1
                                    532 ;	-----------------------------------------
      00001A                        533 _int1:
      00001A C0 D0            [24]  534 	push	psw
      00001C 75 D0 08         [24]  535 	mov	psw,#0x08
                                    536 ;	life.c:59: i1 = 1;
      00001F 78r11            [12]  537 	mov	r0,#_i1
      000021 76 01            [12]  538 	mov	@r0,#0x01
                                    539 ;	life.c:60: }
      000023 D0 D0            [24]  540 	pop	psw
      000025 32               [24]  541 	reti
                                    542 ;	eliminated unneeded push/pop dpl
                                    543 ;	eliminated unneeded push/pop dph
                                    544 ;	eliminated unneeded push/pop b
                                    545 ;	eliminated unneeded push/pop acc
                                    546 ;------------------------------------------------------------
                                    547 ;Allocation info for local variables in function 'show'
                                    548 ;------------------------------------------------------------
                                    549 ;hdr                       Allocated to registers r7 
                                    550 ;__1966080005              Allocated to registers 
                                    551 ;s                         Allocated to registers r5 r6 r7 
                                    552 ;__1310720001              Allocated to registers r6 r7 
                                    553 ;a                         Allocated to registers 
                                    554 ;__1310720003              Allocated to registers r6 r7 
                                    555 ;a                         Allocated to registers 
                                    556 ;__1966080008              Allocated to registers 
                                    557 ;s                         Allocated to registers r5 r6 r7 
                                    558 ;__2621440011              Allocated to registers 
                                    559 ;s                         Allocated to registers r5 r6 r7 
                                    560 ;------------------------------------------------------------
                                    561 ;	life.c:96: void show(char hdr) {
                                    562 ;	-----------------------------------------
                                    563 ;	 function show
                                    564 ;	-----------------------------------------
      000026                        565 _show:
                           000007   566 	ar7 = 0x07
                           000006   567 	ar6 = 0x06
                           000005   568 	ar5 = 0x05
                           000004   569 	ar4 = 0x04
                           000003   570 	ar3 = 0x03
                           000002   571 	ar2 = 0x02
                           000001   572 	ar1 = 0x01
                           000000   573 	ar0 = 0x00
                                    574 ;	life.c:97: if (hdr) {
      000026 E5 82            [12]  575 	mov	a,dpl
      000028 FF               [12]  576 	mov	r7,a
      000029 70 03            [24]  577 	jnz	00190$
      00002B 02r01r7E         [24]  578 	ljmp	00102$
      00002E                        579 00190$:
                                    580 ;	life.c:98: printstr("\033[2J\033[mGEN ");
      00002E 7Dr00            [12]  581 	mov	r5,#___str_0
      000030 7Es00            [12]  582 	mov	r6,#(___str_0 >> 8)
      000032 7F 80            [12]  583 	mov	r7,#0x80
                                    584 ;	life.c:49: return;
      000034                        585 00121$:
                                    586 ;	life.c:47: for (; *s; s++) putchar(*s);
      000034 8D 82            [24]  587 	mov	dpl,r5
      000036 8E 83            [24]  588 	mov	dph,r6
      000038 8F F0            [24]  589 	mov	b,r7
      00003A 12r00r00         [24]  590 	lcall	__gptrget
      00003D FC               [12]  591 	mov	r4,a
      00003E 60 10            [24]  592 	jz	00109$
      000040 7B 00            [12]  593 	mov	r3,#0x00
      000042 8C 82            [24]  594 	mov	dpl,r4
      000044 8B 83            [24]  595 	mov	dph,r3
      000046 12r00r00         [24]  596 	lcall	_putchar
      000049 0D               [12]  597 	inc	r5
                                    598 ;	life.c:98: printstr("\033[2J\033[mGEN ");
      00004A BD 00 E7         [24]  599 	cjne	r5,#0x00,00121$
      00004D 0E               [12]  600 	inc	r6
      00004E 80 E4            [24]  601 	sjmp	00121$
      000050                        602 00109$:
                                    603 ;	life.c:90: print16x(generation[1]);
      000050 78r24            [12]  604 	mov	r0,#(_generation + 0x0002)
      000052 86 06            [24]  605 	mov	ar6,@r0
      000054 08               [12]  606 	inc	r0
                                    607 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      000055 E6               [12]  608 	mov	a,@r0
      000056 FF               [12]  609 	mov	r7,a
      000057 C4               [12]  610 	swap	a
      000058 54 0F            [12]  611 	anl	a,#0x0f
      00005A 30 E3 02         [24]  612 	jnb	acc.3,00193$
      00005D 44 F0            [12]  613 	orl	a,#0xf0
      00005F                        614 00193$:
      00005F FC               [12]  615 	mov	r4,a
      000060 33               [12]  616 	rlc	a
      000061 95 E0            [12]  617 	subb	a,acc
      000063 53 04 0F         [24]  618 	anl	ar4,#0x0f
      000066 EC               [12]  619 	mov	a,r4
      000067 24r00            [12]  620 	add	a,#_digits
      000069 F9               [12]  621 	mov	r1,a
      00006A 87 05            [24]  622 	mov	ar5,@r1
      00006C 7C 00            [12]  623 	mov	r4,#0x00
      00006E 8D 82            [24]  624 	mov	dpl,r5
      000070 8C 83            [24]  625 	mov	dph,r4
      000072 12r00r00         [24]  626 	lcall	_putchar
                                    627 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      000075 8F 05            [24]  628 	mov	ar5,r7
      000077 53 05 0F         [24]  629 	anl	ar5,#0x0f
      00007A ED               [12]  630 	mov	a,r5
      00007B 24r00            [12]  631 	add	a,#_digits
      00007D F9               [12]  632 	mov	r1,a
      00007E 87 05            [24]  633 	mov	ar5,@r1
      000080 7C 00            [12]  634 	mov	r4,#0x00
      000082 8D 82            [24]  635 	mov	dpl,r5
      000084 8C 83            [24]  636 	mov	dph,r4
      000086 12r00r00         [24]  637 	lcall	_putchar
                                    638 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      000089 8E 04            [24]  639 	mov	ar4,r6
      00008B EF               [12]  640 	mov	a,r7
      00008C C4               [12]  641 	swap	a
      00008D CC               [12]  642 	xch	a,r4
      00008E C4               [12]  643 	swap	a
      00008F 54 0F            [12]  644 	anl	a,#0x0f
      000091 6C               [12]  645 	xrl	a,r4
      000092 CC               [12]  646 	xch	a,r4
      000093 54 0F            [12]  647 	anl	a,#0x0f
      000095 CC               [12]  648 	xch	a,r4
      000096 6C               [12]  649 	xrl	a,r4
      000097 CC               [12]  650 	xch	a,r4
      000098 30 E3 02         [24]  651 	jnb	acc.3,00194$
      00009B 44 F0            [12]  652 	orl	a,#0xf0
      00009D                        653 00194$:
      00009D 53 04 0F         [24]  654 	anl	ar4,#0x0f
      0000A0 EC               [12]  655 	mov	a,r4
      0000A1 24r00            [12]  656 	add	a,#_digits
      0000A3 F9               [12]  657 	mov	r1,a
      0000A4 87 05            [24]  658 	mov	ar5,@r1
      0000A6 7C 00            [12]  659 	mov	r4,#0x00
      0000A8 8D 82            [24]  660 	mov	dpl,r5
      0000AA 8C 83            [24]  661 	mov	dph,r4
      0000AC 12r00r00         [24]  662 	lcall	_putchar
                                    663 ;	life.c:41: putchar(digits[a & 0xf]);
      0000AF 53 06 0F         [24]  664 	anl	ar6,#0x0f
      0000B2 EE               [12]  665 	mov	a,r6
      0000B3 24r00            [12]  666 	add	a,#_digits
      0000B5 F9               [12]  667 	mov	r1,a
      0000B6 87 07            [24]  668 	mov	ar7,@r1
      0000B8 7E 00            [12]  669 	mov	r6,#0x00
      0000BA 8F 82            [24]  670 	mov	dpl,r7
      0000BC 8E 83            [24]  671 	mov	dph,r6
      0000BE 12r00r00         [24]  672 	lcall	_putchar
                                    673 ;	life.c:91: print16x(generation[0]);
      0000C1 78r22            [12]  674 	mov	r0,#_generation
      0000C3 86 06            [24]  675 	mov	ar6,@r0
      0000C5 08               [12]  676 	inc	r0
                                    677 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      0000C6 E6               [12]  678 	mov	a,@r0
      0000C7 FF               [12]  679 	mov	r7,a
      0000C8 C4               [12]  680 	swap	a
      0000C9 54 0F            [12]  681 	anl	a,#0x0f
      0000CB 30 E3 02         [24]  682 	jnb	acc.3,00195$
      0000CE 44 F0            [12]  683 	orl	a,#0xf0
      0000D0                        684 00195$:
      0000D0 FC               [12]  685 	mov	r4,a
      0000D1 33               [12]  686 	rlc	a
      0000D2 95 E0            [12]  687 	subb	a,acc
      0000D4 53 04 0F         [24]  688 	anl	ar4,#0x0f
      0000D7 EC               [12]  689 	mov	a,r4
      0000D8 24r00            [12]  690 	add	a,#_digits
      0000DA F9               [12]  691 	mov	r1,a
      0000DB 87 05            [24]  692 	mov	ar5,@r1
      0000DD 7C 00            [12]  693 	mov	r4,#0x00
      0000DF 8D 82            [24]  694 	mov	dpl,r5
      0000E1 8C 83            [24]  695 	mov	dph,r4
      0000E3 12r00r00         [24]  696 	lcall	_putchar
                                    697 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      0000E6 8F 05            [24]  698 	mov	ar5,r7
      0000E8 53 05 0F         [24]  699 	anl	ar5,#0x0f
      0000EB ED               [12]  700 	mov	a,r5
      0000EC 24r00            [12]  701 	add	a,#_digits
      0000EE F9               [12]  702 	mov	r1,a
      0000EF 87 05            [24]  703 	mov	ar5,@r1
      0000F1 7C 00            [12]  704 	mov	r4,#0x00
      0000F3 8D 82            [24]  705 	mov	dpl,r5
      0000F5 8C 83            [24]  706 	mov	dph,r4
      0000F7 12r00r00         [24]  707 	lcall	_putchar
                                    708 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      0000FA 8E 04            [24]  709 	mov	ar4,r6
      0000FC EF               [12]  710 	mov	a,r7
      0000FD C4               [12]  711 	swap	a
      0000FE CC               [12]  712 	xch	a,r4
      0000FF C4               [12]  713 	swap	a
      000100 54 0F            [12]  714 	anl	a,#0x0f
      000102 6C               [12]  715 	xrl	a,r4
      000103 CC               [12]  716 	xch	a,r4
      000104 54 0F            [12]  717 	anl	a,#0x0f
      000106 CC               [12]  718 	xch	a,r4
      000107 6C               [12]  719 	xrl	a,r4
      000108 CC               [12]  720 	xch	a,r4
      000109 30 E3 02         [24]  721 	jnb	acc.3,00196$
      00010C 44 F0            [12]  722 	orl	a,#0xf0
      00010E                        723 00196$:
      00010E 53 04 0F         [24]  724 	anl	ar4,#0x0f
      000111 EC               [12]  725 	mov	a,r4
      000112 24r00            [12]  726 	add	a,#_digits
      000114 F9               [12]  727 	mov	r1,a
      000115 87 05            [24]  728 	mov	ar5,@r1
      000117 7C 00            [12]  729 	mov	r4,#0x00
      000119 8D 82            [24]  730 	mov	dpl,r5
      00011B 8C 83            [24]  731 	mov	dph,r4
      00011D 12r00r00         [24]  732 	lcall	_putchar
                                    733 ;	life.c:41: putchar(digits[a & 0xf]);
      000120 53 06 0F         [24]  734 	anl	ar6,#0x0f
      000123 EE               [12]  735 	mov	a,r6
      000124 24r00            [12]  736 	add	a,#_digits
      000126 F9               [12]  737 	mov	r1,a
      000127 87 07            [24]  738 	mov	ar7,@r1
      000129 7E 00            [12]  739 	mov	r6,#0x00
      00012B 8F 82            [24]  740 	mov	dpl,r7
      00012D 8E 83            [24]  741 	mov	dph,r6
      00012F 12r00r00         [24]  742 	lcall	_putchar
                                    743 ;	life.c:100: printstr("\r\n");
      000132 7Dr0C            [12]  744 	mov	r5,#___str_1
      000134 7Es00            [12]  745 	mov	r6,#(___str_1 >> 8)
      000136 7F 80            [12]  746 	mov	r7,#0x80
                                    747 ;	life.c:49: return;
      000138                        748 00124$:
                                    749 ;	life.c:47: for (; *s; s++) putchar(*s);
      000138 8D 82            [24]  750 	mov	dpl,r5
      00013A 8E 83            [24]  751 	mov	dph,r6
      00013C 8F F0            [24]  752 	mov	b,r7
      00013E 12r00r00         [24]  753 	lcall	__gptrget
      000141 FC               [12]  754 	mov	r4,a
      000142 60 10            [24]  755 	jz	00114$
      000144 7B 00            [12]  756 	mov	r3,#0x00
      000146 8C 82            [24]  757 	mov	dpl,r4
      000148 8B 83            [24]  758 	mov	dph,r3
      00014A 12r00r00         [24]  759 	lcall	_putchar
      00014D 0D               [12]  760 	inc	r5
                                    761 ;	life.c:100: printstr("\r\n");
      00014E BD 00 E7         [24]  762 	cjne	r5,#0x00,00124$
      000151 0E               [12]  763 	inc	r6
      000152 80 E4            [24]  764 	sjmp	00124$
      000154                        765 00114$:
                                    766 ;	life.c:83: generation[0]++;
      000154 78r22            [12]  767 	mov	r0,#_generation
      000156 86 06            [24]  768 	mov	ar6,@r0
      000158 08               [12]  769 	inc	r0
      000159 86 07            [24]  770 	mov	ar7,@r0
      00015B 0E               [12]  771 	inc	r6
      00015C BE 00 01         [24]  772 	cjne	r6,#0x00,00199$
      00015F 0F               [12]  773 	inc	r7
      000160                        774 00199$:
      000160 78r22            [12]  775 	mov	r0,#_generation
      000162 A6 06            [24]  776 	mov	@r0,ar6
      000164 08               [12]  777 	inc	r0
      000165 A6 07            [24]  778 	mov	@r0,ar7
                                    779 ;	life.c:84: if (!generation[0]) generation[1]++;
      000167 EE               [12]  780 	mov	a,r6
      000168 4F               [12]  781 	orl	a,r7
      000169 70 13            [24]  782 	jnz	00102$
      00016B 78r24            [12]  783 	mov	r0,#(_generation + 0x0002)
      00016D 86 06            [24]  784 	mov	ar6,@r0
      00016F 08               [12]  785 	inc	r0
      000170 86 07            [24]  786 	mov	ar7,@r0
      000172 0E               [12]  787 	inc	r6
      000173 BE 00 01         [24]  788 	cjne	r6,#0x00,00201$
      000176 0F               [12]  789 	inc	r7
      000177                        790 00201$:
      000177 78r24            [12]  791 	mov	r0,#(_generation + 0x0002)
      000179 A6 06            [24]  792 	mov	@r0,ar6
      00017B 08               [12]  793 	inc	r0
      00017C A6 07            [24]  794 	mov	@r0,ar7
                                    795 ;	life.c:101: updategen();
      00017E                        796 00102$:
                                    797 ;	life.c:104: for (x = 0; x < W; x++) {
      00017E 78r12            [12]  798 	mov	r0,#_x
      000180 E4               [12]  799 	clr	a
      000181 F6               [12]  800 	mov	@r0,a
      000182 08               [12]  801 	inc	r0
      000183 F6               [12]  802 	mov	@r0,a
      000184                        803 00131$:
                                    804 ;	life.c:105: for (y = 0; y < H; y++)
      000184 78r14            [12]  805 	mov	r0,#_y
      000186 E4               [12]  806 	clr	a
      000187 F6               [12]  807 	mov	@r0,a
      000188 08               [12]  808 	inc	r0
      000189 F6               [12]  809 	mov	@r0,a
      00018A                        810 00126$:
                                    811 ;	life.c:106: if (u[A2D(W, y, x)]) putchar('1');
      00018A 78r14            [12]  812 	mov	r0,#_y
      00018C E6               [12]  813 	mov	a,@r0
      00018D C0 E0            [24]  814 	push	acc
      00018F 08               [12]  815 	inc	r0
      000190 E6               [12]  816 	mov	a,@r0
      000191 C0 E0            [24]  817 	push	acc
      000193 90 00 30         [24]  818 	mov	dptr,#0x0030
      000196 12r00r00         [24]  819 	lcall	__mulint
      000199 AE 82            [24]  820 	mov	r6,dpl
      00019B AF 83            [24]  821 	mov	r7,dph
      00019D 15 81            [12]  822 	dec	sp
      00019F 15 81            [12]  823 	dec	sp
      0001A1 78r12            [12]  824 	mov	r0,#_x
      0001A3 E6               [12]  825 	mov	a,@r0
      0001A4 2E               [12]  826 	add	a,r6
      0001A5 FE               [12]  827 	mov	r6,a
      0001A6 08               [12]  828 	inc	r0
      0001A7 E6               [12]  829 	mov	a,@r0
      0001A8 3F               [12]  830 	addc	a,r7
      0001A9 FF               [12]  831 	mov	r7,a
      0001AA EE               [12]  832 	mov	a,r6
      0001AB 24r00            [12]  833 	add	a,#_u
      0001AD FE               [12]  834 	mov	r6,a
      0001AE EF               [12]  835 	mov	a,r7
      0001AF 34s24            [12]  836 	addc	a,#(_u >> 8)
      0001B1 FF               [12]  837 	mov	r7,a
      0001B2 8E 82            [24]  838 	mov	dpl,r6
      0001B4 8F 83            [24]  839 	mov	dph,r7
      0001B6 E0               [24]  840 	movx	a,@dptr
      0001B7 60 08            [24]  841 	jz	00104$
      0001B9 90 00 31         [24]  842 	mov	dptr,#0x0031
      0001BC 12r00r00         [24]  843 	lcall	_putchar
      0001BF 80 06            [24]  844 	sjmp	00127$
      0001C1                        845 00104$:
                                    846 ;	life.c:107: else putchar('0');
      0001C1 90 00 30         [24]  847 	mov	dptr,#0x0030
      0001C4 12r00r00         [24]  848 	lcall	_putchar
      0001C7                        849 00127$:
                                    850 ;	life.c:105: for (y = 0; y < H; y++)
      0001C7 78r14            [12]  851 	mov	r0,#_y
      0001C9 06               [12]  852 	inc	@r0
      0001CA B6 00 02         [24]  853 	cjne	@r0,#0x00,00203$
      0001CD 08               [12]  854 	inc	r0
      0001CE 06               [12]  855 	inc	@r0
      0001CF                        856 00203$:
      0001CF 78r14            [12]  857 	mov	r0,#_y
      0001D1 C3               [12]  858 	clr	c
      0001D2 E6               [12]  859 	mov	a,@r0
      0001D3 94 C0            [12]  860 	subb	a,#0xc0
      0001D5 08               [12]  861 	inc	r0
      0001D6 E6               [12]  862 	mov	a,@r0
      0001D7 64 80            [12]  863 	xrl	a,#0x80
      0001D9 94 80            [12]  864 	subb	a,#0x80
      0001DB 40 AD            [24]  865 	jc	00126$
                                    866 ;	life.c:108: printstr("\r\n");
      0001DD 7Dr0C            [12]  867 	mov	r5,#___str_1
      0001DF 7Es00            [12]  868 	mov	r6,#(___str_1 >> 8)
      0001E1 7F 80            [12]  869 	mov	r7,#0x80
                                    870 ;	life.c:49: return;
      0001E3                        871 00129$:
                                    872 ;	life.c:47: for (; *s; s++) putchar(*s);
      0001E3 8D 82            [24]  873 	mov	dpl,r5
      0001E5 8E 83            [24]  874 	mov	dph,r6
      0001E7 8F F0            [24]  875 	mov	b,r7
      0001E9 12r00r00         [24]  876 	lcall	__gptrget
      0001EC FC               [12]  877 	mov	r4,a
      0001ED 60 10            [24]  878 	jz	00119$
      0001EF 7B 00            [12]  879 	mov	r3,#0x00
      0001F1 8C 82            [24]  880 	mov	dpl,r4
      0001F3 8B 83            [24]  881 	mov	dph,r3
      0001F5 12r00r00         [24]  882 	lcall	_putchar
      0001F8 0D               [12]  883 	inc	r5
                                    884 ;	life.c:108: printstr("\r\n");
      0001F9 BD 00 E7         [24]  885 	cjne	r5,#0x00,00129$
      0001FC 0E               [12]  886 	inc	r6
      0001FD 80 E4            [24]  887 	sjmp	00129$
      0001FF                        888 00119$:
                                    889 ;	life.c:104: for (x = 0; x < W; x++) {
      0001FF 78r12            [12]  890 	mov	r0,#_x
      000201 06               [12]  891 	inc	@r0
      000202 B6 00 02         [24]  892 	cjne	@r0,#0x00,00207$
      000205 08               [12]  893 	inc	r0
      000206 06               [12]  894 	inc	@r0
      000207                        895 00207$:
      000207 78r12            [12]  896 	mov	r0,#_x
      000209 C3               [12]  897 	clr	c
      00020A E6               [12]  898 	mov	a,@r0
      00020B 94 30            [12]  899 	subb	a,#0x30
      00020D 08               [12]  900 	inc	r0
      00020E E6               [12]  901 	mov	a,@r0
      00020F 64 80            [12]  902 	xrl	a,#0x80
      000211 94 80            [12]  903 	subb	a,#0x80
      000213 50 03            [24]  904 	jnc	00208$
      000215 02r01r84         [24]  905 	ljmp	00131$
      000218                        906 00208$:
                                    907 ;	life.c:111: return;
                                    908 ;	life.c:112: }
      000218 22               [24]  909 	ret
                                    910 ;------------------------------------------------------------
                                    911 ;Allocation info for local variables in function 'main'
                                    912 ;------------------------------------------------------------
                                    913 ;__2621440019              Allocated to registers 
                                    914 ;s                         Allocated to registers r5 r6 r7 
                                    915 ;__1310720013              Allocated to registers 
                                    916 ;s                         Allocated to registers r5 r6 r7 
                                    917 ;__1310720015              Allocated to registers r6 r7 
                                    918 ;a                         Allocated to registers r4 r5 
                                    919 ;__1310720017              Allocated to registers 
                                    920 ;s                         Allocated to registers r5 r6 r7 
                                    921 ;__2621440023              Allocated to registers 
                                    922 ;s                         Allocated to registers r5 r6 r7 
                                    923 ;__4587520027              Allocated to registers 
                                    924 ;s                         Allocated to registers r5 r6 r7 
                                    925 ;__4587520029              Allocated to registers 
                                    926 ;s                         Allocated to registers r5 r6 r7 
                                    927 ;__4587520031              Allocated to registers 
                                    928 ;s                         Allocated to registers r5 r6 r7 
                                    929 ;__3276800033              Allocated to registers 
                                    930 ;s                         Allocated to registers r5 r6 r7 
                                    931 ;__1310720035              Allocated to registers 
                                    932 ;s                         Allocated to registers r5 r6 r7 
                                    933 ;sloc0                     Allocated to stack - _bp +1
                                    934 ;sloc1                     Allocated to stack - _bp +3
                                    935 ;sloc2                     Allocated to stack - _bp +5
                                    936 ;sloc3                     Allocated to stack - _bp +7
                                    937 ;sloc4                     Allocated to stack - _bp +9
                                    938 ;sloc5                     Allocated to stack - _bp +11
                                    939 ;sloc6                     Allocated to stack - _bp +13
                                    940 ;------------------------------------------------------------
                                    941 ;	life.c:206: void main(void) {
                                    942 ;	-----------------------------------------
                                    943 ;	 function main
                                    944 ;	-----------------------------------------
      000219                        945 _main:
      000219 C0*00            [24]  946 	push	_bp
      00021B E5 81            [12]  947 	mov	a,sp
      00021D F5*00            [12]  948 	mov	_bp,a
      00021F 24 0E            [12]  949 	add	a,#0x0e
      000221 F5 81            [12]  950 	mov	sp,a
                                    951 ;	life.c:207: IT0 = 1;
                                    952 ;	assignBit
      000223 D2 88            [12]  953 	setb	_IT0
                                    954 ;	life.c:208: IT1 = 1;
                                    955 ;	assignBit
      000225 D2 8A            [12]  956 	setb	_IT1
                                    957 ;	life.c:209: EX0 = 1;
                                    958 ;	assignBit
      000227 D2 A8            [12]  959 	setb	_EX0
                                    960 ;	life.c:210: EX1 = 1;
                                    961 ;	assignBit
      000229 D2 AA            [12]  962 	setb	_EX1
                                    963 ;	life.c:211: EA = 1;
                                    964 ;	assignBit
      00022B D2 AF            [12]  965 	setb	_EA
                                    966 ;	life.c:213: for (i0 = 0; !i0; ) {		
      00022D 78r10            [12]  967 	mov	r0,#_i0
      00022F 76 00            [12]  968 	mov	@r0,#0x00
      000231                        969 00220$:
                                    970 ;	life.c:214: printstr("\033[2J\033[mLIFE INIT\r\n");
      000231 7Dr1A            [12]  971 	mov	r5,#___str_4
      000233 7Es00            [12]  972 	mov	r6,#(___str_4 >> 8)
      000235 7F 80            [12]  973 	mov	r7,#0x80
                                    974 ;	life.c:49: return;
      000237                        975 00186$:
                                    976 ;	life.c:47: for (; *s; s++) putchar(*s);
      000237 8D 82            [24]  977 	mov	dpl,r5
      000239 8E 83            [24]  978 	mov	dph,r6
      00023B 8F F0            [24]  979 	mov	b,r7
      00023D 12r00r00         [24]  980 	lcall	__gptrget
      000240 FC               [12]  981 	mov	r4,a
      000241 60 10            [24]  982 	jz	00108$
      000243 7B 00            [12]  983 	mov	r3,#0x00
      000245 8C 82            [24]  984 	mov	dpl,r4
      000247 8B 83            [24]  985 	mov	dph,r3
      000249 12r00r00         [24]  986 	lcall	_putchar
      00024C 0D               [12]  987 	inc	r5
                                    988 ;	life.c:215: while (1) {
      00024D BD 00 E7         [24]  989 	cjne	r5,#0x00,00186$
      000250 0E               [12]  990 	inc	r6
      000251 80 E4            [24]  991 	sjmp	00186$
      000253                        992 00108$:
                                    993 ;	life.c:216: c = toupper(getchar());
      000253 12r00r05         [24]  994 	lcall	_getchar
      000256 12r00r00         [24]  995 	lcall	_toupper
      000259 AE 82            [24]  996 	mov	r6,dpl
      00025B AF 83            [24]  997 	mov	r7,dph
      00025D 78r18            [12]  998 	mov	r0,#_c
      00025F A6 06            [24]  999 	mov	@r0,ar6
      000261 08               [12] 1000 	inc	r0
      000262 A6 07            [24] 1001 	mov	@r0,ar7
                                   1002 ;	life.c:217: if (i0 || (c == (int)'T')) goto terminate;
      000264 78r10            [12] 1003 	mov	r0,#_i0
      000266 E6               [12] 1004 	mov	a,@r0
      000267 60 03            [24] 1005 	jz	00435$
      000269 02r09r97         [24] 1006 	ljmp	00133$
      00026C                       1007 00435$:
      00026C BE 54 06         [24] 1008 	cjne	r6,#0x54,00436$
      00026F BF 00 03         [24] 1009 	cjne	r7,#0x00,00436$
      000272 02r09r97         [24] 1010 	ljmp	00133$
      000275                       1011 00436$:
                                   1012 ;	life.c:218: else if (c == (int)'L') break;
      000275 BE 4C DB         [24] 1013 	cjne	r6,#0x4c,00108$
      000278 BF 00 D8         [24] 1014 	cjne	r7,#0x00,00108$
                                   1015 ;	life.c:221: reload:
      00027B                       1016 00110$:
                                   1017 ;	life.c:115: memset(u, 0, sizeof (u));
      00027B E4               [12] 1018 	clr	a
      00027C C0 E0            [24] 1019 	push	acc
      00027E 74 24            [12] 1020 	mov	a,#0x24
      000280 C0 E0            [24] 1021 	push	acc
      000282 E4               [12] 1022 	clr	a
      000283 C0 E0            [24] 1023 	push	acc
      000285 90r24r00         [24] 1024 	mov	dptr,#_u
      000288 75 F0 00         [24] 1025 	mov	b,#0x00
      00028B 12r00r00         [24] 1026 	lcall	_memset
      00028E 15 81            [12] 1027 	dec	sp
      000290 15 81            [12] 1028 	dec	sp
      000292 15 81            [12] 1029 	dec	sp
                                   1030 ;	life.c:116: memset(pu, 0, sizeof (pu));
      000294 E4               [12] 1031 	clr	a
      000295 C0 E0            [24] 1032 	push	acc
      000297 74 24            [12] 1033 	mov	a,#0x24
      000299 C0 E0            [24] 1034 	push	acc
      00029B E4               [12] 1035 	clr	a
      00029C C0 E0            [24] 1036 	push	acc
      00029E 90r00r00         [24] 1037 	mov	dptr,#_pu
      0002A1 75 F0 00         [24] 1038 	mov	b,#0x00
      0002A4 12r00r00         [24] 1039 	lcall	_memset
      0002A7 15 81            [12] 1040 	dec	sp
      0002A9 15 81            [12] 1041 	dec	sp
      0002AB 15 81            [12] 1042 	dec	sp
                                   1043 ;	life.c:122: j = 0;
      0002AD 78r16            [12] 1044 	mov	r0,#_j
      0002AF E4               [12] 1045 	clr	a
      0002B0 F6               [12] 1046 	mov	@r0,a
      0002B1 08               [12] 1047 	inc	r0
      0002B2 F6               [12] 1048 	mov	@r0,a
                                   1049 ;	life.c:124: printstr("LOAD <");
      0002B3 7Dr0F            [12] 1050 	mov	r5,#___str_2
      0002B5 7Es00            [12] 1051 	mov	r6,#(___str_2 >> 8)
      0002B7 7F 80            [12] 1052 	mov	r7,#0x80
                                   1053 ;	life.c:49: return;
      0002B9                       1054 00189$:
                                   1055 ;	life.c:47: for (; *s; s++) putchar(*s);
      0002B9 8D 82            [24] 1056 	mov	dpl,r5
      0002BB 8E 83            [24] 1057 	mov	dph,r6
      0002BD 8F F0            [24] 1058 	mov	b,r7
      0002BF 12r00r00         [24] 1059 	lcall	__gptrget
      0002C2 FC               [12] 1060 	mov	r4,a
      0002C3 60 10            [24] 1061 	jz	00138$
      0002C5 7B 00            [12] 1062 	mov	r3,#0x00
      0002C7 8C 82            [24] 1063 	mov	dpl,r4
      0002C9 8B 83            [24] 1064 	mov	dph,r3
      0002CB 12r00r00         [24] 1065 	lcall	_putchar
      0002CE 0D               [12] 1066 	inc	r5
                                   1067 ;	life.c:124: printstr("LOAD <");
      0002CF BD 00 E7         [24] 1068 	cjne	r5,#0x00,00189$
      0002D2 0E               [12] 1069 	inc	r6
      0002D3 80 E4            [24] 1070 	sjmp	00189$
      0002D5                       1071 00138$:
                                   1072 ;	life.c:126: for (y = 0; y < (H * W); y += W) {
      0002D5 78r14            [12] 1073 	mov	r0,#_y
      0002D7 E4               [12] 1074 	clr	a
      0002D8 F6               [12] 1075 	mov	@r0,a
      0002D9 08               [12] 1076 	inc	r0
      0002DA F6               [12] 1077 	mov	@r0,a
      0002DB                       1078 00192$:
                                   1079 ;	life.c:127: for (x = 0; x < W; x++) {
      0002DB 78r12            [12] 1080 	mov	r0,#_x
      0002DD E4               [12] 1081 	clr	a
      0002DE F6               [12] 1082 	mov	@r0,a
      0002DF 08               [12] 1083 	inc	r0
      0002E0 F6               [12] 1084 	mov	@r0,a
                                   1085 ;	life.c:128: while (1) {
      0002E1                       1086 00151$:
                                   1087 ;	life.c:129: c = getchar();
      0002E1 12r00r05         [24] 1088 	lcall	_getchar
      0002E4 AE 82            [24] 1089 	mov	r6,dpl
      0002E6 AF 83            [24] 1090 	mov	r7,dph
      0002E8 78r18            [12] 1091 	mov	r0,#_c
      0002EA A6 06            [24] 1092 	mov	@r0,ar6
      0002EC 08               [12] 1093 	inc	r0
      0002ED A6 07            [24] 1094 	mov	@r0,ar7
                                   1095 ;	life.c:130: if (c == (int)'0') {
      0002EF BE 30 25         [24] 1096 	cjne	r6,#0x30,00149$
      0002F2 BF 00 22         [24] 1097 	cjne	r7,#0x00,00149$
                                   1098 ;	life.c:131: u[y + x] = 0;
      0002F5 78r14            [12] 1099 	mov	r0,#_y
      0002F7 79r12            [12] 1100 	mov	r1,#_x
      0002F9 E7               [12] 1101 	mov	a,@r1
      0002FA 26               [12] 1102 	add	a,@r0
      0002FB FC               [12] 1103 	mov	r4,a
      0002FC 09               [12] 1104 	inc	r1
      0002FD E7               [12] 1105 	mov	a,@r1
      0002FE 08               [12] 1106 	inc	r0
      0002FF 36               [12] 1107 	addc	a,@r0
      000300 FD               [12] 1108 	mov	r5,a
      000301 EC               [12] 1109 	mov	a,r4
      000302 24r00            [12] 1110 	add	a,#_u
      000304 F5 82            [12] 1111 	mov	dpl,a
      000306 ED               [12] 1112 	mov	a,r5
      000307 34s24            [12] 1113 	addc	a,#(_u >> 8)
      000309 F5 83            [12] 1114 	mov	dph,a
      00030B E4               [12] 1115 	clr	a
      00030C F0               [24] 1116 	movx	@dptr,a
                                   1117 ;	life.c:132: j++;
      00030D 78r16            [12] 1118 	mov	r0,#_j
      00030F 06               [12] 1119 	inc	@r0
      000310 B6 00 02         [24] 1120 	cjne	@r0,#0x00,00443$
      000313 08               [12] 1121 	inc	r0
      000314 06               [12] 1122 	inc	@r0
      000315                       1123 00443$:
                                   1124 ;	life.c:133: break;
      000315 80 39            [24] 1125 	sjmp	00154$
      000317                       1126 00149$:
                                   1127 ;	life.c:134: } else if (c == (int)'1') {
      000317 BE 31 26         [24] 1128 	cjne	r6,#0x31,00147$
      00031A BF 00 23         [24] 1129 	cjne	r7,#0x00,00147$
                                   1130 ;	life.c:135: u[y + x] = 1;
      00031D 78r14            [12] 1131 	mov	r0,#_y
      00031F 79r12            [12] 1132 	mov	r1,#_x
      000321 E7               [12] 1133 	mov	a,@r1
      000322 26               [12] 1134 	add	a,@r0
      000323 FC               [12] 1135 	mov	r4,a
      000324 09               [12] 1136 	inc	r1
      000325 E7               [12] 1137 	mov	a,@r1
      000326 08               [12] 1138 	inc	r0
      000327 36               [12] 1139 	addc	a,@r0
      000328 FD               [12] 1140 	mov	r5,a
      000329 EC               [12] 1141 	mov	a,r4
      00032A 24r00            [12] 1142 	add	a,#_u
      00032C F5 82            [12] 1143 	mov	dpl,a
      00032E ED               [12] 1144 	mov	a,r5
      00032F 34s24            [12] 1145 	addc	a,#(_u >> 8)
      000331 F5 83            [12] 1146 	mov	dph,a
      000333 74 01            [12] 1147 	mov	a,#0x01
      000335 F0               [24] 1148 	movx	@dptr,a
                                   1149 ;	life.c:136: j++;
      000336 78r16            [12] 1150 	mov	r0,#_j
      000338 06               [12] 1151 	inc	@r0
      000339 B6 00 02         [24] 1152 	cjne	@r0,#0x00,00446$
      00033C 08               [12] 1153 	inc	r0
      00033D 06               [12] 1154 	inc	@r0
      00033E                       1155 00446$:
                                   1156 ;	life.c:137: break;
      00033E 80 10            [24] 1157 	sjmp	00154$
      000340                       1158 00147$:
                                   1159 ;	life.c:138: } else if (c == (int)'~') goto br_inner;
      000340 BE 7E 05         [24] 1160 	cjne	r6,#0x7e,00447$
      000343 BF 00 02         [24] 1161 	cjne	r7,#0x00,00447$
      000346 80 21            [24] 1162 	sjmp	00193$
      000348                       1163 00447$:
                                   1164 ;	life.c:139: else if (c == (int)'#') goto out;
                                   1165 ;	life.c:143: break;
      000348 BE 23 96         [24] 1166 	cjne	r6,#0x23,00151$
      00034B BF 00 93         [24] 1167 	cjne	r7,#0x00,00151$
      00034E 80 31            [24] 1168 	sjmp	00164$
      000350                       1169 00154$:
                                   1170 ;	life.c:127: for (x = 0; x < W; x++) {
      000350 78r12            [12] 1171 	mov	r0,#_x
      000352 06               [12] 1172 	inc	@r0
      000353 B6 00 02         [24] 1173 	cjne	@r0,#0x00,00449$
      000356 08               [12] 1174 	inc	r0
      000357 06               [12] 1175 	inc	@r0
      000358                       1176 00449$:
      000358 78r12            [12] 1177 	mov	r0,#_x
      00035A C3               [12] 1178 	clr	c
      00035B E6               [12] 1179 	mov	a,@r0
      00035C 94 30            [12] 1180 	subb	a,#0x30
      00035E 08               [12] 1181 	inc	r0
      00035F E6               [12] 1182 	mov	a,@r0
      000360 64 80            [12] 1183 	xrl	a,#0x80
      000362 94 80            [12] 1184 	subb	a,#0x80
      000364 50 03            [24] 1185 	jnc	00450$
      000366 02r02rE1         [24] 1186 	ljmp	00151$
      000369                       1187 00450$:
      000369                       1188 00193$:
                                   1189 ;	life.c:126: for (y = 0; y < (H * W); y += W) {
      000369 78r14            [12] 1190 	mov	r0,#_y
      00036B 74 30            [12] 1191 	mov	a,#0x30
      00036D 26               [12] 1192 	add	a,@r0
      00036E F6               [12] 1193 	mov	@r0,a
      00036F E4               [12] 1194 	clr	a
      000370 08               [12] 1195 	inc	r0
      000371 36               [12] 1196 	addc	a,@r0
      000372 F6               [12] 1197 	mov	@r0,a
      000373 78r14            [12] 1198 	mov	r0,#_y
      000375 C3               [12] 1199 	clr	c
      000376 08               [12] 1200 	inc	r0
      000377 E6               [12] 1201 	mov	a,@r0
      000378 64 80            [12] 1202 	xrl	a,#0x80
      00037A 94 A4            [12] 1203 	subb	a,#0xa4
      00037C 50 03            [24] 1204 	jnc	00451$
      00037E 02r02rDB         [24] 1205 	ljmp	00192$
      000381                       1206 00451$:
                                   1207 ;	life.c:147: out:
      000381                       1208 00164$:
                                   1209 ;	life.c:148: if (c != (int)'#')
      000381 BE 23 05         [24] 1210 	cjne	r6,#0x23,00452$
      000384 BF 00 02         [24] 1211 	cjne	r7,#0x00,00452$
      000387 80 14            [24] 1212 	sjmp	00163$
      000389                       1213 00452$:
                                   1214 ;	life.c:149: while (1) {
      000389                       1215 00160$:
                                   1216 ;	life.c:150: c = getchar();
      000389 12r00r05         [24] 1217 	lcall	_getchar
      00038C AE 82            [24] 1218 	mov	r6,dpl
      00038E AF 83            [24] 1219 	mov	r7,dph
      000390 78r18            [12] 1220 	mov	r0,#_c
      000392 A6 06            [24] 1221 	mov	@r0,ar6
      000394 08               [12] 1222 	inc	r0
      000395 A6 07            [24] 1223 	mov	@r0,ar7
                                   1224 ;	life.c:151: if (c == (int)'#') break;
      000397 BE 23 EF         [24] 1225 	cjne	r6,#0x23,00160$
      00039A BF 00 EC         [24] 1226 	cjne	r7,#0x00,00160$
      00039D                       1227 00163$:
                                   1228 ;	life.c:153: print16x(j);
      00039D 78r16            [12] 1229 	mov	r0,#_j
      00039F 86 06            [24] 1230 	mov	ar6,@r0
      0003A1 08               [12] 1231 	inc	r0
      0003A2 86 07            [24] 1232 	mov	ar7,@r0
      0003A4 8E 04            [24] 1233 	mov	ar4,r6
                                   1234 ;	life.c:38: putchar(digits[(a >> 12) & 0xf]);
      0003A6 EF               [12] 1235 	mov	a,r7
      0003A7 FD               [12] 1236 	mov	r5,a
      0003A8 C4               [12] 1237 	swap	a
      0003A9 54 0F            [12] 1238 	anl	a,#0x0f
      0003AB 30 E3 02         [24] 1239 	jnb	acc.3,00455$
      0003AE 44 F0            [12] 1240 	orl	a,#0xf0
      0003B0                       1241 00455$:
      0003B0 FE               [12] 1242 	mov	r6,a
      0003B1 33               [12] 1243 	rlc	a
      0003B2 95 E0            [12] 1244 	subb	a,acc
      0003B4 53 06 0F         [24] 1245 	anl	ar6,#0x0f
      0003B7 EE               [12] 1246 	mov	a,r6
      0003B8 24r00            [12] 1247 	add	a,#_digits
      0003BA F9               [12] 1248 	mov	r1,a
      0003BB 87 07            [24] 1249 	mov	ar7,@r1
      0003BD 7E 00            [12] 1250 	mov	r6,#0x00
      0003BF 8F 82            [24] 1251 	mov	dpl,r7
      0003C1 8E 83            [24] 1252 	mov	dph,r6
      0003C3 12r00r00         [24] 1253 	lcall	_putchar
                                   1254 ;	life.c:39: putchar(digits[(a >> 8) & 0xf]);
      0003C6 8D 07            [24] 1255 	mov	ar7,r5
      0003C8 53 07 0F         [24] 1256 	anl	ar7,#0x0f
      0003CB EF               [12] 1257 	mov	a,r7
      0003CC 24r00            [12] 1258 	add	a,#_digits
      0003CE F9               [12] 1259 	mov	r1,a
      0003CF 87 07            [24] 1260 	mov	ar7,@r1
      0003D1 7E 00            [12] 1261 	mov	r6,#0x00
      0003D3 8F 82            [24] 1262 	mov	dpl,r7
      0003D5 8E 83            [24] 1263 	mov	dph,r6
      0003D7 12r00r00         [24] 1264 	lcall	_putchar
                                   1265 ;	life.c:40: putchar(digits[(a >> 4) & 0xf]);
      0003DA 8C 06            [24] 1266 	mov	ar6,r4
      0003DC ED               [12] 1267 	mov	a,r5
      0003DD C4               [12] 1268 	swap	a
      0003DE CE               [12] 1269 	xch	a,r6
      0003DF C4               [12] 1270 	swap	a
      0003E0 54 0F            [12] 1271 	anl	a,#0x0f
      0003E2 6E               [12] 1272 	xrl	a,r6
      0003E3 CE               [12] 1273 	xch	a,r6
      0003E4 54 0F            [12] 1274 	anl	a,#0x0f
      0003E6 CE               [12] 1275 	xch	a,r6
      0003E7 6E               [12] 1276 	xrl	a,r6
      0003E8 CE               [12] 1277 	xch	a,r6
      0003E9 30 E3 02         [24] 1278 	jnb	acc.3,00456$
      0003EC 44 F0            [12] 1279 	orl	a,#0xf0
      0003EE                       1280 00456$:
      0003EE 53 06 0F         [24] 1281 	anl	ar6,#0x0f
      0003F1 EE               [12] 1282 	mov	a,r6
      0003F2 24r00            [12] 1283 	add	a,#_digits
      0003F4 F9               [12] 1284 	mov	r1,a
      0003F5 87 07            [24] 1285 	mov	ar7,@r1
      0003F7 7E 00            [12] 1286 	mov	r6,#0x00
      0003F9 8F 82            [24] 1287 	mov	dpl,r7
      0003FB 8E 83            [24] 1288 	mov	dph,r6
      0003FD 12r00r00         [24] 1289 	lcall	_putchar
                                   1290 ;	life.c:41: putchar(digits[a & 0xf]);
      000400 53 04 0F         [24] 1291 	anl	ar4,#0x0f
      000403 EC               [12] 1292 	mov	a,r4
      000404 24r00            [12] 1293 	add	a,#_digits
      000406 F9               [12] 1294 	mov	r1,a
      000407 87 07            [24] 1295 	mov	ar7,@r1
      000409 7E 00            [12] 1296 	mov	r6,#0x00
      00040B 8F 82            [24] 1297 	mov	dpl,r7
      00040D 8E 83            [24] 1298 	mov	dph,r6
      00040F 12r00r00         [24] 1299 	lcall	_putchar
                                   1300 ;	life.c:154: printstr(">\r\n");
      000412 7Dr16            [12] 1301 	mov	r5,#___str_3
      000414 7Es00            [12] 1302 	mov	r6,#(___str_3 >> 8)
      000416 7F 80            [12] 1303 	mov	r7,#0x80
                                   1304 ;	life.c:49: return;
      000418                       1305 00195$:
                                   1306 ;	life.c:47: for (; *s; s++) putchar(*s);
      000418 8D 82            [24] 1307 	mov	dpl,r5
      00041A 8E 83            [24] 1308 	mov	dph,r6
      00041C 8F F0            [24] 1309 	mov	b,r7
      00041E 12r00r00         [24] 1310 	lcall	__gptrget
      000421 FC               [12] 1311 	mov	r4,a
      000422 60 10            [24] 1312 	jz	00167$
      000424 7B 00            [12] 1313 	mov	r3,#0x00
      000426 8C 82            [24] 1314 	mov	dpl,r4
      000428 8B 83            [24] 1315 	mov	dph,r3
      00042A 12r00r00         [24] 1316 	lcall	_putchar
      00042D 0D               [12] 1317 	inc	r5
                                   1318 ;	life.c:154: printstr(">\r\n");
      00042E BD 00 E7         [24] 1319 	cjne	r5,#0x00,00195$
      000431 0E               [12] 1320 	inc	r6
      000432 80 E4            [24] 1321 	sjmp	00195$
      000434                       1322 00167$:
                                   1323 ;	life.c:224: show(0);
      000434 75 82 00         [24] 1324 	mov	dpl,#0x00
      000437 12r00r26         [24] 1325 	lcall	_show
                                   1326 ;	life.c:226: printstr("READY\r\n");
      00043A 7Dr2D            [12] 1327 	mov	r5,#___str_5
      00043C 7Es00            [12] 1328 	mov	r6,#(___str_5 >> 8)
      00043E 7F 80            [12] 1329 	mov	r7,#0x80
                                   1330 ;	life.c:49: return;
      000440                       1331 00198$:
                                   1332 ;	life.c:47: for (; *s; s++) putchar(*s);
      000440 8D 82            [24] 1333 	mov	dpl,r5
      000442 8E 83            [24] 1334 	mov	dph,r6
      000444 8F F0            [24] 1335 	mov	b,r7
      000446 12r00r00         [24] 1336 	lcall	__gptrget
      000449 FC               [12] 1337 	mov	r4,a
      00044A 60 10            [24] 1338 	jz	00121$
      00044C 7B 00            [12] 1339 	mov	r3,#0x00
      00044E 8C 82            [24] 1340 	mov	dpl,r4
      000450 8B 83            [24] 1341 	mov	dph,r3
      000452 12r00r00         [24] 1342 	lcall	_putchar
      000455 0D               [12] 1343 	inc	r5
                                   1344 ;	life.c:227: while (1) {
      000456 BD 00 E7         [24] 1345 	cjne	r5,#0x00,00198$
      000459 0E               [12] 1346 	inc	r6
      00045A 80 E4            [24] 1347 	sjmp	00198$
      00045C                       1348 00121$:
                                   1349 ;	life.c:228: c = toupper(getchar());
      00045C 12r00r05         [24] 1350 	lcall	_getchar
      00045F 12r00r00         [24] 1351 	lcall	_toupper
      000462 AE 82            [24] 1352 	mov	r6,dpl
      000464 AF 83            [24] 1353 	mov	r7,dph
      000466 78r18            [12] 1354 	mov	r0,#_c
      000468 A6 06            [24] 1355 	mov	@r0,ar6
      00046A 08               [12] 1356 	inc	r0
      00046B A6 07            [24] 1357 	mov	@r0,ar7
                                   1358 ;	life.c:229: if (i0 || (c == (int)'T')) goto terminate;
      00046D 78r10            [12] 1359 	mov	r0,#_i0
      00046F E6               [12] 1360 	mov	a,@r0
      000470 60 03            [24] 1361 	jz	00461$
      000472 02r09r97         [24] 1362 	ljmp	00133$
      000475                       1363 00461$:
      000475 BE 54 06         [24] 1364 	cjne	r6,#0x54,00462$
      000478 BF 00 03         [24] 1365 	cjne	r7,#0x00,00462$
      00047B 02r09r97         [24] 1366 	ljmp	00133$
      00047E                       1367 00462$:
                                   1368 ;	life.c:230: else if (c == (int)'L') goto reload;
      00047E BE 4C 06         [24] 1369 	cjne	r6,#0x4c,00463$
      000481 BF 00 03         [24] 1370 	cjne	r7,#0x00,00463$
      000484 02r02r7B         [24] 1371 	ljmp	00110$
      000487                       1372 00463$:
                                   1373 ;	life.c:231: else if (c == (int)'S') break;
      000487 BE 53 D2         [24] 1374 	cjne	r6,#0x53,00121$
      00048A BF 00 CF         [24] 1375 	cjne	r7,#0x00,00121$
                                   1376 ;	life.c:76: generation[0] = 0;
      00048D 78r22            [12] 1377 	mov	r0,#_generation
      00048F 76 00            [12] 1378 	mov	@r0,#0x00
      000491 08               [12] 1379 	inc	r0
      000492 76 00            [12] 1380 	mov	@r0,#0x00
                                   1381 ;	life.c:77: generation[1] = 0;
      000494 78r24            [12] 1382 	mov	r0,#(_generation + 0x0002)
      000496 76 00            [12] 1383 	mov	@r0,#0x00
      000498 08               [12] 1384 	inc	r0
      000499 76 00            [12] 1385 	mov	@r0,#0x00
                                   1386 ;	life.c:236: for (i1 = 0; !i0 && !i1; ) {
      00049B 78r11            [12] 1387 	mov	r0,#_i1
      00049D 76 00            [12] 1388 	mov	@r0,#0x00
      00049F                       1389 00215$:
      00049F 78r10            [12] 1390 	mov	r0,#_i0
      0004A1 E6               [12] 1391 	mov	a,@r0
      0004A2 60 03            [24] 1392 	jz	00466$
      0004A4 02r09r65         [24] 1393 	ljmp	00129$
      0004A7                       1394 00466$:
      0004A7 78r11            [12] 1395 	mov	r0,#_i1
      0004A9 E6               [12] 1396 	mov	a,@r0
      0004AA 60 03            [24] 1397 	jz	00467$
      0004AC 02r09r65         [24] 1398 	ljmp	00129$
      0004AF                       1399 00467$:
                                   1400 ;	life.c:237: show(1);
      0004AF 75 82 01         [24] 1401 	mov	dpl,#0x01
      0004B2 12r00r26         [24] 1402 	lcall	_show
                                   1403 ;	life.c:162: fixed = 0;
      0004B5 78r1C            [12] 1404 	mov	r0,#_fixed
      0004B7 76 00            [12] 1405 	mov	@r0,#0x00
                                   1406 ;	life.c:163: cycle2 = 0;
      0004B9 78r1D            [12] 1407 	mov	r0,#_cycle2
      0004BB 76 00            [12] 1408 	mov	@r0,#0x00
                                   1409 ;	life.c:164: bstep = 0;
      0004BD 78r1A            [12] 1410 	mov	r0,#_bstep
      0004BF 76 00            [12] 1411 	mov	@r0,#0x00
                                   1412 ;	life.c:166: for (y = 0; y < H; y++) {
      0004C1 78r14            [12] 1413 	mov	r0,#_y
      0004C3 E4               [12] 1414 	clr	a
      0004C4 F6               [12] 1415 	mov	@r0,a
      0004C5 08               [12] 1416 	inc	r0
      0004C6 F6               [12] 1417 	mov	@r0,a
      0004C7                       1418 00202$:
                                   1419 ;	life.c:167: putchar(busy[bstep]); putchar('\r');
      0004C7 78r1A            [12] 1420 	mov	r0,#_bstep
      0004C9 E6               [12] 1421 	mov	a,@r0
      0004CA 24r26            [12] 1422 	add	a,#_busy
      0004CC F9               [12] 1423 	mov	r1,a
      0004CD 87 07            [24] 1424 	mov	ar7,@r1
      0004CF 7E 00            [12] 1425 	mov	r6,#0x00
      0004D1 8F 82            [24] 1426 	mov	dpl,r7
      0004D3 8E 83            [24] 1427 	mov	dph,r6
      0004D5 12r00r00         [24] 1428 	lcall	_putchar
      0004D8 90 00 0D         [24] 1429 	mov	dptr,#0x000d
      0004DB 12r00r00         [24] 1430 	lcall	_putchar
                                   1431 ;	life.c:168: bstep = (bstep + 1) & 3;
      0004DE 78r1A            [12] 1432 	mov	r0,#_bstep
      0004E0 86 07            [24] 1433 	mov	ar7,@r0
      0004E2 0F               [12] 1434 	inc	r7
      0004E3 78r1A            [12] 1435 	mov	r0,#_bstep
      0004E5 74 03            [12] 1436 	mov	a,#0x03
      0004E7 5F               [12] 1437 	anl	a,r7
      0004E8 F6               [12] 1438 	mov	@r0,a
                                   1439 ;	life.c:169: for (x = 0; x < W; x++) {
      0004E9 78r12            [12] 1440 	mov	r0,#_x
      0004EB E4               [12] 1441 	clr	a
      0004EC F6               [12] 1442 	mov	@r0,a
      0004ED 08               [12] 1443 	inc	r0
      0004EE F6               [12] 1444 	mov	@r0,a
      0004EF                       1445 00200$:
                                   1446 ;	life.c:170: n = -u[A2D(W, y, x)];
      0004EF 78r14            [12] 1447 	mov	r0,#_y
      0004F1 E6               [12] 1448 	mov	a,@r0
      0004F2 C0 E0            [24] 1449 	push	acc
      0004F4 08               [12] 1450 	inc	r0
      0004F5 E6               [12] 1451 	mov	a,@r0
      0004F6 C0 E0            [24] 1452 	push	acc
      0004F8 90 00 30         [24] 1453 	mov	dptr,#0x0030
      0004FB 12r00r00         [24] 1454 	lcall	__mulint
      0004FE A8*00            [24] 1455 	mov	r0,_bp
      000500 08               [12] 1456 	inc	r0
      000501 08               [12] 1457 	inc	r0
      000502 08               [12] 1458 	inc	r0
      000503 A6 82            [24] 1459 	mov	@r0,dpl
      000505 08               [12] 1460 	inc	r0
      000506 A6 83            [24] 1461 	mov	@r0,dph
      000508 15 81            [12] 1462 	dec	sp
      00050A 15 81            [12] 1463 	dec	sp
      00050C E5*00            [12] 1464 	mov	a,_bp
      00050E 24 03            [12] 1465 	add	a,#0x03
      000510 F8               [12] 1466 	mov	r0,a
      000511 79r12            [12] 1467 	mov	r1,#_x
      000513 E7               [12] 1468 	mov	a,@r1
      000514 26               [12] 1469 	add	a,@r0
      000515 C0 E0            [24] 1470 	push	acc
      000517 09               [12] 1471 	inc	r1
      000518 E7               [12] 1472 	mov	a,@r1
      000519 08               [12] 1473 	inc	r0
      00051A 36               [12] 1474 	addc	a,@r0
      00051B C0 E0            [24] 1475 	push	acc
      00051D A8*00            [24] 1476 	mov	r0,_bp
      00051F 08               [12] 1477 	inc	r0
      000520 08               [12] 1478 	inc	r0
      000521 D0 E0            [24] 1479 	pop	acc
      000523 F6               [12] 1480 	mov	@r0,a
      000524 18               [12] 1481 	dec	r0
      000525 D0 E0            [24] 1482 	pop	acc
      000527 F6               [12] 1483 	mov	@r0,a
      000528 A8*00            [24] 1484 	mov	r0,_bp
      00052A 08               [12] 1485 	inc	r0
      00052B E6               [12] 1486 	mov	a,@r0
      00052C 24r00            [12] 1487 	add	a,#_u
      00052E F5 82            [12] 1488 	mov	dpl,a
      000530 08               [12] 1489 	inc	r0
      000531 E6               [12] 1490 	mov	a,@r0
      000532 34s24            [12] 1491 	addc	a,#(_u >> 8)
      000534 F5 83            [12] 1492 	mov	dph,a
      000536 E0               [24] 1493 	movx	a,@dptr
      000537 FB               [12] 1494 	mov	r3,a
      000538 C3               [12] 1495 	clr	c
      000539 E4               [12] 1496 	clr	a
      00053A 9B               [12] 1497 	subb	a,r3
      00053B FB               [12] 1498 	mov	r3,a
                                   1499 ;	life.c:173: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00053C 78r14            [12] 1500 	mov	r0,#_y
      00053E 74 FF            [12] 1501 	mov	a,#0xff
      000540 26               [12] 1502 	add	a,@r0
      000541 FA               [12] 1503 	mov	r2,a
      000542 74 FF            [12] 1504 	mov	a,#0xff
      000544 08               [12] 1505 	inc	r0
      000545 36               [12] 1506 	addc	a,@r0
      000546 FD               [12] 1507 	mov	r5,a
      000547 74 C0            [12] 1508 	mov	a,#0xc0
      000549 2A               [12] 1509 	add	a,r2
      00054A FA               [12] 1510 	mov	r2,a
      00054B E4               [12] 1511 	clr	a
      00054C 3D               [12] 1512 	addc	a,r5
      00054D FD               [12] 1513 	mov	r5,a
      00054E C0 03            [24] 1514 	push	ar3
      000550 74 C0            [12] 1515 	mov	a,#0xc0
      000552 C0 E0            [24] 1516 	push	acc
      000554 E4               [12] 1517 	clr	a
      000555 C0 E0            [24] 1518 	push	acc
      000557 8A 82            [24] 1519 	mov	dpl,r2
      000559 8D 83            [24] 1520 	mov	dph,r5
      00055B 12r00r00         [24] 1521 	lcall	__modsint
      00055E AC 82            [24] 1522 	mov	r4,dpl
      000560 AD 83            [24] 1523 	mov	r5,dph
      000562 15 81            [12] 1524 	dec	sp
      000564 15 81            [12] 1525 	dec	sp
      000566 C0 04            [24] 1526 	push	ar4
      000568 C0 05            [24] 1527 	push	ar5
      00056A 90 00 30         [24] 1528 	mov	dptr,#0x0030
      00056D 12r00r00         [24] 1529 	lcall	__mulint
      000570 AC 82            [24] 1530 	mov	r4,dpl
      000572 AD 83            [24] 1531 	mov	r5,dph
      000574 15 81            [12] 1532 	dec	sp
      000576 15 81            [12] 1533 	dec	sp
      000578 D0 03            [24] 1534 	pop	ar3
      00057A 78r12            [12] 1535 	mov	r0,#_x
      00057C 74 FF            [12] 1536 	mov	a,#0xff
      00057E 26               [12] 1537 	add	a,@r0
      00057F FA               [12] 1538 	mov	r2,a
      000580 74 FF            [12] 1539 	mov	a,#0xff
      000582 08               [12] 1540 	inc	r0
      000583 36               [12] 1541 	addc	a,@r0
      000584 FF               [12] 1542 	mov	r7,a
      000585 74 30            [12] 1543 	mov	a,#0x30
      000587 2A               [12] 1544 	add	a,r2
      000588 FA               [12] 1545 	mov	r2,a
      000589 E4               [12] 1546 	clr	a
      00058A 3F               [12] 1547 	addc	a,r7
      00058B FF               [12] 1548 	mov	r7,a
      00058C C0 05            [24] 1549 	push	ar5
      00058E C0 04            [24] 1550 	push	ar4
      000590 C0 03            [24] 1551 	push	ar3
      000592 74 30            [12] 1552 	mov	a,#0x30
      000594 C0 E0            [24] 1553 	push	acc
      000596 E4               [12] 1554 	clr	a
      000597 C0 E0            [24] 1555 	push	acc
      000599 8A 82            [24] 1556 	mov	dpl,r2
      00059B 8F 83            [24] 1557 	mov	dph,r7
      00059D 12r00r00         [24] 1558 	lcall	__modsint
      0005A0 C8               [12] 1559 	xch	a,r0
      0005A1 E5*00            [12] 1560 	mov	a,_bp
      0005A3 24 05            [12] 1561 	add	a,#0x05
      0005A5 C8               [12] 1562 	xch	a,r0
      0005A6 A6 82            [24] 1563 	mov	@r0,dpl
      0005A8 08               [12] 1564 	inc	r0
      0005A9 A6 83            [24] 1565 	mov	@r0,dph
      0005AB 15 81            [12] 1566 	dec	sp
      0005AD 15 81            [12] 1567 	dec	sp
      0005AF D0 03            [24] 1568 	pop	ar3
      0005B1 D0 04            [24] 1569 	pop	ar4
      0005B3 D0 05            [24] 1570 	pop	ar5
      0005B5 E5*00            [12] 1571 	mov	a,_bp
      0005B7 24 05            [12] 1572 	add	a,#0x05
      0005B9 F8               [12] 1573 	mov	r0,a
      0005BA E6               [12] 1574 	mov	a,@r0
      0005BB 2C               [12] 1575 	add	a,r4
      0005BC FA               [12] 1576 	mov	r2,a
      0005BD 08               [12] 1577 	inc	r0
      0005BE E6               [12] 1578 	mov	a,@r0
      0005BF 3D               [12] 1579 	addc	a,r5
      0005C0 FF               [12] 1580 	mov	r7,a
      0005C1 EA               [12] 1581 	mov	a,r2
      0005C2 24r00            [12] 1582 	add	a,#_u
      0005C4 F5 82            [12] 1583 	mov	dpl,a
      0005C6 EF               [12] 1584 	mov	a,r7
      0005C7 34s24            [12] 1585 	addc	a,#(_u >> 8)
      0005C9 F5 83            [12] 1586 	mov	dph,a
      0005CB E0               [24] 1587 	movx	a,@dptr
      0005CC 2B               [12] 1588 	add	a,r3
      0005CD FB               [12] 1589 	mov	r3,a
                                   1590 ;	life.c:175: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0005CE 78r12            [12] 1591 	mov	r0,#_x
      0005D0 E5*00            [12] 1592 	mov	a,_bp
      0005D2 24 07            [12] 1593 	add	a,#0x07
      0005D4 F9               [12] 1594 	mov	r1,a
      0005D5 E6               [12] 1595 	mov	a,@r0
      0005D6 F7               [12] 1596 	mov	@r1,a
      0005D7 08               [12] 1597 	inc	r0
      0005D8 09               [12] 1598 	inc	r1
      0005D9 E6               [12] 1599 	mov	a,@r0
      0005DA F7               [12] 1600 	mov	@r1,a
      0005DB E5*00            [12] 1601 	mov	a,_bp
      0005DD 24 07            [12] 1602 	add	a,#0x07
      0005DF F8               [12] 1603 	mov	r0,a
      0005E0 74 30            [12] 1604 	mov	a,#0x30
      0005E2 26               [12] 1605 	add	a,@r0
      0005E3 FA               [12] 1606 	mov	r2,a
      0005E4 E4               [12] 1607 	clr	a
      0005E5 08               [12] 1608 	inc	r0
      0005E6 36               [12] 1609 	addc	a,@r0
      0005E7 FF               [12] 1610 	mov	r7,a
      0005E8 C0 05            [24] 1611 	push	ar5
      0005EA C0 04            [24] 1612 	push	ar4
      0005EC C0 03            [24] 1613 	push	ar3
      0005EE 74 30            [12] 1614 	mov	a,#0x30
      0005F0 C0 E0            [24] 1615 	push	acc
      0005F2 E4               [12] 1616 	clr	a
      0005F3 C0 E0            [24] 1617 	push	acc
      0005F5 8A 82            [24] 1618 	mov	dpl,r2
      0005F7 8F 83            [24] 1619 	mov	dph,r7
      0005F9 12r00r00         [24] 1620 	lcall	__modsint
      0005FC C8               [12] 1621 	xch	a,r0
      0005FD E5*00            [12] 1622 	mov	a,_bp
      0005FF 24 09            [12] 1623 	add	a,#0x09
      000601 C8               [12] 1624 	xch	a,r0
      000602 A6 82            [24] 1625 	mov	@r0,dpl
      000604 08               [12] 1626 	inc	r0
      000605 A6 83            [24] 1627 	mov	@r0,dph
      000607 15 81            [12] 1628 	dec	sp
      000609 15 81            [12] 1629 	dec	sp
      00060B D0 03            [24] 1630 	pop	ar3
      00060D D0 04            [24] 1631 	pop	ar4
      00060F D0 05            [24] 1632 	pop	ar5
      000611 E5*00            [12] 1633 	mov	a,_bp
      000613 24 09            [12] 1634 	add	a,#0x09
      000615 F8               [12] 1635 	mov	r0,a
      000616 E6               [12] 1636 	mov	a,@r0
      000617 2C               [12] 1637 	add	a,r4
      000618 FA               [12] 1638 	mov	r2,a
      000619 08               [12] 1639 	inc	r0
      00061A E6               [12] 1640 	mov	a,@r0
      00061B 3D               [12] 1641 	addc	a,r5
      00061C FF               [12] 1642 	mov	r7,a
      00061D EA               [12] 1643 	mov	a,r2
      00061E 24r00            [12] 1644 	add	a,#_u
      000620 F5 82            [12] 1645 	mov	dpl,a
      000622 EF               [12] 1646 	mov	a,r7
      000623 34s24            [12] 1647 	addc	a,#(_u >> 8)
      000625 F5 83            [12] 1648 	mov	dph,a
      000627 E0               [24] 1649 	movx	a,@dptr
      000628 2B               [12] 1650 	add	a,r3
      000629 FB               [12] 1651 	mov	r3,a
                                   1652 ;	life.c:177: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00062A E5*00            [12] 1653 	mov	a,_bp
      00062C 24 07            [12] 1654 	add	a,#0x07
      00062E F8               [12] 1655 	mov	r0,a
      00062F 74 31            [12] 1656 	mov	a,#0x31
      000631 26               [12] 1657 	add	a,@r0
      000632 FE               [12] 1658 	mov	r6,a
      000633 E4               [12] 1659 	clr	a
      000634 08               [12] 1660 	inc	r0
      000635 36               [12] 1661 	addc	a,@r0
      000636 FF               [12] 1662 	mov	r7,a
      000637 C0 05            [24] 1663 	push	ar5
      000639 C0 04            [24] 1664 	push	ar4
      00063B C0 03            [24] 1665 	push	ar3
      00063D 74 30            [12] 1666 	mov	a,#0x30
      00063F C0 E0            [24] 1667 	push	acc
      000641 E4               [12] 1668 	clr	a
      000642 C0 E0            [24] 1669 	push	acc
      000644 8E 82            [24] 1670 	mov	dpl,r6
      000646 8F 83            [24] 1671 	mov	dph,r7
      000648 12r00r00         [24] 1672 	lcall	__modsint
      00064B AE 82            [24] 1673 	mov	r6,dpl
      00064D AF 83            [24] 1674 	mov	r7,dph
      00064F 15 81            [12] 1675 	dec	sp
      000651 15 81            [12] 1676 	dec	sp
      000653 D0 03            [24] 1677 	pop	ar3
      000655 D0 04            [24] 1678 	pop	ar4
      000657 D0 05            [24] 1679 	pop	ar5
      000659 EE               [12] 1680 	mov	a,r6
      00065A 2C               [12] 1681 	add	a,r4
      00065B FC               [12] 1682 	mov	r4,a
      00065C EF               [12] 1683 	mov	a,r7
      00065D 3D               [12] 1684 	addc	a,r5
      00065E FD               [12] 1685 	mov	r5,a
      00065F EC               [12] 1686 	mov	a,r4
      000660 24r00            [12] 1687 	add	a,#_u
      000662 F5 82            [12] 1688 	mov	dpl,a
      000664 ED               [12] 1689 	mov	a,r5
      000665 34s24            [12] 1690 	addc	a,#(_u >> 8)
      000667 F5 83            [12] 1691 	mov	dph,a
      000669 E0               [24] 1692 	movx	a,@dptr
      00066A 2B               [12] 1693 	add	a,r3
      00066B FB               [12] 1694 	mov	r3,a
                                   1695 ;	life.c:179: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00066C 78r14            [12] 1696 	mov	r0,#_y
      00066E E5*00            [12] 1697 	mov	a,_bp
      000670 24 0B            [12] 1698 	add	a,#0x0b
      000672 F9               [12] 1699 	mov	r1,a
      000673 E6               [12] 1700 	mov	a,@r0
      000674 F7               [12] 1701 	mov	@r1,a
      000675 08               [12] 1702 	inc	r0
      000676 09               [12] 1703 	inc	r1
      000677 E6               [12] 1704 	mov	a,@r0
      000678 F7               [12] 1705 	mov	@r1,a
      000679 E5*00            [12] 1706 	mov	a,_bp
      00067B 24 0B            [12] 1707 	add	a,#0x0b
      00067D F8               [12] 1708 	mov	r0,a
      00067E 74 C0            [12] 1709 	mov	a,#0xc0
      000680 26               [12] 1710 	add	a,@r0
      000681 FA               [12] 1711 	mov	r2,a
      000682 E4               [12] 1712 	clr	a
      000683 08               [12] 1713 	inc	r0
      000684 36               [12] 1714 	addc	a,@r0
      000685 FD               [12] 1715 	mov	r5,a
      000686 C0 07            [24] 1716 	push	ar7
      000688 C0 06            [24] 1717 	push	ar6
      00068A C0 03            [24] 1718 	push	ar3
      00068C 74 C0            [12] 1719 	mov	a,#0xc0
      00068E C0 E0            [24] 1720 	push	acc
      000690 E4               [12] 1721 	clr	a
      000691 C0 E0            [24] 1722 	push	acc
      000693 8A 82            [24] 1723 	mov	dpl,r2
      000695 8D 83            [24] 1724 	mov	dph,r5
      000697 12r00r00         [24] 1725 	lcall	__modsint
      00069A AC 82            [24] 1726 	mov	r4,dpl
      00069C AD 83            [24] 1727 	mov	r5,dph
      00069E 15 81            [12] 1728 	dec	sp
      0006A0 15 81            [12] 1729 	dec	sp
      0006A2 C0 04            [24] 1730 	push	ar4
      0006A4 C0 05            [24] 1731 	push	ar5
      0006A6 90 00 30         [24] 1732 	mov	dptr,#0x0030
      0006A9 12r00r00         [24] 1733 	lcall	__mulint
      0006AC C8               [12] 1734 	xch	a,r0
      0006AD E5*00            [12] 1735 	mov	a,_bp
      0006AF 24 0D            [12] 1736 	add	a,#0x0d
      0006B1 C8               [12] 1737 	xch	a,r0
      0006B2 A6 82            [24] 1738 	mov	@r0,dpl
      0006B4 08               [12] 1739 	inc	r0
      0006B5 A6 83            [24] 1740 	mov	@r0,dph
      0006B7 15 81            [12] 1741 	dec	sp
      0006B9 15 81            [12] 1742 	dec	sp
      0006BB D0 03            [24] 1743 	pop	ar3
      0006BD D0 06            [24] 1744 	pop	ar6
      0006BF D0 07            [24] 1745 	pop	ar7
      0006C1 E5*00            [12] 1746 	mov	a,_bp
      0006C3 24 0D            [12] 1747 	add	a,#0x0d
      0006C5 F8               [12] 1748 	mov	r0,a
      0006C6 E5*00            [12] 1749 	mov	a,_bp
      0006C8 24 05            [12] 1750 	add	a,#0x05
      0006CA F9               [12] 1751 	mov	r1,a
      0006CB E7               [12] 1752 	mov	a,@r1
      0006CC 26               [12] 1753 	add	a,@r0
      0006CD FA               [12] 1754 	mov	r2,a
      0006CE 09               [12] 1755 	inc	r1
      0006CF E7               [12] 1756 	mov	a,@r1
      0006D0 08               [12] 1757 	inc	r0
      0006D1 36               [12] 1758 	addc	a,@r0
      0006D2 FD               [12] 1759 	mov	r5,a
      0006D3 EA               [12] 1760 	mov	a,r2
      0006D4 24r00            [12] 1761 	add	a,#_u
      0006D6 F5 82            [12] 1762 	mov	dpl,a
      0006D8 ED               [12] 1763 	mov	a,r5
      0006D9 34s24            [12] 1764 	addc	a,#(_u >> 8)
      0006DB F5 83            [12] 1765 	mov	dph,a
      0006DD E0               [24] 1766 	movx	a,@dptr
      0006DE 2B               [12] 1767 	add	a,r3
      0006DF FB               [12] 1768 	mov	r3,a
                                   1769 ;	life.c:181: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006E0 E5*00            [12] 1770 	mov	a,_bp
      0006E2 24 0D            [12] 1771 	add	a,#0x0d
      0006E4 F8               [12] 1772 	mov	r0,a
      0006E5 E5*00            [12] 1773 	mov	a,_bp
      0006E7 24 09            [12] 1774 	add	a,#0x09
      0006E9 F9               [12] 1775 	mov	r1,a
      0006EA E7               [12] 1776 	mov	a,@r1
      0006EB 26               [12] 1777 	add	a,@r0
      0006EC FC               [12] 1778 	mov	r4,a
      0006ED 09               [12] 1779 	inc	r1
      0006EE E7               [12] 1780 	mov	a,@r1
      0006EF 08               [12] 1781 	inc	r0
      0006F0 36               [12] 1782 	addc	a,@r0
      0006F1 FD               [12] 1783 	mov	r5,a
      0006F2 EC               [12] 1784 	mov	a,r4
      0006F3 24r00            [12] 1785 	add	a,#_u
      0006F5 F5 82            [12] 1786 	mov	dpl,a
      0006F7 ED               [12] 1787 	mov	a,r5
      0006F8 34s24            [12] 1788 	addc	a,#(_u >> 8)
      0006FA F5 83            [12] 1789 	mov	dph,a
      0006FC E0               [24] 1790 	movx	a,@dptr
      0006FD 2B               [12] 1791 	add	a,r3
      0006FE FB               [12] 1792 	mov	r3,a
                                   1793 ;	life.c:183: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006FF E5*00            [12] 1794 	mov	a,_bp
      000701 24 0D            [12] 1795 	add	a,#0x0d
      000703 F8               [12] 1796 	mov	r0,a
      000704 EE               [12] 1797 	mov	a,r6
      000705 26               [12] 1798 	add	a,@r0
      000706 FC               [12] 1799 	mov	r4,a
      000707 EF               [12] 1800 	mov	a,r7
      000708 08               [12] 1801 	inc	r0
      000709 36               [12] 1802 	addc	a,@r0
      00070A FD               [12] 1803 	mov	r5,a
      00070B EC               [12] 1804 	mov	a,r4
      00070C 24r00            [12] 1805 	add	a,#_u
      00070E F5 82            [12] 1806 	mov	dpl,a
      000710 ED               [12] 1807 	mov	a,r5
      000711 34s24            [12] 1808 	addc	a,#(_u >> 8)
      000713 F5 83            [12] 1809 	mov	dph,a
      000715 E0               [24] 1810 	movx	a,@dptr
      000716 2B               [12] 1811 	add	a,r3
      000717 FB               [12] 1812 	mov	r3,a
                                   1813 ;	life.c:185: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000718 E5*00            [12] 1814 	mov	a,_bp
      00071A 24 0B            [12] 1815 	add	a,#0x0b
      00071C F8               [12] 1816 	mov	r0,a
      00071D 74 C1            [12] 1817 	mov	a,#0xc1
      00071F 26               [12] 1818 	add	a,@r0
      000720 FC               [12] 1819 	mov	r4,a
      000721 E4               [12] 1820 	clr	a
      000722 08               [12] 1821 	inc	r0
      000723 36               [12] 1822 	addc	a,@r0
      000724 FD               [12] 1823 	mov	r5,a
      000725 C0 07            [24] 1824 	push	ar7
      000727 C0 06            [24] 1825 	push	ar6
      000729 C0 03            [24] 1826 	push	ar3
      00072B 74 C0            [12] 1827 	mov	a,#0xc0
      00072D C0 E0            [24] 1828 	push	acc
      00072F E4               [12] 1829 	clr	a
      000730 C0 E0            [24] 1830 	push	acc
      000732 8C 82            [24] 1831 	mov	dpl,r4
      000734 8D 83            [24] 1832 	mov	dph,r5
      000736 12r00r00         [24] 1833 	lcall	__modsint
      000739 AC 82            [24] 1834 	mov	r4,dpl
      00073B AD 83            [24] 1835 	mov	r5,dph
      00073D 15 81            [12] 1836 	dec	sp
      00073F 15 81            [12] 1837 	dec	sp
      000741 C0 04            [24] 1838 	push	ar4
      000743 C0 05            [24] 1839 	push	ar5
      000745 90 00 30         [24] 1840 	mov	dptr,#0x0030
      000748 12r00r00         [24] 1841 	lcall	__mulint
      00074B C8               [12] 1842 	xch	a,r0
      00074C E5*00            [12] 1843 	mov	a,_bp
      00074E 24 0D            [12] 1844 	add	a,#0x0d
      000750 C8               [12] 1845 	xch	a,r0
      000751 A6 82            [24] 1846 	mov	@r0,dpl
      000753 08               [12] 1847 	inc	r0
      000754 A6 83            [24] 1848 	mov	@r0,dph
      000756 15 81            [12] 1849 	dec	sp
      000758 15 81            [12] 1850 	dec	sp
      00075A D0 03            [24] 1851 	pop	ar3
      00075C D0 06            [24] 1852 	pop	ar6
      00075E D0 07            [24] 1853 	pop	ar7
      000760 E5*00            [12] 1854 	mov	a,_bp
      000762 24 0D            [12] 1855 	add	a,#0x0d
      000764 F8               [12] 1856 	mov	r0,a
      000765 E5*00            [12] 1857 	mov	a,_bp
      000767 24 05            [12] 1858 	add	a,#0x05
      000769 F9               [12] 1859 	mov	r1,a
      00076A E7               [12] 1860 	mov	a,@r1
      00076B 26               [12] 1861 	add	a,@r0
      00076C FA               [12] 1862 	mov	r2,a
      00076D 09               [12] 1863 	inc	r1
      00076E E7               [12] 1864 	mov	a,@r1
      00076F 08               [12] 1865 	inc	r0
      000770 36               [12] 1866 	addc	a,@r0
      000771 FD               [12] 1867 	mov	r5,a
      000772 EA               [12] 1868 	mov	a,r2
      000773 24r00            [12] 1869 	add	a,#_u
      000775 F5 82            [12] 1870 	mov	dpl,a
      000777 ED               [12] 1871 	mov	a,r5
      000778 34s24            [12] 1872 	addc	a,#(_u >> 8)
      00077A F5 83            [12] 1873 	mov	dph,a
      00077C E0               [24] 1874 	movx	a,@dptr
      00077D 2B               [12] 1875 	add	a,r3
      00077E FB               [12] 1876 	mov	r3,a
                                   1877 ;	life.c:187: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00077F E5*00            [12] 1878 	mov	a,_bp
      000781 24 0D            [12] 1879 	add	a,#0x0d
      000783 F8               [12] 1880 	mov	r0,a
      000784 E5*00            [12] 1881 	mov	a,_bp
      000786 24 09            [12] 1882 	add	a,#0x09
      000788 F9               [12] 1883 	mov	r1,a
      000789 E7               [12] 1884 	mov	a,@r1
      00078A 26               [12] 1885 	add	a,@r0
      00078B FC               [12] 1886 	mov	r4,a
      00078C 09               [12] 1887 	inc	r1
      00078D E7               [12] 1888 	mov	a,@r1
      00078E 08               [12] 1889 	inc	r0
      00078F 36               [12] 1890 	addc	a,@r0
      000790 FD               [12] 1891 	mov	r5,a
      000791 EC               [12] 1892 	mov	a,r4
      000792 24r00            [12] 1893 	add	a,#_u
      000794 F5 82            [12] 1894 	mov	dpl,a
      000796 ED               [12] 1895 	mov	a,r5
      000797 34s24            [12] 1896 	addc	a,#(_u >> 8)
      000799 F5 83            [12] 1897 	mov	dph,a
      00079B E0               [24] 1898 	movx	a,@dptr
      00079C 2B               [12] 1899 	add	a,r3
      00079D FB               [12] 1900 	mov	r3,a
                                   1901 ;	life.c:188: y1 = 1; x1 = 1;
      00079E 78r20            [12] 1902 	mov	r0,#_y1
      0007A0 76 01            [12] 1903 	mov	@r0,#0x01
      0007A2 08               [12] 1904 	inc	r0
      0007A3 76 00            [12] 1905 	mov	@r0,#0x00
      0007A5 78r1E            [12] 1906 	mov	r0,#_x1
      0007A7 76 01            [12] 1907 	mov	@r0,#0x01
      0007A9 08               [12] 1908 	inc	r0
      0007AA 76 00            [12] 1909 	mov	@r0,#0x00
                                   1910 ;	life.c:189: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007AC E5*00            [12] 1911 	mov	a,_bp
      0007AE 24 0D            [12] 1912 	add	a,#0x0d
      0007B0 F8               [12] 1913 	mov	r0,a
      0007B1 EE               [12] 1914 	mov	a,r6
      0007B2 26               [12] 1915 	add	a,@r0
      0007B3 FE               [12] 1916 	mov	r6,a
      0007B4 EF               [12] 1917 	mov	a,r7
      0007B5 08               [12] 1918 	inc	r0
      0007B6 36               [12] 1919 	addc	a,@r0
      0007B7 FF               [12] 1920 	mov	r7,a
      0007B8 EE               [12] 1921 	mov	a,r6
      0007B9 24r00            [12] 1922 	add	a,#_u
      0007BB F5 82            [12] 1923 	mov	dpl,a
      0007BD EF               [12] 1924 	mov	a,r7
      0007BE 34s24            [12] 1925 	addc	a,#(_u >> 8)
      0007C0 F5 83            [12] 1926 	mov	dph,a
      0007C2 E0               [24] 1927 	movx	a,@dptr
      0007C3 2B               [12] 1928 	add	a,r3
      0007C4 FF               [12] 1929 	mov	r7,a
      0007C5 78r1B            [12] 1930 	mov	r0,#_n
      0007C7 A6 07            [24] 1931 	mov	@r0,ar7
                                   1932 ;	life.c:191: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0007C9 A8*00            [24] 1933 	mov	r0,_bp
      0007CB 08               [12] 1934 	inc	r0
      0007CC E6               [12] 1935 	mov	a,@r0
      0007CD 24r00            [12] 1936 	add	a,#_nu
      0007CF FD               [12] 1937 	mov	r5,a
      0007D0 08               [12] 1938 	inc	r0
      0007D1 E6               [12] 1939 	mov	a,@r0
      0007D2 34s48            [12] 1940 	addc	a,#(_nu >> 8)
      0007D4 FE               [12] 1941 	mov	r6,a
      0007D5 BF 03 02         [24] 1942 	cjne	r7,#0x03,00468$
      0007D8 80 28            [24] 1943 	sjmp	00228$
      0007DA                       1944 00468$:
      0007DA BF 02 21         [24] 1945 	cjne	r7,#0x02,00227$
      0007DD E5*00            [12] 1946 	mov	a,_bp
      0007DF 24 03            [12] 1947 	add	a,#0x03
      0007E1 F8               [12] 1948 	mov	r0,a
      0007E2 E5*00            [12] 1949 	mov	a,_bp
      0007E4 24 07            [12] 1950 	add	a,#0x07
      0007E6 F9               [12] 1951 	mov	r1,a
      0007E7 E7               [12] 1952 	mov	a,@r1
      0007E8 26               [12] 1953 	add	a,@r0
      0007E9 FC               [12] 1954 	mov	r4,a
      0007EA 09               [12] 1955 	inc	r1
      0007EB E7               [12] 1956 	mov	a,@r1
      0007EC 08               [12] 1957 	inc	r0
      0007ED 36               [12] 1958 	addc	a,@r0
      0007EE FF               [12] 1959 	mov	r7,a
      0007EF EC               [12] 1960 	mov	a,r4
      0007F0 24r00            [12] 1961 	add	a,#_u
      0007F2 FC               [12] 1962 	mov	r4,a
      0007F3 EF               [12] 1963 	mov	a,r7
      0007F4 34s24            [12] 1964 	addc	a,#(_u >> 8)
      0007F6 FF               [12] 1965 	mov	r7,a
      0007F7 8C 82            [24] 1966 	mov	dpl,r4
      0007F9 8F 83            [24] 1967 	mov	dph,r7
      0007FB E0               [24] 1968 	movx	a,@dptr
      0007FC 70 04            [24] 1969 	jnz	00228$
      0007FE                       1970 00227$:
                                   1971 ;	assignBit
      0007FE C2*00            [12] 1972 	clr	b0
      000800 80 02            [24] 1973 	sjmp	00229$
      000802                       1974 00228$:
                                   1975 ;	assignBit
      000802 D2*00            [12] 1976 	setb	b0
      000804                       1977 00229$:
      000804 A2*00            [12] 1978 	mov	c,b0
      000806 E4               [12] 1979 	clr	a
      000807 33               [12] 1980 	rlc	a
      000808 8D 82            [24] 1981 	mov	dpl,r5
      00080A 8E 83            [24] 1982 	mov	dph,r6
      00080C F0               [24] 1983 	movx	@dptr,a
                                   1984 ;	life.c:192: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00080D 78r14            [12] 1985 	mov	r0,#_y
      00080F E6               [12] 1986 	mov	a,@r0
      000810 C0 E0            [24] 1987 	push	acc
      000812 08               [12] 1988 	inc	r0
      000813 E6               [12] 1989 	mov	a,@r0
      000814 C0 E0            [24] 1990 	push	acc
      000816 90 00 30         [24] 1991 	mov	dptr,#0x0030
      000819 12r00r00         [24] 1992 	lcall	__mulint
      00081C AE 82            [24] 1993 	mov	r6,dpl
      00081E AF 83            [24] 1994 	mov	r7,dph
      000820 15 81            [12] 1995 	dec	sp
      000822 15 81            [12] 1996 	dec	sp
      000824 78r12            [12] 1997 	mov	r0,#_x
      000826 E6               [12] 1998 	mov	a,@r0
      000827 2E               [12] 1999 	add	a,r6
      000828 FE               [12] 2000 	mov	r6,a
      000829 08               [12] 2001 	inc	r0
      00082A E6               [12] 2002 	mov	a,@r0
      00082B 3F               [12] 2003 	addc	a,r7
      00082C FF               [12] 2004 	mov	r7,a
      00082D EE               [12] 2005 	mov	a,r6
      00082E 24r00            [12] 2006 	add	a,#_pu
      000830 F5 82            [12] 2007 	mov	dpl,a
      000832 EF               [12] 2008 	mov	a,r7
      000833 34s00            [12] 2009 	addc	a,#(_pu >> 8)
      000835 F5 83            [12] 2010 	mov	dph,a
      000837 E0               [24] 2011 	movx	a,@dptr
      000838 FD               [12] 2012 	mov	r5,a
      000839 EE               [12] 2013 	mov	a,r6
      00083A 24r00            [12] 2014 	add	a,#_nu
      00083C F5 82            [12] 2015 	mov	dpl,a
      00083E EF               [12] 2016 	mov	a,r7
      00083F 34s48            [12] 2017 	addc	a,#(_nu >> 8)
      000841 F5 83            [12] 2018 	mov	dph,a
      000843 E0               [24] 2019 	movx	a,@dptr
      000844 FC               [12] 2020 	mov	r4,a
      000845 6D               [12] 2021 	xrl	a,r5
      000846 78r1D            [12] 2022 	mov	r0,#_cycle2
      000848 46               [12] 2023 	orl	a,@r0
      000849 F6               [12] 2024 	mov	@r0,a
                                   2025 ;	life.c:193: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00084A EE               [12] 2026 	mov	a,r6
      00084B 24r00            [12] 2027 	add	a,#_u
      00084D F5 82            [12] 2028 	mov	dpl,a
      00084F EF               [12] 2029 	mov	a,r7
      000850 34s24            [12] 2030 	addc	a,#(_u >> 8)
      000852 F5 83            [12] 2031 	mov	dph,a
      000854 E0               [24] 2032 	movx	a,@dptr
      000855 FF               [12] 2033 	mov	r7,a
      000856 EC               [12] 2034 	mov	a,r4
      000857 6F               [12] 2035 	xrl	a,r7
      000858 78r1C            [12] 2036 	mov	r0,#_fixed
      00085A 46               [12] 2037 	orl	a,@r0
      00085B F6               [12] 2038 	mov	@r0,a
                                   2039 ;	life.c:169: for (x = 0; x < W; x++) {
      00085C 78r12            [12] 2040 	mov	r0,#_x
      00085E 06               [12] 2041 	inc	@r0
      00085F B6 00 02         [24] 2042 	cjne	@r0,#0x00,00472$
      000862 08               [12] 2043 	inc	r0
      000863 06               [12] 2044 	inc	@r0
      000864                       2045 00472$:
      000864 78r12            [12] 2046 	mov	r0,#_x
      000866 C3               [12] 2047 	clr	c
      000867 E6               [12] 2048 	mov	a,@r0
      000868 94 30            [12] 2049 	subb	a,#0x30
      00086A 08               [12] 2050 	inc	r0
      00086B E6               [12] 2051 	mov	a,@r0
      00086C 64 80            [12] 2052 	xrl	a,#0x80
      00086E 94 80            [12] 2053 	subb	a,#0x80
      000870 50 03            [24] 2054 	jnc	00473$
      000872 02r04rEF         [24] 2055 	ljmp	00200$
      000875                       2056 00473$:
                                   2057 ;	life.c:166: for (y = 0; y < H; y++) {
      000875 78r14            [12] 2058 	mov	r0,#_y
      000877 06               [12] 2059 	inc	@r0
      000878 B6 00 02         [24] 2060 	cjne	@r0,#0x00,00474$
      00087B 08               [12] 2061 	inc	r0
      00087C 06               [12] 2062 	inc	@r0
      00087D                       2063 00474$:
      00087D 78r14            [12] 2064 	mov	r0,#_y
      00087F C3               [12] 2065 	clr	c
      000880 E6               [12] 2066 	mov	a,@r0
      000881 94 C0            [12] 2067 	subb	a,#0xc0
      000883 08               [12] 2068 	inc	r0
      000884 E6               [12] 2069 	mov	a,@r0
      000885 64 80            [12] 2070 	xrl	a,#0x80
      000887 94 80            [12] 2071 	subb	a,#0x80
      000889 50 03            [24] 2072 	jnc	00475$
      00088B 02r04rC7         [24] 2073 	ljmp	00202$
      00088E                       2074 00475$:
                                   2075 ;	life.c:197: cycle2 = !cycle2;
      00088E 78r1D            [12] 2076 	mov	r0,#_cycle2
      000890 E6               [12] 2077 	mov	a,@r0
      000891 B4 01 00         [24] 2078 	cjne	a,#0x01,00476$
      000894                       2079 00476$:
      000894 92*00            [24] 2080 	mov	b0,c
      000896 78r1D            [12] 2081 	mov	r0,#_cycle2
      000898 E4               [12] 2082 	clr	a
      000899 33               [12] 2083 	rlc	a
      00089A F6               [12] 2084 	mov	@r0,a
                                   2085 ;	life.c:198: fixed = !fixed;
      00089B 78r1C            [12] 2086 	mov	r0,#_fixed
      00089D E6               [12] 2087 	mov	a,@r0
      00089E B4 01 00         [24] 2088 	cjne	a,#0x01,00477$
      0008A1                       2089 00477$:
      0008A1 92*00            [24] 2090 	mov	b0,c
      0008A3 78r1C            [12] 2091 	mov	r0,#_fixed
      0008A5 E4               [12] 2092 	clr	a
      0008A6 33               [12] 2093 	rlc	a
      0008A7 F6               [12] 2094 	mov	@r0,a
                                   2095 ;	life.c:200: memcpy(pu, u, sizeof (u));
      0008A8 E4               [12] 2096 	clr	a
      0008A9 C0 E0            [24] 2097 	push	acc
      0008AB 74 24            [12] 2098 	mov	a,#0x24
      0008AD C0 E0            [24] 2099 	push	acc
      0008AF 74r00            [12] 2100 	mov	a,#_u
      0008B1 C0 E0            [24] 2101 	push	acc
      0008B3 74s24            [12] 2102 	mov	a,#(_u >> 8)
      0008B5 C0 E0            [24] 2103 	push	acc
      0008B7 E4               [12] 2104 	clr	a
      0008B8 C0 E0            [24] 2105 	push	acc
      0008BA 90r00r00         [24] 2106 	mov	dptr,#_pu
      0008BD 75 F0 00         [24] 2107 	mov	b,#0x00
      0008C0 12r00r00         [24] 2108 	lcall	___memcpy
      0008C3 E5 81            [12] 2109 	mov	a,sp
      0008C5 24 FB            [12] 2110 	add	a,#0xfb
      0008C7 F5 81            [12] 2111 	mov	sp,a
                                   2112 ;	life.c:201: memcpy(u, nu, sizeof (nu));
      0008C9 E4               [12] 2113 	clr	a
      0008CA C0 E0            [24] 2114 	push	acc
      0008CC 74 24            [12] 2115 	mov	a,#0x24
      0008CE C0 E0            [24] 2116 	push	acc
      0008D0 74r00            [12] 2117 	mov	a,#_nu
      0008D2 C0 E0            [24] 2118 	push	acc
      0008D4 74s48            [12] 2119 	mov	a,#(_nu >> 8)
      0008D6 C0 E0            [24] 2120 	push	acc
      0008D8 E4               [12] 2121 	clr	a
      0008D9 C0 E0            [24] 2122 	push	acc
      0008DB 90r24r00         [24] 2123 	mov	dptr,#_u
      0008DE 75 F0 00         [24] 2124 	mov	b,#0x00
      0008E1 12r00r00         [24] 2125 	lcall	___memcpy
      0008E4 E5 81            [12] 2126 	mov	a,sp
      0008E6 24 FB            [12] 2127 	add	a,#0xfb
      0008E8 F5 81            [12] 2128 	mov	sp,a
                                   2129 ;	life.c:239: if (fixed || cycle2) {
      0008EA 78r1C            [12] 2130 	mov	r0,#_fixed
      0008EC E6               [12] 2131 	mov	a,@r0
      0008ED 70 08            [24] 2132 	jnz	00126$
      0008EF 78r1D            [12] 2133 	mov	r0,#_cycle2
      0008F1 E6               [12] 2134 	mov	a,@r0
      0008F2 70 03            [24] 2135 	jnz	00479$
      0008F4 02r04r9F         [24] 2136 	ljmp	00215$
      0008F7                       2137 00479$:
      0008F7                       2138 00126$:
                                   2139 ;	life.c:240: printstr("DONE ");
      0008F7 7Dr35            [12] 2140 	mov	r5,#___str_6
      0008F9 7Es00            [12] 2141 	mov	r6,#(___str_6 >> 8)
      0008FB 7F 80            [12] 2142 	mov	r7,#0x80
                                   2143 ;	life.c:49: return;
      0008FD                       2144 00205$:
                                   2145 ;	life.c:47: for (; *s; s++) putchar(*s);
      0008FD 8D 82            [24] 2146 	mov	dpl,r5
      0008FF 8E 83            [24] 2147 	mov	dph,r6
      000901 8F F0            [24] 2148 	mov	b,r7
      000903 12r00r00         [24] 2149 	lcall	__gptrget
      000906 FC               [12] 2150 	mov	r4,a
      000907 60 10            [24] 2151 	jz	00176$
      000909 7B 00            [12] 2152 	mov	r3,#0x00
      00090B 8C 82            [24] 2153 	mov	dpl,r4
      00090D 8B 83            [24] 2154 	mov	dph,r3
      00090F 12r00r00         [24] 2155 	lcall	_putchar
      000912 0D               [12] 2156 	inc	r5
                                   2157 ;	life.c:240: printstr("DONE ");
      000913 BD 00 E7         [24] 2158 	cjne	r5,#0x00,00205$
      000916 0E               [12] 2159 	inc	r6
      000917 80 E4            [24] 2160 	sjmp	00205$
      000919                       2161 00176$:
                                   2162 ;	life.c:241: if (fixed) printstr("FIXED\r\n");
      000919 78r1C            [12] 2163 	mov	r0,#_fixed
      00091B E6               [12] 2164 	mov	a,@r0
      00091C 60 22            [24] 2165 	jz	00124$
      00091E 7Dr3B            [12] 2166 	mov	r5,#___str_7
      000920 7Es00            [12] 2167 	mov	r6,#(___str_7 >> 8)
      000922 7F 80            [12] 2168 	mov	r7,#0x80
                                   2169 ;	life.c:49: return;
      000924                       2170 00208$:
                                   2171 ;	life.c:47: for (; *s; s++) putchar(*s);
      000924 8D 82            [24] 2172 	mov	dpl,r5
      000926 8E 83            [24] 2173 	mov	dph,r6
      000928 8F F0            [24] 2174 	mov	b,r7
      00092A 12r00r00         [24] 2175 	lcall	__gptrget
      00092D FC               [12] 2176 	mov	r4,a
      00092E 60 32            [24] 2177 	jz	00125$
      000930 7B 00            [12] 2178 	mov	r3,#0x00
      000932 8C 82            [24] 2179 	mov	dpl,r4
      000934 8B 83            [24] 2180 	mov	dph,r3
      000936 12r00r00         [24] 2181 	lcall	_putchar
      000939 0D               [12] 2182 	inc	r5
                                   2183 ;	life.c:241: if (fixed) printstr("FIXED\r\n");
      00093A BD 00 E7         [24] 2184 	cjne	r5,#0x00,00208$
      00093D 0E               [12] 2185 	inc	r6
      00093E 80 E4            [24] 2186 	sjmp	00208$
      000940                       2187 00124$:
                                   2188 ;	life.c:242: else printstr("CYCLE2\r\n");
      000940 7Dr43            [12] 2189 	mov	r5,#___str_8
      000942 7Es00            [12] 2190 	mov	r6,#(___str_8 >> 8)
      000944 7F 80            [12] 2191 	mov	r7,#0x80
                                   2192 ;	life.c:49: return;
      000946                       2193 00211$:
                                   2194 ;	life.c:47: for (; *s; s++) putchar(*s);
      000946 8D 82            [24] 2195 	mov	dpl,r5
      000948 8E 83            [24] 2196 	mov	dph,r6
      00094A 8F F0            [24] 2197 	mov	b,r7
      00094C 12r00r00         [24] 2198 	lcall	__gptrget
      00094F FC               [12] 2199 	mov	r4,a
      000950 60 10            [24] 2200 	jz	00125$
      000952 7B 00            [12] 2201 	mov	r3,#0x00
      000954 8C 82            [24] 2202 	mov	dpl,r4
      000956 8B 83            [24] 2203 	mov	dph,r3
      000958 12r00r00         [24] 2204 	lcall	_putchar
      00095B 0D               [12] 2205 	inc	r5
                                   2206 ;	life.c:242: else printstr("CYCLE2\r\n");
      00095C BD 00 E7         [24] 2207 	cjne	r5,#0x00,00211$
      00095F 0E               [12] 2208 	inc	r6
      000960 80 E4            [24] 2209 	sjmp	00211$
      000962                       2210 00125$:
                                   2211 ;	life.c:243: (void)getchar();
      000962 12r00r05         [24] 2212 	lcall	_getchar
                                   2213 ;	life.c:244: break;
      000965                       2214 00129$:
                                   2215 ;	life.c:248: if (i1) {
      000965 78r11            [12] 2216 	mov	r0,#_i1
      000967 E6               [12] 2217 	mov	a,@r0
      000968 60 25            [24] 2218 	jz	00221$
                                   2219 ;	life.c:249: printstr("BREAK\r\n");
      00096A 7Dr4C            [12] 2220 	mov	r5,#___str_9
      00096C 7Es00            [12] 2221 	mov	r6,#(___str_9 >> 8)
      00096E 7F 80            [12] 2222 	mov	r7,#0x80
                                   2223 ;	life.c:49: return;
      000970                       2224 00218$:
                                   2225 ;	life.c:47: for (; *s; s++) putchar(*s);
      000970 8D 82            [24] 2226 	mov	dpl,r5
      000972 8E 83            [24] 2227 	mov	dph,r6
      000974 8F F0            [24] 2228 	mov	b,r7
      000976 12r00r00         [24] 2229 	lcall	__gptrget
      000979 FC               [12] 2230 	mov	r4,a
      00097A 60 10            [24] 2231 	jz	00182$
      00097C 7B 00            [12] 2232 	mov	r3,#0x00
      00097E 8C 82            [24] 2233 	mov	dpl,r4
      000980 8B 83            [24] 2234 	mov	dph,r3
      000982 12r00r00         [24] 2235 	lcall	_putchar
      000985 0D               [12] 2236 	inc	r5
                                   2237 ;	life.c:249: printstr("BREAK\r\n");
      000986 BD 00 E7         [24] 2238 	cjne	r5,#0x00,00218$
      000989 0E               [12] 2239 	inc	r6
      00098A 80 E4            [24] 2240 	sjmp	00218$
      00098C                       2241 00182$:
                                   2242 ;	life.c:250: (void)getchar();
      00098C 12r00r05         [24] 2243 	lcall	_getchar
      00098F                       2244 00221$:
                                   2245 ;	life.c:213: for (i0 = 0; !i0; ) {		
      00098F 78r10            [12] 2246 	mov	r0,#_i0
      000991 E6               [12] 2247 	mov	a,@r0
      000992 70 03            [24] 2248 	jnz	00490$
      000994 02r02r31         [24] 2249 	ljmp	00220$
      000997                       2250 00490$:
                                   2251 ;	life.c:254: terminate:
      000997                       2252 00133$:
                                   2253 ;	life.c:255: EA = 0;
                                   2254 ;	assignBit
      000997 C2 AF            [12] 2255 	clr	_EA
                                   2256 ;	life.c:256: printstr("TERM\r\n");
      000999 7Dr54            [12] 2257 	mov	r5,#___str_10
      00099B 7Es00            [12] 2258 	mov	r6,#(___str_10 >> 8)
      00099D 7F 80            [12] 2259 	mov	r7,#0x80
                                   2260 ;	life.c:49: return;
      00099F                       2261 00223$:
                                   2262 ;	life.c:47: for (; *s; s++) putchar(*s);
      00099F 8D 82            [24] 2263 	mov	dpl,r5
      0009A1 8E 83            [24] 2264 	mov	dph,r6
      0009A3 8F F0            [24] 2265 	mov	b,r7
      0009A5 12r00r00         [24] 2266 	lcall	__gptrget
      0009A8 FC               [12] 2267 	mov	r4,a
      0009A9 60 10            [24] 2268 	jz	00184$
      0009AB 7B 00            [12] 2269 	mov	r3,#0x00
      0009AD 8C 82            [24] 2270 	mov	dpl,r4
      0009AF 8B 83            [24] 2271 	mov	dph,r3
      0009B1 12r00r00         [24] 2272 	lcall	_putchar
      0009B4 0D               [12] 2273 	inc	r5
                                   2274 ;	life.c:256: printstr("TERM\r\n");
      0009B5 BD 00 E7         [24] 2275 	cjne	r5,#0x00,00223$
      0009B8 0E               [12] 2276 	inc	r6
      0009B9 80 E4            [24] 2277 	sjmp	00223$
      0009BB                       2278 00184$:
                                   2279 ;	life.c:257: (void)getchar();
      0009BB 12r00r05         [24] 2280 	lcall	_getchar
                                   2281 ;	life.c:261: __endasm;
      0009BE 02 00 00         [24] 2282 	ljmp	0
                                   2283 ;	life.c:262: }
      0009C1 85*00 81         [24] 2284 	mov	sp,_bp
      0009C4 D0*00            [24] 2285 	pop	_bp
      0009C6 22               [24] 2286 	ret
                                   2287 	.area CSEG    (CODE)
                                   2288 	.area CONST   (CODE)
                                   2289 	.area CONST   (CODE)
      000000                       2290 ___str_0:
      000000 1B                    2291 	.db 0x1b
      000001 5B 32 4A              2292 	.ascii "[2J"
      000004 1B                    2293 	.db 0x1b
      000005 5B 6D 47 45 4E 20     2294 	.ascii "[mGEN "
      00000B 00                    2295 	.db 0x00
                                   2296 	.area CSEG    (CODE)
                                   2297 	.area CONST   (CODE)
      00000C                       2298 ___str_1:
      00000C 0D                    2299 	.db 0x0d
      00000D 0A                    2300 	.db 0x0a
      00000E 00                    2301 	.db 0x00
                                   2302 	.area CSEG    (CODE)
                                   2303 	.area CONST   (CODE)
      00000F                       2304 ___str_2:
      00000F 4C 4F 41 44 20 3C     2305 	.ascii "LOAD <"
      000015 00                    2306 	.db 0x00
                                   2307 	.area CSEG    (CODE)
                                   2308 	.area CONST   (CODE)
      000016                       2309 ___str_3:
      000016 3E                    2310 	.ascii ">"
      000017 0D                    2311 	.db 0x0d
      000018 0A                    2312 	.db 0x0a
      000019 00                    2313 	.db 0x00
                                   2314 	.area CSEG    (CODE)
                                   2315 	.area CONST   (CODE)
      00001A                       2316 ___str_4:
      00001A 1B                    2317 	.db 0x1b
      00001B 5B 32 4A              2318 	.ascii "[2J"
      00001E 1B                    2319 	.db 0x1b
      00001F 5B 6D 4C 49 46 45 20  2320 	.ascii "[mLIFE INIT"
             49 4E 49 54
      00002A 0D                    2321 	.db 0x0d
      00002B 0A                    2322 	.db 0x0a
      00002C 00                    2323 	.db 0x00
                                   2324 	.area CSEG    (CODE)
                                   2325 	.area CONST   (CODE)
      00002D                       2326 ___str_5:
      00002D 52 45 41 44 59        2327 	.ascii "READY"
      000032 0D                    2328 	.db 0x0d
      000033 0A                    2329 	.db 0x0a
      000034 00                    2330 	.db 0x00
                                   2331 	.area CSEG    (CODE)
                                   2332 	.area CONST   (CODE)
      000035                       2333 ___str_6:
      000035 44 4F 4E 45 20        2334 	.ascii "DONE "
      00003A 00                    2335 	.db 0x00
                                   2336 	.area CSEG    (CODE)
                                   2337 	.area CONST   (CODE)
      00003B                       2338 ___str_7:
      00003B 46 49 58 45 44        2339 	.ascii "FIXED"
      000040 0D                    2340 	.db 0x0d
      000041 0A                    2341 	.db 0x0a
      000042 00                    2342 	.db 0x00
                                   2343 	.area CSEG    (CODE)
                                   2344 	.area CONST   (CODE)
      000043                       2345 ___str_8:
      000043 43 59 43 4C 45 32     2346 	.ascii "CYCLE2"
      000049 0D                    2347 	.db 0x0d
      00004A 0A                    2348 	.db 0x0a
      00004B 00                    2349 	.db 0x00
                                   2350 	.area CSEG    (CODE)
                                   2351 	.area CONST   (CODE)
      00004C                       2352 ___str_9:
      00004C 42 52 45 41 4B        2353 	.ascii "BREAK"
      000051 0D                    2354 	.db 0x0d
      000052 0A                    2355 	.db 0x0a
      000053 00                    2356 	.db 0x00
                                   2357 	.area CSEG    (CODE)
                                   2358 	.area CONST   (CODE)
      000054                       2359 ___str_10:
      000054 54 45 52 4D           2360 	.ascii "TERM"
      000058 0D                    2361 	.db 0x0d
      000059 0A                    2362 	.db 0x0a
      00005A 00                    2363 	.db 0x00
                                   2364 	.area CSEG    (CODE)
                                   2365 	.area XINIT   (CODE)
                                   2366 	.area CABS    (ABS,CODE)
