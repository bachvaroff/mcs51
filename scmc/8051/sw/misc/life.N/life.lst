                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _toupper
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _srand
                                     21 	.globl _rand
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _FL
                                     29 	.globl _P
                                     30 	.globl _TF2
                                     31 	.globl _EXF2
                                     32 	.globl _RCLK
                                     33 	.globl _TCLK
                                     34 	.globl _EXEN2
                                     35 	.globl _TR2
                                     36 	.globl _C_T2
                                     37 	.globl _CP_RL2
                                     38 	.globl _T2CON_7
                                     39 	.globl _T2CON_6
                                     40 	.globl _T2CON_5
                                     41 	.globl _T2CON_4
                                     42 	.globl _T2CON_3
                                     43 	.globl _T2CON_2
                                     44 	.globl _T2CON_1
                                     45 	.globl _T2CON_0
                                     46 	.globl _PT2
                                     47 	.globl _PS
                                     48 	.globl _PT1
                                     49 	.globl _PX1
                                     50 	.globl _PT0
                                     51 	.globl _PX0
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _EA
                                     69 	.globl _ET2
                                     70 	.globl _ES
                                     71 	.globl _ET1
                                     72 	.globl _EX1
                                     73 	.globl _ET0
                                     74 	.globl _EX0
                                     75 	.globl _P2_7
                                     76 	.globl _P2_6
                                     77 	.globl _P2_5
                                     78 	.globl _P2_4
                                     79 	.globl _P2_3
                                     80 	.globl _P2_2
                                     81 	.globl _P2_1
                                     82 	.globl _P2_0
                                     83 	.globl _SM0
                                     84 	.globl _SM1
                                     85 	.globl _SM2
                                     86 	.globl _REN
                                     87 	.globl _TB8
                                     88 	.globl _RB8
                                     89 	.globl _TI
                                     90 	.globl _RI
                                     91 	.globl _T2EX
                                     92 	.globl _T2
                                     93 	.globl _P1_7
                                     94 	.globl _P1_6
                                     95 	.globl _P1_5
                                     96 	.globl _P1_4
                                     97 	.globl _P1_3
                                     98 	.globl _P1_2
                                     99 	.globl _P1_1
                                    100 	.globl _P1_0
                                    101 	.globl _TF1
                                    102 	.globl _TR1
                                    103 	.globl _TF0
                                    104 	.globl _TR0
                                    105 	.globl _IE1
                                    106 	.globl _IT1
                                    107 	.globl _IE0
                                    108 	.globl _IT0
                                    109 	.globl _P0_7
                                    110 	.globl _P0_6
                                    111 	.globl _P0_5
                                    112 	.globl _P0_4
                                    113 	.globl _P0_3
                                    114 	.globl _P0_2
                                    115 	.globl _P0_1
                                    116 	.globl _P0_0
                                    117 	.globl _B
                                    118 	.globl _A
                                    119 	.globl _ACC
                                    120 	.globl _PSW
                                    121 	.globl _TH2
                                    122 	.globl _TL2
                                    123 	.globl _RCAP2H
                                    124 	.globl _RCAP2L
                                    125 	.globl _T2MOD
                                    126 	.globl _T2CON
                                    127 	.globl _IP
                                    128 	.globl _P3
                                    129 	.globl _IE
                                    130 	.globl _P2
                                    131 	.globl _SBUF
                                    132 	.globl _SCON
                                    133 	.globl _P1
                                    134 	.globl _TH1
                                    135 	.globl _TH0
                                    136 	.globl _TL1
                                    137 	.globl _TL0
                                    138 	.globl _TMOD
                                    139 	.globl _TCON
                                    140 	.globl _PCON
                                    141 	.globl _DPH
                                    142 	.globl _DPL
                                    143 	.globl _SP
                                    144 	.globl _P0
                                    145 ;--------------------------------------------------------
                                    146 ; special function registers
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0	=	0x0080
                           000081   151 _SP	=	0x0081
                           000082   152 _DPL	=	0x0082
                           000083   153 _DPH	=	0x0083
                           000087   154 _PCON	=	0x0087
                           000088   155 _TCON	=	0x0088
                           000089   156 _TMOD	=	0x0089
                           00008A   157 _TL0	=	0x008a
                           00008B   158 _TL1	=	0x008b
                           00008C   159 _TH0	=	0x008c
                           00008D   160 _TH1	=	0x008d
                           000090   161 _P1	=	0x0090
                           000098   162 _SCON	=	0x0098
                           000099   163 _SBUF	=	0x0099
                           0000A0   164 _P2	=	0x00a0
                           0000A8   165 _IE	=	0x00a8
                           0000B0   166 _P3	=	0x00b0
                           0000B8   167 _IP	=	0x00b8
                           0000C8   168 _T2CON	=	0x00c8
                           0000C9   169 _T2MOD	=	0x00c9
                           0000CA   170 _RCAP2L	=	0x00ca
                           0000CB   171 _RCAP2H	=	0x00cb
                           0000CC   172 _TL2	=	0x00cc
                           0000CD   173 _TH2	=	0x00cd
                           0000D0   174 _PSW	=	0x00d0
                           0000E0   175 _ACC	=	0x00e0
                           0000E0   176 _A	=	0x00e0
                           0000F0   177 _B	=	0x00f0
                                    178 ;--------------------------------------------------------
                                    179 ; special function bits
                                    180 ;--------------------------------------------------------
                                    181 	.area RSEG    (ABS,DATA)
      000000                        182 	.org 0x0000
                           000080   183 _P0_0	=	0x0080
                           000081   184 _P0_1	=	0x0081
                           000082   185 _P0_2	=	0x0082
                           000083   186 _P0_3	=	0x0083
                           000084   187 _P0_4	=	0x0084
                           000085   188 _P0_5	=	0x0085
                           000086   189 _P0_6	=	0x0086
                           000087   190 _P0_7	=	0x0087
                           000088   191 _IT0	=	0x0088
                           000089   192 _IE0	=	0x0089
                           00008A   193 _IT1	=	0x008a
                           00008B   194 _IE1	=	0x008b
                           00008C   195 _TR0	=	0x008c
                           00008D   196 _TF0	=	0x008d
                           00008E   197 _TR1	=	0x008e
                           00008F   198 _TF1	=	0x008f
                           000090   199 _P1_0	=	0x0090
                           000091   200 _P1_1	=	0x0091
                           000092   201 _P1_2	=	0x0092
                           000093   202 _P1_3	=	0x0093
                           000094   203 _P1_4	=	0x0094
                           000095   204 _P1_5	=	0x0095
                           000096   205 _P1_6	=	0x0096
                           000097   206 _P1_7	=	0x0097
                           000090   207 _T2	=	0x0090
                           000091   208 _T2EX	=	0x0091
                           000098   209 _RI	=	0x0098
                           000099   210 _TI	=	0x0099
                           00009A   211 _RB8	=	0x009a
                           00009B   212 _TB8	=	0x009b
                           00009C   213 _REN	=	0x009c
                           00009D   214 _SM2	=	0x009d
                           00009E   215 _SM1	=	0x009e
                           00009F   216 _SM0	=	0x009f
                           0000A0   217 _P2_0	=	0x00a0
                           0000A1   218 _P2_1	=	0x00a1
                           0000A2   219 _P2_2	=	0x00a2
                           0000A3   220 _P2_3	=	0x00a3
                           0000A4   221 _P2_4	=	0x00a4
                           0000A5   222 _P2_5	=	0x00a5
                           0000A6   223 _P2_6	=	0x00a6
                           0000A7   224 _P2_7	=	0x00a7
                           0000A8   225 _EX0	=	0x00a8
                           0000A9   226 _ET0	=	0x00a9
                           0000AA   227 _EX1	=	0x00aa
                           0000AB   228 _ET1	=	0x00ab
                           0000AC   229 _ES	=	0x00ac
                           0000AD   230 _ET2	=	0x00ad
                           0000AF   231 _EA	=	0x00af
                           0000B0   232 _P3_0	=	0x00b0
                           0000B1   233 _P3_1	=	0x00b1
                           0000B2   234 _P3_2	=	0x00b2
                           0000B3   235 _P3_3	=	0x00b3
                           0000B4   236 _P3_4	=	0x00b4
                           0000B5   237 _P3_5	=	0x00b5
                           0000B6   238 _P3_6	=	0x00b6
                           0000B7   239 _P3_7	=	0x00b7
                           0000B0   240 _RXD	=	0x00b0
                           0000B1   241 _TXD	=	0x00b1
                           0000B2   242 _INT0	=	0x00b2
                           0000B3   243 _INT1	=	0x00b3
                           0000B4   244 _T0	=	0x00b4
                           0000B5   245 _T1	=	0x00b5
                           0000B6   246 _WR	=	0x00b6
                           0000B7   247 _RD	=	0x00b7
                           0000B8   248 _PX0	=	0x00b8
                           0000B9   249 _PT0	=	0x00b9
                           0000BA   250 _PX1	=	0x00ba
                           0000BB   251 _PT1	=	0x00bb
                           0000BC   252 _PS	=	0x00bc
                           0000BD   253 _PT2	=	0x00bd
                           0000C8   254 _T2CON_0	=	0x00c8
                           0000C9   255 _T2CON_1	=	0x00c9
                           0000CA   256 _T2CON_2	=	0x00ca
                           0000CB   257 _T2CON_3	=	0x00cb
                           0000CC   258 _T2CON_4	=	0x00cc
                           0000CD   259 _T2CON_5	=	0x00cd
                           0000CE   260 _T2CON_6	=	0x00ce
                           0000CF   261 _T2CON_7	=	0x00cf
                           0000C8   262 _CP_RL2	=	0x00c8
                           0000C9   263 _C_T2	=	0x00c9
                           0000CA   264 _TR2	=	0x00ca
                           0000CB   265 _EXEN2	=	0x00cb
                           0000CC   266 _TCLK	=	0x00cc
                           0000CD   267 _RCLK	=	0x00cd
                           0000CE   268 _EXF2	=	0x00ce
                           0000CF   269 _TF2	=	0x00cf
                           0000D0   270 _P	=	0x00d0
                           0000D1   271 _FL	=	0x00d1
                           0000D2   272 _OV	=	0x00d2
                           0000D3   273 _RS0	=	0x00d3
                           0000D4   274 _RS1	=	0x00d4
                           0000D5   275 _F0	=	0x00d5
                           0000D6   276 _AC	=	0x00d6
                           0000D7   277 _CY	=	0x00d7
                                    278 ;--------------------------------------------------------
                                    279 ; overlayable register banks
                                    280 ;--------------------------------------------------------
                                    281 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        284 	.ds 8
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable bit register bank
                                    287 ;--------------------------------------------------------
                                    288 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        289 bits:
      000000                        290 	.ds 1
                           008000   291 	b0 = bits[0]
                           008100   292 	b1 = bits[1]
                           008200   293 	b2 = bits[2]
                           008300   294 	b3 = bits[3]
                           008400   295 	b4 = bits[4]
                           008500   296 	b5 = bits[5]
                           008600   297 	b6 = bits[6]
                           008700   298 	b7 = bits[7]
                                    299 ;--------------------------------------------------------
                                    300 ; internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area DSEG    (DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable items in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 ;--------------------------------------------------------
                                    307 ; Stack segment in internal ram 
                                    308 ;--------------------------------------------------------
                                    309 	.area	SSEG
      000000                        310 __start__stack:
      000000                        311 	.ds	1
                                    312 
                                    313 ;--------------------------------------------------------
                                    314 ; indirectly addressable internal ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area ISEG    (DATA)
      000000                        317 _digits:
      000000                        318 	.ds 16
      000010                        319 _i0:
      000010                        320 	.ds 1
      000011                        321 _i1:
      000011                        322 	.ds 1
      000012                        323 _x:
      000012                        324 	.ds 2
      000014                        325 _y:
      000014                        326 	.ds 2
      000016                        327 _j:
      000016                        328 	.ds 2
      000018                        329 _c:
      000018                        330 	.ds 2
      00001A                        331 _bstep:
      00001A                        332 	.ds 1
      00001B                        333 _n:
      00001B                        334 	.ds 1
      00001C                        335 _fixed:
      00001C                        336 	.ds 1
      00001D                        337 _cycle2:
      00001D                        338 	.ds 1
      00001E                        339 _x1:
      00001E                        340 	.ds 2
      000020                        341 _y1:
      000020                        342 	.ds 2
      000022                        343 _generation:
      000022                        344 	.ds 4
      000026                        345 _busy:
      000026                        346 	.ds 4
                                    347 ;--------------------------------------------------------
                                    348 ; absolute internal ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area IABS    (ABS,DATA)
                                    351 	.area IABS    (ABS,DATA)
                                    352 ;--------------------------------------------------------
                                    353 ; bit data
                                    354 ;--------------------------------------------------------
                                    355 	.area BSEG    (BIT)
                                    356 ;--------------------------------------------------------
                                    357 ; paged external ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area PSEG    (PAG,XDATA)
                                    360 ;--------------------------------------------------------
                                    361 ; external ram data
                                    362 ;--------------------------------------------------------
                                    363 	.area XSEG    (XDATA)
      000000                        364 _pu:
      000000                        365 	.ds 9216
      002400                        366 _u:
      002400                        367 	.ds 9216
      004800                        368 _nu:
      004800                        369 	.ds 9216
      006C00                        370 _main_R_65536_165:
      006C00                        371 	.ds 2
                                    372 ;--------------------------------------------------------
                                    373 ; absolute external ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XABS    (ABS,XDATA)
                                    376 ;--------------------------------------------------------
                                    377 ; external initialized ram data
                                    378 ;--------------------------------------------------------
                                    379 	.area XISEG   (XDATA)
                                    380 	.area HOME    (CODE)
                                    381 	.area GSINIT0 (CODE)
                                    382 	.area GSINIT1 (CODE)
                                    383 	.area GSINIT2 (CODE)
                                    384 	.area GSINIT3 (CODE)
                                    385 	.area GSINIT4 (CODE)
                                    386 	.area GSINIT5 (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area CSEG    (CODE)
                                    390 ;--------------------------------------------------------
                                    391 ; interrupt vector 
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
      000000                        394 __interrupt_vect:
      000000 02r00r00         [24]  395 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  396 	ljmp	_int0
      000006                        397 	.ds	5
      00000B 32               [24]  398 	reti
      00000C                        399 	.ds	7
      000013 02r00r1A         [24]  400 	ljmp	_int1
                                    401 ;--------------------------------------------------------
                                    402 ; global & static initialisations
                                    403 ;--------------------------------------------------------
                                    404 	.area HOME    (CODE)
                                    405 	.area GSINIT  (CODE)
                                    406 	.area GSFINAL (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.globl __sdcc_gsinit_startup
                                    409 	.globl __sdcc_program_startup
                                    410 	.globl __start__stack
                                    411 	.globl __mcs51_genXINIT
                                    412 	.globl __mcs51_genXRAMCLEAR
                                    413 	.globl __mcs51_genRAMCLEAR
                                    414 ;------------------------------------------------------------
                                    415 ;Allocation info for local variables in function 'main'
                                    416 ;------------------------------------------------------------
                                    417 ;__2621440023              Allocated to registers 
                                    418 ;s                         Allocated to registers r5 r6 r7 
                                    419 ;__1310720013              Allocated to registers 
                                    420 ;s                         Allocated to registers r5 r6 r7 
                                    421 ;__1310720015              Allocated to registers r6 r7 
                                    422 ;a                         Allocated to registers r4 r5 
                                    423 ;__1310720017              Allocated to registers 
                                    424 ;s                         Allocated to registers r5 r6 r7 
                                    425 ;__1310720019              Allocated to registers 
                                    426 ;s                         Allocated to registers r5 r6 r7 
                                    427 ;__1310720021              Allocated to registers 
                                    428 ;s                         Allocated to registers r5 r6 r7 
                                    429 ;__2621440028              Allocated to registers 
                                    430 ;s                         Allocated to registers r5 r6 r7 
                                    431 ;__4587520032              Allocated to registers 
                                    432 ;s                         Allocated to registers r5 r6 r7 
                                    433 ;__4587520034              Allocated to registers 
                                    434 ;s                         Allocated to registers r5 r6 r7 
                                    435 ;__4587520036              Allocated to registers 
                                    436 ;s                         Allocated to registers r5 r6 r7 
                                    437 ;__3276800038              Allocated to registers 
                                    438 ;s                         Allocated to registers r5 r6 r7 
                                    439 ;__1310720040              Allocated to registers 
                                    440 ;s                         Allocated to registers r5 r6 r7 
                                    441 ;sloc0                     Allocated to stack - _bp +1
                                    442 ;sloc1                     Allocated to stack - _bp +2
                                    443 ;sloc2                     Allocated to stack - _bp +4
                                    444 ;sloc3                     Allocated to stack - _bp +6
                                    445 ;sloc4                     Allocated to stack - _bp +8
                                    446 ;sloc5                     Allocated to stack - _bp +10
                                    447 ;sloc6                     Allocated to stack - _bp +12
                                    448 ;R                         Allocated with name '_main_R_65536_165'
                                    449 ;------------------------------------------------------------
                                    450 ;	life.c:222: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90r6Cr00         [24]  451 	mov	dptr,#_main_R_65536_165
      000003 74 FE            [12]  452 	mov	a,#0xfe
      000005 F0               [24]  453 	movx	@dptr,a
      000006 04               [12]  454 	inc	a
      000007 A3               [24]  455 	inc	dptr
      000008 F0               [24]  456 	movx	@dptr,a
                                    457 ;	life.c:26: __idata static const char digits[16] = {
      000009 78r00            [12]  458 	mov	r0,#_digits
      00000B 76 30            [12]  459 	mov	@r0,#0x30
      00000D 78r01            [12]  460 	mov	r0,#(_digits + 0x0001)
      00000F 76 31            [12]  461 	mov	@r0,#0x31
      000011 78r02            [12]  462 	mov	r0,#(_digits + 0x0002)
      000013 76 32            [12]  463 	mov	@r0,#0x32
      000015 78r03            [12]  464 	mov	r0,#(_digits + 0x0003)
      000017 76 33            [12]  465 	mov	@r0,#0x33
      000019 78r04            [12]  466 	mov	r0,#(_digits + 0x0004)
      00001B 76 34            [12]  467 	mov	@r0,#0x34
      00001D 78r05            [12]  468 	mov	r0,#(_digits + 0x0005)
      00001F 76 35            [12]  469 	mov	@r0,#0x35
      000021 78r06            [12]  470 	mov	r0,#(_digits + 0x0006)
      000023 76 36            [12]  471 	mov	@r0,#0x36
      000025 78r07            [12]  472 	mov	r0,#(_digits + 0x0007)
      000027 76 37            [12]  473 	mov	@r0,#0x37
      000029 78r08            [12]  474 	mov	r0,#(_digits + 0x0008)
      00002B 76 38            [12]  475 	mov	@r0,#0x38
      00002D 78r09            [12]  476 	mov	r0,#(_digits + 0x0009)
      00002F 76 39            [12]  477 	mov	@r0,#0x39
      000031 78r0A            [12]  478 	mov	r0,#(_digits + 0x000a)
      000033 76 41            [12]  479 	mov	@r0,#0x41
      000035 78r0B            [12]  480 	mov	r0,#(_digits + 0x000b)
      000037 76 42            [12]  481 	mov	@r0,#0x42
      000039 78r0C            [12]  482 	mov	r0,#(_digits + 0x000c)
      00003B 76 43            [12]  483 	mov	@r0,#0x43
      00003D 78r0D            [12]  484 	mov	r0,#(_digits + 0x000d)
      00003F 76 44            [12]  485 	mov	@r0,#0x44
      000041 78r0E            [12]  486 	mov	r0,#(_digits + 0x000e)
      000043 76 45            [12]  487 	mov	@r0,#0x45
      000045 78r0F            [12]  488 	mov	r0,#(_digits + 0x000f)
      000047 76 46            [12]  489 	mov	@r0,#0x46
                                    490 ;	life.c:174: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000049 78r26            [12]  491 	mov	r0,#_busy
      00004B 76 5C            [12]  492 	mov	@r0,#0x5c
      00004D 78r27            [12]  493 	mov	r0,#(_busy + 0x0001)
      00004F 76 7C            [12]  494 	mov	@r0,#0x7c
      000051 78r28            [12]  495 	mov	r0,#(_busy + 0x0002)
      000053 76 2F            [12]  496 	mov	@r0,#0x2f
      000055 78r29            [12]  497 	mov	r0,#(_busy + 0x0003)
      000057 76 2D            [12]  498 	mov	@r0,#0x2d
                                    499 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  500 	ljmp	__sdcc_program_startup
                                    501 ;--------------------------------------------------------
                                    502 ; Home
                                    503 ;--------------------------------------------------------
                                    504 	.area HOME    (CODE)
                                    505 	.area HOME    (CODE)
      000016                        506 __sdcc_program_startup:
      000016 02r02r19         [24]  507 	ljmp	_main
                                    508 ;	return from main will return to caller
                                    509 ;--------------------------------------------------------
                                    510 ; code
                                    511 ;--------------------------------------------------------
                                    512 	.area CSEG    (CODE)
                                    513 ;------------------------------------------------------------
                                    514 ;Allocation info for local variables in function 'putchar'
                                    515 ;------------------------------------------------------------
                                    516 ;c                         Allocated to registers 
                                    517 ;------------------------------------------------------------
                                    518 ;	life.c:9: int putchar(int c) __naked {
                                    519 ;	-----------------------------------------
                                    520 ;	 function putchar
                                    521 ;	-----------------------------------------
      000000                        522 _putchar:
                                    523 ;	naked function: no prologue.
                                    524 ;	life.c:14: __endasm;
      000000 E5 82            [12]  525 	mov	a, dpl
      000002 02 00 30         [24]  526 	ljmp	0x0030
                                    527 ;	life.c:15: }
                                    528 ;	naked function: no epilogue.
                                    529 ;------------------------------------------------------------
                                    530 ;Allocation info for local variables in function 'getchar'
                                    531 ;------------------------------------------------------------
                                    532 ;	life.c:17: int getchar(void) __naked {
                                    533 ;	-----------------------------------------
                                    534 ;	 function getchar
                                    535 ;	-----------------------------------------
      000005                        536 _getchar:
                                    537 ;	naked function: no prologue.
                                    538 ;	life.c:23: __endasm;
      000005 12 00 32         [24]  539 	lcall	0x0032
      000008 F5 82            [12]  540 	mov	dpl, a
      00000A 75 83 00         [24]  541 	mov	dph, #0
      00000D 22               [24]  542 	ret
                                    543 ;	life.c:24: }
                                    544 ;	naked function: no epilogue.
                                    545 ;------------------------------------------------------------
                                    546 ;Allocation info for local variables in function 'int0'
                                    547 ;------------------------------------------------------------
                                    548 ;	life.c:55: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    549 ;	-----------------------------------------
                                    550 ;	 function int0
                                    551 ;	-----------------------------------------
      00000E                        552 _int0:
                           00000F   553 	ar7 = 0x0f
                           00000E   554 	ar6 = 0x0e
                           00000D   555 	ar5 = 0x0d
                           00000C   556 	ar4 = 0x0c
                           00000B   557 	ar3 = 0x0b
                           00000A   558 	ar2 = 0x0a
                           000009   559 	ar1 = 0x09
                           000008   560 	ar0 = 0x08
      00000E C0 D0            [24]  561 	push	psw
      000010 75 D0 08         [24]  562 	mov	psw,#0x08
                                    563 ;	life.c:56: i0 = 1;
      000013 78r10            [12]  564 	mov	r0,#_i0
      000015 76 01            [12]  565 	mov	@r0,#0x01
                                    566 ;	life.c:57: }
      000017 D0 D0            [24]  567 	pop	psw
      000019 32               [24]  568 	reti
                                    569 ;	eliminated unneeded push/pop dpl
                                    570 ;	eliminated unneeded push/pop dph
                                    571 ;	eliminated unneeded push/pop b
                                    572 ;	eliminated unneeded push/pop acc
                                    573 ;------------------------------------------------------------
                                    574 ;Allocation info for local variables in function 'int1'
                                    575 ;------------------------------------------------------------
                                    576 ;	life.c:59: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    577 ;	-----------------------------------------
                                    578 ;	 function int1
                                    579 ;	-----------------------------------------
      00001A                        580 _int1:
      00001A C0 D0            [24]  581 	push	psw
      00001C 75 D0 08         [24]  582 	mov	psw,#0x08
                                    583 ;	life.c:60: i1 = 1;
      00001F 78r11            [12]  584 	mov	r0,#_i1
      000021 76 01            [12]  585 	mov	@r0,#0x01
                                    586 ;	life.c:61: }
      000023 D0 D0            [24]  587 	pop	psw
      000025 32               [24]  588 	reti
                                    589 ;	eliminated unneeded push/pop dpl
                                    590 ;	eliminated unneeded push/pop dph
                                    591 ;	eliminated unneeded push/pop b
                                    592 ;	eliminated unneeded push/pop acc
                                    593 ;------------------------------------------------------------
                                    594 ;Allocation info for local variables in function 'show'
                                    595 ;------------------------------------------------------------
                                    596 ;hdr                       Allocated to registers r7 
                                    597 ;__1966080005              Allocated to registers 
                                    598 ;s                         Allocated to registers r5 r6 r7 
                                    599 ;__1310720001              Allocated to registers r6 r7 
                                    600 ;a                         Allocated to registers 
                                    601 ;__1310720003              Allocated to registers r6 r7 
                                    602 ;a                         Allocated to registers 
                                    603 ;__1966080008              Allocated to registers 
                                    604 ;s                         Allocated to registers r5 r6 r7 
                                    605 ;__2621440011              Allocated to registers 
                                    606 ;s                         Allocated to registers r5 r6 r7 
                                    607 ;------------------------------------------------------------
                                    608 ;	life.c:97: void show(char hdr) {
                                    609 ;	-----------------------------------------
                                    610 ;	 function show
                                    611 ;	-----------------------------------------
      000026                        612 _show:
                           000007   613 	ar7 = 0x07
                           000006   614 	ar6 = 0x06
                           000005   615 	ar5 = 0x05
                           000004   616 	ar4 = 0x04
                           000003   617 	ar3 = 0x03
                           000002   618 	ar2 = 0x02
                           000001   619 	ar1 = 0x01
                           000000   620 	ar0 = 0x00
                                    621 ;	life.c:98: if (hdr) {
      000026 E5 82            [12]  622 	mov	a,dpl
      000028 FF               [12]  623 	mov	r7,a
      000029 70 03            [24]  624 	jnz	00190$
      00002B 02r01r7E         [24]  625 	ljmp	00102$
      00002E                        626 00190$:
                                    627 ;	life.c:99: printstr("\033[2J\033[mGEN ");
      00002E 7Dr00            [12]  628 	mov	r5,#___str_0
      000030 7Es00            [12]  629 	mov	r6,#(___str_0 >> 8)
      000032 7F 80            [12]  630 	mov	r7,#0x80
                                    631 ;	life.c:50: return;
      000034                        632 00121$:
                                    633 ;	life.c:48: for (; *s; s++) putchar(*s);
      000034 8D 82            [24]  634 	mov	dpl,r5
      000036 8E 83            [24]  635 	mov	dph,r6
      000038 8F F0            [24]  636 	mov	b,r7
      00003A 12r00r00         [24]  637 	lcall	__gptrget
      00003D FC               [12]  638 	mov	r4,a
      00003E 60 10            [24]  639 	jz	00109$
      000040 7B 00            [12]  640 	mov	r3,#0x00
      000042 8C 82            [24]  641 	mov	dpl,r4
      000044 8B 83            [24]  642 	mov	dph,r3
      000046 12r00r00         [24]  643 	lcall	_putchar
      000049 0D               [12]  644 	inc	r5
                                    645 ;	life.c:99: printstr("\033[2J\033[mGEN ");
      00004A BD 00 E7         [24]  646 	cjne	r5,#0x00,00121$
      00004D 0E               [12]  647 	inc	r6
      00004E 80 E4            [24]  648 	sjmp	00121$
      000050                        649 00109$:
                                    650 ;	life.c:91: print16x(generation[1]);
      000050 78r24            [12]  651 	mov	r0,#(_generation + 0x0002)
      000052 86 06            [24]  652 	mov	ar6,@r0
      000054 08               [12]  653 	inc	r0
                                    654 ;	life.c:39: putchar(digits[(a >> 12) & 0xf]);
      000055 E6               [12]  655 	mov	a,@r0
      000056 FF               [12]  656 	mov	r7,a
      000057 C4               [12]  657 	swap	a
      000058 54 0F            [12]  658 	anl	a,#0x0f
      00005A 30 E3 02         [24]  659 	jnb	acc.3,00193$
      00005D 44 F0            [12]  660 	orl	a,#0xf0
      00005F                        661 00193$:
      00005F FC               [12]  662 	mov	r4,a
      000060 33               [12]  663 	rlc	a
      000061 95 E0            [12]  664 	subb	a,acc
      000063 53 04 0F         [24]  665 	anl	ar4,#0x0f
      000066 EC               [12]  666 	mov	a,r4
      000067 24r00            [12]  667 	add	a,#_digits
      000069 F9               [12]  668 	mov	r1,a
      00006A 87 05            [24]  669 	mov	ar5,@r1
      00006C 7C 00            [12]  670 	mov	r4,#0x00
      00006E 8D 82            [24]  671 	mov	dpl,r5
      000070 8C 83            [24]  672 	mov	dph,r4
      000072 12r00r00         [24]  673 	lcall	_putchar
                                    674 ;	life.c:40: putchar(digits[(a >> 8) & 0xf]);
      000075 8F 05            [24]  675 	mov	ar5,r7
      000077 53 05 0F         [24]  676 	anl	ar5,#0x0f
      00007A ED               [12]  677 	mov	a,r5
      00007B 24r00            [12]  678 	add	a,#_digits
      00007D F9               [12]  679 	mov	r1,a
      00007E 87 05            [24]  680 	mov	ar5,@r1
      000080 7C 00            [12]  681 	mov	r4,#0x00
      000082 8D 82            [24]  682 	mov	dpl,r5
      000084 8C 83            [24]  683 	mov	dph,r4
      000086 12r00r00         [24]  684 	lcall	_putchar
                                    685 ;	life.c:41: putchar(digits[(a >> 4) & 0xf]);
      000089 8E 04            [24]  686 	mov	ar4,r6
      00008B EF               [12]  687 	mov	a,r7
      00008C C4               [12]  688 	swap	a
      00008D CC               [12]  689 	xch	a,r4
      00008E C4               [12]  690 	swap	a
      00008F 54 0F            [12]  691 	anl	a,#0x0f
      000091 6C               [12]  692 	xrl	a,r4
      000092 CC               [12]  693 	xch	a,r4
      000093 54 0F            [12]  694 	anl	a,#0x0f
      000095 CC               [12]  695 	xch	a,r4
      000096 6C               [12]  696 	xrl	a,r4
      000097 CC               [12]  697 	xch	a,r4
      000098 30 E3 02         [24]  698 	jnb	acc.3,00194$
      00009B 44 F0            [12]  699 	orl	a,#0xf0
      00009D                        700 00194$:
      00009D 53 04 0F         [24]  701 	anl	ar4,#0x0f
      0000A0 EC               [12]  702 	mov	a,r4
      0000A1 24r00            [12]  703 	add	a,#_digits
      0000A3 F9               [12]  704 	mov	r1,a
      0000A4 87 05            [24]  705 	mov	ar5,@r1
      0000A6 7C 00            [12]  706 	mov	r4,#0x00
      0000A8 8D 82            [24]  707 	mov	dpl,r5
      0000AA 8C 83            [24]  708 	mov	dph,r4
      0000AC 12r00r00         [24]  709 	lcall	_putchar
                                    710 ;	life.c:42: putchar(digits[a & 0xf]);
      0000AF 53 06 0F         [24]  711 	anl	ar6,#0x0f
      0000B2 EE               [12]  712 	mov	a,r6
      0000B3 24r00            [12]  713 	add	a,#_digits
      0000B5 F9               [12]  714 	mov	r1,a
      0000B6 87 07            [24]  715 	mov	ar7,@r1
      0000B8 7E 00            [12]  716 	mov	r6,#0x00
      0000BA 8F 82            [24]  717 	mov	dpl,r7
      0000BC 8E 83            [24]  718 	mov	dph,r6
      0000BE 12r00r00         [24]  719 	lcall	_putchar
                                    720 ;	life.c:92: print16x(generation[0]);
      0000C1 78r22            [12]  721 	mov	r0,#_generation
      0000C3 86 06            [24]  722 	mov	ar6,@r0
      0000C5 08               [12]  723 	inc	r0
                                    724 ;	life.c:39: putchar(digits[(a >> 12) & 0xf]);
      0000C6 E6               [12]  725 	mov	a,@r0
      0000C7 FF               [12]  726 	mov	r7,a
      0000C8 C4               [12]  727 	swap	a
      0000C9 54 0F            [12]  728 	anl	a,#0x0f
      0000CB 30 E3 02         [24]  729 	jnb	acc.3,00195$
      0000CE 44 F0            [12]  730 	orl	a,#0xf0
      0000D0                        731 00195$:
      0000D0 FC               [12]  732 	mov	r4,a
      0000D1 33               [12]  733 	rlc	a
      0000D2 95 E0            [12]  734 	subb	a,acc
      0000D4 53 04 0F         [24]  735 	anl	ar4,#0x0f
      0000D7 EC               [12]  736 	mov	a,r4
      0000D8 24r00            [12]  737 	add	a,#_digits
      0000DA F9               [12]  738 	mov	r1,a
      0000DB 87 05            [24]  739 	mov	ar5,@r1
      0000DD 7C 00            [12]  740 	mov	r4,#0x00
      0000DF 8D 82            [24]  741 	mov	dpl,r5
      0000E1 8C 83            [24]  742 	mov	dph,r4
      0000E3 12r00r00         [24]  743 	lcall	_putchar
                                    744 ;	life.c:40: putchar(digits[(a >> 8) & 0xf]);
      0000E6 8F 05            [24]  745 	mov	ar5,r7
      0000E8 53 05 0F         [24]  746 	anl	ar5,#0x0f
      0000EB ED               [12]  747 	mov	a,r5
      0000EC 24r00            [12]  748 	add	a,#_digits
      0000EE F9               [12]  749 	mov	r1,a
      0000EF 87 05            [24]  750 	mov	ar5,@r1
      0000F1 7C 00            [12]  751 	mov	r4,#0x00
      0000F3 8D 82            [24]  752 	mov	dpl,r5
      0000F5 8C 83            [24]  753 	mov	dph,r4
      0000F7 12r00r00         [24]  754 	lcall	_putchar
                                    755 ;	life.c:41: putchar(digits[(a >> 4) & 0xf]);
      0000FA 8E 04            [24]  756 	mov	ar4,r6
      0000FC EF               [12]  757 	mov	a,r7
      0000FD C4               [12]  758 	swap	a
      0000FE CC               [12]  759 	xch	a,r4
      0000FF C4               [12]  760 	swap	a
      000100 54 0F            [12]  761 	anl	a,#0x0f
      000102 6C               [12]  762 	xrl	a,r4
      000103 CC               [12]  763 	xch	a,r4
      000104 54 0F            [12]  764 	anl	a,#0x0f
      000106 CC               [12]  765 	xch	a,r4
      000107 6C               [12]  766 	xrl	a,r4
      000108 CC               [12]  767 	xch	a,r4
      000109 30 E3 02         [24]  768 	jnb	acc.3,00196$
      00010C 44 F0            [12]  769 	orl	a,#0xf0
      00010E                        770 00196$:
      00010E 53 04 0F         [24]  771 	anl	ar4,#0x0f
      000111 EC               [12]  772 	mov	a,r4
      000112 24r00            [12]  773 	add	a,#_digits
      000114 F9               [12]  774 	mov	r1,a
      000115 87 05            [24]  775 	mov	ar5,@r1
      000117 7C 00            [12]  776 	mov	r4,#0x00
      000119 8D 82            [24]  777 	mov	dpl,r5
      00011B 8C 83            [24]  778 	mov	dph,r4
      00011D 12r00r00         [24]  779 	lcall	_putchar
                                    780 ;	life.c:42: putchar(digits[a & 0xf]);
      000120 53 06 0F         [24]  781 	anl	ar6,#0x0f
      000123 EE               [12]  782 	mov	a,r6
      000124 24r00            [12]  783 	add	a,#_digits
      000126 F9               [12]  784 	mov	r1,a
      000127 87 07            [24]  785 	mov	ar7,@r1
      000129 7E 00            [12]  786 	mov	r6,#0x00
      00012B 8F 82            [24]  787 	mov	dpl,r7
      00012D 8E 83            [24]  788 	mov	dph,r6
      00012F 12r00r00         [24]  789 	lcall	_putchar
                                    790 ;	life.c:101: printstr("\r\n");
      000132 7Dr0C            [12]  791 	mov	r5,#___str_1
      000134 7Es00            [12]  792 	mov	r6,#(___str_1 >> 8)
      000136 7F 80            [12]  793 	mov	r7,#0x80
                                    794 ;	life.c:50: return;
      000138                        795 00124$:
                                    796 ;	life.c:48: for (; *s; s++) putchar(*s);
      000138 8D 82            [24]  797 	mov	dpl,r5
      00013A 8E 83            [24]  798 	mov	dph,r6
      00013C 8F F0            [24]  799 	mov	b,r7
      00013E 12r00r00         [24]  800 	lcall	__gptrget
      000141 FC               [12]  801 	mov	r4,a
      000142 60 10            [24]  802 	jz	00114$
      000144 7B 00            [12]  803 	mov	r3,#0x00
      000146 8C 82            [24]  804 	mov	dpl,r4
      000148 8B 83            [24]  805 	mov	dph,r3
      00014A 12r00r00         [24]  806 	lcall	_putchar
      00014D 0D               [12]  807 	inc	r5
                                    808 ;	life.c:101: printstr("\r\n");
      00014E BD 00 E7         [24]  809 	cjne	r5,#0x00,00124$
      000151 0E               [12]  810 	inc	r6
      000152 80 E4            [24]  811 	sjmp	00124$
      000154                        812 00114$:
                                    813 ;	life.c:84: generation[0]++;
      000154 78r22            [12]  814 	mov	r0,#_generation
      000156 86 06            [24]  815 	mov	ar6,@r0
      000158 08               [12]  816 	inc	r0
      000159 86 07            [24]  817 	mov	ar7,@r0
      00015B 0E               [12]  818 	inc	r6
      00015C BE 00 01         [24]  819 	cjne	r6,#0x00,00199$
      00015F 0F               [12]  820 	inc	r7
      000160                        821 00199$:
      000160 78r22            [12]  822 	mov	r0,#_generation
      000162 A6 06            [24]  823 	mov	@r0,ar6
      000164 08               [12]  824 	inc	r0
      000165 A6 07            [24]  825 	mov	@r0,ar7
                                    826 ;	life.c:85: if (!generation[0]) generation[1]++;
      000167 EE               [12]  827 	mov	a,r6
      000168 4F               [12]  828 	orl	a,r7
      000169 70 13            [24]  829 	jnz	00102$
      00016B 78r24            [12]  830 	mov	r0,#(_generation + 0x0002)
      00016D 86 06            [24]  831 	mov	ar6,@r0
      00016F 08               [12]  832 	inc	r0
      000170 86 07            [24]  833 	mov	ar7,@r0
      000172 0E               [12]  834 	inc	r6
      000173 BE 00 01         [24]  835 	cjne	r6,#0x00,00201$
      000176 0F               [12]  836 	inc	r7
      000177                        837 00201$:
      000177 78r24            [12]  838 	mov	r0,#(_generation + 0x0002)
      000179 A6 06            [24]  839 	mov	@r0,ar6
      00017B 08               [12]  840 	inc	r0
      00017C A6 07            [24]  841 	mov	@r0,ar7
                                    842 ;	life.c:102: updategen();
      00017E                        843 00102$:
                                    844 ;	life.c:105: for (x = 0; x < W; x++) {
      00017E 78r12            [12]  845 	mov	r0,#_x
      000180 E4               [12]  846 	clr	a
      000181 F6               [12]  847 	mov	@r0,a
      000182 08               [12]  848 	inc	r0
      000183 F6               [12]  849 	mov	@r0,a
      000184                        850 00131$:
                                    851 ;	life.c:106: for (y = 0; y < H; y++)
      000184 78r14            [12]  852 	mov	r0,#_y
      000186 E4               [12]  853 	clr	a
      000187 F6               [12]  854 	mov	@r0,a
      000188 08               [12]  855 	inc	r0
      000189 F6               [12]  856 	mov	@r0,a
      00018A                        857 00126$:
                                    858 ;	life.c:107: if (u[A2D(W, y, x)]) putchar('1');
      00018A 78r14            [12]  859 	mov	r0,#_y
      00018C E6               [12]  860 	mov	a,@r0
      00018D C0 E0            [24]  861 	push	acc
      00018F 08               [12]  862 	inc	r0
      000190 E6               [12]  863 	mov	a,@r0
      000191 C0 E0            [24]  864 	push	acc
      000193 90 00 30         [24]  865 	mov	dptr,#0x0030
      000196 12r00r00         [24]  866 	lcall	__mulint
      000199 AE 82            [24]  867 	mov	r6,dpl
      00019B AF 83            [24]  868 	mov	r7,dph
      00019D 15 81            [12]  869 	dec	sp
      00019F 15 81            [12]  870 	dec	sp
      0001A1 78r12            [12]  871 	mov	r0,#_x
      0001A3 E6               [12]  872 	mov	a,@r0
      0001A4 2E               [12]  873 	add	a,r6
      0001A5 FE               [12]  874 	mov	r6,a
      0001A6 08               [12]  875 	inc	r0
      0001A7 E6               [12]  876 	mov	a,@r0
      0001A8 3F               [12]  877 	addc	a,r7
      0001A9 FF               [12]  878 	mov	r7,a
      0001AA EE               [12]  879 	mov	a,r6
      0001AB 24r00            [12]  880 	add	a,#_u
      0001AD FE               [12]  881 	mov	r6,a
      0001AE EF               [12]  882 	mov	a,r7
      0001AF 34s24            [12]  883 	addc	a,#(_u >> 8)
      0001B1 FF               [12]  884 	mov	r7,a
      0001B2 8E 82            [24]  885 	mov	dpl,r6
      0001B4 8F 83            [24]  886 	mov	dph,r7
      0001B6 E0               [24]  887 	movx	a,@dptr
      0001B7 60 08            [24]  888 	jz	00104$
      0001B9 90 00 31         [24]  889 	mov	dptr,#0x0031
      0001BC 12r00r00         [24]  890 	lcall	_putchar
      0001BF 80 06            [24]  891 	sjmp	00127$
      0001C1                        892 00104$:
                                    893 ;	life.c:108: else putchar('0');
      0001C1 90 00 30         [24]  894 	mov	dptr,#0x0030
      0001C4 12r00r00         [24]  895 	lcall	_putchar
      0001C7                        896 00127$:
                                    897 ;	life.c:106: for (y = 0; y < H; y++)
      0001C7 78r14            [12]  898 	mov	r0,#_y
      0001C9 06               [12]  899 	inc	@r0
      0001CA B6 00 02         [24]  900 	cjne	@r0,#0x00,00203$
      0001CD 08               [12]  901 	inc	r0
      0001CE 06               [12]  902 	inc	@r0
      0001CF                        903 00203$:
      0001CF 78r14            [12]  904 	mov	r0,#_y
      0001D1 C3               [12]  905 	clr	c
      0001D2 E6               [12]  906 	mov	a,@r0
      0001D3 94 C0            [12]  907 	subb	a,#0xc0
      0001D5 08               [12]  908 	inc	r0
      0001D6 E6               [12]  909 	mov	a,@r0
      0001D7 64 80            [12]  910 	xrl	a,#0x80
      0001D9 94 80            [12]  911 	subb	a,#0x80
      0001DB 40 AD            [24]  912 	jc	00126$
                                    913 ;	life.c:109: printstr("\r\n");
      0001DD 7Dr0C            [12]  914 	mov	r5,#___str_1
      0001DF 7Es00            [12]  915 	mov	r6,#(___str_1 >> 8)
      0001E1 7F 80            [12]  916 	mov	r7,#0x80
                                    917 ;	life.c:50: return;
      0001E3                        918 00129$:
                                    919 ;	life.c:48: for (; *s; s++) putchar(*s);
      0001E3 8D 82            [24]  920 	mov	dpl,r5
      0001E5 8E 83            [24]  921 	mov	dph,r6
      0001E7 8F F0            [24]  922 	mov	b,r7
      0001E9 12r00r00         [24]  923 	lcall	__gptrget
      0001EC FC               [12]  924 	mov	r4,a
      0001ED 60 10            [24]  925 	jz	00119$
      0001EF 7B 00            [12]  926 	mov	r3,#0x00
      0001F1 8C 82            [24]  927 	mov	dpl,r4
      0001F3 8B 83            [24]  928 	mov	dph,r3
      0001F5 12r00r00         [24]  929 	lcall	_putchar
      0001F8 0D               [12]  930 	inc	r5
                                    931 ;	life.c:109: printstr("\r\n");
      0001F9 BD 00 E7         [24]  932 	cjne	r5,#0x00,00129$
      0001FC 0E               [12]  933 	inc	r6
      0001FD 80 E4            [24]  934 	sjmp	00129$
      0001FF                        935 00119$:
                                    936 ;	life.c:105: for (x = 0; x < W; x++) {
      0001FF 78r12            [12]  937 	mov	r0,#_x
      000201 06               [12]  938 	inc	@r0
      000202 B6 00 02         [24]  939 	cjne	@r0,#0x00,00207$
      000205 08               [12]  940 	inc	r0
      000206 06               [12]  941 	inc	@r0
      000207                        942 00207$:
      000207 78r12            [12]  943 	mov	r0,#_x
      000209 C3               [12]  944 	clr	c
      00020A E6               [12]  945 	mov	a,@r0
      00020B 94 30            [12]  946 	subb	a,#0x30
      00020D 08               [12]  947 	inc	r0
      00020E E6               [12]  948 	mov	a,@r0
      00020F 64 80            [12]  949 	xrl	a,#0x80
      000211 94 80            [12]  950 	subb	a,#0x80
      000213 50 03            [24]  951 	jnc	00208$
      000215 02r01r84         [24]  952 	ljmp	00131$
      000218                        953 00208$:
                                    954 ;	life.c:112: return;
                                    955 ;	life.c:113: }
      000218 22               [24]  956 	ret
                                    957 ;------------------------------------------------------------
                                    958 ;Allocation info for local variables in function 'main'
                                    959 ;------------------------------------------------------------
                                    960 ;__2621440023              Allocated to registers 
                                    961 ;s                         Allocated to registers r5 r6 r7 
                                    962 ;__1310720013              Allocated to registers 
                                    963 ;s                         Allocated to registers r5 r6 r7 
                                    964 ;__1310720015              Allocated to registers r6 r7 
                                    965 ;a                         Allocated to registers r4 r5 
                                    966 ;__1310720017              Allocated to registers 
                                    967 ;s                         Allocated to registers r5 r6 r7 
                                    968 ;__1310720019              Allocated to registers 
                                    969 ;s                         Allocated to registers r5 r6 r7 
                                    970 ;__1310720021              Allocated to registers 
                                    971 ;s                         Allocated to registers r5 r6 r7 
                                    972 ;__2621440028              Allocated to registers 
                                    973 ;s                         Allocated to registers r5 r6 r7 
                                    974 ;__4587520032              Allocated to registers 
                                    975 ;s                         Allocated to registers r5 r6 r7 
                                    976 ;__4587520034              Allocated to registers 
                                    977 ;s                         Allocated to registers r5 r6 r7 
                                    978 ;__4587520036              Allocated to registers 
                                    979 ;s                         Allocated to registers r5 r6 r7 
                                    980 ;__3276800038              Allocated to registers 
                                    981 ;s                         Allocated to registers r5 r6 r7 
                                    982 ;__1310720040              Allocated to registers 
                                    983 ;s                         Allocated to registers r5 r6 r7 
                                    984 ;sloc0                     Allocated to stack - _bp +1
                                    985 ;sloc1                     Allocated to stack - _bp +2
                                    986 ;sloc2                     Allocated to stack - _bp +4
                                    987 ;sloc3                     Allocated to stack - _bp +6
                                    988 ;sloc4                     Allocated to stack - _bp +8
                                    989 ;sloc5                     Allocated to stack - _bp +10
                                    990 ;sloc6                     Allocated to stack - _bp +12
                                    991 ;R                         Allocated with name '_main_R_65536_165'
                                    992 ;------------------------------------------------------------
                                    993 ;	life.c:221: void main(void) {
                                    994 ;	-----------------------------------------
                                    995 ;	 function main
                                    996 ;	-----------------------------------------
      000219                        997 _main:
      000219 C0*00            [24]  998 	push	_bp
      00021B E5 81            [12]  999 	mov	a,sp
      00021D F5*00            [12] 1000 	mov	_bp,a
      00021F 24 0D            [12] 1001 	add	a,#0x0d
      000221 F5 81            [12] 1002 	mov	sp,a
                                   1003 ;	life.c:224: srand(*R);
      000223 90r6Cr00         [24] 1004 	mov	dptr,#_main_R_65536_165
      000226 E0               [24] 1005 	movx	a,@dptr
      000227 FE               [12] 1006 	mov	r6,a
      000228 A3               [24] 1007 	inc	dptr
      000229 E0               [24] 1008 	movx	a,@dptr
      00022A FF               [12] 1009 	mov	r7,a
      00022B 8E 82            [24] 1010 	mov	dpl,r6
      00022D 8F 83            [24] 1011 	mov	dph,r7
      00022F E0               [24] 1012 	movx	a,@dptr
      000230 FE               [12] 1013 	mov	r6,a
      000231 A3               [24] 1014 	inc	dptr
      000232 E0               [24] 1015 	movx	a,@dptr
      000233 FF               [12] 1016 	mov	r7,a
      000234 8E 82            [24] 1017 	mov	dpl,r6
      000236 8F 83            [24] 1018 	mov	dph,r7
      000238 12r00r00         [24] 1019 	lcall	_srand
                                   1020 ;	life.c:226: IT0 = 1;
                                   1021 ;	assignBit
      00023B D2 88            [12] 1022 	setb	_IT0
                                   1023 ;	life.c:227: IT1 = 1;
                                   1024 ;	assignBit
      00023D D2 8A            [12] 1025 	setb	_IT1
                                   1026 ;	life.c:228: EX0 = 1;
                                   1027 ;	assignBit
      00023F D2 A8            [12] 1028 	setb	_EX0
                                   1029 ;	life.c:229: EX1 = 1;
                                   1030 ;	assignBit
      000241 D2 AA            [12] 1031 	setb	_EX1
                                   1032 ;	life.c:230: EA = 1;
                                   1033 ;	assignBit
      000243 D2 AF            [12] 1034 	setb	_EA
                                   1035 ;	life.c:232: for (i0 = 0; !i0; ) {		
      000245 78r10            [12] 1036 	mov	r0,#_i0
      000247 76 00            [12] 1037 	mov	@r0,#0x00
      000249                       1038 00242$:
                                   1039 ;	life.c:233: printstr("\033[2J\033[?25l\033[mLIFE INIT T L R\r\n");
      000249 7Dr21            [12] 1040 	mov	r5,#___str_5
      00024B 7Es00            [12] 1041 	mov	r6,#(___str_5 >> 8)
      00024D 7F 80            [12] 1042 	mov	r7,#0x80
                                   1043 ;	life.c:50: return;
      00024F                       1044 00198$:
                                   1045 ;	life.c:48: for (; *s; s++) putchar(*s);
      00024F 8D 82            [24] 1046 	mov	dpl,r5
      000251 8E 83            [24] 1047 	mov	dph,r6
      000253 8F F0            [24] 1048 	mov	b,r7
      000255 12r00r00         [24] 1049 	lcall	__gptrget
      000258 FC               [12] 1050 	mov	r4,a
      000259 60 10            [24] 1051 	jz	00109$
      00025B 7B 00            [12] 1052 	mov	r3,#0x00
      00025D 8C 82            [24] 1053 	mov	dpl,r4
      00025F 8B 83            [24] 1054 	mov	dph,r3
      000261 12r00r00         [24] 1055 	lcall	_putchar
      000264 0D               [12] 1056 	inc	r5
                                   1057 ;	life.c:234: while (1) {
      000265 BD 00 E7         [24] 1058 	cjne	r5,#0x00,00198$
      000268 0E               [12] 1059 	inc	r6
      000269 80 E4            [24] 1060 	sjmp	00198$
      00026B                       1061 00109$:
                                   1062 ;	life.c:235: c = toupper(getchar());
      00026B 12r00r05         [24] 1063 	lcall	_getchar
      00026E 12r00r00         [24] 1064 	lcall	_toupper
      000271 AE 82            [24] 1065 	mov	r6,dpl
      000273 AF 83            [24] 1066 	mov	r7,dph
      000275 78r18            [12] 1067 	mov	r0,#_c
      000277 A6 06            [24] 1068 	mov	@r0,ar6
      000279 08               [12] 1069 	inc	r0
      00027A A6 07            [24] 1070 	mov	@r0,ar7
                                   1071 ;	life.c:236: if (i0 || (c == (int)'T')) goto terminate;
      00027C 78r10            [12] 1072 	mov	r0,#_i0
      00027E E6               [12] 1073 	mov	a,@r0
      00027F 60 03            [24] 1074 	jz	00500$
      000281 02r0Ar87         [24] 1075 	ljmp	00138$
      000284                       1076 00500$:
      000284 BE 54 06         [24] 1077 	cjne	r6,#0x54,00501$
      000287 BF 00 03         [24] 1078 	cjne	r7,#0x00,00501$
      00028A 02r0Ar87         [24] 1079 	ljmp	00138$
      00028D                       1080 00501$:
                                   1081 ;	life.c:237: else if ((c == (int)'L') || (c == (int)'R')) break;
      00028D BE 4C 05         [24] 1082 	cjne	r6,#0x4c,00502$
      000290 BF 00 02         [24] 1083 	cjne	r7,#0x00,00502$
      000293 80 06            [24] 1084 	sjmp	00285$
      000295                       1085 00502$:
      000295 BE 52 D3         [24] 1086 	cjne	r6,#0x52,00109$
      000298 BF 00 D0         [24] 1087 	cjne	r7,#0x00,00109$
                                   1088 ;	life.c:240: reload:
      00029B                       1089 00285$:
      00029B                       1090 00111$:
                                   1091 ;	life.c:116: memset(u, 0, sizeof (u));
      00029B E4               [12] 1092 	clr	a
      00029C C0 E0            [24] 1093 	push	acc
      00029E 74 24            [12] 1094 	mov	a,#0x24
      0002A0 C0 E0            [24] 1095 	push	acc
      0002A2 E4               [12] 1096 	clr	a
      0002A3 C0 E0            [24] 1097 	push	acc
      0002A5 90r24r00         [24] 1098 	mov	dptr,#_u
      0002A8 75 F0 00         [24] 1099 	mov	b,#0x00
      0002AB 12r00r00         [24] 1100 	lcall	_memset
      0002AE 15 81            [12] 1101 	dec	sp
      0002B0 15 81            [12] 1102 	dec	sp
      0002B2 15 81            [12] 1103 	dec	sp
                                   1104 ;	life.c:117: memset(pu, 0, sizeof (pu));
      0002B4 E4               [12] 1105 	clr	a
      0002B5 C0 E0            [24] 1106 	push	acc
      0002B7 74 24            [12] 1107 	mov	a,#0x24
      0002B9 C0 E0            [24] 1108 	push	acc
      0002BB E4               [12] 1109 	clr	a
      0002BC C0 E0            [24] 1110 	push	acc
      0002BE 90r00r00         [24] 1111 	mov	dptr,#_pu
      0002C1 75 F0 00         [24] 1112 	mov	b,#0x00
      0002C4 12r00r00         [24] 1113 	lcall	_memset
      0002C7 15 81            [12] 1114 	dec	sp
      0002C9 15 81            [12] 1115 	dec	sp
      0002CB 15 81            [12] 1116 	dec	sp
                                   1117 ;	life.c:242: if (c == (int)'L') loadu();
      0002CD 78r18            [12] 1118 	mov	r0,#_c
      0002CF B6 4C 06         [24] 1119 	cjne	@r0,#0x4c,00505$
      0002D2 08               [12] 1120 	inc	r0
      0002D3 B6 00 02         [24] 1121 	cjne	@r0,#0x00,00505$
      0002D6 80 03            [24] 1122 	sjmp	00506$
      0002D8                       1123 00505$:
      0002D8 02r04r65         [24] 1124 	ljmp	00113$
      0002DB                       1125 00506$:
                                   1126 ;	life.c:123: j = 0;
      0002DB 78r16            [12] 1127 	mov	r0,#_j
      0002DD E4               [12] 1128 	clr	a
      0002DE F6               [12] 1129 	mov	@r0,a
      0002DF 08               [12] 1130 	inc	r0
      0002E0 F6               [12] 1131 	mov	@r0,a
                                   1132 ;	life.c:125: printstr("LOAD <");
      0002E1 7Dr0F            [12] 1133 	mov	r5,#___str_2
      0002E3 7Es00            [12] 1134 	mov	r6,#(___str_2 >> 8)
      0002E5 7F 80            [12] 1135 	mov	r7,#0x80
                                   1136 ;	life.c:50: return;
      0002E7                       1137 00201$:
                                   1138 ;	life.c:48: for (; *s; s++) putchar(*s);
      0002E7 8D 82            [24] 1139 	mov	dpl,r5
      0002E9 8E 83            [24] 1140 	mov	dph,r6
      0002EB 8F F0            [24] 1141 	mov	b,r7
      0002ED 12r00r00         [24] 1142 	lcall	__gptrget
      0002F0 FC               [12] 1143 	mov	r4,a
      0002F1 60 10            [24] 1144 	jz	00143$
      0002F3 7B 00            [12] 1145 	mov	r3,#0x00
      0002F5 8C 82            [24] 1146 	mov	dpl,r4
      0002F7 8B 83            [24] 1147 	mov	dph,r3
      0002F9 12r00r00         [24] 1148 	lcall	_putchar
      0002FC 0D               [12] 1149 	inc	r5
                                   1150 ;	life.c:125: printstr("LOAD <");
      0002FD BD 00 E7         [24] 1151 	cjne	r5,#0x00,00201$
      000300 0E               [12] 1152 	inc	r6
      000301 80 E4            [24] 1153 	sjmp	00201$
      000303                       1154 00143$:
                                   1155 ;	life.c:127: for (y = 0; y < (H * W); y += W) {
      000303 78r14            [12] 1156 	mov	r0,#_y
      000305 E4               [12] 1157 	clr	a
      000306 F6               [12] 1158 	mov	@r0,a
      000307 08               [12] 1159 	inc	r0
      000308 F6               [12] 1160 	mov	@r0,a
      000309                       1161 00204$:
                                   1162 ;	life.c:128: for (x = 0; x < W; x++) {
      000309 78r12            [12] 1163 	mov	r0,#_x
      00030B E4               [12] 1164 	clr	a
      00030C F6               [12] 1165 	mov	@r0,a
      00030D 08               [12] 1166 	inc	r0
      00030E F6               [12] 1167 	mov	@r0,a
                                   1168 ;	life.c:129: while (1) {
      00030F                       1169 00156$:
                                   1170 ;	life.c:130: c = getchar();
      00030F 12r00r05         [24] 1171 	lcall	_getchar
      000312 AE 82            [24] 1172 	mov	r6,dpl
      000314 AF 83            [24] 1173 	mov	r7,dph
      000316 78r18            [12] 1174 	mov	r0,#_c
      000318 A6 06            [24] 1175 	mov	@r0,ar6
      00031A 08               [12] 1176 	inc	r0
      00031B A6 07            [24] 1177 	mov	@r0,ar7
                                   1178 ;	life.c:131: if (c == (int)'0') {
      00031D BE 30 25         [24] 1179 	cjne	r6,#0x30,00154$
      000320 BF 00 22         [24] 1180 	cjne	r7,#0x00,00154$
                                   1181 ;	life.c:132: u[y + x] = 0;
      000323 78r14            [12] 1182 	mov	r0,#_y
      000325 79r12            [12] 1183 	mov	r1,#_x
      000327 E7               [12] 1184 	mov	a,@r1
      000328 26               [12] 1185 	add	a,@r0
      000329 FC               [12] 1186 	mov	r4,a
      00032A 09               [12] 1187 	inc	r1
      00032B E7               [12] 1188 	mov	a,@r1
      00032C 08               [12] 1189 	inc	r0
      00032D 36               [12] 1190 	addc	a,@r0
      00032E FD               [12] 1191 	mov	r5,a
      00032F EC               [12] 1192 	mov	a,r4
      000330 24r00            [12] 1193 	add	a,#_u
      000332 F5 82            [12] 1194 	mov	dpl,a
      000334 ED               [12] 1195 	mov	a,r5
      000335 34s24            [12] 1196 	addc	a,#(_u >> 8)
      000337 F5 83            [12] 1197 	mov	dph,a
      000339 E4               [12] 1198 	clr	a
      00033A F0               [24] 1199 	movx	@dptr,a
                                   1200 ;	life.c:133: j++;
      00033B 78r16            [12] 1201 	mov	r0,#_j
      00033D 06               [12] 1202 	inc	@r0
      00033E B6 00 02         [24] 1203 	cjne	@r0,#0x00,00511$
      000341 08               [12] 1204 	inc	r0
      000342 06               [12] 1205 	inc	@r0
      000343                       1206 00511$:
                                   1207 ;	life.c:134: break;
      000343 80 39            [24] 1208 	sjmp	00159$
      000345                       1209 00154$:
                                   1210 ;	life.c:135: } else if (c == (int)'1') {
      000345 BE 31 26         [24] 1211 	cjne	r6,#0x31,00152$
      000348 BF 00 23         [24] 1212 	cjne	r7,#0x00,00152$
                                   1213 ;	life.c:136: u[y + x] = 1;
      00034B 78r14            [12] 1214 	mov	r0,#_y
      00034D 79r12            [12] 1215 	mov	r1,#_x
      00034F E7               [12] 1216 	mov	a,@r1
      000350 26               [12] 1217 	add	a,@r0
      000351 FC               [12] 1218 	mov	r4,a
      000352 09               [12] 1219 	inc	r1
      000353 E7               [12] 1220 	mov	a,@r1
      000354 08               [12] 1221 	inc	r0
      000355 36               [12] 1222 	addc	a,@r0
      000356 FD               [12] 1223 	mov	r5,a
      000357 EC               [12] 1224 	mov	a,r4
      000358 24r00            [12] 1225 	add	a,#_u
      00035A F5 82            [12] 1226 	mov	dpl,a
      00035C ED               [12] 1227 	mov	a,r5
      00035D 34s24            [12] 1228 	addc	a,#(_u >> 8)
      00035F F5 83            [12] 1229 	mov	dph,a
      000361 74 01            [12] 1230 	mov	a,#0x01
      000363 F0               [24] 1231 	movx	@dptr,a
                                   1232 ;	life.c:137: j++;
      000364 78r16            [12] 1233 	mov	r0,#_j
      000366 06               [12] 1234 	inc	@r0
      000367 B6 00 02         [24] 1235 	cjne	@r0,#0x00,00514$
      00036A 08               [12] 1236 	inc	r0
      00036B 06               [12] 1237 	inc	@r0
      00036C                       1238 00514$:
                                   1239 ;	life.c:138: break;
      00036C 80 10            [24] 1240 	sjmp	00159$
      00036E                       1241 00152$:
                                   1242 ;	life.c:139: } else if (c == (int)'~') goto br_inner;
      00036E BE 7E 05         [24] 1243 	cjne	r6,#0x7e,00515$
      000371 BF 00 02         [24] 1244 	cjne	r7,#0x00,00515$
      000374 80 21            [24] 1245 	sjmp	00205$
      000376                       1246 00515$:
                                   1247 ;	life.c:140: else if (c == (int)'#') goto out;
                                   1248 ;	life.c:144: break;
      000376 BE 23 96         [24] 1249 	cjne	r6,#0x23,00156$
      000379 BF 00 93         [24] 1250 	cjne	r7,#0x00,00156$
      00037C 80 31            [24] 1251 	sjmp	00169$
      00037E                       1252 00159$:
                                   1253 ;	life.c:128: for (x = 0; x < W; x++) {
      00037E 78r12            [12] 1254 	mov	r0,#_x
      000380 06               [12] 1255 	inc	@r0
      000381 B6 00 02         [24] 1256 	cjne	@r0,#0x00,00517$
      000384 08               [12] 1257 	inc	r0
      000385 06               [12] 1258 	inc	@r0
      000386                       1259 00517$:
      000386 78r12            [12] 1260 	mov	r0,#_x
      000388 C3               [12] 1261 	clr	c
      000389 E6               [12] 1262 	mov	a,@r0
      00038A 94 30            [12] 1263 	subb	a,#0x30
      00038C 08               [12] 1264 	inc	r0
      00038D E6               [12] 1265 	mov	a,@r0
      00038E 64 80            [12] 1266 	xrl	a,#0x80
      000390 94 80            [12] 1267 	subb	a,#0x80
      000392 50 03            [24] 1268 	jnc	00518$
      000394 02r03r0F         [24] 1269 	ljmp	00156$
      000397                       1270 00518$:
      000397                       1271 00205$:
                                   1272 ;	life.c:127: for (y = 0; y < (H * W); y += W) {
      000397 78r14            [12] 1273 	mov	r0,#_y
      000399 74 30            [12] 1274 	mov	a,#0x30
      00039B 26               [12] 1275 	add	a,@r0
      00039C F6               [12] 1276 	mov	@r0,a
      00039D E4               [12] 1277 	clr	a
      00039E 08               [12] 1278 	inc	r0
      00039F 36               [12] 1279 	addc	a,@r0
      0003A0 F6               [12] 1280 	mov	@r0,a
      0003A1 78r14            [12] 1281 	mov	r0,#_y
      0003A3 C3               [12] 1282 	clr	c
      0003A4 08               [12] 1283 	inc	r0
      0003A5 E6               [12] 1284 	mov	a,@r0
      0003A6 64 80            [12] 1285 	xrl	a,#0x80
      0003A8 94 A4            [12] 1286 	subb	a,#0xa4
      0003AA 50 03            [24] 1287 	jnc	00519$
      0003AC 02r03r09         [24] 1288 	ljmp	00204$
      0003AF                       1289 00519$:
                                   1290 ;	life.c:148: out:
      0003AF                       1291 00169$:
                                   1292 ;	life.c:149: if (c != (int)'#')
      0003AF BE 23 05         [24] 1293 	cjne	r6,#0x23,00520$
      0003B2 BF 00 02         [24] 1294 	cjne	r7,#0x00,00520$
      0003B5 80 14            [24] 1295 	sjmp	00168$
      0003B7                       1296 00520$:
                                   1297 ;	life.c:150: while (1) {
      0003B7                       1298 00165$:
                                   1299 ;	life.c:151: c = getchar();
      0003B7 12r00r05         [24] 1300 	lcall	_getchar
      0003BA AE 82            [24] 1301 	mov	r6,dpl
      0003BC AF 83            [24] 1302 	mov	r7,dph
      0003BE 78r18            [12] 1303 	mov	r0,#_c
      0003C0 A6 06            [24] 1304 	mov	@r0,ar6
      0003C2 08               [12] 1305 	inc	r0
      0003C3 A6 07            [24] 1306 	mov	@r0,ar7
                                   1307 ;	life.c:152: if (c == (int)'#') break;
      0003C5 BE 23 EF         [24] 1308 	cjne	r6,#0x23,00165$
      0003C8 BF 00 EC         [24] 1309 	cjne	r7,#0x00,00165$
      0003CB                       1310 00168$:
                                   1311 ;	life.c:154: print16x(j);
      0003CB 78r16            [12] 1312 	mov	r0,#_j
      0003CD 86 06            [24] 1313 	mov	ar6,@r0
      0003CF 08               [12] 1314 	inc	r0
      0003D0 86 07            [24] 1315 	mov	ar7,@r0
      0003D2 8E 04            [24] 1316 	mov	ar4,r6
                                   1317 ;	life.c:39: putchar(digits[(a >> 12) & 0xf]);
      0003D4 EF               [12] 1318 	mov	a,r7
      0003D5 FD               [12] 1319 	mov	r5,a
      0003D6 C4               [12] 1320 	swap	a
      0003D7 54 0F            [12] 1321 	anl	a,#0x0f
      0003D9 30 E3 02         [24] 1322 	jnb	acc.3,00523$
      0003DC 44 F0            [12] 1323 	orl	a,#0xf0
      0003DE                       1324 00523$:
      0003DE FE               [12] 1325 	mov	r6,a
      0003DF 33               [12] 1326 	rlc	a
      0003E0 95 E0            [12] 1327 	subb	a,acc
      0003E2 53 06 0F         [24] 1328 	anl	ar6,#0x0f
      0003E5 EE               [12] 1329 	mov	a,r6
      0003E6 24r00            [12] 1330 	add	a,#_digits
      0003E8 F9               [12] 1331 	mov	r1,a
      0003E9 87 07            [24] 1332 	mov	ar7,@r1
      0003EB 7E 00            [12] 1333 	mov	r6,#0x00
      0003ED 8F 82            [24] 1334 	mov	dpl,r7
      0003EF 8E 83            [24] 1335 	mov	dph,r6
      0003F1 12r00r00         [24] 1336 	lcall	_putchar
                                   1337 ;	life.c:40: putchar(digits[(a >> 8) & 0xf]);
      0003F4 8D 07            [24] 1338 	mov	ar7,r5
      0003F6 53 07 0F         [24] 1339 	anl	ar7,#0x0f
      0003F9 EF               [12] 1340 	mov	a,r7
      0003FA 24r00            [12] 1341 	add	a,#_digits
      0003FC F9               [12] 1342 	mov	r1,a
      0003FD 87 07            [24] 1343 	mov	ar7,@r1
      0003FF 7E 00            [12] 1344 	mov	r6,#0x00
      000401 8F 82            [24] 1345 	mov	dpl,r7
      000403 8E 83            [24] 1346 	mov	dph,r6
      000405 12r00r00         [24] 1347 	lcall	_putchar
                                   1348 ;	life.c:41: putchar(digits[(a >> 4) & 0xf]);
      000408 8C 06            [24] 1349 	mov	ar6,r4
      00040A ED               [12] 1350 	mov	a,r5
      00040B C4               [12] 1351 	swap	a
      00040C CE               [12] 1352 	xch	a,r6
      00040D C4               [12] 1353 	swap	a
      00040E 54 0F            [12] 1354 	anl	a,#0x0f
      000410 6E               [12] 1355 	xrl	a,r6
      000411 CE               [12] 1356 	xch	a,r6
      000412 54 0F            [12] 1357 	anl	a,#0x0f
      000414 CE               [12] 1358 	xch	a,r6
      000415 6E               [12] 1359 	xrl	a,r6
      000416 CE               [12] 1360 	xch	a,r6
      000417 30 E3 02         [24] 1361 	jnb	acc.3,00524$
      00041A 44 F0            [12] 1362 	orl	a,#0xf0
      00041C                       1363 00524$:
      00041C 53 06 0F         [24] 1364 	anl	ar6,#0x0f
      00041F EE               [12] 1365 	mov	a,r6
      000420 24r00            [12] 1366 	add	a,#_digits
      000422 F9               [12] 1367 	mov	r1,a
      000423 87 07            [24] 1368 	mov	ar7,@r1
      000425 7E 00            [12] 1369 	mov	r6,#0x00
      000427 8F 82            [24] 1370 	mov	dpl,r7
      000429 8E 83            [24] 1371 	mov	dph,r6
      00042B 12r00r00         [24] 1372 	lcall	_putchar
                                   1373 ;	life.c:42: putchar(digits[a & 0xf]);
      00042E 53 04 0F         [24] 1374 	anl	ar4,#0x0f
      000431 EC               [12] 1375 	mov	a,r4
      000432 24r00            [12] 1376 	add	a,#_digits
      000434 F9               [12] 1377 	mov	r1,a
      000435 87 07            [24] 1378 	mov	ar7,@r1
      000437 7E 00            [12] 1379 	mov	r6,#0x00
      000439 8F 82            [24] 1380 	mov	dpl,r7
      00043B 8E 83            [24] 1381 	mov	dph,r6
      00043D 12r00r00         [24] 1382 	lcall	_putchar
                                   1383 ;	life.c:155: printstr(">\r\n");
      000440 7Dr16            [12] 1384 	mov	r5,#___str_3
      000442 7Es00            [12] 1385 	mov	r6,#(___str_3 >> 8)
      000444 7F 80            [12] 1386 	mov	r7,#0x80
                                   1387 ;	life.c:50: return;
      000446                       1388 00207$:
                                   1389 ;	life.c:48: for (; *s; s++) putchar(*s);
      000446 8D 82            [24] 1390 	mov	dpl,r5
      000448 8E 83            [24] 1391 	mov	dph,r6
      00044A 8F F0            [24] 1392 	mov	b,r7
      00044C 12r00r00         [24] 1393 	lcall	__gptrget
      00044F FC               [12] 1394 	mov	r4,a
      000450 70 03            [24] 1395 	jnz	00525$
      000452 02r05r10         [24] 1396 	ljmp	00114$
      000455                       1397 00525$:
      000455 7B 00            [12] 1398 	mov	r3,#0x00
      000457 8C 82            [24] 1399 	mov	dpl,r4
      000459 8B 83            [24] 1400 	mov	dph,r3
      00045B 12r00r00         [24] 1401 	lcall	_putchar
      00045E 0D               [12] 1402 	inc	r5
                                   1403 ;	life.c:242: if (c == (int)'L') loadu();
      00045F BD 00 E4         [24] 1404 	cjne	r5,#0x00,00207$
      000462 0E               [12] 1405 	inc	r6
      000463 80 E1            [24] 1406 	sjmp	00207$
      000465                       1407 00113$:
                                   1408 ;	life.c:161: j = 0;
      000465 78r16            [12] 1409 	mov	r0,#_j
      000467 E4               [12] 1410 	clr	a
      000468 F6               [12] 1411 	mov	@r0,a
      000469 08               [12] 1412 	inc	r0
      00046A F6               [12] 1413 	mov	@r0,a
                                   1414 ;	life.c:163: printstr("RANDOM");
      00046B 7Dr1A            [12] 1415 	mov	r5,#___str_4
      00046D 7Es00            [12] 1416 	mov	r6,#(___str_4 >> 8)
      00046F 7F 80            [12] 1417 	mov	r7,#0x80
                                   1418 ;	life.c:50: return;
      000471                       1419 00210$:
                                   1420 ;	life.c:48: for (; *s; s++) putchar(*s);
      000471 8D 82            [24] 1421 	mov	dpl,r5
      000473 8E 83            [24] 1422 	mov	dph,r6
      000475 8F F0            [24] 1423 	mov	b,r7
      000477 12r00r00         [24] 1424 	lcall	__gptrget
      00047A FC               [12] 1425 	mov	r4,a
      00047B 60 10            [24] 1426 	jz	00175$
      00047D 7B 00            [12] 1427 	mov	r3,#0x00
      00047F 8C 82            [24] 1428 	mov	dpl,r4
      000481 8B 83            [24] 1429 	mov	dph,r3
      000483 12r00r00         [24] 1430 	lcall	_putchar
      000486 0D               [12] 1431 	inc	r5
                                   1432 ;	life.c:163: printstr("RANDOM");
      000487 BD 00 E7         [24] 1433 	cjne	r5,#0x00,00210$
      00048A 0E               [12] 1434 	inc	r6
      00048B 80 E4            [24] 1435 	sjmp	00210$
      00048D                       1436 00175$:
                                   1437 ;	life.c:165: for (y = 0; y < (H * W); y += W)
      00048D 78r14            [12] 1438 	mov	r0,#_y
      00048F E4               [12] 1439 	clr	a
      000490 F6               [12] 1440 	mov	@r0,a
      000491 08               [12] 1441 	inc	r0
      000492 F6               [12] 1442 	mov	@r0,a
      000493                       1443 00214$:
                                   1444 ;	life.c:166: for (x = 0; x < W; x++)
      000493 78r12            [12] 1445 	mov	r0,#_x
      000495 E4               [12] 1446 	clr	a
      000496 F6               [12] 1447 	mov	@r0,a
      000497 08               [12] 1448 	inc	r0
      000498 F6               [12] 1449 	mov	@r0,a
      000499                       1450 00212$:
                                   1451 ;	life.c:167: u[y + x] = rand() & 1;
      000499 78r14            [12] 1452 	mov	r0,#_y
      00049B 79r12            [12] 1453 	mov	r1,#_x
      00049D E7               [12] 1454 	mov	a,@r1
      00049E 26               [12] 1455 	add	a,@r0
      00049F FE               [12] 1456 	mov	r6,a
      0004A0 09               [12] 1457 	inc	r1
      0004A1 E7               [12] 1458 	mov	a,@r1
      0004A2 08               [12] 1459 	inc	r0
      0004A3 36               [12] 1460 	addc	a,@r0
      0004A4 FF               [12] 1461 	mov	r7,a
      0004A5 EE               [12] 1462 	mov	a,r6
      0004A6 24r00            [12] 1463 	add	a,#_u
      0004A8 FE               [12] 1464 	mov	r6,a
      0004A9 EF               [12] 1465 	mov	a,r7
      0004AA 34s24            [12] 1466 	addc	a,#(_u >> 8)
      0004AC FF               [12] 1467 	mov	r7,a
      0004AD C0 07            [24] 1468 	push	ar7
      0004AF C0 06            [24] 1469 	push	ar6
      0004B1 12r00r00         [24] 1470 	lcall	_rand
      0004B4 AC 82            [24] 1471 	mov	r4,dpl
      0004B6 D0 06            [24] 1472 	pop	ar6
      0004B8 D0 07            [24] 1473 	pop	ar7
      0004BA 53 04 01         [24] 1474 	anl	ar4,#0x01
      0004BD 8E 82            [24] 1475 	mov	dpl,r6
      0004BF 8F 83            [24] 1476 	mov	dph,r7
      0004C1 EC               [12] 1477 	mov	a,r4
      0004C2 F0               [24] 1478 	movx	@dptr,a
                                   1479 ;	life.c:166: for (x = 0; x < W; x++)
      0004C3 78r12            [12] 1480 	mov	r0,#_x
      0004C5 06               [12] 1481 	inc	@r0
      0004C6 B6 00 02         [24] 1482 	cjne	@r0,#0x00,00529$
      0004C9 08               [12] 1483 	inc	r0
      0004CA 06               [12] 1484 	inc	@r0
      0004CB                       1485 00529$:
      0004CB 78r12            [12] 1486 	mov	r0,#_x
      0004CD C3               [12] 1487 	clr	c
      0004CE E6               [12] 1488 	mov	a,@r0
      0004CF 94 30            [12] 1489 	subb	a,#0x30
      0004D1 08               [12] 1490 	inc	r0
      0004D2 E6               [12] 1491 	mov	a,@r0
      0004D3 64 80            [12] 1492 	xrl	a,#0x80
      0004D5 94 80            [12] 1493 	subb	a,#0x80
      0004D7 40 C0            [24] 1494 	jc	00212$
                                   1495 ;	life.c:165: for (y = 0; y < (H * W); y += W)
      0004D9 78r14            [12] 1496 	mov	r0,#_y
      0004DB 74 30            [12] 1497 	mov	a,#0x30
      0004DD 26               [12] 1498 	add	a,@r0
      0004DE F6               [12] 1499 	mov	@r0,a
      0004DF E4               [12] 1500 	clr	a
      0004E0 08               [12] 1501 	inc	r0
      0004E1 36               [12] 1502 	addc	a,@r0
      0004E2 F6               [12] 1503 	mov	@r0,a
      0004E3 78r14            [12] 1504 	mov	r0,#_y
      0004E5 C3               [12] 1505 	clr	c
      0004E6 08               [12] 1506 	inc	r0
      0004E7 E6               [12] 1507 	mov	a,@r0
      0004E8 64 80            [12] 1508 	xrl	a,#0x80
      0004EA 94 A4            [12] 1509 	subb	a,#0xa4
      0004EC 40 A5            [24] 1510 	jc	00214$
                                   1511 ;	life.c:169: printstr("\r\n");
      0004EE 7Dr0C            [12] 1512 	mov	r5,#___str_1
      0004F0 7Es00            [12] 1513 	mov	r6,#(___str_1 >> 8)
      0004F2 7F 80            [12] 1514 	mov	r7,#0x80
                                   1515 ;	life.c:50: return;
      0004F4                       1516 00217$:
                                   1517 ;	life.c:48: for (; *s; s++) putchar(*s);
      0004F4 8D 82            [24] 1518 	mov	dpl,r5
      0004F6 8E 83            [24] 1519 	mov	dph,r6
      0004F8 8F F0            [24] 1520 	mov	b,r7
      0004FA 12r00r00         [24] 1521 	lcall	__gptrget
      0004FD FC               [12] 1522 	mov	r4,a
      0004FE 60 10            [24] 1523 	jz	00114$
      000500 7B 00            [12] 1524 	mov	r3,#0x00
      000502 8C 82            [24] 1525 	mov	dpl,r4
      000504 8B 83            [24] 1526 	mov	dph,r3
      000506 12r00r00         [24] 1527 	lcall	_putchar
      000509 0D               [12] 1528 	inc	r5
                                   1529 ;	life.c:243: else loadr();
      00050A BD 00 E7         [24] 1530 	cjne	r5,#0x00,00217$
      00050D 0E               [12] 1531 	inc	r6
      00050E 80 E4            [24] 1532 	sjmp	00217$
      000510                       1533 00114$:
                                   1534 ;	life.c:244: show(0);
      000510 75 82 00         [24] 1535 	mov	dpl,#0x00
      000513 12r00r26         [24] 1536 	lcall	_show
                                   1537 ;	life.c:246: printstr("READY T L R S\r\n");
      000516 7Dr40            [12] 1538 	mov	r5,#___str_6
      000518 7Es00            [12] 1539 	mov	r6,#(___str_6 >> 8)
      00051A 7F 80            [12] 1540 	mov	r7,#0x80
                                   1541 ;	life.c:50: return;
      00051C                       1542 00220$:
                                   1543 ;	life.c:48: for (; *s; s++) putchar(*s);
      00051C 8D 82            [24] 1544 	mov	dpl,r5
      00051E 8E 83            [24] 1545 	mov	dph,r6
      000520 8F F0            [24] 1546 	mov	b,r7
      000522 12r00r00         [24] 1547 	lcall	__gptrget
      000525 FC               [12] 1548 	mov	r4,a
      000526 60 10            [24] 1549 	jz	00126$
      000528 7B 00            [12] 1550 	mov	r3,#0x00
      00052A 8C 82            [24] 1551 	mov	dpl,r4
      00052C 8B 83            [24] 1552 	mov	dph,r3
      00052E 12r00r00         [24] 1553 	lcall	_putchar
      000531 0D               [12] 1554 	inc	r5
                                   1555 ;	life.c:247: while (1) {
      000532 BD 00 E7         [24] 1556 	cjne	r5,#0x00,00220$
      000535 0E               [12] 1557 	inc	r6
      000536 80 E4            [24] 1558 	sjmp	00220$
      000538                       1559 00126$:
                                   1560 ;	life.c:248: c = toupper(getchar());
      000538 12r00r05         [24] 1561 	lcall	_getchar
      00053B 12r00r00         [24] 1562 	lcall	_toupper
      00053E AE 82            [24] 1563 	mov	r6,dpl
      000540 AF 83            [24] 1564 	mov	r7,dph
      000542 78r18            [12] 1565 	mov	r0,#_c
      000544 A6 06            [24] 1566 	mov	@r0,ar6
      000546 08               [12] 1567 	inc	r0
      000547 A6 07            [24] 1568 	mov	@r0,ar7
                                   1569 ;	life.c:249: if (i0 || (c == (int)'T')) goto terminate;
      000549 78r10            [12] 1570 	mov	r0,#_i0
      00054B E6               [12] 1571 	mov	a,@r0
      00054C 60 03            [24] 1572 	jz	00536$
      00054E 02r0Ar87         [24] 1573 	ljmp	00138$
      000551                       1574 00536$:
      000551 BE 54 06         [24] 1575 	cjne	r6,#0x54,00537$
      000554 BF 00 03         [24] 1576 	cjne	r7,#0x00,00537$
      000557 02r0Ar87         [24] 1577 	ljmp	00138$
      00055A                       1578 00537$:
                                   1579 ;	life.c:250: else if ((c == (int)'L') || (c == (int)'R')) goto reload;
      00055A BE 4C 06         [24] 1580 	cjne	r6,#0x4c,00538$
      00055D BF 00 03         [24] 1581 	cjne	r7,#0x00,00538$
      000560 02r02r9B         [24] 1582 	ljmp	00111$
      000563                       1583 00538$:
      000563 BE 52 06         [24] 1584 	cjne	r6,#0x52,00539$
      000566 BF 00 03         [24] 1585 	cjne	r7,#0x00,00539$
      000569 02r02r9B         [24] 1586 	ljmp	00111$
      00056C                       1587 00539$:
                                   1588 ;	life.c:251: else if (c == (int)'S') break;
      00056C BE 53 C9         [24] 1589 	cjne	r6,#0x53,00126$
      00056F BF 00 C6         [24] 1590 	cjne	r7,#0x00,00126$
                                   1591 ;	life.c:77: generation[0] = 0;
      000572 78r22            [12] 1592 	mov	r0,#_generation
      000574 76 00            [12] 1593 	mov	@r0,#0x00
      000576 08               [12] 1594 	inc	r0
      000577 76 00            [12] 1595 	mov	@r0,#0x00
                                   1596 ;	life.c:78: generation[1] = 0;
      000579 78r24            [12] 1597 	mov	r0,#(_generation + 0x0002)
      00057B 76 00            [12] 1598 	mov	@r0,#0x00
      00057D 08               [12] 1599 	inc	r0
      00057E 76 00            [12] 1600 	mov	@r0,#0x00
                                   1601 ;	life.c:256: for (i1 = 0; !i0 && !i1; ) {
      000580 78r11            [12] 1602 	mov	r0,#_i1
      000582 76 00            [12] 1603 	mov	@r0,#0x00
      000584                       1604 00237$:
      000584 78r10            [12] 1605 	mov	r0,#_i0
      000586 E6               [12] 1606 	mov	a,@r0
      000587 60 03            [24] 1607 	jz	00542$
      000589 02r0Ar55         [24] 1608 	ljmp	00134$
      00058C                       1609 00542$:
      00058C 78r11            [12] 1610 	mov	r0,#_i1
      00058E E6               [12] 1611 	mov	a,@r0
      00058F 60 03            [24] 1612 	jz	00543$
      000591 02r0Ar55         [24] 1613 	ljmp	00134$
      000594                       1614 00543$:
                                   1615 ;	life.c:257: show(1);
      000594 75 82 01         [24] 1616 	mov	dpl,#0x01
      000597 12r00r26         [24] 1617 	lcall	_show
                                   1618 ;	life.c:177: fixed = 0;
      00059A 78r1C            [12] 1619 	mov	r0,#_fixed
      00059C 76 00            [12] 1620 	mov	@r0,#0x00
                                   1621 ;	life.c:178: cycle2 = 0;
      00059E 78r1D            [12] 1622 	mov	r0,#_cycle2
      0005A0 76 00            [12] 1623 	mov	@r0,#0x00
                                   1624 ;	life.c:179: bstep = 0;
      0005A2 78r1A            [12] 1625 	mov	r0,#_bstep
      0005A4 76 00            [12] 1626 	mov	@r0,#0x00
                                   1627 ;	life.c:181: for (y = 0; y < H; y++) {
      0005A6 78r14            [12] 1628 	mov	r0,#_y
      0005A8 E4               [12] 1629 	clr	a
      0005A9 F6               [12] 1630 	mov	@r0,a
      0005AA 08               [12] 1631 	inc	r0
      0005AB F6               [12] 1632 	mov	@r0,a
      0005AC                       1633 00224$:
                                   1634 ;	life.c:182: putchar(busy[bstep]); putchar('\r');
      0005AC 78r1A            [12] 1635 	mov	r0,#_bstep
      0005AE E6               [12] 1636 	mov	a,@r0
      0005AF 24r26            [12] 1637 	add	a,#_busy
      0005B1 F9               [12] 1638 	mov	r1,a
      0005B2 87 07            [24] 1639 	mov	ar7,@r1
      0005B4 7E 00            [12] 1640 	mov	r6,#0x00
      0005B6 8F 82            [24] 1641 	mov	dpl,r7
      0005B8 8E 83            [24] 1642 	mov	dph,r6
      0005BA 12r00r00         [24] 1643 	lcall	_putchar
      0005BD 90 00 0D         [24] 1644 	mov	dptr,#0x000d
      0005C0 12r00r00         [24] 1645 	lcall	_putchar
                                   1646 ;	life.c:183: bstep = (bstep + 1) & 3;
      0005C3 78r1A            [12] 1647 	mov	r0,#_bstep
      0005C5 86 07            [24] 1648 	mov	ar7,@r0
      0005C7 0F               [12] 1649 	inc	r7
      0005C8 78r1A            [12] 1650 	mov	r0,#_bstep
      0005CA 74 03            [12] 1651 	mov	a,#0x03
      0005CC 5F               [12] 1652 	anl	a,r7
      0005CD F6               [12] 1653 	mov	@r0,a
                                   1654 ;	life.c:184: for (x = 0; x < W; x++) {
      0005CE 78r12            [12] 1655 	mov	r0,#_x
      0005D0 E4               [12] 1656 	clr	a
      0005D1 F6               [12] 1657 	mov	@r0,a
      0005D2 08               [12] 1658 	inc	r0
      0005D3 F6               [12] 1659 	mov	@r0,a
      0005D4                       1660 00222$:
                                   1661 ;	life.c:185: n = -u[A2D(W, y, x)];
      0005D4 78r14            [12] 1662 	mov	r0,#_y
      0005D6 E6               [12] 1663 	mov	a,@r0
      0005D7 C0 E0            [24] 1664 	push	acc
      0005D9 08               [12] 1665 	inc	r0
      0005DA E6               [12] 1666 	mov	a,@r0
      0005DB C0 E0            [24] 1667 	push	acc
      0005DD 90 00 30         [24] 1668 	mov	dptr,#0x0030
      0005E0 12r00r00         [24] 1669 	lcall	__mulint
      0005E3 C8               [12] 1670 	xch	a,r0
      0005E4 E5*00            [12] 1671 	mov	a,_bp
      0005E6 24 04            [12] 1672 	add	a,#0x04
      0005E8 C8               [12] 1673 	xch	a,r0
      0005E9 A6 82            [24] 1674 	mov	@r0,dpl
      0005EB 08               [12] 1675 	inc	r0
      0005EC A6 83            [24] 1676 	mov	@r0,dph
      0005EE 15 81            [12] 1677 	dec	sp
      0005F0 15 81            [12] 1678 	dec	sp
      0005F2 E5*00            [12] 1679 	mov	a,_bp
      0005F4 24 04            [12] 1680 	add	a,#0x04
      0005F6 F8               [12] 1681 	mov	r0,a
      0005F7 79r12            [12] 1682 	mov	r1,#_x
      0005F9 E7               [12] 1683 	mov	a,@r1
      0005FA 26               [12] 1684 	add	a,@r0
      0005FB C0 E0            [24] 1685 	push	acc
      0005FD 09               [12] 1686 	inc	r1
      0005FE E7               [12] 1687 	mov	a,@r1
      0005FF 08               [12] 1688 	inc	r0
      000600 36               [12] 1689 	addc	a,@r0
      000601 C0 E0            [24] 1690 	push	acc
      000603 E5*00            [12] 1691 	mov	a,_bp
      000605 24 03            [12] 1692 	add	a,#0x03
      000607 F8               [12] 1693 	mov	r0,a
      000608 D0 E0            [24] 1694 	pop	acc
      00060A F6               [12] 1695 	mov	@r0,a
      00060B 18               [12] 1696 	dec	r0
      00060C D0 E0            [24] 1697 	pop	acc
      00060E F6               [12] 1698 	mov	@r0,a
      00060F A8*00            [24] 1699 	mov	r0,_bp
      000611 08               [12] 1700 	inc	r0
      000612 08               [12] 1701 	inc	r0
      000613 E6               [12] 1702 	mov	a,@r0
      000614 24r00            [12] 1703 	add	a,#_u
      000616 F5 82            [12] 1704 	mov	dpl,a
      000618 08               [12] 1705 	inc	r0
      000619 E6               [12] 1706 	mov	a,@r0
      00061A 34s24            [12] 1707 	addc	a,#(_u >> 8)
      00061C F5 83            [12] 1708 	mov	dph,a
      00061E E0               [24] 1709 	movx	a,@dptr
      00061F FB               [12] 1710 	mov	r3,a
      000620 A8*00            [24] 1711 	mov	r0,_bp
      000622 08               [12] 1712 	inc	r0
      000623 C3               [12] 1713 	clr	c
      000624 E4               [12] 1714 	clr	a
      000625 9B               [12] 1715 	subb	a,r3
      000626 F6               [12] 1716 	mov	@r0,a
                                   1717 ;	life.c:188: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000627 78r14            [12] 1718 	mov	r0,#_y
      000629 74 FF            [12] 1719 	mov	a,#0xff
      00062B 26               [12] 1720 	add	a,@r0
      00062C FA               [12] 1721 	mov	r2,a
      00062D 74 FF            [12] 1722 	mov	a,#0xff
      00062F 08               [12] 1723 	inc	r0
      000630 36               [12] 1724 	addc	a,@r0
      000631 FB               [12] 1725 	mov	r3,a
      000632 74 C0            [12] 1726 	mov	a,#0xc0
      000634 2A               [12] 1727 	add	a,r2
      000635 FA               [12] 1728 	mov	r2,a
      000636 E4               [12] 1729 	clr	a
      000637 3B               [12] 1730 	addc	a,r3
      000638 FB               [12] 1731 	mov	r3,a
      000639 74 C0            [12] 1732 	mov	a,#0xc0
      00063B C0 E0            [24] 1733 	push	acc
      00063D E4               [12] 1734 	clr	a
      00063E C0 E0            [24] 1735 	push	acc
      000640 8A 82            [24] 1736 	mov	dpl,r2
      000642 8B 83            [24] 1737 	mov	dph,r3
      000644 12r00r00         [24] 1738 	lcall	__modsint
      000647 AA 82            [24] 1739 	mov	r2,dpl
      000649 AB 83            [24] 1740 	mov	r3,dph
      00064B 15 81            [12] 1741 	dec	sp
      00064D 15 81            [12] 1742 	dec	sp
      00064F C0 02            [24] 1743 	push	ar2
      000651 C0 03            [24] 1744 	push	ar3
      000653 90 00 30         [24] 1745 	mov	dptr,#0x0030
      000656 12r00r00         [24] 1746 	lcall	__mulint
      000659 AA 82            [24] 1747 	mov	r2,dpl
      00065B AB 83            [24] 1748 	mov	r3,dph
      00065D 15 81            [12] 1749 	dec	sp
      00065F 15 81            [12] 1750 	dec	sp
      000661 78r12            [12] 1751 	mov	r0,#_x
      000663 74 FF            [12] 1752 	mov	a,#0xff
      000665 26               [12] 1753 	add	a,@r0
      000666 FC               [12] 1754 	mov	r4,a
      000667 74 FF            [12] 1755 	mov	a,#0xff
      000669 08               [12] 1756 	inc	r0
      00066A 36               [12] 1757 	addc	a,@r0
      00066B FD               [12] 1758 	mov	r5,a
      00066C 74 30            [12] 1759 	mov	a,#0x30
      00066E 2C               [12] 1760 	add	a,r4
      00066F FC               [12] 1761 	mov	r4,a
      000670 E4               [12] 1762 	clr	a
      000671 3D               [12] 1763 	addc	a,r5
      000672 FD               [12] 1764 	mov	r5,a
      000673 C0 03            [24] 1765 	push	ar3
      000675 C0 02            [24] 1766 	push	ar2
      000677 74 30            [12] 1767 	mov	a,#0x30
      000679 C0 E0            [24] 1768 	push	acc
      00067B E4               [12] 1769 	clr	a
      00067C C0 E0            [24] 1770 	push	acc
      00067E 8C 82            [24] 1771 	mov	dpl,r4
      000680 8D 83            [24] 1772 	mov	dph,r5
      000682 12r00r00         [24] 1773 	lcall	__modsint
      000685 AC 82            [24] 1774 	mov	r4,dpl
      000687 AD 83            [24] 1775 	mov	r5,dph
      000689 15 81            [12] 1776 	dec	sp
      00068B 15 81            [12] 1777 	dec	sp
      00068D D0 02            [24] 1778 	pop	ar2
      00068F D0 03            [24] 1779 	pop	ar3
      000691 EC               [12] 1780 	mov	a,r4
      000692 2A               [12] 1781 	add	a,r2
      000693 FE               [12] 1782 	mov	r6,a
      000694 ED               [12] 1783 	mov	a,r5
      000695 3B               [12] 1784 	addc	a,r3
      000696 FF               [12] 1785 	mov	r7,a
      000697 EE               [12] 1786 	mov	a,r6
      000698 24r00            [12] 1787 	add	a,#_u
      00069A F5 82            [12] 1788 	mov	dpl,a
      00069C EF               [12] 1789 	mov	a,r7
      00069D 34s24            [12] 1790 	addc	a,#(_u >> 8)
      00069F F5 83            [12] 1791 	mov	dph,a
      0006A1 E0               [24] 1792 	movx	a,@dptr
      0006A2 FF               [12] 1793 	mov	r7,a
      0006A3 A8*00            [24] 1794 	mov	r0,_bp
      0006A5 08               [12] 1795 	inc	r0
      0006A6 EF               [12] 1796 	mov	a,r7
      0006A7 26               [12] 1797 	add	a,@r0
      0006A8 F6               [12] 1798 	mov	@r0,a
                                   1799 ;	life.c:190: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0006A9 78r12            [12] 1800 	mov	r0,#_x
      0006AB E5*00            [12] 1801 	mov	a,_bp
      0006AD 24 06            [12] 1802 	add	a,#0x06
      0006AF F9               [12] 1803 	mov	r1,a
      0006B0 E6               [12] 1804 	mov	a,@r0
      0006B1 F7               [12] 1805 	mov	@r1,a
      0006B2 08               [12] 1806 	inc	r0
      0006B3 09               [12] 1807 	inc	r1
      0006B4 E6               [12] 1808 	mov	a,@r0
      0006B5 F7               [12] 1809 	mov	@r1,a
      0006B6 E5*00            [12] 1810 	mov	a,_bp
      0006B8 24 06            [12] 1811 	add	a,#0x06
      0006BA F8               [12] 1812 	mov	r0,a
      0006BB 74 30            [12] 1813 	mov	a,#0x30
      0006BD 26               [12] 1814 	add	a,@r0
      0006BE FE               [12] 1815 	mov	r6,a
      0006BF E4               [12] 1816 	clr	a
      0006C0 08               [12] 1817 	inc	r0
      0006C1 36               [12] 1818 	addc	a,@r0
      0006C2 FF               [12] 1819 	mov	r7,a
      0006C3 C0 05            [24] 1820 	push	ar5
      0006C5 C0 04            [24] 1821 	push	ar4
      0006C7 C0 03            [24] 1822 	push	ar3
      0006C9 C0 02            [24] 1823 	push	ar2
      0006CB 74 30            [12] 1824 	mov	a,#0x30
      0006CD C0 E0            [24] 1825 	push	acc
      0006CF E4               [12] 1826 	clr	a
      0006D0 C0 E0            [24] 1827 	push	acc
      0006D2 8E 82            [24] 1828 	mov	dpl,r6
      0006D4 8F 83            [24] 1829 	mov	dph,r7
      0006D6 12r00r00         [24] 1830 	lcall	__modsint
      0006D9 C8               [12] 1831 	xch	a,r0
      0006DA E5*00            [12] 1832 	mov	a,_bp
      0006DC 24 08            [12] 1833 	add	a,#0x08
      0006DE C8               [12] 1834 	xch	a,r0
      0006DF A6 82            [24] 1835 	mov	@r0,dpl
      0006E1 08               [12] 1836 	inc	r0
      0006E2 A6 83            [24] 1837 	mov	@r0,dph
      0006E4 15 81            [12] 1838 	dec	sp
      0006E6 15 81            [12] 1839 	dec	sp
      0006E8 D0 02            [24] 1840 	pop	ar2
      0006EA D0 03            [24] 1841 	pop	ar3
      0006EC E5*00            [12] 1842 	mov	a,_bp
      0006EE 24 08            [12] 1843 	add	a,#0x08
      0006F0 F8               [12] 1844 	mov	r0,a
      0006F1 E6               [12] 1845 	mov	a,@r0
      0006F2 2A               [12] 1846 	add	a,r2
      0006F3 FE               [12] 1847 	mov	r6,a
      0006F4 08               [12] 1848 	inc	r0
      0006F5 E6               [12] 1849 	mov	a,@r0
      0006F6 3B               [12] 1850 	addc	a,r3
      0006F7 FF               [12] 1851 	mov	r7,a
      0006F8 EE               [12] 1852 	mov	a,r6
      0006F9 24r00            [12] 1853 	add	a,#_u
      0006FB F5 82            [12] 1854 	mov	dpl,a
      0006FD EF               [12] 1855 	mov	a,r7
      0006FE 34s24            [12] 1856 	addc	a,#(_u >> 8)
      000700 F5 83            [12] 1857 	mov	dph,a
      000702 E0               [24] 1858 	movx	a,@dptr
      000703 FF               [12] 1859 	mov	r7,a
      000704 A8*00            [24] 1860 	mov	r0,_bp
      000706 08               [12] 1861 	inc	r0
      000707 EF               [12] 1862 	mov	a,r7
      000708 26               [12] 1863 	add	a,@r0
      000709 F6               [12] 1864 	mov	@r0,a
                                   1865 ;	life.c:192: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00070A E5*00            [12] 1866 	mov	a,_bp
      00070C 24 06            [12] 1867 	add	a,#0x06
      00070E F8               [12] 1868 	mov	r0,a
      00070F 74 31            [12] 1869 	mov	a,#0x31
      000711 26               [12] 1870 	add	a,@r0
      000712 FE               [12] 1871 	mov	r6,a
      000713 E4               [12] 1872 	clr	a
      000714 08               [12] 1873 	inc	r0
      000715 36               [12] 1874 	addc	a,@r0
      000716 FF               [12] 1875 	mov	r7,a
      000717 C0 03            [24] 1876 	push	ar3
      000719 C0 02            [24] 1877 	push	ar2
      00071B 74 30            [12] 1878 	mov	a,#0x30
      00071D C0 E0            [24] 1879 	push	acc
      00071F E4               [12] 1880 	clr	a
      000720 C0 E0            [24] 1881 	push	acc
      000722 8E 82            [24] 1882 	mov	dpl,r6
      000724 8F 83            [24] 1883 	mov	dph,r7
      000726 12r00r00         [24] 1884 	lcall	__modsint
      000729 AE 82            [24] 1885 	mov	r6,dpl
      00072B AF 83            [24] 1886 	mov	r7,dph
      00072D 15 81            [12] 1887 	dec	sp
      00072F 15 81            [12] 1888 	dec	sp
      000731 D0 02            [24] 1889 	pop	ar2
      000733 D0 03            [24] 1890 	pop	ar3
      000735 D0 04            [24] 1891 	pop	ar4
      000737 D0 05            [24] 1892 	pop	ar5
      000739 EE               [12] 1893 	mov	a,r6
      00073A 2A               [12] 1894 	add	a,r2
      00073B FA               [12] 1895 	mov	r2,a
      00073C EF               [12] 1896 	mov	a,r7
      00073D 3B               [12] 1897 	addc	a,r3
      00073E FB               [12] 1898 	mov	r3,a
      00073F EA               [12] 1899 	mov	a,r2
      000740 24r00            [12] 1900 	add	a,#_u
      000742 F5 82            [12] 1901 	mov	dpl,a
      000744 EB               [12] 1902 	mov	a,r3
      000745 34s24            [12] 1903 	addc	a,#(_u >> 8)
      000747 F5 83            [12] 1904 	mov	dph,a
      000749 E0               [24] 1905 	movx	a,@dptr
      00074A FB               [12] 1906 	mov	r3,a
      00074B A8*00            [24] 1907 	mov	r0,_bp
      00074D 08               [12] 1908 	inc	r0
      00074E EB               [12] 1909 	mov	a,r3
      00074F 26               [12] 1910 	add	a,@r0
      000750 F6               [12] 1911 	mov	@r0,a
                                   1912 ;	life.c:194: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000751 78r14            [12] 1913 	mov	r0,#_y
      000753 E5*00            [12] 1914 	mov	a,_bp
      000755 24 0A            [12] 1915 	add	a,#0x0a
      000757 F9               [12] 1916 	mov	r1,a
      000758 E6               [12] 1917 	mov	a,@r0
      000759 F7               [12] 1918 	mov	@r1,a
      00075A 08               [12] 1919 	inc	r0
      00075B 09               [12] 1920 	inc	r1
      00075C E6               [12] 1921 	mov	a,@r0
      00075D F7               [12] 1922 	mov	@r1,a
      00075E E5*00            [12] 1923 	mov	a,_bp
      000760 24 0A            [12] 1924 	add	a,#0x0a
      000762 F8               [12] 1925 	mov	r0,a
      000763 74 C0            [12] 1926 	mov	a,#0xc0
      000765 26               [12] 1927 	add	a,@r0
      000766 FA               [12] 1928 	mov	r2,a
      000767 E4               [12] 1929 	clr	a
      000768 08               [12] 1930 	inc	r0
      000769 36               [12] 1931 	addc	a,@r0
      00076A FB               [12] 1932 	mov	r3,a
      00076B C0 07            [24] 1933 	push	ar7
      00076D C0 06            [24] 1934 	push	ar6
      00076F C0 05            [24] 1935 	push	ar5
      000771 C0 04            [24] 1936 	push	ar4
      000773 74 C0            [12] 1937 	mov	a,#0xc0
      000775 C0 E0            [24] 1938 	push	acc
      000777 E4               [12] 1939 	clr	a
      000778 C0 E0            [24] 1940 	push	acc
      00077A 8A 82            [24] 1941 	mov	dpl,r2
      00077C 8B 83            [24] 1942 	mov	dph,r3
      00077E 12r00r00         [24] 1943 	lcall	__modsint
      000781 AA 82            [24] 1944 	mov	r2,dpl
      000783 AB 83            [24] 1945 	mov	r3,dph
      000785 15 81            [12] 1946 	dec	sp
      000787 15 81            [12] 1947 	dec	sp
      000789 C0 02            [24] 1948 	push	ar2
      00078B C0 03            [24] 1949 	push	ar3
      00078D 90 00 30         [24] 1950 	mov	dptr,#0x0030
      000790 12r00r00         [24] 1951 	lcall	__mulint
      000793 C8               [12] 1952 	xch	a,r0
      000794 E5*00            [12] 1953 	mov	a,_bp
      000796 24 0C            [12] 1954 	add	a,#0x0c
      000798 C8               [12] 1955 	xch	a,r0
      000799 A6 82            [24] 1956 	mov	@r0,dpl
      00079B 08               [12] 1957 	inc	r0
      00079C A6 83            [24] 1958 	mov	@r0,dph
      00079E 15 81            [12] 1959 	dec	sp
      0007A0 15 81            [12] 1960 	dec	sp
      0007A2 D0 04            [24] 1961 	pop	ar4
      0007A4 D0 05            [24] 1962 	pop	ar5
      0007A6 D0 06            [24] 1963 	pop	ar6
      0007A8 D0 07            [24] 1964 	pop	ar7
      0007AA E5*00            [12] 1965 	mov	a,_bp
      0007AC 24 0C            [12] 1966 	add	a,#0x0c
      0007AE F8               [12] 1967 	mov	r0,a
      0007AF EC               [12] 1968 	mov	a,r4
      0007B0 26               [12] 1969 	add	a,@r0
      0007B1 FA               [12] 1970 	mov	r2,a
      0007B2 ED               [12] 1971 	mov	a,r5
      0007B3 08               [12] 1972 	inc	r0
      0007B4 36               [12] 1973 	addc	a,@r0
      0007B5 FB               [12] 1974 	mov	r3,a
      0007B6 EA               [12] 1975 	mov	a,r2
      0007B7 24r00            [12] 1976 	add	a,#_u
      0007B9 F5 82            [12] 1977 	mov	dpl,a
      0007BB EB               [12] 1978 	mov	a,r3
      0007BC 34s24            [12] 1979 	addc	a,#(_u >> 8)
      0007BE F5 83            [12] 1980 	mov	dph,a
      0007C0 E0               [24] 1981 	movx	a,@dptr
      0007C1 FB               [12] 1982 	mov	r3,a
      0007C2 A8*00            [24] 1983 	mov	r0,_bp
      0007C4 08               [12] 1984 	inc	r0
      0007C5 EB               [12] 1985 	mov	a,r3
      0007C6 26               [12] 1986 	add	a,@r0
      0007C7 F6               [12] 1987 	mov	@r0,a
                                   1988 ;	life.c:196: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007C8 E5*00            [12] 1989 	mov	a,_bp
      0007CA 24 0C            [12] 1990 	add	a,#0x0c
      0007CC F8               [12] 1991 	mov	r0,a
      0007CD E5*00            [12] 1992 	mov	a,_bp
      0007CF 24 08            [12] 1993 	add	a,#0x08
      0007D1 F9               [12] 1994 	mov	r1,a
      0007D2 E7               [12] 1995 	mov	a,@r1
      0007D3 26               [12] 1996 	add	a,@r0
      0007D4 FA               [12] 1997 	mov	r2,a
      0007D5 09               [12] 1998 	inc	r1
      0007D6 E7               [12] 1999 	mov	a,@r1
      0007D7 08               [12] 2000 	inc	r0
      0007D8 36               [12] 2001 	addc	a,@r0
      0007D9 FB               [12] 2002 	mov	r3,a
      0007DA EA               [12] 2003 	mov	a,r2
      0007DB 24r00            [12] 2004 	add	a,#_u
      0007DD F5 82            [12] 2005 	mov	dpl,a
      0007DF EB               [12] 2006 	mov	a,r3
      0007E0 34s24            [12] 2007 	addc	a,#(_u >> 8)
      0007E2 F5 83            [12] 2008 	mov	dph,a
      0007E4 E0               [24] 2009 	movx	a,@dptr
      0007E5 FB               [12] 2010 	mov	r3,a
      0007E6 A8*00            [24] 2011 	mov	r0,_bp
      0007E8 08               [12] 2012 	inc	r0
      0007E9 EB               [12] 2013 	mov	a,r3
      0007EA 26               [12] 2014 	add	a,@r0
      0007EB F6               [12] 2015 	mov	@r0,a
                                   2016 ;	life.c:198: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0007EC E5*00            [12] 2017 	mov	a,_bp
      0007EE 24 0C            [12] 2018 	add	a,#0x0c
      0007F0 F8               [12] 2019 	mov	r0,a
      0007F1 EE               [12] 2020 	mov	a,r6
      0007F2 26               [12] 2021 	add	a,@r0
      0007F3 FA               [12] 2022 	mov	r2,a
      0007F4 EF               [12] 2023 	mov	a,r7
      0007F5 08               [12] 2024 	inc	r0
      0007F6 36               [12] 2025 	addc	a,@r0
      0007F7 FB               [12] 2026 	mov	r3,a
      0007F8 EA               [12] 2027 	mov	a,r2
      0007F9 24r00            [12] 2028 	add	a,#_u
      0007FB F5 82            [12] 2029 	mov	dpl,a
      0007FD EB               [12] 2030 	mov	a,r3
      0007FE 34s24            [12] 2031 	addc	a,#(_u >> 8)
      000800 F5 83            [12] 2032 	mov	dph,a
      000802 E0               [24] 2033 	movx	a,@dptr
      000803 FB               [12] 2034 	mov	r3,a
      000804 A8*00            [24] 2035 	mov	r0,_bp
      000806 08               [12] 2036 	inc	r0
      000807 E5*00            [12] 2037 	mov	a,_bp
      000809 24 0C            [12] 2038 	add	a,#0x0c
      00080B F9               [12] 2039 	mov	r1,a
      00080C EB               [12] 2040 	mov	a,r3
      00080D 26               [12] 2041 	add	a,@r0
      00080E F7               [12] 2042 	mov	@r1,a
                                   2043 ;	life.c:200: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      00080F E5*00            [12] 2044 	mov	a,_bp
      000811 24 0A            [12] 2045 	add	a,#0x0a
      000813 F8               [12] 2046 	mov	r0,a
      000814 74 C1            [12] 2047 	mov	a,#0xc1
      000816 26               [12] 2048 	add	a,@r0
      000817 FA               [12] 2049 	mov	r2,a
      000818 E4               [12] 2050 	clr	a
      000819 08               [12] 2051 	inc	r0
      00081A 36               [12] 2052 	addc	a,@r0
      00081B FB               [12] 2053 	mov	r3,a
      00081C C0 07            [24] 2054 	push	ar7
      00081E C0 06            [24] 2055 	push	ar6
      000820 C0 05            [24] 2056 	push	ar5
      000822 C0 04            [24] 2057 	push	ar4
      000824 74 C0            [12] 2058 	mov	a,#0xc0
      000826 C0 E0            [24] 2059 	push	acc
      000828 E4               [12] 2060 	clr	a
      000829 C0 E0            [24] 2061 	push	acc
      00082B 8A 82            [24] 2062 	mov	dpl,r2
      00082D 8B 83            [24] 2063 	mov	dph,r3
      00082F 12r00r00         [24] 2064 	lcall	__modsint
      000832 AA 82            [24] 2065 	mov	r2,dpl
      000834 AB 83            [24] 2066 	mov	r3,dph
      000836 15 81            [12] 2067 	dec	sp
      000838 15 81            [12] 2068 	dec	sp
      00083A C0 02            [24] 2069 	push	ar2
      00083C C0 03            [24] 2070 	push	ar3
      00083E 90 00 30         [24] 2071 	mov	dptr,#0x0030
      000841 12r00r00         [24] 2072 	lcall	__mulint
      000844 AA 82            [24] 2073 	mov	r2,dpl
      000846 AB 83            [24] 2074 	mov	r3,dph
      000848 15 81            [12] 2075 	dec	sp
      00084A 15 81            [12] 2076 	dec	sp
      00084C D0 04            [24] 2077 	pop	ar4
      00084E D0 05            [24] 2078 	pop	ar5
      000850 D0 06            [24] 2079 	pop	ar6
      000852 D0 07            [24] 2080 	pop	ar7
      000854 EC               [12] 2081 	mov	a,r4
      000855 2A               [12] 2082 	add	a,r2
      000856 FC               [12] 2083 	mov	r4,a
      000857 ED               [12] 2084 	mov	a,r5
      000858 3B               [12] 2085 	addc	a,r3
      000859 FD               [12] 2086 	mov	r5,a
      00085A EC               [12] 2087 	mov	a,r4
      00085B 24r00            [12] 2088 	add	a,#_u
      00085D F5 82            [12] 2089 	mov	dpl,a
      00085F ED               [12] 2090 	mov	a,r5
      000860 34s24            [12] 2091 	addc	a,#(_u >> 8)
      000862 F5 83            [12] 2092 	mov	dph,a
      000864 E0               [24] 2093 	movx	a,@dptr
      000865 FD               [12] 2094 	mov	r5,a
      000866 E5*00            [12] 2095 	mov	a,_bp
      000868 24 0C            [12] 2096 	add	a,#0x0c
      00086A F8               [12] 2097 	mov	r0,a
      00086B E5*00            [12] 2098 	mov	a,_bp
      00086D 24 0C            [12] 2099 	add	a,#0x0c
      00086F F9               [12] 2100 	mov	r1,a
      000870 ED               [12] 2101 	mov	a,r5
      000871 26               [12] 2102 	add	a,@r0
      000872 F7               [12] 2103 	mov	@r1,a
                                   2104 ;	life.c:202: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      000873 E5*00            [12] 2105 	mov	a,_bp
      000875 24 08            [12] 2106 	add	a,#0x08
      000877 F8               [12] 2107 	mov	r0,a
      000878 E6               [12] 2108 	mov	a,@r0
      000879 2A               [12] 2109 	add	a,r2
      00087A FC               [12] 2110 	mov	r4,a
      00087B 08               [12] 2111 	inc	r0
      00087C E6               [12] 2112 	mov	a,@r0
      00087D 3B               [12] 2113 	addc	a,r3
      00087E FD               [12] 2114 	mov	r5,a
      00087F EC               [12] 2115 	mov	a,r4
      000880 24r00            [12] 2116 	add	a,#_u
      000882 F5 82            [12] 2117 	mov	dpl,a
      000884 ED               [12] 2118 	mov	a,r5
      000885 34s24            [12] 2119 	addc	a,#(_u >> 8)
      000887 F5 83            [12] 2120 	mov	dph,a
      000889 E0               [24] 2121 	movx	a,@dptr
      00088A FD               [12] 2122 	mov	r5,a
      00088B E5*00            [12] 2123 	mov	a,_bp
      00088D 24 0C            [12] 2124 	add	a,#0x0c
      00088F F8               [12] 2125 	mov	r0,a
      000890 ED               [12] 2126 	mov	a,r5
      000891 26               [12] 2127 	add	a,@r0
      000892 FD               [12] 2128 	mov	r5,a
                                   2129 ;	life.c:203: y1 = 1; x1 = 1;
      000893 78r20            [12] 2130 	mov	r0,#_y1
      000895 76 01            [12] 2131 	mov	@r0,#0x01
      000897 08               [12] 2132 	inc	r0
      000898 76 00            [12] 2133 	mov	@r0,#0x00
      00089A 78r1E            [12] 2134 	mov	r0,#_x1
      00089C 76 01            [12] 2135 	mov	@r0,#0x01
      00089E 08               [12] 2136 	inc	r0
      00089F 76 00            [12] 2137 	mov	@r0,#0x00
                                   2138 ;	life.c:204: n += u[A2D(W, (y + y1 + H) % H, (x + x1 + W) % W)];
      0008A1 EE               [12] 2139 	mov	a,r6
      0008A2 2A               [12] 2140 	add	a,r2
      0008A3 FE               [12] 2141 	mov	r6,a
      0008A4 EF               [12] 2142 	mov	a,r7
      0008A5 3B               [12] 2143 	addc	a,r3
      0008A6 FF               [12] 2144 	mov	r7,a
      0008A7 EE               [12] 2145 	mov	a,r6
      0008A8 24r00            [12] 2146 	add	a,#_u
      0008AA F5 82            [12] 2147 	mov	dpl,a
      0008AC EF               [12] 2148 	mov	a,r7
      0008AD 34s24            [12] 2149 	addc	a,#(_u >> 8)
      0008AF F5 83            [12] 2150 	mov	dph,a
      0008B1 E0               [24] 2151 	movx	a,@dptr
      0008B2 2D               [12] 2152 	add	a,r5
      0008B3 FF               [12] 2153 	mov	r7,a
      0008B4 78r1B            [12] 2154 	mov	r0,#_n
      0008B6 A6 07            [24] 2155 	mov	@r0,ar7
                                   2156 ;	life.c:206: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      0008B8 A8*00            [24] 2157 	mov	r0,_bp
      0008BA 08               [12] 2158 	inc	r0
      0008BB 08               [12] 2159 	inc	r0
      0008BC E6               [12] 2160 	mov	a,@r0
      0008BD 24r00            [12] 2161 	add	a,#_nu
      0008BF FD               [12] 2162 	mov	r5,a
      0008C0 08               [12] 2163 	inc	r0
      0008C1 E6               [12] 2164 	mov	a,@r0
      0008C2 34s48            [12] 2165 	addc	a,#(_nu >> 8)
      0008C4 FE               [12] 2166 	mov	r6,a
      0008C5 BF 03 02         [24] 2167 	cjne	r7,#0x03,00544$
      0008C8 80 28            [24] 2168 	sjmp	00250$
      0008CA                       2169 00544$:
      0008CA BF 02 21         [24] 2170 	cjne	r7,#0x02,00249$
      0008CD E5*00            [12] 2171 	mov	a,_bp
      0008CF 24 04            [12] 2172 	add	a,#0x04
      0008D1 F8               [12] 2173 	mov	r0,a
      0008D2 E5*00            [12] 2174 	mov	a,_bp
      0008D4 24 06            [12] 2175 	add	a,#0x06
      0008D6 F9               [12] 2176 	mov	r1,a
      0008D7 E7               [12] 2177 	mov	a,@r1
      0008D8 26               [12] 2178 	add	a,@r0
      0008D9 FC               [12] 2179 	mov	r4,a
      0008DA 09               [12] 2180 	inc	r1
      0008DB E7               [12] 2181 	mov	a,@r1
      0008DC 08               [12] 2182 	inc	r0
      0008DD 36               [12] 2183 	addc	a,@r0
      0008DE FF               [12] 2184 	mov	r7,a
      0008DF EC               [12] 2185 	mov	a,r4
      0008E0 24r00            [12] 2186 	add	a,#_u
      0008E2 FC               [12] 2187 	mov	r4,a
      0008E3 EF               [12] 2188 	mov	a,r7
      0008E4 34s24            [12] 2189 	addc	a,#(_u >> 8)
      0008E6 FF               [12] 2190 	mov	r7,a
      0008E7 8C 82            [24] 2191 	mov	dpl,r4
      0008E9 8F 83            [24] 2192 	mov	dph,r7
      0008EB E0               [24] 2193 	movx	a,@dptr
      0008EC 70 04            [24] 2194 	jnz	00250$
      0008EE                       2195 00249$:
                                   2196 ;	assignBit
      0008EE C2*00            [12] 2197 	clr	b0
      0008F0 80 02            [24] 2198 	sjmp	00251$
      0008F2                       2199 00250$:
                                   2200 ;	assignBit
      0008F2 D2*00            [12] 2201 	setb	b0
      0008F4                       2202 00251$:
      0008F4 A2*00            [12] 2203 	mov	c,b0
      0008F6 E4               [12] 2204 	clr	a
      0008F7 33               [12] 2205 	rlc	a
      0008F8 8D 82            [24] 2206 	mov	dpl,r5
      0008FA 8E 83            [24] 2207 	mov	dph,r6
      0008FC F0               [24] 2208 	movx	@dptr,a
                                   2209 ;	life.c:207: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      0008FD 78r14            [12] 2210 	mov	r0,#_y
      0008FF E6               [12] 2211 	mov	a,@r0
      000900 C0 E0            [24] 2212 	push	acc
      000902 08               [12] 2213 	inc	r0
      000903 E6               [12] 2214 	mov	a,@r0
      000904 C0 E0            [24] 2215 	push	acc
      000906 90 00 30         [24] 2216 	mov	dptr,#0x0030
      000909 12r00r00         [24] 2217 	lcall	__mulint
      00090C AE 82            [24] 2218 	mov	r6,dpl
      00090E AF 83            [24] 2219 	mov	r7,dph
      000910 15 81            [12] 2220 	dec	sp
      000912 15 81            [12] 2221 	dec	sp
      000914 78r12            [12] 2222 	mov	r0,#_x
      000916 E6               [12] 2223 	mov	a,@r0
      000917 2E               [12] 2224 	add	a,r6
      000918 FE               [12] 2225 	mov	r6,a
      000919 08               [12] 2226 	inc	r0
      00091A E6               [12] 2227 	mov	a,@r0
      00091B 3F               [12] 2228 	addc	a,r7
      00091C FF               [12] 2229 	mov	r7,a
      00091D EE               [12] 2230 	mov	a,r6
      00091E 24r00            [12] 2231 	add	a,#_pu
      000920 F5 82            [12] 2232 	mov	dpl,a
      000922 EF               [12] 2233 	mov	a,r7
      000923 34s00            [12] 2234 	addc	a,#(_pu >> 8)
      000925 F5 83            [12] 2235 	mov	dph,a
      000927 E0               [24] 2236 	movx	a,@dptr
      000928 FD               [12] 2237 	mov	r5,a
      000929 EE               [12] 2238 	mov	a,r6
      00092A 24r00            [12] 2239 	add	a,#_nu
      00092C F5 82            [12] 2240 	mov	dpl,a
      00092E EF               [12] 2241 	mov	a,r7
      00092F 34s48            [12] 2242 	addc	a,#(_nu >> 8)
      000931 F5 83            [12] 2243 	mov	dph,a
      000933 E0               [24] 2244 	movx	a,@dptr
      000934 FC               [12] 2245 	mov	r4,a
      000935 6D               [12] 2246 	xrl	a,r5
      000936 78r1D            [12] 2247 	mov	r0,#_cycle2
      000938 46               [12] 2248 	orl	a,@r0
      000939 F6               [12] 2249 	mov	@r0,a
                                   2250 ;	life.c:208: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00093A EE               [12] 2251 	mov	a,r6
      00093B 24r00            [12] 2252 	add	a,#_u
      00093D F5 82            [12] 2253 	mov	dpl,a
      00093F EF               [12] 2254 	mov	a,r7
      000940 34s24            [12] 2255 	addc	a,#(_u >> 8)
      000942 F5 83            [12] 2256 	mov	dph,a
      000944 E0               [24] 2257 	movx	a,@dptr
      000945 FF               [12] 2258 	mov	r7,a
      000946 EC               [12] 2259 	mov	a,r4
      000947 6F               [12] 2260 	xrl	a,r7
      000948 78r1C            [12] 2261 	mov	r0,#_fixed
      00094A 46               [12] 2262 	orl	a,@r0
      00094B F6               [12] 2263 	mov	@r0,a
                                   2264 ;	life.c:184: for (x = 0; x < W; x++) {
      00094C 78r12            [12] 2265 	mov	r0,#_x
      00094E 06               [12] 2266 	inc	@r0
      00094F B6 00 02         [24] 2267 	cjne	@r0,#0x00,00548$
      000952 08               [12] 2268 	inc	r0
      000953 06               [12] 2269 	inc	@r0
      000954                       2270 00548$:
      000954 78r12            [12] 2271 	mov	r0,#_x
      000956 C3               [12] 2272 	clr	c
      000957 E6               [12] 2273 	mov	a,@r0
      000958 94 30            [12] 2274 	subb	a,#0x30
      00095A 08               [12] 2275 	inc	r0
      00095B E6               [12] 2276 	mov	a,@r0
      00095C 64 80            [12] 2277 	xrl	a,#0x80
      00095E 94 80            [12] 2278 	subb	a,#0x80
      000960 50 03            [24] 2279 	jnc	00549$
      000962 02r05rD4         [24] 2280 	ljmp	00222$
      000965                       2281 00549$:
                                   2282 ;	life.c:181: for (y = 0; y < H; y++) {
      000965 78r14            [12] 2283 	mov	r0,#_y
      000967 06               [12] 2284 	inc	@r0
      000968 B6 00 02         [24] 2285 	cjne	@r0,#0x00,00550$
      00096B 08               [12] 2286 	inc	r0
      00096C 06               [12] 2287 	inc	@r0
      00096D                       2288 00550$:
      00096D 78r14            [12] 2289 	mov	r0,#_y
      00096F C3               [12] 2290 	clr	c
      000970 E6               [12] 2291 	mov	a,@r0
      000971 94 C0            [12] 2292 	subb	a,#0xc0
      000973 08               [12] 2293 	inc	r0
      000974 E6               [12] 2294 	mov	a,@r0
      000975 64 80            [12] 2295 	xrl	a,#0x80
      000977 94 80            [12] 2296 	subb	a,#0x80
      000979 50 03            [24] 2297 	jnc	00551$
      00097B 02r05rAC         [24] 2298 	ljmp	00224$
      00097E                       2299 00551$:
                                   2300 ;	life.c:212: cycle2 = !cycle2;
      00097E 78r1D            [12] 2301 	mov	r0,#_cycle2
      000980 E6               [12] 2302 	mov	a,@r0
      000981 B4 01 00         [24] 2303 	cjne	a,#0x01,00552$
      000984                       2304 00552$:
      000984 92*00            [24] 2305 	mov	b0,c
      000986 78r1D            [12] 2306 	mov	r0,#_cycle2
      000988 E4               [12] 2307 	clr	a
      000989 33               [12] 2308 	rlc	a
      00098A F6               [12] 2309 	mov	@r0,a
                                   2310 ;	life.c:213: fixed = !fixed;
      00098B 78r1C            [12] 2311 	mov	r0,#_fixed
      00098D E6               [12] 2312 	mov	a,@r0
      00098E B4 01 00         [24] 2313 	cjne	a,#0x01,00553$
      000991                       2314 00553$:
      000991 92*00            [24] 2315 	mov	b0,c
      000993 78r1C            [12] 2316 	mov	r0,#_fixed
      000995 E4               [12] 2317 	clr	a
      000996 33               [12] 2318 	rlc	a
      000997 F6               [12] 2319 	mov	@r0,a
                                   2320 ;	life.c:215: memcpy(pu, u, sizeof (u));
      000998 E4               [12] 2321 	clr	a
      000999 C0 E0            [24] 2322 	push	acc
      00099B 74 24            [12] 2323 	mov	a,#0x24
      00099D C0 E0            [24] 2324 	push	acc
      00099F 74r00            [12] 2325 	mov	a,#_u
      0009A1 C0 E0            [24] 2326 	push	acc
      0009A3 74s24            [12] 2327 	mov	a,#(_u >> 8)
      0009A5 C0 E0            [24] 2328 	push	acc
      0009A7 E4               [12] 2329 	clr	a
      0009A8 C0 E0            [24] 2330 	push	acc
      0009AA 90r00r00         [24] 2331 	mov	dptr,#_pu
      0009AD 75 F0 00         [24] 2332 	mov	b,#0x00
      0009B0 12r00r00         [24] 2333 	lcall	___memcpy
      0009B3 E5 81            [12] 2334 	mov	a,sp
      0009B5 24 FB            [12] 2335 	add	a,#0xfb
      0009B7 F5 81            [12] 2336 	mov	sp,a
                                   2337 ;	life.c:216: memcpy(u, nu, sizeof (nu));
      0009B9 E4               [12] 2338 	clr	a
      0009BA C0 E0            [24] 2339 	push	acc
      0009BC 74 24            [12] 2340 	mov	a,#0x24
      0009BE C0 E0            [24] 2341 	push	acc
      0009C0 74r00            [12] 2342 	mov	a,#_nu
      0009C2 C0 E0            [24] 2343 	push	acc
      0009C4 74s48            [12] 2344 	mov	a,#(_nu >> 8)
      0009C6 C0 E0            [24] 2345 	push	acc
      0009C8 E4               [12] 2346 	clr	a
      0009C9 C0 E0            [24] 2347 	push	acc
      0009CB 90r24r00         [24] 2348 	mov	dptr,#_u
      0009CE 75 F0 00         [24] 2349 	mov	b,#0x00
      0009D1 12r00r00         [24] 2350 	lcall	___memcpy
      0009D4 E5 81            [12] 2351 	mov	a,sp
      0009D6 24 FB            [12] 2352 	add	a,#0xfb
      0009D8 F5 81            [12] 2353 	mov	sp,a
                                   2354 ;	life.c:259: if (fixed || cycle2) {
      0009DA 78r1C            [12] 2355 	mov	r0,#_fixed
      0009DC E6               [12] 2356 	mov	a,@r0
      0009DD 70 08            [24] 2357 	jnz	00131$
      0009DF 78r1D            [12] 2358 	mov	r0,#_cycle2
      0009E1 E6               [12] 2359 	mov	a,@r0
      0009E2 70 03            [24] 2360 	jnz	00555$
      0009E4 02r05r84         [24] 2361 	ljmp	00237$
      0009E7                       2362 00555$:
      0009E7                       2363 00131$:
                                   2364 ;	life.c:260: printstr("DONE ");
      0009E7 7Dr50            [12] 2365 	mov	r5,#___str_7
      0009E9 7Es00            [12] 2366 	mov	r6,#(___str_7 >> 8)
      0009EB 7F 80            [12] 2367 	mov	r7,#0x80
                                   2368 ;	life.c:50: return;
      0009ED                       2369 00227$:
                                   2370 ;	life.c:48: for (; *s; s++) putchar(*s);
      0009ED 8D 82            [24] 2371 	mov	dpl,r5
      0009EF 8E 83            [24] 2372 	mov	dph,r6
      0009F1 8F F0            [24] 2373 	mov	b,r7
      0009F3 12r00r00         [24] 2374 	lcall	__gptrget
      0009F6 FC               [12] 2375 	mov	r4,a
      0009F7 60 10            [24] 2376 	jz	00188$
      0009F9 7B 00            [12] 2377 	mov	r3,#0x00
      0009FB 8C 82            [24] 2378 	mov	dpl,r4
      0009FD 8B 83            [24] 2379 	mov	dph,r3
      0009FF 12r00r00         [24] 2380 	lcall	_putchar
      000A02 0D               [12] 2381 	inc	r5
                                   2382 ;	life.c:260: printstr("DONE ");
      000A03 BD 00 E7         [24] 2383 	cjne	r5,#0x00,00227$
      000A06 0E               [12] 2384 	inc	r6
      000A07 80 E4            [24] 2385 	sjmp	00227$
      000A09                       2386 00188$:
                                   2387 ;	life.c:261: if (fixed) printstr("FIXED\r\n");
      000A09 78r1C            [12] 2388 	mov	r0,#_fixed
      000A0B E6               [12] 2389 	mov	a,@r0
      000A0C 60 22            [24] 2390 	jz	00129$
      000A0E 7Dr56            [12] 2391 	mov	r5,#___str_8
      000A10 7Es00            [12] 2392 	mov	r6,#(___str_8 >> 8)
      000A12 7F 80            [12] 2393 	mov	r7,#0x80
                                   2394 ;	life.c:50: return;
      000A14                       2395 00230$:
                                   2396 ;	life.c:48: for (; *s; s++) putchar(*s);
      000A14 8D 82            [24] 2397 	mov	dpl,r5
      000A16 8E 83            [24] 2398 	mov	dph,r6
      000A18 8F F0            [24] 2399 	mov	b,r7
      000A1A 12r00r00         [24] 2400 	lcall	__gptrget
      000A1D FC               [12] 2401 	mov	r4,a
      000A1E 60 32            [24] 2402 	jz	00130$
      000A20 7B 00            [12] 2403 	mov	r3,#0x00
      000A22 8C 82            [24] 2404 	mov	dpl,r4
      000A24 8B 83            [24] 2405 	mov	dph,r3
      000A26 12r00r00         [24] 2406 	lcall	_putchar
      000A29 0D               [12] 2407 	inc	r5
                                   2408 ;	life.c:261: if (fixed) printstr("FIXED\r\n");
      000A2A BD 00 E7         [24] 2409 	cjne	r5,#0x00,00230$
      000A2D 0E               [12] 2410 	inc	r6
      000A2E 80 E4            [24] 2411 	sjmp	00230$
      000A30                       2412 00129$:
                                   2413 ;	life.c:262: else printstr("CYCLE2\r\n");
      000A30 7Dr5E            [12] 2414 	mov	r5,#___str_9
      000A32 7Es00            [12] 2415 	mov	r6,#(___str_9 >> 8)
      000A34 7F 80            [12] 2416 	mov	r7,#0x80
                                   2417 ;	life.c:50: return;
      000A36                       2418 00233$:
                                   2419 ;	life.c:48: for (; *s; s++) putchar(*s);
      000A36 8D 82            [24] 2420 	mov	dpl,r5
      000A38 8E 83            [24] 2421 	mov	dph,r6
      000A3A 8F F0            [24] 2422 	mov	b,r7
      000A3C 12r00r00         [24] 2423 	lcall	__gptrget
      000A3F FC               [12] 2424 	mov	r4,a
      000A40 60 10            [24] 2425 	jz	00130$
      000A42 7B 00            [12] 2426 	mov	r3,#0x00
      000A44 8C 82            [24] 2427 	mov	dpl,r4
      000A46 8B 83            [24] 2428 	mov	dph,r3
      000A48 12r00r00         [24] 2429 	lcall	_putchar
      000A4B 0D               [12] 2430 	inc	r5
                                   2431 ;	life.c:262: else printstr("CYCLE2\r\n");
      000A4C BD 00 E7         [24] 2432 	cjne	r5,#0x00,00233$
      000A4F 0E               [12] 2433 	inc	r6
      000A50 80 E4            [24] 2434 	sjmp	00233$
      000A52                       2435 00130$:
                                   2436 ;	life.c:263: (void)getchar();
      000A52 12r00r05         [24] 2437 	lcall	_getchar
                                   2438 ;	life.c:264: break;
      000A55                       2439 00134$:
                                   2440 ;	life.c:268: if (i1) {
      000A55 78r11            [12] 2441 	mov	r0,#_i1
      000A57 E6               [12] 2442 	mov	a,@r0
      000A58 60 25            [24] 2443 	jz	00243$
                                   2444 ;	life.c:269: printstr("BREAK\r\n");
      000A5A 7Dr67            [12] 2445 	mov	r5,#___str_10
      000A5C 7Es00            [12] 2446 	mov	r6,#(___str_10 >> 8)
      000A5E 7F 80            [12] 2447 	mov	r7,#0x80
                                   2448 ;	life.c:50: return;
      000A60                       2449 00240$:
                                   2450 ;	life.c:48: for (; *s; s++) putchar(*s);
      000A60 8D 82            [24] 2451 	mov	dpl,r5
      000A62 8E 83            [24] 2452 	mov	dph,r6
      000A64 8F F0            [24] 2453 	mov	b,r7
      000A66 12r00r00         [24] 2454 	lcall	__gptrget
      000A69 FC               [12] 2455 	mov	r4,a
      000A6A 60 10            [24] 2456 	jz	00194$
      000A6C 7B 00            [12] 2457 	mov	r3,#0x00
      000A6E 8C 82            [24] 2458 	mov	dpl,r4
      000A70 8B 83            [24] 2459 	mov	dph,r3
      000A72 12r00r00         [24] 2460 	lcall	_putchar
      000A75 0D               [12] 2461 	inc	r5
                                   2462 ;	life.c:269: printstr("BREAK\r\n");
      000A76 BD 00 E7         [24] 2463 	cjne	r5,#0x00,00240$
      000A79 0E               [12] 2464 	inc	r6
      000A7A 80 E4            [24] 2465 	sjmp	00240$
      000A7C                       2466 00194$:
                                   2467 ;	life.c:270: (void)getchar();
      000A7C 12r00r05         [24] 2468 	lcall	_getchar
      000A7F                       2469 00243$:
                                   2470 ;	life.c:232: for (i0 = 0; !i0; ) {		
      000A7F 78r10            [12] 2471 	mov	r0,#_i0
      000A81 E6               [12] 2472 	mov	a,@r0
      000A82 70 03            [24] 2473 	jnz	00566$
      000A84 02r02r49         [24] 2474 	ljmp	00242$
      000A87                       2475 00566$:
                                   2476 ;	life.c:274: terminate:
      000A87                       2477 00138$:
                                   2478 ;	life.c:275: EA = 0;
                                   2479 ;	assignBit
      000A87 C2 AF            [12] 2480 	clr	_EA
                                   2481 ;	life.c:276: printstr("TERM\r\n");
      000A89 7Dr6F            [12] 2482 	mov	r5,#___str_11
      000A8B 7Es00            [12] 2483 	mov	r6,#(___str_11 >> 8)
      000A8D 7F 80            [12] 2484 	mov	r7,#0x80
                                   2485 ;	life.c:50: return;
      000A8F                       2486 00245$:
                                   2487 ;	life.c:48: for (; *s; s++) putchar(*s);
      000A8F 8D 82            [24] 2488 	mov	dpl,r5
      000A91 8E 83            [24] 2489 	mov	dph,r6
      000A93 8F F0            [24] 2490 	mov	b,r7
      000A95 12r00r00         [24] 2491 	lcall	__gptrget
      000A98 FC               [12] 2492 	mov	r4,a
      000A99 60 10            [24] 2493 	jz	00196$
      000A9B 7B 00            [12] 2494 	mov	r3,#0x00
      000A9D 8C 82            [24] 2495 	mov	dpl,r4
      000A9F 8B 83            [24] 2496 	mov	dph,r3
      000AA1 12r00r00         [24] 2497 	lcall	_putchar
      000AA4 0D               [12] 2498 	inc	r5
                                   2499 ;	life.c:276: printstr("TERM\r\n");
      000AA5 BD 00 E7         [24] 2500 	cjne	r5,#0x00,00245$
      000AA8 0E               [12] 2501 	inc	r6
      000AA9 80 E4            [24] 2502 	sjmp	00245$
      000AAB                       2503 00196$:
                                   2504 ;	life.c:277: (void)getchar();
      000AAB 12r00r05         [24] 2505 	lcall	_getchar
                                   2506 ;	life.c:281: __endasm;
      000AAE 02 00 00         [24] 2507 	ljmp	0
                                   2508 ;	life.c:282: }
      000AB1 85*00 81         [24] 2509 	mov	sp,_bp
      000AB4 D0*00            [24] 2510 	pop	_bp
      000AB6 22               [24] 2511 	ret
                                   2512 	.area CSEG    (CODE)
                                   2513 	.area CONST   (CODE)
                                   2514 	.area CONST   (CODE)
      000000                       2515 ___str_0:
      000000 1B                    2516 	.db 0x1b
      000001 5B 32 4A              2517 	.ascii "[2J"
      000004 1B                    2518 	.db 0x1b
      000005 5B 6D 47 45 4E 20     2519 	.ascii "[mGEN "
      00000B 00                    2520 	.db 0x00
                                   2521 	.area CSEG    (CODE)
                                   2522 	.area CONST   (CODE)
      00000C                       2523 ___str_1:
      00000C 0D                    2524 	.db 0x0d
      00000D 0A                    2525 	.db 0x0a
      00000E 00                    2526 	.db 0x00
                                   2527 	.area CSEG    (CODE)
                                   2528 	.area CONST   (CODE)
      00000F                       2529 ___str_2:
      00000F 4C 4F 41 44 20 3C     2530 	.ascii "LOAD <"
      000015 00                    2531 	.db 0x00
                                   2532 	.area CSEG    (CODE)
                                   2533 	.area CONST   (CODE)
      000016                       2534 ___str_3:
      000016 3E                    2535 	.ascii ">"
      000017 0D                    2536 	.db 0x0d
      000018 0A                    2537 	.db 0x0a
      000019 00                    2538 	.db 0x00
                                   2539 	.area CSEG    (CODE)
                                   2540 	.area CONST   (CODE)
      00001A                       2541 ___str_4:
      00001A 52 41 4E 44 4F 4D     2542 	.ascii "RANDOM"
      000020 00                    2543 	.db 0x00
                                   2544 	.area CSEG    (CODE)
                                   2545 	.area CONST   (CODE)
      000021                       2546 ___str_5:
      000021 1B                    2547 	.db 0x1b
      000022 5B 32 4A              2548 	.ascii "[2J"
      000025 1B                    2549 	.db 0x1b
      000026 5B 3F 32 35 6C        2550 	.ascii "[?25l"
      00002B 1B                    2551 	.db 0x1b
      00002C 5B 6D 4C 49 46 45 20  2552 	.ascii "[mLIFE INIT T L R"
             49 4E 49 54 20 54 20
             4C 20 52
      00003D 0D                    2553 	.db 0x0d
      00003E 0A                    2554 	.db 0x0a
      00003F 00                    2555 	.db 0x00
                                   2556 	.area CSEG    (CODE)
                                   2557 	.area CONST   (CODE)
      000040                       2558 ___str_6:
      000040 52 45 41 44 59 20 54  2559 	.ascii "READY T L R S"
             20 4C 20 52 20 53
      00004D 0D                    2560 	.db 0x0d
      00004E 0A                    2561 	.db 0x0a
      00004F 00                    2562 	.db 0x00
                                   2563 	.area CSEG    (CODE)
                                   2564 	.area CONST   (CODE)
      000050                       2565 ___str_7:
      000050 44 4F 4E 45 20        2566 	.ascii "DONE "
      000055 00                    2567 	.db 0x00
                                   2568 	.area CSEG    (CODE)
                                   2569 	.area CONST   (CODE)
      000056                       2570 ___str_8:
      000056 46 49 58 45 44        2571 	.ascii "FIXED"
      00005B 0D                    2572 	.db 0x0d
      00005C 0A                    2573 	.db 0x0a
      00005D 00                    2574 	.db 0x00
                                   2575 	.area CSEG    (CODE)
                                   2576 	.area CONST   (CODE)
      00005E                       2577 ___str_9:
      00005E 43 59 43 4C 45 32     2578 	.ascii "CYCLE2"
      000064 0D                    2579 	.db 0x0d
      000065 0A                    2580 	.db 0x0a
      000066 00                    2581 	.db 0x00
                                   2582 	.area CSEG    (CODE)
                                   2583 	.area CONST   (CODE)
      000067                       2584 ___str_10:
      000067 42 52 45 41 4B        2585 	.ascii "BREAK"
      00006C 0D                    2586 	.db 0x0d
      00006D 0A                    2587 	.db 0x0a
      00006E 00                    2588 	.db 0x00
                                   2589 	.area CSEG    (CODE)
                                   2590 	.area CONST   (CODE)
      00006F                       2591 ___str_11:
      00006F 54 45 52 4D           2592 	.ascii "TERM"
      000073 0D                    2593 	.db 0x0d
      000074 0A                    2594 	.db 0x0a
      000075 00                    2595 	.db 0x00
                                   2596 	.area CSEG    (CODE)
                                   2597 	.area XINIT   (CODE)
                                   2598 	.area CABS    (ABS,CODE)
