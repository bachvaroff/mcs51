                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module crc16
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _printf
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _FL
                                     21 	.globl _P
                                     22 	.globl _TF2
                                     23 	.globl _EXF2
                                     24 	.globl _RCLK
                                     25 	.globl _TCLK
                                     26 	.globl _EXEN2
                                     27 	.globl _TR2
                                     28 	.globl _C_T2
                                     29 	.globl _CP_RL2
                                     30 	.globl _T2CON_7
                                     31 	.globl _T2CON_6
                                     32 	.globl _T2CON_5
                                     33 	.globl _T2CON_4
                                     34 	.globl _T2CON_3
                                     35 	.globl _T2CON_2
                                     36 	.globl _T2CON_1
                                     37 	.globl _T2CON_0
                                     38 	.globl _PT2
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ET2
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _T2EX
                                     84 	.globl _T2
                                     85 	.globl _P1_7
                                     86 	.globl _P1_6
                                     87 	.globl _P1_5
                                     88 	.globl _P1_4
                                     89 	.globl _P1_3
                                     90 	.globl _P1_2
                                     91 	.globl _P1_1
                                     92 	.globl _P1_0
                                     93 	.globl _TF1
                                     94 	.globl _TR1
                                     95 	.globl _TF0
                                     96 	.globl _TR0
                                     97 	.globl _IE1
                                     98 	.globl _IT1
                                     99 	.globl _IE0
                                    100 	.globl _IT0
                                    101 	.globl _P0_7
                                    102 	.globl _P0_6
                                    103 	.globl _P0_5
                                    104 	.globl _P0_4
                                    105 	.globl _P0_3
                                    106 	.globl _P0_2
                                    107 	.globl _P0_1
                                    108 	.globl _P0_0
                                    109 	.globl _B
                                    110 	.globl _A
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _TH2
                                    114 	.globl _TL2
                                    115 	.globl _RCAP2H
                                    116 	.globl _RCAP2L
                                    117 	.globl _T2MOD
                                    118 	.globl _T2CON
                                    119 	.globl _IP
                                    120 	.globl _P3
                                    121 	.globl _IE
                                    122 	.globl _P2
                                    123 	.globl _SBUF
                                    124 	.globl _SCON
                                    125 	.globl _P1
                                    126 	.globl _TH1
                                    127 	.globl _TH0
                                    128 	.globl _TL1
                                    129 	.globl _TL0
                                    130 	.globl _TMOD
                                    131 	.globl _TCON
                                    132 	.globl _PCON
                                    133 	.globl _DPH
                                    134 	.globl _DPL
                                    135 	.globl _SP
                                    136 	.globl _P0
                                    137 	.globl _intr
                                    138 	.globl _putchar
                                    139 	.globl _getchar
                                    140 ;--------------------------------------------------------
                                    141 ; special function registers
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0	=	0x0080
                           000081   146 _SP	=	0x0081
                           000082   147 _DPL	=	0x0082
                           000083   148 _DPH	=	0x0083
                           000087   149 _PCON	=	0x0087
                           000088   150 _TCON	=	0x0088
                           000089   151 _TMOD	=	0x0089
                           00008A   152 _TL0	=	0x008a
                           00008B   153 _TL1	=	0x008b
                           00008C   154 _TH0	=	0x008c
                           00008D   155 _TH1	=	0x008d
                           000090   156 _P1	=	0x0090
                           000098   157 _SCON	=	0x0098
                           000099   158 _SBUF	=	0x0099
                           0000A0   159 _P2	=	0x00a0
                           0000A8   160 _IE	=	0x00a8
                           0000B0   161 _P3	=	0x00b0
                           0000B8   162 _IP	=	0x00b8
                           0000C8   163 _T2CON	=	0x00c8
                           0000C9   164 _T2MOD	=	0x00c9
                           0000CA   165 _RCAP2L	=	0x00ca
                           0000CB   166 _RCAP2H	=	0x00cb
                           0000CC   167 _TL2	=	0x00cc
                           0000CD   168 _TH2	=	0x00cd
                           0000D0   169 _PSW	=	0x00d0
                           0000E0   170 _ACC	=	0x00e0
                           0000E0   171 _A	=	0x00e0
                           0000F0   172 _B	=	0x00f0
                                    173 ;--------------------------------------------------------
                                    174 ; special function bits
                                    175 ;--------------------------------------------------------
                                    176 	.area RSEG    (ABS,DATA)
      000000                        177 	.org 0x0000
                           000080   178 _P0_0	=	0x0080
                           000081   179 _P0_1	=	0x0081
                           000082   180 _P0_2	=	0x0082
                           000083   181 _P0_3	=	0x0083
                           000084   182 _P0_4	=	0x0084
                           000085   183 _P0_5	=	0x0085
                           000086   184 _P0_6	=	0x0086
                           000087   185 _P0_7	=	0x0087
                           000088   186 _IT0	=	0x0088
                           000089   187 _IE0	=	0x0089
                           00008A   188 _IT1	=	0x008a
                           00008B   189 _IE1	=	0x008b
                           00008C   190 _TR0	=	0x008c
                           00008D   191 _TF0	=	0x008d
                           00008E   192 _TR1	=	0x008e
                           00008F   193 _TF1	=	0x008f
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           000090   202 _T2	=	0x0090
                           000091   203 _T2EX	=	0x0091
                           000098   204 _RI	=	0x0098
                           000099   205 _TI	=	0x0099
                           00009A   206 _RB8	=	0x009a
                           00009B   207 _TB8	=	0x009b
                           00009C   208 _REN	=	0x009c
                           00009D   209 _SM2	=	0x009d
                           00009E   210 _SM1	=	0x009e
                           00009F   211 _SM0	=	0x009f
                           0000A0   212 _P2_0	=	0x00a0
                           0000A1   213 _P2_1	=	0x00a1
                           0000A2   214 _P2_2	=	0x00a2
                           0000A3   215 _P2_3	=	0x00a3
                           0000A4   216 _P2_4	=	0x00a4
                           0000A5   217 _P2_5	=	0x00a5
                           0000A6   218 _P2_6	=	0x00a6
                           0000A7   219 _P2_7	=	0x00a7
                           0000A8   220 _EX0	=	0x00a8
                           0000A9   221 _ET0	=	0x00a9
                           0000AA   222 _EX1	=	0x00aa
                           0000AB   223 _ET1	=	0x00ab
                           0000AC   224 _ES	=	0x00ac
                           0000AD   225 _ET2	=	0x00ad
                           0000AF   226 _EA	=	0x00af
                           0000B0   227 _P3_0	=	0x00b0
                           0000B1   228 _P3_1	=	0x00b1
                           0000B2   229 _P3_2	=	0x00b2
                           0000B3   230 _P3_3	=	0x00b3
                           0000B4   231 _P3_4	=	0x00b4
                           0000B5   232 _P3_5	=	0x00b5
                           0000B6   233 _P3_6	=	0x00b6
                           0000B7   234 _P3_7	=	0x00b7
                           0000B0   235 _RXD	=	0x00b0
                           0000B1   236 _TXD	=	0x00b1
                           0000B2   237 _INT0	=	0x00b2
                           0000B3   238 _INT1	=	0x00b3
                           0000B4   239 _T0	=	0x00b4
                           0000B5   240 _T1	=	0x00b5
                           0000B6   241 _WR	=	0x00b6
                           0000B7   242 _RD	=	0x00b7
                           0000B8   243 _PX0	=	0x00b8
                           0000B9   244 _PT0	=	0x00b9
                           0000BA   245 _PX1	=	0x00ba
                           0000BB   246 _PT1	=	0x00bb
                           0000BC   247 _PS	=	0x00bc
                           0000BD   248 _PT2	=	0x00bd
                           0000C8   249 _T2CON_0	=	0x00c8
                           0000C9   250 _T2CON_1	=	0x00c9
                           0000CA   251 _T2CON_2	=	0x00ca
                           0000CB   252 _T2CON_3	=	0x00cb
                           0000CC   253 _T2CON_4	=	0x00cc
                           0000CD   254 _T2CON_5	=	0x00cd
                           0000CE   255 _T2CON_6	=	0x00ce
                           0000CF   256 _T2CON_7	=	0x00cf
                           0000C8   257 _CP_RL2	=	0x00c8
                           0000C9   258 _C_T2	=	0x00c9
                           0000CA   259 _TR2	=	0x00ca
                           0000CB   260 _EXEN2	=	0x00cb
                           0000CC   261 _TCLK	=	0x00cc
                           0000CD   262 _RCLK	=	0x00cd
                           0000CE   263 _EXF2	=	0x00ce
                           0000CF   264 _TF2	=	0x00cf
                           0000D0   265 _P	=	0x00d0
                           0000D1   266 _FL	=	0x00d1
                           0000D2   267 _OV	=	0x00d2
                           0000D3   268 _RS0	=	0x00d3
                           0000D4   269 _RS1	=	0x00d4
                           0000D5   270 _F0	=	0x00d5
                           0000D6   271 _AC	=	0x00d6
                           0000D7   272 _CY	=	0x00d7
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable register banks
                                    275 ;--------------------------------------------------------
                                    276 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; overlayable bit register bank
                                    282 ;--------------------------------------------------------
                                    283 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        284 bits:
      000000                        285 	.ds 1
                           008000   286 	b0 = bits[0]
                           008100   287 	b1 = bits[1]
                           008200   288 	b2 = bits[2]
                           008300   289 	b3 = bits[3]
                           008400   290 	b4 = bits[4]
                           008500   291 	b5 = bits[5]
                           008600   292 	b6 = bits[6]
                           008700   293 	b7 = bits[7]
                                    294 ;--------------------------------------------------------
                                    295 ; internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area DSEG    (DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable items in internal ram 
                                    300 ;--------------------------------------------------------
                                    301 ;--------------------------------------------------------
                                    302 ; Stack segment in internal ram 
                                    303 ;--------------------------------------------------------
                                    304 	.area	SSEG
      000000                        305 __start__stack:
      000000                        306 	.ds	1
                                    307 
                                    308 ;--------------------------------------------------------
                                    309 ; indirectly addressable internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area ISEG    (DATA)
                                    312 ;--------------------------------------------------------
                                    313 ; absolute internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area IABS    (ABS,DATA)
                                    316 	.area IABS    (ABS,DATA)
                                    317 ;--------------------------------------------------------
                                    318 ; bit data
                                    319 ;--------------------------------------------------------
                                    320 	.area BSEG    (BIT)
                                    321 ;--------------------------------------------------------
                                    322 ; paged external ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area PSEG    (PAG,XDATA)
                                    325 ;--------------------------------------------------------
                                    326 ; external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XSEG    (XDATA)
      000000                        329 _intr::
      000000                        330 	.ds 2
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0D         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r01rA4         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	crc16.c:11: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	crc16.c:16: __endasm;
      000000 E5 82            [12]  395 	mov	a, dpl
      000002 02 00 30         [24]  396 	ljmp	0x0030
                                    397 ;	crc16.c:17: }
                                    398 ;	naked function: no epilogue.
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'getchar'
                                    401 ;------------------------------------------------------------
                                    402 ;	crc16.c:19: int getchar(void) {
                                    403 ;	-----------------------------------------
                                    404 ;	 function getchar
                                    405 ;	-----------------------------------------
      000005                        406 _getchar:
                           000007   407 	ar7 = 0x07
                           000006   408 	ar6 = 0x06
                           000005   409 	ar5 = 0x05
                           000004   410 	ar4 = 0x04
                           000003   411 	ar3 = 0x03
                           000002   412 	ar2 = 0x02
                           000001   413 	ar1 = 0x01
                           000000   414 	ar0 = 0x00
                                    415 ;	crc16.c:24: __endasm;
      000005 12 00 32         [24]  416 	lcall	0x0032
      000008 C2 83            [12]  417 	clr	dph
      00000A F5 82            [12]  418 	mov	dpl, a
                                    419 ;	crc16.c:25: }
      00000C 22               [24]  420 	ret
                                    421 ;------------------------------------------------------------
                                    422 ;Allocation info for local variables in function 'int0'
                                    423 ;------------------------------------------------------------
                                    424 ;	crc16.c:29: void int0(void) __interrupt 0 __using 1 {
                                    425 ;	-----------------------------------------
                                    426 ;	 function int0
                                    427 ;	-----------------------------------------
      00000D                        428 _int0:
                           00000F   429 	ar7 = 0x0f
                           00000E   430 	ar6 = 0x0e
                           00000D   431 	ar5 = 0x0d
                           00000C   432 	ar4 = 0x0c
                           00000B   433 	ar3 = 0x0b
                           00000A   434 	ar2 = 0x0a
                           000009   435 	ar1 = 0x09
                           000008   436 	ar0 = 0x08
      00000D C0 E0            [24]  437 	push	acc
      00000F C0 82            [24]  438 	push	dpl
      000011 C0 83            [24]  439 	push	dph
                                    440 ;	crc16.c:30: intr = 1;
      000013 90r00r00         [24]  441 	mov	dptr,#_intr
      000016 74 01            [12]  442 	mov	a,#0x01
      000018 F0               [24]  443 	movx	@dptr,a
      000019 E4               [12]  444 	clr	a
      00001A A3               [24]  445 	inc	dptr
      00001B F0               [24]  446 	movx	@dptr,a
                                    447 ;	crc16.c:31: }
      00001C D0 83            [24]  448 	pop	dph
      00001E D0 82            [24]  449 	pop	dpl
      000020 D0 E0            [24]  450 	pop	acc
      000022 32               [24]  451 	reti
                                    452 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    453 ;	eliminated unneeded push/pop psw
                                    454 ;	eliminated unneeded push/pop b
                                    455 ;------------------------------------------------------------
                                    456 ;Allocation info for local variables in function 'ccrcb_init'
                                    457 ;------------------------------------------------------------
                                    458 ;r                         Allocated to registers r5 r6 r7 
                                    459 ;------------------------------------------------------------
                                    460 ;	crc16.c:33: static void ccrcb_init(unsigned int *r) {
                                    461 ;	-----------------------------------------
                                    462 ;	 function ccrcb_init
                                    463 ;	-----------------------------------------
      000023                        464 _ccrcb_init:
                           000007   465 	ar7 = 0x07
                           000006   466 	ar6 = 0x06
                           000005   467 	ar5 = 0x05
                           000004   468 	ar4 = 0x04
                           000003   469 	ar3 = 0x03
                           000002   470 	ar2 = 0x02
                           000001   471 	ar1 = 0x01
                           000000   472 	ar0 = 0x00
                                    473 ;	crc16.c:34: *r = ACC_INITIAL;
      000023 74 FF            [12]  474 	mov	a,#0xff
      000025 12r00r00         [24]  475 	lcall	__gptrput
      000028 A3               [24]  476 	inc	dptr
                                    477 ;	crc16.c:35: return;
                                    478 ;	crc16.c:36: }
      000029 02r00r00         [24]  479 	ljmp	__gptrput
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'ccrcb'
                                    482 ;------------------------------------------------------------
                                    483 ;oct                       Allocated to stack - _bp -3
                                    484 ;r                         Allocated to registers r5 r6 r7 
                                    485 ;rt                        Allocated to registers r3 r4 
                                    486 ;bitp                      Allocated to stack - _bp +3
                                    487 ;sloc0                     Allocated to stack - _bp +1
                                    488 ;------------------------------------------------------------
                                    489 ;	crc16.c:38: static void ccrcb(unsigned int *r, unsigned char oct) {
                                    490 ;	-----------------------------------------
                                    491 ;	 function ccrcb
                                    492 ;	-----------------------------------------
      00002C                        493 _ccrcb:
      00002C C0*00            [24]  494 	push	_bp
      00002E 85 81*00         [24]  495 	mov	_bp,sp
      000031 05 81            [12]  496 	inc	sp
      000033 05 81            [12]  497 	inc	sp
      000035 05 81            [12]  498 	inc	sp
                                    499 ;	crc16.c:42: for (rt = *r, bitp = 0x80u; bitp; bitp >>= 1)
      000037 AD 82            [24]  500 	mov	r5,dpl
      000039 AE 83            [24]  501 	mov	r6,dph
      00003B AF F0            [24]  502 	mov	r7,b
      00003D 12r00r00         [24]  503 	lcall	__gptrget
      000040 FB               [12]  504 	mov	r3,a
      000041 A3               [24]  505 	inc	dptr
      000042 12r00r00         [24]  506 	lcall	__gptrget
      000045 FC               [12]  507 	mov	r4,a
      000046 E5*00            [12]  508 	mov	a,_bp
      000048 24 03            [12]  509 	add	a,#0x03
      00004A F8               [12]  510 	mov	r0,a
      00004B 76 80            [12]  511 	mov	@r0,#0x80
      00004D                        512 00103$:
      00004D E5*00            [12]  513 	mov	a,_bp
      00004F 24 03            [12]  514 	add	a,#0x03
      000051 F8               [12]  515 	mov	r0,a
      000052 E6               [12]  516 	mov	a,@r0
      000053 60 70            [24]  517 	jz	00101$
                                    518 ;	crc16.c:43: rt = ((rt >> 15) ^ (!!(oct & bitp))) ? ((rt << 1) ^ POLY) : (rt << 1);
      000055 C0 05            [24]  519 	push	ar5
      000057 C0 06            [24]  520 	push	ar6
      000059 C0 07            [24]  521 	push	ar7
      00005B EC               [12]  522 	mov	a,r4
      00005C 23               [12]  523 	rl	a
      00005D 54 01            [12]  524 	anl	a,#0x01
      00005F FE               [12]  525 	mov	r6,a
      000060 7F 00            [12]  526 	mov	r7,#0x00
      000062 E5*00            [12]  527 	mov	a,_bp
      000064 24 FD            [12]  528 	add	a,#0xfd
      000066 F8               [12]  529 	mov	r0,a
      000067 E5*00            [12]  530 	mov	a,_bp
      000069 24 03            [12]  531 	add	a,#0x03
      00006B F9               [12]  532 	mov	r1,a
      00006C E7               [12]  533 	mov	a,@r1
      00006D 56               [12]  534 	anl	a,@r0
      00006E B4 01 00         [24]  535 	cjne	a,#0x01,00122$
      000071                        536 00122$:
      000071 B3               [12]  537 	cpl	c
      000072 92*00            [24]  538 	mov	b0,c
      000074 E4               [12]  539 	clr	a
      000075 33               [12]  540 	rlc	a
      000076 FA               [12]  541 	mov	r2,a
      000077 7D 00            [12]  542 	mov	r5,#0x00
      000079 62 06            [12]  543 	xrl	ar6,a
      00007B ED               [12]  544 	mov	a,r5
      00007C 62 07            [12]  545 	xrl	ar7,a
      00007E EE               [12]  546 	mov	a,r6
      00007F 4F               [12]  547 	orl	a,r7
      000080 D0 07            [24]  548 	pop	ar7
      000082 D0 06            [24]  549 	pop	ar6
      000084 D0 05            [24]  550 	pop	ar5
      000086 60 20            [24]  551 	jz	00107$
      000088 C0 05            [24]  552 	push	ar5
      00008A C0 06            [24]  553 	push	ar6
      00008C C0 07            [24]  554 	push	ar7
      00008E EB               [12]  555 	mov	a,r3
      00008F 2B               [12]  556 	add	a,r3
      000090 FA               [12]  557 	mov	r2,a
      000091 EC               [12]  558 	mov	a,r4
      000092 33               [12]  559 	rlc	a
      000093 FF               [12]  560 	mov	r7,a
      000094 A8*00            [24]  561 	mov	r0,_bp
      000096 08               [12]  562 	inc	r0
      000097 74 21            [12]  563 	mov	a,#0x21
      000099 6A               [12]  564 	xrl	a,r2
      00009A F6               [12]  565 	mov	@r0,a
      00009B 74 10            [12]  566 	mov	a,#0x10
      00009D 6F               [12]  567 	xrl	a,r7
      00009E 08               [12]  568 	inc	r0
      00009F F6               [12]  569 	mov	@r0,a
      0000A0 D0 07            [24]  570 	pop	ar7
      0000A2 D0 06            [24]  571 	pop	ar6
      0000A4 D0 05            [24]  572 	pop	ar5
      0000A6 80 0A            [24]  573 	sjmp	00108$
      0000A8                        574 00107$:
      0000A8 A8*00            [24]  575 	mov	r0,_bp
      0000AA 08               [12]  576 	inc	r0
      0000AB EB               [12]  577 	mov	a,r3
      0000AC 2B               [12]  578 	add	a,r3
      0000AD F6               [12]  579 	mov	@r0,a
      0000AE EC               [12]  580 	mov	a,r4
      0000AF 33               [12]  581 	rlc	a
      0000B0 08               [12]  582 	inc	r0
      0000B1 F6               [12]  583 	mov	@r0,a
      0000B2                        584 00108$:
      0000B2 A8*00            [24]  585 	mov	r0,_bp
      0000B4 08               [12]  586 	inc	r0
      0000B5 86 03            [24]  587 	mov	ar3,@r0
      0000B7 08               [12]  588 	inc	r0
      0000B8 86 04            [24]  589 	mov	ar4,@r0
                                    590 ;	crc16.c:42: for (rt = *r, bitp = 0x80u; bitp; bitp >>= 1)
      0000BA E5*00            [12]  591 	mov	a,_bp
      0000BC 24 03            [12]  592 	add	a,#0x03
      0000BE F8               [12]  593 	mov	r0,a
      0000BF E6               [12]  594 	mov	a,@r0
      0000C0 C3               [12]  595 	clr	c
      0000C1 13               [12]  596 	rrc	a
      0000C2 F6               [12]  597 	mov	@r0,a
      0000C3 80 88            [24]  598 	sjmp	00103$
      0000C5                        599 00101$:
                                    600 ;	crc16.c:44: *r = rt;
      0000C5 8D 82            [24]  601 	mov	dpl,r5
      0000C7 8E 83            [24]  602 	mov	dph,r6
      0000C9 8F F0            [24]  603 	mov	b,r7
      0000CB EB               [12]  604 	mov	a,r3
      0000CC 12r00r00         [24]  605 	lcall	__gptrput
      0000CF A3               [24]  606 	inc	dptr
      0000D0 EC               [12]  607 	mov	a,r4
      0000D1 12r00r00         [24]  608 	lcall	__gptrput
                                    609 ;	crc16.c:45: }
      0000D4 85*00 81         [24]  610 	mov	sp,_bp
      0000D7 D0*00            [24]  611 	pop	_bp
      0000D9 22               [24]  612 	ret
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function 'ccrcb_finish'
                                    615 ;------------------------------------------------------------
                                    616 ;r                         Allocated to registers r5 r6 r7 
                                    617 ;------------------------------------------------------------
                                    618 ;	crc16.c:47: static void ccrcb_finish(unsigned int *r) {
                                    619 ;	-----------------------------------------
                                    620 ;	 function ccrcb_finish
                                    621 ;	-----------------------------------------
      0000DA                        622 _ccrcb_finish:
                                    623 ;	crc16.c:48: *r ^= ACC_FINAL;
      0000DA AD 82            [24]  624 	mov	r5,dpl
      0000DC AE 83            [24]  625 	mov	r6,dph
      0000DE AF F0            [24]  626 	mov	r7,b
      0000E0 12r00r00         [24]  627 	lcall	__gptrget
      0000E3 FB               [12]  628 	mov	r3,a
      0000E4 A3               [24]  629 	inc	dptr
      0000E5 12r00r00         [24]  630 	lcall	__gptrget
      0000E8 FC               [12]  631 	mov	r4,a
      0000E9 8D 82            [24]  632 	mov	dpl,r5
      0000EB 8E 83            [24]  633 	mov	dph,r6
      0000ED 8F F0            [24]  634 	mov	b,r7
      0000EF EB               [12]  635 	mov	a,r3
      0000F0 12r00r00         [24]  636 	lcall	__gptrput
      0000F3 A3               [24]  637 	inc	dptr
      0000F4 EC               [12]  638 	mov	a,r4
                                    639 ;	crc16.c:49: }
      0000F5 02r00r00         [24]  640 	ljmp	__gptrput
                                    641 ;------------------------------------------------------------
                                    642 ;Allocation info for local variables in function 'calc_crc'
                                    643 ;------------------------------------------------------------
                                    644 ;len                       Allocated to stack - _bp -4
                                    645 ;base                      Allocated to stack - _bp +1
                                    646 ;off                       Allocated to stack - _bp +4
                                    647 ;crc                       Allocated to stack - _bp +6
                                    648 ;------------------------------------------------------------
                                    649 ;	crc16.c:51: static unsigned int calc_crc(unsigned char *base, unsigned int len) {
                                    650 ;	-----------------------------------------
                                    651 ;	 function calc_crc
                                    652 ;	-----------------------------------------
      0000F8                        653 _calc_crc:
      0000F8 C0*00            [24]  654 	push	_bp
      0000FA 85 81*00         [24]  655 	mov	_bp,sp
      0000FD C0 82            [24]  656 	push	dpl
      0000FF C0 83            [24]  657 	push	dph
      000101 C0 F0            [24]  658 	push	b
      000103 E5 81            [12]  659 	mov	a,sp
      000105 24 04            [12]  660 	add	a,#0x04
      000107 F5 81            [12]  661 	mov	sp,a
                                    662 ;	crc16.c:54: ccrcb_init(&crc);
      000109 E5*00            [12]  663 	mov	a,_bp
      00010B 24 06            [12]  664 	add	a,#0x06
      00010D FC               [12]  665 	mov	r4,a
      00010E FA               [12]  666 	mov	r2,a
      00010F 7B 00            [12]  667 	mov	r3,#0x00
      000111 7F 40            [12]  668 	mov	r7,#0x40
      000113 8A 82            [24]  669 	mov	dpl,r2
      000115 8B 83            [24]  670 	mov	dph,r3
      000117 8F F0            [24]  671 	mov	b,r7
      000119 C0 04            [24]  672 	push	ar4
      00011B 12r00r23         [24]  673 	lcall	_ccrcb_init
      00011E D0 04            [24]  674 	pop	ar4
                                    675 ;	crc16.c:55: for (off = 0u; off < len; off++)
      000120 8C 07            [24]  676 	mov	ar7,r4
      000122 E5*00            [12]  677 	mov	a,_bp
      000124 24 04            [12]  678 	add	a,#0x04
      000126 F8               [12]  679 	mov	r0,a
      000127 E4               [12]  680 	clr	a
      000128 F6               [12]  681 	mov	@r0,a
      000129 08               [12]  682 	inc	r0
      00012A F6               [12]  683 	mov	@r0,a
      00012B                        684 00103$:
      00012B E5*00            [12]  685 	mov	a,_bp
      00012D 24 04            [12]  686 	add	a,#0x04
      00012F F8               [12]  687 	mov	r0,a
      000130 E5*00            [12]  688 	mov	a,_bp
      000132 24 FC            [12]  689 	add	a,#0xfc
      000134 F9               [12]  690 	mov	r1,a
      000135 C3               [12]  691 	clr	c
      000136 E6               [12]  692 	mov	a,@r0
      000137 97               [12]  693 	subb	a,@r1
      000138 08               [12]  694 	inc	r0
      000139 E6               [12]  695 	mov	a,@r0
      00013A 09               [12]  696 	inc	r1
      00013B 97               [12]  697 	subb	a,@r1
      00013C 50 49            [24]  698 	jnc	00101$
                                    699 ;	crc16.c:56: ccrcb(&crc, base[off]);
      00013E C0 04            [24]  700 	push	ar4
      000140 A8*00            [24]  701 	mov	r0,_bp
      000142 08               [12]  702 	inc	r0
      000143 E5*00            [12]  703 	mov	a,_bp
      000145 24 04            [12]  704 	add	a,#0x04
      000147 F9               [12]  705 	mov	r1,a
      000148 E7               [12]  706 	mov	a,@r1
      000149 26               [12]  707 	add	a,@r0
      00014A FA               [12]  708 	mov	r2,a
      00014B 09               [12]  709 	inc	r1
      00014C E7               [12]  710 	mov	a,@r1
      00014D 08               [12]  711 	inc	r0
      00014E 36               [12]  712 	addc	a,@r0
      00014F FB               [12]  713 	mov	r3,a
      000150 08               [12]  714 	inc	r0
      000151 86 04            [24]  715 	mov	ar4,@r0
      000153 8A 82            [24]  716 	mov	dpl,r2
      000155 8B 83            [24]  717 	mov	dph,r3
      000157 8C F0            [24]  718 	mov	b,r4
      000159 12r00r00         [24]  719 	lcall	__gptrget
      00015C FA               [12]  720 	mov	r2,a
      00015D 8F 03            [24]  721 	mov	ar3,r7
      00015F 7C 00            [12]  722 	mov	r4,#0x00
      000161 7E 40            [12]  723 	mov	r6,#0x40
      000163 C0 07            [24]  724 	push	ar7
      000165 C0 04            [24]  725 	push	ar4
      000167 C0 02            [24]  726 	push	ar2
      000169 8B 82            [24]  727 	mov	dpl,r3
      00016B 8C 83            [24]  728 	mov	dph,r4
      00016D 8E F0            [24]  729 	mov	b,r6
      00016F 12r00r2C         [24]  730 	lcall	_ccrcb
      000172 15 81            [12]  731 	dec	sp
      000174 D0 04            [24]  732 	pop	ar4
      000176 D0 07            [24]  733 	pop	ar7
                                    734 ;	crc16.c:55: for (off = 0u; off < len; off++)
      000178 E5*00            [12]  735 	mov	a,_bp
      00017A 24 04            [12]  736 	add	a,#0x04
      00017C F8               [12]  737 	mov	r0,a
      00017D 06               [12]  738 	inc	@r0
      00017E B6 00 02         [24]  739 	cjne	@r0,#0x00,00117$
      000181 08               [12]  740 	inc	r0
      000182 06               [12]  741 	inc	@r0
      000183                        742 00117$:
      000183 D0 04            [24]  743 	pop	ar4
      000185 80 A4            [24]  744 	sjmp	00103$
      000187                        745 00101$:
                                    746 ;	crc16.c:57: ccrcb_finish(&crc);
      000187 7F 00            [12]  747 	mov	r7,#0x00
      000189 7E 40            [12]  748 	mov	r6,#0x40
      00018B 8C 82            [24]  749 	mov	dpl,r4
      00018D 8F 83            [24]  750 	mov	dph,r7
      00018F 8E F0            [24]  751 	mov	b,r6
      000191 12r00rDA         [24]  752 	lcall	_ccrcb_finish
                                    753 ;	crc16.c:59: return crc;
      000194 E5*00            [12]  754 	mov	a,_bp
      000196 24 06            [12]  755 	add	a,#0x06
      000198 F8               [12]  756 	mov	r0,a
      000199 86 82            [24]  757 	mov	dpl,@r0
      00019B 08               [12]  758 	inc	r0
      00019C 86 83            [24]  759 	mov	dph,@r0
                                    760 ;	crc16.c:60: }
      00019E 85*00 81         [24]  761 	mov	sp,_bp
      0001A1 D0*00            [24]  762 	pop	_bp
      0001A3 22               [24]  763 	ret
                                    764 ;------------------------------------------------------------
                                    765 ;Allocation info for local variables in function 'main'
                                    766 ;------------------------------------------------------------
                                    767 ;base                      Allocated to registers r5 r6 r7 
                                    768 ;len                       Allocated to registers 
                                    769 ;crc                       Allocated to registers 
                                    770 ;------------------------------------------------------------
                                    771 ;	crc16.c:64: void main(void) {
                                    772 ;	-----------------------------------------
                                    773 ;	 function main
                                    774 ;	-----------------------------------------
      0001A4                        775 _main:
                                    776 ;	crc16.c:69: intr = 0;
      0001A4 90r00r00         [24]  777 	mov	dptr,#_intr
      0001A7 E4               [12]  778 	clr	a
      0001A8 F0               [24]  779 	movx	@dptr,a
      0001A9 A3               [24]  780 	inc	dptr
      0001AA F0               [24]  781 	movx	@dptr,a
                                    782 ;	crc16.c:71: IT0 = 1;
                                    783 ;	assignBit
      0001AB D2 88            [12]  784 	setb	_IT0
                                    785 ;	crc16.c:72: EX0 = 1;
                                    786 ;	assignBit
      0001AD D2 A8            [12]  787 	setb	_EX0
                                    788 ;	crc16.c:73: EA = 1;
                                    789 ;	assignBit
      0001AF D2 AF            [12]  790 	setb	_EA
                                    791 ;	crc16.c:75: for (base = (unsigned char *)0x0u; 1; base += (len >> 1)) {
      0001B1 7D 00            [12]  792 	mov	r5,#0x00
      0001B3 7E 00            [12]  793 	mov	r6,#0x00
      0001B5 7F 00            [12]  794 	mov	r7,#0x00
      0001B7                        795 00104$:
                                    796 ;	crc16.c:76: printf("base=0x%04x ", (unsigned int)base);
      0001B7 8D 03            [24]  797 	mov	ar3,r5
      0001B9 8E 04            [24]  798 	mov	ar4,r6
      0001BB C0 07            [24]  799 	push	ar7
      0001BD C0 06            [24]  800 	push	ar6
      0001BF C0 05            [24]  801 	push	ar5
      0001C1 C0 03            [24]  802 	push	ar3
      0001C3 C0 04            [24]  803 	push	ar4
      0001C5 74r00            [12]  804 	mov	a,#___str_0
      0001C7 C0 E0            [24]  805 	push	acc
      0001C9 74s00            [12]  806 	mov	a,#(___str_0 >> 8)
      0001CB C0 E0            [24]  807 	push	acc
      0001CD 74 80            [12]  808 	mov	a,#0x80
      0001CF C0 E0            [24]  809 	push	acc
      0001D1 12r00r00         [24]  810 	lcall	_printf
      0001D4 E5 81            [12]  811 	mov	a,sp
      0001D6 24 FB            [12]  812 	add	a,#0xfb
      0001D8 F5 81            [12]  813 	mov	sp,a
                                    814 ;	crc16.c:77: printf("len=0x%04x ", len);
      0001DA E4               [12]  815 	clr	a
      0001DB C0 E0            [24]  816 	push	acc
      0001DD 74 20            [12]  817 	mov	a,#0x20
      0001DF C0 E0            [24]  818 	push	acc
      0001E1 74r0D            [12]  819 	mov	a,#___str_1
      0001E3 C0 E0            [24]  820 	push	acc
      0001E5 74s00            [12]  821 	mov	a,#(___str_1 >> 8)
      0001E7 C0 E0            [24]  822 	push	acc
      0001E9 74 80            [12]  823 	mov	a,#0x80
      0001EB C0 E0            [24]  824 	push	acc
      0001ED 12r00r00         [24]  825 	lcall	_printf
      0001F0 E5 81            [12]  826 	mov	a,sp
      0001F2 24 FB            [12]  827 	add	a,#0xfb
      0001F4 F5 81            [12]  828 	mov	sp,a
      0001F6 D0 05            [24]  829 	pop	ar5
      0001F8 D0 06            [24]  830 	pop	ar6
      0001FA D0 07            [24]  831 	pop	ar7
                                    832 ;	crc16.c:78: crc = calc_crc(base, len);
      0001FC C0 07            [24]  833 	push	ar7
      0001FE C0 06            [24]  834 	push	ar6
      000200 C0 05            [24]  835 	push	ar5
      000202 E4               [12]  836 	clr	a
      000203 C0 E0            [24]  837 	push	acc
      000205 74 20            [12]  838 	mov	a,#0x20
      000207 C0 E0            [24]  839 	push	acc
      000209 8D 82            [24]  840 	mov	dpl,r5
      00020B 8E 83            [24]  841 	mov	dph,r6
      00020D 8F F0            [24]  842 	mov	b,r7
      00020F 12r00rF8         [24]  843 	lcall	_calc_crc
      000212 AB 82            [24]  844 	mov	r3,dpl
      000214 AC 83            [24]  845 	mov	r4,dph
      000216 15 81            [12]  846 	dec	sp
      000218 15 81            [12]  847 	dec	sp
                                    848 ;	crc16.c:79: printf("CRC16=0x%04x\n\r", crc);
      00021A C0 03            [24]  849 	push	ar3
      00021C C0 04            [24]  850 	push	ar4
      00021E 74r19            [12]  851 	mov	a,#___str_2
      000220 C0 E0            [24]  852 	push	acc
      000222 74s00            [12]  853 	mov	a,#(___str_2 >> 8)
      000224 C0 E0            [24]  854 	push	acc
      000226 74 80            [12]  855 	mov	a,#0x80
      000228 C0 E0            [24]  856 	push	acc
      00022A 12r00r00         [24]  857 	lcall	_printf
      00022D E5 81            [12]  858 	mov	a,sp
      00022F 24 FB            [12]  859 	add	a,#0xfb
      000231 F5 81            [12]  860 	mov	sp,a
      000233 D0 05            [24]  861 	pop	ar5
      000235 D0 06            [24]  862 	pop	ar6
      000237 D0 07            [24]  863 	pop	ar7
                                    864 ;	crc16.c:81: if (intr) {
      000239 90r00r00         [24]  865 	mov	dptr,#_intr
      00023C E0               [24]  866 	movx	a,@dptr
      00023D F5 F0            [12]  867 	mov	b,a
      00023F A3               [24]  868 	inc	dptr
      000240 E0               [24]  869 	movx	a,@dptr
      000241 45 F0            [12]  870 	orl	a,b
      000243 60 17            [24]  871 	jz	00105$
                                    872 ;	crc16.c:82: printf("interrupted\n");
      000245 74r28            [12]  873 	mov	a,#___str_3
      000247 C0 E0            [24]  874 	push	acc
      000249 74s00            [12]  875 	mov	a,#(___str_3 >> 8)
      00024B C0 E0            [24]  876 	push	acc
      00024D 74 80            [12]  877 	mov	a,#0x80
      00024F C0 E0            [24]  878 	push	acc
      000251 12r00r00         [24]  879 	lcall	_printf
      000254 15 81            [12]  880 	dec	sp
      000256 15 81            [12]  881 	dec	sp
      000258 15 81            [12]  882 	dec	sp
                                    883 ;	crc16.c:83: break;
      00025A 80 07            [24]  884 	sjmp	00103$
      00025C                        885 00105$:
                                    886 ;	crc16.c:75: for (base = (unsigned char *)0x0u; 1; base += (len >> 1)) {
      00025C 74 10            [12]  887 	mov	a,#0x10
      00025E 2E               [12]  888 	add	a,r6
      00025F FE               [12]  889 	mov	r6,a
      000260 02r01rB7         [24]  890 	ljmp	00104$
      000263                        891 00103$:
                                    892 ;	crc16.c:90: __endasm;
      000263 02 00 00         [24]  893 	ljmp	0
                                    894 ;	crc16.c:95: }
      000266 22               [24]  895 	ret
                                    896 	.area CSEG    (CODE)
                                    897 	.area CONST   (CODE)
                                    898 	.area CONST   (CODE)
      000000                        899 ___str_0:
      000000 62 61 73 65 3D 30 78   900 	.ascii "base=0x%04x "
             25 30 34 78 20
      00000C 00                     901 	.db 0x00
                                    902 	.area CSEG    (CODE)
                                    903 	.area CONST   (CODE)
      00000D                        904 ___str_1:
      00000D 6C 65 6E 3D 30 78 25   905 	.ascii "len=0x%04x "
             30 34 78 20
      000018 00                     906 	.db 0x00
                                    907 	.area CSEG    (CODE)
                                    908 	.area CONST   (CODE)
      000019                        909 ___str_2:
      000019 43 52 43 31 36 3D 30   910 	.ascii "CRC16=0x%04x"
             78 25 30 34 78
      000025 0A                     911 	.db 0x0a
      000026 0D                     912 	.db 0x0d
      000027 00                     913 	.db 0x00
                                    914 	.area CSEG    (CODE)
                                    915 	.area CONST   (CODE)
      000028                        916 ___str_3:
      000028 69 6E 74 65 72 72 75   917 	.ascii "interrupted"
             70 74 65 64
      000033 0A                     918 	.db 0x0a
      000034 00                     919 	.db 0x00
                                    920 	.area CSEG    (CODE)
                                    921 	.area XINIT   (CODE)
                                    922 	.area CABS    (ABS,CODE)
